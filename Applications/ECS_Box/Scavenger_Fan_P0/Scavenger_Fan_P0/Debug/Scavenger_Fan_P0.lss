
Scavenger_Fan_P0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d35c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000d35c  0000d35c  0001d35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000063c  20000000  0000d364  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002063c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002063c  2**0
                  CONTENTS
  5 .bss          000009fc  2000063c  0000d9a0  0002063c  2**2
                  ALLOC
  6 .stack        00010000  20001038  0000e39c  0002063c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002063c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002066a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00053824  00000000  00000000  000206c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006dff  00000000  00000000  00073ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00017687  00000000  00000000  0007ace6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000029d8  00000000  00000000  0009236d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002718  00000000  00000000  00094d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00046f41  00000000  00000000  0009745d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002e1a7  00000000  00000000  000de39e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00135ddd  00000000  00000000  0010c545  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000b038  00000000  00000000  00242324  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 10 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     8.. ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	8d 51 00 00 91 3f 00 00 a1 3f 00 00 d1 02 00 00     .Q...?...?......
      7c:	b1 3f 00 00 c1 3f 00 00 d1 3f 00 00 e1 3f 00 00     .?...?...?...?..
      8c:	f1 3f 00 00 01 40 00 00 11 40 00 00 d1 02 00 00     .?...@...@......
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 ad 34 00 00 75 a0 00 00     .........4..u...
     184:	85 a0 00 00 95 a0 00 00 a5 a0 00 00 d1 02 00 00     ................
     194:	09 6b 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .k..............
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 25 6b 00 00     ............%k..
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	41 6b 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     Ak..............
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 c5 77 00 00 d1 02 00 00     .........w......
     1f4:	e1 77 00 00 d1 02 00 00 fd 77 00 00 19 78 00 00     .w.......w...x..
     204:	35 78 00 00 51 78 00 00 d1 02 00 00 d1 02 00 00     5x..Qx..........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000063c 	.word	0x2000063c
     280:	00000000 	.word	0x00000000
     284:	0000d364 	.word	0x0000d364

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000d364 	.word	0x0000d364
     2c4:	20000640 	.word	0x20000640
     2c8:	0000d364 	.word	0x0000d364
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0000d364 	.word	0x0000d364
     33c:	2000063c 	.word	0x2000063c
     340:	20001038 	.word	0x20001038
     344:	2000063c 	.word	0x2000063c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	0000cbd5 	.word	0x0000cbd5
     354:	00000359 	.word	0x00000359

00000358 <main>:


Scavenge_Fan sca;

int main(void)
{
     358:	b508      	push	{r3, lr}
	atmel_start_init();
     35a:	4b0a      	ldr	r3, [pc, #40]	; (384 <main+0x2c>)
     35c:	4798      	blx	r3
	sca.Init();
     35e:	480a      	ldr	r0, [pc, #40]	; (388 <main+0x30>)
     360:	4b0a      	ldr	r3, [pc, #40]	; (38c <main+0x34>)
     362:	4798      	blx	r3
    /* Replace with your application code */
    while (1) 
    {
		sca.SetEnable(true);
     364:	4e08      	ldr	r6, [pc, #32]	; (388 <main+0x30>)
     366:	4d0a      	ldr	r5, [pc, #40]	; (390 <main+0x38>)
		delay_ms(1000);
     368:	4c0a      	ldr	r4, [pc, #40]	; (394 <main+0x3c>)
		sca.SetEnable(true);
     36a:	2101      	movs	r1, #1
     36c:	4630      	mov	r0, r6
     36e:	47a8      	blx	r5
		delay_ms(1000);
     370:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     374:	47a0      	blx	r4
		sca.SetEnable(false);
     376:	2100      	movs	r1, #0
     378:	4630      	mov	r0, r6
     37a:	47a8      	blx	r5
		delay_ms(500);
     37c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     380:	47a0      	blx	r4
     382:	e7f2      	b.n	36a <main+0x12>
     384:	000004e9 	.word	0x000004e9
     388:	20000658 	.word	0x20000658
     38c:	0000044d 	.word	0x0000044d
     390:	00000415 	.word	0x00000415
     394:	00001cb5 	.word	0x00001cb5

00000398 <_GLOBAL__sub_I_sca>:
    }
}
     398:	b570      	push	{r4, r5, r6, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     39a:	4c0a      	ldr	r4, [pc, #40]	; (3c4 <_GLOBAL__sub_I_sca+0x2c>)
     39c:	f104 0514 	add.w	r5, r4, #20
     3a0:	4909      	ldr	r1, [pc, #36]	; (3c8 <_GLOBAL__sub_I_sca+0x30>)
     3a2:	4628      	mov	r0, r5
     3a4:	4b09      	ldr	r3, [pc, #36]	; (3cc <_GLOBAL__sub_I_sca+0x34>)
     3a6:	4798      	blx	r3
     3a8:	4e09      	ldr	r6, [pc, #36]	; (3d0 <_GLOBAL__sub_I_sca+0x38>)
     3aa:	4632      	mov	r2, r6
     3ac:	4909      	ldr	r1, [pc, #36]	; (3d4 <_GLOBAL__sub_I_sca+0x3c>)
     3ae:	4628      	mov	r0, r5
     3b0:	4d09      	ldr	r5, [pc, #36]	; (3d8 <_GLOBAL__sub_I_sca+0x40>)
     3b2:	47a8      	blx	r5
Scavenge_Fan sca;
     3b4:	4620      	mov	r0, r4
     3b6:	4b09      	ldr	r3, [pc, #36]	; (3dc <_GLOBAL__sub_I_sca+0x44>)
     3b8:	4798      	blx	r3
     3ba:	4632      	mov	r2, r6
     3bc:	4908      	ldr	r1, [pc, #32]	; (3e0 <_GLOBAL__sub_I_sca+0x48>)
     3be:	4620      	mov	r0, r4
     3c0:	47a8      	blx	r5
     3c2:	bd70      	pop	{r4, r5, r6, pc}
     3c4:	20000658 	.word	0x20000658
     3c8:	20000eb0 	.word	0x20000eb0
     3cc:	0000c511 	.word	0x0000c511
     3d0:	20000000 	.word	0x20000000
     3d4:	0000c52d 	.word	0x0000c52d
     3d8:	0000cba1 	.word	0x0000cba1
     3dc:	000003e5 	.word	0x000003e5
     3e0:	000003eb 	.word	0x000003eb

000003e4 <_ZN12Scavenge_FanC1Ev>:
static MCP23008_Class local_expander;

// default constructor
Scavenge_Fan::Scavenge_Fan()
{
	isOK=false;
     3e4:	2200      	movs	r2, #0
     3e6:	7082      	strb	r2, [r0, #2]
} //Scavenge_Fan
     3e8:	4770      	bx	lr

000003ea <_ZN12Scavenge_FanD1Ev>:

// default destructor
Scavenge_Fan::~Scavenge_Fan()
{
} //~Scavenge_Fan
     3ea:	4770      	bx	lr

000003ec <_ZN12Scavenge_Fan10ReadStatusEv>:
	{
	}
	return isOK;
}

uint8_t	Scavenge_Fan::ReadStatus(void){
     3ec:	b510      	push	{r4, lr}
     3ee:	4604      	mov	r4, r0
	uint8_t r=expander->ReadGPIORegister();
     3f0:	6880      	ldr	r0, [r0, #8]
     3f2:	4b07      	ldr	r3, [pc, #28]	; (410 <_ZN12Scavenge_Fan10ReadStatusEv+0x24>)
     3f4:	4798      	blx	r3
	
	
	scavengeData.tempFault=r&(0x01<<(7));
     3f6:	f3c0 13c0 	ubfx	r3, r0, #7, #1
     3fa:	70e3      	strb	r3, [r4, #3]
	scavengeData.SPDFault=r&(0x01<<(6));
     3fc:	f3c0 1380 	ubfx	r3, r0, #6, #1
     400:	7123      	strb	r3, [r4, #4]
	scavengeData.relayFault=r&(0x01<<(4));
     402:	f3c0 1300 	ubfx	r3, r0, #4, #1
     406:	7163      	strb	r3, [r4, #5]
	return r&0xF0;
	
}
     408:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
     40c:	bd10      	pop	{r4, pc}
     40e:	bf00      	nop
     410:	0000c7d9 	.word	0x0000c7d9

00000414 <_ZN12Scavenge_Fan9SetEnableEb>:
uint8_t	Scavenge_Fan::SetEnable(bool state){
     414:	b510      	push	{r4, lr}
     416:	4604      	mov	r4, r0

	enabled=expander->WriteDigit(1,!state);
     418:	f081 0201 	eor.w	r2, r1, #1
     41c:	2101      	movs	r1, #1
     41e:	6880      	ldr	r0, [r0, #8]
     420:	4b01      	ldr	r3, [pc, #4]	; (428 <_ZN12Scavenge_Fan9SetEnableEb+0x14>)
     422:	4798      	blx	r3
     424:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
     426:	bd10      	pop	{r4, pc}
     428:	0000c9c9 	.word	0x0000c9c9

0000042c <_ZN12Scavenge_Fan8SelfTestEv>:

	uint8_t value=expander->ReadGPIORegister();
	enabled=!(value&0x02);
	return enabled;
}
bool Scavenge_Fan::SelfTest(){
     42c:	b510      	push	{r4, lr}
     42e:	4604      	mov	r4, r0
	if ((ReadStatus()&0xd0)<0xd)
     430:	4b05      	ldr	r3, [pc, #20]	; (448 <_ZN12Scavenge_Fan8SelfTestEv+0x1c>)
     432:	4798      	blx	r3
     434:	f000 00d0 	and.w	r0, r0, #208	; 0xd0
     438:	280c      	cmp	r0, #12
	{
		bool_result=false;
     43a:	bfd4      	ite	le
     43c:	2300      	movle	r3, #0
	} 
	else
	{
		bool_result=true;
     43e:	2301      	movgt	r3, #1
     440:	7423      	strb	r3, [r4, #16]
	}
	return bool_result;
     442:	7c20      	ldrb	r0, [r4, #16]
     444:	bd10      	pop	{r4, pc}
     446:	bf00      	nop
     448:	000003ed 	.word	0x000003ed

0000044c <_ZN12Scavenge_Fan4InitEv>:
bool Scavenge_Fan::Init(void){
     44c:	b510      	push	{r4, lr}
     44e:	4604      	mov	r4, r0
	i2c=&i2cSharedStatic;
     450:	4a0d      	ldr	r2, [pc, #52]	; (488 <_ZN12Scavenge_Fan4InitEv+0x3c>)
     452:	60c2      	str	r2, [r0, #12]
	expander=&local_expander;
     454:	f102 0018 	add.w	r0, r2, #24
     458:	60a0      	str	r0, [r4, #8]
	expander->Init(MCP23008_SCAVENGE_ADDRESS,i2c);
     45a:	2124      	movs	r1, #36	; 0x24
     45c:	4b0b      	ldr	r3, [pc, #44]	; (48c <_ZN12Scavenge_Fan4InitEv+0x40>)
     45e:	4798      	blx	r3
	if (i2c->initiated)
     460:	68e0      	ldr	r0, [r4, #12]
     462:	7a03      	ldrb	r3, [r0, #8]
     464:	b123      	cbz	r3, 470 <_ZN12Scavenge_Fan4InitEv+0x24>
	if (i2c->isOK)
     466:	68e3      	ldr	r3, [r4, #12]
     468:	7a5b      	ldrb	r3, [r3, #9]
     46a:	b923      	cbnz	r3, 476 <_ZN12Scavenge_Fan4InitEv+0x2a>
}
     46c:	78a0      	ldrb	r0, [r4, #2]
     46e:	bd10      	pop	{r4, pc}
		i2c->Init();
     470:	4b07      	ldr	r3, [pc, #28]	; (490 <_ZN12Scavenge_Fan4InitEv+0x44>)
     472:	4798      	blx	r3
     474:	e7f7      	b.n	466 <_ZN12Scavenge_Fan4InitEv+0x1a>
		expander->SetPortInput(0xf0);
     476:	21f0      	movs	r1, #240	; 0xf0
     478:	68a0      	ldr	r0, [r4, #8]
     47a:	4b06      	ldr	r3, [pc, #24]	; (494 <_ZN12Scavenge_Fan4InitEv+0x48>)
     47c:	4798      	blx	r3
		isOK=SelfTest();
     47e:	4620      	mov	r0, r4
     480:	4b05      	ldr	r3, [pc, #20]	; (498 <_ZN12Scavenge_Fan4InitEv+0x4c>)
     482:	4798      	blx	r3
     484:	70a0      	strb	r0, [r4, #2]
     486:	e7f1      	b.n	46c <_ZN12Scavenge_Fan4InitEv+0x20>
     488:	20000684 	.word	0x20000684
     48c:	0000c6f5 	.word	0x0000c6f5
     490:	0000c541 	.word	0x0000c541
     494:	0000c85d 	.word	0x0000c85d
     498:	0000042d 	.word	0x0000042d

0000049c <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev>:
     49c:	b570      	push	{r4, r5, r6, lr}
     49e:	4c0a      	ldr	r4, [pc, #40]	; (4c8 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x2c>)
     4a0:	490a      	ldr	r1, [pc, #40]	; (4cc <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x30>)
     4a2:	4620      	mov	r0, r4
     4a4:	4b0a      	ldr	r3, [pc, #40]	; (4d0 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x34>)
     4a6:	4798      	blx	r3
     4a8:	4e0a      	ldr	r6, [pc, #40]	; (4d4 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x38>)
     4aa:	4632      	mov	r2, r6
     4ac:	490a      	ldr	r1, [pc, #40]	; (4d8 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x3c>)
     4ae:	4620      	mov	r0, r4
     4b0:	4d0a      	ldr	r5, [pc, #40]	; (4dc <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x40>)
     4b2:	47a8      	blx	r5
static MCP23008_Class local_expander;
     4b4:	3418      	adds	r4, #24
     4b6:	4620      	mov	r0, r4
     4b8:	4b09      	ldr	r3, [pc, #36]	; (4e0 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x44>)
     4ba:	4798      	blx	r3
     4bc:	4632      	mov	r2, r6
     4be:	4909      	ldr	r1, [pc, #36]	; (4e4 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x48>)
     4c0:	4620      	mov	r0, r4
     4c2:	47a8      	blx	r5
     4c4:	bd70      	pop	{r4, r5, r6, pc}
     4c6:	bf00      	nop
     4c8:	20000684 	.word	0x20000684
     4cc:	20000eb0 	.word	0x20000eb0
     4d0:	0000c511 	.word	0x0000c511
     4d4:	20000000 	.word	0x20000000
     4d8:	0000c52d 	.word	0x0000c52d
     4dc:	0000cba1 	.word	0x0000cba1
     4e0:	0000c6cd 	.word	0x0000c6cd
     4e4:	0000c6e1 	.word	0x0000c6e1

000004e8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     4e8:	b580      	push	{r7, lr}
     4ea:	af00      	add	r7, sp, #0
	system_init();
     4ec:	4b03      	ldr	r3, [pc, #12]	; (4fc <atmel_start_init+0x14>)
     4ee:	4798      	blx	r3
	usb_init();
     4f0:	4b03      	ldr	r3, [pc, #12]	; (500 <atmel_start_init+0x18>)
     4f2:	4798      	blx	r3
	spi_nor_flash_init();
     4f4:	4b03      	ldr	r3, [pc, #12]	; (504 <atmel_start_init+0x1c>)
     4f6:	4798      	blx	r3
}
     4f8:	bf00      	nop
     4fa:	bd80      	pop	{r7, pc}
     4fc:	000018e9 	.word	0x000018e9
     500:	0000a779 	.word	0x0000a779
     504:	0000a70d 	.word	0x0000a70d

00000508 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     508:	b480      	push	{r7}
     50a:	b085      	sub	sp, #20
     50c:	af00      	add	r7, sp, #0
     50e:	60f8      	str	r0, [r7, #12]
     510:	460b      	mov	r3, r1
     512:	607a      	str	r2, [r7, #4]
     514:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     516:	7afa      	ldrb	r2, [r7, #11]
     518:	68fb      	ldr	r3, [r7, #12]
     51a:	3220      	adds	r2, #32
     51c:	6879      	ldr	r1, [r7, #4]
     51e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     522:	bf00      	nop
     524:	3714      	adds	r7, #20
     526:	46bd      	mov	sp, r7
     528:	f85d 7b04 	ldr.w	r7, [sp], #4
     52c:	4770      	bx	lr

0000052e <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     52e:	b480      	push	{r7}
     530:	b083      	sub	sp, #12
     532:	af00      	add	r7, sp, #0
     534:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     536:	687b      	ldr	r3, [r7, #4]
     538:	691b      	ldr	r3, [r3, #16]
     53a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     53e:	687b      	ldr	r3, [r7, #4]
     540:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     542:	bf00      	nop
     544:	370c      	adds	r7, #12
     546:	46bd      	mov	sp, r7
     548:	f85d 7b04 	ldr.w	r7, [sp], #4
     54c:	4770      	bx	lr

0000054e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     54e:	b480      	push	{r7}
     550:	b083      	sub	sp, #12
     552:	af00      	add	r7, sp, #0
     554:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     556:	687b      	ldr	r3, [r7, #4]
     558:	691b      	ldr	r3, [r3, #16]
     55a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     55e:	687b      	ldr	r3, [r7, #4]
     560:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     562:	bf00      	nop
     564:	370c      	adds	r7, #12
     566:	46bd      	mov	sp, r7
     568:	f85d 7b04 	ldr.w	r7, [sp], #4
     56c:	4770      	bx	lr

0000056e <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     56e:	b480      	push	{r7}
     570:	b083      	sub	sp, #12
     572:	af00      	add	r7, sp, #0
     574:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     576:	687b      	ldr	r3, [r7, #4]
     578:	691b      	ldr	r3, [r3, #16]
     57a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     57e:	687b      	ldr	r3, [r7, #4]
     580:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     582:	bf00      	nop
     584:	370c      	adds	r7, #12
     586:	46bd      	mov	sp, r7
     588:	f85d 7b04 	ldr.w	r7, [sp], #4
     58c:	4770      	bx	lr

0000058e <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     58e:	b480      	push	{r7}
     590:	b083      	sub	sp, #12
     592:	af00      	add	r7, sp, #0
     594:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     596:	687b      	ldr	r3, [r7, #4]
     598:	691b      	ldr	r3, [r3, #16]
     59a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     59e:	687b      	ldr	r3, [r7, #4]
     5a0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5a2:	bf00      	nop
     5a4:	370c      	adds	r7, #12
     5a6:	46bd      	mov	sp, r7
     5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
     5ac:	4770      	bx	lr

000005ae <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     5ae:	b480      	push	{r7}
     5b0:	b083      	sub	sp, #12
     5b2:	af00      	add	r7, sp, #0
     5b4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     5b6:	687b      	ldr	r3, [r7, #4]
     5b8:	695b      	ldr	r3, [r3, #20]
     5ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     5be:	687b      	ldr	r3, [r7, #4]
     5c0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5c2:	bf00      	nop
     5c4:	370c      	adds	r7, #12
     5c6:	46bd      	mov	sp, r7
     5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
     5cc:	4770      	bx	lr

000005ce <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     5ce:	b480      	push	{r7}
     5d0:	b083      	sub	sp, #12
     5d2:	af00      	add	r7, sp, #0
     5d4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	695b      	ldr	r3, [r3, #20]
     5da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     5de:	687b      	ldr	r3, [r7, #4]
     5e0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5e2:	bf00      	nop
     5e4:	370c      	adds	r7, #12
     5e6:	46bd      	mov	sp, r7
     5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     5ec:	4770      	bx	lr

000005ee <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     5ee:	b480      	push	{r7}
     5f0:	b083      	sub	sp, #12
     5f2:	af00      	add	r7, sp, #0
     5f4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     5f6:	687b      	ldr	r3, [r7, #4]
     5f8:	695b      	ldr	r3, [r3, #20]
     5fa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     5fe:	687b      	ldr	r3, [r7, #4]
     600:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     602:	bf00      	nop
     604:	370c      	adds	r7, #12
     606:	46bd      	mov	sp, r7
     608:	f85d 7b04 	ldr.w	r7, [sp], #4
     60c:	4770      	bx	lr

0000060e <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     60e:	b480      	push	{r7}
     610:	b083      	sub	sp, #12
     612:	af00      	add	r7, sp, #0
     614:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     616:	687b      	ldr	r3, [r7, #4]
     618:	695b      	ldr	r3, [r3, #20]
     61a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     61e:	687b      	ldr	r3, [r7, #4]
     620:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     622:	bf00      	nop
     624:	370c      	adds	r7, #12
     626:	46bd      	mov	sp, r7
     628:	f85d 7b04 	ldr.w	r7, [sp], #4
     62c:	4770      	bx	lr

0000062e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     62e:	b480      	push	{r7}
     630:	b083      	sub	sp, #12
     632:	af00      	add	r7, sp, #0
     634:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     636:	687b      	ldr	r3, [r7, #4]
     638:	695b      	ldr	r3, [r3, #20]
     63a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     63e:	687b      	ldr	r3, [r7, #4]
     640:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     642:	bf00      	nop
     644:	370c      	adds	r7, #12
     646:	46bd      	mov	sp, r7
     648:	f85d 7b04 	ldr.w	r7, [sp], #4
     64c:	4770      	bx	lr

0000064e <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     64e:	b480      	push	{r7}
     650:	b083      	sub	sp, #12
     652:	af00      	add	r7, sp, #0
     654:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     656:	687b      	ldr	r3, [r7, #4]
     658:	699b      	ldr	r3, [r3, #24]
     65a:	f043 0201 	orr.w	r2, r3, #1
     65e:	687b      	ldr	r3, [r7, #4]
     660:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     662:	bf00      	nop
     664:	370c      	adds	r7, #12
     666:	46bd      	mov	sp, r7
     668:	f85d 7b04 	ldr.w	r7, [sp], #4
     66c:	4770      	bx	lr

0000066e <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     66e:	b480      	push	{r7}
     670:	b083      	sub	sp, #12
     672:	af00      	add	r7, sp, #0
     674:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     676:	687b      	ldr	r3, [r7, #4]
     678:	699b      	ldr	r3, [r3, #24]
     67a:	f043 0202 	orr.w	r2, r3, #2
     67e:	687b      	ldr	r3, [r7, #4]
     680:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     682:	bf00      	nop
     684:	370c      	adds	r7, #12
     686:	46bd      	mov	sp, r7
     688:	f85d 7b04 	ldr.w	r7, [sp], #4
     68c:	4770      	bx	lr

0000068e <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     68e:	b480      	push	{r7}
     690:	b083      	sub	sp, #12
     692:	af00      	add	r7, sp, #0
     694:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     696:	687b      	ldr	r3, [r7, #4]
     698:	699b      	ldr	r3, [r3, #24]
     69a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     69e:	687b      	ldr	r3, [r7, #4]
     6a0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6a2:	bf00      	nop
     6a4:	370c      	adds	r7, #12
     6a6:	46bd      	mov	sp, r7
     6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ac:	4770      	bx	lr

000006ae <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     6ae:	b480      	push	{r7}
     6b0:	b083      	sub	sp, #12
     6b2:	af00      	add	r7, sp, #0
     6b4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     6b6:	687b      	ldr	r3, [r7, #4]
     6b8:	699b      	ldr	r3, [r3, #24]
     6ba:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     6be:	687b      	ldr	r3, [r7, #4]
     6c0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6c2:	bf00      	nop
     6c4:	370c      	adds	r7, #12
     6c6:	46bd      	mov	sp, r7
     6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
     6cc:	4770      	bx	lr

000006ce <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     6ce:	b480      	push	{r7}
     6d0:	b083      	sub	sp, #12
     6d2:	af00      	add	r7, sp, #0
     6d4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     6d6:	687b      	ldr	r3, [r7, #4]
     6d8:	699b      	ldr	r3, [r3, #24]
     6da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6e2:	bf00      	nop
     6e4:	370c      	adds	r7, #12
     6e6:	46bd      	mov	sp, r7
     6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ec:	4770      	bx	lr

000006ee <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     6ee:	b480      	push	{r7}
     6f0:	b083      	sub	sp, #12
     6f2:	af00      	add	r7, sp, #0
     6f4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     6f6:	687b      	ldr	r3, [r7, #4]
     6f8:	699b      	ldr	r3, [r3, #24]
     6fa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     702:	bf00      	nop
     704:	370c      	adds	r7, #12
     706:	46bd      	mov	sp, r7
     708:	f85d 7b04 	ldr.w	r7, [sp], #4
     70c:	4770      	bx	lr

0000070e <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
     70e:	b480      	push	{r7}
     710:	b083      	sub	sp, #12
     712:	af00      	add	r7, sp, #0
     714:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     716:	687b      	ldr	r3, [r7, #4]
     718:	69db      	ldr	r3, [r3, #28]
     71a:	f043 0208 	orr.w	r2, r3, #8
     71e:	687b      	ldr	r3, [r7, #4]
     720:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     722:	bf00      	nop
     724:	370c      	adds	r7, #12
     726:	46bd      	mov	sp, r7
     728:	f85d 7b04 	ldr.w	r7, [sp], #4
     72c:	4770      	bx	lr

0000072e <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     72e:	b480      	push	{r7}
     730:	b083      	sub	sp, #12
     732:	af00      	add	r7, sp, #0
     734:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     736:	687b      	ldr	r3, [r7, #4]
     738:	69db      	ldr	r3, [r3, #28]
     73a:	f043 0220 	orr.w	r2, r3, #32
     73e:	687b      	ldr	r3, [r7, #4]
     740:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     742:	bf00      	nop
     744:	370c      	adds	r7, #12
     746:	46bd      	mov	sp, r7
     748:	f85d 7b04 	ldr.w	r7, [sp], #4
     74c:	4770      	bx	lr

0000074e <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     74e:	b480      	push	{r7}
     750:	b083      	sub	sp, #12
     752:	af00      	add	r7, sp, #0
     754:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     756:	687b      	ldr	r3, [r7, #4]
     758:	69db      	ldr	r3, [r3, #28]
     75a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     75e:	687b      	ldr	r3, [r7, #4]
     760:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     762:	bf00      	nop
     764:	370c      	adds	r7, #12
     766:	46bd      	mov	sp, r7
     768:	f85d 7b04 	ldr.w	r7, [sp], #4
     76c:	4770      	bx	lr

0000076e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     76e:	b480      	push	{r7}
     770:	b083      	sub	sp, #12
     772:	af00      	add	r7, sp, #0
     774:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     776:	687b      	ldr	r3, [r7, #4]
     778:	69db      	ldr	r3, [r3, #28]
     77a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     77e:	687b      	ldr	r3, [r7, #4]
     780:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     782:	bf00      	nop
     784:	370c      	adds	r7, #12
     786:	46bd      	mov	sp, r7
     788:	f85d 7b04 	ldr.w	r7, [sp], #4
     78c:	4770      	bx	lr

0000078e <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     78e:	b480      	push	{r7}
     790:	b083      	sub	sp, #12
     792:	af00      	add	r7, sp, #0
     794:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     796:	687b      	ldr	r3, [r7, #4]
     798:	6a1b      	ldr	r3, [r3, #32]
     79a:	f043 0201 	orr.w	r2, r3, #1
     79e:	687b      	ldr	r3, [r7, #4]
     7a0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7a2:	bf00      	nop
     7a4:	370c      	adds	r7, #12
     7a6:	46bd      	mov	sp, r7
     7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
     7ac:	4770      	bx	lr

000007ae <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     7ae:	b480      	push	{r7}
     7b0:	b083      	sub	sp, #12
     7b2:	af00      	add	r7, sp, #0
     7b4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     7b6:	687b      	ldr	r3, [r7, #4]
     7b8:	6a1b      	ldr	r3, [r3, #32]
     7ba:	f043 0202 	orr.w	r2, r3, #2
     7be:	687b      	ldr	r3, [r7, #4]
     7c0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7c2:	bf00      	nop
     7c4:	370c      	adds	r7, #12
     7c6:	46bd      	mov	sp, r7
     7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
     7cc:	4770      	bx	lr

000007ce <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     7ce:	b480      	push	{r7}
     7d0:	b083      	sub	sp, #12
     7d2:	af00      	add	r7, sp, #0
     7d4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     7d6:	687b      	ldr	r3, [r7, #4]
     7d8:	6a1b      	ldr	r3, [r3, #32]
     7da:	f043 0204 	orr.w	r2, r3, #4
     7de:	687b      	ldr	r3, [r7, #4]
     7e0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7e2:	bf00      	nop
     7e4:	370c      	adds	r7, #12
     7e6:	46bd      	mov	sp, r7
     7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     7ec:	4770      	bx	lr

000007ee <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     7ee:	b480      	push	{r7}
     7f0:	b083      	sub	sp, #12
     7f2:	af00      	add	r7, sp, #0
     7f4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     7f6:	687b      	ldr	r3, [r7, #4]
     7f8:	6a1b      	ldr	r3, [r3, #32]
     7fa:	f043 0208 	orr.w	r2, r3, #8
     7fe:	687b      	ldr	r3, [r7, #4]
     800:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     802:	bf00      	nop
     804:	370c      	adds	r7, #12
     806:	46bd      	mov	sp, r7
     808:	f85d 7b04 	ldr.w	r7, [sp], #4
     80c:	4770      	bx	lr

0000080e <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     80e:	b480      	push	{r7}
     810:	b083      	sub	sp, #12
     812:	af00      	add	r7, sp, #0
     814:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     816:	687b      	ldr	r3, [r7, #4]
     818:	6a1b      	ldr	r3, [r3, #32]
     81a:	f043 0220 	orr.w	r2, r3, #32
     81e:	687b      	ldr	r3, [r7, #4]
     820:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     822:	bf00      	nop
     824:	370c      	adds	r7, #12
     826:	46bd      	mov	sp, r7
     828:	f85d 7b04 	ldr.w	r7, [sp], #4
     82c:	4770      	bx	lr

0000082e <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     82e:	b480      	push	{r7}
     830:	b083      	sub	sp, #12
     832:	af00      	add	r7, sp, #0
     834:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     836:	687b      	ldr	r3, [r7, #4]
     838:	6a1b      	ldr	r3, [r3, #32]
     83a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     83e:	687b      	ldr	r3, [r7, #4]
     840:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     842:	bf00      	nop
     844:	370c      	adds	r7, #12
     846:	46bd      	mov	sp, r7
     848:	f85d 7b04 	ldr.w	r7, [sp], #4
     84c:	4770      	bx	lr

0000084e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     84e:	b480      	push	{r7}
     850:	b085      	sub	sp, #20
     852:	af00      	add	r7, sp, #0
     854:	60f8      	str	r0, [r7, #12]
     856:	460b      	mov	r3, r1
     858:	607a      	str	r2, [r7, #4]
     85a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     85c:	7afb      	ldrb	r3, [r7, #11]
     85e:	68fa      	ldr	r2, [r7, #12]
     860:	01db      	lsls	r3, r3, #7
     862:	4413      	add	r3, r2
     864:	3308      	adds	r3, #8
     866:	687a      	ldr	r2, [r7, #4]
     868:	601a      	str	r2, [r3, #0]
}
     86a:	bf00      	nop
     86c:	3714      	adds	r7, #20
     86e:	46bd      	mov	sp, r7
     870:	f85d 7b04 	ldr.w	r7, [sp], #4
     874:	4770      	bx	lr

00000876 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     876:	b480      	push	{r7}
     878:	b085      	sub	sp, #20
     87a:	af00      	add	r7, sp, #0
     87c:	60f8      	str	r0, [r7, #12]
     87e:	460b      	mov	r3, r1
     880:	607a      	str	r2, [r7, #4]
     882:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     884:	7afb      	ldrb	r3, [r7, #11]
     886:	68fa      	ldr	r2, [r7, #12]
     888:	01db      	lsls	r3, r3, #7
     88a:	4413      	add	r3, r2
     88c:	3304      	adds	r3, #4
     88e:	687a      	ldr	r2, [r7, #4]
     890:	601a      	str	r2, [r3, #0]
}
     892:	bf00      	nop
     894:	3714      	adds	r7, #20
     896:	46bd      	mov	sp, r7
     898:	f85d 7b04 	ldr.w	r7, [sp], #4
     89c:	4770      	bx	lr

0000089e <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     89e:	b480      	push	{r7}
     8a0:	b085      	sub	sp, #20
     8a2:	af00      	add	r7, sp, #0
     8a4:	60f8      	str	r0, [r7, #12]
     8a6:	460b      	mov	r3, r1
     8a8:	607a      	str	r2, [r7, #4]
     8aa:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8ac:	7afb      	ldrb	r3, [r7, #11]
     8ae:	68fa      	ldr	r2, [r7, #12]
     8b0:	01db      	lsls	r3, r3, #7
     8b2:	4413      	add	r3, r2
     8b4:	3318      	adds	r3, #24
     8b6:	687a      	ldr	r2, [r7, #4]
     8b8:	601a      	str	r2, [r3, #0]
}
     8ba:	bf00      	nop
     8bc:	3714      	adds	r7, #20
     8be:	46bd      	mov	sp, r7
     8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8c4:	4770      	bx	lr

000008c6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     8c6:	b480      	push	{r7}
     8c8:	b085      	sub	sp, #20
     8ca:	af00      	add	r7, sp, #0
     8cc:	60f8      	str	r0, [r7, #12]
     8ce:	460b      	mov	r3, r1
     8d0:	607a      	str	r2, [r7, #4]
     8d2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8d4:	7afb      	ldrb	r3, [r7, #11]
     8d6:	68fa      	ldr	r2, [r7, #12]
     8d8:	01db      	lsls	r3, r3, #7
     8da:	4413      	add	r3, r2
     8dc:	3314      	adds	r3, #20
     8de:	687a      	ldr	r2, [r7, #4]
     8e0:	601a      	str	r2, [r3, #0]
}
     8e2:	bf00      	nop
     8e4:	3714      	adds	r7, #20
     8e6:	46bd      	mov	sp, r7
     8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     8ec:	4770      	bx	lr

000008ee <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     8ee:	b480      	push	{r7}
     8f0:	b085      	sub	sp, #20
     8f2:	af00      	add	r7, sp, #0
     8f4:	6078      	str	r0, [r7, #4]
     8f6:	4608      	mov	r0, r1
     8f8:	4611      	mov	r1, r2
     8fa:	461a      	mov	r2, r3
     8fc:	4603      	mov	r3, r0
     8fe:	70fb      	strb	r3, [r7, #3]
     900:	460b      	mov	r3, r1
     902:	70bb      	strb	r3, [r7, #2]
     904:	4613      	mov	r3, r2
     906:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     908:	78fa      	ldrb	r2, [r7, #3]
     90a:	78bb      	ldrb	r3, [r7, #2]
     90c:	6879      	ldr	r1, [r7, #4]
     90e:	01d2      	lsls	r2, r2, #7
     910:	440a      	add	r2, r1
     912:	4413      	add	r3, r2
     914:	3330      	adds	r3, #48	; 0x30
     916:	781b      	ldrb	r3, [r3, #0]
     918:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     91a:	7bfb      	ldrb	r3, [r7, #15]
     91c:	f023 030f 	bic.w	r3, r3, #15
     920:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     922:	787b      	ldrb	r3, [r7, #1]
     924:	f003 030f 	and.w	r3, r3, #15
     928:	b2da      	uxtb	r2, r3
     92a:	7bfb      	ldrb	r3, [r7, #15]
     92c:	4313      	orrs	r3, r2
     92e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     930:	78fa      	ldrb	r2, [r7, #3]
     932:	78bb      	ldrb	r3, [r7, #2]
     934:	6879      	ldr	r1, [r7, #4]
     936:	01d2      	lsls	r2, r2, #7
     938:	440a      	add	r2, r1
     93a:	4413      	add	r3, r2
     93c:	3330      	adds	r3, #48	; 0x30
     93e:	7bfa      	ldrb	r2, [r7, #15]
     940:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     942:	bf00      	nop
     944:	3714      	adds	r7, #20
     946:	46bd      	mov	sp, r7
     948:	f85d 7b04 	ldr.w	r7, [sp], #4
     94c:	4770      	bx	lr

0000094e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     94e:	b480      	push	{r7}
     950:	b085      	sub	sp, #20
     952:	af00      	add	r7, sp, #0
     954:	6078      	str	r0, [r7, #4]
     956:	4608      	mov	r0, r1
     958:	4611      	mov	r1, r2
     95a:	461a      	mov	r2, r3
     95c:	4603      	mov	r3, r0
     95e:	70fb      	strb	r3, [r7, #3]
     960:	460b      	mov	r3, r1
     962:	70bb      	strb	r3, [r7, #2]
     964:	4613      	mov	r3, r2
     966:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     968:	78fa      	ldrb	r2, [r7, #3]
     96a:	78bb      	ldrb	r3, [r7, #2]
     96c:	6879      	ldr	r1, [r7, #4]
     96e:	01d2      	lsls	r2, r2, #7
     970:	440a      	add	r2, r1
     972:	4413      	add	r3, r2
     974:	3330      	adds	r3, #48	; 0x30
     976:	781b      	ldrb	r3, [r3, #0]
     978:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     97a:	7bfb      	ldrb	r3, [r7, #15]
     97c:	f003 030f 	and.w	r3, r3, #15
     980:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     982:	787b      	ldrb	r3, [r7, #1]
     984:	011b      	lsls	r3, r3, #4
     986:	b2da      	uxtb	r2, r3
     988:	7bfb      	ldrb	r3, [r7, #15]
     98a:	4313      	orrs	r3, r2
     98c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     98e:	78fa      	ldrb	r2, [r7, #3]
     990:	78bb      	ldrb	r3, [r7, #2]
     992:	6879      	ldr	r1, [r7, #4]
     994:	01d2      	lsls	r2, r2, #7
     996:	440a      	add	r2, r1
     998:	4413      	add	r3, r2
     99a:	3330      	adds	r3, #48	; 0x30
     99c:	7bfa      	ldrb	r2, [r7, #15]
     99e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     9a0:	bf00      	nop
     9a2:	3714      	adds	r7, #20
     9a4:	46bd      	mov	sp, r7
     9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     9aa:	4770      	bx	lr

000009ac <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     9ac:	b480      	push	{r7}
     9ae:	b085      	sub	sp, #20
     9b0:	af00      	add	r7, sp, #0
     9b2:	6078      	str	r0, [r7, #4]
     9b4:	4608      	mov	r0, r1
     9b6:	4611      	mov	r1, r2
     9b8:	461a      	mov	r2, r3
     9ba:	4603      	mov	r3, r0
     9bc:	70fb      	strb	r3, [r7, #3]
     9be:	460b      	mov	r3, r1
     9c0:	70bb      	strb	r3, [r7, #2]
     9c2:	4613      	mov	r3, r2
     9c4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9c6:	78fa      	ldrb	r2, [r7, #3]
     9c8:	78bb      	ldrb	r3, [r7, #2]
     9ca:	6879      	ldr	r1, [r7, #4]
     9cc:	01d2      	lsls	r2, r2, #7
     9ce:	440a      	add	r2, r1
     9d0:	4413      	add	r3, r2
     9d2:	3340      	adds	r3, #64	; 0x40
     9d4:	781b      	ldrb	r3, [r3, #0]
     9d6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     9d8:	7bfb      	ldrb	r3, [r7, #15]
     9da:	f023 0301 	bic.w	r3, r3, #1
     9de:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9e0:	787a      	ldrb	r2, [r7, #1]
     9e2:	7bfb      	ldrb	r3, [r7, #15]
     9e4:	4313      	orrs	r3, r2
     9e6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e8:	78fa      	ldrb	r2, [r7, #3]
     9ea:	78bb      	ldrb	r3, [r7, #2]
     9ec:	6879      	ldr	r1, [r7, #4]
     9ee:	01d2      	lsls	r2, r2, #7
     9f0:	440a      	add	r2, r1
     9f2:	4413      	add	r3, r2
     9f4:	3340      	adds	r3, #64	; 0x40
     9f6:	7bfa      	ldrb	r2, [r7, #15]
     9f8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     9fa:	bf00      	nop
     9fc:	3714      	adds	r7, #20
     9fe:	46bd      	mov	sp, r7
     a00:	f85d 7b04 	ldr.w	r7, [sp], #4
     a04:	4770      	bx	lr

00000a06 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     a06:	b490      	push	{r4, r7}
     a08:	b082      	sub	sp, #8
     a0a:	af00      	add	r7, sp, #0
     a0c:	6078      	str	r0, [r7, #4]
     a0e:	460b      	mov	r3, r1
     a10:	70fb      	strb	r3, [r7, #3]
     a12:	4613      	mov	r3, r2
     a14:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     a16:	78fa      	ldrb	r2, [r7, #3]
     a18:	78bb      	ldrb	r3, [r7, #2]
     a1a:	78f8      	ldrb	r0, [r7, #3]
     a1c:	78b9      	ldrb	r1, [r7, #2]
     a1e:	687c      	ldr	r4, [r7, #4]
     a20:	01c0      	lsls	r0, r0, #7
     a22:	4420      	add	r0, r4
     a24:	4401      	add	r1, r0
     a26:	3140      	adds	r1, #64	; 0x40
     a28:	7809      	ldrb	r1, [r1, #0]
     a2a:	b2c9      	uxtb	r1, r1
     a2c:	f041 0104 	orr.w	r1, r1, #4
     a30:	b2c8      	uxtb	r0, r1
     a32:	6879      	ldr	r1, [r7, #4]
     a34:	01d2      	lsls	r2, r2, #7
     a36:	440a      	add	r2, r1
     a38:	4413      	add	r3, r2
     a3a:	3340      	adds	r3, #64	; 0x40
     a3c:	4602      	mov	r2, r0
     a3e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     a40:	bf00      	nop
     a42:	3708      	adds	r7, #8
     a44:	46bd      	mov	sp, r7
     a46:	bc90      	pop	{r4, r7}
     a48:	4770      	bx	lr

00000a4a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     a4a:	b490      	push	{r4, r7}
     a4c:	b082      	sub	sp, #8
     a4e:	af00      	add	r7, sp, #0
     a50:	6078      	str	r0, [r7, #4]
     a52:	460b      	mov	r3, r1
     a54:	70fb      	strb	r3, [r7, #3]
     a56:	4613      	mov	r3, r2
     a58:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a5a:	78fa      	ldrb	r2, [r7, #3]
     a5c:	78bb      	ldrb	r3, [r7, #2]
     a5e:	78f8      	ldrb	r0, [r7, #3]
     a60:	78b9      	ldrb	r1, [r7, #2]
     a62:	687c      	ldr	r4, [r7, #4]
     a64:	01c0      	lsls	r0, r0, #7
     a66:	4420      	add	r0, r4
     a68:	4401      	add	r1, r0
     a6a:	3140      	adds	r1, #64	; 0x40
     a6c:	7809      	ldrb	r1, [r1, #0]
     a6e:	b2c9      	uxtb	r1, r1
     a70:	f021 0104 	bic.w	r1, r1, #4
     a74:	b2c8      	uxtb	r0, r1
     a76:	6879      	ldr	r1, [r7, #4]
     a78:	01d2      	lsls	r2, r2, #7
     a7a:	440a      	add	r2, r1
     a7c:	4413      	add	r3, r2
     a7e:	3340      	adds	r3, #64	; 0x40
     a80:	4602      	mov	r2, r0
     a82:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     a84:	bf00      	nop
     a86:	3708      	adds	r7, #8
     a88:	46bd      	mov	sp, r7
     a8a:	bc90      	pop	{r4, r7}
     a8c:	4770      	bx	lr

00000a8e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     a8e:	b480      	push	{r7}
     a90:	b085      	sub	sp, #20
     a92:	af00      	add	r7, sp, #0
     a94:	60f8      	str	r0, [r7, #12]
     a96:	460b      	mov	r3, r1
     a98:	607a      	str	r2, [r7, #4]
     a9a:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a9c:	7afb      	ldrb	r3, [r7, #11]
     a9e:	68fa      	ldr	r2, [r7, #12]
     aa0:	01db      	lsls	r3, r3, #7
     aa2:	4413      	add	r3, r2
     aa4:	3328      	adds	r3, #40	; 0x28
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     aaa:	bf00      	nop
     aac:	3714      	adds	r7, #20
     aae:	46bd      	mov	sp, r7
     ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab4:	4770      	bx	lr
	...

00000ab8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     ab8:	b580      	push	{r7, lr}
     aba:	b082      	sub	sp, #8
     abc:	af00      	add	r7, sp, #0
     abe:	4603      	mov	r3, r0
     ac0:	6039      	str	r1, [r7, #0]
     ac2:	71fb      	strb	r3, [r7, #7]
     ac4:	4613      	mov	r3, r2
     ac6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     ac8:	79bb      	ldrb	r3, [r7, #6]
     aca:	2b01      	cmp	r3, #1
     acc:	d01c      	beq.n	b08 <_gpio_set_direction+0x50>
     ace:	2b02      	cmp	r3, #2
     ad0:	d037      	beq.n	b42 <_gpio_set_direction+0x8a>
     ad2:	2b00      	cmp	r3, #0
     ad4:	d14e      	bne.n	b74 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     ad6:	79fb      	ldrb	r3, [r7, #7]
     ad8:	683a      	ldr	r2, [r7, #0]
     ada:	4619      	mov	r1, r3
     adc:	482a      	ldr	r0, [pc, #168]	; (b88 <_gpio_set_direction+0xd0>)
     ade:	4b2b      	ldr	r3, [pc, #172]	; (b8c <_gpio_set_direction+0xd4>)
     ae0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     ae2:	683b      	ldr	r3, [r7, #0]
     ae4:	b29b      	uxth	r3, r3
     ae6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     aea:	79fb      	ldrb	r3, [r7, #7]
     aec:	4619      	mov	r1, r3
     aee:	4826      	ldr	r0, [pc, #152]	; (b88 <_gpio_set_direction+0xd0>)
     af0:	4b27      	ldr	r3, [pc, #156]	; (b90 <_gpio_set_direction+0xd8>)
     af2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     af4:	683b      	ldr	r3, [r7, #0]
     af6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     af8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     afc:	79fb      	ldrb	r3, [r7, #7]
     afe:	4619      	mov	r1, r3
     b00:	4821      	ldr	r0, [pc, #132]	; (b88 <_gpio_set_direction+0xd0>)
     b02:	4b23      	ldr	r3, [pc, #140]	; (b90 <_gpio_set_direction+0xd8>)
     b04:	4798      	blx	r3
		break;
     b06:	e03a      	b.n	b7e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     b08:	79fb      	ldrb	r3, [r7, #7]
     b0a:	683a      	ldr	r2, [r7, #0]
     b0c:	4619      	mov	r1, r3
     b0e:	481e      	ldr	r0, [pc, #120]	; (b88 <_gpio_set_direction+0xd0>)
     b10:	4b1e      	ldr	r3, [pc, #120]	; (b8c <_gpio_set_direction+0xd4>)
     b12:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     b14:	683b      	ldr	r3, [r7, #0]
     b16:	b29b      	uxth	r3, r3
     b18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     b20:	79f9      	ldrb	r1, [r7, #7]
     b22:	461a      	mov	r2, r3
     b24:	4818      	ldr	r0, [pc, #96]	; (b88 <_gpio_set_direction+0xd0>)
     b26:	4b1a      	ldr	r3, [pc, #104]	; (b90 <_gpio_set_direction+0xd8>)
     b28:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     b2a:	683b      	ldr	r3, [r7, #0]
     b2c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     b2e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     b36:	79f9      	ldrb	r1, [r7, #7]
     b38:	461a      	mov	r2, r3
     b3a:	4813      	ldr	r0, [pc, #76]	; (b88 <_gpio_set_direction+0xd0>)
     b3c:	4b14      	ldr	r3, [pc, #80]	; (b90 <_gpio_set_direction+0xd8>)
     b3e:	4798      	blx	r3
		break;
     b40:	e01d      	b.n	b7e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     b42:	79fb      	ldrb	r3, [r7, #7]
     b44:	683a      	ldr	r2, [r7, #0]
     b46:	4619      	mov	r1, r3
     b48:	480f      	ldr	r0, [pc, #60]	; (b88 <_gpio_set_direction+0xd0>)
     b4a:	4b12      	ldr	r3, [pc, #72]	; (b94 <_gpio_set_direction+0xdc>)
     b4c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     b4e:	683b      	ldr	r3, [r7, #0]
     b50:	b29b      	uxth	r3, r3
     b52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     b56:	79fb      	ldrb	r3, [r7, #7]
     b58:	4619      	mov	r1, r3
     b5a:	480b      	ldr	r0, [pc, #44]	; (b88 <_gpio_set_direction+0xd0>)
     b5c:	4b0c      	ldr	r3, [pc, #48]	; (b90 <_gpio_set_direction+0xd8>)
     b5e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     b60:	683b      	ldr	r3, [r7, #0]
     b62:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     b64:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     b68:	79fb      	ldrb	r3, [r7, #7]
     b6a:	4619      	mov	r1, r3
     b6c:	4806      	ldr	r0, [pc, #24]	; (b88 <_gpio_set_direction+0xd0>)
     b6e:	4b08      	ldr	r3, [pc, #32]	; (b90 <_gpio_set_direction+0xd8>)
     b70:	4798      	blx	r3
		break;
     b72:	e004      	b.n	b7e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     b74:	2246      	movs	r2, #70	; 0x46
     b76:	4908      	ldr	r1, [pc, #32]	; (b98 <_gpio_set_direction+0xe0>)
     b78:	2000      	movs	r0, #0
     b7a:	4b08      	ldr	r3, [pc, #32]	; (b9c <_gpio_set_direction+0xe4>)
     b7c:	4798      	blx	r3
	}
}
     b7e:	bf00      	nop
     b80:	3708      	adds	r7, #8
     b82:	46bd      	mov	sp, r7
     b84:	bd80      	pop	{r7, pc}
     b86:	bf00      	nop
     b88:	41008000 	.word	0x41008000
     b8c:	00000877 	.word	0x00000877
     b90:	00000a8f 	.word	0x00000a8f
     b94:	0000084f 	.word	0x0000084f
     b98:	0000cf14 	.word	0x0000cf14
     b9c:	00002dd1 	.word	0x00002dd1

00000ba0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     ba0:	b580      	push	{r7, lr}
     ba2:	b082      	sub	sp, #8
     ba4:	af00      	add	r7, sp, #0
     ba6:	4603      	mov	r3, r0
     ba8:	6039      	str	r1, [r7, #0]
     baa:	71fb      	strb	r3, [r7, #7]
     bac:	4613      	mov	r3, r2
     bae:	71bb      	strb	r3, [r7, #6]
	if (level) {
     bb0:	79bb      	ldrb	r3, [r7, #6]
     bb2:	2b00      	cmp	r3, #0
     bb4:	d006      	beq.n	bc4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     bb6:	79fb      	ldrb	r3, [r7, #7]
     bb8:	683a      	ldr	r2, [r7, #0]
     bba:	4619      	mov	r1, r3
     bbc:	4806      	ldr	r0, [pc, #24]	; (bd8 <_gpio_set_level+0x38>)
     bbe:	4b07      	ldr	r3, [pc, #28]	; (bdc <_gpio_set_level+0x3c>)
     bc0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     bc2:	e005      	b.n	bd0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     bc4:	79fb      	ldrb	r3, [r7, #7]
     bc6:	683a      	ldr	r2, [r7, #0]
     bc8:	4619      	mov	r1, r3
     bca:	4803      	ldr	r0, [pc, #12]	; (bd8 <_gpio_set_level+0x38>)
     bcc:	4b04      	ldr	r3, [pc, #16]	; (be0 <_gpio_set_level+0x40>)
     bce:	4798      	blx	r3
}
     bd0:	bf00      	nop
     bd2:	3708      	adds	r7, #8
     bd4:	46bd      	mov	sp, r7
     bd6:	bd80      	pop	{r7, pc}
     bd8:	41008000 	.word	0x41008000
     bdc:	0000089f 	.word	0x0000089f
     be0:	000008c7 	.word	0x000008c7

00000be4 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     be4:	b580      	push	{r7, lr}
     be6:	b082      	sub	sp, #8
     be8:	af00      	add	r7, sp, #0
     bea:	4603      	mov	r3, r0
     bec:	71fb      	strb	r3, [r7, #7]
     bee:	460b      	mov	r3, r1
     bf0:	71bb      	strb	r3, [r7, #6]
     bf2:	4613      	mov	r3, r2
     bf4:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     bf6:	797b      	ldrb	r3, [r7, #5]
     bf8:	2b01      	cmp	r3, #1
     bfa:	d00a      	beq.n	c12 <_gpio_set_pin_pull_mode+0x2e>
     bfc:	2b02      	cmp	r3, #2
     bfe:	d01f      	beq.n	c40 <_gpio_set_pin_pull_mode+0x5c>
     c00:	2b00      	cmp	r3, #0
     c02:	d134      	bne.n	c6e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     c04:	79ba      	ldrb	r2, [r7, #6]
     c06:	79fb      	ldrb	r3, [r7, #7]
     c08:	4619      	mov	r1, r3
     c0a:	481e      	ldr	r0, [pc, #120]	; (c84 <_gpio_set_pin_pull_mode+0xa0>)
     c0c:	4b1e      	ldr	r3, [pc, #120]	; (c88 <_gpio_set_pin_pull_mode+0xa4>)
     c0e:	4798      	blx	r3
		break;
     c10:	e033      	b.n	c7a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     c12:	79bb      	ldrb	r3, [r7, #6]
     c14:	2201      	movs	r2, #1
     c16:	409a      	lsls	r2, r3
     c18:	79fb      	ldrb	r3, [r7, #7]
     c1a:	4619      	mov	r1, r3
     c1c:	4819      	ldr	r0, [pc, #100]	; (c84 <_gpio_set_pin_pull_mode+0xa0>)
     c1e:	4b1b      	ldr	r3, [pc, #108]	; (c8c <_gpio_set_pin_pull_mode+0xa8>)
     c20:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     c22:	79ba      	ldrb	r2, [r7, #6]
     c24:	79fb      	ldrb	r3, [r7, #7]
     c26:	4619      	mov	r1, r3
     c28:	4816      	ldr	r0, [pc, #88]	; (c84 <_gpio_set_pin_pull_mode+0xa0>)
     c2a:	4b19      	ldr	r3, [pc, #100]	; (c90 <_gpio_set_pin_pull_mode+0xac>)
     c2c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     c2e:	79bb      	ldrb	r3, [r7, #6]
     c30:	2201      	movs	r2, #1
     c32:	409a      	lsls	r2, r3
     c34:	79fb      	ldrb	r3, [r7, #7]
     c36:	4619      	mov	r1, r3
     c38:	4812      	ldr	r0, [pc, #72]	; (c84 <_gpio_set_pin_pull_mode+0xa0>)
     c3a:	4b16      	ldr	r3, [pc, #88]	; (c94 <_gpio_set_pin_pull_mode+0xb0>)
     c3c:	4798      	blx	r3
		break;
     c3e:	e01c      	b.n	c7a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     c40:	79bb      	ldrb	r3, [r7, #6]
     c42:	2201      	movs	r2, #1
     c44:	409a      	lsls	r2, r3
     c46:	79fb      	ldrb	r3, [r7, #7]
     c48:	4619      	mov	r1, r3
     c4a:	480e      	ldr	r0, [pc, #56]	; (c84 <_gpio_set_pin_pull_mode+0xa0>)
     c4c:	4b0f      	ldr	r3, [pc, #60]	; (c8c <_gpio_set_pin_pull_mode+0xa8>)
     c4e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     c50:	79ba      	ldrb	r2, [r7, #6]
     c52:	79fb      	ldrb	r3, [r7, #7]
     c54:	4619      	mov	r1, r3
     c56:	480b      	ldr	r0, [pc, #44]	; (c84 <_gpio_set_pin_pull_mode+0xa0>)
     c58:	4b0d      	ldr	r3, [pc, #52]	; (c90 <_gpio_set_pin_pull_mode+0xac>)
     c5a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     c5c:	79bb      	ldrb	r3, [r7, #6]
     c5e:	2201      	movs	r2, #1
     c60:	409a      	lsls	r2, r3
     c62:	79fb      	ldrb	r3, [r7, #7]
     c64:	4619      	mov	r1, r3
     c66:	4807      	ldr	r0, [pc, #28]	; (c84 <_gpio_set_pin_pull_mode+0xa0>)
     c68:	4b0b      	ldr	r3, [pc, #44]	; (c98 <_gpio_set_pin_pull_mode+0xb4>)
     c6a:	4798      	blx	r3
		break;
     c6c:	e005      	b.n	c7a <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     c6e:	2289      	movs	r2, #137	; 0x89
     c70:	490a      	ldr	r1, [pc, #40]	; (c9c <_gpio_set_pin_pull_mode+0xb8>)
     c72:	2000      	movs	r0, #0
     c74:	4b0a      	ldr	r3, [pc, #40]	; (ca0 <_gpio_set_pin_pull_mode+0xbc>)
     c76:	4798      	blx	r3
		break;
     c78:	bf00      	nop
	}
}
     c7a:	bf00      	nop
     c7c:	3708      	adds	r7, #8
     c7e:	46bd      	mov	sp, r7
     c80:	bd80      	pop	{r7, pc}
     c82:	bf00      	nop
     c84:	41008000 	.word	0x41008000
     c88:	00000a4b 	.word	0x00000a4b
     c8c:	00000877 	.word	0x00000877
     c90:	00000a07 	.word	0x00000a07
     c94:	0000089f 	.word	0x0000089f
     c98:	000008c7 	.word	0x000008c7
     c9c:	0000cf14 	.word	0x0000cf14
     ca0:	00002dd1 	.word	0x00002dd1

00000ca4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     ca4:	b590      	push	{r4, r7, lr}
     ca6:	b085      	sub	sp, #20
     ca8:	af00      	add	r7, sp, #0
     caa:	6078      	str	r0, [r7, #4]
     cac:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     cae:	687b      	ldr	r3, [r7, #4]
     cb0:	095b      	lsrs	r3, r3, #5
     cb2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	f003 031f 	and.w	r3, r3, #31
     cbc:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     cbe:	683b      	ldr	r3, [r7, #0]
     cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
     cc4:	d106      	bne.n	cd4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     cc6:	7bba      	ldrb	r2, [r7, #14]
     cc8:	7bf9      	ldrb	r1, [r7, #15]
     cca:	2300      	movs	r3, #0
     ccc:	4812      	ldr	r0, [pc, #72]	; (d18 <_gpio_set_pin_function+0x74>)
     cce:	4c13      	ldr	r4, [pc, #76]	; (d1c <_gpio_set_pin_function+0x78>)
     cd0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     cd2:	e01d      	b.n	d10 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     cd4:	7bba      	ldrb	r2, [r7, #14]
     cd6:	7bf9      	ldrb	r1, [r7, #15]
     cd8:	2301      	movs	r3, #1
     cda:	480f      	ldr	r0, [pc, #60]	; (d18 <_gpio_set_pin_function+0x74>)
     cdc:	4c0f      	ldr	r4, [pc, #60]	; (d1c <_gpio_set_pin_function+0x78>)
     cde:	47a0      	blx	r4
		if (pin & 1) {
     ce0:	7bbb      	ldrb	r3, [r7, #14]
     ce2:	f003 0301 	and.w	r3, r3, #1
     ce6:	2b00      	cmp	r3, #0
     ce8:	d009      	beq.n	cfe <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     cea:	7bbb      	ldrb	r3, [r7, #14]
     cec:	085b      	lsrs	r3, r3, #1
     cee:	b2da      	uxtb	r2, r3
     cf0:	683b      	ldr	r3, [r7, #0]
     cf2:	b2db      	uxtb	r3, r3
     cf4:	7bf9      	ldrb	r1, [r7, #15]
     cf6:	4808      	ldr	r0, [pc, #32]	; (d18 <_gpio_set_pin_function+0x74>)
     cf8:	4c09      	ldr	r4, [pc, #36]	; (d20 <_gpio_set_pin_function+0x7c>)
     cfa:	47a0      	blx	r4
}
     cfc:	e008      	b.n	d10 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     cfe:	7bbb      	ldrb	r3, [r7, #14]
     d00:	085b      	lsrs	r3, r3, #1
     d02:	b2da      	uxtb	r2, r3
     d04:	683b      	ldr	r3, [r7, #0]
     d06:	b2db      	uxtb	r3, r3
     d08:	7bf9      	ldrb	r1, [r7, #15]
     d0a:	4803      	ldr	r0, [pc, #12]	; (d18 <_gpio_set_pin_function+0x74>)
     d0c:	4c05      	ldr	r4, [pc, #20]	; (d24 <_gpio_set_pin_function+0x80>)
     d0e:	47a0      	blx	r4
}
     d10:	bf00      	nop
     d12:	3714      	adds	r7, #20
     d14:	46bd      	mov	sp, r7
     d16:	bd90      	pop	{r4, r7, pc}
     d18:	41008000 	.word	0x41008000
     d1c:	000009ad 	.word	0x000009ad
     d20:	0000094f 	.word	0x0000094f
     d24:	000008ef 	.word	0x000008ef

00000d28 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     d28:	b580      	push	{r7, lr}
     d2a:	b082      	sub	sp, #8
     d2c:	af00      	add	r7, sp, #0
     d2e:	4603      	mov	r3, r0
     d30:	460a      	mov	r2, r1
     d32:	71fb      	strb	r3, [r7, #7]
     d34:	4613      	mov	r3, r2
     d36:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     d38:	79fb      	ldrb	r3, [r7, #7]
     d3a:	095b      	lsrs	r3, r3, #5
     d3c:	b2d8      	uxtb	r0, r3
     d3e:	79fb      	ldrb	r3, [r7, #7]
     d40:	f003 031f 	and.w	r3, r3, #31
     d44:	b2db      	uxtb	r3, r3
     d46:	79ba      	ldrb	r2, [r7, #6]
     d48:	4619      	mov	r1, r3
     d4a:	4b03      	ldr	r3, [pc, #12]	; (d58 <gpio_set_pin_pull_mode+0x30>)
     d4c:	4798      	blx	r3
}
     d4e:	bf00      	nop
     d50:	3708      	adds	r7, #8
     d52:	46bd      	mov	sp, r7
     d54:	bd80      	pop	{r7, pc}
     d56:	bf00      	nop
     d58:	00000be5 	.word	0x00000be5

00000d5c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     d5c:	b580      	push	{r7, lr}
     d5e:	b082      	sub	sp, #8
     d60:	af00      	add	r7, sp, #0
     d62:	6078      	str	r0, [r7, #4]
     d64:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     d66:	6839      	ldr	r1, [r7, #0]
     d68:	6878      	ldr	r0, [r7, #4]
     d6a:	4b03      	ldr	r3, [pc, #12]	; (d78 <gpio_set_pin_function+0x1c>)
     d6c:	4798      	blx	r3
}
     d6e:	bf00      	nop
     d70:	3708      	adds	r7, #8
     d72:	46bd      	mov	sp, r7
     d74:	bd80      	pop	{r7, pc}
     d76:	bf00      	nop
     d78:	00000ca5 	.word	0x00000ca5

00000d7c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     d7c:	b580      	push	{r7, lr}
     d7e:	b082      	sub	sp, #8
     d80:	af00      	add	r7, sp, #0
     d82:	4603      	mov	r3, r0
     d84:	460a      	mov	r2, r1
     d86:	71fb      	strb	r3, [r7, #7]
     d88:	4613      	mov	r3, r2
     d8a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     d8c:	79fb      	ldrb	r3, [r7, #7]
     d8e:	095b      	lsrs	r3, r3, #5
     d90:	b2d8      	uxtb	r0, r3
     d92:	79fb      	ldrb	r3, [r7, #7]
     d94:	f003 031f 	and.w	r3, r3, #31
     d98:	2201      	movs	r2, #1
     d9a:	fa02 f303 	lsl.w	r3, r2, r3
     d9e:	79ba      	ldrb	r2, [r7, #6]
     da0:	4619      	mov	r1, r3
     da2:	4b03      	ldr	r3, [pc, #12]	; (db0 <gpio_set_pin_direction+0x34>)
     da4:	4798      	blx	r3
}
     da6:	bf00      	nop
     da8:	3708      	adds	r7, #8
     daa:	46bd      	mov	sp, r7
     dac:	bd80      	pop	{r7, pc}
     dae:	bf00      	nop
     db0:	00000ab9 	.word	0x00000ab9

00000db4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     db4:	b580      	push	{r7, lr}
     db6:	b082      	sub	sp, #8
     db8:	af00      	add	r7, sp, #0
     dba:	4603      	mov	r3, r0
     dbc:	460a      	mov	r2, r1
     dbe:	71fb      	strb	r3, [r7, #7]
     dc0:	4613      	mov	r3, r2
     dc2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     dc4:	79fb      	ldrb	r3, [r7, #7]
     dc6:	095b      	lsrs	r3, r3, #5
     dc8:	b2d8      	uxtb	r0, r3
     dca:	79fb      	ldrb	r3, [r7, #7]
     dcc:	f003 031f 	and.w	r3, r3, #31
     dd0:	2201      	movs	r2, #1
     dd2:	fa02 f303 	lsl.w	r3, r2, r3
     dd6:	79ba      	ldrb	r2, [r7, #6]
     dd8:	4619      	mov	r1, r3
     dda:	4b03      	ldr	r3, [pc, #12]	; (de8 <gpio_set_pin_level+0x34>)
     ddc:	4798      	blx	r3
}
     dde:	bf00      	nop
     de0:	3708      	adds	r7, #8
     de2:	46bd      	mov	sp, r7
     de4:	bd80      	pop	{r7, pc}
     de6:	bf00      	nop
     de8:	00000ba1 	.word	0x00000ba1

00000dec <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     dec:	b580      	push	{r7, lr}
     dee:	af00      	add	r7, sp, #0
	_init_chip();
     df0:	4b01      	ldr	r3, [pc, #4]	; (df8 <init_mcu+0xc>)
     df2:	4798      	blx	r3
}
     df4:	bf00      	nop
     df6:	bd80      	pop	{r7, pc}
     df8:	00003975 	.word	0x00003975

00000dfc <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     dfc:	b580      	push	{r7, lr}
     dfe:	b082      	sub	sp, #8
     e00:	af00      	add	r7, sp, #0
     e02:	6078      	str	r0, [r7, #4]
     e04:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     e06:	687b      	ldr	r3, [r7, #4]
     e08:	2b00      	cmp	r3, #0
     e0a:	d004      	beq.n	e16 <wdt_init+0x1a>
     e0c:	683b      	ldr	r3, [r7, #0]
     e0e:	2b00      	cmp	r3, #0
     e10:	d001      	beq.n	e16 <wdt_init+0x1a>
     e12:	2301      	movs	r3, #1
     e14:	e000      	b.n	e18 <wdt_init+0x1c>
     e16:	2300      	movs	r3, #0
     e18:	f003 0301 	and.w	r3, r3, #1
     e1c:	b2db      	uxtb	r3, r3
     e1e:	2248      	movs	r2, #72	; 0x48
     e20:	4907      	ldr	r1, [pc, #28]	; (e40 <wdt_init+0x44>)
     e22:	4618      	mov	r0, r3
     e24:	4b07      	ldr	r3, [pc, #28]	; (e44 <wdt_init+0x48>)
     e26:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     e28:	687b      	ldr	r3, [r7, #4]
     e2a:	683a      	ldr	r2, [r7, #0]
     e2c:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	4618      	mov	r0, r3
     e32:	4b05      	ldr	r3, [pc, #20]	; (e48 <wdt_init+0x4c>)
     e34:	4798      	blx	r3
     e36:	4603      	mov	r3, r0
}
     e38:	4618      	mov	r0, r3
     e3a:	3708      	adds	r7, #8
     e3c:	46bd      	mov	sp, r7
     e3e:	bd80      	pop	{r7, pc}
     e40:	0000cf30 	.word	0x0000cf30
     e44:	00002dd1 	.word	0x00002dd1
     e48:	0000a1b1 	.word	0x0000a1b1

00000e4c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
     e4c:	b580      	push	{r7, lr}
     e4e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
     e50:	4804      	ldr	r0, [pc, #16]	; (e64 <CRC_CALC_init+0x18>)
     e52:	4b05      	ldr	r3, [pc, #20]	; (e68 <CRC_CALC_init+0x1c>)
     e54:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
     e56:	4905      	ldr	r1, [pc, #20]	; (e6c <CRC_CALC_init+0x20>)
     e58:	4805      	ldr	r0, [pc, #20]	; (e70 <CRC_CALC_init+0x24>)
     e5a:	4b06      	ldr	r3, [pc, #24]	; (e74 <CRC_CALC_init+0x28>)
     e5c:	4798      	blx	r3
}
     e5e:	bf00      	nop
     e60:	bd80      	pop	{r7, pc}
     e62:	bf00      	nop
     e64:	40000800 	.word	0x40000800
     e68:	0000066f 	.word	0x0000066f
     e6c:	41002000 	.word	0x41002000
     e70:	20000f7c 	.word	0x20000f7c
     e74:	00001c35 	.word	0x00001c35

00000e78 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     e78:	b580      	push	{r7, lr}
     e7a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     e7c:	2244      	movs	r2, #68	; 0x44
     e7e:	2104      	movs	r1, #4
     e80:	483f      	ldr	r0, [pc, #252]	; (f80 <EXTERNAL_IRQ_0_init+0x108>)
     e82:	4b40      	ldr	r3, [pc, #256]	; (f84 <EXTERNAL_IRQ_0_init+0x10c>)
     e84:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     e86:	4840      	ldr	r0, [pc, #256]	; (f88 <EXTERNAL_IRQ_0_init+0x110>)
     e88:	4b40      	ldr	r3, [pc, #256]	; (f8c <EXTERNAL_IRQ_0_init+0x114>)
     e8a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
     e8c:	2101      	movs	r1, #1
     e8e:	2040      	movs	r0, #64	; 0x40
     e90:	4b3f      	ldr	r3, [pc, #252]	; (f90 <EXTERNAL_IRQ_0_init+0x118>)
     e92:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
     e94:	2100      	movs	r1, #0
     e96:	2040      	movs	r0, #64	; 0x40
     e98:	4b3e      	ldr	r3, [pc, #248]	; (f94 <EXTERNAL_IRQ_0_init+0x11c>)
     e9a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
     e9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
     ea0:	2040      	movs	r0, #64	; 0x40
     ea2:	4b3d      	ldr	r3, [pc, #244]	; (f98 <EXTERNAL_IRQ_0_init+0x120>)
     ea4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
     ea6:	2101      	movs	r1, #1
     ea8:	2021      	movs	r0, #33	; 0x21
     eaa:	4b39      	ldr	r3, [pc, #228]	; (f90 <EXTERNAL_IRQ_0_init+0x118>)
     eac:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
     eae:	2100      	movs	r1, #0
     eb0:	2021      	movs	r0, #33	; 0x21
     eb2:	4b38      	ldr	r3, [pc, #224]	; (f94 <EXTERNAL_IRQ_0_init+0x11c>)
     eb4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
     eb6:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
     eba:	2021      	movs	r0, #33	; 0x21
     ebc:	4b36      	ldr	r3, [pc, #216]	; (f98 <EXTERNAL_IRQ_0_init+0x120>)
     ebe:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
     ec0:	2101      	movs	r1, #1
     ec2:	2003      	movs	r0, #3
     ec4:	4b32      	ldr	r3, [pc, #200]	; (f90 <EXTERNAL_IRQ_0_init+0x118>)
     ec6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
     ec8:	2102      	movs	r1, #2
     eca:	2003      	movs	r0, #3
     ecc:	4b31      	ldr	r3, [pc, #196]	; (f94 <EXTERNAL_IRQ_0_init+0x11c>)
     ece:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
     ed0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
     ed4:	2003      	movs	r0, #3
     ed6:	4b30      	ldr	r3, [pc, #192]	; (f98 <EXTERNAL_IRQ_0_init+0x120>)
     ed8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
     eda:	2101      	movs	r1, #1
     edc:	2004      	movs	r0, #4
     ede:	4b2c      	ldr	r3, [pc, #176]	; (f90 <EXTERNAL_IRQ_0_init+0x118>)
     ee0:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
     ee2:	2102      	movs	r1, #2
     ee4:	2004      	movs	r0, #4
     ee6:	4b2b      	ldr	r3, [pc, #172]	; (f94 <EXTERNAL_IRQ_0_init+0x11c>)
     ee8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
     eea:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     eee:	2004      	movs	r0, #4
     ef0:	4b29      	ldr	r3, [pc, #164]	; (f98 <EXTERNAL_IRQ_0_init+0x120>)
     ef2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
     ef4:	2101      	movs	r1, #1
     ef6:	2005      	movs	r0, #5
     ef8:	4b25      	ldr	r3, [pc, #148]	; (f90 <EXTERNAL_IRQ_0_init+0x118>)
     efa:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
     efc:	2102      	movs	r1, #2
     efe:	2005      	movs	r0, #5
     f00:	4b24      	ldr	r3, [pc, #144]	; (f94 <EXTERNAL_IRQ_0_init+0x11c>)
     f02:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
     f04:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
     f08:	2005      	movs	r0, #5
     f0a:	4b23      	ldr	r3, [pc, #140]	; (f98 <EXTERNAL_IRQ_0_init+0x120>)
     f0c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
     f0e:	2101      	movs	r1, #1
     f10:	2056      	movs	r0, #86	; 0x56
     f12:	4b1f      	ldr	r3, [pc, #124]	; (f90 <EXTERNAL_IRQ_0_init+0x118>)
     f14:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
     f16:	2102      	movs	r1, #2
     f18:	2056      	movs	r0, #86	; 0x56
     f1a:	4b1e      	ldr	r3, [pc, #120]	; (f94 <EXTERNAL_IRQ_0_init+0x11c>)
     f1c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
     f1e:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
     f22:	2056      	movs	r0, #86	; 0x56
     f24:	4b1c      	ldr	r3, [pc, #112]	; (f98 <EXTERNAL_IRQ_0_init+0x120>)
     f26:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
     f28:	2101      	movs	r1, #1
     f2a:	2057      	movs	r0, #87	; 0x57
     f2c:	4b18      	ldr	r3, [pc, #96]	; (f90 <EXTERNAL_IRQ_0_init+0x118>)
     f2e:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
     f30:	2102      	movs	r1, #2
     f32:	2057      	movs	r0, #87	; 0x57
     f34:	4b17      	ldr	r3, [pc, #92]	; (f94 <EXTERNAL_IRQ_0_init+0x11c>)
     f36:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
     f38:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
     f3c:	2057      	movs	r0, #87	; 0x57
     f3e:	4b16      	ldr	r3, [pc, #88]	; (f98 <EXTERNAL_IRQ_0_init+0x120>)
     f40:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
     f42:	2101      	movs	r1, #1
     f44:	2028      	movs	r0, #40	; 0x28
     f46:	4b12      	ldr	r3, [pc, #72]	; (f90 <EXTERNAL_IRQ_0_init+0x118>)
     f48:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
     f4a:	2100      	movs	r1, #0
     f4c:	2028      	movs	r0, #40	; 0x28
     f4e:	4b11      	ldr	r3, [pc, #68]	; (f94 <EXTERNAL_IRQ_0_init+0x11c>)
     f50:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
     f52:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
     f56:	2028      	movs	r0, #40	; 0x28
     f58:	4b0f      	ldr	r3, [pc, #60]	; (f98 <EXTERNAL_IRQ_0_init+0x120>)
     f5a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
     f5c:	2101      	movs	r1, #1
     f5e:	2029      	movs	r0, #41	; 0x29
     f60:	4b0b      	ldr	r3, [pc, #44]	; (f90 <EXTERNAL_IRQ_0_init+0x118>)
     f62:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
     f64:	2100      	movs	r1, #0
     f66:	2029      	movs	r0, #41	; 0x29
     f68:	4b0a      	ldr	r3, [pc, #40]	; (f94 <EXTERNAL_IRQ_0_init+0x11c>)
     f6a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
     f6c:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
     f70:	2029      	movs	r0, #41	; 0x29
     f72:	4b09      	ldr	r3, [pc, #36]	; (f98 <EXTERNAL_IRQ_0_init+0x120>)
     f74:	4798      	blx	r3

	ext_irq_init();
     f76:	4b09      	ldr	r3, [pc, #36]	; (f9c <EXTERNAL_IRQ_0_init+0x124>)
     f78:	4798      	blx	r3
}
     f7a:	bf00      	nop
     f7c:	bd80      	pop	{r7, pc}
     f7e:	bf00      	nop
     f80:	40001c00 	.word	0x40001c00
     f84:	00000509 	.word	0x00000509
     f88:	40000800 	.word	0x40000800
     f8c:	000005ef 	.word	0x000005ef
     f90:	00000d7d 	.word	0x00000d7d
     f94:	00000d29 	.word	0x00000d29
     f98:	00000d5d 	.word	0x00000d5d
     f9c:	00001cfd 	.word	0x00001cfd

00000fa0 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     fa0:	b580      	push	{r7, lr}
     fa2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     fa4:	2244      	movs	r2, #68	; 0x44
     fa6:	210b      	movs	r1, #11
     fa8:	4807      	ldr	r0, [pc, #28]	; (fc8 <EVENT_SYSTEM_0_init+0x28>)
     faa:	4b08      	ldr	r3, [pc, #32]	; (fcc <EVENT_SYSTEM_0_init+0x2c>)
     fac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     fae:	2244      	movs	r2, #68	; 0x44
     fb0:	210c      	movs	r1, #12
     fb2:	4805      	ldr	r0, [pc, #20]	; (fc8 <EVENT_SYSTEM_0_init+0x28>)
     fb4:	4b05      	ldr	r3, [pc, #20]	; (fcc <EVENT_SYSTEM_0_init+0x2c>)
     fb6:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
     fb8:	4805      	ldr	r0, [pc, #20]	; (fd0 <EVENT_SYSTEM_0_init+0x30>)
     fba:	4b06      	ldr	r3, [pc, #24]	; (fd4 <EVENT_SYSTEM_0_init+0x34>)
     fbc:	4798      	blx	r3

	event_system_init();
     fbe:	4b06      	ldr	r3, [pc, #24]	; (fd8 <EVENT_SYSTEM_0_init+0x38>)
     fc0:	4798      	blx	r3
}
     fc2:	bf00      	nop
     fc4:	bd80      	pop	{r7, pc}
     fc6:	bf00      	nop
     fc8:	40001c00 	.word	0x40001c00
     fcc:	00000509 	.word	0x00000509
     fd0:	40000800 	.word	0x40000800
     fd4:	0000068f 	.word	0x0000068f
     fd8:	00001ce9 	.word	0x00001ce9

00000fdc <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
     fdc:	b580      	push	{r7, lr}
     fde:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
     fe0:	2101      	movs	r1, #1
     fe2:	202b      	movs	r0, #43	; 0x2b
     fe4:	4b2b      	ldr	r3, [pc, #172]	; (1094 <QSPI_N25Q256_PORT_init+0xb8>)
     fe6:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
     fe8:	2100      	movs	r1, #0
     fea:	202b      	movs	r0, #43	; 0x2b
     fec:	4b2a      	ldr	r3, [pc, #168]	; (1098 <QSPI_N25Q256_PORT_init+0xbc>)
     fee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
     ff0:	492a      	ldr	r1, [pc, #168]	; (109c <QSPI_N25Q256_PORT_init+0xc0>)
     ff2:	202b      	movs	r0, #43	; 0x2b
     ff4:	4b2a      	ldr	r3, [pc, #168]	; (10a0 <QSPI_N25Q256_PORT_init+0xc4>)
     ff6:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
     ff8:	2102      	movs	r1, #2
     ffa:	2008      	movs	r0, #8
     ffc:	4b25      	ldr	r3, [pc, #148]	; (1094 <QSPI_N25Q256_PORT_init+0xb8>)
     ffe:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1000:	2100      	movs	r1, #0
    1002:	2008      	movs	r0, #8
    1004:	4b27      	ldr	r3, [pc, #156]	; (10a4 <QSPI_N25Q256_PORT_init+0xc8>)
    1006:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1008:	2100      	movs	r1, #0
    100a:	2008      	movs	r0, #8
    100c:	4b22      	ldr	r3, [pc, #136]	; (1098 <QSPI_N25Q256_PORT_init+0xbc>)
    100e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1010:	4925      	ldr	r1, [pc, #148]	; (10a8 <QSPI_N25Q256_PORT_init+0xcc>)
    1012:	2008      	movs	r0, #8
    1014:	4b22      	ldr	r3, [pc, #136]	; (10a0 <QSPI_N25Q256_PORT_init+0xc4>)
    1016:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1018:	2102      	movs	r1, #2
    101a:	2009      	movs	r0, #9
    101c:	4b1d      	ldr	r3, [pc, #116]	; (1094 <QSPI_N25Q256_PORT_init+0xb8>)
    101e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1020:	2100      	movs	r1, #0
    1022:	2009      	movs	r0, #9
    1024:	4b1f      	ldr	r3, [pc, #124]	; (10a4 <QSPI_N25Q256_PORT_init+0xc8>)
    1026:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1028:	2100      	movs	r1, #0
    102a:	2009      	movs	r0, #9
    102c:	4b1a      	ldr	r3, [pc, #104]	; (1098 <QSPI_N25Q256_PORT_init+0xbc>)
    102e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1030:	491e      	ldr	r1, [pc, #120]	; (10ac <QSPI_N25Q256_PORT_init+0xd0>)
    1032:	2009      	movs	r0, #9
    1034:	4b1a      	ldr	r3, [pc, #104]	; (10a0 <QSPI_N25Q256_PORT_init+0xc4>)
    1036:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1038:	2102      	movs	r1, #2
    103a:	200a      	movs	r0, #10
    103c:	4b15      	ldr	r3, [pc, #84]	; (1094 <QSPI_N25Q256_PORT_init+0xb8>)
    103e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1040:	2100      	movs	r1, #0
    1042:	200a      	movs	r0, #10
    1044:	4b17      	ldr	r3, [pc, #92]	; (10a4 <QSPI_N25Q256_PORT_init+0xc8>)
    1046:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1048:	2100      	movs	r1, #0
    104a:	200a      	movs	r0, #10
    104c:	4b12      	ldr	r3, [pc, #72]	; (1098 <QSPI_N25Q256_PORT_init+0xbc>)
    104e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1050:	4917      	ldr	r1, [pc, #92]	; (10b0 <QSPI_N25Q256_PORT_init+0xd4>)
    1052:	200a      	movs	r0, #10
    1054:	4b12      	ldr	r3, [pc, #72]	; (10a0 <QSPI_N25Q256_PORT_init+0xc4>)
    1056:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1058:	2102      	movs	r1, #2
    105a:	200b      	movs	r0, #11
    105c:	4b0d      	ldr	r3, [pc, #52]	; (1094 <QSPI_N25Q256_PORT_init+0xb8>)
    105e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1060:	2100      	movs	r1, #0
    1062:	200b      	movs	r0, #11
    1064:	4b0f      	ldr	r3, [pc, #60]	; (10a4 <QSPI_N25Q256_PORT_init+0xc8>)
    1066:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1068:	2100      	movs	r1, #0
    106a:	200b      	movs	r0, #11
    106c:	4b0a      	ldr	r3, [pc, #40]	; (1098 <QSPI_N25Q256_PORT_init+0xbc>)
    106e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1070:	4910      	ldr	r1, [pc, #64]	; (10b4 <QSPI_N25Q256_PORT_init+0xd8>)
    1072:	200b      	movs	r0, #11
    1074:	4b0a      	ldr	r3, [pc, #40]	; (10a0 <QSPI_N25Q256_PORT_init+0xc4>)
    1076:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1078:	2101      	movs	r1, #1
    107a:	202a      	movs	r0, #42	; 0x2a
    107c:	4b05      	ldr	r3, [pc, #20]	; (1094 <QSPI_N25Q256_PORT_init+0xb8>)
    107e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1080:	2100      	movs	r1, #0
    1082:	202a      	movs	r0, #42	; 0x2a
    1084:	4b04      	ldr	r3, [pc, #16]	; (1098 <QSPI_N25Q256_PORT_init+0xbc>)
    1086:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1088:	490b      	ldr	r1, [pc, #44]	; (10b8 <QSPI_N25Q256_PORT_init+0xdc>)
    108a:	202a      	movs	r0, #42	; 0x2a
    108c:	4b04      	ldr	r3, [pc, #16]	; (10a0 <QSPI_N25Q256_PORT_init+0xc4>)
    108e:	4798      	blx	r3
}
    1090:	bf00      	nop
    1092:	bd80      	pop	{r7, pc}
    1094:	00000d7d 	.word	0x00000d7d
    1098:	00000d29 	.word	0x00000d29
    109c:	002b0007 	.word	0x002b0007
    10a0:	00000d5d 	.word	0x00000d5d
    10a4:	00000db5 	.word	0x00000db5
    10a8:	00080007 	.word	0x00080007
    10ac:	00090007 	.word	0x00090007
    10b0:	000a0007 	.word	0x000a0007
    10b4:	000b0007 	.word	0x000b0007
    10b8:	002a0007 	.word	0x002a0007

000010bc <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    10bc:	b580      	push	{r7, lr}
    10be:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    10c0:	4805      	ldr	r0, [pc, #20]	; (10d8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    10c2:	4b06      	ldr	r3, [pc, #24]	; (10dc <QSPI_N25Q256_CLOCK_init+0x20>)
    10c4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    10c6:	4804      	ldr	r0, [pc, #16]	; (10d8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    10c8:	4b05      	ldr	r3, [pc, #20]	; (10e0 <QSPI_N25Q256_CLOCK_init+0x24>)
    10ca:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    10cc:	4802      	ldr	r0, [pc, #8]	; (10d8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    10ce:	4b05      	ldr	r3, [pc, #20]	; (10e4 <QSPI_N25Q256_CLOCK_init+0x28>)
    10d0:	4798      	blx	r3
}
    10d2:	bf00      	nop
    10d4:	bd80      	pop	{r7, pc}
    10d6:	bf00      	nop
    10d8:	40000800 	.word	0x40000800
    10dc:	0000054f 	.word	0x0000054f
    10e0:	0000058f 	.word	0x0000058f
    10e4:	0000076f 	.word	0x0000076f

000010e8 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    10e8:	b580      	push	{r7, lr}
    10ea:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    10ec:	4b04      	ldr	r3, [pc, #16]	; (1100 <QSPI_N25Q256_init+0x18>)
    10ee:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    10f0:	4904      	ldr	r1, [pc, #16]	; (1104 <QSPI_N25Q256_init+0x1c>)
    10f2:	4805      	ldr	r0, [pc, #20]	; (1108 <QSPI_N25Q256_init+0x20>)
    10f4:	4b05      	ldr	r3, [pc, #20]	; (110c <QSPI_N25Q256_init+0x24>)
    10f6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    10f8:	4b05      	ldr	r3, [pc, #20]	; (1110 <QSPI_N25Q256_init+0x28>)
    10fa:	4798      	blx	r3
}
    10fc:	bf00      	nop
    10fe:	bd80      	pop	{r7, pc}
    1100:	000010bd 	.word	0x000010bd
    1104:	42003400 	.word	0x42003400
    1108:	20000e10 	.word	0x20000e10
    110c:	00002015 	.word	0x00002015
    1110:	00000fdd 	.word	0x00000fdd

00001114 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1114:	b580      	push	{r7, lr}
    1116:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1118:	4802      	ldr	r0, [pc, #8]	; (1124 <DATETIME_CLOCK_CLOCK_init+0x10>)
    111a:	4b03      	ldr	r3, [pc, #12]	; (1128 <DATETIME_CLOCK_CLOCK_init+0x14>)
    111c:	4798      	blx	r3
}
    111e:	bf00      	nop
    1120:	bd80      	pop	{r7, pc}
    1122:	bf00      	nop
    1124:	40000800 	.word	0x40000800
    1128:	000005cf 	.word	0x000005cf

0000112c <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    112c:	b580      	push	{r7, lr}
    112e:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1130:	4b03      	ldr	r3, [pc, #12]	; (1140 <DATETIME_CLOCK_init+0x14>)
    1132:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1134:	4903      	ldr	r1, [pc, #12]	; (1144 <DATETIME_CLOCK_init+0x18>)
    1136:	4804      	ldr	r0, [pc, #16]	; (1148 <DATETIME_CLOCK_init+0x1c>)
    1138:	4b04      	ldr	r3, [pc, #16]	; (114c <DATETIME_CLOCK_init+0x20>)
    113a:	4798      	blx	r3
}
    113c:	bf00      	nop
    113e:	bd80      	pop	{r7, pc}
    1140:	00001115 	.word	0x00001115
    1144:	40002400 	.word	0x40002400
    1148:	20000f58 	.word	0x20000f58
    114c:	00001ad9 	.word	0x00001ad9

00001150 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1154:	2101      	movs	r1, #1
    1156:	2010      	movs	r0, #16
    1158:	4b07      	ldr	r3, [pc, #28]	; (1178 <I2C_HEATERS_PORT_init+0x28>)
    115a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    115c:	4907      	ldr	r1, [pc, #28]	; (117c <I2C_HEATERS_PORT_init+0x2c>)
    115e:	2010      	movs	r0, #16
    1160:	4b07      	ldr	r3, [pc, #28]	; (1180 <I2C_HEATERS_PORT_init+0x30>)
    1162:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1164:	2101      	movs	r1, #1
    1166:	2011      	movs	r0, #17
    1168:	4b03      	ldr	r3, [pc, #12]	; (1178 <I2C_HEATERS_PORT_init+0x28>)
    116a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    116c:	4905      	ldr	r1, [pc, #20]	; (1184 <I2C_HEATERS_PORT_init+0x34>)
    116e:	2011      	movs	r0, #17
    1170:	4b03      	ldr	r3, [pc, #12]	; (1180 <I2C_HEATERS_PORT_init+0x30>)
    1172:	4798      	blx	r3
}
    1174:	bf00      	nop
    1176:	bd80      	pop	{r7, pc}
    1178:	00000d29 	.word	0x00000d29
    117c:	00100002 	.word	0x00100002
    1180:	00000d5d 	.word	0x00000d5d
    1184:	00110002 	.word	0x00110002

00001188 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1188:	b580      	push	{r7, lr}
    118a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    118c:	2242      	movs	r2, #66	; 0x42
    118e:	2108      	movs	r1, #8
    1190:	4806      	ldr	r0, [pc, #24]	; (11ac <I2C_HEATERS_CLOCK_init+0x24>)
    1192:	4b07      	ldr	r3, [pc, #28]	; (11b0 <I2C_HEATERS_CLOCK_init+0x28>)
    1194:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1196:	224a      	movs	r2, #74	; 0x4a
    1198:	2103      	movs	r1, #3
    119a:	4804      	ldr	r0, [pc, #16]	; (11ac <I2C_HEATERS_CLOCK_init+0x24>)
    119c:	4b04      	ldr	r3, [pc, #16]	; (11b0 <I2C_HEATERS_CLOCK_init+0x28>)
    119e:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    11a0:	4804      	ldr	r0, [pc, #16]	; (11b4 <I2C_HEATERS_CLOCK_init+0x2c>)
    11a2:	4b05      	ldr	r3, [pc, #20]	; (11b8 <I2C_HEATERS_CLOCK_init+0x30>)
    11a4:	4798      	blx	r3
}
    11a6:	bf00      	nop
    11a8:	bd80      	pop	{r7, pc}
    11aa:	bf00      	nop
    11ac:	40001c00 	.word	0x40001c00
    11b0:	00000509 	.word	0x00000509
    11b4:	40000800 	.word	0x40000800
    11b8:	0000060f 	.word	0x0000060f

000011bc <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    11bc:	b580      	push	{r7, lr}
    11be:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    11c0:	4b04      	ldr	r3, [pc, #16]	; (11d4 <I2C_HEATERS_init+0x18>)
    11c2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    11c4:	4904      	ldr	r1, [pc, #16]	; (11d8 <I2C_HEATERS_init+0x1c>)
    11c6:	4805      	ldr	r0, [pc, #20]	; (11dc <I2C_HEATERS_init+0x20>)
    11c8:	4b05      	ldr	r3, [pc, #20]	; (11e0 <I2C_HEATERS_init+0x24>)
    11ca:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    11cc:	4b05      	ldr	r3, [pc, #20]	; (11e4 <I2C_HEATERS_init+0x28>)
    11ce:	4798      	blx	r3
}
    11d0:	bf00      	nop
    11d2:	bd80      	pop	{r7, pc}
    11d4:	00001189 	.word	0x00001189
    11d8:	40003400 	.word	0x40003400
    11dc:	20000eb0 	.word	0x20000eb0
    11e0:	00001e6d 	.word	0x00001e6d
    11e4:	00001151 	.word	0x00001151

000011e8 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    11e8:	b580      	push	{r7, lr}
    11ea:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    11ec:	2100      	movs	r1, #0
    11ee:	203b      	movs	r0, #59	; 0x3b
    11f0:	4b11      	ldr	r3, [pc, #68]	; (1238 <SPI_TEMP_PORT_init+0x50>)
    11f2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    11f4:	2102      	movs	r1, #2
    11f6:	203b      	movs	r0, #59	; 0x3b
    11f8:	4b10      	ldr	r3, [pc, #64]	; (123c <SPI_TEMP_PORT_init+0x54>)
    11fa:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    11fc:	4910      	ldr	r1, [pc, #64]	; (1240 <SPI_TEMP_PORT_init+0x58>)
    11fe:	203b      	movs	r0, #59	; 0x3b
    1200:	4b10      	ldr	r3, [pc, #64]	; (1244 <SPI_TEMP_PORT_init+0x5c>)
    1202:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1204:	2100      	movs	r1, #0
    1206:	203a      	movs	r0, #58	; 0x3a
    1208:	4b0b      	ldr	r3, [pc, #44]	; (1238 <SPI_TEMP_PORT_init+0x50>)
    120a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    120c:	2102      	movs	r1, #2
    120e:	203a      	movs	r0, #58	; 0x3a
    1210:	4b0a      	ldr	r3, [pc, #40]	; (123c <SPI_TEMP_PORT_init+0x54>)
    1212:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1214:	490c      	ldr	r1, [pc, #48]	; (1248 <SPI_TEMP_PORT_init+0x60>)
    1216:	203a      	movs	r0, #58	; 0x3a
    1218:	4b0a      	ldr	r3, [pc, #40]	; (1244 <SPI_TEMP_PORT_init+0x5c>)
    121a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    121c:	2101      	movs	r1, #1
    121e:	203c      	movs	r0, #60	; 0x3c
    1220:	4b06      	ldr	r3, [pc, #24]	; (123c <SPI_TEMP_PORT_init+0x54>)
    1222:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1224:	2100      	movs	r1, #0
    1226:	203c      	movs	r0, #60	; 0x3c
    1228:	4b08      	ldr	r3, [pc, #32]	; (124c <SPI_TEMP_PORT_init+0x64>)
    122a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    122c:	4908      	ldr	r1, [pc, #32]	; (1250 <SPI_TEMP_PORT_init+0x68>)
    122e:	203c      	movs	r0, #60	; 0x3c
    1230:	4b04      	ldr	r3, [pc, #16]	; (1244 <SPI_TEMP_PORT_init+0x5c>)
    1232:	4798      	blx	r3
}
    1234:	bf00      	nop
    1236:	bd80      	pop	{r7, pc}
    1238:	00000db5 	.word	0x00000db5
    123c:	00000d7d 	.word	0x00000d7d
    1240:	003b0003 	.word	0x003b0003
    1244:	00000d5d 	.word	0x00000d5d
    1248:	003a0003 	.word	0x003a0003
    124c:	00000d29 	.word	0x00000d29
    1250:	003c0003 	.word	0x003c0003

00001254 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1254:	b580      	push	{r7, lr}
    1256:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1258:	2245      	movs	r2, #69	; 0x45
    125a:	2122      	movs	r1, #34	; 0x22
    125c:	4806      	ldr	r0, [pc, #24]	; (1278 <SPI_TEMP_CLOCK_init+0x24>)
    125e:	4b07      	ldr	r3, [pc, #28]	; (127c <SPI_TEMP_CLOCK_init+0x28>)
    1260:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1262:	224a      	movs	r2, #74	; 0x4a
    1264:	2103      	movs	r1, #3
    1266:	4804      	ldr	r0, [pc, #16]	; (1278 <SPI_TEMP_CLOCK_init+0x24>)
    1268:	4b04      	ldr	r3, [pc, #16]	; (127c <SPI_TEMP_CLOCK_init+0x28>)
    126a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    126c:	4804      	ldr	r0, [pc, #16]	; (1280 <SPI_TEMP_CLOCK_init+0x2c>)
    126e:	4b05      	ldr	r3, [pc, #20]	; (1284 <SPI_TEMP_CLOCK_init+0x30>)
    1270:	4798      	blx	r3
}
    1272:	bf00      	nop
    1274:	bd80      	pop	{r7, pc}
    1276:	bf00      	nop
    1278:	40001c00 	.word	0x40001c00
    127c:	00000509 	.word	0x00000509
    1280:	40000800 	.word	0x40000800
    1284:	0000078f 	.word	0x0000078f

00001288 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1288:	b580      	push	{r7, lr}
    128a:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    128c:	4b05      	ldr	r3, [pc, #20]	; (12a4 <SPI_TEMP_init+0x1c>)
    128e:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1290:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1294:	4804      	ldr	r0, [pc, #16]	; (12a8 <SPI_TEMP_init+0x20>)
    1296:	4b05      	ldr	r3, [pc, #20]	; (12ac <SPI_TEMP_init+0x24>)
    1298:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    129a:	4b05      	ldr	r3, [pc, #20]	; (12b0 <SPI_TEMP_init+0x28>)
    129c:	4798      	blx	r3
}
    129e:	bf00      	nop
    12a0:	bd80      	pop	{r7, pc}
    12a2:	bf00      	nop
    12a4:	00001255 	.word	0x00001255
    12a8:	20000db8 	.word	0x20000db8
    12ac:	00002125 	.word	0x00002125
    12b0:	000011e9 	.word	0x000011e9

000012b4 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    12b4:	b580      	push	{r7, lr}
    12b6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    12b8:	2100      	movs	r1, #0
    12ba:	2017      	movs	r0, #23
    12bc:	4b07      	ldr	r3, [pc, #28]	; (12dc <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    12be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    12c0:	4907      	ldr	r1, [pc, #28]	; (12e0 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    12c2:	2017      	movs	r0, #23
    12c4:	4b07      	ldr	r3, [pc, #28]	; (12e4 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    12c6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    12c8:	2100      	movs	r1, #0
    12ca:	2016      	movs	r0, #22
    12cc:	4b03      	ldr	r3, [pc, #12]	; (12dc <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    12ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    12d0:	4905      	ldr	r1, [pc, #20]	; (12e8 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    12d2:	2016      	movs	r0, #22
    12d4:	4b03      	ldr	r3, [pc, #12]	; (12e4 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    12d6:	4798      	blx	r3
}
    12d8:	bf00      	nop
    12da:	bd80      	pop	{r7, pc}
    12dc:	00000d29 	.word	0x00000d29
    12e0:	00170003 	.word	0x00170003
    12e4:	00000d5d 	.word	0x00000d5d
    12e8:	00160003 	.word	0x00160003

000012ec <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    12ec:	b580      	push	{r7, lr}
    12ee:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12f0:	2244      	movs	r2, #68	; 0x44
    12f2:	2123      	movs	r1, #35	; 0x23
    12f4:	4806      	ldr	r0, [pc, #24]	; (1310 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    12f6:	4b07      	ldr	r3, [pc, #28]	; (1314 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    12f8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12fa:	224a      	movs	r2, #74	; 0x4a
    12fc:	2103      	movs	r1, #3
    12fe:	4804      	ldr	r0, [pc, #16]	; (1310 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1300:	4b04      	ldr	r3, [pc, #16]	; (1314 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1302:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1304:	4804      	ldr	r0, [pc, #16]	; (1318 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    1306:	4b05      	ldr	r3, [pc, #20]	; (131c <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    1308:	4798      	blx	r3
}
    130a:	bf00      	nop
    130c:	bd80      	pop	{r7, pc}
    130e:	bf00      	nop
    1310:	40001c00 	.word	0x40001c00
    1314:	00000509 	.word	0x00000509
    1318:	40000800 	.word	0x40000800
    131c:	000007af 	.word	0x000007af

00001320 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    1320:	b580      	push	{r7, lr}
    1322:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    1324:	4b04      	ldr	r3, [pc, #16]	; (1338 <I2C_FLAPPER_VALVE_init+0x18>)
    1326:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    1328:	4904      	ldr	r1, [pc, #16]	; (133c <I2C_FLAPPER_VALVE_init+0x1c>)
    132a:	4805      	ldr	r0, [pc, #20]	; (1340 <I2C_FLAPPER_VALVE_init+0x20>)
    132c:	4b05      	ldr	r3, [pc, #20]	; (1344 <I2C_FLAPPER_VALVE_init+0x24>)
    132e:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    1330:	4b05      	ldr	r3, [pc, #20]	; (1348 <I2C_FLAPPER_VALVE_init+0x28>)
    1332:	4798      	blx	r3
}
    1334:	bf00      	nop
    1336:	bd80      	pop	{r7, pc}
    1338:	000012ed 	.word	0x000012ed
    133c:	43000400 	.word	0x43000400
    1340:	20000e54 	.word	0x20000e54
    1344:	00001e6d 	.word	0x00001e6d
    1348:	000012b5 	.word	0x000012b5

0000134c <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    134c:	b580      	push	{r7, lr}
    134e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1350:	2100      	movs	r1, #0
    1352:	2044      	movs	r0, #68	; 0x44
    1354:	4b11      	ldr	r3, [pc, #68]	; (139c <SPI_HI3593_PORT_init+0x50>)
    1356:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1358:	2102      	movs	r1, #2
    135a:	2044      	movs	r0, #68	; 0x44
    135c:	4b10      	ldr	r3, [pc, #64]	; (13a0 <SPI_HI3593_PORT_init+0x54>)
    135e:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1360:	4910      	ldr	r1, [pc, #64]	; (13a4 <SPI_HI3593_PORT_init+0x58>)
    1362:	2044      	movs	r0, #68	; 0x44
    1364:	4b10      	ldr	r3, [pc, #64]	; (13a8 <SPI_HI3593_PORT_init+0x5c>)
    1366:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1368:	2100      	movs	r1, #0
    136a:	2045      	movs	r0, #69	; 0x45
    136c:	4b0b      	ldr	r3, [pc, #44]	; (139c <SPI_HI3593_PORT_init+0x50>)
    136e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1370:	2102      	movs	r1, #2
    1372:	2045      	movs	r0, #69	; 0x45
    1374:	4b0a      	ldr	r3, [pc, #40]	; (13a0 <SPI_HI3593_PORT_init+0x54>)
    1376:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1378:	490c      	ldr	r1, [pc, #48]	; (13ac <SPI_HI3593_PORT_init+0x60>)
    137a:	2045      	movs	r0, #69	; 0x45
    137c:	4b0a      	ldr	r3, [pc, #40]	; (13a8 <SPI_HI3593_PORT_init+0x5c>)
    137e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1380:	2101      	movs	r1, #1
    1382:	2047      	movs	r0, #71	; 0x47
    1384:	4b06      	ldr	r3, [pc, #24]	; (13a0 <SPI_HI3593_PORT_init+0x54>)
    1386:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1388:	2100      	movs	r1, #0
    138a:	2047      	movs	r0, #71	; 0x47
    138c:	4b08      	ldr	r3, [pc, #32]	; (13b0 <SPI_HI3593_PORT_init+0x64>)
    138e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1390:	4908      	ldr	r1, [pc, #32]	; (13b4 <SPI_HI3593_PORT_init+0x68>)
    1392:	2047      	movs	r0, #71	; 0x47
    1394:	4b04      	ldr	r3, [pc, #16]	; (13a8 <SPI_HI3593_PORT_init+0x5c>)
    1396:	4798      	blx	r3
}
    1398:	bf00      	nop
    139a:	bd80      	pop	{r7, pc}
    139c:	00000db5 	.word	0x00000db5
    13a0:	00000d7d 	.word	0x00000d7d
    13a4:	00440002 	.word	0x00440002
    13a8:	00000d5d 	.word	0x00000d5d
    13ac:	00450002 	.word	0x00450002
    13b0:	00000d29 	.word	0x00000d29
    13b4:	00470002 	.word	0x00470002

000013b8 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    13b8:	b580      	push	{r7, lr}
    13ba:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    13bc:	2242      	movs	r2, #66	; 0x42
    13be:	2124      	movs	r1, #36	; 0x24
    13c0:	4806      	ldr	r0, [pc, #24]	; (13dc <SPI_HI3593_CLOCK_init+0x24>)
    13c2:	4b07      	ldr	r3, [pc, #28]	; (13e0 <SPI_HI3593_CLOCK_init+0x28>)
    13c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    13c6:	224a      	movs	r2, #74	; 0x4a
    13c8:	2103      	movs	r1, #3
    13ca:	4804      	ldr	r0, [pc, #16]	; (13dc <SPI_HI3593_CLOCK_init+0x24>)
    13cc:	4b04      	ldr	r3, [pc, #16]	; (13e0 <SPI_HI3593_CLOCK_init+0x28>)
    13ce:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    13d0:	4804      	ldr	r0, [pc, #16]	; (13e4 <SPI_HI3593_CLOCK_init+0x2c>)
    13d2:	4b05      	ldr	r3, [pc, #20]	; (13e8 <SPI_HI3593_CLOCK_init+0x30>)
    13d4:	4798      	blx	r3
}
    13d6:	bf00      	nop
    13d8:	bd80      	pop	{r7, pc}
    13da:	bf00      	nop
    13dc:	40001c00 	.word	0x40001c00
    13e0:	00000509 	.word	0x00000509
    13e4:	40000800 	.word	0x40000800
    13e8:	000007cf 	.word	0x000007cf

000013ec <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    13ec:	b580      	push	{r7, lr}
    13ee:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    13f0:	4b04      	ldr	r3, [pc, #16]	; (1404 <SPI_HI3593_init+0x18>)
    13f2:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    13f4:	4904      	ldr	r1, [pc, #16]	; (1408 <SPI_HI3593_init+0x1c>)
    13f6:	4805      	ldr	r0, [pc, #20]	; (140c <SPI_HI3593_init+0x20>)
    13f8:	4b05      	ldr	r3, [pc, #20]	; (1410 <SPI_HI3593_init+0x24>)
    13fa:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    13fc:	4b05      	ldr	r3, [pc, #20]	; (1414 <SPI_HI3593_init+0x28>)
    13fe:	4798      	blx	r3
}
    1400:	bf00      	nop
    1402:	bd80      	pop	{r7, pc}
    1404:	000013b9 	.word	0x000013b9
    1408:	43000800 	.word	0x43000800
    140c:	20000da0 	.word	0x20000da0
    1410:	00002125 	.word	0x00002125
    1414:	0000134d 	.word	0x0000134d

00001418 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    1418:	b580      	push	{r7, lr}
    141a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    141c:	2100      	movs	r1, #0
    141e:	2068      	movs	r0, #104	; 0x68
    1420:	4b07      	ldr	r3, [pc, #28]	; (1440 <I2C_FANS_PORT_init+0x28>)
    1422:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1424:	4907      	ldr	r1, [pc, #28]	; (1444 <I2C_FANS_PORT_init+0x2c>)
    1426:	2068      	movs	r0, #104	; 0x68
    1428:	4b07      	ldr	r3, [pc, #28]	; (1448 <I2C_FANS_PORT_init+0x30>)
    142a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    142c:	2100      	movs	r1, #0
    142e:	2069      	movs	r0, #105	; 0x69
    1430:	4b03      	ldr	r3, [pc, #12]	; (1440 <I2C_FANS_PORT_init+0x28>)
    1432:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1434:	4905      	ldr	r1, [pc, #20]	; (144c <I2C_FANS_PORT_init+0x34>)
    1436:	2069      	movs	r0, #105	; 0x69
    1438:	4b03      	ldr	r3, [pc, #12]	; (1448 <I2C_FANS_PORT_init+0x30>)
    143a:	4798      	blx	r3
}
    143c:	bf00      	nop
    143e:	bd80      	pop	{r7, pc}
    1440:	00000d29 	.word	0x00000d29
    1444:	00680002 	.word	0x00680002
    1448:	00000d5d 	.word	0x00000d5d
    144c:	00690002 	.word	0x00690002

00001450 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    1450:	b580      	push	{r7, lr}
    1452:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1454:	2244      	movs	r2, #68	; 0x44
    1456:	2125      	movs	r1, #37	; 0x25
    1458:	4806      	ldr	r0, [pc, #24]	; (1474 <I2C_FANS_CLOCK_init+0x24>)
    145a:	4b07      	ldr	r3, [pc, #28]	; (1478 <I2C_FANS_CLOCK_init+0x28>)
    145c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    145e:	224a      	movs	r2, #74	; 0x4a
    1460:	2103      	movs	r1, #3
    1462:	4804      	ldr	r0, [pc, #16]	; (1474 <I2C_FANS_CLOCK_init+0x24>)
    1464:	4b04      	ldr	r3, [pc, #16]	; (1478 <I2C_FANS_CLOCK_init+0x28>)
    1466:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1468:	4804      	ldr	r0, [pc, #16]	; (147c <I2C_FANS_CLOCK_init+0x2c>)
    146a:	4b05      	ldr	r3, [pc, #20]	; (1480 <I2C_FANS_CLOCK_init+0x30>)
    146c:	4798      	blx	r3
}
    146e:	bf00      	nop
    1470:	bd80      	pop	{r7, pc}
    1472:	bf00      	nop
    1474:	40001c00 	.word	0x40001c00
    1478:	00000509 	.word	0x00000509
    147c:	40000800 	.word	0x40000800
    1480:	000007ef 	.word	0x000007ef

00001484 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    1484:	b580      	push	{r7, lr}
    1486:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    1488:	4b04      	ldr	r3, [pc, #16]	; (149c <I2C_FANS_init+0x18>)
    148a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    148c:	4904      	ldr	r1, [pc, #16]	; (14a0 <I2C_FANS_init+0x1c>)
    148e:	4805      	ldr	r0, [pc, #20]	; (14a4 <I2C_FANS_init+0x20>)
    1490:	4b05      	ldr	r3, [pc, #20]	; (14a8 <I2C_FANS_init+0x24>)
    1492:	4798      	blx	r3
	I2C_FANS_PORT_init();
    1494:	4b05      	ldr	r3, [pc, #20]	; (14ac <I2C_FANS_init+0x28>)
    1496:	4798      	blx	r3
}
    1498:	bf00      	nop
    149a:	bd80      	pop	{r7, pc}
    149c:	00001451 	.word	0x00001451
    14a0:	43000c00 	.word	0x43000c00
    14a4:	20000dd0 	.word	0x20000dd0
    14a8:	00001e6d 	.word	0x00001e6d
    14ac:	00001419 	.word	0x00001419

000014b0 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    14b0:	b580      	push	{r7, lr}
    14b2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    14b4:	4808      	ldr	r0, [pc, #32]	; (14d8 <TIMER_USB_init+0x28>)
    14b6:	4b09      	ldr	r3, [pc, #36]	; (14dc <TIMER_USB_init+0x2c>)
    14b8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14ba:	2243      	movs	r2, #67	; 0x43
    14bc:	2109      	movs	r1, #9
    14be:	4808      	ldr	r0, [pc, #32]	; (14e0 <TIMER_USB_init+0x30>)
    14c0:	4b08      	ldr	r3, [pc, #32]	; (14e4 <TIMER_USB_init+0x34>)
    14c2:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    14c4:	4b08      	ldr	r3, [pc, #32]	; (14e8 <TIMER_USB_init+0x38>)
    14c6:	4798      	blx	r3
    14c8:	4603      	mov	r3, r0
    14ca:	461a      	mov	r2, r3
    14cc:	4907      	ldr	r1, [pc, #28]	; (14ec <TIMER_USB_init+0x3c>)
    14ce:	4808      	ldr	r0, [pc, #32]	; (14f0 <TIMER_USB_init+0x40>)
    14d0:	4b08      	ldr	r3, [pc, #32]	; (14f4 <TIMER_USB_init+0x44>)
    14d2:	4798      	blx	r3
}
    14d4:	bf00      	nop
    14d6:	bd80      	pop	{r7, pc}
    14d8:	40000800 	.word	0x40000800
    14dc:	0000062f 	.word	0x0000062f
    14e0:	40001c00 	.word	0x40001c00
    14e4:	00000509 	.word	0x00000509
    14e8:	0000769d 	.word	0x0000769d
    14ec:	40003800 	.word	0x40003800
    14f0:	20000f18 	.word	0x20000f18
    14f4:	000022f5 	.word	0x000022f5

000014f8 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    14f8:	b580      	push	{r7, lr}
    14fa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    14fc:	4808      	ldr	r0, [pc, #32]	; (1520 <TIMER_ARINC_init+0x28>)
    14fe:	4b09      	ldr	r3, [pc, #36]	; (1524 <TIMER_ARINC_init+0x2c>)
    1500:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1502:	2244      	movs	r2, #68	; 0x44
    1504:	211a      	movs	r1, #26
    1506:	4808      	ldr	r0, [pc, #32]	; (1528 <TIMER_ARINC_init+0x30>)
    1508:	4b08      	ldr	r3, [pc, #32]	; (152c <TIMER_ARINC_init+0x34>)
    150a:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    150c:	4b08      	ldr	r3, [pc, #32]	; (1530 <TIMER_ARINC_init+0x38>)
    150e:	4798      	blx	r3
    1510:	4603      	mov	r3, r0
    1512:	461a      	mov	r2, r3
    1514:	4907      	ldr	r1, [pc, #28]	; (1534 <TIMER_ARINC_init+0x3c>)
    1516:	4808      	ldr	r0, [pc, #32]	; (1538 <TIMER_ARINC_init+0x40>)
    1518:	4b08      	ldr	r3, [pc, #32]	; (153c <TIMER_ARINC_init+0x44>)
    151a:	4798      	blx	r3
}
    151c:	bf00      	nop
    151e:	bd80      	pop	{r7, pc}
    1520:	40000800 	.word	0x40000800
    1524:	000006ef 	.word	0x000006ef
    1528:	40001c00 	.word	0x40001c00
    152c:	00000509 	.word	0x00000509
    1530:	0000769d 	.word	0x0000769d
    1534:	4101a000 	.word	0x4101a000
    1538:	20000ef8 	.word	0x20000ef8
    153c:	000022f5 	.word	0x000022f5

00001540 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1540:	b580      	push	{r7, lr}
    1542:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1544:	4808      	ldr	r0, [pc, #32]	; (1568 <TIMER_MAINTENANCE_init+0x28>)
    1546:	4b09      	ldr	r3, [pc, #36]	; (156c <TIMER_MAINTENANCE_init+0x2c>)
    1548:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    154a:	2246      	movs	r2, #70	; 0x46
    154c:	211e      	movs	r1, #30
    154e:	4808      	ldr	r0, [pc, #32]	; (1570 <TIMER_MAINTENANCE_init+0x30>)
    1550:	4b08      	ldr	r3, [pc, #32]	; (1574 <TIMER_MAINTENANCE_init+0x34>)
    1552:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1554:	4b08      	ldr	r3, [pc, #32]	; (1578 <TIMER_MAINTENANCE_init+0x38>)
    1556:	4798      	blx	r3
    1558:	4603      	mov	r3, r0
    155a:	461a      	mov	r2, r3
    155c:	4907      	ldr	r1, [pc, #28]	; (157c <TIMER_MAINTENANCE_init+0x3c>)
    155e:	4808      	ldr	r0, [pc, #32]	; (1580 <TIMER_MAINTENANCE_init+0x40>)
    1560:	4b08      	ldr	r3, [pc, #32]	; (1584 <TIMER_MAINTENANCE_init+0x44>)
    1562:	4798      	blx	r3
}
    1564:	bf00      	nop
    1566:	bd80      	pop	{r7, pc}
    1568:	40000800 	.word	0x40000800
    156c:	0000072f 	.word	0x0000072f
    1570:	40001c00 	.word	0x40001c00
    1574:	00000509 	.word	0x00000509
    1578:	0000769d 	.word	0x0000769d
    157c:	42001400 	.word	0x42001400
    1580:	20000df0 	.word	0x20000df0
    1584:	000022f5 	.word	0x000022f5

00001588 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1588:	b580      	push	{r7, lr}
    158a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    158c:	4808      	ldr	r0, [pc, #32]	; (15b0 <TIMER_INTERFACE_init+0x28>)
    158e:	4b09      	ldr	r3, [pc, #36]	; (15b4 <TIMER_INTERFACE_init+0x2c>)
    1590:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1592:	2246      	movs	r2, #70	; 0x46
    1594:	211e      	movs	r1, #30
    1596:	4808      	ldr	r0, [pc, #32]	; (15b8 <TIMER_INTERFACE_init+0x30>)
    1598:	4b08      	ldr	r3, [pc, #32]	; (15bc <TIMER_INTERFACE_init+0x34>)
    159a:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    159c:	4b08      	ldr	r3, [pc, #32]	; (15c0 <TIMER_INTERFACE_init+0x38>)
    159e:	4798      	blx	r3
    15a0:	4603      	mov	r3, r0
    15a2:	461a      	mov	r2, r3
    15a4:	4907      	ldr	r1, [pc, #28]	; (15c4 <TIMER_INTERFACE_init+0x3c>)
    15a6:	4808      	ldr	r0, [pc, #32]	; (15c8 <TIMER_INTERFACE_init+0x40>)
    15a8:	4b08      	ldr	r3, [pc, #32]	; (15cc <TIMER_INTERFACE_init+0x44>)
    15aa:	4798      	blx	r3
}
    15ac:	bf00      	nop
    15ae:	bd80      	pop	{r7, pc}
    15b0:	40000800 	.word	0x40000800
    15b4:	0000074f 	.word	0x0000074f
    15b8:	40001c00 	.word	0x40001c00
    15bc:	00000509 	.word	0x00000509
    15c0:	0000769d 	.word	0x0000769d
    15c4:	42001800 	.word	0x42001800
    15c8:	20000e34 	.word	0x20000e34
    15cc:	000022f5 	.word	0x000022f5

000015d0 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    15d0:	b580      	push	{r7, lr}
    15d2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    15d4:	4808      	ldr	r0, [pc, #32]	; (15f8 <TIMER_EVENT_init+0x28>)
    15d6:	4b09      	ldr	r3, [pc, #36]	; (15fc <TIMER_EVENT_init+0x2c>)
    15d8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15da:	2246      	movs	r2, #70	; 0x46
    15dc:	2127      	movs	r1, #39	; 0x27
    15de:	4808      	ldr	r0, [pc, #32]	; (1600 <TIMER_EVENT_init+0x30>)
    15e0:	4b08      	ldr	r3, [pc, #32]	; (1604 <TIMER_EVENT_init+0x34>)
    15e2:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    15e4:	4b08      	ldr	r3, [pc, #32]	; (1608 <TIMER_EVENT_init+0x38>)
    15e6:	4798      	blx	r3
    15e8:	4603      	mov	r3, r0
    15ea:	461a      	mov	r2, r3
    15ec:	4907      	ldr	r1, [pc, #28]	; (160c <TIMER_EVENT_init+0x3c>)
    15ee:	4808      	ldr	r0, [pc, #32]	; (1610 <TIMER_EVENT_init+0x40>)
    15f0:	4b08      	ldr	r3, [pc, #32]	; (1614 <TIMER_EVENT_init+0x44>)
    15f2:	4798      	blx	r3
}
    15f4:	bf00      	nop
    15f6:	bd80      	pop	{r7, pc}
    15f8:	40000800 	.word	0x40000800
    15fc:	0000080f 	.word	0x0000080f
    1600:	40001c00 	.word	0x40001c00
    1604:	00000509 	.word	0x00000509
    1608:	0000769d 	.word	0x0000769d
    160c:	43001400 	.word	0x43001400
    1610:	20000e14 	.word	0x20000e14
    1614:	000022f5 	.word	0x000022f5

00001618 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1618:	b480      	push	{r7}
    161a:	af00      	add	r7, sp, #0
}
    161c:	bf00      	nop
    161e:	46bd      	mov	sp, r7
    1620:	f85d 7b04 	ldr.w	r7, [sp], #4
    1624:	4770      	bx	lr
	...

00001628 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1628:	b580      	push	{r7, lr}
    162a:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    162c:	4804      	ldr	r0, [pc, #16]	; (1640 <LIVE_PULSE_CLOCK_init+0x18>)
    162e:	4b05      	ldr	r3, [pc, #20]	; (1644 <LIVE_PULSE_CLOCK_init+0x1c>)
    1630:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1632:	2240      	movs	r2, #64	; 0x40
    1634:	2127      	movs	r1, #39	; 0x27
    1636:	4804      	ldr	r0, [pc, #16]	; (1648 <LIVE_PULSE_CLOCK_init+0x20>)
    1638:	4b04      	ldr	r3, [pc, #16]	; (164c <LIVE_PULSE_CLOCK_init+0x24>)
    163a:	4798      	blx	r3
}
    163c:	bf00      	nop
    163e:	bd80      	pop	{r7, pc}
    1640:	40000800 	.word	0x40000800
    1644:	0000082f 	.word	0x0000082f
    1648:	40001c00 	.word	0x40001c00
    164c:	00000509 	.word	0x00000509

00001650 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1650:	b580      	push	{r7, lr}
    1652:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1654:	4b06      	ldr	r3, [pc, #24]	; (1670 <LIVE_PULSE_init+0x20>)
    1656:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1658:	4b06      	ldr	r3, [pc, #24]	; (1674 <LIVE_PULSE_init+0x24>)
    165a:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    165c:	4b06      	ldr	r3, [pc, #24]	; (1678 <LIVE_PULSE_init+0x28>)
    165e:	4798      	blx	r3
    1660:	4603      	mov	r3, r0
    1662:	461a      	mov	r2, r3
    1664:	4905      	ldr	r1, [pc, #20]	; (167c <LIVE_PULSE_init+0x2c>)
    1666:	4806      	ldr	r0, [pc, #24]	; (1680 <LIVE_PULSE_init+0x30>)
    1668:	4b06      	ldr	r3, [pc, #24]	; (1684 <LIVE_PULSE_init+0x34>)
    166a:	4798      	blx	r3
}
    166c:	bf00      	nop
    166e:	bd80      	pop	{r7, pc}
    1670:	00001629 	.word	0x00001629
    1674:	00001619 	.word	0x00001619
    1678:	000076b1 	.word	0x000076b1
    167c:	43001800 	.word	0x43001800
    1680:	20000e74 	.word	0x20000e74
    1684:	00001f69 	.word	0x00001f69

00001688 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1688:	b580      	push	{r7, lr}
    168a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    168c:	4804      	ldr	r0, [pc, #16]	; (16a0 <TIMER_HVAC_CLOCK_init+0x18>)
    168e:	4b05      	ldr	r3, [pc, #20]	; (16a4 <TIMER_HVAC_CLOCK_init+0x1c>)
    1690:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1692:	2244      	movs	r2, #68	; 0x44
    1694:	2119      	movs	r1, #25
    1696:	4804      	ldr	r0, [pc, #16]	; (16a8 <TIMER_HVAC_CLOCK_init+0x20>)
    1698:	4b04      	ldr	r3, [pc, #16]	; (16ac <TIMER_HVAC_CLOCK_init+0x24>)
    169a:	4798      	blx	r3
}
    169c:	bf00      	nop
    169e:	bd80      	pop	{r7, pc}
    16a0:	40000800 	.word	0x40000800
    16a4:	000006af 	.word	0x000006af
    16a8:	40001c00 	.word	0x40001c00
    16ac:	00000509 	.word	0x00000509

000016b0 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    16b0:	b580      	push	{r7, lr}
    16b2:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    16b4:	4b05      	ldr	r3, [pc, #20]	; (16cc <TIMER_HVAC_init+0x1c>)
    16b6:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    16b8:	4b05      	ldr	r3, [pc, #20]	; (16d0 <TIMER_HVAC_init+0x20>)
    16ba:	4798      	blx	r3
    16bc:	4603      	mov	r3, r0
    16be:	461a      	mov	r2, r3
    16c0:	4904      	ldr	r1, [pc, #16]	; (16d4 <TIMER_HVAC_init+0x24>)
    16c2:	4805      	ldr	r0, [pc, #20]	; (16d8 <TIMER_HVAC_init+0x28>)
    16c4:	4b05      	ldr	r3, [pc, #20]	; (16dc <TIMER_HVAC_init+0x2c>)
    16c6:	4798      	blx	r3
}
    16c8:	bf00      	nop
    16ca:	bd80      	pop	{r7, pc}
    16cc:	00001689 	.word	0x00001689
    16d0:	00006a81 	.word	0x00006a81
    16d4:	41016000 	.word	0x41016000
    16d8:	20000f38 	.word	0x20000f38
    16dc:	000022f5 	.word	0x000022f5

000016e0 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    16e0:	b580      	push	{r7, lr}
    16e2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    16e4:	4804      	ldr	r0, [pc, #16]	; (16f8 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    16e6:	4b05      	ldr	r3, [pc, #20]	; (16fc <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    16e8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16ea:	2244      	movs	r2, #68	; 0x44
    16ec:	2119      	movs	r1, #25
    16ee:	4804      	ldr	r0, [pc, #16]	; (1700 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    16f0:	4b04      	ldr	r3, [pc, #16]	; (1704 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    16f2:	4798      	blx	r3
}
    16f4:	bf00      	nop
    16f6:	bd80      	pop	{r7, pc}
    16f8:	40000800 	.word	0x40000800
    16fc:	000006cf 	.word	0x000006cf
    1700:	40001c00 	.word	0x40001c00
    1704:	00000509 	.word	0x00000509

00001708 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1708:	b580      	push	{r7, lr}
    170a:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    170c:	4b05      	ldr	r3, [pc, #20]	; (1724 <TIMER_TEMPERATURES_init+0x1c>)
    170e:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1710:	4b05      	ldr	r3, [pc, #20]	; (1728 <TIMER_TEMPERATURES_init+0x20>)
    1712:	4798      	blx	r3
    1714:	4603      	mov	r3, r0
    1716:	461a      	mov	r2, r3
    1718:	4904      	ldr	r1, [pc, #16]	; (172c <TIMER_TEMPERATURES_init+0x24>)
    171a:	4805      	ldr	r0, [pc, #20]	; (1730 <TIMER_TEMPERATURES_init+0x28>)
    171c:	4b05      	ldr	r3, [pc, #20]	; (1734 <TIMER_TEMPERATURES_init+0x2c>)
    171e:	4798      	blx	r3
}
    1720:	bf00      	nop
    1722:	bd80      	pop	{r7, pc}
    1724:	000016e1 	.word	0x000016e1
    1728:	00006a81 	.word	0x00006a81
    172c:	41018000 	.word	0x41018000
    1730:	20000d80 	.word	0x20000d80
    1734:	000022f5 	.word	0x000022f5

00001738 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    1738:	b580      	push	{r7, lr}
    173a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    173c:	4804      	ldr	r0, [pc, #16]	; (1750 <TIMER_CCU_CLOCK_init+0x18>)
    173e:	4b05      	ldr	r3, [pc, #20]	; (1754 <TIMER_CCU_CLOCK_init+0x1c>)
    1740:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1742:	2240      	movs	r2, #64	; 0x40
    1744:	211d      	movs	r1, #29
    1746:	4804      	ldr	r0, [pc, #16]	; (1758 <TIMER_CCU_CLOCK_init+0x20>)
    1748:	4b04      	ldr	r3, [pc, #16]	; (175c <TIMER_CCU_CLOCK_init+0x24>)
    174a:	4798      	blx	r3
}
    174c:	bf00      	nop
    174e:	bd80      	pop	{r7, pc}
    1750:	40000800 	.word	0x40000800
    1754:	0000070f 	.word	0x0000070f
    1758:	40001c00 	.word	0x40001c00
    175c:	00000509 	.word	0x00000509

00001760 <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    1760:	b580      	push	{r7, lr}
    1762:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    1764:	4b05      	ldr	r3, [pc, #20]	; (177c <TIMER_CCU_init+0x1c>)
    1766:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    1768:	4b05      	ldr	r3, [pc, #20]	; (1780 <TIMER_CCU_init+0x20>)
    176a:	4798      	blx	r3
    176c:	4603      	mov	r3, r0
    176e:	461a      	mov	r2, r3
    1770:	4904      	ldr	r1, [pc, #16]	; (1784 <TIMER_CCU_init+0x24>)
    1772:	4805      	ldr	r0, [pc, #20]	; (1788 <TIMER_CCU_init+0x28>)
    1774:	4b05      	ldr	r3, [pc, #20]	; (178c <TIMER_CCU_init+0x2c>)
    1776:	4798      	blx	r3
}
    1778:	bf00      	nop
    177a:	bd80      	pop	{r7, pc}
    177c:	00001739 	.word	0x00001739
    1780:	00006a81 	.word	0x00006a81
    1784:	42000c00 	.word	0x42000c00
    1788:	20000e90 	.word	0x20000e90
    178c:	000022f5 	.word	0x000022f5

00001790 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1790:	b580      	push	{r7, lr}
    1792:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1794:	2102      	movs	r1, #2
    1796:	2018      	movs	r0, #24
    1798:	4b0f      	ldr	r3, [pc, #60]	; (17d8 <CDCUSB_PORT_init+0x48>)
    179a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    179c:	2100      	movs	r1, #0
    179e:	2018      	movs	r0, #24
    17a0:	4b0e      	ldr	r3, [pc, #56]	; (17dc <CDCUSB_PORT_init+0x4c>)
    17a2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    17a4:	2100      	movs	r1, #0
    17a6:	2018      	movs	r0, #24
    17a8:	4b0d      	ldr	r3, [pc, #52]	; (17e0 <CDCUSB_PORT_init+0x50>)
    17aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    17ac:	490d      	ldr	r1, [pc, #52]	; (17e4 <CDCUSB_PORT_init+0x54>)
    17ae:	2018      	movs	r0, #24
    17b0:	4b0d      	ldr	r3, [pc, #52]	; (17e8 <CDCUSB_PORT_init+0x58>)
    17b2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    17b4:	2102      	movs	r1, #2
    17b6:	2019      	movs	r0, #25
    17b8:	4b07      	ldr	r3, [pc, #28]	; (17d8 <CDCUSB_PORT_init+0x48>)
    17ba:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    17bc:	2100      	movs	r1, #0
    17be:	2019      	movs	r0, #25
    17c0:	4b06      	ldr	r3, [pc, #24]	; (17dc <CDCUSB_PORT_init+0x4c>)
    17c2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    17c4:	2100      	movs	r1, #0
    17c6:	2019      	movs	r0, #25
    17c8:	4b05      	ldr	r3, [pc, #20]	; (17e0 <CDCUSB_PORT_init+0x50>)
    17ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    17cc:	4907      	ldr	r1, [pc, #28]	; (17ec <CDCUSB_PORT_init+0x5c>)
    17ce:	2019      	movs	r0, #25
    17d0:	4b05      	ldr	r3, [pc, #20]	; (17e8 <CDCUSB_PORT_init+0x58>)
    17d2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    17d4:	bf00      	nop
    17d6:	bd80      	pop	{r7, pc}
    17d8:	00000d7d 	.word	0x00000d7d
    17dc:	00000db5 	.word	0x00000db5
    17e0:	00000d29 	.word	0x00000d29
    17e4:	00180007 	.word	0x00180007
    17e8:	00000d5d 	.word	0x00000d5d
    17ec:	00190007 	.word	0x00190007

000017f0 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    17f0:	b580      	push	{r7, lr}
    17f2:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    17f4:	2242      	movs	r2, #66	; 0x42
    17f6:	210a      	movs	r1, #10
    17f8:	4805      	ldr	r0, [pc, #20]	; (1810 <CDCUSB_CLOCK_init+0x20>)
    17fa:	4b06      	ldr	r3, [pc, #24]	; (1814 <CDCUSB_CLOCK_init+0x24>)
    17fc:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    17fe:	4806      	ldr	r0, [pc, #24]	; (1818 <CDCUSB_CLOCK_init+0x28>)
    1800:	4b06      	ldr	r3, [pc, #24]	; (181c <CDCUSB_CLOCK_init+0x2c>)
    1802:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1804:	4804      	ldr	r0, [pc, #16]	; (1818 <CDCUSB_CLOCK_init+0x28>)
    1806:	4b06      	ldr	r3, [pc, #24]	; (1820 <CDCUSB_CLOCK_init+0x30>)
    1808:	4798      	blx	r3
}
    180a:	bf00      	nop
    180c:	bd80      	pop	{r7, pc}
    180e:	bf00      	nop
    1810:	40001c00 	.word	0x40001c00
    1814:	00000509 	.word	0x00000509
    1818:	40000800 	.word	0x40000800
    181c:	0000052f 	.word	0x0000052f
    1820:	0000064f 	.word	0x0000064f

00001824 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1824:	b580      	push	{r7, lr}
    1826:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1828:	4b03      	ldr	r3, [pc, #12]	; (1838 <CDCUSB_init+0x14>)
    182a:	4798      	blx	r3
	usb_d_init();
    182c:	4b03      	ldr	r3, [pc, #12]	; (183c <CDCUSB_init+0x18>)
    182e:	4798      	blx	r3
	CDCUSB_PORT_init();
    1830:	4b03      	ldr	r3, [pc, #12]	; (1840 <CDCUSB_init+0x1c>)
    1832:	4798      	blx	r3
}
    1834:	bf00      	nop
    1836:	bd80      	pop	{r7, pc}
    1838:	000017f1 	.word	0x000017f1
    183c:	0000287d 	.word	0x0000287d
    1840:	00001791 	.word	0x00001791

00001844 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1844:	b580      	push	{r7, lr}
    1846:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1848:	4802      	ldr	r0, [pc, #8]	; (1854 <WATCHDOG_CLOCK_init+0x10>)
    184a:	4b03      	ldr	r3, [pc, #12]	; (1858 <WATCHDOG_CLOCK_init+0x14>)
    184c:	4798      	blx	r3
}
    184e:	bf00      	nop
    1850:	bd80      	pop	{r7, pc}
    1852:	bf00      	nop
    1854:	40000800 	.word	0x40000800
    1858:	000005af 	.word	0x000005af

0000185c <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    185c:	b580      	push	{r7, lr}
    185e:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1860:	4b03      	ldr	r3, [pc, #12]	; (1870 <WATCHDOG_init+0x14>)
    1862:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1864:	4903      	ldr	r1, [pc, #12]	; (1874 <WATCHDOG_init+0x18>)
    1866:	4804      	ldr	r0, [pc, #16]	; (1878 <WATCHDOG_init+0x1c>)
    1868:	4b04      	ldr	r3, [pc, #16]	; (187c <WATCHDOG_init+0x20>)
    186a:	4798      	blx	r3
}
    186c:	bf00      	nop
    186e:	bd80      	pop	{r7, pc}
    1870:	00001845 	.word	0x00001845
    1874:	40002000 	.word	0x40002000
    1878:	20000f78 	.word	0x20000f78
    187c:	00000dfd 	.word	0x00000dfd

00001880 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1880:	b580      	push	{r7, lr}
    1882:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1884:	4904      	ldr	r1, [pc, #16]	; (1898 <CAN_CCU_PORT_init+0x18>)
    1886:	202d      	movs	r0, #45	; 0x2d
    1888:	4b04      	ldr	r3, [pc, #16]	; (189c <CAN_CCU_PORT_init+0x1c>)
    188a:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    188c:	4904      	ldr	r1, [pc, #16]	; (18a0 <CAN_CCU_PORT_init+0x20>)
    188e:	202c      	movs	r0, #44	; 0x2c
    1890:	4b02      	ldr	r3, [pc, #8]	; (189c <CAN_CCU_PORT_init+0x1c>)
    1892:	4798      	blx	r3
}
    1894:	bf00      	nop
    1896:	bd80      	pop	{r7, pc}
    1898:	002d0007 	.word	0x002d0007
    189c:	00000d5d 	.word	0x00000d5d
    18a0:	002c0007 	.word	0x002c0007

000018a4 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    18a4:	b580      	push	{r7, lr}
    18a6:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    18a8:	4807      	ldr	r0, [pc, #28]	; (18c8 <CAN_CCU_init+0x24>)
    18aa:	4b08      	ldr	r3, [pc, #32]	; (18cc <CAN_CCU_init+0x28>)
    18ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18ae:	2249      	movs	r2, #73	; 0x49
    18b0:	211c      	movs	r1, #28
    18b2:	4807      	ldr	r0, [pc, #28]	; (18d0 <CAN_CCU_init+0x2c>)
    18b4:	4b07      	ldr	r3, [pc, #28]	; (18d4 <CAN_CCU_init+0x30>)
    18b6:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    18b8:	4907      	ldr	r1, [pc, #28]	; (18d8 <CAN_CCU_init+0x34>)
    18ba:	4808      	ldr	r0, [pc, #32]	; (18dc <CAN_CCU_init+0x38>)
    18bc:	4b08      	ldr	r3, [pc, #32]	; (18e0 <CAN_CCU_init+0x3c>)
    18be:	4798      	blx	r3
	CAN_CCU_PORT_init();
    18c0:	4b08      	ldr	r3, [pc, #32]	; (18e4 <CAN_CCU_init+0x40>)
    18c2:	4798      	blx	r3
}
    18c4:	bf00      	nop
    18c6:	bd80      	pop	{r7, pc}
    18c8:	40000800 	.word	0x40000800
    18cc:	0000056f 	.word	0x0000056f
    18d0:	40001c00 	.word	0x40001c00
    18d4:	00000509 	.word	0x00000509
    18d8:	42000400 	.word	0x42000400
    18dc:	20000ed0 	.word	0x20000ed0
    18e0:	00001b49 	.word	0x00001b49
    18e4:	00001881 	.word	0x00001881

000018e8 <system_init>:

void system_init(void)
{
    18e8:	b580      	push	{r7, lr}
    18ea:	af00      	add	r7, sp, #0
	init_mcu();
    18ec:	4b5f      	ldr	r3, [pc, #380]	; (1a6c <system_init+0x184>)
    18ee:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    18f0:	2100      	movs	r1, #0
    18f2:	2007      	movs	r0, #7
    18f4:	4b5e      	ldr	r3, [pc, #376]	; (1a70 <system_init+0x188>)
    18f6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    18f8:	2102      	movs	r1, #2
    18fa:	2007      	movs	r0, #7
    18fc:	4b5d      	ldr	r3, [pc, #372]	; (1a74 <system_init+0x18c>)
    18fe:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1900:	f04f 31ff 	mov.w	r1, #4294967295
    1904:	2007      	movs	r0, #7
    1906:	4b5c      	ldr	r3, [pc, #368]	; (1a78 <system_init+0x190>)
    1908:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    190a:	2101      	movs	r1, #1
    190c:	200f      	movs	r0, #15
    190e:	4b58      	ldr	r3, [pc, #352]	; (1a70 <system_init+0x188>)
    1910:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1912:	2102      	movs	r1, #2
    1914:	200f      	movs	r0, #15
    1916:	4b57      	ldr	r3, [pc, #348]	; (1a74 <system_init+0x18c>)
    1918:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    191a:	f04f 31ff 	mov.w	r1, #4294967295
    191e:	200f      	movs	r0, #15
    1920:	4b55      	ldr	r3, [pc, #340]	; (1a78 <system_init+0x190>)
    1922:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1924:	2101      	movs	r1, #1
    1926:	2013      	movs	r0, #19
    1928:	4b51      	ldr	r3, [pc, #324]	; (1a70 <system_init+0x188>)
    192a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    192c:	2102      	movs	r1, #2
    192e:	2013      	movs	r0, #19
    1930:	4b50      	ldr	r3, [pc, #320]	; (1a74 <system_init+0x18c>)
    1932:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1934:	f04f 31ff 	mov.w	r1, #4294967295
    1938:	2013      	movs	r0, #19
    193a:	4b4f      	ldr	r3, [pc, #316]	; (1a78 <system_init+0x190>)
    193c:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    193e:	2101      	movs	r1, #1
    1940:	201b      	movs	r0, #27
    1942:	4b4b      	ldr	r3, [pc, #300]	; (1a70 <system_init+0x188>)
    1944:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1946:	2102      	movs	r1, #2
    1948:	201b      	movs	r0, #27
    194a:	4b4a      	ldr	r3, [pc, #296]	; (1a74 <system_init+0x18c>)
    194c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    194e:	f04f 31ff 	mov.w	r1, #4294967295
    1952:	201b      	movs	r0, #27
    1954:	4b48      	ldr	r3, [pc, #288]	; (1a78 <system_init+0x190>)
    1956:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    1958:	2101      	movs	r1, #1
    195a:	2027      	movs	r0, #39	; 0x27
    195c:	4b44      	ldr	r3, [pc, #272]	; (1a70 <system_init+0x188>)
    195e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    1960:	2102      	movs	r1, #2
    1962:	2027      	movs	r0, #39	; 0x27
    1964:	4b43      	ldr	r3, [pc, #268]	; (1a74 <system_init+0x18c>)
    1966:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    1968:	f04f 31ff 	mov.w	r1, #4294967295
    196c:	2027      	movs	r0, #39	; 0x27
    196e:	4b42      	ldr	r3, [pc, #264]	; (1a78 <system_init+0x190>)
    1970:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    1972:	2101      	movs	r1, #1
    1974:	203d      	movs	r0, #61	; 0x3d
    1976:	4b3e      	ldr	r3, [pc, #248]	; (1a70 <system_init+0x188>)
    1978:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    197a:	2102      	movs	r1, #2
    197c:	203d      	movs	r0, #61	; 0x3d
    197e:	4b3d      	ldr	r3, [pc, #244]	; (1a74 <system_init+0x18c>)
    1980:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1982:	f04f 31ff 	mov.w	r1, #4294967295
    1986:	203d      	movs	r0, #61	; 0x3d
    1988:	4b3b      	ldr	r3, [pc, #236]	; (1a78 <system_init+0x190>)
    198a:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    198c:	2101      	movs	r1, #1
    198e:	203f      	movs	r0, #63	; 0x3f
    1990:	4b38      	ldr	r3, [pc, #224]	; (1a74 <system_init+0x18c>)
    1992:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1994:	2101      	movs	r1, #1
    1996:	203f      	movs	r0, #63	; 0x3f
    1998:	4b38      	ldr	r3, [pc, #224]	; (1a7c <system_init+0x194>)
    199a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    199c:	f04f 31ff 	mov.w	r1, #4294967295
    19a0:	203f      	movs	r0, #63	; 0x3f
    19a2:	4b35      	ldr	r3, [pc, #212]	; (1a78 <system_init+0x190>)
    19a4:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    19a6:	2100      	movs	r1, #0
    19a8:	204d      	movs	r0, #77	; 0x4d
    19aa:	4b31      	ldr	r3, [pc, #196]	; (1a70 <system_init+0x188>)
    19ac:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    19ae:	2102      	movs	r1, #2
    19b0:	204d      	movs	r0, #77	; 0x4d
    19b2:	4b30      	ldr	r3, [pc, #192]	; (1a74 <system_init+0x18c>)
    19b4:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    19b6:	f04f 31ff 	mov.w	r1, #4294967295
    19ba:	204d      	movs	r0, #77	; 0x4d
    19bc:	4b2e      	ldr	r3, [pc, #184]	; (1a78 <system_init+0x190>)
    19be:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    19c0:	2101      	movs	r1, #1
    19c2:	204e      	movs	r0, #78	; 0x4e
    19c4:	4b2a      	ldr	r3, [pc, #168]	; (1a70 <system_init+0x188>)
    19c6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    19c8:	2102      	movs	r1, #2
    19ca:	204e      	movs	r0, #78	; 0x4e
    19cc:	4b29      	ldr	r3, [pc, #164]	; (1a74 <system_init+0x18c>)
    19ce:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    19d0:	f04f 31ff 	mov.w	r1, #4294967295
    19d4:	204e      	movs	r0, #78	; 0x4e
    19d6:	4b28      	ldr	r3, [pc, #160]	; (1a78 <system_init+0x190>)
    19d8:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    19da:	2100      	movs	r1, #0
    19dc:	204f      	movs	r0, #79	; 0x4f
    19de:	4b24      	ldr	r3, [pc, #144]	; (1a70 <system_init+0x188>)
    19e0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    19e2:	2102      	movs	r1, #2
    19e4:	204f      	movs	r0, #79	; 0x4f
    19e6:	4b23      	ldr	r3, [pc, #140]	; (1a74 <system_init+0x18c>)
    19e8:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    19ea:	f04f 31ff 	mov.w	r1, #4294967295
    19ee:	204f      	movs	r0, #79	; 0x4f
    19f0:	4b21      	ldr	r3, [pc, #132]	; (1a78 <system_init+0x190>)
    19f2:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    19f4:	2100      	movs	r1, #0
    19f6:	2052      	movs	r0, #82	; 0x52
    19f8:	4b1d      	ldr	r3, [pc, #116]	; (1a70 <system_init+0x188>)
    19fa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    19fc:	2102      	movs	r1, #2
    19fe:	2052      	movs	r0, #82	; 0x52
    1a00:	4b1c      	ldr	r3, [pc, #112]	; (1a74 <system_init+0x18c>)
    1a02:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1a04:	f04f 31ff 	mov.w	r1, #4294967295
    1a08:	2052      	movs	r0, #82	; 0x52
    1a0a:	4b1b      	ldr	r3, [pc, #108]	; (1a78 <system_init+0x190>)
    1a0c:	4798      	blx	r3

	CRC_CALC_init();
    1a0e:	4b1c      	ldr	r3, [pc, #112]	; (1a80 <system_init+0x198>)
    1a10:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1a12:	4b1c      	ldr	r3, [pc, #112]	; (1a84 <system_init+0x19c>)
    1a14:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1a16:	4b1c      	ldr	r3, [pc, #112]	; (1a88 <system_init+0x1a0>)
    1a18:	4798      	blx	r3

	QSPI_N25Q256_init();
    1a1a:	4b1c      	ldr	r3, [pc, #112]	; (1a8c <system_init+0x1a4>)
    1a1c:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1a1e:	4b1c      	ldr	r3, [pc, #112]	; (1a90 <system_init+0x1a8>)
    1a20:	4798      	blx	r3

	I2C_HEATERS_init();
    1a22:	4b1c      	ldr	r3, [pc, #112]	; (1a94 <system_init+0x1ac>)
    1a24:	4798      	blx	r3

	SPI_TEMP_init();
    1a26:	4b1c      	ldr	r3, [pc, #112]	; (1a98 <system_init+0x1b0>)
    1a28:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    1a2a:	4b1c      	ldr	r3, [pc, #112]	; (1a9c <system_init+0x1b4>)
    1a2c:	4798      	blx	r3

	SPI_HI3593_init();
    1a2e:	4b1c      	ldr	r3, [pc, #112]	; (1aa0 <system_init+0x1b8>)
    1a30:	4798      	blx	r3

	I2C_FANS_init();
    1a32:	4b1c      	ldr	r3, [pc, #112]	; (1aa4 <system_init+0x1bc>)
    1a34:	4798      	blx	r3

	TIMER_USB_init();
    1a36:	4b1c      	ldr	r3, [pc, #112]	; (1aa8 <system_init+0x1c0>)
    1a38:	4798      	blx	r3
	TIMER_ARINC_init();
    1a3a:	4b1c      	ldr	r3, [pc, #112]	; (1aac <system_init+0x1c4>)
    1a3c:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1a3e:	4b1c      	ldr	r3, [pc, #112]	; (1ab0 <system_init+0x1c8>)
    1a40:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1a42:	4b1c      	ldr	r3, [pc, #112]	; (1ab4 <system_init+0x1cc>)
    1a44:	4798      	blx	r3
	TIMER_EVENT_init();
    1a46:	4b1c      	ldr	r3, [pc, #112]	; (1ab8 <system_init+0x1d0>)
    1a48:	4798      	blx	r3
	LIVE_PULSE_init();
    1a4a:	4b1c      	ldr	r3, [pc, #112]	; (1abc <system_init+0x1d4>)
    1a4c:	4798      	blx	r3

	TIMER_HVAC_init();
    1a4e:	4b1c      	ldr	r3, [pc, #112]	; (1ac0 <system_init+0x1d8>)
    1a50:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    1a52:	4b1c      	ldr	r3, [pc, #112]	; (1ac4 <system_init+0x1dc>)
    1a54:	4798      	blx	r3

	TIMER_CCU_init();
    1a56:	4b1c      	ldr	r3, [pc, #112]	; (1ac8 <system_init+0x1e0>)
    1a58:	4798      	blx	r3

	CDCUSB_init();
    1a5a:	4b1c      	ldr	r3, [pc, #112]	; (1acc <system_init+0x1e4>)
    1a5c:	4798      	blx	r3

	WATCHDOG_init();
    1a5e:	4b1c      	ldr	r3, [pc, #112]	; (1ad0 <system_init+0x1e8>)
    1a60:	4798      	blx	r3
	CAN_CCU_init();
    1a62:	4b1c      	ldr	r3, [pc, #112]	; (1ad4 <system_init+0x1ec>)
    1a64:	4798      	blx	r3
}
    1a66:	bf00      	nop
    1a68:	bd80      	pop	{r7, pc}
    1a6a:	bf00      	nop
    1a6c:	00000ded 	.word	0x00000ded
    1a70:	00000db5 	.word	0x00000db5
    1a74:	00000d7d 	.word	0x00000d7d
    1a78:	00000d5d 	.word	0x00000d5d
    1a7c:	00000d29 	.word	0x00000d29
    1a80:	00000e4d 	.word	0x00000e4d
    1a84:	00000e79 	.word	0x00000e79
    1a88:	00000fa1 	.word	0x00000fa1
    1a8c:	000010e9 	.word	0x000010e9
    1a90:	0000112d 	.word	0x0000112d
    1a94:	000011bd 	.word	0x000011bd
    1a98:	00001289 	.word	0x00001289
    1a9c:	00001321 	.word	0x00001321
    1aa0:	000013ed 	.word	0x000013ed
    1aa4:	00001485 	.word	0x00001485
    1aa8:	000014b1 	.word	0x000014b1
    1aac:	000014f9 	.word	0x000014f9
    1ab0:	00001541 	.word	0x00001541
    1ab4:	00001589 	.word	0x00001589
    1ab8:	000015d1 	.word	0x000015d1
    1abc:	00001651 	.word	0x00001651
    1ac0:	000016b1 	.word	0x000016b1
    1ac4:	00001709 	.word	0x00001709
    1ac8:	00001761 	.word	0x00001761
    1acc:	00001825 	.word	0x00001825
    1ad0:	0000185d 	.word	0x0000185d
    1ad4:	000018a5 	.word	0x000018a5

00001ad8 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1ad8:	b580      	push	{r7, lr}
    1ada:	b084      	sub	sp, #16
    1adc:	af00      	add	r7, sp, #0
    1ade:	6078      	str	r0, [r7, #4]
    1ae0:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1ae2:	2300      	movs	r3, #0
    1ae4:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1ae6:	687b      	ldr	r3, [r7, #4]
    1ae8:	2b00      	cmp	r3, #0
    1aea:	bf14      	ite	ne
    1aec:	2301      	movne	r3, #1
    1aee:	2300      	moveq	r3, #0
    1af0:	b2db      	uxtb	r3, r3
    1af2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1af6:	4911      	ldr	r1, [pc, #68]	; (1b3c <calendar_init+0x64>)
    1af8:	4618      	mov	r0, r3
    1afa:	4b11      	ldr	r3, [pc, #68]	; (1b40 <calendar_init+0x68>)
    1afc:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1afe:	687b      	ldr	r3, [r7, #4]
    1b00:	681a      	ldr	r2, [r3, #0]
    1b02:	683b      	ldr	r3, [r7, #0]
    1b04:	429a      	cmp	r2, r3
    1b06:	d101      	bne.n	1b0c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1b08:	2300      	movs	r3, #0
    1b0a:	e013      	b.n	1b34 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1b0c:	687b      	ldr	r3, [r7, #4]
    1b0e:	681b      	ldr	r3, [r3, #0]
    1b10:	2b00      	cmp	r3, #0
    1b12:	d002      	beq.n	1b1a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1b14:	f06f 0311 	mvn.w	r3, #17
    1b18:	e00c      	b.n	1b34 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	683a      	ldr	r2, [r7, #0]
    1b1e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	4618      	mov	r0, r3
    1b24:	4b07      	ldr	r3, [pc, #28]	; (1b44 <calendar_init+0x6c>)
    1b26:	4798      	blx	r3
    1b28:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    1b30:	619a      	str	r2, [r3, #24]

	return ret;
    1b32:	68fb      	ldr	r3, [r7, #12]
}
    1b34:	4618      	mov	r0, r3
    1b36:	3710      	adds	r7, #16
    1b38:	46bd      	mov	sp, r7
    1b3a:	bd80      	pop	{r7, pc}
    1b3c:	0000cf4c 	.word	0x0000cf4c
    1b40:	00002dd1 	.word	0x00002dd1
    1b44:	00005051 	.word	0x00005051

00001b48 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1b48:	b580      	push	{r7, lr}
    1b4a:	b084      	sub	sp, #16
    1b4c:	af00      	add	r7, sp, #0
    1b4e:	6078      	str	r0, [r7, #4]
    1b50:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	2b00      	cmp	r3, #0
    1b56:	d004      	beq.n	1b62 <can_async_init+0x1a>
    1b58:	683b      	ldr	r3, [r7, #0]
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d001      	beq.n	1b62 <can_async_init+0x1a>
    1b5e:	2301      	movs	r3, #1
    1b60:	e000      	b.n	1b64 <can_async_init+0x1c>
    1b62:	2300      	movs	r3, #0
    1b64:	f003 0301 	and.w	r3, r3, #1
    1b68:	b2db      	uxtb	r3, r3
    1b6a:	2241      	movs	r2, #65	; 0x41
    1b6c:	490e      	ldr	r1, [pc, #56]	; (1ba8 <can_async_init+0x60>)
    1b6e:	4618      	mov	r0, r3
    1b70:	4b0e      	ldr	r3, [pc, #56]	; (1bac <can_async_init+0x64>)
    1b72:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    1b74:	687b      	ldr	r3, [r7, #4]
    1b76:	6839      	ldr	r1, [r7, #0]
    1b78:	4618      	mov	r0, r3
    1b7a:	4b0d      	ldr	r3, [pc, #52]	; (1bb0 <can_async_init+0x68>)
    1b7c:	4798      	blx	r3
    1b7e:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1b80:	68fb      	ldr	r3, [r7, #12]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d001      	beq.n	1b8a <can_async_init+0x42>
		return rc;
    1b86:	68fb      	ldr	r3, [r7, #12]
    1b88:	e009      	b.n	1b9e <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1b8a:	687b      	ldr	r3, [r7, #4]
    1b8c:	4a09      	ldr	r2, [pc, #36]	; (1bb4 <can_async_init+0x6c>)
    1b8e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1b90:	687b      	ldr	r3, [r7, #4]
    1b92:	4a09      	ldr	r2, [pc, #36]	; (1bb8 <can_async_init+0x70>)
    1b94:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1b96:	687b      	ldr	r3, [r7, #4]
    1b98:	4a08      	ldr	r2, [pc, #32]	; (1bbc <can_async_init+0x74>)
    1b9a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1b9c:	2300      	movs	r3, #0
}
    1b9e:	4618      	mov	r0, r3
    1ba0:	3710      	adds	r7, #16
    1ba2:	46bd      	mov	sp, r7
    1ba4:	bd80      	pop	{r7, pc}
    1ba6:	bf00      	nop
    1ba8:	0000cf68 	.word	0x0000cf68
    1bac:	00002dd1 	.word	0x00002dd1
    1bb0:	000032c5 	.word	0x000032c5
    1bb4:	00001bc1 	.word	0x00001bc1
    1bb8:	00001be5 	.word	0x00001be5
    1bbc:	00001c09 	.word	0x00001c09

00001bc0 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1bc0:	b580      	push	{r7, lr}
    1bc2:	b084      	sub	sp, #16
    1bc4:	af00      	add	r7, sp, #0
    1bc6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1bcc:	68fb      	ldr	r3, [r7, #12]
    1bce:	69db      	ldr	r3, [r3, #28]
    1bd0:	2b00      	cmp	r3, #0
    1bd2:	d003      	beq.n	1bdc <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    1bd4:	68fb      	ldr	r3, [r7, #12]
    1bd6:	69db      	ldr	r3, [r3, #28]
    1bd8:	68f8      	ldr	r0, [r7, #12]
    1bda:	4798      	blx	r3
	}
}
    1bdc:	bf00      	nop
    1bde:	3710      	adds	r7, #16
    1be0:	46bd      	mov	sp, r7
    1be2:	bd80      	pop	{r7, pc}

00001be4 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1be4:	b580      	push	{r7, lr}
    1be6:	b084      	sub	sp, #16
    1be8:	af00      	add	r7, sp, #0
    1bea:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1bec:	687b      	ldr	r3, [r7, #4]
    1bee:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1bf0:	68fb      	ldr	r3, [r7, #12]
    1bf2:	6a1b      	ldr	r3, [r3, #32]
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	d003      	beq.n	1c00 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1bf8:	68fb      	ldr	r3, [r7, #12]
    1bfa:	6a1b      	ldr	r3, [r3, #32]
    1bfc:	68f8      	ldr	r0, [r7, #12]
    1bfe:	4798      	blx	r3
	}
}
    1c00:	bf00      	nop
    1c02:	3710      	adds	r7, #16
    1c04:	46bd      	mov	sp, r7
    1c06:	bd80      	pop	{r7, pc}

00001c08 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1c08:	b580      	push	{r7, lr}
    1c0a:	b084      	sub	sp, #16
    1c0c:	af00      	add	r7, sp, #0
    1c0e:	6078      	str	r0, [r7, #4]
    1c10:	460b      	mov	r3, r1
    1c12:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1c14:	687b      	ldr	r3, [r7, #4]
    1c16:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1c18:	68fb      	ldr	r3, [r7, #12]
    1c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d005      	beq.n	1c2c <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1c20:	68fb      	ldr	r3, [r7, #12]
    1c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c24:	78fa      	ldrb	r2, [r7, #3]
    1c26:	4611      	mov	r1, r2
    1c28:	68f8      	ldr	r0, [r7, #12]
    1c2a:	4798      	blx	r3
	}
}
    1c2c:	bf00      	nop
    1c2e:	3710      	adds	r7, #16
    1c30:	46bd      	mov	sp, r7
    1c32:	bd80      	pop	{r7, pc}

00001c34 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1c34:	b580      	push	{r7, lr}
    1c36:	b082      	sub	sp, #8
    1c38:	af00      	add	r7, sp, #0
    1c3a:	6078      	str	r0, [r7, #4]
    1c3c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1c3e:	687b      	ldr	r3, [r7, #4]
    1c40:	2b00      	cmp	r3, #0
    1c42:	d004      	beq.n	1c4e <crc_sync_init+0x1a>
    1c44:	683b      	ldr	r3, [r7, #0]
    1c46:	2b00      	cmp	r3, #0
    1c48:	d001      	beq.n	1c4e <crc_sync_init+0x1a>
    1c4a:	2301      	movs	r3, #1
    1c4c:	e000      	b.n	1c50 <crc_sync_init+0x1c>
    1c4e:	2300      	movs	r3, #0
    1c50:	f003 0301 	and.w	r3, r3, #1
    1c54:	b2db      	uxtb	r3, r3
    1c56:	222b      	movs	r2, #43	; 0x2b
    1c58:	4906      	ldr	r1, [pc, #24]	; (1c74 <crc_sync_init+0x40>)
    1c5a:	4618      	mov	r0, r3
    1c5c:	4b06      	ldr	r3, [pc, #24]	; (1c78 <crc_sync_init+0x44>)
    1c5e:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1c60:	687b      	ldr	r3, [r7, #4]
    1c62:	6839      	ldr	r1, [r7, #0]
    1c64:	4618      	mov	r0, r3
    1c66:	4b05      	ldr	r3, [pc, #20]	; (1c7c <crc_sync_init+0x48>)
    1c68:	4798      	blx	r3
    1c6a:	4603      	mov	r3, r0
}
    1c6c:	4618      	mov	r0, r3
    1c6e:	3708      	adds	r7, #8
    1c70:	46bd      	mov	sp, r7
    1c72:	bd80      	pop	{r7, pc}
    1c74:	0000cf84 	.word	0x0000cf84
    1c78:	00002dd1 	.word	0x00002dd1
    1c7c:	000039c9 	.word	0x000039c9

00001c80 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1c80:	b590      	push	{r4, r7, lr}
    1c82:	b083      	sub	sp, #12
    1c84:	af00      	add	r7, sp, #0
    1c86:	4603      	mov	r3, r0
    1c88:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1c8a:	4b07      	ldr	r3, [pc, #28]	; (1ca8 <delay_us+0x28>)
    1c8c:	681c      	ldr	r4, [r3, #0]
    1c8e:	88fb      	ldrh	r3, [r7, #6]
    1c90:	4618      	mov	r0, r3
    1c92:	4b06      	ldr	r3, [pc, #24]	; (1cac <delay_us+0x2c>)
    1c94:	4798      	blx	r3
    1c96:	4603      	mov	r3, r0
    1c98:	4619      	mov	r1, r3
    1c9a:	4620      	mov	r0, r4
    1c9c:	4b04      	ldr	r3, [pc, #16]	; (1cb0 <delay_us+0x30>)
    1c9e:	4798      	blx	r3
}
    1ca0:	bf00      	nop
    1ca2:	370c      	adds	r7, #12
    1ca4:	46bd      	mov	sp, r7
    1ca6:	bd90      	pop	{r4, r7, pc}
    1ca8:	200006b8 	.word	0x200006b8
    1cac:	00003719 	.word	0x00003719
    1cb0:	000038b1 	.word	0x000038b1

00001cb4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1cb4:	b590      	push	{r4, r7, lr}
    1cb6:	b083      	sub	sp, #12
    1cb8:	af00      	add	r7, sp, #0
    1cba:	4603      	mov	r3, r0
    1cbc:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1cbe:	4b07      	ldr	r3, [pc, #28]	; (1cdc <delay_ms+0x28>)
    1cc0:	681c      	ldr	r4, [r3, #0]
    1cc2:	88fb      	ldrh	r3, [r7, #6]
    1cc4:	4618      	mov	r0, r3
    1cc6:	4b06      	ldr	r3, [pc, #24]	; (1ce0 <delay_ms+0x2c>)
    1cc8:	4798      	blx	r3
    1cca:	4603      	mov	r3, r0
    1ccc:	4619      	mov	r1, r3
    1cce:	4620      	mov	r0, r4
    1cd0:	4b04      	ldr	r3, [pc, #16]	; (1ce4 <delay_ms+0x30>)
    1cd2:	4798      	blx	r3
}
    1cd4:	bf00      	nop
    1cd6:	370c      	adds	r7, #12
    1cd8:	46bd      	mov	sp, r7
    1cda:	bd90      	pop	{r4, r7, pc}
    1cdc:	200006b8 	.word	0x200006b8
    1ce0:	00003885 	.word	0x00003885
    1ce4:	000038b1 	.word	0x000038b1

00001ce8 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1ce8:	b580      	push	{r7, lr}
    1cea:	af00      	add	r7, sp, #0
	return _event_system_init();
    1cec:	4b02      	ldr	r3, [pc, #8]	; (1cf8 <event_system_init+0x10>)
    1cee:	4798      	blx	r3
    1cf0:	4603      	mov	r3, r0
}
    1cf2:	4618      	mov	r0, r3
    1cf4:	bd80      	pop	{r7, pc}
    1cf6:	bf00      	nop
    1cf8:	000040ad 	.word	0x000040ad

00001cfc <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1cfc:	b580      	push	{r7, lr}
    1cfe:	b082      	sub	sp, #8
    1d00:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1d02:	2300      	movs	r3, #0
    1d04:	80fb      	strh	r3, [r7, #6]
    1d06:	e00e      	b.n	1d26 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1d08:	88fb      	ldrh	r3, [r7, #6]
    1d0a:	4a0c      	ldr	r2, [pc, #48]	; (1d3c <ext_irq_init+0x40>)
    1d0c:	00db      	lsls	r3, r3, #3
    1d0e:	4413      	add	r3, r2
    1d10:	f04f 32ff 	mov.w	r2, #4294967295
    1d14:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1d16:	88fb      	ldrh	r3, [r7, #6]
    1d18:	4a08      	ldr	r2, [pc, #32]	; (1d3c <ext_irq_init+0x40>)
    1d1a:	2100      	movs	r1, #0
    1d1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1d20:	88fb      	ldrh	r3, [r7, #6]
    1d22:	3301      	adds	r3, #1
    1d24:	80fb      	strh	r3, [r7, #6]
    1d26:	88fb      	ldrh	r3, [r7, #6]
    1d28:	2b08      	cmp	r3, #8
    1d2a:	d9ed      	bls.n	1d08 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    1d2c:	4804      	ldr	r0, [pc, #16]	; (1d40 <ext_irq_init+0x44>)
    1d2e:	4b05      	ldr	r3, [pc, #20]	; (1d44 <ext_irq_init+0x48>)
    1d30:	4798      	blx	r3
    1d32:	4603      	mov	r3, r0
}
    1d34:	4618      	mov	r0, r3
    1d36:	3708      	adds	r7, #8
    1d38:	46bd      	mov	sp, r7
    1d3a:	bd80      	pop	{r7, pc}
    1d3c:	200006bc 	.word	0x200006bc
    1d40:	00001d49 	.word	0x00001d49
    1d44:	00003cd1 	.word	0x00003cd1

00001d48 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1d48:	b580      	push	{r7, lr}
    1d4a:	b084      	sub	sp, #16
    1d4c:	af00      	add	r7, sp, #0
    1d4e:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1d50:	2300      	movs	r3, #0
    1d52:	73fb      	strb	r3, [r7, #15]
    1d54:	2309      	movs	r3, #9
    1d56:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    1d58:	e02a      	b.n	1db0 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    1d5a:	7bba      	ldrb	r2, [r7, #14]
    1d5c:	7bfb      	ldrb	r3, [r7, #15]
    1d5e:	4413      	add	r3, r2
    1d60:	105b      	asrs	r3, r3, #1
    1d62:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    1d64:	7b7b      	ldrb	r3, [r7, #13]
    1d66:	2b08      	cmp	r3, #8
    1d68:	d827      	bhi.n	1dba <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1d6a:	7b7b      	ldrb	r3, [r7, #13]
    1d6c:	4a16      	ldr	r2, [pc, #88]	; (1dc8 <process_ext_irq+0x80>)
    1d6e:	00db      	lsls	r3, r3, #3
    1d70:	4413      	add	r3, r2
    1d72:	685a      	ldr	r2, [r3, #4]
    1d74:	687b      	ldr	r3, [r7, #4]
    1d76:	429a      	cmp	r2, r3
    1d78:	d10b      	bne.n	1d92 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    1d7a:	7b7b      	ldrb	r3, [r7, #13]
    1d7c:	4a12      	ldr	r2, [pc, #72]	; (1dc8 <process_ext_irq+0x80>)
    1d7e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1d82:	2b00      	cmp	r3, #0
    1d84:	d01b      	beq.n	1dbe <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    1d86:	7b7b      	ldrb	r3, [r7, #13]
    1d88:	4a0f      	ldr	r2, [pc, #60]	; (1dc8 <process_ext_irq+0x80>)
    1d8a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1d8e:	4798      	blx	r3
			}
			return;
    1d90:	e015      	b.n	1dbe <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    1d92:	7b7b      	ldrb	r3, [r7, #13]
    1d94:	4a0c      	ldr	r2, [pc, #48]	; (1dc8 <process_ext_irq+0x80>)
    1d96:	00db      	lsls	r3, r3, #3
    1d98:	4413      	add	r3, r2
    1d9a:	685a      	ldr	r2, [r3, #4]
    1d9c:	687b      	ldr	r3, [r7, #4]
    1d9e:	429a      	cmp	r2, r3
    1da0:	d203      	bcs.n	1daa <process_ext_irq+0x62>
			lower = middle + 1;
    1da2:	7b7b      	ldrb	r3, [r7, #13]
    1da4:	3301      	adds	r3, #1
    1da6:	73fb      	strb	r3, [r7, #15]
    1da8:	e002      	b.n	1db0 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    1daa:	7b7b      	ldrb	r3, [r7, #13]
    1dac:	3b01      	subs	r3, #1
    1dae:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    1db0:	7bba      	ldrb	r2, [r7, #14]
    1db2:	7bfb      	ldrb	r3, [r7, #15]
    1db4:	429a      	cmp	r2, r3
    1db6:	d2d0      	bcs.n	1d5a <process_ext_irq+0x12>
    1db8:	e002      	b.n	1dc0 <process_ext_irq+0x78>
			return;
    1dba:	bf00      	nop
    1dbc:	e000      	b.n	1dc0 <process_ext_irq+0x78>
			return;
    1dbe:	bf00      	nop
		}
	}
}
    1dc0:	3710      	adds	r7, #16
    1dc2:	46bd      	mov	sp, r7
    1dc4:	bd80      	pop	{r7, pc}
    1dc6:	bf00      	nop
    1dc8:	200006bc 	.word	0x200006bc

00001dcc <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    1dcc:	b580      	push	{r7, lr}
    1dce:	b08a      	sub	sp, #40	; 0x28
    1dd0:	af00      	add	r7, sp, #0
    1dd2:	60f8      	str	r0, [r7, #12]
    1dd4:	60b9      	str	r1, [r7, #8]
    1dd6:	4613      	mov	r3, r2
    1dd8:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    1dda:	68fb      	ldr	r3, [r7, #12]
    1ddc:	3b14      	subs	r3, #20
    1dde:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1de2:	8b9b      	ldrh	r3, [r3, #28]
    1de4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1de6:	88fb      	ldrh	r3, [r7, #6]
    1de8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1dea:	f248 0301 	movw	r3, #32769	; 0x8001
    1dee:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    1df0:	68bb      	ldr	r3, [r7, #8]
    1df2:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1df6:	f107 0214 	add.w	r2, r7, #20
    1dfa:	4611      	mov	r1, r2
    1dfc:	4618      	mov	r0, r3
    1dfe:	4b06      	ldr	r3, [pc, #24]	; (1e18 <i2c_m_sync_read+0x4c>)
    1e00:	4798      	blx	r3
    1e02:	6238      	str	r0, [r7, #32]

	if (ret) {
    1e04:	6a3b      	ldr	r3, [r7, #32]
    1e06:	2b00      	cmp	r3, #0
    1e08:	d001      	beq.n	1e0e <i2c_m_sync_read+0x42>
		return ret;
    1e0a:	6a3b      	ldr	r3, [r7, #32]
    1e0c:	e000      	b.n	1e10 <i2c_m_sync_read+0x44>
	}

	return n;
    1e0e:	88fb      	ldrh	r3, [r7, #6]
}
    1e10:	4618      	mov	r0, r3
    1e12:	3728      	adds	r7, #40	; 0x28
    1e14:	46bd      	mov	sp, r7
    1e16:	bd80      	pop	{r7, pc}
    1e18:	00005d0d 	.word	0x00005d0d

00001e1c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1e1c:	b580      	push	{r7, lr}
    1e1e:	b08a      	sub	sp, #40	; 0x28
    1e20:	af00      	add	r7, sp, #0
    1e22:	60f8      	str	r0, [r7, #12]
    1e24:	60b9      	str	r1, [r7, #8]
    1e26:	4613      	mov	r3, r2
    1e28:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    1e2a:	68fb      	ldr	r3, [r7, #12]
    1e2c:	3b14      	subs	r3, #20
    1e2e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e32:	8b9b      	ldrh	r3, [r3, #28]
    1e34:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1e36:	88fb      	ldrh	r3, [r7, #6]
    1e38:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    1e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1e3e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    1e40:	68bb      	ldr	r3, [r7, #8]
    1e42:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e46:	f107 0214 	add.w	r2, r7, #20
    1e4a:	4611      	mov	r1, r2
    1e4c:	4618      	mov	r0, r3
    1e4e:	4b06      	ldr	r3, [pc, #24]	; (1e68 <i2c_m_sync_write+0x4c>)
    1e50:	4798      	blx	r3
    1e52:	6238      	str	r0, [r7, #32]

	if (ret) {
    1e54:	6a3b      	ldr	r3, [r7, #32]
    1e56:	2b00      	cmp	r3, #0
    1e58:	d001      	beq.n	1e5e <i2c_m_sync_write+0x42>
		return ret;
    1e5a:	6a3b      	ldr	r3, [r7, #32]
    1e5c:	e000      	b.n	1e60 <i2c_m_sync_write+0x44>
	}

	return n;
    1e5e:	88fb      	ldrh	r3, [r7, #6]
}
    1e60:	4618      	mov	r0, r3
    1e62:	3728      	adds	r7, #40	; 0x28
    1e64:	46bd      	mov	sp, r7
    1e66:	bd80      	pop	{r7, pc}
    1e68:	00005d0d 	.word	0x00005d0d

00001e6c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    1e6c:	b580      	push	{r7, lr}
    1e6e:	b084      	sub	sp, #16
    1e70:	af00      	add	r7, sp, #0
    1e72:	6078      	str	r0, [r7, #4]
    1e74:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1e76:	687b      	ldr	r3, [r7, #4]
    1e78:	2b00      	cmp	r3, #0
    1e7a:	bf14      	ite	ne
    1e7c:	2301      	movne	r3, #1
    1e7e:	2300      	moveq	r3, #0
    1e80:	b2db      	uxtb	r3, r3
    1e82:	225e      	movs	r2, #94	; 0x5e
    1e84:	490c      	ldr	r1, [pc, #48]	; (1eb8 <i2c_m_sync_init+0x4c>)
    1e86:	4618      	mov	r0, r3
    1e88:	4b0c      	ldr	r3, [pc, #48]	; (1ebc <i2c_m_sync_init+0x50>)
    1e8a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    1e8c:	687b      	ldr	r3, [r7, #4]
    1e8e:	6839      	ldr	r1, [r7, #0]
    1e90:	4618      	mov	r0, r3
    1e92:	4b0b      	ldr	r3, [pc, #44]	; (1ec0 <i2c_m_sync_init+0x54>)
    1e94:	4798      	blx	r3
    1e96:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    1e98:	68fb      	ldr	r3, [r7, #12]
    1e9a:	2b00      	cmp	r3, #0
    1e9c:	d001      	beq.n	1ea2 <i2c_m_sync_init+0x36>
		return init_status;
    1e9e:	68fb      	ldr	r3, [r7, #12]
    1ea0:	e006      	b.n	1eb0 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    1ea2:	687b      	ldr	r3, [r7, #4]
    1ea4:	4a07      	ldr	r2, [pc, #28]	; (1ec4 <i2c_m_sync_init+0x58>)
    1ea6:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	4a07      	ldr	r2, [pc, #28]	; (1ec8 <i2c_m_sync_init+0x5c>)
    1eac:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    1eae:	2300      	movs	r3, #0
}
    1eb0:	4618      	mov	r0, r3
    1eb2:	3710      	adds	r7, #16
    1eb4:	46bd      	mov	sp, r7
    1eb6:	bd80      	pop	{r7, pc}
    1eb8:	0000cfa0 	.word	0x0000cfa0
    1ebc:	00002dd1 	.word	0x00002dd1
    1ec0:	00005aad 	.word	0x00005aad
    1ec4:	00001dcd 	.word	0x00001dcd
    1ec8:	00001e1d 	.word	0x00001e1d

00001ecc <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    1ecc:	b580      	push	{r7, lr}
    1ece:	b082      	sub	sp, #8
    1ed0:	af00      	add	r7, sp, #0
    1ed2:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    1ed4:	687b      	ldr	r3, [r7, #4]
    1ed6:	4618      	mov	r0, r3
    1ed8:	4b03      	ldr	r3, [pc, #12]	; (1ee8 <i2c_m_sync_enable+0x1c>)
    1eda:	4798      	blx	r3
    1edc:	4603      	mov	r3, r0
}
    1ede:	4618      	mov	r0, r3
    1ee0:	3708      	adds	r7, #8
    1ee2:	46bd      	mov	sp, r7
    1ee4:	bd80      	pop	{r7, pc}
    1ee6:	bf00      	nop
    1ee8:	00005af5 	.word	0x00005af5

00001eec <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    1eec:	b580      	push	{r7, lr}
    1eee:	b082      	sub	sp, #8
    1ef0:	af00      	add	r7, sp, #0
    1ef2:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    1ef4:	687b      	ldr	r3, [r7, #4]
    1ef6:	4618      	mov	r0, r3
    1ef8:	4b03      	ldr	r3, [pc, #12]	; (1f08 <i2c_m_sync_disable+0x1c>)
    1efa:	4798      	blx	r3
    1efc:	4603      	mov	r3, r0
}
    1efe:	4618      	mov	r0, r3
    1f00:	3708      	adds	r7, #8
    1f02:	46bd      	mov	sp, r7
    1f04:	bd80      	pop	{r7, pc}
    1f06:	bf00      	nop
    1f08:	00005b35 	.word	0x00005b35

00001f0c <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    1f0c:	b480      	push	{r7}
    1f0e:	b085      	sub	sp, #20
    1f10:	af00      	add	r7, sp, #0
    1f12:	60f8      	str	r0, [r7, #12]
    1f14:	460b      	mov	r3, r1
    1f16:	607a      	str	r2, [r7, #4]
    1f18:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    1f1a:	897b      	ldrh	r3, [r7, #10]
    1f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    1f20:	b21a      	sxth	r2, r3
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	b21b      	sxth	r3, r3
    1f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1f2a:	b21b      	sxth	r3, r3
    1f2c:	4313      	orrs	r3, r2
    1f2e:	b21b      	sxth	r3, r3
    1f30:	b29a      	uxth	r2, r3
    1f32:	68fb      	ldr	r3, [r7, #12]
    1f34:	839a      	strh	r2, [r3, #28]
    1f36:	68fb      	ldr	r3, [r7, #12]
    1f38:	8b9b      	ldrh	r3, [r3, #28]
}
    1f3a:	4618      	mov	r0, r3
    1f3c:	3714      	adds	r7, #20
    1f3e:	46bd      	mov	sp, r7
    1f40:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f44:	4770      	bx	lr

00001f46 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    1f46:	b480      	push	{r7}
    1f48:	b083      	sub	sp, #12
    1f4a:	af00      	add	r7, sp, #0
    1f4c:	6078      	str	r0, [r7, #4]
    1f4e:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    1f50:	687b      	ldr	r3, [r7, #4]
    1f52:	f103 0214 	add.w	r2, r3, #20
    1f56:	683b      	ldr	r3, [r7, #0]
    1f58:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    1f5a:	2300      	movs	r3, #0
}
    1f5c:	4618      	mov	r0, r3
    1f5e:	370c      	adds	r7, #12
    1f60:	46bd      	mov	sp, r7
    1f62:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f66:	4770      	bx	lr

00001f68 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    1f68:	b580      	push	{r7, lr}
    1f6a:	b084      	sub	sp, #16
    1f6c:	af00      	add	r7, sp, #0
    1f6e:	60f8      	str	r0, [r7, #12]
    1f70:	60b9      	str	r1, [r7, #8]
    1f72:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1f74:	68fb      	ldr	r3, [r7, #12]
    1f76:	2b00      	cmp	r3, #0
    1f78:	d004      	beq.n	1f84 <pwm_init+0x1c>
    1f7a:	68bb      	ldr	r3, [r7, #8]
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d001      	beq.n	1f84 <pwm_init+0x1c>
    1f80:	2301      	movs	r3, #1
    1f82:	e000      	b.n	1f86 <pwm_init+0x1e>
    1f84:	2300      	movs	r3, #0
    1f86:	f003 0301 	and.w	r3, r3, #1
    1f8a:	b2db      	uxtb	r3, r3
    1f8c:	2233      	movs	r2, #51	; 0x33
    1f8e:	490a      	ldr	r1, [pc, #40]	; (1fb8 <pwm_init+0x50>)
    1f90:	4618      	mov	r0, r3
    1f92:	4b0a      	ldr	r3, [pc, #40]	; (1fbc <pwm_init+0x54>)
    1f94:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1f96:	68fb      	ldr	r3, [r7, #12]
    1f98:	68b9      	ldr	r1, [r7, #8]
    1f9a:	4618      	mov	r0, r3
    1f9c:	4b08      	ldr	r3, [pc, #32]	; (1fc0 <pwm_init+0x58>)
    1f9e:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1fa0:	68fb      	ldr	r3, [r7, #12]
    1fa2:	4a08      	ldr	r2, [pc, #32]	; (1fc4 <pwm_init+0x5c>)
    1fa4:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1fa6:	68fb      	ldr	r3, [r7, #12]
    1fa8:	4a07      	ldr	r2, [pc, #28]	; (1fc8 <pwm_init+0x60>)
    1faa:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    1fac:	2300      	movs	r3, #0
}
    1fae:	4618      	mov	r0, r3
    1fb0:	3710      	adds	r7, #16
    1fb2:	46bd      	mov	sp, r7
    1fb4:	bd80      	pop	{r7, pc}
    1fb6:	bf00      	nop
    1fb8:	0000cfbc 	.word	0x0000cfbc
    1fbc:	00002dd1 	.word	0x00002dd1
    1fc0:	000072cd 	.word	0x000072cd
    1fc4:	00001fcd 	.word	0x00001fcd
    1fc8:	00001ff1 	.word	0x00001ff1

00001fcc <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1fcc:	b580      	push	{r7, lr}
    1fce:	b084      	sub	sp, #16
    1fd0:	af00      	add	r7, sp, #0
    1fd2:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1fd4:	687b      	ldr	r3, [r7, #4]
    1fd6:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    1fd8:	68fb      	ldr	r3, [r7, #12]
    1fda:	695b      	ldr	r3, [r3, #20]
    1fdc:	2b00      	cmp	r3, #0
    1fde:	d003      	beq.n	1fe8 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    1fe0:	68fb      	ldr	r3, [r7, #12]
    1fe2:	695b      	ldr	r3, [r3, #20]
    1fe4:	68f8      	ldr	r0, [r7, #12]
    1fe6:	4798      	blx	r3
	}
}
    1fe8:	bf00      	nop
    1fea:	3710      	adds	r7, #16
    1fec:	46bd      	mov	sp, r7
    1fee:	bd80      	pop	{r7, pc}

00001ff0 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1ff0:	b580      	push	{r7, lr}
    1ff2:	b084      	sub	sp, #16
    1ff4:	af00      	add	r7, sp, #0
    1ff6:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1ff8:	687b      	ldr	r3, [r7, #4]
    1ffa:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    1ffc:	68fb      	ldr	r3, [r7, #12]
    1ffe:	699b      	ldr	r3, [r3, #24]
    2000:	2b00      	cmp	r3, #0
    2002:	d003      	beq.n	200c <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2004:	68fb      	ldr	r3, [r7, #12]
    2006:	699b      	ldr	r3, [r3, #24]
    2008:	68f8      	ldr	r0, [r7, #12]
    200a:	4798      	blx	r3
	}
}
    200c:	bf00      	nop
    200e:	3710      	adds	r7, #16
    2010:	46bd      	mov	sp, r7
    2012:	bd80      	pop	{r7, pc}

00002014 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2014:	b580      	push	{r7, lr}
    2016:	b082      	sub	sp, #8
    2018:	af00      	add	r7, sp, #0
    201a:	6078      	str	r0, [r7, #4]
    201c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    201e:	687b      	ldr	r3, [r7, #4]
    2020:	2b00      	cmp	r3, #0
    2022:	d004      	beq.n	202e <qspi_sync_init+0x1a>
    2024:	683b      	ldr	r3, [r7, #0]
    2026:	2b00      	cmp	r3, #0
    2028:	d001      	beq.n	202e <qspi_sync_init+0x1a>
    202a:	2301      	movs	r3, #1
    202c:	e000      	b.n	2030 <qspi_sync_init+0x1c>
    202e:	2300      	movs	r3, #0
    2030:	f003 0301 	and.w	r3, r3, #1
    2034:	b2db      	uxtb	r3, r3
    2036:	2231      	movs	r2, #49	; 0x31
    2038:	4906      	ldr	r1, [pc, #24]	; (2054 <qspi_sync_init+0x40>)
    203a:	4618      	mov	r0, r3
    203c:	4b06      	ldr	r3, [pc, #24]	; (2058 <qspi_sync_init+0x44>)
    203e:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2040:	687b      	ldr	r3, [r7, #4]
    2042:	6839      	ldr	r1, [r7, #0]
    2044:	4618      	mov	r0, r3
    2046:	4b05      	ldr	r3, [pc, #20]	; (205c <qspi_sync_init+0x48>)
    2048:	4798      	blx	r3
    204a:	4603      	mov	r3, r0
}
    204c:	4618      	mov	r0, r3
    204e:	3708      	adds	r7, #8
    2050:	46bd      	mov	sp, r7
    2052:	bd80      	pop	{r7, pc}
    2054:	0000cfd4 	.word	0x0000cfd4
    2058:	00002dd1 	.word	0x00002dd1
    205c:	00004c8d 	.word	0x00004c8d

00002060 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2060:	b580      	push	{r7, lr}
    2062:	b082      	sub	sp, #8
    2064:	af00      	add	r7, sp, #0
    2066:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2068:	687b      	ldr	r3, [r7, #4]
    206a:	2b00      	cmp	r3, #0
    206c:	bf14      	ite	ne
    206e:	2301      	movne	r3, #1
    2070:	2300      	moveq	r3, #0
    2072:	b2db      	uxtb	r3, r3
    2074:	223f      	movs	r2, #63	; 0x3f
    2076:	4906      	ldr	r1, [pc, #24]	; (2090 <qspi_sync_enable+0x30>)
    2078:	4618      	mov	r0, r3
    207a:	4b06      	ldr	r3, [pc, #24]	; (2094 <qspi_sync_enable+0x34>)
    207c:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    207e:	687b      	ldr	r3, [r7, #4]
    2080:	4618      	mov	r0, r3
    2082:	4b05      	ldr	r3, [pc, #20]	; (2098 <qspi_sync_enable+0x38>)
    2084:	4798      	blx	r3
    2086:	4603      	mov	r3, r0
}
    2088:	4618      	mov	r0, r3
    208a:	3708      	adds	r7, #8
    208c:	46bd      	mov	sp, r7
    208e:	bd80      	pop	{r7, pc}
    2090:	0000cfd4 	.word	0x0000cfd4
    2094:	00002dd1 	.word	0x00002dd1
    2098:	00004d01 	.word	0x00004d01

0000209c <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    209c:	b580      	push	{r7, lr}
    209e:	b082      	sub	sp, #8
    20a0:	af00      	add	r7, sp, #0
    20a2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    20a4:	687b      	ldr	r3, [r7, #4]
    20a6:	2b00      	cmp	r3, #0
    20a8:	bf14      	ite	ne
    20aa:	2301      	movne	r3, #1
    20ac:	2300      	moveq	r3, #0
    20ae:	b2db      	uxtb	r3, r3
    20b0:	2246      	movs	r2, #70	; 0x46
    20b2:	4906      	ldr	r1, [pc, #24]	; (20cc <qspi_sync_disable+0x30>)
    20b4:	4618      	mov	r0, r3
    20b6:	4b06      	ldr	r3, [pc, #24]	; (20d0 <qspi_sync_disable+0x34>)
    20b8:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    20ba:	687b      	ldr	r3, [r7, #4]
    20bc:	4618      	mov	r0, r3
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <qspi_sync_disable+0x38>)
    20c0:	4798      	blx	r3
    20c2:	4603      	mov	r3, r0
}
    20c4:	4618      	mov	r0, r3
    20c6:	3708      	adds	r7, #8
    20c8:	46bd      	mov	sp, r7
    20ca:	bd80      	pop	{r7, pc}
    20cc:	0000cfd4 	.word	0x0000cfd4
    20d0:	00002dd1 	.word	0x00002dd1
    20d4:	00004d25 	.word	0x00004d25

000020d8 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    20d8:	b580      	push	{r7, lr}
    20da:	b082      	sub	sp, #8
    20dc:	af00      	add	r7, sp, #0
    20de:	6078      	str	r0, [r7, #4]
    20e0:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    20e2:	687b      	ldr	r3, [r7, #4]
    20e4:	2b00      	cmp	r3, #0
    20e6:	d004      	beq.n	20f2 <qspi_sync_serial_run_command+0x1a>
    20e8:	683b      	ldr	r3, [r7, #0]
    20ea:	2b00      	cmp	r3, #0
    20ec:	d001      	beq.n	20f2 <qspi_sync_serial_run_command+0x1a>
    20ee:	2301      	movs	r3, #1
    20f0:	e000      	b.n	20f4 <qspi_sync_serial_run_command+0x1c>
    20f2:	2300      	movs	r3, #0
    20f4:	f003 0301 	and.w	r3, r3, #1
    20f8:	b2db      	uxtb	r3, r3
    20fa:	224d      	movs	r2, #77	; 0x4d
    20fc:	4906      	ldr	r1, [pc, #24]	; (2118 <qspi_sync_serial_run_command+0x40>)
    20fe:	4618      	mov	r0, r3
    2100:	4b06      	ldr	r3, [pc, #24]	; (211c <qspi_sync_serial_run_command+0x44>)
    2102:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2104:	687b      	ldr	r3, [r7, #4]
    2106:	6839      	ldr	r1, [r7, #0]
    2108:	4618      	mov	r0, r3
    210a:	4b05      	ldr	r3, [pc, #20]	; (2120 <qspi_sync_serial_run_command+0x48>)
    210c:	4798      	blx	r3
    210e:	4603      	mov	r3, r0
}
    2110:	4618      	mov	r0, r3
    2112:	3708      	adds	r7, #8
    2114:	46bd      	mov	sp, r7
    2116:	bd80      	pop	{r7, pc}
    2118:	0000cfd4 	.word	0x0000cfd4
    211c:	00002dd1 	.word	0x00002dd1
    2120:	00004e71 	.word	0x00004e71

00002124 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2124:	b580      	push	{r7, lr}
    2126:	b084      	sub	sp, #16
    2128:	af00      	add	r7, sp, #0
    212a:	6078      	str	r0, [r7, #4]
    212c:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    212e:	2300      	movs	r3, #0
    2130:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2132:	687b      	ldr	r3, [r7, #4]
    2134:	2b00      	cmp	r3, #0
    2136:	d004      	beq.n	2142 <spi_m_sync_init+0x1e>
    2138:	683b      	ldr	r3, [r7, #0]
    213a:	2b00      	cmp	r3, #0
    213c:	d001      	beq.n	2142 <spi_m_sync_init+0x1e>
    213e:	2301      	movs	r3, #1
    2140:	e000      	b.n	2144 <spi_m_sync_init+0x20>
    2142:	2300      	movs	r3, #0
    2144:	f003 0301 	and.w	r3, r3, #1
    2148:	b2db      	uxtb	r3, r3
    214a:	2240      	movs	r2, #64	; 0x40
    214c:	4910      	ldr	r1, [pc, #64]	; (2190 <spi_m_sync_init+0x6c>)
    214e:	4618      	mov	r0, r3
    2150:	4b10      	ldr	r3, [pc, #64]	; (2194 <spi_m_sync_init+0x70>)
    2152:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2154:	687b      	ldr	r3, [r7, #4]
    2156:	683a      	ldr	r2, [r7, #0]
    2158:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    215a:	687b      	ldr	r3, [r7, #4]
    215c:	3304      	adds	r3, #4
    215e:	6839      	ldr	r1, [r7, #0]
    2160:	4618      	mov	r0, r3
    2162:	4b0d      	ldr	r3, [pc, #52]	; (2198 <spi_m_sync_init+0x74>)
    2164:	4798      	blx	r3
    2166:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2168:	68fb      	ldr	r3, [r7, #12]
    216a:	2b00      	cmp	r3, #0
    216c:	da01      	bge.n	2172 <spi_m_sync_init+0x4e>
		return rc;
    216e:	68fb      	ldr	r3, [r7, #12]
    2170:	e00a      	b.n	2188 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2172:	687b      	ldr	r3, [r7, #4]
    2174:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2178:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    217a:	687b      	ldr	r3, [r7, #4]
    217c:	4a07      	ldr	r2, [pc, #28]	; (219c <spi_m_sync_init+0x78>)
    217e:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2180:	687b      	ldr	r3, [r7, #4]
    2182:	4a07      	ldr	r2, [pc, #28]	; (21a0 <spi_m_sync_init+0x7c>)
    2184:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2186:	2300      	movs	r3, #0
}
    2188:	4618      	mov	r0, r3
    218a:	3710      	adds	r7, #16
    218c:	46bd      	mov	sp, r7
    218e:	bd80      	pop	{r7, pc}
    2190:	0000cff0 	.word	0x0000cff0
    2194:	00002dd1 	.word	0x00002dd1
    2198:	000061a1 	.word	0x000061a1
    219c:	000021a5 	.word	0x000021a5
    21a0:	000021fd 	.word	0x000021fd

000021a4 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    21a4:	b580      	push	{r7, lr}
    21a6:	b088      	sub	sp, #32
    21a8:	af00      	add	r7, sp, #0
    21aa:	60f8      	str	r0, [r7, #12]
    21ac:	60b9      	str	r1, [r7, #8]
    21ae:	4613      	mov	r3, r2
    21b0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    21b2:	68fb      	ldr	r3, [r7, #12]
    21b4:	2b00      	cmp	r3, #0
    21b6:	bf14      	ite	ne
    21b8:	2301      	movne	r3, #1
    21ba:	2300      	moveq	r3, #0
    21bc:	b2db      	uxtb	r3, r3
    21be:	2287      	movs	r2, #135	; 0x87
    21c0:	490b      	ldr	r1, [pc, #44]	; (21f0 <_spi_m_sync_io_read+0x4c>)
    21c2:	4618      	mov	r0, r3
    21c4:	4b0b      	ldr	r3, [pc, #44]	; (21f4 <_spi_m_sync_io_read+0x50>)
    21c6:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    21c8:	68fb      	ldr	r3, [r7, #12]
    21ca:	3b0c      	subs	r3, #12
    21cc:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    21ce:	68bb      	ldr	r3, [r7, #8]
    21d0:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    21d2:	2300      	movs	r3, #0
    21d4:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    21d6:	88fb      	ldrh	r3, [r7, #6]
    21d8:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    21da:	f107 0310 	add.w	r3, r7, #16
    21de:	4619      	mov	r1, r3
    21e0:	69f8      	ldr	r0, [r7, #28]
    21e2:	4b05      	ldr	r3, [pc, #20]	; (21f8 <_spi_m_sync_io_read+0x54>)
    21e4:	4798      	blx	r3
    21e6:	4603      	mov	r3, r0
}
    21e8:	4618      	mov	r0, r3
    21ea:	3720      	adds	r7, #32
    21ec:	46bd      	mov	sp, r7
    21ee:	bd80      	pop	{r7, pc}
    21f0:	0000cff0 	.word	0x0000cff0
    21f4:	00002dd1 	.word	0x00002dd1
    21f8:	00002255 	.word	0x00002255

000021fc <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    21fc:	b580      	push	{r7, lr}
    21fe:	b088      	sub	sp, #32
    2200:	af00      	add	r7, sp, #0
    2202:	60f8      	str	r0, [r7, #12]
    2204:	60b9      	str	r1, [r7, #8]
    2206:	4613      	mov	r3, r2
    2208:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    220a:	68fb      	ldr	r3, [r7, #12]
    220c:	2b00      	cmp	r3, #0
    220e:	bf14      	ite	ne
    2210:	2301      	movne	r3, #1
    2212:	2300      	moveq	r3, #0
    2214:	b2db      	uxtb	r3, r3
    2216:	22a3      	movs	r2, #163	; 0xa3
    2218:	490b      	ldr	r1, [pc, #44]	; (2248 <_spi_m_sync_io_write+0x4c>)
    221a:	4618      	mov	r0, r3
    221c:	4b0b      	ldr	r3, [pc, #44]	; (224c <_spi_m_sync_io_write+0x50>)
    221e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2220:	68fb      	ldr	r3, [r7, #12]
    2222:	3b0c      	subs	r3, #12
    2224:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2226:	2300      	movs	r3, #0
    2228:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    222a:	68bb      	ldr	r3, [r7, #8]
    222c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    222e:	88fb      	ldrh	r3, [r7, #6]
    2230:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2232:	f107 0310 	add.w	r3, r7, #16
    2236:	4619      	mov	r1, r3
    2238:	69f8      	ldr	r0, [r7, #28]
    223a:	4b05      	ldr	r3, [pc, #20]	; (2250 <_spi_m_sync_io_write+0x54>)
    223c:	4798      	blx	r3
    223e:	4603      	mov	r3, r0
}
    2240:	4618      	mov	r0, r3
    2242:	3720      	adds	r7, #32
    2244:	46bd      	mov	sp, r7
    2246:	bd80      	pop	{r7, pc}
    2248:	0000cff0 	.word	0x0000cff0
    224c:	00002dd1 	.word	0x00002dd1
    2250:	00002255 	.word	0x00002255

00002254 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2254:	b580      	push	{r7, lr}
    2256:	b086      	sub	sp, #24
    2258:	af00      	add	r7, sp, #0
    225a:	6078      	str	r0, [r7, #4]
    225c:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	2b00      	cmp	r3, #0
    2262:	d004      	beq.n	226e <spi_m_sync_transfer+0x1a>
    2264:	683b      	ldr	r3, [r7, #0]
    2266:	2b00      	cmp	r3, #0
    2268:	d001      	beq.n	226e <spi_m_sync_transfer+0x1a>
    226a:	2301      	movs	r3, #1
    226c:	e000      	b.n	2270 <spi_m_sync_transfer+0x1c>
    226e:	2300      	movs	r3, #0
    2270:	f003 0301 	and.w	r3, r3, #1
    2274:	b2db      	uxtb	r3, r3
    2276:	22b3      	movs	r2, #179	; 0xb3
    2278:	490c      	ldr	r1, [pc, #48]	; (22ac <spi_m_sync_transfer+0x58>)
    227a:	4618      	mov	r0, r3
    227c:	4b0c      	ldr	r3, [pc, #48]	; (22b0 <spi_m_sync_transfer+0x5c>)
    227e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2280:	683b      	ldr	r3, [r7, #0]
    2282:	681b      	ldr	r3, [r3, #0]
    2284:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2286:	683b      	ldr	r3, [r7, #0]
    2288:	685b      	ldr	r3, [r3, #4]
    228a:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    228c:	683b      	ldr	r3, [r7, #0]
    228e:	689b      	ldr	r3, [r3, #8]
    2290:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	3304      	adds	r3, #4
    2296:	f107 020c 	add.w	r2, r7, #12
    229a:	4611      	mov	r1, r2
    229c:	4618      	mov	r0, r3
    229e:	4b05      	ldr	r3, [pc, #20]	; (22b4 <spi_m_sync_transfer+0x60>)
    22a0:	4798      	blx	r3
    22a2:	4603      	mov	r3, r0
}
    22a4:	4618      	mov	r0, r3
    22a6:	3718      	adds	r7, #24
    22a8:	46bd      	mov	sp, r7
    22aa:	bd80      	pop	{r7, pc}
    22ac:	0000cff0 	.word	0x0000cff0
    22b0:	00002dd1 	.word	0x00002dd1
    22b4:	00006401 	.word	0x00006401

000022b8 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    22b8:	b480      	push	{r7}
    22ba:	b083      	sub	sp, #12
    22bc:	af00      	add	r7, sp, #0
    22be:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    22c0:	687b      	ldr	r3, [r7, #4]
    22c2:	681b      	ldr	r3, [r3, #0]
}
    22c4:	4618      	mov	r0, r3
    22c6:	370c      	adds	r7, #12
    22c8:	46bd      	mov	sp, r7
    22ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    22ce:	4770      	bx	lr

000022d0 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    22d0:	b480      	push	{r7}
    22d2:	b083      	sub	sp, #12
    22d4:	af00      	add	r7, sp, #0
    22d6:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    22d8:	687b      	ldr	r3, [r7, #4]
    22da:	2b00      	cmp	r3, #0
    22dc:	d002      	beq.n	22e4 <list_get_next_element+0x14>
    22de:	687b      	ldr	r3, [r7, #4]
    22e0:	681b      	ldr	r3, [r3, #0]
    22e2:	e000      	b.n	22e6 <list_get_next_element+0x16>
    22e4:	2300      	movs	r3, #0
}
    22e6:	4618      	mov	r0, r3
    22e8:	370c      	adds	r7, #12
    22ea:	46bd      	mov	sp, r7
    22ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    22f0:	4770      	bx	lr
	...

000022f4 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    22f4:	b580      	push	{r7, lr}
    22f6:	b084      	sub	sp, #16
    22f8:	af00      	add	r7, sp, #0
    22fa:	60f8      	str	r0, [r7, #12]
    22fc:	60b9      	str	r1, [r7, #8]
    22fe:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2300:	68fb      	ldr	r3, [r7, #12]
    2302:	2b00      	cmp	r3, #0
    2304:	d007      	beq.n	2316 <timer_init+0x22>
    2306:	68bb      	ldr	r3, [r7, #8]
    2308:	2b00      	cmp	r3, #0
    230a:	d004      	beq.n	2316 <timer_init+0x22>
    230c:	687b      	ldr	r3, [r7, #4]
    230e:	2b00      	cmp	r3, #0
    2310:	d001      	beq.n	2316 <timer_init+0x22>
    2312:	2301      	movs	r3, #1
    2314:	e000      	b.n	2318 <timer_init+0x24>
    2316:	2300      	movs	r3, #0
    2318:	f003 0301 	and.w	r3, r3, #1
    231c:	b2db      	uxtb	r3, r3
    231e:	223b      	movs	r2, #59	; 0x3b
    2320:	490c      	ldr	r1, [pc, #48]	; (2354 <timer_init+0x60>)
    2322:	4618      	mov	r0, r3
    2324:	4b0c      	ldr	r3, [pc, #48]	; (2358 <timer_init+0x64>)
    2326:	4798      	blx	r3
	descr->func = func;
    2328:	68fb      	ldr	r3, [r7, #12]
    232a:	687a      	ldr	r2, [r7, #4]
    232c:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    232e:	68fb      	ldr	r3, [r7, #12]
    2330:	681b      	ldr	r3, [r3, #0]
    2332:	681b      	ldr	r3, [r3, #0]
    2334:	68fa      	ldr	r2, [r7, #12]
    2336:	3204      	adds	r2, #4
    2338:	68b9      	ldr	r1, [r7, #8]
    233a:	4610      	mov	r0, r2
    233c:	4798      	blx	r3
	descr->time                           = 0;
    233e:	68fb      	ldr	r3, [r7, #12]
    2340:	2200      	movs	r2, #0
    2342:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2344:	68fb      	ldr	r3, [r7, #12]
    2346:	4a05      	ldr	r2, [pc, #20]	; (235c <timer_init+0x68>)
    2348:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    234a:	2300      	movs	r3, #0
}
    234c:	4618      	mov	r0, r3
    234e:	3710      	adds	r7, #16
    2350:	46bd      	mov	sp, r7
    2352:	bd80      	pop	{r7, pc}
    2354:	0000d00c 	.word	0x0000d00c
    2358:	00002dd1 	.word	0x00002dd1
    235c:	00002411 	.word	0x00002411

00002360 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2360:	b580      	push	{r7, lr}
    2362:	b088      	sub	sp, #32
    2364:	af00      	add	r7, sp, #0
    2366:	60f8      	str	r0, [r7, #12]
    2368:	60b9      	str	r1, [r7, #8]
    236a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    236c:	2300      	movs	r3, #0
    236e:	61bb      	str	r3, [r7, #24]
    2370:	68f8      	ldr	r0, [r7, #12]
    2372:	4b23      	ldr	r3, [pc, #140]	; (2400 <timer_add_timer_task+0xa0>)
    2374:	4798      	blx	r3
    2376:	6138      	str	r0, [r7, #16]

	if (!head) {
    2378:	693b      	ldr	r3, [r7, #16]
    237a:	2b00      	cmp	r3, #0
    237c:	d104      	bne.n	2388 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    237e:	68b9      	ldr	r1, [r7, #8]
    2380:	68f8      	ldr	r0, [r7, #12]
    2382:	4b20      	ldr	r3, [pc, #128]	; (2404 <timer_add_timer_task+0xa4>)
    2384:	4798      	blx	r3
		return;
    2386:	e037      	b.n	23f8 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2388:	693b      	ldr	r3, [r7, #16]
    238a:	61fb      	str	r3, [r7, #28]
    238c:	e022      	b.n	23d4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    238e:	69fb      	ldr	r3, [r7, #28]
    2390:	685a      	ldr	r2, [r3, #4]
    2392:	687b      	ldr	r3, [r7, #4]
    2394:	429a      	cmp	r2, r3
    2396:	d808      	bhi.n	23aa <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2398:	69fb      	ldr	r3, [r7, #28]
    239a:	689a      	ldr	r2, [r3, #8]
    239c:	69fb      	ldr	r3, [r7, #28]
    239e:	6859      	ldr	r1, [r3, #4]
    23a0:	687b      	ldr	r3, [r7, #4]
    23a2:	1acb      	subs	r3, r1, r3
    23a4:	4413      	add	r3, r2
    23a6:	617b      	str	r3, [r7, #20]
    23a8:	e009      	b.n	23be <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    23aa:	69fb      	ldr	r3, [r7, #28]
    23ac:	689a      	ldr	r2, [r3, #8]
    23ae:	69fb      	ldr	r3, [r7, #28]
    23b0:	685b      	ldr	r3, [r3, #4]
    23b2:	441a      	add	r2, r3
    23b4:	687b      	ldr	r3, [r7, #4]
    23b6:	425b      	negs	r3, r3
    23b8:	4413      	add	r3, r2
    23ba:	3301      	adds	r3, #1
    23bc:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    23be:	68bb      	ldr	r3, [r7, #8]
    23c0:	689a      	ldr	r2, [r3, #8]
    23c2:	697b      	ldr	r3, [r7, #20]
    23c4:	429a      	cmp	r2, r3
    23c6:	d909      	bls.n	23dc <timer_add_timer_task+0x7c>
			break;
		prev = it;
    23c8:	69fb      	ldr	r3, [r7, #28]
    23ca:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    23cc:	69f8      	ldr	r0, [r7, #28]
    23ce:	4b0e      	ldr	r3, [pc, #56]	; (2408 <timer_add_timer_task+0xa8>)
    23d0:	4798      	blx	r3
    23d2:	61f8      	str	r0, [r7, #28]
    23d4:	69fb      	ldr	r3, [r7, #28]
    23d6:	2b00      	cmp	r3, #0
    23d8:	d1d9      	bne.n	238e <timer_add_timer_task+0x2e>
    23da:	e000      	b.n	23de <timer_add_timer_task+0x7e>
			break;
    23dc:	bf00      	nop
	}

	if (it == head) {
    23de:	69fa      	ldr	r2, [r7, #28]
    23e0:	693b      	ldr	r3, [r7, #16]
    23e2:	429a      	cmp	r2, r3
    23e4:	d104      	bne.n	23f0 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    23e6:	68b9      	ldr	r1, [r7, #8]
    23e8:	68f8      	ldr	r0, [r7, #12]
    23ea:	4b06      	ldr	r3, [pc, #24]	; (2404 <timer_add_timer_task+0xa4>)
    23ec:	4798      	blx	r3
    23ee:	e003      	b.n	23f8 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    23f0:	68b9      	ldr	r1, [r7, #8]
    23f2:	69b8      	ldr	r0, [r7, #24]
    23f4:	4b05      	ldr	r3, [pc, #20]	; (240c <timer_add_timer_task+0xac>)
    23f6:	4798      	blx	r3
	}
}
    23f8:	3720      	adds	r7, #32
    23fa:	46bd      	mov	sp, r7
    23fc:	bd80      	pop	{r7, pc}
    23fe:	bf00      	nop
    2400:	000022b9 	.word	0x000022b9
    2404:	00002e31 	.word	0x00002e31
    2408:	000022d1 	.word	0x000022d1
    240c:	00002e89 	.word	0x00002e89

00002410 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2410:	b580      	push	{r7, lr}
    2412:	b086      	sub	sp, #24
    2414:	af00      	add	r7, sp, #0
    2416:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2418:	687b      	ldr	r3, [r7, #4]
    241a:	3b04      	subs	r3, #4
    241c:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    241e:	693b      	ldr	r3, [r7, #16]
    2420:	3318      	adds	r3, #24
    2422:	4618      	mov	r0, r3
    2424:	4b27      	ldr	r3, [pc, #156]	; (24c4 <timer_process_counted+0xb4>)
    2426:	4798      	blx	r3
    2428:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    242a:	693b      	ldr	r3, [r7, #16]
    242c:	695b      	ldr	r3, [r3, #20]
    242e:	1c5a      	adds	r2, r3, #1
    2430:	693b      	ldr	r3, [r7, #16]
    2432:	615a      	str	r2, [r3, #20]
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	695b      	ldr	r3, [r3, #20]
    2438:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	7f1b      	ldrb	r3, [r3, #28]
    243e:	b2db      	uxtb	r3, r3
    2440:	f003 0301 	and.w	r3, r3, #1
    2444:	2b00      	cmp	r3, #0
    2446:	d106      	bne.n	2456 <timer_process_counted+0x46>
    2448:	693b      	ldr	r3, [r7, #16]
    244a:	7f1b      	ldrb	r3, [r3, #28]
    244c:	b2db      	uxtb	r3, r3
    244e:	f003 0302 	and.w	r3, r3, #2
    2452:	2b00      	cmp	r3, #0
    2454:	d027      	beq.n	24a6 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2456:	693b      	ldr	r3, [r7, #16]
    2458:	7f1b      	ldrb	r3, [r3, #28]
    245a:	b2db      	uxtb	r3, r3
    245c:	f043 0302 	orr.w	r3, r3, #2
    2460:	b2da      	uxtb	r2, r3
    2462:	693b      	ldr	r3, [r7, #16]
    2464:	771a      	strb	r2, [r3, #28]
		return;
    2466:	e029      	b.n	24bc <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2468:	697b      	ldr	r3, [r7, #20]
    246a:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	3318      	adds	r3, #24
    2470:	4618      	mov	r0, r3
    2472:	4b15      	ldr	r3, [pc, #84]	; (24c8 <timer_process_counted+0xb8>)
    2474:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2476:	68bb      	ldr	r3, [r7, #8]
    2478:	7c1b      	ldrb	r3, [r3, #16]
    247a:	2b01      	cmp	r3, #1
    247c:	d109      	bne.n	2492 <timer_process_counted+0x82>
			tmp->time_label = time;
    247e:	68bb      	ldr	r3, [r7, #8]
    2480:	68fa      	ldr	r2, [r7, #12]
    2482:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2484:	693b      	ldr	r3, [r7, #16]
    2486:	3318      	adds	r3, #24
    2488:	68fa      	ldr	r2, [r7, #12]
    248a:	68b9      	ldr	r1, [r7, #8]
    248c:	4618      	mov	r0, r3
    248e:	4b0f      	ldr	r3, [pc, #60]	; (24cc <timer_process_counted+0xbc>)
    2490:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2492:	693b      	ldr	r3, [r7, #16]
    2494:	3318      	adds	r3, #24
    2496:	4618      	mov	r0, r3
    2498:	4b0a      	ldr	r3, [pc, #40]	; (24c4 <timer_process_counted+0xb4>)
    249a:	4798      	blx	r3
    249c:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    249e:	68bb      	ldr	r3, [r7, #8]
    24a0:	68db      	ldr	r3, [r3, #12]
    24a2:	68b8      	ldr	r0, [r7, #8]
    24a4:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    24a6:	697b      	ldr	r3, [r7, #20]
    24a8:	2b00      	cmp	r3, #0
    24aa:	d007      	beq.n	24bc <timer_process_counted+0xac>
    24ac:	697b      	ldr	r3, [r7, #20]
    24ae:	685b      	ldr	r3, [r3, #4]
    24b0:	68fa      	ldr	r2, [r7, #12]
    24b2:	1ad2      	subs	r2, r2, r3
    24b4:	697b      	ldr	r3, [r7, #20]
    24b6:	689b      	ldr	r3, [r3, #8]
    24b8:	429a      	cmp	r2, r3
    24ba:	d2d5      	bcs.n	2468 <timer_process_counted+0x58>
	}
}
    24bc:	3718      	adds	r7, #24
    24be:	46bd      	mov	sp, r7
    24c0:	bd80      	pop	{r7, pc}
    24c2:	bf00      	nop
    24c4:	000022b9 	.word	0x000022b9
    24c8:	00002f29 	.word	0x00002f29
    24cc:	00002361 	.word	0x00002361

000024d0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    24d0:	b480      	push	{r7}
    24d2:	b085      	sub	sp, #20
    24d4:	af00      	add	r7, sp, #0
    24d6:	4603      	mov	r3, r0
    24d8:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    24da:	2300      	movs	r3, #0
    24dc:	73fb      	strb	r3, [r7, #15]
    24de:	e029      	b.n	2534 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    24e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    24e4:	4a19      	ldr	r2, [pc, #100]	; (254c <_usb_d_find_ep+0x7c>)
    24e6:	015b      	lsls	r3, r3, #5
    24e8:	4413      	add	r3, r2
    24ea:	3301      	adds	r3, #1
    24ec:	781b      	ldrb	r3, [r3, #0]
    24ee:	79fa      	ldrb	r2, [r7, #7]
    24f0:	429a      	cmp	r2, r3
    24f2:	d102      	bne.n	24fa <_usb_d_find_ep+0x2a>
			return i;
    24f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    24f8:	e022      	b.n	2540 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    24fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    24fe:	4a13      	ldr	r2, [pc, #76]	; (254c <_usb_d_find_ep+0x7c>)
    2500:	015b      	lsls	r3, r3, #5
    2502:	4413      	add	r3, r2
    2504:	781b      	ldrb	r3, [r3, #0]
    2506:	2b00      	cmp	r3, #0
    2508:	d10e      	bne.n	2528 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    250a:	79fb      	ldrb	r3, [r7, #7]
    250c:	f003 030f 	and.w	r3, r3, #15
    2510:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2514:	490d      	ldr	r1, [pc, #52]	; (254c <_usb_d_find_ep+0x7c>)
    2516:	0152      	lsls	r2, r2, #5
    2518:	440a      	add	r2, r1
    251a:	3201      	adds	r2, #1
    251c:	7812      	ldrb	r2, [r2, #0]
    251e:	4293      	cmp	r3, r2
    2520:	d102      	bne.n	2528 <_usb_d_find_ep+0x58>
			return i;
    2522:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2526:	e00b      	b.n	2540 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2528:	f997 300f 	ldrsb.w	r3, [r7, #15]
    252c:	b2db      	uxtb	r3, r3
    252e:	3301      	adds	r3, #1
    2530:	b2db      	uxtb	r3, r3
    2532:	73fb      	strb	r3, [r7, #15]
    2534:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2538:	2b03      	cmp	r3, #3
    253a:	ddd1      	ble.n	24e0 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    253c:	f04f 33ff 	mov.w	r3, #4294967295
}
    2540:	4618      	mov	r0, r3
    2542:	3714      	adds	r7, #20
    2544:	46bd      	mov	sp, r7
    2546:	f85d 7b04 	ldr.w	r7, [sp], #4
    254a:	4770      	bx	lr
    254c:	20000704 	.word	0x20000704

00002550 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2550:	b580      	push	{r7, lr}
    2552:	b088      	sub	sp, #32
    2554:	af00      	add	r7, sp, #0
    2556:	60ba      	str	r2, [r7, #8]
    2558:	607b      	str	r3, [r7, #4]
    255a:	4603      	mov	r3, r0
    255c:	73fb      	strb	r3, [r7, #15]
    255e:	460b      	mov	r3, r1
    2560:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2562:	68bb      	ldr	r3, [r7, #8]
    2564:	617b      	str	r3, [r7, #20]
    2566:	687b      	ldr	r3, [r7, #4]
    2568:	61bb      	str	r3, [r7, #24]
    256a:	7bbb      	ldrb	r3, [r7, #14]
    256c:	2b00      	cmp	r3, #0
    256e:	d004      	beq.n	257a <_usb_d_trans+0x2a>
    2570:	7bfb      	ldrb	r3, [r7, #15]
    2572:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2576:	b2db      	uxtb	r3, r3
    2578:	e003      	b.n	2582 <_usb_d_trans+0x32>
    257a:	7bfb      	ldrb	r3, [r7, #15]
    257c:	f003 030f 	and.w	r3, r3, #15
    2580:	b2db      	uxtb	r3, r3
    2582:	773b      	strb	r3, [r7, #28]
    2584:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2588:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    258a:	f107 0314 	add.w	r3, r7, #20
    258e:	4618      	mov	r0, r3
    2590:	4b03      	ldr	r3, [pc, #12]	; (25a0 <_usb_d_trans+0x50>)
    2592:	4798      	blx	r3
    2594:	4603      	mov	r3, r0
}
    2596:	4618      	mov	r0, r3
    2598:	3720      	adds	r7, #32
    259a:	46bd      	mov	sp, r7
    259c:	bd80      	pop	{r7, pc}
    259e:	bf00      	nop
    25a0:	00009e11 	.word	0x00009e11

000025a4 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    25a4:	b480      	push	{r7}
    25a6:	b085      	sub	sp, #20
    25a8:	af00      	add	r7, sp, #0
    25aa:	60f8      	str	r0, [r7, #12]
    25ac:	60b9      	str	r1, [r7, #8]
    25ae:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    25b0:	2300      	movs	r3, #0
}
    25b2:	4618      	mov	r0, r3
    25b4:	3714      	adds	r7, #20
    25b6:	46bd      	mov	sp, r7
    25b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    25bc:	4770      	bx	lr
	...

000025c0 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    25c0:	b580      	push	{r7, lr}
    25c2:	b086      	sub	sp, #24
    25c4:	af00      	add	r7, sp, #0
    25c6:	4603      	mov	r3, r0
    25c8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    25ca:	79fb      	ldrb	r3, [r7, #7]
    25cc:	4618      	mov	r0, r3
    25ce:	4b2a      	ldr	r3, [pc, #168]	; (2678 <usb_d_cb_trans_setup+0xb8>)
    25d0:	4798      	blx	r3
    25d2:	4603      	mov	r3, r0
    25d4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    25d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    25da:	015b      	lsls	r3, r3, #5
    25dc:	4a27      	ldr	r2, [pc, #156]	; (267c <usb_d_cb_trans_setup+0xbc>)
    25de:	4413      	add	r3, r2
    25e0:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    25e2:	693b      	ldr	r3, [r7, #16]
    25e4:	330c      	adds	r3, #12
    25e6:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    25e8:	79fb      	ldrb	r3, [r7, #7]
    25ea:	68f9      	ldr	r1, [r7, #12]
    25ec:	4618      	mov	r0, r3
    25ee:	4b24      	ldr	r3, [pc, #144]	; (2680 <usb_d_cb_trans_setup+0xc0>)
    25f0:	4798      	blx	r3
    25f2:	4603      	mov	r3, r0
    25f4:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    25f6:	7afb      	ldrb	r3, [r7, #11]
    25f8:	2b08      	cmp	r3, #8
    25fa:	d00d      	beq.n	2618 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    25fc:	79fb      	ldrb	r3, [r7, #7]
    25fe:	2101      	movs	r1, #1
    2600:	4618      	mov	r0, r3
    2602:	4b20      	ldr	r3, [pc, #128]	; (2684 <usb_d_cb_trans_setup+0xc4>)
    2604:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2606:	79fb      	ldrb	r3, [r7, #7]
    2608:	f063 037f 	orn	r3, r3, #127	; 0x7f
    260c:	b2db      	uxtb	r3, r3
    260e:	2101      	movs	r1, #1
    2610:	4618      	mov	r0, r3
    2612:	4b1c      	ldr	r3, [pc, #112]	; (2684 <usb_d_cb_trans_setup+0xc4>)
    2614:	4798      	blx	r3
		return;
    2616:	e02b      	b.n	2670 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2618:	79fb      	ldrb	r3, [r7, #7]
    261a:	2100      	movs	r1, #0
    261c:	4618      	mov	r0, r3
    261e:	4b19      	ldr	r3, [pc, #100]	; (2684 <usb_d_cb_trans_setup+0xc4>)
    2620:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2622:	79fb      	ldrb	r3, [r7, #7]
    2624:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2628:	b2db      	uxtb	r3, r3
    262a:	2100      	movs	r1, #0
    262c:	4618      	mov	r0, r3
    262e:	4b15      	ldr	r3, [pc, #84]	; (2684 <usb_d_cb_trans_setup+0xc4>)
    2630:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2632:	693b      	ldr	r3, [r7, #16]
    2634:	2201      	movs	r2, #1
    2636:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2638:	693b      	ldr	r3, [r7, #16]
    263a:	695b      	ldr	r3, [r3, #20]
    263c:	79fa      	ldrb	r2, [r7, #7]
    263e:	68f9      	ldr	r1, [r7, #12]
    2640:	4610      	mov	r0, r2
    2642:	4798      	blx	r3
    2644:	4603      	mov	r3, r0
    2646:	f083 0301 	eor.w	r3, r3, #1
    264a:	b2db      	uxtb	r3, r3
    264c:	2b00      	cmp	r3, #0
    264e:	d00f      	beq.n	2670 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2650:	693b      	ldr	r3, [r7, #16]
    2652:	2205      	movs	r2, #5
    2654:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2656:	79fb      	ldrb	r3, [r7, #7]
    2658:	2101      	movs	r1, #1
    265a:	4618      	mov	r0, r3
    265c:	4b09      	ldr	r3, [pc, #36]	; (2684 <usb_d_cb_trans_setup+0xc4>)
    265e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2660:	79fb      	ldrb	r3, [r7, #7]
    2662:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2666:	b2db      	uxtb	r3, r3
    2668:	2101      	movs	r1, #1
    266a:	4618      	mov	r0, r3
    266c:	4b05      	ldr	r3, [pc, #20]	; (2684 <usb_d_cb_trans_setup+0xc4>)
    266e:	4798      	blx	r3
	}
}
    2670:	3718      	adds	r7, #24
    2672:	46bd      	mov	sp, r7
    2674:	bd80      	pop	{r7, pc}
    2676:	bf00      	nop
    2678:	000024d1 	.word	0x000024d1
    267c:	20000704 	.word	0x20000704
    2680:	00009d69 	.word	0x00009d69
    2684:	00009be1 	.word	0x00009be1

00002688 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2688:	b580      	push	{r7, lr}
    268a:	b084      	sub	sp, #16
    268c:	af00      	add	r7, sp, #0
    268e:	4603      	mov	r3, r0
    2690:	6039      	str	r1, [r7, #0]
    2692:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2694:	79fb      	ldrb	r3, [r7, #7]
    2696:	4618      	mov	r0, r3
    2698:	4b0d      	ldr	r3, [pc, #52]	; (26d0 <usb_d_cb_trans_more+0x48>)
    269a:	4798      	blx	r3
    269c:	4603      	mov	r3, r0
    269e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    26a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    26a4:	015b      	lsls	r3, r3, #5
    26a6:	4a0b      	ldr	r2, [pc, #44]	; (26d4 <usb_d_cb_trans_more+0x4c>)
    26a8:	4413      	add	r3, r2
    26aa:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    26ac:	68bb      	ldr	r3, [r7, #8]
    26ae:	789b      	ldrb	r3, [r3, #2]
    26b0:	2b03      	cmp	r3, #3
    26b2:	d107      	bne.n	26c4 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    26b4:	68bb      	ldr	r3, [r7, #8]
    26b6:	699b      	ldr	r3, [r3, #24]
    26b8:	79fa      	ldrb	r2, [r7, #7]
    26ba:	6839      	ldr	r1, [r7, #0]
    26bc:	4610      	mov	r0, r2
    26be:	4798      	blx	r3
    26c0:	4603      	mov	r3, r0
    26c2:	e000      	b.n	26c6 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    26c4:	2300      	movs	r3, #0
}
    26c6:	4618      	mov	r0, r3
    26c8:	3710      	adds	r7, #16
    26ca:	46bd      	mov	sp, r7
    26cc:	bd80      	pop	{r7, pc}
    26ce:	bf00      	nop
    26d0:	000024d1 	.word	0x000024d1
    26d4:	20000704 	.word	0x20000704

000026d8 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    26d8:	b590      	push	{r4, r7, lr}
    26da:	b087      	sub	sp, #28
    26dc:	af02      	add	r7, sp, #8
    26de:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    26e0:	687b      	ldr	r3, [r7, #4]
    26e2:	789b      	ldrb	r3, [r3, #2]
    26e4:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    26e6:	687b      	ldr	r3, [r7, #4]
    26e8:	7b1b      	ldrb	r3, [r3, #12]
    26ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    26ee:	2b00      	cmp	r3, #0
    26f0:	bf14      	ite	ne
    26f2:	2301      	movne	r3, #1
    26f4:	2300      	moveq	r3, #0
    26f6:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    26f8:	7bfb      	ldrb	r3, [r7, #15]
    26fa:	2b03      	cmp	r3, #3
    26fc:	d13a      	bne.n	2774 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    26fe:	687b      	ldr	r3, [r7, #4]
    2700:	69db      	ldr	r3, [r3, #28]
    2702:	687a      	ldr	r2, [r7, #4]
    2704:	7850      	ldrb	r0, [r2, #1]
    2706:	687a      	ldr	r2, [r7, #4]
    2708:	320c      	adds	r2, #12
    270a:	2101      	movs	r1, #1
    270c:	4798      	blx	r3
    270e:	4603      	mov	r3, r0
    2710:	737b      	strb	r3, [r7, #13]
		if (err) {
    2712:	7b7b      	ldrb	r3, [r7, #13]
    2714:	2b00      	cmp	r3, #0
    2716:	d015      	beq.n	2744 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2718:	687b      	ldr	r3, [r7, #4]
    271a:	2205      	movs	r2, #5
    271c:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    271e:	687b      	ldr	r3, [r7, #4]
    2720:	2202      	movs	r2, #2
    2722:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2724:	7bbb      	ldrb	r3, [r7, #14]
    2726:	2b00      	cmp	r3, #0
    2728:	d002      	beq.n	2730 <usb_d_ctrl_trans_done+0x58>
    272a:	687b      	ldr	r3, [r7, #4]
    272c:	785b      	ldrb	r3, [r3, #1]
    272e:	e004      	b.n	273a <usb_d_ctrl_trans_done+0x62>
    2730:	687b      	ldr	r3, [r7, #4]
    2732:	785b      	ldrb	r3, [r3, #1]
    2734:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2738:	b2db      	uxtb	r3, r3
    273a:	2101      	movs	r1, #1
    273c:	4618      	mov	r0, r3
    273e:	4b15      	ldr	r3, [pc, #84]	; (2794 <usb_d_ctrl_trans_done+0xbc>)
    2740:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    2742:	e022      	b.n	278a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2744:	687b      	ldr	r3, [r7, #4]
    2746:	2204      	movs	r2, #4
    2748:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    274a:	687b      	ldr	r3, [r7, #4]
    274c:	7858      	ldrb	r0, [r3, #1]
    274e:	7bbb      	ldrb	r3, [r7, #14]
    2750:	2b00      	cmp	r3, #0
    2752:	bf14      	ite	ne
    2754:	2301      	movne	r3, #1
    2756:	2300      	moveq	r3, #0
    2758:	b2db      	uxtb	r3, r3
    275a:	f083 0301 	eor.w	r3, r3, #1
    275e:	b2db      	uxtb	r3, r3
    2760:	f003 0301 	and.w	r3, r3, #1
    2764:	b2d9      	uxtb	r1, r3
    2766:	2301      	movs	r3, #1
    2768:	9300      	str	r3, [sp, #0]
    276a:	2300      	movs	r3, #0
    276c:	2200      	movs	r2, #0
    276e:	4c0a      	ldr	r4, [pc, #40]	; (2798 <usb_d_ctrl_trans_done+0xc0>)
    2770:	47a0      	blx	r4
}
    2772:	e00a      	b.n	278a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2774:	687b      	ldr	r3, [r7, #4]
    2776:	69db      	ldr	r3, [r3, #28]
    2778:	687a      	ldr	r2, [r7, #4]
    277a:	7850      	ldrb	r0, [r2, #1]
    277c:	687a      	ldr	r2, [r7, #4]
    277e:	320c      	adds	r2, #12
    2780:	2100      	movs	r1, #0
    2782:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2784:	687b      	ldr	r3, [r7, #4]
    2786:	2202      	movs	r2, #2
    2788:	709a      	strb	r2, [r3, #2]
}
    278a:	bf00      	nop
    278c:	3714      	adds	r7, #20
    278e:	46bd      	mov	sp, r7
    2790:	bd90      	pop	{r4, r7, pc}
    2792:	bf00      	nop
    2794:	00009be1 	.word	0x00009be1
    2798:	00002551 	.word	0x00002551

0000279c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    279c:	b580      	push	{r7, lr}
    279e:	b086      	sub	sp, #24
    27a0:	af00      	add	r7, sp, #0
    27a2:	4603      	mov	r3, r0
    27a4:	60b9      	str	r1, [r7, #8]
    27a6:	607a      	str	r2, [r7, #4]
    27a8:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    27aa:	7bfb      	ldrb	r3, [r7, #15]
    27ac:	4618      	mov	r0, r3
    27ae:	4b2f      	ldr	r3, [pc, #188]	; (286c <_usb_d_cb_trans_done+0xd0>)
    27b0:	4798      	blx	r3
    27b2:	4603      	mov	r3, r0
    27b4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    27b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    27ba:	015b      	lsls	r3, r3, #5
    27bc:	4a2c      	ldr	r2, [pc, #176]	; (2870 <_usb_d_cb_trans_done+0xd4>)
    27be:	4413      	add	r3, r2
    27c0:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    27c2:	68bb      	ldr	r3, [r7, #8]
    27c4:	2b00      	cmp	r3, #0
    27c6:	d10e      	bne.n	27e6 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    27c8:	693b      	ldr	r3, [r7, #16]
    27ca:	2200      	movs	r2, #0
    27cc:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    27ce:	693b      	ldr	r3, [r7, #16]
    27d0:	781b      	ldrb	r3, [r3, #0]
    27d2:	2b00      	cmp	r3, #0
    27d4:	d103      	bne.n	27de <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    27d6:	6938      	ldr	r0, [r7, #16]
    27d8:	4b26      	ldr	r3, [pc, #152]	; (2874 <_usb_d_cb_trans_done+0xd8>)
    27da:	4798      	blx	r3
			return;
    27dc:	e043      	b.n	2866 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    27de:	693b      	ldr	r3, [r7, #16]
    27e0:	2201      	movs	r2, #1
    27e2:	709a      	strb	r2, [r3, #2]
    27e4:	e038      	b.n	2858 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    27e6:	68bb      	ldr	r3, [r7, #8]
    27e8:	2b01      	cmp	r3, #1
    27ea:	d113      	bne.n	2814 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    27ec:	693b      	ldr	r3, [r7, #16]
    27ee:	2202      	movs	r2, #2
    27f0:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    27f2:	693b      	ldr	r3, [r7, #16]
    27f4:	781b      	ldrb	r3, [r3, #0]
    27f6:	2b00      	cmp	r3, #0
    27f8:	d108      	bne.n	280c <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    27fa:	693b      	ldr	r3, [r7, #16]
    27fc:	2202      	movs	r2, #2
    27fe:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2800:	7bfb      	ldrb	r3, [r7, #15]
    2802:	2100      	movs	r1, #0
    2804:	4618      	mov	r0, r3
    2806:	4b1c      	ldr	r3, [pc, #112]	; (2878 <_usb_d_cb_trans_done+0xdc>)
    2808:	4798      	blx	r3
    280a:	e025      	b.n	2858 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    280c:	693b      	ldr	r3, [r7, #16]
    280e:	2205      	movs	r2, #5
    2810:	709a      	strb	r2, [r3, #2]
    2812:	e021      	b.n	2858 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    2814:	68bb      	ldr	r3, [r7, #8]
    2816:	2b02      	cmp	r3, #2
    2818:	d10e      	bne.n	2838 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    281a:	693b      	ldr	r3, [r7, #16]
    281c:	2204      	movs	r2, #4
    281e:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2820:	693b      	ldr	r3, [r7, #16]
    2822:	781b      	ldrb	r3, [r3, #0]
    2824:	2b00      	cmp	r3, #0
    2826:	d103      	bne.n	2830 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2828:	693b      	ldr	r3, [r7, #16]
    282a:	2202      	movs	r2, #2
    282c:	709a      	strb	r2, [r3, #2]
			return;
    282e:	e01a      	b.n	2866 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2830:	693b      	ldr	r3, [r7, #16]
    2832:	2201      	movs	r2, #1
    2834:	709a      	strb	r2, [r3, #2]
    2836:	e00f      	b.n	2858 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2838:	68bb      	ldr	r3, [r7, #8]
    283a:	2b03      	cmp	r3, #3
    283c:	d106      	bne.n	284c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    283e:	693b      	ldr	r3, [r7, #16]
    2840:	2200      	movs	r2, #0
    2842:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2844:	693b      	ldr	r3, [r7, #16]
    2846:	2205      	movs	r2, #5
    2848:	70da      	strb	r2, [r3, #3]
    284a:	e005      	b.n	2858 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    284c:	693b      	ldr	r3, [r7, #16]
    284e:	2206      	movs	r2, #6
    2850:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2852:	693b      	ldr	r3, [r7, #16]
    2854:	2206      	movs	r2, #6
    2856:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2858:	693b      	ldr	r3, [r7, #16]
    285a:	69db      	ldr	r3, [r3, #28]
    285c:	693a      	ldr	r2, [r7, #16]
    285e:	78d1      	ldrb	r1, [r2, #3]
    2860:	687a      	ldr	r2, [r7, #4]
    2862:	7bf8      	ldrb	r0, [r7, #15]
    2864:	4798      	blx	r3
}
    2866:	3718      	adds	r7, #24
    2868:	46bd      	mov	sp, r7
    286a:	bd80      	pop	{r7, pc}
    286c:	000024d1 	.word	0x000024d1
    2870:	20000704 	.word	0x20000704
    2874:	000026d9 	.word	0x000026d9
    2878:	00009be1 	.word	0x00009be1

0000287c <usb_d_init>:

int32_t usb_d_init(void)
{
    287c:	b580      	push	{r7, lr}
    287e:	b082      	sub	sp, #8
    2880:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    2882:	4b21      	ldr	r3, [pc, #132]	; (2908 <usb_d_init+0x8c>)
    2884:	4798      	blx	r3
    2886:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2888:	683b      	ldr	r3, [r7, #0]
    288a:	2b00      	cmp	r3, #0
    288c:	da01      	bge.n	2892 <usb_d_init+0x16>
		return rc;
    288e:	683b      	ldr	r3, [r7, #0]
    2890:	e036      	b.n	2900 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2892:	2280      	movs	r2, #128	; 0x80
    2894:	2100      	movs	r1, #0
    2896:	481d      	ldr	r0, [pc, #116]	; (290c <usb_d_init+0x90>)
    2898:	4b1d      	ldr	r3, [pc, #116]	; (2910 <usb_d_init+0x94>)
    289a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    289c:	2300      	movs	r3, #0
    289e:	71fb      	strb	r3, [r7, #7]
    28a0:	e01e      	b.n	28e0 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    28a2:	79fb      	ldrb	r3, [r7, #7]
    28a4:	4a19      	ldr	r2, [pc, #100]	; (290c <usb_d_init+0x90>)
    28a6:	015b      	lsls	r3, r3, #5
    28a8:	4413      	add	r3, r2
    28aa:	3301      	adds	r3, #1
    28ac:	22ff      	movs	r2, #255	; 0xff
    28ae:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    28b0:	79fb      	ldrb	r3, [r7, #7]
    28b2:	4a16      	ldr	r2, [pc, #88]	; (290c <usb_d_init+0x90>)
    28b4:	015b      	lsls	r3, r3, #5
    28b6:	4413      	add	r3, r2
    28b8:	3314      	adds	r3, #20
    28ba:	4a16      	ldr	r2, [pc, #88]	; (2914 <usb_d_init+0x98>)
    28bc:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    28be:	79fb      	ldrb	r3, [r7, #7]
    28c0:	4a12      	ldr	r2, [pc, #72]	; (290c <usb_d_init+0x90>)
    28c2:	015b      	lsls	r3, r3, #5
    28c4:	4413      	add	r3, r2
    28c6:	3318      	adds	r3, #24
    28c8:	4a12      	ldr	r2, [pc, #72]	; (2914 <usb_d_init+0x98>)
    28ca:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    28cc:	79fb      	ldrb	r3, [r7, #7]
    28ce:	4a0f      	ldr	r2, [pc, #60]	; (290c <usb_d_init+0x90>)
    28d0:	015b      	lsls	r3, r3, #5
    28d2:	4413      	add	r3, r2
    28d4:	331c      	adds	r3, #28
    28d6:	4a0f      	ldr	r2, [pc, #60]	; (2914 <usb_d_init+0x98>)
    28d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    28da:	79fb      	ldrb	r3, [r7, #7]
    28dc:	3301      	adds	r3, #1
    28de:	71fb      	strb	r3, [r7, #7]
    28e0:	79fb      	ldrb	r3, [r7, #7]
    28e2:	2b03      	cmp	r3, #3
    28e4:	d9dd      	bls.n	28a2 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    28e6:	490c      	ldr	r1, [pc, #48]	; (2918 <usb_d_init+0x9c>)
    28e8:	2000      	movs	r0, #0
    28ea:	4b0c      	ldr	r3, [pc, #48]	; (291c <usb_d_init+0xa0>)
    28ec:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    28ee:	490c      	ldr	r1, [pc, #48]	; (2920 <usb_d_init+0xa4>)
    28f0:	2001      	movs	r0, #1
    28f2:	4b0a      	ldr	r3, [pc, #40]	; (291c <usb_d_init+0xa0>)
    28f4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    28f6:	490b      	ldr	r1, [pc, #44]	; (2924 <usb_d_init+0xa8>)
    28f8:	2002      	movs	r0, #2
    28fa:	4b08      	ldr	r3, [pc, #32]	; (291c <usb_d_init+0xa0>)
    28fc:	4798      	blx	r3
	return ERR_NONE;
    28fe:	2300      	movs	r3, #0
}
    2900:	4618      	mov	r0, r3
    2902:	3708      	adds	r7, #8
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}
    2908:	00009429 	.word	0x00009429
    290c:	20000704 	.word	0x20000704
    2910:	0000cd59 	.word	0x0000cd59
    2914:	000025a5 	.word	0x000025a5
    2918:	000025c1 	.word	0x000025c1
    291c:	0000a01d 	.word	0x0000a01d
    2920:	00002689 	.word	0x00002689
    2924:	0000279d 	.word	0x0000279d

00002928 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2928:	b580      	push	{r7, lr}
    292a:	b082      	sub	sp, #8
    292c:	af00      	add	r7, sp, #0
    292e:	4603      	mov	r3, r0
    2930:	6039      	str	r1, [r7, #0]
    2932:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2934:	79fb      	ldrb	r3, [r7, #7]
    2936:	6839      	ldr	r1, [r7, #0]
    2938:	4618      	mov	r0, r3
    293a:	4b03      	ldr	r3, [pc, #12]	; (2948 <usb_d_register_callback+0x20>)
    293c:	4798      	blx	r3
}
    293e:	bf00      	nop
    2940:	3708      	adds	r7, #8
    2942:	46bd      	mov	sp, r7
    2944:	bd80      	pop	{r7, pc}
    2946:	bf00      	nop
    2948:	00009fd5 	.word	0x00009fd5

0000294c <usb_d_enable>:

int32_t usb_d_enable(void)
{
    294c:	b580      	push	{r7, lr}
    294e:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    2950:	4b02      	ldr	r3, [pc, #8]	; (295c <usb_d_enable+0x10>)
    2952:	4798      	blx	r3
    2954:	4603      	mov	r3, r0
}
    2956:	4618      	mov	r0, r3
    2958:	bd80      	pop	{r7, pc}
    295a:	bf00      	nop
    295c:	00009519 	.word	0x00009519

00002960 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2960:	b580      	push	{r7, lr}
    2962:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    2964:	4b01      	ldr	r3, [pc, #4]	; (296c <usb_d_attach+0xc>)
    2966:	4798      	blx	r3
}
    2968:	bf00      	nop
    296a:	bd80      	pop	{r7, pc}
    296c:	0000959d 	.word	0x0000959d

00002970 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2970:	b580      	push	{r7, lr}
    2972:	b082      	sub	sp, #8
    2974:	af00      	add	r7, sp, #0
    2976:	4603      	mov	r3, r0
    2978:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    297a:	79fb      	ldrb	r3, [r7, #7]
    297c:	4618      	mov	r0, r3
    297e:	4b03      	ldr	r3, [pc, #12]	; (298c <usb_d_set_address+0x1c>)
    2980:	4798      	blx	r3
}
    2982:	bf00      	nop
    2984:	3708      	adds	r7, #8
    2986:	46bd      	mov	sp, r7
    2988:	bd80      	pop	{r7, pc}
    298a:	bf00      	nop
    298c:	000095b1 	.word	0x000095b1

00002990 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    2990:	b580      	push	{r7, lr}
    2992:	b082      	sub	sp, #8
    2994:	af00      	add	r7, sp, #0
    2996:	4603      	mov	r3, r0
    2998:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    299a:	79fb      	ldrb	r3, [r7, #7]
    299c:	b29b      	uxth	r3, r3
    299e:	461a      	mov	r2, r3
    29a0:	2100      	movs	r1, #0
    29a2:	2000      	movs	r0, #0
    29a4:	4b03      	ldr	r3, [pc, #12]	; (29b4 <usb_d_ep0_init+0x24>)
    29a6:	4798      	blx	r3
    29a8:	4603      	mov	r3, r0
}
    29aa:	4618      	mov	r0, r3
    29ac:	3708      	adds	r7, #8
    29ae:	46bd      	mov	sp, r7
    29b0:	bd80      	pop	{r7, pc}
    29b2:	bf00      	nop
    29b4:	000029b9 	.word	0x000029b9

000029b8 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    29b8:	b580      	push	{r7, lr}
    29ba:	b086      	sub	sp, #24
    29bc:	af00      	add	r7, sp, #0
    29be:	4603      	mov	r3, r0
    29c0:	71fb      	strb	r3, [r7, #7]
    29c2:	460b      	mov	r3, r1
    29c4:	71bb      	strb	r3, [r7, #6]
    29c6:	4613      	mov	r3, r2
    29c8:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    29ca:	79fb      	ldrb	r3, [r7, #7]
    29cc:	4618      	mov	r0, r3
    29ce:	4b1e      	ldr	r3, [pc, #120]	; (2a48 <usb_d_ep_init+0x90>)
    29d0:	4798      	blx	r3
    29d2:	4603      	mov	r3, r0
    29d4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    29d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    29da:	015b      	lsls	r3, r3, #5
    29dc:	4a1b      	ldr	r2, [pc, #108]	; (2a4c <usb_d_ep_init+0x94>)
    29de:	4413      	add	r3, r2
    29e0:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    29e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    29e6:	2b00      	cmp	r3, #0
    29e8:	db02      	blt.n	29f0 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    29ea:	f06f 0313 	mvn.w	r3, #19
    29ee:	e027      	b.n	2a40 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    29f0:	20ff      	movs	r0, #255	; 0xff
    29f2:	4b15      	ldr	r3, [pc, #84]	; (2a48 <usb_d_ep_init+0x90>)
    29f4:	4798      	blx	r3
    29f6:	4603      	mov	r3, r0
    29f8:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    29fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    29fe:	2b00      	cmp	r3, #0
    2a00:	da02      	bge.n	2a08 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    2a02:	f06f 0314 	mvn.w	r3, #20
    2a06:	e01b      	b.n	2a40 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    2a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2a0c:	015b      	lsls	r3, r3, #5
    2a0e:	4a0f      	ldr	r2, [pc, #60]	; (2a4c <usb_d_ep_init+0x94>)
    2a10:	4413      	add	r3, r2
    2a12:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2a14:	88ba      	ldrh	r2, [r7, #4]
    2a16:	79b9      	ldrb	r1, [r7, #6]
    2a18:	79fb      	ldrb	r3, [r7, #7]
    2a1a:	4618      	mov	r0, r3
    2a1c:	4b0c      	ldr	r3, [pc, #48]	; (2a50 <usb_d_ep_init+0x98>)
    2a1e:	4798      	blx	r3
    2a20:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2a22:	68fb      	ldr	r3, [r7, #12]
    2a24:	2b00      	cmp	r3, #0
    2a26:	da01      	bge.n	2a2c <usb_d_ep_init+0x74>
		return rc;
    2a28:	68fb      	ldr	r3, [r7, #12]
    2a2a:	e009      	b.n	2a40 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    2a2c:	693b      	ldr	r3, [r7, #16]
    2a2e:	79fa      	ldrb	r2, [r7, #7]
    2a30:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2a32:	79bb      	ldrb	r3, [r7, #6]
    2a34:	f003 0303 	and.w	r3, r3, #3
    2a38:	b2da      	uxtb	r2, r3
    2a3a:	693b      	ldr	r3, [r7, #16]
    2a3c:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    2a3e:	2300      	movs	r3, #0
}
    2a40:	4618      	mov	r0, r3
    2a42:	3718      	adds	r7, #24
    2a44:	46bd      	mov	sp, r7
    2a46:	bd80      	pop	{r7, pc}
    2a48:	000024d1 	.word	0x000024d1
    2a4c:	20000704 	.word	0x20000704
    2a50:	00009651 	.word	0x00009651

00002a54 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2a54:	b580      	push	{r7, lr}
    2a56:	b084      	sub	sp, #16
    2a58:	af00      	add	r7, sp, #0
    2a5a:	4603      	mov	r3, r0
    2a5c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2a5e:	79fb      	ldrb	r3, [r7, #7]
    2a60:	4618      	mov	r0, r3
    2a62:	4b0d      	ldr	r3, [pc, #52]	; (2a98 <usb_d_ep_deinit+0x44>)
    2a64:	4798      	blx	r3
    2a66:	4603      	mov	r3, r0
    2a68:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2a6e:	015b      	lsls	r3, r3, #5
    2a70:	4a0a      	ldr	r2, [pc, #40]	; (2a9c <usb_d_ep_deinit+0x48>)
    2a72:	4413      	add	r3, r2
    2a74:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    2a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2a7a:	2b00      	cmp	r3, #0
    2a7c:	db07      	blt.n	2a8e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2a7e:	79fb      	ldrb	r3, [r7, #7]
    2a80:	4618      	mov	r0, r3
    2a82:	4b07      	ldr	r3, [pc, #28]	; (2aa0 <usb_d_ep_deinit+0x4c>)
    2a84:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2a86:	68bb      	ldr	r3, [r7, #8]
    2a88:	22ff      	movs	r2, #255	; 0xff
    2a8a:	705a      	strb	r2, [r3, #1]
    2a8c:	e000      	b.n	2a90 <usb_d_ep_deinit+0x3c>
		return;
    2a8e:	bf00      	nop
}
    2a90:	3710      	adds	r7, #16
    2a92:	46bd      	mov	sp, r7
    2a94:	bd80      	pop	{r7, pc}
    2a96:	bf00      	nop
    2a98:	000024d1 	.word	0x000024d1
    2a9c:	20000704 	.word	0x20000704
    2aa0:	00009785 	.word	0x00009785

00002aa4 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2aa4:	b580      	push	{r7, lr}
    2aa6:	b086      	sub	sp, #24
    2aa8:	af00      	add	r7, sp, #0
    2aaa:	4603      	mov	r3, r0
    2aac:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2aae:	79fb      	ldrb	r3, [r7, #7]
    2ab0:	4618      	mov	r0, r3
    2ab2:	4b15      	ldr	r3, [pc, #84]	; (2b08 <usb_d_ep_enable+0x64>)
    2ab4:	4798      	blx	r3
    2ab6:	4603      	mov	r3, r0
    2ab8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2aba:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2abe:	015b      	lsls	r3, r3, #5
    2ac0:	4a12      	ldr	r2, [pc, #72]	; (2b0c <usb_d_ep_enable+0x68>)
    2ac2:	4413      	add	r3, r2
    2ac4:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2ac6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2aca:	2b00      	cmp	r3, #0
    2acc:	da02      	bge.n	2ad4 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    2ace:	f06f 0311 	mvn.w	r3, #17
    2ad2:	e014      	b.n	2afe <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2ad4:	693b      	ldr	r3, [r7, #16]
    2ad6:	781b      	ldrb	r3, [r3, #0]
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d101      	bne.n	2ae0 <usb_d_ep_enable+0x3c>
    2adc:	2202      	movs	r2, #2
    2ade:	e000      	b.n	2ae2 <usb_d_ep_enable+0x3e>
    2ae0:	2201      	movs	r2, #1
    2ae2:	693b      	ldr	r3, [r7, #16]
    2ae4:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    2ae6:	79fb      	ldrb	r3, [r7, #7]
    2ae8:	4618      	mov	r0, r3
    2aea:	4b09      	ldr	r3, [pc, #36]	; (2b10 <usb_d_ep_enable+0x6c>)
    2aec:	4798      	blx	r3
    2aee:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2af0:	68fb      	ldr	r3, [r7, #12]
    2af2:	2b00      	cmp	r3, #0
    2af4:	da02      	bge.n	2afc <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2af6:	693b      	ldr	r3, [r7, #16]
    2af8:	2200      	movs	r2, #0
    2afa:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    2afc:	68fb      	ldr	r3, [r7, #12]
}
    2afe:	4618      	mov	r0, r3
    2b00:	3718      	adds	r7, #24
    2b02:	46bd      	mov	sp, r7
    2b04:	bd80      	pop	{r7, pc}
    2b06:	bf00      	nop
    2b08:	000024d1 	.word	0x000024d1
    2b0c:	20000704 	.word	0x20000704
    2b10:	00009869 	.word	0x00009869

00002b14 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2b14:	b590      	push	{r4, r7, lr}
    2b16:	b08d      	sub	sp, #52	; 0x34
    2b18:	af02      	add	r7, sp, #8
    2b1a:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2b1c:	687b      	ldr	r3, [r7, #4]
    2b1e:	7a1b      	ldrb	r3, [r3, #8]
    2b20:	4618      	mov	r0, r3
    2b22:	4b51      	ldr	r3, [pc, #324]	; (2c68 <usb_d_ep_transfer+0x154>)
    2b24:	4798      	blx	r3
    2b26:	4603      	mov	r3, r0
    2b28:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    2b2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2b2e:	015b      	lsls	r3, r3, #5
    2b30:	4a4e      	ldr	r2, [pc, #312]	; (2c6c <usb_d_ep_transfer+0x158>)
    2b32:	4413      	add	r3, r2
    2b34:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2b36:	687b      	ldr	r3, [r7, #4]
    2b38:	7a1b      	ldrb	r3, [r3, #8]
    2b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2b3e:	2b00      	cmp	r3, #0
    2b40:	bf14      	ite	ne
    2b42:	2301      	movne	r3, #1
    2b44:	2300      	moveq	r3, #0
    2b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2b4a:	687b      	ldr	r3, [r7, #4]
    2b4c:	7a5b      	ldrb	r3, [r3, #9]
    2b4e:	2b00      	cmp	r3, #0
    2b50:	bf14      	ite	ne
    2b52:	2301      	movne	r3, #1
    2b54:	2300      	moveq	r3, #0
    2b56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	685b      	ldr	r3, [r3, #4]
    2b5e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2b60:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2b64:	2b00      	cmp	r3, #0
    2b66:	da02      	bge.n	2b6e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    2b68:	f06f 0311 	mvn.w	r3, #17
    2b6c:	e077      	b.n	2c5e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    2b6e:	f107 0308 	add.w	r3, r7, #8
    2b72:	4618      	mov	r0, r3
    2b74:	4b3e      	ldr	r3, [pc, #248]	; (2c70 <usb_d_ep_transfer+0x15c>)
    2b76:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2b78:	69bb      	ldr	r3, [r7, #24]
    2b7a:	789b      	ldrb	r3, [r3, #2]
    2b7c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    2b7e:	7bfb      	ldrb	r3, [r7, #15]
    2b80:	b2db      	uxtb	r3, r3
    2b82:	2b01      	cmp	r3, #1
    2b84:	d10c      	bne.n	2ba0 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2b86:	69bb      	ldr	r3, [r7, #24]
    2b88:	2203      	movs	r2, #3
    2b8a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2b8c:	f107 0308 	add.w	r3, r7, #8
    2b90:	4618      	mov	r0, r3
    2b92:	4b38      	ldr	r3, [pc, #224]	; (2c74 <usb_d_ep_transfer+0x160>)
    2b94:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2b96:	69bb      	ldr	r3, [r7, #24]
    2b98:	781b      	ldrb	r3, [r3, #0]
    2b9a:	2b00      	cmp	r3, #0
    2b9c:	d151      	bne.n	2c42 <usb_d_ep_transfer+0x12e>
    2b9e:	e017      	b.n	2bd0 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    2ba0:	f107 0308 	add.w	r3, r7, #8
    2ba4:	4618      	mov	r0, r3
    2ba6:	4b33      	ldr	r3, [pc, #204]	; (2c74 <usb_d_ep_transfer+0x160>)
    2ba8:	4798      	blx	r3
		switch (state) {
    2baa:	7bfb      	ldrb	r3, [r7, #15]
    2bac:	b2db      	uxtb	r3, r3
    2bae:	2b05      	cmp	r3, #5
    2bb0:	d004      	beq.n	2bbc <usb_d_ep_transfer+0xa8>
    2bb2:	2b06      	cmp	r3, #6
    2bb4:	d004      	beq.n	2bc0 <usb_d_ep_transfer+0xac>
    2bb6:	2b00      	cmp	r3, #0
    2bb8:	d005      	beq.n	2bc6 <usb_d_ep_transfer+0xb2>
    2bba:	e007      	b.n	2bcc <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    2bbc:	2302      	movs	r3, #2
    2bbe:	e04e      	b.n	2c5e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    2bc0:	f06f 030f 	mvn.w	r3, #15
    2bc4:	e04b      	b.n	2c5e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    2bc6:	f06f 0312 	mvn.w	r3, #18
    2bca:	e048      	b.n	2c5e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    2bcc:	2301      	movs	r3, #1
    2bce:	e046      	b.n	2c5e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2bd0:	69bb      	ldr	r3, [r7, #24]
    2bd2:	7c9b      	ldrb	r3, [r3, #18]
    2bd4:	b29a      	uxth	r2, r3
    2bd6:	69bb      	ldr	r3, [r7, #24]
    2bd8:	7cdb      	ldrb	r3, [r3, #19]
    2bda:	b29b      	uxth	r3, r3
    2bdc:	021b      	lsls	r3, r3, #8
    2bde:	b29b      	uxth	r3, r3
    2be0:	4413      	add	r3, r2
    2be2:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    2be4:	8afb      	ldrh	r3, [r7, #22]
    2be6:	2b00      	cmp	r3, #0
    2be8:	d10b      	bne.n	2c02 <usb_d_ep_transfer+0xee>
			dir                 = true;
    2bea:	2301      	movs	r3, #1
    2bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    2bf0:	2300      	movs	r3, #0
    2bf2:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    2bf4:	2301      	movs	r3, #1
    2bf6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2bfa:	69bb      	ldr	r3, [r7, #24]
    2bfc:	2204      	movs	r2, #4
    2bfe:	709a      	strb	r2, [r3, #2]
    2c00:	e01f      	b.n	2c42 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2c02:	69bb      	ldr	r3, [r7, #24]
    2c04:	7b1b      	ldrb	r3, [r3, #12]
    2c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2c0a:	2b00      	cmp	r3, #0
    2c0c:	bf14      	ite	ne
    2c0e:	2301      	movne	r3, #1
    2c10:	2300      	moveq	r3, #0
    2c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    2c16:	8afa      	ldrh	r2, [r7, #22]
    2c18:	6a3b      	ldr	r3, [r7, #32]
    2c1a:	429a      	cmp	r2, r3
    2c1c:	d201      	bcs.n	2c22 <usb_d_ep_transfer+0x10e>
				len = req_len;
    2c1e:	8afb      	ldrh	r3, [r7, #22]
    2c20:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    2c22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2c26:	2b00      	cmp	r3, #0
    2c28:	d008      	beq.n	2c3c <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    2c2a:	8afa      	ldrh	r2, [r7, #22]
    2c2c:	6a3b      	ldr	r3, [r7, #32]
    2c2e:	429a      	cmp	r2, r3
    2c30:	bf8c      	ite	hi
    2c32:	2301      	movhi	r3, #1
    2c34:	2300      	movls	r3, #0
    2c36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    2c3a:	e002      	b.n	2c42 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    2c3c:	2300      	movs	r3, #0
    2c3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2c42:	687b      	ldr	r3, [r7, #4]
    2c44:	7a18      	ldrb	r0, [r3, #8]
    2c46:	687b      	ldr	r3, [r7, #4]
    2c48:	681a      	ldr	r2, [r3, #0]
    2c4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    2c4e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    2c52:	9300      	str	r3, [sp, #0]
    2c54:	6a3b      	ldr	r3, [r7, #32]
    2c56:	4c08      	ldr	r4, [pc, #32]	; (2c78 <usb_d_ep_transfer+0x164>)
    2c58:	47a0      	blx	r4
    2c5a:	6138      	str	r0, [r7, #16]
	return rc;
    2c5c:	693b      	ldr	r3, [r7, #16]
}
    2c5e:	4618      	mov	r0, r3
    2c60:	372c      	adds	r7, #44	; 0x2c
    2c62:	46bd      	mov	sp, r7
    2c64:	bd90      	pop	{r4, r7, pc}
    2c66:	bf00      	nop
    2c68:	000024d1 	.word	0x000024d1
    2c6c:	20000704 	.word	0x20000704
    2c70:	0000a789 	.word	0x0000a789
    2c74:	0000a7af 	.word	0x0000a7af
    2c78:	00002551 	.word	0x00002551

00002c7c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    2c7c:	b580      	push	{r7, lr}
    2c7e:	b086      	sub	sp, #24
    2c80:	af00      	add	r7, sp, #0
    2c82:	4603      	mov	r3, r0
    2c84:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2c86:	79fb      	ldrb	r3, [r7, #7]
    2c88:	4618      	mov	r0, r3
    2c8a:	4b1a      	ldr	r3, [pc, #104]	; (2cf4 <_usb_d_ep_halt_clr+0x78>)
    2c8c:	4798      	blx	r3
    2c8e:	4603      	mov	r3, r0
    2c90:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2c92:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2c96:	015b      	lsls	r3, r3, #5
    2c98:	4a17      	ldr	r2, [pc, #92]	; (2cf8 <_usb_d_ep_halt_clr+0x7c>)
    2c9a:	4413      	add	r3, r2
    2c9c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2c9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2ca2:	2b00      	cmp	r3, #0
    2ca4:	da02      	bge.n	2cac <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    2ca6:	f06f 0311 	mvn.w	r3, #17
    2caa:	e01f      	b.n	2cec <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2cac:	79fb      	ldrb	r3, [r7, #7]
    2cae:	2102      	movs	r1, #2
    2cb0:	4618      	mov	r0, r3
    2cb2:	4b12      	ldr	r3, [pc, #72]	; (2cfc <_usb_d_ep_halt_clr+0x80>)
    2cb4:	4798      	blx	r3
    2cb6:	4603      	mov	r3, r0
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d016      	beq.n	2cea <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2cbc:	79fb      	ldrb	r3, [r7, #7]
    2cbe:	2100      	movs	r1, #0
    2cc0:	4618      	mov	r0, r3
    2cc2:	4b0e      	ldr	r3, [pc, #56]	; (2cfc <_usb_d_ep_halt_clr+0x80>)
    2cc4:	4798      	blx	r3
    2cc6:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    2cc8:	68fb      	ldr	r3, [r7, #12]
    2cca:	2b00      	cmp	r3, #0
    2ccc:	da01      	bge.n	2cd2 <_usb_d_ep_halt_clr+0x56>
			return rc;
    2cce:	68fb      	ldr	r3, [r7, #12]
    2cd0:	e00c      	b.n	2cec <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2cd2:	693b      	ldr	r3, [r7, #16]
    2cd4:	2201      	movs	r2, #1
    2cd6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2cd8:	693b      	ldr	r3, [r7, #16]
    2cda:	2203      	movs	r2, #3
    2cdc:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2cde:	693b      	ldr	r3, [r7, #16]
    2ce0:	69db      	ldr	r3, [r3, #28]
    2ce2:	79f8      	ldrb	r0, [r7, #7]
    2ce4:	2200      	movs	r2, #0
    2ce6:	2103      	movs	r1, #3
    2ce8:	4798      	blx	r3
	}
	return ERR_NONE;
    2cea:	2300      	movs	r3, #0
}
    2cec:	4618      	mov	r0, r3
    2cee:	3718      	adds	r7, #24
    2cf0:	46bd      	mov	sp, r7
    2cf2:	bd80      	pop	{r7, pc}
    2cf4:	000024d1 	.word	0x000024d1
    2cf8:	20000704 	.word	0x20000704
    2cfc:	00009be1 	.word	0x00009be1

00002d00 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2d00:	b580      	push	{r7, lr}
    2d02:	b082      	sub	sp, #8
    2d04:	af00      	add	r7, sp, #0
    2d06:	4603      	mov	r3, r0
    2d08:	460a      	mov	r2, r1
    2d0a:	71fb      	strb	r3, [r7, #7]
    2d0c:	4613      	mov	r3, r2
    2d0e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    2d10:	79bb      	ldrb	r3, [r7, #6]
    2d12:	2b00      	cmp	r3, #0
    2d14:	d105      	bne.n	2d22 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    2d16:	79fb      	ldrb	r3, [r7, #7]
    2d18:	4618      	mov	r0, r3
    2d1a:	4b0c      	ldr	r3, [pc, #48]	; (2d4c <usb_d_ep_halt+0x4c>)
    2d1c:	4798      	blx	r3
    2d1e:	4603      	mov	r3, r0
    2d20:	e00f      	b.n	2d42 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    2d22:	79bb      	ldrb	r3, [r7, #6]
    2d24:	2b01      	cmp	r3, #1
    2d26:	d106      	bne.n	2d36 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2d28:	79fb      	ldrb	r3, [r7, #7]
    2d2a:	2101      	movs	r1, #1
    2d2c:	4618      	mov	r0, r3
    2d2e:	4b08      	ldr	r3, [pc, #32]	; (2d50 <usb_d_ep_halt+0x50>)
    2d30:	4798      	blx	r3
    2d32:	4603      	mov	r3, r0
    2d34:	e005      	b.n	2d42 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2d36:	79fb      	ldrb	r3, [r7, #7]
    2d38:	2102      	movs	r1, #2
    2d3a:	4618      	mov	r0, r3
    2d3c:	4b04      	ldr	r3, [pc, #16]	; (2d50 <usb_d_ep_halt+0x50>)
    2d3e:	4798      	blx	r3
    2d40:	4603      	mov	r3, r0
	}
}
    2d42:	4618      	mov	r0, r3
    2d44:	3708      	adds	r7, #8
    2d46:	46bd      	mov	sp, r7
    2d48:	bd80      	pop	{r7, pc}
    2d4a:	bf00      	nop
    2d4c:	00002c7d 	.word	0x00002c7d
    2d50:	00009be1 	.word	0x00009be1

00002d54 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2d54:	b580      	push	{r7, lr}
    2d56:	b086      	sub	sp, #24
    2d58:	af00      	add	r7, sp, #0
    2d5a:	4603      	mov	r3, r0
    2d5c:	603a      	str	r2, [r7, #0]
    2d5e:	71fb      	strb	r3, [r7, #7]
    2d60:	460b      	mov	r3, r1
    2d62:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d64:	79fb      	ldrb	r3, [r7, #7]
    2d66:	4618      	mov	r0, r3
    2d68:	4b16      	ldr	r3, [pc, #88]	; (2dc4 <usb_d_ep_register_callback+0x70>)
    2d6a:	4798      	blx	r3
    2d6c:	4603      	mov	r3, r0
    2d6e:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2d74:	015b      	lsls	r3, r3, #5
    2d76:	4a14      	ldr	r2, [pc, #80]	; (2dc8 <usb_d_ep_register_callback+0x74>)
    2d78:	4413      	add	r3, r2
    2d7a:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2d7c:	683b      	ldr	r3, [r7, #0]
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d001      	beq.n	2d86 <usb_d_ep_register_callback+0x32>
    2d82:	683b      	ldr	r3, [r7, #0]
    2d84:	e000      	b.n	2d88 <usb_d_ep_register_callback+0x34>
    2d86:	4b11      	ldr	r3, [pc, #68]	; (2dcc <usb_d_ep_register_callback+0x78>)
    2d88:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    2d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2d8e:	2b00      	cmp	r3, #0
    2d90:	db13      	blt.n	2dba <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    2d92:	79bb      	ldrb	r3, [r7, #6]
    2d94:	2b01      	cmp	r3, #1
    2d96:	d008      	beq.n	2daa <usb_d_ep_register_callback+0x56>
    2d98:	2b02      	cmp	r3, #2
    2d9a:	d00a      	beq.n	2db2 <usb_d_ep_register_callback+0x5e>
    2d9c:	2b00      	cmp	r3, #0
    2d9e:	d000      	beq.n	2da2 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    2da0:	e00c      	b.n	2dbc <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2da2:	693b      	ldr	r3, [r7, #16]
    2da4:	68fa      	ldr	r2, [r7, #12]
    2da6:	615a      	str	r2, [r3, #20]
		break;
    2da8:	e008      	b.n	2dbc <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2daa:	693b      	ldr	r3, [r7, #16]
    2dac:	68fa      	ldr	r2, [r7, #12]
    2dae:	619a      	str	r2, [r3, #24]
		break;
    2db0:	e004      	b.n	2dbc <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2db2:	693b      	ldr	r3, [r7, #16]
    2db4:	68fa      	ldr	r2, [r7, #12]
    2db6:	61da      	str	r2, [r3, #28]
		break;
    2db8:	e000      	b.n	2dbc <usb_d_ep_register_callback+0x68>
		return;
    2dba:	bf00      	nop
	}
}
    2dbc:	3718      	adds	r7, #24
    2dbe:	46bd      	mov	sp, r7
    2dc0:	bd80      	pop	{r7, pc}
    2dc2:	bf00      	nop
    2dc4:	000024d1 	.word	0x000024d1
    2dc8:	20000704 	.word	0x20000704
    2dcc:	000025a5 	.word	0x000025a5

00002dd0 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    2dd0:	b480      	push	{r7}
    2dd2:	b085      	sub	sp, #20
    2dd4:	af00      	add	r7, sp, #0
    2dd6:	4603      	mov	r3, r0
    2dd8:	60b9      	str	r1, [r7, #8]
    2dda:	607a      	str	r2, [r7, #4]
    2ddc:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    2dde:	7bfb      	ldrb	r3, [r7, #15]
    2de0:	f083 0301 	eor.w	r3, r3, #1
    2de4:	b2db      	uxtb	r3, r3
    2de6:	2b00      	cmp	r3, #0
    2de8:	d000      	beq.n	2dec <assert+0x1c>
		__asm("BKPT #0");
    2dea:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2dec:	bf00      	nop
    2dee:	3714      	adds	r7, #20
    2df0:	46bd      	mov	sp, r7
    2df2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2df6:	4770      	bx	lr

00002df8 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    2df8:	b480      	push	{r7}
    2dfa:	b085      	sub	sp, #20
    2dfc:	af00      	add	r7, sp, #0
    2dfe:	6078      	str	r0, [r7, #4]
    2e00:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2e02:	687b      	ldr	r3, [r7, #4]
    2e04:	681b      	ldr	r3, [r3, #0]
    2e06:	60fb      	str	r3, [r7, #12]
    2e08:	e008      	b.n	2e1c <is_list_element+0x24>
		if (it == element) {
    2e0a:	68fa      	ldr	r2, [r7, #12]
    2e0c:	683b      	ldr	r3, [r7, #0]
    2e0e:	429a      	cmp	r2, r3
    2e10:	d101      	bne.n	2e16 <is_list_element+0x1e>
			return true;
    2e12:	2301      	movs	r3, #1
    2e14:	e006      	b.n	2e24 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    2e16:	68fb      	ldr	r3, [r7, #12]
    2e18:	681b      	ldr	r3, [r3, #0]
    2e1a:	60fb      	str	r3, [r7, #12]
    2e1c:	68fb      	ldr	r3, [r7, #12]
    2e1e:	2b00      	cmp	r3, #0
    2e20:	d1f3      	bne.n	2e0a <is_list_element+0x12>
		}
	}

	return false;
    2e22:	2300      	movs	r3, #0
}
    2e24:	4618      	mov	r0, r3
    2e26:	3714      	adds	r7, #20
    2e28:	46bd      	mov	sp, r7
    2e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e2e:	4770      	bx	lr

00002e30 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2e30:	b580      	push	{r7, lr}
    2e32:	b082      	sub	sp, #8
    2e34:	af00      	add	r7, sp, #0
    2e36:	6078      	str	r0, [r7, #4]
    2e38:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    2e3a:	6839      	ldr	r1, [r7, #0]
    2e3c:	6878      	ldr	r0, [r7, #4]
    2e3e:	4b0f      	ldr	r3, [pc, #60]	; (2e7c <list_insert_as_head+0x4c>)
    2e40:	4798      	blx	r3
    2e42:	4603      	mov	r3, r0
    2e44:	2b00      	cmp	r3, #0
    2e46:	bf14      	ite	ne
    2e48:	2301      	movne	r3, #1
    2e4a:	2300      	moveq	r3, #0
    2e4c:	b2db      	uxtb	r3, r3
    2e4e:	f083 0301 	eor.w	r3, r3, #1
    2e52:	b2db      	uxtb	r3, r3
    2e54:	f003 0301 	and.w	r3, r3, #1
    2e58:	b2db      	uxtb	r3, r3
    2e5a:	2239      	movs	r2, #57	; 0x39
    2e5c:	4908      	ldr	r1, [pc, #32]	; (2e80 <list_insert_as_head+0x50>)
    2e5e:	4618      	mov	r0, r3
    2e60:	4b08      	ldr	r3, [pc, #32]	; (2e84 <list_insert_as_head+0x54>)
    2e62:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2e64:	687b      	ldr	r3, [r7, #4]
    2e66:	681a      	ldr	r2, [r3, #0]
    2e68:	683b      	ldr	r3, [r7, #0]
    2e6a:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    2e6c:	687b      	ldr	r3, [r7, #4]
    2e6e:	683a      	ldr	r2, [r7, #0]
    2e70:	601a      	str	r2, [r3, #0]
}
    2e72:	bf00      	nop
    2e74:	3708      	adds	r7, #8
    2e76:	46bd      	mov	sp, r7
    2e78:	bd80      	pop	{r7, pc}
    2e7a:	bf00      	nop
    2e7c:	00002df9 	.word	0x00002df9
    2e80:	0000d024 	.word	0x0000d024
    2e84:	00002dd1 	.word	0x00002dd1

00002e88 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    2e88:	b480      	push	{r7}
    2e8a:	b083      	sub	sp, #12
    2e8c:	af00      	add	r7, sp, #0
    2e8e:	6078      	str	r0, [r7, #4]
    2e90:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2e92:	687b      	ldr	r3, [r7, #4]
    2e94:	681a      	ldr	r2, [r3, #0]
    2e96:	683b      	ldr	r3, [r7, #0]
    2e98:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2e9a:	687b      	ldr	r3, [r7, #4]
    2e9c:	683a      	ldr	r2, [r7, #0]
    2e9e:	601a      	str	r2, [r3, #0]
}
    2ea0:	bf00      	nop
    2ea2:	370c      	adds	r7, #12
    2ea4:	46bd      	mov	sp, r7
    2ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2eaa:	4770      	bx	lr

00002eac <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2eac:	b580      	push	{r7, lr}
    2eae:	b084      	sub	sp, #16
    2eb0:	af00      	add	r7, sp, #0
    2eb2:	6078      	str	r0, [r7, #4]
    2eb4:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    2eb6:	687b      	ldr	r3, [r7, #4]
    2eb8:	681b      	ldr	r3, [r3, #0]
    2eba:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    2ebc:	6839      	ldr	r1, [r7, #0]
    2ebe:	6878      	ldr	r0, [r7, #4]
    2ec0:	4b16      	ldr	r3, [pc, #88]	; (2f1c <list_insert_at_end+0x70>)
    2ec2:	4798      	blx	r3
    2ec4:	4603      	mov	r3, r0
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	bf14      	ite	ne
    2eca:	2301      	movne	r3, #1
    2ecc:	2300      	moveq	r3, #0
    2ece:	b2db      	uxtb	r3, r3
    2ed0:	f083 0301 	eor.w	r3, r3, #1
    2ed4:	b2db      	uxtb	r3, r3
    2ed6:	f003 0301 	and.w	r3, r3, #1
    2eda:	b2db      	uxtb	r3, r3
    2edc:	224f      	movs	r2, #79	; 0x4f
    2ede:	4910      	ldr	r1, [pc, #64]	; (2f20 <list_insert_at_end+0x74>)
    2ee0:	4618      	mov	r0, r3
    2ee2:	4b10      	ldr	r3, [pc, #64]	; (2f24 <list_insert_at_end+0x78>)
    2ee4:	4798      	blx	r3

	if (!list->head) {
    2ee6:	687b      	ldr	r3, [r7, #4]
    2ee8:	681b      	ldr	r3, [r3, #0]
    2eea:	2b00      	cmp	r3, #0
    2eec:	d109      	bne.n	2f02 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    2eee:	687b      	ldr	r3, [r7, #4]
    2ef0:	683a      	ldr	r2, [r7, #0]
    2ef2:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    2ef4:	683b      	ldr	r3, [r7, #0]
    2ef6:	2200      	movs	r2, #0
    2ef8:	601a      	str	r2, [r3, #0]
		return;
    2efa:	e00c      	b.n	2f16 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    2efc:	68fb      	ldr	r3, [r7, #12]
    2efe:	681b      	ldr	r3, [r3, #0]
    2f00:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    2f02:	68fb      	ldr	r3, [r7, #12]
    2f04:	681b      	ldr	r3, [r3, #0]
    2f06:	2b00      	cmp	r3, #0
    2f08:	d1f8      	bne.n	2efc <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    2f0a:	68fb      	ldr	r3, [r7, #12]
    2f0c:	683a      	ldr	r2, [r7, #0]
    2f0e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    2f10:	683b      	ldr	r3, [r7, #0]
    2f12:	2200      	movs	r2, #0
    2f14:	601a      	str	r2, [r3, #0]
}
    2f16:	3710      	adds	r7, #16
    2f18:	46bd      	mov	sp, r7
    2f1a:	bd80      	pop	{r7, pc}
    2f1c:	00002df9 	.word	0x00002df9
    2f20:	0000d024 	.word	0x0000d024
    2f24:	00002dd1 	.word	0x00002dd1

00002f28 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    2f28:	b480      	push	{r7}
    2f2a:	b085      	sub	sp, #20
    2f2c:	af00      	add	r7, sp, #0
    2f2e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    2f30:	687b      	ldr	r3, [r7, #4]
    2f32:	681b      	ldr	r3, [r3, #0]
    2f34:	2b00      	cmp	r3, #0
    2f36:	d009      	beq.n	2f4c <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    2f38:	687b      	ldr	r3, [r7, #4]
    2f3a:	681b      	ldr	r3, [r3, #0]
    2f3c:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    2f3e:	687b      	ldr	r3, [r7, #4]
    2f40:	681b      	ldr	r3, [r3, #0]
    2f42:	681a      	ldr	r2, [r3, #0]
    2f44:	687b      	ldr	r3, [r7, #4]
    2f46:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    2f48:	68fb      	ldr	r3, [r7, #12]
    2f4a:	e000      	b.n	2f4e <list_remove_head+0x26>
	}

	return NULL;
    2f4c:	2300      	movs	r3, #0
}
    2f4e:	4618      	mov	r0, r3
    2f50:	3714      	adds	r7, #20
    2f52:	46bd      	mov	sp, r7
    2f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f58:	4770      	bx	lr
	...

00002f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    2f5c:	b480      	push	{r7}
    2f5e:	b083      	sub	sp, #12
    2f60:	af00      	add	r7, sp, #0
    2f62:	4603      	mov	r3, r0
    2f64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2f6a:	2b00      	cmp	r3, #0
    2f6c:	db0b      	blt.n	2f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f6e:	4909      	ldr	r1, [pc, #36]	; (2f94 <__NVIC_EnableIRQ+0x38>)
    2f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2f74:	095b      	lsrs	r3, r3, #5
    2f76:	88fa      	ldrh	r2, [r7, #6]
    2f78:	f002 021f 	and.w	r2, r2, #31
    2f7c:	2001      	movs	r0, #1
    2f7e:	fa00 f202 	lsl.w	r2, r0, r2
    2f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    2f86:	bf00      	nop
    2f88:	370c      	adds	r7, #12
    2f8a:	46bd      	mov	sp, r7
    2f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f90:	4770      	bx	lr
    2f92:	bf00      	nop
    2f94:	e000e100 	.word	0xe000e100

00002f98 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    2f98:	b480      	push	{r7}
    2f9a:	b083      	sub	sp, #12
    2f9c:	af00      	add	r7, sp, #0
    2f9e:	4603      	mov	r3, r0
    2fa0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	db10      	blt.n	2fcc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2faa:	490b      	ldr	r1, [pc, #44]	; (2fd8 <__NVIC_DisableIRQ+0x40>)
    2fac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2fb0:	095b      	lsrs	r3, r3, #5
    2fb2:	88fa      	ldrh	r2, [r7, #6]
    2fb4:	f002 021f 	and.w	r2, r2, #31
    2fb8:	2001      	movs	r0, #1
    2fba:	fa00 f202 	lsl.w	r2, r0, r2
    2fbe:	3320      	adds	r3, #32
    2fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2fc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2fc8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    2fcc:	bf00      	nop
    2fce:	370c      	adds	r7, #12
    2fd0:	46bd      	mov	sp, r7
    2fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fd6:	4770      	bx	lr
    2fd8:	e000e100 	.word	0xe000e100

00002fdc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    2fdc:	b480      	push	{r7}
    2fde:	b083      	sub	sp, #12
    2fe0:	af00      	add	r7, sp, #0
    2fe2:	4603      	mov	r3, r0
    2fe4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2fea:	2b00      	cmp	r3, #0
    2fec:	db0c      	blt.n	3008 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2fee:	4909      	ldr	r1, [pc, #36]	; (3014 <__NVIC_ClearPendingIRQ+0x38>)
    2ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2ff4:	095b      	lsrs	r3, r3, #5
    2ff6:	88fa      	ldrh	r2, [r7, #6]
    2ff8:	f002 021f 	and.w	r2, r2, #31
    2ffc:	2001      	movs	r0, #1
    2ffe:	fa00 f202 	lsl.w	r2, r0, r2
    3002:	3360      	adds	r3, #96	; 0x60
    3004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3008:	bf00      	nop
    300a:	370c      	adds	r7, #12
    300c:	46bd      	mov	sp, r7
    300e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3012:	4770      	bx	lr
    3014:	e000e100 	.word	0xe000e100

00003018 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3018:	b480      	push	{r7}
    301a:	b083      	sub	sp, #12
    301c:	af00      	add	r7, sp, #0
    301e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3020:	687b      	ldr	r3, [r7, #4]
    3022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3024:	095b      	lsrs	r3, r3, #5
    3026:	f003 0301 	and.w	r3, r3, #1
    302a:	2b00      	cmp	r3, #0
    302c:	bf14      	ite	ne
    302e:	2301      	movne	r3, #1
    3030:	2300      	moveq	r3, #0
    3032:	b2db      	uxtb	r3, r3
}
    3034:	4618      	mov	r0, r3
    3036:	370c      	adds	r7, #12
    3038:	46bd      	mov	sp, r7
    303a:	f85d 7b04 	ldr.w	r7, [sp], #4
    303e:	4770      	bx	lr

00003040 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3040:	b480      	push	{r7}
    3042:	b083      	sub	sp, #12
    3044:	af00      	add	r7, sp, #0
    3046:	6078      	str	r0, [r7, #4]
    3048:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    304a:	687b      	ldr	r3, [r7, #4]
    304c:	683a      	ldr	r2, [r7, #0]
    304e:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3050:	bf00      	nop
    3052:	370c      	adds	r7, #12
    3054:	46bd      	mov	sp, r7
    3056:	f85d 7b04 	ldr.w	r7, [sp], #4
    305a:	4770      	bx	lr

0000305c <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    305c:	b480      	push	{r7}
    305e:	b083      	sub	sp, #12
    3060:	af00      	add	r7, sp, #0
    3062:	6078      	str	r0, [r7, #4]
    3064:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3066:	687b      	ldr	r3, [r7, #4]
    3068:	683a      	ldr	r2, [r7, #0]
    306a:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    306c:	bf00      	nop
    306e:	370c      	adds	r7, #12
    3070:	46bd      	mov	sp, r7
    3072:	f85d 7b04 	ldr.w	r7, [sp], #4
    3076:	4770      	bx	lr

00003078 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3078:	b480      	push	{r7}
    307a:	b083      	sub	sp, #12
    307c:	af00      	add	r7, sp, #0
    307e:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3080:	687b      	ldr	r3, [r7, #4]
    3082:	699b      	ldr	r3, [r3, #24]
    3084:	f043 0201 	orr.w	r2, r3, #1
    3088:	687b      	ldr	r3, [r7, #4]
    308a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    308c:	bf00      	nop
    308e:	370c      	adds	r7, #12
    3090:	46bd      	mov	sp, r7
    3092:	f85d 7b04 	ldr.w	r7, [sp], #4
    3096:	4770      	bx	lr

00003098 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3098:	b480      	push	{r7}
    309a:	b085      	sub	sp, #20
    309c:	af00      	add	r7, sp, #0
    309e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	699b      	ldr	r3, [r3, #24]
    30a4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    30a6:	68fb      	ldr	r3, [r7, #12]
    30a8:	f003 0301 	and.w	r3, r3, #1
    30ac:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    30ae:	68fb      	ldr	r3, [r7, #12]
    30b0:	2b00      	cmp	r3, #0
    30b2:	bf14      	ite	ne
    30b4:	2301      	movne	r3, #1
    30b6:	2300      	moveq	r3, #0
    30b8:	b2db      	uxtb	r3, r3
}
    30ba:	4618      	mov	r0, r3
    30bc:	3714      	adds	r7, #20
    30be:	46bd      	mov	sp, r7
    30c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    30c4:	4770      	bx	lr

000030c6 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    30c6:	b480      	push	{r7}
    30c8:	b083      	sub	sp, #12
    30ca:	af00      	add	r7, sp, #0
    30cc:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    30ce:	687b      	ldr	r3, [r7, #4]
    30d0:	699b      	ldr	r3, [r3, #24]
    30d2:	f023 0201 	bic.w	r2, r3, #1
    30d6:	687b      	ldr	r3, [r7, #4]
    30d8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    30da:	bf00      	nop
    30dc:	370c      	adds	r7, #12
    30de:	46bd      	mov	sp, r7
    30e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    30e4:	4770      	bx	lr

000030e6 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    30e6:	b480      	push	{r7}
    30e8:	b083      	sub	sp, #12
    30ea:	af00      	add	r7, sp, #0
    30ec:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    30ee:	687b      	ldr	r3, [r7, #4]
    30f0:	699b      	ldr	r3, [r3, #24]
    30f2:	f043 0202 	orr.w	r2, r3, #2
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    30fa:	bf00      	nop
    30fc:	370c      	adds	r7, #12
    30fe:	46bd      	mov	sp, r7
    3100:	f85d 7b04 	ldr.w	r7, [sp], #4
    3104:	4770      	bx	lr

00003106 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3106:	b480      	push	{r7}
    3108:	b083      	sub	sp, #12
    310a:	af00      	add	r7, sp, #0
    310c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    310e:	687b      	ldr	r3, [r7, #4]
    3110:	699b      	ldr	r3, [r3, #24]
    3112:	f023 0202 	bic.w	r2, r3, #2
    3116:	687b      	ldr	r3, [r7, #4]
    3118:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    311a:	bf00      	nop
    311c:	370c      	adds	r7, #12
    311e:	46bd      	mov	sp, r7
    3120:	f85d 7b04 	ldr.w	r7, [sp], #4
    3124:	4770      	bx	lr

00003126 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3126:	b480      	push	{r7}
    3128:	b083      	sub	sp, #12
    312a:	af00      	add	r7, sp, #0
    312c:	6078      	str	r0, [r7, #4]
    312e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3130:	687b      	ldr	r3, [r7, #4]
    3132:	699a      	ldr	r2, [r3, #24]
    3134:	683b      	ldr	r3, [r7, #0]
    3136:	431a      	orrs	r2, r3
    3138:	687b      	ldr	r3, [r7, #4]
    313a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    313c:	bf00      	nop
    313e:	370c      	adds	r7, #12
    3140:	46bd      	mov	sp, r7
    3142:	f85d 7b04 	ldr.w	r7, [sp], #4
    3146:	4770      	bx	lr

00003148 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3148:	b480      	push	{r7}
    314a:	b083      	sub	sp, #12
    314c:	af00      	add	r7, sp, #0
    314e:	6078      	str	r0, [r7, #4]
    3150:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3152:	687b      	ldr	r3, [r7, #4]
    3154:	683a      	ldr	r2, [r7, #0]
    3156:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3158:	bf00      	nop
    315a:	370c      	adds	r7, #12
    315c:	46bd      	mov	sp, r7
    315e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3162:	4770      	bx	lr

00003164 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3164:	b480      	push	{r7}
    3166:	b083      	sub	sp, #12
    3168:	af00      	add	r7, sp, #0
    316a:	6078      	str	r0, [r7, #4]
    316c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    316e:	687b      	ldr	r3, [r7, #4]
    3170:	683a      	ldr	r2, [r7, #0]
    3172:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3174:	bf00      	nop
    3176:	370c      	adds	r7, #12
    3178:	46bd      	mov	sp, r7
    317a:	f85d 7b04 	ldr.w	r7, [sp], #4
    317e:	4770      	bx	lr

00003180 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3180:	b480      	push	{r7}
    3182:	b083      	sub	sp, #12
    3184:	af00      	add	r7, sp, #0
    3186:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3188:	687b      	ldr	r3, [r7, #4]
    318a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    318c:	4618      	mov	r0, r3
    318e:	370c      	adds	r7, #12
    3190:	46bd      	mov	sp, r7
    3192:	f85d 7b04 	ldr.w	r7, [sp], #4
    3196:	4770      	bx	lr

00003198 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3198:	b480      	push	{r7}
    319a:	b083      	sub	sp, #12
    319c:	af00      	add	r7, sp, #0
    319e:	6078      	str	r0, [r7, #4]
    31a0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    31a2:	687b      	ldr	r3, [r7, #4]
    31a4:	683a      	ldr	r2, [r7, #0]
    31a6:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    31a8:	bf00      	nop
    31aa:	370c      	adds	r7, #12
    31ac:	46bd      	mov	sp, r7
    31ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    31b2:	4770      	bx	lr

000031b4 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    31b4:	b480      	push	{r7}
    31b6:	b083      	sub	sp, #12
    31b8:	af00      	add	r7, sp, #0
    31ba:	6078      	str	r0, [r7, #4]
    31bc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    31be:	687b      	ldr	r3, [r7, #4]
    31c0:	683a      	ldr	r2, [r7, #0]
    31c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    31c6:	bf00      	nop
    31c8:	370c      	adds	r7, #12
    31ca:	46bd      	mov	sp, r7
    31cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    31d0:	4770      	bx	lr

000031d2 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    31d2:	b480      	push	{r7}
    31d4:	b083      	sub	sp, #12
    31d6:	af00      	add	r7, sp, #0
    31d8:	6078      	str	r0, [r7, #4]
    31da:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    31dc:	687b      	ldr	r3, [r7, #4]
    31de:	683a      	ldr	r2, [r7, #0]
    31e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    31e4:	bf00      	nop
    31e6:	370c      	adds	r7, #12
    31e8:	46bd      	mov	sp, r7
    31ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    31ee:	4770      	bx	lr

000031f0 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    31f0:	b480      	push	{r7}
    31f2:	b083      	sub	sp, #12
    31f4:	af00      	add	r7, sp, #0
    31f6:	6078      	str	r0, [r7, #4]
    31f8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    31fa:	687b      	ldr	r3, [r7, #4]
    31fc:	683a      	ldr	r2, [r7, #0]
    31fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3202:	bf00      	nop
    3204:	370c      	adds	r7, #12
    3206:	46bd      	mov	sp, r7
    3208:	f85d 7b04 	ldr.w	r7, [sp], #4
    320c:	4770      	bx	lr

0000320e <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    320e:	b480      	push	{r7}
    3210:	b083      	sub	sp, #12
    3212:	af00      	add	r7, sp, #0
    3214:	6078      	str	r0, [r7, #4]
    3216:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3218:	687b      	ldr	r3, [r7, #4]
    321a:	683a      	ldr	r2, [r7, #0]
    321c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3220:	bf00      	nop
    3222:	370c      	adds	r7, #12
    3224:	46bd      	mov	sp, r7
    3226:	f85d 7b04 	ldr.w	r7, [sp], #4
    322a:	4770      	bx	lr

0000322c <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    322c:	b480      	push	{r7}
    322e:	b083      	sub	sp, #12
    3230:	af00      	add	r7, sp, #0
    3232:	6078      	str	r0, [r7, #4]
    3234:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3236:	687b      	ldr	r3, [r7, #4]
    3238:	683a      	ldr	r2, [r7, #0]
    323a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    323e:	bf00      	nop
    3240:	370c      	adds	r7, #12
    3242:	46bd      	mov	sp, r7
    3244:	f85d 7b04 	ldr.w	r7, [sp], #4
    3248:	4770      	bx	lr

0000324a <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    324a:	b480      	push	{r7}
    324c:	b083      	sub	sp, #12
    324e:	af00      	add	r7, sp, #0
    3250:	6078      	str	r0, [r7, #4]
    3252:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3254:	687b      	ldr	r3, [r7, #4]
    3256:	683a      	ldr	r2, [r7, #0]
    3258:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    325c:	bf00      	nop
    325e:	370c      	adds	r7, #12
    3260:	46bd      	mov	sp, r7
    3262:	f85d 7b04 	ldr.w	r7, [sp], #4
    3266:	4770      	bx	lr

00003268 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3268:	b480      	push	{r7}
    326a:	b083      	sub	sp, #12
    326c:	af00      	add	r7, sp, #0
    326e:	6078      	str	r0, [r7, #4]
    3270:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3272:	687b      	ldr	r3, [r7, #4]
    3274:	683a      	ldr	r2, [r7, #0]
    3276:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    327a:	bf00      	nop
    327c:	370c      	adds	r7, #12
    327e:	46bd      	mov	sp, r7
    3280:	f85d 7b04 	ldr.w	r7, [sp], #4
    3284:	4770      	bx	lr

00003286 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3286:	b480      	push	{r7}
    3288:	b083      	sub	sp, #12
    328a:	af00      	add	r7, sp, #0
    328c:	6078      	str	r0, [r7, #4]
    328e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	683a      	ldr	r2, [r7, #0]
    3294:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3298:	bf00      	nop
    329a:	370c      	adds	r7, #12
    329c:	46bd      	mov	sp, r7
    329e:	f85d 7b04 	ldr.w	r7, [sp], #4
    32a2:	4770      	bx	lr

000032a4 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    32a4:	b480      	push	{r7}
    32a6:	b083      	sub	sp, #12
    32a8:	af00      	add	r7, sp, #0
    32aa:	6078      	str	r0, [r7, #4]
    32ac:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    32ae:	687b      	ldr	r3, [r7, #4]
    32b0:	683a      	ldr	r2, [r7, #0]
    32b2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    32b6:	bf00      	nop
    32b8:	370c      	adds	r7, #12
    32ba:	46bd      	mov	sp, r7
    32bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    32c0:	4770      	bx	lr
	...

000032c4 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    32c4:	b580      	push	{r7, lr}
    32c6:	b082      	sub	sp, #8
    32c8:	af00      	add	r7, sp, #0
    32ca:	6078      	str	r0, [r7, #4]
    32cc:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    32ce:	687b      	ldr	r3, [r7, #4]
    32d0:	683a      	ldr	r2, [r7, #0]
    32d2:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    32d4:	687b      	ldr	r3, [r7, #4]
    32d6:	681b      	ldr	r3, [r3, #0]
    32d8:	4618      	mov	r0, r3
    32da:	4b56      	ldr	r3, [pc, #344]	; (3434 <_can_async_init+0x170>)
    32dc:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    32de:	bf00      	nop
    32e0:	687b      	ldr	r3, [r7, #4]
    32e2:	681b      	ldr	r3, [r3, #0]
    32e4:	4618      	mov	r0, r3
    32e6:	4b54      	ldr	r3, [pc, #336]	; (3438 <_can_async_init+0x174>)
    32e8:	4798      	blx	r3
    32ea:	4603      	mov	r3, r0
    32ec:	f083 0301 	eor.w	r3, r3, #1
    32f0:	b2db      	uxtb	r3, r3
    32f2:	2b00      	cmp	r3, #0
    32f4:	d1f4      	bne.n	32e0 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    32f6:	687b      	ldr	r3, [r7, #4]
    32f8:	681b      	ldr	r3, [r3, #0]
    32fa:	4618      	mov	r0, r3
    32fc:	4b4f      	ldr	r3, [pc, #316]	; (343c <_can_async_init+0x178>)
    32fe:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3300:	683b      	ldr	r3, [r7, #0]
    3302:	4a4f      	ldr	r2, [pc, #316]	; (3440 <_can_async_init+0x17c>)
    3304:	4293      	cmp	r3, r2
    3306:	d17c      	bne.n	3402 <_can_async_init+0x13e>
		_can1_dev    = dev;
    3308:	4a4e      	ldr	r2, [pc, #312]	; (3444 <_can_async_init+0x180>)
    330a:	687b      	ldr	r3, [r7, #4]
    330c:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    330e:	687b      	ldr	r3, [r7, #4]
    3310:	4a4d      	ldr	r2, [pc, #308]	; (3448 <_can_async_init+0x184>)
    3312:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3314:	687b      	ldr	r3, [r7, #4]
    3316:	681b      	ldr	r3, [r3, #0]
    3318:	f44f 7100 	mov.w	r1, #512	; 0x200
    331c:	4618      	mov	r0, r3
    331e:	4b4b      	ldr	r3, [pc, #300]	; (344c <_can_async_init+0x188>)
    3320:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3322:	687b      	ldr	r3, [r7, #4]
    3324:	681b      	ldr	r3, [r3, #0]
    3326:	2102      	movs	r1, #2
    3328:	4618      	mov	r0, r3
    332a:	4b49      	ldr	r3, [pc, #292]	; (3450 <_can_async_init+0x18c>)
    332c:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	681b      	ldr	r3, [r3, #0]
    3332:	f640 2103 	movw	r1, #2563	; 0xa03
    3336:	4618      	mov	r0, r3
    3338:	4b46      	ldr	r3, [pc, #280]	; (3454 <_can_async_init+0x190>)
    333a:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    333c:	687b      	ldr	r3, [r7, #4]
    333e:	681b      	ldr	r3, [r3, #0]
    3340:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    3344:	4618      	mov	r0, r3
    3346:	4b44      	ldr	r3, [pc, #272]	; (3458 <_can_async_init+0x194>)
    3348:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    334a:	687b      	ldr	r3, [r7, #4]
    334c:	681a      	ldr	r2, [r3, #0]
    334e:	4b43      	ldr	r3, [pc, #268]	; (345c <_can_async_init+0x198>)
    3350:	b29b      	uxth	r3, r3
    3352:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    335a:	4619      	mov	r1, r3
    335c:	4610      	mov	r0, r2
    335e:	4b40      	ldr	r3, [pc, #256]	; (3460 <_can_async_init+0x19c>)
    3360:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3362:	687b      	ldr	r3, [r7, #4]
    3364:	681b      	ldr	r3, [r3, #0]
    3366:	2107      	movs	r1, #7
    3368:	4618      	mov	r0, r3
    336a:	4b3e      	ldr	r3, [pc, #248]	; (3464 <_can_async_init+0x1a0>)
    336c:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    336e:	687b      	ldr	r3, [r7, #4]
    3370:	681b      	ldr	r3, [r3, #0]
    3372:	2107      	movs	r1, #7
    3374:	4618      	mov	r0, r3
    3376:	4b3c      	ldr	r3, [pc, #240]	; (3468 <_can_async_init+0x1a4>)
    3378:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    337a:	687b      	ldr	r3, [r7, #4]
    337c:	681a      	ldr	r2, [r3, #0]
    337e:	4b3b      	ldr	r3, [pc, #236]	; (346c <_can_async_init+0x1a8>)
    3380:	b29b      	uxth	r3, r3
    3382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3386:	4619      	mov	r1, r3
    3388:	4610      	mov	r0, r2
    338a:	4b39      	ldr	r3, [pc, #228]	; (3470 <_can_async_init+0x1ac>)
    338c:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    338e:	687b      	ldr	r3, [r7, #4]
    3390:	681a      	ldr	r2, [r3, #0]
    3392:	4b38      	ldr	r3, [pc, #224]	; (3474 <_can_async_init+0x1b0>)
    3394:	b29b      	uxth	r3, r3
    3396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    339a:	4619      	mov	r1, r3
    339c:	4610      	mov	r0, r2
    339e:	4b36      	ldr	r3, [pc, #216]	; (3478 <_can_async_init+0x1b4>)
    33a0:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	681b      	ldr	r3, [r3, #0]
    33a6:	2108      	movs	r1, #8
    33a8:	4618      	mov	r0, r3
    33aa:	4b34      	ldr	r3, [pc, #208]	; (347c <_can_async_init+0x1b8>)
    33ac:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	681a      	ldr	r2, [r3, #0]
    33b2:	4b33      	ldr	r3, [pc, #204]	; (3480 <_can_async_init+0x1bc>)
    33b4:	b29b      	uxth	r3, r3
    33b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    33ba:	4619      	mov	r1, r3
    33bc:	4610      	mov	r0, r2
    33be:	4b31      	ldr	r3, [pc, #196]	; (3484 <_can_async_init+0x1c0>)
    33c0:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    33c2:	687b      	ldr	r3, [r7, #4]
    33c4:	681a      	ldr	r2, [r3, #0]
    33c6:	4b30      	ldr	r3, [pc, #192]	; (3488 <_can_async_init+0x1c4>)
    33c8:	b29b      	uxth	r3, r3
    33ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    33ce:	4619      	mov	r1, r3
    33d0:	4610      	mov	r0, r2
    33d2:	4b2e      	ldr	r3, [pc, #184]	; (348c <_can_async_init+0x1c8>)
    33d4:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    33d6:	687b      	ldr	r3, [r7, #4]
    33d8:	681b      	ldr	r3, [r3, #0]
    33da:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    33de:	4618      	mov	r0, r3
    33e0:	4b2b      	ldr	r3, [pc, #172]	; (3490 <_can_async_init+0x1cc>)
    33e2:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    33e4:	204f      	movs	r0, #79	; 0x4f
    33e6:	4b2b      	ldr	r3, [pc, #172]	; (3494 <_can_async_init+0x1d0>)
    33e8:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    33ea:	204f      	movs	r0, #79	; 0x4f
    33ec:	4b2a      	ldr	r3, [pc, #168]	; (3498 <_can_async_init+0x1d4>)
    33ee:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    33f0:	204f      	movs	r0, #79	; 0x4f
    33f2:	4b2a      	ldr	r3, [pc, #168]	; (349c <_can_async_init+0x1d8>)
    33f4:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    33f6:	687b      	ldr	r3, [r7, #4]
    33f8:	681b      	ldr	r3, [r3, #0]
    33fa:	2101      	movs	r1, #1
    33fc:	4618      	mov	r0, r3
    33fe:	4b28      	ldr	r3, [pc, #160]	; (34a0 <_can_async_init+0x1dc>)
    3400:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3402:	687b      	ldr	r3, [r7, #4]
    3404:	681b      	ldr	r3, [r3, #0]
    3406:	4618      	mov	r0, r3
    3408:	4b26      	ldr	r3, [pc, #152]	; (34a4 <_can_async_init+0x1e0>)
    340a:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    340c:	687b      	ldr	r3, [r7, #4]
    340e:	681b      	ldr	r3, [r3, #0]
    3410:	4618      	mov	r0, r3
    3412:	4b25      	ldr	r3, [pc, #148]	; (34a8 <_can_async_init+0x1e4>)
    3414:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3416:	bf00      	nop
    3418:	687b      	ldr	r3, [r7, #4]
    341a:	681b      	ldr	r3, [r3, #0]
    341c:	4618      	mov	r0, r3
    341e:	4b06      	ldr	r3, [pc, #24]	; (3438 <_can_async_init+0x174>)
    3420:	4798      	blx	r3
    3422:	4603      	mov	r3, r0
    3424:	2b00      	cmp	r3, #0
    3426:	d1f7      	bne.n	3418 <_can_async_init+0x154>
	};

	return ERR_NONE;
    3428:	2300      	movs	r3, #0
}
    342a:	4618      	mov	r0, r3
    342c:	3708      	adds	r7, #8
    342e:	46bd      	mov	sp, r7
    3430:	bd80      	pop	{r7, pc}
    3432:	bf00      	nop
    3434:	00003079 	.word	0x00003079
    3438:	00003099 	.word	0x00003099
    343c:	000030e7 	.word	0x000030e7
    3440:	42000400 	.word	0x42000400
    3444:	20000824 	.word	0x20000824
    3448:	20000004 	.word	0x20000004
    344c:	00003127 	.word	0x00003127
    3450:	00003041 	.word	0x00003041
    3454:	00003149 	.word	0x00003149
    3458:	0000305d 	.word	0x0000305d
    345c:	20000fc8 	.word	0x20000fc8
    3460:	0000322d 	.word	0x0000322d
    3464:	0000324b 	.word	0x0000324b
    3468:	00003287 	.word	0x00003287
    346c:	20000f80 	.word	0x20000f80
    3470:	00003269 	.word	0x00003269
    3474:	20000784 	.word	0x20000784
    3478:	000032a5 	.word	0x000032a5
    347c:	000031b5 	.word	0x000031b5
    3480:	20000794 	.word	0x20000794
    3484:	000031d3 	.word	0x000031d3
    3488:	20000814 	.word	0x20000814
    348c:	000031f1 	.word	0x000031f1
    3490:	0000320f 	.word	0x0000320f
    3494:	00002f99 	.word	0x00002f99
    3498:	00002fdd 	.word	0x00002fdd
    349c:	00002f5d 	.word	0x00002f5d
    34a0:	00003199 	.word	0x00003199
    34a4:	00003107 	.word	0x00003107
    34a8:	000030c7 	.word	0x000030c7

000034ac <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    34ac:	b590      	push	{r4, r7, lr}
    34ae:	b083      	sub	sp, #12
    34b0:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    34b2:	4b2c      	ldr	r3, [pc, #176]	; (3564 <CAN1_Handler+0xb8>)
    34b4:	681b      	ldr	r3, [r3, #0]
    34b6:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    34b8:	687b      	ldr	r3, [r7, #4]
    34ba:	681b      	ldr	r3, [r3, #0]
    34bc:	4618      	mov	r0, r3
    34be:	4b2a      	ldr	r3, [pc, #168]	; (3568 <CAN1_Handler+0xbc>)
    34c0:	4798      	blx	r3
    34c2:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    34c4:	683b      	ldr	r3, [r7, #0]
    34c6:	f003 0301 	and.w	r3, r3, #1
    34ca:	2b00      	cmp	r3, #0
    34cc:	d003      	beq.n	34d6 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	689b      	ldr	r3, [r3, #8]
    34d2:	6878      	ldr	r0, [r7, #4]
    34d4:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    34d6:	683b      	ldr	r3, [r7, #0]
    34d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    34dc:	2b00      	cmp	r3, #0
    34de:	d003      	beq.n	34e8 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    34e0:	687b      	ldr	r3, [r7, #4]
    34e2:	685b      	ldr	r3, [r3, #4]
    34e4:	6878      	ldr	r0, [r7, #4]
    34e6:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    34e8:	683b      	ldr	r3, [r7, #0]
    34ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    34ee:	2b00      	cmp	r3, #0
    34f0:	d004      	beq.n	34fc <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    34f2:	687b      	ldr	r3, [r7, #4]
    34f4:	68db      	ldr	r3, [r3, #12]
    34f6:	2103      	movs	r1, #3
    34f8:	6878      	ldr	r0, [r7, #4]
    34fa:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    34fc:	683b      	ldr	r3, [r7, #0]
    34fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3502:	2b00      	cmp	r3, #0
    3504:	d004      	beq.n	3510 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3506:	687b      	ldr	r3, [r7, #4]
    3508:	68db      	ldr	r3, [r3, #12]
    350a:	2100      	movs	r1, #0
    350c:	6878      	ldr	r0, [r7, #4]
    350e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3510:	683b      	ldr	r3, [r7, #0]
    3512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3516:	2b00      	cmp	r3, #0
    3518:	d00f      	beq.n	353a <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    351a:	687b      	ldr	r3, [r7, #4]
    351c:	68dc      	ldr	r4, [r3, #12]
    351e:	687b      	ldr	r3, [r7, #4]
    3520:	681b      	ldr	r3, [r3, #0]
    3522:	4618      	mov	r0, r3
    3524:	4b11      	ldr	r3, [pc, #68]	; (356c <CAN1_Handler+0xc0>)
    3526:	4798      	blx	r3
    3528:	4603      	mov	r3, r0
    352a:	2b00      	cmp	r3, #0
    352c:	d001      	beq.n	3532 <CAN1_Handler+0x86>
    352e:	2302      	movs	r3, #2
    3530:	e000      	b.n	3534 <CAN1_Handler+0x88>
    3532:	2301      	movs	r3, #1
    3534:	4619      	mov	r1, r3
    3536:	6878      	ldr	r0, [r7, #4]
    3538:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    353a:	683b      	ldr	r3, [r7, #0]
    353c:	f003 0308 	and.w	r3, r3, #8
    3540:	2b00      	cmp	r3, #0
    3542:	d004      	beq.n	354e <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3544:	687b      	ldr	r3, [r7, #4]
    3546:	68db      	ldr	r3, [r3, #12]
    3548:	2104      	movs	r1, #4
    354a:	6878      	ldr	r0, [r7, #4]
    354c:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    354e:	687b      	ldr	r3, [r7, #4]
    3550:	681b      	ldr	r3, [r3, #0]
    3552:	6839      	ldr	r1, [r7, #0]
    3554:	4618      	mov	r0, r3
    3556:	4b06      	ldr	r3, [pc, #24]	; (3570 <CAN1_Handler+0xc4>)
    3558:	4798      	blx	r3
}
    355a:	bf00      	nop
    355c:	370c      	adds	r7, #12
    355e:	46bd      	mov	sp, r7
    3560:	bd90      	pop	{r4, r7, pc}
    3562:	bf00      	nop
    3564:	20000824 	.word	0x20000824
    3568:	00003181 	.word	0x00003181
    356c:	00003019 	.word	0x00003019
    3570:	00003165 	.word	0x00003165

00003574 <__NVIC_SetPendingIRQ>:
{
    3574:	b480      	push	{r7}
    3576:	b083      	sub	sp, #12
    3578:	af00      	add	r7, sp, #0
    357a:	4603      	mov	r3, r0
    357c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    357e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3582:	2b00      	cmp	r3, #0
    3584:	db0c      	blt.n	35a0 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3586:	4909      	ldr	r1, [pc, #36]	; (35ac <__NVIC_SetPendingIRQ+0x38>)
    3588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    358c:	095b      	lsrs	r3, r3, #5
    358e:	88fa      	ldrh	r2, [r7, #6]
    3590:	f002 021f 	and.w	r2, r2, #31
    3594:	2001      	movs	r0, #1
    3596:	fa00 f202 	lsl.w	r2, r0, r2
    359a:	3340      	adds	r3, #64	; 0x40
    359c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    35a0:	bf00      	nop
    35a2:	370c      	adds	r7, #12
    35a4:	46bd      	mov	sp, r7
    35a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    35aa:	4770      	bx	lr
    35ac:	e000e100 	.word	0xe000e100

000035b0 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    35b0:	b580      	push	{r7, lr}
    35b2:	b082      	sub	sp, #8
    35b4:	af00      	add	r7, sp, #0
    35b6:	4603      	mov	r3, r0
    35b8:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    35ba:	79fb      	ldrb	r3, [r7, #7]
    35bc:	b21b      	sxth	r3, r3
    35be:	4618      	mov	r0, r3
    35c0:	4b02      	ldr	r3, [pc, #8]	; (35cc <_irq_set+0x1c>)
    35c2:	4798      	blx	r3
}
    35c4:	bf00      	nop
    35c6:	3708      	adds	r7, #8
    35c8:	46bd      	mov	sp, r7
    35ca:	bd80      	pop	{r7, pc}
    35cc:	00003575 	.word	0x00003575

000035d0 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    35d0:	b480      	push	{r7}
    35d2:	b083      	sub	sp, #12
    35d4:	af00      	add	r7, sp, #0
    35d6:	4603      	mov	r3, r0
    35d8:	6039      	str	r1, [r7, #0]
    35da:	80fb      	strh	r3, [r7, #6]
    35dc:	4613      	mov	r3, r2
    35de:	717b      	strb	r3, [r7, #5]
	switch (power) {
    35e0:	797b      	ldrb	r3, [r7, #5]
    35e2:	3b04      	subs	r3, #4
    35e4:	2b05      	cmp	r3, #5
    35e6:	d86b      	bhi.n	36c0 <_get_cycles_for_us_internal+0xf0>
    35e8:	a201      	add	r2, pc, #4	; (adr r2, 35f0 <_get_cycles_for_us_internal+0x20>)
    35ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    35ee:	bf00      	nop
    35f0:	0000369f 	.word	0x0000369f
    35f4:	0000367f 	.word	0x0000367f
    35f8:	00003661 	.word	0x00003661
    35fc:	00003643 	.word	0x00003643
    3600:	00003625 	.word	0x00003625
    3604:	00003609 	.word	0x00003609
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    3608:	88fb      	ldrh	r3, [r7, #6]
    360a:	683a      	ldr	r2, [r7, #0]
    360c:	4935      	ldr	r1, [pc, #212]	; (36e4 <_get_cycles_for_us_internal+0x114>)
    360e:	fba1 1202 	umull	r1, r2, r1, r2
    3612:	0c92      	lsrs	r2, r2, #18
    3614:	fb02 f303 	mul.w	r3, r2, r3
    3618:	3302      	adds	r3, #2
    361a:	4a33      	ldr	r2, [pc, #204]	; (36e8 <_get_cycles_for_us_internal+0x118>)
    361c:	fba2 2303 	umull	r2, r3, r2, r3
    3620:	085b      	lsrs	r3, r3, #1
    3622:	e059      	b.n	36d8 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3624:	88fb      	ldrh	r3, [r7, #6]
    3626:	683a      	ldr	r2, [r7, #0]
    3628:	0952      	lsrs	r2, r2, #5
    362a:	4930      	ldr	r1, [pc, #192]	; (36ec <_get_cycles_for_us_internal+0x11c>)
    362c:	fba1 1202 	umull	r1, r2, r1, r2
    3630:	09d2      	lsrs	r2, r2, #7
    3632:	fb02 f303 	mul.w	r3, r2, r3
    3636:	331d      	adds	r3, #29
    3638:	4a2d      	ldr	r2, [pc, #180]	; (36f0 <_get_cycles_for_us_internal+0x120>)
    363a:	fba2 2303 	umull	r2, r3, r2, r3
    363e:	091b      	lsrs	r3, r3, #4
    3640:	e04a      	b.n	36d8 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    3642:	88fb      	ldrh	r3, [r7, #6]
    3644:	683a      	ldr	r2, [r7, #0]
    3646:	492b      	ldr	r1, [pc, #172]	; (36f4 <_get_cycles_for_us_internal+0x124>)
    3648:	fba1 1202 	umull	r1, r2, r1, r2
    364c:	0b52      	lsrs	r2, r2, #13
    364e:	fb02 f303 	mul.w	r3, r2, r3
    3652:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3656:	4a28      	ldr	r2, [pc, #160]	; (36f8 <_get_cycles_for_us_internal+0x128>)
    3658:	fba2 2303 	umull	r2, r3, r2, r3
    365c:	095b      	lsrs	r3, r3, #5
    365e:	e03b      	b.n	36d8 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    3660:	88fb      	ldrh	r3, [r7, #6]
    3662:	683a      	ldr	r2, [r7, #0]
    3664:	4925      	ldr	r1, [pc, #148]	; (36fc <_get_cycles_for_us_internal+0x12c>)
    3666:	fba1 1202 	umull	r1, r2, r1, r2
    366a:	0992      	lsrs	r2, r2, #6
    366c:	fb02 f303 	mul.w	r3, r2, r3
    3670:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3674:	4a22      	ldr	r2, [pc, #136]	; (3700 <_get_cycles_for_us_internal+0x130>)
    3676:	fba2 2303 	umull	r2, r3, r2, r3
    367a:	099b      	lsrs	r3, r3, #6
    367c:	e02c      	b.n	36d8 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    367e:	88fb      	ldrh	r3, [r7, #6]
    3680:	683a      	ldr	r2, [r7, #0]
    3682:	4920      	ldr	r1, [pc, #128]	; (3704 <_get_cycles_for_us_internal+0x134>)
    3684:	fba1 1202 	umull	r1, r2, r1, r2
    3688:	0952      	lsrs	r2, r2, #5
    368a:	fb02 f303 	mul.w	r3, r2, r3
    368e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    3692:	332f      	adds	r3, #47	; 0x2f
    3694:	4a1c      	ldr	r2, [pc, #112]	; (3708 <_get_cycles_for_us_internal+0x138>)
    3696:	fba2 2303 	umull	r2, r3, r2, r3
    369a:	0b5b      	lsrs	r3, r3, #13
    369c:	e01c      	b.n	36d8 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    369e:	88fb      	ldrh	r3, [r7, #6]
    36a0:	683a      	ldr	r2, [r7, #0]
    36a2:	491a      	ldr	r1, [pc, #104]	; (370c <_get_cycles_for_us_internal+0x13c>)
    36a4:	fba1 1202 	umull	r1, r2, r1, r2
    36a8:	08d2      	lsrs	r2, r2, #3
    36aa:	fb02 f303 	mul.w	r3, r2, r3
    36ae:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    36b2:	f203 33df 	addw	r3, r3, #991	; 0x3df
    36b6:	4a16      	ldr	r2, [pc, #88]	; (3710 <_get_cycles_for_us_internal+0x140>)
    36b8:	fba2 2303 	umull	r2, r3, r2, r3
    36bc:	0c5b      	lsrs	r3, r3, #17
    36be:	e00b      	b.n	36d8 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    36c0:	88fb      	ldrh	r3, [r7, #6]
    36c2:	683a      	ldr	r2, [r7, #0]
    36c4:	fb02 f303 	mul.w	r3, r2, r3
    36c8:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    36cc:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    36d0:	4a10      	ldr	r2, [pc, #64]	; (3714 <_get_cycles_for_us_internal+0x144>)
    36d2:	fba2 2303 	umull	r2, r3, r2, r3
    36d6:	0c9b      	lsrs	r3, r3, #18
	}
}
    36d8:	4618      	mov	r0, r3
    36da:	370c      	adds	r7, #12
    36dc:	46bd      	mov	sp, r7
    36de:	f85d 7b04 	ldr.w	r7, [sp], #4
    36e2:	4770      	bx	lr
    36e4:	431bde83 	.word	0x431bde83
    36e8:	aaaaaaab 	.word	0xaaaaaaab
    36ec:	0a7c5ac5 	.word	0x0a7c5ac5
    36f0:	88888889 	.word	0x88888889
    36f4:	d1b71759 	.word	0xd1b71759
    36f8:	1b4e81b5 	.word	0x1b4e81b5
    36fc:	10624dd3 	.word	0x10624dd3
    3700:	057619f1 	.word	0x057619f1
    3704:	51eb851f 	.word	0x51eb851f
    3708:	45e7b273 	.word	0x45e7b273
    370c:	cccccccd 	.word	0xcccccccd
    3710:	6fd91d85 	.word	0x6fd91d85
    3714:	165e9f81 	.word	0x165e9f81

00003718 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    3718:	b580      	push	{r7, lr}
    371a:	b082      	sub	sp, #8
    371c:	af00      	add	r7, sp, #0
    371e:	4603      	mov	r3, r0
    3720:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3722:	88fb      	ldrh	r3, [r7, #6]
    3724:	2209      	movs	r2, #9
    3726:	4904      	ldr	r1, [pc, #16]	; (3738 <_get_cycles_for_us+0x20>)
    3728:	4618      	mov	r0, r3
    372a:	4b04      	ldr	r3, [pc, #16]	; (373c <_get_cycles_for_us+0x24>)
    372c:	4798      	blx	r3
    372e:	4603      	mov	r3, r0
}
    3730:	4618      	mov	r0, r3
    3732:	3708      	adds	r7, #8
    3734:	46bd      	mov	sp, r7
    3736:	bd80      	pop	{r7, pc}
    3738:	07270e00 	.word	0x07270e00
    373c:	000035d1 	.word	0x000035d1

00003740 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    3740:	b480      	push	{r7}
    3742:	b083      	sub	sp, #12
    3744:	af00      	add	r7, sp, #0
    3746:	4603      	mov	r3, r0
    3748:	6039      	str	r1, [r7, #0]
    374a:	80fb      	strh	r3, [r7, #6]
    374c:	4613      	mov	r3, r2
    374e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3750:	797b      	ldrb	r3, [r7, #5]
    3752:	3b04      	subs	r3, #4
    3754:	2b05      	cmp	r3, #5
    3756:	d870      	bhi.n	383a <_get_cycles_for_ms_internal+0xfa>
    3758:	a201      	add	r2, pc, #4	; (adr r2, 3760 <_get_cycles_for_ms_internal+0x20>)
    375a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    375e:	bf00      	nop
    3760:	0000381d 	.word	0x0000381d
    3764:	00003801 	.word	0x00003801
    3768:	000037e5 	.word	0x000037e5
    376c:	000037c1 	.word	0x000037c1
    3770:	0000379d 	.word	0x0000379d
    3774:	00003779 	.word	0x00003779
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    3778:	88fb      	ldrh	r3, [r7, #6]
    377a:	683a      	ldr	r2, [r7, #0]
    377c:	4937      	ldr	r1, [pc, #220]	; (385c <_get_cycles_for_ms_internal+0x11c>)
    377e:	fba1 1202 	umull	r1, r2, r1, r2
    3782:	0c92      	lsrs	r2, r2, #18
    3784:	fb02 f303 	mul.w	r3, r2, r3
    3788:	3302      	adds	r3, #2
    378a:	4a35      	ldr	r2, [pc, #212]	; (3860 <_get_cycles_for_ms_internal+0x120>)
    378c:	fba2 2303 	umull	r2, r3, r2, r3
    3790:	085b      	lsrs	r3, r3, #1
    3792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3796:	fb02 f303 	mul.w	r3, r2, r3
    379a:	e058      	b.n	384e <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    379c:	88fb      	ldrh	r3, [r7, #6]
    379e:	683a      	ldr	r2, [r7, #0]
    37a0:	0952      	lsrs	r2, r2, #5
    37a2:	4930      	ldr	r1, [pc, #192]	; (3864 <_get_cycles_for_ms_internal+0x124>)
    37a4:	fba1 1202 	umull	r1, r2, r1, r2
    37a8:	09d2      	lsrs	r2, r2, #7
    37aa:	fb02 f303 	mul.w	r3, r2, r3
    37ae:	3302      	adds	r3, #2
    37b0:	4a2b      	ldr	r2, [pc, #172]	; (3860 <_get_cycles_for_ms_internal+0x120>)
    37b2:	fba2 2303 	umull	r2, r3, r2, r3
    37b6:	085b      	lsrs	r3, r3, #1
    37b8:	2264      	movs	r2, #100	; 0x64
    37ba:	fb02 f303 	mul.w	r3, r2, r3
    37be:	e046      	b.n	384e <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    37c0:	88fb      	ldrh	r3, [r7, #6]
    37c2:	683a      	ldr	r2, [r7, #0]
    37c4:	4928      	ldr	r1, [pc, #160]	; (3868 <_get_cycles_for_ms_internal+0x128>)
    37c6:	fba1 1202 	umull	r1, r2, r1, r2
    37ca:	0b52      	lsrs	r2, r2, #13
    37cc:	fb02 f303 	mul.w	r3, r2, r3
    37d0:	3302      	adds	r3, #2
    37d2:	4a23      	ldr	r2, [pc, #140]	; (3860 <_get_cycles_for_ms_internal+0x120>)
    37d4:	fba2 2303 	umull	r2, r3, r2, r3
    37d8:	085a      	lsrs	r2, r3, #1
    37da:	4613      	mov	r3, r2
    37dc:	009b      	lsls	r3, r3, #2
    37de:	4413      	add	r3, r2
    37e0:	005b      	lsls	r3, r3, #1
    37e2:	e034      	b.n	384e <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    37e4:	88fb      	ldrh	r3, [r7, #6]
    37e6:	683a      	ldr	r2, [r7, #0]
    37e8:	4920      	ldr	r1, [pc, #128]	; (386c <_get_cycles_for_ms_internal+0x12c>)
    37ea:	fba1 1202 	umull	r1, r2, r1, r2
    37ee:	0992      	lsrs	r2, r2, #6
    37f0:	fb02 f303 	mul.w	r3, r2, r3
    37f4:	3302      	adds	r3, #2
    37f6:	4a1a      	ldr	r2, [pc, #104]	; (3860 <_get_cycles_for_ms_internal+0x120>)
    37f8:	fba2 2303 	umull	r2, r3, r2, r3
    37fc:	085b      	lsrs	r3, r3, #1
    37fe:	e026      	b.n	384e <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    3800:	88fb      	ldrh	r3, [r7, #6]
    3802:	683a      	ldr	r2, [r7, #0]
    3804:	491a      	ldr	r1, [pc, #104]	; (3870 <_get_cycles_for_ms_internal+0x130>)
    3806:	fba1 1202 	umull	r1, r2, r1, r2
    380a:	0952      	lsrs	r2, r2, #5
    380c:	fb02 f303 	mul.w	r3, r2, r3
    3810:	331d      	adds	r3, #29
    3812:	4a18      	ldr	r2, [pc, #96]	; (3874 <_get_cycles_for_ms_internal+0x134>)
    3814:	fba2 2303 	umull	r2, r3, r2, r3
    3818:	091b      	lsrs	r3, r3, #4
    381a:	e018      	b.n	384e <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    381c:	88fb      	ldrh	r3, [r7, #6]
    381e:	683a      	ldr	r2, [r7, #0]
    3820:	4915      	ldr	r1, [pc, #84]	; (3878 <_get_cycles_for_ms_internal+0x138>)
    3822:	fba1 1202 	umull	r1, r2, r1, r2
    3826:	08d2      	lsrs	r2, r2, #3
    3828:	fb02 f303 	mul.w	r3, r2, r3
    382c:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3830:	4a12      	ldr	r2, [pc, #72]	; (387c <_get_cycles_for_ms_internal+0x13c>)
    3832:	fba2 2303 	umull	r2, r3, r2, r3
    3836:	095b      	lsrs	r3, r3, #5
    3838:	e009      	b.n	384e <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    383a:	88fb      	ldrh	r3, [r7, #6]
    383c:	683a      	ldr	r2, [r7, #0]
    383e:	fb02 f303 	mul.w	r3, r2, r3
    3842:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3846:	4a0e      	ldr	r2, [pc, #56]	; (3880 <_get_cycles_for_ms_internal+0x140>)
    3848:	fba2 2303 	umull	r2, r3, r2, r3
    384c:	099b      	lsrs	r3, r3, #6
	}
}
    384e:	4618      	mov	r0, r3
    3850:	370c      	adds	r7, #12
    3852:	46bd      	mov	sp, r7
    3854:	f85d 7b04 	ldr.w	r7, [sp], #4
    3858:	4770      	bx	lr
    385a:	bf00      	nop
    385c:	431bde83 	.word	0x431bde83
    3860:	aaaaaaab 	.word	0xaaaaaaab
    3864:	0a7c5ac5 	.word	0x0a7c5ac5
    3868:	d1b71759 	.word	0xd1b71759
    386c:	10624dd3 	.word	0x10624dd3
    3870:	51eb851f 	.word	0x51eb851f
    3874:	88888889 	.word	0x88888889
    3878:	cccccccd 	.word	0xcccccccd
    387c:	1b4e81b5 	.word	0x1b4e81b5
    3880:	057619f1 	.word	0x057619f1

00003884 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    3884:	b580      	push	{r7, lr}
    3886:	b082      	sub	sp, #8
    3888:	af00      	add	r7, sp, #0
    388a:	4603      	mov	r3, r0
    388c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    388e:	88fb      	ldrh	r3, [r7, #6]
    3890:	2209      	movs	r2, #9
    3892:	4904      	ldr	r1, [pc, #16]	; (38a4 <_get_cycles_for_ms+0x20>)
    3894:	4618      	mov	r0, r3
    3896:	4b04      	ldr	r3, [pc, #16]	; (38a8 <_get_cycles_for_ms+0x24>)
    3898:	4798      	blx	r3
    389a:	4603      	mov	r3, r0
}
    389c:	4618      	mov	r0, r3
    389e:	3708      	adds	r7, #8
    38a0:	46bd      	mov	sp, r7
    38a2:	bd80      	pop	{r7, pc}
    38a4:	07270e00 	.word	0x07270e00
    38a8:	00003741 	.word	0x00003741
    38ac:	00000000 	.word	0x00000000

000038b0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    38b0:	b480      	push	{r7}
    38b2:	b083      	sub	sp, #12
    38b4:	af00      	add	r7, sp, #0
    38b6:	6078      	str	r0, [r7, #4]
    38b8:	6039      	str	r1, [r7, #0]
    38ba:	bf00      	nop
    38bc:	f3af 8000 	nop.w

000038c0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    38c0:	3901      	subs	r1, #1
    38c2:	d8fd      	bhi.n	38c0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    38c4:	bf00      	nop
    38c6:	370c      	adds	r7, #12
    38c8:	46bd      	mov	sp, r7
    38ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    38ce:	4770      	bx	lr

000038d0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    38d0:	b480      	push	{r7}
    38d2:	b083      	sub	sp, #12
    38d4:	af00      	add	r7, sp, #0
    38d6:	6078      	str	r0, [r7, #4]
    38d8:	460b      	mov	r3, r1
    38da:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    38dc:	687b      	ldr	r3, [r7, #4]
    38de:	881b      	ldrh	r3, [r3, #0]
    38e0:	b29a      	uxth	r2, r3
    38e2:	887b      	ldrh	r3, [r7, #2]
    38e4:	021b      	lsls	r3, r3, #8
    38e6:	b29b      	uxth	r3, r3
    38e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    38ec:	b29b      	uxth	r3, r3
    38ee:	4313      	orrs	r3, r2
    38f0:	b29a      	uxth	r2, r3
    38f2:	687b      	ldr	r3, [r7, #4]
    38f4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    38f6:	bf00      	nop
    38f8:	370c      	adds	r7, #12
    38fa:	46bd      	mov	sp, r7
    38fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3900:	4770      	bx	lr

00003902 <hri_port_set_EVCTRL_reg>:
{
    3902:	b480      	push	{r7}
    3904:	b085      	sub	sp, #20
    3906:	af00      	add	r7, sp, #0
    3908:	60f8      	str	r0, [r7, #12]
    390a:	460b      	mov	r3, r1
    390c:	607a      	str	r2, [r7, #4]
    390e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    3910:	7afb      	ldrb	r3, [r7, #11]
    3912:	7afa      	ldrb	r2, [r7, #11]
    3914:	68f9      	ldr	r1, [r7, #12]
    3916:	01d2      	lsls	r2, r2, #7
    3918:	440a      	add	r2, r1
    391a:	322c      	adds	r2, #44	; 0x2c
    391c:	6811      	ldr	r1, [r2, #0]
    391e:	687a      	ldr	r2, [r7, #4]
    3920:	430a      	orrs	r2, r1
    3922:	68f9      	ldr	r1, [r7, #12]
    3924:	01db      	lsls	r3, r3, #7
    3926:	440b      	add	r3, r1
    3928:	332c      	adds	r3, #44	; 0x2c
    392a:	601a      	str	r2, [r3, #0]
}
    392c:	bf00      	nop
    392e:	3714      	adds	r7, #20
    3930:	46bd      	mov	sp, r7
    3932:	f85d 7b04 	ldr.w	r7, [sp], #4
    3936:	4770      	bx	lr

00003938 <_port_event_init>:

static inline void _port_event_init()
{
    3938:	b580      	push	{r7, lr}
    393a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    393c:	2200      	movs	r2, #0
    393e:	2100      	movs	r1, #0
    3940:	480a      	ldr	r0, [pc, #40]	; (396c <_port_event_init+0x34>)
    3942:	4b0b      	ldr	r3, [pc, #44]	; (3970 <_port_event_init+0x38>)
    3944:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    3946:	2200      	movs	r2, #0
    3948:	2101      	movs	r1, #1
    394a:	4808      	ldr	r0, [pc, #32]	; (396c <_port_event_init+0x34>)
    394c:	4b08      	ldr	r3, [pc, #32]	; (3970 <_port_event_init+0x38>)
    394e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    3950:	f64e 72ef 	movw	r2, #61423	; 0xefef
    3954:	2102      	movs	r1, #2
    3956:	4805      	ldr	r0, [pc, #20]	; (396c <_port_event_init+0x34>)
    3958:	4b05      	ldr	r3, [pc, #20]	; (3970 <_port_event_init+0x38>)
    395a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    395c:	2200      	movs	r2, #0
    395e:	2103      	movs	r1, #3
    3960:	4802      	ldr	r0, [pc, #8]	; (396c <_port_event_init+0x34>)
    3962:	4b03      	ldr	r3, [pc, #12]	; (3970 <_port_event_init+0x38>)
    3964:	4798      	blx	r3
}
    3966:	bf00      	nop
    3968:	bd80      	pop	{r7, pc}
    396a:	bf00      	nop
    396c:	41008000 	.word	0x41008000
    3970:	00003903 	.word	0x00003903

00003974 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3974:	b580      	push	{r7, lr}
    3976:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    3978:	2104      	movs	r1, #4
    397a:	480b      	ldr	r0, [pc, #44]	; (39a8 <_init_chip+0x34>)
    397c:	4b0b      	ldr	r3, [pc, #44]	; (39ac <_init_chip+0x38>)
    397e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    3980:	4b0b      	ldr	r3, [pc, #44]	; (39b0 <_init_chip+0x3c>)
    3982:	4798      	blx	r3
	_oscctrl_init_sources();
    3984:	4b0b      	ldr	r3, [pc, #44]	; (39b4 <_init_chip+0x40>)
    3986:	4798      	blx	r3
	_mclk_init();
    3988:	4b0b      	ldr	r3, [pc, #44]	; (39b8 <_init_chip+0x44>)
    398a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    398c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    3990:	4b0a      	ldr	r3, [pc, #40]	; (39bc <_init_chip+0x48>)
    3992:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    3994:	4b0a      	ldr	r3, [pc, #40]	; (39c0 <_init_chip+0x4c>)
    3996:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    3998:	f640 30df 	movw	r0, #3039	; 0xbdf
    399c:	4b07      	ldr	r3, [pc, #28]	; (39bc <_init_chip+0x48>)
    399e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    39a0:	4b08      	ldr	r3, [pc, #32]	; (39c4 <_init_chip+0x50>)
    39a2:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    39a4:	bf00      	nop
    39a6:	bd80      	pop	{r7, pc}
    39a8:	41004000 	.word	0x41004000
    39ac:	000038d1 	.word	0x000038d1
    39b0:	000043c5 	.word	0x000043c5
    39b4:	0000488d 	.word	0x0000488d
    39b8:	000042e5 	.word	0x000042e5
    39bc:	0000418d 	.word	0x0000418d
    39c0:	000048cd 	.word	0x000048cd
    39c4:	00003939 	.word	0x00003939

000039c8 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    39c8:	b480      	push	{r7}
    39ca:	b083      	sub	sp, #12
    39cc:	af00      	add	r7, sp, #0
    39ce:	6078      	str	r0, [r7, #4]
    39d0:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    39d2:	687b      	ldr	r3, [r7, #4]
    39d4:	683a      	ldr	r2, [r7, #0]
    39d6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    39d8:	2300      	movs	r3, #0
}
    39da:	4618      	mov	r0, r3
    39dc:	370c      	adds	r7, #12
    39de:	46bd      	mov	sp, r7
    39e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    39e4:	4770      	bx	lr
	...

000039e8 <__NVIC_EnableIRQ>:
{
    39e8:	b480      	push	{r7}
    39ea:	b083      	sub	sp, #12
    39ec:	af00      	add	r7, sp, #0
    39ee:	4603      	mov	r3, r0
    39f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    39f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    39f6:	2b00      	cmp	r3, #0
    39f8:	db0b      	blt.n	3a12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    39fa:	4909      	ldr	r1, [pc, #36]	; (3a20 <__NVIC_EnableIRQ+0x38>)
    39fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a00:	095b      	lsrs	r3, r3, #5
    3a02:	88fa      	ldrh	r2, [r7, #6]
    3a04:	f002 021f 	and.w	r2, r2, #31
    3a08:	2001      	movs	r0, #1
    3a0a:	fa00 f202 	lsl.w	r2, r0, r2
    3a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3a12:	bf00      	nop
    3a14:	370c      	adds	r7, #12
    3a16:	46bd      	mov	sp, r7
    3a18:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a1c:	4770      	bx	lr
    3a1e:	bf00      	nop
    3a20:	e000e100 	.word	0xe000e100

00003a24 <__NVIC_DisableIRQ>:
{
    3a24:	b480      	push	{r7}
    3a26:	b083      	sub	sp, #12
    3a28:	af00      	add	r7, sp, #0
    3a2a:	4603      	mov	r3, r0
    3a2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a32:	2b00      	cmp	r3, #0
    3a34:	db10      	blt.n	3a58 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a36:	490b      	ldr	r1, [pc, #44]	; (3a64 <__NVIC_DisableIRQ+0x40>)
    3a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a3c:	095b      	lsrs	r3, r3, #5
    3a3e:	88fa      	ldrh	r2, [r7, #6]
    3a40:	f002 021f 	and.w	r2, r2, #31
    3a44:	2001      	movs	r0, #1
    3a46:	fa00 f202 	lsl.w	r2, r0, r2
    3a4a:	3320      	adds	r3, #32
    3a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3a50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a54:	f3bf 8f6f 	isb	sy
}
    3a58:	bf00      	nop
    3a5a:	370c      	adds	r7, #12
    3a5c:	46bd      	mov	sp, r7
    3a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a62:	4770      	bx	lr
    3a64:	e000e100 	.word	0xe000e100

00003a68 <__NVIC_ClearPendingIRQ>:
{
    3a68:	b480      	push	{r7}
    3a6a:	b083      	sub	sp, #12
    3a6c:	af00      	add	r7, sp, #0
    3a6e:	4603      	mov	r3, r0
    3a70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a76:	2b00      	cmp	r3, #0
    3a78:	db0c      	blt.n	3a94 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a7a:	4909      	ldr	r1, [pc, #36]	; (3aa0 <__NVIC_ClearPendingIRQ+0x38>)
    3a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a80:	095b      	lsrs	r3, r3, #5
    3a82:	88fa      	ldrh	r2, [r7, #6]
    3a84:	f002 021f 	and.w	r2, r2, #31
    3a88:	2001      	movs	r0, #1
    3a8a:	fa00 f202 	lsl.w	r2, r0, r2
    3a8e:	3360      	adds	r3, #96	; 0x60
    3a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3a94:	bf00      	nop
    3a96:	370c      	adds	r7, #12
    3a98:	46bd      	mov	sp, r7
    3a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a9e:	4770      	bx	lr
    3aa0:	e000e100 	.word	0xe000e100

00003aa4 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    3aa4:	b480      	push	{r7}
    3aa6:	b083      	sub	sp, #12
    3aa8:	af00      	add	r7, sp, #0
    3aaa:	6078      	str	r0, [r7, #4]
    3aac:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    3aae:	bf00      	nop
    3ab0:	687b      	ldr	r3, [r7, #4]
    3ab2:	685a      	ldr	r2, [r3, #4]
    3ab4:	683b      	ldr	r3, [r7, #0]
    3ab6:	4013      	ands	r3, r2
    3ab8:	2b00      	cmp	r3, #0
    3aba:	d1f9      	bne.n	3ab0 <hri_eic_wait_for_sync+0xc>
	};
}
    3abc:	bf00      	nop
    3abe:	370c      	adds	r7, #12
    3ac0:	46bd      	mov	sp, r7
    3ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ac6:	4770      	bx	lr

00003ac8 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    3ac8:	b480      	push	{r7}
    3aca:	b083      	sub	sp, #12
    3acc:	af00      	add	r7, sp, #0
    3ace:	6078      	str	r0, [r7, #4]
    3ad0:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    3ad2:	687b      	ldr	r3, [r7, #4]
    3ad4:	685a      	ldr	r2, [r3, #4]
    3ad6:	683b      	ldr	r3, [r7, #0]
    3ad8:	4013      	ands	r3, r2
    3ada:	2b00      	cmp	r3, #0
    3adc:	bf14      	ite	ne
    3ade:	2301      	movne	r3, #1
    3ae0:	2300      	moveq	r3, #0
    3ae2:	b2db      	uxtb	r3, r3
}
    3ae4:	4618      	mov	r0, r3
    3ae6:	370c      	adds	r7, #12
    3ae8:	46bd      	mov	sp, r7
    3aea:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aee:	4770      	bx	lr

00003af0 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    3af0:	b480      	push	{r7}
    3af2:	b083      	sub	sp, #12
    3af4:	af00      	add	r7, sp, #0
    3af6:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    3af8:	687b      	ldr	r3, [r7, #4]
    3afa:	695b      	ldr	r3, [r3, #20]
}
    3afc:	4618      	mov	r0, r3
    3afe:	370c      	adds	r7, #12
    3b00:	46bd      	mov	sp, r7
    3b02:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b06:	4770      	bx	lr

00003b08 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    3b08:	b480      	push	{r7}
    3b0a:	b083      	sub	sp, #12
    3b0c:	af00      	add	r7, sp, #0
    3b0e:	6078      	str	r0, [r7, #4]
    3b10:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    3b12:	687b      	ldr	r3, [r7, #4]
    3b14:	683a      	ldr	r2, [r7, #0]
    3b16:	615a      	str	r2, [r3, #20]
}
    3b18:	bf00      	nop
    3b1a:	370c      	adds	r7, #12
    3b1c:	46bd      	mov	sp, r7
    3b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b22:	4770      	bx	lr

00003b24 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3b24:	b580      	push	{r7, lr}
    3b26:	b082      	sub	sp, #8
    3b28:	af00      	add	r7, sp, #0
    3b2a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    3b2c:	687b      	ldr	r3, [r7, #4]
    3b2e:	781b      	ldrb	r3, [r3, #0]
    3b30:	b2db      	uxtb	r3, r3
    3b32:	f043 0302 	orr.w	r3, r3, #2
    3b36:	b2da      	uxtb	r2, r3
    3b38:	687b      	ldr	r3, [r7, #4]
    3b3a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    3b3c:	2103      	movs	r1, #3
    3b3e:	6878      	ldr	r0, [r7, #4]
    3b40:	4b02      	ldr	r3, [pc, #8]	; (3b4c <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    3b42:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3b44:	bf00      	nop
    3b46:	3708      	adds	r7, #8
    3b48:	46bd      	mov	sp, r7
    3b4a:	bd80      	pop	{r7, pc}
    3b4c:	00003aa5 	.word	0x00003aa5

00003b50 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    3b50:	b580      	push	{r7, lr}
    3b52:	b082      	sub	sp, #8
    3b54:	af00      	add	r7, sp, #0
    3b56:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    3b58:	687b      	ldr	r3, [r7, #4]
    3b5a:	781b      	ldrb	r3, [r3, #0]
    3b5c:	b2db      	uxtb	r3, r3
    3b5e:	f023 0302 	bic.w	r3, r3, #2
    3b62:	b2da      	uxtb	r2, r3
    3b64:	687b      	ldr	r3, [r7, #4]
    3b66:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    3b68:	2103      	movs	r1, #3
    3b6a:	6878      	ldr	r0, [r7, #4]
    3b6c:	4b02      	ldr	r3, [pc, #8]	; (3b78 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    3b6e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3b70:	bf00      	nop
    3b72:	3708      	adds	r7, #8
    3b74:	46bd      	mov	sp, r7
    3b76:	bd80      	pop	{r7, pc}
    3b78:	00003aa5 	.word	0x00003aa5

00003b7c <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    3b7c:	b580      	push	{r7, lr}
    3b7e:	b084      	sub	sp, #16
    3b80:	af00      	add	r7, sp, #0
    3b82:	6078      	str	r0, [r7, #4]
    3b84:	460b      	mov	r3, r1
    3b86:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    3b88:	687b      	ldr	r3, [r7, #4]
    3b8a:	781b      	ldrb	r3, [r3, #0]
    3b8c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    3b8e:	7bfb      	ldrb	r3, [r7, #15]
    3b90:	f023 0310 	bic.w	r3, r3, #16
    3b94:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    3b96:	78fb      	ldrb	r3, [r7, #3]
    3b98:	011b      	lsls	r3, r3, #4
    3b9a:	b25a      	sxtb	r2, r3
    3b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3ba0:	4313      	orrs	r3, r2
    3ba2:	b25b      	sxtb	r3, r3
    3ba4:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    3ba6:	687b      	ldr	r3, [r7, #4]
    3ba8:	7bfa      	ldrb	r2, [r7, #15]
    3baa:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    3bac:	2103      	movs	r1, #3
    3bae:	6878      	ldr	r0, [r7, #4]
    3bb0:	4b02      	ldr	r3, [pc, #8]	; (3bbc <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    3bb2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3bb4:	bf00      	nop
    3bb6:	3710      	adds	r7, #16
    3bb8:	46bd      	mov	sp, r7
    3bba:	bd80      	pop	{r7, pc}
    3bbc:	00003aa5 	.word	0x00003aa5

00003bc0 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    3bc0:	b580      	push	{r7, lr}
    3bc2:	b084      	sub	sp, #16
    3bc4:	af00      	add	r7, sp, #0
    3bc6:	6078      	str	r0, [r7, #4]
    3bc8:	460b      	mov	r3, r1
    3bca:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    3bcc:	2103      	movs	r1, #3
    3bce:	6878      	ldr	r0, [r7, #4]
    3bd0:	4b06      	ldr	r3, [pc, #24]	; (3bec <hri_eic_get_CTRLA_reg+0x2c>)
    3bd2:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    3bd4:	687b      	ldr	r3, [r7, #4]
    3bd6:	781b      	ldrb	r3, [r3, #0]
    3bd8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    3bda:	7bfa      	ldrb	r2, [r7, #15]
    3bdc:	78fb      	ldrb	r3, [r7, #3]
    3bde:	4013      	ands	r3, r2
    3be0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    3be2:	7bfb      	ldrb	r3, [r7, #15]
}
    3be4:	4618      	mov	r0, r3
    3be6:	3710      	adds	r7, #16
    3be8:	46bd      	mov	sp, r7
    3bea:	bd80      	pop	{r7, pc}
    3bec:	00003aa5 	.word	0x00003aa5

00003bf0 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    3bf0:	b580      	push	{r7, lr}
    3bf2:	b082      	sub	sp, #8
    3bf4:	af00      	add	r7, sp, #0
    3bf6:	6078      	str	r0, [r7, #4]
    3bf8:	460b      	mov	r3, r1
    3bfa:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    3bfc:	687b      	ldr	r3, [r7, #4]
    3bfe:	78fa      	ldrb	r2, [r7, #3]
    3c00:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    3c02:	2103      	movs	r1, #3
    3c04:	6878      	ldr	r0, [r7, #4]
    3c06:	4b03      	ldr	r3, [pc, #12]	; (3c14 <hri_eic_write_CTRLA_reg+0x24>)
    3c08:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3c0a:	bf00      	nop
    3c0c:	3708      	adds	r7, #8
    3c0e:	46bd      	mov	sp, r7
    3c10:	bd80      	pop	{r7, pc}
    3c12:	bf00      	nop
    3c14:	00003aa5 	.word	0x00003aa5

00003c18 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    3c18:	b480      	push	{r7}
    3c1a:	b083      	sub	sp, #12
    3c1c:	af00      	add	r7, sp, #0
    3c1e:	6078      	str	r0, [r7, #4]
    3c20:	460b      	mov	r3, r1
    3c22:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    3c24:	687b      	ldr	r3, [r7, #4]
    3c26:	78fa      	ldrb	r2, [r7, #3]
    3c28:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3c2a:	bf00      	nop
    3c2c:	370c      	adds	r7, #12
    3c2e:	46bd      	mov	sp, r7
    3c30:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c34:	4770      	bx	lr

00003c36 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    3c36:	b480      	push	{r7}
    3c38:	b083      	sub	sp, #12
    3c3a:	af00      	add	r7, sp, #0
    3c3c:	6078      	str	r0, [r7, #4]
    3c3e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    3c40:	687b      	ldr	r3, [r7, #4]
    3c42:	683a      	ldr	r2, [r7, #0]
    3c44:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3c46:	bf00      	nop
    3c48:	370c      	adds	r7, #12
    3c4a:	46bd      	mov	sp, r7
    3c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c50:	4770      	bx	lr

00003c52 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    3c52:	b480      	push	{r7}
    3c54:	b083      	sub	sp, #12
    3c56:	af00      	add	r7, sp, #0
    3c58:	6078      	str	r0, [r7, #4]
    3c5a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    3c5c:	687b      	ldr	r3, [r7, #4]
    3c5e:	683a      	ldr	r2, [r7, #0]
    3c60:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3c62:	bf00      	nop
    3c64:	370c      	adds	r7, #12
    3c66:	46bd      	mov	sp, r7
    3c68:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c6c:	4770      	bx	lr

00003c6e <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    3c6e:	b480      	push	{r7}
    3c70:	b085      	sub	sp, #20
    3c72:	af00      	add	r7, sp, #0
    3c74:	60f8      	str	r0, [r7, #12]
    3c76:	460b      	mov	r3, r1
    3c78:	607a      	str	r2, [r7, #4]
    3c7a:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    3c7c:	7afb      	ldrb	r3, [r7, #11]
    3c7e:	68fa      	ldr	r2, [r7, #12]
    3c80:	3306      	adds	r3, #6
    3c82:	009b      	lsls	r3, r3, #2
    3c84:	4413      	add	r3, r2
    3c86:	687a      	ldr	r2, [r7, #4]
    3c88:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3c8a:	bf00      	nop
    3c8c:	3714      	adds	r7, #20
    3c8e:	46bd      	mov	sp, r7
    3c90:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c94:	4770      	bx	lr

00003c96 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    3c96:	b480      	push	{r7}
    3c98:	b083      	sub	sp, #12
    3c9a:	af00      	add	r7, sp, #0
    3c9c:	6078      	str	r0, [r7, #4]
    3c9e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    3ca0:	687b      	ldr	r3, [r7, #4]
    3ca2:	683a      	ldr	r2, [r7, #0]
    3ca4:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    3ca6:	bf00      	nop
    3ca8:	370c      	adds	r7, #12
    3caa:	46bd      	mov	sp, r7
    3cac:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cb0:	4770      	bx	lr

00003cb2 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    3cb2:	b480      	push	{r7}
    3cb4:	b083      	sub	sp, #12
    3cb6:	af00      	add	r7, sp, #0
    3cb8:	6078      	str	r0, [r7, #4]
    3cba:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    3cbc:	687b      	ldr	r3, [r7, #4]
    3cbe:	683a      	ldr	r2, [r7, #0]
    3cc0:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    3cc2:	bf00      	nop
    3cc4:	370c      	adds	r7, #12
    3cc6:	46bd      	mov	sp, r7
    3cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ccc:	4770      	bx	lr
	...

00003cd0 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    3cd0:	b580      	push	{r7, lr}
    3cd2:	b082      	sub	sp, #8
    3cd4:	af00      	add	r7, sp, #0
    3cd6:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    3cd8:	2101      	movs	r1, #1
    3cda:	484f      	ldr	r0, [pc, #316]	; (3e18 <_ext_irq_init+0x148>)
    3cdc:	4b4f      	ldr	r3, [pc, #316]	; (3e1c <_ext_irq_init+0x14c>)
    3cde:	4798      	blx	r3
    3ce0:	4603      	mov	r3, r0
    3ce2:	f083 0301 	eor.w	r3, r3, #1
    3ce6:	b2db      	uxtb	r3, r3
    3ce8:	2b00      	cmp	r3, #0
    3cea:	d011      	beq.n	3d10 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    3cec:	2102      	movs	r1, #2
    3cee:	484a      	ldr	r0, [pc, #296]	; (3e18 <_ext_irq_init+0x148>)
    3cf0:	4b4b      	ldr	r3, [pc, #300]	; (3e20 <_ext_irq_init+0x150>)
    3cf2:	4798      	blx	r3
    3cf4:	4603      	mov	r3, r0
    3cf6:	2b00      	cmp	r3, #0
    3cf8:	d006      	beq.n	3d08 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    3cfa:	4847      	ldr	r0, [pc, #284]	; (3e18 <_ext_irq_init+0x148>)
    3cfc:	4b49      	ldr	r3, [pc, #292]	; (3e24 <_ext_irq_init+0x154>)
    3cfe:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    3d00:	2102      	movs	r1, #2
    3d02:	4845      	ldr	r0, [pc, #276]	; (3e18 <_ext_irq_init+0x148>)
    3d04:	4b48      	ldr	r3, [pc, #288]	; (3e28 <_ext_irq_init+0x158>)
    3d06:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    3d08:	2101      	movs	r1, #1
    3d0a:	4843      	ldr	r0, [pc, #268]	; (3e18 <_ext_irq_init+0x148>)
    3d0c:	4b47      	ldr	r3, [pc, #284]	; (3e2c <_ext_irq_init+0x15c>)
    3d0e:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    3d10:	2101      	movs	r1, #1
    3d12:	4841      	ldr	r0, [pc, #260]	; (3e18 <_ext_irq_init+0x148>)
    3d14:	4b44      	ldr	r3, [pc, #272]	; (3e28 <_ext_irq_init+0x158>)
    3d16:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    3d18:	2100      	movs	r1, #0
    3d1a:	483f      	ldr	r0, [pc, #252]	; (3e18 <_ext_irq_init+0x148>)
    3d1c:	4b44      	ldr	r3, [pc, #272]	; (3e30 <_ext_irq_init+0x160>)
    3d1e:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    3d20:	2100      	movs	r1, #0
    3d22:	483d      	ldr	r0, [pc, #244]	; (3e18 <_ext_irq_init+0x148>)
    3d24:	4b43      	ldr	r3, [pc, #268]	; (3e34 <_ext_irq_init+0x164>)
    3d26:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    3d28:	2100      	movs	r1, #0
    3d2a:	483b      	ldr	r0, [pc, #236]	; (3e18 <_ext_irq_init+0x148>)
    3d2c:	4b42      	ldr	r3, [pc, #264]	; (3e38 <_ext_irq_init+0x168>)
    3d2e:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    3d30:	f240 31bb 	movw	r1, #955	; 0x3bb
    3d34:	4838      	ldr	r0, [pc, #224]	; (3e18 <_ext_irq_init+0x148>)
    3d36:	4b41      	ldr	r3, [pc, #260]	; (3e3c <_ext_irq_init+0x16c>)
    3d38:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    3d3a:	f240 313b 	movw	r1, #827	; 0x33b
    3d3e:	4836      	ldr	r0, [pc, #216]	; (3e18 <_ext_irq_init+0x148>)
    3d40:	4b3f      	ldr	r3, [pc, #252]	; (3e40 <_ext_irq_init+0x170>)
    3d42:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    3d44:	2100      	movs	r1, #0
    3d46:	4834      	ldr	r0, [pc, #208]	; (3e18 <_ext_irq_init+0x148>)
    3d48:	4b3e      	ldr	r3, [pc, #248]	; (3e44 <_ext_irq_init+0x174>)
    3d4a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    3d4c:	4a3e      	ldr	r2, [pc, #248]	; (3e48 <_ext_irq_init+0x178>)
    3d4e:	2100      	movs	r1, #0
    3d50:	4831      	ldr	r0, [pc, #196]	; (3e18 <_ext_irq_init+0x148>)
    3d52:	4b3e      	ldr	r3, [pc, #248]	; (3e4c <_ext_irq_init+0x17c>)
    3d54:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    3d56:	2211      	movs	r2, #17
    3d58:	2101      	movs	r1, #1
    3d5a:	482f      	ldr	r0, [pc, #188]	; (3e18 <_ext_irq_init+0x148>)
    3d5c:	4b3b      	ldr	r3, [pc, #236]	; (3e4c <_ext_irq_init+0x17c>)
    3d5e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    3d60:	482d      	ldr	r0, [pc, #180]	; (3e18 <_ext_irq_init+0x148>)
    3d62:	4b3b      	ldr	r3, [pc, #236]	; (3e50 <_ext_irq_init+0x180>)
    3d64:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    3d66:	200c      	movs	r0, #12
    3d68:	4b3a      	ldr	r3, [pc, #232]	; (3e54 <_ext_irq_init+0x184>)
    3d6a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    3d6c:	200c      	movs	r0, #12
    3d6e:	4b3a      	ldr	r3, [pc, #232]	; (3e58 <_ext_irq_init+0x188>)
    3d70:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    3d72:	200c      	movs	r0, #12
    3d74:	4b39      	ldr	r3, [pc, #228]	; (3e5c <_ext_irq_init+0x18c>)
    3d76:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    3d78:	200d      	movs	r0, #13
    3d7a:	4b36      	ldr	r3, [pc, #216]	; (3e54 <_ext_irq_init+0x184>)
    3d7c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    3d7e:	200d      	movs	r0, #13
    3d80:	4b35      	ldr	r3, [pc, #212]	; (3e58 <_ext_irq_init+0x188>)
    3d82:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    3d84:	200d      	movs	r0, #13
    3d86:	4b35      	ldr	r3, [pc, #212]	; (3e5c <_ext_irq_init+0x18c>)
    3d88:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    3d8a:	200f      	movs	r0, #15
    3d8c:	4b31      	ldr	r3, [pc, #196]	; (3e54 <_ext_irq_init+0x184>)
    3d8e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    3d90:	200f      	movs	r0, #15
    3d92:	4b31      	ldr	r3, [pc, #196]	; (3e58 <_ext_irq_init+0x188>)
    3d94:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    3d96:	200f      	movs	r0, #15
    3d98:	4b30      	ldr	r3, [pc, #192]	; (3e5c <_ext_irq_init+0x18c>)
    3d9a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    3d9c:	2010      	movs	r0, #16
    3d9e:	4b2d      	ldr	r3, [pc, #180]	; (3e54 <_ext_irq_init+0x184>)
    3da0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    3da2:	2010      	movs	r0, #16
    3da4:	4b2c      	ldr	r3, [pc, #176]	; (3e58 <_ext_irq_init+0x188>)
    3da6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    3da8:	2010      	movs	r0, #16
    3daa:	4b2c      	ldr	r3, [pc, #176]	; (3e5c <_ext_irq_init+0x18c>)
    3dac:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    3dae:	2011      	movs	r0, #17
    3db0:	4b28      	ldr	r3, [pc, #160]	; (3e54 <_ext_irq_init+0x184>)
    3db2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    3db4:	2011      	movs	r0, #17
    3db6:	4b28      	ldr	r3, [pc, #160]	; (3e58 <_ext_irq_init+0x188>)
    3db8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    3dba:	2011      	movs	r0, #17
    3dbc:	4b27      	ldr	r3, [pc, #156]	; (3e5c <_ext_irq_init+0x18c>)
    3dbe:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    3dc0:	2012      	movs	r0, #18
    3dc2:	4b24      	ldr	r3, [pc, #144]	; (3e54 <_ext_irq_init+0x184>)
    3dc4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    3dc6:	2012      	movs	r0, #18
    3dc8:	4b23      	ldr	r3, [pc, #140]	; (3e58 <_ext_irq_init+0x188>)
    3dca:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    3dcc:	2012      	movs	r0, #18
    3dce:	4b23      	ldr	r3, [pc, #140]	; (3e5c <_ext_irq_init+0x18c>)
    3dd0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    3dd2:	2013      	movs	r0, #19
    3dd4:	4b1f      	ldr	r3, [pc, #124]	; (3e54 <_ext_irq_init+0x184>)
    3dd6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    3dd8:	2013      	movs	r0, #19
    3dda:	4b1f      	ldr	r3, [pc, #124]	; (3e58 <_ext_irq_init+0x188>)
    3ddc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    3dde:	2013      	movs	r0, #19
    3de0:	4b1e      	ldr	r3, [pc, #120]	; (3e5c <_ext_irq_init+0x18c>)
    3de2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    3de4:	2014      	movs	r0, #20
    3de6:	4b1b      	ldr	r3, [pc, #108]	; (3e54 <_ext_irq_init+0x184>)
    3de8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    3dea:	2014      	movs	r0, #20
    3dec:	4b1a      	ldr	r3, [pc, #104]	; (3e58 <_ext_irq_init+0x188>)
    3dee:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    3df0:	2014      	movs	r0, #20
    3df2:	4b1a      	ldr	r3, [pc, #104]	; (3e5c <_ext_irq_init+0x18c>)
    3df4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    3df6:	2015      	movs	r0, #21
    3df8:	4b16      	ldr	r3, [pc, #88]	; (3e54 <_ext_irq_init+0x184>)
    3dfa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    3dfc:	2015      	movs	r0, #21
    3dfe:	4b16      	ldr	r3, [pc, #88]	; (3e58 <_ext_irq_init+0x188>)
    3e00:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    3e02:	2015      	movs	r0, #21
    3e04:	4b15      	ldr	r3, [pc, #84]	; (3e5c <_ext_irq_init+0x18c>)
    3e06:	4798      	blx	r3

	callback = cb;
    3e08:	4a15      	ldr	r2, [pc, #84]	; (3e60 <_ext_irq_init+0x190>)
    3e0a:	687b      	ldr	r3, [r7, #4]
    3e0c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    3e0e:	2300      	movs	r3, #0
}
    3e10:	4618      	mov	r0, r3
    3e12:	3708      	adds	r7, #8
    3e14:	46bd      	mov	sp, r7
    3e16:	bd80      	pop	{r7, pc}
    3e18:	40002800 	.word	0x40002800
    3e1c:	00003ac9 	.word	0x00003ac9
    3e20:	00003bc1 	.word	0x00003bc1
    3e24:	00003b51 	.word	0x00003b51
    3e28:	00003aa5 	.word	0x00003aa5
    3e2c:	00003bf1 	.word	0x00003bf1
    3e30:	00003b7d 	.word	0x00003b7d
    3e34:	00003c19 	.word	0x00003c19
    3e38:	00003c37 	.word	0x00003c37
    3e3c:	00003c53 	.word	0x00003c53
    3e40:	00003c97 	.word	0x00003c97
    3e44:	00003cb3 	.word	0x00003cb3
    3e48:	90999013 	.word	0x90999013
    3e4c:	00003c6f 	.word	0x00003c6f
    3e50:	00003b25 	.word	0x00003b25
    3e54:	00003a25 	.word	0x00003a25
    3e58:	00003a69 	.word	0x00003a69
    3e5c:	000039e9 	.word	0x000039e9
    3e60:	20000828 	.word	0x20000828

00003e64 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    3e64:	b580      	push	{r7, lr}
    3e66:	b084      	sub	sp, #16
    3e68:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    3e6a:	4841      	ldr	r0, [pc, #260]	; (3f70 <_ext_irq_handler+0x10c>)
    3e6c:	4b41      	ldr	r3, [pc, #260]	; (3f74 <_ext_irq_handler+0x110>)
    3e6e:	4798      	blx	r3
    3e70:	4603      	mov	r3, r0
    3e72:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    3e74:	f04f 33ff 	mov.w	r3, #4294967295
    3e78:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    3e7a:	683b      	ldr	r3, [r7, #0]
    3e7c:	4619      	mov	r1, r3
    3e7e:	483c      	ldr	r0, [pc, #240]	; (3f70 <_ext_irq_handler+0x10c>)
    3e80:	4b3d      	ldr	r3, [pc, #244]	; (3f78 <_ext_irq_handler+0x114>)
    3e82:	4798      	blx	r3

	ASSERT(callback);
    3e84:	4b3d      	ldr	r3, [pc, #244]	; (3f7c <_ext_irq_handler+0x118>)
    3e86:	681b      	ldr	r3, [r3, #0]
    3e88:	2b00      	cmp	r3, #0
    3e8a:	bf14      	ite	ne
    3e8c:	2301      	movne	r3, #1
    3e8e:	2300      	moveq	r3, #0
    3e90:	b2db      	uxtb	r3, r3
    3e92:	f44f 7284 	mov.w	r2, #264	; 0x108
    3e96:	493a      	ldr	r1, [pc, #232]	; (3f80 <_ext_irq_handler+0x11c>)
    3e98:	4618      	mov	r0, r3
    3e9a:	4b3a      	ldr	r3, [pc, #232]	; (3f84 <_ext_irq_handler+0x120>)
    3e9c:	4798      	blx	r3

	while (flags) {
    3e9e:	e060      	b.n	3f62 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    3ea0:	683b      	ldr	r3, [r7, #0]
    3ea2:	4618      	mov	r0, r3
    3ea4:	4b38      	ldr	r3, [pc, #224]	; (3f88 <_ext_irq_handler+0x124>)
    3ea6:	4798      	blx	r3
    3ea8:	4603      	mov	r3, r0
    3eaa:	b2db      	uxtb	r3, r3
    3eac:	3b01      	subs	r3, #1
    3eae:	b2db      	uxtb	r3, r3
    3eb0:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    3eb2:	e047      	b.n	3f44 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    3eb4:	2300      	movs	r3, #0
    3eb6:	71fb      	strb	r3, [r7, #7]
    3eb8:	2309      	movs	r3, #9
    3eba:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    3ebc:	e024      	b.n	3f08 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    3ebe:	79ba      	ldrb	r2, [r7, #6]
    3ec0:	79fb      	ldrb	r3, [r7, #7]
    3ec2:	4413      	add	r3, r2
    3ec4:	105b      	asrs	r3, r3, #1
    3ec6:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    3ec8:	797b      	ldrb	r3, [r7, #5]
    3eca:	4a30      	ldr	r2, [pc, #192]	; (3f8c <_ext_irq_handler+0x128>)
    3ecc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    3ed0:	461a      	mov	r2, r3
    3ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3ed6:	429a      	cmp	r2, r3
    3ed8:	d106      	bne.n	3ee8 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    3eda:	797b      	ldrb	r3, [r7, #5]
    3edc:	4a2b      	ldr	r2, [pc, #172]	; (3f8c <_ext_irq_handler+0x128>)
    3ede:	00db      	lsls	r3, r3, #3
    3ee0:	4413      	add	r3, r2
    3ee2:	685b      	ldr	r3, [r3, #4]
    3ee4:	60bb      	str	r3, [r7, #8]
					break;
    3ee6:	e013      	b.n	3f10 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    3ee8:	797b      	ldrb	r3, [r7, #5]
    3eea:	4a28      	ldr	r2, [pc, #160]	; (3f8c <_ext_irq_handler+0x128>)
    3eec:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    3ef0:	461a      	mov	r2, r3
    3ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3ef6:	429a      	cmp	r2, r3
    3ef8:	da03      	bge.n	3f02 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    3efa:	797b      	ldrb	r3, [r7, #5]
    3efc:	3301      	adds	r3, #1
    3efe:	71fb      	strb	r3, [r7, #7]
    3f00:	e002      	b.n	3f08 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    3f02:	797b      	ldrb	r3, [r7, #5]
    3f04:	3b01      	subs	r3, #1
    3f06:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    3f08:	79ba      	ldrb	r2, [r7, #6]
    3f0a:	79fb      	ldrb	r3, [r7, #7]
    3f0c:	429a      	cmp	r2, r3
    3f0e:	d2d6      	bcs.n	3ebe <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    3f10:	68bb      	ldr	r3, [r7, #8]
    3f12:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f16:	d003      	beq.n	3f20 <_ext_irq_handler+0xbc>
				callback(pin);
    3f18:	4b18      	ldr	r3, [pc, #96]	; (3f7c <_ext_irq_handler+0x118>)
    3f1a:	681b      	ldr	r3, [r3, #0]
    3f1c:	68b8      	ldr	r0, [r7, #8]
    3f1e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    3f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3f24:	2201      	movs	r2, #1
    3f26:	fa02 f303 	lsl.w	r3, r2, r3
    3f2a:	43da      	mvns	r2, r3
    3f2c:	683b      	ldr	r3, [r7, #0]
    3f2e:	4013      	ands	r3, r2
    3f30:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    3f32:	683b      	ldr	r3, [r7, #0]
    3f34:	4618      	mov	r0, r3
    3f36:	4b14      	ldr	r3, [pc, #80]	; (3f88 <_ext_irq_handler+0x124>)
    3f38:	4798      	blx	r3
    3f3a:	4603      	mov	r3, r0
    3f3c:	b2db      	uxtb	r3, r3
    3f3e:	3b01      	subs	r3, #1
    3f40:	b2db      	uxtb	r3, r3
    3f42:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    3f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3f48:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f4c:	d1b2      	bne.n	3eb4 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    3f4e:	4808      	ldr	r0, [pc, #32]	; (3f70 <_ext_irq_handler+0x10c>)
    3f50:	4b08      	ldr	r3, [pc, #32]	; (3f74 <_ext_irq_handler+0x110>)
    3f52:	4798      	blx	r3
    3f54:	4603      	mov	r3, r0
    3f56:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    3f58:	683b      	ldr	r3, [r7, #0]
    3f5a:	4619      	mov	r1, r3
    3f5c:	4804      	ldr	r0, [pc, #16]	; (3f70 <_ext_irq_handler+0x10c>)
    3f5e:	4b06      	ldr	r3, [pc, #24]	; (3f78 <_ext_irq_handler+0x114>)
    3f60:	4798      	blx	r3
	while (flags) {
    3f62:	683b      	ldr	r3, [r7, #0]
    3f64:	2b00      	cmp	r3, #0
    3f66:	d19b      	bne.n	3ea0 <_ext_irq_handler+0x3c>
	}
}
    3f68:	bf00      	nop
    3f6a:	3710      	adds	r7, #16
    3f6c:	46bd      	mov	sp, r7
    3f6e:	bd80      	pop	{r7, pc}
    3f70:	40002800 	.word	0x40002800
    3f74:	00003af1 	.word	0x00003af1
    3f78:	00003b09 	.word	0x00003b09
    3f7c:	20000828 	.word	0x20000828
    3f80:	0000d08c 	.word	0x0000d08c
    3f84:	00002dd1 	.word	0x00002dd1
    3f88:	0000cbb9 	.word	0x0000cbb9
    3f8c:	0000d044 	.word	0x0000d044

00003f90 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    3f90:	b580      	push	{r7, lr}
    3f92:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    3f94:	4b01      	ldr	r3, [pc, #4]	; (3f9c <EIC_0_Handler+0xc>)
    3f96:	4798      	blx	r3
} /**
    3f98:	bf00      	nop
    3f9a:	bd80      	pop	{r7, pc}
    3f9c:	00003e65 	.word	0x00003e65

00003fa0 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    3fa0:	b580      	push	{r7, lr}
    3fa2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    3fa4:	4b01      	ldr	r3, [pc, #4]	; (3fac <EIC_1_Handler+0xc>)
    3fa6:	4798      	blx	r3
} /**
    3fa8:	bf00      	nop
    3faa:	bd80      	pop	{r7, pc}
    3fac:	00003e65 	.word	0x00003e65

00003fb0 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    3fb0:	b580      	push	{r7, lr}
    3fb2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    3fb4:	4b01      	ldr	r3, [pc, #4]	; (3fbc <EIC_3_Handler+0xc>)
    3fb6:	4798      	blx	r3
} /**
    3fb8:	bf00      	nop
    3fba:	bd80      	pop	{r7, pc}
    3fbc:	00003e65 	.word	0x00003e65

00003fc0 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    3fc0:	b580      	push	{r7, lr}
    3fc2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    3fc4:	4b01      	ldr	r3, [pc, #4]	; (3fcc <EIC_4_Handler+0xc>)
    3fc6:	4798      	blx	r3
} /**
    3fc8:	bf00      	nop
    3fca:	bd80      	pop	{r7, pc}
    3fcc:	00003e65 	.word	0x00003e65

00003fd0 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    3fd0:	b580      	push	{r7, lr}
    3fd2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    3fd4:	4b01      	ldr	r3, [pc, #4]	; (3fdc <EIC_5_Handler+0xc>)
    3fd6:	4798      	blx	r3
} /**
    3fd8:	bf00      	nop
    3fda:	bd80      	pop	{r7, pc}
    3fdc:	00003e65 	.word	0x00003e65

00003fe0 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    3fe0:	b580      	push	{r7, lr}
    3fe2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    3fe4:	4b01      	ldr	r3, [pc, #4]	; (3fec <EIC_6_Handler+0xc>)
    3fe6:	4798      	blx	r3
} /**
    3fe8:	bf00      	nop
    3fea:	bd80      	pop	{r7, pc}
    3fec:	00003e65 	.word	0x00003e65

00003ff0 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    3ff0:	b580      	push	{r7, lr}
    3ff2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    3ff4:	4b01      	ldr	r3, [pc, #4]	; (3ffc <EIC_7_Handler+0xc>)
    3ff6:	4798      	blx	r3
} /**
    3ff8:	bf00      	nop
    3ffa:	bd80      	pop	{r7, pc}
    3ffc:	00003e65 	.word	0x00003e65

00004000 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4000:	b580      	push	{r7, lr}
    4002:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4004:	4b01      	ldr	r3, [pc, #4]	; (400c <EIC_8_Handler+0xc>)
    4006:	4798      	blx	r3
} /**
    4008:	bf00      	nop
    400a:	bd80      	pop	{r7, pc}
    400c:	00003e65 	.word	0x00003e65

00004010 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4010:	b580      	push	{r7, lr}
    4012:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4014:	4b01      	ldr	r3, [pc, #4]	; (401c <EIC_9_Handler+0xc>)
    4016:	4798      	blx	r3
}
    4018:	bf00      	nop
    401a:	bd80      	pop	{r7, pc}
    401c:	00003e65 	.word	0x00003e65

00004020 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4020:	b480      	push	{r7}
    4022:	b085      	sub	sp, #20
    4024:	af00      	add	r7, sp, #0
    4026:	60f8      	str	r0, [r7, #12]
    4028:	460b      	mov	r3, r1
    402a:	607a      	str	r2, [r7, #4]
    402c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    402e:	7afa      	ldrb	r2, [r7, #11]
    4030:	68fb      	ldr	r3, [r7, #12]
    4032:	3248      	adds	r2, #72	; 0x48
    4034:	6879      	ldr	r1, [r7, #4]
    4036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    403a:	bf00      	nop
    403c:	3714      	adds	r7, #20
    403e:	46bd      	mov	sp, r7
    4040:	f85d 7b04 	ldr.w	r7, [sp], #4
    4044:	4770      	bx	lr

00004046 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4046:	b480      	push	{r7}
    4048:	b083      	sub	sp, #12
    404a:	af00      	add	r7, sp, #0
    404c:	6078      	str	r0, [r7, #4]
    404e:	460b      	mov	r3, r1
    4050:	70fb      	strb	r3, [r7, #3]
    4052:	4613      	mov	r3, r2
    4054:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4056:	78fb      	ldrb	r3, [r7, #3]
    4058:	687a      	ldr	r2, [r7, #4]
    405a:	3304      	adds	r3, #4
    405c:	00db      	lsls	r3, r3, #3
    405e:	4413      	add	r3, r2
    4060:	78ba      	ldrb	r2, [r7, #2]
    4062:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4064:	78fb      	ldrb	r3, [r7, #3]
    4066:	78ba      	ldrb	r2, [r7, #2]
    4068:	43d2      	mvns	r2, r2
    406a:	b2d1      	uxtb	r1, r2
    406c:	687a      	ldr	r2, [r7, #4]
    406e:	3304      	adds	r3, #4
    4070:	00db      	lsls	r3, r3, #3
    4072:	4413      	add	r3, r2
    4074:	460a      	mov	r2, r1
    4076:	711a      	strb	r2, [r3, #4]
}
    4078:	bf00      	nop
    407a:	370c      	adds	r7, #12
    407c:	46bd      	mov	sp, r7
    407e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4082:	4770      	bx	lr

00004084 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4084:	b480      	push	{r7}
    4086:	b085      	sub	sp, #20
    4088:	af00      	add	r7, sp, #0
    408a:	60f8      	str	r0, [r7, #12]
    408c:	460b      	mov	r3, r1
    408e:	607a      	str	r2, [r7, #4]
    4090:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4092:	7afa      	ldrb	r2, [r7, #11]
    4094:	68fb      	ldr	r3, [r7, #12]
    4096:	3204      	adds	r2, #4
    4098:	6879      	ldr	r1, [r7, #4]
    409a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    409e:	bf00      	nop
    40a0:	3714      	adds	r7, #20
    40a2:	46bd      	mov	sp, r7
    40a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    40a8:	4770      	bx	lr
	...

000040ac <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    40ac:	b580      	push	{r7, lr}
    40ae:	b082      	sub	sp, #8
    40b0:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    40b2:	2300      	movs	r3, #0
    40b4:	71fb      	strb	r3, [r7, #7]
    40b6:	e00b      	b.n	40d0 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    40b8:	79fb      	ldrb	r3, [r7, #7]
    40ba:	4a18      	ldr	r2, [pc, #96]	; (411c <_event_system_init+0x70>)
    40bc:	5cd3      	ldrb	r3, [r2, r3]
    40be:	461a      	mov	r2, r3
    40c0:	79fb      	ldrb	r3, [r7, #7]
    40c2:	4619      	mov	r1, r3
    40c4:	4816      	ldr	r0, [pc, #88]	; (4120 <_event_system_init+0x74>)
    40c6:	4b17      	ldr	r3, [pc, #92]	; (4124 <_event_system_init+0x78>)
    40c8:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    40ca:	79fb      	ldrb	r3, [r7, #7]
    40cc:	3301      	adds	r3, #1
    40ce:	71fb      	strb	r3, [r7, #7]
    40d0:	79fb      	ldrb	r3, [r7, #7]
    40d2:	2b42      	cmp	r3, #66	; 0x42
    40d4:	d9f0      	bls.n	40b8 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    40d6:	2300      	movs	r3, #0
    40d8:	71fb      	strb	r3, [r7, #7]
    40da:	e016      	b.n	410a <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    40dc:	79fb      	ldrb	r3, [r7, #7]
    40de:	4a12      	ldr	r2, [pc, #72]	; (4128 <_event_system_init+0x7c>)
    40e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    40e4:	461a      	mov	r2, r3
    40e6:	79fb      	ldrb	r3, [r7, #7]
    40e8:	4619      	mov	r1, r3
    40ea:	480d      	ldr	r0, [pc, #52]	; (4120 <_event_system_init+0x74>)
    40ec:	4b0f      	ldr	r3, [pc, #60]	; (412c <_event_system_init+0x80>)
    40ee:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    40f0:	79fb      	ldrb	r3, [r7, #7]
    40f2:	4a0f      	ldr	r2, [pc, #60]	; (4130 <_event_system_init+0x84>)
    40f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    40f8:	b2da      	uxtb	r2, r3
    40fa:	79fb      	ldrb	r3, [r7, #7]
    40fc:	4619      	mov	r1, r3
    40fe:	4808      	ldr	r0, [pc, #32]	; (4120 <_event_system_init+0x74>)
    4100:	4b0c      	ldr	r3, [pc, #48]	; (4134 <_event_system_init+0x88>)
    4102:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4104:	79fb      	ldrb	r3, [r7, #7]
    4106:	3301      	adds	r3, #1
    4108:	71fb      	strb	r3, [r7, #7]
    410a:	79fb      	ldrb	r3, [r7, #7]
    410c:	2b1f      	cmp	r3, #31
    410e:	d9e5      	bls.n	40dc <_event_system_init+0x30>
	}

	return ERR_NONE;
    4110:	2300      	movs	r3, #0
}
    4112:	4618      	mov	r0, r3
    4114:	3708      	adds	r7, #8
    4116:	46bd      	mov	sp, r7
    4118:	bd80      	pop	{r7, pc}
    411a:	bf00      	nop
    411c:	0000d0a4 	.word	0x0000d0a4
    4120:	4100e000 	.word	0x4100e000
    4124:	00004021 	.word	0x00004021
    4128:	0000d0e8 	.word	0x0000d0e8
    412c:	00004085 	.word	0x00004085
    4130:	0000d128 	.word	0x0000d128
    4134:	00004047 	.word	0x00004047

00004138 <hri_gclk_wait_for_sync>:
{
    4138:	b480      	push	{r7}
    413a:	b083      	sub	sp, #12
    413c:	af00      	add	r7, sp, #0
    413e:	6078      	str	r0, [r7, #4]
    4140:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4142:	bf00      	nop
    4144:	687b      	ldr	r3, [r7, #4]
    4146:	685a      	ldr	r2, [r3, #4]
    4148:	683b      	ldr	r3, [r7, #0]
    414a:	4013      	ands	r3, r2
    414c:	2b00      	cmp	r3, #0
    414e:	d1f9      	bne.n	4144 <hri_gclk_wait_for_sync+0xc>
}
    4150:	bf00      	nop
    4152:	370c      	adds	r7, #12
    4154:	46bd      	mov	sp, r7
    4156:	f85d 7b04 	ldr.w	r7, [sp], #4
    415a:	4770      	bx	lr

0000415c <hri_gclk_write_GENCTRL_reg>:
{
    415c:	b580      	push	{r7, lr}
    415e:	b084      	sub	sp, #16
    4160:	af00      	add	r7, sp, #0
    4162:	60f8      	str	r0, [r7, #12]
    4164:	460b      	mov	r3, r1
    4166:	607a      	str	r2, [r7, #4]
    4168:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    416a:	7afa      	ldrb	r2, [r7, #11]
    416c:	68fb      	ldr	r3, [r7, #12]
    416e:	3208      	adds	r2, #8
    4170:	6879      	ldr	r1, [r7, #4]
    4172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4176:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    417a:	68f8      	ldr	r0, [r7, #12]
    417c:	4b02      	ldr	r3, [pc, #8]	; (4188 <hri_gclk_write_GENCTRL_reg+0x2c>)
    417e:	4798      	blx	r3
}
    4180:	bf00      	nop
    4182:	3710      	adds	r7, #16
    4184:	46bd      	mov	sp, r7
    4186:	bd80      	pop	{r7, pc}
    4188:	00004139 	.word	0x00004139

0000418c <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    418c:	b580      	push	{r7, lr}
    418e:	b082      	sub	sp, #8
    4190:	af00      	add	r7, sp, #0
    4192:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4194:	687b      	ldr	r3, [r7, #4]
    4196:	f003 0301 	and.w	r3, r3, #1
    419a:	2b00      	cmp	r3, #0
    419c:	d004      	beq.n	41a8 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    419e:	4a3b      	ldr	r2, [pc, #236]	; (428c <_gclk_init_generators_by_fref+0x100>)
    41a0:	2100      	movs	r1, #0
    41a2:	483b      	ldr	r0, [pc, #236]	; (4290 <_gclk_init_generators_by_fref+0x104>)
    41a4:	4b3b      	ldr	r3, [pc, #236]	; (4294 <_gclk_init_generators_by_fref+0x108>)
    41a6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	f003 0302 	and.w	r3, r3, #2
    41ae:	2b00      	cmp	r3, #0
    41b0:	d004      	beq.n	41bc <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    41b2:	4a39      	ldr	r2, [pc, #228]	; (4298 <_gclk_init_generators_by_fref+0x10c>)
    41b4:	2101      	movs	r1, #1
    41b6:	4836      	ldr	r0, [pc, #216]	; (4290 <_gclk_init_generators_by_fref+0x104>)
    41b8:	4b36      	ldr	r3, [pc, #216]	; (4294 <_gclk_init_generators_by_fref+0x108>)
    41ba:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    41bc:	687b      	ldr	r3, [r7, #4]
    41be:	f003 0304 	and.w	r3, r3, #4
    41c2:	2b00      	cmp	r3, #0
    41c4:	d004      	beq.n	41d0 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    41c6:	4a35      	ldr	r2, [pc, #212]	; (429c <_gclk_init_generators_by_fref+0x110>)
    41c8:	2102      	movs	r1, #2
    41ca:	4831      	ldr	r0, [pc, #196]	; (4290 <_gclk_init_generators_by_fref+0x104>)
    41cc:	4b31      	ldr	r3, [pc, #196]	; (4294 <_gclk_init_generators_by_fref+0x108>)
    41ce:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    41d0:	687b      	ldr	r3, [r7, #4]
    41d2:	f003 0308 	and.w	r3, r3, #8
    41d6:	2b00      	cmp	r3, #0
    41d8:	d004      	beq.n	41e4 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    41da:	4a31      	ldr	r2, [pc, #196]	; (42a0 <_gclk_init_generators_by_fref+0x114>)
    41dc:	2103      	movs	r1, #3
    41de:	482c      	ldr	r0, [pc, #176]	; (4290 <_gclk_init_generators_by_fref+0x104>)
    41e0:	4b2c      	ldr	r3, [pc, #176]	; (4294 <_gclk_init_generators_by_fref+0x108>)
    41e2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    41e4:	687b      	ldr	r3, [r7, #4]
    41e6:	f003 0310 	and.w	r3, r3, #16
    41ea:	2b00      	cmp	r3, #0
    41ec:	d004      	beq.n	41f8 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    41ee:	4a2d      	ldr	r2, [pc, #180]	; (42a4 <_gclk_init_generators_by_fref+0x118>)
    41f0:	2104      	movs	r1, #4
    41f2:	4827      	ldr	r0, [pc, #156]	; (4290 <_gclk_init_generators_by_fref+0x104>)
    41f4:	4b27      	ldr	r3, [pc, #156]	; (4294 <_gclk_init_generators_by_fref+0x108>)
    41f6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	f003 0320 	and.w	r3, r3, #32
    41fe:	2b00      	cmp	r3, #0
    4200:	d004      	beq.n	420c <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4202:	4a29      	ldr	r2, [pc, #164]	; (42a8 <_gclk_init_generators_by_fref+0x11c>)
    4204:	2105      	movs	r1, #5
    4206:	4822      	ldr	r0, [pc, #136]	; (4290 <_gclk_init_generators_by_fref+0x104>)
    4208:	4b22      	ldr	r3, [pc, #136]	; (4294 <_gclk_init_generators_by_fref+0x108>)
    420a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    420c:	687b      	ldr	r3, [r7, #4]
    420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4212:	2b00      	cmp	r3, #0
    4214:	d004      	beq.n	4220 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4216:	4a25      	ldr	r2, [pc, #148]	; (42ac <_gclk_init_generators_by_fref+0x120>)
    4218:	2106      	movs	r1, #6
    421a:	481d      	ldr	r0, [pc, #116]	; (4290 <_gclk_init_generators_by_fref+0x104>)
    421c:	4b1d      	ldr	r3, [pc, #116]	; (4294 <_gclk_init_generators_by_fref+0x108>)
    421e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4220:	687b      	ldr	r3, [r7, #4]
    4222:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4226:	2b00      	cmp	r3, #0
    4228:	d004      	beq.n	4234 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    422a:	4a21      	ldr	r2, [pc, #132]	; (42b0 <_gclk_init_generators_by_fref+0x124>)
    422c:	2107      	movs	r1, #7
    422e:	4818      	ldr	r0, [pc, #96]	; (4290 <_gclk_init_generators_by_fref+0x104>)
    4230:	4b18      	ldr	r3, [pc, #96]	; (4294 <_gclk_init_generators_by_fref+0x108>)
    4232:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    4234:	687b      	ldr	r3, [r7, #4]
    4236:	f403 7380 	and.w	r3, r3, #256	; 0x100
    423a:	2b00      	cmp	r3, #0
    423c:	d004      	beq.n	4248 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    423e:	4a1d      	ldr	r2, [pc, #116]	; (42b4 <_gclk_init_generators_by_fref+0x128>)
    4240:	2108      	movs	r1, #8
    4242:	4813      	ldr	r0, [pc, #76]	; (4290 <_gclk_init_generators_by_fref+0x104>)
    4244:	4b13      	ldr	r3, [pc, #76]	; (4294 <_gclk_init_generators_by_fref+0x108>)
    4246:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    4248:	687b      	ldr	r3, [r7, #4]
    424a:	f403 7300 	and.w	r3, r3, #512	; 0x200
    424e:	2b00      	cmp	r3, #0
    4250:	d004      	beq.n	425c <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    4252:	4a19      	ldr	r2, [pc, #100]	; (42b8 <_gclk_init_generators_by_fref+0x12c>)
    4254:	2109      	movs	r1, #9
    4256:	480e      	ldr	r0, [pc, #56]	; (4290 <_gclk_init_generators_by_fref+0x104>)
    4258:	4b0e      	ldr	r3, [pc, #56]	; (4294 <_gclk_init_generators_by_fref+0x108>)
    425a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    425c:	687b      	ldr	r3, [r7, #4]
    425e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4262:	2b00      	cmp	r3, #0
    4264:	d004      	beq.n	4270 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    4266:	4a15      	ldr	r2, [pc, #84]	; (42bc <_gclk_init_generators_by_fref+0x130>)
    4268:	210a      	movs	r1, #10
    426a:	4809      	ldr	r0, [pc, #36]	; (4290 <_gclk_init_generators_by_fref+0x104>)
    426c:	4b09      	ldr	r3, [pc, #36]	; (4294 <_gclk_init_generators_by_fref+0x108>)
    426e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4270:	687b      	ldr	r3, [r7, #4]
    4272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4276:	2b00      	cmp	r3, #0
    4278:	d004      	beq.n	4284 <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    427a:	4a11      	ldr	r2, [pc, #68]	; (42c0 <_gclk_init_generators_by_fref+0x134>)
    427c:	210b      	movs	r1, #11
    427e:	4804      	ldr	r0, [pc, #16]	; (4290 <_gclk_init_generators_by_fref+0x104>)
    4280:	4b04      	ldr	r3, [pc, #16]	; (4294 <_gclk_init_generators_by_fref+0x108>)
    4282:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4284:	bf00      	nop
    4286:	3708      	adds	r7, #8
    4288:	46bd      	mov	sp, r7
    428a:	bd80      	pop	{r7, pc}
    428c:	00010107 	.word	0x00010107
    4290:	40001c00 	.word	0x40001c00
    4294:	0000415d 	.word	0x0000415d
    4298:	00010907 	.word	0x00010907
    429c:	00010906 	.word	0x00010906
    42a0:	00020908 	.word	0x00020908
    42a4:	00010901 	.word	0x00010901
    42a8:	00062901 	.word	0x00062901
    42ac:	000c2901 	.word	0x000c2901
    42b0:	00082908 	.word	0x00082908
    42b4:	00032901 	.word	0x00032901
    42b8:	00011908 	.word	0x00011908
    42bc:	00010905 	.word	0x00010905
    42c0:	00041905 	.word	0x00041905

000042c4 <hri_mclk_write_CPUDIV_reg>:
{
    42c4:	b480      	push	{r7}
    42c6:	b083      	sub	sp, #12
    42c8:	af00      	add	r7, sp, #0
    42ca:	6078      	str	r0, [r7, #4]
    42cc:	460b      	mov	r3, r1
    42ce:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    42d0:	687b      	ldr	r3, [r7, #4]
    42d2:	78fa      	ldrb	r2, [r7, #3]
    42d4:	715a      	strb	r2, [r3, #5]
}
    42d6:	bf00      	nop
    42d8:	370c      	adds	r7, #12
    42da:	46bd      	mov	sp, r7
    42dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    42e0:	4770      	bx	lr
	...

000042e4 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    42e4:	b580      	push	{r7, lr}
    42e6:	b082      	sub	sp, #8
    42e8:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    42ea:	4b05      	ldr	r3, [pc, #20]	; (4300 <_mclk_init+0x1c>)
    42ec:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    42ee:	2101      	movs	r1, #1
    42f0:	6878      	ldr	r0, [r7, #4]
    42f2:	4b04      	ldr	r3, [pc, #16]	; (4304 <_mclk_init+0x20>)
    42f4:	4798      	blx	r3
}
    42f6:	bf00      	nop
    42f8:	3708      	adds	r7, #8
    42fa:	46bd      	mov	sp, r7
    42fc:	bd80      	pop	{r7, pc}
    42fe:	bf00      	nop
    4300:	40000800 	.word	0x40000800
    4304:	000042c5 	.word	0x000042c5

00004308 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4308:	b480      	push	{r7}
    430a:	b083      	sub	sp, #12
    430c:	af00      	add	r7, sp, #0
    430e:	6078      	str	r0, [r7, #4]
    4310:	460b      	mov	r3, r1
    4312:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4314:	687b      	ldr	r3, [r7, #4]
    4316:	78fa      	ldrb	r2, [r7, #3]
    4318:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    431a:	bf00      	nop
    431c:	370c      	adds	r7, #12
    431e:	46bd      	mov	sp, r7
    4320:	f85d 7b04 	ldr.w	r7, [sp], #4
    4324:	4770      	bx	lr

00004326 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4326:	b480      	push	{r7}
    4328:	b083      	sub	sp, #12
    432a:	af00      	add	r7, sp, #0
    432c:	6078      	str	r0, [r7, #4]
    432e:	460b      	mov	r3, r1
    4330:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4332:	687b      	ldr	r3, [r7, #4]
    4334:	887a      	ldrh	r2, [r7, #2]
    4336:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4338:	bf00      	nop
    433a:	370c      	adds	r7, #12
    433c:	46bd      	mov	sp, r7
    433e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4342:	4770      	bx	lr

00004344 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4344:	b480      	push	{r7}
    4346:	b083      	sub	sp, #12
    4348:	af00      	add	r7, sp, #0
    434a:	6078      	str	r0, [r7, #4]
    434c:	460b      	mov	r3, r1
    434e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4350:	687b      	ldr	r3, [r7, #4]
    4352:	78fa      	ldrb	r2, [r7, #3]
    4354:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4356:	bf00      	nop
    4358:	370c      	adds	r7, #12
    435a:	46bd      	mov	sp, r7
    435c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4360:	4770      	bx	lr

00004362 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4362:	b480      	push	{r7}
    4364:	b083      	sub	sp, #12
    4366:	af00      	add	r7, sp, #0
    4368:	6078      	str	r0, [r7, #4]
    436a:	460b      	mov	r3, r1
    436c:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    436e:	687b      	ldr	r3, [r7, #4]
    4370:	78fa      	ldrb	r2, [r7, #3]
    4372:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4374:	bf00      	nop
    4376:	370c      	adds	r7, #12
    4378:	46bd      	mov	sp, r7
    437a:	f85d 7b04 	ldr.w	r7, [sp], #4
    437e:	4770      	bx	lr

00004380 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4380:	b480      	push	{r7}
    4382:	b085      	sub	sp, #20
    4384:	af00      	add	r7, sp, #0
    4386:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4388:	687b      	ldr	r3, [r7, #4]
    438a:	69db      	ldr	r3, [r3, #28]
    438c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    438e:	68fb      	ldr	r3, [r7, #12]
    4390:	0a1b      	lsrs	r3, r3, #8
    4392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4396:	60fb      	str	r3, [r7, #12]
	return tmp;
    4398:	68fb      	ldr	r3, [r7, #12]
}
    439a:	4618      	mov	r0, r3
    439c:	3714      	adds	r7, #20
    439e:	46bd      	mov	sp, r7
    43a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    43a4:	4770      	bx	lr

000043a6 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    43a6:	b480      	push	{r7}
    43a8:	b083      	sub	sp, #12
    43aa:	af00      	add	r7, sp, #0
    43ac:	6078      	str	r0, [r7, #4]
    43ae:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    43b0:	687b      	ldr	r3, [r7, #4]
    43b2:	683a      	ldr	r2, [r7, #0]
    43b4:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    43b6:	bf00      	nop
    43b8:	370c      	adds	r7, #12
    43ba:	46bd      	mov	sp, r7
    43bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    43c0:	4770      	bx	lr
	...

000043c4 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    43c4:	b580      	push	{r7, lr}
    43c6:	b082      	sub	sp, #8
    43c8:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    43ca:	4b13      	ldr	r3, [pc, #76]	; (4418 <_osc32kctrl_init_sources+0x54>)
    43cc:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    43ce:	2300      	movs	r3, #0
    43d0:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    43d2:	f242 018e 	movw	r1, #8334	; 0x208e
    43d6:	6878      	ldr	r0, [r7, #4]
    43d8:	4b10      	ldr	r3, [pc, #64]	; (441c <_osc32kctrl_init_sources+0x58>)
    43da:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    43dc:	2100      	movs	r1, #0
    43de:	6878      	ldr	r0, [r7, #4]
    43e0:	4b0f      	ldr	r3, [pc, #60]	; (4420 <_osc32kctrl_init_sources+0x5c>)
    43e2:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    43e4:	2100      	movs	r1, #0
    43e6:	6878      	ldr	r0, [r7, #4]
    43e8:	4b0e      	ldr	r3, [pc, #56]	; (4424 <_osc32kctrl_init_sources+0x60>)
    43ea:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    43ec:	6878      	ldr	r0, [r7, #4]
    43ee:	4b0e      	ldr	r3, [pc, #56]	; (4428 <_osc32kctrl_init_sources+0x64>)
    43f0:	4798      	blx	r3
    43f2:	4603      	mov	r3, r0
    43f4:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    43f6:	887b      	ldrh	r3, [r7, #2]
    43f8:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    43fa:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    43fe:	4619      	mov	r1, r3
    4400:	6878      	ldr	r0, [r7, #4]
    4402:	4b0a      	ldr	r3, [pc, #40]	; (442c <_osc32kctrl_init_sources+0x68>)
    4404:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4406:	2100      	movs	r1, #0
    4408:	6878      	ldr	r0, [r7, #4]
    440a:	4b09      	ldr	r3, [pc, #36]	; (4430 <_osc32kctrl_init_sources+0x6c>)
    440c:	4798      	blx	r3
	(void)calib;
}
    440e:	bf00      	nop
    4410:	3708      	adds	r7, #8
    4412:	46bd      	mov	sp, r7
    4414:	bd80      	pop	{r7, pc}
    4416:	bf00      	nop
    4418:	40001400 	.word	0x40001400
    441c:	00004327 	.word	0x00004327
    4420:	00004345 	.word	0x00004345
    4424:	00004363 	.word	0x00004363
    4428:	00004381 	.word	0x00004381
    442c:	000043a7 	.word	0x000043a7
    4430:	00004309 	.word	0x00004309

00004434 <hri_gclk_wait_for_sync>:
{
    4434:	b480      	push	{r7}
    4436:	b083      	sub	sp, #12
    4438:	af00      	add	r7, sp, #0
    443a:	6078      	str	r0, [r7, #4]
    443c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    443e:	bf00      	nop
    4440:	687b      	ldr	r3, [r7, #4]
    4442:	685a      	ldr	r2, [r3, #4]
    4444:	683b      	ldr	r3, [r7, #0]
    4446:	4013      	ands	r3, r2
    4448:	2b00      	cmp	r3, #0
    444a:	d1f9      	bne.n	4440 <hri_gclk_wait_for_sync+0xc>
}
    444c:	bf00      	nop
    444e:	370c      	adds	r7, #12
    4450:	46bd      	mov	sp, r7
    4452:	f85d 7b04 	ldr.w	r7, [sp], #4
    4456:	4770      	bx	lr

00004458 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4458:	b480      	push	{r7}
    445a:	b083      	sub	sp, #12
    445c:	af00      	add	r7, sp, #0
    445e:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4460:	687b      	ldr	r3, [r7, #4]
    4462:	685b      	ldr	r3, [r3, #4]
    4464:	089b      	lsrs	r3, r3, #2
    4466:	f003 0301 	and.w	r3, r3, #1
    446a:	2b00      	cmp	r3, #0
    446c:	bf14      	ite	ne
    446e:	2301      	movne	r3, #1
    4470:	2300      	moveq	r3, #0
    4472:	b2db      	uxtb	r3, r3
}
    4474:	4618      	mov	r0, r3
    4476:	370c      	adds	r7, #12
    4478:	46bd      	mov	sp, r7
    447a:	f85d 7b04 	ldr.w	r7, [sp], #4
    447e:	4770      	bx	lr

00004480 <hri_gclk_read_SYNCBUSY_reg>:
{
    4480:	b480      	push	{r7}
    4482:	b083      	sub	sp, #12
    4484:	af00      	add	r7, sp, #0
    4486:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4488:	687b      	ldr	r3, [r7, #4]
    448a:	685b      	ldr	r3, [r3, #4]
}
    448c:	4618      	mov	r0, r3
    448e:	370c      	adds	r7, #12
    4490:	46bd      	mov	sp, r7
    4492:	f85d 7b04 	ldr.w	r7, [sp], #4
    4496:	4770      	bx	lr

00004498 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4498:	b580      	push	{r7, lr}
    449a:	b086      	sub	sp, #24
    449c:	af00      	add	r7, sp, #0
    449e:	60f8      	str	r0, [r7, #12]
    44a0:	460b      	mov	r3, r1
    44a2:	607a      	str	r2, [r7, #4]
    44a4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    44a6:	7afa      	ldrb	r2, [r7, #11]
    44a8:	68fb      	ldr	r3, [r7, #12]
    44aa:	3208      	adds	r2, #8
    44ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    44b0:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    44b2:	697b      	ldr	r3, [r7, #20]
    44b4:	f023 030f 	bic.w	r3, r3, #15
    44b8:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    44ba:	687b      	ldr	r3, [r7, #4]
    44bc:	f003 030f 	and.w	r3, r3, #15
    44c0:	697a      	ldr	r2, [r7, #20]
    44c2:	4313      	orrs	r3, r2
    44c4:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    44c6:	7afa      	ldrb	r2, [r7, #11]
    44c8:	68fb      	ldr	r3, [r7, #12]
    44ca:	3208      	adds	r2, #8
    44cc:	6979      	ldr	r1, [r7, #20]
    44ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    44d2:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    44d6:	68f8      	ldr	r0, [r7, #12]
    44d8:	4b02      	ldr	r3, [pc, #8]	; (44e4 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    44da:	4798      	blx	r3
}
    44dc:	bf00      	nop
    44de:	3718      	adds	r7, #24
    44e0:	46bd      	mov	sp, r7
    44e2:	bd80      	pop	{r7, pc}
    44e4:	00004435 	.word	0x00004435

000044e8 <hri_gclk_write_PCHCTRL_reg>:
{
    44e8:	b480      	push	{r7}
    44ea:	b085      	sub	sp, #20
    44ec:	af00      	add	r7, sp, #0
    44ee:	60f8      	str	r0, [r7, #12]
    44f0:	460b      	mov	r3, r1
    44f2:	607a      	str	r2, [r7, #4]
    44f4:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    44f6:	7afa      	ldrb	r2, [r7, #11]
    44f8:	68fb      	ldr	r3, [r7, #12]
    44fa:	3220      	adds	r2, #32
    44fc:	6879      	ldr	r1, [r7, #4]
    44fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4502:	bf00      	nop
    4504:	3714      	adds	r7, #20
    4506:	46bd      	mov	sp, r7
    4508:	f85d 7b04 	ldr.w	r7, [sp], #4
    450c:	4770      	bx	lr

0000450e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    450e:	b480      	push	{r7}
    4510:	b085      	sub	sp, #20
    4512:	af00      	add	r7, sp, #0
    4514:	60f8      	str	r0, [r7, #12]
    4516:	460b      	mov	r3, r1
    4518:	607a      	str	r2, [r7, #4]
    451a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    451c:	bf00      	nop
    451e:	7afa      	ldrb	r2, [r7, #11]
    4520:	68f9      	ldr	r1, [r7, #12]
    4522:	4613      	mov	r3, r2
    4524:	009b      	lsls	r3, r3, #2
    4526:	4413      	add	r3, r2
    4528:	009b      	lsls	r3, r3, #2
    452a:	440b      	add	r3, r1
    452c:	333c      	adds	r3, #60	; 0x3c
    452e:	681a      	ldr	r2, [r3, #0]
    4530:	687b      	ldr	r3, [r7, #4]
    4532:	4013      	ands	r3, r2
    4534:	2b00      	cmp	r3, #0
    4536:	d1f2      	bne.n	451e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4538:	bf00      	nop
    453a:	3714      	adds	r7, #20
    453c:	46bd      	mov	sp, r7
    453e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4542:	4770      	bx	lr

00004544 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4544:	b480      	push	{r7}
    4546:	b083      	sub	sp, #12
    4548:	af00      	add	r7, sp, #0
    454a:	6078      	str	r0, [r7, #4]
    454c:	460b      	mov	r3, r1
    454e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4550:	78fa      	ldrb	r2, [r7, #3]
    4552:	6879      	ldr	r1, [r7, #4]
    4554:	4613      	mov	r3, r2
    4556:	009b      	lsls	r3, r3, #2
    4558:	4413      	add	r3, r2
    455a:	009b      	lsls	r3, r3, #2
    455c:	440b      	add	r3, r1
    455e:	3340      	adds	r3, #64	; 0x40
    4560:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4562:	f003 0301 	and.w	r3, r3, #1
    4566:	2b00      	cmp	r3, #0
    4568:	bf14      	ite	ne
    456a:	2301      	movne	r3, #1
    456c:	2300      	moveq	r3, #0
    456e:	b2db      	uxtb	r3, r3
}
    4570:	4618      	mov	r0, r3
    4572:	370c      	adds	r7, #12
    4574:	46bd      	mov	sp, r7
    4576:	f85d 7b04 	ldr.w	r7, [sp], #4
    457a:	4770      	bx	lr

0000457c <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    457c:	b480      	push	{r7}
    457e:	b083      	sub	sp, #12
    4580:	af00      	add	r7, sp, #0
    4582:	6078      	str	r0, [r7, #4]
    4584:	460b      	mov	r3, r1
    4586:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4588:	78fa      	ldrb	r2, [r7, #3]
    458a:	6879      	ldr	r1, [r7, #4]
    458c:	4613      	mov	r3, r2
    458e:	009b      	lsls	r3, r3, #2
    4590:	4413      	add	r3, r2
    4592:	009b      	lsls	r3, r3, #2
    4594:	440b      	add	r3, r1
    4596:	3340      	adds	r3, #64	; 0x40
    4598:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    459a:	085b      	lsrs	r3, r3, #1
    459c:	f003 0301 	and.w	r3, r3, #1
    45a0:	2b00      	cmp	r3, #0
    45a2:	bf14      	ite	ne
    45a4:	2301      	movne	r3, #1
    45a6:	2300      	moveq	r3, #0
    45a8:	b2db      	uxtb	r3, r3
}
    45aa:	4618      	mov	r0, r3
    45ac:	370c      	adds	r7, #12
    45ae:	46bd      	mov	sp, r7
    45b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    45b4:	4770      	bx	lr
	...

000045b8 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    45b8:	b580      	push	{r7, lr}
    45ba:	b082      	sub	sp, #8
    45bc:	af00      	add	r7, sp, #0
    45be:	6078      	str	r0, [r7, #4]
    45c0:	460b      	mov	r3, r1
    45c2:	70fb      	strb	r3, [r7, #3]
    45c4:	4613      	mov	r3, r2
    45c6:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    45c8:	78fa      	ldrb	r2, [r7, #3]
    45ca:	6879      	ldr	r1, [r7, #4]
    45cc:	4613      	mov	r3, r2
    45ce:	009b      	lsls	r3, r3, #2
    45d0:	4413      	add	r3, r2
    45d2:	009b      	lsls	r3, r3, #2
    45d4:	440b      	add	r3, r1
    45d6:	3330      	adds	r3, #48	; 0x30
    45d8:	78ba      	ldrb	r2, [r7, #2]
    45da:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    45dc:	78fb      	ldrb	r3, [r7, #3]
    45de:	2202      	movs	r2, #2
    45e0:	4619      	mov	r1, r3
    45e2:	6878      	ldr	r0, [r7, #4]
    45e4:	4b02      	ldr	r3, [pc, #8]	; (45f0 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    45e6:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    45e8:	bf00      	nop
    45ea:	3708      	adds	r7, #8
    45ec:	46bd      	mov	sp, r7
    45ee:	bd80      	pop	{r7, pc}
    45f0:	0000450f 	.word	0x0000450f

000045f4 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    45f4:	b580      	push	{r7, lr}
    45f6:	b084      	sub	sp, #16
    45f8:	af00      	add	r7, sp, #0
    45fa:	60f8      	str	r0, [r7, #12]
    45fc:	460b      	mov	r3, r1
    45fe:	607a      	str	r2, [r7, #4]
    4600:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4602:	7afa      	ldrb	r2, [r7, #11]
    4604:	68f9      	ldr	r1, [r7, #12]
    4606:	4613      	mov	r3, r2
    4608:	009b      	lsls	r3, r3, #2
    460a:	4413      	add	r3, r2
    460c:	009b      	lsls	r3, r3, #2
    460e:	440b      	add	r3, r1
    4610:	3334      	adds	r3, #52	; 0x34
    4612:	687a      	ldr	r2, [r7, #4]
    4614:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4616:	7afb      	ldrb	r3, [r7, #11]
    4618:	2206      	movs	r2, #6
    461a:	4619      	mov	r1, r3
    461c:	68f8      	ldr	r0, [r7, #12]
    461e:	4b03      	ldr	r3, [pc, #12]	; (462c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4620:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4622:	bf00      	nop
    4624:	3710      	adds	r7, #16
    4626:	46bd      	mov	sp, r7
    4628:	bd80      	pop	{r7, pc}
    462a:	bf00      	nop
    462c:	0000450f 	.word	0x0000450f

00004630 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4630:	b480      	push	{r7}
    4632:	b085      	sub	sp, #20
    4634:	af00      	add	r7, sp, #0
    4636:	60f8      	str	r0, [r7, #12]
    4638:	460b      	mov	r3, r1
    463a:	607a      	str	r2, [r7, #4]
    463c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    463e:	7afa      	ldrb	r2, [r7, #11]
    4640:	68f9      	ldr	r1, [r7, #12]
    4642:	4613      	mov	r3, r2
    4644:	009b      	lsls	r3, r3, #2
    4646:	4413      	add	r3, r2
    4648:	009b      	lsls	r3, r3, #2
    464a:	440b      	add	r3, r1
    464c:	3338      	adds	r3, #56	; 0x38
    464e:	687a      	ldr	r2, [r7, #4]
    4650:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4652:	bf00      	nop
    4654:	3714      	adds	r7, #20
    4656:	46bd      	mov	sp, r7
    4658:	f85d 7b04 	ldr.w	r7, [sp], #4
    465c:	4770      	bx	lr

0000465e <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    465e:	b480      	push	{r7}
    4660:	b083      	sub	sp, #12
    4662:	af00      	add	r7, sp, #0
    4664:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4666:	687b      	ldr	r3, [r7, #4]
    4668:	691b      	ldr	r3, [r3, #16]
    466a:	085b      	lsrs	r3, r3, #1
    466c:	f003 0301 	and.w	r3, r3, #1
    4670:	2b00      	cmp	r3, #0
    4672:	bf14      	ite	ne
    4674:	2301      	movne	r3, #1
    4676:	2300      	moveq	r3, #0
    4678:	b2db      	uxtb	r3, r3
}
    467a:	4618      	mov	r0, r3
    467c:	370c      	adds	r7, #12
    467e:	46bd      	mov	sp, r7
    4680:	f85d 7b04 	ldr.w	r7, [sp], #4
    4684:	4770      	bx	lr

00004686 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4686:	b480      	push	{r7}
    4688:	b083      	sub	sp, #12
    468a:	af00      	add	r7, sp, #0
    468c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    468e:	687b      	ldr	r3, [r7, #4]
    4690:	691b      	ldr	r3, [r3, #16]
    4692:	0a1b      	lsrs	r3, r3, #8
    4694:	f003 0301 	and.w	r3, r3, #1
    4698:	2b00      	cmp	r3, #0
    469a:	bf14      	ite	ne
    469c:	2301      	movne	r3, #1
    469e:	2300      	moveq	r3, #0
    46a0:	b2db      	uxtb	r3, r3
}
    46a2:	4618      	mov	r0, r3
    46a4:	370c      	adds	r7, #12
    46a6:	46bd      	mov	sp, r7
    46a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    46ac:	4770      	bx	lr

000046ae <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    46ae:	b480      	push	{r7}
    46b0:	b085      	sub	sp, #20
    46b2:	af00      	add	r7, sp, #0
    46b4:	6078      	str	r0, [r7, #4]
    46b6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    46b8:	687b      	ldr	r3, [r7, #4]
    46ba:	691b      	ldr	r3, [r3, #16]
    46bc:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    46be:	68fa      	ldr	r2, [r7, #12]
    46c0:	683b      	ldr	r3, [r7, #0]
    46c2:	4013      	ands	r3, r2
    46c4:	60fb      	str	r3, [r7, #12]
	return tmp;
    46c6:	68fb      	ldr	r3, [r7, #12]
}
    46c8:	4618      	mov	r0, r3
    46ca:	3714      	adds	r7, #20
    46cc:	46bd      	mov	sp, r7
    46ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    46d2:	4770      	bx	lr

000046d4 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    46d4:	b480      	push	{r7}
    46d6:	b085      	sub	sp, #20
    46d8:	af00      	add	r7, sp, #0
    46da:	60f8      	str	r0, [r7, #12]
    46dc:	460b      	mov	r3, r1
    46de:	607a      	str	r2, [r7, #4]
    46e0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    46e2:	7afb      	ldrb	r3, [r7, #11]
    46e4:	68fa      	ldr	r2, [r7, #12]
    46e6:	3304      	adds	r3, #4
    46e8:	009b      	lsls	r3, r3, #2
    46ea:	4413      	add	r3, r2
    46ec:	687a      	ldr	r2, [r7, #4]
    46ee:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    46f0:	bf00      	nop
    46f2:	3714      	adds	r7, #20
    46f4:	46bd      	mov	sp, r7
    46f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    46fa:	4770      	bx	lr

000046fc <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    46fc:	b480      	push	{r7}
    46fe:	b083      	sub	sp, #12
    4700:	af00      	add	r7, sp, #0
    4702:	6078      	str	r0, [r7, #4]
    4704:	460b      	mov	r3, r1
    4706:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4708:	687b      	ldr	r3, [r7, #4]
    470a:	78fa      	ldrb	r2, [r7, #3]
    470c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    470e:	bf00      	nop
    4710:	370c      	adds	r7, #12
    4712:	46bd      	mov	sp, r7
    4714:	f85d 7b04 	ldr.w	r7, [sp], #4
    4718:	4770      	bx	lr

0000471a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    471a:	b480      	push	{r7}
    471c:	b085      	sub	sp, #20
    471e:	af00      	add	r7, sp, #0
    4720:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4722:	687b      	ldr	r3, [r7, #4]
    4724:	f893 3020 	ldrb.w	r3, [r3, #32]
    4728:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    472a:	7bfb      	ldrb	r3, [r7, #15]
    472c:	f003 0301 	and.w	r3, r3, #1
    4730:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4732:	7bfb      	ldrb	r3, [r7, #15]
    4734:	2b00      	cmp	r3, #0
    4736:	bf14      	ite	ne
    4738:	2301      	movne	r3, #1
    473a:	2300      	moveq	r3, #0
    473c:	b2db      	uxtb	r3, r3
}
    473e:	4618      	mov	r0, r3
    4740:	3714      	adds	r7, #20
    4742:	46bd      	mov	sp, r7
    4744:	f85d 7b04 	ldr.w	r7, [sp], #4
    4748:	4770      	bx	lr

0000474a <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    474a:	b480      	push	{r7}
    474c:	b083      	sub	sp, #12
    474e:	af00      	add	r7, sp, #0
    4750:	6078      	str	r0, [r7, #4]
    4752:	460b      	mov	r3, r1
    4754:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4756:	687b      	ldr	r3, [r7, #4]
    4758:	78fa      	ldrb	r2, [r7, #3]
    475a:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    475e:	bf00      	nop
    4760:	370c      	adds	r7, #12
    4762:	46bd      	mov	sp, r7
    4764:	f85d 7b04 	ldr.w	r7, [sp], #4
    4768:	4770      	bx	lr

0000476a <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    476a:	b480      	push	{r7}
    476c:	b083      	sub	sp, #12
    476e:	af00      	add	r7, sp, #0
    4770:	6078      	str	r0, [r7, #4]
    4772:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4774:	687b      	ldr	r3, [r7, #4]
    4776:	683a      	ldr	r2, [r7, #0]
    4778:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    477a:	bf00      	nop
    477c:	370c      	adds	r7, #12
    477e:	46bd      	mov	sp, r7
    4780:	f85d 7b04 	ldr.w	r7, [sp], #4
    4784:	4770      	bx	lr

00004786 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    4786:	b480      	push	{r7}
    4788:	b083      	sub	sp, #12
    478a:	af00      	add	r7, sp, #0
    478c:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    478e:	687b      	ldr	r3, [r7, #4]
    4790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    4792:	4618      	mov	r0, r3
    4794:	370c      	adds	r7, #12
    4796:	46bd      	mov	sp, r7
    4798:	f85d 7b04 	ldr.w	r7, [sp], #4
    479c:	4770      	bx	lr

0000479e <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    479e:	b480      	push	{r7}
    47a0:	b083      	sub	sp, #12
    47a2:	af00      	add	r7, sp, #0
    47a4:	6078      	str	r0, [r7, #4]
    47a6:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    47a8:	687b      	ldr	r3, [r7, #4]
    47aa:	683a      	ldr	r2, [r7, #0]
    47ac:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    47ae:	bf00      	nop
    47b0:	370c      	adds	r7, #12
    47b2:	46bd      	mov	sp, r7
    47b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47b8:	4770      	bx	lr

000047ba <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    47ba:	b480      	push	{r7}
    47bc:	b085      	sub	sp, #20
    47be:	af00      	add	r7, sp, #0
    47c0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    47c2:	687b      	ldr	r3, [r7, #4]
    47c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    47c8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    47ca:	7bfb      	ldrb	r3, [r7, #15]
    47cc:	085b      	lsrs	r3, r3, #1
    47ce:	b2db      	uxtb	r3, r3
    47d0:	f003 0301 	and.w	r3, r3, #1
    47d4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    47d6:	7bfb      	ldrb	r3, [r7, #15]
    47d8:	2b00      	cmp	r3, #0
    47da:	bf14      	ite	ne
    47dc:	2301      	movne	r3, #1
    47de:	2300      	moveq	r3, #0
    47e0:	b2db      	uxtb	r3, r3
}
    47e2:	4618      	mov	r0, r3
    47e4:	3714      	adds	r7, #20
    47e6:	46bd      	mov	sp, r7
    47e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    47ec:	4770      	bx	lr

000047ee <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    47ee:	b480      	push	{r7}
    47f0:	b085      	sub	sp, #20
    47f2:	af00      	add	r7, sp, #0
    47f4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    47f6:	687b      	ldr	r3, [r7, #4]
    47f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    47fc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    47fe:	7bfb      	ldrb	r3, [r7, #15]
    4800:	089b      	lsrs	r3, r3, #2
    4802:	b2db      	uxtb	r3, r3
    4804:	f003 0301 	and.w	r3, r3, #1
    4808:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    480a:	7bfb      	ldrb	r3, [r7, #15]
    480c:	2b00      	cmp	r3, #0
    480e:	bf14      	ite	ne
    4810:	2301      	movne	r3, #1
    4812:	2300      	moveq	r3, #0
    4814:	b2db      	uxtb	r3, r3
}
    4816:	4618      	mov	r0, r3
    4818:	3714      	adds	r7, #20
    481a:	46bd      	mov	sp, r7
    481c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4820:	4770      	bx	lr

00004822 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    4822:	b480      	push	{r7}
    4824:	b085      	sub	sp, #20
    4826:	af00      	add	r7, sp, #0
    4828:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    482a:	687b      	ldr	r3, [r7, #4]
    482c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4830:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    4832:	7bfb      	ldrb	r3, [r7, #15]
    4834:	08db      	lsrs	r3, r3, #3
    4836:	b2db      	uxtb	r3, r3
    4838:	f003 0301 	and.w	r3, r3, #1
    483c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    483e:	7bfb      	ldrb	r3, [r7, #15]
    4840:	2b00      	cmp	r3, #0
    4842:	bf14      	ite	ne
    4844:	2301      	movne	r3, #1
    4846:	2300      	moveq	r3, #0
    4848:	b2db      	uxtb	r3, r3
}
    484a:	4618      	mov	r0, r3
    484c:	3714      	adds	r7, #20
    484e:	46bd      	mov	sp, r7
    4850:	f85d 7b04 	ldr.w	r7, [sp], #4
    4854:	4770      	bx	lr

00004856 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    4856:	b480      	push	{r7}
    4858:	b085      	sub	sp, #20
    485a:	af00      	add	r7, sp, #0
    485c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    485e:	687b      	ldr	r3, [r7, #4]
    4860:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4864:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    4866:	7bfb      	ldrb	r3, [r7, #15]
    4868:	091b      	lsrs	r3, r3, #4
    486a:	b2db      	uxtb	r3, r3
    486c:	f003 0301 	and.w	r3, r3, #1
    4870:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4872:	7bfb      	ldrb	r3, [r7, #15]
    4874:	2b00      	cmp	r3, #0
    4876:	bf14      	ite	ne
    4878:	2301      	movne	r3, #1
    487a:	2300      	moveq	r3, #0
    487c:	b2db      	uxtb	r3, r3
}
    487e:	4618      	mov	r0, r3
    4880:	3714      	adds	r7, #20
    4882:	46bd      	mov	sp, r7
    4884:	f85d 7b04 	ldr.w	r7, [sp], #4
    4888:	4770      	bx	lr
	...

0000488c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    488c:	b580      	push	{r7, lr}
    488e:	b082      	sub	sp, #8
    4890:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4892:	4b0a      	ldr	r3, [pc, #40]	; (48bc <_oscctrl_init_sources+0x30>)
    4894:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    4896:	4a0a      	ldr	r2, [pc, #40]	; (48c0 <_oscctrl_init_sources+0x34>)
    4898:	2101      	movs	r1, #1
    489a:	6878      	ldr	r0, [r7, #4]
    489c:	4b09      	ldr	r3, [pc, #36]	; (48c4 <_oscctrl_init_sources+0x38>)
    489e:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    48a0:	bf00      	nop
    48a2:	6878      	ldr	r0, [r7, #4]
    48a4:	4b08      	ldr	r3, [pc, #32]	; (48c8 <_oscctrl_init_sources+0x3c>)
    48a6:	4798      	blx	r3
    48a8:	4603      	mov	r3, r0
    48aa:	f083 0301 	eor.w	r3, r3, #1
    48ae:	b2db      	uxtb	r3, r3
    48b0:	2b00      	cmp	r3, #0
    48b2:	d1f6      	bne.n	48a2 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    48b4:	bf00      	nop
    48b6:	3708      	adds	r7, #8
    48b8:	46bd      	mov	sp, r7
    48ba:	bd80      	pop	{r7, pc}
    48bc:	40001000 	.word	0x40001000
    48c0:	03002646 	.word	0x03002646
    48c4:	000046d5 	.word	0x000046d5
    48c8:	0000465f 	.word	0x0000465f

000048cc <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    48cc:	b580      	push	{r7, lr}
    48ce:	b084      	sub	sp, #16
    48d0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    48d2:	4b6b      	ldr	r3, [pc, #428]	; (4a80 <_oscctrl_init_referenced_generators+0x1b4>)
    48d4:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    48d6:	2204      	movs	r2, #4
    48d8:	2100      	movs	r1, #0
    48da:	486a      	ldr	r0, [pc, #424]	; (4a84 <_oscctrl_init_referenced_generators+0x1b8>)
    48dc:	4b6a      	ldr	r3, [pc, #424]	; (4a88 <_oscctrl_init_referenced_generators+0x1bc>)
    48de:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    48e0:	bf00      	nop
    48e2:	4868      	ldr	r0, [pc, #416]	; (4a84 <_oscctrl_init_referenced_generators+0x1b8>)
    48e4:	4b69      	ldr	r3, [pc, #420]	; (4a8c <_oscctrl_init_referenced_generators+0x1c0>)
    48e6:	4798      	blx	r3
    48e8:	4603      	mov	r3, r0
    48ea:	2b00      	cmp	r3, #0
    48ec:	d1f9      	bne.n	48e2 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    48ee:	2100      	movs	r1, #0
    48f0:	68f8      	ldr	r0, [r7, #12]
    48f2:	4b67      	ldr	r3, [pc, #412]	; (4a90 <_oscctrl_init_referenced_generators+0x1c4>)
    48f4:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    48f6:	4967      	ldr	r1, [pc, #412]	; (4a94 <_oscctrl_init_referenced_generators+0x1c8>)
    48f8:	68f8      	ldr	r0, [r7, #12]
    48fa:	4b67      	ldr	r3, [pc, #412]	; (4a98 <_oscctrl_init_referenced_generators+0x1cc>)
    48fc:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    48fe:	bf00      	nop
    4900:	68f8      	ldr	r0, [r7, #12]
    4902:	4b66      	ldr	r3, [pc, #408]	; (4a9c <_oscctrl_init_referenced_generators+0x1d0>)
    4904:	4798      	blx	r3
    4906:	4603      	mov	r3, r0
    4908:	2b00      	cmp	r3, #0
    490a:	d1f9      	bne.n	4900 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    490c:	2100      	movs	r1, #0
    490e:	68f8      	ldr	r0, [r7, #12]
    4910:	4b63      	ldr	r3, [pc, #396]	; (4aa0 <_oscctrl_init_referenced_generators+0x1d4>)
    4912:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4914:	bf00      	nop
    4916:	68f8      	ldr	r0, [r7, #12]
    4918:	4b62      	ldr	r3, [pc, #392]	; (4aa4 <_oscctrl_init_referenced_generators+0x1d8>)
    491a:	4798      	blx	r3
    491c:	4603      	mov	r3, r0
    491e:	2b00      	cmp	r3, #0
    4920:	d1f9      	bne.n	4916 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    4922:	2302      	movs	r3, #2
    4924:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    4926:	7afb      	ldrb	r3, [r7, #11]
    4928:	4619      	mov	r1, r3
    492a:	68f8      	ldr	r0, [r7, #12]
    492c:	4b58      	ldr	r3, [pc, #352]	; (4a90 <_oscctrl_init_referenced_generators+0x1c4>)
    492e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    4930:	bf00      	nop
    4932:	68f8      	ldr	r0, [r7, #12]
    4934:	4b5c      	ldr	r3, [pc, #368]	; (4aa8 <_oscctrl_init_referenced_generators+0x1dc>)
    4936:	4798      	blx	r3
    4938:	4603      	mov	r3, r0
    493a:	2b00      	cmp	r3, #0
    493c:	d1f9      	bne.n	4932 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    493e:	68f8      	ldr	r0, [r7, #12]
    4940:	4b5a      	ldr	r3, [pc, #360]	; (4aac <_oscctrl_init_referenced_generators+0x1e0>)
    4942:	4798      	blx	r3
    4944:	4603      	mov	r3, r0
    4946:	4619      	mov	r1, r3
    4948:	68f8      	ldr	r0, [r7, #12]
    494a:	4b59      	ldr	r3, [pc, #356]	; (4ab0 <_oscctrl_init_referenced_generators+0x1e4>)
    494c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    494e:	bf00      	nop
    4950:	68f8      	ldr	r0, [r7, #12]
    4952:	4b58      	ldr	r3, [pc, #352]	; (4ab4 <_oscctrl_init_referenced_generators+0x1e8>)
    4954:	4798      	blx	r3
    4956:	4603      	mov	r3, r0
    4958:	2b00      	cmp	r3, #0
    495a:	d1f9      	bne.n	4950 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    495c:	2319      	movs	r3, #25
    495e:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    4960:	7afb      	ldrb	r3, [r7, #11]
    4962:	4619      	mov	r1, r3
    4964:	68f8      	ldr	r0, [r7, #12]
    4966:	4b4e      	ldr	r3, [pc, #312]	; (4aa0 <_oscctrl_init_referenced_generators+0x1d4>)
    4968:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    496a:	bf00      	nop
    496c:	68f8      	ldr	r0, [r7, #12]
    496e:	4b4d      	ldr	r3, [pc, #308]	; (4aa4 <_oscctrl_init_referenced_generators+0x1d8>)
    4970:	4798      	blx	r3
    4972:	4603      	mov	r3, r0
    4974:	2b00      	cmp	r3, #0
    4976:	d1f9      	bne.n	496c <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    4978:	2245      	movs	r2, #69	; 0x45
    497a:	2101      	movs	r1, #1
    497c:	4841      	ldr	r0, [pc, #260]	; (4a84 <_oscctrl_init_referenced_generators+0x1b8>)
    497e:	4b4e      	ldr	r3, [pc, #312]	; (4ab8 <_oscctrl_init_referenced_generators+0x1ec>)
    4980:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4982:	223b      	movs	r2, #59	; 0x3b
    4984:	2100      	movs	r1, #0
    4986:	68f8      	ldr	r0, [r7, #12]
    4988:	4b4c      	ldr	r3, [pc, #304]	; (4abc <_oscctrl_init_referenced_generators+0x1f0>)
    498a:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    498c:	f44f 6201 	mov.w	r2, #2064	; 0x810
    4990:	2100      	movs	r1, #0
    4992:	68f8      	ldr	r0, [r7, #12]
    4994:	4b4a      	ldr	r3, [pc, #296]	; (4ac0 <_oscctrl_init_referenced_generators+0x1f4>)
    4996:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4998:	2242      	movs	r2, #66	; 0x42
    499a:	2100      	movs	r1, #0
    499c:	68f8      	ldr	r0, [r7, #12]
    499e:	4b49      	ldr	r3, [pc, #292]	; (4ac4 <_oscctrl_init_referenced_generators+0x1f8>)
    49a0:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    49a2:	4a49      	ldr	r2, [pc, #292]	; (4ac8 <_oscctrl_init_referenced_generators+0x1fc>)
    49a4:	2101      	movs	r1, #1
    49a6:	68f8      	ldr	r0, [r7, #12]
    49a8:	4b44      	ldr	r3, [pc, #272]	; (4abc <_oscctrl_init_referenced_generators+0x1f0>)
    49aa:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    49ac:	f44f 6203 	mov.w	r2, #2096	; 0x830
    49b0:	2101      	movs	r1, #1
    49b2:	68f8      	ldr	r0, [r7, #12]
    49b4:	4b42      	ldr	r3, [pc, #264]	; (4ac0 <_oscctrl_init_referenced_generators+0x1f4>)
    49b6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    49b8:	2202      	movs	r2, #2
    49ba:	2101      	movs	r1, #1
    49bc:	68f8      	ldr	r0, [r7, #12]
    49be:	4b41      	ldr	r3, [pc, #260]	; (4ac4 <_oscctrl_init_referenced_generators+0x1f8>)
    49c0:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    49c2:	68f8      	ldr	r0, [r7, #12]
    49c4:	4b41      	ldr	r3, [pc, #260]	; (4acc <_oscctrl_init_referenced_generators+0x200>)
    49c6:	4798      	blx	r3
    49c8:	4603      	mov	r3, r0
    49ca:	2b00      	cmp	r3, #0
    49cc:	d00c      	beq.n	49e8 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    49ce:	f44f 6310 	mov.w	r3, #2304	; 0x900
    49d2:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    49d4:	bf00      	nop
    49d6:	6879      	ldr	r1, [r7, #4]
    49d8:	68f8      	ldr	r0, [r7, #12]
    49da:	4b3d      	ldr	r3, [pc, #244]	; (4ad0 <_oscctrl_init_referenced_generators+0x204>)
    49dc:	4798      	blx	r3
    49de:	4602      	mov	r2, r0
    49e0:	687b      	ldr	r3, [r7, #4]
    49e2:	429a      	cmp	r2, r3
    49e4:	d1f7      	bne.n	49d6 <_oscctrl_init_referenced_generators+0x10a>
    49e6:	e009      	b.n	49fc <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    49e8:	bf00      	nop
    49ea:	68f8      	ldr	r0, [r7, #12]
    49ec:	4b39      	ldr	r3, [pc, #228]	; (4ad4 <_oscctrl_init_referenced_generators+0x208>)
    49ee:	4798      	blx	r3
    49f0:	4603      	mov	r3, r0
    49f2:	f083 0301 	eor.w	r3, r3, #1
    49f6:	b2db      	uxtb	r3, r3
    49f8:	2b00      	cmp	r3, #0
    49fa:	d1f6      	bne.n	49ea <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    49fc:	bf00      	nop
    49fe:	2100      	movs	r1, #0
    4a00:	68f8      	ldr	r0, [r7, #12]
    4a02:	4b35      	ldr	r3, [pc, #212]	; (4ad8 <_oscctrl_init_referenced_generators+0x20c>)
    4a04:	4798      	blx	r3
    4a06:	4603      	mov	r3, r0
    4a08:	f083 0301 	eor.w	r3, r3, #1
    4a0c:	b2db      	uxtb	r3, r3
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d009      	beq.n	4a26 <_oscctrl_init_referenced_generators+0x15a>
    4a12:	2100      	movs	r1, #0
    4a14:	68f8      	ldr	r0, [r7, #12]
    4a16:	4b31      	ldr	r3, [pc, #196]	; (4adc <_oscctrl_init_referenced_generators+0x210>)
    4a18:	4798      	blx	r3
    4a1a:	4603      	mov	r3, r0
    4a1c:	f083 0301 	eor.w	r3, r3, #1
    4a20:	b2db      	uxtb	r3, r3
    4a22:	2b00      	cmp	r3, #0
    4a24:	d1eb      	bne.n	49fe <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    4a26:	bf00      	nop
    4a28:	2101      	movs	r1, #1
    4a2a:	68f8      	ldr	r0, [r7, #12]
    4a2c:	4b2a      	ldr	r3, [pc, #168]	; (4ad8 <_oscctrl_init_referenced_generators+0x20c>)
    4a2e:	4798      	blx	r3
    4a30:	4603      	mov	r3, r0
    4a32:	f083 0301 	eor.w	r3, r3, #1
    4a36:	b2db      	uxtb	r3, r3
    4a38:	2b00      	cmp	r3, #0
    4a3a:	d009      	beq.n	4a50 <_oscctrl_init_referenced_generators+0x184>
    4a3c:	2101      	movs	r1, #1
    4a3e:	68f8      	ldr	r0, [r7, #12]
    4a40:	4b26      	ldr	r3, [pc, #152]	; (4adc <_oscctrl_init_referenced_generators+0x210>)
    4a42:	4798      	blx	r3
    4a44:	4603      	mov	r3, r0
    4a46:	f083 0301 	eor.w	r3, r3, #1
    4a4a:	b2db      	uxtb	r3, r3
    4a4c:	2b00      	cmp	r3, #0
    4a4e:	d1eb      	bne.n	4a28 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    4a50:	bf00      	nop
    4a52:	480c      	ldr	r0, [pc, #48]	; (4a84 <_oscctrl_init_referenced_generators+0x1b8>)
    4a54:	4b22      	ldr	r3, [pc, #136]	; (4ae0 <_oscctrl_init_referenced_generators+0x214>)
    4a56:	4798      	blx	r3
    4a58:	4603      	mov	r3, r0
    4a5a:	2b00      	cmp	r3, #0
    4a5c:	d1f9      	bne.n	4a52 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    4a5e:	2207      	movs	r2, #7
    4a60:	2100      	movs	r1, #0
    4a62:	4808      	ldr	r0, [pc, #32]	; (4a84 <_oscctrl_init_referenced_generators+0x1b8>)
    4a64:	4b08      	ldr	r3, [pc, #32]	; (4a88 <_oscctrl_init_referenced_generators+0x1bc>)
    4a66:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4a68:	bf00      	nop
    4a6a:	4806      	ldr	r0, [pc, #24]	; (4a84 <_oscctrl_init_referenced_generators+0x1b8>)
    4a6c:	4b07      	ldr	r3, [pc, #28]	; (4a8c <_oscctrl_init_referenced_generators+0x1c0>)
    4a6e:	4798      	blx	r3
    4a70:	4603      	mov	r3, r0
    4a72:	2b00      	cmp	r3, #0
    4a74:	d1f9      	bne.n	4a6a <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    4a76:	bf00      	nop
    4a78:	3710      	adds	r7, #16
    4a7a:	46bd      	mov	sp, r7
    4a7c:	bd80      	pop	{r7, pc}
    4a7e:	bf00      	nop
    4a80:	40001000 	.word	0x40001000
    4a84:	40001c00 	.word	0x40001c00
    4a88:	00004499 	.word	0x00004499
    4a8c:	00004459 	.word	0x00004459
    4a90:	000046fd 	.word	0x000046fd
    4a94:	0401bb80 	.word	0x0401bb80
    4a98:	0000479f 	.word	0x0000479f
    4a9c:	00004857 	.word	0x00004857
    4aa0:	0000474b 	.word	0x0000474b
    4aa4:	000047ef 	.word	0x000047ef
    4aa8:	000047bb 	.word	0x000047bb
    4aac:	00004787 	.word	0x00004787
    4ab0:	0000476b 	.word	0x0000476b
    4ab4:	00004823 	.word	0x00004823
    4ab8:	000044e9 	.word	0x000044e9
    4abc:	000045f5 	.word	0x000045f5
    4ac0:	00004631 	.word	0x00004631
    4ac4:	000045b9 	.word	0x000045b9
    4ac8:	000407a0 	.word	0x000407a0
    4acc:	0000471b 	.word	0x0000471b
    4ad0:	000046af 	.word	0x000046af
    4ad4:	00004687 	.word	0x00004687
    4ad8:	00004545 	.word	0x00004545
    4adc:	0000457d 	.word	0x0000457d
    4ae0:	00004481 	.word	0x00004481

00004ae4 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    4ae4:	b480      	push	{r7}
    4ae6:	b083      	sub	sp, #12
    4ae8:	af00      	add	r7, sp, #0
    4aea:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    4aec:	687b      	ldr	r3, [r7, #4]
    4aee:	69db      	ldr	r3, [r3, #28]
    4af0:	0a9b      	lsrs	r3, r3, #10
    4af2:	f003 0301 	and.w	r3, r3, #1
    4af6:	2b00      	cmp	r3, #0
    4af8:	bf14      	ite	ne
    4afa:	2301      	movne	r3, #1
    4afc:	2300      	moveq	r3, #0
    4afe:	b2db      	uxtb	r3, r3
}
    4b00:	4618      	mov	r0, r3
    4b02:	370c      	adds	r7, #12
    4b04:	46bd      	mov	sp, r7
    4b06:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b0a:	4770      	bx	lr

00004b0c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    4b0c:	b480      	push	{r7}
    4b0e:	b083      	sub	sp, #12
    4b10:	af00      	add	r7, sp, #0
    4b12:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    4b14:	687b      	ldr	r3, [r7, #4]
    4b16:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4b1a:	61da      	str	r2, [r3, #28]
}
    4b1c:	bf00      	nop
    4b1e:	370c      	adds	r7, #12
    4b20:	46bd      	mov	sp, r7
    4b22:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b26:	4770      	bx	lr

00004b28 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    4b28:	b480      	push	{r7}
    4b2a:	b083      	sub	sp, #12
    4b2c:	af00      	add	r7, sp, #0
    4b2e:	6078      	str	r0, [r7, #4]
    4b30:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    4b32:	687b      	ldr	r3, [r7, #4]
    4b34:	683a      	ldr	r2, [r7, #0]
    4b36:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4b38:	bf00      	nop
    4b3a:	370c      	adds	r7, #12
    4b3c:	46bd      	mov	sp, r7
    4b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b42:	4770      	bx	lr

00004b44 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    4b44:	b480      	push	{r7}
    4b46:	b083      	sub	sp, #12
    4b48:	af00      	add	r7, sp, #0
    4b4a:	6078      	str	r0, [r7, #4]
    4b4c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    4b4e:	687b      	ldr	r3, [r7, #4]
    4b50:	683a      	ldr	r2, [r7, #0]
    4b52:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4b54:	bf00      	nop
    4b56:	370c      	adds	r7, #12
    4b58:	46bd      	mov	sp, r7
    4b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b5e:	4770      	bx	lr

00004b60 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    4b60:	b480      	push	{r7}
    4b62:	b083      	sub	sp, #12
    4b64:	af00      	add	r7, sp, #0
    4b66:	6078      	str	r0, [r7, #4]
    4b68:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    4b6a:	687b      	ldr	r3, [r7, #4]
    4b6c:	683a      	ldr	r2, [r7, #0]
    4b6e:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4b70:	bf00      	nop
    4b72:	370c      	adds	r7, #12
    4b74:	46bd      	mov	sp, r7
    4b76:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b7a:	4770      	bx	lr

00004b7c <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    4b7c:	b480      	push	{r7}
    4b7e:	b083      	sub	sp, #12
    4b80:	af00      	add	r7, sp, #0
    4b82:	6078      	str	r0, [r7, #4]
    4b84:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    4b86:	687b      	ldr	r3, [r7, #4]
    4b88:	683a      	ldr	r2, [r7, #0]
    4b8a:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4b8c:	bf00      	nop
    4b8e:	370c      	adds	r7, #12
    4b90:	46bd      	mov	sp, r7
    4b92:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b96:	4770      	bx	lr

00004b98 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    4b98:	b480      	push	{r7}
    4b9a:	b085      	sub	sp, #20
    4b9c:	af00      	add	r7, sp, #0
    4b9e:	6078      	str	r0, [r7, #4]
    4ba0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    4ba2:	687b      	ldr	r3, [r7, #4]
    4ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4ba6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    4ba8:	68fb      	ldr	r3, [r7, #12]
    4baa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    4bae:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    4bb0:	683b      	ldr	r3, [r7, #0]
    4bb2:	b2db      	uxtb	r3, r3
    4bb4:	68fa      	ldr	r2, [r7, #12]
    4bb6:	4313      	orrs	r3, r2
    4bb8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    4bba:	687b      	ldr	r3, [r7, #4]
    4bbc:	68fa      	ldr	r2, [r7, #12]
    4bbe:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4bc0:	bf00      	nop
    4bc2:	3714      	adds	r7, #20
    4bc4:	46bd      	mov	sp, r7
    4bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bca:	4770      	bx	lr

00004bcc <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    4bcc:	b480      	push	{r7}
    4bce:	b085      	sub	sp, #20
    4bd0:	af00      	add	r7, sp, #0
    4bd2:	6078      	str	r0, [r7, #4]
    4bd4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    4bd6:	687b      	ldr	r3, [r7, #4]
    4bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4bda:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    4bdc:	68fb      	ldr	r3, [r7, #12]
    4bde:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    4be2:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    4be4:	683b      	ldr	r3, [r7, #0]
    4be6:	041b      	lsls	r3, r3, #16
    4be8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    4bec:	68fa      	ldr	r2, [r7, #12]
    4bee:	4313      	orrs	r3, r2
    4bf0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    4bf2:	687b      	ldr	r3, [r7, #4]
    4bf4:	68fa      	ldr	r2, [r7, #12]
    4bf6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4bf8:	bf00      	nop
    4bfa:	3714      	adds	r7, #20
    4bfc:	46bd      	mov	sp, r7
    4bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c02:	4770      	bx	lr

00004c04 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    4c04:	b480      	push	{r7}
    4c06:	b083      	sub	sp, #12
    4c08:	af00      	add	r7, sp, #0
    4c0a:	6078      	str	r0, [r7, #4]
    4c0c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    4c0e:	687b      	ldr	r3, [r7, #4]
    4c10:	683a      	ldr	r2, [r7, #0]
    4c12:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4c14:	bf00      	nop
    4c16:	370c      	adds	r7, #12
    4c18:	46bd      	mov	sp, r7
    4c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c1e:	4770      	bx	lr

00004c20 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    4c20:	b480      	push	{r7}
    4c22:	b083      	sub	sp, #12
    4c24:	af00      	add	r7, sp, #0
    4c26:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    4c28:	687b      	ldr	r3, [r7, #4]
    4c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    4c2c:	4618      	mov	r0, r3
    4c2e:	370c      	adds	r7, #12
    4c30:	46bd      	mov	sp, r7
    4c32:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c36:	4770      	bx	lr

00004c38 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    4c38:	b480      	push	{r7}
    4c3a:	b085      	sub	sp, #20
    4c3c:	af00      	add	r7, sp, #0
    4c3e:	60f8      	str	r0, [r7, #12]
    4c40:	60b9      	str	r1, [r7, #8]
    4c42:	607a      	str	r2, [r7, #4]
	while (count--) {
    4c44:	e007      	b.n	4c56 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    4c46:	68fb      	ldr	r3, [r7, #12]
    4c48:	1c5a      	adds	r2, r3, #1
    4c4a:	60fa      	str	r2, [r7, #12]
    4c4c:	68ba      	ldr	r2, [r7, #8]
    4c4e:	1c51      	adds	r1, r2, #1
    4c50:	60b9      	str	r1, [r7, #8]
    4c52:	7812      	ldrb	r2, [r2, #0]
    4c54:	701a      	strb	r2, [r3, #0]
	while (count--) {
    4c56:	687b      	ldr	r3, [r7, #4]
    4c58:	1e5a      	subs	r2, r3, #1
    4c5a:	607a      	str	r2, [r7, #4]
    4c5c:	2b00      	cmp	r3, #0
    4c5e:	d1f2      	bne.n	4c46 <_qspi_memcpy+0xe>
	}
}
    4c60:	bf00      	nop
    4c62:	3714      	adds	r7, #20
    4c64:	46bd      	mov	sp, r7
    4c66:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c6a:	4770      	bx	lr

00004c6c <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    4c6c:	b580      	push	{r7, lr}
    4c6e:	b082      	sub	sp, #8
    4c70:	af00      	add	r7, sp, #0
    4c72:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    4c74:	4903      	ldr	r1, [pc, #12]	; (4c84 <_qspi_end_transfer+0x18>)
    4c76:	6878      	ldr	r0, [r7, #4]
    4c78:	4b03      	ldr	r3, [pc, #12]	; (4c88 <_qspi_end_transfer+0x1c>)
    4c7a:	4798      	blx	r3
}
    4c7c:	bf00      	nop
    4c7e:	3708      	adds	r7, #8
    4c80:	46bd      	mov	sp, r7
    4c82:	bd80      	pop	{r7, pc}
    4c84:	01000002 	.word	0x01000002
    4c88:	00004b29 	.word	0x00004b29

00004c8c <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    4c8c:	b580      	push	{r7, lr}
    4c8e:	b082      	sub	sp, #8
    4c90:	af00      	add	r7, sp, #0
    4c92:	6078      	str	r0, [r7, #4]
    4c94:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    4c96:	687b      	ldr	r3, [r7, #4]
    4c98:	2b00      	cmp	r3, #0
    4c9a:	d004      	beq.n	4ca6 <_qspi_sync_init+0x1a>
    4c9c:	683b      	ldr	r3, [r7, #0]
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d001      	beq.n	4ca6 <_qspi_sync_init+0x1a>
    4ca2:	2301      	movs	r3, #1
    4ca4:	e000      	b.n	4ca8 <_qspi_sync_init+0x1c>
    4ca6:	2300      	movs	r3, #0
    4ca8:	f003 0301 	and.w	r3, r3, #1
    4cac:	b2db      	uxtb	r3, r3
    4cae:	2240      	movs	r2, #64	; 0x40
    4cb0:	490c      	ldr	r1, [pc, #48]	; (4ce4 <_qspi_sync_init+0x58>)
    4cb2:	4618      	mov	r0, r3
    4cb4:	4b0c      	ldr	r3, [pc, #48]	; (4ce8 <_qspi_sync_init+0x5c>)
    4cb6:	4798      	blx	r3
	dev->prvt = hw;
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	683a      	ldr	r2, [r7, #0]
    4cbc:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    4cbe:	687b      	ldr	r3, [r7, #4]
    4cc0:	681b      	ldr	r3, [r3, #0]
    4cc2:	2101      	movs	r1, #1
    4cc4:	4618      	mov	r0, r3
    4cc6:	4b09      	ldr	r3, [pc, #36]	; (4cec <_qspi_sync_init+0x60>)
    4cc8:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    4cca:	4909      	ldr	r1, [pc, #36]	; (4cf0 <_qspi_sync_init+0x64>)
    4ccc:	6838      	ldr	r0, [r7, #0]
    4cce:	4b09      	ldr	r3, [pc, #36]	; (4cf4 <_qspi_sync_init+0x68>)
    4cd0:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    4cd2:	4909      	ldr	r1, [pc, #36]	; (4cf8 <_qspi_sync_init+0x6c>)
    4cd4:	6838      	ldr	r0, [r7, #0]
    4cd6:	4b09      	ldr	r3, [pc, #36]	; (4cfc <_qspi_sync_init+0x70>)
    4cd8:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    4cda:	2300      	movs	r3, #0
}
    4cdc:	4618      	mov	r0, r3
    4cde:	3708      	adds	r7, #8
    4ce0:	46bd      	mov	sp, r7
    4ce2:	bd80      	pop	{r7, pc}
    4ce4:	0000d1a8 	.word	0x0000d1a8
    4ce8:	00002dd1 	.word	0x00002dd1
    4cec:	00004b29 	.word	0x00004b29
    4cf0:	06000011 	.word	0x06000011
    4cf4:	00004b45 	.word	0x00004b45
    4cf8:	00241300 	.word	0x00241300
    4cfc:	00004b61 	.word	0x00004b61

00004d00 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    4d00:	b580      	push	{r7, lr}
    4d02:	b082      	sub	sp, #8
    4d04:	af00      	add	r7, sp, #0
    4d06:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    4d08:	687b      	ldr	r3, [r7, #4]
    4d0a:	681b      	ldr	r3, [r3, #0]
    4d0c:	2102      	movs	r1, #2
    4d0e:	4618      	mov	r0, r3
    4d10:	4b03      	ldr	r3, [pc, #12]	; (4d20 <_qspi_sync_enable+0x20>)
    4d12:	4798      	blx	r3
	return ERR_NONE;
    4d14:	2300      	movs	r3, #0
}
    4d16:	4618      	mov	r0, r3
    4d18:	3708      	adds	r7, #8
    4d1a:	46bd      	mov	sp, r7
    4d1c:	bd80      	pop	{r7, pc}
    4d1e:	bf00      	nop
    4d20:	00004b29 	.word	0x00004b29

00004d24 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    4d24:	b580      	push	{r7, lr}
    4d26:	b082      	sub	sp, #8
    4d28:	af00      	add	r7, sp, #0
    4d2a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    4d2c:	687b      	ldr	r3, [r7, #4]
    4d2e:	681b      	ldr	r3, [r3, #0]
    4d30:	2100      	movs	r1, #0
    4d32:	4618      	mov	r0, r3
    4d34:	4b03      	ldr	r3, [pc, #12]	; (4d44 <_qspi_sync_disable+0x20>)
    4d36:	4798      	blx	r3
	return ERR_NONE;
    4d38:	2300      	movs	r3, #0
}
    4d3a:	4618      	mov	r0, r3
    4d3c:	3708      	adds	r7, #8
    4d3e:	46bd      	mov	sp, r7
    4d40:	bd80      	pop	{r7, pc}
    4d42:	bf00      	nop
    4d44:	00004b29 	.word	0x00004b29

00004d48 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    4d48:	b580      	push	{r7, lr}
    4d4a:	b084      	sub	sp, #16
    4d4c:	af00      	add	r7, sp, #0
    4d4e:	6078      	str	r0, [r7, #4]
    4d50:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    4d52:	687b      	ldr	r3, [r7, #4]
    4d54:	681b      	ldr	r3, [r3, #0]
    4d56:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    4d58:	683b      	ldr	r3, [r7, #0]
    4d5a:	781b      	ldrb	r3, [r3, #0]
    4d5c:	f003 0320 	and.w	r3, r3, #32
    4d60:	b2db      	uxtb	r3, r3
    4d62:	2b00      	cmp	r3, #0
    4d64:	d005      	beq.n	4d72 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    4d66:	683b      	ldr	r3, [r7, #0]
    4d68:	689b      	ldr	r3, [r3, #8]
    4d6a:	4619      	mov	r1, r3
    4d6c:	68f8      	ldr	r0, [r7, #12]
    4d6e:	4b13      	ldr	r3, [pc, #76]	; (4dbc <_qspi_sync_command_set_ifr+0x74>)
    4d70:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    4d72:	683b      	ldr	r3, [r7, #0]
    4d74:	781b      	ldrb	r3, [r3, #0]
    4d76:	f003 0310 	and.w	r3, r3, #16
    4d7a:	b2db      	uxtb	r3, r3
    4d7c:	2b00      	cmp	r3, #0
    4d7e:	d005      	beq.n	4d8c <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    4d80:	683b      	ldr	r3, [r7, #0]
    4d82:	791b      	ldrb	r3, [r3, #4]
    4d84:	4619      	mov	r1, r3
    4d86:	68f8      	ldr	r0, [r7, #12]
    4d88:	4b0d      	ldr	r3, [pc, #52]	; (4dc0 <_qspi_sync_command_set_ifr+0x78>)
    4d8a:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    4d8c:	683b      	ldr	r3, [r7, #0]
    4d8e:	781b      	ldrb	r3, [r3, #0]
    4d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4d94:	b2db      	uxtb	r3, r3
    4d96:	2b00      	cmp	r3, #0
    4d98:	d005      	beq.n	4da6 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    4d9a:	683b      	ldr	r3, [r7, #0]
    4d9c:	795b      	ldrb	r3, [r3, #5]
    4d9e:	4619      	mov	r1, r3
    4da0:	68f8      	ldr	r0, [r7, #12]
    4da2:	4b08      	ldr	r3, [pc, #32]	; (4dc4 <_qspi_sync_command_set_ifr+0x7c>)
    4da4:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    4da6:	683b      	ldr	r3, [r7, #0]
    4da8:	681b      	ldr	r3, [r3, #0]
    4daa:	4619      	mov	r1, r3
    4dac:	68f8      	ldr	r0, [r7, #12]
    4dae:	4b06      	ldr	r3, [pc, #24]	; (4dc8 <_qspi_sync_command_set_ifr+0x80>)
    4db0:	4798      	blx	r3
}
    4db2:	bf00      	nop
    4db4:	3710      	adds	r7, #16
    4db6:	46bd      	mov	sp, r7
    4db8:	bd80      	pop	{r7, pc}
    4dba:	bf00      	nop
    4dbc:	00004b7d 	.word	0x00004b7d
    4dc0:	00004b99 	.word	0x00004b99
    4dc4:	00004bcd 	.word	0x00004bcd
    4dc8:	00004c05 	.word	0x00004c05

00004dcc <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    4dcc:	b580      	push	{r7, lr}
    4dce:	b084      	sub	sp, #16
    4dd0:	af00      	add	r7, sp, #0
    4dd2:	6078      	str	r0, [r7, #4]
    4dd4:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    4dd6:	687b      	ldr	r3, [r7, #4]
    4dd8:	681b      	ldr	r3, [r3, #0]
    4dda:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    4ddc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4de0:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    4de2:	683b      	ldr	r3, [r7, #0]
    4de4:	781b      	ldrb	r3, [r3, #0]
    4de6:	f003 0320 	and.w	r3, r3, #32
    4dea:	b2db      	uxtb	r3, r3
    4dec:	2b00      	cmp	r3, #0
    4dee:	d004      	beq.n	4dfa <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    4df0:	683b      	ldr	r3, [r7, #0]
    4df2:	689b      	ldr	r3, [r3, #8]
    4df4:	68fa      	ldr	r2, [r7, #12]
    4df6:	4413      	add	r3, r2
    4df8:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    4dfa:	68b8      	ldr	r0, [r7, #8]
    4dfc:	4b18      	ldr	r3, [pc, #96]	; (4e60 <_qspi_sync_run_transfer+0x94>)
    4dfe:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    4e00:	683b      	ldr	r3, [r7, #0]
    4e02:	691b      	ldr	r3, [r3, #16]
    4e04:	2b00      	cmp	r3, #0
    4e06:	d103      	bne.n	4e10 <_qspi_sync_run_transfer+0x44>
    4e08:	683b      	ldr	r3, [r7, #0]
    4e0a:	695b      	ldr	r3, [r3, #20]
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	d001      	beq.n	4e14 <_qspi_sync_run_transfer+0x48>
    4e10:	2301      	movs	r3, #1
    4e12:	e000      	b.n	4e16 <_qspi_sync_run_transfer+0x4a>
    4e14:	2300      	movs	r3, #0
    4e16:	f003 0301 	and.w	r3, r3, #1
    4e1a:	b2db      	uxtb	r3, r3
    4e1c:	2282      	movs	r2, #130	; 0x82
    4e1e:	4911      	ldr	r1, [pc, #68]	; (4e64 <_qspi_sync_run_transfer+0x98>)
    4e20:	4618      	mov	r0, r3
    4e22:	4b11      	ldr	r3, [pc, #68]	; (4e68 <_qspi_sync_run_transfer+0x9c>)
    4e24:	4798      	blx	r3

	if (cmd->tx_buf) {
    4e26:	683b      	ldr	r3, [r7, #0]
    4e28:	691b      	ldr	r3, [r3, #16]
    4e2a:	2b00      	cmp	r3, #0
    4e2c:	d008      	beq.n	4e40 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    4e2e:	683b      	ldr	r3, [r7, #0]
    4e30:	6919      	ldr	r1, [r3, #16]
    4e32:	683b      	ldr	r3, [r7, #0]
    4e34:	68db      	ldr	r3, [r3, #12]
    4e36:	461a      	mov	r2, r3
    4e38:	68f8      	ldr	r0, [r7, #12]
    4e3a:	4b0c      	ldr	r3, [pc, #48]	; (4e6c <_qspi_sync_run_transfer+0xa0>)
    4e3c:	4798      	blx	r3
    4e3e:	e007      	b.n	4e50 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    4e40:	683b      	ldr	r3, [r7, #0]
    4e42:	6958      	ldr	r0, [r3, #20]
    4e44:	683b      	ldr	r3, [r7, #0]
    4e46:	68db      	ldr	r3, [r3, #12]
    4e48:	461a      	mov	r2, r3
    4e4a:	68f9      	ldr	r1, [r7, #12]
    4e4c:	4b07      	ldr	r3, [pc, #28]	; (4e6c <_qspi_sync_run_transfer+0xa0>)
    4e4e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    4e50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4e54:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    4e58:	bf00      	nop
    4e5a:	3710      	adds	r7, #16
    4e5c:	46bd      	mov	sp, r7
    4e5e:	bd80      	pop	{r7, pc}
    4e60:	00004c21 	.word	0x00004c21
    4e64:	0000d1a8 	.word	0x0000d1a8
    4e68:	00002dd1 	.word	0x00002dd1
    4e6c:	00004c39 	.word	0x00004c39

00004e70 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    4e70:	b580      	push	{r7, lr}
    4e72:	b082      	sub	sp, #8
    4e74:	af00      	add	r7, sp, #0
    4e76:	6078      	str	r0, [r7, #4]
    4e78:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    4e7a:	6839      	ldr	r1, [r7, #0]
    4e7c:	6878      	ldr	r0, [r7, #4]
    4e7e:	4b14      	ldr	r3, [pc, #80]	; (4ed0 <_qspi_sync_serial_run_command+0x60>)
    4e80:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    4e82:	683b      	ldr	r3, [r7, #0]
    4e84:	781b      	ldrb	r3, [r3, #0]
    4e86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    4e8a:	b2db      	uxtb	r3, r3
    4e8c:	2b00      	cmp	r3, #0
    4e8e:	d003      	beq.n	4e98 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    4e90:	6839      	ldr	r1, [r7, #0]
    4e92:	6878      	ldr	r0, [r7, #4]
    4e94:	4b0f      	ldr	r3, [pc, #60]	; (4ed4 <_qspi_sync_serial_run_command+0x64>)
    4e96:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    4e98:	687b      	ldr	r3, [r7, #4]
    4e9a:	681b      	ldr	r3, [r3, #0]
    4e9c:	4618      	mov	r0, r3
    4e9e:	4b0e      	ldr	r3, [pc, #56]	; (4ed8 <_qspi_sync_serial_run_command+0x68>)
    4ea0:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    4ea2:	bf00      	nop
    4ea4:	687b      	ldr	r3, [r7, #4]
    4ea6:	681b      	ldr	r3, [r3, #0]
    4ea8:	4618      	mov	r0, r3
    4eaa:	4b0c      	ldr	r3, [pc, #48]	; (4edc <_qspi_sync_serial_run_command+0x6c>)
    4eac:	4798      	blx	r3
    4eae:	4603      	mov	r3, r0
    4eb0:	f083 0301 	eor.w	r3, r3, #1
    4eb4:	b2db      	uxtb	r3, r3
    4eb6:	2b00      	cmp	r3, #0
    4eb8:	d1f4      	bne.n	4ea4 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    4eba:	687b      	ldr	r3, [r7, #4]
    4ebc:	681b      	ldr	r3, [r3, #0]
    4ebe:	4618      	mov	r0, r3
    4ec0:	4b07      	ldr	r3, [pc, #28]	; (4ee0 <_qspi_sync_serial_run_command+0x70>)
    4ec2:	4798      	blx	r3
	return ERR_NONE;
    4ec4:	2300      	movs	r3, #0
}
    4ec6:	4618      	mov	r0, r3
    4ec8:	3708      	adds	r7, #8
    4eca:	46bd      	mov	sp, r7
    4ecc:	bd80      	pop	{r7, pc}
    4ece:	bf00      	nop
    4ed0:	00004d49 	.word	0x00004d49
    4ed4:	00004dcd 	.word	0x00004dcd
    4ed8:	00004c6d 	.word	0x00004c6d
    4edc:	00004ae5 	.word	0x00004ae5
    4ee0:	00004b0d 	.word	0x00004b0d

00004ee4 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    4ee4:	b480      	push	{r7}
    4ee6:	b083      	sub	sp, #12
    4ee8:	af00      	add	r7, sp, #0
    4eea:	6078      	str	r0, [r7, #4]
    4eec:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    4eee:	bf00      	nop
    4ef0:	687b      	ldr	r3, [r7, #4]
    4ef2:	691a      	ldr	r2, [r3, #16]
    4ef4:	683b      	ldr	r3, [r7, #0]
    4ef6:	4013      	ands	r3, r2
    4ef8:	2b00      	cmp	r3, #0
    4efa:	d1f9      	bne.n	4ef0 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    4efc:	bf00      	nop
    4efe:	370c      	adds	r7, #12
    4f00:	46bd      	mov	sp, r7
    4f02:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f06:	4770      	bx	lr

00004f08 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    4f08:	b480      	push	{r7}
    4f0a:	b083      	sub	sp, #12
    4f0c:	af00      	add	r7, sp, #0
    4f0e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    4f10:	687b      	ldr	r3, [r7, #4]
    4f12:	f44f 7280 	mov.w	r2, #256	; 0x100
    4f16:	819a      	strh	r2, [r3, #12]
}
    4f18:	bf00      	nop
    4f1a:	370c      	adds	r7, #12
    4f1c:	46bd      	mov	sp, r7
    4f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f22:	4770      	bx	lr

00004f24 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    4f24:	b480      	push	{r7}
    4f26:	b083      	sub	sp, #12
    4f28:	af00      	add	r7, sp, #0
    4f2a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    4f2c:	687b      	ldr	r3, [r7, #4]
    4f2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4f32:	819a      	strh	r2, [r3, #12]
}
    4f34:	bf00      	nop
    4f36:	370c      	adds	r7, #12
    4f38:	46bd      	mov	sp, r7
    4f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f3e:	4770      	bx	lr

00004f40 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    4f40:	b480      	push	{r7}
    4f42:	b083      	sub	sp, #12
    4f44:	af00      	add	r7, sp, #0
    4f46:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	899b      	ldrh	r3, [r3, #12]
    4f4c:	b29b      	uxth	r3, r3
}
    4f4e:	4618      	mov	r0, r3
    4f50:	370c      	adds	r7, #12
    4f52:	46bd      	mov	sp, r7
    4f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f58:	4770      	bx	lr

00004f5a <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    4f5a:	b480      	push	{r7}
    4f5c:	b083      	sub	sp, #12
    4f5e:	af00      	add	r7, sp, #0
    4f60:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    4f62:	687b      	ldr	r3, [r7, #4]
    4f64:	895b      	ldrh	r3, [r3, #10]
    4f66:	b29b      	uxth	r3, r3
}
    4f68:	4618      	mov	r0, r3
    4f6a:	370c      	adds	r7, #12
    4f6c:	46bd      	mov	sp, r7
    4f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f72:	4770      	bx	lr

00004f74 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    4f74:	b580      	push	{r7, lr}
    4f76:	b082      	sub	sp, #8
    4f78:	af00      	add	r7, sp, #0
    4f7a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    4f7c:	687b      	ldr	r3, [r7, #4]
    4f7e:	881b      	ldrh	r3, [r3, #0]
    4f80:	b29b      	uxth	r3, r3
    4f82:	f043 0301 	orr.w	r3, r3, #1
    4f86:	b29a      	uxth	r2, r3
    4f88:	687b      	ldr	r3, [r7, #4]
    4f8a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    4f8c:	2101      	movs	r1, #1
    4f8e:	6878      	ldr	r0, [r7, #4]
    4f90:	4b02      	ldr	r3, [pc, #8]	; (4f9c <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    4f92:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    4f94:	bf00      	nop
    4f96:	3708      	adds	r7, #8
    4f98:	46bd      	mov	sp, r7
    4f9a:	bd80      	pop	{r7, pc}
    4f9c:	00004ee5 	.word	0x00004ee5

00004fa0 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    4fa0:	b580      	push	{r7, lr}
    4fa2:	b084      	sub	sp, #16
    4fa4:	af00      	add	r7, sp, #0
    4fa6:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    4fa8:	f248 0103 	movw	r1, #32771	; 0x8003
    4fac:	6878      	ldr	r0, [r7, #4]
    4fae:	4b0a      	ldr	r3, [pc, #40]	; (4fd8 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    4fb0:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    4fb2:	687b      	ldr	r3, [r7, #4]
    4fb4:	881b      	ldrh	r3, [r3, #0]
    4fb6:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    4fb8:	89fb      	ldrh	r3, [r7, #14]
    4fba:	085b      	lsrs	r3, r3, #1
    4fbc:	b29b      	uxth	r3, r3
    4fbe:	f003 0301 	and.w	r3, r3, #1
    4fc2:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    4fc4:	89fb      	ldrh	r3, [r7, #14]
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	bf14      	ite	ne
    4fca:	2301      	movne	r3, #1
    4fcc:	2300      	moveq	r3, #0
    4fce:	b2db      	uxtb	r3, r3
}
    4fd0:	4618      	mov	r0, r3
    4fd2:	3710      	adds	r7, #16
    4fd4:	46bd      	mov	sp, r7
    4fd6:	bd80      	pop	{r7, pc}
    4fd8:	00004ee5 	.word	0x00004ee5

00004fdc <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4fdc:	b580      	push	{r7, lr}
    4fde:	b082      	sub	sp, #8
    4fe0:	af00      	add	r7, sp, #0
    4fe2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    4fe4:	687b      	ldr	r3, [r7, #4]
    4fe6:	881b      	ldrh	r3, [r3, #0]
    4fe8:	b29b      	uxth	r3, r3
    4fea:	f023 0302 	bic.w	r3, r3, #2
    4fee:	b29a      	uxth	r2, r3
    4ff0:	687b      	ldr	r3, [r7, #4]
    4ff2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    4ff4:	f248 0103 	movw	r1, #32771	; 0x8003
    4ff8:	6878      	ldr	r0, [r7, #4]
    4ffa:	4b03      	ldr	r3, [pc, #12]	; (5008 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    4ffc:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    4ffe:	bf00      	nop
    5000:	3708      	adds	r7, #8
    5002:	46bd      	mov	sp, r7
    5004:	bd80      	pop	{r7, pc}
    5006:	bf00      	nop
    5008:	00004ee5 	.word	0x00004ee5

0000500c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    500c:	b580      	push	{r7, lr}
    500e:	b082      	sub	sp, #8
    5010:	af00      	add	r7, sp, #0
    5012:	6078      	str	r0, [r7, #4]
    5014:	460b      	mov	r3, r1
    5016:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5018:	687b      	ldr	r3, [r7, #4]
    501a:	887a      	ldrh	r2, [r7, #2]
    501c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    501e:	f248 0103 	movw	r1, #32771	; 0x8003
    5022:	6878      	ldr	r0, [r7, #4]
    5024:	4b02      	ldr	r3, [pc, #8]	; (5030 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5026:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5028:	bf00      	nop
    502a:	3708      	adds	r7, #8
    502c:	46bd      	mov	sp, r7
    502e:	bd80      	pop	{r7, pc}
    5030:	00004ee5 	.word	0x00004ee5

00005034 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5034:	b480      	push	{r7}
    5036:	b083      	sub	sp, #12
    5038:	af00      	add	r7, sp, #0
    503a:	6078      	str	r0, [r7, #4]
    503c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    503e:	687b      	ldr	r3, [r7, #4]
    5040:	683a      	ldr	r2, [r7, #0]
    5042:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5044:	bf00      	nop
    5046:	370c      	adds	r7, #12
    5048:	46bd      	mov	sp, r7
    504a:	f85d 7b04 	ldr.w	r7, [sp], #4
    504e:	4770      	bx	lr

00005050 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5050:	b580      	push	{r7, lr}
    5052:	b082      	sub	sp, #8
    5054:	af00      	add	r7, sp, #0
    5056:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5058:	687b      	ldr	r3, [r7, #4]
    505a:	2b00      	cmp	r3, #0
    505c:	d005      	beq.n	506a <_calendar_init+0x1a>
    505e:	687b      	ldr	r3, [r7, #4]
    5060:	681b      	ldr	r3, [r3, #0]
    5062:	2b00      	cmp	r3, #0
    5064:	d001      	beq.n	506a <_calendar_init+0x1a>
    5066:	2301      	movs	r3, #1
    5068:	e000      	b.n	506c <_calendar_init+0x1c>
    506a:	2300      	movs	r3, #0
    506c:	f003 0301 	and.w	r3, r3, #1
    5070:	b2db      	uxtb	r3, r3
    5072:	222f      	movs	r2, #47	; 0x2f
    5074:	491b      	ldr	r1, [pc, #108]	; (50e4 <_calendar_init+0x94>)
    5076:	4618      	mov	r0, r3
    5078:	4b1b      	ldr	r3, [pc, #108]	; (50e8 <_calendar_init+0x98>)
    507a:	4798      	blx	r3

	_rtc_dev = dev;
    507c:	4a1b      	ldr	r2, [pc, #108]	; (50ec <_calendar_init+0x9c>)
    507e:	687b      	ldr	r3, [r7, #4]
    5080:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5082:	687b      	ldr	r3, [r7, #4]
    5084:	681b      	ldr	r3, [r3, #0]
    5086:	4618      	mov	r0, r3
    5088:	4b19      	ldr	r3, [pc, #100]	; (50f0 <_calendar_init+0xa0>)
    508a:	4798      	blx	r3
    508c:	4603      	mov	r3, r0
    508e:	2b00      	cmp	r3, #0
    5090:	d00a      	beq.n	50a8 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5092:	687b      	ldr	r3, [r7, #4]
    5094:	681b      	ldr	r3, [r3, #0]
    5096:	4618      	mov	r0, r3
    5098:	4b16      	ldr	r3, [pc, #88]	; (50f4 <_calendar_init+0xa4>)
    509a:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    509c:	687b      	ldr	r3, [r7, #4]
    509e:	681b      	ldr	r3, [r3, #0]
    50a0:	2102      	movs	r1, #2
    50a2:	4618      	mov	r0, r3
    50a4:	4b14      	ldr	r3, [pc, #80]	; (50f8 <_calendar_init+0xa8>)
    50a6:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    50a8:	687b      	ldr	r3, [r7, #4]
    50aa:	681b      	ldr	r3, [r3, #0]
    50ac:	4618      	mov	r0, r3
    50ae:	4b13      	ldr	r3, [pc, #76]	; (50fc <_calendar_init+0xac>)
    50b0:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    50b2:	687b      	ldr	r3, [r7, #4]
    50b4:	681b      	ldr	r3, [r3, #0]
    50b6:	2101      	movs	r1, #1
    50b8:	4618      	mov	r0, r3
    50ba:	4b0f      	ldr	r3, [pc, #60]	; (50f8 <_calendar_init+0xa8>)
    50bc:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    50be:	687b      	ldr	r3, [r7, #4]
    50c0:	681b      	ldr	r3, [r3, #0]
    50c2:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    50c6:	4618      	mov	r0, r3
    50c8:	4b0d      	ldr	r3, [pc, #52]	; (5100 <_calendar_init+0xb0>)
    50ca:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    50cc:	687b      	ldr	r3, [r7, #4]
    50ce:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    50d0:	2100      	movs	r1, #0
    50d2:	4618      	mov	r0, r3
    50d4:	4b0b      	ldr	r3, [pc, #44]	; (5104 <_calendar_init+0xb4>)
    50d6:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    50d8:	2300      	movs	r3, #0
}
    50da:	4618      	mov	r0, r3
    50dc:	3708      	adds	r7, #8
    50de:	46bd      	mov	sp, r7
    50e0:	bd80      	pop	{r7, pc}
    50e2:	bf00      	nop
    50e4:	0000d1c0 	.word	0x0000d1c0
    50e8:	00002dd1 	.word	0x00002dd1
    50ec:	2000082c 	.word	0x2000082c
    50f0:	00004fa1 	.word	0x00004fa1
    50f4:	00004fdd 	.word	0x00004fdd
    50f8:	00004ee5 	.word	0x00004ee5
    50fc:	00004f75 	.word	0x00004f75
    5100:	0000500d 	.word	0x0000500d
    5104:	00005035 	.word	0x00005035

00005108 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5108:	b580      	push	{r7, lr}
    510a:	b084      	sub	sp, #16
    510c:	af00      	add	r7, sp, #0
    510e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5110:	687b      	ldr	r3, [r7, #4]
    5112:	681b      	ldr	r3, [r3, #0]
    5114:	4618      	mov	r0, r3
    5116:	4b19      	ldr	r3, [pc, #100]	; (517c <_rtc_interrupt_handler+0x74>)
    5118:	4798      	blx	r3
    511a:	4603      	mov	r3, r0
    511c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    511e:	687b      	ldr	r3, [r7, #4]
    5120:	681b      	ldr	r3, [r3, #0]
    5122:	4618      	mov	r0, r3
    5124:	4b16      	ldr	r3, [pc, #88]	; (5180 <_rtc_interrupt_handler+0x78>)
    5126:	4798      	blx	r3
    5128:	4603      	mov	r3, r0
    512a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    512c:	89fa      	ldrh	r2, [r7, #14]
    512e:	89bb      	ldrh	r3, [r7, #12]
    5130:	4013      	ands	r3, r2
    5132:	b29b      	uxth	r3, r3
    5134:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5138:	2b00      	cmp	r3, #0
    513a:	d009      	beq.n	5150 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    513c:	687b      	ldr	r3, [r7, #4]
    513e:	685b      	ldr	r3, [r3, #4]
    5140:	6878      	ldr	r0, [r7, #4]
    5142:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5144:	687b      	ldr	r3, [r7, #4]
    5146:	681b      	ldr	r3, [r3, #0]
    5148:	4618      	mov	r0, r3
    514a:	4b0e      	ldr	r3, [pc, #56]	; (5184 <_rtc_interrupt_handler+0x7c>)
    514c:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    514e:	e010      	b.n	5172 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5150:	89fa      	ldrh	r2, [r7, #14]
    5152:	89bb      	ldrh	r3, [r7, #12]
    5154:	4013      	ands	r3, r2
    5156:	b29b      	uxth	r3, r3
    5158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    515c:	2b00      	cmp	r3, #0
    515e:	d008      	beq.n	5172 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5160:	687b      	ldr	r3, [r7, #4]
    5162:	689b      	ldr	r3, [r3, #8]
    5164:	6878      	ldr	r0, [r7, #4]
    5166:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5168:	687b      	ldr	r3, [r7, #4]
    516a:	681b      	ldr	r3, [r3, #0]
    516c:	4618      	mov	r0, r3
    516e:	4b06      	ldr	r3, [pc, #24]	; (5188 <_rtc_interrupt_handler+0x80>)
    5170:	4798      	blx	r3
}
    5172:	bf00      	nop
    5174:	3710      	adds	r7, #16
    5176:	46bd      	mov	sp, r7
    5178:	bd80      	pop	{r7, pc}
    517a:	bf00      	nop
    517c:	00004f41 	.word	0x00004f41
    5180:	00004f5b 	.word	0x00004f5b
    5184:	00004f09 	.word	0x00004f09
    5188:	00004f25 	.word	0x00004f25

0000518c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    518c:	b580      	push	{r7, lr}
    518e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5190:	4b03      	ldr	r3, [pc, #12]	; (51a0 <RTC_Handler+0x14>)
    5192:	681b      	ldr	r3, [r3, #0]
    5194:	4618      	mov	r0, r3
    5196:	4b03      	ldr	r3, [pc, #12]	; (51a4 <RTC_Handler+0x18>)
    5198:	4798      	blx	r3
}
    519a:	bf00      	nop
    519c:	bd80      	pop	{r7, pc}
    519e:	bf00      	nop
    51a0:	2000082c 	.word	0x2000082c
    51a4:	00005109 	.word	0x00005109

000051a8 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    51a8:	b480      	push	{r7}
    51aa:	b083      	sub	sp, #12
    51ac:	af00      	add	r7, sp, #0
    51ae:	6078      	str	r0, [r7, #4]
    51b0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    51b2:	bf00      	nop
    51b4:	687b      	ldr	r3, [r7, #4]
    51b6:	69da      	ldr	r2, [r3, #28]
    51b8:	683b      	ldr	r3, [r7, #0]
    51ba:	4013      	ands	r3, r2
    51bc:	2b00      	cmp	r3, #0
    51be:	d1f9      	bne.n	51b4 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    51c0:	bf00      	nop
    51c2:	370c      	adds	r7, #12
    51c4:	46bd      	mov	sp, r7
    51c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    51ca:	4770      	bx	lr

000051cc <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    51cc:	b480      	push	{r7}
    51ce:	b083      	sub	sp, #12
    51d0:	af00      	add	r7, sp, #0
    51d2:	6078      	str	r0, [r7, #4]
    51d4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    51d6:	687b      	ldr	r3, [r7, #4]
    51d8:	69da      	ldr	r2, [r3, #28]
    51da:	683b      	ldr	r3, [r7, #0]
    51dc:	4013      	ands	r3, r2
    51de:	2b00      	cmp	r3, #0
    51e0:	bf14      	ite	ne
    51e2:	2301      	movne	r3, #1
    51e4:	2300      	moveq	r3, #0
    51e6:	b2db      	uxtb	r3, r3
}
    51e8:	4618      	mov	r0, r3
    51ea:	370c      	adds	r7, #12
    51ec:	46bd      	mov	sp, r7
    51ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    51f2:	4770      	bx	lr

000051f4 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    51f4:	b480      	push	{r7}
    51f6:	b083      	sub	sp, #12
    51f8:	af00      	add	r7, sp, #0
    51fa:	6078      	str	r0, [r7, #4]
    51fc:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    51fe:	bf00      	nop
    5200:	687b      	ldr	r3, [r7, #4]
    5202:	69da      	ldr	r2, [r3, #28]
    5204:	683b      	ldr	r3, [r7, #0]
    5206:	4013      	ands	r3, r2
    5208:	2b00      	cmp	r3, #0
    520a:	d1f9      	bne.n	5200 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    520c:	bf00      	nop
    520e:	370c      	adds	r7, #12
    5210:	46bd      	mov	sp, r7
    5212:	f85d 7b04 	ldr.w	r7, [sp], #4
    5216:	4770      	bx	lr

00005218 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5218:	b480      	push	{r7}
    521a:	b083      	sub	sp, #12
    521c:	af00      	add	r7, sp, #0
    521e:	6078      	str	r0, [r7, #4]
    5220:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5222:	687b      	ldr	r3, [r7, #4]
    5224:	69da      	ldr	r2, [r3, #28]
    5226:	683b      	ldr	r3, [r7, #0]
    5228:	4013      	ands	r3, r2
    522a:	2b00      	cmp	r3, #0
    522c:	bf14      	ite	ne
    522e:	2301      	movne	r3, #1
    5230:	2300      	moveq	r3, #0
    5232:	b2db      	uxtb	r3, r3
}
    5234:	4618      	mov	r0, r3
    5236:	370c      	adds	r7, #12
    5238:	46bd      	mov	sp, r7
    523a:	f85d 7b04 	ldr.w	r7, [sp], #4
    523e:	4770      	bx	lr

00005240 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5240:	b480      	push	{r7}
    5242:	b083      	sub	sp, #12
    5244:	af00      	add	r7, sp, #0
    5246:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5248:	687b      	ldr	r3, [r7, #4]
    524a:	2201      	movs	r2, #1
    524c:	761a      	strb	r2, [r3, #24]
}
    524e:	bf00      	nop
    5250:	370c      	adds	r7, #12
    5252:	46bd      	mov	sp, r7
    5254:	f85d 7b04 	ldr.w	r7, [sp], #4
    5258:	4770      	bx	lr

0000525a <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    525a:	b480      	push	{r7}
    525c:	b083      	sub	sp, #12
    525e:	af00      	add	r7, sp, #0
    5260:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5262:	687b      	ldr	r3, [r7, #4]
    5264:	2202      	movs	r2, #2
    5266:	761a      	strb	r2, [r3, #24]
}
    5268:	bf00      	nop
    526a:	370c      	adds	r7, #12
    526c:	46bd      	mov	sp, r7
    526e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5272:	4770      	bx	lr

00005274 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5274:	b480      	push	{r7}
    5276:	b083      	sub	sp, #12
    5278:	af00      	add	r7, sp, #0
    527a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    527c:	687b      	ldr	r3, [r7, #4]
    527e:	7e1b      	ldrb	r3, [r3, #24]
    5280:	b2db      	uxtb	r3, r3
}
    5282:	4618      	mov	r0, r3
    5284:	370c      	adds	r7, #12
    5286:	46bd      	mov	sp, r7
    5288:	f85d 7b04 	ldr.w	r7, [sp], #4
    528c:	4770      	bx	lr

0000528e <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    528e:	b480      	push	{r7}
    5290:	b085      	sub	sp, #20
    5292:	af00      	add	r7, sp, #0
    5294:	6078      	str	r0, [r7, #4]
    5296:	460b      	mov	r3, r1
    5298:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    529a:	687b      	ldr	r3, [r7, #4]
    529c:	7e1b      	ldrb	r3, [r3, #24]
    529e:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    52a0:	7bfa      	ldrb	r2, [r7, #15]
    52a2:	78fb      	ldrb	r3, [r7, #3]
    52a4:	4013      	ands	r3, r2
    52a6:	73fb      	strb	r3, [r7, #15]
	return tmp;
    52a8:	7bfb      	ldrb	r3, [r7, #15]
}
    52aa:	4618      	mov	r0, r3
    52ac:	3714      	adds	r7, #20
    52ae:	46bd      	mov	sp, r7
    52b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    52b4:	4770      	bx	lr

000052b6 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    52b6:	b480      	push	{r7}
    52b8:	b083      	sub	sp, #12
    52ba:	af00      	add	r7, sp, #0
    52bc:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    52be:	687b      	ldr	r3, [r7, #4]
    52c0:	7e1b      	ldrb	r3, [r3, #24]
    52c2:	b2db      	uxtb	r3, r3
}
    52c4:	4618      	mov	r0, r3
    52c6:	370c      	adds	r7, #12
    52c8:	46bd      	mov	sp, r7
    52ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    52ce:	4770      	bx	lr

000052d0 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    52d0:	b480      	push	{r7}
    52d2:	b083      	sub	sp, #12
    52d4:	af00      	add	r7, sp, #0
    52d6:	6078      	str	r0, [r7, #4]
    52d8:	460b      	mov	r3, r1
    52da:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    52dc:	687b      	ldr	r3, [r7, #4]
    52de:	78fa      	ldrb	r2, [r7, #3]
    52e0:	761a      	strb	r2, [r3, #24]
}
    52e2:	bf00      	nop
    52e4:	370c      	adds	r7, #12
    52e6:	46bd      	mov	sp, r7
    52e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    52ec:	4770      	bx	lr
	...

000052f0 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    52f0:	b580      	push	{r7, lr}
    52f2:	b082      	sub	sp, #8
    52f4:	af00      	add	r7, sp, #0
    52f6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    52f8:	687b      	ldr	r3, [r7, #4]
    52fa:	681b      	ldr	r3, [r3, #0]
    52fc:	f043 0202 	orr.w	r2, r3, #2
    5300:	687b      	ldr	r3, [r7, #4]
    5302:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5304:	2103      	movs	r1, #3
    5306:	6878      	ldr	r0, [r7, #4]
    5308:	4b02      	ldr	r3, [pc, #8]	; (5314 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    530a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    530c:	bf00      	nop
    530e:	3708      	adds	r7, #8
    5310:	46bd      	mov	sp, r7
    5312:	bd80      	pop	{r7, pc}
    5314:	000051a9 	.word	0x000051a9

00005318 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5318:	b580      	push	{r7, lr}
    531a:	b082      	sub	sp, #8
    531c:	af00      	add	r7, sp, #0
    531e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5320:	687b      	ldr	r3, [r7, #4]
    5322:	681b      	ldr	r3, [r3, #0]
    5324:	f023 0202 	bic.w	r2, r3, #2
    5328:	687b      	ldr	r3, [r7, #4]
    532a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    532c:	2103      	movs	r1, #3
    532e:	6878      	ldr	r0, [r7, #4]
    5330:	4b02      	ldr	r3, [pc, #8]	; (533c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5332:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5334:	bf00      	nop
    5336:	3708      	adds	r7, #8
    5338:	46bd      	mov	sp, r7
    533a:	bd80      	pop	{r7, pc}
    533c:	000051a9 	.word	0x000051a9

00005340 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5340:	b480      	push	{r7}
    5342:	b085      	sub	sp, #20
    5344:	af00      	add	r7, sp, #0
    5346:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5348:	687b      	ldr	r3, [r7, #4]
    534a:	681b      	ldr	r3, [r3, #0]
    534c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    534e:	68fb      	ldr	r3, [r7, #12]
    5350:	0edb      	lsrs	r3, r3, #27
    5352:	f003 0301 	and.w	r3, r3, #1
    5356:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5358:	68fb      	ldr	r3, [r7, #12]
    535a:	2b00      	cmp	r3, #0
    535c:	bf14      	ite	ne
    535e:	2301      	movne	r3, #1
    5360:	2300      	moveq	r3, #0
    5362:	b2db      	uxtb	r3, r3
}
    5364:	4618      	mov	r0, r3
    5366:	3714      	adds	r7, #20
    5368:	46bd      	mov	sp, r7
    536a:	f85d 7b04 	ldr.w	r7, [sp], #4
    536e:	4770      	bx	lr

00005370 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5370:	b580      	push	{r7, lr}
    5372:	b084      	sub	sp, #16
    5374:	af00      	add	r7, sp, #0
    5376:	6078      	str	r0, [r7, #4]
    5378:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    537a:	2103      	movs	r1, #3
    537c:	6878      	ldr	r0, [r7, #4]
    537e:	4b07      	ldr	r3, [pc, #28]	; (539c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5380:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5382:	687b      	ldr	r3, [r7, #4]
    5384:	681b      	ldr	r3, [r3, #0]
    5386:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5388:	68fa      	ldr	r2, [r7, #12]
    538a:	683b      	ldr	r3, [r7, #0]
    538c:	4013      	ands	r3, r2
    538e:	60fb      	str	r3, [r7, #12]
	return tmp;
    5390:	68fb      	ldr	r3, [r7, #12]
}
    5392:	4618      	mov	r0, r3
    5394:	3710      	adds	r7, #16
    5396:	46bd      	mov	sp, r7
    5398:	bd80      	pop	{r7, pc}
    539a:	bf00      	nop
    539c:	000051a9 	.word	0x000051a9

000053a0 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    53a0:	b580      	push	{r7, lr}
    53a2:	b082      	sub	sp, #8
    53a4:	af00      	add	r7, sp, #0
    53a6:	6078      	str	r0, [r7, #4]
    53a8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    53aa:	687b      	ldr	r3, [r7, #4]
    53ac:	683a      	ldr	r2, [r7, #0]
    53ae:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    53b0:	2103      	movs	r1, #3
    53b2:	6878      	ldr	r0, [r7, #4]
    53b4:	4b02      	ldr	r3, [pc, #8]	; (53c0 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    53b6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    53b8:	bf00      	nop
    53ba:	3708      	adds	r7, #8
    53bc:	46bd      	mov	sp, r7
    53be:	bd80      	pop	{r7, pc}
    53c0:	000051a9 	.word	0x000051a9

000053c4 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    53c4:	b580      	push	{r7, lr}
    53c6:	b084      	sub	sp, #16
    53c8:	af00      	add	r7, sp, #0
    53ca:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    53cc:	2103      	movs	r1, #3
    53ce:	6878      	ldr	r0, [r7, #4]
    53d0:	4b09      	ldr	r3, [pc, #36]	; (53f8 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    53d2:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    53d4:	687b      	ldr	r3, [r7, #4]
    53d6:	681b      	ldr	r3, [r3, #0]
    53d8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    53da:	68fb      	ldr	r3, [r7, #12]
    53dc:	085b      	lsrs	r3, r3, #1
    53de:	f003 0301 	and.w	r3, r3, #1
    53e2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    53e4:	68fb      	ldr	r3, [r7, #12]
    53e6:	2b00      	cmp	r3, #0
    53e8:	bf14      	ite	ne
    53ea:	2301      	movne	r3, #1
    53ec:	2300      	moveq	r3, #0
    53ee:	b2db      	uxtb	r3, r3
}
    53f0:	4618      	mov	r0, r3
    53f2:	3710      	adds	r7, #16
    53f4:	46bd      	mov	sp, r7
    53f6:	bd80      	pop	{r7, pc}
    53f8:	000051f5 	.word	0x000051f5

000053fc <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    53fc:	b580      	push	{r7, lr}
    53fe:	b082      	sub	sp, #8
    5400:	af00      	add	r7, sp, #0
    5402:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5404:	687b      	ldr	r3, [r7, #4]
    5406:	681b      	ldr	r3, [r3, #0]
    5408:	f023 0202 	bic.w	r2, r3, #2
    540c:	687b      	ldr	r3, [r7, #4]
    540e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5410:	2103      	movs	r1, #3
    5412:	6878      	ldr	r0, [r7, #4]
    5414:	4b02      	ldr	r3, [pc, #8]	; (5420 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5416:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5418:	bf00      	nop
    541a:	3708      	adds	r7, #8
    541c:	46bd      	mov	sp, r7
    541e:	bd80      	pop	{r7, pc}
    5420:	000051f5 	.word	0x000051f5

00005424 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5424:	b580      	push	{r7, lr}
    5426:	b084      	sub	sp, #16
    5428:	af00      	add	r7, sp, #0
    542a:	6078      	str	r0, [r7, #4]
    542c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    542e:	2103      	movs	r1, #3
    5430:	6878      	ldr	r0, [r7, #4]
    5432:	4b07      	ldr	r3, [pc, #28]	; (5450 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5434:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5436:	687b      	ldr	r3, [r7, #4]
    5438:	681b      	ldr	r3, [r3, #0]
    543a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    543c:	68fa      	ldr	r2, [r7, #12]
    543e:	683b      	ldr	r3, [r7, #0]
    5440:	4013      	ands	r3, r2
    5442:	60fb      	str	r3, [r7, #12]
	return tmp;
    5444:	68fb      	ldr	r3, [r7, #12]
}
    5446:	4618      	mov	r0, r3
    5448:	3710      	adds	r7, #16
    544a:	46bd      	mov	sp, r7
    544c:	bd80      	pop	{r7, pc}
    544e:	bf00      	nop
    5450:	000051f5 	.word	0x000051f5

00005454 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5454:	b580      	push	{r7, lr}
    5456:	b082      	sub	sp, #8
    5458:	af00      	add	r7, sp, #0
    545a:	6078      	str	r0, [r7, #4]
    545c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    545e:	687b      	ldr	r3, [r7, #4]
    5460:	683a      	ldr	r2, [r7, #0]
    5462:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5464:	2103      	movs	r1, #3
    5466:	6878      	ldr	r0, [r7, #4]
    5468:	4b02      	ldr	r3, [pc, #8]	; (5474 <hri_sercomspi_write_CTRLA_reg+0x20>)
    546a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    546c:	bf00      	nop
    546e:	3708      	adds	r7, #8
    5470:	46bd      	mov	sp, r7
    5472:	bd80      	pop	{r7, pc}
    5474:	000051f5 	.word	0x000051f5

00005478 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5478:	b580      	push	{r7, lr}
    547a:	b082      	sub	sp, #8
    547c:	af00      	add	r7, sp, #0
    547e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5480:	687b      	ldr	r3, [r7, #4]
    5482:	685b      	ldr	r3, [r3, #4]
    5484:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5488:	687b      	ldr	r3, [r7, #4]
    548a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    548c:	2104      	movs	r1, #4
    548e:	6878      	ldr	r0, [r7, #4]
    5490:	4b02      	ldr	r3, [pc, #8]	; (549c <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5492:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5494:	bf00      	nop
    5496:	3708      	adds	r7, #8
    5498:	46bd      	mov	sp, r7
    549a:	bd80      	pop	{r7, pc}
    549c:	000051a9 	.word	0x000051a9

000054a0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    54a0:	b580      	push	{r7, lr}
    54a2:	b082      	sub	sp, #8
    54a4:	af00      	add	r7, sp, #0
    54a6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    54a8:	687b      	ldr	r3, [r7, #4]
    54aa:	685b      	ldr	r3, [r3, #4]
    54ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    54b0:	687b      	ldr	r3, [r7, #4]
    54b2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    54b4:	2104      	movs	r1, #4
    54b6:	6878      	ldr	r0, [r7, #4]
    54b8:	4b02      	ldr	r3, [pc, #8]	; (54c4 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    54ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    54bc:	bf00      	nop
    54be:	3708      	adds	r7, #8
    54c0:	46bd      	mov	sp, r7
    54c2:	bd80      	pop	{r7, pc}
    54c4:	000051a9 	.word	0x000051a9

000054c8 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    54c8:	b580      	push	{r7, lr}
    54ca:	b082      	sub	sp, #8
    54cc:	af00      	add	r7, sp, #0
    54ce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    54d0:	687b      	ldr	r3, [r7, #4]
    54d2:	685b      	ldr	r3, [r3, #4]
    54d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    54d8:	687b      	ldr	r3, [r7, #4]
    54da:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    54dc:	2104      	movs	r1, #4
    54de:	6878      	ldr	r0, [r7, #4]
    54e0:	4b02      	ldr	r3, [pc, #8]	; (54ec <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    54e2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    54e4:	bf00      	nop
    54e6:	3708      	adds	r7, #8
    54e8:	46bd      	mov	sp, r7
    54ea:	bd80      	pop	{r7, pc}
    54ec:	000051a9 	.word	0x000051a9

000054f0 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    54f0:	b580      	push	{r7, lr}
    54f2:	b082      	sub	sp, #8
    54f4:	af00      	add	r7, sp, #0
    54f6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    54f8:	687b      	ldr	r3, [r7, #4]
    54fa:	685b      	ldr	r3, [r3, #4]
    54fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5500:	687b      	ldr	r3, [r7, #4]
    5502:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5504:	2104      	movs	r1, #4
    5506:	6878      	ldr	r0, [r7, #4]
    5508:	4b02      	ldr	r3, [pc, #8]	; (5514 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    550a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    550c:	bf00      	nop
    550e:	3708      	adds	r7, #8
    5510:	46bd      	mov	sp, r7
    5512:	bd80      	pop	{r7, pc}
    5514:	000051a9 	.word	0x000051a9

00005518 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5518:	b580      	push	{r7, lr}
    551a:	b082      	sub	sp, #8
    551c:	af00      	add	r7, sp, #0
    551e:	6078      	str	r0, [r7, #4]
    5520:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5522:	687b      	ldr	r3, [r7, #4]
    5524:	685a      	ldr	r2, [r3, #4]
    5526:	683b      	ldr	r3, [r7, #0]
    5528:	041b      	lsls	r3, r3, #16
    552a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    552e:	431a      	orrs	r2, r3
    5530:	687b      	ldr	r3, [r7, #4]
    5532:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5534:	2104      	movs	r1, #4
    5536:	6878      	ldr	r0, [r7, #4]
    5538:	4b02      	ldr	r3, [pc, #8]	; (5544 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    553a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    553c:	bf00      	nop
    553e:	3708      	adds	r7, #8
    5540:	46bd      	mov	sp, r7
    5542:	bd80      	pop	{r7, pc}
    5544:	000051a9 	.word	0x000051a9

00005548 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5548:	b580      	push	{r7, lr}
    554a:	b082      	sub	sp, #8
    554c:	af00      	add	r7, sp, #0
    554e:	6078      	str	r0, [r7, #4]
    5550:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5552:	687b      	ldr	r3, [r7, #4]
    5554:	683a      	ldr	r2, [r7, #0]
    5556:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5558:	2104      	movs	r1, #4
    555a:	6878      	ldr	r0, [r7, #4]
    555c:	4b02      	ldr	r3, [pc, #8]	; (5568 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    555e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5560:	bf00      	nop
    5562:	3708      	adds	r7, #8
    5564:	46bd      	mov	sp, r7
    5566:	bd80      	pop	{r7, pc}
    5568:	000051a9 	.word	0x000051a9

0000556c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    556c:	b580      	push	{r7, lr}
    556e:	b082      	sub	sp, #8
    5570:	af00      	add	r7, sp, #0
    5572:	6078      	str	r0, [r7, #4]
    5574:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5576:	687b      	ldr	r3, [r7, #4]
    5578:	683a      	ldr	r2, [r7, #0]
    557a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    557c:	2117      	movs	r1, #23
    557e:	6878      	ldr	r0, [r7, #4]
    5580:	4b02      	ldr	r3, [pc, #8]	; (558c <hri_sercomspi_write_CTRLB_reg+0x20>)
    5582:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5584:	bf00      	nop
    5586:	3708      	adds	r7, #8
    5588:	46bd      	mov	sp, r7
    558a:	bd80      	pop	{r7, pc}
    558c:	000051f5 	.word	0x000051f5

00005590 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5590:	b480      	push	{r7}
    5592:	b083      	sub	sp, #12
    5594:	af00      	add	r7, sp, #0
    5596:	6078      	str	r0, [r7, #4]
    5598:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    559a:	687b      	ldr	r3, [r7, #4]
    559c:	683a      	ldr	r2, [r7, #0]
    559e:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    55a0:	bf00      	nop
    55a2:	370c      	adds	r7, #12
    55a4:	46bd      	mov	sp, r7
    55a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    55aa:	4770      	bx	lr

000055ac <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    55ac:	b480      	push	{r7}
    55ae:	b083      	sub	sp, #12
    55b0:	af00      	add	r7, sp, #0
    55b2:	6078      	str	r0, [r7, #4]
    55b4:	460b      	mov	r3, r1
    55b6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    55b8:	687b      	ldr	r3, [r7, #4]
    55ba:	78fa      	ldrb	r2, [r7, #3]
    55bc:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    55be:	bf00      	nop
    55c0:	370c      	adds	r7, #12
    55c2:	46bd      	mov	sp, r7
    55c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    55c8:	4770      	bx	lr
	...

000055cc <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    55cc:	b580      	push	{r7, lr}
    55ce:	b084      	sub	sp, #16
    55d0:	af00      	add	r7, sp, #0
    55d2:	6078      	str	r0, [r7, #4]
    55d4:	460b      	mov	r3, r1
    55d6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    55d8:	687b      	ldr	r3, [r7, #4]
    55da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    55dc:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    55de:	68fb      	ldr	r3, [r7, #12]
    55e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    55e4:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    55e6:	78fb      	ldrb	r3, [r7, #3]
    55e8:	039b      	lsls	r3, r3, #14
    55ea:	461a      	mov	r2, r3
    55ec:	68fb      	ldr	r3, [r7, #12]
    55ee:	4313      	orrs	r3, r2
    55f0:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    55f2:	687b      	ldr	r3, [r7, #4]
    55f4:	68fa      	ldr	r2, [r7, #12]
    55f6:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    55f8:	2104      	movs	r1, #4
    55fa:	6878      	ldr	r0, [r7, #4]
    55fc:	4b02      	ldr	r3, [pc, #8]	; (5608 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    55fe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5600:	bf00      	nop
    5602:	3710      	adds	r7, #16
    5604:	46bd      	mov	sp, r7
    5606:	bd80      	pop	{r7, pc}
    5608:	000051a9 	.word	0x000051a9

0000560c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    560c:	b580      	push	{r7, lr}
    560e:	b082      	sub	sp, #8
    5610:	af00      	add	r7, sp, #0
    5612:	6078      	str	r0, [r7, #4]
    5614:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5616:	687b      	ldr	r3, [r7, #4]
    5618:	683a      	ldr	r2, [r7, #0]
    561a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    561c:	2104      	movs	r1, #4
    561e:	6878      	ldr	r0, [r7, #4]
    5620:	4b02      	ldr	r3, [pc, #8]	; (562c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5622:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5624:	bf00      	nop
    5626:	3708      	adds	r7, #8
    5628:	46bd      	mov	sp, r7
    562a:	bd80      	pop	{r7, pc}
    562c:	000051a9 	.word	0x000051a9

00005630 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5630:	b580      	push	{r7, lr}
    5632:	b082      	sub	sp, #8
    5634:	af00      	add	r7, sp, #0
    5636:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5638:	2104      	movs	r1, #4
    563a:	6878      	ldr	r0, [r7, #4]
    563c:	4b03      	ldr	r3, [pc, #12]	; (564c <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    563e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5640:	687b      	ldr	r3, [r7, #4]
    5642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5644:	4618      	mov	r0, r3
    5646:	3708      	adds	r7, #8
    5648:	46bd      	mov	sp, r7
    564a:	bd80      	pop	{r7, pc}
    564c:	000051a9 	.word	0x000051a9

00005650 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5650:	b480      	push	{r7}
    5652:	b083      	sub	sp, #12
    5654:	af00      	add	r7, sp, #0
    5656:	6078      	str	r0, [r7, #4]
    5658:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    565a:	687b      	ldr	r3, [r7, #4]
    565c:	683a      	ldr	r2, [r7, #0]
    565e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5660:	bf00      	nop
    5662:	370c      	adds	r7, #12
    5664:	46bd      	mov	sp, r7
    5666:	f85d 7b04 	ldr.w	r7, [sp], #4
    566a:	4770      	bx	lr

0000566c <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    566c:	b580      	push	{r7, lr}
    566e:	b082      	sub	sp, #8
    5670:	af00      	add	r7, sp, #0
    5672:	6078      	str	r0, [r7, #4]
    5674:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    5676:	687b      	ldr	r3, [r7, #4]
    5678:	683a      	ldr	r2, [r7, #0]
    567a:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    567c:	2104      	movs	r1, #4
    567e:	6878      	ldr	r0, [r7, #4]
    5680:	4b02      	ldr	r3, [pc, #8]	; (568c <hri_sercomi2cm_write_DATA_reg+0x20>)
    5682:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5684:	bf00      	nop
    5686:	3708      	adds	r7, #8
    5688:	46bd      	mov	sp, r7
    568a:	bd80      	pop	{r7, pc}
    568c:	000051a9 	.word	0x000051a9

00005690 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    5690:	b580      	push	{r7, lr}
    5692:	b082      	sub	sp, #8
    5694:	af00      	add	r7, sp, #0
    5696:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5698:	2104      	movs	r1, #4
    569a:	6878      	ldr	r0, [r7, #4]
    569c:	4b03      	ldr	r3, [pc, #12]	; (56ac <hri_sercomi2cm_read_DATA_reg+0x1c>)
    569e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    56a0:	687b      	ldr	r3, [r7, #4]
    56a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    56a4:	4618      	mov	r0, r3
    56a6:	3708      	adds	r7, #8
    56a8:	46bd      	mov	sp, r7
    56aa:	bd80      	pop	{r7, pc}
    56ac:	000051a9 	.word	0x000051a9

000056b0 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    56b0:	b480      	push	{r7}
    56b2:	b083      	sub	sp, #12
    56b4:	af00      	add	r7, sp, #0
    56b6:	6078      	str	r0, [r7, #4]
    56b8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    56ba:	687b      	ldr	r3, [r7, #4]
    56bc:	683a      	ldr	r2, [r7, #0]
    56be:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    56c0:	bf00      	nop
    56c2:	370c      	adds	r7, #12
    56c4:	46bd      	mov	sp, r7
    56c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    56ca:	4770      	bx	lr

000056cc <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    56cc:	b480      	push	{r7}
    56ce:	b083      	sub	sp, #12
    56d0:	af00      	add	r7, sp, #0
    56d2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    56d4:	687b      	ldr	r3, [r7, #4]
    56d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    56d8:	4618      	mov	r0, r3
    56da:	370c      	adds	r7, #12
    56dc:	46bd      	mov	sp, r7
    56de:	f85d 7b04 	ldr.w	r7, [sp], #4
    56e2:	4770      	bx	lr

000056e4 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    56e4:	b480      	push	{r7}
    56e6:	b083      	sub	sp, #12
    56e8:	af00      	add	r7, sp, #0
    56ea:	6078      	str	r0, [r7, #4]
    56ec:	460b      	mov	r3, r1
    56ee:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    56f0:	687b      	ldr	r3, [r7, #4]
    56f2:	78fa      	ldrb	r2, [r7, #3]
    56f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    56f8:	bf00      	nop
    56fa:	370c      	adds	r7, #12
    56fc:	46bd      	mov	sp, r7
    56fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5702:	4770      	bx	lr

00005704 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    5704:	b480      	push	{r7}
    5706:	b083      	sub	sp, #12
    5708:	af00      	add	r7, sp, #0
    570a:	6078      	str	r0, [r7, #4]
    570c:	460b      	mov	r3, r1
    570e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    5710:	687b      	ldr	r3, [r7, #4]
    5712:	887a      	ldrh	r2, [r7, #2]
    5714:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5716:	bf00      	nop
    5718:	370c      	adds	r7, #12
    571a:	46bd      	mov	sp, r7
    571c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5720:	4770      	bx	lr
	...

00005724 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    5724:	b580      	push	{r7, lr}
    5726:	b082      	sub	sp, #8
    5728:	af00      	add	r7, sp, #0
    572a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    572c:	2104      	movs	r1, #4
    572e:	6878      	ldr	r0, [r7, #4]
    5730:	4b06      	ldr	r3, [pc, #24]	; (574c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    5732:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    5734:	687b      	ldr	r3, [r7, #4]
    5736:	8b5b      	ldrh	r3, [r3, #26]
    5738:	b29b      	uxth	r3, r3
    573a:	091b      	lsrs	r3, r3, #4
    573c:	b29b      	uxth	r3, r3
    573e:	f003 0303 	and.w	r3, r3, #3
    5742:	b29b      	uxth	r3, r3
}
    5744:	4618      	mov	r0, r3
    5746:	3708      	adds	r7, #8
    5748:	46bd      	mov	sp, r7
    574a:	bd80      	pop	{r7, pc}
    574c:	000051a9 	.word	0x000051a9

00005750 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    5750:	b580      	push	{r7, lr}
    5752:	b082      	sub	sp, #8
    5754:	af00      	add	r7, sp, #0
    5756:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5758:	2104      	movs	r1, #4
    575a:	6878      	ldr	r0, [r7, #4]
    575c:	4b04      	ldr	r3, [pc, #16]	; (5770 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    575e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    5760:	687b      	ldr	r3, [r7, #4]
    5762:	8b5b      	ldrh	r3, [r3, #26]
    5764:	b29b      	uxth	r3, r3
}
    5766:	4618      	mov	r0, r3
    5768:	3708      	adds	r7, #8
    576a:	46bd      	mov	sp, r7
    576c:	bd80      	pop	{r7, pc}
    576e:	bf00      	nop
    5770:	000051a9 	.word	0x000051a9

00005774 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    5774:	b580      	push	{r7, lr}
    5776:	b082      	sub	sp, #8
    5778:	af00      	add	r7, sp, #0
    577a:	6078      	str	r0, [r7, #4]
    577c:	460b      	mov	r3, r1
    577e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    5780:	687b      	ldr	r3, [r7, #4]
    5782:	887a      	ldrh	r2, [r7, #2]
    5784:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5786:	2104      	movs	r1, #4
    5788:	6878      	ldr	r0, [r7, #4]
    578a:	4b03      	ldr	r3, [pc, #12]	; (5798 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    578c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    578e:	bf00      	nop
    5790:	3708      	adds	r7, #8
    5792:	46bd      	mov	sp, r7
    5794:	bd80      	pop	{r7, pc}
    5796:	bf00      	nop
    5798:	000051a9 	.word	0x000051a9

0000579c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    579c:	b4b0      	push	{r4, r5, r7}
    579e:	b08d      	sub	sp, #52	; 0x34
    57a0:	af00      	add	r7, sp, #0
    57a2:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    57a4:	4b13      	ldr	r3, [pc, #76]	; (57f4 <_sercom_get_hardware_index+0x58>)
    57a6:	f107 040c 	add.w	r4, r7, #12
    57aa:	461d      	mov	r5, r3
    57ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    57ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    57b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    57b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    57b8:	2300      	movs	r3, #0
    57ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    57bc:	e010      	b.n	57e0 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    57be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    57c0:	009b      	lsls	r3, r3, #2
    57c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    57c6:	4413      	add	r3, r2
    57c8:	f853 3c24 	ldr.w	r3, [r3, #-36]
    57cc:	461a      	mov	r2, r3
    57ce:	687b      	ldr	r3, [r7, #4]
    57d0:	429a      	cmp	r2, r3
    57d2:	d102      	bne.n	57da <_sercom_get_hardware_index+0x3e>
			return i;
    57d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    57d6:	b2db      	uxtb	r3, r3
    57d8:	e006      	b.n	57e8 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    57da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    57dc:	3301      	adds	r3, #1
    57de:	62fb      	str	r3, [r7, #44]	; 0x2c
    57e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    57e2:	2b07      	cmp	r3, #7
    57e4:	d9eb      	bls.n	57be <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    57e6:	2300      	movs	r3, #0
}
    57e8:	4618      	mov	r0, r3
    57ea:	3734      	adds	r7, #52	; 0x34
    57ec:	46bd      	mov	sp, r7
    57ee:	bcb0      	pop	{r4, r5, r7}
    57f0:	4770      	bx	lr
    57f2:	bf00      	nop
    57f4:	0000d1f4 	.word	0x0000d1f4

000057f8 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    57f8:	b580      	push	{r7, lr}
    57fa:	b084      	sub	sp, #16
    57fc:	af00      	add	r7, sp, #0
    57fe:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    5800:	6878      	ldr	r0, [r7, #4]
    5802:	4b13      	ldr	r3, [pc, #76]	; (5850 <_get_i2cm_index+0x58>)
    5804:	4798      	blx	r3
    5806:	4603      	mov	r3, r0
    5808:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    580a:	2300      	movs	r3, #0
    580c:	73fb      	strb	r3, [r7, #15]
    580e:	e010      	b.n	5832 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    5810:	7bfa      	ldrb	r2, [r7, #15]
    5812:	4910      	ldr	r1, [pc, #64]	; (5854 <_get_i2cm_index+0x5c>)
    5814:	4613      	mov	r3, r2
    5816:	005b      	lsls	r3, r3, #1
    5818:	4413      	add	r3, r2
    581a:	00db      	lsls	r3, r3, #3
    581c:	440b      	add	r3, r1
    581e:	781b      	ldrb	r3, [r3, #0]
    5820:	7bba      	ldrb	r2, [r7, #14]
    5822:	429a      	cmp	r2, r3
    5824:	d102      	bne.n	582c <_get_i2cm_index+0x34>
			return i;
    5826:	f997 300f 	ldrsb.w	r3, [r7, #15]
    582a:	e00d      	b.n	5848 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    582c:	7bfb      	ldrb	r3, [r7, #15]
    582e:	3301      	adds	r3, #1
    5830:	73fb      	strb	r3, [r7, #15]
    5832:	7bfb      	ldrb	r3, [r7, #15]
    5834:	2b02      	cmp	r3, #2
    5836:	d9eb      	bls.n	5810 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    5838:	f240 32a6 	movw	r2, #934	; 0x3a6
    583c:	4906      	ldr	r1, [pc, #24]	; (5858 <_get_i2cm_index+0x60>)
    583e:	2000      	movs	r0, #0
    5840:	4b06      	ldr	r3, [pc, #24]	; (585c <_get_i2cm_index+0x64>)
    5842:	4798      	blx	r3
	return -1;
    5844:	f04f 33ff 	mov.w	r3, #4294967295
}
    5848:	4618      	mov	r0, r3
    584a:	3710      	adds	r7, #16
    584c:	46bd      	mov	sp, r7
    584e:	bd80      	pop	{r7, pc}
    5850:	0000579d 	.word	0x0000579d
    5854:	20000018 	.word	0x20000018
    5858:	0000d1d8 	.word	0x0000d1d8
    585c:	00002dd1 	.word	0x00002dd1

00005860 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    5860:	b580      	push	{r7, lr}
    5862:	b082      	sub	sp, #8
    5864:	af00      	add	r7, sp, #0
    5866:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    5868:	2103      	movs	r1, #3
    586a:	6878      	ldr	r0, [r7, #4]
    586c:	4b02      	ldr	r3, [pc, #8]	; (5878 <_sercom_i2c_send_stop+0x18>)
    586e:	4798      	blx	r3
}
    5870:	bf00      	nop
    5872:	3708      	adds	r7, #8
    5874:	46bd      	mov	sp, r7
    5876:	bd80      	pop	{r7, pc}
    5878:	00005519 	.word	0x00005519

0000587c <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    587c:	b590      	push	{r4, r7, lr}
    587e:	b087      	sub	sp, #28
    5880:	af00      	add	r7, sp, #0
    5882:	60f8      	str	r0, [r7, #12]
    5884:	60b9      	str	r1, [r7, #8]
    5886:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    5888:	68f8      	ldr	r0, [r7, #12]
    588a:	4b7d      	ldr	r3, [pc, #500]	; (5a80 <_sercom_i2c_sync_analyse_flags+0x204>)
    588c:	4798      	blx	r3
    588e:	4603      	mov	r3, r0
    5890:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    5892:	68f8      	ldr	r0, [r7, #12]
    5894:	4b7b      	ldr	r3, [pc, #492]	; (5a84 <_sercom_i2c_sync_analyse_flags+0x208>)
    5896:	4798      	blx	r3
    5898:	4603      	mov	r3, r0
    589a:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    589c:	68bb      	ldr	r3, [r7, #8]
    589e:	f003 0301 	and.w	r3, r3, #1
    58a2:	2b00      	cmp	r3, #0
    58a4:	f000 8095 	beq.w	59d2 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    58a8:	8a7b      	ldrh	r3, [r7, #18]
    58aa:	f003 0302 	and.w	r3, r3, #2
    58ae:	2b00      	cmp	r3, #0
    58b0:	d01d      	beq.n	58ee <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    58b2:	68f8      	ldr	r0, [r7, #12]
    58b4:	4b74      	ldr	r3, [pc, #464]	; (5a88 <_sercom_i2c_sync_analyse_flags+0x20c>)
    58b6:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    58b8:	687b      	ldr	r3, [r7, #4]
    58ba:	885b      	ldrh	r3, [r3, #2]
    58bc:	b29b      	uxth	r3, r3
    58be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    58c2:	b29a      	uxth	r2, r3
    58c4:	687b      	ldr	r3, [r7, #4]
    58c6:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    58c8:	687b      	ldr	r3, [r7, #4]
    58ca:	885b      	ldrh	r3, [r3, #2]
    58cc:	b29b      	uxth	r3, r3
    58ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    58d2:	b29a      	uxth	r2, r3
    58d4:	687b      	ldr	r3, [r7, #4]
    58d6:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    58d8:	8a7b      	ldrh	r3, [r7, #18]
    58da:	f003 0301 	and.w	r3, r3, #1
    58de:	2b00      	cmp	r3, #0
    58e0:	d002      	beq.n	58e8 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    58e2:	f06f 0304 	mvn.w	r3, #4
    58e6:	e0c6      	b.n	5a76 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    58e8:	f06f 0303 	mvn.w	r3, #3
    58ec:	e0c3      	b.n	5a76 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    58ee:	8a7b      	ldrh	r3, [r7, #18]
    58f0:	f003 0304 	and.w	r3, r3, #4
    58f4:	2b00      	cmp	r3, #0
    58f6:	d01f      	beq.n	5938 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    58f8:	687b      	ldr	r3, [r7, #4]
    58fa:	685b      	ldr	r3, [r3, #4]
    58fc:	2b00      	cmp	r3, #0
    58fe:	dd07      	ble.n	5910 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    5900:	687b      	ldr	r3, [r7, #4]
    5902:	885b      	ldrh	r3, [r3, #2]
    5904:	b29b      	uxth	r3, r3
    5906:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    590a:	b29a      	uxth	r2, r3
    590c:	687b      	ldr	r3, [r7, #4]
    590e:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    5910:	687b      	ldr	r3, [r7, #4]
    5912:	885b      	ldrh	r3, [r3, #2]
    5914:	b29b      	uxth	r3, r3
    5916:	b21b      	sxth	r3, r3
    5918:	2b00      	cmp	r3, #0
    591a:	da02      	bge.n	5922 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    591c:	68f8      	ldr	r0, [r7, #12]
    591e:	4b5b      	ldr	r3, [pc, #364]	; (5a8c <_sercom_i2c_sync_analyse_flags+0x210>)
    5920:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5922:	687b      	ldr	r3, [r7, #4]
    5924:	885b      	ldrh	r3, [r3, #2]
    5926:	b29b      	uxth	r3, r3
    5928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    592c:	b29a      	uxth	r2, r3
    592e:	687b      	ldr	r3, [r7, #4]
    5930:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    5932:	f06f 0301 	mvn.w	r3, #1
    5936:	e09e      	b.n	5a76 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    5938:	687b      	ldr	r3, [r7, #4]
    593a:	885b      	ldrh	r3, [r3, #2]
    593c:	b29b      	uxth	r3, r3
    593e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5942:	2b00      	cmp	r3, #0
    5944:	d01c      	beq.n	5980 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    5946:	687b      	ldr	r3, [r7, #4]
    5948:	881b      	ldrh	r3, [r3, #0]
    594a:	121b      	asrs	r3, r3, #8
    594c:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    594e:	f003 0406 	and.w	r4, r3, #6
    5952:	68f8      	ldr	r0, [r7, #12]
    5954:	4b4e      	ldr	r3, [pc, #312]	; (5a90 <_sercom_i2c_sync_analyse_flags+0x214>)
    5956:	4798      	blx	r3
    5958:	4603      	mov	r3, r0
    595a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    595e:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    5960:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    5964:	4619      	mov	r1, r3
    5966:	68f8      	ldr	r0, [r7, #12]
    5968:	4b4a      	ldr	r3, [pc, #296]	; (5a94 <_sercom_i2c_sync_analyse_flags+0x218>)
    596a:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    596c:	687b      	ldr	r3, [r7, #4]
    596e:	885b      	ldrh	r3, [r3, #2]
    5970:	b29b      	uxth	r3, r3
    5972:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    5976:	b29a      	uxth	r2, r3
    5978:	687b      	ldr	r3, [r7, #4]
    597a:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    597c:	2300      	movs	r3, #0
    597e:	e07a      	b.n	5a76 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    5980:	687b      	ldr	r3, [r7, #4]
    5982:	685b      	ldr	r3, [r3, #4]
    5984:	2b00      	cmp	r3, #0
    5986:	d111      	bne.n	59ac <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    5988:	687b      	ldr	r3, [r7, #4]
    598a:	885b      	ldrh	r3, [r3, #2]
    598c:	b29b      	uxth	r3, r3
    598e:	b21b      	sxth	r3, r3
    5990:	2b00      	cmp	r3, #0
    5992:	da02      	bge.n	599a <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    5994:	68f8      	ldr	r0, [r7, #12]
    5996:	4b3d      	ldr	r3, [pc, #244]	; (5a8c <_sercom_i2c_sync_analyse_flags+0x210>)
    5998:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    599a:	687b      	ldr	r3, [r7, #4]
    599c:	885b      	ldrh	r3, [r3, #2]
    599e:	b29b      	uxth	r3, r3
    59a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    59a4:	b29a      	uxth	r2, r3
    59a6:	687b      	ldr	r3, [r7, #4]
    59a8:	805a      	strh	r2, [r3, #2]
    59aa:	e010      	b.n	59ce <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    59ac:	687b      	ldr	r3, [r7, #4]
    59ae:	689b      	ldr	r3, [r3, #8]
    59b0:	781b      	ldrb	r3, [r3, #0]
    59b2:	4619      	mov	r1, r3
    59b4:	68f8      	ldr	r0, [r7, #12]
    59b6:	4b38      	ldr	r3, [pc, #224]	; (5a98 <_sercom_i2c_sync_analyse_flags+0x21c>)
    59b8:	4798      	blx	r3
				msg->buffer++;
    59ba:	687b      	ldr	r3, [r7, #4]
    59bc:	689b      	ldr	r3, [r3, #8]
    59be:	1c5a      	adds	r2, r3, #1
    59c0:	687b      	ldr	r3, [r7, #4]
    59c2:	609a      	str	r2, [r3, #8]
				msg->len--;
    59c4:	687b      	ldr	r3, [r7, #4]
    59c6:	685b      	ldr	r3, [r3, #4]
    59c8:	1e5a      	subs	r2, r3, #1
    59ca:	687b      	ldr	r3, [r7, #4]
    59cc:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    59ce:	2300      	movs	r3, #0
    59d0:	e051      	b.n	5a76 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    59d2:	68bb      	ldr	r3, [r7, #8]
    59d4:	f003 0302 	and.w	r3, r3, #2
    59d8:	2b00      	cmp	r3, #0
    59da:	d04b      	beq.n	5a74 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    59dc:	687b      	ldr	r3, [r7, #4]
    59de:	685b      	ldr	r3, [r3, #4]
    59e0:	2b00      	cmp	r3, #0
    59e2:	d041      	beq.n	5a68 <_sercom_i2c_sync_analyse_flags+0x1ec>
    59e4:	8a7b      	ldrh	r3, [r7, #18]
    59e6:	f003 0304 	and.w	r3, r3, #4
    59ea:	2b00      	cmp	r3, #0
    59ec:	d13c      	bne.n	5a68 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    59ee:	687b      	ldr	r3, [r7, #4]
    59f0:	685b      	ldr	r3, [r3, #4]
    59f2:	1e5a      	subs	r2, r3, #1
    59f4:	687b      	ldr	r3, [r7, #4]
    59f6:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    59f8:	687b      	ldr	r3, [r7, #4]
    59fa:	685b      	ldr	r3, [r3, #4]
    59fc:	2b00      	cmp	r3, #0
    59fe:	d102      	bne.n	5a06 <_sercom_i2c_sync_analyse_flags+0x18a>
    5a00:	697b      	ldr	r3, [r7, #20]
    5a02:	2b00      	cmp	r3, #0
    5a04:	d006      	beq.n	5a14 <_sercom_i2c_sync_analyse_flags+0x198>
    5a06:	687b      	ldr	r3, [r7, #4]
    5a08:	685b      	ldr	r3, [r3, #4]
    5a0a:	2b01      	cmp	r3, #1
    5a0c:	d105      	bne.n	5a1a <_sercom_i2c_sync_analyse_flags+0x19e>
    5a0e:	697b      	ldr	r3, [r7, #20]
    5a10:	2b00      	cmp	r3, #0
    5a12:	d002      	beq.n	5a1a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    5a14:	68f8      	ldr	r0, [r7, #12]
    5a16:	4b21      	ldr	r3, [pc, #132]	; (5a9c <_sercom_i2c_sync_analyse_flags+0x220>)
    5a18:	4798      	blx	r3
			}

			if (msg->len == 0) {
    5a1a:	687b      	ldr	r3, [r7, #4]
    5a1c:	685b      	ldr	r3, [r3, #4]
    5a1e:	2b00      	cmp	r3, #0
    5a20:	d113      	bne.n	5a4a <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    5a22:	687b      	ldr	r3, [r7, #4]
    5a24:	885b      	ldrh	r3, [r3, #2]
    5a26:	b29b      	uxth	r3, r3
    5a28:	b21b      	sxth	r3, r3
    5a2a:	2b00      	cmp	r3, #0
    5a2c:	da05      	bge.n	5a3a <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    5a2e:	68f8      	ldr	r0, [r7, #12]
    5a30:	4b1b      	ldr	r3, [pc, #108]	; (5aa0 <_sercom_i2c_sync_analyse_flags+0x224>)
    5a32:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    5a34:	68f8      	ldr	r0, [r7, #12]
    5a36:	4b15      	ldr	r3, [pc, #84]	; (5a8c <_sercom_i2c_sync_analyse_flags+0x210>)
    5a38:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5a3a:	687b      	ldr	r3, [r7, #4]
    5a3c:	885b      	ldrh	r3, [r3, #2]
    5a3e:	b29b      	uxth	r3, r3
    5a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5a44:	b29a      	uxth	r2, r3
    5a46:	687b      	ldr	r3, [r7, #4]
    5a48:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    5a4a:	687b      	ldr	r3, [r7, #4]
    5a4c:	689c      	ldr	r4, [r3, #8]
    5a4e:	1c62      	adds	r2, r4, #1
    5a50:	687b      	ldr	r3, [r7, #4]
    5a52:	609a      	str	r2, [r3, #8]
    5a54:	68f8      	ldr	r0, [r7, #12]
    5a56:	4b13      	ldr	r3, [pc, #76]	; (5aa4 <_sercom_i2c_sync_analyse_flags+0x228>)
    5a58:	4798      	blx	r3
    5a5a:	4603      	mov	r3, r0
    5a5c:	b2db      	uxtb	r3, r3
    5a5e:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    5a60:	68f8      	ldr	r0, [r7, #12]
    5a62:	4b11      	ldr	r3, [pc, #68]	; (5aa8 <_sercom_i2c_sync_analyse_flags+0x22c>)
    5a64:	4798      	blx	r3
    5a66:	e005      	b.n	5a74 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    5a68:	68f8      	ldr	r0, [r7, #12]
    5a6a:	4b0f      	ldr	r3, [pc, #60]	; (5aa8 <_sercom_i2c_sync_analyse_flags+0x22c>)
    5a6c:	4798      	blx	r3
			return I2C_NACK;
    5a6e:	f06f 0301 	mvn.w	r3, #1
    5a72:	e000      	b.n	5a76 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    5a74:	2300      	movs	r3, #0
}
    5a76:	4618      	mov	r0, r3
    5a78:	371c      	adds	r7, #28
    5a7a:	46bd      	mov	sp, r7
    5a7c:	bd90      	pop	{r4, r7, pc}
    5a7e:	bf00      	nop
    5a80:	00005341 	.word	0x00005341
    5a84:	00005751 	.word	0x00005751
    5a88:	00005241 	.word	0x00005241
    5a8c:	00005861 	.word	0x00005861
    5a90:	00005631 	.word	0x00005631
    5a94:	0000560d 	.word	0x0000560d
    5a98:	0000566d 	.word	0x0000566d
    5a9c:	000054c9 	.word	0x000054c9
    5aa0:	000054a1 	.word	0x000054a1
    5aa4:	00005691 	.word	0x00005691
    5aa8:	0000525b 	.word	0x0000525b

00005aac <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    5aac:	b580      	push	{r7, lr}
    5aae:	b082      	sub	sp, #8
    5ab0:	af00      	add	r7, sp, #0
    5ab2:	6078      	str	r0, [r7, #4]
    5ab4:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    5ab6:	687b      	ldr	r3, [r7, #4]
    5ab8:	2b00      	cmp	r3, #0
    5aba:	bf14      	ite	ne
    5abc:	2301      	movne	r3, #1
    5abe:	2300      	moveq	r3, #0
    5ac0:	b2db      	uxtb	r3, r3
    5ac2:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    5ac6:	4908      	ldr	r1, [pc, #32]	; (5ae8 <_i2c_m_sync_init+0x3c>)
    5ac8:	4618      	mov	r0, r3
    5aca:	4b08      	ldr	r3, [pc, #32]	; (5aec <_i2c_m_sync_init+0x40>)
    5acc:	4798      	blx	r3

	i2c_dev->hw = hw;
    5ace:	687b      	ldr	r3, [r7, #4]
    5ad0:	683a      	ldr	r2, [r7, #0]
    5ad2:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    5ad4:	687b      	ldr	r3, [r7, #4]
    5ad6:	6839      	ldr	r1, [r7, #0]
    5ad8:	4618      	mov	r0, r3
    5ada:	4b05      	ldr	r3, [pc, #20]	; (5af0 <_i2c_m_sync_init+0x44>)
    5adc:	4798      	blx	r3
    5ade:	4603      	mov	r3, r0
}
    5ae0:	4618      	mov	r0, r3
    5ae2:	3708      	adds	r7, #8
    5ae4:	46bd      	mov	sp, r7
    5ae6:	bd80      	pop	{r7, pc}
    5ae8:	0000d1d8 	.word	0x0000d1d8
    5aec:	00002dd1 	.word	0x00002dd1
    5af0:	00005ec5 	.word	0x00005ec5

00005af4 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    5af4:	b580      	push	{r7, lr}
    5af6:	b082      	sub	sp, #8
    5af8:	af00      	add	r7, sp, #0
    5afa:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    5afc:	687b      	ldr	r3, [r7, #4]
    5afe:	2b00      	cmp	r3, #0
    5b00:	bf14      	ite	ne
    5b02:	2301      	movne	r3, #1
    5b04:	2300      	moveq	r3, #0
    5b06:	b2db      	uxtb	r3, r3
    5b08:	f240 5235 	movw	r2, #1333	; 0x535
    5b0c:	4906      	ldr	r1, [pc, #24]	; (5b28 <_i2c_m_sync_enable+0x34>)
    5b0e:	4618      	mov	r0, r3
    5b10:	4b06      	ldr	r3, [pc, #24]	; (5b2c <_i2c_m_sync_enable+0x38>)
    5b12:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    5b14:	687b      	ldr	r3, [r7, #4]
    5b16:	691b      	ldr	r3, [r3, #16]
    5b18:	4618      	mov	r0, r3
    5b1a:	4b05      	ldr	r3, [pc, #20]	; (5b30 <_i2c_m_sync_enable+0x3c>)
    5b1c:	4798      	blx	r3
    5b1e:	4603      	mov	r3, r0
}
    5b20:	4618      	mov	r0, r3
    5b22:	3708      	adds	r7, #8
    5b24:	46bd      	mov	sp, r7
    5b26:	bd80      	pop	{r7, pc}
    5b28:	0000d1d8 	.word	0x0000d1d8
    5b2c:	00002dd1 	.word	0x00002dd1
    5b30:	00005e39 	.word	0x00005e39

00005b34 <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    5b34:	b580      	push	{r7, lr}
    5b36:	b084      	sub	sp, #16
    5b38:	af00      	add	r7, sp, #0
    5b3a:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    5b3c:	687b      	ldr	r3, [r7, #4]
    5b3e:	691b      	ldr	r3, [r3, #16]
    5b40:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    5b42:	687b      	ldr	r3, [r7, #4]
    5b44:	2b00      	cmp	r3, #0
    5b46:	bf14      	ite	ne
    5b48:	2301      	movne	r3, #1
    5b4a:	2300      	moveq	r3, #0
    5b4c:	b2db      	uxtb	r3, r3
    5b4e:	f240 5243 	movw	r2, #1347	; 0x543
    5b52:	490c      	ldr	r1, [pc, #48]	; (5b84 <_i2c_m_sync_disable+0x50>)
    5b54:	4618      	mov	r0, r3
    5b56:	4b0c      	ldr	r3, [pc, #48]	; (5b88 <_i2c_m_sync_disable+0x54>)
    5b58:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    5b5a:	687b      	ldr	r3, [r7, #4]
    5b5c:	691b      	ldr	r3, [r3, #16]
    5b5e:	2b00      	cmp	r3, #0
    5b60:	bf14      	ite	ne
    5b62:	2301      	movne	r3, #1
    5b64:	2300      	moveq	r3, #0
    5b66:	b2db      	uxtb	r3, r3
    5b68:	f240 5244 	movw	r2, #1348	; 0x544
    5b6c:	4905      	ldr	r1, [pc, #20]	; (5b84 <_i2c_m_sync_disable+0x50>)
    5b6e:	4618      	mov	r0, r3
    5b70:	4b05      	ldr	r3, [pc, #20]	; (5b88 <_i2c_m_sync_disable+0x54>)
    5b72:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    5b74:	68f8      	ldr	r0, [r7, #12]
    5b76:	4b05      	ldr	r3, [pc, #20]	; (5b8c <_i2c_m_sync_disable+0x58>)
    5b78:	4798      	blx	r3

	return ERR_NONE;
    5b7a:	2300      	movs	r3, #0
}
    5b7c:	4618      	mov	r0, r3
    5b7e:	3710      	adds	r7, #16
    5b80:	46bd      	mov	sp, r7
    5b82:	bd80      	pop	{r7, pc}
    5b84:	0000d1d8 	.word	0x0000d1d8
    5b88:	00002dd1 	.word	0x00002dd1
    5b8c:	00005319 	.word	0x00005319

00005b90 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    5b90:	b580      	push	{r7, lr}
    5b92:	b084      	sub	sp, #16
    5b94:	af00      	add	r7, sp, #0
    5b96:	6078      	str	r0, [r7, #4]
    5b98:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    5b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5b9e:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    5ba0:	687b      	ldr	r3, [r7, #4]
    5ba2:	691b      	ldr	r3, [r3, #16]
    5ba4:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    5ba6:	68b8      	ldr	r0, [r7, #8]
    5ba8:	4b0f      	ldr	r3, [pc, #60]	; (5be8 <_sercom_i2c_sync_wait_bus+0x58>)
    5baa:	4798      	blx	r3
    5bac:	4603      	mov	r3, r0
    5bae:	461a      	mov	r2, r3
    5bb0:	683b      	ldr	r3, [r7, #0]
    5bb2:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    5bb4:	68fb      	ldr	r3, [r7, #12]
    5bb6:	1e5a      	subs	r2, r3, #1
    5bb8:	60fa      	str	r2, [r7, #12]
    5bba:	2b00      	cmp	r3, #0
    5bbc:	d102      	bne.n	5bc4 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    5bbe:	f06f 0304 	mvn.w	r3, #4
    5bc2:	e00c      	b.n	5bde <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    5bc4:	683b      	ldr	r3, [r7, #0]
    5bc6:	681b      	ldr	r3, [r3, #0]
    5bc8:	f003 0301 	and.w	r3, r3, #1
    5bcc:	2b00      	cmp	r3, #0
    5bce:	d105      	bne.n	5bdc <_sercom_i2c_sync_wait_bus+0x4c>
    5bd0:	683b      	ldr	r3, [r7, #0]
    5bd2:	681b      	ldr	r3, [r3, #0]
    5bd4:	f003 0302 	and.w	r3, r3, #2
    5bd8:	2b00      	cmp	r3, #0
    5bda:	d0e4      	beq.n	5ba6 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    5bdc:	2300      	movs	r3, #0
}
    5bde:	4618      	mov	r0, r3
    5be0:	3710      	adds	r7, #16
    5be2:	46bd      	mov	sp, r7
    5be4:	bd80      	pop	{r7, pc}
    5be6:	bf00      	nop
    5be8:	00005275 	.word	0x00005275

00005bec <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    5bec:	b590      	push	{r4, r7, lr}
    5bee:	b087      	sub	sp, #28
    5bf0:	af00      	add	r7, sp, #0
    5bf2:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    5bf4:	687b      	ldr	r3, [r7, #4]
    5bf6:	691b      	ldr	r3, [r3, #16]
    5bf8:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    5bfa:	687b      	ldr	r3, [r7, #4]
    5bfc:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    5bfe:	6978      	ldr	r0, [r7, #20]
    5c00:	4b39      	ldr	r3, [pc, #228]	; (5ce8 <_sercom_i2c_sync_send_address+0xfc>)
    5c02:	4798      	blx	r3
    5c04:	4603      	mov	r3, r0
    5c06:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    5c08:	687b      	ldr	r3, [r7, #4]
    5c0a:	2b00      	cmp	r3, #0
    5c0c:	bf14      	ite	ne
    5c0e:	2301      	movne	r3, #1
    5c10:	2300      	moveq	r3, #0
    5c12:	b2db      	uxtb	r3, r3
    5c14:	f240 52a5 	movw	r2, #1445	; 0x5a5
    5c18:	4934      	ldr	r1, [pc, #208]	; (5cec <_sercom_i2c_sync_send_address+0x100>)
    5c1a:	4618      	mov	r0, r3
    5c1c:	4b34      	ldr	r3, [pc, #208]	; (5cf0 <_sercom_i2c_sync_send_address+0x104>)
    5c1e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    5c20:	693b      	ldr	r3, [r7, #16]
    5c22:	685b      	ldr	r3, [r3, #4]
    5c24:	2b01      	cmp	r3, #1
    5c26:	d106      	bne.n	5c36 <_sercom_i2c_sync_send_address+0x4a>
    5c28:	68fb      	ldr	r3, [r7, #12]
    5c2a:	2b00      	cmp	r3, #0
    5c2c:	d003      	beq.n	5c36 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    5c2e:	6978      	ldr	r0, [r7, #20]
    5c30:	4b30      	ldr	r3, [pc, #192]	; (5cf4 <_sercom_i2c_sync_send_address+0x108>)
    5c32:	4798      	blx	r3
    5c34:	e002      	b.n	5c3c <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    5c36:	6978      	ldr	r0, [r7, #20]
    5c38:	4b2f      	ldr	r3, [pc, #188]	; (5cf8 <_sercom_i2c_sync_send_address+0x10c>)
    5c3a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    5c3c:	693b      	ldr	r3, [r7, #16]
    5c3e:	881b      	ldrh	r3, [r3, #0]
    5c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5c44:	2b00      	cmp	r3, #0
    5c46:	d022      	beq.n	5c8e <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    5c48:	693b      	ldr	r3, [r7, #16]
    5c4a:	885b      	ldrh	r3, [r3, #2]
    5c4c:	b29b      	uxth	r3, r3
    5c4e:	f003 0301 	and.w	r3, r3, #1
    5c52:	2b00      	cmp	r3, #0
    5c54:	d007      	beq.n	5c66 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    5c56:	693b      	ldr	r3, [r7, #16]
    5c58:	885b      	ldrh	r3, [r3, #2]
    5c5a:	b29b      	uxth	r3, r3
    5c5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    5c60:	b29a      	uxth	r2, r3
    5c62:	693b      	ldr	r3, [r7, #16]
    5c64:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    5c66:	693b      	ldr	r3, [r7, #16]
    5c68:	881b      	ldrh	r3, [r3, #0]
    5c6a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    5c6c:	f240 74fe 	movw	r4, #2046	; 0x7fe
    5c70:	401c      	ands	r4, r3
    5c72:	6978      	ldr	r0, [r7, #20]
    5c74:	4b21      	ldr	r3, [pc, #132]	; (5cfc <_sercom_i2c_sync_send_address+0x110>)
    5c76:	4798      	blx	r3
    5c78:	4603      	mov	r3, r0
    5c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5c7e:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    5c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    5c84:	4619      	mov	r1, r3
    5c86:	6978      	ldr	r0, [r7, #20]
    5c88:	4b1d      	ldr	r3, [pc, #116]	; (5d00 <_sercom_i2c_sync_send_address+0x114>)
    5c8a:	4798      	blx	r3
    5c8c:	e01a      	b.n	5cc4 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    5c8e:	693b      	ldr	r3, [r7, #16]
    5c90:	881b      	ldrh	r3, [r3, #0]
    5c92:	005b      	lsls	r3, r3, #1
    5c94:	b2db      	uxtb	r3, r3
    5c96:	693a      	ldr	r2, [r7, #16]
    5c98:	8852      	ldrh	r2, [r2, #2]
    5c9a:	b292      	uxth	r2, r2
    5c9c:	f002 0201 	and.w	r2, r2, #1
    5ca0:	2a00      	cmp	r2, #0
    5ca2:	bf14      	ite	ne
    5ca4:	2201      	movne	r2, #1
    5ca6:	2200      	moveq	r2, #0
    5ca8:	b2d2      	uxtb	r2, r2
    5caa:	4313      	orrs	r3, r2
    5cac:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    5cae:	6978      	ldr	r0, [r7, #20]
    5cb0:	4b12      	ldr	r3, [pc, #72]	; (5cfc <_sercom_i2c_sync_send_address+0x110>)
    5cb2:	4798      	blx	r3
    5cb4:	4603      	mov	r3, r0
    5cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    5cba:	4323      	orrs	r3, r4
    5cbc:	4619      	mov	r1, r3
    5cbe:	6978      	ldr	r0, [r7, #20]
    5cc0:	4b0f      	ldr	r3, [pc, #60]	; (5d00 <_sercom_i2c_sync_send_address+0x114>)
    5cc2:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    5cc4:	f107 0308 	add.w	r3, r7, #8
    5cc8:	4619      	mov	r1, r3
    5cca:	6878      	ldr	r0, [r7, #4]
    5ccc:	4b0d      	ldr	r3, [pc, #52]	; (5d04 <_sercom_i2c_sync_send_address+0x118>)
    5cce:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    5cd0:	68bb      	ldr	r3, [r7, #8]
    5cd2:	693a      	ldr	r2, [r7, #16]
    5cd4:	4619      	mov	r1, r3
    5cd6:	6978      	ldr	r0, [r7, #20]
    5cd8:	4b0b      	ldr	r3, [pc, #44]	; (5d08 <_sercom_i2c_sync_send_address+0x11c>)
    5cda:	4798      	blx	r3
    5cdc:	4603      	mov	r3, r0
}
    5cde:	4618      	mov	r0, r3
    5ce0:	371c      	adds	r7, #28
    5ce2:	46bd      	mov	sp, r7
    5ce4:	bd90      	pop	{r4, r7, pc}
    5ce6:	bf00      	nop
    5ce8:	00005341 	.word	0x00005341
    5cec:	0000d1d8 	.word	0x0000d1d8
    5cf0:	00002dd1 	.word	0x00002dd1
    5cf4:	000054c9 	.word	0x000054c9
    5cf8:	000054f1 	.word	0x000054f1
    5cfc:	00005631 	.word	0x00005631
    5d00:	0000560d 	.word	0x0000560d
    5d04:	00005b91 	.word	0x00005b91
    5d08:	0000587d 	.word	0x0000587d

00005d0c <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    5d0c:	b580      	push	{r7, lr}
    5d0e:	b086      	sub	sp, #24
    5d10:	af00      	add	r7, sp, #0
    5d12:	6078      	str	r0, [r7, #4]
    5d14:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    5d16:	687b      	ldr	r3, [r7, #4]
    5d18:	691b      	ldr	r3, [r3, #16]
    5d1a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    5d1c:	687b      	ldr	r3, [r7, #4]
    5d1e:	2b00      	cmp	r3, #0
    5d20:	bf14      	ite	ne
    5d22:	2301      	movne	r3, #1
    5d24:	2300      	moveq	r3, #0
    5d26:	b2db      	uxtb	r3, r3
    5d28:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    5d2c:	493b      	ldr	r1, [pc, #236]	; (5e1c <_i2c_m_sync_transfer+0x110>)
    5d2e:	4618      	mov	r0, r3
    5d30:	4b3b      	ldr	r3, [pc, #236]	; (5e20 <_i2c_m_sync_transfer+0x114>)
    5d32:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    5d34:	687b      	ldr	r3, [r7, #4]
    5d36:	691b      	ldr	r3, [r3, #16]
    5d38:	2b00      	cmp	r3, #0
    5d3a:	bf14      	ite	ne
    5d3c:	2301      	movne	r3, #1
    5d3e:	2300      	moveq	r3, #0
    5d40:	b2db      	uxtb	r3, r3
    5d42:	f240 52d1 	movw	r2, #1489	; 0x5d1
    5d46:	4935      	ldr	r1, [pc, #212]	; (5e1c <_i2c_m_sync_transfer+0x110>)
    5d48:	4618      	mov	r0, r3
    5d4a:	4b35      	ldr	r3, [pc, #212]	; (5e20 <_i2c_m_sync_transfer+0x114>)
    5d4c:	4798      	blx	r3
	ASSERT(msg);
    5d4e:	683b      	ldr	r3, [r7, #0]
    5d50:	2b00      	cmp	r3, #0
    5d52:	bf14      	ite	ne
    5d54:	2301      	movne	r3, #1
    5d56:	2300      	moveq	r3, #0
    5d58:	b2db      	uxtb	r3, r3
    5d5a:	f240 52d2 	movw	r2, #1490	; 0x5d2
    5d5e:	492f      	ldr	r1, [pc, #188]	; (5e1c <_i2c_m_sync_transfer+0x110>)
    5d60:	4618      	mov	r0, r3
    5d62:	4b2f      	ldr	r3, [pc, #188]	; (5e20 <_i2c_m_sync_transfer+0x114>)
    5d64:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    5d66:	687b      	ldr	r3, [r7, #4]
    5d68:	885b      	ldrh	r3, [r3, #2]
    5d6a:	b29b      	uxth	r3, r3
    5d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5d70:	2b00      	cmp	r3, #0
    5d72:	d002      	beq.n	5d7a <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    5d74:	f06f 0305 	mvn.w	r3, #5
    5d78:	e04c      	b.n	5e14 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    5d7a:	683b      	ldr	r3, [r7, #0]
    5d7c:	885b      	ldrh	r3, [r3, #2]
    5d7e:	b29b      	uxth	r3, r3
    5d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5d84:	b29a      	uxth	r2, r3
    5d86:	683b      	ldr	r3, [r7, #0]
    5d88:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    5d8a:	687b      	ldr	r3, [r7, #4]
    5d8c:	683a      	ldr	r2, [r7, #0]
    5d8e:	ca07      	ldmia	r2, {r0, r1, r2}
    5d90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    5d94:	6938      	ldr	r0, [r7, #16]
    5d96:	4b23      	ldr	r3, [pc, #140]	; (5e24 <_i2c_m_sync_transfer+0x118>)
    5d98:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    5d9a:	6878      	ldr	r0, [r7, #4]
    5d9c:	4b22      	ldr	r3, [pc, #136]	; (5e28 <_i2c_m_sync_transfer+0x11c>)
    5d9e:	4798      	blx	r3
    5da0:	6178      	str	r0, [r7, #20]

	if (ret) {
    5da2:	697b      	ldr	r3, [r7, #20]
    5da4:	2b00      	cmp	r3, #0
    5da6:	d02d      	beq.n	5e04 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    5da8:	687b      	ldr	r3, [r7, #4]
    5daa:	885b      	ldrh	r3, [r3, #2]
    5dac:	b29b      	uxth	r3, r3
    5dae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5db2:	b29a      	uxth	r2, r3
    5db4:	687b      	ldr	r3, [r7, #4]
    5db6:	805a      	strh	r2, [r3, #2]

		return ret;
    5db8:	697b      	ldr	r3, [r7, #20]
    5dba:	e02b      	b.n	5e14 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    5dbc:	f107 030c 	add.w	r3, r7, #12
    5dc0:	4619      	mov	r1, r3
    5dc2:	6878      	ldr	r0, [r7, #4]
    5dc4:	4b19      	ldr	r3, [pc, #100]	; (5e2c <_i2c_m_sync_transfer+0x120>)
    5dc6:	4798      	blx	r3
    5dc8:	6178      	str	r0, [r7, #20]

		if (ret) {
    5dca:	697b      	ldr	r3, [r7, #20]
    5dcc:	2b00      	cmp	r3, #0
    5dce:	d012      	beq.n	5df6 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    5dd0:	683b      	ldr	r3, [r7, #0]
    5dd2:	885b      	ldrh	r3, [r3, #2]
    5dd4:	b29b      	uxth	r3, r3
    5dd6:	b21b      	sxth	r3, r3
    5dd8:	2b00      	cmp	r3, #0
    5dda:	da02      	bge.n	5de2 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    5ddc:	6938      	ldr	r0, [r7, #16]
    5dde:	4b14      	ldr	r3, [pc, #80]	; (5e30 <_i2c_m_sync_transfer+0x124>)
    5de0:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    5de2:	687b      	ldr	r3, [r7, #4]
    5de4:	885b      	ldrh	r3, [r3, #2]
    5de6:	b29b      	uxth	r3, r3
    5de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5dec:	b29a      	uxth	r2, r3
    5dee:	687b      	ldr	r3, [r7, #4]
    5df0:	805a      	strh	r2, [r3, #2]

			return ret;
    5df2:	697b      	ldr	r3, [r7, #20]
    5df4:	e00e      	b.n	5e14 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    5df6:	68fb      	ldr	r3, [r7, #12]
    5df8:	687a      	ldr	r2, [r7, #4]
    5dfa:	4619      	mov	r1, r3
    5dfc:	6938      	ldr	r0, [r7, #16]
    5dfe:	4b0d      	ldr	r3, [pc, #52]	; (5e34 <_i2c_m_sync_transfer+0x128>)
    5e00:	4798      	blx	r3
    5e02:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    5e04:	687b      	ldr	r3, [r7, #4]
    5e06:	885b      	ldrh	r3, [r3, #2]
    5e08:	b29b      	uxth	r3, r3
    5e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5e0e:	2b00      	cmp	r3, #0
    5e10:	d1d4      	bne.n	5dbc <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    5e12:	697b      	ldr	r3, [r7, #20]
}
    5e14:	4618      	mov	r0, r3
    5e16:	3718      	adds	r7, #24
    5e18:	46bd      	mov	sp, r7
    5e1a:	bd80      	pop	{r7, pc}
    5e1c:	0000d1d8 	.word	0x0000d1d8
    5e20:	00002dd1 	.word	0x00002dd1
    5e24:	00005479 	.word	0x00005479
    5e28:	00005bed 	.word	0x00005bed
    5e2c:	00005b91 	.word	0x00005b91
    5e30:	00005861 	.word	0x00005861
    5e34:	0000587d 	.word	0x0000587d

00005e38 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    5e38:	b580      	push	{r7, lr}
    5e3a:	b084      	sub	sp, #16
    5e3c:	af00      	add	r7, sp, #0
    5e3e:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    5e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5e44:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    5e46:	2304      	movs	r3, #4
    5e48:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    5e4a:	687b      	ldr	r3, [r7, #4]
    5e4c:	2b00      	cmp	r3, #0
    5e4e:	bf14      	ite	ne
    5e50:	2301      	movne	r3, #1
    5e52:	2300      	moveq	r3, #0
    5e54:	b2db      	uxtb	r3, r3
    5e56:	f240 6205 	movw	r2, #1541	; 0x605
    5e5a:	4915      	ldr	r1, [pc, #84]	; (5eb0 <_i2c_m_enable_implementation+0x78>)
    5e5c:	4618      	mov	r0, r3
    5e5e:	4b15      	ldr	r3, [pc, #84]	; (5eb4 <_i2c_m_enable_implementation+0x7c>)
    5e60:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    5e62:	6878      	ldr	r0, [r7, #4]
    5e64:	4b14      	ldr	r3, [pc, #80]	; (5eb8 <_i2c_m_enable_implementation+0x80>)
    5e66:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    5e68:	e016      	b.n	5e98 <_i2c_m_enable_implementation+0x60>
		timeout--;
    5e6a:	68fb      	ldr	r3, [r7, #12]
    5e6c:	3b01      	subs	r3, #1
    5e6e:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    5e70:	68fb      	ldr	r3, [r7, #12]
    5e72:	2b00      	cmp	r3, #0
    5e74:	dc10      	bgt.n	5e98 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    5e76:	68bb      	ldr	r3, [r7, #8]
    5e78:	3b01      	subs	r3, #1
    5e7a:	60bb      	str	r3, [r7, #8]
    5e7c:	68bb      	ldr	r3, [r7, #8]
    5e7e:	2b00      	cmp	r3, #0
    5e80:	d007      	beq.n	5e92 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    5e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5e86:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    5e88:	2110      	movs	r1, #16
    5e8a:	6878      	ldr	r0, [r7, #4]
    5e8c:	4b0b      	ldr	r3, [pc, #44]	; (5ebc <_i2c_m_enable_implementation+0x84>)
    5e8e:	4798      	blx	r3
    5e90:	e002      	b.n	5e98 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    5e92:	f06f 0305 	mvn.w	r3, #5
    5e96:	e006      	b.n	5ea6 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    5e98:	6878      	ldr	r0, [r7, #4]
    5e9a:	4b09      	ldr	r3, [pc, #36]	; (5ec0 <_i2c_m_enable_implementation+0x88>)
    5e9c:	4798      	blx	r3
    5e9e:	4603      	mov	r3, r0
    5ea0:	2b01      	cmp	r3, #1
    5ea2:	d1e2      	bne.n	5e6a <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    5ea4:	2300      	movs	r3, #0
}
    5ea6:	4618      	mov	r0, r3
    5ea8:	3710      	adds	r7, #16
    5eaa:	46bd      	mov	sp, r7
    5eac:	bd80      	pop	{r7, pc}
    5eae:	bf00      	nop
    5eb0:	0000d1d8 	.word	0x0000d1d8
    5eb4:	00002dd1 	.word	0x00002dd1
    5eb8:	000052f1 	.word	0x000052f1
    5ebc:	00005775 	.word	0x00005775
    5ec0:	00005725 	.word	0x00005725

00005ec4 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    5ec4:	b580      	push	{r7, lr}
    5ec6:	b084      	sub	sp, #16
    5ec8:	af00      	add	r7, sp, #0
    5eca:	6078      	str	r0, [r7, #4]
    5ecc:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    5ece:	6838      	ldr	r0, [r7, #0]
    5ed0:	4b42      	ldr	r3, [pc, #264]	; (5fdc <_i2c_m_sync_init_impl+0x118>)
    5ed2:	4798      	blx	r3
    5ed4:	4603      	mov	r3, r0
    5ed6:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    5ed8:	2101      	movs	r1, #1
    5eda:	6838      	ldr	r0, [r7, #0]
    5edc:	4b40      	ldr	r3, [pc, #256]	; (5fe0 <_i2c_m_sync_init_impl+0x11c>)
    5ede:	4798      	blx	r3
    5ee0:	4603      	mov	r3, r0
    5ee2:	f083 0301 	eor.w	r3, r3, #1
    5ee6:	b2db      	uxtb	r3, r3
    5ee8:	2b00      	cmp	r3, #0
    5eea:	d020      	beq.n	5f2e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    5eec:	7bfa      	ldrb	r2, [r7, #15]
    5eee:	493d      	ldr	r1, [pc, #244]	; (5fe4 <_i2c_m_sync_init_impl+0x120>)
    5ef0:	4613      	mov	r3, r2
    5ef2:	005b      	lsls	r3, r3, #1
    5ef4:	4413      	add	r3, r2
    5ef6:	00db      	lsls	r3, r3, #3
    5ef8:	440b      	add	r3, r1
    5efa:	3304      	adds	r3, #4
    5efc:	681b      	ldr	r3, [r3, #0]
    5efe:	f003 031c 	and.w	r3, r3, #28
    5f02:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    5f04:	2102      	movs	r1, #2
    5f06:	6838      	ldr	r0, [r7, #0]
    5f08:	4b37      	ldr	r3, [pc, #220]	; (5fe8 <_i2c_m_sync_init_impl+0x124>)
    5f0a:	4798      	blx	r3
    5f0c:	4603      	mov	r3, r0
    5f0e:	2b00      	cmp	r3, #0
    5f10:	d006      	beq.n	5f20 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    5f12:	6838      	ldr	r0, [r7, #0]
    5f14:	4b35      	ldr	r3, [pc, #212]	; (5fec <_i2c_m_sync_init_impl+0x128>)
    5f16:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    5f18:	2102      	movs	r1, #2
    5f1a:	6838      	ldr	r0, [r7, #0]
    5f1c:	4b34      	ldr	r3, [pc, #208]	; (5ff0 <_i2c_m_sync_init_impl+0x12c>)
    5f1e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    5f20:	68bb      	ldr	r3, [r7, #8]
    5f22:	f043 0301 	orr.w	r3, r3, #1
    5f26:	4619      	mov	r1, r3
    5f28:	6838      	ldr	r0, [r7, #0]
    5f2a:	4b32      	ldr	r3, [pc, #200]	; (5ff4 <_i2c_m_sync_init_impl+0x130>)
    5f2c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    5f2e:	2101      	movs	r1, #1
    5f30:	6838      	ldr	r0, [r7, #0]
    5f32:	4b2f      	ldr	r3, [pc, #188]	; (5ff0 <_i2c_m_sync_init_impl+0x12c>)
    5f34:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    5f36:	7bfa      	ldrb	r2, [r7, #15]
    5f38:	492a      	ldr	r1, [pc, #168]	; (5fe4 <_i2c_m_sync_init_impl+0x120>)
    5f3a:	4613      	mov	r3, r2
    5f3c:	005b      	lsls	r3, r3, #1
    5f3e:	4413      	add	r3, r2
    5f40:	00db      	lsls	r3, r3, #3
    5f42:	440b      	add	r3, r1
    5f44:	3304      	adds	r3, #4
    5f46:	681b      	ldr	r3, [r3, #0]
    5f48:	4619      	mov	r1, r3
    5f4a:	6838      	ldr	r0, [r7, #0]
    5f4c:	4b29      	ldr	r3, [pc, #164]	; (5ff4 <_i2c_m_sync_init_impl+0x130>)
    5f4e:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    5f50:	7bfa      	ldrb	r2, [r7, #15]
    5f52:	4924      	ldr	r1, [pc, #144]	; (5fe4 <_i2c_m_sync_init_impl+0x120>)
    5f54:	4613      	mov	r3, r2
    5f56:	005b      	lsls	r3, r3, #1
    5f58:	4413      	add	r3, r2
    5f5a:	00db      	lsls	r3, r3, #3
    5f5c:	440b      	add	r3, r1
    5f5e:	3308      	adds	r3, #8
    5f60:	681b      	ldr	r3, [r3, #0]
    5f62:	4619      	mov	r1, r3
    5f64:	6838      	ldr	r0, [r7, #0]
    5f66:	4b24      	ldr	r3, [pc, #144]	; (5ff8 <_i2c_m_sync_init_impl+0x134>)
    5f68:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    5f6a:	7bfa      	ldrb	r2, [r7, #15]
    5f6c:	491d      	ldr	r1, [pc, #116]	; (5fe4 <_i2c_m_sync_init_impl+0x120>)
    5f6e:	4613      	mov	r3, r2
    5f70:	005b      	lsls	r3, r3, #1
    5f72:	4413      	add	r3, r2
    5f74:	00db      	lsls	r3, r3, #3
    5f76:	440b      	add	r3, r1
    5f78:	330c      	adds	r3, #12
    5f7a:	681b      	ldr	r3, [r3, #0]
    5f7c:	4619      	mov	r1, r3
    5f7e:	6838      	ldr	r0, [r7, #0]
    5f80:	4b1e      	ldr	r3, [pc, #120]	; (5ffc <_i2c_m_sync_init_impl+0x138>)
    5f82:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    5f84:	7bfa      	ldrb	r2, [r7, #15]
    5f86:	4917      	ldr	r1, [pc, #92]	; (5fe4 <_i2c_m_sync_init_impl+0x120>)
    5f88:	4613      	mov	r3, r2
    5f8a:	005b      	lsls	r3, r3, #1
    5f8c:	4413      	add	r3, r2
    5f8e:	00db      	lsls	r3, r3, #3
    5f90:	440b      	add	r3, r1
    5f92:	3304      	adds	r3, #4
    5f94:	681b      	ldr	r3, [r3, #0]
    5f96:	0e1b      	lsrs	r3, r3, #24
    5f98:	b29b      	uxth	r3, r3
    5f9a:	f003 0303 	and.w	r3, r3, #3
    5f9e:	b29a      	uxth	r2, r3
    5fa0:	687b      	ldr	r3, [r7, #4]
    5fa2:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    5fa4:	687b      	ldr	r3, [r7, #4]
    5fa6:	899b      	ldrh	r3, [r3, #12]
    5fa8:	2b01      	cmp	r3, #1
    5faa:	bf8c      	ite	hi
    5fac:	2301      	movhi	r3, #1
    5fae:	2300      	movls	r3, #0
    5fb0:	b2db      	uxtb	r3, r3
    5fb2:	4619      	mov	r1, r3
    5fb4:	6838      	ldr	r0, [r7, #0]
    5fb6:	4b12      	ldr	r3, [pc, #72]	; (6000 <_i2c_m_sync_init_impl+0x13c>)
    5fb8:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    5fba:	7bfa      	ldrb	r2, [r7, #15]
    5fbc:	4909      	ldr	r1, [pc, #36]	; (5fe4 <_i2c_m_sync_init_impl+0x120>)
    5fbe:	4613      	mov	r3, r2
    5fc0:	005b      	lsls	r3, r3, #1
    5fc2:	4413      	add	r3, r2
    5fc4:	00db      	lsls	r3, r3, #3
    5fc6:	440b      	add	r3, r1
    5fc8:	3312      	adds	r3, #18
    5fca:	881a      	ldrh	r2, [r3, #0]
    5fcc:	687b      	ldr	r3, [r7, #4]
    5fce:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    5fd0:	2300      	movs	r3, #0
}
    5fd2:	4618      	mov	r0, r3
    5fd4:	3710      	adds	r7, #16
    5fd6:	46bd      	mov	sp, r7
    5fd8:	bd80      	pop	{r7, pc}
    5fda:	bf00      	nop
    5fdc:	000057f9 	.word	0x000057f9
    5fe0:	000051cd 	.word	0x000051cd
    5fe4:	20000018 	.word	0x20000018
    5fe8:	00005371 	.word	0x00005371
    5fec:	00005319 	.word	0x00005319
    5ff0:	000051a9 	.word	0x000051a9
    5ff4:	000053a1 	.word	0x000053a1
    5ff8:	00005549 	.word	0x00005549
    5ffc:	00005591 	.word	0x00005591
    6000:	000055cd 	.word	0x000055cd

00006004 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6004:	b580      	push	{r7, lr}
    6006:	b082      	sub	sp, #8
    6008:	af00      	add	r7, sp, #0
    600a:	6078      	str	r0, [r7, #4]
    600c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    600e:	687b      	ldr	r3, [r7, #4]
    6010:	2b00      	cmp	r3, #0
    6012:	d004      	beq.n	601e <_spi_load_regs_master+0x1a>
    6014:	683b      	ldr	r3, [r7, #0]
    6016:	2b00      	cmp	r3, #0
    6018:	d001      	beq.n	601e <_spi_load_regs_master+0x1a>
    601a:	2301      	movs	r3, #1
    601c:	e000      	b.n	6020 <_spi_load_regs_master+0x1c>
    601e:	2300      	movs	r3, #0
    6020:	f003 0301 	and.w	r3, r3, #1
    6024:	b2db      	uxtb	r3, r3
    6026:	f640 1209 	movw	r2, #2313	; 0x909
    602a:	4915      	ldr	r1, [pc, #84]	; (6080 <_spi_load_regs_master+0x7c>)
    602c:	4618      	mov	r0, r3
    602e:	4b15      	ldr	r3, [pc, #84]	; (6084 <_spi_load_regs_master+0x80>)
    6030:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6032:	683b      	ldr	r3, [r7, #0]
    6034:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6036:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    603a:	f023 0301 	bic.w	r3, r3, #1
    603e:	4619      	mov	r1, r3
    6040:	6878      	ldr	r0, [r7, #4]
    6042:	4b11      	ldr	r3, [pc, #68]	; (6088 <_spi_load_regs_master+0x84>)
    6044:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6046:	683b      	ldr	r3, [r7, #0]
    6048:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    604a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    604e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6056:	4619      	mov	r1, r3
    6058:	6878      	ldr	r0, [r7, #4]
    605a:	4b0c      	ldr	r3, [pc, #48]	; (608c <_spi_load_regs_master+0x88>)
    605c:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    605e:	683b      	ldr	r3, [r7, #0]
    6060:	7b1b      	ldrb	r3, [r3, #12]
    6062:	4619      	mov	r1, r3
    6064:	6878      	ldr	r0, [r7, #4]
    6066:	4b0a      	ldr	r3, [pc, #40]	; (6090 <_spi_load_regs_master+0x8c>)
    6068:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    606a:	683b      	ldr	r3, [r7, #0]
    606c:	7b5b      	ldrb	r3, [r3, #13]
    606e:	4619      	mov	r1, r3
    6070:	6878      	ldr	r0, [r7, #4]
    6072:	4b08      	ldr	r3, [pc, #32]	; (6094 <_spi_load_regs_master+0x90>)
    6074:	4798      	blx	r3
}
    6076:	bf00      	nop
    6078:	3708      	adds	r7, #8
    607a:	46bd      	mov	sp, r7
    607c:	bd80      	pop	{r7, pc}
    607e:	bf00      	nop
    6080:	0000d1d8 	.word	0x0000d1d8
    6084:	00002dd1 	.word	0x00002dd1
    6088:	00005455 	.word	0x00005455
    608c:	0000556d 	.word	0x0000556d
    6090:	000055ad 	.word	0x000055ad
    6094:	000056e5 	.word	0x000056e5

00006098 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6098:	b580      	push	{r7, lr}
    609a:	b082      	sub	sp, #8
    609c:	af00      	add	r7, sp, #0
    609e:	6078      	str	r0, [r7, #4]
    60a0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    60a2:	687b      	ldr	r3, [r7, #4]
    60a4:	2b00      	cmp	r3, #0
    60a6:	d004      	beq.n	60b2 <_spi_load_regs_slave+0x1a>
    60a8:	683b      	ldr	r3, [r7, #0]
    60aa:	2b00      	cmp	r3, #0
    60ac:	d001      	beq.n	60b2 <_spi_load_regs_slave+0x1a>
    60ae:	2301      	movs	r3, #1
    60b0:	e000      	b.n	60b4 <_spi_load_regs_slave+0x1c>
    60b2:	2300      	movs	r3, #0
    60b4:	f003 0301 	and.w	r3, r3, #1
    60b8:	b2db      	uxtb	r3, r3
    60ba:	f640 121d 	movw	r2, #2333	; 0x91d
    60be:	491a      	ldr	r1, [pc, #104]	; (6128 <_spi_load_regs_slave+0x90>)
    60c0:	4618      	mov	r0, r3
    60c2:	4b1a      	ldr	r3, [pc, #104]	; (612c <_spi_load_regs_slave+0x94>)
    60c4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    60c6:	683b      	ldr	r3, [r7, #0]
    60c8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    60ca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    60ce:	f023 0301 	bic.w	r3, r3, #1
    60d2:	4619      	mov	r1, r3
    60d4:	6878      	ldr	r0, [r7, #4]
    60d6:	4b16      	ldr	r3, [pc, #88]	; (6130 <_spi_load_regs_slave+0x98>)
    60d8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    60da:	683b      	ldr	r3, [r7, #0]
    60dc:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    60de:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    60e2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    60e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    60ea:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    60ee:	4619      	mov	r1, r3
    60f0:	6878      	ldr	r0, [r7, #4]
    60f2:	4b10      	ldr	r3, [pc, #64]	; (6134 <_spi_load_regs_slave+0x9c>)
    60f4:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    60f6:	683b      	ldr	r3, [r7, #0]
    60f8:	689b      	ldr	r3, [r3, #8]
    60fa:	4619      	mov	r1, r3
    60fc:	6878      	ldr	r0, [r7, #4]
    60fe:	4b0e      	ldr	r3, [pc, #56]	; (6138 <_spi_load_regs_slave+0xa0>)
    6100:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6102:	683b      	ldr	r3, [r7, #0]
    6104:	7b5b      	ldrb	r3, [r3, #13]
    6106:	4619      	mov	r1, r3
    6108:	6878      	ldr	r0, [r7, #4]
    610a:	4b0c      	ldr	r3, [pc, #48]	; (613c <_spi_load_regs_slave+0xa4>)
    610c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    610e:	bf00      	nop
    6110:	f04f 31ff 	mov.w	r1, #4294967295
    6114:	6878      	ldr	r0, [r7, #4]
    6116:	4b0a      	ldr	r3, [pc, #40]	; (6140 <_spi_load_regs_slave+0xa8>)
    6118:	4798      	blx	r3
    611a:	4603      	mov	r3, r0
    611c:	2b00      	cmp	r3, #0
    611e:	d1f7      	bne.n	6110 <_spi_load_regs_slave+0x78>
		;
}
    6120:	bf00      	nop
    6122:	3708      	adds	r7, #8
    6124:	46bd      	mov	sp, r7
    6126:	bd80      	pop	{r7, pc}
    6128:	0000d1d8 	.word	0x0000d1d8
    612c:	00002dd1 	.word	0x00002dd1
    6130:	00005455 	.word	0x00005455
    6134:	0000556d 	.word	0x0000556d
    6138:	00005651 	.word	0x00005651
    613c:	000056e5 	.word	0x000056e5
    6140:	00005219 	.word	0x00005219

00006144 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6144:	b580      	push	{r7, lr}
    6146:	b084      	sub	sp, #16
    6148:	af00      	add	r7, sp, #0
    614a:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    614c:	687b      	ldr	r3, [r7, #4]
    614e:	4618      	mov	r0, r3
    6150:	4b11      	ldr	r3, [pc, #68]	; (6198 <_spi_get_regs+0x54>)
    6152:	4798      	blx	r3
    6154:	4603      	mov	r3, r0
    6156:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6158:	2300      	movs	r3, #0
    615a:	73fb      	strb	r3, [r7, #15]
    615c:	e014      	b.n	6188 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    615e:	7bfa      	ldrb	r2, [r7, #15]
    6160:	490e      	ldr	r1, [pc, #56]	; (619c <_spi_get_regs+0x58>)
    6162:	4613      	mov	r3, r2
    6164:	011b      	lsls	r3, r3, #4
    6166:	4413      	add	r3, r2
    6168:	440b      	add	r3, r1
    616a:	3310      	adds	r3, #16
    616c:	781b      	ldrb	r3, [r3, #0]
    616e:	7bba      	ldrb	r2, [r7, #14]
    6170:	429a      	cmp	r2, r3
    6172:	d106      	bne.n	6182 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6174:	7bfa      	ldrb	r2, [r7, #15]
    6176:	4613      	mov	r3, r2
    6178:	011b      	lsls	r3, r3, #4
    617a:	4413      	add	r3, r2
    617c:	4a07      	ldr	r2, [pc, #28]	; (619c <_spi_get_regs+0x58>)
    617e:	4413      	add	r3, r2
    6180:	e006      	b.n	6190 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6182:	7bfb      	ldrb	r3, [r7, #15]
    6184:	3301      	adds	r3, #1
    6186:	73fb      	strb	r3, [r7, #15]
    6188:	7bfb      	ldrb	r3, [r7, #15]
    618a:	2b01      	cmp	r3, #1
    618c:	d9e7      	bls.n	615e <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    618e:	2300      	movs	r3, #0
}
    6190:	4618      	mov	r0, r3
    6192:	3710      	adds	r7, #16
    6194:	46bd      	mov	sp, r7
    6196:	bd80      	pop	{r7, pc}
    6198:	0000579d 	.word	0x0000579d
    619c:	0000d214 	.word	0x0000d214

000061a0 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    61a0:	b580      	push	{r7, lr}
    61a2:	b084      	sub	sp, #16
    61a4:	af00      	add	r7, sp, #0
    61a6:	6078      	str	r0, [r7, #4]
    61a8:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    61aa:	683b      	ldr	r3, [r7, #0]
    61ac:	4618      	mov	r0, r3
    61ae:	4b35      	ldr	r3, [pc, #212]	; (6284 <_spi_m_sync_init+0xe4>)
    61b0:	4798      	blx	r3
    61b2:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    61b4:	687b      	ldr	r3, [r7, #4]
    61b6:	2b00      	cmp	r3, #0
    61b8:	d004      	beq.n	61c4 <_spi_m_sync_init+0x24>
    61ba:	683b      	ldr	r3, [r7, #0]
    61bc:	2b00      	cmp	r3, #0
    61be:	d001      	beq.n	61c4 <_spi_m_sync_init+0x24>
    61c0:	2301      	movs	r3, #1
    61c2:	e000      	b.n	61c6 <_spi_m_sync_init+0x26>
    61c4:	2300      	movs	r3, #0
    61c6:	f003 0301 	and.w	r3, r3, #1
    61ca:	b2db      	uxtb	r3, r3
    61cc:	f640 123f 	movw	r2, #2367	; 0x93f
    61d0:	492d      	ldr	r1, [pc, #180]	; (6288 <_spi_m_sync_init+0xe8>)
    61d2:	4618      	mov	r0, r3
    61d4:	4b2d      	ldr	r3, [pc, #180]	; (628c <_spi_m_sync_init+0xec>)
    61d6:	4798      	blx	r3

	if (regs == NULL) {
    61d8:	68fb      	ldr	r3, [r7, #12]
    61da:	2b00      	cmp	r3, #0
    61dc:	d102      	bne.n	61e4 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    61de:	f06f 030c 	mvn.w	r3, #12
    61e2:	e04a      	b.n	627a <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    61e4:	2101      	movs	r1, #1
    61e6:	6838      	ldr	r0, [r7, #0]
    61e8:	4b29      	ldr	r3, [pc, #164]	; (6290 <_spi_m_sync_init+0xf0>)
    61ea:	4798      	blx	r3
    61ec:	4603      	mov	r3, r0
    61ee:	f083 0301 	eor.w	r3, r3, #1
    61f2:	b2db      	uxtb	r3, r3
    61f4:	2b00      	cmp	r3, #0
    61f6:	d019      	beq.n	622c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    61f8:	68fb      	ldr	r3, [r7, #12]
    61fa:	681b      	ldr	r3, [r3, #0]
    61fc:	f003 031c 	and.w	r3, r3, #28
    6200:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6202:	2102      	movs	r1, #2
    6204:	6838      	ldr	r0, [r7, #0]
    6206:	4b23      	ldr	r3, [pc, #140]	; (6294 <_spi_m_sync_init+0xf4>)
    6208:	4798      	blx	r3
    620a:	4603      	mov	r3, r0
    620c:	2b00      	cmp	r3, #0
    620e:	d006      	beq.n	621e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6210:	6838      	ldr	r0, [r7, #0]
    6212:	4b21      	ldr	r3, [pc, #132]	; (6298 <_spi_m_sync_init+0xf8>)
    6214:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6216:	2102      	movs	r1, #2
    6218:	6838      	ldr	r0, [r7, #0]
    621a:	4b20      	ldr	r3, [pc, #128]	; (629c <_spi_m_sync_init+0xfc>)
    621c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    621e:	68bb      	ldr	r3, [r7, #8]
    6220:	f043 0301 	orr.w	r3, r3, #1
    6224:	4619      	mov	r1, r3
    6226:	6838      	ldr	r0, [r7, #0]
    6228:	4b1d      	ldr	r3, [pc, #116]	; (62a0 <_spi_m_sync_init+0x100>)
    622a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    622c:	2101      	movs	r1, #1
    622e:	6838      	ldr	r0, [r7, #0]
    6230:	4b1a      	ldr	r3, [pc, #104]	; (629c <_spi_m_sync_init+0xfc>)
    6232:	4798      	blx	r3

	dev->prvt = hw;
    6234:	687b      	ldr	r3, [r7, #4]
    6236:	683a      	ldr	r2, [r7, #0]
    6238:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    623a:	68fb      	ldr	r3, [r7, #12]
    623c:	681b      	ldr	r3, [r3, #0]
    623e:	f003 031c 	and.w	r3, r3, #28
    6242:	2b08      	cmp	r3, #8
    6244:	d104      	bne.n	6250 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6246:	68f9      	ldr	r1, [r7, #12]
    6248:	6838      	ldr	r0, [r7, #0]
    624a:	4b16      	ldr	r3, [pc, #88]	; (62a4 <_spi_m_sync_init+0x104>)
    624c:	4798      	blx	r3
    624e:	e003      	b.n	6258 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6250:	68f9      	ldr	r1, [r7, #12]
    6252:	6838      	ldr	r0, [r7, #0]
    6254:	4b14      	ldr	r3, [pc, #80]	; (62a8 <_spi_m_sync_init+0x108>)
    6256:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6258:	68fb      	ldr	r3, [r7, #12]
    625a:	685b      	ldr	r3, [r3, #4]
    625c:	f003 0307 	and.w	r3, r3, #7
    6260:	2b00      	cmp	r3, #0
    6262:	d101      	bne.n	6268 <_spi_m_sync_init+0xc8>
    6264:	2201      	movs	r2, #1
    6266:	e000      	b.n	626a <_spi_m_sync_init+0xca>
    6268:	2202      	movs	r2, #2
    626a:	687b      	ldr	r3, [r7, #4]
    626c:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    626e:	68fb      	ldr	r3, [r7, #12]
    6270:	89db      	ldrh	r3, [r3, #14]
    6272:	b29a      	uxth	r2, r3
    6274:	687b      	ldr	r3, [r7, #4]
    6276:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6278:	2300      	movs	r3, #0
}
    627a:	4618      	mov	r0, r3
    627c:	3710      	adds	r7, #16
    627e:	46bd      	mov	sp, r7
    6280:	bd80      	pop	{r7, pc}
    6282:	bf00      	nop
    6284:	00006145 	.word	0x00006145
    6288:	0000d1d8 	.word	0x0000d1d8
    628c:	00002dd1 	.word	0x00002dd1
    6290:	00005219 	.word	0x00005219
    6294:	00005425 	.word	0x00005425
    6298:	000053fd 	.word	0x000053fd
    629c:	000051f5 	.word	0x000051f5
    62a0:	00005455 	.word	0x00005455
    62a4:	00006099 	.word	0x00006099
    62a8:	00006005 	.word	0x00006005

000062ac <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    62ac:	b580      	push	{r7, lr}
    62ae:	b082      	sub	sp, #8
    62b0:	af00      	add	r7, sp, #0
    62b2:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    62b4:	bf00      	nop
    62b6:	2103      	movs	r1, #3
    62b8:	6878      	ldr	r0, [r7, #4]
    62ba:	4b06      	ldr	r3, [pc, #24]	; (62d4 <_spi_wait_bus_idle+0x28>)
    62bc:	4798      	blx	r3
    62be:	4603      	mov	r3, r0
    62c0:	2b00      	cmp	r3, #0
    62c2:	d0f8      	beq.n	62b6 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    62c4:	2103      	movs	r1, #3
    62c6:	6878      	ldr	r0, [r7, #4]
    62c8:	4b03      	ldr	r3, [pc, #12]	; (62d8 <_spi_wait_bus_idle+0x2c>)
    62ca:	4798      	blx	r3
}
    62cc:	bf00      	nop
    62ce:	3708      	adds	r7, #8
    62d0:	46bd      	mov	sp, r7
    62d2:	bd80      	pop	{r7, pc}
    62d4:	0000528f 	.word	0x0000528f
    62d8:	000052d1 	.word	0x000052d1

000062dc <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    62dc:	b580      	push	{r7, lr}
    62de:	b086      	sub	sp, #24
    62e0:	af00      	add	r7, sp, #0
    62e2:	60f8      	str	r0, [r7, #12]
    62e4:	60b9      	str	r1, [r7, #8]
    62e6:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    62e8:	68bb      	ldr	r3, [r7, #8]
    62ea:	f003 0304 	and.w	r3, r3, #4
    62ee:	2b00      	cmp	r3, #0
    62f0:	d101      	bne.n	62f6 <_spi_rx_check_and_receive+0x1a>
		return false;
    62f2:	2300      	movs	r3, #0
    62f4:	e022      	b.n	633c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    62f6:	68f8      	ldr	r0, [r7, #12]
    62f8:	4b12      	ldr	r3, [pc, #72]	; (6344 <_spi_rx_check_and_receive+0x68>)
    62fa:	4798      	blx	r3
    62fc:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    62fe:	687b      	ldr	r3, [r7, #4]
    6300:	685b      	ldr	r3, [r3, #4]
    6302:	2b00      	cmp	r3, #0
    6304:	d014      	beq.n	6330 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6306:	687b      	ldr	r3, [r7, #4]
    6308:	685b      	ldr	r3, [r3, #4]
    630a:	1c59      	adds	r1, r3, #1
    630c:	687a      	ldr	r2, [r7, #4]
    630e:	6051      	str	r1, [r2, #4]
    6310:	697a      	ldr	r2, [r7, #20]
    6312:	b2d2      	uxtb	r2, r2
    6314:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6316:	687b      	ldr	r3, [r7, #4]
    6318:	7c1b      	ldrb	r3, [r3, #16]
    631a:	2b01      	cmp	r3, #1
    631c:	d908      	bls.n	6330 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    631e:	687b      	ldr	r3, [r7, #4]
    6320:	685b      	ldr	r3, [r3, #4]
    6322:	1c59      	adds	r1, r3, #1
    6324:	687a      	ldr	r2, [r7, #4]
    6326:	6051      	str	r1, [r2, #4]
    6328:	697a      	ldr	r2, [r7, #20]
    632a:	0a12      	lsrs	r2, r2, #8
    632c:	b2d2      	uxtb	r2, r2
    632e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    6330:	687b      	ldr	r3, [r7, #4]
    6332:	68db      	ldr	r3, [r3, #12]
    6334:	1c5a      	adds	r2, r3, #1
    6336:	687b      	ldr	r3, [r7, #4]
    6338:	60da      	str	r2, [r3, #12]

	return true;
    633a:	2301      	movs	r3, #1
}
    633c:	4618      	mov	r0, r3
    633e:	3718      	adds	r7, #24
    6340:	46bd      	mov	sp, r7
    6342:	bd80      	pop	{r7, pc}
    6344:	000056cd 	.word	0x000056cd

00006348 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6348:	b580      	push	{r7, lr}
    634a:	b086      	sub	sp, #24
    634c:	af00      	add	r7, sp, #0
    634e:	60f8      	str	r0, [r7, #12]
    6350:	60b9      	str	r1, [r7, #8]
    6352:	607a      	str	r2, [r7, #4]
    6354:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6356:	68bb      	ldr	r3, [r7, #8]
    6358:	f003 0301 	and.w	r3, r3, #1
    635c:	2b00      	cmp	r3, #0
    635e:	d028      	beq.n	63b2 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6360:	687b      	ldr	r3, [r7, #4]
    6362:	681b      	ldr	r3, [r3, #0]
    6364:	2b00      	cmp	r3, #0
    6366:	d018      	beq.n	639a <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6368:	687b      	ldr	r3, [r7, #4]
    636a:	681b      	ldr	r3, [r3, #0]
    636c:	1c59      	adds	r1, r3, #1
    636e:	687a      	ldr	r2, [r7, #4]
    6370:	6011      	str	r1, [r2, #0]
    6372:	781b      	ldrb	r3, [r3, #0]
    6374:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6376:	687b      	ldr	r3, [r7, #4]
    6378:	7c1b      	ldrb	r3, [r3, #16]
    637a:	2b01      	cmp	r3, #1
    637c:	d90f      	bls.n	639e <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    637e:	687b      	ldr	r3, [r7, #4]
    6380:	681b      	ldr	r3, [r3, #0]
    6382:	781b      	ldrb	r3, [r3, #0]
    6384:	021b      	lsls	r3, r3, #8
    6386:	461a      	mov	r2, r3
    6388:	697b      	ldr	r3, [r7, #20]
    638a:	4313      	orrs	r3, r2
    638c:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    638e:	687b      	ldr	r3, [r7, #4]
    6390:	681b      	ldr	r3, [r3, #0]
    6392:	1c5a      	adds	r2, r3, #1
    6394:	687b      	ldr	r3, [r7, #4]
    6396:	601a      	str	r2, [r3, #0]
    6398:	e001      	b.n	639e <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    639a:	887b      	ldrh	r3, [r7, #2]
    639c:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    639e:	687b      	ldr	r3, [r7, #4]
    63a0:	689b      	ldr	r3, [r3, #8]
    63a2:	1c5a      	adds	r2, r3, #1
    63a4:	687b      	ldr	r3, [r7, #4]
    63a6:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    63a8:	6979      	ldr	r1, [r7, #20]
    63aa:	68f8      	ldr	r0, [r7, #12]
    63ac:	4b03      	ldr	r3, [pc, #12]	; (63bc <_spi_tx_check_and_send+0x74>)
    63ae:	4798      	blx	r3
    63b0:	e000      	b.n	63b4 <_spi_tx_check_and_send+0x6c>
		return;
    63b2:	bf00      	nop
}
    63b4:	3718      	adds	r7, #24
    63b6:	46bd      	mov	sp, r7
    63b8:	bd80      	pop	{r7, pc}
    63ba:	bf00      	nop
    63bc:	000056b1 	.word	0x000056b1

000063c0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    63c0:	b580      	push	{r7, lr}
    63c2:	b082      	sub	sp, #8
    63c4:	af00      	add	r7, sp, #0
    63c6:	6078      	str	r0, [r7, #4]
    63c8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    63ca:	687b      	ldr	r3, [r7, #4]
    63cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    63d0:	2b00      	cmp	r3, #0
    63d2:	d00b      	beq.n	63ec <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    63d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    63d8:	6838      	ldr	r0, [r7, #0]
    63da:	4b07      	ldr	r3, [pc, #28]	; (63f8 <_spi_err_check+0x38>)
    63dc:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    63de:	2180      	movs	r1, #128	; 0x80
    63e0:	6838      	ldr	r0, [r7, #0]
    63e2:	4b06      	ldr	r3, [pc, #24]	; (63fc <_spi_err_check+0x3c>)
    63e4:	4798      	blx	r3
		return ERR_OVERFLOW;
    63e6:	f06f 0312 	mvn.w	r3, #18
    63ea:	e000      	b.n	63ee <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    63ec:	2300      	movs	r3, #0
}
    63ee:	4618      	mov	r0, r3
    63f0:	3708      	adds	r7, #8
    63f2:	46bd      	mov	sp, r7
    63f4:	bd80      	pop	{r7, pc}
    63f6:	bf00      	nop
    63f8:	00005705 	.word	0x00005705
    63fc:	000052d1 	.word	0x000052d1

00006400 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6400:	b590      	push	{r4, r7, lr}
    6402:	b08b      	sub	sp, #44	; 0x2c
    6404:	af00      	add	r7, sp, #0
    6406:	6078      	str	r0, [r7, #4]
    6408:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    640a:	687b      	ldr	r3, [r7, #4]
    640c:	681b      	ldr	r3, [r3, #0]
    640e:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    6410:	2300      	movs	r3, #0
    6412:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6414:	683b      	ldr	r3, [r7, #0]
    6416:	681b      	ldr	r3, [r3, #0]
    6418:	60bb      	str	r3, [r7, #8]
    641a:	683b      	ldr	r3, [r7, #0]
    641c:	685b      	ldr	r3, [r3, #4]
    641e:	60fb      	str	r3, [r7, #12]
    6420:	2300      	movs	r3, #0
    6422:	613b      	str	r3, [r7, #16]
    6424:	2300      	movs	r3, #0
    6426:	617b      	str	r3, [r7, #20]
    6428:	687b      	ldr	r3, [r7, #4]
    642a:	791b      	ldrb	r3, [r3, #4]
    642c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    642e:	687b      	ldr	r3, [r7, #4]
    6430:	2b00      	cmp	r3, #0
    6432:	d004      	beq.n	643e <_spi_m_sync_trans+0x3e>
    6434:	6a3b      	ldr	r3, [r7, #32]
    6436:	2b00      	cmp	r3, #0
    6438:	d001      	beq.n	643e <_spi_m_sync_trans+0x3e>
    643a:	2301      	movs	r3, #1
    643c:	e000      	b.n	6440 <_spi_m_sync_trans+0x40>
    643e:	2300      	movs	r3, #0
    6440:	f003 0301 	and.w	r3, r3, #1
    6444:	b2db      	uxtb	r3, r3
    6446:	f640 22a3 	movw	r2, #2723	; 0xaa3
    644a:	492b      	ldr	r1, [pc, #172]	; (64f8 <_spi_m_sync_trans+0xf8>)
    644c:	4618      	mov	r0, r3
    644e:	4b2b      	ldr	r3, [pc, #172]	; (64fc <_spi_m_sync_trans+0xfc>)
    6450:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6452:	2107      	movs	r1, #7
    6454:	6a38      	ldr	r0, [r7, #32]
    6456:	4b2a      	ldr	r3, [pc, #168]	; (6500 <_spi_m_sync_trans+0x100>)
    6458:	4798      	blx	r3
    645a:	4603      	mov	r3, r0
    645c:	2b00      	cmp	r3, #0
    645e:	d002      	beq.n	6466 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6460:	f06f 0303 	mvn.w	r3, #3
    6464:	e043      	b.n	64ee <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6466:	6a38      	ldr	r0, [r7, #32]
    6468:	4b26      	ldr	r3, [pc, #152]	; (6504 <_spi_m_sync_trans+0x104>)
    646a:	4798      	blx	r3
    646c:	4603      	mov	r3, r0
    646e:	f083 0301 	eor.w	r3, r3, #1
    6472:	b2db      	uxtb	r3, r3
    6474:	2b00      	cmp	r3, #0
    6476:	d002      	beq.n	647e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6478:	f06f 0313 	mvn.w	r3, #19
    647c:	e037      	b.n	64ee <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    647e:	6a38      	ldr	r0, [r7, #32]
    6480:	4b21      	ldr	r3, [pc, #132]	; (6508 <_spi_m_sync_trans+0x108>)
    6482:	4798      	blx	r3
    6484:	4603      	mov	r3, r0
    6486:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6488:	f107 0308 	add.w	r3, r7, #8
    648c:	461a      	mov	r2, r3
    648e:	69f9      	ldr	r1, [r7, #28]
    6490:	6a38      	ldr	r0, [r7, #32]
    6492:	4b1e      	ldr	r3, [pc, #120]	; (650c <_spi_m_sync_trans+0x10c>)
    6494:	4798      	blx	r3
    6496:	4603      	mov	r3, r0
    6498:	f083 0301 	eor.w	r3, r3, #1
    649c:	b2db      	uxtb	r3, r3
    649e:	2b00      	cmp	r3, #0
    64a0:	d00b      	beq.n	64ba <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    64a2:	697a      	ldr	r2, [r7, #20]
    64a4:	693b      	ldr	r3, [r7, #16]
    64a6:	429a      	cmp	r2, r3
    64a8:	d307      	bcc.n	64ba <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    64aa:	687b      	ldr	r3, [r7, #4]
    64ac:	88db      	ldrh	r3, [r3, #6]
    64ae:	f107 0208 	add.w	r2, r7, #8
    64b2:	69f9      	ldr	r1, [r7, #28]
    64b4:	6a38      	ldr	r0, [r7, #32]
    64b6:	4c16      	ldr	r4, [pc, #88]	; (6510 <_spi_m_sync_trans+0x110>)
    64b8:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    64ba:	6a39      	ldr	r1, [r7, #32]
    64bc:	69f8      	ldr	r0, [r7, #28]
    64be:	4b15      	ldr	r3, [pc, #84]	; (6514 <_spi_m_sync_trans+0x114>)
    64c0:	4798      	blx	r3
    64c2:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    64c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    64c6:	2b00      	cmp	r3, #0
    64c8:	db0c      	blt.n	64e4 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    64ca:	693a      	ldr	r2, [r7, #16]
    64cc:	683b      	ldr	r3, [r7, #0]
    64ce:	689b      	ldr	r3, [r3, #8]
    64d0:	429a      	cmp	r2, r3
    64d2:	d3d4      	bcc.n	647e <_spi_m_sync_trans+0x7e>
    64d4:	697a      	ldr	r2, [r7, #20]
    64d6:	683b      	ldr	r3, [r7, #0]
    64d8:	689b      	ldr	r3, [r3, #8]
    64da:	429a      	cmp	r2, r3
    64dc:	d3cf      	bcc.n	647e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    64de:	693b      	ldr	r3, [r7, #16]
    64e0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    64e2:	e000      	b.n	64e6 <_spi_m_sync_trans+0xe6>
			break;
    64e4:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    64e6:	6a38      	ldr	r0, [r7, #32]
    64e8:	4b0b      	ldr	r3, [pc, #44]	; (6518 <_spi_m_sync_trans+0x118>)
    64ea:	4798      	blx	r3

	return rc;
    64ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    64ee:	4618      	mov	r0, r3
    64f0:	372c      	adds	r7, #44	; 0x2c
    64f2:	46bd      	mov	sp, r7
    64f4:	bd90      	pop	{r4, r7, pc}
    64f6:	bf00      	nop
    64f8:	0000d1d8 	.word	0x0000d1d8
    64fc:	00002dd1 	.word	0x00002dd1
    6500:	00005219 	.word	0x00005219
    6504:	000053c5 	.word	0x000053c5
    6508:	000052b7 	.word	0x000052b7
    650c:	000062dd 	.word	0x000062dd
    6510:	00006349 	.word	0x00006349
    6514:	000063c1 	.word	0x000063c1
    6518:	000062ad 	.word	0x000062ad

0000651c <__NVIC_EnableIRQ>:
{
    651c:	b480      	push	{r7}
    651e:	b083      	sub	sp, #12
    6520:	af00      	add	r7, sp, #0
    6522:	4603      	mov	r3, r0
    6524:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    652a:	2b00      	cmp	r3, #0
    652c:	db0b      	blt.n	6546 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    652e:	4909      	ldr	r1, [pc, #36]	; (6554 <__NVIC_EnableIRQ+0x38>)
    6530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6534:	095b      	lsrs	r3, r3, #5
    6536:	88fa      	ldrh	r2, [r7, #6]
    6538:	f002 021f 	and.w	r2, r2, #31
    653c:	2001      	movs	r0, #1
    653e:	fa00 f202 	lsl.w	r2, r0, r2
    6542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6546:	bf00      	nop
    6548:	370c      	adds	r7, #12
    654a:	46bd      	mov	sp, r7
    654c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6550:	4770      	bx	lr
    6552:	bf00      	nop
    6554:	e000e100 	.word	0xe000e100

00006558 <__NVIC_DisableIRQ>:
{
    6558:	b480      	push	{r7}
    655a:	b083      	sub	sp, #12
    655c:	af00      	add	r7, sp, #0
    655e:	4603      	mov	r3, r0
    6560:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6566:	2b00      	cmp	r3, #0
    6568:	db10      	blt.n	658c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    656a:	490b      	ldr	r1, [pc, #44]	; (6598 <__NVIC_DisableIRQ+0x40>)
    656c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6570:	095b      	lsrs	r3, r3, #5
    6572:	88fa      	ldrh	r2, [r7, #6]
    6574:	f002 021f 	and.w	r2, r2, #31
    6578:	2001      	movs	r0, #1
    657a:	fa00 f202 	lsl.w	r2, r0, r2
    657e:	3320      	adds	r3, #32
    6580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6584:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6588:	f3bf 8f6f 	isb	sy
}
    658c:	bf00      	nop
    658e:	370c      	adds	r7, #12
    6590:	46bd      	mov	sp, r7
    6592:	f85d 7b04 	ldr.w	r7, [sp], #4
    6596:	4770      	bx	lr
    6598:	e000e100 	.word	0xe000e100

0000659c <__NVIC_ClearPendingIRQ>:
{
    659c:	b480      	push	{r7}
    659e:	b083      	sub	sp, #12
    65a0:	af00      	add	r7, sp, #0
    65a2:	4603      	mov	r3, r0
    65a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    65a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    65aa:	2b00      	cmp	r3, #0
    65ac:	db0c      	blt.n	65c8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    65ae:	4909      	ldr	r1, [pc, #36]	; (65d4 <__NVIC_ClearPendingIRQ+0x38>)
    65b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    65b4:	095b      	lsrs	r3, r3, #5
    65b6:	88fa      	ldrh	r2, [r7, #6]
    65b8:	f002 021f 	and.w	r2, r2, #31
    65bc:	2001      	movs	r0, #1
    65be:	fa00 f202 	lsl.w	r2, r0, r2
    65c2:	3360      	adds	r3, #96	; 0x60
    65c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    65c8:	bf00      	nop
    65ca:	370c      	adds	r7, #12
    65cc:	46bd      	mov	sp, r7
    65ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    65d2:	4770      	bx	lr
    65d4:	e000e100 	.word	0xe000e100

000065d8 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    65d8:	b480      	push	{r7}
    65da:	b083      	sub	sp, #12
    65dc:	af00      	add	r7, sp, #0
    65de:	6078      	str	r0, [r7, #4]
    65e0:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    65e2:	bf00      	nop
    65e4:	687b      	ldr	r3, [r7, #4]
    65e6:	689a      	ldr	r2, [r3, #8]
    65e8:	683b      	ldr	r3, [r7, #0]
    65ea:	4013      	ands	r3, r2
    65ec:	2b00      	cmp	r3, #0
    65ee:	d1f9      	bne.n	65e4 <hri_tcc_wait_for_sync+0xc>
	};
}
    65f0:	bf00      	nop
    65f2:	370c      	adds	r7, #12
    65f4:	46bd      	mov	sp, r7
    65f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    65fa:	4770      	bx	lr

000065fc <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    65fc:	b480      	push	{r7}
    65fe:	b083      	sub	sp, #12
    6600:	af00      	add	r7, sp, #0
    6602:	6078      	str	r0, [r7, #4]
    6604:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    6606:	687b      	ldr	r3, [r7, #4]
    6608:	689a      	ldr	r2, [r3, #8]
    660a:	683b      	ldr	r3, [r7, #0]
    660c:	4013      	ands	r3, r2
    660e:	2b00      	cmp	r3, #0
    6610:	bf14      	ite	ne
    6612:	2301      	movne	r3, #1
    6614:	2300      	moveq	r3, #0
    6616:	b2db      	uxtb	r3, r3
}
    6618:	4618      	mov	r0, r3
    661a:	370c      	adds	r7, #12
    661c:	46bd      	mov	sp, r7
    661e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6622:	4770      	bx	lr

00006624 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    6624:	b480      	push	{r7}
    6626:	b083      	sub	sp, #12
    6628:	af00      	add	r7, sp, #0
    662a:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    662c:	687b      	ldr	r3, [r7, #4]
    662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6630:	f003 0301 	and.w	r3, r3, #1
    6634:	2b00      	cmp	r3, #0
    6636:	bf14      	ite	ne
    6638:	2301      	movne	r3, #1
    663a:	2300      	moveq	r3, #0
    663c:	b2db      	uxtb	r3, r3
}
    663e:	4618      	mov	r0, r3
    6640:	370c      	adds	r7, #12
    6642:	46bd      	mov	sp, r7
    6644:	f85d 7b04 	ldr.w	r7, [sp], #4
    6648:	4770      	bx	lr

0000664a <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    664a:	b480      	push	{r7}
    664c:	b083      	sub	sp, #12
    664e:	af00      	add	r7, sp, #0
    6650:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    6652:	687b      	ldr	r3, [r7, #4]
    6654:	2201      	movs	r2, #1
    6656:	62da      	str	r2, [r3, #44]	; 0x2c
}
    6658:	bf00      	nop
    665a:	370c      	adds	r7, #12
    665c:	46bd      	mov	sp, r7
    665e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6662:	4770      	bx	lr

00006664 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    6664:	b480      	push	{r7}
    6666:	b083      	sub	sp, #12
    6668:	af00      	add	r7, sp, #0
    666a:	6078      	str	r0, [r7, #4]
    666c:	460b      	mov	r3, r1
    666e:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    6670:	687b      	ldr	r3, [r7, #4]
    6672:	78fa      	ldrb	r2, [r7, #3]
    6674:	715a      	strb	r2, [r3, #5]
}
    6676:	bf00      	nop
    6678:	370c      	adds	r7, #12
    667a:	46bd      	mov	sp, r7
    667c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6680:	4770      	bx	lr

00006682 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    6682:	b480      	push	{r7}
    6684:	b083      	sub	sp, #12
    6686:	af00      	add	r7, sp, #0
    6688:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    668a:	687b      	ldr	r3, [r7, #4]
    668c:	2201      	movs	r2, #1
    668e:	629a      	str	r2, [r3, #40]	; 0x28
}
    6690:	bf00      	nop
    6692:	370c      	adds	r7, #12
    6694:	46bd      	mov	sp, r7
    6696:	f85d 7b04 	ldr.w	r7, [sp], #4
    669a:	4770      	bx	lr

0000669c <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    669c:	b580      	push	{r7, lr}
    669e:	b082      	sub	sp, #8
    66a0:	af00      	add	r7, sp, #0
    66a2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    66a4:	687b      	ldr	r3, [r7, #4]
    66a6:	681b      	ldr	r3, [r3, #0]
    66a8:	f043 0201 	orr.w	r2, r3, #1
    66ac:	687b      	ldr	r3, [r7, #4]
    66ae:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    66b0:	2101      	movs	r1, #1
    66b2:	6878      	ldr	r0, [r7, #4]
    66b4:	4b02      	ldr	r3, [pc, #8]	; (66c0 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    66b6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    66b8:	bf00      	nop
    66ba:	3708      	adds	r7, #8
    66bc:	46bd      	mov	sp, r7
    66be:	bd80      	pop	{r7, pc}
    66c0:	000065d9 	.word	0x000065d9

000066c4 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    66c4:	b580      	push	{r7, lr}
    66c6:	b082      	sub	sp, #8
    66c8:	af00      	add	r7, sp, #0
    66ca:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    66cc:	687b      	ldr	r3, [r7, #4]
    66ce:	681b      	ldr	r3, [r3, #0]
    66d0:	f043 0202 	orr.w	r2, r3, #2
    66d4:	687b      	ldr	r3, [r7, #4]
    66d6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    66d8:	2103      	movs	r1, #3
    66da:	6878      	ldr	r0, [r7, #4]
    66dc:	4b02      	ldr	r3, [pc, #8]	; (66e8 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    66de:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    66e0:	bf00      	nop
    66e2:	3708      	adds	r7, #8
    66e4:	46bd      	mov	sp, r7
    66e6:	bd80      	pop	{r7, pc}
    66e8:	000065d9 	.word	0x000065d9

000066ec <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    66ec:	b580      	push	{r7, lr}
    66ee:	b084      	sub	sp, #16
    66f0:	af00      	add	r7, sp, #0
    66f2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    66f4:	2103      	movs	r1, #3
    66f6:	6878      	ldr	r0, [r7, #4]
    66f8:	4b09      	ldr	r3, [pc, #36]	; (6720 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    66fa:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    66fc:	687b      	ldr	r3, [r7, #4]
    66fe:	681b      	ldr	r3, [r3, #0]
    6700:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    6702:	68fb      	ldr	r3, [r7, #12]
    6704:	085b      	lsrs	r3, r3, #1
    6706:	f003 0301 	and.w	r3, r3, #1
    670a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    670c:	68fb      	ldr	r3, [r7, #12]
    670e:	2b00      	cmp	r3, #0
    6710:	bf14      	ite	ne
    6712:	2301      	movne	r3, #1
    6714:	2300      	moveq	r3, #0
    6716:	b2db      	uxtb	r3, r3
}
    6718:	4618      	mov	r0, r3
    671a:	3710      	adds	r7, #16
    671c:	46bd      	mov	sp, r7
    671e:	bd80      	pop	{r7, pc}
    6720:	000065d9 	.word	0x000065d9

00006724 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6724:	b580      	push	{r7, lr}
    6726:	b082      	sub	sp, #8
    6728:	af00      	add	r7, sp, #0
    672a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    672c:	687b      	ldr	r3, [r7, #4]
    672e:	681b      	ldr	r3, [r3, #0]
    6730:	f023 0202 	bic.w	r2, r3, #2
    6734:	687b      	ldr	r3, [r7, #4]
    6736:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6738:	2103      	movs	r1, #3
    673a:	6878      	ldr	r0, [r7, #4]
    673c:	4b02      	ldr	r3, [pc, #8]	; (6748 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    673e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6740:	bf00      	nop
    6742:	3708      	adds	r7, #8
    6744:	46bd      	mov	sp, r7
    6746:	bd80      	pop	{r7, pc}
    6748:	000065d9 	.word	0x000065d9

0000674c <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    674c:	b580      	push	{r7, lr}
    674e:	b084      	sub	sp, #16
    6750:	af00      	add	r7, sp, #0
    6752:	6078      	str	r0, [r7, #4]
    6754:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6756:	2103      	movs	r1, #3
    6758:	6878      	ldr	r0, [r7, #4]
    675a:	4b07      	ldr	r3, [pc, #28]	; (6778 <hri_tcc_get_CTRLA_reg+0x2c>)
    675c:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    675e:	687b      	ldr	r3, [r7, #4]
    6760:	681b      	ldr	r3, [r3, #0]
    6762:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6764:	68fa      	ldr	r2, [r7, #12]
    6766:	683b      	ldr	r3, [r7, #0]
    6768:	4013      	ands	r3, r2
    676a:	60fb      	str	r3, [r7, #12]
	return tmp;
    676c:	68fb      	ldr	r3, [r7, #12]
}
    676e:	4618      	mov	r0, r3
    6770:	3710      	adds	r7, #16
    6772:	46bd      	mov	sp, r7
    6774:	bd80      	pop	{r7, pc}
    6776:	bf00      	nop
    6778:	000065d9 	.word	0x000065d9

0000677c <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    677c:	b580      	push	{r7, lr}
    677e:	b082      	sub	sp, #8
    6780:	af00      	add	r7, sp, #0
    6782:	6078      	str	r0, [r7, #4]
    6784:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    6786:	687b      	ldr	r3, [r7, #4]
    6788:	683a      	ldr	r2, [r7, #0]
    678a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    678c:	2103      	movs	r1, #3
    678e:	6878      	ldr	r0, [r7, #4]
    6790:	4b02      	ldr	r3, [pc, #8]	; (679c <hri_tcc_write_CTRLA_reg+0x20>)
    6792:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6794:	bf00      	nop
    6796:	3708      	adds	r7, #8
    6798:	46bd      	mov	sp, r7
    679a:	bd80      	pop	{r7, pc}
    679c:	000065d9 	.word	0x000065d9

000067a0 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    67a0:	b480      	push	{r7}
    67a2:	b083      	sub	sp, #12
    67a4:	af00      	add	r7, sp, #0
    67a6:	6078      	str	r0, [r7, #4]
    67a8:	460b      	mov	r3, r1
    67aa:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    67ac:	687b      	ldr	r3, [r7, #4]
    67ae:	78fa      	ldrb	r2, [r7, #3]
    67b0:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    67b2:	bf00      	nop
    67b4:	370c      	adds	r7, #12
    67b6:	46bd      	mov	sp, r7
    67b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    67bc:	4770      	bx	lr

000067be <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    67be:	b480      	push	{r7}
    67c0:	b083      	sub	sp, #12
    67c2:	af00      	add	r7, sp, #0
    67c4:	6078      	str	r0, [r7, #4]
    67c6:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    67c8:	687b      	ldr	r3, [r7, #4]
    67ca:	683a      	ldr	r2, [r7, #0]
    67cc:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    67ce:	bf00      	nop
    67d0:	370c      	adds	r7, #12
    67d2:	46bd      	mov	sp, r7
    67d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    67d8:	4770      	bx	lr
	...

000067dc <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    67dc:	b580      	push	{r7, lr}
    67de:	b082      	sub	sp, #8
    67e0:	af00      	add	r7, sp, #0
    67e2:	6078      	str	r0, [r7, #4]
    67e4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    67e6:	687b      	ldr	r3, [r7, #4]
    67e8:	683a      	ldr	r2, [r7, #0]
    67ea:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    67ec:	2180      	movs	r1, #128	; 0x80
    67ee:	6878      	ldr	r0, [r7, #4]
    67f0:	4b02      	ldr	r3, [pc, #8]	; (67fc <hri_tcc_write_PER_reg+0x20>)
    67f2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    67f4:	bf00      	nop
    67f6:	3708      	adds	r7, #8
    67f8:	46bd      	mov	sp, r7
    67fa:	bd80      	pop	{r7, pc}
    67fc:	000065d9 	.word	0x000065d9

00006800 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    6800:	b580      	push	{r7, lr}
    6802:	b082      	sub	sp, #8
    6804:	af00      	add	r7, sp, #0
    6806:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    6808:	2180      	movs	r1, #128	; 0x80
    680a:	6878      	ldr	r0, [r7, #4]
    680c:	4b03      	ldr	r3, [pc, #12]	; (681c <hri_tcc_read_PER_reg+0x1c>)
    680e:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    6810:	687b      	ldr	r3, [r7, #4]
    6812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    6814:	4618      	mov	r0, r3
    6816:	3708      	adds	r7, #8
    6818:	46bd      	mov	sp, r7
    681a:	bd80      	pop	{r7, pc}
    681c:	000065d9 	.word	0x000065d9

00006820 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    6820:	b480      	push	{r7}
    6822:	b083      	sub	sp, #12
    6824:	af00      	add	r7, sp, #0
    6826:	6078      	str	r0, [r7, #4]
    6828:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    682a:	687b      	ldr	r3, [r7, #4]
    682c:	4a0c      	ldr	r2, [pc, #48]	; (6860 <_tcc_init_irq_param+0x40>)
    682e:	4293      	cmp	r3, r2
    6830:	d102      	bne.n	6838 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    6832:	4a0c      	ldr	r2, [pc, #48]	; (6864 <_tcc_init_irq_param+0x44>)
    6834:	683b      	ldr	r3, [r7, #0]
    6836:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    6838:	687b      	ldr	r3, [r7, #4]
    683a:	4a0b      	ldr	r2, [pc, #44]	; (6868 <_tcc_init_irq_param+0x48>)
    683c:	4293      	cmp	r3, r2
    683e:	d102      	bne.n	6846 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    6840:	4a0a      	ldr	r2, [pc, #40]	; (686c <_tcc_init_irq_param+0x4c>)
    6842:	683b      	ldr	r3, [r7, #0]
    6844:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    6846:	687b      	ldr	r3, [r7, #4]
    6848:	4a09      	ldr	r2, [pc, #36]	; (6870 <_tcc_init_irq_param+0x50>)
    684a:	4293      	cmp	r3, r2
    684c:	d102      	bne.n	6854 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    684e:	4a09      	ldr	r2, [pc, #36]	; (6874 <_tcc_init_irq_param+0x54>)
    6850:	683b      	ldr	r3, [r7, #0]
    6852:	6013      	str	r3, [r2, #0]
	}
}
    6854:	bf00      	nop
    6856:	370c      	adds	r7, #12
    6858:	46bd      	mov	sp, r7
    685a:	f85d 7b04 	ldr.w	r7, [sp], #4
    685e:	4770      	bx	lr
    6860:	41016000 	.word	0x41016000
    6864:	20000830 	.word	0x20000830
    6868:	41018000 	.word	0x41018000
    686c:	20000834 	.word	0x20000834
    6870:	42000c00 	.word	0x42000c00
    6874:	20000838 	.word	0x20000838

00006878 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    6878:	b580      	push	{r7, lr}
    687a:	b084      	sub	sp, #16
    687c:	af00      	add	r7, sp, #0
    687e:	6078      	str	r0, [r7, #4]
    6880:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    6882:	6838      	ldr	r0, [r7, #0]
    6884:	4b33      	ldr	r3, [pc, #204]	; (6954 <_tcc_timer_init+0xdc>)
    6886:	4798      	blx	r3
    6888:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    688a:	68fb      	ldr	r3, [r7, #12]
    688c:	2b00      	cmp	r3, #0
    688e:	d102      	bne.n	6896 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    6890:	f06f 0309 	mvn.w	r3, #9
    6894:	e05a      	b.n	694c <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    6896:	687b      	ldr	r3, [r7, #4]
    6898:	683a      	ldr	r2, [r7, #0]
    689a:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    689c:	2101      	movs	r1, #1
    689e:	6838      	ldr	r0, [r7, #0]
    68a0:	4b2d      	ldr	r3, [pc, #180]	; (6958 <_tcc_timer_init+0xe0>)
    68a2:	4798      	blx	r3
    68a4:	4603      	mov	r3, r0
    68a6:	f083 0301 	eor.w	r3, r3, #1
    68aa:	b2db      	uxtb	r3, r3
    68ac:	2b00      	cmp	r3, #0
    68ae:	d011      	beq.n	68d4 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    68b0:	2102      	movs	r1, #2
    68b2:	6838      	ldr	r0, [r7, #0]
    68b4:	4b29      	ldr	r3, [pc, #164]	; (695c <_tcc_timer_init+0xe4>)
    68b6:	4798      	blx	r3
    68b8:	4603      	mov	r3, r0
    68ba:	2b00      	cmp	r3, #0
    68bc:	d006      	beq.n	68cc <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    68be:	6838      	ldr	r0, [r7, #0]
    68c0:	4b27      	ldr	r3, [pc, #156]	; (6960 <_tcc_timer_init+0xe8>)
    68c2:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    68c4:	2102      	movs	r1, #2
    68c6:	6838      	ldr	r0, [r7, #0]
    68c8:	4b26      	ldr	r3, [pc, #152]	; (6964 <_tcc_timer_init+0xec>)
    68ca:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    68cc:	2101      	movs	r1, #1
    68ce:	6838      	ldr	r0, [r7, #0]
    68d0:	4b25      	ldr	r3, [pc, #148]	; (6968 <_tcc_timer_init+0xf0>)
    68d2:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    68d4:	2101      	movs	r1, #1
    68d6:	6838      	ldr	r0, [r7, #0]
    68d8:	4b22      	ldr	r3, [pc, #136]	; (6964 <_tcc_timer_init+0xec>)
    68da:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    68dc:	68fb      	ldr	r3, [r7, #12]
    68de:	689b      	ldr	r3, [r3, #8]
    68e0:	4619      	mov	r1, r3
    68e2:	6838      	ldr	r0, [r7, #0]
    68e4:	4b20      	ldr	r3, [pc, #128]	; (6968 <_tcc_timer_init+0xf0>)
    68e6:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    68e8:	68fb      	ldr	r3, [r7, #12]
    68ea:	7b1b      	ldrb	r3, [r3, #12]
    68ec:	4619      	mov	r1, r3
    68ee:	6838      	ldr	r0, [r7, #0]
    68f0:	4b1e      	ldr	r3, [pc, #120]	; (696c <_tcc_timer_init+0xf4>)
    68f2:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    68f4:	68fb      	ldr	r3, [r7, #12]
    68f6:	7b5b      	ldrb	r3, [r3, #13]
    68f8:	4619      	mov	r1, r3
    68fa:	6838      	ldr	r0, [r7, #0]
    68fc:	4b1c      	ldr	r3, [pc, #112]	; (6970 <_tcc_timer_init+0xf8>)
    68fe:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    6900:	68fb      	ldr	r3, [r7, #12]
    6902:	691b      	ldr	r3, [r3, #16]
    6904:	4619      	mov	r1, r3
    6906:	6838      	ldr	r0, [r7, #0]
    6908:	4b1a      	ldr	r3, [pc, #104]	; (6974 <_tcc_timer_init+0xfc>)
    690a:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    690c:	68fb      	ldr	r3, [r7, #12]
    690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6910:	4619      	mov	r1, r3
    6912:	6838      	ldr	r0, [r7, #0]
    6914:	4b18      	ldr	r3, [pc, #96]	; (6978 <_tcc_timer_init+0x100>)
    6916:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    6918:	6838      	ldr	r0, [r7, #0]
    691a:	4b18      	ldr	r3, [pc, #96]	; (697c <_tcc_timer_init+0x104>)
    691c:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    691e:	6879      	ldr	r1, [r7, #4]
    6920:	6838      	ldr	r0, [r7, #0]
    6922:	4b17      	ldr	r3, [pc, #92]	; (6980 <_tcc_timer_init+0x108>)
    6924:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    6926:	68fb      	ldr	r3, [r7, #12]
    6928:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    692c:	4618      	mov	r0, r3
    692e:	4b15      	ldr	r3, [pc, #84]	; (6984 <_tcc_timer_init+0x10c>)
    6930:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    6932:	68fb      	ldr	r3, [r7, #12]
    6934:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6938:	4618      	mov	r0, r3
    693a:	4b13      	ldr	r3, [pc, #76]	; (6988 <_tcc_timer_init+0x110>)
    693c:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    693e:	68fb      	ldr	r3, [r7, #12]
    6940:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6944:	4618      	mov	r0, r3
    6946:	4b11      	ldr	r3, [pc, #68]	; (698c <_tcc_timer_init+0x114>)
    6948:	4798      	blx	r3

	return ERR_NONE;
    694a:	2300      	movs	r3, #0
}
    694c:	4618      	mov	r0, r3
    694e:	3710      	adds	r7, #16
    6950:	46bd      	mov	sp, r7
    6952:	bd80      	pop	{r7, pc}
    6954:	00006b5d 	.word	0x00006b5d
    6958:	000065fd 	.word	0x000065fd
    695c:	0000674d 	.word	0x0000674d
    6960:	00006725 	.word	0x00006725
    6964:	000065d9 	.word	0x000065d9
    6968:	0000677d 	.word	0x0000677d
    696c:	00006665 	.word	0x00006665
    6970:	000067a1 	.word	0x000067a1
    6974:	000067bf 	.word	0x000067bf
    6978:	000067dd 	.word	0x000067dd
    697c:	00006683 	.word	0x00006683
    6980:	00006821 	.word	0x00006821
    6984:	00006559 	.word	0x00006559
    6988:	0000659d 	.word	0x0000659d
    698c:	0000651d 	.word	0x0000651d

00006990 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    6990:	b580      	push	{r7, lr}
    6992:	b084      	sub	sp, #16
    6994:	af00      	add	r7, sp, #0
    6996:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    6998:	687b      	ldr	r3, [r7, #4]
    699a:	68db      	ldr	r3, [r3, #12]
    699c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    699e:	68f8      	ldr	r0, [r7, #12]
    69a0:	4b0a      	ldr	r3, [pc, #40]	; (69cc <_tcc_timer_deinit+0x3c>)
    69a2:	4798      	blx	r3
    69a4:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    69a6:	68bb      	ldr	r3, [r7, #8]
    69a8:	2b00      	cmp	r3, #0
    69aa:	d00b      	beq.n	69c4 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    69ac:	68bb      	ldr	r3, [r7, #8]
    69ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    69b2:	4618      	mov	r0, r3
    69b4:	4b06      	ldr	r3, [pc, #24]	; (69d0 <_tcc_timer_deinit+0x40>)
    69b6:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    69b8:	68f8      	ldr	r0, [r7, #12]
    69ba:	4b06      	ldr	r3, [pc, #24]	; (69d4 <_tcc_timer_deinit+0x44>)
    69bc:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    69be:	68f8      	ldr	r0, [r7, #12]
    69c0:	4b05      	ldr	r3, [pc, #20]	; (69d8 <_tcc_timer_deinit+0x48>)
    69c2:	4798      	blx	r3
	}
}
    69c4:	bf00      	nop
    69c6:	3710      	adds	r7, #16
    69c8:	46bd      	mov	sp, r7
    69ca:	bd80      	pop	{r7, pc}
    69cc:	00006b5d 	.word	0x00006b5d
    69d0:	00006559 	.word	0x00006559
    69d4:	00006725 	.word	0x00006725
    69d8:	0000669d 	.word	0x0000669d

000069dc <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    69dc:	b580      	push	{r7, lr}
    69de:	b082      	sub	sp, #8
    69e0:	af00      	add	r7, sp, #0
    69e2:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    69e4:	687b      	ldr	r3, [r7, #4]
    69e6:	68db      	ldr	r3, [r3, #12]
    69e8:	4618      	mov	r0, r3
    69ea:	4b03      	ldr	r3, [pc, #12]	; (69f8 <_tcc_timer_start+0x1c>)
    69ec:	4798      	blx	r3
}
    69ee:	bf00      	nop
    69f0:	3708      	adds	r7, #8
    69f2:	46bd      	mov	sp, r7
    69f4:	bd80      	pop	{r7, pc}
    69f6:	bf00      	nop
    69f8:	000066c5 	.word	0x000066c5

000069fc <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    69fc:	b580      	push	{r7, lr}
    69fe:	b082      	sub	sp, #8
    6a00:	af00      	add	r7, sp, #0
    6a02:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    6a04:	687b      	ldr	r3, [r7, #4]
    6a06:	68db      	ldr	r3, [r3, #12]
    6a08:	4618      	mov	r0, r3
    6a0a:	4b03      	ldr	r3, [pc, #12]	; (6a18 <_tcc_timer_stop+0x1c>)
    6a0c:	4798      	blx	r3
}
    6a0e:	bf00      	nop
    6a10:	3708      	adds	r7, #8
    6a12:	46bd      	mov	sp, r7
    6a14:	bd80      	pop	{r7, pc}
    6a16:	bf00      	nop
    6a18:	00006725 	.word	0x00006725

00006a1c <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    6a1c:	b580      	push	{r7, lr}
    6a1e:	b082      	sub	sp, #8
    6a20:	af00      	add	r7, sp, #0
    6a22:	6078      	str	r0, [r7, #4]
    6a24:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    6a26:	687b      	ldr	r3, [r7, #4]
    6a28:	68db      	ldr	r3, [r3, #12]
    6a2a:	6839      	ldr	r1, [r7, #0]
    6a2c:	4618      	mov	r0, r3
    6a2e:	4b03      	ldr	r3, [pc, #12]	; (6a3c <_tcc_timer_set_period+0x20>)
    6a30:	4798      	blx	r3
}
    6a32:	bf00      	nop
    6a34:	3708      	adds	r7, #8
    6a36:	46bd      	mov	sp, r7
    6a38:	bd80      	pop	{r7, pc}
    6a3a:	bf00      	nop
    6a3c:	000067dd 	.word	0x000067dd

00006a40 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    6a40:	b580      	push	{r7, lr}
    6a42:	b082      	sub	sp, #8
    6a44:	af00      	add	r7, sp, #0
    6a46:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    6a48:	687b      	ldr	r3, [r7, #4]
    6a4a:	68db      	ldr	r3, [r3, #12]
    6a4c:	4618      	mov	r0, r3
    6a4e:	4b03      	ldr	r3, [pc, #12]	; (6a5c <_tcc_timer_get_period+0x1c>)
    6a50:	4798      	blx	r3
    6a52:	4603      	mov	r3, r0
}
    6a54:	4618      	mov	r0, r3
    6a56:	3708      	adds	r7, #8
    6a58:	46bd      	mov	sp, r7
    6a5a:	bd80      	pop	{r7, pc}
    6a5c:	00006801 	.word	0x00006801

00006a60 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    6a60:	b580      	push	{r7, lr}
    6a62:	b082      	sub	sp, #8
    6a64:	af00      	add	r7, sp, #0
    6a66:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    6a68:	687b      	ldr	r3, [r7, #4]
    6a6a:	68db      	ldr	r3, [r3, #12]
    6a6c:	4618      	mov	r0, r3
    6a6e:	4b03      	ldr	r3, [pc, #12]	; (6a7c <_tcc_timer_is_started+0x1c>)
    6a70:	4798      	blx	r3
    6a72:	4603      	mov	r3, r0
}
    6a74:	4618      	mov	r0, r3
    6a76:	3708      	adds	r7, #8
    6a78:	46bd      	mov	sp, r7
    6a7a:	bd80      	pop	{r7, pc}
    6a7c:	000066ed 	.word	0x000066ed

00006a80 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    6a80:	b480      	push	{r7}
    6a82:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    6a84:	4b02      	ldr	r3, [pc, #8]	; (6a90 <_tcc_get_timer+0x10>)
}
    6a86:	4618      	mov	r0, r3
    6a88:	46bd      	mov	sp, r7
    6a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a8e:	4770      	bx	lr
    6a90:	200000f0 	.word	0x200000f0

00006a94 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    6a94:	b580      	push	{r7, lr}
    6a96:	b084      	sub	sp, #16
    6a98:	af00      	add	r7, sp, #0
    6a9a:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    6a9c:	687b      	ldr	r3, [r7, #4]
    6a9e:	68db      	ldr	r3, [r3, #12]
    6aa0:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    6aa2:	68f8      	ldr	r0, [r7, #12]
    6aa4:	4b08      	ldr	r3, [pc, #32]	; (6ac8 <_tcc_timer_set_irq+0x34>)
    6aa6:	4798      	blx	r3
    6aa8:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    6aaa:	68bb      	ldr	r3, [r7, #8]
    6aac:	2b00      	cmp	r3, #0
    6aae:	d006      	beq.n	6abe <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    6ab0:	68bb      	ldr	r3, [r7, #8]
    6ab2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6ab6:	b2db      	uxtb	r3, r3
    6ab8:	4618      	mov	r0, r3
    6aba:	4b04      	ldr	r3, [pc, #16]	; (6acc <_tcc_timer_set_irq+0x38>)
    6abc:	4798      	blx	r3
	}
}
    6abe:	bf00      	nop
    6ac0:	3710      	adds	r7, #16
    6ac2:	46bd      	mov	sp, r7
    6ac4:	bd80      	pop	{r7, pc}
    6ac6:	bf00      	nop
    6ac8:	00006b5d 	.word	0x00006b5d
    6acc:	000035b1 	.word	0x000035b1

00006ad0 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    6ad0:	b580      	push	{r7, lr}
    6ad2:	b084      	sub	sp, #16
    6ad4:	af00      	add	r7, sp, #0
    6ad6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    6ad8:	687b      	ldr	r3, [r7, #4]
    6ada:	68db      	ldr	r3, [r3, #12]
    6adc:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    6ade:	68f8      	ldr	r0, [r7, #12]
    6ae0:	4b07      	ldr	r3, [pc, #28]	; (6b00 <tcc_interrupt_handler+0x30>)
    6ae2:	4798      	blx	r3
    6ae4:	4603      	mov	r3, r0
    6ae6:	2b00      	cmp	r3, #0
    6ae8:	d006      	beq.n	6af8 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    6aea:	68f8      	ldr	r0, [r7, #12]
    6aec:	4b05      	ldr	r3, [pc, #20]	; (6b04 <tcc_interrupt_handler+0x34>)
    6aee:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    6af0:	687b      	ldr	r3, [r7, #4]
    6af2:	681b      	ldr	r3, [r3, #0]
    6af4:	6878      	ldr	r0, [r7, #4]
    6af6:	4798      	blx	r3
	}
}
    6af8:	bf00      	nop
    6afa:	3710      	adds	r7, #16
    6afc:	46bd      	mov	sp, r7
    6afe:	bd80      	pop	{r7, pc}
    6b00:	00006625 	.word	0x00006625
    6b04:	0000664b 	.word	0x0000664b

00006b08 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    6b08:	b580      	push	{r7, lr}
    6b0a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    6b0c:	4b03      	ldr	r3, [pc, #12]	; (6b1c <TCC0_0_Handler+0x14>)
    6b0e:	681b      	ldr	r3, [r3, #0]
    6b10:	4618      	mov	r0, r3
    6b12:	4b03      	ldr	r3, [pc, #12]	; (6b20 <TCC0_0_Handler+0x18>)
    6b14:	4798      	blx	r3
}
    6b16:	bf00      	nop
    6b18:	bd80      	pop	{r7, pc}
    6b1a:	bf00      	nop
    6b1c:	20000830 	.word	0x20000830
    6b20:	00006ad1 	.word	0x00006ad1

00006b24 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    6b24:	b580      	push	{r7, lr}
    6b26:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    6b28:	4b03      	ldr	r3, [pc, #12]	; (6b38 <TCC1_0_Handler+0x14>)
    6b2a:	681b      	ldr	r3, [r3, #0]
    6b2c:	4618      	mov	r0, r3
    6b2e:	4b03      	ldr	r3, [pc, #12]	; (6b3c <TCC1_0_Handler+0x18>)
    6b30:	4798      	blx	r3
}
    6b32:	bf00      	nop
    6b34:	bd80      	pop	{r7, pc}
    6b36:	bf00      	nop
    6b38:	20000834 	.word	0x20000834
    6b3c:	00006ad1 	.word	0x00006ad1

00006b40 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    6b40:	b580      	push	{r7, lr}
    6b42:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    6b44:	4b03      	ldr	r3, [pc, #12]	; (6b54 <TCC2_0_Handler+0x14>)
    6b46:	681b      	ldr	r3, [r3, #0]
    6b48:	4618      	mov	r0, r3
    6b4a:	4b03      	ldr	r3, [pc, #12]	; (6b58 <TCC2_0_Handler+0x18>)
    6b4c:	4798      	blx	r3
}
    6b4e:	bf00      	nop
    6b50:	bd80      	pop	{r7, pc}
    6b52:	bf00      	nop
    6b54:	20000838 	.word	0x20000838
    6b58:	00006ad1 	.word	0x00006ad1

00006b5c <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    6b5c:	b480      	push	{r7}
    6b5e:	b085      	sub	sp, #20
    6b60:	af00      	add	r7, sp, #0
    6b62:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    6b64:	2300      	movs	r3, #0
    6b66:	73fb      	strb	r3, [r7, #15]
    6b68:	e015      	b.n	6b96 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    6b6a:	7bfa      	ldrb	r2, [r7, #15]
    6b6c:	490f      	ldr	r1, [pc, #60]	; (6bac <_get_tcc_cfg+0x50>)
    6b6e:	4613      	mov	r3, r2
    6b70:	005b      	lsls	r3, r3, #1
    6b72:	4413      	add	r3, r2
    6b74:	011b      	lsls	r3, r3, #4
    6b76:	440b      	add	r3, r1
    6b78:	681a      	ldr	r2, [r3, #0]
    6b7a:	687b      	ldr	r3, [r7, #4]
    6b7c:	429a      	cmp	r2, r3
    6b7e:	d107      	bne.n	6b90 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    6b80:	7bfa      	ldrb	r2, [r7, #15]
    6b82:	4613      	mov	r3, r2
    6b84:	005b      	lsls	r3, r3, #1
    6b86:	4413      	add	r3, r2
    6b88:	011b      	lsls	r3, r3, #4
    6b8a:	4a08      	ldr	r2, [pc, #32]	; (6bac <_get_tcc_cfg+0x50>)
    6b8c:	4413      	add	r3, r2
    6b8e:	e006      	b.n	6b9e <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    6b90:	7bfb      	ldrb	r3, [r7, #15]
    6b92:	3301      	adds	r3, #1
    6b94:	73fb      	strb	r3, [r7, #15]
    6b96:	7bfb      	ldrb	r3, [r7, #15]
    6b98:	2b02      	cmp	r3, #2
    6b9a:	d9e6      	bls.n	6b6a <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    6b9c:	2300      	movs	r3, #0
}
    6b9e:	4618      	mov	r0, r3
    6ba0:	3714      	adds	r7, #20
    6ba2:	46bd      	mov	sp, r7
    6ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ba8:	4770      	bx	lr
    6baa:	bf00      	nop
    6bac:	20000060 	.word	0x20000060

00006bb0 <__NVIC_EnableIRQ>:
{
    6bb0:	b480      	push	{r7}
    6bb2:	b083      	sub	sp, #12
    6bb4:	af00      	add	r7, sp, #0
    6bb6:	4603      	mov	r3, r0
    6bb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6bbe:	2b00      	cmp	r3, #0
    6bc0:	db0b      	blt.n	6bda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6bc2:	4909      	ldr	r1, [pc, #36]	; (6be8 <__NVIC_EnableIRQ+0x38>)
    6bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6bc8:	095b      	lsrs	r3, r3, #5
    6bca:	88fa      	ldrh	r2, [r7, #6]
    6bcc:	f002 021f 	and.w	r2, r2, #31
    6bd0:	2001      	movs	r0, #1
    6bd2:	fa00 f202 	lsl.w	r2, r0, r2
    6bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6bda:	bf00      	nop
    6bdc:	370c      	adds	r7, #12
    6bde:	46bd      	mov	sp, r7
    6be0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6be4:	4770      	bx	lr
    6be6:	bf00      	nop
    6be8:	e000e100 	.word	0xe000e100

00006bec <__NVIC_DisableIRQ>:
{
    6bec:	b480      	push	{r7}
    6bee:	b083      	sub	sp, #12
    6bf0:	af00      	add	r7, sp, #0
    6bf2:	4603      	mov	r3, r0
    6bf4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6bfa:	2b00      	cmp	r3, #0
    6bfc:	db10      	blt.n	6c20 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6bfe:	490b      	ldr	r1, [pc, #44]	; (6c2c <__NVIC_DisableIRQ+0x40>)
    6c00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c04:	095b      	lsrs	r3, r3, #5
    6c06:	88fa      	ldrh	r2, [r7, #6]
    6c08:	f002 021f 	and.w	r2, r2, #31
    6c0c:	2001      	movs	r0, #1
    6c0e:	fa00 f202 	lsl.w	r2, r0, r2
    6c12:	3320      	adds	r3, #32
    6c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6c18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6c1c:	f3bf 8f6f 	isb	sy
}
    6c20:	bf00      	nop
    6c22:	370c      	adds	r7, #12
    6c24:	46bd      	mov	sp, r7
    6c26:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c2a:	4770      	bx	lr
    6c2c:	e000e100 	.word	0xe000e100

00006c30 <__NVIC_ClearPendingIRQ>:
{
    6c30:	b480      	push	{r7}
    6c32:	b083      	sub	sp, #12
    6c34:	af00      	add	r7, sp, #0
    6c36:	4603      	mov	r3, r0
    6c38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c3e:	2b00      	cmp	r3, #0
    6c40:	db0c      	blt.n	6c5c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c42:	4909      	ldr	r1, [pc, #36]	; (6c68 <__NVIC_ClearPendingIRQ+0x38>)
    6c44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c48:	095b      	lsrs	r3, r3, #5
    6c4a:	88fa      	ldrh	r2, [r7, #6]
    6c4c:	f002 021f 	and.w	r2, r2, #31
    6c50:	2001      	movs	r0, #1
    6c52:	fa00 f202 	lsl.w	r2, r0, r2
    6c56:	3360      	adds	r3, #96	; 0x60
    6c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c5c:	bf00      	nop
    6c5e:	370c      	adds	r7, #12
    6c60:	46bd      	mov	sp, r7
    6c62:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c66:	4770      	bx	lr
    6c68:	e000e100 	.word	0xe000e100

00006c6c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    6c6c:	b480      	push	{r7}
    6c6e:	b083      	sub	sp, #12
    6c70:	af00      	add	r7, sp, #0
    6c72:	6078      	str	r0, [r7, #4]
    6c74:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    6c76:	bf00      	nop
    6c78:	687b      	ldr	r3, [r7, #4]
    6c7a:	691a      	ldr	r2, [r3, #16]
    6c7c:	683b      	ldr	r3, [r7, #0]
    6c7e:	4013      	ands	r3, r2
    6c80:	2b00      	cmp	r3, #0
    6c82:	d1f9      	bne.n	6c78 <hri_tc_wait_for_sync+0xc>
	};
}
    6c84:	bf00      	nop
    6c86:	370c      	adds	r7, #12
    6c88:	46bd      	mov	sp, r7
    6c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c8e:	4770      	bx	lr

00006c90 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    6c90:	b480      	push	{r7}
    6c92:	b083      	sub	sp, #12
    6c94:	af00      	add	r7, sp, #0
    6c96:	6078      	str	r0, [r7, #4]
    6c98:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    6c9a:	687b      	ldr	r3, [r7, #4]
    6c9c:	691a      	ldr	r2, [r3, #16]
    6c9e:	683b      	ldr	r3, [r7, #0]
    6ca0:	4013      	ands	r3, r2
    6ca2:	2b00      	cmp	r3, #0
    6ca4:	bf14      	ite	ne
    6ca6:	2301      	movne	r3, #1
    6ca8:	2300      	moveq	r3, #0
    6caa:	b2db      	uxtb	r3, r3
}
    6cac:	4618      	mov	r0, r3
    6cae:	370c      	adds	r7, #12
    6cb0:	46bd      	mov	sp, r7
    6cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cb6:	4770      	bx	lr

00006cb8 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    6cb8:	b480      	push	{r7}
    6cba:	b083      	sub	sp, #12
    6cbc:	af00      	add	r7, sp, #0
    6cbe:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    6cc0:	687b      	ldr	r3, [r7, #4]
    6cc2:	7a9b      	ldrb	r3, [r3, #10]
    6cc4:	b2db      	uxtb	r3, r3
    6cc6:	f003 0301 	and.w	r3, r3, #1
    6cca:	2b00      	cmp	r3, #0
    6ccc:	bf14      	ite	ne
    6cce:	2301      	movne	r3, #1
    6cd0:	2300      	moveq	r3, #0
    6cd2:	b2db      	uxtb	r3, r3
}
    6cd4:	4618      	mov	r0, r3
    6cd6:	370c      	adds	r7, #12
    6cd8:	46bd      	mov	sp, r7
    6cda:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cde:	4770      	bx	lr

00006ce0 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    6ce0:	b480      	push	{r7}
    6ce2:	b083      	sub	sp, #12
    6ce4:	af00      	add	r7, sp, #0
    6ce6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    6ce8:	687b      	ldr	r3, [r7, #4]
    6cea:	2201      	movs	r2, #1
    6cec:	729a      	strb	r2, [r3, #10]
}
    6cee:	bf00      	nop
    6cf0:	370c      	adds	r7, #12
    6cf2:	46bd      	mov	sp, r7
    6cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cf8:	4770      	bx	lr

00006cfa <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    6cfa:	b480      	push	{r7}
    6cfc:	b083      	sub	sp, #12
    6cfe:	af00      	add	r7, sp, #0
    6d00:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    6d02:	687b      	ldr	r3, [r7, #4]
    6d04:	2202      	movs	r2, #2
    6d06:	729a      	strb	r2, [r3, #10]
}
    6d08:	bf00      	nop
    6d0a:	370c      	adds	r7, #12
    6d0c:	46bd      	mov	sp, r7
    6d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d12:	4770      	bx	lr

00006d14 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    6d14:	b480      	push	{r7}
    6d16:	b083      	sub	sp, #12
    6d18:	af00      	add	r7, sp, #0
    6d1a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    6d1c:	687b      	ldr	r3, [r7, #4]
    6d1e:	2201      	movs	r2, #1
    6d20:	725a      	strb	r2, [r3, #9]
}
    6d22:	bf00      	nop
    6d24:	370c      	adds	r7, #12
    6d26:	46bd      	mov	sp, r7
    6d28:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d2c:	4770      	bx	lr

00006d2e <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    6d2e:	b480      	push	{r7}
    6d30:	b083      	sub	sp, #12
    6d32:	af00      	add	r7, sp, #0
    6d34:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    6d36:	687b      	ldr	r3, [r7, #4]
    6d38:	7a5b      	ldrb	r3, [r3, #9]
    6d3a:	b2db      	uxtb	r3, r3
    6d3c:	085b      	lsrs	r3, r3, #1
    6d3e:	f003 0301 	and.w	r3, r3, #1
    6d42:	2b00      	cmp	r3, #0
    6d44:	bf14      	ite	ne
    6d46:	2301      	movne	r3, #1
    6d48:	2300      	moveq	r3, #0
    6d4a:	b2db      	uxtb	r3, r3
}
    6d4c:	4618      	mov	r0, r3
    6d4e:	370c      	adds	r7, #12
    6d50:	46bd      	mov	sp, r7
    6d52:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d56:	4770      	bx	lr

00006d58 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    6d58:	b580      	push	{r7, lr}
    6d5a:	b082      	sub	sp, #8
    6d5c:	af00      	add	r7, sp, #0
    6d5e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    6d60:	687b      	ldr	r3, [r7, #4]
    6d62:	681b      	ldr	r3, [r3, #0]
    6d64:	f043 0201 	orr.w	r2, r3, #1
    6d68:	687b      	ldr	r3, [r7, #4]
    6d6a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    6d6c:	2101      	movs	r1, #1
    6d6e:	6878      	ldr	r0, [r7, #4]
    6d70:	4b02      	ldr	r3, [pc, #8]	; (6d7c <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    6d72:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6d74:	bf00      	nop
    6d76:	3708      	adds	r7, #8
    6d78:	46bd      	mov	sp, r7
    6d7a:	bd80      	pop	{r7, pc}
    6d7c:	00006c6d 	.word	0x00006c6d

00006d80 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6d80:	b580      	push	{r7, lr}
    6d82:	b082      	sub	sp, #8
    6d84:	af00      	add	r7, sp, #0
    6d86:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    6d88:	687b      	ldr	r3, [r7, #4]
    6d8a:	681b      	ldr	r3, [r3, #0]
    6d8c:	f043 0202 	orr.w	r2, r3, #2
    6d90:	687b      	ldr	r3, [r7, #4]
    6d92:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6d94:	2103      	movs	r1, #3
    6d96:	6878      	ldr	r0, [r7, #4]
    6d98:	4b02      	ldr	r3, [pc, #8]	; (6da4 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    6d9a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6d9c:	bf00      	nop
    6d9e:	3708      	adds	r7, #8
    6da0:	46bd      	mov	sp, r7
    6da2:	bd80      	pop	{r7, pc}
    6da4:	00006c6d 	.word	0x00006c6d

00006da8 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6da8:	b580      	push	{r7, lr}
    6daa:	b084      	sub	sp, #16
    6dac:	af00      	add	r7, sp, #0
    6dae:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6db0:	2103      	movs	r1, #3
    6db2:	6878      	ldr	r0, [r7, #4]
    6db4:	4b09      	ldr	r3, [pc, #36]	; (6ddc <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    6db6:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    6db8:	687b      	ldr	r3, [r7, #4]
    6dba:	681b      	ldr	r3, [r3, #0]
    6dbc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    6dbe:	68fb      	ldr	r3, [r7, #12]
    6dc0:	085b      	lsrs	r3, r3, #1
    6dc2:	f003 0301 	and.w	r3, r3, #1
    6dc6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6dc8:	68fb      	ldr	r3, [r7, #12]
    6dca:	2b00      	cmp	r3, #0
    6dcc:	bf14      	ite	ne
    6dce:	2301      	movne	r3, #1
    6dd0:	2300      	moveq	r3, #0
    6dd2:	b2db      	uxtb	r3, r3
}
    6dd4:	4618      	mov	r0, r3
    6dd6:	3710      	adds	r7, #16
    6dd8:	46bd      	mov	sp, r7
    6dda:	bd80      	pop	{r7, pc}
    6ddc:	00006c6d 	.word	0x00006c6d

00006de0 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6de0:	b580      	push	{r7, lr}
    6de2:	b082      	sub	sp, #8
    6de4:	af00      	add	r7, sp, #0
    6de6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    6de8:	687b      	ldr	r3, [r7, #4]
    6dea:	681b      	ldr	r3, [r3, #0]
    6dec:	f023 0202 	bic.w	r2, r3, #2
    6df0:	687b      	ldr	r3, [r7, #4]
    6df2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6df4:	2103      	movs	r1, #3
    6df6:	6878      	ldr	r0, [r7, #4]
    6df8:	4b02      	ldr	r3, [pc, #8]	; (6e04 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    6dfa:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6dfc:	bf00      	nop
    6dfe:	3708      	adds	r7, #8
    6e00:	46bd      	mov	sp, r7
    6e02:	bd80      	pop	{r7, pc}
    6e04:	00006c6d 	.word	0x00006c6d

00006e08 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    6e08:	b480      	push	{r7}
    6e0a:	b085      	sub	sp, #20
    6e0c:	af00      	add	r7, sp, #0
    6e0e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    6e10:	687b      	ldr	r3, [r7, #4]
    6e12:	681b      	ldr	r3, [r3, #0]
    6e14:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    6e16:	68fb      	ldr	r3, [r7, #12]
    6e18:	089b      	lsrs	r3, r3, #2
    6e1a:	f003 0303 	and.w	r3, r3, #3
    6e1e:	60fb      	str	r3, [r7, #12]
	return tmp;
    6e20:	68fb      	ldr	r3, [r7, #12]
}
    6e22:	4618      	mov	r0, r3
    6e24:	3714      	adds	r7, #20
    6e26:	46bd      	mov	sp, r7
    6e28:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e2c:	4770      	bx	lr
	...

00006e30 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    6e30:	b580      	push	{r7, lr}
    6e32:	b084      	sub	sp, #16
    6e34:	af00      	add	r7, sp, #0
    6e36:	6078      	str	r0, [r7, #4]
    6e38:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6e3a:	2103      	movs	r1, #3
    6e3c:	6878      	ldr	r0, [r7, #4]
    6e3e:	4b07      	ldr	r3, [pc, #28]	; (6e5c <hri_tc_get_CTRLA_reg+0x2c>)
    6e40:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    6e42:	687b      	ldr	r3, [r7, #4]
    6e44:	681b      	ldr	r3, [r3, #0]
    6e46:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6e48:	68fa      	ldr	r2, [r7, #12]
    6e4a:	683b      	ldr	r3, [r7, #0]
    6e4c:	4013      	ands	r3, r2
    6e4e:	60fb      	str	r3, [r7, #12]
	return tmp;
    6e50:	68fb      	ldr	r3, [r7, #12]
}
    6e52:	4618      	mov	r0, r3
    6e54:	3710      	adds	r7, #16
    6e56:	46bd      	mov	sp, r7
    6e58:	bd80      	pop	{r7, pc}
    6e5a:	bf00      	nop
    6e5c:	00006c6d 	.word	0x00006c6d

00006e60 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    6e60:	b580      	push	{r7, lr}
    6e62:	b082      	sub	sp, #8
    6e64:	af00      	add	r7, sp, #0
    6e66:	6078      	str	r0, [r7, #4]
    6e68:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    6e6a:	687b      	ldr	r3, [r7, #4]
    6e6c:	683a      	ldr	r2, [r7, #0]
    6e6e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6e70:	2103      	movs	r1, #3
    6e72:	6878      	ldr	r0, [r7, #4]
    6e74:	4b02      	ldr	r3, [pc, #8]	; (6e80 <hri_tc_write_CTRLA_reg+0x20>)
    6e76:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6e78:	bf00      	nop
    6e7a:	3708      	adds	r7, #8
    6e7c:	46bd      	mov	sp, r7
    6e7e:	bd80      	pop	{r7, pc}
    6e80:	00006c6d 	.word	0x00006c6d

00006e84 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    6e84:	b480      	push	{r7}
    6e86:	b083      	sub	sp, #12
    6e88:	af00      	add	r7, sp, #0
    6e8a:	6078      	str	r0, [r7, #4]
    6e8c:	460b      	mov	r3, r1
    6e8e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    6e90:	687b      	ldr	r3, [r7, #4]
    6e92:	887a      	ldrh	r2, [r7, #2]
    6e94:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    6e96:	bf00      	nop
    6e98:	370c      	adds	r7, #12
    6e9a:	46bd      	mov	sp, r7
    6e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ea0:	4770      	bx	lr

00006ea2 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    6ea2:	b480      	push	{r7}
    6ea4:	b083      	sub	sp, #12
    6ea6:	af00      	add	r7, sp, #0
    6ea8:	6078      	str	r0, [r7, #4]
    6eaa:	460b      	mov	r3, r1
    6eac:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    6eae:	687b      	ldr	r3, [r7, #4]
    6eb0:	78fa      	ldrb	r2, [r7, #3]
    6eb2:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    6eb4:	bf00      	nop
    6eb6:	370c      	adds	r7, #12
    6eb8:	46bd      	mov	sp, r7
    6eba:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ebe:	4770      	bx	lr

00006ec0 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    6ec0:	b480      	push	{r7}
    6ec2:	b083      	sub	sp, #12
    6ec4:	af00      	add	r7, sp, #0
    6ec6:	6078      	str	r0, [r7, #4]
    6ec8:	460b      	mov	r3, r1
    6eca:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    6ecc:	687b      	ldr	r3, [r7, #4]
    6ece:	78fa      	ldrb	r2, [r7, #3]
    6ed0:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    6ed2:	bf00      	nop
    6ed4:	370c      	adds	r7, #12
    6ed6:	46bd      	mov	sp, r7
    6ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6edc:	4770      	bx	lr
	...

00006ee0 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    6ee0:	b580      	push	{r7, lr}
    6ee2:	b082      	sub	sp, #8
    6ee4:	af00      	add	r7, sp, #0
    6ee6:	6078      	str	r0, [r7, #4]
    6ee8:	460b      	mov	r3, r1
    6eea:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    6eec:	687b      	ldr	r3, [r7, #4]
    6eee:	78fa      	ldrb	r2, [r7, #3]
    6ef0:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    6ef2:	2120      	movs	r1, #32
    6ef4:	6878      	ldr	r0, [r7, #4]
    6ef6:	4b03      	ldr	r3, [pc, #12]	; (6f04 <hri_tccount8_write_PER_reg+0x24>)
    6ef8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6efa:	bf00      	nop
    6efc:	3708      	adds	r7, #8
    6efe:	46bd      	mov	sp, r7
    6f00:	bd80      	pop	{r7, pc}
    6f02:	bf00      	nop
    6f04:	00006c6d 	.word	0x00006c6d

00006f08 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    6f08:	b580      	push	{r7, lr}
    6f0a:	b082      	sub	sp, #8
    6f0c:	af00      	add	r7, sp, #0
    6f0e:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    6f10:	2120      	movs	r1, #32
    6f12:	6878      	ldr	r0, [r7, #4]
    6f14:	4b04      	ldr	r3, [pc, #16]	; (6f28 <hri_tccount8_read_PER_reg+0x20>)
    6f16:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    6f18:	687b      	ldr	r3, [r7, #4]
    6f1a:	7edb      	ldrb	r3, [r3, #27]
    6f1c:	b2db      	uxtb	r3, r3
}
    6f1e:	4618      	mov	r0, r3
    6f20:	3708      	adds	r7, #8
    6f22:	46bd      	mov	sp, r7
    6f24:	bd80      	pop	{r7, pc}
    6f26:	bf00      	nop
    6f28:	00006c6d 	.word	0x00006c6d

00006f2c <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    6f2c:	b580      	push	{r7, lr}
    6f2e:	b082      	sub	sp, #8
    6f30:	af00      	add	r7, sp, #0
    6f32:	6078      	str	r0, [r7, #4]
    6f34:	460b      	mov	r3, r1
    6f36:	70fb      	strb	r3, [r7, #3]
    6f38:	4613      	mov	r3, r2
    6f3a:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    6f3c:	78fb      	ldrb	r3, [r7, #3]
    6f3e:	687a      	ldr	r2, [r7, #4]
    6f40:	4413      	add	r3, r2
    6f42:	78ba      	ldrb	r2, [r7, #2]
    6f44:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    6f46:	21c0      	movs	r1, #192	; 0xc0
    6f48:	6878      	ldr	r0, [r7, #4]
    6f4a:	4b03      	ldr	r3, [pc, #12]	; (6f58 <hri_tccount8_write_CC_reg+0x2c>)
    6f4c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6f4e:	bf00      	nop
    6f50:	3708      	adds	r7, #8
    6f52:	46bd      	mov	sp, r7
    6f54:	bd80      	pop	{r7, pc}
    6f56:	bf00      	nop
    6f58:	00006c6d 	.word	0x00006c6d

00006f5c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    6f5c:	b580      	push	{r7, lr}
    6f5e:	b082      	sub	sp, #8
    6f60:	af00      	add	r7, sp, #0
    6f62:	6078      	str	r0, [r7, #4]
    6f64:	460b      	mov	r3, r1
    6f66:	70fb      	strb	r3, [r7, #3]
    6f68:	4613      	mov	r3, r2
    6f6a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    6f6c:	78fb      	ldrb	r3, [r7, #3]
    6f6e:	687a      	ldr	r2, [r7, #4]
    6f70:	330c      	adds	r3, #12
    6f72:	005b      	lsls	r3, r3, #1
    6f74:	4413      	add	r3, r2
    6f76:	883a      	ldrh	r2, [r7, #0]
    6f78:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    6f7a:	21c0      	movs	r1, #192	; 0xc0
    6f7c:	6878      	ldr	r0, [r7, #4]
    6f7e:	4b03      	ldr	r3, [pc, #12]	; (6f8c <hri_tccount16_write_CC_reg+0x30>)
    6f80:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6f82:	bf00      	nop
    6f84:	3708      	adds	r7, #8
    6f86:	46bd      	mov	sp, r7
    6f88:	bd80      	pop	{r7, pc}
    6f8a:	bf00      	nop
    6f8c:	00006c6d 	.word	0x00006c6d

00006f90 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    6f90:	b580      	push	{r7, lr}
    6f92:	b082      	sub	sp, #8
    6f94:	af00      	add	r7, sp, #0
    6f96:	6078      	str	r0, [r7, #4]
    6f98:	460b      	mov	r3, r1
    6f9a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    6f9c:	21c0      	movs	r1, #192	; 0xc0
    6f9e:	6878      	ldr	r0, [r7, #4]
    6fa0:	4b06      	ldr	r3, [pc, #24]	; (6fbc <hri_tccount16_read_CC_reg+0x2c>)
    6fa2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    6fa4:	78fb      	ldrb	r3, [r7, #3]
    6fa6:	687a      	ldr	r2, [r7, #4]
    6fa8:	330c      	adds	r3, #12
    6faa:	005b      	lsls	r3, r3, #1
    6fac:	4413      	add	r3, r2
    6fae:	889b      	ldrh	r3, [r3, #4]
    6fb0:	b29b      	uxth	r3, r3
}
    6fb2:	4618      	mov	r0, r3
    6fb4:	3708      	adds	r7, #8
    6fb6:	46bd      	mov	sp, r7
    6fb8:	bd80      	pop	{r7, pc}
    6fba:	bf00      	nop
    6fbc:	00006c6d 	.word	0x00006c6d

00006fc0 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    6fc0:	b580      	push	{r7, lr}
    6fc2:	b084      	sub	sp, #16
    6fc4:	af00      	add	r7, sp, #0
    6fc6:	60f8      	str	r0, [r7, #12]
    6fc8:	460b      	mov	r3, r1
    6fca:	607a      	str	r2, [r7, #4]
    6fcc:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    6fce:	7afb      	ldrb	r3, [r7, #11]
    6fd0:	68fa      	ldr	r2, [r7, #12]
    6fd2:	3306      	adds	r3, #6
    6fd4:	009b      	lsls	r3, r3, #2
    6fd6:	4413      	add	r3, r2
    6fd8:	687a      	ldr	r2, [r7, #4]
    6fda:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    6fdc:	21c0      	movs	r1, #192	; 0xc0
    6fde:	68f8      	ldr	r0, [r7, #12]
    6fe0:	4b02      	ldr	r3, [pc, #8]	; (6fec <hri_tccount32_write_CC_reg+0x2c>)
    6fe2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6fe4:	bf00      	nop
    6fe6:	3710      	adds	r7, #16
    6fe8:	46bd      	mov	sp, r7
    6fea:	bd80      	pop	{r7, pc}
    6fec:	00006c6d 	.word	0x00006c6d

00006ff0 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    6ff0:	b580      	push	{r7, lr}
    6ff2:	b082      	sub	sp, #8
    6ff4:	af00      	add	r7, sp, #0
    6ff6:	6078      	str	r0, [r7, #4]
    6ff8:	460b      	mov	r3, r1
    6ffa:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    6ffc:	21c0      	movs	r1, #192	; 0xc0
    6ffe:	6878      	ldr	r0, [r7, #4]
    7000:	4b05      	ldr	r3, [pc, #20]	; (7018 <hri_tccount32_read_CC_reg+0x28>)
    7002:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7004:	78fb      	ldrb	r3, [r7, #3]
    7006:	687a      	ldr	r2, [r7, #4]
    7008:	3306      	adds	r3, #6
    700a:	009b      	lsls	r3, r3, #2
    700c:	4413      	add	r3, r2
    700e:	685b      	ldr	r3, [r3, #4]
}
    7010:	4618      	mov	r0, r3
    7012:	3708      	adds	r7, #8
    7014:	46bd      	mov	sp, r7
    7016:	bd80      	pop	{r7, pc}
    7018:	00006c6d 	.word	0x00006c6d

0000701c <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    701c:	b580      	push	{r7, lr}
    701e:	b084      	sub	sp, #16
    7020:	af00      	add	r7, sp, #0
    7022:	6078      	str	r0, [r7, #4]
    7024:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7026:	6838      	ldr	r0, [r7, #0]
    7028:	4b93      	ldr	r3, [pc, #588]	; (7278 <_tc_timer_init+0x25c>)
    702a:	4798      	blx	r3
    702c:	4603      	mov	r3, r0
    702e:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7030:	687b      	ldr	r3, [r7, #4]
    7032:	683a      	ldr	r2, [r7, #0]
    7034:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7036:	22a4      	movs	r2, #164	; 0xa4
    7038:	4990      	ldr	r1, [pc, #576]	; (727c <_tc_timer_init+0x260>)
    703a:	2001      	movs	r0, #1
    703c:	4b90      	ldr	r3, [pc, #576]	; (7280 <_tc_timer_init+0x264>)
    703e:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7040:	2101      	movs	r1, #1
    7042:	6838      	ldr	r0, [r7, #0]
    7044:	4b8f      	ldr	r3, [pc, #572]	; (7284 <_tc_timer_init+0x268>)
    7046:	4798      	blx	r3
    7048:	4603      	mov	r3, r0
    704a:	f083 0301 	eor.w	r3, r3, #1
    704e:	b2db      	uxtb	r3, r3
    7050:	2b00      	cmp	r3, #0
    7052:	d011      	beq.n	7078 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7054:	2102      	movs	r1, #2
    7056:	6838      	ldr	r0, [r7, #0]
    7058:	4b8b      	ldr	r3, [pc, #556]	; (7288 <_tc_timer_init+0x26c>)
    705a:	4798      	blx	r3
    705c:	4603      	mov	r3, r0
    705e:	2b00      	cmp	r3, #0
    7060:	d006      	beq.n	7070 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7062:	6838      	ldr	r0, [r7, #0]
    7064:	4b89      	ldr	r3, [pc, #548]	; (728c <_tc_timer_init+0x270>)
    7066:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7068:	2102      	movs	r1, #2
    706a:	6838      	ldr	r0, [r7, #0]
    706c:	4b88      	ldr	r3, [pc, #544]	; (7290 <_tc_timer_init+0x274>)
    706e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7070:	2101      	movs	r1, #1
    7072:	6838      	ldr	r0, [r7, #0]
    7074:	4b87      	ldr	r3, [pc, #540]	; (7294 <_tc_timer_init+0x278>)
    7076:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7078:	2101      	movs	r1, #1
    707a:	6838      	ldr	r0, [r7, #0]
    707c:	4b84      	ldr	r3, [pc, #528]	; (7290 <_tc_timer_init+0x274>)
    707e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7080:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7084:	4984      	ldr	r1, [pc, #528]	; (7298 <_tc_timer_init+0x27c>)
    7086:	4613      	mov	r3, r2
    7088:	009b      	lsls	r3, r3, #2
    708a:	4413      	add	r3, r2
    708c:	009b      	lsls	r3, r3, #2
    708e:	440b      	add	r3, r1
    7090:	3304      	adds	r3, #4
    7092:	681b      	ldr	r3, [r3, #0]
    7094:	4619      	mov	r1, r3
    7096:	6838      	ldr	r0, [r7, #0]
    7098:	4b7e      	ldr	r3, [pc, #504]	; (7294 <_tc_timer_init+0x278>)
    709a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    709c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    70a0:	497d      	ldr	r1, [pc, #500]	; (7298 <_tc_timer_init+0x27c>)
    70a2:	4613      	mov	r3, r2
    70a4:	009b      	lsls	r3, r3, #2
    70a6:	4413      	add	r3, r2
    70a8:	009b      	lsls	r3, r3, #2
    70aa:	440b      	add	r3, r1
    70ac:	330a      	adds	r3, #10
    70ae:	781b      	ldrb	r3, [r3, #0]
    70b0:	4619      	mov	r1, r3
    70b2:	6838      	ldr	r0, [r7, #0]
    70b4:	4b79      	ldr	r3, [pc, #484]	; (729c <_tc_timer_init+0x280>)
    70b6:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    70b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    70bc:	4976      	ldr	r1, [pc, #472]	; (7298 <_tc_timer_init+0x27c>)
    70be:	4613      	mov	r3, r2
    70c0:	009b      	lsls	r3, r3, #2
    70c2:	4413      	add	r3, r2
    70c4:	009b      	lsls	r3, r3, #2
    70c6:	440b      	add	r3, r1
    70c8:	3308      	adds	r3, #8
    70ca:	881b      	ldrh	r3, [r3, #0]
    70cc:	4619      	mov	r1, r3
    70ce:	6838      	ldr	r0, [r7, #0]
    70d0:	4b73      	ldr	r3, [pc, #460]	; (72a0 <_tc_timer_init+0x284>)
    70d2:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    70d4:	2101      	movs	r1, #1
    70d6:	6838      	ldr	r0, [r7, #0]
    70d8:	4b72      	ldr	r3, [pc, #456]	; (72a4 <_tc_timer_init+0x288>)
    70da:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    70dc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    70e0:	496d      	ldr	r1, [pc, #436]	; (7298 <_tc_timer_init+0x27c>)
    70e2:	4613      	mov	r3, r2
    70e4:	009b      	lsls	r3, r3, #2
    70e6:	4413      	add	r3, r2
    70e8:	009b      	lsls	r3, r3, #2
    70ea:	440b      	add	r3, r1
    70ec:	3304      	adds	r3, #4
    70ee:	681b      	ldr	r3, [r3, #0]
    70f0:	f003 030c 	and.w	r3, r3, #12
    70f4:	2b08      	cmp	r3, #8
    70f6:	d11e      	bne.n	7136 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    70f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    70fc:	4966      	ldr	r1, [pc, #408]	; (7298 <_tc_timer_init+0x27c>)
    70fe:	4613      	mov	r3, r2
    7100:	009b      	lsls	r3, r3, #2
    7102:	4413      	add	r3, r2
    7104:	009b      	lsls	r3, r3, #2
    7106:	440b      	add	r3, r1
    7108:	330c      	adds	r3, #12
    710a:	681b      	ldr	r3, [r3, #0]
    710c:	461a      	mov	r2, r3
    710e:	2100      	movs	r1, #0
    7110:	6838      	ldr	r0, [r7, #0]
    7112:	4b65      	ldr	r3, [pc, #404]	; (72a8 <_tc_timer_init+0x28c>)
    7114:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7116:	f997 200f 	ldrsb.w	r2, [r7, #15]
    711a:	495f      	ldr	r1, [pc, #380]	; (7298 <_tc_timer_init+0x27c>)
    711c:	4613      	mov	r3, r2
    711e:	009b      	lsls	r3, r3, #2
    7120:	4413      	add	r3, r2
    7122:	009b      	lsls	r3, r3, #2
    7124:	440b      	add	r3, r1
    7126:	3310      	adds	r3, #16
    7128:	681b      	ldr	r3, [r3, #0]
    712a:	461a      	mov	r2, r3
    712c:	2101      	movs	r1, #1
    712e:	6838      	ldr	r0, [r7, #0]
    7130:	4b5d      	ldr	r3, [pc, #372]	; (72a8 <_tc_timer_init+0x28c>)
    7132:	4798      	blx	r3
    7134:	e06a      	b.n	720c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7136:	f997 200f 	ldrsb.w	r2, [r7, #15]
    713a:	4957      	ldr	r1, [pc, #348]	; (7298 <_tc_timer_init+0x27c>)
    713c:	4613      	mov	r3, r2
    713e:	009b      	lsls	r3, r3, #2
    7140:	4413      	add	r3, r2
    7142:	009b      	lsls	r3, r3, #2
    7144:	440b      	add	r3, r1
    7146:	3304      	adds	r3, #4
    7148:	681b      	ldr	r3, [r3, #0]
    714a:	f003 030c 	and.w	r3, r3, #12
    714e:	2b00      	cmp	r3, #0
    7150:	d120      	bne.n	7194 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7152:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7156:	4950      	ldr	r1, [pc, #320]	; (7298 <_tc_timer_init+0x27c>)
    7158:	4613      	mov	r3, r2
    715a:	009b      	lsls	r3, r3, #2
    715c:	4413      	add	r3, r2
    715e:	009b      	lsls	r3, r3, #2
    7160:	440b      	add	r3, r1
    7162:	330c      	adds	r3, #12
    7164:	681b      	ldr	r3, [r3, #0]
    7166:	b29b      	uxth	r3, r3
    7168:	461a      	mov	r2, r3
    716a:	2100      	movs	r1, #0
    716c:	6838      	ldr	r0, [r7, #0]
    716e:	4b4f      	ldr	r3, [pc, #316]	; (72ac <_tc_timer_init+0x290>)
    7170:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7172:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7176:	4948      	ldr	r1, [pc, #288]	; (7298 <_tc_timer_init+0x27c>)
    7178:	4613      	mov	r3, r2
    717a:	009b      	lsls	r3, r3, #2
    717c:	4413      	add	r3, r2
    717e:	009b      	lsls	r3, r3, #2
    7180:	440b      	add	r3, r1
    7182:	3310      	adds	r3, #16
    7184:	681b      	ldr	r3, [r3, #0]
    7186:	b29b      	uxth	r3, r3
    7188:	461a      	mov	r2, r3
    718a:	2101      	movs	r1, #1
    718c:	6838      	ldr	r0, [r7, #0]
    718e:	4b47      	ldr	r3, [pc, #284]	; (72ac <_tc_timer_init+0x290>)
    7190:	4798      	blx	r3
    7192:	e03b      	b.n	720c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7194:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7198:	493f      	ldr	r1, [pc, #252]	; (7298 <_tc_timer_init+0x27c>)
    719a:	4613      	mov	r3, r2
    719c:	009b      	lsls	r3, r3, #2
    719e:	4413      	add	r3, r2
    71a0:	009b      	lsls	r3, r3, #2
    71a2:	440b      	add	r3, r1
    71a4:	3304      	adds	r3, #4
    71a6:	681b      	ldr	r3, [r3, #0]
    71a8:	f003 030c 	and.w	r3, r3, #12
    71ac:	2b04      	cmp	r3, #4
    71ae:	d12d      	bne.n	720c <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    71b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    71b4:	4938      	ldr	r1, [pc, #224]	; (7298 <_tc_timer_init+0x27c>)
    71b6:	4613      	mov	r3, r2
    71b8:	009b      	lsls	r3, r3, #2
    71ba:	4413      	add	r3, r2
    71bc:	009b      	lsls	r3, r3, #2
    71be:	440b      	add	r3, r1
    71c0:	330c      	adds	r3, #12
    71c2:	681b      	ldr	r3, [r3, #0]
    71c4:	b2db      	uxtb	r3, r3
    71c6:	461a      	mov	r2, r3
    71c8:	2100      	movs	r1, #0
    71ca:	6838      	ldr	r0, [r7, #0]
    71cc:	4b38      	ldr	r3, [pc, #224]	; (72b0 <_tc_timer_init+0x294>)
    71ce:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    71d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    71d4:	4930      	ldr	r1, [pc, #192]	; (7298 <_tc_timer_init+0x27c>)
    71d6:	4613      	mov	r3, r2
    71d8:	009b      	lsls	r3, r3, #2
    71da:	4413      	add	r3, r2
    71dc:	009b      	lsls	r3, r3, #2
    71de:	440b      	add	r3, r1
    71e0:	3310      	adds	r3, #16
    71e2:	681b      	ldr	r3, [r3, #0]
    71e4:	b2db      	uxtb	r3, r3
    71e6:	461a      	mov	r2, r3
    71e8:	2101      	movs	r1, #1
    71ea:	6838      	ldr	r0, [r7, #0]
    71ec:	4b30      	ldr	r3, [pc, #192]	; (72b0 <_tc_timer_init+0x294>)
    71ee:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    71f0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    71f4:	4928      	ldr	r1, [pc, #160]	; (7298 <_tc_timer_init+0x27c>)
    71f6:	4613      	mov	r3, r2
    71f8:	009b      	lsls	r3, r3, #2
    71fa:	4413      	add	r3, r2
    71fc:	009b      	lsls	r3, r3, #2
    71fe:	440b      	add	r3, r1
    7200:	330b      	adds	r3, #11
    7202:	781b      	ldrb	r3, [r3, #0]
    7204:	4619      	mov	r1, r3
    7206:	6838      	ldr	r0, [r7, #0]
    7208:	4b2a      	ldr	r3, [pc, #168]	; (72b4 <_tc_timer_init+0x298>)
    720a:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    720c:	6838      	ldr	r0, [r7, #0]
    720e:	4b2a      	ldr	r3, [pc, #168]	; (72b8 <_tc_timer_init+0x29c>)
    7210:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7212:	6879      	ldr	r1, [r7, #4]
    7214:	6838      	ldr	r0, [r7, #0]
    7216:	4b29      	ldr	r3, [pc, #164]	; (72bc <_tc_timer_init+0x2a0>)
    7218:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    721a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    721e:	491e      	ldr	r1, [pc, #120]	; (7298 <_tc_timer_init+0x27c>)
    7220:	4613      	mov	r3, r2
    7222:	009b      	lsls	r3, r3, #2
    7224:	4413      	add	r3, r2
    7226:	009b      	lsls	r3, r3, #2
    7228:	440b      	add	r3, r1
    722a:	3302      	adds	r3, #2
    722c:	f9b3 3000 	ldrsh.w	r3, [r3]
    7230:	4618      	mov	r0, r3
    7232:	4b23      	ldr	r3, [pc, #140]	; (72c0 <_tc_timer_init+0x2a4>)
    7234:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7236:	f997 200f 	ldrsb.w	r2, [r7, #15]
    723a:	4917      	ldr	r1, [pc, #92]	; (7298 <_tc_timer_init+0x27c>)
    723c:	4613      	mov	r3, r2
    723e:	009b      	lsls	r3, r3, #2
    7240:	4413      	add	r3, r2
    7242:	009b      	lsls	r3, r3, #2
    7244:	440b      	add	r3, r1
    7246:	3302      	adds	r3, #2
    7248:	f9b3 3000 	ldrsh.w	r3, [r3]
    724c:	4618      	mov	r0, r3
    724e:	4b1d      	ldr	r3, [pc, #116]	; (72c4 <_tc_timer_init+0x2a8>)
    7250:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7252:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7256:	4910      	ldr	r1, [pc, #64]	; (7298 <_tc_timer_init+0x27c>)
    7258:	4613      	mov	r3, r2
    725a:	009b      	lsls	r3, r3, #2
    725c:	4413      	add	r3, r2
    725e:	009b      	lsls	r3, r3, #2
    7260:	440b      	add	r3, r1
    7262:	3302      	adds	r3, #2
    7264:	f9b3 3000 	ldrsh.w	r3, [r3]
    7268:	4618      	mov	r0, r3
    726a:	4b17      	ldr	r3, [pc, #92]	; (72c8 <_tc_timer_init+0x2ac>)
    726c:	4798      	blx	r3

	return ERR_NONE;
    726e:	2300      	movs	r3, #0
}
    7270:	4618      	mov	r0, r3
    7272:	3710      	adds	r7, #16
    7274:	46bd      	mov	sp, r7
    7276:	bd80      	pop	{r7, pc}
    7278:	0000786d 	.word	0x0000786d
    727c:	0000d238 	.word	0x0000d238
    7280:	00002dd1 	.word	0x00002dd1
    7284:	00006c91 	.word	0x00006c91
    7288:	00006e31 	.word	0x00006e31
    728c:	00006de1 	.word	0x00006de1
    7290:	00006c6d 	.word	0x00006c6d
    7294:	00006e61 	.word	0x00006e61
    7298:	20000110 	.word	0x20000110
    729c:	00006ec1 	.word	0x00006ec1
    72a0:	00006e85 	.word	0x00006e85
    72a4:	00006ea3 	.word	0x00006ea3
    72a8:	00006fc1 	.word	0x00006fc1
    72ac:	00006f5d 	.word	0x00006f5d
    72b0:	00006f2d 	.word	0x00006f2d
    72b4:	00006ee1 	.word	0x00006ee1
    72b8:	00006d15 	.word	0x00006d15
    72bc:	000078d5 	.word	0x000078d5
    72c0:	00006bed 	.word	0x00006bed
    72c4:	00006c31 	.word	0x00006c31
    72c8:	00006bb1 	.word	0x00006bb1

000072cc <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    72cc:	b580      	push	{r7, lr}
    72ce:	b084      	sub	sp, #16
    72d0:	af00      	add	r7, sp, #0
    72d2:	6078      	str	r0, [r7, #4]
    72d4:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    72d6:	6838      	ldr	r0, [r7, #0]
    72d8:	4b73      	ldr	r3, [pc, #460]	; (74a8 <_pwm_init+0x1dc>)
    72da:	4798      	blx	r3
    72dc:	4603      	mov	r3, r0
    72de:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    72e0:	687b      	ldr	r3, [r7, #4]
    72e2:	683a      	ldr	r2, [r7, #0]
    72e4:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    72e6:	2101      	movs	r1, #1
    72e8:	6838      	ldr	r0, [r7, #0]
    72ea:	4b70      	ldr	r3, [pc, #448]	; (74ac <_pwm_init+0x1e0>)
    72ec:	4798      	blx	r3
    72ee:	4603      	mov	r3, r0
    72f0:	f083 0301 	eor.w	r3, r3, #1
    72f4:	b2db      	uxtb	r3, r3
    72f6:	2b00      	cmp	r3, #0
    72f8:	d011      	beq.n	731e <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    72fa:	2102      	movs	r1, #2
    72fc:	6838      	ldr	r0, [r7, #0]
    72fe:	4b6c      	ldr	r3, [pc, #432]	; (74b0 <_pwm_init+0x1e4>)
    7300:	4798      	blx	r3
    7302:	4603      	mov	r3, r0
    7304:	2b00      	cmp	r3, #0
    7306:	d006      	beq.n	7316 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7308:	6838      	ldr	r0, [r7, #0]
    730a:	4b6a      	ldr	r3, [pc, #424]	; (74b4 <_pwm_init+0x1e8>)
    730c:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    730e:	2102      	movs	r1, #2
    7310:	6838      	ldr	r0, [r7, #0]
    7312:	4b69      	ldr	r3, [pc, #420]	; (74b8 <_pwm_init+0x1ec>)
    7314:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7316:	2101      	movs	r1, #1
    7318:	6838      	ldr	r0, [r7, #0]
    731a:	4b68      	ldr	r3, [pc, #416]	; (74bc <_pwm_init+0x1f0>)
    731c:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    731e:	2101      	movs	r1, #1
    7320:	6838      	ldr	r0, [r7, #0]
    7322:	4b65      	ldr	r3, [pc, #404]	; (74b8 <_pwm_init+0x1ec>)
    7324:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7326:	f997 200f 	ldrsb.w	r2, [r7, #15]
    732a:	4965      	ldr	r1, [pc, #404]	; (74c0 <_pwm_init+0x1f4>)
    732c:	4613      	mov	r3, r2
    732e:	009b      	lsls	r3, r3, #2
    7330:	4413      	add	r3, r2
    7332:	009b      	lsls	r3, r3, #2
    7334:	440b      	add	r3, r1
    7336:	3304      	adds	r3, #4
    7338:	681b      	ldr	r3, [r3, #0]
    733a:	4619      	mov	r1, r3
    733c:	6838      	ldr	r0, [r7, #0]
    733e:	4b5f      	ldr	r3, [pc, #380]	; (74bc <_pwm_init+0x1f0>)
    7340:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7342:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7346:	495e      	ldr	r1, [pc, #376]	; (74c0 <_pwm_init+0x1f4>)
    7348:	4613      	mov	r3, r2
    734a:	009b      	lsls	r3, r3, #2
    734c:	4413      	add	r3, r2
    734e:	009b      	lsls	r3, r3, #2
    7350:	440b      	add	r3, r1
    7352:	330a      	adds	r3, #10
    7354:	781b      	ldrb	r3, [r3, #0]
    7356:	4619      	mov	r1, r3
    7358:	6838      	ldr	r0, [r7, #0]
    735a:	4b5a      	ldr	r3, [pc, #360]	; (74c4 <_pwm_init+0x1f8>)
    735c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    735e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7362:	4957      	ldr	r1, [pc, #348]	; (74c0 <_pwm_init+0x1f4>)
    7364:	4613      	mov	r3, r2
    7366:	009b      	lsls	r3, r3, #2
    7368:	4413      	add	r3, r2
    736a:	009b      	lsls	r3, r3, #2
    736c:	440b      	add	r3, r1
    736e:	3308      	adds	r3, #8
    7370:	881b      	ldrh	r3, [r3, #0]
    7372:	4619      	mov	r1, r3
    7374:	6838      	ldr	r0, [r7, #0]
    7376:	4b54      	ldr	r3, [pc, #336]	; (74c8 <_pwm_init+0x1fc>)
    7378:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    737a:	2103      	movs	r1, #3
    737c:	6838      	ldr	r0, [r7, #0]
    737e:	4b53      	ldr	r3, [pc, #332]	; (74cc <_pwm_init+0x200>)
    7380:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7382:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7386:	494e      	ldr	r1, [pc, #312]	; (74c0 <_pwm_init+0x1f4>)
    7388:	4613      	mov	r3, r2
    738a:	009b      	lsls	r3, r3, #2
    738c:	4413      	add	r3, r2
    738e:	009b      	lsls	r3, r3, #2
    7390:	440b      	add	r3, r1
    7392:	3304      	adds	r3, #4
    7394:	681b      	ldr	r3, [r3, #0]
    7396:	f003 030c 	and.w	r3, r3, #12
    739a:	2b08      	cmp	r3, #8
    739c:	d11e      	bne.n	73dc <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    739e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    73a2:	4947      	ldr	r1, [pc, #284]	; (74c0 <_pwm_init+0x1f4>)
    73a4:	4613      	mov	r3, r2
    73a6:	009b      	lsls	r3, r3, #2
    73a8:	4413      	add	r3, r2
    73aa:	009b      	lsls	r3, r3, #2
    73ac:	440b      	add	r3, r1
    73ae:	330c      	adds	r3, #12
    73b0:	681b      	ldr	r3, [r3, #0]
    73b2:	461a      	mov	r2, r3
    73b4:	2100      	movs	r1, #0
    73b6:	6838      	ldr	r0, [r7, #0]
    73b8:	4b45      	ldr	r3, [pc, #276]	; (74d0 <_pwm_init+0x204>)
    73ba:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    73bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    73c0:	493f      	ldr	r1, [pc, #252]	; (74c0 <_pwm_init+0x1f4>)
    73c2:	4613      	mov	r3, r2
    73c4:	009b      	lsls	r3, r3, #2
    73c6:	4413      	add	r3, r2
    73c8:	009b      	lsls	r3, r3, #2
    73ca:	440b      	add	r3, r1
    73cc:	3310      	adds	r3, #16
    73ce:	681b      	ldr	r3, [r3, #0]
    73d0:	461a      	mov	r2, r3
    73d2:	2101      	movs	r1, #1
    73d4:	6838      	ldr	r0, [r7, #0]
    73d6:	4b3e      	ldr	r3, [pc, #248]	; (74d0 <_pwm_init+0x204>)
    73d8:	4798      	blx	r3
    73da:	e031      	b.n	7440 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    73dc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    73e0:	4937      	ldr	r1, [pc, #220]	; (74c0 <_pwm_init+0x1f4>)
    73e2:	4613      	mov	r3, r2
    73e4:	009b      	lsls	r3, r3, #2
    73e6:	4413      	add	r3, r2
    73e8:	009b      	lsls	r3, r3, #2
    73ea:	440b      	add	r3, r1
    73ec:	3304      	adds	r3, #4
    73ee:	681b      	ldr	r3, [r3, #0]
    73f0:	f003 030c 	and.w	r3, r3, #12
    73f4:	2b00      	cmp	r3, #0
    73f6:	d120      	bne.n	743a <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    73f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    73fc:	4930      	ldr	r1, [pc, #192]	; (74c0 <_pwm_init+0x1f4>)
    73fe:	4613      	mov	r3, r2
    7400:	009b      	lsls	r3, r3, #2
    7402:	4413      	add	r3, r2
    7404:	009b      	lsls	r3, r3, #2
    7406:	440b      	add	r3, r1
    7408:	330c      	adds	r3, #12
    740a:	681b      	ldr	r3, [r3, #0]
    740c:	b29b      	uxth	r3, r3
    740e:	461a      	mov	r2, r3
    7410:	2100      	movs	r1, #0
    7412:	6838      	ldr	r0, [r7, #0]
    7414:	4b2f      	ldr	r3, [pc, #188]	; (74d4 <_pwm_init+0x208>)
    7416:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7418:	f997 200f 	ldrsb.w	r2, [r7, #15]
    741c:	4928      	ldr	r1, [pc, #160]	; (74c0 <_pwm_init+0x1f4>)
    741e:	4613      	mov	r3, r2
    7420:	009b      	lsls	r3, r3, #2
    7422:	4413      	add	r3, r2
    7424:	009b      	lsls	r3, r3, #2
    7426:	440b      	add	r3, r1
    7428:	3310      	adds	r3, #16
    742a:	681b      	ldr	r3, [r3, #0]
    742c:	b29b      	uxth	r3, r3
    742e:	461a      	mov	r2, r3
    7430:	2101      	movs	r1, #1
    7432:	6838      	ldr	r0, [r7, #0]
    7434:	4b27      	ldr	r3, [pc, #156]	; (74d4 <_pwm_init+0x208>)
    7436:	4798      	blx	r3
    7438:	e002      	b.n	7440 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    743a:	f04f 33ff 	mov.w	r3, #4294967295
    743e:	e02e      	b.n	749e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    7440:	6879      	ldr	r1, [r7, #4]
    7442:	6838      	ldr	r0, [r7, #0]
    7444:	4b24      	ldr	r3, [pc, #144]	; (74d8 <_pwm_init+0x20c>)
    7446:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7448:	f997 200f 	ldrsb.w	r2, [r7, #15]
    744c:	491c      	ldr	r1, [pc, #112]	; (74c0 <_pwm_init+0x1f4>)
    744e:	4613      	mov	r3, r2
    7450:	009b      	lsls	r3, r3, #2
    7452:	4413      	add	r3, r2
    7454:	009b      	lsls	r3, r3, #2
    7456:	440b      	add	r3, r1
    7458:	3302      	adds	r3, #2
    745a:	f9b3 3000 	ldrsh.w	r3, [r3]
    745e:	4618      	mov	r0, r3
    7460:	4b1e      	ldr	r3, [pc, #120]	; (74dc <_pwm_init+0x210>)
    7462:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7464:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7468:	4915      	ldr	r1, [pc, #84]	; (74c0 <_pwm_init+0x1f4>)
    746a:	4613      	mov	r3, r2
    746c:	009b      	lsls	r3, r3, #2
    746e:	4413      	add	r3, r2
    7470:	009b      	lsls	r3, r3, #2
    7472:	440b      	add	r3, r1
    7474:	3302      	adds	r3, #2
    7476:	f9b3 3000 	ldrsh.w	r3, [r3]
    747a:	4618      	mov	r0, r3
    747c:	4b18      	ldr	r3, [pc, #96]	; (74e0 <_pwm_init+0x214>)
    747e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7480:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7484:	490e      	ldr	r1, [pc, #56]	; (74c0 <_pwm_init+0x1f4>)
    7486:	4613      	mov	r3, r2
    7488:	009b      	lsls	r3, r3, #2
    748a:	4413      	add	r3, r2
    748c:	009b      	lsls	r3, r3, #2
    748e:	440b      	add	r3, r1
    7490:	3302      	adds	r3, #2
    7492:	f9b3 3000 	ldrsh.w	r3, [r3]
    7496:	4618      	mov	r0, r3
    7498:	4b12      	ldr	r3, [pc, #72]	; (74e4 <_pwm_init+0x218>)
    749a:	4798      	blx	r3

	return 0;
    749c:	2300      	movs	r3, #0
}
    749e:	4618      	mov	r0, r3
    74a0:	3710      	adds	r7, #16
    74a2:	46bd      	mov	sp, r7
    74a4:	bd80      	pop	{r7, pc}
    74a6:	bf00      	nop
    74a8:	0000786d 	.word	0x0000786d
    74ac:	00006c91 	.word	0x00006c91
    74b0:	00006e31 	.word	0x00006e31
    74b4:	00006de1 	.word	0x00006de1
    74b8:	00006c6d 	.word	0x00006c6d
    74bc:	00006e61 	.word	0x00006e61
    74c0:	20000110 	.word	0x20000110
    74c4:	00006ec1 	.word	0x00006ec1
    74c8:	00006e85 	.word	0x00006e85
    74cc:	00006ea3 	.word	0x00006ea3
    74d0:	00006fc1 	.word	0x00006fc1
    74d4:	00006f5d 	.word	0x00006f5d
    74d8:	000078d5 	.word	0x000078d5
    74dc:	00006bed 	.word	0x00006bed
    74e0:	00006c31 	.word	0x00006c31
    74e4:	00006bb1 	.word	0x00006bb1

000074e8 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    74e8:	b580      	push	{r7, lr}
    74ea:	b084      	sub	sp, #16
    74ec:	af00      	add	r7, sp, #0
    74ee:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    74f0:	687b      	ldr	r3, [r7, #4]
    74f2:	68db      	ldr	r3, [r3, #12]
    74f4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    74f6:	68f8      	ldr	r0, [r7, #12]
    74f8:	4b10      	ldr	r3, [pc, #64]	; (753c <_tc_timer_deinit+0x54>)
    74fa:	4798      	blx	r3
    74fc:	4603      	mov	r3, r0
    74fe:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7500:	22f9      	movs	r2, #249	; 0xf9
    7502:	490f      	ldr	r1, [pc, #60]	; (7540 <_tc_timer_deinit+0x58>)
    7504:	2001      	movs	r0, #1
    7506:	4b0f      	ldr	r3, [pc, #60]	; (7544 <_tc_timer_deinit+0x5c>)
    7508:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    750a:	f997 200b 	ldrsb.w	r2, [r7, #11]
    750e:	490e      	ldr	r1, [pc, #56]	; (7548 <_tc_timer_deinit+0x60>)
    7510:	4613      	mov	r3, r2
    7512:	009b      	lsls	r3, r3, #2
    7514:	4413      	add	r3, r2
    7516:	009b      	lsls	r3, r3, #2
    7518:	440b      	add	r3, r1
    751a:	3302      	adds	r3, #2
    751c:	f9b3 3000 	ldrsh.w	r3, [r3]
    7520:	4618      	mov	r0, r3
    7522:	4b0a      	ldr	r3, [pc, #40]	; (754c <_tc_timer_deinit+0x64>)
    7524:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7526:	68f8      	ldr	r0, [r7, #12]
    7528:	4b09      	ldr	r3, [pc, #36]	; (7550 <_tc_timer_deinit+0x68>)
    752a:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    752c:	68f8      	ldr	r0, [r7, #12]
    752e:	4b09      	ldr	r3, [pc, #36]	; (7554 <_tc_timer_deinit+0x6c>)
    7530:	4798      	blx	r3
}
    7532:	bf00      	nop
    7534:	3710      	adds	r7, #16
    7536:	46bd      	mov	sp, r7
    7538:	bd80      	pop	{r7, pc}
    753a:	bf00      	nop
    753c:	0000786d 	.word	0x0000786d
    7540:	0000d238 	.word	0x0000d238
    7544:	00002dd1 	.word	0x00002dd1
    7548:	20000110 	.word	0x20000110
    754c:	00006bed 	.word	0x00006bed
    7550:	00006de1 	.word	0x00006de1
    7554:	00006d59 	.word	0x00006d59

00007558 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    7558:	b580      	push	{r7, lr}
    755a:	b082      	sub	sp, #8
    755c:	af00      	add	r7, sp, #0
    755e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7560:	687b      	ldr	r3, [r7, #4]
    7562:	68db      	ldr	r3, [r3, #12]
    7564:	4618      	mov	r0, r3
    7566:	4b03      	ldr	r3, [pc, #12]	; (7574 <_tc_timer_start+0x1c>)
    7568:	4798      	blx	r3
}
    756a:	bf00      	nop
    756c:	3708      	adds	r7, #8
    756e:	46bd      	mov	sp, r7
    7570:	bd80      	pop	{r7, pc}
    7572:	bf00      	nop
    7574:	00006d81 	.word	0x00006d81

00007578 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    7578:	b580      	push	{r7, lr}
    757a:	b082      	sub	sp, #8
    757c:	af00      	add	r7, sp, #0
    757e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7580:	687b      	ldr	r3, [r7, #4]
    7582:	68db      	ldr	r3, [r3, #12]
    7584:	4618      	mov	r0, r3
    7586:	4b03      	ldr	r3, [pc, #12]	; (7594 <_tc_timer_stop+0x1c>)
    7588:	4798      	blx	r3
}
    758a:	bf00      	nop
    758c:	3708      	adds	r7, #8
    758e:	46bd      	mov	sp, r7
    7590:	bd80      	pop	{r7, pc}
    7592:	bf00      	nop
    7594:	00006de1 	.word	0x00006de1

00007598 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7598:	b580      	push	{r7, lr}
    759a:	b084      	sub	sp, #16
    759c:	af00      	add	r7, sp, #0
    759e:	6078      	str	r0, [r7, #4]
    75a0:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    75a2:	687b      	ldr	r3, [r7, #4]
    75a4:	68db      	ldr	r3, [r3, #12]
    75a6:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    75a8:	68f8      	ldr	r0, [r7, #12]
    75aa:	4b14      	ldr	r3, [pc, #80]	; (75fc <_tc_timer_set_period+0x64>)
    75ac:	4798      	blx	r3
    75ae:	4603      	mov	r3, r0
    75b0:	2b02      	cmp	r3, #2
    75b2:	d105      	bne.n	75c0 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    75b4:	683a      	ldr	r2, [r7, #0]
    75b6:	2100      	movs	r1, #0
    75b8:	68f8      	ldr	r0, [r7, #12]
    75ba:	4b11      	ldr	r3, [pc, #68]	; (7600 <_tc_timer_set_period+0x68>)
    75bc:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    75be:	e019      	b.n	75f4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    75c0:	68f8      	ldr	r0, [r7, #12]
    75c2:	4b0e      	ldr	r3, [pc, #56]	; (75fc <_tc_timer_set_period+0x64>)
    75c4:	4798      	blx	r3
    75c6:	4603      	mov	r3, r0
    75c8:	2b00      	cmp	r3, #0
    75ca:	d107      	bne.n	75dc <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    75cc:	683b      	ldr	r3, [r7, #0]
    75ce:	b29b      	uxth	r3, r3
    75d0:	461a      	mov	r2, r3
    75d2:	2100      	movs	r1, #0
    75d4:	68f8      	ldr	r0, [r7, #12]
    75d6:	4b0b      	ldr	r3, [pc, #44]	; (7604 <_tc_timer_set_period+0x6c>)
    75d8:	4798      	blx	r3
}
    75da:	e00b      	b.n	75f4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    75dc:	68f8      	ldr	r0, [r7, #12]
    75de:	4b07      	ldr	r3, [pc, #28]	; (75fc <_tc_timer_set_period+0x64>)
    75e0:	4798      	blx	r3
    75e2:	4603      	mov	r3, r0
    75e4:	2b01      	cmp	r3, #1
    75e6:	d105      	bne.n	75f4 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    75e8:	683b      	ldr	r3, [r7, #0]
    75ea:	b2db      	uxtb	r3, r3
    75ec:	4619      	mov	r1, r3
    75ee:	68f8      	ldr	r0, [r7, #12]
    75f0:	4b05      	ldr	r3, [pc, #20]	; (7608 <_tc_timer_set_period+0x70>)
    75f2:	4798      	blx	r3
}
    75f4:	bf00      	nop
    75f6:	3710      	adds	r7, #16
    75f8:	46bd      	mov	sp, r7
    75fa:	bd80      	pop	{r7, pc}
    75fc:	00006e09 	.word	0x00006e09
    7600:	00006fc1 	.word	0x00006fc1
    7604:	00006f5d 	.word	0x00006f5d
    7608:	00006ee1 	.word	0x00006ee1

0000760c <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    760c:	b580      	push	{r7, lr}
    760e:	b084      	sub	sp, #16
    7610:	af00      	add	r7, sp, #0
    7612:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7614:	687b      	ldr	r3, [r7, #4]
    7616:	68db      	ldr	r3, [r3, #12]
    7618:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    761a:	68f8      	ldr	r0, [r7, #12]
    761c:	4b13      	ldr	r3, [pc, #76]	; (766c <_tc_timer_get_period+0x60>)
    761e:	4798      	blx	r3
    7620:	4603      	mov	r3, r0
    7622:	2b02      	cmp	r3, #2
    7624:	d105      	bne.n	7632 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    7626:	2100      	movs	r1, #0
    7628:	68f8      	ldr	r0, [r7, #12]
    762a:	4b11      	ldr	r3, [pc, #68]	; (7670 <_tc_timer_get_period+0x64>)
    762c:	4798      	blx	r3
    762e:	4603      	mov	r3, r0
    7630:	e017      	b.n	7662 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7632:	68f8      	ldr	r0, [r7, #12]
    7634:	4b0d      	ldr	r3, [pc, #52]	; (766c <_tc_timer_get_period+0x60>)
    7636:	4798      	blx	r3
    7638:	4603      	mov	r3, r0
    763a:	2b00      	cmp	r3, #0
    763c:	d105      	bne.n	764a <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    763e:	2100      	movs	r1, #0
    7640:	68f8      	ldr	r0, [r7, #12]
    7642:	4b0c      	ldr	r3, [pc, #48]	; (7674 <_tc_timer_get_period+0x68>)
    7644:	4798      	blx	r3
    7646:	4603      	mov	r3, r0
    7648:	e00b      	b.n	7662 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    764a:	68f8      	ldr	r0, [r7, #12]
    764c:	4b07      	ldr	r3, [pc, #28]	; (766c <_tc_timer_get_period+0x60>)
    764e:	4798      	blx	r3
    7650:	4603      	mov	r3, r0
    7652:	2b01      	cmp	r3, #1
    7654:	d104      	bne.n	7660 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    7656:	68f8      	ldr	r0, [r7, #12]
    7658:	4b07      	ldr	r3, [pc, #28]	; (7678 <_tc_timer_get_period+0x6c>)
    765a:	4798      	blx	r3
    765c:	4603      	mov	r3, r0
    765e:	e000      	b.n	7662 <_tc_timer_get_period+0x56>
	}

	return 0;
    7660:	2300      	movs	r3, #0
}
    7662:	4618      	mov	r0, r3
    7664:	3710      	adds	r7, #16
    7666:	46bd      	mov	sp, r7
    7668:	bd80      	pop	{r7, pc}
    766a:	bf00      	nop
    766c:	00006e09 	.word	0x00006e09
    7670:	00006ff1 	.word	0x00006ff1
    7674:	00006f91 	.word	0x00006f91
    7678:	00006f09 	.word	0x00006f09

0000767c <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    767c:	b580      	push	{r7, lr}
    767e:	b082      	sub	sp, #8
    7680:	af00      	add	r7, sp, #0
    7682:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7684:	687b      	ldr	r3, [r7, #4]
    7686:	68db      	ldr	r3, [r3, #12]
    7688:	4618      	mov	r0, r3
    768a:	4b03      	ldr	r3, [pc, #12]	; (7698 <_tc_timer_is_started+0x1c>)
    768c:	4798      	blx	r3
    768e:	4603      	mov	r3, r0
}
    7690:	4618      	mov	r0, r3
    7692:	3708      	adds	r7, #8
    7694:	46bd      	mov	sp, r7
    7696:	bd80      	pop	{r7, pc}
    7698:	00006da9 	.word	0x00006da9

0000769c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    769c:	b480      	push	{r7}
    769e:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    76a0:	4b02      	ldr	r3, [pc, #8]	; (76ac <_tc_get_timer+0x10>)
}
    76a2:	4618      	mov	r0, r3
    76a4:	46bd      	mov	sp, r7
    76a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    76aa:	4770      	bx	lr
    76ac:	20000188 	.word	0x20000188

000076b0 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    76b0:	b480      	push	{r7}
    76b2:	af00      	add	r7, sp, #0
	return NULL;
    76b4:	2300      	movs	r3, #0
}
    76b6:	4618      	mov	r0, r3
    76b8:	46bd      	mov	sp, r7
    76ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    76be:	4770      	bx	lr

000076c0 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    76c0:	b580      	push	{r7, lr}
    76c2:	b084      	sub	sp, #16
    76c4:	af00      	add	r7, sp, #0
    76c6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    76c8:	687b      	ldr	r3, [r7, #4]
    76ca:	68db      	ldr	r3, [r3, #12]
    76cc:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    76ce:	68f8      	ldr	r0, [r7, #12]
    76d0:	4b0e      	ldr	r3, [pc, #56]	; (770c <_tc_timer_set_irq+0x4c>)
    76d2:	4798      	blx	r3
    76d4:	4603      	mov	r3, r0
    76d6:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    76d8:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    76dc:	490c      	ldr	r1, [pc, #48]	; (7710 <_tc_timer_set_irq+0x50>)
    76de:	2001      	movs	r0, #1
    76e0:	4b0c      	ldr	r3, [pc, #48]	; (7714 <_tc_timer_set_irq+0x54>)
    76e2:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    76e4:	f997 200b 	ldrsb.w	r2, [r7, #11]
    76e8:	490b      	ldr	r1, [pc, #44]	; (7718 <_tc_timer_set_irq+0x58>)
    76ea:	4613      	mov	r3, r2
    76ec:	009b      	lsls	r3, r3, #2
    76ee:	4413      	add	r3, r2
    76f0:	009b      	lsls	r3, r3, #2
    76f2:	440b      	add	r3, r1
    76f4:	3302      	adds	r3, #2
    76f6:	f9b3 3000 	ldrsh.w	r3, [r3]
    76fa:	b2db      	uxtb	r3, r3
    76fc:	4618      	mov	r0, r3
    76fe:	4b07      	ldr	r3, [pc, #28]	; (771c <_tc_timer_set_irq+0x5c>)
    7700:	4798      	blx	r3
}
    7702:	bf00      	nop
    7704:	3710      	adds	r7, #16
    7706:	46bd      	mov	sp, r7
    7708:	bd80      	pop	{r7, pc}
    770a:	bf00      	nop
    770c:	0000786d 	.word	0x0000786d
    7710:	0000d238 	.word	0x0000d238
    7714:	00002dd1 	.word	0x00002dd1
    7718:	20000110 	.word	0x20000110
    771c:	000035b1 	.word	0x000035b1

00007720 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7720:	b580      	push	{r7, lr}
    7722:	b084      	sub	sp, #16
    7724:	af00      	add	r7, sp, #0
    7726:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7728:	687b      	ldr	r3, [r7, #4]
    772a:	68db      	ldr	r3, [r3, #12]
    772c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    772e:	68f8      	ldr	r0, [r7, #12]
    7730:	4b07      	ldr	r3, [pc, #28]	; (7750 <tc_interrupt_handler+0x30>)
    7732:	4798      	blx	r3
    7734:	4603      	mov	r3, r0
    7736:	2b00      	cmp	r3, #0
    7738:	d006      	beq.n	7748 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    773a:	68f8      	ldr	r0, [r7, #12]
    773c:	4b05      	ldr	r3, [pc, #20]	; (7754 <tc_interrupt_handler+0x34>)
    773e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7740:	687b      	ldr	r3, [r7, #4]
    7742:	681b      	ldr	r3, [r3, #0]
    7744:	6878      	ldr	r0, [r7, #4]
    7746:	4798      	blx	r3
	}
}
    7748:	bf00      	nop
    774a:	3710      	adds	r7, #16
    774c:	46bd      	mov	sp, r7
    774e:	bd80      	pop	{r7, pc}
    7750:	00006cb9 	.word	0x00006cb9
    7754:	00006ce1 	.word	0x00006ce1

00007758 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    7758:	b580      	push	{r7, lr}
    775a:	b084      	sub	sp, #16
    775c:	af00      	add	r7, sp, #0
    775e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7760:	687b      	ldr	r3, [r7, #4]
    7762:	691b      	ldr	r3, [r3, #16]
    7764:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7766:	68f8      	ldr	r0, [r7, #12]
    7768:	4b12      	ldr	r3, [pc, #72]	; (77b4 <tc_pwm_interrupt_handler+0x5c>)
    776a:	4798      	blx	r3
    776c:	4603      	mov	r3, r0
    776e:	2b00      	cmp	r3, #0
    7770:	d00a      	beq.n	7788 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7772:	68f8      	ldr	r0, [r7, #12]
    7774:	4b10      	ldr	r3, [pc, #64]	; (77b8 <tc_pwm_interrupt_handler+0x60>)
    7776:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    7778:	687b      	ldr	r3, [r7, #4]
    777a:	681b      	ldr	r3, [r3, #0]
    777c:	2b00      	cmp	r3, #0
    777e:	d003      	beq.n	7788 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    7780:	687b      	ldr	r3, [r7, #4]
    7782:	681b      	ldr	r3, [r3, #0]
    7784:	6878      	ldr	r0, [r7, #4]
    7786:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    7788:	68f8      	ldr	r0, [r7, #12]
    778a:	4b0c      	ldr	r3, [pc, #48]	; (77bc <tc_pwm_interrupt_handler+0x64>)
    778c:	4798      	blx	r3
    778e:	4603      	mov	r3, r0
    7790:	2b00      	cmp	r3, #0
    7792:	d00a      	beq.n	77aa <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    7794:	68f8      	ldr	r0, [r7, #12]
    7796:	4b0a      	ldr	r3, [pc, #40]	; (77c0 <tc_pwm_interrupt_handler+0x68>)
    7798:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    779a:	687b      	ldr	r3, [r7, #4]
    779c:	685b      	ldr	r3, [r3, #4]
    779e:	2b00      	cmp	r3, #0
    77a0:	d003      	beq.n	77aa <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    77a2:	687b      	ldr	r3, [r7, #4]
    77a4:	685b      	ldr	r3, [r3, #4]
    77a6:	6878      	ldr	r0, [r7, #4]
    77a8:	4798      	blx	r3
		}
	}
}
    77aa:	bf00      	nop
    77ac:	3710      	adds	r7, #16
    77ae:	46bd      	mov	sp, r7
    77b0:	bd80      	pop	{r7, pc}
    77b2:	bf00      	nop
    77b4:	00006cb9 	.word	0x00006cb9
    77b8:	00006ce1 	.word	0x00006ce1
    77bc:	00006d2f 	.word	0x00006d2f
    77c0:	00006cfb 	.word	0x00006cfb

000077c4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    77c4:	b580      	push	{r7, lr}
    77c6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    77c8:	4b03      	ldr	r3, [pc, #12]	; (77d8 <TC0_Handler+0x14>)
    77ca:	681b      	ldr	r3, [r3, #0]
    77cc:	4618      	mov	r0, r3
    77ce:	4b03      	ldr	r3, [pc, #12]	; (77dc <TC0_Handler+0x18>)
    77d0:	4798      	blx	r3
}
    77d2:	bf00      	nop
    77d4:	bd80      	pop	{r7, pc}
    77d6:	bf00      	nop
    77d8:	2000083c 	.word	0x2000083c
    77dc:	00007721 	.word	0x00007721

000077e0 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    77e0:	b580      	push	{r7, lr}
    77e2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    77e4:	4b03      	ldr	r3, [pc, #12]	; (77f4 <TC2_Handler+0x14>)
    77e6:	681b      	ldr	r3, [r3, #0]
    77e8:	4618      	mov	r0, r3
    77ea:	4b03      	ldr	r3, [pc, #12]	; (77f8 <TC2_Handler+0x18>)
    77ec:	4798      	blx	r3
}
    77ee:	bf00      	nop
    77f0:	bd80      	pop	{r7, pc}
    77f2:	bf00      	nop
    77f4:	20000840 	.word	0x20000840
    77f8:	00007721 	.word	0x00007721

000077fc <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    77fc:	b580      	push	{r7, lr}
    77fe:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    7800:	4b03      	ldr	r3, [pc, #12]	; (7810 <TC4_Handler+0x14>)
    7802:	681b      	ldr	r3, [r3, #0]
    7804:	4618      	mov	r0, r3
    7806:	4b03      	ldr	r3, [pc, #12]	; (7814 <TC4_Handler+0x18>)
    7808:	4798      	blx	r3
}
    780a:	bf00      	nop
    780c:	bd80      	pop	{r7, pc}
    780e:	bf00      	nop
    7810:	20000844 	.word	0x20000844
    7814:	00007721 	.word	0x00007721

00007818 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    7818:	b580      	push	{r7, lr}
    781a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    781c:	4b03      	ldr	r3, [pc, #12]	; (782c <TC5_Handler+0x14>)
    781e:	681b      	ldr	r3, [r3, #0]
    7820:	4618      	mov	r0, r3
    7822:	4b03      	ldr	r3, [pc, #12]	; (7830 <TC5_Handler+0x18>)
    7824:	4798      	blx	r3
}
    7826:	bf00      	nop
    7828:	bd80      	pop	{r7, pc}
    782a:	bf00      	nop
    782c:	20000848 	.word	0x20000848
    7830:	00007721 	.word	0x00007721

00007834 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    7834:	b580      	push	{r7, lr}
    7836:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    7838:	4b03      	ldr	r3, [pc, #12]	; (7848 <TC6_Handler+0x14>)
    783a:	681b      	ldr	r3, [r3, #0]
    783c:	4618      	mov	r0, r3
    783e:	4b03      	ldr	r3, [pc, #12]	; (784c <TC6_Handler+0x18>)
    7840:	4798      	blx	r3
}
    7842:	bf00      	nop
    7844:	bd80      	pop	{r7, pc}
    7846:	bf00      	nop
    7848:	2000084c 	.word	0x2000084c
    784c:	00007721 	.word	0x00007721

00007850 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    7850:	b580      	push	{r7, lr}
    7852:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    7854:	4b03      	ldr	r3, [pc, #12]	; (7864 <TC7_Handler+0x14>)
    7856:	681b      	ldr	r3, [r3, #0]
    7858:	4618      	mov	r0, r3
    785a:	4b03      	ldr	r3, [pc, #12]	; (7868 <TC7_Handler+0x18>)
    785c:	4798      	blx	r3
}
    785e:	bf00      	nop
    7860:	bd80      	pop	{r7, pc}
    7862:	bf00      	nop
    7864:	20000850 	.word	0x20000850
    7868:	00007759 	.word	0x00007759

0000786c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    786c:	b580      	push	{r7, lr}
    786e:	b084      	sub	sp, #16
    7870:	af00      	add	r7, sp, #0
    7872:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    7874:	6878      	ldr	r0, [r7, #4]
    7876:	4b13      	ldr	r3, [pc, #76]	; (78c4 <get_tc_index+0x58>)
    7878:	4798      	blx	r3
    787a:	4603      	mov	r3, r0
    787c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    787e:	2300      	movs	r3, #0
    7880:	73fb      	strb	r3, [r7, #15]
    7882:	e010      	b.n	78a6 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    7884:	7bfa      	ldrb	r2, [r7, #15]
    7886:	4910      	ldr	r1, [pc, #64]	; (78c8 <get_tc_index+0x5c>)
    7888:	4613      	mov	r3, r2
    788a:	009b      	lsls	r3, r3, #2
    788c:	4413      	add	r3, r2
    788e:	009b      	lsls	r3, r3, #2
    7890:	440b      	add	r3, r1
    7892:	781b      	ldrb	r3, [r3, #0]
    7894:	7bba      	ldrb	r2, [r7, #14]
    7896:	429a      	cmp	r2, r3
    7898:	d102      	bne.n	78a0 <get_tc_index+0x34>
			return i;
    789a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    789e:	e00d      	b.n	78bc <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    78a0:	7bfb      	ldrb	r3, [r7, #15]
    78a2:	3301      	adds	r3, #1
    78a4:	73fb      	strb	r3, [r7, #15]
    78a6:	7bfb      	ldrb	r3, [r7, #15]
    78a8:	2b05      	cmp	r3, #5
    78aa:	d9eb      	bls.n	7884 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    78ac:	f240 221d 	movw	r2, #541	; 0x21d
    78b0:	4906      	ldr	r1, [pc, #24]	; (78cc <get_tc_index+0x60>)
    78b2:	2000      	movs	r0, #0
    78b4:	4b06      	ldr	r3, [pc, #24]	; (78d0 <get_tc_index+0x64>)
    78b6:	4798      	blx	r3
	return -1;
    78b8:	f04f 33ff 	mov.w	r3, #4294967295
}
    78bc:	4618      	mov	r0, r3
    78be:	3710      	adds	r7, #16
    78c0:	46bd      	mov	sp, r7
    78c2:	bd80      	pop	{r7, pc}
    78c4:	00007971 	.word	0x00007971
    78c8:	20000110 	.word	0x20000110
    78cc:	0000d238 	.word	0x0000d238
    78d0:	00002dd1 	.word	0x00002dd1

000078d4 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    78d4:	b480      	push	{r7}
    78d6:	b083      	sub	sp, #12
    78d8:	af00      	add	r7, sp, #0
    78da:	6078      	str	r0, [r7, #4]
    78dc:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    78de:	687b      	ldr	r3, [r7, #4]
    78e0:	4a17      	ldr	r2, [pc, #92]	; (7940 <_tc_init_irq_param+0x6c>)
    78e2:	4293      	cmp	r3, r2
    78e4:	d102      	bne.n	78ec <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    78e6:	4a17      	ldr	r2, [pc, #92]	; (7944 <_tc_init_irq_param+0x70>)
    78e8:	683b      	ldr	r3, [r7, #0]
    78ea:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    78ec:	687b      	ldr	r3, [r7, #4]
    78ee:	4a16      	ldr	r2, [pc, #88]	; (7948 <_tc_init_irq_param+0x74>)
    78f0:	4293      	cmp	r3, r2
    78f2:	d102      	bne.n	78fa <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    78f4:	4a15      	ldr	r2, [pc, #84]	; (794c <_tc_init_irq_param+0x78>)
    78f6:	683b      	ldr	r3, [r7, #0]
    78f8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    78fa:	687b      	ldr	r3, [r7, #4]
    78fc:	4a14      	ldr	r2, [pc, #80]	; (7950 <_tc_init_irq_param+0x7c>)
    78fe:	4293      	cmp	r3, r2
    7900:	d102      	bne.n	7908 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    7902:	4a14      	ldr	r2, [pc, #80]	; (7954 <_tc_init_irq_param+0x80>)
    7904:	683b      	ldr	r3, [r7, #0]
    7906:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    7908:	687b      	ldr	r3, [r7, #4]
    790a:	4a13      	ldr	r2, [pc, #76]	; (7958 <_tc_init_irq_param+0x84>)
    790c:	4293      	cmp	r3, r2
    790e:	d102      	bne.n	7916 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    7910:	4a12      	ldr	r2, [pc, #72]	; (795c <_tc_init_irq_param+0x88>)
    7912:	683b      	ldr	r3, [r7, #0]
    7914:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    7916:	687b      	ldr	r3, [r7, #4]
    7918:	4a11      	ldr	r2, [pc, #68]	; (7960 <_tc_init_irq_param+0x8c>)
    791a:	4293      	cmp	r3, r2
    791c:	d102      	bne.n	7924 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    791e:	4a11      	ldr	r2, [pc, #68]	; (7964 <_tc_init_irq_param+0x90>)
    7920:	683b      	ldr	r3, [r7, #0]
    7922:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    7924:	687b      	ldr	r3, [r7, #4]
    7926:	4a10      	ldr	r2, [pc, #64]	; (7968 <_tc_init_irq_param+0x94>)
    7928:	4293      	cmp	r3, r2
    792a:	d102      	bne.n	7932 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    792c:	4a0f      	ldr	r2, [pc, #60]	; (796c <_tc_init_irq_param+0x98>)
    792e:	683b      	ldr	r3, [r7, #0]
    7930:	6013      	str	r3, [r2, #0]
	}
}
    7932:	bf00      	nop
    7934:	370c      	adds	r7, #12
    7936:	46bd      	mov	sp, r7
    7938:	f85d 7b04 	ldr.w	r7, [sp], #4
    793c:	4770      	bx	lr
    793e:	bf00      	nop
    7940:	40003800 	.word	0x40003800
    7944:	2000083c 	.word	0x2000083c
    7948:	4101a000 	.word	0x4101a000
    794c:	20000840 	.word	0x20000840
    7950:	42001400 	.word	0x42001400
    7954:	20000844 	.word	0x20000844
    7958:	42001800 	.word	0x42001800
    795c:	20000848 	.word	0x20000848
    7960:	43001400 	.word	0x43001400
    7964:	2000084c 	.word	0x2000084c
    7968:	43001800 	.word	0x43001800
    796c:	20000850 	.word	0x20000850

00007970 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    7970:	b4b0      	push	{r4, r5, r7}
    7972:	b08d      	sub	sp, #52	; 0x34
    7974:	af00      	add	r7, sp, #0
    7976:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7978:	4b13      	ldr	r3, [pc, #76]	; (79c8 <_get_hardware_offset+0x58>)
    797a:	f107 040c 	add.w	r4, r7, #12
    797e:	461d      	mov	r5, r3
    7980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7984:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7988:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    798c:	2300      	movs	r3, #0
    798e:	62fb      	str	r3, [r7, #44]	; 0x2c
    7990:	e010      	b.n	79b4 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7994:	009b      	lsls	r3, r3, #2
    7996:	f107 0230 	add.w	r2, r7, #48	; 0x30
    799a:	4413      	add	r3, r2
    799c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    79a0:	461a      	mov	r2, r3
    79a2:	687b      	ldr	r3, [r7, #4]
    79a4:	429a      	cmp	r2, r3
    79a6:	d102      	bne.n	79ae <_get_hardware_offset+0x3e>
			return i;
    79a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    79aa:	b2db      	uxtb	r3, r3
    79ac:	e006      	b.n	79bc <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    79ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    79b0:	3301      	adds	r3, #1
    79b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    79b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    79b6:	2b07      	cmp	r3, #7
    79b8:	d9eb      	bls.n	7992 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    79ba:	2300      	movs	r3, #0
}
    79bc:	4618      	mov	r0, r3
    79be:	3734      	adds	r7, #52	; 0x34
    79c0:	46bd      	mov	sp, r7
    79c2:	bcb0      	pop	{r4, r5, r7}
    79c4:	4770      	bx	lr
    79c6:	bf00      	nop
    79c8:	0000d24c 	.word	0x0000d24c

000079cc <__NVIC_EnableIRQ>:
{
    79cc:	b480      	push	{r7}
    79ce:	b083      	sub	sp, #12
    79d0:	af00      	add	r7, sp, #0
    79d2:	4603      	mov	r3, r0
    79d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    79d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    79da:	2b00      	cmp	r3, #0
    79dc:	db0b      	blt.n	79f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    79de:	4909      	ldr	r1, [pc, #36]	; (7a04 <__NVIC_EnableIRQ+0x38>)
    79e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    79e4:	095b      	lsrs	r3, r3, #5
    79e6:	88fa      	ldrh	r2, [r7, #6]
    79e8:	f002 021f 	and.w	r2, r2, #31
    79ec:	2001      	movs	r0, #1
    79ee:	fa00 f202 	lsl.w	r2, r0, r2
    79f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    79f6:	bf00      	nop
    79f8:	370c      	adds	r7, #12
    79fa:	46bd      	mov	sp, r7
    79fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a00:	4770      	bx	lr
    7a02:	bf00      	nop
    7a04:	e000e100 	.word	0xe000e100

00007a08 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    7a08:	b480      	push	{r7}
    7a0a:	b087      	sub	sp, #28
    7a0c:	af00      	add	r7, sp, #0
    7a0e:	60f8      	str	r0, [r7, #12]
    7a10:	460b      	mov	r3, r1
    7a12:	607a      	str	r2, [r7, #4]
    7a14:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    7a16:	7afa      	ldrb	r2, [r7, #11]
    7a18:	68f9      	ldr	r1, [r7, #12]
    7a1a:	4613      	mov	r3, r2
    7a1c:	009b      	lsls	r3, r3, #2
    7a1e:	4413      	add	r3, r2
    7a20:	009b      	lsls	r3, r3, #2
    7a22:	440b      	add	r3, r1
    7a24:	3340      	adds	r3, #64	; 0x40
    7a26:	681b      	ldr	r3, [r3, #0]
    7a28:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    7a2a:	697a      	ldr	r2, [r7, #20]
    7a2c:	687b      	ldr	r3, [r7, #4]
    7a2e:	4013      	ands	r3, r2
    7a30:	617b      	str	r3, [r7, #20]
	return tmp;
    7a32:	697b      	ldr	r3, [r7, #20]
}
    7a34:	4618      	mov	r0, r3
    7a36:	371c      	adds	r7, #28
    7a38:	46bd      	mov	sp, r7
    7a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a3e:	4770      	bx	lr

00007a40 <hri_oscctrl_get_STATUS_reg>:
{
    7a40:	b480      	push	{r7}
    7a42:	b085      	sub	sp, #20
    7a44:	af00      	add	r7, sp, #0
    7a46:	6078      	str	r0, [r7, #4]
    7a48:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7a4a:	687b      	ldr	r3, [r7, #4]
    7a4c:	691b      	ldr	r3, [r3, #16]
    7a4e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7a50:	68fa      	ldr	r2, [r7, #12]
    7a52:	683b      	ldr	r3, [r7, #0]
    7a54:	4013      	ands	r3, r2
    7a56:	60fb      	str	r3, [r7, #12]
	return tmp;
    7a58:	68fb      	ldr	r3, [r7, #12]
}
    7a5a:	4618      	mov	r0, r3
    7a5c:	3714      	adds	r7, #20
    7a5e:	46bd      	mov	sp, r7
    7a60:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a64:	4770      	bx	lr

00007a66 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    7a66:	b480      	push	{r7}
    7a68:	b085      	sub	sp, #20
    7a6a:	af00      	add	r7, sp, #0
    7a6c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7a6e:	687b      	ldr	r3, [r7, #4]
    7a70:	f893 3020 	ldrb.w	r3, [r3, #32]
    7a74:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    7a76:	7bfb      	ldrb	r3, [r7, #15]
    7a78:	f003 0301 	and.w	r3, r3, #1
    7a7c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7a7e:	7bfb      	ldrb	r3, [r7, #15]
    7a80:	2b00      	cmp	r3, #0
    7a82:	bf14      	ite	ne
    7a84:	2301      	movne	r3, #1
    7a86:	2300      	moveq	r3, #0
    7a88:	b2db      	uxtb	r3, r3
}
    7a8a:	4618      	mov	r0, r3
    7a8c:	3714      	adds	r7, #20
    7a8e:	46bd      	mov	sp, r7
    7a90:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a94:	4770      	bx	lr

00007a96 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7a96:	b480      	push	{r7}
    7a98:	b083      	sub	sp, #12
    7a9a:	af00      	add	r7, sp, #0
    7a9c:	6078      	str	r0, [r7, #4]
    7a9e:	460b      	mov	r3, r1
    7aa0:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    7aa2:	bf00      	nop
    7aa4:	687b      	ldr	r3, [r7, #4]
    7aa6:	789b      	ldrb	r3, [r3, #2]
    7aa8:	b2da      	uxtb	r2, r3
    7aaa:	78fb      	ldrb	r3, [r7, #3]
    7aac:	4013      	ands	r3, r2
    7aae:	b2db      	uxtb	r3, r3
    7ab0:	2b00      	cmp	r3, #0
    7ab2:	d1f7      	bne.n	7aa4 <hri_usb_wait_for_sync+0xe>
	};
}
    7ab4:	bf00      	nop
    7ab6:	370c      	adds	r7, #12
    7ab8:	46bd      	mov	sp, r7
    7aba:	f85d 7b04 	ldr.w	r7, [sp], #4
    7abe:	4770      	bx	lr

00007ac0 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7ac0:	b480      	push	{r7}
    7ac2:	b083      	sub	sp, #12
    7ac4:	af00      	add	r7, sp, #0
    7ac6:	6078      	str	r0, [r7, #4]
    7ac8:	460b      	mov	r3, r1
    7aca:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    7acc:	687b      	ldr	r3, [r7, #4]
    7ace:	789b      	ldrb	r3, [r3, #2]
    7ad0:	b2da      	uxtb	r2, r3
    7ad2:	78fb      	ldrb	r3, [r7, #3]
    7ad4:	4013      	ands	r3, r2
    7ad6:	b2db      	uxtb	r3, r3
    7ad8:	2b00      	cmp	r3, #0
    7ada:	bf14      	ite	ne
    7adc:	2301      	movne	r3, #1
    7ade:	2300      	moveq	r3, #0
    7ae0:	b2db      	uxtb	r3, r3
}
    7ae2:	4618      	mov	r0, r3
    7ae4:	370c      	adds	r7, #12
    7ae6:	46bd      	mov	sp, r7
    7ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aec:	4770      	bx	lr

00007aee <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    7aee:	b480      	push	{r7}
    7af0:	b085      	sub	sp, #20
    7af2:	af00      	add	r7, sp, #0
    7af4:	6078      	str	r0, [r7, #4]
    7af6:	460b      	mov	r3, r1
    7af8:	70fb      	strb	r3, [r7, #3]
    7afa:	4613      	mov	r3, r2
    7afc:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7afe:	78fb      	ldrb	r3, [r7, #3]
    7b00:	687a      	ldr	r2, [r7, #4]
    7b02:	3308      	adds	r3, #8
    7b04:	015b      	lsls	r3, r3, #5
    7b06:	4413      	add	r3, r2
    7b08:	3307      	adds	r3, #7
    7b0a:	781b      	ldrb	r3, [r3, #0]
    7b0c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7b0e:	7bfa      	ldrb	r2, [r7, #15]
    7b10:	78bb      	ldrb	r3, [r7, #2]
    7b12:	4013      	ands	r3, r2
    7b14:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7b16:	7bfb      	ldrb	r3, [r7, #15]
}
    7b18:	4618      	mov	r0, r3
    7b1a:	3714      	adds	r7, #20
    7b1c:	46bd      	mov	sp, r7
    7b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b22:	4770      	bx	lr

00007b24 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    7b24:	b480      	push	{r7}
    7b26:	b083      	sub	sp, #12
    7b28:	af00      	add	r7, sp, #0
    7b2a:	6078      	str	r0, [r7, #4]
    7b2c:	460b      	mov	r3, r1
    7b2e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7b30:	78fb      	ldrb	r3, [r7, #3]
    7b32:	687a      	ldr	r2, [r7, #4]
    7b34:	3308      	adds	r3, #8
    7b36:	015b      	lsls	r3, r3, #5
    7b38:	4413      	add	r3, r2
    7b3a:	3307      	adds	r3, #7
    7b3c:	781b      	ldrb	r3, [r3, #0]
    7b3e:	b2db      	uxtb	r3, r3
}
    7b40:	4618      	mov	r0, r3
    7b42:	370c      	adds	r7, #12
    7b44:	46bd      	mov	sp, r7
    7b46:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b4a:	4770      	bx	lr

00007b4c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    7b4c:	b480      	push	{r7}
    7b4e:	b083      	sub	sp, #12
    7b50:	af00      	add	r7, sp, #0
    7b52:	6078      	str	r0, [r7, #4]
    7b54:	460b      	mov	r3, r1
    7b56:	70fb      	strb	r3, [r7, #3]
    7b58:	4613      	mov	r3, r2
    7b5a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7b5c:	78fb      	ldrb	r3, [r7, #3]
    7b5e:	687a      	ldr	r2, [r7, #4]
    7b60:	3308      	adds	r3, #8
    7b62:	015b      	lsls	r3, r3, #5
    7b64:	4413      	add	r3, r2
    7b66:	3307      	adds	r3, #7
    7b68:	78ba      	ldrb	r2, [r7, #2]
    7b6a:	701a      	strb	r2, [r3, #0]
}
    7b6c:	bf00      	nop
    7b6e:	370c      	adds	r7, #12
    7b70:	46bd      	mov	sp, r7
    7b72:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b76:	4770      	bx	lr

00007b78 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    7b78:	b480      	push	{r7}
    7b7a:	b083      	sub	sp, #12
    7b7c:	af00      	add	r7, sp, #0
    7b7e:	6078      	str	r0, [r7, #4]
    7b80:	460b      	mov	r3, r1
    7b82:	70fb      	strb	r3, [r7, #3]
    7b84:	4613      	mov	r3, r2
    7b86:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7b88:	78fb      	ldrb	r3, [r7, #3]
    7b8a:	687a      	ldr	r2, [r7, #4]
    7b8c:	3308      	adds	r3, #8
    7b8e:	015b      	lsls	r3, r3, #5
    7b90:	4413      	add	r3, r2
    7b92:	3305      	adds	r3, #5
    7b94:	78ba      	ldrb	r2, [r7, #2]
    7b96:	701a      	strb	r2, [r3, #0]
}
    7b98:	bf00      	nop
    7b9a:	370c      	adds	r7, #12
    7b9c:	46bd      	mov	sp, r7
    7b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ba2:	4770      	bx	lr

00007ba4 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    7ba4:	b480      	push	{r7}
    7ba6:	b083      	sub	sp, #12
    7ba8:	af00      	add	r7, sp, #0
    7baa:	6078      	str	r0, [r7, #4]
    7bac:	460b      	mov	r3, r1
    7bae:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    7bb0:	78fb      	ldrb	r3, [r7, #3]
    7bb2:	687a      	ldr	r2, [r7, #4]
    7bb4:	3308      	adds	r3, #8
    7bb6:	015b      	lsls	r3, r3, #5
    7bb8:	4413      	add	r3, r2
    7bba:	3306      	adds	r3, #6
    7bbc:	781b      	ldrb	r3, [r3, #0]
    7bbe:	b2db      	uxtb	r3, r3
}
    7bc0:	4618      	mov	r0, r3
    7bc2:	370c      	adds	r7, #12
    7bc4:	46bd      	mov	sp, r7
    7bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bca:	4770      	bx	lr

00007bcc <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    7bcc:	b480      	push	{r7}
    7bce:	b083      	sub	sp, #12
    7bd0:	af00      	add	r7, sp, #0
    7bd2:	6078      	str	r0, [r7, #4]
    7bd4:	460b      	mov	r3, r1
    7bd6:	70fb      	strb	r3, [r7, #3]
    7bd8:	4613      	mov	r3, r2
    7bda:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7bdc:	78fb      	ldrb	r3, [r7, #3]
    7bde:	687a      	ldr	r2, [r7, #4]
    7be0:	3308      	adds	r3, #8
    7be2:	015b      	lsls	r3, r3, #5
    7be4:	4413      	add	r3, r2
    7be6:	3304      	adds	r3, #4
    7be8:	78ba      	ldrb	r2, [r7, #2]
    7bea:	701a      	strb	r2, [r3, #0]
}
    7bec:	bf00      	nop
    7bee:	370c      	adds	r7, #12
    7bf0:	46bd      	mov	sp, r7
    7bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bf6:	4770      	bx	lr

00007bf8 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    7bf8:	b480      	push	{r7}
    7bfa:	b083      	sub	sp, #12
    7bfc:	af00      	add	r7, sp, #0
    7bfe:	6078      	str	r0, [r7, #4]
    7c00:	460b      	mov	r3, r1
    7c02:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    7c04:	78fb      	ldrb	r3, [r7, #3]
    7c06:	687a      	ldr	r2, [r7, #4]
    7c08:	015b      	lsls	r3, r3, #5
    7c0a:	4413      	add	r3, r2
    7c0c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7c10:	2210      	movs	r2, #16
    7c12:	701a      	strb	r2, [r3, #0]
}
    7c14:	bf00      	nop
    7c16:	370c      	adds	r7, #12
    7c18:	46bd      	mov	sp, r7
    7c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c1e:	4770      	bx	lr

00007c20 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    7c20:	b480      	push	{r7}
    7c22:	b083      	sub	sp, #12
    7c24:	af00      	add	r7, sp, #0
    7c26:	6078      	str	r0, [r7, #4]
    7c28:	460b      	mov	r3, r1
    7c2a:	70fb      	strb	r3, [r7, #3]
    7c2c:	4613      	mov	r3, r2
    7c2e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7c30:	78fb      	ldrb	r3, [r7, #3]
    7c32:	687a      	ldr	r2, [r7, #4]
    7c34:	015b      	lsls	r3, r3, #5
    7c36:	4413      	add	r3, r2
    7c38:	f203 1309 	addw	r3, r3, #265	; 0x109
    7c3c:	78ba      	ldrb	r2, [r7, #2]
    7c3e:	701a      	strb	r2, [r3, #0]
}
    7c40:	bf00      	nop
    7c42:	370c      	adds	r7, #12
    7c44:	46bd      	mov	sp, r7
    7c46:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c4a:	4770      	bx	lr

00007c4c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    7c4c:	b480      	push	{r7}
    7c4e:	b083      	sub	sp, #12
    7c50:	af00      	add	r7, sp, #0
    7c52:	6078      	str	r0, [r7, #4]
    7c54:	460b      	mov	r3, r1
    7c56:	70fb      	strb	r3, [r7, #3]
    7c58:	4613      	mov	r3, r2
    7c5a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7c5c:	78fb      	ldrb	r3, [r7, #3]
    7c5e:	687a      	ldr	r2, [r7, #4]
    7c60:	015b      	lsls	r3, r3, #5
    7c62:	4413      	add	r3, r2
    7c64:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7c68:	78ba      	ldrb	r2, [r7, #2]
    7c6a:	701a      	strb	r2, [r3, #0]
}
    7c6c:	bf00      	nop
    7c6e:	370c      	adds	r7, #12
    7c70:	46bd      	mov	sp, r7
    7c72:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c76:	4770      	bx	lr

00007c78 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7c78:	b480      	push	{r7}
    7c7a:	b085      	sub	sp, #20
    7c7c:	af00      	add	r7, sp, #0
    7c7e:	6078      	str	r0, [r7, #4]
    7c80:	460b      	mov	r3, r1
    7c82:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7c84:	78fb      	ldrb	r3, [r7, #3]
    7c86:	687a      	ldr	r2, [r7, #4]
    7c88:	3308      	adds	r3, #8
    7c8a:	015b      	lsls	r3, r3, #5
    7c8c:	4413      	add	r3, r2
    7c8e:	781b      	ldrb	r3, [r3, #0]
    7c90:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    7c92:	7bfb      	ldrb	r3, [r7, #15]
    7c94:	f003 0307 	and.w	r3, r3, #7
    7c98:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7c9a:	7bfb      	ldrb	r3, [r7, #15]
}
    7c9c:	4618      	mov	r0, r3
    7c9e:	3714      	adds	r7, #20
    7ca0:	46bd      	mov	sp, r7
    7ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ca6:	4770      	bx	lr

00007ca8 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7ca8:	b480      	push	{r7}
    7caa:	b085      	sub	sp, #20
    7cac:	af00      	add	r7, sp, #0
    7cae:	6078      	str	r0, [r7, #4]
    7cb0:	460b      	mov	r3, r1
    7cb2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7cb4:	78fb      	ldrb	r3, [r7, #3]
    7cb6:	687a      	ldr	r2, [r7, #4]
    7cb8:	3308      	adds	r3, #8
    7cba:	015b      	lsls	r3, r3, #5
    7cbc:	4413      	add	r3, r2
    7cbe:	781b      	ldrb	r3, [r3, #0]
    7cc0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    7cc2:	7bfb      	ldrb	r3, [r7, #15]
    7cc4:	091b      	lsrs	r3, r3, #4
    7cc6:	b2db      	uxtb	r3, r3
    7cc8:	f003 0307 	and.w	r3, r3, #7
    7ccc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7cce:	7bfb      	ldrb	r3, [r7, #15]
}
    7cd0:	4618      	mov	r0, r3
    7cd2:	3714      	adds	r7, #20
    7cd4:	46bd      	mov	sp, r7
    7cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cda:	4770      	bx	lr

00007cdc <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    7cdc:	b480      	push	{r7}
    7cde:	b083      	sub	sp, #12
    7ce0:	af00      	add	r7, sp, #0
    7ce2:	6078      	str	r0, [r7, #4]
    7ce4:	460b      	mov	r3, r1
    7ce6:	70fb      	strb	r3, [r7, #3]
    7ce8:	4613      	mov	r3, r2
    7cea:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    7cec:	78fb      	ldrb	r3, [r7, #3]
    7cee:	687a      	ldr	r2, [r7, #4]
    7cf0:	3308      	adds	r3, #8
    7cf2:	015b      	lsls	r3, r3, #5
    7cf4:	4413      	add	r3, r2
    7cf6:	78ba      	ldrb	r2, [r7, #2]
    7cf8:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    7cfa:	bf00      	nop
    7cfc:	370c      	adds	r7, #12
    7cfe:	46bd      	mov	sp, r7
    7d00:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d04:	4770      	bx	lr

00007d06 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    7d06:	b480      	push	{r7}
    7d08:	b083      	sub	sp, #12
    7d0a:	af00      	add	r7, sp, #0
    7d0c:	6078      	str	r0, [r7, #4]
    7d0e:	460b      	mov	r3, r1
    7d10:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7d12:	78fb      	ldrb	r3, [r7, #3]
    7d14:	687a      	ldr	r2, [r7, #4]
    7d16:	3308      	adds	r3, #8
    7d18:	015b      	lsls	r3, r3, #5
    7d1a:	4413      	add	r3, r2
    7d1c:	781b      	ldrb	r3, [r3, #0]
    7d1e:	b2db      	uxtb	r3, r3
}
    7d20:	4618      	mov	r0, r3
    7d22:	370c      	adds	r7, #12
    7d24:	46bd      	mov	sp, r7
    7d26:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d2a:	4770      	bx	lr

00007d2c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    7d2c:	b480      	push	{r7}
    7d2e:	b083      	sub	sp, #12
    7d30:	af00      	add	r7, sp, #0
    7d32:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    7d34:	687b      	ldr	r3, [r7, #4]
    7d36:	8b9b      	ldrh	r3, [r3, #28]
    7d38:	b29b      	uxth	r3, r3
}
    7d3a:	4618      	mov	r0, r3
    7d3c:	370c      	adds	r7, #12
    7d3e:	46bd      	mov	sp, r7
    7d40:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d44:	4770      	bx	lr

00007d46 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    7d46:	b480      	push	{r7}
    7d48:	b083      	sub	sp, #12
    7d4a:	af00      	add	r7, sp, #0
    7d4c:	6078      	str	r0, [r7, #4]
    7d4e:	460b      	mov	r3, r1
    7d50:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7d52:	687b      	ldr	r3, [r7, #4]
    7d54:	887a      	ldrh	r2, [r7, #2]
    7d56:	839a      	strh	r2, [r3, #28]
}
    7d58:	bf00      	nop
    7d5a:	370c      	adds	r7, #12
    7d5c:	46bd      	mov	sp, r7
    7d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d62:	4770      	bx	lr

00007d64 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7d64:	b480      	push	{r7}
    7d66:	b083      	sub	sp, #12
    7d68:	af00      	add	r7, sp, #0
    7d6a:	6078      	str	r0, [r7, #4]
    7d6c:	460b      	mov	r3, r1
    7d6e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7d70:	687b      	ldr	r3, [r7, #4]
    7d72:	887a      	ldrh	r2, [r7, #2]
    7d74:	831a      	strh	r2, [r3, #24]
}
    7d76:	bf00      	nop
    7d78:	370c      	adds	r7, #12
    7d7a:	46bd      	mov	sp, r7
    7d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d80:	4770      	bx	lr

00007d82 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    7d82:	b480      	push	{r7}
    7d84:	b083      	sub	sp, #12
    7d86:	af00      	add	r7, sp, #0
    7d88:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    7d8a:	687b      	ldr	r3, [r7, #4]
    7d8c:	8b1b      	ldrh	r3, [r3, #24]
    7d8e:	b29b      	uxth	r3, r3
}
    7d90:	4618      	mov	r0, r3
    7d92:	370c      	adds	r7, #12
    7d94:	46bd      	mov	sp, r7
    7d96:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d9a:	4770      	bx	lr

00007d9c <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7d9c:	b480      	push	{r7}
    7d9e:	b083      	sub	sp, #12
    7da0:	af00      	add	r7, sp, #0
    7da2:	6078      	str	r0, [r7, #4]
    7da4:	460b      	mov	r3, r1
    7da6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7da8:	687b      	ldr	r3, [r7, #4]
    7daa:	887a      	ldrh	r2, [r7, #2]
    7dac:	829a      	strh	r2, [r3, #20]
}
    7dae:	bf00      	nop
    7db0:	370c      	adds	r7, #12
    7db2:	46bd      	mov	sp, r7
    7db4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7db8:	4770      	bx	lr

00007dba <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    7dba:	b480      	push	{r7}
    7dbc:	b085      	sub	sp, #20
    7dbe:	af00      	add	r7, sp, #0
    7dc0:	6078      	str	r0, [r7, #4]
    7dc2:	460b      	mov	r3, r1
    7dc4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    7dc6:	687b      	ldr	r3, [r7, #4]
    7dc8:	789b      	ldrb	r3, [r3, #2]
    7dca:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7dcc:	7bfa      	ldrb	r2, [r7, #15]
    7dce:	78fb      	ldrb	r3, [r7, #3]
    7dd0:	4013      	ands	r3, r2
    7dd2:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7dd4:	7bfb      	ldrb	r3, [r7, #15]
}
    7dd6:	4618      	mov	r0, r3
    7dd8:	3714      	adds	r7, #20
    7dda:	46bd      	mov	sp, r7
    7ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7de0:	4770      	bx	lr
	...

00007de4 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7de4:	b580      	push	{r7, lr}
    7de6:	b082      	sub	sp, #8
    7de8:	af00      	add	r7, sp, #0
    7dea:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    7dec:	687b      	ldr	r3, [r7, #4]
    7dee:	781b      	ldrb	r3, [r3, #0]
    7df0:	b2db      	uxtb	r3, r3
    7df2:	f023 0302 	bic.w	r3, r3, #2
    7df6:	b2da      	uxtb	r2, r3
    7df8:	687b      	ldr	r3, [r7, #4]
    7dfa:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    7dfc:	2103      	movs	r1, #3
    7dfe:	6878      	ldr	r0, [r7, #4]
    7e00:	4b02      	ldr	r3, [pc, #8]	; (7e0c <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    7e02:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    7e04:	bf00      	nop
    7e06:	3708      	adds	r7, #8
    7e08:	46bd      	mov	sp, r7
    7e0a:	bd80      	pop	{r7, pc}
    7e0c:	00007a97 	.word	0x00007a97

00007e10 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    7e10:	b580      	push	{r7, lr}
    7e12:	b084      	sub	sp, #16
    7e14:	af00      	add	r7, sp, #0
    7e16:	6078      	str	r0, [r7, #4]
    7e18:	460b      	mov	r3, r1
    7e1a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    7e1c:	2103      	movs	r1, #3
    7e1e:	6878      	ldr	r0, [r7, #4]
    7e20:	4b06      	ldr	r3, [pc, #24]	; (7e3c <hri_usb_get_CTRLA_reg+0x2c>)
    7e22:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    7e24:	687b      	ldr	r3, [r7, #4]
    7e26:	781b      	ldrb	r3, [r3, #0]
    7e28:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7e2a:	7bfa      	ldrb	r2, [r7, #15]
    7e2c:	78fb      	ldrb	r3, [r7, #3]
    7e2e:	4013      	ands	r3, r2
    7e30:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7e32:	7bfb      	ldrb	r3, [r7, #15]
}
    7e34:	4618      	mov	r0, r3
    7e36:	3710      	adds	r7, #16
    7e38:	46bd      	mov	sp, r7
    7e3a:	bd80      	pop	{r7, pc}
    7e3c:	00007a97 	.word	0x00007a97

00007e40 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    7e40:	b580      	push	{r7, lr}
    7e42:	b082      	sub	sp, #8
    7e44:	af00      	add	r7, sp, #0
    7e46:	6078      	str	r0, [r7, #4]
    7e48:	460b      	mov	r3, r1
    7e4a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    7e4c:	687b      	ldr	r3, [r7, #4]
    7e4e:	78fa      	ldrb	r2, [r7, #3]
    7e50:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    7e52:	2103      	movs	r1, #3
    7e54:	6878      	ldr	r0, [r7, #4]
    7e56:	4b03      	ldr	r3, [pc, #12]	; (7e64 <hri_usb_write_CTRLA_reg+0x24>)
    7e58:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    7e5a:	bf00      	nop
    7e5c:	3708      	adds	r7, #8
    7e5e:	46bd      	mov	sp, r7
    7e60:	bd80      	pop	{r7, pc}
    7e62:	bf00      	nop
    7e64:	00007a97 	.word	0x00007a97

00007e68 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    7e68:	b580      	push	{r7, lr}
    7e6a:	b082      	sub	sp, #8
    7e6c:	af00      	add	r7, sp, #0
    7e6e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    7e70:	2103      	movs	r1, #3
    7e72:	6878      	ldr	r0, [r7, #4]
    7e74:	4b04      	ldr	r3, [pc, #16]	; (7e88 <hri_usb_read_CTRLA_reg+0x20>)
    7e76:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    7e78:	687b      	ldr	r3, [r7, #4]
    7e7a:	781b      	ldrb	r3, [r3, #0]
    7e7c:	b2db      	uxtb	r3, r3
}
    7e7e:	4618      	mov	r0, r3
    7e80:	3708      	adds	r7, #8
    7e82:	46bd      	mov	sp, r7
    7e84:	bd80      	pop	{r7, pc}
    7e86:	bf00      	nop
    7e88:	00007a97 	.word	0x00007a97

00007e8c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    7e8c:	b480      	push	{r7}
    7e8e:	b083      	sub	sp, #12
    7e90:	af00      	add	r7, sp, #0
    7e92:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    7e94:	687b      	ldr	r3, [r7, #4]
    7e96:	891b      	ldrh	r3, [r3, #8]
    7e98:	b29b      	uxth	r3, r3
    7e9a:	f023 0301 	bic.w	r3, r3, #1
    7e9e:	b29a      	uxth	r2, r3
    7ea0:	687b      	ldr	r3, [r7, #4]
    7ea2:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    7ea4:	bf00      	nop
    7ea6:	370c      	adds	r7, #12
    7ea8:	46bd      	mov	sp, r7
    7eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eae:	4770      	bx	lr

00007eb0 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    7eb0:	b480      	push	{r7}
    7eb2:	b083      	sub	sp, #12
    7eb4:	af00      	add	r7, sp, #0
    7eb6:	6078      	str	r0, [r7, #4]
    7eb8:	460b      	mov	r3, r1
    7eba:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    7ebc:	687b      	ldr	r3, [r7, #4]
    7ebe:	887a      	ldrh	r2, [r7, #2]
    7ec0:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    7ec2:	bf00      	nop
    7ec4:	370c      	adds	r7, #12
    7ec6:	46bd      	mov	sp, r7
    7ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ecc:	4770      	bx	lr

00007ece <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    7ece:	b480      	push	{r7}
    7ed0:	b083      	sub	sp, #12
    7ed2:	af00      	add	r7, sp, #0
    7ed4:	6078      	str	r0, [r7, #4]
    7ed6:	460b      	mov	r3, r1
    7ed8:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    7eda:	687b      	ldr	r3, [r7, #4]
    7edc:	78fa      	ldrb	r2, [r7, #3]
    7ede:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    7ee0:	bf00      	nop
    7ee2:	370c      	adds	r7, #12
    7ee4:	46bd      	mov	sp, r7
    7ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eea:	4770      	bx	lr

00007eec <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    7eec:	b480      	push	{r7}
    7eee:	b083      	sub	sp, #12
    7ef0:	af00      	add	r7, sp, #0
    7ef2:	6078      	str	r0, [r7, #4]
    7ef4:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    7ef6:	687b      	ldr	r3, [r7, #4]
    7ef8:	683a      	ldr	r2, [r7, #0]
    7efa:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    7efc:	bf00      	nop
    7efe:	370c      	adds	r7, #12
    7f00:	46bd      	mov	sp, r7
    7f02:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f06:	4770      	bx	lr

00007f08 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    7f08:	b480      	push	{r7}
    7f0a:	b083      	sub	sp, #12
    7f0c:	af00      	add	r7, sp, #0
    7f0e:	6078      	str	r0, [r7, #4]
    7f10:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    7f12:	2300      	movs	r3, #0
}
    7f14:	4618      	mov	r0, r3
    7f16:	370c      	adds	r7, #12
    7f18:	46bd      	mov	sp, r7
    7f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f1e:	4770      	bx	lr

00007f20 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    7f20:	b480      	push	{r7}
    7f22:	b085      	sub	sp, #20
    7f24:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    7f26:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7f2a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    7f2c:	4b28      	ldr	r3, [pc, #160]	; (7fd0 <_usb_load_calib+0xb0>)
    7f2e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    7f30:	f003 031f 	and.w	r3, r3, #31
    7f34:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    7f36:	4b26      	ldr	r3, [pc, #152]	; (7fd0 <_usb_load_calib+0xb0>)
    7f38:	681b      	ldr	r3, [r3, #0]
    7f3a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    7f3c:	f003 031f 	and.w	r3, r3, #31
    7f40:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    7f42:	4b23      	ldr	r3, [pc, #140]	; (7fd0 <_usb_load_calib+0xb0>)
    7f44:	681b      	ldr	r3, [r3, #0]
    7f46:	0a9b      	lsrs	r3, r3, #10
    7f48:	f003 0307 	and.w	r3, r3, #7
    7f4c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    7f4e:	68fb      	ldr	r3, [r7, #12]
    7f50:	2b00      	cmp	r3, #0
    7f52:	d002      	beq.n	7f5a <_usb_load_calib+0x3a>
    7f54:	68fb      	ldr	r3, [r7, #12]
    7f56:	2b1f      	cmp	r3, #31
    7f58:	d101      	bne.n	7f5e <_usb_load_calib+0x3e>
		pad_transn = 9;
    7f5a:	2309      	movs	r3, #9
    7f5c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    7f5e:	68bb      	ldr	r3, [r7, #8]
    7f60:	2b00      	cmp	r3, #0
    7f62:	d002      	beq.n	7f6a <_usb_load_calib+0x4a>
    7f64:	68bb      	ldr	r3, [r7, #8]
    7f66:	2b1f      	cmp	r3, #31
    7f68:	d101      	bne.n	7f6e <_usb_load_calib+0x4e>
		pad_transp = 25;
    7f6a:	2319      	movs	r3, #25
    7f6c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    7f6e:	687b      	ldr	r3, [r7, #4]
    7f70:	2b00      	cmp	r3, #0
    7f72:	d002      	beq.n	7f7a <_usb_load_calib+0x5a>
    7f74:	687b      	ldr	r3, [r7, #4]
    7f76:	2b07      	cmp	r3, #7
    7f78:	d101      	bne.n	7f7e <_usb_load_calib+0x5e>
		pad_trim = 6;
    7f7a:	2306      	movs	r3, #6
    7f7c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    7f7e:	68fb      	ldr	r3, [r7, #12]
    7f80:	b29b      	uxth	r3, r3
    7f82:	019b      	lsls	r3, r3, #6
    7f84:	b29b      	uxth	r3, r3
    7f86:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    7f8a:	b29a      	uxth	r2, r3
    7f8c:	68bb      	ldr	r3, [r7, #8]
    7f8e:	b29b      	uxth	r3, r3
    7f90:	f003 031f 	and.w	r3, r3, #31
    7f94:	b29b      	uxth	r3, r3
    7f96:	4313      	orrs	r3, r2
    7f98:	b29a      	uxth	r2, r3
    7f9a:	687b      	ldr	r3, [r7, #4]
    7f9c:	b29b      	uxth	r3, r3
    7f9e:	031b      	lsls	r3, r3, #12
    7fa0:	b29b      	uxth	r3, r3
    7fa2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    7fa6:	b29b      	uxth	r3, r3
    7fa8:	4313      	orrs	r3, r2
    7faa:	b29a      	uxth	r2, r3
    7fac:	683b      	ldr	r3, [r7, #0]
    7fae:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    7fb0:	683a      	ldr	r2, [r7, #0]
    7fb2:	78d3      	ldrb	r3, [r2, #3]
    7fb4:	f043 0303 	orr.w	r3, r3, #3
    7fb8:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    7fba:	683a      	ldr	r2, [r7, #0]
    7fbc:	78d3      	ldrb	r3, [r2, #3]
    7fbe:	f043 030c 	orr.w	r3, r3, #12
    7fc2:	70d3      	strb	r3, [r2, #3]
}
    7fc4:	bf00      	nop
    7fc6:	3714      	adds	r7, #20
    7fc8:	46bd      	mov	sp, r7
    7fca:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fce:	4770      	bx	lr
    7fd0:	00800084 	.word	0x00800084

00007fd4 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    7fd4:	b580      	push	{r7, lr}
    7fd6:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    7fd8:	bf00      	nop
    7fda:	2203      	movs	r2, #3
    7fdc:	2100      	movs	r1, #0
    7fde:	4804      	ldr	r0, [pc, #16]	; (7ff0 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    7fe0:	4b04      	ldr	r3, [pc, #16]	; (7ff4 <_usb_d_dev_wait_dpll_rdy+0x20>)
    7fe2:	4798      	blx	r3
    7fe4:	4603      	mov	r3, r0
    7fe6:	2b03      	cmp	r3, #3
    7fe8:	d1f7      	bne.n	7fda <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    7fea:	bf00      	nop
    7fec:	bd80      	pop	{r7, pc}
    7fee:	bf00      	nop
    7ff0:	40001000 	.word	0x40001000
    7ff4:	00007a09 	.word	0x00007a09

00007ff8 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    7ff8:	b580      	push	{r7, lr}
    7ffa:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    7ffc:	480e      	ldr	r0, [pc, #56]	; (8038 <_usb_d_dev_wait_dfll_rdy+0x40>)
    7ffe:	4b0f      	ldr	r3, [pc, #60]	; (803c <_usb_d_dev_wait_dfll_rdy+0x44>)
    8000:	4798      	blx	r3
    8002:	4603      	mov	r3, r0
    8004:	2b00      	cmp	r3, #0
    8006:	d00a      	beq.n	801e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8008:	bf00      	nop
    800a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    800e:	480a      	ldr	r0, [pc, #40]	; (8038 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8010:	4b0b      	ldr	r3, [pc, #44]	; (8040 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8012:	4798      	blx	r3
    8014:	4603      	mov	r3, r0
    8016:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    801a:	d1f6      	bne.n	800a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    801c:	e009      	b.n	8032 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    801e:	bf00      	nop
    8020:	f44f 7180 	mov.w	r1, #256	; 0x100
    8024:	4804      	ldr	r0, [pc, #16]	; (8038 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8026:	4b06      	ldr	r3, [pc, #24]	; (8040 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8028:	4798      	blx	r3
    802a:	4603      	mov	r3, r0
    802c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8030:	d1f6      	bne.n	8020 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8032:	bf00      	nop
    8034:	bd80      	pop	{r7, pc}
    8036:	bf00      	nop
    8038:	40001000 	.word	0x40001000
    803c:	00007a67 	.word	0x00007a67
    8040:	00007a41 	.word	0x00007a41

00008044 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8044:	b580      	push	{r7, lr}
    8046:	b082      	sub	sp, #8
    8048:	af00      	add	r7, sp, #0
    804a:	4603      	mov	r3, r0
    804c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    804e:	79fb      	ldrb	r3, [r7, #7]
    8050:	2b00      	cmp	r3, #0
    8052:	d102      	bne.n	805a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8054:	4b05      	ldr	r3, [pc, #20]	; (806c <_usb_d_dev_wait_clk_rdy+0x28>)
    8056:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8058:	e004      	b.n	8064 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    805a:	79fb      	ldrb	r3, [r7, #7]
    805c:	2b01      	cmp	r3, #1
    805e:	d101      	bne.n	8064 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8060:	4b03      	ldr	r3, [pc, #12]	; (8070 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8062:	4798      	blx	r3
}
    8064:	bf00      	nop
    8066:	3708      	adds	r7, #8
    8068:	46bd      	mov	sp, r7
    806a:	bd80      	pop	{r7, pc}
    806c:	00007ff9 	.word	0x00007ff9
    8070:	00007fd5 	.word	0x00007fd5

00008074 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8074:	b580      	push	{r7, lr}
    8076:	b082      	sub	sp, #8
    8078:	af00      	add	r7, sp, #0
    807a:	4603      	mov	r3, r0
    807c:	6039      	str	r1, [r7, #0]
    807e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8080:	683b      	ldr	r3, [r7, #0]
    8082:	b2da      	uxtb	r2, r3
    8084:	79fb      	ldrb	r3, [r7, #7]
    8086:	4619      	mov	r1, r3
    8088:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    808c:	4b02      	ldr	r3, [pc, #8]	; (8098 <_usbd_ep_int_ack+0x24>)
    808e:	4798      	blx	r3
}
    8090:	bf00      	nop
    8092:	3708      	adds	r7, #8
    8094:	46bd      	mov	sp, r7
    8096:	bd80      	pop	{r7, pc}
    8098:	00007b4d 	.word	0x00007b4d

0000809c <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    809c:	b580      	push	{r7, lr}
    809e:	b082      	sub	sp, #8
    80a0:	af00      	add	r7, sp, #0
    80a2:	4603      	mov	r3, r0
    80a4:	6039      	str	r1, [r7, #0]
    80a6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    80a8:	683b      	ldr	r3, [r7, #0]
    80aa:	b2da      	uxtb	r2, r3
    80ac:	79fb      	ldrb	r3, [r7, #7]
    80ae:	4619      	mov	r1, r3
    80b0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    80b4:	4b02      	ldr	r3, [pc, #8]	; (80c0 <_usbd_ep_int_en+0x24>)
    80b6:	4798      	blx	r3
}
    80b8:	bf00      	nop
    80ba:	3708      	adds	r7, #8
    80bc:	46bd      	mov	sp, r7
    80be:	bd80      	pop	{r7, pc}
    80c0:	00007c21 	.word	0x00007c21

000080c4 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    80c4:	b580      	push	{r7, lr}
    80c6:	b082      	sub	sp, #8
    80c8:	af00      	add	r7, sp, #0
    80ca:	4603      	mov	r3, r0
    80cc:	6039      	str	r1, [r7, #0]
    80ce:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    80d0:	683b      	ldr	r3, [r7, #0]
    80d2:	b2da      	uxtb	r2, r3
    80d4:	79fb      	ldrb	r3, [r7, #7]
    80d6:	4619      	mov	r1, r3
    80d8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    80dc:	4b02      	ldr	r3, [pc, #8]	; (80e8 <_usbd_ep_int_dis+0x24>)
    80de:	4798      	blx	r3
}
    80e0:	bf00      	nop
    80e2:	3708      	adds	r7, #8
    80e4:	46bd      	mov	sp, r7
    80e6:	bd80      	pop	{r7, pc}
    80e8:	00007c4d 	.word	0x00007c4d

000080ec <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    80ec:	b580      	push	{r7, lr}
    80ee:	b082      	sub	sp, #8
    80f0:	af00      	add	r7, sp, #0
    80f2:	4603      	mov	r3, r0
    80f4:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    80f6:	79fb      	ldrb	r3, [r7, #7]
    80f8:	4619      	mov	r1, r3
    80fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    80fe:	4b06      	ldr	r3, [pc, #24]	; (8118 <_usbd_ep_is_ctrl+0x2c>)
    8100:	4798      	blx	r3
    8102:	4603      	mov	r3, r0
    8104:	2b11      	cmp	r3, #17
    8106:	bf0c      	ite	eq
    8108:	2301      	moveq	r3, #1
    810a:	2300      	movne	r3, #0
    810c:	b2db      	uxtb	r3, r3
}
    810e:	4618      	mov	r0, r3
    8110:	3708      	adds	r7, #8
    8112:	46bd      	mov	sp, r7
    8114:	bd80      	pop	{r7, pc}
    8116:	bf00      	nop
    8118:	00007d07 	.word	0x00007d07

0000811c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    811c:	b580      	push	{r7, lr}
    811e:	b082      	sub	sp, #8
    8120:	af00      	add	r7, sp, #0
    8122:	4603      	mov	r3, r0
    8124:	71fb      	strb	r3, [r7, #7]
    8126:	460b      	mov	r3, r1
    8128:	71bb      	strb	r3, [r7, #6]
    812a:	4613      	mov	r3, r2
    812c:	717b      	strb	r3, [r7, #5]
	if (st) {
    812e:	797b      	ldrb	r3, [r7, #5]
    8130:	2b00      	cmp	r3, #0
    8132:	d00b      	beq.n	814c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8134:	79bb      	ldrb	r3, [r7, #6]
    8136:	2210      	movs	r2, #16
    8138:	fa02 f303 	lsl.w	r3, r2, r3
    813c:	b2da      	uxtb	r2, r3
    813e:	79fb      	ldrb	r3, [r7, #7]
    8140:	4619      	mov	r1, r3
    8142:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8146:	4b09      	ldr	r3, [pc, #36]	; (816c <_usbd_ep_set_stall+0x50>)
    8148:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    814a:	e00a      	b.n	8162 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    814c:	79bb      	ldrb	r3, [r7, #6]
    814e:	2210      	movs	r2, #16
    8150:	fa02 f303 	lsl.w	r3, r2, r3
    8154:	b2da      	uxtb	r2, r3
    8156:	79fb      	ldrb	r3, [r7, #7]
    8158:	4619      	mov	r1, r3
    815a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    815e:	4b04      	ldr	r3, [pc, #16]	; (8170 <_usbd_ep_set_stall+0x54>)
    8160:	4798      	blx	r3
}
    8162:	bf00      	nop
    8164:	3708      	adds	r7, #8
    8166:	46bd      	mov	sp, r7
    8168:	bd80      	pop	{r7, pc}
    816a:	bf00      	nop
    816c:	00007b79 	.word	0x00007b79
    8170:	00007bcd 	.word	0x00007bcd

00008174 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8174:	b580      	push	{r7, lr}
    8176:	b084      	sub	sp, #16
    8178:	af00      	add	r7, sp, #0
    817a:	4603      	mov	r3, r0
    817c:	460a      	mov	r2, r1
    817e:	71fb      	strb	r3, [r7, #7]
    8180:	4613      	mov	r3, r2
    8182:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8184:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8188:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    818a:	79fb      	ldrb	r3, [r7, #7]
    818c:	4619      	mov	r1, r3
    818e:	68f8      	ldr	r0, [r7, #12]
    8190:	4b08      	ldr	r3, [pc, #32]	; (81b4 <_usbd_ep_is_stalled+0x40>)
    8192:	4798      	blx	r3
    8194:	4603      	mov	r3, r0
    8196:	4619      	mov	r1, r3
    8198:	79bb      	ldrb	r3, [r7, #6]
    819a:	2210      	movs	r2, #16
    819c:	fa02 f303 	lsl.w	r3, r2, r3
    81a0:	400b      	ands	r3, r1
    81a2:	2b00      	cmp	r3, #0
    81a4:	bf14      	ite	ne
    81a6:	2301      	movne	r3, #1
    81a8:	2300      	moveq	r3, #0
    81aa:	b2db      	uxtb	r3, r3
}
    81ac:	4618      	mov	r0, r3
    81ae:	3710      	adds	r7, #16
    81b0:	46bd      	mov	sp, r7
    81b2:	bd80      	pop	{r7, pc}
    81b4:	00007ba5 	.word	0x00007ba5

000081b8 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    81b8:	b580      	push	{r7, lr}
    81ba:	b084      	sub	sp, #16
    81bc:	af00      	add	r7, sp, #0
    81be:	4603      	mov	r3, r0
    81c0:	460a      	mov	r2, r1
    81c2:	71fb      	strb	r3, [r7, #7]
    81c4:	4613      	mov	r3, r2
    81c6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    81c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    81cc:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    81ce:	79fb      	ldrb	r3, [r7, #7]
    81d0:	4619      	mov	r1, r3
    81d2:	68f8      	ldr	r0, [r7, #12]
    81d4:	4b08      	ldr	r3, [pc, #32]	; (81f8 <_usbd_ep_is_stall_sent+0x40>)
    81d6:	4798      	blx	r3
    81d8:	4603      	mov	r3, r0
    81da:	4619      	mov	r1, r3
    81dc:	79bb      	ldrb	r3, [r7, #6]
    81de:	2220      	movs	r2, #32
    81e0:	fa02 f303 	lsl.w	r3, r2, r3
    81e4:	400b      	ands	r3, r1
    81e6:	2b00      	cmp	r3, #0
    81e8:	bf14      	ite	ne
    81ea:	2301      	movne	r3, #1
    81ec:	2300      	moveq	r3, #0
    81ee:	b2db      	uxtb	r3, r3
}
    81f0:	4618      	mov	r0, r3
    81f2:	3710      	adds	r7, #16
    81f4:	46bd      	mov	sp, r7
    81f6:	bd80      	pop	{r7, pc}
    81f8:	00007b25 	.word	0x00007b25

000081fc <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    81fc:	b580      	push	{r7, lr}
    81fe:	b082      	sub	sp, #8
    8200:	af00      	add	r7, sp, #0
    8202:	4603      	mov	r3, r0
    8204:	460a      	mov	r2, r1
    8206:	71fb      	strb	r3, [r7, #7]
    8208:	4613      	mov	r3, r2
    820a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    820c:	79bb      	ldrb	r3, [r7, #6]
    820e:	2220      	movs	r2, #32
    8210:	409a      	lsls	r2, r3
    8212:	79fb      	ldrb	r3, [r7, #7]
    8214:	4611      	mov	r1, r2
    8216:	4618      	mov	r0, r3
    8218:	4b02      	ldr	r3, [pc, #8]	; (8224 <_usbd_ep_ack_stall+0x28>)
    821a:	4798      	blx	r3
}
    821c:	bf00      	nop
    821e:	3708      	adds	r7, #8
    8220:	46bd      	mov	sp, r7
    8222:	bd80      	pop	{r7, pc}
    8224:	00008075 	.word	0x00008075

00008228 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8228:	b580      	push	{r7, lr}
    822a:	b082      	sub	sp, #8
    822c:	af00      	add	r7, sp, #0
    822e:	4603      	mov	r3, r0
    8230:	71fb      	strb	r3, [r7, #7]
    8232:	460b      	mov	r3, r1
    8234:	71bb      	strb	r3, [r7, #6]
    8236:	4613      	mov	r3, r2
    8238:	717b      	strb	r3, [r7, #5]
	if (en) {
    823a:	797b      	ldrb	r3, [r7, #5]
    823c:	2b00      	cmp	r3, #0
    823e:	d008      	beq.n	8252 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8240:	79bb      	ldrb	r3, [r7, #6]
    8242:	2220      	movs	r2, #32
    8244:	409a      	lsls	r2, r3
    8246:	79fb      	ldrb	r3, [r7, #7]
    8248:	4611      	mov	r1, r2
    824a:	4618      	mov	r0, r3
    824c:	4b07      	ldr	r3, [pc, #28]	; (826c <_usbd_ep_int_stall_en+0x44>)
    824e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8250:	e007      	b.n	8262 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8252:	79bb      	ldrb	r3, [r7, #6]
    8254:	2220      	movs	r2, #32
    8256:	409a      	lsls	r2, r3
    8258:	79fb      	ldrb	r3, [r7, #7]
    825a:	4611      	mov	r1, r2
    825c:	4618      	mov	r0, r3
    825e:	4b04      	ldr	r3, [pc, #16]	; (8270 <_usbd_ep_int_stall_en+0x48>)
    8260:	4798      	blx	r3
}
    8262:	bf00      	nop
    8264:	3708      	adds	r7, #8
    8266:	46bd      	mov	sp, r7
    8268:	bd80      	pop	{r7, pc}
    826a:	bf00      	nop
    826c:	0000809d 	.word	0x0000809d
    8270:	000080c5 	.word	0x000080c5

00008274 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8274:	b580      	push	{r7, lr}
    8276:	b082      	sub	sp, #8
    8278:	af00      	add	r7, sp, #0
    827a:	4603      	mov	r3, r0
    827c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    827e:	79fb      	ldrb	r3, [r7, #7]
    8280:	4619      	mov	r1, r3
    8282:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8286:	4b03      	ldr	r3, [pc, #12]	; (8294 <_usbd_ep_stop_setup+0x20>)
    8288:	4798      	blx	r3
}
    828a:	bf00      	nop
    828c:	3708      	adds	r7, #8
    828e:	46bd      	mov	sp, r7
    8290:	bd80      	pop	{r7, pc}
    8292:	bf00      	nop
    8294:	00007bf9 	.word	0x00007bf9

00008298 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8298:	b580      	push	{r7, lr}
    829a:	b082      	sub	sp, #8
    829c:	af00      	add	r7, sp, #0
    829e:	4603      	mov	r3, r0
    82a0:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    82a2:	79fb      	ldrb	r3, [r7, #7]
    82a4:	2210      	movs	r2, #16
    82a6:	4619      	mov	r1, r3
    82a8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    82ac:	4b05      	ldr	r3, [pc, #20]	; (82c4 <_usbd_ep_is_setup+0x2c>)
    82ae:	4798      	blx	r3
    82b0:	4603      	mov	r3, r0
    82b2:	2b00      	cmp	r3, #0
    82b4:	bf14      	ite	ne
    82b6:	2301      	movne	r3, #1
    82b8:	2300      	moveq	r3, #0
    82ba:	b2db      	uxtb	r3, r3
}
    82bc:	4618      	mov	r0, r3
    82be:	3708      	adds	r7, #8
    82c0:	46bd      	mov	sp, r7
    82c2:	bd80      	pop	{r7, pc}
    82c4:	00007aef 	.word	0x00007aef

000082c8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    82c8:	b580      	push	{r7, lr}
    82ca:	b082      	sub	sp, #8
    82cc:	af00      	add	r7, sp, #0
    82ce:	4603      	mov	r3, r0
    82d0:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    82d2:	79fb      	ldrb	r3, [r7, #7]
    82d4:	2110      	movs	r1, #16
    82d6:	4618      	mov	r0, r3
    82d8:	4b02      	ldr	r3, [pc, #8]	; (82e4 <_usbd_ep_ack_setup+0x1c>)
    82da:	4798      	blx	r3
}
    82dc:	bf00      	nop
    82de:	3708      	adds	r7, #8
    82e0:	46bd      	mov	sp, r7
    82e2:	bd80      	pop	{r7, pc}
    82e4:	00008075 	.word	0x00008075

000082e8 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    82e8:	b580      	push	{r7, lr}
    82ea:	b082      	sub	sp, #8
    82ec:	af00      	add	r7, sp, #0
    82ee:	4603      	mov	r3, r0
    82f0:	71fb      	strb	r3, [r7, #7]
    82f2:	460b      	mov	r3, r1
    82f4:	71bb      	strb	r3, [r7, #6]
    82f6:	4613      	mov	r3, r2
    82f8:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    82fa:	797b      	ldrb	r3, [r7, #5]
    82fc:	2b00      	cmp	r3, #0
    82fe:	d00b      	beq.n	8318 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8300:	79bb      	ldrb	r3, [r7, #6]
    8302:	2201      	movs	r2, #1
    8304:	fa02 f303 	lsl.w	r3, r2, r3
    8308:	b2da      	uxtb	r2, r3
    830a:	79fb      	ldrb	r3, [r7, #7]
    830c:	4619      	mov	r1, r3
    830e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8312:	4b09      	ldr	r3, [pc, #36]	; (8338 <_usbd_ep_set_toggle+0x50>)
    8314:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8316:	e00a      	b.n	832e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8318:	79bb      	ldrb	r3, [r7, #6]
    831a:	2201      	movs	r2, #1
    831c:	fa02 f303 	lsl.w	r3, r2, r3
    8320:	b2da      	uxtb	r2, r3
    8322:	79fb      	ldrb	r3, [r7, #7]
    8324:	4619      	mov	r1, r3
    8326:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    832a:	4b04      	ldr	r3, [pc, #16]	; (833c <_usbd_ep_set_toggle+0x54>)
    832c:	4798      	blx	r3
}
    832e:	bf00      	nop
    8330:	3708      	adds	r7, #8
    8332:	46bd      	mov	sp, r7
    8334:	bd80      	pop	{r7, pc}
    8336:	bf00      	nop
    8338:	00007b79 	.word	0x00007b79
    833c:	00007bcd 	.word	0x00007bcd

00008340 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8340:	b580      	push	{r7, lr}
    8342:	b082      	sub	sp, #8
    8344:	af00      	add	r7, sp, #0
    8346:	4603      	mov	r3, r0
    8348:	460a      	mov	r2, r1
    834a:	71fb      	strb	r3, [r7, #7]
    834c:	4613      	mov	r3, r2
    834e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8350:	79bb      	ldrb	r3, [r7, #6]
    8352:	2201      	movs	r2, #1
    8354:	409a      	lsls	r2, r3
    8356:	79fb      	ldrb	r3, [r7, #7]
    8358:	4611      	mov	r1, r2
    835a:	4618      	mov	r0, r3
    835c:	4b02      	ldr	r3, [pc, #8]	; (8368 <_usbd_ep_ack_io_cpt+0x28>)
    835e:	4798      	blx	r3
}
    8360:	bf00      	nop
    8362:	3708      	adds	r7, #8
    8364:	46bd      	mov	sp, r7
    8366:	bd80      	pop	{r7, pc}
    8368:	00008075 	.word	0x00008075

0000836c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    836c:	b480      	push	{r7}
    836e:	b085      	sub	sp, #20
    8370:	af00      	add	r7, sp, #0
    8372:	4603      	mov	r3, r0
    8374:	603a      	str	r2, [r7, #0]
    8376:	71fb      	strb	r3, [r7, #7]
    8378:	460b      	mov	r3, r1
    837a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    837c:	79fa      	ldrb	r2, [r7, #7]
    837e:	79bb      	ldrb	r3, [r7, #6]
    8380:	0052      	lsls	r2, r2, #1
    8382:	4413      	add	r3, r2
    8384:	011b      	lsls	r3, r3, #4
    8386:	4a06      	ldr	r2, [pc, #24]	; (83a0 <_usbd_ep_set_buf+0x34>)
    8388:	4413      	add	r3, r2
    838a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    838c:	68fb      	ldr	r3, [r7, #12]
    838e:	683a      	ldr	r2, [r7, #0]
    8390:	601a      	str	r2, [r3, #0]
}
    8392:	bf00      	nop
    8394:	3714      	adds	r7, #20
    8396:	46bd      	mov	sp, r7
    8398:	f85d 7b04 	ldr.w	r7, [sp], #4
    839c:	4770      	bx	lr
    839e:	bf00      	nop
    83a0:	20000b5c 	.word	0x20000b5c

000083a4 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    83a4:	b480      	push	{r7}
    83a6:	b085      	sub	sp, #20
    83a8:	af00      	add	r7, sp, #0
    83aa:	4603      	mov	r3, r0
    83ac:	71fb      	strb	r3, [r7, #7]
    83ae:	460b      	mov	r3, r1
    83b0:	71bb      	strb	r3, [r7, #6]
    83b2:	4613      	mov	r3, r2
    83b4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    83b6:	79fa      	ldrb	r2, [r7, #7]
    83b8:	79bb      	ldrb	r3, [r7, #6]
    83ba:	0052      	lsls	r2, r2, #1
    83bc:	4413      	add	r3, r2
    83be:	011b      	lsls	r3, r3, #4
    83c0:	4a08      	ldr	r2, [pc, #32]	; (83e4 <_usbd_ep_set_in_count+0x40>)
    83c2:	4413      	add	r3, r2
    83c4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    83c6:	88bb      	ldrh	r3, [r7, #4]
    83c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    83cc:	b299      	uxth	r1, r3
    83ce:	68fa      	ldr	r2, [r7, #12]
    83d0:	6853      	ldr	r3, [r2, #4]
    83d2:	f361 339b 	bfi	r3, r1, #14, #14
    83d6:	6053      	str	r3, [r2, #4]
}
    83d8:	bf00      	nop
    83da:	3714      	adds	r7, #20
    83dc:	46bd      	mov	sp, r7
    83de:	f85d 7b04 	ldr.w	r7, [sp], #4
    83e2:	4770      	bx	lr
    83e4:	20000b5c 	.word	0x20000b5c

000083e8 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    83e8:	b480      	push	{r7}
    83ea:	b085      	sub	sp, #20
    83ec:	af00      	add	r7, sp, #0
    83ee:	4603      	mov	r3, r0
    83f0:	71fb      	strb	r3, [r7, #7]
    83f2:	460b      	mov	r3, r1
    83f4:	71bb      	strb	r3, [r7, #6]
    83f6:	4613      	mov	r3, r2
    83f8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    83fa:	79fa      	ldrb	r2, [r7, #7]
    83fc:	79bb      	ldrb	r3, [r7, #6]
    83fe:	0052      	lsls	r2, r2, #1
    8400:	4413      	add	r3, r2
    8402:	011b      	lsls	r3, r3, #4
    8404:	4a08      	ldr	r2, [pc, #32]	; (8428 <_usbd_ep_set_in_size+0x40>)
    8406:	4413      	add	r3, r2
    8408:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    840a:	88bb      	ldrh	r3, [r7, #4]
    840c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8410:	b299      	uxth	r1, r3
    8412:	68fa      	ldr	r2, [r7, #12]
    8414:	6853      	ldr	r3, [r2, #4]
    8416:	f361 030d 	bfi	r3, r1, #0, #14
    841a:	6053      	str	r3, [r2, #4]
}
    841c:	bf00      	nop
    841e:	3714      	adds	r7, #20
    8420:	46bd      	mov	sp, r7
    8422:	f85d 7b04 	ldr.w	r7, [sp], #4
    8426:	4770      	bx	lr
    8428:	20000b5c 	.word	0x20000b5c

0000842c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    842c:	b480      	push	{r7}
    842e:	b085      	sub	sp, #20
    8430:	af00      	add	r7, sp, #0
    8432:	4603      	mov	r3, r0
    8434:	71fb      	strb	r3, [r7, #7]
    8436:	460b      	mov	r3, r1
    8438:	71bb      	strb	r3, [r7, #6]
    843a:	4613      	mov	r3, r2
    843c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    843e:	79fa      	ldrb	r2, [r7, #7]
    8440:	79bb      	ldrb	r3, [r7, #6]
    8442:	0052      	lsls	r2, r2, #1
    8444:	4413      	add	r3, r2
    8446:	011b      	lsls	r3, r3, #4
    8448:	4a08      	ldr	r2, [pc, #32]	; (846c <_usbd_ep_set_out_count+0x40>)
    844a:	4413      	add	r3, r2
    844c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    844e:	88bb      	ldrh	r3, [r7, #4]
    8450:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8454:	b299      	uxth	r1, r3
    8456:	68fa      	ldr	r2, [r7, #12]
    8458:	6853      	ldr	r3, [r2, #4]
    845a:	f361 030d 	bfi	r3, r1, #0, #14
    845e:	6053      	str	r3, [r2, #4]
}
    8460:	bf00      	nop
    8462:	3714      	adds	r7, #20
    8464:	46bd      	mov	sp, r7
    8466:	f85d 7b04 	ldr.w	r7, [sp], #4
    846a:	4770      	bx	lr
    846c:	20000b5c 	.word	0x20000b5c

00008470 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8470:	b480      	push	{r7}
    8472:	b085      	sub	sp, #20
    8474:	af00      	add	r7, sp, #0
    8476:	4603      	mov	r3, r0
    8478:	71fb      	strb	r3, [r7, #7]
    847a:	460b      	mov	r3, r1
    847c:	71bb      	strb	r3, [r7, #6]
    847e:	4613      	mov	r3, r2
    8480:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8482:	79fa      	ldrb	r2, [r7, #7]
    8484:	79bb      	ldrb	r3, [r7, #6]
    8486:	0052      	lsls	r2, r2, #1
    8488:	4413      	add	r3, r2
    848a:	011b      	lsls	r3, r3, #4
    848c:	4a08      	ldr	r2, [pc, #32]	; (84b0 <_usbd_ep_set_out_size+0x40>)
    848e:	4413      	add	r3, r2
    8490:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8492:	88bb      	ldrh	r3, [r7, #4]
    8494:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8498:	b299      	uxth	r1, r3
    849a:	68fa      	ldr	r2, [r7, #12]
    849c:	6853      	ldr	r3, [r2, #4]
    849e:	f361 339b 	bfi	r3, r1, #14, #14
    84a2:	6053      	str	r3, [r2, #4]
}
    84a4:	bf00      	nop
    84a6:	3714      	adds	r7, #20
    84a8:	46bd      	mov	sp, r7
    84aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    84ae:	4770      	bx	lr
    84b0:	20000b5c 	.word	0x20000b5c

000084b4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    84b4:	b580      	push	{r7, lr}
    84b6:	b084      	sub	sp, #16
    84b8:	af00      	add	r7, sp, #0
    84ba:	60ba      	str	r2, [r7, #8]
    84bc:	607b      	str	r3, [r7, #4]
    84be:	4603      	mov	r3, r0
    84c0:	73fb      	strb	r3, [r7, #15]
    84c2:	460b      	mov	r3, r1
    84c4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    84c6:	68bb      	ldr	r3, [r7, #8]
    84c8:	b29a      	uxth	r2, r3
    84ca:	7bb9      	ldrb	r1, [r7, #14]
    84cc:	7bfb      	ldrb	r3, [r7, #15]
    84ce:	4618      	mov	r0, r3
    84d0:	4b06      	ldr	r3, [pc, #24]	; (84ec <_usbd_ep_set_in_trans+0x38>)
    84d2:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    84d4:	687b      	ldr	r3, [r7, #4]
    84d6:	b29a      	uxth	r2, r3
    84d8:	7bb9      	ldrb	r1, [r7, #14]
    84da:	7bfb      	ldrb	r3, [r7, #15]
    84dc:	4618      	mov	r0, r3
    84de:	4b04      	ldr	r3, [pc, #16]	; (84f0 <_usbd_ep_set_in_trans+0x3c>)
    84e0:	4798      	blx	r3
}
    84e2:	bf00      	nop
    84e4:	3710      	adds	r7, #16
    84e6:	46bd      	mov	sp, r7
    84e8:	bd80      	pop	{r7, pc}
    84ea:	bf00      	nop
    84ec:	000083e9 	.word	0x000083e9
    84f0:	000083a5 	.word	0x000083a5

000084f4 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    84f4:	b580      	push	{r7, lr}
    84f6:	b084      	sub	sp, #16
    84f8:	af00      	add	r7, sp, #0
    84fa:	60ba      	str	r2, [r7, #8]
    84fc:	607b      	str	r3, [r7, #4]
    84fe:	4603      	mov	r3, r0
    8500:	73fb      	strb	r3, [r7, #15]
    8502:	460b      	mov	r3, r1
    8504:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    8506:	68bb      	ldr	r3, [r7, #8]
    8508:	b29a      	uxth	r2, r3
    850a:	7bb9      	ldrb	r1, [r7, #14]
    850c:	7bfb      	ldrb	r3, [r7, #15]
    850e:	4618      	mov	r0, r3
    8510:	4b06      	ldr	r3, [pc, #24]	; (852c <_usbd_ep_set_out_trans+0x38>)
    8512:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8514:	687b      	ldr	r3, [r7, #4]
    8516:	b29a      	uxth	r2, r3
    8518:	7bb9      	ldrb	r1, [r7, #14]
    851a:	7bfb      	ldrb	r3, [r7, #15]
    851c:	4618      	mov	r0, r3
    851e:	4b04      	ldr	r3, [pc, #16]	; (8530 <_usbd_ep_set_out_trans+0x3c>)
    8520:	4798      	blx	r3
}
    8522:	bf00      	nop
    8524:	3710      	adds	r7, #16
    8526:	46bd      	mov	sp, r7
    8528:	bd80      	pop	{r7, pc}
    852a:	bf00      	nop
    852c:	00008471 	.word	0x00008471
    8530:	0000842d 	.word	0x0000842d

00008534 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8534:	b480      	push	{r7}
    8536:	b085      	sub	sp, #20
    8538:	af00      	add	r7, sp, #0
    853a:	4603      	mov	r3, r0
    853c:	460a      	mov	r2, r1
    853e:	71fb      	strb	r3, [r7, #7]
    8540:	4613      	mov	r3, r2
    8542:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8544:	79fa      	ldrb	r2, [r7, #7]
    8546:	79bb      	ldrb	r3, [r7, #6]
    8548:	0052      	lsls	r2, r2, #1
    854a:	4413      	add	r3, r2
    854c:	011b      	lsls	r3, r3, #4
    854e:	4a06      	ldr	r2, [pc, #24]	; (8568 <_usbd_ep_clear_bank_status+0x34>)
    8550:	4413      	add	r3, r2
    8552:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8554:	68fb      	ldr	r3, [r7, #12]
    8556:	2200      	movs	r2, #0
    8558:	729a      	strb	r2, [r3, #10]
}
    855a:	bf00      	nop
    855c:	3714      	adds	r7, #20
    855e:	46bd      	mov	sp, r7
    8560:	f85d 7b04 	ldr.w	r7, [sp], #4
    8564:	4770      	bx	lr
    8566:	bf00      	nop
    8568:	20000b5c 	.word	0x20000b5c

0000856c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    856c:	b580      	push	{r7, lr}
    856e:	b082      	sub	sp, #8
    8570:	af00      	add	r7, sp, #0
    8572:	4603      	mov	r3, r0
    8574:	71fb      	strb	r3, [r7, #7]
    8576:	460b      	mov	r3, r1
    8578:	71bb      	strb	r3, [r7, #6]
    857a:	4613      	mov	r3, r2
    857c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    857e:	797b      	ldrb	r3, [r7, #5]
    8580:	2b00      	cmp	r3, #0
    8582:	d00b      	beq.n	859c <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8584:	79bb      	ldrb	r3, [r7, #6]
    8586:	2240      	movs	r2, #64	; 0x40
    8588:	fa02 f303 	lsl.w	r3, r2, r3
    858c:	b2da      	uxtb	r2, r3
    858e:	79fb      	ldrb	r3, [r7, #7]
    8590:	4619      	mov	r1, r3
    8592:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8596:	4b09      	ldr	r3, [pc, #36]	; (85bc <_usbd_ep_set_in_rdy+0x50>)
    8598:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    859a:	e00a      	b.n	85b2 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    859c:	79bb      	ldrb	r3, [r7, #6]
    859e:	2240      	movs	r2, #64	; 0x40
    85a0:	fa02 f303 	lsl.w	r3, r2, r3
    85a4:	b2da      	uxtb	r2, r3
    85a6:	79fb      	ldrb	r3, [r7, #7]
    85a8:	4619      	mov	r1, r3
    85aa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    85ae:	4b04      	ldr	r3, [pc, #16]	; (85c0 <_usbd_ep_set_in_rdy+0x54>)
    85b0:	4798      	blx	r3
}
    85b2:	bf00      	nop
    85b4:	3708      	adds	r7, #8
    85b6:	46bd      	mov	sp, r7
    85b8:	bd80      	pop	{r7, pc}
    85ba:	bf00      	nop
    85bc:	00007b79 	.word	0x00007b79
    85c0:	00007bcd 	.word	0x00007bcd

000085c4 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    85c4:	b580      	push	{r7, lr}
    85c6:	b082      	sub	sp, #8
    85c8:	af00      	add	r7, sp, #0
    85ca:	4603      	mov	r3, r0
    85cc:	71fb      	strb	r3, [r7, #7]
    85ce:	460b      	mov	r3, r1
    85d0:	71bb      	strb	r3, [r7, #6]
    85d2:	4613      	mov	r3, r2
    85d4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    85d6:	797b      	ldrb	r3, [r7, #5]
    85d8:	2b00      	cmp	r3, #0
    85da:	d00b      	beq.n	85f4 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    85dc:	79bb      	ldrb	r3, [r7, #6]
    85de:	2240      	movs	r2, #64	; 0x40
    85e0:	fa02 f303 	lsl.w	r3, r2, r3
    85e4:	b2da      	uxtb	r2, r3
    85e6:	79fb      	ldrb	r3, [r7, #7]
    85e8:	4619      	mov	r1, r3
    85ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    85ee:	4b09      	ldr	r3, [pc, #36]	; (8614 <_usbd_ep_set_out_rdy+0x50>)
    85f0:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    85f2:	e00a      	b.n	860a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    85f4:	79bb      	ldrb	r3, [r7, #6]
    85f6:	2240      	movs	r2, #64	; 0x40
    85f8:	fa02 f303 	lsl.w	r3, r2, r3
    85fc:	b2da      	uxtb	r2, r3
    85fe:	79fb      	ldrb	r3, [r7, #7]
    8600:	4619      	mov	r1, r3
    8602:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8606:	4b04      	ldr	r3, [pc, #16]	; (8618 <_usbd_ep_set_out_rdy+0x54>)
    8608:	4798      	blx	r3
}
    860a:	bf00      	nop
    860c:	3708      	adds	r7, #8
    860e:	46bd      	mov	sp, r7
    8610:	bd80      	pop	{r7, pc}
    8612:	bf00      	nop
    8614:	00007bcd 	.word	0x00007bcd
    8618:	00007b79 	.word	0x00007b79

0000861c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    861c:	b480      	push	{r7}
    861e:	b083      	sub	sp, #12
    8620:	af00      	add	r7, sp, #0
    8622:	4603      	mov	r3, r0
    8624:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8626:	88fb      	ldrh	r3, [r7, #6]
    8628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    862c:	d820      	bhi.n	8670 <_usbd_ep_pcksize_size+0x54>
    862e:	88fb      	ldrh	r3, [r7, #6]
    8630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8634:	d81a      	bhi.n	866c <_usbd_ep_pcksize_size+0x50>
    8636:	88fb      	ldrh	r3, [r7, #6]
    8638:	2b80      	cmp	r3, #128	; 0x80
    863a:	d815      	bhi.n	8668 <_usbd_ep_pcksize_size+0x4c>
    863c:	88fb      	ldrh	r3, [r7, #6]
    863e:	2b40      	cmp	r3, #64	; 0x40
    8640:	d810      	bhi.n	8664 <_usbd_ep_pcksize_size+0x48>
    8642:	88fb      	ldrh	r3, [r7, #6]
    8644:	2b20      	cmp	r3, #32
    8646:	d80b      	bhi.n	8660 <_usbd_ep_pcksize_size+0x44>
    8648:	88fb      	ldrh	r3, [r7, #6]
    864a:	2b10      	cmp	r3, #16
    864c:	d806      	bhi.n	865c <_usbd_ep_pcksize_size+0x40>
    864e:	88fb      	ldrh	r3, [r7, #6]
    8650:	2b08      	cmp	r3, #8
    8652:	bf8c      	ite	hi
    8654:	2301      	movhi	r3, #1
    8656:	2300      	movls	r3, #0
    8658:	b2db      	uxtb	r3, r3
    865a:	e00a      	b.n	8672 <_usbd_ep_pcksize_size+0x56>
    865c:	2302      	movs	r3, #2
    865e:	e008      	b.n	8672 <_usbd_ep_pcksize_size+0x56>
    8660:	2303      	movs	r3, #3
    8662:	e006      	b.n	8672 <_usbd_ep_pcksize_size+0x56>
    8664:	2304      	movs	r3, #4
    8666:	e004      	b.n	8672 <_usbd_ep_pcksize_size+0x56>
    8668:	2305      	movs	r3, #5
    866a:	e002      	b.n	8672 <_usbd_ep_pcksize_size+0x56>
    866c:	2306      	movs	r3, #6
    866e:	e000      	b.n	8672 <_usbd_ep_pcksize_size+0x56>
    8670:	2307      	movs	r3, #7
}
    8672:	4618      	mov	r0, r3
    8674:	370c      	adds	r7, #12
    8676:	46bd      	mov	sp, r7
    8678:	f85d 7b04 	ldr.w	r7, [sp], #4
    867c:	4770      	bx	lr
	...

00008680 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    8680:	b480      	push	{r7}
    8682:	b085      	sub	sp, #20
    8684:	af00      	add	r7, sp, #0
    8686:	4603      	mov	r3, r0
    8688:	460a      	mov	r2, r1
    868a:	71fb      	strb	r3, [r7, #7]
    868c:	4613      	mov	r3, r2
    868e:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8690:	79fb      	ldrb	r3, [r7, #7]
    8692:	2b00      	cmp	r3, #0
    8694:	d008      	beq.n	86a8 <_usb_d_dev_ept+0x28>
    8696:	79bb      	ldrb	r3, [r7, #6]
    8698:	2b00      	cmp	r3, #0
    869a:	d003      	beq.n	86a4 <_usb_d_dev_ept+0x24>
    869c:	79fb      	ldrb	r3, [r7, #7]
    869e:	3304      	adds	r3, #4
    86a0:	b2db      	uxtb	r3, r3
    86a2:	e002      	b.n	86aa <_usb_d_dev_ept+0x2a>
    86a4:	79fb      	ldrb	r3, [r7, #7]
    86a6:	e000      	b.n	86aa <_usb_d_dev_ept+0x2a>
    86a8:	2300      	movs	r3, #0
    86aa:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    86ac:	7bfa      	ldrb	r2, [r7, #15]
    86ae:	4613      	mov	r3, r2
    86b0:	009b      	lsls	r3, r3, #2
    86b2:	4413      	add	r3, r2
    86b4:	009b      	lsls	r3, r3, #2
    86b6:	3310      	adds	r3, #16
    86b8:	4a04      	ldr	r2, [pc, #16]	; (86cc <_usb_d_dev_ept+0x4c>)
    86ba:	4413      	add	r3, r2
    86bc:	3304      	adds	r3, #4
}
    86be:	4618      	mov	r0, r3
    86c0:	3714      	adds	r7, #20
    86c2:	46bd      	mov	sp, r7
    86c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    86c8:	4770      	bx	lr
    86ca:	bf00      	nop
    86cc:	20000a94 	.word	0x20000a94

000086d0 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    86d0:	b580      	push	{r7, lr}
    86d2:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    86d4:	2104      	movs	r1, #4
    86d6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    86da:	4b03      	ldr	r3, [pc, #12]	; (86e8 <_usb_d_dev_sof+0x18>)
    86dc:	4798      	blx	r3
	dev_inst.callbacks.sof();
    86de:	4b03      	ldr	r3, [pc, #12]	; (86ec <_usb_d_dev_sof+0x1c>)
    86e0:	681b      	ldr	r3, [r3, #0]
    86e2:	4798      	blx	r3
}
    86e4:	bf00      	nop
    86e6:	bd80      	pop	{r7, pc}
    86e8:	00007d47 	.word	0x00007d47
    86ec:	20000a94 	.word	0x20000a94

000086f0 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    86f0:	b580      	push	{r7, lr}
    86f2:	b084      	sub	sp, #16
    86f4:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    86f6:	2300      	movs	r3, #0
    86f8:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    86fa:	f240 2101 	movw	r1, #513	; 0x201
    86fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8702:	4b1a      	ldr	r3, [pc, #104]	; (876c <_usb_d_dev_lpmsusp+0x7c>)
    8704:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8706:	f240 2101 	movw	r1, #513	; 0x201
    870a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    870e:	4b18      	ldr	r3, [pc, #96]	; (8770 <_usb_d_dev_lpmsusp+0x80>)
    8710:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8712:	2170      	movs	r1, #112	; 0x70
    8714:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8718:	4b16      	ldr	r3, [pc, #88]	; (8774 <_usb_d_dev_lpmsusp+0x84>)
    871a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    871c:	2300      	movs	r3, #0
    871e:	73fb      	strb	r3, [r7, #15]
    8720:	e018      	b.n	8754 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8722:	7bfb      	ldrb	r3, [r7, #15]
    8724:	015b      	lsls	r3, r3, #5
    8726:	4a14      	ldr	r2, [pc, #80]	; (8778 <_usb_d_dev_lpmsusp+0x88>)
    8728:	4413      	add	r3, r2
    872a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    872c:	687b      	ldr	r3, [r7, #4]
    872e:	891b      	ldrh	r3, [r3, #8]
    8730:	f3c3 0303 	ubfx	r3, r3, #0, #4
    8734:	b2db      	uxtb	r3, r3
    8736:	2b03      	cmp	r3, #3
    8738:	d109      	bne.n	874e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    873a:	687b      	ldr	r3, [r7, #4]
    873c:	891b      	ldrh	r3, [r3, #8]
    873e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    8742:	b29b      	uxth	r3, r3
    8744:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    8746:	687b      	ldr	r3, [r7, #4]
    8748:	2200      	movs	r2, #0
    874a:	811a      	strh	r2, [r3, #8]
			break;
    874c:	e005      	b.n	875a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    874e:	7bfb      	ldrb	r3, [r7, #15]
    8750:	3301      	adds	r3, #1
    8752:	73fb      	strb	r3, [r7, #15]
    8754:	7bfb      	ldrb	r3, [r7, #15]
    8756:	2b03      	cmp	r3, #3
    8758:	d9e3      	bls.n	8722 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    875a:	4b08      	ldr	r3, [pc, #32]	; (877c <_usb_d_dev_lpmsusp+0x8c>)
    875c:	685b      	ldr	r3, [r3, #4]
    875e:	68b9      	ldr	r1, [r7, #8]
    8760:	2003      	movs	r0, #3
    8762:	4798      	blx	r3
}
    8764:	bf00      	nop
    8766:	3710      	adds	r7, #16
    8768:	46bd      	mov	sp, r7
    876a:	bd80      	pop	{r7, pc}
    876c:	00007d47 	.word	0x00007d47
    8770:	00007d9d 	.word	0x00007d9d
    8774:	00007d65 	.word	0x00007d65
    8778:	20000b5c 	.word	0x20000b5c
    877c:	20000a94 	.word	0x20000a94

00008780 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    8780:	b580      	push	{r7, lr}
    8782:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    8784:	2180      	movs	r1, #128	; 0x80
    8786:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    878a:	4b04      	ldr	r3, [pc, #16]	; (879c <_usb_d_dev_ramerr+0x1c>)
    878c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    878e:	4b04      	ldr	r3, [pc, #16]	; (87a0 <_usb_d_dev_ramerr+0x20>)
    8790:	685b      	ldr	r3, [r3, #4]
    8792:	2100      	movs	r1, #0
    8794:	2005      	movs	r0, #5
    8796:	4798      	blx	r3
}
    8798:	bf00      	nop
    879a:	bd80      	pop	{r7, pc}
    879c:	00007d47 	.word	0x00007d47
    87a0:	20000a94 	.word	0x20000a94

000087a4 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    87a4:	b580      	push	{r7, lr}
    87a6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    87a8:	2170      	movs	r1, #112	; 0x70
    87aa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87ae:	4b0b      	ldr	r3, [pc, #44]	; (87dc <_usb_d_dev_wakeup+0x38>)
    87b0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    87b2:	2170      	movs	r1, #112	; 0x70
    87b4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87b8:	4b09      	ldr	r3, [pc, #36]	; (87e0 <_usb_d_dev_wakeup+0x3c>)
    87ba:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    87bc:	f240 2101 	movw	r1, #513	; 0x201
    87c0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87c4:	4b07      	ldr	r3, [pc, #28]	; (87e4 <_usb_d_dev_wakeup+0x40>)
    87c6:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    87c8:	2000      	movs	r0, #0
    87ca:	4b07      	ldr	r3, [pc, #28]	; (87e8 <_usb_d_dev_wakeup+0x44>)
    87cc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    87ce:	4b07      	ldr	r3, [pc, #28]	; (87ec <_usb_d_dev_wakeup+0x48>)
    87d0:	685b      	ldr	r3, [r3, #4]
    87d2:	2100      	movs	r1, #0
    87d4:	2002      	movs	r0, #2
    87d6:	4798      	blx	r3
}
    87d8:	bf00      	nop
    87da:	bd80      	pop	{r7, pc}
    87dc:	00007d47 	.word	0x00007d47
    87e0:	00007d9d 	.word	0x00007d9d
    87e4:	00007d65 	.word	0x00007d65
    87e8:	00008045 	.word	0x00008045
    87ec:	20000a94 	.word	0x20000a94

000087f0 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    87f0:	b580      	push	{r7, lr}
    87f2:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    87f4:	2200      	movs	r2, #0
    87f6:	2100      	movs	r1, #0
    87f8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87fc:	4b0d      	ldr	r3, [pc, #52]	; (8834 <_usb_d_dev_reset+0x44>)
    87fe:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    8800:	2108      	movs	r1, #8
    8802:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8806:	4b0c      	ldr	r3, [pc, #48]	; (8838 <_usb_d_dev_reset+0x48>)
    8808:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    880a:	2170      	movs	r1, #112	; 0x70
    880c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8810:	4b0a      	ldr	r3, [pc, #40]	; (883c <_usb_d_dev_reset+0x4c>)
    8812:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8814:	f240 2101 	movw	r1, #513	; 0x201
    8818:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    881c:	4b08      	ldr	r3, [pc, #32]	; (8840 <_usb_d_dev_reset+0x50>)
    881e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    8820:	4b08      	ldr	r3, [pc, #32]	; (8844 <_usb_d_dev_reset+0x54>)
    8822:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8824:	4b08      	ldr	r3, [pc, #32]	; (8848 <_usb_d_dev_reset+0x58>)
    8826:	685b      	ldr	r3, [r3, #4]
    8828:	2100      	movs	r1, #0
    882a:	2001      	movs	r0, #1
    882c:	4798      	blx	r3
}
    882e:	bf00      	nop
    8830:	bd80      	pop	{r7, pc}
    8832:	bf00      	nop
    8834:	00007cdd 	.word	0x00007cdd
    8838:	00007d47 	.word	0x00007d47
    883c:	00007d9d 	.word	0x00007d9d
    8840:	00007d65 	.word	0x00007d65
    8844:	000093ad 	.word	0x000093ad
    8848:	20000a94 	.word	0x20000a94

0000884c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    884c:	b580      	push	{r7, lr}
    884e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8850:	f240 2101 	movw	r1, #513	; 0x201
    8854:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8858:	4b09      	ldr	r3, [pc, #36]	; (8880 <_usb_d_dev_suspend+0x34>)
    885a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    885c:	f240 2101 	movw	r1, #513	; 0x201
    8860:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8864:	4b07      	ldr	r3, [pc, #28]	; (8884 <_usb_d_dev_suspend+0x38>)
    8866:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8868:	2170      	movs	r1, #112	; 0x70
    886a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    886e:	4b06      	ldr	r3, [pc, #24]	; (8888 <_usb_d_dev_suspend+0x3c>)
    8870:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8872:	4b06      	ldr	r3, [pc, #24]	; (888c <_usb_d_dev_suspend+0x40>)
    8874:	685b      	ldr	r3, [r3, #4]
    8876:	2100      	movs	r1, #0
    8878:	2004      	movs	r0, #4
    887a:	4798      	blx	r3
}
    887c:	bf00      	nop
    887e:	bd80      	pop	{r7, pc}
    8880:	00007d47 	.word	0x00007d47
    8884:	00007d9d 	.word	0x00007d9d
    8888:	00007d65 	.word	0x00007d65
    888c:	20000a94 	.word	0x20000a94

00008890 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    8890:	b580      	push	{r7, lr}
    8892:	b082      	sub	sp, #8
    8894:	af00      	add	r7, sp, #0
	bool     rc    = true;
    8896:	2301      	movs	r3, #1
    8898:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    889a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    889e:	4b22      	ldr	r3, [pc, #136]	; (8928 <_usb_d_dev_handle_nep+0x98>)
    88a0:	4798      	blx	r3
    88a2:	4603      	mov	r3, r0
    88a4:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    88a6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    88aa:	4b20      	ldr	r3, [pc, #128]	; (892c <_usb_d_dev_handle_nep+0x9c>)
    88ac:	4798      	blx	r3
    88ae:	4603      	mov	r3, r0
    88b0:	461a      	mov	r2, r3
    88b2:	88bb      	ldrh	r3, [r7, #4]
    88b4:	4013      	ands	r3, r2
    88b6:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    88b8:	88bb      	ldrh	r3, [r7, #4]
    88ba:	f003 0304 	and.w	r3, r3, #4
    88be:	2b00      	cmp	r3, #0
    88c0:	d003      	beq.n	88ca <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    88c2:	4b1b      	ldr	r3, [pc, #108]	; (8930 <_usb_d_dev_handle_nep+0xa0>)
    88c4:	4798      	blx	r3
		return true;
    88c6:	2301      	movs	r3, #1
    88c8:	e02a      	b.n	8920 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    88ca:	88bb      	ldrh	r3, [r7, #4]
    88cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    88d0:	2b00      	cmp	r3, #0
    88d2:	d002      	beq.n	88da <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    88d4:	4b17      	ldr	r3, [pc, #92]	; (8934 <_usb_d_dev_handle_nep+0xa4>)
    88d6:	4798      	blx	r3
    88d8:	e021      	b.n	891e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    88da:	88bb      	ldrh	r3, [r7, #4]
    88dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    88e0:	2b00      	cmp	r3, #0
    88e2:	d002      	beq.n	88ea <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    88e4:	4b14      	ldr	r3, [pc, #80]	; (8938 <_usb_d_dev_handle_nep+0xa8>)
    88e6:	4798      	blx	r3
    88e8:	e019      	b.n	891e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    88ea:	88bb      	ldrh	r3, [r7, #4]
    88ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
    88f0:	2b00      	cmp	r3, #0
    88f2:	d002      	beq.n	88fa <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    88f4:	4b11      	ldr	r3, [pc, #68]	; (893c <_usb_d_dev_handle_nep+0xac>)
    88f6:	4798      	blx	r3
    88f8:	e011      	b.n	891e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    88fa:	88bb      	ldrh	r3, [r7, #4]
    88fc:	f003 0308 	and.w	r3, r3, #8
    8900:	2b00      	cmp	r3, #0
    8902:	d002      	beq.n	890a <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    8904:	4b0e      	ldr	r3, [pc, #56]	; (8940 <_usb_d_dev_handle_nep+0xb0>)
    8906:	4798      	blx	r3
    8908:	e009      	b.n	891e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    890a:	88bb      	ldrh	r3, [r7, #4]
    890c:	f003 0301 	and.w	r3, r3, #1
    8910:	2b00      	cmp	r3, #0
    8912:	d002      	beq.n	891a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    8914:	4b0b      	ldr	r3, [pc, #44]	; (8944 <_usb_d_dev_handle_nep+0xb4>)
    8916:	4798      	blx	r3
    8918:	e001      	b.n	891e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    891a:	2300      	movs	r3, #0
    891c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    891e:	79fb      	ldrb	r3, [r7, #7]
}
    8920:	4618      	mov	r0, r3
    8922:	3708      	adds	r7, #8
    8924:	46bd      	mov	sp, r7
    8926:	bd80      	pop	{r7, pc}
    8928:	00007d2d 	.word	0x00007d2d
    892c:	00007d83 	.word	0x00007d83
    8930:	000086d1 	.word	0x000086d1
    8934:	000086f1 	.word	0x000086f1
    8938:	00008781 	.word	0x00008781
    893c:	000087a5 	.word	0x000087a5
    8940:	000087f1 	.word	0x000087f1
    8944:	0000884d 	.word	0x0000884d

00008948 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8948:	b590      	push	{r4, r7, lr}
    894a:	b089      	sub	sp, #36	; 0x24
    894c:	af00      	add	r7, sp, #0
    894e:	6078      	str	r0, [r7, #4]
    8950:	460b      	mov	r3, r1
    8952:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    8954:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8958:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    895a:	687b      	ldr	r3, [r7, #4]
    895c:	7c9b      	ldrb	r3, [r3, #18]
    895e:	f003 030f 	and.w	r3, r3, #15
    8962:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8964:	7dfb      	ldrb	r3, [r7, #23]
    8966:	015b      	lsls	r3, r3, #5
    8968:	4a73      	ldr	r2, [pc, #460]	; (8b38 <_usb_d_dev_in_next+0x1f0>)
    896a:	4413      	add	r3, r2
    896c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    896e:	78fb      	ldrb	r3, [r7, #3]
    8970:	2b00      	cmp	r3, #0
    8972:	d006      	beq.n	8982 <_usb_d_dev_in_next+0x3a>
    8974:	693b      	ldr	r3, [r7, #16]
    8976:	3310      	adds	r3, #16
    8978:	685b      	ldr	r3, [r3, #4]
    897a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    897e:	b29b      	uxth	r3, r3
    8980:	e000      	b.n	8984 <_usb_d_dev_in_next+0x3c>
    8982:	2300      	movs	r3, #0
    8984:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8986:	687b      	ldr	r3, [r7, #4]
    8988:	8a1b      	ldrh	r3, [r3, #16]
    898a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    898e:	4293      	cmp	r3, r2
    8990:	d103      	bne.n	899a <_usb_d_dev_in_next+0x52>
    8992:	687b      	ldr	r3, [r7, #4]
    8994:	8a1b      	ldrh	r3, [r3, #16]
    8996:	b21b      	sxth	r3, r3
    8998:	e004      	b.n	89a4 <_usb_d_dev_in_next+0x5c>
    899a:	687b      	ldr	r3, [r7, #4]
    899c:	8a1b      	ldrh	r3, [r3, #16]
    899e:	3b01      	subs	r3, #1
    89a0:	b29b      	uxth	r3, r3
    89a2:	b21b      	sxth	r3, r3
    89a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    89a8:	4013      	ands	r3, r2
    89aa:	b21b      	sxth	r3, r3
    89ac:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    89ae:	2300      	movs	r3, #0
    89b0:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    89b2:	687b      	ldr	r3, [r7, #4]
    89b4:	7cdb      	ldrb	r3, [r3, #19]
    89b6:	f003 0307 	and.w	r3, r3, #7
    89ba:	b2db      	uxtb	r3, r3
    89bc:	2b01      	cmp	r3, #1
    89be:	bf0c      	ite	eq
    89c0:	2301      	moveq	r3, #1
    89c2:	2300      	movne	r3, #0
    89c4:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    89c6:	78fb      	ldrb	r3, [r7, #3]
    89c8:	2b00      	cmp	r3, #0
    89ca:	d004      	beq.n	89d6 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    89cc:	7dfb      	ldrb	r3, [r7, #23]
    89ce:	2101      	movs	r1, #1
    89d0:	4618      	mov	r0, r3
    89d2:	4b5a      	ldr	r3, [pc, #360]	; (8b3c <_usb_d_dev_in_next+0x1f4>)
    89d4:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    89d6:	687b      	ldr	r3, [r7, #4]
    89d8:	689a      	ldr	r2, [r3, #8]
    89da:	89fb      	ldrh	r3, [r7, #14]
    89dc:	441a      	add	r2, r3
    89de:	687b      	ldr	r3, [r7, #4]
    89e0:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    89e2:	687b      	ldr	r3, [r7, #4]
    89e4:	689a      	ldr	r2, [r3, #8]
    89e6:	687b      	ldr	r3, [r7, #4]
    89e8:	685b      	ldr	r3, [r3, #4]
    89ea:	429a      	cmp	r2, r3
    89ec:	d243      	bcs.n	8a76 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    89ee:	687b      	ldr	r3, [r7, #4]
    89f0:	685b      	ldr	r3, [r3, #4]
    89f2:	b29a      	uxth	r2, r3
    89f4:	687b      	ldr	r3, [r7, #4]
    89f6:	689b      	ldr	r3, [r3, #8]
    89f8:	b29b      	uxth	r3, r3
    89fa:	1ad3      	subs	r3, r2, r3
    89fc:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    89fe:	687b      	ldr	r3, [r7, #4]
    8a00:	7cdb      	ldrb	r3, [r3, #19]
    8a02:	f003 0320 	and.w	r3, r3, #32
    8a06:	b2db      	uxtb	r3, r3
    8a08:	2b00      	cmp	r3, #0
    8a0a:	d01b      	beq.n	8a44 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    8a0c:	687b      	ldr	r3, [r7, #4]
    8a0e:	8a1b      	ldrh	r3, [r3, #16]
    8a10:	8bfa      	ldrh	r2, [r7, #30]
    8a12:	429a      	cmp	r2, r3
    8a14:	d902      	bls.n	8a1c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    8a16:	687b      	ldr	r3, [r7, #4]
    8a18:	8a1b      	ldrh	r3, [r3, #16]
    8a1a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8a1c:	687b      	ldr	r3, [r7, #4]
    8a1e:	68d8      	ldr	r0, [r3, #12]
    8a20:	687b      	ldr	r3, [r7, #4]
    8a22:	681a      	ldr	r2, [r3, #0]
    8a24:	687b      	ldr	r3, [r7, #4]
    8a26:	689b      	ldr	r3, [r3, #8]
    8a28:	4413      	add	r3, r2
    8a2a:	8bfa      	ldrh	r2, [r7, #30]
    8a2c:	4619      	mov	r1, r3
    8a2e:	4b44      	ldr	r3, [pc, #272]	; (8b40 <_usb_d_dev_in_next+0x1f8>)
    8a30:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8a32:	687b      	ldr	r3, [r7, #4]
    8a34:	68db      	ldr	r3, [r3, #12]
    8a36:	461a      	mov	r2, r3
    8a38:	7dfb      	ldrb	r3, [r7, #23]
    8a3a:	2101      	movs	r1, #1
    8a3c:	4618      	mov	r0, r3
    8a3e:	4b41      	ldr	r3, [pc, #260]	; (8b44 <_usb_d_dev_in_next+0x1fc>)
    8a40:	4798      	blx	r3
    8a42:	e011      	b.n	8a68 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    8a44:	8bfb      	ldrh	r3, [r7, #30]
    8a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8a4a:	d902      	bls.n	8a52 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    8a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8a50:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8a52:	687b      	ldr	r3, [r7, #4]
    8a54:	681a      	ldr	r2, [r3, #0]
    8a56:	687b      	ldr	r3, [r7, #4]
    8a58:	689b      	ldr	r3, [r3, #8]
    8a5a:	4413      	add	r3, r2
    8a5c:	461a      	mov	r2, r3
    8a5e:	7dfb      	ldrb	r3, [r7, #23]
    8a60:	2101      	movs	r1, #1
    8a62:	4618      	mov	r0, r3
    8a64:	4b37      	ldr	r3, [pc, #220]	; (8b44 <_usb_d_dev_in_next+0x1fc>)
    8a66:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    8a68:	8bfa      	ldrh	r2, [r7, #30]
    8a6a:	7df8      	ldrb	r0, [r7, #23]
    8a6c:	2300      	movs	r3, #0
    8a6e:	2101      	movs	r1, #1
    8a70:	4c35      	ldr	r4, [pc, #212]	; (8b48 <_usb_d_dev_in_next+0x200>)
    8a72:	47a0      	blx	r4
		goto _in_tx_exec;
    8a74:	e041      	b.n	8afa <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    8a76:	687b      	ldr	r3, [r7, #4]
    8a78:	7cdb      	ldrb	r3, [r3, #19]
    8a7a:	f003 0310 	and.w	r3, r3, #16
    8a7e:	b2db      	uxtb	r3, r3
    8a80:	2b00      	cmp	r3, #0
    8a82:	d00b      	beq.n	8a9c <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    8a84:	687a      	ldr	r2, [r7, #4]
    8a86:	7cd3      	ldrb	r3, [r2, #19]
    8a88:	f36f 1304 	bfc	r3, #4, #1
    8a8c:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    8a8e:	7df8      	ldrb	r0, [r7, #23]
    8a90:	2300      	movs	r3, #0
    8a92:	2200      	movs	r2, #0
    8a94:	2101      	movs	r1, #1
    8a96:	4c2c      	ldr	r4, [pc, #176]	; (8b48 <_usb_d_dev_in_next+0x200>)
    8a98:	47a0      	blx	r4
		goto _in_tx_exec;
    8a9a:	e02e      	b.n	8afa <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    8a9c:	7afb      	ldrb	r3, [r7, #11]
    8a9e:	2b00      	cmp	r3, #0
    8aa0:	d006      	beq.n	8ab0 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    8aa2:	7dfb      	ldrb	r3, [r7, #23]
    8aa4:	224b      	movs	r2, #75	; 0x4b
    8aa6:	4619      	mov	r1, r3
    8aa8:	69b8      	ldr	r0, [r7, #24]
    8aaa:	4b28      	ldr	r3, [pc, #160]	; (8b4c <_usb_d_dev_in_next+0x204>)
    8aac:	4798      	blx	r3
    8aae:	e005      	b.n	8abc <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    8ab0:	7dfb      	ldrb	r3, [r7, #23]
    8ab2:	224a      	movs	r2, #74	; 0x4a
    8ab4:	4619      	mov	r1, r3
    8ab6:	69b8      	ldr	r0, [r7, #24]
    8ab8:	4b24      	ldr	r3, [pc, #144]	; (8b4c <_usb_d_dev_in_next+0x204>)
    8aba:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    8abc:	687b      	ldr	r3, [r7, #4]
    8abe:	8a1b      	ldrh	r3, [r3, #16]
    8ac0:	89ba      	ldrh	r2, [r7, #12]
    8ac2:	429a      	cmp	r2, r3
    8ac4:	d114      	bne.n	8af0 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    8ac6:	687a      	ldr	r2, [r7, #4]
    8ac8:	7cd3      	ldrb	r3, [r2, #19]
    8aca:	f36f 1386 	bfc	r3, #6, #1
    8ace:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8ad0:	4b1f      	ldr	r3, [pc, #124]	; (8b50 <_usb_d_dev_in_next+0x208>)
    8ad2:	68db      	ldr	r3, [r3, #12]
    8ad4:	687a      	ldr	r2, [r7, #4]
    8ad6:	7c90      	ldrb	r0, [r2, #18]
    8ad8:	687a      	ldr	r2, [r7, #4]
    8ada:	6892      	ldr	r2, [r2, #8]
    8adc:	4611      	mov	r1, r2
    8ade:	4798      	blx	r3
    8ae0:	4603      	mov	r3, r0
    8ae2:	2b00      	cmp	r3, #0
    8ae4:	d124      	bne.n	8b30 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    8ae6:	687a      	ldr	r2, [r7, #4]
    8ae8:	7cd3      	ldrb	r3, [r2, #19]
    8aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8aee:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8af0:	2100      	movs	r1, #0
    8af2:	6878      	ldr	r0, [r7, #4]
    8af4:	4b17      	ldr	r3, [pc, #92]	; (8b54 <_usb_d_dev_in_next+0x20c>)
    8af6:	4798      	blx	r3
	return;
    8af8:	e01b      	b.n	8b32 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    8afa:	78fb      	ldrb	r3, [r7, #3]
    8afc:	f083 0301 	eor.w	r3, r3, #1
    8b00:	b2db      	uxtb	r3, r3
    8b02:	2b00      	cmp	r3, #0
    8b04:	d00d      	beq.n	8b22 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    8b06:	7afb      	ldrb	r3, [r7, #11]
    8b08:	2b00      	cmp	r3, #0
    8b0a:	d002      	beq.n	8b12 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    8b0c:	234e      	movs	r3, #78	; 0x4e
    8b0e:	777b      	strb	r3, [r7, #29]
    8b10:	e001      	b.n	8b16 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    8b12:	234a      	movs	r3, #74	; 0x4a
    8b14:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8b16:	7f7a      	ldrb	r2, [r7, #29]
    8b18:	7dfb      	ldrb	r3, [r7, #23]
    8b1a:	4619      	mov	r1, r3
    8b1c:	69b8      	ldr	r0, [r7, #24]
    8b1e:	4b0e      	ldr	r3, [pc, #56]	; (8b58 <_usb_d_dev_in_next+0x210>)
    8b20:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    8b22:	7dfb      	ldrb	r3, [r7, #23]
    8b24:	2201      	movs	r2, #1
    8b26:	2101      	movs	r1, #1
    8b28:	4618      	mov	r0, r3
    8b2a:	4b0c      	ldr	r3, [pc, #48]	; (8b5c <_usb_d_dev_in_next+0x214>)
    8b2c:	4798      	blx	r3
    8b2e:	e000      	b.n	8b32 <_usb_d_dev_in_next+0x1ea>
			return;
    8b30:	bf00      	nop
}
    8b32:	3724      	adds	r7, #36	; 0x24
    8b34:	46bd      	mov	sp, r7
    8b36:	bd90      	pop	{r4, r7, pc}
    8b38:	20000b5c 	.word	0x20000b5c
    8b3c:	00008341 	.word	0x00008341
    8b40:	0000cc25 	.word	0x0000cc25
    8b44:	0000836d 	.word	0x0000836d
    8b48:	000084b5 	.word	0x000084b5
    8b4c:	00007c4d 	.word	0x00007c4d
    8b50:	20000a94 	.word	0x20000a94
    8b54:	00009c71 	.word	0x00009c71
    8b58:	00007c21 	.word	0x00007c21
    8b5c:	0000856d 	.word	0x0000856d

00008b60 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8b60:	b590      	push	{r4, r7, lr}
    8b62:	b08b      	sub	sp, #44	; 0x2c
    8b64:	af00      	add	r7, sp, #0
    8b66:	6078      	str	r0, [r7, #4]
    8b68:	460b      	mov	r3, r1
    8b6a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    8b6c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8b70:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8b72:	687b      	ldr	r3, [r7, #4]
    8b74:	7c9b      	ldrb	r3, [r3, #18]
    8b76:	f003 030f 	and.w	r3, r3, #15
    8b7a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8b7c:	7ffb      	ldrb	r3, [r7, #31]
    8b7e:	015b      	lsls	r3, r3, #5
    8b80:	4a94      	ldr	r2, [pc, #592]	; (8dd4 <_usb_d_dev_out_next+0x274>)
    8b82:	4413      	add	r3, r2
    8b84:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8b86:	78fb      	ldrb	r3, [r7, #3]
    8b88:	2b00      	cmp	r3, #0
    8b8a:	d005      	beq.n	8b98 <_usb_d_dev_out_next+0x38>
    8b8c:	69bb      	ldr	r3, [r7, #24]
    8b8e:	685b      	ldr	r3, [r3, #4]
    8b90:	f3c3 338d 	ubfx	r3, r3, #14, #14
    8b94:	b29b      	uxth	r3, r3
    8b96:	e000      	b.n	8b9a <_usb_d_dev_out_next+0x3a>
    8b98:	2300      	movs	r3, #0
    8b9a:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8b9c:	78fb      	ldrb	r3, [r7, #3]
    8b9e:	2b00      	cmp	r3, #0
    8ba0:	d005      	beq.n	8bae <_usb_d_dev_out_next+0x4e>
    8ba2:	69bb      	ldr	r3, [r7, #24]
    8ba4:	685b      	ldr	r3, [r3, #4]
    8ba6:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8baa:	b29b      	uxth	r3, r3
    8bac:	e000      	b.n	8bb0 <_usb_d_dev_out_next+0x50>
    8bae:	2300      	movs	r3, #0
    8bb0:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8bb2:	687b      	ldr	r3, [r7, #4]
    8bb4:	8a1b      	ldrh	r3, [r3, #16]
    8bb6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8bba:	4293      	cmp	r3, r2
    8bbc:	d004      	beq.n	8bc8 <_usb_d_dev_out_next+0x68>
    8bbe:	687b      	ldr	r3, [r7, #4]
    8bc0:	8a1b      	ldrh	r3, [r3, #16]
    8bc2:	3b01      	subs	r3, #1
    8bc4:	b29b      	uxth	r3, r3
    8bc6:	e001      	b.n	8bcc <_usb_d_dev_out_next+0x6c>
    8bc8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8bcc:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    8bce:	8aba      	ldrh	r2, [r7, #20]
    8bd0:	8a7b      	ldrh	r3, [r7, #18]
    8bd2:	4013      	ands	r3, r2
    8bd4:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8bd6:	687b      	ldr	r3, [r7, #4]
    8bd8:	7cdb      	ldrb	r3, [r3, #19]
    8bda:	f003 0307 	and.w	r3, r3, #7
    8bde:	b2db      	uxtb	r3, r3
    8be0:	2b01      	cmp	r3, #1
    8be2:	bf0c      	ite	eq
    8be4:	2301      	moveq	r3, #1
    8be6:	2300      	movne	r3, #0
    8be8:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    8bea:	78fb      	ldrb	r3, [r7, #3]
    8bec:	2b00      	cmp	r3, #0
    8bee:	d004      	beq.n	8bfa <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    8bf0:	7ffb      	ldrb	r3, [r7, #31]
    8bf2:	2100      	movs	r1, #0
    8bf4:	4618      	mov	r0, r3
    8bf6:	4b78      	ldr	r3, [pc, #480]	; (8dd8 <_usb_d_dev_out_next+0x278>)
    8bf8:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8bfa:	687b      	ldr	r3, [r7, #4]
    8bfc:	7cdb      	ldrb	r3, [r3, #19]
    8bfe:	f003 0320 	and.w	r3, r3, #32
    8c02:	b2db      	uxtb	r3, r3
    8c04:	2b00      	cmp	r3, #0
    8c06:	d01c      	beq.n	8c42 <_usb_d_dev_out_next+0xe2>
    8c08:	687b      	ldr	r3, [r7, #4]
    8c0a:	685b      	ldr	r3, [r3, #4]
    8c0c:	2b00      	cmp	r3, #0
    8c0e:	d018      	beq.n	8c42 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8c10:	687b      	ldr	r3, [r7, #4]
    8c12:	685b      	ldr	r3, [r3, #4]
    8c14:	b29a      	uxth	r2, r3
    8c16:	687b      	ldr	r3, [r7, #4]
    8c18:	689b      	ldr	r3, [r3, #8]
    8c1a:	b29b      	uxth	r3, r3
    8c1c:	1ad3      	subs	r3, r2, r3
    8c1e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    8c20:	687b      	ldr	r3, [r7, #4]
    8c22:	681a      	ldr	r2, [r3, #0]
    8c24:	687b      	ldr	r3, [r7, #4]
    8c26:	689b      	ldr	r3, [r3, #8]
    8c28:	18d0      	adds	r0, r2, r3
    8c2a:	687b      	ldr	r3, [r7, #4]
    8c2c:	68d9      	ldr	r1, [r3, #12]
    8c2e:	89ba      	ldrh	r2, [r7, #12]
    8c30:	8a3b      	ldrh	r3, [r7, #16]
    8c32:	429a      	cmp	r2, r3
    8c34:	d901      	bls.n	8c3a <_usb_d_dev_out_next+0xda>
    8c36:	8a3b      	ldrh	r3, [r7, #16]
    8c38:	e000      	b.n	8c3c <_usb_d_dev_out_next+0xdc>
    8c3a:	89bb      	ldrh	r3, [r7, #12]
    8c3c:	461a      	mov	r2, r3
    8c3e:	4b67      	ldr	r3, [pc, #412]	; (8ddc <_usb_d_dev_out_next+0x27c>)
    8c40:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8c42:	687b      	ldr	r3, [r7, #4]
    8c44:	685b      	ldr	r3, [r3, #4]
    8c46:	2b00      	cmp	r3, #0
    8c48:	d121      	bne.n	8c8e <_usb_d_dev_out_next+0x12e>
    8c4a:	687b      	ldr	r3, [r7, #4]
    8c4c:	7cdb      	ldrb	r3, [r3, #19]
    8c4e:	f003 0310 	and.w	r3, r3, #16
    8c52:	b2db      	uxtb	r3, r3
    8c54:	2b00      	cmp	r3, #0
    8c56:	d01a      	beq.n	8c8e <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    8c58:	687a      	ldr	r2, [r7, #4]
    8c5a:	7cd3      	ldrb	r3, [r2, #19]
    8c5c:	f36f 1304 	bfc	r3, #4, #1
    8c60:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    8c62:	687a      	ldr	r2, [r7, #4]
    8c64:	7cd3      	ldrb	r3, [r2, #19]
    8c66:	f043 0320 	orr.w	r3, r3, #32
    8c6a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8c6c:	687b      	ldr	r3, [r7, #4]
    8c6e:	68db      	ldr	r3, [r3, #12]
    8c70:	461a      	mov	r2, r3
    8c72:	7ffb      	ldrb	r3, [r7, #31]
    8c74:	2100      	movs	r1, #0
    8c76:	4618      	mov	r0, r3
    8c78:	4b59      	ldr	r3, [pc, #356]	; (8de0 <_usb_d_dev_out_next+0x280>)
    8c7a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    8c7c:	687b      	ldr	r3, [r7, #4]
    8c7e:	8a1b      	ldrh	r3, [r3, #16]
    8c80:	461a      	mov	r2, r3
    8c82:	7ff8      	ldrb	r0, [r7, #31]
    8c84:	2300      	movs	r3, #0
    8c86:	2100      	movs	r1, #0
    8c88:	4c56      	ldr	r4, [pc, #344]	; (8de4 <_usb_d_dev_out_next+0x284>)
    8c8a:	47a0      	blx	r4
		goto _out_rx_exec;
    8c8c:	e090      	b.n	8db0 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    8c8e:	78fb      	ldrb	r3, [r7, #3]
    8c90:	2b00      	cmp	r3, #0
    8c92:	d010      	beq.n	8cb6 <_usb_d_dev_out_next+0x156>
    8c94:	687b      	ldr	r3, [r7, #4]
    8c96:	8a1b      	ldrh	r3, [r3, #16]
    8c98:	8a3a      	ldrh	r2, [r7, #16]
    8c9a:	429a      	cmp	r2, r3
    8c9c:	d20b      	bcs.n	8cb6 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    8c9e:	687a      	ldr	r2, [r7, #4]
    8ca0:	7cd3      	ldrb	r3, [r2, #19]
    8ca2:	f36f 1304 	bfc	r3, #4, #1
    8ca6:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    8ca8:	687b      	ldr	r3, [r7, #4]
    8caa:	689a      	ldr	r2, [r3, #8]
    8cac:	8abb      	ldrh	r3, [r7, #20]
    8cae:	441a      	add	r2, r3
    8cb0:	687b      	ldr	r3, [r7, #4]
    8cb2:	609a      	str	r2, [r3, #8]
    8cb4:	e05c      	b.n	8d70 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    8cb6:	687b      	ldr	r3, [r7, #4]
    8cb8:	689a      	ldr	r2, [r3, #8]
    8cba:	8afb      	ldrh	r3, [r7, #22]
    8cbc:	441a      	add	r2, r3
    8cbe:	687b      	ldr	r3, [r7, #4]
    8cc0:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    8cc2:	687b      	ldr	r3, [r7, #4]
    8cc4:	689a      	ldr	r2, [r3, #8]
    8cc6:	687b      	ldr	r3, [r7, #4]
    8cc8:	685b      	ldr	r3, [r3, #4]
    8cca:	429a      	cmp	r2, r3
    8ccc:	d250      	bcs.n	8d70 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    8cce:	687b      	ldr	r3, [r7, #4]
    8cd0:	685b      	ldr	r3, [r3, #4]
    8cd2:	b29a      	uxth	r2, r3
    8cd4:	687b      	ldr	r3, [r7, #4]
    8cd6:	689b      	ldr	r3, [r3, #8]
    8cd8:	b29b      	uxth	r3, r3
    8cda:	1ad3      	subs	r3, r2, r3
    8cdc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    8cde:	687b      	ldr	r3, [r7, #4]
    8ce0:	7cdb      	ldrb	r3, [r3, #19]
    8ce2:	f003 0320 	and.w	r3, r3, #32
    8ce6:	b2db      	uxtb	r3, r3
    8ce8:	2b00      	cmp	r3, #0
    8cea:	d010      	beq.n	8d0e <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    8cec:	687b      	ldr	r3, [r7, #4]
    8cee:	8a1b      	ldrh	r3, [r3, #16]
    8cf0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8cf2:	429a      	cmp	r2, r3
    8cf4:	d902      	bls.n	8cfc <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    8cf6:	687b      	ldr	r3, [r7, #4]
    8cf8:	8a1b      	ldrh	r3, [r3, #16]
    8cfa:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8cfc:	687b      	ldr	r3, [r7, #4]
    8cfe:	68db      	ldr	r3, [r3, #12]
    8d00:	461a      	mov	r2, r3
    8d02:	7ffb      	ldrb	r3, [r7, #31]
    8d04:	2100      	movs	r1, #0
    8d06:	4618      	mov	r0, r3
    8d08:	4b35      	ldr	r3, [pc, #212]	; (8de0 <_usb_d_dev_out_next+0x280>)
    8d0a:	4798      	blx	r3
    8d0c:	e029      	b.n	8d62 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    8d0e:	687b      	ldr	r3, [r7, #4]
    8d10:	8a1b      	ldrh	r3, [r3, #16]
    8d12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8d14:	429a      	cmp	r2, r3
    8d16:	d90f      	bls.n	8d38 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    8d18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    8d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8d1e:	d903      	bls.n	8d28 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    8d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8d24:	84fb      	strh	r3, [r7, #38]	; 0x26
    8d26:	e011      	b.n	8d4c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    8d28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8d2a:	8a7b      	ldrh	r3, [r7, #18]
    8d2c:	4013      	ands	r3, r2
    8d2e:	b29b      	uxth	r3, r3
    8d30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8d32:	1ad3      	subs	r3, r2, r3
    8d34:	84fb      	strh	r3, [r7, #38]	; 0x26
    8d36:	e009      	b.n	8d4c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    8d38:	687b      	ldr	r3, [r7, #4]
    8d3a:	8a1b      	ldrh	r3, [r3, #16]
    8d3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8d3e:	429a      	cmp	r2, r3
    8d40:	d204      	bcs.n	8d4c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    8d42:	687a      	ldr	r2, [r7, #4]
    8d44:	7cd3      	ldrb	r3, [r2, #19]
    8d46:	f043 0320 	orr.w	r3, r3, #32
    8d4a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8d4c:	687b      	ldr	r3, [r7, #4]
    8d4e:	681a      	ldr	r2, [r3, #0]
    8d50:	687b      	ldr	r3, [r7, #4]
    8d52:	689b      	ldr	r3, [r3, #8]
    8d54:	4413      	add	r3, r2
    8d56:	461a      	mov	r2, r3
    8d58:	7ffb      	ldrb	r3, [r7, #31]
    8d5a:	2100      	movs	r1, #0
    8d5c:	4618      	mov	r0, r3
    8d5e:	4b20      	ldr	r3, [pc, #128]	; (8de0 <_usb_d_dev_out_next+0x280>)
    8d60:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    8d62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8d64:	7ff8      	ldrb	r0, [r7, #31]
    8d66:	2300      	movs	r3, #0
    8d68:	2100      	movs	r1, #0
    8d6a:	4c1e      	ldr	r4, [pc, #120]	; (8de4 <_usb_d_dev_out_next+0x284>)
    8d6c:	47a0      	blx	r4
			goto _out_rx_exec;
    8d6e:	e01f      	b.n	8db0 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    8d70:	7bfb      	ldrb	r3, [r7, #15]
    8d72:	2b00      	cmp	r3, #0
    8d74:	d006      	beq.n	8d84 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    8d76:	7ffb      	ldrb	r3, [r7, #31]
    8d78:	222d      	movs	r2, #45	; 0x2d
    8d7a:	4619      	mov	r1, r3
    8d7c:	6a38      	ldr	r0, [r7, #32]
    8d7e:	4b1a      	ldr	r3, [pc, #104]	; (8de8 <_usb_d_dev_out_next+0x288>)
    8d80:	4798      	blx	r3
    8d82:	e005      	b.n	8d90 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    8d84:	7ffb      	ldrb	r3, [r7, #31]
    8d86:	2225      	movs	r2, #37	; 0x25
    8d88:	4619      	mov	r1, r3
    8d8a:	6a38      	ldr	r0, [r7, #32]
    8d8c:	4b16      	ldr	r3, [pc, #88]	; (8de8 <_usb_d_dev_out_next+0x288>)
    8d8e:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    8d90:	7ffb      	ldrb	r3, [r7, #31]
    8d92:	2b00      	cmp	r3, #0
    8d94:	d107      	bne.n	8da6 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8d96:	687b      	ldr	r3, [r7, #4]
    8d98:	68db      	ldr	r3, [r3, #12]
    8d9a:	461a      	mov	r2, r3
    8d9c:	7ffb      	ldrb	r3, [r7, #31]
    8d9e:	2100      	movs	r1, #0
    8da0:	4618      	mov	r0, r3
    8da2:	4b0f      	ldr	r3, [pc, #60]	; (8de0 <_usb_d_dev_out_next+0x280>)
    8da4:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8da6:	2100      	movs	r1, #0
    8da8:	6878      	ldr	r0, [r7, #4]
    8daa:	4b10      	ldr	r3, [pc, #64]	; (8dec <_usb_d_dev_out_next+0x28c>)
    8dac:	4798      	blx	r3
	return;
    8dae:	e031      	b.n	8e14 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    8db0:	78fb      	ldrb	r3, [r7, #3]
    8db2:	f083 0301 	eor.w	r3, r3, #1
    8db6:	b2db      	uxtb	r3, r3
    8db8:	2b00      	cmp	r3, #0
    8dba:	d025      	beq.n	8e08 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    8dbc:	7bfb      	ldrb	r3, [r7, #15]
    8dbe:	2b00      	cmp	r3, #0
    8dc0:	d018      	beq.n	8df4 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    8dc2:	7ffb      	ldrb	r3, [r7, #31]
    8dc4:	2101      	movs	r1, #1
    8dc6:	4618      	mov	r0, r3
    8dc8:	4b09      	ldr	r3, [pc, #36]	; (8df0 <_usb_d_dev_out_next+0x290>)
    8dca:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    8dcc:	232d      	movs	r3, #45	; 0x2d
    8dce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    8dd2:	e012      	b.n	8dfa <_usb_d_dev_out_next+0x29a>
    8dd4:	20000b5c 	.word	0x20000b5c
    8dd8:	00008341 	.word	0x00008341
    8ddc:	0000cc25 	.word	0x0000cc25
    8de0:	0000836d 	.word	0x0000836d
    8de4:	000084f5 	.word	0x000084f5
    8de8:	00007c4d 	.word	0x00007c4d
    8dec:	00009c71 	.word	0x00009c71
    8df0:	00008535 	.word	0x00008535
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    8df4:	2325      	movs	r3, #37	; 0x25
    8df6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8dfa:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    8dfe:	7ffb      	ldrb	r3, [r7, #31]
    8e00:	4619      	mov	r1, r3
    8e02:	6a38      	ldr	r0, [r7, #32]
    8e04:	4b05      	ldr	r3, [pc, #20]	; (8e1c <_usb_d_dev_out_next+0x2bc>)
    8e06:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    8e08:	7ffb      	ldrb	r3, [r7, #31]
    8e0a:	2201      	movs	r2, #1
    8e0c:	2100      	movs	r1, #0
    8e0e:	4618      	mov	r0, r3
    8e10:	4b03      	ldr	r3, [pc, #12]	; (8e20 <_usb_d_dev_out_next+0x2c0>)
    8e12:	4798      	blx	r3
}
    8e14:	372c      	adds	r7, #44	; 0x2c
    8e16:	46bd      	mov	sp, r7
    8e18:	bd90      	pop	{r4, r7, pc}
    8e1a:	bf00      	nop
    8e1c:	00007c21 	.word	0x00007c21
    8e20:	000085c5 	.word	0x000085c5

00008e24 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    8e24:	b580      	push	{r7, lr}
    8e26:	b084      	sub	sp, #16
    8e28:	af00      	add	r7, sp, #0
    8e2a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    8e2c:	687b      	ldr	r3, [r7, #4]
    8e2e:	7c9b      	ldrb	r3, [r3, #18]
    8e30:	f003 030f 	and.w	r3, r3, #15
    8e34:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8e36:	687b      	ldr	r3, [r7, #4]
    8e38:	7cdb      	ldrb	r3, [r3, #19]
    8e3a:	f003 0307 	and.w	r3, r3, #7
    8e3e:	b2db      	uxtb	r3, r3
    8e40:	2b01      	cmp	r3, #1
    8e42:	bf0c      	ite	eq
    8e44:	2301      	moveq	r3, #1
    8e46:	2300      	movne	r3, #0
    8e48:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    8e4a:	7bbb      	ldrb	r3, [r7, #14]
    8e4c:	f083 0301 	eor.w	r3, r3, #1
    8e50:	b2db      	uxtb	r3, r3
    8e52:	2b00      	cmp	r3, #0
    8e54:	d008      	beq.n	8e68 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    8e56:	7bfb      	ldrb	r3, [r7, #15]
    8e58:	4618      	mov	r0, r3
    8e5a:	4b20      	ldr	r3, [pc, #128]	; (8edc <_usb_d_dev_handle_setup+0xb8>)
    8e5c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    8e5e:	7bfb      	ldrb	r3, [r7, #15]
    8e60:	4618      	mov	r0, r3
    8e62:	4b1f      	ldr	r3, [pc, #124]	; (8ee0 <_usb_d_dev_handle_setup+0xbc>)
    8e64:	4798      	blx	r3
		return;
    8e66:	e036      	b.n	8ed6 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    8e68:	687b      	ldr	r3, [r7, #4]
    8e6a:	7cdb      	ldrb	r3, [r3, #19]
    8e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8e70:	b2db      	uxtb	r3, r3
    8e72:	2b00      	cmp	r3, #0
    8e74:	d010      	beq.n	8e98 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    8e76:	687a      	ldr	r2, [r7, #4]
    8e78:	7cd3      	ldrb	r3, [r2, #19]
    8e7a:	f36f 1386 	bfc	r3, #6, #1
    8e7e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    8e80:	7bfb      	ldrb	r3, [r7, #15]
    8e82:	2200      	movs	r2, #0
    8e84:	2101      	movs	r1, #1
    8e86:	4618      	mov	r0, r3
    8e88:	4b16      	ldr	r3, [pc, #88]	; (8ee4 <_usb_d_dev_handle_setup+0xc0>)
    8e8a:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    8e8c:	7bfb      	ldrb	r3, [r7, #15]
    8e8e:	2200      	movs	r2, #0
    8e90:	2100      	movs	r1, #0
    8e92:	4618      	mov	r0, r3
    8e94:	4b14      	ldr	r3, [pc, #80]	; (8ee8 <_usb_d_dev_handle_setup+0xc4>)
    8e96:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    8e98:	687a      	ldr	r2, [r7, #4]
    8e9a:	7cd3      	ldrb	r3, [r2, #19]
    8e9c:	f36f 03c3 	bfc	r3, #3, #1
    8ea0:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    8ea2:	7bfb      	ldrb	r3, [r7, #15]
    8ea4:	2100      	movs	r1, #0
    8ea6:	4618      	mov	r0, r3
    8ea8:	4b10      	ldr	r3, [pc, #64]	; (8eec <_usb_d_dev_handle_setup+0xc8>)
    8eaa:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    8eac:	7bfb      	ldrb	r3, [r7, #15]
    8eae:	2101      	movs	r1, #1
    8eb0:	4618      	mov	r0, r3
    8eb2:	4b0e      	ldr	r3, [pc, #56]	; (8eec <_usb_d_dev_handle_setup+0xc8>)
    8eb4:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    8eb6:	7bfb      	ldrb	r3, [r7, #15]
    8eb8:	216f      	movs	r1, #111	; 0x6f
    8eba:	4618      	mov	r0, r3
    8ebc:	4b0c      	ldr	r3, [pc, #48]	; (8ef0 <_usb_d_dev_handle_setup+0xcc>)
    8ebe:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    8ec0:	7bfb      	ldrb	r3, [r7, #15]
    8ec2:	216f      	movs	r1, #111	; 0x6f
    8ec4:	4618      	mov	r0, r3
    8ec6:	4b0b      	ldr	r3, [pc, #44]	; (8ef4 <_usb_d_dev_handle_setup+0xd0>)
    8ec8:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    8eca:	4b0b      	ldr	r3, [pc, #44]	; (8ef8 <_usb_d_dev_handle_setup+0xd4>)
    8ecc:	689b      	ldr	r3, [r3, #8]
    8ece:	687a      	ldr	r2, [r7, #4]
    8ed0:	7c92      	ldrb	r2, [r2, #18]
    8ed2:	4610      	mov	r0, r2
    8ed4:	4798      	blx	r3
}
    8ed6:	3710      	adds	r7, #16
    8ed8:	46bd      	mov	sp, r7
    8eda:	bd80      	pop	{r7, pc}
    8edc:	000082c9 	.word	0x000082c9
    8ee0:	00008275 	.word	0x00008275
    8ee4:	0000856d 	.word	0x0000856d
    8ee8:	000085c5 	.word	0x000085c5
    8eec:	00008535 	.word	0x00008535
    8ef0:	00008075 	.word	0x00008075
    8ef4:	000080c5 	.word	0x000080c5
    8ef8:	20000a94 	.word	0x20000a94

00008efc <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    8efc:	b580      	push	{r7, lr}
    8efe:	b084      	sub	sp, #16
    8f00:	af00      	add	r7, sp, #0
    8f02:	6078      	str	r0, [r7, #4]
    8f04:	460b      	mov	r3, r1
    8f06:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8f08:	687b      	ldr	r3, [r7, #4]
    8f0a:	7c9b      	ldrb	r3, [r3, #18]
    8f0c:	f003 030f 	and.w	r3, r3, #15
    8f10:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    8f12:	78f9      	ldrb	r1, [r7, #3]
    8f14:	7bfb      	ldrb	r3, [r7, #15]
    8f16:	2200      	movs	r2, #0
    8f18:	4618      	mov	r0, r3
    8f1a:	4b07      	ldr	r3, [pc, #28]	; (8f38 <_usb_d_dev_handle_stall+0x3c>)
    8f1c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    8f1e:	4b07      	ldr	r3, [pc, #28]	; (8f3c <_usb_d_dev_handle_stall+0x40>)
    8f20:	691b      	ldr	r3, [r3, #16]
    8f22:	687a      	ldr	r2, [r7, #4]
    8f24:	7c90      	ldrb	r0, [r2, #18]
    8f26:	687a      	ldr	r2, [r7, #4]
    8f28:	6892      	ldr	r2, [r2, #8]
    8f2a:	2101      	movs	r1, #1
    8f2c:	4798      	blx	r3
}
    8f2e:	bf00      	nop
    8f30:	3710      	adds	r7, #16
    8f32:	46bd      	mov	sp, r7
    8f34:	bd80      	pop	{r7, pc}
    8f36:	bf00      	nop
    8f38:	00008229 	.word	0x00008229
    8f3c:	20000a94 	.word	0x20000a94

00008f40 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    8f40:	b580      	push	{r7, lr}
    8f42:	b088      	sub	sp, #32
    8f44:	af00      	add	r7, sp, #0
    8f46:	6078      	str	r0, [r7, #4]
    8f48:	460b      	mov	r3, r1
    8f4a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    8f4c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8f50:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    8f52:	687b      	ldr	r3, [r7, #4]
    8f54:	7c9b      	ldrb	r3, [r3, #18]
    8f56:	f003 030f 	and.w	r3, r3, #15
    8f5a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    8f5c:	4b61      	ldr	r3, [pc, #388]	; (90e4 <_usb_d_dev_handle_trfail+0x1a4>)
    8f5e:	881b      	ldrh	r3, [r3, #0]
    8f60:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    8f62:	7efb      	ldrb	r3, [r7, #27]
    8f64:	015b      	lsls	r3, r3, #5
    8f66:	4a60      	ldr	r2, [pc, #384]	; (90e8 <_usb_d_dev_handle_trfail+0x1a8>)
    8f68:	4413      	add	r3, r2
    8f6a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    8f6c:	78fb      	ldrb	r3, [r7, #3]
    8f6e:	2b00      	cmp	r3, #0
    8f70:	d006      	beq.n	8f80 <_usb_d_dev_handle_trfail+0x40>
    8f72:	7efb      	ldrb	r3, [r7, #27]
    8f74:	4619      	mov	r1, r3
    8f76:	69f8      	ldr	r0, [r7, #28]
    8f78:	4b5c      	ldr	r3, [pc, #368]	; (90ec <_usb_d_dev_handle_trfail+0x1ac>)
    8f7a:	4798      	blx	r3
    8f7c:	4603      	mov	r3, r0
    8f7e:	e005      	b.n	8f8c <_usb_d_dev_handle_trfail+0x4c>
    8f80:	7efb      	ldrb	r3, [r7, #27]
    8f82:	4619      	mov	r1, r3
    8f84:	69f8      	ldr	r0, [r7, #28]
    8f86:	4b5a      	ldr	r3, [pc, #360]	; (90f0 <_usb_d_dev_handle_trfail+0x1b0>)
    8f88:	4798      	blx	r3
    8f8a:	4603      	mov	r3, r0
    8f8c:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8f8e:	687b      	ldr	r3, [r7, #4]
    8f90:	7cdb      	ldrb	r3, [r3, #19]
    8f92:	f003 0307 	and.w	r3, r3, #7
    8f96:	b2db      	uxtb	r3, r3
    8f98:	2b01      	cmp	r3, #1
    8f9a:	bf0c      	ite	eq
    8f9c:	2301      	moveq	r3, #1
    8f9e:	2300      	movne	r3, #0
    8fa0:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    8fa2:	78fb      	ldrb	r3, [r7, #3]
    8fa4:	011b      	lsls	r3, r3, #4
    8fa6:	697a      	ldr	r2, [r7, #20]
    8fa8:	4413      	add	r3, r2
    8faa:	7a9b      	ldrb	r3, [r3, #10]
    8fac:	b2db      	uxtb	r3, r3
    8fae:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    8fb0:	7cfb      	ldrb	r3, [r7, #19]
    8fb2:	2b02      	cmp	r3, #2
    8fb4:	d12f      	bne.n	9016 <_usb_d_dev_handle_trfail+0xd6>
    8fb6:	7b3b      	ldrb	r3, [r7, #12]
    8fb8:	f003 0301 	and.w	r3, r3, #1
    8fbc:	b2db      	uxtb	r3, r3
    8fbe:	2b00      	cmp	r3, #0
    8fc0:	d029      	beq.n	9016 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    8fc2:	78fb      	ldrb	r3, [r7, #3]
    8fc4:	011b      	lsls	r3, r3, #4
    8fc6:	697a      	ldr	r2, [r7, #20]
    8fc8:	441a      	add	r2, r3
    8fca:	7a93      	ldrb	r3, [r2, #10]
    8fcc:	f36f 0300 	bfc	r3, #0, #1
    8fd0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8fd2:	78fb      	ldrb	r3, [r7, #3]
    8fd4:	f107 0220 	add.w	r2, r7, #32
    8fd8:	4413      	add	r3, r2
    8fda:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8fde:	7efb      	ldrb	r3, [r7, #27]
    8fe0:	4619      	mov	r1, r3
    8fe2:	69f8      	ldr	r0, [r7, #28]
    8fe4:	4b43      	ldr	r3, [pc, #268]	; (90f4 <_usb_d_dev_handle_trfail+0x1b4>)
    8fe6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    8fe8:	78fb      	ldrb	r3, [r7, #3]
    8fea:	f107 0220 	add.w	r2, r7, #32
    8fee:	4413      	add	r3, r2
    8ff0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8ff4:	7efb      	ldrb	r3, [r7, #27]
    8ff6:	4619      	mov	r1, r3
    8ff8:	69f8      	ldr	r0, [r7, #28]
    8ffa:	4b3f      	ldr	r3, [pc, #252]	; (90f8 <_usb_d_dev_handle_trfail+0x1b8>)
    8ffc:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    8ffe:	78fb      	ldrb	r3, [r7, #3]
    9000:	2b00      	cmp	r3, #0
    9002:	bf14      	ite	ne
    9004:	2301      	movne	r3, #1
    9006:	2300      	moveq	r3, #0
    9008:	b2db      	uxtb	r3, r3
    900a:	2204      	movs	r2, #4
    900c:	4619      	mov	r1, r3
    900e:	6878      	ldr	r0, [r7, #4]
    9010:	4b3a      	ldr	r3, [pc, #232]	; (90fc <_usb_d_dev_handle_trfail+0x1bc>)
    9012:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9014:	e062      	b.n	90dc <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9016:	7b3b      	ldrb	r3, [r7, #12]
    9018:	f003 0302 	and.w	r3, r3, #2
    901c:	b2db      	uxtb	r3, r3
    901e:	2b00      	cmp	r3, #0
    9020:	d040      	beq.n	90a4 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9022:	78fb      	ldrb	r3, [r7, #3]
    9024:	011b      	lsls	r3, r3, #4
    9026:	697a      	ldr	r2, [r7, #20]
    9028:	441a      	add	r2, r3
    902a:	7a93      	ldrb	r3, [r2, #10]
    902c:	f36f 0341 	bfc	r3, #1, #1
    9030:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9032:	78fb      	ldrb	r3, [r7, #3]
    9034:	f107 0220 	add.w	r2, r7, #32
    9038:	4413      	add	r3, r2
    903a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    903e:	7efb      	ldrb	r3, [r7, #27]
    9040:	4619      	mov	r1, r3
    9042:	69f8      	ldr	r0, [r7, #28]
    9044:	4b2b      	ldr	r3, [pc, #172]	; (90f4 <_usb_d_dev_handle_trfail+0x1b4>)
    9046:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9048:	78fb      	ldrb	r3, [r7, #3]
    904a:	f107 0220 	add.w	r2, r7, #32
    904e:	4413      	add	r3, r2
    9050:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9054:	7efb      	ldrb	r3, [r7, #27]
    9056:	4619      	mov	r1, r3
    9058:	69f8      	ldr	r0, [r7, #28]
    905a:	4b27      	ldr	r3, [pc, #156]	; (90f8 <_usb_d_dev_handle_trfail+0x1b8>)
    905c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    905e:	7cbb      	ldrb	r3, [r7, #18]
    9060:	2b00      	cmp	r3, #0
    9062:	d03b      	beq.n	90dc <_usb_d_dev_handle_trfail+0x19c>
    9064:	687b      	ldr	r3, [r7, #4]
    9066:	7cdb      	ldrb	r3, [r3, #19]
    9068:	f003 0340 	and.w	r3, r3, #64	; 0x40
    906c:	b2db      	uxtb	r3, r3
    906e:	2b00      	cmp	r3, #0
    9070:	d034      	beq.n	90dc <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9072:	687b      	ldr	r3, [r7, #4]
    9074:	7cdb      	ldrb	r3, [r3, #19]
    9076:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    907a:	b2db      	uxtb	r3, r3
    907c:	461a      	mov	r2, r3
    907e:	78fb      	ldrb	r3, [r7, #3]
    9080:	4293      	cmp	r3, r2
    9082:	d02b      	beq.n	90dc <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9084:	687b      	ldr	r3, [r7, #4]
    9086:	7cdb      	ldrb	r3, [r3, #19]
    9088:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    908c:	b2db      	uxtb	r3, r3
    908e:	2b00      	cmp	r3, #0
    9090:	bf14      	ite	ne
    9092:	2301      	movne	r3, #1
    9094:	2300      	moveq	r3, #0
    9096:	b2db      	uxtb	r3, r3
    9098:	2200      	movs	r2, #0
    909a:	4619      	mov	r1, r3
    909c:	6878      	ldr	r0, [r7, #4]
    909e:	4b17      	ldr	r3, [pc, #92]	; (90fc <_usb_d_dev_handle_trfail+0x1bc>)
    90a0:	4798      	blx	r3
}
    90a2:	e01b      	b.n	90dc <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    90a4:	78fa      	ldrb	r2, [r7, #3]
    90a6:	7efb      	ldrb	r3, [r7, #27]
    90a8:	4611      	mov	r1, r2
    90aa:	4618      	mov	r0, r3
    90ac:	4b14      	ldr	r3, [pc, #80]	; (9100 <_usb_d_dev_handle_trfail+0x1c0>)
    90ae:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    90b0:	78fb      	ldrb	r3, [r7, #3]
    90b2:	f107 0220 	add.w	r2, r7, #32
    90b6:	4413      	add	r3, r2
    90b8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    90bc:	7efb      	ldrb	r3, [r7, #27]
    90be:	4619      	mov	r1, r3
    90c0:	69f8      	ldr	r0, [r7, #28]
    90c2:	4b0c      	ldr	r3, [pc, #48]	; (90f4 <_usb_d_dev_handle_trfail+0x1b4>)
    90c4:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    90c6:	78fb      	ldrb	r3, [r7, #3]
    90c8:	f107 0220 	add.w	r2, r7, #32
    90cc:	4413      	add	r3, r2
    90ce:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    90d2:	7efb      	ldrb	r3, [r7, #27]
    90d4:	4619      	mov	r1, r3
    90d6:	69f8      	ldr	r0, [r7, #28]
    90d8:	4b07      	ldr	r3, [pc, #28]	; (90f8 <_usb_d_dev_handle_trfail+0x1b8>)
    90da:	4798      	blx	r3
}
    90dc:	bf00      	nop
    90de:	3720      	adds	r7, #32
    90e0:	46bd      	mov	sp, r7
    90e2:	bd80      	pop	{r7, pc}
    90e4:	0000d2a8 	.word	0x0000d2a8
    90e8:	20000b5c 	.word	0x20000b5c
    90ec:	00007ca9 	.word	0x00007ca9
    90f0:	00007c79 	.word	0x00007c79
    90f4:	00007b4d 	.word	0x00007b4d
    90f8:	00007c4d 	.word	0x00007c4d
    90fc:	00009cb9 	.word	0x00009cb9
    9100:	00008535 	.word	0x00008535

00009104 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9104:	b580      	push	{r7, lr}
    9106:	b082      	sub	sp, #8
    9108:	af00      	add	r7, sp, #0
    910a:	6078      	str	r0, [r7, #4]
    910c:	460b      	mov	r3, r1
    910e:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9110:	78fb      	ldrb	r3, [r7, #3]
    9112:	f003 0310 	and.w	r3, r3, #16
    9116:	2b00      	cmp	r3, #0
    9118:	d003      	beq.n	9122 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    911a:	6878      	ldr	r0, [r7, #4]
    911c:	4b0c      	ldr	r3, [pc, #48]	; (9150 <_usb_d_dev_trans_setup_isr+0x4c>)
    911e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9120:	e012      	b.n	9148 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9122:	78fb      	ldrb	r3, [r7, #3]
    9124:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9128:	2b00      	cmp	r3, #0
    912a:	d004      	beq.n	9136 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    912c:	2101      	movs	r1, #1
    912e:	6878      	ldr	r0, [r7, #4]
    9130:	4b08      	ldr	r3, [pc, #32]	; (9154 <_usb_d_dev_trans_setup_isr+0x50>)
    9132:	4798      	blx	r3
}
    9134:	e008      	b.n	9148 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9136:	78fb      	ldrb	r3, [r7, #3]
    9138:	f003 0320 	and.w	r3, r3, #32
    913c:	2b00      	cmp	r3, #0
    913e:	d003      	beq.n	9148 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9140:	2100      	movs	r1, #0
    9142:	6878      	ldr	r0, [r7, #4]
    9144:	4b03      	ldr	r3, [pc, #12]	; (9154 <_usb_d_dev_trans_setup_isr+0x50>)
    9146:	4798      	blx	r3
}
    9148:	bf00      	nop
    914a:	3708      	adds	r7, #8
    914c:	46bd      	mov	sp, r7
    914e:	bd80      	pop	{r7, pc}
    9150:	00008e25 	.word	0x00008e25
    9154:	00008efd 	.word	0x00008efd

00009158 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9158:	b580      	push	{r7, lr}
    915a:	b082      	sub	sp, #8
    915c:	af00      	add	r7, sp, #0
    915e:	6078      	str	r0, [r7, #4]
    9160:	460b      	mov	r3, r1
    9162:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9164:	78fb      	ldrb	r3, [r7, #3]
    9166:	f003 0340 	and.w	r3, r3, #64	; 0x40
    916a:	2b00      	cmp	r3, #0
    916c:	d004      	beq.n	9178 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    916e:	2101      	movs	r1, #1
    9170:	6878      	ldr	r0, [r7, #4]
    9172:	4b1a      	ldr	r3, [pc, #104]	; (91dc <_usb_d_dev_trans_in_isr+0x84>)
    9174:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9176:	e02c      	b.n	91d2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9178:	78fb      	ldrb	r3, [r7, #3]
    917a:	f003 0308 	and.w	r3, r3, #8
    917e:	2b00      	cmp	r3, #0
    9180:	d004      	beq.n	918c <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9182:	2101      	movs	r1, #1
    9184:	6878      	ldr	r0, [r7, #4]
    9186:	4b16      	ldr	r3, [pc, #88]	; (91e0 <_usb_d_dev_trans_in_isr+0x88>)
    9188:	4798      	blx	r3
}
    918a:	e022      	b.n	91d2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    918c:	78fb      	ldrb	r3, [r7, #3]
    918e:	f003 0302 	and.w	r3, r3, #2
    9192:	2b00      	cmp	r3, #0
    9194:	d004      	beq.n	91a0 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9196:	2101      	movs	r1, #1
    9198:	6878      	ldr	r0, [r7, #4]
    919a:	4b12      	ldr	r3, [pc, #72]	; (91e4 <_usb_d_dev_trans_in_isr+0x8c>)
    919c:	4798      	blx	r3
}
    919e:	e018      	b.n	91d2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    91a0:	687b      	ldr	r3, [r7, #4]
    91a2:	7cdb      	ldrb	r3, [r3, #19]
    91a4:	f003 0307 	and.w	r3, r3, #7
    91a8:	b2db      	uxtb	r3, r3
    91aa:	2b01      	cmp	r3, #1
    91ac:	d111      	bne.n	91d2 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    91ae:	78fb      	ldrb	r3, [r7, #3]
    91b0:	f003 0304 	and.w	r3, r3, #4
    91b4:	2b00      	cmp	r3, #0
    91b6:	d004      	beq.n	91c2 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    91b8:	2100      	movs	r1, #0
    91ba:	6878      	ldr	r0, [r7, #4]
    91bc:	4b08      	ldr	r3, [pc, #32]	; (91e0 <_usb_d_dev_trans_in_isr+0x88>)
    91be:	4798      	blx	r3
}
    91c0:	e007      	b.n	91d2 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    91c2:	78fb      	ldrb	r3, [r7, #3]
    91c4:	f003 0310 	and.w	r3, r3, #16
    91c8:	2b00      	cmp	r3, #0
    91ca:	d002      	beq.n	91d2 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    91cc:	6878      	ldr	r0, [r7, #4]
    91ce:	4b06      	ldr	r3, [pc, #24]	; (91e8 <_usb_d_dev_trans_in_isr+0x90>)
    91d0:	4798      	blx	r3
}
    91d2:	bf00      	nop
    91d4:	3708      	adds	r7, #8
    91d6:	46bd      	mov	sp, r7
    91d8:	bd80      	pop	{r7, pc}
    91da:	bf00      	nop
    91dc:	00008efd 	.word	0x00008efd
    91e0:	00008f41 	.word	0x00008f41
    91e4:	00008949 	.word	0x00008949
    91e8:	00008e25 	.word	0x00008e25

000091ec <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    91ec:	b580      	push	{r7, lr}
    91ee:	b082      	sub	sp, #8
    91f0:	af00      	add	r7, sp, #0
    91f2:	6078      	str	r0, [r7, #4]
    91f4:	460b      	mov	r3, r1
    91f6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    91f8:	78fb      	ldrb	r3, [r7, #3]
    91fa:	f003 0320 	and.w	r3, r3, #32
    91fe:	2b00      	cmp	r3, #0
    9200:	d004      	beq.n	920c <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9202:	2100      	movs	r1, #0
    9204:	6878      	ldr	r0, [r7, #4]
    9206:	4b1a      	ldr	r3, [pc, #104]	; (9270 <_usb_d_dev_trans_out_isr+0x84>)
    9208:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    920a:	e02c      	b.n	9266 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    920c:	78fb      	ldrb	r3, [r7, #3]
    920e:	f003 0304 	and.w	r3, r3, #4
    9212:	2b00      	cmp	r3, #0
    9214:	d004      	beq.n	9220 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9216:	2100      	movs	r1, #0
    9218:	6878      	ldr	r0, [r7, #4]
    921a:	4b16      	ldr	r3, [pc, #88]	; (9274 <_usb_d_dev_trans_out_isr+0x88>)
    921c:	4798      	blx	r3
}
    921e:	e022      	b.n	9266 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9220:	78fb      	ldrb	r3, [r7, #3]
    9222:	f003 0301 	and.w	r3, r3, #1
    9226:	2b00      	cmp	r3, #0
    9228:	d004      	beq.n	9234 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    922a:	2101      	movs	r1, #1
    922c:	6878      	ldr	r0, [r7, #4]
    922e:	4b12      	ldr	r3, [pc, #72]	; (9278 <_usb_d_dev_trans_out_isr+0x8c>)
    9230:	4798      	blx	r3
}
    9232:	e018      	b.n	9266 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9234:	687b      	ldr	r3, [r7, #4]
    9236:	7cdb      	ldrb	r3, [r3, #19]
    9238:	f003 0307 	and.w	r3, r3, #7
    923c:	b2db      	uxtb	r3, r3
    923e:	2b01      	cmp	r3, #1
    9240:	d111      	bne.n	9266 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9242:	78fb      	ldrb	r3, [r7, #3]
    9244:	f003 0308 	and.w	r3, r3, #8
    9248:	2b00      	cmp	r3, #0
    924a:	d004      	beq.n	9256 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    924c:	2101      	movs	r1, #1
    924e:	6878      	ldr	r0, [r7, #4]
    9250:	4b08      	ldr	r3, [pc, #32]	; (9274 <_usb_d_dev_trans_out_isr+0x88>)
    9252:	4798      	blx	r3
}
    9254:	e007      	b.n	9266 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9256:	78fb      	ldrb	r3, [r7, #3]
    9258:	f003 0310 	and.w	r3, r3, #16
    925c:	2b00      	cmp	r3, #0
    925e:	d002      	beq.n	9266 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9260:	6878      	ldr	r0, [r7, #4]
    9262:	4b06      	ldr	r3, [pc, #24]	; (927c <_usb_d_dev_trans_out_isr+0x90>)
    9264:	4798      	blx	r3
}
    9266:	bf00      	nop
    9268:	3708      	adds	r7, #8
    926a:	46bd      	mov	sp, r7
    926c:	bd80      	pop	{r7, pc}
    926e:	bf00      	nop
    9270:	00008efd 	.word	0x00008efd
    9274:	00008f41 	.word	0x00008f41
    9278:	00008b61 	.word	0x00008b61
    927c:	00008e25 	.word	0x00008e25

00009280 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9280:	b580      	push	{r7, lr}
    9282:	b084      	sub	sp, #16
    9284:	af00      	add	r7, sp, #0
    9286:	6078      	str	r0, [r7, #4]
    9288:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    928a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    928e:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9290:	683b      	ldr	r3, [r7, #0]
    9292:	7c9b      	ldrb	r3, [r3, #18]
    9294:	f003 030f 	and.w	r3, r3, #15
    9298:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    929a:	7afb      	ldrb	r3, [r7, #11]
    929c:	2201      	movs	r2, #1
    929e:	409a      	lsls	r2, r3
    92a0:	687b      	ldr	r3, [r7, #4]
    92a2:	4013      	ands	r3, r2
    92a4:	2b00      	cmp	r3, #0
    92a6:	d03d      	beq.n	9324 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    92a8:	7afb      	ldrb	r3, [r7, #11]
    92aa:	68fa      	ldr	r2, [r7, #12]
    92ac:	3308      	adds	r3, #8
    92ae:	015b      	lsls	r3, r3, #5
    92b0:	4413      	add	r3, r2
    92b2:	3307      	adds	r3, #7
    92b4:	781b      	ldrb	r3, [r3, #0]
    92b6:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    92b8:	7afb      	ldrb	r3, [r7, #11]
    92ba:	68fa      	ldr	r2, [r7, #12]
    92bc:	015b      	lsls	r3, r3, #5
    92be:	4413      	add	r3, r2
    92c0:	f203 1309 	addw	r3, r3, #265	; 0x109
    92c4:	781b      	ldrb	r3, [r3, #0]
    92c6:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    92c8:	7aba      	ldrb	r2, [r7, #10]
    92ca:	7a7b      	ldrb	r3, [r7, #9]
    92cc:	4013      	ands	r3, r2
    92ce:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    92d0:	7abb      	ldrb	r3, [r7, #10]
    92d2:	2b00      	cmp	r3, #0
    92d4:	d027      	beq.n	9326 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    92d6:	683b      	ldr	r3, [r7, #0]
    92d8:	7cdb      	ldrb	r3, [r3, #19]
    92da:	f003 0307 	and.w	r3, r3, #7
    92de:	b2db      	uxtb	r3, r3
    92e0:	2b01      	cmp	r3, #1
    92e2:	d10c      	bne.n	92fe <_usb_d_dev_handle_eps+0x7e>
    92e4:	683b      	ldr	r3, [r7, #0]
    92e6:	7cdb      	ldrb	r3, [r3, #19]
    92e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    92ec:	b2db      	uxtb	r3, r3
    92ee:	2b00      	cmp	r3, #0
    92f0:	d105      	bne.n	92fe <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    92f2:	7abb      	ldrb	r3, [r7, #10]
    92f4:	4619      	mov	r1, r3
    92f6:	6838      	ldr	r0, [r7, #0]
    92f8:	4b0c      	ldr	r3, [pc, #48]	; (932c <_usb_d_dev_handle_eps+0xac>)
    92fa:	4798      	blx	r3
    92fc:	e013      	b.n	9326 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    92fe:	683b      	ldr	r3, [r7, #0]
    9300:	7cdb      	ldrb	r3, [r3, #19]
    9302:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9306:	b2db      	uxtb	r3, r3
    9308:	2b00      	cmp	r3, #0
    930a:	d005      	beq.n	9318 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    930c:	7abb      	ldrb	r3, [r7, #10]
    930e:	4619      	mov	r1, r3
    9310:	6838      	ldr	r0, [r7, #0]
    9312:	4b07      	ldr	r3, [pc, #28]	; (9330 <_usb_d_dev_handle_eps+0xb0>)
    9314:	4798      	blx	r3
    9316:	e006      	b.n	9326 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9318:	7abb      	ldrb	r3, [r7, #10]
    931a:	4619      	mov	r1, r3
    931c:	6838      	ldr	r0, [r7, #0]
    931e:	4b05      	ldr	r3, [pc, #20]	; (9334 <_usb_d_dev_handle_eps+0xb4>)
    9320:	4798      	blx	r3
    9322:	e000      	b.n	9326 <_usb_d_dev_handle_eps+0xa6>
		return;
    9324:	bf00      	nop
		}
	}
}
    9326:	3710      	adds	r7, #16
    9328:	46bd      	mov	sp, r7
    932a:	bd80      	pop	{r7, pc}
    932c:	00009105 	.word	0x00009105
    9330:	00009159 	.word	0x00009159
    9334:	000091ed 	.word	0x000091ed

00009338 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9338:	b580      	push	{r7, lr}
    933a:	b084      	sub	sp, #16
    933c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    933e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9342:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9344:	68bb      	ldr	r3, [r7, #8]
    9346:	8c1b      	ldrh	r3, [r3, #32]
    9348:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    934a:	88fb      	ldrh	r3, [r7, #6]
    934c:	2b00      	cmp	r3, #0
    934e:	d104      	bne.n	935a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9350:	4b13      	ldr	r3, [pc, #76]	; (93a0 <_usb_d_dev_handler+0x68>)
    9352:	4798      	blx	r3
    9354:	4603      	mov	r3, r0
    9356:	2b00      	cmp	r3, #0
    9358:	d11e      	bne.n	9398 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    935a:	2300      	movs	r3, #0
    935c:	73fb      	strb	r3, [r7, #15]
    935e:	e017      	b.n	9390 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9360:	7bfa      	ldrb	r2, [r7, #15]
    9362:	4613      	mov	r3, r2
    9364:	009b      	lsls	r3, r3, #2
    9366:	4413      	add	r3, r2
    9368:	009b      	lsls	r3, r3, #2
    936a:	3310      	adds	r3, #16
    936c:	4a0d      	ldr	r2, [pc, #52]	; (93a4 <_usb_d_dev_handler+0x6c>)
    936e:	4413      	add	r3, r2
    9370:	3304      	adds	r3, #4
    9372:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9374:	683b      	ldr	r3, [r7, #0]
    9376:	7c9b      	ldrb	r3, [r3, #18]
    9378:	2bff      	cmp	r3, #255	; 0xff
    937a:	d005      	beq.n	9388 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    937c:	88fb      	ldrh	r3, [r7, #6]
    937e:	6839      	ldr	r1, [r7, #0]
    9380:	4618      	mov	r0, r3
    9382:	4b09      	ldr	r3, [pc, #36]	; (93a8 <_usb_d_dev_handler+0x70>)
    9384:	4798      	blx	r3
    9386:	e000      	b.n	938a <_usb_d_dev_handler+0x52>
			continue;
    9388:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    938a:	7bfb      	ldrb	r3, [r7, #15]
    938c:	3301      	adds	r3, #1
    938e:	73fb      	strb	r3, [r7, #15]
    9390:	7bfb      	ldrb	r3, [r7, #15]
    9392:	2b08      	cmp	r3, #8
    9394:	d9e4      	bls.n	9360 <_usb_d_dev_handler+0x28>
    9396:	e000      	b.n	939a <_usb_d_dev_handler+0x62>
			return;
    9398:	bf00      	nop
	}
}
    939a:	3710      	adds	r7, #16
    939c:	46bd      	mov	sp, r7
    939e:	bd80      	pop	{r7, pc}
    93a0:	00008891 	.word	0x00008891
    93a4:	20000a94 	.word	0x20000a94
    93a8:	00009281 	.word	0x00009281

000093ac <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    93ac:	b580      	push	{r7, lr}
    93ae:	b082      	sub	sp, #8
    93b0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    93b2:	2300      	movs	r3, #0
    93b4:	71fb      	strb	r3, [r7, #7]
    93b6:	e023      	b.n	9400 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    93b8:	79fa      	ldrb	r2, [r7, #7]
    93ba:	4613      	mov	r3, r2
    93bc:	009b      	lsls	r3, r3, #2
    93be:	4413      	add	r3, r2
    93c0:	009b      	lsls	r3, r3, #2
    93c2:	3310      	adds	r3, #16
    93c4:	4a14      	ldr	r2, [pc, #80]	; (9418 <_usb_d_dev_reset_epts+0x6c>)
    93c6:	4413      	add	r3, r2
    93c8:	3304      	adds	r3, #4
    93ca:	2103      	movs	r1, #3
    93cc:	4618      	mov	r0, r3
    93ce:	4b13      	ldr	r3, [pc, #76]	; (941c <_usb_d_dev_reset_epts+0x70>)
    93d0:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    93d2:	79fa      	ldrb	r2, [r7, #7]
    93d4:	4910      	ldr	r1, [pc, #64]	; (9418 <_usb_d_dev_reset_epts+0x6c>)
    93d6:	4613      	mov	r3, r2
    93d8:	009b      	lsls	r3, r3, #2
    93da:	4413      	add	r3, r2
    93dc:	009b      	lsls	r3, r3, #2
    93de:	440b      	add	r3, r1
    93e0:	3326      	adds	r3, #38	; 0x26
    93e2:	22ff      	movs	r2, #255	; 0xff
    93e4:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    93e6:	79fa      	ldrb	r2, [r7, #7]
    93e8:	490b      	ldr	r1, [pc, #44]	; (9418 <_usb_d_dev_reset_epts+0x6c>)
    93ea:	4613      	mov	r3, r2
    93ec:	009b      	lsls	r3, r3, #2
    93ee:	4413      	add	r3, r2
    93f0:	009b      	lsls	r3, r3, #2
    93f2:	440b      	add	r3, r1
    93f4:	3327      	adds	r3, #39	; 0x27
    93f6:	2200      	movs	r2, #0
    93f8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    93fa:	79fb      	ldrb	r3, [r7, #7]
    93fc:	3301      	adds	r3, #1
    93fe:	71fb      	strb	r3, [r7, #7]
    9400:	79fb      	ldrb	r3, [r7, #7]
    9402:	2b08      	cmp	r3, #8
    9404:	d9d8      	bls.n	93b8 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9406:	22a0      	movs	r2, #160	; 0xa0
    9408:	2100      	movs	r1, #0
    940a:	4805      	ldr	r0, [pc, #20]	; (9420 <_usb_d_dev_reset_epts+0x74>)
    940c:	4b05      	ldr	r3, [pc, #20]	; (9424 <_usb_d_dev_reset_epts+0x78>)
    940e:	4798      	blx	r3
}
    9410:	bf00      	nop
    9412:	3708      	adds	r7, #8
    9414:	46bd      	mov	sp, r7
    9416:	bd80      	pop	{r7, pc}
    9418:	20000a94 	.word	0x20000a94
    941c:	00009c71 	.word	0x00009c71
    9420:	20000b5c 	.word	0x20000b5c
    9424:	0000cd59 	.word	0x0000cd59

00009428 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9428:	b580      	push	{r7, lr}
    942a:	b084      	sub	sp, #16
    942c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    942e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9432:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9434:	2301      	movs	r3, #1
    9436:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9438:	2304      	movs	r3, #4
    943a:	713b      	strb	r3, [r7, #4]
    943c:	2300      	movs	r3, #0
    943e:	717b      	strb	r3, [r7, #5]
    9440:	2300      	movs	r3, #0
    9442:	71bb      	strb	r3, [r7, #6]
    9444:	2300      	movs	r3, #0
    9446:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9448:	2101      	movs	r1, #1
    944a:	68f8      	ldr	r0, [r7, #12]
    944c:	4b26      	ldr	r3, [pc, #152]	; (94e8 <_usb_d_dev_init+0xc0>)
    944e:	4798      	blx	r3
    9450:	4603      	mov	r3, r0
    9452:	f083 0301 	eor.w	r3, r3, #1
    9456:	b2db      	uxtb	r3, r3
    9458:	2b00      	cmp	r3, #0
    945a:	d011      	beq.n	9480 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    945c:	2102      	movs	r1, #2
    945e:	68f8      	ldr	r0, [r7, #12]
    9460:	4b22      	ldr	r3, [pc, #136]	; (94ec <_usb_d_dev_init+0xc4>)
    9462:	4798      	blx	r3
    9464:	4603      	mov	r3, r0
    9466:	2b00      	cmp	r3, #0
    9468:	d006      	beq.n	9478 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    946a:	68f8      	ldr	r0, [r7, #12]
    946c:	4b20      	ldr	r3, [pc, #128]	; (94f0 <_usb_d_dev_init+0xc8>)
    946e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9470:	2102      	movs	r1, #2
    9472:	68f8      	ldr	r0, [r7, #12]
    9474:	4b1f      	ldr	r3, [pc, #124]	; (94f4 <_usb_d_dev_init+0xcc>)
    9476:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9478:	2101      	movs	r1, #1
    947a:	68f8      	ldr	r0, [r7, #12]
    947c:	4b1e      	ldr	r3, [pc, #120]	; (94f8 <_usb_d_dev_init+0xd0>)
    947e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9480:	2101      	movs	r1, #1
    9482:	68f8      	ldr	r0, [r7, #12]
    9484:	4b1b      	ldr	r3, [pc, #108]	; (94f4 <_usb_d_dev_init+0xcc>)
    9486:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9488:	4b1c      	ldr	r3, [pc, #112]	; (94fc <_usb_d_dev_init+0xd4>)
    948a:	4a1d      	ldr	r2, [pc, #116]	; (9500 <_usb_d_dev_init+0xd8>)
    948c:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    948e:	4b1b      	ldr	r3, [pc, #108]	; (94fc <_usb_d_dev_init+0xd4>)
    9490:	4a1b      	ldr	r2, [pc, #108]	; (9500 <_usb_d_dev_init+0xd8>)
    9492:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9494:	4b19      	ldr	r3, [pc, #100]	; (94fc <_usb_d_dev_init+0xd4>)
    9496:	4a1a      	ldr	r2, [pc, #104]	; (9500 <_usb_d_dev_init+0xd8>)
    9498:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    949a:	4b18      	ldr	r3, [pc, #96]	; (94fc <_usb_d_dev_init+0xd4>)
    949c:	4a18      	ldr	r2, [pc, #96]	; (9500 <_usb_d_dev_init+0xd8>)
    949e:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    94a0:	4b16      	ldr	r3, [pc, #88]	; (94fc <_usb_d_dev_init+0xd4>)
    94a2:	4a17      	ldr	r2, [pc, #92]	; (9500 <_usb_d_dev_init+0xd8>)
    94a4:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    94a6:	4b17      	ldr	r3, [pc, #92]	; (9504 <_usb_d_dev_init+0xdc>)
    94a8:	4798      	blx	r3

	_usb_load_calib();
    94aa:	4b17      	ldr	r3, [pc, #92]	; (9508 <_usb_d_dev_init+0xe0>)
    94ac:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    94ae:	2104      	movs	r1, #4
    94b0:	68f8      	ldr	r0, [r7, #12]
    94b2:	4b11      	ldr	r3, [pc, #68]	; (94f8 <_usb_d_dev_init+0xd0>)
    94b4:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    94b6:	4b15      	ldr	r3, [pc, #84]	; (950c <_usb_d_dev_init+0xe4>)
    94b8:	4619      	mov	r1, r3
    94ba:	68f8      	ldr	r0, [r7, #12]
    94bc:	4b14      	ldr	r3, [pc, #80]	; (9510 <_usb_d_dev_init+0xe8>)
    94be:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    94c0:	7afb      	ldrb	r3, [r7, #11]
    94c2:	f107 0210 	add.w	r2, r7, #16
    94c6:	4413      	add	r3, r2
    94c8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    94cc:	f043 0301 	orr.w	r3, r3, #1
    94d0:	b2db      	uxtb	r3, r3
    94d2:	b29b      	uxth	r3, r3
    94d4:	4619      	mov	r1, r3
    94d6:	68f8      	ldr	r0, [r7, #12]
    94d8:	4b0e      	ldr	r3, [pc, #56]	; (9514 <_usb_d_dev_init+0xec>)
    94da:	4798      	blx	r3

	return ERR_NONE;
    94dc:	2300      	movs	r3, #0
}
    94de:	4618      	mov	r0, r3
    94e0:	3710      	adds	r7, #16
    94e2:	46bd      	mov	sp, r7
    94e4:	bd80      	pop	{r7, pc}
    94e6:	bf00      	nop
    94e8:	00007ac1 	.word	0x00007ac1
    94ec:	00007e11 	.word	0x00007e11
    94f0:	00007de5 	.word	0x00007de5
    94f4:	00007a97 	.word	0x00007a97
    94f8:	00007e41 	.word	0x00007e41
    94fc:	20000a94 	.word	0x20000a94
    9500:	00007f09 	.word	0x00007f09
    9504:	000093ad 	.word	0x000093ad
    9508:	00007f21 	.word	0x00007f21
    950c:	20000b5c 	.word	0x20000b5c
    9510:	00007eed 	.word	0x00007eed
    9514:	00007eb1 	.word	0x00007eb1

00009518 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9518:	b580      	push	{r7, lr}
    951a:	b082      	sub	sp, #8
    951c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    951e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9522:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9524:	2103      	movs	r1, #3
    9526:	6878      	ldr	r0, [r7, #4]
    9528:	4b17      	ldr	r3, [pc, #92]	; (9588 <_usb_d_dev_enable+0x70>)
    952a:	4798      	blx	r3
    952c:	4603      	mov	r3, r0
    952e:	2b00      	cmp	r3, #0
    9530:	d002      	beq.n	9538 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9532:	f06f 0310 	mvn.w	r3, #16
    9536:	e023      	b.n	9580 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9538:	6878      	ldr	r0, [r7, #4]
    953a:	4b14      	ldr	r3, [pc, #80]	; (958c <_usb_d_dev_enable+0x74>)
    953c:	4798      	blx	r3
    953e:	4603      	mov	r3, r0
    9540:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9542:	78fb      	ldrb	r3, [r7, #3]
    9544:	f003 0302 	and.w	r3, r3, #2
    9548:	2b00      	cmp	r3, #0
    954a:	d107      	bne.n	955c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    954c:	78fb      	ldrb	r3, [r7, #3]
    954e:	f043 0302 	orr.w	r3, r3, #2
    9552:	b2db      	uxtb	r3, r3
    9554:	4619      	mov	r1, r3
    9556:	6878      	ldr	r0, [r7, #4]
    9558:	4b0d      	ldr	r3, [pc, #52]	; (9590 <_usb_d_dev_enable+0x78>)
    955a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    955c:	2050      	movs	r0, #80	; 0x50
    955e:	4b0d      	ldr	r3, [pc, #52]	; (9594 <_usb_d_dev_enable+0x7c>)
    9560:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    9562:	2051      	movs	r0, #81	; 0x51
    9564:	4b0b      	ldr	r3, [pc, #44]	; (9594 <_usb_d_dev_enable+0x7c>)
    9566:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9568:	2052      	movs	r0, #82	; 0x52
    956a:	4b0a      	ldr	r3, [pc, #40]	; (9594 <_usb_d_dev_enable+0x7c>)
    956c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    956e:	2053      	movs	r0, #83	; 0x53
    9570:	4b08      	ldr	r3, [pc, #32]	; (9594 <_usb_d_dev_enable+0x7c>)
    9572:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9574:	f240 218d 	movw	r1, #653	; 0x28d
    9578:	6878      	ldr	r0, [r7, #4]
    957a:	4b07      	ldr	r3, [pc, #28]	; (9598 <_usb_d_dev_enable+0x80>)
    957c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    957e:	2300      	movs	r3, #0
}
    9580:	4618      	mov	r0, r3
    9582:	3708      	adds	r7, #8
    9584:	46bd      	mov	sp, r7
    9586:	bd80      	pop	{r7, pc}
    9588:	00007dbb 	.word	0x00007dbb
    958c:	00007e69 	.word	0x00007e69
    9590:	00007e41 	.word	0x00007e41
    9594:	000079cd 	.word	0x000079cd
    9598:	00007d65 	.word	0x00007d65

0000959c <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    959c:	b580      	push	{r7, lr}
    959e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    95a0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95a4:	4b01      	ldr	r3, [pc, #4]	; (95ac <_usb_d_dev_attach+0x10>)
    95a6:	4798      	blx	r3
}
    95a8:	bf00      	nop
    95aa:	bd80      	pop	{r7, pc}
    95ac:	00007e8d 	.word	0x00007e8d

000095b0 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    95b0:	b580      	push	{r7, lr}
    95b2:	b082      	sub	sp, #8
    95b4:	af00      	add	r7, sp, #0
    95b6:	4603      	mov	r3, r0
    95b8:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    95ba:	79fb      	ldrb	r3, [r7, #7]
    95bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    95c0:	b2db      	uxtb	r3, r3
    95c2:	4619      	mov	r1, r3
    95c4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95c8:	4b02      	ldr	r3, [pc, #8]	; (95d4 <_usb_d_dev_set_address+0x24>)
    95ca:	4798      	blx	r3
}
    95cc:	bf00      	nop
    95ce:	3708      	adds	r7, #8
    95d0:	46bd      	mov	sp, r7
    95d2:	bd80      	pop	{r7, pc}
    95d4:	00007ecf 	.word	0x00007ecf

000095d8 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    95d8:	b590      	push	{r4, r7, lr}
    95da:	b085      	sub	sp, #20
    95dc:	af00      	add	r7, sp, #0
    95de:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    95e0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    95e4:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    95e6:	687b      	ldr	r3, [r7, #4]
    95e8:	7c9b      	ldrb	r3, [r3, #18]
    95ea:	f003 030f 	and.w	r3, r3, #15
    95ee:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    95f0:	687b      	ldr	r3, [r7, #4]
    95f2:	68db      	ldr	r3, [r3, #12]
    95f4:	461a      	mov	r2, r3
    95f6:	7afb      	ldrb	r3, [r7, #11]
    95f8:	2100      	movs	r1, #0
    95fa:	4618      	mov	r0, r3
    95fc:	4b0f      	ldr	r3, [pc, #60]	; (963c <_usb_d_dev_trans_setup+0x64>)
    95fe:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9600:	687b      	ldr	r3, [r7, #4]
    9602:	8a1b      	ldrh	r3, [r3, #16]
    9604:	461a      	mov	r2, r3
    9606:	7af8      	ldrb	r0, [r7, #11]
    9608:	2300      	movs	r3, #0
    960a:	2100      	movs	r1, #0
    960c:	4c0c      	ldr	r4, [pc, #48]	; (9640 <_usb_d_dev_trans_setup+0x68>)
    960e:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9610:	7afb      	ldrb	r3, [r7, #11]
    9612:	22b0      	movs	r2, #176	; 0xb0
    9614:	4619      	mov	r1, r3
    9616:	68f8      	ldr	r0, [r7, #12]
    9618:	4b0a      	ldr	r3, [pc, #40]	; (9644 <_usb_d_dev_trans_setup+0x6c>)
    961a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    961c:	7afb      	ldrb	r3, [r7, #11]
    961e:	2200      	movs	r2, #0
    9620:	2100      	movs	r1, #0
    9622:	4618      	mov	r0, r3
    9624:	4b08      	ldr	r3, [pc, #32]	; (9648 <_usb_d_dev_trans_setup+0x70>)
    9626:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9628:	7afb      	ldrb	r3, [r7, #11]
    962a:	2210      	movs	r2, #16
    962c:	4619      	mov	r1, r3
    962e:	68f8      	ldr	r0, [r7, #12]
    9630:	4b06      	ldr	r3, [pc, #24]	; (964c <_usb_d_dev_trans_setup+0x74>)
    9632:	4798      	blx	r3
}
    9634:	bf00      	nop
    9636:	3714      	adds	r7, #20
    9638:	46bd      	mov	sp, r7
    963a:	bd90      	pop	{r4, r7, pc}
    963c:	0000836d 	.word	0x0000836d
    9640:	000084f5 	.word	0x000084f5
    9644:	00007bcd 	.word	0x00007bcd
    9648:	000085c5 	.word	0x000085c5
    964c:	00007c21 	.word	0x00007c21

00009650 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9650:	b580      	push	{r7, lr}
    9652:	b088      	sub	sp, #32
    9654:	af00      	add	r7, sp, #0
    9656:	4603      	mov	r3, r0
    9658:	71fb      	strb	r3, [r7, #7]
    965a:	460b      	mov	r3, r1
    965c:	71bb      	strb	r3, [r7, #6]
    965e:	4613      	mov	r3, r2
    9660:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    9662:	79fb      	ldrb	r3, [r7, #7]
    9664:	f003 030f 	and.w	r3, r3, #15
    9668:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    966a:	79fb      	ldrb	r3, [r7, #7]
    966c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9670:	2b00      	cmp	r3, #0
    9672:	bf14      	ite	ne
    9674:	2301      	movne	r3, #1
    9676:	2300      	moveq	r3, #0
    9678:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    967a:	7fba      	ldrb	r2, [r7, #30]
    967c:	7ffb      	ldrb	r3, [r7, #31]
    967e:	4611      	mov	r1, r2
    9680:	4618      	mov	r0, r3
    9682:	4b3e      	ldr	r3, [pc, #248]	; (977c <_usb_d_dev_ep_init+0x12c>)
    9684:	4798      	blx	r3
    9686:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    9688:	79bb      	ldrb	r3, [r7, #6]
    968a:	f003 0303 	and.w	r3, r3, #3
    968e:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    9690:	7ffa      	ldrb	r2, [r7, #31]
    9692:	4613      	mov	r3, r2
    9694:	005b      	lsls	r3, r3, #1
    9696:	4413      	add	r3, r2
    9698:	009b      	lsls	r3, r3, #2
    969a:	4a39      	ldr	r2, [pc, #228]	; (9780 <_usb_d_dev_ep_init+0x130>)
    969c:	4413      	add	r3, r2
    969e:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    96a0:	7ffb      	ldrb	r3, [r7, #31]
    96a2:	2b04      	cmp	r3, #4
    96a4:	d902      	bls.n	96ac <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    96a6:	f06f 0311 	mvn.w	r3, #17
    96aa:	e063      	b.n	9774 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    96ac:	69bb      	ldr	r3, [r7, #24]
    96ae:	7c9b      	ldrb	r3, [r3, #18]
    96b0:	2bff      	cmp	r3, #255	; 0xff
    96b2:	d002      	beq.n	96ba <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    96b4:	f06f 0313 	mvn.w	r3, #19
    96b8:	e05c      	b.n	9774 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    96ba:	7dfb      	ldrb	r3, [r7, #23]
    96bc:	2b00      	cmp	r3, #0
    96be:	d11f      	bne.n	9700 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    96c0:	7fbb      	ldrb	r3, [r7, #30]
    96c2:	2b00      	cmp	r3, #0
    96c4:	bf14      	ite	ne
    96c6:	2301      	movne	r3, #1
    96c8:	2300      	moveq	r3, #0
    96ca:	b2db      	uxtb	r3, r3
    96cc:	f083 0301 	eor.w	r3, r3, #1
    96d0:	b2db      	uxtb	r3, r3
    96d2:	f003 0301 	and.w	r3, r3, #1
    96d6:	b2da      	uxtb	r2, r3
    96d8:	7ffb      	ldrb	r3, [r7, #31]
    96da:	4611      	mov	r1, r2
    96dc:	4618      	mov	r0, r3
    96de:	4b27      	ldr	r3, [pc, #156]	; (977c <_usb_d_dev_ep_init+0x12c>)
    96e0:	4798      	blx	r3
    96e2:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    96e4:	68fb      	ldr	r3, [r7, #12]
    96e6:	7c9b      	ldrb	r3, [r3, #18]
    96e8:	2bff      	cmp	r3, #255	; 0xff
    96ea:	d002      	beq.n	96f2 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    96ec:	f06f 0313 	mvn.w	r3, #19
    96f0:	e040      	b.n	9774 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    96f2:	693b      	ldr	r3, [r7, #16]
    96f4:	681b      	ldr	r3, [r3, #0]
    96f6:	2b00      	cmp	r3, #0
    96f8:	d102      	bne.n	9700 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    96fa:	f06f 0312 	mvn.w	r3, #18
    96fe:	e039      	b.n	9774 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9700:	7fbb      	ldrb	r3, [r7, #30]
    9702:	2b00      	cmp	r3, #0
    9704:	d007      	beq.n	9716 <_usb_d_dev_ep_init+0xc6>
    9706:	693b      	ldr	r3, [r7, #16]
    9708:	685b      	ldr	r3, [r3, #4]
    970a:	2b00      	cmp	r3, #0
    970c:	bf14      	ite	ne
    970e:	2301      	movne	r3, #1
    9710:	2300      	moveq	r3, #0
    9712:	b2db      	uxtb	r3, r3
    9714:	e006      	b.n	9724 <_usb_d_dev_ep_init+0xd4>
    9716:	693b      	ldr	r3, [r7, #16]
    9718:	681b      	ldr	r3, [r3, #0]
    971a:	2b00      	cmp	r3, #0
    971c:	bf14      	ite	ne
    971e:	2301      	movne	r3, #1
    9720:	2300      	moveq	r3, #0
    9722:	b2db      	uxtb	r3, r3
    9724:	2b00      	cmp	r3, #0
    9726:	d00f      	beq.n	9748 <_usb_d_dev_ep_init+0xf8>
    9728:	7fbb      	ldrb	r3, [r7, #30]
    972a:	2b00      	cmp	r3, #0
    972c:	d003      	beq.n	9736 <_usb_d_dev_ep_init+0xe6>
    972e:	693b      	ldr	r3, [r7, #16]
    9730:	895b      	ldrh	r3, [r3, #10]
    9732:	461a      	mov	r2, r3
    9734:	e002      	b.n	973c <_usb_d_dev_ep_init+0xec>
    9736:	693b      	ldr	r3, [r7, #16]
    9738:	891b      	ldrh	r3, [r3, #8]
    973a:	461a      	mov	r2, r3
    973c:	88bb      	ldrh	r3, [r7, #4]
    973e:	429a      	cmp	r2, r3
    9740:	da02      	bge.n	9748 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    9742:	f06f 0312 	mvn.w	r3, #18
    9746:	e015      	b.n	9774 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9748:	7fbb      	ldrb	r3, [r7, #30]
    974a:	2b00      	cmp	r3, #0
    974c:	d002      	beq.n	9754 <_usb_d_dev_ep_init+0x104>
    974e:	693b      	ldr	r3, [r7, #16]
    9750:	685b      	ldr	r3, [r3, #4]
    9752:	e001      	b.n	9758 <_usb_d_dev_ep_init+0x108>
    9754:	693b      	ldr	r3, [r7, #16]
    9756:	681b      	ldr	r3, [r3, #0]
    9758:	69ba      	ldr	r2, [r7, #24]
    975a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    975c:	69bb      	ldr	r3, [r7, #24]
    975e:	88ba      	ldrh	r2, [r7, #4]
    9760:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    9762:	7dfb      	ldrb	r3, [r7, #23]
    9764:	3301      	adds	r3, #1
    9766:	b2da      	uxtb	r2, r3
    9768:	69bb      	ldr	r3, [r7, #24]
    976a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    976c:	69bb      	ldr	r3, [r7, #24]
    976e:	79fa      	ldrb	r2, [r7, #7]
    9770:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    9772:	2300      	movs	r3, #0
}
    9774:	4618      	mov	r0, r3
    9776:	3720      	adds	r7, #32
    9778:	46bd      	mov	sp, r7
    977a:	bd80      	pop	{r7, pc}
    977c:	00008681 	.word	0x00008681
    9780:	0000d26c 	.word	0x0000d26c

00009784 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    9784:	b580      	push	{r7, lr}
    9786:	b086      	sub	sp, #24
    9788:	af00      	add	r7, sp, #0
    978a:	4603      	mov	r3, r0
    978c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    978e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9792:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    9794:	79fb      	ldrb	r3, [r7, #7]
    9796:	f003 030f 	and.w	r3, r3, #15
    979a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    979c:	79fb      	ldrb	r3, [r7, #7]
    979e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    97a2:	2b00      	cmp	r3, #0
    97a4:	bf14      	ite	ne
    97a6:	2301      	movne	r3, #1
    97a8:	2300      	moveq	r3, #0
    97aa:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    97ac:	7cba      	ldrb	r2, [r7, #18]
    97ae:	7cfb      	ldrb	r3, [r7, #19]
    97b0:	4611      	mov	r1, r2
    97b2:	4618      	mov	r0, r3
    97b4:	4b2a      	ldr	r3, [pc, #168]	; (9860 <_usb_d_dev_ep_deinit+0xdc>)
    97b6:	4798      	blx	r3
    97b8:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    97ba:	7cfb      	ldrb	r3, [r7, #19]
    97bc:	2b04      	cmp	r3, #4
    97be:	d84a      	bhi.n	9856 <_usb_d_dev_ep_deinit+0xd2>
    97c0:	68fb      	ldr	r3, [r7, #12]
    97c2:	7c9b      	ldrb	r3, [r3, #18]
    97c4:	2bff      	cmp	r3, #255	; 0xff
    97c6:	d046      	beq.n	9856 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    97c8:	7cbb      	ldrb	r3, [r7, #18]
    97ca:	2203      	movs	r2, #3
    97cc:	4619      	mov	r1, r3
    97ce:	68f8      	ldr	r0, [r7, #12]
    97d0:	4b24      	ldr	r3, [pc, #144]	; (9864 <_usb_d_dev_ep_deinit+0xe0>)
    97d2:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    97d4:	68fb      	ldr	r3, [r7, #12]
    97d6:	7cdb      	ldrb	r3, [r3, #19]
    97d8:	f003 0307 	and.w	r3, r3, #7
    97dc:	b2db      	uxtb	r3, r3
    97de:	2b01      	cmp	r3, #1
    97e0:	d107      	bne.n	97f2 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    97e2:	79fb      	ldrb	r3, [r7, #7]
    97e4:	697a      	ldr	r2, [r7, #20]
    97e6:	3308      	adds	r3, #8
    97e8:	015b      	lsls	r3, r3, #5
    97ea:	4413      	add	r3, r2
    97ec:	2200      	movs	r2, #0
    97ee:	701a      	strb	r2, [r3, #0]
    97f0:	e02a      	b.n	9848 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    97f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    97f6:	2b00      	cmp	r3, #0
    97f8:	da15      	bge.n	9826 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    97fa:	79fb      	ldrb	r3, [r7, #7]
    97fc:	f003 030f 	and.w	r3, r3, #15
    9800:	79fa      	ldrb	r2, [r7, #7]
    9802:	f002 020f 	and.w	r2, r2, #15
    9806:	6979      	ldr	r1, [r7, #20]
    9808:	3208      	adds	r2, #8
    980a:	0152      	lsls	r2, r2, #5
    980c:	440a      	add	r2, r1
    980e:	7812      	ldrb	r2, [r2, #0]
    9810:	b2d2      	uxtb	r2, r2
    9812:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    9816:	b2d1      	uxtb	r1, r2
    9818:	697a      	ldr	r2, [r7, #20]
    981a:	3308      	adds	r3, #8
    981c:	015b      	lsls	r3, r3, #5
    981e:	4413      	add	r3, r2
    9820:	460a      	mov	r2, r1
    9822:	701a      	strb	r2, [r3, #0]
    9824:	e010      	b.n	9848 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    9826:	79fb      	ldrb	r3, [r7, #7]
    9828:	79fa      	ldrb	r2, [r7, #7]
    982a:	6979      	ldr	r1, [r7, #20]
    982c:	3208      	adds	r2, #8
    982e:	0152      	lsls	r2, r2, #5
    9830:	440a      	add	r2, r1
    9832:	7812      	ldrb	r2, [r2, #0]
    9834:	b2d2      	uxtb	r2, r2
    9836:	f022 0207 	bic.w	r2, r2, #7
    983a:	b2d1      	uxtb	r1, r2
    983c:	697a      	ldr	r2, [r7, #20]
    983e:	3308      	adds	r3, #8
    9840:	015b      	lsls	r3, r3, #5
    9842:	4413      	add	r3, r2
    9844:	460a      	mov	r2, r1
    9846:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    9848:	68fb      	ldr	r3, [r7, #12]
    984a:	2200      	movs	r2, #0
    984c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    984e:	68fb      	ldr	r3, [r7, #12]
    9850:	22ff      	movs	r2, #255	; 0xff
    9852:	749a      	strb	r2, [r3, #18]
    9854:	e000      	b.n	9858 <_usb_d_dev_ep_deinit+0xd4>
		return;
    9856:	bf00      	nop
}
    9858:	3718      	adds	r7, #24
    985a:	46bd      	mov	sp, r7
    985c:	bd80      	pop	{r7, pc}
    985e:	bf00      	nop
    9860:	00008681 	.word	0x00008681
    9864:	00009cb9 	.word	0x00009cb9

00009868 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    9868:	b5b0      	push	{r4, r5, r7, lr}
    986a:	b088      	sub	sp, #32
    986c:	af00      	add	r7, sp, #0
    986e:	4603      	mov	r3, r0
    9870:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    9872:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9876:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    9878:	79fb      	ldrb	r3, [r7, #7]
    987a:	f003 030f 	and.w	r3, r3, #15
    987e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    9880:	79fb      	ldrb	r3, [r7, #7]
    9882:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9886:	2b00      	cmp	r3, #0
    9888:	bf14      	ite	ne
    988a:	2301      	movne	r3, #1
    988c:	2300      	moveq	r3, #0
    988e:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    9890:	7eba      	ldrb	r2, [r7, #26]
    9892:	7efb      	ldrb	r3, [r7, #27]
    9894:	4611      	mov	r1, r2
    9896:	4618      	mov	r0, r3
    9898:	4b70      	ldr	r3, [pc, #448]	; (9a5c <_usb_d_dev_ep_enable+0x1f4>)
    989a:	4798      	blx	r3
    989c:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    989e:	7efb      	ldrb	r3, [r7, #27]
    98a0:	4619      	mov	r1, r3
    98a2:	69f8      	ldr	r0, [r7, #28]
    98a4:	4b6e      	ldr	r3, [pc, #440]	; (9a60 <_usb_d_dev_ep_enable+0x1f8>)
    98a6:	4798      	blx	r3
    98a8:	4603      	mov	r3, r0
    98aa:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    98ac:	7efb      	ldrb	r3, [r7, #27]
    98ae:	2b04      	cmp	r3, #4
    98b0:	d803      	bhi.n	98ba <_usb_d_dev_ep_enable+0x52>
    98b2:	697b      	ldr	r3, [r7, #20]
    98b4:	7c9b      	ldrb	r3, [r3, #18]
    98b6:	2bff      	cmp	r3, #255	; 0xff
    98b8:	d102      	bne.n	98c0 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    98ba:	f06f 0311 	mvn.w	r3, #17
    98be:	e0c8      	b.n	9a52 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    98c0:	7efb      	ldrb	r3, [r7, #27]
    98c2:	015b      	lsls	r3, r3, #5
    98c4:	4a67      	ldr	r2, [pc, #412]	; (9a64 <_usb_d_dev_ep_enable+0x1fc>)
    98c6:	4413      	add	r3, r2
    98c8:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    98ca:	697b      	ldr	r3, [r7, #20]
    98cc:	7cdb      	ldrb	r3, [r3, #19]
    98ce:	f003 0307 	and.w	r3, r3, #7
    98d2:	b2db      	uxtb	r3, r3
    98d4:	2b01      	cmp	r3, #1
    98d6:	d14b      	bne.n	9970 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    98d8:	7cfb      	ldrb	r3, [r7, #19]
    98da:	f003 0377 	and.w	r3, r3, #119	; 0x77
    98de:	2b00      	cmp	r3, #0
    98e0:	d002      	beq.n	98e8 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    98e2:	f06f 0313 	mvn.w	r3, #19
    98e6:	e0b4      	b.n	9a52 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    98e8:	7efb      	ldrb	r3, [r7, #27]
    98ea:	2211      	movs	r2, #17
    98ec:	4619      	mov	r1, r3
    98ee:	69f8      	ldr	r0, [r7, #28]
    98f0:	4b5d      	ldr	r3, [pc, #372]	; (9a68 <_usb_d_dev_ep_enable+0x200>)
    98f2:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    98f4:	697b      	ldr	r3, [r7, #20]
    98f6:	8a1b      	ldrh	r3, [r3, #16]
    98f8:	039b      	lsls	r3, r3, #14
    98fa:	4c5c      	ldr	r4, [pc, #368]	; (9a6c <_usb_d_dev_ep_enable+0x204>)
    98fc:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    98fe:	697b      	ldr	r3, [r7, #20]
    9900:	8a1b      	ldrh	r3, [r3, #16]
    9902:	4618      	mov	r0, r3
    9904:	4b5a      	ldr	r3, [pc, #360]	; (9a70 <_usb_d_dev_ep_enable+0x208>)
    9906:	4798      	blx	r3
    9908:	4603      	mov	r3, r0
    990a:	071b      	lsls	r3, r3, #28
    990c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9910:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9914:	68fb      	ldr	r3, [r7, #12]
    9916:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    9918:	68fb      	ldr	r3, [r7, #12]
    991a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    991e:	697b      	ldr	r3, [r7, #20]
    9920:	8a1b      	ldrh	r3, [r3, #16]
    9922:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9926:	697b      	ldr	r3, [r7, #20]
    9928:	8a1b      	ldrh	r3, [r3, #16]
    992a:	4618      	mov	r0, r3
    992c:	4b50      	ldr	r3, [pc, #320]	; (9a70 <_usb_d_dev_ep_enable+0x208>)
    992e:	4798      	blx	r3
    9930:	4603      	mov	r3, r0
    9932:	071b      	lsls	r3, r3, #28
    9934:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9938:	432b      	orrs	r3, r5
    993a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    993c:	7efb      	ldrb	r3, [r7, #27]
    993e:	2200      	movs	r2, #0
    9940:	2100      	movs	r1, #0
    9942:	4618      	mov	r0, r3
    9944:	4b4b      	ldr	r3, [pc, #300]	; (9a74 <_usb_d_dev_ep_enable+0x20c>)
    9946:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    9948:	7efb      	ldrb	r3, [r7, #27]
    994a:	2200      	movs	r2, #0
    994c:	2101      	movs	r1, #1
    994e:	4618      	mov	r0, r3
    9950:	4b49      	ldr	r3, [pc, #292]	; (9a78 <_usb_d_dev_ep_enable+0x210>)
    9952:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    9954:	7efb      	ldrb	r3, [r7, #27]
    9956:	2100      	movs	r1, #0
    9958:	4618      	mov	r0, r3
    995a:	4b48      	ldr	r3, [pc, #288]	; (9a7c <_usb_d_dev_ep_enable+0x214>)
    995c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    995e:	7efb      	ldrb	r3, [r7, #27]
    9960:	2101      	movs	r1, #1
    9962:	4618      	mov	r0, r3
    9964:	4b45      	ldr	r3, [pc, #276]	; (9a7c <_usb_d_dev_ep_enable+0x214>)
    9966:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    9968:	6978      	ldr	r0, [r7, #20]
    996a:	4b45      	ldr	r3, [pc, #276]	; (9a80 <_usb_d_dev_ep_enable+0x218>)
    996c:	4798      	blx	r3
    996e:	e06f      	b.n	9a50 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    9970:	7ebb      	ldrb	r3, [r7, #26]
    9972:	2b00      	cmp	r3, #0
    9974:	d038      	beq.n	99e8 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    9976:	7cfb      	ldrb	r3, [r7, #19]
    9978:	f003 0370 	and.w	r3, r3, #112	; 0x70
    997c:	2b00      	cmp	r3, #0
    997e:	d002      	beq.n	9986 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    9980:	f06f 0313 	mvn.w	r3, #19
    9984:	e065      	b.n	9a52 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    9986:	697b      	ldr	r3, [r7, #20]
    9988:	7cdb      	ldrb	r3, [r3, #19]
    998a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    998e:	b2db      	uxtb	r3, r3
    9990:	011b      	lsls	r3, r3, #4
    9992:	b2db      	uxtb	r3, r3
    9994:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9998:	b2da      	uxtb	r2, r3
    999a:	7cfb      	ldrb	r3, [r7, #19]
    999c:	4313      	orrs	r3, r2
    999e:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    99a0:	7cfa      	ldrb	r2, [r7, #19]
    99a2:	7efb      	ldrb	r3, [r7, #27]
    99a4:	4619      	mov	r1, r3
    99a6:	69f8      	ldr	r0, [r7, #28]
    99a8:	4b2f      	ldr	r3, [pc, #188]	; (9a68 <_usb_d_dev_ep_enable+0x200>)
    99aa:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    99ac:	68fb      	ldr	r3, [r7, #12]
    99ae:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    99b2:	697b      	ldr	r3, [r7, #20]
    99b4:	8a1b      	ldrh	r3, [r3, #16]
    99b6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    99ba:	697b      	ldr	r3, [r7, #20]
    99bc:	8a1b      	ldrh	r3, [r3, #16]
    99be:	4618      	mov	r0, r3
    99c0:	4b2b      	ldr	r3, [pc, #172]	; (9a70 <_usb_d_dev_ep_enable+0x208>)
    99c2:	4798      	blx	r3
    99c4:	4603      	mov	r3, r0
    99c6:	071b      	lsls	r3, r3, #28
    99c8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    99cc:	432b      	orrs	r3, r5
    99ce:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    99d0:	7efb      	ldrb	r3, [r7, #27]
    99d2:	2200      	movs	r2, #0
    99d4:	2101      	movs	r1, #1
    99d6:	4618      	mov	r0, r3
    99d8:	4b27      	ldr	r3, [pc, #156]	; (9a78 <_usb_d_dev_ep_enable+0x210>)
    99da:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    99dc:	7efb      	ldrb	r3, [r7, #27]
    99de:	2101      	movs	r1, #1
    99e0:	4618      	mov	r0, r3
    99e2:	4b26      	ldr	r3, [pc, #152]	; (9a7c <_usb_d_dev_ep_enable+0x214>)
    99e4:	4798      	blx	r3
    99e6:	e033      	b.n	9a50 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    99e8:	7cfb      	ldrb	r3, [r7, #19]
    99ea:	f003 0307 	and.w	r3, r3, #7
    99ee:	2b00      	cmp	r3, #0
    99f0:	d002      	beq.n	99f8 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    99f2:	f06f 0313 	mvn.w	r3, #19
    99f6:	e02c      	b.n	9a52 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    99f8:	697b      	ldr	r3, [r7, #20]
    99fa:	7cdb      	ldrb	r3, [r3, #19]
    99fc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9a00:	b2db      	uxtb	r3, r3
    9a02:	461a      	mov	r2, r3
    9a04:	7cfb      	ldrb	r3, [r7, #19]
    9a06:	4313      	orrs	r3, r2
    9a08:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    9a0a:	7cfa      	ldrb	r2, [r7, #19]
    9a0c:	7efb      	ldrb	r3, [r7, #27]
    9a0e:	4619      	mov	r1, r3
    9a10:	69f8      	ldr	r0, [r7, #28]
    9a12:	4b15      	ldr	r3, [pc, #84]	; (9a68 <_usb_d_dev_ep_enable+0x200>)
    9a14:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9a16:	697b      	ldr	r3, [r7, #20]
    9a18:	8a1b      	ldrh	r3, [r3, #16]
    9a1a:	039b      	lsls	r3, r3, #14
    9a1c:	4c13      	ldr	r4, [pc, #76]	; (9a6c <_usb_d_dev_ep_enable+0x204>)
    9a1e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9a20:	697b      	ldr	r3, [r7, #20]
    9a22:	8a1b      	ldrh	r3, [r3, #16]
    9a24:	4618      	mov	r0, r3
    9a26:	4b12      	ldr	r3, [pc, #72]	; (9a70 <_usb_d_dev_ep_enable+0x208>)
    9a28:	4798      	blx	r3
    9a2a:	4603      	mov	r3, r0
    9a2c:	071b      	lsls	r3, r3, #28
    9a2e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9a32:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9a36:	68fb      	ldr	r3, [r7, #12]
    9a38:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9a3a:	7efb      	ldrb	r3, [r7, #27]
    9a3c:	2200      	movs	r2, #0
    9a3e:	2100      	movs	r1, #0
    9a40:	4618      	mov	r0, r3
    9a42:	4b0c      	ldr	r3, [pc, #48]	; (9a74 <_usb_d_dev_ep_enable+0x20c>)
    9a44:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    9a46:	7efb      	ldrb	r3, [r7, #27]
    9a48:	2100      	movs	r1, #0
    9a4a:	4618      	mov	r0, r3
    9a4c:	4b0b      	ldr	r3, [pc, #44]	; (9a7c <_usb_d_dev_ep_enable+0x214>)
    9a4e:	4798      	blx	r3
	}

	return USB_OK;
    9a50:	2300      	movs	r3, #0
}
    9a52:	4618      	mov	r0, r3
    9a54:	3720      	adds	r7, #32
    9a56:	46bd      	mov	sp, r7
    9a58:	bdb0      	pop	{r4, r5, r7, pc}
    9a5a:	bf00      	nop
    9a5c:	00008681 	.word	0x00008681
    9a60:	00007d07 	.word	0x00007d07
    9a64:	20000b5c 	.word	0x20000b5c
    9a68:	00007cdd 	.word	0x00007cdd
    9a6c:	0fffc000 	.word	0x0fffc000
    9a70:	0000861d 	.word	0x0000861d
    9a74:	000085c5 	.word	0x000085c5
    9a78:	0000856d 	.word	0x0000856d
    9a7c:	00008535 	.word	0x00008535
    9a80:	000095d9 	.word	0x000095d9

00009a84 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    9a84:	b580      	push	{r7, lr}
    9a86:	b084      	sub	sp, #16
    9a88:	af00      	add	r7, sp, #0
    9a8a:	6078      	str	r0, [r7, #4]
    9a8c:	460b      	mov	r3, r1
    9a8e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9a90:	687b      	ldr	r3, [r7, #4]
    9a92:	7c9b      	ldrb	r3, [r3, #18]
    9a94:	f003 030f 	and.w	r3, r3, #15
    9a98:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    9a9a:	78fa      	ldrb	r2, [r7, #3]
    9a9c:	7bfb      	ldrb	r3, [r7, #15]
    9a9e:	4611      	mov	r1, r2
    9aa0:	4618      	mov	r0, r3
    9aa2:	4b03      	ldr	r3, [pc, #12]	; (9ab0 <_usb_d_dev_ep_stall_get+0x2c>)
    9aa4:	4798      	blx	r3
    9aa6:	4603      	mov	r3, r0
}
    9aa8:	4618      	mov	r0, r3
    9aaa:	3710      	adds	r7, #16
    9aac:	46bd      	mov	sp, r7
    9aae:	bd80      	pop	{r7, pc}
    9ab0:	00008175 	.word	0x00008175

00009ab4 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    9ab4:	b580      	push	{r7, lr}
    9ab6:	b084      	sub	sp, #16
    9ab8:	af00      	add	r7, sp, #0
    9aba:	6078      	str	r0, [r7, #4]
    9abc:	460b      	mov	r3, r1
    9abe:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9ac0:	687b      	ldr	r3, [r7, #4]
    9ac2:	7c9b      	ldrb	r3, [r3, #18]
    9ac4:	f003 030f 	and.w	r3, r3, #15
    9ac8:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    9aca:	78f9      	ldrb	r1, [r7, #3]
    9acc:	7bfb      	ldrb	r3, [r7, #15]
    9ace:	2201      	movs	r2, #1
    9ad0:	4618      	mov	r0, r3
    9ad2:	4b0a      	ldr	r3, [pc, #40]	; (9afc <_usb_d_dev_ep_stall_set+0x48>)
    9ad4:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9ad6:	78fb      	ldrb	r3, [r7, #3]
    9ad8:	2220      	movs	r2, #32
    9ada:	409a      	lsls	r2, r3
    9adc:	7bfb      	ldrb	r3, [r7, #15]
    9ade:	4611      	mov	r1, r2
    9ae0:	4618      	mov	r0, r3
    9ae2:	4b07      	ldr	r3, [pc, #28]	; (9b00 <_usb_d_dev_ep_stall_set+0x4c>)
    9ae4:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    9ae6:	687a      	ldr	r2, [r7, #4]
    9ae8:	7cd3      	ldrb	r3, [r2, #19]
    9aea:	f043 0308 	orr.w	r3, r3, #8
    9aee:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    9af0:	2300      	movs	r3, #0
}
    9af2:	4618      	mov	r0, r3
    9af4:	3710      	adds	r7, #16
    9af6:	46bd      	mov	sp, r7
    9af8:	bd80      	pop	{r7, pc}
    9afa:	bf00      	nop
    9afc:	0000811d 	.word	0x0000811d
    9b00:	0000809d 	.word	0x0000809d

00009b04 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    9b04:	b580      	push	{r7, lr}
    9b06:	b084      	sub	sp, #16
    9b08:	af00      	add	r7, sp, #0
    9b0a:	6078      	str	r0, [r7, #4]
    9b0c:	460b      	mov	r3, r1
    9b0e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9b10:	687b      	ldr	r3, [r7, #4]
    9b12:	7c9b      	ldrb	r3, [r3, #18]
    9b14:	f003 030f 	and.w	r3, r3, #15
    9b18:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    9b1a:	78fa      	ldrb	r2, [r7, #3]
    9b1c:	7bfb      	ldrb	r3, [r7, #15]
    9b1e:	4611      	mov	r1, r2
    9b20:	4618      	mov	r0, r3
    9b22:	4b28      	ldr	r3, [pc, #160]	; (9bc4 <_usb_d_dev_ep_stall_clr+0xc0>)
    9b24:	4798      	blx	r3
    9b26:	4603      	mov	r3, r0
    9b28:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    9b2a:	7bbb      	ldrb	r3, [r7, #14]
    9b2c:	f083 0301 	eor.w	r3, r3, #1
    9b30:	b2db      	uxtb	r3, r3
    9b32:	2b00      	cmp	r3, #0
    9b34:	d001      	beq.n	9b3a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    9b36:	2300      	movs	r3, #0
    9b38:	e040      	b.n	9bbc <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    9b3a:	78f9      	ldrb	r1, [r7, #3]
    9b3c:	7bfb      	ldrb	r3, [r7, #15]
    9b3e:	2200      	movs	r2, #0
    9b40:	4618      	mov	r0, r3
    9b42:	4b21      	ldr	r3, [pc, #132]	; (9bc8 <_usb_d_dev_ep_stall_clr+0xc4>)
    9b44:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9b46:	78fb      	ldrb	r3, [r7, #3]
    9b48:	2220      	movs	r2, #32
    9b4a:	409a      	lsls	r2, r3
    9b4c:	7bfb      	ldrb	r3, [r7, #15]
    9b4e:	4611      	mov	r1, r2
    9b50:	4618      	mov	r0, r3
    9b52:	4b1e      	ldr	r3, [pc, #120]	; (9bcc <_usb_d_dev_ep_stall_clr+0xc8>)
    9b54:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    9b56:	78fa      	ldrb	r2, [r7, #3]
    9b58:	7bfb      	ldrb	r3, [r7, #15]
    9b5a:	4611      	mov	r1, r2
    9b5c:	4618      	mov	r0, r3
    9b5e:	4b1c      	ldr	r3, [pc, #112]	; (9bd0 <_usb_d_dev_ep_stall_clr+0xcc>)
    9b60:	4798      	blx	r3
    9b62:	4603      	mov	r3, r0
    9b64:	2b00      	cmp	r3, #0
    9b66:	d00b      	beq.n	9b80 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    9b68:	78fa      	ldrb	r2, [r7, #3]
    9b6a:	7bfb      	ldrb	r3, [r7, #15]
    9b6c:	4611      	mov	r1, r2
    9b6e:	4618      	mov	r0, r3
    9b70:	4b18      	ldr	r3, [pc, #96]	; (9bd4 <_usb_d_dev_ep_stall_clr+0xd0>)
    9b72:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    9b74:	78f9      	ldrb	r1, [r7, #3]
    9b76:	7bfb      	ldrb	r3, [r7, #15]
    9b78:	2200      	movs	r2, #0
    9b7a:	4618      	mov	r0, r3
    9b7c:	4b16      	ldr	r3, [pc, #88]	; (9bd8 <_usb_d_dev_ep_stall_clr+0xd4>)
    9b7e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9b80:	687b      	ldr	r3, [r7, #4]
    9b82:	7cdb      	ldrb	r3, [r3, #19]
    9b84:	f003 0307 	and.w	r3, r3, #7
    9b88:	b2db      	uxtb	r3, r3
    9b8a:	2b01      	cmp	r3, #1
    9b8c:	d110      	bne.n	9bb0 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9b8e:	7bfb      	ldrb	r3, [r7, #15]
    9b90:	4619      	mov	r1, r3
    9b92:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b96:	4b11      	ldr	r3, [pc, #68]	; (9bdc <_usb_d_dev_ep_stall_clr+0xd8>)
    9b98:	4798      	blx	r3
    9b9a:	4603      	mov	r3, r0
    9b9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    9ba0:	2b00      	cmp	r3, #0
    9ba2:	d10a      	bne.n	9bba <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    9ba4:	687a      	ldr	r2, [r7, #4]
    9ba6:	7cd3      	ldrb	r3, [r2, #19]
    9ba8:	f36f 03c3 	bfc	r3, #3, #1
    9bac:	74d3      	strb	r3, [r2, #19]
    9bae:	e004      	b.n	9bba <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    9bb0:	687a      	ldr	r2, [r7, #4]
    9bb2:	7cd3      	ldrb	r3, [r2, #19]
    9bb4:	f36f 03c3 	bfc	r3, #3, #1
    9bb8:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    9bba:	2300      	movs	r3, #0
}
    9bbc:	4618      	mov	r0, r3
    9bbe:	3710      	adds	r7, #16
    9bc0:	46bd      	mov	sp, r7
    9bc2:	bd80      	pop	{r7, pc}
    9bc4:	00008175 	.word	0x00008175
    9bc8:	0000811d 	.word	0x0000811d
    9bcc:	000080c5 	.word	0x000080c5
    9bd0:	000081b9 	.word	0x000081b9
    9bd4:	000081fd 	.word	0x000081fd
    9bd8:	000082e9 	.word	0x000082e9
    9bdc:	00007ba5 	.word	0x00007ba5

00009be0 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    9be0:	b580      	push	{r7, lr}
    9be2:	b086      	sub	sp, #24
    9be4:	af00      	add	r7, sp, #0
    9be6:	4603      	mov	r3, r0
    9be8:	460a      	mov	r2, r1
    9bea:	71fb      	strb	r3, [r7, #7]
    9bec:	4613      	mov	r3, r2
    9bee:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    9bf0:	79fb      	ldrb	r3, [r7, #7]
    9bf2:	f003 030f 	and.w	r3, r3, #15
    9bf6:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9bf8:	79fb      	ldrb	r3, [r7, #7]
    9bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9bfe:	2b00      	cmp	r3, #0
    9c00:	bf14      	ite	ne
    9c02:	2301      	movne	r3, #1
    9c04:	2300      	moveq	r3, #0
    9c06:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9c08:	7cba      	ldrb	r2, [r7, #18]
    9c0a:	7cfb      	ldrb	r3, [r7, #19]
    9c0c:	4611      	mov	r1, r2
    9c0e:	4618      	mov	r0, r3
    9c10:	4b13      	ldr	r3, [pc, #76]	; (9c60 <_usb_d_dev_ep_stall+0x80>)
    9c12:	4798      	blx	r3
    9c14:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9c16:	7cfb      	ldrb	r3, [r7, #19]
    9c18:	2b04      	cmp	r3, #4
    9c1a:	d902      	bls.n	9c22 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    9c1c:	f06f 0311 	mvn.w	r3, #17
    9c20:	e01a      	b.n	9c58 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    9c22:	79bb      	ldrb	r3, [r7, #6]
    9c24:	2b01      	cmp	r3, #1
    9c26:	d106      	bne.n	9c36 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    9c28:	7cbb      	ldrb	r3, [r7, #18]
    9c2a:	4619      	mov	r1, r3
    9c2c:	68f8      	ldr	r0, [r7, #12]
    9c2e:	4b0d      	ldr	r3, [pc, #52]	; (9c64 <_usb_d_dev_ep_stall+0x84>)
    9c30:	4798      	blx	r3
    9c32:	6178      	str	r0, [r7, #20]
    9c34:	e00f      	b.n	9c56 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    9c36:	79bb      	ldrb	r3, [r7, #6]
    9c38:	2b00      	cmp	r3, #0
    9c3a:	d106      	bne.n	9c4a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9c3c:	7cbb      	ldrb	r3, [r7, #18]
    9c3e:	4619      	mov	r1, r3
    9c40:	68f8      	ldr	r0, [r7, #12]
    9c42:	4b09      	ldr	r3, [pc, #36]	; (9c68 <_usb_d_dev_ep_stall+0x88>)
    9c44:	4798      	blx	r3
    9c46:	6178      	str	r0, [r7, #20]
    9c48:	e005      	b.n	9c56 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    9c4a:	7cbb      	ldrb	r3, [r7, #18]
    9c4c:	4619      	mov	r1, r3
    9c4e:	68f8      	ldr	r0, [r7, #12]
    9c50:	4b06      	ldr	r3, [pc, #24]	; (9c6c <_usb_d_dev_ep_stall+0x8c>)
    9c52:	4798      	blx	r3
    9c54:	6178      	str	r0, [r7, #20]
	}
	return rc;
    9c56:	697b      	ldr	r3, [r7, #20]
}
    9c58:	4618      	mov	r0, r3
    9c5a:	3718      	adds	r7, #24
    9c5c:	46bd      	mov	sp, r7
    9c5e:	bd80      	pop	{r7, pc}
    9c60:	00008681 	.word	0x00008681
    9c64:	00009ab5 	.word	0x00009ab5
    9c68:	00009b05 	.word	0x00009b05
    9c6c:	00009a85 	.word	0x00009a85

00009c70 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    9c70:	b580      	push	{r7, lr}
    9c72:	b082      	sub	sp, #8
    9c74:	af00      	add	r7, sp, #0
    9c76:	6078      	str	r0, [r7, #4]
    9c78:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9c7a:	687b      	ldr	r3, [r7, #4]
    9c7c:	7c9b      	ldrb	r3, [r3, #18]
    9c7e:	2bff      	cmp	r3, #255	; 0xff
    9c80:	d014      	beq.n	9cac <_usb_d_dev_trans_done+0x3c>
    9c82:	687b      	ldr	r3, [r7, #4]
    9c84:	7cdb      	ldrb	r3, [r3, #19]
    9c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9c8a:	b2db      	uxtb	r3, r3
    9c8c:	2b00      	cmp	r3, #0
    9c8e:	d00d      	beq.n	9cac <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    9c90:	687a      	ldr	r2, [r7, #4]
    9c92:	7cd3      	ldrb	r3, [r2, #19]
    9c94:	f36f 1386 	bfc	r3, #6, #1
    9c98:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    9c9a:	4b06      	ldr	r3, [pc, #24]	; (9cb4 <_usb_d_dev_trans_done+0x44>)
    9c9c:	691b      	ldr	r3, [r3, #16]
    9c9e:	687a      	ldr	r2, [r7, #4]
    9ca0:	7c90      	ldrb	r0, [r2, #18]
    9ca2:	687a      	ldr	r2, [r7, #4]
    9ca4:	6892      	ldr	r2, [r2, #8]
    9ca6:	6839      	ldr	r1, [r7, #0]
    9ca8:	4798      	blx	r3
    9caa:	e000      	b.n	9cae <_usb_d_dev_trans_done+0x3e>
		return;
    9cac:	bf00      	nop
}
    9cae:	3708      	adds	r7, #8
    9cb0:	46bd      	mov	sp, r7
    9cb2:	bd80      	pop	{r7, pc}
    9cb4:	20000a94 	.word	0x20000a94

00009cb8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    9cb8:	b580      	push	{r7, lr}
    9cba:	b086      	sub	sp, #24
    9cbc:	af00      	add	r7, sp, #0
    9cbe:	60f8      	str	r0, [r7, #12]
    9cc0:	460b      	mov	r3, r1
    9cc2:	607a      	str	r2, [r7, #4]
    9cc4:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9cc6:	68fb      	ldr	r3, [r7, #12]
    9cc8:	7c9b      	ldrb	r3, [r3, #18]
    9cca:	f003 030f 	and.w	r3, r3, #15
    9cce:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    9cd0:	4b1f      	ldr	r3, [pc, #124]	; (9d50 <_usb_d_dev_trans_stop+0x98>)
    9cd2:	881b      	ldrh	r3, [r3, #0]
    9cd4:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9cd6:	68fb      	ldr	r3, [r7, #12]
    9cd8:	7c9b      	ldrb	r3, [r3, #18]
    9cda:	2bff      	cmp	r3, #255	; 0xff
    9cdc:	d033      	beq.n	9d46 <_usb_d_dev_trans_stop+0x8e>
    9cde:	68fb      	ldr	r3, [r7, #12]
    9ce0:	7cdb      	ldrb	r3, [r3, #19]
    9ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9ce6:	b2db      	uxtb	r3, r3
    9ce8:	2b00      	cmp	r3, #0
    9cea:	d02c      	beq.n	9d46 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    9cec:	7afb      	ldrb	r3, [r7, #11]
    9cee:	2b00      	cmp	r3, #0
    9cf0:	d006      	beq.n	9d00 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9cf2:	7dfb      	ldrb	r3, [r7, #23]
    9cf4:	2200      	movs	r2, #0
    9cf6:	2101      	movs	r1, #1
    9cf8:	4618      	mov	r0, r3
    9cfa:	4b16      	ldr	r3, [pc, #88]	; (9d54 <_usb_d_dev_trans_stop+0x9c>)
    9cfc:	4798      	blx	r3
    9cfe:	e005      	b.n	9d0c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9d00:	7dfb      	ldrb	r3, [r7, #23]
    9d02:	2200      	movs	r2, #0
    9d04:	2100      	movs	r1, #0
    9d06:	4618      	mov	r0, r3
    9d08:	4b13      	ldr	r3, [pc, #76]	; (9d58 <_usb_d_dev_trans_stop+0xa0>)
    9d0a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    9d0c:	7afb      	ldrb	r3, [r7, #11]
    9d0e:	f107 0218 	add.w	r2, r7, #24
    9d12:	4413      	add	r3, r2
    9d14:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9d18:	461a      	mov	r2, r3
    9d1a:	7dfb      	ldrb	r3, [r7, #23]
    9d1c:	4611      	mov	r1, r2
    9d1e:	4618      	mov	r0, r3
    9d20:	4b0e      	ldr	r3, [pc, #56]	; (9d5c <_usb_d_dev_trans_stop+0xa4>)
    9d22:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    9d24:	7afb      	ldrb	r3, [r7, #11]
    9d26:	f107 0218 	add.w	r2, r7, #24
    9d2a:	4413      	add	r3, r2
    9d2c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9d30:	461a      	mov	r2, r3
    9d32:	7dfb      	ldrb	r3, [r7, #23]
    9d34:	4611      	mov	r1, r2
    9d36:	4618      	mov	r0, r3
    9d38:	4b09      	ldr	r3, [pc, #36]	; (9d60 <_usb_d_dev_trans_stop+0xa8>)
    9d3a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    9d3c:	6879      	ldr	r1, [r7, #4]
    9d3e:	68f8      	ldr	r0, [r7, #12]
    9d40:	4b08      	ldr	r3, [pc, #32]	; (9d64 <_usb_d_dev_trans_stop+0xac>)
    9d42:	4798      	blx	r3
    9d44:	e000      	b.n	9d48 <_usb_d_dev_trans_stop+0x90>
		return;
    9d46:	bf00      	nop
}
    9d48:	3718      	adds	r7, #24
    9d4a:	46bd      	mov	sp, r7
    9d4c:	bd80      	pop	{r7, pc}
    9d4e:	bf00      	nop
    9d50:	0000d2ac 	.word	0x0000d2ac
    9d54:	0000856d 	.word	0x0000856d
    9d58:	000085c5 	.word	0x000085c5
    9d5c:	00008075 	.word	0x00008075
    9d60:	000080c5 	.word	0x000080c5
    9d64:	00009c71 	.word	0x00009c71

00009d68 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    9d68:	b580      	push	{r7, lr}
    9d6a:	b086      	sub	sp, #24
    9d6c:	af00      	add	r7, sp, #0
    9d6e:	4603      	mov	r3, r0
    9d70:	6039      	str	r1, [r7, #0]
    9d72:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    9d74:	79fb      	ldrb	r3, [r7, #7]
    9d76:	f003 030f 	and.w	r3, r3, #15
    9d7a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9d7c:	7dfb      	ldrb	r3, [r7, #23]
    9d7e:	015b      	lsls	r3, r3, #5
    9d80:	4a1e      	ldr	r2, [pc, #120]	; (9dfc <_usb_d_dev_ep_read_req+0x94>)
    9d82:	4413      	add	r3, r2
    9d84:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    9d86:	693b      	ldr	r3, [r7, #16]
    9d88:	681b      	ldr	r3, [r3, #0]
    9d8a:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    9d8c:	693b      	ldr	r3, [r7, #16]
    9d8e:	685b      	ldr	r3, [r3, #4]
    9d90:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9d94:	b29b      	uxth	r3, r3
    9d96:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9d98:	7dfb      	ldrb	r3, [r7, #23]
    9d9a:	2b04      	cmp	r3, #4
    9d9c:	d802      	bhi.n	9da4 <_usb_d_dev_ep_read_req+0x3c>
    9d9e:	683b      	ldr	r3, [r7, #0]
    9da0:	2b00      	cmp	r3, #0
    9da2:	d102      	bne.n	9daa <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    9da4:	f06f 0311 	mvn.w	r3, #17
    9da8:	e023      	b.n	9df2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9daa:	7dfb      	ldrb	r3, [r7, #23]
    9dac:	4618      	mov	r0, r3
    9dae:	4b14      	ldr	r3, [pc, #80]	; (9e00 <_usb_d_dev_ep_read_req+0x98>)
    9db0:	4798      	blx	r3
    9db2:	4603      	mov	r3, r0
    9db4:	f083 0301 	eor.w	r3, r3, #1
    9db8:	b2db      	uxtb	r3, r3
    9dba:	2b00      	cmp	r3, #0
    9dbc:	d002      	beq.n	9dc4 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    9dbe:	f06f 0312 	mvn.w	r3, #18
    9dc2:	e016      	b.n	9df2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    9dc4:	7dfb      	ldrb	r3, [r7, #23]
    9dc6:	4618      	mov	r0, r3
    9dc8:	4b0e      	ldr	r3, [pc, #56]	; (9e04 <_usb_d_dev_ep_read_req+0x9c>)
    9dca:	4798      	blx	r3
    9dcc:	4603      	mov	r3, r0
    9dce:	f083 0301 	eor.w	r3, r3, #1
    9dd2:	b2db      	uxtb	r3, r3
    9dd4:	2b00      	cmp	r3, #0
    9dd6:	d001      	beq.n	9ddc <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    9dd8:	2300      	movs	r3, #0
    9dda:	e00a      	b.n	9df2 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    9ddc:	68fb      	ldr	r3, [r7, #12]
    9dde:	2208      	movs	r2, #8
    9de0:	4619      	mov	r1, r3
    9de2:	6838      	ldr	r0, [r7, #0]
    9de4:	4b08      	ldr	r3, [pc, #32]	; (9e08 <_usb_d_dev_ep_read_req+0xa0>)
    9de6:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    9de8:	7dfb      	ldrb	r3, [r7, #23]
    9dea:	4618      	mov	r0, r3
    9dec:	4b07      	ldr	r3, [pc, #28]	; (9e0c <_usb_d_dev_ep_read_req+0xa4>)
    9dee:	4798      	blx	r3

	return bytes;
    9df0:	897b      	ldrh	r3, [r7, #10]
}
    9df2:	4618      	mov	r0, r3
    9df4:	3718      	adds	r7, #24
    9df6:	46bd      	mov	sp, r7
    9df8:	bd80      	pop	{r7, pc}
    9dfa:	bf00      	nop
    9dfc:	20000b5c 	.word	0x20000b5c
    9e00:	000080ed 	.word	0x000080ed
    9e04:	00008299 	.word	0x00008299
    9e08:	0000cc25 	.word	0x0000cc25
    9e0c:	000082c9 	.word	0x000082c9

00009e10 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    9e10:	b580      	push	{r7, lr}
    9e12:	b086      	sub	sp, #24
    9e14:	af00      	add	r7, sp, #0
    9e16:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    9e18:	687b      	ldr	r3, [r7, #4]
    9e1a:	7a1b      	ldrb	r3, [r3, #8]
    9e1c:	f003 030f 	and.w	r3, r3, #15
    9e20:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    9e22:	687b      	ldr	r3, [r7, #4]
    9e24:	7a1b      	ldrb	r3, [r3, #8]
    9e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9e2a:	2b00      	cmp	r3, #0
    9e2c:	bf14      	ite	ne
    9e2e:	2301      	movne	r3, #1
    9e30:	2300      	moveq	r3, #0
    9e32:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9e34:	7d7a      	ldrb	r2, [r7, #21]
    9e36:	7dbb      	ldrb	r3, [r7, #22]
    9e38:	4611      	mov	r1, r2
    9e3a:	4618      	mov	r0, r3
    9e3c:	4b5f      	ldr	r3, [pc, #380]	; (9fbc <_usb_d_dev_ep_trans+0x1ac>)
    9e3e:	4798      	blx	r3
    9e40:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9e42:	693b      	ldr	r3, [r7, #16]
    9e44:	8a1b      	ldrh	r3, [r3, #16]
    9e46:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9e4a:	4293      	cmp	r3, r2
    9e4c:	d004      	beq.n	9e58 <_usb_d_dev_ep_trans+0x48>
    9e4e:	693b      	ldr	r3, [r7, #16]
    9e50:	8a1b      	ldrh	r3, [r3, #16]
    9e52:	3b01      	subs	r3, #1
    9e54:	b29b      	uxth	r3, r3
    9e56:	e001      	b.n	9e5c <_usb_d_dev_ep_trans+0x4c>
    9e58:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9e5c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    9e5e:	687b      	ldr	r3, [r7, #4]
    9e60:	685a      	ldr	r2, [r3, #4]
    9e62:	89fb      	ldrh	r3, [r7, #14]
    9e64:	4013      	ands	r3, r2
    9e66:	2b00      	cmp	r3, #0
    9e68:	bf14      	ite	ne
    9e6a:	2301      	movne	r3, #1
    9e6c:	2300      	moveq	r3, #0
    9e6e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    9e70:	2300      	movs	r3, #0
    9e72:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9e74:	7dbb      	ldrb	r3, [r7, #22]
    9e76:	2b04      	cmp	r3, #4
    9e78:	d902      	bls.n	9e80 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    9e7a:	f06f 0311 	mvn.w	r3, #17
    9e7e:	e098      	b.n	9fb2 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    9e80:	687b      	ldr	r3, [r7, #4]
    9e82:	681b      	ldr	r3, [r3, #0]
    9e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    9e88:	d31a      	bcc.n	9ec0 <_usb_d_dev_ep_trans+0xb0>
    9e8a:	687b      	ldr	r3, [r7, #4]
    9e8c:	681b      	ldr	r3, [r3, #0]
    9e8e:	461a      	mov	r2, r3
    9e90:	687b      	ldr	r3, [r7, #4]
    9e92:	685b      	ldr	r3, [r3, #4]
    9e94:	4413      	add	r3, r2
    9e96:	4a4a      	ldr	r2, [pc, #296]	; (9fc0 <_usb_d_dev_ep_trans+0x1b0>)
    9e98:	4293      	cmp	r3, r2
    9e9a:	d811      	bhi.n	9ec0 <_usb_d_dev_ep_trans+0xb0>
    9e9c:	687b      	ldr	r3, [r7, #4]
    9e9e:	681b      	ldr	r3, [r3, #0]
    9ea0:	f003 0303 	and.w	r3, r3, #3
    9ea4:	2b00      	cmp	r3, #0
    9ea6:	d10b      	bne.n	9ec0 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    9ea8:	7d7b      	ldrb	r3, [r7, #21]
    9eaa:	f083 0301 	eor.w	r3, r3, #1
    9eae:	b2db      	uxtb	r3, r3
    9eb0:	2b00      	cmp	r3, #0
    9eb2:	d00e      	beq.n	9ed2 <_usb_d_dev_ep_trans+0xc2>
    9eb4:	687b      	ldr	r3, [r7, #4]
    9eb6:	685b      	ldr	r3, [r3, #4]
    9eb8:	693a      	ldr	r2, [r7, #16]
    9eba:	8a12      	ldrh	r2, [r2, #16]
    9ebc:	4293      	cmp	r3, r2
    9ebe:	d208      	bcs.n	9ed2 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    9ec0:	693b      	ldr	r3, [r7, #16]
    9ec2:	68db      	ldr	r3, [r3, #12]
    9ec4:	2b00      	cmp	r3, #0
    9ec6:	d102      	bne.n	9ece <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    9ec8:	f06f 0312 	mvn.w	r3, #18
    9ecc:	e071      	b.n	9fb2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    9ece:	2301      	movs	r3, #1
    9ed0:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    9ed2:	7d7b      	ldrb	r3, [r7, #21]
    9ed4:	f083 0301 	eor.w	r3, r3, #1
    9ed8:	b2db      	uxtb	r3, r3
    9eda:	2b00      	cmp	r3, #0
    9edc:	d009      	beq.n	9ef2 <_usb_d_dev_ep_trans+0xe2>
    9ede:	7b7b      	ldrb	r3, [r7, #13]
    9ee0:	2b00      	cmp	r3, #0
    9ee2:	d006      	beq.n	9ef2 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    9ee4:	693b      	ldr	r3, [r7, #16]
    9ee6:	68db      	ldr	r3, [r3, #12]
    9ee8:	2b00      	cmp	r3, #0
    9eea:	d102      	bne.n	9ef2 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    9eec:	f06f 0311 	mvn.w	r3, #17
    9ef0:	e05f      	b.n	9fb2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    9ef2:	693b      	ldr	r3, [r7, #16]
    9ef4:	7cdb      	ldrb	r3, [r3, #19]
    9ef6:	f003 0308 	and.w	r3, r3, #8
    9efa:	b2db      	uxtb	r3, r3
    9efc:	2b00      	cmp	r3, #0
    9efe:	d001      	beq.n	9f04 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    9f00:	2302      	movs	r3, #2
    9f02:	e056      	b.n	9fb2 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    9f04:	f107 0308 	add.w	r3, r7, #8
    9f08:	4618      	mov	r0, r3
    9f0a:	4b2e      	ldr	r3, [pc, #184]	; (9fc4 <_usb_d_dev_ep_trans+0x1b4>)
    9f0c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    9f0e:	693b      	ldr	r3, [r7, #16]
    9f10:	7cdb      	ldrb	r3, [r3, #19]
    9f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9f16:	b2db      	uxtb	r3, r3
    9f18:	2b00      	cmp	r3, #0
    9f1a:	d006      	beq.n	9f2a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    9f1c:	f107 0308 	add.w	r3, r7, #8
    9f20:	4618      	mov	r0, r3
    9f22:	4b29      	ldr	r3, [pc, #164]	; (9fc8 <_usb_d_dev_ep_trans+0x1b8>)
    9f24:	4798      	blx	r3
		return USB_BUSY;
    9f26:	2301      	movs	r3, #1
    9f28:	e043      	b.n	9fb2 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    9f2a:	693a      	ldr	r2, [r7, #16]
    9f2c:	7cd3      	ldrb	r3, [r2, #19]
    9f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9f32:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    9f34:	f107 0308 	add.w	r3, r7, #8
    9f38:	4618      	mov	r0, r3
    9f3a:	4b23      	ldr	r3, [pc, #140]	; (9fc8 <_usb_d_dev_ep_trans+0x1b8>)
    9f3c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    9f3e:	687b      	ldr	r3, [r7, #4]
    9f40:	681a      	ldr	r2, [r3, #0]
    9f42:	693b      	ldr	r3, [r7, #16]
    9f44:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    9f46:	687b      	ldr	r3, [r7, #4]
    9f48:	685a      	ldr	r2, [r3, #4]
    9f4a:	693b      	ldr	r3, [r7, #16]
    9f4c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    9f4e:	693b      	ldr	r3, [r7, #16]
    9f50:	2200      	movs	r2, #0
    9f52:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    9f54:	693a      	ldr	r2, [r7, #16]
    9f56:	7cd3      	ldrb	r3, [r2, #19]
    9f58:	7d79      	ldrb	r1, [r7, #21]
    9f5a:	f361 13c7 	bfi	r3, r1, #7, #1
    9f5e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    9f60:	693a      	ldr	r2, [r7, #16]
    9f62:	7cd3      	ldrb	r3, [r2, #19]
    9f64:	7df9      	ldrb	r1, [r7, #23]
    9f66:	f361 1345 	bfi	r3, r1, #5, #1
    9f6a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    9f6c:	687b      	ldr	r3, [r7, #4]
    9f6e:	7a5b      	ldrb	r3, [r3, #9]
    9f70:	2b00      	cmp	r3, #0
    9f72:	d007      	beq.n	9f84 <_usb_d_dev_ep_trans+0x174>
    9f74:	7b7b      	ldrb	r3, [r7, #13]
    9f76:	f083 0301 	eor.w	r3, r3, #1
    9f7a:	b2db      	uxtb	r3, r3
    9f7c:	2b00      	cmp	r3, #0
    9f7e:	d001      	beq.n	9f84 <_usb_d_dev_ep_trans+0x174>
    9f80:	2301      	movs	r3, #1
    9f82:	e000      	b.n	9f86 <_usb_d_dev_ep_trans+0x176>
    9f84:	2300      	movs	r3, #0
    9f86:	b2db      	uxtb	r3, r3
    9f88:	f003 0301 	and.w	r3, r3, #1
    9f8c:	b2d9      	uxtb	r1, r3
    9f8e:	693a      	ldr	r2, [r7, #16]
    9f90:	7cd3      	ldrb	r3, [r2, #19]
    9f92:	f361 1304 	bfi	r3, r1, #4, #1
    9f96:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    9f98:	7d7b      	ldrb	r3, [r7, #21]
    9f9a:	2b00      	cmp	r3, #0
    9f9c:	d004      	beq.n	9fa8 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    9f9e:	2100      	movs	r1, #0
    9fa0:	6938      	ldr	r0, [r7, #16]
    9fa2:	4b0a      	ldr	r3, [pc, #40]	; (9fcc <_usb_d_dev_ep_trans+0x1bc>)
    9fa4:	4798      	blx	r3
    9fa6:	e003      	b.n	9fb0 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    9fa8:	2100      	movs	r1, #0
    9faa:	6938      	ldr	r0, [r7, #16]
    9fac:	4b08      	ldr	r3, [pc, #32]	; (9fd0 <_usb_d_dev_ep_trans+0x1c0>)
    9fae:	4798      	blx	r3
	}

	return ERR_NONE;
    9fb0:	2300      	movs	r3, #0
}
    9fb2:	4618      	mov	r0, r3
    9fb4:	3718      	adds	r7, #24
    9fb6:	46bd      	mov	sp, r7
    9fb8:	bd80      	pop	{r7, pc}
    9fba:	bf00      	nop
    9fbc:	00008681 	.word	0x00008681
    9fc0:	20041fff 	.word	0x20041fff
    9fc4:	0000a789 	.word	0x0000a789
    9fc8:	0000a7af 	.word	0x0000a7af
    9fcc:	00008949 	.word	0x00008949
    9fd0:	00008b61 	.word	0x00008b61

00009fd4 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    9fd4:	b480      	push	{r7}
    9fd6:	b085      	sub	sp, #20
    9fd8:	af00      	add	r7, sp, #0
    9fda:	4603      	mov	r3, r0
    9fdc:	6039      	str	r1, [r7, #0]
    9fde:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9fe0:	683b      	ldr	r3, [r7, #0]
    9fe2:	2b00      	cmp	r3, #0
    9fe4:	d001      	beq.n	9fea <_usb_d_dev_register_callback+0x16>
    9fe6:	683b      	ldr	r3, [r7, #0]
    9fe8:	e000      	b.n	9fec <_usb_d_dev_register_callback+0x18>
    9fea:	4b0a      	ldr	r3, [pc, #40]	; (a014 <_usb_d_dev_register_callback+0x40>)
    9fec:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    9fee:	79fb      	ldrb	r3, [r7, #7]
    9ff0:	2b01      	cmp	r3, #1
    9ff2:	d103      	bne.n	9ffc <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    9ff4:	4a08      	ldr	r2, [pc, #32]	; (a018 <_usb_d_dev_register_callback+0x44>)
    9ff6:	68fb      	ldr	r3, [r7, #12]
    9ff8:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    9ffa:	e005      	b.n	a008 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    9ffc:	79fb      	ldrb	r3, [r7, #7]
    9ffe:	2b00      	cmp	r3, #0
    a000:	d102      	bne.n	a008 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    a002:	4a05      	ldr	r2, [pc, #20]	; (a018 <_usb_d_dev_register_callback+0x44>)
    a004:	68fb      	ldr	r3, [r7, #12]
    a006:	6013      	str	r3, [r2, #0]
}
    a008:	bf00      	nop
    a00a:	3714      	adds	r7, #20
    a00c:	46bd      	mov	sp, r7
    a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a012:	4770      	bx	lr
    a014:	00007f09 	.word	0x00007f09
    a018:	20000a94 	.word	0x20000a94

0000a01c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    a01c:	b480      	push	{r7}
    a01e:	b085      	sub	sp, #20
    a020:	af00      	add	r7, sp, #0
    a022:	4603      	mov	r3, r0
    a024:	6039      	str	r1, [r7, #0]
    a026:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a028:	683b      	ldr	r3, [r7, #0]
    a02a:	2b00      	cmp	r3, #0
    a02c:	d001      	beq.n	a032 <_usb_d_dev_register_ep_callback+0x16>
    a02e:	683b      	ldr	r3, [r7, #0]
    a030:	e000      	b.n	a034 <_usb_d_dev_register_ep_callback+0x18>
    a032:	4b0e      	ldr	r3, [pc, #56]	; (a06c <_usb_d_dev_register_ep_callback+0x50>)
    a034:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    a036:	79fb      	ldrb	r3, [r7, #7]
    a038:	2b00      	cmp	r3, #0
    a03a:	d103      	bne.n	a044 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    a03c:	4a0c      	ldr	r2, [pc, #48]	; (a070 <_usb_d_dev_register_ep_callback+0x54>)
    a03e:	68fb      	ldr	r3, [r7, #12]
    a040:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    a042:	e00c      	b.n	a05e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    a044:	79fb      	ldrb	r3, [r7, #7]
    a046:	2b01      	cmp	r3, #1
    a048:	d103      	bne.n	a052 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    a04a:	4a09      	ldr	r2, [pc, #36]	; (a070 <_usb_d_dev_register_ep_callback+0x54>)
    a04c:	68fb      	ldr	r3, [r7, #12]
    a04e:	60d3      	str	r3, [r2, #12]
}
    a050:	e005      	b.n	a05e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    a052:	79fb      	ldrb	r3, [r7, #7]
    a054:	2b02      	cmp	r3, #2
    a056:	d102      	bne.n	a05e <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    a058:	4a05      	ldr	r2, [pc, #20]	; (a070 <_usb_d_dev_register_ep_callback+0x54>)
    a05a:	68fb      	ldr	r3, [r7, #12]
    a05c:	6113      	str	r3, [r2, #16]
}
    a05e:	bf00      	nop
    a060:	3714      	adds	r7, #20
    a062:	46bd      	mov	sp, r7
    a064:	f85d 7b04 	ldr.w	r7, [sp], #4
    a068:	4770      	bx	lr
    a06a:	bf00      	nop
    a06c:	00007f09 	.word	0x00007f09
    a070:	20000a94 	.word	0x20000a94

0000a074 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    a074:	b580      	push	{r7, lr}
    a076:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a078:	4b01      	ldr	r3, [pc, #4]	; (a080 <USB_0_Handler+0xc>)
    a07a:	4798      	blx	r3
}
    a07c:	bf00      	nop
    a07e:	bd80      	pop	{r7, pc}
    a080:	00009339 	.word	0x00009339

0000a084 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    a084:	b580      	push	{r7, lr}
    a086:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a088:	4b01      	ldr	r3, [pc, #4]	; (a090 <USB_1_Handler+0xc>)
    a08a:	4798      	blx	r3
}
    a08c:	bf00      	nop
    a08e:	bd80      	pop	{r7, pc}
    a090:	00009339 	.word	0x00009339

0000a094 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    a094:	b580      	push	{r7, lr}
    a096:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a098:	4b01      	ldr	r3, [pc, #4]	; (a0a0 <USB_2_Handler+0xc>)
    a09a:	4798      	blx	r3
}
    a09c:	bf00      	nop
    a09e:	bd80      	pop	{r7, pc}
    a0a0:	00009339 	.word	0x00009339

0000a0a4 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    a0a4:	b580      	push	{r7, lr}
    a0a6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a0a8:	4b01      	ldr	r3, [pc, #4]	; (a0b0 <USB_3_Handler+0xc>)
    a0aa:	4798      	blx	r3
}
    a0ac:	bf00      	nop
    a0ae:	bd80      	pop	{r7, pc}
    a0b0:	00009339 	.word	0x00009339

0000a0b4 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    a0b4:	b480      	push	{r7}
    a0b6:	b083      	sub	sp, #12
    a0b8:	af00      	add	r7, sp, #0
    a0ba:	6078      	str	r0, [r7, #4]
    a0bc:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    a0be:	bf00      	nop
    a0c0:	687b      	ldr	r3, [r7, #4]
    a0c2:	689a      	ldr	r2, [r3, #8]
    a0c4:	683b      	ldr	r3, [r7, #0]
    a0c6:	4013      	ands	r3, r2
    a0c8:	2b00      	cmp	r3, #0
    a0ca:	d1f9      	bne.n	a0c0 <hri_wdt_wait_for_sync+0xc>
	};
}
    a0cc:	bf00      	nop
    a0ce:	370c      	adds	r7, #12
    a0d0:	46bd      	mov	sp, r7
    a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0d6:	4770      	bx	lr

0000a0d8 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a0d8:	b580      	push	{r7, lr}
    a0da:	b084      	sub	sp, #16
    a0dc:	af00      	add	r7, sp, #0
    a0de:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a0e0:	210e      	movs	r1, #14
    a0e2:	6878      	ldr	r0, [r7, #4]
    a0e4:	4b0a      	ldr	r3, [pc, #40]	; (a110 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    a0e6:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a0e8:	687b      	ldr	r3, [r7, #4]
    a0ea:	781b      	ldrb	r3, [r3, #0]
    a0ec:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    a0ee:	7bfb      	ldrb	r3, [r7, #15]
    a0f0:	085b      	lsrs	r3, r3, #1
    a0f2:	b2db      	uxtb	r3, r3
    a0f4:	f003 0301 	and.w	r3, r3, #1
    a0f8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a0fa:	7bfb      	ldrb	r3, [r7, #15]
    a0fc:	2b00      	cmp	r3, #0
    a0fe:	bf14      	ite	ne
    a100:	2301      	movne	r3, #1
    a102:	2300      	moveq	r3, #0
    a104:	b2db      	uxtb	r3, r3
}
    a106:	4618      	mov	r0, r3
    a108:	3710      	adds	r7, #16
    a10a:	46bd      	mov	sp, r7
    a10c:	bd80      	pop	{r7, pc}
    a10e:	bf00      	nop
    a110:	0000a0b5 	.word	0x0000a0b5

0000a114 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    a114:	b580      	push	{r7, lr}
    a116:	b082      	sub	sp, #8
    a118:	af00      	add	r7, sp, #0
    a11a:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    a11c:	687b      	ldr	r3, [r7, #4]
    a11e:	781b      	ldrb	r3, [r3, #0]
    a120:	b2db      	uxtb	r3, r3
    a122:	f023 0304 	bic.w	r3, r3, #4
    a126:	b2da      	uxtb	r2, r3
    a128:	687b      	ldr	r3, [r7, #4]
    a12a:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a12c:	210e      	movs	r1, #14
    a12e:	6878      	ldr	r0, [r7, #4]
    a130:	4b02      	ldr	r3, [pc, #8]	; (a13c <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    a132:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    a134:	bf00      	nop
    a136:	3708      	adds	r7, #8
    a138:	46bd      	mov	sp, r7
    a13a:	bd80      	pop	{r7, pc}
    a13c:	0000a0b5 	.word	0x0000a0b5

0000a140 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    a140:	b580      	push	{r7, lr}
    a142:	b084      	sub	sp, #16
    a144:	af00      	add	r7, sp, #0
    a146:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a148:	210e      	movs	r1, #14
    a14a:	6878      	ldr	r0, [r7, #4]
    a14c:	4b08      	ldr	r3, [pc, #32]	; (a170 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    a14e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a150:	687b      	ldr	r3, [r7, #4]
    a152:	781b      	ldrb	r3, [r3, #0]
    a154:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    a156:	7bfb      	ldrb	r3, [r7, #15]
    a158:	09db      	lsrs	r3, r3, #7
    a15a:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a15c:	7bfb      	ldrb	r3, [r7, #15]
    a15e:	2b00      	cmp	r3, #0
    a160:	bf14      	ite	ne
    a162:	2301      	movne	r3, #1
    a164:	2300      	moveq	r3, #0
    a166:	b2db      	uxtb	r3, r3
}
    a168:	4618      	mov	r0, r3
    a16a:	3710      	adds	r7, #16
    a16c:	46bd      	mov	sp, r7
    a16e:	bd80      	pop	{r7, pc}
    a170:	0000a0b5 	.word	0x0000a0b5

0000a174 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    a174:	b480      	push	{r7}
    a176:	b085      	sub	sp, #20
    a178:	af00      	add	r7, sp, #0
    a17a:	6078      	str	r0, [r7, #4]
    a17c:	460b      	mov	r3, r1
    a17e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    a180:	687b      	ldr	r3, [r7, #4]
    a182:	785b      	ldrb	r3, [r3, #1]
    a184:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    a186:	7bfb      	ldrb	r3, [r7, #15]
    a188:	f023 030f 	bic.w	r3, r3, #15
    a18c:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    a18e:	78fb      	ldrb	r3, [r7, #3]
    a190:	f003 030f 	and.w	r3, r3, #15
    a194:	b2da      	uxtb	r2, r3
    a196:	7bfb      	ldrb	r3, [r7, #15]
    a198:	4313      	orrs	r3, r2
    a19a:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    a19c:	687b      	ldr	r3, [r7, #4]
    a19e:	7bfa      	ldrb	r2, [r7, #15]
    a1a0:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    a1a2:	bf00      	nop
    a1a4:	3714      	adds	r7, #20
    a1a6:	46bd      	mov	sp, r7
    a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1ac:	4770      	bx	lr
	...

0000a1b0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    a1b0:	b580      	push	{r7, lr}
    a1b2:	b082      	sub	sp, #8
    a1b4:	af00      	add	r7, sp, #0
    a1b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    a1b8:	687b      	ldr	r3, [r7, #4]
    a1ba:	2b00      	cmp	r3, #0
    a1bc:	d005      	beq.n	a1ca <_wdt_init+0x1a>
    a1be:	687b      	ldr	r3, [r7, #4]
    a1c0:	681b      	ldr	r3, [r3, #0]
    a1c2:	2b00      	cmp	r3, #0
    a1c4:	d001      	beq.n	a1ca <_wdt_init+0x1a>
    a1c6:	2301      	movs	r3, #1
    a1c8:	e000      	b.n	a1cc <_wdt_init+0x1c>
    a1ca:	2300      	movs	r3, #0
    a1cc:	f003 0301 	and.w	r3, r3, #1
    a1d0:	b2db      	uxtb	r3, r3
    a1d2:	2250      	movs	r2, #80	; 0x50
    a1d4:	4913      	ldr	r1, [pc, #76]	; (a224 <_wdt_init+0x74>)
    a1d6:	4618      	mov	r0, r3
    a1d8:	4b13      	ldr	r3, [pc, #76]	; (a228 <_wdt_init+0x78>)
    a1da:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    a1dc:	687b      	ldr	r3, [r7, #4]
    a1de:	681b      	ldr	r3, [r3, #0]
    a1e0:	4618      	mov	r0, r3
    a1e2:	4b12      	ldr	r3, [pc, #72]	; (a22c <_wdt_init+0x7c>)
    a1e4:	4798      	blx	r3
    a1e6:	4603      	mov	r3, r0
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	d107      	bne.n	a1fc <_wdt_init+0x4c>
    a1ec:	687b      	ldr	r3, [r7, #4]
    a1ee:	681b      	ldr	r3, [r3, #0]
    a1f0:	4618      	mov	r0, r3
    a1f2:	4b0f      	ldr	r3, [pc, #60]	; (a230 <_wdt_init+0x80>)
    a1f4:	4798      	blx	r3
    a1f6:	4603      	mov	r3, r0
    a1f8:	2b00      	cmp	r3, #0
    a1fa:	d002      	beq.n	a202 <_wdt_init+0x52>
		return ERR_DENIED;
    a1fc:	f06f 0310 	mvn.w	r3, #16
    a200:	e00b      	b.n	a21a <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    a202:	687b      	ldr	r3, [r7, #4]
    a204:	681b      	ldr	r3, [r3, #0]
    a206:	4618      	mov	r0, r3
    a208:	4b0a      	ldr	r3, [pc, #40]	; (a234 <_wdt_init+0x84>)
    a20a:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    a20c:	687b      	ldr	r3, [r7, #4]
    a20e:	681b      	ldr	r3, [r3, #0]
    a210:	210b      	movs	r1, #11
    a212:	4618      	mov	r0, r3
    a214:	4b08      	ldr	r3, [pc, #32]	; (a238 <_wdt_init+0x88>)
    a216:	4798      	blx	r3
	}

	return ERR_NONE;
    a218:	2300      	movs	r3, #0
}
    a21a:	4618      	mov	r0, r3
    a21c:	3708      	adds	r7, #8
    a21e:	46bd      	mov	sp, r7
    a220:	bd80      	pop	{r7, pc}
    a222:	bf00      	nop
    a224:	0000d2b0 	.word	0x0000d2b0
    a228:	00002dd1 	.word	0x00002dd1
    a22c:	0000a141 	.word	0x0000a141
    a230:	0000a0d9 	.word	0x0000a0d9
    a234:	0000a115 	.word	0x0000a115
    a238:	0000a175 	.word	0x0000a175

0000a23c <hri_port_set_DIR_reg>:
{
    a23c:	b480      	push	{r7}
    a23e:	b085      	sub	sp, #20
    a240:	af00      	add	r7, sp, #0
    a242:	60f8      	str	r0, [r7, #12]
    a244:	460b      	mov	r3, r1
    a246:	607a      	str	r2, [r7, #4]
    a248:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    a24a:	7afb      	ldrb	r3, [r7, #11]
    a24c:	68fa      	ldr	r2, [r7, #12]
    a24e:	01db      	lsls	r3, r3, #7
    a250:	4413      	add	r3, r2
    a252:	3308      	adds	r3, #8
    a254:	687a      	ldr	r2, [r7, #4]
    a256:	601a      	str	r2, [r3, #0]
}
    a258:	bf00      	nop
    a25a:	3714      	adds	r7, #20
    a25c:	46bd      	mov	sp, r7
    a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a262:	4770      	bx	lr

0000a264 <hri_port_clear_DIR_reg>:
{
    a264:	b480      	push	{r7}
    a266:	b085      	sub	sp, #20
    a268:	af00      	add	r7, sp, #0
    a26a:	60f8      	str	r0, [r7, #12]
    a26c:	460b      	mov	r3, r1
    a26e:	607a      	str	r2, [r7, #4]
    a270:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    a272:	7afb      	ldrb	r3, [r7, #11]
    a274:	68fa      	ldr	r2, [r7, #12]
    a276:	01db      	lsls	r3, r3, #7
    a278:	4413      	add	r3, r2
    a27a:	3304      	adds	r3, #4
    a27c:	687a      	ldr	r2, [r7, #4]
    a27e:	601a      	str	r2, [r3, #0]
}
    a280:	bf00      	nop
    a282:	3714      	adds	r7, #20
    a284:	46bd      	mov	sp, r7
    a286:	f85d 7b04 	ldr.w	r7, [sp], #4
    a28a:	4770      	bx	lr

0000a28c <hri_port_set_OUT_reg>:
{
    a28c:	b480      	push	{r7}
    a28e:	b085      	sub	sp, #20
    a290:	af00      	add	r7, sp, #0
    a292:	60f8      	str	r0, [r7, #12]
    a294:	460b      	mov	r3, r1
    a296:	607a      	str	r2, [r7, #4]
    a298:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a29a:	7afb      	ldrb	r3, [r7, #11]
    a29c:	68fa      	ldr	r2, [r7, #12]
    a29e:	01db      	lsls	r3, r3, #7
    a2a0:	4413      	add	r3, r2
    a2a2:	3318      	adds	r3, #24
    a2a4:	687a      	ldr	r2, [r7, #4]
    a2a6:	601a      	str	r2, [r3, #0]
}
    a2a8:	bf00      	nop
    a2aa:	3714      	adds	r7, #20
    a2ac:	46bd      	mov	sp, r7
    a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2b2:	4770      	bx	lr

0000a2b4 <hri_port_clear_OUT_reg>:
{
    a2b4:	b480      	push	{r7}
    a2b6:	b085      	sub	sp, #20
    a2b8:	af00      	add	r7, sp, #0
    a2ba:	60f8      	str	r0, [r7, #12]
    a2bc:	460b      	mov	r3, r1
    a2be:	607a      	str	r2, [r7, #4]
    a2c0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    a2c2:	7afb      	ldrb	r3, [r7, #11]
    a2c4:	68fa      	ldr	r2, [r7, #12]
    a2c6:	01db      	lsls	r3, r3, #7
    a2c8:	4413      	add	r3, r2
    a2ca:	3314      	adds	r3, #20
    a2cc:	687a      	ldr	r2, [r7, #4]
    a2ce:	601a      	str	r2, [r3, #0]
}
    a2d0:	bf00      	nop
    a2d2:	3714      	adds	r7, #20
    a2d4:	46bd      	mov	sp, r7
    a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2da:	4770      	bx	lr

0000a2dc <hri_port_write_PMUX_PMUXE_bf>:
{
    a2dc:	b480      	push	{r7}
    a2de:	b085      	sub	sp, #20
    a2e0:	af00      	add	r7, sp, #0
    a2e2:	6078      	str	r0, [r7, #4]
    a2e4:	4608      	mov	r0, r1
    a2e6:	4611      	mov	r1, r2
    a2e8:	461a      	mov	r2, r3
    a2ea:	4603      	mov	r3, r0
    a2ec:	70fb      	strb	r3, [r7, #3]
    a2ee:	460b      	mov	r3, r1
    a2f0:	70bb      	strb	r3, [r7, #2]
    a2f2:	4613      	mov	r3, r2
    a2f4:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a2f6:	78fa      	ldrb	r2, [r7, #3]
    a2f8:	78bb      	ldrb	r3, [r7, #2]
    a2fa:	6879      	ldr	r1, [r7, #4]
    a2fc:	01d2      	lsls	r2, r2, #7
    a2fe:	440a      	add	r2, r1
    a300:	4413      	add	r3, r2
    a302:	3330      	adds	r3, #48	; 0x30
    a304:	781b      	ldrb	r3, [r3, #0]
    a306:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    a308:	7bfb      	ldrb	r3, [r7, #15]
    a30a:	f023 030f 	bic.w	r3, r3, #15
    a30e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    a310:	787b      	ldrb	r3, [r7, #1]
    a312:	f003 030f 	and.w	r3, r3, #15
    a316:	b2da      	uxtb	r2, r3
    a318:	7bfb      	ldrb	r3, [r7, #15]
    a31a:	4313      	orrs	r3, r2
    a31c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a31e:	78fa      	ldrb	r2, [r7, #3]
    a320:	78bb      	ldrb	r3, [r7, #2]
    a322:	6879      	ldr	r1, [r7, #4]
    a324:	01d2      	lsls	r2, r2, #7
    a326:	440a      	add	r2, r1
    a328:	4413      	add	r3, r2
    a32a:	3330      	adds	r3, #48	; 0x30
    a32c:	7bfa      	ldrb	r2, [r7, #15]
    a32e:	701a      	strb	r2, [r3, #0]
}
    a330:	bf00      	nop
    a332:	3714      	adds	r7, #20
    a334:	46bd      	mov	sp, r7
    a336:	f85d 7b04 	ldr.w	r7, [sp], #4
    a33a:	4770      	bx	lr

0000a33c <hri_port_write_PMUX_PMUXO_bf>:
{
    a33c:	b480      	push	{r7}
    a33e:	b085      	sub	sp, #20
    a340:	af00      	add	r7, sp, #0
    a342:	6078      	str	r0, [r7, #4]
    a344:	4608      	mov	r0, r1
    a346:	4611      	mov	r1, r2
    a348:	461a      	mov	r2, r3
    a34a:	4603      	mov	r3, r0
    a34c:	70fb      	strb	r3, [r7, #3]
    a34e:	460b      	mov	r3, r1
    a350:	70bb      	strb	r3, [r7, #2]
    a352:	4613      	mov	r3, r2
    a354:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a356:	78fa      	ldrb	r2, [r7, #3]
    a358:	78bb      	ldrb	r3, [r7, #2]
    a35a:	6879      	ldr	r1, [r7, #4]
    a35c:	01d2      	lsls	r2, r2, #7
    a35e:	440a      	add	r2, r1
    a360:	4413      	add	r3, r2
    a362:	3330      	adds	r3, #48	; 0x30
    a364:	781b      	ldrb	r3, [r3, #0]
    a366:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    a368:	7bfb      	ldrb	r3, [r7, #15]
    a36a:	f003 030f 	and.w	r3, r3, #15
    a36e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    a370:	787b      	ldrb	r3, [r7, #1]
    a372:	011b      	lsls	r3, r3, #4
    a374:	b2da      	uxtb	r2, r3
    a376:	7bfb      	ldrb	r3, [r7, #15]
    a378:	4313      	orrs	r3, r2
    a37a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a37c:	78fa      	ldrb	r2, [r7, #3]
    a37e:	78bb      	ldrb	r3, [r7, #2]
    a380:	6879      	ldr	r1, [r7, #4]
    a382:	01d2      	lsls	r2, r2, #7
    a384:	440a      	add	r2, r1
    a386:	4413      	add	r3, r2
    a388:	3330      	adds	r3, #48	; 0x30
    a38a:	7bfa      	ldrb	r2, [r7, #15]
    a38c:	701a      	strb	r2, [r3, #0]
}
    a38e:	bf00      	nop
    a390:	3714      	adds	r7, #20
    a392:	46bd      	mov	sp, r7
    a394:	f85d 7b04 	ldr.w	r7, [sp], #4
    a398:	4770      	bx	lr

0000a39a <hri_port_write_PINCFG_PMUXEN_bit>:
{
    a39a:	b480      	push	{r7}
    a39c:	b085      	sub	sp, #20
    a39e:	af00      	add	r7, sp, #0
    a3a0:	6078      	str	r0, [r7, #4]
    a3a2:	4608      	mov	r0, r1
    a3a4:	4611      	mov	r1, r2
    a3a6:	461a      	mov	r2, r3
    a3a8:	4603      	mov	r3, r0
    a3aa:	70fb      	strb	r3, [r7, #3]
    a3ac:	460b      	mov	r3, r1
    a3ae:	70bb      	strb	r3, [r7, #2]
    a3b0:	4613      	mov	r3, r2
    a3b2:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    a3b4:	78fa      	ldrb	r2, [r7, #3]
    a3b6:	78bb      	ldrb	r3, [r7, #2]
    a3b8:	6879      	ldr	r1, [r7, #4]
    a3ba:	01d2      	lsls	r2, r2, #7
    a3bc:	440a      	add	r2, r1
    a3be:	4413      	add	r3, r2
    a3c0:	3340      	adds	r3, #64	; 0x40
    a3c2:	781b      	ldrb	r3, [r3, #0]
    a3c4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    a3c6:	7bfb      	ldrb	r3, [r7, #15]
    a3c8:	f023 0301 	bic.w	r3, r3, #1
    a3cc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    a3ce:	787a      	ldrb	r2, [r7, #1]
    a3d0:	7bfb      	ldrb	r3, [r7, #15]
    a3d2:	4313      	orrs	r3, r2
    a3d4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    a3d6:	78fa      	ldrb	r2, [r7, #3]
    a3d8:	78bb      	ldrb	r3, [r7, #2]
    a3da:	6879      	ldr	r1, [r7, #4]
    a3dc:	01d2      	lsls	r2, r2, #7
    a3de:	440a      	add	r2, r1
    a3e0:	4413      	add	r3, r2
    a3e2:	3340      	adds	r3, #64	; 0x40
    a3e4:	7bfa      	ldrb	r2, [r7, #15]
    a3e6:	701a      	strb	r2, [r3, #0]
}
    a3e8:	bf00      	nop
    a3ea:	3714      	adds	r7, #20
    a3ec:	46bd      	mov	sp, r7
    a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3f2:	4770      	bx	lr

0000a3f4 <hri_port_write_WRCONFIG_reg>:
{
    a3f4:	b480      	push	{r7}
    a3f6:	b085      	sub	sp, #20
    a3f8:	af00      	add	r7, sp, #0
    a3fa:	60f8      	str	r0, [r7, #12]
    a3fc:	460b      	mov	r3, r1
    a3fe:	607a      	str	r2, [r7, #4]
    a400:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    a402:	7afb      	ldrb	r3, [r7, #11]
    a404:	68fa      	ldr	r2, [r7, #12]
    a406:	01db      	lsls	r3, r3, #7
    a408:	4413      	add	r3, r2
    a40a:	3328      	adds	r3, #40	; 0x28
    a40c:	687a      	ldr	r2, [r7, #4]
    a40e:	601a      	str	r2, [r3, #0]
}
    a410:	bf00      	nop
    a412:	3714      	adds	r7, #20
    a414:	46bd      	mov	sp, r7
    a416:	f85d 7b04 	ldr.w	r7, [sp], #4
    a41a:	4770      	bx	lr

0000a41c <_gpio_set_direction>:
{
    a41c:	b580      	push	{r7, lr}
    a41e:	b082      	sub	sp, #8
    a420:	af00      	add	r7, sp, #0
    a422:	4603      	mov	r3, r0
    a424:	6039      	str	r1, [r7, #0]
    a426:	71fb      	strb	r3, [r7, #7]
    a428:	4613      	mov	r3, r2
    a42a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    a42c:	79bb      	ldrb	r3, [r7, #6]
    a42e:	2b01      	cmp	r3, #1
    a430:	d01c      	beq.n	a46c <_gpio_set_direction+0x50>
    a432:	2b02      	cmp	r3, #2
    a434:	d037      	beq.n	a4a6 <_gpio_set_direction+0x8a>
    a436:	2b00      	cmp	r3, #0
    a438:	d14e      	bne.n	a4d8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a43a:	79fb      	ldrb	r3, [r7, #7]
    a43c:	683a      	ldr	r2, [r7, #0]
    a43e:	4619      	mov	r1, r3
    a440:	482a      	ldr	r0, [pc, #168]	; (a4ec <_gpio_set_direction+0xd0>)
    a442:	4b2b      	ldr	r3, [pc, #172]	; (a4f0 <_gpio_set_direction+0xd4>)
    a444:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a446:	683b      	ldr	r3, [r7, #0]
    a448:	b29b      	uxth	r3, r3
    a44a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a44e:	79fb      	ldrb	r3, [r7, #7]
    a450:	4619      	mov	r1, r3
    a452:	4826      	ldr	r0, [pc, #152]	; (a4ec <_gpio_set_direction+0xd0>)
    a454:	4b27      	ldr	r3, [pc, #156]	; (a4f4 <_gpio_set_direction+0xd8>)
    a456:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a458:	683b      	ldr	r3, [r7, #0]
    a45a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a45c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a460:	79fb      	ldrb	r3, [r7, #7]
    a462:	4619      	mov	r1, r3
    a464:	4821      	ldr	r0, [pc, #132]	; (a4ec <_gpio_set_direction+0xd0>)
    a466:	4b23      	ldr	r3, [pc, #140]	; (a4f4 <_gpio_set_direction+0xd8>)
    a468:	4798      	blx	r3
		break;
    a46a:	e03a      	b.n	a4e2 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a46c:	79fb      	ldrb	r3, [r7, #7]
    a46e:	683a      	ldr	r2, [r7, #0]
    a470:	4619      	mov	r1, r3
    a472:	481e      	ldr	r0, [pc, #120]	; (a4ec <_gpio_set_direction+0xd0>)
    a474:	4b1e      	ldr	r3, [pc, #120]	; (a4f0 <_gpio_set_direction+0xd4>)
    a476:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    a478:	683b      	ldr	r3, [r7, #0]
    a47a:	b29b      	uxth	r3, r3
    a47c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    a480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a484:	79f9      	ldrb	r1, [r7, #7]
    a486:	461a      	mov	r2, r3
    a488:	4818      	ldr	r0, [pc, #96]	; (a4ec <_gpio_set_direction+0xd0>)
    a48a:	4b1a      	ldr	r3, [pc, #104]	; (a4f4 <_gpio_set_direction+0xd8>)
    a48c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    a48e:	683b      	ldr	r3, [r7, #0]
    a490:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    a492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    a496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a49a:	79f9      	ldrb	r1, [r7, #7]
    a49c:	461a      	mov	r2, r3
    a49e:	4813      	ldr	r0, [pc, #76]	; (a4ec <_gpio_set_direction+0xd0>)
    a4a0:	4b14      	ldr	r3, [pc, #80]	; (a4f4 <_gpio_set_direction+0xd8>)
    a4a2:	4798      	blx	r3
		break;
    a4a4:	e01d      	b.n	a4e2 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    a4a6:	79fb      	ldrb	r3, [r7, #7]
    a4a8:	683a      	ldr	r2, [r7, #0]
    a4aa:	4619      	mov	r1, r3
    a4ac:	480f      	ldr	r0, [pc, #60]	; (a4ec <_gpio_set_direction+0xd0>)
    a4ae:	4b12      	ldr	r3, [pc, #72]	; (a4f8 <_gpio_set_direction+0xdc>)
    a4b0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a4b2:	683b      	ldr	r3, [r7, #0]
    a4b4:	b29b      	uxth	r3, r3
    a4b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a4ba:	79fb      	ldrb	r3, [r7, #7]
    a4bc:	4619      	mov	r1, r3
    a4be:	480b      	ldr	r0, [pc, #44]	; (a4ec <_gpio_set_direction+0xd0>)
    a4c0:	4b0c      	ldr	r3, [pc, #48]	; (a4f4 <_gpio_set_direction+0xd8>)
    a4c2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a4c4:	683b      	ldr	r3, [r7, #0]
    a4c6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a4c8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a4cc:	79fb      	ldrb	r3, [r7, #7]
    a4ce:	4619      	mov	r1, r3
    a4d0:	4806      	ldr	r0, [pc, #24]	; (a4ec <_gpio_set_direction+0xd0>)
    a4d2:	4b08      	ldr	r3, [pc, #32]	; (a4f4 <_gpio_set_direction+0xd8>)
    a4d4:	4798      	blx	r3
		break;
    a4d6:	e004      	b.n	a4e2 <_gpio_set_direction+0xc6>
		ASSERT(false);
    a4d8:	2246      	movs	r2, #70	; 0x46
    a4da:	4908      	ldr	r1, [pc, #32]	; (a4fc <_gpio_set_direction+0xe0>)
    a4dc:	2000      	movs	r0, #0
    a4de:	4b08      	ldr	r3, [pc, #32]	; (a500 <_gpio_set_direction+0xe4>)
    a4e0:	4798      	blx	r3
}
    a4e2:	bf00      	nop
    a4e4:	3708      	adds	r7, #8
    a4e6:	46bd      	mov	sp, r7
    a4e8:	bd80      	pop	{r7, pc}
    a4ea:	bf00      	nop
    a4ec:	41008000 	.word	0x41008000
    a4f0:	0000a265 	.word	0x0000a265
    a4f4:	0000a3f5 	.word	0x0000a3f5
    a4f8:	0000a23d 	.word	0x0000a23d
    a4fc:	0000d2c8 	.word	0x0000d2c8
    a500:	00002dd1 	.word	0x00002dd1

0000a504 <_gpio_set_level>:
{
    a504:	b580      	push	{r7, lr}
    a506:	b082      	sub	sp, #8
    a508:	af00      	add	r7, sp, #0
    a50a:	4603      	mov	r3, r0
    a50c:	6039      	str	r1, [r7, #0]
    a50e:	71fb      	strb	r3, [r7, #7]
    a510:	4613      	mov	r3, r2
    a512:	71bb      	strb	r3, [r7, #6]
	if (level) {
    a514:	79bb      	ldrb	r3, [r7, #6]
    a516:	2b00      	cmp	r3, #0
    a518:	d006      	beq.n	a528 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    a51a:	79fb      	ldrb	r3, [r7, #7]
    a51c:	683a      	ldr	r2, [r7, #0]
    a51e:	4619      	mov	r1, r3
    a520:	4806      	ldr	r0, [pc, #24]	; (a53c <_gpio_set_level+0x38>)
    a522:	4b07      	ldr	r3, [pc, #28]	; (a540 <_gpio_set_level+0x3c>)
    a524:	4798      	blx	r3
}
    a526:	e005      	b.n	a534 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    a528:	79fb      	ldrb	r3, [r7, #7]
    a52a:	683a      	ldr	r2, [r7, #0]
    a52c:	4619      	mov	r1, r3
    a52e:	4803      	ldr	r0, [pc, #12]	; (a53c <_gpio_set_level+0x38>)
    a530:	4b04      	ldr	r3, [pc, #16]	; (a544 <_gpio_set_level+0x40>)
    a532:	4798      	blx	r3
}
    a534:	bf00      	nop
    a536:	3708      	adds	r7, #8
    a538:	46bd      	mov	sp, r7
    a53a:	bd80      	pop	{r7, pc}
    a53c:	41008000 	.word	0x41008000
    a540:	0000a28d 	.word	0x0000a28d
    a544:	0000a2b5 	.word	0x0000a2b5

0000a548 <_gpio_set_pin_function>:
{
    a548:	b590      	push	{r4, r7, lr}
    a54a:	b085      	sub	sp, #20
    a54c:	af00      	add	r7, sp, #0
    a54e:	6078      	str	r0, [r7, #4]
    a550:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    a552:	687b      	ldr	r3, [r7, #4]
    a554:	095b      	lsrs	r3, r3, #5
    a556:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    a558:	687b      	ldr	r3, [r7, #4]
    a55a:	b2db      	uxtb	r3, r3
    a55c:	f003 031f 	and.w	r3, r3, #31
    a560:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    a562:	683b      	ldr	r3, [r7, #0]
    a564:	f1b3 3fff 	cmp.w	r3, #4294967295
    a568:	d106      	bne.n	a578 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    a56a:	7bba      	ldrb	r2, [r7, #14]
    a56c:	7bf9      	ldrb	r1, [r7, #15]
    a56e:	2300      	movs	r3, #0
    a570:	4812      	ldr	r0, [pc, #72]	; (a5bc <_gpio_set_pin_function+0x74>)
    a572:	4c13      	ldr	r4, [pc, #76]	; (a5c0 <_gpio_set_pin_function+0x78>)
    a574:	47a0      	blx	r4
}
    a576:	e01d      	b.n	a5b4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    a578:	7bba      	ldrb	r2, [r7, #14]
    a57a:	7bf9      	ldrb	r1, [r7, #15]
    a57c:	2301      	movs	r3, #1
    a57e:	480f      	ldr	r0, [pc, #60]	; (a5bc <_gpio_set_pin_function+0x74>)
    a580:	4c0f      	ldr	r4, [pc, #60]	; (a5c0 <_gpio_set_pin_function+0x78>)
    a582:	47a0      	blx	r4
		if (pin & 1) {
    a584:	7bbb      	ldrb	r3, [r7, #14]
    a586:	f003 0301 	and.w	r3, r3, #1
    a58a:	2b00      	cmp	r3, #0
    a58c:	d009      	beq.n	a5a2 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    a58e:	7bbb      	ldrb	r3, [r7, #14]
    a590:	085b      	lsrs	r3, r3, #1
    a592:	b2da      	uxtb	r2, r3
    a594:	683b      	ldr	r3, [r7, #0]
    a596:	b2db      	uxtb	r3, r3
    a598:	7bf9      	ldrb	r1, [r7, #15]
    a59a:	4808      	ldr	r0, [pc, #32]	; (a5bc <_gpio_set_pin_function+0x74>)
    a59c:	4c09      	ldr	r4, [pc, #36]	; (a5c4 <_gpio_set_pin_function+0x7c>)
    a59e:	47a0      	blx	r4
}
    a5a0:	e008      	b.n	a5b4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    a5a2:	7bbb      	ldrb	r3, [r7, #14]
    a5a4:	085b      	lsrs	r3, r3, #1
    a5a6:	b2da      	uxtb	r2, r3
    a5a8:	683b      	ldr	r3, [r7, #0]
    a5aa:	b2db      	uxtb	r3, r3
    a5ac:	7bf9      	ldrb	r1, [r7, #15]
    a5ae:	4803      	ldr	r0, [pc, #12]	; (a5bc <_gpio_set_pin_function+0x74>)
    a5b0:	4c05      	ldr	r4, [pc, #20]	; (a5c8 <_gpio_set_pin_function+0x80>)
    a5b2:	47a0      	blx	r4
}
    a5b4:	bf00      	nop
    a5b6:	3714      	adds	r7, #20
    a5b8:	46bd      	mov	sp, r7
    a5ba:	bd90      	pop	{r4, r7, pc}
    a5bc:	41008000 	.word	0x41008000
    a5c0:	0000a39b 	.word	0x0000a39b
    a5c4:	0000a33d 	.word	0x0000a33d
    a5c8:	0000a2dd 	.word	0x0000a2dd

0000a5cc <gpio_set_pin_function>:
{
    a5cc:	b580      	push	{r7, lr}
    a5ce:	b082      	sub	sp, #8
    a5d0:	af00      	add	r7, sp, #0
    a5d2:	6078      	str	r0, [r7, #4]
    a5d4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    a5d6:	6839      	ldr	r1, [r7, #0]
    a5d8:	6878      	ldr	r0, [r7, #4]
    a5da:	4b03      	ldr	r3, [pc, #12]	; (a5e8 <gpio_set_pin_function+0x1c>)
    a5dc:	4798      	blx	r3
}
    a5de:	bf00      	nop
    a5e0:	3708      	adds	r7, #8
    a5e2:	46bd      	mov	sp, r7
    a5e4:	bd80      	pop	{r7, pc}
    a5e6:	bf00      	nop
    a5e8:	0000a549 	.word	0x0000a549

0000a5ec <gpio_set_pin_direction>:
{
    a5ec:	b580      	push	{r7, lr}
    a5ee:	b082      	sub	sp, #8
    a5f0:	af00      	add	r7, sp, #0
    a5f2:	4603      	mov	r3, r0
    a5f4:	460a      	mov	r2, r1
    a5f6:	71fb      	strb	r3, [r7, #7]
    a5f8:	4613      	mov	r3, r2
    a5fa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    a5fc:	79fb      	ldrb	r3, [r7, #7]
    a5fe:	095b      	lsrs	r3, r3, #5
    a600:	b2d8      	uxtb	r0, r3
    a602:	79fb      	ldrb	r3, [r7, #7]
    a604:	f003 031f 	and.w	r3, r3, #31
    a608:	2201      	movs	r2, #1
    a60a:	fa02 f303 	lsl.w	r3, r2, r3
    a60e:	79ba      	ldrb	r2, [r7, #6]
    a610:	4619      	mov	r1, r3
    a612:	4b03      	ldr	r3, [pc, #12]	; (a620 <gpio_set_pin_direction+0x34>)
    a614:	4798      	blx	r3
}
    a616:	bf00      	nop
    a618:	3708      	adds	r7, #8
    a61a:	46bd      	mov	sp, r7
    a61c:	bd80      	pop	{r7, pc}
    a61e:	bf00      	nop
    a620:	0000a41d 	.word	0x0000a41d

0000a624 <gpio_set_pin_level>:
{
    a624:	b580      	push	{r7, lr}
    a626:	b082      	sub	sp, #8
    a628:	af00      	add	r7, sp, #0
    a62a:	4603      	mov	r3, r0
    a62c:	460a      	mov	r2, r1
    a62e:	71fb      	strb	r3, [r7, #7]
    a630:	4613      	mov	r3, r2
    a632:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    a634:	79fb      	ldrb	r3, [r7, #7]
    a636:	095b      	lsrs	r3, r3, #5
    a638:	b2d8      	uxtb	r0, r3
    a63a:	79fb      	ldrb	r3, [r7, #7]
    a63c:	f003 031f 	and.w	r3, r3, #31
    a640:	2201      	movs	r2, #1
    a642:	fa02 f303 	lsl.w	r3, r2, r3
    a646:	79ba      	ldrb	r2, [r7, #6]
    a648:	4619      	mov	r1, r3
    a64a:	4b03      	ldr	r3, [pc, #12]	; (a658 <gpio_set_pin_level+0x34>)
    a64c:	4798      	blx	r3
}
    a64e:	bf00      	nop
    a650:	3708      	adds	r7, #8
    a652:	46bd      	mov	sp, r7
    a654:	bd80      	pop	{r7, pc}
    a656:	bf00      	nop
    a658:	0000a505 	.word	0x0000a505

0000a65c <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    a65c:	b580      	push	{r7, lr}
    a65e:	b082      	sub	sp, #8
    a660:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    a662:	2100      	movs	r1, #0
    a664:	2008      	movs	r0, #8
    a666:	4b24      	ldr	r3, [pc, #144]	; (a6f8 <QSPI_N25Q256_exit_xip+0x9c>)
    a668:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    a66a:	2100      	movs	r1, #0
    a66c:	202b      	movs	r0, #43	; 0x2b
    a66e:	4b22      	ldr	r3, [pc, #136]	; (a6f8 <QSPI_N25Q256_exit_xip+0x9c>)
    a670:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    a672:	2100      	movs	r1, #0
    a674:	202a      	movs	r0, #42	; 0x2a
    a676:	4b20      	ldr	r3, [pc, #128]	; (a6f8 <QSPI_N25Q256_exit_xip+0x9c>)
    a678:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    a67a:	2102      	movs	r1, #2
    a67c:	2008      	movs	r0, #8
    a67e:	4b1f      	ldr	r3, [pc, #124]	; (a6fc <QSPI_N25Q256_exit_xip+0xa0>)
    a680:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    a682:	2102      	movs	r1, #2
    a684:	202b      	movs	r0, #43	; 0x2b
    a686:	4b1d      	ldr	r3, [pc, #116]	; (a6fc <QSPI_N25Q256_exit_xip+0xa0>)
    a688:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    a68a:	2102      	movs	r1, #2
    a68c:	202a      	movs	r0, #42	; 0x2a
    a68e:	4b1b      	ldr	r3, [pc, #108]	; (a6fc <QSPI_N25Q256_exit_xip+0xa0>)
    a690:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    a692:	2101      	movs	r1, #1
    a694:	2008      	movs	r0, #8
    a696:	4b1a      	ldr	r3, [pc, #104]	; (a700 <QSPI_N25Q256_exit_xip+0xa4>)
    a698:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    a69a:	2100      	movs	r1, #0
    a69c:	202b      	movs	r0, #43	; 0x2b
    a69e:	4b18      	ldr	r3, [pc, #96]	; (a700 <QSPI_N25Q256_exit_xip+0xa4>)
    a6a0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    a6a2:	2100      	movs	r1, #0
    a6a4:	202a      	movs	r0, #42	; 0x2a
    a6a6:	4b16      	ldr	r3, [pc, #88]	; (a700 <QSPI_N25Q256_exit_xip+0xa4>)
    a6a8:	4798      	blx	r3

	delay_us(1);
    a6aa:	2001      	movs	r0, #1
    a6ac:	4b15      	ldr	r3, [pc, #84]	; (a704 <QSPI_N25Q256_exit_xip+0xa8>)
    a6ae:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    a6b0:	2300      	movs	r3, #0
    a6b2:	607b      	str	r3, [r7, #4]
    a6b4:	e010      	b.n	a6d8 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    a6b6:	2101      	movs	r1, #1
    a6b8:	202a      	movs	r0, #42	; 0x2a
    a6ba:	4b11      	ldr	r3, [pc, #68]	; (a700 <QSPI_N25Q256_exit_xip+0xa4>)
    a6bc:	4798      	blx	r3
		delay_us(1);
    a6be:	2001      	movs	r0, #1
    a6c0:	4b10      	ldr	r3, [pc, #64]	; (a704 <QSPI_N25Q256_exit_xip+0xa8>)
    a6c2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    a6c4:	2100      	movs	r1, #0
    a6c6:	202a      	movs	r0, #42	; 0x2a
    a6c8:	4b0d      	ldr	r3, [pc, #52]	; (a700 <QSPI_N25Q256_exit_xip+0xa4>)
    a6ca:	4798      	blx	r3
		delay_us(1);
    a6cc:	2001      	movs	r0, #1
    a6ce:	4b0d      	ldr	r3, [pc, #52]	; (a704 <QSPI_N25Q256_exit_xip+0xa8>)
    a6d0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    a6d2:	687b      	ldr	r3, [r7, #4]
    a6d4:	3301      	adds	r3, #1
    a6d6:	607b      	str	r3, [r7, #4]
    a6d8:	687b      	ldr	r3, [r7, #4]
    a6da:	2b06      	cmp	r3, #6
    a6dc:	ddeb      	ble.n	a6b6 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    a6de:	2101      	movs	r1, #1
    a6e0:	202b      	movs	r0, #43	; 0x2b
    a6e2:	4b07      	ldr	r3, [pc, #28]	; (a700 <QSPI_N25Q256_exit_xip+0xa4>)
    a6e4:	4798      	blx	r3
	delay_us(1);
    a6e6:	2001      	movs	r0, #1
    a6e8:	4b06      	ldr	r3, [pc, #24]	; (a704 <QSPI_N25Q256_exit_xip+0xa8>)
    a6ea:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    a6ec:	4b06      	ldr	r3, [pc, #24]	; (a708 <QSPI_N25Q256_exit_xip+0xac>)
    a6ee:	4798      	blx	r3
}
    a6f0:	bf00      	nop
    a6f2:	3708      	adds	r7, #8
    a6f4:	46bd      	mov	sp, r7
    a6f6:	bd80      	pop	{r7, pc}
    a6f8:	0000a5cd 	.word	0x0000a5cd
    a6fc:	0000a5ed 	.word	0x0000a5ed
    a700:	0000a625 	.word	0x0000a625
    a704:	00001c81 	.word	0x00001c81
    a708:	00000fdd 	.word	0x00000fdd

0000a70c <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    a70c:	b598      	push	{r3, r4, r7, lr}
    a70e:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    a710:	4806      	ldr	r0, [pc, #24]	; (a72c <spi_nor_flash_init+0x20>)
    a712:	4b07      	ldr	r3, [pc, #28]	; (a730 <spi_nor_flash_init+0x24>)
    a714:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    a716:	2300      	movs	r3, #0
    a718:	4a06      	ldr	r2, [pc, #24]	; (a734 <spi_nor_flash_init+0x28>)
    a71a:	4904      	ldr	r1, [pc, #16]	; (a72c <spi_nor_flash_init+0x20>)
    a71c:	4806      	ldr	r0, [pc, #24]	; (a738 <spi_nor_flash_init+0x2c>)
    a71e:	4c07      	ldr	r4, [pc, #28]	; (a73c <spi_nor_flash_init+0x30>)
    a720:	47a0      	blx	r4
    a722:	4602      	mov	r2, r0
    a724:	4b06      	ldr	r3, [pc, #24]	; (a740 <spi_nor_flash_init+0x34>)
    a726:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    a728:	bf00      	nop
    a72a:	bd98      	pop	{r3, r4, r7, pc}
    a72c:	20000e10 	.word	0x20000e10
    a730:	00002061 	.word	0x00002061
    a734:	0000a65d 	.word	0x0000a65d
    a738:	20000bfc 	.word	0x20000bfc
    a73c:	0000ab79 	.word	0x0000ab79
    a740:	20001010 	.word	0x20001010

0000a744 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    a744:	b580      	push	{r7, lr}
    a746:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    a748:	4805      	ldr	r0, [pc, #20]	; (a760 <cdc_device_acm_init+0x1c>)
    a74a:	4b06      	ldr	r3, [pc, #24]	; (a764 <cdc_device_acm_init+0x20>)
    a74c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    a74e:	4b06      	ldr	r3, [pc, #24]	; (a768 <cdc_device_acm_init+0x24>)
    a750:	4798      	blx	r3

	usbdc_start(single_desc);
    a752:	4806      	ldr	r0, [pc, #24]	; (a76c <cdc_device_acm_init+0x28>)
    a754:	4b06      	ldr	r3, [pc, #24]	; (a770 <cdc_device_acm_init+0x2c>)
    a756:	4798      	blx	r3
	usbdc_attach();
    a758:	4b06      	ldr	r3, [pc, #24]	; (a774 <cdc_device_acm_init+0x30>)
    a75a:	4798      	blx	r3
}
    a75c:	bf00      	nop
    a75e:	bd80      	pop	{r7, pc}
    a760:	20000c4c 	.word	0x20000c4c
    a764:	0000c165 	.word	0x0000c165
    a768:	0000b519 	.word	0x0000b519
    a76c:	20000200 	.word	0x20000200
    a770:	0000c201 	.word	0x0000c201
    a774:	0000c251 	.word	0x0000c251

0000a778 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    a778:	b580      	push	{r7, lr}
    a77a:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    a77c:	4b01      	ldr	r3, [pc, #4]	; (a784 <usb_init+0xc>)
    a77e:	4798      	blx	r3
}
    a780:	bf00      	nop
    a782:	bd80      	pop	{r7, pc}
    a784:	0000a745 	.word	0x0000a745

0000a788 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    a788:	b480      	push	{r7}
    a78a:	b085      	sub	sp, #20
    a78c:	af00      	add	r7, sp, #0
    a78e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a790:	f3ef 8310 	mrs	r3, PRIMASK
    a794:	60fb      	str	r3, [r7, #12]
  return(result);
    a796:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    a798:	687b      	ldr	r3, [r7, #4]
    a79a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    a79c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    a79e:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    a7a2:	bf00      	nop
    a7a4:	3714      	adds	r7, #20
    a7a6:	46bd      	mov	sp, r7
    a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7ac:	4770      	bx	lr

0000a7ae <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    a7ae:	b480      	push	{r7}
    a7b0:	b085      	sub	sp, #20
    a7b2:	af00      	add	r7, sp, #0
    a7b4:	6078      	str	r0, [r7, #4]
    a7b6:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    a7ba:	687b      	ldr	r3, [r7, #4]
    a7bc:	681b      	ldr	r3, [r3, #0]
    a7be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    a7c0:	68fb      	ldr	r3, [r7, #12]
    a7c2:	f383 8810 	msr	PRIMASK, r3
}
    a7c6:	bf00      	nop
    a7c8:	3714      	adds	r7, #20
    a7ca:	46bd      	mov	sp, r7
    a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7d0:	4770      	bx	lr
	...

0000a7d4 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    a7d4:	b580      	push	{r7, lr}
    a7d6:	b08c      	sub	sp, #48	; 0x30
    a7d8:	af00      	add	r7, sp, #0
    a7da:	6078      	str	r0, [r7, #4]
    a7dc:	460b      	mov	r3, r1
    a7de:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    a7e0:	687b      	ldr	r3, [r7, #4]
    a7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a7e4:	687b      	ldr	r3, [r7, #4]
    a7e6:	681b      	ldr	r3, [r3, #0]
    a7e8:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    a7ea:	f107 030c 	add.w	r3, r7, #12
    a7ee:	2200      	movs	r2, #0
    a7f0:	601a      	str	r2, [r3, #0]
    a7f2:	605a      	str	r2, [r3, #4]
    a7f4:	609a      	str	r2, [r3, #8]
    a7f6:	60da      	str	r2, [r3, #12]
    a7f8:	611a      	str	r2, [r3, #16]
    a7fa:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    a7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a7fe:	7b1b      	ldrb	r3, [r3, #12]
    a800:	2b00      	cmp	r3, #0
    a802:	d001      	beq.n	a808 <n25q256a_xip_confirm+0x34>
    a804:	2206      	movs	r2, #6
    a806:	e000      	b.n	a80a <n25q256a_xip_confirm+0x36>
    a808:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    a80a:	7b3b      	ldrb	r3, [r7, #12]
    a80c:	f362 0302 	bfi	r3, r2, #0, #3
    a810:	733b      	strb	r3, [r7, #12]
    a812:	7b3b      	ldrb	r3, [r7, #12]
    a814:	f043 0310 	orr.w	r3, r3, #16
    a818:	733b      	strb	r3, [r7, #12]
    a81a:	7b3b      	ldrb	r3, [r7, #12]
    a81c:	f043 0320 	orr.w	r3, r3, #32
    a820:	733b      	strb	r3, [r7, #12]
    a822:	7b3b      	ldrb	r3, [r7, #12]
    a824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a828:	733b      	strb	r3, [r7, #12]
    a82a:	7b3b      	ldrb	r3, [r7, #12]
    a82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a830:	733b      	strb	r3, [r7, #12]
    a832:	7b7b      	ldrb	r3, [r7, #13]
    a834:	f043 0303 	orr.w	r3, r3, #3
    a838:	737b      	strb	r3, [r7, #13]
    a83a:	7b7b      	ldrb	r3, [r7, #13]
    a83c:	2201      	movs	r2, #1
    a83e:	f362 1305 	bfi	r3, r2, #4, #2
    a842:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    a844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a846:	7b1b      	ldrb	r3, [r3, #12]
    a848:	2b00      	cmp	r3, #0
    a84a:	d001      	beq.n	a850 <n25q256a_xip_confirm+0x7c>
    a84c:	2208      	movs	r2, #8
    a84e:	e000      	b.n	a852 <n25q256a_xip_confirm+0x7e>
    a850:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    a852:	7bbb      	ldrb	r3, [r7, #14]
    a854:	f362 0304 	bfi	r3, r2, #0, #5
    a858:	73bb      	strb	r3, [r7, #14]
    a85a:	230b      	movs	r3, #11
    a85c:	743b      	strb	r3, [r7, #16]
    a85e:	78fb      	ldrb	r3, [r7, #3]
    a860:	2b00      	cmp	r3, #0
    a862:	d001      	beq.n	a868 <n25q256a_xip_confirm+0x94>
    a864:	2300      	movs	r3, #0
    a866:	e000      	b.n	a86a <n25q256a_xip_confirm+0x96>
    a868:	23ff      	movs	r3, #255	; 0xff
    a86a:	747b      	strb	r3, [r7, #17]
    a86c:	2301      	movs	r3, #1
    a86e:	61bb      	str	r3, [r7, #24]
    a870:	f107 0327 	add.w	r3, r7, #39	; 0x27
    a874:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    a876:	f107 030c 	add.w	r3, r7, #12
    a87a:	4619      	mov	r1, r3
    a87c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a87e:	4b07      	ldr	r3, [pc, #28]	; (a89c <n25q256a_xip_confirm+0xc8>)
    a880:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    a882:	78fb      	ldrb	r3, [r7, #3]
    a884:	2b00      	cmp	r3, #0
    a886:	d001      	beq.n	a88c <n25q256a_xip_confirm+0xb8>
    a888:	2202      	movs	r2, #2
    a88a:	e000      	b.n	a88e <n25q256a_xip_confirm+0xba>
    a88c:	2201      	movs	r2, #1
    a88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a890:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    a892:	2300      	movs	r3, #0
}
    a894:	4618      	mov	r0, r3
    a896:	3730      	adds	r7, #48	; 0x30
    a898:	46bd      	mov	sp, r7
    a89a:	bd80      	pop	{r7, pc}
    a89c:	000020d9 	.word	0x000020d9

0000a8a0 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    a8a0:	b580      	push	{r7, lr}
    a8a2:	b08c      	sub	sp, #48	; 0x30
    a8a4:	af00      	add	r7, sp, #0
    a8a6:	6078      	str	r0, [r7, #4]
    a8a8:	460b      	mov	r3, r1
    a8aa:	70fb      	strb	r3, [r7, #3]
    a8ac:	4613      	mov	r3, r2
    a8ae:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    a8b0:	2300      	movs	r3, #0
    a8b2:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    a8b4:	687b      	ldr	r3, [r7, #4]
    a8b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    a8b8:	687b      	ldr	r3, [r7, #4]
    a8ba:	681b      	ldr	r3, [r3, #0]
    a8bc:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    a8be:	f107 030c 	add.w	r3, r7, #12
    a8c2:	2200      	movs	r2, #0
    a8c4:	601a      	str	r2, [r3, #0]
    a8c6:	605a      	str	r2, [r3, #4]
    a8c8:	609a      	str	r2, [r3, #8]
    a8ca:	60da      	str	r2, [r3, #12]
    a8cc:	611a      	str	r2, [r3, #16]
    a8ce:	615a      	str	r2, [r3, #20]
    a8d0:	78fb      	ldrb	r3, [r7, #3]
    a8d2:	f003 0307 	and.w	r3, r3, #7
    a8d6:	b2da      	uxtb	r2, r3
    a8d8:	7b3b      	ldrb	r3, [r7, #12]
    a8da:	f362 0302 	bfi	r3, r2, #0, #3
    a8de:	733b      	strb	r3, [r7, #12]
    a8e0:	7b3b      	ldrb	r3, [r7, #12]
    a8e2:	f043 0310 	orr.w	r3, r3, #16
    a8e6:	733b      	strb	r3, [r7, #12]
    a8e8:	7b3b      	ldrb	r3, [r7, #12]
    a8ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a8ee:	733b      	strb	r3, [r7, #12]
    a8f0:	78bb      	ldrb	r3, [r7, #2]
    a8f2:	743b      	strb	r3, [r7, #16]
    a8f4:	2301      	movs	r3, #1
    a8f6:	61bb      	str	r3, [r7, #24]
    a8f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a8fc:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a900:	7b5b      	ldrb	r3, [r3, #13]
    a902:	2b00      	cmp	r3, #0
    a904:	d003      	beq.n	a90e <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    a906:	2100      	movs	r1, #0
    a908:	6878      	ldr	r0, [r7, #4]
    a90a:	4b0a      	ldr	r3, [pc, #40]	; (a934 <n25q256a_read_reg+0x94>)
    a90c:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    a90e:	f107 030c 	add.w	r3, r7, #12
    a912:	4619      	mov	r1, r3
    a914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a916:	4b08      	ldr	r3, [pc, #32]	; (a938 <n25q256a_read_reg+0x98>)
    a918:	4798      	blx	r3
	if (n25q->xip_mode) {
    a91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a91c:	7b5b      	ldrb	r3, [r3, #13]
    a91e:	2b00      	cmp	r3, #0
    a920:	d003      	beq.n	a92a <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    a922:	2101      	movs	r1, #1
    a924:	6878      	ldr	r0, [r7, #4]
    a926:	4b03      	ldr	r3, [pc, #12]	; (a934 <n25q256a_read_reg+0x94>)
    a928:	4798      	blx	r3
	}
	return status;
    a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    a92c:	4618      	mov	r0, r3
    a92e:	3730      	adds	r7, #48	; 0x30
    a930:	46bd      	mov	sp, r7
    a932:	bd80      	pop	{r7, pc}
    a934:	0000a7d5 	.word	0x0000a7d5
    a938:	000020d9 	.word	0x000020d9

0000a93c <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    a93c:	b580      	push	{r7, lr}
    a93e:	b08c      	sub	sp, #48	; 0x30
    a940:	af00      	add	r7, sp, #0
    a942:	60f8      	str	r0, [r7, #12]
    a944:	607b      	str	r3, [r7, #4]
    a946:	460b      	mov	r3, r1
    a948:	72fb      	strb	r3, [r7, #11]
    a94a:	4613      	mov	r3, r2
    a94c:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    a94e:	68fb      	ldr	r3, [r7, #12]
    a950:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a952:	68fb      	ldr	r3, [r7, #12]
    a954:	681b      	ldr	r3, [r3, #0]
    a956:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    a958:	f107 0310 	add.w	r3, r7, #16
    a95c:	2200      	movs	r2, #0
    a95e:	601a      	str	r2, [r3, #0]
    a960:	605a      	str	r2, [r3, #4]
    a962:	609a      	str	r2, [r3, #8]
    a964:	60da      	str	r2, [r3, #12]
    a966:	611a      	str	r2, [r3, #16]
    a968:	615a      	str	r2, [r3, #20]
    a96a:	7afb      	ldrb	r3, [r7, #11]
    a96c:	f003 0307 	and.w	r3, r3, #7
    a970:	b2da      	uxtb	r2, r3
    a972:	7c3b      	ldrb	r3, [r7, #16]
    a974:	f362 0302 	bfi	r3, r2, #0, #3
    a978:	743b      	strb	r3, [r7, #16]
    a97a:	7c3b      	ldrb	r3, [r7, #16]
    a97c:	f043 0310 	orr.w	r3, r3, #16
    a980:	743b      	strb	r3, [r7, #16]
    a982:	7c3b      	ldrb	r3, [r7, #16]
    a984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a988:	743b      	strb	r3, [r7, #16]
    a98a:	7c7b      	ldrb	r3, [r7, #17]
    a98c:	2202      	movs	r2, #2
    a98e:	f362 1305 	bfi	r3, r2, #4, #2
    a992:	747b      	strb	r3, [r7, #17]
    a994:	7abb      	ldrb	r3, [r7, #10]
    a996:	753b      	strb	r3, [r7, #20]
    a998:	2301      	movs	r3, #1
    a99a:	61fb      	str	r3, [r7, #28]
    a99c:	1d3b      	adds	r3, r7, #4
    a99e:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a9a2:	7b5b      	ldrb	r3, [r3, #13]
    a9a4:	2b00      	cmp	r3, #0
    a9a6:	d003      	beq.n	a9b0 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    a9a8:	2100      	movs	r1, #0
    a9aa:	68f8      	ldr	r0, [r7, #12]
    a9ac:	4b09      	ldr	r3, [pc, #36]	; (a9d4 <n25q256a_write_reg+0x98>)
    a9ae:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    a9b0:	f107 0310 	add.w	r3, r7, #16
    a9b4:	4619      	mov	r1, r3
    a9b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a9b8:	4b07      	ldr	r3, [pc, #28]	; (a9d8 <n25q256a_write_reg+0x9c>)
    a9ba:	4798      	blx	r3
	if (n25q->xip_mode) {
    a9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a9be:	7b5b      	ldrb	r3, [r3, #13]
    a9c0:	2b00      	cmp	r3, #0
    a9c2:	d003      	beq.n	a9cc <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    a9c4:	2101      	movs	r1, #1
    a9c6:	68f8      	ldr	r0, [r7, #12]
    a9c8:	4b02      	ldr	r3, [pc, #8]	; (a9d4 <n25q256a_write_reg+0x98>)
    a9ca:	4798      	blx	r3
	}
}
    a9cc:	bf00      	nop
    a9ce:	3730      	adds	r7, #48	; 0x30
    a9d0:	46bd      	mov	sp, r7
    a9d2:	bd80      	pop	{r7, pc}
    a9d4:	0000a7d5 	.word	0x0000a7d5
    a9d8:	000020d9 	.word	0x000020d9

0000a9dc <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    a9dc:	b580      	push	{r7, lr}
    a9de:	b090      	sub	sp, #64	; 0x40
    a9e0:	af00      	add	r7, sp, #0
    a9e2:	6078      	str	r0, [r7, #4]
    a9e4:	460b      	mov	r3, r1
    a9e6:	70fb      	strb	r3, [r7, #3]
    a9e8:	4613      	mov	r3, r2
    a9ea:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a9ec:	687b      	ldr	r3, [r7, #4]
    a9ee:	681b      	ldr	r3, [r3, #0]
    a9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    a9f2:	78bb      	ldrb	r3, [r7, #2]
    a9f4:	2b00      	cmp	r3, #0
    a9f6:	d001      	beq.n	a9fc <n25q256a_write_enable+0x20>
    a9f8:	2306      	movs	r3, #6
    a9fa:	e000      	b.n	a9fe <n25q256a_write_enable+0x22>
    a9fc:	2304      	movs	r3, #4
    a9fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    aa02:	f107 0320 	add.w	r3, r7, #32
    aa06:	2200      	movs	r2, #0
    aa08:	601a      	str	r2, [r3, #0]
    aa0a:	605a      	str	r2, [r3, #4]
    aa0c:	609a      	str	r2, [r3, #8]
    aa0e:	60da      	str	r2, [r3, #12]
    aa10:	611a      	str	r2, [r3, #16]
    aa12:	615a      	str	r2, [r3, #20]
    aa14:	78fb      	ldrb	r3, [r7, #3]
    aa16:	f003 0307 	and.w	r3, r3, #7
    aa1a:	b2da      	uxtb	r2, r3
    aa1c:	f897 3020 	ldrb.w	r3, [r7, #32]
    aa20:	f362 0302 	bfi	r3, r2, #0, #3
    aa24:	f887 3020 	strb.w	r3, [r7, #32]
    aa28:	f897 3020 	ldrb.w	r3, [r7, #32]
    aa2c:	f043 0310 	orr.w	r3, r3, #16
    aa30:	f887 3020 	strb.w	r3, [r7, #32]
    aa34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    aa38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    aa3c:	f107 0308 	add.w	r3, r7, #8
    aa40:	2200      	movs	r2, #0
    aa42:	601a      	str	r2, [r3, #0]
    aa44:	605a      	str	r2, [r3, #4]
    aa46:	609a      	str	r2, [r3, #8]
    aa48:	60da      	str	r2, [r3, #12]
    aa4a:	611a      	str	r2, [r3, #16]
    aa4c:	615a      	str	r2, [r3, #20]
    aa4e:	78fb      	ldrb	r3, [r7, #3]
    aa50:	f003 0307 	and.w	r3, r3, #7
    aa54:	b2da      	uxtb	r2, r3
    aa56:	7a3b      	ldrb	r3, [r7, #8]
    aa58:	f362 0302 	bfi	r3, r2, #0, #3
    aa5c:	723b      	strb	r3, [r7, #8]
    aa5e:	7a3b      	ldrb	r3, [r7, #8]
    aa60:	f043 0310 	orr.w	r3, r3, #16
    aa64:	723b      	strb	r3, [r7, #8]
    aa66:	7a3b      	ldrb	r3, [r7, #8]
    aa68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aa6c:	723b      	strb	r3, [r7, #8]
    aa6e:	2305      	movs	r3, #5
    aa70:	733b      	strb	r3, [r7, #12]
    aa72:	2301      	movs	r3, #1
    aa74:	617b      	str	r3, [r7, #20]
    aa76:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    aa7a:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    aa7c:	f107 0320 	add.w	r3, r7, #32
    aa80:	4619      	mov	r1, r3
    aa82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    aa84:	4b08      	ldr	r3, [pc, #32]	; (aaa8 <n25q256a_write_enable+0xcc>)
    aa86:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    aa88:	f107 0308 	add.w	r3, r7, #8
    aa8c:	4619      	mov	r1, r3
    aa8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    aa90:	4b05      	ldr	r3, [pc, #20]	; (aaa8 <n25q256a_write_enable+0xcc>)
    aa92:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    aa94:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    aa98:	f003 0302 	and.w	r3, r3, #2
    aa9c:	2b00      	cmp	r3, #0
    aa9e:	d0ed      	beq.n	aa7c <n25q256a_write_enable+0xa0>
}
    aaa0:	bf00      	nop
    aaa2:	3740      	adds	r7, #64	; 0x40
    aaa4:	46bd      	mov	sp, r7
    aaa6:	bd80      	pop	{r7, pc}
    aaa8:	000020d9 	.word	0x000020d9

0000aaac <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    aaac:	b590      	push	{r4, r7, lr}
    aaae:	b087      	sub	sp, #28
    aab0:	af00      	add	r7, sp, #0
    aab2:	6078      	str	r0, [r7, #4]
    aab4:	460b      	mov	r3, r1
    aab6:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    aab8:	687b      	ldr	r3, [r7, #4]
    aaba:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    aabc:	68fb      	ldr	r3, [r7, #12]
    aabe:	7b1b      	ldrb	r3, [r3, #12]
    aac0:	2b00      	cmp	r3, #0
    aac2:	d001      	beq.n	aac8 <n25q256a_switch_mode+0x1c>
    aac4:	2306      	movs	r3, #6
    aac6:	e000      	b.n	aaca <n25q256a_switch_mode+0x1e>
    aac8:	2300      	movs	r3, #0
    aaca:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    aacc:	7afb      	ldrb	r3, [r7, #11]
    aace:	2265      	movs	r2, #101	; 0x65
    aad0:	4619      	mov	r1, r3
    aad2:	6878      	ldr	r0, [r7, #4]
    aad4:	4b25      	ldr	r3, [pc, #148]	; (ab6c <n25q256a_switch_mode+0xc0>)
    aad6:	4798      	blx	r3
    aad8:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    aada:	2300      	movs	r3, #0
    aadc:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    aade:	68fb      	ldr	r3, [r7, #12]
    aae0:	7b1b      	ldrb	r3, [r3, #12]
    aae2:	78fa      	ldrb	r2, [r7, #3]
    aae4:	429a      	cmp	r2, r3
    aae6:	d03d      	beq.n	ab64 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    aae8:	78fb      	ldrb	r3, [r7, #3]
    aaea:	2b00      	cmp	r3, #0
    aaec:	d00b      	beq.n	ab06 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    aaee:	697b      	ldr	r3, [r7, #20]
    aaf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aaf4:	2b00      	cmp	r3, #0
    aaf6:	d011      	beq.n	ab1c <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    aaf8:	697b      	ldr	r3, [r7, #20]
    aafa:	f003 031f 	and.w	r3, r3, #31
    aafe:	617b      	str	r3, [r7, #20]
			modify = 1;
    ab00:	2301      	movs	r3, #1
    ab02:	74fb      	strb	r3, [r7, #19]
    ab04:	e00a      	b.n	ab1c <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    ab06:	697b      	ldr	r3, [r7, #20]
    ab08:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ab0c:	2b00      	cmp	r3, #0
    ab0e:	d105      	bne.n	ab1c <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    ab10:	697b      	ldr	r3, [r7, #20]
    ab12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    ab16:	617b      	str	r3, [r7, #20]
			modify = 1;
    ab18:	2301      	movs	r3, #1
    ab1a:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    ab1c:	7cfb      	ldrb	r3, [r7, #19]
    ab1e:	2b00      	cmp	r3, #0
    ab20:	d021      	beq.n	ab66 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    ab22:	68fb      	ldr	r3, [r7, #12]
    ab24:	78fa      	ldrb	r2, [r7, #3]
    ab26:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    ab28:	7afb      	ldrb	r3, [r7, #11]
    ab2a:	2201      	movs	r2, #1
    ab2c:	4619      	mov	r1, r3
    ab2e:	6878      	ldr	r0, [r7, #4]
    ab30:	4b0f      	ldr	r3, [pc, #60]	; (ab70 <n25q256a_switch_mode+0xc4>)
    ab32:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    ab34:	7af9      	ldrb	r1, [r7, #11]
    ab36:	697b      	ldr	r3, [r7, #20]
    ab38:	2261      	movs	r2, #97	; 0x61
    ab3a:	6878      	ldr	r0, [r7, #4]
    ab3c:	4c0d      	ldr	r4, [pc, #52]	; (ab74 <n25q256a_switch_mode+0xc8>)
    ab3e:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ab40:	78fb      	ldrb	r3, [r7, #3]
    ab42:	2b00      	cmp	r3, #0
    ab44:	d001      	beq.n	ab4a <n25q256a_switch_mode+0x9e>
    ab46:	2306      	movs	r3, #6
    ab48:	e000      	b.n	ab4c <n25q256a_switch_mode+0xa0>
    ab4a:	2300      	movs	r3, #0
    ab4c:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    ab4e:	7afb      	ldrb	r3, [r7, #11]
    ab50:	2265      	movs	r2, #101	; 0x65
    ab52:	4619      	mov	r1, r3
    ab54:	6878      	ldr	r0, [r7, #4]
    ab56:	4b05      	ldr	r3, [pc, #20]	; (ab6c <n25q256a_switch_mode+0xc0>)
    ab58:	4798      	blx	r3
    ab5a:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    ab5c:	68fb      	ldr	r3, [r7, #12]
    ab5e:	78fa      	ldrb	r2, [r7, #3]
    ab60:	731a      	strb	r2, [r3, #12]
    ab62:	e000      	b.n	ab66 <n25q256a_switch_mode+0xba>
		return;
    ab64:	bf00      	nop
	}
}
    ab66:	371c      	adds	r7, #28
    ab68:	46bd      	mov	sp, r7
    ab6a:	bd90      	pop	{r4, r7, pc}
    ab6c:	0000a8a1 	.word	0x0000a8a1
    ab70:	0000a9dd 	.word	0x0000a9dd
    ab74:	0000a93d 	.word	0x0000a93d

0000ab78 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    ab78:	b580      	push	{r7, lr}
    ab7a:	b086      	sub	sp, #24
    ab7c:	af00      	add	r7, sp, #0
    ab7e:	60f8      	str	r0, [r7, #12]
    ab80:	60b9      	str	r1, [r7, #8]
    ab82:	607a      	str	r2, [r7, #4]
    ab84:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    ab86:	68fb      	ldr	r3, [r7, #12]
    ab88:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    ab8a:	4a0c      	ldr	r2, [pc, #48]	; (abbc <n25q256a_construct+0x44>)
    ab8c:	68b9      	ldr	r1, [r7, #8]
    ab8e:	68f8      	ldr	r0, [r7, #12]
    ab90:	4b0b      	ldr	r3, [pc, #44]	; (abc0 <n25q256a_construct+0x48>)
    ab92:	4798      	blx	r3
	n25q->quad_mode    = 0;
    ab94:	697b      	ldr	r3, [r7, #20]
    ab96:	2200      	movs	r2, #0
    ab98:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    ab9a:	697b      	ldr	r3, [r7, #20]
    ab9c:	2200      	movs	r2, #0
    ab9e:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    aba0:	697b      	ldr	r3, [r7, #20]
    aba2:	687a      	ldr	r2, [r7, #4]
    aba4:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    aba6:	78fb      	ldrb	r3, [r7, #3]
    aba8:	4619      	mov	r1, r3
    abaa:	68f8      	ldr	r0, [r7, #12]
    abac:	4b05      	ldr	r3, [pc, #20]	; (abc4 <n25q256a_construct+0x4c>)
    abae:	4798      	blx	r3
	return me;
    abb0:	68fb      	ldr	r3, [r7, #12]
}
    abb2:	4618      	mov	r0, r3
    abb4:	3718      	adds	r7, #24
    abb6:	46bd      	mov	sp, r7
    abb8:	bd80      	pop	{r7, pc}
    abba:	bf00      	nop
    abbc:	0000d2e4 	.word	0x0000d2e4
    abc0:	0000b055 	.word	0x0000b055
    abc4:	0000aaad 	.word	0x0000aaad

0000abc8 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    abc8:	b580      	push	{r7, lr}
    abca:	b08c      	sub	sp, #48	; 0x30
    abcc:	af00      	add	r7, sp, #0
    abce:	60f8      	str	r0, [r7, #12]
    abd0:	60b9      	str	r1, [r7, #8]
    abd2:	607a      	str	r2, [r7, #4]
    abd4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    abd6:	68fb      	ldr	r3, [r7, #12]
    abd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    abda:	68fb      	ldr	r3, [r7, #12]
    abdc:	681b      	ldr	r3, [r3, #0]
    abde:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    abe0:	f107 0310 	add.w	r3, r7, #16
    abe4:	2200      	movs	r2, #0
    abe6:	601a      	str	r2, [r3, #0]
    abe8:	605a      	str	r2, [r3, #4]
    abea:	609a      	str	r2, [r3, #8]
    abec:	60da      	str	r2, [r3, #12]
    abee:	611a      	str	r2, [r3, #16]
    abf0:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    abf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    abf4:	7b1b      	ldrb	r3, [r3, #12]
    abf6:	2b00      	cmp	r3, #0
    abf8:	d001      	beq.n	abfe <n25q256a_read+0x36>
    abfa:	2206      	movs	r2, #6
    abfc:	e000      	b.n	ac00 <n25q256a_read+0x38>
    abfe:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    ac00:	7c3b      	ldrb	r3, [r7, #16]
    ac02:	f362 0302 	bfi	r3, r2, #0, #3
    ac06:	743b      	strb	r3, [r7, #16]
    ac08:	7c3b      	ldrb	r3, [r7, #16]
    ac0a:	f043 0310 	orr.w	r3, r3, #16
    ac0e:	743b      	strb	r3, [r7, #16]
    ac10:	7c3b      	ldrb	r3, [r7, #16]
    ac12:	f043 0320 	orr.w	r3, r3, #32
    ac16:	743b      	strb	r3, [r7, #16]
    ac18:	7c3b      	ldrb	r3, [r7, #16]
    ac1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ac1e:	743b      	strb	r3, [r7, #16]
    ac20:	7c7b      	ldrb	r3, [r7, #17]
    ac22:	2201      	movs	r2, #1
    ac24:	f362 1305 	bfi	r3, r2, #4, #2
    ac28:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    ac2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac2c:	7b1b      	ldrb	r3, [r3, #12]
    ac2e:	2b00      	cmp	r3, #0
    ac30:	d001      	beq.n	ac36 <n25q256a_read+0x6e>
    ac32:	220a      	movs	r2, #10
    ac34:	e000      	b.n	ac38 <n25q256a_read+0x70>
    ac36:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    ac38:	7cbb      	ldrb	r3, [r7, #18]
    ac3a:	f362 0304 	bfi	r3, r2, #0, #5
    ac3e:	74bb      	strb	r3, [r7, #18]
    ac40:	230b      	movs	r3, #11
    ac42:	753b      	strb	r3, [r7, #20]
    ac44:	687b      	ldr	r3, [r7, #4]
    ac46:	61bb      	str	r3, [r7, #24]
    ac48:	683b      	ldr	r3, [r7, #0]
    ac4a:	61fb      	str	r3, [r7, #28]
    ac4c:	68bb      	ldr	r3, [r7, #8]
    ac4e:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    ac50:	f107 0310 	add.w	r3, r7, #16
    ac54:	4619      	mov	r1, r3
    ac56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ac58:	4b03      	ldr	r3, [pc, #12]	; (ac68 <n25q256a_read+0xa0>)
    ac5a:	4798      	blx	r3
	return ERR_NONE;
    ac5c:	2300      	movs	r3, #0
}
    ac5e:	4618      	mov	r0, r3
    ac60:	3730      	adds	r7, #48	; 0x30
    ac62:	46bd      	mov	sp, r7
    ac64:	bd80      	pop	{r7, pc}
    ac66:	bf00      	nop
    ac68:	000020d9 	.word	0x000020d9

0000ac6c <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ac6c:	b580      	push	{r7, lr}
    ac6e:	b08c      	sub	sp, #48	; 0x30
    ac70:	af00      	add	r7, sp, #0
    ac72:	60f8      	str	r0, [r7, #12]
    ac74:	60b9      	str	r1, [r7, #8]
    ac76:	607a      	str	r2, [r7, #4]
    ac78:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ac7a:	68fb      	ldr	r3, [r7, #12]
    ac7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ac7e:	68fb      	ldr	r3, [r7, #12]
    ac80:	681b      	ldr	r3, [r3, #0]
    ac82:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ac84:	f107 0310 	add.w	r3, r7, #16
    ac88:	2200      	movs	r2, #0
    ac8a:	601a      	str	r2, [r3, #0]
    ac8c:	605a      	str	r2, [r3, #4]
    ac8e:	609a      	str	r2, [r3, #8]
    ac90:	60da      	str	r2, [r3, #12]
    ac92:	611a      	str	r2, [r3, #16]
    ac94:	615a      	str	r2, [r3, #20]
    ac96:	7c3b      	ldrb	r3, [r7, #16]
    ac98:	f043 0310 	orr.w	r3, r3, #16
    ac9c:	743b      	strb	r3, [r7, #16]
    ac9e:	7c3b      	ldrb	r3, [r7, #16]
    aca0:	f043 0320 	orr.w	r3, r3, #32
    aca4:	743b      	strb	r3, [r7, #16]
    aca6:	7c3b      	ldrb	r3, [r7, #16]
    aca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    acac:	743b      	strb	r3, [r7, #16]
    acae:	7c7b      	ldrb	r3, [r7, #17]
    acb0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    acb4:	747b      	strb	r3, [r7, #17]
    acb6:	2302      	movs	r3, #2
    acb8:	753b      	strb	r3, [r7, #20]
    acba:	687b      	ldr	r3, [r7, #4]
    acbc:	61bb      	str	r3, [r7, #24]
    acbe:	683b      	ldr	r3, [r7, #0]
    acc0:	61fb      	str	r3, [r7, #28]
    acc2:	68bb      	ldr	r3, [r7, #8]
    acc4:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    acc8:	7b1b      	ldrb	r3, [r3, #12]
    acca:	2b00      	cmp	r3, #0
    accc:	d001      	beq.n	acd2 <n25q256a_write+0x66>
    acce:	2206      	movs	r2, #6
    acd0:	e000      	b.n	acd4 <n25q256a_write+0x68>
    acd2:	2200      	movs	r2, #0
    acd4:	7c3b      	ldrb	r3, [r7, #16]
    acd6:	f362 0302 	bfi	r3, r2, #0, #3
    acda:	743b      	strb	r3, [r7, #16]
	while (length) {
    acdc:	e035      	b.n	ad4a <n25q256a_write+0xde>
		cmd.address = address;
    acde:	687b      	ldr	r3, [r7, #4]
    ace0:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    ace2:	683b      	ldr	r3, [r7, #0]
    ace4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ace8:	d802      	bhi.n	acf0 <n25q256a_write+0x84>
			cmd.buf_len = length;
    acea:	683b      	ldr	r3, [r7, #0]
    acec:	61fb      	str	r3, [r7, #28]
    acee:	e002      	b.n	acf6 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    acf0:	f44f 7380 	mov.w	r3, #256	; 0x100
    acf4:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    acf6:	7c3b      	ldrb	r3, [r7, #16]
    acf8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    acfc:	b2db      	uxtb	r3, r3
    acfe:	2201      	movs	r2, #1
    ad00:	4619      	mov	r1, r3
    ad02:	68f8      	ldr	r0, [r7, #12]
    ad04:	4b19      	ldr	r3, [pc, #100]	; (ad6c <n25q256a_write+0x100>)
    ad06:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    ad08:	f107 0310 	add.w	r3, r7, #16
    ad0c:	4619      	mov	r1, r3
    ad0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ad10:	4b17      	ldr	r3, [pc, #92]	; (ad70 <n25q256a_write+0x104>)
    ad12:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ad14:	bf00      	nop
    ad16:	7c3b      	ldrb	r3, [r7, #16]
    ad18:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ad1c:	b2db      	uxtb	r3, r3
    ad1e:	2270      	movs	r2, #112	; 0x70
    ad20:	4619      	mov	r1, r3
    ad22:	68f8      	ldr	r0, [r7, #12]
    ad24:	4b13      	ldr	r3, [pc, #76]	; (ad74 <n25q256a_write+0x108>)
    ad26:	4798      	blx	r3
    ad28:	4603      	mov	r3, r0
    ad2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad2e:	2b00      	cmp	r3, #0
    ad30:	d0f1      	beq.n	ad16 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    ad32:	6a3a      	ldr	r2, [r7, #32]
    ad34:	69fb      	ldr	r3, [r7, #28]
    ad36:	4413      	add	r3, r2
    ad38:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    ad3a:	69fb      	ldr	r3, [r7, #28]
    ad3c:	683a      	ldr	r2, [r7, #0]
    ad3e:	1ad3      	subs	r3, r2, r3
    ad40:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    ad42:	69fb      	ldr	r3, [r7, #28]
    ad44:	687a      	ldr	r2, [r7, #4]
    ad46:	4413      	add	r3, r2
    ad48:	607b      	str	r3, [r7, #4]
	while (length) {
    ad4a:	683b      	ldr	r3, [r7, #0]
    ad4c:	2b00      	cmp	r3, #0
    ad4e:	d1c6      	bne.n	acde <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    ad50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ad52:	7b5b      	ldrb	r3, [r3, #13]
    ad54:	2b00      	cmp	r3, #0
    ad56:	d003      	beq.n	ad60 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    ad58:	2101      	movs	r1, #1
    ad5a:	68f8      	ldr	r0, [r7, #12]
    ad5c:	4b06      	ldr	r3, [pc, #24]	; (ad78 <n25q256a_write+0x10c>)
    ad5e:	4798      	blx	r3
	}
	return ERR_NONE;
    ad60:	2300      	movs	r3, #0
}
    ad62:	4618      	mov	r0, r3
    ad64:	3730      	adds	r7, #48	; 0x30
    ad66:	46bd      	mov	sp, r7
    ad68:	bd80      	pop	{r7, pc}
    ad6a:	bf00      	nop
    ad6c:	0000a9dd 	.word	0x0000a9dd
    ad70:	000020d9 	.word	0x000020d9
    ad74:	0000a8a1 	.word	0x0000a8a1
    ad78:	0000a7d5 	.word	0x0000a7d5

0000ad7c <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    ad7c:	b580      	push	{r7, lr}
    ad7e:	b090      	sub	sp, #64	; 0x40
    ad80:	af00      	add	r7, sp, #0
    ad82:	60f8      	str	r0, [r7, #12]
    ad84:	60b9      	str	r1, [r7, #8]
    ad86:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ad88:	68fb      	ldr	r3, [r7, #12]
    ad8a:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ad8c:	68fb      	ldr	r3, [r7, #12]
    ad8e:	681b      	ldr	r3, [r3, #0]
    ad90:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    ad92:	f107 0314 	add.w	r3, r7, #20
    ad96:	2200      	movs	r2, #0
    ad98:	601a      	str	r2, [r3, #0]
    ad9a:	605a      	str	r2, [r3, #4]
    ad9c:	609a      	str	r2, [r3, #8]
    ad9e:	60da      	str	r2, [r3, #12]
    ada0:	611a      	str	r2, [r3, #16]
    ada2:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ada4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ada6:	7b1b      	ldrb	r3, [r3, #12]
    ada8:	2b00      	cmp	r3, #0
    adaa:	d001      	beq.n	adb0 <n25q256a_erase+0x34>
    adac:	2206      	movs	r2, #6
    adae:	e000      	b.n	adb2 <n25q256a_erase+0x36>
    adb0:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    adb2:	7d3b      	ldrb	r3, [r7, #20]
    adb4:	f362 0302 	bfi	r3, r2, #0, #3
    adb8:	753b      	strb	r3, [r7, #20]
    adba:	7d3b      	ldrb	r3, [r7, #20]
    adbc:	f043 0310 	orr.w	r3, r3, #16
    adc0:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    adc2:	687b      	ldr	r3, [r7, #4]
    adc4:	4a56      	ldr	r2, [pc, #344]	; (af20 <n25q256a_erase+0x1a4>)
    adc6:	4293      	cmp	r3, r2
    adc8:	bf94      	ite	ls
    adca:	2301      	movls	r3, #1
    adcc:	2300      	movhi	r3, #0
    adce:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    add0:	7d3b      	ldrb	r3, [r7, #20]
    add2:	f362 1345 	bfi	r3, r2, #5, #1
    add6:	753b      	strb	r3, [r7, #20]
    add8:	7d7b      	ldrb	r3, [r7, #21]
    adda:	2202      	movs	r2, #2
    addc:	f362 1305 	bfi	r3, r2, #4, #2
    ade0:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    ade2:	68bb      	ldr	r3, [r7, #8]
    ade4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    ade6:	687b      	ldr	r3, [r7, #4]
    ade8:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    adea:	2300      	movs	r3, #0
    adec:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    adee:	687b      	ldr	r3, [r7, #4]
    adf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    adf4:	2b00      	cmp	r3, #0
    adf6:	d104      	bne.n	ae02 <n25q256a_erase+0x86>
    adf8:	68bb      	ldr	r3, [r7, #8]
    adfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
    adfe:	2b00      	cmp	r3, #0
    ae00:	d002      	beq.n	ae08 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    ae02:	f06f 030c 	mvn.w	r3, #12
    ae06:	e087      	b.n	af18 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    ae08:	687b      	ldr	r3, [r7, #4]
    ae0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    ae0e:	d368      	bcc.n	aee2 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    ae10:	23c7      	movs	r3, #199	; 0xc7
    ae12:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ae14:	7d3b      	ldrb	r3, [r7, #20]
    ae16:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae1a:	b2db      	uxtb	r3, r3
    ae1c:	2201      	movs	r2, #1
    ae1e:	4619      	mov	r1, r3
    ae20:	68f8      	ldr	r0, [r7, #12]
    ae22:	4b40      	ldr	r3, [pc, #256]	; (af24 <n25q256a_erase+0x1a8>)
    ae24:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    ae26:	f107 0314 	add.w	r3, r7, #20
    ae2a:	4619      	mov	r1, r3
    ae2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ae2e:	4b3e      	ldr	r3, [pc, #248]	; (af28 <n25q256a_erase+0x1ac>)
    ae30:	4798      	blx	r3
    ae32:	e059      	b.n	aee8 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    ae34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae36:	b29b      	uxth	r3, r3
    ae38:	2b00      	cmp	r3, #0
    ae3a:	d11f      	bne.n	ae7c <n25q256a_erase+0x100>
    ae3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    ae42:	d31b      	bcc.n	ae7c <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    ae44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae46:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    ae48:	23d8      	movs	r3, #216	; 0xd8
    ae4a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ae4c:	7d3b      	ldrb	r3, [r7, #20]
    ae4e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae52:	b2db      	uxtb	r3, r3
    ae54:	2201      	movs	r2, #1
    ae56:	4619      	mov	r1, r3
    ae58:	68f8      	ldr	r0, [r7, #12]
    ae5a:	4b32      	ldr	r3, [pc, #200]	; (af24 <n25q256a_erase+0x1a8>)
    ae5c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ae5e:	f107 0314 	add.w	r3, r7, #20
    ae62:	4619      	mov	r1, r3
    ae64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ae66:	4b30      	ldr	r3, [pc, #192]	; (af28 <n25q256a_erase+0x1ac>)
    ae68:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    ae6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae6c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ae70:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    ae72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae74:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    ae78:	63bb      	str	r3, [r7, #56]	; 0x38
    ae7a:	e023      	b.n	aec4 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    ae7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    ae82:	d31b      	bcc.n	aebc <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    ae84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae86:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    ae88:	2320      	movs	r3, #32
    ae8a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ae8c:	7d3b      	ldrb	r3, [r7, #20]
    ae8e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae92:	b2db      	uxtb	r3, r3
    ae94:	2201      	movs	r2, #1
    ae96:	4619      	mov	r1, r3
    ae98:	68f8      	ldr	r0, [r7, #12]
    ae9a:	4b22      	ldr	r3, [pc, #136]	; (af24 <n25q256a_erase+0x1a8>)
    ae9c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ae9e:	f107 0314 	add.w	r3, r7, #20
    aea2:	4619      	mov	r1, r3
    aea4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    aea6:	4b20      	ldr	r3, [pc, #128]	; (af28 <n25q256a_erase+0x1ac>)
    aea8:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    aeaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    aeac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    aeb0:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    aeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aeb4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    aeb8:	63bb      	str	r3, [r7, #56]	; 0x38
    aeba:	e003      	b.n	aec4 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    aebc:	f06f 030c 	mvn.w	r3, #12
    aec0:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    aec2:	e011      	b.n	aee8 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    aec4:	bf00      	nop
    aec6:	7d3b      	ldrb	r3, [r7, #20]
    aec8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aecc:	b2db      	uxtb	r3, r3
    aece:	2270      	movs	r2, #112	; 0x70
    aed0:	4619      	mov	r1, r3
    aed2:	68f8      	ldr	r0, [r7, #12]
    aed4:	4b15      	ldr	r3, [pc, #84]	; (af2c <n25q256a_erase+0x1b0>)
    aed6:	4798      	blx	r3
    aed8:	4603      	mov	r3, r0
    aeda:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aede:	2b00      	cmp	r3, #0
    aee0:	d0f1      	beq.n	aec6 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    aee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aee4:	2b00      	cmp	r3, #0
    aee6:	d1a5      	bne.n	ae34 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    aee8:	bf00      	nop
    aeea:	7d3b      	ldrb	r3, [r7, #20]
    aeec:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aef0:	b2db      	uxtb	r3, r3
    aef2:	2270      	movs	r2, #112	; 0x70
    aef4:	4619      	mov	r1, r3
    aef6:	68f8      	ldr	r0, [r7, #12]
    aef8:	4b0c      	ldr	r3, [pc, #48]	; (af2c <n25q256a_erase+0x1b0>)
    aefa:	4798      	blx	r3
    aefc:	4603      	mov	r3, r0
    aefe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af02:	2b00      	cmp	r3, #0
    af04:	d0f1      	beq.n	aeea <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    af06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af08:	7b5b      	ldrb	r3, [r3, #13]
    af0a:	2b00      	cmp	r3, #0
    af0c:	d003      	beq.n	af16 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    af0e:	2101      	movs	r1, #1
    af10:	68f8      	ldr	r0, [r7, #12]
    af12:	4b07      	ldr	r3, [pc, #28]	; (af30 <n25q256a_erase+0x1b4>)
    af14:	4798      	blx	r3
	}
	return rc;
    af16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    af18:	4618      	mov	r0, r3
    af1a:	3740      	adds	r7, #64	; 0x40
    af1c:	46bd      	mov	sp, r7
    af1e:	bd80      	pop	{r7, pc}
    af20:	001fffff 	.word	0x001fffff
    af24:	0000a9dd 	.word	0x0000a9dd
    af28:	000020d9 	.word	0x000020d9
    af2c:	0000a8a1 	.word	0x0000a8a1
    af30:	0000a7d5 	.word	0x0000a7d5

0000af34 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    af34:	b590      	push	{r4, r7, lr}
    af36:	b085      	sub	sp, #20
    af38:	af00      	add	r7, sp, #0
    af3a:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    af3c:	687b      	ldr	r3, [r7, #4]
    af3e:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    af40:	68fb      	ldr	r3, [r7, #12]
    af42:	7b1b      	ldrb	r3, [r3, #12]
    af44:	2b00      	cmp	r3, #0
    af46:	d001      	beq.n	af4c <n25q256a_enable_xip+0x18>
    af48:	2306      	movs	r3, #6
    af4a:	e000      	b.n	af4e <n25q256a_enable_xip+0x1a>
    af4c:	2300      	movs	r3, #0
    af4e:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    af50:	68fb      	ldr	r3, [r7, #12]
    af52:	7b5b      	ldrb	r3, [r3, #13]
    af54:	2b00      	cmp	r3, #0
    af56:	d129      	bne.n	afac <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    af58:	7afb      	ldrb	r3, [r7, #11]
    af5a:	2285      	movs	r2, #133	; 0x85
    af5c:	4619      	mov	r1, r3
    af5e:	6878      	ldr	r0, [r7, #4]
    af60:	4b15      	ldr	r3, [pc, #84]	; (afb8 <n25q256a_enable_xip+0x84>)
    af62:	4798      	blx	r3
    af64:	4603      	mov	r3, r0
    af66:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    af68:	7abb      	ldrb	r3, [r7, #10]
    af6a:	f003 0308 	and.w	r3, r3, #8
    af6e:	2b00      	cmp	r3, #0
    af70:	d015      	beq.n	af9e <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    af72:	7abb      	ldrb	r3, [r7, #10]
    af74:	f023 0308 	bic.w	r3, r3, #8
    af78:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    af7a:	7abb      	ldrb	r3, [r7, #10]
    af7c:	7af9      	ldrb	r1, [r7, #11]
    af7e:	2281      	movs	r2, #129	; 0x81
    af80:	6878      	ldr	r0, [r7, #4]
    af82:	4c0e      	ldr	r4, [pc, #56]	; (afbc <n25q256a_enable_xip+0x88>)
    af84:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    af86:	bf00      	nop
    af88:	7afb      	ldrb	r3, [r7, #11]
    af8a:	2270      	movs	r2, #112	; 0x70
    af8c:	4619      	mov	r1, r3
    af8e:	6878      	ldr	r0, [r7, #4]
    af90:	4b09      	ldr	r3, [pc, #36]	; (afb8 <n25q256a_enable_xip+0x84>)
    af92:	4798      	blx	r3
    af94:	4603      	mov	r3, r0
    af96:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af9a:	2b00      	cmp	r3, #0
    af9c:	d0f4      	beq.n	af88 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    af9e:	68fb      	ldr	r3, [r7, #12]
    afa0:	2201      	movs	r2, #1
    afa2:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    afa4:	2101      	movs	r1, #1
    afa6:	6878      	ldr	r0, [r7, #4]
    afa8:	4b05      	ldr	r3, [pc, #20]	; (afc0 <n25q256a_enable_xip+0x8c>)
    afaa:	4798      	blx	r3
	}
	return ERR_NONE;
    afac:	2300      	movs	r3, #0
}
    afae:	4618      	mov	r0, r3
    afb0:	3714      	adds	r7, #20
    afb2:	46bd      	mov	sp, r7
    afb4:	bd90      	pop	{r4, r7, pc}
    afb6:	bf00      	nop
    afb8:	0000a8a1 	.word	0x0000a8a1
    afbc:	0000a93d 	.word	0x0000a93d
    afc0:	0000a7d5 	.word	0x0000a7d5

0000afc4 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    afc4:	b580      	push	{r7, lr}
    afc6:	b086      	sub	sp, #24
    afc8:	af00      	add	r7, sp, #0
    afca:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    afcc:	687b      	ldr	r3, [r7, #4]
    afce:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    afd0:	687b      	ldr	r3, [r7, #4]
    afd2:	681b      	ldr	r3, [r3, #0]
    afd4:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    afd6:	697b      	ldr	r3, [r7, #20]
    afd8:	7b1b      	ldrb	r3, [r3, #12]
    afda:	2b00      	cmp	r3, #0
    afdc:	d001      	beq.n	afe2 <n25q256a_disable_xip+0x1e>
    afde:	2306      	movs	r3, #6
    afe0:	e000      	b.n	afe4 <n25q256a_disable_xip+0x20>
    afe2:	2300      	movs	r3, #0
    afe4:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    afe6:	2100      	movs	r1, #0
    afe8:	6878      	ldr	r0, [r7, #4]
    afea:	4b15      	ldr	r3, [pc, #84]	; (b040 <n25q256a_disable_xip+0x7c>)
    afec:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    afee:	7bfb      	ldrb	r3, [r7, #15]
    aff0:	2285      	movs	r2, #133	; 0x85
    aff2:	4619      	mov	r1, r3
    aff4:	6878      	ldr	r0, [r7, #4]
    aff6:	4b13      	ldr	r3, [pc, #76]	; (b044 <n25q256a_disable_xip+0x80>)
    aff8:	4798      	blx	r3
    affa:	4603      	mov	r3, r0
    affc:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    affe:	7bbb      	ldrb	r3, [r7, #14]
    b000:	f003 0308 	and.w	r3, r3, #8
    b004:	2b00      	cmp	r3, #0
    b006:	d113      	bne.n	b030 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    b008:	697b      	ldr	r3, [r7, #20]
    b00a:	689b      	ldr	r3, [r3, #8]
    b00c:	2b00      	cmp	r3, #0
    b00e:	d00f      	beq.n	b030 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    b010:	693b      	ldr	r3, [r7, #16]
    b012:	681b      	ldr	r3, [r3, #0]
    b014:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    b016:	6938      	ldr	r0, [r7, #16]
    b018:	4b0b      	ldr	r3, [pc, #44]	; (b048 <n25q256a_disable_xip+0x84>)
    b01a:	4798      	blx	r3
			n25q->pin_exit_xip();
    b01c:	697b      	ldr	r3, [r7, #20]
    b01e:	689b      	ldr	r3, [r3, #8]
    b020:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    b022:	68b9      	ldr	r1, [r7, #8]
    b024:	6938      	ldr	r0, [r7, #16]
    b026:	4b09      	ldr	r3, [pc, #36]	; (b04c <n25q256a_disable_xip+0x88>)
    b028:	4798      	blx	r3
			qspi_sync_enable(descr);
    b02a:	6938      	ldr	r0, [r7, #16]
    b02c:	4b08      	ldr	r3, [pc, #32]	; (b050 <n25q256a_disable_xip+0x8c>)
    b02e:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    b030:	697b      	ldr	r3, [r7, #20]
    b032:	2200      	movs	r2, #0
    b034:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b036:	2300      	movs	r3, #0
}
    b038:	4618      	mov	r0, r3
    b03a:	3718      	adds	r7, #24
    b03c:	46bd      	mov	sp, r7
    b03e:	bd80      	pop	{r7, pc}
    b040:	0000a7d5 	.word	0x0000a7d5
    b044:	0000a8a1 	.word	0x0000a8a1
    b048:	0000209d 	.word	0x0000209d
    b04c:	00002015 	.word	0x00002015
    b050:	00002061 	.word	0x00002061

0000b054 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    b054:	b480      	push	{r7}
    b056:	b085      	sub	sp, #20
    b058:	af00      	add	r7, sp, #0
    b05a:	60f8      	str	r0, [r7, #12]
    b05c:	60b9      	str	r1, [r7, #8]
    b05e:	607a      	str	r2, [r7, #4]
	me->io        = io;
    b060:	68fb      	ldr	r3, [r7, #12]
    b062:	68ba      	ldr	r2, [r7, #8]
    b064:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    b066:	68fb      	ldr	r3, [r7, #12]
    b068:	687a      	ldr	r2, [r7, #4]
    b06a:	605a      	str	r2, [r3, #4]

	return me;
    b06c:	68fb      	ldr	r3, [r7, #12]
}
    b06e:	4618      	mov	r0, r3
    b070:	3714      	adds	r7, #20
    b072:	46bd      	mov	sp, r7
    b074:	f85d 7b04 	ldr.w	r7, [sp], #4
    b078:	4770      	bx	lr

0000b07a <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    b07a:	b480      	push	{r7}
    b07c:	b083      	sub	sp, #12
    b07e:	af00      	add	r7, sp, #0
    b080:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b082:	687b      	ldr	r3, [r7, #4]
    b084:	781b      	ldrb	r3, [r3, #0]
    b086:	b29a      	uxth	r2, r3
    b088:	687b      	ldr	r3, [r7, #4]
    b08a:	3301      	adds	r3, #1
    b08c:	781b      	ldrb	r3, [r3, #0]
    b08e:	b29b      	uxth	r3, r3
    b090:	021b      	lsls	r3, r3, #8
    b092:	b29b      	uxth	r3, r3
    b094:	4413      	add	r3, r2
    b096:	b29b      	uxth	r3, r3
}
    b098:	4618      	mov	r0, r3
    b09a:	370c      	adds	r7, #12
    b09c:	46bd      	mov	sp, r7
    b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0a2:	4770      	bx	lr

0000b0a4 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    b0a4:	b480      	push	{r7}
    b0a6:	b083      	sub	sp, #12
    b0a8:	af00      	add	r7, sp, #0
    b0aa:	6078      	str	r0, [r7, #4]
	return desc[0];
    b0ac:	687b      	ldr	r3, [r7, #4]
    b0ae:	781b      	ldrb	r3, [r3, #0]
}
    b0b0:	4618      	mov	r0, r3
    b0b2:	370c      	adds	r7, #12
    b0b4:	46bd      	mov	sp, r7
    b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0ba:	4770      	bx	lr

0000b0bc <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    b0bc:	b580      	push	{r7, lr}
    b0be:	b082      	sub	sp, #8
    b0c0:	af00      	add	r7, sp, #0
    b0c2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b0c4:	6878      	ldr	r0, [r7, #4]
    b0c6:	4b05      	ldr	r3, [pc, #20]	; (b0dc <usb_desc_next+0x20>)
    b0c8:	4798      	blx	r3
    b0ca:	4603      	mov	r3, r0
    b0cc:	461a      	mov	r2, r3
    b0ce:	687b      	ldr	r3, [r7, #4]
    b0d0:	4413      	add	r3, r2
}
    b0d2:	4618      	mov	r0, r3
    b0d4:	3708      	adds	r7, #8
    b0d6:	46bd      	mov	sp, r7
    b0d8:	bd80      	pop	{r7, pc}
    b0da:	bf00      	nop
    b0dc:	0000b0a5 	.word	0x0000b0a5

0000b0e0 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b0e0:	b580      	push	{r7, lr}
    b0e2:	b08c      	sub	sp, #48	; 0x30
    b0e4:	af00      	add	r7, sp, #0
    b0e6:	6078      	str	r0, [r7, #4]
    b0e8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b0ea:	687b      	ldr	r3, [r7, #4]
    b0ec:	689b      	ldr	r3, [r3, #8]
    b0ee:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    b0f0:	683b      	ldr	r3, [r7, #0]
    b0f2:	681b      	ldr	r3, [r3, #0]
    b0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b0f6:	2300      	movs	r3, #0
    b0f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b0fc:	e08f      	b.n	b21e <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    b0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b100:	2b00      	cmp	r3, #0
    b102:	d102      	bne.n	b10a <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    b104:	f06f 0309 	mvn.w	r3, #9
    b108:	e092      	b.n	b230 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    b10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b10c:	789b      	ldrb	r3, [r3, #2]
    b10e:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    b110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b112:	795b      	ldrb	r3, [r3, #5]
    b114:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b116:	7c7b      	ldrb	r3, [r7, #17]
    b118:	2b02      	cmp	r3, #2
    b11a:	d002      	beq.n	b122 <cdcdf_acm_enable+0x42>
    b11c:	7c7b      	ldrb	r3, [r7, #17]
    b11e:	2b0a      	cmp	r3, #10
    b120:	d121      	bne.n	b166 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b126:	6a3a      	ldr	r2, [r7, #32]
    b128:	5cd2      	ldrb	r2, [r2, r3]
    b12a:	7bbb      	ldrb	r3, [r7, #14]
    b12c:	429a      	cmp	r2, r3
    b12e:	d102      	bne.n	b136 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    b130:	f06f 0311 	mvn.w	r3, #17
    b134:	e07c      	b.n	b230 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b13a:	6a3a      	ldr	r2, [r7, #32]
    b13c:	5cd3      	ldrb	r3, [r2, r3]
    b13e:	2bff      	cmp	r3, #255	; 0xff
    b140:	d002      	beq.n	b148 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    b142:	f06f 031b 	mvn.w	r3, #27
    b146:	e073      	b.n	b230 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b14c:	7bb9      	ldrb	r1, [r7, #14]
    b14e:	6a3a      	ldr	r2, [r7, #32]
    b150:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b152:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b154:	683b      	ldr	r3, [r7, #0]
    b156:	685b      	ldr	r3, [r3, #4]
    b158:	2205      	movs	r2, #5
    b15a:	4619      	mov	r1, r3
    b15c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b15e:	4b36      	ldr	r3, [pc, #216]	; (b238 <cdcdf_acm_enable+0x158>)
    b160:	4798      	blx	r3
    b162:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b164:	e047      	b.n	b1f6 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    b166:	f06f 0309 	mvn.w	r3, #9
    b16a:	e061      	b.n	b230 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    b16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b16e:	789b      	ldrb	r3, [r3, #2]
    b170:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    b172:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b174:	78db      	ldrb	r3, [r3, #3]
    b176:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b178:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b17a:	3304      	adds	r3, #4
    b17c:	4618      	mov	r0, r3
    b17e:	4b2f      	ldr	r3, [pc, #188]	; (b23c <cdcdf_acm_enable+0x15c>)
    b180:	4798      	blx	r3
    b182:	4603      	mov	r3, r0
    b184:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b186:	7ebb      	ldrb	r3, [r7, #26]
    b188:	7ef9      	ldrb	r1, [r7, #27]
    b18a:	8bba      	ldrh	r2, [r7, #28]
    b18c:	4618      	mov	r0, r3
    b18e:	4b2c      	ldr	r3, [pc, #176]	; (b240 <cdcdf_acm_enable+0x160>)
    b190:	4798      	blx	r3
    b192:	4603      	mov	r3, r0
    b194:	2b00      	cmp	r3, #0
    b196:	d002      	beq.n	b19e <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    b198:	f06f 0313 	mvn.w	r3, #19
    b19c:	e048      	b.n	b230 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b19e:	7ebb      	ldrb	r3, [r7, #26]
    b1a0:	b25b      	sxtb	r3, r3
    b1a2:	2b00      	cmp	r3, #0
    b1a4:	da0f      	bge.n	b1c6 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b1a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b1aa:	7eb9      	ldrb	r1, [r7, #26]
    b1ac:	6a3a      	ldr	r2, [r7, #32]
    b1ae:	4413      	add	r3, r2
    b1b0:	460a      	mov	r2, r1
    b1b2:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    b1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b1b8:	6a3a      	ldr	r2, [r7, #32]
    b1ba:	4413      	add	r3, r2
    b1bc:	789b      	ldrb	r3, [r3, #2]
    b1be:	4618      	mov	r0, r3
    b1c0:	4b20      	ldr	r3, [pc, #128]	; (b244 <cdcdf_acm_enable+0x164>)
    b1c2:	4798      	blx	r3
    b1c4:	e007      	b.n	b1d6 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b1c6:	7eba      	ldrb	r2, [r7, #26]
    b1c8:	6a3b      	ldr	r3, [r7, #32]
    b1ca:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b1cc:	6a3b      	ldr	r3, [r7, #32]
    b1ce:	791b      	ldrb	r3, [r3, #4]
    b1d0:	4618      	mov	r0, r3
    b1d2:	4b1c      	ldr	r3, [pc, #112]	; (b244 <cdcdf_acm_enable+0x164>)
    b1d4:	4798      	blx	r3
			}
			desc->sod = ep;
    b1d6:	683b      	ldr	r3, [r7, #0]
    b1d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b1da:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b1dc:	683b      	ldr	r3, [r7, #0]
    b1de:	681b      	ldr	r3, [r3, #0]
    b1e0:	4618      	mov	r0, r3
    b1e2:	4b19      	ldr	r3, [pc, #100]	; (b248 <cdcdf_acm_enable+0x168>)
    b1e4:	4798      	blx	r3
    b1e6:	4602      	mov	r2, r0
    b1e8:	683b      	ldr	r3, [r7, #0]
    b1ea:	685b      	ldr	r3, [r3, #4]
    b1ec:	4619      	mov	r1, r3
    b1ee:	4610      	mov	r0, r2
    b1f0:	4b16      	ldr	r3, [pc, #88]	; (b24c <cdcdf_acm_enable+0x16c>)
    b1f2:	4798      	blx	r3
    b1f4:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b1f8:	2b00      	cmp	r3, #0
    b1fa:	d1b7      	bne.n	b16c <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b1fc:	683b      	ldr	r3, [r7, #0]
    b1fe:	681b      	ldr	r3, [r3, #0]
    b200:	4618      	mov	r0, r3
    b202:	4b11      	ldr	r3, [pc, #68]	; (b248 <cdcdf_acm_enable+0x168>)
    b204:	4798      	blx	r3
    b206:	683b      	ldr	r3, [r7, #0]
    b208:	685b      	ldr	r3, [r3, #4]
    b20a:	2204      	movs	r2, #4
    b20c:	4619      	mov	r1, r3
    b20e:	4b0a      	ldr	r3, [pc, #40]	; (b238 <cdcdf_acm_enable+0x158>)
    b210:	4798      	blx	r3
    b212:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b218:	3301      	adds	r3, #1
    b21a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b21e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b222:	2b01      	cmp	r3, #1
    b224:	f67f af6b 	bls.w	b0fe <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    b228:	4b09      	ldr	r3, [pc, #36]	; (b250 <cdcdf_acm_enable+0x170>)
    b22a:	2201      	movs	r2, #1
    b22c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b22e:	2300      	movs	r3, #0
}
    b230:	4618      	mov	r0, r3
    b232:	3730      	adds	r7, #48	; 0x30
    b234:	46bd      	mov	sp, r7
    b236:	bd80      	pop	{r7, pc}
    b238:	0000c365 	.word	0x0000c365
    b23c:	0000b07b 	.word	0x0000b07b
    b240:	000029b9 	.word	0x000029b9
    b244:	00002aa5 	.word	0x00002aa5
    b248:	0000b0bd 	.word	0x0000b0bd
    b24c:	0000c3c1 	.word	0x0000c3c1
    b250:	20000c98 	.word	0x20000c98

0000b254 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b254:	b580      	push	{r7, lr}
    b256:	b088      	sub	sp, #32
    b258:	af00      	add	r7, sp, #0
    b25a:	6078      	str	r0, [r7, #4]
    b25c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b25e:	687b      	ldr	r3, [r7, #4]
    b260:	689b      	ldr	r3, [r3, #8]
    b262:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    b264:	683b      	ldr	r3, [r7, #0]
    b266:	2b00      	cmp	r3, #0
    b268:	d00c      	beq.n	b284 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b26a:	683b      	ldr	r3, [r7, #0]
    b26c:	681b      	ldr	r3, [r3, #0]
    b26e:	795b      	ldrb	r3, [r3, #5]
    b270:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b272:	7c7b      	ldrb	r3, [r7, #17]
    b274:	2b02      	cmp	r3, #2
    b276:	d005      	beq.n	b284 <cdcdf_acm_disable+0x30>
    b278:	7c7b      	ldrb	r3, [r7, #17]
    b27a:	2b0a      	cmp	r3, #10
    b27c:	d002      	beq.n	b284 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    b27e:	f06f 0309 	mvn.w	r3, #9
    b282:	e035      	b.n	b2f0 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    b284:	2300      	movs	r3, #0
    b286:	77fb      	strb	r3, [r7, #31]
    b288:	e01f      	b.n	b2ca <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    b28a:	7ffb      	ldrb	r3, [r7, #31]
    b28c:	69ba      	ldr	r2, [r7, #24]
    b28e:	5cd3      	ldrb	r3, [r2, r3]
    b290:	2bff      	cmp	r3, #255	; 0xff
    b292:	d016      	beq.n	b2c2 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    b294:	7ffb      	ldrb	r3, [r7, #31]
    b296:	69ba      	ldr	r2, [r7, #24]
    b298:	21ff      	movs	r1, #255	; 0xff
    b29a:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    b29c:	7ffb      	ldrb	r3, [r7, #31]
    b29e:	69ba      	ldr	r2, [r7, #24]
    b2a0:	4413      	add	r3, r2
    b2a2:	789b      	ldrb	r3, [r3, #2]
    b2a4:	2bff      	cmp	r3, #255	; 0xff
    b2a6:	d00d      	beq.n	b2c4 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b2a8:	7ffb      	ldrb	r3, [r7, #31]
    b2aa:	69ba      	ldr	r2, [r7, #24]
    b2ac:	4413      	add	r3, r2
    b2ae:	789b      	ldrb	r3, [r3, #2]
    b2b0:	4618      	mov	r0, r3
    b2b2:	4b11      	ldr	r3, [pc, #68]	; (b2f8 <cdcdf_acm_disable+0xa4>)
    b2b4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b2b6:	7ffb      	ldrb	r3, [r7, #31]
    b2b8:	69ba      	ldr	r2, [r7, #24]
    b2ba:	4413      	add	r3, r2
    b2bc:	22ff      	movs	r2, #255	; 0xff
    b2be:	709a      	strb	r2, [r3, #2]
    b2c0:	e000      	b.n	b2c4 <cdcdf_acm_disable+0x70>
			continue;
    b2c2:	bf00      	nop
	for (i = 0; i < 2; i++) {
    b2c4:	7ffb      	ldrb	r3, [r7, #31]
    b2c6:	3301      	adds	r3, #1
    b2c8:	77fb      	strb	r3, [r7, #31]
    b2ca:	7ffb      	ldrb	r3, [r7, #31]
    b2cc:	2b01      	cmp	r3, #1
    b2ce:	d9dc      	bls.n	b28a <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    b2d0:	69bb      	ldr	r3, [r7, #24]
    b2d2:	791b      	ldrb	r3, [r3, #4]
    b2d4:	2bff      	cmp	r3, #255	; 0xff
    b2d6:	d007      	beq.n	b2e8 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    b2d8:	69bb      	ldr	r3, [r7, #24]
    b2da:	791b      	ldrb	r3, [r3, #4]
    b2dc:	4618      	mov	r0, r3
    b2de:	4b06      	ldr	r3, [pc, #24]	; (b2f8 <cdcdf_acm_disable+0xa4>)
    b2e0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b2e2:	69bb      	ldr	r3, [r7, #24]
    b2e4:	22ff      	movs	r2, #255	; 0xff
    b2e6:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    b2e8:	4b04      	ldr	r3, [pc, #16]	; (b2fc <cdcdf_acm_disable+0xa8>)
    b2ea:	2200      	movs	r2, #0
    b2ec:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b2ee:	2300      	movs	r3, #0
}
    b2f0:	4618      	mov	r0, r3
    b2f2:	3720      	adds	r7, #32
    b2f4:	46bd      	mov	sp, r7
    b2f6:	bd80      	pop	{r7, pc}
    b2f8:	00002a55 	.word	0x00002a55
    b2fc:	20000c98 	.word	0x20000c98

0000b300 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    b300:	b580      	push	{r7, lr}
    b302:	b084      	sub	sp, #16
    b304:	af00      	add	r7, sp, #0
    b306:	60f8      	str	r0, [r7, #12]
    b308:	460b      	mov	r3, r1
    b30a:	607a      	str	r2, [r7, #4]
    b30c:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    b30e:	7afb      	ldrb	r3, [r7, #11]
    b310:	2b01      	cmp	r3, #1
    b312:	d009      	beq.n	b328 <cdcdf_acm_ctrl+0x28>
    b314:	2b02      	cmp	r3, #2
    b316:	d00d      	beq.n	b334 <cdcdf_acm_ctrl+0x34>
    b318:	2b00      	cmp	r3, #0
    b31a:	d10e      	bne.n	b33a <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    b31c:	6879      	ldr	r1, [r7, #4]
    b31e:	68f8      	ldr	r0, [r7, #12]
    b320:	4b09      	ldr	r3, [pc, #36]	; (b348 <cdcdf_acm_ctrl+0x48>)
    b322:	4798      	blx	r3
    b324:	4603      	mov	r3, r0
    b326:	e00a      	b.n	b33e <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    b328:	6879      	ldr	r1, [r7, #4]
    b32a:	68f8      	ldr	r0, [r7, #12]
    b32c:	4b07      	ldr	r3, [pc, #28]	; (b34c <cdcdf_acm_ctrl+0x4c>)
    b32e:	4798      	blx	r3
    b330:	4603      	mov	r3, r0
    b332:	e004      	b.n	b33e <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    b334:	f06f 031a 	mvn.w	r3, #26
    b338:	e001      	b.n	b33e <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    b33a:	f06f 030c 	mvn.w	r3, #12
	}
}
    b33e:	4618      	mov	r0, r3
    b340:	3710      	adds	r7, #16
    b342:	46bd      	mov	sp, r7
    b344:	bd80      	pop	{r7, pc}
    b346:	bf00      	nop
    b348:	0000b0e1 	.word	0x0000b0e1
    b34c:	0000b255 	.word	0x0000b255

0000b350 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b350:	b590      	push	{r4, r7, lr}
    b352:	b087      	sub	sp, #28
    b354:	af00      	add	r7, sp, #0
    b356:	4603      	mov	r3, r0
    b358:	6039      	str	r1, [r7, #0]
    b35a:	71fb      	strb	r3, [r7, #7]
    b35c:	4613      	mov	r3, r2
    b35e:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    b360:	683b      	ldr	r3, [r7, #0]
    b362:	799a      	ldrb	r2, [r3, #6]
    b364:	79db      	ldrb	r3, [r3, #7]
    b366:	021b      	lsls	r3, r3, #8
    b368:	4313      	orrs	r3, r2
    b36a:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b36c:	4b2b      	ldr	r3, [pc, #172]	; (b41c <cdcdf_acm_set_req+0xcc>)
    b36e:	4798      	blx	r3
    b370:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    b372:	683b      	ldr	r3, [r7, #0]
    b374:	785b      	ldrb	r3, [r3, #1]
    b376:	2b20      	cmp	r3, #32
    b378:	d002      	beq.n	b380 <cdcdf_acm_set_req+0x30>
    b37a:	2b22      	cmp	r3, #34	; 0x22
    b37c:	d034      	beq.n	b3e8 <cdcdf_acm_set_req+0x98>
    b37e:	e046      	b.n	b40e <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b380:	8afb      	ldrh	r3, [r7, #22]
    b382:	2b07      	cmp	r3, #7
    b384:	d002      	beq.n	b38c <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    b386:	f04f 33ff 	mov.w	r3, #4294967295
    b38a:	e042      	b.n	b412 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    b38c:	79bb      	ldrb	r3, [r7, #6]
    b38e:	2b00      	cmp	r3, #0
    b390:	d107      	bne.n	b3a2 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b392:	8afa      	ldrh	r2, [r7, #22]
    b394:	79f8      	ldrb	r0, [r7, #7]
    b396:	2300      	movs	r3, #0
    b398:	6939      	ldr	r1, [r7, #16]
    b39a:	4c21      	ldr	r4, [pc, #132]	; (b420 <cdcdf_acm_set_req+0xd0>)
    b39c:	47a0      	blx	r4
    b39e:	4603      	mov	r3, r0
    b3a0:	e037      	b.n	b412 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b3a2:	693a      	ldr	r2, [r7, #16]
    b3a4:	f107 0308 	add.w	r3, r7, #8
    b3a8:	6810      	ldr	r0, [r2, #0]
    b3aa:	6018      	str	r0, [r3, #0]
    b3ac:	8891      	ldrh	r1, [r2, #4]
    b3ae:	7992      	ldrb	r2, [r2, #6]
    b3b0:	8099      	strh	r1, [r3, #4]
    b3b2:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b3b4:	4b1b      	ldr	r3, [pc, #108]	; (b424 <cdcdf_acm_set_req+0xd4>)
    b3b6:	681b      	ldr	r3, [r3, #0]
    b3b8:	2b00      	cmp	r3, #0
    b3ba:	d008      	beq.n	b3ce <cdcdf_acm_set_req+0x7e>
    b3bc:	4b19      	ldr	r3, [pc, #100]	; (b424 <cdcdf_acm_set_req+0xd4>)
    b3be:	681b      	ldr	r3, [r3, #0]
    b3c0:	f107 0208 	add.w	r2, r7, #8
    b3c4:	4610      	mov	r0, r2
    b3c6:	4798      	blx	r3
    b3c8:	4603      	mov	r3, r0
    b3ca:	2b00      	cmp	r3, #0
    b3cc:	d00a      	beq.n	b3e4 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    b3ce:	4b16      	ldr	r3, [pc, #88]	; (b428 <cdcdf_acm_set_req+0xd8>)
    b3d0:	f107 0208 	add.w	r2, r7, #8
    b3d4:	e892 0003 	ldmia.w	r2, {r0, r1}
    b3d8:	6018      	str	r0, [r3, #0]
    b3da:	3304      	adds	r3, #4
    b3dc:	8019      	strh	r1, [r3, #0]
    b3de:	3302      	adds	r3, #2
    b3e0:	0c0a      	lsrs	r2, r1, #16
    b3e2:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    b3e4:	2300      	movs	r3, #0
    b3e6:	e014      	b.n	b412 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    b3e8:	2300      	movs	r3, #0
    b3ea:	2200      	movs	r2, #0
    b3ec:	2100      	movs	r1, #0
    b3ee:	2000      	movs	r0, #0
    b3f0:	4c0b      	ldr	r4, [pc, #44]	; (b420 <cdcdf_acm_set_req+0xd0>)
    b3f2:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    b3f4:	4b0d      	ldr	r3, [pc, #52]	; (b42c <cdcdf_acm_set_req+0xdc>)
    b3f6:	681b      	ldr	r3, [r3, #0]
    b3f8:	2b00      	cmp	r3, #0
    b3fa:	d006      	beq.n	b40a <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    b3fc:	4b0b      	ldr	r3, [pc, #44]	; (b42c <cdcdf_acm_set_req+0xdc>)
    b3fe:	681b      	ldr	r3, [r3, #0]
    b400:	683a      	ldr	r2, [r7, #0]
    b402:	8852      	ldrh	r2, [r2, #2]
    b404:	b292      	uxth	r2, r2
    b406:	4610      	mov	r0, r2
    b408:	4798      	blx	r3
		}
		return ERR_NONE;
    b40a:	2300      	movs	r3, #0
    b40c:	e001      	b.n	b412 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    b40e:	f06f 030c 	mvn.w	r3, #12
	}
}
    b412:	4618      	mov	r0, r3
    b414:	371c      	adds	r7, #28
    b416:	46bd      	mov	sp, r7
    b418:	bd90      	pop	{r4, r7, pc}
    b41a:	bf00      	nop
    b41c:	0000c261 	.word	0x0000c261
    b420:	0000c0d5 	.word	0x0000c0d5
    b424:	20000cac 	.word	0x20000cac
    b428:	20000ca0 	.word	0x20000ca0
    b42c:	20000ca8 	.word	0x20000ca8

0000b430 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b430:	b590      	push	{r4, r7, lr}
    b432:	b085      	sub	sp, #20
    b434:	af00      	add	r7, sp, #0
    b436:	4603      	mov	r3, r0
    b438:	6039      	str	r1, [r7, #0]
    b43a:	71fb      	strb	r3, [r7, #7]
    b43c:	4613      	mov	r3, r2
    b43e:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    b440:	683b      	ldr	r3, [r7, #0]
    b442:	799a      	ldrb	r2, [r3, #6]
    b444:	79db      	ldrb	r3, [r3, #7]
    b446:	021b      	lsls	r3, r3, #8
    b448:	4313      	orrs	r3, r2
    b44a:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    b44c:	79bb      	ldrb	r3, [r7, #6]
    b44e:	2b01      	cmp	r3, #1
    b450:	d101      	bne.n	b456 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    b452:	2300      	movs	r3, #0
    b454:	e013      	b.n	b47e <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    b456:	683b      	ldr	r3, [r7, #0]
    b458:	785b      	ldrb	r3, [r3, #1]
    b45a:	2b21      	cmp	r3, #33	; 0x21
    b45c:	d10d      	bne.n	b47a <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b45e:	89fb      	ldrh	r3, [r7, #14]
    b460:	2b07      	cmp	r3, #7
    b462:	d002      	beq.n	b46a <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    b464:	f04f 33ff 	mov.w	r3, #4294967295
    b468:	e009      	b.n	b47e <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    b46a:	89fa      	ldrh	r2, [r7, #14]
    b46c:	79f8      	ldrb	r0, [r7, #7]
    b46e:	2300      	movs	r3, #0
    b470:	4905      	ldr	r1, [pc, #20]	; (b488 <cdcdf_acm_get_req+0x58>)
    b472:	4c06      	ldr	r4, [pc, #24]	; (b48c <cdcdf_acm_get_req+0x5c>)
    b474:	47a0      	blx	r4
    b476:	4603      	mov	r3, r0
    b478:	e001      	b.n	b47e <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    b47a:	f06f 030c 	mvn.w	r3, #12
	}
}
    b47e:	4618      	mov	r0, r3
    b480:	3714      	adds	r7, #20
    b482:	46bd      	mov	sp, r7
    b484:	bd90      	pop	{r4, r7, pc}
    b486:	bf00      	nop
    b488:	20000ca0 	.word	0x20000ca0
    b48c:	0000c0d5 	.word	0x0000c0d5

0000b490 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b490:	b580      	push	{r7, lr}
    b492:	b082      	sub	sp, #8
    b494:	af00      	add	r7, sp, #0
    b496:	4603      	mov	r3, r0
    b498:	6039      	str	r1, [r7, #0]
    b49a:	71fb      	strb	r3, [r7, #7]
    b49c:	4613      	mov	r3, r2
    b49e:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b4a0:	683b      	ldr	r3, [r7, #0]
    b4a2:	781b      	ldrb	r3, [r3, #0]
    b4a4:	095b      	lsrs	r3, r3, #5
    b4a6:	b2db      	uxtb	r3, r3
    b4a8:	f003 0303 	and.w	r3, r3, #3
    b4ac:	2b01      	cmp	r3, #1
    b4ae:	d002      	beq.n	b4b6 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    b4b0:	f06f 0309 	mvn.w	r3, #9
    b4b4:	e026      	b.n	b504 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    b4b6:	683b      	ldr	r3, [r7, #0]
    b4b8:	889b      	ldrh	r3, [r3, #4]
    b4ba:	b29a      	uxth	r2, r3
    b4bc:	4b13      	ldr	r3, [pc, #76]	; (b50c <cdcdf_acm_req+0x7c>)
    b4be:	781b      	ldrb	r3, [r3, #0]
    b4c0:	b29b      	uxth	r3, r3
    b4c2:	429a      	cmp	r2, r3
    b4c4:	d007      	beq.n	b4d6 <cdcdf_acm_req+0x46>
    b4c6:	683b      	ldr	r3, [r7, #0]
    b4c8:	889b      	ldrh	r3, [r3, #4]
    b4ca:	b29a      	uxth	r2, r3
    b4cc:	4b0f      	ldr	r3, [pc, #60]	; (b50c <cdcdf_acm_req+0x7c>)
    b4ce:	785b      	ldrb	r3, [r3, #1]
    b4d0:	b29b      	uxth	r3, r3
    b4d2:	429a      	cmp	r2, r3
    b4d4:	d114      	bne.n	b500 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    b4d6:	683b      	ldr	r3, [r7, #0]
    b4d8:	781b      	ldrb	r3, [r3, #0]
    b4da:	b25b      	sxtb	r3, r3
    b4dc:	2b00      	cmp	r3, #0
    b4de:	da07      	bge.n	b4f0 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    b4e0:	79ba      	ldrb	r2, [r7, #6]
    b4e2:	79fb      	ldrb	r3, [r7, #7]
    b4e4:	6839      	ldr	r1, [r7, #0]
    b4e6:	4618      	mov	r0, r3
    b4e8:	4b09      	ldr	r3, [pc, #36]	; (b510 <cdcdf_acm_req+0x80>)
    b4ea:	4798      	blx	r3
    b4ec:	4603      	mov	r3, r0
    b4ee:	e009      	b.n	b504 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    b4f0:	79ba      	ldrb	r2, [r7, #6]
    b4f2:	79fb      	ldrb	r3, [r7, #7]
    b4f4:	6839      	ldr	r1, [r7, #0]
    b4f6:	4618      	mov	r0, r3
    b4f8:	4b06      	ldr	r3, [pc, #24]	; (b514 <cdcdf_acm_req+0x84>)
    b4fa:	4798      	blx	r3
    b4fc:	4603      	mov	r3, r0
    b4fe:	e001      	b.n	b504 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    b500:	f06f 0309 	mvn.w	r3, #9
	}
}
    b504:	4618      	mov	r0, r3
    b506:	3708      	adds	r7, #8
    b508:	46bd      	mov	sp, r7
    b50a:	bd80      	pop	{r7, pc}
    b50c:	20000c98 	.word	0x20000c98
    b510:	0000b431 	.word	0x0000b431
    b514:	0000b351 	.word	0x0000b351

0000b518 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    b518:	b580      	push	{r7, lr}
    b51a:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    b51c:	4b0b      	ldr	r3, [pc, #44]	; (b54c <cdcdf_acm_init+0x34>)
    b51e:	4798      	blx	r3
    b520:	4603      	mov	r3, r0
    b522:	2b01      	cmp	r3, #1
    b524:	d902      	bls.n	b52c <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    b526:	f06f 0310 	mvn.w	r3, #16
    b52a:	e00d      	b.n	b548 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    b52c:	4b08      	ldr	r3, [pc, #32]	; (b550 <cdcdf_acm_init+0x38>)
    b52e:	4a09      	ldr	r2, [pc, #36]	; (b554 <cdcdf_acm_init+0x3c>)
    b530:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    b532:	4b07      	ldr	r3, [pc, #28]	; (b550 <cdcdf_acm_init+0x38>)
    b534:	4a08      	ldr	r2, [pc, #32]	; (b558 <cdcdf_acm_init+0x40>)
    b536:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    b538:	4805      	ldr	r0, [pc, #20]	; (b550 <cdcdf_acm_init+0x38>)
    b53a:	4b08      	ldr	r3, [pc, #32]	; (b55c <cdcdf_acm_init+0x44>)
    b53c:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    b53e:	4908      	ldr	r1, [pc, #32]	; (b560 <cdcdf_acm_init+0x48>)
    b540:	2001      	movs	r0, #1
    b542:	4b08      	ldr	r3, [pc, #32]	; (b564 <cdcdf_acm_init+0x4c>)
    b544:	4798      	blx	r3
	return ERR_NONE;
    b546:	2300      	movs	r3, #0
}
    b548:	4618      	mov	r0, r3
    b54a:	bd80      	pop	{r7, pc}
    b54c:	0000c279 	.word	0x0000c279
    b550:	20000c8c 	.word	0x20000c8c
    b554:	0000b301 	.word	0x0000b301
    b558:	20000c98 	.word	0x20000c98
    b55c:	0000c1e1 	.word	0x0000c1e1
    b560:	20000208 	.word	0x20000208
    b564:	0000c111 	.word	0x0000c111

0000b568 <usb_get_u16>:
{
    b568:	b480      	push	{r7}
    b56a:	b083      	sub	sp, #12
    b56c:	af00      	add	r7, sp, #0
    b56e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b570:	687b      	ldr	r3, [r7, #4]
    b572:	781b      	ldrb	r3, [r3, #0]
    b574:	b29a      	uxth	r2, r3
    b576:	687b      	ldr	r3, [r7, #4]
    b578:	3301      	adds	r3, #1
    b57a:	781b      	ldrb	r3, [r3, #0]
    b57c:	b29b      	uxth	r3, r3
    b57e:	021b      	lsls	r3, r3, #8
    b580:	b29b      	uxth	r3, r3
    b582:	4413      	add	r3, r2
    b584:	b29b      	uxth	r3, r3
}
    b586:	4618      	mov	r0, r3
    b588:	370c      	adds	r7, #12
    b58a:	46bd      	mov	sp, r7
    b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b590:	4770      	bx	lr

0000b592 <usb_desc_len>:
{
    b592:	b480      	push	{r7}
    b594:	b083      	sub	sp, #12
    b596:	af00      	add	r7, sp, #0
    b598:	6078      	str	r0, [r7, #4]
	return desc[0];
    b59a:	687b      	ldr	r3, [r7, #4]
    b59c:	781b      	ldrb	r3, [r3, #0]
}
    b59e:	4618      	mov	r0, r3
    b5a0:	370c      	adds	r7, #12
    b5a2:	46bd      	mov	sp, r7
    b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5a8:	4770      	bx	lr
	...

0000b5ac <usb_desc_next>:
{
    b5ac:	b580      	push	{r7, lr}
    b5ae:	b082      	sub	sp, #8
    b5b0:	af00      	add	r7, sp, #0
    b5b2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b5b4:	6878      	ldr	r0, [r7, #4]
    b5b6:	4b05      	ldr	r3, [pc, #20]	; (b5cc <usb_desc_next+0x20>)
    b5b8:	4798      	blx	r3
    b5ba:	4603      	mov	r3, r0
    b5bc:	461a      	mov	r2, r3
    b5be:	687b      	ldr	r3, [r7, #4]
    b5c0:	4413      	add	r3, r2
}
    b5c2:	4618      	mov	r0, r3
    b5c4:	3708      	adds	r7, #8
    b5c6:	46bd      	mov	sp, r7
    b5c8:	bd80      	pop	{r7, pc}
    b5ca:	bf00      	nop
    b5cc:	0000b593 	.word	0x0000b593

0000b5d0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    b5d0:	b580      	push	{r7, lr}
    b5d2:	b082      	sub	sp, #8
    b5d4:	af00      	add	r7, sp, #0
    b5d6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    b5d8:	687b      	ldr	r3, [r7, #4]
    b5da:	3302      	adds	r3, #2
    b5dc:	4618      	mov	r0, r3
    b5de:	4b03      	ldr	r3, [pc, #12]	; (b5ec <usb_cfg_desc_total_len+0x1c>)
    b5e0:	4798      	blx	r3
    b5e2:	4603      	mov	r3, r0
}
    b5e4:	4618      	mov	r0, r3
    b5e6:	3708      	adds	r7, #8
    b5e8:	46bd      	mov	sp, r7
    b5ea:	bd80      	pop	{r7, pc}
    b5ec:	0000b569 	.word	0x0000b569

0000b5f0 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    b5f0:	b590      	push	{r4, r7, lr}
    b5f2:	b085      	sub	sp, #20
    b5f4:	af00      	add	r7, sp, #0
    b5f6:	4603      	mov	r3, r0
    b5f8:	6039      	str	r1, [r7, #0]
    b5fa:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    b5fc:	2300      	movs	r3, #0
    b5fe:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    b600:	683b      	ldr	r3, [r7, #0]
    b602:	799a      	ldrb	r2, [r3, #6]
    b604:	79db      	ldrb	r3, [r3, #7]
    b606:	021b      	lsls	r3, r3, #8
    b608:	4313      	orrs	r3, r2
    b60a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    b60c:	897b      	ldrh	r3, [r7, #10]
    b60e:	2b12      	cmp	r3, #18
    b610:	d901      	bls.n	b616 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    b612:	2312      	movs	r3, #18
    b614:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    b616:	68fb      	ldr	r3, [r7, #12]
    b618:	2b00      	cmp	r3, #0
    b61a:	d10a      	bne.n	b632 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b61c:	4b0f      	ldr	r3, [pc, #60]	; (b65c <usbdc_get_dev_desc+0x6c>)
    b61e:	681b      	ldr	r3, [r3, #0]
    b620:	6818      	ldr	r0, [r3, #0]
    b622:	4b0e      	ldr	r3, [pc, #56]	; (b65c <usbdc_get_dev_desc+0x6c>)
    b624:	681b      	ldr	r3, [r3, #0]
    b626:	685b      	ldr	r3, [r3, #4]
    b628:	2201      	movs	r2, #1
    b62a:	4619      	mov	r1, r3
    b62c:	4b0c      	ldr	r3, [pc, #48]	; (b660 <usbdc_get_dev_desc+0x70>)
    b62e:	4798      	blx	r3
    b630:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    b632:	68fb      	ldr	r3, [r7, #12]
    b634:	2b00      	cmp	r3, #0
    b636:	d101      	bne.n	b63c <usbdc_get_dev_desc+0x4c>
		return false;
    b638:	2300      	movs	r3, #0
    b63a:	e00b      	b.n	b654 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    b63c:	897a      	ldrh	r2, [r7, #10]
    b63e:	79f8      	ldrb	r0, [r7, #7]
    b640:	2300      	movs	r3, #0
    b642:	68f9      	ldr	r1, [r7, #12]
    b644:	4c07      	ldr	r4, [pc, #28]	; (b664 <usbdc_get_dev_desc+0x74>)
    b646:	47a0      	blx	r4
    b648:	4603      	mov	r3, r0
    b64a:	2b00      	cmp	r3, #0
    b64c:	d001      	beq.n	b652 <usbdc_get_dev_desc+0x62>
		return false;
    b64e:	2300      	movs	r3, #0
    b650:	e000      	b.n	b654 <usbdc_get_dev_desc+0x64>
	}
	return true;
    b652:	2301      	movs	r3, #1
}
    b654:	4618      	mov	r0, r3
    b656:	3714      	adds	r7, #20
    b658:	46bd      	mov	sp, r7
    b65a:	bd90      	pop	{r4, r7, pc}
    b65c:	20000cb0 	.word	0x20000cb0
    b660:	0000c365 	.word	0x0000c365
    b664:	0000c0d5 	.word	0x0000c0d5

0000b668 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    b668:	b590      	push	{r4, r7, lr}
    b66a:	b087      	sub	sp, #28
    b66c:	af00      	add	r7, sp, #0
    b66e:	4603      	mov	r3, r0
    b670:	6039      	str	r1, [r7, #0]
    b672:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    b674:	2300      	movs	r3, #0
    b676:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    b678:	683b      	ldr	r3, [r7, #0]
    b67a:	799a      	ldrb	r2, [r3, #6]
    b67c:	79db      	ldrb	r3, [r3, #7]
    b67e:	021b      	lsls	r3, r3, #8
    b680:	4313      	orrs	r3, r2
    b682:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    b684:	683b      	ldr	r3, [r7, #0]
    b686:	885b      	ldrh	r3, [r3, #2]
    b688:	b29b      	uxth	r3, r3
    b68a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b68c:	8a7a      	ldrh	r2, [r7, #18]
    b68e:	4b1e      	ldr	r3, [pc, #120]	; (b708 <usbdc_get_cfg_desc+0xa0>)
    b690:	7f1b      	ldrb	r3, [r3, #28]
    b692:	3b01      	subs	r3, #1
    b694:	4013      	ands	r3, r2
    b696:	2b00      	cmp	r3, #0
    b698:	bf0c      	ite	eq
    b69a:	2301      	moveq	r3, #1
    b69c:	2300      	movne	r3, #0
    b69e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    b6a0:	697b      	ldr	r3, [r7, #20]
    b6a2:	2b00      	cmp	r3, #0
    b6a4:	d10c      	bne.n	b6c0 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    b6a6:	4b18      	ldr	r3, [pc, #96]	; (b708 <usbdc_get_cfg_desc+0xa0>)
    b6a8:	681b      	ldr	r3, [r3, #0]
    b6aa:	6818      	ldr	r0, [r3, #0]
    b6ac:	4b16      	ldr	r3, [pc, #88]	; (b708 <usbdc_get_cfg_desc+0xa0>)
    b6ae:	681b      	ldr	r3, [r3, #0]
    b6b0:	6859      	ldr	r1, [r3, #4]
    b6b2:	7c3b      	ldrb	r3, [r7, #16]
    b6b4:	3301      	adds	r3, #1
    b6b6:	b2db      	uxtb	r3, r3
    b6b8:	461a      	mov	r2, r3
    b6ba:	4b14      	ldr	r3, [pc, #80]	; (b70c <usbdc_get_cfg_desc+0xa4>)
    b6bc:	4798      	blx	r3
    b6be:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    b6c0:	697b      	ldr	r3, [r7, #20]
    b6c2:	2b00      	cmp	r3, #0
    b6c4:	d101      	bne.n	b6ca <usbdc_get_cfg_desc+0x62>
		return false;
    b6c6:	2300      	movs	r3, #0
    b6c8:	e019      	b.n	b6fe <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    b6ca:	6978      	ldr	r0, [r7, #20]
    b6cc:	4b10      	ldr	r3, [pc, #64]	; (b710 <usbdc_get_cfg_desc+0xa8>)
    b6ce:	4798      	blx	r3
    b6d0:	4603      	mov	r3, r0
    b6d2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    b6d4:	8a7a      	ldrh	r2, [r7, #18]
    b6d6:	89fb      	ldrh	r3, [r7, #14]
    b6d8:	429a      	cmp	r2, r3
    b6da:	d802      	bhi.n	b6e2 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    b6dc:	2300      	movs	r3, #0
    b6de:	747b      	strb	r3, [r7, #17]
    b6e0:	e001      	b.n	b6e6 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    b6e2:	89fb      	ldrh	r3, [r7, #14]
    b6e4:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    b6e6:	8a7a      	ldrh	r2, [r7, #18]
    b6e8:	7c7b      	ldrb	r3, [r7, #17]
    b6ea:	79f8      	ldrb	r0, [r7, #7]
    b6ec:	6979      	ldr	r1, [r7, #20]
    b6ee:	4c09      	ldr	r4, [pc, #36]	; (b714 <usbdc_get_cfg_desc+0xac>)
    b6f0:	47a0      	blx	r4
    b6f2:	4603      	mov	r3, r0
    b6f4:	2b00      	cmp	r3, #0
    b6f6:	d001      	beq.n	b6fc <usbdc_get_cfg_desc+0x94>
		return false;
    b6f8:	2300      	movs	r3, #0
    b6fa:	e000      	b.n	b6fe <usbdc_get_cfg_desc+0x96>
	}
	return true;
    b6fc:	2301      	movs	r3, #1
}
    b6fe:	4618      	mov	r0, r3
    b700:	371c      	adds	r7, #28
    b702:	46bd      	mov	sp, r7
    b704:	bd90      	pop	{r4, r7, pc}
    b706:	bf00      	nop
    b708:	20000cb0 	.word	0x20000cb0
    b70c:	0000c425 	.word	0x0000c425
    b710:	0000b5d1 	.word	0x0000b5d1
    b714:	0000c0d5 	.word	0x0000c0d5

0000b718 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    b718:	b590      	push	{r4, r7, lr}
    b71a:	b085      	sub	sp, #20
    b71c:	af00      	add	r7, sp, #0
    b71e:	4603      	mov	r3, r0
    b720:	6039      	str	r1, [r7, #0]
    b722:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    b724:	683b      	ldr	r3, [r7, #0]
    b726:	799a      	ldrb	r2, [r3, #6]
    b728:	79db      	ldrb	r3, [r3, #7]
    b72a:	021b      	lsls	r3, r3, #8
    b72c:	4313      	orrs	r3, r2
    b72e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    b730:	683b      	ldr	r3, [r7, #0]
    b732:	885b      	ldrh	r3, [r3, #2]
    b734:	b29b      	uxth	r3, r3
    b736:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b738:	89fa      	ldrh	r2, [r7, #14]
    b73a:	4b1a      	ldr	r3, [pc, #104]	; (b7a4 <usbdc_get_str_desc+0x8c>)
    b73c:	7f1b      	ldrb	r3, [r3, #28]
    b73e:	3b01      	subs	r3, #1
    b740:	4013      	ands	r3, r2
    b742:	2b00      	cmp	r3, #0
    b744:	bf0c      	ite	eq
    b746:	2301      	moveq	r3, #1
    b748:	2300      	movne	r3, #0
    b74a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    b74c:	4b15      	ldr	r3, [pc, #84]	; (b7a4 <usbdc_get_str_desc+0x8c>)
    b74e:	681b      	ldr	r3, [r3, #0]
    b750:	6818      	ldr	r0, [r3, #0]
    b752:	4b14      	ldr	r3, [pc, #80]	; (b7a4 <usbdc_get_str_desc+0x8c>)
    b754:	681b      	ldr	r3, [r3, #0]
    b756:	685b      	ldr	r3, [r3, #4]
    b758:	7b3a      	ldrb	r2, [r7, #12]
    b75a:	4619      	mov	r1, r3
    b75c:	4b12      	ldr	r3, [pc, #72]	; (b7a8 <usbdc_get_str_desc+0x90>)
    b75e:	4798      	blx	r3
    b760:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    b762:	68bb      	ldr	r3, [r7, #8]
    b764:	2b00      	cmp	r3, #0
    b766:	d101      	bne.n	b76c <usbdc_get_str_desc+0x54>
		return false;
    b768:	2300      	movs	r3, #0
    b76a:	e017      	b.n	b79c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    b76c:	68bb      	ldr	r3, [r7, #8]
    b76e:	781b      	ldrb	r3, [r3, #0]
    b770:	b29b      	uxth	r3, r3
    b772:	89fa      	ldrh	r2, [r7, #14]
    b774:	429a      	cmp	r2, r3
    b776:	d802      	bhi.n	b77e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    b778:	2300      	movs	r3, #0
    b77a:	737b      	strb	r3, [r7, #13]
    b77c:	e002      	b.n	b784 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    b77e:	68bb      	ldr	r3, [r7, #8]
    b780:	781b      	ldrb	r3, [r3, #0]
    b782:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    b784:	89fa      	ldrh	r2, [r7, #14]
    b786:	7b7b      	ldrb	r3, [r7, #13]
    b788:	79f8      	ldrb	r0, [r7, #7]
    b78a:	68b9      	ldr	r1, [r7, #8]
    b78c:	4c07      	ldr	r4, [pc, #28]	; (b7ac <usbdc_get_str_desc+0x94>)
    b78e:	47a0      	blx	r4
    b790:	4603      	mov	r3, r0
    b792:	2b00      	cmp	r3, #0
    b794:	d001      	beq.n	b79a <usbdc_get_str_desc+0x82>
		return false;
    b796:	2300      	movs	r3, #0
    b798:	e000      	b.n	b79c <usbdc_get_str_desc+0x84>
	}
	return true;
    b79a:	2301      	movs	r3, #1
}
    b79c:	4618      	mov	r0, r3
    b79e:	3714      	adds	r7, #20
    b7a0:	46bd      	mov	sp, r7
    b7a2:	bd90      	pop	{r4, r7, pc}
    b7a4:	20000cb0 	.word	0x20000cb0
    b7a8:	0000c49d 	.word	0x0000c49d
    b7ac:	0000c0d5 	.word	0x0000c0d5

0000b7b0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    b7b0:	b580      	push	{r7, lr}
    b7b2:	b084      	sub	sp, #16
    b7b4:	af00      	add	r7, sp, #0
    b7b6:	4603      	mov	r3, r0
    b7b8:	6039      	str	r1, [r7, #0]
    b7ba:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    b7bc:	683b      	ldr	r3, [r7, #0]
    b7be:	885b      	ldrh	r3, [r3, #2]
    b7c0:	b29b      	uxth	r3, r3
    b7c2:	0a1b      	lsrs	r3, r3, #8
    b7c4:	b29b      	uxth	r3, r3
    b7c6:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    b7c8:	7bfb      	ldrb	r3, [r7, #15]
    b7ca:	2b02      	cmp	r3, #2
    b7cc:	d00d      	beq.n	b7ea <usbdc_get_desc_req+0x3a>
    b7ce:	2b03      	cmp	r3, #3
    b7d0:	d012      	beq.n	b7f8 <usbdc_get_desc_req+0x48>
    b7d2:	2b01      	cmp	r3, #1
    b7d4:	d002      	beq.n	b7dc <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    b7d6:	bf00      	nop
	}
	return false;
    b7d8:	2300      	movs	r3, #0
    b7da:	e013      	b.n	b804 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    b7dc:	79fb      	ldrb	r3, [r7, #7]
    b7de:	6839      	ldr	r1, [r7, #0]
    b7e0:	4618      	mov	r0, r3
    b7e2:	4b0a      	ldr	r3, [pc, #40]	; (b80c <usbdc_get_desc_req+0x5c>)
    b7e4:	4798      	blx	r3
    b7e6:	4603      	mov	r3, r0
    b7e8:	e00c      	b.n	b804 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    b7ea:	79fb      	ldrb	r3, [r7, #7]
    b7ec:	6839      	ldr	r1, [r7, #0]
    b7ee:	4618      	mov	r0, r3
    b7f0:	4b07      	ldr	r3, [pc, #28]	; (b810 <usbdc_get_desc_req+0x60>)
    b7f2:	4798      	blx	r3
    b7f4:	4603      	mov	r3, r0
    b7f6:	e005      	b.n	b804 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    b7f8:	79fb      	ldrb	r3, [r7, #7]
    b7fa:	6839      	ldr	r1, [r7, #0]
    b7fc:	4618      	mov	r0, r3
    b7fe:	4b05      	ldr	r3, [pc, #20]	; (b814 <usbdc_get_desc_req+0x64>)
    b800:	4798      	blx	r3
    b802:	4603      	mov	r3, r0
}
    b804:	4618      	mov	r0, r3
    b806:	3710      	adds	r7, #16
    b808:	46bd      	mov	sp, r7
    b80a:	bd80      	pop	{r7, pc}
    b80c:	0000b5f1 	.word	0x0000b5f1
    b810:	0000b669 	.word	0x0000b669
    b814:	0000b719 	.word	0x0000b719

0000b818 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    b818:	b590      	push	{r4, r7, lr}
    b81a:	b085      	sub	sp, #20
    b81c:	af00      	add	r7, sp, #0
    b81e:	4603      	mov	r3, r0
    b820:	6039      	str	r1, [r7, #0]
    b822:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b824:	683b      	ldr	r3, [r7, #0]
    b826:	781b      	ldrb	r3, [r3, #0]
    b828:	f003 031f 	and.w	r3, r3, #31
    b82c:	2b00      	cmp	r3, #0
    b82e:	db1b      	blt.n	b868 <usbdc_get_status_req+0x50>
    b830:	2b01      	cmp	r3, #1
    b832:	dd02      	ble.n	b83a <usbdc_get_status_req+0x22>
    b834:	2b02      	cmp	r3, #2
    b836:	d003      	beq.n	b840 <usbdc_get_status_req+0x28>
    b838:	e016      	b.n	b868 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    b83a:	2300      	movs	r3, #0
    b83c:	60fb      	str	r3, [r7, #12]
		break;
    b83e:	e015      	b.n	b86c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    b840:	683b      	ldr	r3, [r7, #0]
    b842:	889b      	ldrh	r3, [r3, #4]
    b844:	b29b      	uxth	r3, r3
    b846:	b2db      	uxtb	r3, r3
    b848:	2102      	movs	r1, #2
    b84a:	4618      	mov	r0, r3
    b84c:	4b0f      	ldr	r3, [pc, #60]	; (b88c <usbdc_get_status_req+0x74>)
    b84e:	4798      	blx	r3
    b850:	4603      	mov	r3, r0
    b852:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    b854:	68fb      	ldr	r3, [r7, #12]
    b856:	2b00      	cmp	r3, #0
    b858:	da01      	bge.n	b85e <usbdc_get_status_req+0x46>
			return false;
    b85a:	2300      	movs	r3, #0
    b85c:	e012      	b.n	b884 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    b85e:	68fb      	ldr	r3, [r7, #12]
    b860:	f003 0301 	and.w	r3, r3, #1
    b864:	60fb      	str	r3, [r7, #12]
		break;
    b866:	e001      	b.n	b86c <usbdc_get_status_req+0x54>
	default:
		return false;
    b868:	2300      	movs	r3, #0
    b86a:	e00b      	b.n	b884 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    b86c:	4b08      	ldr	r3, [pc, #32]	; (b890 <usbdc_get_status_req+0x78>)
    b86e:	695b      	ldr	r3, [r3, #20]
    b870:	89ba      	ldrh	r2, [r7, #12]
    b872:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    b874:	4b06      	ldr	r3, [pc, #24]	; (b890 <usbdc_get_status_req+0x78>)
    b876:	6959      	ldr	r1, [r3, #20]
    b878:	79f8      	ldrb	r0, [r7, #7]
    b87a:	2300      	movs	r3, #0
    b87c:	2202      	movs	r2, #2
    b87e:	4c05      	ldr	r4, [pc, #20]	; (b894 <usbdc_get_status_req+0x7c>)
    b880:	47a0      	blx	r4
	return true;
    b882:	2301      	movs	r3, #1
}
    b884:	4618      	mov	r0, r3
    b886:	3714      	adds	r7, #20
    b888:	46bd      	mov	sp, r7
    b88a:	bd90      	pop	{r4, r7, pc}
    b88c:	00002d01 	.word	0x00002d01
    b890:	20000cb0 	.word	0x20000cb0
    b894:	0000c0d5 	.word	0x0000c0d5

0000b898 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    b898:	b590      	push	{r4, r7, lr}
    b89a:	b085      	sub	sp, #20
    b89c:	af00      	add	r7, sp, #0
    b89e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b8a0:	4b1f      	ldr	r3, [pc, #124]	; (b920 <usbdc_get_interface+0x88>)
    b8a2:	691b      	ldr	r3, [r3, #16]
    b8a4:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    b8a6:	4b1e      	ldr	r3, [pc, #120]	; (b920 <usbdc_get_interface+0x88>)
    b8a8:	7f5b      	ldrb	r3, [r3, #29]
    b8aa:	461a      	mov	r2, r3
    b8ac:	687b      	ldr	r3, [r7, #4]
    b8ae:	889b      	ldrh	r3, [r3, #4]
    b8b0:	b29b      	uxth	r3, r3
    b8b2:	fa42 f303 	asr.w	r3, r2, r3
    b8b6:	f003 0301 	and.w	r3, r3, #1
    b8ba:	2b00      	cmp	r3, #0
    b8bc:	d128      	bne.n	b910 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    b8be:	4b18      	ldr	r3, [pc, #96]	; (b920 <usbdc_get_interface+0x88>)
    b8c0:	695b      	ldr	r3, [r3, #20]
    b8c2:	2200      	movs	r2, #0
    b8c4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b8c6:	4b16      	ldr	r3, [pc, #88]	; (b920 <usbdc_get_interface+0x88>)
    b8c8:	6959      	ldr	r1, [r3, #20]
    b8ca:	2300      	movs	r3, #0
    b8cc:	2201      	movs	r2, #1
    b8ce:	2000      	movs	r0, #0
    b8d0:	4c14      	ldr	r4, [pc, #80]	; (b924 <usbdc_get_interface+0x8c>)
    b8d2:	47a0      	blx	r4
		return true;
    b8d4:	2301      	movs	r3, #1
    b8d6:	e01f      	b.n	b918 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    b8d8:	68fb      	ldr	r3, [r7, #12]
    b8da:	685b      	ldr	r3, [r3, #4]
    b8dc:	687a      	ldr	r2, [r7, #4]
    b8de:	2102      	movs	r1, #2
    b8e0:	68f8      	ldr	r0, [r7, #12]
    b8e2:	4798      	blx	r3
    b8e4:	60b8      	str	r0, [r7, #8]
    b8e6:	68bb      	ldr	r3, [r7, #8]
    b8e8:	2b00      	cmp	r3, #0
    b8ea:	da03      	bge.n	b8f4 <usbdc_get_interface+0x5c>
			func = func->next;
    b8ec:	68fb      	ldr	r3, [r7, #12]
    b8ee:	681b      	ldr	r3, [r3, #0]
    b8f0:	60fb      	str	r3, [r7, #12]
    b8f2:	e00d      	b.n	b910 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    b8f4:	4b0a      	ldr	r3, [pc, #40]	; (b920 <usbdc_get_interface+0x88>)
    b8f6:	695b      	ldr	r3, [r3, #20]
    b8f8:	68ba      	ldr	r2, [r7, #8]
    b8fa:	b2d2      	uxtb	r2, r2
    b8fc:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b8fe:	4b08      	ldr	r3, [pc, #32]	; (b920 <usbdc_get_interface+0x88>)
    b900:	6959      	ldr	r1, [r3, #20]
    b902:	2300      	movs	r3, #0
    b904:	2201      	movs	r2, #1
    b906:	2000      	movs	r0, #0
    b908:	4c06      	ldr	r4, [pc, #24]	; (b924 <usbdc_get_interface+0x8c>)
    b90a:	47a0      	blx	r4
			return true;
    b90c:	2301      	movs	r3, #1
    b90e:	e003      	b.n	b918 <usbdc_get_interface+0x80>
	while (NULL != func) {
    b910:	68fb      	ldr	r3, [r7, #12]
    b912:	2b00      	cmp	r3, #0
    b914:	d1e0      	bne.n	b8d8 <usbdc_get_interface+0x40>
		}
	}
	return false;
    b916:	2300      	movs	r3, #0
}
    b918:	4618      	mov	r0, r3
    b91a:	3714      	adds	r7, #20
    b91c:	46bd      	mov	sp, r7
    b91e:	bd90      	pop	{r4, r7, pc}
    b920:	20000cb0 	.word	0x20000cb0
    b924:	0000c0d5 	.word	0x0000c0d5

0000b928 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    b928:	b590      	push	{r4, r7, lr}
    b92a:	b083      	sub	sp, #12
    b92c:	af00      	add	r7, sp, #0
    b92e:	4603      	mov	r3, r0
    b930:	6039      	str	r1, [r7, #0]
    b932:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    b934:	683b      	ldr	r3, [r7, #0]
    b936:	785b      	ldrb	r3, [r3, #1]
    b938:	2b0a      	cmp	r3, #10
    b93a:	d83a      	bhi.n	b9b2 <usbdc_get_req+0x8a>
    b93c:	a201      	add	r2, pc, #4	; (adr r2, b944 <usbdc_get_req+0x1c>)
    b93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b942:	bf00      	nop
    b944:	0000b99b 	.word	0x0000b99b
    b948:	0000b9b3 	.word	0x0000b9b3
    b94c:	0000b9b3 	.word	0x0000b9b3
    b950:	0000b9b3 	.word	0x0000b9b3
    b954:	0000b9b3 	.word	0x0000b9b3
    b958:	0000b9b3 	.word	0x0000b9b3
    b95c:	0000b971 	.word	0x0000b971
    b960:	0000b9b3 	.word	0x0000b9b3
    b964:	0000b97f 	.word	0x0000b97f
    b968:	0000b9b3 	.word	0x0000b9b3
    b96c:	0000b9a9 	.word	0x0000b9a9
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    b970:	79fb      	ldrb	r3, [r7, #7]
    b972:	6839      	ldr	r1, [r7, #0]
    b974:	4618      	mov	r0, r3
    b976:	4b11      	ldr	r3, [pc, #68]	; (b9bc <usbdc_get_req+0x94>)
    b978:	4798      	blx	r3
    b97a:	4603      	mov	r3, r0
    b97c:	e01a      	b.n	b9b4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    b97e:	4b10      	ldr	r3, [pc, #64]	; (b9c0 <usbdc_get_req+0x98>)
    b980:	695b      	ldr	r3, [r3, #20]
    b982:	4a0f      	ldr	r2, [pc, #60]	; (b9c0 <usbdc_get_req+0x98>)
    b984:	7ed2      	ldrb	r2, [r2, #27]
    b986:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    b988:	4b0d      	ldr	r3, [pc, #52]	; (b9c0 <usbdc_get_req+0x98>)
    b98a:	6959      	ldr	r1, [r3, #20]
    b98c:	79f8      	ldrb	r0, [r7, #7]
    b98e:	2300      	movs	r3, #0
    b990:	2201      	movs	r2, #1
    b992:	4c0c      	ldr	r4, [pc, #48]	; (b9c4 <usbdc_get_req+0x9c>)
    b994:	47a0      	blx	r4
		return true;
    b996:	2301      	movs	r3, #1
    b998:	e00c      	b.n	b9b4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    b99a:	79fb      	ldrb	r3, [r7, #7]
    b99c:	6839      	ldr	r1, [r7, #0]
    b99e:	4618      	mov	r0, r3
    b9a0:	4b09      	ldr	r3, [pc, #36]	; (b9c8 <usbdc_get_req+0xa0>)
    b9a2:	4798      	blx	r3
    b9a4:	4603      	mov	r3, r0
    b9a6:	e005      	b.n	b9b4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    b9a8:	6838      	ldr	r0, [r7, #0]
    b9aa:	4b08      	ldr	r3, [pc, #32]	; (b9cc <usbdc_get_req+0xa4>)
    b9ac:	4798      	blx	r3
    b9ae:	4603      	mov	r3, r0
    b9b0:	e000      	b.n	b9b4 <usbdc_get_req+0x8c>
	default:
		return false;
    b9b2:	2300      	movs	r3, #0
	}
}
    b9b4:	4618      	mov	r0, r3
    b9b6:	370c      	adds	r7, #12
    b9b8:	46bd      	mov	sp, r7
    b9ba:	bd90      	pop	{r4, r7, pc}
    b9bc:	0000b7b1 	.word	0x0000b7b1
    b9c0:	20000cb0 	.word	0x20000cb0
    b9c4:	0000c0d5 	.word	0x0000c0d5
    b9c8:	0000b819 	.word	0x0000b819
    b9cc:	0000b899 	.word	0x0000b899

0000b9d0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    b9d0:	b590      	push	{r4, r7, lr}
    b9d2:	b083      	sub	sp, #12
    b9d4:	af00      	add	r7, sp, #0
    b9d6:	4603      	mov	r3, r0
    b9d8:	6039      	str	r1, [r7, #0]
    b9da:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b9dc:	683b      	ldr	r3, [r7, #0]
    b9de:	781b      	ldrb	r3, [r3, #0]
    b9e0:	f003 031f 	and.w	r3, r3, #31
    b9e4:	2b02      	cmp	r3, #2
    b9e6:	d116      	bne.n	ba16 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    b9e8:	683b      	ldr	r3, [r7, #0]
    b9ea:	88db      	ldrh	r3, [r3, #6]
    b9ec:	b29b      	uxth	r3, r3
    b9ee:	2b00      	cmp	r3, #0
    b9f0:	d001      	beq.n	b9f6 <usbdc_clear_ftr_req+0x26>
			return false;
    b9f2:	2300      	movs	r3, #0
    b9f4:	e010      	b.n	ba18 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    b9f6:	683b      	ldr	r3, [r7, #0]
    b9f8:	889b      	ldrh	r3, [r3, #4]
    b9fa:	b29b      	uxth	r3, r3
    b9fc:	b2db      	uxtb	r3, r3
    b9fe:	2100      	movs	r1, #0
    ba00:	4618      	mov	r0, r3
    ba02:	4b07      	ldr	r3, [pc, #28]	; (ba20 <usbdc_clear_ftr_req+0x50>)
    ba04:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ba06:	79f8      	ldrb	r0, [r7, #7]
    ba08:	2301      	movs	r3, #1
    ba0a:	2200      	movs	r2, #0
    ba0c:	2100      	movs	r1, #0
    ba0e:	4c05      	ldr	r4, [pc, #20]	; (ba24 <usbdc_clear_ftr_req+0x54>)
    ba10:	47a0      	blx	r4
		return true;
    ba12:	2301      	movs	r3, #1
    ba14:	e000      	b.n	ba18 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    ba16:	2300      	movs	r3, #0
	}
}
    ba18:	4618      	mov	r0, r3
    ba1a:	370c      	adds	r7, #12
    ba1c:	46bd      	mov	sp, r7
    ba1e:	bd90      	pop	{r4, r7, pc}
    ba20:	00002d01 	.word	0x00002d01
    ba24:	0000c0d5 	.word	0x0000c0d5

0000ba28 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    ba28:	b590      	push	{r4, r7, lr}
    ba2a:	b083      	sub	sp, #12
    ba2c:	af00      	add	r7, sp, #0
    ba2e:	4603      	mov	r3, r0
    ba30:	6039      	str	r1, [r7, #0]
    ba32:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ba34:	683b      	ldr	r3, [r7, #0]
    ba36:	781b      	ldrb	r3, [r3, #0]
    ba38:	f003 031f 	and.w	r3, r3, #31
    ba3c:	2b02      	cmp	r3, #2
    ba3e:	d116      	bne.n	ba6e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    ba40:	683b      	ldr	r3, [r7, #0]
    ba42:	88db      	ldrh	r3, [r3, #6]
    ba44:	b29b      	uxth	r3, r3
    ba46:	2b00      	cmp	r3, #0
    ba48:	d001      	beq.n	ba4e <usbdc_set_ftr_req+0x26>
			return false;
    ba4a:	2300      	movs	r3, #0
    ba4c:	e010      	b.n	ba70 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    ba4e:	683b      	ldr	r3, [r7, #0]
    ba50:	889b      	ldrh	r3, [r3, #4]
    ba52:	b29b      	uxth	r3, r3
    ba54:	b2db      	uxtb	r3, r3
    ba56:	2101      	movs	r1, #1
    ba58:	4618      	mov	r0, r3
    ba5a:	4b07      	ldr	r3, [pc, #28]	; (ba78 <usbdc_set_ftr_req+0x50>)
    ba5c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ba5e:	79f8      	ldrb	r0, [r7, #7]
    ba60:	2301      	movs	r3, #1
    ba62:	2200      	movs	r2, #0
    ba64:	2100      	movs	r1, #0
    ba66:	4c05      	ldr	r4, [pc, #20]	; (ba7c <usbdc_set_ftr_req+0x54>)
    ba68:	47a0      	blx	r4
		return true;
    ba6a:	2301      	movs	r3, #1
    ba6c:	e000      	b.n	ba70 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    ba6e:	2300      	movs	r3, #0
	}
}
    ba70:	4618      	mov	r0, r3
    ba72:	370c      	adds	r7, #12
    ba74:	46bd      	mov	sp, r7
    ba76:	bd90      	pop	{r4, r7, pc}
    ba78:	00002d01 	.word	0x00002d01
    ba7c:	0000c0d5 	.word	0x0000c0d5

0000ba80 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    ba80:	b580      	push	{r7, lr}
    ba82:	b082      	sub	sp, #8
    ba84:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ba86:	4b0a      	ldr	r3, [pc, #40]	; (bab0 <usbdc_unconfig+0x30>)
    ba88:	691b      	ldr	r3, [r3, #16]
    ba8a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    ba8c:	e008      	b.n	baa0 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    ba8e:	687b      	ldr	r3, [r7, #4]
    ba90:	685b      	ldr	r3, [r3, #4]
    ba92:	2200      	movs	r2, #0
    ba94:	2101      	movs	r1, #1
    ba96:	6878      	ldr	r0, [r7, #4]
    ba98:	4798      	blx	r3
		func = func->next;
    ba9a:	687b      	ldr	r3, [r7, #4]
    ba9c:	681b      	ldr	r3, [r3, #0]
    ba9e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    baa0:	687b      	ldr	r3, [r7, #4]
    baa2:	2b00      	cmp	r3, #0
    baa4:	d1f3      	bne.n	ba8e <usbdc_unconfig+0xe>
	}
}
    baa6:	bf00      	nop
    baa8:	3708      	adds	r7, #8
    baaa:	46bd      	mov	sp, r7
    baac:	bd80      	pop	{r7, pc}
    baae:	bf00      	nop
    bab0:	20000cb0 	.word	0x20000cb0

0000bab4 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    bab4:	b580      	push	{r7, lr}
    bab6:	b088      	sub	sp, #32
    bab8:	af00      	add	r7, sp, #0
    baba:	4603      	mov	r3, r0
    babc:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    babe:	2300      	movs	r3, #0
    bac0:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    bac2:	23ff      	movs	r3, #255	; 0xff
    bac4:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    bac6:	79fb      	ldrb	r3, [r7, #7]
    bac8:	2b00      	cmp	r3, #0
    baca:	d103      	bne.n	bad4 <usbdc_set_config+0x20>
		usbdc_unconfig();
    bacc:	4b2e      	ldr	r3, [pc, #184]	; (bb88 <usbdc_set_config+0xd4>)
    bace:	4798      	blx	r3
		return true;
    bad0:	2301      	movs	r3, #1
    bad2:	e055      	b.n	bb80 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    bad4:	69bb      	ldr	r3, [r7, #24]
    bad6:	2b00      	cmp	r3, #0
    bad8:	d10a      	bne.n	baf0 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    bada:	4b2c      	ldr	r3, [pc, #176]	; (bb8c <usbdc_set_config+0xd8>)
    badc:	681b      	ldr	r3, [r3, #0]
    bade:	6818      	ldr	r0, [r3, #0]
    bae0:	4b2a      	ldr	r3, [pc, #168]	; (bb8c <usbdc_set_config+0xd8>)
    bae2:	681b      	ldr	r3, [r3, #0]
    bae4:	685b      	ldr	r3, [r3, #4]
    bae6:	79fa      	ldrb	r2, [r7, #7]
    bae8:	4619      	mov	r1, r3
    baea:	4b29      	ldr	r3, [pc, #164]	; (bb90 <usbdc_set_config+0xdc>)
    baec:	4798      	blx	r3
    baee:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    baf0:	69bb      	ldr	r3, [r7, #24]
    baf2:	2b00      	cmp	r3, #0
    baf4:	d101      	bne.n	bafa <usbdc_set_config+0x46>
		return false;
    baf6:	2300      	movs	r3, #0
    baf8:	e042      	b.n	bb80 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    bafa:	69b8      	ldr	r0, [r7, #24]
    bafc:	4b25      	ldr	r3, [pc, #148]	; (bb94 <usbdc_set_config+0xe0>)
    bafe:	4798      	blx	r3
    bb00:	4603      	mov	r3, r0
    bb02:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    bb04:	8abb      	ldrh	r3, [r7, #20]
    bb06:	69ba      	ldr	r2, [r7, #24]
    bb08:	4413      	add	r3, r2
    bb0a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    bb0c:	693b      	ldr	r3, [r7, #16]
    bb0e:	2204      	movs	r2, #4
    bb10:	4619      	mov	r1, r3
    bb12:	69b8      	ldr	r0, [r7, #24]
    bb14:	4b20      	ldr	r3, [pc, #128]	; (bb98 <usbdc_set_config+0xe4>)
    bb16:	4798      	blx	r3
    bb18:	4603      	mov	r3, r0
    bb1a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    bb1c:	e02c      	b.n	bb78 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    bb1e:	68fb      	ldr	r3, [r7, #12]
    bb20:	3302      	adds	r3, #2
    bb22:	781b      	ldrb	r3, [r3, #0]
    bb24:	7dfa      	ldrb	r2, [r7, #23]
    bb26:	429a      	cmp	r2, r3
    bb28:	d018      	beq.n	bb5c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    bb2a:	68fb      	ldr	r3, [r7, #12]
    bb2c:	789b      	ldrb	r3, [r3, #2]
    bb2e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    bb30:	4b16      	ldr	r3, [pc, #88]	; (bb8c <usbdc_set_config+0xd8>)
    bb32:	691b      	ldr	r3, [r3, #16]
    bb34:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bb36:	e00c      	b.n	bb52 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    bb38:	69fb      	ldr	r3, [r7, #28]
    bb3a:	685b      	ldr	r3, [r3, #4]
    bb3c:	f107 020c 	add.w	r2, r7, #12
    bb40:	2100      	movs	r1, #0
    bb42:	69f8      	ldr	r0, [r7, #28]
    bb44:	4798      	blx	r3
    bb46:	4603      	mov	r3, r0
    bb48:	2b00      	cmp	r3, #0
    bb4a:	d006      	beq.n	bb5a <usbdc_set_config+0xa6>
					func = func->next;
    bb4c:	69fb      	ldr	r3, [r7, #28]
    bb4e:	681b      	ldr	r3, [r3, #0]
    bb50:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bb52:	69fb      	ldr	r3, [r7, #28]
    bb54:	2b00      	cmp	r3, #0
    bb56:	d1ef      	bne.n	bb38 <usbdc_set_config+0x84>
    bb58:	e000      	b.n	bb5c <usbdc_set_config+0xa8>
				} else {
					break;
    bb5a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    bb5c:	68fb      	ldr	r3, [r7, #12]
    bb5e:	4618      	mov	r0, r3
    bb60:	4b0e      	ldr	r3, [pc, #56]	; (bb9c <usbdc_set_config+0xe8>)
    bb62:	4798      	blx	r3
    bb64:	4603      	mov	r3, r0
    bb66:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    bb68:	68fb      	ldr	r3, [r7, #12]
    bb6a:	6939      	ldr	r1, [r7, #16]
    bb6c:	2204      	movs	r2, #4
    bb6e:	4618      	mov	r0, r3
    bb70:	4b09      	ldr	r3, [pc, #36]	; (bb98 <usbdc_set_config+0xe4>)
    bb72:	4798      	blx	r3
    bb74:	4603      	mov	r3, r0
    bb76:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    bb78:	68fb      	ldr	r3, [r7, #12]
    bb7a:	2b00      	cmp	r3, #0
    bb7c:	d1cf      	bne.n	bb1e <usbdc_set_config+0x6a>
	}
	return true;
    bb7e:	2301      	movs	r3, #1
}
    bb80:	4618      	mov	r0, r3
    bb82:	3720      	adds	r7, #32
    bb84:	46bd      	mov	sp, r7
    bb86:	bd80      	pop	{r7, pc}
    bb88:	0000ba81 	.word	0x0000ba81
    bb8c:	20000cb0 	.word	0x20000cb0
    bb90:	0000c425 	.word	0x0000c425
    bb94:	0000b5d1 	.word	0x0000b5d1
    bb98:	0000c365 	.word	0x0000c365
    bb9c:	0000b5ad 	.word	0x0000b5ad

0000bba0 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    bba0:	b580      	push	{r7, lr}
    bba2:	b082      	sub	sp, #8
    bba4:	af00      	add	r7, sp, #0
    bba6:	4603      	mov	r3, r0
    bba8:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    bbaa:	79fb      	ldrb	r3, [r7, #7]
    bbac:	4618      	mov	r0, r3
    bbae:	4b03      	ldr	r3, [pc, #12]	; (bbbc <usbdc_set_address+0x1c>)
    bbb0:	4798      	blx	r3
}
    bbb2:	bf00      	nop
    bbb4:	3708      	adds	r7, #8
    bbb6:	46bd      	mov	sp, r7
    bbb8:	bd80      	pop	{r7, pc}
    bbba:	bf00      	nop
    bbbc:	00002971 	.word	0x00002971

0000bbc0 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    bbc0:	b590      	push	{r4, r7, lr}
    bbc2:	b087      	sub	sp, #28
    bbc4:	af00      	add	r7, sp, #0
    bbc6:	4603      	mov	r3, r0
    bbc8:	460a      	mov	r2, r1
    bbca:	80fb      	strh	r3, [r7, #6]
    bbcc:	4613      	mov	r3, r2
    bbce:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    bbd0:	2300      	movs	r3, #0
    bbd2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    bbd4:	693b      	ldr	r3, [r7, #16]
    bbd6:	2b00      	cmp	r3, #0
    bbd8:	d10b      	bne.n	bbf2 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    bbda:	4b43      	ldr	r3, [pc, #268]	; (bce8 <usbdc_set_interface+0x128>)
    bbdc:	681b      	ldr	r3, [r3, #0]
    bbde:	6818      	ldr	r0, [r3, #0]
    bbe0:	4b41      	ldr	r3, [pc, #260]	; (bce8 <usbdc_set_interface+0x128>)
    bbe2:	681b      	ldr	r3, [r3, #0]
    bbe4:	6859      	ldr	r1, [r3, #4]
    bbe6:	4b40      	ldr	r3, [pc, #256]	; (bce8 <usbdc_set_interface+0x128>)
    bbe8:	7edb      	ldrb	r3, [r3, #27]
    bbea:	461a      	mov	r2, r3
    bbec:	4b3f      	ldr	r3, [pc, #252]	; (bcec <usbdc_set_interface+0x12c>)
    bbee:	4798      	blx	r3
    bbf0:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    bbf2:	693b      	ldr	r3, [r7, #16]
    bbf4:	2b00      	cmp	r3, #0
    bbf6:	d101      	bne.n	bbfc <usbdc_set_interface+0x3c>
		return false;
    bbf8:	2300      	movs	r3, #0
    bbfa:	e071      	b.n	bce0 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    bbfc:	693b      	ldr	r3, [r7, #16]
    bbfe:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    bc00:	6938      	ldr	r0, [r7, #16]
    bc02:	4b3b      	ldr	r3, [pc, #236]	; (bcf0 <usbdc_set_interface+0x130>)
    bc04:	4798      	blx	r3
    bc06:	4603      	mov	r3, r0
    bc08:	461a      	mov	r2, r3
    bc0a:	693b      	ldr	r3, [r7, #16]
    bc0c:	4413      	add	r3, r2
    bc0e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    bc10:	68bb      	ldr	r3, [r7, #8]
    bc12:	68f9      	ldr	r1, [r7, #12]
    bc14:	2204      	movs	r2, #4
    bc16:	4618      	mov	r0, r3
    bc18:	4b36      	ldr	r3, [pc, #216]	; (bcf4 <usbdc_set_interface+0x134>)
    bc1a:	4798      	blx	r3
    bc1c:	6138      	str	r0, [r7, #16]
    bc1e:	693b      	ldr	r3, [r7, #16]
    bc20:	2b00      	cmp	r3, #0
    bc22:	d113      	bne.n	bc4c <usbdc_set_interface+0x8c>
		return false;
    bc24:	2300      	movs	r3, #0
    bc26:	e05b      	b.n	bce0 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    bc28:	68bb      	ldr	r3, [r7, #8]
    bc2a:	4618      	mov	r0, r3
    bc2c:	4b32      	ldr	r3, [pc, #200]	; (bcf8 <usbdc_set_interface+0x138>)
    bc2e:	4798      	blx	r3
    bc30:	4603      	mov	r3, r0
    bc32:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    bc34:	68bb      	ldr	r3, [r7, #8]
    bc36:	68f9      	ldr	r1, [r7, #12]
    bc38:	2204      	movs	r2, #4
    bc3a:	4618      	mov	r0, r3
    bc3c:	4b2d      	ldr	r3, [pc, #180]	; (bcf4 <usbdc_set_interface+0x134>)
    bc3e:	4798      	blx	r3
    bc40:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    bc42:	693b      	ldr	r3, [r7, #16]
    bc44:	2b00      	cmp	r3, #0
    bc46:	d101      	bne.n	bc4c <usbdc_set_interface+0x8c>
			return false;
    bc48:	2300      	movs	r3, #0
    bc4a:	e049      	b.n	bce0 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    bc4c:	693b      	ldr	r3, [r7, #16]
    bc4e:	3302      	adds	r3, #2
    bc50:	781b      	ldrb	r3, [r3, #0]
    bc52:	b29b      	uxth	r3, r3
    bc54:	88ba      	ldrh	r2, [r7, #4]
    bc56:	429a      	cmp	r2, r3
    bc58:	d1e6      	bne.n	bc28 <usbdc_set_interface+0x68>
    bc5a:	693b      	ldr	r3, [r7, #16]
    bc5c:	3303      	adds	r3, #3
    bc5e:	781b      	ldrb	r3, [r3, #0]
    bc60:	b29b      	uxth	r3, r3
    bc62:	88fa      	ldrh	r2, [r7, #6]
    bc64:	429a      	cmp	r2, r3
    bc66:	d1df      	bne.n	bc28 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    bc68:	693b      	ldr	r3, [r7, #16]
    bc6a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    bc6c:	4b1e      	ldr	r3, [pc, #120]	; (bce8 <usbdc_set_interface+0x128>)
    bc6e:	691b      	ldr	r3, [r3, #16]
    bc70:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    bc72:	e031      	b.n	bcd8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    bc74:	697b      	ldr	r3, [r7, #20]
    bc76:	685b      	ldr	r3, [r3, #4]
    bc78:	f107 0208 	add.w	r2, r7, #8
    bc7c:	2101      	movs	r1, #1
    bc7e:	6978      	ldr	r0, [r7, #20]
    bc80:	4798      	blx	r3
    bc82:	4603      	mov	r3, r0
    bc84:	2b00      	cmp	r3, #0
    bc86:	d003      	beq.n	bc90 <usbdc_set_interface+0xd0>
			func = func->next;
    bc88:	697b      	ldr	r3, [r7, #20]
    bc8a:	681b      	ldr	r3, [r3, #0]
    bc8c:	617b      	str	r3, [r7, #20]
    bc8e:	e023      	b.n	bcd8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    bc90:	697b      	ldr	r3, [r7, #20]
    bc92:	685b      	ldr	r3, [r3, #4]
    bc94:	f107 0208 	add.w	r2, r7, #8
    bc98:	2100      	movs	r1, #0
    bc9a:	6978      	ldr	r0, [r7, #20]
    bc9c:	4798      	blx	r3
    bc9e:	4603      	mov	r3, r0
    bca0:	2b00      	cmp	r3, #0
    bca2:	d117      	bne.n	bcd4 <usbdc_set_interface+0x114>
			if (alt_set) {
    bca4:	88fb      	ldrh	r3, [r7, #6]
    bca6:	2b00      	cmp	r3, #0
    bca8:	d00c      	beq.n	bcc4 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    bcaa:	4b0f      	ldr	r3, [pc, #60]	; (bce8 <usbdc_set_interface+0x128>)
    bcac:	7f5b      	ldrb	r3, [r3, #29]
    bcae:	b25a      	sxtb	r2, r3
    bcb0:	88bb      	ldrh	r3, [r7, #4]
    bcb2:	2101      	movs	r1, #1
    bcb4:	fa01 f303 	lsl.w	r3, r1, r3
    bcb8:	b25b      	sxtb	r3, r3
    bcba:	4313      	orrs	r3, r2
    bcbc:	b25b      	sxtb	r3, r3
    bcbe:	b2da      	uxtb	r2, r3
    bcc0:	4b09      	ldr	r3, [pc, #36]	; (bce8 <usbdc_set_interface+0x128>)
    bcc2:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    bcc4:	2300      	movs	r3, #0
    bcc6:	2200      	movs	r2, #0
    bcc8:	2100      	movs	r1, #0
    bcca:	2000      	movs	r0, #0
    bccc:	4c0b      	ldr	r4, [pc, #44]	; (bcfc <usbdc_set_interface+0x13c>)
    bcce:	47a0      	blx	r4
			return true;
    bcd0:	2301      	movs	r3, #1
    bcd2:	e005      	b.n	bce0 <usbdc_set_interface+0x120>
		} else {
			return false;
    bcd4:	2300      	movs	r3, #0
    bcd6:	e003      	b.n	bce0 <usbdc_set_interface+0x120>
	while (NULL != func) {
    bcd8:	697b      	ldr	r3, [r7, #20]
    bcda:	2b00      	cmp	r3, #0
    bcdc:	d1ca      	bne.n	bc74 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    bcde:	2300      	movs	r3, #0
}
    bce0:	4618      	mov	r0, r3
    bce2:	371c      	adds	r7, #28
    bce4:	46bd      	mov	sp, r7
    bce6:	bd90      	pop	{r4, r7, pc}
    bce8:	20000cb0 	.word	0x20000cb0
    bcec:	0000c425 	.word	0x0000c425
    bcf0:	0000b5d1 	.word	0x0000b5d1
    bcf4:	0000c365 	.word	0x0000c365
    bcf8:	0000b5ad 	.word	0x0000b5ad
    bcfc:	0000c0d5 	.word	0x0000c0d5

0000bd00 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    bd00:	b590      	push	{r4, r7, lr}
    bd02:	b083      	sub	sp, #12
    bd04:	af00      	add	r7, sp, #0
    bd06:	4603      	mov	r3, r0
    bd08:	6039      	str	r1, [r7, #0]
    bd0a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    bd0c:	683b      	ldr	r3, [r7, #0]
    bd0e:	785b      	ldrb	r3, [r3, #1]
    bd10:	3b01      	subs	r3, #1
    bd12:	2b0a      	cmp	r3, #10
    bd14:	d85b      	bhi.n	bdce <usbdc_set_req+0xce>
    bd16:	a201      	add	r2, pc, #4	; (adr r2, bd1c <usbdc_set_req+0x1c>)
    bd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bd1c:	0000bd9b 	.word	0x0000bd9b
    bd20:	0000bdcf 	.word	0x0000bdcf
    bd24:	0000bda9 	.word	0x0000bda9
    bd28:	0000bdcf 	.word	0x0000bdcf
    bd2c:	0000bd49 	.word	0x0000bd49
    bd30:	0000bdcf 	.word	0x0000bdcf
    bd34:	0000bdcf 	.word	0x0000bdcf
    bd38:	0000bdcf 	.word	0x0000bdcf
    bd3c:	0000bd63 	.word	0x0000bd63
    bd40:	0000bdcf 	.word	0x0000bdcf
    bd44:	0000bdb7 	.word	0x0000bdb7
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    bd48:	79f8      	ldrb	r0, [r7, #7]
    bd4a:	2301      	movs	r3, #1
    bd4c:	2200      	movs	r2, #0
    bd4e:	2100      	movs	r1, #0
    bd50:	4c21      	ldr	r4, [pc, #132]	; (bdd8 <usbdc_set_req+0xd8>)
    bd52:	47a0      	blx	r4
    bd54:	4603      	mov	r3, r0
    bd56:	2b00      	cmp	r3, #0
    bd58:	bf0c      	ite	eq
    bd5a:	2301      	moveq	r3, #1
    bd5c:	2300      	movne	r3, #0
    bd5e:	b2db      	uxtb	r3, r3
    bd60:	e036      	b.n	bdd0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    bd62:	683b      	ldr	r3, [r7, #0]
    bd64:	885b      	ldrh	r3, [r3, #2]
    bd66:	b29b      	uxth	r3, r3
    bd68:	b2db      	uxtb	r3, r3
    bd6a:	4618      	mov	r0, r3
    bd6c:	4b1b      	ldr	r3, [pc, #108]	; (bddc <usbdc_set_req+0xdc>)
    bd6e:	4798      	blx	r3
    bd70:	4603      	mov	r3, r0
    bd72:	f083 0301 	eor.w	r3, r3, #1
    bd76:	b2db      	uxtb	r3, r3
    bd78:	2b00      	cmp	r3, #0
    bd7a:	d001      	beq.n	bd80 <usbdc_set_req+0x80>
			return false;
    bd7c:	2300      	movs	r3, #0
    bd7e:	e027      	b.n	bdd0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    bd80:	79f8      	ldrb	r0, [r7, #7]
    bd82:	2301      	movs	r3, #1
    bd84:	2200      	movs	r2, #0
    bd86:	2100      	movs	r1, #0
    bd88:	4c13      	ldr	r4, [pc, #76]	; (bdd8 <usbdc_set_req+0xd8>)
    bd8a:	47a0      	blx	r4
    bd8c:	4603      	mov	r3, r0
    bd8e:	2b00      	cmp	r3, #0
    bd90:	bf0c      	ite	eq
    bd92:	2301      	moveq	r3, #1
    bd94:	2300      	movne	r3, #0
    bd96:	b2db      	uxtb	r3, r3
    bd98:	e01a      	b.n	bdd0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    bd9a:	79fb      	ldrb	r3, [r7, #7]
    bd9c:	6839      	ldr	r1, [r7, #0]
    bd9e:	4618      	mov	r0, r3
    bda0:	4b0f      	ldr	r3, [pc, #60]	; (bde0 <usbdc_set_req+0xe0>)
    bda2:	4798      	blx	r3
    bda4:	4603      	mov	r3, r0
    bda6:	e013      	b.n	bdd0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    bda8:	79fb      	ldrb	r3, [r7, #7]
    bdaa:	6839      	ldr	r1, [r7, #0]
    bdac:	4618      	mov	r0, r3
    bdae:	4b0d      	ldr	r3, [pc, #52]	; (bde4 <usbdc_set_req+0xe4>)
    bdb0:	4798      	blx	r3
    bdb2:	4603      	mov	r3, r0
    bdb4:	e00c      	b.n	bdd0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    bdb6:	683b      	ldr	r3, [r7, #0]
    bdb8:	885b      	ldrh	r3, [r3, #2]
    bdba:	b29a      	uxth	r2, r3
    bdbc:	683b      	ldr	r3, [r7, #0]
    bdbe:	889b      	ldrh	r3, [r3, #4]
    bdc0:	b29b      	uxth	r3, r3
    bdc2:	4619      	mov	r1, r3
    bdc4:	4610      	mov	r0, r2
    bdc6:	4b08      	ldr	r3, [pc, #32]	; (bde8 <usbdc_set_req+0xe8>)
    bdc8:	4798      	blx	r3
    bdca:	4603      	mov	r3, r0
    bdcc:	e000      	b.n	bdd0 <usbdc_set_req+0xd0>
	default:
		return false;
    bdce:	2300      	movs	r3, #0
	}
}
    bdd0:	4618      	mov	r0, r3
    bdd2:	370c      	adds	r7, #12
    bdd4:	46bd      	mov	sp, r7
    bdd6:	bd90      	pop	{r4, r7, pc}
    bdd8:	0000c0d5 	.word	0x0000c0d5
    bddc:	0000bab5 	.word	0x0000bab5
    bde0:	0000b9d1 	.word	0x0000b9d1
    bde4:	0000ba29 	.word	0x0000ba29
    bde8:	0000bbc1 	.word	0x0000bbc1

0000bdec <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    bdec:	b580      	push	{r7, lr}
    bdee:	b082      	sub	sp, #8
    bdf0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    bdf2:	4b0a      	ldr	r3, [pc, #40]	; (be1c <usbdc_sof_notify+0x30>)
    bdf4:	685b      	ldr	r3, [r3, #4]
    bdf6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    bdf8:	e009      	b.n	be0e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    bdfa:	687b      	ldr	r3, [r7, #4]
    bdfc:	685b      	ldr	r3, [r3, #4]
    bdfe:	2b00      	cmp	r3, #0
    be00:	d002      	beq.n	be08 <usbdc_sof_notify+0x1c>
			sof->cb();
    be02:	687b      	ldr	r3, [r7, #4]
    be04:	685b      	ldr	r3, [r3, #4]
    be06:	4798      	blx	r3
		}
		sof = sof->next;
    be08:	687b      	ldr	r3, [r7, #4]
    be0a:	681b      	ldr	r3, [r3, #0]
    be0c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    be0e:	687b      	ldr	r3, [r7, #4]
    be10:	2b00      	cmp	r3, #0
    be12:	d1f2      	bne.n	bdfa <usbdc_sof_notify+0xe>
	}
}
    be14:	bf00      	nop
    be16:	3708      	adds	r7, #8
    be18:	46bd      	mov	sp, r7
    be1a:	bd80      	pop	{r7, pc}
    be1c:	20000cb0 	.word	0x20000cb0

0000be20 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    be20:	b580      	push	{r7, lr}
    be22:	b084      	sub	sp, #16
    be24:	af00      	add	r7, sp, #0
    be26:	4603      	mov	r3, r0
    be28:	6039      	str	r1, [r7, #0]
    be2a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    be2c:	4b0b      	ldr	r3, [pc, #44]	; (be5c <usbdc_change_notify+0x3c>)
    be2e:	68db      	ldr	r3, [r3, #12]
    be30:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    be32:	e00c      	b.n	be4e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    be34:	68fb      	ldr	r3, [r7, #12]
    be36:	685b      	ldr	r3, [r3, #4]
    be38:	2b00      	cmp	r3, #0
    be3a:	d005      	beq.n	be48 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    be3c:	68fb      	ldr	r3, [r7, #12]
    be3e:	685b      	ldr	r3, [r3, #4]
    be40:	79fa      	ldrb	r2, [r7, #7]
    be42:	6839      	ldr	r1, [r7, #0]
    be44:	4610      	mov	r0, r2
    be46:	4798      	blx	r3
		}
		cg = cg->next;
    be48:	68fb      	ldr	r3, [r7, #12]
    be4a:	681b      	ldr	r3, [r3, #0]
    be4c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    be4e:	68fb      	ldr	r3, [r7, #12]
    be50:	2b00      	cmp	r3, #0
    be52:	d1ef      	bne.n	be34 <usbdc_change_notify+0x14>
	}
}
    be54:	bf00      	nop
    be56:	3710      	adds	r7, #16
    be58:	46bd      	mov	sp, r7
    be5a:	bd80      	pop	{r7, pc}
    be5c:	20000cb0 	.word	0x20000cb0

0000be60 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    be60:	b580      	push	{r7, lr}
    be62:	b084      	sub	sp, #16
    be64:	af00      	add	r7, sp, #0
    be66:	4603      	mov	r3, r0
    be68:	6039      	str	r1, [r7, #0]
    be6a:	71fb      	strb	r3, [r7, #7]
    be6c:	4613      	mov	r3, r2
    be6e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    be70:	4b12      	ldr	r3, [pc, #72]	; (bebc <usbdc_request_handler+0x5c>)
    be72:	689b      	ldr	r3, [r3, #8]
    be74:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    be76:	e019      	b.n	beac <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    be78:	68fb      	ldr	r3, [r7, #12]
    be7a:	685b      	ldr	r3, [r3, #4]
    be7c:	2b00      	cmp	r3, #0
    be7e:	d012      	beq.n	bea6 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    be80:	68fb      	ldr	r3, [r7, #12]
    be82:	685b      	ldr	r3, [r3, #4]
    be84:	79ba      	ldrb	r2, [r7, #6]
    be86:	79f8      	ldrb	r0, [r7, #7]
    be88:	6839      	ldr	r1, [r7, #0]
    be8a:	4798      	blx	r3
    be8c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    be8e:	68bb      	ldr	r3, [r7, #8]
    be90:	2b00      	cmp	r3, #0
    be92:	d101      	bne.n	be98 <usbdc_request_handler+0x38>
				return true;
    be94:	2301      	movs	r3, #1
    be96:	e00d      	b.n	beb4 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    be98:	68bb      	ldr	r3, [r7, #8]
    be9a:	f113 0f0a 	cmn.w	r3, #10
    be9e:	d002      	beq.n	bea6 <usbdc_request_handler+0x46>
				return -1;
    bea0:	f04f 33ff 	mov.w	r3, #4294967295
    bea4:	e006      	b.n	beb4 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    bea6:	68fb      	ldr	r3, [r7, #12]
    bea8:	681b      	ldr	r3, [r3, #0]
    beaa:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    beac:	68fb      	ldr	r3, [r7, #12]
    beae:	2b00      	cmp	r3, #0
    beb0:	d1e2      	bne.n	be78 <usbdc_request_handler+0x18>
	}
	return false;
    beb2:	2300      	movs	r3, #0
}
    beb4:	4618      	mov	r0, r3
    beb6:	3710      	adds	r7, #16
    beb8:	46bd      	mov	sp, r7
    beba:	bd80      	pop	{r7, pc}
    bebc:	20000cb0 	.word	0x20000cb0

0000bec0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    bec0:	b580      	push	{r7, lr}
    bec2:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    bec4:	4b01      	ldr	r3, [pc, #4]	; (becc <usbd_sof_cb+0xc>)
    bec6:	4798      	blx	r3
}
    bec8:	bf00      	nop
    beca:	bd80      	pop	{r7, pc}
    becc:	0000bded 	.word	0x0000bded

0000bed0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    bed0:	b580      	push	{r7, lr}
    bed2:	b082      	sub	sp, #8
    bed4:	af00      	add	r7, sp, #0
    bed6:	4603      	mov	r3, r0
    bed8:	6039      	str	r1, [r7, #0]
    beda:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    bedc:	79fb      	ldrb	r3, [r7, #7]
    bede:	2200      	movs	r2, #0
    bee0:	6839      	ldr	r1, [r7, #0]
    bee2:	4618      	mov	r0, r3
    bee4:	4b14      	ldr	r3, [pc, #80]	; (bf38 <usbdc_cb_ctl_req+0x68>)
    bee6:	4798      	blx	r3
    bee8:	4603      	mov	r3, r0
    beea:	f1b3 3fff 	cmp.w	r3, #4294967295
    beee:	d00b      	beq.n	bf08 <usbdc_cb_ctl_req+0x38>
    bef0:	2b01      	cmp	r3, #1
    bef2:	d007      	beq.n	bf04 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    bef4:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    bef6:	683b      	ldr	r3, [r7, #0]
    bef8:	781b      	ldrb	r3, [r3, #0]
    befa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    befe:	2b00      	cmp	r3, #0
    bf00:	d007      	beq.n	bf12 <usbdc_cb_ctl_req+0x42>
    bf02:	e003      	b.n	bf0c <usbdc_cb_ctl_req+0x3c>
		return true;
    bf04:	2301      	movs	r3, #1
    bf06:	e013      	b.n	bf30 <usbdc_cb_ctl_req+0x60>
		return false;
    bf08:	2300      	movs	r3, #0
    bf0a:	e011      	b.n	bf30 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    bf0c:	2b80      	cmp	r3, #128	; 0x80
    bf0e:	d007      	beq.n	bf20 <usbdc_cb_ctl_req+0x50>
    bf10:	e00d      	b.n	bf2e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    bf12:	79fb      	ldrb	r3, [r7, #7]
    bf14:	6839      	ldr	r1, [r7, #0]
    bf16:	4618      	mov	r0, r3
    bf18:	4b08      	ldr	r3, [pc, #32]	; (bf3c <usbdc_cb_ctl_req+0x6c>)
    bf1a:	4798      	blx	r3
    bf1c:	4603      	mov	r3, r0
    bf1e:	e007      	b.n	bf30 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    bf20:	79fb      	ldrb	r3, [r7, #7]
    bf22:	6839      	ldr	r1, [r7, #0]
    bf24:	4618      	mov	r0, r3
    bf26:	4b06      	ldr	r3, [pc, #24]	; (bf40 <usbdc_cb_ctl_req+0x70>)
    bf28:	4798      	blx	r3
    bf2a:	4603      	mov	r3, r0
    bf2c:	e000      	b.n	bf30 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    bf2e:	2300      	movs	r3, #0
	}
}
    bf30:	4618      	mov	r0, r3
    bf32:	3708      	adds	r7, #8
    bf34:	46bd      	mov	sp, r7
    bf36:	bd80      	pop	{r7, pc}
    bf38:	0000be61 	.word	0x0000be61
    bf3c:	0000bd01 	.word	0x0000bd01
    bf40:	0000b929 	.word	0x0000b929

0000bf44 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    bf44:	b580      	push	{r7, lr}
    bf46:	b082      	sub	sp, #8
    bf48:	af00      	add	r7, sp, #0
    bf4a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    bf4c:	687b      	ldr	r3, [r7, #4]
    bf4e:	781b      	ldrb	r3, [r3, #0]
    bf50:	2b00      	cmp	r3, #0
    bf52:	d135      	bne.n	bfc0 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    bf54:	687b      	ldr	r3, [r7, #4]
    bf56:	785b      	ldrb	r3, [r3, #1]
    bf58:	2b05      	cmp	r3, #5
    bf5a:	d019      	beq.n	bf90 <usbdc_ctrl_status_end+0x4c>
    bf5c:	2b09      	cmp	r3, #9
    bf5e:	d000      	beq.n	bf62 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    bf60:	e02f      	b.n	bfc2 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    bf62:	687b      	ldr	r3, [r7, #4]
    bf64:	885b      	ldrh	r3, [r3, #2]
    bf66:	b29b      	uxth	r3, r3
    bf68:	b2da      	uxtb	r2, r3
    bf6a:	4b17      	ldr	r3, [pc, #92]	; (bfc8 <usbdc_ctrl_status_end+0x84>)
    bf6c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    bf6e:	687b      	ldr	r3, [r7, #4]
    bf70:	885b      	ldrh	r3, [r3, #2]
    bf72:	b29b      	uxth	r3, r3
    bf74:	2b00      	cmp	r3, #0
    bf76:	d001      	beq.n	bf7c <usbdc_ctrl_status_end+0x38>
    bf78:	2204      	movs	r2, #4
    bf7a:	e000      	b.n	bf7e <usbdc_ctrl_status_end+0x3a>
    bf7c:	2203      	movs	r2, #3
    bf7e:	4b12      	ldr	r3, [pc, #72]	; (bfc8 <usbdc_ctrl_status_end+0x84>)
    bf80:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    bf82:	4b11      	ldr	r3, [pc, #68]	; (bfc8 <usbdc_ctrl_status_end+0x84>)
    bf84:	7e9b      	ldrb	r3, [r3, #26]
    bf86:	4619      	mov	r1, r3
    bf88:	2001      	movs	r0, #1
    bf8a:	4b10      	ldr	r3, [pc, #64]	; (bfcc <usbdc_ctrl_status_end+0x88>)
    bf8c:	4798      	blx	r3
		break;
    bf8e:	e018      	b.n	bfc2 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    bf90:	687b      	ldr	r3, [r7, #4]
    bf92:	885b      	ldrh	r3, [r3, #2]
    bf94:	b29b      	uxth	r3, r3
    bf96:	b2db      	uxtb	r3, r3
    bf98:	4618      	mov	r0, r3
    bf9a:	4b0d      	ldr	r3, [pc, #52]	; (bfd0 <usbdc_ctrl_status_end+0x8c>)
    bf9c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    bf9e:	687b      	ldr	r3, [r7, #4]
    bfa0:	885b      	ldrh	r3, [r3, #2]
    bfa2:	b29b      	uxth	r3, r3
    bfa4:	2b00      	cmp	r3, #0
    bfa6:	d001      	beq.n	bfac <usbdc_ctrl_status_end+0x68>
    bfa8:	2203      	movs	r2, #3
    bfaa:	e000      	b.n	bfae <usbdc_ctrl_status_end+0x6a>
    bfac:	2202      	movs	r2, #2
    bfae:	4b06      	ldr	r3, [pc, #24]	; (bfc8 <usbdc_ctrl_status_end+0x84>)
    bfb0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    bfb2:	4b05      	ldr	r3, [pc, #20]	; (bfc8 <usbdc_ctrl_status_end+0x84>)
    bfb4:	7e9b      	ldrb	r3, [r3, #26]
    bfb6:	4619      	mov	r1, r3
    bfb8:	2001      	movs	r0, #1
    bfba:	4b04      	ldr	r3, [pc, #16]	; (bfcc <usbdc_ctrl_status_end+0x88>)
    bfbc:	4798      	blx	r3
		break;
    bfbe:	e000      	b.n	bfc2 <usbdc_ctrl_status_end+0x7e>
		return;
    bfc0:	bf00      	nop
	}
}
    bfc2:	3708      	adds	r7, #8
    bfc4:	46bd      	mov	sp, r7
    bfc6:	bd80      	pop	{r7, pc}
    bfc8:	20000cb0 	.word	0x20000cb0
    bfcc:	0000be21 	.word	0x0000be21
    bfd0:	0000bba1 	.word	0x0000bba1

0000bfd4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    bfd4:	b580      	push	{r7, lr}
    bfd6:	b082      	sub	sp, #8
    bfd8:	af00      	add	r7, sp, #0
    bfda:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    bfdc:	2201      	movs	r2, #1
    bfde:	6879      	ldr	r1, [r7, #4]
    bfe0:	2000      	movs	r0, #0
    bfe2:	4b03      	ldr	r3, [pc, #12]	; (bff0 <usbdc_ctrl_data_end+0x1c>)
    bfe4:	4798      	blx	r3
	return false;
    bfe6:	2300      	movs	r3, #0
}
    bfe8:	4618      	mov	r0, r3
    bfea:	3708      	adds	r7, #8
    bfec:	46bd      	mov	sp, r7
    bfee:	bd80      	pop	{r7, pc}
    bff0:	0000be61 	.word	0x0000be61

0000bff4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    bff4:	b580      	push	{r7, lr}
    bff6:	b082      	sub	sp, #8
    bff8:	af00      	add	r7, sp, #0
    bffa:	4603      	mov	r3, r0
    bffc:	603a      	str	r2, [r7, #0]
    bffe:	71fb      	strb	r3, [r7, #7]
    c000:	460b      	mov	r3, r1
    c002:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    c004:	79bb      	ldrb	r3, [r7, #6]
    c006:	2b00      	cmp	r3, #0
    c008:	d002      	beq.n	c010 <usbdc_cb_ctl_done+0x1c>
    c00a:	2b01      	cmp	r3, #1
    c00c:	d004      	beq.n	c018 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    c00e:	e008      	b.n	c022 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    c010:	6838      	ldr	r0, [r7, #0]
    c012:	4b06      	ldr	r3, [pc, #24]	; (c02c <usbdc_cb_ctl_done+0x38>)
    c014:	4798      	blx	r3
		break;
    c016:	e004      	b.n	c022 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    c018:	6838      	ldr	r0, [r7, #0]
    c01a:	4b05      	ldr	r3, [pc, #20]	; (c030 <usbdc_cb_ctl_done+0x3c>)
    c01c:	4798      	blx	r3
    c01e:	4603      	mov	r3, r0
    c020:	e000      	b.n	c024 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    c022:	2300      	movs	r3, #0
}
    c024:	4618      	mov	r0, r3
    c026:	3708      	adds	r7, #8
    c028:	46bd      	mov	sp, r7
    c02a:	bd80      	pop	{r7, pc}
    c02c:	0000bf45 	.word	0x0000bf45
    c030:	0000bfd5 	.word	0x0000bfd5

0000c034 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c034:	b580      	push	{r7, lr}
    c036:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    c038:	4b10      	ldr	r3, [pc, #64]	; (c07c <usbdc_reset+0x48>)
    c03a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c03c:	4b10      	ldr	r3, [pc, #64]	; (c080 <usbdc_reset+0x4c>)
    c03e:	2202      	movs	r2, #2
    c040:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    c042:	4b0f      	ldr	r3, [pc, #60]	; (c080 <usbdc_reset+0x4c>)
    c044:	2200      	movs	r2, #0
    c046:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    c048:	4b0d      	ldr	r3, [pc, #52]	; (c080 <usbdc_reset+0x4c>)
    c04a:	2200      	movs	r2, #0
    c04c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c04e:	2000      	movs	r0, #0
    c050:	4b0c      	ldr	r3, [pc, #48]	; (c084 <usbdc_reset+0x50>)
    c052:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c054:	4b0a      	ldr	r3, [pc, #40]	; (c080 <usbdc_reset+0x4c>)
    c056:	7f1b      	ldrb	r3, [r3, #28]
    c058:	4618      	mov	r0, r3
    c05a:	4b0b      	ldr	r3, [pc, #44]	; (c088 <usbdc_reset+0x54>)
    c05c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c05e:	4a0b      	ldr	r2, [pc, #44]	; (c08c <usbdc_reset+0x58>)
    c060:	2100      	movs	r1, #0
    c062:	2000      	movs	r0, #0
    c064:	4b0a      	ldr	r3, [pc, #40]	; (c090 <usbdc_reset+0x5c>)
    c066:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c068:	4a0a      	ldr	r2, [pc, #40]	; (c094 <usbdc_reset+0x60>)
    c06a:	2102      	movs	r1, #2
    c06c:	2000      	movs	r0, #0
    c06e:	4b08      	ldr	r3, [pc, #32]	; (c090 <usbdc_reset+0x5c>)
    c070:	4798      	blx	r3
	usb_d_ep_enable(0);
    c072:	2000      	movs	r0, #0
    c074:	4b08      	ldr	r3, [pc, #32]	; (c098 <usbdc_reset+0x64>)
    c076:	4798      	blx	r3
}
    c078:	bf00      	nop
    c07a:	bd80      	pop	{r7, pc}
    c07c:	0000ba81 	.word	0x0000ba81
    c080:	20000cb0 	.word	0x20000cb0
    c084:	00002a55 	.word	0x00002a55
    c088:	00002991 	.word	0x00002991
    c08c:	0000bed1 	.word	0x0000bed1
    c090:	00002d55 	.word	0x00002d55
    c094:	0000bff5 	.word	0x0000bff5
    c098:	00002aa5 	.word	0x00002aa5

0000c09c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c09c:	b580      	push	{r7, lr}
    c09e:	b082      	sub	sp, #8
    c0a0:	af00      	add	r7, sp, #0
    c0a2:	4603      	mov	r3, r0
    c0a4:	6039      	str	r1, [r7, #0]
    c0a6:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    c0a8:	79fb      	ldrb	r3, [r7, #7]
    c0aa:	2b00      	cmp	r3, #0
    c0ac:	d002      	beq.n	c0b4 <usbd_event_cb+0x18>
    c0ae:	2b01      	cmp	r3, #1
    c0b0:	d005      	beq.n	c0be <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    c0b2:	e007      	b.n	c0c4 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    c0b4:	6839      	ldr	r1, [r7, #0]
    c0b6:	2000      	movs	r0, #0
    c0b8:	4b04      	ldr	r3, [pc, #16]	; (c0cc <usbd_event_cb+0x30>)
    c0ba:	4798      	blx	r3
		break;
    c0bc:	e002      	b.n	c0c4 <usbd_event_cb+0x28>
		usbdc_reset();
    c0be:	4b04      	ldr	r3, [pc, #16]	; (c0d0 <usbd_event_cb+0x34>)
    c0c0:	4798      	blx	r3
		break;
    c0c2:	bf00      	nop
	}
}
    c0c4:	bf00      	nop
    c0c6:	3708      	adds	r7, #8
    c0c8:	46bd      	mov	sp, r7
    c0ca:	bd80      	pop	{r7, pc}
    c0cc:	0000be21 	.word	0x0000be21
    c0d0:	0000c035 	.word	0x0000c035

0000c0d4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c0d4:	b580      	push	{r7, lr}
    c0d6:	b088      	sub	sp, #32
    c0d8:	af00      	add	r7, sp, #0
    c0da:	60b9      	str	r1, [r7, #8]
    c0dc:	607a      	str	r2, [r7, #4]
    c0de:	461a      	mov	r2, r3
    c0e0:	4603      	mov	r3, r0
    c0e2:	73fb      	strb	r3, [r7, #15]
    c0e4:	4613      	mov	r3, r2
    c0e6:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c0e8:	68bb      	ldr	r3, [r7, #8]
    c0ea:	617b      	str	r3, [r7, #20]
    c0ec:	687b      	ldr	r3, [r7, #4]
    c0ee:	61bb      	str	r3, [r7, #24]
    c0f0:	7bfb      	ldrb	r3, [r7, #15]
    c0f2:	773b      	strb	r3, [r7, #28]
    c0f4:	7bbb      	ldrb	r3, [r7, #14]
    c0f6:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    c0f8:	f107 0314 	add.w	r3, r7, #20
    c0fc:	4618      	mov	r0, r3
    c0fe:	4b03      	ldr	r3, [pc, #12]	; (c10c <usbdc_xfer+0x38>)
    c100:	4798      	blx	r3
    c102:	4603      	mov	r3, r0
}
    c104:	4618      	mov	r0, r3
    c106:	3720      	adds	r7, #32
    c108:	46bd      	mov	sp, r7
    c10a:	bd80      	pop	{r7, pc}
    c10c:	00002b15 	.word	0x00002b15

0000c110 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    c110:	b580      	push	{r7, lr}
    c112:	b082      	sub	sp, #8
    c114:	af00      	add	r7, sp, #0
    c116:	4603      	mov	r3, r0
    c118:	6039      	str	r1, [r7, #0]
    c11a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    c11c:	79fb      	ldrb	r3, [r7, #7]
    c11e:	2b01      	cmp	r3, #1
    c120:	d009      	beq.n	c136 <usbdc_register_handler+0x26>
    c122:	2b02      	cmp	r3, #2
    c124:	d00c      	beq.n	c140 <usbdc_register_handler+0x30>
    c126:	2b00      	cmp	r3, #0
    c128:	d000      	beq.n	c12c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    c12a:	e00e      	b.n	c14a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c12c:	6839      	ldr	r1, [r7, #0]
    c12e:	4809      	ldr	r0, [pc, #36]	; (c154 <usbdc_register_handler+0x44>)
    c130:	4b09      	ldr	r3, [pc, #36]	; (c158 <usbdc_register_handler+0x48>)
    c132:	4798      	blx	r3
		break;
    c134:	e009      	b.n	c14a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c136:	6839      	ldr	r1, [r7, #0]
    c138:	4808      	ldr	r0, [pc, #32]	; (c15c <usbdc_register_handler+0x4c>)
    c13a:	4b07      	ldr	r3, [pc, #28]	; (c158 <usbdc_register_handler+0x48>)
    c13c:	4798      	blx	r3
		break;
    c13e:	e004      	b.n	c14a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c140:	6839      	ldr	r1, [r7, #0]
    c142:	4807      	ldr	r0, [pc, #28]	; (c160 <usbdc_register_handler+0x50>)
    c144:	4b04      	ldr	r3, [pc, #16]	; (c158 <usbdc_register_handler+0x48>)
    c146:	4798      	blx	r3
		break;
    c148:	bf00      	nop
	}
}
    c14a:	bf00      	nop
    c14c:	3708      	adds	r7, #8
    c14e:	46bd      	mov	sp, r7
    c150:	bd80      	pop	{r7, pc}
    c152:	bf00      	nop
    c154:	20000cb4 	.word	0x20000cb4
    c158:	00002ead 	.word	0x00002ead
    c15c:	20000cb8 	.word	0x20000cb8
    c160:	20000cbc 	.word	0x20000cbc

0000c164 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c164:	b580      	push	{r7, lr}
    c166:	b084      	sub	sp, #16
    c168:	af00      	add	r7, sp, #0
    c16a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    c16c:	687b      	ldr	r3, [r7, #4]
    c16e:	2b00      	cmp	r3, #0
    c170:	bf14      	ite	ne
    c172:	2301      	movne	r3, #1
    c174:	2300      	moveq	r3, #0
    c176:	b2db      	uxtb	r3, r3
    c178:	f240 3255 	movw	r2, #853	; 0x355
    c17c:	4910      	ldr	r1, [pc, #64]	; (c1c0 <usbdc_init+0x5c>)
    c17e:	4618      	mov	r0, r3
    c180:	4b10      	ldr	r3, [pc, #64]	; (c1c4 <usbdc_init+0x60>)
    c182:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    c184:	4b10      	ldr	r3, [pc, #64]	; (c1c8 <usbdc_init+0x64>)
    c186:	4798      	blx	r3
    c188:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    c18a:	68fb      	ldr	r3, [r7, #12]
    c18c:	2b00      	cmp	r3, #0
    c18e:	da01      	bge.n	c194 <usbdc_init+0x30>
		return rc;
    c190:	68fb      	ldr	r3, [r7, #12]
    c192:	e010      	b.n	c1b6 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c194:	2220      	movs	r2, #32
    c196:	2100      	movs	r1, #0
    c198:	480c      	ldr	r0, [pc, #48]	; (c1cc <usbdc_init+0x68>)
    c19a:	4b0d      	ldr	r3, [pc, #52]	; (c1d0 <usbdc_init+0x6c>)
    c19c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    c19e:	4a0b      	ldr	r2, [pc, #44]	; (c1cc <usbdc_init+0x68>)
    c1a0:	687b      	ldr	r3, [r7, #4]
    c1a2:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c1a4:	490b      	ldr	r1, [pc, #44]	; (c1d4 <usbdc_init+0x70>)
    c1a6:	2000      	movs	r0, #0
    c1a8:	4b0b      	ldr	r3, [pc, #44]	; (c1d8 <usbdc_init+0x74>)
    c1aa:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c1ac:	490b      	ldr	r1, [pc, #44]	; (c1dc <usbdc_init+0x78>)
    c1ae:	2001      	movs	r0, #1
    c1b0:	4b09      	ldr	r3, [pc, #36]	; (c1d8 <usbdc_init+0x74>)
    c1b2:	4798      	blx	r3

	return 0;
    c1b4:	2300      	movs	r3, #0
}
    c1b6:	4618      	mov	r0, r3
    c1b8:	3710      	adds	r7, #16
    c1ba:	46bd      	mov	sp, r7
    c1bc:	bd80      	pop	{r7, pc}
    c1be:	bf00      	nop
    c1c0:	0000d2f8 	.word	0x0000d2f8
    c1c4:	00002dd1 	.word	0x00002dd1
    c1c8:	0000287d 	.word	0x0000287d
    c1cc:	20000cb0 	.word	0x20000cb0
    c1d0:	0000cd59 	.word	0x0000cd59
    c1d4:	0000bec1 	.word	0x0000bec1
    c1d8:	00002929 	.word	0x00002929
    c1dc:	0000c09d 	.word	0x0000c09d

0000c1e0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    c1e0:	b580      	push	{r7, lr}
    c1e2:	b082      	sub	sp, #8
    c1e4:	af00      	add	r7, sp, #0
    c1e6:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    c1e8:	6879      	ldr	r1, [r7, #4]
    c1ea:	4803      	ldr	r0, [pc, #12]	; (c1f8 <usbdc_register_function+0x18>)
    c1ec:	4b03      	ldr	r3, [pc, #12]	; (c1fc <usbdc_register_function+0x1c>)
    c1ee:	4798      	blx	r3
}
    c1f0:	bf00      	nop
    c1f2:	3708      	adds	r7, #8
    c1f4:	46bd      	mov	sp, r7
    c1f6:	bd80      	pop	{r7, pc}
    c1f8:	20000cc0 	.word	0x20000cc0
    c1fc:	00002ead 	.word	0x00002ead

0000c200 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c200:	b580      	push	{r7, lr}
    c202:	b082      	sub	sp, #8
    c204:	af00      	add	r7, sp, #0
    c206:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    c208:	4b0f      	ldr	r3, [pc, #60]	; (c248 <usbdc_start+0x48>)
    c20a:	7e9b      	ldrb	r3, [r3, #26]
    c20c:	2b00      	cmp	r3, #0
    c20e:	d002      	beq.n	c216 <usbdc_start+0x16>
		return ERR_BUSY;
    c210:	f06f 0303 	mvn.w	r3, #3
    c214:	e013      	b.n	c23e <usbdc_start+0x3e>
	}

	if (desces) {
    c216:	687b      	ldr	r3, [r7, #4]
    c218:	2b00      	cmp	r3, #0
    c21a:	d00e      	beq.n	c23a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    c21c:	4a0a      	ldr	r2, [pc, #40]	; (c248 <usbdc_start+0x48>)
    c21e:	687b      	ldr	r3, [r7, #4]
    c220:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c222:	687b      	ldr	r3, [r7, #4]
    c224:	681b      	ldr	r3, [r3, #0]
    c226:	79da      	ldrb	r2, [r3, #7]
    c228:	4b07      	ldr	r3, [pc, #28]	; (c248 <usbdc_start+0x48>)
    c22a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c22c:	4b06      	ldr	r3, [pc, #24]	; (c248 <usbdc_start+0x48>)
    c22e:	2201      	movs	r2, #1
    c230:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c232:	4b06      	ldr	r3, [pc, #24]	; (c24c <usbdc_start+0x4c>)
    c234:	4798      	blx	r3
	return ERR_NONE;
    c236:	2300      	movs	r3, #0
    c238:	e001      	b.n	c23e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    c23a:	f06f 0308 	mvn.w	r3, #8
}
    c23e:	4618      	mov	r0, r3
    c240:	3708      	adds	r7, #8
    c242:	46bd      	mov	sp, r7
    c244:	bd80      	pop	{r7, pc}
    c246:	bf00      	nop
    c248:	20000cb0 	.word	0x20000cb0
    c24c:	0000294d 	.word	0x0000294d

0000c250 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    c250:	b580      	push	{r7, lr}
    c252:	af00      	add	r7, sp, #0
	usb_d_attach();
    c254:	4b01      	ldr	r3, [pc, #4]	; (c25c <usbdc_attach+0xc>)
    c256:	4798      	blx	r3
}
    c258:	bf00      	nop
    c25a:	bd80      	pop	{r7, pc}
    c25c:	00002961 	.word	0x00002961

0000c260 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    c260:	b480      	push	{r7}
    c262:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    c264:	4b03      	ldr	r3, [pc, #12]	; (c274 <usbdc_get_ctrl_buffer+0x14>)
    c266:	695b      	ldr	r3, [r3, #20]
}
    c268:	4618      	mov	r0, r3
    c26a:	46bd      	mov	sp, r7
    c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c270:	4770      	bx	lr
    c272:	bf00      	nop
    c274:	20000cb0 	.word	0x20000cb0

0000c278 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    c278:	b480      	push	{r7}
    c27a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    c27c:	4b07      	ldr	r3, [pc, #28]	; (c29c <usbdc_get_state+0x24>)
    c27e:	7e9b      	ldrb	r3, [r3, #26]
    c280:	f003 0310 	and.w	r3, r3, #16
    c284:	2b00      	cmp	r3, #0
    c286:	d001      	beq.n	c28c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    c288:	2310      	movs	r3, #16
    c28a:	e001      	b.n	c290 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    c28c:	4b03      	ldr	r3, [pc, #12]	; (c29c <usbdc_get_state+0x24>)
    c28e:	7e9b      	ldrb	r3, [r3, #26]
}
    c290:	4618      	mov	r0, r3
    c292:	46bd      	mov	sp, r7
    c294:	f85d 7b04 	ldr.w	r7, [sp], #4
    c298:	4770      	bx	lr
    c29a:	bf00      	nop
    c29c:	20000cb0 	.word	0x20000cb0

0000c2a0 <usb_get_u16>:
{
    c2a0:	b480      	push	{r7}
    c2a2:	b083      	sub	sp, #12
    c2a4:	af00      	add	r7, sp, #0
    c2a6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c2a8:	687b      	ldr	r3, [r7, #4]
    c2aa:	781b      	ldrb	r3, [r3, #0]
    c2ac:	b29a      	uxth	r2, r3
    c2ae:	687b      	ldr	r3, [r7, #4]
    c2b0:	3301      	adds	r3, #1
    c2b2:	781b      	ldrb	r3, [r3, #0]
    c2b4:	b29b      	uxth	r3, r3
    c2b6:	021b      	lsls	r3, r3, #8
    c2b8:	b29b      	uxth	r3, r3
    c2ba:	4413      	add	r3, r2
    c2bc:	b29b      	uxth	r3, r3
}
    c2be:	4618      	mov	r0, r3
    c2c0:	370c      	adds	r7, #12
    c2c2:	46bd      	mov	sp, r7
    c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2c8:	4770      	bx	lr

0000c2ca <usb_desc_len>:
{
    c2ca:	b480      	push	{r7}
    c2cc:	b083      	sub	sp, #12
    c2ce:	af00      	add	r7, sp, #0
    c2d0:	6078      	str	r0, [r7, #4]
	return desc[0];
    c2d2:	687b      	ldr	r3, [r7, #4]
    c2d4:	781b      	ldrb	r3, [r3, #0]
}
    c2d6:	4618      	mov	r0, r3
    c2d8:	370c      	adds	r7, #12
    c2da:	46bd      	mov	sp, r7
    c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2e0:	4770      	bx	lr

0000c2e2 <usb_desc_type>:
{
    c2e2:	b480      	push	{r7}
    c2e4:	b083      	sub	sp, #12
    c2e6:	af00      	add	r7, sp, #0
    c2e8:	6078      	str	r0, [r7, #4]
	return desc[1];
    c2ea:	687b      	ldr	r3, [r7, #4]
    c2ec:	3301      	adds	r3, #1
    c2ee:	781b      	ldrb	r3, [r3, #0]
}
    c2f0:	4618      	mov	r0, r3
    c2f2:	370c      	adds	r7, #12
    c2f4:	46bd      	mov	sp, r7
    c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2fa:	4770      	bx	lr

0000c2fc <usb_desc_next>:
{
    c2fc:	b580      	push	{r7, lr}
    c2fe:	b082      	sub	sp, #8
    c300:	af00      	add	r7, sp, #0
    c302:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c304:	6878      	ldr	r0, [r7, #4]
    c306:	4b05      	ldr	r3, [pc, #20]	; (c31c <usb_desc_next+0x20>)
    c308:	4798      	blx	r3
    c30a:	4603      	mov	r3, r0
    c30c:	461a      	mov	r2, r3
    c30e:	687b      	ldr	r3, [r7, #4]
    c310:	4413      	add	r3, r2
}
    c312:	4618      	mov	r0, r3
    c314:	3708      	adds	r7, #8
    c316:	46bd      	mov	sp, r7
    c318:	bd80      	pop	{r7, pc}
    c31a:	bf00      	nop
    c31c:	0000c2cb 	.word	0x0000c2cb

0000c320 <usb_cfg_desc_total_len>:
{
    c320:	b580      	push	{r7, lr}
    c322:	b082      	sub	sp, #8
    c324:	af00      	add	r7, sp, #0
    c326:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c328:	687b      	ldr	r3, [r7, #4]
    c32a:	3302      	adds	r3, #2
    c32c:	4618      	mov	r0, r3
    c32e:	4b03      	ldr	r3, [pc, #12]	; (c33c <usb_cfg_desc_total_len+0x1c>)
    c330:	4798      	blx	r3
    c332:	4603      	mov	r3, r0
}
    c334:	4618      	mov	r0, r3
    c336:	3708      	adds	r7, #8
    c338:	46bd      	mov	sp, r7
    c33a:	bd80      	pop	{r7, pc}
    c33c:	0000c2a1 	.word	0x0000c2a1

0000c340 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    c340:	b580      	push	{r7, lr}
    c342:	b082      	sub	sp, #8
    c344:	af00      	add	r7, sp, #0
    c346:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c348:	6878      	ldr	r0, [r7, #4]
    c34a:	4b05      	ldr	r3, [pc, #20]	; (c360 <usb_cfg_desc_next+0x20>)
    c34c:	4798      	blx	r3
    c34e:	4603      	mov	r3, r0
    c350:	461a      	mov	r2, r3
    c352:	687b      	ldr	r3, [r7, #4]
    c354:	4413      	add	r3, r2
}
    c356:	4618      	mov	r0, r3
    c358:	3708      	adds	r7, #8
    c35a:	46bd      	mov	sp, r7
    c35c:	bd80      	pop	{r7, pc}
    c35e:	bf00      	nop
    c360:	0000c321 	.word	0x0000c321

0000c364 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    c364:	b580      	push	{r7, lr}
    c366:	b084      	sub	sp, #16
    c368:	af00      	add	r7, sp, #0
    c36a:	60f8      	str	r0, [r7, #12]
    c36c:	60b9      	str	r1, [r7, #8]
    c36e:	4613      	mov	r3, r2
    c370:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c372:	e015      	b.n	c3a0 <usb_find_desc+0x3c>
		_desc_len_check();
    c374:	68f8      	ldr	r0, [r7, #12]
    c376:	4b0f      	ldr	r3, [pc, #60]	; (c3b4 <usb_find_desc+0x50>)
    c378:	4798      	blx	r3
    c37a:	4603      	mov	r3, r0
    c37c:	2b01      	cmp	r3, #1
    c37e:	d801      	bhi.n	c384 <usb_find_desc+0x20>
    c380:	2300      	movs	r3, #0
    c382:	e012      	b.n	c3aa <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    c384:	68f8      	ldr	r0, [r7, #12]
    c386:	4b0c      	ldr	r3, [pc, #48]	; (c3b8 <usb_find_desc+0x54>)
    c388:	4798      	blx	r3
    c38a:	4603      	mov	r3, r0
    c38c:	461a      	mov	r2, r3
    c38e:	79fb      	ldrb	r3, [r7, #7]
    c390:	4293      	cmp	r3, r2
    c392:	d101      	bne.n	c398 <usb_find_desc+0x34>
			return desc;
    c394:	68fb      	ldr	r3, [r7, #12]
    c396:	e008      	b.n	c3aa <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    c398:	68f8      	ldr	r0, [r7, #12]
    c39a:	4b08      	ldr	r3, [pc, #32]	; (c3bc <usb_find_desc+0x58>)
    c39c:	4798      	blx	r3
    c39e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c3a0:	68fa      	ldr	r2, [r7, #12]
    c3a2:	68bb      	ldr	r3, [r7, #8]
    c3a4:	429a      	cmp	r2, r3
    c3a6:	d3e5      	bcc.n	c374 <usb_find_desc+0x10>
	}
	return NULL;
    c3a8:	2300      	movs	r3, #0
}
    c3aa:	4618      	mov	r0, r3
    c3ac:	3710      	adds	r7, #16
    c3ae:	46bd      	mov	sp, r7
    c3b0:	bd80      	pop	{r7, pc}
    c3b2:	bf00      	nop
    c3b4:	0000c2cb 	.word	0x0000c2cb
    c3b8:	0000c2e3 	.word	0x0000c2e3
    c3bc:	0000c2fd 	.word	0x0000c2fd

0000c3c0 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    c3c0:	b580      	push	{r7, lr}
    c3c2:	b082      	sub	sp, #8
    c3c4:	af00      	add	r7, sp, #0
    c3c6:	6078      	str	r0, [r7, #4]
    c3c8:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c3ca:	e019      	b.n	c400 <usb_find_ep_desc+0x40>
		_desc_len_check();
    c3cc:	6878      	ldr	r0, [r7, #4]
    c3ce:	4b12      	ldr	r3, [pc, #72]	; (c418 <usb_find_ep_desc+0x58>)
    c3d0:	4798      	blx	r3
    c3d2:	4603      	mov	r3, r0
    c3d4:	2b01      	cmp	r3, #1
    c3d6:	d801      	bhi.n	c3dc <usb_find_ep_desc+0x1c>
    c3d8:	2300      	movs	r3, #0
    c3da:	e018      	b.n	c40e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c3dc:	6878      	ldr	r0, [r7, #4]
    c3de:	4b0f      	ldr	r3, [pc, #60]	; (c41c <usb_find_ep_desc+0x5c>)
    c3e0:	4798      	blx	r3
    c3e2:	4603      	mov	r3, r0
    c3e4:	2b04      	cmp	r3, #4
    c3e6:	d010      	beq.n	c40a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c3e8:	6878      	ldr	r0, [r7, #4]
    c3ea:	4b0c      	ldr	r3, [pc, #48]	; (c41c <usb_find_ep_desc+0x5c>)
    c3ec:	4798      	blx	r3
    c3ee:	4603      	mov	r3, r0
    c3f0:	2b05      	cmp	r3, #5
    c3f2:	d101      	bne.n	c3f8 <usb_find_ep_desc+0x38>
			return desc;
    c3f4:	687b      	ldr	r3, [r7, #4]
    c3f6:	e00a      	b.n	c40e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    c3f8:	6878      	ldr	r0, [r7, #4]
    c3fa:	4b09      	ldr	r3, [pc, #36]	; (c420 <usb_find_ep_desc+0x60>)
    c3fc:	4798      	blx	r3
    c3fe:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    c400:	687a      	ldr	r2, [r7, #4]
    c402:	683b      	ldr	r3, [r7, #0]
    c404:	429a      	cmp	r2, r3
    c406:	d3e1      	bcc.n	c3cc <usb_find_ep_desc+0xc>
    c408:	e000      	b.n	c40c <usb_find_ep_desc+0x4c>
			break;
    c40a:	bf00      	nop
	}
	return NULL;
    c40c:	2300      	movs	r3, #0
}
    c40e:	4618      	mov	r0, r3
    c410:	3708      	adds	r7, #8
    c412:	46bd      	mov	sp, r7
    c414:	bd80      	pop	{r7, pc}
    c416:	bf00      	nop
    c418:	0000c2cb 	.word	0x0000c2cb
    c41c:	0000c2e3 	.word	0x0000c2e3
    c420:	0000c2fd 	.word	0x0000c2fd

0000c424 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c424:	b580      	push	{r7, lr}
    c426:	b084      	sub	sp, #16
    c428:	af00      	add	r7, sp, #0
    c42a:	60f8      	str	r0, [r7, #12]
    c42c:	60b9      	str	r1, [r7, #8]
    c42e:	4613      	mov	r3, r2
    c430:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    c432:	2202      	movs	r2, #2
    c434:	68b9      	ldr	r1, [r7, #8]
    c436:	68f8      	ldr	r0, [r7, #12]
    c438:	4b15      	ldr	r3, [pc, #84]	; (c490 <usb_find_cfg_desc+0x6c>)
    c43a:	4798      	blx	r3
    c43c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    c43e:	68fb      	ldr	r3, [r7, #12]
    c440:	2b00      	cmp	r3, #0
    c442:	d11a      	bne.n	c47a <usb_find_cfg_desc+0x56>
		return NULL;
    c444:	2300      	movs	r3, #0
    c446:	e01f      	b.n	c488 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    c448:	68f8      	ldr	r0, [r7, #12]
    c44a:	4b12      	ldr	r3, [pc, #72]	; (c494 <usb_find_cfg_desc+0x70>)
    c44c:	4798      	blx	r3
    c44e:	4603      	mov	r3, r0
    c450:	2b01      	cmp	r3, #1
    c452:	d801      	bhi.n	c458 <usb_find_cfg_desc+0x34>
    c454:	2300      	movs	r3, #0
    c456:	e017      	b.n	c488 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    c458:	68fb      	ldr	r3, [r7, #12]
    c45a:	3301      	adds	r3, #1
    c45c:	781b      	ldrb	r3, [r3, #0]
    c45e:	2b02      	cmp	r3, #2
    c460:	d110      	bne.n	c484 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    c462:	68fb      	ldr	r3, [r7, #12]
    c464:	3305      	adds	r3, #5
    c466:	781b      	ldrb	r3, [r3, #0]
    c468:	79fa      	ldrb	r2, [r7, #7]
    c46a:	429a      	cmp	r2, r3
    c46c:	d101      	bne.n	c472 <usb_find_cfg_desc+0x4e>
			return desc;
    c46e:	68fb      	ldr	r3, [r7, #12]
    c470:	e00a      	b.n	c488 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    c472:	68f8      	ldr	r0, [r7, #12]
    c474:	4b08      	ldr	r3, [pc, #32]	; (c498 <usb_find_cfg_desc+0x74>)
    c476:	4798      	blx	r3
    c478:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c47a:	68fa      	ldr	r2, [r7, #12]
    c47c:	68bb      	ldr	r3, [r7, #8]
    c47e:	429a      	cmp	r2, r3
    c480:	d3e2      	bcc.n	c448 <usb_find_cfg_desc+0x24>
    c482:	e000      	b.n	c486 <usb_find_cfg_desc+0x62>
			break;
    c484:	bf00      	nop
	}
	return NULL;
    c486:	2300      	movs	r3, #0
}
    c488:	4618      	mov	r0, r3
    c48a:	3710      	adds	r7, #16
    c48c:	46bd      	mov	sp, r7
    c48e:	bd80      	pop	{r7, pc}
    c490:	0000c365 	.word	0x0000c365
    c494:	0000c2cb 	.word	0x0000c2cb
    c498:	0000c341 	.word	0x0000c341

0000c49c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    c49c:	b580      	push	{r7, lr}
    c49e:	b086      	sub	sp, #24
    c4a0:	af00      	add	r7, sp, #0
    c4a2:	60f8      	str	r0, [r7, #12]
    c4a4:	60b9      	str	r1, [r7, #8]
    c4a6:	4613      	mov	r3, r2
    c4a8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c4aa:	2300      	movs	r3, #0
    c4ac:	75fb      	strb	r3, [r7, #23]
    c4ae:	e020      	b.n	c4f2 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    c4b0:	2203      	movs	r2, #3
    c4b2:	68b9      	ldr	r1, [r7, #8]
    c4b4:	68f8      	ldr	r0, [r7, #12]
    c4b6:	4b13      	ldr	r3, [pc, #76]	; (c504 <usb_find_str_desc+0x68>)
    c4b8:	4798      	blx	r3
    c4ba:	60f8      	str	r0, [r7, #12]
		if (desc) {
    c4bc:	68fb      	ldr	r3, [r7, #12]
    c4be:	2b00      	cmp	r3, #0
    c4c0:	d015      	beq.n	c4ee <usb_find_str_desc+0x52>
			_desc_len_check();
    c4c2:	68f8      	ldr	r0, [r7, #12]
    c4c4:	4b10      	ldr	r3, [pc, #64]	; (c508 <usb_find_str_desc+0x6c>)
    c4c6:	4798      	blx	r3
    c4c8:	4603      	mov	r3, r0
    c4ca:	2b01      	cmp	r3, #1
    c4cc:	d801      	bhi.n	c4d2 <usb_find_str_desc+0x36>
    c4ce:	2300      	movs	r3, #0
    c4d0:	e014      	b.n	c4fc <usb_find_str_desc+0x60>
			if (i == str_index) {
    c4d2:	7dfa      	ldrb	r2, [r7, #23]
    c4d4:	79fb      	ldrb	r3, [r7, #7]
    c4d6:	429a      	cmp	r2, r3
    c4d8:	d101      	bne.n	c4de <usb_find_str_desc+0x42>
				return desc;
    c4da:	68fb      	ldr	r3, [r7, #12]
    c4dc:	e00e      	b.n	c4fc <usb_find_str_desc+0x60>
			}
			i++;
    c4de:	7dfb      	ldrb	r3, [r7, #23]
    c4e0:	3301      	adds	r3, #1
    c4e2:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    c4e4:	68f8      	ldr	r0, [r7, #12]
    c4e6:	4b09      	ldr	r3, [pc, #36]	; (c50c <usb_find_str_desc+0x70>)
    c4e8:	4798      	blx	r3
    c4ea:	60f8      	str	r0, [r7, #12]
    c4ec:	e001      	b.n	c4f2 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    c4ee:	2300      	movs	r3, #0
    c4f0:	e004      	b.n	c4fc <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    c4f2:	68fa      	ldr	r2, [r7, #12]
    c4f4:	68bb      	ldr	r3, [r7, #8]
    c4f6:	429a      	cmp	r2, r3
    c4f8:	d3da      	bcc.n	c4b0 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    c4fa:	2300      	movs	r3, #0
}
    c4fc:	4618      	mov	r0, r3
    c4fe:	3718      	adds	r7, #24
    c500:	46bd      	mov	sp, r7
    c502:	bd80      	pop	{r7, pc}
    c504:	0000c365 	.word	0x0000c365
    c508:	0000c2cb 	.word	0x0000c2cb
    c50c:	0000c2fd 	.word	0x0000c2fd

0000c510 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    c510:	b480      	push	{r7}
    c512:	b083      	sub	sp, #12
    c514:	af00      	add	r7, sp, #0
    c516:	6078      	str	r0, [r7, #4]
    c518:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    c51a:	687b      	ldr	r3, [r7, #4]
    c51c:	683a      	ldr	r2, [r7, #0]
    c51e:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    c520:	687b      	ldr	r3, [r7, #4]
    c522:	4618      	mov	r0, r3
    c524:	370c      	adds	r7, #12
    c526:	46bd      	mov	sp, r7
    c528:	bc80      	pop	{r7}
    c52a:	4770      	bx	lr

0000c52c <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    c52c:	b480      	push	{r7}
    c52e:	b083      	sub	sp, #12
    c530:	af00      	add	r7, sp, #0
    c532:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    c534:	687b      	ldr	r3, [r7, #4]
    c536:	4618      	mov	r0, r3
    c538:	370c      	adds	r7, #12
    c53a:	46bd      	mov	sp, r7
    c53c:	bc80      	pop	{r7}
    c53e:	4770      	bx	lr

0000c540 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    c540:	b580      	push	{r7, lr}
    c542:	b082      	sub	sp, #8
    c544:	af00      	add	r7, sp, #0
    c546:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    c548:	687b      	ldr	r3, [r7, #4]
    c54a:	4a23      	ldr	r2, [pc, #140]	; (c5d8 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    c54c:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    c54e:	687b      	ldr	r3, [r7, #4]
    c550:	4a21      	ldr	r2, [pc, #132]	; (c5d8 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    c552:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    c554:	687b      	ldr	r3, [r7, #4]
    c556:	691a      	ldr	r2, [r3, #16]
    c558:	687b      	ldr	r3, [r7, #4]
    c55a:	330c      	adds	r3, #12
    c55c:	4619      	mov	r1, r3
    c55e:	4610      	mov	r0, r2
    c560:	4b1e      	ldr	r3, [pc, #120]	; (c5dc <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    c562:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    c564:	687b      	ldr	r3, [r7, #4]
    c566:	691b      	ldr	r3, [r3, #16]
    c568:	4618      	mov	r0, r3
    c56a:	4b1d      	ldr	r3, [pc, #116]	; (c5e0 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    c56c:	4798      	blx	r3
    c56e:	4603      	mov	r3, r0
    c570:	b2da      	uxtb	r2, r3
    c572:	687b      	ldr	r3, [r7, #4]
    c574:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    c576:	687b      	ldr	r3, [r7, #4]
    c578:	7d1b      	ldrb	r3, [r3, #20]
    c57a:	2b00      	cmp	r3, #0
    c57c:	bf0c      	ite	eq
    c57e:	2301      	moveq	r3, #1
    c580:	2300      	movne	r3, #0
    c582:	b2da      	uxtb	r2, r3
    c584:	687b      	ldr	r3, [r7, #4]
    c586:	725a      	strb	r2, [r3, #9]
	if (isOK)
    c588:	687b      	ldr	r3, [r7, #4]
    c58a:	7a5b      	ldrb	r3, [r3, #9]
    c58c:	b2db      	uxtb	r3, r3
    c58e:	2b00      	cmp	r3, #0
    c590:	d116      	bne.n	c5c0 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    c592:	687b      	ldr	r3, [r7, #4]
    c594:	691b      	ldr	r3, [r3, #16]
    c596:	4618      	mov	r0, r3
    c598:	4b12      	ldr	r3, [pc, #72]	; (c5e4 <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    c59a:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    c59c:	687b      	ldr	r3, [r7, #4]
    c59e:	691b      	ldr	r3, [r3, #16]
    c5a0:	4618      	mov	r0, r3
    c5a2:	4b0f      	ldr	r3, [pc, #60]	; (c5e0 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    c5a4:	4798      	blx	r3
    c5a6:	4603      	mov	r3, r0
    c5a8:	b2da      	uxtb	r2, r3
    c5aa:	687b      	ldr	r3, [r7, #4]
    c5ac:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    c5ae:	687b      	ldr	r3, [r7, #4]
    c5b0:	7d1b      	ldrb	r3, [r3, #20]
    c5b2:	2b00      	cmp	r3, #0
    c5b4:	bf0c      	ite	eq
    c5b6:	2301      	moveq	r3, #1
    c5b8:	2300      	movne	r3, #0
    c5ba:	b2da      	uxtb	r2, r3
    c5bc:	687b      	ldr	r3, [r7, #4]
    c5be:	725a      	strb	r2, [r3, #9]
	}
	
	initiated=isOK;
    c5c0:	687b      	ldr	r3, [r7, #4]
    c5c2:	7a5b      	ldrb	r3, [r3, #9]
    c5c4:	b2da      	uxtb	r2, r3
    c5c6:	687b      	ldr	r3, [r7, #4]
    c5c8:	721a      	strb	r2, [r3, #8]
	return isOK;
    c5ca:	687b      	ldr	r3, [r7, #4]
    c5cc:	7a5b      	ldrb	r3, [r3, #9]
    c5ce:	b2db      	uxtb	r3, r3
	
}
    c5d0:	4618      	mov	r0, r3
    c5d2:	3708      	adds	r7, #8
    c5d4:	46bd      	mov	sp, r7
    c5d6:	bd80      	pop	{r7, pc}
    c5d8:	20000ce8 	.word	0x20000ce8
    c5dc:	00001f47 	.word	0x00001f47
    c5e0:	00001ecd 	.word	0x00001ecd
    c5e4:	00001eed 	.word	0x00001eed

0000c5e8 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    c5e8:	b580      	push	{r7, lr}
    c5ea:	b082      	sub	sp, #8
    c5ec:	af00      	add	r7, sp, #0
    c5ee:	6078      	str	r0, [r7, #4]
    c5f0:	460b      	mov	r3, r1
    c5f2:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    c5f4:	687b      	ldr	r3, [r7, #4]
    c5f6:	691b      	ldr	r3, [r3, #16]
    c5f8:	78fa      	ldrb	r2, [r7, #3]
    c5fa:	b211      	sxth	r1, r2
    c5fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c600:	4618      	mov	r0, r3
    c602:	4b03      	ldr	r3, [pc, #12]	; (c610 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    c604:	4798      	blx	r3
    c606:	4603      	mov	r3, r0
}
    c608:	4618      	mov	r0, r3
    c60a:	3708      	adds	r7, #8
    c60c:	46bd      	mov	sp, r7
    c60e:	bd80      	pop	{r7, pc}
    c610:	00001f0d 	.word	0x00001f0d

0000c614 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    c614:	b580      	push	{r7, lr}
    c616:	b086      	sub	sp, #24
    c618:	af00      	add	r7, sp, #0
    c61a:	60f8      	str	r0, [r7, #12]
    c61c:	60b9      	str	r1, [r7, #8]
    c61e:	4613      	mov	r3, r2
    c620:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    c622:	68fb      	ldr	r3, [r7, #12]
    c624:	68db      	ldr	r3, [r3, #12]
    c626:	88fa      	ldrh	r2, [r7, #6]
    c628:	68b9      	ldr	r1, [r7, #8]
    c62a:	4618      	mov	r0, r3
    c62c:	4b03      	ldr	r3, [pc, #12]	; (c63c <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    c62e:	4798      	blx	r3
    c630:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    c632:	697b      	ldr	r3, [r7, #20]
}
    c634:	4618      	mov	r0, r3
    c636:	3718      	adds	r7, #24
    c638:	46bd      	mov	sp, r7
    c63a:	bd80      	pop	{r7, pc}
    c63c:	0000cb01 	.word	0x0000cb01

0000c640 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    c640:	b580      	push	{r7, lr}
    c642:	b086      	sub	sp, #24
    c644:	af00      	add	r7, sp, #0
    c646:	60f8      	str	r0, [r7, #12]
    c648:	60b9      	str	r1, [r7, #8]
    c64a:	4613      	mov	r3, r2
    c64c:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    c64e:	68fb      	ldr	r3, [r7, #12]
    c650:	68db      	ldr	r3, [r3, #12]
    c652:	88fa      	ldrh	r2, [r7, #6]
    c654:	68b9      	ldr	r1, [r7, #8]
    c656:	4618      	mov	r0, r3
    c658:	4b03      	ldr	r3, [pc, #12]	; (c668 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    c65a:	4798      	blx	r3
    c65c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    c65e:	697b      	ldr	r3, [r7, #20]
}
    c660:	4618      	mov	r0, r3
    c662:	3718      	adds	r7, #24
    c664:	46bd      	mov	sp, r7
    c666:	bd80      	pop	{r7, pc}
    c668:	0000cb51 	.word	0x0000cb51

0000c66c <_Z41__static_initialization_and_destruction_0ii>:
	__enable_irq();
}
void	I2C_Sync_Class::Irq_Disable(void){
	__DMB();
	__disable_irq();
}
    c66c:	b580      	push	{r7, lr}
    c66e:	b082      	sub	sp, #8
    c670:	af00      	add	r7, sp, #0
    c672:	6078      	str	r0, [r7, #4]
    c674:	6039      	str	r1, [r7, #0]
    c676:	687b      	ldr	r3, [r7, #4]
    c678:	2b01      	cmp	r3, #1
    c67a:	d10d      	bne.n	c698 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    c67c:	683b      	ldr	r3, [r7, #0]
    c67e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c682:	4293      	cmp	r3, r2
    c684:	d108      	bne.n	c698 <_Z41__static_initialization_and_destruction_0ii+0x2c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    c686:	4906      	ldr	r1, [pc, #24]	; (c6a0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    c688:	4806      	ldr	r0, [pc, #24]	; (c6a4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    c68a:	4b07      	ldr	r3, [pc, #28]	; (c6a8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    c68c:	4798      	blx	r3
    c68e:	4a07      	ldr	r2, [pc, #28]	; (c6ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
    c690:	4907      	ldr	r1, [pc, #28]	; (c6b0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    c692:	4804      	ldr	r0, [pc, #16]	; (c6a4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    c694:	4b07      	ldr	r3, [pc, #28]	; (c6b4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    c696:	4798      	blx	r3
    c698:	bf00      	nop
    c69a:	3708      	adds	r7, #8
    c69c:	46bd      	mov	sp, r7
    c69e:	bd80      	pop	{r7, pc}
    c6a0:	20000eb0 	.word	0x20000eb0
    c6a4:	20000cd0 	.word	0x20000cd0
    c6a8:	0000c511 	.word	0x0000c511
    c6ac:	20000000 	.word	0x20000000
    c6b0:	0000c52d 	.word	0x0000c52d
    c6b4:	0000cba1 	.word	0x0000cba1

0000c6b8 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev>:
    c6b8:	b580      	push	{r7, lr}
    c6ba:	af00      	add	r7, sp, #0
    c6bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c6c0:	2001      	movs	r0, #1
    c6c2:	4b01      	ldr	r3, [pc, #4]	; (c6c8 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev+0x10>)
    c6c4:	4798      	blx	r3
    c6c6:	bd80      	pop	{r7, pc}
    c6c8:	0000c66d 	.word	0x0000c66d

0000c6cc <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    c6cc:	b480      	push	{r7}
    c6ce:	b083      	sub	sp, #12
    c6d0:	af00      	add	r7, sp, #0
    c6d2:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    c6d4:	687b      	ldr	r3, [r7, #4]
    c6d6:	4618      	mov	r0, r3
    c6d8:	370c      	adds	r7, #12
    c6da:	46bd      	mov	sp, r7
    c6dc:	bc80      	pop	{r7}
    c6de:	4770      	bx	lr

0000c6e0 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    c6e0:	b480      	push	{r7}
    c6e2:	b083      	sub	sp, #12
    c6e4:	af00      	add	r7, sp, #0
    c6e6:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    c6e8:	687b      	ldr	r3, [r7, #4]
    c6ea:	4618      	mov	r0, r3
    c6ec:	370c      	adds	r7, #12
    c6ee:	46bd      	mov	sp, r7
    c6f0:	bc80      	pop	{r7}
    c6f2:	4770      	bx	lr

0000c6f4 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    c6f4:	b480      	push	{r7}
    c6f6:	b085      	sub	sp, #20
    c6f8:	af00      	add	r7, sp, #0
    c6fa:	60f8      	str	r0, [r7, #12]
    c6fc:	460b      	mov	r3, r1
    c6fe:	607a      	str	r2, [r7, #4]
    c700:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    c702:	687b      	ldr	r3, [r7, #4]
    c704:	681a      	ldr	r2, [r3, #0]
    c706:	68fb      	ldr	r3, [r7, #12]
    c708:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    c70a:	687b      	ldr	r3, [r7, #4]
    c70c:	685a      	ldr	r2, [r3, #4]
    c70e:	68fb      	ldr	r3, [r7, #12]
    c710:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    c712:	68fb      	ldr	r3, [r7, #12]
    c714:	7afa      	ldrb	r2, [r7, #11]
    c716:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    c718:	68fb      	ldr	r3, [r7, #12]
    c71a:	687a      	ldr	r2, [r7, #4]
    c71c:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    c71e:	68fb      	ldr	r3, [r7, #12]
    c720:	68db      	ldr	r3, [r3, #12]
    c722:	7a5b      	ldrb	r3, [r3, #9]
    c724:	b2da      	uxtb	r2, r3
    c726:	68fb      	ldr	r3, [r7, #12]
    c728:	719a      	strb	r2, [r3, #6]
	return isOK;
    c72a:	68fb      	ldr	r3, [r7, #12]
    c72c:	799b      	ldrb	r3, [r3, #6]
    c72e:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    c730:	4618      	mov	r0, r3
    c732:	3714      	adds	r7, #20
    c734:	46bd      	mov	sp, r7
    c736:	bc80      	pop	{r7}
    c738:	4770      	bx	lr

0000c73a <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    c73a:	b480      	push	{r7}
    c73c:	b083      	sub	sp, #12
    c73e:	af00      	add	r7, sp, #0
    c740:	6078      	str	r0, [r7, #4]
    c742:	460b      	mov	r3, r1
    c744:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    c746:	78fb      	ldrb	r3, [r7, #3]
    c748:	f003 0307 	and.w	r3, r3, #7
    c74c:	b2db      	uxtb	r3, r3
}
    c74e:	4618      	mov	r0, r3
    c750:	370c      	adds	r7, #12
    c752:	46bd      	mov	sp, r7
    c754:	bc80      	pop	{r7}
    c756:	4770      	bx	lr

0000c758 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    c758:	b480      	push	{r7}
    c75a:	b083      	sub	sp, #12
    c75c:	af00      	add	r7, sp, #0
    c75e:	6078      	str	r0, [r7, #4]
    c760:	4608      	mov	r0, r1
    c762:	4611      	mov	r1, r2
    c764:	461a      	mov	r2, r3
    c766:	4603      	mov	r3, r0
    c768:	70fb      	strb	r3, [r7, #3]
    c76a:	460b      	mov	r3, r1
    c76c:	70bb      	strb	r3, [r7, #2]
    c76e:	4613      	mov	r3, r2
    c770:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    c772:	78fb      	ldrb	r3, [r7, #3]
    c774:	2b07      	cmp	r3, #7
    c776:	dc01      	bgt.n	c77c <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    c778:	78bb      	ldrb	r3, [r7, #2]
    c77a:	e000      	b.n	c77e <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    c77c:	787b      	ldrb	r3, [r7, #1]
}
    c77e:	4618      	mov	r0, r3
    c780:	370c      	adds	r7, #12
    c782:	46bd      	mov	sp, r7
    c784:	bc80      	pop	{r7}
    c786:	4770      	bx	lr

0000c788 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    c788:	b580      	push	{r7, lr}
    c78a:	b082      	sub	sp, #8
    c78c:	af00      	add	r7, sp, #0
    c78e:	6078      	str	r0, [r7, #4]
    c790:	460b      	mov	r3, r1
    c792:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    c794:	687b      	ldr	r3, [r7, #4]
    c796:	68da      	ldr	r2, [r3, #12]
    c798:	687b      	ldr	r3, [r7, #4]
    c79a:	7a1b      	ldrb	r3, [r3, #8]
    c79c:	4619      	mov	r1, r3
    c79e:	4610      	mov	r0, r2
    c7a0:	4b0a      	ldr	r3, [pc, #40]	; (c7cc <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    c7a2:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    c7a4:	687b      	ldr	r3, [r7, #4]
    c7a6:	68db      	ldr	r3, [r3, #12]
    c7a8:	1cf9      	adds	r1, r7, #3
    c7aa:	2201      	movs	r2, #1
    c7ac:	4618      	mov	r0, r3
    c7ae:	4b08      	ldr	r3, [pc, #32]	; (c7d0 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    c7b0:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    c7b2:	687b      	ldr	r3, [r7, #4]
    c7b4:	68db      	ldr	r3, [r3, #12]
    c7b6:	6879      	ldr	r1, [r7, #4]
    c7b8:	2201      	movs	r2, #1
    c7ba:	4618      	mov	r0, r3
    c7bc:	4b05      	ldr	r3, [pc, #20]	; (c7d4 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    c7be:	4798      	blx	r3

	return registerValue;
    c7c0:	687b      	ldr	r3, [r7, #4]
    c7c2:	781b      	ldrb	r3, [r3, #0]
}
    c7c4:	4618      	mov	r0, r3
    c7c6:	3708      	adds	r7, #8
    c7c8:	46bd      	mov	sp, r7
    c7ca:	bd80      	pop	{r7, pc}
    c7cc:	0000c5e9 	.word	0x0000c5e9
    c7d0:	0000c615 	.word	0x0000c615
    c7d4:	0000c641 	.word	0x0000c641

0000c7d8 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    c7d8:	b580      	push	{r7, lr}
    c7da:	b084      	sub	sp, #16
    c7dc:	af00      	add	r7, sp, #0
    c7de:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    c7e0:	687b      	ldr	r3, [r7, #4]
    c7e2:	68da      	ldr	r2, [r3, #12]
    c7e4:	687b      	ldr	r3, [r7, #4]
    c7e6:	7a1b      	ldrb	r3, [r3, #8]
    c7e8:	4619      	mov	r1, r3
    c7ea:	4610      	mov	r0, r2
    c7ec:	4b06      	ldr	r3, [pc, #24]	; (c808 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    c7ee:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    c7f0:	2109      	movs	r1, #9
    c7f2:	6878      	ldr	r0, [r7, #4]
    c7f4:	4b05      	ldr	r3, [pc, #20]	; (c80c <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    c7f6:	4798      	blx	r3
    c7f8:	4603      	mov	r3, r0
    c7fa:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    c7fc:	7bfb      	ldrb	r3, [r7, #15]
}
    c7fe:	4618      	mov	r0, r3
    c800:	3710      	adds	r7, #16
    c802:	46bd      	mov	sp, r7
    c804:	bd80      	pop	{r7, pc}
    c806:	bf00      	nop
    c808:	0000c5e9 	.word	0x0000c5e9
    c80c:	0000c789 	.word	0x0000c789

0000c810 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    c810:	b580      	push	{r7, lr}
    c812:	b084      	sub	sp, #16
    c814:	af00      	add	r7, sp, #0
    c816:	6078      	str	r0, [r7, #4]
    c818:	460b      	mov	r3, r1
    c81a:	70fb      	strb	r3, [r7, #3]
    c81c:	4613      	mov	r3, r2
    c81e:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    c820:	687b      	ldr	r3, [r7, #4]
    c822:	68da      	ldr	r2, [r3, #12]
    c824:	687b      	ldr	r3, [r7, #4]
    c826:	7a1b      	ldrb	r3, [r3, #8]
    c828:	4619      	mov	r1, r3
    c82a:	4610      	mov	r0, r2
    c82c:	4b09      	ldr	r3, [pc, #36]	; (c854 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    c82e:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    c830:	78fb      	ldrb	r3, [r7, #3]
    c832:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    c834:	78bb      	ldrb	r3, [r7, #2]
    c836:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    c838:	687b      	ldr	r3, [r7, #4]
    c83a:	68db      	ldr	r3, [r3, #12]
    c83c:	f107 010c 	add.w	r1, r7, #12
    c840:	2202      	movs	r2, #2
    c842:	4618      	mov	r0, r3
    c844:	4b04      	ldr	r3, [pc, #16]	; (c858 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    c846:	4798      	blx	r3
    c848:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    c84a:	4618      	mov	r0, r3
    c84c:	3710      	adds	r7, #16
    c84e:	46bd      	mov	sp, r7
    c850:	bd80      	pop	{r7, pc}
    c852:	bf00      	nop
    c854:	0000c5e9 	.word	0x0000c5e9
    c858:	0000c615 	.word	0x0000c615

0000c85c <_ZN14MCP23008_Class12SetPortInputEh>:
	{
		pinMode(i,MCP23008_INPUT);
		pullUp(i,MCP23008_HIGH);
	}
}
void	MCP23008_Class::SetPortInput(uint8_t inputs){
    c85c:	b580      	push	{r7, lr}
    c85e:	b084      	sub	sp, #16
    c860:	af00      	add	r7, sp, #0
    c862:	6078      	str	r0, [r7, #4]
    c864:	460b      	mov	r3, r1
    c866:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
    c868:	78fb      	ldrb	r3, [r7, #3]
    c86a:	2b00      	cmp	r3, #0
    c86c:	dd23      	ble.n	c8b6 <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
    c86e:	2300      	movs	r3, #0
    c870:	73fb      	strb	r3, [r7, #15]
    c872:	7bfb      	ldrb	r3, [r7, #15]
    c874:	2b07      	cmp	r3, #7
    c876:	dc21      	bgt.n	c8bc <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
    c878:	78fa      	ldrb	r2, [r7, #3]
    c87a:	7bfb      	ldrb	r3, [r7, #15]
    c87c:	fa42 f303 	asr.w	r3, r2, r3
    c880:	f003 0301 	and.w	r3, r3, #1
    c884:	2b00      	cmp	r3, #0
    c886:	d00c      	beq.n	c8a2 <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
    c888:	7bfb      	ldrb	r3, [r7, #15]
    c88a:	2201      	movs	r2, #1
    c88c:	4619      	mov	r1, r3
    c88e:	6878      	ldr	r0, [r7, #4]
    c890:	4b0c      	ldr	r3, [pc, #48]	; (c8c4 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    c892:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
    c894:	7bfb      	ldrb	r3, [r7, #15]
    c896:	2201      	movs	r2, #1
    c898:	4619      	mov	r1, r3
    c89a:	6878      	ldr	r0, [r7, #4]
    c89c:	4b0a      	ldr	r3, [pc, #40]	; (c8c8 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
    c89e:	4798      	blx	r3
    c8a0:	e005      	b.n	c8ae <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
    c8a2:	7bfb      	ldrb	r3, [r7, #15]
    c8a4:	2200      	movs	r2, #0
    c8a6:	4619      	mov	r1, r3
    c8a8:	6878      	ldr	r0, [r7, #4]
    c8aa:	4b06      	ldr	r3, [pc, #24]	; (c8c4 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    c8ac:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
    c8ae:	7bfb      	ldrb	r3, [r7, #15]
    c8b0:	3301      	adds	r3, #1
    c8b2:	73fb      	strb	r3, [r7, #15]
    c8b4:	e7dd      	b.n	c872 <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
    c8b6:	6878      	ldr	r0, [r7, #4]
    c8b8:	4b04      	ldr	r3, [pc, #16]	; (c8cc <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
    c8ba:	4798      	blx	r3
	}
	
}
    c8bc:	bf00      	nop
    c8be:	3710      	adds	r7, #16
    c8c0:	46bd      	mov	sp, r7
    c8c2:	bd80      	pop	{r7, pc}
    c8c4:	0000c991 	.word	0x0000c991
    c8c8:	0000ca75 	.word	0x0000ca75
    c8cc:	0000c8d1 	.word	0x0000c8d1

0000c8d0 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
    c8d0:	b580      	push	{r7, lr}
    c8d2:	b084      	sub	sp, #16
    c8d4:	af00      	add	r7, sp, #0
    c8d6:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    c8d8:	2300      	movs	r3, #0
    c8da:	73fb      	strb	r3, [r7, #15]
    c8dc:	7bfb      	ldrb	r3, [r7, #15]
    c8de:	2b07      	cmp	r3, #7
    c8e0:	dc09      	bgt.n	c8f6 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    c8e2:	7bfb      	ldrb	r3, [r7, #15]
    c8e4:	2200      	movs	r2, #0
    c8e6:	4619      	mov	r1, r3
    c8e8:	6878      	ldr	r0, [r7, #4]
    c8ea:	4b05      	ldr	r3, [pc, #20]	; (c900 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    c8ec:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    c8ee:	7bfb      	ldrb	r3, [r7, #15]
    c8f0:	3301      	adds	r3, #1
    c8f2:	73fb      	strb	r3, [r7, #15]
    c8f4:	e7f2      	b.n	c8dc <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    c8f6:	bf00      	nop
    c8f8:	3710      	adds	r7, #16
    c8fa:	46bd      	mov	sp, r7
    c8fc:	bd80      	pop	{r7, pc}
    c8fe:	bf00      	nop
    c900:	0000c991 	.word	0x0000c991

0000c904 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    c904:	b580      	push	{r7, lr}
    c906:	b084      	sub	sp, #16
    c908:	af00      	add	r7, sp, #0
    c90a:	6078      	str	r0, [r7, #4]
    c90c:	4608      	mov	r0, r1
    c90e:	4611      	mov	r1, r2
    c910:	461a      	mov	r2, r3
    c912:	4603      	mov	r3, r0
    c914:	70fb      	strb	r3, [r7, #3]
    c916:	460b      	mov	r3, r1
    c918:	70bb      	strb	r3, [r7, #2]
    c91a:	4613      	mov	r3, r2
    c91c:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    c91e:	787b      	ldrb	r3, [r7, #1]
    c920:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    c922:	78fb      	ldrb	r3, [r7, #3]
    c924:	4619      	mov	r1, r3
    c926:	6878      	ldr	r0, [r7, #4]
    c928:	4b16      	ldr	r3, [pc, #88]	; (c984 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    c92a:	4798      	blx	r3
    c92c:	4603      	mov	r3, r0
    c92e:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    c930:	7bfb      	ldrb	r3, [r7, #15]
    c932:	4619      	mov	r1, r3
    c934:	6878      	ldr	r0, [r7, #4]
    c936:	4b14      	ldr	r3, [pc, #80]	; (c988 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    c938:	4798      	blx	r3
    c93a:	4603      	mov	r3, r0
    c93c:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    c93e:	78bb      	ldrb	r3, [r7, #2]
    c940:	2b00      	cmp	r3, #0
    c942:	d009      	beq.n	c958 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    c944:	7bba      	ldrb	r2, [r7, #14]
    c946:	7b7b      	ldrb	r3, [r7, #13]
    c948:	4619      	mov	r1, r3
    c94a:	2301      	movs	r3, #1
    c94c:	408b      	lsls	r3, r1
    c94e:	b2db      	uxtb	r3, r3
    c950:	4313      	orrs	r3, r2
    c952:	b2db      	uxtb	r3, r3
    c954:	73bb      	strb	r3, [r7, #14]
    c956:	e00a      	b.n	c96e <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    c958:	7bba      	ldrb	r2, [r7, #14]
    c95a:	7b7b      	ldrb	r3, [r7, #13]
    c95c:	4619      	mov	r1, r3
    c95e:	2301      	movs	r3, #1
    c960:	408b      	lsls	r3, r1
    c962:	b2db      	uxtb	r3, r3
    c964:	43db      	mvns	r3, r3
    c966:	b2db      	uxtb	r3, r3
    c968:	4013      	ands	r3, r2
    c96a:	b2db      	uxtb	r3, r3
    c96c:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    c96e:	7bba      	ldrb	r2, [r7, #14]
    c970:	7bfb      	ldrb	r3, [r7, #15]
    c972:	4619      	mov	r1, r3
    c974:	6878      	ldr	r0, [r7, #4]
    c976:	4b05      	ldr	r3, [pc, #20]	; (c98c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    c978:	4798      	blx	r3
}
    c97a:	bf00      	nop
    c97c:	3710      	adds	r7, #16
    c97e:	46bd      	mov	sp, r7
    c980:	bd80      	pop	{r7, pc}
    c982:	bf00      	nop
    c984:	0000c73b 	.word	0x0000c73b
    c988:	0000c789 	.word	0x0000c789
    c98c:	0000c811 	.word	0x0000c811

0000c990 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    c990:	b590      	push	{r4, r7, lr}
    c992:	b085      	sub	sp, #20
    c994:	af02      	add	r7, sp, #8
    c996:	6078      	str	r0, [r7, #4]
    c998:	460b      	mov	r3, r1
    c99a:	70fb      	strb	r3, [r7, #3]
    c99c:	4613      	mov	r3, r2
    c99e:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    c9a0:	78bb      	ldrb	r3, [r7, #2]
    c9a2:	2b01      	cmp	r3, #1
    c9a4:	bf0c      	ite	eq
    c9a6:	2301      	moveq	r3, #1
    c9a8:	2300      	movne	r3, #0
    c9aa:	b2db      	uxtb	r3, r3
    c9ac:	461a      	mov	r2, r3
    c9ae:	78f9      	ldrb	r1, [r7, #3]
    c9b0:	2300      	movs	r3, #0
    c9b2:	9300      	str	r3, [sp, #0]
    c9b4:	2300      	movs	r3, #0
    c9b6:	6878      	ldr	r0, [r7, #4]
    c9b8:	4c02      	ldr	r4, [pc, #8]	; (c9c4 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    c9ba:	47a0      	blx	r4
}
    c9bc:	bf00      	nop
    c9be:	370c      	adds	r7, #12
    c9c0:	46bd      	mov	sp, r7
    c9c2:	bd90      	pop	{r4, r7, pc}
    c9c4:	0000c905 	.word	0x0000c905

0000c9c8 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    c9c8:	b590      	push	{r4, r7, lr}
    c9ca:	b085      	sub	sp, #20
    c9cc:	af00      	add	r7, sp, #0
    c9ce:	6078      	str	r0, [r7, #4]
    c9d0:	460b      	mov	r3, r1
    c9d2:	70fb      	strb	r3, [r7, #3]
    c9d4:	4613      	mov	r3, r2
    c9d6:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    c9d8:	78fb      	ldrb	r3, [r7, #3]
    c9da:	4619      	mov	r1, r3
    c9dc:	6878      	ldr	r0, [r7, #4]
    c9de:	4b21      	ldr	r3, [pc, #132]	; (ca64 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    c9e0:	4798      	blx	r3
    c9e2:	4603      	mov	r3, r0
    c9e4:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    c9e6:	78f9      	ldrb	r1, [r7, #3]
    c9e8:	230a      	movs	r3, #10
    c9ea:	220a      	movs	r2, #10
    c9ec:	6878      	ldr	r0, [r7, #4]
    c9ee:	4c1e      	ldr	r4, [pc, #120]	; (ca68 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    c9f0:	47a0      	blx	r4
    c9f2:	4603      	mov	r3, r0
    c9f4:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    c9f6:	7bfb      	ldrb	r3, [r7, #15]
    c9f8:	4619      	mov	r1, r3
    c9fa:	6878      	ldr	r0, [r7, #4]
    c9fc:	4b1b      	ldr	r3, [pc, #108]	; (ca6c <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    c9fe:	4798      	blx	r3
    ca00:	4603      	mov	r3, r0
    ca02:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    ca04:	78bb      	ldrb	r3, [r7, #2]
    ca06:	2b00      	cmp	r3, #0
    ca08:	d009      	beq.n	ca1e <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    ca0a:	7bba      	ldrb	r2, [r7, #14]
    ca0c:	7b7b      	ldrb	r3, [r7, #13]
    ca0e:	4619      	mov	r1, r3
    ca10:	2301      	movs	r3, #1
    ca12:	408b      	lsls	r3, r1
    ca14:	b2db      	uxtb	r3, r3
    ca16:	4313      	orrs	r3, r2
    ca18:	b2db      	uxtb	r3, r3
    ca1a:	73bb      	strb	r3, [r7, #14]
    ca1c:	e00a      	b.n	ca34 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    ca1e:	7bba      	ldrb	r2, [r7, #14]
    ca20:	7b7b      	ldrb	r3, [r7, #13]
    ca22:	4619      	mov	r1, r3
    ca24:	2301      	movs	r3, #1
    ca26:	408b      	lsls	r3, r1
    ca28:	b2db      	uxtb	r3, r3
    ca2a:	43db      	mvns	r3, r3
    ca2c:	b2db      	uxtb	r3, r3
    ca2e:	4013      	ands	r3, r2
    ca30:	b2db      	uxtb	r3, r3
    ca32:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    ca34:	78f9      	ldrb	r1, [r7, #3]
    ca36:	2309      	movs	r3, #9
    ca38:	2209      	movs	r2, #9
    ca3a:	6878      	ldr	r0, [r7, #4]
    ca3c:	4c0a      	ldr	r4, [pc, #40]	; (ca68 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    ca3e:	47a0      	blx	r4
    ca40:	4603      	mov	r3, r0
    ca42:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    ca44:	7bba      	ldrb	r2, [r7, #14]
    ca46:	7bfb      	ldrb	r3, [r7, #15]
    ca48:	4619      	mov	r1, r3
    ca4a:	6878      	ldr	r0, [r7, #4]
    ca4c:	4b08      	ldr	r3, [pc, #32]	; (ca70 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    ca4e:	4798      	blx	r3
    ca50:	4603      	mov	r3, r0
    ca52:	2b00      	cmp	r3, #0
    ca54:	bf0c      	ite	eq
    ca56:	2301      	moveq	r3, #1
    ca58:	2300      	movne	r3, #0
    ca5a:	b2db      	uxtb	r3, r3
}
    ca5c:	4618      	mov	r0, r3
    ca5e:	3714      	adds	r7, #20
    ca60:	46bd      	mov	sp, r7
    ca62:	bd90      	pop	{r4, r7, pc}
    ca64:	0000c73b 	.word	0x0000c73b
    ca68:	0000c759 	.word	0x0000c759
    ca6c:	0000c789 	.word	0x0000c789
    ca70:	0000c811 	.word	0x0000c811

0000ca74 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    ca74:	b590      	push	{r4, r7, lr}
    ca76:	b085      	sub	sp, #20
    ca78:	af02      	add	r7, sp, #8
    ca7a:	6078      	str	r0, [r7, #4]
    ca7c:	460b      	mov	r3, r1
    ca7e:	70fb      	strb	r3, [r7, #3]
    ca80:	4613      	mov	r3, r2
    ca82:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    ca84:	78ba      	ldrb	r2, [r7, #2]
    ca86:	78f9      	ldrb	r1, [r7, #3]
    ca88:	2306      	movs	r3, #6
    ca8a:	9300      	str	r3, [sp, #0]
    ca8c:	2306      	movs	r3, #6
    ca8e:	6878      	ldr	r0, [r7, #4]
    ca90:	4c02      	ldr	r4, [pc, #8]	; (ca9c <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    ca92:	47a0      	blx	r4
}
    ca94:	bf00      	nop
    ca96:	370c      	adds	r7, #12
    ca98:	46bd      	mov	sp, r7
    ca9a:	bd90      	pop	{r4, r7, pc}
    ca9c:	0000c905 	.word	0x0000c905

0000caa0 <_Z41__static_initialization_and_destruction_0ii>:
	return MCP23008_INT_ERR;
}
bool	MCP23008_Class::SelfTest(void){

	return isOK;
    caa0:	b580      	push	{r7, lr}
    caa2:	b082      	sub	sp, #8
    caa4:	af00      	add	r7, sp, #0
    caa6:	6078      	str	r0, [r7, #4]
    caa8:	6039      	str	r1, [r7, #0]
    caaa:	687b      	ldr	r3, [r7, #4]
    caac:	2b01      	cmp	r3, #1
    caae:	d10d      	bne.n	cacc <_Z41__static_initialization_and_destruction_0ii+0x2c>
    cab0:	683b      	ldr	r3, [r7, #0]
    cab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cab6:	4293      	cmp	r3, r2
    cab8:	d108      	bne.n	cacc <_Z41__static_initialization_and_destruction_0ii+0x2c>
    caba:	4906      	ldr	r1, [pc, #24]	; (cad4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    cabc:	4806      	ldr	r0, [pc, #24]	; (cad8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    cabe:	4b07      	ldr	r3, [pc, #28]	; (cadc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    cac0:	4798      	blx	r3
    cac2:	4a07      	ldr	r2, [pc, #28]	; (cae0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    cac4:	4907      	ldr	r1, [pc, #28]	; (cae4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    cac6:	4804      	ldr	r0, [pc, #16]	; (cad8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    cac8:	4b07      	ldr	r3, [pc, #28]	; (cae8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    caca:	4798      	blx	r3
    cacc:	bf00      	nop
    cace:	3708      	adds	r7, #8
    cad0:	46bd      	mov	sp, r7
    cad2:	bd80      	pop	{r7, pc}
    cad4:	20000eb0 	.word	0x20000eb0
    cad8:	20000d68 	.word	0x20000d68
    cadc:	0000c511 	.word	0x0000c511
    cae0:	20000000 	.word	0x20000000
    cae4:	0000c52d 	.word	0x0000c52d
    cae8:	0000cba1 	.word	0x0000cba1

0000caec <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev>:
    caec:	b580      	push	{r7, lr}
    caee:	af00      	add	r7, sp, #0
    caf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    caf4:	2001      	movs	r0, #1
    caf6:	4b01      	ldr	r3, [pc, #4]	; (cafc <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev+0x10>)
    caf8:	4798      	blx	r3
    cafa:	bd80      	pop	{r7, pc}
    cafc:	0000caa1 	.word	0x0000caa1

0000cb00 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    cb00:	b580      	push	{r7, lr}
    cb02:	b084      	sub	sp, #16
    cb04:	af00      	add	r7, sp, #0
    cb06:	60f8      	str	r0, [r7, #12]
    cb08:	60b9      	str	r1, [r7, #8]
    cb0a:	4613      	mov	r3, r2
    cb0c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    cb0e:	68fb      	ldr	r3, [r7, #12]
    cb10:	2b00      	cmp	r3, #0
    cb12:	d004      	beq.n	cb1e <io_write+0x1e>
    cb14:	68bb      	ldr	r3, [r7, #8]
    cb16:	2b00      	cmp	r3, #0
    cb18:	d001      	beq.n	cb1e <io_write+0x1e>
    cb1a:	2301      	movs	r3, #1
    cb1c:	e000      	b.n	cb20 <io_write+0x20>
    cb1e:	2300      	movs	r3, #0
    cb20:	f003 0301 	and.w	r3, r3, #1
    cb24:	b2db      	uxtb	r3, r3
    cb26:	2234      	movs	r2, #52	; 0x34
    cb28:	4907      	ldr	r1, [pc, #28]	; (cb48 <io_write+0x48>)
    cb2a:	4618      	mov	r0, r3
    cb2c:	4b07      	ldr	r3, [pc, #28]	; (cb4c <io_write+0x4c>)
    cb2e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    cb30:	68fb      	ldr	r3, [r7, #12]
    cb32:	681b      	ldr	r3, [r3, #0]
    cb34:	88fa      	ldrh	r2, [r7, #6]
    cb36:	68b9      	ldr	r1, [r7, #8]
    cb38:	68f8      	ldr	r0, [r7, #12]
    cb3a:	4798      	blx	r3
    cb3c:	4603      	mov	r3, r0
}
    cb3e:	4618      	mov	r0, r3
    cb40:	3710      	adds	r7, #16
    cb42:	46bd      	mov	sp, r7
    cb44:	bd80      	pop	{r7, pc}
    cb46:	bf00      	nop
    cb48:	0000d310 	.word	0x0000d310
    cb4c:	00002dd1 	.word	0x00002dd1

0000cb50 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    cb50:	b580      	push	{r7, lr}
    cb52:	b084      	sub	sp, #16
    cb54:	af00      	add	r7, sp, #0
    cb56:	60f8      	str	r0, [r7, #12]
    cb58:	60b9      	str	r1, [r7, #8]
    cb5a:	4613      	mov	r3, r2
    cb5c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    cb5e:	68fb      	ldr	r3, [r7, #12]
    cb60:	2b00      	cmp	r3, #0
    cb62:	d004      	beq.n	cb6e <io_read+0x1e>
    cb64:	68bb      	ldr	r3, [r7, #8]
    cb66:	2b00      	cmp	r3, #0
    cb68:	d001      	beq.n	cb6e <io_read+0x1e>
    cb6a:	2301      	movs	r3, #1
    cb6c:	e000      	b.n	cb70 <io_read+0x20>
    cb6e:	2300      	movs	r3, #0
    cb70:	f003 0301 	and.w	r3, r3, #1
    cb74:	b2db      	uxtb	r3, r3
    cb76:	223d      	movs	r2, #61	; 0x3d
    cb78:	4907      	ldr	r1, [pc, #28]	; (cb98 <io_read+0x48>)
    cb7a:	4618      	mov	r0, r3
    cb7c:	4b07      	ldr	r3, [pc, #28]	; (cb9c <io_read+0x4c>)
    cb7e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    cb80:	68fb      	ldr	r3, [r7, #12]
    cb82:	685b      	ldr	r3, [r3, #4]
    cb84:	88fa      	ldrh	r2, [r7, #6]
    cb86:	68b9      	ldr	r1, [r7, #8]
    cb88:	68f8      	ldr	r0, [r7, #12]
    cb8a:	4798      	blx	r3
    cb8c:	4603      	mov	r3, r0
}
    cb8e:	4618      	mov	r0, r3
    cb90:	3710      	adds	r7, #16
    cb92:	46bd      	mov	sp, r7
    cb94:	bd80      	pop	{r7, pc}
    cb96:	bf00      	nop
    cb98:	0000d310 	.word	0x0000d310
    cb9c:	00002dd1 	.word	0x00002dd1

0000cba0 <__aeabi_atexit>:
    cba0:	460b      	mov	r3, r1
    cba2:	4601      	mov	r1, r0
    cba4:	4618      	mov	r0, r3
    cba6:	f000 b801 	b.w	cbac <__cxa_atexit>
    cbaa:	bf00      	nop

0000cbac <__cxa_atexit>:
    cbac:	4613      	mov	r3, r2
    cbae:	460a      	mov	r2, r1
    cbb0:	4601      	mov	r1, r0
    cbb2:	2002      	movs	r0, #2
    cbb4:	f000 b91e 	b.w	cdf4 <__register_exitproc>

0000cbb8 <ffs>:
    cbb8:	b140      	cbz	r0, cbcc <ffs+0x14>
    cbba:	2300      	movs	r3, #0
    cbbc:	fa40 f103 	asr.w	r1, r0, r3
    cbc0:	1c5a      	adds	r2, r3, #1
    cbc2:	07c9      	lsls	r1, r1, #31
    cbc4:	4613      	mov	r3, r2
    cbc6:	d5f9      	bpl.n	cbbc <ffs+0x4>
    cbc8:	4610      	mov	r0, r2
    cbca:	4770      	bx	lr
    cbcc:	4602      	mov	r2, r0
    cbce:	4610      	mov	r0, r2
    cbd0:	4770      	bx	lr
    cbd2:	bf00      	nop

0000cbd4 <__libc_init_array>:
    cbd4:	b570      	push	{r4, r5, r6, lr}
    cbd6:	4e0f      	ldr	r6, [pc, #60]	; (cc14 <__libc_init_array+0x40>)
    cbd8:	4d0f      	ldr	r5, [pc, #60]	; (cc18 <__libc_init_array+0x44>)
    cbda:	1b76      	subs	r6, r6, r5
    cbdc:	10b6      	asrs	r6, r6, #2
    cbde:	bf18      	it	ne
    cbe0:	2400      	movne	r4, #0
    cbe2:	d005      	beq.n	cbf0 <__libc_init_array+0x1c>
    cbe4:	3401      	adds	r4, #1
    cbe6:	f855 3b04 	ldr.w	r3, [r5], #4
    cbea:	4798      	blx	r3
    cbec:	42a6      	cmp	r6, r4
    cbee:	d1f9      	bne.n	cbe4 <__libc_init_array+0x10>
    cbf0:	4e0a      	ldr	r6, [pc, #40]	; (cc1c <__libc_init_array+0x48>)
    cbf2:	4d0b      	ldr	r5, [pc, #44]	; (cc20 <__libc_init_array+0x4c>)
    cbf4:	1b76      	subs	r6, r6, r5
    cbf6:	f000 fb97 	bl	d328 <_init>
    cbfa:	10b6      	asrs	r6, r6, #2
    cbfc:	bf18      	it	ne
    cbfe:	2400      	movne	r4, #0
    cc00:	d006      	beq.n	cc10 <__libc_init_array+0x3c>
    cc02:	3401      	adds	r4, #1
    cc04:	f855 3b04 	ldr.w	r3, [r5], #4
    cc08:	4798      	blx	r3
    cc0a:	42a6      	cmp	r6, r4
    cc0c:	d1f9      	bne.n	cc02 <__libc_init_array+0x2e>
    cc0e:	bd70      	pop	{r4, r5, r6, pc}
    cc10:	bd70      	pop	{r4, r5, r6, pc}
    cc12:	bf00      	nop
    cc14:	0000d334 	.word	0x0000d334
    cc18:	0000d334 	.word	0x0000d334
    cc1c:	0000d34c 	.word	0x0000d34c
    cc20:	0000d334 	.word	0x0000d334

0000cc24 <memcpy>:
    cc24:	4684      	mov	ip, r0
    cc26:	ea41 0300 	orr.w	r3, r1, r0
    cc2a:	f013 0303 	ands.w	r3, r3, #3
    cc2e:	d16d      	bne.n	cd0c <memcpy+0xe8>
    cc30:	3a40      	subs	r2, #64	; 0x40
    cc32:	d341      	bcc.n	ccb8 <memcpy+0x94>
    cc34:	f851 3b04 	ldr.w	r3, [r1], #4
    cc38:	f840 3b04 	str.w	r3, [r0], #4
    cc3c:	f851 3b04 	ldr.w	r3, [r1], #4
    cc40:	f840 3b04 	str.w	r3, [r0], #4
    cc44:	f851 3b04 	ldr.w	r3, [r1], #4
    cc48:	f840 3b04 	str.w	r3, [r0], #4
    cc4c:	f851 3b04 	ldr.w	r3, [r1], #4
    cc50:	f840 3b04 	str.w	r3, [r0], #4
    cc54:	f851 3b04 	ldr.w	r3, [r1], #4
    cc58:	f840 3b04 	str.w	r3, [r0], #4
    cc5c:	f851 3b04 	ldr.w	r3, [r1], #4
    cc60:	f840 3b04 	str.w	r3, [r0], #4
    cc64:	f851 3b04 	ldr.w	r3, [r1], #4
    cc68:	f840 3b04 	str.w	r3, [r0], #4
    cc6c:	f851 3b04 	ldr.w	r3, [r1], #4
    cc70:	f840 3b04 	str.w	r3, [r0], #4
    cc74:	f851 3b04 	ldr.w	r3, [r1], #4
    cc78:	f840 3b04 	str.w	r3, [r0], #4
    cc7c:	f851 3b04 	ldr.w	r3, [r1], #4
    cc80:	f840 3b04 	str.w	r3, [r0], #4
    cc84:	f851 3b04 	ldr.w	r3, [r1], #4
    cc88:	f840 3b04 	str.w	r3, [r0], #4
    cc8c:	f851 3b04 	ldr.w	r3, [r1], #4
    cc90:	f840 3b04 	str.w	r3, [r0], #4
    cc94:	f851 3b04 	ldr.w	r3, [r1], #4
    cc98:	f840 3b04 	str.w	r3, [r0], #4
    cc9c:	f851 3b04 	ldr.w	r3, [r1], #4
    cca0:	f840 3b04 	str.w	r3, [r0], #4
    cca4:	f851 3b04 	ldr.w	r3, [r1], #4
    cca8:	f840 3b04 	str.w	r3, [r0], #4
    ccac:	f851 3b04 	ldr.w	r3, [r1], #4
    ccb0:	f840 3b04 	str.w	r3, [r0], #4
    ccb4:	3a40      	subs	r2, #64	; 0x40
    ccb6:	d2bd      	bcs.n	cc34 <memcpy+0x10>
    ccb8:	3230      	adds	r2, #48	; 0x30
    ccba:	d311      	bcc.n	cce0 <memcpy+0xbc>
    ccbc:	f851 3b04 	ldr.w	r3, [r1], #4
    ccc0:	f840 3b04 	str.w	r3, [r0], #4
    ccc4:	f851 3b04 	ldr.w	r3, [r1], #4
    ccc8:	f840 3b04 	str.w	r3, [r0], #4
    cccc:	f851 3b04 	ldr.w	r3, [r1], #4
    ccd0:	f840 3b04 	str.w	r3, [r0], #4
    ccd4:	f851 3b04 	ldr.w	r3, [r1], #4
    ccd8:	f840 3b04 	str.w	r3, [r0], #4
    ccdc:	3a10      	subs	r2, #16
    ccde:	d2ed      	bcs.n	ccbc <memcpy+0x98>
    cce0:	320c      	adds	r2, #12
    cce2:	d305      	bcc.n	ccf0 <memcpy+0xcc>
    cce4:	f851 3b04 	ldr.w	r3, [r1], #4
    cce8:	f840 3b04 	str.w	r3, [r0], #4
    ccec:	3a04      	subs	r2, #4
    ccee:	d2f9      	bcs.n	cce4 <memcpy+0xc0>
    ccf0:	3204      	adds	r2, #4
    ccf2:	d008      	beq.n	cd06 <memcpy+0xe2>
    ccf4:	07d2      	lsls	r2, r2, #31
    ccf6:	bf1c      	itt	ne
    ccf8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    ccfc:	f800 3b01 	strbne.w	r3, [r0], #1
    cd00:	d301      	bcc.n	cd06 <memcpy+0xe2>
    cd02:	880b      	ldrh	r3, [r1, #0]
    cd04:	8003      	strh	r3, [r0, #0]
    cd06:	4660      	mov	r0, ip
    cd08:	4770      	bx	lr
    cd0a:	bf00      	nop
    cd0c:	2a08      	cmp	r2, #8
    cd0e:	d313      	bcc.n	cd38 <memcpy+0x114>
    cd10:	078b      	lsls	r3, r1, #30
    cd12:	d08d      	beq.n	cc30 <memcpy+0xc>
    cd14:	f010 0303 	ands.w	r3, r0, #3
    cd18:	d08a      	beq.n	cc30 <memcpy+0xc>
    cd1a:	f1c3 0304 	rsb	r3, r3, #4
    cd1e:	1ad2      	subs	r2, r2, r3
    cd20:	07db      	lsls	r3, r3, #31
    cd22:	bf1c      	itt	ne
    cd24:	f811 3b01 	ldrbne.w	r3, [r1], #1
    cd28:	f800 3b01 	strbne.w	r3, [r0], #1
    cd2c:	d380      	bcc.n	cc30 <memcpy+0xc>
    cd2e:	f831 3b02 	ldrh.w	r3, [r1], #2
    cd32:	f820 3b02 	strh.w	r3, [r0], #2
    cd36:	e77b      	b.n	cc30 <memcpy+0xc>
    cd38:	3a04      	subs	r2, #4
    cd3a:	d3d9      	bcc.n	ccf0 <memcpy+0xcc>
    cd3c:	3a01      	subs	r2, #1
    cd3e:	f811 3b01 	ldrb.w	r3, [r1], #1
    cd42:	f800 3b01 	strb.w	r3, [r0], #1
    cd46:	d2f9      	bcs.n	cd3c <memcpy+0x118>
    cd48:	780b      	ldrb	r3, [r1, #0]
    cd4a:	7003      	strb	r3, [r0, #0]
    cd4c:	784b      	ldrb	r3, [r1, #1]
    cd4e:	7043      	strb	r3, [r0, #1]
    cd50:	788b      	ldrb	r3, [r1, #2]
    cd52:	7083      	strb	r3, [r0, #2]
    cd54:	4660      	mov	r0, ip
    cd56:	4770      	bx	lr

0000cd58 <memset>:
    cd58:	b470      	push	{r4, r5, r6}
    cd5a:	0786      	lsls	r6, r0, #30
    cd5c:	d046      	beq.n	cdec <memset+0x94>
    cd5e:	1e54      	subs	r4, r2, #1
    cd60:	2a00      	cmp	r2, #0
    cd62:	d041      	beq.n	cde8 <memset+0x90>
    cd64:	b2ca      	uxtb	r2, r1
    cd66:	4603      	mov	r3, r0
    cd68:	e002      	b.n	cd70 <memset+0x18>
    cd6a:	f114 34ff 	adds.w	r4, r4, #4294967295
    cd6e:	d33b      	bcc.n	cde8 <memset+0x90>
    cd70:	f803 2b01 	strb.w	r2, [r3], #1
    cd74:	079d      	lsls	r5, r3, #30
    cd76:	d1f8      	bne.n	cd6a <memset+0x12>
    cd78:	2c03      	cmp	r4, #3
    cd7a:	d92e      	bls.n	cdda <memset+0x82>
    cd7c:	b2cd      	uxtb	r5, r1
    cd7e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    cd82:	2c0f      	cmp	r4, #15
    cd84:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    cd88:	d919      	bls.n	cdbe <memset+0x66>
    cd8a:	f103 0210 	add.w	r2, r3, #16
    cd8e:	4626      	mov	r6, r4
    cd90:	3e10      	subs	r6, #16
    cd92:	2e0f      	cmp	r6, #15
    cd94:	f842 5c10 	str.w	r5, [r2, #-16]
    cd98:	f842 5c0c 	str.w	r5, [r2, #-12]
    cd9c:	f842 5c08 	str.w	r5, [r2, #-8]
    cda0:	f842 5c04 	str.w	r5, [r2, #-4]
    cda4:	f102 0210 	add.w	r2, r2, #16
    cda8:	d8f2      	bhi.n	cd90 <memset+0x38>
    cdaa:	f1a4 0210 	sub.w	r2, r4, #16
    cdae:	f022 020f 	bic.w	r2, r2, #15
    cdb2:	f004 040f 	and.w	r4, r4, #15
    cdb6:	3210      	adds	r2, #16
    cdb8:	2c03      	cmp	r4, #3
    cdba:	4413      	add	r3, r2
    cdbc:	d90d      	bls.n	cdda <memset+0x82>
    cdbe:	461e      	mov	r6, r3
    cdc0:	4622      	mov	r2, r4
    cdc2:	3a04      	subs	r2, #4
    cdc4:	2a03      	cmp	r2, #3
    cdc6:	f846 5b04 	str.w	r5, [r6], #4
    cdca:	d8fa      	bhi.n	cdc2 <memset+0x6a>
    cdcc:	1f22      	subs	r2, r4, #4
    cdce:	f022 0203 	bic.w	r2, r2, #3
    cdd2:	3204      	adds	r2, #4
    cdd4:	4413      	add	r3, r2
    cdd6:	f004 0403 	and.w	r4, r4, #3
    cdda:	b12c      	cbz	r4, cde8 <memset+0x90>
    cddc:	b2c9      	uxtb	r1, r1
    cdde:	441c      	add	r4, r3
    cde0:	f803 1b01 	strb.w	r1, [r3], #1
    cde4:	429c      	cmp	r4, r3
    cde6:	d1fb      	bne.n	cde0 <memset+0x88>
    cde8:	bc70      	pop	{r4, r5, r6}
    cdea:	4770      	bx	lr
    cdec:	4614      	mov	r4, r2
    cdee:	4603      	mov	r3, r0
    cdf0:	e7c2      	b.n	cd78 <memset+0x20>
    cdf2:	bf00      	nop

0000cdf4 <__register_exitproc>:
    cdf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cdf8:	4d2c      	ldr	r5, [pc, #176]	; (ceac <__register_exitproc+0xb8>)
    cdfa:	4606      	mov	r6, r0
    cdfc:	6828      	ldr	r0, [r5, #0]
    cdfe:	4698      	mov	r8, r3
    ce00:	460f      	mov	r7, r1
    ce02:	4691      	mov	r9, r2
    ce04:	f000 f882 	bl	cf0c <__retarget_lock_acquire_recursive>
    ce08:	4b29      	ldr	r3, [pc, #164]	; (ceb0 <__register_exitproc+0xbc>)
    ce0a:	681c      	ldr	r4, [r3, #0]
    ce0c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ce10:	2b00      	cmp	r3, #0
    ce12:	d03e      	beq.n	ce92 <__register_exitproc+0x9e>
    ce14:	685a      	ldr	r2, [r3, #4]
    ce16:	2a1f      	cmp	r2, #31
    ce18:	dc1c      	bgt.n	ce54 <__register_exitproc+0x60>
    ce1a:	f102 0e01 	add.w	lr, r2, #1
    ce1e:	b176      	cbz	r6, ce3e <__register_exitproc+0x4a>
    ce20:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    ce24:	2401      	movs	r4, #1
    ce26:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    ce2a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    ce2e:	4094      	lsls	r4, r2
    ce30:	4320      	orrs	r0, r4
    ce32:	2e02      	cmp	r6, #2
    ce34:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    ce38:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    ce3c:	d023      	beq.n	ce86 <__register_exitproc+0x92>
    ce3e:	3202      	adds	r2, #2
    ce40:	f8c3 e004 	str.w	lr, [r3, #4]
    ce44:	6828      	ldr	r0, [r5, #0]
    ce46:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    ce4a:	f000 f861 	bl	cf10 <__retarget_lock_release_recursive>
    ce4e:	2000      	movs	r0, #0
    ce50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ce54:	4b17      	ldr	r3, [pc, #92]	; (ceb4 <__register_exitproc+0xc0>)
    ce56:	b30b      	cbz	r3, ce9c <__register_exitproc+0xa8>
    ce58:	f44f 70c8 	mov.w	r0, #400	; 0x190
    ce5c:	f3af 8000 	nop.w
    ce60:	4603      	mov	r3, r0
    ce62:	b1d8      	cbz	r0, ce9c <__register_exitproc+0xa8>
    ce64:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    ce68:	6002      	str	r2, [r0, #0]
    ce6a:	2100      	movs	r1, #0
    ce6c:	6041      	str	r1, [r0, #4]
    ce6e:	460a      	mov	r2, r1
    ce70:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    ce74:	f04f 0e01 	mov.w	lr, #1
    ce78:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    ce7c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    ce80:	2e00      	cmp	r6, #0
    ce82:	d0dc      	beq.n	ce3e <__register_exitproc+0x4a>
    ce84:	e7cc      	b.n	ce20 <__register_exitproc+0x2c>
    ce86:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    ce8a:	430c      	orrs	r4, r1
    ce8c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    ce90:	e7d5      	b.n	ce3e <__register_exitproc+0x4a>
    ce92:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    ce96:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    ce9a:	e7bb      	b.n	ce14 <__register_exitproc+0x20>
    ce9c:	6828      	ldr	r0, [r5, #0]
    ce9e:	f000 f837 	bl	cf10 <__retarget_lock_release_recursive>
    cea2:	f04f 30ff 	mov.w	r0, #4294967295
    cea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ceaa:	bf00      	nop
    ceac:	20000638 	.word	0x20000638
    ceb0:	0000d324 	.word	0x0000d324
    ceb4:	00000000 	.word	0x00000000

0000ceb8 <register_fini>:
    ceb8:	4b02      	ldr	r3, [pc, #8]	; (cec4 <register_fini+0xc>)
    ceba:	b113      	cbz	r3, cec2 <register_fini+0xa>
    cebc:	4802      	ldr	r0, [pc, #8]	; (cec8 <register_fini+0x10>)
    cebe:	f000 b805 	b.w	cecc <atexit>
    cec2:	4770      	bx	lr
    cec4:	00000000 	.word	0x00000000
    cec8:	0000ced9 	.word	0x0000ced9

0000cecc <atexit>:
    cecc:	2300      	movs	r3, #0
    cece:	4601      	mov	r1, r0
    ced0:	461a      	mov	r2, r3
    ced2:	4618      	mov	r0, r3
    ced4:	f7ff bf8e 	b.w	cdf4 <__register_exitproc>

0000ced8 <__libc_fini_array>:
    ced8:	b538      	push	{r3, r4, r5, lr}
    ceda:	4c0a      	ldr	r4, [pc, #40]	; (cf04 <__libc_fini_array+0x2c>)
    cedc:	4d0a      	ldr	r5, [pc, #40]	; (cf08 <__libc_fini_array+0x30>)
    cede:	1b64      	subs	r4, r4, r5
    cee0:	10a4      	asrs	r4, r4, #2
    cee2:	d00a      	beq.n	cefa <__libc_fini_array+0x22>
    cee4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    cee8:	3b01      	subs	r3, #1
    ceea:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    ceee:	3c01      	subs	r4, #1
    cef0:	f855 3904 	ldr.w	r3, [r5], #-4
    cef4:	4798      	blx	r3
    cef6:	2c00      	cmp	r4, #0
    cef8:	d1f9      	bne.n	ceee <__libc_fini_array+0x16>
    cefa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cefe:	f000 ba25 	b.w	d34c <_fini>
    cf02:	bf00      	nop
    cf04:	0000d35c 	.word	0x0000d35c
    cf08:	0000d358 	.word	0x0000d358

0000cf0c <__retarget_lock_acquire_recursive>:
    cf0c:	4770      	bx	lr
    cf0e:	bf00      	nop

0000cf10 <__retarget_lock_release_recursive>:
    cf10:	4770      	bx	lr
    cf12:	bf00      	nop
    cf14:	682f2e2e 	.word	0x682f2e2e
    cf18:	702f6c70 	.word	0x702f6c70
    cf1c:	2f74726f 	.word	0x2f74726f
    cf20:	5f6c7068 	.word	0x5f6c7068
    cf24:	6f697067 	.word	0x6f697067
    cf28:	7361625f 	.word	0x7361625f
    cf2c:	00682e65 	.word	0x00682e65
    cf30:	682f2e2e 	.word	0x682f2e2e
    cf34:	692f6c61 	.word	0x692f6c61
    cf38:	756c636e 	.word	0x756c636e
    cf3c:	682f6564 	.word	0x682f6564
    cf40:	775f6c61 	.word	0x775f6c61
    cf44:	682e7464 	.word	0x682e7464
    cf48:	00000000 	.word	0x00000000
    cf4c:	682f2e2e 	.word	0x682f2e2e
    cf50:	732f6c61 	.word	0x732f6c61
    cf54:	682f6372 	.word	0x682f6372
    cf58:	635f6c61 	.word	0x635f6c61
    cf5c:	6e656c61 	.word	0x6e656c61
    cf60:	2e726164 	.word	0x2e726164
    cf64:	00000063 	.word	0x00000063
    cf68:	682f2e2e 	.word	0x682f2e2e
    cf6c:	732f6c61 	.word	0x732f6c61
    cf70:	682f6372 	.word	0x682f6372
    cf74:	635f6c61 	.word	0x635f6c61
    cf78:	615f6e61 	.word	0x615f6e61
    cf7c:	636e7973 	.word	0x636e7973
    cf80:	0000632e 	.word	0x0000632e
    cf84:	682f2e2e 	.word	0x682f2e2e
    cf88:	732f6c61 	.word	0x732f6c61
    cf8c:	682f6372 	.word	0x682f6372
    cf90:	635f6c61 	.word	0x635f6c61
    cf94:	735f6372 	.word	0x735f6372
    cf98:	2e636e79 	.word	0x2e636e79
    cf9c:	00000063 	.word	0x00000063
    cfa0:	682f2e2e 	.word	0x682f2e2e
    cfa4:	732f6c61 	.word	0x732f6c61
    cfa8:	682f6372 	.word	0x682f6372
    cfac:	695f6c61 	.word	0x695f6c61
    cfb0:	6d5f6332 	.word	0x6d5f6332
    cfb4:	6e79735f 	.word	0x6e79735f
    cfb8:	00632e63 	.word	0x00632e63
    cfbc:	682f2e2e 	.word	0x682f2e2e
    cfc0:	732f6c61 	.word	0x732f6c61
    cfc4:	682f6372 	.word	0x682f6372
    cfc8:	705f6c61 	.word	0x705f6c61
    cfcc:	632e6d77 	.word	0x632e6d77
    cfd0:	00000000 	.word	0x00000000
    cfd4:	682f2e2e 	.word	0x682f2e2e
    cfd8:	732f6c61 	.word	0x732f6c61
    cfdc:	682f6372 	.word	0x682f6372
    cfe0:	715f6c61 	.word	0x715f6c61
    cfe4:	5f697073 	.word	0x5f697073
    cfe8:	636e7973 	.word	0x636e7973
    cfec:	0000632e 	.word	0x0000632e
    cff0:	682f2e2e 	.word	0x682f2e2e
    cff4:	732f6c61 	.word	0x732f6c61
    cff8:	682f6372 	.word	0x682f6372
    cffc:	735f6c61 	.word	0x735f6c61
    d000:	6d5f6970 	.word	0x6d5f6970
    d004:	6e79735f 	.word	0x6e79735f
    d008:	00632e63 	.word	0x00632e63
    d00c:	682f2e2e 	.word	0x682f2e2e
    d010:	732f6c61 	.word	0x732f6c61
    d014:	682f6372 	.word	0x682f6372
    d018:	745f6c61 	.word	0x745f6c61
    d01c:	72656d69 	.word	0x72656d69
    d020:	0000632e 	.word	0x0000632e
    d024:	682f2e2e 	.word	0x682f2e2e
    d028:	752f6c61 	.word	0x752f6c61
    d02c:	736c6974 	.word	0x736c6974
    d030:	6372732f 	.word	0x6372732f
    d034:	6974752f 	.word	0x6974752f
    d038:	6c5f736c 	.word	0x6c5f736c
    d03c:	2e747369 	.word	0x2e747369
    d040:	00000063 	.word	0x00000063

0000d044 <_map>:
    d044:	00000000 00000040 00000001 00000021     ....@.......!...
    d054:	00000003 00000003 00000004 00000004     ................
    d064:	00000005 00000005 00000006 00000056     ............V...
    d074:	00000007 00000057 00000008 00000028     ....W.......(...
    d084:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
    d094:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0000d0a4 <user_mux_confs>:
    d0a4:	00020100 00000000 00000000 00000000     ................
	...

0000d0e8 <channel_confs>:
    d0e8:	0660065f 00000000 00000000 00000000     _.`.............
	...

0000d128 <interrupt_cfg>:
	...
    d1a8:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    d1b8:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    d1c8:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    d1d8:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    d1e8:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    d1f8:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    d208:	43000400 43000800 43000c00              ...C...C...C

0000d214 <sercomspi_regs>:
    d214:	0020000c 00020000 00000000 01ff0001     .. .............
    d224:	30000c04 02000000 00000000 ff001700     ...0............
    d234:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    d244:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    d254:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    d264:	43001400 43001800                       ...C...C

0000d26c <_usb_ep_cfgs>:
    d26c:	20000854 00000000 00000040 20000894     T.. ....@...... 
    d27c:	200008d4 00400040 20000914 20000954     ... @.@.... T.. 
    d28c:	00400040 20000994 200009d4 00400040     @.@.... ... @.@.
    d29c:	20000a14 20000a54 00400040 00000804     ... T.. @.@.....
    d2ac:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    d2bc:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    d2cc:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    d2dc:	7361625f 00682e65                       _base.h.

0000d2e4 <n25q256a_interface>:
    d2e4:	0000abc9 0000ac6d 0000ad7d 0000af35     ....m...}...5...
    d2f4:	0000afc5 752f2e2e 642f6273 63697665     ....../usb/devic
    d304:	73752f65 2e636462 00000063 682f2e2e     e/usbdc.c...../h
    d314:	732f6c61 682f6372 695f6c61 00632e6f     al/src/hal_io.c.

0000d324 <_global_impure_ptr>:
    d324:	20000210                                ... 

0000d328 <_init>:
    d328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d32a:	bf00      	nop
    d32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d32e:	bc08      	pop	{r3}
    d330:	469e      	mov	lr, r3
    d332:	4770      	bx	lr

0000d334 <__init_array_start>:
    d334:	0000ceb9 	.word	0x0000ceb9

0000d338 <__frame_dummy_init_array_entry>:
    d338:	00000289 00000399 0000049d 0000c6b9     ................
    d348:	0000caed                                ....

0000d34c <_fini>:
    d34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d34e:	bf00      	nop
    d350:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d352:	bc08      	pop	{r3}
    d354:	469e      	mov	lr, r3
    d356:	4770      	bx	lr

0000d358 <__fini_array_start>:
    d358:	00000265 	.word	0x00000265
