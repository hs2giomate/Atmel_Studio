
Scavenger_Fan_P0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d36c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000d36c  0000d36c  0001d36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000063c  20000000  0000d374  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002063c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002063c  2**0
                  CONTENTS
  5 .bss          00000a10  2000063c  0000d9b0  0002063c  2**2
                  ALLOC
  6 .stack        00010004  2000104c  0000e3c0  0002063c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002063c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002066a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00053889  00000000  00000000  000206c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006e1d  00000000  00000000  00073f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001768c  00000000  00000000  0007ad69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000029d8  00000000  00000000  000923f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002718  00000000  00000000  00094dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00046f41  00000000  00000000  000974e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002e1ac  00000000  00000000  000de426  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00135d4a  00000000  00000000  0010c5d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000b03c  00000000  00000000  0024231c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 10 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     P.. ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	9d 51 00 00 a1 3f 00 00 b1 3f 00 00 d1 02 00 00     .Q...?...?......
      7c:	c1 3f 00 00 d1 3f 00 00 e1 3f 00 00 f1 3f 00 00     .?...?...?...?..
      8c:	01 40 00 00 11 40 00 00 21 40 00 00 d1 02 00 00     .@...@..!@......
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 bd 34 00 00 85 a0 00 00     .........4......
     184:	95 a0 00 00 a5 a0 00 00 b5 a0 00 00 d1 02 00 00     ................
     194:	19 6b 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .k..............
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 35 6b 00 00     ............5k..
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	51 6b 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     Qk..............
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d5 77 00 00 d1 02 00 00     .........w......
     1f4:	f1 77 00 00 d1 02 00 00 0d 78 00 00 29 78 00 00     .w.......x..)x..
     204:	45 78 00 00 61 78 00 00 d1 02 00 00 d1 02 00 00     Ex..ax..........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000063c 	.word	0x2000063c
     280:	00000000 	.word	0x00000000
     284:	0000d374 	.word	0x0000d374

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000d374 	.word	0x0000d374
     2c4:	20000640 	.word	0x20000640
     2c8:	0000d374 	.word	0x0000d374
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0000d374 	.word	0x0000d374
     33c:	2000063c 	.word	0x2000063c
     340:	2000104c 	.word	0x2000104c
     344:	2000063c 	.word	0x2000063c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	0000cbe5 	.word	0x0000cbe5
     354:	00000359 	.word	0x00000359

00000358 <main>:


Scavenge_Fan sca;

int main(void)
{
     358:	b508      	push	{r3, lr}
	atmel_start_init();
     35a:	4b0a      	ldr	r3, [pc, #40]	; (384 <main+0x2c>)
     35c:	4798      	blx	r3
	sca.Init();
     35e:	480a      	ldr	r0, [pc, #40]	; (388 <main+0x30>)
     360:	4b0a      	ldr	r3, [pc, #40]	; (38c <main+0x34>)
     362:	4798      	blx	r3
    /* Replace with your application code */
    while (1) 
    {
		sca.SetEnable(true);
     364:	4e08      	ldr	r6, [pc, #32]	; (388 <main+0x30>)
     366:	4d0a      	ldr	r5, [pc, #40]	; (390 <main+0x38>)
		delay_ms(1000);
     368:	4c0a      	ldr	r4, [pc, #40]	; (394 <main+0x3c>)
		sca.SetEnable(true);
     36a:	2101      	movs	r1, #1
     36c:	4630      	mov	r0, r6
     36e:	47a8      	blx	r5
		delay_ms(1000);
     370:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     374:	47a0      	blx	r4
		sca.SetEnable(false);
     376:	2100      	movs	r1, #0
     378:	4630      	mov	r0, r6
     37a:	47a8      	blx	r5
		delay_ms(500);
     37c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     380:	47a0      	blx	r4
     382:	e7f2      	b.n	36a <main+0x12>
     384:	000004f9 	.word	0x000004f9
     388:	20000658 	.word	0x20000658
     38c:	00000449 	.word	0x00000449
     390:	00000411 	.word	0x00000411
     394:	00001cc5 	.word	0x00001cc5

00000398 <_GLOBAL__sub_I_sca>:
    }
}
     398:	b570      	push	{r4, r5, r6, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     39a:	4c0a      	ldr	r4, [pc, #40]	; (3c4 <_GLOBAL__sub_I_sca+0x2c>)
     39c:	f104 0514 	add.w	r5, r4, #20
     3a0:	4909      	ldr	r1, [pc, #36]	; (3c8 <_GLOBAL__sub_I_sca+0x30>)
     3a2:	4628      	mov	r0, r5
     3a4:	4b09      	ldr	r3, [pc, #36]	; (3cc <_GLOBAL__sub_I_sca+0x34>)
     3a6:	4798      	blx	r3
     3a8:	4e09      	ldr	r6, [pc, #36]	; (3d0 <_GLOBAL__sub_I_sca+0x38>)
     3aa:	4632      	mov	r2, r6
     3ac:	4909      	ldr	r1, [pc, #36]	; (3d4 <_GLOBAL__sub_I_sca+0x3c>)
     3ae:	4628      	mov	r0, r5
     3b0:	4d09      	ldr	r5, [pc, #36]	; (3d8 <_GLOBAL__sub_I_sca+0x40>)
     3b2:	47a8      	blx	r5
Scavenge_Fan sca;
     3b4:	4620      	mov	r0, r4
     3b6:	4b09      	ldr	r3, [pc, #36]	; (3dc <_GLOBAL__sub_I_sca+0x44>)
     3b8:	4798      	blx	r3
     3ba:	4632      	mov	r2, r6
     3bc:	4908      	ldr	r1, [pc, #32]	; (3e0 <_GLOBAL__sub_I_sca+0x48>)
     3be:	4620      	mov	r0, r4
     3c0:	47a8      	blx	r5
     3c2:	bd70      	pop	{r4, r5, r6, pc}
     3c4:	20000658 	.word	0x20000658
     3c8:	20000ec4 	.word	0x20000ec4
     3cc:	0000c521 	.word	0x0000c521
     3d0:	20000000 	.word	0x20000000
     3d4:	0000c53d 	.word	0x0000c53d
     3d8:	0000cbb1 	.word	0x0000cbb1
     3dc:	000003e7 	.word	0x000003e7
     3e0:	000003e5 	.word	0x000003e5

000003e4 <_ZN12Scavenge_FanD1Ev>:
} //Scavenge_Fan

// default destructor
Scavenge_Fan::~Scavenge_Fan()
{
} //~Scavenge_Fan
     3e4:	4770      	bx	lr

000003e6 <_ZN12Scavenge_FanC1Ev>:
	isOK=false;
     3e6:	2200      	movs	r2, #0
     3e8:	7082      	strb	r2, [r0, #2]
} //Scavenge_Fan
     3ea:	4770      	bx	lr

000003ec <_ZN12Scavenge_Fan10ReadStatusEv>:
	{
	}
	return isOK;
}

uint8_t	Scavenge_Fan::ReadStatus(void){
     3ec:	b510      	push	{r4, lr}
     3ee:	4604      	mov	r4, r0
	uint8_t r=expander->ReadGPIORegister();
     3f0:	6880      	ldr	r0, [r0, #8]
     3f2:	4b06      	ldr	r3, [pc, #24]	; (40c <_ZN12Scavenge_Fan10ReadStatusEv+0x20>)
     3f4:	4798      	blx	r3
	
	
	scavengeData.tempFault=r&(0x01<<(7));
     3f6:	f3c0 12c0 	ubfx	r2, r0, #7, #1
     3fa:	70e2      	strb	r2, [r4, #3]
	scavengeData.SPDFault=r&(0x01<<(6));
     3fc:	f3c0 1280 	ubfx	r2, r0, #6, #1
     400:	7122      	strb	r2, [r4, #4]
	scavengeData.relayFault=r&(0x01<<(4));
     402:	f3c0 1300 	ubfx	r3, r0, #4, #1
     406:	7163      	strb	r3, [r4, #5]
	return r;
	
}
     408:	bd10      	pop	{r4, pc}
     40a:	bf00      	nop
     40c:	0000c7e9 	.word	0x0000c7e9

00000410 <_ZN12Scavenge_Fan9SetEnableEb>:
uint8_t	Scavenge_Fan::SetEnable(bool state){
     410:	b510      	push	{r4, lr}
     412:	4604      	mov	r4, r0

	enabled=expander->WriteDigit(1,!state);
     414:	f081 0201 	eor.w	r2, r1, #1
     418:	2101      	movs	r1, #1
     41a:	6880      	ldr	r0, [r0, #8]
     41c:	4b01      	ldr	r3, [pc, #4]	; (424 <_ZN12Scavenge_Fan9SetEnableEb+0x14>)
     41e:	4798      	blx	r3
     420:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
     422:	bd10      	pop	{r4, pc}
     424:	0000c9d9 	.word	0x0000c9d9

00000428 <_ZN12Scavenge_Fan8SelfTestEv>:

	uint8_t value=expander->ReadGPIORegister();
	enabled=!(value&0x02);
	return enabled;
}
bool Scavenge_Fan::SelfTest(){
     428:	b510      	push	{r4, lr}
     42a:	4604      	mov	r4, r0
	if ((ReadStatus()&0xd0)<0xd)
     42c:	4b05      	ldr	r3, [pc, #20]	; (444 <_ZN12Scavenge_Fan8SelfTestEv+0x1c>)
     42e:	4798      	blx	r3
     430:	f000 00d0 	and.w	r0, r0, #208	; 0xd0
     434:	280c      	cmp	r0, #12
	{
		bool_result=false;
     436:	bfd4      	ite	le
     438:	2300      	movle	r3, #0
	} 
	else
	{
		bool_result=true;
     43a:	2301      	movgt	r3, #1
     43c:	7423      	strb	r3, [r4, #16]
	}
	return bool_result;
}
     43e:	7c20      	ldrb	r0, [r4, #16]
     440:	bd10      	pop	{r4, pc}
     442:	bf00      	nop
     444:	000003ed 	.word	0x000003ed

00000448 <_ZN12Scavenge_Fan4InitEv>:
bool Scavenge_Fan::Init(void){
     448:	b510      	push	{r4, lr}
     44a:	4604      	mov	r4, r0
	i2c=&i2cSharedStatic;
     44c:	4a0d      	ldr	r2, [pc, #52]	; (484 <_ZN12Scavenge_Fan4InitEv+0x3c>)
     44e:	60c2      	str	r2, [r0, #12]
	expander=&local_expander;
     450:	f102 0018 	add.w	r0, r2, #24
     454:	60a0      	str	r0, [r4, #8]
	expander->Init(MCP23008_SCAVENGE_ADDRESS,i2c);
     456:	2124      	movs	r1, #36	; 0x24
     458:	4b0b      	ldr	r3, [pc, #44]	; (488 <_ZN12Scavenge_Fan4InitEv+0x40>)
     45a:	4798      	blx	r3
	if (i2c->initiated)
     45c:	68e0      	ldr	r0, [r4, #12]
     45e:	7a03      	ldrb	r3, [r0, #8]
     460:	b123      	cbz	r3, 46c <_ZN12Scavenge_Fan4InitEv+0x24>
	if (i2c->isOK)
     462:	68e3      	ldr	r3, [r4, #12]
     464:	7a5b      	ldrb	r3, [r3, #9]
     466:	b923      	cbnz	r3, 472 <_ZN12Scavenge_Fan4InitEv+0x2a>
}
     468:	78a0      	ldrb	r0, [r4, #2]
     46a:	bd10      	pop	{r4, pc}
		i2c->Init();
     46c:	4b07      	ldr	r3, [pc, #28]	; (48c <_ZN12Scavenge_Fan4InitEv+0x44>)
     46e:	4798      	blx	r3
     470:	e7f7      	b.n	462 <_ZN12Scavenge_Fan4InitEv+0x1a>
		expander->SetPortInput(0xf0);
     472:	21f0      	movs	r1, #240	; 0xf0
     474:	68a0      	ldr	r0, [r4, #8]
     476:	4b06      	ldr	r3, [pc, #24]	; (490 <_ZN12Scavenge_Fan4InitEv+0x48>)
     478:	4798      	blx	r3
		isOK=SelfTest();
     47a:	4620      	mov	r0, r4
     47c:	4b05      	ldr	r3, [pc, #20]	; (494 <_ZN12Scavenge_Fan4InitEv+0x4c>)
     47e:	4798      	blx	r3
     480:	70a0      	strb	r0, [r4, #2]
     482:	e7f1      	b.n	468 <_ZN12Scavenge_Fan4InitEv+0x20>
     484:	20000684 	.word	0x20000684
     488:	0000c705 	.word	0x0000c705
     48c:	0000c551 	.word	0x0000c551
     490:	0000c86d 	.word	0x0000c86d
     494:	00000429 	.word	0x00000429

00000498 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev>:
     498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     49a:	4c0e      	ldr	r4, [pc, #56]	; (4d4 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x3c>)
     49c:	490e      	ldr	r1, [pc, #56]	; (4d8 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x40>)
     49e:	4620      	mov	r0, r4
     4a0:	4b0e      	ldr	r3, [pc, #56]	; (4dc <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x44>)
     4a2:	4798      	blx	r3
     4a4:	4e0e      	ldr	r6, [pc, #56]	; (4e0 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x48>)
     4a6:	4632      	mov	r2, r6
     4a8:	490e      	ldr	r1, [pc, #56]	; (4e4 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x4c>)
     4aa:	4620      	mov	r0, r4
     4ac:	4d0e      	ldr	r5, [pc, #56]	; (4e8 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x50>)
     4ae:	47a8      	blx	r5
static MCP23008_Class local_expander;
     4b0:	f104 0718 	add.w	r7, r4, #24
     4b4:	4638      	mov	r0, r7
     4b6:	4b0d      	ldr	r3, [pc, #52]	; (4ec <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x54>)
     4b8:	4798      	blx	r3
     4ba:	4632      	mov	r2, r6
     4bc:	490c      	ldr	r1, [pc, #48]	; (4f0 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x58>)
     4be:	4638      	mov	r0, r7
     4c0:	47a8      	blx	r5
	isOK=false;
     4c2:	2300      	movs	r3, #0
     4c4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
     4c8:	4632      	mov	r2, r6
     4ca:	490a      	ldr	r1, [pc, #40]	; (4f4 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x5c>)
     4cc:	f104 0034 	add.w	r0, r4, #52	; 0x34
     4d0:	47a8      	blx	r5
     4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4d4:	20000684 	.word	0x20000684
     4d8:	20000ec4 	.word	0x20000ec4
     4dc:	0000c521 	.word	0x0000c521
     4e0:	20000000 	.word	0x20000000
     4e4:	0000c53d 	.word	0x0000c53d
     4e8:	0000cbb1 	.word	0x0000cbb1
     4ec:	0000c6dd 	.word	0x0000c6dd
     4f0:	0000c6f1 	.word	0x0000c6f1
     4f4:	000003e5 	.word	0x000003e5

000004f8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     4f8:	b580      	push	{r7, lr}
     4fa:	af00      	add	r7, sp, #0
	system_init();
     4fc:	4b03      	ldr	r3, [pc, #12]	; (50c <atmel_start_init+0x14>)
     4fe:	4798      	blx	r3
	usb_init();
     500:	4b03      	ldr	r3, [pc, #12]	; (510 <atmel_start_init+0x18>)
     502:	4798      	blx	r3
	spi_nor_flash_init();
     504:	4b03      	ldr	r3, [pc, #12]	; (514 <atmel_start_init+0x1c>)
     506:	4798      	blx	r3
}
     508:	bf00      	nop
     50a:	bd80      	pop	{r7, pc}
     50c:	000018f9 	.word	0x000018f9
     510:	0000a789 	.word	0x0000a789
     514:	0000a71d 	.word	0x0000a71d

00000518 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     518:	b480      	push	{r7}
     51a:	b085      	sub	sp, #20
     51c:	af00      	add	r7, sp, #0
     51e:	60f8      	str	r0, [r7, #12]
     520:	460b      	mov	r3, r1
     522:	607a      	str	r2, [r7, #4]
     524:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     526:	7afa      	ldrb	r2, [r7, #11]
     528:	68fb      	ldr	r3, [r7, #12]
     52a:	3220      	adds	r2, #32
     52c:	6879      	ldr	r1, [r7, #4]
     52e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     532:	bf00      	nop
     534:	3714      	adds	r7, #20
     536:	46bd      	mov	sp, r7
     538:	f85d 7b04 	ldr.w	r7, [sp], #4
     53c:	4770      	bx	lr

0000053e <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     53e:	b480      	push	{r7}
     540:	b083      	sub	sp, #12
     542:	af00      	add	r7, sp, #0
     544:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     546:	687b      	ldr	r3, [r7, #4]
     548:	691b      	ldr	r3, [r3, #16]
     54a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     54e:	687b      	ldr	r3, [r7, #4]
     550:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     552:	bf00      	nop
     554:	370c      	adds	r7, #12
     556:	46bd      	mov	sp, r7
     558:	f85d 7b04 	ldr.w	r7, [sp], #4
     55c:	4770      	bx	lr

0000055e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     55e:	b480      	push	{r7}
     560:	b083      	sub	sp, #12
     562:	af00      	add	r7, sp, #0
     564:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     566:	687b      	ldr	r3, [r7, #4]
     568:	691b      	ldr	r3, [r3, #16]
     56a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     56e:	687b      	ldr	r3, [r7, #4]
     570:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     572:	bf00      	nop
     574:	370c      	adds	r7, #12
     576:	46bd      	mov	sp, r7
     578:	f85d 7b04 	ldr.w	r7, [sp], #4
     57c:	4770      	bx	lr

0000057e <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     57e:	b480      	push	{r7}
     580:	b083      	sub	sp, #12
     582:	af00      	add	r7, sp, #0
     584:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     586:	687b      	ldr	r3, [r7, #4]
     588:	691b      	ldr	r3, [r3, #16]
     58a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     58e:	687b      	ldr	r3, [r7, #4]
     590:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     592:	bf00      	nop
     594:	370c      	adds	r7, #12
     596:	46bd      	mov	sp, r7
     598:	f85d 7b04 	ldr.w	r7, [sp], #4
     59c:	4770      	bx	lr

0000059e <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     59e:	b480      	push	{r7}
     5a0:	b083      	sub	sp, #12
     5a2:	af00      	add	r7, sp, #0
     5a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     5a6:	687b      	ldr	r3, [r7, #4]
     5a8:	691b      	ldr	r3, [r3, #16]
     5aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     5ae:	687b      	ldr	r3, [r7, #4]
     5b0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5b2:	bf00      	nop
     5b4:	370c      	adds	r7, #12
     5b6:	46bd      	mov	sp, r7
     5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
     5bc:	4770      	bx	lr

000005be <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     5be:	b480      	push	{r7}
     5c0:	b083      	sub	sp, #12
     5c2:	af00      	add	r7, sp, #0
     5c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     5c6:	687b      	ldr	r3, [r7, #4]
     5c8:	695b      	ldr	r3, [r3, #20]
     5ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5d2:	bf00      	nop
     5d4:	370c      	adds	r7, #12
     5d6:	46bd      	mov	sp, r7
     5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     5dc:	4770      	bx	lr

000005de <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     5de:	b480      	push	{r7}
     5e0:	b083      	sub	sp, #12
     5e2:	af00      	add	r7, sp, #0
     5e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     5e6:	687b      	ldr	r3, [r7, #4]
     5e8:	695b      	ldr	r3, [r3, #20]
     5ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5f2:	bf00      	nop
     5f4:	370c      	adds	r7, #12
     5f6:	46bd      	mov	sp, r7
     5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
     5fc:	4770      	bx	lr

000005fe <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     5fe:	b480      	push	{r7}
     600:	b083      	sub	sp, #12
     602:	af00      	add	r7, sp, #0
     604:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     606:	687b      	ldr	r3, [r7, #4]
     608:	695b      	ldr	r3, [r3, #20]
     60a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     60e:	687b      	ldr	r3, [r7, #4]
     610:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     612:	bf00      	nop
     614:	370c      	adds	r7, #12
     616:	46bd      	mov	sp, r7
     618:	f85d 7b04 	ldr.w	r7, [sp], #4
     61c:	4770      	bx	lr

0000061e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     61e:	b480      	push	{r7}
     620:	b083      	sub	sp, #12
     622:	af00      	add	r7, sp, #0
     624:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     626:	687b      	ldr	r3, [r7, #4]
     628:	695b      	ldr	r3, [r3, #20]
     62a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     62e:	687b      	ldr	r3, [r7, #4]
     630:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     632:	bf00      	nop
     634:	370c      	adds	r7, #12
     636:	46bd      	mov	sp, r7
     638:	f85d 7b04 	ldr.w	r7, [sp], #4
     63c:	4770      	bx	lr

0000063e <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     63e:	b480      	push	{r7}
     640:	b083      	sub	sp, #12
     642:	af00      	add	r7, sp, #0
     644:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     646:	687b      	ldr	r3, [r7, #4]
     648:	699b      	ldr	r3, [r3, #24]
     64a:	f043 0201 	orr.w	r2, r3, #1
     64e:	687b      	ldr	r3, [r7, #4]
     650:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     652:	bf00      	nop
     654:	370c      	adds	r7, #12
     656:	46bd      	mov	sp, r7
     658:	f85d 7b04 	ldr.w	r7, [sp], #4
     65c:	4770      	bx	lr

0000065e <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     65e:	b480      	push	{r7}
     660:	b083      	sub	sp, #12
     662:	af00      	add	r7, sp, #0
     664:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     666:	687b      	ldr	r3, [r7, #4]
     668:	699b      	ldr	r3, [r3, #24]
     66a:	f043 0202 	orr.w	r2, r3, #2
     66e:	687b      	ldr	r3, [r7, #4]
     670:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     672:	bf00      	nop
     674:	370c      	adds	r7, #12
     676:	46bd      	mov	sp, r7
     678:	f85d 7b04 	ldr.w	r7, [sp], #4
     67c:	4770      	bx	lr

0000067e <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     67e:	b480      	push	{r7}
     680:	b083      	sub	sp, #12
     682:	af00      	add	r7, sp, #0
     684:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     686:	687b      	ldr	r3, [r7, #4]
     688:	699b      	ldr	r3, [r3, #24]
     68a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     68e:	687b      	ldr	r3, [r7, #4]
     690:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     692:	bf00      	nop
     694:	370c      	adds	r7, #12
     696:	46bd      	mov	sp, r7
     698:	f85d 7b04 	ldr.w	r7, [sp], #4
     69c:	4770      	bx	lr

0000069e <hri_mclk_set_APBBMASK_SERCOM3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
     69e:	b480      	push	{r7}
     6a0:	b083      	sub	sp, #12
     6a2:	af00      	add	r7, sp, #0
     6a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     6a6:	687b      	ldr	r3, [r7, #4]
     6a8:	699b      	ldr	r3, [r3, #24]
     6aa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6b2:	bf00      	nop
     6b4:	370c      	adds	r7, #12
     6b6:	46bd      	mov	sp, r7
     6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
     6bc:	4770      	bx	lr

000006be <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     6be:	b480      	push	{r7}
     6c0:	b083      	sub	sp, #12
     6c2:	af00      	add	r7, sp, #0
     6c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     6c6:	687b      	ldr	r3, [r7, #4]
     6c8:	699b      	ldr	r3, [r3, #24]
     6ca:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     6ce:	687b      	ldr	r3, [r7, #4]
     6d0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6d2:	bf00      	nop
     6d4:	370c      	adds	r7, #12
     6d6:	46bd      	mov	sp, r7
     6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     6dc:	4770      	bx	lr

000006de <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     6de:	b480      	push	{r7}
     6e0:	b083      	sub	sp, #12
     6e2:	af00      	add	r7, sp, #0
     6e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	699b      	ldr	r3, [r3, #24]
     6ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6f2:	bf00      	nop
     6f4:	370c      	adds	r7, #12
     6f6:	46bd      	mov	sp, r7
     6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
     6fc:	4770      	bx	lr

000006fe <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     6fe:	b480      	push	{r7}
     700:	b083      	sub	sp, #12
     702:	af00      	add	r7, sp, #0
     704:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     706:	687b      	ldr	r3, [r7, #4]
     708:	699b      	ldr	r3, [r3, #24]
     70a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     70e:	687b      	ldr	r3, [r7, #4]
     710:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     712:	bf00      	nop
     714:	370c      	adds	r7, #12
     716:	46bd      	mov	sp, r7
     718:	f85d 7b04 	ldr.w	r7, [sp], #4
     71c:	4770      	bx	lr

0000071e <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
     71e:	b480      	push	{r7}
     720:	b083      	sub	sp, #12
     722:	af00      	add	r7, sp, #0
     724:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     726:	687b      	ldr	r3, [r7, #4]
     728:	69db      	ldr	r3, [r3, #28]
     72a:	f043 0208 	orr.w	r2, r3, #8
     72e:	687b      	ldr	r3, [r7, #4]
     730:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     732:	bf00      	nop
     734:	370c      	adds	r7, #12
     736:	46bd      	mov	sp, r7
     738:	f85d 7b04 	ldr.w	r7, [sp], #4
     73c:	4770      	bx	lr

0000073e <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     73e:	b480      	push	{r7}
     740:	b083      	sub	sp, #12
     742:	af00      	add	r7, sp, #0
     744:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     746:	687b      	ldr	r3, [r7, #4]
     748:	69db      	ldr	r3, [r3, #28]
     74a:	f043 0220 	orr.w	r2, r3, #32
     74e:	687b      	ldr	r3, [r7, #4]
     750:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     752:	bf00      	nop
     754:	370c      	adds	r7, #12
     756:	46bd      	mov	sp, r7
     758:	f85d 7b04 	ldr.w	r7, [sp], #4
     75c:	4770      	bx	lr

0000075e <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     75e:	b480      	push	{r7}
     760:	b083      	sub	sp, #12
     762:	af00      	add	r7, sp, #0
     764:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     766:	687b      	ldr	r3, [r7, #4]
     768:	69db      	ldr	r3, [r3, #28]
     76a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     76e:	687b      	ldr	r3, [r7, #4]
     770:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     772:	bf00      	nop
     774:	370c      	adds	r7, #12
     776:	46bd      	mov	sp, r7
     778:	f85d 7b04 	ldr.w	r7, [sp], #4
     77c:	4770      	bx	lr

0000077e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     77e:	b480      	push	{r7}
     780:	b083      	sub	sp, #12
     782:	af00      	add	r7, sp, #0
     784:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     786:	687b      	ldr	r3, [r7, #4]
     788:	69db      	ldr	r3, [r3, #28]
     78a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     78e:	687b      	ldr	r3, [r7, #4]
     790:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     792:	bf00      	nop
     794:	370c      	adds	r7, #12
     796:	46bd      	mov	sp, r7
     798:	f85d 7b04 	ldr.w	r7, [sp], #4
     79c:	4770      	bx	lr

0000079e <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     79e:	b480      	push	{r7}
     7a0:	b083      	sub	sp, #12
     7a2:	af00      	add	r7, sp, #0
     7a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     7a6:	687b      	ldr	r3, [r7, #4]
     7a8:	6a1b      	ldr	r3, [r3, #32]
     7aa:	f043 0201 	orr.w	r2, r3, #1
     7ae:	687b      	ldr	r3, [r7, #4]
     7b0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7b2:	bf00      	nop
     7b4:	370c      	adds	r7, #12
     7b6:	46bd      	mov	sp, r7
     7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
     7bc:	4770      	bx	lr

000007be <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     7be:	b480      	push	{r7}
     7c0:	b083      	sub	sp, #12
     7c2:	af00      	add	r7, sp, #0
     7c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     7c6:	687b      	ldr	r3, [r7, #4]
     7c8:	6a1b      	ldr	r3, [r3, #32]
     7ca:	f043 0202 	orr.w	r2, r3, #2
     7ce:	687b      	ldr	r3, [r7, #4]
     7d0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7d2:	bf00      	nop
     7d4:	370c      	adds	r7, #12
     7d6:	46bd      	mov	sp, r7
     7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     7dc:	4770      	bx	lr

000007de <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     7de:	b480      	push	{r7}
     7e0:	b083      	sub	sp, #12
     7e2:	af00      	add	r7, sp, #0
     7e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	6a1b      	ldr	r3, [r3, #32]
     7ea:	f043 0204 	orr.w	r2, r3, #4
     7ee:	687b      	ldr	r3, [r7, #4]
     7f0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7f2:	bf00      	nop
     7f4:	370c      	adds	r7, #12
     7f6:	46bd      	mov	sp, r7
     7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
     7fc:	4770      	bx	lr

000007fe <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     7fe:	b480      	push	{r7}
     800:	b083      	sub	sp, #12
     802:	af00      	add	r7, sp, #0
     804:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     806:	687b      	ldr	r3, [r7, #4]
     808:	6a1b      	ldr	r3, [r3, #32]
     80a:	f043 0208 	orr.w	r2, r3, #8
     80e:	687b      	ldr	r3, [r7, #4]
     810:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     812:	bf00      	nop
     814:	370c      	adds	r7, #12
     816:	46bd      	mov	sp, r7
     818:	f85d 7b04 	ldr.w	r7, [sp], #4
     81c:	4770      	bx	lr

0000081e <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     81e:	b480      	push	{r7}
     820:	b083      	sub	sp, #12
     822:	af00      	add	r7, sp, #0
     824:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     826:	687b      	ldr	r3, [r7, #4]
     828:	6a1b      	ldr	r3, [r3, #32]
     82a:	f043 0220 	orr.w	r2, r3, #32
     82e:	687b      	ldr	r3, [r7, #4]
     830:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     832:	bf00      	nop
     834:	370c      	adds	r7, #12
     836:	46bd      	mov	sp, r7
     838:	f85d 7b04 	ldr.w	r7, [sp], #4
     83c:	4770      	bx	lr

0000083e <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     83e:	b480      	push	{r7}
     840:	b083      	sub	sp, #12
     842:	af00      	add	r7, sp, #0
     844:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     846:	687b      	ldr	r3, [r7, #4]
     848:	6a1b      	ldr	r3, [r3, #32]
     84a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     84e:	687b      	ldr	r3, [r7, #4]
     850:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     852:	bf00      	nop
     854:	370c      	adds	r7, #12
     856:	46bd      	mov	sp, r7
     858:	f85d 7b04 	ldr.w	r7, [sp], #4
     85c:	4770      	bx	lr

0000085e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     85e:	b480      	push	{r7}
     860:	b085      	sub	sp, #20
     862:	af00      	add	r7, sp, #0
     864:	60f8      	str	r0, [r7, #12]
     866:	460b      	mov	r3, r1
     868:	607a      	str	r2, [r7, #4]
     86a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     86c:	7afb      	ldrb	r3, [r7, #11]
     86e:	68fa      	ldr	r2, [r7, #12]
     870:	01db      	lsls	r3, r3, #7
     872:	4413      	add	r3, r2
     874:	3308      	adds	r3, #8
     876:	687a      	ldr	r2, [r7, #4]
     878:	601a      	str	r2, [r3, #0]
}
     87a:	bf00      	nop
     87c:	3714      	adds	r7, #20
     87e:	46bd      	mov	sp, r7
     880:	f85d 7b04 	ldr.w	r7, [sp], #4
     884:	4770      	bx	lr

00000886 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     886:	b480      	push	{r7}
     888:	b085      	sub	sp, #20
     88a:	af00      	add	r7, sp, #0
     88c:	60f8      	str	r0, [r7, #12]
     88e:	460b      	mov	r3, r1
     890:	607a      	str	r2, [r7, #4]
     892:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     894:	7afb      	ldrb	r3, [r7, #11]
     896:	68fa      	ldr	r2, [r7, #12]
     898:	01db      	lsls	r3, r3, #7
     89a:	4413      	add	r3, r2
     89c:	3304      	adds	r3, #4
     89e:	687a      	ldr	r2, [r7, #4]
     8a0:	601a      	str	r2, [r3, #0]
}
     8a2:	bf00      	nop
     8a4:	3714      	adds	r7, #20
     8a6:	46bd      	mov	sp, r7
     8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
     8ac:	4770      	bx	lr

000008ae <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     8ae:	b480      	push	{r7}
     8b0:	b085      	sub	sp, #20
     8b2:	af00      	add	r7, sp, #0
     8b4:	60f8      	str	r0, [r7, #12]
     8b6:	460b      	mov	r3, r1
     8b8:	607a      	str	r2, [r7, #4]
     8ba:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8bc:	7afb      	ldrb	r3, [r7, #11]
     8be:	68fa      	ldr	r2, [r7, #12]
     8c0:	01db      	lsls	r3, r3, #7
     8c2:	4413      	add	r3, r2
     8c4:	3318      	adds	r3, #24
     8c6:	687a      	ldr	r2, [r7, #4]
     8c8:	601a      	str	r2, [r3, #0]
}
     8ca:	bf00      	nop
     8cc:	3714      	adds	r7, #20
     8ce:	46bd      	mov	sp, r7
     8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8d4:	4770      	bx	lr

000008d6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     8d6:	b480      	push	{r7}
     8d8:	b085      	sub	sp, #20
     8da:	af00      	add	r7, sp, #0
     8dc:	60f8      	str	r0, [r7, #12]
     8de:	460b      	mov	r3, r1
     8e0:	607a      	str	r2, [r7, #4]
     8e2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8e4:	7afb      	ldrb	r3, [r7, #11]
     8e6:	68fa      	ldr	r2, [r7, #12]
     8e8:	01db      	lsls	r3, r3, #7
     8ea:	4413      	add	r3, r2
     8ec:	3314      	adds	r3, #20
     8ee:	687a      	ldr	r2, [r7, #4]
     8f0:	601a      	str	r2, [r3, #0]
}
     8f2:	bf00      	nop
     8f4:	3714      	adds	r7, #20
     8f6:	46bd      	mov	sp, r7
     8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fc:	4770      	bx	lr

000008fe <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     8fe:	b480      	push	{r7}
     900:	b085      	sub	sp, #20
     902:	af00      	add	r7, sp, #0
     904:	6078      	str	r0, [r7, #4]
     906:	4608      	mov	r0, r1
     908:	4611      	mov	r1, r2
     90a:	461a      	mov	r2, r3
     90c:	4603      	mov	r3, r0
     90e:	70fb      	strb	r3, [r7, #3]
     910:	460b      	mov	r3, r1
     912:	70bb      	strb	r3, [r7, #2]
     914:	4613      	mov	r3, r2
     916:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     918:	78fa      	ldrb	r2, [r7, #3]
     91a:	78bb      	ldrb	r3, [r7, #2]
     91c:	6879      	ldr	r1, [r7, #4]
     91e:	01d2      	lsls	r2, r2, #7
     920:	440a      	add	r2, r1
     922:	4413      	add	r3, r2
     924:	3330      	adds	r3, #48	; 0x30
     926:	781b      	ldrb	r3, [r3, #0]
     928:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     92a:	7bfb      	ldrb	r3, [r7, #15]
     92c:	f023 030f 	bic.w	r3, r3, #15
     930:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     932:	787b      	ldrb	r3, [r7, #1]
     934:	f003 030f 	and.w	r3, r3, #15
     938:	b2da      	uxtb	r2, r3
     93a:	7bfb      	ldrb	r3, [r7, #15]
     93c:	4313      	orrs	r3, r2
     93e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     940:	78fa      	ldrb	r2, [r7, #3]
     942:	78bb      	ldrb	r3, [r7, #2]
     944:	6879      	ldr	r1, [r7, #4]
     946:	01d2      	lsls	r2, r2, #7
     948:	440a      	add	r2, r1
     94a:	4413      	add	r3, r2
     94c:	3330      	adds	r3, #48	; 0x30
     94e:	7bfa      	ldrb	r2, [r7, #15]
     950:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     952:	bf00      	nop
     954:	3714      	adds	r7, #20
     956:	46bd      	mov	sp, r7
     958:	f85d 7b04 	ldr.w	r7, [sp], #4
     95c:	4770      	bx	lr

0000095e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     95e:	b480      	push	{r7}
     960:	b085      	sub	sp, #20
     962:	af00      	add	r7, sp, #0
     964:	6078      	str	r0, [r7, #4]
     966:	4608      	mov	r0, r1
     968:	4611      	mov	r1, r2
     96a:	461a      	mov	r2, r3
     96c:	4603      	mov	r3, r0
     96e:	70fb      	strb	r3, [r7, #3]
     970:	460b      	mov	r3, r1
     972:	70bb      	strb	r3, [r7, #2]
     974:	4613      	mov	r3, r2
     976:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     978:	78fa      	ldrb	r2, [r7, #3]
     97a:	78bb      	ldrb	r3, [r7, #2]
     97c:	6879      	ldr	r1, [r7, #4]
     97e:	01d2      	lsls	r2, r2, #7
     980:	440a      	add	r2, r1
     982:	4413      	add	r3, r2
     984:	3330      	adds	r3, #48	; 0x30
     986:	781b      	ldrb	r3, [r3, #0]
     988:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     98a:	7bfb      	ldrb	r3, [r7, #15]
     98c:	f003 030f 	and.w	r3, r3, #15
     990:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     992:	787b      	ldrb	r3, [r7, #1]
     994:	011b      	lsls	r3, r3, #4
     996:	b2da      	uxtb	r2, r3
     998:	7bfb      	ldrb	r3, [r7, #15]
     99a:	4313      	orrs	r3, r2
     99c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     99e:	78fa      	ldrb	r2, [r7, #3]
     9a0:	78bb      	ldrb	r3, [r7, #2]
     9a2:	6879      	ldr	r1, [r7, #4]
     9a4:	01d2      	lsls	r2, r2, #7
     9a6:	440a      	add	r2, r1
     9a8:	4413      	add	r3, r2
     9aa:	3330      	adds	r3, #48	; 0x30
     9ac:	7bfa      	ldrb	r2, [r7, #15]
     9ae:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     9b0:	bf00      	nop
     9b2:	3714      	adds	r7, #20
     9b4:	46bd      	mov	sp, r7
     9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
     9ba:	4770      	bx	lr

000009bc <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
     9c4:	4608      	mov	r0, r1
     9c6:	4611      	mov	r1, r2
     9c8:	461a      	mov	r2, r3
     9ca:	4603      	mov	r3, r0
     9cc:	70fb      	strb	r3, [r7, #3]
     9ce:	460b      	mov	r3, r1
     9d0:	70bb      	strb	r3, [r7, #2]
     9d2:	4613      	mov	r3, r2
     9d4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9d6:	78fa      	ldrb	r2, [r7, #3]
     9d8:	78bb      	ldrb	r3, [r7, #2]
     9da:	6879      	ldr	r1, [r7, #4]
     9dc:	01d2      	lsls	r2, r2, #7
     9de:	440a      	add	r2, r1
     9e0:	4413      	add	r3, r2
     9e2:	3340      	adds	r3, #64	; 0x40
     9e4:	781b      	ldrb	r3, [r3, #0]
     9e6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     9e8:	7bfb      	ldrb	r3, [r7, #15]
     9ea:	f023 0301 	bic.w	r3, r3, #1
     9ee:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9f0:	787a      	ldrb	r2, [r7, #1]
     9f2:	7bfb      	ldrb	r3, [r7, #15]
     9f4:	4313      	orrs	r3, r2
     9f6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9f8:	78fa      	ldrb	r2, [r7, #3]
     9fa:	78bb      	ldrb	r3, [r7, #2]
     9fc:	6879      	ldr	r1, [r7, #4]
     9fe:	01d2      	lsls	r2, r2, #7
     a00:	440a      	add	r2, r1
     a02:	4413      	add	r3, r2
     a04:	3340      	adds	r3, #64	; 0x40
     a06:	7bfa      	ldrb	r2, [r7, #15]
     a08:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     a0a:	bf00      	nop
     a0c:	3714      	adds	r7, #20
     a0e:	46bd      	mov	sp, r7
     a10:	f85d 7b04 	ldr.w	r7, [sp], #4
     a14:	4770      	bx	lr

00000a16 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     a16:	b490      	push	{r4, r7}
     a18:	b082      	sub	sp, #8
     a1a:	af00      	add	r7, sp, #0
     a1c:	6078      	str	r0, [r7, #4]
     a1e:	460b      	mov	r3, r1
     a20:	70fb      	strb	r3, [r7, #3]
     a22:	4613      	mov	r3, r2
     a24:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     a26:	78fa      	ldrb	r2, [r7, #3]
     a28:	78bb      	ldrb	r3, [r7, #2]
     a2a:	78f8      	ldrb	r0, [r7, #3]
     a2c:	78b9      	ldrb	r1, [r7, #2]
     a2e:	687c      	ldr	r4, [r7, #4]
     a30:	01c0      	lsls	r0, r0, #7
     a32:	4420      	add	r0, r4
     a34:	4401      	add	r1, r0
     a36:	3140      	adds	r1, #64	; 0x40
     a38:	7809      	ldrb	r1, [r1, #0]
     a3a:	b2c9      	uxtb	r1, r1
     a3c:	f041 0104 	orr.w	r1, r1, #4
     a40:	b2c8      	uxtb	r0, r1
     a42:	6879      	ldr	r1, [r7, #4]
     a44:	01d2      	lsls	r2, r2, #7
     a46:	440a      	add	r2, r1
     a48:	4413      	add	r3, r2
     a4a:	3340      	adds	r3, #64	; 0x40
     a4c:	4602      	mov	r2, r0
     a4e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     a50:	bf00      	nop
     a52:	3708      	adds	r7, #8
     a54:	46bd      	mov	sp, r7
     a56:	bc90      	pop	{r4, r7}
     a58:	4770      	bx	lr

00000a5a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     a5a:	b490      	push	{r4, r7}
     a5c:	b082      	sub	sp, #8
     a5e:	af00      	add	r7, sp, #0
     a60:	6078      	str	r0, [r7, #4]
     a62:	460b      	mov	r3, r1
     a64:	70fb      	strb	r3, [r7, #3]
     a66:	4613      	mov	r3, r2
     a68:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a6a:	78fa      	ldrb	r2, [r7, #3]
     a6c:	78bb      	ldrb	r3, [r7, #2]
     a6e:	78f8      	ldrb	r0, [r7, #3]
     a70:	78b9      	ldrb	r1, [r7, #2]
     a72:	687c      	ldr	r4, [r7, #4]
     a74:	01c0      	lsls	r0, r0, #7
     a76:	4420      	add	r0, r4
     a78:	4401      	add	r1, r0
     a7a:	3140      	adds	r1, #64	; 0x40
     a7c:	7809      	ldrb	r1, [r1, #0]
     a7e:	b2c9      	uxtb	r1, r1
     a80:	f021 0104 	bic.w	r1, r1, #4
     a84:	b2c8      	uxtb	r0, r1
     a86:	6879      	ldr	r1, [r7, #4]
     a88:	01d2      	lsls	r2, r2, #7
     a8a:	440a      	add	r2, r1
     a8c:	4413      	add	r3, r2
     a8e:	3340      	adds	r3, #64	; 0x40
     a90:	4602      	mov	r2, r0
     a92:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     a94:	bf00      	nop
     a96:	3708      	adds	r7, #8
     a98:	46bd      	mov	sp, r7
     a9a:	bc90      	pop	{r4, r7}
     a9c:	4770      	bx	lr

00000a9e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     a9e:	b480      	push	{r7}
     aa0:	b085      	sub	sp, #20
     aa2:	af00      	add	r7, sp, #0
     aa4:	60f8      	str	r0, [r7, #12]
     aa6:	460b      	mov	r3, r1
     aa8:	607a      	str	r2, [r7, #4]
     aaa:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aac:	7afb      	ldrb	r3, [r7, #11]
     aae:	68fa      	ldr	r2, [r7, #12]
     ab0:	01db      	lsls	r3, r3, #7
     ab2:	4413      	add	r3, r2
     ab4:	3328      	adds	r3, #40	; 0x28
     ab6:	687a      	ldr	r2, [r7, #4]
     ab8:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     aba:	bf00      	nop
     abc:	3714      	adds	r7, #20
     abe:	46bd      	mov	sp, r7
     ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ac4:	4770      	bx	lr
	...

00000ac8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     ac8:	b580      	push	{r7, lr}
     aca:	b082      	sub	sp, #8
     acc:	af00      	add	r7, sp, #0
     ace:	4603      	mov	r3, r0
     ad0:	6039      	str	r1, [r7, #0]
     ad2:	71fb      	strb	r3, [r7, #7]
     ad4:	4613      	mov	r3, r2
     ad6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     ad8:	79bb      	ldrb	r3, [r7, #6]
     ada:	2b01      	cmp	r3, #1
     adc:	d01c      	beq.n	b18 <_gpio_set_direction+0x50>
     ade:	2b02      	cmp	r3, #2
     ae0:	d037      	beq.n	b52 <_gpio_set_direction+0x8a>
     ae2:	2b00      	cmp	r3, #0
     ae4:	d14e      	bne.n	b84 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     ae6:	79fb      	ldrb	r3, [r7, #7]
     ae8:	683a      	ldr	r2, [r7, #0]
     aea:	4619      	mov	r1, r3
     aec:	482a      	ldr	r0, [pc, #168]	; (b98 <_gpio_set_direction+0xd0>)
     aee:	4b2b      	ldr	r3, [pc, #172]	; (b9c <_gpio_set_direction+0xd4>)
     af0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     af2:	683b      	ldr	r3, [r7, #0]
     af4:	b29b      	uxth	r3, r3
     af6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     afa:	79fb      	ldrb	r3, [r7, #7]
     afc:	4619      	mov	r1, r3
     afe:	4826      	ldr	r0, [pc, #152]	; (b98 <_gpio_set_direction+0xd0>)
     b00:	4b27      	ldr	r3, [pc, #156]	; (ba0 <_gpio_set_direction+0xd8>)
     b02:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     b04:	683b      	ldr	r3, [r7, #0]
     b06:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     b08:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     b0c:	79fb      	ldrb	r3, [r7, #7]
     b0e:	4619      	mov	r1, r3
     b10:	4821      	ldr	r0, [pc, #132]	; (b98 <_gpio_set_direction+0xd0>)
     b12:	4b23      	ldr	r3, [pc, #140]	; (ba0 <_gpio_set_direction+0xd8>)
     b14:	4798      	blx	r3
		break;
     b16:	e03a      	b.n	b8e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     b18:	79fb      	ldrb	r3, [r7, #7]
     b1a:	683a      	ldr	r2, [r7, #0]
     b1c:	4619      	mov	r1, r3
     b1e:	481e      	ldr	r0, [pc, #120]	; (b98 <_gpio_set_direction+0xd0>)
     b20:	4b1e      	ldr	r3, [pc, #120]	; (b9c <_gpio_set_direction+0xd4>)
     b22:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     b24:	683b      	ldr	r3, [r7, #0]
     b26:	b29b      	uxth	r3, r3
     b28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     b30:	79f9      	ldrb	r1, [r7, #7]
     b32:	461a      	mov	r2, r3
     b34:	4818      	ldr	r0, [pc, #96]	; (b98 <_gpio_set_direction+0xd0>)
     b36:	4b1a      	ldr	r3, [pc, #104]	; (ba0 <_gpio_set_direction+0xd8>)
     b38:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     b3a:	683b      	ldr	r3, [r7, #0]
     b3c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     b3e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     b46:	79f9      	ldrb	r1, [r7, #7]
     b48:	461a      	mov	r2, r3
     b4a:	4813      	ldr	r0, [pc, #76]	; (b98 <_gpio_set_direction+0xd0>)
     b4c:	4b14      	ldr	r3, [pc, #80]	; (ba0 <_gpio_set_direction+0xd8>)
     b4e:	4798      	blx	r3
		break;
     b50:	e01d      	b.n	b8e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     b52:	79fb      	ldrb	r3, [r7, #7]
     b54:	683a      	ldr	r2, [r7, #0]
     b56:	4619      	mov	r1, r3
     b58:	480f      	ldr	r0, [pc, #60]	; (b98 <_gpio_set_direction+0xd0>)
     b5a:	4b12      	ldr	r3, [pc, #72]	; (ba4 <_gpio_set_direction+0xdc>)
     b5c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     b5e:	683b      	ldr	r3, [r7, #0]
     b60:	b29b      	uxth	r3, r3
     b62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     b66:	79fb      	ldrb	r3, [r7, #7]
     b68:	4619      	mov	r1, r3
     b6a:	480b      	ldr	r0, [pc, #44]	; (b98 <_gpio_set_direction+0xd0>)
     b6c:	4b0c      	ldr	r3, [pc, #48]	; (ba0 <_gpio_set_direction+0xd8>)
     b6e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     b70:	683b      	ldr	r3, [r7, #0]
     b72:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     b74:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     b78:	79fb      	ldrb	r3, [r7, #7]
     b7a:	4619      	mov	r1, r3
     b7c:	4806      	ldr	r0, [pc, #24]	; (b98 <_gpio_set_direction+0xd0>)
     b7e:	4b08      	ldr	r3, [pc, #32]	; (ba0 <_gpio_set_direction+0xd8>)
     b80:	4798      	blx	r3
		break;
     b82:	e004      	b.n	b8e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     b84:	2246      	movs	r2, #70	; 0x46
     b86:	4908      	ldr	r1, [pc, #32]	; (ba8 <_gpio_set_direction+0xe0>)
     b88:	2000      	movs	r0, #0
     b8a:	4b08      	ldr	r3, [pc, #32]	; (bac <_gpio_set_direction+0xe4>)
     b8c:	4798      	blx	r3
	}
}
     b8e:	bf00      	nop
     b90:	3708      	adds	r7, #8
     b92:	46bd      	mov	sp, r7
     b94:	bd80      	pop	{r7, pc}
     b96:	bf00      	nop
     b98:	41008000 	.word	0x41008000
     b9c:	00000887 	.word	0x00000887
     ba0:	00000a9f 	.word	0x00000a9f
     ba4:	0000085f 	.word	0x0000085f
     ba8:	0000cf24 	.word	0x0000cf24
     bac:	00002de1 	.word	0x00002de1

00000bb0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     bb0:	b580      	push	{r7, lr}
     bb2:	b082      	sub	sp, #8
     bb4:	af00      	add	r7, sp, #0
     bb6:	4603      	mov	r3, r0
     bb8:	6039      	str	r1, [r7, #0]
     bba:	71fb      	strb	r3, [r7, #7]
     bbc:	4613      	mov	r3, r2
     bbe:	71bb      	strb	r3, [r7, #6]
	if (level) {
     bc0:	79bb      	ldrb	r3, [r7, #6]
     bc2:	2b00      	cmp	r3, #0
     bc4:	d006      	beq.n	bd4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     bc6:	79fb      	ldrb	r3, [r7, #7]
     bc8:	683a      	ldr	r2, [r7, #0]
     bca:	4619      	mov	r1, r3
     bcc:	4806      	ldr	r0, [pc, #24]	; (be8 <_gpio_set_level+0x38>)
     bce:	4b07      	ldr	r3, [pc, #28]	; (bec <_gpio_set_level+0x3c>)
     bd0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     bd2:	e005      	b.n	be0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     bd4:	79fb      	ldrb	r3, [r7, #7]
     bd6:	683a      	ldr	r2, [r7, #0]
     bd8:	4619      	mov	r1, r3
     bda:	4803      	ldr	r0, [pc, #12]	; (be8 <_gpio_set_level+0x38>)
     bdc:	4b04      	ldr	r3, [pc, #16]	; (bf0 <_gpio_set_level+0x40>)
     bde:	4798      	blx	r3
}
     be0:	bf00      	nop
     be2:	3708      	adds	r7, #8
     be4:	46bd      	mov	sp, r7
     be6:	bd80      	pop	{r7, pc}
     be8:	41008000 	.word	0x41008000
     bec:	000008af 	.word	0x000008af
     bf0:	000008d7 	.word	0x000008d7

00000bf4 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     bf4:	b580      	push	{r7, lr}
     bf6:	b082      	sub	sp, #8
     bf8:	af00      	add	r7, sp, #0
     bfa:	4603      	mov	r3, r0
     bfc:	71fb      	strb	r3, [r7, #7]
     bfe:	460b      	mov	r3, r1
     c00:	71bb      	strb	r3, [r7, #6]
     c02:	4613      	mov	r3, r2
     c04:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     c06:	797b      	ldrb	r3, [r7, #5]
     c08:	2b01      	cmp	r3, #1
     c0a:	d00a      	beq.n	c22 <_gpio_set_pin_pull_mode+0x2e>
     c0c:	2b02      	cmp	r3, #2
     c0e:	d01f      	beq.n	c50 <_gpio_set_pin_pull_mode+0x5c>
     c10:	2b00      	cmp	r3, #0
     c12:	d134      	bne.n	c7e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     c14:	79ba      	ldrb	r2, [r7, #6]
     c16:	79fb      	ldrb	r3, [r7, #7]
     c18:	4619      	mov	r1, r3
     c1a:	481e      	ldr	r0, [pc, #120]	; (c94 <_gpio_set_pin_pull_mode+0xa0>)
     c1c:	4b1e      	ldr	r3, [pc, #120]	; (c98 <_gpio_set_pin_pull_mode+0xa4>)
     c1e:	4798      	blx	r3
		break;
     c20:	e033      	b.n	c8a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     c22:	79bb      	ldrb	r3, [r7, #6]
     c24:	2201      	movs	r2, #1
     c26:	409a      	lsls	r2, r3
     c28:	79fb      	ldrb	r3, [r7, #7]
     c2a:	4619      	mov	r1, r3
     c2c:	4819      	ldr	r0, [pc, #100]	; (c94 <_gpio_set_pin_pull_mode+0xa0>)
     c2e:	4b1b      	ldr	r3, [pc, #108]	; (c9c <_gpio_set_pin_pull_mode+0xa8>)
     c30:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     c32:	79ba      	ldrb	r2, [r7, #6]
     c34:	79fb      	ldrb	r3, [r7, #7]
     c36:	4619      	mov	r1, r3
     c38:	4816      	ldr	r0, [pc, #88]	; (c94 <_gpio_set_pin_pull_mode+0xa0>)
     c3a:	4b19      	ldr	r3, [pc, #100]	; (ca0 <_gpio_set_pin_pull_mode+0xac>)
     c3c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     c3e:	79bb      	ldrb	r3, [r7, #6]
     c40:	2201      	movs	r2, #1
     c42:	409a      	lsls	r2, r3
     c44:	79fb      	ldrb	r3, [r7, #7]
     c46:	4619      	mov	r1, r3
     c48:	4812      	ldr	r0, [pc, #72]	; (c94 <_gpio_set_pin_pull_mode+0xa0>)
     c4a:	4b16      	ldr	r3, [pc, #88]	; (ca4 <_gpio_set_pin_pull_mode+0xb0>)
     c4c:	4798      	blx	r3
		break;
     c4e:	e01c      	b.n	c8a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     c50:	79bb      	ldrb	r3, [r7, #6]
     c52:	2201      	movs	r2, #1
     c54:	409a      	lsls	r2, r3
     c56:	79fb      	ldrb	r3, [r7, #7]
     c58:	4619      	mov	r1, r3
     c5a:	480e      	ldr	r0, [pc, #56]	; (c94 <_gpio_set_pin_pull_mode+0xa0>)
     c5c:	4b0f      	ldr	r3, [pc, #60]	; (c9c <_gpio_set_pin_pull_mode+0xa8>)
     c5e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     c60:	79ba      	ldrb	r2, [r7, #6]
     c62:	79fb      	ldrb	r3, [r7, #7]
     c64:	4619      	mov	r1, r3
     c66:	480b      	ldr	r0, [pc, #44]	; (c94 <_gpio_set_pin_pull_mode+0xa0>)
     c68:	4b0d      	ldr	r3, [pc, #52]	; (ca0 <_gpio_set_pin_pull_mode+0xac>)
     c6a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     c6c:	79bb      	ldrb	r3, [r7, #6]
     c6e:	2201      	movs	r2, #1
     c70:	409a      	lsls	r2, r3
     c72:	79fb      	ldrb	r3, [r7, #7]
     c74:	4619      	mov	r1, r3
     c76:	4807      	ldr	r0, [pc, #28]	; (c94 <_gpio_set_pin_pull_mode+0xa0>)
     c78:	4b0b      	ldr	r3, [pc, #44]	; (ca8 <_gpio_set_pin_pull_mode+0xb4>)
     c7a:	4798      	blx	r3
		break;
     c7c:	e005      	b.n	c8a <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     c7e:	2289      	movs	r2, #137	; 0x89
     c80:	490a      	ldr	r1, [pc, #40]	; (cac <_gpio_set_pin_pull_mode+0xb8>)
     c82:	2000      	movs	r0, #0
     c84:	4b0a      	ldr	r3, [pc, #40]	; (cb0 <_gpio_set_pin_pull_mode+0xbc>)
     c86:	4798      	blx	r3
		break;
     c88:	bf00      	nop
	}
}
     c8a:	bf00      	nop
     c8c:	3708      	adds	r7, #8
     c8e:	46bd      	mov	sp, r7
     c90:	bd80      	pop	{r7, pc}
     c92:	bf00      	nop
     c94:	41008000 	.word	0x41008000
     c98:	00000a5b 	.word	0x00000a5b
     c9c:	00000887 	.word	0x00000887
     ca0:	00000a17 	.word	0x00000a17
     ca4:	000008af 	.word	0x000008af
     ca8:	000008d7 	.word	0x000008d7
     cac:	0000cf24 	.word	0x0000cf24
     cb0:	00002de1 	.word	0x00002de1

00000cb4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     cb4:	b590      	push	{r4, r7, lr}
     cb6:	b085      	sub	sp, #20
     cb8:	af00      	add	r7, sp, #0
     cba:	6078      	str	r0, [r7, #4]
     cbc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     cbe:	687b      	ldr	r3, [r7, #4]
     cc0:	095b      	lsrs	r3, r3, #5
     cc2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     cc4:	687b      	ldr	r3, [r7, #4]
     cc6:	b2db      	uxtb	r3, r3
     cc8:	f003 031f 	and.w	r3, r3, #31
     ccc:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     cce:	683b      	ldr	r3, [r7, #0]
     cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
     cd4:	d106      	bne.n	ce4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     cd6:	7bba      	ldrb	r2, [r7, #14]
     cd8:	7bf9      	ldrb	r1, [r7, #15]
     cda:	2300      	movs	r3, #0
     cdc:	4812      	ldr	r0, [pc, #72]	; (d28 <_gpio_set_pin_function+0x74>)
     cde:	4c13      	ldr	r4, [pc, #76]	; (d2c <_gpio_set_pin_function+0x78>)
     ce0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     ce2:	e01d      	b.n	d20 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     ce4:	7bba      	ldrb	r2, [r7, #14]
     ce6:	7bf9      	ldrb	r1, [r7, #15]
     ce8:	2301      	movs	r3, #1
     cea:	480f      	ldr	r0, [pc, #60]	; (d28 <_gpio_set_pin_function+0x74>)
     cec:	4c0f      	ldr	r4, [pc, #60]	; (d2c <_gpio_set_pin_function+0x78>)
     cee:	47a0      	blx	r4
		if (pin & 1) {
     cf0:	7bbb      	ldrb	r3, [r7, #14]
     cf2:	f003 0301 	and.w	r3, r3, #1
     cf6:	2b00      	cmp	r3, #0
     cf8:	d009      	beq.n	d0e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     cfa:	7bbb      	ldrb	r3, [r7, #14]
     cfc:	085b      	lsrs	r3, r3, #1
     cfe:	b2da      	uxtb	r2, r3
     d00:	683b      	ldr	r3, [r7, #0]
     d02:	b2db      	uxtb	r3, r3
     d04:	7bf9      	ldrb	r1, [r7, #15]
     d06:	4808      	ldr	r0, [pc, #32]	; (d28 <_gpio_set_pin_function+0x74>)
     d08:	4c09      	ldr	r4, [pc, #36]	; (d30 <_gpio_set_pin_function+0x7c>)
     d0a:	47a0      	blx	r4
}
     d0c:	e008      	b.n	d20 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     d0e:	7bbb      	ldrb	r3, [r7, #14]
     d10:	085b      	lsrs	r3, r3, #1
     d12:	b2da      	uxtb	r2, r3
     d14:	683b      	ldr	r3, [r7, #0]
     d16:	b2db      	uxtb	r3, r3
     d18:	7bf9      	ldrb	r1, [r7, #15]
     d1a:	4803      	ldr	r0, [pc, #12]	; (d28 <_gpio_set_pin_function+0x74>)
     d1c:	4c05      	ldr	r4, [pc, #20]	; (d34 <_gpio_set_pin_function+0x80>)
     d1e:	47a0      	blx	r4
}
     d20:	bf00      	nop
     d22:	3714      	adds	r7, #20
     d24:	46bd      	mov	sp, r7
     d26:	bd90      	pop	{r4, r7, pc}
     d28:	41008000 	.word	0x41008000
     d2c:	000009bd 	.word	0x000009bd
     d30:	0000095f 	.word	0x0000095f
     d34:	000008ff 	.word	0x000008ff

00000d38 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     d38:	b580      	push	{r7, lr}
     d3a:	b082      	sub	sp, #8
     d3c:	af00      	add	r7, sp, #0
     d3e:	4603      	mov	r3, r0
     d40:	460a      	mov	r2, r1
     d42:	71fb      	strb	r3, [r7, #7]
     d44:	4613      	mov	r3, r2
     d46:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     d48:	79fb      	ldrb	r3, [r7, #7]
     d4a:	095b      	lsrs	r3, r3, #5
     d4c:	b2d8      	uxtb	r0, r3
     d4e:	79fb      	ldrb	r3, [r7, #7]
     d50:	f003 031f 	and.w	r3, r3, #31
     d54:	b2db      	uxtb	r3, r3
     d56:	79ba      	ldrb	r2, [r7, #6]
     d58:	4619      	mov	r1, r3
     d5a:	4b03      	ldr	r3, [pc, #12]	; (d68 <gpio_set_pin_pull_mode+0x30>)
     d5c:	4798      	blx	r3
}
     d5e:	bf00      	nop
     d60:	3708      	adds	r7, #8
     d62:	46bd      	mov	sp, r7
     d64:	bd80      	pop	{r7, pc}
     d66:	bf00      	nop
     d68:	00000bf5 	.word	0x00000bf5

00000d6c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     d6c:	b580      	push	{r7, lr}
     d6e:	b082      	sub	sp, #8
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
     d74:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     d76:	6839      	ldr	r1, [r7, #0]
     d78:	6878      	ldr	r0, [r7, #4]
     d7a:	4b03      	ldr	r3, [pc, #12]	; (d88 <gpio_set_pin_function+0x1c>)
     d7c:	4798      	blx	r3
}
     d7e:	bf00      	nop
     d80:	3708      	adds	r7, #8
     d82:	46bd      	mov	sp, r7
     d84:	bd80      	pop	{r7, pc}
     d86:	bf00      	nop
     d88:	00000cb5 	.word	0x00000cb5

00000d8c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     d8c:	b580      	push	{r7, lr}
     d8e:	b082      	sub	sp, #8
     d90:	af00      	add	r7, sp, #0
     d92:	4603      	mov	r3, r0
     d94:	460a      	mov	r2, r1
     d96:	71fb      	strb	r3, [r7, #7]
     d98:	4613      	mov	r3, r2
     d9a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     d9c:	79fb      	ldrb	r3, [r7, #7]
     d9e:	095b      	lsrs	r3, r3, #5
     da0:	b2d8      	uxtb	r0, r3
     da2:	79fb      	ldrb	r3, [r7, #7]
     da4:	f003 031f 	and.w	r3, r3, #31
     da8:	2201      	movs	r2, #1
     daa:	fa02 f303 	lsl.w	r3, r2, r3
     dae:	79ba      	ldrb	r2, [r7, #6]
     db0:	4619      	mov	r1, r3
     db2:	4b03      	ldr	r3, [pc, #12]	; (dc0 <gpio_set_pin_direction+0x34>)
     db4:	4798      	blx	r3
}
     db6:	bf00      	nop
     db8:	3708      	adds	r7, #8
     dba:	46bd      	mov	sp, r7
     dbc:	bd80      	pop	{r7, pc}
     dbe:	bf00      	nop
     dc0:	00000ac9 	.word	0x00000ac9

00000dc4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     dc4:	b580      	push	{r7, lr}
     dc6:	b082      	sub	sp, #8
     dc8:	af00      	add	r7, sp, #0
     dca:	4603      	mov	r3, r0
     dcc:	460a      	mov	r2, r1
     dce:	71fb      	strb	r3, [r7, #7]
     dd0:	4613      	mov	r3, r2
     dd2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     dd4:	79fb      	ldrb	r3, [r7, #7]
     dd6:	095b      	lsrs	r3, r3, #5
     dd8:	b2d8      	uxtb	r0, r3
     dda:	79fb      	ldrb	r3, [r7, #7]
     ddc:	f003 031f 	and.w	r3, r3, #31
     de0:	2201      	movs	r2, #1
     de2:	fa02 f303 	lsl.w	r3, r2, r3
     de6:	79ba      	ldrb	r2, [r7, #6]
     de8:	4619      	mov	r1, r3
     dea:	4b03      	ldr	r3, [pc, #12]	; (df8 <gpio_set_pin_level+0x34>)
     dec:	4798      	blx	r3
}
     dee:	bf00      	nop
     df0:	3708      	adds	r7, #8
     df2:	46bd      	mov	sp, r7
     df4:	bd80      	pop	{r7, pc}
     df6:	bf00      	nop
     df8:	00000bb1 	.word	0x00000bb1

00000dfc <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     dfc:	b580      	push	{r7, lr}
     dfe:	af00      	add	r7, sp, #0
	_init_chip();
     e00:	4b01      	ldr	r3, [pc, #4]	; (e08 <init_mcu+0xc>)
     e02:	4798      	blx	r3
}
     e04:	bf00      	nop
     e06:	bd80      	pop	{r7, pc}
     e08:	00003985 	.word	0x00003985

00000e0c <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     e0c:	b580      	push	{r7, lr}
     e0e:	b082      	sub	sp, #8
     e10:	af00      	add	r7, sp, #0
     e12:	6078      	str	r0, [r7, #4]
     e14:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	2b00      	cmp	r3, #0
     e1a:	d004      	beq.n	e26 <wdt_init+0x1a>
     e1c:	683b      	ldr	r3, [r7, #0]
     e1e:	2b00      	cmp	r3, #0
     e20:	d001      	beq.n	e26 <wdt_init+0x1a>
     e22:	2301      	movs	r3, #1
     e24:	e000      	b.n	e28 <wdt_init+0x1c>
     e26:	2300      	movs	r3, #0
     e28:	f003 0301 	and.w	r3, r3, #1
     e2c:	b2db      	uxtb	r3, r3
     e2e:	2248      	movs	r2, #72	; 0x48
     e30:	4907      	ldr	r1, [pc, #28]	; (e50 <wdt_init+0x44>)
     e32:	4618      	mov	r0, r3
     e34:	4b07      	ldr	r3, [pc, #28]	; (e54 <wdt_init+0x48>)
     e36:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     e38:	687b      	ldr	r3, [r7, #4]
     e3a:	683a      	ldr	r2, [r7, #0]
     e3c:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	4618      	mov	r0, r3
     e42:	4b05      	ldr	r3, [pc, #20]	; (e58 <wdt_init+0x4c>)
     e44:	4798      	blx	r3
     e46:	4603      	mov	r3, r0
}
     e48:	4618      	mov	r0, r3
     e4a:	3708      	adds	r7, #8
     e4c:	46bd      	mov	sp, r7
     e4e:	bd80      	pop	{r7, pc}
     e50:	0000cf40 	.word	0x0000cf40
     e54:	00002de1 	.word	0x00002de1
     e58:	0000a1c1 	.word	0x0000a1c1

00000e5c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
     e5c:	b580      	push	{r7, lr}
     e5e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
     e60:	4804      	ldr	r0, [pc, #16]	; (e74 <CRC_CALC_init+0x18>)
     e62:	4b05      	ldr	r3, [pc, #20]	; (e78 <CRC_CALC_init+0x1c>)
     e64:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
     e66:	4905      	ldr	r1, [pc, #20]	; (e7c <CRC_CALC_init+0x20>)
     e68:	4805      	ldr	r0, [pc, #20]	; (e80 <CRC_CALC_init+0x24>)
     e6a:	4b06      	ldr	r3, [pc, #24]	; (e84 <CRC_CALC_init+0x28>)
     e6c:	4798      	blx	r3
}
     e6e:	bf00      	nop
     e70:	bd80      	pop	{r7, pc}
     e72:	bf00      	nop
     e74:	40000800 	.word	0x40000800
     e78:	0000065f 	.word	0x0000065f
     e7c:	41002000 	.word	0x41002000
     e80:	20000f90 	.word	0x20000f90
     e84:	00001c45 	.word	0x00001c45

00000e88 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     e88:	b580      	push	{r7, lr}
     e8a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     e8c:	2244      	movs	r2, #68	; 0x44
     e8e:	2104      	movs	r1, #4
     e90:	483f      	ldr	r0, [pc, #252]	; (f90 <EXTERNAL_IRQ_0_init+0x108>)
     e92:	4b40      	ldr	r3, [pc, #256]	; (f94 <EXTERNAL_IRQ_0_init+0x10c>)
     e94:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     e96:	4840      	ldr	r0, [pc, #256]	; (f98 <EXTERNAL_IRQ_0_init+0x110>)
     e98:	4b40      	ldr	r3, [pc, #256]	; (f9c <EXTERNAL_IRQ_0_init+0x114>)
     e9a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
     e9c:	2101      	movs	r1, #1
     e9e:	2040      	movs	r0, #64	; 0x40
     ea0:	4b3f      	ldr	r3, [pc, #252]	; (fa0 <EXTERNAL_IRQ_0_init+0x118>)
     ea2:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
     ea4:	2100      	movs	r1, #0
     ea6:	2040      	movs	r0, #64	; 0x40
     ea8:	4b3e      	ldr	r3, [pc, #248]	; (fa4 <EXTERNAL_IRQ_0_init+0x11c>)
     eaa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
     eac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
     eb0:	2040      	movs	r0, #64	; 0x40
     eb2:	4b3d      	ldr	r3, [pc, #244]	; (fa8 <EXTERNAL_IRQ_0_init+0x120>)
     eb4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
     eb6:	2101      	movs	r1, #1
     eb8:	2021      	movs	r0, #33	; 0x21
     eba:	4b39      	ldr	r3, [pc, #228]	; (fa0 <EXTERNAL_IRQ_0_init+0x118>)
     ebc:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
     ebe:	2100      	movs	r1, #0
     ec0:	2021      	movs	r0, #33	; 0x21
     ec2:	4b38      	ldr	r3, [pc, #224]	; (fa4 <EXTERNAL_IRQ_0_init+0x11c>)
     ec4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
     ec6:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
     eca:	2021      	movs	r0, #33	; 0x21
     ecc:	4b36      	ldr	r3, [pc, #216]	; (fa8 <EXTERNAL_IRQ_0_init+0x120>)
     ece:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
     ed0:	2101      	movs	r1, #1
     ed2:	2003      	movs	r0, #3
     ed4:	4b32      	ldr	r3, [pc, #200]	; (fa0 <EXTERNAL_IRQ_0_init+0x118>)
     ed6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
     ed8:	2102      	movs	r1, #2
     eda:	2003      	movs	r0, #3
     edc:	4b31      	ldr	r3, [pc, #196]	; (fa4 <EXTERNAL_IRQ_0_init+0x11c>)
     ede:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
     ee0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
     ee4:	2003      	movs	r0, #3
     ee6:	4b30      	ldr	r3, [pc, #192]	; (fa8 <EXTERNAL_IRQ_0_init+0x120>)
     ee8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
     eea:	2101      	movs	r1, #1
     eec:	2004      	movs	r0, #4
     eee:	4b2c      	ldr	r3, [pc, #176]	; (fa0 <EXTERNAL_IRQ_0_init+0x118>)
     ef0:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
     ef2:	2102      	movs	r1, #2
     ef4:	2004      	movs	r0, #4
     ef6:	4b2b      	ldr	r3, [pc, #172]	; (fa4 <EXTERNAL_IRQ_0_init+0x11c>)
     ef8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
     efa:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     efe:	2004      	movs	r0, #4
     f00:	4b29      	ldr	r3, [pc, #164]	; (fa8 <EXTERNAL_IRQ_0_init+0x120>)
     f02:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
     f04:	2101      	movs	r1, #1
     f06:	2005      	movs	r0, #5
     f08:	4b25      	ldr	r3, [pc, #148]	; (fa0 <EXTERNAL_IRQ_0_init+0x118>)
     f0a:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
     f0c:	2102      	movs	r1, #2
     f0e:	2005      	movs	r0, #5
     f10:	4b24      	ldr	r3, [pc, #144]	; (fa4 <EXTERNAL_IRQ_0_init+0x11c>)
     f12:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
     f14:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
     f18:	2005      	movs	r0, #5
     f1a:	4b23      	ldr	r3, [pc, #140]	; (fa8 <EXTERNAL_IRQ_0_init+0x120>)
     f1c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
     f1e:	2101      	movs	r1, #1
     f20:	2056      	movs	r0, #86	; 0x56
     f22:	4b1f      	ldr	r3, [pc, #124]	; (fa0 <EXTERNAL_IRQ_0_init+0x118>)
     f24:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
     f26:	2102      	movs	r1, #2
     f28:	2056      	movs	r0, #86	; 0x56
     f2a:	4b1e      	ldr	r3, [pc, #120]	; (fa4 <EXTERNAL_IRQ_0_init+0x11c>)
     f2c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
     f2e:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
     f32:	2056      	movs	r0, #86	; 0x56
     f34:	4b1c      	ldr	r3, [pc, #112]	; (fa8 <EXTERNAL_IRQ_0_init+0x120>)
     f36:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
     f38:	2101      	movs	r1, #1
     f3a:	2057      	movs	r0, #87	; 0x57
     f3c:	4b18      	ldr	r3, [pc, #96]	; (fa0 <EXTERNAL_IRQ_0_init+0x118>)
     f3e:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
     f40:	2102      	movs	r1, #2
     f42:	2057      	movs	r0, #87	; 0x57
     f44:	4b17      	ldr	r3, [pc, #92]	; (fa4 <EXTERNAL_IRQ_0_init+0x11c>)
     f46:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
     f48:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
     f4c:	2057      	movs	r0, #87	; 0x57
     f4e:	4b16      	ldr	r3, [pc, #88]	; (fa8 <EXTERNAL_IRQ_0_init+0x120>)
     f50:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
     f52:	2101      	movs	r1, #1
     f54:	2028      	movs	r0, #40	; 0x28
     f56:	4b12      	ldr	r3, [pc, #72]	; (fa0 <EXTERNAL_IRQ_0_init+0x118>)
     f58:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
     f5a:	2100      	movs	r1, #0
     f5c:	2028      	movs	r0, #40	; 0x28
     f5e:	4b11      	ldr	r3, [pc, #68]	; (fa4 <EXTERNAL_IRQ_0_init+0x11c>)
     f60:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
     f62:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
     f66:	2028      	movs	r0, #40	; 0x28
     f68:	4b0f      	ldr	r3, [pc, #60]	; (fa8 <EXTERNAL_IRQ_0_init+0x120>)
     f6a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
     f6c:	2101      	movs	r1, #1
     f6e:	2029      	movs	r0, #41	; 0x29
     f70:	4b0b      	ldr	r3, [pc, #44]	; (fa0 <EXTERNAL_IRQ_0_init+0x118>)
     f72:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
     f74:	2100      	movs	r1, #0
     f76:	2029      	movs	r0, #41	; 0x29
     f78:	4b0a      	ldr	r3, [pc, #40]	; (fa4 <EXTERNAL_IRQ_0_init+0x11c>)
     f7a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
     f7c:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
     f80:	2029      	movs	r0, #41	; 0x29
     f82:	4b09      	ldr	r3, [pc, #36]	; (fa8 <EXTERNAL_IRQ_0_init+0x120>)
     f84:	4798      	blx	r3

	ext_irq_init();
     f86:	4b09      	ldr	r3, [pc, #36]	; (fac <EXTERNAL_IRQ_0_init+0x124>)
     f88:	4798      	blx	r3
}
     f8a:	bf00      	nop
     f8c:	bd80      	pop	{r7, pc}
     f8e:	bf00      	nop
     f90:	40001c00 	.word	0x40001c00
     f94:	00000519 	.word	0x00000519
     f98:	40000800 	.word	0x40000800
     f9c:	000005ff 	.word	0x000005ff
     fa0:	00000d8d 	.word	0x00000d8d
     fa4:	00000d39 	.word	0x00000d39
     fa8:	00000d6d 	.word	0x00000d6d
     fac:	00001d0d 	.word	0x00001d0d

00000fb0 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     fb0:	b580      	push	{r7, lr}
     fb2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     fb4:	2244      	movs	r2, #68	; 0x44
     fb6:	210b      	movs	r1, #11
     fb8:	4807      	ldr	r0, [pc, #28]	; (fd8 <EVENT_SYSTEM_0_init+0x28>)
     fba:	4b08      	ldr	r3, [pc, #32]	; (fdc <EVENT_SYSTEM_0_init+0x2c>)
     fbc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     fbe:	2244      	movs	r2, #68	; 0x44
     fc0:	210c      	movs	r1, #12
     fc2:	4805      	ldr	r0, [pc, #20]	; (fd8 <EVENT_SYSTEM_0_init+0x28>)
     fc4:	4b05      	ldr	r3, [pc, #20]	; (fdc <EVENT_SYSTEM_0_init+0x2c>)
     fc6:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
     fc8:	4805      	ldr	r0, [pc, #20]	; (fe0 <EVENT_SYSTEM_0_init+0x30>)
     fca:	4b06      	ldr	r3, [pc, #24]	; (fe4 <EVENT_SYSTEM_0_init+0x34>)
     fcc:	4798      	blx	r3

	event_system_init();
     fce:	4b06      	ldr	r3, [pc, #24]	; (fe8 <EVENT_SYSTEM_0_init+0x38>)
     fd0:	4798      	blx	r3
}
     fd2:	bf00      	nop
     fd4:	bd80      	pop	{r7, pc}
     fd6:	bf00      	nop
     fd8:	40001c00 	.word	0x40001c00
     fdc:	00000519 	.word	0x00000519
     fe0:	40000800 	.word	0x40000800
     fe4:	0000067f 	.word	0x0000067f
     fe8:	00001cf9 	.word	0x00001cf9

00000fec <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
     fec:	b580      	push	{r7, lr}
     fee:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
     ff0:	2101      	movs	r1, #1
     ff2:	202b      	movs	r0, #43	; 0x2b
     ff4:	4b2b      	ldr	r3, [pc, #172]	; (10a4 <QSPI_N25Q256_PORT_init+0xb8>)
     ff6:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
     ff8:	2100      	movs	r1, #0
     ffa:	202b      	movs	r0, #43	; 0x2b
     ffc:	4b2a      	ldr	r3, [pc, #168]	; (10a8 <QSPI_N25Q256_PORT_init+0xbc>)
     ffe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1000:	492a      	ldr	r1, [pc, #168]	; (10ac <QSPI_N25Q256_PORT_init+0xc0>)
    1002:	202b      	movs	r0, #43	; 0x2b
    1004:	4b2a      	ldr	r3, [pc, #168]	; (10b0 <QSPI_N25Q256_PORT_init+0xc4>)
    1006:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1008:	2102      	movs	r1, #2
    100a:	2008      	movs	r0, #8
    100c:	4b25      	ldr	r3, [pc, #148]	; (10a4 <QSPI_N25Q256_PORT_init+0xb8>)
    100e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1010:	2100      	movs	r1, #0
    1012:	2008      	movs	r0, #8
    1014:	4b27      	ldr	r3, [pc, #156]	; (10b4 <QSPI_N25Q256_PORT_init+0xc8>)
    1016:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1018:	2100      	movs	r1, #0
    101a:	2008      	movs	r0, #8
    101c:	4b22      	ldr	r3, [pc, #136]	; (10a8 <QSPI_N25Q256_PORT_init+0xbc>)
    101e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1020:	4925      	ldr	r1, [pc, #148]	; (10b8 <QSPI_N25Q256_PORT_init+0xcc>)
    1022:	2008      	movs	r0, #8
    1024:	4b22      	ldr	r3, [pc, #136]	; (10b0 <QSPI_N25Q256_PORT_init+0xc4>)
    1026:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1028:	2102      	movs	r1, #2
    102a:	2009      	movs	r0, #9
    102c:	4b1d      	ldr	r3, [pc, #116]	; (10a4 <QSPI_N25Q256_PORT_init+0xb8>)
    102e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1030:	2100      	movs	r1, #0
    1032:	2009      	movs	r0, #9
    1034:	4b1f      	ldr	r3, [pc, #124]	; (10b4 <QSPI_N25Q256_PORT_init+0xc8>)
    1036:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1038:	2100      	movs	r1, #0
    103a:	2009      	movs	r0, #9
    103c:	4b1a      	ldr	r3, [pc, #104]	; (10a8 <QSPI_N25Q256_PORT_init+0xbc>)
    103e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1040:	491e      	ldr	r1, [pc, #120]	; (10bc <QSPI_N25Q256_PORT_init+0xd0>)
    1042:	2009      	movs	r0, #9
    1044:	4b1a      	ldr	r3, [pc, #104]	; (10b0 <QSPI_N25Q256_PORT_init+0xc4>)
    1046:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1048:	2102      	movs	r1, #2
    104a:	200a      	movs	r0, #10
    104c:	4b15      	ldr	r3, [pc, #84]	; (10a4 <QSPI_N25Q256_PORT_init+0xb8>)
    104e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1050:	2100      	movs	r1, #0
    1052:	200a      	movs	r0, #10
    1054:	4b17      	ldr	r3, [pc, #92]	; (10b4 <QSPI_N25Q256_PORT_init+0xc8>)
    1056:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1058:	2100      	movs	r1, #0
    105a:	200a      	movs	r0, #10
    105c:	4b12      	ldr	r3, [pc, #72]	; (10a8 <QSPI_N25Q256_PORT_init+0xbc>)
    105e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1060:	4917      	ldr	r1, [pc, #92]	; (10c0 <QSPI_N25Q256_PORT_init+0xd4>)
    1062:	200a      	movs	r0, #10
    1064:	4b12      	ldr	r3, [pc, #72]	; (10b0 <QSPI_N25Q256_PORT_init+0xc4>)
    1066:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1068:	2102      	movs	r1, #2
    106a:	200b      	movs	r0, #11
    106c:	4b0d      	ldr	r3, [pc, #52]	; (10a4 <QSPI_N25Q256_PORT_init+0xb8>)
    106e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1070:	2100      	movs	r1, #0
    1072:	200b      	movs	r0, #11
    1074:	4b0f      	ldr	r3, [pc, #60]	; (10b4 <QSPI_N25Q256_PORT_init+0xc8>)
    1076:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1078:	2100      	movs	r1, #0
    107a:	200b      	movs	r0, #11
    107c:	4b0a      	ldr	r3, [pc, #40]	; (10a8 <QSPI_N25Q256_PORT_init+0xbc>)
    107e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1080:	4910      	ldr	r1, [pc, #64]	; (10c4 <QSPI_N25Q256_PORT_init+0xd8>)
    1082:	200b      	movs	r0, #11
    1084:	4b0a      	ldr	r3, [pc, #40]	; (10b0 <QSPI_N25Q256_PORT_init+0xc4>)
    1086:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1088:	2101      	movs	r1, #1
    108a:	202a      	movs	r0, #42	; 0x2a
    108c:	4b05      	ldr	r3, [pc, #20]	; (10a4 <QSPI_N25Q256_PORT_init+0xb8>)
    108e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1090:	2100      	movs	r1, #0
    1092:	202a      	movs	r0, #42	; 0x2a
    1094:	4b04      	ldr	r3, [pc, #16]	; (10a8 <QSPI_N25Q256_PORT_init+0xbc>)
    1096:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1098:	490b      	ldr	r1, [pc, #44]	; (10c8 <QSPI_N25Q256_PORT_init+0xdc>)
    109a:	202a      	movs	r0, #42	; 0x2a
    109c:	4b04      	ldr	r3, [pc, #16]	; (10b0 <QSPI_N25Q256_PORT_init+0xc4>)
    109e:	4798      	blx	r3
}
    10a0:	bf00      	nop
    10a2:	bd80      	pop	{r7, pc}
    10a4:	00000d8d 	.word	0x00000d8d
    10a8:	00000d39 	.word	0x00000d39
    10ac:	002b0007 	.word	0x002b0007
    10b0:	00000d6d 	.word	0x00000d6d
    10b4:	00000dc5 	.word	0x00000dc5
    10b8:	00080007 	.word	0x00080007
    10bc:	00090007 	.word	0x00090007
    10c0:	000a0007 	.word	0x000a0007
    10c4:	000b0007 	.word	0x000b0007
    10c8:	002a0007 	.word	0x002a0007

000010cc <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    10cc:	b580      	push	{r7, lr}
    10ce:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    10d0:	4805      	ldr	r0, [pc, #20]	; (10e8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    10d2:	4b06      	ldr	r3, [pc, #24]	; (10ec <QSPI_N25Q256_CLOCK_init+0x20>)
    10d4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    10d6:	4804      	ldr	r0, [pc, #16]	; (10e8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    10d8:	4b05      	ldr	r3, [pc, #20]	; (10f0 <QSPI_N25Q256_CLOCK_init+0x24>)
    10da:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    10dc:	4802      	ldr	r0, [pc, #8]	; (10e8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    10de:	4b05      	ldr	r3, [pc, #20]	; (10f4 <QSPI_N25Q256_CLOCK_init+0x28>)
    10e0:	4798      	blx	r3
}
    10e2:	bf00      	nop
    10e4:	bd80      	pop	{r7, pc}
    10e6:	bf00      	nop
    10e8:	40000800 	.word	0x40000800
    10ec:	0000055f 	.word	0x0000055f
    10f0:	0000059f 	.word	0x0000059f
    10f4:	0000077f 	.word	0x0000077f

000010f8 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    10f8:	b580      	push	{r7, lr}
    10fa:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    10fc:	4b04      	ldr	r3, [pc, #16]	; (1110 <QSPI_N25Q256_init+0x18>)
    10fe:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1100:	4904      	ldr	r1, [pc, #16]	; (1114 <QSPI_N25Q256_init+0x1c>)
    1102:	4805      	ldr	r0, [pc, #20]	; (1118 <QSPI_N25Q256_init+0x20>)
    1104:	4b05      	ldr	r3, [pc, #20]	; (111c <QSPI_N25Q256_init+0x24>)
    1106:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1108:	4b05      	ldr	r3, [pc, #20]	; (1120 <QSPI_N25Q256_init+0x28>)
    110a:	4798      	blx	r3
}
    110c:	bf00      	nop
    110e:	bd80      	pop	{r7, pc}
    1110:	000010cd 	.word	0x000010cd
    1114:	42003400 	.word	0x42003400
    1118:	20000e24 	.word	0x20000e24
    111c:	00002025 	.word	0x00002025
    1120:	00000fed 	.word	0x00000fed

00001124 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1124:	b580      	push	{r7, lr}
    1126:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1128:	4802      	ldr	r0, [pc, #8]	; (1134 <DATETIME_CLOCK_CLOCK_init+0x10>)
    112a:	4b03      	ldr	r3, [pc, #12]	; (1138 <DATETIME_CLOCK_CLOCK_init+0x14>)
    112c:	4798      	blx	r3
}
    112e:	bf00      	nop
    1130:	bd80      	pop	{r7, pc}
    1132:	bf00      	nop
    1134:	40000800 	.word	0x40000800
    1138:	000005df 	.word	0x000005df

0000113c <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    113c:	b580      	push	{r7, lr}
    113e:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1140:	4b03      	ldr	r3, [pc, #12]	; (1150 <DATETIME_CLOCK_init+0x14>)
    1142:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1144:	4903      	ldr	r1, [pc, #12]	; (1154 <DATETIME_CLOCK_init+0x18>)
    1146:	4804      	ldr	r0, [pc, #16]	; (1158 <DATETIME_CLOCK_init+0x1c>)
    1148:	4b04      	ldr	r3, [pc, #16]	; (115c <DATETIME_CLOCK_init+0x20>)
    114a:	4798      	blx	r3
}
    114c:	bf00      	nop
    114e:	bd80      	pop	{r7, pc}
    1150:	00001125 	.word	0x00001125
    1154:	40002400 	.word	0x40002400
    1158:	20000f6c 	.word	0x20000f6c
    115c:	00001ae9 	.word	0x00001ae9

00001160 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    1160:	b580      	push	{r7, lr}
    1162:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA17,
    1164:	2100      	movs	r1, #0
    1166:	2011      	movs	r0, #17
    1168:	4b07      	ldr	r3, [pc, #28]	; (1188 <I2C_HEATERS_PORT_init+0x28>)
    116a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17D_SERCOM3_PAD0);
    116c:	4907      	ldr	r1, [pc, #28]	; (118c <I2C_HEATERS_PORT_init+0x2c>)
    116e:	2011      	movs	r0, #17
    1170:	4b07      	ldr	r3, [pc, #28]	; (1190 <I2C_HEATERS_PORT_init+0x30>)
    1172:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA16,
    1174:	2100      	movs	r1, #0
    1176:	2010      	movs	r0, #16
    1178:	4b03      	ldr	r3, [pc, #12]	; (1188 <I2C_HEATERS_PORT_init+0x28>)
    117a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16D_SERCOM3_PAD1);
    117c:	4905      	ldr	r1, [pc, #20]	; (1194 <I2C_HEATERS_PORT_init+0x34>)
    117e:	2010      	movs	r0, #16
    1180:	4b03      	ldr	r3, [pc, #12]	; (1190 <I2C_HEATERS_PORT_init+0x30>)
    1182:	4798      	blx	r3
}
    1184:	bf00      	nop
    1186:	bd80      	pop	{r7, pc}
    1188:	00000d39 	.word	0x00000d39
    118c:	00110003 	.word	0x00110003
    1190:	00000d6d 	.word	0x00000d6d
    1194:	00100003 	.word	0x00100003

00001198 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1198:	b580      	push	{r7, lr}
    119a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    119c:	2240      	movs	r2, #64	; 0x40
    119e:	2118      	movs	r1, #24
    11a0:	4806      	ldr	r0, [pc, #24]	; (11bc <I2C_HEATERS_CLOCK_init+0x24>)
    11a2:	4b07      	ldr	r3, [pc, #28]	; (11c0 <I2C_HEATERS_CLOCK_init+0x28>)
    11a4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    11a6:	2243      	movs	r2, #67	; 0x43
    11a8:	2103      	movs	r1, #3
    11aa:	4804      	ldr	r0, [pc, #16]	; (11bc <I2C_HEATERS_CLOCK_init+0x24>)
    11ac:	4b04      	ldr	r3, [pc, #16]	; (11c0 <I2C_HEATERS_CLOCK_init+0x28>)
    11ae:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
    11b0:	4804      	ldr	r0, [pc, #16]	; (11c4 <I2C_HEATERS_CLOCK_init+0x2c>)
    11b2:	4b05      	ldr	r3, [pc, #20]	; (11c8 <I2C_HEATERS_CLOCK_init+0x30>)
    11b4:	4798      	blx	r3
}
    11b6:	bf00      	nop
    11b8:	bd80      	pop	{r7, pc}
    11ba:	bf00      	nop
    11bc:	40001c00 	.word	0x40001c00
    11c0:	00000519 	.word	0x00000519
    11c4:	40000800 	.word	0x40000800
    11c8:	0000069f 	.word	0x0000069f

000011cc <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    11cc:	b580      	push	{r7, lr}
    11ce:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    11d0:	4b04      	ldr	r3, [pc, #16]	; (11e4 <I2C_HEATERS_init+0x18>)
    11d2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM3);
    11d4:	4904      	ldr	r1, [pc, #16]	; (11e8 <I2C_HEATERS_init+0x1c>)
    11d6:	4805      	ldr	r0, [pc, #20]	; (11ec <I2C_HEATERS_init+0x20>)
    11d8:	4b05      	ldr	r3, [pc, #20]	; (11f0 <I2C_HEATERS_init+0x24>)
    11da:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    11dc:	4b05      	ldr	r3, [pc, #20]	; (11f4 <I2C_HEATERS_init+0x28>)
    11de:	4798      	blx	r3
}
    11e0:	bf00      	nop
    11e2:	bd80      	pop	{r7, pc}
    11e4:	00001199 	.word	0x00001199
    11e8:	41014000 	.word	0x41014000
    11ec:	20000ec4 	.word	0x20000ec4
    11f0:	00001e7d 	.word	0x00001e7d
    11f4:	00001161 	.word	0x00001161

000011f8 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    11f8:	b580      	push	{r7, lr}
    11fa:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    11fc:	2100      	movs	r1, #0
    11fe:	203b      	movs	r0, #59	; 0x3b
    1200:	4b11      	ldr	r3, [pc, #68]	; (1248 <SPI_TEMP_PORT_init+0x50>)
    1202:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1204:	2102      	movs	r1, #2
    1206:	203b      	movs	r0, #59	; 0x3b
    1208:	4b10      	ldr	r3, [pc, #64]	; (124c <SPI_TEMP_PORT_init+0x54>)
    120a:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    120c:	4910      	ldr	r1, [pc, #64]	; (1250 <SPI_TEMP_PORT_init+0x58>)
    120e:	203b      	movs	r0, #59	; 0x3b
    1210:	4b10      	ldr	r3, [pc, #64]	; (1254 <SPI_TEMP_PORT_init+0x5c>)
    1212:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1214:	2100      	movs	r1, #0
    1216:	203a      	movs	r0, #58	; 0x3a
    1218:	4b0b      	ldr	r3, [pc, #44]	; (1248 <SPI_TEMP_PORT_init+0x50>)
    121a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    121c:	2102      	movs	r1, #2
    121e:	203a      	movs	r0, #58	; 0x3a
    1220:	4b0a      	ldr	r3, [pc, #40]	; (124c <SPI_TEMP_PORT_init+0x54>)
    1222:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1224:	490c      	ldr	r1, [pc, #48]	; (1258 <SPI_TEMP_PORT_init+0x60>)
    1226:	203a      	movs	r0, #58	; 0x3a
    1228:	4b0a      	ldr	r3, [pc, #40]	; (1254 <SPI_TEMP_PORT_init+0x5c>)
    122a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    122c:	2101      	movs	r1, #1
    122e:	203c      	movs	r0, #60	; 0x3c
    1230:	4b06      	ldr	r3, [pc, #24]	; (124c <SPI_TEMP_PORT_init+0x54>)
    1232:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1234:	2100      	movs	r1, #0
    1236:	203c      	movs	r0, #60	; 0x3c
    1238:	4b08      	ldr	r3, [pc, #32]	; (125c <SPI_TEMP_PORT_init+0x64>)
    123a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    123c:	4908      	ldr	r1, [pc, #32]	; (1260 <SPI_TEMP_PORT_init+0x68>)
    123e:	203c      	movs	r0, #60	; 0x3c
    1240:	4b04      	ldr	r3, [pc, #16]	; (1254 <SPI_TEMP_PORT_init+0x5c>)
    1242:	4798      	blx	r3
}
    1244:	bf00      	nop
    1246:	bd80      	pop	{r7, pc}
    1248:	00000dc5 	.word	0x00000dc5
    124c:	00000d8d 	.word	0x00000d8d
    1250:	003b0003 	.word	0x003b0003
    1254:	00000d6d 	.word	0x00000d6d
    1258:	003a0003 	.word	0x003a0003
    125c:	00000d39 	.word	0x00000d39
    1260:	003c0003 	.word	0x003c0003

00001264 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1264:	b580      	push	{r7, lr}
    1266:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1268:	2245      	movs	r2, #69	; 0x45
    126a:	2122      	movs	r1, #34	; 0x22
    126c:	4806      	ldr	r0, [pc, #24]	; (1288 <SPI_TEMP_CLOCK_init+0x24>)
    126e:	4b07      	ldr	r3, [pc, #28]	; (128c <SPI_TEMP_CLOCK_init+0x28>)
    1270:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1272:	224a      	movs	r2, #74	; 0x4a
    1274:	2103      	movs	r1, #3
    1276:	4804      	ldr	r0, [pc, #16]	; (1288 <SPI_TEMP_CLOCK_init+0x24>)
    1278:	4b04      	ldr	r3, [pc, #16]	; (128c <SPI_TEMP_CLOCK_init+0x28>)
    127a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    127c:	4804      	ldr	r0, [pc, #16]	; (1290 <SPI_TEMP_CLOCK_init+0x2c>)
    127e:	4b05      	ldr	r3, [pc, #20]	; (1294 <SPI_TEMP_CLOCK_init+0x30>)
    1280:	4798      	blx	r3
}
    1282:	bf00      	nop
    1284:	bd80      	pop	{r7, pc}
    1286:	bf00      	nop
    1288:	40001c00 	.word	0x40001c00
    128c:	00000519 	.word	0x00000519
    1290:	40000800 	.word	0x40000800
    1294:	0000079f 	.word	0x0000079f

00001298 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1298:	b580      	push	{r7, lr}
    129a:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    129c:	4b05      	ldr	r3, [pc, #20]	; (12b4 <SPI_TEMP_init+0x1c>)
    129e:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    12a0:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    12a4:	4804      	ldr	r0, [pc, #16]	; (12b8 <SPI_TEMP_init+0x20>)
    12a6:	4b05      	ldr	r3, [pc, #20]	; (12bc <SPI_TEMP_init+0x24>)
    12a8:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    12aa:	4b05      	ldr	r3, [pc, #20]	; (12c0 <SPI_TEMP_init+0x28>)
    12ac:	4798      	blx	r3
}
    12ae:	bf00      	nop
    12b0:	bd80      	pop	{r7, pc}
    12b2:	bf00      	nop
    12b4:	00001265 	.word	0x00001265
    12b8:	20000dcc 	.word	0x20000dcc
    12bc:	00002135 	.word	0x00002135
    12c0:	000011f9 	.word	0x000011f9

000012c4 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    12c4:	b580      	push	{r7, lr}
    12c6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    12c8:	2100      	movs	r1, #0
    12ca:	2017      	movs	r0, #23
    12cc:	4b07      	ldr	r3, [pc, #28]	; (12ec <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    12ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    12d0:	4907      	ldr	r1, [pc, #28]	; (12f0 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    12d2:	2017      	movs	r0, #23
    12d4:	4b07      	ldr	r3, [pc, #28]	; (12f4 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    12d6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    12d8:	2100      	movs	r1, #0
    12da:	2016      	movs	r0, #22
    12dc:	4b03      	ldr	r3, [pc, #12]	; (12ec <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    12de:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    12e0:	4905      	ldr	r1, [pc, #20]	; (12f8 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    12e2:	2016      	movs	r0, #22
    12e4:	4b03      	ldr	r3, [pc, #12]	; (12f4 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    12e6:	4798      	blx	r3
}
    12e8:	bf00      	nop
    12ea:	bd80      	pop	{r7, pc}
    12ec:	00000d39 	.word	0x00000d39
    12f0:	00170003 	.word	0x00170003
    12f4:	00000d6d 	.word	0x00000d6d
    12f8:	00160003 	.word	0x00160003

000012fc <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    12fc:	b580      	push	{r7, lr}
    12fe:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1300:	2244      	movs	r2, #68	; 0x44
    1302:	2123      	movs	r1, #35	; 0x23
    1304:	4806      	ldr	r0, [pc, #24]	; (1320 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1306:	4b07      	ldr	r3, [pc, #28]	; (1324 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1308:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    130a:	224a      	movs	r2, #74	; 0x4a
    130c:	2103      	movs	r1, #3
    130e:	4804      	ldr	r0, [pc, #16]	; (1320 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1310:	4b04      	ldr	r3, [pc, #16]	; (1324 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1312:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1314:	4804      	ldr	r0, [pc, #16]	; (1328 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    1316:	4b05      	ldr	r3, [pc, #20]	; (132c <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    1318:	4798      	blx	r3
}
    131a:	bf00      	nop
    131c:	bd80      	pop	{r7, pc}
    131e:	bf00      	nop
    1320:	40001c00 	.word	0x40001c00
    1324:	00000519 	.word	0x00000519
    1328:	40000800 	.word	0x40000800
    132c:	000007bf 	.word	0x000007bf

00001330 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    1330:	b580      	push	{r7, lr}
    1332:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    1334:	4b04      	ldr	r3, [pc, #16]	; (1348 <I2C_FLAPPER_VALVE_init+0x18>)
    1336:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    1338:	4904      	ldr	r1, [pc, #16]	; (134c <I2C_FLAPPER_VALVE_init+0x1c>)
    133a:	4805      	ldr	r0, [pc, #20]	; (1350 <I2C_FLAPPER_VALVE_init+0x20>)
    133c:	4b05      	ldr	r3, [pc, #20]	; (1354 <I2C_FLAPPER_VALVE_init+0x24>)
    133e:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    1340:	4b05      	ldr	r3, [pc, #20]	; (1358 <I2C_FLAPPER_VALVE_init+0x28>)
    1342:	4798      	blx	r3
}
    1344:	bf00      	nop
    1346:	bd80      	pop	{r7, pc}
    1348:	000012fd 	.word	0x000012fd
    134c:	43000400 	.word	0x43000400
    1350:	20000e68 	.word	0x20000e68
    1354:	00001e7d 	.word	0x00001e7d
    1358:	000012c5 	.word	0x000012c5

0000135c <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    135c:	b580      	push	{r7, lr}
    135e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1360:	2100      	movs	r1, #0
    1362:	2044      	movs	r0, #68	; 0x44
    1364:	4b11      	ldr	r3, [pc, #68]	; (13ac <SPI_HI3593_PORT_init+0x50>)
    1366:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1368:	2102      	movs	r1, #2
    136a:	2044      	movs	r0, #68	; 0x44
    136c:	4b10      	ldr	r3, [pc, #64]	; (13b0 <SPI_HI3593_PORT_init+0x54>)
    136e:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1370:	4910      	ldr	r1, [pc, #64]	; (13b4 <SPI_HI3593_PORT_init+0x58>)
    1372:	2044      	movs	r0, #68	; 0x44
    1374:	4b10      	ldr	r3, [pc, #64]	; (13b8 <SPI_HI3593_PORT_init+0x5c>)
    1376:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1378:	2100      	movs	r1, #0
    137a:	2045      	movs	r0, #69	; 0x45
    137c:	4b0b      	ldr	r3, [pc, #44]	; (13ac <SPI_HI3593_PORT_init+0x50>)
    137e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1380:	2102      	movs	r1, #2
    1382:	2045      	movs	r0, #69	; 0x45
    1384:	4b0a      	ldr	r3, [pc, #40]	; (13b0 <SPI_HI3593_PORT_init+0x54>)
    1386:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1388:	490c      	ldr	r1, [pc, #48]	; (13bc <SPI_HI3593_PORT_init+0x60>)
    138a:	2045      	movs	r0, #69	; 0x45
    138c:	4b0a      	ldr	r3, [pc, #40]	; (13b8 <SPI_HI3593_PORT_init+0x5c>)
    138e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1390:	2101      	movs	r1, #1
    1392:	2047      	movs	r0, #71	; 0x47
    1394:	4b06      	ldr	r3, [pc, #24]	; (13b0 <SPI_HI3593_PORT_init+0x54>)
    1396:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1398:	2100      	movs	r1, #0
    139a:	2047      	movs	r0, #71	; 0x47
    139c:	4b08      	ldr	r3, [pc, #32]	; (13c0 <SPI_HI3593_PORT_init+0x64>)
    139e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    13a0:	4908      	ldr	r1, [pc, #32]	; (13c4 <SPI_HI3593_PORT_init+0x68>)
    13a2:	2047      	movs	r0, #71	; 0x47
    13a4:	4b04      	ldr	r3, [pc, #16]	; (13b8 <SPI_HI3593_PORT_init+0x5c>)
    13a6:	4798      	blx	r3
}
    13a8:	bf00      	nop
    13aa:	bd80      	pop	{r7, pc}
    13ac:	00000dc5 	.word	0x00000dc5
    13b0:	00000d8d 	.word	0x00000d8d
    13b4:	00440002 	.word	0x00440002
    13b8:	00000d6d 	.word	0x00000d6d
    13bc:	00450002 	.word	0x00450002
    13c0:	00000d39 	.word	0x00000d39
    13c4:	00470002 	.word	0x00470002

000013c8 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    13c8:	b580      	push	{r7, lr}
    13ca:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    13cc:	2242      	movs	r2, #66	; 0x42
    13ce:	2124      	movs	r1, #36	; 0x24
    13d0:	4806      	ldr	r0, [pc, #24]	; (13ec <SPI_HI3593_CLOCK_init+0x24>)
    13d2:	4b07      	ldr	r3, [pc, #28]	; (13f0 <SPI_HI3593_CLOCK_init+0x28>)
    13d4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    13d6:	224a      	movs	r2, #74	; 0x4a
    13d8:	2103      	movs	r1, #3
    13da:	4804      	ldr	r0, [pc, #16]	; (13ec <SPI_HI3593_CLOCK_init+0x24>)
    13dc:	4b04      	ldr	r3, [pc, #16]	; (13f0 <SPI_HI3593_CLOCK_init+0x28>)
    13de:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    13e0:	4804      	ldr	r0, [pc, #16]	; (13f4 <SPI_HI3593_CLOCK_init+0x2c>)
    13e2:	4b05      	ldr	r3, [pc, #20]	; (13f8 <SPI_HI3593_CLOCK_init+0x30>)
    13e4:	4798      	blx	r3
}
    13e6:	bf00      	nop
    13e8:	bd80      	pop	{r7, pc}
    13ea:	bf00      	nop
    13ec:	40001c00 	.word	0x40001c00
    13f0:	00000519 	.word	0x00000519
    13f4:	40000800 	.word	0x40000800
    13f8:	000007df 	.word	0x000007df

000013fc <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    13fc:	b580      	push	{r7, lr}
    13fe:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1400:	4b04      	ldr	r3, [pc, #16]	; (1414 <SPI_HI3593_init+0x18>)
    1402:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1404:	4904      	ldr	r1, [pc, #16]	; (1418 <SPI_HI3593_init+0x1c>)
    1406:	4805      	ldr	r0, [pc, #20]	; (141c <SPI_HI3593_init+0x20>)
    1408:	4b05      	ldr	r3, [pc, #20]	; (1420 <SPI_HI3593_init+0x24>)
    140a:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    140c:	4b05      	ldr	r3, [pc, #20]	; (1424 <SPI_HI3593_init+0x28>)
    140e:	4798      	blx	r3
}
    1410:	bf00      	nop
    1412:	bd80      	pop	{r7, pc}
    1414:	000013c9 	.word	0x000013c9
    1418:	43000800 	.word	0x43000800
    141c:	20000db4 	.word	0x20000db4
    1420:	00002135 	.word	0x00002135
    1424:	0000135d 	.word	0x0000135d

00001428 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    1428:	b580      	push	{r7, lr}
    142a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    142c:	2100      	movs	r1, #0
    142e:	2068      	movs	r0, #104	; 0x68
    1430:	4b07      	ldr	r3, [pc, #28]	; (1450 <I2C_FANS_PORT_init+0x28>)
    1432:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1434:	4907      	ldr	r1, [pc, #28]	; (1454 <I2C_FANS_PORT_init+0x2c>)
    1436:	2068      	movs	r0, #104	; 0x68
    1438:	4b07      	ldr	r3, [pc, #28]	; (1458 <I2C_FANS_PORT_init+0x30>)
    143a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    143c:	2100      	movs	r1, #0
    143e:	2069      	movs	r0, #105	; 0x69
    1440:	4b03      	ldr	r3, [pc, #12]	; (1450 <I2C_FANS_PORT_init+0x28>)
    1442:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1444:	4905      	ldr	r1, [pc, #20]	; (145c <I2C_FANS_PORT_init+0x34>)
    1446:	2069      	movs	r0, #105	; 0x69
    1448:	4b03      	ldr	r3, [pc, #12]	; (1458 <I2C_FANS_PORT_init+0x30>)
    144a:	4798      	blx	r3
}
    144c:	bf00      	nop
    144e:	bd80      	pop	{r7, pc}
    1450:	00000d39 	.word	0x00000d39
    1454:	00680002 	.word	0x00680002
    1458:	00000d6d 	.word	0x00000d6d
    145c:	00690002 	.word	0x00690002

00001460 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    1460:	b580      	push	{r7, lr}
    1462:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1464:	2244      	movs	r2, #68	; 0x44
    1466:	2125      	movs	r1, #37	; 0x25
    1468:	4806      	ldr	r0, [pc, #24]	; (1484 <I2C_FANS_CLOCK_init+0x24>)
    146a:	4b07      	ldr	r3, [pc, #28]	; (1488 <I2C_FANS_CLOCK_init+0x28>)
    146c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    146e:	224a      	movs	r2, #74	; 0x4a
    1470:	2103      	movs	r1, #3
    1472:	4804      	ldr	r0, [pc, #16]	; (1484 <I2C_FANS_CLOCK_init+0x24>)
    1474:	4b04      	ldr	r3, [pc, #16]	; (1488 <I2C_FANS_CLOCK_init+0x28>)
    1476:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1478:	4804      	ldr	r0, [pc, #16]	; (148c <I2C_FANS_CLOCK_init+0x2c>)
    147a:	4b05      	ldr	r3, [pc, #20]	; (1490 <I2C_FANS_CLOCK_init+0x30>)
    147c:	4798      	blx	r3
}
    147e:	bf00      	nop
    1480:	bd80      	pop	{r7, pc}
    1482:	bf00      	nop
    1484:	40001c00 	.word	0x40001c00
    1488:	00000519 	.word	0x00000519
    148c:	40000800 	.word	0x40000800
    1490:	000007ff 	.word	0x000007ff

00001494 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    1494:	b580      	push	{r7, lr}
    1496:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    1498:	4b04      	ldr	r3, [pc, #16]	; (14ac <I2C_FANS_init+0x18>)
    149a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    149c:	4904      	ldr	r1, [pc, #16]	; (14b0 <I2C_FANS_init+0x1c>)
    149e:	4805      	ldr	r0, [pc, #20]	; (14b4 <I2C_FANS_init+0x20>)
    14a0:	4b05      	ldr	r3, [pc, #20]	; (14b8 <I2C_FANS_init+0x24>)
    14a2:	4798      	blx	r3
	I2C_FANS_PORT_init();
    14a4:	4b05      	ldr	r3, [pc, #20]	; (14bc <I2C_FANS_init+0x28>)
    14a6:	4798      	blx	r3
}
    14a8:	bf00      	nop
    14aa:	bd80      	pop	{r7, pc}
    14ac:	00001461 	.word	0x00001461
    14b0:	43000c00 	.word	0x43000c00
    14b4:	20000de4 	.word	0x20000de4
    14b8:	00001e7d 	.word	0x00001e7d
    14bc:	00001429 	.word	0x00001429

000014c0 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    14c0:	b580      	push	{r7, lr}
    14c2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    14c4:	4808      	ldr	r0, [pc, #32]	; (14e8 <TIMER_USB_init+0x28>)
    14c6:	4b09      	ldr	r3, [pc, #36]	; (14ec <TIMER_USB_init+0x2c>)
    14c8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14ca:	2243      	movs	r2, #67	; 0x43
    14cc:	2109      	movs	r1, #9
    14ce:	4808      	ldr	r0, [pc, #32]	; (14f0 <TIMER_USB_init+0x30>)
    14d0:	4b08      	ldr	r3, [pc, #32]	; (14f4 <TIMER_USB_init+0x34>)
    14d2:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    14d4:	4b08      	ldr	r3, [pc, #32]	; (14f8 <TIMER_USB_init+0x38>)
    14d6:	4798      	blx	r3
    14d8:	4603      	mov	r3, r0
    14da:	461a      	mov	r2, r3
    14dc:	4907      	ldr	r1, [pc, #28]	; (14fc <TIMER_USB_init+0x3c>)
    14de:	4808      	ldr	r0, [pc, #32]	; (1500 <TIMER_USB_init+0x40>)
    14e0:	4b08      	ldr	r3, [pc, #32]	; (1504 <TIMER_USB_init+0x44>)
    14e2:	4798      	blx	r3
}
    14e4:	bf00      	nop
    14e6:	bd80      	pop	{r7, pc}
    14e8:	40000800 	.word	0x40000800
    14ec:	0000061f 	.word	0x0000061f
    14f0:	40001c00 	.word	0x40001c00
    14f4:	00000519 	.word	0x00000519
    14f8:	000076ad 	.word	0x000076ad
    14fc:	40003800 	.word	0x40003800
    1500:	20000f2c 	.word	0x20000f2c
    1504:	00002305 	.word	0x00002305

00001508 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1508:	b580      	push	{r7, lr}
    150a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    150c:	4808      	ldr	r0, [pc, #32]	; (1530 <TIMER_ARINC_init+0x28>)
    150e:	4b09      	ldr	r3, [pc, #36]	; (1534 <TIMER_ARINC_init+0x2c>)
    1510:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1512:	2244      	movs	r2, #68	; 0x44
    1514:	211a      	movs	r1, #26
    1516:	4808      	ldr	r0, [pc, #32]	; (1538 <TIMER_ARINC_init+0x30>)
    1518:	4b08      	ldr	r3, [pc, #32]	; (153c <TIMER_ARINC_init+0x34>)
    151a:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    151c:	4b08      	ldr	r3, [pc, #32]	; (1540 <TIMER_ARINC_init+0x38>)
    151e:	4798      	blx	r3
    1520:	4603      	mov	r3, r0
    1522:	461a      	mov	r2, r3
    1524:	4907      	ldr	r1, [pc, #28]	; (1544 <TIMER_ARINC_init+0x3c>)
    1526:	4808      	ldr	r0, [pc, #32]	; (1548 <TIMER_ARINC_init+0x40>)
    1528:	4b08      	ldr	r3, [pc, #32]	; (154c <TIMER_ARINC_init+0x44>)
    152a:	4798      	blx	r3
}
    152c:	bf00      	nop
    152e:	bd80      	pop	{r7, pc}
    1530:	40000800 	.word	0x40000800
    1534:	000006ff 	.word	0x000006ff
    1538:	40001c00 	.word	0x40001c00
    153c:	00000519 	.word	0x00000519
    1540:	000076ad 	.word	0x000076ad
    1544:	4101a000 	.word	0x4101a000
    1548:	20000f0c 	.word	0x20000f0c
    154c:	00002305 	.word	0x00002305

00001550 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1550:	b580      	push	{r7, lr}
    1552:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1554:	4808      	ldr	r0, [pc, #32]	; (1578 <TIMER_MAINTENANCE_init+0x28>)
    1556:	4b09      	ldr	r3, [pc, #36]	; (157c <TIMER_MAINTENANCE_init+0x2c>)
    1558:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    155a:	2246      	movs	r2, #70	; 0x46
    155c:	211e      	movs	r1, #30
    155e:	4808      	ldr	r0, [pc, #32]	; (1580 <TIMER_MAINTENANCE_init+0x30>)
    1560:	4b08      	ldr	r3, [pc, #32]	; (1584 <TIMER_MAINTENANCE_init+0x34>)
    1562:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1564:	4b08      	ldr	r3, [pc, #32]	; (1588 <TIMER_MAINTENANCE_init+0x38>)
    1566:	4798      	blx	r3
    1568:	4603      	mov	r3, r0
    156a:	461a      	mov	r2, r3
    156c:	4907      	ldr	r1, [pc, #28]	; (158c <TIMER_MAINTENANCE_init+0x3c>)
    156e:	4808      	ldr	r0, [pc, #32]	; (1590 <TIMER_MAINTENANCE_init+0x40>)
    1570:	4b08      	ldr	r3, [pc, #32]	; (1594 <TIMER_MAINTENANCE_init+0x44>)
    1572:	4798      	blx	r3
}
    1574:	bf00      	nop
    1576:	bd80      	pop	{r7, pc}
    1578:	40000800 	.word	0x40000800
    157c:	0000073f 	.word	0x0000073f
    1580:	40001c00 	.word	0x40001c00
    1584:	00000519 	.word	0x00000519
    1588:	000076ad 	.word	0x000076ad
    158c:	42001400 	.word	0x42001400
    1590:	20000e04 	.word	0x20000e04
    1594:	00002305 	.word	0x00002305

00001598 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1598:	b580      	push	{r7, lr}
    159a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    159c:	4808      	ldr	r0, [pc, #32]	; (15c0 <TIMER_INTERFACE_init+0x28>)
    159e:	4b09      	ldr	r3, [pc, #36]	; (15c4 <TIMER_INTERFACE_init+0x2c>)
    15a0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15a2:	2246      	movs	r2, #70	; 0x46
    15a4:	211e      	movs	r1, #30
    15a6:	4808      	ldr	r0, [pc, #32]	; (15c8 <TIMER_INTERFACE_init+0x30>)
    15a8:	4b08      	ldr	r3, [pc, #32]	; (15cc <TIMER_INTERFACE_init+0x34>)
    15aa:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    15ac:	4b08      	ldr	r3, [pc, #32]	; (15d0 <TIMER_INTERFACE_init+0x38>)
    15ae:	4798      	blx	r3
    15b0:	4603      	mov	r3, r0
    15b2:	461a      	mov	r2, r3
    15b4:	4907      	ldr	r1, [pc, #28]	; (15d4 <TIMER_INTERFACE_init+0x3c>)
    15b6:	4808      	ldr	r0, [pc, #32]	; (15d8 <TIMER_INTERFACE_init+0x40>)
    15b8:	4b08      	ldr	r3, [pc, #32]	; (15dc <TIMER_INTERFACE_init+0x44>)
    15ba:	4798      	blx	r3
}
    15bc:	bf00      	nop
    15be:	bd80      	pop	{r7, pc}
    15c0:	40000800 	.word	0x40000800
    15c4:	0000075f 	.word	0x0000075f
    15c8:	40001c00 	.word	0x40001c00
    15cc:	00000519 	.word	0x00000519
    15d0:	000076ad 	.word	0x000076ad
    15d4:	42001800 	.word	0x42001800
    15d8:	20000e48 	.word	0x20000e48
    15dc:	00002305 	.word	0x00002305

000015e0 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    15e0:	b580      	push	{r7, lr}
    15e2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    15e4:	4808      	ldr	r0, [pc, #32]	; (1608 <TIMER_EVENT_init+0x28>)
    15e6:	4b09      	ldr	r3, [pc, #36]	; (160c <TIMER_EVENT_init+0x2c>)
    15e8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15ea:	2246      	movs	r2, #70	; 0x46
    15ec:	2127      	movs	r1, #39	; 0x27
    15ee:	4808      	ldr	r0, [pc, #32]	; (1610 <TIMER_EVENT_init+0x30>)
    15f0:	4b08      	ldr	r3, [pc, #32]	; (1614 <TIMER_EVENT_init+0x34>)
    15f2:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    15f4:	4b08      	ldr	r3, [pc, #32]	; (1618 <TIMER_EVENT_init+0x38>)
    15f6:	4798      	blx	r3
    15f8:	4603      	mov	r3, r0
    15fa:	461a      	mov	r2, r3
    15fc:	4907      	ldr	r1, [pc, #28]	; (161c <TIMER_EVENT_init+0x3c>)
    15fe:	4808      	ldr	r0, [pc, #32]	; (1620 <TIMER_EVENT_init+0x40>)
    1600:	4b08      	ldr	r3, [pc, #32]	; (1624 <TIMER_EVENT_init+0x44>)
    1602:	4798      	blx	r3
}
    1604:	bf00      	nop
    1606:	bd80      	pop	{r7, pc}
    1608:	40000800 	.word	0x40000800
    160c:	0000081f 	.word	0x0000081f
    1610:	40001c00 	.word	0x40001c00
    1614:	00000519 	.word	0x00000519
    1618:	000076ad 	.word	0x000076ad
    161c:	43001400 	.word	0x43001400
    1620:	20000e28 	.word	0x20000e28
    1624:	00002305 	.word	0x00002305

00001628 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1628:	b480      	push	{r7}
    162a:	af00      	add	r7, sp, #0
}
    162c:	bf00      	nop
    162e:	46bd      	mov	sp, r7
    1630:	f85d 7b04 	ldr.w	r7, [sp], #4
    1634:	4770      	bx	lr
	...

00001638 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1638:	b580      	push	{r7, lr}
    163a:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    163c:	4804      	ldr	r0, [pc, #16]	; (1650 <LIVE_PULSE_CLOCK_init+0x18>)
    163e:	4b05      	ldr	r3, [pc, #20]	; (1654 <LIVE_PULSE_CLOCK_init+0x1c>)
    1640:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1642:	2240      	movs	r2, #64	; 0x40
    1644:	2127      	movs	r1, #39	; 0x27
    1646:	4804      	ldr	r0, [pc, #16]	; (1658 <LIVE_PULSE_CLOCK_init+0x20>)
    1648:	4b04      	ldr	r3, [pc, #16]	; (165c <LIVE_PULSE_CLOCK_init+0x24>)
    164a:	4798      	blx	r3
}
    164c:	bf00      	nop
    164e:	bd80      	pop	{r7, pc}
    1650:	40000800 	.word	0x40000800
    1654:	0000083f 	.word	0x0000083f
    1658:	40001c00 	.word	0x40001c00
    165c:	00000519 	.word	0x00000519

00001660 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1660:	b580      	push	{r7, lr}
    1662:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1664:	4b06      	ldr	r3, [pc, #24]	; (1680 <LIVE_PULSE_init+0x20>)
    1666:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1668:	4b06      	ldr	r3, [pc, #24]	; (1684 <LIVE_PULSE_init+0x24>)
    166a:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    166c:	4b06      	ldr	r3, [pc, #24]	; (1688 <LIVE_PULSE_init+0x28>)
    166e:	4798      	blx	r3
    1670:	4603      	mov	r3, r0
    1672:	461a      	mov	r2, r3
    1674:	4905      	ldr	r1, [pc, #20]	; (168c <LIVE_PULSE_init+0x2c>)
    1676:	4806      	ldr	r0, [pc, #24]	; (1690 <LIVE_PULSE_init+0x30>)
    1678:	4b06      	ldr	r3, [pc, #24]	; (1694 <LIVE_PULSE_init+0x34>)
    167a:	4798      	blx	r3
}
    167c:	bf00      	nop
    167e:	bd80      	pop	{r7, pc}
    1680:	00001639 	.word	0x00001639
    1684:	00001629 	.word	0x00001629
    1688:	000076c1 	.word	0x000076c1
    168c:	43001800 	.word	0x43001800
    1690:	20000e88 	.word	0x20000e88
    1694:	00001f79 	.word	0x00001f79

00001698 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1698:	b580      	push	{r7, lr}
    169a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    169c:	4804      	ldr	r0, [pc, #16]	; (16b0 <TIMER_HVAC_CLOCK_init+0x18>)
    169e:	4b05      	ldr	r3, [pc, #20]	; (16b4 <TIMER_HVAC_CLOCK_init+0x1c>)
    16a0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16a2:	2244      	movs	r2, #68	; 0x44
    16a4:	2119      	movs	r1, #25
    16a6:	4804      	ldr	r0, [pc, #16]	; (16b8 <TIMER_HVAC_CLOCK_init+0x20>)
    16a8:	4b04      	ldr	r3, [pc, #16]	; (16bc <TIMER_HVAC_CLOCK_init+0x24>)
    16aa:	4798      	blx	r3
}
    16ac:	bf00      	nop
    16ae:	bd80      	pop	{r7, pc}
    16b0:	40000800 	.word	0x40000800
    16b4:	000006bf 	.word	0x000006bf
    16b8:	40001c00 	.word	0x40001c00
    16bc:	00000519 	.word	0x00000519

000016c0 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    16c0:	b580      	push	{r7, lr}
    16c2:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    16c4:	4b05      	ldr	r3, [pc, #20]	; (16dc <TIMER_HVAC_init+0x1c>)
    16c6:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    16c8:	4b05      	ldr	r3, [pc, #20]	; (16e0 <TIMER_HVAC_init+0x20>)
    16ca:	4798      	blx	r3
    16cc:	4603      	mov	r3, r0
    16ce:	461a      	mov	r2, r3
    16d0:	4904      	ldr	r1, [pc, #16]	; (16e4 <TIMER_HVAC_init+0x24>)
    16d2:	4805      	ldr	r0, [pc, #20]	; (16e8 <TIMER_HVAC_init+0x28>)
    16d4:	4b05      	ldr	r3, [pc, #20]	; (16ec <TIMER_HVAC_init+0x2c>)
    16d6:	4798      	blx	r3
}
    16d8:	bf00      	nop
    16da:	bd80      	pop	{r7, pc}
    16dc:	00001699 	.word	0x00001699
    16e0:	00006a91 	.word	0x00006a91
    16e4:	41016000 	.word	0x41016000
    16e8:	20000f4c 	.word	0x20000f4c
    16ec:	00002305 	.word	0x00002305

000016f0 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    16f0:	b580      	push	{r7, lr}
    16f2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    16f4:	4804      	ldr	r0, [pc, #16]	; (1708 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    16f6:	4b05      	ldr	r3, [pc, #20]	; (170c <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    16f8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16fa:	2244      	movs	r2, #68	; 0x44
    16fc:	2119      	movs	r1, #25
    16fe:	4804      	ldr	r0, [pc, #16]	; (1710 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1700:	4b04      	ldr	r3, [pc, #16]	; (1714 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    1702:	4798      	blx	r3
}
    1704:	bf00      	nop
    1706:	bd80      	pop	{r7, pc}
    1708:	40000800 	.word	0x40000800
    170c:	000006df 	.word	0x000006df
    1710:	40001c00 	.word	0x40001c00
    1714:	00000519 	.word	0x00000519

00001718 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1718:	b580      	push	{r7, lr}
    171a:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    171c:	4b05      	ldr	r3, [pc, #20]	; (1734 <TIMER_TEMPERATURES_init+0x1c>)
    171e:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1720:	4b05      	ldr	r3, [pc, #20]	; (1738 <TIMER_TEMPERATURES_init+0x20>)
    1722:	4798      	blx	r3
    1724:	4603      	mov	r3, r0
    1726:	461a      	mov	r2, r3
    1728:	4904      	ldr	r1, [pc, #16]	; (173c <TIMER_TEMPERATURES_init+0x24>)
    172a:	4805      	ldr	r0, [pc, #20]	; (1740 <TIMER_TEMPERATURES_init+0x28>)
    172c:	4b05      	ldr	r3, [pc, #20]	; (1744 <TIMER_TEMPERATURES_init+0x2c>)
    172e:	4798      	blx	r3
}
    1730:	bf00      	nop
    1732:	bd80      	pop	{r7, pc}
    1734:	000016f1 	.word	0x000016f1
    1738:	00006a91 	.word	0x00006a91
    173c:	41018000 	.word	0x41018000
    1740:	20000d94 	.word	0x20000d94
    1744:	00002305 	.word	0x00002305

00001748 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    1748:	b580      	push	{r7, lr}
    174a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    174c:	4804      	ldr	r0, [pc, #16]	; (1760 <TIMER_CCU_CLOCK_init+0x18>)
    174e:	4b05      	ldr	r3, [pc, #20]	; (1764 <TIMER_CCU_CLOCK_init+0x1c>)
    1750:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1752:	2240      	movs	r2, #64	; 0x40
    1754:	211d      	movs	r1, #29
    1756:	4804      	ldr	r0, [pc, #16]	; (1768 <TIMER_CCU_CLOCK_init+0x20>)
    1758:	4b04      	ldr	r3, [pc, #16]	; (176c <TIMER_CCU_CLOCK_init+0x24>)
    175a:	4798      	blx	r3
}
    175c:	bf00      	nop
    175e:	bd80      	pop	{r7, pc}
    1760:	40000800 	.word	0x40000800
    1764:	0000071f 	.word	0x0000071f
    1768:	40001c00 	.word	0x40001c00
    176c:	00000519 	.word	0x00000519

00001770 <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    1770:	b580      	push	{r7, lr}
    1772:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    1774:	4b05      	ldr	r3, [pc, #20]	; (178c <TIMER_CCU_init+0x1c>)
    1776:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    1778:	4b05      	ldr	r3, [pc, #20]	; (1790 <TIMER_CCU_init+0x20>)
    177a:	4798      	blx	r3
    177c:	4603      	mov	r3, r0
    177e:	461a      	mov	r2, r3
    1780:	4904      	ldr	r1, [pc, #16]	; (1794 <TIMER_CCU_init+0x24>)
    1782:	4805      	ldr	r0, [pc, #20]	; (1798 <TIMER_CCU_init+0x28>)
    1784:	4b05      	ldr	r3, [pc, #20]	; (179c <TIMER_CCU_init+0x2c>)
    1786:	4798      	blx	r3
}
    1788:	bf00      	nop
    178a:	bd80      	pop	{r7, pc}
    178c:	00001749 	.word	0x00001749
    1790:	00006a91 	.word	0x00006a91
    1794:	42000c00 	.word	0x42000c00
    1798:	20000ea4 	.word	0x20000ea4
    179c:	00002305 	.word	0x00002305

000017a0 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    17a0:	b580      	push	{r7, lr}
    17a2:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    17a4:	2102      	movs	r1, #2
    17a6:	2018      	movs	r0, #24
    17a8:	4b0f      	ldr	r3, [pc, #60]	; (17e8 <CDCUSB_PORT_init+0x48>)
    17aa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    17ac:	2100      	movs	r1, #0
    17ae:	2018      	movs	r0, #24
    17b0:	4b0e      	ldr	r3, [pc, #56]	; (17ec <CDCUSB_PORT_init+0x4c>)
    17b2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    17b4:	2100      	movs	r1, #0
    17b6:	2018      	movs	r0, #24
    17b8:	4b0d      	ldr	r3, [pc, #52]	; (17f0 <CDCUSB_PORT_init+0x50>)
    17ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    17bc:	490d      	ldr	r1, [pc, #52]	; (17f4 <CDCUSB_PORT_init+0x54>)
    17be:	2018      	movs	r0, #24
    17c0:	4b0d      	ldr	r3, [pc, #52]	; (17f8 <CDCUSB_PORT_init+0x58>)
    17c2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    17c4:	2102      	movs	r1, #2
    17c6:	2019      	movs	r0, #25
    17c8:	4b07      	ldr	r3, [pc, #28]	; (17e8 <CDCUSB_PORT_init+0x48>)
    17ca:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    17cc:	2100      	movs	r1, #0
    17ce:	2019      	movs	r0, #25
    17d0:	4b06      	ldr	r3, [pc, #24]	; (17ec <CDCUSB_PORT_init+0x4c>)
    17d2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    17d4:	2100      	movs	r1, #0
    17d6:	2019      	movs	r0, #25
    17d8:	4b05      	ldr	r3, [pc, #20]	; (17f0 <CDCUSB_PORT_init+0x50>)
    17da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    17dc:	4907      	ldr	r1, [pc, #28]	; (17fc <CDCUSB_PORT_init+0x5c>)
    17de:	2019      	movs	r0, #25
    17e0:	4b05      	ldr	r3, [pc, #20]	; (17f8 <CDCUSB_PORT_init+0x58>)
    17e2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    17e4:	bf00      	nop
    17e6:	bd80      	pop	{r7, pc}
    17e8:	00000d8d 	.word	0x00000d8d
    17ec:	00000dc5 	.word	0x00000dc5
    17f0:	00000d39 	.word	0x00000d39
    17f4:	00180007 	.word	0x00180007
    17f8:	00000d6d 	.word	0x00000d6d
    17fc:	00190007 	.word	0x00190007

00001800 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1800:	b580      	push	{r7, lr}
    1802:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1804:	2242      	movs	r2, #66	; 0x42
    1806:	210a      	movs	r1, #10
    1808:	4805      	ldr	r0, [pc, #20]	; (1820 <CDCUSB_CLOCK_init+0x20>)
    180a:	4b06      	ldr	r3, [pc, #24]	; (1824 <CDCUSB_CLOCK_init+0x24>)
    180c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    180e:	4806      	ldr	r0, [pc, #24]	; (1828 <CDCUSB_CLOCK_init+0x28>)
    1810:	4b06      	ldr	r3, [pc, #24]	; (182c <CDCUSB_CLOCK_init+0x2c>)
    1812:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1814:	4804      	ldr	r0, [pc, #16]	; (1828 <CDCUSB_CLOCK_init+0x28>)
    1816:	4b06      	ldr	r3, [pc, #24]	; (1830 <CDCUSB_CLOCK_init+0x30>)
    1818:	4798      	blx	r3
}
    181a:	bf00      	nop
    181c:	bd80      	pop	{r7, pc}
    181e:	bf00      	nop
    1820:	40001c00 	.word	0x40001c00
    1824:	00000519 	.word	0x00000519
    1828:	40000800 	.word	0x40000800
    182c:	0000053f 	.word	0x0000053f
    1830:	0000063f 	.word	0x0000063f

00001834 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1834:	b580      	push	{r7, lr}
    1836:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1838:	4b03      	ldr	r3, [pc, #12]	; (1848 <CDCUSB_init+0x14>)
    183a:	4798      	blx	r3
	usb_d_init();
    183c:	4b03      	ldr	r3, [pc, #12]	; (184c <CDCUSB_init+0x18>)
    183e:	4798      	blx	r3
	CDCUSB_PORT_init();
    1840:	4b03      	ldr	r3, [pc, #12]	; (1850 <CDCUSB_init+0x1c>)
    1842:	4798      	blx	r3
}
    1844:	bf00      	nop
    1846:	bd80      	pop	{r7, pc}
    1848:	00001801 	.word	0x00001801
    184c:	0000288d 	.word	0x0000288d
    1850:	000017a1 	.word	0x000017a1

00001854 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1854:	b580      	push	{r7, lr}
    1856:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1858:	4802      	ldr	r0, [pc, #8]	; (1864 <WATCHDOG_CLOCK_init+0x10>)
    185a:	4b03      	ldr	r3, [pc, #12]	; (1868 <WATCHDOG_CLOCK_init+0x14>)
    185c:	4798      	blx	r3
}
    185e:	bf00      	nop
    1860:	bd80      	pop	{r7, pc}
    1862:	bf00      	nop
    1864:	40000800 	.word	0x40000800
    1868:	000005bf 	.word	0x000005bf

0000186c <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    186c:	b580      	push	{r7, lr}
    186e:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1870:	4b03      	ldr	r3, [pc, #12]	; (1880 <WATCHDOG_init+0x14>)
    1872:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1874:	4903      	ldr	r1, [pc, #12]	; (1884 <WATCHDOG_init+0x18>)
    1876:	4804      	ldr	r0, [pc, #16]	; (1888 <WATCHDOG_init+0x1c>)
    1878:	4b04      	ldr	r3, [pc, #16]	; (188c <WATCHDOG_init+0x20>)
    187a:	4798      	blx	r3
}
    187c:	bf00      	nop
    187e:	bd80      	pop	{r7, pc}
    1880:	00001855 	.word	0x00001855
    1884:	40002000 	.word	0x40002000
    1888:	20000f8c 	.word	0x20000f8c
    188c:	00000e0d 	.word	0x00000e0d

00001890 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1890:	b580      	push	{r7, lr}
    1892:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1894:	4904      	ldr	r1, [pc, #16]	; (18a8 <CAN_CCU_PORT_init+0x18>)
    1896:	202d      	movs	r0, #45	; 0x2d
    1898:	4b04      	ldr	r3, [pc, #16]	; (18ac <CAN_CCU_PORT_init+0x1c>)
    189a:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    189c:	4904      	ldr	r1, [pc, #16]	; (18b0 <CAN_CCU_PORT_init+0x20>)
    189e:	202c      	movs	r0, #44	; 0x2c
    18a0:	4b02      	ldr	r3, [pc, #8]	; (18ac <CAN_CCU_PORT_init+0x1c>)
    18a2:	4798      	blx	r3
}
    18a4:	bf00      	nop
    18a6:	bd80      	pop	{r7, pc}
    18a8:	002d0007 	.word	0x002d0007
    18ac:	00000d6d 	.word	0x00000d6d
    18b0:	002c0007 	.word	0x002c0007

000018b4 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    18b4:	b580      	push	{r7, lr}
    18b6:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    18b8:	4807      	ldr	r0, [pc, #28]	; (18d8 <CAN_CCU_init+0x24>)
    18ba:	4b08      	ldr	r3, [pc, #32]	; (18dc <CAN_CCU_init+0x28>)
    18bc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18be:	2249      	movs	r2, #73	; 0x49
    18c0:	211c      	movs	r1, #28
    18c2:	4807      	ldr	r0, [pc, #28]	; (18e0 <CAN_CCU_init+0x2c>)
    18c4:	4b07      	ldr	r3, [pc, #28]	; (18e4 <CAN_CCU_init+0x30>)
    18c6:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    18c8:	4907      	ldr	r1, [pc, #28]	; (18e8 <CAN_CCU_init+0x34>)
    18ca:	4808      	ldr	r0, [pc, #32]	; (18ec <CAN_CCU_init+0x38>)
    18cc:	4b08      	ldr	r3, [pc, #32]	; (18f0 <CAN_CCU_init+0x3c>)
    18ce:	4798      	blx	r3
	CAN_CCU_PORT_init();
    18d0:	4b08      	ldr	r3, [pc, #32]	; (18f4 <CAN_CCU_init+0x40>)
    18d2:	4798      	blx	r3
}
    18d4:	bf00      	nop
    18d6:	bd80      	pop	{r7, pc}
    18d8:	40000800 	.word	0x40000800
    18dc:	0000057f 	.word	0x0000057f
    18e0:	40001c00 	.word	0x40001c00
    18e4:	00000519 	.word	0x00000519
    18e8:	42000400 	.word	0x42000400
    18ec:	20000ee4 	.word	0x20000ee4
    18f0:	00001b59 	.word	0x00001b59
    18f4:	00001891 	.word	0x00001891

000018f8 <system_init>:

void system_init(void)
{
    18f8:	b580      	push	{r7, lr}
    18fa:	af00      	add	r7, sp, #0
	init_mcu();
    18fc:	4b5f      	ldr	r3, [pc, #380]	; (1a7c <system_init+0x184>)
    18fe:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1900:	2100      	movs	r1, #0
    1902:	2007      	movs	r0, #7
    1904:	4b5e      	ldr	r3, [pc, #376]	; (1a80 <system_init+0x188>)
    1906:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1908:	2102      	movs	r1, #2
    190a:	2007      	movs	r0, #7
    190c:	4b5d      	ldr	r3, [pc, #372]	; (1a84 <system_init+0x18c>)
    190e:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1910:	f04f 31ff 	mov.w	r1, #4294967295
    1914:	2007      	movs	r0, #7
    1916:	4b5c      	ldr	r3, [pc, #368]	; (1a88 <system_init+0x190>)
    1918:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    191a:	2101      	movs	r1, #1
    191c:	200f      	movs	r0, #15
    191e:	4b58      	ldr	r3, [pc, #352]	; (1a80 <system_init+0x188>)
    1920:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1922:	2102      	movs	r1, #2
    1924:	200f      	movs	r0, #15
    1926:	4b57      	ldr	r3, [pc, #348]	; (1a84 <system_init+0x18c>)
    1928:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    192a:	f04f 31ff 	mov.w	r1, #4294967295
    192e:	200f      	movs	r0, #15
    1930:	4b55      	ldr	r3, [pc, #340]	; (1a88 <system_init+0x190>)
    1932:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1934:	2101      	movs	r1, #1
    1936:	2013      	movs	r0, #19
    1938:	4b51      	ldr	r3, [pc, #324]	; (1a80 <system_init+0x188>)
    193a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    193c:	2102      	movs	r1, #2
    193e:	2013      	movs	r0, #19
    1940:	4b50      	ldr	r3, [pc, #320]	; (1a84 <system_init+0x18c>)
    1942:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1944:	f04f 31ff 	mov.w	r1, #4294967295
    1948:	2013      	movs	r0, #19
    194a:	4b4f      	ldr	r3, [pc, #316]	; (1a88 <system_init+0x190>)
    194c:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    194e:	2101      	movs	r1, #1
    1950:	201b      	movs	r0, #27
    1952:	4b4b      	ldr	r3, [pc, #300]	; (1a80 <system_init+0x188>)
    1954:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1956:	2102      	movs	r1, #2
    1958:	201b      	movs	r0, #27
    195a:	4b4a      	ldr	r3, [pc, #296]	; (1a84 <system_init+0x18c>)
    195c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    195e:	f04f 31ff 	mov.w	r1, #4294967295
    1962:	201b      	movs	r0, #27
    1964:	4b48      	ldr	r3, [pc, #288]	; (1a88 <system_init+0x190>)
    1966:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    1968:	2101      	movs	r1, #1
    196a:	2027      	movs	r0, #39	; 0x27
    196c:	4b44      	ldr	r3, [pc, #272]	; (1a80 <system_init+0x188>)
    196e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    1970:	2102      	movs	r1, #2
    1972:	2027      	movs	r0, #39	; 0x27
    1974:	4b43      	ldr	r3, [pc, #268]	; (1a84 <system_init+0x18c>)
    1976:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    1978:	f04f 31ff 	mov.w	r1, #4294967295
    197c:	2027      	movs	r0, #39	; 0x27
    197e:	4b42      	ldr	r3, [pc, #264]	; (1a88 <system_init+0x190>)
    1980:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    1982:	2101      	movs	r1, #1
    1984:	203d      	movs	r0, #61	; 0x3d
    1986:	4b3e      	ldr	r3, [pc, #248]	; (1a80 <system_init+0x188>)
    1988:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    198a:	2102      	movs	r1, #2
    198c:	203d      	movs	r0, #61	; 0x3d
    198e:	4b3d      	ldr	r3, [pc, #244]	; (1a84 <system_init+0x18c>)
    1990:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1992:	f04f 31ff 	mov.w	r1, #4294967295
    1996:	203d      	movs	r0, #61	; 0x3d
    1998:	4b3b      	ldr	r3, [pc, #236]	; (1a88 <system_init+0x190>)
    199a:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    199c:	2101      	movs	r1, #1
    199e:	203f      	movs	r0, #63	; 0x3f
    19a0:	4b38      	ldr	r3, [pc, #224]	; (1a84 <system_init+0x18c>)
    19a2:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    19a4:	2101      	movs	r1, #1
    19a6:	203f      	movs	r0, #63	; 0x3f
    19a8:	4b38      	ldr	r3, [pc, #224]	; (1a8c <system_init+0x194>)
    19aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    19ac:	f04f 31ff 	mov.w	r1, #4294967295
    19b0:	203f      	movs	r0, #63	; 0x3f
    19b2:	4b35      	ldr	r3, [pc, #212]	; (1a88 <system_init+0x190>)
    19b4:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    19b6:	2100      	movs	r1, #0
    19b8:	204d      	movs	r0, #77	; 0x4d
    19ba:	4b31      	ldr	r3, [pc, #196]	; (1a80 <system_init+0x188>)
    19bc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    19be:	2102      	movs	r1, #2
    19c0:	204d      	movs	r0, #77	; 0x4d
    19c2:	4b30      	ldr	r3, [pc, #192]	; (1a84 <system_init+0x18c>)
    19c4:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    19c6:	f04f 31ff 	mov.w	r1, #4294967295
    19ca:	204d      	movs	r0, #77	; 0x4d
    19cc:	4b2e      	ldr	r3, [pc, #184]	; (1a88 <system_init+0x190>)
    19ce:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    19d0:	2101      	movs	r1, #1
    19d2:	204e      	movs	r0, #78	; 0x4e
    19d4:	4b2a      	ldr	r3, [pc, #168]	; (1a80 <system_init+0x188>)
    19d6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    19d8:	2102      	movs	r1, #2
    19da:	204e      	movs	r0, #78	; 0x4e
    19dc:	4b29      	ldr	r3, [pc, #164]	; (1a84 <system_init+0x18c>)
    19de:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    19e0:	f04f 31ff 	mov.w	r1, #4294967295
    19e4:	204e      	movs	r0, #78	; 0x4e
    19e6:	4b28      	ldr	r3, [pc, #160]	; (1a88 <system_init+0x190>)
    19e8:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    19ea:	2100      	movs	r1, #0
    19ec:	204f      	movs	r0, #79	; 0x4f
    19ee:	4b24      	ldr	r3, [pc, #144]	; (1a80 <system_init+0x188>)
    19f0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    19f2:	2102      	movs	r1, #2
    19f4:	204f      	movs	r0, #79	; 0x4f
    19f6:	4b23      	ldr	r3, [pc, #140]	; (1a84 <system_init+0x18c>)
    19f8:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    19fa:	f04f 31ff 	mov.w	r1, #4294967295
    19fe:	204f      	movs	r0, #79	; 0x4f
    1a00:	4b21      	ldr	r3, [pc, #132]	; (1a88 <system_init+0x190>)
    1a02:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1a04:	2100      	movs	r1, #0
    1a06:	2052      	movs	r0, #82	; 0x52
    1a08:	4b1d      	ldr	r3, [pc, #116]	; (1a80 <system_init+0x188>)
    1a0a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1a0c:	2102      	movs	r1, #2
    1a0e:	2052      	movs	r0, #82	; 0x52
    1a10:	4b1c      	ldr	r3, [pc, #112]	; (1a84 <system_init+0x18c>)
    1a12:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1a14:	f04f 31ff 	mov.w	r1, #4294967295
    1a18:	2052      	movs	r0, #82	; 0x52
    1a1a:	4b1b      	ldr	r3, [pc, #108]	; (1a88 <system_init+0x190>)
    1a1c:	4798      	blx	r3

	CRC_CALC_init();
    1a1e:	4b1c      	ldr	r3, [pc, #112]	; (1a90 <system_init+0x198>)
    1a20:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1a22:	4b1c      	ldr	r3, [pc, #112]	; (1a94 <system_init+0x19c>)
    1a24:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1a26:	4b1c      	ldr	r3, [pc, #112]	; (1a98 <system_init+0x1a0>)
    1a28:	4798      	blx	r3

	QSPI_N25Q256_init();
    1a2a:	4b1c      	ldr	r3, [pc, #112]	; (1a9c <system_init+0x1a4>)
    1a2c:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1a2e:	4b1c      	ldr	r3, [pc, #112]	; (1aa0 <system_init+0x1a8>)
    1a30:	4798      	blx	r3

	I2C_HEATERS_init();
    1a32:	4b1c      	ldr	r3, [pc, #112]	; (1aa4 <system_init+0x1ac>)
    1a34:	4798      	blx	r3

	SPI_TEMP_init();
    1a36:	4b1c      	ldr	r3, [pc, #112]	; (1aa8 <system_init+0x1b0>)
    1a38:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    1a3a:	4b1c      	ldr	r3, [pc, #112]	; (1aac <system_init+0x1b4>)
    1a3c:	4798      	blx	r3

	SPI_HI3593_init();
    1a3e:	4b1c      	ldr	r3, [pc, #112]	; (1ab0 <system_init+0x1b8>)
    1a40:	4798      	blx	r3

	I2C_FANS_init();
    1a42:	4b1c      	ldr	r3, [pc, #112]	; (1ab4 <system_init+0x1bc>)
    1a44:	4798      	blx	r3

	TIMER_USB_init();
    1a46:	4b1c      	ldr	r3, [pc, #112]	; (1ab8 <system_init+0x1c0>)
    1a48:	4798      	blx	r3
	TIMER_ARINC_init();
    1a4a:	4b1c      	ldr	r3, [pc, #112]	; (1abc <system_init+0x1c4>)
    1a4c:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1a4e:	4b1c      	ldr	r3, [pc, #112]	; (1ac0 <system_init+0x1c8>)
    1a50:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1a52:	4b1c      	ldr	r3, [pc, #112]	; (1ac4 <system_init+0x1cc>)
    1a54:	4798      	blx	r3
	TIMER_EVENT_init();
    1a56:	4b1c      	ldr	r3, [pc, #112]	; (1ac8 <system_init+0x1d0>)
    1a58:	4798      	blx	r3
	LIVE_PULSE_init();
    1a5a:	4b1c      	ldr	r3, [pc, #112]	; (1acc <system_init+0x1d4>)
    1a5c:	4798      	blx	r3

	TIMER_HVAC_init();
    1a5e:	4b1c      	ldr	r3, [pc, #112]	; (1ad0 <system_init+0x1d8>)
    1a60:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    1a62:	4b1c      	ldr	r3, [pc, #112]	; (1ad4 <system_init+0x1dc>)
    1a64:	4798      	blx	r3

	TIMER_CCU_init();
    1a66:	4b1c      	ldr	r3, [pc, #112]	; (1ad8 <system_init+0x1e0>)
    1a68:	4798      	blx	r3

	CDCUSB_init();
    1a6a:	4b1c      	ldr	r3, [pc, #112]	; (1adc <system_init+0x1e4>)
    1a6c:	4798      	blx	r3

	WATCHDOG_init();
    1a6e:	4b1c      	ldr	r3, [pc, #112]	; (1ae0 <system_init+0x1e8>)
    1a70:	4798      	blx	r3
	CAN_CCU_init();
    1a72:	4b1c      	ldr	r3, [pc, #112]	; (1ae4 <system_init+0x1ec>)
    1a74:	4798      	blx	r3
}
    1a76:	bf00      	nop
    1a78:	bd80      	pop	{r7, pc}
    1a7a:	bf00      	nop
    1a7c:	00000dfd 	.word	0x00000dfd
    1a80:	00000dc5 	.word	0x00000dc5
    1a84:	00000d8d 	.word	0x00000d8d
    1a88:	00000d6d 	.word	0x00000d6d
    1a8c:	00000d39 	.word	0x00000d39
    1a90:	00000e5d 	.word	0x00000e5d
    1a94:	00000e89 	.word	0x00000e89
    1a98:	00000fb1 	.word	0x00000fb1
    1a9c:	000010f9 	.word	0x000010f9
    1aa0:	0000113d 	.word	0x0000113d
    1aa4:	000011cd 	.word	0x000011cd
    1aa8:	00001299 	.word	0x00001299
    1aac:	00001331 	.word	0x00001331
    1ab0:	000013fd 	.word	0x000013fd
    1ab4:	00001495 	.word	0x00001495
    1ab8:	000014c1 	.word	0x000014c1
    1abc:	00001509 	.word	0x00001509
    1ac0:	00001551 	.word	0x00001551
    1ac4:	00001599 	.word	0x00001599
    1ac8:	000015e1 	.word	0x000015e1
    1acc:	00001661 	.word	0x00001661
    1ad0:	000016c1 	.word	0x000016c1
    1ad4:	00001719 	.word	0x00001719
    1ad8:	00001771 	.word	0x00001771
    1adc:	00001835 	.word	0x00001835
    1ae0:	0000186d 	.word	0x0000186d
    1ae4:	000018b5 	.word	0x000018b5

00001ae8 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1ae8:	b580      	push	{r7, lr}
    1aea:	b084      	sub	sp, #16
    1aec:	af00      	add	r7, sp, #0
    1aee:	6078      	str	r0, [r7, #4]
    1af0:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1af2:	2300      	movs	r3, #0
    1af4:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1af6:	687b      	ldr	r3, [r7, #4]
    1af8:	2b00      	cmp	r3, #0
    1afa:	bf14      	ite	ne
    1afc:	2301      	movne	r3, #1
    1afe:	2300      	moveq	r3, #0
    1b00:	b2db      	uxtb	r3, r3
    1b02:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1b06:	4911      	ldr	r1, [pc, #68]	; (1b4c <calendar_init+0x64>)
    1b08:	4618      	mov	r0, r3
    1b0a:	4b11      	ldr	r3, [pc, #68]	; (1b50 <calendar_init+0x68>)
    1b0c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	681a      	ldr	r2, [r3, #0]
    1b12:	683b      	ldr	r3, [r7, #0]
    1b14:	429a      	cmp	r2, r3
    1b16:	d101      	bne.n	1b1c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1b18:	2300      	movs	r3, #0
    1b1a:	e013      	b.n	1b44 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1b1c:	687b      	ldr	r3, [r7, #4]
    1b1e:	681b      	ldr	r3, [r3, #0]
    1b20:	2b00      	cmp	r3, #0
    1b22:	d002      	beq.n	1b2a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1b24:	f06f 0311 	mvn.w	r3, #17
    1b28:	e00c      	b.n	1b44 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	683a      	ldr	r2, [r7, #0]
    1b2e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	4618      	mov	r0, r3
    1b34:	4b07      	ldr	r3, [pc, #28]	; (1b54 <calendar_init+0x6c>)
    1b36:	4798      	blx	r3
    1b38:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1b3a:	687b      	ldr	r3, [r7, #4]
    1b3c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    1b40:	619a      	str	r2, [r3, #24]

	return ret;
    1b42:	68fb      	ldr	r3, [r7, #12]
}
    1b44:	4618      	mov	r0, r3
    1b46:	3710      	adds	r7, #16
    1b48:	46bd      	mov	sp, r7
    1b4a:	bd80      	pop	{r7, pc}
    1b4c:	0000cf5c 	.word	0x0000cf5c
    1b50:	00002de1 	.word	0x00002de1
    1b54:	00005061 	.word	0x00005061

00001b58 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1b58:	b580      	push	{r7, lr}
    1b5a:	b084      	sub	sp, #16
    1b5c:	af00      	add	r7, sp, #0
    1b5e:	6078      	str	r0, [r7, #4]
    1b60:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1b62:	687b      	ldr	r3, [r7, #4]
    1b64:	2b00      	cmp	r3, #0
    1b66:	d004      	beq.n	1b72 <can_async_init+0x1a>
    1b68:	683b      	ldr	r3, [r7, #0]
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	d001      	beq.n	1b72 <can_async_init+0x1a>
    1b6e:	2301      	movs	r3, #1
    1b70:	e000      	b.n	1b74 <can_async_init+0x1c>
    1b72:	2300      	movs	r3, #0
    1b74:	f003 0301 	and.w	r3, r3, #1
    1b78:	b2db      	uxtb	r3, r3
    1b7a:	2241      	movs	r2, #65	; 0x41
    1b7c:	490e      	ldr	r1, [pc, #56]	; (1bb8 <can_async_init+0x60>)
    1b7e:	4618      	mov	r0, r3
    1b80:	4b0e      	ldr	r3, [pc, #56]	; (1bbc <can_async_init+0x64>)
    1b82:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    1b84:	687b      	ldr	r3, [r7, #4]
    1b86:	6839      	ldr	r1, [r7, #0]
    1b88:	4618      	mov	r0, r3
    1b8a:	4b0d      	ldr	r3, [pc, #52]	; (1bc0 <can_async_init+0x68>)
    1b8c:	4798      	blx	r3
    1b8e:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1b90:	68fb      	ldr	r3, [r7, #12]
    1b92:	2b00      	cmp	r3, #0
    1b94:	d001      	beq.n	1b9a <can_async_init+0x42>
		return rc;
    1b96:	68fb      	ldr	r3, [r7, #12]
    1b98:	e009      	b.n	1bae <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1b9a:	687b      	ldr	r3, [r7, #4]
    1b9c:	4a09      	ldr	r2, [pc, #36]	; (1bc4 <can_async_init+0x6c>)
    1b9e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1ba0:	687b      	ldr	r3, [r7, #4]
    1ba2:	4a09      	ldr	r2, [pc, #36]	; (1bc8 <can_async_init+0x70>)
    1ba4:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1ba6:	687b      	ldr	r3, [r7, #4]
    1ba8:	4a08      	ldr	r2, [pc, #32]	; (1bcc <can_async_init+0x74>)
    1baa:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1bac:	2300      	movs	r3, #0
}
    1bae:	4618      	mov	r0, r3
    1bb0:	3710      	adds	r7, #16
    1bb2:	46bd      	mov	sp, r7
    1bb4:	bd80      	pop	{r7, pc}
    1bb6:	bf00      	nop
    1bb8:	0000cf78 	.word	0x0000cf78
    1bbc:	00002de1 	.word	0x00002de1
    1bc0:	000032d5 	.word	0x000032d5
    1bc4:	00001bd1 	.word	0x00001bd1
    1bc8:	00001bf5 	.word	0x00001bf5
    1bcc:	00001c19 	.word	0x00001c19

00001bd0 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1bd0:	b580      	push	{r7, lr}
    1bd2:	b084      	sub	sp, #16
    1bd4:	af00      	add	r7, sp, #0
    1bd6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1bd8:	687b      	ldr	r3, [r7, #4]
    1bda:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1bdc:	68fb      	ldr	r3, [r7, #12]
    1bde:	69db      	ldr	r3, [r3, #28]
    1be0:	2b00      	cmp	r3, #0
    1be2:	d003      	beq.n	1bec <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    1be4:	68fb      	ldr	r3, [r7, #12]
    1be6:	69db      	ldr	r3, [r3, #28]
    1be8:	68f8      	ldr	r0, [r7, #12]
    1bea:	4798      	blx	r3
	}
}
    1bec:	bf00      	nop
    1bee:	3710      	adds	r7, #16
    1bf0:	46bd      	mov	sp, r7
    1bf2:	bd80      	pop	{r7, pc}

00001bf4 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1bf4:	b580      	push	{r7, lr}
    1bf6:	b084      	sub	sp, #16
    1bf8:	af00      	add	r7, sp, #0
    1bfa:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1bfc:	687b      	ldr	r3, [r7, #4]
    1bfe:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1c00:	68fb      	ldr	r3, [r7, #12]
    1c02:	6a1b      	ldr	r3, [r3, #32]
    1c04:	2b00      	cmp	r3, #0
    1c06:	d003      	beq.n	1c10 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1c08:	68fb      	ldr	r3, [r7, #12]
    1c0a:	6a1b      	ldr	r3, [r3, #32]
    1c0c:	68f8      	ldr	r0, [r7, #12]
    1c0e:	4798      	blx	r3
	}
}
    1c10:	bf00      	nop
    1c12:	3710      	adds	r7, #16
    1c14:	46bd      	mov	sp, r7
    1c16:	bd80      	pop	{r7, pc}

00001c18 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1c18:	b580      	push	{r7, lr}
    1c1a:	b084      	sub	sp, #16
    1c1c:	af00      	add	r7, sp, #0
    1c1e:	6078      	str	r0, [r7, #4]
    1c20:	460b      	mov	r3, r1
    1c22:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1c24:	687b      	ldr	r3, [r7, #4]
    1c26:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1c28:	68fb      	ldr	r3, [r7, #12]
    1c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	d005      	beq.n	1c3c <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1c30:	68fb      	ldr	r3, [r7, #12]
    1c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c34:	78fa      	ldrb	r2, [r7, #3]
    1c36:	4611      	mov	r1, r2
    1c38:	68f8      	ldr	r0, [r7, #12]
    1c3a:	4798      	blx	r3
	}
}
    1c3c:	bf00      	nop
    1c3e:	3710      	adds	r7, #16
    1c40:	46bd      	mov	sp, r7
    1c42:	bd80      	pop	{r7, pc}

00001c44 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1c44:	b580      	push	{r7, lr}
    1c46:	b082      	sub	sp, #8
    1c48:	af00      	add	r7, sp, #0
    1c4a:	6078      	str	r0, [r7, #4]
    1c4c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1c4e:	687b      	ldr	r3, [r7, #4]
    1c50:	2b00      	cmp	r3, #0
    1c52:	d004      	beq.n	1c5e <crc_sync_init+0x1a>
    1c54:	683b      	ldr	r3, [r7, #0]
    1c56:	2b00      	cmp	r3, #0
    1c58:	d001      	beq.n	1c5e <crc_sync_init+0x1a>
    1c5a:	2301      	movs	r3, #1
    1c5c:	e000      	b.n	1c60 <crc_sync_init+0x1c>
    1c5e:	2300      	movs	r3, #0
    1c60:	f003 0301 	and.w	r3, r3, #1
    1c64:	b2db      	uxtb	r3, r3
    1c66:	222b      	movs	r2, #43	; 0x2b
    1c68:	4906      	ldr	r1, [pc, #24]	; (1c84 <crc_sync_init+0x40>)
    1c6a:	4618      	mov	r0, r3
    1c6c:	4b06      	ldr	r3, [pc, #24]	; (1c88 <crc_sync_init+0x44>)
    1c6e:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	6839      	ldr	r1, [r7, #0]
    1c74:	4618      	mov	r0, r3
    1c76:	4b05      	ldr	r3, [pc, #20]	; (1c8c <crc_sync_init+0x48>)
    1c78:	4798      	blx	r3
    1c7a:	4603      	mov	r3, r0
}
    1c7c:	4618      	mov	r0, r3
    1c7e:	3708      	adds	r7, #8
    1c80:	46bd      	mov	sp, r7
    1c82:	bd80      	pop	{r7, pc}
    1c84:	0000cf94 	.word	0x0000cf94
    1c88:	00002de1 	.word	0x00002de1
    1c8c:	000039d9 	.word	0x000039d9

00001c90 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1c90:	b590      	push	{r4, r7, lr}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	4603      	mov	r3, r0
    1c98:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1c9a:	4b07      	ldr	r3, [pc, #28]	; (1cb8 <delay_us+0x28>)
    1c9c:	681c      	ldr	r4, [r3, #0]
    1c9e:	88fb      	ldrh	r3, [r7, #6]
    1ca0:	4618      	mov	r0, r3
    1ca2:	4b06      	ldr	r3, [pc, #24]	; (1cbc <delay_us+0x2c>)
    1ca4:	4798      	blx	r3
    1ca6:	4603      	mov	r3, r0
    1ca8:	4619      	mov	r1, r3
    1caa:	4620      	mov	r0, r4
    1cac:	4b04      	ldr	r3, [pc, #16]	; (1cc0 <delay_us+0x30>)
    1cae:	4798      	blx	r3
}
    1cb0:	bf00      	nop
    1cb2:	370c      	adds	r7, #12
    1cb4:	46bd      	mov	sp, r7
    1cb6:	bd90      	pop	{r4, r7, pc}
    1cb8:	200006cc 	.word	0x200006cc
    1cbc:	00003729 	.word	0x00003729
    1cc0:	000038c1 	.word	0x000038c1

00001cc4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1cc4:	b590      	push	{r4, r7, lr}
    1cc6:	b083      	sub	sp, #12
    1cc8:	af00      	add	r7, sp, #0
    1cca:	4603      	mov	r3, r0
    1ccc:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1cce:	4b07      	ldr	r3, [pc, #28]	; (1cec <delay_ms+0x28>)
    1cd0:	681c      	ldr	r4, [r3, #0]
    1cd2:	88fb      	ldrh	r3, [r7, #6]
    1cd4:	4618      	mov	r0, r3
    1cd6:	4b06      	ldr	r3, [pc, #24]	; (1cf0 <delay_ms+0x2c>)
    1cd8:	4798      	blx	r3
    1cda:	4603      	mov	r3, r0
    1cdc:	4619      	mov	r1, r3
    1cde:	4620      	mov	r0, r4
    1ce0:	4b04      	ldr	r3, [pc, #16]	; (1cf4 <delay_ms+0x30>)
    1ce2:	4798      	blx	r3
}
    1ce4:	bf00      	nop
    1ce6:	370c      	adds	r7, #12
    1ce8:	46bd      	mov	sp, r7
    1cea:	bd90      	pop	{r4, r7, pc}
    1cec:	200006cc 	.word	0x200006cc
    1cf0:	00003895 	.word	0x00003895
    1cf4:	000038c1 	.word	0x000038c1

00001cf8 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1cf8:	b580      	push	{r7, lr}
    1cfa:	af00      	add	r7, sp, #0
	return _event_system_init();
    1cfc:	4b02      	ldr	r3, [pc, #8]	; (1d08 <event_system_init+0x10>)
    1cfe:	4798      	blx	r3
    1d00:	4603      	mov	r3, r0
}
    1d02:	4618      	mov	r0, r3
    1d04:	bd80      	pop	{r7, pc}
    1d06:	bf00      	nop
    1d08:	000040bd 	.word	0x000040bd

00001d0c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1d0c:	b580      	push	{r7, lr}
    1d0e:	b082      	sub	sp, #8
    1d10:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1d12:	2300      	movs	r3, #0
    1d14:	80fb      	strh	r3, [r7, #6]
    1d16:	e00e      	b.n	1d36 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1d18:	88fb      	ldrh	r3, [r7, #6]
    1d1a:	4a0c      	ldr	r2, [pc, #48]	; (1d4c <ext_irq_init+0x40>)
    1d1c:	00db      	lsls	r3, r3, #3
    1d1e:	4413      	add	r3, r2
    1d20:	f04f 32ff 	mov.w	r2, #4294967295
    1d24:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1d26:	88fb      	ldrh	r3, [r7, #6]
    1d28:	4a08      	ldr	r2, [pc, #32]	; (1d4c <ext_irq_init+0x40>)
    1d2a:	2100      	movs	r1, #0
    1d2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1d30:	88fb      	ldrh	r3, [r7, #6]
    1d32:	3301      	adds	r3, #1
    1d34:	80fb      	strh	r3, [r7, #6]
    1d36:	88fb      	ldrh	r3, [r7, #6]
    1d38:	2b08      	cmp	r3, #8
    1d3a:	d9ed      	bls.n	1d18 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    1d3c:	4804      	ldr	r0, [pc, #16]	; (1d50 <ext_irq_init+0x44>)
    1d3e:	4b05      	ldr	r3, [pc, #20]	; (1d54 <ext_irq_init+0x48>)
    1d40:	4798      	blx	r3
    1d42:	4603      	mov	r3, r0
}
    1d44:	4618      	mov	r0, r3
    1d46:	3708      	adds	r7, #8
    1d48:	46bd      	mov	sp, r7
    1d4a:	bd80      	pop	{r7, pc}
    1d4c:	200006d0 	.word	0x200006d0
    1d50:	00001d59 	.word	0x00001d59
    1d54:	00003ce1 	.word	0x00003ce1

00001d58 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1d58:	b580      	push	{r7, lr}
    1d5a:	b084      	sub	sp, #16
    1d5c:	af00      	add	r7, sp, #0
    1d5e:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1d60:	2300      	movs	r3, #0
    1d62:	73fb      	strb	r3, [r7, #15]
    1d64:	2309      	movs	r3, #9
    1d66:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    1d68:	e02a      	b.n	1dc0 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    1d6a:	7bba      	ldrb	r2, [r7, #14]
    1d6c:	7bfb      	ldrb	r3, [r7, #15]
    1d6e:	4413      	add	r3, r2
    1d70:	105b      	asrs	r3, r3, #1
    1d72:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    1d74:	7b7b      	ldrb	r3, [r7, #13]
    1d76:	2b08      	cmp	r3, #8
    1d78:	d827      	bhi.n	1dca <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1d7a:	7b7b      	ldrb	r3, [r7, #13]
    1d7c:	4a16      	ldr	r2, [pc, #88]	; (1dd8 <process_ext_irq+0x80>)
    1d7e:	00db      	lsls	r3, r3, #3
    1d80:	4413      	add	r3, r2
    1d82:	685a      	ldr	r2, [r3, #4]
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	429a      	cmp	r2, r3
    1d88:	d10b      	bne.n	1da2 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    1d8a:	7b7b      	ldrb	r3, [r7, #13]
    1d8c:	4a12      	ldr	r2, [pc, #72]	; (1dd8 <process_ext_irq+0x80>)
    1d8e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1d92:	2b00      	cmp	r3, #0
    1d94:	d01b      	beq.n	1dce <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    1d96:	7b7b      	ldrb	r3, [r7, #13]
    1d98:	4a0f      	ldr	r2, [pc, #60]	; (1dd8 <process_ext_irq+0x80>)
    1d9a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1d9e:	4798      	blx	r3
			}
			return;
    1da0:	e015      	b.n	1dce <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    1da2:	7b7b      	ldrb	r3, [r7, #13]
    1da4:	4a0c      	ldr	r2, [pc, #48]	; (1dd8 <process_ext_irq+0x80>)
    1da6:	00db      	lsls	r3, r3, #3
    1da8:	4413      	add	r3, r2
    1daa:	685a      	ldr	r2, [r3, #4]
    1dac:	687b      	ldr	r3, [r7, #4]
    1dae:	429a      	cmp	r2, r3
    1db0:	d203      	bcs.n	1dba <process_ext_irq+0x62>
			lower = middle + 1;
    1db2:	7b7b      	ldrb	r3, [r7, #13]
    1db4:	3301      	adds	r3, #1
    1db6:	73fb      	strb	r3, [r7, #15]
    1db8:	e002      	b.n	1dc0 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    1dba:	7b7b      	ldrb	r3, [r7, #13]
    1dbc:	3b01      	subs	r3, #1
    1dbe:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    1dc0:	7bba      	ldrb	r2, [r7, #14]
    1dc2:	7bfb      	ldrb	r3, [r7, #15]
    1dc4:	429a      	cmp	r2, r3
    1dc6:	d2d0      	bcs.n	1d6a <process_ext_irq+0x12>
    1dc8:	e002      	b.n	1dd0 <process_ext_irq+0x78>
			return;
    1dca:	bf00      	nop
    1dcc:	e000      	b.n	1dd0 <process_ext_irq+0x78>
			return;
    1dce:	bf00      	nop
		}
	}
}
    1dd0:	3710      	adds	r7, #16
    1dd2:	46bd      	mov	sp, r7
    1dd4:	bd80      	pop	{r7, pc}
    1dd6:	bf00      	nop
    1dd8:	200006d0 	.word	0x200006d0

00001ddc <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    1ddc:	b580      	push	{r7, lr}
    1dde:	b08a      	sub	sp, #40	; 0x28
    1de0:	af00      	add	r7, sp, #0
    1de2:	60f8      	str	r0, [r7, #12]
    1de4:	60b9      	str	r1, [r7, #8]
    1de6:	4613      	mov	r3, r2
    1de8:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    1dea:	68fb      	ldr	r3, [r7, #12]
    1dec:	3b14      	subs	r3, #20
    1dee:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1df2:	8b9b      	ldrh	r3, [r3, #28]
    1df4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1df6:	88fb      	ldrh	r3, [r7, #6]
    1df8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1dfa:	f248 0301 	movw	r3, #32769	; 0x8001
    1dfe:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    1e00:	68bb      	ldr	r3, [r7, #8]
    1e02:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e06:	f107 0214 	add.w	r2, r7, #20
    1e0a:	4611      	mov	r1, r2
    1e0c:	4618      	mov	r0, r3
    1e0e:	4b06      	ldr	r3, [pc, #24]	; (1e28 <i2c_m_sync_read+0x4c>)
    1e10:	4798      	blx	r3
    1e12:	6238      	str	r0, [r7, #32]

	if (ret) {
    1e14:	6a3b      	ldr	r3, [r7, #32]
    1e16:	2b00      	cmp	r3, #0
    1e18:	d001      	beq.n	1e1e <i2c_m_sync_read+0x42>
		return ret;
    1e1a:	6a3b      	ldr	r3, [r7, #32]
    1e1c:	e000      	b.n	1e20 <i2c_m_sync_read+0x44>
	}

	return n;
    1e1e:	88fb      	ldrh	r3, [r7, #6]
}
    1e20:	4618      	mov	r0, r3
    1e22:	3728      	adds	r7, #40	; 0x28
    1e24:	46bd      	mov	sp, r7
    1e26:	bd80      	pop	{r7, pc}
    1e28:	00005d1d 	.word	0x00005d1d

00001e2c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1e2c:	b580      	push	{r7, lr}
    1e2e:	b08a      	sub	sp, #40	; 0x28
    1e30:	af00      	add	r7, sp, #0
    1e32:	60f8      	str	r0, [r7, #12]
    1e34:	60b9      	str	r1, [r7, #8]
    1e36:	4613      	mov	r3, r2
    1e38:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    1e3a:	68fb      	ldr	r3, [r7, #12]
    1e3c:	3b14      	subs	r3, #20
    1e3e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e42:	8b9b      	ldrh	r3, [r3, #28]
    1e44:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1e46:	88fb      	ldrh	r3, [r7, #6]
    1e48:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    1e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1e4e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    1e50:	68bb      	ldr	r3, [r7, #8]
    1e52:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e56:	f107 0214 	add.w	r2, r7, #20
    1e5a:	4611      	mov	r1, r2
    1e5c:	4618      	mov	r0, r3
    1e5e:	4b06      	ldr	r3, [pc, #24]	; (1e78 <i2c_m_sync_write+0x4c>)
    1e60:	4798      	blx	r3
    1e62:	6238      	str	r0, [r7, #32]

	if (ret) {
    1e64:	6a3b      	ldr	r3, [r7, #32]
    1e66:	2b00      	cmp	r3, #0
    1e68:	d001      	beq.n	1e6e <i2c_m_sync_write+0x42>
		return ret;
    1e6a:	6a3b      	ldr	r3, [r7, #32]
    1e6c:	e000      	b.n	1e70 <i2c_m_sync_write+0x44>
	}

	return n;
    1e6e:	88fb      	ldrh	r3, [r7, #6]
}
    1e70:	4618      	mov	r0, r3
    1e72:	3728      	adds	r7, #40	; 0x28
    1e74:	46bd      	mov	sp, r7
    1e76:	bd80      	pop	{r7, pc}
    1e78:	00005d1d 	.word	0x00005d1d

00001e7c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    1e7c:	b580      	push	{r7, lr}
    1e7e:	b084      	sub	sp, #16
    1e80:	af00      	add	r7, sp, #0
    1e82:	6078      	str	r0, [r7, #4]
    1e84:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1e86:	687b      	ldr	r3, [r7, #4]
    1e88:	2b00      	cmp	r3, #0
    1e8a:	bf14      	ite	ne
    1e8c:	2301      	movne	r3, #1
    1e8e:	2300      	moveq	r3, #0
    1e90:	b2db      	uxtb	r3, r3
    1e92:	225e      	movs	r2, #94	; 0x5e
    1e94:	490c      	ldr	r1, [pc, #48]	; (1ec8 <i2c_m_sync_init+0x4c>)
    1e96:	4618      	mov	r0, r3
    1e98:	4b0c      	ldr	r3, [pc, #48]	; (1ecc <i2c_m_sync_init+0x50>)
    1e9a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    1e9c:	687b      	ldr	r3, [r7, #4]
    1e9e:	6839      	ldr	r1, [r7, #0]
    1ea0:	4618      	mov	r0, r3
    1ea2:	4b0b      	ldr	r3, [pc, #44]	; (1ed0 <i2c_m_sync_init+0x54>)
    1ea4:	4798      	blx	r3
    1ea6:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    1ea8:	68fb      	ldr	r3, [r7, #12]
    1eaa:	2b00      	cmp	r3, #0
    1eac:	d001      	beq.n	1eb2 <i2c_m_sync_init+0x36>
		return init_status;
    1eae:	68fb      	ldr	r3, [r7, #12]
    1eb0:	e006      	b.n	1ec0 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    1eb2:	687b      	ldr	r3, [r7, #4]
    1eb4:	4a07      	ldr	r2, [pc, #28]	; (1ed4 <i2c_m_sync_init+0x58>)
    1eb6:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	4a07      	ldr	r2, [pc, #28]	; (1ed8 <i2c_m_sync_init+0x5c>)
    1ebc:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    1ebe:	2300      	movs	r3, #0
}
    1ec0:	4618      	mov	r0, r3
    1ec2:	3710      	adds	r7, #16
    1ec4:	46bd      	mov	sp, r7
    1ec6:	bd80      	pop	{r7, pc}
    1ec8:	0000cfb0 	.word	0x0000cfb0
    1ecc:	00002de1 	.word	0x00002de1
    1ed0:	00005abd 	.word	0x00005abd
    1ed4:	00001ddd 	.word	0x00001ddd
    1ed8:	00001e2d 	.word	0x00001e2d

00001edc <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    1edc:	b580      	push	{r7, lr}
    1ede:	b082      	sub	sp, #8
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    1ee4:	687b      	ldr	r3, [r7, #4]
    1ee6:	4618      	mov	r0, r3
    1ee8:	4b03      	ldr	r3, [pc, #12]	; (1ef8 <i2c_m_sync_enable+0x1c>)
    1eea:	4798      	blx	r3
    1eec:	4603      	mov	r3, r0
}
    1eee:	4618      	mov	r0, r3
    1ef0:	3708      	adds	r7, #8
    1ef2:	46bd      	mov	sp, r7
    1ef4:	bd80      	pop	{r7, pc}
    1ef6:	bf00      	nop
    1ef8:	00005b05 	.word	0x00005b05

00001efc <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    1efc:	b580      	push	{r7, lr}
    1efe:	b082      	sub	sp, #8
    1f00:	af00      	add	r7, sp, #0
    1f02:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	4618      	mov	r0, r3
    1f08:	4b03      	ldr	r3, [pc, #12]	; (1f18 <i2c_m_sync_disable+0x1c>)
    1f0a:	4798      	blx	r3
    1f0c:	4603      	mov	r3, r0
}
    1f0e:	4618      	mov	r0, r3
    1f10:	3708      	adds	r7, #8
    1f12:	46bd      	mov	sp, r7
    1f14:	bd80      	pop	{r7, pc}
    1f16:	bf00      	nop
    1f18:	00005b45 	.word	0x00005b45

00001f1c <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    1f1c:	b480      	push	{r7}
    1f1e:	b085      	sub	sp, #20
    1f20:	af00      	add	r7, sp, #0
    1f22:	60f8      	str	r0, [r7, #12]
    1f24:	460b      	mov	r3, r1
    1f26:	607a      	str	r2, [r7, #4]
    1f28:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    1f2a:	897b      	ldrh	r3, [r7, #10]
    1f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    1f30:	b21a      	sxth	r2, r3
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	b21b      	sxth	r3, r3
    1f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1f3a:	b21b      	sxth	r3, r3
    1f3c:	4313      	orrs	r3, r2
    1f3e:	b21b      	sxth	r3, r3
    1f40:	b29a      	uxth	r2, r3
    1f42:	68fb      	ldr	r3, [r7, #12]
    1f44:	839a      	strh	r2, [r3, #28]
    1f46:	68fb      	ldr	r3, [r7, #12]
    1f48:	8b9b      	ldrh	r3, [r3, #28]
}
    1f4a:	4618      	mov	r0, r3
    1f4c:	3714      	adds	r7, #20
    1f4e:	46bd      	mov	sp, r7
    1f50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f54:	4770      	bx	lr

00001f56 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    1f56:	b480      	push	{r7}
    1f58:	b083      	sub	sp, #12
    1f5a:	af00      	add	r7, sp, #0
    1f5c:	6078      	str	r0, [r7, #4]
    1f5e:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    1f60:	687b      	ldr	r3, [r7, #4]
    1f62:	f103 0214 	add.w	r2, r3, #20
    1f66:	683b      	ldr	r3, [r7, #0]
    1f68:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    1f6a:	2300      	movs	r3, #0
}
    1f6c:	4618      	mov	r0, r3
    1f6e:	370c      	adds	r7, #12
    1f70:	46bd      	mov	sp, r7
    1f72:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f76:	4770      	bx	lr

00001f78 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    1f78:	b580      	push	{r7, lr}
    1f7a:	b084      	sub	sp, #16
    1f7c:	af00      	add	r7, sp, #0
    1f7e:	60f8      	str	r0, [r7, #12]
    1f80:	60b9      	str	r1, [r7, #8]
    1f82:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1f84:	68fb      	ldr	r3, [r7, #12]
    1f86:	2b00      	cmp	r3, #0
    1f88:	d004      	beq.n	1f94 <pwm_init+0x1c>
    1f8a:	68bb      	ldr	r3, [r7, #8]
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	d001      	beq.n	1f94 <pwm_init+0x1c>
    1f90:	2301      	movs	r3, #1
    1f92:	e000      	b.n	1f96 <pwm_init+0x1e>
    1f94:	2300      	movs	r3, #0
    1f96:	f003 0301 	and.w	r3, r3, #1
    1f9a:	b2db      	uxtb	r3, r3
    1f9c:	2233      	movs	r2, #51	; 0x33
    1f9e:	490a      	ldr	r1, [pc, #40]	; (1fc8 <pwm_init+0x50>)
    1fa0:	4618      	mov	r0, r3
    1fa2:	4b0a      	ldr	r3, [pc, #40]	; (1fcc <pwm_init+0x54>)
    1fa4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1fa6:	68fb      	ldr	r3, [r7, #12]
    1fa8:	68b9      	ldr	r1, [r7, #8]
    1faa:	4618      	mov	r0, r3
    1fac:	4b08      	ldr	r3, [pc, #32]	; (1fd0 <pwm_init+0x58>)
    1fae:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1fb0:	68fb      	ldr	r3, [r7, #12]
    1fb2:	4a08      	ldr	r2, [pc, #32]	; (1fd4 <pwm_init+0x5c>)
    1fb4:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1fb6:	68fb      	ldr	r3, [r7, #12]
    1fb8:	4a07      	ldr	r2, [pc, #28]	; (1fd8 <pwm_init+0x60>)
    1fba:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    1fbc:	2300      	movs	r3, #0
}
    1fbe:	4618      	mov	r0, r3
    1fc0:	3710      	adds	r7, #16
    1fc2:	46bd      	mov	sp, r7
    1fc4:	bd80      	pop	{r7, pc}
    1fc6:	bf00      	nop
    1fc8:	0000cfcc 	.word	0x0000cfcc
    1fcc:	00002de1 	.word	0x00002de1
    1fd0:	000072dd 	.word	0x000072dd
    1fd4:	00001fdd 	.word	0x00001fdd
    1fd8:	00002001 	.word	0x00002001

00001fdc <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1fdc:	b580      	push	{r7, lr}
    1fde:	b084      	sub	sp, #16
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1fe4:	687b      	ldr	r3, [r7, #4]
    1fe6:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    1fe8:	68fb      	ldr	r3, [r7, #12]
    1fea:	695b      	ldr	r3, [r3, #20]
    1fec:	2b00      	cmp	r3, #0
    1fee:	d003      	beq.n	1ff8 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    1ff0:	68fb      	ldr	r3, [r7, #12]
    1ff2:	695b      	ldr	r3, [r3, #20]
    1ff4:	68f8      	ldr	r0, [r7, #12]
    1ff6:	4798      	blx	r3
	}
}
    1ff8:	bf00      	nop
    1ffa:	3710      	adds	r7, #16
    1ffc:	46bd      	mov	sp, r7
    1ffe:	bd80      	pop	{r7, pc}

00002000 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2000:	b580      	push	{r7, lr}
    2002:	b084      	sub	sp, #16
    2004:	af00      	add	r7, sp, #0
    2006:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2008:	687b      	ldr	r3, [r7, #4]
    200a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    200c:	68fb      	ldr	r3, [r7, #12]
    200e:	699b      	ldr	r3, [r3, #24]
    2010:	2b00      	cmp	r3, #0
    2012:	d003      	beq.n	201c <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2014:	68fb      	ldr	r3, [r7, #12]
    2016:	699b      	ldr	r3, [r3, #24]
    2018:	68f8      	ldr	r0, [r7, #12]
    201a:	4798      	blx	r3
	}
}
    201c:	bf00      	nop
    201e:	3710      	adds	r7, #16
    2020:	46bd      	mov	sp, r7
    2022:	bd80      	pop	{r7, pc}

00002024 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2024:	b580      	push	{r7, lr}
    2026:	b082      	sub	sp, #8
    2028:	af00      	add	r7, sp, #0
    202a:	6078      	str	r0, [r7, #4]
    202c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    202e:	687b      	ldr	r3, [r7, #4]
    2030:	2b00      	cmp	r3, #0
    2032:	d004      	beq.n	203e <qspi_sync_init+0x1a>
    2034:	683b      	ldr	r3, [r7, #0]
    2036:	2b00      	cmp	r3, #0
    2038:	d001      	beq.n	203e <qspi_sync_init+0x1a>
    203a:	2301      	movs	r3, #1
    203c:	e000      	b.n	2040 <qspi_sync_init+0x1c>
    203e:	2300      	movs	r3, #0
    2040:	f003 0301 	and.w	r3, r3, #1
    2044:	b2db      	uxtb	r3, r3
    2046:	2231      	movs	r2, #49	; 0x31
    2048:	4906      	ldr	r1, [pc, #24]	; (2064 <qspi_sync_init+0x40>)
    204a:	4618      	mov	r0, r3
    204c:	4b06      	ldr	r3, [pc, #24]	; (2068 <qspi_sync_init+0x44>)
    204e:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2050:	687b      	ldr	r3, [r7, #4]
    2052:	6839      	ldr	r1, [r7, #0]
    2054:	4618      	mov	r0, r3
    2056:	4b05      	ldr	r3, [pc, #20]	; (206c <qspi_sync_init+0x48>)
    2058:	4798      	blx	r3
    205a:	4603      	mov	r3, r0
}
    205c:	4618      	mov	r0, r3
    205e:	3708      	adds	r7, #8
    2060:	46bd      	mov	sp, r7
    2062:	bd80      	pop	{r7, pc}
    2064:	0000cfe4 	.word	0x0000cfe4
    2068:	00002de1 	.word	0x00002de1
    206c:	00004c9d 	.word	0x00004c9d

00002070 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2070:	b580      	push	{r7, lr}
    2072:	b082      	sub	sp, #8
    2074:	af00      	add	r7, sp, #0
    2076:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2078:	687b      	ldr	r3, [r7, #4]
    207a:	2b00      	cmp	r3, #0
    207c:	bf14      	ite	ne
    207e:	2301      	movne	r3, #1
    2080:	2300      	moveq	r3, #0
    2082:	b2db      	uxtb	r3, r3
    2084:	223f      	movs	r2, #63	; 0x3f
    2086:	4906      	ldr	r1, [pc, #24]	; (20a0 <qspi_sync_enable+0x30>)
    2088:	4618      	mov	r0, r3
    208a:	4b06      	ldr	r3, [pc, #24]	; (20a4 <qspi_sync_enable+0x34>)
    208c:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    208e:	687b      	ldr	r3, [r7, #4]
    2090:	4618      	mov	r0, r3
    2092:	4b05      	ldr	r3, [pc, #20]	; (20a8 <qspi_sync_enable+0x38>)
    2094:	4798      	blx	r3
    2096:	4603      	mov	r3, r0
}
    2098:	4618      	mov	r0, r3
    209a:	3708      	adds	r7, #8
    209c:	46bd      	mov	sp, r7
    209e:	bd80      	pop	{r7, pc}
    20a0:	0000cfe4 	.word	0x0000cfe4
    20a4:	00002de1 	.word	0x00002de1
    20a8:	00004d11 	.word	0x00004d11

000020ac <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    20ac:	b580      	push	{r7, lr}
    20ae:	b082      	sub	sp, #8
    20b0:	af00      	add	r7, sp, #0
    20b2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    20b4:	687b      	ldr	r3, [r7, #4]
    20b6:	2b00      	cmp	r3, #0
    20b8:	bf14      	ite	ne
    20ba:	2301      	movne	r3, #1
    20bc:	2300      	moveq	r3, #0
    20be:	b2db      	uxtb	r3, r3
    20c0:	2246      	movs	r2, #70	; 0x46
    20c2:	4906      	ldr	r1, [pc, #24]	; (20dc <qspi_sync_disable+0x30>)
    20c4:	4618      	mov	r0, r3
    20c6:	4b06      	ldr	r3, [pc, #24]	; (20e0 <qspi_sync_disable+0x34>)
    20c8:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	4618      	mov	r0, r3
    20ce:	4b05      	ldr	r3, [pc, #20]	; (20e4 <qspi_sync_disable+0x38>)
    20d0:	4798      	blx	r3
    20d2:	4603      	mov	r3, r0
}
    20d4:	4618      	mov	r0, r3
    20d6:	3708      	adds	r7, #8
    20d8:	46bd      	mov	sp, r7
    20da:	bd80      	pop	{r7, pc}
    20dc:	0000cfe4 	.word	0x0000cfe4
    20e0:	00002de1 	.word	0x00002de1
    20e4:	00004d35 	.word	0x00004d35

000020e8 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    20e8:	b580      	push	{r7, lr}
    20ea:	b082      	sub	sp, #8
    20ec:	af00      	add	r7, sp, #0
    20ee:	6078      	str	r0, [r7, #4]
    20f0:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    20f2:	687b      	ldr	r3, [r7, #4]
    20f4:	2b00      	cmp	r3, #0
    20f6:	d004      	beq.n	2102 <qspi_sync_serial_run_command+0x1a>
    20f8:	683b      	ldr	r3, [r7, #0]
    20fa:	2b00      	cmp	r3, #0
    20fc:	d001      	beq.n	2102 <qspi_sync_serial_run_command+0x1a>
    20fe:	2301      	movs	r3, #1
    2100:	e000      	b.n	2104 <qspi_sync_serial_run_command+0x1c>
    2102:	2300      	movs	r3, #0
    2104:	f003 0301 	and.w	r3, r3, #1
    2108:	b2db      	uxtb	r3, r3
    210a:	224d      	movs	r2, #77	; 0x4d
    210c:	4906      	ldr	r1, [pc, #24]	; (2128 <qspi_sync_serial_run_command+0x40>)
    210e:	4618      	mov	r0, r3
    2110:	4b06      	ldr	r3, [pc, #24]	; (212c <qspi_sync_serial_run_command+0x44>)
    2112:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2114:	687b      	ldr	r3, [r7, #4]
    2116:	6839      	ldr	r1, [r7, #0]
    2118:	4618      	mov	r0, r3
    211a:	4b05      	ldr	r3, [pc, #20]	; (2130 <qspi_sync_serial_run_command+0x48>)
    211c:	4798      	blx	r3
    211e:	4603      	mov	r3, r0
}
    2120:	4618      	mov	r0, r3
    2122:	3708      	adds	r7, #8
    2124:	46bd      	mov	sp, r7
    2126:	bd80      	pop	{r7, pc}
    2128:	0000cfe4 	.word	0x0000cfe4
    212c:	00002de1 	.word	0x00002de1
    2130:	00004e81 	.word	0x00004e81

00002134 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2134:	b580      	push	{r7, lr}
    2136:	b084      	sub	sp, #16
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
    213c:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    213e:	2300      	movs	r3, #0
    2140:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2142:	687b      	ldr	r3, [r7, #4]
    2144:	2b00      	cmp	r3, #0
    2146:	d004      	beq.n	2152 <spi_m_sync_init+0x1e>
    2148:	683b      	ldr	r3, [r7, #0]
    214a:	2b00      	cmp	r3, #0
    214c:	d001      	beq.n	2152 <spi_m_sync_init+0x1e>
    214e:	2301      	movs	r3, #1
    2150:	e000      	b.n	2154 <spi_m_sync_init+0x20>
    2152:	2300      	movs	r3, #0
    2154:	f003 0301 	and.w	r3, r3, #1
    2158:	b2db      	uxtb	r3, r3
    215a:	2240      	movs	r2, #64	; 0x40
    215c:	4910      	ldr	r1, [pc, #64]	; (21a0 <spi_m_sync_init+0x6c>)
    215e:	4618      	mov	r0, r3
    2160:	4b10      	ldr	r3, [pc, #64]	; (21a4 <spi_m_sync_init+0x70>)
    2162:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2164:	687b      	ldr	r3, [r7, #4]
    2166:	683a      	ldr	r2, [r7, #0]
    2168:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    216a:	687b      	ldr	r3, [r7, #4]
    216c:	3304      	adds	r3, #4
    216e:	6839      	ldr	r1, [r7, #0]
    2170:	4618      	mov	r0, r3
    2172:	4b0d      	ldr	r3, [pc, #52]	; (21a8 <spi_m_sync_init+0x74>)
    2174:	4798      	blx	r3
    2176:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2178:	68fb      	ldr	r3, [r7, #12]
    217a:	2b00      	cmp	r3, #0
    217c:	da01      	bge.n	2182 <spi_m_sync_init+0x4e>
		return rc;
    217e:	68fb      	ldr	r3, [r7, #12]
    2180:	e00a      	b.n	2198 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2182:	687b      	ldr	r3, [r7, #4]
    2184:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2188:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    218a:	687b      	ldr	r3, [r7, #4]
    218c:	4a07      	ldr	r2, [pc, #28]	; (21ac <spi_m_sync_init+0x78>)
    218e:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	4a07      	ldr	r2, [pc, #28]	; (21b0 <spi_m_sync_init+0x7c>)
    2194:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2196:	2300      	movs	r3, #0
}
    2198:	4618      	mov	r0, r3
    219a:	3710      	adds	r7, #16
    219c:	46bd      	mov	sp, r7
    219e:	bd80      	pop	{r7, pc}
    21a0:	0000d000 	.word	0x0000d000
    21a4:	00002de1 	.word	0x00002de1
    21a8:	000061b1 	.word	0x000061b1
    21ac:	000021b5 	.word	0x000021b5
    21b0:	0000220d 	.word	0x0000220d

000021b4 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    21b4:	b580      	push	{r7, lr}
    21b6:	b088      	sub	sp, #32
    21b8:	af00      	add	r7, sp, #0
    21ba:	60f8      	str	r0, [r7, #12]
    21bc:	60b9      	str	r1, [r7, #8]
    21be:	4613      	mov	r3, r2
    21c0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    21c2:	68fb      	ldr	r3, [r7, #12]
    21c4:	2b00      	cmp	r3, #0
    21c6:	bf14      	ite	ne
    21c8:	2301      	movne	r3, #1
    21ca:	2300      	moveq	r3, #0
    21cc:	b2db      	uxtb	r3, r3
    21ce:	2287      	movs	r2, #135	; 0x87
    21d0:	490b      	ldr	r1, [pc, #44]	; (2200 <_spi_m_sync_io_read+0x4c>)
    21d2:	4618      	mov	r0, r3
    21d4:	4b0b      	ldr	r3, [pc, #44]	; (2204 <_spi_m_sync_io_read+0x50>)
    21d6:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    21d8:	68fb      	ldr	r3, [r7, #12]
    21da:	3b0c      	subs	r3, #12
    21dc:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    21de:	68bb      	ldr	r3, [r7, #8]
    21e0:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    21e2:	2300      	movs	r3, #0
    21e4:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    21e6:	88fb      	ldrh	r3, [r7, #6]
    21e8:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    21ea:	f107 0310 	add.w	r3, r7, #16
    21ee:	4619      	mov	r1, r3
    21f0:	69f8      	ldr	r0, [r7, #28]
    21f2:	4b05      	ldr	r3, [pc, #20]	; (2208 <_spi_m_sync_io_read+0x54>)
    21f4:	4798      	blx	r3
    21f6:	4603      	mov	r3, r0
}
    21f8:	4618      	mov	r0, r3
    21fa:	3720      	adds	r7, #32
    21fc:	46bd      	mov	sp, r7
    21fe:	bd80      	pop	{r7, pc}
    2200:	0000d000 	.word	0x0000d000
    2204:	00002de1 	.word	0x00002de1
    2208:	00002265 	.word	0x00002265

0000220c <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    220c:	b580      	push	{r7, lr}
    220e:	b088      	sub	sp, #32
    2210:	af00      	add	r7, sp, #0
    2212:	60f8      	str	r0, [r7, #12]
    2214:	60b9      	str	r1, [r7, #8]
    2216:	4613      	mov	r3, r2
    2218:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    221a:	68fb      	ldr	r3, [r7, #12]
    221c:	2b00      	cmp	r3, #0
    221e:	bf14      	ite	ne
    2220:	2301      	movne	r3, #1
    2222:	2300      	moveq	r3, #0
    2224:	b2db      	uxtb	r3, r3
    2226:	22a3      	movs	r2, #163	; 0xa3
    2228:	490b      	ldr	r1, [pc, #44]	; (2258 <_spi_m_sync_io_write+0x4c>)
    222a:	4618      	mov	r0, r3
    222c:	4b0b      	ldr	r3, [pc, #44]	; (225c <_spi_m_sync_io_write+0x50>)
    222e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2230:	68fb      	ldr	r3, [r7, #12]
    2232:	3b0c      	subs	r3, #12
    2234:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2236:	2300      	movs	r3, #0
    2238:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    223a:	68bb      	ldr	r3, [r7, #8]
    223c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    223e:	88fb      	ldrh	r3, [r7, #6]
    2240:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2242:	f107 0310 	add.w	r3, r7, #16
    2246:	4619      	mov	r1, r3
    2248:	69f8      	ldr	r0, [r7, #28]
    224a:	4b05      	ldr	r3, [pc, #20]	; (2260 <_spi_m_sync_io_write+0x54>)
    224c:	4798      	blx	r3
    224e:	4603      	mov	r3, r0
}
    2250:	4618      	mov	r0, r3
    2252:	3720      	adds	r7, #32
    2254:	46bd      	mov	sp, r7
    2256:	bd80      	pop	{r7, pc}
    2258:	0000d000 	.word	0x0000d000
    225c:	00002de1 	.word	0x00002de1
    2260:	00002265 	.word	0x00002265

00002264 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2264:	b580      	push	{r7, lr}
    2266:	b086      	sub	sp, #24
    2268:	af00      	add	r7, sp, #0
    226a:	6078      	str	r0, [r7, #4]
    226c:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    226e:	687b      	ldr	r3, [r7, #4]
    2270:	2b00      	cmp	r3, #0
    2272:	d004      	beq.n	227e <spi_m_sync_transfer+0x1a>
    2274:	683b      	ldr	r3, [r7, #0]
    2276:	2b00      	cmp	r3, #0
    2278:	d001      	beq.n	227e <spi_m_sync_transfer+0x1a>
    227a:	2301      	movs	r3, #1
    227c:	e000      	b.n	2280 <spi_m_sync_transfer+0x1c>
    227e:	2300      	movs	r3, #0
    2280:	f003 0301 	and.w	r3, r3, #1
    2284:	b2db      	uxtb	r3, r3
    2286:	22b3      	movs	r2, #179	; 0xb3
    2288:	490c      	ldr	r1, [pc, #48]	; (22bc <spi_m_sync_transfer+0x58>)
    228a:	4618      	mov	r0, r3
    228c:	4b0c      	ldr	r3, [pc, #48]	; (22c0 <spi_m_sync_transfer+0x5c>)
    228e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2290:	683b      	ldr	r3, [r7, #0]
    2292:	681b      	ldr	r3, [r3, #0]
    2294:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2296:	683b      	ldr	r3, [r7, #0]
    2298:	685b      	ldr	r3, [r3, #4]
    229a:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    229c:	683b      	ldr	r3, [r7, #0]
    229e:	689b      	ldr	r3, [r3, #8]
    22a0:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    22a2:	687b      	ldr	r3, [r7, #4]
    22a4:	3304      	adds	r3, #4
    22a6:	f107 020c 	add.w	r2, r7, #12
    22aa:	4611      	mov	r1, r2
    22ac:	4618      	mov	r0, r3
    22ae:	4b05      	ldr	r3, [pc, #20]	; (22c4 <spi_m_sync_transfer+0x60>)
    22b0:	4798      	blx	r3
    22b2:	4603      	mov	r3, r0
}
    22b4:	4618      	mov	r0, r3
    22b6:	3718      	adds	r7, #24
    22b8:	46bd      	mov	sp, r7
    22ba:	bd80      	pop	{r7, pc}
    22bc:	0000d000 	.word	0x0000d000
    22c0:	00002de1 	.word	0x00002de1
    22c4:	00006411 	.word	0x00006411

000022c8 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    22c8:	b480      	push	{r7}
    22ca:	b083      	sub	sp, #12
    22cc:	af00      	add	r7, sp, #0
    22ce:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    22d0:	687b      	ldr	r3, [r7, #4]
    22d2:	681b      	ldr	r3, [r3, #0]
}
    22d4:	4618      	mov	r0, r3
    22d6:	370c      	adds	r7, #12
    22d8:	46bd      	mov	sp, r7
    22da:	f85d 7b04 	ldr.w	r7, [sp], #4
    22de:	4770      	bx	lr

000022e0 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    22e0:	b480      	push	{r7}
    22e2:	b083      	sub	sp, #12
    22e4:	af00      	add	r7, sp, #0
    22e6:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    22e8:	687b      	ldr	r3, [r7, #4]
    22ea:	2b00      	cmp	r3, #0
    22ec:	d002      	beq.n	22f4 <list_get_next_element+0x14>
    22ee:	687b      	ldr	r3, [r7, #4]
    22f0:	681b      	ldr	r3, [r3, #0]
    22f2:	e000      	b.n	22f6 <list_get_next_element+0x16>
    22f4:	2300      	movs	r3, #0
}
    22f6:	4618      	mov	r0, r3
    22f8:	370c      	adds	r7, #12
    22fa:	46bd      	mov	sp, r7
    22fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2300:	4770      	bx	lr
	...

00002304 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2304:	b580      	push	{r7, lr}
    2306:	b084      	sub	sp, #16
    2308:	af00      	add	r7, sp, #0
    230a:	60f8      	str	r0, [r7, #12]
    230c:	60b9      	str	r1, [r7, #8]
    230e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2310:	68fb      	ldr	r3, [r7, #12]
    2312:	2b00      	cmp	r3, #0
    2314:	d007      	beq.n	2326 <timer_init+0x22>
    2316:	68bb      	ldr	r3, [r7, #8]
    2318:	2b00      	cmp	r3, #0
    231a:	d004      	beq.n	2326 <timer_init+0x22>
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	2b00      	cmp	r3, #0
    2320:	d001      	beq.n	2326 <timer_init+0x22>
    2322:	2301      	movs	r3, #1
    2324:	e000      	b.n	2328 <timer_init+0x24>
    2326:	2300      	movs	r3, #0
    2328:	f003 0301 	and.w	r3, r3, #1
    232c:	b2db      	uxtb	r3, r3
    232e:	223b      	movs	r2, #59	; 0x3b
    2330:	490c      	ldr	r1, [pc, #48]	; (2364 <timer_init+0x60>)
    2332:	4618      	mov	r0, r3
    2334:	4b0c      	ldr	r3, [pc, #48]	; (2368 <timer_init+0x64>)
    2336:	4798      	blx	r3
	descr->func = func;
    2338:	68fb      	ldr	r3, [r7, #12]
    233a:	687a      	ldr	r2, [r7, #4]
    233c:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    233e:	68fb      	ldr	r3, [r7, #12]
    2340:	681b      	ldr	r3, [r3, #0]
    2342:	681b      	ldr	r3, [r3, #0]
    2344:	68fa      	ldr	r2, [r7, #12]
    2346:	3204      	adds	r2, #4
    2348:	68b9      	ldr	r1, [r7, #8]
    234a:	4610      	mov	r0, r2
    234c:	4798      	blx	r3
	descr->time                           = 0;
    234e:	68fb      	ldr	r3, [r7, #12]
    2350:	2200      	movs	r2, #0
    2352:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2354:	68fb      	ldr	r3, [r7, #12]
    2356:	4a05      	ldr	r2, [pc, #20]	; (236c <timer_init+0x68>)
    2358:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    235a:	2300      	movs	r3, #0
}
    235c:	4618      	mov	r0, r3
    235e:	3710      	adds	r7, #16
    2360:	46bd      	mov	sp, r7
    2362:	bd80      	pop	{r7, pc}
    2364:	0000d01c 	.word	0x0000d01c
    2368:	00002de1 	.word	0x00002de1
    236c:	00002421 	.word	0x00002421

00002370 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2370:	b580      	push	{r7, lr}
    2372:	b088      	sub	sp, #32
    2374:	af00      	add	r7, sp, #0
    2376:	60f8      	str	r0, [r7, #12]
    2378:	60b9      	str	r1, [r7, #8]
    237a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    237c:	2300      	movs	r3, #0
    237e:	61bb      	str	r3, [r7, #24]
    2380:	68f8      	ldr	r0, [r7, #12]
    2382:	4b23      	ldr	r3, [pc, #140]	; (2410 <timer_add_timer_task+0xa0>)
    2384:	4798      	blx	r3
    2386:	6138      	str	r0, [r7, #16]

	if (!head) {
    2388:	693b      	ldr	r3, [r7, #16]
    238a:	2b00      	cmp	r3, #0
    238c:	d104      	bne.n	2398 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    238e:	68b9      	ldr	r1, [r7, #8]
    2390:	68f8      	ldr	r0, [r7, #12]
    2392:	4b20      	ldr	r3, [pc, #128]	; (2414 <timer_add_timer_task+0xa4>)
    2394:	4798      	blx	r3
		return;
    2396:	e037      	b.n	2408 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2398:	693b      	ldr	r3, [r7, #16]
    239a:	61fb      	str	r3, [r7, #28]
    239c:	e022      	b.n	23e4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    239e:	69fb      	ldr	r3, [r7, #28]
    23a0:	685a      	ldr	r2, [r3, #4]
    23a2:	687b      	ldr	r3, [r7, #4]
    23a4:	429a      	cmp	r2, r3
    23a6:	d808      	bhi.n	23ba <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    23a8:	69fb      	ldr	r3, [r7, #28]
    23aa:	689a      	ldr	r2, [r3, #8]
    23ac:	69fb      	ldr	r3, [r7, #28]
    23ae:	6859      	ldr	r1, [r3, #4]
    23b0:	687b      	ldr	r3, [r7, #4]
    23b2:	1acb      	subs	r3, r1, r3
    23b4:	4413      	add	r3, r2
    23b6:	617b      	str	r3, [r7, #20]
    23b8:	e009      	b.n	23ce <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    23ba:	69fb      	ldr	r3, [r7, #28]
    23bc:	689a      	ldr	r2, [r3, #8]
    23be:	69fb      	ldr	r3, [r7, #28]
    23c0:	685b      	ldr	r3, [r3, #4]
    23c2:	441a      	add	r2, r3
    23c4:	687b      	ldr	r3, [r7, #4]
    23c6:	425b      	negs	r3, r3
    23c8:	4413      	add	r3, r2
    23ca:	3301      	adds	r3, #1
    23cc:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    23ce:	68bb      	ldr	r3, [r7, #8]
    23d0:	689a      	ldr	r2, [r3, #8]
    23d2:	697b      	ldr	r3, [r7, #20]
    23d4:	429a      	cmp	r2, r3
    23d6:	d909      	bls.n	23ec <timer_add_timer_task+0x7c>
			break;
		prev = it;
    23d8:	69fb      	ldr	r3, [r7, #28]
    23da:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    23dc:	69f8      	ldr	r0, [r7, #28]
    23de:	4b0e      	ldr	r3, [pc, #56]	; (2418 <timer_add_timer_task+0xa8>)
    23e0:	4798      	blx	r3
    23e2:	61f8      	str	r0, [r7, #28]
    23e4:	69fb      	ldr	r3, [r7, #28]
    23e6:	2b00      	cmp	r3, #0
    23e8:	d1d9      	bne.n	239e <timer_add_timer_task+0x2e>
    23ea:	e000      	b.n	23ee <timer_add_timer_task+0x7e>
			break;
    23ec:	bf00      	nop
	}

	if (it == head) {
    23ee:	69fa      	ldr	r2, [r7, #28]
    23f0:	693b      	ldr	r3, [r7, #16]
    23f2:	429a      	cmp	r2, r3
    23f4:	d104      	bne.n	2400 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    23f6:	68b9      	ldr	r1, [r7, #8]
    23f8:	68f8      	ldr	r0, [r7, #12]
    23fa:	4b06      	ldr	r3, [pc, #24]	; (2414 <timer_add_timer_task+0xa4>)
    23fc:	4798      	blx	r3
    23fe:	e003      	b.n	2408 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2400:	68b9      	ldr	r1, [r7, #8]
    2402:	69b8      	ldr	r0, [r7, #24]
    2404:	4b05      	ldr	r3, [pc, #20]	; (241c <timer_add_timer_task+0xac>)
    2406:	4798      	blx	r3
	}
}
    2408:	3720      	adds	r7, #32
    240a:	46bd      	mov	sp, r7
    240c:	bd80      	pop	{r7, pc}
    240e:	bf00      	nop
    2410:	000022c9 	.word	0x000022c9
    2414:	00002e41 	.word	0x00002e41
    2418:	000022e1 	.word	0x000022e1
    241c:	00002e99 	.word	0x00002e99

00002420 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2420:	b580      	push	{r7, lr}
    2422:	b086      	sub	sp, #24
    2424:	af00      	add	r7, sp, #0
    2426:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2428:	687b      	ldr	r3, [r7, #4]
    242a:	3b04      	subs	r3, #4
    242c:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	3318      	adds	r3, #24
    2432:	4618      	mov	r0, r3
    2434:	4b27      	ldr	r3, [pc, #156]	; (24d4 <timer_process_counted+0xb4>)
    2436:	4798      	blx	r3
    2438:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	695b      	ldr	r3, [r3, #20]
    243e:	1c5a      	adds	r2, r3, #1
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	615a      	str	r2, [r3, #20]
    2444:	693b      	ldr	r3, [r7, #16]
    2446:	695b      	ldr	r3, [r3, #20]
    2448:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    244a:	693b      	ldr	r3, [r7, #16]
    244c:	7f1b      	ldrb	r3, [r3, #28]
    244e:	b2db      	uxtb	r3, r3
    2450:	f003 0301 	and.w	r3, r3, #1
    2454:	2b00      	cmp	r3, #0
    2456:	d106      	bne.n	2466 <timer_process_counted+0x46>
    2458:	693b      	ldr	r3, [r7, #16]
    245a:	7f1b      	ldrb	r3, [r3, #28]
    245c:	b2db      	uxtb	r3, r3
    245e:	f003 0302 	and.w	r3, r3, #2
    2462:	2b00      	cmp	r3, #0
    2464:	d027      	beq.n	24b6 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2466:	693b      	ldr	r3, [r7, #16]
    2468:	7f1b      	ldrb	r3, [r3, #28]
    246a:	b2db      	uxtb	r3, r3
    246c:	f043 0302 	orr.w	r3, r3, #2
    2470:	b2da      	uxtb	r2, r3
    2472:	693b      	ldr	r3, [r7, #16]
    2474:	771a      	strb	r2, [r3, #28]
		return;
    2476:	e029      	b.n	24cc <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2478:	697b      	ldr	r3, [r7, #20]
    247a:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    247c:	693b      	ldr	r3, [r7, #16]
    247e:	3318      	adds	r3, #24
    2480:	4618      	mov	r0, r3
    2482:	4b15      	ldr	r3, [pc, #84]	; (24d8 <timer_process_counted+0xb8>)
    2484:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2486:	68bb      	ldr	r3, [r7, #8]
    2488:	7c1b      	ldrb	r3, [r3, #16]
    248a:	2b01      	cmp	r3, #1
    248c:	d109      	bne.n	24a2 <timer_process_counted+0x82>
			tmp->time_label = time;
    248e:	68bb      	ldr	r3, [r7, #8]
    2490:	68fa      	ldr	r2, [r7, #12]
    2492:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2494:	693b      	ldr	r3, [r7, #16]
    2496:	3318      	adds	r3, #24
    2498:	68fa      	ldr	r2, [r7, #12]
    249a:	68b9      	ldr	r1, [r7, #8]
    249c:	4618      	mov	r0, r3
    249e:	4b0f      	ldr	r3, [pc, #60]	; (24dc <timer_process_counted+0xbc>)
    24a0:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    24a2:	693b      	ldr	r3, [r7, #16]
    24a4:	3318      	adds	r3, #24
    24a6:	4618      	mov	r0, r3
    24a8:	4b0a      	ldr	r3, [pc, #40]	; (24d4 <timer_process_counted+0xb4>)
    24aa:	4798      	blx	r3
    24ac:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    24ae:	68bb      	ldr	r3, [r7, #8]
    24b0:	68db      	ldr	r3, [r3, #12]
    24b2:	68b8      	ldr	r0, [r7, #8]
    24b4:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    24b6:	697b      	ldr	r3, [r7, #20]
    24b8:	2b00      	cmp	r3, #0
    24ba:	d007      	beq.n	24cc <timer_process_counted+0xac>
    24bc:	697b      	ldr	r3, [r7, #20]
    24be:	685b      	ldr	r3, [r3, #4]
    24c0:	68fa      	ldr	r2, [r7, #12]
    24c2:	1ad2      	subs	r2, r2, r3
    24c4:	697b      	ldr	r3, [r7, #20]
    24c6:	689b      	ldr	r3, [r3, #8]
    24c8:	429a      	cmp	r2, r3
    24ca:	d2d5      	bcs.n	2478 <timer_process_counted+0x58>
	}
}
    24cc:	3718      	adds	r7, #24
    24ce:	46bd      	mov	sp, r7
    24d0:	bd80      	pop	{r7, pc}
    24d2:	bf00      	nop
    24d4:	000022c9 	.word	0x000022c9
    24d8:	00002f39 	.word	0x00002f39
    24dc:	00002371 	.word	0x00002371

000024e0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    24e0:	b480      	push	{r7}
    24e2:	b085      	sub	sp, #20
    24e4:	af00      	add	r7, sp, #0
    24e6:	4603      	mov	r3, r0
    24e8:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    24ea:	2300      	movs	r3, #0
    24ec:	73fb      	strb	r3, [r7, #15]
    24ee:	e029      	b.n	2544 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    24f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    24f4:	4a19      	ldr	r2, [pc, #100]	; (255c <_usb_d_find_ep+0x7c>)
    24f6:	015b      	lsls	r3, r3, #5
    24f8:	4413      	add	r3, r2
    24fa:	3301      	adds	r3, #1
    24fc:	781b      	ldrb	r3, [r3, #0]
    24fe:	79fa      	ldrb	r2, [r7, #7]
    2500:	429a      	cmp	r2, r3
    2502:	d102      	bne.n	250a <_usb_d_find_ep+0x2a>
			return i;
    2504:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2508:	e022      	b.n	2550 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    250e:	4a13      	ldr	r2, [pc, #76]	; (255c <_usb_d_find_ep+0x7c>)
    2510:	015b      	lsls	r3, r3, #5
    2512:	4413      	add	r3, r2
    2514:	781b      	ldrb	r3, [r3, #0]
    2516:	2b00      	cmp	r3, #0
    2518:	d10e      	bne.n	2538 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    251a:	79fb      	ldrb	r3, [r7, #7]
    251c:	f003 030f 	and.w	r3, r3, #15
    2520:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2524:	490d      	ldr	r1, [pc, #52]	; (255c <_usb_d_find_ep+0x7c>)
    2526:	0152      	lsls	r2, r2, #5
    2528:	440a      	add	r2, r1
    252a:	3201      	adds	r2, #1
    252c:	7812      	ldrb	r2, [r2, #0]
    252e:	4293      	cmp	r3, r2
    2530:	d102      	bne.n	2538 <_usb_d_find_ep+0x58>
			return i;
    2532:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2536:	e00b      	b.n	2550 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2538:	f997 300f 	ldrsb.w	r3, [r7, #15]
    253c:	b2db      	uxtb	r3, r3
    253e:	3301      	adds	r3, #1
    2540:	b2db      	uxtb	r3, r3
    2542:	73fb      	strb	r3, [r7, #15]
    2544:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2548:	2b03      	cmp	r3, #3
    254a:	ddd1      	ble.n	24f0 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    254c:	f04f 33ff 	mov.w	r3, #4294967295
}
    2550:	4618      	mov	r0, r3
    2552:	3714      	adds	r7, #20
    2554:	46bd      	mov	sp, r7
    2556:	f85d 7b04 	ldr.w	r7, [sp], #4
    255a:	4770      	bx	lr
    255c:	20000718 	.word	0x20000718

00002560 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2560:	b580      	push	{r7, lr}
    2562:	b088      	sub	sp, #32
    2564:	af00      	add	r7, sp, #0
    2566:	60ba      	str	r2, [r7, #8]
    2568:	607b      	str	r3, [r7, #4]
    256a:	4603      	mov	r3, r0
    256c:	73fb      	strb	r3, [r7, #15]
    256e:	460b      	mov	r3, r1
    2570:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2572:	68bb      	ldr	r3, [r7, #8]
    2574:	617b      	str	r3, [r7, #20]
    2576:	687b      	ldr	r3, [r7, #4]
    2578:	61bb      	str	r3, [r7, #24]
    257a:	7bbb      	ldrb	r3, [r7, #14]
    257c:	2b00      	cmp	r3, #0
    257e:	d004      	beq.n	258a <_usb_d_trans+0x2a>
    2580:	7bfb      	ldrb	r3, [r7, #15]
    2582:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2586:	b2db      	uxtb	r3, r3
    2588:	e003      	b.n	2592 <_usb_d_trans+0x32>
    258a:	7bfb      	ldrb	r3, [r7, #15]
    258c:	f003 030f 	and.w	r3, r3, #15
    2590:	b2db      	uxtb	r3, r3
    2592:	773b      	strb	r3, [r7, #28]
    2594:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2598:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    259a:	f107 0314 	add.w	r3, r7, #20
    259e:	4618      	mov	r0, r3
    25a0:	4b03      	ldr	r3, [pc, #12]	; (25b0 <_usb_d_trans+0x50>)
    25a2:	4798      	blx	r3
    25a4:	4603      	mov	r3, r0
}
    25a6:	4618      	mov	r0, r3
    25a8:	3720      	adds	r7, #32
    25aa:	46bd      	mov	sp, r7
    25ac:	bd80      	pop	{r7, pc}
    25ae:	bf00      	nop
    25b0:	00009e21 	.word	0x00009e21

000025b4 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    25b4:	b480      	push	{r7}
    25b6:	b085      	sub	sp, #20
    25b8:	af00      	add	r7, sp, #0
    25ba:	60f8      	str	r0, [r7, #12]
    25bc:	60b9      	str	r1, [r7, #8]
    25be:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    25c0:	2300      	movs	r3, #0
}
    25c2:	4618      	mov	r0, r3
    25c4:	3714      	adds	r7, #20
    25c6:	46bd      	mov	sp, r7
    25c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    25cc:	4770      	bx	lr
	...

000025d0 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    25d0:	b580      	push	{r7, lr}
    25d2:	b086      	sub	sp, #24
    25d4:	af00      	add	r7, sp, #0
    25d6:	4603      	mov	r3, r0
    25d8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    25da:	79fb      	ldrb	r3, [r7, #7]
    25dc:	4618      	mov	r0, r3
    25de:	4b2a      	ldr	r3, [pc, #168]	; (2688 <usb_d_cb_trans_setup+0xb8>)
    25e0:	4798      	blx	r3
    25e2:	4603      	mov	r3, r0
    25e4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    25e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    25ea:	015b      	lsls	r3, r3, #5
    25ec:	4a27      	ldr	r2, [pc, #156]	; (268c <usb_d_cb_trans_setup+0xbc>)
    25ee:	4413      	add	r3, r2
    25f0:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    25f2:	693b      	ldr	r3, [r7, #16]
    25f4:	330c      	adds	r3, #12
    25f6:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    25f8:	79fb      	ldrb	r3, [r7, #7]
    25fa:	68f9      	ldr	r1, [r7, #12]
    25fc:	4618      	mov	r0, r3
    25fe:	4b24      	ldr	r3, [pc, #144]	; (2690 <usb_d_cb_trans_setup+0xc0>)
    2600:	4798      	blx	r3
    2602:	4603      	mov	r3, r0
    2604:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    2606:	7afb      	ldrb	r3, [r7, #11]
    2608:	2b08      	cmp	r3, #8
    260a:	d00d      	beq.n	2628 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    260c:	79fb      	ldrb	r3, [r7, #7]
    260e:	2101      	movs	r1, #1
    2610:	4618      	mov	r0, r3
    2612:	4b20      	ldr	r3, [pc, #128]	; (2694 <usb_d_cb_trans_setup+0xc4>)
    2614:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2616:	79fb      	ldrb	r3, [r7, #7]
    2618:	f063 037f 	orn	r3, r3, #127	; 0x7f
    261c:	b2db      	uxtb	r3, r3
    261e:	2101      	movs	r1, #1
    2620:	4618      	mov	r0, r3
    2622:	4b1c      	ldr	r3, [pc, #112]	; (2694 <usb_d_cb_trans_setup+0xc4>)
    2624:	4798      	blx	r3
		return;
    2626:	e02b      	b.n	2680 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2628:	79fb      	ldrb	r3, [r7, #7]
    262a:	2100      	movs	r1, #0
    262c:	4618      	mov	r0, r3
    262e:	4b19      	ldr	r3, [pc, #100]	; (2694 <usb_d_cb_trans_setup+0xc4>)
    2630:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2632:	79fb      	ldrb	r3, [r7, #7]
    2634:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2638:	b2db      	uxtb	r3, r3
    263a:	2100      	movs	r1, #0
    263c:	4618      	mov	r0, r3
    263e:	4b15      	ldr	r3, [pc, #84]	; (2694 <usb_d_cb_trans_setup+0xc4>)
    2640:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2642:	693b      	ldr	r3, [r7, #16]
    2644:	2201      	movs	r2, #1
    2646:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2648:	693b      	ldr	r3, [r7, #16]
    264a:	695b      	ldr	r3, [r3, #20]
    264c:	79fa      	ldrb	r2, [r7, #7]
    264e:	68f9      	ldr	r1, [r7, #12]
    2650:	4610      	mov	r0, r2
    2652:	4798      	blx	r3
    2654:	4603      	mov	r3, r0
    2656:	f083 0301 	eor.w	r3, r3, #1
    265a:	b2db      	uxtb	r3, r3
    265c:	2b00      	cmp	r3, #0
    265e:	d00f      	beq.n	2680 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2660:	693b      	ldr	r3, [r7, #16]
    2662:	2205      	movs	r2, #5
    2664:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2666:	79fb      	ldrb	r3, [r7, #7]
    2668:	2101      	movs	r1, #1
    266a:	4618      	mov	r0, r3
    266c:	4b09      	ldr	r3, [pc, #36]	; (2694 <usb_d_cb_trans_setup+0xc4>)
    266e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2670:	79fb      	ldrb	r3, [r7, #7]
    2672:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2676:	b2db      	uxtb	r3, r3
    2678:	2101      	movs	r1, #1
    267a:	4618      	mov	r0, r3
    267c:	4b05      	ldr	r3, [pc, #20]	; (2694 <usb_d_cb_trans_setup+0xc4>)
    267e:	4798      	blx	r3
	}
}
    2680:	3718      	adds	r7, #24
    2682:	46bd      	mov	sp, r7
    2684:	bd80      	pop	{r7, pc}
    2686:	bf00      	nop
    2688:	000024e1 	.word	0x000024e1
    268c:	20000718 	.word	0x20000718
    2690:	00009d79 	.word	0x00009d79
    2694:	00009bf1 	.word	0x00009bf1

00002698 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2698:	b580      	push	{r7, lr}
    269a:	b084      	sub	sp, #16
    269c:	af00      	add	r7, sp, #0
    269e:	4603      	mov	r3, r0
    26a0:	6039      	str	r1, [r7, #0]
    26a2:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    26a4:	79fb      	ldrb	r3, [r7, #7]
    26a6:	4618      	mov	r0, r3
    26a8:	4b0d      	ldr	r3, [pc, #52]	; (26e0 <usb_d_cb_trans_more+0x48>)
    26aa:	4798      	blx	r3
    26ac:	4603      	mov	r3, r0
    26ae:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    26b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    26b4:	015b      	lsls	r3, r3, #5
    26b6:	4a0b      	ldr	r2, [pc, #44]	; (26e4 <usb_d_cb_trans_more+0x4c>)
    26b8:	4413      	add	r3, r2
    26ba:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    26bc:	68bb      	ldr	r3, [r7, #8]
    26be:	789b      	ldrb	r3, [r3, #2]
    26c0:	2b03      	cmp	r3, #3
    26c2:	d107      	bne.n	26d4 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    26c4:	68bb      	ldr	r3, [r7, #8]
    26c6:	699b      	ldr	r3, [r3, #24]
    26c8:	79fa      	ldrb	r2, [r7, #7]
    26ca:	6839      	ldr	r1, [r7, #0]
    26cc:	4610      	mov	r0, r2
    26ce:	4798      	blx	r3
    26d0:	4603      	mov	r3, r0
    26d2:	e000      	b.n	26d6 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    26d4:	2300      	movs	r3, #0
}
    26d6:	4618      	mov	r0, r3
    26d8:	3710      	adds	r7, #16
    26da:	46bd      	mov	sp, r7
    26dc:	bd80      	pop	{r7, pc}
    26de:	bf00      	nop
    26e0:	000024e1 	.word	0x000024e1
    26e4:	20000718 	.word	0x20000718

000026e8 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    26e8:	b590      	push	{r4, r7, lr}
    26ea:	b087      	sub	sp, #28
    26ec:	af02      	add	r7, sp, #8
    26ee:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	789b      	ldrb	r3, [r3, #2]
    26f4:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    26f6:	687b      	ldr	r3, [r7, #4]
    26f8:	7b1b      	ldrb	r3, [r3, #12]
    26fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    26fe:	2b00      	cmp	r3, #0
    2700:	bf14      	ite	ne
    2702:	2301      	movne	r3, #1
    2704:	2300      	moveq	r3, #0
    2706:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2708:	7bfb      	ldrb	r3, [r7, #15]
    270a:	2b03      	cmp	r3, #3
    270c:	d13a      	bne.n	2784 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    270e:	687b      	ldr	r3, [r7, #4]
    2710:	69db      	ldr	r3, [r3, #28]
    2712:	687a      	ldr	r2, [r7, #4]
    2714:	7850      	ldrb	r0, [r2, #1]
    2716:	687a      	ldr	r2, [r7, #4]
    2718:	320c      	adds	r2, #12
    271a:	2101      	movs	r1, #1
    271c:	4798      	blx	r3
    271e:	4603      	mov	r3, r0
    2720:	737b      	strb	r3, [r7, #13]
		if (err) {
    2722:	7b7b      	ldrb	r3, [r7, #13]
    2724:	2b00      	cmp	r3, #0
    2726:	d015      	beq.n	2754 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2728:	687b      	ldr	r3, [r7, #4]
    272a:	2205      	movs	r2, #5
    272c:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	2202      	movs	r2, #2
    2732:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2734:	7bbb      	ldrb	r3, [r7, #14]
    2736:	2b00      	cmp	r3, #0
    2738:	d002      	beq.n	2740 <usb_d_ctrl_trans_done+0x58>
    273a:	687b      	ldr	r3, [r7, #4]
    273c:	785b      	ldrb	r3, [r3, #1]
    273e:	e004      	b.n	274a <usb_d_ctrl_trans_done+0x62>
    2740:	687b      	ldr	r3, [r7, #4]
    2742:	785b      	ldrb	r3, [r3, #1]
    2744:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2748:	b2db      	uxtb	r3, r3
    274a:	2101      	movs	r1, #1
    274c:	4618      	mov	r0, r3
    274e:	4b15      	ldr	r3, [pc, #84]	; (27a4 <usb_d_ctrl_trans_done+0xbc>)
    2750:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    2752:	e022      	b.n	279a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2754:	687b      	ldr	r3, [r7, #4]
    2756:	2204      	movs	r2, #4
    2758:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    275a:	687b      	ldr	r3, [r7, #4]
    275c:	7858      	ldrb	r0, [r3, #1]
    275e:	7bbb      	ldrb	r3, [r7, #14]
    2760:	2b00      	cmp	r3, #0
    2762:	bf14      	ite	ne
    2764:	2301      	movne	r3, #1
    2766:	2300      	moveq	r3, #0
    2768:	b2db      	uxtb	r3, r3
    276a:	f083 0301 	eor.w	r3, r3, #1
    276e:	b2db      	uxtb	r3, r3
    2770:	f003 0301 	and.w	r3, r3, #1
    2774:	b2d9      	uxtb	r1, r3
    2776:	2301      	movs	r3, #1
    2778:	9300      	str	r3, [sp, #0]
    277a:	2300      	movs	r3, #0
    277c:	2200      	movs	r2, #0
    277e:	4c0a      	ldr	r4, [pc, #40]	; (27a8 <usb_d_ctrl_trans_done+0xc0>)
    2780:	47a0      	blx	r4
}
    2782:	e00a      	b.n	279a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2784:	687b      	ldr	r3, [r7, #4]
    2786:	69db      	ldr	r3, [r3, #28]
    2788:	687a      	ldr	r2, [r7, #4]
    278a:	7850      	ldrb	r0, [r2, #1]
    278c:	687a      	ldr	r2, [r7, #4]
    278e:	320c      	adds	r2, #12
    2790:	2100      	movs	r1, #0
    2792:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2794:	687b      	ldr	r3, [r7, #4]
    2796:	2202      	movs	r2, #2
    2798:	709a      	strb	r2, [r3, #2]
}
    279a:	bf00      	nop
    279c:	3714      	adds	r7, #20
    279e:	46bd      	mov	sp, r7
    27a0:	bd90      	pop	{r4, r7, pc}
    27a2:	bf00      	nop
    27a4:	00009bf1 	.word	0x00009bf1
    27a8:	00002561 	.word	0x00002561

000027ac <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    27ac:	b580      	push	{r7, lr}
    27ae:	b086      	sub	sp, #24
    27b0:	af00      	add	r7, sp, #0
    27b2:	4603      	mov	r3, r0
    27b4:	60b9      	str	r1, [r7, #8]
    27b6:	607a      	str	r2, [r7, #4]
    27b8:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    27ba:	7bfb      	ldrb	r3, [r7, #15]
    27bc:	4618      	mov	r0, r3
    27be:	4b2f      	ldr	r3, [pc, #188]	; (287c <_usb_d_cb_trans_done+0xd0>)
    27c0:	4798      	blx	r3
    27c2:	4603      	mov	r3, r0
    27c4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    27c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    27ca:	015b      	lsls	r3, r3, #5
    27cc:	4a2c      	ldr	r2, [pc, #176]	; (2880 <_usb_d_cb_trans_done+0xd4>)
    27ce:	4413      	add	r3, r2
    27d0:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    27d2:	68bb      	ldr	r3, [r7, #8]
    27d4:	2b00      	cmp	r3, #0
    27d6:	d10e      	bne.n	27f6 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    27d8:	693b      	ldr	r3, [r7, #16]
    27da:	2200      	movs	r2, #0
    27dc:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    27de:	693b      	ldr	r3, [r7, #16]
    27e0:	781b      	ldrb	r3, [r3, #0]
    27e2:	2b00      	cmp	r3, #0
    27e4:	d103      	bne.n	27ee <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    27e6:	6938      	ldr	r0, [r7, #16]
    27e8:	4b26      	ldr	r3, [pc, #152]	; (2884 <_usb_d_cb_trans_done+0xd8>)
    27ea:	4798      	blx	r3
			return;
    27ec:	e043      	b.n	2876 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    27ee:	693b      	ldr	r3, [r7, #16]
    27f0:	2201      	movs	r2, #1
    27f2:	709a      	strb	r2, [r3, #2]
    27f4:	e038      	b.n	2868 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    27f6:	68bb      	ldr	r3, [r7, #8]
    27f8:	2b01      	cmp	r3, #1
    27fa:	d113      	bne.n	2824 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    27fc:	693b      	ldr	r3, [r7, #16]
    27fe:	2202      	movs	r2, #2
    2800:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2802:	693b      	ldr	r3, [r7, #16]
    2804:	781b      	ldrb	r3, [r3, #0]
    2806:	2b00      	cmp	r3, #0
    2808:	d108      	bne.n	281c <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    280a:	693b      	ldr	r3, [r7, #16]
    280c:	2202      	movs	r2, #2
    280e:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2810:	7bfb      	ldrb	r3, [r7, #15]
    2812:	2100      	movs	r1, #0
    2814:	4618      	mov	r0, r3
    2816:	4b1c      	ldr	r3, [pc, #112]	; (2888 <_usb_d_cb_trans_done+0xdc>)
    2818:	4798      	blx	r3
    281a:	e025      	b.n	2868 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    281c:	693b      	ldr	r3, [r7, #16]
    281e:	2205      	movs	r2, #5
    2820:	709a      	strb	r2, [r3, #2]
    2822:	e021      	b.n	2868 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    2824:	68bb      	ldr	r3, [r7, #8]
    2826:	2b02      	cmp	r3, #2
    2828:	d10e      	bne.n	2848 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    282a:	693b      	ldr	r3, [r7, #16]
    282c:	2204      	movs	r2, #4
    282e:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2830:	693b      	ldr	r3, [r7, #16]
    2832:	781b      	ldrb	r3, [r3, #0]
    2834:	2b00      	cmp	r3, #0
    2836:	d103      	bne.n	2840 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2838:	693b      	ldr	r3, [r7, #16]
    283a:	2202      	movs	r2, #2
    283c:	709a      	strb	r2, [r3, #2]
			return;
    283e:	e01a      	b.n	2876 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2840:	693b      	ldr	r3, [r7, #16]
    2842:	2201      	movs	r2, #1
    2844:	709a      	strb	r2, [r3, #2]
    2846:	e00f      	b.n	2868 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2848:	68bb      	ldr	r3, [r7, #8]
    284a:	2b03      	cmp	r3, #3
    284c:	d106      	bne.n	285c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    284e:	693b      	ldr	r3, [r7, #16]
    2850:	2200      	movs	r2, #0
    2852:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2854:	693b      	ldr	r3, [r7, #16]
    2856:	2205      	movs	r2, #5
    2858:	70da      	strb	r2, [r3, #3]
    285a:	e005      	b.n	2868 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    285c:	693b      	ldr	r3, [r7, #16]
    285e:	2206      	movs	r2, #6
    2860:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2862:	693b      	ldr	r3, [r7, #16]
    2864:	2206      	movs	r2, #6
    2866:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2868:	693b      	ldr	r3, [r7, #16]
    286a:	69db      	ldr	r3, [r3, #28]
    286c:	693a      	ldr	r2, [r7, #16]
    286e:	78d1      	ldrb	r1, [r2, #3]
    2870:	687a      	ldr	r2, [r7, #4]
    2872:	7bf8      	ldrb	r0, [r7, #15]
    2874:	4798      	blx	r3
}
    2876:	3718      	adds	r7, #24
    2878:	46bd      	mov	sp, r7
    287a:	bd80      	pop	{r7, pc}
    287c:	000024e1 	.word	0x000024e1
    2880:	20000718 	.word	0x20000718
    2884:	000026e9 	.word	0x000026e9
    2888:	00009bf1 	.word	0x00009bf1

0000288c <usb_d_init>:

int32_t usb_d_init(void)
{
    288c:	b580      	push	{r7, lr}
    288e:	b082      	sub	sp, #8
    2890:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    2892:	4b21      	ldr	r3, [pc, #132]	; (2918 <usb_d_init+0x8c>)
    2894:	4798      	blx	r3
    2896:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2898:	683b      	ldr	r3, [r7, #0]
    289a:	2b00      	cmp	r3, #0
    289c:	da01      	bge.n	28a2 <usb_d_init+0x16>
		return rc;
    289e:	683b      	ldr	r3, [r7, #0]
    28a0:	e036      	b.n	2910 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    28a2:	2280      	movs	r2, #128	; 0x80
    28a4:	2100      	movs	r1, #0
    28a6:	481d      	ldr	r0, [pc, #116]	; (291c <usb_d_init+0x90>)
    28a8:	4b1d      	ldr	r3, [pc, #116]	; (2920 <usb_d_init+0x94>)
    28aa:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    28ac:	2300      	movs	r3, #0
    28ae:	71fb      	strb	r3, [r7, #7]
    28b0:	e01e      	b.n	28f0 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    28b2:	79fb      	ldrb	r3, [r7, #7]
    28b4:	4a19      	ldr	r2, [pc, #100]	; (291c <usb_d_init+0x90>)
    28b6:	015b      	lsls	r3, r3, #5
    28b8:	4413      	add	r3, r2
    28ba:	3301      	adds	r3, #1
    28bc:	22ff      	movs	r2, #255	; 0xff
    28be:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    28c0:	79fb      	ldrb	r3, [r7, #7]
    28c2:	4a16      	ldr	r2, [pc, #88]	; (291c <usb_d_init+0x90>)
    28c4:	015b      	lsls	r3, r3, #5
    28c6:	4413      	add	r3, r2
    28c8:	3314      	adds	r3, #20
    28ca:	4a16      	ldr	r2, [pc, #88]	; (2924 <usb_d_init+0x98>)
    28cc:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    28ce:	79fb      	ldrb	r3, [r7, #7]
    28d0:	4a12      	ldr	r2, [pc, #72]	; (291c <usb_d_init+0x90>)
    28d2:	015b      	lsls	r3, r3, #5
    28d4:	4413      	add	r3, r2
    28d6:	3318      	adds	r3, #24
    28d8:	4a12      	ldr	r2, [pc, #72]	; (2924 <usb_d_init+0x98>)
    28da:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    28dc:	79fb      	ldrb	r3, [r7, #7]
    28de:	4a0f      	ldr	r2, [pc, #60]	; (291c <usb_d_init+0x90>)
    28e0:	015b      	lsls	r3, r3, #5
    28e2:	4413      	add	r3, r2
    28e4:	331c      	adds	r3, #28
    28e6:	4a0f      	ldr	r2, [pc, #60]	; (2924 <usb_d_init+0x98>)
    28e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    28ea:	79fb      	ldrb	r3, [r7, #7]
    28ec:	3301      	adds	r3, #1
    28ee:	71fb      	strb	r3, [r7, #7]
    28f0:	79fb      	ldrb	r3, [r7, #7]
    28f2:	2b03      	cmp	r3, #3
    28f4:	d9dd      	bls.n	28b2 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    28f6:	490c      	ldr	r1, [pc, #48]	; (2928 <usb_d_init+0x9c>)
    28f8:	2000      	movs	r0, #0
    28fa:	4b0c      	ldr	r3, [pc, #48]	; (292c <usb_d_init+0xa0>)
    28fc:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    28fe:	490c      	ldr	r1, [pc, #48]	; (2930 <usb_d_init+0xa4>)
    2900:	2001      	movs	r0, #1
    2902:	4b0a      	ldr	r3, [pc, #40]	; (292c <usb_d_init+0xa0>)
    2904:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2906:	490b      	ldr	r1, [pc, #44]	; (2934 <usb_d_init+0xa8>)
    2908:	2002      	movs	r0, #2
    290a:	4b08      	ldr	r3, [pc, #32]	; (292c <usb_d_init+0xa0>)
    290c:	4798      	blx	r3
	return ERR_NONE;
    290e:	2300      	movs	r3, #0
}
    2910:	4618      	mov	r0, r3
    2912:	3708      	adds	r7, #8
    2914:	46bd      	mov	sp, r7
    2916:	bd80      	pop	{r7, pc}
    2918:	00009439 	.word	0x00009439
    291c:	20000718 	.word	0x20000718
    2920:	0000cd69 	.word	0x0000cd69
    2924:	000025b5 	.word	0x000025b5
    2928:	000025d1 	.word	0x000025d1
    292c:	0000a02d 	.word	0x0000a02d
    2930:	00002699 	.word	0x00002699
    2934:	000027ad 	.word	0x000027ad

00002938 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2938:	b580      	push	{r7, lr}
    293a:	b082      	sub	sp, #8
    293c:	af00      	add	r7, sp, #0
    293e:	4603      	mov	r3, r0
    2940:	6039      	str	r1, [r7, #0]
    2942:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2944:	79fb      	ldrb	r3, [r7, #7]
    2946:	6839      	ldr	r1, [r7, #0]
    2948:	4618      	mov	r0, r3
    294a:	4b03      	ldr	r3, [pc, #12]	; (2958 <usb_d_register_callback+0x20>)
    294c:	4798      	blx	r3
}
    294e:	bf00      	nop
    2950:	3708      	adds	r7, #8
    2952:	46bd      	mov	sp, r7
    2954:	bd80      	pop	{r7, pc}
    2956:	bf00      	nop
    2958:	00009fe5 	.word	0x00009fe5

0000295c <usb_d_enable>:

int32_t usb_d_enable(void)
{
    295c:	b580      	push	{r7, lr}
    295e:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    2960:	4b02      	ldr	r3, [pc, #8]	; (296c <usb_d_enable+0x10>)
    2962:	4798      	blx	r3
    2964:	4603      	mov	r3, r0
}
    2966:	4618      	mov	r0, r3
    2968:	bd80      	pop	{r7, pc}
    296a:	bf00      	nop
    296c:	00009529 	.word	0x00009529

00002970 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2970:	b580      	push	{r7, lr}
    2972:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    2974:	4b01      	ldr	r3, [pc, #4]	; (297c <usb_d_attach+0xc>)
    2976:	4798      	blx	r3
}
    2978:	bf00      	nop
    297a:	bd80      	pop	{r7, pc}
    297c:	000095ad 	.word	0x000095ad

00002980 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2980:	b580      	push	{r7, lr}
    2982:	b082      	sub	sp, #8
    2984:	af00      	add	r7, sp, #0
    2986:	4603      	mov	r3, r0
    2988:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    298a:	79fb      	ldrb	r3, [r7, #7]
    298c:	4618      	mov	r0, r3
    298e:	4b03      	ldr	r3, [pc, #12]	; (299c <usb_d_set_address+0x1c>)
    2990:	4798      	blx	r3
}
    2992:	bf00      	nop
    2994:	3708      	adds	r7, #8
    2996:	46bd      	mov	sp, r7
    2998:	bd80      	pop	{r7, pc}
    299a:	bf00      	nop
    299c:	000095c1 	.word	0x000095c1

000029a0 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    29a0:	b580      	push	{r7, lr}
    29a2:	b082      	sub	sp, #8
    29a4:	af00      	add	r7, sp, #0
    29a6:	4603      	mov	r3, r0
    29a8:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    29aa:	79fb      	ldrb	r3, [r7, #7]
    29ac:	b29b      	uxth	r3, r3
    29ae:	461a      	mov	r2, r3
    29b0:	2100      	movs	r1, #0
    29b2:	2000      	movs	r0, #0
    29b4:	4b03      	ldr	r3, [pc, #12]	; (29c4 <usb_d_ep0_init+0x24>)
    29b6:	4798      	blx	r3
    29b8:	4603      	mov	r3, r0
}
    29ba:	4618      	mov	r0, r3
    29bc:	3708      	adds	r7, #8
    29be:	46bd      	mov	sp, r7
    29c0:	bd80      	pop	{r7, pc}
    29c2:	bf00      	nop
    29c4:	000029c9 	.word	0x000029c9

000029c8 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    29c8:	b580      	push	{r7, lr}
    29ca:	b086      	sub	sp, #24
    29cc:	af00      	add	r7, sp, #0
    29ce:	4603      	mov	r3, r0
    29d0:	71fb      	strb	r3, [r7, #7]
    29d2:	460b      	mov	r3, r1
    29d4:	71bb      	strb	r3, [r7, #6]
    29d6:	4613      	mov	r3, r2
    29d8:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    29da:	79fb      	ldrb	r3, [r7, #7]
    29dc:	4618      	mov	r0, r3
    29de:	4b1e      	ldr	r3, [pc, #120]	; (2a58 <usb_d_ep_init+0x90>)
    29e0:	4798      	blx	r3
    29e2:	4603      	mov	r3, r0
    29e4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    29e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    29ea:	015b      	lsls	r3, r3, #5
    29ec:	4a1b      	ldr	r2, [pc, #108]	; (2a5c <usb_d_ep_init+0x94>)
    29ee:	4413      	add	r3, r2
    29f0:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    29f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    29f6:	2b00      	cmp	r3, #0
    29f8:	db02      	blt.n	2a00 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    29fa:	f06f 0313 	mvn.w	r3, #19
    29fe:	e027      	b.n	2a50 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2a00:	20ff      	movs	r0, #255	; 0xff
    2a02:	4b15      	ldr	r3, [pc, #84]	; (2a58 <usb_d_ep_init+0x90>)
    2a04:	4798      	blx	r3
    2a06:	4603      	mov	r3, r0
    2a08:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    2a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2a0e:	2b00      	cmp	r3, #0
    2a10:	da02      	bge.n	2a18 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    2a12:	f06f 0314 	mvn.w	r3, #20
    2a16:	e01b      	b.n	2a50 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    2a18:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2a1c:	015b      	lsls	r3, r3, #5
    2a1e:	4a0f      	ldr	r2, [pc, #60]	; (2a5c <usb_d_ep_init+0x94>)
    2a20:	4413      	add	r3, r2
    2a22:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2a24:	88ba      	ldrh	r2, [r7, #4]
    2a26:	79b9      	ldrb	r1, [r7, #6]
    2a28:	79fb      	ldrb	r3, [r7, #7]
    2a2a:	4618      	mov	r0, r3
    2a2c:	4b0c      	ldr	r3, [pc, #48]	; (2a60 <usb_d_ep_init+0x98>)
    2a2e:	4798      	blx	r3
    2a30:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2a32:	68fb      	ldr	r3, [r7, #12]
    2a34:	2b00      	cmp	r3, #0
    2a36:	da01      	bge.n	2a3c <usb_d_ep_init+0x74>
		return rc;
    2a38:	68fb      	ldr	r3, [r7, #12]
    2a3a:	e009      	b.n	2a50 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    2a3c:	693b      	ldr	r3, [r7, #16]
    2a3e:	79fa      	ldrb	r2, [r7, #7]
    2a40:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2a42:	79bb      	ldrb	r3, [r7, #6]
    2a44:	f003 0303 	and.w	r3, r3, #3
    2a48:	b2da      	uxtb	r2, r3
    2a4a:	693b      	ldr	r3, [r7, #16]
    2a4c:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    2a4e:	2300      	movs	r3, #0
}
    2a50:	4618      	mov	r0, r3
    2a52:	3718      	adds	r7, #24
    2a54:	46bd      	mov	sp, r7
    2a56:	bd80      	pop	{r7, pc}
    2a58:	000024e1 	.word	0x000024e1
    2a5c:	20000718 	.word	0x20000718
    2a60:	00009661 	.word	0x00009661

00002a64 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2a64:	b580      	push	{r7, lr}
    2a66:	b084      	sub	sp, #16
    2a68:	af00      	add	r7, sp, #0
    2a6a:	4603      	mov	r3, r0
    2a6c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2a6e:	79fb      	ldrb	r3, [r7, #7]
    2a70:	4618      	mov	r0, r3
    2a72:	4b0d      	ldr	r3, [pc, #52]	; (2aa8 <usb_d_ep_deinit+0x44>)
    2a74:	4798      	blx	r3
    2a76:	4603      	mov	r3, r0
    2a78:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2a7e:	015b      	lsls	r3, r3, #5
    2a80:	4a0a      	ldr	r2, [pc, #40]	; (2aac <usb_d_ep_deinit+0x48>)
    2a82:	4413      	add	r3, r2
    2a84:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    2a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	db07      	blt.n	2a9e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2a8e:	79fb      	ldrb	r3, [r7, #7]
    2a90:	4618      	mov	r0, r3
    2a92:	4b07      	ldr	r3, [pc, #28]	; (2ab0 <usb_d_ep_deinit+0x4c>)
    2a94:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2a96:	68bb      	ldr	r3, [r7, #8]
    2a98:	22ff      	movs	r2, #255	; 0xff
    2a9a:	705a      	strb	r2, [r3, #1]
    2a9c:	e000      	b.n	2aa0 <usb_d_ep_deinit+0x3c>
		return;
    2a9e:	bf00      	nop
}
    2aa0:	3710      	adds	r7, #16
    2aa2:	46bd      	mov	sp, r7
    2aa4:	bd80      	pop	{r7, pc}
    2aa6:	bf00      	nop
    2aa8:	000024e1 	.word	0x000024e1
    2aac:	20000718 	.word	0x20000718
    2ab0:	00009795 	.word	0x00009795

00002ab4 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2ab4:	b580      	push	{r7, lr}
    2ab6:	b086      	sub	sp, #24
    2ab8:	af00      	add	r7, sp, #0
    2aba:	4603      	mov	r3, r0
    2abc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2abe:	79fb      	ldrb	r3, [r7, #7]
    2ac0:	4618      	mov	r0, r3
    2ac2:	4b15      	ldr	r3, [pc, #84]	; (2b18 <usb_d_ep_enable+0x64>)
    2ac4:	4798      	blx	r3
    2ac6:	4603      	mov	r3, r0
    2ac8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2aca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2ace:	015b      	lsls	r3, r3, #5
    2ad0:	4a12      	ldr	r2, [pc, #72]	; (2b1c <usb_d_ep_enable+0x68>)
    2ad2:	4413      	add	r3, r2
    2ad4:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2ada:	2b00      	cmp	r3, #0
    2adc:	da02      	bge.n	2ae4 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    2ade:	f06f 0311 	mvn.w	r3, #17
    2ae2:	e014      	b.n	2b0e <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2ae4:	693b      	ldr	r3, [r7, #16]
    2ae6:	781b      	ldrb	r3, [r3, #0]
    2ae8:	2b00      	cmp	r3, #0
    2aea:	d101      	bne.n	2af0 <usb_d_ep_enable+0x3c>
    2aec:	2202      	movs	r2, #2
    2aee:	e000      	b.n	2af2 <usb_d_ep_enable+0x3e>
    2af0:	2201      	movs	r2, #1
    2af2:	693b      	ldr	r3, [r7, #16]
    2af4:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    2af6:	79fb      	ldrb	r3, [r7, #7]
    2af8:	4618      	mov	r0, r3
    2afa:	4b09      	ldr	r3, [pc, #36]	; (2b20 <usb_d_ep_enable+0x6c>)
    2afc:	4798      	blx	r3
    2afe:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2b00:	68fb      	ldr	r3, [r7, #12]
    2b02:	2b00      	cmp	r3, #0
    2b04:	da02      	bge.n	2b0c <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2b06:	693b      	ldr	r3, [r7, #16]
    2b08:	2200      	movs	r2, #0
    2b0a:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    2b0c:	68fb      	ldr	r3, [r7, #12]
}
    2b0e:	4618      	mov	r0, r3
    2b10:	3718      	adds	r7, #24
    2b12:	46bd      	mov	sp, r7
    2b14:	bd80      	pop	{r7, pc}
    2b16:	bf00      	nop
    2b18:	000024e1 	.word	0x000024e1
    2b1c:	20000718 	.word	0x20000718
    2b20:	00009879 	.word	0x00009879

00002b24 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2b24:	b590      	push	{r4, r7, lr}
    2b26:	b08d      	sub	sp, #52	; 0x34
    2b28:	af02      	add	r7, sp, #8
    2b2a:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2b2c:	687b      	ldr	r3, [r7, #4]
    2b2e:	7a1b      	ldrb	r3, [r3, #8]
    2b30:	4618      	mov	r0, r3
    2b32:	4b51      	ldr	r3, [pc, #324]	; (2c78 <usb_d_ep_transfer+0x154>)
    2b34:	4798      	blx	r3
    2b36:	4603      	mov	r3, r0
    2b38:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    2b3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2b3e:	015b      	lsls	r3, r3, #5
    2b40:	4a4e      	ldr	r2, [pc, #312]	; (2c7c <usb_d_ep_transfer+0x158>)
    2b42:	4413      	add	r3, r2
    2b44:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2b46:	687b      	ldr	r3, [r7, #4]
    2b48:	7a1b      	ldrb	r3, [r3, #8]
    2b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2b4e:	2b00      	cmp	r3, #0
    2b50:	bf14      	ite	ne
    2b52:	2301      	movne	r3, #1
    2b54:	2300      	moveq	r3, #0
    2b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	7a5b      	ldrb	r3, [r3, #9]
    2b5e:	2b00      	cmp	r3, #0
    2b60:	bf14      	ite	ne
    2b62:	2301      	movne	r3, #1
    2b64:	2300      	moveq	r3, #0
    2b66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    2b6a:	687b      	ldr	r3, [r7, #4]
    2b6c:	685b      	ldr	r3, [r3, #4]
    2b6e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2b70:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2b74:	2b00      	cmp	r3, #0
    2b76:	da02      	bge.n	2b7e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    2b78:	f06f 0311 	mvn.w	r3, #17
    2b7c:	e077      	b.n	2c6e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    2b7e:	f107 0308 	add.w	r3, r7, #8
    2b82:	4618      	mov	r0, r3
    2b84:	4b3e      	ldr	r3, [pc, #248]	; (2c80 <usb_d_ep_transfer+0x15c>)
    2b86:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2b88:	69bb      	ldr	r3, [r7, #24]
    2b8a:	789b      	ldrb	r3, [r3, #2]
    2b8c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    2b8e:	7bfb      	ldrb	r3, [r7, #15]
    2b90:	b2db      	uxtb	r3, r3
    2b92:	2b01      	cmp	r3, #1
    2b94:	d10c      	bne.n	2bb0 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2b96:	69bb      	ldr	r3, [r7, #24]
    2b98:	2203      	movs	r2, #3
    2b9a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2b9c:	f107 0308 	add.w	r3, r7, #8
    2ba0:	4618      	mov	r0, r3
    2ba2:	4b38      	ldr	r3, [pc, #224]	; (2c84 <usb_d_ep_transfer+0x160>)
    2ba4:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2ba6:	69bb      	ldr	r3, [r7, #24]
    2ba8:	781b      	ldrb	r3, [r3, #0]
    2baa:	2b00      	cmp	r3, #0
    2bac:	d151      	bne.n	2c52 <usb_d_ep_transfer+0x12e>
    2bae:	e017      	b.n	2be0 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    2bb0:	f107 0308 	add.w	r3, r7, #8
    2bb4:	4618      	mov	r0, r3
    2bb6:	4b33      	ldr	r3, [pc, #204]	; (2c84 <usb_d_ep_transfer+0x160>)
    2bb8:	4798      	blx	r3
		switch (state) {
    2bba:	7bfb      	ldrb	r3, [r7, #15]
    2bbc:	b2db      	uxtb	r3, r3
    2bbe:	2b05      	cmp	r3, #5
    2bc0:	d004      	beq.n	2bcc <usb_d_ep_transfer+0xa8>
    2bc2:	2b06      	cmp	r3, #6
    2bc4:	d004      	beq.n	2bd0 <usb_d_ep_transfer+0xac>
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	d005      	beq.n	2bd6 <usb_d_ep_transfer+0xb2>
    2bca:	e007      	b.n	2bdc <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    2bcc:	2302      	movs	r3, #2
    2bce:	e04e      	b.n	2c6e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    2bd0:	f06f 030f 	mvn.w	r3, #15
    2bd4:	e04b      	b.n	2c6e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    2bd6:	f06f 0312 	mvn.w	r3, #18
    2bda:	e048      	b.n	2c6e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    2bdc:	2301      	movs	r3, #1
    2bde:	e046      	b.n	2c6e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2be0:	69bb      	ldr	r3, [r7, #24]
    2be2:	7c9b      	ldrb	r3, [r3, #18]
    2be4:	b29a      	uxth	r2, r3
    2be6:	69bb      	ldr	r3, [r7, #24]
    2be8:	7cdb      	ldrb	r3, [r3, #19]
    2bea:	b29b      	uxth	r3, r3
    2bec:	021b      	lsls	r3, r3, #8
    2bee:	b29b      	uxth	r3, r3
    2bf0:	4413      	add	r3, r2
    2bf2:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    2bf4:	8afb      	ldrh	r3, [r7, #22]
    2bf6:	2b00      	cmp	r3, #0
    2bf8:	d10b      	bne.n	2c12 <usb_d_ep_transfer+0xee>
			dir                 = true;
    2bfa:	2301      	movs	r3, #1
    2bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    2c00:	2300      	movs	r3, #0
    2c02:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    2c04:	2301      	movs	r3, #1
    2c06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2c0a:	69bb      	ldr	r3, [r7, #24]
    2c0c:	2204      	movs	r2, #4
    2c0e:	709a      	strb	r2, [r3, #2]
    2c10:	e01f      	b.n	2c52 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2c12:	69bb      	ldr	r3, [r7, #24]
    2c14:	7b1b      	ldrb	r3, [r3, #12]
    2c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	bf14      	ite	ne
    2c1e:	2301      	movne	r3, #1
    2c20:	2300      	moveq	r3, #0
    2c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    2c26:	8afa      	ldrh	r2, [r7, #22]
    2c28:	6a3b      	ldr	r3, [r7, #32]
    2c2a:	429a      	cmp	r2, r3
    2c2c:	d201      	bcs.n	2c32 <usb_d_ep_transfer+0x10e>
				len = req_len;
    2c2e:	8afb      	ldrh	r3, [r7, #22]
    2c30:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    2c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2c36:	2b00      	cmp	r3, #0
    2c38:	d008      	beq.n	2c4c <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    2c3a:	8afa      	ldrh	r2, [r7, #22]
    2c3c:	6a3b      	ldr	r3, [r7, #32]
    2c3e:	429a      	cmp	r2, r3
    2c40:	bf8c      	ite	hi
    2c42:	2301      	movhi	r3, #1
    2c44:	2300      	movls	r3, #0
    2c46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    2c4a:	e002      	b.n	2c52 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    2c4c:	2300      	movs	r3, #0
    2c4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2c52:	687b      	ldr	r3, [r7, #4]
    2c54:	7a18      	ldrb	r0, [r3, #8]
    2c56:	687b      	ldr	r3, [r7, #4]
    2c58:	681a      	ldr	r2, [r3, #0]
    2c5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    2c5e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    2c62:	9300      	str	r3, [sp, #0]
    2c64:	6a3b      	ldr	r3, [r7, #32]
    2c66:	4c08      	ldr	r4, [pc, #32]	; (2c88 <usb_d_ep_transfer+0x164>)
    2c68:	47a0      	blx	r4
    2c6a:	6138      	str	r0, [r7, #16]
	return rc;
    2c6c:	693b      	ldr	r3, [r7, #16]
}
    2c6e:	4618      	mov	r0, r3
    2c70:	372c      	adds	r7, #44	; 0x2c
    2c72:	46bd      	mov	sp, r7
    2c74:	bd90      	pop	{r4, r7, pc}
    2c76:	bf00      	nop
    2c78:	000024e1 	.word	0x000024e1
    2c7c:	20000718 	.word	0x20000718
    2c80:	0000a799 	.word	0x0000a799
    2c84:	0000a7bf 	.word	0x0000a7bf
    2c88:	00002561 	.word	0x00002561

00002c8c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    2c8c:	b580      	push	{r7, lr}
    2c8e:	b086      	sub	sp, #24
    2c90:	af00      	add	r7, sp, #0
    2c92:	4603      	mov	r3, r0
    2c94:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2c96:	79fb      	ldrb	r3, [r7, #7]
    2c98:	4618      	mov	r0, r3
    2c9a:	4b1a      	ldr	r3, [pc, #104]	; (2d04 <_usb_d_ep_halt_clr+0x78>)
    2c9c:	4798      	blx	r3
    2c9e:	4603      	mov	r3, r0
    2ca0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2ca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2ca6:	015b      	lsls	r3, r3, #5
    2ca8:	4a17      	ldr	r2, [pc, #92]	; (2d08 <_usb_d_ep_halt_clr+0x7c>)
    2caa:	4413      	add	r3, r2
    2cac:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2cae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	da02      	bge.n	2cbc <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    2cb6:	f06f 0311 	mvn.w	r3, #17
    2cba:	e01f      	b.n	2cfc <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2cbc:	79fb      	ldrb	r3, [r7, #7]
    2cbe:	2102      	movs	r1, #2
    2cc0:	4618      	mov	r0, r3
    2cc2:	4b12      	ldr	r3, [pc, #72]	; (2d0c <_usb_d_ep_halt_clr+0x80>)
    2cc4:	4798      	blx	r3
    2cc6:	4603      	mov	r3, r0
    2cc8:	2b00      	cmp	r3, #0
    2cca:	d016      	beq.n	2cfa <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2ccc:	79fb      	ldrb	r3, [r7, #7]
    2cce:	2100      	movs	r1, #0
    2cd0:	4618      	mov	r0, r3
    2cd2:	4b0e      	ldr	r3, [pc, #56]	; (2d0c <_usb_d_ep_halt_clr+0x80>)
    2cd4:	4798      	blx	r3
    2cd6:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    2cd8:	68fb      	ldr	r3, [r7, #12]
    2cda:	2b00      	cmp	r3, #0
    2cdc:	da01      	bge.n	2ce2 <_usb_d_ep_halt_clr+0x56>
			return rc;
    2cde:	68fb      	ldr	r3, [r7, #12]
    2ce0:	e00c      	b.n	2cfc <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2ce2:	693b      	ldr	r3, [r7, #16]
    2ce4:	2201      	movs	r2, #1
    2ce6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2ce8:	693b      	ldr	r3, [r7, #16]
    2cea:	2203      	movs	r2, #3
    2cec:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2cee:	693b      	ldr	r3, [r7, #16]
    2cf0:	69db      	ldr	r3, [r3, #28]
    2cf2:	79f8      	ldrb	r0, [r7, #7]
    2cf4:	2200      	movs	r2, #0
    2cf6:	2103      	movs	r1, #3
    2cf8:	4798      	blx	r3
	}
	return ERR_NONE;
    2cfa:	2300      	movs	r3, #0
}
    2cfc:	4618      	mov	r0, r3
    2cfe:	3718      	adds	r7, #24
    2d00:	46bd      	mov	sp, r7
    2d02:	bd80      	pop	{r7, pc}
    2d04:	000024e1 	.word	0x000024e1
    2d08:	20000718 	.word	0x20000718
    2d0c:	00009bf1 	.word	0x00009bf1

00002d10 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2d10:	b580      	push	{r7, lr}
    2d12:	b082      	sub	sp, #8
    2d14:	af00      	add	r7, sp, #0
    2d16:	4603      	mov	r3, r0
    2d18:	460a      	mov	r2, r1
    2d1a:	71fb      	strb	r3, [r7, #7]
    2d1c:	4613      	mov	r3, r2
    2d1e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    2d20:	79bb      	ldrb	r3, [r7, #6]
    2d22:	2b00      	cmp	r3, #0
    2d24:	d105      	bne.n	2d32 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    2d26:	79fb      	ldrb	r3, [r7, #7]
    2d28:	4618      	mov	r0, r3
    2d2a:	4b0c      	ldr	r3, [pc, #48]	; (2d5c <usb_d_ep_halt+0x4c>)
    2d2c:	4798      	blx	r3
    2d2e:	4603      	mov	r3, r0
    2d30:	e00f      	b.n	2d52 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    2d32:	79bb      	ldrb	r3, [r7, #6]
    2d34:	2b01      	cmp	r3, #1
    2d36:	d106      	bne.n	2d46 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2d38:	79fb      	ldrb	r3, [r7, #7]
    2d3a:	2101      	movs	r1, #1
    2d3c:	4618      	mov	r0, r3
    2d3e:	4b08      	ldr	r3, [pc, #32]	; (2d60 <usb_d_ep_halt+0x50>)
    2d40:	4798      	blx	r3
    2d42:	4603      	mov	r3, r0
    2d44:	e005      	b.n	2d52 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2d46:	79fb      	ldrb	r3, [r7, #7]
    2d48:	2102      	movs	r1, #2
    2d4a:	4618      	mov	r0, r3
    2d4c:	4b04      	ldr	r3, [pc, #16]	; (2d60 <usb_d_ep_halt+0x50>)
    2d4e:	4798      	blx	r3
    2d50:	4603      	mov	r3, r0
	}
}
    2d52:	4618      	mov	r0, r3
    2d54:	3708      	adds	r7, #8
    2d56:	46bd      	mov	sp, r7
    2d58:	bd80      	pop	{r7, pc}
    2d5a:	bf00      	nop
    2d5c:	00002c8d 	.word	0x00002c8d
    2d60:	00009bf1 	.word	0x00009bf1

00002d64 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2d64:	b580      	push	{r7, lr}
    2d66:	b086      	sub	sp, #24
    2d68:	af00      	add	r7, sp, #0
    2d6a:	4603      	mov	r3, r0
    2d6c:	603a      	str	r2, [r7, #0]
    2d6e:	71fb      	strb	r3, [r7, #7]
    2d70:	460b      	mov	r3, r1
    2d72:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d74:	79fb      	ldrb	r3, [r7, #7]
    2d76:	4618      	mov	r0, r3
    2d78:	4b16      	ldr	r3, [pc, #88]	; (2dd4 <usb_d_ep_register_callback+0x70>)
    2d7a:	4798      	blx	r3
    2d7c:	4603      	mov	r3, r0
    2d7e:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2d80:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2d84:	015b      	lsls	r3, r3, #5
    2d86:	4a14      	ldr	r2, [pc, #80]	; (2dd8 <usb_d_ep_register_callback+0x74>)
    2d88:	4413      	add	r3, r2
    2d8a:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2d8c:	683b      	ldr	r3, [r7, #0]
    2d8e:	2b00      	cmp	r3, #0
    2d90:	d001      	beq.n	2d96 <usb_d_ep_register_callback+0x32>
    2d92:	683b      	ldr	r3, [r7, #0]
    2d94:	e000      	b.n	2d98 <usb_d_ep_register_callback+0x34>
    2d96:	4b11      	ldr	r3, [pc, #68]	; (2ddc <usb_d_ep_register_callback+0x78>)
    2d98:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    2d9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2d9e:	2b00      	cmp	r3, #0
    2da0:	db13      	blt.n	2dca <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    2da2:	79bb      	ldrb	r3, [r7, #6]
    2da4:	2b01      	cmp	r3, #1
    2da6:	d008      	beq.n	2dba <usb_d_ep_register_callback+0x56>
    2da8:	2b02      	cmp	r3, #2
    2daa:	d00a      	beq.n	2dc2 <usb_d_ep_register_callback+0x5e>
    2dac:	2b00      	cmp	r3, #0
    2dae:	d000      	beq.n	2db2 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    2db0:	e00c      	b.n	2dcc <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2db2:	693b      	ldr	r3, [r7, #16]
    2db4:	68fa      	ldr	r2, [r7, #12]
    2db6:	615a      	str	r2, [r3, #20]
		break;
    2db8:	e008      	b.n	2dcc <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2dba:	693b      	ldr	r3, [r7, #16]
    2dbc:	68fa      	ldr	r2, [r7, #12]
    2dbe:	619a      	str	r2, [r3, #24]
		break;
    2dc0:	e004      	b.n	2dcc <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2dc2:	693b      	ldr	r3, [r7, #16]
    2dc4:	68fa      	ldr	r2, [r7, #12]
    2dc6:	61da      	str	r2, [r3, #28]
		break;
    2dc8:	e000      	b.n	2dcc <usb_d_ep_register_callback+0x68>
		return;
    2dca:	bf00      	nop
	}
}
    2dcc:	3718      	adds	r7, #24
    2dce:	46bd      	mov	sp, r7
    2dd0:	bd80      	pop	{r7, pc}
    2dd2:	bf00      	nop
    2dd4:	000024e1 	.word	0x000024e1
    2dd8:	20000718 	.word	0x20000718
    2ddc:	000025b5 	.word	0x000025b5

00002de0 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    2de0:	b480      	push	{r7}
    2de2:	b085      	sub	sp, #20
    2de4:	af00      	add	r7, sp, #0
    2de6:	4603      	mov	r3, r0
    2de8:	60b9      	str	r1, [r7, #8]
    2dea:	607a      	str	r2, [r7, #4]
    2dec:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    2dee:	7bfb      	ldrb	r3, [r7, #15]
    2df0:	f083 0301 	eor.w	r3, r3, #1
    2df4:	b2db      	uxtb	r3, r3
    2df6:	2b00      	cmp	r3, #0
    2df8:	d000      	beq.n	2dfc <assert+0x1c>
		__asm("BKPT #0");
    2dfa:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2dfc:	bf00      	nop
    2dfe:	3714      	adds	r7, #20
    2e00:	46bd      	mov	sp, r7
    2e02:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e06:	4770      	bx	lr

00002e08 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    2e08:	b480      	push	{r7}
    2e0a:	b085      	sub	sp, #20
    2e0c:	af00      	add	r7, sp, #0
    2e0e:	6078      	str	r0, [r7, #4]
    2e10:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2e12:	687b      	ldr	r3, [r7, #4]
    2e14:	681b      	ldr	r3, [r3, #0]
    2e16:	60fb      	str	r3, [r7, #12]
    2e18:	e008      	b.n	2e2c <is_list_element+0x24>
		if (it == element) {
    2e1a:	68fa      	ldr	r2, [r7, #12]
    2e1c:	683b      	ldr	r3, [r7, #0]
    2e1e:	429a      	cmp	r2, r3
    2e20:	d101      	bne.n	2e26 <is_list_element+0x1e>
			return true;
    2e22:	2301      	movs	r3, #1
    2e24:	e006      	b.n	2e34 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    2e26:	68fb      	ldr	r3, [r7, #12]
    2e28:	681b      	ldr	r3, [r3, #0]
    2e2a:	60fb      	str	r3, [r7, #12]
    2e2c:	68fb      	ldr	r3, [r7, #12]
    2e2e:	2b00      	cmp	r3, #0
    2e30:	d1f3      	bne.n	2e1a <is_list_element+0x12>
		}
	}

	return false;
    2e32:	2300      	movs	r3, #0
}
    2e34:	4618      	mov	r0, r3
    2e36:	3714      	adds	r7, #20
    2e38:	46bd      	mov	sp, r7
    2e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e3e:	4770      	bx	lr

00002e40 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2e40:	b580      	push	{r7, lr}
    2e42:	b082      	sub	sp, #8
    2e44:	af00      	add	r7, sp, #0
    2e46:	6078      	str	r0, [r7, #4]
    2e48:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    2e4a:	6839      	ldr	r1, [r7, #0]
    2e4c:	6878      	ldr	r0, [r7, #4]
    2e4e:	4b0f      	ldr	r3, [pc, #60]	; (2e8c <list_insert_as_head+0x4c>)
    2e50:	4798      	blx	r3
    2e52:	4603      	mov	r3, r0
    2e54:	2b00      	cmp	r3, #0
    2e56:	bf14      	ite	ne
    2e58:	2301      	movne	r3, #1
    2e5a:	2300      	moveq	r3, #0
    2e5c:	b2db      	uxtb	r3, r3
    2e5e:	f083 0301 	eor.w	r3, r3, #1
    2e62:	b2db      	uxtb	r3, r3
    2e64:	f003 0301 	and.w	r3, r3, #1
    2e68:	b2db      	uxtb	r3, r3
    2e6a:	2239      	movs	r2, #57	; 0x39
    2e6c:	4908      	ldr	r1, [pc, #32]	; (2e90 <list_insert_as_head+0x50>)
    2e6e:	4618      	mov	r0, r3
    2e70:	4b08      	ldr	r3, [pc, #32]	; (2e94 <list_insert_as_head+0x54>)
    2e72:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	681a      	ldr	r2, [r3, #0]
    2e78:	683b      	ldr	r3, [r7, #0]
    2e7a:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    2e7c:	687b      	ldr	r3, [r7, #4]
    2e7e:	683a      	ldr	r2, [r7, #0]
    2e80:	601a      	str	r2, [r3, #0]
}
    2e82:	bf00      	nop
    2e84:	3708      	adds	r7, #8
    2e86:	46bd      	mov	sp, r7
    2e88:	bd80      	pop	{r7, pc}
    2e8a:	bf00      	nop
    2e8c:	00002e09 	.word	0x00002e09
    2e90:	0000d034 	.word	0x0000d034
    2e94:	00002de1 	.word	0x00002de1

00002e98 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    2e98:	b480      	push	{r7}
    2e9a:	b083      	sub	sp, #12
    2e9c:	af00      	add	r7, sp, #0
    2e9e:	6078      	str	r0, [r7, #4]
    2ea0:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2ea2:	687b      	ldr	r3, [r7, #4]
    2ea4:	681a      	ldr	r2, [r3, #0]
    2ea6:	683b      	ldr	r3, [r7, #0]
    2ea8:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2eaa:	687b      	ldr	r3, [r7, #4]
    2eac:	683a      	ldr	r2, [r7, #0]
    2eae:	601a      	str	r2, [r3, #0]
}
    2eb0:	bf00      	nop
    2eb2:	370c      	adds	r7, #12
    2eb4:	46bd      	mov	sp, r7
    2eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2eba:	4770      	bx	lr

00002ebc <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2ebc:	b580      	push	{r7, lr}
    2ebe:	b084      	sub	sp, #16
    2ec0:	af00      	add	r7, sp, #0
    2ec2:	6078      	str	r0, [r7, #4]
    2ec4:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    2ec6:	687b      	ldr	r3, [r7, #4]
    2ec8:	681b      	ldr	r3, [r3, #0]
    2eca:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    2ecc:	6839      	ldr	r1, [r7, #0]
    2ece:	6878      	ldr	r0, [r7, #4]
    2ed0:	4b16      	ldr	r3, [pc, #88]	; (2f2c <list_insert_at_end+0x70>)
    2ed2:	4798      	blx	r3
    2ed4:	4603      	mov	r3, r0
    2ed6:	2b00      	cmp	r3, #0
    2ed8:	bf14      	ite	ne
    2eda:	2301      	movne	r3, #1
    2edc:	2300      	moveq	r3, #0
    2ede:	b2db      	uxtb	r3, r3
    2ee0:	f083 0301 	eor.w	r3, r3, #1
    2ee4:	b2db      	uxtb	r3, r3
    2ee6:	f003 0301 	and.w	r3, r3, #1
    2eea:	b2db      	uxtb	r3, r3
    2eec:	224f      	movs	r2, #79	; 0x4f
    2eee:	4910      	ldr	r1, [pc, #64]	; (2f30 <list_insert_at_end+0x74>)
    2ef0:	4618      	mov	r0, r3
    2ef2:	4b10      	ldr	r3, [pc, #64]	; (2f34 <list_insert_at_end+0x78>)
    2ef4:	4798      	blx	r3

	if (!list->head) {
    2ef6:	687b      	ldr	r3, [r7, #4]
    2ef8:	681b      	ldr	r3, [r3, #0]
    2efa:	2b00      	cmp	r3, #0
    2efc:	d109      	bne.n	2f12 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    2efe:	687b      	ldr	r3, [r7, #4]
    2f00:	683a      	ldr	r2, [r7, #0]
    2f02:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    2f04:	683b      	ldr	r3, [r7, #0]
    2f06:	2200      	movs	r2, #0
    2f08:	601a      	str	r2, [r3, #0]
		return;
    2f0a:	e00c      	b.n	2f26 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    2f0c:	68fb      	ldr	r3, [r7, #12]
    2f0e:	681b      	ldr	r3, [r3, #0]
    2f10:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    2f12:	68fb      	ldr	r3, [r7, #12]
    2f14:	681b      	ldr	r3, [r3, #0]
    2f16:	2b00      	cmp	r3, #0
    2f18:	d1f8      	bne.n	2f0c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    2f1a:	68fb      	ldr	r3, [r7, #12]
    2f1c:	683a      	ldr	r2, [r7, #0]
    2f1e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    2f20:	683b      	ldr	r3, [r7, #0]
    2f22:	2200      	movs	r2, #0
    2f24:	601a      	str	r2, [r3, #0]
}
    2f26:	3710      	adds	r7, #16
    2f28:	46bd      	mov	sp, r7
    2f2a:	bd80      	pop	{r7, pc}
    2f2c:	00002e09 	.word	0x00002e09
    2f30:	0000d034 	.word	0x0000d034
    2f34:	00002de1 	.word	0x00002de1

00002f38 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    2f38:	b480      	push	{r7}
    2f3a:	b085      	sub	sp, #20
    2f3c:	af00      	add	r7, sp, #0
    2f3e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    2f40:	687b      	ldr	r3, [r7, #4]
    2f42:	681b      	ldr	r3, [r3, #0]
    2f44:	2b00      	cmp	r3, #0
    2f46:	d009      	beq.n	2f5c <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    2f48:	687b      	ldr	r3, [r7, #4]
    2f4a:	681b      	ldr	r3, [r3, #0]
    2f4c:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    2f4e:	687b      	ldr	r3, [r7, #4]
    2f50:	681b      	ldr	r3, [r3, #0]
    2f52:	681a      	ldr	r2, [r3, #0]
    2f54:	687b      	ldr	r3, [r7, #4]
    2f56:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    2f58:	68fb      	ldr	r3, [r7, #12]
    2f5a:	e000      	b.n	2f5e <list_remove_head+0x26>
	}

	return NULL;
    2f5c:	2300      	movs	r3, #0
}
    2f5e:	4618      	mov	r0, r3
    2f60:	3714      	adds	r7, #20
    2f62:	46bd      	mov	sp, r7
    2f64:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f68:	4770      	bx	lr
	...

00002f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    2f6c:	b480      	push	{r7}
    2f6e:	b083      	sub	sp, #12
    2f70:	af00      	add	r7, sp, #0
    2f72:	4603      	mov	r3, r0
    2f74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2f7a:	2b00      	cmp	r3, #0
    2f7c:	db0b      	blt.n	2f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f7e:	4909      	ldr	r1, [pc, #36]	; (2fa4 <__NVIC_EnableIRQ+0x38>)
    2f80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2f84:	095b      	lsrs	r3, r3, #5
    2f86:	88fa      	ldrh	r2, [r7, #6]
    2f88:	f002 021f 	and.w	r2, r2, #31
    2f8c:	2001      	movs	r0, #1
    2f8e:	fa00 f202 	lsl.w	r2, r0, r2
    2f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    2f96:	bf00      	nop
    2f98:	370c      	adds	r7, #12
    2f9a:	46bd      	mov	sp, r7
    2f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fa0:	4770      	bx	lr
    2fa2:	bf00      	nop
    2fa4:	e000e100 	.word	0xe000e100

00002fa8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    2fa8:	b480      	push	{r7}
    2faa:	b083      	sub	sp, #12
    2fac:	af00      	add	r7, sp, #0
    2fae:	4603      	mov	r3, r0
    2fb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2fb6:	2b00      	cmp	r3, #0
    2fb8:	db10      	blt.n	2fdc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2fba:	490b      	ldr	r1, [pc, #44]	; (2fe8 <__NVIC_DisableIRQ+0x40>)
    2fbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2fc0:	095b      	lsrs	r3, r3, #5
    2fc2:	88fa      	ldrh	r2, [r7, #6]
    2fc4:	f002 021f 	and.w	r2, r2, #31
    2fc8:	2001      	movs	r0, #1
    2fca:	fa00 f202 	lsl.w	r2, r0, r2
    2fce:	3320      	adds	r3, #32
    2fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2fd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2fd8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    2fdc:	bf00      	nop
    2fde:	370c      	adds	r7, #12
    2fe0:	46bd      	mov	sp, r7
    2fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fe6:	4770      	bx	lr
    2fe8:	e000e100 	.word	0xe000e100

00002fec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    2fec:	b480      	push	{r7}
    2fee:	b083      	sub	sp, #12
    2ff0:	af00      	add	r7, sp, #0
    2ff2:	4603      	mov	r3, r0
    2ff4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2ffa:	2b00      	cmp	r3, #0
    2ffc:	db0c      	blt.n	3018 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ffe:	4909      	ldr	r1, [pc, #36]	; (3024 <__NVIC_ClearPendingIRQ+0x38>)
    3000:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3004:	095b      	lsrs	r3, r3, #5
    3006:	88fa      	ldrh	r2, [r7, #6]
    3008:	f002 021f 	and.w	r2, r2, #31
    300c:	2001      	movs	r0, #1
    300e:	fa00 f202 	lsl.w	r2, r0, r2
    3012:	3360      	adds	r3, #96	; 0x60
    3014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3018:	bf00      	nop
    301a:	370c      	adds	r7, #12
    301c:	46bd      	mov	sp, r7
    301e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3022:	4770      	bx	lr
    3024:	e000e100 	.word	0xe000e100

00003028 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3028:	b480      	push	{r7}
    302a:	b083      	sub	sp, #12
    302c:	af00      	add	r7, sp, #0
    302e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3034:	095b      	lsrs	r3, r3, #5
    3036:	f003 0301 	and.w	r3, r3, #1
    303a:	2b00      	cmp	r3, #0
    303c:	bf14      	ite	ne
    303e:	2301      	movne	r3, #1
    3040:	2300      	moveq	r3, #0
    3042:	b2db      	uxtb	r3, r3
}
    3044:	4618      	mov	r0, r3
    3046:	370c      	adds	r7, #12
    3048:	46bd      	mov	sp, r7
    304a:	f85d 7b04 	ldr.w	r7, [sp], #4
    304e:	4770      	bx	lr

00003050 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3050:	b480      	push	{r7}
    3052:	b083      	sub	sp, #12
    3054:	af00      	add	r7, sp, #0
    3056:	6078      	str	r0, [r7, #4]
    3058:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    305a:	687b      	ldr	r3, [r7, #4]
    305c:	683a      	ldr	r2, [r7, #0]
    305e:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3060:	bf00      	nop
    3062:	370c      	adds	r7, #12
    3064:	46bd      	mov	sp, r7
    3066:	f85d 7b04 	ldr.w	r7, [sp], #4
    306a:	4770      	bx	lr

0000306c <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    306c:	b480      	push	{r7}
    306e:	b083      	sub	sp, #12
    3070:	af00      	add	r7, sp, #0
    3072:	6078      	str	r0, [r7, #4]
    3074:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3076:	687b      	ldr	r3, [r7, #4]
    3078:	683a      	ldr	r2, [r7, #0]
    307a:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    307c:	bf00      	nop
    307e:	370c      	adds	r7, #12
    3080:	46bd      	mov	sp, r7
    3082:	f85d 7b04 	ldr.w	r7, [sp], #4
    3086:	4770      	bx	lr

00003088 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3088:	b480      	push	{r7}
    308a:	b083      	sub	sp, #12
    308c:	af00      	add	r7, sp, #0
    308e:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3090:	687b      	ldr	r3, [r7, #4]
    3092:	699b      	ldr	r3, [r3, #24]
    3094:	f043 0201 	orr.w	r2, r3, #1
    3098:	687b      	ldr	r3, [r7, #4]
    309a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    309c:	bf00      	nop
    309e:	370c      	adds	r7, #12
    30a0:	46bd      	mov	sp, r7
    30a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    30a6:	4770      	bx	lr

000030a8 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    30a8:	b480      	push	{r7}
    30aa:	b085      	sub	sp, #20
    30ac:	af00      	add	r7, sp, #0
    30ae:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    30b0:	687b      	ldr	r3, [r7, #4]
    30b2:	699b      	ldr	r3, [r3, #24]
    30b4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    30b6:	68fb      	ldr	r3, [r7, #12]
    30b8:	f003 0301 	and.w	r3, r3, #1
    30bc:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    30be:	68fb      	ldr	r3, [r7, #12]
    30c0:	2b00      	cmp	r3, #0
    30c2:	bf14      	ite	ne
    30c4:	2301      	movne	r3, #1
    30c6:	2300      	moveq	r3, #0
    30c8:	b2db      	uxtb	r3, r3
}
    30ca:	4618      	mov	r0, r3
    30cc:	3714      	adds	r7, #20
    30ce:	46bd      	mov	sp, r7
    30d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    30d4:	4770      	bx	lr

000030d6 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    30d6:	b480      	push	{r7}
    30d8:	b083      	sub	sp, #12
    30da:	af00      	add	r7, sp, #0
    30dc:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    30de:	687b      	ldr	r3, [r7, #4]
    30e0:	699b      	ldr	r3, [r3, #24]
    30e2:	f023 0201 	bic.w	r2, r3, #1
    30e6:	687b      	ldr	r3, [r7, #4]
    30e8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    30ea:	bf00      	nop
    30ec:	370c      	adds	r7, #12
    30ee:	46bd      	mov	sp, r7
    30f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    30f4:	4770      	bx	lr

000030f6 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    30f6:	b480      	push	{r7}
    30f8:	b083      	sub	sp, #12
    30fa:	af00      	add	r7, sp, #0
    30fc:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    30fe:	687b      	ldr	r3, [r7, #4]
    3100:	699b      	ldr	r3, [r3, #24]
    3102:	f043 0202 	orr.w	r2, r3, #2
    3106:	687b      	ldr	r3, [r7, #4]
    3108:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    310a:	bf00      	nop
    310c:	370c      	adds	r7, #12
    310e:	46bd      	mov	sp, r7
    3110:	f85d 7b04 	ldr.w	r7, [sp], #4
    3114:	4770      	bx	lr

00003116 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3116:	b480      	push	{r7}
    3118:	b083      	sub	sp, #12
    311a:	af00      	add	r7, sp, #0
    311c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    311e:	687b      	ldr	r3, [r7, #4]
    3120:	699b      	ldr	r3, [r3, #24]
    3122:	f023 0202 	bic.w	r2, r3, #2
    3126:	687b      	ldr	r3, [r7, #4]
    3128:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    312a:	bf00      	nop
    312c:	370c      	adds	r7, #12
    312e:	46bd      	mov	sp, r7
    3130:	f85d 7b04 	ldr.w	r7, [sp], #4
    3134:	4770      	bx	lr

00003136 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3136:	b480      	push	{r7}
    3138:	b083      	sub	sp, #12
    313a:	af00      	add	r7, sp, #0
    313c:	6078      	str	r0, [r7, #4]
    313e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3140:	687b      	ldr	r3, [r7, #4]
    3142:	699a      	ldr	r2, [r3, #24]
    3144:	683b      	ldr	r3, [r7, #0]
    3146:	431a      	orrs	r2, r3
    3148:	687b      	ldr	r3, [r7, #4]
    314a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    314c:	bf00      	nop
    314e:	370c      	adds	r7, #12
    3150:	46bd      	mov	sp, r7
    3152:	f85d 7b04 	ldr.w	r7, [sp], #4
    3156:	4770      	bx	lr

00003158 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3158:	b480      	push	{r7}
    315a:	b083      	sub	sp, #12
    315c:	af00      	add	r7, sp, #0
    315e:	6078      	str	r0, [r7, #4]
    3160:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3162:	687b      	ldr	r3, [r7, #4]
    3164:	683a      	ldr	r2, [r7, #0]
    3166:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3168:	bf00      	nop
    316a:	370c      	adds	r7, #12
    316c:	46bd      	mov	sp, r7
    316e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3172:	4770      	bx	lr

00003174 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3174:	b480      	push	{r7}
    3176:	b083      	sub	sp, #12
    3178:	af00      	add	r7, sp, #0
    317a:	6078      	str	r0, [r7, #4]
    317c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    317e:	687b      	ldr	r3, [r7, #4]
    3180:	683a      	ldr	r2, [r7, #0]
    3182:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3184:	bf00      	nop
    3186:	370c      	adds	r7, #12
    3188:	46bd      	mov	sp, r7
    318a:	f85d 7b04 	ldr.w	r7, [sp], #4
    318e:	4770      	bx	lr

00003190 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3190:	b480      	push	{r7}
    3192:	b083      	sub	sp, #12
    3194:	af00      	add	r7, sp, #0
    3196:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3198:	687b      	ldr	r3, [r7, #4]
    319a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    319c:	4618      	mov	r0, r3
    319e:	370c      	adds	r7, #12
    31a0:	46bd      	mov	sp, r7
    31a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    31a6:	4770      	bx	lr

000031a8 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    31a8:	b480      	push	{r7}
    31aa:	b083      	sub	sp, #12
    31ac:	af00      	add	r7, sp, #0
    31ae:	6078      	str	r0, [r7, #4]
    31b0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    31b2:	687b      	ldr	r3, [r7, #4]
    31b4:	683a      	ldr	r2, [r7, #0]
    31b6:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    31b8:	bf00      	nop
    31ba:	370c      	adds	r7, #12
    31bc:	46bd      	mov	sp, r7
    31be:	f85d 7b04 	ldr.w	r7, [sp], #4
    31c2:	4770      	bx	lr

000031c4 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    31c4:	b480      	push	{r7}
    31c6:	b083      	sub	sp, #12
    31c8:	af00      	add	r7, sp, #0
    31ca:	6078      	str	r0, [r7, #4]
    31cc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    31ce:	687b      	ldr	r3, [r7, #4]
    31d0:	683a      	ldr	r2, [r7, #0]
    31d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    31d6:	bf00      	nop
    31d8:	370c      	adds	r7, #12
    31da:	46bd      	mov	sp, r7
    31dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    31e0:	4770      	bx	lr

000031e2 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    31e2:	b480      	push	{r7}
    31e4:	b083      	sub	sp, #12
    31e6:	af00      	add	r7, sp, #0
    31e8:	6078      	str	r0, [r7, #4]
    31ea:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    31ec:	687b      	ldr	r3, [r7, #4]
    31ee:	683a      	ldr	r2, [r7, #0]
    31f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    31f4:	bf00      	nop
    31f6:	370c      	adds	r7, #12
    31f8:	46bd      	mov	sp, r7
    31fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    31fe:	4770      	bx	lr

00003200 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3200:	b480      	push	{r7}
    3202:	b083      	sub	sp, #12
    3204:	af00      	add	r7, sp, #0
    3206:	6078      	str	r0, [r7, #4]
    3208:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    320a:	687b      	ldr	r3, [r7, #4]
    320c:	683a      	ldr	r2, [r7, #0]
    320e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3212:	bf00      	nop
    3214:	370c      	adds	r7, #12
    3216:	46bd      	mov	sp, r7
    3218:	f85d 7b04 	ldr.w	r7, [sp], #4
    321c:	4770      	bx	lr

0000321e <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    321e:	b480      	push	{r7}
    3220:	b083      	sub	sp, #12
    3222:	af00      	add	r7, sp, #0
    3224:	6078      	str	r0, [r7, #4]
    3226:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	683a      	ldr	r2, [r7, #0]
    322c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3230:	bf00      	nop
    3232:	370c      	adds	r7, #12
    3234:	46bd      	mov	sp, r7
    3236:	f85d 7b04 	ldr.w	r7, [sp], #4
    323a:	4770      	bx	lr

0000323c <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    323c:	b480      	push	{r7}
    323e:	b083      	sub	sp, #12
    3240:	af00      	add	r7, sp, #0
    3242:	6078      	str	r0, [r7, #4]
    3244:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3246:	687b      	ldr	r3, [r7, #4]
    3248:	683a      	ldr	r2, [r7, #0]
    324a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    324e:	bf00      	nop
    3250:	370c      	adds	r7, #12
    3252:	46bd      	mov	sp, r7
    3254:	f85d 7b04 	ldr.w	r7, [sp], #4
    3258:	4770      	bx	lr

0000325a <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    325a:	b480      	push	{r7}
    325c:	b083      	sub	sp, #12
    325e:	af00      	add	r7, sp, #0
    3260:	6078      	str	r0, [r7, #4]
    3262:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3264:	687b      	ldr	r3, [r7, #4]
    3266:	683a      	ldr	r2, [r7, #0]
    3268:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    326c:	bf00      	nop
    326e:	370c      	adds	r7, #12
    3270:	46bd      	mov	sp, r7
    3272:	f85d 7b04 	ldr.w	r7, [sp], #4
    3276:	4770      	bx	lr

00003278 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3278:	b480      	push	{r7}
    327a:	b083      	sub	sp, #12
    327c:	af00      	add	r7, sp, #0
    327e:	6078      	str	r0, [r7, #4]
    3280:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	683a      	ldr	r2, [r7, #0]
    3286:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    328a:	bf00      	nop
    328c:	370c      	adds	r7, #12
    328e:	46bd      	mov	sp, r7
    3290:	f85d 7b04 	ldr.w	r7, [sp], #4
    3294:	4770      	bx	lr

00003296 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3296:	b480      	push	{r7}
    3298:	b083      	sub	sp, #12
    329a:	af00      	add	r7, sp, #0
    329c:	6078      	str	r0, [r7, #4]
    329e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    32a0:	687b      	ldr	r3, [r7, #4]
    32a2:	683a      	ldr	r2, [r7, #0]
    32a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    32a8:	bf00      	nop
    32aa:	370c      	adds	r7, #12
    32ac:	46bd      	mov	sp, r7
    32ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    32b2:	4770      	bx	lr

000032b4 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    32b4:	b480      	push	{r7}
    32b6:	b083      	sub	sp, #12
    32b8:	af00      	add	r7, sp, #0
    32ba:	6078      	str	r0, [r7, #4]
    32bc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    32be:	687b      	ldr	r3, [r7, #4]
    32c0:	683a      	ldr	r2, [r7, #0]
    32c2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    32c6:	bf00      	nop
    32c8:	370c      	adds	r7, #12
    32ca:	46bd      	mov	sp, r7
    32cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    32d0:	4770      	bx	lr
	...

000032d4 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    32d4:	b580      	push	{r7, lr}
    32d6:	b082      	sub	sp, #8
    32d8:	af00      	add	r7, sp, #0
    32da:	6078      	str	r0, [r7, #4]
    32dc:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    32de:	687b      	ldr	r3, [r7, #4]
    32e0:	683a      	ldr	r2, [r7, #0]
    32e2:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	681b      	ldr	r3, [r3, #0]
    32e8:	4618      	mov	r0, r3
    32ea:	4b56      	ldr	r3, [pc, #344]	; (3444 <_can_async_init+0x170>)
    32ec:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    32ee:	bf00      	nop
    32f0:	687b      	ldr	r3, [r7, #4]
    32f2:	681b      	ldr	r3, [r3, #0]
    32f4:	4618      	mov	r0, r3
    32f6:	4b54      	ldr	r3, [pc, #336]	; (3448 <_can_async_init+0x174>)
    32f8:	4798      	blx	r3
    32fa:	4603      	mov	r3, r0
    32fc:	f083 0301 	eor.w	r3, r3, #1
    3300:	b2db      	uxtb	r3, r3
    3302:	2b00      	cmp	r3, #0
    3304:	d1f4      	bne.n	32f0 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3306:	687b      	ldr	r3, [r7, #4]
    3308:	681b      	ldr	r3, [r3, #0]
    330a:	4618      	mov	r0, r3
    330c:	4b4f      	ldr	r3, [pc, #316]	; (344c <_can_async_init+0x178>)
    330e:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3310:	683b      	ldr	r3, [r7, #0]
    3312:	4a4f      	ldr	r2, [pc, #316]	; (3450 <_can_async_init+0x17c>)
    3314:	4293      	cmp	r3, r2
    3316:	d17c      	bne.n	3412 <_can_async_init+0x13e>
		_can1_dev    = dev;
    3318:	4a4e      	ldr	r2, [pc, #312]	; (3454 <_can_async_init+0x180>)
    331a:	687b      	ldr	r3, [r7, #4]
    331c:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    331e:	687b      	ldr	r3, [r7, #4]
    3320:	4a4d      	ldr	r2, [pc, #308]	; (3458 <_can_async_init+0x184>)
    3322:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3324:	687b      	ldr	r3, [r7, #4]
    3326:	681b      	ldr	r3, [r3, #0]
    3328:	f44f 7100 	mov.w	r1, #512	; 0x200
    332c:	4618      	mov	r0, r3
    332e:	4b4b      	ldr	r3, [pc, #300]	; (345c <_can_async_init+0x188>)
    3330:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3332:	687b      	ldr	r3, [r7, #4]
    3334:	681b      	ldr	r3, [r3, #0]
    3336:	2102      	movs	r1, #2
    3338:	4618      	mov	r0, r3
    333a:	4b49      	ldr	r3, [pc, #292]	; (3460 <_can_async_init+0x18c>)
    333c:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    333e:	687b      	ldr	r3, [r7, #4]
    3340:	681b      	ldr	r3, [r3, #0]
    3342:	f640 2103 	movw	r1, #2563	; 0xa03
    3346:	4618      	mov	r0, r3
    3348:	4b46      	ldr	r3, [pc, #280]	; (3464 <_can_async_init+0x190>)
    334a:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    334c:	687b      	ldr	r3, [r7, #4]
    334e:	681b      	ldr	r3, [r3, #0]
    3350:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    3354:	4618      	mov	r0, r3
    3356:	4b44      	ldr	r3, [pc, #272]	; (3468 <_can_async_init+0x194>)
    3358:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    335a:	687b      	ldr	r3, [r7, #4]
    335c:	681a      	ldr	r2, [r3, #0]
    335e:	4b43      	ldr	r3, [pc, #268]	; (346c <_can_async_init+0x198>)
    3360:	b29b      	uxth	r3, r3
    3362:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    336a:	4619      	mov	r1, r3
    336c:	4610      	mov	r0, r2
    336e:	4b40      	ldr	r3, [pc, #256]	; (3470 <_can_async_init+0x19c>)
    3370:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3372:	687b      	ldr	r3, [r7, #4]
    3374:	681b      	ldr	r3, [r3, #0]
    3376:	2107      	movs	r1, #7
    3378:	4618      	mov	r0, r3
    337a:	4b3e      	ldr	r3, [pc, #248]	; (3474 <_can_async_init+0x1a0>)
    337c:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    337e:	687b      	ldr	r3, [r7, #4]
    3380:	681b      	ldr	r3, [r3, #0]
    3382:	2107      	movs	r1, #7
    3384:	4618      	mov	r0, r3
    3386:	4b3c      	ldr	r3, [pc, #240]	; (3478 <_can_async_init+0x1a4>)
    3388:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    338a:	687b      	ldr	r3, [r7, #4]
    338c:	681a      	ldr	r2, [r3, #0]
    338e:	4b3b      	ldr	r3, [pc, #236]	; (347c <_can_async_init+0x1a8>)
    3390:	b29b      	uxth	r3, r3
    3392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3396:	4619      	mov	r1, r3
    3398:	4610      	mov	r0, r2
    339a:	4b39      	ldr	r3, [pc, #228]	; (3480 <_can_async_init+0x1ac>)
    339c:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    339e:	687b      	ldr	r3, [r7, #4]
    33a0:	681a      	ldr	r2, [r3, #0]
    33a2:	4b38      	ldr	r3, [pc, #224]	; (3484 <_can_async_init+0x1b0>)
    33a4:	b29b      	uxth	r3, r3
    33a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    33aa:	4619      	mov	r1, r3
    33ac:	4610      	mov	r0, r2
    33ae:	4b36      	ldr	r3, [pc, #216]	; (3488 <_can_async_init+0x1b4>)
    33b0:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    33b2:	687b      	ldr	r3, [r7, #4]
    33b4:	681b      	ldr	r3, [r3, #0]
    33b6:	2108      	movs	r1, #8
    33b8:	4618      	mov	r0, r3
    33ba:	4b34      	ldr	r3, [pc, #208]	; (348c <_can_async_init+0x1b8>)
    33bc:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    33be:	687b      	ldr	r3, [r7, #4]
    33c0:	681a      	ldr	r2, [r3, #0]
    33c2:	4b33      	ldr	r3, [pc, #204]	; (3490 <_can_async_init+0x1bc>)
    33c4:	b29b      	uxth	r3, r3
    33c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    33ca:	4619      	mov	r1, r3
    33cc:	4610      	mov	r0, r2
    33ce:	4b31      	ldr	r3, [pc, #196]	; (3494 <_can_async_init+0x1c0>)
    33d0:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    33d2:	687b      	ldr	r3, [r7, #4]
    33d4:	681a      	ldr	r2, [r3, #0]
    33d6:	4b30      	ldr	r3, [pc, #192]	; (3498 <_can_async_init+0x1c4>)
    33d8:	b29b      	uxth	r3, r3
    33da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    33de:	4619      	mov	r1, r3
    33e0:	4610      	mov	r0, r2
    33e2:	4b2e      	ldr	r3, [pc, #184]	; (349c <_can_async_init+0x1c8>)
    33e4:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    33e6:	687b      	ldr	r3, [r7, #4]
    33e8:	681b      	ldr	r3, [r3, #0]
    33ea:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    33ee:	4618      	mov	r0, r3
    33f0:	4b2b      	ldr	r3, [pc, #172]	; (34a0 <_can_async_init+0x1cc>)
    33f2:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    33f4:	204f      	movs	r0, #79	; 0x4f
    33f6:	4b2b      	ldr	r3, [pc, #172]	; (34a4 <_can_async_init+0x1d0>)
    33f8:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    33fa:	204f      	movs	r0, #79	; 0x4f
    33fc:	4b2a      	ldr	r3, [pc, #168]	; (34a8 <_can_async_init+0x1d4>)
    33fe:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3400:	204f      	movs	r0, #79	; 0x4f
    3402:	4b2a      	ldr	r3, [pc, #168]	; (34ac <_can_async_init+0x1d8>)
    3404:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3406:	687b      	ldr	r3, [r7, #4]
    3408:	681b      	ldr	r3, [r3, #0]
    340a:	2101      	movs	r1, #1
    340c:	4618      	mov	r0, r3
    340e:	4b28      	ldr	r3, [pc, #160]	; (34b0 <_can_async_init+0x1dc>)
    3410:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3412:	687b      	ldr	r3, [r7, #4]
    3414:	681b      	ldr	r3, [r3, #0]
    3416:	4618      	mov	r0, r3
    3418:	4b26      	ldr	r3, [pc, #152]	; (34b4 <_can_async_init+0x1e0>)
    341a:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    341c:	687b      	ldr	r3, [r7, #4]
    341e:	681b      	ldr	r3, [r3, #0]
    3420:	4618      	mov	r0, r3
    3422:	4b25      	ldr	r3, [pc, #148]	; (34b8 <_can_async_init+0x1e4>)
    3424:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3426:	bf00      	nop
    3428:	687b      	ldr	r3, [r7, #4]
    342a:	681b      	ldr	r3, [r3, #0]
    342c:	4618      	mov	r0, r3
    342e:	4b06      	ldr	r3, [pc, #24]	; (3448 <_can_async_init+0x174>)
    3430:	4798      	blx	r3
    3432:	4603      	mov	r3, r0
    3434:	2b00      	cmp	r3, #0
    3436:	d1f7      	bne.n	3428 <_can_async_init+0x154>
	};

	return ERR_NONE;
    3438:	2300      	movs	r3, #0
}
    343a:	4618      	mov	r0, r3
    343c:	3708      	adds	r7, #8
    343e:	46bd      	mov	sp, r7
    3440:	bd80      	pop	{r7, pc}
    3442:	bf00      	nop
    3444:	00003089 	.word	0x00003089
    3448:	000030a9 	.word	0x000030a9
    344c:	000030f7 	.word	0x000030f7
    3450:	42000400 	.word	0x42000400
    3454:	20000838 	.word	0x20000838
    3458:	20000004 	.word	0x20000004
    345c:	00003137 	.word	0x00003137
    3460:	00003051 	.word	0x00003051
    3464:	00003159 	.word	0x00003159
    3468:	0000306d 	.word	0x0000306d
    346c:	20000fdc 	.word	0x20000fdc
    3470:	0000323d 	.word	0x0000323d
    3474:	0000325b 	.word	0x0000325b
    3478:	00003297 	.word	0x00003297
    347c:	20000f94 	.word	0x20000f94
    3480:	00003279 	.word	0x00003279
    3484:	20000798 	.word	0x20000798
    3488:	000032b5 	.word	0x000032b5
    348c:	000031c5 	.word	0x000031c5
    3490:	200007a8 	.word	0x200007a8
    3494:	000031e3 	.word	0x000031e3
    3498:	20000828 	.word	0x20000828
    349c:	00003201 	.word	0x00003201
    34a0:	0000321f 	.word	0x0000321f
    34a4:	00002fa9 	.word	0x00002fa9
    34a8:	00002fed 	.word	0x00002fed
    34ac:	00002f6d 	.word	0x00002f6d
    34b0:	000031a9 	.word	0x000031a9
    34b4:	00003117 	.word	0x00003117
    34b8:	000030d7 	.word	0x000030d7

000034bc <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    34bc:	b590      	push	{r4, r7, lr}
    34be:	b083      	sub	sp, #12
    34c0:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    34c2:	4b2c      	ldr	r3, [pc, #176]	; (3574 <CAN1_Handler+0xb8>)
    34c4:	681b      	ldr	r3, [r3, #0]
    34c6:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    34c8:	687b      	ldr	r3, [r7, #4]
    34ca:	681b      	ldr	r3, [r3, #0]
    34cc:	4618      	mov	r0, r3
    34ce:	4b2a      	ldr	r3, [pc, #168]	; (3578 <CAN1_Handler+0xbc>)
    34d0:	4798      	blx	r3
    34d2:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    34d4:	683b      	ldr	r3, [r7, #0]
    34d6:	f003 0301 	and.w	r3, r3, #1
    34da:	2b00      	cmp	r3, #0
    34dc:	d003      	beq.n	34e6 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    34de:	687b      	ldr	r3, [r7, #4]
    34e0:	689b      	ldr	r3, [r3, #8]
    34e2:	6878      	ldr	r0, [r7, #4]
    34e4:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    34e6:	683b      	ldr	r3, [r7, #0]
    34e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    34ec:	2b00      	cmp	r3, #0
    34ee:	d003      	beq.n	34f8 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    34f0:	687b      	ldr	r3, [r7, #4]
    34f2:	685b      	ldr	r3, [r3, #4]
    34f4:	6878      	ldr	r0, [r7, #4]
    34f6:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    34f8:	683b      	ldr	r3, [r7, #0]
    34fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    34fe:	2b00      	cmp	r3, #0
    3500:	d004      	beq.n	350c <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3502:	687b      	ldr	r3, [r7, #4]
    3504:	68db      	ldr	r3, [r3, #12]
    3506:	2103      	movs	r1, #3
    3508:	6878      	ldr	r0, [r7, #4]
    350a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    350c:	683b      	ldr	r3, [r7, #0]
    350e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3512:	2b00      	cmp	r3, #0
    3514:	d004      	beq.n	3520 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3516:	687b      	ldr	r3, [r7, #4]
    3518:	68db      	ldr	r3, [r3, #12]
    351a:	2100      	movs	r1, #0
    351c:	6878      	ldr	r0, [r7, #4]
    351e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3520:	683b      	ldr	r3, [r7, #0]
    3522:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3526:	2b00      	cmp	r3, #0
    3528:	d00f      	beq.n	354a <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    352a:	687b      	ldr	r3, [r7, #4]
    352c:	68dc      	ldr	r4, [r3, #12]
    352e:	687b      	ldr	r3, [r7, #4]
    3530:	681b      	ldr	r3, [r3, #0]
    3532:	4618      	mov	r0, r3
    3534:	4b11      	ldr	r3, [pc, #68]	; (357c <CAN1_Handler+0xc0>)
    3536:	4798      	blx	r3
    3538:	4603      	mov	r3, r0
    353a:	2b00      	cmp	r3, #0
    353c:	d001      	beq.n	3542 <CAN1_Handler+0x86>
    353e:	2302      	movs	r3, #2
    3540:	e000      	b.n	3544 <CAN1_Handler+0x88>
    3542:	2301      	movs	r3, #1
    3544:	4619      	mov	r1, r3
    3546:	6878      	ldr	r0, [r7, #4]
    3548:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    354a:	683b      	ldr	r3, [r7, #0]
    354c:	f003 0308 	and.w	r3, r3, #8
    3550:	2b00      	cmp	r3, #0
    3552:	d004      	beq.n	355e <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3554:	687b      	ldr	r3, [r7, #4]
    3556:	68db      	ldr	r3, [r3, #12]
    3558:	2104      	movs	r1, #4
    355a:	6878      	ldr	r0, [r7, #4]
    355c:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    355e:	687b      	ldr	r3, [r7, #4]
    3560:	681b      	ldr	r3, [r3, #0]
    3562:	6839      	ldr	r1, [r7, #0]
    3564:	4618      	mov	r0, r3
    3566:	4b06      	ldr	r3, [pc, #24]	; (3580 <CAN1_Handler+0xc4>)
    3568:	4798      	blx	r3
}
    356a:	bf00      	nop
    356c:	370c      	adds	r7, #12
    356e:	46bd      	mov	sp, r7
    3570:	bd90      	pop	{r4, r7, pc}
    3572:	bf00      	nop
    3574:	20000838 	.word	0x20000838
    3578:	00003191 	.word	0x00003191
    357c:	00003029 	.word	0x00003029
    3580:	00003175 	.word	0x00003175

00003584 <__NVIC_SetPendingIRQ>:
{
    3584:	b480      	push	{r7}
    3586:	b083      	sub	sp, #12
    3588:	af00      	add	r7, sp, #0
    358a:	4603      	mov	r3, r0
    358c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    358e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3592:	2b00      	cmp	r3, #0
    3594:	db0c      	blt.n	35b0 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3596:	4909      	ldr	r1, [pc, #36]	; (35bc <__NVIC_SetPendingIRQ+0x38>)
    3598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    359c:	095b      	lsrs	r3, r3, #5
    359e:	88fa      	ldrh	r2, [r7, #6]
    35a0:	f002 021f 	and.w	r2, r2, #31
    35a4:	2001      	movs	r0, #1
    35a6:	fa00 f202 	lsl.w	r2, r0, r2
    35aa:	3340      	adds	r3, #64	; 0x40
    35ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    35b0:	bf00      	nop
    35b2:	370c      	adds	r7, #12
    35b4:	46bd      	mov	sp, r7
    35b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    35ba:	4770      	bx	lr
    35bc:	e000e100 	.word	0xe000e100

000035c0 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    35c0:	b580      	push	{r7, lr}
    35c2:	b082      	sub	sp, #8
    35c4:	af00      	add	r7, sp, #0
    35c6:	4603      	mov	r3, r0
    35c8:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    35ca:	79fb      	ldrb	r3, [r7, #7]
    35cc:	b21b      	sxth	r3, r3
    35ce:	4618      	mov	r0, r3
    35d0:	4b02      	ldr	r3, [pc, #8]	; (35dc <_irq_set+0x1c>)
    35d2:	4798      	blx	r3
}
    35d4:	bf00      	nop
    35d6:	3708      	adds	r7, #8
    35d8:	46bd      	mov	sp, r7
    35da:	bd80      	pop	{r7, pc}
    35dc:	00003585 	.word	0x00003585

000035e0 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    35e0:	b480      	push	{r7}
    35e2:	b083      	sub	sp, #12
    35e4:	af00      	add	r7, sp, #0
    35e6:	4603      	mov	r3, r0
    35e8:	6039      	str	r1, [r7, #0]
    35ea:	80fb      	strh	r3, [r7, #6]
    35ec:	4613      	mov	r3, r2
    35ee:	717b      	strb	r3, [r7, #5]
	switch (power) {
    35f0:	797b      	ldrb	r3, [r7, #5]
    35f2:	3b04      	subs	r3, #4
    35f4:	2b05      	cmp	r3, #5
    35f6:	d86b      	bhi.n	36d0 <_get_cycles_for_us_internal+0xf0>
    35f8:	a201      	add	r2, pc, #4	; (adr r2, 3600 <_get_cycles_for_us_internal+0x20>)
    35fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    35fe:	bf00      	nop
    3600:	000036af 	.word	0x000036af
    3604:	0000368f 	.word	0x0000368f
    3608:	00003671 	.word	0x00003671
    360c:	00003653 	.word	0x00003653
    3610:	00003635 	.word	0x00003635
    3614:	00003619 	.word	0x00003619
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    3618:	88fb      	ldrh	r3, [r7, #6]
    361a:	683a      	ldr	r2, [r7, #0]
    361c:	4935      	ldr	r1, [pc, #212]	; (36f4 <_get_cycles_for_us_internal+0x114>)
    361e:	fba1 1202 	umull	r1, r2, r1, r2
    3622:	0c92      	lsrs	r2, r2, #18
    3624:	fb02 f303 	mul.w	r3, r2, r3
    3628:	3302      	adds	r3, #2
    362a:	4a33      	ldr	r2, [pc, #204]	; (36f8 <_get_cycles_for_us_internal+0x118>)
    362c:	fba2 2303 	umull	r2, r3, r2, r3
    3630:	085b      	lsrs	r3, r3, #1
    3632:	e059      	b.n	36e8 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3634:	88fb      	ldrh	r3, [r7, #6]
    3636:	683a      	ldr	r2, [r7, #0]
    3638:	0952      	lsrs	r2, r2, #5
    363a:	4930      	ldr	r1, [pc, #192]	; (36fc <_get_cycles_for_us_internal+0x11c>)
    363c:	fba1 1202 	umull	r1, r2, r1, r2
    3640:	09d2      	lsrs	r2, r2, #7
    3642:	fb02 f303 	mul.w	r3, r2, r3
    3646:	331d      	adds	r3, #29
    3648:	4a2d      	ldr	r2, [pc, #180]	; (3700 <_get_cycles_for_us_internal+0x120>)
    364a:	fba2 2303 	umull	r2, r3, r2, r3
    364e:	091b      	lsrs	r3, r3, #4
    3650:	e04a      	b.n	36e8 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    3652:	88fb      	ldrh	r3, [r7, #6]
    3654:	683a      	ldr	r2, [r7, #0]
    3656:	492b      	ldr	r1, [pc, #172]	; (3704 <_get_cycles_for_us_internal+0x124>)
    3658:	fba1 1202 	umull	r1, r2, r1, r2
    365c:	0b52      	lsrs	r2, r2, #13
    365e:	fb02 f303 	mul.w	r3, r2, r3
    3662:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3666:	4a28      	ldr	r2, [pc, #160]	; (3708 <_get_cycles_for_us_internal+0x128>)
    3668:	fba2 2303 	umull	r2, r3, r2, r3
    366c:	095b      	lsrs	r3, r3, #5
    366e:	e03b      	b.n	36e8 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    3670:	88fb      	ldrh	r3, [r7, #6]
    3672:	683a      	ldr	r2, [r7, #0]
    3674:	4925      	ldr	r1, [pc, #148]	; (370c <_get_cycles_for_us_internal+0x12c>)
    3676:	fba1 1202 	umull	r1, r2, r1, r2
    367a:	0992      	lsrs	r2, r2, #6
    367c:	fb02 f303 	mul.w	r3, r2, r3
    3680:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3684:	4a22      	ldr	r2, [pc, #136]	; (3710 <_get_cycles_for_us_internal+0x130>)
    3686:	fba2 2303 	umull	r2, r3, r2, r3
    368a:	099b      	lsrs	r3, r3, #6
    368c:	e02c      	b.n	36e8 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    368e:	88fb      	ldrh	r3, [r7, #6]
    3690:	683a      	ldr	r2, [r7, #0]
    3692:	4920      	ldr	r1, [pc, #128]	; (3714 <_get_cycles_for_us_internal+0x134>)
    3694:	fba1 1202 	umull	r1, r2, r1, r2
    3698:	0952      	lsrs	r2, r2, #5
    369a:	fb02 f303 	mul.w	r3, r2, r3
    369e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    36a2:	332f      	adds	r3, #47	; 0x2f
    36a4:	4a1c      	ldr	r2, [pc, #112]	; (3718 <_get_cycles_for_us_internal+0x138>)
    36a6:	fba2 2303 	umull	r2, r3, r2, r3
    36aa:	0b5b      	lsrs	r3, r3, #13
    36ac:	e01c      	b.n	36e8 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    36ae:	88fb      	ldrh	r3, [r7, #6]
    36b0:	683a      	ldr	r2, [r7, #0]
    36b2:	491a      	ldr	r1, [pc, #104]	; (371c <_get_cycles_for_us_internal+0x13c>)
    36b4:	fba1 1202 	umull	r1, r2, r1, r2
    36b8:	08d2      	lsrs	r2, r2, #3
    36ba:	fb02 f303 	mul.w	r3, r2, r3
    36be:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    36c2:	f203 33df 	addw	r3, r3, #991	; 0x3df
    36c6:	4a16      	ldr	r2, [pc, #88]	; (3720 <_get_cycles_for_us_internal+0x140>)
    36c8:	fba2 2303 	umull	r2, r3, r2, r3
    36cc:	0c5b      	lsrs	r3, r3, #17
    36ce:	e00b      	b.n	36e8 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    36d0:	88fb      	ldrh	r3, [r7, #6]
    36d2:	683a      	ldr	r2, [r7, #0]
    36d4:	fb02 f303 	mul.w	r3, r2, r3
    36d8:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    36dc:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    36e0:	4a10      	ldr	r2, [pc, #64]	; (3724 <_get_cycles_for_us_internal+0x144>)
    36e2:	fba2 2303 	umull	r2, r3, r2, r3
    36e6:	0c9b      	lsrs	r3, r3, #18
	}
}
    36e8:	4618      	mov	r0, r3
    36ea:	370c      	adds	r7, #12
    36ec:	46bd      	mov	sp, r7
    36ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    36f2:	4770      	bx	lr
    36f4:	431bde83 	.word	0x431bde83
    36f8:	aaaaaaab 	.word	0xaaaaaaab
    36fc:	0a7c5ac5 	.word	0x0a7c5ac5
    3700:	88888889 	.word	0x88888889
    3704:	d1b71759 	.word	0xd1b71759
    3708:	1b4e81b5 	.word	0x1b4e81b5
    370c:	10624dd3 	.word	0x10624dd3
    3710:	057619f1 	.word	0x057619f1
    3714:	51eb851f 	.word	0x51eb851f
    3718:	45e7b273 	.word	0x45e7b273
    371c:	cccccccd 	.word	0xcccccccd
    3720:	6fd91d85 	.word	0x6fd91d85
    3724:	165e9f81 	.word	0x165e9f81

00003728 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    3728:	b580      	push	{r7, lr}
    372a:	b082      	sub	sp, #8
    372c:	af00      	add	r7, sp, #0
    372e:	4603      	mov	r3, r0
    3730:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3732:	88fb      	ldrh	r3, [r7, #6]
    3734:	2209      	movs	r2, #9
    3736:	4904      	ldr	r1, [pc, #16]	; (3748 <_get_cycles_for_us+0x20>)
    3738:	4618      	mov	r0, r3
    373a:	4b04      	ldr	r3, [pc, #16]	; (374c <_get_cycles_for_us+0x24>)
    373c:	4798      	blx	r3
    373e:	4603      	mov	r3, r0
}
    3740:	4618      	mov	r0, r3
    3742:	3708      	adds	r7, #8
    3744:	46bd      	mov	sp, r7
    3746:	bd80      	pop	{r7, pc}
    3748:	07270e00 	.word	0x07270e00
    374c:	000035e1 	.word	0x000035e1

00003750 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    3750:	b480      	push	{r7}
    3752:	b083      	sub	sp, #12
    3754:	af00      	add	r7, sp, #0
    3756:	4603      	mov	r3, r0
    3758:	6039      	str	r1, [r7, #0]
    375a:	80fb      	strh	r3, [r7, #6]
    375c:	4613      	mov	r3, r2
    375e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3760:	797b      	ldrb	r3, [r7, #5]
    3762:	3b04      	subs	r3, #4
    3764:	2b05      	cmp	r3, #5
    3766:	d870      	bhi.n	384a <_get_cycles_for_ms_internal+0xfa>
    3768:	a201      	add	r2, pc, #4	; (adr r2, 3770 <_get_cycles_for_ms_internal+0x20>)
    376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    376e:	bf00      	nop
    3770:	0000382d 	.word	0x0000382d
    3774:	00003811 	.word	0x00003811
    3778:	000037f5 	.word	0x000037f5
    377c:	000037d1 	.word	0x000037d1
    3780:	000037ad 	.word	0x000037ad
    3784:	00003789 	.word	0x00003789
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    3788:	88fb      	ldrh	r3, [r7, #6]
    378a:	683a      	ldr	r2, [r7, #0]
    378c:	4937      	ldr	r1, [pc, #220]	; (386c <_get_cycles_for_ms_internal+0x11c>)
    378e:	fba1 1202 	umull	r1, r2, r1, r2
    3792:	0c92      	lsrs	r2, r2, #18
    3794:	fb02 f303 	mul.w	r3, r2, r3
    3798:	3302      	adds	r3, #2
    379a:	4a35      	ldr	r2, [pc, #212]	; (3870 <_get_cycles_for_ms_internal+0x120>)
    379c:	fba2 2303 	umull	r2, r3, r2, r3
    37a0:	085b      	lsrs	r3, r3, #1
    37a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    37a6:	fb02 f303 	mul.w	r3, r2, r3
    37aa:	e058      	b.n	385e <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    37ac:	88fb      	ldrh	r3, [r7, #6]
    37ae:	683a      	ldr	r2, [r7, #0]
    37b0:	0952      	lsrs	r2, r2, #5
    37b2:	4930      	ldr	r1, [pc, #192]	; (3874 <_get_cycles_for_ms_internal+0x124>)
    37b4:	fba1 1202 	umull	r1, r2, r1, r2
    37b8:	09d2      	lsrs	r2, r2, #7
    37ba:	fb02 f303 	mul.w	r3, r2, r3
    37be:	3302      	adds	r3, #2
    37c0:	4a2b      	ldr	r2, [pc, #172]	; (3870 <_get_cycles_for_ms_internal+0x120>)
    37c2:	fba2 2303 	umull	r2, r3, r2, r3
    37c6:	085b      	lsrs	r3, r3, #1
    37c8:	2264      	movs	r2, #100	; 0x64
    37ca:	fb02 f303 	mul.w	r3, r2, r3
    37ce:	e046      	b.n	385e <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    37d0:	88fb      	ldrh	r3, [r7, #6]
    37d2:	683a      	ldr	r2, [r7, #0]
    37d4:	4928      	ldr	r1, [pc, #160]	; (3878 <_get_cycles_for_ms_internal+0x128>)
    37d6:	fba1 1202 	umull	r1, r2, r1, r2
    37da:	0b52      	lsrs	r2, r2, #13
    37dc:	fb02 f303 	mul.w	r3, r2, r3
    37e0:	3302      	adds	r3, #2
    37e2:	4a23      	ldr	r2, [pc, #140]	; (3870 <_get_cycles_for_ms_internal+0x120>)
    37e4:	fba2 2303 	umull	r2, r3, r2, r3
    37e8:	085a      	lsrs	r2, r3, #1
    37ea:	4613      	mov	r3, r2
    37ec:	009b      	lsls	r3, r3, #2
    37ee:	4413      	add	r3, r2
    37f0:	005b      	lsls	r3, r3, #1
    37f2:	e034      	b.n	385e <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    37f4:	88fb      	ldrh	r3, [r7, #6]
    37f6:	683a      	ldr	r2, [r7, #0]
    37f8:	4920      	ldr	r1, [pc, #128]	; (387c <_get_cycles_for_ms_internal+0x12c>)
    37fa:	fba1 1202 	umull	r1, r2, r1, r2
    37fe:	0992      	lsrs	r2, r2, #6
    3800:	fb02 f303 	mul.w	r3, r2, r3
    3804:	3302      	adds	r3, #2
    3806:	4a1a      	ldr	r2, [pc, #104]	; (3870 <_get_cycles_for_ms_internal+0x120>)
    3808:	fba2 2303 	umull	r2, r3, r2, r3
    380c:	085b      	lsrs	r3, r3, #1
    380e:	e026      	b.n	385e <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    3810:	88fb      	ldrh	r3, [r7, #6]
    3812:	683a      	ldr	r2, [r7, #0]
    3814:	491a      	ldr	r1, [pc, #104]	; (3880 <_get_cycles_for_ms_internal+0x130>)
    3816:	fba1 1202 	umull	r1, r2, r1, r2
    381a:	0952      	lsrs	r2, r2, #5
    381c:	fb02 f303 	mul.w	r3, r2, r3
    3820:	331d      	adds	r3, #29
    3822:	4a18      	ldr	r2, [pc, #96]	; (3884 <_get_cycles_for_ms_internal+0x134>)
    3824:	fba2 2303 	umull	r2, r3, r2, r3
    3828:	091b      	lsrs	r3, r3, #4
    382a:	e018      	b.n	385e <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    382c:	88fb      	ldrh	r3, [r7, #6]
    382e:	683a      	ldr	r2, [r7, #0]
    3830:	4915      	ldr	r1, [pc, #84]	; (3888 <_get_cycles_for_ms_internal+0x138>)
    3832:	fba1 1202 	umull	r1, r2, r1, r2
    3836:	08d2      	lsrs	r2, r2, #3
    3838:	fb02 f303 	mul.w	r3, r2, r3
    383c:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3840:	4a12      	ldr	r2, [pc, #72]	; (388c <_get_cycles_for_ms_internal+0x13c>)
    3842:	fba2 2303 	umull	r2, r3, r2, r3
    3846:	095b      	lsrs	r3, r3, #5
    3848:	e009      	b.n	385e <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    384a:	88fb      	ldrh	r3, [r7, #6]
    384c:	683a      	ldr	r2, [r7, #0]
    384e:	fb02 f303 	mul.w	r3, r2, r3
    3852:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3856:	4a0e      	ldr	r2, [pc, #56]	; (3890 <_get_cycles_for_ms_internal+0x140>)
    3858:	fba2 2303 	umull	r2, r3, r2, r3
    385c:	099b      	lsrs	r3, r3, #6
	}
}
    385e:	4618      	mov	r0, r3
    3860:	370c      	adds	r7, #12
    3862:	46bd      	mov	sp, r7
    3864:	f85d 7b04 	ldr.w	r7, [sp], #4
    3868:	4770      	bx	lr
    386a:	bf00      	nop
    386c:	431bde83 	.word	0x431bde83
    3870:	aaaaaaab 	.word	0xaaaaaaab
    3874:	0a7c5ac5 	.word	0x0a7c5ac5
    3878:	d1b71759 	.word	0xd1b71759
    387c:	10624dd3 	.word	0x10624dd3
    3880:	51eb851f 	.word	0x51eb851f
    3884:	88888889 	.word	0x88888889
    3888:	cccccccd 	.word	0xcccccccd
    388c:	1b4e81b5 	.word	0x1b4e81b5
    3890:	057619f1 	.word	0x057619f1

00003894 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    3894:	b580      	push	{r7, lr}
    3896:	b082      	sub	sp, #8
    3898:	af00      	add	r7, sp, #0
    389a:	4603      	mov	r3, r0
    389c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    389e:	88fb      	ldrh	r3, [r7, #6]
    38a0:	2209      	movs	r2, #9
    38a2:	4904      	ldr	r1, [pc, #16]	; (38b4 <_get_cycles_for_ms+0x20>)
    38a4:	4618      	mov	r0, r3
    38a6:	4b04      	ldr	r3, [pc, #16]	; (38b8 <_get_cycles_for_ms+0x24>)
    38a8:	4798      	blx	r3
    38aa:	4603      	mov	r3, r0
}
    38ac:	4618      	mov	r0, r3
    38ae:	3708      	adds	r7, #8
    38b0:	46bd      	mov	sp, r7
    38b2:	bd80      	pop	{r7, pc}
    38b4:	07270e00 	.word	0x07270e00
    38b8:	00003751 	.word	0x00003751
    38bc:	00000000 	.word	0x00000000

000038c0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    38c0:	b480      	push	{r7}
    38c2:	b083      	sub	sp, #12
    38c4:	af00      	add	r7, sp, #0
    38c6:	6078      	str	r0, [r7, #4]
    38c8:	6039      	str	r1, [r7, #0]
    38ca:	bf00      	nop
    38cc:	f3af 8000 	nop.w

000038d0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    38d0:	3901      	subs	r1, #1
    38d2:	d8fd      	bhi.n	38d0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    38d4:	bf00      	nop
    38d6:	370c      	adds	r7, #12
    38d8:	46bd      	mov	sp, r7
    38da:	f85d 7b04 	ldr.w	r7, [sp], #4
    38de:	4770      	bx	lr

000038e0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    38e0:	b480      	push	{r7}
    38e2:	b083      	sub	sp, #12
    38e4:	af00      	add	r7, sp, #0
    38e6:	6078      	str	r0, [r7, #4]
    38e8:	460b      	mov	r3, r1
    38ea:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    38ec:	687b      	ldr	r3, [r7, #4]
    38ee:	881b      	ldrh	r3, [r3, #0]
    38f0:	b29a      	uxth	r2, r3
    38f2:	887b      	ldrh	r3, [r7, #2]
    38f4:	021b      	lsls	r3, r3, #8
    38f6:	b29b      	uxth	r3, r3
    38f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    38fc:	b29b      	uxth	r3, r3
    38fe:	4313      	orrs	r3, r2
    3900:	b29a      	uxth	r2, r3
    3902:	687b      	ldr	r3, [r7, #4]
    3904:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    3906:	bf00      	nop
    3908:	370c      	adds	r7, #12
    390a:	46bd      	mov	sp, r7
    390c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3910:	4770      	bx	lr

00003912 <hri_port_set_EVCTRL_reg>:
{
    3912:	b480      	push	{r7}
    3914:	b085      	sub	sp, #20
    3916:	af00      	add	r7, sp, #0
    3918:	60f8      	str	r0, [r7, #12]
    391a:	460b      	mov	r3, r1
    391c:	607a      	str	r2, [r7, #4]
    391e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    3920:	7afb      	ldrb	r3, [r7, #11]
    3922:	7afa      	ldrb	r2, [r7, #11]
    3924:	68f9      	ldr	r1, [r7, #12]
    3926:	01d2      	lsls	r2, r2, #7
    3928:	440a      	add	r2, r1
    392a:	322c      	adds	r2, #44	; 0x2c
    392c:	6811      	ldr	r1, [r2, #0]
    392e:	687a      	ldr	r2, [r7, #4]
    3930:	430a      	orrs	r2, r1
    3932:	68f9      	ldr	r1, [r7, #12]
    3934:	01db      	lsls	r3, r3, #7
    3936:	440b      	add	r3, r1
    3938:	332c      	adds	r3, #44	; 0x2c
    393a:	601a      	str	r2, [r3, #0]
}
    393c:	bf00      	nop
    393e:	3714      	adds	r7, #20
    3940:	46bd      	mov	sp, r7
    3942:	f85d 7b04 	ldr.w	r7, [sp], #4
    3946:	4770      	bx	lr

00003948 <_port_event_init>:

static inline void _port_event_init()
{
    3948:	b580      	push	{r7, lr}
    394a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    394c:	2200      	movs	r2, #0
    394e:	2100      	movs	r1, #0
    3950:	480a      	ldr	r0, [pc, #40]	; (397c <_port_event_init+0x34>)
    3952:	4b0b      	ldr	r3, [pc, #44]	; (3980 <_port_event_init+0x38>)
    3954:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    3956:	2200      	movs	r2, #0
    3958:	2101      	movs	r1, #1
    395a:	4808      	ldr	r0, [pc, #32]	; (397c <_port_event_init+0x34>)
    395c:	4b08      	ldr	r3, [pc, #32]	; (3980 <_port_event_init+0x38>)
    395e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    3960:	f64e 72ef 	movw	r2, #61423	; 0xefef
    3964:	2102      	movs	r1, #2
    3966:	4805      	ldr	r0, [pc, #20]	; (397c <_port_event_init+0x34>)
    3968:	4b05      	ldr	r3, [pc, #20]	; (3980 <_port_event_init+0x38>)
    396a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    396c:	2200      	movs	r2, #0
    396e:	2103      	movs	r1, #3
    3970:	4802      	ldr	r0, [pc, #8]	; (397c <_port_event_init+0x34>)
    3972:	4b03      	ldr	r3, [pc, #12]	; (3980 <_port_event_init+0x38>)
    3974:	4798      	blx	r3
}
    3976:	bf00      	nop
    3978:	bd80      	pop	{r7, pc}
    397a:	bf00      	nop
    397c:	41008000 	.word	0x41008000
    3980:	00003913 	.word	0x00003913

00003984 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3984:	b580      	push	{r7, lr}
    3986:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    3988:	2104      	movs	r1, #4
    398a:	480b      	ldr	r0, [pc, #44]	; (39b8 <_init_chip+0x34>)
    398c:	4b0b      	ldr	r3, [pc, #44]	; (39bc <_init_chip+0x38>)
    398e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    3990:	4b0b      	ldr	r3, [pc, #44]	; (39c0 <_init_chip+0x3c>)
    3992:	4798      	blx	r3
	_oscctrl_init_sources();
    3994:	4b0b      	ldr	r3, [pc, #44]	; (39c4 <_init_chip+0x40>)
    3996:	4798      	blx	r3
	_mclk_init();
    3998:	4b0b      	ldr	r3, [pc, #44]	; (39c8 <_init_chip+0x44>)
    399a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    399c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    39a0:	4b0a      	ldr	r3, [pc, #40]	; (39cc <_init_chip+0x48>)
    39a2:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    39a4:	4b0a      	ldr	r3, [pc, #40]	; (39d0 <_init_chip+0x4c>)
    39a6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    39a8:	f640 30df 	movw	r0, #3039	; 0xbdf
    39ac:	4b07      	ldr	r3, [pc, #28]	; (39cc <_init_chip+0x48>)
    39ae:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    39b0:	4b08      	ldr	r3, [pc, #32]	; (39d4 <_init_chip+0x50>)
    39b2:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    39b4:	bf00      	nop
    39b6:	bd80      	pop	{r7, pc}
    39b8:	41004000 	.word	0x41004000
    39bc:	000038e1 	.word	0x000038e1
    39c0:	000043d5 	.word	0x000043d5
    39c4:	0000489d 	.word	0x0000489d
    39c8:	000042f5 	.word	0x000042f5
    39cc:	0000419d 	.word	0x0000419d
    39d0:	000048dd 	.word	0x000048dd
    39d4:	00003949 	.word	0x00003949

000039d8 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    39d8:	b480      	push	{r7}
    39da:	b083      	sub	sp, #12
    39dc:	af00      	add	r7, sp, #0
    39de:	6078      	str	r0, [r7, #4]
    39e0:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    39e2:	687b      	ldr	r3, [r7, #4]
    39e4:	683a      	ldr	r2, [r7, #0]
    39e6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    39e8:	2300      	movs	r3, #0
}
    39ea:	4618      	mov	r0, r3
    39ec:	370c      	adds	r7, #12
    39ee:	46bd      	mov	sp, r7
    39f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    39f4:	4770      	bx	lr
	...

000039f8 <__NVIC_EnableIRQ>:
{
    39f8:	b480      	push	{r7}
    39fa:	b083      	sub	sp, #12
    39fc:	af00      	add	r7, sp, #0
    39fe:	4603      	mov	r3, r0
    3a00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a06:	2b00      	cmp	r3, #0
    3a08:	db0b      	blt.n	3a22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a0a:	4909      	ldr	r1, [pc, #36]	; (3a30 <__NVIC_EnableIRQ+0x38>)
    3a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a10:	095b      	lsrs	r3, r3, #5
    3a12:	88fa      	ldrh	r2, [r7, #6]
    3a14:	f002 021f 	and.w	r2, r2, #31
    3a18:	2001      	movs	r0, #1
    3a1a:	fa00 f202 	lsl.w	r2, r0, r2
    3a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3a22:	bf00      	nop
    3a24:	370c      	adds	r7, #12
    3a26:	46bd      	mov	sp, r7
    3a28:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a2c:	4770      	bx	lr
    3a2e:	bf00      	nop
    3a30:	e000e100 	.word	0xe000e100

00003a34 <__NVIC_DisableIRQ>:
{
    3a34:	b480      	push	{r7}
    3a36:	b083      	sub	sp, #12
    3a38:	af00      	add	r7, sp, #0
    3a3a:	4603      	mov	r3, r0
    3a3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a42:	2b00      	cmp	r3, #0
    3a44:	db10      	blt.n	3a68 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a46:	490b      	ldr	r1, [pc, #44]	; (3a74 <__NVIC_DisableIRQ+0x40>)
    3a48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a4c:	095b      	lsrs	r3, r3, #5
    3a4e:	88fa      	ldrh	r2, [r7, #6]
    3a50:	f002 021f 	and.w	r2, r2, #31
    3a54:	2001      	movs	r0, #1
    3a56:	fa00 f202 	lsl.w	r2, r0, r2
    3a5a:	3320      	adds	r3, #32
    3a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3a60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a64:	f3bf 8f6f 	isb	sy
}
    3a68:	bf00      	nop
    3a6a:	370c      	adds	r7, #12
    3a6c:	46bd      	mov	sp, r7
    3a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a72:	4770      	bx	lr
    3a74:	e000e100 	.word	0xe000e100

00003a78 <__NVIC_ClearPendingIRQ>:
{
    3a78:	b480      	push	{r7}
    3a7a:	b083      	sub	sp, #12
    3a7c:	af00      	add	r7, sp, #0
    3a7e:	4603      	mov	r3, r0
    3a80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a86:	2b00      	cmp	r3, #0
    3a88:	db0c      	blt.n	3aa4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a8a:	4909      	ldr	r1, [pc, #36]	; (3ab0 <__NVIC_ClearPendingIRQ+0x38>)
    3a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a90:	095b      	lsrs	r3, r3, #5
    3a92:	88fa      	ldrh	r2, [r7, #6]
    3a94:	f002 021f 	and.w	r2, r2, #31
    3a98:	2001      	movs	r0, #1
    3a9a:	fa00 f202 	lsl.w	r2, r0, r2
    3a9e:	3360      	adds	r3, #96	; 0x60
    3aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3aa4:	bf00      	nop
    3aa6:	370c      	adds	r7, #12
    3aa8:	46bd      	mov	sp, r7
    3aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aae:	4770      	bx	lr
    3ab0:	e000e100 	.word	0xe000e100

00003ab4 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    3ab4:	b480      	push	{r7}
    3ab6:	b083      	sub	sp, #12
    3ab8:	af00      	add	r7, sp, #0
    3aba:	6078      	str	r0, [r7, #4]
    3abc:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    3abe:	bf00      	nop
    3ac0:	687b      	ldr	r3, [r7, #4]
    3ac2:	685a      	ldr	r2, [r3, #4]
    3ac4:	683b      	ldr	r3, [r7, #0]
    3ac6:	4013      	ands	r3, r2
    3ac8:	2b00      	cmp	r3, #0
    3aca:	d1f9      	bne.n	3ac0 <hri_eic_wait_for_sync+0xc>
	};
}
    3acc:	bf00      	nop
    3ace:	370c      	adds	r7, #12
    3ad0:	46bd      	mov	sp, r7
    3ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ad6:	4770      	bx	lr

00003ad8 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    3ad8:	b480      	push	{r7}
    3ada:	b083      	sub	sp, #12
    3adc:	af00      	add	r7, sp, #0
    3ade:	6078      	str	r0, [r7, #4]
    3ae0:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    3ae2:	687b      	ldr	r3, [r7, #4]
    3ae4:	685a      	ldr	r2, [r3, #4]
    3ae6:	683b      	ldr	r3, [r7, #0]
    3ae8:	4013      	ands	r3, r2
    3aea:	2b00      	cmp	r3, #0
    3aec:	bf14      	ite	ne
    3aee:	2301      	movne	r3, #1
    3af0:	2300      	moveq	r3, #0
    3af2:	b2db      	uxtb	r3, r3
}
    3af4:	4618      	mov	r0, r3
    3af6:	370c      	adds	r7, #12
    3af8:	46bd      	mov	sp, r7
    3afa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3afe:	4770      	bx	lr

00003b00 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    3b00:	b480      	push	{r7}
    3b02:	b083      	sub	sp, #12
    3b04:	af00      	add	r7, sp, #0
    3b06:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    3b08:	687b      	ldr	r3, [r7, #4]
    3b0a:	695b      	ldr	r3, [r3, #20]
}
    3b0c:	4618      	mov	r0, r3
    3b0e:	370c      	adds	r7, #12
    3b10:	46bd      	mov	sp, r7
    3b12:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b16:	4770      	bx	lr

00003b18 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    3b18:	b480      	push	{r7}
    3b1a:	b083      	sub	sp, #12
    3b1c:	af00      	add	r7, sp, #0
    3b1e:	6078      	str	r0, [r7, #4]
    3b20:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    3b22:	687b      	ldr	r3, [r7, #4]
    3b24:	683a      	ldr	r2, [r7, #0]
    3b26:	615a      	str	r2, [r3, #20]
}
    3b28:	bf00      	nop
    3b2a:	370c      	adds	r7, #12
    3b2c:	46bd      	mov	sp, r7
    3b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b32:	4770      	bx	lr

00003b34 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3b34:	b580      	push	{r7, lr}
    3b36:	b082      	sub	sp, #8
    3b38:	af00      	add	r7, sp, #0
    3b3a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    3b3c:	687b      	ldr	r3, [r7, #4]
    3b3e:	781b      	ldrb	r3, [r3, #0]
    3b40:	b2db      	uxtb	r3, r3
    3b42:	f043 0302 	orr.w	r3, r3, #2
    3b46:	b2da      	uxtb	r2, r3
    3b48:	687b      	ldr	r3, [r7, #4]
    3b4a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    3b4c:	2103      	movs	r1, #3
    3b4e:	6878      	ldr	r0, [r7, #4]
    3b50:	4b02      	ldr	r3, [pc, #8]	; (3b5c <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    3b52:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3b54:	bf00      	nop
    3b56:	3708      	adds	r7, #8
    3b58:	46bd      	mov	sp, r7
    3b5a:	bd80      	pop	{r7, pc}
    3b5c:	00003ab5 	.word	0x00003ab5

00003b60 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    3b60:	b580      	push	{r7, lr}
    3b62:	b082      	sub	sp, #8
    3b64:	af00      	add	r7, sp, #0
    3b66:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    3b68:	687b      	ldr	r3, [r7, #4]
    3b6a:	781b      	ldrb	r3, [r3, #0]
    3b6c:	b2db      	uxtb	r3, r3
    3b6e:	f023 0302 	bic.w	r3, r3, #2
    3b72:	b2da      	uxtb	r2, r3
    3b74:	687b      	ldr	r3, [r7, #4]
    3b76:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    3b78:	2103      	movs	r1, #3
    3b7a:	6878      	ldr	r0, [r7, #4]
    3b7c:	4b02      	ldr	r3, [pc, #8]	; (3b88 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    3b7e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3b80:	bf00      	nop
    3b82:	3708      	adds	r7, #8
    3b84:	46bd      	mov	sp, r7
    3b86:	bd80      	pop	{r7, pc}
    3b88:	00003ab5 	.word	0x00003ab5

00003b8c <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    3b8c:	b580      	push	{r7, lr}
    3b8e:	b084      	sub	sp, #16
    3b90:	af00      	add	r7, sp, #0
    3b92:	6078      	str	r0, [r7, #4]
    3b94:	460b      	mov	r3, r1
    3b96:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    3b98:	687b      	ldr	r3, [r7, #4]
    3b9a:	781b      	ldrb	r3, [r3, #0]
    3b9c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    3b9e:	7bfb      	ldrb	r3, [r7, #15]
    3ba0:	f023 0310 	bic.w	r3, r3, #16
    3ba4:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    3ba6:	78fb      	ldrb	r3, [r7, #3]
    3ba8:	011b      	lsls	r3, r3, #4
    3baa:	b25a      	sxtb	r2, r3
    3bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3bb0:	4313      	orrs	r3, r2
    3bb2:	b25b      	sxtb	r3, r3
    3bb4:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    3bb6:	687b      	ldr	r3, [r7, #4]
    3bb8:	7bfa      	ldrb	r2, [r7, #15]
    3bba:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    3bbc:	2103      	movs	r1, #3
    3bbe:	6878      	ldr	r0, [r7, #4]
    3bc0:	4b02      	ldr	r3, [pc, #8]	; (3bcc <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    3bc2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3bc4:	bf00      	nop
    3bc6:	3710      	adds	r7, #16
    3bc8:	46bd      	mov	sp, r7
    3bca:	bd80      	pop	{r7, pc}
    3bcc:	00003ab5 	.word	0x00003ab5

00003bd0 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    3bd0:	b580      	push	{r7, lr}
    3bd2:	b084      	sub	sp, #16
    3bd4:	af00      	add	r7, sp, #0
    3bd6:	6078      	str	r0, [r7, #4]
    3bd8:	460b      	mov	r3, r1
    3bda:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    3bdc:	2103      	movs	r1, #3
    3bde:	6878      	ldr	r0, [r7, #4]
    3be0:	4b06      	ldr	r3, [pc, #24]	; (3bfc <hri_eic_get_CTRLA_reg+0x2c>)
    3be2:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    3be4:	687b      	ldr	r3, [r7, #4]
    3be6:	781b      	ldrb	r3, [r3, #0]
    3be8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    3bea:	7bfa      	ldrb	r2, [r7, #15]
    3bec:	78fb      	ldrb	r3, [r7, #3]
    3bee:	4013      	ands	r3, r2
    3bf0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    3bf2:	7bfb      	ldrb	r3, [r7, #15]
}
    3bf4:	4618      	mov	r0, r3
    3bf6:	3710      	adds	r7, #16
    3bf8:	46bd      	mov	sp, r7
    3bfa:	bd80      	pop	{r7, pc}
    3bfc:	00003ab5 	.word	0x00003ab5

00003c00 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    3c00:	b580      	push	{r7, lr}
    3c02:	b082      	sub	sp, #8
    3c04:	af00      	add	r7, sp, #0
    3c06:	6078      	str	r0, [r7, #4]
    3c08:	460b      	mov	r3, r1
    3c0a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    3c0c:	687b      	ldr	r3, [r7, #4]
    3c0e:	78fa      	ldrb	r2, [r7, #3]
    3c10:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    3c12:	2103      	movs	r1, #3
    3c14:	6878      	ldr	r0, [r7, #4]
    3c16:	4b03      	ldr	r3, [pc, #12]	; (3c24 <hri_eic_write_CTRLA_reg+0x24>)
    3c18:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3c1a:	bf00      	nop
    3c1c:	3708      	adds	r7, #8
    3c1e:	46bd      	mov	sp, r7
    3c20:	bd80      	pop	{r7, pc}
    3c22:	bf00      	nop
    3c24:	00003ab5 	.word	0x00003ab5

00003c28 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    3c28:	b480      	push	{r7}
    3c2a:	b083      	sub	sp, #12
    3c2c:	af00      	add	r7, sp, #0
    3c2e:	6078      	str	r0, [r7, #4]
    3c30:	460b      	mov	r3, r1
    3c32:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    3c34:	687b      	ldr	r3, [r7, #4]
    3c36:	78fa      	ldrb	r2, [r7, #3]
    3c38:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3c3a:	bf00      	nop
    3c3c:	370c      	adds	r7, #12
    3c3e:	46bd      	mov	sp, r7
    3c40:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c44:	4770      	bx	lr

00003c46 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    3c46:	b480      	push	{r7}
    3c48:	b083      	sub	sp, #12
    3c4a:	af00      	add	r7, sp, #0
    3c4c:	6078      	str	r0, [r7, #4]
    3c4e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    3c50:	687b      	ldr	r3, [r7, #4]
    3c52:	683a      	ldr	r2, [r7, #0]
    3c54:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3c56:	bf00      	nop
    3c58:	370c      	adds	r7, #12
    3c5a:	46bd      	mov	sp, r7
    3c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c60:	4770      	bx	lr

00003c62 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    3c62:	b480      	push	{r7}
    3c64:	b083      	sub	sp, #12
    3c66:	af00      	add	r7, sp, #0
    3c68:	6078      	str	r0, [r7, #4]
    3c6a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    3c6c:	687b      	ldr	r3, [r7, #4]
    3c6e:	683a      	ldr	r2, [r7, #0]
    3c70:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3c72:	bf00      	nop
    3c74:	370c      	adds	r7, #12
    3c76:	46bd      	mov	sp, r7
    3c78:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c7c:	4770      	bx	lr

00003c7e <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    3c7e:	b480      	push	{r7}
    3c80:	b085      	sub	sp, #20
    3c82:	af00      	add	r7, sp, #0
    3c84:	60f8      	str	r0, [r7, #12]
    3c86:	460b      	mov	r3, r1
    3c88:	607a      	str	r2, [r7, #4]
    3c8a:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    3c8c:	7afb      	ldrb	r3, [r7, #11]
    3c8e:	68fa      	ldr	r2, [r7, #12]
    3c90:	3306      	adds	r3, #6
    3c92:	009b      	lsls	r3, r3, #2
    3c94:	4413      	add	r3, r2
    3c96:	687a      	ldr	r2, [r7, #4]
    3c98:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3c9a:	bf00      	nop
    3c9c:	3714      	adds	r7, #20
    3c9e:	46bd      	mov	sp, r7
    3ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ca4:	4770      	bx	lr

00003ca6 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    3ca6:	b480      	push	{r7}
    3ca8:	b083      	sub	sp, #12
    3caa:	af00      	add	r7, sp, #0
    3cac:	6078      	str	r0, [r7, #4]
    3cae:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    3cb0:	687b      	ldr	r3, [r7, #4]
    3cb2:	683a      	ldr	r2, [r7, #0]
    3cb4:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    3cb6:	bf00      	nop
    3cb8:	370c      	adds	r7, #12
    3cba:	46bd      	mov	sp, r7
    3cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cc0:	4770      	bx	lr

00003cc2 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    3cc2:	b480      	push	{r7}
    3cc4:	b083      	sub	sp, #12
    3cc6:	af00      	add	r7, sp, #0
    3cc8:	6078      	str	r0, [r7, #4]
    3cca:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    3ccc:	687b      	ldr	r3, [r7, #4]
    3cce:	683a      	ldr	r2, [r7, #0]
    3cd0:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    3cd2:	bf00      	nop
    3cd4:	370c      	adds	r7, #12
    3cd6:	46bd      	mov	sp, r7
    3cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cdc:	4770      	bx	lr
	...

00003ce0 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    3ce0:	b580      	push	{r7, lr}
    3ce2:	b082      	sub	sp, #8
    3ce4:	af00      	add	r7, sp, #0
    3ce6:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    3ce8:	2101      	movs	r1, #1
    3cea:	484f      	ldr	r0, [pc, #316]	; (3e28 <_ext_irq_init+0x148>)
    3cec:	4b4f      	ldr	r3, [pc, #316]	; (3e2c <_ext_irq_init+0x14c>)
    3cee:	4798      	blx	r3
    3cf0:	4603      	mov	r3, r0
    3cf2:	f083 0301 	eor.w	r3, r3, #1
    3cf6:	b2db      	uxtb	r3, r3
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	d011      	beq.n	3d20 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    3cfc:	2102      	movs	r1, #2
    3cfe:	484a      	ldr	r0, [pc, #296]	; (3e28 <_ext_irq_init+0x148>)
    3d00:	4b4b      	ldr	r3, [pc, #300]	; (3e30 <_ext_irq_init+0x150>)
    3d02:	4798      	blx	r3
    3d04:	4603      	mov	r3, r0
    3d06:	2b00      	cmp	r3, #0
    3d08:	d006      	beq.n	3d18 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    3d0a:	4847      	ldr	r0, [pc, #284]	; (3e28 <_ext_irq_init+0x148>)
    3d0c:	4b49      	ldr	r3, [pc, #292]	; (3e34 <_ext_irq_init+0x154>)
    3d0e:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    3d10:	2102      	movs	r1, #2
    3d12:	4845      	ldr	r0, [pc, #276]	; (3e28 <_ext_irq_init+0x148>)
    3d14:	4b48      	ldr	r3, [pc, #288]	; (3e38 <_ext_irq_init+0x158>)
    3d16:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    3d18:	2101      	movs	r1, #1
    3d1a:	4843      	ldr	r0, [pc, #268]	; (3e28 <_ext_irq_init+0x148>)
    3d1c:	4b47      	ldr	r3, [pc, #284]	; (3e3c <_ext_irq_init+0x15c>)
    3d1e:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    3d20:	2101      	movs	r1, #1
    3d22:	4841      	ldr	r0, [pc, #260]	; (3e28 <_ext_irq_init+0x148>)
    3d24:	4b44      	ldr	r3, [pc, #272]	; (3e38 <_ext_irq_init+0x158>)
    3d26:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    3d28:	2100      	movs	r1, #0
    3d2a:	483f      	ldr	r0, [pc, #252]	; (3e28 <_ext_irq_init+0x148>)
    3d2c:	4b44      	ldr	r3, [pc, #272]	; (3e40 <_ext_irq_init+0x160>)
    3d2e:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    3d30:	2100      	movs	r1, #0
    3d32:	483d      	ldr	r0, [pc, #244]	; (3e28 <_ext_irq_init+0x148>)
    3d34:	4b43      	ldr	r3, [pc, #268]	; (3e44 <_ext_irq_init+0x164>)
    3d36:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    3d38:	2100      	movs	r1, #0
    3d3a:	483b      	ldr	r0, [pc, #236]	; (3e28 <_ext_irq_init+0x148>)
    3d3c:	4b42      	ldr	r3, [pc, #264]	; (3e48 <_ext_irq_init+0x168>)
    3d3e:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    3d40:	f240 31bb 	movw	r1, #955	; 0x3bb
    3d44:	4838      	ldr	r0, [pc, #224]	; (3e28 <_ext_irq_init+0x148>)
    3d46:	4b41      	ldr	r3, [pc, #260]	; (3e4c <_ext_irq_init+0x16c>)
    3d48:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    3d4a:	f240 313b 	movw	r1, #827	; 0x33b
    3d4e:	4836      	ldr	r0, [pc, #216]	; (3e28 <_ext_irq_init+0x148>)
    3d50:	4b3f      	ldr	r3, [pc, #252]	; (3e50 <_ext_irq_init+0x170>)
    3d52:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    3d54:	2100      	movs	r1, #0
    3d56:	4834      	ldr	r0, [pc, #208]	; (3e28 <_ext_irq_init+0x148>)
    3d58:	4b3e      	ldr	r3, [pc, #248]	; (3e54 <_ext_irq_init+0x174>)
    3d5a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    3d5c:	4a3e      	ldr	r2, [pc, #248]	; (3e58 <_ext_irq_init+0x178>)
    3d5e:	2100      	movs	r1, #0
    3d60:	4831      	ldr	r0, [pc, #196]	; (3e28 <_ext_irq_init+0x148>)
    3d62:	4b3e      	ldr	r3, [pc, #248]	; (3e5c <_ext_irq_init+0x17c>)
    3d64:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    3d66:	2211      	movs	r2, #17
    3d68:	2101      	movs	r1, #1
    3d6a:	482f      	ldr	r0, [pc, #188]	; (3e28 <_ext_irq_init+0x148>)
    3d6c:	4b3b      	ldr	r3, [pc, #236]	; (3e5c <_ext_irq_init+0x17c>)
    3d6e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    3d70:	482d      	ldr	r0, [pc, #180]	; (3e28 <_ext_irq_init+0x148>)
    3d72:	4b3b      	ldr	r3, [pc, #236]	; (3e60 <_ext_irq_init+0x180>)
    3d74:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    3d76:	200c      	movs	r0, #12
    3d78:	4b3a      	ldr	r3, [pc, #232]	; (3e64 <_ext_irq_init+0x184>)
    3d7a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    3d7c:	200c      	movs	r0, #12
    3d7e:	4b3a      	ldr	r3, [pc, #232]	; (3e68 <_ext_irq_init+0x188>)
    3d80:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    3d82:	200c      	movs	r0, #12
    3d84:	4b39      	ldr	r3, [pc, #228]	; (3e6c <_ext_irq_init+0x18c>)
    3d86:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    3d88:	200d      	movs	r0, #13
    3d8a:	4b36      	ldr	r3, [pc, #216]	; (3e64 <_ext_irq_init+0x184>)
    3d8c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    3d8e:	200d      	movs	r0, #13
    3d90:	4b35      	ldr	r3, [pc, #212]	; (3e68 <_ext_irq_init+0x188>)
    3d92:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    3d94:	200d      	movs	r0, #13
    3d96:	4b35      	ldr	r3, [pc, #212]	; (3e6c <_ext_irq_init+0x18c>)
    3d98:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    3d9a:	200f      	movs	r0, #15
    3d9c:	4b31      	ldr	r3, [pc, #196]	; (3e64 <_ext_irq_init+0x184>)
    3d9e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    3da0:	200f      	movs	r0, #15
    3da2:	4b31      	ldr	r3, [pc, #196]	; (3e68 <_ext_irq_init+0x188>)
    3da4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    3da6:	200f      	movs	r0, #15
    3da8:	4b30      	ldr	r3, [pc, #192]	; (3e6c <_ext_irq_init+0x18c>)
    3daa:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    3dac:	2010      	movs	r0, #16
    3dae:	4b2d      	ldr	r3, [pc, #180]	; (3e64 <_ext_irq_init+0x184>)
    3db0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    3db2:	2010      	movs	r0, #16
    3db4:	4b2c      	ldr	r3, [pc, #176]	; (3e68 <_ext_irq_init+0x188>)
    3db6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    3db8:	2010      	movs	r0, #16
    3dba:	4b2c      	ldr	r3, [pc, #176]	; (3e6c <_ext_irq_init+0x18c>)
    3dbc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    3dbe:	2011      	movs	r0, #17
    3dc0:	4b28      	ldr	r3, [pc, #160]	; (3e64 <_ext_irq_init+0x184>)
    3dc2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    3dc4:	2011      	movs	r0, #17
    3dc6:	4b28      	ldr	r3, [pc, #160]	; (3e68 <_ext_irq_init+0x188>)
    3dc8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    3dca:	2011      	movs	r0, #17
    3dcc:	4b27      	ldr	r3, [pc, #156]	; (3e6c <_ext_irq_init+0x18c>)
    3dce:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    3dd0:	2012      	movs	r0, #18
    3dd2:	4b24      	ldr	r3, [pc, #144]	; (3e64 <_ext_irq_init+0x184>)
    3dd4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    3dd6:	2012      	movs	r0, #18
    3dd8:	4b23      	ldr	r3, [pc, #140]	; (3e68 <_ext_irq_init+0x188>)
    3dda:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    3ddc:	2012      	movs	r0, #18
    3dde:	4b23      	ldr	r3, [pc, #140]	; (3e6c <_ext_irq_init+0x18c>)
    3de0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    3de2:	2013      	movs	r0, #19
    3de4:	4b1f      	ldr	r3, [pc, #124]	; (3e64 <_ext_irq_init+0x184>)
    3de6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    3de8:	2013      	movs	r0, #19
    3dea:	4b1f      	ldr	r3, [pc, #124]	; (3e68 <_ext_irq_init+0x188>)
    3dec:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    3dee:	2013      	movs	r0, #19
    3df0:	4b1e      	ldr	r3, [pc, #120]	; (3e6c <_ext_irq_init+0x18c>)
    3df2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    3df4:	2014      	movs	r0, #20
    3df6:	4b1b      	ldr	r3, [pc, #108]	; (3e64 <_ext_irq_init+0x184>)
    3df8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    3dfa:	2014      	movs	r0, #20
    3dfc:	4b1a      	ldr	r3, [pc, #104]	; (3e68 <_ext_irq_init+0x188>)
    3dfe:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    3e00:	2014      	movs	r0, #20
    3e02:	4b1a      	ldr	r3, [pc, #104]	; (3e6c <_ext_irq_init+0x18c>)
    3e04:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    3e06:	2015      	movs	r0, #21
    3e08:	4b16      	ldr	r3, [pc, #88]	; (3e64 <_ext_irq_init+0x184>)
    3e0a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    3e0c:	2015      	movs	r0, #21
    3e0e:	4b16      	ldr	r3, [pc, #88]	; (3e68 <_ext_irq_init+0x188>)
    3e10:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    3e12:	2015      	movs	r0, #21
    3e14:	4b15      	ldr	r3, [pc, #84]	; (3e6c <_ext_irq_init+0x18c>)
    3e16:	4798      	blx	r3

	callback = cb;
    3e18:	4a15      	ldr	r2, [pc, #84]	; (3e70 <_ext_irq_init+0x190>)
    3e1a:	687b      	ldr	r3, [r7, #4]
    3e1c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    3e1e:	2300      	movs	r3, #0
}
    3e20:	4618      	mov	r0, r3
    3e22:	3708      	adds	r7, #8
    3e24:	46bd      	mov	sp, r7
    3e26:	bd80      	pop	{r7, pc}
    3e28:	40002800 	.word	0x40002800
    3e2c:	00003ad9 	.word	0x00003ad9
    3e30:	00003bd1 	.word	0x00003bd1
    3e34:	00003b61 	.word	0x00003b61
    3e38:	00003ab5 	.word	0x00003ab5
    3e3c:	00003c01 	.word	0x00003c01
    3e40:	00003b8d 	.word	0x00003b8d
    3e44:	00003c29 	.word	0x00003c29
    3e48:	00003c47 	.word	0x00003c47
    3e4c:	00003c63 	.word	0x00003c63
    3e50:	00003ca7 	.word	0x00003ca7
    3e54:	00003cc3 	.word	0x00003cc3
    3e58:	90999013 	.word	0x90999013
    3e5c:	00003c7f 	.word	0x00003c7f
    3e60:	00003b35 	.word	0x00003b35
    3e64:	00003a35 	.word	0x00003a35
    3e68:	00003a79 	.word	0x00003a79
    3e6c:	000039f9 	.word	0x000039f9
    3e70:	2000083c 	.word	0x2000083c

00003e74 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    3e74:	b580      	push	{r7, lr}
    3e76:	b084      	sub	sp, #16
    3e78:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    3e7a:	4841      	ldr	r0, [pc, #260]	; (3f80 <_ext_irq_handler+0x10c>)
    3e7c:	4b41      	ldr	r3, [pc, #260]	; (3f84 <_ext_irq_handler+0x110>)
    3e7e:	4798      	blx	r3
    3e80:	4603      	mov	r3, r0
    3e82:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    3e84:	f04f 33ff 	mov.w	r3, #4294967295
    3e88:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    3e8a:	683b      	ldr	r3, [r7, #0]
    3e8c:	4619      	mov	r1, r3
    3e8e:	483c      	ldr	r0, [pc, #240]	; (3f80 <_ext_irq_handler+0x10c>)
    3e90:	4b3d      	ldr	r3, [pc, #244]	; (3f88 <_ext_irq_handler+0x114>)
    3e92:	4798      	blx	r3

	ASSERT(callback);
    3e94:	4b3d      	ldr	r3, [pc, #244]	; (3f8c <_ext_irq_handler+0x118>)
    3e96:	681b      	ldr	r3, [r3, #0]
    3e98:	2b00      	cmp	r3, #0
    3e9a:	bf14      	ite	ne
    3e9c:	2301      	movne	r3, #1
    3e9e:	2300      	moveq	r3, #0
    3ea0:	b2db      	uxtb	r3, r3
    3ea2:	f44f 7284 	mov.w	r2, #264	; 0x108
    3ea6:	493a      	ldr	r1, [pc, #232]	; (3f90 <_ext_irq_handler+0x11c>)
    3ea8:	4618      	mov	r0, r3
    3eaa:	4b3a      	ldr	r3, [pc, #232]	; (3f94 <_ext_irq_handler+0x120>)
    3eac:	4798      	blx	r3

	while (flags) {
    3eae:	e060      	b.n	3f72 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    3eb0:	683b      	ldr	r3, [r7, #0]
    3eb2:	4618      	mov	r0, r3
    3eb4:	4b38      	ldr	r3, [pc, #224]	; (3f98 <_ext_irq_handler+0x124>)
    3eb6:	4798      	blx	r3
    3eb8:	4603      	mov	r3, r0
    3eba:	b2db      	uxtb	r3, r3
    3ebc:	3b01      	subs	r3, #1
    3ebe:	b2db      	uxtb	r3, r3
    3ec0:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    3ec2:	e047      	b.n	3f54 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    3ec4:	2300      	movs	r3, #0
    3ec6:	71fb      	strb	r3, [r7, #7]
    3ec8:	2309      	movs	r3, #9
    3eca:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    3ecc:	e024      	b.n	3f18 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    3ece:	79ba      	ldrb	r2, [r7, #6]
    3ed0:	79fb      	ldrb	r3, [r7, #7]
    3ed2:	4413      	add	r3, r2
    3ed4:	105b      	asrs	r3, r3, #1
    3ed6:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    3ed8:	797b      	ldrb	r3, [r7, #5]
    3eda:	4a30      	ldr	r2, [pc, #192]	; (3f9c <_ext_irq_handler+0x128>)
    3edc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    3ee0:	461a      	mov	r2, r3
    3ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3ee6:	429a      	cmp	r2, r3
    3ee8:	d106      	bne.n	3ef8 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    3eea:	797b      	ldrb	r3, [r7, #5]
    3eec:	4a2b      	ldr	r2, [pc, #172]	; (3f9c <_ext_irq_handler+0x128>)
    3eee:	00db      	lsls	r3, r3, #3
    3ef0:	4413      	add	r3, r2
    3ef2:	685b      	ldr	r3, [r3, #4]
    3ef4:	60bb      	str	r3, [r7, #8]
					break;
    3ef6:	e013      	b.n	3f20 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    3ef8:	797b      	ldrb	r3, [r7, #5]
    3efa:	4a28      	ldr	r2, [pc, #160]	; (3f9c <_ext_irq_handler+0x128>)
    3efc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    3f00:	461a      	mov	r2, r3
    3f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3f06:	429a      	cmp	r2, r3
    3f08:	da03      	bge.n	3f12 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    3f0a:	797b      	ldrb	r3, [r7, #5]
    3f0c:	3301      	adds	r3, #1
    3f0e:	71fb      	strb	r3, [r7, #7]
    3f10:	e002      	b.n	3f18 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    3f12:	797b      	ldrb	r3, [r7, #5]
    3f14:	3b01      	subs	r3, #1
    3f16:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    3f18:	79ba      	ldrb	r2, [r7, #6]
    3f1a:	79fb      	ldrb	r3, [r7, #7]
    3f1c:	429a      	cmp	r2, r3
    3f1e:	d2d6      	bcs.n	3ece <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    3f20:	68bb      	ldr	r3, [r7, #8]
    3f22:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f26:	d003      	beq.n	3f30 <_ext_irq_handler+0xbc>
				callback(pin);
    3f28:	4b18      	ldr	r3, [pc, #96]	; (3f8c <_ext_irq_handler+0x118>)
    3f2a:	681b      	ldr	r3, [r3, #0]
    3f2c:	68b8      	ldr	r0, [r7, #8]
    3f2e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    3f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3f34:	2201      	movs	r2, #1
    3f36:	fa02 f303 	lsl.w	r3, r2, r3
    3f3a:	43da      	mvns	r2, r3
    3f3c:	683b      	ldr	r3, [r7, #0]
    3f3e:	4013      	ands	r3, r2
    3f40:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    3f42:	683b      	ldr	r3, [r7, #0]
    3f44:	4618      	mov	r0, r3
    3f46:	4b14      	ldr	r3, [pc, #80]	; (3f98 <_ext_irq_handler+0x124>)
    3f48:	4798      	blx	r3
    3f4a:	4603      	mov	r3, r0
    3f4c:	b2db      	uxtb	r3, r3
    3f4e:	3b01      	subs	r3, #1
    3f50:	b2db      	uxtb	r3, r3
    3f52:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    3f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3f58:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f5c:	d1b2      	bne.n	3ec4 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    3f5e:	4808      	ldr	r0, [pc, #32]	; (3f80 <_ext_irq_handler+0x10c>)
    3f60:	4b08      	ldr	r3, [pc, #32]	; (3f84 <_ext_irq_handler+0x110>)
    3f62:	4798      	blx	r3
    3f64:	4603      	mov	r3, r0
    3f66:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    3f68:	683b      	ldr	r3, [r7, #0]
    3f6a:	4619      	mov	r1, r3
    3f6c:	4804      	ldr	r0, [pc, #16]	; (3f80 <_ext_irq_handler+0x10c>)
    3f6e:	4b06      	ldr	r3, [pc, #24]	; (3f88 <_ext_irq_handler+0x114>)
    3f70:	4798      	blx	r3
	while (flags) {
    3f72:	683b      	ldr	r3, [r7, #0]
    3f74:	2b00      	cmp	r3, #0
    3f76:	d19b      	bne.n	3eb0 <_ext_irq_handler+0x3c>
	}
}
    3f78:	bf00      	nop
    3f7a:	3710      	adds	r7, #16
    3f7c:	46bd      	mov	sp, r7
    3f7e:	bd80      	pop	{r7, pc}
    3f80:	40002800 	.word	0x40002800
    3f84:	00003b01 	.word	0x00003b01
    3f88:	00003b19 	.word	0x00003b19
    3f8c:	2000083c 	.word	0x2000083c
    3f90:	0000d09c 	.word	0x0000d09c
    3f94:	00002de1 	.word	0x00002de1
    3f98:	0000cbc9 	.word	0x0000cbc9
    3f9c:	0000d054 	.word	0x0000d054

00003fa0 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    3fa0:	b580      	push	{r7, lr}
    3fa2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    3fa4:	4b01      	ldr	r3, [pc, #4]	; (3fac <EIC_0_Handler+0xc>)
    3fa6:	4798      	blx	r3
} /**
    3fa8:	bf00      	nop
    3faa:	bd80      	pop	{r7, pc}
    3fac:	00003e75 	.word	0x00003e75

00003fb0 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    3fb0:	b580      	push	{r7, lr}
    3fb2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    3fb4:	4b01      	ldr	r3, [pc, #4]	; (3fbc <EIC_1_Handler+0xc>)
    3fb6:	4798      	blx	r3
} /**
    3fb8:	bf00      	nop
    3fba:	bd80      	pop	{r7, pc}
    3fbc:	00003e75 	.word	0x00003e75

00003fc0 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    3fc0:	b580      	push	{r7, lr}
    3fc2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    3fc4:	4b01      	ldr	r3, [pc, #4]	; (3fcc <EIC_3_Handler+0xc>)
    3fc6:	4798      	blx	r3
} /**
    3fc8:	bf00      	nop
    3fca:	bd80      	pop	{r7, pc}
    3fcc:	00003e75 	.word	0x00003e75

00003fd0 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    3fd0:	b580      	push	{r7, lr}
    3fd2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    3fd4:	4b01      	ldr	r3, [pc, #4]	; (3fdc <EIC_4_Handler+0xc>)
    3fd6:	4798      	blx	r3
} /**
    3fd8:	bf00      	nop
    3fda:	bd80      	pop	{r7, pc}
    3fdc:	00003e75 	.word	0x00003e75

00003fe0 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    3fe0:	b580      	push	{r7, lr}
    3fe2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    3fe4:	4b01      	ldr	r3, [pc, #4]	; (3fec <EIC_5_Handler+0xc>)
    3fe6:	4798      	blx	r3
} /**
    3fe8:	bf00      	nop
    3fea:	bd80      	pop	{r7, pc}
    3fec:	00003e75 	.word	0x00003e75

00003ff0 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    3ff0:	b580      	push	{r7, lr}
    3ff2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    3ff4:	4b01      	ldr	r3, [pc, #4]	; (3ffc <EIC_6_Handler+0xc>)
    3ff6:	4798      	blx	r3
} /**
    3ff8:	bf00      	nop
    3ffa:	bd80      	pop	{r7, pc}
    3ffc:	00003e75 	.word	0x00003e75

00004000 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4000:	b580      	push	{r7, lr}
    4002:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4004:	4b01      	ldr	r3, [pc, #4]	; (400c <EIC_7_Handler+0xc>)
    4006:	4798      	blx	r3
} /**
    4008:	bf00      	nop
    400a:	bd80      	pop	{r7, pc}
    400c:	00003e75 	.word	0x00003e75

00004010 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4010:	b580      	push	{r7, lr}
    4012:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4014:	4b01      	ldr	r3, [pc, #4]	; (401c <EIC_8_Handler+0xc>)
    4016:	4798      	blx	r3
} /**
    4018:	bf00      	nop
    401a:	bd80      	pop	{r7, pc}
    401c:	00003e75 	.word	0x00003e75

00004020 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4020:	b580      	push	{r7, lr}
    4022:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4024:	4b01      	ldr	r3, [pc, #4]	; (402c <EIC_9_Handler+0xc>)
    4026:	4798      	blx	r3
}
    4028:	bf00      	nop
    402a:	bd80      	pop	{r7, pc}
    402c:	00003e75 	.word	0x00003e75

00004030 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4030:	b480      	push	{r7}
    4032:	b085      	sub	sp, #20
    4034:	af00      	add	r7, sp, #0
    4036:	60f8      	str	r0, [r7, #12]
    4038:	460b      	mov	r3, r1
    403a:	607a      	str	r2, [r7, #4]
    403c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    403e:	7afa      	ldrb	r2, [r7, #11]
    4040:	68fb      	ldr	r3, [r7, #12]
    4042:	3248      	adds	r2, #72	; 0x48
    4044:	6879      	ldr	r1, [r7, #4]
    4046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    404a:	bf00      	nop
    404c:	3714      	adds	r7, #20
    404e:	46bd      	mov	sp, r7
    4050:	f85d 7b04 	ldr.w	r7, [sp], #4
    4054:	4770      	bx	lr

00004056 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4056:	b480      	push	{r7}
    4058:	b083      	sub	sp, #12
    405a:	af00      	add	r7, sp, #0
    405c:	6078      	str	r0, [r7, #4]
    405e:	460b      	mov	r3, r1
    4060:	70fb      	strb	r3, [r7, #3]
    4062:	4613      	mov	r3, r2
    4064:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4066:	78fb      	ldrb	r3, [r7, #3]
    4068:	687a      	ldr	r2, [r7, #4]
    406a:	3304      	adds	r3, #4
    406c:	00db      	lsls	r3, r3, #3
    406e:	4413      	add	r3, r2
    4070:	78ba      	ldrb	r2, [r7, #2]
    4072:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4074:	78fb      	ldrb	r3, [r7, #3]
    4076:	78ba      	ldrb	r2, [r7, #2]
    4078:	43d2      	mvns	r2, r2
    407a:	b2d1      	uxtb	r1, r2
    407c:	687a      	ldr	r2, [r7, #4]
    407e:	3304      	adds	r3, #4
    4080:	00db      	lsls	r3, r3, #3
    4082:	4413      	add	r3, r2
    4084:	460a      	mov	r2, r1
    4086:	711a      	strb	r2, [r3, #4]
}
    4088:	bf00      	nop
    408a:	370c      	adds	r7, #12
    408c:	46bd      	mov	sp, r7
    408e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4092:	4770      	bx	lr

00004094 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4094:	b480      	push	{r7}
    4096:	b085      	sub	sp, #20
    4098:	af00      	add	r7, sp, #0
    409a:	60f8      	str	r0, [r7, #12]
    409c:	460b      	mov	r3, r1
    409e:	607a      	str	r2, [r7, #4]
    40a0:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    40a2:	7afa      	ldrb	r2, [r7, #11]
    40a4:	68fb      	ldr	r3, [r7, #12]
    40a6:	3204      	adds	r2, #4
    40a8:	6879      	ldr	r1, [r7, #4]
    40aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    40ae:	bf00      	nop
    40b0:	3714      	adds	r7, #20
    40b2:	46bd      	mov	sp, r7
    40b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    40b8:	4770      	bx	lr
	...

000040bc <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    40bc:	b580      	push	{r7, lr}
    40be:	b082      	sub	sp, #8
    40c0:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    40c2:	2300      	movs	r3, #0
    40c4:	71fb      	strb	r3, [r7, #7]
    40c6:	e00b      	b.n	40e0 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    40c8:	79fb      	ldrb	r3, [r7, #7]
    40ca:	4a18      	ldr	r2, [pc, #96]	; (412c <_event_system_init+0x70>)
    40cc:	5cd3      	ldrb	r3, [r2, r3]
    40ce:	461a      	mov	r2, r3
    40d0:	79fb      	ldrb	r3, [r7, #7]
    40d2:	4619      	mov	r1, r3
    40d4:	4816      	ldr	r0, [pc, #88]	; (4130 <_event_system_init+0x74>)
    40d6:	4b17      	ldr	r3, [pc, #92]	; (4134 <_event_system_init+0x78>)
    40d8:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    40da:	79fb      	ldrb	r3, [r7, #7]
    40dc:	3301      	adds	r3, #1
    40de:	71fb      	strb	r3, [r7, #7]
    40e0:	79fb      	ldrb	r3, [r7, #7]
    40e2:	2b42      	cmp	r3, #66	; 0x42
    40e4:	d9f0      	bls.n	40c8 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    40e6:	2300      	movs	r3, #0
    40e8:	71fb      	strb	r3, [r7, #7]
    40ea:	e016      	b.n	411a <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    40ec:	79fb      	ldrb	r3, [r7, #7]
    40ee:	4a12      	ldr	r2, [pc, #72]	; (4138 <_event_system_init+0x7c>)
    40f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    40f4:	461a      	mov	r2, r3
    40f6:	79fb      	ldrb	r3, [r7, #7]
    40f8:	4619      	mov	r1, r3
    40fa:	480d      	ldr	r0, [pc, #52]	; (4130 <_event_system_init+0x74>)
    40fc:	4b0f      	ldr	r3, [pc, #60]	; (413c <_event_system_init+0x80>)
    40fe:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4100:	79fb      	ldrb	r3, [r7, #7]
    4102:	4a0f      	ldr	r2, [pc, #60]	; (4140 <_event_system_init+0x84>)
    4104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4108:	b2da      	uxtb	r2, r3
    410a:	79fb      	ldrb	r3, [r7, #7]
    410c:	4619      	mov	r1, r3
    410e:	4808      	ldr	r0, [pc, #32]	; (4130 <_event_system_init+0x74>)
    4110:	4b0c      	ldr	r3, [pc, #48]	; (4144 <_event_system_init+0x88>)
    4112:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4114:	79fb      	ldrb	r3, [r7, #7]
    4116:	3301      	adds	r3, #1
    4118:	71fb      	strb	r3, [r7, #7]
    411a:	79fb      	ldrb	r3, [r7, #7]
    411c:	2b1f      	cmp	r3, #31
    411e:	d9e5      	bls.n	40ec <_event_system_init+0x30>
	}

	return ERR_NONE;
    4120:	2300      	movs	r3, #0
}
    4122:	4618      	mov	r0, r3
    4124:	3708      	adds	r7, #8
    4126:	46bd      	mov	sp, r7
    4128:	bd80      	pop	{r7, pc}
    412a:	bf00      	nop
    412c:	0000d0b4 	.word	0x0000d0b4
    4130:	4100e000 	.word	0x4100e000
    4134:	00004031 	.word	0x00004031
    4138:	0000d0f8 	.word	0x0000d0f8
    413c:	00004095 	.word	0x00004095
    4140:	0000d138 	.word	0x0000d138
    4144:	00004057 	.word	0x00004057

00004148 <hri_gclk_wait_for_sync>:
{
    4148:	b480      	push	{r7}
    414a:	b083      	sub	sp, #12
    414c:	af00      	add	r7, sp, #0
    414e:	6078      	str	r0, [r7, #4]
    4150:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4152:	bf00      	nop
    4154:	687b      	ldr	r3, [r7, #4]
    4156:	685a      	ldr	r2, [r3, #4]
    4158:	683b      	ldr	r3, [r7, #0]
    415a:	4013      	ands	r3, r2
    415c:	2b00      	cmp	r3, #0
    415e:	d1f9      	bne.n	4154 <hri_gclk_wait_for_sync+0xc>
}
    4160:	bf00      	nop
    4162:	370c      	adds	r7, #12
    4164:	46bd      	mov	sp, r7
    4166:	f85d 7b04 	ldr.w	r7, [sp], #4
    416a:	4770      	bx	lr

0000416c <hri_gclk_write_GENCTRL_reg>:
{
    416c:	b580      	push	{r7, lr}
    416e:	b084      	sub	sp, #16
    4170:	af00      	add	r7, sp, #0
    4172:	60f8      	str	r0, [r7, #12]
    4174:	460b      	mov	r3, r1
    4176:	607a      	str	r2, [r7, #4]
    4178:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    417a:	7afa      	ldrb	r2, [r7, #11]
    417c:	68fb      	ldr	r3, [r7, #12]
    417e:	3208      	adds	r2, #8
    4180:	6879      	ldr	r1, [r7, #4]
    4182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4186:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    418a:	68f8      	ldr	r0, [r7, #12]
    418c:	4b02      	ldr	r3, [pc, #8]	; (4198 <hri_gclk_write_GENCTRL_reg+0x2c>)
    418e:	4798      	blx	r3
}
    4190:	bf00      	nop
    4192:	3710      	adds	r7, #16
    4194:	46bd      	mov	sp, r7
    4196:	bd80      	pop	{r7, pc}
    4198:	00004149 	.word	0x00004149

0000419c <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    419c:	b580      	push	{r7, lr}
    419e:	b082      	sub	sp, #8
    41a0:	af00      	add	r7, sp, #0
    41a2:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	f003 0301 	and.w	r3, r3, #1
    41aa:	2b00      	cmp	r3, #0
    41ac:	d004      	beq.n	41b8 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    41ae:	4a3b      	ldr	r2, [pc, #236]	; (429c <_gclk_init_generators_by_fref+0x100>)
    41b0:	2100      	movs	r1, #0
    41b2:	483b      	ldr	r0, [pc, #236]	; (42a0 <_gclk_init_generators_by_fref+0x104>)
    41b4:	4b3b      	ldr	r3, [pc, #236]	; (42a4 <_gclk_init_generators_by_fref+0x108>)
    41b6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    41b8:	687b      	ldr	r3, [r7, #4]
    41ba:	f003 0302 	and.w	r3, r3, #2
    41be:	2b00      	cmp	r3, #0
    41c0:	d004      	beq.n	41cc <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    41c2:	4a39      	ldr	r2, [pc, #228]	; (42a8 <_gclk_init_generators_by_fref+0x10c>)
    41c4:	2101      	movs	r1, #1
    41c6:	4836      	ldr	r0, [pc, #216]	; (42a0 <_gclk_init_generators_by_fref+0x104>)
    41c8:	4b36      	ldr	r3, [pc, #216]	; (42a4 <_gclk_init_generators_by_fref+0x108>)
    41ca:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    41cc:	687b      	ldr	r3, [r7, #4]
    41ce:	f003 0304 	and.w	r3, r3, #4
    41d2:	2b00      	cmp	r3, #0
    41d4:	d004      	beq.n	41e0 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    41d6:	4a35      	ldr	r2, [pc, #212]	; (42ac <_gclk_init_generators_by_fref+0x110>)
    41d8:	2102      	movs	r1, #2
    41da:	4831      	ldr	r0, [pc, #196]	; (42a0 <_gclk_init_generators_by_fref+0x104>)
    41dc:	4b31      	ldr	r3, [pc, #196]	; (42a4 <_gclk_init_generators_by_fref+0x108>)
    41de:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	f003 0308 	and.w	r3, r3, #8
    41e6:	2b00      	cmp	r3, #0
    41e8:	d004      	beq.n	41f4 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    41ea:	4a31      	ldr	r2, [pc, #196]	; (42b0 <_gclk_init_generators_by_fref+0x114>)
    41ec:	2103      	movs	r1, #3
    41ee:	482c      	ldr	r0, [pc, #176]	; (42a0 <_gclk_init_generators_by_fref+0x104>)
    41f0:	4b2c      	ldr	r3, [pc, #176]	; (42a4 <_gclk_init_generators_by_fref+0x108>)
    41f2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    41f4:	687b      	ldr	r3, [r7, #4]
    41f6:	f003 0310 	and.w	r3, r3, #16
    41fa:	2b00      	cmp	r3, #0
    41fc:	d004      	beq.n	4208 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    41fe:	4a2d      	ldr	r2, [pc, #180]	; (42b4 <_gclk_init_generators_by_fref+0x118>)
    4200:	2104      	movs	r1, #4
    4202:	4827      	ldr	r0, [pc, #156]	; (42a0 <_gclk_init_generators_by_fref+0x104>)
    4204:	4b27      	ldr	r3, [pc, #156]	; (42a4 <_gclk_init_generators_by_fref+0x108>)
    4206:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	f003 0320 	and.w	r3, r3, #32
    420e:	2b00      	cmp	r3, #0
    4210:	d004      	beq.n	421c <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4212:	4a29      	ldr	r2, [pc, #164]	; (42b8 <_gclk_init_generators_by_fref+0x11c>)
    4214:	2105      	movs	r1, #5
    4216:	4822      	ldr	r0, [pc, #136]	; (42a0 <_gclk_init_generators_by_fref+0x104>)
    4218:	4b22      	ldr	r3, [pc, #136]	; (42a4 <_gclk_init_generators_by_fref+0x108>)
    421a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    421c:	687b      	ldr	r3, [r7, #4]
    421e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4222:	2b00      	cmp	r3, #0
    4224:	d004      	beq.n	4230 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4226:	4a25      	ldr	r2, [pc, #148]	; (42bc <_gclk_init_generators_by_fref+0x120>)
    4228:	2106      	movs	r1, #6
    422a:	481d      	ldr	r0, [pc, #116]	; (42a0 <_gclk_init_generators_by_fref+0x104>)
    422c:	4b1d      	ldr	r3, [pc, #116]	; (42a4 <_gclk_init_generators_by_fref+0x108>)
    422e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4236:	2b00      	cmp	r3, #0
    4238:	d004      	beq.n	4244 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    423a:	4a21      	ldr	r2, [pc, #132]	; (42c0 <_gclk_init_generators_by_fref+0x124>)
    423c:	2107      	movs	r1, #7
    423e:	4818      	ldr	r0, [pc, #96]	; (42a0 <_gclk_init_generators_by_fref+0x104>)
    4240:	4b18      	ldr	r3, [pc, #96]	; (42a4 <_gclk_init_generators_by_fref+0x108>)
    4242:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    4244:	687b      	ldr	r3, [r7, #4]
    4246:	f403 7380 	and.w	r3, r3, #256	; 0x100
    424a:	2b00      	cmp	r3, #0
    424c:	d004      	beq.n	4258 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    424e:	4a1d      	ldr	r2, [pc, #116]	; (42c4 <_gclk_init_generators_by_fref+0x128>)
    4250:	2108      	movs	r1, #8
    4252:	4813      	ldr	r0, [pc, #76]	; (42a0 <_gclk_init_generators_by_fref+0x104>)
    4254:	4b13      	ldr	r3, [pc, #76]	; (42a4 <_gclk_init_generators_by_fref+0x108>)
    4256:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	f403 7300 	and.w	r3, r3, #512	; 0x200
    425e:	2b00      	cmp	r3, #0
    4260:	d004      	beq.n	426c <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    4262:	4a19      	ldr	r2, [pc, #100]	; (42c8 <_gclk_init_generators_by_fref+0x12c>)
    4264:	2109      	movs	r1, #9
    4266:	480e      	ldr	r0, [pc, #56]	; (42a0 <_gclk_init_generators_by_fref+0x104>)
    4268:	4b0e      	ldr	r3, [pc, #56]	; (42a4 <_gclk_init_generators_by_fref+0x108>)
    426a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4272:	2b00      	cmp	r3, #0
    4274:	d004      	beq.n	4280 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    4276:	4a15      	ldr	r2, [pc, #84]	; (42cc <_gclk_init_generators_by_fref+0x130>)
    4278:	210a      	movs	r1, #10
    427a:	4809      	ldr	r0, [pc, #36]	; (42a0 <_gclk_init_generators_by_fref+0x104>)
    427c:	4b09      	ldr	r3, [pc, #36]	; (42a4 <_gclk_init_generators_by_fref+0x108>)
    427e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4280:	687b      	ldr	r3, [r7, #4]
    4282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4286:	2b00      	cmp	r3, #0
    4288:	d004      	beq.n	4294 <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    428a:	4a11      	ldr	r2, [pc, #68]	; (42d0 <_gclk_init_generators_by_fref+0x134>)
    428c:	210b      	movs	r1, #11
    428e:	4804      	ldr	r0, [pc, #16]	; (42a0 <_gclk_init_generators_by_fref+0x104>)
    4290:	4b04      	ldr	r3, [pc, #16]	; (42a4 <_gclk_init_generators_by_fref+0x108>)
    4292:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4294:	bf00      	nop
    4296:	3708      	adds	r7, #8
    4298:	46bd      	mov	sp, r7
    429a:	bd80      	pop	{r7, pc}
    429c:	00010107 	.word	0x00010107
    42a0:	40001c00 	.word	0x40001c00
    42a4:	0000416d 	.word	0x0000416d
    42a8:	00010907 	.word	0x00010907
    42ac:	00010906 	.word	0x00010906
    42b0:	00020908 	.word	0x00020908
    42b4:	00010901 	.word	0x00010901
    42b8:	00062901 	.word	0x00062901
    42bc:	000c2901 	.word	0x000c2901
    42c0:	00082908 	.word	0x00082908
    42c4:	00032901 	.word	0x00032901
    42c8:	00011908 	.word	0x00011908
    42cc:	00010905 	.word	0x00010905
    42d0:	00041905 	.word	0x00041905

000042d4 <hri_mclk_write_CPUDIV_reg>:
{
    42d4:	b480      	push	{r7}
    42d6:	b083      	sub	sp, #12
    42d8:	af00      	add	r7, sp, #0
    42da:	6078      	str	r0, [r7, #4]
    42dc:	460b      	mov	r3, r1
    42de:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    42e0:	687b      	ldr	r3, [r7, #4]
    42e2:	78fa      	ldrb	r2, [r7, #3]
    42e4:	715a      	strb	r2, [r3, #5]
}
    42e6:	bf00      	nop
    42e8:	370c      	adds	r7, #12
    42ea:	46bd      	mov	sp, r7
    42ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    42f0:	4770      	bx	lr
	...

000042f4 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    42f4:	b580      	push	{r7, lr}
    42f6:	b082      	sub	sp, #8
    42f8:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    42fa:	4b05      	ldr	r3, [pc, #20]	; (4310 <_mclk_init+0x1c>)
    42fc:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    42fe:	2101      	movs	r1, #1
    4300:	6878      	ldr	r0, [r7, #4]
    4302:	4b04      	ldr	r3, [pc, #16]	; (4314 <_mclk_init+0x20>)
    4304:	4798      	blx	r3
}
    4306:	bf00      	nop
    4308:	3708      	adds	r7, #8
    430a:	46bd      	mov	sp, r7
    430c:	bd80      	pop	{r7, pc}
    430e:	bf00      	nop
    4310:	40000800 	.word	0x40000800
    4314:	000042d5 	.word	0x000042d5

00004318 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4318:	b480      	push	{r7}
    431a:	b083      	sub	sp, #12
    431c:	af00      	add	r7, sp, #0
    431e:	6078      	str	r0, [r7, #4]
    4320:	460b      	mov	r3, r1
    4322:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4324:	687b      	ldr	r3, [r7, #4]
    4326:	78fa      	ldrb	r2, [r7, #3]
    4328:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    432a:	bf00      	nop
    432c:	370c      	adds	r7, #12
    432e:	46bd      	mov	sp, r7
    4330:	f85d 7b04 	ldr.w	r7, [sp], #4
    4334:	4770      	bx	lr

00004336 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4336:	b480      	push	{r7}
    4338:	b083      	sub	sp, #12
    433a:	af00      	add	r7, sp, #0
    433c:	6078      	str	r0, [r7, #4]
    433e:	460b      	mov	r3, r1
    4340:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4342:	687b      	ldr	r3, [r7, #4]
    4344:	887a      	ldrh	r2, [r7, #2]
    4346:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4348:	bf00      	nop
    434a:	370c      	adds	r7, #12
    434c:	46bd      	mov	sp, r7
    434e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4352:	4770      	bx	lr

00004354 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4354:	b480      	push	{r7}
    4356:	b083      	sub	sp, #12
    4358:	af00      	add	r7, sp, #0
    435a:	6078      	str	r0, [r7, #4]
    435c:	460b      	mov	r3, r1
    435e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4360:	687b      	ldr	r3, [r7, #4]
    4362:	78fa      	ldrb	r2, [r7, #3]
    4364:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4366:	bf00      	nop
    4368:	370c      	adds	r7, #12
    436a:	46bd      	mov	sp, r7
    436c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4370:	4770      	bx	lr

00004372 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4372:	b480      	push	{r7}
    4374:	b083      	sub	sp, #12
    4376:	af00      	add	r7, sp, #0
    4378:	6078      	str	r0, [r7, #4]
    437a:	460b      	mov	r3, r1
    437c:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    437e:	687b      	ldr	r3, [r7, #4]
    4380:	78fa      	ldrb	r2, [r7, #3]
    4382:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4384:	bf00      	nop
    4386:	370c      	adds	r7, #12
    4388:	46bd      	mov	sp, r7
    438a:	f85d 7b04 	ldr.w	r7, [sp], #4
    438e:	4770      	bx	lr

00004390 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4390:	b480      	push	{r7}
    4392:	b085      	sub	sp, #20
    4394:	af00      	add	r7, sp, #0
    4396:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4398:	687b      	ldr	r3, [r7, #4]
    439a:	69db      	ldr	r3, [r3, #28]
    439c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    439e:	68fb      	ldr	r3, [r7, #12]
    43a0:	0a1b      	lsrs	r3, r3, #8
    43a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    43a6:	60fb      	str	r3, [r7, #12]
	return tmp;
    43a8:	68fb      	ldr	r3, [r7, #12]
}
    43aa:	4618      	mov	r0, r3
    43ac:	3714      	adds	r7, #20
    43ae:	46bd      	mov	sp, r7
    43b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    43b4:	4770      	bx	lr

000043b6 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    43b6:	b480      	push	{r7}
    43b8:	b083      	sub	sp, #12
    43ba:	af00      	add	r7, sp, #0
    43bc:	6078      	str	r0, [r7, #4]
    43be:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    43c0:	687b      	ldr	r3, [r7, #4]
    43c2:	683a      	ldr	r2, [r7, #0]
    43c4:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    43c6:	bf00      	nop
    43c8:	370c      	adds	r7, #12
    43ca:	46bd      	mov	sp, r7
    43cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    43d0:	4770      	bx	lr
	...

000043d4 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    43d4:	b580      	push	{r7, lr}
    43d6:	b082      	sub	sp, #8
    43d8:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    43da:	4b13      	ldr	r3, [pc, #76]	; (4428 <_osc32kctrl_init_sources+0x54>)
    43dc:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    43de:	2300      	movs	r3, #0
    43e0:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    43e2:	f242 018e 	movw	r1, #8334	; 0x208e
    43e6:	6878      	ldr	r0, [r7, #4]
    43e8:	4b10      	ldr	r3, [pc, #64]	; (442c <_osc32kctrl_init_sources+0x58>)
    43ea:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    43ec:	2100      	movs	r1, #0
    43ee:	6878      	ldr	r0, [r7, #4]
    43f0:	4b0f      	ldr	r3, [pc, #60]	; (4430 <_osc32kctrl_init_sources+0x5c>)
    43f2:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    43f4:	2100      	movs	r1, #0
    43f6:	6878      	ldr	r0, [r7, #4]
    43f8:	4b0e      	ldr	r3, [pc, #56]	; (4434 <_osc32kctrl_init_sources+0x60>)
    43fa:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    43fc:	6878      	ldr	r0, [r7, #4]
    43fe:	4b0e      	ldr	r3, [pc, #56]	; (4438 <_osc32kctrl_init_sources+0x64>)
    4400:	4798      	blx	r3
    4402:	4603      	mov	r3, r0
    4404:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4406:	887b      	ldrh	r3, [r7, #2]
    4408:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    440a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    440e:	4619      	mov	r1, r3
    4410:	6878      	ldr	r0, [r7, #4]
    4412:	4b0a      	ldr	r3, [pc, #40]	; (443c <_osc32kctrl_init_sources+0x68>)
    4414:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4416:	2100      	movs	r1, #0
    4418:	6878      	ldr	r0, [r7, #4]
    441a:	4b09      	ldr	r3, [pc, #36]	; (4440 <_osc32kctrl_init_sources+0x6c>)
    441c:	4798      	blx	r3
	(void)calib;
}
    441e:	bf00      	nop
    4420:	3708      	adds	r7, #8
    4422:	46bd      	mov	sp, r7
    4424:	bd80      	pop	{r7, pc}
    4426:	bf00      	nop
    4428:	40001400 	.word	0x40001400
    442c:	00004337 	.word	0x00004337
    4430:	00004355 	.word	0x00004355
    4434:	00004373 	.word	0x00004373
    4438:	00004391 	.word	0x00004391
    443c:	000043b7 	.word	0x000043b7
    4440:	00004319 	.word	0x00004319

00004444 <hri_gclk_wait_for_sync>:
{
    4444:	b480      	push	{r7}
    4446:	b083      	sub	sp, #12
    4448:	af00      	add	r7, sp, #0
    444a:	6078      	str	r0, [r7, #4]
    444c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    444e:	bf00      	nop
    4450:	687b      	ldr	r3, [r7, #4]
    4452:	685a      	ldr	r2, [r3, #4]
    4454:	683b      	ldr	r3, [r7, #0]
    4456:	4013      	ands	r3, r2
    4458:	2b00      	cmp	r3, #0
    445a:	d1f9      	bne.n	4450 <hri_gclk_wait_for_sync+0xc>
}
    445c:	bf00      	nop
    445e:	370c      	adds	r7, #12
    4460:	46bd      	mov	sp, r7
    4462:	f85d 7b04 	ldr.w	r7, [sp], #4
    4466:	4770      	bx	lr

00004468 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4468:	b480      	push	{r7}
    446a:	b083      	sub	sp, #12
    446c:	af00      	add	r7, sp, #0
    446e:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4470:	687b      	ldr	r3, [r7, #4]
    4472:	685b      	ldr	r3, [r3, #4]
    4474:	089b      	lsrs	r3, r3, #2
    4476:	f003 0301 	and.w	r3, r3, #1
    447a:	2b00      	cmp	r3, #0
    447c:	bf14      	ite	ne
    447e:	2301      	movne	r3, #1
    4480:	2300      	moveq	r3, #0
    4482:	b2db      	uxtb	r3, r3
}
    4484:	4618      	mov	r0, r3
    4486:	370c      	adds	r7, #12
    4488:	46bd      	mov	sp, r7
    448a:	f85d 7b04 	ldr.w	r7, [sp], #4
    448e:	4770      	bx	lr

00004490 <hri_gclk_read_SYNCBUSY_reg>:
{
    4490:	b480      	push	{r7}
    4492:	b083      	sub	sp, #12
    4494:	af00      	add	r7, sp, #0
    4496:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4498:	687b      	ldr	r3, [r7, #4]
    449a:	685b      	ldr	r3, [r3, #4]
}
    449c:	4618      	mov	r0, r3
    449e:	370c      	adds	r7, #12
    44a0:	46bd      	mov	sp, r7
    44a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    44a6:	4770      	bx	lr

000044a8 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    44a8:	b580      	push	{r7, lr}
    44aa:	b086      	sub	sp, #24
    44ac:	af00      	add	r7, sp, #0
    44ae:	60f8      	str	r0, [r7, #12]
    44b0:	460b      	mov	r3, r1
    44b2:	607a      	str	r2, [r7, #4]
    44b4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    44b6:	7afa      	ldrb	r2, [r7, #11]
    44b8:	68fb      	ldr	r3, [r7, #12]
    44ba:	3208      	adds	r2, #8
    44bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    44c0:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    44c2:	697b      	ldr	r3, [r7, #20]
    44c4:	f023 030f 	bic.w	r3, r3, #15
    44c8:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    44ca:	687b      	ldr	r3, [r7, #4]
    44cc:	f003 030f 	and.w	r3, r3, #15
    44d0:	697a      	ldr	r2, [r7, #20]
    44d2:	4313      	orrs	r3, r2
    44d4:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    44d6:	7afa      	ldrb	r2, [r7, #11]
    44d8:	68fb      	ldr	r3, [r7, #12]
    44da:	3208      	adds	r2, #8
    44dc:	6979      	ldr	r1, [r7, #20]
    44de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    44e2:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    44e6:	68f8      	ldr	r0, [r7, #12]
    44e8:	4b02      	ldr	r3, [pc, #8]	; (44f4 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    44ea:	4798      	blx	r3
}
    44ec:	bf00      	nop
    44ee:	3718      	adds	r7, #24
    44f0:	46bd      	mov	sp, r7
    44f2:	bd80      	pop	{r7, pc}
    44f4:	00004445 	.word	0x00004445

000044f8 <hri_gclk_write_PCHCTRL_reg>:
{
    44f8:	b480      	push	{r7}
    44fa:	b085      	sub	sp, #20
    44fc:	af00      	add	r7, sp, #0
    44fe:	60f8      	str	r0, [r7, #12]
    4500:	460b      	mov	r3, r1
    4502:	607a      	str	r2, [r7, #4]
    4504:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4506:	7afa      	ldrb	r2, [r7, #11]
    4508:	68fb      	ldr	r3, [r7, #12]
    450a:	3220      	adds	r2, #32
    450c:	6879      	ldr	r1, [r7, #4]
    450e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4512:	bf00      	nop
    4514:	3714      	adds	r7, #20
    4516:	46bd      	mov	sp, r7
    4518:	f85d 7b04 	ldr.w	r7, [sp], #4
    451c:	4770      	bx	lr

0000451e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    451e:	b480      	push	{r7}
    4520:	b085      	sub	sp, #20
    4522:	af00      	add	r7, sp, #0
    4524:	60f8      	str	r0, [r7, #12]
    4526:	460b      	mov	r3, r1
    4528:	607a      	str	r2, [r7, #4]
    452a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    452c:	bf00      	nop
    452e:	7afa      	ldrb	r2, [r7, #11]
    4530:	68f9      	ldr	r1, [r7, #12]
    4532:	4613      	mov	r3, r2
    4534:	009b      	lsls	r3, r3, #2
    4536:	4413      	add	r3, r2
    4538:	009b      	lsls	r3, r3, #2
    453a:	440b      	add	r3, r1
    453c:	333c      	adds	r3, #60	; 0x3c
    453e:	681a      	ldr	r2, [r3, #0]
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	4013      	ands	r3, r2
    4544:	2b00      	cmp	r3, #0
    4546:	d1f2      	bne.n	452e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4548:	bf00      	nop
    454a:	3714      	adds	r7, #20
    454c:	46bd      	mov	sp, r7
    454e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4552:	4770      	bx	lr

00004554 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4554:	b480      	push	{r7}
    4556:	b083      	sub	sp, #12
    4558:	af00      	add	r7, sp, #0
    455a:	6078      	str	r0, [r7, #4]
    455c:	460b      	mov	r3, r1
    455e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4560:	78fa      	ldrb	r2, [r7, #3]
    4562:	6879      	ldr	r1, [r7, #4]
    4564:	4613      	mov	r3, r2
    4566:	009b      	lsls	r3, r3, #2
    4568:	4413      	add	r3, r2
    456a:	009b      	lsls	r3, r3, #2
    456c:	440b      	add	r3, r1
    456e:	3340      	adds	r3, #64	; 0x40
    4570:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4572:	f003 0301 	and.w	r3, r3, #1
    4576:	2b00      	cmp	r3, #0
    4578:	bf14      	ite	ne
    457a:	2301      	movne	r3, #1
    457c:	2300      	moveq	r3, #0
    457e:	b2db      	uxtb	r3, r3
}
    4580:	4618      	mov	r0, r3
    4582:	370c      	adds	r7, #12
    4584:	46bd      	mov	sp, r7
    4586:	f85d 7b04 	ldr.w	r7, [sp], #4
    458a:	4770      	bx	lr

0000458c <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    458c:	b480      	push	{r7}
    458e:	b083      	sub	sp, #12
    4590:	af00      	add	r7, sp, #0
    4592:	6078      	str	r0, [r7, #4]
    4594:	460b      	mov	r3, r1
    4596:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4598:	78fa      	ldrb	r2, [r7, #3]
    459a:	6879      	ldr	r1, [r7, #4]
    459c:	4613      	mov	r3, r2
    459e:	009b      	lsls	r3, r3, #2
    45a0:	4413      	add	r3, r2
    45a2:	009b      	lsls	r3, r3, #2
    45a4:	440b      	add	r3, r1
    45a6:	3340      	adds	r3, #64	; 0x40
    45a8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    45aa:	085b      	lsrs	r3, r3, #1
    45ac:	f003 0301 	and.w	r3, r3, #1
    45b0:	2b00      	cmp	r3, #0
    45b2:	bf14      	ite	ne
    45b4:	2301      	movne	r3, #1
    45b6:	2300      	moveq	r3, #0
    45b8:	b2db      	uxtb	r3, r3
}
    45ba:	4618      	mov	r0, r3
    45bc:	370c      	adds	r7, #12
    45be:	46bd      	mov	sp, r7
    45c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    45c4:	4770      	bx	lr
	...

000045c8 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    45c8:	b580      	push	{r7, lr}
    45ca:	b082      	sub	sp, #8
    45cc:	af00      	add	r7, sp, #0
    45ce:	6078      	str	r0, [r7, #4]
    45d0:	460b      	mov	r3, r1
    45d2:	70fb      	strb	r3, [r7, #3]
    45d4:	4613      	mov	r3, r2
    45d6:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    45d8:	78fa      	ldrb	r2, [r7, #3]
    45da:	6879      	ldr	r1, [r7, #4]
    45dc:	4613      	mov	r3, r2
    45de:	009b      	lsls	r3, r3, #2
    45e0:	4413      	add	r3, r2
    45e2:	009b      	lsls	r3, r3, #2
    45e4:	440b      	add	r3, r1
    45e6:	3330      	adds	r3, #48	; 0x30
    45e8:	78ba      	ldrb	r2, [r7, #2]
    45ea:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    45ec:	78fb      	ldrb	r3, [r7, #3]
    45ee:	2202      	movs	r2, #2
    45f0:	4619      	mov	r1, r3
    45f2:	6878      	ldr	r0, [r7, #4]
    45f4:	4b02      	ldr	r3, [pc, #8]	; (4600 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    45f6:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    45f8:	bf00      	nop
    45fa:	3708      	adds	r7, #8
    45fc:	46bd      	mov	sp, r7
    45fe:	bd80      	pop	{r7, pc}
    4600:	0000451f 	.word	0x0000451f

00004604 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    4604:	b580      	push	{r7, lr}
    4606:	b084      	sub	sp, #16
    4608:	af00      	add	r7, sp, #0
    460a:	60f8      	str	r0, [r7, #12]
    460c:	460b      	mov	r3, r1
    460e:	607a      	str	r2, [r7, #4]
    4610:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4612:	7afa      	ldrb	r2, [r7, #11]
    4614:	68f9      	ldr	r1, [r7, #12]
    4616:	4613      	mov	r3, r2
    4618:	009b      	lsls	r3, r3, #2
    461a:	4413      	add	r3, r2
    461c:	009b      	lsls	r3, r3, #2
    461e:	440b      	add	r3, r1
    4620:	3334      	adds	r3, #52	; 0x34
    4622:	687a      	ldr	r2, [r7, #4]
    4624:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4626:	7afb      	ldrb	r3, [r7, #11]
    4628:	2206      	movs	r2, #6
    462a:	4619      	mov	r1, r3
    462c:	68f8      	ldr	r0, [r7, #12]
    462e:	4b03      	ldr	r3, [pc, #12]	; (463c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4630:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4632:	bf00      	nop
    4634:	3710      	adds	r7, #16
    4636:	46bd      	mov	sp, r7
    4638:	bd80      	pop	{r7, pc}
    463a:	bf00      	nop
    463c:	0000451f 	.word	0x0000451f

00004640 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4640:	b480      	push	{r7}
    4642:	b085      	sub	sp, #20
    4644:	af00      	add	r7, sp, #0
    4646:	60f8      	str	r0, [r7, #12]
    4648:	460b      	mov	r3, r1
    464a:	607a      	str	r2, [r7, #4]
    464c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    464e:	7afa      	ldrb	r2, [r7, #11]
    4650:	68f9      	ldr	r1, [r7, #12]
    4652:	4613      	mov	r3, r2
    4654:	009b      	lsls	r3, r3, #2
    4656:	4413      	add	r3, r2
    4658:	009b      	lsls	r3, r3, #2
    465a:	440b      	add	r3, r1
    465c:	3338      	adds	r3, #56	; 0x38
    465e:	687a      	ldr	r2, [r7, #4]
    4660:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4662:	bf00      	nop
    4664:	3714      	adds	r7, #20
    4666:	46bd      	mov	sp, r7
    4668:	f85d 7b04 	ldr.w	r7, [sp], #4
    466c:	4770      	bx	lr

0000466e <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    466e:	b480      	push	{r7}
    4670:	b083      	sub	sp, #12
    4672:	af00      	add	r7, sp, #0
    4674:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	691b      	ldr	r3, [r3, #16]
    467a:	085b      	lsrs	r3, r3, #1
    467c:	f003 0301 	and.w	r3, r3, #1
    4680:	2b00      	cmp	r3, #0
    4682:	bf14      	ite	ne
    4684:	2301      	movne	r3, #1
    4686:	2300      	moveq	r3, #0
    4688:	b2db      	uxtb	r3, r3
}
    468a:	4618      	mov	r0, r3
    468c:	370c      	adds	r7, #12
    468e:	46bd      	mov	sp, r7
    4690:	f85d 7b04 	ldr.w	r7, [sp], #4
    4694:	4770      	bx	lr

00004696 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4696:	b480      	push	{r7}
    4698:	b083      	sub	sp, #12
    469a:	af00      	add	r7, sp, #0
    469c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    469e:	687b      	ldr	r3, [r7, #4]
    46a0:	691b      	ldr	r3, [r3, #16]
    46a2:	0a1b      	lsrs	r3, r3, #8
    46a4:	f003 0301 	and.w	r3, r3, #1
    46a8:	2b00      	cmp	r3, #0
    46aa:	bf14      	ite	ne
    46ac:	2301      	movne	r3, #1
    46ae:	2300      	moveq	r3, #0
    46b0:	b2db      	uxtb	r3, r3
}
    46b2:	4618      	mov	r0, r3
    46b4:	370c      	adds	r7, #12
    46b6:	46bd      	mov	sp, r7
    46b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    46bc:	4770      	bx	lr

000046be <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    46be:	b480      	push	{r7}
    46c0:	b085      	sub	sp, #20
    46c2:	af00      	add	r7, sp, #0
    46c4:	6078      	str	r0, [r7, #4]
    46c6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    46c8:	687b      	ldr	r3, [r7, #4]
    46ca:	691b      	ldr	r3, [r3, #16]
    46cc:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    46ce:	68fa      	ldr	r2, [r7, #12]
    46d0:	683b      	ldr	r3, [r7, #0]
    46d2:	4013      	ands	r3, r2
    46d4:	60fb      	str	r3, [r7, #12]
	return tmp;
    46d6:	68fb      	ldr	r3, [r7, #12]
}
    46d8:	4618      	mov	r0, r3
    46da:	3714      	adds	r7, #20
    46dc:	46bd      	mov	sp, r7
    46de:	f85d 7b04 	ldr.w	r7, [sp], #4
    46e2:	4770      	bx	lr

000046e4 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    46e4:	b480      	push	{r7}
    46e6:	b085      	sub	sp, #20
    46e8:	af00      	add	r7, sp, #0
    46ea:	60f8      	str	r0, [r7, #12]
    46ec:	460b      	mov	r3, r1
    46ee:	607a      	str	r2, [r7, #4]
    46f0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    46f2:	7afb      	ldrb	r3, [r7, #11]
    46f4:	68fa      	ldr	r2, [r7, #12]
    46f6:	3304      	adds	r3, #4
    46f8:	009b      	lsls	r3, r3, #2
    46fa:	4413      	add	r3, r2
    46fc:	687a      	ldr	r2, [r7, #4]
    46fe:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4700:	bf00      	nop
    4702:	3714      	adds	r7, #20
    4704:	46bd      	mov	sp, r7
    4706:	f85d 7b04 	ldr.w	r7, [sp], #4
    470a:	4770      	bx	lr

0000470c <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    470c:	b480      	push	{r7}
    470e:	b083      	sub	sp, #12
    4710:	af00      	add	r7, sp, #0
    4712:	6078      	str	r0, [r7, #4]
    4714:	460b      	mov	r3, r1
    4716:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4718:	687b      	ldr	r3, [r7, #4]
    471a:	78fa      	ldrb	r2, [r7, #3]
    471c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    471e:	bf00      	nop
    4720:	370c      	adds	r7, #12
    4722:	46bd      	mov	sp, r7
    4724:	f85d 7b04 	ldr.w	r7, [sp], #4
    4728:	4770      	bx	lr

0000472a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    472a:	b480      	push	{r7}
    472c:	b085      	sub	sp, #20
    472e:	af00      	add	r7, sp, #0
    4730:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4732:	687b      	ldr	r3, [r7, #4]
    4734:	f893 3020 	ldrb.w	r3, [r3, #32]
    4738:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    473a:	7bfb      	ldrb	r3, [r7, #15]
    473c:	f003 0301 	and.w	r3, r3, #1
    4740:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4742:	7bfb      	ldrb	r3, [r7, #15]
    4744:	2b00      	cmp	r3, #0
    4746:	bf14      	ite	ne
    4748:	2301      	movne	r3, #1
    474a:	2300      	moveq	r3, #0
    474c:	b2db      	uxtb	r3, r3
}
    474e:	4618      	mov	r0, r3
    4750:	3714      	adds	r7, #20
    4752:	46bd      	mov	sp, r7
    4754:	f85d 7b04 	ldr.w	r7, [sp], #4
    4758:	4770      	bx	lr

0000475a <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    475a:	b480      	push	{r7}
    475c:	b083      	sub	sp, #12
    475e:	af00      	add	r7, sp, #0
    4760:	6078      	str	r0, [r7, #4]
    4762:	460b      	mov	r3, r1
    4764:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4766:	687b      	ldr	r3, [r7, #4]
    4768:	78fa      	ldrb	r2, [r7, #3]
    476a:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    476e:	bf00      	nop
    4770:	370c      	adds	r7, #12
    4772:	46bd      	mov	sp, r7
    4774:	f85d 7b04 	ldr.w	r7, [sp], #4
    4778:	4770      	bx	lr

0000477a <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    477a:	b480      	push	{r7}
    477c:	b083      	sub	sp, #12
    477e:	af00      	add	r7, sp, #0
    4780:	6078      	str	r0, [r7, #4]
    4782:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4784:	687b      	ldr	r3, [r7, #4]
    4786:	683a      	ldr	r2, [r7, #0]
    4788:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    478a:	bf00      	nop
    478c:	370c      	adds	r7, #12
    478e:	46bd      	mov	sp, r7
    4790:	f85d 7b04 	ldr.w	r7, [sp], #4
    4794:	4770      	bx	lr

00004796 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    4796:	b480      	push	{r7}
    4798:	b083      	sub	sp, #12
    479a:	af00      	add	r7, sp, #0
    479c:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    479e:	687b      	ldr	r3, [r7, #4]
    47a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    47a2:	4618      	mov	r0, r3
    47a4:	370c      	adds	r7, #12
    47a6:	46bd      	mov	sp, r7
    47a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    47ac:	4770      	bx	lr

000047ae <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    47ae:	b480      	push	{r7}
    47b0:	b083      	sub	sp, #12
    47b2:	af00      	add	r7, sp, #0
    47b4:	6078      	str	r0, [r7, #4]
    47b6:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    47b8:	687b      	ldr	r3, [r7, #4]
    47ba:	683a      	ldr	r2, [r7, #0]
    47bc:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    47be:	bf00      	nop
    47c0:	370c      	adds	r7, #12
    47c2:	46bd      	mov	sp, r7
    47c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47c8:	4770      	bx	lr

000047ca <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    47ca:	b480      	push	{r7}
    47cc:	b085      	sub	sp, #20
    47ce:	af00      	add	r7, sp, #0
    47d0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    47d2:	687b      	ldr	r3, [r7, #4]
    47d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    47d8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    47da:	7bfb      	ldrb	r3, [r7, #15]
    47dc:	085b      	lsrs	r3, r3, #1
    47de:	b2db      	uxtb	r3, r3
    47e0:	f003 0301 	and.w	r3, r3, #1
    47e4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    47e6:	7bfb      	ldrb	r3, [r7, #15]
    47e8:	2b00      	cmp	r3, #0
    47ea:	bf14      	ite	ne
    47ec:	2301      	movne	r3, #1
    47ee:	2300      	moveq	r3, #0
    47f0:	b2db      	uxtb	r3, r3
}
    47f2:	4618      	mov	r0, r3
    47f4:	3714      	adds	r7, #20
    47f6:	46bd      	mov	sp, r7
    47f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    47fc:	4770      	bx	lr

000047fe <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    47fe:	b480      	push	{r7}
    4800:	b085      	sub	sp, #20
    4802:	af00      	add	r7, sp, #0
    4804:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4806:	687b      	ldr	r3, [r7, #4]
    4808:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    480c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    480e:	7bfb      	ldrb	r3, [r7, #15]
    4810:	089b      	lsrs	r3, r3, #2
    4812:	b2db      	uxtb	r3, r3
    4814:	f003 0301 	and.w	r3, r3, #1
    4818:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    481a:	7bfb      	ldrb	r3, [r7, #15]
    481c:	2b00      	cmp	r3, #0
    481e:	bf14      	ite	ne
    4820:	2301      	movne	r3, #1
    4822:	2300      	moveq	r3, #0
    4824:	b2db      	uxtb	r3, r3
}
    4826:	4618      	mov	r0, r3
    4828:	3714      	adds	r7, #20
    482a:	46bd      	mov	sp, r7
    482c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4830:	4770      	bx	lr

00004832 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    4832:	b480      	push	{r7}
    4834:	b085      	sub	sp, #20
    4836:	af00      	add	r7, sp, #0
    4838:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    483a:	687b      	ldr	r3, [r7, #4]
    483c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4840:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    4842:	7bfb      	ldrb	r3, [r7, #15]
    4844:	08db      	lsrs	r3, r3, #3
    4846:	b2db      	uxtb	r3, r3
    4848:	f003 0301 	and.w	r3, r3, #1
    484c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    484e:	7bfb      	ldrb	r3, [r7, #15]
    4850:	2b00      	cmp	r3, #0
    4852:	bf14      	ite	ne
    4854:	2301      	movne	r3, #1
    4856:	2300      	moveq	r3, #0
    4858:	b2db      	uxtb	r3, r3
}
    485a:	4618      	mov	r0, r3
    485c:	3714      	adds	r7, #20
    485e:	46bd      	mov	sp, r7
    4860:	f85d 7b04 	ldr.w	r7, [sp], #4
    4864:	4770      	bx	lr

00004866 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    4866:	b480      	push	{r7}
    4868:	b085      	sub	sp, #20
    486a:	af00      	add	r7, sp, #0
    486c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    486e:	687b      	ldr	r3, [r7, #4]
    4870:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4874:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    4876:	7bfb      	ldrb	r3, [r7, #15]
    4878:	091b      	lsrs	r3, r3, #4
    487a:	b2db      	uxtb	r3, r3
    487c:	f003 0301 	and.w	r3, r3, #1
    4880:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4882:	7bfb      	ldrb	r3, [r7, #15]
    4884:	2b00      	cmp	r3, #0
    4886:	bf14      	ite	ne
    4888:	2301      	movne	r3, #1
    488a:	2300      	moveq	r3, #0
    488c:	b2db      	uxtb	r3, r3
}
    488e:	4618      	mov	r0, r3
    4890:	3714      	adds	r7, #20
    4892:	46bd      	mov	sp, r7
    4894:	f85d 7b04 	ldr.w	r7, [sp], #4
    4898:	4770      	bx	lr
	...

0000489c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    489c:	b580      	push	{r7, lr}
    489e:	b082      	sub	sp, #8
    48a0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    48a2:	4b0a      	ldr	r3, [pc, #40]	; (48cc <_oscctrl_init_sources+0x30>)
    48a4:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    48a6:	4a0a      	ldr	r2, [pc, #40]	; (48d0 <_oscctrl_init_sources+0x34>)
    48a8:	2101      	movs	r1, #1
    48aa:	6878      	ldr	r0, [r7, #4]
    48ac:	4b09      	ldr	r3, [pc, #36]	; (48d4 <_oscctrl_init_sources+0x38>)
    48ae:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    48b0:	bf00      	nop
    48b2:	6878      	ldr	r0, [r7, #4]
    48b4:	4b08      	ldr	r3, [pc, #32]	; (48d8 <_oscctrl_init_sources+0x3c>)
    48b6:	4798      	blx	r3
    48b8:	4603      	mov	r3, r0
    48ba:	f083 0301 	eor.w	r3, r3, #1
    48be:	b2db      	uxtb	r3, r3
    48c0:	2b00      	cmp	r3, #0
    48c2:	d1f6      	bne.n	48b2 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    48c4:	bf00      	nop
    48c6:	3708      	adds	r7, #8
    48c8:	46bd      	mov	sp, r7
    48ca:	bd80      	pop	{r7, pc}
    48cc:	40001000 	.word	0x40001000
    48d0:	03002646 	.word	0x03002646
    48d4:	000046e5 	.word	0x000046e5
    48d8:	0000466f 	.word	0x0000466f

000048dc <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    48dc:	b580      	push	{r7, lr}
    48de:	b084      	sub	sp, #16
    48e0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    48e2:	4b6b      	ldr	r3, [pc, #428]	; (4a90 <_oscctrl_init_referenced_generators+0x1b4>)
    48e4:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    48e6:	2204      	movs	r2, #4
    48e8:	2100      	movs	r1, #0
    48ea:	486a      	ldr	r0, [pc, #424]	; (4a94 <_oscctrl_init_referenced_generators+0x1b8>)
    48ec:	4b6a      	ldr	r3, [pc, #424]	; (4a98 <_oscctrl_init_referenced_generators+0x1bc>)
    48ee:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    48f0:	bf00      	nop
    48f2:	4868      	ldr	r0, [pc, #416]	; (4a94 <_oscctrl_init_referenced_generators+0x1b8>)
    48f4:	4b69      	ldr	r3, [pc, #420]	; (4a9c <_oscctrl_init_referenced_generators+0x1c0>)
    48f6:	4798      	blx	r3
    48f8:	4603      	mov	r3, r0
    48fa:	2b00      	cmp	r3, #0
    48fc:	d1f9      	bne.n	48f2 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    48fe:	2100      	movs	r1, #0
    4900:	68f8      	ldr	r0, [r7, #12]
    4902:	4b67      	ldr	r3, [pc, #412]	; (4aa0 <_oscctrl_init_referenced_generators+0x1c4>)
    4904:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    4906:	4967      	ldr	r1, [pc, #412]	; (4aa4 <_oscctrl_init_referenced_generators+0x1c8>)
    4908:	68f8      	ldr	r0, [r7, #12]
    490a:	4b67      	ldr	r3, [pc, #412]	; (4aa8 <_oscctrl_init_referenced_generators+0x1cc>)
    490c:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    490e:	bf00      	nop
    4910:	68f8      	ldr	r0, [r7, #12]
    4912:	4b66      	ldr	r3, [pc, #408]	; (4aac <_oscctrl_init_referenced_generators+0x1d0>)
    4914:	4798      	blx	r3
    4916:	4603      	mov	r3, r0
    4918:	2b00      	cmp	r3, #0
    491a:	d1f9      	bne.n	4910 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    491c:	2100      	movs	r1, #0
    491e:	68f8      	ldr	r0, [r7, #12]
    4920:	4b63      	ldr	r3, [pc, #396]	; (4ab0 <_oscctrl_init_referenced_generators+0x1d4>)
    4922:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4924:	bf00      	nop
    4926:	68f8      	ldr	r0, [r7, #12]
    4928:	4b62      	ldr	r3, [pc, #392]	; (4ab4 <_oscctrl_init_referenced_generators+0x1d8>)
    492a:	4798      	blx	r3
    492c:	4603      	mov	r3, r0
    492e:	2b00      	cmp	r3, #0
    4930:	d1f9      	bne.n	4926 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    4932:	2302      	movs	r3, #2
    4934:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    4936:	7afb      	ldrb	r3, [r7, #11]
    4938:	4619      	mov	r1, r3
    493a:	68f8      	ldr	r0, [r7, #12]
    493c:	4b58      	ldr	r3, [pc, #352]	; (4aa0 <_oscctrl_init_referenced_generators+0x1c4>)
    493e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    4940:	bf00      	nop
    4942:	68f8      	ldr	r0, [r7, #12]
    4944:	4b5c      	ldr	r3, [pc, #368]	; (4ab8 <_oscctrl_init_referenced_generators+0x1dc>)
    4946:	4798      	blx	r3
    4948:	4603      	mov	r3, r0
    494a:	2b00      	cmp	r3, #0
    494c:	d1f9      	bne.n	4942 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    494e:	68f8      	ldr	r0, [r7, #12]
    4950:	4b5a      	ldr	r3, [pc, #360]	; (4abc <_oscctrl_init_referenced_generators+0x1e0>)
    4952:	4798      	blx	r3
    4954:	4603      	mov	r3, r0
    4956:	4619      	mov	r1, r3
    4958:	68f8      	ldr	r0, [r7, #12]
    495a:	4b59      	ldr	r3, [pc, #356]	; (4ac0 <_oscctrl_init_referenced_generators+0x1e4>)
    495c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    495e:	bf00      	nop
    4960:	68f8      	ldr	r0, [r7, #12]
    4962:	4b58      	ldr	r3, [pc, #352]	; (4ac4 <_oscctrl_init_referenced_generators+0x1e8>)
    4964:	4798      	blx	r3
    4966:	4603      	mov	r3, r0
    4968:	2b00      	cmp	r3, #0
    496a:	d1f9      	bne.n	4960 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    496c:	2319      	movs	r3, #25
    496e:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    4970:	7afb      	ldrb	r3, [r7, #11]
    4972:	4619      	mov	r1, r3
    4974:	68f8      	ldr	r0, [r7, #12]
    4976:	4b4e      	ldr	r3, [pc, #312]	; (4ab0 <_oscctrl_init_referenced_generators+0x1d4>)
    4978:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    497a:	bf00      	nop
    497c:	68f8      	ldr	r0, [r7, #12]
    497e:	4b4d      	ldr	r3, [pc, #308]	; (4ab4 <_oscctrl_init_referenced_generators+0x1d8>)
    4980:	4798      	blx	r3
    4982:	4603      	mov	r3, r0
    4984:	2b00      	cmp	r3, #0
    4986:	d1f9      	bne.n	497c <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    4988:	2245      	movs	r2, #69	; 0x45
    498a:	2101      	movs	r1, #1
    498c:	4841      	ldr	r0, [pc, #260]	; (4a94 <_oscctrl_init_referenced_generators+0x1b8>)
    498e:	4b4e      	ldr	r3, [pc, #312]	; (4ac8 <_oscctrl_init_referenced_generators+0x1ec>)
    4990:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4992:	223b      	movs	r2, #59	; 0x3b
    4994:	2100      	movs	r1, #0
    4996:	68f8      	ldr	r0, [r7, #12]
    4998:	4b4c      	ldr	r3, [pc, #304]	; (4acc <_oscctrl_init_referenced_generators+0x1f0>)
    499a:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    499c:	f44f 6201 	mov.w	r2, #2064	; 0x810
    49a0:	2100      	movs	r1, #0
    49a2:	68f8      	ldr	r0, [r7, #12]
    49a4:	4b4a      	ldr	r3, [pc, #296]	; (4ad0 <_oscctrl_init_referenced_generators+0x1f4>)
    49a6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    49a8:	2242      	movs	r2, #66	; 0x42
    49aa:	2100      	movs	r1, #0
    49ac:	68f8      	ldr	r0, [r7, #12]
    49ae:	4b49      	ldr	r3, [pc, #292]	; (4ad4 <_oscctrl_init_referenced_generators+0x1f8>)
    49b0:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    49b2:	4a49      	ldr	r2, [pc, #292]	; (4ad8 <_oscctrl_init_referenced_generators+0x1fc>)
    49b4:	2101      	movs	r1, #1
    49b6:	68f8      	ldr	r0, [r7, #12]
    49b8:	4b44      	ldr	r3, [pc, #272]	; (4acc <_oscctrl_init_referenced_generators+0x1f0>)
    49ba:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    49bc:	f44f 6203 	mov.w	r2, #2096	; 0x830
    49c0:	2101      	movs	r1, #1
    49c2:	68f8      	ldr	r0, [r7, #12]
    49c4:	4b42      	ldr	r3, [pc, #264]	; (4ad0 <_oscctrl_init_referenced_generators+0x1f4>)
    49c6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    49c8:	2202      	movs	r2, #2
    49ca:	2101      	movs	r1, #1
    49cc:	68f8      	ldr	r0, [r7, #12]
    49ce:	4b41      	ldr	r3, [pc, #260]	; (4ad4 <_oscctrl_init_referenced_generators+0x1f8>)
    49d0:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    49d2:	68f8      	ldr	r0, [r7, #12]
    49d4:	4b41      	ldr	r3, [pc, #260]	; (4adc <_oscctrl_init_referenced_generators+0x200>)
    49d6:	4798      	blx	r3
    49d8:	4603      	mov	r3, r0
    49da:	2b00      	cmp	r3, #0
    49dc:	d00c      	beq.n	49f8 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    49de:	f44f 6310 	mov.w	r3, #2304	; 0x900
    49e2:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    49e4:	bf00      	nop
    49e6:	6879      	ldr	r1, [r7, #4]
    49e8:	68f8      	ldr	r0, [r7, #12]
    49ea:	4b3d      	ldr	r3, [pc, #244]	; (4ae0 <_oscctrl_init_referenced_generators+0x204>)
    49ec:	4798      	blx	r3
    49ee:	4602      	mov	r2, r0
    49f0:	687b      	ldr	r3, [r7, #4]
    49f2:	429a      	cmp	r2, r3
    49f4:	d1f7      	bne.n	49e6 <_oscctrl_init_referenced_generators+0x10a>
    49f6:	e009      	b.n	4a0c <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    49f8:	bf00      	nop
    49fa:	68f8      	ldr	r0, [r7, #12]
    49fc:	4b39      	ldr	r3, [pc, #228]	; (4ae4 <_oscctrl_init_referenced_generators+0x208>)
    49fe:	4798      	blx	r3
    4a00:	4603      	mov	r3, r0
    4a02:	f083 0301 	eor.w	r3, r3, #1
    4a06:	b2db      	uxtb	r3, r3
    4a08:	2b00      	cmp	r3, #0
    4a0a:	d1f6      	bne.n	49fa <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    4a0c:	bf00      	nop
    4a0e:	2100      	movs	r1, #0
    4a10:	68f8      	ldr	r0, [r7, #12]
    4a12:	4b35      	ldr	r3, [pc, #212]	; (4ae8 <_oscctrl_init_referenced_generators+0x20c>)
    4a14:	4798      	blx	r3
    4a16:	4603      	mov	r3, r0
    4a18:	f083 0301 	eor.w	r3, r3, #1
    4a1c:	b2db      	uxtb	r3, r3
    4a1e:	2b00      	cmp	r3, #0
    4a20:	d009      	beq.n	4a36 <_oscctrl_init_referenced_generators+0x15a>
    4a22:	2100      	movs	r1, #0
    4a24:	68f8      	ldr	r0, [r7, #12]
    4a26:	4b31      	ldr	r3, [pc, #196]	; (4aec <_oscctrl_init_referenced_generators+0x210>)
    4a28:	4798      	blx	r3
    4a2a:	4603      	mov	r3, r0
    4a2c:	f083 0301 	eor.w	r3, r3, #1
    4a30:	b2db      	uxtb	r3, r3
    4a32:	2b00      	cmp	r3, #0
    4a34:	d1eb      	bne.n	4a0e <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    4a36:	bf00      	nop
    4a38:	2101      	movs	r1, #1
    4a3a:	68f8      	ldr	r0, [r7, #12]
    4a3c:	4b2a      	ldr	r3, [pc, #168]	; (4ae8 <_oscctrl_init_referenced_generators+0x20c>)
    4a3e:	4798      	blx	r3
    4a40:	4603      	mov	r3, r0
    4a42:	f083 0301 	eor.w	r3, r3, #1
    4a46:	b2db      	uxtb	r3, r3
    4a48:	2b00      	cmp	r3, #0
    4a4a:	d009      	beq.n	4a60 <_oscctrl_init_referenced_generators+0x184>
    4a4c:	2101      	movs	r1, #1
    4a4e:	68f8      	ldr	r0, [r7, #12]
    4a50:	4b26      	ldr	r3, [pc, #152]	; (4aec <_oscctrl_init_referenced_generators+0x210>)
    4a52:	4798      	blx	r3
    4a54:	4603      	mov	r3, r0
    4a56:	f083 0301 	eor.w	r3, r3, #1
    4a5a:	b2db      	uxtb	r3, r3
    4a5c:	2b00      	cmp	r3, #0
    4a5e:	d1eb      	bne.n	4a38 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    4a60:	bf00      	nop
    4a62:	480c      	ldr	r0, [pc, #48]	; (4a94 <_oscctrl_init_referenced_generators+0x1b8>)
    4a64:	4b22      	ldr	r3, [pc, #136]	; (4af0 <_oscctrl_init_referenced_generators+0x214>)
    4a66:	4798      	blx	r3
    4a68:	4603      	mov	r3, r0
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	d1f9      	bne.n	4a62 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    4a6e:	2207      	movs	r2, #7
    4a70:	2100      	movs	r1, #0
    4a72:	4808      	ldr	r0, [pc, #32]	; (4a94 <_oscctrl_init_referenced_generators+0x1b8>)
    4a74:	4b08      	ldr	r3, [pc, #32]	; (4a98 <_oscctrl_init_referenced_generators+0x1bc>)
    4a76:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4a78:	bf00      	nop
    4a7a:	4806      	ldr	r0, [pc, #24]	; (4a94 <_oscctrl_init_referenced_generators+0x1b8>)
    4a7c:	4b07      	ldr	r3, [pc, #28]	; (4a9c <_oscctrl_init_referenced_generators+0x1c0>)
    4a7e:	4798      	blx	r3
    4a80:	4603      	mov	r3, r0
    4a82:	2b00      	cmp	r3, #0
    4a84:	d1f9      	bne.n	4a7a <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    4a86:	bf00      	nop
    4a88:	3710      	adds	r7, #16
    4a8a:	46bd      	mov	sp, r7
    4a8c:	bd80      	pop	{r7, pc}
    4a8e:	bf00      	nop
    4a90:	40001000 	.word	0x40001000
    4a94:	40001c00 	.word	0x40001c00
    4a98:	000044a9 	.word	0x000044a9
    4a9c:	00004469 	.word	0x00004469
    4aa0:	0000470d 	.word	0x0000470d
    4aa4:	0401bb80 	.word	0x0401bb80
    4aa8:	000047af 	.word	0x000047af
    4aac:	00004867 	.word	0x00004867
    4ab0:	0000475b 	.word	0x0000475b
    4ab4:	000047ff 	.word	0x000047ff
    4ab8:	000047cb 	.word	0x000047cb
    4abc:	00004797 	.word	0x00004797
    4ac0:	0000477b 	.word	0x0000477b
    4ac4:	00004833 	.word	0x00004833
    4ac8:	000044f9 	.word	0x000044f9
    4acc:	00004605 	.word	0x00004605
    4ad0:	00004641 	.word	0x00004641
    4ad4:	000045c9 	.word	0x000045c9
    4ad8:	000407a0 	.word	0x000407a0
    4adc:	0000472b 	.word	0x0000472b
    4ae0:	000046bf 	.word	0x000046bf
    4ae4:	00004697 	.word	0x00004697
    4ae8:	00004555 	.word	0x00004555
    4aec:	0000458d 	.word	0x0000458d
    4af0:	00004491 	.word	0x00004491

00004af4 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    4af4:	b480      	push	{r7}
    4af6:	b083      	sub	sp, #12
    4af8:	af00      	add	r7, sp, #0
    4afa:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    4afc:	687b      	ldr	r3, [r7, #4]
    4afe:	69db      	ldr	r3, [r3, #28]
    4b00:	0a9b      	lsrs	r3, r3, #10
    4b02:	f003 0301 	and.w	r3, r3, #1
    4b06:	2b00      	cmp	r3, #0
    4b08:	bf14      	ite	ne
    4b0a:	2301      	movne	r3, #1
    4b0c:	2300      	moveq	r3, #0
    4b0e:	b2db      	uxtb	r3, r3
}
    4b10:	4618      	mov	r0, r3
    4b12:	370c      	adds	r7, #12
    4b14:	46bd      	mov	sp, r7
    4b16:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b1a:	4770      	bx	lr

00004b1c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    4b1c:	b480      	push	{r7}
    4b1e:	b083      	sub	sp, #12
    4b20:	af00      	add	r7, sp, #0
    4b22:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    4b24:	687b      	ldr	r3, [r7, #4]
    4b26:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4b2a:	61da      	str	r2, [r3, #28]
}
    4b2c:	bf00      	nop
    4b2e:	370c      	adds	r7, #12
    4b30:	46bd      	mov	sp, r7
    4b32:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b36:	4770      	bx	lr

00004b38 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    4b38:	b480      	push	{r7}
    4b3a:	b083      	sub	sp, #12
    4b3c:	af00      	add	r7, sp, #0
    4b3e:	6078      	str	r0, [r7, #4]
    4b40:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    4b42:	687b      	ldr	r3, [r7, #4]
    4b44:	683a      	ldr	r2, [r7, #0]
    4b46:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4b48:	bf00      	nop
    4b4a:	370c      	adds	r7, #12
    4b4c:	46bd      	mov	sp, r7
    4b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b52:	4770      	bx	lr

00004b54 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    4b54:	b480      	push	{r7}
    4b56:	b083      	sub	sp, #12
    4b58:	af00      	add	r7, sp, #0
    4b5a:	6078      	str	r0, [r7, #4]
    4b5c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    4b5e:	687b      	ldr	r3, [r7, #4]
    4b60:	683a      	ldr	r2, [r7, #0]
    4b62:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4b64:	bf00      	nop
    4b66:	370c      	adds	r7, #12
    4b68:	46bd      	mov	sp, r7
    4b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b6e:	4770      	bx	lr

00004b70 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    4b70:	b480      	push	{r7}
    4b72:	b083      	sub	sp, #12
    4b74:	af00      	add	r7, sp, #0
    4b76:	6078      	str	r0, [r7, #4]
    4b78:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    4b7a:	687b      	ldr	r3, [r7, #4]
    4b7c:	683a      	ldr	r2, [r7, #0]
    4b7e:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4b80:	bf00      	nop
    4b82:	370c      	adds	r7, #12
    4b84:	46bd      	mov	sp, r7
    4b86:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b8a:	4770      	bx	lr

00004b8c <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    4b8c:	b480      	push	{r7}
    4b8e:	b083      	sub	sp, #12
    4b90:	af00      	add	r7, sp, #0
    4b92:	6078      	str	r0, [r7, #4]
    4b94:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    4b96:	687b      	ldr	r3, [r7, #4]
    4b98:	683a      	ldr	r2, [r7, #0]
    4b9a:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4b9c:	bf00      	nop
    4b9e:	370c      	adds	r7, #12
    4ba0:	46bd      	mov	sp, r7
    4ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ba6:	4770      	bx	lr

00004ba8 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    4ba8:	b480      	push	{r7}
    4baa:	b085      	sub	sp, #20
    4bac:	af00      	add	r7, sp, #0
    4bae:	6078      	str	r0, [r7, #4]
    4bb0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    4bb2:	687b      	ldr	r3, [r7, #4]
    4bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4bb6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    4bb8:	68fb      	ldr	r3, [r7, #12]
    4bba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    4bbe:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    4bc0:	683b      	ldr	r3, [r7, #0]
    4bc2:	b2db      	uxtb	r3, r3
    4bc4:	68fa      	ldr	r2, [r7, #12]
    4bc6:	4313      	orrs	r3, r2
    4bc8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    4bca:	687b      	ldr	r3, [r7, #4]
    4bcc:	68fa      	ldr	r2, [r7, #12]
    4bce:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4bd0:	bf00      	nop
    4bd2:	3714      	adds	r7, #20
    4bd4:	46bd      	mov	sp, r7
    4bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bda:	4770      	bx	lr

00004bdc <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    4bdc:	b480      	push	{r7}
    4bde:	b085      	sub	sp, #20
    4be0:	af00      	add	r7, sp, #0
    4be2:	6078      	str	r0, [r7, #4]
    4be4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    4be6:	687b      	ldr	r3, [r7, #4]
    4be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4bea:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    4bec:	68fb      	ldr	r3, [r7, #12]
    4bee:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    4bf2:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    4bf4:	683b      	ldr	r3, [r7, #0]
    4bf6:	041b      	lsls	r3, r3, #16
    4bf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    4bfc:	68fa      	ldr	r2, [r7, #12]
    4bfe:	4313      	orrs	r3, r2
    4c00:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	68fa      	ldr	r2, [r7, #12]
    4c06:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4c08:	bf00      	nop
    4c0a:	3714      	adds	r7, #20
    4c0c:	46bd      	mov	sp, r7
    4c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c12:	4770      	bx	lr

00004c14 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    4c14:	b480      	push	{r7}
    4c16:	b083      	sub	sp, #12
    4c18:	af00      	add	r7, sp, #0
    4c1a:	6078      	str	r0, [r7, #4]
    4c1c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    4c1e:	687b      	ldr	r3, [r7, #4]
    4c20:	683a      	ldr	r2, [r7, #0]
    4c22:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4c24:	bf00      	nop
    4c26:	370c      	adds	r7, #12
    4c28:	46bd      	mov	sp, r7
    4c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c2e:	4770      	bx	lr

00004c30 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    4c30:	b480      	push	{r7}
    4c32:	b083      	sub	sp, #12
    4c34:	af00      	add	r7, sp, #0
    4c36:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    4c38:	687b      	ldr	r3, [r7, #4]
    4c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    4c3c:	4618      	mov	r0, r3
    4c3e:	370c      	adds	r7, #12
    4c40:	46bd      	mov	sp, r7
    4c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c46:	4770      	bx	lr

00004c48 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    4c48:	b480      	push	{r7}
    4c4a:	b085      	sub	sp, #20
    4c4c:	af00      	add	r7, sp, #0
    4c4e:	60f8      	str	r0, [r7, #12]
    4c50:	60b9      	str	r1, [r7, #8]
    4c52:	607a      	str	r2, [r7, #4]
	while (count--) {
    4c54:	e007      	b.n	4c66 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    4c56:	68fb      	ldr	r3, [r7, #12]
    4c58:	1c5a      	adds	r2, r3, #1
    4c5a:	60fa      	str	r2, [r7, #12]
    4c5c:	68ba      	ldr	r2, [r7, #8]
    4c5e:	1c51      	adds	r1, r2, #1
    4c60:	60b9      	str	r1, [r7, #8]
    4c62:	7812      	ldrb	r2, [r2, #0]
    4c64:	701a      	strb	r2, [r3, #0]
	while (count--) {
    4c66:	687b      	ldr	r3, [r7, #4]
    4c68:	1e5a      	subs	r2, r3, #1
    4c6a:	607a      	str	r2, [r7, #4]
    4c6c:	2b00      	cmp	r3, #0
    4c6e:	d1f2      	bne.n	4c56 <_qspi_memcpy+0xe>
	}
}
    4c70:	bf00      	nop
    4c72:	3714      	adds	r7, #20
    4c74:	46bd      	mov	sp, r7
    4c76:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c7a:	4770      	bx	lr

00004c7c <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    4c7c:	b580      	push	{r7, lr}
    4c7e:	b082      	sub	sp, #8
    4c80:	af00      	add	r7, sp, #0
    4c82:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    4c84:	4903      	ldr	r1, [pc, #12]	; (4c94 <_qspi_end_transfer+0x18>)
    4c86:	6878      	ldr	r0, [r7, #4]
    4c88:	4b03      	ldr	r3, [pc, #12]	; (4c98 <_qspi_end_transfer+0x1c>)
    4c8a:	4798      	blx	r3
}
    4c8c:	bf00      	nop
    4c8e:	3708      	adds	r7, #8
    4c90:	46bd      	mov	sp, r7
    4c92:	bd80      	pop	{r7, pc}
    4c94:	01000002 	.word	0x01000002
    4c98:	00004b39 	.word	0x00004b39

00004c9c <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    4c9c:	b580      	push	{r7, lr}
    4c9e:	b082      	sub	sp, #8
    4ca0:	af00      	add	r7, sp, #0
    4ca2:	6078      	str	r0, [r7, #4]
    4ca4:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    4ca6:	687b      	ldr	r3, [r7, #4]
    4ca8:	2b00      	cmp	r3, #0
    4caa:	d004      	beq.n	4cb6 <_qspi_sync_init+0x1a>
    4cac:	683b      	ldr	r3, [r7, #0]
    4cae:	2b00      	cmp	r3, #0
    4cb0:	d001      	beq.n	4cb6 <_qspi_sync_init+0x1a>
    4cb2:	2301      	movs	r3, #1
    4cb4:	e000      	b.n	4cb8 <_qspi_sync_init+0x1c>
    4cb6:	2300      	movs	r3, #0
    4cb8:	f003 0301 	and.w	r3, r3, #1
    4cbc:	b2db      	uxtb	r3, r3
    4cbe:	2240      	movs	r2, #64	; 0x40
    4cc0:	490c      	ldr	r1, [pc, #48]	; (4cf4 <_qspi_sync_init+0x58>)
    4cc2:	4618      	mov	r0, r3
    4cc4:	4b0c      	ldr	r3, [pc, #48]	; (4cf8 <_qspi_sync_init+0x5c>)
    4cc6:	4798      	blx	r3
	dev->prvt = hw;
    4cc8:	687b      	ldr	r3, [r7, #4]
    4cca:	683a      	ldr	r2, [r7, #0]
    4ccc:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    4cce:	687b      	ldr	r3, [r7, #4]
    4cd0:	681b      	ldr	r3, [r3, #0]
    4cd2:	2101      	movs	r1, #1
    4cd4:	4618      	mov	r0, r3
    4cd6:	4b09      	ldr	r3, [pc, #36]	; (4cfc <_qspi_sync_init+0x60>)
    4cd8:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    4cda:	4909      	ldr	r1, [pc, #36]	; (4d00 <_qspi_sync_init+0x64>)
    4cdc:	6838      	ldr	r0, [r7, #0]
    4cde:	4b09      	ldr	r3, [pc, #36]	; (4d04 <_qspi_sync_init+0x68>)
    4ce0:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    4ce2:	4909      	ldr	r1, [pc, #36]	; (4d08 <_qspi_sync_init+0x6c>)
    4ce4:	6838      	ldr	r0, [r7, #0]
    4ce6:	4b09      	ldr	r3, [pc, #36]	; (4d0c <_qspi_sync_init+0x70>)
    4ce8:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    4cea:	2300      	movs	r3, #0
}
    4cec:	4618      	mov	r0, r3
    4cee:	3708      	adds	r7, #8
    4cf0:	46bd      	mov	sp, r7
    4cf2:	bd80      	pop	{r7, pc}
    4cf4:	0000d1b8 	.word	0x0000d1b8
    4cf8:	00002de1 	.word	0x00002de1
    4cfc:	00004b39 	.word	0x00004b39
    4d00:	06000011 	.word	0x06000011
    4d04:	00004b55 	.word	0x00004b55
    4d08:	00241300 	.word	0x00241300
    4d0c:	00004b71 	.word	0x00004b71

00004d10 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    4d10:	b580      	push	{r7, lr}
    4d12:	b082      	sub	sp, #8
    4d14:	af00      	add	r7, sp, #0
    4d16:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    4d18:	687b      	ldr	r3, [r7, #4]
    4d1a:	681b      	ldr	r3, [r3, #0]
    4d1c:	2102      	movs	r1, #2
    4d1e:	4618      	mov	r0, r3
    4d20:	4b03      	ldr	r3, [pc, #12]	; (4d30 <_qspi_sync_enable+0x20>)
    4d22:	4798      	blx	r3
	return ERR_NONE;
    4d24:	2300      	movs	r3, #0
}
    4d26:	4618      	mov	r0, r3
    4d28:	3708      	adds	r7, #8
    4d2a:	46bd      	mov	sp, r7
    4d2c:	bd80      	pop	{r7, pc}
    4d2e:	bf00      	nop
    4d30:	00004b39 	.word	0x00004b39

00004d34 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    4d34:	b580      	push	{r7, lr}
    4d36:	b082      	sub	sp, #8
    4d38:	af00      	add	r7, sp, #0
    4d3a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    4d3c:	687b      	ldr	r3, [r7, #4]
    4d3e:	681b      	ldr	r3, [r3, #0]
    4d40:	2100      	movs	r1, #0
    4d42:	4618      	mov	r0, r3
    4d44:	4b03      	ldr	r3, [pc, #12]	; (4d54 <_qspi_sync_disable+0x20>)
    4d46:	4798      	blx	r3
	return ERR_NONE;
    4d48:	2300      	movs	r3, #0
}
    4d4a:	4618      	mov	r0, r3
    4d4c:	3708      	adds	r7, #8
    4d4e:	46bd      	mov	sp, r7
    4d50:	bd80      	pop	{r7, pc}
    4d52:	bf00      	nop
    4d54:	00004b39 	.word	0x00004b39

00004d58 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    4d58:	b580      	push	{r7, lr}
    4d5a:	b084      	sub	sp, #16
    4d5c:	af00      	add	r7, sp, #0
    4d5e:	6078      	str	r0, [r7, #4]
    4d60:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    4d62:	687b      	ldr	r3, [r7, #4]
    4d64:	681b      	ldr	r3, [r3, #0]
    4d66:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    4d68:	683b      	ldr	r3, [r7, #0]
    4d6a:	781b      	ldrb	r3, [r3, #0]
    4d6c:	f003 0320 	and.w	r3, r3, #32
    4d70:	b2db      	uxtb	r3, r3
    4d72:	2b00      	cmp	r3, #0
    4d74:	d005      	beq.n	4d82 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    4d76:	683b      	ldr	r3, [r7, #0]
    4d78:	689b      	ldr	r3, [r3, #8]
    4d7a:	4619      	mov	r1, r3
    4d7c:	68f8      	ldr	r0, [r7, #12]
    4d7e:	4b13      	ldr	r3, [pc, #76]	; (4dcc <_qspi_sync_command_set_ifr+0x74>)
    4d80:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    4d82:	683b      	ldr	r3, [r7, #0]
    4d84:	781b      	ldrb	r3, [r3, #0]
    4d86:	f003 0310 	and.w	r3, r3, #16
    4d8a:	b2db      	uxtb	r3, r3
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d005      	beq.n	4d9c <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    4d90:	683b      	ldr	r3, [r7, #0]
    4d92:	791b      	ldrb	r3, [r3, #4]
    4d94:	4619      	mov	r1, r3
    4d96:	68f8      	ldr	r0, [r7, #12]
    4d98:	4b0d      	ldr	r3, [pc, #52]	; (4dd0 <_qspi_sync_command_set_ifr+0x78>)
    4d9a:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    4d9c:	683b      	ldr	r3, [r7, #0]
    4d9e:	781b      	ldrb	r3, [r3, #0]
    4da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4da4:	b2db      	uxtb	r3, r3
    4da6:	2b00      	cmp	r3, #0
    4da8:	d005      	beq.n	4db6 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    4daa:	683b      	ldr	r3, [r7, #0]
    4dac:	795b      	ldrb	r3, [r3, #5]
    4dae:	4619      	mov	r1, r3
    4db0:	68f8      	ldr	r0, [r7, #12]
    4db2:	4b08      	ldr	r3, [pc, #32]	; (4dd4 <_qspi_sync_command_set_ifr+0x7c>)
    4db4:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    4db6:	683b      	ldr	r3, [r7, #0]
    4db8:	681b      	ldr	r3, [r3, #0]
    4dba:	4619      	mov	r1, r3
    4dbc:	68f8      	ldr	r0, [r7, #12]
    4dbe:	4b06      	ldr	r3, [pc, #24]	; (4dd8 <_qspi_sync_command_set_ifr+0x80>)
    4dc0:	4798      	blx	r3
}
    4dc2:	bf00      	nop
    4dc4:	3710      	adds	r7, #16
    4dc6:	46bd      	mov	sp, r7
    4dc8:	bd80      	pop	{r7, pc}
    4dca:	bf00      	nop
    4dcc:	00004b8d 	.word	0x00004b8d
    4dd0:	00004ba9 	.word	0x00004ba9
    4dd4:	00004bdd 	.word	0x00004bdd
    4dd8:	00004c15 	.word	0x00004c15

00004ddc <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    4ddc:	b580      	push	{r7, lr}
    4dde:	b084      	sub	sp, #16
    4de0:	af00      	add	r7, sp, #0
    4de2:	6078      	str	r0, [r7, #4]
    4de4:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    4de6:	687b      	ldr	r3, [r7, #4]
    4de8:	681b      	ldr	r3, [r3, #0]
    4dea:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    4dec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4df0:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    4df2:	683b      	ldr	r3, [r7, #0]
    4df4:	781b      	ldrb	r3, [r3, #0]
    4df6:	f003 0320 	and.w	r3, r3, #32
    4dfa:	b2db      	uxtb	r3, r3
    4dfc:	2b00      	cmp	r3, #0
    4dfe:	d004      	beq.n	4e0a <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    4e00:	683b      	ldr	r3, [r7, #0]
    4e02:	689b      	ldr	r3, [r3, #8]
    4e04:	68fa      	ldr	r2, [r7, #12]
    4e06:	4413      	add	r3, r2
    4e08:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    4e0a:	68b8      	ldr	r0, [r7, #8]
    4e0c:	4b18      	ldr	r3, [pc, #96]	; (4e70 <_qspi_sync_run_transfer+0x94>)
    4e0e:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    4e10:	683b      	ldr	r3, [r7, #0]
    4e12:	691b      	ldr	r3, [r3, #16]
    4e14:	2b00      	cmp	r3, #0
    4e16:	d103      	bne.n	4e20 <_qspi_sync_run_transfer+0x44>
    4e18:	683b      	ldr	r3, [r7, #0]
    4e1a:	695b      	ldr	r3, [r3, #20]
    4e1c:	2b00      	cmp	r3, #0
    4e1e:	d001      	beq.n	4e24 <_qspi_sync_run_transfer+0x48>
    4e20:	2301      	movs	r3, #1
    4e22:	e000      	b.n	4e26 <_qspi_sync_run_transfer+0x4a>
    4e24:	2300      	movs	r3, #0
    4e26:	f003 0301 	and.w	r3, r3, #1
    4e2a:	b2db      	uxtb	r3, r3
    4e2c:	2282      	movs	r2, #130	; 0x82
    4e2e:	4911      	ldr	r1, [pc, #68]	; (4e74 <_qspi_sync_run_transfer+0x98>)
    4e30:	4618      	mov	r0, r3
    4e32:	4b11      	ldr	r3, [pc, #68]	; (4e78 <_qspi_sync_run_transfer+0x9c>)
    4e34:	4798      	blx	r3

	if (cmd->tx_buf) {
    4e36:	683b      	ldr	r3, [r7, #0]
    4e38:	691b      	ldr	r3, [r3, #16]
    4e3a:	2b00      	cmp	r3, #0
    4e3c:	d008      	beq.n	4e50 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    4e3e:	683b      	ldr	r3, [r7, #0]
    4e40:	6919      	ldr	r1, [r3, #16]
    4e42:	683b      	ldr	r3, [r7, #0]
    4e44:	68db      	ldr	r3, [r3, #12]
    4e46:	461a      	mov	r2, r3
    4e48:	68f8      	ldr	r0, [r7, #12]
    4e4a:	4b0c      	ldr	r3, [pc, #48]	; (4e7c <_qspi_sync_run_transfer+0xa0>)
    4e4c:	4798      	blx	r3
    4e4e:	e007      	b.n	4e60 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    4e50:	683b      	ldr	r3, [r7, #0]
    4e52:	6958      	ldr	r0, [r3, #20]
    4e54:	683b      	ldr	r3, [r7, #0]
    4e56:	68db      	ldr	r3, [r3, #12]
    4e58:	461a      	mov	r2, r3
    4e5a:	68f9      	ldr	r1, [r7, #12]
    4e5c:	4b07      	ldr	r3, [pc, #28]	; (4e7c <_qspi_sync_run_transfer+0xa0>)
    4e5e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    4e60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4e64:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    4e68:	bf00      	nop
    4e6a:	3710      	adds	r7, #16
    4e6c:	46bd      	mov	sp, r7
    4e6e:	bd80      	pop	{r7, pc}
    4e70:	00004c31 	.word	0x00004c31
    4e74:	0000d1b8 	.word	0x0000d1b8
    4e78:	00002de1 	.word	0x00002de1
    4e7c:	00004c49 	.word	0x00004c49

00004e80 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    4e80:	b580      	push	{r7, lr}
    4e82:	b082      	sub	sp, #8
    4e84:	af00      	add	r7, sp, #0
    4e86:	6078      	str	r0, [r7, #4]
    4e88:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    4e8a:	6839      	ldr	r1, [r7, #0]
    4e8c:	6878      	ldr	r0, [r7, #4]
    4e8e:	4b14      	ldr	r3, [pc, #80]	; (4ee0 <_qspi_sync_serial_run_command+0x60>)
    4e90:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    4e92:	683b      	ldr	r3, [r7, #0]
    4e94:	781b      	ldrb	r3, [r3, #0]
    4e96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    4e9a:	b2db      	uxtb	r3, r3
    4e9c:	2b00      	cmp	r3, #0
    4e9e:	d003      	beq.n	4ea8 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    4ea0:	6839      	ldr	r1, [r7, #0]
    4ea2:	6878      	ldr	r0, [r7, #4]
    4ea4:	4b0f      	ldr	r3, [pc, #60]	; (4ee4 <_qspi_sync_serial_run_command+0x64>)
    4ea6:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    4ea8:	687b      	ldr	r3, [r7, #4]
    4eaa:	681b      	ldr	r3, [r3, #0]
    4eac:	4618      	mov	r0, r3
    4eae:	4b0e      	ldr	r3, [pc, #56]	; (4ee8 <_qspi_sync_serial_run_command+0x68>)
    4eb0:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    4eb2:	bf00      	nop
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	681b      	ldr	r3, [r3, #0]
    4eb8:	4618      	mov	r0, r3
    4eba:	4b0c      	ldr	r3, [pc, #48]	; (4eec <_qspi_sync_serial_run_command+0x6c>)
    4ebc:	4798      	blx	r3
    4ebe:	4603      	mov	r3, r0
    4ec0:	f083 0301 	eor.w	r3, r3, #1
    4ec4:	b2db      	uxtb	r3, r3
    4ec6:	2b00      	cmp	r3, #0
    4ec8:	d1f4      	bne.n	4eb4 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    4eca:	687b      	ldr	r3, [r7, #4]
    4ecc:	681b      	ldr	r3, [r3, #0]
    4ece:	4618      	mov	r0, r3
    4ed0:	4b07      	ldr	r3, [pc, #28]	; (4ef0 <_qspi_sync_serial_run_command+0x70>)
    4ed2:	4798      	blx	r3
	return ERR_NONE;
    4ed4:	2300      	movs	r3, #0
}
    4ed6:	4618      	mov	r0, r3
    4ed8:	3708      	adds	r7, #8
    4eda:	46bd      	mov	sp, r7
    4edc:	bd80      	pop	{r7, pc}
    4ede:	bf00      	nop
    4ee0:	00004d59 	.word	0x00004d59
    4ee4:	00004ddd 	.word	0x00004ddd
    4ee8:	00004c7d 	.word	0x00004c7d
    4eec:	00004af5 	.word	0x00004af5
    4ef0:	00004b1d 	.word	0x00004b1d

00004ef4 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    4ef4:	b480      	push	{r7}
    4ef6:	b083      	sub	sp, #12
    4ef8:	af00      	add	r7, sp, #0
    4efa:	6078      	str	r0, [r7, #4]
    4efc:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    4efe:	bf00      	nop
    4f00:	687b      	ldr	r3, [r7, #4]
    4f02:	691a      	ldr	r2, [r3, #16]
    4f04:	683b      	ldr	r3, [r7, #0]
    4f06:	4013      	ands	r3, r2
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d1f9      	bne.n	4f00 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    4f0c:	bf00      	nop
    4f0e:	370c      	adds	r7, #12
    4f10:	46bd      	mov	sp, r7
    4f12:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f16:	4770      	bx	lr

00004f18 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    4f18:	b480      	push	{r7}
    4f1a:	b083      	sub	sp, #12
    4f1c:	af00      	add	r7, sp, #0
    4f1e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    4f20:	687b      	ldr	r3, [r7, #4]
    4f22:	f44f 7280 	mov.w	r2, #256	; 0x100
    4f26:	819a      	strh	r2, [r3, #12]
}
    4f28:	bf00      	nop
    4f2a:	370c      	adds	r7, #12
    4f2c:	46bd      	mov	sp, r7
    4f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f32:	4770      	bx	lr

00004f34 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    4f34:	b480      	push	{r7}
    4f36:	b083      	sub	sp, #12
    4f38:	af00      	add	r7, sp, #0
    4f3a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    4f3c:	687b      	ldr	r3, [r7, #4]
    4f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4f42:	819a      	strh	r2, [r3, #12]
}
    4f44:	bf00      	nop
    4f46:	370c      	adds	r7, #12
    4f48:	46bd      	mov	sp, r7
    4f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f4e:	4770      	bx	lr

00004f50 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    4f50:	b480      	push	{r7}
    4f52:	b083      	sub	sp, #12
    4f54:	af00      	add	r7, sp, #0
    4f56:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    4f58:	687b      	ldr	r3, [r7, #4]
    4f5a:	899b      	ldrh	r3, [r3, #12]
    4f5c:	b29b      	uxth	r3, r3
}
    4f5e:	4618      	mov	r0, r3
    4f60:	370c      	adds	r7, #12
    4f62:	46bd      	mov	sp, r7
    4f64:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f68:	4770      	bx	lr

00004f6a <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    4f6a:	b480      	push	{r7}
    4f6c:	b083      	sub	sp, #12
    4f6e:	af00      	add	r7, sp, #0
    4f70:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    4f72:	687b      	ldr	r3, [r7, #4]
    4f74:	895b      	ldrh	r3, [r3, #10]
    4f76:	b29b      	uxth	r3, r3
}
    4f78:	4618      	mov	r0, r3
    4f7a:	370c      	adds	r7, #12
    4f7c:	46bd      	mov	sp, r7
    4f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f82:	4770      	bx	lr

00004f84 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    4f84:	b580      	push	{r7, lr}
    4f86:	b082      	sub	sp, #8
    4f88:	af00      	add	r7, sp, #0
    4f8a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    4f8c:	687b      	ldr	r3, [r7, #4]
    4f8e:	881b      	ldrh	r3, [r3, #0]
    4f90:	b29b      	uxth	r3, r3
    4f92:	f043 0301 	orr.w	r3, r3, #1
    4f96:	b29a      	uxth	r2, r3
    4f98:	687b      	ldr	r3, [r7, #4]
    4f9a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    4f9c:	2101      	movs	r1, #1
    4f9e:	6878      	ldr	r0, [r7, #4]
    4fa0:	4b02      	ldr	r3, [pc, #8]	; (4fac <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    4fa2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    4fa4:	bf00      	nop
    4fa6:	3708      	adds	r7, #8
    4fa8:	46bd      	mov	sp, r7
    4faa:	bd80      	pop	{r7, pc}
    4fac:	00004ef5 	.word	0x00004ef5

00004fb0 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    4fb0:	b580      	push	{r7, lr}
    4fb2:	b084      	sub	sp, #16
    4fb4:	af00      	add	r7, sp, #0
    4fb6:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    4fb8:	f248 0103 	movw	r1, #32771	; 0x8003
    4fbc:	6878      	ldr	r0, [r7, #4]
    4fbe:	4b0a      	ldr	r3, [pc, #40]	; (4fe8 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    4fc0:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    4fc2:	687b      	ldr	r3, [r7, #4]
    4fc4:	881b      	ldrh	r3, [r3, #0]
    4fc6:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    4fc8:	89fb      	ldrh	r3, [r7, #14]
    4fca:	085b      	lsrs	r3, r3, #1
    4fcc:	b29b      	uxth	r3, r3
    4fce:	f003 0301 	and.w	r3, r3, #1
    4fd2:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    4fd4:	89fb      	ldrh	r3, [r7, #14]
    4fd6:	2b00      	cmp	r3, #0
    4fd8:	bf14      	ite	ne
    4fda:	2301      	movne	r3, #1
    4fdc:	2300      	moveq	r3, #0
    4fde:	b2db      	uxtb	r3, r3
}
    4fe0:	4618      	mov	r0, r3
    4fe2:	3710      	adds	r7, #16
    4fe4:	46bd      	mov	sp, r7
    4fe6:	bd80      	pop	{r7, pc}
    4fe8:	00004ef5 	.word	0x00004ef5

00004fec <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4fec:	b580      	push	{r7, lr}
    4fee:	b082      	sub	sp, #8
    4ff0:	af00      	add	r7, sp, #0
    4ff2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	881b      	ldrh	r3, [r3, #0]
    4ff8:	b29b      	uxth	r3, r3
    4ffa:	f023 0302 	bic.w	r3, r3, #2
    4ffe:	b29a      	uxth	r2, r3
    5000:	687b      	ldr	r3, [r7, #4]
    5002:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5004:	f248 0103 	movw	r1, #32771	; 0x8003
    5008:	6878      	ldr	r0, [r7, #4]
    500a:	4b03      	ldr	r3, [pc, #12]	; (5018 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    500c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    500e:	bf00      	nop
    5010:	3708      	adds	r7, #8
    5012:	46bd      	mov	sp, r7
    5014:	bd80      	pop	{r7, pc}
    5016:	bf00      	nop
    5018:	00004ef5 	.word	0x00004ef5

0000501c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    501c:	b580      	push	{r7, lr}
    501e:	b082      	sub	sp, #8
    5020:	af00      	add	r7, sp, #0
    5022:	6078      	str	r0, [r7, #4]
    5024:	460b      	mov	r3, r1
    5026:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5028:	687b      	ldr	r3, [r7, #4]
    502a:	887a      	ldrh	r2, [r7, #2]
    502c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    502e:	f248 0103 	movw	r1, #32771	; 0x8003
    5032:	6878      	ldr	r0, [r7, #4]
    5034:	4b02      	ldr	r3, [pc, #8]	; (5040 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5036:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5038:	bf00      	nop
    503a:	3708      	adds	r7, #8
    503c:	46bd      	mov	sp, r7
    503e:	bd80      	pop	{r7, pc}
    5040:	00004ef5 	.word	0x00004ef5

00005044 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5044:	b480      	push	{r7}
    5046:	b083      	sub	sp, #12
    5048:	af00      	add	r7, sp, #0
    504a:	6078      	str	r0, [r7, #4]
    504c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    504e:	687b      	ldr	r3, [r7, #4]
    5050:	683a      	ldr	r2, [r7, #0]
    5052:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5054:	bf00      	nop
    5056:	370c      	adds	r7, #12
    5058:	46bd      	mov	sp, r7
    505a:	f85d 7b04 	ldr.w	r7, [sp], #4
    505e:	4770      	bx	lr

00005060 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5060:	b580      	push	{r7, lr}
    5062:	b082      	sub	sp, #8
    5064:	af00      	add	r7, sp, #0
    5066:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5068:	687b      	ldr	r3, [r7, #4]
    506a:	2b00      	cmp	r3, #0
    506c:	d005      	beq.n	507a <_calendar_init+0x1a>
    506e:	687b      	ldr	r3, [r7, #4]
    5070:	681b      	ldr	r3, [r3, #0]
    5072:	2b00      	cmp	r3, #0
    5074:	d001      	beq.n	507a <_calendar_init+0x1a>
    5076:	2301      	movs	r3, #1
    5078:	e000      	b.n	507c <_calendar_init+0x1c>
    507a:	2300      	movs	r3, #0
    507c:	f003 0301 	and.w	r3, r3, #1
    5080:	b2db      	uxtb	r3, r3
    5082:	222f      	movs	r2, #47	; 0x2f
    5084:	491b      	ldr	r1, [pc, #108]	; (50f4 <_calendar_init+0x94>)
    5086:	4618      	mov	r0, r3
    5088:	4b1b      	ldr	r3, [pc, #108]	; (50f8 <_calendar_init+0x98>)
    508a:	4798      	blx	r3

	_rtc_dev = dev;
    508c:	4a1b      	ldr	r2, [pc, #108]	; (50fc <_calendar_init+0x9c>)
    508e:	687b      	ldr	r3, [r7, #4]
    5090:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5092:	687b      	ldr	r3, [r7, #4]
    5094:	681b      	ldr	r3, [r3, #0]
    5096:	4618      	mov	r0, r3
    5098:	4b19      	ldr	r3, [pc, #100]	; (5100 <_calendar_init+0xa0>)
    509a:	4798      	blx	r3
    509c:	4603      	mov	r3, r0
    509e:	2b00      	cmp	r3, #0
    50a0:	d00a      	beq.n	50b8 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    50a2:	687b      	ldr	r3, [r7, #4]
    50a4:	681b      	ldr	r3, [r3, #0]
    50a6:	4618      	mov	r0, r3
    50a8:	4b16      	ldr	r3, [pc, #88]	; (5104 <_calendar_init+0xa4>)
    50aa:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    50ac:	687b      	ldr	r3, [r7, #4]
    50ae:	681b      	ldr	r3, [r3, #0]
    50b0:	2102      	movs	r1, #2
    50b2:	4618      	mov	r0, r3
    50b4:	4b14      	ldr	r3, [pc, #80]	; (5108 <_calendar_init+0xa8>)
    50b6:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    50b8:	687b      	ldr	r3, [r7, #4]
    50ba:	681b      	ldr	r3, [r3, #0]
    50bc:	4618      	mov	r0, r3
    50be:	4b13      	ldr	r3, [pc, #76]	; (510c <_calendar_init+0xac>)
    50c0:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    50c2:	687b      	ldr	r3, [r7, #4]
    50c4:	681b      	ldr	r3, [r3, #0]
    50c6:	2101      	movs	r1, #1
    50c8:	4618      	mov	r0, r3
    50ca:	4b0f      	ldr	r3, [pc, #60]	; (5108 <_calendar_init+0xa8>)
    50cc:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    50ce:	687b      	ldr	r3, [r7, #4]
    50d0:	681b      	ldr	r3, [r3, #0]
    50d2:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    50d6:	4618      	mov	r0, r3
    50d8:	4b0d      	ldr	r3, [pc, #52]	; (5110 <_calendar_init+0xb0>)
    50da:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    50dc:	687b      	ldr	r3, [r7, #4]
    50de:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    50e0:	2100      	movs	r1, #0
    50e2:	4618      	mov	r0, r3
    50e4:	4b0b      	ldr	r3, [pc, #44]	; (5114 <_calendar_init+0xb4>)
    50e6:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    50e8:	2300      	movs	r3, #0
}
    50ea:	4618      	mov	r0, r3
    50ec:	3708      	adds	r7, #8
    50ee:	46bd      	mov	sp, r7
    50f0:	bd80      	pop	{r7, pc}
    50f2:	bf00      	nop
    50f4:	0000d1d0 	.word	0x0000d1d0
    50f8:	00002de1 	.word	0x00002de1
    50fc:	20000840 	.word	0x20000840
    5100:	00004fb1 	.word	0x00004fb1
    5104:	00004fed 	.word	0x00004fed
    5108:	00004ef5 	.word	0x00004ef5
    510c:	00004f85 	.word	0x00004f85
    5110:	0000501d 	.word	0x0000501d
    5114:	00005045 	.word	0x00005045

00005118 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5118:	b580      	push	{r7, lr}
    511a:	b084      	sub	sp, #16
    511c:	af00      	add	r7, sp, #0
    511e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5120:	687b      	ldr	r3, [r7, #4]
    5122:	681b      	ldr	r3, [r3, #0]
    5124:	4618      	mov	r0, r3
    5126:	4b19      	ldr	r3, [pc, #100]	; (518c <_rtc_interrupt_handler+0x74>)
    5128:	4798      	blx	r3
    512a:	4603      	mov	r3, r0
    512c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    512e:	687b      	ldr	r3, [r7, #4]
    5130:	681b      	ldr	r3, [r3, #0]
    5132:	4618      	mov	r0, r3
    5134:	4b16      	ldr	r3, [pc, #88]	; (5190 <_rtc_interrupt_handler+0x78>)
    5136:	4798      	blx	r3
    5138:	4603      	mov	r3, r0
    513a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    513c:	89fa      	ldrh	r2, [r7, #14]
    513e:	89bb      	ldrh	r3, [r7, #12]
    5140:	4013      	ands	r3, r2
    5142:	b29b      	uxth	r3, r3
    5144:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5148:	2b00      	cmp	r3, #0
    514a:	d009      	beq.n	5160 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    514c:	687b      	ldr	r3, [r7, #4]
    514e:	685b      	ldr	r3, [r3, #4]
    5150:	6878      	ldr	r0, [r7, #4]
    5152:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5154:	687b      	ldr	r3, [r7, #4]
    5156:	681b      	ldr	r3, [r3, #0]
    5158:	4618      	mov	r0, r3
    515a:	4b0e      	ldr	r3, [pc, #56]	; (5194 <_rtc_interrupt_handler+0x7c>)
    515c:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    515e:	e010      	b.n	5182 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5160:	89fa      	ldrh	r2, [r7, #14]
    5162:	89bb      	ldrh	r3, [r7, #12]
    5164:	4013      	ands	r3, r2
    5166:	b29b      	uxth	r3, r3
    5168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    516c:	2b00      	cmp	r3, #0
    516e:	d008      	beq.n	5182 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5170:	687b      	ldr	r3, [r7, #4]
    5172:	689b      	ldr	r3, [r3, #8]
    5174:	6878      	ldr	r0, [r7, #4]
    5176:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5178:	687b      	ldr	r3, [r7, #4]
    517a:	681b      	ldr	r3, [r3, #0]
    517c:	4618      	mov	r0, r3
    517e:	4b06      	ldr	r3, [pc, #24]	; (5198 <_rtc_interrupt_handler+0x80>)
    5180:	4798      	blx	r3
}
    5182:	bf00      	nop
    5184:	3710      	adds	r7, #16
    5186:	46bd      	mov	sp, r7
    5188:	bd80      	pop	{r7, pc}
    518a:	bf00      	nop
    518c:	00004f51 	.word	0x00004f51
    5190:	00004f6b 	.word	0x00004f6b
    5194:	00004f19 	.word	0x00004f19
    5198:	00004f35 	.word	0x00004f35

0000519c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    519c:	b580      	push	{r7, lr}
    519e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    51a0:	4b03      	ldr	r3, [pc, #12]	; (51b0 <RTC_Handler+0x14>)
    51a2:	681b      	ldr	r3, [r3, #0]
    51a4:	4618      	mov	r0, r3
    51a6:	4b03      	ldr	r3, [pc, #12]	; (51b4 <RTC_Handler+0x18>)
    51a8:	4798      	blx	r3
}
    51aa:	bf00      	nop
    51ac:	bd80      	pop	{r7, pc}
    51ae:	bf00      	nop
    51b0:	20000840 	.word	0x20000840
    51b4:	00005119 	.word	0x00005119

000051b8 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    51b8:	b480      	push	{r7}
    51ba:	b083      	sub	sp, #12
    51bc:	af00      	add	r7, sp, #0
    51be:	6078      	str	r0, [r7, #4]
    51c0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    51c2:	bf00      	nop
    51c4:	687b      	ldr	r3, [r7, #4]
    51c6:	69da      	ldr	r2, [r3, #28]
    51c8:	683b      	ldr	r3, [r7, #0]
    51ca:	4013      	ands	r3, r2
    51cc:	2b00      	cmp	r3, #0
    51ce:	d1f9      	bne.n	51c4 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    51d0:	bf00      	nop
    51d2:	370c      	adds	r7, #12
    51d4:	46bd      	mov	sp, r7
    51d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    51da:	4770      	bx	lr

000051dc <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    51dc:	b480      	push	{r7}
    51de:	b083      	sub	sp, #12
    51e0:	af00      	add	r7, sp, #0
    51e2:	6078      	str	r0, [r7, #4]
    51e4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    51e6:	687b      	ldr	r3, [r7, #4]
    51e8:	69da      	ldr	r2, [r3, #28]
    51ea:	683b      	ldr	r3, [r7, #0]
    51ec:	4013      	ands	r3, r2
    51ee:	2b00      	cmp	r3, #0
    51f0:	bf14      	ite	ne
    51f2:	2301      	movne	r3, #1
    51f4:	2300      	moveq	r3, #0
    51f6:	b2db      	uxtb	r3, r3
}
    51f8:	4618      	mov	r0, r3
    51fa:	370c      	adds	r7, #12
    51fc:	46bd      	mov	sp, r7
    51fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5202:	4770      	bx	lr

00005204 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5204:	b480      	push	{r7}
    5206:	b083      	sub	sp, #12
    5208:	af00      	add	r7, sp, #0
    520a:	6078      	str	r0, [r7, #4]
    520c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    520e:	bf00      	nop
    5210:	687b      	ldr	r3, [r7, #4]
    5212:	69da      	ldr	r2, [r3, #28]
    5214:	683b      	ldr	r3, [r7, #0]
    5216:	4013      	ands	r3, r2
    5218:	2b00      	cmp	r3, #0
    521a:	d1f9      	bne.n	5210 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    521c:	bf00      	nop
    521e:	370c      	adds	r7, #12
    5220:	46bd      	mov	sp, r7
    5222:	f85d 7b04 	ldr.w	r7, [sp], #4
    5226:	4770      	bx	lr

00005228 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5228:	b480      	push	{r7}
    522a:	b083      	sub	sp, #12
    522c:	af00      	add	r7, sp, #0
    522e:	6078      	str	r0, [r7, #4]
    5230:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5232:	687b      	ldr	r3, [r7, #4]
    5234:	69da      	ldr	r2, [r3, #28]
    5236:	683b      	ldr	r3, [r7, #0]
    5238:	4013      	ands	r3, r2
    523a:	2b00      	cmp	r3, #0
    523c:	bf14      	ite	ne
    523e:	2301      	movne	r3, #1
    5240:	2300      	moveq	r3, #0
    5242:	b2db      	uxtb	r3, r3
}
    5244:	4618      	mov	r0, r3
    5246:	370c      	adds	r7, #12
    5248:	46bd      	mov	sp, r7
    524a:	f85d 7b04 	ldr.w	r7, [sp], #4
    524e:	4770      	bx	lr

00005250 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5250:	b480      	push	{r7}
    5252:	b083      	sub	sp, #12
    5254:	af00      	add	r7, sp, #0
    5256:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5258:	687b      	ldr	r3, [r7, #4]
    525a:	2201      	movs	r2, #1
    525c:	761a      	strb	r2, [r3, #24]
}
    525e:	bf00      	nop
    5260:	370c      	adds	r7, #12
    5262:	46bd      	mov	sp, r7
    5264:	f85d 7b04 	ldr.w	r7, [sp], #4
    5268:	4770      	bx	lr

0000526a <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    526a:	b480      	push	{r7}
    526c:	b083      	sub	sp, #12
    526e:	af00      	add	r7, sp, #0
    5270:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5272:	687b      	ldr	r3, [r7, #4]
    5274:	2202      	movs	r2, #2
    5276:	761a      	strb	r2, [r3, #24]
}
    5278:	bf00      	nop
    527a:	370c      	adds	r7, #12
    527c:	46bd      	mov	sp, r7
    527e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5282:	4770      	bx	lr

00005284 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5284:	b480      	push	{r7}
    5286:	b083      	sub	sp, #12
    5288:	af00      	add	r7, sp, #0
    528a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    528c:	687b      	ldr	r3, [r7, #4]
    528e:	7e1b      	ldrb	r3, [r3, #24]
    5290:	b2db      	uxtb	r3, r3
}
    5292:	4618      	mov	r0, r3
    5294:	370c      	adds	r7, #12
    5296:	46bd      	mov	sp, r7
    5298:	f85d 7b04 	ldr.w	r7, [sp], #4
    529c:	4770      	bx	lr

0000529e <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    529e:	b480      	push	{r7}
    52a0:	b085      	sub	sp, #20
    52a2:	af00      	add	r7, sp, #0
    52a4:	6078      	str	r0, [r7, #4]
    52a6:	460b      	mov	r3, r1
    52a8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    52aa:	687b      	ldr	r3, [r7, #4]
    52ac:	7e1b      	ldrb	r3, [r3, #24]
    52ae:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    52b0:	7bfa      	ldrb	r2, [r7, #15]
    52b2:	78fb      	ldrb	r3, [r7, #3]
    52b4:	4013      	ands	r3, r2
    52b6:	73fb      	strb	r3, [r7, #15]
	return tmp;
    52b8:	7bfb      	ldrb	r3, [r7, #15]
}
    52ba:	4618      	mov	r0, r3
    52bc:	3714      	adds	r7, #20
    52be:	46bd      	mov	sp, r7
    52c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    52c4:	4770      	bx	lr

000052c6 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    52c6:	b480      	push	{r7}
    52c8:	b083      	sub	sp, #12
    52ca:	af00      	add	r7, sp, #0
    52cc:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    52ce:	687b      	ldr	r3, [r7, #4]
    52d0:	7e1b      	ldrb	r3, [r3, #24]
    52d2:	b2db      	uxtb	r3, r3
}
    52d4:	4618      	mov	r0, r3
    52d6:	370c      	adds	r7, #12
    52d8:	46bd      	mov	sp, r7
    52da:	f85d 7b04 	ldr.w	r7, [sp], #4
    52de:	4770      	bx	lr

000052e0 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    52e0:	b480      	push	{r7}
    52e2:	b083      	sub	sp, #12
    52e4:	af00      	add	r7, sp, #0
    52e6:	6078      	str	r0, [r7, #4]
    52e8:	460b      	mov	r3, r1
    52ea:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    52ec:	687b      	ldr	r3, [r7, #4]
    52ee:	78fa      	ldrb	r2, [r7, #3]
    52f0:	761a      	strb	r2, [r3, #24]
}
    52f2:	bf00      	nop
    52f4:	370c      	adds	r7, #12
    52f6:	46bd      	mov	sp, r7
    52f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    52fc:	4770      	bx	lr
	...

00005300 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5300:	b580      	push	{r7, lr}
    5302:	b082      	sub	sp, #8
    5304:	af00      	add	r7, sp, #0
    5306:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5308:	687b      	ldr	r3, [r7, #4]
    530a:	681b      	ldr	r3, [r3, #0]
    530c:	f043 0202 	orr.w	r2, r3, #2
    5310:	687b      	ldr	r3, [r7, #4]
    5312:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5314:	2103      	movs	r1, #3
    5316:	6878      	ldr	r0, [r7, #4]
    5318:	4b02      	ldr	r3, [pc, #8]	; (5324 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    531a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    531c:	bf00      	nop
    531e:	3708      	adds	r7, #8
    5320:	46bd      	mov	sp, r7
    5322:	bd80      	pop	{r7, pc}
    5324:	000051b9 	.word	0x000051b9

00005328 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5328:	b580      	push	{r7, lr}
    532a:	b082      	sub	sp, #8
    532c:	af00      	add	r7, sp, #0
    532e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5330:	687b      	ldr	r3, [r7, #4]
    5332:	681b      	ldr	r3, [r3, #0]
    5334:	f023 0202 	bic.w	r2, r3, #2
    5338:	687b      	ldr	r3, [r7, #4]
    533a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    533c:	2103      	movs	r1, #3
    533e:	6878      	ldr	r0, [r7, #4]
    5340:	4b02      	ldr	r3, [pc, #8]	; (534c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5342:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5344:	bf00      	nop
    5346:	3708      	adds	r7, #8
    5348:	46bd      	mov	sp, r7
    534a:	bd80      	pop	{r7, pc}
    534c:	000051b9 	.word	0x000051b9

00005350 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5350:	b480      	push	{r7}
    5352:	b085      	sub	sp, #20
    5354:	af00      	add	r7, sp, #0
    5356:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5358:	687b      	ldr	r3, [r7, #4]
    535a:	681b      	ldr	r3, [r3, #0]
    535c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    535e:	68fb      	ldr	r3, [r7, #12]
    5360:	0edb      	lsrs	r3, r3, #27
    5362:	f003 0301 	and.w	r3, r3, #1
    5366:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5368:	68fb      	ldr	r3, [r7, #12]
    536a:	2b00      	cmp	r3, #0
    536c:	bf14      	ite	ne
    536e:	2301      	movne	r3, #1
    5370:	2300      	moveq	r3, #0
    5372:	b2db      	uxtb	r3, r3
}
    5374:	4618      	mov	r0, r3
    5376:	3714      	adds	r7, #20
    5378:	46bd      	mov	sp, r7
    537a:	f85d 7b04 	ldr.w	r7, [sp], #4
    537e:	4770      	bx	lr

00005380 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5380:	b580      	push	{r7, lr}
    5382:	b084      	sub	sp, #16
    5384:	af00      	add	r7, sp, #0
    5386:	6078      	str	r0, [r7, #4]
    5388:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    538a:	2103      	movs	r1, #3
    538c:	6878      	ldr	r0, [r7, #4]
    538e:	4b07      	ldr	r3, [pc, #28]	; (53ac <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5390:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5392:	687b      	ldr	r3, [r7, #4]
    5394:	681b      	ldr	r3, [r3, #0]
    5396:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5398:	68fa      	ldr	r2, [r7, #12]
    539a:	683b      	ldr	r3, [r7, #0]
    539c:	4013      	ands	r3, r2
    539e:	60fb      	str	r3, [r7, #12]
	return tmp;
    53a0:	68fb      	ldr	r3, [r7, #12]
}
    53a2:	4618      	mov	r0, r3
    53a4:	3710      	adds	r7, #16
    53a6:	46bd      	mov	sp, r7
    53a8:	bd80      	pop	{r7, pc}
    53aa:	bf00      	nop
    53ac:	000051b9 	.word	0x000051b9

000053b0 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    53b0:	b580      	push	{r7, lr}
    53b2:	b082      	sub	sp, #8
    53b4:	af00      	add	r7, sp, #0
    53b6:	6078      	str	r0, [r7, #4]
    53b8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    53ba:	687b      	ldr	r3, [r7, #4]
    53bc:	683a      	ldr	r2, [r7, #0]
    53be:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    53c0:	2103      	movs	r1, #3
    53c2:	6878      	ldr	r0, [r7, #4]
    53c4:	4b02      	ldr	r3, [pc, #8]	; (53d0 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    53c6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    53c8:	bf00      	nop
    53ca:	3708      	adds	r7, #8
    53cc:	46bd      	mov	sp, r7
    53ce:	bd80      	pop	{r7, pc}
    53d0:	000051b9 	.word	0x000051b9

000053d4 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    53d4:	b580      	push	{r7, lr}
    53d6:	b084      	sub	sp, #16
    53d8:	af00      	add	r7, sp, #0
    53da:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    53dc:	2103      	movs	r1, #3
    53de:	6878      	ldr	r0, [r7, #4]
    53e0:	4b09      	ldr	r3, [pc, #36]	; (5408 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    53e2:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    53e4:	687b      	ldr	r3, [r7, #4]
    53e6:	681b      	ldr	r3, [r3, #0]
    53e8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    53ea:	68fb      	ldr	r3, [r7, #12]
    53ec:	085b      	lsrs	r3, r3, #1
    53ee:	f003 0301 	and.w	r3, r3, #1
    53f2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    53f4:	68fb      	ldr	r3, [r7, #12]
    53f6:	2b00      	cmp	r3, #0
    53f8:	bf14      	ite	ne
    53fa:	2301      	movne	r3, #1
    53fc:	2300      	moveq	r3, #0
    53fe:	b2db      	uxtb	r3, r3
}
    5400:	4618      	mov	r0, r3
    5402:	3710      	adds	r7, #16
    5404:	46bd      	mov	sp, r7
    5406:	bd80      	pop	{r7, pc}
    5408:	00005205 	.word	0x00005205

0000540c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    540c:	b580      	push	{r7, lr}
    540e:	b082      	sub	sp, #8
    5410:	af00      	add	r7, sp, #0
    5412:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5414:	687b      	ldr	r3, [r7, #4]
    5416:	681b      	ldr	r3, [r3, #0]
    5418:	f023 0202 	bic.w	r2, r3, #2
    541c:	687b      	ldr	r3, [r7, #4]
    541e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5420:	2103      	movs	r1, #3
    5422:	6878      	ldr	r0, [r7, #4]
    5424:	4b02      	ldr	r3, [pc, #8]	; (5430 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5426:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5428:	bf00      	nop
    542a:	3708      	adds	r7, #8
    542c:	46bd      	mov	sp, r7
    542e:	bd80      	pop	{r7, pc}
    5430:	00005205 	.word	0x00005205

00005434 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5434:	b580      	push	{r7, lr}
    5436:	b084      	sub	sp, #16
    5438:	af00      	add	r7, sp, #0
    543a:	6078      	str	r0, [r7, #4]
    543c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    543e:	2103      	movs	r1, #3
    5440:	6878      	ldr	r0, [r7, #4]
    5442:	4b07      	ldr	r3, [pc, #28]	; (5460 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5444:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5446:	687b      	ldr	r3, [r7, #4]
    5448:	681b      	ldr	r3, [r3, #0]
    544a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    544c:	68fa      	ldr	r2, [r7, #12]
    544e:	683b      	ldr	r3, [r7, #0]
    5450:	4013      	ands	r3, r2
    5452:	60fb      	str	r3, [r7, #12]
	return tmp;
    5454:	68fb      	ldr	r3, [r7, #12]
}
    5456:	4618      	mov	r0, r3
    5458:	3710      	adds	r7, #16
    545a:	46bd      	mov	sp, r7
    545c:	bd80      	pop	{r7, pc}
    545e:	bf00      	nop
    5460:	00005205 	.word	0x00005205

00005464 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5464:	b580      	push	{r7, lr}
    5466:	b082      	sub	sp, #8
    5468:	af00      	add	r7, sp, #0
    546a:	6078      	str	r0, [r7, #4]
    546c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    546e:	687b      	ldr	r3, [r7, #4]
    5470:	683a      	ldr	r2, [r7, #0]
    5472:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5474:	2103      	movs	r1, #3
    5476:	6878      	ldr	r0, [r7, #4]
    5478:	4b02      	ldr	r3, [pc, #8]	; (5484 <hri_sercomspi_write_CTRLA_reg+0x20>)
    547a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    547c:	bf00      	nop
    547e:	3708      	adds	r7, #8
    5480:	46bd      	mov	sp, r7
    5482:	bd80      	pop	{r7, pc}
    5484:	00005205 	.word	0x00005205

00005488 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5488:	b580      	push	{r7, lr}
    548a:	b082      	sub	sp, #8
    548c:	af00      	add	r7, sp, #0
    548e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5490:	687b      	ldr	r3, [r7, #4]
    5492:	685b      	ldr	r3, [r3, #4]
    5494:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5498:	687b      	ldr	r3, [r7, #4]
    549a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    549c:	2104      	movs	r1, #4
    549e:	6878      	ldr	r0, [r7, #4]
    54a0:	4b02      	ldr	r3, [pc, #8]	; (54ac <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    54a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    54a4:	bf00      	nop
    54a6:	3708      	adds	r7, #8
    54a8:	46bd      	mov	sp, r7
    54aa:	bd80      	pop	{r7, pc}
    54ac:	000051b9 	.word	0x000051b9

000054b0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    54b0:	b580      	push	{r7, lr}
    54b2:	b082      	sub	sp, #8
    54b4:	af00      	add	r7, sp, #0
    54b6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    54b8:	687b      	ldr	r3, [r7, #4]
    54ba:	685b      	ldr	r3, [r3, #4]
    54bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    54c0:	687b      	ldr	r3, [r7, #4]
    54c2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    54c4:	2104      	movs	r1, #4
    54c6:	6878      	ldr	r0, [r7, #4]
    54c8:	4b02      	ldr	r3, [pc, #8]	; (54d4 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    54ca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    54cc:	bf00      	nop
    54ce:	3708      	adds	r7, #8
    54d0:	46bd      	mov	sp, r7
    54d2:	bd80      	pop	{r7, pc}
    54d4:	000051b9 	.word	0x000051b9

000054d8 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    54d8:	b580      	push	{r7, lr}
    54da:	b082      	sub	sp, #8
    54dc:	af00      	add	r7, sp, #0
    54de:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    54e0:	687b      	ldr	r3, [r7, #4]
    54e2:	685b      	ldr	r3, [r3, #4]
    54e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    54e8:	687b      	ldr	r3, [r7, #4]
    54ea:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    54ec:	2104      	movs	r1, #4
    54ee:	6878      	ldr	r0, [r7, #4]
    54f0:	4b02      	ldr	r3, [pc, #8]	; (54fc <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    54f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    54f4:	bf00      	nop
    54f6:	3708      	adds	r7, #8
    54f8:	46bd      	mov	sp, r7
    54fa:	bd80      	pop	{r7, pc}
    54fc:	000051b9 	.word	0x000051b9

00005500 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5500:	b580      	push	{r7, lr}
    5502:	b082      	sub	sp, #8
    5504:	af00      	add	r7, sp, #0
    5506:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5508:	687b      	ldr	r3, [r7, #4]
    550a:	685b      	ldr	r3, [r3, #4]
    550c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5510:	687b      	ldr	r3, [r7, #4]
    5512:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5514:	2104      	movs	r1, #4
    5516:	6878      	ldr	r0, [r7, #4]
    5518:	4b02      	ldr	r3, [pc, #8]	; (5524 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    551a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    551c:	bf00      	nop
    551e:	3708      	adds	r7, #8
    5520:	46bd      	mov	sp, r7
    5522:	bd80      	pop	{r7, pc}
    5524:	000051b9 	.word	0x000051b9

00005528 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5528:	b580      	push	{r7, lr}
    552a:	b082      	sub	sp, #8
    552c:	af00      	add	r7, sp, #0
    552e:	6078      	str	r0, [r7, #4]
    5530:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5532:	687b      	ldr	r3, [r7, #4]
    5534:	685a      	ldr	r2, [r3, #4]
    5536:	683b      	ldr	r3, [r7, #0]
    5538:	041b      	lsls	r3, r3, #16
    553a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    553e:	431a      	orrs	r2, r3
    5540:	687b      	ldr	r3, [r7, #4]
    5542:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5544:	2104      	movs	r1, #4
    5546:	6878      	ldr	r0, [r7, #4]
    5548:	4b02      	ldr	r3, [pc, #8]	; (5554 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    554a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    554c:	bf00      	nop
    554e:	3708      	adds	r7, #8
    5550:	46bd      	mov	sp, r7
    5552:	bd80      	pop	{r7, pc}
    5554:	000051b9 	.word	0x000051b9

00005558 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5558:	b580      	push	{r7, lr}
    555a:	b082      	sub	sp, #8
    555c:	af00      	add	r7, sp, #0
    555e:	6078      	str	r0, [r7, #4]
    5560:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5562:	687b      	ldr	r3, [r7, #4]
    5564:	683a      	ldr	r2, [r7, #0]
    5566:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5568:	2104      	movs	r1, #4
    556a:	6878      	ldr	r0, [r7, #4]
    556c:	4b02      	ldr	r3, [pc, #8]	; (5578 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    556e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5570:	bf00      	nop
    5572:	3708      	adds	r7, #8
    5574:	46bd      	mov	sp, r7
    5576:	bd80      	pop	{r7, pc}
    5578:	000051b9 	.word	0x000051b9

0000557c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    557c:	b580      	push	{r7, lr}
    557e:	b082      	sub	sp, #8
    5580:	af00      	add	r7, sp, #0
    5582:	6078      	str	r0, [r7, #4]
    5584:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5586:	687b      	ldr	r3, [r7, #4]
    5588:	683a      	ldr	r2, [r7, #0]
    558a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    558c:	2117      	movs	r1, #23
    558e:	6878      	ldr	r0, [r7, #4]
    5590:	4b02      	ldr	r3, [pc, #8]	; (559c <hri_sercomspi_write_CTRLB_reg+0x20>)
    5592:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5594:	bf00      	nop
    5596:	3708      	adds	r7, #8
    5598:	46bd      	mov	sp, r7
    559a:	bd80      	pop	{r7, pc}
    559c:	00005205 	.word	0x00005205

000055a0 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    55a0:	b480      	push	{r7}
    55a2:	b083      	sub	sp, #12
    55a4:	af00      	add	r7, sp, #0
    55a6:	6078      	str	r0, [r7, #4]
    55a8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    55aa:	687b      	ldr	r3, [r7, #4]
    55ac:	683a      	ldr	r2, [r7, #0]
    55ae:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    55b0:	bf00      	nop
    55b2:	370c      	adds	r7, #12
    55b4:	46bd      	mov	sp, r7
    55b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    55ba:	4770      	bx	lr

000055bc <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    55bc:	b480      	push	{r7}
    55be:	b083      	sub	sp, #12
    55c0:	af00      	add	r7, sp, #0
    55c2:	6078      	str	r0, [r7, #4]
    55c4:	460b      	mov	r3, r1
    55c6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    55c8:	687b      	ldr	r3, [r7, #4]
    55ca:	78fa      	ldrb	r2, [r7, #3]
    55cc:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    55ce:	bf00      	nop
    55d0:	370c      	adds	r7, #12
    55d2:	46bd      	mov	sp, r7
    55d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    55d8:	4770      	bx	lr
	...

000055dc <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    55dc:	b580      	push	{r7, lr}
    55de:	b084      	sub	sp, #16
    55e0:	af00      	add	r7, sp, #0
    55e2:	6078      	str	r0, [r7, #4]
    55e4:	460b      	mov	r3, r1
    55e6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    55e8:	687b      	ldr	r3, [r7, #4]
    55ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    55ec:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    55ee:	68fb      	ldr	r3, [r7, #12]
    55f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    55f4:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    55f6:	78fb      	ldrb	r3, [r7, #3]
    55f8:	039b      	lsls	r3, r3, #14
    55fa:	461a      	mov	r2, r3
    55fc:	68fb      	ldr	r3, [r7, #12]
    55fe:	4313      	orrs	r3, r2
    5600:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5602:	687b      	ldr	r3, [r7, #4]
    5604:	68fa      	ldr	r2, [r7, #12]
    5606:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5608:	2104      	movs	r1, #4
    560a:	6878      	ldr	r0, [r7, #4]
    560c:	4b02      	ldr	r3, [pc, #8]	; (5618 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    560e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5610:	bf00      	nop
    5612:	3710      	adds	r7, #16
    5614:	46bd      	mov	sp, r7
    5616:	bd80      	pop	{r7, pc}
    5618:	000051b9 	.word	0x000051b9

0000561c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    561c:	b580      	push	{r7, lr}
    561e:	b082      	sub	sp, #8
    5620:	af00      	add	r7, sp, #0
    5622:	6078      	str	r0, [r7, #4]
    5624:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5626:	687b      	ldr	r3, [r7, #4]
    5628:	683a      	ldr	r2, [r7, #0]
    562a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    562c:	2104      	movs	r1, #4
    562e:	6878      	ldr	r0, [r7, #4]
    5630:	4b02      	ldr	r3, [pc, #8]	; (563c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5632:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5634:	bf00      	nop
    5636:	3708      	adds	r7, #8
    5638:	46bd      	mov	sp, r7
    563a:	bd80      	pop	{r7, pc}
    563c:	000051b9 	.word	0x000051b9

00005640 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5640:	b580      	push	{r7, lr}
    5642:	b082      	sub	sp, #8
    5644:	af00      	add	r7, sp, #0
    5646:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5648:	2104      	movs	r1, #4
    564a:	6878      	ldr	r0, [r7, #4]
    564c:	4b03      	ldr	r3, [pc, #12]	; (565c <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    564e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5650:	687b      	ldr	r3, [r7, #4]
    5652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5654:	4618      	mov	r0, r3
    5656:	3708      	adds	r7, #8
    5658:	46bd      	mov	sp, r7
    565a:	bd80      	pop	{r7, pc}
    565c:	000051b9 	.word	0x000051b9

00005660 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5660:	b480      	push	{r7}
    5662:	b083      	sub	sp, #12
    5664:	af00      	add	r7, sp, #0
    5666:	6078      	str	r0, [r7, #4]
    5668:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    566a:	687b      	ldr	r3, [r7, #4]
    566c:	683a      	ldr	r2, [r7, #0]
    566e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5670:	bf00      	nop
    5672:	370c      	adds	r7, #12
    5674:	46bd      	mov	sp, r7
    5676:	f85d 7b04 	ldr.w	r7, [sp], #4
    567a:	4770      	bx	lr

0000567c <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    567c:	b580      	push	{r7, lr}
    567e:	b082      	sub	sp, #8
    5680:	af00      	add	r7, sp, #0
    5682:	6078      	str	r0, [r7, #4]
    5684:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    5686:	687b      	ldr	r3, [r7, #4]
    5688:	683a      	ldr	r2, [r7, #0]
    568a:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    568c:	2104      	movs	r1, #4
    568e:	6878      	ldr	r0, [r7, #4]
    5690:	4b02      	ldr	r3, [pc, #8]	; (569c <hri_sercomi2cm_write_DATA_reg+0x20>)
    5692:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5694:	bf00      	nop
    5696:	3708      	adds	r7, #8
    5698:	46bd      	mov	sp, r7
    569a:	bd80      	pop	{r7, pc}
    569c:	000051b9 	.word	0x000051b9

000056a0 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    56a0:	b580      	push	{r7, lr}
    56a2:	b082      	sub	sp, #8
    56a4:	af00      	add	r7, sp, #0
    56a6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    56a8:	2104      	movs	r1, #4
    56aa:	6878      	ldr	r0, [r7, #4]
    56ac:	4b03      	ldr	r3, [pc, #12]	; (56bc <hri_sercomi2cm_read_DATA_reg+0x1c>)
    56ae:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    56b0:	687b      	ldr	r3, [r7, #4]
    56b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    56b4:	4618      	mov	r0, r3
    56b6:	3708      	adds	r7, #8
    56b8:	46bd      	mov	sp, r7
    56ba:	bd80      	pop	{r7, pc}
    56bc:	000051b9 	.word	0x000051b9

000056c0 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    56c0:	b480      	push	{r7}
    56c2:	b083      	sub	sp, #12
    56c4:	af00      	add	r7, sp, #0
    56c6:	6078      	str	r0, [r7, #4]
    56c8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    56ca:	687b      	ldr	r3, [r7, #4]
    56cc:	683a      	ldr	r2, [r7, #0]
    56ce:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    56d0:	bf00      	nop
    56d2:	370c      	adds	r7, #12
    56d4:	46bd      	mov	sp, r7
    56d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    56da:	4770      	bx	lr

000056dc <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    56dc:	b480      	push	{r7}
    56de:	b083      	sub	sp, #12
    56e0:	af00      	add	r7, sp, #0
    56e2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    56e4:	687b      	ldr	r3, [r7, #4]
    56e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    56e8:	4618      	mov	r0, r3
    56ea:	370c      	adds	r7, #12
    56ec:	46bd      	mov	sp, r7
    56ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    56f2:	4770      	bx	lr

000056f4 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    56f4:	b480      	push	{r7}
    56f6:	b083      	sub	sp, #12
    56f8:	af00      	add	r7, sp, #0
    56fa:	6078      	str	r0, [r7, #4]
    56fc:	460b      	mov	r3, r1
    56fe:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    5700:	687b      	ldr	r3, [r7, #4]
    5702:	78fa      	ldrb	r2, [r7, #3]
    5704:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5708:	bf00      	nop
    570a:	370c      	adds	r7, #12
    570c:	46bd      	mov	sp, r7
    570e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5712:	4770      	bx	lr

00005714 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    5714:	b480      	push	{r7}
    5716:	b083      	sub	sp, #12
    5718:	af00      	add	r7, sp, #0
    571a:	6078      	str	r0, [r7, #4]
    571c:	460b      	mov	r3, r1
    571e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    5720:	687b      	ldr	r3, [r7, #4]
    5722:	887a      	ldrh	r2, [r7, #2]
    5724:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5726:	bf00      	nop
    5728:	370c      	adds	r7, #12
    572a:	46bd      	mov	sp, r7
    572c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5730:	4770      	bx	lr
	...

00005734 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    5734:	b580      	push	{r7, lr}
    5736:	b082      	sub	sp, #8
    5738:	af00      	add	r7, sp, #0
    573a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    573c:	2104      	movs	r1, #4
    573e:	6878      	ldr	r0, [r7, #4]
    5740:	4b06      	ldr	r3, [pc, #24]	; (575c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    5742:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    5744:	687b      	ldr	r3, [r7, #4]
    5746:	8b5b      	ldrh	r3, [r3, #26]
    5748:	b29b      	uxth	r3, r3
    574a:	091b      	lsrs	r3, r3, #4
    574c:	b29b      	uxth	r3, r3
    574e:	f003 0303 	and.w	r3, r3, #3
    5752:	b29b      	uxth	r3, r3
}
    5754:	4618      	mov	r0, r3
    5756:	3708      	adds	r7, #8
    5758:	46bd      	mov	sp, r7
    575a:	bd80      	pop	{r7, pc}
    575c:	000051b9 	.word	0x000051b9

00005760 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    5760:	b580      	push	{r7, lr}
    5762:	b082      	sub	sp, #8
    5764:	af00      	add	r7, sp, #0
    5766:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5768:	2104      	movs	r1, #4
    576a:	6878      	ldr	r0, [r7, #4]
    576c:	4b04      	ldr	r3, [pc, #16]	; (5780 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    576e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    5770:	687b      	ldr	r3, [r7, #4]
    5772:	8b5b      	ldrh	r3, [r3, #26]
    5774:	b29b      	uxth	r3, r3
}
    5776:	4618      	mov	r0, r3
    5778:	3708      	adds	r7, #8
    577a:	46bd      	mov	sp, r7
    577c:	bd80      	pop	{r7, pc}
    577e:	bf00      	nop
    5780:	000051b9 	.word	0x000051b9

00005784 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    5784:	b580      	push	{r7, lr}
    5786:	b082      	sub	sp, #8
    5788:	af00      	add	r7, sp, #0
    578a:	6078      	str	r0, [r7, #4]
    578c:	460b      	mov	r3, r1
    578e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    5790:	687b      	ldr	r3, [r7, #4]
    5792:	887a      	ldrh	r2, [r7, #2]
    5794:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5796:	2104      	movs	r1, #4
    5798:	6878      	ldr	r0, [r7, #4]
    579a:	4b03      	ldr	r3, [pc, #12]	; (57a8 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    579c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    579e:	bf00      	nop
    57a0:	3708      	adds	r7, #8
    57a2:	46bd      	mov	sp, r7
    57a4:	bd80      	pop	{r7, pc}
    57a6:	bf00      	nop
    57a8:	000051b9 	.word	0x000051b9

000057ac <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    57ac:	b4b0      	push	{r4, r5, r7}
    57ae:	b08d      	sub	sp, #52	; 0x34
    57b0:	af00      	add	r7, sp, #0
    57b2:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    57b4:	4b13      	ldr	r3, [pc, #76]	; (5804 <_sercom_get_hardware_index+0x58>)
    57b6:	f107 040c 	add.w	r4, r7, #12
    57ba:	461d      	mov	r5, r3
    57bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    57be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    57c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    57c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    57c8:	2300      	movs	r3, #0
    57ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    57cc:	e010      	b.n	57f0 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    57ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    57d0:	009b      	lsls	r3, r3, #2
    57d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    57d6:	4413      	add	r3, r2
    57d8:	f853 3c24 	ldr.w	r3, [r3, #-36]
    57dc:	461a      	mov	r2, r3
    57de:	687b      	ldr	r3, [r7, #4]
    57e0:	429a      	cmp	r2, r3
    57e2:	d102      	bne.n	57ea <_sercom_get_hardware_index+0x3e>
			return i;
    57e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    57e6:	b2db      	uxtb	r3, r3
    57e8:	e006      	b.n	57f8 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    57ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    57ec:	3301      	adds	r3, #1
    57ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    57f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    57f2:	2b07      	cmp	r3, #7
    57f4:	d9eb      	bls.n	57ce <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    57f6:	2300      	movs	r3, #0
}
    57f8:	4618      	mov	r0, r3
    57fa:	3734      	adds	r7, #52	; 0x34
    57fc:	46bd      	mov	sp, r7
    57fe:	bcb0      	pop	{r4, r5, r7}
    5800:	4770      	bx	lr
    5802:	bf00      	nop
    5804:	0000d204 	.word	0x0000d204

00005808 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    5808:	b580      	push	{r7, lr}
    580a:	b084      	sub	sp, #16
    580c:	af00      	add	r7, sp, #0
    580e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    5810:	6878      	ldr	r0, [r7, #4]
    5812:	4b13      	ldr	r3, [pc, #76]	; (5860 <_get_i2cm_index+0x58>)
    5814:	4798      	blx	r3
    5816:	4603      	mov	r3, r0
    5818:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    581a:	2300      	movs	r3, #0
    581c:	73fb      	strb	r3, [r7, #15]
    581e:	e010      	b.n	5842 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    5820:	7bfa      	ldrb	r2, [r7, #15]
    5822:	4910      	ldr	r1, [pc, #64]	; (5864 <_get_i2cm_index+0x5c>)
    5824:	4613      	mov	r3, r2
    5826:	005b      	lsls	r3, r3, #1
    5828:	4413      	add	r3, r2
    582a:	00db      	lsls	r3, r3, #3
    582c:	440b      	add	r3, r1
    582e:	781b      	ldrb	r3, [r3, #0]
    5830:	7bba      	ldrb	r2, [r7, #14]
    5832:	429a      	cmp	r2, r3
    5834:	d102      	bne.n	583c <_get_i2cm_index+0x34>
			return i;
    5836:	f997 300f 	ldrsb.w	r3, [r7, #15]
    583a:	e00d      	b.n	5858 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    583c:	7bfb      	ldrb	r3, [r7, #15]
    583e:	3301      	adds	r3, #1
    5840:	73fb      	strb	r3, [r7, #15]
    5842:	7bfb      	ldrb	r3, [r7, #15]
    5844:	2b02      	cmp	r3, #2
    5846:	d9eb      	bls.n	5820 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    5848:	f240 32a6 	movw	r2, #934	; 0x3a6
    584c:	4906      	ldr	r1, [pc, #24]	; (5868 <_get_i2cm_index+0x60>)
    584e:	2000      	movs	r0, #0
    5850:	4b06      	ldr	r3, [pc, #24]	; (586c <_get_i2cm_index+0x64>)
    5852:	4798      	blx	r3
	return -1;
    5854:	f04f 33ff 	mov.w	r3, #4294967295
}
    5858:	4618      	mov	r0, r3
    585a:	3710      	adds	r7, #16
    585c:	46bd      	mov	sp, r7
    585e:	bd80      	pop	{r7, pc}
    5860:	000057ad 	.word	0x000057ad
    5864:	20000018 	.word	0x20000018
    5868:	0000d1e8 	.word	0x0000d1e8
    586c:	00002de1 	.word	0x00002de1

00005870 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    5870:	b580      	push	{r7, lr}
    5872:	b082      	sub	sp, #8
    5874:	af00      	add	r7, sp, #0
    5876:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    5878:	2103      	movs	r1, #3
    587a:	6878      	ldr	r0, [r7, #4]
    587c:	4b02      	ldr	r3, [pc, #8]	; (5888 <_sercom_i2c_send_stop+0x18>)
    587e:	4798      	blx	r3
}
    5880:	bf00      	nop
    5882:	3708      	adds	r7, #8
    5884:	46bd      	mov	sp, r7
    5886:	bd80      	pop	{r7, pc}
    5888:	00005529 	.word	0x00005529

0000588c <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    588c:	b590      	push	{r4, r7, lr}
    588e:	b087      	sub	sp, #28
    5890:	af00      	add	r7, sp, #0
    5892:	60f8      	str	r0, [r7, #12]
    5894:	60b9      	str	r1, [r7, #8]
    5896:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    5898:	68f8      	ldr	r0, [r7, #12]
    589a:	4b7d      	ldr	r3, [pc, #500]	; (5a90 <_sercom_i2c_sync_analyse_flags+0x204>)
    589c:	4798      	blx	r3
    589e:	4603      	mov	r3, r0
    58a0:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    58a2:	68f8      	ldr	r0, [r7, #12]
    58a4:	4b7b      	ldr	r3, [pc, #492]	; (5a94 <_sercom_i2c_sync_analyse_flags+0x208>)
    58a6:	4798      	blx	r3
    58a8:	4603      	mov	r3, r0
    58aa:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    58ac:	68bb      	ldr	r3, [r7, #8]
    58ae:	f003 0301 	and.w	r3, r3, #1
    58b2:	2b00      	cmp	r3, #0
    58b4:	f000 8095 	beq.w	59e2 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    58b8:	8a7b      	ldrh	r3, [r7, #18]
    58ba:	f003 0302 	and.w	r3, r3, #2
    58be:	2b00      	cmp	r3, #0
    58c0:	d01d      	beq.n	58fe <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    58c2:	68f8      	ldr	r0, [r7, #12]
    58c4:	4b74      	ldr	r3, [pc, #464]	; (5a98 <_sercom_i2c_sync_analyse_flags+0x20c>)
    58c6:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    58c8:	687b      	ldr	r3, [r7, #4]
    58ca:	885b      	ldrh	r3, [r3, #2]
    58cc:	b29b      	uxth	r3, r3
    58ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    58d2:	b29a      	uxth	r2, r3
    58d4:	687b      	ldr	r3, [r7, #4]
    58d6:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    58d8:	687b      	ldr	r3, [r7, #4]
    58da:	885b      	ldrh	r3, [r3, #2]
    58dc:	b29b      	uxth	r3, r3
    58de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    58e2:	b29a      	uxth	r2, r3
    58e4:	687b      	ldr	r3, [r7, #4]
    58e6:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    58e8:	8a7b      	ldrh	r3, [r7, #18]
    58ea:	f003 0301 	and.w	r3, r3, #1
    58ee:	2b00      	cmp	r3, #0
    58f0:	d002      	beq.n	58f8 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    58f2:	f06f 0304 	mvn.w	r3, #4
    58f6:	e0c6      	b.n	5a86 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    58f8:	f06f 0303 	mvn.w	r3, #3
    58fc:	e0c3      	b.n	5a86 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    58fe:	8a7b      	ldrh	r3, [r7, #18]
    5900:	f003 0304 	and.w	r3, r3, #4
    5904:	2b00      	cmp	r3, #0
    5906:	d01f      	beq.n	5948 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    5908:	687b      	ldr	r3, [r7, #4]
    590a:	685b      	ldr	r3, [r3, #4]
    590c:	2b00      	cmp	r3, #0
    590e:	dd07      	ble.n	5920 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    5910:	687b      	ldr	r3, [r7, #4]
    5912:	885b      	ldrh	r3, [r3, #2]
    5914:	b29b      	uxth	r3, r3
    5916:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    591a:	b29a      	uxth	r2, r3
    591c:	687b      	ldr	r3, [r7, #4]
    591e:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    5920:	687b      	ldr	r3, [r7, #4]
    5922:	885b      	ldrh	r3, [r3, #2]
    5924:	b29b      	uxth	r3, r3
    5926:	b21b      	sxth	r3, r3
    5928:	2b00      	cmp	r3, #0
    592a:	da02      	bge.n	5932 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    592c:	68f8      	ldr	r0, [r7, #12]
    592e:	4b5b      	ldr	r3, [pc, #364]	; (5a9c <_sercom_i2c_sync_analyse_flags+0x210>)
    5930:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5932:	687b      	ldr	r3, [r7, #4]
    5934:	885b      	ldrh	r3, [r3, #2]
    5936:	b29b      	uxth	r3, r3
    5938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    593c:	b29a      	uxth	r2, r3
    593e:	687b      	ldr	r3, [r7, #4]
    5940:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    5942:	f06f 0301 	mvn.w	r3, #1
    5946:	e09e      	b.n	5a86 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    5948:	687b      	ldr	r3, [r7, #4]
    594a:	885b      	ldrh	r3, [r3, #2]
    594c:	b29b      	uxth	r3, r3
    594e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5952:	2b00      	cmp	r3, #0
    5954:	d01c      	beq.n	5990 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    5956:	687b      	ldr	r3, [r7, #4]
    5958:	881b      	ldrh	r3, [r3, #0]
    595a:	121b      	asrs	r3, r3, #8
    595c:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    595e:	f003 0406 	and.w	r4, r3, #6
    5962:	68f8      	ldr	r0, [r7, #12]
    5964:	4b4e      	ldr	r3, [pc, #312]	; (5aa0 <_sercom_i2c_sync_analyse_flags+0x214>)
    5966:	4798      	blx	r3
    5968:	4603      	mov	r3, r0
    596a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    596e:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    5970:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    5974:	4619      	mov	r1, r3
    5976:	68f8      	ldr	r0, [r7, #12]
    5978:	4b4a      	ldr	r3, [pc, #296]	; (5aa4 <_sercom_i2c_sync_analyse_flags+0x218>)
    597a:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    597c:	687b      	ldr	r3, [r7, #4]
    597e:	885b      	ldrh	r3, [r3, #2]
    5980:	b29b      	uxth	r3, r3
    5982:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    5986:	b29a      	uxth	r2, r3
    5988:	687b      	ldr	r3, [r7, #4]
    598a:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    598c:	2300      	movs	r3, #0
    598e:	e07a      	b.n	5a86 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	685b      	ldr	r3, [r3, #4]
    5994:	2b00      	cmp	r3, #0
    5996:	d111      	bne.n	59bc <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    5998:	687b      	ldr	r3, [r7, #4]
    599a:	885b      	ldrh	r3, [r3, #2]
    599c:	b29b      	uxth	r3, r3
    599e:	b21b      	sxth	r3, r3
    59a0:	2b00      	cmp	r3, #0
    59a2:	da02      	bge.n	59aa <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    59a4:	68f8      	ldr	r0, [r7, #12]
    59a6:	4b3d      	ldr	r3, [pc, #244]	; (5a9c <_sercom_i2c_sync_analyse_flags+0x210>)
    59a8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    59aa:	687b      	ldr	r3, [r7, #4]
    59ac:	885b      	ldrh	r3, [r3, #2]
    59ae:	b29b      	uxth	r3, r3
    59b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    59b4:	b29a      	uxth	r2, r3
    59b6:	687b      	ldr	r3, [r7, #4]
    59b8:	805a      	strh	r2, [r3, #2]
    59ba:	e010      	b.n	59de <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    59bc:	687b      	ldr	r3, [r7, #4]
    59be:	689b      	ldr	r3, [r3, #8]
    59c0:	781b      	ldrb	r3, [r3, #0]
    59c2:	4619      	mov	r1, r3
    59c4:	68f8      	ldr	r0, [r7, #12]
    59c6:	4b38      	ldr	r3, [pc, #224]	; (5aa8 <_sercom_i2c_sync_analyse_flags+0x21c>)
    59c8:	4798      	blx	r3
				msg->buffer++;
    59ca:	687b      	ldr	r3, [r7, #4]
    59cc:	689b      	ldr	r3, [r3, #8]
    59ce:	1c5a      	adds	r2, r3, #1
    59d0:	687b      	ldr	r3, [r7, #4]
    59d2:	609a      	str	r2, [r3, #8]
				msg->len--;
    59d4:	687b      	ldr	r3, [r7, #4]
    59d6:	685b      	ldr	r3, [r3, #4]
    59d8:	1e5a      	subs	r2, r3, #1
    59da:	687b      	ldr	r3, [r7, #4]
    59dc:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    59de:	2300      	movs	r3, #0
    59e0:	e051      	b.n	5a86 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    59e2:	68bb      	ldr	r3, [r7, #8]
    59e4:	f003 0302 	and.w	r3, r3, #2
    59e8:	2b00      	cmp	r3, #0
    59ea:	d04b      	beq.n	5a84 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    59ec:	687b      	ldr	r3, [r7, #4]
    59ee:	685b      	ldr	r3, [r3, #4]
    59f0:	2b00      	cmp	r3, #0
    59f2:	d041      	beq.n	5a78 <_sercom_i2c_sync_analyse_flags+0x1ec>
    59f4:	8a7b      	ldrh	r3, [r7, #18]
    59f6:	f003 0304 	and.w	r3, r3, #4
    59fa:	2b00      	cmp	r3, #0
    59fc:	d13c      	bne.n	5a78 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    59fe:	687b      	ldr	r3, [r7, #4]
    5a00:	685b      	ldr	r3, [r3, #4]
    5a02:	1e5a      	subs	r2, r3, #1
    5a04:	687b      	ldr	r3, [r7, #4]
    5a06:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    5a08:	687b      	ldr	r3, [r7, #4]
    5a0a:	685b      	ldr	r3, [r3, #4]
    5a0c:	2b00      	cmp	r3, #0
    5a0e:	d102      	bne.n	5a16 <_sercom_i2c_sync_analyse_flags+0x18a>
    5a10:	697b      	ldr	r3, [r7, #20]
    5a12:	2b00      	cmp	r3, #0
    5a14:	d006      	beq.n	5a24 <_sercom_i2c_sync_analyse_flags+0x198>
    5a16:	687b      	ldr	r3, [r7, #4]
    5a18:	685b      	ldr	r3, [r3, #4]
    5a1a:	2b01      	cmp	r3, #1
    5a1c:	d105      	bne.n	5a2a <_sercom_i2c_sync_analyse_flags+0x19e>
    5a1e:	697b      	ldr	r3, [r7, #20]
    5a20:	2b00      	cmp	r3, #0
    5a22:	d002      	beq.n	5a2a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    5a24:	68f8      	ldr	r0, [r7, #12]
    5a26:	4b21      	ldr	r3, [pc, #132]	; (5aac <_sercom_i2c_sync_analyse_flags+0x220>)
    5a28:	4798      	blx	r3
			}

			if (msg->len == 0) {
    5a2a:	687b      	ldr	r3, [r7, #4]
    5a2c:	685b      	ldr	r3, [r3, #4]
    5a2e:	2b00      	cmp	r3, #0
    5a30:	d113      	bne.n	5a5a <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    5a32:	687b      	ldr	r3, [r7, #4]
    5a34:	885b      	ldrh	r3, [r3, #2]
    5a36:	b29b      	uxth	r3, r3
    5a38:	b21b      	sxth	r3, r3
    5a3a:	2b00      	cmp	r3, #0
    5a3c:	da05      	bge.n	5a4a <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    5a3e:	68f8      	ldr	r0, [r7, #12]
    5a40:	4b1b      	ldr	r3, [pc, #108]	; (5ab0 <_sercom_i2c_sync_analyse_flags+0x224>)
    5a42:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    5a44:	68f8      	ldr	r0, [r7, #12]
    5a46:	4b15      	ldr	r3, [pc, #84]	; (5a9c <_sercom_i2c_sync_analyse_flags+0x210>)
    5a48:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5a4a:	687b      	ldr	r3, [r7, #4]
    5a4c:	885b      	ldrh	r3, [r3, #2]
    5a4e:	b29b      	uxth	r3, r3
    5a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5a54:	b29a      	uxth	r2, r3
    5a56:	687b      	ldr	r3, [r7, #4]
    5a58:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    5a5a:	687b      	ldr	r3, [r7, #4]
    5a5c:	689c      	ldr	r4, [r3, #8]
    5a5e:	1c62      	adds	r2, r4, #1
    5a60:	687b      	ldr	r3, [r7, #4]
    5a62:	609a      	str	r2, [r3, #8]
    5a64:	68f8      	ldr	r0, [r7, #12]
    5a66:	4b13      	ldr	r3, [pc, #76]	; (5ab4 <_sercom_i2c_sync_analyse_flags+0x228>)
    5a68:	4798      	blx	r3
    5a6a:	4603      	mov	r3, r0
    5a6c:	b2db      	uxtb	r3, r3
    5a6e:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    5a70:	68f8      	ldr	r0, [r7, #12]
    5a72:	4b11      	ldr	r3, [pc, #68]	; (5ab8 <_sercom_i2c_sync_analyse_flags+0x22c>)
    5a74:	4798      	blx	r3
    5a76:	e005      	b.n	5a84 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    5a78:	68f8      	ldr	r0, [r7, #12]
    5a7a:	4b0f      	ldr	r3, [pc, #60]	; (5ab8 <_sercom_i2c_sync_analyse_flags+0x22c>)
    5a7c:	4798      	blx	r3
			return I2C_NACK;
    5a7e:	f06f 0301 	mvn.w	r3, #1
    5a82:	e000      	b.n	5a86 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    5a84:	2300      	movs	r3, #0
}
    5a86:	4618      	mov	r0, r3
    5a88:	371c      	adds	r7, #28
    5a8a:	46bd      	mov	sp, r7
    5a8c:	bd90      	pop	{r4, r7, pc}
    5a8e:	bf00      	nop
    5a90:	00005351 	.word	0x00005351
    5a94:	00005761 	.word	0x00005761
    5a98:	00005251 	.word	0x00005251
    5a9c:	00005871 	.word	0x00005871
    5aa0:	00005641 	.word	0x00005641
    5aa4:	0000561d 	.word	0x0000561d
    5aa8:	0000567d 	.word	0x0000567d
    5aac:	000054d9 	.word	0x000054d9
    5ab0:	000054b1 	.word	0x000054b1
    5ab4:	000056a1 	.word	0x000056a1
    5ab8:	0000526b 	.word	0x0000526b

00005abc <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    5abc:	b580      	push	{r7, lr}
    5abe:	b082      	sub	sp, #8
    5ac0:	af00      	add	r7, sp, #0
    5ac2:	6078      	str	r0, [r7, #4]
    5ac4:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    5ac6:	687b      	ldr	r3, [r7, #4]
    5ac8:	2b00      	cmp	r3, #0
    5aca:	bf14      	ite	ne
    5acc:	2301      	movne	r3, #1
    5ace:	2300      	moveq	r3, #0
    5ad0:	b2db      	uxtb	r3, r3
    5ad2:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    5ad6:	4908      	ldr	r1, [pc, #32]	; (5af8 <_i2c_m_sync_init+0x3c>)
    5ad8:	4618      	mov	r0, r3
    5ada:	4b08      	ldr	r3, [pc, #32]	; (5afc <_i2c_m_sync_init+0x40>)
    5adc:	4798      	blx	r3

	i2c_dev->hw = hw;
    5ade:	687b      	ldr	r3, [r7, #4]
    5ae0:	683a      	ldr	r2, [r7, #0]
    5ae2:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    5ae4:	687b      	ldr	r3, [r7, #4]
    5ae6:	6839      	ldr	r1, [r7, #0]
    5ae8:	4618      	mov	r0, r3
    5aea:	4b05      	ldr	r3, [pc, #20]	; (5b00 <_i2c_m_sync_init+0x44>)
    5aec:	4798      	blx	r3
    5aee:	4603      	mov	r3, r0
}
    5af0:	4618      	mov	r0, r3
    5af2:	3708      	adds	r7, #8
    5af4:	46bd      	mov	sp, r7
    5af6:	bd80      	pop	{r7, pc}
    5af8:	0000d1e8 	.word	0x0000d1e8
    5afc:	00002de1 	.word	0x00002de1
    5b00:	00005ed5 	.word	0x00005ed5

00005b04 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    5b04:	b580      	push	{r7, lr}
    5b06:	b082      	sub	sp, #8
    5b08:	af00      	add	r7, sp, #0
    5b0a:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    5b0c:	687b      	ldr	r3, [r7, #4]
    5b0e:	2b00      	cmp	r3, #0
    5b10:	bf14      	ite	ne
    5b12:	2301      	movne	r3, #1
    5b14:	2300      	moveq	r3, #0
    5b16:	b2db      	uxtb	r3, r3
    5b18:	f240 5235 	movw	r2, #1333	; 0x535
    5b1c:	4906      	ldr	r1, [pc, #24]	; (5b38 <_i2c_m_sync_enable+0x34>)
    5b1e:	4618      	mov	r0, r3
    5b20:	4b06      	ldr	r3, [pc, #24]	; (5b3c <_i2c_m_sync_enable+0x38>)
    5b22:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    5b24:	687b      	ldr	r3, [r7, #4]
    5b26:	691b      	ldr	r3, [r3, #16]
    5b28:	4618      	mov	r0, r3
    5b2a:	4b05      	ldr	r3, [pc, #20]	; (5b40 <_i2c_m_sync_enable+0x3c>)
    5b2c:	4798      	blx	r3
    5b2e:	4603      	mov	r3, r0
}
    5b30:	4618      	mov	r0, r3
    5b32:	3708      	adds	r7, #8
    5b34:	46bd      	mov	sp, r7
    5b36:	bd80      	pop	{r7, pc}
    5b38:	0000d1e8 	.word	0x0000d1e8
    5b3c:	00002de1 	.word	0x00002de1
    5b40:	00005e49 	.word	0x00005e49

00005b44 <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    5b44:	b580      	push	{r7, lr}
    5b46:	b084      	sub	sp, #16
    5b48:	af00      	add	r7, sp, #0
    5b4a:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    5b4c:	687b      	ldr	r3, [r7, #4]
    5b4e:	691b      	ldr	r3, [r3, #16]
    5b50:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    5b52:	687b      	ldr	r3, [r7, #4]
    5b54:	2b00      	cmp	r3, #0
    5b56:	bf14      	ite	ne
    5b58:	2301      	movne	r3, #1
    5b5a:	2300      	moveq	r3, #0
    5b5c:	b2db      	uxtb	r3, r3
    5b5e:	f240 5243 	movw	r2, #1347	; 0x543
    5b62:	490c      	ldr	r1, [pc, #48]	; (5b94 <_i2c_m_sync_disable+0x50>)
    5b64:	4618      	mov	r0, r3
    5b66:	4b0c      	ldr	r3, [pc, #48]	; (5b98 <_i2c_m_sync_disable+0x54>)
    5b68:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    5b6a:	687b      	ldr	r3, [r7, #4]
    5b6c:	691b      	ldr	r3, [r3, #16]
    5b6e:	2b00      	cmp	r3, #0
    5b70:	bf14      	ite	ne
    5b72:	2301      	movne	r3, #1
    5b74:	2300      	moveq	r3, #0
    5b76:	b2db      	uxtb	r3, r3
    5b78:	f240 5244 	movw	r2, #1348	; 0x544
    5b7c:	4905      	ldr	r1, [pc, #20]	; (5b94 <_i2c_m_sync_disable+0x50>)
    5b7e:	4618      	mov	r0, r3
    5b80:	4b05      	ldr	r3, [pc, #20]	; (5b98 <_i2c_m_sync_disable+0x54>)
    5b82:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    5b84:	68f8      	ldr	r0, [r7, #12]
    5b86:	4b05      	ldr	r3, [pc, #20]	; (5b9c <_i2c_m_sync_disable+0x58>)
    5b88:	4798      	blx	r3

	return ERR_NONE;
    5b8a:	2300      	movs	r3, #0
}
    5b8c:	4618      	mov	r0, r3
    5b8e:	3710      	adds	r7, #16
    5b90:	46bd      	mov	sp, r7
    5b92:	bd80      	pop	{r7, pc}
    5b94:	0000d1e8 	.word	0x0000d1e8
    5b98:	00002de1 	.word	0x00002de1
    5b9c:	00005329 	.word	0x00005329

00005ba0 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    5ba0:	b580      	push	{r7, lr}
    5ba2:	b084      	sub	sp, #16
    5ba4:	af00      	add	r7, sp, #0
    5ba6:	6078      	str	r0, [r7, #4]
    5ba8:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    5baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5bae:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    5bb0:	687b      	ldr	r3, [r7, #4]
    5bb2:	691b      	ldr	r3, [r3, #16]
    5bb4:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    5bb6:	68b8      	ldr	r0, [r7, #8]
    5bb8:	4b0f      	ldr	r3, [pc, #60]	; (5bf8 <_sercom_i2c_sync_wait_bus+0x58>)
    5bba:	4798      	blx	r3
    5bbc:	4603      	mov	r3, r0
    5bbe:	461a      	mov	r2, r3
    5bc0:	683b      	ldr	r3, [r7, #0]
    5bc2:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    5bc4:	68fb      	ldr	r3, [r7, #12]
    5bc6:	1e5a      	subs	r2, r3, #1
    5bc8:	60fa      	str	r2, [r7, #12]
    5bca:	2b00      	cmp	r3, #0
    5bcc:	d102      	bne.n	5bd4 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    5bce:	f06f 0304 	mvn.w	r3, #4
    5bd2:	e00c      	b.n	5bee <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    5bd4:	683b      	ldr	r3, [r7, #0]
    5bd6:	681b      	ldr	r3, [r3, #0]
    5bd8:	f003 0301 	and.w	r3, r3, #1
    5bdc:	2b00      	cmp	r3, #0
    5bde:	d105      	bne.n	5bec <_sercom_i2c_sync_wait_bus+0x4c>
    5be0:	683b      	ldr	r3, [r7, #0]
    5be2:	681b      	ldr	r3, [r3, #0]
    5be4:	f003 0302 	and.w	r3, r3, #2
    5be8:	2b00      	cmp	r3, #0
    5bea:	d0e4      	beq.n	5bb6 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    5bec:	2300      	movs	r3, #0
}
    5bee:	4618      	mov	r0, r3
    5bf0:	3710      	adds	r7, #16
    5bf2:	46bd      	mov	sp, r7
    5bf4:	bd80      	pop	{r7, pc}
    5bf6:	bf00      	nop
    5bf8:	00005285 	.word	0x00005285

00005bfc <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    5bfc:	b590      	push	{r4, r7, lr}
    5bfe:	b087      	sub	sp, #28
    5c00:	af00      	add	r7, sp, #0
    5c02:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    5c04:	687b      	ldr	r3, [r7, #4]
    5c06:	691b      	ldr	r3, [r3, #16]
    5c08:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    5c0a:	687b      	ldr	r3, [r7, #4]
    5c0c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    5c0e:	6978      	ldr	r0, [r7, #20]
    5c10:	4b39      	ldr	r3, [pc, #228]	; (5cf8 <_sercom_i2c_sync_send_address+0xfc>)
    5c12:	4798      	blx	r3
    5c14:	4603      	mov	r3, r0
    5c16:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    5c18:	687b      	ldr	r3, [r7, #4]
    5c1a:	2b00      	cmp	r3, #0
    5c1c:	bf14      	ite	ne
    5c1e:	2301      	movne	r3, #1
    5c20:	2300      	moveq	r3, #0
    5c22:	b2db      	uxtb	r3, r3
    5c24:	f240 52a5 	movw	r2, #1445	; 0x5a5
    5c28:	4934      	ldr	r1, [pc, #208]	; (5cfc <_sercom_i2c_sync_send_address+0x100>)
    5c2a:	4618      	mov	r0, r3
    5c2c:	4b34      	ldr	r3, [pc, #208]	; (5d00 <_sercom_i2c_sync_send_address+0x104>)
    5c2e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    5c30:	693b      	ldr	r3, [r7, #16]
    5c32:	685b      	ldr	r3, [r3, #4]
    5c34:	2b01      	cmp	r3, #1
    5c36:	d106      	bne.n	5c46 <_sercom_i2c_sync_send_address+0x4a>
    5c38:	68fb      	ldr	r3, [r7, #12]
    5c3a:	2b00      	cmp	r3, #0
    5c3c:	d003      	beq.n	5c46 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    5c3e:	6978      	ldr	r0, [r7, #20]
    5c40:	4b30      	ldr	r3, [pc, #192]	; (5d04 <_sercom_i2c_sync_send_address+0x108>)
    5c42:	4798      	blx	r3
    5c44:	e002      	b.n	5c4c <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    5c46:	6978      	ldr	r0, [r7, #20]
    5c48:	4b2f      	ldr	r3, [pc, #188]	; (5d08 <_sercom_i2c_sync_send_address+0x10c>)
    5c4a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    5c4c:	693b      	ldr	r3, [r7, #16]
    5c4e:	881b      	ldrh	r3, [r3, #0]
    5c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5c54:	2b00      	cmp	r3, #0
    5c56:	d022      	beq.n	5c9e <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    5c58:	693b      	ldr	r3, [r7, #16]
    5c5a:	885b      	ldrh	r3, [r3, #2]
    5c5c:	b29b      	uxth	r3, r3
    5c5e:	f003 0301 	and.w	r3, r3, #1
    5c62:	2b00      	cmp	r3, #0
    5c64:	d007      	beq.n	5c76 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    5c66:	693b      	ldr	r3, [r7, #16]
    5c68:	885b      	ldrh	r3, [r3, #2]
    5c6a:	b29b      	uxth	r3, r3
    5c6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    5c70:	b29a      	uxth	r2, r3
    5c72:	693b      	ldr	r3, [r7, #16]
    5c74:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    5c76:	693b      	ldr	r3, [r7, #16]
    5c78:	881b      	ldrh	r3, [r3, #0]
    5c7a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    5c7c:	f240 74fe 	movw	r4, #2046	; 0x7fe
    5c80:	401c      	ands	r4, r3
    5c82:	6978      	ldr	r0, [r7, #20]
    5c84:	4b21      	ldr	r3, [pc, #132]	; (5d0c <_sercom_i2c_sync_send_address+0x110>)
    5c86:	4798      	blx	r3
    5c88:	4603      	mov	r3, r0
    5c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5c8e:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    5c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    5c94:	4619      	mov	r1, r3
    5c96:	6978      	ldr	r0, [r7, #20]
    5c98:	4b1d      	ldr	r3, [pc, #116]	; (5d10 <_sercom_i2c_sync_send_address+0x114>)
    5c9a:	4798      	blx	r3
    5c9c:	e01a      	b.n	5cd4 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    5c9e:	693b      	ldr	r3, [r7, #16]
    5ca0:	881b      	ldrh	r3, [r3, #0]
    5ca2:	005b      	lsls	r3, r3, #1
    5ca4:	b2db      	uxtb	r3, r3
    5ca6:	693a      	ldr	r2, [r7, #16]
    5ca8:	8852      	ldrh	r2, [r2, #2]
    5caa:	b292      	uxth	r2, r2
    5cac:	f002 0201 	and.w	r2, r2, #1
    5cb0:	2a00      	cmp	r2, #0
    5cb2:	bf14      	ite	ne
    5cb4:	2201      	movne	r2, #1
    5cb6:	2200      	moveq	r2, #0
    5cb8:	b2d2      	uxtb	r2, r2
    5cba:	4313      	orrs	r3, r2
    5cbc:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    5cbe:	6978      	ldr	r0, [r7, #20]
    5cc0:	4b12      	ldr	r3, [pc, #72]	; (5d0c <_sercom_i2c_sync_send_address+0x110>)
    5cc2:	4798      	blx	r3
    5cc4:	4603      	mov	r3, r0
    5cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    5cca:	4323      	orrs	r3, r4
    5ccc:	4619      	mov	r1, r3
    5cce:	6978      	ldr	r0, [r7, #20]
    5cd0:	4b0f      	ldr	r3, [pc, #60]	; (5d10 <_sercom_i2c_sync_send_address+0x114>)
    5cd2:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    5cd4:	f107 0308 	add.w	r3, r7, #8
    5cd8:	4619      	mov	r1, r3
    5cda:	6878      	ldr	r0, [r7, #4]
    5cdc:	4b0d      	ldr	r3, [pc, #52]	; (5d14 <_sercom_i2c_sync_send_address+0x118>)
    5cde:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    5ce0:	68bb      	ldr	r3, [r7, #8]
    5ce2:	693a      	ldr	r2, [r7, #16]
    5ce4:	4619      	mov	r1, r3
    5ce6:	6978      	ldr	r0, [r7, #20]
    5ce8:	4b0b      	ldr	r3, [pc, #44]	; (5d18 <_sercom_i2c_sync_send_address+0x11c>)
    5cea:	4798      	blx	r3
    5cec:	4603      	mov	r3, r0
}
    5cee:	4618      	mov	r0, r3
    5cf0:	371c      	adds	r7, #28
    5cf2:	46bd      	mov	sp, r7
    5cf4:	bd90      	pop	{r4, r7, pc}
    5cf6:	bf00      	nop
    5cf8:	00005351 	.word	0x00005351
    5cfc:	0000d1e8 	.word	0x0000d1e8
    5d00:	00002de1 	.word	0x00002de1
    5d04:	000054d9 	.word	0x000054d9
    5d08:	00005501 	.word	0x00005501
    5d0c:	00005641 	.word	0x00005641
    5d10:	0000561d 	.word	0x0000561d
    5d14:	00005ba1 	.word	0x00005ba1
    5d18:	0000588d 	.word	0x0000588d

00005d1c <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    5d1c:	b580      	push	{r7, lr}
    5d1e:	b086      	sub	sp, #24
    5d20:	af00      	add	r7, sp, #0
    5d22:	6078      	str	r0, [r7, #4]
    5d24:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    5d26:	687b      	ldr	r3, [r7, #4]
    5d28:	691b      	ldr	r3, [r3, #16]
    5d2a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    5d2c:	687b      	ldr	r3, [r7, #4]
    5d2e:	2b00      	cmp	r3, #0
    5d30:	bf14      	ite	ne
    5d32:	2301      	movne	r3, #1
    5d34:	2300      	moveq	r3, #0
    5d36:	b2db      	uxtb	r3, r3
    5d38:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    5d3c:	493b      	ldr	r1, [pc, #236]	; (5e2c <_i2c_m_sync_transfer+0x110>)
    5d3e:	4618      	mov	r0, r3
    5d40:	4b3b      	ldr	r3, [pc, #236]	; (5e30 <_i2c_m_sync_transfer+0x114>)
    5d42:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    5d44:	687b      	ldr	r3, [r7, #4]
    5d46:	691b      	ldr	r3, [r3, #16]
    5d48:	2b00      	cmp	r3, #0
    5d4a:	bf14      	ite	ne
    5d4c:	2301      	movne	r3, #1
    5d4e:	2300      	moveq	r3, #0
    5d50:	b2db      	uxtb	r3, r3
    5d52:	f240 52d1 	movw	r2, #1489	; 0x5d1
    5d56:	4935      	ldr	r1, [pc, #212]	; (5e2c <_i2c_m_sync_transfer+0x110>)
    5d58:	4618      	mov	r0, r3
    5d5a:	4b35      	ldr	r3, [pc, #212]	; (5e30 <_i2c_m_sync_transfer+0x114>)
    5d5c:	4798      	blx	r3
	ASSERT(msg);
    5d5e:	683b      	ldr	r3, [r7, #0]
    5d60:	2b00      	cmp	r3, #0
    5d62:	bf14      	ite	ne
    5d64:	2301      	movne	r3, #1
    5d66:	2300      	moveq	r3, #0
    5d68:	b2db      	uxtb	r3, r3
    5d6a:	f240 52d2 	movw	r2, #1490	; 0x5d2
    5d6e:	492f      	ldr	r1, [pc, #188]	; (5e2c <_i2c_m_sync_transfer+0x110>)
    5d70:	4618      	mov	r0, r3
    5d72:	4b2f      	ldr	r3, [pc, #188]	; (5e30 <_i2c_m_sync_transfer+0x114>)
    5d74:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    5d76:	687b      	ldr	r3, [r7, #4]
    5d78:	885b      	ldrh	r3, [r3, #2]
    5d7a:	b29b      	uxth	r3, r3
    5d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5d80:	2b00      	cmp	r3, #0
    5d82:	d002      	beq.n	5d8a <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    5d84:	f06f 0305 	mvn.w	r3, #5
    5d88:	e04c      	b.n	5e24 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    5d8a:	683b      	ldr	r3, [r7, #0]
    5d8c:	885b      	ldrh	r3, [r3, #2]
    5d8e:	b29b      	uxth	r3, r3
    5d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5d94:	b29a      	uxth	r2, r3
    5d96:	683b      	ldr	r3, [r7, #0]
    5d98:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    5d9a:	687b      	ldr	r3, [r7, #4]
    5d9c:	683a      	ldr	r2, [r7, #0]
    5d9e:	ca07      	ldmia	r2, {r0, r1, r2}
    5da0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    5da4:	6938      	ldr	r0, [r7, #16]
    5da6:	4b23      	ldr	r3, [pc, #140]	; (5e34 <_i2c_m_sync_transfer+0x118>)
    5da8:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    5daa:	6878      	ldr	r0, [r7, #4]
    5dac:	4b22      	ldr	r3, [pc, #136]	; (5e38 <_i2c_m_sync_transfer+0x11c>)
    5dae:	4798      	blx	r3
    5db0:	6178      	str	r0, [r7, #20]

	if (ret) {
    5db2:	697b      	ldr	r3, [r7, #20]
    5db4:	2b00      	cmp	r3, #0
    5db6:	d02d      	beq.n	5e14 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    5db8:	687b      	ldr	r3, [r7, #4]
    5dba:	885b      	ldrh	r3, [r3, #2]
    5dbc:	b29b      	uxth	r3, r3
    5dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5dc2:	b29a      	uxth	r2, r3
    5dc4:	687b      	ldr	r3, [r7, #4]
    5dc6:	805a      	strh	r2, [r3, #2]

		return ret;
    5dc8:	697b      	ldr	r3, [r7, #20]
    5dca:	e02b      	b.n	5e24 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    5dcc:	f107 030c 	add.w	r3, r7, #12
    5dd0:	4619      	mov	r1, r3
    5dd2:	6878      	ldr	r0, [r7, #4]
    5dd4:	4b19      	ldr	r3, [pc, #100]	; (5e3c <_i2c_m_sync_transfer+0x120>)
    5dd6:	4798      	blx	r3
    5dd8:	6178      	str	r0, [r7, #20]

		if (ret) {
    5dda:	697b      	ldr	r3, [r7, #20]
    5ddc:	2b00      	cmp	r3, #0
    5dde:	d012      	beq.n	5e06 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    5de0:	683b      	ldr	r3, [r7, #0]
    5de2:	885b      	ldrh	r3, [r3, #2]
    5de4:	b29b      	uxth	r3, r3
    5de6:	b21b      	sxth	r3, r3
    5de8:	2b00      	cmp	r3, #0
    5dea:	da02      	bge.n	5df2 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    5dec:	6938      	ldr	r0, [r7, #16]
    5dee:	4b14      	ldr	r3, [pc, #80]	; (5e40 <_i2c_m_sync_transfer+0x124>)
    5df0:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    5df2:	687b      	ldr	r3, [r7, #4]
    5df4:	885b      	ldrh	r3, [r3, #2]
    5df6:	b29b      	uxth	r3, r3
    5df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5dfc:	b29a      	uxth	r2, r3
    5dfe:	687b      	ldr	r3, [r7, #4]
    5e00:	805a      	strh	r2, [r3, #2]

			return ret;
    5e02:	697b      	ldr	r3, [r7, #20]
    5e04:	e00e      	b.n	5e24 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    5e06:	68fb      	ldr	r3, [r7, #12]
    5e08:	687a      	ldr	r2, [r7, #4]
    5e0a:	4619      	mov	r1, r3
    5e0c:	6938      	ldr	r0, [r7, #16]
    5e0e:	4b0d      	ldr	r3, [pc, #52]	; (5e44 <_i2c_m_sync_transfer+0x128>)
    5e10:	4798      	blx	r3
    5e12:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    5e14:	687b      	ldr	r3, [r7, #4]
    5e16:	885b      	ldrh	r3, [r3, #2]
    5e18:	b29b      	uxth	r3, r3
    5e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d1d4      	bne.n	5dcc <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    5e22:	697b      	ldr	r3, [r7, #20]
}
    5e24:	4618      	mov	r0, r3
    5e26:	3718      	adds	r7, #24
    5e28:	46bd      	mov	sp, r7
    5e2a:	bd80      	pop	{r7, pc}
    5e2c:	0000d1e8 	.word	0x0000d1e8
    5e30:	00002de1 	.word	0x00002de1
    5e34:	00005489 	.word	0x00005489
    5e38:	00005bfd 	.word	0x00005bfd
    5e3c:	00005ba1 	.word	0x00005ba1
    5e40:	00005871 	.word	0x00005871
    5e44:	0000588d 	.word	0x0000588d

00005e48 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    5e48:	b580      	push	{r7, lr}
    5e4a:	b084      	sub	sp, #16
    5e4c:	af00      	add	r7, sp, #0
    5e4e:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    5e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5e54:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    5e56:	2304      	movs	r3, #4
    5e58:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    5e5a:	687b      	ldr	r3, [r7, #4]
    5e5c:	2b00      	cmp	r3, #0
    5e5e:	bf14      	ite	ne
    5e60:	2301      	movne	r3, #1
    5e62:	2300      	moveq	r3, #0
    5e64:	b2db      	uxtb	r3, r3
    5e66:	f240 6205 	movw	r2, #1541	; 0x605
    5e6a:	4915      	ldr	r1, [pc, #84]	; (5ec0 <_i2c_m_enable_implementation+0x78>)
    5e6c:	4618      	mov	r0, r3
    5e6e:	4b15      	ldr	r3, [pc, #84]	; (5ec4 <_i2c_m_enable_implementation+0x7c>)
    5e70:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    5e72:	6878      	ldr	r0, [r7, #4]
    5e74:	4b14      	ldr	r3, [pc, #80]	; (5ec8 <_i2c_m_enable_implementation+0x80>)
    5e76:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    5e78:	e016      	b.n	5ea8 <_i2c_m_enable_implementation+0x60>
		timeout--;
    5e7a:	68fb      	ldr	r3, [r7, #12]
    5e7c:	3b01      	subs	r3, #1
    5e7e:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    5e80:	68fb      	ldr	r3, [r7, #12]
    5e82:	2b00      	cmp	r3, #0
    5e84:	dc10      	bgt.n	5ea8 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    5e86:	68bb      	ldr	r3, [r7, #8]
    5e88:	3b01      	subs	r3, #1
    5e8a:	60bb      	str	r3, [r7, #8]
    5e8c:	68bb      	ldr	r3, [r7, #8]
    5e8e:	2b00      	cmp	r3, #0
    5e90:	d007      	beq.n	5ea2 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    5e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5e96:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    5e98:	2110      	movs	r1, #16
    5e9a:	6878      	ldr	r0, [r7, #4]
    5e9c:	4b0b      	ldr	r3, [pc, #44]	; (5ecc <_i2c_m_enable_implementation+0x84>)
    5e9e:	4798      	blx	r3
    5ea0:	e002      	b.n	5ea8 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    5ea2:	f06f 0305 	mvn.w	r3, #5
    5ea6:	e006      	b.n	5eb6 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    5ea8:	6878      	ldr	r0, [r7, #4]
    5eaa:	4b09      	ldr	r3, [pc, #36]	; (5ed0 <_i2c_m_enable_implementation+0x88>)
    5eac:	4798      	blx	r3
    5eae:	4603      	mov	r3, r0
    5eb0:	2b01      	cmp	r3, #1
    5eb2:	d1e2      	bne.n	5e7a <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    5eb4:	2300      	movs	r3, #0
}
    5eb6:	4618      	mov	r0, r3
    5eb8:	3710      	adds	r7, #16
    5eba:	46bd      	mov	sp, r7
    5ebc:	bd80      	pop	{r7, pc}
    5ebe:	bf00      	nop
    5ec0:	0000d1e8 	.word	0x0000d1e8
    5ec4:	00002de1 	.word	0x00002de1
    5ec8:	00005301 	.word	0x00005301
    5ecc:	00005785 	.word	0x00005785
    5ed0:	00005735 	.word	0x00005735

00005ed4 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    5ed4:	b580      	push	{r7, lr}
    5ed6:	b084      	sub	sp, #16
    5ed8:	af00      	add	r7, sp, #0
    5eda:	6078      	str	r0, [r7, #4]
    5edc:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    5ede:	6838      	ldr	r0, [r7, #0]
    5ee0:	4b42      	ldr	r3, [pc, #264]	; (5fec <_i2c_m_sync_init_impl+0x118>)
    5ee2:	4798      	blx	r3
    5ee4:	4603      	mov	r3, r0
    5ee6:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    5ee8:	2101      	movs	r1, #1
    5eea:	6838      	ldr	r0, [r7, #0]
    5eec:	4b40      	ldr	r3, [pc, #256]	; (5ff0 <_i2c_m_sync_init_impl+0x11c>)
    5eee:	4798      	blx	r3
    5ef0:	4603      	mov	r3, r0
    5ef2:	f083 0301 	eor.w	r3, r3, #1
    5ef6:	b2db      	uxtb	r3, r3
    5ef8:	2b00      	cmp	r3, #0
    5efa:	d020      	beq.n	5f3e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    5efc:	7bfa      	ldrb	r2, [r7, #15]
    5efe:	493d      	ldr	r1, [pc, #244]	; (5ff4 <_i2c_m_sync_init_impl+0x120>)
    5f00:	4613      	mov	r3, r2
    5f02:	005b      	lsls	r3, r3, #1
    5f04:	4413      	add	r3, r2
    5f06:	00db      	lsls	r3, r3, #3
    5f08:	440b      	add	r3, r1
    5f0a:	3304      	adds	r3, #4
    5f0c:	681b      	ldr	r3, [r3, #0]
    5f0e:	f003 031c 	and.w	r3, r3, #28
    5f12:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    5f14:	2102      	movs	r1, #2
    5f16:	6838      	ldr	r0, [r7, #0]
    5f18:	4b37      	ldr	r3, [pc, #220]	; (5ff8 <_i2c_m_sync_init_impl+0x124>)
    5f1a:	4798      	blx	r3
    5f1c:	4603      	mov	r3, r0
    5f1e:	2b00      	cmp	r3, #0
    5f20:	d006      	beq.n	5f30 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    5f22:	6838      	ldr	r0, [r7, #0]
    5f24:	4b35      	ldr	r3, [pc, #212]	; (5ffc <_i2c_m_sync_init_impl+0x128>)
    5f26:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    5f28:	2102      	movs	r1, #2
    5f2a:	6838      	ldr	r0, [r7, #0]
    5f2c:	4b34      	ldr	r3, [pc, #208]	; (6000 <_i2c_m_sync_init_impl+0x12c>)
    5f2e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    5f30:	68bb      	ldr	r3, [r7, #8]
    5f32:	f043 0301 	orr.w	r3, r3, #1
    5f36:	4619      	mov	r1, r3
    5f38:	6838      	ldr	r0, [r7, #0]
    5f3a:	4b32      	ldr	r3, [pc, #200]	; (6004 <_i2c_m_sync_init_impl+0x130>)
    5f3c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    5f3e:	2101      	movs	r1, #1
    5f40:	6838      	ldr	r0, [r7, #0]
    5f42:	4b2f      	ldr	r3, [pc, #188]	; (6000 <_i2c_m_sync_init_impl+0x12c>)
    5f44:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    5f46:	7bfa      	ldrb	r2, [r7, #15]
    5f48:	492a      	ldr	r1, [pc, #168]	; (5ff4 <_i2c_m_sync_init_impl+0x120>)
    5f4a:	4613      	mov	r3, r2
    5f4c:	005b      	lsls	r3, r3, #1
    5f4e:	4413      	add	r3, r2
    5f50:	00db      	lsls	r3, r3, #3
    5f52:	440b      	add	r3, r1
    5f54:	3304      	adds	r3, #4
    5f56:	681b      	ldr	r3, [r3, #0]
    5f58:	4619      	mov	r1, r3
    5f5a:	6838      	ldr	r0, [r7, #0]
    5f5c:	4b29      	ldr	r3, [pc, #164]	; (6004 <_i2c_m_sync_init_impl+0x130>)
    5f5e:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    5f60:	7bfa      	ldrb	r2, [r7, #15]
    5f62:	4924      	ldr	r1, [pc, #144]	; (5ff4 <_i2c_m_sync_init_impl+0x120>)
    5f64:	4613      	mov	r3, r2
    5f66:	005b      	lsls	r3, r3, #1
    5f68:	4413      	add	r3, r2
    5f6a:	00db      	lsls	r3, r3, #3
    5f6c:	440b      	add	r3, r1
    5f6e:	3308      	adds	r3, #8
    5f70:	681b      	ldr	r3, [r3, #0]
    5f72:	4619      	mov	r1, r3
    5f74:	6838      	ldr	r0, [r7, #0]
    5f76:	4b24      	ldr	r3, [pc, #144]	; (6008 <_i2c_m_sync_init_impl+0x134>)
    5f78:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    5f7a:	7bfa      	ldrb	r2, [r7, #15]
    5f7c:	491d      	ldr	r1, [pc, #116]	; (5ff4 <_i2c_m_sync_init_impl+0x120>)
    5f7e:	4613      	mov	r3, r2
    5f80:	005b      	lsls	r3, r3, #1
    5f82:	4413      	add	r3, r2
    5f84:	00db      	lsls	r3, r3, #3
    5f86:	440b      	add	r3, r1
    5f88:	330c      	adds	r3, #12
    5f8a:	681b      	ldr	r3, [r3, #0]
    5f8c:	4619      	mov	r1, r3
    5f8e:	6838      	ldr	r0, [r7, #0]
    5f90:	4b1e      	ldr	r3, [pc, #120]	; (600c <_i2c_m_sync_init_impl+0x138>)
    5f92:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    5f94:	7bfa      	ldrb	r2, [r7, #15]
    5f96:	4917      	ldr	r1, [pc, #92]	; (5ff4 <_i2c_m_sync_init_impl+0x120>)
    5f98:	4613      	mov	r3, r2
    5f9a:	005b      	lsls	r3, r3, #1
    5f9c:	4413      	add	r3, r2
    5f9e:	00db      	lsls	r3, r3, #3
    5fa0:	440b      	add	r3, r1
    5fa2:	3304      	adds	r3, #4
    5fa4:	681b      	ldr	r3, [r3, #0]
    5fa6:	0e1b      	lsrs	r3, r3, #24
    5fa8:	b29b      	uxth	r3, r3
    5faa:	f003 0303 	and.w	r3, r3, #3
    5fae:	b29a      	uxth	r2, r3
    5fb0:	687b      	ldr	r3, [r7, #4]
    5fb2:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    5fb4:	687b      	ldr	r3, [r7, #4]
    5fb6:	899b      	ldrh	r3, [r3, #12]
    5fb8:	2b01      	cmp	r3, #1
    5fba:	bf8c      	ite	hi
    5fbc:	2301      	movhi	r3, #1
    5fbe:	2300      	movls	r3, #0
    5fc0:	b2db      	uxtb	r3, r3
    5fc2:	4619      	mov	r1, r3
    5fc4:	6838      	ldr	r0, [r7, #0]
    5fc6:	4b12      	ldr	r3, [pc, #72]	; (6010 <_i2c_m_sync_init_impl+0x13c>)
    5fc8:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    5fca:	7bfa      	ldrb	r2, [r7, #15]
    5fcc:	4909      	ldr	r1, [pc, #36]	; (5ff4 <_i2c_m_sync_init_impl+0x120>)
    5fce:	4613      	mov	r3, r2
    5fd0:	005b      	lsls	r3, r3, #1
    5fd2:	4413      	add	r3, r2
    5fd4:	00db      	lsls	r3, r3, #3
    5fd6:	440b      	add	r3, r1
    5fd8:	3312      	adds	r3, #18
    5fda:	881a      	ldrh	r2, [r3, #0]
    5fdc:	687b      	ldr	r3, [r7, #4]
    5fde:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    5fe0:	2300      	movs	r3, #0
}
    5fe2:	4618      	mov	r0, r3
    5fe4:	3710      	adds	r7, #16
    5fe6:	46bd      	mov	sp, r7
    5fe8:	bd80      	pop	{r7, pc}
    5fea:	bf00      	nop
    5fec:	00005809 	.word	0x00005809
    5ff0:	000051dd 	.word	0x000051dd
    5ff4:	20000018 	.word	0x20000018
    5ff8:	00005381 	.word	0x00005381
    5ffc:	00005329 	.word	0x00005329
    6000:	000051b9 	.word	0x000051b9
    6004:	000053b1 	.word	0x000053b1
    6008:	00005559 	.word	0x00005559
    600c:	000055a1 	.word	0x000055a1
    6010:	000055dd 	.word	0x000055dd

00006014 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6014:	b580      	push	{r7, lr}
    6016:	b082      	sub	sp, #8
    6018:	af00      	add	r7, sp, #0
    601a:	6078      	str	r0, [r7, #4]
    601c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    601e:	687b      	ldr	r3, [r7, #4]
    6020:	2b00      	cmp	r3, #0
    6022:	d004      	beq.n	602e <_spi_load_regs_master+0x1a>
    6024:	683b      	ldr	r3, [r7, #0]
    6026:	2b00      	cmp	r3, #0
    6028:	d001      	beq.n	602e <_spi_load_regs_master+0x1a>
    602a:	2301      	movs	r3, #1
    602c:	e000      	b.n	6030 <_spi_load_regs_master+0x1c>
    602e:	2300      	movs	r3, #0
    6030:	f003 0301 	and.w	r3, r3, #1
    6034:	b2db      	uxtb	r3, r3
    6036:	f640 1209 	movw	r2, #2313	; 0x909
    603a:	4915      	ldr	r1, [pc, #84]	; (6090 <_spi_load_regs_master+0x7c>)
    603c:	4618      	mov	r0, r3
    603e:	4b15      	ldr	r3, [pc, #84]	; (6094 <_spi_load_regs_master+0x80>)
    6040:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6042:	683b      	ldr	r3, [r7, #0]
    6044:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6046:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    604a:	f023 0301 	bic.w	r3, r3, #1
    604e:	4619      	mov	r1, r3
    6050:	6878      	ldr	r0, [r7, #4]
    6052:	4b11      	ldr	r3, [pc, #68]	; (6098 <_spi_load_regs_master+0x84>)
    6054:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6056:	683b      	ldr	r3, [r7, #0]
    6058:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    605a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    605e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6066:	4619      	mov	r1, r3
    6068:	6878      	ldr	r0, [r7, #4]
    606a:	4b0c      	ldr	r3, [pc, #48]	; (609c <_spi_load_regs_master+0x88>)
    606c:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    606e:	683b      	ldr	r3, [r7, #0]
    6070:	7b1b      	ldrb	r3, [r3, #12]
    6072:	4619      	mov	r1, r3
    6074:	6878      	ldr	r0, [r7, #4]
    6076:	4b0a      	ldr	r3, [pc, #40]	; (60a0 <_spi_load_regs_master+0x8c>)
    6078:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    607a:	683b      	ldr	r3, [r7, #0]
    607c:	7b5b      	ldrb	r3, [r3, #13]
    607e:	4619      	mov	r1, r3
    6080:	6878      	ldr	r0, [r7, #4]
    6082:	4b08      	ldr	r3, [pc, #32]	; (60a4 <_spi_load_regs_master+0x90>)
    6084:	4798      	blx	r3
}
    6086:	bf00      	nop
    6088:	3708      	adds	r7, #8
    608a:	46bd      	mov	sp, r7
    608c:	bd80      	pop	{r7, pc}
    608e:	bf00      	nop
    6090:	0000d1e8 	.word	0x0000d1e8
    6094:	00002de1 	.word	0x00002de1
    6098:	00005465 	.word	0x00005465
    609c:	0000557d 	.word	0x0000557d
    60a0:	000055bd 	.word	0x000055bd
    60a4:	000056f5 	.word	0x000056f5

000060a8 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    60a8:	b580      	push	{r7, lr}
    60aa:	b082      	sub	sp, #8
    60ac:	af00      	add	r7, sp, #0
    60ae:	6078      	str	r0, [r7, #4]
    60b0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	2b00      	cmp	r3, #0
    60b6:	d004      	beq.n	60c2 <_spi_load_regs_slave+0x1a>
    60b8:	683b      	ldr	r3, [r7, #0]
    60ba:	2b00      	cmp	r3, #0
    60bc:	d001      	beq.n	60c2 <_spi_load_regs_slave+0x1a>
    60be:	2301      	movs	r3, #1
    60c0:	e000      	b.n	60c4 <_spi_load_regs_slave+0x1c>
    60c2:	2300      	movs	r3, #0
    60c4:	f003 0301 	and.w	r3, r3, #1
    60c8:	b2db      	uxtb	r3, r3
    60ca:	f640 121d 	movw	r2, #2333	; 0x91d
    60ce:	491a      	ldr	r1, [pc, #104]	; (6138 <_spi_load_regs_slave+0x90>)
    60d0:	4618      	mov	r0, r3
    60d2:	4b1a      	ldr	r3, [pc, #104]	; (613c <_spi_load_regs_slave+0x94>)
    60d4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    60d6:	683b      	ldr	r3, [r7, #0]
    60d8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    60da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    60de:	f023 0301 	bic.w	r3, r3, #1
    60e2:	4619      	mov	r1, r3
    60e4:	6878      	ldr	r0, [r7, #4]
    60e6:	4b16      	ldr	r3, [pc, #88]	; (6140 <_spi_load_regs_slave+0x98>)
    60e8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    60ea:	683b      	ldr	r3, [r7, #0]
    60ec:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    60ee:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    60f2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    60f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    60fa:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    60fe:	4619      	mov	r1, r3
    6100:	6878      	ldr	r0, [r7, #4]
    6102:	4b10      	ldr	r3, [pc, #64]	; (6144 <_spi_load_regs_slave+0x9c>)
    6104:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6106:	683b      	ldr	r3, [r7, #0]
    6108:	689b      	ldr	r3, [r3, #8]
    610a:	4619      	mov	r1, r3
    610c:	6878      	ldr	r0, [r7, #4]
    610e:	4b0e      	ldr	r3, [pc, #56]	; (6148 <_spi_load_regs_slave+0xa0>)
    6110:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6112:	683b      	ldr	r3, [r7, #0]
    6114:	7b5b      	ldrb	r3, [r3, #13]
    6116:	4619      	mov	r1, r3
    6118:	6878      	ldr	r0, [r7, #4]
    611a:	4b0c      	ldr	r3, [pc, #48]	; (614c <_spi_load_regs_slave+0xa4>)
    611c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    611e:	bf00      	nop
    6120:	f04f 31ff 	mov.w	r1, #4294967295
    6124:	6878      	ldr	r0, [r7, #4]
    6126:	4b0a      	ldr	r3, [pc, #40]	; (6150 <_spi_load_regs_slave+0xa8>)
    6128:	4798      	blx	r3
    612a:	4603      	mov	r3, r0
    612c:	2b00      	cmp	r3, #0
    612e:	d1f7      	bne.n	6120 <_spi_load_regs_slave+0x78>
		;
}
    6130:	bf00      	nop
    6132:	3708      	adds	r7, #8
    6134:	46bd      	mov	sp, r7
    6136:	bd80      	pop	{r7, pc}
    6138:	0000d1e8 	.word	0x0000d1e8
    613c:	00002de1 	.word	0x00002de1
    6140:	00005465 	.word	0x00005465
    6144:	0000557d 	.word	0x0000557d
    6148:	00005661 	.word	0x00005661
    614c:	000056f5 	.word	0x000056f5
    6150:	00005229 	.word	0x00005229

00006154 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6154:	b580      	push	{r7, lr}
    6156:	b084      	sub	sp, #16
    6158:	af00      	add	r7, sp, #0
    615a:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    615c:	687b      	ldr	r3, [r7, #4]
    615e:	4618      	mov	r0, r3
    6160:	4b11      	ldr	r3, [pc, #68]	; (61a8 <_spi_get_regs+0x54>)
    6162:	4798      	blx	r3
    6164:	4603      	mov	r3, r0
    6166:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6168:	2300      	movs	r3, #0
    616a:	73fb      	strb	r3, [r7, #15]
    616c:	e014      	b.n	6198 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    616e:	7bfa      	ldrb	r2, [r7, #15]
    6170:	490e      	ldr	r1, [pc, #56]	; (61ac <_spi_get_regs+0x58>)
    6172:	4613      	mov	r3, r2
    6174:	011b      	lsls	r3, r3, #4
    6176:	4413      	add	r3, r2
    6178:	440b      	add	r3, r1
    617a:	3310      	adds	r3, #16
    617c:	781b      	ldrb	r3, [r3, #0]
    617e:	7bba      	ldrb	r2, [r7, #14]
    6180:	429a      	cmp	r2, r3
    6182:	d106      	bne.n	6192 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6184:	7bfa      	ldrb	r2, [r7, #15]
    6186:	4613      	mov	r3, r2
    6188:	011b      	lsls	r3, r3, #4
    618a:	4413      	add	r3, r2
    618c:	4a07      	ldr	r2, [pc, #28]	; (61ac <_spi_get_regs+0x58>)
    618e:	4413      	add	r3, r2
    6190:	e006      	b.n	61a0 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6192:	7bfb      	ldrb	r3, [r7, #15]
    6194:	3301      	adds	r3, #1
    6196:	73fb      	strb	r3, [r7, #15]
    6198:	7bfb      	ldrb	r3, [r7, #15]
    619a:	2b01      	cmp	r3, #1
    619c:	d9e7      	bls.n	616e <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    619e:	2300      	movs	r3, #0
}
    61a0:	4618      	mov	r0, r3
    61a2:	3710      	adds	r7, #16
    61a4:	46bd      	mov	sp, r7
    61a6:	bd80      	pop	{r7, pc}
    61a8:	000057ad 	.word	0x000057ad
    61ac:	0000d224 	.word	0x0000d224

000061b0 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    61b0:	b580      	push	{r7, lr}
    61b2:	b084      	sub	sp, #16
    61b4:	af00      	add	r7, sp, #0
    61b6:	6078      	str	r0, [r7, #4]
    61b8:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    61ba:	683b      	ldr	r3, [r7, #0]
    61bc:	4618      	mov	r0, r3
    61be:	4b35      	ldr	r3, [pc, #212]	; (6294 <_spi_m_sync_init+0xe4>)
    61c0:	4798      	blx	r3
    61c2:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    61c4:	687b      	ldr	r3, [r7, #4]
    61c6:	2b00      	cmp	r3, #0
    61c8:	d004      	beq.n	61d4 <_spi_m_sync_init+0x24>
    61ca:	683b      	ldr	r3, [r7, #0]
    61cc:	2b00      	cmp	r3, #0
    61ce:	d001      	beq.n	61d4 <_spi_m_sync_init+0x24>
    61d0:	2301      	movs	r3, #1
    61d2:	e000      	b.n	61d6 <_spi_m_sync_init+0x26>
    61d4:	2300      	movs	r3, #0
    61d6:	f003 0301 	and.w	r3, r3, #1
    61da:	b2db      	uxtb	r3, r3
    61dc:	f640 123f 	movw	r2, #2367	; 0x93f
    61e0:	492d      	ldr	r1, [pc, #180]	; (6298 <_spi_m_sync_init+0xe8>)
    61e2:	4618      	mov	r0, r3
    61e4:	4b2d      	ldr	r3, [pc, #180]	; (629c <_spi_m_sync_init+0xec>)
    61e6:	4798      	blx	r3

	if (regs == NULL) {
    61e8:	68fb      	ldr	r3, [r7, #12]
    61ea:	2b00      	cmp	r3, #0
    61ec:	d102      	bne.n	61f4 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    61ee:	f06f 030c 	mvn.w	r3, #12
    61f2:	e04a      	b.n	628a <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    61f4:	2101      	movs	r1, #1
    61f6:	6838      	ldr	r0, [r7, #0]
    61f8:	4b29      	ldr	r3, [pc, #164]	; (62a0 <_spi_m_sync_init+0xf0>)
    61fa:	4798      	blx	r3
    61fc:	4603      	mov	r3, r0
    61fe:	f083 0301 	eor.w	r3, r3, #1
    6202:	b2db      	uxtb	r3, r3
    6204:	2b00      	cmp	r3, #0
    6206:	d019      	beq.n	623c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6208:	68fb      	ldr	r3, [r7, #12]
    620a:	681b      	ldr	r3, [r3, #0]
    620c:	f003 031c 	and.w	r3, r3, #28
    6210:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6212:	2102      	movs	r1, #2
    6214:	6838      	ldr	r0, [r7, #0]
    6216:	4b23      	ldr	r3, [pc, #140]	; (62a4 <_spi_m_sync_init+0xf4>)
    6218:	4798      	blx	r3
    621a:	4603      	mov	r3, r0
    621c:	2b00      	cmp	r3, #0
    621e:	d006      	beq.n	622e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6220:	6838      	ldr	r0, [r7, #0]
    6222:	4b21      	ldr	r3, [pc, #132]	; (62a8 <_spi_m_sync_init+0xf8>)
    6224:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6226:	2102      	movs	r1, #2
    6228:	6838      	ldr	r0, [r7, #0]
    622a:	4b20      	ldr	r3, [pc, #128]	; (62ac <_spi_m_sync_init+0xfc>)
    622c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    622e:	68bb      	ldr	r3, [r7, #8]
    6230:	f043 0301 	orr.w	r3, r3, #1
    6234:	4619      	mov	r1, r3
    6236:	6838      	ldr	r0, [r7, #0]
    6238:	4b1d      	ldr	r3, [pc, #116]	; (62b0 <_spi_m_sync_init+0x100>)
    623a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    623c:	2101      	movs	r1, #1
    623e:	6838      	ldr	r0, [r7, #0]
    6240:	4b1a      	ldr	r3, [pc, #104]	; (62ac <_spi_m_sync_init+0xfc>)
    6242:	4798      	blx	r3

	dev->prvt = hw;
    6244:	687b      	ldr	r3, [r7, #4]
    6246:	683a      	ldr	r2, [r7, #0]
    6248:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    624a:	68fb      	ldr	r3, [r7, #12]
    624c:	681b      	ldr	r3, [r3, #0]
    624e:	f003 031c 	and.w	r3, r3, #28
    6252:	2b08      	cmp	r3, #8
    6254:	d104      	bne.n	6260 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6256:	68f9      	ldr	r1, [r7, #12]
    6258:	6838      	ldr	r0, [r7, #0]
    625a:	4b16      	ldr	r3, [pc, #88]	; (62b4 <_spi_m_sync_init+0x104>)
    625c:	4798      	blx	r3
    625e:	e003      	b.n	6268 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6260:	68f9      	ldr	r1, [r7, #12]
    6262:	6838      	ldr	r0, [r7, #0]
    6264:	4b14      	ldr	r3, [pc, #80]	; (62b8 <_spi_m_sync_init+0x108>)
    6266:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6268:	68fb      	ldr	r3, [r7, #12]
    626a:	685b      	ldr	r3, [r3, #4]
    626c:	f003 0307 	and.w	r3, r3, #7
    6270:	2b00      	cmp	r3, #0
    6272:	d101      	bne.n	6278 <_spi_m_sync_init+0xc8>
    6274:	2201      	movs	r2, #1
    6276:	e000      	b.n	627a <_spi_m_sync_init+0xca>
    6278:	2202      	movs	r2, #2
    627a:	687b      	ldr	r3, [r7, #4]
    627c:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    627e:	68fb      	ldr	r3, [r7, #12]
    6280:	89db      	ldrh	r3, [r3, #14]
    6282:	b29a      	uxth	r2, r3
    6284:	687b      	ldr	r3, [r7, #4]
    6286:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6288:	2300      	movs	r3, #0
}
    628a:	4618      	mov	r0, r3
    628c:	3710      	adds	r7, #16
    628e:	46bd      	mov	sp, r7
    6290:	bd80      	pop	{r7, pc}
    6292:	bf00      	nop
    6294:	00006155 	.word	0x00006155
    6298:	0000d1e8 	.word	0x0000d1e8
    629c:	00002de1 	.word	0x00002de1
    62a0:	00005229 	.word	0x00005229
    62a4:	00005435 	.word	0x00005435
    62a8:	0000540d 	.word	0x0000540d
    62ac:	00005205 	.word	0x00005205
    62b0:	00005465 	.word	0x00005465
    62b4:	000060a9 	.word	0x000060a9
    62b8:	00006015 	.word	0x00006015

000062bc <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    62bc:	b580      	push	{r7, lr}
    62be:	b082      	sub	sp, #8
    62c0:	af00      	add	r7, sp, #0
    62c2:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    62c4:	bf00      	nop
    62c6:	2103      	movs	r1, #3
    62c8:	6878      	ldr	r0, [r7, #4]
    62ca:	4b06      	ldr	r3, [pc, #24]	; (62e4 <_spi_wait_bus_idle+0x28>)
    62cc:	4798      	blx	r3
    62ce:	4603      	mov	r3, r0
    62d0:	2b00      	cmp	r3, #0
    62d2:	d0f8      	beq.n	62c6 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    62d4:	2103      	movs	r1, #3
    62d6:	6878      	ldr	r0, [r7, #4]
    62d8:	4b03      	ldr	r3, [pc, #12]	; (62e8 <_spi_wait_bus_idle+0x2c>)
    62da:	4798      	blx	r3
}
    62dc:	bf00      	nop
    62de:	3708      	adds	r7, #8
    62e0:	46bd      	mov	sp, r7
    62e2:	bd80      	pop	{r7, pc}
    62e4:	0000529f 	.word	0x0000529f
    62e8:	000052e1 	.word	0x000052e1

000062ec <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    62ec:	b580      	push	{r7, lr}
    62ee:	b086      	sub	sp, #24
    62f0:	af00      	add	r7, sp, #0
    62f2:	60f8      	str	r0, [r7, #12]
    62f4:	60b9      	str	r1, [r7, #8]
    62f6:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    62f8:	68bb      	ldr	r3, [r7, #8]
    62fa:	f003 0304 	and.w	r3, r3, #4
    62fe:	2b00      	cmp	r3, #0
    6300:	d101      	bne.n	6306 <_spi_rx_check_and_receive+0x1a>
		return false;
    6302:	2300      	movs	r3, #0
    6304:	e022      	b.n	634c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6306:	68f8      	ldr	r0, [r7, #12]
    6308:	4b12      	ldr	r3, [pc, #72]	; (6354 <_spi_rx_check_and_receive+0x68>)
    630a:	4798      	blx	r3
    630c:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    630e:	687b      	ldr	r3, [r7, #4]
    6310:	685b      	ldr	r3, [r3, #4]
    6312:	2b00      	cmp	r3, #0
    6314:	d014      	beq.n	6340 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6316:	687b      	ldr	r3, [r7, #4]
    6318:	685b      	ldr	r3, [r3, #4]
    631a:	1c59      	adds	r1, r3, #1
    631c:	687a      	ldr	r2, [r7, #4]
    631e:	6051      	str	r1, [r2, #4]
    6320:	697a      	ldr	r2, [r7, #20]
    6322:	b2d2      	uxtb	r2, r2
    6324:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6326:	687b      	ldr	r3, [r7, #4]
    6328:	7c1b      	ldrb	r3, [r3, #16]
    632a:	2b01      	cmp	r3, #1
    632c:	d908      	bls.n	6340 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    632e:	687b      	ldr	r3, [r7, #4]
    6330:	685b      	ldr	r3, [r3, #4]
    6332:	1c59      	adds	r1, r3, #1
    6334:	687a      	ldr	r2, [r7, #4]
    6336:	6051      	str	r1, [r2, #4]
    6338:	697a      	ldr	r2, [r7, #20]
    633a:	0a12      	lsrs	r2, r2, #8
    633c:	b2d2      	uxtb	r2, r2
    633e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    6340:	687b      	ldr	r3, [r7, #4]
    6342:	68db      	ldr	r3, [r3, #12]
    6344:	1c5a      	adds	r2, r3, #1
    6346:	687b      	ldr	r3, [r7, #4]
    6348:	60da      	str	r2, [r3, #12]

	return true;
    634a:	2301      	movs	r3, #1
}
    634c:	4618      	mov	r0, r3
    634e:	3718      	adds	r7, #24
    6350:	46bd      	mov	sp, r7
    6352:	bd80      	pop	{r7, pc}
    6354:	000056dd 	.word	0x000056dd

00006358 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6358:	b580      	push	{r7, lr}
    635a:	b086      	sub	sp, #24
    635c:	af00      	add	r7, sp, #0
    635e:	60f8      	str	r0, [r7, #12]
    6360:	60b9      	str	r1, [r7, #8]
    6362:	607a      	str	r2, [r7, #4]
    6364:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6366:	68bb      	ldr	r3, [r7, #8]
    6368:	f003 0301 	and.w	r3, r3, #1
    636c:	2b00      	cmp	r3, #0
    636e:	d028      	beq.n	63c2 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6370:	687b      	ldr	r3, [r7, #4]
    6372:	681b      	ldr	r3, [r3, #0]
    6374:	2b00      	cmp	r3, #0
    6376:	d018      	beq.n	63aa <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6378:	687b      	ldr	r3, [r7, #4]
    637a:	681b      	ldr	r3, [r3, #0]
    637c:	1c59      	adds	r1, r3, #1
    637e:	687a      	ldr	r2, [r7, #4]
    6380:	6011      	str	r1, [r2, #0]
    6382:	781b      	ldrb	r3, [r3, #0]
    6384:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6386:	687b      	ldr	r3, [r7, #4]
    6388:	7c1b      	ldrb	r3, [r3, #16]
    638a:	2b01      	cmp	r3, #1
    638c:	d90f      	bls.n	63ae <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    638e:	687b      	ldr	r3, [r7, #4]
    6390:	681b      	ldr	r3, [r3, #0]
    6392:	781b      	ldrb	r3, [r3, #0]
    6394:	021b      	lsls	r3, r3, #8
    6396:	461a      	mov	r2, r3
    6398:	697b      	ldr	r3, [r7, #20]
    639a:	4313      	orrs	r3, r2
    639c:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    639e:	687b      	ldr	r3, [r7, #4]
    63a0:	681b      	ldr	r3, [r3, #0]
    63a2:	1c5a      	adds	r2, r3, #1
    63a4:	687b      	ldr	r3, [r7, #4]
    63a6:	601a      	str	r2, [r3, #0]
    63a8:	e001      	b.n	63ae <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    63aa:	887b      	ldrh	r3, [r7, #2]
    63ac:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    63ae:	687b      	ldr	r3, [r7, #4]
    63b0:	689b      	ldr	r3, [r3, #8]
    63b2:	1c5a      	adds	r2, r3, #1
    63b4:	687b      	ldr	r3, [r7, #4]
    63b6:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    63b8:	6979      	ldr	r1, [r7, #20]
    63ba:	68f8      	ldr	r0, [r7, #12]
    63bc:	4b03      	ldr	r3, [pc, #12]	; (63cc <_spi_tx_check_and_send+0x74>)
    63be:	4798      	blx	r3
    63c0:	e000      	b.n	63c4 <_spi_tx_check_and_send+0x6c>
		return;
    63c2:	bf00      	nop
}
    63c4:	3718      	adds	r7, #24
    63c6:	46bd      	mov	sp, r7
    63c8:	bd80      	pop	{r7, pc}
    63ca:	bf00      	nop
    63cc:	000056c1 	.word	0x000056c1

000063d0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    63d0:	b580      	push	{r7, lr}
    63d2:	b082      	sub	sp, #8
    63d4:	af00      	add	r7, sp, #0
    63d6:	6078      	str	r0, [r7, #4]
    63d8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    63da:	687b      	ldr	r3, [r7, #4]
    63dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    63e0:	2b00      	cmp	r3, #0
    63e2:	d00b      	beq.n	63fc <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    63e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    63e8:	6838      	ldr	r0, [r7, #0]
    63ea:	4b07      	ldr	r3, [pc, #28]	; (6408 <_spi_err_check+0x38>)
    63ec:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    63ee:	2180      	movs	r1, #128	; 0x80
    63f0:	6838      	ldr	r0, [r7, #0]
    63f2:	4b06      	ldr	r3, [pc, #24]	; (640c <_spi_err_check+0x3c>)
    63f4:	4798      	blx	r3
		return ERR_OVERFLOW;
    63f6:	f06f 0312 	mvn.w	r3, #18
    63fa:	e000      	b.n	63fe <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    63fc:	2300      	movs	r3, #0
}
    63fe:	4618      	mov	r0, r3
    6400:	3708      	adds	r7, #8
    6402:	46bd      	mov	sp, r7
    6404:	bd80      	pop	{r7, pc}
    6406:	bf00      	nop
    6408:	00005715 	.word	0x00005715
    640c:	000052e1 	.word	0x000052e1

00006410 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6410:	b590      	push	{r4, r7, lr}
    6412:	b08b      	sub	sp, #44	; 0x2c
    6414:	af00      	add	r7, sp, #0
    6416:	6078      	str	r0, [r7, #4]
    6418:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    641a:	687b      	ldr	r3, [r7, #4]
    641c:	681b      	ldr	r3, [r3, #0]
    641e:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    6420:	2300      	movs	r3, #0
    6422:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6424:	683b      	ldr	r3, [r7, #0]
    6426:	681b      	ldr	r3, [r3, #0]
    6428:	60bb      	str	r3, [r7, #8]
    642a:	683b      	ldr	r3, [r7, #0]
    642c:	685b      	ldr	r3, [r3, #4]
    642e:	60fb      	str	r3, [r7, #12]
    6430:	2300      	movs	r3, #0
    6432:	613b      	str	r3, [r7, #16]
    6434:	2300      	movs	r3, #0
    6436:	617b      	str	r3, [r7, #20]
    6438:	687b      	ldr	r3, [r7, #4]
    643a:	791b      	ldrb	r3, [r3, #4]
    643c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    643e:	687b      	ldr	r3, [r7, #4]
    6440:	2b00      	cmp	r3, #0
    6442:	d004      	beq.n	644e <_spi_m_sync_trans+0x3e>
    6444:	6a3b      	ldr	r3, [r7, #32]
    6446:	2b00      	cmp	r3, #0
    6448:	d001      	beq.n	644e <_spi_m_sync_trans+0x3e>
    644a:	2301      	movs	r3, #1
    644c:	e000      	b.n	6450 <_spi_m_sync_trans+0x40>
    644e:	2300      	movs	r3, #0
    6450:	f003 0301 	and.w	r3, r3, #1
    6454:	b2db      	uxtb	r3, r3
    6456:	f640 22a3 	movw	r2, #2723	; 0xaa3
    645a:	492b      	ldr	r1, [pc, #172]	; (6508 <_spi_m_sync_trans+0xf8>)
    645c:	4618      	mov	r0, r3
    645e:	4b2b      	ldr	r3, [pc, #172]	; (650c <_spi_m_sync_trans+0xfc>)
    6460:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6462:	2107      	movs	r1, #7
    6464:	6a38      	ldr	r0, [r7, #32]
    6466:	4b2a      	ldr	r3, [pc, #168]	; (6510 <_spi_m_sync_trans+0x100>)
    6468:	4798      	blx	r3
    646a:	4603      	mov	r3, r0
    646c:	2b00      	cmp	r3, #0
    646e:	d002      	beq.n	6476 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6470:	f06f 0303 	mvn.w	r3, #3
    6474:	e043      	b.n	64fe <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6476:	6a38      	ldr	r0, [r7, #32]
    6478:	4b26      	ldr	r3, [pc, #152]	; (6514 <_spi_m_sync_trans+0x104>)
    647a:	4798      	blx	r3
    647c:	4603      	mov	r3, r0
    647e:	f083 0301 	eor.w	r3, r3, #1
    6482:	b2db      	uxtb	r3, r3
    6484:	2b00      	cmp	r3, #0
    6486:	d002      	beq.n	648e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6488:	f06f 0313 	mvn.w	r3, #19
    648c:	e037      	b.n	64fe <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    648e:	6a38      	ldr	r0, [r7, #32]
    6490:	4b21      	ldr	r3, [pc, #132]	; (6518 <_spi_m_sync_trans+0x108>)
    6492:	4798      	blx	r3
    6494:	4603      	mov	r3, r0
    6496:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6498:	f107 0308 	add.w	r3, r7, #8
    649c:	461a      	mov	r2, r3
    649e:	69f9      	ldr	r1, [r7, #28]
    64a0:	6a38      	ldr	r0, [r7, #32]
    64a2:	4b1e      	ldr	r3, [pc, #120]	; (651c <_spi_m_sync_trans+0x10c>)
    64a4:	4798      	blx	r3
    64a6:	4603      	mov	r3, r0
    64a8:	f083 0301 	eor.w	r3, r3, #1
    64ac:	b2db      	uxtb	r3, r3
    64ae:	2b00      	cmp	r3, #0
    64b0:	d00b      	beq.n	64ca <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    64b2:	697a      	ldr	r2, [r7, #20]
    64b4:	693b      	ldr	r3, [r7, #16]
    64b6:	429a      	cmp	r2, r3
    64b8:	d307      	bcc.n	64ca <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    64ba:	687b      	ldr	r3, [r7, #4]
    64bc:	88db      	ldrh	r3, [r3, #6]
    64be:	f107 0208 	add.w	r2, r7, #8
    64c2:	69f9      	ldr	r1, [r7, #28]
    64c4:	6a38      	ldr	r0, [r7, #32]
    64c6:	4c16      	ldr	r4, [pc, #88]	; (6520 <_spi_m_sync_trans+0x110>)
    64c8:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    64ca:	6a39      	ldr	r1, [r7, #32]
    64cc:	69f8      	ldr	r0, [r7, #28]
    64ce:	4b15      	ldr	r3, [pc, #84]	; (6524 <_spi_m_sync_trans+0x114>)
    64d0:	4798      	blx	r3
    64d2:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    64d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    64d6:	2b00      	cmp	r3, #0
    64d8:	db0c      	blt.n	64f4 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    64da:	693a      	ldr	r2, [r7, #16]
    64dc:	683b      	ldr	r3, [r7, #0]
    64de:	689b      	ldr	r3, [r3, #8]
    64e0:	429a      	cmp	r2, r3
    64e2:	d3d4      	bcc.n	648e <_spi_m_sync_trans+0x7e>
    64e4:	697a      	ldr	r2, [r7, #20]
    64e6:	683b      	ldr	r3, [r7, #0]
    64e8:	689b      	ldr	r3, [r3, #8]
    64ea:	429a      	cmp	r2, r3
    64ec:	d3cf      	bcc.n	648e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    64ee:	693b      	ldr	r3, [r7, #16]
    64f0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    64f2:	e000      	b.n	64f6 <_spi_m_sync_trans+0xe6>
			break;
    64f4:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    64f6:	6a38      	ldr	r0, [r7, #32]
    64f8:	4b0b      	ldr	r3, [pc, #44]	; (6528 <_spi_m_sync_trans+0x118>)
    64fa:	4798      	blx	r3

	return rc;
    64fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    64fe:	4618      	mov	r0, r3
    6500:	372c      	adds	r7, #44	; 0x2c
    6502:	46bd      	mov	sp, r7
    6504:	bd90      	pop	{r4, r7, pc}
    6506:	bf00      	nop
    6508:	0000d1e8 	.word	0x0000d1e8
    650c:	00002de1 	.word	0x00002de1
    6510:	00005229 	.word	0x00005229
    6514:	000053d5 	.word	0x000053d5
    6518:	000052c7 	.word	0x000052c7
    651c:	000062ed 	.word	0x000062ed
    6520:	00006359 	.word	0x00006359
    6524:	000063d1 	.word	0x000063d1
    6528:	000062bd 	.word	0x000062bd

0000652c <__NVIC_EnableIRQ>:
{
    652c:	b480      	push	{r7}
    652e:	b083      	sub	sp, #12
    6530:	af00      	add	r7, sp, #0
    6532:	4603      	mov	r3, r0
    6534:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    653a:	2b00      	cmp	r3, #0
    653c:	db0b      	blt.n	6556 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    653e:	4909      	ldr	r1, [pc, #36]	; (6564 <__NVIC_EnableIRQ+0x38>)
    6540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6544:	095b      	lsrs	r3, r3, #5
    6546:	88fa      	ldrh	r2, [r7, #6]
    6548:	f002 021f 	and.w	r2, r2, #31
    654c:	2001      	movs	r0, #1
    654e:	fa00 f202 	lsl.w	r2, r0, r2
    6552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6556:	bf00      	nop
    6558:	370c      	adds	r7, #12
    655a:	46bd      	mov	sp, r7
    655c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6560:	4770      	bx	lr
    6562:	bf00      	nop
    6564:	e000e100 	.word	0xe000e100

00006568 <__NVIC_DisableIRQ>:
{
    6568:	b480      	push	{r7}
    656a:	b083      	sub	sp, #12
    656c:	af00      	add	r7, sp, #0
    656e:	4603      	mov	r3, r0
    6570:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6576:	2b00      	cmp	r3, #0
    6578:	db10      	blt.n	659c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    657a:	490b      	ldr	r1, [pc, #44]	; (65a8 <__NVIC_DisableIRQ+0x40>)
    657c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6580:	095b      	lsrs	r3, r3, #5
    6582:	88fa      	ldrh	r2, [r7, #6]
    6584:	f002 021f 	and.w	r2, r2, #31
    6588:	2001      	movs	r0, #1
    658a:	fa00 f202 	lsl.w	r2, r0, r2
    658e:	3320      	adds	r3, #32
    6590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6594:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6598:	f3bf 8f6f 	isb	sy
}
    659c:	bf00      	nop
    659e:	370c      	adds	r7, #12
    65a0:	46bd      	mov	sp, r7
    65a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    65a6:	4770      	bx	lr
    65a8:	e000e100 	.word	0xe000e100

000065ac <__NVIC_ClearPendingIRQ>:
{
    65ac:	b480      	push	{r7}
    65ae:	b083      	sub	sp, #12
    65b0:	af00      	add	r7, sp, #0
    65b2:	4603      	mov	r3, r0
    65b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    65b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    65ba:	2b00      	cmp	r3, #0
    65bc:	db0c      	blt.n	65d8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    65be:	4909      	ldr	r1, [pc, #36]	; (65e4 <__NVIC_ClearPendingIRQ+0x38>)
    65c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    65c4:	095b      	lsrs	r3, r3, #5
    65c6:	88fa      	ldrh	r2, [r7, #6]
    65c8:	f002 021f 	and.w	r2, r2, #31
    65cc:	2001      	movs	r0, #1
    65ce:	fa00 f202 	lsl.w	r2, r0, r2
    65d2:	3360      	adds	r3, #96	; 0x60
    65d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    65d8:	bf00      	nop
    65da:	370c      	adds	r7, #12
    65dc:	46bd      	mov	sp, r7
    65de:	f85d 7b04 	ldr.w	r7, [sp], #4
    65e2:	4770      	bx	lr
    65e4:	e000e100 	.word	0xe000e100

000065e8 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    65e8:	b480      	push	{r7}
    65ea:	b083      	sub	sp, #12
    65ec:	af00      	add	r7, sp, #0
    65ee:	6078      	str	r0, [r7, #4]
    65f0:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    65f2:	bf00      	nop
    65f4:	687b      	ldr	r3, [r7, #4]
    65f6:	689a      	ldr	r2, [r3, #8]
    65f8:	683b      	ldr	r3, [r7, #0]
    65fa:	4013      	ands	r3, r2
    65fc:	2b00      	cmp	r3, #0
    65fe:	d1f9      	bne.n	65f4 <hri_tcc_wait_for_sync+0xc>
	};
}
    6600:	bf00      	nop
    6602:	370c      	adds	r7, #12
    6604:	46bd      	mov	sp, r7
    6606:	f85d 7b04 	ldr.w	r7, [sp], #4
    660a:	4770      	bx	lr

0000660c <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    660c:	b480      	push	{r7}
    660e:	b083      	sub	sp, #12
    6610:	af00      	add	r7, sp, #0
    6612:	6078      	str	r0, [r7, #4]
    6614:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    6616:	687b      	ldr	r3, [r7, #4]
    6618:	689a      	ldr	r2, [r3, #8]
    661a:	683b      	ldr	r3, [r7, #0]
    661c:	4013      	ands	r3, r2
    661e:	2b00      	cmp	r3, #0
    6620:	bf14      	ite	ne
    6622:	2301      	movne	r3, #1
    6624:	2300      	moveq	r3, #0
    6626:	b2db      	uxtb	r3, r3
}
    6628:	4618      	mov	r0, r3
    662a:	370c      	adds	r7, #12
    662c:	46bd      	mov	sp, r7
    662e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6632:	4770      	bx	lr

00006634 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    6634:	b480      	push	{r7}
    6636:	b083      	sub	sp, #12
    6638:	af00      	add	r7, sp, #0
    663a:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    663c:	687b      	ldr	r3, [r7, #4]
    663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6640:	f003 0301 	and.w	r3, r3, #1
    6644:	2b00      	cmp	r3, #0
    6646:	bf14      	ite	ne
    6648:	2301      	movne	r3, #1
    664a:	2300      	moveq	r3, #0
    664c:	b2db      	uxtb	r3, r3
}
    664e:	4618      	mov	r0, r3
    6650:	370c      	adds	r7, #12
    6652:	46bd      	mov	sp, r7
    6654:	f85d 7b04 	ldr.w	r7, [sp], #4
    6658:	4770      	bx	lr

0000665a <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    665a:	b480      	push	{r7}
    665c:	b083      	sub	sp, #12
    665e:	af00      	add	r7, sp, #0
    6660:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    6662:	687b      	ldr	r3, [r7, #4]
    6664:	2201      	movs	r2, #1
    6666:	62da      	str	r2, [r3, #44]	; 0x2c
}
    6668:	bf00      	nop
    666a:	370c      	adds	r7, #12
    666c:	46bd      	mov	sp, r7
    666e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6672:	4770      	bx	lr

00006674 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    6674:	b480      	push	{r7}
    6676:	b083      	sub	sp, #12
    6678:	af00      	add	r7, sp, #0
    667a:	6078      	str	r0, [r7, #4]
    667c:	460b      	mov	r3, r1
    667e:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    6680:	687b      	ldr	r3, [r7, #4]
    6682:	78fa      	ldrb	r2, [r7, #3]
    6684:	715a      	strb	r2, [r3, #5]
}
    6686:	bf00      	nop
    6688:	370c      	adds	r7, #12
    668a:	46bd      	mov	sp, r7
    668c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6690:	4770      	bx	lr

00006692 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    6692:	b480      	push	{r7}
    6694:	b083      	sub	sp, #12
    6696:	af00      	add	r7, sp, #0
    6698:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    669a:	687b      	ldr	r3, [r7, #4]
    669c:	2201      	movs	r2, #1
    669e:	629a      	str	r2, [r3, #40]	; 0x28
}
    66a0:	bf00      	nop
    66a2:	370c      	adds	r7, #12
    66a4:	46bd      	mov	sp, r7
    66a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    66aa:	4770      	bx	lr

000066ac <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    66ac:	b580      	push	{r7, lr}
    66ae:	b082      	sub	sp, #8
    66b0:	af00      	add	r7, sp, #0
    66b2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    66b4:	687b      	ldr	r3, [r7, #4]
    66b6:	681b      	ldr	r3, [r3, #0]
    66b8:	f043 0201 	orr.w	r2, r3, #1
    66bc:	687b      	ldr	r3, [r7, #4]
    66be:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    66c0:	2101      	movs	r1, #1
    66c2:	6878      	ldr	r0, [r7, #4]
    66c4:	4b02      	ldr	r3, [pc, #8]	; (66d0 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    66c6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    66c8:	bf00      	nop
    66ca:	3708      	adds	r7, #8
    66cc:	46bd      	mov	sp, r7
    66ce:	bd80      	pop	{r7, pc}
    66d0:	000065e9 	.word	0x000065e9

000066d4 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    66d4:	b580      	push	{r7, lr}
    66d6:	b082      	sub	sp, #8
    66d8:	af00      	add	r7, sp, #0
    66da:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    66dc:	687b      	ldr	r3, [r7, #4]
    66de:	681b      	ldr	r3, [r3, #0]
    66e0:	f043 0202 	orr.w	r2, r3, #2
    66e4:	687b      	ldr	r3, [r7, #4]
    66e6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    66e8:	2103      	movs	r1, #3
    66ea:	6878      	ldr	r0, [r7, #4]
    66ec:	4b02      	ldr	r3, [pc, #8]	; (66f8 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    66ee:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    66f0:	bf00      	nop
    66f2:	3708      	adds	r7, #8
    66f4:	46bd      	mov	sp, r7
    66f6:	bd80      	pop	{r7, pc}
    66f8:	000065e9 	.word	0x000065e9

000066fc <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    66fc:	b580      	push	{r7, lr}
    66fe:	b084      	sub	sp, #16
    6700:	af00      	add	r7, sp, #0
    6702:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6704:	2103      	movs	r1, #3
    6706:	6878      	ldr	r0, [r7, #4]
    6708:	4b09      	ldr	r3, [pc, #36]	; (6730 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    670a:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    670c:	687b      	ldr	r3, [r7, #4]
    670e:	681b      	ldr	r3, [r3, #0]
    6710:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    6712:	68fb      	ldr	r3, [r7, #12]
    6714:	085b      	lsrs	r3, r3, #1
    6716:	f003 0301 	and.w	r3, r3, #1
    671a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    671c:	68fb      	ldr	r3, [r7, #12]
    671e:	2b00      	cmp	r3, #0
    6720:	bf14      	ite	ne
    6722:	2301      	movne	r3, #1
    6724:	2300      	moveq	r3, #0
    6726:	b2db      	uxtb	r3, r3
}
    6728:	4618      	mov	r0, r3
    672a:	3710      	adds	r7, #16
    672c:	46bd      	mov	sp, r7
    672e:	bd80      	pop	{r7, pc}
    6730:	000065e9 	.word	0x000065e9

00006734 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6734:	b580      	push	{r7, lr}
    6736:	b082      	sub	sp, #8
    6738:	af00      	add	r7, sp, #0
    673a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    673c:	687b      	ldr	r3, [r7, #4]
    673e:	681b      	ldr	r3, [r3, #0]
    6740:	f023 0202 	bic.w	r2, r3, #2
    6744:	687b      	ldr	r3, [r7, #4]
    6746:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6748:	2103      	movs	r1, #3
    674a:	6878      	ldr	r0, [r7, #4]
    674c:	4b02      	ldr	r3, [pc, #8]	; (6758 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    674e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6750:	bf00      	nop
    6752:	3708      	adds	r7, #8
    6754:	46bd      	mov	sp, r7
    6756:	bd80      	pop	{r7, pc}
    6758:	000065e9 	.word	0x000065e9

0000675c <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    675c:	b580      	push	{r7, lr}
    675e:	b084      	sub	sp, #16
    6760:	af00      	add	r7, sp, #0
    6762:	6078      	str	r0, [r7, #4]
    6764:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6766:	2103      	movs	r1, #3
    6768:	6878      	ldr	r0, [r7, #4]
    676a:	4b07      	ldr	r3, [pc, #28]	; (6788 <hri_tcc_get_CTRLA_reg+0x2c>)
    676c:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    676e:	687b      	ldr	r3, [r7, #4]
    6770:	681b      	ldr	r3, [r3, #0]
    6772:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6774:	68fa      	ldr	r2, [r7, #12]
    6776:	683b      	ldr	r3, [r7, #0]
    6778:	4013      	ands	r3, r2
    677a:	60fb      	str	r3, [r7, #12]
	return tmp;
    677c:	68fb      	ldr	r3, [r7, #12]
}
    677e:	4618      	mov	r0, r3
    6780:	3710      	adds	r7, #16
    6782:	46bd      	mov	sp, r7
    6784:	bd80      	pop	{r7, pc}
    6786:	bf00      	nop
    6788:	000065e9 	.word	0x000065e9

0000678c <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    678c:	b580      	push	{r7, lr}
    678e:	b082      	sub	sp, #8
    6790:	af00      	add	r7, sp, #0
    6792:	6078      	str	r0, [r7, #4]
    6794:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    6796:	687b      	ldr	r3, [r7, #4]
    6798:	683a      	ldr	r2, [r7, #0]
    679a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    679c:	2103      	movs	r1, #3
    679e:	6878      	ldr	r0, [r7, #4]
    67a0:	4b02      	ldr	r3, [pc, #8]	; (67ac <hri_tcc_write_CTRLA_reg+0x20>)
    67a2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    67a4:	bf00      	nop
    67a6:	3708      	adds	r7, #8
    67a8:	46bd      	mov	sp, r7
    67aa:	bd80      	pop	{r7, pc}
    67ac:	000065e9 	.word	0x000065e9

000067b0 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    67b0:	b480      	push	{r7}
    67b2:	b083      	sub	sp, #12
    67b4:	af00      	add	r7, sp, #0
    67b6:	6078      	str	r0, [r7, #4]
    67b8:	460b      	mov	r3, r1
    67ba:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    67bc:	687b      	ldr	r3, [r7, #4]
    67be:	78fa      	ldrb	r2, [r7, #3]
    67c0:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    67c2:	bf00      	nop
    67c4:	370c      	adds	r7, #12
    67c6:	46bd      	mov	sp, r7
    67c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    67cc:	4770      	bx	lr

000067ce <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    67ce:	b480      	push	{r7}
    67d0:	b083      	sub	sp, #12
    67d2:	af00      	add	r7, sp, #0
    67d4:	6078      	str	r0, [r7, #4]
    67d6:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    67d8:	687b      	ldr	r3, [r7, #4]
    67da:	683a      	ldr	r2, [r7, #0]
    67dc:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    67de:	bf00      	nop
    67e0:	370c      	adds	r7, #12
    67e2:	46bd      	mov	sp, r7
    67e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    67e8:	4770      	bx	lr
	...

000067ec <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    67ec:	b580      	push	{r7, lr}
    67ee:	b082      	sub	sp, #8
    67f0:	af00      	add	r7, sp, #0
    67f2:	6078      	str	r0, [r7, #4]
    67f4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    67f6:	687b      	ldr	r3, [r7, #4]
    67f8:	683a      	ldr	r2, [r7, #0]
    67fa:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    67fc:	2180      	movs	r1, #128	; 0x80
    67fe:	6878      	ldr	r0, [r7, #4]
    6800:	4b02      	ldr	r3, [pc, #8]	; (680c <hri_tcc_write_PER_reg+0x20>)
    6802:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6804:	bf00      	nop
    6806:	3708      	adds	r7, #8
    6808:	46bd      	mov	sp, r7
    680a:	bd80      	pop	{r7, pc}
    680c:	000065e9 	.word	0x000065e9

00006810 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    6810:	b580      	push	{r7, lr}
    6812:	b082      	sub	sp, #8
    6814:	af00      	add	r7, sp, #0
    6816:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    6818:	2180      	movs	r1, #128	; 0x80
    681a:	6878      	ldr	r0, [r7, #4]
    681c:	4b03      	ldr	r3, [pc, #12]	; (682c <hri_tcc_read_PER_reg+0x1c>)
    681e:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    6820:	687b      	ldr	r3, [r7, #4]
    6822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    6824:	4618      	mov	r0, r3
    6826:	3708      	adds	r7, #8
    6828:	46bd      	mov	sp, r7
    682a:	bd80      	pop	{r7, pc}
    682c:	000065e9 	.word	0x000065e9

00006830 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    6830:	b480      	push	{r7}
    6832:	b083      	sub	sp, #12
    6834:	af00      	add	r7, sp, #0
    6836:	6078      	str	r0, [r7, #4]
    6838:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    683a:	687b      	ldr	r3, [r7, #4]
    683c:	4a0c      	ldr	r2, [pc, #48]	; (6870 <_tcc_init_irq_param+0x40>)
    683e:	4293      	cmp	r3, r2
    6840:	d102      	bne.n	6848 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    6842:	4a0c      	ldr	r2, [pc, #48]	; (6874 <_tcc_init_irq_param+0x44>)
    6844:	683b      	ldr	r3, [r7, #0]
    6846:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    6848:	687b      	ldr	r3, [r7, #4]
    684a:	4a0b      	ldr	r2, [pc, #44]	; (6878 <_tcc_init_irq_param+0x48>)
    684c:	4293      	cmp	r3, r2
    684e:	d102      	bne.n	6856 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    6850:	4a0a      	ldr	r2, [pc, #40]	; (687c <_tcc_init_irq_param+0x4c>)
    6852:	683b      	ldr	r3, [r7, #0]
    6854:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    6856:	687b      	ldr	r3, [r7, #4]
    6858:	4a09      	ldr	r2, [pc, #36]	; (6880 <_tcc_init_irq_param+0x50>)
    685a:	4293      	cmp	r3, r2
    685c:	d102      	bne.n	6864 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    685e:	4a09      	ldr	r2, [pc, #36]	; (6884 <_tcc_init_irq_param+0x54>)
    6860:	683b      	ldr	r3, [r7, #0]
    6862:	6013      	str	r3, [r2, #0]
	}
}
    6864:	bf00      	nop
    6866:	370c      	adds	r7, #12
    6868:	46bd      	mov	sp, r7
    686a:	f85d 7b04 	ldr.w	r7, [sp], #4
    686e:	4770      	bx	lr
    6870:	41016000 	.word	0x41016000
    6874:	20000844 	.word	0x20000844
    6878:	41018000 	.word	0x41018000
    687c:	20000848 	.word	0x20000848
    6880:	42000c00 	.word	0x42000c00
    6884:	2000084c 	.word	0x2000084c

00006888 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    6888:	b580      	push	{r7, lr}
    688a:	b084      	sub	sp, #16
    688c:	af00      	add	r7, sp, #0
    688e:	6078      	str	r0, [r7, #4]
    6890:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    6892:	6838      	ldr	r0, [r7, #0]
    6894:	4b33      	ldr	r3, [pc, #204]	; (6964 <_tcc_timer_init+0xdc>)
    6896:	4798      	blx	r3
    6898:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    689a:	68fb      	ldr	r3, [r7, #12]
    689c:	2b00      	cmp	r3, #0
    689e:	d102      	bne.n	68a6 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    68a0:	f06f 0309 	mvn.w	r3, #9
    68a4:	e05a      	b.n	695c <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    68a6:	687b      	ldr	r3, [r7, #4]
    68a8:	683a      	ldr	r2, [r7, #0]
    68aa:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    68ac:	2101      	movs	r1, #1
    68ae:	6838      	ldr	r0, [r7, #0]
    68b0:	4b2d      	ldr	r3, [pc, #180]	; (6968 <_tcc_timer_init+0xe0>)
    68b2:	4798      	blx	r3
    68b4:	4603      	mov	r3, r0
    68b6:	f083 0301 	eor.w	r3, r3, #1
    68ba:	b2db      	uxtb	r3, r3
    68bc:	2b00      	cmp	r3, #0
    68be:	d011      	beq.n	68e4 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    68c0:	2102      	movs	r1, #2
    68c2:	6838      	ldr	r0, [r7, #0]
    68c4:	4b29      	ldr	r3, [pc, #164]	; (696c <_tcc_timer_init+0xe4>)
    68c6:	4798      	blx	r3
    68c8:	4603      	mov	r3, r0
    68ca:	2b00      	cmp	r3, #0
    68cc:	d006      	beq.n	68dc <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    68ce:	6838      	ldr	r0, [r7, #0]
    68d0:	4b27      	ldr	r3, [pc, #156]	; (6970 <_tcc_timer_init+0xe8>)
    68d2:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    68d4:	2102      	movs	r1, #2
    68d6:	6838      	ldr	r0, [r7, #0]
    68d8:	4b26      	ldr	r3, [pc, #152]	; (6974 <_tcc_timer_init+0xec>)
    68da:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    68dc:	2101      	movs	r1, #1
    68de:	6838      	ldr	r0, [r7, #0]
    68e0:	4b25      	ldr	r3, [pc, #148]	; (6978 <_tcc_timer_init+0xf0>)
    68e2:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    68e4:	2101      	movs	r1, #1
    68e6:	6838      	ldr	r0, [r7, #0]
    68e8:	4b22      	ldr	r3, [pc, #136]	; (6974 <_tcc_timer_init+0xec>)
    68ea:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    68ec:	68fb      	ldr	r3, [r7, #12]
    68ee:	689b      	ldr	r3, [r3, #8]
    68f0:	4619      	mov	r1, r3
    68f2:	6838      	ldr	r0, [r7, #0]
    68f4:	4b20      	ldr	r3, [pc, #128]	; (6978 <_tcc_timer_init+0xf0>)
    68f6:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    68f8:	68fb      	ldr	r3, [r7, #12]
    68fa:	7b1b      	ldrb	r3, [r3, #12]
    68fc:	4619      	mov	r1, r3
    68fe:	6838      	ldr	r0, [r7, #0]
    6900:	4b1e      	ldr	r3, [pc, #120]	; (697c <_tcc_timer_init+0xf4>)
    6902:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    6904:	68fb      	ldr	r3, [r7, #12]
    6906:	7b5b      	ldrb	r3, [r3, #13]
    6908:	4619      	mov	r1, r3
    690a:	6838      	ldr	r0, [r7, #0]
    690c:	4b1c      	ldr	r3, [pc, #112]	; (6980 <_tcc_timer_init+0xf8>)
    690e:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    6910:	68fb      	ldr	r3, [r7, #12]
    6912:	691b      	ldr	r3, [r3, #16]
    6914:	4619      	mov	r1, r3
    6916:	6838      	ldr	r0, [r7, #0]
    6918:	4b1a      	ldr	r3, [pc, #104]	; (6984 <_tcc_timer_init+0xfc>)
    691a:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    691c:	68fb      	ldr	r3, [r7, #12]
    691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6920:	4619      	mov	r1, r3
    6922:	6838      	ldr	r0, [r7, #0]
    6924:	4b18      	ldr	r3, [pc, #96]	; (6988 <_tcc_timer_init+0x100>)
    6926:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    6928:	6838      	ldr	r0, [r7, #0]
    692a:	4b18      	ldr	r3, [pc, #96]	; (698c <_tcc_timer_init+0x104>)
    692c:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    692e:	6879      	ldr	r1, [r7, #4]
    6930:	6838      	ldr	r0, [r7, #0]
    6932:	4b17      	ldr	r3, [pc, #92]	; (6990 <_tcc_timer_init+0x108>)
    6934:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    6936:	68fb      	ldr	r3, [r7, #12]
    6938:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    693c:	4618      	mov	r0, r3
    693e:	4b15      	ldr	r3, [pc, #84]	; (6994 <_tcc_timer_init+0x10c>)
    6940:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    6942:	68fb      	ldr	r3, [r7, #12]
    6944:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6948:	4618      	mov	r0, r3
    694a:	4b13      	ldr	r3, [pc, #76]	; (6998 <_tcc_timer_init+0x110>)
    694c:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    694e:	68fb      	ldr	r3, [r7, #12]
    6950:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6954:	4618      	mov	r0, r3
    6956:	4b11      	ldr	r3, [pc, #68]	; (699c <_tcc_timer_init+0x114>)
    6958:	4798      	blx	r3

	return ERR_NONE;
    695a:	2300      	movs	r3, #0
}
    695c:	4618      	mov	r0, r3
    695e:	3710      	adds	r7, #16
    6960:	46bd      	mov	sp, r7
    6962:	bd80      	pop	{r7, pc}
    6964:	00006b6d 	.word	0x00006b6d
    6968:	0000660d 	.word	0x0000660d
    696c:	0000675d 	.word	0x0000675d
    6970:	00006735 	.word	0x00006735
    6974:	000065e9 	.word	0x000065e9
    6978:	0000678d 	.word	0x0000678d
    697c:	00006675 	.word	0x00006675
    6980:	000067b1 	.word	0x000067b1
    6984:	000067cf 	.word	0x000067cf
    6988:	000067ed 	.word	0x000067ed
    698c:	00006693 	.word	0x00006693
    6990:	00006831 	.word	0x00006831
    6994:	00006569 	.word	0x00006569
    6998:	000065ad 	.word	0x000065ad
    699c:	0000652d 	.word	0x0000652d

000069a0 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    69a0:	b580      	push	{r7, lr}
    69a2:	b084      	sub	sp, #16
    69a4:	af00      	add	r7, sp, #0
    69a6:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    69a8:	687b      	ldr	r3, [r7, #4]
    69aa:	68db      	ldr	r3, [r3, #12]
    69ac:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    69ae:	68f8      	ldr	r0, [r7, #12]
    69b0:	4b0a      	ldr	r3, [pc, #40]	; (69dc <_tcc_timer_deinit+0x3c>)
    69b2:	4798      	blx	r3
    69b4:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    69b6:	68bb      	ldr	r3, [r7, #8]
    69b8:	2b00      	cmp	r3, #0
    69ba:	d00b      	beq.n	69d4 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    69bc:	68bb      	ldr	r3, [r7, #8]
    69be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    69c2:	4618      	mov	r0, r3
    69c4:	4b06      	ldr	r3, [pc, #24]	; (69e0 <_tcc_timer_deinit+0x40>)
    69c6:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    69c8:	68f8      	ldr	r0, [r7, #12]
    69ca:	4b06      	ldr	r3, [pc, #24]	; (69e4 <_tcc_timer_deinit+0x44>)
    69cc:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    69ce:	68f8      	ldr	r0, [r7, #12]
    69d0:	4b05      	ldr	r3, [pc, #20]	; (69e8 <_tcc_timer_deinit+0x48>)
    69d2:	4798      	blx	r3
	}
}
    69d4:	bf00      	nop
    69d6:	3710      	adds	r7, #16
    69d8:	46bd      	mov	sp, r7
    69da:	bd80      	pop	{r7, pc}
    69dc:	00006b6d 	.word	0x00006b6d
    69e0:	00006569 	.word	0x00006569
    69e4:	00006735 	.word	0x00006735
    69e8:	000066ad 	.word	0x000066ad

000069ec <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    69ec:	b580      	push	{r7, lr}
    69ee:	b082      	sub	sp, #8
    69f0:	af00      	add	r7, sp, #0
    69f2:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    69f4:	687b      	ldr	r3, [r7, #4]
    69f6:	68db      	ldr	r3, [r3, #12]
    69f8:	4618      	mov	r0, r3
    69fa:	4b03      	ldr	r3, [pc, #12]	; (6a08 <_tcc_timer_start+0x1c>)
    69fc:	4798      	blx	r3
}
    69fe:	bf00      	nop
    6a00:	3708      	adds	r7, #8
    6a02:	46bd      	mov	sp, r7
    6a04:	bd80      	pop	{r7, pc}
    6a06:	bf00      	nop
    6a08:	000066d5 	.word	0x000066d5

00006a0c <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    6a0c:	b580      	push	{r7, lr}
    6a0e:	b082      	sub	sp, #8
    6a10:	af00      	add	r7, sp, #0
    6a12:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    6a14:	687b      	ldr	r3, [r7, #4]
    6a16:	68db      	ldr	r3, [r3, #12]
    6a18:	4618      	mov	r0, r3
    6a1a:	4b03      	ldr	r3, [pc, #12]	; (6a28 <_tcc_timer_stop+0x1c>)
    6a1c:	4798      	blx	r3
}
    6a1e:	bf00      	nop
    6a20:	3708      	adds	r7, #8
    6a22:	46bd      	mov	sp, r7
    6a24:	bd80      	pop	{r7, pc}
    6a26:	bf00      	nop
    6a28:	00006735 	.word	0x00006735

00006a2c <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    6a2c:	b580      	push	{r7, lr}
    6a2e:	b082      	sub	sp, #8
    6a30:	af00      	add	r7, sp, #0
    6a32:	6078      	str	r0, [r7, #4]
    6a34:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    6a36:	687b      	ldr	r3, [r7, #4]
    6a38:	68db      	ldr	r3, [r3, #12]
    6a3a:	6839      	ldr	r1, [r7, #0]
    6a3c:	4618      	mov	r0, r3
    6a3e:	4b03      	ldr	r3, [pc, #12]	; (6a4c <_tcc_timer_set_period+0x20>)
    6a40:	4798      	blx	r3
}
    6a42:	bf00      	nop
    6a44:	3708      	adds	r7, #8
    6a46:	46bd      	mov	sp, r7
    6a48:	bd80      	pop	{r7, pc}
    6a4a:	bf00      	nop
    6a4c:	000067ed 	.word	0x000067ed

00006a50 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    6a50:	b580      	push	{r7, lr}
    6a52:	b082      	sub	sp, #8
    6a54:	af00      	add	r7, sp, #0
    6a56:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    6a58:	687b      	ldr	r3, [r7, #4]
    6a5a:	68db      	ldr	r3, [r3, #12]
    6a5c:	4618      	mov	r0, r3
    6a5e:	4b03      	ldr	r3, [pc, #12]	; (6a6c <_tcc_timer_get_period+0x1c>)
    6a60:	4798      	blx	r3
    6a62:	4603      	mov	r3, r0
}
    6a64:	4618      	mov	r0, r3
    6a66:	3708      	adds	r7, #8
    6a68:	46bd      	mov	sp, r7
    6a6a:	bd80      	pop	{r7, pc}
    6a6c:	00006811 	.word	0x00006811

00006a70 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    6a70:	b580      	push	{r7, lr}
    6a72:	b082      	sub	sp, #8
    6a74:	af00      	add	r7, sp, #0
    6a76:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    6a78:	687b      	ldr	r3, [r7, #4]
    6a7a:	68db      	ldr	r3, [r3, #12]
    6a7c:	4618      	mov	r0, r3
    6a7e:	4b03      	ldr	r3, [pc, #12]	; (6a8c <_tcc_timer_is_started+0x1c>)
    6a80:	4798      	blx	r3
    6a82:	4603      	mov	r3, r0
}
    6a84:	4618      	mov	r0, r3
    6a86:	3708      	adds	r7, #8
    6a88:	46bd      	mov	sp, r7
    6a8a:	bd80      	pop	{r7, pc}
    6a8c:	000066fd 	.word	0x000066fd

00006a90 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    6a90:	b480      	push	{r7}
    6a92:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    6a94:	4b02      	ldr	r3, [pc, #8]	; (6aa0 <_tcc_get_timer+0x10>)
}
    6a96:	4618      	mov	r0, r3
    6a98:	46bd      	mov	sp, r7
    6a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a9e:	4770      	bx	lr
    6aa0:	200000f0 	.word	0x200000f0

00006aa4 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    6aa4:	b580      	push	{r7, lr}
    6aa6:	b084      	sub	sp, #16
    6aa8:	af00      	add	r7, sp, #0
    6aaa:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    6aac:	687b      	ldr	r3, [r7, #4]
    6aae:	68db      	ldr	r3, [r3, #12]
    6ab0:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    6ab2:	68f8      	ldr	r0, [r7, #12]
    6ab4:	4b08      	ldr	r3, [pc, #32]	; (6ad8 <_tcc_timer_set_irq+0x34>)
    6ab6:	4798      	blx	r3
    6ab8:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    6aba:	68bb      	ldr	r3, [r7, #8]
    6abc:	2b00      	cmp	r3, #0
    6abe:	d006      	beq.n	6ace <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    6ac0:	68bb      	ldr	r3, [r7, #8]
    6ac2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6ac6:	b2db      	uxtb	r3, r3
    6ac8:	4618      	mov	r0, r3
    6aca:	4b04      	ldr	r3, [pc, #16]	; (6adc <_tcc_timer_set_irq+0x38>)
    6acc:	4798      	blx	r3
	}
}
    6ace:	bf00      	nop
    6ad0:	3710      	adds	r7, #16
    6ad2:	46bd      	mov	sp, r7
    6ad4:	bd80      	pop	{r7, pc}
    6ad6:	bf00      	nop
    6ad8:	00006b6d 	.word	0x00006b6d
    6adc:	000035c1 	.word	0x000035c1

00006ae0 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    6ae0:	b580      	push	{r7, lr}
    6ae2:	b084      	sub	sp, #16
    6ae4:	af00      	add	r7, sp, #0
    6ae6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    6ae8:	687b      	ldr	r3, [r7, #4]
    6aea:	68db      	ldr	r3, [r3, #12]
    6aec:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    6aee:	68f8      	ldr	r0, [r7, #12]
    6af0:	4b07      	ldr	r3, [pc, #28]	; (6b10 <tcc_interrupt_handler+0x30>)
    6af2:	4798      	blx	r3
    6af4:	4603      	mov	r3, r0
    6af6:	2b00      	cmp	r3, #0
    6af8:	d006      	beq.n	6b08 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    6afa:	68f8      	ldr	r0, [r7, #12]
    6afc:	4b05      	ldr	r3, [pc, #20]	; (6b14 <tcc_interrupt_handler+0x34>)
    6afe:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    6b00:	687b      	ldr	r3, [r7, #4]
    6b02:	681b      	ldr	r3, [r3, #0]
    6b04:	6878      	ldr	r0, [r7, #4]
    6b06:	4798      	blx	r3
	}
}
    6b08:	bf00      	nop
    6b0a:	3710      	adds	r7, #16
    6b0c:	46bd      	mov	sp, r7
    6b0e:	bd80      	pop	{r7, pc}
    6b10:	00006635 	.word	0x00006635
    6b14:	0000665b 	.word	0x0000665b

00006b18 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    6b18:	b580      	push	{r7, lr}
    6b1a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    6b1c:	4b03      	ldr	r3, [pc, #12]	; (6b2c <TCC0_0_Handler+0x14>)
    6b1e:	681b      	ldr	r3, [r3, #0]
    6b20:	4618      	mov	r0, r3
    6b22:	4b03      	ldr	r3, [pc, #12]	; (6b30 <TCC0_0_Handler+0x18>)
    6b24:	4798      	blx	r3
}
    6b26:	bf00      	nop
    6b28:	bd80      	pop	{r7, pc}
    6b2a:	bf00      	nop
    6b2c:	20000844 	.word	0x20000844
    6b30:	00006ae1 	.word	0x00006ae1

00006b34 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    6b34:	b580      	push	{r7, lr}
    6b36:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    6b38:	4b03      	ldr	r3, [pc, #12]	; (6b48 <TCC1_0_Handler+0x14>)
    6b3a:	681b      	ldr	r3, [r3, #0]
    6b3c:	4618      	mov	r0, r3
    6b3e:	4b03      	ldr	r3, [pc, #12]	; (6b4c <TCC1_0_Handler+0x18>)
    6b40:	4798      	blx	r3
}
    6b42:	bf00      	nop
    6b44:	bd80      	pop	{r7, pc}
    6b46:	bf00      	nop
    6b48:	20000848 	.word	0x20000848
    6b4c:	00006ae1 	.word	0x00006ae1

00006b50 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    6b50:	b580      	push	{r7, lr}
    6b52:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    6b54:	4b03      	ldr	r3, [pc, #12]	; (6b64 <TCC2_0_Handler+0x14>)
    6b56:	681b      	ldr	r3, [r3, #0]
    6b58:	4618      	mov	r0, r3
    6b5a:	4b03      	ldr	r3, [pc, #12]	; (6b68 <TCC2_0_Handler+0x18>)
    6b5c:	4798      	blx	r3
}
    6b5e:	bf00      	nop
    6b60:	bd80      	pop	{r7, pc}
    6b62:	bf00      	nop
    6b64:	2000084c 	.word	0x2000084c
    6b68:	00006ae1 	.word	0x00006ae1

00006b6c <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    6b6c:	b480      	push	{r7}
    6b6e:	b085      	sub	sp, #20
    6b70:	af00      	add	r7, sp, #0
    6b72:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    6b74:	2300      	movs	r3, #0
    6b76:	73fb      	strb	r3, [r7, #15]
    6b78:	e015      	b.n	6ba6 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    6b7a:	7bfa      	ldrb	r2, [r7, #15]
    6b7c:	490f      	ldr	r1, [pc, #60]	; (6bbc <_get_tcc_cfg+0x50>)
    6b7e:	4613      	mov	r3, r2
    6b80:	005b      	lsls	r3, r3, #1
    6b82:	4413      	add	r3, r2
    6b84:	011b      	lsls	r3, r3, #4
    6b86:	440b      	add	r3, r1
    6b88:	681a      	ldr	r2, [r3, #0]
    6b8a:	687b      	ldr	r3, [r7, #4]
    6b8c:	429a      	cmp	r2, r3
    6b8e:	d107      	bne.n	6ba0 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    6b90:	7bfa      	ldrb	r2, [r7, #15]
    6b92:	4613      	mov	r3, r2
    6b94:	005b      	lsls	r3, r3, #1
    6b96:	4413      	add	r3, r2
    6b98:	011b      	lsls	r3, r3, #4
    6b9a:	4a08      	ldr	r2, [pc, #32]	; (6bbc <_get_tcc_cfg+0x50>)
    6b9c:	4413      	add	r3, r2
    6b9e:	e006      	b.n	6bae <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    6ba0:	7bfb      	ldrb	r3, [r7, #15]
    6ba2:	3301      	adds	r3, #1
    6ba4:	73fb      	strb	r3, [r7, #15]
    6ba6:	7bfb      	ldrb	r3, [r7, #15]
    6ba8:	2b02      	cmp	r3, #2
    6baa:	d9e6      	bls.n	6b7a <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    6bac:	2300      	movs	r3, #0
}
    6bae:	4618      	mov	r0, r3
    6bb0:	3714      	adds	r7, #20
    6bb2:	46bd      	mov	sp, r7
    6bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bb8:	4770      	bx	lr
    6bba:	bf00      	nop
    6bbc:	20000060 	.word	0x20000060

00006bc0 <__NVIC_EnableIRQ>:
{
    6bc0:	b480      	push	{r7}
    6bc2:	b083      	sub	sp, #12
    6bc4:	af00      	add	r7, sp, #0
    6bc6:	4603      	mov	r3, r0
    6bc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6bce:	2b00      	cmp	r3, #0
    6bd0:	db0b      	blt.n	6bea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6bd2:	4909      	ldr	r1, [pc, #36]	; (6bf8 <__NVIC_EnableIRQ+0x38>)
    6bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6bd8:	095b      	lsrs	r3, r3, #5
    6bda:	88fa      	ldrh	r2, [r7, #6]
    6bdc:	f002 021f 	and.w	r2, r2, #31
    6be0:	2001      	movs	r0, #1
    6be2:	fa00 f202 	lsl.w	r2, r0, r2
    6be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6bea:	bf00      	nop
    6bec:	370c      	adds	r7, #12
    6bee:	46bd      	mov	sp, r7
    6bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bf4:	4770      	bx	lr
    6bf6:	bf00      	nop
    6bf8:	e000e100 	.word	0xe000e100

00006bfc <__NVIC_DisableIRQ>:
{
    6bfc:	b480      	push	{r7}
    6bfe:	b083      	sub	sp, #12
    6c00:	af00      	add	r7, sp, #0
    6c02:	4603      	mov	r3, r0
    6c04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c0a:	2b00      	cmp	r3, #0
    6c0c:	db10      	blt.n	6c30 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c0e:	490b      	ldr	r1, [pc, #44]	; (6c3c <__NVIC_DisableIRQ+0x40>)
    6c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c14:	095b      	lsrs	r3, r3, #5
    6c16:	88fa      	ldrh	r2, [r7, #6]
    6c18:	f002 021f 	and.w	r2, r2, #31
    6c1c:	2001      	movs	r0, #1
    6c1e:	fa00 f202 	lsl.w	r2, r0, r2
    6c22:	3320      	adds	r3, #32
    6c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6c28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6c2c:	f3bf 8f6f 	isb	sy
}
    6c30:	bf00      	nop
    6c32:	370c      	adds	r7, #12
    6c34:	46bd      	mov	sp, r7
    6c36:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c3a:	4770      	bx	lr
    6c3c:	e000e100 	.word	0xe000e100

00006c40 <__NVIC_ClearPendingIRQ>:
{
    6c40:	b480      	push	{r7}
    6c42:	b083      	sub	sp, #12
    6c44:	af00      	add	r7, sp, #0
    6c46:	4603      	mov	r3, r0
    6c48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c4e:	2b00      	cmp	r3, #0
    6c50:	db0c      	blt.n	6c6c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c52:	4909      	ldr	r1, [pc, #36]	; (6c78 <__NVIC_ClearPendingIRQ+0x38>)
    6c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c58:	095b      	lsrs	r3, r3, #5
    6c5a:	88fa      	ldrh	r2, [r7, #6]
    6c5c:	f002 021f 	and.w	r2, r2, #31
    6c60:	2001      	movs	r0, #1
    6c62:	fa00 f202 	lsl.w	r2, r0, r2
    6c66:	3360      	adds	r3, #96	; 0x60
    6c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c6c:	bf00      	nop
    6c6e:	370c      	adds	r7, #12
    6c70:	46bd      	mov	sp, r7
    6c72:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c76:	4770      	bx	lr
    6c78:	e000e100 	.word	0xe000e100

00006c7c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    6c7c:	b480      	push	{r7}
    6c7e:	b083      	sub	sp, #12
    6c80:	af00      	add	r7, sp, #0
    6c82:	6078      	str	r0, [r7, #4]
    6c84:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    6c86:	bf00      	nop
    6c88:	687b      	ldr	r3, [r7, #4]
    6c8a:	691a      	ldr	r2, [r3, #16]
    6c8c:	683b      	ldr	r3, [r7, #0]
    6c8e:	4013      	ands	r3, r2
    6c90:	2b00      	cmp	r3, #0
    6c92:	d1f9      	bne.n	6c88 <hri_tc_wait_for_sync+0xc>
	};
}
    6c94:	bf00      	nop
    6c96:	370c      	adds	r7, #12
    6c98:	46bd      	mov	sp, r7
    6c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c9e:	4770      	bx	lr

00006ca0 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    6ca0:	b480      	push	{r7}
    6ca2:	b083      	sub	sp, #12
    6ca4:	af00      	add	r7, sp, #0
    6ca6:	6078      	str	r0, [r7, #4]
    6ca8:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    6caa:	687b      	ldr	r3, [r7, #4]
    6cac:	691a      	ldr	r2, [r3, #16]
    6cae:	683b      	ldr	r3, [r7, #0]
    6cb0:	4013      	ands	r3, r2
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	bf14      	ite	ne
    6cb6:	2301      	movne	r3, #1
    6cb8:	2300      	moveq	r3, #0
    6cba:	b2db      	uxtb	r3, r3
}
    6cbc:	4618      	mov	r0, r3
    6cbe:	370c      	adds	r7, #12
    6cc0:	46bd      	mov	sp, r7
    6cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cc6:	4770      	bx	lr

00006cc8 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    6cc8:	b480      	push	{r7}
    6cca:	b083      	sub	sp, #12
    6ccc:	af00      	add	r7, sp, #0
    6cce:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    6cd0:	687b      	ldr	r3, [r7, #4]
    6cd2:	7a9b      	ldrb	r3, [r3, #10]
    6cd4:	b2db      	uxtb	r3, r3
    6cd6:	f003 0301 	and.w	r3, r3, #1
    6cda:	2b00      	cmp	r3, #0
    6cdc:	bf14      	ite	ne
    6cde:	2301      	movne	r3, #1
    6ce0:	2300      	moveq	r3, #0
    6ce2:	b2db      	uxtb	r3, r3
}
    6ce4:	4618      	mov	r0, r3
    6ce6:	370c      	adds	r7, #12
    6ce8:	46bd      	mov	sp, r7
    6cea:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cee:	4770      	bx	lr

00006cf0 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    6cf0:	b480      	push	{r7}
    6cf2:	b083      	sub	sp, #12
    6cf4:	af00      	add	r7, sp, #0
    6cf6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    6cf8:	687b      	ldr	r3, [r7, #4]
    6cfa:	2201      	movs	r2, #1
    6cfc:	729a      	strb	r2, [r3, #10]
}
    6cfe:	bf00      	nop
    6d00:	370c      	adds	r7, #12
    6d02:	46bd      	mov	sp, r7
    6d04:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d08:	4770      	bx	lr

00006d0a <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    6d0a:	b480      	push	{r7}
    6d0c:	b083      	sub	sp, #12
    6d0e:	af00      	add	r7, sp, #0
    6d10:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    6d12:	687b      	ldr	r3, [r7, #4]
    6d14:	2202      	movs	r2, #2
    6d16:	729a      	strb	r2, [r3, #10]
}
    6d18:	bf00      	nop
    6d1a:	370c      	adds	r7, #12
    6d1c:	46bd      	mov	sp, r7
    6d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d22:	4770      	bx	lr

00006d24 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    6d24:	b480      	push	{r7}
    6d26:	b083      	sub	sp, #12
    6d28:	af00      	add	r7, sp, #0
    6d2a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    6d2c:	687b      	ldr	r3, [r7, #4]
    6d2e:	2201      	movs	r2, #1
    6d30:	725a      	strb	r2, [r3, #9]
}
    6d32:	bf00      	nop
    6d34:	370c      	adds	r7, #12
    6d36:	46bd      	mov	sp, r7
    6d38:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d3c:	4770      	bx	lr

00006d3e <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    6d3e:	b480      	push	{r7}
    6d40:	b083      	sub	sp, #12
    6d42:	af00      	add	r7, sp, #0
    6d44:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    6d46:	687b      	ldr	r3, [r7, #4]
    6d48:	7a5b      	ldrb	r3, [r3, #9]
    6d4a:	b2db      	uxtb	r3, r3
    6d4c:	085b      	lsrs	r3, r3, #1
    6d4e:	f003 0301 	and.w	r3, r3, #1
    6d52:	2b00      	cmp	r3, #0
    6d54:	bf14      	ite	ne
    6d56:	2301      	movne	r3, #1
    6d58:	2300      	moveq	r3, #0
    6d5a:	b2db      	uxtb	r3, r3
}
    6d5c:	4618      	mov	r0, r3
    6d5e:	370c      	adds	r7, #12
    6d60:	46bd      	mov	sp, r7
    6d62:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d66:	4770      	bx	lr

00006d68 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    6d68:	b580      	push	{r7, lr}
    6d6a:	b082      	sub	sp, #8
    6d6c:	af00      	add	r7, sp, #0
    6d6e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    6d70:	687b      	ldr	r3, [r7, #4]
    6d72:	681b      	ldr	r3, [r3, #0]
    6d74:	f043 0201 	orr.w	r2, r3, #1
    6d78:	687b      	ldr	r3, [r7, #4]
    6d7a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    6d7c:	2101      	movs	r1, #1
    6d7e:	6878      	ldr	r0, [r7, #4]
    6d80:	4b02      	ldr	r3, [pc, #8]	; (6d8c <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    6d82:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6d84:	bf00      	nop
    6d86:	3708      	adds	r7, #8
    6d88:	46bd      	mov	sp, r7
    6d8a:	bd80      	pop	{r7, pc}
    6d8c:	00006c7d 	.word	0x00006c7d

00006d90 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6d90:	b580      	push	{r7, lr}
    6d92:	b082      	sub	sp, #8
    6d94:	af00      	add	r7, sp, #0
    6d96:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    6d98:	687b      	ldr	r3, [r7, #4]
    6d9a:	681b      	ldr	r3, [r3, #0]
    6d9c:	f043 0202 	orr.w	r2, r3, #2
    6da0:	687b      	ldr	r3, [r7, #4]
    6da2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6da4:	2103      	movs	r1, #3
    6da6:	6878      	ldr	r0, [r7, #4]
    6da8:	4b02      	ldr	r3, [pc, #8]	; (6db4 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    6daa:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6dac:	bf00      	nop
    6dae:	3708      	adds	r7, #8
    6db0:	46bd      	mov	sp, r7
    6db2:	bd80      	pop	{r7, pc}
    6db4:	00006c7d 	.word	0x00006c7d

00006db8 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6db8:	b580      	push	{r7, lr}
    6dba:	b084      	sub	sp, #16
    6dbc:	af00      	add	r7, sp, #0
    6dbe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6dc0:	2103      	movs	r1, #3
    6dc2:	6878      	ldr	r0, [r7, #4]
    6dc4:	4b09      	ldr	r3, [pc, #36]	; (6dec <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    6dc6:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    6dc8:	687b      	ldr	r3, [r7, #4]
    6dca:	681b      	ldr	r3, [r3, #0]
    6dcc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    6dce:	68fb      	ldr	r3, [r7, #12]
    6dd0:	085b      	lsrs	r3, r3, #1
    6dd2:	f003 0301 	and.w	r3, r3, #1
    6dd6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6dd8:	68fb      	ldr	r3, [r7, #12]
    6dda:	2b00      	cmp	r3, #0
    6ddc:	bf14      	ite	ne
    6dde:	2301      	movne	r3, #1
    6de0:	2300      	moveq	r3, #0
    6de2:	b2db      	uxtb	r3, r3
}
    6de4:	4618      	mov	r0, r3
    6de6:	3710      	adds	r7, #16
    6de8:	46bd      	mov	sp, r7
    6dea:	bd80      	pop	{r7, pc}
    6dec:	00006c7d 	.word	0x00006c7d

00006df0 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6df0:	b580      	push	{r7, lr}
    6df2:	b082      	sub	sp, #8
    6df4:	af00      	add	r7, sp, #0
    6df6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    6df8:	687b      	ldr	r3, [r7, #4]
    6dfa:	681b      	ldr	r3, [r3, #0]
    6dfc:	f023 0202 	bic.w	r2, r3, #2
    6e00:	687b      	ldr	r3, [r7, #4]
    6e02:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6e04:	2103      	movs	r1, #3
    6e06:	6878      	ldr	r0, [r7, #4]
    6e08:	4b02      	ldr	r3, [pc, #8]	; (6e14 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    6e0a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6e0c:	bf00      	nop
    6e0e:	3708      	adds	r7, #8
    6e10:	46bd      	mov	sp, r7
    6e12:	bd80      	pop	{r7, pc}
    6e14:	00006c7d 	.word	0x00006c7d

00006e18 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    6e18:	b480      	push	{r7}
    6e1a:	b085      	sub	sp, #20
    6e1c:	af00      	add	r7, sp, #0
    6e1e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    6e20:	687b      	ldr	r3, [r7, #4]
    6e22:	681b      	ldr	r3, [r3, #0]
    6e24:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    6e26:	68fb      	ldr	r3, [r7, #12]
    6e28:	089b      	lsrs	r3, r3, #2
    6e2a:	f003 0303 	and.w	r3, r3, #3
    6e2e:	60fb      	str	r3, [r7, #12]
	return tmp;
    6e30:	68fb      	ldr	r3, [r7, #12]
}
    6e32:	4618      	mov	r0, r3
    6e34:	3714      	adds	r7, #20
    6e36:	46bd      	mov	sp, r7
    6e38:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e3c:	4770      	bx	lr
	...

00006e40 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    6e40:	b580      	push	{r7, lr}
    6e42:	b084      	sub	sp, #16
    6e44:	af00      	add	r7, sp, #0
    6e46:	6078      	str	r0, [r7, #4]
    6e48:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6e4a:	2103      	movs	r1, #3
    6e4c:	6878      	ldr	r0, [r7, #4]
    6e4e:	4b07      	ldr	r3, [pc, #28]	; (6e6c <hri_tc_get_CTRLA_reg+0x2c>)
    6e50:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    6e52:	687b      	ldr	r3, [r7, #4]
    6e54:	681b      	ldr	r3, [r3, #0]
    6e56:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6e58:	68fa      	ldr	r2, [r7, #12]
    6e5a:	683b      	ldr	r3, [r7, #0]
    6e5c:	4013      	ands	r3, r2
    6e5e:	60fb      	str	r3, [r7, #12]
	return tmp;
    6e60:	68fb      	ldr	r3, [r7, #12]
}
    6e62:	4618      	mov	r0, r3
    6e64:	3710      	adds	r7, #16
    6e66:	46bd      	mov	sp, r7
    6e68:	bd80      	pop	{r7, pc}
    6e6a:	bf00      	nop
    6e6c:	00006c7d 	.word	0x00006c7d

00006e70 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    6e70:	b580      	push	{r7, lr}
    6e72:	b082      	sub	sp, #8
    6e74:	af00      	add	r7, sp, #0
    6e76:	6078      	str	r0, [r7, #4]
    6e78:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    6e7a:	687b      	ldr	r3, [r7, #4]
    6e7c:	683a      	ldr	r2, [r7, #0]
    6e7e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6e80:	2103      	movs	r1, #3
    6e82:	6878      	ldr	r0, [r7, #4]
    6e84:	4b02      	ldr	r3, [pc, #8]	; (6e90 <hri_tc_write_CTRLA_reg+0x20>)
    6e86:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6e88:	bf00      	nop
    6e8a:	3708      	adds	r7, #8
    6e8c:	46bd      	mov	sp, r7
    6e8e:	bd80      	pop	{r7, pc}
    6e90:	00006c7d 	.word	0x00006c7d

00006e94 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    6e94:	b480      	push	{r7}
    6e96:	b083      	sub	sp, #12
    6e98:	af00      	add	r7, sp, #0
    6e9a:	6078      	str	r0, [r7, #4]
    6e9c:	460b      	mov	r3, r1
    6e9e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    6ea0:	687b      	ldr	r3, [r7, #4]
    6ea2:	887a      	ldrh	r2, [r7, #2]
    6ea4:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    6ea6:	bf00      	nop
    6ea8:	370c      	adds	r7, #12
    6eaa:	46bd      	mov	sp, r7
    6eac:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eb0:	4770      	bx	lr

00006eb2 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    6eb2:	b480      	push	{r7}
    6eb4:	b083      	sub	sp, #12
    6eb6:	af00      	add	r7, sp, #0
    6eb8:	6078      	str	r0, [r7, #4]
    6eba:	460b      	mov	r3, r1
    6ebc:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    6ebe:	687b      	ldr	r3, [r7, #4]
    6ec0:	78fa      	ldrb	r2, [r7, #3]
    6ec2:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    6ec4:	bf00      	nop
    6ec6:	370c      	adds	r7, #12
    6ec8:	46bd      	mov	sp, r7
    6eca:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ece:	4770      	bx	lr

00006ed0 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    6ed0:	b480      	push	{r7}
    6ed2:	b083      	sub	sp, #12
    6ed4:	af00      	add	r7, sp, #0
    6ed6:	6078      	str	r0, [r7, #4]
    6ed8:	460b      	mov	r3, r1
    6eda:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    6edc:	687b      	ldr	r3, [r7, #4]
    6ede:	78fa      	ldrb	r2, [r7, #3]
    6ee0:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    6ee2:	bf00      	nop
    6ee4:	370c      	adds	r7, #12
    6ee6:	46bd      	mov	sp, r7
    6ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eec:	4770      	bx	lr
	...

00006ef0 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    6ef0:	b580      	push	{r7, lr}
    6ef2:	b082      	sub	sp, #8
    6ef4:	af00      	add	r7, sp, #0
    6ef6:	6078      	str	r0, [r7, #4]
    6ef8:	460b      	mov	r3, r1
    6efa:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    6efc:	687b      	ldr	r3, [r7, #4]
    6efe:	78fa      	ldrb	r2, [r7, #3]
    6f00:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    6f02:	2120      	movs	r1, #32
    6f04:	6878      	ldr	r0, [r7, #4]
    6f06:	4b03      	ldr	r3, [pc, #12]	; (6f14 <hri_tccount8_write_PER_reg+0x24>)
    6f08:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6f0a:	bf00      	nop
    6f0c:	3708      	adds	r7, #8
    6f0e:	46bd      	mov	sp, r7
    6f10:	bd80      	pop	{r7, pc}
    6f12:	bf00      	nop
    6f14:	00006c7d 	.word	0x00006c7d

00006f18 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    6f18:	b580      	push	{r7, lr}
    6f1a:	b082      	sub	sp, #8
    6f1c:	af00      	add	r7, sp, #0
    6f1e:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    6f20:	2120      	movs	r1, #32
    6f22:	6878      	ldr	r0, [r7, #4]
    6f24:	4b04      	ldr	r3, [pc, #16]	; (6f38 <hri_tccount8_read_PER_reg+0x20>)
    6f26:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    6f28:	687b      	ldr	r3, [r7, #4]
    6f2a:	7edb      	ldrb	r3, [r3, #27]
    6f2c:	b2db      	uxtb	r3, r3
}
    6f2e:	4618      	mov	r0, r3
    6f30:	3708      	adds	r7, #8
    6f32:	46bd      	mov	sp, r7
    6f34:	bd80      	pop	{r7, pc}
    6f36:	bf00      	nop
    6f38:	00006c7d 	.word	0x00006c7d

00006f3c <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    6f3c:	b580      	push	{r7, lr}
    6f3e:	b082      	sub	sp, #8
    6f40:	af00      	add	r7, sp, #0
    6f42:	6078      	str	r0, [r7, #4]
    6f44:	460b      	mov	r3, r1
    6f46:	70fb      	strb	r3, [r7, #3]
    6f48:	4613      	mov	r3, r2
    6f4a:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    6f4c:	78fb      	ldrb	r3, [r7, #3]
    6f4e:	687a      	ldr	r2, [r7, #4]
    6f50:	4413      	add	r3, r2
    6f52:	78ba      	ldrb	r2, [r7, #2]
    6f54:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    6f56:	21c0      	movs	r1, #192	; 0xc0
    6f58:	6878      	ldr	r0, [r7, #4]
    6f5a:	4b03      	ldr	r3, [pc, #12]	; (6f68 <hri_tccount8_write_CC_reg+0x2c>)
    6f5c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6f5e:	bf00      	nop
    6f60:	3708      	adds	r7, #8
    6f62:	46bd      	mov	sp, r7
    6f64:	bd80      	pop	{r7, pc}
    6f66:	bf00      	nop
    6f68:	00006c7d 	.word	0x00006c7d

00006f6c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    6f6c:	b580      	push	{r7, lr}
    6f6e:	b082      	sub	sp, #8
    6f70:	af00      	add	r7, sp, #0
    6f72:	6078      	str	r0, [r7, #4]
    6f74:	460b      	mov	r3, r1
    6f76:	70fb      	strb	r3, [r7, #3]
    6f78:	4613      	mov	r3, r2
    6f7a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    6f7c:	78fb      	ldrb	r3, [r7, #3]
    6f7e:	687a      	ldr	r2, [r7, #4]
    6f80:	330c      	adds	r3, #12
    6f82:	005b      	lsls	r3, r3, #1
    6f84:	4413      	add	r3, r2
    6f86:	883a      	ldrh	r2, [r7, #0]
    6f88:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    6f8a:	21c0      	movs	r1, #192	; 0xc0
    6f8c:	6878      	ldr	r0, [r7, #4]
    6f8e:	4b03      	ldr	r3, [pc, #12]	; (6f9c <hri_tccount16_write_CC_reg+0x30>)
    6f90:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6f92:	bf00      	nop
    6f94:	3708      	adds	r7, #8
    6f96:	46bd      	mov	sp, r7
    6f98:	bd80      	pop	{r7, pc}
    6f9a:	bf00      	nop
    6f9c:	00006c7d 	.word	0x00006c7d

00006fa0 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    6fa0:	b580      	push	{r7, lr}
    6fa2:	b082      	sub	sp, #8
    6fa4:	af00      	add	r7, sp, #0
    6fa6:	6078      	str	r0, [r7, #4]
    6fa8:	460b      	mov	r3, r1
    6faa:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    6fac:	21c0      	movs	r1, #192	; 0xc0
    6fae:	6878      	ldr	r0, [r7, #4]
    6fb0:	4b06      	ldr	r3, [pc, #24]	; (6fcc <hri_tccount16_read_CC_reg+0x2c>)
    6fb2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    6fb4:	78fb      	ldrb	r3, [r7, #3]
    6fb6:	687a      	ldr	r2, [r7, #4]
    6fb8:	330c      	adds	r3, #12
    6fba:	005b      	lsls	r3, r3, #1
    6fbc:	4413      	add	r3, r2
    6fbe:	889b      	ldrh	r3, [r3, #4]
    6fc0:	b29b      	uxth	r3, r3
}
    6fc2:	4618      	mov	r0, r3
    6fc4:	3708      	adds	r7, #8
    6fc6:	46bd      	mov	sp, r7
    6fc8:	bd80      	pop	{r7, pc}
    6fca:	bf00      	nop
    6fcc:	00006c7d 	.word	0x00006c7d

00006fd0 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    6fd0:	b580      	push	{r7, lr}
    6fd2:	b084      	sub	sp, #16
    6fd4:	af00      	add	r7, sp, #0
    6fd6:	60f8      	str	r0, [r7, #12]
    6fd8:	460b      	mov	r3, r1
    6fda:	607a      	str	r2, [r7, #4]
    6fdc:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    6fde:	7afb      	ldrb	r3, [r7, #11]
    6fe0:	68fa      	ldr	r2, [r7, #12]
    6fe2:	3306      	adds	r3, #6
    6fe4:	009b      	lsls	r3, r3, #2
    6fe6:	4413      	add	r3, r2
    6fe8:	687a      	ldr	r2, [r7, #4]
    6fea:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    6fec:	21c0      	movs	r1, #192	; 0xc0
    6fee:	68f8      	ldr	r0, [r7, #12]
    6ff0:	4b02      	ldr	r3, [pc, #8]	; (6ffc <hri_tccount32_write_CC_reg+0x2c>)
    6ff2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6ff4:	bf00      	nop
    6ff6:	3710      	adds	r7, #16
    6ff8:	46bd      	mov	sp, r7
    6ffa:	bd80      	pop	{r7, pc}
    6ffc:	00006c7d 	.word	0x00006c7d

00007000 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    7000:	b580      	push	{r7, lr}
    7002:	b082      	sub	sp, #8
    7004:	af00      	add	r7, sp, #0
    7006:	6078      	str	r0, [r7, #4]
    7008:	460b      	mov	r3, r1
    700a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    700c:	21c0      	movs	r1, #192	; 0xc0
    700e:	6878      	ldr	r0, [r7, #4]
    7010:	4b05      	ldr	r3, [pc, #20]	; (7028 <hri_tccount32_read_CC_reg+0x28>)
    7012:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7014:	78fb      	ldrb	r3, [r7, #3]
    7016:	687a      	ldr	r2, [r7, #4]
    7018:	3306      	adds	r3, #6
    701a:	009b      	lsls	r3, r3, #2
    701c:	4413      	add	r3, r2
    701e:	685b      	ldr	r3, [r3, #4]
}
    7020:	4618      	mov	r0, r3
    7022:	3708      	adds	r7, #8
    7024:	46bd      	mov	sp, r7
    7026:	bd80      	pop	{r7, pc}
    7028:	00006c7d 	.word	0x00006c7d

0000702c <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    702c:	b580      	push	{r7, lr}
    702e:	b084      	sub	sp, #16
    7030:	af00      	add	r7, sp, #0
    7032:	6078      	str	r0, [r7, #4]
    7034:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7036:	6838      	ldr	r0, [r7, #0]
    7038:	4b93      	ldr	r3, [pc, #588]	; (7288 <_tc_timer_init+0x25c>)
    703a:	4798      	blx	r3
    703c:	4603      	mov	r3, r0
    703e:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7040:	687b      	ldr	r3, [r7, #4]
    7042:	683a      	ldr	r2, [r7, #0]
    7044:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7046:	22a4      	movs	r2, #164	; 0xa4
    7048:	4990      	ldr	r1, [pc, #576]	; (728c <_tc_timer_init+0x260>)
    704a:	2001      	movs	r0, #1
    704c:	4b90      	ldr	r3, [pc, #576]	; (7290 <_tc_timer_init+0x264>)
    704e:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7050:	2101      	movs	r1, #1
    7052:	6838      	ldr	r0, [r7, #0]
    7054:	4b8f      	ldr	r3, [pc, #572]	; (7294 <_tc_timer_init+0x268>)
    7056:	4798      	blx	r3
    7058:	4603      	mov	r3, r0
    705a:	f083 0301 	eor.w	r3, r3, #1
    705e:	b2db      	uxtb	r3, r3
    7060:	2b00      	cmp	r3, #0
    7062:	d011      	beq.n	7088 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7064:	2102      	movs	r1, #2
    7066:	6838      	ldr	r0, [r7, #0]
    7068:	4b8b      	ldr	r3, [pc, #556]	; (7298 <_tc_timer_init+0x26c>)
    706a:	4798      	blx	r3
    706c:	4603      	mov	r3, r0
    706e:	2b00      	cmp	r3, #0
    7070:	d006      	beq.n	7080 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7072:	6838      	ldr	r0, [r7, #0]
    7074:	4b89      	ldr	r3, [pc, #548]	; (729c <_tc_timer_init+0x270>)
    7076:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7078:	2102      	movs	r1, #2
    707a:	6838      	ldr	r0, [r7, #0]
    707c:	4b88      	ldr	r3, [pc, #544]	; (72a0 <_tc_timer_init+0x274>)
    707e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7080:	2101      	movs	r1, #1
    7082:	6838      	ldr	r0, [r7, #0]
    7084:	4b87      	ldr	r3, [pc, #540]	; (72a4 <_tc_timer_init+0x278>)
    7086:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7088:	2101      	movs	r1, #1
    708a:	6838      	ldr	r0, [r7, #0]
    708c:	4b84      	ldr	r3, [pc, #528]	; (72a0 <_tc_timer_init+0x274>)
    708e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7090:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7094:	4984      	ldr	r1, [pc, #528]	; (72a8 <_tc_timer_init+0x27c>)
    7096:	4613      	mov	r3, r2
    7098:	009b      	lsls	r3, r3, #2
    709a:	4413      	add	r3, r2
    709c:	009b      	lsls	r3, r3, #2
    709e:	440b      	add	r3, r1
    70a0:	3304      	adds	r3, #4
    70a2:	681b      	ldr	r3, [r3, #0]
    70a4:	4619      	mov	r1, r3
    70a6:	6838      	ldr	r0, [r7, #0]
    70a8:	4b7e      	ldr	r3, [pc, #504]	; (72a4 <_tc_timer_init+0x278>)
    70aa:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    70ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    70b0:	497d      	ldr	r1, [pc, #500]	; (72a8 <_tc_timer_init+0x27c>)
    70b2:	4613      	mov	r3, r2
    70b4:	009b      	lsls	r3, r3, #2
    70b6:	4413      	add	r3, r2
    70b8:	009b      	lsls	r3, r3, #2
    70ba:	440b      	add	r3, r1
    70bc:	330a      	adds	r3, #10
    70be:	781b      	ldrb	r3, [r3, #0]
    70c0:	4619      	mov	r1, r3
    70c2:	6838      	ldr	r0, [r7, #0]
    70c4:	4b79      	ldr	r3, [pc, #484]	; (72ac <_tc_timer_init+0x280>)
    70c6:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    70c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    70cc:	4976      	ldr	r1, [pc, #472]	; (72a8 <_tc_timer_init+0x27c>)
    70ce:	4613      	mov	r3, r2
    70d0:	009b      	lsls	r3, r3, #2
    70d2:	4413      	add	r3, r2
    70d4:	009b      	lsls	r3, r3, #2
    70d6:	440b      	add	r3, r1
    70d8:	3308      	adds	r3, #8
    70da:	881b      	ldrh	r3, [r3, #0]
    70dc:	4619      	mov	r1, r3
    70de:	6838      	ldr	r0, [r7, #0]
    70e0:	4b73      	ldr	r3, [pc, #460]	; (72b0 <_tc_timer_init+0x284>)
    70e2:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    70e4:	2101      	movs	r1, #1
    70e6:	6838      	ldr	r0, [r7, #0]
    70e8:	4b72      	ldr	r3, [pc, #456]	; (72b4 <_tc_timer_init+0x288>)
    70ea:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    70ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    70f0:	496d      	ldr	r1, [pc, #436]	; (72a8 <_tc_timer_init+0x27c>)
    70f2:	4613      	mov	r3, r2
    70f4:	009b      	lsls	r3, r3, #2
    70f6:	4413      	add	r3, r2
    70f8:	009b      	lsls	r3, r3, #2
    70fa:	440b      	add	r3, r1
    70fc:	3304      	adds	r3, #4
    70fe:	681b      	ldr	r3, [r3, #0]
    7100:	f003 030c 	and.w	r3, r3, #12
    7104:	2b08      	cmp	r3, #8
    7106:	d11e      	bne.n	7146 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7108:	f997 200f 	ldrsb.w	r2, [r7, #15]
    710c:	4966      	ldr	r1, [pc, #408]	; (72a8 <_tc_timer_init+0x27c>)
    710e:	4613      	mov	r3, r2
    7110:	009b      	lsls	r3, r3, #2
    7112:	4413      	add	r3, r2
    7114:	009b      	lsls	r3, r3, #2
    7116:	440b      	add	r3, r1
    7118:	330c      	adds	r3, #12
    711a:	681b      	ldr	r3, [r3, #0]
    711c:	461a      	mov	r2, r3
    711e:	2100      	movs	r1, #0
    7120:	6838      	ldr	r0, [r7, #0]
    7122:	4b65      	ldr	r3, [pc, #404]	; (72b8 <_tc_timer_init+0x28c>)
    7124:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7126:	f997 200f 	ldrsb.w	r2, [r7, #15]
    712a:	495f      	ldr	r1, [pc, #380]	; (72a8 <_tc_timer_init+0x27c>)
    712c:	4613      	mov	r3, r2
    712e:	009b      	lsls	r3, r3, #2
    7130:	4413      	add	r3, r2
    7132:	009b      	lsls	r3, r3, #2
    7134:	440b      	add	r3, r1
    7136:	3310      	adds	r3, #16
    7138:	681b      	ldr	r3, [r3, #0]
    713a:	461a      	mov	r2, r3
    713c:	2101      	movs	r1, #1
    713e:	6838      	ldr	r0, [r7, #0]
    7140:	4b5d      	ldr	r3, [pc, #372]	; (72b8 <_tc_timer_init+0x28c>)
    7142:	4798      	blx	r3
    7144:	e06a      	b.n	721c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7146:	f997 200f 	ldrsb.w	r2, [r7, #15]
    714a:	4957      	ldr	r1, [pc, #348]	; (72a8 <_tc_timer_init+0x27c>)
    714c:	4613      	mov	r3, r2
    714e:	009b      	lsls	r3, r3, #2
    7150:	4413      	add	r3, r2
    7152:	009b      	lsls	r3, r3, #2
    7154:	440b      	add	r3, r1
    7156:	3304      	adds	r3, #4
    7158:	681b      	ldr	r3, [r3, #0]
    715a:	f003 030c 	and.w	r3, r3, #12
    715e:	2b00      	cmp	r3, #0
    7160:	d120      	bne.n	71a4 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7162:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7166:	4950      	ldr	r1, [pc, #320]	; (72a8 <_tc_timer_init+0x27c>)
    7168:	4613      	mov	r3, r2
    716a:	009b      	lsls	r3, r3, #2
    716c:	4413      	add	r3, r2
    716e:	009b      	lsls	r3, r3, #2
    7170:	440b      	add	r3, r1
    7172:	330c      	adds	r3, #12
    7174:	681b      	ldr	r3, [r3, #0]
    7176:	b29b      	uxth	r3, r3
    7178:	461a      	mov	r2, r3
    717a:	2100      	movs	r1, #0
    717c:	6838      	ldr	r0, [r7, #0]
    717e:	4b4f      	ldr	r3, [pc, #316]	; (72bc <_tc_timer_init+0x290>)
    7180:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7182:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7186:	4948      	ldr	r1, [pc, #288]	; (72a8 <_tc_timer_init+0x27c>)
    7188:	4613      	mov	r3, r2
    718a:	009b      	lsls	r3, r3, #2
    718c:	4413      	add	r3, r2
    718e:	009b      	lsls	r3, r3, #2
    7190:	440b      	add	r3, r1
    7192:	3310      	adds	r3, #16
    7194:	681b      	ldr	r3, [r3, #0]
    7196:	b29b      	uxth	r3, r3
    7198:	461a      	mov	r2, r3
    719a:	2101      	movs	r1, #1
    719c:	6838      	ldr	r0, [r7, #0]
    719e:	4b47      	ldr	r3, [pc, #284]	; (72bc <_tc_timer_init+0x290>)
    71a0:	4798      	blx	r3
    71a2:	e03b      	b.n	721c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    71a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    71a8:	493f      	ldr	r1, [pc, #252]	; (72a8 <_tc_timer_init+0x27c>)
    71aa:	4613      	mov	r3, r2
    71ac:	009b      	lsls	r3, r3, #2
    71ae:	4413      	add	r3, r2
    71b0:	009b      	lsls	r3, r3, #2
    71b2:	440b      	add	r3, r1
    71b4:	3304      	adds	r3, #4
    71b6:	681b      	ldr	r3, [r3, #0]
    71b8:	f003 030c 	and.w	r3, r3, #12
    71bc:	2b04      	cmp	r3, #4
    71be:	d12d      	bne.n	721c <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    71c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    71c4:	4938      	ldr	r1, [pc, #224]	; (72a8 <_tc_timer_init+0x27c>)
    71c6:	4613      	mov	r3, r2
    71c8:	009b      	lsls	r3, r3, #2
    71ca:	4413      	add	r3, r2
    71cc:	009b      	lsls	r3, r3, #2
    71ce:	440b      	add	r3, r1
    71d0:	330c      	adds	r3, #12
    71d2:	681b      	ldr	r3, [r3, #0]
    71d4:	b2db      	uxtb	r3, r3
    71d6:	461a      	mov	r2, r3
    71d8:	2100      	movs	r1, #0
    71da:	6838      	ldr	r0, [r7, #0]
    71dc:	4b38      	ldr	r3, [pc, #224]	; (72c0 <_tc_timer_init+0x294>)
    71de:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    71e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    71e4:	4930      	ldr	r1, [pc, #192]	; (72a8 <_tc_timer_init+0x27c>)
    71e6:	4613      	mov	r3, r2
    71e8:	009b      	lsls	r3, r3, #2
    71ea:	4413      	add	r3, r2
    71ec:	009b      	lsls	r3, r3, #2
    71ee:	440b      	add	r3, r1
    71f0:	3310      	adds	r3, #16
    71f2:	681b      	ldr	r3, [r3, #0]
    71f4:	b2db      	uxtb	r3, r3
    71f6:	461a      	mov	r2, r3
    71f8:	2101      	movs	r1, #1
    71fa:	6838      	ldr	r0, [r7, #0]
    71fc:	4b30      	ldr	r3, [pc, #192]	; (72c0 <_tc_timer_init+0x294>)
    71fe:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7200:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7204:	4928      	ldr	r1, [pc, #160]	; (72a8 <_tc_timer_init+0x27c>)
    7206:	4613      	mov	r3, r2
    7208:	009b      	lsls	r3, r3, #2
    720a:	4413      	add	r3, r2
    720c:	009b      	lsls	r3, r3, #2
    720e:	440b      	add	r3, r1
    7210:	330b      	adds	r3, #11
    7212:	781b      	ldrb	r3, [r3, #0]
    7214:	4619      	mov	r1, r3
    7216:	6838      	ldr	r0, [r7, #0]
    7218:	4b2a      	ldr	r3, [pc, #168]	; (72c4 <_tc_timer_init+0x298>)
    721a:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    721c:	6838      	ldr	r0, [r7, #0]
    721e:	4b2a      	ldr	r3, [pc, #168]	; (72c8 <_tc_timer_init+0x29c>)
    7220:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7222:	6879      	ldr	r1, [r7, #4]
    7224:	6838      	ldr	r0, [r7, #0]
    7226:	4b29      	ldr	r3, [pc, #164]	; (72cc <_tc_timer_init+0x2a0>)
    7228:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    722a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    722e:	491e      	ldr	r1, [pc, #120]	; (72a8 <_tc_timer_init+0x27c>)
    7230:	4613      	mov	r3, r2
    7232:	009b      	lsls	r3, r3, #2
    7234:	4413      	add	r3, r2
    7236:	009b      	lsls	r3, r3, #2
    7238:	440b      	add	r3, r1
    723a:	3302      	adds	r3, #2
    723c:	f9b3 3000 	ldrsh.w	r3, [r3]
    7240:	4618      	mov	r0, r3
    7242:	4b23      	ldr	r3, [pc, #140]	; (72d0 <_tc_timer_init+0x2a4>)
    7244:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7246:	f997 200f 	ldrsb.w	r2, [r7, #15]
    724a:	4917      	ldr	r1, [pc, #92]	; (72a8 <_tc_timer_init+0x27c>)
    724c:	4613      	mov	r3, r2
    724e:	009b      	lsls	r3, r3, #2
    7250:	4413      	add	r3, r2
    7252:	009b      	lsls	r3, r3, #2
    7254:	440b      	add	r3, r1
    7256:	3302      	adds	r3, #2
    7258:	f9b3 3000 	ldrsh.w	r3, [r3]
    725c:	4618      	mov	r0, r3
    725e:	4b1d      	ldr	r3, [pc, #116]	; (72d4 <_tc_timer_init+0x2a8>)
    7260:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7262:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7266:	4910      	ldr	r1, [pc, #64]	; (72a8 <_tc_timer_init+0x27c>)
    7268:	4613      	mov	r3, r2
    726a:	009b      	lsls	r3, r3, #2
    726c:	4413      	add	r3, r2
    726e:	009b      	lsls	r3, r3, #2
    7270:	440b      	add	r3, r1
    7272:	3302      	adds	r3, #2
    7274:	f9b3 3000 	ldrsh.w	r3, [r3]
    7278:	4618      	mov	r0, r3
    727a:	4b17      	ldr	r3, [pc, #92]	; (72d8 <_tc_timer_init+0x2ac>)
    727c:	4798      	blx	r3

	return ERR_NONE;
    727e:	2300      	movs	r3, #0
}
    7280:	4618      	mov	r0, r3
    7282:	3710      	adds	r7, #16
    7284:	46bd      	mov	sp, r7
    7286:	bd80      	pop	{r7, pc}
    7288:	0000787d 	.word	0x0000787d
    728c:	0000d248 	.word	0x0000d248
    7290:	00002de1 	.word	0x00002de1
    7294:	00006ca1 	.word	0x00006ca1
    7298:	00006e41 	.word	0x00006e41
    729c:	00006df1 	.word	0x00006df1
    72a0:	00006c7d 	.word	0x00006c7d
    72a4:	00006e71 	.word	0x00006e71
    72a8:	20000110 	.word	0x20000110
    72ac:	00006ed1 	.word	0x00006ed1
    72b0:	00006e95 	.word	0x00006e95
    72b4:	00006eb3 	.word	0x00006eb3
    72b8:	00006fd1 	.word	0x00006fd1
    72bc:	00006f6d 	.word	0x00006f6d
    72c0:	00006f3d 	.word	0x00006f3d
    72c4:	00006ef1 	.word	0x00006ef1
    72c8:	00006d25 	.word	0x00006d25
    72cc:	000078e5 	.word	0x000078e5
    72d0:	00006bfd 	.word	0x00006bfd
    72d4:	00006c41 	.word	0x00006c41
    72d8:	00006bc1 	.word	0x00006bc1

000072dc <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    72dc:	b580      	push	{r7, lr}
    72de:	b084      	sub	sp, #16
    72e0:	af00      	add	r7, sp, #0
    72e2:	6078      	str	r0, [r7, #4]
    72e4:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    72e6:	6838      	ldr	r0, [r7, #0]
    72e8:	4b73      	ldr	r3, [pc, #460]	; (74b8 <_pwm_init+0x1dc>)
    72ea:	4798      	blx	r3
    72ec:	4603      	mov	r3, r0
    72ee:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    72f0:	687b      	ldr	r3, [r7, #4]
    72f2:	683a      	ldr	r2, [r7, #0]
    72f4:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    72f6:	2101      	movs	r1, #1
    72f8:	6838      	ldr	r0, [r7, #0]
    72fa:	4b70      	ldr	r3, [pc, #448]	; (74bc <_pwm_init+0x1e0>)
    72fc:	4798      	blx	r3
    72fe:	4603      	mov	r3, r0
    7300:	f083 0301 	eor.w	r3, r3, #1
    7304:	b2db      	uxtb	r3, r3
    7306:	2b00      	cmp	r3, #0
    7308:	d011      	beq.n	732e <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    730a:	2102      	movs	r1, #2
    730c:	6838      	ldr	r0, [r7, #0]
    730e:	4b6c      	ldr	r3, [pc, #432]	; (74c0 <_pwm_init+0x1e4>)
    7310:	4798      	blx	r3
    7312:	4603      	mov	r3, r0
    7314:	2b00      	cmp	r3, #0
    7316:	d006      	beq.n	7326 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7318:	6838      	ldr	r0, [r7, #0]
    731a:	4b6a      	ldr	r3, [pc, #424]	; (74c4 <_pwm_init+0x1e8>)
    731c:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    731e:	2102      	movs	r1, #2
    7320:	6838      	ldr	r0, [r7, #0]
    7322:	4b69      	ldr	r3, [pc, #420]	; (74c8 <_pwm_init+0x1ec>)
    7324:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7326:	2101      	movs	r1, #1
    7328:	6838      	ldr	r0, [r7, #0]
    732a:	4b68      	ldr	r3, [pc, #416]	; (74cc <_pwm_init+0x1f0>)
    732c:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    732e:	2101      	movs	r1, #1
    7330:	6838      	ldr	r0, [r7, #0]
    7332:	4b65      	ldr	r3, [pc, #404]	; (74c8 <_pwm_init+0x1ec>)
    7334:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7336:	f997 200f 	ldrsb.w	r2, [r7, #15]
    733a:	4965      	ldr	r1, [pc, #404]	; (74d0 <_pwm_init+0x1f4>)
    733c:	4613      	mov	r3, r2
    733e:	009b      	lsls	r3, r3, #2
    7340:	4413      	add	r3, r2
    7342:	009b      	lsls	r3, r3, #2
    7344:	440b      	add	r3, r1
    7346:	3304      	adds	r3, #4
    7348:	681b      	ldr	r3, [r3, #0]
    734a:	4619      	mov	r1, r3
    734c:	6838      	ldr	r0, [r7, #0]
    734e:	4b5f      	ldr	r3, [pc, #380]	; (74cc <_pwm_init+0x1f0>)
    7350:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7352:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7356:	495e      	ldr	r1, [pc, #376]	; (74d0 <_pwm_init+0x1f4>)
    7358:	4613      	mov	r3, r2
    735a:	009b      	lsls	r3, r3, #2
    735c:	4413      	add	r3, r2
    735e:	009b      	lsls	r3, r3, #2
    7360:	440b      	add	r3, r1
    7362:	330a      	adds	r3, #10
    7364:	781b      	ldrb	r3, [r3, #0]
    7366:	4619      	mov	r1, r3
    7368:	6838      	ldr	r0, [r7, #0]
    736a:	4b5a      	ldr	r3, [pc, #360]	; (74d4 <_pwm_init+0x1f8>)
    736c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    736e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7372:	4957      	ldr	r1, [pc, #348]	; (74d0 <_pwm_init+0x1f4>)
    7374:	4613      	mov	r3, r2
    7376:	009b      	lsls	r3, r3, #2
    7378:	4413      	add	r3, r2
    737a:	009b      	lsls	r3, r3, #2
    737c:	440b      	add	r3, r1
    737e:	3308      	adds	r3, #8
    7380:	881b      	ldrh	r3, [r3, #0]
    7382:	4619      	mov	r1, r3
    7384:	6838      	ldr	r0, [r7, #0]
    7386:	4b54      	ldr	r3, [pc, #336]	; (74d8 <_pwm_init+0x1fc>)
    7388:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    738a:	2103      	movs	r1, #3
    738c:	6838      	ldr	r0, [r7, #0]
    738e:	4b53      	ldr	r3, [pc, #332]	; (74dc <_pwm_init+0x200>)
    7390:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7392:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7396:	494e      	ldr	r1, [pc, #312]	; (74d0 <_pwm_init+0x1f4>)
    7398:	4613      	mov	r3, r2
    739a:	009b      	lsls	r3, r3, #2
    739c:	4413      	add	r3, r2
    739e:	009b      	lsls	r3, r3, #2
    73a0:	440b      	add	r3, r1
    73a2:	3304      	adds	r3, #4
    73a4:	681b      	ldr	r3, [r3, #0]
    73a6:	f003 030c 	and.w	r3, r3, #12
    73aa:	2b08      	cmp	r3, #8
    73ac:	d11e      	bne.n	73ec <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    73ae:	f997 200f 	ldrsb.w	r2, [r7, #15]
    73b2:	4947      	ldr	r1, [pc, #284]	; (74d0 <_pwm_init+0x1f4>)
    73b4:	4613      	mov	r3, r2
    73b6:	009b      	lsls	r3, r3, #2
    73b8:	4413      	add	r3, r2
    73ba:	009b      	lsls	r3, r3, #2
    73bc:	440b      	add	r3, r1
    73be:	330c      	adds	r3, #12
    73c0:	681b      	ldr	r3, [r3, #0]
    73c2:	461a      	mov	r2, r3
    73c4:	2100      	movs	r1, #0
    73c6:	6838      	ldr	r0, [r7, #0]
    73c8:	4b45      	ldr	r3, [pc, #276]	; (74e0 <_pwm_init+0x204>)
    73ca:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    73cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    73d0:	493f      	ldr	r1, [pc, #252]	; (74d0 <_pwm_init+0x1f4>)
    73d2:	4613      	mov	r3, r2
    73d4:	009b      	lsls	r3, r3, #2
    73d6:	4413      	add	r3, r2
    73d8:	009b      	lsls	r3, r3, #2
    73da:	440b      	add	r3, r1
    73dc:	3310      	adds	r3, #16
    73de:	681b      	ldr	r3, [r3, #0]
    73e0:	461a      	mov	r2, r3
    73e2:	2101      	movs	r1, #1
    73e4:	6838      	ldr	r0, [r7, #0]
    73e6:	4b3e      	ldr	r3, [pc, #248]	; (74e0 <_pwm_init+0x204>)
    73e8:	4798      	blx	r3
    73ea:	e031      	b.n	7450 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    73ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    73f0:	4937      	ldr	r1, [pc, #220]	; (74d0 <_pwm_init+0x1f4>)
    73f2:	4613      	mov	r3, r2
    73f4:	009b      	lsls	r3, r3, #2
    73f6:	4413      	add	r3, r2
    73f8:	009b      	lsls	r3, r3, #2
    73fa:	440b      	add	r3, r1
    73fc:	3304      	adds	r3, #4
    73fe:	681b      	ldr	r3, [r3, #0]
    7400:	f003 030c 	and.w	r3, r3, #12
    7404:	2b00      	cmp	r3, #0
    7406:	d120      	bne.n	744a <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7408:	f997 200f 	ldrsb.w	r2, [r7, #15]
    740c:	4930      	ldr	r1, [pc, #192]	; (74d0 <_pwm_init+0x1f4>)
    740e:	4613      	mov	r3, r2
    7410:	009b      	lsls	r3, r3, #2
    7412:	4413      	add	r3, r2
    7414:	009b      	lsls	r3, r3, #2
    7416:	440b      	add	r3, r1
    7418:	330c      	adds	r3, #12
    741a:	681b      	ldr	r3, [r3, #0]
    741c:	b29b      	uxth	r3, r3
    741e:	461a      	mov	r2, r3
    7420:	2100      	movs	r1, #0
    7422:	6838      	ldr	r0, [r7, #0]
    7424:	4b2f      	ldr	r3, [pc, #188]	; (74e4 <_pwm_init+0x208>)
    7426:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7428:	f997 200f 	ldrsb.w	r2, [r7, #15]
    742c:	4928      	ldr	r1, [pc, #160]	; (74d0 <_pwm_init+0x1f4>)
    742e:	4613      	mov	r3, r2
    7430:	009b      	lsls	r3, r3, #2
    7432:	4413      	add	r3, r2
    7434:	009b      	lsls	r3, r3, #2
    7436:	440b      	add	r3, r1
    7438:	3310      	adds	r3, #16
    743a:	681b      	ldr	r3, [r3, #0]
    743c:	b29b      	uxth	r3, r3
    743e:	461a      	mov	r2, r3
    7440:	2101      	movs	r1, #1
    7442:	6838      	ldr	r0, [r7, #0]
    7444:	4b27      	ldr	r3, [pc, #156]	; (74e4 <_pwm_init+0x208>)
    7446:	4798      	blx	r3
    7448:	e002      	b.n	7450 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    744a:	f04f 33ff 	mov.w	r3, #4294967295
    744e:	e02e      	b.n	74ae <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    7450:	6879      	ldr	r1, [r7, #4]
    7452:	6838      	ldr	r0, [r7, #0]
    7454:	4b24      	ldr	r3, [pc, #144]	; (74e8 <_pwm_init+0x20c>)
    7456:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7458:	f997 200f 	ldrsb.w	r2, [r7, #15]
    745c:	491c      	ldr	r1, [pc, #112]	; (74d0 <_pwm_init+0x1f4>)
    745e:	4613      	mov	r3, r2
    7460:	009b      	lsls	r3, r3, #2
    7462:	4413      	add	r3, r2
    7464:	009b      	lsls	r3, r3, #2
    7466:	440b      	add	r3, r1
    7468:	3302      	adds	r3, #2
    746a:	f9b3 3000 	ldrsh.w	r3, [r3]
    746e:	4618      	mov	r0, r3
    7470:	4b1e      	ldr	r3, [pc, #120]	; (74ec <_pwm_init+0x210>)
    7472:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7474:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7478:	4915      	ldr	r1, [pc, #84]	; (74d0 <_pwm_init+0x1f4>)
    747a:	4613      	mov	r3, r2
    747c:	009b      	lsls	r3, r3, #2
    747e:	4413      	add	r3, r2
    7480:	009b      	lsls	r3, r3, #2
    7482:	440b      	add	r3, r1
    7484:	3302      	adds	r3, #2
    7486:	f9b3 3000 	ldrsh.w	r3, [r3]
    748a:	4618      	mov	r0, r3
    748c:	4b18      	ldr	r3, [pc, #96]	; (74f0 <_pwm_init+0x214>)
    748e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7490:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7494:	490e      	ldr	r1, [pc, #56]	; (74d0 <_pwm_init+0x1f4>)
    7496:	4613      	mov	r3, r2
    7498:	009b      	lsls	r3, r3, #2
    749a:	4413      	add	r3, r2
    749c:	009b      	lsls	r3, r3, #2
    749e:	440b      	add	r3, r1
    74a0:	3302      	adds	r3, #2
    74a2:	f9b3 3000 	ldrsh.w	r3, [r3]
    74a6:	4618      	mov	r0, r3
    74a8:	4b12      	ldr	r3, [pc, #72]	; (74f4 <_pwm_init+0x218>)
    74aa:	4798      	blx	r3

	return 0;
    74ac:	2300      	movs	r3, #0
}
    74ae:	4618      	mov	r0, r3
    74b0:	3710      	adds	r7, #16
    74b2:	46bd      	mov	sp, r7
    74b4:	bd80      	pop	{r7, pc}
    74b6:	bf00      	nop
    74b8:	0000787d 	.word	0x0000787d
    74bc:	00006ca1 	.word	0x00006ca1
    74c0:	00006e41 	.word	0x00006e41
    74c4:	00006df1 	.word	0x00006df1
    74c8:	00006c7d 	.word	0x00006c7d
    74cc:	00006e71 	.word	0x00006e71
    74d0:	20000110 	.word	0x20000110
    74d4:	00006ed1 	.word	0x00006ed1
    74d8:	00006e95 	.word	0x00006e95
    74dc:	00006eb3 	.word	0x00006eb3
    74e0:	00006fd1 	.word	0x00006fd1
    74e4:	00006f6d 	.word	0x00006f6d
    74e8:	000078e5 	.word	0x000078e5
    74ec:	00006bfd 	.word	0x00006bfd
    74f0:	00006c41 	.word	0x00006c41
    74f4:	00006bc1 	.word	0x00006bc1

000074f8 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    74f8:	b580      	push	{r7, lr}
    74fa:	b084      	sub	sp, #16
    74fc:	af00      	add	r7, sp, #0
    74fe:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7500:	687b      	ldr	r3, [r7, #4]
    7502:	68db      	ldr	r3, [r3, #12]
    7504:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7506:	68f8      	ldr	r0, [r7, #12]
    7508:	4b10      	ldr	r3, [pc, #64]	; (754c <_tc_timer_deinit+0x54>)
    750a:	4798      	blx	r3
    750c:	4603      	mov	r3, r0
    750e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7510:	22f9      	movs	r2, #249	; 0xf9
    7512:	490f      	ldr	r1, [pc, #60]	; (7550 <_tc_timer_deinit+0x58>)
    7514:	2001      	movs	r0, #1
    7516:	4b0f      	ldr	r3, [pc, #60]	; (7554 <_tc_timer_deinit+0x5c>)
    7518:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    751a:	f997 200b 	ldrsb.w	r2, [r7, #11]
    751e:	490e      	ldr	r1, [pc, #56]	; (7558 <_tc_timer_deinit+0x60>)
    7520:	4613      	mov	r3, r2
    7522:	009b      	lsls	r3, r3, #2
    7524:	4413      	add	r3, r2
    7526:	009b      	lsls	r3, r3, #2
    7528:	440b      	add	r3, r1
    752a:	3302      	adds	r3, #2
    752c:	f9b3 3000 	ldrsh.w	r3, [r3]
    7530:	4618      	mov	r0, r3
    7532:	4b0a      	ldr	r3, [pc, #40]	; (755c <_tc_timer_deinit+0x64>)
    7534:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7536:	68f8      	ldr	r0, [r7, #12]
    7538:	4b09      	ldr	r3, [pc, #36]	; (7560 <_tc_timer_deinit+0x68>)
    753a:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    753c:	68f8      	ldr	r0, [r7, #12]
    753e:	4b09      	ldr	r3, [pc, #36]	; (7564 <_tc_timer_deinit+0x6c>)
    7540:	4798      	blx	r3
}
    7542:	bf00      	nop
    7544:	3710      	adds	r7, #16
    7546:	46bd      	mov	sp, r7
    7548:	bd80      	pop	{r7, pc}
    754a:	bf00      	nop
    754c:	0000787d 	.word	0x0000787d
    7550:	0000d248 	.word	0x0000d248
    7554:	00002de1 	.word	0x00002de1
    7558:	20000110 	.word	0x20000110
    755c:	00006bfd 	.word	0x00006bfd
    7560:	00006df1 	.word	0x00006df1
    7564:	00006d69 	.word	0x00006d69

00007568 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    7568:	b580      	push	{r7, lr}
    756a:	b082      	sub	sp, #8
    756c:	af00      	add	r7, sp, #0
    756e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7570:	687b      	ldr	r3, [r7, #4]
    7572:	68db      	ldr	r3, [r3, #12]
    7574:	4618      	mov	r0, r3
    7576:	4b03      	ldr	r3, [pc, #12]	; (7584 <_tc_timer_start+0x1c>)
    7578:	4798      	blx	r3
}
    757a:	bf00      	nop
    757c:	3708      	adds	r7, #8
    757e:	46bd      	mov	sp, r7
    7580:	bd80      	pop	{r7, pc}
    7582:	bf00      	nop
    7584:	00006d91 	.word	0x00006d91

00007588 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    7588:	b580      	push	{r7, lr}
    758a:	b082      	sub	sp, #8
    758c:	af00      	add	r7, sp, #0
    758e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7590:	687b      	ldr	r3, [r7, #4]
    7592:	68db      	ldr	r3, [r3, #12]
    7594:	4618      	mov	r0, r3
    7596:	4b03      	ldr	r3, [pc, #12]	; (75a4 <_tc_timer_stop+0x1c>)
    7598:	4798      	blx	r3
}
    759a:	bf00      	nop
    759c:	3708      	adds	r7, #8
    759e:	46bd      	mov	sp, r7
    75a0:	bd80      	pop	{r7, pc}
    75a2:	bf00      	nop
    75a4:	00006df1 	.word	0x00006df1

000075a8 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    75a8:	b580      	push	{r7, lr}
    75aa:	b084      	sub	sp, #16
    75ac:	af00      	add	r7, sp, #0
    75ae:	6078      	str	r0, [r7, #4]
    75b0:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    75b2:	687b      	ldr	r3, [r7, #4]
    75b4:	68db      	ldr	r3, [r3, #12]
    75b6:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    75b8:	68f8      	ldr	r0, [r7, #12]
    75ba:	4b14      	ldr	r3, [pc, #80]	; (760c <_tc_timer_set_period+0x64>)
    75bc:	4798      	blx	r3
    75be:	4603      	mov	r3, r0
    75c0:	2b02      	cmp	r3, #2
    75c2:	d105      	bne.n	75d0 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    75c4:	683a      	ldr	r2, [r7, #0]
    75c6:	2100      	movs	r1, #0
    75c8:	68f8      	ldr	r0, [r7, #12]
    75ca:	4b11      	ldr	r3, [pc, #68]	; (7610 <_tc_timer_set_period+0x68>)
    75cc:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    75ce:	e019      	b.n	7604 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    75d0:	68f8      	ldr	r0, [r7, #12]
    75d2:	4b0e      	ldr	r3, [pc, #56]	; (760c <_tc_timer_set_period+0x64>)
    75d4:	4798      	blx	r3
    75d6:	4603      	mov	r3, r0
    75d8:	2b00      	cmp	r3, #0
    75da:	d107      	bne.n	75ec <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    75dc:	683b      	ldr	r3, [r7, #0]
    75de:	b29b      	uxth	r3, r3
    75e0:	461a      	mov	r2, r3
    75e2:	2100      	movs	r1, #0
    75e4:	68f8      	ldr	r0, [r7, #12]
    75e6:	4b0b      	ldr	r3, [pc, #44]	; (7614 <_tc_timer_set_period+0x6c>)
    75e8:	4798      	blx	r3
}
    75ea:	e00b      	b.n	7604 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    75ec:	68f8      	ldr	r0, [r7, #12]
    75ee:	4b07      	ldr	r3, [pc, #28]	; (760c <_tc_timer_set_period+0x64>)
    75f0:	4798      	blx	r3
    75f2:	4603      	mov	r3, r0
    75f4:	2b01      	cmp	r3, #1
    75f6:	d105      	bne.n	7604 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    75f8:	683b      	ldr	r3, [r7, #0]
    75fa:	b2db      	uxtb	r3, r3
    75fc:	4619      	mov	r1, r3
    75fe:	68f8      	ldr	r0, [r7, #12]
    7600:	4b05      	ldr	r3, [pc, #20]	; (7618 <_tc_timer_set_period+0x70>)
    7602:	4798      	blx	r3
}
    7604:	bf00      	nop
    7606:	3710      	adds	r7, #16
    7608:	46bd      	mov	sp, r7
    760a:	bd80      	pop	{r7, pc}
    760c:	00006e19 	.word	0x00006e19
    7610:	00006fd1 	.word	0x00006fd1
    7614:	00006f6d 	.word	0x00006f6d
    7618:	00006ef1 	.word	0x00006ef1

0000761c <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    761c:	b580      	push	{r7, lr}
    761e:	b084      	sub	sp, #16
    7620:	af00      	add	r7, sp, #0
    7622:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7624:	687b      	ldr	r3, [r7, #4]
    7626:	68db      	ldr	r3, [r3, #12]
    7628:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    762a:	68f8      	ldr	r0, [r7, #12]
    762c:	4b13      	ldr	r3, [pc, #76]	; (767c <_tc_timer_get_period+0x60>)
    762e:	4798      	blx	r3
    7630:	4603      	mov	r3, r0
    7632:	2b02      	cmp	r3, #2
    7634:	d105      	bne.n	7642 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    7636:	2100      	movs	r1, #0
    7638:	68f8      	ldr	r0, [r7, #12]
    763a:	4b11      	ldr	r3, [pc, #68]	; (7680 <_tc_timer_get_period+0x64>)
    763c:	4798      	blx	r3
    763e:	4603      	mov	r3, r0
    7640:	e017      	b.n	7672 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7642:	68f8      	ldr	r0, [r7, #12]
    7644:	4b0d      	ldr	r3, [pc, #52]	; (767c <_tc_timer_get_period+0x60>)
    7646:	4798      	blx	r3
    7648:	4603      	mov	r3, r0
    764a:	2b00      	cmp	r3, #0
    764c:	d105      	bne.n	765a <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    764e:	2100      	movs	r1, #0
    7650:	68f8      	ldr	r0, [r7, #12]
    7652:	4b0c      	ldr	r3, [pc, #48]	; (7684 <_tc_timer_get_period+0x68>)
    7654:	4798      	blx	r3
    7656:	4603      	mov	r3, r0
    7658:	e00b      	b.n	7672 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    765a:	68f8      	ldr	r0, [r7, #12]
    765c:	4b07      	ldr	r3, [pc, #28]	; (767c <_tc_timer_get_period+0x60>)
    765e:	4798      	blx	r3
    7660:	4603      	mov	r3, r0
    7662:	2b01      	cmp	r3, #1
    7664:	d104      	bne.n	7670 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    7666:	68f8      	ldr	r0, [r7, #12]
    7668:	4b07      	ldr	r3, [pc, #28]	; (7688 <_tc_timer_get_period+0x6c>)
    766a:	4798      	blx	r3
    766c:	4603      	mov	r3, r0
    766e:	e000      	b.n	7672 <_tc_timer_get_period+0x56>
	}

	return 0;
    7670:	2300      	movs	r3, #0
}
    7672:	4618      	mov	r0, r3
    7674:	3710      	adds	r7, #16
    7676:	46bd      	mov	sp, r7
    7678:	bd80      	pop	{r7, pc}
    767a:	bf00      	nop
    767c:	00006e19 	.word	0x00006e19
    7680:	00007001 	.word	0x00007001
    7684:	00006fa1 	.word	0x00006fa1
    7688:	00006f19 	.word	0x00006f19

0000768c <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    768c:	b580      	push	{r7, lr}
    768e:	b082      	sub	sp, #8
    7690:	af00      	add	r7, sp, #0
    7692:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7694:	687b      	ldr	r3, [r7, #4]
    7696:	68db      	ldr	r3, [r3, #12]
    7698:	4618      	mov	r0, r3
    769a:	4b03      	ldr	r3, [pc, #12]	; (76a8 <_tc_timer_is_started+0x1c>)
    769c:	4798      	blx	r3
    769e:	4603      	mov	r3, r0
}
    76a0:	4618      	mov	r0, r3
    76a2:	3708      	adds	r7, #8
    76a4:	46bd      	mov	sp, r7
    76a6:	bd80      	pop	{r7, pc}
    76a8:	00006db9 	.word	0x00006db9

000076ac <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    76ac:	b480      	push	{r7}
    76ae:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    76b0:	4b02      	ldr	r3, [pc, #8]	; (76bc <_tc_get_timer+0x10>)
}
    76b2:	4618      	mov	r0, r3
    76b4:	46bd      	mov	sp, r7
    76b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    76ba:	4770      	bx	lr
    76bc:	20000188 	.word	0x20000188

000076c0 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    76c0:	b480      	push	{r7}
    76c2:	af00      	add	r7, sp, #0
	return NULL;
    76c4:	2300      	movs	r3, #0
}
    76c6:	4618      	mov	r0, r3
    76c8:	46bd      	mov	sp, r7
    76ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    76ce:	4770      	bx	lr

000076d0 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    76d0:	b580      	push	{r7, lr}
    76d2:	b084      	sub	sp, #16
    76d4:	af00      	add	r7, sp, #0
    76d6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    76d8:	687b      	ldr	r3, [r7, #4]
    76da:	68db      	ldr	r3, [r3, #12]
    76dc:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    76de:	68f8      	ldr	r0, [r7, #12]
    76e0:	4b0e      	ldr	r3, [pc, #56]	; (771c <_tc_timer_set_irq+0x4c>)
    76e2:	4798      	blx	r3
    76e4:	4603      	mov	r3, r0
    76e6:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    76e8:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    76ec:	490c      	ldr	r1, [pc, #48]	; (7720 <_tc_timer_set_irq+0x50>)
    76ee:	2001      	movs	r0, #1
    76f0:	4b0c      	ldr	r3, [pc, #48]	; (7724 <_tc_timer_set_irq+0x54>)
    76f2:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    76f4:	f997 200b 	ldrsb.w	r2, [r7, #11]
    76f8:	490b      	ldr	r1, [pc, #44]	; (7728 <_tc_timer_set_irq+0x58>)
    76fa:	4613      	mov	r3, r2
    76fc:	009b      	lsls	r3, r3, #2
    76fe:	4413      	add	r3, r2
    7700:	009b      	lsls	r3, r3, #2
    7702:	440b      	add	r3, r1
    7704:	3302      	adds	r3, #2
    7706:	f9b3 3000 	ldrsh.w	r3, [r3]
    770a:	b2db      	uxtb	r3, r3
    770c:	4618      	mov	r0, r3
    770e:	4b07      	ldr	r3, [pc, #28]	; (772c <_tc_timer_set_irq+0x5c>)
    7710:	4798      	blx	r3
}
    7712:	bf00      	nop
    7714:	3710      	adds	r7, #16
    7716:	46bd      	mov	sp, r7
    7718:	bd80      	pop	{r7, pc}
    771a:	bf00      	nop
    771c:	0000787d 	.word	0x0000787d
    7720:	0000d248 	.word	0x0000d248
    7724:	00002de1 	.word	0x00002de1
    7728:	20000110 	.word	0x20000110
    772c:	000035c1 	.word	0x000035c1

00007730 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7730:	b580      	push	{r7, lr}
    7732:	b084      	sub	sp, #16
    7734:	af00      	add	r7, sp, #0
    7736:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7738:	687b      	ldr	r3, [r7, #4]
    773a:	68db      	ldr	r3, [r3, #12]
    773c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    773e:	68f8      	ldr	r0, [r7, #12]
    7740:	4b07      	ldr	r3, [pc, #28]	; (7760 <tc_interrupt_handler+0x30>)
    7742:	4798      	blx	r3
    7744:	4603      	mov	r3, r0
    7746:	2b00      	cmp	r3, #0
    7748:	d006      	beq.n	7758 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    774a:	68f8      	ldr	r0, [r7, #12]
    774c:	4b05      	ldr	r3, [pc, #20]	; (7764 <tc_interrupt_handler+0x34>)
    774e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7750:	687b      	ldr	r3, [r7, #4]
    7752:	681b      	ldr	r3, [r3, #0]
    7754:	6878      	ldr	r0, [r7, #4]
    7756:	4798      	blx	r3
	}
}
    7758:	bf00      	nop
    775a:	3710      	adds	r7, #16
    775c:	46bd      	mov	sp, r7
    775e:	bd80      	pop	{r7, pc}
    7760:	00006cc9 	.word	0x00006cc9
    7764:	00006cf1 	.word	0x00006cf1

00007768 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    7768:	b580      	push	{r7, lr}
    776a:	b084      	sub	sp, #16
    776c:	af00      	add	r7, sp, #0
    776e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7770:	687b      	ldr	r3, [r7, #4]
    7772:	691b      	ldr	r3, [r3, #16]
    7774:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7776:	68f8      	ldr	r0, [r7, #12]
    7778:	4b12      	ldr	r3, [pc, #72]	; (77c4 <tc_pwm_interrupt_handler+0x5c>)
    777a:	4798      	blx	r3
    777c:	4603      	mov	r3, r0
    777e:	2b00      	cmp	r3, #0
    7780:	d00a      	beq.n	7798 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7782:	68f8      	ldr	r0, [r7, #12]
    7784:	4b10      	ldr	r3, [pc, #64]	; (77c8 <tc_pwm_interrupt_handler+0x60>)
    7786:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    7788:	687b      	ldr	r3, [r7, #4]
    778a:	681b      	ldr	r3, [r3, #0]
    778c:	2b00      	cmp	r3, #0
    778e:	d003      	beq.n	7798 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    7790:	687b      	ldr	r3, [r7, #4]
    7792:	681b      	ldr	r3, [r3, #0]
    7794:	6878      	ldr	r0, [r7, #4]
    7796:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    7798:	68f8      	ldr	r0, [r7, #12]
    779a:	4b0c      	ldr	r3, [pc, #48]	; (77cc <tc_pwm_interrupt_handler+0x64>)
    779c:	4798      	blx	r3
    779e:	4603      	mov	r3, r0
    77a0:	2b00      	cmp	r3, #0
    77a2:	d00a      	beq.n	77ba <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    77a4:	68f8      	ldr	r0, [r7, #12]
    77a6:	4b0a      	ldr	r3, [pc, #40]	; (77d0 <tc_pwm_interrupt_handler+0x68>)
    77a8:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    77aa:	687b      	ldr	r3, [r7, #4]
    77ac:	685b      	ldr	r3, [r3, #4]
    77ae:	2b00      	cmp	r3, #0
    77b0:	d003      	beq.n	77ba <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    77b2:	687b      	ldr	r3, [r7, #4]
    77b4:	685b      	ldr	r3, [r3, #4]
    77b6:	6878      	ldr	r0, [r7, #4]
    77b8:	4798      	blx	r3
		}
	}
}
    77ba:	bf00      	nop
    77bc:	3710      	adds	r7, #16
    77be:	46bd      	mov	sp, r7
    77c0:	bd80      	pop	{r7, pc}
    77c2:	bf00      	nop
    77c4:	00006cc9 	.word	0x00006cc9
    77c8:	00006cf1 	.word	0x00006cf1
    77cc:	00006d3f 	.word	0x00006d3f
    77d0:	00006d0b 	.word	0x00006d0b

000077d4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    77d4:	b580      	push	{r7, lr}
    77d6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    77d8:	4b03      	ldr	r3, [pc, #12]	; (77e8 <TC0_Handler+0x14>)
    77da:	681b      	ldr	r3, [r3, #0]
    77dc:	4618      	mov	r0, r3
    77de:	4b03      	ldr	r3, [pc, #12]	; (77ec <TC0_Handler+0x18>)
    77e0:	4798      	blx	r3
}
    77e2:	bf00      	nop
    77e4:	bd80      	pop	{r7, pc}
    77e6:	bf00      	nop
    77e8:	20000850 	.word	0x20000850
    77ec:	00007731 	.word	0x00007731

000077f0 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    77f0:	b580      	push	{r7, lr}
    77f2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    77f4:	4b03      	ldr	r3, [pc, #12]	; (7804 <TC2_Handler+0x14>)
    77f6:	681b      	ldr	r3, [r3, #0]
    77f8:	4618      	mov	r0, r3
    77fa:	4b03      	ldr	r3, [pc, #12]	; (7808 <TC2_Handler+0x18>)
    77fc:	4798      	blx	r3
}
    77fe:	bf00      	nop
    7800:	bd80      	pop	{r7, pc}
    7802:	bf00      	nop
    7804:	20000854 	.word	0x20000854
    7808:	00007731 	.word	0x00007731

0000780c <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    780c:	b580      	push	{r7, lr}
    780e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    7810:	4b03      	ldr	r3, [pc, #12]	; (7820 <TC4_Handler+0x14>)
    7812:	681b      	ldr	r3, [r3, #0]
    7814:	4618      	mov	r0, r3
    7816:	4b03      	ldr	r3, [pc, #12]	; (7824 <TC4_Handler+0x18>)
    7818:	4798      	blx	r3
}
    781a:	bf00      	nop
    781c:	bd80      	pop	{r7, pc}
    781e:	bf00      	nop
    7820:	20000858 	.word	0x20000858
    7824:	00007731 	.word	0x00007731

00007828 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    7828:	b580      	push	{r7, lr}
    782a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    782c:	4b03      	ldr	r3, [pc, #12]	; (783c <TC5_Handler+0x14>)
    782e:	681b      	ldr	r3, [r3, #0]
    7830:	4618      	mov	r0, r3
    7832:	4b03      	ldr	r3, [pc, #12]	; (7840 <TC5_Handler+0x18>)
    7834:	4798      	blx	r3
}
    7836:	bf00      	nop
    7838:	bd80      	pop	{r7, pc}
    783a:	bf00      	nop
    783c:	2000085c 	.word	0x2000085c
    7840:	00007731 	.word	0x00007731

00007844 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    7844:	b580      	push	{r7, lr}
    7846:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    7848:	4b03      	ldr	r3, [pc, #12]	; (7858 <TC6_Handler+0x14>)
    784a:	681b      	ldr	r3, [r3, #0]
    784c:	4618      	mov	r0, r3
    784e:	4b03      	ldr	r3, [pc, #12]	; (785c <TC6_Handler+0x18>)
    7850:	4798      	blx	r3
}
    7852:	bf00      	nop
    7854:	bd80      	pop	{r7, pc}
    7856:	bf00      	nop
    7858:	20000860 	.word	0x20000860
    785c:	00007731 	.word	0x00007731

00007860 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    7860:	b580      	push	{r7, lr}
    7862:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    7864:	4b03      	ldr	r3, [pc, #12]	; (7874 <TC7_Handler+0x14>)
    7866:	681b      	ldr	r3, [r3, #0]
    7868:	4618      	mov	r0, r3
    786a:	4b03      	ldr	r3, [pc, #12]	; (7878 <TC7_Handler+0x18>)
    786c:	4798      	blx	r3
}
    786e:	bf00      	nop
    7870:	bd80      	pop	{r7, pc}
    7872:	bf00      	nop
    7874:	20000864 	.word	0x20000864
    7878:	00007769 	.word	0x00007769

0000787c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    787c:	b580      	push	{r7, lr}
    787e:	b084      	sub	sp, #16
    7880:	af00      	add	r7, sp, #0
    7882:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    7884:	6878      	ldr	r0, [r7, #4]
    7886:	4b13      	ldr	r3, [pc, #76]	; (78d4 <get_tc_index+0x58>)
    7888:	4798      	blx	r3
    788a:	4603      	mov	r3, r0
    788c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    788e:	2300      	movs	r3, #0
    7890:	73fb      	strb	r3, [r7, #15]
    7892:	e010      	b.n	78b6 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    7894:	7bfa      	ldrb	r2, [r7, #15]
    7896:	4910      	ldr	r1, [pc, #64]	; (78d8 <get_tc_index+0x5c>)
    7898:	4613      	mov	r3, r2
    789a:	009b      	lsls	r3, r3, #2
    789c:	4413      	add	r3, r2
    789e:	009b      	lsls	r3, r3, #2
    78a0:	440b      	add	r3, r1
    78a2:	781b      	ldrb	r3, [r3, #0]
    78a4:	7bba      	ldrb	r2, [r7, #14]
    78a6:	429a      	cmp	r2, r3
    78a8:	d102      	bne.n	78b0 <get_tc_index+0x34>
			return i;
    78aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    78ae:	e00d      	b.n	78cc <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    78b0:	7bfb      	ldrb	r3, [r7, #15]
    78b2:	3301      	adds	r3, #1
    78b4:	73fb      	strb	r3, [r7, #15]
    78b6:	7bfb      	ldrb	r3, [r7, #15]
    78b8:	2b05      	cmp	r3, #5
    78ba:	d9eb      	bls.n	7894 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    78bc:	f240 221d 	movw	r2, #541	; 0x21d
    78c0:	4906      	ldr	r1, [pc, #24]	; (78dc <get_tc_index+0x60>)
    78c2:	2000      	movs	r0, #0
    78c4:	4b06      	ldr	r3, [pc, #24]	; (78e0 <get_tc_index+0x64>)
    78c6:	4798      	blx	r3
	return -1;
    78c8:	f04f 33ff 	mov.w	r3, #4294967295
}
    78cc:	4618      	mov	r0, r3
    78ce:	3710      	adds	r7, #16
    78d0:	46bd      	mov	sp, r7
    78d2:	bd80      	pop	{r7, pc}
    78d4:	00007981 	.word	0x00007981
    78d8:	20000110 	.word	0x20000110
    78dc:	0000d248 	.word	0x0000d248
    78e0:	00002de1 	.word	0x00002de1

000078e4 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    78e4:	b480      	push	{r7}
    78e6:	b083      	sub	sp, #12
    78e8:	af00      	add	r7, sp, #0
    78ea:	6078      	str	r0, [r7, #4]
    78ec:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    78ee:	687b      	ldr	r3, [r7, #4]
    78f0:	4a17      	ldr	r2, [pc, #92]	; (7950 <_tc_init_irq_param+0x6c>)
    78f2:	4293      	cmp	r3, r2
    78f4:	d102      	bne.n	78fc <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    78f6:	4a17      	ldr	r2, [pc, #92]	; (7954 <_tc_init_irq_param+0x70>)
    78f8:	683b      	ldr	r3, [r7, #0]
    78fa:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    78fc:	687b      	ldr	r3, [r7, #4]
    78fe:	4a16      	ldr	r2, [pc, #88]	; (7958 <_tc_init_irq_param+0x74>)
    7900:	4293      	cmp	r3, r2
    7902:	d102      	bne.n	790a <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    7904:	4a15      	ldr	r2, [pc, #84]	; (795c <_tc_init_irq_param+0x78>)
    7906:	683b      	ldr	r3, [r7, #0]
    7908:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    790a:	687b      	ldr	r3, [r7, #4]
    790c:	4a14      	ldr	r2, [pc, #80]	; (7960 <_tc_init_irq_param+0x7c>)
    790e:	4293      	cmp	r3, r2
    7910:	d102      	bne.n	7918 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    7912:	4a14      	ldr	r2, [pc, #80]	; (7964 <_tc_init_irq_param+0x80>)
    7914:	683b      	ldr	r3, [r7, #0]
    7916:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    7918:	687b      	ldr	r3, [r7, #4]
    791a:	4a13      	ldr	r2, [pc, #76]	; (7968 <_tc_init_irq_param+0x84>)
    791c:	4293      	cmp	r3, r2
    791e:	d102      	bne.n	7926 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    7920:	4a12      	ldr	r2, [pc, #72]	; (796c <_tc_init_irq_param+0x88>)
    7922:	683b      	ldr	r3, [r7, #0]
    7924:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    7926:	687b      	ldr	r3, [r7, #4]
    7928:	4a11      	ldr	r2, [pc, #68]	; (7970 <_tc_init_irq_param+0x8c>)
    792a:	4293      	cmp	r3, r2
    792c:	d102      	bne.n	7934 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    792e:	4a11      	ldr	r2, [pc, #68]	; (7974 <_tc_init_irq_param+0x90>)
    7930:	683b      	ldr	r3, [r7, #0]
    7932:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    7934:	687b      	ldr	r3, [r7, #4]
    7936:	4a10      	ldr	r2, [pc, #64]	; (7978 <_tc_init_irq_param+0x94>)
    7938:	4293      	cmp	r3, r2
    793a:	d102      	bne.n	7942 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    793c:	4a0f      	ldr	r2, [pc, #60]	; (797c <_tc_init_irq_param+0x98>)
    793e:	683b      	ldr	r3, [r7, #0]
    7940:	6013      	str	r3, [r2, #0]
	}
}
    7942:	bf00      	nop
    7944:	370c      	adds	r7, #12
    7946:	46bd      	mov	sp, r7
    7948:	f85d 7b04 	ldr.w	r7, [sp], #4
    794c:	4770      	bx	lr
    794e:	bf00      	nop
    7950:	40003800 	.word	0x40003800
    7954:	20000850 	.word	0x20000850
    7958:	4101a000 	.word	0x4101a000
    795c:	20000854 	.word	0x20000854
    7960:	42001400 	.word	0x42001400
    7964:	20000858 	.word	0x20000858
    7968:	42001800 	.word	0x42001800
    796c:	2000085c 	.word	0x2000085c
    7970:	43001400 	.word	0x43001400
    7974:	20000860 	.word	0x20000860
    7978:	43001800 	.word	0x43001800
    797c:	20000864 	.word	0x20000864

00007980 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    7980:	b4b0      	push	{r4, r5, r7}
    7982:	b08d      	sub	sp, #52	; 0x34
    7984:	af00      	add	r7, sp, #0
    7986:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7988:	4b13      	ldr	r3, [pc, #76]	; (79d8 <_get_hardware_offset+0x58>)
    798a:	f107 040c 	add.w	r4, r7, #12
    798e:	461d      	mov	r5, r3
    7990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7994:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    799c:	2300      	movs	r3, #0
    799e:	62fb      	str	r3, [r7, #44]	; 0x2c
    79a0:	e010      	b.n	79c4 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    79a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    79a4:	009b      	lsls	r3, r3, #2
    79a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    79aa:	4413      	add	r3, r2
    79ac:	f853 3c24 	ldr.w	r3, [r3, #-36]
    79b0:	461a      	mov	r2, r3
    79b2:	687b      	ldr	r3, [r7, #4]
    79b4:	429a      	cmp	r2, r3
    79b6:	d102      	bne.n	79be <_get_hardware_offset+0x3e>
			return i;
    79b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    79ba:	b2db      	uxtb	r3, r3
    79bc:	e006      	b.n	79cc <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    79be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    79c0:	3301      	adds	r3, #1
    79c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    79c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    79c6:	2b07      	cmp	r3, #7
    79c8:	d9eb      	bls.n	79a2 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    79ca:	2300      	movs	r3, #0
}
    79cc:	4618      	mov	r0, r3
    79ce:	3734      	adds	r7, #52	; 0x34
    79d0:	46bd      	mov	sp, r7
    79d2:	bcb0      	pop	{r4, r5, r7}
    79d4:	4770      	bx	lr
    79d6:	bf00      	nop
    79d8:	0000d25c 	.word	0x0000d25c

000079dc <__NVIC_EnableIRQ>:
{
    79dc:	b480      	push	{r7}
    79de:	b083      	sub	sp, #12
    79e0:	af00      	add	r7, sp, #0
    79e2:	4603      	mov	r3, r0
    79e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    79e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    79ea:	2b00      	cmp	r3, #0
    79ec:	db0b      	blt.n	7a06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    79ee:	4909      	ldr	r1, [pc, #36]	; (7a14 <__NVIC_EnableIRQ+0x38>)
    79f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    79f4:	095b      	lsrs	r3, r3, #5
    79f6:	88fa      	ldrh	r2, [r7, #6]
    79f8:	f002 021f 	and.w	r2, r2, #31
    79fc:	2001      	movs	r0, #1
    79fe:	fa00 f202 	lsl.w	r2, r0, r2
    7a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7a06:	bf00      	nop
    7a08:	370c      	adds	r7, #12
    7a0a:	46bd      	mov	sp, r7
    7a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a10:	4770      	bx	lr
    7a12:	bf00      	nop
    7a14:	e000e100 	.word	0xe000e100

00007a18 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    7a18:	b480      	push	{r7}
    7a1a:	b087      	sub	sp, #28
    7a1c:	af00      	add	r7, sp, #0
    7a1e:	60f8      	str	r0, [r7, #12]
    7a20:	460b      	mov	r3, r1
    7a22:	607a      	str	r2, [r7, #4]
    7a24:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    7a26:	7afa      	ldrb	r2, [r7, #11]
    7a28:	68f9      	ldr	r1, [r7, #12]
    7a2a:	4613      	mov	r3, r2
    7a2c:	009b      	lsls	r3, r3, #2
    7a2e:	4413      	add	r3, r2
    7a30:	009b      	lsls	r3, r3, #2
    7a32:	440b      	add	r3, r1
    7a34:	3340      	adds	r3, #64	; 0x40
    7a36:	681b      	ldr	r3, [r3, #0]
    7a38:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    7a3a:	697a      	ldr	r2, [r7, #20]
    7a3c:	687b      	ldr	r3, [r7, #4]
    7a3e:	4013      	ands	r3, r2
    7a40:	617b      	str	r3, [r7, #20]
	return tmp;
    7a42:	697b      	ldr	r3, [r7, #20]
}
    7a44:	4618      	mov	r0, r3
    7a46:	371c      	adds	r7, #28
    7a48:	46bd      	mov	sp, r7
    7a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a4e:	4770      	bx	lr

00007a50 <hri_oscctrl_get_STATUS_reg>:
{
    7a50:	b480      	push	{r7}
    7a52:	b085      	sub	sp, #20
    7a54:	af00      	add	r7, sp, #0
    7a56:	6078      	str	r0, [r7, #4]
    7a58:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7a5a:	687b      	ldr	r3, [r7, #4]
    7a5c:	691b      	ldr	r3, [r3, #16]
    7a5e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7a60:	68fa      	ldr	r2, [r7, #12]
    7a62:	683b      	ldr	r3, [r7, #0]
    7a64:	4013      	ands	r3, r2
    7a66:	60fb      	str	r3, [r7, #12]
	return tmp;
    7a68:	68fb      	ldr	r3, [r7, #12]
}
    7a6a:	4618      	mov	r0, r3
    7a6c:	3714      	adds	r7, #20
    7a6e:	46bd      	mov	sp, r7
    7a70:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a74:	4770      	bx	lr

00007a76 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    7a76:	b480      	push	{r7}
    7a78:	b085      	sub	sp, #20
    7a7a:	af00      	add	r7, sp, #0
    7a7c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7a7e:	687b      	ldr	r3, [r7, #4]
    7a80:	f893 3020 	ldrb.w	r3, [r3, #32]
    7a84:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    7a86:	7bfb      	ldrb	r3, [r7, #15]
    7a88:	f003 0301 	and.w	r3, r3, #1
    7a8c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7a8e:	7bfb      	ldrb	r3, [r7, #15]
    7a90:	2b00      	cmp	r3, #0
    7a92:	bf14      	ite	ne
    7a94:	2301      	movne	r3, #1
    7a96:	2300      	moveq	r3, #0
    7a98:	b2db      	uxtb	r3, r3
}
    7a9a:	4618      	mov	r0, r3
    7a9c:	3714      	adds	r7, #20
    7a9e:	46bd      	mov	sp, r7
    7aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aa4:	4770      	bx	lr

00007aa6 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7aa6:	b480      	push	{r7}
    7aa8:	b083      	sub	sp, #12
    7aaa:	af00      	add	r7, sp, #0
    7aac:	6078      	str	r0, [r7, #4]
    7aae:	460b      	mov	r3, r1
    7ab0:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    7ab2:	bf00      	nop
    7ab4:	687b      	ldr	r3, [r7, #4]
    7ab6:	789b      	ldrb	r3, [r3, #2]
    7ab8:	b2da      	uxtb	r2, r3
    7aba:	78fb      	ldrb	r3, [r7, #3]
    7abc:	4013      	ands	r3, r2
    7abe:	b2db      	uxtb	r3, r3
    7ac0:	2b00      	cmp	r3, #0
    7ac2:	d1f7      	bne.n	7ab4 <hri_usb_wait_for_sync+0xe>
	};
}
    7ac4:	bf00      	nop
    7ac6:	370c      	adds	r7, #12
    7ac8:	46bd      	mov	sp, r7
    7aca:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ace:	4770      	bx	lr

00007ad0 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7ad0:	b480      	push	{r7}
    7ad2:	b083      	sub	sp, #12
    7ad4:	af00      	add	r7, sp, #0
    7ad6:	6078      	str	r0, [r7, #4]
    7ad8:	460b      	mov	r3, r1
    7ada:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    7adc:	687b      	ldr	r3, [r7, #4]
    7ade:	789b      	ldrb	r3, [r3, #2]
    7ae0:	b2da      	uxtb	r2, r3
    7ae2:	78fb      	ldrb	r3, [r7, #3]
    7ae4:	4013      	ands	r3, r2
    7ae6:	b2db      	uxtb	r3, r3
    7ae8:	2b00      	cmp	r3, #0
    7aea:	bf14      	ite	ne
    7aec:	2301      	movne	r3, #1
    7aee:	2300      	moveq	r3, #0
    7af0:	b2db      	uxtb	r3, r3
}
    7af2:	4618      	mov	r0, r3
    7af4:	370c      	adds	r7, #12
    7af6:	46bd      	mov	sp, r7
    7af8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7afc:	4770      	bx	lr

00007afe <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    7afe:	b480      	push	{r7}
    7b00:	b085      	sub	sp, #20
    7b02:	af00      	add	r7, sp, #0
    7b04:	6078      	str	r0, [r7, #4]
    7b06:	460b      	mov	r3, r1
    7b08:	70fb      	strb	r3, [r7, #3]
    7b0a:	4613      	mov	r3, r2
    7b0c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7b0e:	78fb      	ldrb	r3, [r7, #3]
    7b10:	687a      	ldr	r2, [r7, #4]
    7b12:	3308      	adds	r3, #8
    7b14:	015b      	lsls	r3, r3, #5
    7b16:	4413      	add	r3, r2
    7b18:	3307      	adds	r3, #7
    7b1a:	781b      	ldrb	r3, [r3, #0]
    7b1c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7b1e:	7bfa      	ldrb	r2, [r7, #15]
    7b20:	78bb      	ldrb	r3, [r7, #2]
    7b22:	4013      	ands	r3, r2
    7b24:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7b26:	7bfb      	ldrb	r3, [r7, #15]
}
    7b28:	4618      	mov	r0, r3
    7b2a:	3714      	adds	r7, #20
    7b2c:	46bd      	mov	sp, r7
    7b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b32:	4770      	bx	lr

00007b34 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    7b34:	b480      	push	{r7}
    7b36:	b083      	sub	sp, #12
    7b38:	af00      	add	r7, sp, #0
    7b3a:	6078      	str	r0, [r7, #4]
    7b3c:	460b      	mov	r3, r1
    7b3e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7b40:	78fb      	ldrb	r3, [r7, #3]
    7b42:	687a      	ldr	r2, [r7, #4]
    7b44:	3308      	adds	r3, #8
    7b46:	015b      	lsls	r3, r3, #5
    7b48:	4413      	add	r3, r2
    7b4a:	3307      	adds	r3, #7
    7b4c:	781b      	ldrb	r3, [r3, #0]
    7b4e:	b2db      	uxtb	r3, r3
}
    7b50:	4618      	mov	r0, r3
    7b52:	370c      	adds	r7, #12
    7b54:	46bd      	mov	sp, r7
    7b56:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b5a:	4770      	bx	lr

00007b5c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    7b5c:	b480      	push	{r7}
    7b5e:	b083      	sub	sp, #12
    7b60:	af00      	add	r7, sp, #0
    7b62:	6078      	str	r0, [r7, #4]
    7b64:	460b      	mov	r3, r1
    7b66:	70fb      	strb	r3, [r7, #3]
    7b68:	4613      	mov	r3, r2
    7b6a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7b6c:	78fb      	ldrb	r3, [r7, #3]
    7b6e:	687a      	ldr	r2, [r7, #4]
    7b70:	3308      	adds	r3, #8
    7b72:	015b      	lsls	r3, r3, #5
    7b74:	4413      	add	r3, r2
    7b76:	3307      	adds	r3, #7
    7b78:	78ba      	ldrb	r2, [r7, #2]
    7b7a:	701a      	strb	r2, [r3, #0]
}
    7b7c:	bf00      	nop
    7b7e:	370c      	adds	r7, #12
    7b80:	46bd      	mov	sp, r7
    7b82:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b86:	4770      	bx	lr

00007b88 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    7b88:	b480      	push	{r7}
    7b8a:	b083      	sub	sp, #12
    7b8c:	af00      	add	r7, sp, #0
    7b8e:	6078      	str	r0, [r7, #4]
    7b90:	460b      	mov	r3, r1
    7b92:	70fb      	strb	r3, [r7, #3]
    7b94:	4613      	mov	r3, r2
    7b96:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7b98:	78fb      	ldrb	r3, [r7, #3]
    7b9a:	687a      	ldr	r2, [r7, #4]
    7b9c:	3308      	adds	r3, #8
    7b9e:	015b      	lsls	r3, r3, #5
    7ba0:	4413      	add	r3, r2
    7ba2:	3305      	adds	r3, #5
    7ba4:	78ba      	ldrb	r2, [r7, #2]
    7ba6:	701a      	strb	r2, [r3, #0]
}
    7ba8:	bf00      	nop
    7baa:	370c      	adds	r7, #12
    7bac:	46bd      	mov	sp, r7
    7bae:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bb2:	4770      	bx	lr

00007bb4 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    7bb4:	b480      	push	{r7}
    7bb6:	b083      	sub	sp, #12
    7bb8:	af00      	add	r7, sp, #0
    7bba:	6078      	str	r0, [r7, #4]
    7bbc:	460b      	mov	r3, r1
    7bbe:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    7bc0:	78fb      	ldrb	r3, [r7, #3]
    7bc2:	687a      	ldr	r2, [r7, #4]
    7bc4:	3308      	adds	r3, #8
    7bc6:	015b      	lsls	r3, r3, #5
    7bc8:	4413      	add	r3, r2
    7bca:	3306      	adds	r3, #6
    7bcc:	781b      	ldrb	r3, [r3, #0]
    7bce:	b2db      	uxtb	r3, r3
}
    7bd0:	4618      	mov	r0, r3
    7bd2:	370c      	adds	r7, #12
    7bd4:	46bd      	mov	sp, r7
    7bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bda:	4770      	bx	lr

00007bdc <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    7bdc:	b480      	push	{r7}
    7bde:	b083      	sub	sp, #12
    7be0:	af00      	add	r7, sp, #0
    7be2:	6078      	str	r0, [r7, #4]
    7be4:	460b      	mov	r3, r1
    7be6:	70fb      	strb	r3, [r7, #3]
    7be8:	4613      	mov	r3, r2
    7bea:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7bec:	78fb      	ldrb	r3, [r7, #3]
    7bee:	687a      	ldr	r2, [r7, #4]
    7bf0:	3308      	adds	r3, #8
    7bf2:	015b      	lsls	r3, r3, #5
    7bf4:	4413      	add	r3, r2
    7bf6:	3304      	adds	r3, #4
    7bf8:	78ba      	ldrb	r2, [r7, #2]
    7bfa:	701a      	strb	r2, [r3, #0]
}
    7bfc:	bf00      	nop
    7bfe:	370c      	adds	r7, #12
    7c00:	46bd      	mov	sp, r7
    7c02:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c06:	4770      	bx	lr

00007c08 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    7c08:	b480      	push	{r7}
    7c0a:	b083      	sub	sp, #12
    7c0c:	af00      	add	r7, sp, #0
    7c0e:	6078      	str	r0, [r7, #4]
    7c10:	460b      	mov	r3, r1
    7c12:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    7c14:	78fb      	ldrb	r3, [r7, #3]
    7c16:	687a      	ldr	r2, [r7, #4]
    7c18:	015b      	lsls	r3, r3, #5
    7c1a:	4413      	add	r3, r2
    7c1c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7c20:	2210      	movs	r2, #16
    7c22:	701a      	strb	r2, [r3, #0]
}
    7c24:	bf00      	nop
    7c26:	370c      	adds	r7, #12
    7c28:	46bd      	mov	sp, r7
    7c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c2e:	4770      	bx	lr

00007c30 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    7c30:	b480      	push	{r7}
    7c32:	b083      	sub	sp, #12
    7c34:	af00      	add	r7, sp, #0
    7c36:	6078      	str	r0, [r7, #4]
    7c38:	460b      	mov	r3, r1
    7c3a:	70fb      	strb	r3, [r7, #3]
    7c3c:	4613      	mov	r3, r2
    7c3e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7c40:	78fb      	ldrb	r3, [r7, #3]
    7c42:	687a      	ldr	r2, [r7, #4]
    7c44:	015b      	lsls	r3, r3, #5
    7c46:	4413      	add	r3, r2
    7c48:	f203 1309 	addw	r3, r3, #265	; 0x109
    7c4c:	78ba      	ldrb	r2, [r7, #2]
    7c4e:	701a      	strb	r2, [r3, #0]
}
    7c50:	bf00      	nop
    7c52:	370c      	adds	r7, #12
    7c54:	46bd      	mov	sp, r7
    7c56:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c5a:	4770      	bx	lr

00007c5c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    7c5c:	b480      	push	{r7}
    7c5e:	b083      	sub	sp, #12
    7c60:	af00      	add	r7, sp, #0
    7c62:	6078      	str	r0, [r7, #4]
    7c64:	460b      	mov	r3, r1
    7c66:	70fb      	strb	r3, [r7, #3]
    7c68:	4613      	mov	r3, r2
    7c6a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7c6c:	78fb      	ldrb	r3, [r7, #3]
    7c6e:	687a      	ldr	r2, [r7, #4]
    7c70:	015b      	lsls	r3, r3, #5
    7c72:	4413      	add	r3, r2
    7c74:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7c78:	78ba      	ldrb	r2, [r7, #2]
    7c7a:	701a      	strb	r2, [r3, #0]
}
    7c7c:	bf00      	nop
    7c7e:	370c      	adds	r7, #12
    7c80:	46bd      	mov	sp, r7
    7c82:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c86:	4770      	bx	lr

00007c88 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7c88:	b480      	push	{r7}
    7c8a:	b085      	sub	sp, #20
    7c8c:	af00      	add	r7, sp, #0
    7c8e:	6078      	str	r0, [r7, #4]
    7c90:	460b      	mov	r3, r1
    7c92:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7c94:	78fb      	ldrb	r3, [r7, #3]
    7c96:	687a      	ldr	r2, [r7, #4]
    7c98:	3308      	adds	r3, #8
    7c9a:	015b      	lsls	r3, r3, #5
    7c9c:	4413      	add	r3, r2
    7c9e:	781b      	ldrb	r3, [r3, #0]
    7ca0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    7ca2:	7bfb      	ldrb	r3, [r7, #15]
    7ca4:	f003 0307 	and.w	r3, r3, #7
    7ca8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7caa:	7bfb      	ldrb	r3, [r7, #15]
}
    7cac:	4618      	mov	r0, r3
    7cae:	3714      	adds	r7, #20
    7cb0:	46bd      	mov	sp, r7
    7cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cb6:	4770      	bx	lr

00007cb8 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7cb8:	b480      	push	{r7}
    7cba:	b085      	sub	sp, #20
    7cbc:	af00      	add	r7, sp, #0
    7cbe:	6078      	str	r0, [r7, #4]
    7cc0:	460b      	mov	r3, r1
    7cc2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7cc4:	78fb      	ldrb	r3, [r7, #3]
    7cc6:	687a      	ldr	r2, [r7, #4]
    7cc8:	3308      	adds	r3, #8
    7cca:	015b      	lsls	r3, r3, #5
    7ccc:	4413      	add	r3, r2
    7cce:	781b      	ldrb	r3, [r3, #0]
    7cd0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    7cd2:	7bfb      	ldrb	r3, [r7, #15]
    7cd4:	091b      	lsrs	r3, r3, #4
    7cd6:	b2db      	uxtb	r3, r3
    7cd8:	f003 0307 	and.w	r3, r3, #7
    7cdc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7cde:	7bfb      	ldrb	r3, [r7, #15]
}
    7ce0:	4618      	mov	r0, r3
    7ce2:	3714      	adds	r7, #20
    7ce4:	46bd      	mov	sp, r7
    7ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cea:	4770      	bx	lr

00007cec <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    7cec:	b480      	push	{r7}
    7cee:	b083      	sub	sp, #12
    7cf0:	af00      	add	r7, sp, #0
    7cf2:	6078      	str	r0, [r7, #4]
    7cf4:	460b      	mov	r3, r1
    7cf6:	70fb      	strb	r3, [r7, #3]
    7cf8:	4613      	mov	r3, r2
    7cfa:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    7cfc:	78fb      	ldrb	r3, [r7, #3]
    7cfe:	687a      	ldr	r2, [r7, #4]
    7d00:	3308      	adds	r3, #8
    7d02:	015b      	lsls	r3, r3, #5
    7d04:	4413      	add	r3, r2
    7d06:	78ba      	ldrb	r2, [r7, #2]
    7d08:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    7d0a:	bf00      	nop
    7d0c:	370c      	adds	r7, #12
    7d0e:	46bd      	mov	sp, r7
    7d10:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d14:	4770      	bx	lr

00007d16 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    7d16:	b480      	push	{r7}
    7d18:	b083      	sub	sp, #12
    7d1a:	af00      	add	r7, sp, #0
    7d1c:	6078      	str	r0, [r7, #4]
    7d1e:	460b      	mov	r3, r1
    7d20:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7d22:	78fb      	ldrb	r3, [r7, #3]
    7d24:	687a      	ldr	r2, [r7, #4]
    7d26:	3308      	adds	r3, #8
    7d28:	015b      	lsls	r3, r3, #5
    7d2a:	4413      	add	r3, r2
    7d2c:	781b      	ldrb	r3, [r3, #0]
    7d2e:	b2db      	uxtb	r3, r3
}
    7d30:	4618      	mov	r0, r3
    7d32:	370c      	adds	r7, #12
    7d34:	46bd      	mov	sp, r7
    7d36:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d3a:	4770      	bx	lr

00007d3c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    7d3c:	b480      	push	{r7}
    7d3e:	b083      	sub	sp, #12
    7d40:	af00      	add	r7, sp, #0
    7d42:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    7d44:	687b      	ldr	r3, [r7, #4]
    7d46:	8b9b      	ldrh	r3, [r3, #28]
    7d48:	b29b      	uxth	r3, r3
}
    7d4a:	4618      	mov	r0, r3
    7d4c:	370c      	adds	r7, #12
    7d4e:	46bd      	mov	sp, r7
    7d50:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d54:	4770      	bx	lr

00007d56 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    7d56:	b480      	push	{r7}
    7d58:	b083      	sub	sp, #12
    7d5a:	af00      	add	r7, sp, #0
    7d5c:	6078      	str	r0, [r7, #4]
    7d5e:	460b      	mov	r3, r1
    7d60:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7d62:	687b      	ldr	r3, [r7, #4]
    7d64:	887a      	ldrh	r2, [r7, #2]
    7d66:	839a      	strh	r2, [r3, #28]
}
    7d68:	bf00      	nop
    7d6a:	370c      	adds	r7, #12
    7d6c:	46bd      	mov	sp, r7
    7d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d72:	4770      	bx	lr

00007d74 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7d74:	b480      	push	{r7}
    7d76:	b083      	sub	sp, #12
    7d78:	af00      	add	r7, sp, #0
    7d7a:	6078      	str	r0, [r7, #4]
    7d7c:	460b      	mov	r3, r1
    7d7e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7d80:	687b      	ldr	r3, [r7, #4]
    7d82:	887a      	ldrh	r2, [r7, #2]
    7d84:	831a      	strh	r2, [r3, #24]
}
    7d86:	bf00      	nop
    7d88:	370c      	adds	r7, #12
    7d8a:	46bd      	mov	sp, r7
    7d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d90:	4770      	bx	lr

00007d92 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    7d92:	b480      	push	{r7}
    7d94:	b083      	sub	sp, #12
    7d96:	af00      	add	r7, sp, #0
    7d98:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    7d9a:	687b      	ldr	r3, [r7, #4]
    7d9c:	8b1b      	ldrh	r3, [r3, #24]
    7d9e:	b29b      	uxth	r3, r3
}
    7da0:	4618      	mov	r0, r3
    7da2:	370c      	adds	r7, #12
    7da4:	46bd      	mov	sp, r7
    7da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7daa:	4770      	bx	lr

00007dac <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7dac:	b480      	push	{r7}
    7dae:	b083      	sub	sp, #12
    7db0:	af00      	add	r7, sp, #0
    7db2:	6078      	str	r0, [r7, #4]
    7db4:	460b      	mov	r3, r1
    7db6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7db8:	687b      	ldr	r3, [r7, #4]
    7dba:	887a      	ldrh	r2, [r7, #2]
    7dbc:	829a      	strh	r2, [r3, #20]
}
    7dbe:	bf00      	nop
    7dc0:	370c      	adds	r7, #12
    7dc2:	46bd      	mov	sp, r7
    7dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dc8:	4770      	bx	lr

00007dca <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    7dca:	b480      	push	{r7}
    7dcc:	b085      	sub	sp, #20
    7dce:	af00      	add	r7, sp, #0
    7dd0:	6078      	str	r0, [r7, #4]
    7dd2:	460b      	mov	r3, r1
    7dd4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    7dd6:	687b      	ldr	r3, [r7, #4]
    7dd8:	789b      	ldrb	r3, [r3, #2]
    7dda:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7ddc:	7bfa      	ldrb	r2, [r7, #15]
    7dde:	78fb      	ldrb	r3, [r7, #3]
    7de0:	4013      	ands	r3, r2
    7de2:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7de4:	7bfb      	ldrb	r3, [r7, #15]
}
    7de6:	4618      	mov	r0, r3
    7de8:	3714      	adds	r7, #20
    7dea:	46bd      	mov	sp, r7
    7dec:	f85d 7b04 	ldr.w	r7, [sp], #4
    7df0:	4770      	bx	lr
	...

00007df4 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7df4:	b580      	push	{r7, lr}
    7df6:	b082      	sub	sp, #8
    7df8:	af00      	add	r7, sp, #0
    7dfa:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    7dfc:	687b      	ldr	r3, [r7, #4]
    7dfe:	781b      	ldrb	r3, [r3, #0]
    7e00:	b2db      	uxtb	r3, r3
    7e02:	f023 0302 	bic.w	r3, r3, #2
    7e06:	b2da      	uxtb	r2, r3
    7e08:	687b      	ldr	r3, [r7, #4]
    7e0a:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    7e0c:	2103      	movs	r1, #3
    7e0e:	6878      	ldr	r0, [r7, #4]
    7e10:	4b02      	ldr	r3, [pc, #8]	; (7e1c <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    7e12:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    7e14:	bf00      	nop
    7e16:	3708      	adds	r7, #8
    7e18:	46bd      	mov	sp, r7
    7e1a:	bd80      	pop	{r7, pc}
    7e1c:	00007aa7 	.word	0x00007aa7

00007e20 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    7e20:	b580      	push	{r7, lr}
    7e22:	b084      	sub	sp, #16
    7e24:	af00      	add	r7, sp, #0
    7e26:	6078      	str	r0, [r7, #4]
    7e28:	460b      	mov	r3, r1
    7e2a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    7e2c:	2103      	movs	r1, #3
    7e2e:	6878      	ldr	r0, [r7, #4]
    7e30:	4b06      	ldr	r3, [pc, #24]	; (7e4c <hri_usb_get_CTRLA_reg+0x2c>)
    7e32:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    7e34:	687b      	ldr	r3, [r7, #4]
    7e36:	781b      	ldrb	r3, [r3, #0]
    7e38:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7e3a:	7bfa      	ldrb	r2, [r7, #15]
    7e3c:	78fb      	ldrb	r3, [r7, #3]
    7e3e:	4013      	ands	r3, r2
    7e40:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7e42:	7bfb      	ldrb	r3, [r7, #15]
}
    7e44:	4618      	mov	r0, r3
    7e46:	3710      	adds	r7, #16
    7e48:	46bd      	mov	sp, r7
    7e4a:	bd80      	pop	{r7, pc}
    7e4c:	00007aa7 	.word	0x00007aa7

00007e50 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    7e50:	b580      	push	{r7, lr}
    7e52:	b082      	sub	sp, #8
    7e54:	af00      	add	r7, sp, #0
    7e56:	6078      	str	r0, [r7, #4]
    7e58:	460b      	mov	r3, r1
    7e5a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    7e5c:	687b      	ldr	r3, [r7, #4]
    7e5e:	78fa      	ldrb	r2, [r7, #3]
    7e60:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    7e62:	2103      	movs	r1, #3
    7e64:	6878      	ldr	r0, [r7, #4]
    7e66:	4b03      	ldr	r3, [pc, #12]	; (7e74 <hri_usb_write_CTRLA_reg+0x24>)
    7e68:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    7e6a:	bf00      	nop
    7e6c:	3708      	adds	r7, #8
    7e6e:	46bd      	mov	sp, r7
    7e70:	bd80      	pop	{r7, pc}
    7e72:	bf00      	nop
    7e74:	00007aa7 	.word	0x00007aa7

00007e78 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    7e78:	b580      	push	{r7, lr}
    7e7a:	b082      	sub	sp, #8
    7e7c:	af00      	add	r7, sp, #0
    7e7e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    7e80:	2103      	movs	r1, #3
    7e82:	6878      	ldr	r0, [r7, #4]
    7e84:	4b04      	ldr	r3, [pc, #16]	; (7e98 <hri_usb_read_CTRLA_reg+0x20>)
    7e86:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    7e88:	687b      	ldr	r3, [r7, #4]
    7e8a:	781b      	ldrb	r3, [r3, #0]
    7e8c:	b2db      	uxtb	r3, r3
}
    7e8e:	4618      	mov	r0, r3
    7e90:	3708      	adds	r7, #8
    7e92:	46bd      	mov	sp, r7
    7e94:	bd80      	pop	{r7, pc}
    7e96:	bf00      	nop
    7e98:	00007aa7 	.word	0x00007aa7

00007e9c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    7e9c:	b480      	push	{r7}
    7e9e:	b083      	sub	sp, #12
    7ea0:	af00      	add	r7, sp, #0
    7ea2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    7ea4:	687b      	ldr	r3, [r7, #4]
    7ea6:	891b      	ldrh	r3, [r3, #8]
    7ea8:	b29b      	uxth	r3, r3
    7eaa:	f023 0301 	bic.w	r3, r3, #1
    7eae:	b29a      	uxth	r2, r3
    7eb0:	687b      	ldr	r3, [r7, #4]
    7eb2:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    7eb4:	bf00      	nop
    7eb6:	370c      	adds	r7, #12
    7eb8:	46bd      	mov	sp, r7
    7eba:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ebe:	4770      	bx	lr

00007ec0 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    7ec0:	b480      	push	{r7}
    7ec2:	b083      	sub	sp, #12
    7ec4:	af00      	add	r7, sp, #0
    7ec6:	6078      	str	r0, [r7, #4]
    7ec8:	460b      	mov	r3, r1
    7eca:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    7ecc:	687b      	ldr	r3, [r7, #4]
    7ece:	887a      	ldrh	r2, [r7, #2]
    7ed0:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    7ed2:	bf00      	nop
    7ed4:	370c      	adds	r7, #12
    7ed6:	46bd      	mov	sp, r7
    7ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7edc:	4770      	bx	lr

00007ede <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    7ede:	b480      	push	{r7}
    7ee0:	b083      	sub	sp, #12
    7ee2:	af00      	add	r7, sp, #0
    7ee4:	6078      	str	r0, [r7, #4]
    7ee6:	460b      	mov	r3, r1
    7ee8:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    7eea:	687b      	ldr	r3, [r7, #4]
    7eec:	78fa      	ldrb	r2, [r7, #3]
    7eee:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    7ef0:	bf00      	nop
    7ef2:	370c      	adds	r7, #12
    7ef4:	46bd      	mov	sp, r7
    7ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7efa:	4770      	bx	lr

00007efc <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    7efc:	b480      	push	{r7}
    7efe:	b083      	sub	sp, #12
    7f00:	af00      	add	r7, sp, #0
    7f02:	6078      	str	r0, [r7, #4]
    7f04:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    7f06:	687b      	ldr	r3, [r7, #4]
    7f08:	683a      	ldr	r2, [r7, #0]
    7f0a:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    7f0c:	bf00      	nop
    7f0e:	370c      	adds	r7, #12
    7f10:	46bd      	mov	sp, r7
    7f12:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f16:	4770      	bx	lr

00007f18 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    7f18:	b480      	push	{r7}
    7f1a:	b083      	sub	sp, #12
    7f1c:	af00      	add	r7, sp, #0
    7f1e:	6078      	str	r0, [r7, #4]
    7f20:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    7f22:	2300      	movs	r3, #0
}
    7f24:	4618      	mov	r0, r3
    7f26:	370c      	adds	r7, #12
    7f28:	46bd      	mov	sp, r7
    7f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f2e:	4770      	bx	lr

00007f30 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    7f30:	b480      	push	{r7}
    7f32:	b085      	sub	sp, #20
    7f34:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    7f36:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7f3a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    7f3c:	4b28      	ldr	r3, [pc, #160]	; (7fe0 <_usb_load_calib+0xb0>)
    7f3e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    7f40:	f003 031f 	and.w	r3, r3, #31
    7f44:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    7f46:	4b26      	ldr	r3, [pc, #152]	; (7fe0 <_usb_load_calib+0xb0>)
    7f48:	681b      	ldr	r3, [r3, #0]
    7f4a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    7f4c:	f003 031f 	and.w	r3, r3, #31
    7f50:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    7f52:	4b23      	ldr	r3, [pc, #140]	; (7fe0 <_usb_load_calib+0xb0>)
    7f54:	681b      	ldr	r3, [r3, #0]
    7f56:	0a9b      	lsrs	r3, r3, #10
    7f58:	f003 0307 	and.w	r3, r3, #7
    7f5c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    7f5e:	68fb      	ldr	r3, [r7, #12]
    7f60:	2b00      	cmp	r3, #0
    7f62:	d002      	beq.n	7f6a <_usb_load_calib+0x3a>
    7f64:	68fb      	ldr	r3, [r7, #12]
    7f66:	2b1f      	cmp	r3, #31
    7f68:	d101      	bne.n	7f6e <_usb_load_calib+0x3e>
		pad_transn = 9;
    7f6a:	2309      	movs	r3, #9
    7f6c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    7f6e:	68bb      	ldr	r3, [r7, #8]
    7f70:	2b00      	cmp	r3, #0
    7f72:	d002      	beq.n	7f7a <_usb_load_calib+0x4a>
    7f74:	68bb      	ldr	r3, [r7, #8]
    7f76:	2b1f      	cmp	r3, #31
    7f78:	d101      	bne.n	7f7e <_usb_load_calib+0x4e>
		pad_transp = 25;
    7f7a:	2319      	movs	r3, #25
    7f7c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    7f7e:	687b      	ldr	r3, [r7, #4]
    7f80:	2b00      	cmp	r3, #0
    7f82:	d002      	beq.n	7f8a <_usb_load_calib+0x5a>
    7f84:	687b      	ldr	r3, [r7, #4]
    7f86:	2b07      	cmp	r3, #7
    7f88:	d101      	bne.n	7f8e <_usb_load_calib+0x5e>
		pad_trim = 6;
    7f8a:	2306      	movs	r3, #6
    7f8c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    7f8e:	68fb      	ldr	r3, [r7, #12]
    7f90:	b29b      	uxth	r3, r3
    7f92:	019b      	lsls	r3, r3, #6
    7f94:	b29b      	uxth	r3, r3
    7f96:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    7f9a:	b29a      	uxth	r2, r3
    7f9c:	68bb      	ldr	r3, [r7, #8]
    7f9e:	b29b      	uxth	r3, r3
    7fa0:	f003 031f 	and.w	r3, r3, #31
    7fa4:	b29b      	uxth	r3, r3
    7fa6:	4313      	orrs	r3, r2
    7fa8:	b29a      	uxth	r2, r3
    7faa:	687b      	ldr	r3, [r7, #4]
    7fac:	b29b      	uxth	r3, r3
    7fae:	031b      	lsls	r3, r3, #12
    7fb0:	b29b      	uxth	r3, r3
    7fb2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    7fb6:	b29b      	uxth	r3, r3
    7fb8:	4313      	orrs	r3, r2
    7fba:	b29a      	uxth	r2, r3
    7fbc:	683b      	ldr	r3, [r7, #0]
    7fbe:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    7fc0:	683a      	ldr	r2, [r7, #0]
    7fc2:	78d3      	ldrb	r3, [r2, #3]
    7fc4:	f043 0303 	orr.w	r3, r3, #3
    7fc8:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    7fca:	683a      	ldr	r2, [r7, #0]
    7fcc:	78d3      	ldrb	r3, [r2, #3]
    7fce:	f043 030c 	orr.w	r3, r3, #12
    7fd2:	70d3      	strb	r3, [r2, #3]
}
    7fd4:	bf00      	nop
    7fd6:	3714      	adds	r7, #20
    7fd8:	46bd      	mov	sp, r7
    7fda:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fde:	4770      	bx	lr
    7fe0:	00800084 	.word	0x00800084

00007fe4 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    7fe4:	b580      	push	{r7, lr}
    7fe6:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    7fe8:	bf00      	nop
    7fea:	2203      	movs	r2, #3
    7fec:	2100      	movs	r1, #0
    7fee:	4804      	ldr	r0, [pc, #16]	; (8000 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    7ff0:	4b04      	ldr	r3, [pc, #16]	; (8004 <_usb_d_dev_wait_dpll_rdy+0x20>)
    7ff2:	4798      	blx	r3
    7ff4:	4603      	mov	r3, r0
    7ff6:	2b03      	cmp	r3, #3
    7ff8:	d1f7      	bne.n	7fea <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    7ffa:	bf00      	nop
    7ffc:	bd80      	pop	{r7, pc}
    7ffe:	bf00      	nop
    8000:	40001000 	.word	0x40001000
    8004:	00007a19 	.word	0x00007a19

00008008 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8008:	b580      	push	{r7, lr}
    800a:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    800c:	480e      	ldr	r0, [pc, #56]	; (8048 <_usb_d_dev_wait_dfll_rdy+0x40>)
    800e:	4b0f      	ldr	r3, [pc, #60]	; (804c <_usb_d_dev_wait_dfll_rdy+0x44>)
    8010:	4798      	blx	r3
    8012:	4603      	mov	r3, r0
    8014:	2b00      	cmp	r3, #0
    8016:	d00a      	beq.n	802e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8018:	bf00      	nop
    801a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    801e:	480a      	ldr	r0, [pc, #40]	; (8048 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8020:	4b0b      	ldr	r3, [pc, #44]	; (8050 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8022:	4798      	blx	r3
    8024:	4603      	mov	r3, r0
    8026:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    802a:	d1f6      	bne.n	801a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    802c:	e009      	b.n	8042 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    802e:	bf00      	nop
    8030:	f44f 7180 	mov.w	r1, #256	; 0x100
    8034:	4804      	ldr	r0, [pc, #16]	; (8048 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8036:	4b06      	ldr	r3, [pc, #24]	; (8050 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8038:	4798      	blx	r3
    803a:	4603      	mov	r3, r0
    803c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8040:	d1f6      	bne.n	8030 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8042:	bf00      	nop
    8044:	bd80      	pop	{r7, pc}
    8046:	bf00      	nop
    8048:	40001000 	.word	0x40001000
    804c:	00007a77 	.word	0x00007a77
    8050:	00007a51 	.word	0x00007a51

00008054 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8054:	b580      	push	{r7, lr}
    8056:	b082      	sub	sp, #8
    8058:	af00      	add	r7, sp, #0
    805a:	4603      	mov	r3, r0
    805c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    805e:	79fb      	ldrb	r3, [r7, #7]
    8060:	2b00      	cmp	r3, #0
    8062:	d102      	bne.n	806a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8064:	4b05      	ldr	r3, [pc, #20]	; (807c <_usb_d_dev_wait_clk_rdy+0x28>)
    8066:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8068:	e004      	b.n	8074 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    806a:	79fb      	ldrb	r3, [r7, #7]
    806c:	2b01      	cmp	r3, #1
    806e:	d101      	bne.n	8074 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8070:	4b03      	ldr	r3, [pc, #12]	; (8080 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8072:	4798      	blx	r3
}
    8074:	bf00      	nop
    8076:	3708      	adds	r7, #8
    8078:	46bd      	mov	sp, r7
    807a:	bd80      	pop	{r7, pc}
    807c:	00008009 	.word	0x00008009
    8080:	00007fe5 	.word	0x00007fe5

00008084 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8084:	b580      	push	{r7, lr}
    8086:	b082      	sub	sp, #8
    8088:	af00      	add	r7, sp, #0
    808a:	4603      	mov	r3, r0
    808c:	6039      	str	r1, [r7, #0]
    808e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8090:	683b      	ldr	r3, [r7, #0]
    8092:	b2da      	uxtb	r2, r3
    8094:	79fb      	ldrb	r3, [r7, #7]
    8096:	4619      	mov	r1, r3
    8098:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    809c:	4b02      	ldr	r3, [pc, #8]	; (80a8 <_usbd_ep_int_ack+0x24>)
    809e:	4798      	blx	r3
}
    80a0:	bf00      	nop
    80a2:	3708      	adds	r7, #8
    80a4:	46bd      	mov	sp, r7
    80a6:	bd80      	pop	{r7, pc}
    80a8:	00007b5d 	.word	0x00007b5d

000080ac <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    80ac:	b580      	push	{r7, lr}
    80ae:	b082      	sub	sp, #8
    80b0:	af00      	add	r7, sp, #0
    80b2:	4603      	mov	r3, r0
    80b4:	6039      	str	r1, [r7, #0]
    80b6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    80b8:	683b      	ldr	r3, [r7, #0]
    80ba:	b2da      	uxtb	r2, r3
    80bc:	79fb      	ldrb	r3, [r7, #7]
    80be:	4619      	mov	r1, r3
    80c0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    80c4:	4b02      	ldr	r3, [pc, #8]	; (80d0 <_usbd_ep_int_en+0x24>)
    80c6:	4798      	blx	r3
}
    80c8:	bf00      	nop
    80ca:	3708      	adds	r7, #8
    80cc:	46bd      	mov	sp, r7
    80ce:	bd80      	pop	{r7, pc}
    80d0:	00007c31 	.word	0x00007c31

000080d4 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    80d4:	b580      	push	{r7, lr}
    80d6:	b082      	sub	sp, #8
    80d8:	af00      	add	r7, sp, #0
    80da:	4603      	mov	r3, r0
    80dc:	6039      	str	r1, [r7, #0]
    80de:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    80e0:	683b      	ldr	r3, [r7, #0]
    80e2:	b2da      	uxtb	r2, r3
    80e4:	79fb      	ldrb	r3, [r7, #7]
    80e6:	4619      	mov	r1, r3
    80e8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    80ec:	4b02      	ldr	r3, [pc, #8]	; (80f8 <_usbd_ep_int_dis+0x24>)
    80ee:	4798      	blx	r3
}
    80f0:	bf00      	nop
    80f2:	3708      	adds	r7, #8
    80f4:	46bd      	mov	sp, r7
    80f6:	bd80      	pop	{r7, pc}
    80f8:	00007c5d 	.word	0x00007c5d

000080fc <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    80fc:	b580      	push	{r7, lr}
    80fe:	b082      	sub	sp, #8
    8100:	af00      	add	r7, sp, #0
    8102:	4603      	mov	r3, r0
    8104:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8106:	79fb      	ldrb	r3, [r7, #7]
    8108:	4619      	mov	r1, r3
    810a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    810e:	4b06      	ldr	r3, [pc, #24]	; (8128 <_usbd_ep_is_ctrl+0x2c>)
    8110:	4798      	blx	r3
    8112:	4603      	mov	r3, r0
    8114:	2b11      	cmp	r3, #17
    8116:	bf0c      	ite	eq
    8118:	2301      	moveq	r3, #1
    811a:	2300      	movne	r3, #0
    811c:	b2db      	uxtb	r3, r3
}
    811e:	4618      	mov	r0, r3
    8120:	3708      	adds	r7, #8
    8122:	46bd      	mov	sp, r7
    8124:	bd80      	pop	{r7, pc}
    8126:	bf00      	nop
    8128:	00007d17 	.word	0x00007d17

0000812c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    812c:	b580      	push	{r7, lr}
    812e:	b082      	sub	sp, #8
    8130:	af00      	add	r7, sp, #0
    8132:	4603      	mov	r3, r0
    8134:	71fb      	strb	r3, [r7, #7]
    8136:	460b      	mov	r3, r1
    8138:	71bb      	strb	r3, [r7, #6]
    813a:	4613      	mov	r3, r2
    813c:	717b      	strb	r3, [r7, #5]
	if (st) {
    813e:	797b      	ldrb	r3, [r7, #5]
    8140:	2b00      	cmp	r3, #0
    8142:	d00b      	beq.n	815c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8144:	79bb      	ldrb	r3, [r7, #6]
    8146:	2210      	movs	r2, #16
    8148:	fa02 f303 	lsl.w	r3, r2, r3
    814c:	b2da      	uxtb	r2, r3
    814e:	79fb      	ldrb	r3, [r7, #7]
    8150:	4619      	mov	r1, r3
    8152:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8156:	4b09      	ldr	r3, [pc, #36]	; (817c <_usbd_ep_set_stall+0x50>)
    8158:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    815a:	e00a      	b.n	8172 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    815c:	79bb      	ldrb	r3, [r7, #6]
    815e:	2210      	movs	r2, #16
    8160:	fa02 f303 	lsl.w	r3, r2, r3
    8164:	b2da      	uxtb	r2, r3
    8166:	79fb      	ldrb	r3, [r7, #7]
    8168:	4619      	mov	r1, r3
    816a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    816e:	4b04      	ldr	r3, [pc, #16]	; (8180 <_usbd_ep_set_stall+0x54>)
    8170:	4798      	blx	r3
}
    8172:	bf00      	nop
    8174:	3708      	adds	r7, #8
    8176:	46bd      	mov	sp, r7
    8178:	bd80      	pop	{r7, pc}
    817a:	bf00      	nop
    817c:	00007b89 	.word	0x00007b89
    8180:	00007bdd 	.word	0x00007bdd

00008184 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8184:	b580      	push	{r7, lr}
    8186:	b084      	sub	sp, #16
    8188:	af00      	add	r7, sp, #0
    818a:	4603      	mov	r3, r0
    818c:	460a      	mov	r2, r1
    818e:	71fb      	strb	r3, [r7, #7]
    8190:	4613      	mov	r3, r2
    8192:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8194:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8198:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    819a:	79fb      	ldrb	r3, [r7, #7]
    819c:	4619      	mov	r1, r3
    819e:	68f8      	ldr	r0, [r7, #12]
    81a0:	4b08      	ldr	r3, [pc, #32]	; (81c4 <_usbd_ep_is_stalled+0x40>)
    81a2:	4798      	blx	r3
    81a4:	4603      	mov	r3, r0
    81a6:	4619      	mov	r1, r3
    81a8:	79bb      	ldrb	r3, [r7, #6]
    81aa:	2210      	movs	r2, #16
    81ac:	fa02 f303 	lsl.w	r3, r2, r3
    81b0:	400b      	ands	r3, r1
    81b2:	2b00      	cmp	r3, #0
    81b4:	bf14      	ite	ne
    81b6:	2301      	movne	r3, #1
    81b8:	2300      	moveq	r3, #0
    81ba:	b2db      	uxtb	r3, r3
}
    81bc:	4618      	mov	r0, r3
    81be:	3710      	adds	r7, #16
    81c0:	46bd      	mov	sp, r7
    81c2:	bd80      	pop	{r7, pc}
    81c4:	00007bb5 	.word	0x00007bb5

000081c8 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    81c8:	b580      	push	{r7, lr}
    81ca:	b084      	sub	sp, #16
    81cc:	af00      	add	r7, sp, #0
    81ce:	4603      	mov	r3, r0
    81d0:	460a      	mov	r2, r1
    81d2:	71fb      	strb	r3, [r7, #7]
    81d4:	4613      	mov	r3, r2
    81d6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    81d8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    81dc:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    81de:	79fb      	ldrb	r3, [r7, #7]
    81e0:	4619      	mov	r1, r3
    81e2:	68f8      	ldr	r0, [r7, #12]
    81e4:	4b08      	ldr	r3, [pc, #32]	; (8208 <_usbd_ep_is_stall_sent+0x40>)
    81e6:	4798      	blx	r3
    81e8:	4603      	mov	r3, r0
    81ea:	4619      	mov	r1, r3
    81ec:	79bb      	ldrb	r3, [r7, #6]
    81ee:	2220      	movs	r2, #32
    81f0:	fa02 f303 	lsl.w	r3, r2, r3
    81f4:	400b      	ands	r3, r1
    81f6:	2b00      	cmp	r3, #0
    81f8:	bf14      	ite	ne
    81fa:	2301      	movne	r3, #1
    81fc:	2300      	moveq	r3, #0
    81fe:	b2db      	uxtb	r3, r3
}
    8200:	4618      	mov	r0, r3
    8202:	3710      	adds	r7, #16
    8204:	46bd      	mov	sp, r7
    8206:	bd80      	pop	{r7, pc}
    8208:	00007b35 	.word	0x00007b35

0000820c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    820c:	b580      	push	{r7, lr}
    820e:	b082      	sub	sp, #8
    8210:	af00      	add	r7, sp, #0
    8212:	4603      	mov	r3, r0
    8214:	460a      	mov	r2, r1
    8216:	71fb      	strb	r3, [r7, #7]
    8218:	4613      	mov	r3, r2
    821a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    821c:	79bb      	ldrb	r3, [r7, #6]
    821e:	2220      	movs	r2, #32
    8220:	409a      	lsls	r2, r3
    8222:	79fb      	ldrb	r3, [r7, #7]
    8224:	4611      	mov	r1, r2
    8226:	4618      	mov	r0, r3
    8228:	4b02      	ldr	r3, [pc, #8]	; (8234 <_usbd_ep_ack_stall+0x28>)
    822a:	4798      	blx	r3
}
    822c:	bf00      	nop
    822e:	3708      	adds	r7, #8
    8230:	46bd      	mov	sp, r7
    8232:	bd80      	pop	{r7, pc}
    8234:	00008085 	.word	0x00008085

00008238 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8238:	b580      	push	{r7, lr}
    823a:	b082      	sub	sp, #8
    823c:	af00      	add	r7, sp, #0
    823e:	4603      	mov	r3, r0
    8240:	71fb      	strb	r3, [r7, #7]
    8242:	460b      	mov	r3, r1
    8244:	71bb      	strb	r3, [r7, #6]
    8246:	4613      	mov	r3, r2
    8248:	717b      	strb	r3, [r7, #5]
	if (en) {
    824a:	797b      	ldrb	r3, [r7, #5]
    824c:	2b00      	cmp	r3, #0
    824e:	d008      	beq.n	8262 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8250:	79bb      	ldrb	r3, [r7, #6]
    8252:	2220      	movs	r2, #32
    8254:	409a      	lsls	r2, r3
    8256:	79fb      	ldrb	r3, [r7, #7]
    8258:	4611      	mov	r1, r2
    825a:	4618      	mov	r0, r3
    825c:	4b07      	ldr	r3, [pc, #28]	; (827c <_usbd_ep_int_stall_en+0x44>)
    825e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8260:	e007      	b.n	8272 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8262:	79bb      	ldrb	r3, [r7, #6]
    8264:	2220      	movs	r2, #32
    8266:	409a      	lsls	r2, r3
    8268:	79fb      	ldrb	r3, [r7, #7]
    826a:	4611      	mov	r1, r2
    826c:	4618      	mov	r0, r3
    826e:	4b04      	ldr	r3, [pc, #16]	; (8280 <_usbd_ep_int_stall_en+0x48>)
    8270:	4798      	blx	r3
}
    8272:	bf00      	nop
    8274:	3708      	adds	r7, #8
    8276:	46bd      	mov	sp, r7
    8278:	bd80      	pop	{r7, pc}
    827a:	bf00      	nop
    827c:	000080ad 	.word	0x000080ad
    8280:	000080d5 	.word	0x000080d5

00008284 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8284:	b580      	push	{r7, lr}
    8286:	b082      	sub	sp, #8
    8288:	af00      	add	r7, sp, #0
    828a:	4603      	mov	r3, r0
    828c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    828e:	79fb      	ldrb	r3, [r7, #7]
    8290:	4619      	mov	r1, r3
    8292:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8296:	4b03      	ldr	r3, [pc, #12]	; (82a4 <_usbd_ep_stop_setup+0x20>)
    8298:	4798      	blx	r3
}
    829a:	bf00      	nop
    829c:	3708      	adds	r7, #8
    829e:	46bd      	mov	sp, r7
    82a0:	bd80      	pop	{r7, pc}
    82a2:	bf00      	nop
    82a4:	00007c09 	.word	0x00007c09

000082a8 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    82a8:	b580      	push	{r7, lr}
    82aa:	b082      	sub	sp, #8
    82ac:	af00      	add	r7, sp, #0
    82ae:	4603      	mov	r3, r0
    82b0:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    82b2:	79fb      	ldrb	r3, [r7, #7]
    82b4:	2210      	movs	r2, #16
    82b6:	4619      	mov	r1, r3
    82b8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    82bc:	4b05      	ldr	r3, [pc, #20]	; (82d4 <_usbd_ep_is_setup+0x2c>)
    82be:	4798      	blx	r3
    82c0:	4603      	mov	r3, r0
    82c2:	2b00      	cmp	r3, #0
    82c4:	bf14      	ite	ne
    82c6:	2301      	movne	r3, #1
    82c8:	2300      	moveq	r3, #0
    82ca:	b2db      	uxtb	r3, r3
}
    82cc:	4618      	mov	r0, r3
    82ce:	3708      	adds	r7, #8
    82d0:	46bd      	mov	sp, r7
    82d2:	bd80      	pop	{r7, pc}
    82d4:	00007aff 	.word	0x00007aff

000082d8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    82d8:	b580      	push	{r7, lr}
    82da:	b082      	sub	sp, #8
    82dc:	af00      	add	r7, sp, #0
    82de:	4603      	mov	r3, r0
    82e0:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    82e2:	79fb      	ldrb	r3, [r7, #7]
    82e4:	2110      	movs	r1, #16
    82e6:	4618      	mov	r0, r3
    82e8:	4b02      	ldr	r3, [pc, #8]	; (82f4 <_usbd_ep_ack_setup+0x1c>)
    82ea:	4798      	blx	r3
}
    82ec:	bf00      	nop
    82ee:	3708      	adds	r7, #8
    82f0:	46bd      	mov	sp, r7
    82f2:	bd80      	pop	{r7, pc}
    82f4:	00008085 	.word	0x00008085

000082f8 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    82f8:	b580      	push	{r7, lr}
    82fa:	b082      	sub	sp, #8
    82fc:	af00      	add	r7, sp, #0
    82fe:	4603      	mov	r3, r0
    8300:	71fb      	strb	r3, [r7, #7]
    8302:	460b      	mov	r3, r1
    8304:	71bb      	strb	r3, [r7, #6]
    8306:	4613      	mov	r3, r2
    8308:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    830a:	797b      	ldrb	r3, [r7, #5]
    830c:	2b00      	cmp	r3, #0
    830e:	d00b      	beq.n	8328 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8310:	79bb      	ldrb	r3, [r7, #6]
    8312:	2201      	movs	r2, #1
    8314:	fa02 f303 	lsl.w	r3, r2, r3
    8318:	b2da      	uxtb	r2, r3
    831a:	79fb      	ldrb	r3, [r7, #7]
    831c:	4619      	mov	r1, r3
    831e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8322:	4b09      	ldr	r3, [pc, #36]	; (8348 <_usbd_ep_set_toggle+0x50>)
    8324:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8326:	e00a      	b.n	833e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8328:	79bb      	ldrb	r3, [r7, #6]
    832a:	2201      	movs	r2, #1
    832c:	fa02 f303 	lsl.w	r3, r2, r3
    8330:	b2da      	uxtb	r2, r3
    8332:	79fb      	ldrb	r3, [r7, #7]
    8334:	4619      	mov	r1, r3
    8336:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    833a:	4b04      	ldr	r3, [pc, #16]	; (834c <_usbd_ep_set_toggle+0x54>)
    833c:	4798      	blx	r3
}
    833e:	bf00      	nop
    8340:	3708      	adds	r7, #8
    8342:	46bd      	mov	sp, r7
    8344:	bd80      	pop	{r7, pc}
    8346:	bf00      	nop
    8348:	00007b89 	.word	0x00007b89
    834c:	00007bdd 	.word	0x00007bdd

00008350 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8350:	b580      	push	{r7, lr}
    8352:	b082      	sub	sp, #8
    8354:	af00      	add	r7, sp, #0
    8356:	4603      	mov	r3, r0
    8358:	460a      	mov	r2, r1
    835a:	71fb      	strb	r3, [r7, #7]
    835c:	4613      	mov	r3, r2
    835e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8360:	79bb      	ldrb	r3, [r7, #6]
    8362:	2201      	movs	r2, #1
    8364:	409a      	lsls	r2, r3
    8366:	79fb      	ldrb	r3, [r7, #7]
    8368:	4611      	mov	r1, r2
    836a:	4618      	mov	r0, r3
    836c:	4b02      	ldr	r3, [pc, #8]	; (8378 <_usbd_ep_ack_io_cpt+0x28>)
    836e:	4798      	blx	r3
}
    8370:	bf00      	nop
    8372:	3708      	adds	r7, #8
    8374:	46bd      	mov	sp, r7
    8376:	bd80      	pop	{r7, pc}
    8378:	00008085 	.word	0x00008085

0000837c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    837c:	b480      	push	{r7}
    837e:	b085      	sub	sp, #20
    8380:	af00      	add	r7, sp, #0
    8382:	4603      	mov	r3, r0
    8384:	603a      	str	r2, [r7, #0]
    8386:	71fb      	strb	r3, [r7, #7]
    8388:	460b      	mov	r3, r1
    838a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    838c:	79fa      	ldrb	r2, [r7, #7]
    838e:	79bb      	ldrb	r3, [r7, #6]
    8390:	0052      	lsls	r2, r2, #1
    8392:	4413      	add	r3, r2
    8394:	011b      	lsls	r3, r3, #4
    8396:	4a06      	ldr	r2, [pc, #24]	; (83b0 <_usbd_ep_set_buf+0x34>)
    8398:	4413      	add	r3, r2
    839a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    839c:	68fb      	ldr	r3, [r7, #12]
    839e:	683a      	ldr	r2, [r7, #0]
    83a0:	601a      	str	r2, [r3, #0]
}
    83a2:	bf00      	nop
    83a4:	3714      	adds	r7, #20
    83a6:	46bd      	mov	sp, r7
    83a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    83ac:	4770      	bx	lr
    83ae:	bf00      	nop
    83b0:	20000b70 	.word	0x20000b70

000083b4 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    83b4:	b480      	push	{r7}
    83b6:	b085      	sub	sp, #20
    83b8:	af00      	add	r7, sp, #0
    83ba:	4603      	mov	r3, r0
    83bc:	71fb      	strb	r3, [r7, #7]
    83be:	460b      	mov	r3, r1
    83c0:	71bb      	strb	r3, [r7, #6]
    83c2:	4613      	mov	r3, r2
    83c4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    83c6:	79fa      	ldrb	r2, [r7, #7]
    83c8:	79bb      	ldrb	r3, [r7, #6]
    83ca:	0052      	lsls	r2, r2, #1
    83cc:	4413      	add	r3, r2
    83ce:	011b      	lsls	r3, r3, #4
    83d0:	4a08      	ldr	r2, [pc, #32]	; (83f4 <_usbd_ep_set_in_count+0x40>)
    83d2:	4413      	add	r3, r2
    83d4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    83d6:	88bb      	ldrh	r3, [r7, #4]
    83d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    83dc:	b299      	uxth	r1, r3
    83de:	68fa      	ldr	r2, [r7, #12]
    83e0:	6853      	ldr	r3, [r2, #4]
    83e2:	f361 339b 	bfi	r3, r1, #14, #14
    83e6:	6053      	str	r3, [r2, #4]
}
    83e8:	bf00      	nop
    83ea:	3714      	adds	r7, #20
    83ec:	46bd      	mov	sp, r7
    83ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    83f2:	4770      	bx	lr
    83f4:	20000b70 	.word	0x20000b70

000083f8 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    83f8:	b480      	push	{r7}
    83fa:	b085      	sub	sp, #20
    83fc:	af00      	add	r7, sp, #0
    83fe:	4603      	mov	r3, r0
    8400:	71fb      	strb	r3, [r7, #7]
    8402:	460b      	mov	r3, r1
    8404:	71bb      	strb	r3, [r7, #6]
    8406:	4613      	mov	r3, r2
    8408:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    840a:	79fa      	ldrb	r2, [r7, #7]
    840c:	79bb      	ldrb	r3, [r7, #6]
    840e:	0052      	lsls	r2, r2, #1
    8410:	4413      	add	r3, r2
    8412:	011b      	lsls	r3, r3, #4
    8414:	4a08      	ldr	r2, [pc, #32]	; (8438 <_usbd_ep_set_in_size+0x40>)
    8416:	4413      	add	r3, r2
    8418:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    841a:	88bb      	ldrh	r3, [r7, #4]
    841c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8420:	b299      	uxth	r1, r3
    8422:	68fa      	ldr	r2, [r7, #12]
    8424:	6853      	ldr	r3, [r2, #4]
    8426:	f361 030d 	bfi	r3, r1, #0, #14
    842a:	6053      	str	r3, [r2, #4]
}
    842c:	bf00      	nop
    842e:	3714      	adds	r7, #20
    8430:	46bd      	mov	sp, r7
    8432:	f85d 7b04 	ldr.w	r7, [sp], #4
    8436:	4770      	bx	lr
    8438:	20000b70 	.word	0x20000b70

0000843c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    843c:	b480      	push	{r7}
    843e:	b085      	sub	sp, #20
    8440:	af00      	add	r7, sp, #0
    8442:	4603      	mov	r3, r0
    8444:	71fb      	strb	r3, [r7, #7]
    8446:	460b      	mov	r3, r1
    8448:	71bb      	strb	r3, [r7, #6]
    844a:	4613      	mov	r3, r2
    844c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    844e:	79fa      	ldrb	r2, [r7, #7]
    8450:	79bb      	ldrb	r3, [r7, #6]
    8452:	0052      	lsls	r2, r2, #1
    8454:	4413      	add	r3, r2
    8456:	011b      	lsls	r3, r3, #4
    8458:	4a08      	ldr	r2, [pc, #32]	; (847c <_usbd_ep_set_out_count+0x40>)
    845a:	4413      	add	r3, r2
    845c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    845e:	88bb      	ldrh	r3, [r7, #4]
    8460:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8464:	b299      	uxth	r1, r3
    8466:	68fa      	ldr	r2, [r7, #12]
    8468:	6853      	ldr	r3, [r2, #4]
    846a:	f361 030d 	bfi	r3, r1, #0, #14
    846e:	6053      	str	r3, [r2, #4]
}
    8470:	bf00      	nop
    8472:	3714      	adds	r7, #20
    8474:	46bd      	mov	sp, r7
    8476:	f85d 7b04 	ldr.w	r7, [sp], #4
    847a:	4770      	bx	lr
    847c:	20000b70 	.word	0x20000b70

00008480 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8480:	b480      	push	{r7}
    8482:	b085      	sub	sp, #20
    8484:	af00      	add	r7, sp, #0
    8486:	4603      	mov	r3, r0
    8488:	71fb      	strb	r3, [r7, #7]
    848a:	460b      	mov	r3, r1
    848c:	71bb      	strb	r3, [r7, #6]
    848e:	4613      	mov	r3, r2
    8490:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8492:	79fa      	ldrb	r2, [r7, #7]
    8494:	79bb      	ldrb	r3, [r7, #6]
    8496:	0052      	lsls	r2, r2, #1
    8498:	4413      	add	r3, r2
    849a:	011b      	lsls	r3, r3, #4
    849c:	4a08      	ldr	r2, [pc, #32]	; (84c0 <_usbd_ep_set_out_size+0x40>)
    849e:	4413      	add	r3, r2
    84a0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    84a2:	88bb      	ldrh	r3, [r7, #4]
    84a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    84a8:	b299      	uxth	r1, r3
    84aa:	68fa      	ldr	r2, [r7, #12]
    84ac:	6853      	ldr	r3, [r2, #4]
    84ae:	f361 339b 	bfi	r3, r1, #14, #14
    84b2:	6053      	str	r3, [r2, #4]
}
    84b4:	bf00      	nop
    84b6:	3714      	adds	r7, #20
    84b8:	46bd      	mov	sp, r7
    84ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    84be:	4770      	bx	lr
    84c0:	20000b70 	.word	0x20000b70

000084c4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    84c4:	b580      	push	{r7, lr}
    84c6:	b084      	sub	sp, #16
    84c8:	af00      	add	r7, sp, #0
    84ca:	60ba      	str	r2, [r7, #8]
    84cc:	607b      	str	r3, [r7, #4]
    84ce:	4603      	mov	r3, r0
    84d0:	73fb      	strb	r3, [r7, #15]
    84d2:	460b      	mov	r3, r1
    84d4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    84d6:	68bb      	ldr	r3, [r7, #8]
    84d8:	b29a      	uxth	r2, r3
    84da:	7bb9      	ldrb	r1, [r7, #14]
    84dc:	7bfb      	ldrb	r3, [r7, #15]
    84de:	4618      	mov	r0, r3
    84e0:	4b06      	ldr	r3, [pc, #24]	; (84fc <_usbd_ep_set_in_trans+0x38>)
    84e2:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    84e4:	687b      	ldr	r3, [r7, #4]
    84e6:	b29a      	uxth	r2, r3
    84e8:	7bb9      	ldrb	r1, [r7, #14]
    84ea:	7bfb      	ldrb	r3, [r7, #15]
    84ec:	4618      	mov	r0, r3
    84ee:	4b04      	ldr	r3, [pc, #16]	; (8500 <_usbd_ep_set_in_trans+0x3c>)
    84f0:	4798      	blx	r3
}
    84f2:	bf00      	nop
    84f4:	3710      	adds	r7, #16
    84f6:	46bd      	mov	sp, r7
    84f8:	bd80      	pop	{r7, pc}
    84fa:	bf00      	nop
    84fc:	000083f9 	.word	0x000083f9
    8500:	000083b5 	.word	0x000083b5

00008504 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8504:	b580      	push	{r7, lr}
    8506:	b084      	sub	sp, #16
    8508:	af00      	add	r7, sp, #0
    850a:	60ba      	str	r2, [r7, #8]
    850c:	607b      	str	r3, [r7, #4]
    850e:	4603      	mov	r3, r0
    8510:	73fb      	strb	r3, [r7, #15]
    8512:	460b      	mov	r3, r1
    8514:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    8516:	68bb      	ldr	r3, [r7, #8]
    8518:	b29a      	uxth	r2, r3
    851a:	7bb9      	ldrb	r1, [r7, #14]
    851c:	7bfb      	ldrb	r3, [r7, #15]
    851e:	4618      	mov	r0, r3
    8520:	4b06      	ldr	r3, [pc, #24]	; (853c <_usbd_ep_set_out_trans+0x38>)
    8522:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8524:	687b      	ldr	r3, [r7, #4]
    8526:	b29a      	uxth	r2, r3
    8528:	7bb9      	ldrb	r1, [r7, #14]
    852a:	7bfb      	ldrb	r3, [r7, #15]
    852c:	4618      	mov	r0, r3
    852e:	4b04      	ldr	r3, [pc, #16]	; (8540 <_usbd_ep_set_out_trans+0x3c>)
    8530:	4798      	blx	r3
}
    8532:	bf00      	nop
    8534:	3710      	adds	r7, #16
    8536:	46bd      	mov	sp, r7
    8538:	bd80      	pop	{r7, pc}
    853a:	bf00      	nop
    853c:	00008481 	.word	0x00008481
    8540:	0000843d 	.word	0x0000843d

00008544 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8544:	b480      	push	{r7}
    8546:	b085      	sub	sp, #20
    8548:	af00      	add	r7, sp, #0
    854a:	4603      	mov	r3, r0
    854c:	460a      	mov	r2, r1
    854e:	71fb      	strb	r3, [r7, #7]
    8550:	4613      	mov	r3, r2
    8552:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8554:	79fa      	ldrb	r2, [r7, #7]
    8556:	79bb      	ldrb	r3, [r7, #6]
    8558:	0052      	lsls	r2, r2, #1
    855a:	4413      	add	r3, r2
    855c:	011b      	lsls	r3, r3, #4
    855e:	4a06      	ldr	r2, [pc, #24]	; (8578 <_usbd_ep_clear_bank_status+0x34>)
    8560:	4413      	add	r3, r2
    8562:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8564:	68fb      	ldr	r3, [r7, #12]
    8566:	2200      	movs	r2, #0
    8568:	729a      	strb	r2, [r3, #10]
}
    856a:	bf00      	nop
    856c:	3714      	adds	r7, #20
    856e:	46bd      	mov	sp, r7
    8570:	f85d 7b04 	ldr.w	r7, [sp], #4
    8574:	4770      	bx	lr
    8576:	bf00      	nop
    8578:	20000b70 	.word	0x20000b70

0000857c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    857c:	b580      	push	{r7, lr}
    857e:	b082      	sub	sp, #8
    8580:	af00      	add	r7, sp, #0
    8582:	4603      	mov	r3, r0
    8584:	71fb      	strb	r3, [r7, #7]
    8586:	460b      	mov	r3, r1
    8588:	71bb      	strb	r3, [r7, #6]
    858a:	4613      	mov	r3, r2
    858c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    858e:	797b      	ldrb	r3, [r7, #5]
    8590:	2b00      	cmp	r3, #0
    8592:	d00b      	beq.n	85ac <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8594:	79bb      	ldrb	r3, [r7, #6]
    8596:	2240      	movs	r2, #64	; 0x40
    8598:	fa02 f303 	lsl.w	r3, r2, r3
    859c:	b2da      	uxtb	r2, r3
    859e:	79fb      	ldrb	r3, [r7, #7]
    85a0:	4619      	mov	r1, r3
    85a2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    85a6:	4b09      	ldr	r3, [pc, #36]	; (85cc <_usbd_ep_set_in_rdy+0x50>)
    85a8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    85aa:	e00a      	b.n	85c2 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    85ac:	79bb      	ldrb	r3, [r7, #6]
    85ae:	2240      	movs	r2, #64	; 0x40
    85b0:	fa02 f303 	lsl.w	r3, r2, r3
    85b4:	b2da      	uxtb	r2, r3
    85b6:	79fb      	ldrb	r3, [r7, #7]
    85b8:	4619      	mov	r1, r3
    85ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    85be:	4b04      	ldr	r3, [pc, #16]	; (85d0 <_usbd_ep_set_in_rdy+0x54>)
    85c0:	4798      	blx	r3
}
    85c2:	bf00      	nop
    85c4:	3708      	adds	r7, #8
    85c6:	46bd      	mov	sp, r7
    85c8:	bd80      	pop	{r7, pc}
    85ca:	bf00      	nop
    85cc:	00007b89 	.word	0x00007b89
    85d0:	00007bdd 	.word	0x00007bdd

000085d4 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    85d4:	b580      	push	{r7, lr}
    85d6:	b082      	sub	sp, #8
    85d8:	af00      	add	r7, sp, #0
    85da:	4603      	mov	r3, r0
    85dc:	71fb      	strb	r3, [r7, #7]
    85de:	460b      	mov	r3, r1
    85e0:	71bb      	strb	r3, [r7, #6]
    85e2:	4613      	mov	r3, r2
    85e4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    85e6:	797b      	ldrb	r3, [r7, #5]
    85e8:	2b00      	cmp	r3, #0
    85ea:	d00b      	beq.n	8604 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    85ec:	79bb      	ldrb	r3, [r7, #6]
    85ee:	2240      	movs	r2, #64	; 0x40
    85f0:	fa02 f303 	lsl.w	r3, r2, r3
    85f4:	b2da      	uxtb	r2, r3
    85f6:	79fb      	ldrb	r3, [r7, #7]
    85f8:	4619      	mov	r1, r3
    85fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    85fe:	4b09      	ldr	r3, [pc, #36]	; (8624 <_usbd_ep_set_out_rdy+0x50>)
    8600:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8602:	e00a      	b.n	861a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8604:	79bb      	ldrb	r3, [r7, #6]
    8606:	2240      	movs	r2, #64	; 0x40
    8608:	fa02 f303 	lsl.w	r3, r2, r3
    860c:	b2da      	uxtb	r2, r3
    860e:	79fb      	ldrb	r3, [r7, #7]
    8610:	4619      	mov	r1, r3
    8612:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8616:	4b04      	ldr	r3, [pc, #16]	; (8628 <_usbd_ep_set_out_rdy+0x54>)
    8618:	4798      	blx	r3
}
    861a:	bf00      	nop
    861c:	3708      	adds	r7, #8
    861e:	46bd      	mov	sp, r7
    8620:	bd80      	pop	{r7, pc}
    8622:	bf00      	nop
    8624:	00007bdd 	.word	0x00007bdd
    8628:	00007b89 	.word	0x00007b89

0000862c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    862c:	b480      	push	{r7}
    862e:	b083      	sub	sp, #12
    8630:	af00      	add	r7, sp, #0
    8632:	4603      	mov	r3, r0
    8634:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8636:	88fb      	ldrh	r3, [r7, #6]
    8638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    863c:	d820      	bhi.n	8680 <_usbd_ep_pcksize_size+0x54>
    863e:	88fb      	ldrh	r3, [r7, #6]
    8640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8644:	d81a      	bhi.n	867c <_usbd_ep_pcksize_size+0x50>
    8646:	88fb      	ldrh	r3, [r7, #6]
    8648:	2b80      	cmp	r3, #128	; 0x80
    864a:	d815      	bhi.n	8678 <_usbd_ep_pcksize_size+0x4c>
    864c:	88fb      	ldrh	r3, [r7, #6]
    864e:	2b40      	cmp	r3, #64	; 0x40
    8650:	d810      	bhi.n	8674 <_usbd_ep_pcksize_size+0x48>
    8652:	88fb      	ldrh	r3, [r7, #6]
    8654:	2b20      	cmp	r3, #32
    8656:	d80b      	bhi.n	8670 <_usbd_ep_pcksize_size+0x44>
    8658:	88fb      	ldrh	r3, [r7, #6]
    865a:	2b10      	cmp	r3, #16
    865c:	d806      	bhi.n	866c <_usbd_ep_pcksize_size+0x40>
    865e:	88fb      	ldrh	r3, [r7, #6]
    8660:	2b08      	cmp	r3, #8
    8662:	bf8c      	ite	hi
    8664:	2301      	movhi	r3, #1
    8666:	2300      	movls	r3, #0
    8668:	b2db      	uxtb	r3, r3
    866a:	e00a      	b.n	8682 <_usbd_ep_pcksize_size+0x56>
    866c:	2302      	movs	r3, #2
    866e:	e008      	b.n	8682 <_usbd_ep_pcksize_size+0x56>
    8670:	2303      	movs	r3, #3
    8672:	e006      	b.n	8682 <_usbd_ep_pcksize_size+0x56>
    8674:	2304      	movs	r3, #4
    8676:	e004      	b.n	8682 <_usbd_ep_pcksize_size+0x56>
    8678:	2305      	movs	r3, #5
    867a:	e002      	b.n	8682 <_usbd_ep_pcksize_size+0x56>
    867c:	2306      	movs	r3, #6
    867e:	e000      	b.n	8682 <_usbd_ep_pcksize_size+0x56>
    8680:	2307      	movs	r3, #7
}
    8682:	4618      	mov	r0, r3
    8684:	370c      	adds	r7, #12
    8686:	46bd      	mov	sp, r7
    8688:	f85d 7b04 	ldr.w	r7, [sp], #4
    868c:	4770      	bx	lr
	...

00008690 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    8690:	b480      	push	{r7}
    8692:	b085      	sub	sp, #20
    8694:	af00      	add	r7, sp, #0
    8696:	4603      	mov	r3, r0
    8698:	460a      	mov	r2, r1
    869a:	71fb      	strb	r3, [r7, #7]
    869c:	4613      	mov	r3, r2
    869e:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    86a0:	79fb      	ldrb	r3, [r7, #7]
    86a2:	2b00      	cmp	r3, #0
    86a4:	d008      	beq.n	86b8 <_usb_d_dev_ept+0x28>
    86a6:	79bb      	ldrb	r3, [r7, #6]
    86a8:	2b00      	cmp	r3, #0
    86aa:	d003      	beq.n	86b4 <_usb_d_dev_ept+0x24>
    86ac:	79fb      	ldrb	r3, [r7, #7]
    86ae:	3304      	adds	r3, #4
    86b0:	b2db      	uxtb	r3, r3
    86b2:	e002      	b.n	86ba <_usb_d_dev_ept+0x2a>
    86b4:	79fb      	ldrb	r3, [r7, #7]
    86b6:	e000      	b.n	86ba <_usb_d_dev_ept+0x2a>
    86b8:	2300      	movs	r3, #0
    86ba:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    86bc:	7bfa      	ldrb	r2, [r7, #15]
    86be:	4613      	mov	r3, r2
    86c0:	009b      	lsls	r3, r3, #2
    86c2:	4413      	add	r3, r2
    86c4:	009b      	lsls	r3, r3, #2
    86c6:	3310      	adds	r3, #16
    86c8:	4a04      	ldr	r2, [pc, #16]	; (86dc <_usb_d_dev_ept+0x4c>)
    86ca:	4413      	add	r3, r2
    86cc:	3304      	adds	r3, #4
}
    86ce:	4618      	mov	r0, r3
    86d0:	3714      	adds	r7, #20
    86d2:	46bd      	mov	sp, r7
    86d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    86d8:	4770      	bx	lr
    86da:	bf00      	nop
    86dc:	20000aa8 	.word	0x20000aa8

000086e0 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    86e0:	b580      	push	{r7, lr}
    86e2:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    86e4:	2104      	movs	r1, #4
    86e6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    86ea:	4b03      	ldr	r3, [pc, #12]	; (86f8 <_usb_d_dev_sof+0x18>)
    86ec:	4798      	blx	r3
	dev_inst.callbacks.sof();
    86ee:	4b03      	ldr	r3, [pc, #12]	; (86fc <_usb_d_dev_sof+0x1c>)
    86f0:	681b      	ldr	r3, [r3, #0]
    86f2:	4798      	blx	r3
}
    86f4:	bf00      	nop
    86f6:	bd80      	pop	{r7, pc}
    86f8:	00007d57 	.word	0x00007d57
    86fc:	20000aa8 	.word	0x20000aa8

00008700 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    8700:	b580      	push	{r7, lr}
    8702:	b084      	sub	sp, #16
    8704:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    8706:	2300      	movs	r3, #0
    8708:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    870a:	f240 2101 	movw	r1, #513	; 0x201
    870e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8712:	4b1a      	ldr	r3, [pc, #104]	; (877c <_usb_d_dev_lpmsusp+0x7c>)
    8714:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8716:	f240 2101 	movw	r1, #513	; 0x201
    871a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    871e:	4b18      	ldr	r3, [pc, #96]	; (8780 <_usb_d_dev_lpmsusp+0x80>)
    8720:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8722:	2170      	movs	r1, #112	; 0x70
    8724:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8728:	4b16      	ldr	r3, [pc, #88]	; (8784 <_usb_d_dev_lpmsusp+0x84>)
    872a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    872c:	2300      	movs	r3, #0
    872e:	73fb      	strb	r3, [r7, #15]
    8730:	e018      	b.n	8764 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8732:	7bfb      	ldrb	r3, [r7, #15]
    8734:	015b      	lsls	r3, r3, #5
    8736:	4a14      	ldr	r2, [pc, #80]	; (8788 <_usb_d_dev_lpmsusp+0x88>)
    8738:	4413      	add	r3, r2
    873a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    873c:	687b      	ldr	r3, [r7, #4]
    873e:	891b      	ldrh	r3, [r3, #8]
    8740:	f3c3 0303 	ubfx	r3, r3, #0, #4
    8744:	b2db      	uxtb	r3, r3
    8746:	2b03      	cmp	r3, #3
    8748:	d109      	bne.n	875e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    874a:	687b      	ldr	r3, [r7, #4]
    874c:	891b      	ldrh	r3, [r3, #8]
    874e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    8752:	b29b      	uxth	r3, r3
    8754:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    8756:	687b      	ldr	r3, [r7, #4]
    8758:	2200      	movs	r2, #0
    875a:	811a      	strh	r2, [r3, #8]
			break;
    875c:	e005      	b.n	876a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    875e:	7bfb      	ldrb	r3, [r7, #15]
    8760:	3301      	adds	r3, #1
    8762:	73fb      	strb	r3, [r7, #15]
    8764:	7bfb      	ldrb	r3, [r7, #15]
    8766:	2b03      	cmp	r3, #3
    8768:	d9e3      	bls.n	8732 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    876a:	4b08      	ldr	r3, [pc, #32]	; (878c <_usb_d_dev_lpmsusp+0x8c>)
    876c:	685b      	ldr	r3, [r3, #4]
    876e:	68b9      	ldr	r1, [r7, #8]
    8770:	2003      	movs	r0, #3
    8772:	4798      	blx	r3
}
    8774:	bf00      	nop
    8776:	3710      	adds	r7, #16
    8778:	46bd      	mov	sp, r7
    877a:	bd80      	pop	{r7, pc}
    877c:	00007d57 	.word	0x00007d57
    8780:	00007dad 	.word	0x00007dad
    8784:	00007d75 	.word	0x00007d75
    8788:	20000b70 	.word	0x20000b70
    878c:	20000aa8 	.word	0x20000aa8

00008790 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    8790:	b580      	push	{r7, lr}
    8792:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    8794:	2180      	movs	r1, #128	; 0x80
    8796:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    879a:	4b04      	ldr	r3, [pc, #16]	; (87ac <_usb_d_dev_ramerr+0x1c>)
    879c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    879e:	4b04      	ldr	r3, [pc, #16]	; (87b0 <_usb_d_dev_ramerr+0x20>)
    87a0:	685b      	ldr	r3, [r3, #4]
    87a2:	2100      	movs	r1, #0
    87a4:	2005      	movs	r0, #5
    87a6:	4798      	blx	r3
}
    87a8:	bf00      	nop
    87aa:	bd80      	pop	{r7, pc}
    87ac:	00007d57 	.word	0x00007d57
    87b0:	20000aa8 	.word	0x20000aa8

000087b4 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    87b4:	b580      	push	{r7, lr}
    87b6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    87b8:	2170      	movs	r1, #112	; 0x70
    87ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87be:	4b0b      	ldr	r3, [pc, #44]	; (87ec <_usb_d_dev_wakeup+0x38>)
    87c0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    87c2:	2170      	movs	r1, #112	; 0x70
    87c4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87c8:	4b09      	ldr	r3, [pc, #36]	; (87f0 <_usb_d_dev_wakeup+0x3c>)
    87ca:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    87cc:	f240 2101 	movw	r1, #513	; 0x201
    87d0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87d4:	4b07      	ldr	r3, [pc, #28]	; (87f4 <_usb_d_dev_wakeup+0x40>)
    87d6:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    87d8:	2000      	movs	r0, #0
    87da:	4b07      	ldr	r3, [pc, #28]	; (87f8 <_usb_d_dev_wakeup+0x44>)
    87dc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    87de:	4b07      	ldr	r3, [pc, #28]	; (87fc <_usb_d_dev_wakeup+0x48>)
    87e0:	685b      	ldr	r3, [r3, #4]
    87e2:	2100      	movs	r1, #0
    87e4:	2002      	movs	r0, #2
    87e6:	4798      	blx	r3
}
    87e8:	bf00      	nop
    87ea:	bd80      	pop	{r7, pc}
    87ec:	00007d57 	.word	0x00007d57
    87f0:	00007dad 	.word	0x00007dad
    87f4:	00007d75 	.word	0x00007d75
    87f8:	00008055 	.word	0x00008055
    87fc:	20000aa8 	.word	0x20000aa8

00008800 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    8800:	b580      	push	{r7, lr}
    8802:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    8804:	2200      	movs	r2, #0
    8806:	2100      	movs	r1, #0
    8808:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    880c:	4b0d      	ldr	r3, [pc, #52]	; (8844 <_usb_d_dev_reset+0x44>)
    880e:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    8810:	2108      	movs	r1, #8
    8812:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8816:	4b0c      	ldr	r3, [pc, #48]	; (8848 <_usb_d_dev_reset+0x48>)
    8818:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    881a:	2170      	movs	r1, #112	; 0x70
    881c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8820:	4b0a      	ldr	r3, [pc, #40]	; (884c <_usb_d_dev_reset+0x4c>)
    8822:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8824:	f240 2101 	movw	r1, #513	; 0x201
    8828:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    882c:	4b08      	ldr	r3, [pc, #32]	; (8850 <_usb_d_dev_reset+0x50>)
    882e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    8830:	4b08      	ldr	r3, [pc, #32]	; (8854 <_usb_d_dev_reset+0x54>)
    8832:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8834:	4b08      	ldr	r3, [pc, #32]	; (8858 <_usb_d_dev_reset+0x58>)
    8836:	685b      	ldr	r3, [r3, #4]
    8838:	2100      	movs	r1, #0
    883a:	2001      	movs	r0, #1
    883c:	4798      	blx	r3
}
    883e:	bf00      	nop
    8840:	bd80      	pop	{r7, pc}
    8842:	bf00      	nop
    8844:	00007ced 	.word	0x00007ced
    8848:	00007d57 	.word	0x00007d57
    884c:	00007dad 	.word	0x00007dad
    8850:	00007d75 	.word	0x00007d75
    8854:	000093bd 	.word	0x000093bd
    8858:	20000aa8 	.word	0x20000aa8

0000885c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    885c:	b580      	push	{r7, lr}
    885e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8860:	f240 2101 	movw	r1, #513	; 0x201
    8864:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8868:	4b09      	ldr	r3, [pc, #36]	; (8890 <_usb_d_dev_suspend+0x34>)
    886a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    886c:	f240 2101 	movw	r1, #513	; 0x201
    8870:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8874:	4b07      	ldr	r3, [pc, #28]	; (8894 <_usb_d_dev_suspend+0x38>)
    8876:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8878:	2170      	movs	r1, #112	; 0x70
    887a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    887e:	4b06      	ldr	r3, [pc, #24]	; (8898 <_usb_d_dev_suspend+0x3c>)
    8880:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8882:	4b06      	ldr	r3, [pc, #24]	; (889c <_usb_d_dev_suspend+0x40>)
    8884:	685b      	ldr	r3, [r3, #4]
    8886:	2100      	movs	r1, #0
    8888:	2004      	movs	r0, #4
    888a:	4798      	blx	r3
}
    888c:	bf00      	nop
    888e:	bd80      	pop	{r7, pc}
    8890:	00007d57 	.word	0x00007d57
    8894:	00007dad 	.word	0x00007dad
    8898:	00007d75 	.word	0x00007d75
    889c:	20000aa8 	.word	0x20000aa8

000088a0 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    88a0:	b580      	push	{r7, lr}
    88a2:	b082      	sub	sp, #8
    88a4:	af00      	add	r7, sp, #0
	bool     rc    = true;
    88a6:	2301      	movs	r3, #1
    88a8:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    88aa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    88ae:	4b22      	ldr	r3, [pc, #136]	; (8938 <_usb_d_dev_handle_nep+0x98>)
    88b0:	4798      	blx	r3
    88b2:	4603      	mov	r3, r0
    88b4:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    88b6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    88ba:	4b20      	ldr	r3, [pc, #128]	; (893c <_usb_d_dev_handle_nep+0x9c>)
    88bc:	4798      	blx	r3
    88be:	4603      	mov	r3, r0
    88c0:	461a      	mov	r2, r3
    88c2:	88bb      	ldrh	r3, [r7, #4]
    88c4:	4013      	ands	r3, r2
    88c6:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    88c8:	88bb      	ldrh	r3, [r7, #4]
    88ca:	f003 0304 	and.w	r3, r3, #4
    88ce:	2b00      	cmp	r3, #0
    88d0:	d003      	beq.n	88da <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    88d2:	4b1b      	ldr	r3, [pc, #108]	; (8940 <_usb_d_dev_handle_nep+0xa0>)
    88d4:	4798      	blx	r3
		return true;
    88d6:	2301      	movs	r3, #1
    88d8:	e02a      	b.n	8930 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    88da:	88bb      	ldrh	r3, [r7, #4]
    88dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    88e0:	2b00      	cmp	r3, #0
    88e2:	d002      	beq.n	88ea <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    88e4:	4b17      	ldr	r3, [pc, #92]	; (8944 <_usb_d_dev_handle_nep+0xa4>)
    88e6:	4798      	blx	r3
    88e8:	e021      	b.n	892e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    88ea:	88bb      	ldrh	r3, [r7, #4]
    88ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
    88f0:	2b00      	cmp	r3, #0
    88f2:	d002      	beq.n	88fa <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    88f4:	4b14      	ldr	r3, [pc, #80]	; (8948 <_usb_d_dev_handle_nep+0xa8>)
    88f6:	4798      	blx	r3
    88f8:	e019      	b.n	892e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    88fa:	88bb      	ldrh	r3, [r7, #4]
    88fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    8900:	2b00      	cmp	r3, #0
    8902:	d002      	beq.n	890a <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    8904:	4b11      	ldr	r3, [pc, #68]	; (894c <_usb_d_dev_handle_nep+0xac>)
    8906:	4798      	blx	r3
    8908:	e011      	b.n	892e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    890a:	88bb      	ldrh	r3, [r7, #4]
    890c:	f003 0308 	and.w	r3, r3, #8
    8910:	2b00      	cmp	r3, #0
    8912:	d002      	beq.n	891a <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    8914:	4b0e      	ldr	r3, [pc, #56]	; (8950 <_usb_d_dev_handle_nep+0xb0>)
    8916:	4798      	blx	r3
    8918:	e009      	b.n	892e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    891a:	88bb      	ldrh	r3, [r7, #4]
    891c:	f003 0301 	and.w	r3, r3, #1
    8920:	2b00      	cmp	r3, #0
    8922:	d002      	beq.n	892a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    8924:	4b0b      	ldr	r3, [pc, #44]	; (8954 <_usb_d_dev_handle_nep+0xb4>)
    8926:	4798      	blx	r3
    8928:	e001      	b.n	892e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    892a:	2300      	movs	r3, #0
    892c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    892e:	79fb      	ldrb	r3, [r7, #7]
}
    8930:	4618      	mov	r0, r3
    8932:	3708      	adds	r7, #8
    8934:	46bd      	mov	sp, r7
    8936:	bd80      	pop	{r7, pc}
    8938:	00007d3d 	.word	0x00007d3d
    893c:	00007d93 	.word	0x00007d93
    8940:	000086e1 	.word	0x000086e1
    8944:	00008701 	.word	0x00008701
    8948:	00008791 	.word	0x00008791
    894c:	000087b5 	.word	0x000087b5
    8950:	00008801 	.word	0x00008801
    8954:	0000885d 	.word	0x0000885d

00008958 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8958:	b590      	push	{r4, r7, lr}
    895a:	b089      	sub	sp, #36	; 0x24
    895c:	af00      	add	r7, sp, #0
    895e:	6078      	str	r0, [r7, #4]
    8960:	460b      	mov	r3, r1
    8962:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    8964:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8968:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    896a:	687b      	ldr	r3, [r7, #4]
    896c:	7c9b      	ldrb	r3, [r3, #18]
    896e:	f003 030f 	and.w	r3, r3, #15
    8972:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8974:	7dfb      	ldrb	r3, [r7, #23]
    8976:	015b      	lsls	r3, r3, #5
    8978:	4a73      	ldr	r2, [pc, #460]	; (8b48 <_usb_d_dev_in_next+0x1f0>)
    897a:	4413      	add	r3, r2
    897c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    897e:	78fb      	ldrb	r3, [r7, #3]
    8980:	2b00      	cmp	r3, #0
    8982:	d006      	beq.n	8992 <_usb_d_dev_in_next+0x3a>
    8984:	693b      	ldr	r3, [r7, #16]
    8986:	3310      	adds	r3, #16
    8988:	685b      	ldr	r3, [r3, #4]
    898a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    898e:	b29b      	uxth	r3, r3
    8990:	e000      	b.n	8994 <_usb_d_dev_in_next+0x3c>
    8992:	2300      	movs	r3, #0
    8994:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8996:	687b      	ldr	r3, [r7, #4]
    8998:	8a1b      	ldrh	r3, [r3, #16]
    899a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    899e:	4293      	cmp	r3, r2
    89a0:	d103      	bne.n	89aa <_usb_d_dev_in_next+0x52>
    89a2:	687b      	ldr	r3, [r7, #4]
    89a4:	8a1b      	ldrh	r3, [r3, #16]
    89a6:	b21b      	sxth	r3, r3
    89a8:	e004      	b.n	89b4 <_usb_d_dev_in_next+0x5c>
    89aa:	687b      	ldr	r3, [r7, #4]
    89ac:	8a1b      	ldrh	r3, [r3, #16]
    89ae:	3b01      	subs	r3, #1
    89b0:	b29b      	uxth	r3, r3
    89b2:	b21b      	sxth	r3, r3
    89b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    89b8:	4013      	ands	r3, r2
    89ba:	b21b      	sxth	r3, r3
    89bc:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    89be:	2300      	movs	r3, #0
    89c0:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    89c2:	687b      	ldr	r3, [r7, #4]
    89c4:	7cdb      	ldrb	r3, [r3, #19]
    89c6:	f003 0307 	and.w	r3, r3, #7
    89ca:	b2db      	uxtb	r3, r3
    89cc:	2b01      	cmp	r3, #1
    89ce:	bf0c      	ite	eq
    89d0:	2301      	moveq	r3, #1
    89d2:	2300      	movne	r3, #0
    89d4:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    89d6:	78fb      	ldrb	r3, [r7, #3]
    89d8:	2b00      	cmp	r3, #0
    89da:	d004      	beq.n	89e6 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    89dc:	7dfb      	ldrb	r3, [r7, #23]
    89de:	2101      	movs	r1, #1
    89e0:	4618      	mov	r0, r3
    89e2:	4b5a      	ldr	r3, [pc, #360]	; (8b4c <_usb_d_dev_in_next+0x1f4>)
    89e4:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    89e6:	687b      	ldr	r3, [r7, #4]
    89e8:	689a      	ldr	r2, [r3, #8]
    89ea:	89fb      	ldrh	r3, [r7, #14]
    89ec:	441a      	add	r2, r3
    89ee:	687b      	ldr	r3, [r7, #4]
    89f0:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    89f2:	687b      	ldr	r3, [r7, #4]
    89f4:	689a      	ldr	r2, [r3, #8]
    89f6:	687b      	ldr	r3, [r7, #4]
    89f8:	685b      	ldr	r3, [r3, #4]
    89fa:	429a      	cmp	r2, r3
    89fc:	d243      	bcs.n	8a86 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    89fe:	687b      	ldr	r3, [r7, #4]
    8a00:	685b      	ldr	r3, [r3, #4]
    8a02:	b29a      	uxth	r2, r3
    8a04:	687b      	ldr	r3, [r7, #4]
    8a06:	689b      	ldr	r3, [r3, #8]
    8a08:	b29b      	uxth	r3, r3
    8a0a:	1ad3      	subs	r3, r2, r3
    8a0c:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    8a0e:	687b      	ldr	r3, [r7, #4]
    8a10:	7cdb      	ldrb	r3, [r3, #19]
    8a12:	f003 0320 	and.w	r3, r3, #32
    8a16:	b2db      	uxtb	r3, r3
    8a18:	2b00      	cmp	r3, #0
    8a1a:	d01b      	beq.n	8a54 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    8a1c:	687b      	ldr	r3, [r7, #4]
    8a1e:	8a1b      	ldrh	r3, [r3, #16]
    8a20:	8bfa      	ldrh	r2, [r7, #30]
    8a22:	429a      	cmp	r2, r3
    8a24:	d902      	bls.n	8a2c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    8a26:	687b      	ldr	r3, [r7, #4]
    8a28:	8a1b      	ldrh	r3, [r3, #16]
    8a2a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8a2c:	687b      	ldr	r3, [r7, #4]
    8a2e:	68d8      	ldr	r0, [r3, #12]
    8a30:	687b      	ldr	r3, [r7, #4]
    8a32:	681a      	ldr	r2, [r3, #0]
    8a34:	687b      	ldr	r3, [r7, #4]
    8a36:	689b      	ldr	r3, [r3, #8]
    8a38:	4413      	add	r3, r2
    8a3a:	8bfa      	ldrh	r2, [r7, #30]
    8a3c:	4619      	mov	r1, r3
    8a3e:	4b44      	ldr	r3, [pc, #272]	; (8b50 <_usb_d_dev_in_next+0x1f8>)
    8a40:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8a42:	687b      	ldr	r3, [r7, #4]
    8a44:	68db      	ldr	r3, [r3, #12]
    8a46:	461a      	mov	r2, r3
    8a48:	7dfb      	ldrb	r3, [r7, #23]
    8a4a:	2101      	movs	r1, #1
    8a4c:	4618      	mov	r0, r3
    8a4e:	4b41      	ldr	r3, [pc, #260]	; (8b54 <_usb_d_dev_in_next+0x1fc>)
    8a50:	4798      	blx	r3
    8a52:	e011      	b.n	8a78 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    8a54:	8bfb      	ldrh	r3, [r7, #30]
    8a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8a5a:	d902      	bls.n	8a62 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    8a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8a60:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8a62:	687b      	ldr	r3, [r7, #4]
    8a64:	681a      	ldr	r2, [r3, #0]
    8a66:	687b      	ldr	r3, [r7, #4]
    8a68:	689b      	ldr	r3, [r3, #8]
    8a6a:	4413      	add	r3, r2
    8a6c:	461a      	mov	r2, r3
    8a6e:	7dfb      	ldrb	r3, [r7, #23]
    8a70:	2101      	movs	r1, #1
    8a72:	4618      	mov	r0, r3
    8a74:	4b37      	ldr	r3, [pc, #220]	; (8b54 <_usb_d_dev_in_next+0x1fc>)
    8a76:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    8a78:	8bfa      	ldrh	r2, [r7, #30]
    8a7a:	7df8      	ldrb	r0, [r7, #23]
    8a7c:	2300      	movs	r3, #0
    8a7e:	2101      	movs	r1, #1
    8a80:	4c35      	ldr	r4, [pc, #212]	; (8b58 <_usb_d_dev_in_next+0x200>)
    8a82:	47a0      	blx	r4
		goto _in_tx_exec;
    8a84:	e041      	b.n	8b0a <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    8a86:	687b      	ldr	r3, [r7, #4]
    8a88:	7cdb      	ldrb	r3, [r3, #19]
    8a8a:	f003 0310 	and.w	r3, r3, #16
    8a8e:	b2db      	uxtb	r3, r3
    8a90:	2b00      	cmp	r3, #0
    8a92:	d00b      	beq.n	8aac <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    8a94:	687a      	ldr	r2, [r7, #4]
    8a96:	7cd3      	ldrb	r3, [r2, #19]
    8a98:	f36f 1304 	bfc	r3, #4, #1
    8a9c:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    8a9e:	7df8      	ldrb	r0, [r7, #23]
    8aa0:	2300      	movs	r3, #0
    8aa2:	2200      	movs	r2, #0
    8aa4:	2101      	movs	r1, #1
    8aa6:	4c2c      	ldr	r4, [pc, #176]	; (8b58 <_usb_d_dev_in_next+0x200>)
    8aa8:	47a0      	blx	r4
		goto _in_tx_exec;
    8aaa:	e02e      	b.n	8b0a <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    8aac:	7afb      	ldrb	r3, [r7, #11]
    8aae:	2b00      	cmp	r3, #0
    8ab0:	d006      	beq.n	8ac0 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    8ab2:	7dfb      	ldrb	r3, [r7, #23]
    8ab4:	224b      	movs	r2, #75	; 0x4b
    8ab6:	4619      	mov	r1, r3
    8ab8:	69b8      	ldr	r0, [r7, #24]
    8aba:	4b28      	ldr	r3, [pc, #160]	; (8b5c <_usb_d_dev_in_next+0x204>)
    8abc:	4798      	blx	r3
    8abe:	e005      	b.n	8acc <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    8ac0:	7dfb      	ldrb	r3, [r7, #23]
    8ac2:	224a      	movs	r2, #74	; 0x4a
    8ac4:	4619      	mov	r1, r3
    8ac6:	69b8      	ldr	r0, [r7, #24]
    8ac8:	4b24      	ldr	r3, [pc, #144]	; (8b5c <_usb_d_dev_in_next+0x204>)
    8aca:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    8acc:	687b      	ldr	r3, [r7, #4]
    8ace:	8a1b      	ldrh	r3, [r3, #16]
    8ad0:	89ba      	ldrh	r2, [r7, #12]
    8ad2:	429a      	cmp	r2, r3
    8ad4:	d114      	bne.n	8b00 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    8ad6:	687a      	ldr	r2, [r7, #4]
    8ad8:	7cd3      	ldrb	r3, [r2, #19]
    8ada:	f36f 1386 	bfc	r3, #6, #1
    8ade:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8ae0:	4b1f      	ldr	r3, [pc, #124]	; (8b60 <_usb_d_dev_in_next+0x208>)
    8ae2:	68db      	ldr	r3, [r3, #12]
    8ae4:	687a      	ldr	r2, [r7, #4]
    8ae6:	7c90      	ldrb	r0, [r2, #18]
    8ae8:	687a      	ldr	r2, [r7, #4]
    8aea:	6892      	ldr	r2, [r2, #8]
    8aec:	4611      	mov	r1, r2
    8aee:	4798      	blx	r3
    8af0:	4603      	mov	r3, r0
    8af2:	2b00      	cmp	r3, #0
    8af4:	d124      	bne.n	8b40 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    8af6:	687a      	ldr	r2, [r7, #4]
    8af8:	7cd3      	ldrb	r3, [r2, #19]
    8afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8afe:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8b00:	2100      	movs	r1, #0
    8b02:	6878      	ldr	r0, [r7, #4]
    8b04:	4b17      	ldr	r3, [pc, #92]	; (8b64 <_usb_d_dev_in_next+0x20c>)
    8b06:	4798      	blx	r3
	return;
    8b08:	e01b      	b.n	8b42 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    8b0a:	78fb      	ldrb	r3, [r7, #3]
    8b0c:	f083 0301 	eor.w	r3, r3, #1
    8b10:	b2db      	uxtb	r3, r3
    8b12:	2b00      	cmp	r3, #0
    8b14:	d00d      	beq.n	8b32 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    8b16:	7afb      	ldrb	r3, [r7, #11]
    8b18:	2b00      	cmp	r3, #0
    8b1a:	d002      	beq.n	8b22 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    8b1c:	234e      	movs	r3, #78	; 0x4e
    8b1e:	777b      	strb	r3, [r7, #29]
    8b20:	e001      	b.n	8b26 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    8b22:	234a      	movs	r3, #74	; 0x4a
    8b24:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8b26:	7f7a      	ldrb	r2, [r7, #29]
    8b28:	7dfb      	ldrb	r3, [r7, #23]
    8b2a:	4619      	mov	r1, r3
    8b2c:	69b8      	ldr	r0, [r7, #24]
    8b2e:	4b0e      	ldr	r3, [pc, #56]	; (8b68 <_usb_d_dev_in_next+0x210>)
    8b30:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    8b32:	7dfb      	ldrb	r3, [r7, #23]
    8b34:	2201      	movs	r2, #1
    8b36:	2101      	movs	r1, #1
    8b38:	4618      	mov	r0, r3
    8b3a:	4b0c      	ldr	r3, [pc, #48]	; (8b6c <_usb_d_dev_in_next+0x214>)
    8b3c:	4798      	blx	r3
    8b3e:	e000      	b.n	8b42 <_usb_d_dev_in_next+0x1ea>
			return;
    8b40:	bf00      	nop
}
    8b42:	3724      	adds	r7, #36	; 0x24
    8b44:	46bd      	mov	sp, r7
    8b46:	bd90      	pop	{r4, r7, pc}
    8b48:	20000b70 	.word	0x20000b70
    8b4c:	00008351 	.word	0x00008351
    8b50:	0000cc35 	.word	0x0000cc35
    8b54:	0000837d 	.word	0x0000837d
    8b58:	000084c5 	.word	0x000084c5
    8b5c:	00007c5d 	.word	0x00007c5d
    8b60:	20000aa8 	.word	0x20000aa8
    8b64:	00009c81 	.word	0x00009c81
    8b68:	00007c31 	.word	0x00007c31
    8b6c:	0000857d 	.word	0x0000857d

00008b70 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8b70:	b590      	push	{r4, r7, lr}
    8b72:	b08b      	sub	sp, #44	; 0x2c
    8b74:	af00      	add	r7, sp, #0
    8b76:	6078      	str	r0, [r7, #4]
    8b78:	460b      	mov	r3, r1
    8b7a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    8b7c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8b80:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8b82:	687b      	ldr	r3, [r7, #4]
    8b84:	7c9b      	ldrb	r3, [r3, #18]
    8b86:	f003 030f 	and.w	r3, r3, #15
    8b8a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8b8c:	7ffb      	ldrb	r3, [r7, #31]
    8b8e:	015b      	lsls	r3, r3, #5
    8b90:	4a94      	ldr	r2, [pc, #592]	; (8de4 <_usb_d_dev_out_next+0x274>)
    8b92:	4413      	add	r3, r2
    8b94:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8b96:	78fb      	ldrb	r3, [r7, #3]
    8b98:	2b00      	cmp	r3, #0
    8b9a:	d005      	beq.n	8ba8 <_usb_d_dev_out_next+0x38>
    8b9c:	69bb      	ldr	r3, [r7, #24]
    8b9e:	685b      	ldr	r3, [r3, #4]
    8ba0:	f3c3 338d 	ubfx	r3, r3, #14, #14
    8ba4:	b29b      	uxth	r3, r3
    8ba6:	e000      	b.n	8baa <_usb_d_dev_out_next+0x3a>
    8ba8:	2300      	movs	r3, #0
    8baa:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8bac:	78fb      	ldrb	r3, [r7, #3]
    8bae:	2b00      	cmp	r3, #0
    8bb0:	d005      	beq.n	8bbe <_usb_d_dev_out_next+0x4e>
    8bb2:	69bb      	ldr	r3, [r7, #24]
    8bb4:	685b      	ldr	r3, [r3, #4]
    8bb6:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8bba:	b29b      	uxth	r3, r3
    8bbc:	e000      	b.n	8bc0 <_usb_d_dev_out_next+0x50>
    8bbe:	2300      	movs	r3, #0
    8bc0:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8bc2:	687b      	ldr	r3, [r7, #4]
    8bc4:	8a1b      	ldrh	r3, [r3, #16]
    8bc6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8bca:	4293      	cmp	r3, r2
    8bcc:	d004      	beq.n	8bd8 <_usb_d_dev_out_next+0x68>
    8bce:	687b      	ldr	r3, [r7, #4]
    8bd0:	8a1b      	ldrh	r3, [r3, #16]
    8bd2:	3b01      	subs	r3, #1
    8bd4:	b29b      	uxth	r3, r3
    8bd6:	e001      	b.n	8bdc <_usb_d_dev_out_next+0x6c>
    8bd8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8bdc:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    8bde:	8aba      	ldrh	r2, [r7, #20]
    8be0:	8a7b      	ldrh	r3, [r7, #18]
    8be2:	4013      	ands	r3, r2
    8be4:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8be6:	687b      	ldr	r3, [r7, #4]
    8be8:	7cdb      	ldrb	r3, [r3, #19]
    8bea:	f003 0307 	and.w	r3, r3, #7
    8bee:	b2db      	uxtb	r3, r3
    8bf0:	2b01      	cmp	r3, #1
    8bf2:	bf0c      	ite	eq
    8bf4:	2301      	moveq	r3, #1
    8bf6:	2300      	movne	r3, #0
    8bf8:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    8bfa:	78fb      	ldrb	r3, [r7, #3]
    8bfc:	2b00      	cmp	r3, #0
    8bfe:	d004      	beq.n	8c0a <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    8c00:	7ffb      	ldrb	r3, [r7, #31]
    8c02:	2100      	movs	r1, #0
    8c04:	4618      	mov	r0, r3
    8c06:	4b78      	ldr	r3, [pc, #480]	; (8de8 <_usb_d_dev_out_next+0x278>)
    8c08:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8c0a:	687b      	ldr	r3, [r7, #4]
    8c0c:	7cdb      	ldrb	r3, [r3, #19]
    8c0e:	f003 0320 	and.w	r3, r3, #32
    8c12:	b2db      	uxtb	r3, r3
    8c14:	2b00      	cmp	r3, #0
    8c16:	d01c      	beq.n	8c52 <_usb_d_dev_out_next+0xe2>
    8c18:	687b      	ldr	r3, [r7, #4]
    8c1a:	685b      	ldr	r3, [r3, #4]
    8c1c:	2b00      	cmp	r3, #0
    8c1e:	d018      	beq.n	8c52 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8c20:	687b      	ldr	r3, [r7, #4]
    8c22:	685b      	ldr	r3, [r3, #4]
    8c24:	b29a      	uxth	r2, r3
    8c26:	687b      	ldr	r3, [r7, #4]
    8c28:	689b      	ldr	r3, [r3, #8]
    8c2a:	b29b      	uxth	r3, r3
    8c2c:	1ad3      	subs	r3, r2, r3
    8c2e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    8c30:	687b      	ldr	r3, [r7, #4]
    8c32:	681a      	ldr	r2, [r3, #0]
    8c34:	687b      	ldr	r3, [r7, #4]
    8c36:	689b      	ldr	r3, [r3, #8]
    8c38:	18d0      	adds	r0, r2, r3
    8c3a:	687b      	ldr	r3, [r7, #4]
    8c3c:	68d9      	ldr	r1, [r3, #12]
    8c3e:	89ba      	ldrh	r2, [r7, #12]
    8c40:	8a3b      	ldrh	r3, [r7, #16]
    8c42:	429a      	cmp	r2, r3
    8c44:	d901      	bls.n	8c4a <_usb_d_dev_out_next+0xda>
    8c46:	8a3b      	ldrh	r3, [r7, #16]
    8c48:	e000      	b.n	8c4c <_usb_d_dev_out_next+0xdc>
    8c4a:	89bb      	ldrh	r3, [r7, #12]
    8c4c:	461a      	mov	r2, r3
    8c4e:	4b67      	ldr	r3, [pc, #412]	; (8dec <_usb_d_dev_out_next+0x27c>)
    8c50:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8c52:	687b      	ldr	r3, [r7, #4]
    8c54:	685b      	ldr	r3, [r3, #4]
    8c56:	2b00      	cmp	r3, #0
    8c58:	d121      	bne.n	8c9e <_usb_d_dev_out_next+0x12e>
    8c5a:	687b      	ldr	r3, [r7, #4]
    8c5c:	7cdb      	ldrb	r3, [r3, #19]
    8c5e:	f003 0310 	and.w	r3, r3, #16
    8c62:	b2db      	uxtb	r3, r3
    8c64:	2b00      	cmp	r3, #0
    8c66:	d01a      	beq.n	8c9e <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    8c68:	687a      	ldr	r2, [r7, #4]
    8c6a:	7cd3      	ldrb	r3, [r2, #19]
    8c6c:	f36f 1304 	bfc	r3, #4, #1
    8c70:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    8c72:	687a      	ldr	r2, [r7, #4]
    8c74:	7cd3      	ldrb	r3, [r2, #19]
    8c76:	f043 0320 	orr.w	r3, r3, #32
    8c7a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8c7c:	687b      	ldr	r3, [r7, #4]
    8c7e:	68db      	ldr	r3, [r3, #12]
    8c80:	461a      	mov	r2, r3
    8c82:	7ffb      	ldrb	r3, [r7, #31]
    8c84:	2100      	movs	r1, #0
    8c86:	4618      	mov	r0, r3
    8c88:	4b59      	ldr	r3, [pc, #356]	; (8df0 <_usb_d_dev_out_next+0x280>)
    8c8a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    8c8c:	687b      	ldr	r3, [r7, #4]
    8c8e:	8a1b      	ldrh	r3, [r3, #16]
    8c90:	461a      	mov	r2, r3
    8c92:	7ff8      	ldrb	r0, [r7, #31]
    8c94:	2300      	movs	r3, #0
    8c96:	2100      	movs	r1, #0
    8c98:	4c56      	ldr	r4, [pc, #344]	; (8df4 <_usb_d_dev_out_next+0x284>)
    8c9a:	47a0      	blx	r4
		goto _out_rx_exec;
    8c9c:	e090      	b.n	8dc0 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    8c9e:	78fb      	ldrb	r3, [r7, #3]
    8ca0:	2b00      	cmp	r3, #0
    8ca2:	d010      	beq.n	8cc6 <_usb_d_dev_out_next+0x156>
    8ca4:	687b      	ldr	r3, [r7, #4]
    8ca6:	8a1b      	ldrh	r3, [r3, #16]
    8ca8:	8a3a      	ldrh	r2, [r7, #16]
    8caa:	429a      	cmp	r2, r3
    8cac:	d20b      	bcs.n	8cc6 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    8cae:	687a      	ldr	r2, [r7, #4]
    8cb0:	7cd3      	ldrb	r3, [r2, #19]
    8cb2:	f36f 1304 	bfc	r3, #4, #1
    8cb6:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    8cb8:	687b      	ldr	r3, [r7, #4]
    8cba:	689a      	ldr	r2, [r3, #8]
    8cbc:	8abb      	ldrh	r3, [r7, #20]
    8cbe:	441a      	add	r2, r3
    8cc0:	687b      	ldr	r3, [r7, #4]
    8cc2:	609a      	str	r2, [r3, #8]
    8cc4:	e05c      	b.n	8d80 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    8cc6:	687b      	ldr	r3, [r7, #4]
    8cc8:	689a      	ldr	r2, [r3, #8]
    8cca:	8afb      	ldrh	r3, [r7, #22]
    8ccc:	441a      	add	r2, r3
    8cce:	687b      	ldr	r3, [r7, #4]
    8cd0:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    8cd2:	687b      	ldr	r3, [r7, #4]
    8cd4:	689a      	ldr	r2, [r3, #8]
    8cd6:	687b      	ldr	r3, [r7, #4]
    8cd8:	685b      	ldr	r3, [r3, #4]
    8cda:	429a      	cmp	r2, r3
    8cdc:	d250      	bcs.n	8d80 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    8cde:	687b      	ldr	r3, [r7, #4]
    8ce0:	685b      	ldr	r3, [r3, #4]
    8ce2:	b29a      	uxth	r2, r3
    8ce4:	687b      	ldr	r3, [r7, #4]
    8ce6:	689b      	ldr	r3, [r3, #8]
    8ce8:	b29b      	uxth	r3, r3
    8cea:	1ad3      	subs	r3, r2, r3
    8cec:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    8cee:	687b      	ldr	r3, [r7, #4]
    8cf0:	7cdb      	ldrb	r3, [r3, #19]
    8cf2:	f003 0320 	and.w	r3, r3, #32
    8cf6:	b2db      	uxtb	r3, r3
    8cf8:	2b00      	cmp	r3, #0
    8cfa:	d010      	beq.n	8d1e <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    8cfc:	687b      	ldr	r3, [r7, #4]
    8cfe:	8a1b      	ldrh	r3, [r3, #16]
    8d00:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8d02:	429a      	cmp	r2, r3
    8d04:	d902      	bls.n	8d0c <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    8d06:	687b      	ldr	r3, [r7, #4]
    8d08:	8a1b      	ldrh	r3, [r3, #16]
    8d0a:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8d0c:	687b      	ldr	r3, [r7, #4]
    8d0e:	68db      	ldr	r3, [r3, #12]
    8d10:	461a      	mov	r2, r3
    8d12:	7ffb      	ldrb	r3, [r7, #31]
    8d14:	2100      	movs	r1, #0
    8d16:	4618      	mov	r0, r3
    8d18:	4b35      	ldr	r3, [pc, #212]	; (8df0 <_usb_d_dev_out_next+0x280>)
    8d1a:	4798      	blx	r3
    8d1c:	e029      	b.n	8d72 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    8d1e:	687b      	ldr	r3, [r7, #4]
    8d20:	8a1b      	ldrh	r3, [r3, #16]
    8d22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8d24:	429a      	cmp	r2, r3
    8d26:	d90f      	bls.n	8d48 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    8d28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    8d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8d2e:	d903      	bls.n	8d38 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    8d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8d34:	84fb      	strh	r3, [r7, #38]	; 0x26
    8d36:	e011      	b.n	8d5c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    8d38:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8d3a:	8a7b      	ldrh	r3, [r7, #18]
    8d3c:	4013      	ands	r3, r2
    8d3e:	b29b      	uxth	r3, r3
    8d40:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8d42:	1ad3      	subs	r3, r2, r3
    8d44:	84fb      	strh	r3, [r7, #38]	; 0x26
    8d46:	e009      	b.n	8d5c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    8d48:	687b      	ldr	r3, [r7, #4]
    8d4a:	8a1b      	ldrh	r3, [r3, #16]
    8d4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8d4e:	429a      	cmp	r2, r3
    8d50:	d204      	bcs.n	8d5c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    8d52:	687a      	ldr	r2, [r7, #4]
    8d54:	7cd3      	ldrb	r3, [r2, #19]
    8d56:	f043 0320 	orr.w	r3, r3, #32
    8d5a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8d5c:	687b      	ldr	r3, [r7, #4]
    8d5e:	681a      	ldr	r2, [r3, #0]
    8d60:	687b      	ldr	r3, [r7, #4]
    8d62:	689b      	ldr	r3, [r3, #8]
    8d64:	4413      	add	r3, r2
    8d66:	461a      	mov	r2, r3
    8d68:	7ffb      	ldrb	r3, [r7, #31]
    8d6a:	2100      	movs	r1, #0
    8d6c:	4618      	mov	r0, r3
    8d6e:	4b20      	ldr	r3, [pc, #128]	; (8df0 <_usb_d_dev_out_next+0x280>)
    8d70:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    8d72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8d74:	7ff8      	ldrb	r0, [r7, #31]
    8d76:	2300      	movs	r3, #0
    8d78:	2100      	movs	r1, #0
    8d7a:	4c1e      	ldr	r4, [pc, #120]	; (8df4 <_usb_d_dev_out_next+0x284>)
    8d7c:	47a0      	blx	r4
			goto _out_rx_exec;
    8d7e:	e01f      	b.n	8dc0 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    8d80:	7bfb      	ldrb	r3, [r7, #15]
    8d82:	2b00      	cmp	r3, #0
    8d84:	d006      	beq.n	8d94 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    8d86:	7ffb      	ldrb	r3, [r7, #31]
    8d88:	222d      	movs	r2, #45	; 0x2d
    8d8a:	4619      	mov	r1, r3
    8d8c:	6a38      	ldr	r0, [r7, #32]
    8d8e:	4b1a      	ldr	r3, [pc, #104]	; (8df8 <_usb_d_dev_out_next+0x288>)
    8d90:	4798      	blx	r3
    8d92:	e005      	b.n	8da0 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    8d94:	7ffb      	ldrb	r3, [r7, #31]
    8d96:	2225      	movs	r2, #37	; 0x25
    8d98:	4619      	mov	r1, r3
    8d9a:	6a38      	ldr	r0, [r7, #32]
    8d9c:	4b16      	ldr	r3, [pc, #88]	; (8df8 <_usb_d_dev_out_next+0x288>)
    8d9e:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    8da0:	7ffb      	ldrb	r3, [r7, #31]
    8da2:	2b00      	cmp	r3, #0
    8da4:	d107      	bne.n	8db6 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8da6:	687b      	ldr	r3, [r7, #4]
    8da8:	68db      	ldr	r3, [r3, #12]
    8daa:	461a      	mov	r2, r3
    8dac:	7ffb      	ldrb	r3, [r7, #31]
    8dae:	2100      	movs	r1, #0
    8db0:	4618      	mov	r0, r3
    8db2:	4b0f      	ldr	r3, [pc, #60]	; (8df0 <_usb_d_dev_out_next+0x280>)
    8db4:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8db6:	2100      	movs	r1, #0
    8db8:	6878      	ldr	r0, [r7, #4]
    8dba:	4b10      	ldr	r3, [pc, #64]	; (8dfc <_usb_d_dev_out_next+0x28c>)
    8dbc:	4798      	blx	r3
	return;
    8dbe:	e031      	b.n	8e24 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    8dc0:	78fb      	ldrb	r3, [r7, #3]
    8dc2:	f083 0301 	eor.w	r3, r3, #1
    8dc6:	b2db      	uxtb	r3, r3
    8dc8:	2b00      	cmp	r3, #0
    8dca:	d025      	beq.n	8e18 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    8dcc:	7bfb      	ldrb	r3, [r7, #15]
    8dce:	2b00      	cmp	r3, #0
    8dd0:	d018      	beq.n	8e04 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    8dd2:	7ffb      	ldrb	r3, [r7, #31]
    8dd4:	2101      	movs	r1, #1
    8dd6:	4618      	mov	r0, r3
    8dd8:	4b09      	ldr	r3, [pc, #36]	; (8e00 <_usb_d_dev_out_next+0x290>)
    8dda:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    8ddc:	232d      	movs	r3, #45	; 0x2d
    8dde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    8de2:	e012      	b.n	8e0a <_usb_d_dev_out_next+0x29a>
    8de4:	20000b70 	.word	0x20000b70
    8de8:	00008351 	.word	0x00008351
    8dec:	0000cc35 	.word	0x0000cc35
    8df0:	0000837d 	.word	0x0000837d
    8df4:	00008505 	.word	0x00008505
    8df8:	00007c5d 	.word	0x00007c5d
    8dfc:	00009c81 	.word	0x00009c81
    8e00:	00008545 	.word	0x00008545
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    8e04:	2325      	movs	r3, #37	; 0x25
    8e06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8e0a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    8e0e:	7ffb      	ldrb	r3, [r7, #31]
    8e10:	4619      	mov	r1, r3
    8e12:	6a38      	ldr	r0, [r7, #32]
    8e14:	4b05      	ldr	r3, [pc, #20]	; (8e2c <_usb_d_dev_out_next+0x2bc>)
    8e16:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    8e18:	7ffb      	ldrb	r3, [r7, #31]
    8e1a:	2201      	movs	r2, #1
    8e1c:	2100      	movs	r1, #0
    8e1e:	4618      	mov	r0, r3
    8e20:	4b03      	ldr	r3, [pc, #12]	; (8e30 <_usb_d_dev_out_next+0x2c0>)
    8e22:	4798      	blx	r3
}
    8e24:	372c      	adds	r7, #44	; 0x2c
    8e26:	46bd      	mov	sp, r7
    8e28:	bd90      	pop	{r4, r7, pc}
    8e2a:	bf00      	nop
    8e2c:	00007c31 	.word	0x00007c31
    8e30:	000085d5 	.word	0x000085d5

00008e34 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    8e34:	b580      	push	{r7, lr}
    8e36:	b084      	sub	sp, #16
    8e38:	af00      	add	r7, sp, #0
    8e3a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    8e3c:	687b      	ldr	r3, [r7, #4]
    8e3e:	7c9b      	ldrb	r3, [r3, #18]
    8e40:	f003 030f 	and.w	r3, r3, #15
    8e44:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8e46:	687b      	ldr	r3, [r7, #4]
    8e48:	7cdb      	ldrb	r3, [r3, #19]
    8e4a:	f003 0307 	and.w	r3, r3, #7
    8e4e:	b2db      	uxtb	r3, r3
    8e50:	2b01      	cmp	r3, #1
    8e52:	bf0c      	ite	eq
    8e54:	2301      	moveq	r3, #1
    8e56:	2300      	movne	r3, #0
    8e58:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    8e5a:	7bbb      	ldrb	r3, [r7, #14]
    8e5c:	f083 0301 	eor.w	r3, r3, #1
    8e60:	b2db      	uxtb	r3, r3
    8e62:	2b00      	cmp	r3, #0
    8e64:	d008      	beq.n	8e78 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    8e66:	7bfb      	ldrb	r3, [r7, #15]
    8e68:	4618      	mov	r0, r3
    8e6a:	4b20      	ldr	r3, [pc, #128]	; (8eec <_usb_d_dev_handle_setup+0xb8>)
    8e6c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    8e6e:	7bfb      	ldrb	r3, [r7, #15]
    8e70:	4618      	mov	r0, r3
    8e72:	4b1f      	ldr	r3, [pc, #124]	; (8ef0 <_usb_d_dev_handle_setup+0xbc>)
    8e74:	4798      	blx	r3
		return;
    8e76:	e036      	b.n	8ee6 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    8e78:	687b      	ldr	r3, [r7, #4]
    8e7a:	7cdb      	ldrb	r3, [r3, #19]
    8e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8e80:	b2db      	uxtb	r3, r3
    8e82:	2b00      	cmp	r3, #0
    8e84:	d010      	beq.n	8ea8 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    8e86:	687a      	ldr	r2, [r7, #4]
    8e88:	7cd3      	ldrb	r3, [r2, #19]
    8e8a:	f36f 1386 	bfc	r3, #6, #1
    8e8e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    8e90:	7bfb      	ldrb	r3, [r7, #15]
    8e92:	2200      	movs	r2, #0
    8e94:	2101      	movs	r1, #1
    8e96:	4618      	mov	r0, r3
    8e98:	4b16      	ldr	r3, [pc, #88]	; (8ef4 <_usb_d_dev_handle_setup+0xc0>)
    8e9a:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    8e9c:	7bfb      	ldrb	r3, [r7, #15]
    8e9e:	2200      	movs	r2, #0
    8ea0:	2100      	movs	r1, #0
    8ea2:	4618      	mov	r0, r3
    8ea4:	4b14      	ldr	r3, [pc, #80]	; (8ef8 <_usb_d_dev_handle_setup+0xc4>)
    8ea6:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    8ea8:	687a      	ldr	r2, [r7, #4]
    8eaa:	7cd3      	ldrb	r3, [r2, #19]
    8eac:	f36f 03c3 	bfc	r3, #3, #1
    8eb0:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    8eb2:	7bfb      	ldrb	r3, [r7, #15]
    8eb4:	2100      	movs	r1, #0
    8eb6:	4618      	mov	r0, r3
    8eb8:	4b10      	ldr	r3, [pc, #64]	; (8efc <_usb_d_dev_handle_setup+0xc8>)
    8eba:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    8ebc:	7bfb      	ldrb	r3, [r7, #15]
    8ebe:	2101      	movs	r1, #1
    8ec0:	4618      	mov	r0, r3
    8ec2:	4b0e      	ldr	r3, [pc, #56]	; (8efc <_usb_d_dev_handle_setup+0xc8>)
    8ec4:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    8ec6:	7bfb      	ldrb	r3, [r7, #15]
    8ec8:	216f      	movs	r1, #111	; 0x6f
    8eca:	4618      	mov	r0, r3
    8ecc:	4b0c      	ldr	r3, [pc, #48]	; (8f00 <_usb_d_dev_handle_setup+0xcc>)
    8ece:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    8ed0:	7bfb      	ldrb	r3, [r7, #15]
    8ed2:	216f      	movs	r1, #111	; 0x6f
    8ed4:	4618      	mov	r0, r3
    8ed6:	4b0b      	ldr	r3, [pc, #44]	; (8f04 <_usb_d_dev_handle_setup+0xd0>)
    8ed8:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    8eda:	4b0b      	ldr	r3, [pc, #44]	; (8f08 <_usb_d_dev_handle_setup+0xd4>)
    8edc:	689b      	ldr	r3, [r3, #8]
    8ede:	687a      	ldr	r2, [r7, #4]
    8ee0:	7c92      	ldrb	r2, [r2, #18]
    8ee2:	4610      	mov	r0, r2
    8ee4:	4798      	blx	r3
}
    8ee6:	3710      	adds	r7, #16
    8ee8:	46bd      	mov	sp, r7
    8eea:	bd80      	pop	{r7, pc}
    8eec:	000082d9 	.word	0x000082d9
    8ef0:	00008285 	.word	0x00008285
    8ef4:	0000857d 	.word	0x0000857d
    8ef8:	000085d5 	.word	0x000085d5
    8efc:	00008545 	.word	0x00008545
    8f00:	00008085 	.word	0x00008085
    8f04:	000080d5 	.word	0x000080d5
    8f08:	20000aa8 	.word	0x20000aa8

00008f0c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    8f0c:	b580      	push	{r7, lr}
    8f0e:	b084      	sub	sp, #16
    8f10:	af00      	add	r7, sp, #0
    8f12:	6078      	str	r0, [r7, #4]
    8f14:	460b      	mov	r3, r1
    8f16:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8f18:	687b      	ldr	r3, [r7, #4]
    8f1a:	7c9b      	ldrb	r3, [r3, #18]
    8f1c:	f003 030f 	and.w	r3, r3, #15
    8f20:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    8f22:	78f9      	ldrb	r1, [r7, #3]
    8f24:	7bfb      	ldrb	r3, [r7, #15]
    8f26:	2200      	movs	r2, #0
    8f28:	4618      	mov	r0, r3
    8f2a:	4b07      	ldr	r3, [pc, #28]	; (8f48 <_usb_d_dev_handle_stall+0x3c>)
    8f2c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    8f2e:	4b07      	ldr	r3, [pc, #28]	; (8f4c <_usb_d_dev_handle_stall+0x40>)
    8f30:	691b      	ldr	r3, [r3, #16]
    8f32:	687a      	ldr	r2, [r7, #4]
    8f34:	7c90      	ldrb	r0, [r2, #18]
    8f36:	687a      	ldr	r2, [r7, #4]
    8f38:	6892      	ldr	r2, [r2, #8]
    8f3a:	2101      	movs	r1, #1
    8f3c:	4798      	blx	r3
}
    8f3e:	bf00      	nop
    8f40:	3710      	adds	r7, #16
    8f42:	46bd      	mov	sp, r7
    8f44:	bd80      	pop	{r7, pc}
    8f46:	bf00      	nop
    8f48:	00008239 	.word	0x00008239
    8f4c:	20000aa8 	.word	0x20000aa8

00008f50 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    8f50:	b580      	push	{r7, lr}
    8f52:	b088      	sub	sp, #32
    8f54:	af00      	add	r7, sp, #0
    8f56:	6078      	str	r0, [r7, #4]
    8f58:	460b      	mov	r3, r1
    8f5a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    8f5c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8f60:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    8f62:	687b      	ldr	r3, [r7, #4]
    8f64:	7c9b      	ldrb	r3, [r3, #18]
    8f66:	f003 030f 	and.w	r3, r3, #15
    8f6a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    8f6c:	4b61      	ldr	r3, [pc, #388]	; (90f4 <_usb_d_dev_handle_trfail+0x1a4>)
    8f6e:	881b      	ldrh	r3, [r3, #0]
    8f70:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    8f72:	7efb      	ldrb	r3, [r7, #27]
    8f74:	015b      	lsls	r3, r3, #5
    8f76:	4a60      	ldr	r2, [pc, #384]	; (90f8 <_usb_d_dev_handle_trfail+0x1a8>)
    8f78:	4413      	add	r3, r2
    8f7a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    8f7c:	78fb      	ldrb	r3, [r7, #3]
    8f7e:	2b00      	cmp	r3, #0
    8f80:	d006      	beq.n	8f90 <_usb_d_dev_handle_trfail+0x40>
    8f82:	7efb      	ldrb	r3, [r7, #27]
    8f84:	4619      	mov	r1, r3
    8f86:	69f8      	ldr	r0, [r7, #28]
    8f88:	4b5c      	ldr	r3, [pc, #368]	; (90fc <_usb_d_dev_handle_trfail+0x1ac>)
    8f8a:	4798      	blx	r3
    8f8c:	4603      	mov	r3, r0
    8f8e:	e005      	b.n	8f9c <_usb_d_dev_handle_trfail+0x4c>
    8f90:	7efb      	ldrb	r3, [r7, #27]
    8f92:	4619      	mov	r1, r3
    8f94:	69f8      	ldr	r0, [r7, #28]
    8f96:	4b5a      	ldr	r3, [pc, #360]	; (9100 <_usb_d_dev_handle_trfail+0x1b0>)
    8f98:	4798      	blx	r3
    8f9a:	4603      	mov	r3, r0
    8f9c:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8f9e:	687b      	ldr	r3, [r7, #4]
    8fa0:	7cdb      	ldrb	r3, [r3, #19]
    8fa2:	f003 0307 	and.w	r3, r3, #7
    8fa6:	b2db      	uxtb	r3, r3
    8fa8:	2b01      	cmp	r3, #1
    8faa:	bf0c      	ite	eq
    8fac:	2301      	moveq	r3, #1
    8fae:	2300      	movne	r3, #0
    8fb0:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    8fb2:	78fb      	ldrb	r3, [r7, #3]
    8fb4:	011b      	lsls	r3, r3, #4
    8fb6:	697a      	ldr	r2, [r7, #20]
    8fb8:	4413      	add	r3, r2
    8fba:	7a9b      	ldrb	r3, [r3, #10]
    8fbc:	b2db      	uxtb	r3, r3
    8fbe:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    8fc0:	7cfb      	ldrb	r3, [r7, #19]
    8fc2:	2b02      	cmp	r3, #2
    8fc4:	d12f      	bne.n	9026 <_usb_d_dev_handle_trfail+0xd6>
    8fc6:	7b3b      	ldrb	r3, [r7, #12]
    8fc8:	f003 0301 	and.w	r3, r3, #1
    8fcc:	b2db      	uxtb	r3, r3
    8fce:	2b00      	cmp	r3, #0
    8fd0:	d029      	beq.n	9026 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    8fd2:	78fb      	ldrb	r3, [r7, #3]
    8fd4:	011b      	lsls	r3, r3, #4
    8fd6:	697a      	ldr	r2, [r7, #20]
    8fd8:	441a      	add	r2, r3
    8fda:	7a93      	ldrb	r3, [r2, #10]
    8fdc:	f36f 0300 	bfc	r3, #0, #1
    8fe0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8fe2:	78fb      	ldrb	r3, [r7, #3]
    8fe4:	f107 0220 	add.w	r2, r7, #32
    8fe8:	4413      	add	r3, r2
    8fea:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8fee:	7efb      	ldrb	r3, [r7, #27]
    8ff0:	4619      	mov	r1, r3
    8ff2:	69f8      	ldr	r0, [r7, #28]
    8ff4:	4b43      	ldr	r3, [pc, #268]	; (9104 <_usb_d_dev_handle_trfail+0x1b4>)
    8ff6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    8ff8:	78fb      	ldrb	r3, [r7, #3]
    8ffa:	f107 0220 	add.w	r2, r7, #32
    8ffe:	4413      	add	r3, r2
    9000:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9004:	7efb      	ldrb	r3, [r7, #27]
    9006:	4619      	mov	r1, r3
    9008:	69f8      	ldr	r0, [r7, #28]
    900a:	4b3f      	ldr	r3, [pc, #252]	; (9108 <_usb_d_dev_handle_trfail+0x1b8>)
    900c:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    900e:	78fb      	ldrb	r3, [r7, #3]
    9010:	2b00      	cmp	r3, #0
    9012:	bf14      	ite	ne
    9014:	2301      	movne	r3, #1
    9016:	2300      	moveq	r3, #0
    9018:	b2db      	uxtb	r3, r3
    901a:	2204      	movs	r2, #4
    901c:	4619      	mov	r1, r3
    901e:	6878      	ldr	r0, [r7, #4]
    9020:	4b3a      	ldr	r3, [pc, #232]	; (910c <_usb_d_dev_handle_trfail+0x1bc>)
    9022:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9024:	e062      	b.n	90ec <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9026:	7b3b      	ldrb	r3, [r7, #12]
    9028:	f003 0302 	and.w	r3, r3, #2
    902c:	b2db      	uxtb	r3, r3
    902e:	2b00      	cmp	r3, #0
    9030:	d040      	beq.n	90b4 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9032:	78fb      	ldrb	r3, [r7, #3]
    9034:	011b      	lsls	r3, r3, #4
    9036:	697a      	ldr	r2, [r7, #20]
    9038:	441a      	add	r2, r3
    903a:	7a93      	ldrb	r3, [r2, #10]
    903c:	f36f 0341 	bfc	r3, #1, #1
    9040:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9042:	78fb      	ldrb	r3, [r7, #3]
    9044:	f107 0220 	add.w	r2, r7, #32
    9048:	4413      	add	r3, r2
    904a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    904e:	7efb      	ldrb	r3, [r7, #27]
    9050:	4619      	mov	r1, r3
    9052:	69f8      	ldr	r0, [r7, #28]
    9054:	4b2b      	ldr	r3, [pc, #172]	; (9104 <_usb_d_dev_handle_trfail+0x1b4>)
    9056:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9058:	78fb      	ldrb	r3, [r7, #3]
    905a:	f107 0220 	add.w	r2, r7, #32
    905e:	4413      	add	r3, r2
    9060:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9064:	7efb      	ldrb	r3, [r7, #27]
    9066:	4619      	mov	r1, r3
    9068:	69f8      	ldr	r0, [r7, #28]
    906a:	4b27      	ldr	r3, [pc, #156]	; (9108 <_usb_d_dev_handle_trfail+0x1b8>)
    906c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    906e:	7cbb      	ldrb	r3, [r7, #18]
    9070:	2b00      	cmp	r3, #0
    9072:	d03b      	beq.n	90ec <_usb_d_dev_handle_trfail+0x19c>
    9074:	687b      	ldr	r3, [r7, #4]
    9076:	7cdb      	ldrb	r3, [r3, #19]
    9078:	f003 0340 	and.w	r3, r3, #64	; 0x40
    907c:	b2db      	uxtb	r3, r3
    907e:	2b00      	cmp	r3, #0
    9080:	d034      	beq.n	90ec <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9082:	687b      	ldr	r3, [r7, #4]
    9084:	7cdb      	ldrb	r3, [r3, #19]
    9086:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    908a:	b2db      	uxtb	r3, r3
    908c:	461a      	mov	r2, r3
    908e:	78fb      	ldrb	r3, [r7, #3]
    9090:	4293      	cmp	r3, r2
    9092:	d02b      	beq.n	90ec <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9094:	687b      	ldr	r3, [r7, #4]
    9096:	7cdb      	ldrb	r3, [r3, #19]
    9098:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    909c:	b2db      	uxtb	r3, r3
    909e:	2b00      	cmp	r3, #0
    90a0:	bf14      	ite	ne
    90a2:	2301      	movne	r3, #1
    90a4:	2300      	moveq	r3, #0
    90a6:	b2db      	uxtb	r3, r3
    90a8:	2200      	movs	r2, #0
    90aa:	4619      	mov	r1, r3
    90ac:	6878      	ldr	r0, [r7, #4]
    90ae:	4b17      	ldr	r3, [pc, #92]	; (910c <_usb_d_dev_handle_trfail+0x1bc>)
    90b0:	4798      	blx	r3
}
    90b2:	e01b      	b.n	90ec <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    90b4:	78fa      	ldrb	r2, [r7, #3]
    90b6:	7efb      	ldrb	r3, [r7, #27]
    90b8:	4611      	mov	r1, r2
    90ba:	4618      	mov	r0, r3
    90bc:	4b14      	ldr	r3, [pc, #80]	; (9110 <_usb_d_dev_handle_trfail+0x1c0>)
    90be:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    90c0:	78fb      	ldrb	r3, [r7, #3]
    90c2:	f107 0220 	add.w	r2, r7, #32
    90c6:	4413      	add	r3, r2
    90c8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    90cc:	7efb      	ldrb	r3, [r7, #27]
    90ce:	4619      	mov	r1, r3
    90d0:	69f8      	ldr	r0, [r7, #28]
    90d2:	4b0c      	ldr	r3, [pc, #48]	; (9104 <_usb_d_dev_handle_trfail+0x1b4>)
    90d4:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    90d6:	78fb      	ldrb	r3, [r7, #3]
    90d8:	f107 0220 	add.w	r2, r7, #32
    90dc:	4413      	add	r3, r2
    90de:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    90e2:	7efb      	ldrb	r3, [r7, #27]
    90e4:	4619      	mov	r1, r3
    90e6:	69f8      	ldr	r0, [r7, #28]
    90e8:	4b07      	ldr	r3, [pc, #28]	; (9108 <_usb_d_dev_handle_trfail+0x1b8>)
    90ea:	4798      	blx	r3
}
    90ec:	bf00      	nop
    90ee:	3720      	adds	r7, #32
    90f0:	46bd      	mov	sp, r7
    90f2:	bd80      	pop	{r7, pc}
    90f4:	0000d2b8 	.word	0x0000d2b8
    90f8:	20000b70 	.word	0x20000b70
    90fc:	00007cb9 	.word	0x00007cb9
    9100:	00007c89 	.word	0x00007c89
    9104:	00007b5d 	.word	0x00007b5d
    9108:	00007c5d 	.word	0x00007c5d
    910c:	00009cc9 	.word	0x00009cc9
    9110:	00008545 	.word	0x00008545

00009114 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9114:	b580      	push	{r7, lr}
    9116:	b082      	sub	sp, #8
    9118:	af00      	add	r7, sp, #0
    911a:	6078      	str	r0, [r7, #4]
    911c:	460b      	mov	r3, r1
    911e:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9120:	78fb      	ldrb	r3, [r7, #3]
    9122:	f003 0310 	and.w	r3, r3, #16
    9126:	2b00      	cmp	r3, #0
    9128:	d003      	beq.n	9132 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    912a:	6878      	ldr	r0, [r7, #4]
    912c:	4b0c      	ldr	r3, [pc, #48]	; (9160 <_usb_d_dev_trans_setup_isr+0x4c>)
    912e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9130:	e012      	b.n	9158 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9132:	78fb      	ldrb	r3, [r7, #3]
    9134:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9138:	2b00      	cmp	r3, #0
    913a:	d004      	beq.n	9146 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    913c:	2101      	movs	r1, #1
    913e:	6878      	ldr	r0, [r7, #4]
    9140:	4b08      	ldr	r3, [pc, #32]	; (9164 <_usb_d_dev_trans_setup_isr+0x50>)
    9142:	4798      	blx	r3
}
    9144:	e008      	b.n	9158 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9146:	78fb      	ldrb	r3, [r7, #3]
    9148:	f003 0320 	and.w	r3, r3, #32
    914c:	2b00      	cmp	r3, #0
    914e:	d003      	beq.n	9158 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9150:	2100      	movs	r1, #0
    9152:	6878      	ldr	r0, [r7, #4]
    9154:	4b03      	ldr	r3, [pc, #12]	; (9164 <_usb_d_dev_trans_setup_isr+0x50>)
    9156:	4798      	blx	r3
}
    9158:	bf00      	nop
    915a:	3708      	adds	r7, #8
    915c:	46bd      	mov	sp, r7
    915e:	bd80      	pop	{r7, pc}
    9160:	00008e35 	.word	0x00008e35
    9164:	00008f0d 	.word	0x00008f0d

00009168 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9168:	b580      	push	{r7, lr}
    916a:	b082      	sub	sp, #8
    916c:	af00      	add	r7, sp, #0
    916e:	6078      	str	r0, [r7, #4]
    9170:	460b      	mov	r3, r1
    9172:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9174:	78fb      	ldrb	r3, [r7, #3]
    9176:	f003 0340 	and.w	r3, r3, #64	; 0x40
    917a:	2b00      	cmp	r3, #0
    917c:	d004      	beq.n	9188 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    917e:	2101      	movs	r1, #1
    9180:	6878      	ldr	r0, [r7, #4]
    9182:	4b1a      	ldr	r3, [pc, #104]	; (91ec <_usb_d_dev_trans_in_isr+0x84>)
    9184:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9186:	e02c      	b.n	91e2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9188:	78fb      	ldrb	r3, [r7, #3]
    918a:	f003 0308 	and.w	r3, r3, #8
    918e:	2b00      	cmp	r3, #0
    9190:	d004      	beq.n	919c <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9192:	2101      	movs	r1, #1
    9194:	6878      	ldr	r0, [r7, #4]
    9196:	4b16      	ldr	r3, [pc, #88]	; (91f0 <_usb_d_dev_trans_in_isr+0x88>)
    9198:	4798      	blx	r3
}
    919a:	e022      	b.n	91e2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    919c:	78fb      	ldrb	r3, [r7, #3]
    919e:	f003 0302 	and.w	r3, r3, #2
    91a2:	2b00      	cmp	r3, #0
    91a4:	d004      	beq.n	91b0 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    91a6:	2101      	movs	r1, #1
    91a8:	6878      	ldr	r0, [r7, #4]
    91aa:	4b12      	ldr	r3, [pc, #72]	; (91f4 <_usb_d_dev_trans_in_isr+0x8c>)
    91ac:	4798      	blx	r3
}
    91ae:	e018      	b.n	91e2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    91b0:	687b      	ldr	r3, [r7, #4]
    91b2:	7cdb      	ldrb	r3, [r3, #19]
    91b4:	f003 0307 	and.w	r3, r3, #7
    91b8:	b2db      	uxtb	r3, r3
    91ba:	2b01      	cmp	r3, #1
    91bc:	d111      	bne.n	91e2 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    91be:	78fb      	ldrb	r3, [r7, #3]
    91c0:	f003 0304 	and.w	r3, r3, #4
    91c4:	2b00      	cmp	r3, #0
    91c6:	d004      	beq.n	91d2 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    91c8:	2100      	movs	r1, #0
    91ca:	6878      	ldr	r0, [r7, #4]
    91cc:	4b08      	ldr	r3, [pc, #32]	; (91f0 <_usb_d_dev_trans_in_isr+0x88>)
    91ce:	4798      	blx	r3
}
    91d0:	e007      	b.n	91e2 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    91d2:	78fb      	ldrb	r3, [r7, #3]
    91d4:	f003 0310 	and.w	r3, r3, #16
    91d8:	2b00      	cmp	r3, #0
    91da:	d002      	beq.n	91e2 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    91dc:	6878      	ldr	r0, [r7, #4]
    91de:	4b06      	ldr	r3, [pc, #24]	; (91f8 <_usb_d_dev_trans_in_isr+0x90>)
    91e0:	4798      	blx	r3
}
    91e2:	bf00      	nop
    91e4:	3708      	adds	r7, #8
    91e6:	46bd      	mov	sp, r7
    91e8:	bd80      	pop	{r7, pc}
    91ea:	bf00      	nop
    91ec:	00008f0d 	.word	0x00008f0d
    91f0:	00008f51 	.word	0x00008f51
    91f4:	00008959 	.word	0x00008959
    91f8:	00008e35 	.word	0x00008e35

000091fc <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    91fc:	b580      	push	{r7, lr}
    91fe:	b082      	sub	sp, #8
    9200:	af00      	add	r7, sp, #0
    9202:	6078      	str	r0, [r7, #4]
    9204:	460b      	mov	r3, r1
    9206:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9208:	78fb      	ldrb	r3, [r7, #3]
    920a:	f003 0320 	and.w	r3, r3, #32
    920e:	2b00      	cmp	r3, #0
    9210:	d004      	beq.n	921c <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9212:	2100      	movs	r1, #0
    9214:	6878      	ldr	r0, [r7, #4]
    9216:	4b1a      	ldr	r3, [pc, #104]	; (9280 <_usb_d_dev_trans_out_isr+0x84>)
    9218:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    921a:	e02c      	b.n	9276 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    921c:	78fb      	ldrb	r3, [r7, #3]
    921e:	f003 0304 	and.w	r3, r3, #4
    9222:	2b00      	cmp	r3, #0
    9224:	d004      	beq.n	9230 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9226:	2100      	movs	r1, #0
    9228:	6878      	ldr	r0, [r7, #4]
    922a:	4b16      	ldr	r3, [pc, #88]	; (9284 <_usb_d_dev_trans_out_isr+0x88>)
    922c:	4798      	blx	r3
}
    922e:	e022      	b.n	9276 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9230:	78fb      	ldrb	r3, [r7, #3]
    9232:	f003 0301 	and.w	r3, r3, #1
    9236:	2b00      	cmp	r3, #0
    9238:	d004      	beq.n	9244 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    923a:	2101      	movs	r1, #1
    923c:	6878      	ldr	r0, [r7, #4]
    923e:	4b12      	ldr	r3, [pc, #72]	; (9288 <_usb_d_dev_trans_out_isr+0x8c>)
    9240:	4798      	blx	r3
}
    9242:	e018      	b.n	9276 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9244:	687b      	ldr	r3, [r7, #4]
    9246:	7cdb      	ldrb	r3, [r3, #19]
    9248:	f003 0307 	and.w	r3, r3, #7
    924c:	b2db      	uxtb	r3, r3
    924e:	2b01      	cmp	r3, #1
    9250:	d111      	bne.n	9276 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9252:	78fb      	ldrb	r3, [r7, #3]
    9254:	f003 0308 	and.w	r3, r3, #8
    9258:	2b00      	cmp	r3, #0
    925a:	d004      	beq.n	9266 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    925c:	2101      	movs	r1, #1
    925e:	6878      	ldr	r0, [r7, #4]
    9260:	4b08      	ldr	r3, [pc, #32]	; (9284 <_usb_d_dev_trans_out_isr+0x88>)
    9262:	4798      	blx	r3
}
    9264:	e007      	b.n	9276 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9266:	78fb      	ldrb	r3, [r7, #3]
    9268:	f003 0310 	and.w	r3, r3, #16
    926c:	2b00      	cmp	r3, #0
    926e:	d002      	beq.n	9276 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9270:	6878      	ldr	r0, [r7, #4]
    9272:	4b06      	ldr	r3, [pc, #24]	; (928c <_usb_d_dev_trans_out_isr+0x90>)
    9274:	4798      	blx	r3
}
    9276:	bf00      	nop
    9278:	3708      	adds	r7, #8
    927a:	46bd      	mov	sp, r7
    927c:	bd80      	pop	{r7, pc}
    927e:	bf00      	nop
    9280:	00008f0d 	.word	0x00008f0d
    9284:	00008f51 	.word	0x00008f51
    9288:	00008b71 	.word	0x00008b71
    928c:	00008e35 	.word	0x00008e35

00009290 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9290:	b580      	push	{r7, lr}
    9292:	b084      	sub	sp, #16
    9294:	af00      	add	r7, sp, #0
    9296:	6078      	str	r0, [r7, #4]
    9298:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    929a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    929e:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    92a0:	683b      	ldr	r3, [r7, #0]
    92a2:	7c9b      	ldrb	r3, [r3, #18]
    92a4:	f003 030f 	and.w	r3, r3, #15
    92a8:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    92aa:	7afb      	ldrb	r3, [r7, #11]
    92ac:	2201      	movs	r2, #1
    92ae:	409a      	lsls	r2, r3
    92b0:	687b      	ldr	r3, [r7, #4]
    92b2:	4013      	ands	r3, r2
    92b4:	2b00      	cmp	r3, #0
    92b6:	d03d      	beq.n	9334 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    92b8:	7afb      	ldrb	r3, [r7, #11]
    92ba:	68fa      	ldr	r2, [r7, #12]
    92bc:	3308      	adds	r3, #8
    92be:	015b      	lsls	r3, r3, #5
    92c0:	4413      	add	r3, r2
    92c2:	3307      	adds	r3, #7
    92c4:	781b      	ldrb	r3, [r3, #0]
    92c6:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    92c8:	7afb      	ldrb	r3, [r7, #11]
    92ca:	68fa      	ldr	r2, [r7, #12]
    92cc:	015b      	lsls	r3, r3, #5
    92ce:	4413      	add	r3, r2
    92d0:	f203 1309 	addw	r3, r3, #265	; 0x109
    92d4:	781b      	ldrb	r3, [r3, #0]
    92d6:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    92d8:	7aba      	ldrb	r2, [r7, #10]
    92da:	7a7b      	ldrb	r3, [r7, #9]
    92dc:	4013      	ands	r3, r2
    92de:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    92e0:	7abb      	ldrb	r3, [r7, #10]
    92e2:	2b00      	cmp	r3, #0
    92e4:	d027      	beq.n	9336 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    92e6:	683b      	ldr	r3, [r7, #0]
    92e8:	7cdb      	ldrb	r3, [r3, #19]
    92ea:	f003 0307 	and.w	r3, r3, #7
    92ee:	b2db      	uxtb	r3, r3
    92f0:	2b01      	cmp	r3, #1
    92f2:	d10c      	bne.n	930e <_usb_d_dev_handle_eps+0x7e>
    92f4:	683b      	ldr	r3, [r7, #0]
    92f6:	7cdb      	ldrb	r3, [r3, #19]
    92f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    92fc:	b2db      	uxtb	r3, r3
    92fe:	2b00      	cmp	r3, #0
    9300:	d105      	bne.n	930e <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9302:	7abb      	ldrb	r3, [r7, #10]
    9304:	4619      	mov	r1, r3
    9306:	6838      	ldr	r0, [r7, #0]
    9308:	4b0c      	ldr	r3, [pc, #48]	; (933c <_usb_d_dev_handle_eps+0xac>)
    930a:	4798      	blx	r3
    930c:	e013      	b.n	9336 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    930e:	683b      	ldr	r3, [r7, #0]
    9310:	7cdb      	ldrb	r3, [r3, #19]
    9312:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9316:	b2db      	uxtb	r3, r3
    9318:	2b00      	cmp	r3, #0
    931a:	d005      	beq.n	9328 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    931c:	7abb      	ldrb	r3, [r7, #10]
    931e:	4619      	mov	r1, r3
    9320:	6838      	ldr	r0, [r7, #0]
    9322:	4b07      	ldr	r3, [pc, #28]	; (9340 <_usb_d_dev_handle_eps+0xb0>)
    9324:	4798      	blx	r3
    9326:	e006      	b.n	9336 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9328:	7abb      	ldrb	r3, [r7, #10]
    932a:	4619      	mov	r1, r3
    932c:	6838      	ldr	r0, [r7, #0]
    932e:	4b05      	ldr	r3, [pc, #20]	; (9344 <_usb_d_dev_handle_eps+0xb4>)
    9330:	4798      	blx	r3
    9332:	e000      	b.n	9336 <_usb_d_dev_handle_eps+0xa6>
		return;
    9334:	bf00      	nop
		}
	}
}
    9336:	3710      	adds	r7, #16
    9338:	46bd      	mov	sp, r7
    933a:	bd80      	pop	{r7, pc}
    933c:	00009115 	.word	0x00009115
    9340:	00009169 	.word	0x00009169
    9344:	000091fd 	.word	0x000091fd

00009348 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9348:	b580      	push	{r7, lr}
    934a:	b084      	sub	sp, #16
    934c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    934e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9352:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9354:	68bb      	ldr	r3, [r7, #8]
    9356:	8c1b      	ldrh	r3, [r3, #32]
    9358:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    935a:	88fb      	ldrh	r3, [r7, #6]
    935c:	2b00      	cmp	r3, #0
    935e:	d104      	bne.n	936a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9360:	4b13      	ldr	r3, [pc, #76]	; (93b0 <_usb_d_dev_handler+0x68>)
    9362:	4798      	blx	r3
    9364:	4603      	mov	r3, r0
    9366:	2b00      	cmp	r3, #0
    9368:	d11e      	bne.n	93a8 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    936a:	2300      	movs	r3, #0
    936c:	73fb      	strb	r3, [r7, #15]
    936e:	e017      	b.n	93a0 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9370:	7bfa      	ldrb	r2, [r7, #15]
    9372:	4613      	mov	r3, r2
    9374:	009b      	lsls	r3, r3, #2
    9376:	4413      	add	r3, r2
    9378:	009b      	lsls	r3, r3, #2
    937a:	3310      	adds	r3, #16
    937c:	4a0d      	ldr	r2, [pc, #52]	; (93b4 <_usb_d_dev_handler+0x6c>)
    937e:	4413      	add	r3, r2
    9380:	3304      	adds	r3, #4
    9382:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9384:	683b      	ldr	r3, [r7, #0]
    9386:	7c9b      	ldrb	r3, [r3, #18]
    9388:	2bff      	cmp	r3, #255	; 0xff
    938a:	d005      	beq.n	9398 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    938c:	88fb      	ldrh	r3, [r7, #6]
    938e:	6839      	ldr	r1, [r7, #0]
    9390:	4618      	mov	r0, r3
    9392:	4b09      	ldr	r3, [pc, #36]	; (93b8 <_usb_d_dev_handler+0x70>)
    9394:	4798      	blx	r3
    9396:	e000      	b.n	939a <_usb_d_dev_handler+0x52>
			continue;
    9398:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    939a:	7bfb      	ldrb	r3, [r7, #15]
    939c:	3301      	adds	r3, #1
    939e:	73fb      	strb	r3, [r7, #15]
    93a0:	7bfb      	ldrb	r3, [r7, #15]
    93a2:	2b08      	cmp	r3, #8
    93a4:	d9e4      	bls.n	9370 <_usb_d_dev_handler+0x28>
    93a6:	e000      	b.n	93aa <_usb_d_dev_handler+0x62>
			return;
    93a8:	bf00      	nop
	}
}
    93aa:	3710      	adds	r7, #16
    93ac:	46bd      	mov	sp, r7
    93ae:	bd80      	pop	{r7, pc}
    93b0:	000088a1 	.word	0x000088a1
    93b4:	20000aa8 	.word	0x20000aa8
    93b8:	00009291 	.word	0x00009291

000093bc <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    93bc:	b580      	push	{r7, lr}
    93be:	b082      	sub	sp, #8
    93c0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    93c2:	2300      	movs	r3, #0
    93c4:	71fb      	strb	r3, [r7, #7]
    93c6:	e023      	b.n	9410 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    93c8:	79fa      	ldrb	r2, [r7, #7]
    93ca:	4613      	mov	r3, r2
    93cc:	009b      	lsls	r3, r3, #2
    93ce:	4413      	add	r3, r2
    93d0:	009b      	lsls	r3, r3, #2
    93d2:	3310      	adds	r3, #16
    93d4:	4a14      	ldr	r2, [pc, #80]	; (9428 <_usb_d_dev_reset_epts+0x6c>)
    93d6:	4413      	add	r3, r2
    93d8:	3304      	adds	r3, #4
    93da:	2103      	movs	r1, #3
    93dc:	4618      	mov	r0, r3
    93de:	4b13      	ldr	r3, [pc, #76]	; (942c <_usb_d_dev_reset_epts+0x70>)
    93e0:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    93e2:	79fa      	ldrb	r2, [r7, #7]
    93e4:	4910      	ldr	r1, [pc, #64]	; (9428 <_usb_d_dev_reset_epts+0x6c>)
    93e6:	4613      	mov	r3, r2
    93e8:	009b      	lsls	r3, r3, #2
    93ea:	4413      	add	r3, r2
    93ec:	009b      	lsls	r3, r3, #2
    93ee:	440b      	add	r3, r1
    93f0:	3326      	adds	r3, #38	; 0x26
    93f2:	22ff      	movs	r2, #255	; 0xff
    93f4:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    93f6:	79fa      	ldrb	r2, [r7, #7]
    93f8:	490b      	ldr	r1, [pc, #44]	; (9428 <_usb_d_dev_reset_epts+0x6c>)
    93fa:	4613      	mov	r3, r2
    93fc:	009b      	lsls	r3, r3, #2
    93fe:	4413      	add	r3, r2
    9400:	009b      	lsls	r3, r3, #2
    9402:	440b      	add	r3, r1
    9404:	3327      	adds	r3, #39	; 0x27
    9406:	2200      	movs	r2, #0
    9408:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    940a:	79fb      	ldrb	r3, [r7, #7]
    940c:	3301      	adds	r3, #1
    940e:	71fb      	strb	r3, [r7, #7]
    9410:	79fb      	ldrb	r3, [r7, #7]
    9412:	2b08      	cmp	r3, #8
    9414:	d9d8      	bls.n	93c8 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9416:	22a0      	movs	r2, #160	; 0xa0
    9418:	2100      	movs	r1, #0
    941a:	4805      	ldr	r0, [pc, #20]	; (9430 <_usb_d_dev_reset_epts+0x74>)
    941c:	4b05      	ldr	r3, [pc, #20]	; (9434 <_usb_d_dev_reset_epts+0x78>)
    941e:	4798      	blx	r3
}
    9420:	bf00      	nop
    9422:	3708      	adds	r7, #8
    9424:	46bd      	mov	sp, r7
    9426:	bd80      	pop	{r7, pc}
    9428:	20000aa8 	.word	0x20000aa8
    942c:	00009c81 	.word	0x00009c81
    9430:	20000b70 	.word	0x20000b70
    9434:	0000cd69 	.word	0x0000cd69

00009438 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9438:	b580      	push	{r7, lr}
    943a:	b084      	sub	sp, #16
    943c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    943e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9442:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9444:	2301      	movs	r3, #1
    9446:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9448:	2304      	movs	r3, #4
    944a:	713b      	strb	r3, [r7, #4]
    944c:	2300      	movs	r3, #0
    944e:	717b      	strb	r3, [r7, #5]
    9450:	2300      	movs	r3, #0
    9452:	71bb      	strb	r3, [r7, #6]
    9454:	2300      	movs	r3, #0
    9456:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9458:	2101      	movs	r1, #1
    945a:	68f8      	ldr	r0, [r7, #12]
    945c:	4b26      	ldr	r3, [pc, #152]	; (94f8 <_usb_d_dev_init+0xc0>)
    945e:	4798      	blx	r3
    9460:	4603      	mov	r3, r0
    9462:	f083 0301 	eor.w	r3, r3, #1
    9466:	b2db      	uxtb	r3, r3
    9468:	2b00      	cmp	r3, #0
    946a:	d011      	beq.n	9490 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    946c:	2102      	movs	r1, #2
    946e:	68f8      	ldr	r0, [r7, #12]
    9470:	4b22      	ldr	r3, [pc, #136]	; (94fc <_usb_d_dev_init+0xc4>)
    9472:	4798      	blx	r3
    9474:	4603      	mov	r3, r0
    9476:	2b00      	cmp	r3, #0
    9478:	d006      	beq.n	9488 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    947a:	68f8      	ldr	r0, [r7, #12]
    947c:	4b20      	ldr	r3, [pc, #128]	; (9500 <_usb_d_dev_init+0xc8>)
    947e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9480:	2102      	movs	r1, #2
    9482:	68f8      	ldr	r0, [r7, #12]
    9484:	4b1f      	ldr	r3, [pc, #124]	; (9504 <_usb_d_dev_init+0xcc>)
    9486:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9488:	2101      	movs	r1, #1
    948a:	68f8      	ldr	r0, [r7, #12]
    948c:	4b1e      	ldr	r3, [pc, #120]	; (9508 <_usb_d_dev_init+0xd0>)
    948e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9490:	2101      	movs	r1, #1
    9492:	68f8      	ldr	r0, [r7, #12]
    9494:	4b1b      	ldr	r3, [pc, #108]	; (9504 <_usb_d_dev_init+0xcc>)
    9496:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9498:	4b1c      	ldr	r3, [pc, #112]	; (950c <_usb_d_dev_init+0xd4>)
    949a:	4a1d      	ldr	r2, [pc, #116]	; (9510 <_usb_d_dev_init+0xd8>)
    949c:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    949e:	4b1b      	ldr	r3, [pc, #108]	; (950c <_usb_d_dev_init+0xd4>)
    94a0:	4a1b      	ldr	r2, [pc, #108]	; (9510 <_usb_d_dev_init+0xd8>)
    94a2:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    94a4:	4b19      	ldr	r3, [pc, #100]	; (950c <_usb_d_dev_init+0xd4>)
    94a6:	4a1a      	ldr	r2, [pc, #104]	; (9510 <_usb_d_dev_init+0xd8>)
    94a8:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    94aa:	4b18      	ldr	r3, [pc, #96]	; (950c <_usb_d_dev_init+0xd4>)
    94ac:	4a18      	ldr	r2, [pc, #96]	; (9510 <_usb_d_dev_init+0xd8>)
    94ae:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    94b0:	4b16      	ldr	r3, [pc, #88]	; (950c <_usb_d_dev_init+0xd4>)
    94b2:	4a17      	ldr	r2, [pc, #92]	; (9510 <_usb_d_dev_init+0xd8>)
    94b4:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    94b6:	4b17      	ldr	r3, [pc, #92]	; (9514 <_usb_d_dev_init+0xdc>)
    94b8:	4798      	blx	r3

	_usb_load_calib();
    94ba:	4b17      	ldr	r3, [pc, #92]	; (9518 <_usb_d_dev_init+0xe0>)
    94bc:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    94be:	2104      	movs	r1, #4
    94c0:	68f8      	ldr	r0, [r7, #12]
    94c2:	4b11      	ldr	r3, [pc, #68]	; (9508 <_usb_d_dev_init+0xd0>)
    94c4:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    94c6:	4b15      	ldr	r3, [pc, #84]	; (951c <_usb_d_dev_init+0xe4>)
    94c8:	4619      	mov	r1, r3
    94ca:	68f8      	ldr	r0, [r7, #12]
    94cc:	4b14      	ldr	r3, [pc, #80]	; (9520 <_usb_d_dev_init+0xe8>)
    94ce:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    94d0:	7afb      	ldrb	r3, [r7, #11]
    94d2:	f107 0210 	add.w	r2, r7, #16
    94d6:	4413      	add	r3, r2
    94d8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    94dc:	f043 0301 	orr.w	r3, r3, #1
    94e0:	b2db      	uxtb	r3, r3
    94e2:	b29b      	uxth	r3, r3
    94e4:	4619      	mov	r1, r3
    94e6:	68f8      	ldr	r0, [r7, #12]
    94e8:	4b0e      	ldr	r3, [pc, #56]	; (9524 <_usb_d_dev_init+0xec>)
    94ea:	4798      	blx	r3

	return ERR_NONE;
    94ec:	2300      	movs	r3, #0
}
    94ee:	4618      	mov	r0, r3
    94f0:	3710      	adds	r7, #16
    94f2:	46bd      	mov	sp, r7
    94f4:	bd80      	pop	{r7, pc}
    94f6:	bf00      	nop
    94f8:	00007ad1 	.word	0x00007ad1
    94fc:	00007e21 	.word	0x00007e21
    9500:	00007df5 	.word	0x00007df5
    9504:	00007aa7 	.word	0x00007aa7
    9508:	00007e51 	.word	0x00007e51
    950c:	20000aa8 	.word	0x20000aa8
    9510:	00007f19 	.word	0x00007f19
    9514:	000093bd 	.word	0x000093bd
    9518:	00007f31 	.word	0x00007f31
    951c:	20000b70 	.word	0x20000b70
    9520:	00007efd 	.word	0x00007efd
    9524:	00007ec1 	.word	0x00007ec1

00009528 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9528:	b580      	push	{r7, lr}
    952a:	b082      	sub	sp, #8
    952c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    952e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9532:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9534:	2103      	movs	r1, #3
    9536:	6878      	ldr	r0, [r7, #4]
    9538:	4b17      	ldr	r3, [pc, #92]	; (9598 <_usb_d_dev_enable+0x70>)
    953a:	4798      	blx	r3
    953c:	4603      	mov	r3, r0
    953e:	2b00      	cmp	r3, #0
    9540:	d002      	beq.n	9548 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9542:	f06f 0310 	mvn.w	r3, #16
    9546:	e023      	b.n	9590 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9548:	6878      	ldr	r0, [r7, #4]
    954a:	4b14      	ldr	r3, [pc, #80]	; (959c <_usb_d_dev_enable+0x74>)
    954c:	4798      	blx	r3
    954e:	4603      	mov	r3, r0
    9550:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9552:	78fb      	ldrb	r3, [r7, #3]
    9554:	f003 0302 	and.w	r3, r3, #2
    9558:	2b00      	cmp	r3, #0
    955a:	d107      	bne.n	956c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    955c:	78fb      	ldrb	r3, [r7, #3]
    955e:	f043 0302 	orr.w	r3, r3, #2
    9562:	b2db      	uxtb	r3, r3
    9564:	4619      	mov	r1, r3
    9566:	6878      	ldr	r0, [r7, #4]
    9568:	4b0d      	ldr	r3, [pc, #52]	; (95a0 <_usb_d_dev_enable+0x78>)
    956a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    956c:	2050      	movs	r0, #80	; 0x50
    956e:	4b0d      	ldr	r3, [pc, #52]	; (95a4 <_usb_d_dev_enable+0x7c>)
    9570:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    9572:	2051      	movs	r0, #81	; 0x51
    9574:	4b0b      	ldr	r3, [pc, #44]	; (95a4 <_usb_d_dev_enable+0x7c>)
    9576:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9578:	2052      	movs	r0, #82	; 0x52
    957a:	4b0a      	ldr	r3, [pc, #40]	; (95a4 <_usb_d_dev_enable+0x7c>)
    957c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    957e:	2053      	movs	r0, #83	; 0x53
    9580:	4b08      	ldr	r3, [pc, #32]	; (95a4 <_usb_d_dev_enable+0x7c>)
    9582:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9584:	f240 218d 	movw	r1, #653	; 0x28d
    9588:	6878      	ldr	r0, [r7, #4]
    958a:	4b07      	ldr	r3, [pc, #28]	; (95a8 <_usb_d_dev_enable+0x80>)
    958c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    958e:	2300      	movs	r3, #0
}
    9590:	4618      	mov	r0, r3
    9592:	3708      	adds	r7, #8
    9594:	46bd      	mov	sp, r7
    9596:	bd80      	pop	{r7, pc}
    9598:	00007dcb 	.word	0x00007dcb
    959c:	00007e79 	.word	0x00007e79
    95a0:	00007e51 	.word	0x00007e51
    95a4:	000079dd 	.word	0x000079dd
    95a8:	00007d75 	.word	0x00007d75

000095ac <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    95ac:	b580      	push	{r7, lr}
    95ae:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    95b0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95b4:	4b01      	ldr	r3, [pc, #4]	; (95bc <_usb_d_dev_attach+0x10>)
    95b6:	4798      	blx	r3
}
    95b8:	bf00      	nop
    95ba:	bd80      	pop	{r7, pc}
    95bc:	00007e9d 	.word	0x00007e9d

000095c0 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    95c0:	b580      	push	{r7, lr}
    95c2:	b082      	sub	sp, #8
    95c4:	af00      	add	r7, sp, #0
    95c6:	4603      	mov	r3, r0
    95c8:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    95ca:	79fb      	ldrb	r3, [r7, #7]
    95cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    95d0:	b2db      	uxtb	r3, r3
    95d2:	4619      	mov	r1, r3
    95d4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95d8:	4b02      	ldr	r3, [pc, #8]	; (95e4 <_usb_d_dev_set_address+0x24>)
    95da:	4798      	blx	r3
}
    95dc:	bf00      	nop
    95de:	3708      	adds	r7, #8
    95e0:	46bd      	mov	sp, r7
    95e2:	bd80      	pop	{r7, pc}
    95e4:	00007edf 	.word	0x00007edf

000095e8 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    95e8:	b590      	push	{r4, r7, lr}
    95ea:	b085      	sub	sp, #20
    95ec:	af00      	add	r7, sp, #0
    95ee:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    95f0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    95f4:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    95f6:	687b      	ldr	r3, [r7, #4]
    95f8:	7c9b      	ldrb	r3, [r3, #18]
    95fa:	f003 030f 	and.w	r3, r3, #15
    95fe:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9600:	687b      	ldr	r3, [r7, #4]
    9602:	68db      	ldr	r3, [r3, #12]
    9604:	461a      	mov	r2, r3
    9606:	7afb      	ldrb	r3, [r7, #11]
    9608:	2100      	movs	r1, #0
    960a:	4618      	mov	r0, r3
    960c:	4b0f      	ldr	r3, [pc, #60]	; (964c <_usb_d_dev_trans_setup+0x64>)
    960e:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9610:	687b      	ldr	r3, [r7, #4]
    9612:	8a1b      	ldrh	r3, [r3, #16]
    9614:	461a      	mov	r2, r3
    9616:	7af8      	ldrb	r0, [r7, #11]
    9618:	2300      	movs	r3, #0
    961a:	2100      	movs	r1, #0
    961c:	4c0c      	ldr	r4, [pc, #48]	; (9650 <_usb_d_dev_trans_setup+0x68>)
    961e:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9620:	7afb      	ldrb	r3, [r7, #11]
    9622:	22b0      	movs	r2, #176	; 0xb0
    9624:	4619      	mov	r1, r3
    9626:	68f8      	ldr	r0, [r7, #12]
    9628:	4b0a      	ldr	r3, [pc, #40]	; (9654 <_usb_d_dev_trans_setup+0x6c>)
    962a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    962c:	7afb      	ldrb	r3, [r7, #11]
    962e:	2200      	movs	r2, #0
    9630:	2100      	movs	r1, #0
    9632:	4618      	mov	r0, r3
    9634:	4b08      	ldr	r3, [pc, #32]	; (9658 <_usb_d_dev_trans_setup+0x70>)
    9636:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9638:	7afb      	ldrb	r3, [r7, #11]
    963a:	2210      	movs	r2, #16
    963c:	4619      	mov	r1, r3
    963e:	68f8      	ldr	r0, [r7, #12]
    9640:	4b06      	ldr	r3, [pc, #24]	; (965c <_usb_d_dev_trans_setup+0x74>)
    9642:	4798      	blx	r3
}
    9644:	bf00      	nop
    9646:	3714      	adds	r7, #20
    9648:	46bd      	mov	sp, r7
    964a:	bd90      	pop	{r4, r7, pc}
    964c:	0000837d 	.word	0x0000837d
    9650:	00008505 	.word	0x00008505
    9654:	00007bdd 	.word	0x00007bdd
    9658:	000085d5 	.word	0x000085d5
    965c:	00007c31 	.word	0x00007c31

00009660 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9660:	b580      	push	{r7, lr}
    9662:	b088      	sub	sp, #32
    9664:	af00      	add	r7, sp, #0
    9666:	4603      	mov	r3, r0
    9668:	71fb      	strb	r3, [r7, #7]
    966a:	460b      	mov	r3, r1
    966c:	71bb      	strb	r3, [r7, #6]
    966e:	4613      	mov	r3, r2
    9670:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    9672:	79fb      	ldrb	r3, [r7, #7]
    9674:	f003 030f 	and.w	r3, r3, #15
    9678:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    967a:	79fb      	ldrb	r3, [r7, #7]
    967c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9680:	2b00      	cmp	r3, #0
    9682:	bf14      	ite	ne
    9684:	2301      	movne	r3, #1
    9686:	2300      	moveq	r3, #0
    9688:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    968a:	7fba      	ldrb	r2, [r7, #30]
    968c:	7ffb      	ldrb	r3, [r7, #31]
    968e:	4611      	mov	r1, r2
    9690:	4618      	mov	r0, r3
    9692:	4b3e      	ldr	r3, [pc, #248]	; (978c <_usb_d_dev_ep_init+0x12c>)
    9694:	4798      	blx	r3
    9696:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    9698:	79bb      	ldrb	r3, [r7, #6]
    969a:	f003 0303 	and.w	r3, r3, #3
    969e:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    96a0:	7ffa      	ldrb	r2, [r7, #31]
    96a2:	4613      	mov	r3, r2
    96a4:	005b      	lsls	r3, r3, #1
    96a6:	4413      	add	r3, r2
    96a8:	009b      	lsls	r3, r3, #2
    96aa:	4a39      	ldr	r2, [pc, #228]	; (9790 <_usb_d_dev_ep_init+0x130>)
    96ac:	4413      	add	r3, r2
    96ae:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    96b0:	7ffb      	ldrb	r3, [r7, #31]
    96b2:	2b04      	cmp	r3, #4
    96b4:	d902      	bls.n	96bc <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    96b6:	f06f 0311 	mvn.w	r3, #17
    96ba:	e063      	b.n	9784 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    96bc:	69bb      	ldr	r3, [r7, #24]
    96be:	7c9b      	ldrb	r3, [r3, #18]
    96c0:	2bff      	cmp	r3, #255	; 0xff
    96c2:	d002      	beq.n	96ca <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    96c4:	f06f 0313 	mvn.w	r3, #19
    96c8:	e05c      	b.n	9784 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    96ca:	7dfb      	ldrb	r3, [r7, #23]
    96cc:	2b00      	cmp	r3, #0
    96ce:	d11f      	bne.n	9710 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    96d0:	7fbb      	ldrb	r3, [r7, #30]
    96d2:	2b00      	cmp	r3, #0
    96d4:	bf14      	ite	ne
    96d6:	2301      	movne	r3, #1
    96d8:	2300      	moveq	r3, #0
    96da:	b2db      	uxtb	r3, r3
    96dc:	f083 0301 	eor.w	r3, r3, #1
    96e0:	b2db      	uxtb	r3, r3
    96e2:	f003 0301 	and.w	r3, r3, #1
    96e6:	b2da      	uxtb	r2, r3
    96e8:	7ffb      	ldrb	r3, [r7, #31]
    96ea:	4611      	mov	r1, r2
    96ec:	4618      	mov	r0, r3
    96ee:	4b27      	ldr	r3, [pc, #156]	; (978c <_usb_d_dev_ep_init+0x12c>)
    96f0:	4798      	blx	r3
    96f2:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    96f4:	68fb      	ldr	r3, [r7, #12]
    96f6:	7c9b      	ldrb	r3, [r3, #18]
    96f8:	2bff      	cmp	r3, #255	; 0xff
    96fa:	d002      	beq.n	9702 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    96fc:	f06f 0313 	mvn.w	r3, #19
    9700:	e040      	b.n	9784 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    9702:	693b      	ldr	r3, [r7, #16]
    9704:	681b      	ldr	r3, [r3, #0]
    9706:	2b00      	cmp	r3, #0
    9708:	d102      	bne.n	9710 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    970a:	f06f 0312 	mvn.w	r3, #18
    970e:	e039      	b.n	9784 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9710:	7fbb      	ldrb	r3, [r7, #30]
    9712:	2b00      	cmp	r3, #0
    9714:	d007      	beq.n	9726 <_usb_d_dev_ep_init+0xc6>
    9716:	693b      	ldr	r3, [r7, #16]
    9718:	685b      	ldr	r3, [r3, #4]
    971a:	2b00      	cmp	r3, #0
    971c:	bf14      	ite	ne
    971e:	2301      	movne	r3, #1
    9720:	2300      	moveq	r3, #0
    9722:	b2db      	uxtb	r3, r3
    9724:	e006      	b.n	9734 <_usb_d_dev_ep_init+0xd4>
    9726:	693b      	ldr	r3, [r7, #16]
    9728:	681b      	ldr	r3, [r3, #0]
    972a:	2b00      	cmp	r3, #0
    972c:	bf14      	ite	ne
    972e:	2301      	movne	r3, #1
    9730:	2300      	moveq	r3, #0
    9732:	b2db      	uxtb	r3, r3
    9734:	2b00      	cmp	r3, #0
    9736:	d00f      	beq.n	9758 <_usb_d_dev_ep_init+0xf8>
    9738:	7fbb      	ldrb	r3, [r7, #30]
    973a:	2b00      	cmp	r3, #0
    973c:	d003      	beq.n	9746 <_usb_d_dev_ep_init+0xe6>
    973e:	693b      	ldr	r3, [r7, #16]
    9740:	895b      	ldrh	r3, [r3, #10]
    9742:	461a      	mov	r2, r3
    9744:	e002      	b.n	974c <_usb_d_dev_ep_init+0xec>
    9746:	693b      	ldr	r3, [r7, #16]
    9748:	891b      	ldrh	r3, [r3, #8]
    974a:	461a      	mov	r2, r3
    974c:	88bb      	ldrh	r3, [r7, #4]
    974e:	429a      	cmp	r2, r3
    9750:	da02      	bge.n	9758 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    9752:	f06f 0312 	mvn.w	r3, #18
    9756:	e015      	b.n	9784 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9758:	7fbb      	ldrb	r3, [r7, #30]
    975a:	2b00      	cmp	r3, #0
    975c:	d002      	beq.n	9764 <_usb_d_dev_ep_init+0x104>
    975e:	693b      	ldr	r3, [r7, #16]
    9760:	685b      	ldr	r3, [r3, #4]
    9762:	e001      	b.n	9768 <_usb_d_dev_ep_init+0x108>
    9764:	693b      	ldr	r3, [r7, #16]
    9766:	681b      	ldr	r3, [r3, #0]
    9768:	69ba      	ldr	r2, [r7, #24]
    976a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    976c:	69bb      	ldr	r3, [r7, #24]
    976e:	88ba      	ldrh	r2, [r7, #4]
    9770:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    9772:	7dfb      	ldrb	r3, [r7, #23]
    9774:	3301      	adds	r3, #1
    9776:	b2da      	uxtb	r2, r3
    9778:	69bb      	ldr	r3, [r7, #24]
    977a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    977c:	69bb      	ldr	r3, [r7, #24]
    977e:	79fa      	ldrb	r2, [r7, #7]
    9780:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    9782:	2300      	movs	r3, #0
}
    9784:	4618      	mov	r0, r3
    9786:	3720      	adds	r7, #32
    9788:	46bd      	mov	sp, r7
    978a:	bd80      	pop	{r7, pc}
    978c:	00008691 	.word	0x00008691
    9790:	0000d27c 	.word	0x0000d27c

00009794 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    9794:	b580      	push	{r7, lr}
    9796:	b086      	sub	sp, #24
    9798:	af00      	add	r7, sp, #0
    979a:	4603      	mov	r3, r0
    979c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    979e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    97a2:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    97a4:	79fb      	ldrb	r3, [r7, #7]
    97a6:	f003 030f 	and.w	r3, r3, #15
    97aa:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    97ac:	79fb      	ldrb	r3, [r7, #7]
    97ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
    97b2:	2b00      	cmp	r3, #0
    97b4:	bf14      	ite	ne
    97b6:	2301      	movne	r3, #1
    97b8:	2300      	moveq	r3, #0
    97ba:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    97bc:	7cba      	ldrb	r2, [r7, #18]
    97be:	7cfb      	ldrb	r3, [r7, #19]
    97c0:	4611      	mov	r1, r2
    97c2:	4618      	mov	r0, r3
    97c4:	4b2a      	ldr	r3, [pc, #168]	; (9870 <_usb_d_dev_ep_deinit+0xdc>)
    97c6:	4798      	blx	r3
    97c8:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    97ca:	7cfb      	ldrb	r3, [r7, #19]
    97cc:	2b04      	cmp	r3, #4
    97ce:	d84a      	bhi.n	9866 <_usb_d_dev_ep_deinit+0xd2>
    97d0:	68fb      	ldr	r3, [r7, #12]
    97d2:	7c9b      	ldrb	r3, [r3, #18]
    97d4:	2bff      	cmp	r3, #255	; 0xff
    97d6:	d046      	beq.n	9866 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    97d8:	7cbb      	ldrb	r3, [r7, #18]
    97da:	2203      	movs	r2, #3
    97dc:	4619      	mov	r1, r3
    97de:	68f8      	ldr	r0, [r7, #12]
    97e0:	4b24      	ldr	r3, [pc, #144]	; (9874 <_usb_d_dev_ep_deinit+0xe0>)
    97e2:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    97e4:	68fb      	ldr	r3, [r7, #12]
    97e6:	7cdb      	ldrb	r3, [r3, #19]
    97e8:	f003 0307 	and.w	r3, r3, #7
    97ec:	b2db      	uxtb	r3, r3
    97ee:	2b01      	cmp	r3, #1
    97f0:	d107      	bne.n	9802 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    97f2:	79fb      	ldrb	r3, [r7, #7]
    97f4:	697a      	ldr	r2, [r7, #20]
    97f6:	3308      	adds	r3, #8
    97f8:	015b      	lsls	r3, r3, #5
    97fa:	4413      	add	r3, r2
    97fc:	2200      	movs	r2, #0
    97fe:	701a      	strb	r2, [r3, #0]
    9800:	e02a      	b.n	9858 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    9802:	f997 3007 	ldrsb.w	r3, [r7, #7]
    9806:	2b00      	cmp	r3, #0
    9808:	da15      	bge.n	9836 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    980a:	79fb      	ldrb	r3, [r7, #7]
    980c:	f003 030f 	and.w	r3, r3, #15
    9810:	79fa      	ldrb	r2, [r7, #7]
    9812:	f002 020f 	and.w	r2, r2, #15
    9816:	6979      	ldr	r1, [r7, #20]
    9818:	3208      	adds	r2, #8
    981a:	0152      	lsls	r2, r2, #5
    981c:	440a      	add	r2, r1
    981e:	7812      	ldrb	r2, [r2, #0]
    9820:	b2d2      	uxtb	r2, r2
    9822:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    9826:	b2d1      	uxtb	r1, r2
    9828:	697a      	ldr	r2, [r7, #20]
    982a:	3308      	adds	r3, #8
    982c:	015b      	lsls	r3, r3, #5
    982e:	4413      	add	r3, r2
    9830:	460a      	mov	r2, r1
    9832:	701a      	strb	r2, [r3, #0]
    9834:	e010      	b.n	9858 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    9836:	79fb      	ldrb	r3, [r7, #7]
    9838:	79fa      	ldrb	r2, [r7, #7]
    983a:	6979      	ldr	r1, [r7, #20]
    983c:	3208      	adds	r2, #8
    983e:	0152      	lsls	r2, r2, #5
    9840:	440a      	add	r2, r1
    9842:	7812      	ldrb	r2, [r2, #0]
    9844:	b2d2      	uxtb	r2, r2
    9846:	f022 0207 	bic.w	r2, r2, #7
    984a:	b2d1      	uxtb	r1, r2
    984c:	697a      	ldr	r2, [r7, #20]
    984e:	3308      	adds	r3, #8
    9850:	015b      	lsls	r3, r3, #5
    9852:	4413      	add	r3, r2
    9854:	460a      	mov	r2, r1
    9856:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    9858:	68fb      	ldr	r3, [r7, #12]
    985a:	2200      	movs	r2, #0
    985c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    985e:	68fb      	ldr	r3, [r7, #12]
    9860:	22ff      	movs	r2, #255	; 0xff
    9862:	749a      	strb	r2, [r3, #18]
    9864:	e000      	b.n	9868 <_usb_d_dev_ep_deinit+0xd4>
		return;
    9866:	bf00      	nop
}
    9868:	3718      	adds	r7, #24
    986a:	46bd      	mov	sp, r7
    986c:	bd80      	pop	{r7, pc}
    986e:	bf00      	nop
    9870:	00008691 	.word	0x00008691
    9874:	00009cc9 	.word	0x00009cc9

00009878 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    9878:	b5b0      	push	{r4, r5, r7, lr}
    987a:	b088      	sub	sp, #32
    987c:	af00      	add	r7, sp, #0
    987e:	4603      	mov	r3, r0
    9880:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    9882:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9886:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    9888:	79fb      	ldrb	r3, [r7, #7]
    988a:	f003 030f 	and.w	r3, r3, #15
    988e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    9890:	79fb      	ldrb	r3, [r7, #7]
    9892:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9896:	2b00      	cmp	r3, #0
    9898:	bf14      	ite	ne
    989a:	2301      	movne	r3, #1
    989c:	2300      	moveq	r3, #0
    989e:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    98a0:	7eba      	ldrb	r2, [r7, #26]
    98a2:	7efb      	ldrb	r3, [r7, #27]
    98a4:	4611      	mov	r1, r2
    98a6:	4618      	mov	r0, r3
    98a8:	4b70      	ldr	r3, [pc, #448]	; (9a6c <_usb_d_dev_ep_enable+0x1f4>)
    98aa:	4798      	blx	r3
    98ac:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    98ae:	7efb      	ldrb	r3, [r7, #27]
    98b0:	4619      	mov	r1, r3
    98b2:	69f8      	ldr	r0, [r7, #28]
    98b4:	4b6e      	ldr	r3, [pc, #440]	; (9a70 <_usb_d_dev_ep_enable+0x1f8>)
    98b6:	4798      	blx	r3
    98b8:	4603      	mov	r3, r0
    98ba:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    98bc:	7efb      	ldrb	r3, [r7, #27]
    98be:	2b04      	cmp	r3, #4
    98c0:	d803      	bhi.n	98ca <_usb_d_dev_ep_enable+0x52>
    98c2:	697b      	ldr	r3, [r7, #20]
    98c4:	7c9b      	ldrb	r3, [r3, #18]
    98c6:	2bff      	cmp	r3, #255	; 0xff
    98c8:	d102      	bne.n	98d0 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    98ca:	f06f 0311 	mvn.w	r3, #17
    98ce:	e0c8      	b.n	9a62 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    98d0:	7efb      	ldrb	r3, [r7, #27]
    98d2:	015b      	lsls	r3, r3, #5
    98d4:	4a67      	ldr	r2, [pc, #412]	; (9a74 <_usb_d_dev_ep_enable+0x1fc>)
    98d6:	4413      	add	r3, r2
    98d8:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    98da:	697b      	ldr	r3, [r7, #20]
    98dc:	7cdb      	ldrb	r3, [r3, #19]
    98de:	f003 0307 	and.w	r3, r3, #7
    98e2:	b2db      	uxtb	r3, r3
    98e4:	2b01      	cmp	r3, #1
    98e6:	d14b      	bne.n	9980 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    98e8:	7cfb      	ldrb	r3, [r7, #19]
    98ea:	f003 0377 	and.w	r3, r3, #119	; 0x77
    98ee:	2b00      	cmp	r3, #0
    98f0:	d002      	beq.n	98f8 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    98f2:	f06f 0313 	mvn.w	r3, #19
    98f6:	e0b4      	b.n	9a62 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    98f8:	7efb      	ldrb	r3, [r7, #27]
    98fa:	2211      	movs	r2, #17
    98fc:	4619      	mov	r1, r3
    98fe:	69f8      	ldr	r0, [r7, #28]
    9900:	4b5d      	ldr	r3, [pc, #372]	; (9a78 <_usb_d_dev_ep_enable+0x200>)
    9902:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9904:	697b      	ldr	r3, [r7, #20]
    9906:	8a1b      	ldrh	r3, [r3, #16]
    9908:	039b      	lsls	r3, r3, #14
    990a:	4c5c      	ldr	r4, [pc, #368]	; (9a7c <_usb_d_dev_ep_enable+0x204>)
    990c:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    990e:	697b      	ldr	r3, [r7, #20]
    9910:	8a1b      	ldrh	r3, [r3, #16]
    9912:	4618      	mov	r0, r3
    9914:	4b5a      	ldr	r3, [pc, #360]	; (9a80 <_usb_d_dev_ep_enable+0x208>)
    9916:	4798      	blx	r3
    9918:	4603      	mov	r3, r0
    991a:	071b      	lsls	r3, r3, #28
    991c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9920:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9924:	68fb      	ldr	r3, [r7, #12]
    9926:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    9928:	68fb      	ldr	r3, [r7, #12]
    992a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    992e:	697b      	ldr	r3, [r7, #20]
    9930:	8a1b      	ldrh	r3, [r3, #16]
    9932:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9936:	697b      	ldr	r3, [r7, #20]
    9938:	8a1b      	ldrh	r3, [r3, #16]
    993a:	4618      	mov	r0, r3
    993c:	4b50      	ldr	r3, [pc, #320]	; (9a80 <_usb_d_dev_ep_enable+0x208>)
    993e:	4798      	blx	r3
    9940:	4603      	mov	r3, r0
    9942:	071b      	lsls	r3, r3, #28
    9944:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9948:	432b      	orrs	r3, r5
    994a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    994c:	7efb      	ldrb	r3, [r7, #27]
    994e:	2200      	movs	r2, #0
    9950:	2100      	movs	r1, #0
    9952:	4618      	mov	r0, r3
    9954:	4b4b      	ldr	r3, [pc, #300]	; (9a84 <_usb_d_dev_ep_enable+0x20c>)
    9956:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    9958:	7efb      	ldrb	r3, [r7, #27]
    995a:	2200      	movs	r2, #0
    995c:	2101      	movs	r1, #1
    995e:	4618      	mov	r0, r3
    9960:	4b49      	ldr	r3, [pc, #292]	; (9a88 <_usb_d_dev_ep_enable+0x210>)
    9962:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    9964:	7efb      	ldrb	r3, [r7, #27]
    9966:	2100      	movs	r1, #0
    9968:	4618      	mov	r0, r3
    996a:	4b48      	ldr	r3, [pc, #288]	; (9a8c <_usb_d_dev_ep_enable+0x214>)
    996c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    996e:	7efb      	ldrb	r3, [r7, #27]
    9970:	2101      	movs	r1, #1
    9972:	4618      	mov	r0, r3
    9974:	4b45      	ldr	r3, [pc, #276]	; (9a8c <_usb_d_dev_ep_enable+0x214>)
    9976:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    9978:	6978      	ldr	r0, [r7, #20]
    997a:	4b45      	ldr	r3, [pc, #276]	; (9a90 <_usb_d_dev_ep_enable+0x218>)
    997c:	4798      	blx	r3
    997e:	e06f      	b.n	9a60 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    9980:	7ebb      	ldrb	r3, [r7, #26]
    9982:	2b00      	cmp	r3, #0
    9984:	d038      	beq.n	99f8 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    9986:	7cfb      	ldrb	r3, [r7, #19]
    9988:	f003 0370 	and.w	r3, r3, #112	; 0x70
    998c:	2b00      	cmp	r3, #0
    998e:	d002      	beq.n	9996 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    9990:	f06f 0313 	mvn.w	r3, #19
    9994:	e065      	b.n	9a62 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    9996:	697b      	ldr	r3, [r7, #20]
    9998:	7cdb      	ldrb	r3, [r3, #19]
    999a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    999e:	b2db      	uxtb	r3, r3
    99a0:	011b      	lsls	r3, r3, #4
    99a2:	b2db      	uxtb	r3, r3
    99a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    99a8:	b2da      	uxtb	r2, r3
    99aa:	7cfb      	ldrb	r3, [r7, #19]
    99ac:	4313      	orrs	r3, r2
    99ae:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    99b0:	7cfa      	ldrb	r2, [r7, #19]
    99b2:	7efb      	ldrb	r3, [r7, #27]
    99b4:	4619      	mov	r1, r3
    99b6:	69f8      	ldr	r0, [r7, #28]
    99b8:	4b2f      	ldr	r3, [pc, #188]	; (9a78 <_usb_d_dev_ep_enable+0x200>)
    99ba:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    99bc:	68fb      	ldr	r3, [r7, #12]
    99be:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    99c2:	697b      	ldr	r3, [r7, #20]
    99c4:	8a1b      	ldrh	r3, [r3, #16]
    99c6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    99ca:	697b      	ldr	r3, [r7, #20]
    99cc:	8a1b      	ldrh	r3, [r3, #16]
    99ce:	4618      	mov	r0, r3
    99d0:	4b2b      	ldr	r3, [pc, #172]	; (9a80 <_usb_d_dev_ep_enable+0x208>)
    99d2:	4798      	blx	r3
    99d4:	4603      	mov	r3, r0
    99d6:	071b      	lsls	r3, r3, #28
    99d8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    99dc:	432b      	orrs	r3, r5
    99de:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    99e0:	7efb      	ldrb	r3, [r7, #27]
    99e2:	2200      	movs	r2, #0
    99e4:	2101      	movs	r1, #1
    99e6:	4618      	mov	r0, r3
    99e8:	4b27      	ldr	r3, [pc, #156]	; (9a88 <_usb_d_dev_ep_enable+0x210>)
    99ea:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    99ec:	7efb      	ldrb	r3, [r7, #27]
    99ee:	2101      	movs	r1, #1
    99f0:	4618      	mov	r0, r3
    99f2:	4b26      	ldr	r3, [pc, #152]	; (9a8c <_usb_d_dev_ep_enable+0x214>)
    99f4:	4798      	blx	r3
    99f6:	e033      	b.n	9a60 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    99f8:	7cfb      	ldrb	r3, [r7, #19]
    99fa:	f003 0307 	and.w	r3, r3, #7
    99fe:	2b00      	cmp	r3, #0
    9a00:	d002      	beq.n	9a08 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    9a02:	f06f 0313 	mvn.w	r3, #19
    9a06:	e02c      	b.n	9a62 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    9a08:	697b      	ldr	r3, [r7, #20]
    9a0a:	7cdb      	ldrb	r3, [r3, #19]
    9a0c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9a10:	b2db      	uxtb	r3, r3
    9a12:	461a      	mov	r2, r3
    9a14:	7cfb      	ldrb	r3, [r7, #19]
    9a16:	4313      	orrs	r3, r2
    9a18:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    9a1a:	7cfa      	ldrb	r2, [r7, #19]
    9a1c:	7efb      	ldrb	r3, [r7, #27]
    9a1e:	4619      	mov	r1, r3
    9a20:	69f8      	ldr	r0, [r7, #28]
    9a22:	4b15      	ldr	r3, [pc, #84]	; (9a78 <_usb_d_dev_ep_enable+0x200>)
    9a24:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9a26:	697b      	ldr	r3, [r7, #20]
    9a28:	8a1b      	ldrh	r3, [r3, #16]
    9a2a:	039b      	lsls	r3, r3, #14
    9a2c:	4c13      	ldr	r4, [pc, #76]	; (9a7c <_usb_d_dev_ep_enable+0x204>)
    9a2e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9a30:	697b      	ldr	r3, [r7, #20]
    9a32:	8a1b      	ldrh	r3, [r3, #16]
    9a34:	4618      	mov	r0, r3
    9a36:	4b12      	ldr	r3, [pc, #72]	; (9a80 <_usb_d_dev_ep_enable+0x208>)
    9a38:	4798      	blx	r3
    9a3a:	4603      	mov	r3, r0
    9a3c:	071b      	lsls	r3, r3, #28
    9a3e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9a42:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9a46:	68fb      	ldr	r3, [r7, #12]
    9a48:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9a4a:	7efb      	ldrb	r3, [r7, #27]
    9a4c:	2200      	movs	r2, #0
    9a4e:	2100      	movs	r1, #0
    9a50:	4618      	mov	r0, r3
    9a52:	4b0c      	ldr	r3, [pc, #48]	; (9a84 <_usb_d_dev_ep_enable+0x20c>)
    9a54:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    9a56:	7efb      	ldrb	r3, [r7, #27]
    9a58:	2100      	movs	r1, #0
    9a5a:	4618      	mov	r0, r3
    9a5c:	4b0b      	ldr	r3, [pc, #44]	; (9a8c <_usb_d_dev_ep_enable+0x214>)
    9a5e:	4798      	blx	r3
	}

	return USB_OK;
    9a60:	2300      	movs	r3, #0
}
    9a62:	4618      	mov	r0, r3
    9a64:	3720      	adds	r7, #32
    9a66:	46bd      	mov	sp, r7
    9a68:	bdb0      	pop	{r4, r5, r7, pc}
    9a6a:	bf00      	nop
    9a6c:	00008691 	.word	0x00008691
    9a70:	00007d17 	.word	0x00007d17
    9a74:	20000b70 	.word	0x20000b70
    9a78:	00007ced 	.word	0x00007ced
    9a7c:	0fffc000 	.word	0x0fffc000
    9a80:	0000862d 	.word	0x0000862d
    9a84:	000085d5 	.word	0x000085d5
    9a88:	0000857d 	.word	0x0000857d
    9a8c:	00008545 	.word	0x00008545
    9a90:	000095e9 	.word	0x000095e9

00009a94 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    9a94:	b580      	push	{r7, lr}
    9a96:	b084      	sub	sp, #16
    9a98:	af00      	add	r7, sp, #0
    9a9a:	6078      	str	r0, [r7, #4]
    9a9c:	460b      	mov	r3, r1
    9a9e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9aa0:	687b      	ldr	r3, [r7, #4]
    9aa2:	7c9b      	ldrb	r3, [r3, #18]
    9aa4:	f003 030f 	and.w	r3, r3, #15
    9aa8:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    9aaa:	78fa      	ldrb	r2, [r7, #3]
    9aac:	7bfb      	ldrb	r3, [r7, #15]
    9aae:	4611      	mov	r1, r2
    9ab0:	4618      	mov	r0, r3
    9ab2:	4b03      	ldr	r3, [pc, #12]	; (9ac0 <_usb_d_dev_ep_stall_get+0x2c>)
    9ab4:	4798      	blx	r3
    9ab6:	4603      	mov	r3, r0
}
    9ab8:	4618      	mov	r0, r3
    9aba:	3710      	adds	r7, #16
    9abc:	46bd      	mov	sp, r7
    9abe:	bd80      	pop	{r7, pc}
    9ac0:	00008185 	.word	0x00008185

00009ac4 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    9ac4:	b580      	push	{r7, lr}
    9ac6:	b084      	sub	sp, #16
    9ac8:	af00      	add	r7, sp, #0
    9aca:	6078      	str	r0, [r7, #4]
    9acc:	460b      	mov	r3, r1
    9ace:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9ad0:	687b      	ldr	r3, [r7, #4]
    9ad2:	7c9b      	ldrb	r3, [r3, #18]
    9ad4:	f003 030f 	and.w	r3, r3, #15
    9ad8:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    9ada:	78f9      	ldrb	r1, [r7, #3]
    9adc:	7bfb      	ldrb	r3, [r7, #15]
    9ade:	2201      	movs	r2, #1
    9ae0:	4618      	mov	r0, r3
    9ae2:	4b0a      	ldr	r3, [pc, #40]	; (9b0c <_usb_d_dev_ep_stall_set+0x48>)
    9ae4:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9ae6:	78fb      	ldrb	r3, [r7, #3]
    9ae8:	2220      	movs	r2, #32
    9aea:	409a      	lsls	r2, r3
    9aec:	7bfb      	ldrb	r3, [r7, #15]
    9aee:	4611      	mov	r1, r2
    9af0:	4618      	mov	r0, r3
    9af2:	4b07      	ldr	r3, [pc, #28]	; (9b10 <_usb_d_dev_ep_stall_set+0x4c>)
    9af4:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    9af6:	687a      	ldr	r2, [r7, #4]
    9af8:	7cd3      	ldrb	r3, [r2, #19]
    9afa:	f043 0308 	orr.w	r3, r3, #8
    9afe:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    9b00:	2300      	movs	r3, #0
}
    9b02:	4618      	mov	r0, r3
    9b04:	3710      	adds	r7, #16
    9b06:	46bd      	mov	sp, r7
    9b08:	bd80      	pop	{r7, pc}
    9b0a:	bf00      	nop
    9b0c:	0000812d 	.word	0x0000812d
    9b10:	000080ad 	.word	0x000080ad

00009b14 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    9b14:	b580      	push	{r7, lr}
    9b16:	b084      	sub	sp, #16
    9b18:	af00      	add	r7, sp, #0
    9b1a:	6078      	str	r0, [r7, #4]
    9b1c:	460b      	mov	r3, r1
    9b1e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9b20:	687b      	ldr	r3, [r7, #4]
    9b22:	7c9b      	ldrb	r3, [r3, #18]
    9b24:	f003 030f 	and.w	r3, r3, #15
    9b28:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    9b2a:	78fa      	ldrb	r2, [r7, #3]
    9b2c:	7bfb      	ldrb	r3, [r7, #15]
    9b2e:	4611      	mov	r1, r2
    9b30:	4618      	mov	r0, r3
    9b32:	4b28      	ldr	r3, [pc, #160]	; (9bd4 <_usb_d_dev_ep_stall_clr+0xc0>)
    9b34:	4798      	blx	r3
    9b36:	4603      	mov	r3, r0
    9b38:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    9b3a:	7bbb      	ldrb	r3, [r7, #14]
    9b3c:	f083 0301 	eor.w	r3, r3, #1
    9b40:	b2db      	uxtb	r3, r3
    9b42:	2b00      	cmp	r3, #0
    9b44:	d001      	beq.n	9b4a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    9b46:	2300      	movs	r3, #0
    9b48:	e040      	b.n	9bcc <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    9b4a:	78f9      	ldrb	r1, [r7, #3]
    9b4c:	7bfb      	ldrb	r3, [r7, #15]
    9b4e:	2200      	movs	r2, #0
    9b50:	4618      	mov	r0, r3
    9b52:	4b21      	ldr	r3, [pc, #132]	; (9bd8 <_usb_d_dev_ep_stall_clr+0xc4>)
    9b54:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9b56:	78fb      	ldrb	r3, [r7, #3]
    9b58:	2220      	movs	r2, #32
    9b5a:	409a      	lsls	r2, r3
    9b5c:	7bfb      	ldrb	r3, [r7, #15]
    9b5e:	4611      	mov	r1, r2
    9b60:	4618      	mov	r0, r3
    9b62:	4b1e      	ldr	r3, [pc, #120]	; (9bdc <_usb_d_dev_ep_stall_clr+0xc8>)
    9b64:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    9b66:	78fa      	ldrb	r2, [r7, #3]
    9b68:	7bfb      	ldrb	r3, [r7, #15]
    9b6a:	4611      	mov	r1, r2
    9b6c:	4618      	mov	r0, r3
    9b6e:	4b1c      	ldr	r3, [pc, #112]	; (9be0 <_usb_d_dev_ep_stall_clr+0xcc>)
    9b70:	4798      	blx	r3
    9b72:	4603      	mov	r3, r0
    9b74:	2b00      	cmp	r3, #0
    9b76:	d00b      	beq.n	9b90 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    9b78:	78fa      	ldrb	r2, [r7, #3]
    9b7a:	7bfb      	ldrb	r3, [r7, #15]
    9b7c:	4611      	mov	r1, r2
    9b7e:	4618      	mov	r0, r3
    9b80:	4b18      	ldr	r3, [pc, #96]	; (9be4 <_usb_d_dev_ep_stall_clr+0xd0>)
    9b82:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    9b84:	78f9      	ldrb	r1, [r7, #3]
    9b86:	7bfb      	ldrb	r3, [r7, #15]
    9b88:	2200      	movs	r2, #0
    9b8a:	4618      	mov	r0, r3
    9b8c:	4b16      	ldr	r3, [pc, #88]	; (9be8 <_usb_d_dev_ep_stall_clr+0xd4>)
    9b8e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9b90:	687b      	ldr	r3, [r7, #4]
    9b92:	7cdb      	ldrb	r3, [r3, #19]
    9b94:	f003 0307 	and.w	r3, r3, #7
    9b98:	b2db      	uxtb	r3, r3
    9b9a:	2b01      	cmp	r3, #1
    9b9c:	d110      	bne.n	9bc0 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9b9e:	7bfb      	ldrb	r3, [r7, #15]
    9ba0:	4619      	mov	r1, r3
    9ba2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ba6:	4b11      	ldr	r3, [pc, #68]	; (9bec <_usb_d_dev_ep_stall_clr+0xd8>)
    9ba8:	4798      	blx	r3
    9baa:	4603      	mov	r3, r0
    9bac:	f003 0330 	and.w	r3, r3, #48	; 0x30
    9bb0:	2b00      	cmp	r3, #0
    9bb2:	d10a      	bne.n	9bca <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    9bb4:	687a      	ldr	r2, [r7, #4]
    9bb6:	7cd3      	ldrb	r3, [r2, #19]
    9bb8:	f36f 03c3 	bfc	r3, #3, #1
    9bbc:	74d3      	strb	r3, [r2, #19]
    9bbe:	e004      	b.n	9bca <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    9bc0:	687a      	ldr	r2, [r7, #4]
    9bc2:	7cd3      	ldrb	r3, [r2, #19]
    9bc4:	f36f 03c3 	bfc	r3, #3, #1
    9bc8:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    9bca:	2300      	movs	r3, #0
}
    9bcc:	4618      	mov	r0, r3
    9bce:	3710      	adds	r7, #16
    9bd0:	46bd      	mov	sp, r7
    9bd2:	bd80      	pop	{r7, pc}
    9bd4:	00008185 	.word	0x00008185
    9bd8:	0000812d 	.word	0x0000812d
    9bdc:	000080d5 	.word	0x000080d5
    9be0:	000081c9 	.word	0x000081c9
    9be4:	0000820d 	.word	0x0000820d
    9be8:	000082f9 	.word	0x000082f9
    9bec:	00007bb5 	.word	0x00007bb5

00009bf0 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    9bf0:	b580      	push	{r7, lr}
    9bf2:	b086      	sub	sp, #24
    9bf4:	af00      	add	r7, sp, #0
    9bf6:	4603      	mov	r3, r0
    9bf8:	460a      	mov	r2, r1
    9bfa:	71fb      	strb	r3, [r7, #7]
    9bfc:	4613      	mov	r3, r2
    9bfe:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    9c00:	79fb      	ldrb	r3, [r7, #7]
    9c02:	f003 030f 	and.w	r3, r3, #15
    9c06:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9c08:	79fb      	ldrb	r3, [r7, #7]
    9c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9c0e:	2b00      	cmp	r3, #0
    9c10:	bf14      	ite	ne
    9c12:	2301      	movne	r3, #1
    9c14:	2300      	moveq	r3, #0
    9c16:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9c18:	7cba      	ldrb	r2, [r7, #18]
    9c1a:	7cfb      	ldrb	r3, [r7, #19]
    9c1c:	4611      	mov	r1, r2
    9c1e:	4618      	mov	r0, r3
    9c20:	4b13      	ldr	r3, [pc, #76]	; (9c70 <_usb_d_dev_ep_stall+0x80>)
    9c22:	4798      	blx	r3
    9c24:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9c26:	7cfb      	ldrb	r3, [r7, #19]
    9c28:	2b04      	cmp	r3, #4
    9c2a:	d902      	bls.n	9c32 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    9c2c:	f06f 0311 	mvn.w	r3, #17
    9c30:	e01a      	b.n	9c68 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    9c32:	79bb      	ldrb	r3, [r7, #6]
    9c34:	2b01      	cmp	r3, #1
    9c36:	d106      	bne.n	9c46 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    9c38:	7cbb      	ldrb	r3, [r7, #18]
    9c3a:	4619      	mov	r1, r3
    9c3c:	68f8      	ldr	r0, [r7, #12]
    9c3e:	4b0d      	ldr	r3, [pc, #52]	; (9c74 <_usb_d_dev_ep_stall+0x84>)
    9c40:	4798      	blx	r3
    9c42:	6178      	str	r0, [r7, #20]
    9c44:	e00f      	b.n	9c66 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    9c46:	79bb      	ldrb	r3, [r7, #6]
    9c48:	2b00      	cmp	r3, #0
    9c4a:	d106      	bne.n	9c5a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9c4c:	7cbb      	ldrb	r3, [r7, #18]
    9c4e:	4619      	mov	r1, r3
    9c50:	68f8      	ldr	r0, [r7, #12]
    9c52:	4b09      	ldr	r3, [pc, #36]	; (9c78 <_usb_d_dev_ep_stall+0x88>)
    9c54:	4798      	blx	r3
    9c56:	6178      	str	r0, [r7, #20]
    9c58:	e005      	b.n	9c66 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    9c5a:	7cbb      	ldrb	r3, [r7, #18]
    9c5c:	4619      	mov	r1, r3
    9c5e:	68f8      	ldr	r0, [r7, #12]
    9c60:	4b06      	ldr	r3, [pc, #24]	; (9c7c <_usb_d_dev_ep_stall+0x8c>)
    9c62:	4798      	blx	r3
    9c64:	6178      	str	r0, [r7, #20]
	}
	return rc;
    9c66:	697b      	ldr	r3, [r7, #20]
}
    9c68:	4618      	mov	r0, r3
    9c6a:	3718      	adds	r7, #24
    9c6c:	46bd      	mov	sp, r7
    9c6e:	bd80      	pop	{r7, pc}
    9c70:	00008691 	.word	0x00008691
    9c74:	00009ac5 	.word	0x00009ac5
    9c78:	00009b15 	.word	0x00009b15
    9c7c:	00009a95 	.word	0x00009a95

00009c80 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    9c80:	b580      	push	{r7, lr}
    9c82:	b082      	sub	sp, #8
    9c84:	af00      	add	r7, sp, #0
    9c86:	6078      	str	r0, [r7, #4]
    9c88:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9c8a:	687b      	ldr	r3, [r7, #4]
    9c8c:	7c9b      	ldrb	r3, [r3, #18]
    9c8e:	2bff      	cmp	r3, #255	; 0xff
    9c90:	d014      	beq.n	9cbc <_usb_d_dev_trans_done+0x3c>
    9c92:	687b      	ldr	r3, [r7, #4]
    9c94:	7cdb      	ldrb	r3, [r3, #19]
    9c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9c9a:	b2db      	uxtb	r3, r3
    9c9c:	2b00      	cmp	r3, #0
    9c9e:	d00d      	beq.n	9cbc <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    9ca0:	687a      	ldr	r2, [r7, #4]
    9ca2:	7cd3      	ldrb	r3, [r2, #19]
    9ca4:	f36f 1386 	bfc	r3, #6, #1
    9ca8:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    9caa:	4b06      	ldr	r3, [pc, #24]	; (9cc4 <_usb_d_dev_trans_done+0x44>)
    9cac:	691b      	ldr	r3, [r3, #16]
    9cae:	687a      	ldr	r2, [r7, #4]
    9cb0:	7c90      	ldrb	r0, [r2, #18]
    9cb2:	687a      	ldr	r2, [r7, #4]
    9cb4:	6892      	ldr	r2, [r2, #8]
    9cb6:	6839      	ldr	r1, [r7, #0]
    9cb8:	4798      	blx	r3
    9cba:	e000      	b.n	9cbe <_usb_d_dev_trans_done+0x3e>
		return;
    9cbc:	bf00      	nop
}
    9cbe:	3708      	adds	r7, #8
    9cc0:	46bd      	mov	sp, r7
    9cc2:	bd80      	pop	{r7, pc}
    9cc4:	20000aa8 	.word	0x20000aa8

00009cc8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    9cc8:	b580      	push	{r7, lr}
    9cca:	b086      	sub	sp, #24
    9ccc:	af00      	add	r7, sp, #0
    9cce:	60f8      	str	r0, [r7, #12]
    9cd0:	460b      	mov	r3, r1
    9cd2:	607a      	str	r2, [r7, #4]
    9cd4:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9cd6:	68fb      	ldr	r3, [r7, #12]
    9cd8:	7c9b      	ldrb	r3, [r3, #18]
    9cda:	f003 030f 	and.w	r3, r3, #15
    9cde:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    9ce0:	4b1f      	ldr	r3, [pc, #124]	; (9d60 <_usb_d_dev_trans_stop+0x98>)
    9ce2:	881b      	ldrh	r3, [r3, #0]
    9ce4:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9ce6:	68fb      	ldr	r3, [r7, #12]
    9ce8:	7c9b      	ldrb	r3, [r3, #18]
    9cea:	2bff      	cmp	r3, #255	; 0xff
    9cec:	d033      	beq.n	9d56 <_usb_d_dev_trans_stop+0x8e>
    9cee:	68fb      	ldr	r3, [r7, #12]
    9cf0:	7cdb      	ldrb	r3, [r3, #19]
    9cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9cf6:	b2db      	uxtb	r3, r3
    9cf8:	2b00      	cmp	r3, #0
    9cfa:	d02c      	beq.n	9d56 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    9cfc:	7afb      	ldrb	r3, [r7, #11]
    9cfe:	2b00      	cmp	r3, #0
    9d00:	d006      	beq.n	9d10 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9d02:	7dfb      	ldrb	r3, [r7, #23]
    9d04:	2200      	movs	r2, #0
    9d06:	2101      	movs	r1, #1
    9d08:	4618      	mov	r0, r3
    9d0a:	4b16      	ldr	r3, [pc, #88]	; (9d64 <_usb_d_dev_trans_stop+0x9c>)
    9d0c:	4798      	blx	r3
    9d0e:	e005      	b.n	9d1c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9d10:	7dfb      	ldrb	r3, [r7, #23]
    9d12:	2200      	movs	r2, #0
    9d14:	2100      	movs	r1, #0
    9d16:	4618      	mov	r0, r3
    9d18:	4b13      	ldr	r3, [pc, #76]	; (9d68 <_usb_d_dev_trans_stop+0xa0>)
    9d1a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    9d1c:	7afb      	ldrb	r3, [r7, #11]
    9d1e:	f107 0218 	add.w	r2, r7, #24
    9d22:	4413      	add	r3, r2
    9d24:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9d28:	461a      	mov	r2, r3
    9d2a:	7dfb      	ldrb	r3, [r7, #23]
    9d2c:	4611      	mov	r1, r2
    9d2e:	4618      	mov	r0, r3
    9d30:	4b0e      	ldr	r3, [pc, #56]	; (9d6c <_usb_d_dev_trans_stop+0xa4>)
    9d32:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    9d34:	7afb      	ldrb	r3, [r7, #11]
    9d36:	f107 0218 	add.w	r2, r7, #24
    9d3a:	4413      	add	r3, r2
    9d3c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9d40:	461a      	mov	r2, r3
    9d42:	7dfb      	ldrb	r3, [r7, #23]
    9d44:	4611      	mov	r1, r2
    9d46:	4618      	mov	r0, r3
    9d48:	4b09      	ldr	r3, [pc, #36]	; (9d70 <_usb_d_dev_trans_stop+0xa8>)
    9d4a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    9d4c:	6879      	ldr	r1, [r7, #4]
    9d4e:	68f8      	ldr	r0, [r7, #12]
    9d50:	4b08      	ldr	r3, [pc, #32]	; (9d74 <_usb_d_dev_trans_stop+0xac>)
    9d52:	4798      	blx	r3
    9d54:	e000      	b.n	9d58 <_usb_d_dev_trans_stop+0x90>
		return;
    9d56:	bf00      	nop
}
    9d58:	3718      	adds	r7, #24
    9d5a:	46bd      	mov	sp, r7
    9d5c:	bd80      	pop	{r7, pc}
    9d5e:	bf00      	nop
    9d60:	0000d2bc 	.word	0x0000d2bc
    9d64:	0000857d 	.word	0x0000857d
    9d68:	000085d5 	.word	0x000085d5
    9d6c:	00008085 	.word	0x00008085
    9d70:	000080d5 	.word	0x000080d5
    9d74:	00009c81 	.word	0x00009c81

00009d78 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    9d78:	b580      	push	{r7, lr}
    9d7a:	b086      	sub	sp, #24
    9d7c:	af00      	add	r7, sp, #0
    9d7e:	4603      	mov	r3, r0
    9d80:	6039      	str	r1, [r7, #0]
    9d82:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    9d84:	79fb      	ldrb	r3, [r7, #7]
    9d86:	f003 030f 	and.w	r3, r3, #15
    9d8a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9d8c:	7dfb      	ldrb	r3, [r7, #23]
    9d8e:	015b      	lsls	r3, r3, #5
    9d90:	4a1e      	ldr	r2, [pc, #120]	; (9e0c <_usb_d_dev_ep_read_req+0x94>)
    9d92:	4413      	add	r3, r2
    9d94:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    9d96:	693b      	ldr	r3, [r7, #16]
    9d98:	681b      	ldr	r3, [r3, #0]
    9d9a:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    9d9c:	693b      	ldr	r3, [r7, #16]
    9d9e:	685b      	ldr	r3, [r3, #4]
    9da0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9da4:	b29b      	uxth	r3, r3
    9da6:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9da8:	7dfb      	ldrb	r3, [r7, #23]
    9daa:	2b04      	cmp	r3, #4
    9dac:	d802      	bhi.n	9db4 <_usb_d_dev_ep_read_req+0x3c>
    9dae:	683b      	ldr	r3, [r7, #0]
    9db0:	2b00      	cmp	r3, #0
    9db2:	d102      	bne.n	9dba <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    9db4:	f06f 0311 	mvn.w	r3, #17
    9db8:	e023      	b.n	9e02 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9dba:	7dfb      	ldrb	r3, [r7, #23]
    9dbc:	4618      	mov	r0, r3
    9dbe:	4b14      	ldr	r3, [pc, #80]	; (9e10 <_usb_d_dev_ep_read_req+0x98>)
    9dc0:	4798      	blx	r3
    9dc2:	4603      	mov	r3, r0
    9dc4:	f083 0301 	eor.w	r3, r3, #1
    9dc8:	b2db      	uxtb	r3, r3
    9dca:	2b00      	cmp	r3, #0
    9dcc:	d002      	beq.n	9dd4 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    9dce:	f06f 0312 	mvn.w	r3, #18
    9dd2:	e016      	b.n	9e02 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    9dd4:	7dfb      	ldrb	r3, [r7, #23]
    9dd6:	4618      	mov	r0, r3
    9dd8:	4b0e      	ldr	r3, [pc, #56]	; (9e14 <_usb_d_dev_ep_read_req+0x9c>)
    9dda:	4798      	blx	r3
    9ddc:	4603      	mov	r3, r0
    9dde:	f083 0301 	eor.w	r3, r3, #1
    9de2:	b2db      	uxtb	r3, r3
    9de4:	2b00      	cmp	r3, #0
    9de6:	d001      	beq.n	9dec <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    9de8:	2300      	movs	r3, #0
    9dea:	e00a      	b.n	9e02 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    9dec:	68fb      	ldr	r3, [r7, #12]
    9dee:	2208      	movs	r2, #8
    9df0:	4619      	mov	r1, r3
    9df2:	6838      	ldr	r0, [r7, #0]
    9df4:	4b08      	ldr	r3, [pc, #32]	; (9e18 <_usb_d_dev_ep_read_req+0xa0>)
    9df6:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    9df8:	7dfb      	ldrb	r3, [r7, #23]
    9dfa:	4618      	mov	r0, r3
    9dfc:	4b07      	ldr	r3, [pc, #28]	; (9e1c <_usb_d_dev_ep_read_req+0xa4>)
    9dfe:	4798      	blx	r3

	return bytes;
    9e00:	897b      	ldrh	r3, [r7, #10]
}
    9e02:	4618      	mov	r0, r3
    9e04:	3718      	adds	r7, #24
    9e06:	46bd      	mov	sp, r7
    9e08:	bd80      	pop	{r7, pc}
    9e0a:	bf00      	nop
    9e0c:	20000b70 	.word	0x20000b70
    9e10:	000080fd 	.word	0x000080fd
    9e14:	000082a9 	.word	0x000082a9
    9e18:	0000cc35 	.word	0x0000cc35
    9e1c:	000082d9 	.word	0x000082d9

00009e20 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    9e20:	b580      	push	{r7, lr}
    9e22:	b086      	sub	sp, #24
    9e24:	af00      	add	r7, sp, #0
    9e26:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    9e28:	687b      	ldr	r3, [r7, #4]
    9e2a:	7a1b      	ldrb	r3, [r3, #8]
    9e2c:	f003 030f 	and.w	r3, r3, #15
    9e30:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    9e32:	687b      	ldr	r3, [r7, #4]
    9e34:	7a1b      	ldrb	r3, [r3, #8]
    9e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9e3a:	2b00      	cmp	r3, #0
    9e3c:	bf14      	ite	ne
    9e3e:	2301      	movne	r3, #1
    9e40:	2300      	moveq	r3, #0
    9e42:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9e44:	7d7a      	ldrb	r2, [r7, #21]
    9e46:	7dbb      	ldrb	r3, [r7, #22]
    9e48:	4611      	mov	r1, r2
    9e4a:	4618      	mov	r0, r3
    9e4c:	4b5f      	ldr	r3, [pc, #380]	; (9fcc <_usb_d_dev_ep_trans+0x1ac>)
    9e4e:	4798      	blx	r3
    9e50:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9e52:	693b      	ldr	r3, [r7, #16]
    9e54:	8a1b      	ldrh	r3, [r3, #16]
    9e56:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9e5a:	4293      	cmp	r3, r2
    9e5c:	d004      	beq.n	9e68 <_usb_d_dev_ep_trans+0x48>
    9e5e:	693b      	ldr	r3, [r7, #16]
    9e60:	8a1b      	ldrh	r3, [r3, #16]
    9e62:	3b01      	subs	r3, #1
    9e64:	b29b      	uxth	r3, r3
    9e66:	e001      	b.n	9e6c <_usb_d_dev_ep_trans+0x4c>
    9e68:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9e6c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    9e6e:	687b      	ldr	r3, [r7, #4]
    9e70:	685a      	ldr	r2, [r3, #4]
    9e72:	89fb      	ldrh	r3, [r7, #14]
    9e74:	4013      	ands	r3, r2
    9e76:	2b00      	cmp	r3, #0
    9e78:	bf14      	ite	ne
    9e7a:	2301      	movne	r3, #1
    9e7c:	2300      	moveq	r3, #0
    9e7e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    9e80:	2300      	movs	r3, #0
    9e82:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9e84:	7dbb      	ldrb	r3, [r7, #22]
    9e86:	2b04      	cmp	r3, #4
    9e88:	d902      	bls.n	9e90 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    9e8a:	f06f 0311 	mvn.w	r3, #17
    9e8e:	e098      	b.n	9fc2 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    9e90:	687b      	ldr	r3, [r7, #4]
    9e92:	681b      	ldr	r3, [r3, #0]
    9e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    9e98:	d31a      	bcc.n	9ed0 <_usb_d_dev_ep_trans+0xb0>
    9e9a:	687b      	ldr	r3, [r7, #4]
    9e9c:	681b      	ldr	r3, [r3, #0]
    9e9e:	461a      	mov	r2, r3
    9ea0:	687b      	ldr	r3, [r7, #4]
    9ea2:	685b      	ldr	r3, [r3, #4]
    9ea4:	4413      	add	r3, r2
    9ea6:	4a4a      	ldr	r2, [pc, #296]	; (9fd0 <_usb_d_dev_ep_trans+0x1b0>)
    9ea8:	4293      	cmp	r3, r2
    9eaa:	d811      	bhi.n	9ed0 <_usb_d_dev_ep_trans+0xb0>
    9eac:	687b      	ldr	r3, [r7, #4]
    9eae:	681b      	ldr	r3, [r3, #0]
    9eb0:	f003 0303 	and.w	r3, r3, #3
    9eb4:	2b00      	cmp	r3, #0
    9eb6:	d10b      	bne.n	9ed0 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    9eb8:	7d7b      	ldrb	r3, [r7, #21]
    9eba:	f083 0301 	eor.w	r3, r3, #1
    9ebe:	b2db      	uxtb	r3, r3
    9ec0:	2b00      	cmp	r3, #0
    9ec2:	d00e      	beq.n	9ee2 <_usb_d_dev_ep_trans+0xc2>
    9ec4:	687b      	ldr	r3, [r7, #4]
    9ec6:	685b      	ldr	r3, [r3, #4]
    9ec8:	693a      	ldr	r2, [r7, #16]
    9eca:	8a12      	ldrh	r2, [r2, #16]
    9ecc:	4293      	cmp	r3, r2
    9ece:	d208      	bcs.n	9ee2 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    9ed0:	693b      	ldr	r3, [r7, #16]
    9ed2:	68db      	ldr	r3, [r3, #12]
    9ed4:	2b00      	cmp	r3, #0
    9ed6:	d102      	bne.n	9ede <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    9ed8:	f06f 0312 	mvn.w	r3, #18
    9edc:	e071      	b.n	9fc2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    9ede:	2301      	movs	r3, #1
    9ee0:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    9ee2:	7d7b      	ldrb	r3, [r7, #21]
    9ee4:	f083 0301 	eor.w	r3, r3, #1
    9ee8:	b2db      	uxtb	r3, r3
    9eea:	2b00      	cmp	r3, #0
    9eec:	d009      	beq.n	9f02 <_usb_d_dev_ep_trans+0xe2>
    9eee:	7b7b      	ldrb	r3, [r7, #13]
    9ef0:	2b00      	cmp	r3, #0
    9ef2:	d006      	beq.n	9f02 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    9ef4:	693b      	ldr	r3, [r7, #16]
    9ef6:	68db      	ldr	r3, [r3, #12]
    9ef8:	2b00      	cmp	r3, #0
    9efa:	d102      	bne.n	9f02 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    9efc:	f06f 0311 	mvn.w	r3, #17
    9f00:	e05f      	b.n	9fc2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    9f02:	693b      	ldr	r3, [r7, #16]
    9f04:	7cdb      	ldrb	r3, [r3, #19]
    9f06:	f003 0308 	and.w	r3, r3, #8
    9f0a:	b2db      	uxtb	r3, r3
    9f0c:	2b00      	cmp	r3, #0
    9f0e:	d001      	beq.n	9f14 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    9f10:	2302      	movs	r3, #2
    9f12:	e056      	b.n	9fc2 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    9f14:	f107 0308 	add.w	r3, r7, #8
    9f18:	4618      	mov	r0, r3
    9f1a:	4b2e      	ldr	r3, [pc, #184]	; (9fd4 <_usb_d_dev_ep_trans+0x1b4>)
    9f1c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    9f1e:	693b      	ldr	r3, [r7, #16]
    9f20:	7cdb      	ldrb	r3, [r3, #19]
    9f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9f26:	b2db      	uxtb	r3, r3
    9f28:	2b00      	cmp	r3, #0
    9f2a:	d006      	beq.n	9f3a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    9f2c:	f107 0308 	add.w	r3, r7, #8
    9f30:	4618      	mov	r0, r3
    9f32:	4b29      	ldr	r3, [pc, #164]	; (9fd8 <_usb_d_dev_ep_trans+0x1b8>)
    9f34:	4798      	blx	r3
		return USB_BUSY;
    9f36:	2301      	movs	r3, #1
    9f38:	e043      	b.n	9fc2 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    9f3a:	693a      	ldr	r2, [r7, #16]
    9f3c:	7cd3      	ldrb	r3, [r2, #19]
    9f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9f42:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    9f44:	f107 0308 	add.w	r3, r7, #8
    9f48:	4618      	mov	r0, r3
    9f4a:	4b23      	ldr	r3, [pc, #140]	; (9fd8 <_usb_d_dev_ep_trans+0x1b8>)
    9f4c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    9f4e:	687b      	ldr	r3, [r7, #4]
    9f50:	681a      	ldr	r2, [r3, #0]
    9f52:	693b      	ldr	r3, [r7, #16]
    9f54:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    9f56:	687b      	ldr	r3, [r7, #4]
    9f58:	685a      	ldr	r2, [r3, #4]
    9f5a:	693b      	ldr	r3, [r7, #16]
    9f5c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    9f5e:	693b      	ldr	r3, [r7, #16]
    9f60:	2200      	movs	r2, #0
    9f62:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    9f64:	693a      	ldr	r2, [r7, #16]
    9f66:	7cd3      	ldrb	r3, [r2, #19]
    9f68:	7d79      	ldrb	r1, [r7, #21]
    9f6a:	f361 13c7 	bfi	r3, r1, #7, #1
    9f6e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    9f70:	693a      	ldr	r2, [r7, #16]
    9f72:	7cd3      	ldrb	r3, [r2, #19]
    9f74:	7df9      	ldrb	r1, [r7, #23]
    9f76:	f361 1345 	bfi	r3, r1, #5, #1
    9f7a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    9f7c:	687b      	ldr	r3, [r7, #4]
    9f7e:	7a5b      	ldrb	r3, [r3, #9]
    9f80:	2b00      	cmp	r3, #0
    9f82:	d007      	beq.n	9f94 <_usb_d_dev_ep_trans+0x174>
    9f84:	7b7b      	ldrb	r3, [r7, #13]
    9f86:	f083 0301 	eor.w	r3, r3, #1
    9f8a:	b2db      	uxtb	r3, r3
    9f8c:	2b00      	cmp	r3, #0
    9f8e:	d001      	beq.n	9f94 <_usb_d_dev_ep_trans+0x174>
    9f90:	2301      	movs	r3, #1
    9f92:	e000      	b.n	9f96 <_usb_d_dev_ep_trans+0x176>
    9f94:	2300      	movs	r3, #0
    9f96:	b2db      	uxtb	r3, r3
    9f98:	f003 0301 	and.w	r3, r3, #1
    9f9c:	b2d9      	uxtb	r1, r3
    9f9e:	693a      	ldr	r2, [r7, #16]
    9fa0:	7cd3      	ldrb	r3, [r2, #19]
    9fa2:	f361 1304 	bfi	r3, r1, #4, #1
    9fa6:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    9fa8:	7d7b      	ldrb	r3, [r7, #21]
    9faa:	2b00      	cmp	r3, #0
    9fac:	d004      	beq.n	9fb8 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    9fae:	2100      	movs	r1, #0
    9fb0:	6938      	ldr	r0, [r7, #16]
    9fb2:	4b0a      	ldr	r3, [pc, #40]	; (9fdc <_usb_d_dev_ep_trans+0x1bc>)
    9fb4:	4798      	blx	r3
    9fb6:	e003      	b.n	9fc0 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    9fb8:	2100      	movs	r1, #0
    9fba:	6938      	ldr	r0, [r7, #16]
    9fbc:	4b08      	ldr	r3, [pc, #32]	; (9fe0 <_usb_d_dev_ep_trans+0x1c0>)
    9fbe:	4798      	blx	r3
	}

	return ERR_NONE;
    9fc0:	2300      	movs	r3, #0
}
    9fc2:	4618      	mov	r0, r3
    9fc4:	3718      	adds	r7, #24
    9fc6:	46bd      	mov	sp, r7
    9fc8:	bd80      	pop	{r7, pc}
    9fca:	bf00      	nop
    9fcc:	00008691 	.word	0x00008691
    9fd0:	20041fff 	.word	0x20041fff
    9fd4:	0000a799 	.word	0x0000a799
    9fd8:	0000a7bf 	.word	0x0000a7bf
    9fdc:	00008959 	.word	0x00008959
    9fe0:	00008b71 	.word	0x00008b71

00009fe4 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    9fe4:	b480      	push	{r7}
    9fe6:	b085      	sub	sp, #20
    9fe8:	af00      	add	r7, sp, #0
    9fea:	4603      	mov	r3, r0
    9fec:	6039      	str	r1, [r7, #0]
    9fee:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9ff0:	683b      	ldr	r3, [r7, #0]
    9ff2:	2b00      	cmp	r3, #0
    9ff4:	d001      	beq.n	9ffa <_usb_d_dev_register_callback+0x16>
    9ff6:	683b      	ldr	r3, [r7, #0]
    9ff8:	e000      	b.n	9ffc <_usb_d_dev_register_callback+0x18>
    9ffa:	4b0a      	ldr	r3, [pc, #40]	; (a024 <_usb_d_dev_register_callback+0x40>)
    9ffc:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    9ffe:	79fb      	ldrb	r3, [r7, #7]
    a000:	2b01      	cmp	r3, #1
    a002:	d103      	bne.n	a00c <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    a004:	4a08      	ldr	r2, [pc, #32]	; (a028 <_usb_d_dev_register_callback+0x44>)
    a006:	68fb      	ldr	r3, [r7, #12]
    a008:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    a00a:	e005      	b.n	a018 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    a00c:	79fb      	ldrb	r3, [r7, #7]
    a00e:	2b00      	cmp	r3, #0
    a010:	d102      	bne.n	a018 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    a012:	4a05      	ldr	r2, [pc, #20]	; (a028 <_usb_d_dev_register_callback+0x44>)
    a014:	68fb      	ldr	r3, [r7, #12]
    a016:	6013      	str	r3, [r2, #0]
}
    a018:	bf00      	nop
    a01a:	3714      	adds	r7, #20
    a01c:	46bd      	mov	sp, r7
    a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a022:	4770      	bx	lr
    a024:	00007f19 	.word	0x00007f19
    a028:	20000aa8 	.word	0x20000aa8

0000a02c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    a02c:	b480      	push	{r7}
    a02e:	b085      	sub	sp, #20
    a030:	af00      	add	r7, sp, #0
    a032:	4603      	mov	r3, r0
    a034:	6039      	str	r1, [r7, #0]
    a036:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a038:	683b      	ldr	r3, [r7, #0]
    a03a:	2b00      	cmp	r3, #0
    a03c:	d001      	beq.n	a042 <_usb_d_dev_register_ep_callback+0x16>
    a03e:	683b      	ldr	r3, [r7, #0]
    a040:	e000      	b.n	a044 <_usb_d_dev_register_ep_callback+0x18>
    a042:	4b0e      	ldr	r3, [pc, #56]	; (a07c <_usb_d_dev_register_ep_callback+0x50>)
    a044:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    a046:	79fb      	ldrb	r3, [r7, #7]
    a048:	2b00      	cmp	r3, #0
    a04a:	d103      	bne.n	a054 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    a04c:	4a0c      	ldr	r2, [pc, #48]	; (a080 <_usb_d_dev_register_ep_callback+0x54>)
    a04e:	68fb      	ldr	r3, [r7, #12]
    a050:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    a052:	e00c      	b.n	a06e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    a054:	79fb      	ldrb	r3, [r7, #7]
    a056:	2b01      	cmp	r3, #1
    a058:	d103      	bne.n	a062 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    a05a:	4a09      	ldr	r2, [pc, #36]	; (a080 <_usb_d_dev_register_ep_callback+0x54>)
    a05c:	68fb      	ldr	r3, [r7, #12]
    a05e:	60d3      	str	r3, [r2, #12]
}
    a060:	e005      	b.n	a06e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    a062:	79fb      	ldrb	r3, [r7, #7]
    a064:	2b02      	cmp	r3, #2
    a066:	d102      	bne.n	a06e <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    a068:	4a05      	ldr	r2, [pc, #20]	; (a080 <_usb_d_dev_register_ep_callback+0x54>)
    a06a:	68fb      	ldr	r3, [r7, #12]
    a06c:	6113      	str	r3, [r2, #16]
}
    a06e:	bf00      	nop
    a070:	3714      	adds	r7, #20
    a072:	46bd      	mov	sp, r7
    a074:	f85d 7b04 	ldr.w	r7, [sp], #4
    a078:	4770      	bx	lr
    a07a:	bf00      	nop
    a07c:	00007f19 	.word	0x00007f19
    a080:	20000aa8 	.word	0x20000aa8

0000a084 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    a084:	b580      	push	{r7, lr}
    a086:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a088:	4b01      	ldr	r3, [pc, #4]	; (a090 <USB_0_Handler+0xc>)
    a08a:	4798      	blx	r3
}
    a08c:	bf00      	nop
    a08e:	bd80      	pop	{r7, pc}
    a090:	00009349 	.word	0x00009349

0000a094 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    a094:	b580      	push	{r7, lr}
    a096:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a098:	4b01      	ldr	r3, [pc, #4]	; (a0a0 <USB_1_Handler+0xc>)
    a09a:	4798      	blx	r3
}
    a09c:	bf00      	nop
    a09e:	bd80      	pop	{r7, pc}
    a0a0:	00009349 	.word	0x00009349

0000a0a4 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    a0a4:	b580      	push	{r7, lr}
    a0a6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a0a8:	4b01      	ldr	r3, [pc, #4]	; (a0b0 <USB_2_Handler+0xc>)
    a0aa:	4798      	blx	r3
}
    a0ac:	bf00      	nop
    a0ae:	bd80      	pop	{r7, pc}
    a0b0:	00009349 	.word	0x00009349

0000a0b4 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    a0b4:	b580      	push	{r7, lr}
    a0b6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a0b8:	4b01      	ldr	r3, [pc, #4]	; (a0c0 <USB_3_Handler+0xc>)
    a0ba:	4798      	blx	r3
}
    a0bc:	bf00      	nop
    a0be:	bd80      	pop	{r7, pc}
    a0c0:	00009349 	.word	0x00009349

0000a0c4 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    a0c4:	b480      	push	{r7}
    a0c6:	b083      	sub	sp, #12
    a0c8:	af00      	add	r7, sp, #0
    a0ca:	6078      	str	r0, [r7, #4]
    a0cc:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    a0ce:	bf00      	nop
    a0d0:	687b      	ldr	r3, [r7, #4]
    a0d2:	689a      	ldr	r2, [r3, #8]
    a0d4:	683b      	ldr	r3, [r7, #0]
    a0d6:	4013      	ands	r3, r2
    a0d8:	2b00      	cmp	r3, #0
    a0da:	d1f9      	bne.n	a0d0 <hri_wdt_wait_for_sync+0xc>
	};
}
    a0dc:	bf00      	nop
    a0de:	370c      	adds	r7, #12
    a0e0:	46bd      	mov	sp, r7
    a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0e6:	4770      	bx	lr

0000a0e8 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a0e8:	b580      	push	{r7, lr}
    a0ea:	b084      	sub	sp, #16
    a0ec:	af00      	add	r7, sp, #0
    a0ee:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a0f0:	210e      	movs	r1, #14
    a0f2:	6878      	ldr	r0, [r7, #4]
    a0f4:	4b0a      	ldr	r3, [pc, #40]	; (a120 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    a0f6:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a0f8:	687b      	ldr	r3, [r7, #4]
    a0fa:	781b      	ldrb	r3, [r3, #0]
    a0fc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    a0fe:	7bfb      	ldrb	r3, [r7, #15]
    a100:	085b      	lsrs	r3, r3, #1
    a102:	b2db      	uxtb	r3, r3
    a104:	f003 0301 	and.w	r3, r3, #1
    a108:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a10a:	7bfb      	ldrb	r3, [r7, #15]
    a10c:	2b00      	cmp	r3, #0
    a10e:	bf14      	ite	ne
    a110:	2301      	movne	r3, #1
    a112:	2300      	moveq	r3, #0
    a114:	b2db      	uxtb	r3, r3
}
    a116:	4618      	mov	r0, r3
    a118:	3710      	adds	r7, #16
    a11a:	46bd      	mov	sp, r7
    a11c:	bd80      	pop	{r7, pc}
    a11e:	bf00      	nop
    a120:	0000a0c5 	.word	0x0000a0c5

0000a124 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    a124:	b580      	push	{r7, lr}
    a126:	b082      	sub	sp, #8
    a128:	af00      	add	r7, sp, #0
    a12a:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    a12c:	687b      	ldr	r3, [r7, #4]
    a12e:	781b      	ldrb	r3, [r3, #0]
    a130:	b2db      	uxtb	r3, r3
    a132:	f023 0304 	bic.w	r3, r3, #4
    a136:	b2da      	uxtb	r2, r3
    a138:	687b      	ldr	r3, [r7, #4]
    a13a:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a13c:	210e      	movs	r1, #14
    a13e:	6878      	ldr	r0, [r7, #4]
    a140:	4b02      	ldr	r3, [pc, #8]	; (a14c <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    a142:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    a144:	bf00      	nop
    a146:	3708      	adds	r7, #8
    a148:	46bd      	mov	sp, r7
    a14a:	bd80      	pop	{r7, pc}
    a14c:	0000a0c5 	.word	0x0000a0c5

0000a150 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    a150:	b580      	push	{r7, lr}
    a152:	b084      	sub	sp, #16
    a154:	af00      	add	r7, sp, #0
    a156:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a158:	210e      	movs	r1, #14
    a15a:	6878      	ldr	r0, [r7, #4]
    a15c:	4b08      	ldr	r3, [pc, #32]	; (a180 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    a15e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a160:	687b      	ldr	r3, [r7, #4]
    a162:	781b      	ldrb	r3, [r3, #0]
    a164:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    a166:	7bfb      	ldrb	r3, [r7, #15]
    a168:	09db      	lsrs	r3, r3, #7
    a16a:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a16c:	7bfb      	ldrb	r3, [r7, #15]
    a16e:	2b00      	cmp	r3, #0
    a170:	bf14      	ite	ne
    a172:	2301      	movne	r3, #1
    a174:	2300      	moveq	r3, #0
    a176:	b2db      	uxtb	r3, r3
}
    a178:	4618      	mov	r0, r3
    a17a:	3710      	adds	r7, #16
    a17c:	46bd      	mov	sp, r7
    a17e:	bd80      	pop	{r7, pc}
    a180:	0000a0c5 	.word	0x0000a0c5

0000a184 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    a184:	b480      	push	{r7}
    a186:	b085      	sub	sp, #20
    a188:	af00      	add	r7, sp, #0
    a18a:	6078      	str	r0, [r7, #4]
    a18c:	460b      	mov	r3, r1
    a18e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    a190:	687b      	ldr	r3, [r7, #4]
    a192:	785b      	ldrb	r3, [r3, #1]
    a194:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    a196:	7bfb      	ldrb	r3, [r7, #15]
    a198:	f023 030f 	bic.w	r3, r3, #15
    a19c:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    a19e:	78fb      	ldrb	r3, [r7, #3]
    a1a0:	f003 030f 	and.w	r3, r3, #15
    a1a4:	b2da      	uxtb	r2, r3
    a1a6:	7bfb      	ldrb	r3, [r7, #15]
    a1a8:	4313      	orrs	r3, r2
    a1aa:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    a1ac:	687b      	ldr	r3, [r7, #4]
    a1ae:	7bfa      	ldrb	r2, [r7, #15]
    a1b0:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    a1b2:	bf00      	nop
    a1b4:	3714      	adds	r7, #20
    a1b6:	46bd      	mov	sp, r7
    a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1bc:	4770      	bx	lr
	...

0000a1c0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    a1c0:	b580      	push	{r7, lr}
    a1c2:	b082      	sub	sp, #8
    a1c4:	af00      	add	r7, sp, #0
    a1c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    a1c8:	687b      	ldr	r3, [r7, #4]
    a1ca:	2b00      	cmp	r3, #0
    a1cc:	d005      	beq.n	a1da <_wdt_init+0x1a>
    a1ce:	687b      	ldr	r3, [r7, #4]
    a1d0:	681b      	ldr	r3, [r3, #0]
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	d001      	beq.n	a1da <_wdt_init+0x1a>
    a1d6:	2301      	movs	r3, #1
    a1d8:	e000      	b.n	a1dc <_wdt_init+0x1c>
    a1da:	2300      	movs	r3, #0
    a1dc:	f003 0301 	and.w	r3, r3, #1
    a1e0:	b2db      	uxtb	r3, r3
    a1e2:	2250      	movs	r2, #80	; 0x50
    a1e4:	4913      	ldr	r1, [pc, #76]	; (a234 <_wdt_init+0x74>)
    a1e6:	4618      	mov	r0, r3
    a1e8:	4b13      	ldr	r3, [pc, #76]	; (a238 <_wdt_init+0x78>)
    a1ea:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    a1ec:	687b      	ldr	r3, [r7, #4]
    a1ee:	681b      	ldr	r3, [r3, #0]
    a1f0:	4618      	mov	r0, r3
    a1f2:	4b12      	ldr	r3, [pc, #72]	; (a23c <_wdt_init+0x7c>)
    a1f4:	4798      	blx	r3
    a1f6:	4603      	mov	r3, r0
    a1f8:	2b00      	cmp	r3, #0
    a1fa:	d107      	bne.n	a20c <_wdt_init+0x4c>
    a1fc:	687b      	ldr	r3, [r7, #4]
    a1fe:	681b      	ldr	r3, [r3, #0]
    a200:	4618      	mov	r0, r3
    a202:	4b0f      	ldr	r3, [pc, #60]	; (a240 <_wdt_init+0x80>)
    a204:	4798      	blx	r3
    a206:	4603      	mov	r3, r0
    a208:	2b00      	cmp	r3, #0
    a20a:	d002      	beq.n	a212 <_wdt_init+0x52>
		return ERR_DENIED;
    a20c:	f06f 0310 	mvn.w	r3, #16
    a210:	e00b      	b.n	a22a <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    a212:	687b      	ldr	r3, [r7, #4]
    a214:	681b      	ldr	r3, [r3, #0]
    a216:	4618      	mov	r0, r3
    a218:	4b0a      	ldr	r3, [pc, #40]	; (a244 <_wdt_init+0x84>)
    a21a:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    a21c:	687b      	ldr	r3, [r7, #4]
    a21e:	681b      	ldr	r3, [r3, #0]
    a220:	210b      	movs	r1, #11
    a222:	4618      	mov	r0, r3
    a224:	4b08      	ldr	r3, [pc, #32]	; (a248 <_wdt_init+0x88>)
    a226:	4798      	blx	r3
	}

	return ERR_NONE;
    a228:	2300      	movs	r3, #0
}
    a22a:	4618      	mov	r0, r3
    a22c:	3708      	adds	r7, #8
    a22e:	46bd      	mov	sp, r7
    a230:	bd80      	pop	{r7, pc}
    a232:	bf00      	nop
    a234:	0000d2c0 	.word	0x0000d2c0
    a238:	00002de1 	.word	0x00002de1
    a23c:	0000a151 	.word	0x0000a151
    a240:	0000a0e9 	.word	0x0000a0e9
    a244:	0000a125 	.word	0x0000a125
    a248:	0000a185 	.word	0x0000a185

0000a24c <hri_port_set_DIR_reg>:
{
    a24c:	b480      	push	{r7}
    a24e:	b085      	sub	sp, #20
    a250:	af00      	add	r7, sp, #0
    a252:	60f8      	str	r0, [r7, #12]
    a254:	460b      	mov	r3, r1
    a256:	607a      	str	r2, [r7, #4]
    a258:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    a25a:	7afb      	ldrb	r3, [r7, #11]
    a25c:	68fa      	ldr	r2, [r7, #12]
    a25e:	01db      	lsls	r3, r3, #7
    a260:	4413      	add	r3, r2
    a262:	3308      	adds	r3, #8
    a264:	687a      	ldr	r2, [r7, #4]
    a266:	601a      	str	r2, [r3, #0]
}
    a268:	bf00      	nop
    a26a:	3714      	adds	r7, #20
    a26c:	46bd      	mov	sp, r7
    a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a272:	4770      	bx	lr

0000a274 <hri_port_clear_DIR_reg>:
{
    a274:	b480      	push	{r7}
    a276:	b085      	sub	sp, #20
    a278:	af00      	add	r7, sp, #0
    a27a:	60f8      	str	r0, [r7, #12]
    a27c:	460b      	mov	r3, r1
    a27e:	607a      	str	r2, [r7, #4]
    a280:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    a282:	7afb      	ldrb	r3, [r7, #11]
    a284:	68fa      	ldr	r2, [r7, #12]
    a286:	01db      	lsls	r3, r3, #7
    a288:	4413      	add	r3, r2
    a28a:	3304      	adds	r3, #4
    a28c:	687a      	ldr	r2, [r7, #4]
    a28e:	601a      	str	r2, [r3, #0]
}
    a290:	bf00      	nop
    a292:	3714      	adds	r7, #20
    a294:	46bd      	mov	sp, r7
    a296:	f85d 7b04 	ldr.w	r7, [sp], #4
    a29a:	4770      	bx	lr

0000a29c <hri_port_set_OUT_reg>:
{
    a29c:	b480      	push	{r7}
    a29e:	b085      	sub	sp, #20
    a2a0:	af00      	add	r7, sp, #0
    a2a2:	60f8      	str	r0, [r7, #12]
    a2a4:	460b      	mov	r3, r1
    a2a6:	607a      	str	r2, [r7, #4]
    a2a8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a2aa:	7afb      	ldrb	r3, [r7, #11]
    a2ac:	68fa      	ldr	r2, [r7, #12]
    a2ae:	01db      	lsls	r3, r3, #7
    a2b0:	4413      	add	r3, r2
    a2b2:	3318      	adds	r3, #24
    a2b4:	687a      	ldr	r2, [r7, #4]
    a2b6:	601a      	str	r2, [r3, #0]
}
    a2b8:	bf00      	nop
    a2ba:	3714      	adds	r7, #20
    a2bc:	46bd      	mov	sp, r7
    a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2c2:	4770      	bx	lr

0000a2c4 <hri_port_clear_OUT_reg>:
{
    a2c4:	b480      	push	{r7}
    a2c6:	b085      	sub	sp, #20
    a2c8:	af00      	add	r7, sp, #0
    a2ca:	60f8      	str	r0, [r7, #12]
    a2cc:	460b      	mov	r3, r1
    a2ce:	607a      	str	r2, [r7, #4]
    a2d0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    a2d2:	7afb      	ldrb	r3, [r7, #11]
    a2d4:	68fa      	ldr	r2, [r7, #12]
    a2d6:	01db      	lsls	r3, r3, #7
    a2d8:	4413      	add	r3, r2
    a2da:	3314      	adds	r3, #20
    a2dc:	687a      	ldr	r2, [r7, #4]
    a2de:	601a      	str	r2, [r3, #0]
}
    a2e0:	bf00      	nop
    a2e2:	3714      	adds	r7, #20
    a2e4:	46bd      	mov	sp, r7
    a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2ea:	4770      	bx	lr

0000a2ec <hri_port_write_PMUX_PMUXE_bf>:
{
    a2ec:	b480      	push	{r7}
    a2ee:	b085      	sub	sp, #20
    a2f0:	af00      	add	r7, sp, #0
    a2f2:	6078      	str	r0, [r7, #4]
    a2f4:	4608      	mov	r0, r1
    a2f6:	4611      	mov	r1, r2
    a2f8:	461a      	mov	r2, r3
    a2fa:	4603      	mov	r3, r0
    a2fc:	70fb      	strb	r3, [r7, #3]
    a2fe:	460b      	mov	r3, r1
    a300:	70bb      	strb	r3, [r7, #2]
    a302:	4613      	mov	r3, r2
    a304:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a306:	78fa      	ldrb	r2, [r7, #3]
    a308:	78bb      	ldrb	r3, [r7, #2]
    a30a:	6879      	ldr	r1, [r7, #4]
    a30c:	01d2      	lsls	r2, r2, #7
    a30e:	440a      	add	r2, r1
    a310:	4413      	add	r3, r2
    a312:	3330      	adds	r3, #48	; 0x30
    a314:	781b      	ldrb	r3, [r3, #0]
    a316:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    a318:	7bfb      	ldrb	r3, [r7, #15]
    a31a:	f023 030f 	bic.w	r3, r3, #15
    a31e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    a320:	787b      	ldrb	r3, [r7, #1]
    a322:	f003 030f 	and.w	r3, r3, #15
    a326:	b2da      	uxtb	r2, r3
    a328:	7bfb      	ldrb	r3, [r7, #15]
    a32a:	4313      	orrs	r3, r2
    a32c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a32e:	78fa      	ldrb	r2, [r7, #3]
    a330:	78bb      	ldrb	r3, [r7, #2]
    a332:	6879      	ldr	r1, [r7, #4]
    a334:	01d2      	lsls	r2, r2, #7
    a336:	440a      	add	r2, r1
    a338:	4413      	add	r3, r2
    a33a:	3330      	adds	r3, #48	; 0x30
    a33c:	7bfa      	ldrb	r2, [r7, #15]
    a33e:	701a      	strb	r2, [r3, #0]
}
    a340:	bf00      	nop
    a342:	3714      	adds	r7, #20
    a344:	46bd      	mov	sp, r7
    a346:	f85d 7b04 	ldr.w	r7, [sp], #4
    a34a:	4770      	bx	lr

0000a34c <hri_port_write_PMUX_PMUXO_bf>:
{
    a34c:	b480      	push	{r7}
    a34e:	b085      	sub	sp, #20
    a350:	af00      	add	r7, sp, #0
    a352:	6078      	str	r0, [r7, #4]
    a354:	4608      	mov	r0, r1
    a356:	4611      	mov	r1, r2
    a358:	461a      	mov	r2, r3
    a35a:	4603      	mov	r3, r0
    a35c:	70fb      	strb	r3, [r7, #3]
    a35e:	460b      	mov	r3, r1
    a360:	70bb      	strb	r3, [r7, #2]
    a362:	4613      	mov	r3, r2
    a364:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a366:	78fa      	ldrb	r2, [r7, #3]
    a368:	78bb      	ldrb	r3, [r7, #2]
    a36a:	6879      	ldr	r1, [r7, #4]
    a36c:	01d2      	lsls	r2, r2, #7
    a36e:	440a      	add	r2, r1
    a370:	4413      	add	r3, r2
    a372:	3330      	adds	r3, #48	; 0x30
    a374:	781b      	ldrb	r3, [r3, #0]
    a376:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    a378:	7bfb      	ldrb	r3, [r7, #15]
    a37a:	f003 030f 	and.w	r3, r3, #15
    a37e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    a380:	787b      	ldrb	r3, [r7, #1]
    a382:	011b      	lsls	r3, r3, #4
    a384:	b2da      	uxtb	r2, r3
    a386:	7bfb      	ldrb	r3, [r7, #15]
    a388:	4313      	orrs	r3, r2
    a38a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a38c:	78fa      	ldrb	r2, [r7, #3]
    a38e:	78bb      	ldrb	r3, [r7, #2]
    a390:	6879      	ldr	r1, [r7, #4]
    a392:	01d2      	lsls	r2, r2, #7
    a394:	440a      	add	r2, r1
    a396:	4413      	add	r3, r2
    a398:	3330      	adds	r3, #48	; 0x30
    a39a:	7bfa      	ldrb	r2, [r7, #15]
    a39c:	701a      	strb	r2, [r3, #0]
}
    a39e:	bf00      	nop
    a3a0:	3714      	adds	r7, #20
    a3a2:	46bd      	mov	sp, r7
    a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3a8:	4770      	bx	lr

0000a3aa <hri_port_write_PINCFG_PMUXEN_bit>:
{
    a3aa:	b480      	push	{r7}
    a3ac:	b085      	sub	sp, #20
    a3ae:	af00      	add	r7, sp, #0
    a3b0:	6078      	str	r0, [r7, #4]
    a3b2:	4608      	mov	r0, r1
    a3b4:	4611      	mov	r1, r2
    a3b6:	461a      	mov	r2, r3
    a3b8:	4603      	mov	r3, r0
    a3ba:	70fb      	strb	r3, [r7, #3]
    a3bc:	460b      	mov	r3, r1
    a3be:	70bb      	strb	r3, [r7, #2]
    a3c0:	4613      	mov	r3, r2
    a3c2:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    a3c4:	78fa      	ldrb	r2, [r7, #3]
    a3c6:	78bb      	ldrb	r3, [r7, #2]
    a3c8:	6879      	ldr	r1, [r7, #4]
    a3ca:	01d2      	lsls	r2, r2, #7
    a3cc:	440a      	add	r2, r1
    a3ce:	4413      	add	r3, r2
    a3d0:	3340      	adds	r3, #64	; 0x40
    a3d2:	781b      	ldrb	r3, [r3, #0]
    a3d4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    a3d6:	7bfb      	ldrb	r3, [r7, #15]
    a3d8:	f023 0301 	bic.w	r3, r3, #1
    a3dc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    a3de:	787a      	ldrb	r2, [r7, #1]
    a3e0:	7bfb      	ldrb	r3, [r7, #15]
    a3e2:	4313      	orrs	r3, r2
    a3e4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    a3e6:	78fa      	ldrb	r2, [r7, #3]
    a3e8:	78bb      	ldrb	r3, [r7, #2]
    a3ea:	6879      	ldr	r1, [r7, #4]
    a3ec:	01d2      	lsls	r2, r2, #7
    a3ee:	440a      	add	r2, r1
    a3f0:	4413      	add	r3, r2
    a3f2:	3340      	adds	r3, #64	; 0x40
    a3f4:	7bfa      	ldrb	r2, [r7, #15]
    a3f6:	701a      	strb	r2, [r3, #0]
}
    a3f8:	bf00      	nop
    a3fa:	3714      	adds	r7, #20
    a3fc:	46bd      	mov	sp, r7
    a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    a402:	4770      	bx	lr

0000a404 <hri_port_write_WRCONFIG_reg>:
{
    a404:	b480      	push	{r7}
    a406:	b085      	sub	sp, #20
    a408:	af00      	add	r7, sp, #0
    a40a:	60f8      	str	r0, [r7, #12]
    a40c:	460b      	mov	r3, r1
    a40e:	607a      	str	r2, [r7, #4]
    a410:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    a412:	7afb      	ldrb	r3, [r7, #11]
    a414:	68fa      	ldr	r2, [r7, #12]
    a416:	01db      	lsls	r3, r3, #7
    a418:	4413      	add	r3, r2
    a41a:	3328      	adds	r3, #40	; 0x28
    a41c:	687a      	ldr	r2, [r7, #4]
    a41e:	601a      	str	r2, [r3, #0]
}
    a420:	bf00      	nop
    a422:	3714      	adds	r7, #20
    a424:	46bd      	mov	sp, r7
    a426:	f85d 7b04 	ldr.w	r7, [sp], #4
    a42a:	4770      	bx	lr

0000a42c <_gpio_set_direction>:
{
    a42c:	b580      	push	{r7, lr}
    a42e:	b082      	sub	sp, #8
    a430:	af00      	add	r7, sp, #0
    a432:	4603      	mov	r3, r0
    a434:	6039      	str	r1, [r7, #0]
    a436:	71fb      	strb	r3, [r7, #7]
    a438:	4613      	mov	r3, r2
    a43a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    a43c:	79bb      	ldrb	r3, [r7, #6]
    a43e:	2b01      	cmp	r3, #1
    a440:	d01c      	beq.n	a47c <_gpio_set_direction+0x50>
    a442:	2b02      	cmp	r3, #2
    a444:	d037      	beq.n	a4b6 <_gpio_set_direction+0x8a>
    a446:	2b00      	cmp	r3, #0
    a448:	d14e      	bne.n	a4e8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a44a:	79fb      	ldrb	r3, [r7, #7]
    a44c:	683a      	ldr	r2, [r7, #0]
    a44e:	4619      	mov	r1, r3
    a450:	482a      	ldr	r0, [pc, #168]	; (a4fc <_gpio_set_direction+0xd0>)
    a452:	4b2b      	ldr	r3, [pc, #172]	; (a500 <_gpio_set_direction+0xd4>)
    a454:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a456:	683b      	ldr	r3, [r7, #0]
    a458:	b29b      	uxth	r3, r3
    a45a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a45e:	79fb      	ldrb	r3, [r7, #7]
    a460:	4619      	mov	r1, r3
    a462:	4826      	ldr	r0, [pc, #152]	; (a4fc <_gpio_set_direction+0xd0>)
    a464:	4b27      	ldr	r3, [pc, #156]	; (a504 <_gpio_set_direction+0xd8>)
    a466:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a468:	683b      	ldr	r3, [r7, #0]
    a46a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a46c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a470:	79fb      	ldrb	r3, [r7, #7]
    a472:	4619      	mov	r1, r3
    a474:	4821      	ldr	r0, [pc, #132]	; (a4fc <_gpio_set_direction+0xd0>)
    a476:	4b23      	ldr	r3, [pc, #140]	; (a504 <_gpio_set_direction+0xd8>)
    a478:	4798      	blx	r3
		break;
    a47a:	e03a      	b.n	a4f2 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a47c:	79fb      	ldrb	r3, [r7, #7]
    a47e:	683a      	ldr	r2, [r7, #0]
    a480:	4619      	mov	r1, r3
    a482:	481e      	ldr	r0, [pc, #120]	; (a4fc <_gpio_set_direction+0xd0>)
    a484:	4b1e      	ldr	r3, [pc, #120]	; (a500 <_gpio_set_direction+0xd4>)
    a486:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    a488:	683b      	ldr	r3, [r7, #0]
    a48a:	b29b      	uxth	r3, r3
    a48c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    a490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a494:	79f9      	ldrb	r1, [r7, #7]
    a496:	461a      	mov	r2, r3
    a498:	4818      	ldr	r0, [pc, #96]	; (a4fc <_gpio_set_direction+0xd0>)
    a49a:	4b1a      	ldr	r3, [pc, #104]	; (a504 <_gpio_set_direction+0xd8>)
    a49c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    a49e:	683b      	ldr	r3, [r7, #0]
    a4a0:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    a4a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    a4a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a4aa:	79f9      	ldrb	r1, [r7, #7]
    a4ac:	461a      	mov	r2, r3
    a4ae:	4813      	ldr	r0, [pc, #76]	; (a4fc <_gpio_set_direction+0xd0>)
    a4b0:	4b14      	ldr	r3, [pc, #80]	; (a504 <_gpio_set_direction+0xd8>)
    a4b2:	4798      	blx	r3
		break;
    a4b4:	e01d      	b.n	a4f2 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    a4b6:	79fb      	ldrb	r3, [r7, #7]
    a4b8:	683a      	ldr	r2, [r7, #0]
    a4ba:	4619      	mov	r1, r3
    a4bc:	480f      	ldr	r0, [pc, #60]	; (a4fc <_gpio_set_direction+0xd0>)
    a4be:	4b12      	ldr	r3, [pc, #72]	; (a508 <_gpio_set_direction+0xdc>)
    a4c0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a4c2:	683b      	ldr	r3, [r7, #0]
    a4c4:	b29b      	uxth	r3, r3
    a4c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a4ca:	79fb      	ldrb	r3, [r7, #7]
    a4cc:	4619      	mov	r1, r3
    a4ce:	480b      	ldr	r0, [pc, #44]	; (a4fc <_gpio_set_direction+0xd0>)
    a4d0:	4b0c      	ldr	r3, [pc, #48]	; (a504 <_gpio_set_direction+0xd8>)
    a4d2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a4d4:	683b      	ldr	r3, [r7, #0]
    a4d6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a4d8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a4dc:	79fb      	ldrb	r3, [r7, #7]
    a4de:	4619      	mov	r1, r3
    a4e0:	4806      	ldr	r0, [pc, #24]	; (a4fc <_gpio_set_direction+0xd0>)
    a4e2:	4b08      	ldr	r3, [pc, #32]	; (a504 <_gpio_set_direction+0xd8>)
    a4e4:	4798      	blx	r3
		break;
    a4e6:	e004      	b.n	a4f2 <_gpio_set_direction+0xc6>
		ASSERT(false);
    a4e8:	2246      	movs	r2, #70	; 0x46
    a4ea:	4908      	ldr	r1, [pc, #32]	; (a50c <_gpio_set_direction+0xe0>)
    a4ec:	2000      	movs	r0, #0
    a4ee:	4b08      	ldr	r3, [pc, #32]	; (a510 <_gpio_set_direction+0xe4>)
    a4f0:	4798      	blx	r3
}
    a4f2:	bf00      	nop
    a4f4:	3708      	adds	r7, #8
    a4f6:	46bd      	mov	sp, r7
    a4f8:	bd80      	pop	{r7, pc}
    a4fa:	bf00      	nop
    a4fc:	41008000 	.word	0x41008000
    a500:	0000a275 	.word	0x0000a275
    a504:	0000a405 	.word	0x0000a405
    a508:	0000a24d 	.word	0x0000a24d
    a50c:	0000d2d8 	.word	0x0000d2d8
    a510:	00002de1 	.word	0x00002de1

0000a514 <_gpio_set_level>:
{
    a514:	b580      	push	{r7, lr}
    a516:	b082      	sub	sp, #8
    a518:	af00      	add	r7, sp, #0
    a51a:	4603      	mov	r3, r0
    a51c:	6039      	str	r1, [r7, #0]
    a51e:	71fb      	strb	r3, [r7, #7]
    a520:	4613      	mov	r3, r2
    a522:	71bb      	strb	r3, [r7, #6]
	if (level) {
    a524:	79bb      	ldrb	r3, [r7, #6]
    a526:	2b00      	cmp	r3, #0
    a528:	d006      	beq.n	a538 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    a52a:	79fb      	ldrb	r3, [r7, #7]
    a52c:	683a      	ldr	r2, [r7, #0]
    a52e:	4619      	mov	r1, r3
    a530:	4806      	ldr	r0, [pc, #24]	; (a54c <_gpio_set_level+0x38>)
    a532:	4b07      	ldr	r3, [pc, #28]	; (a550 <_gpio_set_level+0x3c>)
    a534:	4798      	blx	r3
}
    a536:	e005      	b.n	a544 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    a538:	79fb      	ldrb	r3, [r7, #7]
    a53a:	683a      	ldr	r2, [r7, #0]
    a53c:	4619      	mov	r1, r3
    a53e:	4803      	ldr	r0, [pc, #12]	; (a54c <_gpio_set_level+0x38>)
    a540:	4b04      	ldr	r3, [pc, #16]	; (a554 <_gpio_set_level+0x40>)
    a542:	4798      	blx	r3
}
    a544:	bf00      	nop
    a546:	3708      	adds	r7, #8
    a548:	46bd      	mov	sp, r7
    a54a:	bd80      	pop	{r7, pc}
    a54c:	41008000 	.word	0x41008000
    a550:	0000a29d 	.word	0x0000a29d
    a554:	0000a2c5 	.word	0x0000a2c5

0000a558 <_gpio_set_pin_function>:
{
    a558:	b590      	push	{r4, r7, lr}
    a55a:	b085      	sub	sp, #20
    a55c:	af00      	add	r7, sp, #0
    a55e:	6078      	str	r0, [r7, #4]
    a560:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    a562:	687b      	ldr	r3, [r7, #4]
    a564:	095b      	lsrs	r3, r3, #5
    a566:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    a568:	687b      	ldr	r3, [r7, #4]
    a56a:	b2db      	uxtb	r3, r3
    a56c:	f003 031f 	and.w	r3, r3, #31
    a570:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    a572:	683b      	ldr	r3, [r7, #0]
    a574:	f1b3 3fff 	cmp.w	r3, #4294967295
    a578:	d106      	bne.n	a588 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    a57a:	7bba      	ldrb	r2, [r7, #14]
    a57c:	7bf9      	ldrb	r1, [r7, #15]
    a57e:	2300      	movs	r3, #0
    a580:	4812      	ldr	r0, [pc, #72]	; (a5cc <_gpio_set_pin_function+0x74>)
    a582:	4c13      	ldr	r4, [pc, #76]	; (a5d0 <_gpio_set_pin_function+0x78>)
    a584:	47a0      	blx	r4
}
    a586:	e01d      	b.n	a5c4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    a588:	7bba      	ldrb	r2, [r7, #14]
    a58a:	7bf9      	ldrb	r1, [r7, #15]
    a58c:	2301      	movs	r3, #1
    a58e:	480f      	ldr	r0, [pc, #60]	; (a5cc <_gpio_set_pin_function+0x74>)
    a590:	4c0f      	ldr	r4, [pc, #60]	; (a5d0 <_gpio_set_pin_function+0x78>)
    a592:	47a0      	blx	r4
		if (pin & 1) {
    a594:	7bbb      	ldrb	r3, [r7, #14]
    a596:	f003 0301 	and.w	r3, r3, #1
    a59a:	2b00      	cmp	r3, #0
    a59c:	d009      	beq.n	a5b2 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    a59e:	7bbb      	ldrb	r3, [r7, #14]
    a5a0:	085b      	lsrs	r3, r3, #1
    a5a2:	b2da      	uxtb	r2, r3
    a5a4:	683b      	ldr	r3, [r7, #0]
    a5a6:	b2db      	uxtb	r3, r3
    a5a8:	7bf9      	ldrb	r1, [r7, #15]
    a5aa:	4808      	ldr	r0, [pc, #32]	; (a5cc <_gpio_set_pin_function+0x74>)
    a5ac:	4c09      	ldr	r4, [pc, #36]	; (a5d4 <_gpio_set_pin_function+0x7c>)
    a5ae:	47a0      	blx	r4
}
    a5b0:	e008      	b.n	a5c4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    a5b2:	7bbb      	ldrb	r3, [r7, #14]
    a5b4:	085b      	lsrs	r3, r3, #1
    a5b6:	b2da      	uxtb	r2, r3
    a5b8:	683b      	ldr	r3, [r7, #0]
    a5ba:	b2db      	uxtb	r3, r3
    a5bc:	7bf9      	ldrb	r1, [r7, #15]
    a5be:	4803      	ldr	r0, [pc, #12]	; (a5cc <_gpio_set_pin_function+0x74>)
    a5c0:	4c05      	ldr	r4, [pc, #20]	; (a5d8 <_gpio_set_pin_function+0x80>)
    a5c2:	47a0      	blx	r4
}
    a5c4:	bf00      	nop
    a5c6:	3714      	adds	r7, #20
    a5c8:	46bd      	mov	sp, r7
    a5ca:	bd90      	pop	{r4, r7, pc}
    a5cc:	41008000 	.word	0x41008000
    a5d0:	0000a3ab 	.word	0x0000a3ab
    a5d4:	0000a34d 	.word	0x0000a34d
    a5d8:	0000a2ed 	.word	0x0000a2ed

0000a5dc <gpio_set_pin_function>:
{
    a5dc:	b580      	push	{r7, lr}
    a5de:	b082      	sub	sp, #8
    a5e0:	af00      	add	r7, sp, #0
    a5e2:	6078      	str	r0, [r7, #4]
    a5e4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    a5e6:	6839      	ldr	r1, [r7, #0]
    a5e8:	6878      	ldr	r0, [r7, #4]
    a5ea:	4b03      	ldr	r3, [pc, #12]	; (a5f8 <gpio_set_pin_function+0x1c>)
    a5ec:	4798      	blx	r3
}
    a5ee:	bf00      	nop
    a5f0:	3708      	adds	r7, #8
    a5f2:	46bd      	mov	sp, r7
    a5f4:	bd80      	pop	{r7, pc}
    a5f6:	bf00      	nop
    a5f8:	0000a559 	.word	0x0000a559

0000a5fc <gpio_set_pin_direction>:
{
    a5fc:	b580      	push	{r7, lr}
    a5fe:	b082      	sub	sp, #8
    a600:	af00      	add	r7, sp, #0
    a602:	4603      	mov	r3, r0
    a604:	460a      	mov	r2, r1
    a606:	71fb      	strb	r3, [r7, #7]
    a608:	4613      	mov	r3, r2
    a60a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    a60c:	79fb      	ldrb	r3, [r7, #7]
    a60e:	095b      	lsrs	r3, r3, #5
    a610:	b2d8      	uxtb	r0, r3
    a612:	79fb      	ldrb	r3, [r7, #7]
    a614:	f003 031f 	and.w	r3, r3, #31
    a618:	2201      	movs	r2, #1
    a61a:	fa02 f303 	lsl.w	r3, r2, r3
    a61e:	79ba      	ldrb	r2, [r7, #6]
    a620:	4619      	mov	r1, r3
    a622:	4b03      	ldr	r3, [pc, #12]	; (a630 <gpio_set_pin_direction+0x34>)
    a624:	4798      	blx	r3
}
    a626:	bf00      	nop
    a628:	3708      	adds	r7, #8
    a62a:	46bd      	mov	sp, r7
    a62c:	bd80      	pop	{r7, pc}
    a62e:	bf00      	nop
    a630:	0000a42d 	.word	0x0000a42d

0000a634 <gpio_set_pin_level>:
{
    a634:	b580      	push	{r7, lr}
    a636:	b082      	sub	sp, #8
    a638:	af00      	add	r7, sp, #0
    a63a:	4603      	mov	r3, r0
    a63c:	460a      	mov	r2, r1
    a63e:	71fb      	strb	r3, [r7, #7]
    a640:	4613      	mov	r3, r2
    a642:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    a644:	79fb      	ldrb	r3, [r7, #7]
    a646:	095b      	lsrs	r3, r3, #5
    a648:	b2d8      	uxtb	r0, r3
    a64a:	79fb      	ldrb	r3, [r7, #7]
    a64c:	f003 031f 	and.w	r3, r3, #31
    a650:	2201      	movs	r2, #1
    a652:	fa02 f303 	lsl.w	r3, r2, r3
    a656:	79ba      	ldrb	r2, [r7, #6]
    a658:	4619      	mov	r1, r3
    a65a:	4b03      	ldr	r3, [pc, #12]	; (a668 <gpio_set_pin_level+0x34>)
    a65c:	4798      	blx	r3
}
    a65e:	bf00      	nop
    a660:	3708      	adds	r7, #8
    a662:	46bd      	mov	sp, r7
    a664:	bd80      	pop	{r7, pc}
    a666:	bf00      	nop
    a668:	0000a515 	.word	0x0000a515

0000a66c <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    a66c:	b580      	push	{r7, lr}
    a66e:	b082      	sub	sp, #8
    a670:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    a672:	2100      	movs	r1, #0
    a674:	2008      	movs	r0, #8
    a676:	4b24      	ldr	r3, [pc, #144]	; (a708 <QSPI_N25Q256_exit_xip+0x9c>)
    a678:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    a67a:	2100      	movs	r1, #0
    a67c:	202b      	movs	r0, #43	; 0x2b
    a67e:	4b22      	ldr	r3, [pc, #136]	; (a708 <QSPI_N25Q256_exit_xip+0x9c>)
    a680:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    a682:	2100      	movs	r1, #0
    a684:	202a      	movs	r0, #42	; 0x2a
    a686:	4b20      	ldr	r3, [pc, #128]	; (a708 <QSPI_N25Q256_exit_xip+0x9c>)
    a688:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    a68a:	2102      	movs	r1, #2
    a68c:	2008      	movs	r0, #8
    a68e:	4b1f      	ldr	r3, [pc, #124]	; (a70c <QSPI_N25Q256_exit_xip+0xa0>)
    a690:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    a692:	2102      	movs	r1, #2
    a694:	202b      	movs	r0, #43	; 0x2b
    a696:	4b1d      	ldr	r3, [pc, #116]	; (a70c <QSPI_N25Q256_exit_xip+0xa0>)
    a698:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    a69a:	2102      	movs	r1, #2
    a69c:	202a      	movs	r0, #42	; 0x2a
    a69e:	4b1b      	ldr	r3, [pc, #108]	; (a70c <QSPI_N25Q256_exit_xip+0xa0>)
    a6a0:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    a6a2:	2101      	movs	r1, #1
    a6a4:	2008      	movs	r0, #8
    a6a6:	4b1a      	ldr	r3, [pc, #104]	; (a710 <QSPI_N25Q256_exit_xip+0xa4>)
    a6a8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    a6aa:	2100      	movs	r1, #0
    a6ac:	202b      	movs	r0, #43	; 0x2b
    a6ae:	4b18      	ldr	r3, [pc, #96]	; (a710 <QSPI_N25Q256_exit_xip+0xa4>)
    a6b0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    a6b2:	2100      	movs	r1, #0
    a6b4:	202a      	movs	r0, #42	; 0x2a
    a6b6:	4b16      	ldr	r3, [pc, #88]	; (a710 <QSPI_N25Q256_exit_xip+0xa4>)
    a6b8:	4798      	blx	r3

	delay_us(1);
    a6ba:	2001      	movs	r0, #1
    a6bc:	4b15      	ldr	r3, [pc, #84]	; (a714 <QSPI_N25Q256_exit_xip+0xa8>)
    a6be:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    a6c0:	2300      	movs	r3, #0
    a6c2:	607b      	str	r3, [r7, #4]
    a6c4:	e010      	b.n	a6e8 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    a6c6:	2101      	movs	r1, #1
    a6c8:	202a      	movs	r0, #42	; 0x2a
    a6ca:	4b11      	ldr	r3, [pc, #68]	; (a710 <QSPI_N25Q256_exit_xip+0xa4>)
    a6cc:	4798      	blx	r3
		delay_us(1);
    a6ce:	2001      	movs	r0, #1
    a6d0:	4b10      	ldr	r3, [pc, #64]	; (a714 <QSPI_N25Q256_exit_xip+0xa8>)
    a6d2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    a6d4:	2100      	movs	r1, #0
    a6d6:	202a      	movs	r0, #42	; 0x2a
    a6d8:	4b0d      	ldr	r3, [pc, #52]	; (a710 <QSPI_N25Q256_exit_xip+0xa4>)
    a6da:	4798      	blx	r3
		delay_us(1);
    a6dc:	2001      	movs	r0, #1
    a6de:	4b0d      	ldr	r3, [pc, #52]	; (a714 <QSPI_N25Q256_exit_xip+0xa8>)
    a6e0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    a6e2:	687b      	ldr	r3, [r7, #4]
    a6e4:	3301      	adds	r3, #1
    a6e6:	607b      	str	r3, [r7, #4]
    a6e8:	687b      	ldr	r3, [r7, #4]
    a6ea:	2b06      	cmp	r3, #6
    a6ec:	ddeb      	ble.n	a6c6 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    a6ee:	2101      	movs	r1, #1
    a6f0:	202b      	movs	r0, #43	; 0x2b
    a6f2:	4b07      	ldr	r3, [pc, #28]	; (a710 <QSPI_N25Q256_exit_xip+0xa4>)
    a6f4:	4798      	blx	r3
	delay_us(1);
    a6f6:	2001      	movs	r0, #1
    a6f8:	4b06      	ldr	r3, [pc, #24]	; (a714 <QSPI_N25Q256_exit_xip+0xa8>)
    a6fa:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    a6fc:	4b06      	ldr	r3, [pc, #24]	; (a718 <QSPI_N25Q256_exit_xip+0xac>)
    a6fe:	4798      	blx	r3
}
    a700:	bf00      	nop
    a702:	3708      	adds	r7, #8
    a704:	46bd      	mov	sp, r7
    a706:	bd80      	pop	{r7, pc}
    a708:	0000a5dd 	.word	0x0000a5dd
    a70c:	0000a5fd 	.word	0x0000a5fd
    a710:	0000a635 	.word	0x0000a635
    a714:	00001c91 	.word	0x00001c91
    a718:	00000fed 	.word	0x00000fed

0000a71c <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    a71c:	b598      	push	{r3, r4, r7, lr}
    a71e:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    a720:	4806      	ldr	r0, [pc, #24]	; (a73c <spi_nor_flash_init+0x20>)
    a722:	4b07      	ldr	r3, [pc, #28]	; (a740 <spi_nor_flash_init+0x24>)
    a724:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    a726:	2300      	movs	r3, #0
    a728:	4a06      	ldr	r2, [pc, #24]	; (a744 <spi_nor_flash_init+0x28>)
    a72a:	4904      	ldr	r1, [pc, #16]	; (a73c <spi_nor_flash_init+0x20>)
    a72c:	4806      	ldr	r0, [pc, #24]	; (a748 <spi_nor_flash_init+0x2c>)
    a72e:	4c07      	ldr	r4, [pc, #28]	; (a74c <spi_nor_flash_init+0x30>)
    a730:	47a0      	blx	r4
    a732:	4602      	mov	r2, r0
    a734:	4b06      	ldr	r3, [pc, #24]	; (a750 <spi_nor_flash_init+0x34>)
    a736:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    a738:	bf00      	nop
    a73a:	bd98      	pop	{r3, r4, r7, pc}
    a73c:	20000e24 	.word	0x20000e24
    a740:	00002071 	.word	0x00002071
    a744:	0000a66d 	.word	0x0000a66d
    a748:	20000c10 	.word	0x20000c10
    a74c:	0000ab89 	.word	0x0000ab89
    a750:	20001024 	.word	0x20001024

0000a754 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    a754:	b580      	push	{r7, lr}
    a756:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    a758:	4805      	ldr	r0, [pc, #20]	; (a770 <cdc_device_acm_init+0x1c>)
    a75a:	4b06      	ldr	r3, [pc, #24]	; (a774 <cdc_device_acm_init+0x20>)
    a75c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    a75e:	4b06      	ldr	r3, [pc, #24]	; (a778 <cdc_device_acm_init+0x24>)
    a760:	4798      	blx	r3

	usbdc_start(single_desc);
    a762:	4806      	ldr	r0, [pc, #24]	; (a77c <cdc_device_acm_init+0x28>)
    a764:	4b06      	ldr	r3, [pc, #24]	; (a780 <cdc_device_acm_init+0x2c>)
    a766:	4798      	blx	r3
	usbdc_attach();
    a768:	4b06      	ldr	r3, [pc, #24]	; (a784 <cdc_device_acm_init+0x30>)
    a76a:	4798      	blx	r3
}
    a76c:	bf00      	nop
    a76e:	bd80      	pop	{r7, pc}
    a770:	20000c60 	.word	0x20000c60
    a774:	0000c175 	.word	0x0000c175
    a778:	0000b529 	.word	0x0000b529
    a77c:	20000200 	.word	0x20000200
    a780:	0000c211 	.word	0x0000c211
    a784:	0000c261 	.word	0x0000c261

0000a788 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    a788:	b580      	push	{r7, lr}
    a78a:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    a78c:	4b01      	ldr	r3, [pc, #4]	; (a794 <usb_init+0xc>)
    a78e:	4798      	blx	r3
}
    a790:	bf00      	nop
    a792:	bd80      	pop	{r7, pc}
    a794:	0000a755 	.word	0x0000a755

0000a798 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    a798:	b480      	push	{r7}
    a79a:	b085      	sub	sp, #20
    a79c:	af00      	add	r7, sp, #0
    a79e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a7a0:	f3ef 8310 	mrs	r3, PRIMASK
    a7a4:	60fb      	str	r3, [r7, #12]
  return(result);
    a7a6:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    a7a8:	687b      	ldr	r3, [r7, #4]
    a7aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    a7ac:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    a7ae:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    a7b2:	bf00      	nop
    a7b4:	3714      	adds	r7, #20
    a7b6:	46bd      	mov	sp, r7
    a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7bc:	4770      	bx	lr

0000a7be <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    a7be:	b480      	push	{r7}
    a7c0:	b085      	sub	sp, #20
    a7c2:	af00      	add	r7, sp, #0
    a7c4:	6078      	str	r0, [r7, #4]
    a7c6:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    a7ca:	687b      	ldr	r3, [r7, #4]
    a7cc:	681b      	ldr	r3, [r3, #0]
    a7ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    a7d0:	68fb      	ldr	r3, [r7, #12]
    a7d2:	f383 8810 	msr	PRIMASK, r3
}
    a7d6:	bf00      	nop
    a7d8:	3714      	adds	r7, #20
    a7da:	46bd      	mov	sp, r7
    a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7e0:	4770      	bx	lr
	...

0000a7e4 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    a7e4:	b580      	push	{r7, lr}
    a7e6:	b08c      	sub	sp, #48	; 0x30
    a7e8:	af00      	add	r7, sp, #0
    a7ea:	6078      	str	r0, [r7, #4]
    a7ec:	460b      	mov	r3, r1
    a7ee:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    a7f0:	687b      	ldr	r3, [r7, #4]
    a7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a7f4:	687b      	ldr	r3, [r7, #4]
    a7f6:	681b      	ldr	r3, [r3, #0]
    a7f8:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    a7fa:	f107 030c 	add.w	r3, r7, #12
    a7fe:	2200      	movs	r2, #0
    a800:	601a      	str	r2, [r3, #0]
    a802:	605a      	str	r2, [r3, #4]
    a804:	609a      	str	r2, [r3, #8]
    a806:	60da      	str	r2, [r3, #12]
    a808:	611a      	str	r2, [r3, #16]
    a80a:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    a80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a80e:	7b1b      	ldrb	r3, [r3, #12]
    a810:	2b00      	cmp	r3, #0
    a812:	d001      	beq.n	a818 <n25q256a_xip_confirm+0x34>
    a814:	2206      	movs	r2, #6
    a816:	e000      	b.n	a81a <n25q256a_xip_confirm+0x36>
    a818:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    a81a:	7b3b      	ldrb	r3, [r7, #12]
    a81c:	f362 0302 	bfi	r3, r2, #0, #3
    a820:	733b      	strb	r3, [r7, #12]
    a822:	7b3b      	ldrb	r3, [r7, #12]
    a824:	f043 0310 	orr.w	r3, r3, #16
    a828:	733b      	strb	r3, [r7, #12]
    a82a:	7b3b      	ldrb	r3, [r7, #12]
    a82c:	f043 0320 	orr.w	r3, r3, #32
    a830:	733b      	strb	r3, [r7, #12]
    a832:	7b3b      	ldrb	r3, [r7, #12]
    a834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a838:	733b      	strb	r3, [r7, #12]
    a83a:	7b3b      	ldrb	r3, [r7, #12]
    a83c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a840:	733b      	strb	r3, [r7, #12]
    a842:	7b7b      	ldrb	r3, [r7, #13]
    a844:	f043 0303 	orr.w	r3, r3, #3
    a848:	737b      	strb	r3, [r7, #13]
    a84a:	7b7b      	ldrb	r3, [r7, #13]
    a84c:	2201      	movs	r2, #1
    a84e:	f362 1305 	bfi	r3, r2, #4, #2
    a852:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    a854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a856:	7b1b      	ldrb	r3, [r3, #12]
    a858:	2b00      	cmp	r3, #0
    a85a:	d001      	beq.n	a860 <n25q256a_xip_confirm+0x7c>
    a85c:	2208      	movs	r2, #8
    a85e:	e000      	b.n	a862 <n25q256a_xip_confirm+0x7e>
    a860:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    a862:	7bbb      	ldrb	r3, [r7, #14]
    a864:	f362 0304 	bfi	r3, r2, #0, #5
    a868:	73bb      	strb	r3, [r7, #14]
    a86a:	230b      	movs	r3, #11
    a86c:	743b      	strb	r3, [r7, #16]
    a86e:	78fb      	ldrb	r3, [r7, #3]
    a870:	2b00      	cmp	r3, #0
    a872:	d001      	beq.n	a878 <n25q256a_xip_confirm+0x94>
    a874:	2300      	movs	r3, #0
    a876:	e000      	b.n	a87a <n25q256a_xip_confirm+0x96>
    a878:	23ff      	movs	r3, #255	; 0xff
    a87a:	747b      	strb	r3, [r7, #17]
    a87c:	2301      	movs	r3, #1
    a87e:	61bb      	str	r3, [r7, #24]
    a880:	f107 0327 	add.w	r3, r7, #39	; 0x27
    a884:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    a886:	f107 030c 	add.w	r3, r7, #12
    a88a:	4619      	mov	r1, r3
    a88c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a88e:	4b07      	ldr	r3, [pc, #28]	; (a8ac <n25q256a_xip_confirm+0xc8>)
    a890:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    a892:	78fb      	ldrb	r3, [r7, #3]
    a894:	2b00      	cmp	r3, #0
    a896:	d001      	beq.n	a89c <n25q256a_xip_confirm+0xb8>
    a898:	2202      	movs	r2, #2
    a89a:	e000      	b.n	a89e <n25q256a_xip_confirm+0xba>
    a89c:	2201      	movs	r2, #1
    a89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a8a0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    a8a2:	2300      	movs	r3, #0
}
    a8a4:	4618      	mov	r0, r3
    a8a6:	3730      	adds	r7, #48	; 0x30
    a8a8:	46bd      	mov	sp, r7
    a8aa:	bd80      	pop	{r7, pc}
    a8ac:	000020e9 	.word	0x000020e9

0000a8b0 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    a8b0:	b580      	push	{r7, lr}
    a8b2:	b08c      	sub	sp, #48	; 0x30
    a8b4:	af00      	add	r7, sp, #0
    a8b6:	6078      	str	r0, [r7, #4]
    a8b8:	460b      	mov	r3, r1
    a8ba:	70fb      	strb	r3, [r7, #3]
    a8bc:	4613      	mov	r3, r2
    a8be:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    a8c0:	2300      	movs	r3, #0
    a8c2:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    a8c4:	687b      	ldr	r3, [r7, #4]
    a8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    a8c8:	687b      	ldr	r3, [r7, #4]
    a8ca:	681b      	ldr	r3, [r3, #0]
    a8cc:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    a8ce:	f107 030c 	add.w	r3, r7, #12
    a8d2:	2200      	movs	r2, #0
    a8d4:	601a      	str	r2, [r3, #0]
    a8d6:	605a      	str	r2, [r3, #4]
    a8d8:	609a      	str	r2, [r3, #8]
    a8da:	60da      	str	r2, [r3, #12]
    a8dc:	611a      	str	r2, [r3, #16]
    a8de:	615a      	str	r2, [r3, #20]
    a8e0:	78fb      	ldrb	r3, [r7, #3]
    a8e2:	f003 0307 	and.w	r3, r3, #7
    a8e6:	b2da      	uxtb	r2, r3
    a8e8:	7b3b      	ldrb	r3, [r7, #12]
    a8ea:	f362 0302 	bfi	r3, r2, #0, #3
    a8ee:	733b      	strb	r3, [r7, #12]
    a8f0:	7b3b      	ldrb	r3, [r7, #12]
    a8f2:	f043 0310 	orr.w	r3, r3, #16
    a8f6:	733b      	strb	r3, [r7, #12]
    a8f8:	7b3b      	ldrb	r3, [r7, #12]
    a8fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a8fe:	733b      	strb	r3, [r7, #12]
    a900:	78bb      	ldrb	r3, [r7, #2]
    a902:	743b      	strb	r3, [r7, #16]
    a904:	2301      	movs	r3, #1
    a906:	61bb      	str	r3, [r7, #24]
    a908:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a90c:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    a90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a910:	7b5b      	ldrb	r3, [r3, #13]
    a912:	2b00      	cmp	r3, #0
    a914:	d003      	beq.n	a91e <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    a916:	2100      	movs	r1, #0
    a918:	6878      	ldr	r0, [r7, #4]
    a91a:	4b0a      	ldr	r3, [pc, #40]	; (a944 <n25q256a_read_reg+0x94>)
    a91c:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    a91e:	f107 030c 	add.w	r3, r7, #12
    a922:	4619      	mov	r1, r3
    a924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a926:	4b08      	ldr	r3, [pc, #32]	; (a948 <n25q256a_read_reg+0x98>)
    a928:	4798      	blx	r3
	if (n25q->xip_mode) {
    a92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a92c:	7b5b      	ldrb	r3, [r3, #13]
    a92e:	2b00      	cmp	r3, #0
    a930:	d003      	beq.n	a93a <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    a932:	2101      	movs	r1, #1
    a934:	6878      	ldr	r0, [r7, #4]
    a936:	4b03      	ldr	r3, [pc, #12]	; (a944 <n25q256a_read_reg+0x94>)
    a938:	4798      	blx	r3
	}
	return status;
    a93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    a93c:	4618      	mov	r0, r3
    a93e:	3730      	adds	r7, #48	; 0x30
    a940:	46bd      	mov	sp, r7
    a942:	bd80      	pop	{r7, pc}
    a944:	0000a7e5 	.word	0x0000a7e5
    a948:	000020e9 	.word	0x000020e9

0000a94c <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    a94c:	b580      	push	{r7, lr}
    a94e:	b08c      	sub	sp, #48	; 0x30
    a950:	af00      	add	r7, sp, #0
    a952:	60f8      	str	r0, [r7, #12]
    a954:	607b      	str	r3, [r7, #4]
    a956:	460b      	mov	r3, r1
    a958:	72fb      	strb	r3, [r7, #11]
    a95a:	4613      	mov	r3, r2
    a95c:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    a95e:	68fb      	ldr	r3, [r7, #12]
    a960:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a962:	68fb      	ldr	r3, [r7, #12]
    a964:	681b      	ldr	r3, [r3, #0]
    a966:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    a968:	f107 0310 	add.w	r3, r7, #16
    a96c:	2200      	movs	r2, #0
    a96e:	601a      	str	r2, [r3, #0]
    a970:	605a      	str	r2, [r3, #4]
    a972:	609a      	str	r2, [r3, #8]
    a974:	60da      	str	r2, [r3, #12]
    a976:	611a      	str	r2, [r3, #16]
    a978:	615a      	str	r2, [r3, #20]
    a97a:	7afb      	ldrb	r3, [r7, #11]
    a97c:	f003 0307 	and.w	r3, r3, #7
    a980:	b2da      	uxtb	r2, r3
    a982:	7c3b      	ldrb	r3, [r7, #16]
    a984:	f362 0302 	bfi	r3, r2, #0, #3
    a988:	743b      	strb	r3, [r7, #16]
    a98a:	7c3b      	ldrb	r3, [r7, #16]
    a98c:	f043 0310 	orr.w	r3, r3, #16
    a990:	743b      	strb	r3, [r7, #16]
    a992:	7c3b      	ldrb	r3, [r7, #16]
    a994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a998:	743b      	strb	r3, [r7, #16]
    a99a:	7c7b      	ldrb	r3, [r7, #17]
    a99c:	2202      	movs	r2, #2
    a99e:	f362 1305 	bfi	r3, r2, #4, #2
    a9a2:	747b      	strb	r3, [r7, #17]
    a9a4:	7abb      	ldrb	r3, [r7, #10]
    a9a6:	753b      	strb	r3, [r7, #20]
    a9a8:	2301      	movs	r3, #1
    a9aa:	61fb      	str	r3, [r7, #28]
    a9ac:	1d3b      	adds	r3, r7, #4
    a9ae:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    a9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a9b2:	7b5b      	ldrb	r3, [r3, #13]
    a9b4:	2b00      	cmp	r3, #0
    a9b6:	d003      	beq.n	a9c0 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    a9b8:	2100      	movs	r1, #0
    a9ba:	68f8      	ldr	r0, [r7, #12]
    a9bc:	4b09      	ldr	r3, [pc, #36]	; (a9e4 <n25q256a_write_reg+0x98>)
    a9be:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    a9c0:	f107 0310 	add.w	r3, r7, #16
    a9c4:	4619      	mov	r1, r3
    a9c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a9c8:	4b07      	ldr	r3, [pc, #28]	; (a9e8 <n25q256a_write_reg+0x9c>)
    a9ca:	4798      	blx	r3
	if (n25q->xip_mode) {
    a9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a9ce:	7b5b      	ldrb	r3, [r3, #13]
    a9d0:	2b00      	cmp	r3, #0
    a9d2:	d003      	beq.n	a9dc <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    a9d4:	2101      	movs	r1, #1
    a9d6:	68f8      	ldr	r0, [r7, #12]
    a9d8:	4b02      	ldr	r3, [pc, #8]	; (a9e4 <n25q256a_write_reg+0x98>)
    a9da:	4798      	blx	r3
	}
}
    a9dc:	bf00      	nop
    a9de:	3730      	adds	r7, #48	; 0x30
    a9e0:	46bd      	mov	sp, r7
    a9e2:	bd80      	pop	{r7, pc}
    a9e4:	0000a7e5 	.word	0x0000a7e5
    a9e8:	000020e9 	.word	0x000020e9

0000a9ec <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    a9ec:	b580      	push	{r7, lr}
    a9ee:	b090      	sub	sp, #64	; 0x40
    a9f0:	af00      	add	r7, sp, #0
    a9f2:	6078      	str	r0, [r7, #4]
    a9f4:	460b      	mov	r3, r1
    a9f6:	70fb      	strb	r3, [r7, #3]
    a9f8:	4613      	mov	r3, r2
    a9fa:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a9fc:	687b      	ldr	r3, [r7, #4]
    a9fe:	681b      	ldr	r3, [r3, #0]
    aa00:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    aa02:	78bb      	ldrb	r3, [r7, #2]
    aa04:	2b00      	cmp	r3, #0
    aa06:	d001      	beq.n	aa0c <n25q256a_write_enable+0x20>
    aa08:	2306      	movs	r3, #6
    aa0a:	e000      	b.n	aa0e <n25q256a_write_enable+0x22>
    aa0c:	2304      	movs	r3, #4
    aa0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    aa12:	f107 0320 	add.w	r3, r7, #32
    aa16:	2200      	movs	r2, #0
    aa18:	601a      	str	r2, [r3, #0]
    aa1a:	605a      	str	r2, [r3, #4]
    aa1c:	609a      	str	r2, [r3, #8]
    aa1e:	60da      	str	r2, [r3, #12]
    aa20:	611a      	str	r2, [r3, #16]
    aa22:	615a      	str	r2, [r3, #20]
    aa24:	78fb      	ldrb	r3, [r7, #3]
    aa26:	f003 0307 	and.w	r3, r3, #7
    aa2a:	b2da      	uxtb	r2, r3
    aa2c:	f897 3020 	ldrb.w	r3, [r7, #32]
    aa30:	f362 0302 	bfi	r3, r2, #0, #3
    aa34:	f887 3020 	strb.w	r3, [r7, #32]
    aa38:	f897 3020 	ldrb.w	r3, [r7, #32]
    aa3c:	f043 0310 	orr.w	r3, r3, #16
    aa40:	f887 3020 	strb.w	r3, [r7, #32]
    aa44:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    aa48:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    aa4c:	f107 0308 	add.w	r3, r7, #8
    aa50:	2200      	movs	r2, #0
    aa52:	601a      	str	r2, [r3, #0]
    aa54:	605a      	str	r2, [r3, #4]
    aa56:	609a      	str	r2, [r3, #8]
    aa58:	60da      	str	r2, [r3, #12]
    aa5a:	611a      	str	r2, [r3, #16]
    aa5c:	615a      	str	r2, [r3, #20]
    aa5e:	78fb      	ldrb	r3, [r7, #3]
    aa60:	f003 0307 	and.w	r3, r3, #7
    aa64:	b2da      	uxtb	r2, r3
    aa66:	7a3b      	ldrb	r3, [r7, #8]
    aa68:	f362 0302 	bfi	r3, r2, #0, #3
    aa6c:	723b      	strb	r3, [r7, #8]
    aa6e:	7a3b      	ldrb	r3, [r7, #8]
    aa70:	f043 0310 	orr.w	r3, r3, #16
    aa74:	723b      	strb	r3, [r7, #8]
    aa76:	7a3b      	ldrb	r3, [r7, #8]
    aa78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aa7c:	723b      	strb	r3, [r7, #8]
    aa7e:	2305      	movs	r3, #5
    aa80:	733b      	strb	r3, [r7, #12]
    aa82:	2301      	movs	r3, #1
    aa84:	617b      	str	r3, [r7, #20]
    aa86:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    aa8a:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    aa8c:	f107 0320 	add.w	r3, r7, #32
    aa90:	4619      	mov	r1, r3
    aa92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    aa94:	4b08      	ldr	r3, [pc, #32]	; (aab8 <n25q256a_write_enable+0xcc>)
    aa96:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    aa98:	f107 0308 	add.w	r3, r7, #8
    aa9c:	4619      	mov	r1, r3
    aa9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    aaa0:	4b05      	ldr	r3, [pc, #20]	; (aab8 <n25q256a_write_enable+0xcc>)
    aaa2:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    aaa4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    aaa8:	f003 0302 	and.w	r3, r3, #2
    aaac:	2b00      	cmp	r3, #0
    aaae:	d0ed      	beq.n	aa8c <n25q256a_write_enable+0xa0>
}
    aab0:	bf00      	nop
    aab2:	3740      	adds	r7, #64	; 0x40
    aab4:	46bd      	mov	sp, r7
    aab6:	bd80      	pop	{r7, pc}
    aab8:	000020e9 	.word	0x000020e9

0000aabc <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    aabc:	b590      	push	{r4, r7, lr}
    aabe:	b087      	sub	sp, #28
    aac0:	af00      	add	r7, sp, #0
    aac2:	6078      	str	r0, [r7, #4]
    aac4:	460b      	mov	r3, r1
    aac6:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    aac8:	687b      	ldr	r3, [r7, #4]
    aaca:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    aacc:	68fb      	ldr	r3, [r7, #12]
    aace:	7b1b      	ldrb	r3, [r3, #12]
    aad0:	2b00      	cmp	r3, #0
    aad2:	d001      	beq.n	aad8 <n25q256a_switch_mode+0x1c>
    aad4:	2306      	movs	r3, #6
    aad6:	e000      	b.n	aada <n25q256a_switch_mode+0x1e>
    aad8:	2300      	movs	r3, #0
    aada:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    aadc:	7afb      	ldrb	r3, [r7, #11]
    aade:	2265      	movs	r2, #101	; 0x65
    aae0:	4619      	mov	r1, r3
    aae2:	6878      	ldr	r0, [r7, #4]
    aae4:	4b25      	ldr	r3, [pc, #148]	; (ab7c <n25q256a_switch_mode+0xc0>)
    aae6:	4798      	blx	r3
    aae8:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    aaea:	2300      	movs	r3, #0
    aaec:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    aaee:	68fb      	ldr	r3, [r7, #12]
    aaf0:	7b1b      	ldrb	r3, [r3, #12]
    aaf2:	78fa      	ldrb	r2, [r7, #3]
    aaf4:	429a      	cmp	r2, r3
    aaf6:	d03d      	beq.n	ab74 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    aaf8:	78fb      	ldrb	r3, [r7, #3]
    aafa:	2b00      	cmp	r3, #0
    aafc:	d00b      	beq.n	ab16 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    aafe:	697b      	ldr	r3, [r7, #20]
    ab00:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ab04:	2b00      	cmp	r3, #0
    ab06:	d011      	beq.n	ab2c <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    ab08:	697b      	ldr	r3, [r7, #20]
    ab0a:	f003 031f 	and.w	r3, r3, #31
    ab0e:	617b      	str	r3, [r7, #20]
			modify = 1;
    ab10:	2301      	movs	r3, #1
    ab12:	74fb      	strb	r3, [r7, #19]
    ab14:	e00a      	b.n	ab2c <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    ab16:	697b      	ldr	r3, [r7, #20]
    ab18:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ab1c:	2b00      	cmp	r3, #0
    ab1e:	d105      	bne.n	ab2c <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    ab20:	697b      	ldr	r3, [r7, #20]
    ab22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    ab26:	617b      	str	r3, [r7, #20]
			modify = 1;
    ab28:	2301      	movs	r3, #1
    ab2a:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    ab2c:	7cfb      	ldrb	r3, [r7, #19]
    ab2e:	2b00      	cmp	r3, #0
    ab30:	d021      	beq.n	ab76 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    ab32:	68fb      	ldr	r3, [r7, #12]
    ab34:	78fa      	ldrb	r2, [r7, #3]
    ab36:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    ab38:	7afb      	ldrb	r3, [r7, #11]
    ab3a:	2201      	movs	r2, #1
    ab3c:	4619      	mov	r1, r3
    ab3e:	6878      	ldr	r0, [r7, #4]
    ab40:	4b0f      	ldr	r3, [pc, #60]	; (ab80 <n25q256a_switch_mode+0xc4>)
    ab42:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    ab44:	7af9      	ldrb	r1, [r7, #11]
    ab46:	697b      	ldr	r3, [r7, #20]
    ab48:	2261      	movs	r2, #97	; 0x61
    ab4a:	6878      	ldr	r0, [r7, #4]
    ab4c:	4c0d      	ldr	r4, [pc, #52]	; (ab84 <n25q256a_switch_mode+0xc8>)
    ab4e:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ab50:	78fb      	ldrb	r3, [r7, #3]
    ab52:	2b00      	cmp	r3, #0
    ab54:	d001      	beq.n	ab5a <n25q256a_switch_mode+0x9e>
    ab56:	2306      	movs	r3, #6
    ab58:	e000      	b.n	ab5c <n25q256a_switch_mode+0xa0>
    ab5a:	2300      	movs	r3, #0
    ab5c:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    ab5e:	7afb      	ldrb	r3, [r7, #11]
    ab60:	2265      	movs	r2, #101	; 0x65
    ab62:	4619      	mov	r1, r3
    ab64:	6878      	ldr	r0, [r7, #4]
    ab66:	4b05      	ldr	r3, [pc, #20]	; (ab7c <n25q256a_switch_mode+0xc0>)
    ab68:	4798      	blx	r3
    ab6a:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    ab6c:	68fb      	ldr	r3, [r7, #12]
    ab6e:	78fa      	ldrb	r2, [r7, #3]
    ab70:	731a      	strb	r2, [r3, #12]
    ab72:	e000      	b.n	ab76 <n25q256a_switch_mode+0xba>
		return;
    ab74:	bf00      	nop
	}
}
    ab76:	371c      	adds	r7, #28
    ab78:	46bd      	mov	sp, r7
    ab7a:	bd90      	pop	{r4, r7, pc}
    ab7c:	0000a8b1 	.word	0x0000a8b1
    ab80:	0000a9ed 	.word	0x0000a9ed
    ab84:	0000a94d 	.word	0x0000a94d

0000ab88 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    ab88:	b580      	push	{r7, lr}
    ab8a:	b086      	sub	sp, #24
    ab8c:	af00      	add	r7, sp, #0
    ab8e:	60f8      	str	r0, [r7, #12]
    ab90:	60b9      	str	r1, [r7, #8]
    ab92:	607a      	str	r2, [r7, #4]
    ab94:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    ab96:	68fb      	ldr	r3, [r7, #12]
    ab98:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    ab9a:	4a0c      	ldr	r2, [pc, #48]	; (abcc <n25q256a_construct+0x44>)
    ab9c:	68b9      	ldr	r1, [r7, #8]
    ab9e:	68f8      	ldr	r0, [r7, #12]
    aba0:	4b0b      	ldr	r3, [pc, #44]	; (abd0 <n25q256a_construct+0x48>)
    aba2:	4798      	blx	r3
	n25q->quad_mode    = 0;
    aba4:	697b      	ldr	r3, [r7, #20]
    aba6:	2200      	movs	r2, #0
    aba8:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    abaa:	697b      	ldr	r3, [r7, #20]
    abac:	2200      	movs	r2, #0
    abae:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    abb0:	697b      	ldr	r3, [r7, #20]
    abb2:	687a      	ldr	r2, [r7, #4]
    abb4:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    abb6:	78fb      	ldrb	r3, [r7, #3]
    abb8:	4619      	mov	r1, r3
    abba:	68f8      	ldr	r0, [r7, #12]
    abbc:	4b05      	ldr	r3, [pc, #20]	; (abd4 <n25q256a_construct+0x4c>)
    abbe:	4798      	blx	r3
	return me;
    abc0:	68fb      	ldr	r3, [r7, #12]
}
    abc2:	4618      	mov	r0, r3
    abc4:	3718      	adds	r7, #24
    abc6:	46bd      	mov	sp, r7
    abc8:	bd80      	pop	{r7, pc}
    abca:	bf00      	nop
    abcc:	0000d2f4 	.word	0x0000d2f4
    abd0:	0000b065 	.word	0x0000b065
    abd4:	0000aabd 	.word	0x0000aabd

0000abd8 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    abd8:	b580      	push	{r7, lr}
    abda:	b08c      	sub	sp, #48	; 0x30
    abdc:	af00      	add	r7, sp, #0
    abde:	60f8      	str	r0, [r7, #12]
    abe0:	60b9      	str	r1, [r7, #8]
    abe2:	607a      	str	r2, [r7, #4]
    abe4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    abe6:	68fb      	ldr	r3, [r7, #12]
    abe8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    abea:	68fb      	ldr	r3, [r7, #12]
    abec:	681b      	ldr	r3, [r3, #0]
    abee:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    abf0:	f107 0310 	add.w	r3, r7, #16
    abf4:	2200      	movs	r2, #0
    abf6:	601a      	str	r2, [r3, #0]
    abf8:	605a      	str	r2, [r3, #4]
    abfa:	609a      	str	r2, [r3, #8]
    abfc:	60da      	str	r2, [r3, #12]
    abfe:	611a      	str	r2, [r3, #16]
    ac00:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ac02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac04:	7b1b      	ldrb	r3, [r3, #12]
    ac06:	2b00      	cmp	r3, #0
    ac08:	d001      	beq.n	ac0e <n25q256a_read+0x36>
    ac0a:	2206      	movs	r2, #6
    ac0c:	e000      	b.n	ac10 <n25q256a_read+0x38>
    ac0e:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    ac10:	7c3b      	ldrb	r3, [r7, #16]
    ac12:	f362 0302 	bfi	r3, r2, #0, #3
    ac16:	743b      	strb	r3, [r7, #16]
    ac18:	7c3b      	ldrb	r3, [r7, #16]
    ac1a:	f043 0310 	orr.w	r3, r3, #16
    ac1e:	743b      	strb	r3, [r7, #16]
    ac20:	7c3b      	ldrb	r3, [r7, #16]
    ac22:	f043 0320 	orr.w	r3, r3, #32
    ac26:	743b      	strb	r3, [r7, #16]
    ac28:	7c3b      	ldrb	r3, [r7, #16]
    ac2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ac2e:	743b      	strb	r3, [r7, #16]
    ac30:	7c7b      	ldrb	r3, [r7, #17]
    ac32:	2201      	movs	r2, #1
    ac34:	f362 1305 	bfi	r3, r2, #4, #2
    ac38:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    ac3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac3c:	7b1b      	ldrb	r3, [r3, #12]
    ac3e:	2b00      	cmp	r3, #0
    ac40:	d001      	beq.n	ac46 <n25q256a_read+0x6e>
    ac42:	220a      	movs	r2, #10
    ac44:	e000      	b.n	ac48 <n25q256a_read+0x70>
    ac46:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    ac48:	7cbb      	ldrb	r3, [r7, #18]
    ac4a:	f362 0304 	bfi	r3, r2, #0, #5
    ac4e:	74bb      	strb	r3, [r7, #18]
    ac50:	230b      	movs	r3, #11
    ac52:	753b      	strb	r3, [r7, #20]
    ac54:	687b      	ldr	r3, [r7, #4]
    ac56:	61bb      	str	r3, [r7, #24]
    ac58:	683b      	ldr	r3, [r7, #0]
    ac5a:	61fb      	str	r3, [r7, #28]
    ac5c:	68bb      	ldr	r3, [r7, #8]
    ac5e:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    ac60:	f107 0310 	add.w	r3, r7, #16
    ac64:	4619      	mov	r1, r3
    ac66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ac68:	4b03      	ldr	r3, [pc, #12]	; (ac78 <n25q256a_read+0xa0>)
    ac6a:	4798      	blx	r3
	return ERR_NONE;
    ac6c:	2300      	movs	r3, #0
}
    ac6e:	4618      	mov	r0, r3
    ac70:	3730      	adds	r7, #48	; 0x30
    ac72:	46bd      	mov	sp, r7
    ac74:	bd80      	pop	{r7, pc}
    ac76:	bf00      	nop
    ac78:	000020e9 	.word	0x000020e9

0000ac7c <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ac7c:	b580      	push	{r7, lr}
    ac7e:	b08c      	sub	sp, #48	; 0x30
    ac80:	af00      	add	r7, sp, #0
    ac82:	60f8      	str	r0, [r7, #12]
    ac84:	60b9      	str	r1, [r7, #8]
    ac86:	607a      	str	r2, [r7, #4]
    ac88:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ac8a:	68fb      	ldr	r3, [r7, #12]
    ac8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ac8e:	68fb      	ldr	r3, [r7, #12]
    ac90:	681b      	ldr	r3, [r3, #0]
    ac92:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ac94:	f107 0310 	add.w	r3, r7, #16
    ac98:	2200      	movs	r2, #0
    ac9a:	601a      	str	r2, [r3, #0]
    ac9c:	605a      	str	r2, [r3, #4]
    ac9e:	609a      	str	r2, [r3, #8]
    aca0:	60da      	str	r2, [r3, #12]
    aca2:	611a      	str	r2, [r3, #16]
    aca4:	615a      	str	r2, [r3, #20]
    aca6:	7c3b      	ldrb	r3, [r7, #16]
    aca8:	f043 0310 	orr.w	r3, r3, #16
    acac:	743b      	strb	r3, [r7, #16]
    acae:	7c3b      	ldrb	r3, [r7, #16]
    acb0:	f043 0320 	orr.w	r3, r3, #32
    acb4:	743b      	strb	r3, [r7, #16]
    acb6:	7c3b      	ldrb	r3, [r7, #16]
    acb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    acbc:	743b      	strb	r3, [r7, #16]
    acbe:	7c7b      	ldrb	r3, [r7, #17]
    acc0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    acc4:	747b      	strb	r3, [r7, #17]
    acc6:	2302      	movs	r3, #2
    acc8:	753b      	strb	r3, [r7, #20]
    acca:	687b      	ldr	r3, [r7, #4]
    accc:	61bb      	str	r3, [r7, #24]
    acce:	683b      	ldr	r3, [r7, #0]
    acd0:	61fb      	str	r3, [r7, #28]
    acd2:	68bb      	ldr	r3, [r7, #8]
    acd4:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    acd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    acd8:	7b1b      	ldrb	r3, [r3, #12]
    acda:	2b00      	cmp	r3, #0
    acdc:	d001      	beq.n	ace2 <n25q256a_write+0x66>
    acde:	2206      	movs	r2, #6
    ace0:	e000      	b.n	ace4 <n25q256a_write+0x68>
    ace2:	2200      	movs	r2, #0
    ace4:	7c3b      	ldrb	r3, [r7, #16]
    ace6:	f362 0302 	bfi	r3, r2, #0, #3
    acea:	743b      	strb	r3, [r7, #16]
	while (length) {
    acec:	e035      	b.n	ad5a <n25q256a_write+0xde>
		cmd.address = address;
    acee:	687b      	ldr	r3, [r7, #4]
    acf0:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    acf2:	683b      	ldr	r3, [r7, #0]
    acf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    acf8:	d802      	bhi.n	ad00 <n25q256a_write+0x84>
			cmd.buf_len = length;
    acfa:	683b      	ldr	r3, [r7, #0]
    acfc:	61fb      	str	r3, [r7, #28]
    acfe:	e002      	b.n	ad06 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    ad00:	f44f 7380 	mov.w	r3, #256	; 0x100
    ad04:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ad06:	7c3b      	ldrb	r3, [r7, #16]
    ad08:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ad0c:	b2db      	uxtb	r3, r3
    ad0e:	2201      	movs	r2, #1
    ad10:	4619      	mov	r1, r3
    ad12:	68f8      	ldr	r0, [r7, #12]
    ad14:	4b19      	ldr	r3, [pc, #100]	; (ad7c <n25q256a_write+0x100>)
    ad16:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    ad18:	f107 0310 	add.w	r3, r7, #16
    ad1c:	4619      	mov	r1, r3
    ad1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ad20:	4b17      	ldr	r3, [pc, #92]	; (ad80 <n25q256a_write+0x104>)
    ad22:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ad24:	bf00      	nop
    ad26:	7c3b      	ldrb	r3, [r7, #16]
    ad28:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ad2c:	b2db      	uxtb	r3, r3
    ad2e:	2270      	movs	r2, #112	; 0x70
    ad30:	4619      	mov	r1, r3
    ad32:	68f8      	ldr	r0, [r7, #12]
    ad34:	4b13      	ldr	r3, [pc, #76]	; (ad84 <n25q256a_write+0x108>)
    ad36:	4798      	blx	r3
    ad38:	4603      	mov	r3, r0
    ad3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad3e:	2b00      	cmp	r3, #0
    ad40:	d0f1      	beq.n	ad26 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    ad42:	6a3a      	ldr	r2, [r7, #32]
    ad44:	69fb      	ldr	r3, [r7, #28]
    ad46:	4413      	add	r3, r2
    ad48:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    ad4a:	69fb      	ldr	r3, [r7, #28]
    ad4c:	683a      	ldr	r2, [r7, #0]
    ad4e:	1ad3      	subs	r3, r2, r3
    ad50:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    ad52:	69fb      	ldr	r3, [r7, #28]
    ad54:	687a      	ldr	r2, [r7, #4]
    ad56:	4413      	add	r3, r2
    ad58:	607b      	str	r3, [r7, #4]
	while (length) {
    ad5a:	683b      	ldr	r3, [r7, #0]
    ad5c:	2b00      	cmp	r3, #0
    ad5e:	d1c6      	bne.n	acee <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    ad60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ad62:	7b5b      	ldrb	r3, [r3, #13]
    ad64:	2b00      	cmp	r3, #0
    ad66:	d003      	beq.n	ad70 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    ad68:	2101      	movs	r1, #1
    ad6a:	68f8      	ldr	r0, [r7, #12]
    ad6c:	4b06      	ldr	r3, [pc, #24]	; (ad88 <n25q256a_write+0x10c>)
    ad6e:	4798      	blx	r3
	}
	return ERR_NONE;
    ad70:	2300      	movs	r3, #0
}
    ad72:	4618      	mov	r0, r3
    ad74:	3730      	adds	r7, #48	; 0x30
    ad76:	46bd      	mov	sp, r7
    ad78:	bd80      	pop	{r7, pc}
    ad7a:	bf00      	nop
    ad7c:	0000a9ed 	.word	0x0000a9ed
    ad80:	000020e9 	.word	0x000020e9
    ad84:	0000a8b1 	.word	0x0000a8b1
    ad88:	0000a7e5 	.word	0x0000a7e5

0000ad8c <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    ad8c:	b580      	push	{r7, lr}
    ad8e:	b090      	sub	sp, #64	; 0x40
    ad90:	af00      	add	r7, sp, #0
    ad92:	60f8      	str	r0, [r7, #12]
    ad94:	60b9      	str	r1, [r7, #8]
    ad96:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ad98:	68fb      	ldr	r3, [r7, #12]
    ad9a:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ad9c:	68fb      	ldr	r3, [r7, #12]
    ad9e:	681b      	ldr	r3, [r3, #0]
    ada0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    ada2:	f107 0314 	add.w	r3, r7, #20
    ada6:	2200      	movs	r2, #0
    ada8:	601a      	str	r2, [r3, #0]
    adaa:	605a      	str	r2, [r3, #4]
    adac:	609a      	str	r2, [r3, #8]
    adae:	60da      	str	r2, [r3, #12]
    adb0:	611a      	str	r2, [r3, #16]
    adb2:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    adb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    adb6:	7b1b      	ldrb	r3, [r3, #12]
    adb8:	2b00      	cmp	r3, #0
    adba:	d001      	beq.n	adc0 <n25q256a_erase+0x34>
    adbc:	2206      	movs	r2, #6
    adbe:	e000      	b.n	adc2 <n25q256a_erase+0x36>
    adc0:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    adc2:	7d3b      	ldrb	r3, [r7, #20]
    adc4:	f362 0302 	bfi	r3, r2, #0, #3
    adc8:	753b      	strb	r3, [r7, #20]
    adca:	7d3b      	ldrb	r3, [r7, #20]
    adcc:	f043 0310 	orr.w	r3, r3, #16
    add0:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    add2:	687b      	ldr	r3, [r7, #4]
    add4:	4a56      	ldr	r2, [pc, #344]	; (af30 <n25q256a_erase+0x1a4>)
    add6:	4293      	cmp	r3, r2
    add8:	bf94      	ite	ls
    adda:	2301      	movls	r3, #1
    addc:	2300      	movhi	r3, #0
    adde:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    ade0:	7d3b      	ldrb	r3, [r7, #20]
    ade2:	f362 1345 	bfi	r3, r2, #5, #1
    ade6:	753b      	strb	r3, [r7, #20]
    ade8:	7d7b      	ldrb	r3, [r7, #21]
    adea:	2202      	movs	r2, #2
    adec:	f362 1305 	bfi	r3, r2, #4, #2
    adf0:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    adf2:	68bb      	ldr	r3, [r7, #8]
    adf4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    adf6:	687b      	ldr	r3, [r7, #4]
    adf8:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    adfa:	2300      	movs	r3, #0
    adfc:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    adfe:	687b      	ldr	r3, [r7, #4]
    ae00:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ae04:	2b00      	cmp	r3, #0
    ae06:	d104      	bne.n	ae12 <n25q256a_erase+0x86>
    ae08:	68bb      	ldr	r3, [r7, #8]
    ae0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ae0e:	2b00      	cmp	r3, #0
    ae10:	d002      	beq.n	ae18 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    ae12:	f06f 030c 	mvn.w	r3, #12
    ae16:	e087      	b.n	af28 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    ae18:	687b      	ldr	r3, [r7, #4]
    ae1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    ae1e:	d368      	bcc.n	aef2 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    ae20:	23c7      	movs	r3, #199	; 0xc7
    ae22:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ae24:	7d3b      	ldrb	r3, [r7, #20]
    ae26:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae2a:	b2db      	uxtb	r3, r3
    ae2c:	2201      	movs	r2, #1
    ae2e:	4619      	mov	r1, r3
    ae30:	68f8      	ldr	r0, [r7, #12]
    ae32:	4b40      	ldr	r3, [pc, #256]	; (af34 <n25q256a_erase+0x1a8>)
    ae34:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    ae36:	f107 0314 	add.w	r3, r7, #20
    ae3a:	4619      	mov	r1, r3
    ae3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ae3e:	4b3e      	ldr	r3, [pc, #248]	; (af38 <n25q256a_erase+0x1ac>)
    ae40:	4798      	blx	r3
    ae42:	e059      	b.n	aef8 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    ae44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae46:	b29b      	uxth	r3, r3
    ae48:	2b00      	cmp	r3, #0
    ae4a:	d11f      	bne.n	ae8c <n25q256a_erase+0x100>
    ae4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    ae52:	d31b      	bcc.n	ae8c <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    ae54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae56:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    ae58:	23d8      	movs	r3, #216	; 0xd8
    ae5a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ae5c:	7d3b      	ldrb	r3, [r7, #20]
    ae5e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae62:	b2db      	uxtb	r3, r3
    ae64:	2201      	movs	r2, #1
    ae66:	4619      	mov	r1, r3
    ae68:	68f8      	ldr	r0, [r7, #12]
    ae6a:	4b32      	ldr	r3, [pc, #200]	; (af34 <n25q256a_erase+0x1a8>)
    ae6c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ae6e:	f107 0314 	add.w	r3, r7, #20
    ae72:	4619      	mov	r1, r3
    ae74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ae76:	4b30      	ldr	r3, [pc, #192]	; (af38 <n25q256a_erase+0x1ac>)
    ae78:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    ae7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae7c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ae80:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    ae82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae84:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    ae88:	63bb      	str	r3, [r7, #56]	; 0x38
    ae8a:	e023      	b.n	aed4 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    ae8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    ae92:	d31b      	bcc.n	aecc <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    ae94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae96:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    ae98:	2320      	movs	r3, #32
    ae9a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ae9c:	7d3b      	ldrb	r3, [r7, #20]
    ae9e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aea2:	b2db      	uxtb	r3, r3
    aea4:	2201      	movs	r2, #1
    aea6:	4619      	mov	r1, r3
    aea8:	68f8      	ldr	r0, [r7, #12]
    aeaa:	4b22      	ldr	r3, [pc, #136]	; (af34 <n25q256a_erase+0x1a8>)
    aeac:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    aeae:	f107 0314 	add.w	r3, r7, #20
    aeb2:	4619      	mov	r1, r3
    aeb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    aeb6:	4b20      	ldr	r3, [pc, #128]	; (af38 <n25q256a_erase+0x1ac>)
    aeb8:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    aeba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    aebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    aec0:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    aec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aec4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    aec8:	63bb      	str	r3, [r7, #56]	; 0x38
    aeca:	e003      	b.n	aed4 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    aecc:	f06f 030c 	mvn.w	r3, #12
    aed0:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    aed2:	e011      	b.n	aef8 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    aed4:	bf00      	nop
    aed6:	7d3b      	ldrb	r3, [r7, #20]
    aed8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aedc:	b2db      	uxtb	r3, r3
    aede:	2270      	movs	r2, #112	; 0x70
    aee0:	4619      	mov	r1, r3
    aee2:	68f8      	ldr	r0, [r7, #12]
    aee4:	4b15      	ldr	r3, [pc, #84]	; (af3c <n25q256a_erase+0x1b0>)
    aee6:	4798      	blx	r3
    aee8:	4603      	mov	r3, r0
    aeea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aeee:	2b00      	cmp	r3, #0
    aef0:	d0f1      	beq.n	aed6 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    aef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aef4:	2b00      	cmp	r3, #0
    aef6:	d1a5      	bne.n	ae44 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    aef8:	bf00      	nop
    aefa:	7d3b      	ldrb	r3, [r7, #20]
    aefc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    af00:	b2db      	uxtb	r3, r3
    af02:	2270      	movs	r2, #112	; 0x70
    af04:	4619      	mov	r1, r3
    af06:	68f8      	ldr	r0, [r7, #12]
    af08:	4b0c      	ldr	r3, [pc, #48]	; (af3c <n25q256a_erase+0x1b0>)
    af0a:	4798      	blx	r3
    af0c:	4603      	mov	r3, r0
    af0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af12:	2b00      	cmp	r3, #0
    af14:	d0f1      	beq.n	aefa <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af18:	7b5b      	ldrb	r3, [r3, #13]
    af1a:	2b00      	cmp	r3, #0
    af1c:	d003      	beq.n	af26 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    af1e:	2101      	movs	r1, #1
    af20:	68f8      	ldr	r0, [r7, #12]
    af22:	4b07      	ldr	r3, [pc, #28]	; (af40 <n25q256a_erase+0x1b4>)
    af24:	4798      	blx	r3
	}
	return rc;
    af26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    af28:	4618      	mov	r0, r3
    af2a:	3740      	adds	r7, #64	; 0x40
    af2c:	46bd      	mov	sp, r7
    af2e:	bd80      	pop	{r7, pc}
    af30:	001fffff 	.word	0x001fffff
    af34:	0000a9ed 	.word	0x0000a9ed
    af38:	000020e9 	.word	0x000020e9
    af3c:	0000a8b1 	.word	0x0000a8b1
    af40:	0000a7e5 	.word	0x0000a7e5

0000af44 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    af44:	b590      	push	{r4, r7, lr}
    af46:	b085      	sub	sp, #20
    af48:	af00      	add	r7, sp, #0
    af4a:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    af4c:	687b      	ldr	r3, [r7, #4]
    af4e:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    af50:	68fb      	ldr	r3, [r7, #12]
    af52:	7b1b      	ldrb	r3, [r3, #12]
    af54:	2b00      	cmp	r3, #0
    af56:	d001      	beq.n	af5c <n25q256a_enable_xip+0x18>
    af58:	2306      	movs	r3, #6
    af5a:	e000      	b.n	af5e <n25q256a_enable_xip+0x1a>
    af5c:	2300      	movs	r3, #0
    af5e:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    af60:	68fb      	ldr	r3, [r7, #12]
    af62:	7b5b      	ldrb	r3, [r3, #13]
    af64:	2b00      	cmp	r3, #0
    af66:	d129      	bne.n	afbc <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    af68:	7afb      	ldrb	r3, [r7, #11]
    af6a:	2285      	movs	r2, #133	; 0x85
    af6c:	4619      	mov	r1, r3
    af6e:	6878      	ldr	r0, [r7, #4]
    af70:	4b15      	ldr	r3, [pc, #84]	; (afc8 <n25q256a_enable_xip+0x84>)
    af72:	4798      	blx	r3
    af74:	4603      	mov	r3, r0
    af76:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    af78:	7abb      	ldrb	r3, [r7, #10]
    af7a:	f003 0308 	and.w	r3, r3, #8
    af7e:	2b00      	cmp	r3, #0
    af80:	d015      	beq.n	afae <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    af82:	7abb      	ldrb	r3, [r7, #10]
    af84:	f023 0308 	bic.w	r3, r3, #8
    af88:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    af8a:	7abb      	ldrb	r3, [r7, #10]
    af8c:	7af9      	ldrb	r1, [r7, #11]
    af8e:	2281      	movs	r2, #129	; 0x81
    af90:	6878      	ldr	r0, [r7, #4]
    af92:	4c0e      	ldr	r4, [pc, #56]	; (afcc <n25q256a_enable_xip+0x88>)
    af94:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    af96:	bf00      	nop
    af98:	7afb      	ldrb	r3, [r7, #11]
    af9a:	2270      	movs	r2, #112	; 0x70
    af9c:	4619      	mov	r1, r3
    af9e:	6878      	ldr	r0, [r7, #4]
    afa0:	4b09      	ldr	r3, [pc, #36]	; (afc8 <n25q256a_enable_xip+0x84>)
    afa2:	4798      	blx	r3
    afa4:	4603      	mov	r3, r0
    afa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    afaa:	2b00      	cmp	r3, #0
    afac:	d0f4      	beq.n	af98 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    afae:	68fb      	ldr	r3, [r7, #12]
    afb0:	2201      	movs	r2, #1
    afb2:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    afb4:	2101      	movs	r1, #1
    afb6:	6878      	ldr	r0, [r7, #4]
    afb8:	4b05      	ldr	r3, [pc, #20]	; (afd0 <n25q256a_enable_xip+0x8c>)
    afba:	4798      	blx	r3
	}
	return ERR_NONE;
    afbc:	2300      	movs	r3, #0
}
    afbe:	4618      	mov	r0, r3
    afc0:	3714      	adds	r7, #20
    afc2:	46bd      	mov	sp, r7
    afc4:	bd90      	pop	{r4, r7, pc}
    afc6:	bf00      	nop
    afc8:	0000a8b1 	.word	0x0000a8b1
    afcc:	0000a94d 	.word	0x0000a94d
    afd0:	0000a7e5 	.word	0x0000a7e5

0000afd4 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    afd4:	b580      	push	{r7, lr}
    afd6:	b086      	sub	sp, #24
    afd8:	af00      	add	r7, sp, #0
    afda:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    afdc:	687b      	ldr	r3, [r7, #4]
    afde:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    afe0:	687b      	ldr	r3, [r7, #4]
    afe2:	681b      	ldr	r3, [r3, #0]
    afe4:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    afe6:	697b      	ldr	r3, [r7, #20]
    afe8:	7b1b      	ldrb	r3, [r3, #12]
    afea:	2b00      	cmp	r3, #0
    afec:	d001      	beq.n	aff2 <n25q256a_disable_xip+0x1e>
    afee:	2306      	movs	r3, #6
    aff0:	e000      	b.n	aff4 <n25q256a_disable_xip+0x20>
    aff2:	2300      	movs	r3, #0
    aff4:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    aff6:	2100      	movs	r1, #0
    aff8:	6878      	ldr	r0, [r7, #4]
    affa:	4b15      	ldr	r3, [pc, #84]	; (b050 <n25q256a_disable_xip+0x7c>)
    affc:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    affe:	7bfb      	ldrb	r3, [r7, #15]
    b000:	2285      	movs	r2, #133	; 0x85
    b002:	4619      	mov	r1, r3
    b004:	6878      	ldr	r0, [r7, #4]
    b006:	4b13      	ldr	r3, [pc, #76]	; (b054 <n25q256a_disable_xip+0x80>)
    b008:	4798      	blx	r3
    b00a:	4603      	mov	r3, r0
    b00c:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    b00e:	7bbb      	ldrb	r3, [r7, #14]
    b010:	f003 0308 	and.w	r3, r3, #8
    b014:	2b00      	cmp	r3, #0
    b016:	d113      	bne.n	b040 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    b018:	697b      	ldr	r3, [r7, #20]
    b01a:	689b      	ldr	r3, [r3, #8]
    b01c:	2b00      	cmp	r3, #0
    b01e:	d00f      	beq.n	b040 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    b020:	693b      	ldr	r3, [r7, #16]
    b022:	681b      	ldr	r3, [r3, #0]
    b024:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    b026:	6938      	ldr	r0, [r7, #16]
    b028:	4b0b      	ldr	r3, [pc, #44]	; (b058 <n25q256a_disable_xip+0x84>)
    b02a:	4798      	blx	r3
			n25q->pin_exit_xip();
    b02c:	697b      	ldr	r3, [r7, #20]
    b02e:	689b      	ldr	r3, [r3, #8]
    b030:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    b032:	68b9      	ldr	r1, [r7, #8]
    b034:	6938      	ldr	r0, [r7, #16]
    b036:	4b09      	ldr	r3, [pc, #36]	; (b05c <n25q256a_disable_xip+0x88>)
    b038:	4798      	blx	r3
			qspi_sync_enable(descr);
    b03a:	6938      	ldr	r0, [r7, #16]
    b03c:	4b08      	ldr	r3, [pc, #32]	; (b060 <n25q256a_disable_xip+0x8c>)
    b03e:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    b040:	697b      	ldr	r3, [r7, #20]
    b042:	2200      	movs	r2, #0
    b044:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b046:	2300      	movs	r3, #0
}
    b048:	4618      	mov	r0, r3
    b04a:	3718      	adds	r7, #24
    b04c:	46bd      	mov	sp, r7
    b04e:	bd80      	pop	{r7, pc}
    b050:	0000a7e5 	.word	0x0000a7e5
    b054:	0000a8b1 	.word	0x0000a8b1
    b058:	000020ad 	.word	0x000020ad
    b05c:	00002025 	.word	0x00002025
    b060:	00002071 	.word	0x00002071

0000b064 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    b064:	b480      	push	{r7}
    b066:	b085      	sub	sp, #20
    b068:	af00      	add	r7, sp, #0
    b06a:	60f8      	str	r0, [r7, #12]
    b06c:	60b9      	str	r1, [r7, #8]
    b06e:	607a      	str	r2, [r7, #4]
	me->io        = io;
    b070:	68fb      	ldr	r3, [r7, #12]
    b072:	68ba      	ldr	r2, [r7, #8]
    b074:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    b076:	68fb      	ldr	r3, [r7, #12]
    b078:	687a      	ldr	r2, [r7, #4]
    b07a:	605a      	str	r2, [r3, #4]

	return me;
    b07c:	68fb      	ldr	r3, [r7, #12]
}
    b07e:	4618      	mov	r0, r3
    b080:	3714      	adds	r7, #20
    b082:	46bd      	mov	sp, r7
    b084:	f85d 7b04 	ldr.w	r7, [sp], #4
    b088:	4770      	bx	lr

0000b08a <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    b08a:	b480      	push	{r7}
    b08c:	b083      	sub	sp, #12
    b08e:	af00      	add	r7, sp, #0
    b090:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b092:	687b      	ldr	r3, [r7, #4]
    b094:	781b      	ldrb	r3, [r3, #0]
    b096:	b29a      	uxth	r2, r3
    b098:	687b      	ldr	r3, [r7, #4]
    b09a:	3301      	adds	r3, #1
    b09c:	781b      	ldrb	r3, [r3, #0]
    b09e:	b29b      	uxth	r3, r3
    b0a0:	021b      	lsls	r3, r3, #8
    b0a2:	b29b      	uxth	r3, r3
    b0a4:	4413      	add	r3, r2
    b0a6:	b29b      	uxth	r3, r3
}
    b0a8:	4618      	mov	r0, r3
    b0aa:	370c      	adds	r7, #12
    b0ac:	46bd      	mov	sp, r7
    b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0b2:	4770      	bx	lr

0000b0b4 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    b0b4:	b480      	push	{r7}
    b0b6:	b083      	sub	sp, #12
    b0b8:	af00      	add	r7, sp, #0
    b0ba:	6078      	str	r0, [r7, #4]
	return desc[0];
    b0bc:	687b      	ldr	r3, [r7, #4]
    b0be:	781b      	ldrb	r3, [r3, #0]
}
    b0c0:	4618      	mov	r0, r3
    b0c2:	370c      	adds	r7, #12
    b0c4:	46bd      	mov	sp, r7
    b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0ca:	4770      	bx	lr

0000b0cc <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    b0cc:	b580      	push	{r7, lr}
    b0ce:	b082      	sub	sp, #8
    b0d0:	af00      	add	r7, sp, #0
    b0d2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b0d4:	6878      	ldr	r0, [r7, #4]
    b0d6:	4b05      	ldr	r3, [pc, #20]	; (b0ec <usb_desc_next+0x20>)
    b0d8:	4798      	blx	r3
    b0da:	4603      	mov	r3, r0
    b0dc:	461a      	mov	r2, r3
    b0de:	687b      	ldr	r3, [r7, #4]
    b0e0:	4413      	add	r3, r2
}
    b0e2:	4618      	mov	r0, r3
    b0e4:	3708      	adds	r7, #8
    b0e6:	46bd      	mov	sp, r7
    b0e8:	bd80      	pop	{r7, pc}
    b0ea:	bf00      	nop
    b0ec:	0000b0b5 	.word	0x0000b0b5

0000b0f0 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b0f0:	b580      	push	{r7, lr}
    b0f2:	b08c      	sub	sp, #48	; 0x30
    b0f4:	af00      	add	r7, sp, #0
    b0f6:	6078      	str	r0, [r7, #4]
    b0f8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b0fa:	687b      	ldr	r3, [r7, #4]
    b0fc:	689b      	ldr	r3, [r3, #8]
    b0fe:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    b100:	683b      	ldr	r3, [r7, #0]
    b102:	681b      	ldr	r3, [r3, #0]
    b104:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b106:	2300      	movs	r3, #0
    b108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b10c:	e08f      	b.n	b22e <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    b10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b110:	2b00      	cmp	r3, #0
    b112:	d102      	bne.n	b11a <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    b114:	f06f 0309 	mvn.w	r3, #9
    b118:	e092      	b.n	b240 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    b11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b11c:	789b      	ldrb	r3, [r3, #2]
    b11e:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    b120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b122:	795b      	ldrb	r3, [r3, #5]
    b124:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b126:	7c7b      	ldrb	r3, [r7, #17]
    b128:	2b02      	cmp	r3, #2
    b12a:	d002      	beq.n	b132 <cdcdf_acm_enable+0x42>
    b12c:	7c7b      	ldrb	r3, [r7, #17]
    b12e:	2b0a      	cmp	r3, #10
    b130:	d121      	bne.n	b176 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b136:	6a3a      	ldr	r2, [r7, #32]
    b138:	5cd2      	ldrb	r2, [r2, r3]
    b13a:	7bbb      	ldrb	r3, [r7, #14]
    b13c:	429a      	cmp	r2, r3
    b13e:	d102      	bne.n	b146 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    b140:	f06f 0311 	mvn.w	r3, #17
    b144:	e07c      	b.n	b240 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b14a:	6a3a      	ldr	r2, [r7, #32]
    b14c:	5cd3      	ldrb	r3, [r2, r3]
    b14e:	2bff      	cmp	r3, #255	; 0xff
    b150:	d002      	beq.n	b158 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    b152:	f06f 031b 	mvn.w	r3, #27
    b156:	e073      	b.n	b240 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b15c:	7bb9      	ldrb	r1, [r7, #14]
    b15e:	6a3a      	ldr	r2, [r7, #32]
    b160:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b162:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b164:	683b      	ldr	r3, [r7, #0]
    b166:	685b      	ldr	r3, [r3, #4]
    b168:	2205      	movs	r2, #5
    b16a:	4619      	mov	r1, r3
    b16c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b16e:	4b36      	ldr	r3, [pc, #216]	; (b248 <cdcdf_acm_enable+0x158>)
    b170:	4798      	blx	r3
    b172:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b174:	e047      	b.n	b206 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    b176:	f06f 0309 	mvn.w	r3, #9
    b17a:	e061      	b.n	b240 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b17e:	789b      	ldrb	r3, [r3, #2]
    b180:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    b182:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b184:	78db      	ldrb	r3, [r3, #3]
    b186:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b188:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b18a:	3304      	adds	r3, #4
    b18c:	4618      	mov	r0, r3
    b18e:	4b2f      	ldr	r3, [pc, #188]	; (b24c <cdcdf_acm_enable+0x15c>)
    b190:	4798      	blx	r3
    b192:	4603      	mov	r3, r0
    b194:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b196:	7ebb      	ldrb	r3, [r7, #26]
    b198:	7ef9      	ldrb	r1, [r7, #27]
    b19a:	8bba      	ldrh	r2, [r7, #28]
    b19c:	4618      	mov	r0, r3
    b19e:	4b2c      	ldr	r3, [pc, #176]	; (b250 <cdcdf_acm_enable+0x160>)
    b1a0:	4798      	blx	r3
    b1a2:	4603      	mov	r3, r0
    b1a4:	2b00      	cmp	r3, #0
    b1a6:	d002      	beq.n	b1ae <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    b1a8:	f06f 0313 	mvn.w	r3, #19
    b1ac:	e048      	b.n	b240 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b1ae:	7ebb      	ldrb	r3, [r7, #26]
    b1b0:	b25b      	sxtb	r3, r3
    b1b2:	2b00      	cmp	r3, #0
    b1b4:	da0f      	bge.n	b1d6 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b1b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b1ba:	7eb9      	ldrb	r1, [r7, #26]
    b1bc:	6a3a      	ldr	r2, [r7, #32]
    b1be:	4413      	add	r3, r2
    b1c0:	460a      	mov	r2, r1
    b1c2:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    b1c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b1c8:	6a3a      	ldr	r2, [r7, #32]
    b1ca:	4413      	add	r3, r2
    b1cc:	789b      	ldrb	r3, [r3, #2]
    b1ce:	4618      	mov	r0, r3
    b1d0:	4b20      	ldr	r3, [pc, #128]	; (b254 <cdcdf_acm_enable+0x164>)
    b1d2:	4798      	blx	r3
    b1d4:	e007      	b.n	b1e6 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b1d6:	7eba      	ldrb	r2, [r7, #26]
    b1d8:	6a3b      	ldr	r3, [r7, #32]
    b1da:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b1dc:	6a3b      	ldr	r3, [r7, #32]
    b1de:	791b      	ldrb	r3, [r3, #4]
    b1e0:	4618      	mov	r0, r3
    b1e2:	4b1c      	ldr	r3, [pc, #112]	; (b254 <cdcdf_acm_enable+0x164>)
    b1e4:	4798      	blx	r3
			}
			desc->sod = ep;
    b1e6:	683b      	ldr	r3, [r7, #0]
    b1e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b1ea:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b1ec:	683b      	ldr	r3, [r7, #0]
    b1ee:	681b      	ldr	r3, [r3, #0]
    b1f0:	4618      	mov	r0, r3
    b1f2:	4b19      	ldr	r3, [pc, #100]	; (b258 <cdcdf_acm_enable+0x168>)
    b1f4:	4798      	blx	r3
    b1f6:	4602      	mov	r2, r0
    b1f8:	683b      	ldr	r3, [r7, #0]
    b1fa:	685b      	ldr	r3, [r3, #4]
    b1fc:	4619      	mov	r1, r3
    b1fe:	4610      	mov	r0, r2
    b200:	4b16      	ldr	r3, [pc, #88]	; (b25c <cdcdf_acm_enable+0x16c>)
    b202:	4798      	blx	r3
    b204:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b208:	2b00      	cmp	r3, #0
    b20a:	d1b7      	bne.n	b17c <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b20c:	683b      	ldr	r3, [r7, #0]
    b20e:	681b      	ldr	r3, [r3, #0]
    b210:	4618      	mov	r0, r3
    b212:	4b11      	ldr	r3, [pc, #68]	; (b258 <cdcdf_acm_enable+0x168>)
    b214:	4798      	blx	r3
    b216:	683b      	ldr	r3, [r7, #0]
    b218:	685b      	ldr	r3, [r3, #4]
    b21a:	2204      	movs	r2, #4
    b21c:	4619      	mov	r1, r3
    b21e:	4b0a      	ldr	r3, [pc, #40]	; (b248 <cdcdf_acm_enable+0x158>)
    b220:	4798      	blx	r3
    b222:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b228:	3301      	adds	r3, #1
    b22a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b22e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b232:	2b01      	cmp	r3, #1
    b234:	f67f af6b 	bls.w	b10e <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    b238:	4b09      	ldr	r3, [pc, #36]	; (b260 <cdcdf_acm_enable+0x170>)
    b23a:	2201      	movs	r2, #1
    b23c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b23e:	2300      	movs	r3, #0
}
    b240:	4618      	mov	r0, r3
    b242:	3730      	adds	r7, #48	; 0x30
    b244:	46bd      	mov	sp, r7
    b246:	bd80      	pop	{r7, pc}
    b248:	0000c375 	.word	0x0000c375
    b24c:	0000b08b 	.word	0x0000b08b
    b250:	000029c9 	.word	0x000029c9
    b254:	00002ab5 	.word	0x00002ab5
    b258:	0000b0cd 	.word	0x0000b0cd
    b25c:	0000c3d1 	.word	0x0000c3d1
    b260:	20000cac 	.word	0x20000cac

0000b264 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b264:	b580      	push	{r7, lr}
    b266:	b088      	sub	sp, #32
    b268:	af00      	add	r7, sp, #0
    b26a:	6078      	str	r0, [r7, #4]
    b26c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b26e:	687b      	ldr	r3, [r7, #4]
    b270:	689b      	ldr	r3, [r3, #8]
    b272:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    b274:	683b      	ldr	r3, [r7, #0]
    b276:	2b00      	cmp	r3, #0
    b278:	d00c      	beq.n	b294 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b27a:	683b      	ldr	r3, [r7, #0]
    b27c:	681b      	ldr	r3, [r3, #0]
    b27e:	795b      	ldrb	r3, [r3, #5]
    b280:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b282:	7c7b      	ldrb	r3, [r7, #17]
    b284:	2b02      	cmp	r3, #2
    b286:	d005      	beq.n	b294 <cdcdf_acm_disable+0x30>
    b288:	7c7b      	ldrb	r3, [r7, #17]
    b28a:	2b0a      	cmp	r3, #10
    b28c:	d002      	beq.n	b294 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    b28e:	f06f 0309 	mvn.w	r3, #9
    b292:	e035      	b.n	b300 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    b294:	2300      	movs	r3, #0
    b296:	77fb      	strb	r3, [r7, #31]
    b298:	e01f      	b.n	b2da <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    b29a:	7ffb      	ldrb	r3, [r7, #31]
    b29c:	69ba      	ldr	r2, [r7, #24]
    b29e:	5cd3      	ldrb	r3, [r2, r3]
    b2a0:	2bff      	cmp	r3, #255	; 0xff
    b2a2:	d016      	beq.n	b2d2 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    b2a4:	7ffb      	ldrb	r3, [r7, #31]
    b2a6:	69ba      	ldr	r2, [r7, #24]
    b2a8:	21ff      	movs	r1, #255	; 0xff
    b2aa:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    b2ac:	7ffb      	ldrb	r3, [r7, #31]
    b2ae:	69ba      	ldr	r2, [r7, #24]
    b2b0:	4413      	add	r3, r2
    b2b2:	789b      	ldrb	r3, [r3, #2]
    b2b4:	2bff      	cmp	r3, #255	; 0xff
    b2b6:	d00d      	beq.n	b2d4 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b2b8:	7ffb      	ldrb	r3, [r7, #31]
    b2ba:	69ba      	ldr	r2, [r7, #24]
    b2bc:	4413      	add	r3, r2
    b2be:	789b      	ldrb	r3, [r3, #2]
    b2c0:	4618      	mov	r0, r3
    b2c2:	4b11      	ldr	r3, [pc, #68]	; (b308 <cdcdf_acm_disable+0xa4>)
    b2c4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b2c6:	7ffb      	ldrb	r3, [r7, #31]
    b2c8:	69ba      	ldr	r2, [r7, #24]
    b2ca:	4413      	add	r3, r2
    b2cc:	22ff      	movs	r2, #255	; 0xff
    b2ce:	709a      	strb	r2, [r3, #2]
    b2d0:	e000      	b.n	b2d4 <cdcdf_acm_disable+0x70>
			continue;
    b2d2:	bf00      	nop
	for (i = 0; i < 2; i++) {
    b2d4:	7ffb      	ldrb	r3, [r7, #31]
    b2d6:	3301      	adds	r3, #1
    b2d8:	77fb      	strb	r3, [r7, #31]
    b2da:	7ffb      	ldrb	r3, [r7, #31]
    b2dc:	2b01      	cmp	r3, #1
    b2de:	d9dc      	bls.n	b29a <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    b2e0:	69bb      	ldr	r3, [r7, #24]
    b2e2:	791b      	ldrb	r3, [r3, #4]
    b2e4:	2bff      	cmp	r3, #255	; 0xff
    b2e6:	d007      	beq.n	b2f8 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    b2e8:	69bb      	ldr	r3, [r7, #24]
    b2ea:	791b      	ldrb	r3, [r3, #4]
    b2ec:	4618      	mov	r0, r3
    b2ee:	4b06      	ldr	r3, [pc, #24]	; (b308 <cdcdf_acm_disable+0xa4>)
    b2f0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b2f2:	69bb      	ldr	r3, [r7, #24]
    b2f4:	22ff      	movs	r2, #255	; 0xff
    b2f6:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    b2f8:	4b04      	ldr	r3, [pc, #16]	; (b30c <cdcdf_acm_disable+0xa8>)
    b2fa:	2200      	movs	r2, #0
    b2fc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b2fe:	2300      	movs	r3, #0
}
    b300:	4618      	mov	r0, r3
    b302:	3720      	adds	r7, #32
    b304:	46bd      	mov	sp, r7
    b306:	bd80      	pop	{r7, pc}
    b308:	00002a65 	.word	0x00002a65
    b30c:	20000cac 	.word	0x20000cac

0000b310 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    b310:	b580      	push	{r7, lr}
    b312:	b084      	sub	sp, #16
    b314:	af00      	add	r7, sp, #0
    b316:	60f8      	str	r0, [r7, #12]
    b318:	460b      	mov	r3, r1
    b31a:	607a      	str	r2, [r7, #4]
    b31c:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    b31e:	7afb      	ldrb	r3, [r7, #11]
    b320:	2b01      	cmp	r3, #1
    b322:	d009      	beq.n	b338 <cdcdf_acm_ctrl+0x28>
    b324:	2b02      	cmp	r3, #2
    b326:	d00d      	beq.n	b344 <cdcdf_acm_ctrl+0x34>
    b328:	2b00      	cmp	r3, #0
    b32a:	d10e      	bne.n	b34a <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    b32c:	6879      	ldr	r1, [r7, #4]
    b32e:	68f8      	ldr	r0, [r7, #12]
    b330:	4b09      	ldr	r3, [pc, #36]	; (b358 <cdcdf_acm_ctrl+0x48>)
    b332:	4798      	blx	r3
    b334:	4603      	mov	r3, r0
    b336:	e00a      	b.n	b34e <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    b338:	6879      	ldr	r1, [r7, #4]
    b33a:	68f8      	ldr	r0, [r7, #12]
    b33c:	4b07      	ldr	r3, [pc, #28]	; (b35c <cdcdf_acm_ctrl+0x4c>)
    b33e:	4798      	blx	r3
    b340:	4603      	mov	r3, r0
    b342:	e004      	b.n	b34e <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    b344:	f06f 031a 	mvn.w	r3, #26
    b348:	e001      	b.n	b34e <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    b34a:	f06f 030c 	mvn.w	r3, #12
	}
}
    b34e:	4618      	mov	r0, r3
    b350:	3710      	adds	r7, #16
    b352:	46bd      	mov	sp, r7
    b354:	bd80      	pop	{r7, pc}
    b356:	bf00      	nop
    b358:	0000b0f1 	.word	0x0000b0f1
    b35c:	0000b265 	.word	0x0000b265

0000b360 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b360:	b590      	push	{r4, r7, lr}
    b362:	b087      	sub	sp, #28
    b364:	af00      	add	r7, sp, #0
    b366:	4603      	mov	r3, r0
    b368:	6039      	str	r1, [r7, #0]
    b36a:	71fb      	strb	r3, [r7, #7]
    b36c:	4613      	mov	r3, r2
    b36e:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    b370:	683b      	ldr	r3, [r7, #0]
    b372:	799a      	ldrb	r2, [r3, #6]
    b374:	79db      	ldrb	r3, [r3, #7]
    b376:	021b      	lsls	r3, r3, #8
    b378:	4313      	orrs	r3, r2
    b37a:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b37c:	4b2b      	ldr	r3, [pc, #172]	; (b42c <cdcdf_acm_set_req+0xcc>)
    b37e:	4798      	blx	r3
    b380:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    b382:	683b      	ldr	r3, [r7, #0]
    b384:	785b      	ldrb	r3, [r3, #1]
    b386:	2b20      	cmp	r3, #32
    b388:	d002      	beq.n	b390 <cdcdf_acm_set_req+0x30>
    b38a:	2b22      	cmp	r3, #34	; 0x22
    b38c:	d034      	beq.n	b3f8 <cdcdf_acm_set_req+0x98>
    b38e:	e046      	b.n	b41e <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b390:	8afb      	ldrh	r3, [r7, #22]
    b392:	2b07      	cmp	r3, #7
    b394:	d002      	beq.n	b39c <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    b396:	f04f 33ff 	mov.w	r3, #4294967295
    b39a:	e042      	b.n	b422 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    b39c:	79bb      	ldrb	r3, [r7, #6]
    b39e:	2b00      	cmp	r3, #0
    b3a0:	d107      	bne.n	b3b2 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b3a2:	8afa      	ldrh	r2, [r7, #22]
    b3a4:	79f8      	ldrb	r0, [r7, #7]
    b3a6:	2300      	movs	r3, #0
    b3a8:	6939      	ldr	r1, [r7, #16]
    b3aa:	4c21      	ldr	r4, [pc, #132]	; (b430 <cdcdf_acm_set_req+0xd0>)
    b3ac:	47a0      	blx	r4
    b3ae:	4603      	mov	r3, r0
    b3b0:	e037      	b.n	b422 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b3b2:	693a      	ldr	r2, [r7, #16]
    b3b4:	f107 0308 	add.w	r3, r7, #8
    b3b8:	6810      	ldr	r0, [r2, #0]
    b3ba:	6018      	str	r0, [r3, #0]
    b3bc:	8891      	ldrh	r1, [r2, #4]
    b3be:	7992      	ldrb	r2, [r2, #6]
    b3c0:	8099      	strh	r1, [r3, #4]
    b3c2:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b3c4:	4b1b      	ldr	r3, [pc, #108]	; (b434 <cdcdf_acm_set_req+0xd4>)
    b3c6:	681b      	ldr	r3, [r3, #0]
    b3c8:	2b00      	cmp	r3, #0
    b3ca:	d008      	beq.n	b3de <cdcdf_acm_set_req+0x7e>
    b3cc:	4b19      	ldr	r3, [pc, #100]	; (b434 <cdcdf_acm_set_req+0xd4>)
    b3ce:	681b      	ldr	r3, [r3, #0]
    b3d0:	f107 0208 	add.w	r2, r7, #8
    b3d4:	4610      	mov	r0, r2
    b3d6:	4798      	blx	r3
    b3d8:	4603      	mov	r3, r0
    b3da:	2b00      	cmp	r3, #0
    b3dc:	d00a      	beq.n	b3f4 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    b3de:	4b16      	ldr	r3, [pc, #88]	; (b438 <cdcdf_acm_set_req+0xd8>)
    b3e0:	f107 0208 	add.w	r2, r7, #8
    b3e4:	e892 0003 	ldmia.w	r2, {r0, r1}
    b3e8:	6018      	str	r0, [r3, #0]
    b3ea:	3304      	adds	r3, #4
    b3ec:	8019      	strh	r1, [r3, #0]
    b3ee:	3302      	adds	r3, #2
    b3f0:	0c0a      	lsrs	r2, r1, #16
    b3f2:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    b3f4:	2300      	movs	r3, #0
    b3f6:	e014      	b.n	b422 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    b3f8:	2300      	movs	r3, #0
    b3fa:	2200      	movs	r2, #0
    b3fc:	2100      	movs	r1, #0
    b3fe:	2000      	movs	r0, #0
    b400:	4c0b      	ldr	r4, [pc, #44]	; (b430 <cdcdf_acm_set_req+0xd0>)
    b402:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    b404:	4b0d      	ldr	r3, [pc, #52]	; (b43c <cdcdf_acm_set_req+0xdc>)
    b406:	681b      	ldr	r3, [r3, #0]
    b408:	2b00      	cmp	r3, #0
    b40a:	d006      	beq.n	b41a <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    b40c:	4b0b      	ldr	r3, [pc, #44]	; (b43c <cdcdf_acm_set_req+0xdc>)
    b40e:	681b      	ldr	r3, [r3, #0]
    b410:	683a      	ldr	r2, [r7, #0]
    b412:	8852      	ldrh	r2, [r2, #2]
    b414:	b292      	uxth	r2, r2
    b416:	4610      	mov	r0, r2
    b418:	4798      	blx	r3
		}
		return ERR_NONE;
    b41a:	2300      	movs	r3, #0
    b41c:	e001      	b.n	b422 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    b41e:	f06f 030c 	mvn.w	r3, #12
	}
}
    b422:	4618      	mov	r0, r3
    b424:	371c      	adds	r7, #28
    b426:	46bd      	mov	sp, r7
    b428:	bd90      	pop	{r4, r7, pc}
    b42a:	bf00      	nop
    b42c:	0000c271 	.word	0x0000c271
    b430:	0000c0e5 	.word	0x0000c0e5
    b434:	20000cc0 	.word	0x20000cc0
    b438:	20000cb4 	.word	0x20000cb4
    b43c:	20000cbc 	.word	0x20000cbc

0000b440 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b440:	b590      	push	{r4, r7, lr}
    b442:	b085      	sub	sp, #20
    b444:	af00      	add	r7, sp, #0
    b446:	4603      	mov	r3, r0
    b448:	6039      	str	r1, [r7, #0]
    b44a:	71fb      	strb	r3, [r7, #7]
    b44c:	4613      	mov	r3, r2
    b44e:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    b450:	683b      	ldr	r3, [r7, #0]
    b452:	799a      	ldrb	r2, [r3, #6]
    b454:	79db      	ldrb	r3, [r3, #7]
    b456:	021b      	lsls	r3, r3, #8
    b458:	4313      	orrs	r3, r2
    b45a:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    b45c:	79bb      	ldrb	r3, [r7, #6]
    b45e:	2b01      	cmp	r3, #1
    b460:	d101      	bne.n	b466 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    b462:	2300      	movs	r3, #0
    b464:	e013      	b.n	b48e <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    b466:	683b      	ldr	r3, [r7, #0]
    b468:	785b      	ldrb	r3, [r3, #1]
    b46a:	2b21      	cmp	r3, #33	; 0x21
    b46c:	d10d      	bne.n	b48a <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b46e:	89fb      	ldrh	r3, [r7, #14]
    b470:	2b07      	cmp	r3, #7
    b472:	d002      	beq.n	b47a <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    b474:	f04f 33ff 	mov.w	r3, #4294967295
    b478:	e009      	b.n	b48e <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    b47a:	89fa      	ldrh	r2, [r7, #14]
    b47c:	79f8      	ldrb	r0, [r7, #7]
    b47e:	2300      	movs	r3, #0
    b480:	4905      	ldr	r1, [pc, #20]	; (b498 <cdcdf_acm_get_req+0x58>)
    b482:	4c06      	ldr	r4, [pc, #24]	; (b49c <cdcdf_acm_get_req+0x5c>)
    b484:	47a0      	blx	r4
    b486:	4603      	mov	r3, r0
    b488:	e001      	b.n	b48e <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    b48a:	f06f 030c 	mvn.w	r3, #12
	}
}
    b48e:	4618      	mov	r0, r3
    b490:	3714      	adds	r7, #20
    b492:	46bd      	mov	sp, r7
    b494:	bd90      	pop	{r4, r7, pc}
    b496:	bf00      	nop
    b498:	20000cb4 	.word	0x20000cb4
    b49c:	0000c0e5 	.word	0x0000c0e5

0000b4a0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b4a0:	b580      	push	{r7, lr}
    b4a2:	b082      	sub	sp, #8
    b4a4:	af00      	add	r7, sp, #0
    b4a6:	4603      	mov	r3, r0
    b4a8:	6039      	str	r1, [r7, #0]
    b4aa:	71fb      	strb	r3, [r7, #7]
    b4ac:	4613      	mov	r3, r2
    b4ae:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b4b0:	683b      	ldr	r3, [r7, #0]
    b4b2:	781b      	ldrb	r3, [r3, #0]
    b4b4:	095b      	lsrs	r3, r3, #5
    b4b6:	b2db      	uxtb	r3, r3
    b4b8:	f003 0303 	and.w	r3, r3, #3
    b4bc:	2b01      	cmp	r3, #1
    b4be:	d002      	beq.n	b4c6 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    b4c0:	f06f 0309 	mvn.w	r3, #9
    b4c4:	e026      	b.n	b514 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    b4c6:	683b      	ldr	r3, [r7, #0]
    b4c8:	889b      	ldrh	r3, [r3, #4]
    b4ca:	b29a      	uxth	r2, r3
    b4cc:	4b13      	ldr	r3, [pc, #76]	; (b51c <cdcdf_acm_req+0x7c>)
    b4ce:	781b      	ldrb	r3, [r3, #0]
    b4d0:	b29b      	uxth	r3, r3
    b4d2:	429a      	cmp	r2, r3
    b4d4:	d007      	beq.n	b4e6 <cdcdf_acm_req+0x46>
    b4d6:	683b      	ldr	r3, [r7, #0]
    b4d8:	889b      	ldrh	r3, [r3, #4]
    b4da:	b29a      	uxth	r2, r3
    b4dc:	4b0f      	ldr	r3, [pc, #60]	; (b51c <cdcdf_acm_req+0x7c>)
    b4de:	785b      	ldrb	r3, [r3, #1]
    b4e0:	b29b      	uxth	r3, r3
    b4e2:	429a      	cmp	r2, r3
    b4e4:	d114      	bne.n	b510 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    b4e6:	683b      	ldr	r3, [r7, #0]
    b4e8:	781b      	ldrb	r3, [r3, #0]
    b4ea:	b25b      	sxtb	r3, r3
    b4ec:	2b00      	cmp	r3, #0
    b4ee:	da07      	bge.n	b500 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    b4f0:	79ba      	ldrb	r2, [r7, #6]
    b4f2:	79fb      	ldrb	r3, [r7, #7]
    b4f4:	6839      	ldr	r1, [r7, #0]
    b4f6:	4618      	mov	r0, r3
    b4f8:	4b09      	ldr	r3, [pc, #36]	; (b520 <cdcdf_acm_req+0x80>)
    b4fa:	4798      	blx	r3
    b4fc:	4603      	mov	r3, r0
    b4fe:	e009      	b.n	b514 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    b500:	79ba      	ldrb	r2, [r7, #6]
    b502:	79fb      	ldrb	r3, [r7, #7]
    b504:	6839      	ldr	r1, [r7, #0]
    b506:	4618      	mov	r0, r3
    b508:	4b06      	ldr	r3, [pc, #24]	; (b524 <cdcdf_acm_req+0x84>)
    b50a:	4798      	blx	r3
    b50c:	4603      	mov	r3, r0
    b50e:	e001      	b.n	b514 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    b510:	f06f 0309 	mvn.w	r3, #9
	}
}
    b514:	4618      	mov	r0, r3
    b516:	3708      	adds	r7, #8
    b518:	46bd      	mov	sp, r7
    b51a:	bd80      	pop	{r7, pc}
    b51c:	20000cac 	.word	0x20000cac
    b520:	0000b441 	.word	0x0000b441
    b524:	0000b361 	.word	0x0000b361

0000b528 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    b528:	b580      	push	{r7, lr}
    b52a:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    b52c:	4b0b      	ldr	r3, [pc, #44]	; (b55c <cdcdf_acm_init+0x34>)
    b52e:	4798      	blx	r3
    b530:	4603      	mov	r3, r0
    b532:	2b01      	cmp	r3, #1
    b534:	d902      	bls.n	b53c <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    b536:	f06f 0310 	mvn.w	r3, #16
    b53a:	e00d      	b.n	b558 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    b53c:	4b08      	ldr	r3, [pc, #32]	; (b560 <cdcdf_acm_init+0x38>)
    b53e:	4a09      	ldr	r2, [pc, #36]	; (b564 <cdcdf_acm_init+0x3c>)
    b540:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    b542:	4b07      	ldr	r3, [pc, #28]	; (b560 <cdcdf_acm_init+0x38>)
    b544:	4a08      	ldr	r2, [pc, #32]	; (b568 <cdcdf_acm_init+0x40>)
    b546:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    b548:	4805      	ldr	r0, [pc, #20]	; (b560 <cdcdf_acm_init+0x38>)
    b54a:	4b08      	ldr	r3, [pc, #32]	; (b56c <cdcdf_acm_init+0x44>)
    b54c:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    b54e:	4908      	ldr	r1, [pc, #32]	; (b570 <cdcdf_acm_init+0x48>)
    b550:	2001      	movs	r0, #1
    b552:	4b08      	ldr	r3, [pc, #32]	; (b574 <cdcdf_acm_init+0x4c>)
    b554:	4798      	blx	r3
	return ERR_NONE;
    b556:	2300      	movs	r3, #0
}
    b558:	4618      	mov	r0, r3
    b55a:	bd80      	pop	{r7, pc}
    b55c:	0000c289 	.word	0x0000c289
    b560:	20000ca0 	.word	0x20000ca0
    b564:	0000b311 	.word	0x0000b311
    b568:	20000cac 	.word	0x20000cac
    b56c:	0000c1f1 	.word	0x0000c1f1
    b570:	20000208 	.word	0x20000208
    b574:	0000c121 	.word	0x0000c121

0000b578 <usb_get_u16>:
{
    b578:	b480      	push	{r7}
    b57a:	b083      	sub	sp, #12
    b57c:	af00      	add	r7, sp, #0
    b57e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b580:	687b      	ldr	r3, [r7, #4]
    b582:	781b      	ldrb	r3, [r3, #0]
    b584:	b29a      	uxth	r2, r3
    b586:	687b      	ldr	r3, [r7, #4]
    b588:	3301      	adds	r3, #1
    b58a:	781b      	ldrb	r3, [r3, #0]
    b58c:	b29b      	uxth	r3, r3
    b58e:	021b      	lsls	r3, r3, #8
    b590:	b29b      	uxth	r3, r3
    b592:	4413      	add	r3, r2
    b594:	b29b      	uxth	r3, r3
}
    b596:	4618      	mov	r0, r3
    b598:	370c      	adds	r7, #12
    b59a:	46bd      	mov	sp, r7
    b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5a0:	4770      	bx	lr

0000b5a2 <usb_desc_len>:
{
    b5a2:	b480      	push	{r7}
    b5a4:	b083      	sub	sp, #12
    b5a6:	af00      	add	r7, sp, #0
    b5a8:	6078      	str	r0, [r7, #4]
	return desc[0];
    b5aa:	687b      	ldr	r3, [r7, #4]
    b5ac:	781b      	ldrb	r3, [r3, #0]
}
    b5ae:	4618      	mov	r0, r3
    b5b0:	370c      	adds	r7, #12
    b5b2:	46bd      	mov	sp, r7
    b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5b8:	4770      	bx	lr
	...

0000b5bc <usb_desc_next>:
{
    b5bc:	b580      	push	{r7, lr}
    b5be:	b082      	sub	sp, #8
    b5c0:	af00      	add	r7, sp, #0
    b5c2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b5c4:	6878      	ldr	r0, [r7, #4]
    b5c6:	4b05      	ldr	r3, [pc, #20]	; (b5dc <usb_desc_next+0x20>)
    b5c8:	4798      	blx	r3
    b5ca:	4603      	mov	r3, r0
    b5cc:	461a      	mov	r2, r3
    b5ce:	687b      	ldr	r3, [r7, #4]
    b5d0:	4413      	add	r3, r2
}
    b5d2:	4618      	mov	r0, r3
    b5d4:	3708      	adds	r7, #8
    b5d6:	46bd      	mov	sp, r7
    b5d8:	bd80      	pop	{r7, pc}
    b5da:	bf00      	nop
    b5dc:	0000b5a3 	.word	0x0000b5a3

0000b5e0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    b5e0:	b580      	push	{r7, lr}
    b5e2:	b082      	sub	sp, #8
    b5e4:	af00      	add	r7, sp, #0
    b5e6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    b5e8:	687b      	ldr	r3, [r7, #4]
    b5ea:	3302      	adds	r3, #2
    b5ec:	4618      	mov	r0, r3
    b5ee:	4b03      	ldr	r3, [pc, #12]	; (b5fc <usb_cfg_desc_total_len+0x1c>)
    b5f0:	4798      	blx	r3
    b5f2:	4603      	mov	r3, r0
}
    b5f4:	4618      	mov	r0, r3
    b5f6:	3708      	adds	r7, #8
    b5f8:	46bd      	mov	sp, r7
    b5fa:	bd80      	pop	{r7, pc}
    b5fc:	0000b579 	.word	0x0000b579

0000b600 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    b600:	b590      	push	{r4, r7, lr}
    b602:	b085      	sub	sp, #20
    b604:	af00      	add	r7, sp, #0
    b606:	4603      	mov	r3, r0
    b608:	6039      	str	r1, [r7, #0]
    b60a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    b60c:	2300      	movs	r3, #0
    b60e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    b610:	683b      	ldr	r3, [r7, #0]
    b612:	799a      	ldrb	r2, [r3, #6]
    b614:	79db      	ldrb	r3, [r3, #7]
    b616:	021b      	lsls	r3, r3, #8
    b618:	4313      	orrs	r3, r2
    b61a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    b61c:	897b      	ldrh	r3, [r7, #10]
    b61e:	2b12      	cmp	r3, #18
    b620:	d901      	bls.n	b626 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    b622:	2312      	movs	r3, #18
    b624:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    b626:	68fb      	ldr	r3, [r7, #12]
    b628:	2b00      	cmp	r3, #0
    b62a:	d10a      	bne.n	b642 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b62c:	4b0f      	ldr	r3, [pc, #60]	; (b66c <usbdc_get_dev_desc+0x6c>)
    b62e:	681b      	ldr	r3, [r3, #0]
    b630:	6818      	ldr	r0, [r3, #0]
    b632:	4b0e      	ldr	r3, [pc, #56]	; (b66c <usbdc_get_dev_desc+0x6c>)
    b634:	681b      	ldr	r3, [r3, #0]
    b636:	685b      	ldr	r3, [r3, #4]
    b638:	2201      	movs	r2, #1
    b63a:	4619      	mov	r1, r3
    b63c:	4b0c      	ldr	r3, [pc, #48]	; (b670 <usbdc_get_dev_desc+0x70>)
    b63e:	4798      	blx	r3
    b640:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    b642:	68fb      	ldr	r3, [r7, #12]
    b644:	2b00      	cmp	r3, #0
    b646:	d101      	bne.n	b64c <usbdc_get_dev_desc+0x4c>
		return false;
    b648:	2300      	movs	r3, #0
    b64a:	e00b      	b.n	b664 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    b64c:	897a      	ldrh	r2, [r7, #10]
    b64e:	79f8      	ldrb	r0, [r7, #7]
    b650:	2300      	movs	r3, #0
    b652:	68f9      	ldr	r1, [r7, #12]
    b654:	4c07      	ldr	r4, [pc, #28]	; (b674 <usbdc_get_dev_desc+0x74>)
    b656:	47a0      	blx	r4
    b658:	4603      	mov	r3, r0
    b65a:	2b00      	cmp	r3, #0
    b65c:	d001      	beq.n	b662 <usbdc_get_dev_desc+0x62>
		return false;
    b65e:	2300      	movs	r3, #0
    b660:	e000      	b.n	b664 <usbdc_get_dev_desc+0x64>
	}
	return true;
    b662:	2301      	movs	r3, #1
}
    b664:	4618      	mov	r0, r3
    b666:	3714      	adds	r7, #20
    b668:	46bd      	mov	sp, r7
    b66a:	bd90      	pop	{r4, r7, pc}
    b66c:	20000cc4 	.word	0x20000cc4
    b670:	0000c375 	.word	0x0000c375
    b674:	0000c0e5 	.word	0x0000c0e5

0000b678 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    b678:	b590      	push	{r4, r7, lr}
    b67a:	b087      	sub	sp, #28
    b67c:	af00      	add	r7, sp, #0
    b67e:	4603      	mov	r3, r0
    b680:	6039      	str	r1, [r7, #0]
    b682:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    b684:	2300      	movs	r3, #0
    b686:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    b688:	683b      	ldr	r3, [r7, #0]
    b68a:	799a      	ldrb	r2, [r3, #6]
    b68c:	79db      	ldrb	r3, [r3, #7]
    b68e:	021b      	lsls	r3, r3, #8
    b690:	4313      	orrs	r3, r2
    b692:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    b694:	683b      	ldr	r3, [r7, #0]
    b696:	885b      	ldrh	r3, [r3, #2]
    b698:	b29b      	uxth	r3, r3
    b69a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b69c:	8a7a      	ldrh	r2, [r7, #18]
    b69e:	4b1e      	ldr	r3, [pc, #120]	; (b718 <usbdc_get_cfg_desc+0xa0>)
    b6a0:	7f1b      	ldrb	r3, [r3, #28]
    b6a2:	3b01      	subs	r3, #1
    b6a4:	4013      	ands	r3, r2
    b6a6:	2b00      	cmp	r3, #0
    b6a8:	bf0c      	ite	eq
    b6aa:	2301      	moveq	r3, #1
    b6ac:	2300      	movne	r3, #0
    b6ae:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    b6b0:	697b      	ldr	r3, [r7, #20]
    b6b2:	2b00      	cmp	r3, #0
    b6b4:	d10c      	bne.n	b6d0 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    b6b6:	4b18      	ldr	r3, [pc, #96]	; (b718 <usbdc_get_cfg_desc+0xa0>)
    b6b8:	681b      	ldr	r3, [r3, #0]
    b6ba:	6818      	ldr	r0, [r3, #0]
    b6bc:	4b16      	ldr	r3, [pc, #88]	; (b718 <usbdc_get_cfg_desc+0xa0>)
    b6be:	681b      	ldr	r3, [r3, #0]
    b6c0:	6859      	ldr	r1, [r3, #4]
    b6c2:	7c3b      	ldrb	r3, [r7, #16]
    b6c4:	3301      	adds	r3, #1
    b6c6:	b2db      	uxtb	r3, r3
    b6c8:	461a      	mov	r2, r3
    b6ca:	4b14      	ldr	r3, [pc, #80]	; (b71c <usbdc_get_cfg_desc+0xa4>)
    b6cc:	4798      	blx	r3
    b6ce:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    b6d0:	697b      	ldr	r3, [r7, #20]
    b6d2:	2b00      	cmp	r3, #0
    b6d4:	d101      	bne.n	b6da <usbdc_get_cfg_desc+0x62>
		return false;
    b6d6:	2300      	movs	r3, #0
    b6d8:	e019      	b.n	b70e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    b6da:	6978      	ldr	r0, [r7, #20]
    b6dc:	4b10      	ldr	r3, [pc, #64]	; (b720 <usbdc_get_cfg_desc+0xa8>)
    b6de:	4798      	blx	r3
    b6e0:	4603      	mov	r3, r0
    b6e2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    b6e4:	8a7a      	ldrh	r2, [r7, #18]
    b6e6:	89fb      	ldrh	r3, [r7, #14]
    b6e8:	429a      	cmp	r2, r3
    b6ea:	d802      	bhi.n	b6f2 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    b6ec:	2300      	movs	r3, #0
    b6ee:	747b      	strb	r3, [r7, #17]
    b6f0:	e001      	b.n	b6f6 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    b6f2:	89fb      	ldrh	r3, [r7, #14]
    b6f4:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    b6f6:	8a7a      	ldrh	r2, [r7, #18]
    b6f8:	7c7b      	ldrb	r3, [r7, #17]
    b6fa:	79f8      	ldrb	r0, [r7, #7]
    b6fc:	6979      	ldr	r1, [r7, #20]
    b6fe:	4c09      	ldr	r4, [pc, #36]	; (b724 <usbdc_get_cfg_desc+0xac>)
    b700:	47a0      	blx	r4
    b702:	4603      	mov	r3, r0
    b704:	2b00      	cmp	r3, #0
    b706:	d001      	beq.n	b70c <usbdc_get_cfg_desc+0x94>
		return false;
    b708:	2300      	movs	r3, #0
    b70a:	e000      	b.n	b70e <usbdc_get_cfg_desc+0x96>
	}
	return true;
    b70c:	2301      	movs	r3, #1
}
    b70e:	4618      	mov	r0, r3
    b710:	371c      	adds	r7, #28
    b712:	46bd      	mov	sp, r7
    b714:	bd90      	pop	{r4, r7, pc}
    b716:	bf00      	nop
    b718:	20000cc4 	.word	0x20000cc4
    b71c:	0000c435 	.word	0x0000c435
    b720:	0000b5e1 	.word	0x0000b5e1
    b724:	0000c0e5 	.word	0x0000c0e5

0000b728 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    b728:	b590      	push	{r4, r7, lr}
    b72a:	b085      	sub	sp, #20
    b72c:	af00      	add	r7, sp, #0
    b72e:	4603      	mov	r3, r0
    b730:	6039      	str	r1, [r7, #0]
    b732:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    b734:	683b      	ldr	r3, [r7, #0]
    b736:	799a      	ldrb	r2, [r3, #6]
    b738:	79db      	ldrb	r3, [r3, #7]
    b73a:	021b      	lsls	r3, r3, #8
    b73c:	4313      	orrs	r3, r2
    b73e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    b740:	683b      	ldr	r3, [r7, #0]
    b742:	885b      	ldrh	r3, [r3, #2]
    b744:	b29b      	uxth	r3, r3
    b746:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b748:	89fa      	ldrh	r2, [r7, #14]
    b74a:	4b1a      	ldr	r3, [pc, #104]	; (b7b4 <usbdc_get_str_desc+0x8c>)
    b74c:	7f1b      	ldrb	r3, [r3, #28]
    b74e:	3b01      	subs	r3, #1
    b750:	4013      	ands	r3, r2
    b752:	2b00      	cmp	r3, #0
    b754:	bf0c      	ite	eq
    b756:	2301      	moveq	r3, #1
    b758:	2300      	movne	r3, #0
    b75a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    b75c:	4b15      	ldr	r3, [pc, #84]	; (b7b4 <usbdc_get_str_desc+0x8c>)
    b75e:	681b      	ldr	r3, [r3, #0]
    b760:	6818      	ldr	r0, [r3, #0]
    b762:	4b14      	ldr	r3, [pc, #80]	; (b7b4 <usbdc_get_str_desc+0x8c>)
    b764:	681b      	ldr	r3, [r3, #0]
    b766:	685b      	ldr	r3, [r3, #4]
    b768:	7b3a      	ldrb	r2, [r7, #12]
    b76a:	4619      	mov	r1, r3
    b76c:	4b12      	ldr	r3, [pc, #72]	; (b7b8 <usbdc_get_str_desc+0x90>)
    b76e:	4798      	blx	r3
    b770:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    b772:	68bb      	ldr	r3, [r7, #8]
    b774:	2b00      	cmp	r3, #0
    b776:	d101      	bne.n	b77c <usbdc_get_str_desc+0x54>
		return false;
    b778:	2300      	movs	r3, #0
    b77a:	e017      	b.n	b7ac <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    b77c:	68bb      	ldr	r3, [r7, #8]
    b77e:	781b      	ldrb	r3, [r3, #0]
    b780:	b29b      	uxth	r3, r3
    b782:	89fa      	ldrh	r2, [r7, #14]
    b784:	429a      	cmp	r2, r3
    b786:	d802      	bhi.n	b78e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    b788:	2300      	movs	r3, #0
    b78a:	737b      	strb	r3, [r7, #13]
    b78c:	e002      	b.n	b794 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    b78e:	68bb      	ldr	r3, [r7, #8]
    b790:	781b      	ldrb	r3, [r3, #0]
    b792:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    b794:	89fa      	ldrh	r2, [r7, #14]
    b796:	7b7b      	ldrb	r3, [r7, #13]
    b798:	79f8      	ldrb	r0, [r7, #7]
    b79a:	68b9      	ldr	r1, [r7, #8]
    b79c:	4c07      	ldr	r4, [pc, #28]	; (b7bc <usbdc_get_str_desc+0x94>)
    b79e:	47a0      	blx	r4
    b7a0:	4603      	mov	r3, r0
    b7a2:	2b00      	cmp	r3, #0
    b7a4:	d001      	beq.n	b7aa <usbdc_get_str_desc+0x82>
		return false;
    b7a6:	2300      	movs	r3, #0
    b7a8:	e000      	b.n	b7ac <usbdc_get_str_desc+0x84>
	}
	return true;
    b7aa:	2301      	movs	r3, #1
}
    b7ac:	4618      	mov	r0, r3
    b7ae:	3714      	adds	r7, #20
    b7b0:	46bd      	mov	sp, r7
    b7b2:	bd90      	pop	{r4, r7, pc}
    b7b4:	20000cc4 	.word	0x20000cc4
    b7b8:	0000c4ad 	.word	0x0000c4ad
    b7bc:	0000c0e5 	.word	0x0000c0e5

0000b7c0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    b7c0:	b580      	push	{r7, lr}
    b7c2:	b084      	sub	sp, #16
    b7c4:	af00      	add	r7, sp, #0
    b7c6:	4603      	mov	r3, r0
    b7c8:	6039      	str	r1, [r7, #0]
    b7ca:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    b7cc:	683b      	ldr	r3, [r7, #0]
    b7ce:	885b      	ldrh	r3, [r3, #2]
    b7d0:	b29b      	uxth	r3, r3
    b7d2:	0a1b      	lsrs	r3, r3, #8
    b7d4:	b29b      	uxth	r3, r3
    b7d6:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    b7d8:	7bfb      	ldrb	r3, [r7, #15]
    b7da:	2b02      	cmp	r3, #2
    b7dc:	d00d      	beq.n	b7fa <usbdc_get_desc_req+0x3a>
    b7de:	2b03      	cmp	r3, #3
    b7e0:	d012      	beq.n	b808 <usbdc_get_desc_req+0x48>
    b7e2:	2b01      	cmp	r3, #1
    b7e4:	d002      	beq.n	b7ec <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    b7e6:	bf00      	nop
	}
	return false;
    b7e8:	2300      	movs	r3, #0
    b7ea:	e013      	b.n	b814 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    b7ec:	79fb      	ldrb	r3, [r7, #7]
    b7ee:	6839      	ldr	r1, [r7, #0]
    b7f0:	4618      	mov	r0, r3
    b7f2:	4b0a      	ldr	r3, [pc, #40]	; (b81c <usbdc_get_desc_req+0x5c>)
    b7f4:	4798      	blx	r3
    b7f6:	4603      	mov	r3, r0
    b7f8:	e00c      	b.n	b814 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    b7fa:	79fb      	ldrb	r3, [r7, #7]
    b7fc:	6839      	ldr	r1, [r7, #0]
    b7fe:	4618      	mov	r0, r3
    b800:	4b07      	ldr	r3, [pc, #28]	; (b820 <usbdc_get_desc_req+0x60>)
    b802:	4798      	blx	r3
    b804:	4603      	mov	r3, r0
    b806:	e005      	b.n	b814 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    b808:	79fb      	ldrb	r3, [r7, #7]
    b80a:	6839      	ldr	r1, [r7, #0]
    b80c:	4618      	mov	r0, r3
    b80e:	4b05      	ldr	r3, [pc, #20]	; (b824 <usbdc_get_desc_req+0x64>)
    b810:	4798      	blx	r3
    b812:	4603      	mov	r3, r0
}
    b814:	4618      	mov	r0, r3
    b816:	3710      	adds	r7, #16
    b818:	46bd      	mov	sp, r7
    b81a:	bd80      	pop	{r7, pc}
    b81c:	0000b601 	.word	0x0000b601
    b820:	0000b679 	.word	0x0000b679
    b824:	0000b729 	.word	0x0000b729

0000b828 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    b828:	b590      	push	{r4, r7, lr}
    b82a:	b085      	sub	sp, #20
    b82c:	af00      	add	r7, sp, #0
    b82e:	4603      	mov	r3, r0
    b830:	6039      	str	r1, [r7, #0]
    b832:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b834:	683b      	ldr	r3, [r7, #0]
    b836:	781b      	ldrb	r3, [r3, #0]
    b838:	f003 031f 	and.w	r3, r3, #31
    b83c:	2b00      	cmp	r3, #0
    b83e:	db1b      	blt.n	b878 <usbdc_get_status_req+0x50>
    b840:	2b01      	cmp	r3, #1
    b842:	dd02      	ble.n	b84a <usbdc_get_status_req+0x22>
    b844:	2b02      	cmp	r3, #2
    b846:	d003      	beq.n	b850 <usbdc_get_status_req+0x28>
    b848:	e016      	b.n	b878 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    b84a:	2300      	movs	r3, #0
    b84c:	60fb      	str	r3, [r7, #12]
		break;
    b84e:	e015      	b.n	b87c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    b850:	683b      	ldr	r3, [r7, #0]
    b852:	889b      	ldrh	r3, [r3, #4]
    b854:	b29b      	uxth	r3, r3
    b856:	b2db      	uxtb	r3, r3
    b858:	2102      	movs	r1, #2
    b85a:	4618      	mov	r0, r3
    b85c:	4b0f      	ldr	r3, [pc, #60]	; (b89c <usbdc_get_status_req+0x74>)
    b85e:	4798      	blx	r3
    b860:	4603      	mov	r3, r0
    b862:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    b864:	68fb      	ldr	r3, [r7, #12]
    b866:	2b00      	cmp	r3, #0
    b868:	da01      	bge.n	b86e <usbdc_get_status_req+0x46>
			return false;
    b86a:	2300      	movs	r3, #0
    b86c:	e012      	b.n	b894 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    b86e:	68fb      	ldr	r3, [r7, #12]
    b870:	f003 0301 	and.w	r3, r3, #1
    b874:	60fb      	str	r3, [r7, #12]
		break;
    b876:	e001      	b.n	b87c <usbdc_get_status_req+0x54>
	default:
		return false;
    b878:	2300      	movs	r3, #0
    b87a:	e00b      	b.n	b894 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    b87c:	4b08      	ldr	r3, [pc, #32]	; (b8a0 <usbdc_get_status_req+0x78>)
    b87e:	695b      	ldr	r3, [r3, #20]
    b880:	89ba      	ldrh	r2, [r7, #12]
    b882:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    b884:	4b06      	ldr	r3, [pc, #24]	; (b8a0 <usbdc_get_status_req+0x78>)
    b886:	6959      	ldr	r1, [r3, #20]
    b888:	79f8      	ldrb	r0, [r7, #7]
    b88a:	2300      	movs	r3, #0
    b88c:	2202      	movs	r2, #2
    b88e:	4c05      	ldr	r4, [pc, #20]	; (b8a4 <usbdc_get_status_req+0x7c>)
    b890:	47a0      	blx	r4
	return true;
    b892:	2301      	movs	r3, #1
}
    b894:	4618      	mov	r0, r3
    b896:	3714      	adds	r7, #20
    b898:	46bd      	mov	sp, r7
    b89a:	bd90      	pop	{r4, r7, pc}
    b89c:	00002d11 	.word	0x00002d11
    b8a0:	20000cc4 	.word	0x20000cc4
    b8a4:	0000c0e5 	.word	0x0000c0e5

0000b8a8 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    b8a8:	b590      	push	{r4, r7, lr}
    b8aa:	b085      	sub	sp, #20
    b8ac:	af00      	add	r7, sp, #0
    b8ae:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b8b0:	4b1f      	ldr	r3, [pc, #124]	; (b930 <usbdc_get_interface+0x88>)
    b8b2:	691b      	ldr	r3, [r3, #16]
    b8b4:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    b8b6:	4b1e      	ldr	r3, [pc, #120]	; (b930 <usbdc_get_interface+0x88>)
    b8b8:	7f5b      	ldrb	r3, [r3, #29]
    b8ba:	461a      	mov	r2, r3
    b8bc:	687b      	ldr	r3, [r7, #4]
    b8be:	889b      	ldrh	r3, [r3, #4]
    b8c0:	b29b      	uxth	r3, r3
    b8c2:	fa42 f303 	asr.w	r3, r2, r3
    b8c6:	f003 0301 	and.w	r3, r3, #1
    b8ca:	2b00      	cmp	r3, #0
    b8cc:	d128      	bne.n	b920 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    b8ce:	4b18      	ldr	r3, [pc, #96]	; (b930 <usbdc_get_interface+0x88>)
    b8d0:	695b      	ldr	r3, [r3, #20]
    b8d2:	2200      	movs	r2, #0
    b8d4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b8d6:	4b16      	ldr	r3, [pc, #88]	; (b930 <usbdc_get_interface+0x88>)
    b8d8:	6959      	ldr	r1, [r3, #20]
    b8da:	2300      	movs	r3, #0
    b8dc:	2201      	movs	r2, #1
    b8de:	2000      	movs	r0, #0
    b8e0:	4c14      	ldr	r4, [pc, #80]	; (b934 <usbdc_get_interface+0x8c>)
    b8e2:	47a0      	blx	r4
		return true;
    b8e4:	2301      	movs	r3, #1
    b8e6:	e01f      	b.n	b928 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    b8e8:	68fb      	ldr	r3, [r7, #12]
    b8ea:	685b      	ldr	r3, [r3, #4]
    b8ec:	687a      	ldr	r2, [r7, #4]
    b8ee:	2102      	movs	r1, #2
    b8f0:	68f8      	ldr	r0, [r7, #12]
    b8f2:	4798      	blx	r3
    b8f4:	60b8      	str	r0, [r7, #8]
    b8f6:	68bb      	ldr	r3, [r7, #8]
    b8f8:	2b00      	cmp	r3, #0
    b8fa:	da03      	bge.n	b904 <usbdc_get_interface+0x5c>
			func = func->next;
    b8fc:	68fb      	ldr	r3, [r7, #12]
    b8fe:	681b      	ldr	r3, [r3, #0]
    b900:	60fb      	str	r3, [r7, #12]
    b902:	e00d      	b.n	b920 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    b904:	4b0a      	ldr	r3, [pc, #40]	; (b930 <usbdc_get_interface+0x88>)
    b906:	695b      	ldr	r3, [r3, #20]
    b908:	68ba      	ldr	r2, [r7, #8]
    b90a:	b2d2      	uxtb	r2, r2
    b90c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b90e:	4b08      	ldr	r3, [pc, #32]	; (b930 <usbdc_get_interface+0x88>)
    b910:	6959      	ldr	r1, [r3, #20]
    b912:	2300      	movs	r3, #0
    b914:	2201      	movs	r2, #1
    b916:	2000      	movs	r0, #0
    b918:	4c06      	ldr	r4, [pc, #24]	; (b934 <usbdc_get_interface+0x8c>)
    b91a:	47a0      	blx	r4
			return true;
    b91c:	2301      	movs	r3, #1
    b91e:	e003      	b.n	b928 <usbdc_get_interface+0x80>
	while (NULL != func) {
    b920:	68fb      	ldr	r3, [r7, #12]
    b922:	2b00      	cmp	r3, #0
    b924:	d1e0      	bne.n	b8e8 <usbdc_get_interface+0x40>
		}
	}
	return false;
    b926:	2300      	movs	r3, #0
}
    b928:	4618      	mov	r0, r3
    b92a:	3714      	adds	r7, #20
    b92c:	46bd      	mov	sp, r7
    b92e:	bd90      	pop	{r4, r7, pc}
    b930:	20000cc4 	.word	0x20000cc4
    b934:	0000c0e5 	.word	0x0000c0e5

0000b938 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    b938:	b590      	push	{r4, r7, lr}
    b93a:	b083      	sub	sp, #12
    b93c:	af00      	add	r7, sp, #0
    b93e:	4603      	mov	r3, r0
    b940:	6039      	str	r1, [r7, #0]
    b942:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    b944:	683b      	ldr	r3, [r7, #0]
    b946:	785b      	ldrb	r3, [r3, #1]
    b948:	2b0a      	cmp	r3, #10
    b94a:	d83a      	bhi.n	b9c2 <usbdc_get_req+0x8a>
    b94c:	a201      	add	r2, pc, #4	; (adr r2, b954 <usbdc_get_req+0x1c>)
    b94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b952:	bf00      	nop
    b954:	0000b9ab 	.word	0x0000b9ab
    b958:	0000b9c3 	.word	0x0000b9c3
    b95c:	0000b9c3 	.word	0x0000b9c3
    b960:	0000b9c3 	.word	0x0000b9c3
    b964:	0000b9c3 	.word	0x0000b9c3
    b968:	0000b9c3 	.word	0x0000b9c3
    b96c:	0000b981 	.word	0x0000b981
    b970:	0000b9c3 	.word	0x0000b9c3
    b974:	0000b98f 	.word	0x0000b98f
    b978:	0000b9c3 	.word	0x0000b9c3
    b97c:	0000b9b9 	.word	0x0000b9b9
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    b980:	79fb      	ldrb	r3, [r7, #7]
    b982:	6839      	ldr	r1, [r7, #0]
    b984:	4618      	mov	r0, r3
    b986:	4b11      	ldr	r3, [pc, #68]	; (b9cc <usbdc_get_req+0x94>)
    b988:	4798      	blx	r3
    b98a:	4603      	mov	r3, r0
    b98c:	e01a      	b.n	b9c4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    b98e:	4b10      	ldr	r3, [pc, #64]	; (b9d0 <usbdc_get_req+0x98>)
    b990:	695b      	ldr	r3, [r3, #20]
    b992:	4a0f      	ldr	r2, [pc, #60]	; (b9d0 <usbdc_get_req+0x98>)
    b994:	7ed2      	ldrb	r2, [r2, #27]
    b996:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    b998:	4b0d      	ldr	r3, [pc, #52]	; (b9d0 <usbdc_get_req+0x98>)
    b99a:	6959      	ldr	r1, [r3, #20]
    b99c:	79f8      	ldrb	r0, [r7, #7]
    b99e:	2300      	movs	r3, #0
    b9a0:	2201      	movs	r2, #1
    b9a2:	4c0c      	ldr	r4, [pc, #48]	; (b9d4 <usbdc_get_req+0x9c>)
    b9a4:	47a0      	blx	r4
		return true;
    b9a6:	2301      	movs	r3, #1
    b9a8:	e00c      	b.n	b9c4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    b9aa:	79fb      	ldrb	r3, [r7, #7]
    b9ac:	6839      	ldr	r1, [r7, #0]
    b9ae:	4618      	mov	r0, r3
    b9b0:	4b09      	ldr	r3, [pc, #36]	; (b9d8 <usbdc_get_req+0xa0>)
    b9b2:	4798      	blx	r3
    b9b4:	4603      	mov	r3, r0
    b9b6:	e005      	b.n	b9c4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    b9b8:	6838      	ldr	r0, [r7, #0]
    b9ba:	4b08      	ldr	r3, [pc, #32]	; (b9dc <usbdc_get_req+0xa4>)
    b9bc:	4798      	blx	r3
    b9be:	4603      	mov	r3, r0
    b9c0:	e000      	b.n	b9c4 <usbdc_get_req+0x8c>
	default:
		return false;
    b9c2:	2300      	movs	r3, #0
	}
}
    b9c4:	4618      	mov	r0, r3
    b9c6:	370c      	adds	r7, #12
    b9c8:	46bd      	mov	sp, r7
    b9ca:	bd90      	pop	{r4, r7, pc}
    b9cc:	0000b7c1 	.word	0x0000b7c1
    b9d0:	20000cc4 	.word	0x20000cc4
    b9d4:	0000c0e5 	.word	0x0000c0e5
    b9d8:	0000b829 	.word	0x0000b829
    b9dc:	0000b8a9 	.word	0x0000b8a9

0000b9e0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    b9e0:	b590      	push	{r4, r7, lr}
    b9e2:	b083      	sub	sp, #12
    b9e4:	af00      	add	r7, sp, #0
    b9e6:	4603      	mov	r3, r0
    b9e8:	6039      	str	r1, [r7, #0]
    b9ea:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b9ec:	683b      	ldr	r3, [r7, #0]
    b9ee:	781b      	ldrb	r3, [r3, #0]
    b9f0:	f003 031f 	and.w	r3, r3, #31
    b9f4:	2b02      	cmp	r3, #2
    b9f6:	d116      	bne.n	ba26 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    b9f8:	683b      	ldr	r3, [r7, #0]
    b9fa:	88db      	ldrh	r3, [r3, #6]
    b9fc:	b29b      	uxth	r3, r3
    b9fe:	2b00      	cmp	r3, #0
    ba00:	d001      	beq.n	ba06 <usbdc_clear_ftr_req+0x26>
			return false;
    ba02:	2300      	movs	r3, #0
    ba04:	e010      	b.n	ba28 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    ba06:	683b      	ldr	r3, [r7, #0]
    ba08:	889b      	ldrh	r3, [r3, #4]
    ba0a:	b29b      	uxth	r3, r3
    ba0c:	b2db      	uxtb	r3, r3
    ba0e:	2100      	movs	r1, #0
    ba10:	4618      	mov	r0, r3
    ba12:	4b07      	ldr	r3, [pc, #28]	; (ba30 <usbdc_clear_ftr_req+0x50>)
    ba14:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ba16:	79f8      	ldrb	r0, [r7, #7]
    ba18:	2301      	movs	r3, #1
    ba1a:	2200      	movs	r2, #0
    ba1c:	2100      	movs	r1, #0
    ba1e:	4c05      	ldr	r4, [pc, #20]	; (ba34 <usbdc_clear_ftr_req+0x54>)
    ba20:	47a0      	blx	r4
		return true;
    ba22:	2301      	movs	r3, #1
    ba24:	e000      	b.n	ba28 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    ba26:	2300      	movs	r3, #0
	}
}
    ba28:	4618      	mov	r0, r3
    ba2a:	370c      	adds	r7, #12
    ba2c:	46bd      	mov	sp, r7
    ba2e:	bd90      	pop	{r4, r7, pc}
    ba30:	00002d11 	.word	0x00002d11
    ba34:	0000c0e5 	.word	0x0000c0e5

0000ba38 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    ba38:	b590      	push	{r4, r7, lr}
    ba3a:	b083      	sub	sp, #12
    ba3c:	af00      	add	r7, sp, #0
    ba3e:	4603      	mov	r3, r0
    ba40:	6039      	str	r1, [r7, #0]
    ba42:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ba44:	683b      	ldr	r3, [r7, #0]
    ba46:	781b      	ldrb	r3, [r3, #0]
    ba48:	f003 031f 	and.w	r3, r3, #31
    ba4c:	2b02      	cmp	r3, #2
    ba4e:	d116      	bne.n	ba7e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    ba50:	683b      	ldr	r3, [r7, #0]
    ba52:	88db      	ldrh	r3, [r3, #6]
    ba54:	b29b      	uxth	r3, r3
    ba56:	2b00      	cmp	r3, #0
    ba58:	d001      	beq.n	ba5e <usbdc_set_ftr_req+0x26>
			return false;
    ba5a:	2300      	movs	r3, #0
    ba5c:	e010      	b.n	ba80 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    ba5e:	683b      	ldr	r3, [r7, #0]
    ba60:	889b      	ldrh	r3, [r3, #4]
    ba62:	b29b      	uxth	r3, r3
    ba64:	b2db      	uxtb	r3, r3
    ba66:	2101      	movs	r1, #1
    ba68:	4618      	mov	r0, r3
    ba6a:	4b07      	ldr	r3, [pc, #28]	; (ba88 <usbdc_set_ftr_req+0x50>)
    ba6c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ba6e:	79f8      	ldrb	r0, [r7, #7]
    ba70:	2301      	movs	r3, #1
    ba72:	2200      	movs	r2, #0
    ba74:	2100      	movs	r1, #0
    ba76:	4c05      	ldr	r4, [pc, #20]	; (ba8c <usbdc_set_ftr_req+0x54>)
    ba78:	47a0      	blx	r4
		return true;
    ba7a:	2301      	movs	r3, #1
    ba7c:	e000      	b.n	ba80 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    ba7e:	2300      	movs	r3, #0
	}
}
    ba80:	4618      	mov	r0, r3
    ba82:	370c      	adds	r7, #12
    ba84:	46bd      	mov	sp, r7
    ba86:	bd90      	pop	{r4, r7, pc}
    ba88:	00002d11 	.word	0x00002d11
    ba8c:	0000c0e5 	.word	0x0000c0e5

0000ba90 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    ba90:	b580      	push	{r7, lr}
    ba92:	b082      	sub	sp, #8
    ba94:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ba96:	4b0a      	ldr	r3, [pc, #40]	; (bac0 <usbdc_unconfig+0x30>)
    ba98:	691b      	ldr	r3, [r3, #16]
    ba9a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    ba9c:	e008      	b.n	bab0 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    ba9e:	687b      	ldr	r3, [r7, #4]
    baa0:	685b      	ldr	r3, [r3, #4]
    baa2:	2200      	movs	r2, #0
    baa4:	2101      	movs	r1, #1
    baa6:	6878      	ldr	r0, [r7, #4]
    baa8:	4798      	blx	r3
		func = func->next;
    baaa:	687b      	ldr	r3, [r7, #4]
    baac:	681b      	ldr	r3, [r3, #0]
    baae:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    bab0:	687b      	ldr	r3, [r7, #4]
    bab2:	2b00      	cmp	r3, #0
    bab4:	d1f3      	bne.n	ba9e <usbdc_unconfig+0xe>
	}
}
    bab6:	bf00      	nop
    bab8:	3708      	adds	r7, #8
    baba:	46bd      	mov	sp, r7
    babc:	bd80      	pop	{r7, pc}
    babe:	bf00      	nop
    bac0:	20000cc4 	.word	0x20000cc4

0000bac4 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    bac4:	b580      	push	{r7, lr}
    bac6:	b088      	sub	sp, #32
    bac8:	af00      	add	r7, sp, #0
    baca:	4603      	mov	r3, r0
    bacc:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    bace:	2300      	movs	r3, #0
    bad0:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    bad2:	23ff      	movs	r3, #255	; 0xff
    bad4:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    bad6:	79fb      	ldrb	r3, [r7, #7]
    bad8:	2b00      	cmp	r3, #0
    bada:	d103      	bne.n	bae4 <usbdc_set_config+0x20>
		usbdc_unconfig();
    badc:	4b2e      	ldr	r3, [pc, #184]	; (bb98 <usbdc_set_config+0xd4>)
    bade:	4798      	blx	r3
		return true;
    bae0:	2301      	movs	r3, #1
    bae2:	e055      	b.n	bb90 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    bae4:	69bb      	ldr	r3, [r7, #24]
    bae6:	2b00      	cmp	r3, #0
    bae8:	d10a      	bne.n	bb00 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    baea:	4b2c      	ldr	r3, [pc, #176]	; (bb9c <usbdc_set_config+0xd8>)
    baec:	681b      	ldr	r3, [r3, #0]
    baee:	6818      	ldr	r0, [r3, #0]
    baf0:	4b2a      	ldr	r3, [pc, #168]	; (bb9c <usbdc_set_config+0xd8>)
    baf2:	681b      	ldr	r3, [r3, #0]
    baf4:	685b      	ldr	r3, [r3, #4]
    baf6:	79fa      	ldrb	r2, [r7, #7]
    baf8:	4619      	mov	r1, r3
    bafa:	4b29      	ldr	r3, [pc, #164]	; (bba0 <usbdc_set_config+0xdc>)
    bafc:	4798      	blx	r3
    bafe:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    bb00:	69bb      	ldr	r3, [r7, #24]
    bb02:	2b00      	cmp	r3, #0
    bb04:	d101      	bne.n	bb0a <usbdc_set_config+0x46>
		return false;
    bb06:	2300      	movs	r3, #0
    bb08:	e042      	b.n	bb90 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    bb0a:	69b8      	ldr	r0, [r7, #24]
    bb0c:	4b25      	ldr	r3, [pc, #148]	; (bba4 <usbdc_set_config+0xe0>)
    bb0e:	4798      	blx	r3
    bb10:	4603      	mov	r3, r0
    bb12:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    bb14:	8abb      	ldrh	r3, [r7, #20]
    bb16:	69ba      	ldr	r2, [r7, #24]
    bb18:	4413      	add	r3, r2
    bb1a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    bb1c:	693b      	ldr	r3, [r7, #16]
    bb1e:	2204      	movs	r2, #4
    bb20:	4619      	mov	r1, r3
    bb22:	69b8      	ldr	r0, [r7, #24]
    bb24:	4b20      	ldr	r3, [pc, #128]	; (bba8 <usbdc_set_config+0xe4>)
    bb26:	4798      	blx	r3
    bb28:	4603      	mov	r3, r0
    bb2a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    bb2c:	e02c      	b.n	bb88 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    bb2e:	68fb      	ldr	r3, [r7, #12]
    bb30:	3302      	adds	r3, #2
    bb32:	781b      	ldrb	r3, [r3, #0]
    bb34:	7dfa      	ldrb	r2, [r7, #23]
    bb36:	429a      	cmp	r2, r3
    bb38:	d018      	beq.n	bb6c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    bb3a:	68fb      	ldr	r3, [r7, #12]
    bb3c:	789b      	ldrb	r3, [r3, #2]
    bb3e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    bb40:	4b16      	ldr	r3, [pc, #88]	; (bb9c <usbdc_set_config+0xd8>)
    bb42:	691b      	ldr	r3, [r3, #16]
    bb44:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bb46:	e00c      	b.n	bb62 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    bb48:	69fb      	ldr	r3, [r7, #28]
    bb4a:	685b      	ldr	r3, [r3, #4]
    bb4c:	f107 020c 	add.w	r2, r7, #12
    bb50:	2100      	movs	r1, #0
    bb52:	69f8      	ldr	r0, [r7, #28]
    bb54:	4798      	blx	r3
    bb56:	4603      	mov	r3, r0
    bb58:	2b00      	cmp	r3, #0
    bb5a:	d006      	beq.n	bb6a <usbdc_set_config+0xa6>
					func = func->next;
    bb5c:	69fb      	ldr	r3, [r7, #28]
    bb5e:	681b      	ldr	r3, [r3, #0]
    bb60:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bb62:	69fb      	ldr	r3, [r7, #28]
    bb64:	2b00      	cmp	r3, #0
    bb66:	d1ef      	bne.n	bb48 <usbdc_set_config+0x84>
    bb68:	e000      	b.n	bb6c <usbdc_set_config+0xa8>
				} else {
					break;
    bb6a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    bb6c:	68fb      	ldr	r3, [r7, #12]
    bb6e:	4618      	mov	r0, r3
    bb70:	4b0e      	ldr	r3, [pc, #56]	; (bbac <usbdc_set_config+0xe8>)
    bb72:	4798      	blx	r3
    bb74:	4603      	mov	r3, r0
    bb76:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    bb78:	68fb      	ldr	r3, [r7, #12]
    bb7a:	6939      	ldr	r1, [r7, #16]
    bb7c:	2204      	movs	r2, #4
    bb7e:	4618      	mov	r0, r3
    bb80:	4b09      	ldr	r3, [pc, #36]	; (bba8 <usbdc_set_config+0xe4>)
    bb82:	4798      	blx	r3
    bb84:	4603      	mov	r3, r0
    bb86:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    bb88:	68fb      	ldr	r3, [r7, #12]
    bb8a:	2b00      	cmp	r3, #0
    bb8c:	d1cf      	bne.n	bb2e <usbdc_set_config+0x6a>
	}
	return true;
    bb8e:	2301      	movs	r3, #1
}
    bb90:	4618      	mov	r0, r3
    bb92:	3720      	adds	r7, #32
    bb94:	46bd      	mov	sp, r7
    bb96:	bd80      	pop	{r7, pc}
    bb98:	0000ba91 	.word	0x0000ba91
    bb9c:	20000cc4 	.word	0x20000cc4
    bba0:	0000c435 	.word	0x0000c435
    bba4:	0000b5e1 	.word	0x0000b5e1
    bba8:	0000c375 	.word	0x0000c375
    bbac:	0000b5bd 	.word	0x0000b5bd

0000bbb0 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    bbb0:	b580      	push	{r7, lr}
    bbb2:	b082      	sub	sp, #8
    bbb4:	af00      	add	r7, sp, #0
    bbb6:	4603      	mov	r3, r0
    bbb8:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    bbba:	79fb      	ldrb	r3, [r7, #7]
    bbbc:	4618      	mov	r0, r3
    bbbe:	4b03      	ldr	r3, [pc, #12]	; (bbcc <usbdc_set_address+0x1c>)
    bbc0:	4798      	blx	r3
}
    bbc2:	bf00      	nop
    bbc4:	3708      	adds	r7, #8
    bbc6:	46bd      	mov	sp, r7
    bbc8:	bd80      	pop	{r7, pc}
    bbca:	bf00      	nop
    bbcc:	00002981 	.word	0x00002981

0000bbd0 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    bbd0:	b590      	push	{r4, r7, lr}
    bbd2:	b087      	sub	sp, #28
    bbd4:	af00      	add	r7, sp, #0
    bbd6:	4603      	mov	r3, r0
    bbd8:	460a      	mov	r2, r1
    bbda:	80fb      	strh	r3, [r7, #6]
    bbdc:	4613      	mov	r3, r2
    bbde:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    bbe0:	2300      	movs	r3, #0
    bbe2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    bbe4:	693b      	ldr	r3, [r7, #16]
    bbe6:	2b00      	cmp	r3, #0
    bbe8:	d10b      	bne.n	bc02 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    bbea:	4b43      	ldr	r3, [pc, #268]	; (bcf8 <usbdc_set_interface+0x128>)
    bbec:	681b      	ldr	r3, [r3, #0]
    bbee:	6818      	ldr	r0, [r3, #0]
    bbf0:	4b41      	ldr	r3, [pc, #260]	; (bcf8 <usbdc_set_interface+0x128>)
    bbf2:	681b      	ldr	r3, [r3, #0]
    bbf4:	6859      	ldr	r1, [r3, #4]
    bbf6:	4b40      	ldr	r3, [pc, #256]	; (bcf8 <usbdc_set_interface+0x128>)
    bbf8:	7edb      	ldrb	r3, [r3, #27]
    bbfa:	461a      	mov	r2, r3
    bbfc:	4b3f      	ldr	r3, [pc, #252]	; (bcfc <usbdc_set_interface+0x12c>)
    bbfe:	4798      	blx	r3
    bc00:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    bc02:	693b      	ldr	r3, [r7, #16]
    bc04:	2b00      	cmp	r3, #0
    bc06:	d101      	bne.n	bc0c <usbdc_set_interface+0x3c>
		return false;
    bc08:	2300      	movs	r3, #0
    bc0a:	e071      	b.n	bcf0 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    bc0c:	693b      	ldr	r3, [r7, #16]
    bc0e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    bc10:	6938      	ldr	r0, [r7, #16]
    bc12:	4b3b      	ldr	r3, [pc, #236]	; (bd00 <usbdc_set_interface+0x130>)
    bc14:	4798      	blx	r3
    bc16:	4603      	mov	r3, r0
    bc18:	461a      	mov	r2, r3
    bc1a:	693b      	ldr	r3, [r7, #16]
    bc1c:	4413      	add	r3, r2
    bc1e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    bc20:	68bb      	ldr	r3, [r7, #8]
    bc22:	68f9      	ldr	r1, [r7, #12]
    bc24:	2204      	movs	r2, #4
    bc26:	4618      	mov	r0, r3
    bc28:	4b36      	ldr	r3, [pc, #216]	; (bd04 <usbdc_set_interface+0x134>)
    bc2a:	4798      	blx	r3
    bc2c:	6138      	str	r0, [r7, #16]
    bc2e:	693b      	ldr	r3, [r7, #16]
    bc30:	2b00      	cmp	r3, #0
    bc32:	d113      	bne.n	bc5c <usbdc_set_interface+0x8c>
		return false;
    bc34:	2300      	movs	r3, #0
    bc36:	e05b      	b.n	bcf0 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    bc38:	68bb      	ldr	r3, [r7, #8]
    bc3a:	4618      	mov	r0, r3
    bc3c:	4b32      	ldr	r3, [pc, #200]	; (bd08 <usbdc_set_interface+0x138>)
    bc3e:	4798      	blx	r3
    bc40:	4603      	mov	r3, r0
    bc42:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    bc44:	68bb      	ldr	r3, [r7, #8]
    bc46:	68f9      	ldr	r1, [r7, #12]
    bc48:	2204      	movs	r2, #4
    bc4a:	4618      	mov	r0, r3
    bc4c:	4b2d      	ldr	r3, [pc, #180]	; (bd04 <usbdc_set_interface+0x134>)
    bc4e:	4798      	blx	r3
    bc50:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    bc52:	693b      	ldr	r3, [r7, #16]
    bc54:	2b00      	cmp	r3, #0
    bc56:	d101      	bne.n	bc5c <usbdc_set_interface+0x8c>
			return false;
    bc58:	2300      	movs	r3, #0
    bc5a:	e049      	b.n	bcf0 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    bc5c:	693b      	ldr	r3, [r7, #16]
    bc5e:	3302      	adds	r3, #2
    bc60:	781b      	ldrb	r3, [r3, #0]
    bc62:	b29b      	uxth	r3, r3
    bc64:	88ba      	ldrh	r2, [r7, #4]
    bc66:	429a      	cmp	r2, r3
    bc68:	d1e6      	bne.n	bc38 <usbdc_set_interface+0x68>
    bc6a:	693b      	ldr	r3, [r7, #16]
    bc6c:	3303      	adds	r3, #3
    bc6e:	781b      	ldrb	r3, [r3, #0]
    bc70:	b29b      	uxth	r3, r3
    bc72:	88fa      	ldrh	r2, [r7, #6]
    bc74:	429a      	cmp	r2, r3
    bc76:	d1df      	bne.n	bc38 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    bc78:	693b      	ldr	r3, [r7, #16]
    bc7a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    bc7c:	4b1e      	ldr	r3, [pc, #120]	; (bcf8 <usbdc_set_interface+0x128>)
    bc7e:	691b      	ldr	r3, [r3, #16]
    bc80:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    bc82:	e031      	b.n	bce8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    bc84:	697b      	ldr	r3, [r7, #20]
    bc86:	685b      	ldr	r3, [r3, #4]
    bc88:	f107 0208 	add.w	r2, r7, #8
    bc8c:	2101      	movs	r1, #1
    bc8e:	6978      	ldr	r0, [r7, #20]
    bc90:	4798      	blx	r3
    bc92:	4603      	mov	r3, r0
    bc94:	2b00      	cmp	r3, #0
    bc96:	d003      	beq.n	bca0 <usbdc_set_interface+0xd0>
			func = func->next;
    bc98:	697b      	ldr	r3, [r7, #20]
    bc9a:	681b      	ldr	r3, [r3, #0]
    bc9c:	617b      	str	r3, [r7, #20]
    bc9e:	e023      	b.n	bce8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    bca0:	697b      	ldr	r3, [r7, #20]
    bca2:	685b      	ldr	r3, [r3, #4]
    bca4:	f107 0208 	add.w	r2, r7, #8
    bca8:	2100      	movs	r1, #0
    bcaa:	6978      	ldr	r0, [r7, #20]
    bcac:	4798      	blx	r3
    bcae:	4603      	mov	r3, r0
    bcb0:	2b00      	cmp	r3, #0
    bcb2:	d117      	bne.n	bce4 <usbdc_set_interface+0x114>
			if (alt_set) {
    bcb4:	88fb      	ldrh	r3, [r7, #6]
    bcb6:	2b00      	cmp	r3, #0
    bcb8:	d00c      	beq.n	bcd4 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    bcba:	4b0f      	ldr	r3, [pc, #60]	; (bcf8 <usbdc_set_interface+0x128>)
    bcbc:	7f5b      	ldrb	r3, [r3, #29]
    bcbe:	b25a      	sxtb	r2, r3
    bcc0:	88bb      	ldrh	r3, [r7, #4]
    bcc2:	2101      	movs	r1, #1
    bcc4:	fa01 f303 	lsl.w	r3, r1, r3
    bcc8:	b25b      	sxtb	r3, r3
    bcca:	4313      	orrs	r3, r2
    bccc:	b25b      	sxtb	r3, r3
    bcce:	b2da      	uxtb	r2, r3
    bcd0:	4b09      	ldr	r3, [pc, #36]	; (bcf8 <usbdc_set_interface+0x128>)
    bcd2:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    bcd4:	2300      	movs	r3, #0
    bcd6:	2200      	movs	r2, #0
    bcd8:	2100      	movs	r1, #0
    bcda:	2000      	movs	r0, #0
    bcdc:	4c0b      	ldr	r4, [pc, #44]	; (bd0c <usbdc_set_interface+0x13c>)
    bcde:	47a0      	blx	r4
			return true;
    bce0:	2301      	movs	r3, #1
    bce2:	e005      	b.n	bcf0 <usbdc_set_interface+0x120>
		} else {
			return false;
    bce4:	2300      	movs	r3, #0
    bce6:	e003      	b.n	bcf0 <usbdc_set_interface+0x120>
	while (NULL != func) {
    bce8:	697b      	ldr	r3, [r7, #20]
    bcea:	2b00      	cmp	r3, #0
    bcec:	d1ca      	bne.n	bc84 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    bcee:	2300      	movs	r3, #0
}
    bcf0:	4618      	mov	r0, r3
    bcf2:	371c      	adds	r7, #28
    bcf4:	46bd      	mov	sp, r7
    bcf6:	bd90      	pop	{r4, r7, pc}
    bcf8:	20000cc4 	.word	0x20000cc4
    bcfc:	0000c435 	.word	0x0000c435
    bd00:	0000b5e1 	.word	0x0000b5e1
    bd04:	0000c375 	.word	0x0000c375
    bd08:	0000b5bd 	.word	0x0000b5bd
    bd0c:	0000c0e5 	.word	0x0000c0e5

0000bd10 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    bd10:	b590      	push	{r4, r7, lr}
    bd12:	b083      	sub	sp, #12
    bd14:	af00      	add	r7, sp, #0
    bd16:	4603      	mov	r3, r0
    bd18:	6039      	str	r1, [r7, #0]
    bd1a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    bd1c:	683b      	ldr	r3, [r7, #0]
    bd1e:	785b      	ldrb	r3, [r3, #1]
    bd20:	3b01      	subs	r3, #1
    bd22:	2b0a      	cmp	r3, #10
    bd24:	d85b      	bhi.n	bdde <usbdc_set_req+0xce>
    bd26:	a201      	add	r2, pc, #4	; (adr r2, bd2c <usbdc_set_req+0x1c>)
    bd28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bd2c:	0000bdab 	.word	0x0000bdab
    bd30:	0000bddf 	.word	0x0000bddf
    bd34:	0000bdb9 	.word	0x0000bdb9
    bd38:	0000bddf 	.word	0x0000bddf
    bd3c:	0000bd59 	.word	0x0000bd59
    bd40:	0000bddf 	.word	0x0000bddf
    bd44:	0000bddf 	.word	0x0000bddf
    bd48:	0000bddf 	.word	0x0000bddf
    bd4c:	0000bd73 	.word	0x0000bd73
    bd50:	0000bddf 	.word	0x0000bddf
    bd54:	0000bdc7 	.word	0x0000bdc7
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    bd58:	79f8      	ldrb	r0, [r7, #7]
    bd5a:	2301      	movs	r3, #1
    bd5c:	2200      	movs	r2, #0
    bd5e:	2100      	movs	r1, #0
    bd60:	4c21      	ldr	r4, [pc, #132]	; (bde8 <usbdc_set_req+0xd8>)
    bd62:	47a0      	blx	r4
    bd64:	4603      	mov	r3, r0
    bd66:	2b00      	cmp	r3, #0
    bd68:	bf0c      	ite	eq
    bd6a:	2301      	moveq	r3, #1
    bd6c:	2300      	movne	r3, #0
    bd6e:	b2db      	uxtb	r3, r3
    bd70:	e036      	b.n	bde0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    bd72:	683b      	ldr	r3, [r7, #0]
    bd74:	885b      	ldrh	r3, [r3, #2]
    bd76:	b29b      	uxth	r3, r3
    bd78:	b2db      	uxtb	r3, r3
    bd7a:	4618      	mov	r0, r3
    bd7c:	4b1b      	ldr	r3, [pc, #108]	; (bdec <usbdc_set_req+0xdc>)
    bd7e:	4798      	blx	r3
    bd80:	4603      	mov	r3, r0
    bd82:	f083 0301 	eor.w	r3, r3, #1
    bd86:	b2db      	uxtb	r3, r3
    bd88:	2b00      	cmp	r3, #0
    bd8a:	d001      	beq.n	bd90 <usbdc_set_req+0x80>
			return false;
    bd8c:	2300      	movs	r3, #0
    bd8e:	e027      	b.n	bde0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    bd90:	79f8      	ldrb	r0, [r7, #7]
    bd92:	2301      	movs	r3, #1
    bd94:	2200      	movs	r2, #0
    bd96:	2100      	movs	r1, #0
    bd98:	4c13      	ldr	r4, [pc, #76]	; (bde8 <usbdc_set_req+0xd8>)
    bd9a:	47a0      	blx	r4
    bd9c:	4603      	mov	r3, r0
    bd9e:	2b00      	cmp	r3, #0
    bda0:	bf0c      	ite	eq
    bda2:	2301      	moveq	r3, #1
    bda4:	2300      	movne	r3, #0
    bda6:	b2db      	uxtb	r3, r3
    bda8:	e01a      	b.n	bde0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    bdaa:	79fb      	ldrb	r3, [r7, #7]
    bdac:	6839      	ldr	r1, [r7, #0]
    bdae:	4618      	mov	r0, r3
    bdb0:	4b0f      	ldr	r3, [pc, #60]	; (bdf0 <usbdc_set_req+0xe0>)
    bdb2:	4798      	blx	r3
    bdb4:	4603      	mov	r3, r0
    bdb6:	e013      	b.n	bde0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    bdb8:	79fb      	ldrb	r3, [r7, #7]
    bdba:	6839      	ldr	r1, [r7, #0]
    bdbc:	4618      	mov	r0, r3
    bdbe:	4b0d      	ldr	r3, [pc, #52]	; (bdf4 <usbdc_set_req+0xe4>)
    bdc0:	4798      	blx	r3
    bdc2:	4603      	mov	r3, r0
    bdc4:	e00c      	b.n	bde0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    bdc6:	683b      	ldr	r3, [r7, #0]
    bdc8:	885b      	ldrh	r3, [r3, #2]
    bdca:	b29a      	uxth	r2, r3
    bdcc:	683b      	ldr	r3, [r7, #0]
    bdce:	889b      	ldrh	r3, [r3, #4]
    bdd0:	b29b      	uxth	r3, r3
    bdd2:	4619      	mov	r1, r3
    bdd4:	4610      	mov	r0, r2
    bdd6:	4b08      	ldr	r3, [pc, #32]	; (bdf8 <usbdc_set_req+0xe8>)
    bdd8:	4798      	blx	r3
    bdda:	4603      	mov	r3, r0
    bddc:	e000      	b.n	bde0 <usbdc_set_req+0xd0>
	default:
		return false;
    bdde:	2300      	movs	r3, #0
	}
}
    bde0:	4618      	mov	r0, r3
    bde2:	370c      	adds	r7, #12
    bde4:	46bd      	mov	sp, r7
    bde6:	bd90      	pop	{r4, r7, pc}
    bde8:	0000c0e5 	.word	0x0000c0e5
    bdec:	0000bac5 	.word	0x0000bac5
    bdf0:	0000b9e1 	.word	0x0000b9e1
    bdf4:	0000ba39 	.word	0x0000ba39
    bdf8:	0000bbd1 	.word	0x0000bbd1

0000bdfc <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    bdfc:	b580      	push	{r7, lr}
    bdfe:	b082      	sub	sp, #8
    be00:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    be02:	4b0a      	ldr	r3, [pc, #40]	; (be2c <usbdc_sof_notify+0x30>)
    be04:	685b      	ldr	r3, [r3, #4]
    be06:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    be08:	e009      	b.n	be1e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    be0a:	687b      	ldr	r3, [r7, #4]
    be0c:	685b      	ldr	r3, [r3, #4]
    be0e:	2b00      	cmp	r3, #0
    be10:	d002      	beq.n	be18 <usbdc_sof_notify+0x1c>
			sof->cb();
    be12:	687b      	ldr	r3, [r7, #4]
    be14:	685b      	ldr	r3, [r3, #4]
    be16:	4798      	blx	r3
		}
		sof = sof->next;
    be18:	687b      	ldr	r3, [r7, #4]
    be1a:	681b      	ldr	r3, [r3, #0]
    be1c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    be1e:	687b      	ldr	r3, [r7, #4]
    be20:	2b00      	cmp	r3, #0
    be22:	d1f2      	bne.n	be0a <usbdc_sof_notify+0xe>
	}
}
    be24:	bf00      	nop
    be26:	3708      	adds	r7, #8
    be28:	46bd      	mov	sp, r7
    be2a:	bd80      	pop	{r7, pc}
    be2c:	20000cc4 	.word	0x20000cc4

0000be30 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    be30:	b580      	push	{r7, lr}
    be32:	b084      	sub	sp, #16
    be34:	af00      	add	r7, sp, #0
    be36:	4603      	mov	r3, r0
    be38:	6039      	str	r1, [r7, #0]
    be3a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    be3c:	4b0b      	ldr	r3, [pc, #44]	; (be6c <usbdc_change_notify+0x3c>)
    be3e:	68db      	ldr	r3, [r3, #12]
    be40:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    be42:	e00c      	b.n	be5e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    be44:	68fb      	ldr	r3, [r7, #12]
    be46:	685b      	ldr	r3, [r3, #4]
    be48:	2b00      	cmp	r3, #0
    be4a:	d005      	beq.n	be58 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    be4c:	68fb      	ldr	r3, [r7, #12]
    be4e:	685b      	ldr	r3, [r3, #4]
    be50:	79fa      	ldrb	r2, [r7, #7]
    be52:	6839      	ldr	r1, [r7, #0]
    be54:	4610      	mov	r0, r2
    be56:	4798      	blx	r3
		}
		cg = cg->next;
    be58:	68fb      	ldr	r3, [r7, #12]
    be5a:	681b      	ldr	r3, [r3, #0]
    be5c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    be5e:	68fb      	ldr	r3, [r7, #12]
    be60:	2b00      	cmp	r3, #0
    be62:	d1ef      	bne.n	be44 <usbdc_change_notify+0x14>
	}
}
    be64:	bf00      	nop
    be66:	3710      	adds	r7, #16
    be68:	46bd      	mov	sp, r7
    be6a:	bd80      	pop	{r7, pc}
    be6c:	20000cc4 	.word	0x20000cc4

0000be70 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    be70:	b580      	push	{r7, lr}
    be72:	b084      	sub	sp, #16
    be74:	af00      	add	r7, sp, #0
    be76:	4603      	mov	r3, r0
    be78:	6039      	str	r1, [r7, #0]
    be7a:	71fb      	strb	r3, [r7, #7]
    be7c:	4613      	mov	r3, r2
    be7e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    be80:	4b12      	ldr	r3, [pc, #72]	; (becc <usbdc_request_handler+0x5c>)
    be82:	689b      	ldr	r3, [r3, #8]
    be84:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    be86:	e019      	b.n	bebc <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    be88:	68fb      	ldr	r3, [r7, #12]
    be8a:	685b      	ldr	r3, [r3, #4]
    be8c:	2b00      	cmp	r3, #0
    be8e:	d012      	beq.n	beb6 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    be90:	68fb      	ldr	r3, [r7, #12]
    be92:	685b      	ldr	r3, [r3, #4]
    be94:	79ba      	ldrb	r2, [r7, #6]
    be96:	79f8      	ldrb	r0, [r7, #7]
    be98:	6839      	ldr	r1, [r7, #0]
    be9a:	4798      	blx	r3
    be9c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    be9e:	68bb      	ldr	r3, [r7, #8]
    bea0:	2b00      	cmp	r3, #0
    bea2:	d101      	bne.n	bea8 <usbdc_request_handler+0x38>
				return true;
    bea4:	2301      	movs	r3, #1
    bea6:	e00d      	b.n	bec4 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    bea8:	68bb      	ldr	r3, [r7, #8]
    beaa:	f113 0f0a 	cmn.w	r3, #10
    beae:	d002      	beq.n	beb6 <usbdc_request_handler+0x46>
				return -1;
    beb0:	f04f 33ff 	mov.w	r3, #4294967295
    beb4:	e006      	b.n	bec4 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    beb6:	68fb      	ldr	r3, [r7, #12]
    beb8:	681b      	ldr	r3, [r3, #0]
    beba:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    bebc:	68fb      	ldr	r3, [r7, #12]
    bebe:	2b00      	cmp	r3, #0
    bec0:	d1e2      	bne.n	be88 <usbdc_request_handler+0x18>
	}
	return false;
    bec2:	2300      	movs	r3, #0
}
    bec4:	4618      	mov	r0, r3
    bec6:	3710      	adds	r7, #16
    bec8:	46bd      	mov	sp, r7
    beca:	bd80      	pop	{r7, pc}
    becc:	20000cc4 	.word	0x20000cc4

0000bed0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    bed0:	b580      	push	{r7, lr}
    bed2:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    bed4:	4b01      	ldr	r3, [pc, #4]	; (bedc <usbd_sof_cb+0xc>)
    bed6:	4798      	blx	r3
}
    bed8:	bf00      	nop
    beda:	bd80      	pop	{r7, pc}
    bedc:	0000bdfd 	.word	0x0000bdfd

0000bee0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    bee0:	b580      	push	{r7, lr}
    bee2:	b082      	sub	sp, #8
    bee4:	af00      	add	r7, sp, #0
    bee6:	4603      	mov	r3, r0
    bee8:	6039      	str	r1, [r7, #0]
    beea:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    beec:	79fb      	ldrb	r3, [r7, #7]
    beee:	2200      	movs	r2, #0
    bef0:	6839      	ldr	r1, [r7, #0]
    bef2:	4618      	mov	r0, r3
    bef4:	4b14      	ldr	r3, [pc, #80]	; (bf48 <usbdc_cb_ctl_req+0x68>)
    bef6:	4798      	blx	r3
    bef8:	4603      	mov	r3, r0
    befa:	f1b3 3fff 	cmp.w	r3, #4294967295
    befe:	d00b      	beq.n	bf18 <usbdc_cb_ctl_req+0x38>
    bf00:	2b01      	cmp	r3, #1
    bf02:	d007      	beq.n	bf14 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    bf04:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    bf06:	683b      	ldr	r3, [r7, #0]
    bf08:	781b      	ldrb	r3, [r3, #0]
    bf0a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    bf0e:	2b00      	cmp	r3, #0
    bf10:	d007      	beq.n	bf22 <usbdc_cb_ctl_req+0x42>
    bf12:	e003      	b.n	bf1c <usbdc_cb_ctl_req+0x3c>
		return true;
    bf14:	2301      	movs	r3, #1
    bf16:	e013      	b.n	bf40 <usbdc_cb_ctl_req+0x60>
		return false;
    bf18:	2300      	movs	r3, #0
    bf1a:	e011      	b.n	bf40 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    bf1c:	2b80      	cmp	r3, #128	; 0x80
    bf1e:	d007      	beq.n	bf30 <usbdc_cb_ctl_req+0x50>
    bf20:	e00d      	b.n	bf3e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    bf22:	79fb      	ldrb	r3, [r7, #7]
    bf24:	6839      	ldr	r1, [r7, #0]
    bf26:	4618      	mov	r0, r3
    bf28:	4b08      	ldr	r3, [pc, #32]	; (bf4c <usbdc_cb_ctl_req+0x6c>)
    bf2a:	4798      	blx	r3
    bf2c:	4603      	mov	r3, r0
    bf2e:	e007      	b.n	bf40 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    bf30:	79fb      	ldrb	r3, [r7, #7]
    bf32:	6839      	ldr	r1, [r7, #0]
    bf34:	4618      	mov	r0, r3
    bf36:	4b06      	ldr	r3, [pc, #24]	; (bf50 <usbdc_cb_ctl_req+0x70>)
    bf38:	4798      	blx	r3
    bf3a:	4603      	mov	r3, r0
    bf3c:	e000      	b.n	bf40 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    bf3e:	2300      	movs	r3, #0
	}
}
    bf40:	4618      	mov	r0, r3
    bf42:	3708      	adds	r7, #8
    bf44:	46bd      	mov	sp, r7
    bf46:	bd80      	pop	{r7, pc}
    bf48:	0000be71 	.word	0x0000be71
    bf4c:	0000bd11 	.word	0x0000bd11
    bf50:	0000b939 	.word	0x0000b939

0000bf54 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    bf54:	b580      	push	{r7, lr}
    bf56:	b082      	sub	sp, #8
    bf58:	af00      	add	r7, sp, #0
    bf5a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    bf5c:	687b      	ldr	r3, [r7, #4]
    bf5e:	781b      	ldrb	r3, [r3, #0]
    bf60:	2b00      	cmp	r3, #0
    bf62:	d135      	bne.n	bfd0 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    bf64:	687b      	ldr	r3, [r7, #4]
    bf66:	785b      	ldrb	r3, [r3, #1]
    bf68:	2b05      	cmp	r3, #5
    bf6a:	d019      	beq.n	bfa0 <usbdc_ctrl_status_end+0x4c>
    bf6c:	2b09      	cmp	r3, #9
    bf6e:	d000      	beq.n	bf72 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    bf70:	e02f      	b.n	bfd2 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    bf72:	687b      	ldr	r3, [r7, #4]
    bf74:	885b      	ldrh	r3, [r3, #2]
    bf76:	b29b      	uxth	r3, r3
    bf78:	b2da      	uxtb	r2, r3
    bf7a:	4b17      	ldr	r3, [pc, #92]	; (bfd8 <usbdc_ctrl_status_end+0x84>)
    bf7c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    bf7e:	687b      	ldr	r3, [r7, #4]
    bf80:	885b      	ldrh	r3, [r3, #2]
    bf82:	b29b      	uxth	r3, r3
    bf84:	2b00      	cmp	r3, #0
    bf86:	d001      	beq.n	bf8c <usbdc_ctrl_status_end+0x38>
    bf88:	2204      	movs	r2, #4
    bf8a:	e000      	b.n	bf8e <usbdc_ctrl_status_end+0x3a>
    bf8c:	2203      	movs	r2, #3
    bf8e:	4b12      	ldr	r3, [pc, #72]	; (bfd8 <usbdc_ctrl_status_end+0x84>)
    bf90:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    bf92:	4b11      	ldr	r3, [pc, #68]	; (bfd8 <usbdc_ctrl_status_end+0x84>)
    bf94:	7e9b      	ldrb	r3, [r3, #26]
    bf96:	4619      	mov	r1, r3
    bf98:	2001      	movs	r0, #1
    bf9a:	4b10      	ldr	r3, [pc, #64]	; (bfdc <usbdc_ctrl_status_end+0x88>)
    bf9c:	4798      	blx	r3
		break;
    bf9e:	e018      	b.n	bfd2 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    bfa0:	687b      	ldr	r3, [r7, #4]
    bfa2:	885b      	ldrh	r3, [r3, #2]
    bfa4:	b29b      	uxth	r3, r3
    bfa6:	b2db      	uxtb	r3, r3
    bfa8:	4618      	mov	r0, r3
    bfaa:	4b0d      	ldr	r3, [pc, #52]	; (bfe0 <usbdc_ctrl_status_end+0x8c>)
    bfac:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    bfae:	687b      	ldr	r3, [r7, #4]
    bfb0:	885b      	ldrh	r3, [r3, #2]
    bfb2:	b29b      	uxth	r3, r3
    bfb4:	2b00      	cmp	r3, #0
    bfb6:	d001      	beq.n	bfbc <usbdc_ctrl_status_end+0x68>
    bfb8:	2203      	movs	r2, #3
    bfba:	e000      	b.n	bfbe <usbdc_ctrl_status_end+0x6a>
    bfbc:	2202      	movs	r2, #2
    bfbe:	4b06      	ldr	r3, [pc, #24]	; (bfd8 <usbdc_ctrl_status_end+0x84>)
    bfc0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    bfc2:	4b05      	ldr	r3, [pc, #20]	; (bfd8 <usbdc_ctrl_status_end+0x84>)
    bfc4:	7e9b      	ldrb	r3, [r3, #26]
    bfc6:	4619      	mov	r1, r3
    bfc8:	2001      	movs	r0, #1
    bfca:	4b04      	ldr	r3, [pc, #16]	; (bfdc <usbdc_ctrl_status_end+0x88>)
    bfcc:	4798      	blx	r3
		break;
    bfce:	e000      	b.n	bfd2 <usbdc_ctrl_status_end+0x7e>
		return;
    bfd0:	bf00      	nop
	}
}
    bfd2:	3708      	adds	r7, #8
    bfd4:	46bd      	mov	sp, r7
    bfd6:	bd80      	pop	{r7, pc}
    bfd8:	20000cc4 	.word	0x20000cc4
    bfdc:	0000be31 	.word	0x0000be31
    bfe0:	0000bbb1 	.word	0x0000bbb1

0000bfe4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    bfe4:	b580      	push	{r7, lr}
    bfe6:	b082      	sub	sp, #8
    bfe8:	af00      	add	r7, sp, #0
    bfea:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    bfec:	2201      	movs	r2, #1
    bfee:	6879      	ldr	r1, [r7, #4]
    bff0:	2000      	movs	r0, #0
    bff2:	4b03      	ldr	r3, [pc, #12]	; (c000 <usbdc_ctrl_data_end+0x1c>)
    bff4:	4798      	blx	r3
	return false;
    bff6:	2300      	movs	r3, #0
}
    bff8:	4618      	mov	r0, r3
    bffa:	3708      	adds	r7, #8
    bffc:	46bd      	mov	sp, r7
    bffe:	bd80      	pop	{r7, pc}
    c000:	0000be71 	.word	0x0000be71

0000c004 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c004:	b580      	push	{r7, lr}
    c006:	b082      	sub	sp, #8
    c008:	af00      	add	r7, sp, #0
    c00a:	4603      	mov	r3, r0
    c00c:	603a      	str	r2, [r7, #0]
    c00e:	71fb      	strb	r3, [r7, #7]
    c010:	460b      	mov	r3, r1
    c012:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    c014:	79bb      	ldrb	r3, [r7, #6]
    c016:	2b00      	cmp	r3, #0
    c018:	d002      	beq.n	c020 <usbdc_cb_ctl_done+0x1c>
    c01a:	2b01      	cmp	r3, #1
    c01c:	d004      	beq.n	c028 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    c01e:	e008      	b.n	c032 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    c020:	6838      	ldr	r0, [r7, #0]
    c022:	4b06      	ldr	r3, [pc, #24]	; (c03c <usbdc_cb_ctl_done+0x38>)
    c024:	4798      	blx	r3
		break;
    c026:	e004      	b.n	c032 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    c028:	6838      	ldr	r0, [r7, #0]
    c02a:	4b05      	ldr	r3, [pc, #20]	; (c040 <usbdc_cb_ctl_done+0x3c>)
    c02c:	4798      	blx	r3
    c02e:	4603      	mov	r3, r0
    c030:	e000      	b.n	c034 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    c032:	2300      	movs	r3, #0
}
    c034:	4618      	mov	r0, r3
    c036:	3708      	adds	r7, #8
    c038:	46bd      	mov	sp, r7
    c03a:	bd80      	pop	{r7, pc}
    c03c:	0000bf55 	.word	0x0000bf55
    c040:	0000bfe5 	.word	0x0000bfe5

0000c044 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c044:	b580      	push	{r7, lr}
    c046:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    c048:	4b10      	ldr	r3, [pc, #64]	; (c08c <usbdc_reset+0x48>)
    c04a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c04c:	4b10      	ldr	r3, [pc, #64]	; (c090 <usbdc_reset+0x4c>)
    c04e:	2202      	movs	r2, #2
    c050:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    c052:	4b0f      	ldr	r3, [pc, #60]	; (c090 <usbdc_reset+0x4c>)
    c054:	2200      	movs	r2, #0
    c056:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    c058:	4b0d      	ldr	r3, [pc, #52]	; (c090 <usbdc_reset+0x4c>)
    c05a:	2200      	movs	r2, #0
    c05c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c05e:	2000      	movs	r0, #0
    c060:	4b0c      	ldr	r3, [pc, #48]	; (c094 <usbdc_reset+0x50>)
    c062:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c064:	4b0a      	ldr	r3, [pc, #40]	; (c090 <usbdc_reset+0x4c>)
    c066:	7f1b      	ldrb	r3, [r3, #28]
    c068:	4618      	mov	r0, r3
    c06a:	4b0b      	ldr	r3, [pc, #44]	; (c098 <usbdc_reset+0x54>)
    c06c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c06e:	4a0b      	ldr	r2, [pc, #44]	; (c09c <usbdc_reset+0x58>)
    c070:	2100      	movs	r1, #0
    c072:	2000      	movs	r0, #0
    c074:	4b0a      	ldr	r3, [pc, #40]	; (c0a0 <usbdc_reset+0x5c>)
    c076:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c078:	4a0a      	ldr	r2, [pc, #40]	; (c0a4 <usbdc_reset+0x60>)
    c07a:	2102      	movs	r1, #2
    c07c:	2000      	movs	r0, #0
    c07e:	4b08      	ldr	r3, [pc, #32]	; (c0a0 <usbdc_reset+0x5c>)
    c080:	4798      	blx	r3
	usb_d_ep_enable(0);
    c082:	2000      	movs	r0, #0
    c084:	4b08      	ldr	r3, [pc, #32]	; (c0a8 <usbdc_reset+0x64>)
    c086:	4798      	blx	r3
}
    c088:	bf00      	nop
    c08a:	bd80      	pop	{r7, pc}
    c08c:	0000ba91 	.word	0x0000ba91
    c090:	20000cc4 	.word	0x20000cc4
    c094:	00002a65 	.word	0x00002a65
    c098:	000029a1 	.word	0x000029a1
    c09c:	0000bee1 	.word	0x0000bee1
    c0a0:	00002d65 	.word	0x00002d65
    c0a4:	0000c005 	.word	0x0000c005
    c0a8:	00002ab5 	.word	0x00002ab5

0000c0ac <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c0ac:	b580      	push	{r7, lr}
    c0ae:	b082      	sub	sp, #8
    c0b0:	af00      	add	r7, sp, #0
    c0b2:	4603      	mov	r3, r0
    c0b4:	6039      	str	r1, [r7, #0]
    c0b6:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    c0b8:	79fb      	ldrb	r3, [r7, #7]
    c0ba:	2b00      	cmp	r3, #0
    c0bc:	d002      	beq.n	c0c4 <usbd_event_cb+0x18>
    c0be:	2b01      	cmp	r3, #1
    c0c0:	d005      	beq.n	c0ce <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    c0c2:	e007      	b.n	c0d4 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    c0c4:	6839      	ldr	r1, [r7, #0]
    c0c6:	2000      	movs	r0, #0
    c0c8:	4b04      	ldr	r3, [pc, #16]	; (c0dc <usbd_event_cb+0x30>)
    c0ca:	4798      	blx	r3
		break;
    c0cc:	e002      	b.n	c0d4 <usbd_event_cb+0x28>
		usbdc_reset();
    c0ce:	4b04      	ldr	r3, [pc, #16]	; (c0e0 <usbd_event_cb+0x34>)
    c0d0:	4798      	blx	r3
		break;
    c0d2:	bf00      	nop
	}
}
    c0d4:	bf00      	nop
    c0d6:	3708      	adds	r7, #8
    c0d8:	46bd      	mov	sp, r7
    c0da:	bd80      	pop	{r7, pc}
    c0dc:	0000be31 	.word	0x0000be31
    c0e0:	0000c045 	.word	0x0000c045

0000c0e4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c0e4:	b580      	push	{r7, lr}
    c0e6:	b088      	sub	sp, #32
    c0e8:	af00      	add	r7, sp, #0
    c0ea:	60b9      	str	r1, [r7, #8]
    c0ec:	607a      	str	r2, [r7, #4]
    c0ee:	461a      	mov	r2, r3
    c0f0:	4603      	mov	r3, r0
    c0f2:	73fb      	strb	r3, [r7, #15]
    c0f4:	4613      	mov	r3, r2
    c0f6:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c0f8:	68bb      	ldr	r3, [r7, #8]
    c0fa:	617b      	str	r3, [r7, #20]
    c0fc:	687b      	ldr	r3, [r7, #4]
    c0fe:	61bb      	str	r3, [r7, #24]
    c100:	7bfb      	ldrb	r3, [r7, #15]
    c102:	773b      	strb	r3, [r7, #28]
    c104:	7bbb      	ldrb	r3, [r7, #14]
    c106:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    c108:	f107 0314 	add.w	r3, r7, #20
    c10c:	4618      	mov	r0, r3
    c10e:	4b03      	ldr	r3, [pc, #12]	; (c11c <usbdc_xfer+0x38>)
    c110:	4798      	blx	r3
    c112:	4603      	mov	r3, r0
}
    c114:	4618      	mov	r0, r3
    c116:	3720      	adds	r7, #32
    c118:	46bd      	mov	sp, r7
    c11a:	bd80      	pop	{r7, pc}
    c11c:	00002b25 	.word	0x00002b25

0000c120 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    c120:	b580      	push	{r7, lr}
    c122:	b082      	sub	sp, #8
    c124:	af00      	add	r7, sp, #0
    c126:	4603      	mov	r3, r0
    c128:	6039      	str	r1, [r7, #0]
    c12a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    c12c:	79fb      	ldrb	r3, [r7, #7]
    c12e:	2b01      	cmp	r3, #1
    c130:	d009      	beq.n	c146 <usbdc_register_handler+0x26>
    c132:	2b02      	cmp	r3, #2
    c134:	d00c      	beq.n	c150 <usbdc_register_handler+0x30>
    c136:	2b00      	cmp	r3, #0
    c138:	d000      	beq.n	c13c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    c13a:	e00e      	b.n	c15a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c13c:	6839      	ldr	r1, [r7, #0]
    c13e:	4809      	ldr	r0, [pc, #36]	; (c164 <usbdc_register_handler+0x44>)
    c140:	4b09      	ldr	r3, [pc, #36]	; (c168 <usbdc_register_handler+0x48>)
    c142:	4798      	blx	r3
		break;
    c144:	e009      	b.n	c15a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c146:	6839      	ldr	r1, [r7, #0]
    c148:	4808      	ldr	r0, [pc, #32]	; (c16c <usbdc_register_handler+0x4c>)
    c14a:	4b07      	ldr	r3, [pc, #28]	; (c168 <usbdc_register_handler+0x48>)
    c14c:	4798      	blx	r3
		break;
    c14e:	e004      	b.n	c15a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c150:	6839      	ldr	r1, [r7, #0]
    c152:	4807      	ldr	r0, [pc, #28]	; (c170 <usbdc_register_handler+0x50>)
    c154:	4b04      	ldr	r3, [pc, #16]	; (c168 <usbdc_register_handler+0x48>)
    c156:	4798      	blx	r3
		break;
    c158:	bf00      	nop
	}
}
    c15a:	bf00      	nop
    c15c:	3708      	adds	r7, #8
    c15e:	46bd      	mov	sp, r7
    c160:	bd80      	pop	{r7, pc}
    c162:	bf00      	nop
    c164:	20000cc8 	.word	0x20000cc8
    c168:	00002ebd 	.word	0x00002ebd
    c16c:	20000ccc 	.word	0x20000ccc
    c170:	20000cd0 	.word	0x20000cd0

0000c174 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c174:	b580      	push	{r7, lr}
    c176:	b084      	sub	sp, #16
    c178:	af00      	add	r7, sp, #0
    c17a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    c17c:	687b      	ldr	r3, [r7, #4]
    c17e:	2b00      	cmp	r3, #0
    c180:	bf14      	ite	ne
    c182:	2301      	movne	r3, #1
    c184:	2300      	moveq	r3, #0
    c186:	b2db      	uxtb	r3, r3
    c188:	f240 3255 	movw	r2, #853	; 0x355
    c18c:	4910      	ldr	r1, [pc, #64]	; (c1d0 <usbdc_init+0x5c>)
    c18e:	4618      	mov	r0, r3
    c190:	4b10      	ldr	r3, [pc, #64]	; (c1d4 <usbdc_init+0x60>)
    c192:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    c194:	4b10      	ldr	r3, [pc, #64]	; (c1d8 <usbdc_init+0x64>)
    c196:	4798      	blx	r3
    c198:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    c19a:	68fb      	ldr	r3, [r7, #12]
    c19c:	2b00      	cmp	r3, #0
    c19e:	da01      	bge.n	c1a4 <usbdc_init+0x30>
		return rc;
    c1a0:	68fb      	ldr	r3, [r7, #12]
    c1a2:	e010      	b.n	c1c6 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c1a4:	2220      	movs	r2, #32
    c1a6:	2100      	movs	r1, #0
    c1a8:	480c      	ldr	r0, [pc, #48]	; (c1dc <usbdc_init+0x68>)
    c1aa:	4b0d      	ldr	r3, [pc, #52]	; (c1e0 <usbdc_init+0x6c>)
    c1ac:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    c1ae:	4a0b      	ldr	r2, [pc, #44]	; (c1dc <usbdc_init+0x68>)
    c1b0:	687b      	ldr	r3, [r7, #4]
    c1b2:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c1b4:	490b      	ldr	r1, [pc, #44]	; (c1e4 <usbdc_init+0x70>)
    c1b6:	2000      	movs	r0, #0
    c1b8:	4b0b      	ldr	r3, [pc, #44]	; (c1e8 <usbdc_init+0x74>)
    c1ba:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c1bc:	490b      	ldr	r1, [pc, #44]	; (c1ec <usbdc_init+0x78>)
    c1be:	2001      	movs	r0, #1
    c1c0:	4b09      	ldr	r3, [pc, #36]	; (c1e8 <usbdc_init+0x74>)
    c1c2:	4798      	blx	r3

	return 0;
    c1c4:	2300      	movs	r3, #0
}
    c1c6:	4618      	mov	r0, r3
    c1c8:	3710      	adds	r7, #16
    c1ca:	46bd      	mov	sp, r7
    c1cc:	bd80      	pop	{r7, pc}
    c1ce:	bf00      	nop
    c1d0:	0000d308 	.word	0x0000d308
    c1d4:	00002de1 	.word	0x00002de1
    c1d8:	0000288d 	.word	0x0000288d
    c1dc:	20000cc4 	.word	0x20000cc4
    c1e0:	0000cd69 	.word	0x0000cd69
    c1e4:	0000bed1 	.word	0x0000bed1
    c1e8:	00002939 	.word	0x00002939
    c1ec:	0000c0ad 	.word	0x0000c0ad

0000c1f0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    c1f0:	b580      	push	{r7, lr}
    c1f2:	b082      	sub	sp, #8
    c1f4:	af00      	add	r7, sp, #0
    c1f6:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    c1f8:	6879      	ldr	r1, [r7, #4]
    c1fa:	4803      	ldr	r0, [pc, #12]	; (c208 <usbdc_register_function+0x18>)
    c1fc:	4b03      	ldr	r3, [pc, #12]	; (c20c <usbdc_register_function+0x1c>)
    c1fe:	4798      	blx	r3
}
    c200:	bf00      	nop
    c202:	3708      	adds	r7, #8
    c204:	46bd      	mov	sp, r7
    c206:	bd80      	pop	{r7, pc}
    c208:	20000cd4 	.word	0x20000cd4
    c20c:	00002ebd 	.word	0x00002ebd

0000c210 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c210:	b580      	push	{r7, lr}
    c212:	b082      	sub	sp, #8
    c214:	af00      	add	r7, sp, #0
    c216:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    c218:	4b0f      	ldr	r3, [pc, #60]	; (c258 <usbdc_start+0x48>)
    c21a:	7e9b      	ldrb	r3, [r3, #26]
    c21c:	2b00      	cmp	r3, #0
    c21e:	d002      	beq.n	c226 <usbdc_start+0x16>
		return ERR_BUSY;
    c220:	f06f 0303 	mvn.w	r3, #3
    c224:	e013      	b.n	c24e <usbdc_start+0x3e>
	}

	if (desces) {
    c226:	687b      	ldr	r3, [r7, #4]
    c228:	2b00      	cmp	r3, #0
    c22a:	d00e      	beq.n	c24a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    c22c:	4a0a      	ldr	r2, [pc, #40]	; (c258 <usbdc_start+0x48>)
    c22e:	687b      	ldr	r3, [r7, #4]
    c230:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c232:	687b      	ldr	r3, [r7, #4]
    c234:	681b      	ldr	r3, [r3, #0]
    c236:	79da      	ldrb	r2, [r3, #7]
    c238:	4b07      	ldr	r3, [pc, #28]	; (c258 <usbdc_start+0x48>)
    c23a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c23c:	4b06      	ldr	r3, [pc, #24]	; (c258 <usbdc_start+0x48>)
    c23e:	2201      	movs	r2, #1
    c240:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c242:	4b06      	ldr	r3, [pc, #24]	; (c25c <usbdc_start+0x4c>)
    c244:	4798      	blx	r3
	return ERR_NONE;
    c246:	2300      	movs	r3, #0
    c248:	e001      	b.n	c24e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    c24a:	f06f 0308 	mvn.w	r3, #8
}
    c24e:	4618      	mov	r0, r3
    c250:	3708      	adds	r7, #8
    c252:	46bd      	mov	sp, r7
    c254:	bd80      	pop	{r7, pc}
    c256:	bf00      	nop
    c258:	20000cc4 	.word	0x20000cc4
    c25c:	0000295d 	.word	0x0000295d

0000c260 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    c260:	b580      	push	{r7, lr}
    c262:	af00      	add	r7, sp, #0
	usb_d_attach();
    c264:	4b01      	ldr	r3, [pc, #4]	; (c26c <usbdc_attach+0xc>)
    c266:	4798      	blx	r3
}
    c268:	bf00      	nop
    c26a:	bd80      	pop	{r7, pc}
    c26c:	00002971 	.word	0x00002971

0000c270 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    c270:	b480      	push	{r7}
    c272:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    c274:	4b03      	ldr	r3, [pc, #12]	; (c284 <usbdc_get_ctrl_buffer+0x14>)
    c276:	695b      	ldr	r3, [r3, #20]
}
    c278:	4618      	mov	r0, r3
    c27a:	46bd      	mov	sp, r7
    c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c280:	4770      	bx	lr
    c282:	bf00      	nop
    c284:	20000cc4 	.word	0x20000cc4

0000c288 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    c288:	b480      	push	{r7}
    c28a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    c28c:	4b07      	ldr	r3, [pc, #28]	; (c2ac <usbdc_get_state+0x24>)
    c28e:	7e9b      	ldrb	r3, [r3, #26]
    c290:	f003 0310 	and.w	r3, r3, #16
    c294:	2b00      	cmp	r3, #0
    c296:	d001      	beq.n	c29c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    c298:	2310      	movs	r3, #16
    c29a:	e001      	b.n	c2a0 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    c29c:	4b03      	ldr	r3, [pc, #12]	; (c2ac <usbdc_get_state+0x24>)
    c29e:	7e9b      	ldrb	r3, [r3, #26]
}
    c2a0:	4618      	mov	r0, r3
    c2a2:	46bd      	mov	sp, r7
    c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2a8:	4770      	bx	lr
    c2aa:	bf00      	nop
    c2ac:	20000cc4 	.word	0x20000cc4

0000c2b0 <usb_get_u16>:
{
    c2b0:	b480      	push	{r7}
    c2b2:	b083      	sub	sp, #12
    c2b4:	af00      	add	r7, sp, #0
    c2b6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c2b8:	687b      	ldr	r3, [r7, #4]
    c2ba:	781b      	ldrb	r3, [r3, #0]
    c2bc:	b29a      	uxth	r2, r3
    c2be:	687b      	ldr	r3, [r7, #4]
    c2c0:	3301      	adds	r3, #1
    c2c2:	781b      	ldrb	r3, [r3, #0]
    c2c4:	b29b      	uxth	r3, r3
    c2c6:	021b      	lsls	r3, r3, #8
    c2c8:	b29b      	uxth	r3, r3
    c2ca:	4413      	add	r3, r2
    c2cc:	b29b      	uxth	r3, r3
}
    c2ce:	4618      	mov	r0, r3
    c2d0:	370c      	adds	r7, #12
    c2d2:	46bd      	mov	sp, r7
    c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2d8:	4770      	bx	lr

0000c2da <usb_desc_len>:
{
    c2da:	b480      	push	{r7}
    c2dc:	b083      	sub	sp, #12
    c2de:	af00      	add	r7, sp, #0
    c2e0:	6078      	str	r0, [r7, #4]
	return desc[0];
    c2e2:	687b      	ldr	r3, [r7, #4]
    c2e4:	781b      	ldrb	r3, [r3, #0]
}
    c2e6:	4618      	mov	r0, r3
    c2e8:	370c      	adds	r7, #12
    c2ea:	46bd      	mov	sp, r7
    c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2f0:	4770      	bx	lr

0000c2f2 <usb_desc_type>:
{
    c2f2:	b480      	push	{r7}
    c2f4:	b083      	sub	sp, #12
    c2f6:	af00      	add	r7, sp, #0
    c2f8:	6078      	str	r0, [r7, #4]
	return desc[1];
    c2fa:	687b      	ldr	r3, [r7, #4]
    c2fc:	3301      	adds	r3, #1
    c2fe:	781b      	ldrb	r3, [r3, #0]
}
    c300:	4618      	mov	r0, r3
    c302:	370c      	adds	r7, #12
    c304:	46bd      	mov	sp, r7
    c306:	f85d 7b04 	ldr.w	r7, [sp], #4
    c30a:	4770      	bx	lr

0000c30c <usb_desc_next>:
{
    c30c:	b580      	push	{r7, lr}
    c30e:	b082      	sub	sp, #8
    c310:	af00      	add	r7, sp, #0
    c312:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c314:	6878      	ldr	r0, [r7, #4]
    c316:	4b05      	ldr	r3, [pc, #20]	; (c32c <usb_desc_next+0x20>)
    c318:	4798      	blx	r3
    c31a:	4603      	mov	r3, r0
    c31c:	461a      	mov	r2, r3
    c31e:	687b      	ldr	r3, [r7, #4]
    c320:	4413      	add	r3, r2
}
    c322:	4618      	mov	r0, r3
    c324:	3708      	adds	r7, #8
    c326:	46bd      	mov	sp, r7
    c328:	bd80      	pop	{r7, pc}
    c32a:	bf00      	nop
    c32c:	0000c2db 	.word	0x0000c2db

0000c330 <usb_cfg_desc_total_len>:
{
    c330:	b580      	push	{r7, lr}
    c332:	b082      	sub	sp, #8
    c334:	af00      	add	r7, sp, #0
    c336:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c338:	687b      	ldr	r3, [r7, #4]
    c33a:	3302      	adds	r3, #2
    c33c:	4618      	mov	r0, r3
    c33e:	4b03      	ldr	r3, [pc, #12]	; (c34c <usb_cfg_desc_total_len+0x1c>)
    c340:	4798      	blx	r3
    c342:	4603      	mov	r3, r0
}
    c344:	4618      	mov	r0, r3
    c346:	3708      	adds	r7, #8
    c348:	46bd      	mov	sp, r7
    c34a:	bd80      	pop	{r7, pc}
    c34c:	0000c2b1 	.word	0x0000c2b1

0000c350 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    c350:	b580      	push	{r7, lr}
    c352:	b082      	sub	sp, #8
    c354:	af00      	add	r7, sp, #0
    c356:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c358:	6878      	ldr	r0, [r7, #4]
    c35a:	4b05      	ldr	r3, [pc, #20]	; (c370 <usb_cfg_desc_next+0x20>)
    c35c:	4798      	blx	r3
    c35e:	4603      	mov	r3, r0
    c360:	461a      	mov	r2, r3
    c362:	687b      	ldr	r3, [r7, #4]
    c364:	4413      	add	r3, r2
}
    c366:	4618      	mov	r0, r3
    c368:	3708      	adds	r7, #8
    c36a:	46bd      	mov	sp, r7
    c36c:	bd80      	pop	{r7, pc}
    c36e:	bf00      	nop
    c370:	0000c331 	.word	0x0000c331

0000c374 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    c374:	b580      	push	{r7, lr}
    c376:	b084      	sub	sp, #16
    c378:	af00      	add	r7, sp, #0
    c37a:	60f8      	str	r0, [r7, #12]
    c37c:	60b9      	str	r1, [r7, #8]
    c37e:	4613      	mov	r3, r2
    c380:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c382:	e015      	b.n	c3b0 <usb_find_desc+0x3c>
		_desc_len_check();
    c384:	68f8      	ldr	r0, [r7, #12]
    c386:	4b0f      	ldr	r3, [pc, #60]	; (c3c4 <usb_find_desc+0x50>)
    c388:	4798      	blx	r3
    c38a:	4603      	mov	r3, r0
    c38c:	2b01      	cmp	r3, #1
    c38e:	d801      	bhi.n	c394 <usb_find_desc+0x20>
    c390:	2300      	movs	r3, #0
    c392:	e012      	b.n	c3ba <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    c394:	68f8      	ldr	r0, [r7, #12]
    c396:	4b0c      	ldr	r3, [pc, #48]	; (c3c8 <usb_find_desc+0x54>)
    c398:	4798      	blx	r3
    c39a:	4603      	mov	r3, r0
    c39c:	461a      	mov	r2, r3
    c39e:	79fb      	ldrb	r3, [r7, #7]
    c3a0:	4293      	cmp	r3, r2
    c3a2:	d101      	bne.n	c3a8 <usb_find_desc+0x34>
			return desc;
    c3a4:	68fb      	ldr	r3, [r7, #12]
    c3a6:	e008      	b.n	c3ba <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    c3a8:	68f8      	ldr	r0, [r7, #12]
    c3aa:	4b08      	ldr	r3, [pc, #32]	; (c3cc <usb_find_desc+0x58>)
    c3ac:	4798      	blx	r3
    c3ae:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c3b0:	68fa      	ldr	r2, [r7, #12]
    c3b2:	68bb      	ldr	r3, [r7, #8]
    c3b4:	429a      	cmp	r2, r3
    c3b6:	d3e5      	bcc.n	c384 <usb_find_desc+0x10>
	}
	return NULL;
    c3b8:	2300      	movs	r3, #0
}
    c3ba:	4618      	mov	r0, r3
    c3bc:	3710      	adds	r7, #16
    c3be:	46bd      	mov	sp, r7
    c3c0:	bd80      	pop	{r7, pc}
    c3c2:	bf00      	nop
    c3c4:	0000c2db 	.word	0x0000c2db
    c3c8:	0000c2f3 	.word	0x0000c2f3
    c3cc:	0000c30d 	.word	0x0000c30d

0000c3d0 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    c3d0:	b580      	push	{r7, lr}
    c3d2:	b082      	sub	sp, #8
    c3d4:	af00      	add	r7, sp, #0
    c3d6:	6078      	str	r0, [r7, #4]
    c3d8:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c3da:	e019      	b.n	c410 <usb_find_ep_desc+0x40>
		_desc_len_check();
    c3dc:	6878      	ldr	r0, [r7, #4]
    c3de:	4b12      	ldr	r3, [pc, #72]	; (c428 <usb_find_ep_desc+0x58>)
    c3e0:	4798      	blx	r3
    c3e2:	4603      	mov	r3, r0
    c3e4:	2b01      	cmp	r3, #1
    c3e6:	d801      	bhi.n	c3ec <usb_find_ep_desc+0x1c>
    c3e8:	2300      	movs	r3, #0
    c3ea:	e018      	b.n	c41e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c3ec:	6878      	ldr	r0, [r7, #4]
    c3ee:	4b0f      	ldr	r3, [pc, #60]	; (c42c <usb_find_ep_desc+0x5c>)
    c3f0:	4798      	blx	r3
    c3f2:	4603      	mov	r3, r0
    c3f4:	2b04      	cmp	r3, #4
    c3f6:	d010      	beq.n	c41a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c3f8:	6878      	ldr	r0, [r7, #4]
    c3fa:	4b0c      	ldr	r3, [pc, #48]	; (c42c <usb_find_ep_desc+0x5c>)
    c3fc:	4798      	blx	r3
    c3fe:	4603      	mov	r3, r0
    c400:	2b05      	cmp	r3, #5
    c402:	d101      	bne.n	c408 <usb_find_ep_desc+0x38>
			return desc;
    c404:	687b      	ldr	r3, [r7, #4]
    c406:	e00a      	b.n	c41e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    c408:	6878      	ldr	r0, [r7, #4]
    c40a:	4b09      	ldr	r3, [pc, #36]	; (c430 <usb_find_ep_desc+0x60>)
    c40c:	4798      	blx	r3
    c40e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    c410:	687a      	ldr	r2, [r7, #4]
    c412:	683b      	ldr	r3, [r7, #0]
    c414:	429a      	cmp	r2, r3
    c416:	d3e1      	bcc.n	c3dc <usb_find_ep_desc+0xc>
    c418:	e000      	b.n	c41c <usb_find_ep_desc+0x4c>
			break;
    c41a:	bf00      	nop
	}
	return NULL;
    c41c:	2300      	movs	r3, #0
}
    c41e:	4618      	mov	r0, r3
    c420:	3708      	adds	r7, #8
    c422:	46bd      	mov	sp, r7
    c424:	bd80      	pop	{r7, pc}
    c426:	bf00      	nop
    c428:	0000c2db 	.word	0x0000c2db
    c42c:	0000c2f3 	.word	0x0000c2f3
    c430:	0000c30d 	.word	0x0000c30d

0000c434 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c434:	b580      	push	{r7, lr}
    c436:	b084      	sub	sp, #16
    c438:	af00      	add	r7, sp, #0
    c43a:	60f8      	str	r0, [r7, #12]
    c43c:	60b9      	str	r1, [r7, #8]
    c43e:	4613      	mov	r3, r2
    c440:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    c442:	2202      	movs	r2, #2
    c444:	68b9      	ldr	r1, [r7, #8]
    c446:	68f8      	ldr	r0, [r7, #12]
    c448:	4b15      	ldr	r3, [pc, #84]	; (c4a0 <usb_find_cfg_desc+0x6c>)
    c44a:	4798      	blx	r3
    c44c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    c44e:	68fb      	ldr	r3, [r7, #12]
    c450:	2b00      	cmp	r3, #0
    c452:	d11a      	bne.n	c48a <usb_find_cfg_desc+0x56>
		return NULL;
    c454:	2300      	movs	r3, #0
    c456:	e01f      	b.n	c498 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    c458:	68f8      	ldr	r0, [r7, #12]
    c45a:	4b12      	ldr	r3, [pc, #72]	; (c4a4 <usb_find_cfg_desc+0x70>)
    c45c:	4798      	blx	r3
    c45e:	4603      	mov	r3, r0
    c460:	2b01      	cmp	r3, #1
    c462:	d801      	bhi.n	c468 <usb_find_cfg_desc+0x34>
    c464:	2300      	movs	r3, #0
    c466:	e017      	b.n	c498 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    c468:	68fb      	ldr	r3, [r7, #12]
    c46a:	3301      	adds	r3, #1
    c46c:	781b      	ldrb	r3, [r3, #0]
    c46e:	2b02      	cmp	r3, #2
    c470:	d110      	bne.n	c494 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    c472:	68fb      	ldr	r3, [r7, #12]
    c474:	3305      	adds	r3, #5
    c476:	781b      	ldrb	r3, [r3, #0]
    c478:	79fa      	ldrb	r2, [r7, #7]
    c47a:	429a      	cmp	r2, r3
    c47c:	d101      	bne.n	c482 <usb_find_cfg_desc+0x4e>
			return desc;
    c47e:	68fb      	ldr	r3, [r7, #12]
    c480:	e00a      	b.n	c498 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    c482:	68f8      	ldr	r0, [r7, #12]
    c484:	4b08      	ldr	r3, [pc, #32]	; (c4a8 <usb_find_cfg_desc+0x74>)
    c486:	4798      	blx	r3
    c488:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c48a:	68fa      	ldr	r2, [r7, #12]
    c48c:	68bb      	ldr	r3, [r7, #8]
    c48e:	429a      	cmp	r2, r3
    c490:	d3e2      	bcc.n	c458 <usb_find_cfg_desc+0x24>
    c492:	e000      	b.n	c496 <usb_find_cfg_desc+0x62>
			break;
    c494:	bf00      	nop
	}
	return NULL;
    c496:	2300      	movs	r3, #0
}
    c498:	4618      	mov	r0, r3
    c49a:	3710      	adds	r7, #16
    c49c:	46bd      	mov	sp, r7
    c49e:	bd80      	pop	{r7, pc}
    c4a0:	0000c375 	.word	0x0000c375
    c4a4:	0000c2db 	.word	0x0000c2db
    c4a8:	0000c351 	.word	0x0000c351

0000c4ac <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    c4ac:	b580      	push	{r7, lr}
    c4ae:	b086      	sub	sp, #24
    c4b0:	af00      	add	r7, sp, #0
    c4b2:	60f8      	str	r0, [r7, #12]
    c4b4:	60b9      	str	r1, [r7, #8]
    c4b6:	4613      	mov	r3, r2
    c4b8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c4ba:	2300      	movs	r3, #0
    c4bc:	75fb      	strb	r3, [r7, #23]
    c4be:	e020      	b.n	c502 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    c4c0:	2203      	movs	r2, #3
    c4c2:	68b9      	ldr	r1, [r7, #8]
    c4c4:	68f8      	ldr	r0, [r7, #12]
    c4c6:	4b13      	ldr	r3, [pc, #76]	; (c514 <usb_find_str_desc+0x68>)
    c4c8:	4798      	blx	r3
    c4ca:	60f8      	str	r0, [r7, #12]
		if (desc) {
    c4cc:	68fb      	ldr	r3, [r7, #12]
    c4ce:	2b00      	cmp	r3, #0
    c4d0:	d015      	beq.n	c4fe <usb_find_str_desc+0x52>
			_desc_len_check();
    c4d2:	68f8      	ldr	r0, [r7, #12]
    c4d4:	4b10      	ldr	r3, [pc, #64]	; (c518 <usb_find_str_desc+0x6c>)
    c4d6:	4798      	blx	r3
    c4d8:	4603      	mov	r3, r0
    c4da:	2b01      	cmp	r3, #1
    c4dc:	d801      	bhi.n	c4e2 <usb_find_str_desc+0x36>
    c4de:	2300      	movs	r3, #0
    c4e0:	e014      	b.n	c50c <usb_find_str_desc+0x60>
			if (i == str_index) {
    c4e2:	7dfa      	ldrb	r2, [r7, #23]
    c4e4:	79fb      	ldrb	r3, [r7, #7]
    c4e6:	429a      	cmp	r2, r3
    c4e8:	d101      	bne.n	c4ee <usb_find_str_desc+0x42>
				return desc;
    c4ea:	68fb      	ldr	r3, [r7, #12]
    c4ec:	e00e      	b.n	c50c <usb_find_str_desc+0x60>
			}
			i++;
    c4ee:	7dfb      	ldrb	r3, [r7, #23]
    c4f0:	3301      	adds	r3, #1
    c4f2:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    c4f4:	68f8      	ldr	r0, [r7, #12]
    c4f6:	4b09      	ldr	r3, [pc, #36]	; (c51c <usb_find_str_desc+0x70>)
    c4f8:	4798      	blx	r3
    c4fa:	60f8      	str	r0, [r7, #12]
    c4fc:	e001      	b.n	c502 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    c4fe:	2300      	movs	r3, #0
    c500:	e004      	b.n	c50c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    c502:	68fa      	ldr	r2, [r7, #12]
    c504:	68bb      	ldr	r3, [r7, #8]
    c506:	429a      	cmp	r2, r3
    c508:	d3da      	bcc.n	c4c0 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    c50a:	2300      	movs	r3, #0
}
    c50c:	4618      	mov	r0, r3
    c50e:	3718      	adds	r7, #24
    c510:	46bd      	mov	sp, r7
    c512:	bd80      	pop	{r7, pc}
    c514:	0000c375 	.word	0x0000c375
    c518:	0000c2db 	.word	0x0000c2db
    c51c:	0000c30d 	.word	0x0000c30d

0000c520 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    c520:	b480      	push	{r7}
    c522:	b083      	sub	sp, #12
    c524:	af00      	add	r7, sp, #0
    c526:	6078      	str	r0, [r7, #4]
    c528:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    c52a:	687b      	ldr	r3, [r7, #4]
    c52c:	683a      	ldr	r2, [r7, #0]
    c52e:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    c530:	687b      	ldr	r3, [r7, #4]
    c532:	4618      	mov	r0, r3
    c534:	370c      	adds	r7, #12
    c536:	46bd      	mov	sp, r7
    c538:	bc80      	pop	{r7}
    c53a:	4770      	bx	lr

0000c53c <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    c53c:	b480      	push	{r7}
    c53e:	b083      	sub	sp, #12
    c540:	af00      	add	r7, sp, #0
    c542:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    c544:	687b      	ldr	r3, [r7, #4]
    c546:	4618      	mov	r0, r3
    c548:	370c      	adds	r7, #12
    c54a:	46bd      	mov	sp, r7
    c54c:	bc80      	pop	{r7}
    c54e:	4770      	bx	lr

0000c550 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    c550:	b580      	push	{r7, lr}
    c552:	b082      	sub	sp, #8
    c554:	af00      	add	r7, sp, #0
    c556:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    c558:	687b      	ldr	r3, [r7, #4]
    c55a:	4a23      	ldr	r2, [pc, #140]	; (c5e8 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    c55c:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    c55e:	687b      	ldr	r3, [r7, #4]
    c560:	4a21      	ldr	r2, [pc, #132]	; (c5e8 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    c562:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    c564:	687b      	ldr	r3, [r7, #4]
    c566:	691a      	ldr	r2, [r3, #16]
    c568:	687b      	ldr	r3, [r7, #4]
    c56a:	330c      	adds	r3, #12
    c56c:	4619      	mov	r1, r3
    c56e:	4610      	mov	r0, r2
    c570:	4b1e      	ldr	r3, [pc, #120]	; (c5ec <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    c572:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    c574:	687b      	ldr	r3, [r7, #4]
    c576:	691b      	ldr	r3, [r3, #16]
    c578:	4618      	mov	r0, r3
    c57a:	4b1d      	ldr	r3, [pc, #116]	; (c5f0 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    c57c:	4798      	blx	r3
    c57e:	4603      	mov	r3, r0
    c580:	b2da      	uxtb	r2, r3
    c582:	687b      	ldr	r3, [r7, #4]
    c584:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    c586:	687b      	ldr	r3, [r7, #4]
    c588:	7d1b      	ldrb	r3, [r3, #20]
    c58a:	2b00      	cmp	r3, #0
    c58c:	bf0c      	ite	eq
    c58e:	2301      	moveq	r3, #1
    c590:	2300      	movne	r3, #0
    c592:	b2da      	uxtb	r2, r3
    c594:	687b      	ldr	r3, [r7, #4]
    c596:	725a      	strb	r2, [r3, #9]
	if (isOK)
    c598:	687b      	ldr	r3, [r7, #4]
    c59a:	7a5b      	ldrb	r3, [r3, #9]
    c59c:	b2db      	uxtb	r3, r3
    c59e:	2b00      	cmp	r3, #0
    c5a0:	d116      	bne.n	c5d0 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    c5a2:	687b      	ldr	r3, [r7, #4]
    c5a4:	691b      	ldr	r3, [r3, #16]
    c5a6:	4618      	mov	r0, r3
    c5a8:	4b12      	ldr	r3, [pc, #72]	; (c5f4 <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    c5aa:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    c5ac:	687b      	ldr	r3, [r7, #4]
    c5ae:	691b      	ldr	r3, [r3, #16]
    c5b0:	4618      	mov	r0, r3
    c5b2:	4b0f      	ldr	r3, [pc, #60]	; (c5f0 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    c5b4:	4798      	blx	r3
    c5b6:	4603      	mov	r3, r0
    c5b8:	b2da      	uxtb	r2, r3
    c5ba:	687b      	ldr	r3, [r7, #4]
    c5bc:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    c5be:	687b      	ldr	r3, [r7, #4]
    c5c0:	7d1b      	ldrb	r3, [r3, #20]
    c5c2:	2b00      	cmp	r3, #0
    c5c4:	bf0c      	ite	eq
    c5c6:	2301      	moveq	r3, #1
    c5c8:	2300      	movne	r3, #0
    c5ca:	b2da      	uxtb	r2, r3
    c5cc:	687b      	ldr	r3, [r7, #4]
    c5ce:	725a      	strb	r2, [r3, #9]
	}
	
	initiated=isOK;
    c5d0:	687b      	ldr	r3, [r7, #4]
    c5d2:	7a5b      	ldrb	r3, [r3, #9]
    c5d4:	b2da      	uxtb	r2, r3
    c5d6:	687b      	ldr	r3, [r7, #4]
    c5d8:	721a      	strb	r2, [r3, #8]
	return isOK;
    c5da:	687b      	ldr	r3, [r7, #4]
    c5dc:	7a5b      	ldrb	r3, [r3, #9]
    c5de:	b2db      	uxtb	r3, r3
	
}
    c5e0:	4618      	mov	r0, r3
    c5e2:	3708      	adds	r7, #8
    c5e4:	46bd      	mov	sp, r7
    c5e6:	bd80      	pop	{r7, pc}
    c5e8:	20000cfc 	.word	0x20000cfc
    c5ec:	00001f57 	.word	0x00001f57
    c5f0:	00001edd 	.word	0x00001edd
    c5f4:	00001efd 	.word	0x00001efd

0000c5f8 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    c5f8:	b580      	push	{r7, lr}
    c5fa:	b082      	sub	sp, #8
    c5fc:	af00      	add	r7, sp, #0
    c5fe:	6078      	str	r0, [r7, #4]
    c600:	460b      	mov	r3, r1
    c602:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    c604:	687b      	ldr	r3, [r7, #4]
    c606:	691b      	ldr	r3, [r3, #16]
    c608:	78fa      	ldrb	r2, [r7, #3]
    c60a:	b211      	sxth	r1, r2
    c60c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c610:	4618      	mov	r0, r3
    c612:	4b03      	ldr	r3, [pc, #12]	; (c620 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    c614:	4798      	blx	r3
    c616:	4603      	mov	r3, r0
}
    c618:	4618      	mov	r0, r3
    c61a:	3708      	adds	r7, #8
    c61c:	46bd      	mov	sp, r7
    c61e:	bd80      	pop	{r7, pc}
    c620:	00001f1d 	.word	0x00001f1d

0000c624 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    c624:	b580      	push	{r7, lr}
    c626:	b086      	sub	sp, #24
    c628:	af00      	add	r7, sp, #0
    c62a:	60f8      	str	r0, [r7, #12]
    c62c:	60b9      	str	r1, [r7, #8]
    c62e:	4613      	mov	r3, r2
    c630:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    c632:	68fb      	ldr	r3, [r7, #12]
    c634:	68db      	ldr	r3, [r3, #12]
    c636:	88fa      	ldrh	r2, [r7, #6]
    c638:	68b9      	ldr	r1, [r7, #8]
    c63a:	4618      	mov	r0, r3
    c63c:	4b03      	ldr	r3, [pc, #12]	; (c64c <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    c63e:	4798      	blx	r3
    c640:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    c642:	697b      	ldr	r3, [r7, #20]
}
    c644:	4618      	mov	r0, r3
    c646:	3718      	adds	r7, #24
    c648:	46bd      	mov	sp, r7
    c64a:	bd80      	pop	{r7, pc}
    c64c:	0000cb11 	.word	0x0000cb11

0000c650 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    c650:	b580      	push	{r7, lr}
    c652:	b086      	sub	sp, #24
    c654:	af00      	add	r7, sp, #0
    c656:	60f8      	str	r0, [r7, #12]
    c658:	60b9      	str	r1, [r7, #8]
    c65a:	4613      	mov	r3, r2
    c65c:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    c65e:	68fb      	ldr	r3, [r7, #12]
    c660:	68db      	ldr	r3, [r3, #12]
    c662:	88fa      	ldrh	r2, [r7, #6]
    c664:	68b9      	ldr	r1, [r7, #8]
    c666:	4618      	mov	r0, r3
    c668:	4b03      	ldr	r3, [pc, #12]	; (c678 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    c66a:	4798      	blx	r3
    c66c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    c66e:	697b      	ldr	r3, [r7, #20]
}
    c670:	4618      	mov	r0, r3
    c672:	3718      	adds	r7, #24
    c674:	46bd      	mov	sp, r7
    c676:	bd80      	pop	{r7, pc}
    c678:	0000cb61 	.word	0x0000cb61

0000c67c <_Z41__static_initialization_and_destruction_0ii>:
	__enable_irq();
}
void	I2C_Sync_Class::Irq_Disable(void){
	__DMB();
	__disable_irq();
}
    c67c:	b580      	push	{r7, lr}
    c67e:	b082      	sub	sp, #8
    c680:	af00      	add	r7, sp, #0
    c682:	6078      	str	r0, [r7, #4]
    c684:	6039      	str	r1, [r7, #0]
    c686:	687b      	ldr	r3, [r7, #4]
    c688:	2b01      	cmp	r3, #1
    c68a:	d10d      	bne.n	c6a8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    c68c:	683b      	ldr	r3, [r7, #0]
    c68e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c692:	4293      	cmp	r3, r2
    c694:	d108      	bne.n	c6a8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    c696:	4906      	ldr	r1, [pc, #24]	; (c6b0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    c698:	4806      	ldr	r0, [pc, #24]	; (c6b4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    c69a:	4b07      	ldr	r3, [pc, #28]	; (c6b8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    c69c:	4798      	blx	r3
    c69e:	4a07      	ldr	r2, [pc, #28]	; (c6bc <_Z41__static_initialization_and_destruction_0ii+0x40>)
    c6a0:	4907      	ldr	r1, [pc, #28]	; (c6c0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    c6a2:	4804      	ldr	r0, [pc, #16]	; (c6b4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    c6a4:	4b07      	ldr	r3, [pc, #28]	; (c6c4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    c6a6:	4798      	blx	r3
    c6a8:	bf00      	nop
    c6aa:	3708      	adds	r7, #8
    c6ac:	46bd      	mov	sp, r7
    c6ae:	bd80      	pop	{r7, pc}
    c6b0:	20000ec4 	.word	0x20000ec4
    c6b4:	20000ce4 	.word	0x20000ce4
    c6b8:	0000c521 	.word	0x0000c521
    c6bc:	20000000 	.word	0x20000000
    c6c0:	0000c53d 	.word	0x0000c53d
    c6c4:	0000cbb1 	.word	0x0000cbb1

0000c6c8 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev>:
    c6c8:	b580      	push	{r7, lr}
    c6ca:	af00      	add	r7, sp, #0
    c6cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c6d0:	2001      	movs	r0, #1
    c6d2:	4b01      	ldr	r3, [pc, #4]	; (c6d8 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev+0x10>)
    c6d4:	4798      	blx	r3
    c6d6:	bd80      	pop	{r7, pc}
    c6d8:	0000c67d 	.word	0x0000c67d

0000c6dc <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    c6dc:	b480      	push	{r7}
    c6de:	b083      	sub	sp, #12
    c6e0:	af00      	add	r7, sp, #0
    c6e2:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    c6e4:	687b      	ldr	r3, [r7, #4]
    c6e6:	4618      	mov	r0, r3
    c6e8:	370c      	adds	r7, #12
    c6ea:	46bd      	mov	sp, r7
    c6ec:	bc80      	pop	{r7}
    c6ee:	4770      	bx	lr

0000c6f0 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    c6f0:	b480      	push	{r7}
    c6f2:	b083      	sub	sp, #12
    c6f4:	af00      	add	r7, sp, #0
    c6f6:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    c6f8:	687b      	ldr	r3, [r7, #4]
    c6fa:	4618      	mov	r0, r3
    c6fc:	370c      	adds	r7, #12
    c6fe:	46bd      	mov	sp, r7
    c700:	bc80      	pop	{r7}
    c702:	4770      	bx	lr

0000c704 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    c704:	b480      	push	{r7}
    c706:	b085      	sub	sp, #20
    c708:	af00      	add	r7, sp, #0
    c70a:	60f8      	str	r0, [r7, #12]
    c70c:	460b      	mov	r3, r1
    c70e:	607a      	str	r2, [r7, #4]
    c710:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    c712:	687b      	ldr	r3, [r7, #4]
    c714:	681a      	ldr	r2, [r3, #0]
    c716:	68fb      	ldr	r3, [r7, #12]
    c718:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    c71a:	687b      	ldr	r3, [r7, #4]
    c71c:	685a      	ldr	r2, [r3, #4]
    c71e:	68fb      	ldr	r3, [r7, #12]
    c720:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    c722:	68fb      	ldr	r3, [r7, #12]
    c724:	7afa      	ldrb	r2, [r7, #11]
    c726:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    c728:	68fb      	ldr	r3, [r7, #12]
    c72a:	687a      	ldr	r2, [r7, #4]
    c72c:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    c72e:	68fb      	ldr	r3, [r7, #12]
    c730:	68db      	ldr	r3, [r3, #12]
    c732:	7a5b      	ldrb	r3, [r3, #9]
    c734:	b2da      	uxtb	r2, r3
    c736:	68fb      	ldr	r3, [r7, #12]
    c738:	719a      	strb	r2, [r3, #6]
	return isOK;
    c73a:	68fb      	ldr	r3, [r7, #12]
    c73c:	799b      	ldrb	r3, [r3, #6]
    c73e:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    c740:	4618      	mov	r0, r3
    c742:	3714      	adds	r7, #20
    c744:	46bd      	mov	sp, r7
    c746:	bc80      	pop	{r7}
    c748:	4770      	bx	lr

0000c74a <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    c74a:	b480      	push	{r7}
    c74c:	b083      	sub	sp, #12
    c74e:	af00      	add	r7, sp, #0
    c750:	6078      	str	r0, [r7, #4]
    c752:	460b      	mov	r3, r1
    c754:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    c756:	78fb      	ldrb	r3, [r7, #3]
    c758:	f003 0307 	and.w	r3, r3, #7
    c75c:	b2db      	uxtb	r3, r3
}
    c75e:	4618      	mov	r0, r3
    c760:	370c      	adds	r7, #12
    c762:	46bd      	mov	sp, r7
    c764:	bc80      	pop	{r7}
    c766:	4770      	bx	lr

0000c768 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    c768:	b480      	push	{r7}
    c76a:	b083      	sub	sp, #12
    c76c:	af00      	add	r7, sp, #0
    c76e:	6078      	str	r0, [r7, #4]
    c770:	4608      	mov	r0, r1
    c772:	4611      	mov	r1, r2
    c774:	461a      	mov	r2, r3
    c776:	4603      	mov	r3, r0
    c778:	70fb      	strb	r3, [r7, #3]
    c77a:	460b      	mov	r3, r1
    c77c:	70bb      	strb	r3, [r7, #2]
    c77e:	4613      	mov	r3, r2
    c780:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    c782:	78fb      	ldrb	r3, [r7, #3]
    c784:	2b07      	cmp	r3, #7
    c786:	dc01      	bgt.n	c78c <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    c788:	78bb      	ldrb	r3, [r7, #2]
    c78a:	e000      	b.n	c78e <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    c78c:	787b      	ldrb	r3, [r7, #1]
}
    c78e:	4618      	mov	r0, r3
    c790:	370c      	adds	r7, #12
    c792:	46bd      	mov	sp, r7
    c794:	bc80      	pop	{r7}
    c796:	4770      	bx	lr

0000c798 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    c798:	b580      	push	{r7, lr}
    c79a:	b082      	sub	sp, #8
    c79c:	af00      	add	r7, sp, #0
    c79e:	6078      	str	r0, [r7, #4]
    c7a0:	460b      	mov	r3, r1
    c7a2:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    c7a4:	687b      	ldr	r3, [r7, #4]
    c7a6:	68da      	ldr	r2, [r3, #12]
    c7a8:	687b      	ldr	r3, [r7, #4]
    c7aa:	7a1b      	ldrb	r3, [r3, #8]
    c7ac:	4619      	mov	r1, r3
    c7ae:	4610      	mov	r0, r2
    c7b0:	4b0a      	ldr	r3, [pc, #40]	; (c7dc <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    c7b2:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    c7b4:	687b      	ldr	r3, [r7, #4]
    c7b6:	68db      	ldr	r3, [r3, #12]
    c7b8:	1cf9      	adds	r1, r7, #3
    c7ba:	2201      	movs	r2, #1
    c7bc:	4618      	mov	r0, r3
    c7be:	4b08      	ldr	r3, [pc, #32]	; (c7e0 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    c7c0:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    c7c2:	687b      	ldr	r3, [r7, #4]
    c7c4:	68db      	ldr	r3, [r3, #12]
    c7c6:	6879      	ldr	r1, [r7, #4]
    c7c8:	2201      	movs	r2, #1
    c7ca:	4618      	mov	r0, r3
    c7cc:	4b05      	ldr	r3, [pc, #20]	; (c7e4 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    c7ce:	4798      	blx	r3

	return registerValue;
    c7d0:	687b      	ldr	r3, [r7, #4]
    c7d2:	781b      	ldrb	r3, [r3, #0]
}
    c7d4:	4618      	mov	r0, r3
    c7d6:	3708      	adds	r7, #8
    c7d8:	46bd      	mov	sp, r7
    c7da:	bd80      	pop	{r7, pc}
    c7dc:	0000c5f9 	.word	0x0000c5f9
    c7e0:	0000c625 	.word	0x0000c625
    c7e4:	0000c651 	.word	0x0000c651

0000c7e8 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    c7e8:	b580      	push	{r7, lr}
    c7ea:	b084      	sub	sp, #16
    c7ec:	af00      	add	r7, sp, #0
    c7ee:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    c7f0:	687b      	ldr	r3, [r7, #4]
    c7f2:	68da      	ldr	r2, [r3, #12]
    c7f4:	687b      	ldr	r3, [r7, #4]
    c7f6:	7a1b      	ldrb	r3, [r3, #8]
    c7f8:	4619      	mov	r1, r3
    c7fa:	4610      	mov	r0, r2
    c7fc:	4b06      	ldr	r3, [pc, #24]	; (c818 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    c7fe:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    c800:	2109      	movs	r1, #9
    c802:	6878      	ldr	r0, [r7, #4]
    c804:	4b05      	ldr	r3, [pc, #20]	; (c81c <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    c806:	4798      	blx	r3
    c808:	4603      	mov	r3, r0
    c80a:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    c80c:	7bfb      	ldrb	r3, [r7, #15]
}
    c80e:	4618      	mov	r0, r3
    c810:	3710      	adds	r7, #16
    c812:	46bd      	mov	sp, r7
    c814:	bd80      	pop	{r7, pc}
    c816:	bf00      	nop
    c818:	0000c5f9 	.word	0x0000c5f9
    c81c:	0000c799 	.word	0x0000c799

0000c820 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    c820:	b580      	push	{r7, lr}
    c822:	b084      	sub	sp, #16
    c824:	af00      	add	r7, sp, #0
    c826:	6078      	str	r0, [r7, #4]
    c828:	460b      	mov	r3, r1
    c82a:	70fb      	strb	r3, [r7, #3]
    c82c:	4613      	mov	r3, r2
    c82e:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    c830:	687b      	ldr	r3, [r7, #4]
    c832:	68da      	ldr	r2, [r3, #12]
    c834:	687b      	ldr	r3, [r7, #4]
    c836:	7a1b      	ldrb	r3, [r3, #8]
    c838:	4619      	mov	r1, r3
    c83a:	4610      	mov	r0, r2
    c83c:	4b09      	ldr	r3, [pc, #36]	; (c864 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    c83e:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    c840:	78fb      	ldrb	r3, [r7, #3]
    c842:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    c844:	78bb      	ldrb	r3, [r7, #2]
    c846:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    c848:	687b      	ldr	r3, [r7, #4]
    c84a:	68db      	ldr	r3, [r3, #12]
    c84c:	f107 010c 	add.w	r1, r7, #12
    c850:	2202      	movs	r2, #2
    c852:	4618      	mov	r0, r3
    c854:	4b04      	ldr	r3, [pc, #16]	; (c868 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    c856:	4798      	blx	r3
    c858:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    c85a:	4618      	mov	r0, r3
    c85c:	3710      	adds	r7, #16
    c85e:	46bd      	mov	sp, r7
    c860:	bd80      	pop	{r7, pc}
    c862:	bf00      	nop
    c864:	0000c5f9 	.word	0x0000c5f9
    c868:	0000c625 	.word	0x0000c625

0000c86c <_ZN14MCP23008_Class12SetPortInputEh>:
	{
		pinMode(i,MCP23008_INPUT);
		pullUp(i,MCP23008_HIGH);
	}
}
void	MCP23008_Class::SetPortInput(uint8_t inputs){
    c86c:	b580      	push	{r7, lr}
    c86e:	b084      	sub	sp, #16
    c870:	af00      	add	r7, sp, #0
    c872:	6078      	str	r0, [r7, #4]
    c874:	460b      	mov	r3, r1
    c876:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
    c878:	78fb      	ldrb	r3, [r7, #3]
    c87a:	2b00      	cmp	r3, #0
    c87c:	dd23      	ble.n	c8c6 <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
    c87e:	2300      	movs	r3, #0
    c880:	73fb      	strb	r3, [r7, #15]
    c882:	7bfb      	ldrb	r3, [r7, #15]
    c884:	2b07      	cmp	r3, #7
    c886:	dc21      	bgt.n	c8cc <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
    c888:	78fa      	ldrb	r2, [r7, #3]
    c88a:	7bfb      	ldrb	r3, [r7, #15]
    c88c:	fa42 f303 	asr.w	r3, r2, r3
    c890:	f003 0301 	and.w	r3, r3, #1
    c894:	2b00      	cmp	r3, #0
    c896:	d00c      	beq.n	c8b2 <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
    c898:	7bfb      	ldrb	r3, [r7, #15]
    c89a:	2201      	movs	r2, #1
    c89c:	4619      	mov	r1, r3
    c89e:	6878      	ldr	r0, [r7, #4]
    c8a0:	4b0c      	ldr	r3, [pc, #48]	; (c8d4 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    c8a2:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
    c8a4:	7bfb      	ldrb	r3, [r7, #15]
    c8a6:	2201      	movs	r2, #1
    c8a8:	4619      	mov	r1, r3
    c8aa:	6878      	ldr	r0, [r7, #4]
    c8ac:	4b0a      	ldr	r3, [pc, #40]	; (c8d8 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
    c8ae:	4798      	blx	r3
    c8b0:	e005      	b.n	c8be <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
    c8b2:	7bfb      	ldrb	r3, [r7, #15]
    c8b4:	2200      	movs	r2, #0
    c8b6:	4619      	mov	r1, r3
    c8b8:	6878      	ldr	r0, [r7, #4]
    c8ba:	4b06      	ldr	r3, [pc, #24]	; (c8d4 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    c8bc:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
    c8be:	7bfb      	ldrb	r3, [r7, #15]
    c8c0:	3301      	adds	r3, #1
    c8c2:	73fb      	strb	r3, [r7, #15]
    c8c4:	e7dd      	b.n	c882 <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
    c8c6:	6878      	ldr	r0, [r7, #4]
    c8c8:	4b04      	ldr	r3, [pc, #16]	; (c8dc <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
    c8ca:	4798      	blx	r3
	}
	
}
    c8cc:	bf00      	nop
    c8ce:	3710      	adds	r7, #16
    c8d0:	46bd      	mov	sp, r7
    c8d2:	bd80      	pop	{r7, pc}
    c8d4:	0000c9a1 	.word	0x0000c9a1
    c8d8:	0000ca85 	.word	0x0000ca85
    c8dc:	0000c8e1 	.word	0x0000c8e1

0000c8e0 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
    c8e0:	b580      	push	{r7, lr}
    c8e2:	b084      	sub	sp, #16
    c8e4:	af00      	add	r7, sp, #0
    c8e6:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    c8e8:	2300      	movs	r3, #0
    c8ea:	73fb      	strb	r3, [r7, #15]
    c8ec:	7bfb      	ldrb	r3, [r7, #15]
    c8ee:	2b07      	cmp	r3, #7
    c8f0:	dc09      	bgt.n	c906 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    c8f2:	7bfb      	ldrb	r3, [r7, #15]
    c8f4:	2200      	movs	r2, #0
    c8f6:	4619      	mov	r1, r3
    c8f8:	6878      	ldr	r0, [r7, #4]
    c8fa:	4b05      	ldr	r3, [pc, #20]	; (c910 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    c8fc:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    c8fe:	7bfb      	ldrb	r3, [r7, #15]
    c900:	3301      	adds	r3, #1
    c902:	73fb      	strb	r3, [r7, #15]
    c904:	e7f2      	b.n	c8ec <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    c906:	bf00      	nop
    c908:	3710      	adds	r7, #16
    c90a:	46bd      	mov	sp, r7
    c90c:	bd80      	pop	{r7, pc}
    c90e:	bf00      	nop
    c910:	0000c9a1 	.word	0x0000c9a1

0000c914 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    c914:	b580      	push	{r7, lr}
    c916:	b084      	sub	sp, #16
    c918:	af00      	add	r7, sp, #0
    c91a:	6078      	str	r0, [r7, #4]
    c91c:	4608      	mov	r0, r1
    c91e:	4611      	mov	r1, r2
    c920:	461a      	mov	r2, r3
    c922:	4603      	mov	r3, r0
    c924:	70fb      	strb	r3, [r7, #3]
    c926:	460b      	mov	r3, r1
    c928:	70bb      	strb	r3, [r7, #2]
    c92a:	4613      	mov	r3, r2
    c92c:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    c92e:	787b      	ldrb	r3, [r7, #1]
    c930:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    c932:	78fb      	ldrb	r3, [r7, #3]
    c934:	4619      	mov	r1, r3
    c936:	6878      	ldr	r0, [r7, #4]
    c938:	4b16      	ldr	r3, [pc, #88]	; (c994 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    c93a:	4798      	blx	r3
    c93c:	4603      	mov	r3, r0
    c93e:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    c940:	7bfb      	ldrb	r3, [r7, #15]
    c942:	4619      	mov	r1, r3
    c944:	6878      	ldr	r0, [r7, #4]
    c946:	4b14      	ldr	r3, [pc, #80]	; (c998 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    c948:	4798      	blx	r3
    c94a:	4603      	mov	r3, r0
    c94c:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    c94e:	78bb      	ldrb	r3, [r7, #2]
    c950:	2b00      	cmp	r3, #0
    c952:	d009      	beq.n	c968 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    c954:	7bba      	ldrb	r2, [r7, #14]
    c956:	7b7b      	ldrb	r3, [r7, #13]
    c958:	4619      	mov	r1, r3
    c95a:	2301      	movs	r3, #1
    c95c:	408b      	lsls	r3, r1
    c95e:	b2db      	uxtb	r3, r3
    c960:	4313      	orrs	r3, r2
    c962:	b2db      	uxtb	r3, r3
    c964:	73bb      	strb	r3, [r7, #14]
    c966:	e00a      	b.n	c97e <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    c968:	7bba      	ldrb	r2, [r7, #14]
    c96a:	7b7b      	ldrb	r3, [r7, #13]
    c96c:	4619      	mov	r1, r3
    c96e:	2301      	movs	r3, #1
    c970:	408b      	lsls	r3, r1
    c972:	b2db      	uxtb	r3, r3
    c974:	43db      	mvns	r3, r3
    c976:	b2db      	uxtb	r3, r3
    c978:	4013      	ands	r3, r2
    c97a:	b2db      	uxtb	r3, r3
    c97c:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    c97e:	7bba      	ldrb	r2, [r7, #14]
    c980:	7bfb      	ldrb	r3, [r7, #15]
    c982:	4619      	mov	r1, r3
    c984:	6878      	ldr	r0, [r7, #4]
    c986:	4b05      	ldr	r3, [pc, #20]	; (c99c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    c988:	4798      	blx	r3
}
    c98a:	bf00      	nop
    c98c:	3710      	adds	r7, #16
    c98e:	46bd      	mov	sp, r7
    c990:	bd80      	pop	{r7, pc}
    c992:	bf00      	nop
    c994:	0000c74b 	.word	0x0000c74b
    c998:	0000c799 	.word	0x0000c799
    c99c:	0000c821 	.word	0x0000c821

0000c9a0 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    c9a0:	b590      	push	{r4, r7, lr}
    c9a2:	b085      	sub	sp, #20
    c9a4:	af02      	add	r7, sp, #8
    c9a6:	6078      	str	r0, [r7, #4]
    c9a8:	460b      	mov	r3, r1
    c9aa:	70fb      	strb	r3, [r7, #3]
    c9ac:	4613      	mov	r3, r2
    c9ae:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    c9b0:	78bb      	ldrb	r3, [r7, #2]
    c9b2:	2b01      	cmp	r3, #1
    c9b4:	bf0c      	ite	eq
    c9b6:	2301      	moveq	r3, #1
    c9b8:	2300      	movne	r3, #0
    c9ba:	b2db      	uxtb	r3, r3
    c9bc:	461a      	mov	r2, r3
    c9be:	78f9      	ldrb	r1, [r7, #3]
    c9c0:	2300      	movs	r3, #0
    c9c2:	9300      	str	r3, [sp, #0]
    c9c4:	2300      	movs	r3, #0
    c9c6:	6878      	ldr	r0, [r7, #4]
    c9c8:	4c02      	ldr	r4, [pc, #8]	; (c9d4 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    c9ca:	47a0      	blx	r4
}
    c9cc:	bf00      	nop
    c9ce:	370c      	adds	r7, #12
    c9d0:	46bd      	mov	sp, r7
    c9d2:	bd90      	pop	{r4, r7, pc}
    c9d4:	0000c915 	.word	0x0000c915

0000c9d8 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    c9d8:	b590      	push	{r4, r7, lr}
    c9da:	b085      	sub	sp, #20
    c9dc:	af00      	add	r7, sp, #0
    c9de:	6078      	str	r0, [r7, #4]
    c9e0:	460b      	mov	r3, r1
    c9e2:	70fb      	strb	r3, [r7, #3]
    c9e4:	4613      	mov	r3, r2
    c9e6:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    c9e8:	78fb      	ldrb	r3, [r7, #3]
    c9ea:	4619      	mov	r1, r3
    c9ec:	6878      	ldr	r0, [r7, #4]
    c9ee:	4b21      	ldr	r3, [pc, #132]	; (ca74 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    c9f0:	4798      	blx	r3
    c9f2:	4603      	mov	r3, r0
    c9f4:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    c9f6:	78f9      	ldrb	r1, [r7, #3]
    c9f8:	230a      	movs	r3, #10
    c9fa:	220a      	movs	r2, #10
    c9fc:	6878      	ldr	r0, [r7, #4]
    c9fe:	4c1e      	ldr	r4, [pc, #120]	; (ca78 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    ca00:	47a0      	blx	r4
    ca02:	4603      	mov	r3, r0
    ca04:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    ca06:	7bfb      	ldrb	r3, [r7, #15]
    ca08:	4619      	mov	r1, r3
    ca0a:	6878      	ldr	r0, [r7, #4]
    ca0c:	4b1b      	ldr	r3, [pc, #108]	; (ca7c <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    ca0e:	4798      	blx	r3
    ca10:	4603      	mov	r3, r0
    ca12:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    ca14:	78bb      	ldrb	r3, [r7, #2]
    ca16:	2b00      	cmp	r3, #0
    ca18:	d009      	beq.n	ca2e <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    ca1a:	7bba      	ldrb	r2, [r7, #14]
    ca1c:	7b7b      	ldrb	r3, [r7, #13]
    ca1e:	4619      	mov	r1, r3
    ca20:	2301      	movs	r3, #1
    ca22:	408b      	lsls	r3, r1
    ca24:	b2db      	uxtb	r3, r3
    ca26:	4313      	orrs	r3, r2
    ca28:	b2db      	uxtb	r3, r3
    ca2a:	73bb      	strb	r3, [r7, #14]
    ca2c:	e00a      	b.n	ca44 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    ca2e:	7bba      	ldrb	r2, [r7, #14]
    ca30:	7b7b      	ldrb	r3, [r7, #13]
    ca32:	4619      	mov	r1, r3
    ca34:	2301      	movs	r3, #1
    ca36:	408b      	lsls	r3, r1
    ca38:	b2db      	uxtb	r3, r3
    ca3a:	43db      	mvns	r3, r3
    ca3c:	b2db      	uxtb	r3, r3
    ca3e:	4013      	ands	r3, r2
    ca40:	b2db      	uxtb	r3, r3
    ca42:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    ca44:	78f9      	ldrb	r1, [r7, #3]
    ca46:	2309      	movs	r3, #9
    ca48:	2209      	movs	r2, #9
    ca4a:	6878      	ldr	r0, [r7, #4]
    ca4c:	4c0a      	ldr	r4, [pc, #40]	; (ca78 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    ca4e:	47a0      	blx	r4
    ca50:	4603      	mov	r3, r0
    ca52:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    ca54:	7bba      	ldrb	r2, [r7, #14]
    ca56:	7bfb      	ldrb	r3, [r7, #15]
    ca58:	4619      	mov	r1, r3
    ca5a:	6878      	ldr	r0, [r7, #4]
    ca5c:	4b08      	ldr	r3, [pc, #32]	; (ca80 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    ca5e:	4798      	blx	r3
    ca60:	4603      	mov	r3, r0
    ca62:	2b00      	cmp	r3, #0
    ca64:	bf0c      	ite	eq
    ca66:	2301      	moveq	r3, #1
    ca68:	2300      	movne	r3, #0
    ca6a:	b2db      	uxtb	r3, r3
}
    ca6c:	4618      	mov	r0, r3
    ca6e:	3714      	adds	r7, #20
    ca70:	46bd      	mov	sp, r7
    ca72:	bd90      	pop	{r4, r7, pc}
    ca74:	0000c74b 	.word	0x0000c74b
    ca78:	0000c769 	.word	0x0000c769
    ca7c:	0000c799 	.word	0x0000c799
    ca80:	0000c821 	.word	0x0000c821

0000ca84 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    ca84:	b590      	push	{r4, r7, lr}
    ca86:	b085      	sub	sp, #20
    ca88:	af02      	add	r7, sp, #8
    ca8a:	6078      	str	r0, [r7, #4]
    ca8c:	460b      	mov	r3, r1
    ca8e:	70fb      	strb	r3, [r7, #3]
    ca90:	4613      	mov	r3, r2
    ca92:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    ca94:	78ba      	ldrb	r2, [r7, #2]
    ca96:	78f9      	ldrb	r1, [r7, #3]
    ca98:	2306      	movs	r3, #6
    ca9a:	9300      	str	r3, [sp, #0]
    ca9c:	2306      	movs	r3, #6
    ca9e:	6878      	ldr	r0, [r7, #4]
    caa0:	4c02      	ldr	r4, [pc, #8]	; (caac <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    caa2:	47a0      	blx	r4
}
    caa4:	bf00      	nop
    caa6:	370c      	adds	r7, #12
    caa8:	46bd      	mov	sp, r7
    caaa:	bd90      	pop	{r4, r7, pc}
    caac:	0000c915 	.word	0x0000c915

0000cab0 <_Z41__static_initialization_and_destruction_0ii>:
	return MCP23008_INT_ERR;
}
bool	MCP23008_Class::SelfTest(void){

	return isOK;
    cab0:	b580      	push	{r7, lr}
    cab2:	b082      	sub	sp, #8
    cab4:	af00      	add	r7, sp, #0
    cab6:	6078      	str	r0, [r7, #4]
    cab8:	6039      	str	r1, [r7, #0]
    caba:	687b      	ldr	r3, [r7, #4]
    cabc:	2b01      	cmp	r3, #1
    cabe:	d10d      	bne.n	cadc <_Z41__static_initialization_and_destruction_0ii+0x2c>
    cac0:	683b      	ldr	r3, [r7, #0]
    cac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cac6:	4293      	cmp	r3, r2
    cac8:	d108      	bne.n	cadc <_Z41__static_initialization_and_destruction_0ii+0x2c>
    caca:	4906      	ldr	r1, [pc, #24]	; (cae4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    cacc:	4806      	ldr	r0, [pc, #24]	; (cae8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    cace:	4b07      	ldr	r3, [pc, #28]	; (caec <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    cad0:	4798      	blx	r3
    cad2:	4a07      	ldr	r2, [pc, #28]	; (caf0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    cad4:	4907      	ldr	r1, [pc, #28]	; (caf4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    cad6:	4804      	ldr	r0, [pc, #16]	; (cae8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    cad8:	4b07      	ldr	r3, [pc, #28]	; (caf8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    cada:	4798      	blx	r3
    cadc:	bf00      	nop
    cade:	3708      	adds	r7, #8
    cae0:	46bd      	mov	sp, r7
    cae2:	bd80      	pop	{r7, pc}
    cae4:	20000ec4 	.word	0x20000ec4
    cae8:	20000d7c 	.word	0x20000d7c
    caec:	0000c521 	.word	0x0000c521
    caf0:	20000000 	.word	0x20000000
    caf4:	0000c53d 	.word	0x0000c53d
    caf8:	0000cbb1 	.word	0x0000cbb1

0000cafc <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev>:
    cafc:	b580      	push	{r7, lr}
    cafe:	af00      	add	r7, sp, #0
    cb00:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cb04:	2001      	movs	r0, #1
    cb06:	4b01      	ldr	r3, [pc, #4]	; (cb0c <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev+0x10>)
    cb08:	4798      	blx	r3
    cb0a:	bd80      	pop	{r7, pc}
    cb0c:	0000cab1 	.word	0x0000cab1

0000cb10 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    cb10:	b580      	push	{r7, lr}
    cb12:	b084      	sub	sp, #16
    cb14:	af00      	add	r7, sp, #0
    cb16:	60f8      	str	r0, [r7, #12]
    cb18:	60b9      	str	r1, [r7, #8]
    cb1a:	4613      	mov	r3, r2
    cb1c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    cb1e:	68fb      	ldr	r3, [r7, #12]
    cb20:	2b00      	cmp	r3, #0
    cb22:	d004      	beq.n	cb2e <io_write+0x1e>
    cb24:	68bb      	ldr	r3, [r7, #8]
    cb26:	2b00      	cmp	r3, #0
    cb28:	d001      	beq.n	cb2e <io_write+0x1e>
    cb2a:	2301      	movs	r3, #1
    cb2c:	e000      	b.n	cb30 <io_write+0x20>
    cb2e:	2300      	movs	r3, #0
    cb30:	f003 0301 	and.w	r3, r3, #1
    cb34:	b2db      	uxtb	r3, r3
    cb36:	2234      	movs	r2, #52	; 0x34
    cb38:	4907      	ldr	r1, [pc, #28]	; (cb58 <io_write+0x48>)
    cb3a:	4618      	mov	r0, r3
    cb3c:	4b07      	ldr	r3, [pc, #28]	; (cb5c <io_write+0x4c>)
    cb3e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    cb40:	68fb      	ldr	r3, [r7, #12]
    cb42:	681b      	ldr	r3, [r3, #0]
    cb44:	88fa      	ldrh	r2, [r7, #6]
    cb46:	68b9      	ldr	r1, [r7, #8]
    cb48:	68f8      	ldr	r0, [r7, #12]
    cb4a:	4798      	blx	r3
    cb4c:	4603      	mov	r3, r0
}
    cb4e:	4618      	mov	r0, r3
    cb50:	3710      	adds	r7, #16
    cb52:	46bd      	mov	sp, r7
    cb54:	bd80      	pop	{r7, pc}
    cb56:	bf00      	nop
    cb58:	0000d320 	.word	0x0000d320
    cb5c:	00002de1 	.word	0x00002de1

0000cb60 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    cb60:	b580      	push	{r7, lr}
    cb62:	b084      	sub	sp, #16
    cb64:	af00      	add	r7, sp, #0
    cb66:	60f8      	str	r0, [r7, #12]
    cb68:	60b9      	str	r1, [r7, #8]
    cb6a:	4613      	mov	r3, r2
    cb6c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    cb6e:	68fb      	ldr	r3, [r7, #12]
    cb70:	2b00      	cmp	r3, #0
    cb72:	d004      	beq.n	cb7e <io_read+0x1e>
    cb74:	68bb      	ldr	r3, [r7, #8]
    cb76:	2b00      	cmp	r3, #0
    cb78:	d001      	beq.n	cb7e <io_read+0x1e>
    cb7a:	2301      	movs	r3, #1
    cb7c:	e000      	b.n	cb80 <io_read+0x20>
    cb7e:	2300      	movs	r3, #0
    cb80:	f003 0301 	and.w	r3, r3, #1
    cb84:	b2db      	uxtb	r3, r3
    cb86:	223d      	movs	r2, #61	; 0x3d
    cb88:	4907      	ldr	r1, [pc, #28]	; (cba8 <io_read+0x48>)
    cb8a:	4618      	mov	r0, r3
    cb8c:	4b07      	ldr	r3, [pc, #28]	; (cbac <io_read+0x4c>)
    cb8e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    cb90:	68fb      	ldr	r3, [r7, #12]
    cb92:	685b      	ldr	r3, [r3, #4]
    cb94:	88fa      	ldrh	r2, [r7, #6]
    cb96:	68b9      	ldr	r1, [r7, #8]
    cb98:	68f8      	ldr	r0, [r7, #12]
    cb9a:	4798      	blx	r3
    cb9c:	4603      	mov	r3, r0
}
    cb9e:	4618      	mov	r0, r3
    cba0:	3710      	adds	r7, #16
    cba2:	46bd      	mov	sp, r7
    cba4:	bd80      	pop	{r7, pc}
    cba6:	bf00      	nop
    cba8:	0000d320 	.word	0x0000d320
    cbac:	00002de1 	.word	0x00002de1

0000cbb0 <__aeabi_atexit>:
    cbb0:	460b      	mov	r3, r1
    cbb2:	4601      	mov	r1, r0
    cbb4:	4618      	mov	r0, r3
    cbb6:	f000 b801 	b.w	cbbc <__cxa_atexit>
    cbba:	bf00      	nop

0000cbbc <__cxa_atexit>:
    cbbc:	4613      	mov	r3, r2
    cbbe:	460a      	mov	r2, r1
    cbc0:	4601      	mov	r1, r0
    cbc2:	2002      	movs	r0, #2
    cbc4:	f000 b91e 	b.w	ce04 <__register_exitproc>

0000cbc8 <ffs>:
    cbc8:	b140      	cbz	r0, cbdc <ffs+0x14>
    cbca:	2300      	movs	r3, #0
    cbcc:	fa40 f103 	asr.w	r1, r0, r3
    cbd0:	1c5a      	adds	r2, r3, #1
    cbd2:	07c9      	lsls	r1, r1, #31
    cbd4:	4613      	mov	r3, r2
    cbd6:	d5f9      	bpl.n	cbcc <ffs+0x4>
    cbd8:	4610      	mov	r0, r2
    cbda:	4770      	bx	lr
    cbdc:	4602      	mov	r2, r0
    cbde:	4610      	mov	r0, r2
    cbe0:	4770      	bx	lr
    cbe2:	bf00      	nop

0000cbe4 <__libc_init_array>:
    cbe4:	b570      	push	{r4, r5, r6, lr}
    cbe6:	4e0f      	ldr	r6, [pc, #60]	; (cc24 <__libc_init_array+0x40>)
    cbe8:	4d0f      	ldr	r5, [pc, #60]	; (cc28 <__libc_init_array+0x44>)
    cbea:	1b76      	subs	r6, r6, r5
    cbec:	10b6      	asrs	r6, r6, #2
    cbee:	bf18      	it	ne
    cbf0:	2400      	movne	r4, #0
    cbf2:	d005      	beq.n	cc00 <__libc_init_array+0x1c>
    cbf4:	3401      	adds	r4, #1
    cbf6:	f855 3b04 	ldr.w	r3, [r5], #4
    cbfa:	4798      	blx	r3
    cbfc:	42a6      	cmp	r6, r4
    cbfe:	d1f9      	bne.n	cbf4 <__libc_init_array+0x10>
    cc00:	4e0a      	ldr	r6, [pc, #40]	; (cc2c <__libc_init_array+0x48>)
    cc02:	4d0b      	ldr	r5, [pc, #44]	; (cc30 <__libc_init_array+0x4c>)
    cc04:	1b76      	subs	r6, r6, r5
    cc06:	f000 fb97 	bl	d338 <_init>
    cc0a:	10b6      	asrs	r6, r6, #2
    cc0c:	bf18      	it	ne
    cc0e:	2400      	movne	r4, #0
    cc10:	d006      	beq.n	cc20 <__libc_init_array+0x3c>
    cc12:	3401      	adds	r4, #1
    cc14:	f855 3b04 	ldr.w	r3, [r5], #4
    cc18:	4798      	blx	r3
    cc1a:	42a6      	cmp	r6, r4
    cc1c:	d1f9      	bne.n	cc12 <__libc_init_array+0x2e>
    cc1e:	bd70      	pop	{r4, r5, r6, pc}
    cc20:	bd70      	pop	{r4, r5, r6, pc}
    cc22:	bf00      	nop
    cc24:	0000d344 	.word	0x0000d344
    cc28:	0000d344 	.word	0x0000d344
    cc2c:	0000d35c 	.word	0x0000d35c
    cc30:	0000d344 	.word	0x0000d344

0000cc34 <memcpy>:
    cc34:	4684      	mov	ip, r0
    cc36:	ea41 0300 	orr.w	r3, r1, r0
    cc3a:	f013 0303 	ands.w	r3, r3, #3
    cc3e:	d16d      	bne.n	cd1c <memcpy+0xe8>
    cc40:	3a40      	subs	r2, #64	; 0x40
    cc42:	d341      	bcc.n	ccc8 <memcpy+0x94>
    cc44:	f851 3b04 	ldr.w	r3, [r1], #4
    cc48:	f840 3b04 	str.w	r3, [r0], #4
    cc4c:	f851 3b04 	ldr.w	r3, [r1], #4
    cc50:	f840 3b04 	str.w	r3, [r0], #4
    cc54:	f851 3b04 	ldr.w	r3, [r1], #4
    cc58:	f840 3b04 	str.w	r3, [r0], #4
    cc5c:	f851 3b04 	ldr.w	r3, [r1], #4
    cc60:	f840 3b04 	str.w	r3, [r0], #4
    cc64:	f851 3b04 	ldr.w	r3, [r1], #4
    cc68:	f840 3b04 	str.w	r3, [r0], #4
    cc6c:	f851 3b04 	ldr.w	r3, [r1], #4
    cc70:	f840 3b04 	str.w	r3, [r0], #4
    cc74:	f851 3b04 	ldr.w	r3, [r1], #4
    cc78:	f840 3b04 	str.w	r3, [r0], #4
    cc7c:	f851 3b04 	ldr.w	r3, [r1], #4
    cc80:	f840 3b04 	str.w	r3, [r0], #4
    cc84:	f851 3b04 	ldr.w	r3, [r1], #4
    cc88:	f840 3b04 	str.w	r3, [r0], #4
    cc8c:	f851 3b04 	ldr.w	r3, [r1], #4
    cc90:	f840 3b04 	str.w	r3, [r0], #4
    cc94:	f851 3b04 	ldr.w	r3, [r1], #4
    cc98:	f840 3b04 	str.w	r3, [r0], #4
    cc9c:	f851 3b04 	ldr.w	r3, [r1], #4
    cca0:	f840 3b04 	str.w	r3, [r0], #4
    cca4:	f851 3b04 	ldr.w	r3, [r1], #4
    cca8:	f840 3b04 	str.w	r3, [r0], #4
    ccac:	f851 3b04 	ldr.w	r3, [r1], #4
    ccb0:	f840 3b04 	str.w	r3, [r0], #4
    ccb4:	f851 3b04 	ldr.w	r3, [r1], #4
    ccb8:	f840 3b04 	str.w	r3, [r0], #4
    ccbc:	f851 3b04 	ldr.w	r3, [r1], #4
    ccc0:	f840 3b04 	str.w	r3, [r0], #4
    ccc4:	3a40      	subs	r2, #64	; 0x40
    ccc6:	d2bd      	bcs.n	cc44 <memcpy+0x10>
    ccc8:	3230      	adds	r2, #48	; 0x30
    ccca:	d311      	bcc.n	ccf0 <memcpy+0xbc>
    cccc:	f851 3b04 	ldr.w	r3, [r1], #4
    ccd0:	f840 3b04 	str.w	r3, [r0], #4
    ccd4:	f851 3b04 	ldr.w	r3, [r1], #4
    ccd8:	f840 3b04 	str.w	r3, [r0], #4
    ccdc:	f851 3b04 	ldr.w	r3, [r1], #4
    cce0:	f840 3b04 	str.w	r3, [r0], #4
    cce4:	f851 3b04 	ldr.w	r3, [r1], #4
    cce8:	f840 3b04 	str.w	r3, [r0], #4
    ccec:	3a10      	subs	r2, #16
    ccee:	d2ed      	bcs.n	cccc <memcpy+0x98>
    ccf0:	320c      	adds	r2, #12
    ccf2:	d305      	bcc.n	cd00 <memcpy+0xcc>
    ccf4:	f851 3b04 	ldr.w	r3, [r1], #4
    ccf8:	f840 3b04 	str.w	r3, [r0], #4
    ccfc:	3a04      	subs	r2, #4
    ccfe:	d2f9      	bcs.n	ccf4 <memcpy+0xc0>
    cd00:	3204      	adds	r2, #4
    cd02:	d008      	beq.n	cd16 <memcpy+0xe2>
    cd04:	07d2      	lsls	r2, r2, #31
    cd06:	bf1c      	itt	ne
    cd08:	f811 3b01 	ldrbne.w	r3, [r1], #1
    cd0c:	f800 3b01 	strbne.w	r3, [r0], #1
    cd10:	d301      	bcc.n	cd16 <memcpy+0xe2>
    cd12:	880b      	ldrh	r3, [r1, #0]
    cd14:	8003      	strh	r3, [r0, #0]
    cd16:	4660      	mov	r0, ip
    cd18:	4770      	bx	lr
    cd1a:	bf00      	nop
    cd1c:	2a08      	cmp	r2, #8
    cd1e:	d313      	bcc.n	cd48 <memcpy+0x114>
    cd20:	078b      	lsls	r3, r1, #30
    cd22:	d08d      	beq.n	cc40 <memcpy+0xc>
    cd24:	f010 0303 	ands.w	r3, r0, #3
    cd28:	d08a      	beq.n	cc40 <memcpy+0xc>
    cd2a:	f1c3 0304 	rsb	r3, r3, #4
    cd2e:	1ad2      	subs	r2, r2, r3
    cd30:	07db      	lsls	r3, r3, #31
    cd32:	bf1c      	itt	ne
    cd34:	f811 3b01 	ldrbne.w	r3, [r1], #1
    cd38:	f800 3b01 	strbne.w	r3, [r0], #1
    cd3c:	d380      	bcc.n	cc40 <memcpy+0xc>
    cd3e:	f831 3b02 	ldrh.w	r3, [r1], #2
    cd42:	f820 3b02 	strh.w	r3, [r0], #2
    cd46:	e77b      	b.n	cc40 <memcpy+0xc>
    cd48:	3a04      	subs	r2, #4
    cd4a:	d3d9      	bcc.n	cd00 <memcpy+0xcc>
    cd4c:	3a01      	subs	r2, #1
    cd4e:	f811 3b01 	ldrb.w	r3, [r1], #1
    cd52:	f800 3b01 	strb.w	r3, [r0], #1
    cd56:	d2f9      	bcs.n	cd4c <memcpy+0x118>
    cd58:	780b      	ldrb	r3, [r1, #0]
    cd5a:	7003      	strb	r3, [r0, #0]
    cd5c:	784b      	ldrb	r3, [r1, #1]
    cd5e:	7043      	strb	r3, [r0, #1]
    cd60:	788b      	ldrb	r3, [r1, #2]
    cd62:	7083      	strb	r3, [r0, #2]
    cd64:	4660      	mov	r0, ip
    cd66:	4770      	bx	lr

0000cd68 <memset>:
    cd68:	b470      	push	{r4, r5, r6}
    cd6a:	0786      	lsls	r6, r0, #30
    cd6c:	d046      	beq.n	cdfc <memset+0x94>
    cd6e:	1e54      	subs	r4, r2, #1
    cd70:	2a00      	cmp	r2, #0
    cd72:	d041      	beq.n	cdf8 <memset+0x90>
    cd74:	b2ca      	uxtb	r2, r1
    cd76:	4603      	mov	r3, r0
    cd78:	e002      	b.n	cd80 <memset+0x18>
    cd7a:	f114 34ff 	adds.w	r4, r4, #4294967295
    cd7e:	d33b      	bcc.n	cdf8 <memset+0x90>
    cd80:	f803 2b01 	strb.w	r2, [r3], #1
    cd84:	079d      	lsls	r5, r3, #30
    cd86:	d1f8      	bne.n	cd7a <memset+0x12>
    cd88:	2c03      	cmp	r4, #3
    cd8a:	d92e      	bls.n	cdea <memset+0x82>
    cd8c:	b2cd      	uxtb	r5, r1
    cd8e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    cd92:	2c0f      	cmp	r4, #15
    cd94:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    cd98:	d919      	bls.n	cdce <memset+0x66>
    cd9a:	f103 0210 	add.w	r2, r3, #16
    cd9e:	4626      	mov	r6, r4
    cda0:	3e10      	subs	r6, #16
    cda2:	2e0f      	cmp	r6, #15
    cda4:	f842 5c10 	str.w	r5, [r2, #-16]
    cda8:	f842 5c0c 	str.w	r5, [r2, #-12]
    cdac:	f842 5c08 	str.w	r5, [r2, #-8]
    cdb0:	f842 5c04 	str.w	r5, [r2, #-4]
    cdb4:	f102 0210 	add.w	r2, r2, #16
    cdb8:	d8f2      	bhi.n	cda0 <memset+0x38>
    cdba:	f1a4 0210 	sub.w	r2, r4, #16
    cdbe:	f022 020f 	bic.w	r2, r2, #15
    cdc2:	f004 040f 	and.w	r4, r4, #15
    cdc6:	3210      	adds	r2, #16
    cdc8:	2c03      	cmp	r4, #3
    cdca:	4413      	add	r3, r2
    cdcc:	d90d      	bls.n	cdea <memset+0x82>
    cdce:	461e      	mov	r6, r3
    cdd0:	4622      	mov	r2, r4
    cdd2:	3a04      	subs	r2, #4
    cdd4:	2a03      	cmp	r2, #3
    cdd6:	f846 5b04 	str.w	r5, [r6], #4
    cdda:	d8fa      	bhi.n	cdd2 <memset+0x6a>
    cddc:	1f22      	subs	r2, r4, #4
    cdde:	f022 0203 	bic.w	r2, r2, #3
    cde2:	3204      	adds	r2, #4
    cde4:	4413      	add	r3, r2
    cde6:	f004 0403 	and.w	r4, r4, #3
    cdea:	b12c      	cbz	r4, cdf8 <memset+0x90>
    cdec:	b2c9      	uxtb	r1, r1
    cdee:	441c      	add	r4, r3
    cdf0:	f803 1b01 	strb.w	r1, [r3], #1
    cdf4:	429c      	cmp	r4, r3
    cdf6:	d1fb      	bne.n	cdf0 <memset+0x88>
    cdf8:	bc70      	pop	{r4, r5, r6}
    cdfa:	4770      	bx	lr
    cdfc:	4614      	mov	r4, r2
    cdfe:	4603      	mov	r3, r0
    ce00:	e7c2      	b.n	cd88 <memset+0x20>
    ce02:	bf00      	nop

0000ce04 <__register_exitproc>:
    ce04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ce08:	4d2c      	ldr	r5, [pc, #176]	; (cebc <__register_exitproc+0xb8>)
    ce0a:	4606      	mov	r6, r0
    ce0c:	6828      	ldr	r0, [r5, #0]
    ce0e:	4698      	mov	r8, r3
    ce10:	460f      	mov	r7, r1
    ce12:	4691      	mov	r9, r2
    ce14:	f000 f882 	bl	cf1c <__retarget_lock_acquire_recursive>
    ce18:	4b29      	ldr	r3, [pc, #164]	; (cec0 <__register_exitproc+0xbc>)
    ce1a:	681c      	ldr	r4, [r3, #0]
    ce1c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ce20:	2b00      	cmp	r3, #0
    ce22:	d03e      	beq.n	cea2 <__register_exitproc+0x9e>
    ce24:	685a      	ldr	r2, [r3, #4]
    ce26:	2a1f      	cmp	r2, #31
    ce28:	dc1c      	bgt.n	ce64 <__register_exitproc+0x60>
    ce2a:	f102 0e01 	add.w	lr, r2, #1
    ce2e:	b176      	cbz	r6, ce4e <__register_exitproc+0x4a>
    ce30:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    ce34:	2401      	movs	r4, #1
    ce36:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    ce3a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    ce3e:	4094      	lsls	r4, r2
    ce40:	4320      	orrs	r0, r4
    ce42:	2e02      	cmp	r6, #2
    ce44:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    ce48:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    ce4c:	d023      	beq.n	ce96 <__register_exitproc+0x92>
    ce4e:	3202      	adds	r2, #2
    ce50:	f8c3 e004 	str.w	lr, [r3, #4]
    ce54:	6828      	ldr	r0, [r5, #0]
    ce56:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    ce5a:	f000 f861 	bl	cf20 <__retarget_lock_release_recursive>
    ce5e:	2000      	movs	r0, #0
    ce60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ce64:	4b17      	ldr	r3, [pc, #92]	; (cec4 <__register_exitproc+0xc0>)
    ce66:	b30b      	cbz	r3, ceac <__register_exitproc+0xa8>
    ce68:	f44f 70c8 	mov.w	r0, #400	; 0x190
    ce6c:	f3af 8000 	nop.w
    ce70:	4603      	mov	r3, r0
    ce72:	b1d8      	cbz	r0, ceac <__register_exitproc+0xa8>
    ce74:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    ce78:	6002      	str	r2, [r0, #0]
    ce7a:	2100      	movs	r1, #0
    ce7c:	6041      	str	r1, [r0, #4]
    ce7e:	460a      	mov	r2, r1
    ce80:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    ce84:	f04f 0e01 	mov.w	lr, #1
    ce88:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    ce8c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    ce90:	2e00      	cmp	r6, #0
    ce92:	d0dc      	beq.n	ce4e <__register_exitproc+0x4a>
    ce94:	e7cc      	b.n	ce30 <__register_exitproc+0x2c>
    ce96:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    ce9a:	430c      	orrs	r4, r1
    ce9c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    cea0:	e7d5      	b.n	ce4e <__register_exitproc+0x4a>
    cea2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    cea6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    ceaa:	e7bb      	b.n	ce24 <__register_exitproc+0x20>
    ceac:	6828      	ldr	r0, [r5, #0]
    ceae:	f000 f837 	bl	cf20 <__retarget_lock_release_recursive>
    ceb2:	f04f 30ff 	mov.w	r0, #4294967295
    ceb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ceba:	bf00      	nop
    cebc:	20000638 	.word	0x20000638
    cec0:	0000d334 	.word	0x0000d334
    cec4:	00000000 	.word	0x00000000

0000cec8 <register_fini>:
    cec8:	4b02      	ldr	r3, [pc, #8]	; (ced4 <register_fini+0xc>)
    ceca:	b113      	cbz	r3, ced2 <register_fini+0xa>
    cecc:	4802      	ldr	r0, [pc, #8]	; (ced8 <register_fini+0x10>)
    cece:	f000 b805 	b.w	cedc <atexit>
    ced2:	4770      	bx	lr
    ced4:	00000000 	.word	0x00000000
    ced8:	0000cee9 	.word	0x0000cee9

0000cedc <atexit>:
    cedc:	2300      	movs	r3, #0
    cede:	4601      	mov	r1, r0
    cee0:	461a      	mov	r2, r3
    cee2:	4618      	mov	r0, r3
    cee4:	f7ff bf8e 	b.w	ce04 <__register_exitproc>

0000cee8 <__libc_fini_array>:
    cee8:	b538      	push	{r3, r4, r5, lr}
    ceea:	4c0a      	ldr	r4, [pc, #40]	; (cf14 <__libc_fini_array+0x2c>)
    ceec:	4d0a      	ldr	r5, [pc, #40]	; (cf18 <__libc_fini_array+0x30>)
    ceee:	1b64      	subs	r4, r4, r5
    cef0:	10a4      	asrs	r4, r4, #2
    cef2:	d00a      	beq.n	cf0a <__libc_fini_array+0x22>
    cef4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    cef8:	3b01      	subs	r3, #1
    cefa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    cefe:	3c01      	subs	r4, #1
    cf00:	f855 3904 	ldr.w	r3, [r5], #-4
    cf04:	4798      	blx	r3
    cf06:	2c00      	cmp	r4, #0
    cf08:	d1f9      	bne.n	cefe <__libc_fini_array+0x16>
    cf0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cf0e:	f000 ba25 	b.w	d35c <_fini>
    cf12:	bf00      	nop
    cf14:	0000d36c 	.word	0x0000d36c
    cf18:	0000d368 	.word	0x0000d368

0000cf1c <__retarget_lock_acquire_recursive>:
    cf1c:	4770      	bx	lr
    cf1e:	bf00      	nop

0000cf20 <__retarget_lock_release_recursive>:
    cf20:	4770      	bx	lr
    cf22:	bf00      	nop
    cf24:	682f2e2e 	.word	0x682f2e2e
    cf28:	702f6c70 	.word	0x702f6c70
    cf2c:	2f74726f 	.word	0x2f74726f
    cf30:	5f6c7068 	.word	0x5f6c7068
    cf34:	6f697067 	.word	0x6f697067
    cf38:	7361625f 	.word	0x7361625f
    cf3c:	00682e65 	.word	0x00682e65
    cf40:	682f2e2e 	.word	0x682f2e2e
    cf44:	692f6c61 	.word	0x692f6c61
    cf48:	756c636e 	.word	0x756c636e
    cf4c:	682f6564 	.word	0x682f6564
    cf50:	775f6c61 	.word	0x775f6c61
    cf54:	682e7464 	.word	0x682e7464
    cf58:	00000000 	.word	0x00000000
    cf5c:	682f2e2e 	.word	0x682f2e2e
    cf60:	732f6c61 	.word	0x732f6c61
    cf64:	682f6372 	.word	0x682f6372
    cf68:	635f6c61 	.word	0x635f6c61
    cf6c:	6e656c61 	.word	0x6e656c61
    cf70:	2e726164 	.word	0x2e726164
    cf74:	00000063 	.word	0x00000063
    cf78:	682f2e2e 	.word	0x682f2e2e
    cf7c:	732f6c61 	.word	0x732f6c61
    cf80:	682f6372 	.word	0x682f6372
    cf84:	635f6c61 	.word	0x635f6c61
    cf88:	615f6e61 	.word	0x615f6e61
    cf8c:	636e7973 	.word	0x636e7973
    cf90:	0000632e 	.word	0x0000632e
    cf94:	682f2e2e 	.word	0x682f2e2e
    cf98:	732f6c61 	.word	0x732f6c61
    cf9c:	682f6372 	.word	0x682f6372
    cfa0:	635f6c61 	.word	0x635f6c61
    cfa4:	735f6372 	.word	0x735f6372
    cfa8:	2e636e79 	.word	0x2e636e79
    cfac:	00000063 	.word	0x00000063
    cfb0:	682f2e2e 	.word	0x682f2e2e
    cfb4:	732f6c61 	.word	0x732f6c61
    cfb8:	682f6372 	.word	0x682f6372
    cfbc:	695f6c61 	.word	0x695f6c61
    cfc0:	6d5f6332 	.word	0x6d5f6332
    cfc4:	6e79735f 	.word	0x6e79735f
    cfc8:	00632e63 	.word	0x00632e63
    cfcc:	682f2e2e 	.word	0x682f2e2e
    cfd0:	732f6c61 	.word	0x732f6c61
    cfd4:	682f6372 	.word	0x682f6372
    cfd8:	705f6c61 	.word	0x705f6c61
    cfdc:	632e6d77 	.word	0x632e6d77
    cfe0:	00000000 	.word	0x00000000
    cfe4:	682f2e2e 	.word	0x682f2e2e
    cfe8:	732f6c61 	.word	0x732f6c61
    cfec:	682f6372 	.word	0x682f6372
    cff0:	715f6c61 	.word	0x715f6c61
    cff4:	5f697073 	.word	0x5f697073
    cff8:	636e7973 	.word	0x636e7973
    cffc:	0000632e 	.word	0x0000632e
    d000:	682f2e2e 	.word	0x682f2e2e
    d004:	732f6c61 	.word	0x732f6c61
    d008:	682f6372 	.word	0x682f6372
    d00c:	735f6c61 	.word	0x735f6c61
    d010:	6d5f6970 	.word	0x6d5f6970
    d014:	6e79735f 	.word	0x6e79735f
    d018:	00632e63 	.word	0x00632e63
    d01c:	682f2e2e 	.word	0x682f2e2e
    d020:	732f6c61 	.word	0x732f6c61
    d024:	682f6372 	.word	0x682f6372
    d028:	745f6c61 	.word	0x745f6c61
    d02c:	72656d69 	.word	0x72656d69
    d030:	0000632e 	.word	0x0000632e
    d034:	682f2e2e 	.word	0x682f2e2e
    d038:	752f6c61 	.word	0x752f6c61
    d03c:	736c6974 	.word	0x736c6974
    d040:	6372732f 	.word	0x6372732f
    d044:	6974752f 	.word	0x6974752f
    d048:	6c5f736c 	.word	0x6c5f736c
    d04c:	2e747369 	.word	0x2e747369
    d050:	00000063 	.word	0x00000063

0000d054 <_map>:
    d054:	00000000 00000040 00000001 00000021     ....@.......!...
    d064:	00000003 00000003 00000004 00000004     ................
    d074:	00000005 00000005 00000006 00000056     ............V...
    d084:	00000007 00000057 00000008 00000028     ....W.......(...
    d094:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
    d0a4:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0000d0b4 <user_mux_confs>:
    d0b4:	00020100 00000000 00000000 00000000     ................
	...

0000d0f8 <channel_confs>:
    d0f8:	0660065f 00000000 00000000 00000000     _.`.............
	...

0000d138 <interrupt_cfg>:
	...
    d1b8:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    d1c8:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    d1d8:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    d1e8:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    d1f8:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    d208:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    d218:	43000400 43000800 43000c00              ...C...C...C

0000d224 <sercomspi_regs>:
    d224:	0020000c 00020000 00000000 01ff0001     .. .............
    d234:	30000c04 02000000 00000000 ff001700     ...0............
    d244:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    d254:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    d264:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    d274:	43001400 43001800                       ...C...C

0000d27c <_usb_ep_cfgs>:
    d27c:	20000868 00000000 00000040 200008a8     h.. ....@...... 
    d28c:	200008e8 00400040 20000928 20000968     ... @.@.(.. h.. 
    d29c:	00400040 200009a8 200009e8 00400040     @.@.... ... @.@.
    d2ac:	20000a28 20000a68 00400040 00000804     (.. h.. @.@.....
    d2bc:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    d2cc:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    d2dc:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    d2ec:	7361625f 00682e65                       _base.h.

0000d2f4 <n25q256a_interface>:
    d2f4:	0000abd9 0000ac7d 0000ad8d 0000af45     ....}.......E...
    d304:	0000afd5 752f2e2e 642f6273 63697665     ....../usb/devic
    d314:	73752f65 2e636462 00000063 682f2e2e     e/usbdc.c...../h
    d324:	732f6c61 682f6372 695f6c61 00632e6f     al/src/hal_io.c.

0000d334 <_global_impure_ptr>:
    d334:	20000210                                ... 

0000d338 <_init>:
    d338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d33a:	bf00      	nop
    d33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d33e:	bc08      	pop	{r3}
    d340:	469e      	mov	lr, r3
    d342:	4770      	bx	lr

0000d344 <__init_array_start>:
    d344:	0000cec9 	.word	0x0000cec9

0000d348 <__frame_dummy_init_array_entry>:
    d348:	00000289 00000399 00000499 0000c6c9     ................
    d358:	0000cafd                                ....

0000d35c <_fini>:
    d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d35e:	bf00      	nop
    d360:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d362:	bc08      	pop	{r3}
    d364:	469e      	mov	lr, r3
    d366:	4770      	bx	lr

0000d368 <__fini_array_start>:
    d368:	00000265 	.word	0x00000265
