
CortexModultTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000059ac  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000059ac  000059ac  000159ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000004dc  20000000  000059b4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000051c  200004dc  00005e90  000204dc  2**2
                  ALLOC
  4 .stack        00002000  200009f8  000063ac  000204dc  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000204dc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020504  2**0
                  CONTENTS, READONLY
  7 .debug_info   000382c6  00000000  00000000  0002055d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000490b  00000000  00000000  00058823  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f2bd  00000000  00000000  0005d12e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001088  00000000  00000000  0006c3eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000015c0  00000000  00000000  0006d473  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001e1ea  00000000  00000000  0006ea33  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00015a10  00000000  00000000  0008cc1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008dd24  00000000  00000000  000a262d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000032c4  00000000  00000000  00130354  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 29 00 20 b9 04 00 00 b5 04 00 00 b5 04 00 00     .). ............
	...
      2c:	b5 04 00 00 00 00 00 00 00 00 00 00 b5 04 00 00     ................
      3c:	b5 04 00 00 b5 04 00 00 b5 04 00 00 b5 04 00 00     ................
      4c:	b5 04 00 00 b5 04 00 00 b5 04 00 00 b5 04 00 00     ................
      5c:	b5 04 00 00 b5 04 00 00 b5 04 00 00 b5 04 00 00     ................
      6c:	b5 04 00 00 b5 04 00 00 b5 04 00 00 b5 04 00 00     ................
      7c:	bd 15 00 00 b5 04 00 00 b5 04 00 00 39 1a 00 00     ............9...
      8c:	71 1a 00 00 85 1a 00 00 b5 04 00 00 b5 04 00 00     q...............
      9c:	b5 04 00 00 b5 04 00 00 b5 04 00 00 b5 04 00 00     ................
      ac:	b5 04 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004dc 	.word	0x200004dc
      d4:	00000000 	.word	0x00000000
      d8:	000059b4 	.word	0x000059b4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004e0 	.word	0x200004e0
     108:	000059b4 	.word	0x000059b4
     10c:	000059b4 	.word	0x000059b4
     110:	00000000 	.word	0x00000000

00000114 <_ZN17Application_ClassD1Ev>:
} //Application_Class

// default destructor
Application_Class::~Application_Class()
{
} //~Application_Class
     114:	4770      	bx	lr
	...

00000118 <_ZN17Application_Class4InitEv>:

void Application_Class::Init(void){
     118:	b570      	push	{r4, r5, r6, lr}
     11a:	0004      	movs	r4, r0
	lighter.Init();
     11c:	4d07      	ldr	r5, [pc, #28]	; (13c <_ZN17Application_Class4InitEv+0x24>)
     11e:	0028      	movs	r0, r5
     120:	4b07      	ldr	r3, [pc, #28]	; (140 <_ZN17Application_Class4InitEv+0x28>)
     122:	4798      	blx	r3
	flash.Init();
     124:	4807      	ldr	r0, [pc, #28]	; (144 <_ZN17Application_Class4InitEv+0x2c>)
     126:	4b08      	ldr	r3, [pc, #32]	; (148 <_ZN17Application_Class4InitEv+0x30>)
     128:	4798      	blx	r3
	totalPins=lighter.GetTotalPins();
     12a:	0028      	movs	r0, r5
     12c:	4b07      	ldr	r3, [pc, #28]	; (14c <_ZN17Application_Class4InitEv+0x34>)
     12e:	4798      	blx	r3
     130:	2322      	movs	r3, #34	; 0x22
     132:	54e0      	strb	r0, [r4, r3]
	addressCounter=0;
     134:	2300      	movs	r3, #0
     136:	6263      	str	r3, [r4, #36]	; 0x24
}
     138:	bd70      	pop	{r4, r5, r6, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	20000544 	.word	0x20000544
     140:	00001bcd 	.word	0x00001bcd
     144:	2000087c 	.word	0x2000087c
     148:	00004885 	.word	0x00004885
     14c:	00002e0d 	.word	0x00002e0d

00000150 <_ZN17Application_Class15IsDataCorruptedEv>:
		addressCounter=0;
		lighter.request=false;
		lighter.onLila=false;
		return is_corrupted;
}
bool	Application_Class::IsDataCorrupted(void){
     150:	b510      	push	{r4, lr}
	is_corrupted=false;
     152:	2200      	movs	r2, #0
     154:	2320      	movs	r3, #32
     156:	54c2      	strb	r2, [r0, r3]
	for (int i = 0; i < ISSI_BUFFER_SIZE; i++) {
		if (tx_buffer[i] != rx_buffer[i]) {
     158:	7802      	ldrb	r2, [r0, #0]
     15a:	7c03      	ldrb	r3, [r0, #16]
     15c:	429a      	cmp	r2, r3
     15e:	d10c      	bne.n	17a <_ZN17Application_Class15IsDataCorruptedEv+0x2a>
     160:	1c43      	adds	r3, r0, #1
     162:	0004      	movs	r4, r0
     164:	3410      	adds	r4, #16
     166:	7819      	ldrb	r1, [r3, #0]
     168:	7c1a      	ldrb	r2, [r3, #16]
     16a:	4291      	cmp	r1, r2
     16c:	d105      	bne.n	17a <_ZN17Application_Class15IsDataCorruptedEv+0x2a>
     16e:	3301      	adds	r3, #1
	for (int i = 0; i < ISSI_BUFFER_SIZE; i++) {
     170:	42a3      	cmp	r3, r4
     172:	d1f8      	bne.n	166 <_ZN17Application_Class15IsDataCorruptedEv+0x16>
			is_corrupted=true;
			break;
		}
		
	}
	return	is_corrupted;
     174:	2320      	movs	r3, #32
     176:	5cc0      	ldrb	r0, [r0, r3]
}
     178:	bd10      	pop	{r4, pc}
			is_corrupted=true;
     17a:	2201      	movs	r2, #1
     17c:	2320      	movs	r3, #32
     17e:	54c2      	strb	r2, [r0, r3]
			break;
     180:	e7f8      	b.n	174 <_ZN17Application_Class15IsDataCorruptedEv+0x24>
	...

00000184 <_ZN17Application_Class12FillTXBufferEv>:
	flash.ReadAddress(rx_buffer,addressCounter,ISSI_BUFFER_SIZE);
//	delay_ms(ISSI_BUFFER_SIZE/2);
	NextAddress();
	return	IsDataCorrupted();
}
uint8_t	Application_Class::FillTXBuffer(void){
     184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     186:	0007      	movs	r7, r0
     188:	0004      	movs	r4, r0
     18a:	0006      	movs	r6, r0
     18c:	3610      	adds	r6, #16
	for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
		tx_buffer[i] = (uint8_t)rand();
     18e:	4d04      	ldr	r5, [pc, #16]	; (1a0 <_ZN17Application_Class12FillTXBufferEv+0x1c>)
     190:	47a8      	blx	r5
     192:	7020      	strb	r0, [r4, #0]
     194:	3401      	adds	r4, #1
	for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
     196:	42b4      	cmp	r4, r6
     198:	d1fa      	bne.n	190 <_ZN17Application_Class12FillTXBufferEv+0xc>
	}
	return	tx_buffer[ISSI_BUFFER_SIZE-1];
     19a:	7bf8      	ldrb	r0, [r7, #15]
}
     19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     19e:	46c0      	nop			; (mov r8, r8)
     1a0:	00005591 	.word	0x00005591

000001a4 <_ZN17Application_Class11NextAddressEv>:
uint32_t	Application_Class::NextAddress(void){
     1a4:	0002      	movs	r2, r0
	addressCounter= (addressCounter+ISSI_BUFFER_SIZE)%TEST_FLASH_SIZE;
     1a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
     1a8:	3310      	adds	r3, #16
     1aa:	041b      	lsls	r3, r3, #16
     1ac:	0c18      	lsrs	r0, r3, #16
     1ae:	6250      	str	r0, [r2, #36]	; 0x24
	return	addressCounter;
}
     1b0:	4770      	bx	lr
	...

000001b4 <_ZN17Application_Class15FastMemoryCheckEv>:
bool	Application_Class::FastMemoryCheck(void){
     1b4:	b570      	push	{r4, r5, r6, lr}
     1b6:	0004      	movs	r4, r0
	FillTXBuffer();
     1b8:	4b0b      	ldr	r3, [pc, #44]	; (1e8 <_ZN17Application_Class15FastMemoryCheckEv+0x34>)
     1ba:	4798      	blx	r3
	flash.WriteAddress(tx_buffer,addressCounter,ISSI_BUFFER_SIZE);
     1bc:	4d0b      	ldr	r5, [pc, #44]	; (1ec <_ZN17Application_Class15FastMemoryCheckEv+0x38>)
     1be:	2310      	movs	r3, #16
     1c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
     1c2:	0021      	movs	r1, r4
     1c4:	0028      	movs	r0, r5
     1c6:	4e0a      	ldr	r6, [pc, #40]	; (1f0 <_ZN17Application_Class15FastMemoryCheckEv+0x3c>)
     1c8:	47b0      	blx	r6
	flash.ReadAddress(rx_buffer,addressCounter,ISSI_BUFFER_SIZE);
     1ca:	0021      	movs	r1, r4
     1cc:	3110      	adds	r1, #16
     1ce:	2310      	movs	r3, #16
     1d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
     1d2:	0028      	movs	r0, r5
     1d4:	4d07      	ldr	r5, [pc, #28]	; (1f4 <_ZN17Application_Class15FastMemoryCheckEv+0x40>)
     1d6:	47a8      	blx	r5
	NextAddress();
     1d8:	0020      	movs	r0, r4
     1da:	4b07      	ldr	r3, [pc, #28]	; (1f8 <_ZN17Application_Class15FastMemoryCheckEv+0x44>)
     1dc:	4798      	blx	r3
	return	IsDataCorrupted();
     1de:	0020      	movs	r0, r4
     1e0:	4b06      	ldr	r3, [pc, #24]	; (1fc <_ZN17Application_Class15FastMemoryCheckEv+0x48>)
     1e2:	4798      	blx	r3
}
     1e4:	bd70      	pop	{r4, r5, r6, pc}
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	00000185 	.word	0x00000185
     1ec:	2000087c 	.word	0x2000087c
     1f0:	00004d69 	.word	0x00004d69
     1f4:	00004e5d 	.word	0x00004e5d
     1f8:	000001a5 	.word	0x000001a5
     1fc:	00000151 	.word	0x00000151

00000200 <_ZN17Application_Class16CheckFlashMemoryEv>:
bool	Application_Class::CheckFlashMemory(void){
     200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     202:	0004      	movs	r4, r0
		lighter.request=false;
     204:	4b48      	ldr	r3, [pc, #288]	; (328 <_ZN17Application_Class16CheckFlashMemoryEv+0x128>)
     206:	2500      	movs	r5, #0
     208:	22c2      	movs	r2, #194	; 0xc2
     20a:	0052      	lsls	r2, r2, #1
     20c:	549d      	strb	r5, [r3, r2]
		lighter.onLila=true;
     20e:	2101      	movs	r1, #1
     210:	2286      	movs	r2, #134	; 0x86
     212:	32ff      	adds	r2, #255	; 0xff
     214:	5499      	strb	r1, [r3, r2]
		FastMemoryCheck();
     216:	4e45      	ldr	r6, [pc, #276]	; (32c <_ZN17Application_Class16CheckFlashMemoryEv+0x12c>)
     218:	47b0      	blx	r6
		FastMemoryCheck();
     21a:	0020      	movs	r0, r4
     21c:	47b0      	blx	r6
		errorCounter=0;
     21e:	62a5      	str	r5, [r4, #40]	; 0x28
		addressCounter=0; succesCounter=0;
     220:	6265      	str	r5, [r4, #36]	; 0x24
     222:	62e5      	str	r5, [r4, #44]	; 0x2c
		succesLimit=(uint32_t)(TEST_FLASH_SIZE/ISSI_BUFFER_SIZE);
     224:	2380      	movs	r3, #128	; 0x80
     226:	015b      	lsls	r3, r3, #5
     228:	6323      	str	r3, [r4, #48]	; 0x30
		flash.eraseFlash(0,TEST_FLASH_SIZE*ISSI_BUFFER_SIZE*1);
     22a:	2280      	movs	r2, #128	; 0x80
     22c:	0352      	lsls	r2, r2, #13
     22e:	2100      	movs	r1, #0
     230:	483f      	ldr	r0, [pc, #252]	; (330 <_ZN17Application_Class16CheckFlashMemoryEv+0x130>)
     232:	4b40      	ldr	r3, [pc, #256]	; (334 <_ZN17Application_Class16CheckFlashMemoryEv+0x134>)
     234:	4798      	blx	r3
		while (app.FastMemoryCheck());
     236:	4e40      	ldr	r6, [pc, #256]	; (338 <_ZN17Application_Class16CheckFlashMemoryEv+0x138>)
     238:	4d3c      	ldr	r5, [pc, #240]	; (32c <_ZN17Application_Class16CheckFlashMemoryEv+0x12c>)
     23a:	0030      	movs	r0, r6
     23c:	47a8      	blx	r5
     23e:	2800      	cmp	r0, #0
     240:	d1fb      	bne.n	23a <_ZN17Application_Class16CheckFlashMemoryEv+0x3a>
			for (int k=2;k<totalPins;k++)
     242:	2322      	movs	r3, #34	; 0x22
     244:	5ce3      	ldrb	r3, [r4, r3]
     246:	2b02      	cmp	r3, #2
     248:	dd49      	ble.n	2de <_ZN17Application_Class16CheckFlashMemoryEv+0xde>
     24a:	2502      	movs	r5, #2
				if (lighter.IsBlue(k))
     24c:	4f3b      	ldr	r7, [pc, #236]	; (33c <_ZN17Application_Class16CheckFlashMemoryEv+0x13c>)
     24e:	e022      	b.n	296 <_ZN17Application_Class16CheckFlashMemoryEv+0x96>
						FillTXBuffer();
     250:	0020      	movs	r0, r4
     252:	4b3b      	ldr	r3, [pc, #236]	; (340 <_ZN17Application_Class16CheckFlashMemoryEv+0x140>)
     254:	4798      	blx	r3
						flash.WriteAddress(tx_buffer,addressCounter,ISSI_BUFFER_SIZE);
     256:	2310      	movs	r3, #16
     258:	6a62      	ldr	r2, [r4, #36]	; 0x24
     25a:	0021      	movs	r1, r4
     25c:	4834      	ldr	r0, [pc, #208]	; (330 <_ZN17Application_Class16CheckFlashMemoryEv+0x130>)
     25e:	4e39      	ldr	r6, [pc, #228]	; (344 <_ZN17Application_Class16CheckFlashMemoryEv+0x144>)
     260:	47b0      	blx	r6
						if (!lighter.PowerOnLila(k))
     262:	0029      	movs	r1, r5
     264:	4830      	ldr	r0, [pc, #192]	; (328 <_ZN17Application_Class16CheckFlashMemoryEv+0x128>)
     266:	4b38      	ldr	r3, [pc, #224]	; (348 <_ZN17Application_Class16CheckFlashMemoryEv+0x148>)
     268:	4798      	blx	r3
     26a:	2800      	cmp	r0, #0
     26c:	d037      	beq.n	2de <_ZN17Application_Class16CheckFlashMemoryEv+0xde>
						flash.ReadAddress(rx_buffer,addressCounter,ISSI_BUFFER_SIZE);
     26e:	0021      	movs	r1, r4
     270:	3110      	adds	r1, #16
     272:	2310      	movs	r3, #16
     274:	6a62      	ldr	r2, [r4, #36]	; 0x24
     276:	482e      	ldr	r0, [pc, #184]	; (330 <_ZN17Application_Class16CheckFlashMemoryEv+0x130>)
     278:	4e34      	ldr	r6, [pc, #208]	; (34c <_ZN17Application_Class16CheckFlashMemoryEv+0x14c>)
     27a:	47b0      	blx	r6
						succesCounter++;
     27c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     27e:	3301      	adds	r3, #1
     280:	62e3      	str	r3, [r4, #44]	; 0x2c
     282:	e028      	b.n	2d6 <_ZN17Application_Class16CheckFlashMemoryEv+0xd6>
					lighter.PowerOffPin(k);
     284:	0029      	movs	r1, r5
     286:	4828      	ldr	r0, [pc, #160]	; (328 <_ZN17Application_Class16CheckFlashMemoryEv+0x128>)
     288:	4b31      	ldr	r3, [pc, #196]	; (350 <_ZN17Application_Class16CheckFlashMemoryEv+0x150>)
     28a:	4798      	blx	r3
			for (int k=2;k<totalPins;k++)
     28c:	3501      	adds	r5, #1
     28e:	2322      	movs	r3, #34	; 0x22
     290:	5ce3      	ldrb	r3, [r4, r3]
     292:	42ab      	cmp	r3, r5
     294:	dd23      	ble.n	2de <_ZN17Application_Class16CheckFlashMemoryEv+0xde>
				if (lighter.IsBlue(k))
     296:	b2e9      	uxtb	r1, r5
     298:	4823      	ldr	r0, [pc, #140]	; (328 <_ZN17Application_Class16CheckFlashMemoryEv+0x128>)
     29a:	47b8      	blx	r7
     29c:	2800      	cmp	r0, #0
     29e:	d0f1      	beq.n	284 <_ZN17Application_Class16CheckFlashMemoryEv+0x84>
					if (IsDataCorrupted())
     2a0:	0020      	movs	r0, r4
     2a2:	4b2c      	ldr	r3, [pc, #176]	; (354 <_ZN17Application_Class16CheckFlashMemoryEv+0x154>)
     2a4:	4798      	blx	r3
     2a6:	2800      	cmp	r0, #0
     2a8:	d0d2      	beq.n	250 <_ZN17Application_Class16CheckFlashMemoryEv+0x50>
						flash.WriteAddress(tx_buffer,addressCounter,ISSI_BUFFER_SIZE);
     2aa:	2310      	movs	r3, #16
     2ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
     2ae:	0021      	movs	r1, r4
     2b0:	481f      	ldr	r0, [pc, #124]	; (330 <_ZN17Application_Class16CheckFlashMemoryEv+0x130>)
     2b2:	4e24      	ldr	r6, [pc, #144]	; (344 <_ZN17Application_Class16CheckFlashMemoryEv+0x144>)
     2b4:	47b0      	blx	r6
						if (!lighter.PowerOnFail(k))
     2b6:	0029      	movs	r1, r5
     2b8:	481b      	ldr	r0, [pc, #108]	; (328 <_ZN17Application_Class16CheckFlashMemoryEv+0x128>)
     2ba:	4b27      	ldr	r3, [pc, #156]	; (358 <_ZN17Application_Class16CheckFlashMemoryEv+0x158>)
     2bc:	4798      	blx	r3
     2be:	2800      	cmp	r0, #0
     2c0:	d00d      	beq.n	2de <_ZN17Application_Class16CheckFlashMemoryEv+0xde>
						flash.ReadAddress(rx_buffer,addressCounter,ISSI_BUFFER_SIZE);
     2c2:	0021      	movs	r1, r4
     2c4:	3110      	adds	r1, #16
     2c6:	2310      	movs	r3, #16
     2c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
     2ca:	4819      	ldr	r0, [pc, #100]	; (330 <_ZN17Application_Class16CheckFlashMemoryEv+0x130>)
     2cc:	4e1f      	ldr	r6, [pc, #124]	; (34c <_ZN17Application_Class16CheckFlashMemoryEv+0x14c>)
     2ce:	47b0      	blx	r6
						errorCounter++;
     2d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     2d2:	3301      	adds	r3, #1
     2d4:	62a3      	str	r3, [r4, #40]	; 0x28
					NextAddress();
     2d6:	0020      	movs	r0, r4
     2d8:	4b20      	ldr	r3, [pc, #128]	; (35c <_ZN17Application_Class16CheckFlashMemoryEv+0x15c>)
     2da:	4798      	blx	r3
     2dc:	e7d6      	b.n	28c <_ZN17Application_Class16CheckFlashMemoryEv+0x8c>
		}while((!lighter.changeModeRequest)&&(succesCounter<succesLimit)&&(errorCounter<TEST_FLASH_SIZE));
     2de:	23bc      	movs	r3, #188	; 0xbc
     2e0:	005b      	lsls	r3, r3, #1
     2e2:	4a11      	ldr	r2, [pc, #68]	; (328 <_ZN17Application_Class16CheckFlashMemoryEv+0x128>)
     2e4:	5cd3      	ldrb	r3, [r2, r3]
     2e6:	2b00      	cmp	r3, #0
     2e8:	d10b      	bne.n	302 <_ZN17Application_Class16CheckFlashMemoryEv+0x102>
     2ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     2ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
     2ee:	4293      	cmp	r3, r2
     2f0:	d207      	bcs.n	302 <_ZN17Application_Class16CheckFlashMemoryEv+0x102>
     2f2:	4b1b      	ldr	r3, [pc, #108]	; (360 <_ZN17Application_Class16CheckFlashMemoryEv+0x160>)
     2f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     2f6:	429a      	cmp	r2, r3
     2f8:	d9a3      	bls.n	242 <_ZN17Application_Class16CheckFlashMemoryEv+0x42>
			modus=1;
     2fa:	2201      	movs	r2, #1
     2fc:	2321      	movs	r3, #33	; 0x21
     2fe:	54e2      	strb	r2, [r4, r3]
     300:	e006      	b.n	310 <_ZN17Application_Class16CheckFlashMemoryEv+0x110>
		if (errorCounter>=TEST_FLASH_SIZE)
     302:	4b17      	ldr	r3, [pc, #92]	; (360 <_ZN17Application_Class16CheckFlashMemoryEv+0x160>)
     304:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     306:	429a      	cmp	r2, r3
     308:	d8f7      	bhi.n	2fa <_ZN17Application_Class16CheckFlashMemoryEv+0xfa>
			modus=5;	
     30a:	2205      	movs	r2, #5
     30c:	2321      	movs	r3, #33	; 0x21
     30e:	54e2      	strb	r2, [r4, r3]
		addressCounter=0;
     310:	2300      	movs	r3, #0
     312:	6263      	str	r3, [r4, #36]	; 0x24
		lighter.request=false;
     314:	4a04      	ldr	r2, [pc, #16]	; (328 <_ZN17Application_Class16CheckFlashMemoryEv+0x128>)
     316:	21c2      	movs	r1, #194	; 0xc2
     318:	0049      	lsls	r1, r1, #1
     31a:	5453      	strb	r3, [r2, r1]
		lighter.onLila=false;
     31c:	2186      	movs	r1, #134	; 0x86
     31e:	31ff      	adds	r1, #255	; 0xff
     320:	5453      	strb	r3, [r2, r1]
		return is_corrupted;
     322:	3320      	adds	r3, #32
     324:	5ce0      	ldrb	r0, [r4, r3]
}
     326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     328:	20000544 	.word	0x20000544
     32c:	000001b5 	.word	0x000001b5
     330:	2000087c 	.word	0x2000087c
     334:	00004a55 	.word	0x00004a55
     338:	200004f8 	.word	0x200004f8
     33c:	00003823 	.word	0x00003823
     340:	00000185 	.word	0x00000185
     344:	00004d69 	.word	0x00004d69
     348:	00002901 	.word	0x00002901
     34c:	00004e5d 	.word	0x00004e5d
     350:	00002b51 	.word	0x00002b51
     354:	00000151 	.word	0x00000151
     358:	00002801 	.word	0x00002801
     35c:	000001a5 	.word	0x000001a5
     360:	0000ffff 	.word	0x0000ffff

00000364 <_ZN17Application_Class9RunOnModeEv>:
void	Application_Class::RunOnMode(void){
     364:	b510      	push	{r4, lr}
	switch (modus)
     366:	2321      	movs	r3, #33	; 0x21
     368:	5cc2      	ldrb	r2, [r0, r3]
     36a:	2a05      	cmp	r2, #5
     36c:	d81f      	bhi.n	3ae <_ZN17Application_Class9RunOnModeEv+0x4a>
     36e:	0093      	lsls	r3, r2, #2
     370:	4a11      	ldr	r2, [pc, #68]	; (3b8 <_ZN17Application_Class9RunOnModeEv+0x54>)
     372:	58d3      	ldr	r3, [r2, r3]
     374:	469f      	mov	pc, r3
		lighter.WhiteWave();
     376:	4811      	ldr	r0, [pc, #68]	; (3bc <_ZN17Application_Class9RunOnModeEv+0x58>)
     378:	4b11      	ldr	r3, [pc, #68]	; (3c0 <_ZN17Application_Class9RunOnModeEv+0x5c>)
     37a:	4798      	blx	r3
}
     37c:	bd10      	pop	{r4, pc}
		lighter.RedWave();
     37e:	480f      	ldr	r0, [pc, #60]	; (3bc <_ZN17Application_Class9RunOnModeEv+0x58>)
     380:	4b10      	ldr	r3, [pc, #64]	; (3c4 <_ZN17Application_Class9RunOnModeEv+0x60>)
     382:	4798      	blx	r3
		break;
     384:	e7fa      	b.n	37c <_ZN17Application_Class9RunOnModeEv+0x18>
		lighter.BlueWave();
     386:	480d      	ldr	r0, [pc, #52]	; (3bc <_ZN17Application_Class9RunOnModeEv+0x58>)
     388:	4b0f      	ldr	r3, [pc, #60]	; (3c8 <_ZN17Application_Class9RunOnModeEv+0x64>)
     38a:	4798      	blx	r3
		break;
     38c:	e7f6      	b.n	37c <_ZN17Application_Class9RunOnModeEv+0x18>
		lighter.GreenWave();
     38e:	480b      	ldr	r0, [pc, #44]	; (3bc <_ZN17Application_Class9RunOnModeEv+0x58>)
     390:	4b0e      	ldr	r3, [pc, #56]	; (3cc <_ZN17Application_Class9RunOnModeEv+0x68>)
     392:	4798      	blx	r3
		break;
     394:	e7f2      	b.n	37c <_ZN17Application_Class9RunOnModeEv+0x18>
		lighter.stepTime=COUNTER_TIME;
     396:	2104      	movs	r1, #4
     398:	23c0      	movs	r3, #192	; 0xc0
     39a:	005b      	lsls	r3, r3, #1
     39c:	4a07      	ldr	r2, [pc, #28]	; (3bc <_ZN17Application_Class9RunOnModeEv+0x58>)
     39e:	50d1      	str	r1, [r2, r3]
		CheckFlashMemory();
     3a0:	4b0b      	ldr	r3, [pc, #44]	; (3d0 <_ZN17Application_Class9RunOnModeEv+0x6c>)
     3a2:	4798      	blx	r3
		break;
     3a4:	e7ea      	b.n	37c <_ZN17Application_Class9RunOnModeEv+0x18>
			lighter.MagentaWave();
     3a6:	4805      	ldr	r0, [pc, #20]	; (3bc <_ZN17Application_Class9RunOnModeEv+0x58>)
     3a8:	4b0a      	ldr	r3, [pc, #40]	; (3d4 <_ZN17Application_Class9RunOnModeEv+0x70>)
     3aa:	4798      	blx	r3
		break;
     3ac:	e7e6      	b.n	37c <_ZN17Application_Class9RunOnModeEv+0x18>
			lighter.WhiteWave();
     3ae:	4803      	ldr	r0, [pc, #12]	; (3bc <_ZN17Application_Class9RunOnModeEv+0x58>)
     3b0:	4b03      	ldr	r3, [pc, #12]	; (3c0 <_ZN17Application_Class9RunOnModeEv+0x5c>)
     3b2:	4798      	blx	r3
}
     3b4:	e7e2      	b.n	37c <_ZN17Application_Class9RunOnModeEv+0x18>
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	0000571c 	.word	0x0000571c
     3bc:	20000544 	.word	0x20000544
     3c0:	000020d9 	.word	0x000020d9
     3c4:	00001e65 	.word	0x00001e65
     3c8:	00001f29 	.word	0x00001f29
     3cc:	00001da1 	.word	0x00001da1
     3d0:	00000201 	.word	0x00000201
     3d4:	00001fed 	.word	0x00001fed

000003d8 <_ZN17Application_Class11ChangeModusEv>:
void	Application_Class::ChangeModus(void){
     3d8:	b510      	push	{r4, lr}
     3da:	0004      	movs	r4, r0
	lighter.RestartLedModus();
     3dc:	480d      	ldr	r0, [pc, #52]	; (414 <_ZN17Application_Class11ChangeModusEv+0x3c>)
     3de:	4b0e      	ldr	r3, [pc, #56]	; (418 <_ZN17Application_Class11ChangeModusEv+0x40>)
     3e0:	4798      	blx	r3
	modus=(modus+1)%NUMBER_STATES;
     3e2:	2321      	movs	r3, #33	; 0x21
     3e4:	5ce0      	ldrb	r0, [r4, r3]
     3e6:	3001      	adds	r0, #1
     3e8:	2106      	movs	r1, #6
     3ea:	4b0c      	ldr	r3, [pc, #48]	; (41c <_ZN17Application_Class11ChangeModusEv+0x44>)
     3ec:	4798      	blx	r3
	if (modus>NUMBER_STATES)
     3ee:	b2cb      	uxtb	r3, r1
     3f0:	2b06      	cmp	r3, #6
     3f2:	dc0b      	bgt.n	40c <_ZN17Application_Class11ChangeModusEv+0x34>
	modus=(modus+1)%NUMBER_STATES;
     3f4:	2321      	movs	r3, #33	; 0x21
     3f6:	54e1      	strb	r1, [r4, r3]
	while(!lighter.restarted);
     3f8:	4906      	ldr	r1, [pc, #24]	; (414 <_ZN17Application_Class11ChangeModusEv+0x3c>)
     3fa:	2276      	movs	r2, #118	; 0x76
     3fc:	32ff      	adds	r2, #255	; 0xff
     3fe:	5c8b      	ldrb	r3, [r1, r2]
     400:	2b00      	cmp	r3, #0
     402:	d0fc      	beq.n	3fe <_ZN17Application_Class11ChangeModusEv+0x26>
	RunOnMode();
     404:	0020      	movs	r0, r4
     406:	4b06      	ldr	r3, [pc, #24]	; (420 <_ZN17Application_Class11ChangeModusEv+0x48>)
     408:	4798      	blx	r3
}
     40a:	bd10      	pop	{r4, pc}
		modus=0;
     40c:	2200      	movs	r2, #0
     40e:	2321      	movs	r3, #33	; 0x21
     410:	54e2      	strb	r2, [r4, r3]
     412:	e7f1      	b.n	3f8 <_ZN17Application_Class11ChangeModusEv+0x20>
     414:	20000544 	.word	0x20000544
     418:	00001d35 	.word	0x00001d35
     41c:	00005455 	.word	0x00005455
     420:	00000365 	.word	0x00000365

00000424 <_ZN17Application_Class3RunEv>:
void	Application_Class::Run(void){
     424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     426:	0005      	movs	r5, r0
	lighter.ClearAll();
     428:	4813      	ldr	r0, [pc, #76]	; (478 <_ZN17Application_Class3RunEv+0x54>)
     42a:	4b14      	ldr	r3, [pc, #80]	; (47c <_ZN17Application_Class3RunEv+0x58>)
     42c:	4798      	blx	r3
		if (nmi.IsButtonPressed())
     42e:	4c14      	ldr	r4, [pc, #80]	; (480 <_ZN17Application_Class3RunEv+0x5c>)
     430:	4e14      	ldr	r6, [pc, #80]	; (484 <_ZN17Application_Class3RunEv+0x60>)
			if (lighter.changeModeRequest){
     432:	4f11      	ldr	r7, [pc, #68]	; (478 <_ZN17Application_Class3RunEv+0x54>)
     434:	e013      	b.n	45e <_ZN17Application_Class3RunEv+0x3a>
			nmi.OnPressed();
     436:	4812      	ldr	r0, [pc, #72]	; (480 <_ZN17Application_Class3RunEv+0x5c>)
     438:	4b13      	ldr	r3, [pc, #76]	; (488 <_ZN17Application_Class3RunEv+0x64>)
     43a:	4798      	blx	r3
			if (!lighter.changeModeRequest)
     43c:	23bc      	movs	r3, #188	; 0xbc
     43e:	005b      	lsls	r3, r3, #1
     440:	4a0d      	ldr	r2, [pc, #52]	; (478 <_ZN17Application_Class3RunEv+0x54>)
     442:	5cd3      	ldrb	r3, [r2, r3]
     444:	2b00      	cmp	r3, #0
     446:	d103      	bne.n	450 <_ZN17Application_Class3RunEv+0x2c>
				RunOnMode();
     448:	0028      	movs	r0, r5
     44a:	4b10      	ldr	r3, [pc, #64]	; (48c <_ZN17Application_Class3RunEv+0x68>)
     44c:	4798      	blx	r3
     44e:	e006      	b.n	45e <_ZN17Application_Class3RunEv+0x3a>
				ChangeModus();
     450:	0028      	movs	r0, r5
     452:	4b0f      	ldr	r3, [pc, #60]	; (490 <_ZN17Application_Class3RunEv+0x6c>)
     454:	4798      	blx	r3
     456:	e002      	b.n	45e <_ZN17Application_Class3RunEv+0x3a>
				RunOnMode();
     458:	0028      	movs	r0, r5
     45a:	4b0c      	ldr	r3, [pc, #48]	; (48c <_ZN17Application_Class3RunEv+0x68>)
     45c:	4798      	blx	r3
		if (nmi.IsButtonPressed())
     45e:	0020      	movs	r0, r4
     460:	47b0      	blx	r6
     462:	2800      	cmp	r0, #0
     464:	d1e7      	bne.n	436 <_ZN17Application_Class3RunEv+0x12>
			if (lighter.changeModeRequest){
     466:	23bc      	movs	r3, #188	; 0xbc
     468:	005b      	lsls	r3, r3, #1
     46a:	5cfb      	ldrb	r3, [r7, r3]
     46c:	2b00      	cmp	r3, #0
     46e:	d0f3      	beq.n	458 <_ZN17Application_Class3RunEv+0x34>
				ChangeModus();
     470:	0028      	movs	r0, r5
     472:	4b07      	ldr	r3, [pc, #28]	; (490 <_ZN17Application_Class3RunEv+0x6c>)
     474:	4798      	blx	r3
     476:	e7f2      	b.n	45e <_ZN17Application_Class3RunEv+0x3a>
     478:	20000544 	.word	0x20000544
     47c:	00002bb9 	.word	0x00002bb9
     480:	200007e0 	.word	0x200007e0
     484:	000041c9 	.word	0x000041c9
     488:	00004259 	.word	0x00004259
     48c:	00000365 	.word	0x00000365
     490:	000003d9 	.word	0x000003d9

00000494 <_GLOBAL__sub_I__ZN17Application_ClassC2Ev>:

     494:	b510      	push	{r4, lr}
     496:	4a03      	ldr	r2, [pc, #12]	; (4a4 <_GLOBAL__sub_I__ZN17Application_ClassC2Ev+0x10>)
     498:	4903      	ldr	r1, [pc, #12]	; (4a8 <_GLOBAL__sub_I__ZN17Application_ClassC2Ev+0x14>)
     49a:	4804      	ldr	r0, [pc, #16]	; (4ac <_GLOBAL__sub_I__ZN17Application_ClassC2Ev+0x18>)
     49c:	4b04      	ldr	r3, [pc, #16]	; (4b0 <_GLOBAL__sub_I__ZN17Application_ClassC2Ev+0x1c>)
     49e:	4798      	blx	r3
     4a0:	bd10      	pop	{r4, pc}
     4a2:	46c0      	nop			; (mov r8, r8)
     4a4:	20000000 	.word	0x20000000
     4a8:	00000115 	.word	0x00000115
     4ac:	200004f8 	.word	0x200004f8
     4b0:	00005165 	.word	0x00005165

000004b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     4b4:	e7fe      	b.n	4b4 <Dummy_Handler>
	...

000004b8 <Reset_Handler>:
{
     4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     4ba:	4a2a      	ldr	r2, [pc, #168]	; (564 <Reset_Handler+0xac>)
     4bc:	4b2a      	ldr	r3, [pc, #168]	; (568 <Reset_Handler+0xb0>)
     4be:	429a      	cmp	r2, r3
     4c0:	d011      	beq.n	4e6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     4c2:	001a      	movs	r2, r3
     4c4:	4b29      	ldr	r3, [pc, #164]	; (56c <Reset_Handler+0xb4>)
     4c6:	429a      	cmp	r2, r3
     4c8:	d20d      	bcs.n	4e6 <Reset_Handler+0x2e>
     4ca:	4a29      	ldr	r2, [pc, #164]	; (570 <Reset_Handler+0xb8>)
     4cc:	3303      	adds	r3, #3
     4ce:	1a9b      	subs	r3, r3, r2
     4d0:	089b      	lsrs	r3, r3, #2
     4d2:	3301      	adds	r3, #1
     4d4:	009b      	lsls	r3, r3, #2
     4d6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     4d8:	4823      	ldr	r0, [pc, #140]	; (568 <Reset_Handler+0xb0>)
     4da:	4922      	ldr	r1, [pc, #136]	; (564 <Reset_Handler+0xac>)
     4dc:	588c      	ldr	r4, [r1, r2]
     4de:	5084      	str	r4, [r0, r2]
     4e0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     4e2:	429a      	cmp	r2, r3
     4e4:	d1fa      	bne.n	4dc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     4e6:	4a23      	ldr	r2, [pc, #140]	; (574 <Reset_Handler+0xbc>)
     4e8:	4b23      	ldr	r3, [pc, #140]	; (578 <Reset_Handler+0xc0>)
     4ea:	429a      	cmp	r2, r3
     4ec:	d20a      	bcs.n	504 <Reset_Handler+0x4c>
     4ee:	43d3      	mvns	r3, r2
     4f0:	4921      	ldr	r1, [pc, #132]	; (578 <Reset_Handler+0xc0>)
     4f2:	185b      	adds	r3, r3, r1
     4f4:	2103      	movs	r1, #3
     4f6:	438b      	bics	r3, r1
     4f8:	3304      	adds	r3, #4
     4fa:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     4fc:	2100      	movs	r1, #0
     4fe:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     500:	4293      	cmp	r3, r2
     502:	d1fc      	bne.n	4fe <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     504:	4a1d      	ldr	r2, [pc, #116]	; (57c <Reset_Handler+0xc4>)
     506:	21ff      	movs	r1, #255	; 0xff
     508:	4b1d      	ldr	r3, [pc, #116]	; (580 <Reset_Handler+0xc8>)
     50a:	438b      	bics	r3, r1
     50c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     50e:	39fd      	subs	r1, #253	; 0xfd
     510:	2390      	movs	r3, #144	; 0x90
     512:	005b      	lsls	r3, r3, #1
     514:	4a1b      	ldr	r2, [pc, #108]	; (584 <Reset_Handler+0xcc>)
     516:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     518:	4a1b      	ldr	r2, [pc, #108]	; (588 <Reset_Handler+0xd0>)
     51a:	78d3      	ldrb	r3, [r2, #3]
     51c:	2503      	movs	r5, #3
     51e:	43ab      	bics	r3, r5
     520:	2402      	movs	r4, #2
     522:	4323      	orrs	r3, r4
     524:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     526:	78d3      	ldrb	r3, [r2, #3]
     528:	270c      	movs	r7, #12
     52a:	43bb      	bics	r3, r7
     52c:	2608      	movs	r6, #8
     52e:	4333      	orrs	r3, r6
     530:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     532:	4b16      	ldr	r3, [pc, #88]	; (58c <Reset_Handler+0xd4>)
     534:	7b98      	ldrb	r0, [r3, #14]
     536:	2230      	movs	r2, #48	; 0x30
     538:	4390      	bics	r0, r2
     53a:	2220      	movs	r2, #32
     53c:	4310      	orrs	r0, r2
     53e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     540:	7b99      	ldrb	r1, [r3, #14]
     542:	43b9      	bics	r1, r7
     544:	4331      	orrs	r1, r6
     546:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     548:	7b9a      	ldrb	r2, [r3, #14]
     54a:	43aa      	bics	r2, r5
     54c:	4322      	orrs	r2, r4
     54e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     550:	4a0f      	ldr	r2, [pc, #60]	; (590 <Reset_Handler+0xd8>)
     552:	6853      	ldr	r3, [r2, #4]
     554:	2180      	movs	r1, #128	; 0x80
     556:	430b      	orrs	r3, r1
     558:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     55a:	4b0e      	ldr	r3, [pc, #56]	; (594 <Reset_Handler+0xdc>)
     55c:	4798      	blx	r3
        main();
     55e:	4b0e      	ldr	r3, [pc, #56]	; (598 <Reset_Handler+0xe0>)
     560:	4798      	blx	r3
     562:	e7fe      	b.n	562 <Reset_Handler+0xaa>
     564:	000059b4 	.word	0x000059b4
     568:	20000000 	.word	0x20000000
     56c:	200004dc 	.word	0x200004dc
     570:	20000004 	.word	0x20000004
     574:	200004dc 	.word	0x200004dc
     578:	200009f8 	.word	0x200009f8
     57c:	e000ed00 	.word	0xe000ed00
     580:	00000000 	.word	0x00000000
     584:	41007000 	.word	0x41007000
     588:	41005000 	.word	0x41005000
     58c:	41004800 	.word	0x41004800
     590:	41004000 	.word	0x41004000
     594:	000054c5 	.word	0x000054c5
     598:	0000059d 	.word	0x0000059d

0000059c <main>:
#include <atmel_start.h>
#include "main.h"


int main(void)
{
     59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		atmel_start_init();
     59e:	4b0b      	ldr	r3, [pc, #44]	; (5cc <main+0x30>)
     5a0:	4798      	blx	r3
		app.Init();
     5a2:	480b      	ldr	r0, [pc, #44]	; (5d0 <main+0x34>)
     5a4:	4b0b      	ldr	r3, [pc, #44]	; (5d4 <main+0x38>)
     5a6:	4798      	blx	r3
    /* Replace with your application code */
    while (1) 
    {
		flash.eraseFlash(0,TEST_FLASH_SIZE*ISSI_BUFFER_SIZE*2);
     5a8:	4e0b      	ldr	r6, [pc, #44]	; (5d8 <main+0x3c>)
     5aa:	4f0c      	ldr	r7, [pc, #48]	; (5dc <main+0x40>)
		while (app.FastMemoryCheck());
     5ac:	4d08      	ldr	r5, [pc, #32]	; (5d0 <main+0x34>)
		flash.eraseFlash(0,TEST_FLASH_SIZE*ISSI_BUFFER_SIZE*2);
     5ae:	2280      	movs	r2, #128	; 0x80
     5b0:	0392      	lsls	r2, r2, #14
     5b2:	2100      	movs	r1, #0
     5b4:	0030      	movs	r0, r6
     5b6:	47b8      	blx	r7
		while (app.FastMemoryCheck());
     5b8:	4c09      	ldr	r4, [pc, #36]	; (5e0 <main+0x44>)
     5ba:	0028      	movs	r0, r5
     5bc:	47a0      	blx	r4
     5be:	2800      	cmp	r0, #0
     5c0:	d1fb      	bne.n	5ba <main+0x1e>
		
		app.Run();
     5c2:	4803      	ldr	r0, [pc, #12]	; (5d0 <main+0x34>)
     5c4:	4b07      	ldr	r3, [pc, #28]	; (5e4 <main+0x48>)
     5c6:	4798      	blx	r3
		flash.eraseFlash(0,TEST_FLASH_SIZE*ISSI_BUFFER_SIZE*2);
     5c8:	e7f1      	b.n	5ae <main+0x12>
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	000005e9 	.word	0x000005e9
     5d0:	200004f8 	.word	0x200004f8
     5d4:	00000119 	.word	0x00000119
     5d8:	2000087c 	.word	0x2000087c
     5dc:	00004a55 	.word	0x00004a55
     5e0:	000001b5 	.word	0x000001b5
     5e4:	00000425 	.word	0x00000425

000005e8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     5e8:	b510      	push	{r4, lr}
	system_init();
     5ea:	4b01      	ldr	r3, [pc, #4]	; (5f0 <atmel_start_init+0x8>)
     5ec:	4798      	blx	r3
}
     5ee:	bd10      	pop	{r4, pc}
     5f0:	00000791 	.word	0x00000791

000005f4 <SPI_0_PORT_init>:
struct pwm_descriptor PWM_0;

struct timer_descriptor TIMER_3;

void SPI_0_PORT_init(void)
{
     5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5f6:	46ce      	mov	lr, r9
     5f8:	4647      	mov	r7, r8
     5fa:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5fc:	21c0      	movs	r1, #192	; 0xc0
     5fe:	05c9      	lsls	r1, r1, #23
     600:	2380      	movs	r3, #128	; 0x80
     602:	009b      	lsls	r3, r3, #2
     604:	604b      	str	r3, [r1, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     606:	4b25      	ldr	r3, [pc, #148]	; (69c <SPI_0_PORT_init+0xa8>)
     608:	4a25      	ldr	r2, [pc, #148]	; (6a0 <SPI_0_PORT_init+0xac>)
     60a:	629a      	str	r2, [r3, #40]	; 0x28
     60c:	4a25      	ldr	r2, [pc, #148]	; (6a4 <SPI_0_PORT_init+0xb0>)
     60e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     610:	2449      	movs	r4, #73	; 0x49
     612:	5d1a      	ldrb	r2, [r3, r4]
     614:	2004      	movs	r0, #4
     616:	4382      	bics	r2, r0
     618:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     61a:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     61c:	2601      	movs	r6, #1
     61e:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     620:	2201      	movs	r2, #1
     622:	4310      	orrs	r0, r2
     624:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     626:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     628:	2734      	movs	r7, #52	; 0x34
     62a:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     62c:	250f      	movs	r5, #15
     62e:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
     630:	2420      	movs	r4, #32
     632:	46a1      	mov	r9, r4
     634:	464c      	mov	r4, r9
     636:	4320      	orrs	r0, r4
     638:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     63a:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     63c:	2080      	movs	r0, #128	; 0x80
     63e:	00c0      	lsls	r0, r0, #3
     640:	6148      	str	r0, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     642:	6088      	str	r0, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     644:	4818      	ldr	r0, [pc, #96]	; (6a8 <SPI_0_PORT_init+0xb4>)
     646:	6298      	str	r0, [r3, #40]	; 0x28
     648:	20c0      	movs	r0, #192	; 0xc0
     64a:	0600      	lsls	r0, r0, #24
     64c:	4684      	mov	ip, r0
     64e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     650:	3716      	adds	r7, #22
     652:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     654:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     656:	4310      	orrs	r0, r2
     658:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     65a:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     65c:	2035      	movs	r0, #53	; 0x35
     65e:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     660:	240f      	movs	r4, #15
     662:	43a7      	bics	r7, r4
	tmp |= PORT_PMUX_PMUXE(data);
     664:	3c0d      	subs	r4, #13
     666:	4327      	orrs	r7, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     668:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     66a:	2780      	movs	r7, #128	; 0x80
     66c:	013f      	lsls	r7, r7, #4
     66e:	614f      	str	r7, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     670:	608f      	str	r7, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     672:	490e      	ldr	r1, [pc, #56]	; (6ac <SPI_0_PORT_init+0xb8>)
     674:	6299      	str	r1, [r3, #40]	; 0x28
     676:	4661      	mov	r1, ip
     678:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     67a:	274b      	movs	r7, #75	; 0x4b
     67c:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     67e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     680:	4311      	orrs	r1, r2
     682:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     684:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     686:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     688:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
     68a:	4649      	mov	r1, r9
     68c:	430a      	orrs	r2, r1
     68e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     690:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
}
     692:	bc0c      	pop	{r2, r3}
     694:	4690      	mov	r8, r2
     696:	4699      	mov	r9, r3
     698:	bdf0      	pop	{r4, r5, r6, r7, pc}
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	41004400 	.word	0x41004400
     6a0:	40020200 	.word	0x40020200
     6a4:	c0020000 	.word	0xc0020000
     6a8:	40000400 	.word	0x40000400
     6ac:	40000800 	.word	0x40000800

000006b0 <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     6b0:	4a04      	ldr	r2, [pc, #16]	; (6c4 <SPI_0_CLOCK_init+0x14>)
     6b2:	6a13      	ldr	r3, [r2, #32]
     6b4:	2104      	movs	r1, #4
     6b6:	430b      	orrs	r3, r1
     6b8:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     6ba:	4a03      	ldr	r2, [pc, #12]	; (6c8 <SPI_0_CLOCK_init+0x18>)
     6bc:	4b03      	ldr	r3, [pc, #12]	; (6cc <SPI_0_CLOCK_init+0x1c>)
     6be:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     6c0:	4770      	bx	lr
     6c2:	46c0      	nop			; (mov r8, r8)
     6c4:	40000400 	.word	0x40000400
     6c8:	00004014 	.word	0x00004014
     6cc:	40000c00 	.word	0x40000c00

000006d0 <SPI_0_init>:

void SPI_0_init(void)
{
     6d0:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     6d2:	4b04      	ldr	r3, [pc, #16]	; (6e4 <SPI_0_init+0x14>)
     6d4:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     6d6:	4904      	ldr	r1, [pc, #16]	; (6e8 <SPI_0_init+0x18>)
     6d8:	4804      	ldr	r0, [pc, #16]	; (6ec <SPI_0_init+0x1c>)
     6da:	4b05      	ldr	r3, [pc, #20]	; (6f0 <SPI_0_init+0x20>)
     6dc:	4798      	blx	r3
	SPI_0_PORT_init();
     6de:	4b05      	ldr	r3, [pc, #20]	; (6f4 <SPI_0_init+0x24>)
     6e0:	4798      	blx	r3
}
     6e2:	bd10      	pop	{r4, pc}
     6e4:	000006b1 	.word	0x000006b1
     6e8:	42000800 	.word	0x42000800
     6ec:	2000099c 	.word	0x2000099c
     6f0:	000009dd 	.word	0x000009dd
     6f4:	000005f5 	.word	0x000005f5

000006f8 <PWM_0_CLOCK_init>:
     6f8:	4a04      	ldr	r2, [pc, #16]	; (70c <PWM_0_CLOCK_init+0x14>)
     6fa:	6a11      	ldr	r1, [r2, #32]
     6fc:	2380      	movs	r3, #128	; 0x80
     6fe:	011b      	lsls	r3, r3, #4
     700:	430b      	orrs	r3, r1
     702:	6213      	str	r3, [r2, #32]
     704:	4a02      	ldr	r2, [pc, #8]	; (710 <PWM_0_CLOCK_init+0x18>)
     706:	4b03      	ldr	r3, [pc, #12]	; (714 <PWM_0_CLOCK_init+0x1c>)
     708:	805a      	strh	r2, [r3, #2]

void PWM_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);
}
     70a:	4770      	bx	lr
     70c:	40000400 	.word	0x40000400
     710:	0000431b 	.word	0x0000431b
     714:	40000c00 	.word	0x40000c00

00000718 <PWM_0_init>:

void PWM_0_init(void)
{
     718:	b510      	push	{r4, lr}
	PWM_0_CLOCK_init();
     71a:	4b05      	ldr	r3, [pc, #20]	; (730 <PWM_0_init+0x18>)
     71c:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC3, _tc_get_pwm());
     71e:	4b05      	ldr	r3, [pc, #20]	; (734 <PWM_0_init+0x1c>)
     720:	4798      	blx	r3
     722:	0002      	movs	r2, r0
     724:	4904      	ldr	r1, [pc, #16]	; (738 <PWM_0_init+0x20>)
     726:	4805      	ldr	r0, [pc, #20]	; (73c <PWM_0_init+0x24>)
     728:	4b05      	ldr	r3, [pc, #20]	; (740 <PWM_0_init+0x28>)
     72a:	4798      	blx	r3
}
     72c:	bd10      	pop	{r4, pc}
     72e:	46c0      	nop			; (mov r8, r8)
     730:	000006f9 	.word	0x000006f9
     734:	00001a35 	.word	0x00001a35
     738:	42002c00 	.word	0x42002c00
     73c:	20000960 	.word	0x20000960
     740:	000008a1 	.word	0x000008a1

00000744 <TIMER_3_CLOCK_init>:
     744:	4a04      	ldr	r2, [pc, #16]	; (758 <TIMER_3_CLOCK_init+0x14>)
     746:	6a11      	ldr	r1, [r2, #32]
     748:	2380      	movs	r3, #128	; 0x80
     74a:	005b      	lsls	r3, r3, #1
     74c:	430b      	orrs	r3, r1
     74e:	6213      	str	r3, [r2, #32]
     750:	4a02      	ldr	r2, [pc, #8]	; (75c <TIMER_3_CLOCK_init+0x18>)
     752:	4b03      	ldr	r3, [pc, #12]	; (760 <TIMER_3_CLOCK_init+0x1c>)
     754:	805a      	strh	r2, [r3, #2]

void TIMER_3_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TCC0);
	_gclk_enable_channel(TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC);
}
     756:	4770      	bx	lr
     758:	40000400 	.word	0x40000400
     75c:	0000421a 	.word	0x0000421a
     760:	40000c00 	.word	0x40000c00

00000764 <TIMER_3_init>:

void TIMER_3_init(void)
{
     764:	b510      	push	{r4, lr}
	TIMER_3_CLOCK_init();
     766:	4b05      	ldr	r3, [pc, #20]	; (77c <TIMER_3_init+0x18>)
     768:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
     76a:	4b05      	ldr	r3, [pc, #20]	; (780 <TIMER_3_init+0x1c>)
     76c:	4798      	blx	r3
     76e:	0002      	movs	r2, r0
     770:	4904      	ldr	r1, [pc, #16]	; (784 <TIMER_3_init+0x20>)
     772:	4805      	ldr	r0, [pc, #20]	; (788 <TIMER_3_init+0x24>)
     774:	4b05      	ldr	r3, [pc, #20]	; (78c <TIMER_3_init+0x28>)
     776:	4798      	blx	r3
}
     778:	bd10      	pop	{r4, pc}
     77a:	46c0      	nop			; (mov r8, r8)
     77c:	00000745 	.word	0x00000745
     780:	000015b1 	.word	0x000015b1
     784:	42002000 	.word	0x42002000
     788:	200009b4 	.word	0x200009b4
     78c:	00000c6d 	.word	0x00000c6d

00000790 <system_init>:

void system_init(void)
{
     790:	b5f0      	push	{r4, r5, r6, r7, lr}
     792:	46c6      	mov	lr, r8
     794:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     796:	4b2a      	ldr	r3, [pc, #168]	; (840 <system_init+0xb0>)
     798:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     79a:	22c0      	movs	r2, #192	; 0xc0
     79c:	05d2      	lsls	r2, r2, #23
     79e:	2080      	movs	r0, #128	; 0x80
     7a0:	0040      	lsls	r0, r0, #1
     7a2:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7a4:	4b27      	ldr	r3, [pc, #156]	; (844 <system_init+0xb4>)
     7a6:	4928      	ldr	r1, [pc, #160]	; (848 <system_init+0xb8>)
     7a8:	6299      	str	r1, [r3, #40]	; 0x28
     7aa:	4928      	ldr	r1, [pc, #160]	; (84c <system_init+0xbc>)
     7ac:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7ae:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     7b0:	2148      	movs	r1, #72	; 0x48
     7b2:	5c5c      	ldrb	r4, [r3, r1]
     7b4:	2504      	movs	r5, #4
     7b6:	432c      	orrs	r4, r5
     7b8:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7ba:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7bc:	5c5c      	ldrb	r4, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7be:	38ff      	subs	r0, #255	; 0xff
     7c0:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7c2:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7c4:	2180      	movs	r1, #128	; 0x80
     7c6:	0509      	lsls	r1, r1, #20
     7c8:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7ca:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7cc:	2480      	movs	r4, #128	; 0x80
     7ce:	05e4      	lsls	r4, r4, #23
     7d0:	629c      	str	r4, [r3, #40]	; 0x28
     7d2:	491f      	ldr	r1, [pc, #124]	; (850 <system_init+0xc0>)
     7d4:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7d6:	3557      	adds	r5, #87	; 0x57
     7d8:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7da:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7dc:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7de:	2180      	movs	r1, #128	; 0x80
     7e0:	0549      	lsls	r1, r1, #21
     7e2:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7e4:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7e6:	629c      	str	r4, [r3, #40]	; 0x28
     7e8:	4a1a      	ldr	r2, [pc, #104]	; (854 <system_init+0xc4>)
     7ea:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ec:	215c      	movs	r1, #92	; 0x5c
     7ee:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7f0:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f2:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);

	SPI_0_init();
     7f4:	4b18      	ldr	r3, [pc, #96]	; (858 <system_init+0xc8>)
     7f6:	4798      	blx	r3

	PWM_0_init();
     7f8:	4b18      	ldr	r3, [pc, #96]	; (85c <system_init+0xcc>)
     7fa:	4798      	blx	r3
     7fc:	4c18      	ldr	r4, [pc, #96]	; (860 <system_init+0xd0>)
     7fe:	6a22      	ldr	r2, [r4, #32]
     800:	2380      	movs	r3, #128	; 0x80
     802:	015b      	lsls	r3, r3, #5
     804:	4313      	orrs	r3, r2
     806:	6223      	str	r3, [r4, #32]
     808:	4f16      	ldr	r7, [pc, #88]	; (864 <system_init+0xd4>)
     80a:	4b17      	ldr	r3, [pc, #92]	; (868 <system_init+0xd8>)
     80c:	4698      	mov	r8, r3
     80e:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_1, TC4, _tc_get_timer());
     810:	4e16      	ldr	r6, [pc, #88]	; (86c <system_init+0xdc>)
     812:	47b0      	blx	r6
     814:	0002      	movs	r2, r0
     816:	4916      	ldr	r1, [pc, #88]	; (870 <system_init+0xe0>)
     818:	4816      	ldr	r0, [pc, #88]	; (874 <system_init+0xe4>)
     81a:	4d17      	ldr	r5, [pc, #92]	; (878 <system_init+0xe8>)
     81c:	47a8      	blx	r5
     81e:	6a22      	ldr	r2, [r4, #32]
     820:	2380      	movs	r3, #128	; 0x80
     822:	019b      	lsls	r3, r3, #6
     824:	4313      	orrs	r3, r2
     826:	6223      	str	r3, [r4, #32]
     828:	4643      	mov	r3, r8
     82a:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_2, TC5, _tc_get_timer());
     82c:	47b0      	blx	r6
     82e:	0002      	movs	r2, r0
     830:	4912      	ldr	r1, [pc, #72]	; (87c <system_init+0xec>)
     832:	4813      	ldr	r0, [pc, #76]	; (880 <system_init+0xf0>)
     834:	47a8      	blx	r5

	TIMER_1_init();
	TIMER_2_init();

	TIMER_3_init();
     836:	4b13      	ldr	r3, [pc, #76]	; (884 <system_init+0xf4>)
     838:	4798      	blx	r3
}
     83a:	bc04      	pop	{r2}
     83c:	4690      	mov	r8, r2
     83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     840:	00000f45 	.word	0x00000f45
     844:	41004400 	.word	0x41004400
     848:	40020100 	.word	0x40020100
     84c:	c0020000 	.word	0xc0020000
     850:	c0000800 	.word	0xc0000800
     854:	c0001000 	.word	0xc0001000
     858:	000006d1 	.word	0x000006d1
     85c:	00000719 	.word	0x00000719
     860:	40000400 	.word	0x40000400
     864:	40000c00 	.word	0x40000c00
     868:	0000431c 	.word	0x0000431c
     86c:	00001a29 	.word	0x00001a29
     870:	42003000 	.word	0x42003000
     874:	2000097c 	.word	0x2000097c
     878:	00000c6d 	.word	0x00000c6d
     87c:	42003400 	.word	0x42003400
     880:	20000940 	.word	0x20000940
     884:	00000765 	.word	0x00000765

00000888 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     888:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     88a:	6943      	ldr	r3, [r0, #20]
     88c:	2b00      	cmp	r3, #0
     88e:	d000      	beq.n	892 <pwm_period_expired+0xa>
		descr->pwm_cb.period(descr);
     890:	4798      	blx	r3
	}
}
     892:	bd10      	pop	{r4, pc}

00000894 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     894:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     896:	6983      	ldr	r3, [r0, #24]
     898:	2b00      	cmp	r3, #0
     89a:	d000      	beq.n	89e <pwm_detect_fault+0xa>
		descr->pwm_cb.error(descr);
     89c:	4798      	blx	r3
	}
}
     89e:	bd10      	pop	{r4, pc}

000008a0 <pwm_init>:
{
     8a0:	b570      	push	{r4, r5, r6, lr}
     8a2:	0005      	movs	r5, r0
     8a4:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     8a6:	2800      	cmp	r0, #0
     8a8:	d011      	beq.n	8ce <pwm_init+0x2e>
     8aa:	0008      	movs	r0, r1
     8ac:	1e43      	subs	r3, r0, #1
     8ae:	4198      	sbcs	r0, r3
     8b0:	b2c0      	uxtb	r0, r0
     8b2:	2233      	movs	r2, #51	; 0x33
     8b4:	4907      	ldr	r1, [pc, #28]	; (8d4 <pwm_init+0x34>)
     8b6:	4b08      	ldr	r3, [pc, #32]	; (8d8 <pwm_init+0x38>)
     8b8:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     8ba:	0021      	movs	r1, r4
     8bc:	0028      	movs	r0, r5
     8be:	4b07      	ldr	r3, [pc, #28]	; (8dc <pwm_init+0x3c>)
     8c0:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     8c2:	4b07      	ldr	r3, [pc, #28]	; (8e0 <pwm_init+0x40>)
     8c4:	602b      	str	r3, [r5, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     8c6:	4b07      	ldr	r3, [pc, #28]	; (8e4 <pwm_init+0x44>)
     8c8:	606b      	str	r3, [r5, #4]
}
     8ca:	2000      	movs	r0, #0
     8cc:	bd70      	pop	{r4, r5, r6, pc}
     8ce:	2000      	movs	r0, #0
     8d0:	e7ef      	b.n	8b2 <pwm_init+0x12>
     8d2:	46c0      	nop			; (mov r8, r8)
     8d4:	00005734 	.word	0x00005734
     8d8:	00000e95 	.word	0x00000e95
     8dc:	00001869 	.word	0x00001869
     8e0:	00000889 	.word	0x00000889
     8e4:	00000895 	.word	0x00000895

000008e8 <pwm_enable>:
{
     8e8:	b510      	push	{r4, lr}
     8ea:	0004      	movs	r4, r0
	ASSERT(descr);
     8ec:	1e43      	subs	r3, r0, #1
     8ee:	4198      	sbcs	r0, r3
     8f0:	b2c0      	uxtb	r0, r0
     8f2:	224a      	movs	r2, #74	; 0x4a
     8f4:	4907      	ldr	r1, [pc, #28]	; (914 <pwm_enable+0x2c>)
     8f6:	4b08      	ldr	r3, [pc, #32]	; (918 <pwm_enable+0x30>)
     8f8:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
     8fa:	0020      	movs	r0, r4
     8fc:	4b07      	ldr	r3, [pc, #28]	; (91c <pwm_enable+0x34>)
     8fe:	4798      	blx	r3
     900:	2800      	cmp	r0, #0
     902:	d104      	bne.n	90e <pwm_enable+0x26>
	_pwm_enable(&descr->device);
     904:	0020      	movs	r0, r4
     906:	4b06      	ldr	r3, [pc, #24]	; (920 <pwm_enable+0x38>)
     908:	4798      	blx	r3
	return ERR_NONE;
     90a:	2000      	movs	r0, #0
}
     90c:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     90e:	2011      	movs	r0, #17
     910:	4240      	negs	r0, r0
     912:	e7fb      	b.n	90c <pwm_enable+0x24>
     914:	00005734 	.word	0x00005734
     918:	00000e95 	.word	0x00000e95
     91c:	000019cd 	.word	0x000019cd
     920:	00001975 	.word	0x00001975

00000924 <pwm_disable>:
{
     924:	b510      	push	{r4, lr}
     926:	0004      	movs	r4, r0
	ASSERT(descr);
     928:	1e43      	subs	r3, r0, #1
     92a:	4198      	sbcs	r0, r3
     92c:	b2c0      	uxtb	r0, r0
     92e:	2258      	movs	r2, #88	; 0x58
     930:	4907      	ldr	r1, [pc, #28]	; (950 <pwm_disable+0x2c>)
     932:	4b08      	ldr	r3, [pc, #32]	; (954 <pwm_disable+0x30>)
     934:	4798      	blx	r3
	if (!_pwm_is_enabled(&descr->device)) {
     936:	0020      	movs	r0, r4
     938:	4b07      	ldr	r3, [pc, #28]	; (958 <pwm_disable+0x34>)
     93a:	4798      	blx	r3
     93c:	2800      	cmp	r0, #0
     93e:	d004      	beq.n	94a <pwm_disable+0x26>
	_pwm_disable(&descr->device);
     940:	0020      	movs	r0, r4
     942:	4b06      	ldr	r3, [pc, #24]	; (95c <pwm_disable+0x38>)
     944:	4798      	blx	r3
	return ERR_NONE;
     946:	2000      	movs	r0, #0
}
     948:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     94a:	2011      	movs	r0, #17
     94c:	4240      	negs	r0, r0
     94e:	e7fb      	b.n	948 <pwm_disable+0x24>
     950:	00005734 	.word	0x00005734
     954:	00000e95 	.word	0x00000e95
     958:	000019cd 	.word	0x000019cd
     95c:	00001981 	.word	0x00001981

00000960 <pwm_register_callback>:
{
     960:	b570      	push	{r4, r5, r6, lr}
     962:	0006      	movs	r6, r0
     964:	000d      	movs	r5, r1
     966:	0014      	movs	r4, r2
	switch (type) {
     968:	2900      	cmp	r1, #0
     96a:	d004      	beq.n	976 <pwm_register_callback+0x16>
     96c:	2901      	cmp	r1, #1
     96e:	d014      	beq.n	99a <pwm_register_callback+0x3a>
		return ERR_INVALID_ARG;
     970:	200d      	movs	r0, #13
     972:	4240      	negs	r0, r0
     974:	e010      	b.n	998 <pwm_register_callback+0x38>
		descr->pwm_cb.period = cb;
     976:	6172      	str	r2, [r6, #20]
	ASSERT(descr);
     978:	0030      	movs	r0, r6
     97a:	1e43      	subs	r3, r0, #1
     97c:	4198      	sbcs	r0, r3
     97e:	b2c0      	uxtb	r0, r0
     980:	2272      	movs	r2, #114	; 0x72
     982:	4907      	ldr	r1, [pc, #28]	; (9a0 <pwm_register_callback+0x40>)
     984:	4b07      	ldr	r3, [pc, #28]	; (9a4 <pwm_register_callback+0x44>)
     986:	4798      	blx	r3
	_pwm_set_irq_state(&descr->device, (enum _pwm_callback_type)type, NULL != cb);
     988:	1e62      	subs	r2, r4, #1
     98a:	4194      	sbcs	r4, r2
     98c:	b2e2      	uxtb	r2, r4
     98e:	0029      	movs	r1, r5
     990:	0030      	movs	r0, r6
     992:	4b05      	ldr	r3, [pc, #20]	; (9a8 <pwm_register_callback+0x48>)
     994:	4798      	blx	r3
	return ERR_NONE;
     996:	2000      	movs	r0, #0
}
     998:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.error = cb;
     99a:	61b2      	str	r2, [r6, #24]
		break;
     99c:	e7ec      	b.n	978 <pwm_register_callback+0x18>
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	00005734 	.word	0x00005734
     9a4:	00000e95 	.word	0x00000e95
     9a8:	000019d9 	.word	0x000019d9

000009ac <pwm_set_parameters>:
{
     9ac:	b570      	push	{r4, r5, r6, lr}
     9ae:	0004      	movs	r4, r0
     9b0:	000d      	movs	r5, r1
     9b2:	0016      	movs	r6, r2
	ASSERT(descr);
     9b4:	1e43      	subs	r3, r0, #1
     9b6:	4198      	sbcs	r0, r3
     9b8:	b2c0      	uxtb	r0, r0
     9ba:	227c      	movs	r2, #124	; 0x7c
     9bc:	4904      	ldr	r1, [pc, #16]	; (9d0 <pwm_set_parameters+0x24>)
     9be:	4b05      	ldr	r3, [pc, #20]	; (9d4 <pwm_set_parameters+0x28>)
     9c0:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
     9c2:	0032      	movs	r2, r6
     9c4:	0029      	movs	r1, r5
     9c6:	0020      	movs	r0, r4
     9c8:	4b03      	ldr	r3, [pc, #12]	; (9d8 <pwm_set_parameters+0x2c>)
     9ca:	4798      	blx	r3
}
     9cc:	2000      	movs	r0, #0
     9ce:	bd70      	pop	{r4, r5, r6, pc}
     9d0:	00005734 	.word	0x00005734
     9d4:	00000e95 	.word	0x00000e95
     9d8:	0000198d 	.word	0x0000198d

000009dc <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     9dc:	b570      	push	{r4, r5, r6, lr}
     9de:	0004      	movs	r4, r0
     9e0:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     9e2:	2800      	cmp	r0, #0
     9e4:	d016      	beq.n	a14 <spi_m_sync_init+0x38>
     9e6:	0008      	movs	r0, r1
     9e8:	1e43      	subs	r3, r0, #1
     9ea:	4198      	sbcs	r0, r3
     9ec:	b2c0      	uxtb	r0, r0
     9ee:	2240      	movs	r2, #64	; 0x40
     9f0:	4909      	ldr	r1, [pc, #36]	; (a18 <spi_m_sync_init+0x3c>)
     9f2:	4b0a      	ldr	r3, [pc, #40]	; (a1c <spi_m_sync_init+0x40>)
     9f4:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     9f6:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     9f8:	1d20      	adds	r0, r4, #4
     9fa:	0029      	movs	r1, r5
     9fc:	4b08      	ldr	r3, [pc, #32]	; (a20 <spi_m_sync_init+0x44>)
     9fe:	4798      	blx	r3

	if (rc < 0) {
     a00:	2800      	cmp	r0, #0
     a02:	db06      	blt.n	a12 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     a04:	4b07      	ldr	r3, [pc, #28]	; (a24 <spi_m_sync_init+0x48>)
     a06:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     a08:	4b07      	ldr	r3, [pc, #28]	; (a28 <spi_m_sync_init+0x4c>)
     a0a:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     a0c:	4b07      	ldr	r3, [pc, #28]	; (a2c <spi_m_sync_init+0x50>)
     a0e:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     a10:	2000      	movs	r0, #0
}
     a12:	bd70      	pop	{r4, r5, r6, pc}
     a14:	2000      	movs	r0, #0
     a16:	e7ea      	b.n	9ee <spi_m_sync_init+0x12>
     a18:	0000574c 	.word	0x0000574c
     a1c:	00000e95 	.word	0x00000e95
     a20:	00001091 	.word	0x00001091
     a24:	ffff8000 	.word	0xffff8000
     a28:	00000b05 	.word	0x00000b05
     a2c:	00000ac9 	.word	0x00000ac9

00000a30 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     a30:	b510      	push	{r4, lr}
     a32:	0004      	movs	r4, r0
	ASSERT(spi);
     a34:	1e43      	subs	r3, r0, #1
     a36:	4198      	sbcs	r0, r3
     a38:	b2c0      	uxtb	r0, r0
     a3a:	2257      	movs	r2, #87	; 0x57
     a3c:	4903      	ldr	r1, [pc, #12]	; (a4c <spi_m_sync_enable+0x1c>)
     a3e:	4b04      	ldr	r3, [pc, #16]	; (a50 <spi_m_sync_enable+0x20>)
     a40:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     a42:	1d20      	adds	r0, r4, #4
     a44:	4b03      	ldr	r3, [pc, #12]	; (a54 <spi_m_sync_enable+0x24>)
     a46:	4798      	blx	r3
}
     a48:	bd10      	pop	{r4, pc}
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	0000574c 	.word	0x0000574c
     a50:	00000e95 	.word	0x00000e95
     a54:	00001189 	.word	0x00001189

00000a58 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
     a58:	b510      	push	{r4, lr}
     a5a:	0004      	movs	r4, r0
	ASSERT(spi);
     a5c:	1e43      	subs	r3, r0, #1
     a5e:	4198      	sbcs	r0, r3
     a60:	b2c0      	uxtb	r0, r0
     a62:	225d      	movs	r2, #93	; 0x5d
     a64:	4903      	ldr	r1, [pc, #12]	; (a74 <spi_m_sync_disable+0x1c>)
     a66:	4b04      	ldr	r3, [pc, #16]	; (a78 <spi_m_sync_disable+0x20>)
     a68:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
     a6a:	1d20      	adds	r0, r4, #4
     a6c:	4b03      	ldr	r3, [pc, #12]	; (a7c <spi_m_sync_disable+0x24>)
     a6e:	4798      	blx	r3
}
     a70:	bd10      	pop	{r4, pc}
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	0000574c 	.word	0x0000574c
     a78:	00000e95 	.word	0x00000e95
     a7c:	000011bd 	.word	0x000011bd

00000a80 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     a80:	b530      	push	{r4, r5, lr}
     a82:	b087      	sub	sp, #28
     a84:	0004      	movs	r4, r0
     a86:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     a88:	2800      	cmp	r0, #0
     a8a:	d014      	beq.n	ab6 <spi_m_sync_transfer+0x36>
     a8c:	0008      	movs	r0, r1
     a8e:	1e43      	subs	r3, r0, #1
     a90:	4198      	sbcs	r0, r3
     a92:	b2c0      	uxtb	r0, r0
     a94:	22b3      	movs	r2, #179	; 0xb3
     a96:	4909      	ldr	r1, [pc, #36]	; (abc <spi_m_sync_transfer+0x3c>)
     a98:	4b09      	ldr	r3, [pc, #36]	; (ac0 <spi_m_sync_transfer+0x40>)
     a9a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     a9c:	682b      	ldr	r3, [r5, #0]
     a9e:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     aa0:	686b      	ldr	r3, [r5, #4]
     aa2:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     aa4:	68ab      	ldr	r3, [r5, #8]
     aa6:	9301      	str	r3, [sp, #4]
     aa8:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     aaa:	1d20      	adds	r0, r4, #4
     aac:	a903      	add	r1, sp, #12
     aae:	4b05      	ldr	r3, [pc, #20]	; (ac4 <spi_m_sync_transfer+0x44>)
     ab0:	4798      	blx	r3
}
     ab2:	b007      	add	sp, #28
     ab4:	bd30      	pop	{r4, r5, pc}
     ab6:	2000      	movs	r0, #0
     ab8:	e7ec      	b.n	a94 <spi_m_sync_transfer+0x14>
     aba:	46c0      	nop			; (mov r8, r8)
     abc:	0000574c 	.word	0x0000574c
     ac0:	00000e95 	.word	0x00000e95
     ac4:	000011f1 	.word	0x000011f1

00000ac8 <_spi_m_sync_io_write>:
{
     ac8:	b570      	push	{r4, r5, r6, lr}
     aca:	b084      	sub	sp, #16
     acc:	0004      	movs	r4, r0
     ace:	000e      	movs	r6, r1
     ad0:	0015      	movs	r5, r2
	ASSERT(io);
     ad2:	1e43      	subs	r3, r0, #1
     ad4:	4198      	sbcs	r0, r3
     ad6:	b2c0      	uxtb	r0, r0
     ad8:	22a3      	movs	r2, #163	; 0xa3
     ada:	4907      	ldr	r1, [pc, #28]	; (af8 <_spi_m_sync_io_write+0x30>)
     adc:	4b07      	ldr	r3, [pc, #28]	; (afc <_spi_m_sync_io_write+0x34>)
     ade:	4798      	blx	r3
	xfer.rxbuf = 0;
     ae0:	2300      	movs	r3, #0
     ae2:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     ae4:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     ae6:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     ae8:	0020      	movs	r0, r4
     aea:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     aec:	a901      	add	r1, sp, #4
     aee:	4b04      	ldr	r3, [pc, #16]	; (b00 <_spi_m_sync_io_write+0x38>)
     af0:	4798      	blx	r3
}
     af2:	b004      	add	sp, #16
     af4:	bd70      	pop	{r4, r5, r6, pc}
     af6:	46c0      	nop			; (mov r8, r8)
     af8:	0000574c 	.word	0x0000574c
     afc:	00000e95 	.word	0x00000e95
     b00:	00000a81 	.word	0x00000a81

00000b04 <_spi_m_sync_io_read>:
{
     b04:	b570      	push	{r4, r5, r6, lr}
     b06:	b084      	sub	sp, #16
     b08:	0004      	movs	r4, r0
     b0a:	000e      	movs	r6, r1
     b0c:	0015      	movs	r5, r2
	ASSERT(io);
     b0e:	1e43      	subs	r3, r0, #1
     b10:	4198      	sbcs	r0, r3
     b12:	b2c0      	uxtb	r0, r0
     b14:	2287      	movs	r2, #135	; 0x87
     b16:	4907      	ldr	r1, [pc, #28]	; (b34 <_spi_m_sync_io_read+0x30>)
     b18:	4b07      	ldr	r3, [pc, #28]	; (b38 <_spi_m_sync_io_read+0x34>)
     b1a:	4798      	blx	r3
	xfer.rxbuf = buf;
     b1c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     b1e:	2300      	movs	r3, #0
     b20:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     b22:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     b24:	0020      	movs	r0, r4
     b26:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     b28:	a901      	add	r1, sp, #4
     b2a:	4b04      	ldr	r3, [pc, #16]	; (b3c <_spi_m_sync_io_read+0x38>)
     b2c:	4798      	blx	r3
}
     b2e:	b004      	add	sp, #16
     b30:	bd70      	pop	{r4, r5, r6, pc}
     b32:	46c0      	nop			; (mov r8, r8)
     b34:	0000574c 	.word	0x0000574c
     b38:	00000e95 	.word	0x00000e95
     b3c:	00000a81 	.word	0x00000a81

00000b40 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     b40:	b570      	push	{r4, r5, r6, lr}
     b42:	0004      	movs	r4, r0
     b44:	000d      	movs	r5, r1
	ASSERT(spi && io);
     b46:	2800      	cmp	r0, #0
     b48:	d00b      	beq.n	b62 <spi_m_sync_get_io_descriptor+0x22>
     b4a:	0008      	movs	r0, r1
     b4c:	1e43      	subs	r3, r0, #1
     b4e:	4198      	sbcs	r0, r3
     b50:	b2c0      	uxtb	r0, r0
     b52:	22bd      	movs	r2, #189	; 0xbd
     b54:	4904      	ldr	r1, [pc, #16]	; (b68 <spi_m_sync_get_io_descriptor+0x28>)
     b56:	4b05      	ldr	r3, [pc, #20]	; (b6c <spi_m_sync_get_io_descriptor+0x2c>)
     b58:	4798      	blx	r3
	*io = &spi->io;
     b5a:	340c      	adds	r4, #12
     b5c:	602c      	str	r4, [r5, #0]
	return 0;
}
     b5e:	2000      	movs	r0, #0
     b60:	bd70      	pop	{r4, r5, r6, pc}
     b62:	2000      	movs	r0, #0
     b64:	e7f5      	b.n	b52 <spi_m_sync_get_io_descriptor+0x12>
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	0000574c 	.word	0x0000574c
     b6c:	00000e95 	.word	0x00000e95

00000b70 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b72:	46ce      	mov	lr, r9
     b74:	4647      	mov	r7, r8
     b76:	b580      	push	{r7, lr}
     b78:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     b7a:	6803      	ldr	r3, [r0, #0]
     b7c:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     b7e:	2b00      	cmp	r3, #0
     b80:	d005      	beq.n	b8e <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     b82:	688e      	ldr	r6, [r1, #8]
     b84:	001c      	movs	r4, r3
     b86:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     b88:	2701      	movs	r7, #1
     b8a:	1abf      	subs	r7, r7, r2
     b8c:	e00d      	b.n	baa <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     b8e:	4b12      	ldr	r3, [pc, #72]	; (bd8 <timer_add_timer_task+0x68>)
     b90:	4798      	blx	r3
		return;
     b92:	e018      	b.n	bc6 <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     b94:	18fb      	adds	r3, r7, r3
     b96:	68a0      	ldr	r0, [r4, #8]
     b98:	4680      	mov	r8, r0
     b9a:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     b9c:	42b3      	cmp	r3, r6
     b9e:	d20c      	bcs.n	bba <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     ba0:	6823      	ldr	r3, [r4, #0]
     ba2:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     ba4:	2b00      	cmp	r3, #0
     ba6:	d00b      	beq.n	bc0 <timer_add_timer_task+0x50>
     ba8:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     baa:	6863      	ldr	r3, [r4, #4]
     bac:	4293      	cmp	r3, r2
     bae:	d8f1      	bhi.n	b94 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     bb0:	68a0      	ldr	r0, [r4, #8]
     bb2:	4680      	mov	r8, r0
     bb4:	4443      	add	r3, r8
     bb6:	1a9b      	subs	r3, r3, r2
     bb8:	e7f0      	b.n	b9c <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     bba:	45a4      	cmp	ip, r4
     bbc:	d007      	beq.n	bce <timer_add_timer_task+0x5e>
     bbe:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     bc0:	0020      	movs	r0, r4
     bc2:	4b06      	ldr	r3, [pc, #24]	; (bdc <timer_add_timer_task+0x6c>)
     bc4:	4798      	blx	r3
	}
}
     bc6:	bc0c      	pop	{r2, r3}
     bc8:	4690      	mov	r8, r2
     bca:	4699      	mov	r9, r3
     bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     bce:	4648      	mov	r0, r9
     bd0:	4b01      	ldr	r3, [pc, #4]	; (bd8 <timer_add_timer_task+0x68>)
     bd2:	4798      	blx	r3
     bd4:	e7f7      	b.n	bc6 <timer_add_timer_task+0x56>
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	00000ec1 	.word	0x00000ec1
     bdc:	00000eed 	.word	0x00000eed

00000be0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     be0:	b5f0      	push	{r4, r5, r6, r7, lr}
     be2:	46c6      	mov	lr, r8
     be4:	b500      	push	{lr}
     be6:	b082      	sub	sp, #8
     be8:	0007      	movs	r7, r0
	return (void *)list->head;
     bea:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     bec:	6902      	ldr	r2, [r0, #16]
     bee:	3201      	adds	r2, #1
     bf0:	4690      	mov	r8, r2
     bf2:	6102      	str	r2, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     bf4:	7e03      	ldrb	r3, [r0, #24]
     bf6:	07db      	lsls	r3, r3, #31
     bf8:	d411      	bmi.n	c1e <timer_process_counted+0x3e>
     bfa:	7e03      	ldrb	r3, [r0, #24]
     bfc:	079b      	lsls	r3, r3, #30
     bfe:	d40e      	bmi.n	c1e <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     c00:	2c00      	cmp	r4, #0
     c02:	d010      	beq.n	c26 <timer_process_counted+0x46>
     c04:	0013      	movs	r3, r2
     c06:	6862      	ldr	r2, [r4, #4]
     c08:	1a9b      	subs	r3, r3, r2
     c0a:	68a2      	ldr	r2, [r4, #8]
     c0c:	4293      	cmp	r3, r2
     c0e:	d30a      	bcc.n	c26 <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     c10:	2314      	movs	r3, #20
     c12:	469c      	mov	ip, r3
     c14:	4484      	add	ip, r0
     c16:	4663      	mov	r3, ip
     c18:	9301      	str	r3, [sp, #4]
     c1a:	4e12      	ldr	r6, [pc, #72]	; (c64 <timer_process_counted+0x84>)
     c1c:	e014      	b.n	c48 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     c1e:	7e3b      	ldrb	r3, [r7, #24]
     c20:	2202      	movs	r2, #2
     c22:	4313      	orrs	r3, r2
     c24:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     c26:	b002      	add	sp, #8
     c28:	bc04      	pop	{r2}
     c2a:	4690      	mov	r8, r2
     c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c2e:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     c30:	68e3      	ldr	r3, [r4, #12]
     c32:	0020      	movs	r0, r4
     c34:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     c36:	2d00      	cmp	r5, #0
     c38:	d0f5      	beq.n	c26 <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     c3a:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     c3c:	4643      	mov	r3, r8
     c3e:	686a      	ldr	r2, [r5, #4]
     c40:	1a9b      	subs	r3, r3, r2
     c42:	68aa      	ldr	r2, [r5, #8]
     c44:	4293      	cmp	r3, r2
     c46:	d3ee      	bcc.n	c26 <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     c48:	9801      	ldr	r0, [sp, #4]
     c4a:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     c4c:	7c23      	ldrb	r3, [r4, #16]
     c4e:	2b01      	cmp	r3, #1
     c50:	d1ed      	bne.n	c2e <timer_process_counted+0x4e>
			tmp->time_label = time;
     c52:	4643      	mov	r3, r8
     c54:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     c56:	4642      	mov	r2, r8
     c58:	0021      	movs	r1, r4
     c5a:	9801      	ldr	r0, [sp, #4]
     c5c:	4b02      	ldr	r3, [pc, #8]	; (c68 <timer_process_counted+0x88>)
     c5e:	4798      	blx	r3
     c60:	e7e5      	b.n	c2e <timer_process_counted+0x4e>
     c62:	46c0      	nop			; (mov r8, r8)
     c64:	00000ef5 	.word	0x00000ef5
     c68:	00000b71 	.word	0x00000b71

00000c6c <timer_init>:
{
     c6c:	b570      	push	{r4, r5, r6, lr}
     c6e:	0004      	movs	r4, r0
     c70:	000d      	movs	r5, r1
     c72:	0016      	movs	r6, r2
	ASSERT(descr && hw && func);
     c74:	2800      	cmp	r0, #0
     c76:	d013      	beq.n	ca0 <timer_init+0x34>
     c78:	2900      	cmp	r1, #0
     c7a:	d013      	beq.n	ca4 <timer_init+0x38>
     c7c:	0010      	movs	r0, r2
     c7e:	1e43      	subs	r3, r0, #1
     c80:	4198      	sbcs	r0, r3
     c82:	223b      	movs	r2, #59	; 0x3b
     c84:	4908      	ldr	r1, [pc, #32]	; (ca8 <timer_init+0x3c>)
     c86:	4b09      	ldr	r3, [pc, #36]	; (cac <timer_init+0x40>)
     c88:	4798      	blx	r3
	descr->func = func;
     c8a:	0020      	movs	r0, r4
     c8c:	c040      	stmia	r0!, {r6}
	descr->func->init(&descr->device, hw);
     c8e:	6833      	ldr	r3, [r6, #0]
     c90:	0029      	movs	r1, r5
     c92:	4798      	blx	r3
	descr->time                           = 0;
     c94:	2300      	movs	r3, #0
     c96:	6163      	str	r3, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
     c98:	4b05      	ldr	r3, [pc, #20]	; (cb0 <timer_init+0x44>)
     c9a:	6063      	str	r3, [r4, #4]
}
     c9c:	2000      	movs	r0, #0
     c9e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
     ca0:	2000      	movs	r0, #0
     ca2:	e7ee      	b.n	c82 <timer_init+0x16>
     ca4:	2000      	movs	r0, #0
     ca6:	e7ec      	b.n	c82 <timer_init+0x16>
     ca8:	00005768 	.word	0x00005768
     cac:	00000e95 	.word	0x00000e95
     cb0:	00000be1 	.word	0x00000be1

00000cb4 <timer_start>:
{
     cb4:	b570      	push	{r4, r5, r6, lr}
     cb6:	1e04      	subs	r4, r0, #0
	ASSERT(descr && descr->func);
     cb8:	d014      	beq.n	ce4 <timer_start+0x30>
     cba:	6800      	ldr	r0, [r0, #0]
     cbc:	1e43      	subs	r3, r0, #1
     cbe:	4198      	sbcs	r0, r3
     cc0:	b2c0      	uxtb	r0, r0
     cc2:	2254      	movs	r2, #84	; 0x54
     cc4:	490a      	ldr	r1, [pc, #40]	; (cf0 <timer_start+0x3c>)
     cc6:	4b0b      	ldr	r3, [pc, #44]	; (cf4 <timer_start+0x40>)
     cc8:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
     cca:	1d25      	adds	r5, r4, #4
     ccc:	6823      	ldr	r3, [r4, #0]
     cce:	699b      	ldr	r3, [r3, #24]
     cd0:	0028      	movs	r0, r5
     cd2:	4798      	blx	r3
     cd4:	2800      	cmp	r0, #0
     cd6:	d107      	bne.n	ce8 <timer_start+0x34>
	descr->func->start_timer(&descr->device);
     cd8:	6823      	ldr	r3, [r4, #0]
     cda:	689b      	ldr	r3, [r3, #8]
     cdc:	0028      	movs	r0, r5
     cde:	4798      	blx	r3
	return ERR_NONE;
     ce0:	2000      	movs	r0, #0
}
     ce2:	bd70      	pop	{r4, r5, r6, pc}
     ce4:	2000      	movs	r0, #0
     ce6:	e7ec      	b.n	cc2 <timer_start+0xe>
		return ERR_DENIED;
     ce8:	2011      	movs	r0, #17
     cea:	4240      	negs	r0, r0
     cec:	e7f9      	b.n	ce2 <timer_start+0x2e>
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	00005768 	.word	0x00005768
     cf4:	00000e95 	.word	0x00000e95

00000cf8 <timer_stop>:
{
     cf8:	b570      	push	{r4, r5, r6, lr}
     cfa:	1e04      	subs	r4, r0, #0
	ASSERT(descr && descr->func);
     cfc:	d014      	beq.n	d28 <timer_stop+0x30>
     cfe:	6800      	ldr	r0, [r0, #0]
     d00:	1e43      	subs	r3, r0, #1
     d02:	4198      	sbcs	r0, r3
     d04:	b2c0      	uxtb	r0, r0
     d06:	2262      	movs	r2, #98	; 0x62
     d08:	490a      	ldr	r1, [pc, #40]	; (d34 <timer_stop+0x3c>)
     d0a:	4b0b      	ldr	r3, [pc, #44]	; (d38 <timer_stop+0x40>)
     d0c:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
     d0e:	1d25      	adds	r5, r4, #4
     d10:	6823      	ldr	r3, [r4, #0]
     d12:	699b      	ldr	r3, [r3, #24]
     d14:	0028      	movs	r0, r5
     d16:	4798      	blx	r3
     d18:	2800      	cmp	r0, #0
     d1a:	d007      	beq.n	d2c <timer_stop+0x34>
	descr->func->stop_timer(&descr->device);
     d1c:	6823      	ldr	r3, [r4, #0]
     d1e:	68db      	ldr	r3, [r3, #12]
     d20:	0028      	movs	r0, r5
     d22:	4798      	blx	r3
	return ERR_NONE;
     d24:	2000      	movs	r0, #0
}
     d26:	bd70      	pop	{r4, r5, r6, pc}
     d28:	2000      	movs	r0, #0
     d2a:	e7ec      	b.n	d06 <timer_stop+0xe>
		return ERR_DENIED;
     d2c:	2011      	movs	r0, #17
     d2e:	4240      	negs	r0, r0
     d30:	e7f9      	b.n	d26 <timer_stop+0x2e>
     d32:	46c0      	nop			; (mov r8, r8)
     d34:	00005768 	.word	0x00005768
     d38:	00000e95 	.word	0x00000e95

00000d3c <timer_add_task>:
{
     d3c:	b570      	push	{r4, r5, r6, lr}
     d3e:	b082      	sub	sp, #8
     d40:	0004      	movs	r4, r0
     d42:	000d      	movs	r5, r1
	ASSERT(descr && task && descr->func);
     d44:	2800      	cmp	r0, #0
     d46:	d025      	beq.n	d94 <timer_add_task+0x58>
     d48:	2900      	cmp	r1, #0
     d4a:	d025      	beq.n	d98 <timer_add_task+0x5c>
     d4c:	6800      	ldr	r0, [r0, #0]
     d4e:	1e43      	subs	r3, r0, #1
     d50:	4198      	sbcs	r0, r3
     d52:	227b      	movs	r2, #123	; 0x7b
     d54:	491f      	ldr	r1, [pc, #124]	; (dd4 <timer_add_task+0x98>)
     d56:	4b20      	ldr	r3, [pc, #128]	; (dd8 <timer_add_task+0x9c>)
     d58:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     d5a:	7f23      	ldrb	r3, [r4, #28]
     d5c:	2201      	movs	r2, #1
     d5e:	4313      	orrs	r3, r2
     d60:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
     d62:	0026      	movs	r6, r4
     d64:	3618      	adds	r6, #24
     d66:	0029      	movs	r1, r5
     d68:	0030      	movs	r0, r6
     d6a:	4b1c      	ldr	r3, [pc, #112]	; (ddc <timer_add_task+0xa0>)
     d6c:	4798      	blx	r3
     d6e:	2800      	cmp	r0, #0
     d70:	d114      	bne.n	d9c <timer_add_task+0x60>
	task->time_label = descr->time;
     d72:	6963      	ldr	r3, [r4, #20]
     d74:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     d76:	6962      	ldr	r2, [r4, #20]
     d78:	0029      	movs	r1, r5
     d7a:	0030      	movs	r0, r6
     d7c:	4b18      	ldr	r3, [pc, #96]	; (de0 <timer_add_task+0xa4>)
     d7e:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     d80:	7f23      	ldrb	r3, [r4, #28]
     d82:	2201      	movs	r2, #1
     d84:	4393      	bics	r3, r2
     d86:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     d88:	7f23      	ldrb	r3, [r4, #28]
	return ERR_NONE;
     d8a:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     d8c:	079b      	lsls	r3, r3, #30
     d8e:	d411      	bmi.n	db4 <timer_add_task+0x78>
}
     d90:	b002      	add	sp, #8
     d92:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
     d94:	2000      	movs	r0, #0
     d96:	e7dc      	b.n	d52 <timer_add_task+0x16>
     d98:	2000      	movs	r0, #0
     d9a:	e7da      	b.n	d52 <timer_add_task+0x16>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     d9c:	7f23      	ldrb	r3, [r4, #28]
     d9e:	2201      	movs	r2, #1
     da0:	4393      	bics	r3, r2
     da2:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
     da4:	327f      	adds	r2, #127	; 0x7f
     da6:	490b      	ldr	r1, [pc, #44]	; (dd4 <timer_add_task+0x98>)
     da8:	2000      	movs	r0, #0
     daa:	4b0b      	ldr	r3, [pc, #44]	; (dd8 <timer_add_task+0x9c>)
     dac:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     dae:	2012      	movs	r0, #18
     db0:	4240      	negs	r0, r0
     db2:	e7ed      	b.n	d90 <timer_add_task+0x54>
		CRITICAL_SECTION_ENTER()
     db4:	a801      	add	r0, sp, #4
     db6:	4b0b      	ldr	r3, [pc, #44]	; (de4 <timer_add_task+0xa8>)
     db8:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     dba:	7f23      	ldrb	r3, [r4, #28]
     dbc:	2202      	movs	r2, #2
     dbe:	4393      	bics	r3, r2
     dc0:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
     dc2:	1d20      	adds	r0, r4, #4
     dc4:	6823      	ldr	r3, [r4, #0]
     dc6:	69db      	ldr	r3, [r3, #28]
     dc8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     dca:	a801      	add	r0, sp, #4
     dcc:	4b06      	ldr	r3, [pc, #24]	; (de8 <timer_add_task+0xac>)
     dce:	4798      	blx	r3
	return ERR_NONE;
     dd0:	2000      	movs	r0, #0
     dd2:	e7dd      	b.n	d90 <timer_add_task+0x54>
     dd4:	00005768 	.word	0x00005768
     dd8:	00000e95 	.word	0x00000e95
     ddc:	00000e9d 	.word	0x00000e9d
     de0:	00000b71 	.word	0x00000b71
     de4:	00001a99 	.word	0x00001a99
     de8:	00001aa7 	.word	0x00001aa7

00000dec <timer_remove_task>:
{
     dec:	b570      	push	{r4, r5, r6, lr}
     dee:	b082      	sub	sp, #8
     df0:	0004      	movs	r4, r0
     df2:	000d      	movs	r5, r1
	ASSERT(descr && task && descr->func);
     df4:	2800      	cmp	r0, #0
     df6:	d022      	beq.n	e3e <timer_remove_task+0x52>
     df8:	2900      	cmp	r1, #0
     dfa:	d022      	beq.n	e42 <timer_remove_task+0x56>
     dfc:	6800      	ldr	r0, [r0, #0]
     dfe:	1e43      	subs	r3, r0, #1
     e00:	4198      	sbcs	r0, r3
     e02:	2296      	movs	r2, #150	; 0x96
     e04:	491d      	ldr	r1, [pc, #116]	; (e7c <timer_remove_task+0x90>)
     e06:	4b1e      	ldr	r3, [pc, #120]	; (e80 <timer_remove_task+0x94>)
     e08:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     e0a:	7f23      	ldrb	r3, [r4, #28]
     e0c:	2201      	movs	r2, #1
     e0e:	4313      	orrs	r3, r2
     e10:	7723      	strb	r3, [r4, #28]
	if (!is_list_element(&descr->tasks, task)) {
     e12:	0026      	movs	r6, r4
     e14:	3618      	adds	r6, #24
     e16:	0029      	movs	r1, r5
     e18:	0030      	movs	r0, r6
     e1a:	4b1a      	ldr	r3, [pc, #104]	; (e84 <timer_remove_task+0x98>)
     e1c:	4798      	blx	r3
     e1e:	2800      	cmp	r0, #0
     e20:	d011      	beq.n	e46 <timer_remove_task+0x5a>
	list_delete_element(&descr->tasks, task);
     e22:	0029      	movs	r1, r5
     e24:	0030      	movs	r0, r6
     e26:	4b18      	ldr	r3, [pc, #96]	; (e88 <timer_remove_task+0x9c>)
     e28:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     e2a:	7f23      	ldrb	r3, [r4, #28]
     e2c:	2201      	movs	r2, #1
     e2e:	4393      	bics	r3, r2
     e30:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     e32:	7f23      	ldrb	r3, [r4, #28]
	return ERR_NONE;
     e34:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     e36:	079b      	lsls	r3, r3, #30
     e38:	d410      	bmi.n	e5c <timer_remove_task+0x70>
}
     e3a:	b002      	add	sp, #8
     e3c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
     e3e:	2000      	movs	r0, #0
     e40:	e7df      	b.n	e02 <timer_remove_task+0x16>
     e42:	2000      	movs	r0, #0
     e44:	e7dd      	b.n	e02 <timer_remove_task+0x16>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     e46:	7f23      	ldrb	r3, [r4, #28]
     e48:	2201      	movs	r2, #1
     e4a:	4393      	bics	r3, r2
     e4c:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
     e4e:	329a      	adds	r2, #154	; 0x9a
     e50:	490a      	ldr	r1, [pc, #40]	; (e7c <timer_remove_task+0x90>)
     e52:	4b0b      	ldr	r3, [pc, #44]	; (e80 <timer_remove_task+0x94>)
     e54:	4798      	blx	r3
		return ERR_NOT_FOUND;
     e56:	200a      	movs	r0, #10
     e58:	4240      	negs	r0, r0
     e5a:	e7ee      	b.n	e3a <timer_remove_task+0x4e>
		CRITICAL_SECTION_ENTER()
     e5c:	a801      	add	r0, sp, #4
     e5e:	4b0b      	ldr	r3, [pc, #44]	; (e8c <timer_remove_task+0xa0>)
     e60:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     e62:	7f23      	ldrb	r3, [r4, #28]
     e64:	2202      	movs	r2, #2
     e66:	4393      	bics	r3, r2
     e68:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
     e6a:	1d20      	adds	r0, r4, #4
     e6c:	6823      	ldr	r3, [r4, #0]
     e6e:	69db      	ldr	r3, [r3, #28]
     e70:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     e72:	a801      	add	r0, sp, #4
     e74:	4b06      	ldr	r3, [pc, #24]	; (e90 <timer_remove_task+0xa4>)
     e76:	4798      	blx	r3
	return ERR_NONE;
     e78:	2000      	movs	r0, #0
     e7a:	e7de      	b.n	e3a <timer_remove_task+0x4e>
     e7c:	00005768 	.word	0x00005768
     e80:	00000e95 	.word	0x00000e95
     e84:	00000e9d 	.word	0x00000e9d
     e88:	00000f03 	.word	0x00000f03
     e8c:	00001a99 	.word	0x00001a99
     e90:	00001aa7 	.word	0x00001aa7

00000e94 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     e94:	2800      	cmp	r0, #0
     e96:	d100      	bne.n	e9a <assert+0x6>
		__asm("BKPT #0");
     e98:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     e9a:	4770      	bx	lr

00000e9c <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     e9c:	6803      	ldr	r3, [r0, #0]
     e9e:	2b00      	cmp	r3, #0
     ea0:	d00a      	beq.n	eb8 <is_list_element+0x1c>
		if (it == element) {
     ea2:	428b      	cmp	r3, r1
     ea4:	d00a      	beq.n	ebc <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     ea6:	681b      	ldr	r3, [r3, #0]
     ea8:	2b00      	cmp	r3, #0
     eaa:	d003      	beq.n	eb4 <is_list_element+0x18>
		if (it == element) {
     eac:	4299      	cmp	r1, r3
     eae:	d1fa      	bne.n	ea6 <is_list_element+0xa>
			return true;
     eb0:	2001      	movs	r0, #1
     eb2:	e000      	b.n	eb6 <is_list_element+0x1a>
		}
	}

	return false;
     eb4:	2000      	movs	r0, #0
}
     eb6:	4770      	bx	lr
	return false;
     eb8:	2000      	movs	r0, #0
     eba:	e7fc      	b.n	eb6 <is_list_element+0x1a>
			return true;
     ebc:	2001      	movs	r0, #1
     ebe:	e7fa      	b.n	eb6 <is_list_element+0x1a>

00000ec0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     ec0:	b570      	push	{r4, r5, r6, lr}
     ec2:	0004      	movs	r4, r0
     ec4:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     ec6:	4b06      	ldr	r3, [pc, #24]	; (ee0 <list_insert_as_head+0x20>)
     ec8:	4798      	blx	r3
     eca:	2301      	movs	r3, #1
     ecc:	4058      	eors	r0, r3
     ece:	b2c0      	uxtb	r0, r0
     ed0:	2239      	movs	r2, #57	; 0x39
     ed2:	4904      	ldr	r1, [pc, #16]	; (ee4 <list_insert_as_head+0x24>)
     ed4:	4b04      	ldr	r3, [pc, #16]	; (ee8 <list_insert_as_head+0x28>)
     ed6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     ed8:	6823      	ldr	r3, [r4, #0]
     eda:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     edc:	6025      	str	r5, [r4, #0]
}
     ede:	bd70      	pop	{r4, r5, r6, pc}
     ee0:	00000e9d 	.word	0x00000e9d
     ee4:	00005780 	.word	0x00005780
     ee8:	00000e95 	.word	0x00000e95

00000eec <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     eec:	6803      	ldr	r3, [r0, #0]
     eee:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     ef0:	6001      	str	r1, [r0, #0]
}
     ef2:	4770      	bx	lr

00000ef4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     ef4:	6803      	ldr	r3, [r0, #0]
     ef6:	2b00      	cmp	r3, #0
     ef8:	d001      	beq.n	efe <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     efa:	681a      	ldr	r2, [r3, #0]
     efc:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     efe:	0018      	movs	r0, r3
     f00:	4770      	bx	lr

00000f02 <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
     f02:	2900      	cmp	r1, #0
     f04:	d019      	beq.n	f3a <list_delete_element+0x38>
		return false;
	}

	if (list->head == element) {
     f06:	6802      	ldr	r2, [r0, #0]
     f08:	4291      	cmp	r1, r2
     f0a:	d00b      	beq.n	f24 <list_delete_element+0x22>
		list->head = list->head->next;
		return true;
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
     f0c:	2a00      	cmp	r2, #0
     f0e:	d016      	beq.n	f3e <list_delete_element+0x3c>
     f10:	6813      	ldr	r3, [r2, #0]
     f12:	4299      	cmp	r1, r3
     f14:	d00a      	beq.n	f2c <list_delete_element+0x2a>
     f16:	2b00      	cmp	r3, #0
     f18:	d00d      	beq.n	f36 <list_delete_element+0x34>
     f1a:	681a      	ldr	r2, [r3, #0]
     f1c:	4291      	cmp	r1, r2
     f1e:	d006      	beq.n	f2e <list_delete_element+0x2c>
     f20:	0013      	movs	r3, r2
     f22:	e7f8      	b.n	f16 <list_delete_element+0x14>
		list->head = list->head->next;
     f24:	6813      	ldr	r3, [r2, #0]
     f26:	6003      	str	r3, [r0, #0]
		return true;
     f28:	2001      	movs	r0, #1
     f2a:	e003      	b.n	f34 <list_delete_element+0x32>
		while (it && it->next != element) {
     f2c:	0013      	movs	r3, r2
			it = it->next;
		}
		if (it) {
			it->next = ((struct list_element *)element)->next;
     f2e:	680a      	ldr	r2, [r1, #0]
     f30:	601a      	str	r2, [r3, #0]
			return true;
     f32:	2001      	movs	r0, #1
		}
	}

	return false;
}
     f34:	4770      	bx	lr
	return false;
     f36:	2000      	movs	r0, #0
     f38:	e7fc      	b.n	f34 <list_delete_element+0x32>
		return false;
     f3a:	2000      	movs	r0, #0
     f3c:	e7fa      	b.n	f34 <list_delete_element+0x32>
	return false;
     f3e:	2000      	movs	r0, #0
     f40:	e7f8      	b.n	f34 <list_delete_element+0x32>
	...

00000f44 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     f44:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     f46:	4a08      	ldr	r2, [pc, #32]	; (f68 <_init_chip+0x24>)
     f48:	6853      	ldr	r3, [r2, #4]
     f4a:	2108      	movs	r1, #8
     f4c:	430b      	orrs	r3, r1
     f4e:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     f50:	4b06      	ldr	r3, [pc, #24]	; (f6c <_init_chip+0x28>)
     f52:	4798      	blx	r3
	_sysctrl_init_sources();
     f54:	4b06      	ldr	r3, [pc, #24]	; (f70 <_init_chip+0x2c>)
     f56:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     f58:	2080      	movs	r0, #128	; 0x80
     f5a:	4c06      	ldr	r4, [pc, #24]	; (f74 <_init_chip+0x30>)
     f5c:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     f5e:	4b06      	ldr	r3, [pc, #24]	; (f78 <_init_chip+0x34>)
     f60:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     f62:	207f      	movs	r0, #127	; 0x7f
     f64:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     f66:	bd10      	pop	{r4, pc}
     f68:	41004000 	.word	0x41004000
     f6c:	00001031 	.word	0x00001031
     f70:	00001301 	.word	0x00001301
     f74:	00000f7d 	.word	0x00000f7d
     f78:	00001345 	.word	0x00001345

00000f7c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     f7c:	07c3      	lsls	r3, r0, #31
     f7e:	d509      	bpl.n	f94 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     f80:	4b22      	ldr	r3, [pc, #136]	; (100c <_gclk_init_generators_by_fref+0x90>)
     f82:	2280      	movs	r2, #128	; 0x80
     f84:	0052      	lsls	r2, r2, #1
     f86:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     f88:	4a21      	ldr	r2, [pc, #132]	; (1010 <_gclk_init_generators_by_fref+0x94>)
     f8a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     f8c:	001a      	movs	r2, r3
     f8e:	7853      	ldrb	r3, [r2, #1]
     f90:	09db      	lsrs	r3, r3, #7
     f92:	d1fc      	bne.n	f8e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     f94:	0783      	lsls	r3, r0, #30
     f96:	d509      	bpl.n	fac <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     f98:	4b1c      	ldr	r3, [pc, #112]	; (100c <_gclk_init_generators_by_fref+0x90>)
     f9a:	2202      	movs	r2, #2
     f9c:	32ff      	adds	r2, #255	; 0xff
     f9e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     fa0:	4a1c      	ldr	r2, [pc, #112]	; (1014 <_gclk_init_generators_by_fref+0x98>)
     fa2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     fa4:	001a      	movs	r2, r3
     fa6:	7853      	ldrb	r3, [r2, #1]
     fa8:	09db      	lsrs	r3, r3, #7
     faa:	d1fc      	bne.n	fa6 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
     fac:	0743      	lsls	r3, r0, #29
     fae:	d508      	bpl.n	fc2 <_gclk_init_generators_by_fref+0x46>
	((Gclk *)hw)->GENDIV.reg = data;
     fb0:	4b16      	ldr	r3, [pc, #88]	; (100c <_gclk_init_generators_by_fref+0x90>)
     fb2:	4a19      	ldr	r2, [pc, #100]	; (1018 <_gclk_init_generators_by_fref+0x9c>)
     fb4:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     fb6:	4a19      	ldr	r2, [pc, #100]	; (101c <_gclk_init_generators_by_fref+0xa0>)
     fb8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     fba:	001a      	movs	r2, r3
     fbc:	7853      	ldrb	r3, [r2, #1]
     fbe:	09db      	lsrs	r3, r3, #7
     fc0:	d1fc      	bne.n	fbc <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     fc2:	0703      	lsls	r3, r0, #28
     fc4:	d509      	bpl.n	fda <_gclk_init_generators_by_fref+0x5e>
	((Gclk *)hw)->GENDIV.reg = data;
     fc6:	4b11      	ldr	r3, [pc, #68]	; (100c <_gclk_init_generators_by_fref+0x90>)
     fc8:	2204      	movs	r2, #4
     fca:	32ff      	adds	r2, #255	; 0xff
     fcc:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     fce:	4a14      	ldr	r2, [pc, #80]	; (1020 <_gclk_init_generators_by_fref+0xa4>)
     fd0:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     fd2:	001a      	movs	r2, r3
     fd4:	7853      	ldrb	r3, [r2, #1]
     fd6:	09db      	lsrs	r3, r3, #7
     fd8:	d1fc      	bne.n	fd4 <_gclk_init_generators_by_fref+0x58>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
     fda:	0683      	lsls	r3, r0, #26
     fdc:	d508      	bpl.n	ff0 <_gclk_init_generators_by_fref+0x74>
	((Gclk *)hw)->GENDIV.reg = data;
     fde:	4b0b      	ldr	r3, [pc, #44]	; (100c <_gclk_init_generators_by_fref+0x90>)
     fe0:	4a10      	ldr	r2, [pc, #64]	; (1024 <_gclk_init_generators_by_fref+0xa8>)
     fe2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     fe4:	4a10      	ldr	r2, [pc, #64]	; (1028 <_gclk_init_generators_by_fref+0xac>)
     fe6:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     fe8:	001a      	movs	r2, r3
     fea:	7853      	ldrb	r3, [r2, #1]
     fec:	09db      	lsrs	r3, r3, #7
     fee:	d1fc      	bne.n	fea <_gclk_init_generators_by_fref+0x6e>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
     ff0:	0603      	lsls	r3, r0, #24
     ff2:	d509      	bpl.n	1008 <_gclk_init_generators_by_fref+0x8c>
	((Gclk *)hw)->GENDIV.reg = data;
     ff4:	4b05      	ldr	r3, [pc, #20]	; (100c <_gclk_init_generators_by_fref+0x90>)
     ff6:	2208      	movs	r2, #8
     ff8:	32ff      	adds	r2, #255	; 0xff
     ffa:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     ffc:	4a0b      	ldr	r2, [pc, #44]	; (102c <_gclk_init_generators_by_fref+0xb0>)
     ffe:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1000:	001a      	movs	r2, r3
    1002:	7853      	ldrb	r3, [r2, #1]
    1004:	09db      	lsrs	r3, r3, #7
    1006:	d1fc      	bne.n	1002 <_gclk_init_generators_by_fref+0x86>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    1008:	4770      	bx	lr
    100a:	46c0      	nop			; (mov r8, r8)
    100c:	40000c00 	.word	0x40000c00
    1010:	00090800 	.word	0x00090800
    1014:	00090701 	.word	0x00090701
    1018:	00000802 	.word	0x00000802
    101c:	00090602 	.word	0x00090602
    1020:	00090603 	.word	0x00090603
    1024:	00002005 	.word	0x00002005
    1028:	00090305 	.word	0x00090305
    102c:	00090307 	.word	0x00090307

00001030 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1030:	4b06      	ldr	r3, [pc, #24]	; (104c <_pm_init+0x1c>)
    1032:	7a1a      	ldrb	r2, [r3, #8]
    1034:	b2d2      	uxtb	r2, r2
    1036:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1038:	7a5a      	ldrb	r2, [r3, #9]
    103a:	b2d2      	uxtb	r2, r2
    103c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    103e:	7a9a      	ldrb	r2, [r3, #10]
    1040:	b2d2      	uxtb	r2, r2
    1042:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1044:	7ada      	ldrb	r2, [r3, #11]
    1046:	b2d2      	uxtb	r2, r2
    1048:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    104a:	4770      	bx	lr
    104c:	40000400 	.word	0x40000400

00001050 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1050:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1052:	07db      	lsls	r3, r3, #31
    1054:	d409      	bmi.n	106a <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1056:	6803      	ldr	r3, [r0, #0]
    1058:	2202      	movs	r2, #2
    105a:	4313      	orrs	r3, r2
    105c:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    105e:	3201      	adds	r2, #1
    1060:	69c3      	ldr	r3, [r0, #28]
    1062:	421a      	tst	r2, r3
    1064:	d1fc      	bne.n	1060 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1066:	2000      	movs	r0, #0
}
    1068:	4770      	bx	lr
		return ERR_BUSY;
    106a:	2004      	movs	r0, #4
    106c:	4240      	negs	r0, r0
    106e:	e7fb      	b.n	1068 <_spi_sync_enable+0x18>

00001070 <_spi_sync_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1070:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1072:	07db      	lsls	r3, r3, #31
    1074:	d409      	bmi.n	108a <_spi_sync_disable+0x1a>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1076:	6803      	ldr	r3, [r0, #0]
    1078:	2202      	movs	r2, #2
    107a:	4393      	bics	r3, r2
    107c:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    107e:	3201      	adds	r2, #1
    1080:	69c3      	ldr	r3, [r0, #28]
    1082:	421a      	tst	r2, r3
    1084:	d1fc      	bne.n	1080 <_spi_sync_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1086:	2000      	movs	r0, #0
}
    1088:	4770      	bx	lr
		return ERR_BUSY;
    108a:	2004      	movs	r0, #4
    108c:	4240      	negs	r0, r0
    108e:	e7fb      	b.n	1088 <_spi_sync_disable+0x18>

00001090 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1090:	b570      	push	{r4, r5, r6, lr}
    1092:	0005      	movs	r5, r0
    1094:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1096:	4b35      	ldr	r3, [pc, #212]	; (116c <_spi_m_sync_init+0xdc>)
    1098:	18cb      	adds	r3, r1, r3
    109a:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    109c:	b2db      	uxtb	r3, r3
    109e:	2b00      	cmp	r3, #0
    10a0:	d00b      	beq.n	10ba <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    10a2:	2800      	cmp	r0, #0
    10a4:	d050      	beq.n	1148 <_spi_m_sync_init+0xb8>
    10a6:	1e60      	subs	r0, r4, #1
    10a8:	4184      	sbcs	r4, r0
    10aa:	b2e0      	uxtb	r0, r4
    10ac:	4a30      	ldr	r2, [pc, #192]	; (1170 <_spi_m_sync_init+0xe0>)
    10ae:	4931      	ldr	r1, [pc, #196]	; (1174 <_spi_m_sync_init+0xe4>)
    10b0:	4b31      	ldr	r3, [pc, #196]	; (1178 <_spi_m_sync_init+0xe8>)
    10b2:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    10b4:	200d      	movs	r0, #13
    10b6:	4240      	negs	r0, r0
    10b8:	e045      	b.n	1146 <_spi_m_sync_init+0xb6>
	ASSERT(dev && hw);
    10ba:	2800      	cmp	r0, #0
    10bc:	d14c      	bne.n	1158 <_spi_m_sync_init+0xc8>
    10be:	4a2c      	ldr	r2, [pc, #176]	; (1170 <_spi_m_sync_init+0xe0>)
    10c0:	492c      	ldr	r1, [pc, #176]	; (1174 <_spi_m_sync_init+0xe4>)
    10c2:	2000      	movs	r0, #0
    10c4:	4b2c      	ldr	r3, [pc, #176]	; (1178 <_spi_m_sync_init+0xe8>)
    10c6:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    10c8:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    10ca:	07db      	lsls	r3, r3, #31
    10cc:	d418      	bmi.n	1100 <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    10ce:	2203      	movs	r2, #3
    10d0:	69e3      	ldr	r3, [r4, #28]
    10d2:	421a      	tst	r2, r3
    10d4:	d1fc      	bne.n	10d0 <_spi_m_sync_init+0x40>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    10d6:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    10d8:	079b      	lsls	r3, r3, #30
    10da:	d50b      	bpl.n	10f4 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    10dc:	6823      	ldr	r3, [r4, #0]
    10de:	2202      	movs	r2, #2
    10e0:	4393      	bics	r3, r2
    10e2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    10e4:	3201      	adds	r2, #1
    10e6:	69e3      	ldr	r3, [r4, #28]
    10e8:	421a      	tst	r2, r3
    10ea:	d1fc      	bne.n	10e6 <_spi_m_sync_init+0x56>
    10ec:	2202      	movs	r2, #2
    10ee:	69e3      	ldr	r3, [r4, #28]
    10f0:	421a      	tst	r2, r3
    10f2:	d1fc      	bne.n	10ee <_spi_m_sync_init+0x5e>
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    10f4:	230d      	movs	r3, #13
    10f6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    10f8:	2203      	movs	r2, #3
    10fa:	69e3      	ldr	r3, [r4, #28]
    10fc:	421a      	tst	r2, r3
    10fe:	d1fc      	bne.n	10fa <_spi_m_sync_init+0x6a>
    1100:	2201      	movs	r2, #1
    1102:	69e3      	ldr	r3, [r4, #28]
    1104:	421a      	tst	r2, r3
    1106:	d1fc      	bne.n	1102 <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1108:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    110a:	0020      	movs	r0, r4
    110c:	1e43      	subs	r3, r0, #1
    110e:	4198      	sbcs	r0, r3
    1110:	b2c0      	uxtb	r0, r0
    1112:	4a1a      	ldr	r2, [pc, #104]	; (117c <_spi_m_sync_init+0xec>)
    1114:	4917      	ldr	r1, [pc, #92]	; (1174 <_spi_m_sync_init+0xe4>)
    1116:	4b18      	ldr	r3, [pc, #96]	; (1178 <_spi_m_sync_init+0xe8>)
    1118:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    111a:	4b19      	ldr	r3, [pc, #100]	; (1180 <_spi_m_sync_init+0xf0>)
    111c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    111e:	2203      	movs	r2, #3
    1120:	69e3      	ldr	r3, [r4, #28]
    1122:	421a      	tst	r2, r3
    1124:	d1fc      	bne.n	1120 <_spi_m_sync_init+0x90>
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1126:	2380      	movs	r3, #128	; 0x80
    1128:	029b      	lsls	r3, r3, #10
    112a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    112c:	2207      	movs	r2, #7
    112e:	69e3      	ldr	r3, [r4, #28]
    1130:	421a      	tst	r2, r3
    1132:	d1fc      	bne.n	112e <_spi_m_sync_init+0x9e>
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1134:	2301      	movs	r3, #1
    1136:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1138:	2100      	movs	r1, #0
    113a:	2230      	movs	r2, #48	; 0x30
    113c:	54a1      	strb	r1, [r4, r2]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    113e:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1140:	4b10      	ldr	r3, [pc, #64]	; (1184 <_spi_m_sync_init+0xf4>)
    1142:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    1144:	2000      	movs	r0, #0
}
    1146:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    1148:	4a09      	ldr	r2, [pc, #36]	; (1170 <_spi_m_sync_init+0xe0>)
    114a:	490a      	ldr	r1, [pc, #40]	; (1174 <_spi_m_sync_init+0xe4>)
    114c:	2000      	movs	r0, #0
    114e:	4b0a      	ldr	r3, [pc, #40]	; (1178 <_spi_m_sync_init+0xe8>)
    1150:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1152:	200d      	movs	r0, #13
    1154:	4240      	negs	r0, r0
    1156:	e7f6      	b.n	1146 <_spi_m_sync_init+0xb6>
	ASSERT(dev && hw);
    1158:	0008      	movs	r0, r1
    115a:	1e43      	subs	r3, r0, #1
    115c:	4198      	sbcs	r0, r3
    115e:	b2c0      	uxtb	r0, r0
    1160:	4a03      	ldr	r2, [pc, #12]	; (1170 <_spi_m_sync_init+0xe0>)
    1162:	4904      	ldr	r1, [pc, #16]	; (1174 <_spi_m_sync_init+0xe4>)
    1164:	4b04      	ldr	r3, [pc, #16]	; (1178 <_spi_m_sync_init+0xe8>)
    1166:	4798      	blx	r3
    1168:	e7ae      	b.n	10c8 <_spi_m_sync_init+0x38>
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	bdfff800 	.word	0xbdfff800
    1170:	00000921 	.word	0x00000921
    1174:	000057a0 	.word	0x000057a0
    1178:	00000e95 	.word	0x00000e95
    117c:	000008eb 	.word	0x000008eb
    1180:	0011000c 	.word	0x0011000c
    1184:	000001ff 	.word	0x000001ff

00001188 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1188:	b510      	push	{r4, lr}
    118a:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    118c:	d00b      	beq.n	11a6 <_spi_m_sync_enable+0x1e>
    118e:	6800      	ldr	r0, [r0, #0]
    1190:	1e43      	subs	r3, r0, #1
    1192:	4198      	sbcs	r0, r3
    1194:	b2c0      	uxtb	r0, r0
    1196:	4a05      	ldr	r2, [pc, #20]	; (11ac <_spi_m_sync_enable+0x24>)
    1198:	4905      	ldr	r1, [pc, #20]	; (11b0 <_spi_m_sync_enable+0x28>)
    119a:	4b06      	ldr	r3, [pc, #24]	; (11b4 <_spi_m_sync_enable+0x2c>)
    119c:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    119e:	6820      	ldr	r0, [r4, #0]
    11a0:	4b05      	ldr	r3, [pc, #20]	; (11b8 <_spi_m_sync_enable+0x30>)
    11a2:	4798      	blx	r3
}
    11a4:	bd10      	pop	{r4, pc}
    11a6:	2000      	movs	r0, #0
    11a8:	e7f5      	b.n	1196 <_spi_m_sync_enable+0xe>
    11aa:	46c0      	nop			; (mov r8, r8)
    11ac:	0000097c 	.word	0x0000097c
    11b0:	000057a0 	.word	0x000057a0
    11b4:	00000e95 	.word	0x00000e95
    11b8:	00001051 	.word	0x00001051

000011bc <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    11bc:	b510      	push	{r4, lr}
    11be:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    11c0:	d00b      	beq.n	11da <_spi_m_sync_disable+0x1e>
    11c2:	6800      	ldr	r0, [r0, #0]
    11c4:	1e43      	subs	r3, r0, #1
    11c6:	4198      	sbcs	r0, r3
    11c8:	b2c0      	uxtb	r0, r0
    11ca:	4a05      	ldr	r2, [pc, #20]	; (11e0 <_spi_m_sync_disable+0x24>)
    11cc:	4905      	ldr	r1, [pc, #20]	; (11e4 <_spi_m_sync_disable+0x28>)
    11ce:	4b06      	ldr	r3, [pc, #24]	; (11e8 <_spi_m_sync_disable+0x2c>)
    11d0:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    11d2:	6820      	ldr	r0, [r4, #0]
    11d4:	4b05      	ldr	r3, [pc, #20]	; (11ec <_spi_m_sync_disable+0x30>)
    11d6:	4798      	blx	r3
}
    11d8:	bd10      	pop	{r4, pc}
    11da:	2000      	movs	r0, #0
    11dc:	e7f5      	b.n	11ca <_spi_m_sync_disable+0xe>
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	00000998 	.word	0x00000998
    11e4:	000057a0 	.word	0x000057a0
    11e8:	00000e95 	.word	0x00000e95
    11ec:	00001071 	.word	0x00001071

000011f0 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    11f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    11f2:	46de      	mov	lr, fp
    11f4:	4657      	mov	r7, sl
    11f6:	464e      	mov	r6, r9
    11f8:	4645      	mov	r5, r8
    11fa:	b5e0      	push	{r5, r6, r7, lr}
    11fc:	b083      	sub	sp, #12
    11fe:	4681      	mov	r9, r0
    1200:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    1202:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1204:	680b      	ldr	r3, [r1, #0]
    1206:	4698      	mov	r8, r3
    1208:	684d      	ldr	r5, [r1, #4]
    120a:	7903      	ldrb	r3, [r0, #4]
    120c:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    120e:	2800      	cmp	r0, #0
    1210:	d015      	beq.n	123e <_spi_m_sync_trans+0x4e>
    1212:	0020      	movs	r0, r4
    1214:	1e43      	subs	r3, r0, #1
    1216:	4198      	sbcs	r0, r3
    1218:	b2c0      	uxtb	r0, r0
    121a:	4a36      	ldr	r2, [pc, #216]	; (12f4 <_spi_m_sync_trans+0x104>)
    121c:	4936      	ldr	r1, [pc, #216]	; (12f8 <_spi_m_sync_trans+0x108>)
    121e:	4b37      	ldr	r3, [pc, #220]	; (12fc <_spi_m_sync_trans+0x10c>)
    1220:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1222:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1224:	075b      	lsls	r3, r3, #29
    1226:	d13f      	bne.n	12a8 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1228:	2303      	movs	r3, #3
    122a:	69e0      	ldr	r0, [r4, #28]
    122c:	4018      	ands	r0, r3
    122e:	d1fc      	bne.n	122a <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1230:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1232:	079b      	lsls	r3, r3, #30
    1234:	d53b      	bpl.n	12ae <_spi_m_sync_trans+0xbe>
    1236:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1238:	2301      	movs	r3, #1
    123a:	469c      	mov	ip, r3
    123c:	e009      	b.n	1252 <_spi_m_sync_trans+0x62>
    123e:	2000      	movs	r0, #0
    1240:	e7eb      	b.n	121a <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    1242:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    1244:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1246:	b25b      	sxtb	r3, r3
    1248:	2b00      	cmp	r3, #0
    124a:	db16      	blt.n	127a <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    124c:	68b3      	ldr	r3, [r6, #8]
    124e:	4283      	cmp	r3, r0
    1250:	d927      	bls.n	12a2 <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1252:	7e23      	ldrb	r3, [r4, #24]
    1254:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1256:	2104      	movs	r1, #4
    1258:	4219      	tst	r1, r3
    125a:	d02b      	beq.n	12b4 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    125c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    125e:	2d00      	cmp	r5, #0
    1260:	d0f0      	beq.n	1244 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    1262:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    1264:	9901      	ldr	r1, [sp, #4]
    1266:	2901      	cmp	r1, #1
    1268:	d9eb      	bls.n	1242 <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    126a:	0a3f      	lsrs	r7, r7, #8
    126c:	706f      	strb	r7, [r5, #1]
    126e:	3502      	adds	r5, #2
    1270:	e7e8      	b.n	1244 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    1272:	2101      	movs	r1, #1
    1274:	468b      	mov	fp, r1
    1276:	44d8      	add	r8, fp
    1278:	e037      	b.n	12ea <_spi_m_sync_trans+0xfa>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    127a:	2301      	movs	r3, #1
    127c:	425b      	negs	r3, r3
    127e:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1280:	3381      	adds	r3, #129	; 0x81
    1282:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1284:	2013      	movs	r0, #19
    1286:	4240      	negs	r0, r0
	tmp &= mask;
    1288:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    128a:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    128c:	4213      	tst	r3, r2
    128e:	d0fc      	beq.n	128a <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1290:	2303      	movs	r3, #3
    1292:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1294:	b003      	add	sp, #12
    1296:	bc3c      	pop	{r2, r3, r4, r5}
    1298:	4690      	mov	r8, r2
    129a:	4699      	mov	r9, r3
    129c:	46a2      	mov	sl, r4
    129e:	46ab      	mov	fp, r5
    12a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    12a2:	4293      	cmp	r3, r2
    12a4:	d8d5      	bhi.n	1252 <_spi_m_sync_trans+0x62>
    12a6:	e7ef      	b.n	1288 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    12a8:	2004      	movs	r0, #4
    12aa:	4240      	negs	r0, r0
    12ac:	e7f2      	b.n	1294 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    12ae:	2014      	movs	r0, #20
    12b0:	4240      	negs	r0, r0
    12b2:	e7ef      	b.n	1294 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    12b4:	4290      	cmp	r0, r2
    12b6:	d8c6      	bhi.n	1246 <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    12b8:	4667      	mov	r7, ip
    12ba:	421f      	tst	r7, r3
    12bc:	d0c3      	beq.n	1246 <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    12be:	464f      	mov	r7, r9
    12c0:	88ff      	ldrh	r7, [r7, #6]
    12c2:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    12c4:	4647      	mov	r7, r8
    12c6:	2f00      	cmp	r7, #0
    12c8:	d00f      	beq.n	12ea <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    12ca:	783f      	ldrb	r7, [r7, #0]
    12cc:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    12ce:	9901      	ldr	r1, [sp, #4]
    12d0:	2901      	cmp	r1, #1
    12d2:	d9ce      	bls.n	1272 <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    12d4:	4647      	mov	r7, r8
    12d6:	787f      	ldrb	r7, [r7, #1]
    12d8:	023f      	lsls	r7, r7, #8
    12da:	46bb      	mov	fp, r7
    12dc:	4657      	mov	r7, sl
    12de:	4659      	mov	r1, fp
    12e0:	430f      	orrs	r7, r1
    12e2:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    12e4:	2102      	movs	r1, #2
    12e6:	468b      	mov	fp, r1
    12e8:	44d8      	add	r8, fp
	ctrl->txcnt++;
    12ea:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    12ec:	4657      	mov	r7, sl
    12ee:	62a7      	str	r7, [r4, #40]	; 0x28
    12f0:	e7a9      	b.n	1246 <_spi_m_sync_trans+0x56>
    12f2:	46c0      	nop			; (mov r8, r8)
    12f4:	00000a81 	.word	0x00000a81
    12f8:	000057a0 	.word	0x000057a0
    12fc:	00000e95 	.word	0x00000e95

00001300 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1300:	4b0e      	ldr	r3, [pc, #56]	; (133c <_sysctrl_init_sources+0x3c>)
    1302:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1304:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1306:	480e      	ldr	r0, [pc, #56]	; (1340 <_sysctrl_init_sources+0x40>)
    1308:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    130a:	0f92      	lsrs	r2, r2, #30
    130c:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    130e:	2002      	movs	r0, #2
    1310:	4302      	orrs	r2, r0
    1312:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1314:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1316:	699a      	ldr	r2, [r3, #24]
    1318:	4302      	orrs	r2, r0
    131a:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    131c:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    131e:	211f      	movs	r1, #31
    1320:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1322:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1324:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1326:	2208      	movs	r2, #8
    1328:	68cb      	ldr	r3, [r1, #12]
    132a:	421a      	tst	r2, r3
    132c:	d0fc      	beq.n	1328 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    132e:	4a03      	ldr	r2, [pc, #12]	; (133c <_sysctrl_init_sources+0x3c>)
    1330:	6a13      	ldr	r3, [r2, #32]
    1332:	2180      	movs	r1, #128	; 0x80
    1334:	430b      	orrs	r3, r1
    1336:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1338:	4770      	bx	lr
    133a:	46c0      	nop			; (mov r8, r8)
    133c:	40000800 	.word	0x40000800
    1340:	0fff0000 	.word	0x0fff0000

00001344 <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    1344:	b530      	push	{r4, r5, lr}
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1346:	2202      	movs	r2, #2
    1348:	4b25      	ldr	r3, [pc, #148]	; (13e0 <_sysctrl_init_referenced_generators+0x9c>)
    134a:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    134c:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    134e:	320e      	adds	r2, #14
    1350:	68cb      	ldr	r3, [r1, #12]
    1352:	421a      	tst	r2, r3
    1354:	d0fc      	beq.n	1350 <_sysctrl_init_referenced_generators+0xc>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1356:	4a23      	ldr	r2, [pc, #140]	; (13e4 <_sysctrl_init_referenced_generators+0xa0>)
    1358:	4b21      	ldr	r3, [pc, #132]	; (13e0 <_sysctrl_init_referenced_generators+0x9c>)
    135a:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    135c:	4b22      	ldr	r3, [pc, #136]	; (13e8 <_sysctrl_init_referenced_generators+0xa4>)
    135e:	681b      	ldr	r3, [r3, #0]
    1360:	0e9b      	lsrs	r3, r3, #26
    1362:	2b3f      	cmp	r3, #63	; 0x3f
    1364:	d032      	beq.n	13cc <_sysctrl_init_referenced_generators+0x88>
    1366:	029b      	lsls	r3, r3, #10
    1368:	2280      	movs	r2, #128	; 0x80
    136a:	0092      	lsls	r2, r2, #2
    136c:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    136e:	4b1c      	ldr	r3, [pc, #112]	; (13e0 <_sysctrl_init_referenced_generators+0x9c>)
    1370:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1372:	2293      	movs	r2, #147	; 0x93
    1374:	0052      	lsls	r2, r2, #1
    1376:	849a      	strh	r2, [r3, #36]	; 0x24
	((Gclk *)hw)->CLKCTRL.reg = data;
    1378:	491c      	ldr	r1, [pc, #112]	; (13ec <_sysctrl_init_referenced_generators+0xa8>)
    137a:	4a1d      	ldr	r2, [pc, #116]	; (13f0 <_sysctrl_init_referenced_generators+0xac>)
    137c:	8051      	strh	r1, [r2, #2]
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    137e:	2102      	movs	r1, #2
    1380:	2244      	movs	r2, #68	; 0x44
    1382:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    1384:	4a1b      	ldr	r2, [pc, #108]	; (13f4 <_sysctrl_init_referenced_generators+0xb0>)
    1386:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    1388:	2220      	movs	r2, #32
    138a:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    138c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    138e:	075b      	lsls	r3, r3, #29
    1390:	d51f      	bpl.n	13d2 <_sysctrl_init_referenced_generators+0x8e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1392:	4913      	ldr	r1, [pc, #76]	; (13e0 <_sysctrl_init_referenced_generators+0x9c>)
	tmp &= mask;
    1394:	3a10      	subs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1396:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    1398:	421a      	tst	r2, r3
    139a:	d0fc      	beq.n	1396 <_sysctrl_init_referenced_generators+0x52>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    139c:	4a10      	ldr	r2, [pc, #64]	; (13e0 <_sysctrl_init_referenced_generators+0x9c>)
    139e:	2350      	movs	r3, #80	; 0x50
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    13a0:	2004      	movs	r0, #4
    13a2:	2401      	movs	r4, #1
    13a4:	2502      	movs	r5, #2
    13a6:	5cd1      	ldrb	r1, [r2, r3]
    13a8:	4201      	tst	r1, r0
    13aa:	d105      	bne.n	13b8 <_sysctrl_init_referenced_generators+0x74>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    13ac:	5cd1      	ldrb	r1, [r2, r3]
    13ae:	4221      	tst	r1, r4
    13b0:	d102      	bne.n	13b8 <_sysctrl_init_referenced_generators+0x74>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    13b2:	5cd1      	ldrb	r1, [r2, r3]
    13b4:	4229      	tst	r1, r5
    13b6:	d0f6      	beq.n	13a6 <_sysctrl_init_referenced_generators+0x62>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    13b8:	4a0d      	ldr	r2, [pc, #52]	; (13f0 <_sysctrl_init_referenced_generators+0xac>)
    13ba:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    13bc:	09db      	lsrs	r3, r3, #7
    13be:	d1fc      	bne.n	13ba <_sysctrl_init_referenced_generators+0x76>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    13c0:	4a07      	ldr	r2, [pc, #28]	; (13e0 <_sysctrl_init_referenced_generators+0x9c>)
    13c2:	6993      	ldr	r3, [r2, #24]
    13c4:	2102      	movs	r1, #2
    13c6:	438b      	bics	r3, r1
    13c8:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    13ca:	bd30      	pop	{r4, r5, pc}
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    13cc:	22fc      	movs	r2, #252	; 0xfc
    13ce:	01d2      	lsls	r2, r2, #7
    13d0:	e7cd      	b.n	136e <_sysctrl_init_referenced_generators+0x2a>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    13d2:	4903      	ldr	r1, [pc, #12]	; (13e0 <_sysctrl_init_referenced_generators+0x9c>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    13d4:	2210      	movs	r2, #16
    13d6:	68cb      	ldr	r3, [r1, #12]
    13d8:	421a      	tst	r2, r3
    13da:	d0fc      	beq.n	13d6 <_sysctrl_init_referenced_generators+0x92>
    13dc:	e7de      	b.n	139c <_sysctrl_init_referenced_generators+0x58>
    13de:	46c0      	nop			; (mov r8, r8)
    13e0:	40000800 	.word	0x40000800
    13e4:	0401bb80 	.word	0x0401bb80
    13e8:	00806024 	.word	0x00806024
    13ec:	00004701 	.word	0x00004701
    13f0:	40000c00 	.word	0x40000c00
    13f4:	000d05b7 	.word	0x000d05b7

000013f8 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    13f8:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    13fa:	6813      	ldr	r3, [r2, #0]
    13fc:	2102      	movs	r1, #2
    13fe:	430b      	orrs	r3, r1
    1400:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1402:	3101      	adds	r1, #1
    1404:	6893      	ldr	r3, [r2, #8]
    1406:	4219      	tst	r1, r3
    1408:	d1fc      	bne.n	1404 <_tcc_timer_start+0xc>
}
    140a:	4770      	bx	lr

0000140c <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    140c:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    140e:	6813      	ldr	r3, [r2, #0]
    1410:	2102      	movs	r1, #2
    1412:	438b      	bics	r3, r1
    1414:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1416:	3101      	adds	r1, #1
    1418:	6893      	ldr	r3, [r2, #8]
    141a:	4219      	tst	r1, r3
    141c:	d1fc      	bne.n	1418 <_tcc_timer_stop+0xc>
}
    141e:	4770      	bx	lr

00001420 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    1420:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    1422:	6411      	str	r1, [r2, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1424:	2180      	movs	r1, #128	; 0x80
    1426:	6893      	ldr	r3, [r2, #8]
    1428:	4219      	tst	r1, r3
    142a:	d1fc      	bne.n	1426 <_tcc_timer_set_period+0x6>
}
    142c:	4770      	bx	lr

0000142e <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
	return hri_tcc_read_PER_reg(device->hw);
    142e:	68c2      	ldr	r2, [r0, #12]
    1430:	2180      	movs	r1, #128	; 0x80
    1432:	6893      	ldr	r3, [r2, #8]
    1434:	4219      	tst	r1, r3
    1436:	d1fc      	bne.n	1432 <_tcc_timer_get_period+0x4>
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	return ((Tcc *)hw)->PER.reg;
    1438:	6c10      	ldr	r0, [r2, #64]	; 0x40
}
    143a:	4770      	bx	lr

0000143c <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    143c:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    143e:	2103      	movs	r1, #3
    1440:	6893      	ldr	r3, [r2, #8]
    1442:	4219      	tst	r1, r3
    1444:	d1fc      	bne.n	1440 <_tcc_timer_is_started+0x4>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1446:	6810      	ldr	r0, [r2, #0]
	return (bool)tmp;
    1448:	0780      	lsls	r0, r0, #30
    144a:	0fc0      	lsrs	r0, r0, #31
}
    144c:	4770      	bx	lr
	...

00001450 <_tcc_timer_init>:
{
    1450:	b510      	push	{r4, lr}
static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
		if (_cfgs[i].hw == hw) {
    1452:	4b36      	ldr	r3, [pc, #216]	; (152c <_tcc_timer_init+0xdc>)
    1454:	681b      	ldr	r3, [r3, #0]
    1456:	4299      	cmp	r1, r3
    1458:	d002      	beq.n	1460 <_tcc_timer_init+0x10>
		return ERR_NOT_FOUND;
    145a:	200a      	movs	r0, #10
    145c:	4240      	negs	r0, r0
}
    145e:	bd10      	pop	{r4, pc}
	device->hw = hw;
    1460:	60c1      	str	r1, [r0, #12]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    1462:	688b      	ldr	r3, [r1, #8]
	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    1464:	07db      	lsls	r3, r3, #31
    1466:	d418      	bmi.n	149a <_tcc_timer_init+0x4a>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1468:	2203      	movs	r2, #3
    146a:	688b      	ldr	r3, [r1, #8]
    146c:	421a      	tst	r2, r3
    146e:	d1fc      	bne.n	146a <_tcc_timer_init+0x1a>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1470:	680b      	ldr	r3, [r1, #0]
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    1472:	079b      	lsls	r3, r3, #30
    1474:	d50b      	bpl.n	148e <_tcc_timer_init+0x3e>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1476:	680b      	ldr	r3, [r1, #0]
    1478:	2202      	movs	r2, #2
    147a:	4393      	bics	r3, r2
    147c:	600b      	str	r3, [r1, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    147e:	3201      	adds	r2, #1
    1480:	688b      	ldr	r3, [r1, #8]
    1482:	421a      	tst	r2, r3
    1484:	d1fc      	bne.n	1480 <_tcc_timer_init+0x30>
    1486:	2202      	movs	r2, #2
    1488:	688b      	ldr	r3, [r1, #8]
    148a:	421a      	tst	r2, r3
    148c:	d1fc      	bne.n	1488 <_tcc_timer_init+0x38>
	((Tcc *)hw)->CTRLA.reg = data;
    148e:	2301      	movs	r3, #1
    1490:	600b      	str	r3, [r1, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1492:	2203      	movs	r2, #3
    1494:	688b      	ldr	r3, [r1, #8]
    1496:	421a      	tst	r2, r3
    1498:	d1fc      	bne.n	1494 <_tcc_timer_init+0x44>
    149a:	2201      	movs	r2, #1
    149c:	688b      	ldr	r3, [r1, #8]
    149e:	421a      	tst	r2, r3
    14a0:	d1fc      	bne.n	149c <_tcc_timer_init+0x4c>
	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    14a2:	4b22      	ldr	r3, [pc, #136]	; (152c <_tcc_timer_init+0xdc>)
    14a4:	689b      	ldr	r3, [r3, #8]
	((Tcc *)hw)->CTRLA.reg = data;
    14a6:	600b      	str	r3, [r1, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    14a8:	2203      	movs	r2, #3
    14aa:	688b      	ldr	r3, [r1, #8]
    14ac:	421a      	tst	r2, r3
    14ae:	d1fc      	bne.n	14aa <_tcc_timer_init+0x5a>
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    14b0:	4b1e      	ldr	r3, [pc, #120]	; (152c <_tcc_timer_init+0xdc>)
    14b2:	7b1a      	ldrb	r2, [r3, #12]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    14b4:	714a      	strb	r2, [r1, #5]
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    14b6:	7b5a      	ldrb	r2, [r3, #13]
	((Tcc *)hw)->DBGCTRL.reg = data;
    14b8:	778a      	strb	r2, [r1, #30]
	((Tcc *)hw)->EVCTRL.reg = data;
    14ba:	691a      	ldr	r2, [r3, #16]
    14bc:	620a      	str	r2, [r1, #32]
	hri_tcc_write_PER_reg(hw, cfg->per);
    14be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    14c0:	640b      	str	r3, [r1, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    14c2:	2280      	movs	r2, #128	; 0x80
    14c4:	688b      	ldr	r3, [r1, #8]
    14c6:	421a      	tst	r2, r3
    14c8:	d1fc      	bne.n	14c4 <_tcc_timer_init+0x74>
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    14ca:	2301      	movs	r3, #1
    14cc:	628b      	str	r3, [r1, #40]	; 0x28
	if (hw == TCC0) {
    14ce:	4b18      	ldr	r3, [pc, #96]	; (1530 <_tcc_timer_init+0xe0>)
    14d0:	4299      	cmp	r1, r3
    14d2:	d025      	beq.n	1520 <_tcc_timer_init+0xd0>
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    14d4:	4b15      	ldr	r3, [pc, #84]	; (152c <_tcc_timer_init+0xdc>)
    14d6:	791b      	ldrb	r3, [r3, #4]
    14d8:	b25b      	sxtb	r3, r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    14da:	2b00      	cmp	r3, #0
    14dc:	db23      	blt.n	1526 <_tcc_timer_init+0xd6>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14de:	221f      	movs	r2, #31
    14e0:	401a      	ands	r2, r3
    14e2:	2301      	movs	r3, #1
    14e4:	4093      	lsls	r3, r2
    14e6:	2280      	movs	r2, #128	; 0x80
    14e8:	4912      	ldr	r1, [pc, #72]	; (1534 <_tcc_timer_init+0xe4>)
    14ea:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    14ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    14f0:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    14f4:	4b0d      	ldr	r3, [pc, #52]	; (152c <_tcc_timer_init+0xdc>)
    14f6:	2104      	movs	r1, #4
    14f8:	5659      	ldrsb	r1, [r3, r1]
	return ERR_NONE;
    14fa:	2000      	movs	r0, #0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    14fc:	2900      	cmp	r1, #0
    14fe:	dbae      	blt.n	145e <_tcc_timer_init+0xe>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1500:	3a61      	subs	r2, #97	; 0x61
    1502:	4011      	ands	r1, r2
    1504:	2301      	movs	r3, #1
    1506:	001c      	movs	r4, r3
    1508:	408c      	lsls	r4, r1
    150a:	490a      	ldr	r1, [pc, #40]	; (1534 <_tcc_timer_init+0xe4>)
    150c:	3081      	adds	r0, #129	; 0x81
    150e:	30ff      	adds	r0, #255	; 0xff
    1510:	500c      	str	r4, [r1, r0]
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    1512:	4806      	ldr	r0, [pc, #24]	; (152c <_tcc_timer_init+0xdc>)
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1514:	7900      	ldrb	r0, [r0, #4]
    1516:	4002      	ands	r2, r0
    1518:	4093      	lsls	r3, r2
    151a:	600b      	str	r3, [r1, #0]
	return ERR_NONE;
    151c:	2000      	movs	r0, #0
    151e:	e79e      	b.n	145e <_tcc_timer_init+0xe>
		_tcc0_dev = (struct _timer_device *)dev;
    1520:	4b05      	ldr	r3, [pc, #20]	; (1538 <_tcc_timer_init+0xe8>)
    1522:	6018      	str	r0, [r3, #0]
    1524:	e7d6      	b.n	14d4 <_tcc_timer_init+0x84>
	return ERR_NONE;
    1526:	2000      	movs	r0, #0
    1528:	e799      	b.n	145e <_tcc_timer_init+0xe>
    152a:	46c0      	nop			; (mov r8, r8)
    152c:	20000004 	.word	0x20000004
    1530:	42002000 	.word	0x42002000
    1534:	e000e100 	.word	0xe000e100
    1538:	2000052c 	.word	0x2000052c

0000153c <_tcc_timer_set_irq>:
{
    153c:	b510      	push	{r4, lr}
		if (_cfgs[i].hw == hw) {
    153e:	68c2      	ldr	r2, [r0, #12]
    1540:	4b04      	ldr	r3, [pc, #16]	; (1554 <_tcc_timer_set_irq+0x18>)
    1542:	681b      	ldr	r3, [r3, #0]
    1544:	429a      	cmp	r2, r3
    1546:	d000      	beq.n	154a <_tcc_timer_set_irq+0xe>
}
    1548:	bd10      	pop	{r4, pc}
		_irq_set((IRQn_Type)cfg->irq);
    154a:	4b02      	ldr	r3, [pc, #8]	; (1554 <_tcc_timer_set_irq+0x18>)
    154c:	7918      	ldrb	r0, [r3, #4]
    154e:	4b02      	ldr	r3, [pc, #8]	; (1558 <_tcc_timer_set_irq+0x1c>)
    1550:	4798      	blx	r3
}
    1552:	e7f9      	b.n	1548 <_tcc_timer_set_irq+0xc>
    1554:	20000004 	.word	0x20000004
    1558:	00001ab5 	.word	0x00001ab5

0000155c <_tcc_timer_deinit>:
	void *const     hw  = device->hw;
    155c:	68c3      	ldr	r3, [r0, #12]
		if (_cfgs[i].hw == hw) {
    155e:	4a12      	ldr	r2, [pc, #72]	; (15a8 <_tcc_timer_deinit+0x4c>)
    1560:	6812      	ldr	r2, [r2, #0]
    1562:	4293      	cmp	r3, r2
    1564:	d000      	beq.n	1568 <_tcc_timer_deinit+0xc>
}
    1566:	4770      	bx	lr
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    1568:	4a0f      	ldr	r2, [pc, #60]	; (15a8 <_tcc_timer_deinit+0x4c>)
    156a:	7912      	ldrb	r2, [r2, #4]
    156c:	b252      	sxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
    156e:	2a00      	cmp	r2, #0
    1570:	db0a      	blt.n	1588 <_tcc_timer_deinit+0x2c>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1572:	211f      	movs	r1, #31
    1574:	4011      	ands	r1, r2
    1576:	2201      	movs	r2, #1
    1578:	408a      	lsls	r2, r1
    157a:	2180      	movs	r1, #128	; 0x80
    157c:	480b      	ldr	r0, [pc, #44]	; (15ac <_tcc_timer_deinit+0x50>)
    157e:	5042      	str	r2, [r0, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1580:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1584:	f3bf 8f6f 	isb	sy
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1588:	681a      	ldr	r2, [r3, #0]
    158a:	2102      	movs	r1, #2
    158c:	438a      	bics	r2, r1
    158e:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1590:	3101      	adds	r1, #1
    1592:	689a      	ldr	r2, [r3, #8]
    1594:	4211      	tst	r1, r2
    1596:	d1fc      	bne.n	1592 <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    1598:	681a      	ldr	r2, [r3, #0]
    159a:	2101      	movs	r1, #1
    159c:	430a      	orrs	r2, r1
    159e:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    15a0:	689a      	ldr	r2, [r3, #8]
    15a2:	4211      	tst	r1, r2
    15a4:	d1fc      	bne.n	15a0 <_tcc_timer_deinit+0x44>
    15a6:	e7de      	b.n	1566 <_tcc_timer_deinit+0xa>
    15a8:	20000004 	.word	0x20000004
    15ac:	e000e100 	.word	0xe000e100

000015b0 <_tcc_get_timer>:
	return &_tcc_timer_functions;
    15b0:	4801      	ldr	r0, [pc, #4]	; (15b8 <_tcc_get_timer+0x8>)
}
    15b2:	3028      	adds	r0, #40	; 0x28
    15b4:	4770      	bx	lr
    15b6:	46c0      	nop			; (mov r8, r8)
    15b8:	20000004 	.word	0x20000004

000015bc <TCC0_Handler>:
{
    15bc:	b510      	push	{r4, lr}
	tcc_interrupt_handler(_tcc0_dev);
    15be:	4b06      	ldr	r3, [pc, #24]	; (15d8 <TCC0_Handler+0x1c>)
    15c0:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    15c2:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    15c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    15c6:	07d2      	lsls	r2, r2, #31
    15c8:	d400      	bmi.n	15cc <TCC0_Handler+0x10>
}
    15ca:	bd10      	pop	{r4, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    15cc:	2201      	movs	r2, #1
    15ce:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    15d0:	6803      	ldr	r3, [r0, #0]
    15d2:	4798      	blx	r3
}
    15d4:	e7f9      	b.n	15ca <TCC0_Handler+0xe>
    15d6:	46c0      	nop			; (mov r8, r8)
    15d8:	2000052c 	.word	0x2000052c

000015dc <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    15dc:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    15de:	8813      	ldrh	r3, [r2, #0]
    15e0:	2102      	movs	r1, #2
    15e2:	430b      	orrs	r3, r1
    15e4:	8013      	strh	r3, [r2, #0]
}
    15e6:	4770      	bx	lr

000015e8 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    15e8:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    15ea:	8813      	ldrh	r3, [r2, #0]
    15ec:	2102      	movs	r1, #2
    15ee:	438b      	bics	r3, r1
    15f0:	8013      	strh	r3, [r2, #0]
}
    15f2:	4770      	bx	lr

000015f4 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    15f4:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    15f6:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    15f8:	071b      	lsls	r3, r3, #28

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    15fa:	0f9b      	lsrs	r3, r3, #30
    15fc:	2b02      	cmp	r3, #2
    15fe:	d00b      	beq.n	1618 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1600:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1602:	071b      	lsls	r3, r3, #28
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1604:	0f9b      	lsrs	r3, r3, #30
    1606:	d009      	beq.n	161c <_tc_timer_set_period+0x28>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1608:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    160a:	071b      	lsls	r3, r3, #28
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    160c:	0f9b      	lsrs	r3, r3, #30
    160e:	2b01      	cmp	r3, #1
    1610:	d106      	bne.n	1620 <_tc_timer_set_period+0x2c>
		hri_tccount8_write_PER_reg(hw, (hri_tccount8_per_reg_t)clock_cycles);
    1612:	b2c9      	uxtb	r1, r1
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    1614:	7511      	strb	r1, [r2, #20]
	}
}
    1616:	e003      	b.n	1620 <_tc_timer_set_period+0x2c>
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1618:	6191      	str	r1, [r2, #24]
    161a:	e001      	b.n	1620 <_tc_timer_set_period+0x2c>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)clock_cycles);
    161c:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    161e:	8311      	strh	r1, [r2, #24]
}
    1620:	4770      	bx	lr

00001622 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    1622:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1624:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1626:	071b      	lsls	r3, r3, #28

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1628:	0f9b      	lsrs	r3, r3, #30
    162a:	2b02      	cmp	r3, #2
    162c:	d00c      	beq.n	1648 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    162e:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1630:	071b      	lsls	r3, r3, #28
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1632:	0f9b      	lsrs	r3, r3, #30
    1634:	d00a      	beq.n	164c <_tc_timer_get_period+0x2a>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1636:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1638:	071b      	lsls	r3, r3, #28
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    163a:	0f9b      	lsrs	r3, r3, #30
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    163c:	2000      	movs	r0, #0
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    163e:	2b01      	cmp	r3, #1
    1640:	d106      	bne.n	1650 <_tc_timer_get_period+0x2e>
	return ((Tc *)hw)->COUNT8.PER.reg;
    1642:	7d10      	ldrb	r0, [r2, #20]
    1644:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    1646:	e003      	b.n	1650 <_tc_timer_get_period+0x2e>
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    1648:	6990      	ldr	r0, [r2, #24]
		return hri_tccount32_read_CC_reg(hw, 0);
    164a:	e001      	b.n	1650 <_tc_timer_get_period+0x2e>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    164c:	8b10      	ldrh	r0, [r2, #24]
    164e:	b280      	uxth	r0, r0
}
    1650:	4770      	bx	lr

00001652 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1652:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1654:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    1656:	0780      	lsls	r0, r0, #30
    1658:	0fc0      	lsrs	r0, r0, #31
}
    165a:	4770      	bx	lr

0000165c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    165c:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    165e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1660:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1662:	07d2      	lsls	r2, r2, #31
    1664:	d400      	bmi.n	1668 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    1666:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1668:	2201      	movs	r2, #1
    166a:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    166c:	6803      	ldr	r3, [r0, #0]
    166e:	4798      	blx	r3
}
    1670:	e7f9      	b.n	1666 <tc_interrupt_handler+0xa>
	...

00001674 <_tc_timer_deinit>:
	void *const hw = device->hw;
    1674:	68c2      	ldr	r2, [r0, #12]
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1676:	4b0d      	ldr	r3, [pc, #52]	; (16ac <_tc_timer_deinit+0x38>)
    1678:	18d3      	adds	r3, r2, r3
    167a:	0a9b      	lsrs	r3, r3, #10
	NVIC_DisableIRQ((IRQn_Type)(TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    167c:	3312      	adds	r3, #18
  if ((int32_t)(IRQn) >= 0)
    167e:	b2d8      	uxtb	r0, r3
    1680:	061b      	lsls	r3, r3, #24
    1682:	d40a      	bmi.n	169a <_tc_timer_deinit+0x26>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1684:	211f      	movs	r1, #31
    1686:	4001      	ands	r1, r0
    1688:	2301      	movs	r3, #1
    168a:	408b      	lsls	r3, r1
    168c:	2180      	movs	r1, #128	; 0x80
    168e:	4808      	ldr	r0, [pc, #32]	; (16b0 <_tc_timer_deinit+0x3c>)
    1690:	5043      	str	r3, [r0, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1692:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1696:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    169a:	8813      	ldrh	r3, [r2, #0]
    169c:	2102      	movs	r1, #2
    169e:	438b      	bics	r3, r1
    16a0:	8013      	strh	r3, [r2, #0]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    16a2:	8813      	ldrh	r3, [r2, #0]
    16a4:	3901      	subs	r1, #1
    16a6:	430b      	orrs	r3, r1
    16a8:	8013      	strh	r3, [r2, #0]
}
    16aa:	4770      	bx	lr
    16ac:	bdffd400 	.word	0xbdffd400
    16b0:	e000e100 	.word	0xe000e100

000016b4 <_tc_timer_set_irq>:
{
    16b4:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    16b6:	68c0      	ldr	r0, [r0, #12]
    16b8:	4b04      	ldr	r3, [pc, #16]	; (16cc <_tc_timer_set_irq+0x18>)
    16ba:	469c      	mov	ip, r3
    16bc:	4460      	add	r0, ip
    16be:	0a80      	lsrs	r0, r0, #10
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    16c0:	3012      	adds	r0, #18
    16c2:	b2c0      	uxtb	r0, r0
    16c4:	4b02      	ldr	r3, [pc, #8]	; (16d0 <_tc_timer_set_irq+0x1c>)
    16c6:	4798      	blx	r3
}
    16c8:	bd10      	pop	{r4, pc}
    16ca:	46c0      	nop			; (mov r8, r8)
    16cc:	bdffd400 	.word	0xbdffd400
    16d0:	00001ab5 	.word	0x00001ab5

000016d4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    16d4:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    16d6:	4b10      	ldr	r3, [pc, #64]	; (1718 <get_tc_index+0x44>)
    16d8:	18c3      	adds	r3, r0, r3
    16da:	0a9b      	lsrs	r3, r3, #10
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    16dc:	3303      	adds	r3, #3
    16de:	b2db      	uxtb	r3, r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    16e0:	4a0e      	ldr	r2, [pc, #56]	; (171c <get_tc_index+0x48>)
    16e2:	7812      	ldrb	r2, [r2, #0]
    16e4:	429a      	cmp	r2, r3
    16e6:	d014      	beq.n	1712 <get_tc_index+0x3e>
    16e8:	4a0c      	ldr	r2, [pc, #48]	; (171c <get_tc_index+0x48>)
    16ea:	7d12      	ldrb	r2, [r2, #20]
    16ec:	429a      	cmp	r2, r3
    16ee:	d00e      	beq.n	170e <get_tc_index+0x3a>
    16f0:	2228      	movs	r2, #40	; 0x28
    16f2:	490a      	ldr	r1, [pc, #40]	; (171c <get_tc_index+0x48>)
    16f4:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    16f6:	2002      	movs	r0, #2
		if (_tcs[i].number == tc_offset) {
    16f8:	429a      	cmp	r2, r3
    16fa:	d00b      	beq.n	1714 <get_tc_index+0x40>
			return i;
		}
	}

	ASSERT(false);
    16fc:	22fe      	movs	r2, #254	; 0xfe
    16fe:	0052      	lsls	r2, r2, #1
    1700:	4907      	ldr	r1, [pc, #28]	; (1720 <get_tc_index+0x4c>)
    1702:	2000      	movs	r0, #0
    1704:	4b07      	ldr	r3, [pc, #28]	; (1724 <get_tc_index+0x50>)
    1706:	4798      	blx	r3
	return -1;
    1708:	2001      	movs	r0, #1
    170a:	4240      	negs	r0, r0
}
    170c:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    170e:	2001      	movs	r0, #1
    1710:	e000      	b.n	1714 <get_tc_index+0x40>
    1712:	2000      	movs	r0, #0
			return i;
    1714:	b240      	sxtb	r0, r0
    1716:	e7f9      	b.n	170c <get_tc_index+0x38>
    1718:	bdffd400 	.word	0xbdffd400
    171c:	2000004c 	.word	0x2000004c
    1720:	000057bc 	.word	0x000057bc
    1724:	00000e95 	.word	0x00000e95

00001728 <_tc_timer_init>:
{
    1728:	b570      	push	{r4, r5, r6, lr}
    172a:	0006      	movs	r6, r0
    172c:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    172e:	0008      	movs	r0, r1
    1730:	4b43      	ldr	r3, [pc, #268]	; (1840 <_tc_timer_init+0x118>)
    1732:	4798      	blx	r3
    1734:	0005      	movs	r5, r0
	device->hw = hw;
    1736:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1738:	229c      	movs	r2, #156	; 0x9c
    173a:	4942      	ldr	r1, [pc, #264]	; (1844 <_tc_timer_init+0x11c>)
    173c:	2001      	movs	r0, #1
    173e:	4b42      	ldr	r3, [pc, #264]	; (1848 <_tc_timer_init+0x120>)
    1740:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1742:	7be3      	ldrb	r3, [r4, #15]
    1744:	09db      	lsrs	r3, r3, #7
    1746:	d1fc      	bne.n	1742 <_tc_timer_init+0x1a>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1748:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    174a:	079b      	lsls	r3, r3, #30
    174c:	d504      	bpl.n	1758 <_tc_timer_init+0x30>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    174e:	2300      	movs	r3, #0
    1750:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1752:	7be3      	ldrb	r3, [r4, #15]
    1754:	09db      	lsrs	r3, r3, #7
    1756:	d1fc      	bne.n	1752 <_tc_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1758:	2301      	movs	r3, #1
    175a:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    175c:	7be3      	ldrb	r3, [r4, #15]
    175e:	09db      	lsrs	r3, r3, #7
    1760:	d1fc      	bne.n	175c <_tc_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1762:	00ab      	lsls	r3, r5, #2
    1764:	195b      	adds	r3, r3, r5
    1766:	009a      	lsls	r2, r3, #2
    1768:	4b38      	ldr	r3, [pc, #224]	; (184c <_tc_timer_init+0x124>)
    176a:	189b      	adds	r3, r3, r2
    176c:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    176e:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1770:	7919      	ldrb	r1, [r3, #4]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1772:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1774:	88db      	ldrh	r3, [r3, #6]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1776:	8163      	strh	r3, [r4, #10]
    1778:	230c      	movs	r3, #12
    177a:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    177c:	2b08      	cmp	r3, #8
    177e:	d031      	beq.n	17e4 <_tc_timer_init+0xbc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1780:	2b00      	cmp	r3, #0
    1782:	d13c      	bne.n	17fe <_tc_timer_init+0xd6>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1784:	4931      	ldr	r1, [pc, #196]	; (184c <_tc_timer_init+0x124>)
    1786:	00ab      	lsls	r3, r5, #2
    1788:	195a      	adds	r2, r3, r5
    178a:	0092      	lsls	r2, r2, #2
    178c:	188a      	adds	r2, r1, r2
    178e:	8992      	ldrh	r2, [r2, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1790:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    1792:	195b      	adds	r3, r3, r5
    1794:	009b      	lsls	r3, r3, #2
    1796:	18cb      	adds	r3, r1, r3
    1798:	8a1b      	ldrh	r3, [r3, #16]
    179a:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    179c:	2301      	movs	r3, #1
    179e:	7363      	strb	r3, [r4, #13]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    17a0:	4b2b      	ldr	r3, [pc, #172]	; (1850 <_tc_timer_init+0x128>)
    17a2:	429c      	cmp	r4, r3
    17a4:	d03c      	beq.n	1820 <_tc_timer_init+0xf8>
		_tc3_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC4) {
    17a6:	4b2b      	ldr	r3, [pc, #172]	; (1854 <_tc_timer_init+0x12c>)
    17a8:	429c      	cmp	r4, r3
    17aa:	d03c      	beq.n	1826 <_tc_timer_init+0xfe>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    17ac:	4b2a      	ldr	r3, [pc, #168]	; (1858 <_tc_timer_init+0x130>)
    17ae:	429c      	cmp	r4, r3
    17b0:	d041      	beq.n	1836 <_tc_timer_init+0x10e>
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    17b2:	4b2a      	ldr	r3, [pc, #168]	; (185c <_tc_timer_init+0x134>)
    17b4:	469c      	mov	ip, r3
    17b6:	4464      	add	r4, ip
    17b8:	0aa4      	lsrs	r4, r4, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    17ba:	3412      	adds	r4, #18
  if ((int32_t)(IRQn) >= 0)
    17bc:	b2e3      	uxtb	r3, r4
    17be:	0622      	lsls	r2, r4, #24
    17c0:	d40e      	bmi.n	17e0 <_tc_timer_init+0xb8>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17c2:	221f      	movs	r2, #31
    17c4:	401a      	ands	r2, r3
    17c6:	2301      	movs	r3, #1
    17c8:	4093      	lsls	r3, r2
    17ca:	4a25      	ldr	r2, [pc, #148]	; (1860 <_tc_timer_init+0x138>)
    17cc:	2180      	movs	r1, #128	; 0x80
    17ce:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    17d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17d4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17d8:	3101      	adds	r1, #1
    17da:	31ff      	adds	r1, #255	; 0xff
    17dc:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17de:	6013      	str	r3, [r2, #0]
}
    17e0:	2000      	movs	r0, #0
    17e2:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    17e4:	4919      	ldr	r1, [pc, #100]	; (184c <_tc_timer_init+0x124>)
    17e6:	00ab      	lsls	r3, r5, #2
    17e8:	195a      	adds	r2, r3, r5
    17ea:	0092      	lsls	r2, r2, #2
    17ec:	188a      	adds	r2, r1, r2
    17ee:	68d2      	ldr	r2, [r2, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    17f0:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    17f2:	195b      	adds	r3, r3, r5
    17f4:	009b      	lsls	r3, r3, #2
    17f6:	18cb      	adds	r3, r1, r3
    17f8:	691b      	ldr	r3, [r3, #16]
    17fa:	61e3      	str	r3, [r4, #28]
    17fc:	e7ce      	b.n	179c <_tc_timer_init+0x74>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    17fe:	2b04      	cmp	r3, #4
    1800:	d1cc      	bne.n	179c <_tc_timer_init+0x74>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    1802:	4912      	ldr	r1, [pc, #72]	; (184c <_tc_timer_init+0x124>)
    1804:	00ab      	lsls	r3, r5, #2
    1806:	195a      	adds	r2, r3, r5
    1808:	0092      	lsls	r2, r2, #2
    180a:	188a      	adds	r2, r1, r2
    180c:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    180e:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    1810:	7c12      	ldrb	r2, [r2, #16]
    1812:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1814:	195b      	adds	r3, r3, r5
    1816:	009b      	lsls	r3, r3, #2
    1818:	18cb      	adds	r3, r1, r3
    181a:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    181c:	7523      	strb	r3, [r4, #20]
    181e:	e7bd      	b.n	179c <_tc_timer_init+0x74>
		_tc3_dev = (struct _pwm_device *)dev;
    1820:	4b10      	ldr	r3, [pc, #64]	; (1864 <_tc_timer_init+0x13c>)
    1822:	601e      	str	r6, [r3, #0]
    1824:	e7c5      	b.n	17b2 <_tc_timer_init+0x8a>
		_tc4_dev = (struct _timer_device *)dev;
    1826:	4b0f      	ldr	r3, [pc, #60]	; (1864 <_tc_timer_init+0x13c>)
    1828:	605e      	str	r6, [r3, #4]
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    182a:	4b0c      	ldr	r3, [pc, #48]	; (185c <_tc_timer_init+0x134>)
    182c:	18e2      	adds	r2, r4, r3
    182e:	0a92      	lsrs	r2, r2, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1830:	3212      	adds	r2, #18
    1832:	b2d3      	uxtb	r3, r2
    1834:	e7c5      	b.n	17c2 <_tc_timer_init+0x9a>
		_tc5_dev = (struct _timer_device *)dev;
    1836:	4b0b      	ldr	r3, [pc, #44]	; (1864 <_tc_timer_init+0x13c>)
    1838:	609e      	str	r6, [r3, #8]
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    183a:	2314      	movs	r3, #20
    183c:	e7c1      	b.n	17c2 <_tc_timer_init+0x9a>
    183e:	46c0      	nop			; (mov r8, r8)
    1840:	000016d5 	.word	0x000016d5
    1844:	000057bc 	.word	0x000057bc
    1848:	00000e95 	.word	0x00000e95
    184c:	2000004c 	.word	0x2000004c
    1850:	42002c00 	.word	0x42002c00
    1854:	42003000 	.word	0x42003000
    1858:	42003400 	.word	0x42003400
    185c:	bdffd400 	.word	0xbdffd400
    1860:	e000e100 	.word	0xe000e100
    1864:	20000530 	.word	0x20000530

00001868 <_pwm_init>:
{
    1868:	b570      	push	{r4, r5, r6, lr}
    186a:	0005      	movs	r5, r0
    186c:	000c      	movs	r4, r1
	int8_t i   = get_tc_index(hw);
    186e:	0008      	movs	r0, r1
    1870:	4b38      	ldr	r3, [pc, #224]	; (1954 <_pwm_init+0xec>)
    1872:	4798      	blx	r3
	device->hw = hw;
    1874:	612c      	str	r4, [r5, #16]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1876:	7be3      	ldrb	r3, [r4, #15]
    1878:	09db      	lsrs	r3, r3, #7
    187a:	d1fc      	bne.n	1876 <_pwm_init+0xe>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    187c:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    187e:	079b      	lsls	r3, r3, #30
    1880:	d504      	bpl.n	188c <_pwm_init+0x24>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1882:	2300      	movs	r3, #0
    1884:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1886:	7be3      	ldrb	r3, [r4, #15]
    1888:	09db      	lsrs	r3, r3, #7
    188a:	d1fc      	bne.n	1886 <_pwm_init+0x1e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    188c:	2301      	movs	r3, #1
    188e:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1890:	7be3      	ldrb	r3, [r4, #15]
    1892:	09db      	lsrs	r3, r3, #7
    1894:	d1fc      	bne.n	1890 <_pwm_init+0x28>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1896:	0083      	lsls	r3, r0, #2
    1898:	181b      	adds	r3, r3, r0
    189a:	009a      	lsls	r2, r3, #2
    189c:	4b2e      	ldr	r3, [pc, #184]	; (1958 <_pwm_init+0xf0>)
    189e:	189b      	adds	r3, r3, r2
    18a0:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    18a2:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    18a4:	7919      	ldrb	r1, [r3, #4]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    18a6:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    18a8:	88db      	ldrh	r3, [r3, #6]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    18aa:	8163      	strh	r3, [r4, #10]
    18ac:	230c      	movs	r3, #12
    18ae:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    18b0:	2b08      	cmp	r3, #8
    18b2:	d030      	beq.n	1916 <_pwm_init+0xae>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    18b4:	2b00      	cmp	r3, #0
    18b6:	d14a      	bne.n	194e <_pwm_init+0xe6>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    18b8:	4927      	ldr	r1, [pc, #156]	; (1958 <_pwm_init+0xf0>)
    18ba:	0083      	lsls	r3, r0, #2
    18bc:	181a      	adds	r2, r3, r0
    18be:	0092      	lsls	r2, r2, #2
    18c0:	188a      	adds	r2, r1, r2
    18c2:	8992      	ldrh	r2, [r2, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    18c4:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    18c6:	1818      	adds	r0, r3, r0
    18c8:	0080      	lsls	r0, r0, #2
    18ca:	1808      	adds	r0, r1, r0
    18cc:	8a03      	ldrh	r3, [r0, #16]
    18ce:	8363      	strh	r3, [r4, #26]
	if (hw == TC3) {
    18d0:	4b22      	ldr	r3, [pc, #136]	; (195c <_pwm_init+0xf4>)
    18d2:	429c      	cmp	r4, r3
    18d4:	d02c      	beq.n	1930 <_pwm_init+0xc8>
	if (hw == TC4) {
    18d6:	4b22      	ldr	r3, [pc, #136]	; (1960 <_pwm_init+0xf8>)
    18d8:	429c      	cmp	r4, r3
    18da:	d02c      	beq.n	1936 <_pwm_init+0xce>
	if (hw == TC5) {
    18dc:	4b21      	ldr	r3, [pc, #132]	; (1964 <_pwm_init+0xfc>)
    18de:	429c      	cmp	r4, r3
    18e0:	d031      	beq.n	1946 <_pwm_init+0xde>
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    18e2:	4b21      	ldr	r3, [pc, #132]	; (1968 <_pwm_init+0x100>)
    18e4:	469c      	mov	ip, r3
    18e6:	4464      	add	r4, ip
    18e8:	0aa4      	lsrs	r4, r4, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    18ea:	3412      	adds	r4, #18
  if ((int32_t)(IRQn) >= 0)
    18ec:	b2e3      	uxtb	r3, r4
	return ERR_NONE;
    18ee:	2000      	movs	r0, #0
    18f0:	0622      	lsls	r2, r4, #24
    18f2:	d40f      	bmi.n	1914 <_pwm_init+0xac>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18f4:	221f      	movs	r2, #31
    18f6:	401a      	ands	r2, r3
    18f8:	2301      	movs	r3, #1
    18fa:	4093      	lsls	r3, r2
    18fc:	4a1b      	ldr	r2, [pc, #108]	; (196c <_pwm_init+0x104>)
    18fe:	2180      	movs	r1, #128	; 0x80
    1900:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1902:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1906:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    190a:	3101      	adds	r1, #1
    190c:	31ff      	adds	r1, #255	; 0xff
    190e:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1910:	6013      	str	r3, [r2, #0]
    1912:	2000      	movs	r0, #0
}
    1914:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1916:	4910      	ldr	r1, [pc, #64]	; (1958 <_pwm_init+0xf0>)
    1918:	0083      	lsls	r3, r0, #2
    191a:	181a      	adds	r2, r3, r0
    191c:	0092      	lsls	r2, r2, #2
    191e:	188a      	adds	r2, r1, r2
    1920:	68d2      	ldr	r2, [r2, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1922:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1924:	1818      	adds	r0, r3, r0
    1926:	0080      	lsls	r0, r0, #2
    1928:	1808      	adds	r0, r1, r0
    192a:	6903      	ldr	r3, [r0, #16]
    192c:	61e3      	str	r3, [r4, #28]
    192e:	e7cf      	b.n	18d0 <_pwm_init+0x68>
		_tc3_dev = (struct _pwm_device *)dev;
    1930:	4b0f      	ldr	r3, [pc, #60]	; (1970 <_pwm_init+0x108>)
    1932:	601d      	str	r5, [r3, #0]
    1934:	e7d5      	b.n	18e2 <_pwm_init+0x7a>
		_tc4_dev = (struct _timer_device *)dev;
    1936:	4b0e      	ldr	r3, [pc, #56]	; (1970 <_pwm_init+0x108>)
    1938:	605d      	str	r5, [r3, #4]
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    193a:	4b0b      	ldr	r3, [pc, #44]	; (1968 <_pwm_init+0x100>)
    193c:	18e2      	adds	r2, r4, r3
    193e:	0a92      	lsrs	r2, r2, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1940:	3212      	adds	r2, #18
    1942:	b2d3      	uxtb	r3, r2
    1944:	e7d6      	b.n	18f4 <_pwm_init+0x8c>
		_tc5_dev = (struct _timer_device *)dev;
    1946:	4b0a      	ldr	r3, [pc, #40]	; (1970 <_pwm_init+0x108>)
    1948:	609d      	str	r5, [r3, #8]
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    194a:	2314      	movs	r3, #20
    194c:	e7d2      	b.n	18f4 <_pwm_init+0x8c>
		return ERR_INVALID_DATA;
    194e:	2001      	movs	r0, #1
    1950:	4240      	negs	r0, r0
    1952:	e7df      	b.n	1914 <_pwm_init+0xac>
    1954:	000016d5 	.word	0x000016d5
    1958:	2000004c 	.word	0x2000004c
    195c:	42002c00 	.word	0x42002c00
    1960:	42003000 	.word	0x42003000
    1964:	42003400 	.word	0x42003400
    1968:	bdffd400 	.word	0xbdffd400
    196c:	e000e100 	.word	0xe000e100
    1970:	20000530 	.word	0x20000530

00001974 <_pwm_enable>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    1974:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    1976:	8813      	ldrh	r3, [r2, #0]
    1978:	2102      	movs	r1, #2
    197a:	430b      	orrs	r3, r1
    197c:	8013      	strh	r3, [r2, #0]
}
    197e:	4770      	bx	lr

00001980 <_pwm_disable>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    1980:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1982:	8813      	ldrh	r3, [r2, #0]
    1984:	2102      	movs	r1, #2
    1986:	438b      	bics	r3, r1
    1988:	8013      	strh	r3, [r2, #0]
}
    198a:	4770      	bx	lr

0000198c <_pwm_set_param>:
{
    198c:	b570      	push	{r4, r5, r6, lr}
    198e:	0006      	movs	r6, r0
    1990:	000d      	movs	r5, r1
    1992:	0014      	movs	r4, r2
	int8_t      i  = get_tc_index(device->hw);
    1994:	6900      	ldr	r0, [r0, #16]
    1996:	4b0b      	ldr	r3, [pc, #44]	; (19c4 <_pwm_set_param+0x38>)
    1998:	4798      	blx	r3
	void *const hw = device->hw;
    199a:	6936      	ldr	r6, [r6, #16]
	_tcs[i].cc0    = period;
    199c:	490a      	ldr	r1, [pc, #40]	; (19c8 <_pwm_set_param+0x3c>)
    199e:	0083      	lsls	r3, r0, #2
    19a0:	181a      	adds	r2, r3, r0
    19a2:	0092      	lsls	r2, r2, #2
    19a4:	188a      	adds	r2, r1, r2
    19a6:	60d5      	str	r5, [r2, #12]
	_tcs[i].cc1    = duty_cycle;
    19a8:	6114      	str	r4, [r2, #16]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    19aa:	8852      	ldrh	r2, [r2, #2]
    19ac:	230c      	movs	r3, #12
    19ae:	4013      	ands	r3, r2
    19b0:	2b08      	cmp	r3, #8
    19b2:	d004      	beq.n	19be <_pwm_set_param+0x32>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    19b4:	b2ad      	uxth	r5, r5
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    19b6:	8335      	strh	r5, [r6, #24]
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    19b8:	b2a4      	uxth	r4, r4
    19ba:	8374      	strh	r4, [r6, #26]
}
    19bc:	bd70      	pop	{r4, r5, r6, pc}
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    19be:	61b5      	str	r5, [r6, #24]
    19c0:	61f4      	str	r4, [r6, #28]
    19c2:	e7fb      	b.n	19bc <_pwm_set_param+0x30>
    19c4:	000016d5 	.word	0x000016d5
    19c8:	2000004c 	.word	0x2000004c

000019cc <_pwm_is_enabled>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    19cc:	6903      	ldr	r3, [r0, #16]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    19ce:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    19d0:	0780      	lsls	r0, r0, #30
    19d2:	0fc0      	lsrs	r0, r0, #31
}
    19d4:	4770      	bx	lr
	...

000019d8 <_pwm_set_irq_state>:
{
    19d8:	b570      	push	{r4, r5, r6, lr}
    19da:	0004      	movs	r4, r0
    19dc:	000e      	movs	r6, r1
    19de:	0015      	movs	r5, r2
	ASSERT(device);
    19e0:	1e43      	subs	r3, r0, #1
    19e2:	4198      	sbcs	r0, r3
    19e4:	b2c0      	uxtb	r0, r0
    19e6:	22bf      	movs	r2, #191	; 0xbf
    19e8:	0052      	lsls	r2, r2, #1
    19ea:	490d      	ldr	r1, [pc, #52]	; (1a20 <_pwm_set_irq_state+0x48>)
    19ec:	4b0d      	ldr	r3, [pc, #52]	; (1a24 <_pwm_set_irq_state+0x4c>)
    19ee:	4798      	blx	r3
	if (PWM_DEVICE_PERIOD_CB == type) {
    19f0:	2e00      	cmp	r6, #0
    19f2:	d108      	bne.n	1a06 <_pwm_set_irq_state+0x2e>
		hri_tc_write_INTEN_OVF_bit(device->hw, disable);
    19f4:	6923      	ldr	r3, [r4, #16]
	if (value == 0x0) {
    19f6:	2d00      	cmp	r5, #0
    19f8:	d102      	bne.n	1a00 <_pwm_set_irq_state+0x28>
		((Tc *)hw)->COUNT16.INTENCLR.reg = TC_INTENSET_OVF;
    19fa:	2201      	movs	r2, #1
    19fc:	731a      	strb	r2, [r3, #12]
    19fe:	e004      	b.n	1a0a <_pwm_set_irq_state+0x32>
		((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1a00:	2201      	movs	r2, #1
    1a02:	735a      	strb	r2, [r3, #13]
    1a04:	e001      	b.n	1a0a <_pwm_set_irq_state+0x32>
	} else if (PWM_DEVICE_ERROR_CB == type) {
    1a06:	2e01      	cmp	r6, #1
    1a08:	d000      	beq.n	1a0c <_pwm_set_irq_state+0x34>
}
    1a0a:	bd70      	pop	{r4, r5, r6, pc}
		hri_tc_write_INTEN_ERR_bit(device->hw, disable);
    1a0c:	6923      	ldr	r3, [r4, #16]
	if (value == 0x0) {
    1a0e:	2d00      	cmp	r5, #0
    1a10:	d002      	beq.n	1a18 <_pwm_set_irq_state+0x40>
		((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
    1a12:	2202      	movs	r2, #2
    1a14:	735a      	strb	r2, [r3, #13]
}
    1a16:	e7f8      	b.n	1a0a <_pwm_set_irq_state+0x32>
		((Tc *)hw)->COUNT16.INTENCLR.reg = TC_INTENSET_ERR;
    1a18:	2202      	movs	r2, #2
    1a1a:	731a      	strb	r2, [r3, #12]
    1a1c:	e7f5      	b.n	1a0a <_pwm_set_irq_state+0x32>
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	000057bc 	.word	0x000057bc
    1a24:	00000e95 	.word	0x00000e95

00001a28 <_tc_get_timer>:
	return &_tc_timer_functions;
    1a28:	4801      	ldr	r0, [pc, #4]	; (1a30 <_tc_get_timer+0x8>)
}
    1a2a:	303c      	adds	r0, #60	; 0x3c
    1a2c:	4770      	bx	lr
    1a2e:	46c0      	nop			; (mov r8, r8)
    1a30:	2000004c 	.word	0x2000004c

00001a34 <_tc_get_pwm>:
}
    1a34:	2000      	movs	r0, #0
    1a36:	4770      	bx	lr

00001a38 <TC3_Handler>:
{
    1a38:	b570      	push	{r4, r5, r6, lr}
	tc_pwm_interrupt_handler(_tc3_dev);
    1a3a:	4b0c      	ldr	r3, [pc, #48]	; (1a6c <TC3_Handler+0x34>)
    1a3c:	681d      	ldr	r5, [r3, #0]
	void *const hw = device->hw;
    1a3e:	692c      	ldr	r4, [r5, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1a40:	7ba3      	ldrb	r3, [r4, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1a42:	07db      	lsls	r3, r3, #31
    1a44:	d506      	bpl.n	1a54 <TC3_Handler+0x1c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1a46:	2301      	movs	r3, #1
    1a48:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_period_cb) {
    1a4a:	682b      	ldr	r3, [r5, #0]
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d001      	beq.n	1a54 <TC3_Handler+0x1c>
			device->callback.pwm_period_cb(device);
    1a50:	0028      	movs	r0, r5
    1a52:	4798      	blx	r3
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1a54:	7b63      	ldrb	r3, [r4, #13]
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1a56:	079b      	lsls	r3, r3, #30
    1a58:	d506      	bpl.n	1a68 <TC3_Handler+0x30>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1a5a:	2302      	movs	r3, #2
    1a5c:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_error_cb) {
    1a5e:	686b      	ldr	r3, [r5, #4]
    1a60:	2b00      	cmp	r3, #0
    1a62:	d001      	beq.n	1a68 <TC3_Handler+0x30>
			device->callback.pwm_error_cb(device);
    1a64:	0028      	movs	r0, r5
    1a66:	4798      	blx	r3
}
    1a68:	bd70      	pop	{r4, r5, r6, pc}
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	20000530 	.word	0x20000530

00001a70 <TC4_Handler>:
{
    1a70:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    1a72:	4b02      	ldr	r3, [pc, #8]	; (1a7c <TC4_Handler+0xc>)
    1a74:	6858      	ldr	r0, [r3, #4]
    1a76:	4b02      	ldr	r3, [pc, #8]	; (1a80 <TC4_Handler+0x10>)
    1a78:	4798      	blx	r3
}
    1a7a:	bd10      	pop	{r4, pc}
    1a7c:	20000530 	.word	0x20000530
    1a80:	0000165d 	.word	0x0000165d

00001a84 <TC5_Handler>:
{
    1a84:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc5_dev);
    1a86:	4b02      	ldr	r3, [pc, #8]	; (1a90 <TC5_Handler+0xc>)
    1a88:	6898      	ldr	r0, [r3, #8]
    1a8a:	4b02      	ldr	r3, [pc, #8]	; (1a94 <TC5_Handler+0x10>)
    1a8c:	4798      	blx	r3
}
    1a8e:	bd10      	pop	{r4, pc}
    1a90:	20000530 	.word	0x20000530
    1a94:	0000165d 	.word	0x0000165d

00001a98 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1a98:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1a9c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1a9e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1aa0:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1aa4:	4770      	bx	lr

00001aa6 <atomic_leave_critical>:
    1aa6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1aaa:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1aac:	f383 8810 	msr	PRIMASK, r3
}
    1ab0:	4770      	bx	lr
	...

00001ab4 <_irq_set>:
  if ((int32_t)(IRQn) >= 0)
    1ab4:	b243      	sxtb	r3, r0
    1ab6:	2b00      	cmp	r3, #0
    1ab8:	db07      	blt.n	1aca <_irq_set+0x16>
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1aba:	231f      	movs	r3, #31
    1abc:	4018      	ands	r0, r3
    1abe:	3b1e      	subs	r3, #30
    1ac0:	4083      	lsls	r3, r0
    1ac2:	2280      	movs	r2, #128	; 0x80
    1ac4:	0052      	lsls	r2, r2, #1
    1ac6:	4901      	ldr	r1, [pc, #4]	; (1acc <_irq_set+0x18>)
    1ac8:	508b      	str	r3, [r1, r2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
    1aca:	4770      	bx	lr
    1acc:	e000e100 	.word	0xe000e100

00001ad0 <_ZL11RestartLedsPK10timer_task>:


LedHandler_Class		*ptrLedHandler;
uint32_t	tempTicks;
static void RestartLeds(const struct timer_task *const timer_task)
{
    1ad0:	b580      	push	{r7, lr}
    1ad2:	b082      	sub	sp, #8
    1ad4:	af00      	add	r7, sp, #0
    1ad6:	6078      	str	r0, [r7, #4]
	ptrLedHandler->restarted=true;
    1ad8:	4b04      	ldr	r3, [pc, #16]	; (1aec <_ZL11RestartLedsPK10timer_task+0x1c>)
    1ada:	681a      	ldr	r2, [r3, #0]
    1adc:	2376      	movs	r3, #118	; 0x76
    1ade:	33ff      	adds	r3, #255	; 0xff
    1ae0:	2101      	movs	r1, #1
    1ae2:	54d1      	strb	r1, [r2, r3]
}
    1ae4:	46c0      	nop			; (mov r8, r8)
    1ae6:	46bd      	mov	sp, r7
    1ae8:	b002      	add	sp, #8
    1aea:	bd80      	pop	{r7, pc}
    1aec:	2000053c 	.word	0x2000053c

00001af0 <_ZL16PWMPeriodExpiredP11_pwm_device>:
static void PWMPeriodExpired(struct _pwm_device *device){
    1af0:	b580      	push	{r7, lr}
    1af2:	b082      	sub	sp, #8
    1af4:	af00      	add	r7, sp, #0
    1af6:	6078      	str	r0, [r7, #4]
	

	ptrLedHandler->deadTime=!lighter.deadTime;
    1af8:	4b08      	ldr	r3, [pc, #32]	; (1b1c <_ZL16PWMPeriodExpiredP11_pwm_device+0x2c>)
    1afa:	681a      	ldr	r2, [r3, #0]
    1afc:	4908      	ldr	r1, [pc, #32]	; (1b20 <_ZL16PWMPeriodExpiredP11_pwm_device+0x30>)
    1afe:	2378      	movs	r3, #120	; 0x78
    1b00:	33ff      	adds	r3, #255	; 0xff
    1b02:	5ccb      	ldrb	r3, [r1, r3]
    1b04:	b2db      	uxtb	r3, r3
    1b06:	2101      	movs	r1, #1
    1b08:	404b      	eors	r3, r1
    1b0a:	b2d9      	uxtb	r1, r3
    1b0c:	2378      	movs	r3, #120	; 0x78
    1b0e:	33ff      	adds	r3, #255	; 0xff
    1b10:	54d1      	strb	r1, [r2, r3]
}
    1b12:	46c0      	nop			; (mov r8, r8)
    1b14:	46bd      	mov	sp, r7
    1b16:	b002      	add	sp, #8
    1b18:	bd80      	pop	{r7, pc}
    1b1a:	46c0      	nop			; (mov r8, r8)
    1b1c:	2000053c 	.word	0x2000053c
    1b20:	20000544 	.word	0x20000544

00001b24 <_ZL10BlinkTimerPK10timer_task>:

static void BlinkTimer(const struct timer_task *const timer_task)
{
    1b24:	b580      	push	{r7, lr}
    1b26:	b082      	sub	sp, #8
    1b28:	af00      	add	r7, sp, #0
    1b2a:	6078      	str	r0, [r7, #4]
	ptrLedHandler->blinkOut=true;
    1b2c:	4b04      	ldr	r3, [pc, #16]	; (1b40 <_ZL10BlinkTimerPK10timer_task+0x1c>)
    1b2e:	681a      	ldr	r2, [r3, #0]
    1b30:	237c      	movs	r3, #124	; 0x7c
    1b32:	33ff      	adds	r3, #255	; 0xff
    1b34:	2101      	movs	r1, #1
    1b36:	54d1      	strb	r1, [r2, r3]
}
    1b38:	46c0      	nop			; (mov r8, r8)
    1b3a:	46bd      	mov	sp, r7
    1b3c:	b002      	add	sp, #8
    1b3e:	bd80      	pop	{r7, pc}
    1b40:	2000053c 	.word	0x2000053c

00001b44 <_ZN16LedHandler_ClassC1Ev>:
}



// default constructor
LedHandler_Class::LedHandler_Class()
    1b44:	b580      	push	{r7, lr}
    1b46:	b082      	sub	sp, #8
    1b48:	af00      	add	r7, sp, #0
    1b4a:	6078      	str	r0, [r7, #4]
    1b4c:	687b      	ldr	r3, [r7, #4]
    1b4e:	0018      	movs	r0, r3
    1b50:	4b14      	ldr	r3, [pc, #80]	; (1ba4 <_ZN16LedHandler_ClassC1Ev+0x60>)
    1b52:	4798      	blx	r3
{
	ready=false;
    1b54:	687a      	ldr	r2, [r7, #4]
    1b56:	23bd      	movs	r3, #189	; 0xbd
    1b58:	005b      	lsls	r3, r3, #1
    1b5a:	2100      	movs	r1, #0
    1b5c:	54d1      	strb	r1, [r2, r3]
	modus=INITIAL_STATE;
    1b5e:	687a      	ldr	r2, [r7, #4]
    1b60:	23c4      	movs	r3, #196	; 0xc4
    1b62:	005b      	lsls	r3, r3, #1
    1b64:	2100      	movs	r1, #0
    1b66:	54d1      	strb	r1, [r2, r3]
	ptrLedHandler=this;
    1b68:	4b0f      	ldr	r3, [pc, #60]	; (1ba8 <_ZN16LedHandler_ClassC1Ev+0x64>)
    1b6a:	687a      	ldr	r2, [r7, #4]
    1b6c:	601a      	str	r2, [r3, #0]
	totalPins=kTOTALLEFTPINS+kTOTALRIGHTPINS;
    1b6e:	687a      	ldr	r2, [r7, #4]
    1b70:	23a0      	movs	r3, #160	; 0xa0
    1b72:	009b      	lsls	r3, r3, #2
    1b74:	213a      	movs	r1, #58	; 0x3a
    1b76:	54d1      	strb	r1, [r2, r3]
	dutyCycle=500;
    1b78:	687a      	ldr	r2, [r7, #4]
    1b7a:	23be      	movs	r3, #190	; 0xbe
    1b7c:	005b      	lsls	r3, r3, #1
    1b7e:	21fa      	movs	r1, #250	; 0xfa
    1b80:	0049      	lsls	r1, r1, #1
    1b82:	50d1      	str	r1, [r2, r3]
	stepTime=POWERON_SINGLE_TIME;
    1b84:	687a      	ldr	r2, [r7, #4]
    1b86:	23c0      	movs	r3, #192	; 0xc0
    1b88:	005b      	lsls	r3, r3, #1
    1b8a:	2104      	movs	r1, #4
    1b8c:	50d1      	str	r1, [r2, r3]
	period=POWER_PERIOD;
    1b8e:	687a      	ldr	r2, [r7, #4]
    1b90:	23a6      	movs	r3, #166	; 0xa6
    1b92:	009b      	lsls	r3, r3, #2
    1b94:	2132      	movs	r1, #50	; 0x32
    1b96:	50d1      	str	r1, [r2, r3]
	
	} //LedDriverClass
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	0018      	movs	r0, r3
    1b9c:	46bd      	mov	sp, r7
    1b9e:	b002      	add	sp, #8
    1ba0:	bd80      	pop	{r7, pc}
    1ba2:	46c0      	nop			; (mov r8, r8)
    1ba4:	000033b9 	.word	0x000033b9
    1ba8:	2000053c 	.word	0x2000053c

00001bac <_ZN16LedHandler_ClassD1Ev>:

// default destructor
LedHandler_Class::~LedHandler_Class()
    1bac:	b580      	push	{r7, lr}
    1bae:	b082      	sub	sp, #8
    1bb0:	af00      	add	r7, sp, #0
    1bb2:	6078      	str	r0, [r7, #4]
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	0018      	movs	r0, r3
    1bb8:	4b03      	ldr	r3, [pc, #12]	; (1bc8 <_ZN16LedHandler_ClassD1Ev+0x1c>)
    1bba:	4798      	blx	r3
{
} //~LedDriverClass
    1bbc:	687b      	ldr	r3, [r7, #4]
    1bbe:	0018      	movs	r0, r3
    1bc0:	46bd      	mov	sp, r7
    1bc2:	b002      	add	sp, #8
    1bc4:	bd80      	pop	{r7, pc}
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	000033d3 	.word	0x000033d3

00001bcc <_ZN16LedHandler_Class4InitEv>:

void	LedHandler_Class::Init(void){
    1bcc:	b580      	push	{r7, lr}
    1bce:	b084      	sub	sp, #16
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	6078      	str	r0, [r7, #4]
	InitMapping();
    1bd4:	687b      	ldr	r3, [r7, #4]
    1bd6:	0018      	movs	r0, r3
    1bd8:	4b4a      	ldr	r3, [pc, #296]	; (1d04 <_ZN16LedHandler_Class4InitEv+0x138>)
    1bda:	4798      	blx	r3
	for (int i=0;i<kTOTALLEFTPINS;i++)
    1bdc:	2300      	movs	r3, #0
    1bde:	60fb      	str	r3, [r7, #12]
    1be0:	68fb      	ldr	r3, [r7, #12]
    1be2:	2b1c      	cmp	r3, #28
    1be4:	dc1c      	bgt.n	1c20 <_ZN16LedHandler_Class4InitEv+0x54>
	{
		pins.allPins[i]=leftPins.pinsLeft[i];
    1be6:	687a      	ldr	r2, [r7, #4]
    1be8:	68fb      	ldr	r3, [r7, #12]
    1bea:	18d3      	adds	r3, r2, r3
    1bec:	331d      	adds	r3, #29
    1bee:	7818      	ldrb	r0, [r3, #0]
    1bf0:	6879      	ldr	r1, [r7, #4]
    1bf2:	23e9      	movs	r3, #233	; 0xe9
    1bf4:	005b      	lsls	r3, r3, #1
    1bf6:	68fa      	ldr	r2, [r7, #12]
    1bf8:	188a      	adds	r2, r1, r2
    1bfa:	18d3      	adds	r3, r2, r3
    1bfc:	1c02      	adds	r2, r0, #0
    1bfe:	701a      	strb	r2, [r3, #0]
		pins.allPorts[i]=leftPins.portsLeft[i];
    1c00:	687a      	ldr	r2, [r7, #4]
    1c02:	68fb      	ldr	r3, [r7, #12]
    1c04:	18d3      	adds	r3, r2, r3
    1c06:	7818      	ldrb	r0, [r3, #0]
    1c08:	6879      	ldr	r1, [r7, #4]
    1c0a:	23cc      	movs	r3, #204	; 0xcc
    1c0c:	005b      	lsls	r3, r3, #1
    1c0e:	68fa      	ldr	r2, [r7, #12]
    1c10:	188a      	adds	r2, r1, r2
    1c12:	18d3      	adds	r3, r2, r3
    1c14:	1c02      	adds	r2, r0, #0
    1c16:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<kTOTALLEFTPINS;i++)
    1c18:	68fb      	ldr	r3, [r7, #12]
    1c1a:	3301      	adds	r3, #1
    1c1c:	60fb      	str	r3, [r7, #12]
    1c1e:	e7df      	b.n	1be0 <_ZN16LedHandler_Class4InitEv+0x14>
	}
	for (int i=0;i<kTOTALRIGHTPINS;i++)
    1c20:	2300      	movs	r3, #0
    1c22:	60bb      	str	r3, [r7, #8]
    1c24:	68bb      	ldr	r3, [r7, #8]
    1c26:	2b1c      	cmp	r3, #28
    1c28:	dc2d      	bgt.n	1c86 <_ZN16LedHandler_Class4InitEv+0xba>
	{
		pins.allPins[totalPins-i-1]=rightPins.pinsRight[i];
    1c2a:	687a      	ldr	r2, [r7, #4]
    1c2c:	23a0      	movs	r3, #160	; 0xa0
    1c2e:	009b      	lsls	r3, r3, #2
    1c30:	5cd3      	ldrb	r3, [r2, r3]
    1c32:	001a      	movs	r2, r3
    1c34:	68bb      	ldr	r3, [r7, #8]
    1c36:	1ad3      	subs	r3, r2, r3
    1c38:	1e5a      	subs	r2, r3, #1
    1c3a:	6879      	ldr	r1, [r7, #4]
    1c3c:	2057      	movs	r0, #87	; 0x57
    1c3e:	68bb      	ldr	r3, [r7, #8]
    1c40:	18cb      	adds	r3, r1, r3
    1c42:	181b      	adds	r3, r3, r0
    1c44:	7818      	ldrb	r0, [r3, #0]
    1c46:	6879      	ldr	r1, [r7, #4]
    1c48:	23e9      	movs	r3, #233	; 0xe9
    1c4a:	005b      	lsls	r3, r3, #1
    1c4c:	188a      	adds	r2, r1, r2
    1c4e:	18d3      	adds	r3, r2, r3
    1c50:	1c02      	adds	r2, r0, #0
    1c52:	701a      	strb	r2, [r3, #0]
		pins.allPorts[totalPins-i-1]=rightPins.portsRight[i];
    1c54:	687a      	ldr	r2, [r7, #4]
    1c56:	23a0      	movs	r3, #160	; 0xa0
    1c58:	009b      	lsls	r3, r3, #2
    1c5a:	5cd3      	ldrb	r3, [r2, r3]
    1c5c:	001a      	movs	r2, r3
    1c5e:	68bb      	ldr	r3, [r7, #8]
    1c60:	1ad3      	subs	r3, r2, r3
    1c62:	1e5a      	subs	r2, r3, #1
    1c64:	6879      	ldr	r1, [r7, #4]
    1c66:	203a      	movs	r0, #58	; 0x3a
    1c68:	68bb      	ldr	r3, [r7, #8]
    1c6a:	18cb      	adds	r3, r1, r3
    1c6c:	181b      	adds	r3, r3, r0
    1c6e:	7818      	ldrb	r0, [r3, #0]
    1c70:	6879      	ldr	r1, [r7, #4]
    1c72:	23cc      	movs	r3, #204	; 0xcc
    1c74:	005b      	lsls	r3, r3, #1
    1c76:	188a      	adds	r2, r1, r2
    1c78:	18d3      	adds	r3, r2, r3
    1c7a:	1c02      	adds	r2, r0, #0
    1c7c:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<kTOTALRIGHTPINS;i++)
    1c7e:	68bb      	ldr	r3, [r7, #8]
    1c80:	3301      	adds	r3, #1
    1c82:	60bb      	str	r3, [r7, #8]
    1c84:	e7ce      	b.n	1c24 <_ZN16LedHandler_Class4InitEv+0x58>
	}
	SetBothSidesPins(pins);
    1c86:	687a      	ldr	r2, [r7, #4]
    1c88:	687b      	ldr	r3, [r7, #4]
    1c8a:	3399      	adds	r3, #153	; 0x99
    1c8c:	33ff      	adds	r3, #255	; 0xff
    1c8e:	0019      	movs	r1, r3
    1c90:	0010      	movs	r0, r2
    1c92:	4b1d      	ldr	r3, [pc, #116]	; (1d08 <_ZN16LedHandler_Class4InitEv+0x13c>)
    1c94:	4798      	blx	r3
	deadTime=false;
    1c96:	687a      	ldr	r2, [r7, #4]
    1c98:	2378      	movs	r3, #120	; 0x78
    1c9a:	33ff      	adds	r3, #255	; 0xff
    1c9c:	2100      	movs	r1, #0
    1c9e:	54d1      	strb	r1, [r2, r3]

	ledTimer.Init();
    1ca0:	4b1a      	ldr	r3, [pc, #104]	; (1d0c <_ZN16LedHandler_Class4InitEv+0x140>)
    1ca2:	0018      	movs	r0, r3
    1ca4:	4b1a      	ldr	r3, [pc, #104]	; (1d10 <_ZN16LedHandler_Class4InitEv+0x144>)
    1ca6:	4798      	blx	r3
	pwmTimer.Init();
    1ca8:	4b1a      	ldr	r3, [pc, #104]	; (1d14 <_ZN16LedHandler_Class4InitEv+0x148>)
    1caa:	0018      	movs	r0, r3
    1cac:	4b18      	ldr	r3, [pc, #96]	; (1d10 <_ZN16LedHandler_Class4InitEv+0x144>)
    1cae:	4798      	blx	r3
	DefineColors(state);
    1cb0:	687a      	ldr	r2, [r7, #4]
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	2183      	movs	r1, #131	; 0x83
    1cb6:	0089      	lsls	r1, r1, #2
    1cb8:	468c      	mov	ip, r1
    1cba:	4463      	add	r3, ip
    1cbc:	0019      	movs	r1, r3
    1cbe:	0010      	movs	r0, r2
    1cc0:	4b15      	ldr	r3, [pc, #84]	; (1d18 <_ZN16LedHandler_Class4InitEv+0x14c>)
    1cc2:	4798      	blx	r3
	ready=true;
    1cc4:	687a      	ldr	r2, [r7, #4]
    1cc6:	23bd      	movs	r3, #189	; 0xbd
    1cc8:	005b      	lsls	r3, r3, #1
    1cca:	2101      	movs	r1, #1
    1ccc:	54d1      	strb	r1, [r2, r3]
	pwm_set_parameters(&PWM_0,PWM_WAVE_PERIOD,PWM_WAVE_DUTY);
    1cce:	23fa      	movs	r3, #250	; 0xfa
    1cd0:	005a      	lsls	r2, r3, #1
    1cd2:	4912      	ldr	r1, [pc, #72]	; (1d1c <_ZN16LedHandler_Class4InitEv+0x150>)
    1cd4:	4b12      	ldr	r3, [pc, #72]	; (1d20 <_ZN16LedHandler_Class4InitEv+0x154>)
    1cd6:	0018      	movs	r0, r3
    1cd8:	4b12      	ldr	r3, [pc, #72]	; (1d24 <_ZN16LedHandler_Class4InitEv+0x158>)
    1cda:	4798      	blx	r3
	pwm_register_callback(&PWM_0,PWM_PERIOD_CB, (pwm_cb_t)PWMPeriodExpired);
    1cdc:	4a12      	ldr	r2, [pc, #72]	; (1d28 <_ZN16LedHandler_Class4InitEv+0x15c>)
    1cde:	4b10      	ldr	r3, [pc, #64]	; (1d20 <_ZN16LedHandler_Class4InitEv+0x154>)
    1ce0:	2100      	movs	r1, #0
    1ce2:	0018      	movs	r0, r3
    1ce4:	4b11      	ldr	r3, [pc, #68]	; (1d2c <_ZN16LedHandler_Class4InitEv+0x160>)
    1ce6:	4798      	blx	r3
	pwmTimer.stop();
    1ce8:	4b0a      	ldr	r3, [pc, #40]	; (1d14 <_ZN16LedHandler_Class4InitEv+0x148>)
    1cea:	0018      	movs	r0, r3
    1cec:	4b10      	ldr	r3, [pc, #64]	; (1d30 <_ZN16LedHandler_Class4InitEv+0x164>)
    1cee:	4798      	blx	r3
	tapLimit=COUNTER_TIME*(kTOTALLEFTPINS+kTOTALLEFTPINS);
    1cf0:	687a      	ldr	r2, [r7, #4]
    1cf2:	23ca      	movs	r3, #202	; 0xca
    1cf4:	005b      	lsls	r3, r3, #1
    1cf6:	21e8      	movs	r1, #232	; 0xe8
    1cf8:	50d1      	str	r1, [r2, r3]

}
    1cfa:	46c0      	nop			; (mov r8, r8)
    1cfc:	46bd      	mov	sp, r7
    1cfe:	b004      	add	sp, #16
    1d00:	bd80      	pop	{r7, pc}
    1d02:	46c0      	nop			; (mov r8, r8)
    1d04:	000033e5 	.word	0x000033e5
    1d08:	000036a9 	.word	0x000036a9
    1d0c:	20000820 	.word	0x20000820
    1d10:	00004525 	.word	0x00004525
    1d14:	2000084c 	.word	0x2000084c
    1d18:	000035e1 	.word	0x000035e1
    1d1c:	00000823 	.word	0x00000823
    1d20:	20000960 	.word	0x20000960
    1d24:	000009ad 	.word	0x000009ad
    1d28:	00001af1 	.word	0x00001af1
    1d2c:	00000961 	.word	0x00000961
    1d30:	00004561 	.word	0x00004561

00001d34 <_ZN16LedHandler_Class15RestartLedModusEv>:
		
		while(!restarted);
		//ledTimer.remove_task();
		RunOnMode();
}
void	LedHandler_Class::RestartLedModus(void){
    1d34:	b580      	push	{r7, lr}
    1d36:	b082      	sub	sp, #8
    1d38:	af00      	add	r7, sp, #0
    1d3a:	6078      	str	r0, [r7, #4]
			ledTimer.stop();
    1d3c:	4b12      	ldr	r3, [pc, #72]	; (1d88 <_ZN16LedHandler_Class15RestartLedModusEv+0x54>)
    1d3e:	0018      	movs	r0, r3
    1d40:	4b12      	ldr	r3, [pc, #72]	; (1d8c <_ZN16LedHandler_Class15RestartLedModusEv+0x58>)
    1d42:	4798      	blx	r3
			restarted=false;
    1d44:	687a      	ldr	r2, [r7, #4]
    1d46:	2376      	movs	r3, #118	; 0x76
    1d48:	33ff      	adds	r3, #255	; 0xff
    1d4a:	2100      	movs	r1, #0
    1d4c:	54d1      	strb	r1, [r2, r3]
			ledTimer.Start_oneShot_task((FUNC_PTR)RestartLeds,POWEROFF_SINGLE_TIME);
    1d4e:	23fa      	movs	r3, #250	; 0xfa
    1d50:	009a      	lsls	r2, r3, #2
    1d52:	490f      	ldr	r1, [pc, #60]	; (1d90 <_ZN16LedHandler_Class15RestartLedModusEv+0x5c>)
    1d54:	4b0c      	ldr	r3, [pc, #48]	; (1d88 <_ZN16LedHandler_Class15RestartLedModusEv+0x54>)
    1d56:	0018      	movs	r0, r3
    1d58:	4b0e      	ldr	r3, [pc, #56]	; (1d94 <_ZN16LedHandler_Class15RestartLedModusEv+0x60>)
    1d5a:	4798      	blx	r3
			ClearAll();
    1d5c:	687b      	ldr	r3, [r7, #4]
    1d5e:	0018      	movs	r0, r3
    1d60:	4b0d      	ldr	r3, [pc, #52]	; (1d98 <_ZN16LedHandler_Class15RestartLedModusEv+0x64>)
    1d62:	4798      	blx	r3
			nmi.pressedTimerStarted=false;
    1d64:	4b0d      	ldr	r3, [pc, #52]	; (1d9c <_ZN16LedHandler_Class15RestartLedModusEv+0x68>)
    1d66:	2200      	movs	r2, #0
    1d68:	705a      	strb	r2, [r3, #1]
			changeModeRequest=false;
    1d6a:	687a      	ldr	r2, [r7, #4]
    1d6c:	23bc      	movs	r3, #188	; 0xbc
    1d6e:	005b      	lsls	r3, r3, #1
    1d70:	2100      	movs	r1, #0
    1d72:	54d1      	strb	r1, [r2, r3]
			stepTime=COUNTER_TIME;
    1d74:	687a      	ldr	r2, [r7, #4]
    1d76:	23c0      	movs	r3, #192	; 0xc0
    1d78:	005b      	lsls	r3, r3, #1
    1d7a:	2104      	movs	r1, #4
    1d7c:	50d1      	str	r1, [r2, r3]
}
    1d7e:	46c0      	nop			; (mov r8, r8)
    1d80:	46bd      	mov	sp, r7
    1d82:	b002      	add	sp, #8
    1d84:	bd80      	pop	{r7, pc}
    1d86:	46c0      	nop			; (mov r8, r8)
    1d88:	20000820 	.word	0x20000820
    1d8c:	00004561 	.word	0x00004561
    1d90:	00001ad1 	.word	0x00001ad1
    1d94:	0000461d 	.word	0x0000461d
    1d98:	00002bb9 	.word	0x00002bb9
    1d9c:	200007e0 	.word	0x200007e0

00001da0 <_ZN16LedHandler_Class9GreenWaveEv>:
	}
		
	
}

void	LedHandler_Class::GreenWave(void){
    1da0:	b580      	push	{r7, lr}
    1da2:	b082      	sub	sp, #8
    1da4:	af00      	add	r7, sp, #0
    1da6:	6078      	str	r0, [r7, #4]
	request=false;
    1da8:	687a      	ldr	r2, [r7, #4]
    1daa:	23c2      	movs	r3, #194	; 0xc2
    1dac:	005b      	lsls	r3, r3, #1
    1dae:	2100      	movs	r1, #0
    1db0:	54d1      	strb	r1, [r2, r3]
		do 
		{
			for ( k=0;k<totalPins;k++)
    1db2:	687a      	ldr	r2, [r7, #4]
    1db4:	23a3      	movs	r3, #163	; 0xa3
    1db6:	009b      	lsls	r3, r3, #2
    1db8:	2100      	movs	r1, #0
    1dba:	50d1      	str	r1, [r2, r3]
    1dbc:	687a      	ldr	r2, [r7, #4]
    1dbe:	23a3      	movs	r3, #163	; 0xa3
    1dc0:	009b      	lsls	r3, r3, #2
    1dc2:	58d3      	ldr	r3, [r2, r3]
    1dc4:	6879      	ldr	r1, [r7, #4]
    1dc6:	22a0      	movs	r2, #160	; 0xa0
    1dc8:	0092      	lsls	r2, r2, #2
    1dca:	5c8a      	ldrb	r2, [r1, r2]
    1dcc:	4293      	cmp	r3, r2
    1dce:	da2e      	bge.n	1e2e <_ZN16LedHandler_Class9GreenWaveEv+0x8e>
			{
				if (IsGreen(k))
    1dd0:	6878      	ldr	r0, [r7, #4]
    1dd2:	687a      	ldr	r2, [r7, #4]
    1dd4:	23a3      	movs	r3, #163	; 0xa3
    1dd6:	009b      	lsls	r3, r3, #2
    1dd8:	58d3      	ldr	r3, [r2, r3]
    1dda:	b2db      	uxtb	r3, r3
    1ddc:	0019      	movs	r1, r3
    1dde:	4b1e      	ldr	r3, [pc, #120]	; (1e58 <_ZN16LedHandler_Class9GreenWaveEv+0xb8>)
    1de0:	4798      	blx	r3
    1de2:	1e03      	subs	r3, r0, #0
    1de4:	d010      	beq.n	1e08 <_ZN16LedHandler_Class9GreenWaveEv+0x68>
				{
					if (!PowerOnSingleLed(k))
    1de6:	687a      	ldr	r2, [r7, #4]
    1de8:	23a3      	movs	r3, #163	; 0xa3
    1dea:	009b      	lsls	r3, r3, #2
    1dec:	58d2      	ldr	r2, [r2, r3]
    1dee:	687b      	ldr	r3, [r7, #4]
    1df0:	0011      	movs	r1, r2
    1df2:	0018      	movs	r0, r3
    1df4:	4b19      	ldr	r3, [pc, #100]	; (1e5c <_ZN16LedHandler_Class9GreenWaveEv+0xbc>)
    1df6:	4798      	blx	r3
    1df8:	0003      	movs	r3, r0
    1dfa:	001a      	movs	r2, r3
    1dfc:	2301      	movs	r3, #1
    1dfe:	4053      	eors	r3, r2
    1e00:	b2db      	uxtb	r3, r3
    1e02:	2b00      	cmp	r3, #0
    1e04:	d009      	beq.n	1e1a <_ZN16LedHandler_Class9GreenWaveEv+0x7a>
					{
						break;
    1e06:	e012      	b.n	1e2e <_ZN16LedHandler_Class9GreenWaveEv+0x8e>
					}
					
				}
				else
				{
					PowerOffPin(k);
    1e08:	687a      	ldr	r2, [r7, #4]
    1e0a:	23a3      	movs	r3, #163	; 0xa3
    1e0c:	009b      	lsls	r3, r3, #2
    1e0e:	58d2      	ldr	r2, [r2, r3]
    1e10:	687b      	ldr	r3, [r7, #4]
    1e12:	0011      	movs	r1, r2
    1e14:	0018      	movs	r0, r3
    1e16:	4b12      	ldr	r3, [pc, #72]	; (1e60 <_ZN16LedHandler_Class9GreenWaveEv+0xc0>)
    1e18:	4798      	blx	r3
			for ( k=0;k<totalPins;k++)
    1e1a:	687a      	ldr	r2, [r7, #4]
    1e1c:	23a3      	movs	r3, #163	; 0xa3
    1e1e:	009b      	lsls	r3, r3, #2
    1e20:	58d3      	ldr	r3, [r2, r3]
    1e22:	1c59      	adds	r1, r3, #1
    1e24:	687a      	ldr	r2, [r7, #4]
    1e26:	23a3      	movs	r3, #163	; 0xa3
    1e28:	009b      	lsls	r3, r3, #2
    1e2a:	50d1      	str	r1, [r2, r3]
    1e2c:	e7c6      	b.n	1dbc <_ZN16LedHandler_Class9GreenWaveEv+0x1c>
				}
							
			}
		}while((!changeModeRequest));
    1e2e:	687a      	ldr	r2, [r7, #4]
    1e30:	23bc      	movs	r3, #188	; 0xbc
    1e32:	005b      	lsls	r3, r3, #1
    1e34:	5cd3      	ldrb	r3, [r2, r3]
    1e36:	b2db      	uxtb	r3, r3
		do 
    1e38:	2201      	movs	r2, #1
    1e3a:	4053      	eors	r3, r2
    1e3c:	b2db      	uxtb	r3, r3
    1e3e:	2b00      	cmp	r3, #0
    1e40:	d000      	beq.n	1e44 <_ZN16LedHandler_Class9GreenWaveEv+0xa4>
    1e42:	e7b6      	b.n	1db2 <_ZN16LedHandler_Class9GreenWaveEv+0x12>
	request=false;
    1e44:	687a      	ldr	r2, [r7, #4]
    1e46:	23c2      	movs	r3, #194	; 0xc2
    1e48:	005b      	lsls	r3, r3, #1
    1e4a:	2100      	movs	r1, #0
    1e4c:	54d1      	strb	r1, [r2, r3]
	
}
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	46bd      	mov	sp, r7
    1e52:	b002      	add	sp, #8
    1e54:	bd80      	pop	{r7, pc}
    1e56:	46c0      	nop			; (mov r8, r8)
    1e58:	000037c9 	.word	0x000037c9
    1e5c:	000021b1 	.word	0x000021b1
    1e60:	00002b51 	.word	0x00002b51

00001e64 <_ZN16LedHandler_Class7RedWaveEv>:
void	LedHandler_Class::RedWave(void){
    1e64:	b580      	push	{r7, lr}
    1e66:	b082      	sub	sp, #8
    1e68:	af00      	add	r7, sp, #0
    1e6a:	6078      	str	r0, [r7, #4]
	request=false;
    1e6c:	687a      	ldr	r2, [r7, #4]
    1e6e:	23c2      	movs	r3, #194	; 0xc2
    1e70:	005b      	lsls	r3, r3, #1
    1e72:	2100      	movs	r1, #0
    1e74:	54d1      	strb	r1, [r2, r3]
	do
	{
		for ( k=1;k<totalPins;k++)
    1e76:	687a      	ldr	r2, [r7, #4]
    1e78:	23a3      	movs	r3, #163	; 0xa3
    1e7a:	009b      	lsls	r3, r3, #2
    1e7c:	2101      	movs	r1, #1
    1e7e:	50d1      	str	r1, [r2, r3]
    1e80:	687a      	ldr	r2, [r7, #4]
    1e82:	23a3      	movs	r3, #163	; 0xa3
    1e84:	009b      	lsls	r3, r3, #2
    1e86:	58d3      	ldr	r3, [r2, r3]
    1e88:	6879      	ldr	r1, [r7, #4]
    1e8a:	22a0      	movs	r2, #160	; 0xa0
    1e8c:	0092      	lsls	r2, r2, #2
    1e8e:	5c8a      	ldrb	r2, [r1, r2]
    1e90:	4293      	cmp	r3, r2
    1e92:	da2e      	bge.n	1ef2 <_ZN16LedHandler_Class7RedWaveEv+0x8e>
		{
			if (IsRed(k))
    1e94:	6878      	ldr	r0, [r7, #4]
    1e96:	687a      	ldr	r2, [r7, #4]
    1e98:	23a3      	movs	r3, #163	; 0xa3
    1e9a:	009b      	lsls	r3, r3, #2
    1e9c:	58d3      	ldr	r3, [r2, r3]
    1e9e:	b2db      	uxtb	r3, r3
    1ea0:	0019      	movs	r1, r3
    1ea2:	4b1e      	ldr	r3, [pc, #120]	; (1f1c <_ZN16LedHandler_Class7RedWaveEv+0xb8>)
    1ea4:	4798      	blx	r3
    1ea6:	1e03      	subs	r3, r0, #0
    1ea8:	d010      	beq.n	1ecc <_ZN16LedHandler_Class7RedWaveEv+0x68>
			{
				if (!PowerOnSingleLed(k))
    1eaa:	687a      	ldr	r2, [r7, #4]
    1eac:	23a3      	movs	r3, #163	; 0xa3
    1eae:	009b      	lsls	r3, r3, #2
    1eb0:	58d2      	ldr	r2, [r2, r3]
    1eb2:	687b      	ldr	r3, [r7, #4]
    1eb4:	0011      	movs	r1, r2
    1eb6:	0018      	movs	r0, r3
    1eb8:	4b19      	ldr	r3, [pc, #100]	; (1f20 <_ZN16LedHandler_Class7RedWaveEv+0xbc>)
    1eba:	4798      	blx	r3
    1ebc:	0003      	movs	r3, r0
    1ebe:	001a      	movs	r2, r3
    1ec0:	2301      	movs	r3, #1
    1ec2:	4053      	eors	r3, r2
    1ec4:	b2db      	uxtb	r3, r3
    1ec6:	2b00      	cmp	r3, #0
    1ec8:	d009      	beq.n	1ede <_ZN16LedHandler_Class7RedWaveEv+0x7a>
				{
					break;
    1eca:	e012      	b.n	1ef2 <_ZN16LedHandler_Class7RedWaveEv+0x8e>
				}
				
			}
			else
			{
				PowerOffPin(k);
    1ecc:	687a      	ldr	r2, [r7, #4]
    1ece:	23a3      	movs	r3, #163	; 0xa3
    1ed0:	009b      	lsls	r3, r3, #2
    1ed2:	58d2      	ldr	r2, [r2, r3]
    1ed4:	687b      	ldr	r3, [r7, #4]
    1ed6:	0011      	movs	r1, r2
    1ed8:	0018      	movs	r0, r3
    1eda:	4b12      	ldr	r3, [pc, #72]	; (1f24 <_ZN16LedHandler_Class7RedWaveEv+0xc0>)
    1edc:	4798      	blx	r3
		for ( k=1;k<totalPins;k++)
    1ede:	687a      	ldr	r2, [r7, #4]
    1ee0:	23a3      	movs	r3, #163	; 0xa3
    1ee2:	009b      	lsls	r3, r3, #2
    1ee4:	58d3      	ldr	r3, [r2, r3]
    1ee6:	1c59      	adds	r1, r3, #1
    1ee8:	687a      	ldr	r2, [r7, #4]
    1eea:	23a3      	movs	r3, #163	; 0xa3
    1eec:	009b      	lsls	r3, r3, #2
    1eee:	50d1      	str	r1, [r2, r3]
    1ef0:	e7c6      	b.n	1e80 <_ZN16LedHandler_Class7RedWaveEv+0x1c>
			}
			
		}
	}while((!changeModeRequest));
    1ef2:	687a      	ldr	r2, [r7, #4]
    1ef4:	23bc      	movs	r3, #188	; 0xbc
    1ef6:	005b      	lsls	r3, r3, #1
    1ef8:	5cd3      	ldrb	r3, [r2, r3]
    1efa:	b2db      	uxtb	r3, r3
	do
    1efc:	2201      	movs	r2, #1
    1efe:	4053      	eors	r3, r2
    1f00:	b2db      	uxtb	r3, r3
    1f02:	2b00      	cmp	r3, #0
    1f04:	d000      	beq.n	1f08 <_ZN16LedHandler_Class7RedWaveEv+0xa4>
    1f06:	e7b6      	b.n	1e76 <_ZN16LedHandler_Class7RedWaveEv+0x12>
	request=false;
    1f08:	687a      	ldr	r2, [r7, #4]
    1f0a:	23c2      	movs	r3, #194	; 0xc2
    1f0c:	005b      	lsls	r3, r3, #1
    1f0e:	2100      	movs	r1, #0
    1f10:	54d1      	strb	r1, [r2, r3]
	
}
    1f12:	46c0      	nop			; (mov r8, r8)
    1f14:	46bd      	mov	sp, r7
    1f16:	b002      	add	sp, #8
    1f18:	bd80      	pop	{r7, pc}
    1f1a:	46c0      	nop			; (mov r8, r8)
    1f1c:	000037f5 	.word	0x000037f5
    1f20:	000021b1 	.word	0x000021b1
    1f24:	00002b51 	.word	0x00002b51

00001f28 <_ZN16LedHandler_Class8BlueWaveEv>:
void	LedHandler_Class::BlueWave(void){
    1f28:	b580      	push	{r7, lr}
    1f2a:	b082      	sub	sp, #8
    1f2c:	af00      	add	r7, sp, #0
    1f2e:	6078      	str	r0, [r7, #4]
	request=false;
    1f30:	687a      	ldr	r2, [r7, #4]
    1f32:	23c2      	movs	r3, #194	; 0xc2
    1f34:	005b      	lsls	r3, r3, #1
    1f36:	2100      	movs	r1, #0
    1f38:	54d1      	strb	r1, [r2, r3]
	do
	{
		for ( k=2;k<totalPins;k++)
    1f3a:	687a      	ldr	r2, [r7, #4]
    1f3c:	23a3      	movs	r3, #163	; 0xa3
    1f3e:	009b      	lsls	r3, r3, #2
    1f40:	2102      	movs	r1, #2
    1f42:	50d1      	str	r1, [r2, r3]
    1f44:	687a      	ldr	r2, [r7, #4]
    1f46:	23a3      	movs	r3, #163	; 0xa3
    1f48:	009b      	lsls	r3, r3, #2
    1f4a:	58d3      	ldr	r3, [r2, r3]
    1f4c:	6879      	ldr	r1, [r7, #4]
    1f4e:	22a0      	movs	r2, #160	; 0xa0
    1f50:	0092      	lsls	r2, r2, #2
    1f52:	5c8a      	ldrb	r2, [r1, r2]
    1f54:	4293      	cmp	r3, r2
    1f56:	da2e      	bge.n	1fb6 <_ZN16LedHandler_Class8BlueWaveEv+0x8e>
		{
			if (IsBlue(k))
    1f58:	6878      	ldr	r0, [r7, #4]
    1f5a:	687a      	ldr	r2, [r7, #4]
    1f5c:	23a3      	movs	r3, #163	; 0xa3
    1f5e:	009b      	lsls	r3, r3, #2
    1f60:	58d3      	ldr	r3, [r2, r3]
    1f62:	b2db      	uxtb	r3, r3
    1f64:	0019      	movs	r1, r3
    1f66:	4b1e      	ldr	r3, [pc, #120]	; (1fe0 <_ZN16LedHandler_Class8BlueWaveEv+0xb8>)
    1f68:	4798      	blx	r3
    1f6a:	1e03      	subs	r3, r0, #0
    1f6c:	d010      	beq.n	1f90 <_ZN16LedHandler_Class8BlueWaveEv+0x68>
			{
				if (!PowerOnSingleLed(k))
    1f6e:	687a      	ldr	r2, [r7, #4]
    1f70:	23a3      	movs	r3, #163	; 0xa3
    1f72:	009b      	lsls	r3, r3, #2
    1f74:	58d2      	ldr	r2, [r2, r3]
    1f76:	687b      	ldr	r3, [r7, #4]
    1f78:	0011      	movs	r1, r2
    1f7a:	0018      	movs	r0, r3
    1f7c:	4b19      	ldr	r3, [pc, #100]	; (1fe4 <_ZN16LedHandler_Class8BlueWaveEv+0xbc>)
    1f7e:	4798      	blx	r3
    1f80:	0003      	movs	r3, r0
    1f82:	001a      	movs	r2, r3
    1f84:	2301      	movs	r3, #1
    1f86:	4053      	eors	r3, r2
    1f88:	b2db      	uxtb	r3, r3
    1f8a:	2b00      	cmp	r3, #0
    1f8c:	d009      	beq.n	1fa2 <_ZN16LedHandler_Class8BlueWaveEv+0x7a>
				{
					break;
    1f8e:	e012      	b.n	1fb6 <_ZN16LedHandler_Class8BlueWaveEv+0x8e>
				}
							
			}
			else
			{
				PowerOffPin(k);
    1f90:	687a      	ldr	r2, [r7, #4]
    1f92:	23a3      	movs	r3, #163	; 0xa3
    1f94:	009b      	lsls	r3, r3, #2
    1f96:	58d2      	ldr	r2, [r2, r3]
    1f98:	687b      	ldr	r3, [r7, #4]
    1f9a:	0011      	movs	r1, r2
    1f9c:	0018      	movs	r0, r3
    1f9e:	4b12      	ldr	r3, [pc, #72]	; (1fe8 <_ZN16LedHandler_Class8BlueWaveEv+0xc0>)
    1fa0:	4798      	blx	r3
		for ( k=2;k<totalPins;k++)
    1fa2:	687a      	ldr	r2, [r7, #4]
    1fa4:	23a3      	movs	r3, #163	; 0xa3
    1fa6:	009b      	lsls	r3, r3, #2
    1fa8:	58d3      	ldr	r3, [r2, r3]
    1faa:	1c59      	adds	r1, r3, #1
    1fac:	687a      	ldr	r2, [r7, #4]
    1fae:	23a3      	movs	r3, #163	; 0xa3
    1fb0:	009b      	lsls	r3, r3, #2
    1fb2:	50d1      	str	r1, [r2, r3]
    1fb4:	e7c6      	b.n	1f44 <_ZN16LedHandler_Class8BlueWaveEv+0x1c>
			}
			
		}
	}while((!changeModeRequest));
    1fb6:	687a      	ldr	r2, [r7, #4]
    1fb8:	23bc      	movs	r3, #188	; 0xbc
    1fba:	005b      	lsls	r3, r3, #1
    1fbc:	5cd3      	ldrb	r3, [r2, r3]
    1fbe:	b2db      	uxtb	r3, r3
	do
    1fc0:	2201      	movs	r2, #1
    1fc2:	4053      	eors	r3, r2
    1fc4:	b2db      	uxtb	r3, r3
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	d000      	beq.n	1fcc <_ZN16LedHandler_Class8BlueWaveEv+0xa4>
    1fca:	e7b6      	b.n	1f3a <_ZN16LedHandler_Class8BlueWaveEv+0x12>
	request=false;
    1fcc:	687a      	ldr	r2, [r7, #4]
    1fce:	23c2      	movs	r3, #194	; 0xc2
    1fd0:	005b      	lsls	r3, r3, #1
    1fd2:	2100      	movs	r1, #0
    1fd4:	54d1      	strb	r1, [r2, r3]
	
}
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	46bd      	mov	sp, r7
    1fda:	b002      	add	sp, #8
    1fdc:	bd80      	pop	{r7, pc}
    1fde:	46c0      	nop			; (mov r8, r8)
    1fe0:	00003823 	.word	0x00003823
    1fe4:	000021b1 	.word	0x000021b1
    1fe8:	00002b51 	.word	0x00002b51

00001fec <_ZN16LedHandler_Class11MagentaWaveEv>:
	}while((!changeModeRequest));
	request=false;
	onLila=false;
	
}
void	LedHandler_Class::MagentaWave(void){
    1fec:	b580      	push	{r7, lr}
    1fee:	b082      	sub	sp, #8
    1ff0:	af00      	add	r7, sp, #0
    1ff2:	6078      	str	r0, [r7, #4]
	request=false;
    1ff4:	687a      	ldr	r2, [r7, #4]
    1ff6:	23c2      	movs	r3, #194	; 0xc2
    1ff8:	005b      	lsls	r3, r3, #1
    1ffa:	2100      	movs	r1, #0
    1ffc:	54d1      	strb	r1, [r2, r3]
	onMagenta=true;
    1ffe:	687a      	ldr	r2, [r7, #4]
    2000:	23c3      	movs	r3, #195	; 0xc3
    2002:	005b      	lsls	r3, r3, #1
    2004:	2101      	movs	r1, #1
    2006:	54d1      	strb	r1, [r2, r3]
	do
	{
		for ( k=3;k<totalPins;k++)
    2008:	687a      	ldr	r2, [r7, #4]
    200a:	23a3      	movs	r3, #163	; 0xa3
    200c:	009b      	lsls	r3, r3, #2
    200e:	2103      	movs	r1, #3
    2010:	50d1      	str	r1, [r2, r3]
    2012:	687a      	ldr	r2, [r7, #4]
    2014:	23a3      	movs	r3, #163	; 0xa3
    2016:	009b      	lsls	r3, r3, #2
    2018:	58d3      	ldr	r3, [r2, r3]
    201a:	6879      	ldr	r1, [r7, #4]
    201c:	22a0      	movs	r2, #160	; 0xa0
    201e:	0092      	lsls	r2, r2, #2
    2020:	5c8a      	ldrb	r2, [r1, r2]
    2022:	4293      	cmp	r3, r2
    2024:	da38      	bge.n	2098 <STACK_SIZE+0x98>
		{
			if (IsGreen(k))
    2026:	6878      	ldr	r0, [r7, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	23a3      	movs	r3, #163	; 0xa3
    202c:	009b      	lsls	r3, r3, #2
    202e:	58d3      	ldr	r3, [r2, r3]
    2030:	b2db      	uxtb	r3, r3
    2032:	0019      	movs	r1, r3
    2034:	4b25      	ldr	r3, [pc, #148]	; (20cc <STACK_SIZE+0xcc>)
    2036:	4798      	blx	r3
    2038:	1e03      	subs	r3, r0, #0
    203a:	d019      	beq.n	2070 <STACK_SIZE+0x70>
			{
				if (!PowerOnSingleLed(k))
    203c:	687a      	ldr	r2, [r7, #4]
    203e:	23a3      	movs	r3, #163	; 0xa3
    2040:	009b      	lsls	r3, r3, #2
    2042:	58d2      	ldr	r2, [r2, r3]
    2044:	687b      	ldr	r3, [r7, #4]
    2046:	0011      	movs	r1, r2
    2048:	0018      	movs	r0, r3
    204a:	4b21      	ldr	r3, [pc, #132]	; (20d0 <STACK_SIZE+0xd0>)
    204c:	4798      	blx	r3
    204e:	0003      	movs	r3, r0
    2050:	001a      	movs	r2, r3
    2052:	2301      	movs	r3, #1
    2054:	4053      	eors	r3, r2
    2056:	b2db      	uxtb	r3, r3
    2058:	2b00      	cmp	r3, #0
    205a:	d11c      	bne.n	2096 <STACK_SIZE+0x96>
				{
					break;
				}
				k++;
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	23a3      	movs	r3, #163	; 0xa3
    2060:	009b      	lsls	r3, r3, #2
    2062:	58d3      	ldr	r3, [r2, r3]
    2064:	1c59      	adds	r1, r3, #1
    2066:	687a      	ldr	r2, [r7, #4]
    2068:	23a3      	movs	r3, #163	; 0xa3
    206a:	009b      	lsls	r3, r3, #2
    206c:	50d1      	str	r1, [r2, r3]
    206e:	e008      	b.n	2082 <STACK_SIZE+0x82>
			}
			else
			{
				PowerOffPin(k);
    2070:	687a      	ldr	r2, [r7, #4]
    2072:	23a3      	movs	r3, #163	; 0xa3
    2074:	009b      	lsls	r3, r3, #2
    2076:	58d2      	ldr	r2, [r2, r3]
    2078:	687b      	ldr	r3, [r7, #4]
    207a:	0011      	movs	r1, r2
    207c:	0018      	movs	r0, r3
    207e:	4b15      	ldr	r3, [pc, #84]	; (20d4 <STACK_SIZE+0xd4>)
    2080:	4798      	blx	r3
		for ( k=3;k<totalPins;k++)
    2082:	687a      	ldr	r2, [r7, #4]
    2084:	23a3      	movs	r3, #163	; 0xa3
    2086:	009b      	lsls	r3, r3, #2
    2088:	58d3      	ldr	r3, [r2, r3]
    208a:	1c59      	adds	r1, r3, #1
    208c:	687a      	ldr	r2, [r7, #4]
    208e:	23a3      	movs	r3, #163	; 0xa3
    2090:	009b      	lsls	r3, r3, #2
    2092:	50d1      	str	r1, [r2, r3]
    2094:	e7bd      	b.n	2012 <STACK_SIZE+0x12>
					break;
    2096:	46c0      	nop			; (mov r8, r8)
			}
			
			
		}
	}while((!changeModeRequest));
    2098:	687a      	ldr	r2, [r7, #4]
    209a:	23bc      	movs	r3, #188	; 0xbc
    209c:	005b      	lsls	r3, r3, #1
    209e:	5cd3      	ldrb	r3, [r2, r3]
    20a0:	b2db      	uxtb	r3, r3
	do
    20a2:	2201      	movs	r2, #1
    20a4:	4053      	eors	r3, r2
    20a6:	b2db      	uxtb	r3, r3
    20a8:	2b00      	cmp	r3, #0
    20aa:	d000      	beq.n	20ae <STACK_SIZE+0xae>
    20ac:	e7ac      	b.n	2008 <STACK_SIZE+0x8>
	request=false;
    20ae:	687a      	ldr	r2, [r7, #4]
    20b0:	23c2      	movs	r3, #194	; 0xc2
    20b2:	005b      	lsls	r3, r3, #1
    20b4:	2100      	movs	r1, #0
    20b6:	54d1      	strb	r1, [r2, r3]
	onMagenta=false;
    20b8:	687a      	ldr	r2, [r7, #4]
    20ba:	23c3      	movs	r3, #195	; 0xc3
    20bc:	005b      	lsls	r3, r3, #1
    20be:	2100      	movs	r1, #0
    20c0:	54d1      	strb	r1, [r2, r3]
	
}
    20c2:	46c0      	nop			; (mov r8, r8)
    20c4:	46bd      	mov	sp, r7
    20c6:	b002      	add	sp, #8
    20c8:	bd80      	pop	{r7, pc}
    20ca:	46c0      	nop			; (mov r8, r8)
    20cc:	000037c9 	.word	0x000037c9
    20d0:	000021b1 	.word	0x000021b1
    20d4:	00002b51 	.word	0x00002b51

000020d8 <_ZN16LedHandler_Class9WhiteWaveEv>:

void	LedHandler_Class::WhiteWave(void){
    20d8:	b580      	push	{r7, lr}
    20da:	b082      	sub	sp, #8
    20dc:	af00      	add	r7, sp, #0
    20de:	6078      	str	r0, [r7, #4]
	request=false;
    20e0:	687a      	ldr	r2, [r7, #4]
    20e2:	23c2      	movs	r3, #194	; 0xc2
    20e4:	005b      	lsls	r3, r3, #1
    20e6:	2100      	movs	r1, #0
    20e8:	54d1      	strb	r1, [r2, r3]
	onWhite=true;
    20ea:	687a      	ldr	r2, [r7, #4]
    20ec:	2388      	movs	r3, #136	; 0x88
    20ee:	33ff      	adds	r3, #255	; 0xff
    20f0:	2101      	movs	r1, #1
    20f2:	54d1      	strb	r1, [r2, r3]
	do
	{
		for ( k=2;k<totalPins;k++)
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	23a3      	movs	r3, #163	; 0xa3
    20f8:	009b      	lsls	r3, r3, #2
    20fa:	2102      	movs	r1, #2
    20fc:	50d1      	str	r1, [r2, r3]
    20fe:	687a      	ldr	r2, [r7, #4]
    2100:	23a3      	movs	r3, #163	; 0xa3
    2102:	009b      	lsls	r3, r3, #2
    2104:	58d3      	ldr	r3, [r2, r3]
    2106:	6879      	ldr	r1, [r7, #4]
    2108:	22a0      	movs	r2, #160	; 0xa0
    210a:	0092      	lsls	r2, r2, #2
    210c:	5c8a      	ldrb	r2, [r1, r2]
    210e:	4293      	cmp	r3, r2
    2110:	da2e      	bge.n	2170 <_ZN16LedHandler_Class9WhiteWaveEv+0x98>
		{
			if (IsBlue(k))
    2112:	6878      	ldr	r0, [r7, #4]
    2114:	687a      	ldr	r2, [r7, #4]
    2116:	23a3      	movs	r3, #163	; 0xa3
    2118:	009b      	lsls	r3, r3, #2
    211a:	58d3      	ldr	r3, [r2, r3]
    211c:	b2db      	uxtb	r3, r3
    211e:	0019      	movs	r1, r3
    2120:	4b20      	ldr	r3, [pc, #128]	; (21a4 <_ZN16LedHandler_Class9WhiteWaveEv+0xcc>)
    2122:	4798      	blx	r3
    2124:	1e03      	subs	r3, r0, #0
    2126:	d010      	beq.n	214a <_ZN16LedHandler_Class9WhiteWaveEv+0x72>
			{
				if (!PowerOnSingleLed(k))
    2128:	687a      	ldr	r2, [r7, #4]
    212a:	23a3      	movs	r3, #163	; 0xa3
    212c:	009b      	lsls	r3, r3, #2
    212e:	58d2      	ldr	r2, [r2, r3]
    2130:	687b      	ldr	r3, [r7, #4]
    2132:	0011      	movs	r1, r2
    2134:	0018      	movs	r0, r3
    2136:	4b1c      	ldr	r3, [pc, #112]	; (21a8 <_ZN16LedHandler_Class9WhiteWaveEv+0xd0>)
    2138:	4798      	blx	r3
    213a:	0003      	movs	r3, r0
    213c:	001a      	movs	r2, r3
    213e:	2301      	movs	r3, #1
    2140:	4053      	eors	r3, r2
    2142:	b2db      	uxtb	r3, r3
    2144:	2b00      	cmp	r3, #0
    2146:	d009      	beq.n	215c <_ZN16LedHandler_Class9WhiteWaveEv+0x84>
				{
					break;
    2148:	e012      	b.n	2170 <_ZN16LedHandler_Class9WhiteWaveEv+0x98>
				}
				
			}
			else
			{
				PowerOffPin(k);
    214a:	687a      	ldr	r2, [r7, #4]
    214c:	23a3      	movs	r3, #163	; 0xa3
    214e:	009b      	lsls	r3, r3, #2
    2150:	58d2      	ldr	r2, [r2, r3]
    2152:	687b      	ldr	r3, [r7, #4]
    2154:	0011      	movs	r1, r2
    2156:	0018      	movs	r0, r3
    2158:	4b14      	ldr	r3, [pc, #80]	; (21ac <_ZN16LedHandler_Class9WhiteWaveEv+0xd4>)
    215a:	4798      	blx	r3
		for ( k=2;k<totalPins;k++)
    215c:	687a      	ldr	r2, [r7, #4]
    215e:	23a3      	movs	r3, #163	; 0xa3
    2160:	009b      	lsls	r3, r3, #2
    2162:	58d3      	ldr	r3, [r2, r3]
    2164:	1c59      	adds	r1, r3, #1
    2166:	687a      	ldr	r2, [r7, #4]
    2168:	23a3      	movs	r3, #163	; 0xa3
    216a:	009b      	lsls	r3, r3, #2
    216c:	50d1      	str	r1, [r2, r3]
    216e:	e7c6      	b.n	20fe <_ZN16LedHandler_Class9WhiteWaveEv+0x26>
			}
			
			
		}
	}while((!changeModeRequest));
    2170:	687a      	ldr	r2, [r7, #4]
    2172:	23bc      	movs	r3, #188	; 0xbc
    2174:	005b      	lsls	r3, r3, #1
    2176:	5cd3      	ldrb	r3, [r2, r3]
    2178:	b2db      	uxtb	r3, r3
	do
    217a:	2201      	movs	r2, #1
    217c:	4053      	eors	r3, r2
    217e:	b2db      	uxtb	r3, r3
    2180:	2b00      	cmp	r3, #0
    2182:	d000      	beq.n	2186 <_ZN16LedHandler_Class9WhiteWaveEv+0xae>
    2184:	e7b6      	b.n	20f4 <_ZN16LedHandler_Class9WhiteWaveEv+0x1c>
	request=false;
    2186:	687a      	ldr	r2, [r7, #4]
    2188:	23c2      	movs	r3, #194	; 0xc2
    218a:	005b      	lsls	r3, r3, #1
    218c:	2100      	movs	r1, #0
    218e:	54d1      	strb	r1, [r2, r3]
	onWhite=false;
    2190:	687a      	ldr	r2, [r7, #4]
    2192:	2388      	movs	r3, #136	; 0x88
    2194:	33ff      	adds	r3, #255	; 0xff
    2196:	2100      	movs	r1, #0
    2198:	54d1      	strb	r1, [r2, r3]
	
}
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	46bd      	mov	sp, r7
    219e:	b002      	add	sp, #8
    21a0:	bd80      	pop	{r7, pc}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	00003823 	.word	0x00003823
    21a8:	000021b1 	.word	0x000021b1
    21ac:	00002b51 	.word	0x00002b51

000021b0 <_ZN16LedHandler_Class16PowerOnSingleLedEi>:
bool	LedHandler_Class::PowerOnSingleLed(int pn){
    21b0:	b590      	push	{r4, r7, lr}
    21b2:	b083      	sub	sp, #12
    21b4:	af00      	add	r7, sp, #0
    21b6:	6078      	str	r0, [r7, #4]
    21b8:	6039      	str	r1, [r7, #0]

	if (onLila){
    21ba:	687a      	ldr	r2, [r7, #4]
    21bc:	2386      	movs	r3, #134	; 0x86
    21be:	33ff      	adds	r3, #255	; 0xff
    21c0:	5cd3      	ldrb	r3, [r2, r3]
    21c2:	2b00      	cmp	r3, #0
    21c4:	d100      	bne.n	21c8 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x18>
    21c6:	e09c      	b.n	2302 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x152>
		StartBlinker(1);
    21c8:	687b      	ldr	r3, [r7, #4]
    21ca:	2101      	movs	r1, #1
    21cc:	0018      	movs	r0, r3
    21ce:	4bd0      	ldr	r3, [pc, #832]	; (2510 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x360>)
    21d0:	4798      	blx	r3
		PowerOnPin(pn);
    21d2:	683a      	ldr	r2, [r7, #0]
    21d4:	687b      	ldr	r3, [r7, #4]
    21d6:	0011      	movs	r1, r2
    21d8:	0018      	movs	r0, r3
    21da:	4bce      	ldr	r3, [pc, #824]	; (2514 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x364>)
    21dc:	4798      	blx	r3
		if (pn<kTOTALLEFTPINS)
    21de:	683b      	ldr	r3, [r7, #0]
    21e0:	2b1c      	cmp	r3, #28
    21e2:	dc1e      	bgt.n	2222 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x72>
		{
			SetPin(pins.allPorts[pn+2],pins.allPins[pn+2]);
    21e4:	6878      	ldr	r0, [r7, #4]
    21e6:	683b      	ldr	r3, [r7, #0]
    21e8:	1c9a      	adds	r2, r3, #2
    21ea:	6879      	ldr	r1, [r7, #4]
    21ec:	23cc      	movs	r3, #204	; 0xcc
    21ee:	005b      	lsls	r3, r3, #1
    21f0:	188a      	adds	r2, r1, r2
    21f2:	18d3      	adds	r3, r2, r3
    21f4:	781c      	ldrb	r4, [r3, #0]
    21f6:	683b      	ldr	r3, [r7, #0]
    21f8:	1c9a      	adds	r2, r3, #2
    21fa:	6879      	ldr	r1, [r7, #4]
    21fc:	23e9      	movs	r3, #233	; 0xe9
    21fe:	005b      	lsls	r3, r3, #1
    2200:	188a      	adds	r2, r1, r2
    2202:	18d3      	adds	r3, r2, r3
    2204:	781b      	ldrb	r3, [r3, #0]
    2206:	001a      	movs	r2, r3
    2208:	0021      	movs	r1, r4
    220a:	4bc3      	ldr	r3, [pc, #780]	; (2518 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x368>)
    220c:	4798      	blx	r3
			state.status[pn+2]=1;
    220e:	683b      	ldr	r3, [r7, #0]
    2210:	1c9a      	adds	r2, r3, #2
    2212:	6879      	ldr	r1, [r7, #4]
    2214:	2383      	movs	r3, #131	; 0x83
    2216:	009b      	lsls	r3, r3, #2
    2218:	188a      	adds	r2, r1, r2
    221a:	18d3      	adds	r3, r2, r3
    221c:	2201      	movs	r2, #1
    221e:	701a      	strb	r2, [r3, #0]
    2220:	e01d      	b.n	225e <_ZN16LedHandler_Class16PowerOnSingleLedEi+0xae>
		}
		else
		{
			SetPin(pins.allPorts[pn-2],pins.allPins[pn-2]);
    2222:	6878      	ldr	r0, [r7, #4]
    2224:	683b      	ldr	r3, [r7, #0]
    2226:	1e9a      	subs	r2, r3, #2
    2228:	6879      	ldr	r1, [r7, #4]
    222a:	23cc      	movs	r3, #204	; 0xcc
    222c:	005b      	lsls	r3, r3, #1
    222e:	188a      	adds	r2, r1, r2
    2230:	18d3      	adds	r3, r2, r3
    2232:	781c      	ldrb	r4, [r3, #0]
    2234:	683b      	ldr	r3, [r7, #0]
    2236:	1e9a      	subs	r2, r3, #2
    2238:	6879      	ldr	r1, [r7, #4]
    223a:	23e9      	movs	r3, #233	; 0xe9
    223c:	005b      	lsls	r3, r3, #1
    223e:	188a      	adds	r2, r1, r2
    2240:	18d3      	adds	r3, r2, r3
    2242:	781b      	ldrb	r3, [r3, #0]
    2244:	001a      	movs	r2, r3
    2246:	0021      	movs	r1, r4
    2248:	4bb3      	ldr	r3, [pc, #716]	; (2518 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x368>)
    224a:	4798      	blx	r3
			state.status[pn-2]=1;
    224c:	683b      	ldr	r3, [r7, #0]
    224e:	1e9a      	subs	r2, r3, #2
    2250:	6879      	ldr	r1, [r7, #4]
    2252:	2383      	movs	r3, #131	; 0x83
    2254:	009b      	lsls	r3, r3, #2
    2256:	188a      	adds	r2, r1, r2
    2258:	18d3      	adds	r3, r2, r3
    225a:	2201      	movs	r2, #1
    225c:	701a      	strb	r2, [r3, #0]
		}
		
		while((!blinkOut)){
    225e:	687a      	ldr	r2, [r7, #4]
    2260:	237c      	movs	r3, #124	; 0x7c
    2262:	33ff      	adds	r3, #255	; 0xff
    2264:	5cd3      	ldrb	r3, [r2, r3]
    2266:	b2db      	uxtb	r3, r3
    2268:	2201      	movs	r2, #1
    226a:	4053      	eors	r3, r2
    226c:	b2db      	uxtb	r3, r3
    226e:	2b00      	cmp	r3, #0
    2270:	d000      	beq.n	2274 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0xc4>
    2272:	e7f4      	b.n	225e <_ZN16LedHandler_Class16PowerOnSingleLedEi+0xae>
			//Dimmen(0);
		}
		PowerOffPin(pn);
    2274:	683a      	ldr	r2, [r7, #0]
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	0011      	movs	r1, r2
    227a:	0018      	movs	r0, r3
    227c:	4ba7      	ldr	r3, [pc, #668]	; (251c <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x36c>)
    227e:	4798      	blx	r3
		if (pn<kTOTALLEFTPINS)
    2280:	683b      	ldr	r3, [r7, #0]
    2282:	2b1c      	cmp	r3, #28
    2284:	dc1e      	bgt.n	22c4 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x114>
		{
			ClearPin(pins.allPorts[pn+2],pins.allPins[pn+2]);
    2286:	6878      	ldr	r0, [r7, #4]
    2288:	683b      	ldr	r3, [r7, #0]
    228a:	1c9a      	adds	r2, r3, #2
    228c:	6879      	ldr	r1, [r7, #4]
    228e:	23cc      	movs	r3, #204	; 0xcc
    2290:	005b      	lsls	r3, r3, #1
    2292:	188a      	adds	r2, r1, r2
    2294:	18d3      	adds	r3, r2, r3
    2296:	781c      	ldrb	r4, [r3, #0]
    2298:	683b      	ldr	r3, [r7, #0]
    229a:	1c9a      	adds	r2, r3, #2
    229c:	6879      	ldr	r1, [r7, #4]
    229e:	23e9      	movs	r3, #233	; 0xe9
    22a0:	005b      	lsls	r3, r3, #1
    22a2:	188a      	adds	r2, r1, r2
    22a4:	18d3      	adds	r3, r2, r3
    22a6:	781b      	ldrb	r3, [r3, #0]
    22a8:	001a      	movs	r2, r3
    22aa:	0021      	movs	r1, r4
    22ac:	4b9c      	ldr	r3, [pc, #624]	; (2520 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x370>)
    22ae:	4798      	blx	r3
			state.status[pn+2]=0;
    22b0:	683b      	ldr	r3, [r7, #0]
    22b2:	1c9a      	adds	r2, r3, #2
    22b4:	6879      	ldr	r1, [r7, #4]
    22b6:	2383      	movs	r3, #131	; 0x83
    22b8:	009b      	lsls	r3, r3, #2
    22ba:	188a      	adds	r2, r1, r2
    22bc:	18d3      	adds	r3, r2, r3
    22be:	2200      	movs	r2, #0
    22c0:	701a      	strb	r2, [r3, #0]
    22c2:	e21a      	b.n	26fa <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x54a>
		}
		else
		{
			ClearPin(pins.allPorts[pn-2],pins.allPins[pn-2]);
    22c4:	6878      	ldr	r0, [r7, #4]
    22c6:	683b      	ldr	r3, [r7, #0]
    22c8:	1e9a      	subs	r2, r3, #2
    22ca:	6879      	ldr	r1, [r7, #4]
    22cc:	23cc      	movs	r3, #204	; 0xcc
    22ce:	005b      	lsls	r3, r3, #1
    22d0:	188a      	adds	r2, r1, r2
    22d2:	18d3      	adds	r3, r2, r3
    22d4:	781c      	ldrb	r4, [r3, #0]
    22d6:	683b      	ldr	r3, [r7, #0]
    22d8:	1e9a      	subs	r2, r3, #2
    22da:	6879      	ldr	r1, [r7, #4]
    22dc:	23e9      	movs	r3, #233	; 0xe9
    22de:	005b      	lsls	r3, r3, #1
    22e0:	188a      	adds	r2, r1, r2
    22e2:	18d3      	adds	r3, r2, r3
    22e4:	781b      	ldrb	r3, [r3, #0]
    22e6:	001a      	movs	r2, r3
    22e8:	0021      	movs	r1, r4
    22ea:	4b8d      	ldr	r3, [pc, #564]	; (2520 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x370>)
    22ec:	4798      	blx	r3
			state.status[pn-2]=0;
    22ee:	683b      	ldr	r3, [r7, #0]
    22f0:	1e9a      	subs	r2, r3, #2
    22f2:	6879      	ldr	r1, [r7, #4]
    22f4:	2383      	movs	r3, #131	; 0x83
    22f6:	009b      	lsls	r3, r3, #2
    22f8:	188a      	adds	r2, r1, r2
    22fa:	18d3      	adds	r3, r2, r3
    22fc:	2200      	movs	r2, #0
    22fe:	701a      	strb	r2, [r3, #0]
    2300:	e1fb      	b.n	26fa <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x54a>
		}
						
	}else{
		if (onMagenta)
    2302:	687a      	ldr	r2, [r7, #4]
    2304:	23c3      	movs	r3, #195	; 0xc3
    2306:	005b      	lsls	r3, r3, #1
    2308:	5cd3      	ldrb	r3, [r2, r3]
    230a:	2b00      	cmp	r3, #0
    230c:	d100      	bne.n	2310 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x160>
    230e:	e0ad      	b.n	246c <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x2bc>
		{
				StartBlinker(1);
    2310:	687b      	ldr	r3, [r7, #4]
    2312:	2101      	movs	r1, #1
    2314:	0018      	movs	r0, r3
    2316:	4b7e      	ldr	r3, [pc, #504]	; (2510 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x360>)
    2318:	4798      	blx	r3
				PowerOnPin(pn);
    231a:	683a      	ldr	r2, [r7, #0]
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	0011      	movs	r1, r2
    2320:	0018      	movs	r0, r3
    2322:	4b7c      	ldr	r3, [pc, #496]	; (2514 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x364>)
    2324:	4798      	blx	r3
				if (pn<kTOTALLEFTPINS)
    2326:	683b      	ldr	r3, [r7, #0]
    2328:	2b1c      	cmp	r3, #28
    232a:	dc1e      	bgt.n	236a <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x1ba>
				{
						SetPin(pins.allPorts[pn-1],pins.allPins[pn-1]);
    232c:	6878      	ldr	r0, [r7, #4]
    232e:	683b      	ldr	r3, [r7, #0]
    2330:	1e5a      	subs	r2, r3, #1
    2332:	6879      	ldr	r1, [r7, #4]
    2334:	23cc      	movs	r3, #204	; 0xcc
    2336:	005b      	lsls	r3, r3, #1
    2338:	188a      	adds	r2, r1, r2
    233a:	18d3      	adds	r3, r2, r3
    233c:	781c      	ldrb	r4, [r3, #0]
    233e:	683b      	ldr	r3, [r7, #0]
    2340:	1e5a      	subs	r2, r3, #1
    2342:	6879      	ldr	r1, [r7, #4]
    2344:	23e9      	movs	r3, #233	; 0xe9
    2346:	005b      	lsls	r3, r3, #1
    2348:	188a      	adds	r2, r1, r2
    234a:	18d3      	adds	r3, r2, r3
    234c:	781b      	ldrb	r3, [r3, #0]
    234e:	001a      	movs	r2, r3
    2350:	0021      	movs	r1, r4
    2352:	4b71      	ldr	r3, [pc, #452]	; (2518 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x368>)
    2354:	4798      	blx	r3
						state.status[pn-1]=1;
    2356:	683b      	ldr	r3, [r7, #0]
    2358:	1e5a      	subs	r2, r3, #1
    235a:	6879      	ldr	r1, [r7, #4]
    235c:	2383      	movs	r3, #131	; 0x83
    235e:	009b      	lsls	r3, r3, #2
    2360:	188a      	adds	r2, r1, r2
    2362:	18d3      	adds	r3, r2, r3
    2364:	2201      	movs	r2, #1
    2366:	701a      	strb	r2, [r3, #0]
    2368:	e025      	b.n	23b6 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x206>
				} 
				else
				{
					if (pn+1<totalPins)
    236a:	683b      	ldr	r3, [r7, #0]
    236c:	3301      	adds	r3, #1
    236e:	6879      	ldr	r1, [r7, #4]
    2370:	22a0      	movs	r2, #160	; 0xa0
    2372:	0092      	lsls	r2, r2, #2
    2374:	5c8a      	ldrb	r2, [r1, r2]
    2376:	4293      	cmp	r3, r2
    2378:	da1d      	bge.n	23b6 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x206>
					{
						SetPin(pins.allPorts[pn+1],pins.allPins[pn+1]);
    237a:	6878      	ldr	r0, [r7, #4]
    237c:	683b      	ldr	r3, [r7, #0]
    237e:	1c5a      	adds	r2, r3, #1
    2380:	6879      	ldr	r1, [r7, #4]
    2382:	23cc      	movs	r3, #204	; 0xcc
    2384:	005b      	lsls	r3, r3, #1
    2386:	188a      	adds	r2, r1, r2
    2388:	18d3      	adds	r3, r2, r3
    238a:	781c      	ldrb	r4, [r3, #0]
    238c:	683b      	ldr	r3, [r7, #0]
    238e:	1c5a      	adds	r2, r3, #1
    2390:	6879      	ldr	r1, [r7, #4]
    2392:	23e9      	movs	r3, #233	; 0xe9
    2394:	005b      	lsls	r3, r3, #1
    2396:	188a      	adds	r2, r1, r2
    2398:	18d3      	adds	r3, r2, r3
    239a:	781b      	ldrb	r3, [r3, #0]
    239c:	001a      	movs	r2, r3
    239e:	0021      	movs	r1, r4
    23a0:	4b5d      	ldr	r3, [pc, #372]	; (2518 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x368>)
    23a2:	4798      	blx	r3
						state.status[pn+1]=1;
    23a4:	683b      	ldr	r3, [r7, #0]
    23a6:	1c5a      	adds	r2, r3, #1
    23a8:	6879      	ldr	r1, [r7, #4]
    23aa:	2383      	movs	r3, #131	; 0x83
    23ac:	009b      	lsls	r3, r3, #2
    23ae:	188a      	adds	r2, r1, r2
    23b0:	18d3      	adds	r3, r2, r3
    23b2:	2201      	movs	r2, #1
    23b4:	701a      	strb	r2, [r3, #0]
					}
					
				}
				while((!blinkOut)){
    23b6:	687a      	ldr	r2, [r7, #4]
    23b8:	237c      	movs	r3, #124	; 0x7c
    23ba:	33ff      	adds	r3, #255	; 0xff
    23bc:	5cd3      	ldrb	r3, [r2, r3]
    23be:	b2db      	uxtb	r3, r3
    23c0:	2201      	movs	r2, #1
    23c2:	4053      	eors	r3, r2
    23c4:	b2db      	uxtb	r3, r3
    23c6:	2b00      	cmp	r3, #0
    23c8:	d000      	beq.n	23cc <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x21c>
    23ca:	e7f4      	b.n	23b6 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x206>
					//Dimmen(0);
				}
				PowerOffPin(pn);
    23cc:	683a      	ldr	r2, [r7, #0]
    23ce:	687b      	ldr	r3, [r7, #4]
    23d0:	0011      	movs	r1, r2
    23d2:	0018      	movs	r0, r3
    23d4:	4b51      	ldr	r3, [pc, #324]	; (251c <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x36c>)
    23d6:	4798      	blx	r3
				if (pn<kTOTALLEFTPINS)
    23d8:	683b      	ldr	r3, [r7, #0]
    23da:	2b1c      	cmp	r3, #28
    23dc:	dc1e      	bgt.n	241c <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x26c>
				{
					ClearPin(pins.allPorts[pn-1],pins.allPins[pn-1]);
    23de:	6878      	ldr	r0, [r7, #4]
    23e0:	683b      	ldr	r3, [r7, #0]
    23e2:	1e5a      	subs	r2, r3, #1
    23e4:	6879      	ldr	r1, [r7, #4]
    23e6:	23cc      	movs	r3, #204	; 0xcc
    23e8:	005b      	lsls	r3, r3, #1
    23ea:	188a      	adds	r2, r1, r2
    23ec:	18d3      	adds	r3, r2, r3
    23ee:	781c      	ldrb	r4, [r3, #0]
    23f0:	683b      	ldr	r3, [r7, #0]
    23f2:	1e5a      	subs	r2, r3, #1
    23f4:	6879      	ldr	r1, [r7, #4]
    23f6:	23e9      	movs	r3, #233	; 0xe9
    23f8:	005b      	lsls	r3, r3, #1
    23fa:	188a      	adds	r2, r1, r2
    23fc:	18d3      	adds	r3, r2, r3
    23fe:	781b      	ldrb	r3, [r3, #0]
    2400:	001a      	movs	r2, r3
    2402:	0021      	movs	r1, r4
    2404:	4b46      	ldr	r3, [pc, #280]	; (2520 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x370>)
    2406:	4798      	blx	r3
					state.status[pn-1]=0;
    2408:	683b      	ldr	r3, [r7, #0]
    240a:	1e5a      	subs	r2, r3, #1
    240c:	6879      	ldr	r1, [r7, #4]
    240e:	2383      	movs	r3, #131	; 0x83
    2410:	009b      	lsls	r3, r3, #2
    2412:	188a      	adds	r2, r1, r2
    2414:	18d3      	adds	r3, r2, r3
    2416:	2200      	movs	r2, #0
    2418:	701a      	strb	r2, [r3, #0]
    241a:	e16e      	b.n	26fa <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x54a>
				}
				else
				{
					if (pn+1<totalPins)
    241c:	683b      	ldr	r3, [r7, #0]
    241e:	3301      	adds	r3, #1
    2420:	6879      	ldr	r1, [r7, #4]
    2422:	22a0      	movs	r2, #160	; 0xa0
    2424:	0092      	lsls	r2, r2, #2
    2426:	5c8a      	ldrb	r2, [r1, r2]
    2428:	4293      	cmp	r3, r2
    242a:	db00      	blt.n	242e <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x27e>
    242c:	e165      	b.n	26fa <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x54a>
					{
						ClearPin(pins.allPorts[pn+1],pins.allPins[pn+1]);
    242e:	6878      	ldr	r0, [r7, #4]
    2430:	683b      	ldr	r3, [r7, #0]
    2432:	1c5a      	adds	r2, r3, #1
    2434:	6879      	ldr	r1, [r7, #4]
    2436:	23cc      	movs	r3, #204	; 0xcc
    2438:	005b      	lsls	r3, r3, #1
    243a:	188a      	adds	r2, r1, r2
    243c:	18d3      	adds	r3, r2, r3
    243e:	781c      	ldrb	r4, [r3, #0]
    2440:	683b      	ldr	r3, [r7, #0]
    2442:	1c5a      	adds	r2, r3, #1
    2444:	6879      	ldr	r1, [r7, #4]
    2446:	23e9      	movs	r3, #233	; 0xe9
    2448:	005b      	lsls	r3, r3, #1
    244a:	188a      	adds	r2, r1, r2
    244c:	18d3      	adds	r3, r2, r3
    244e:	781b      	ldrb	r3, [r3, #0]
    2450:	001a      	movs	r2, r3
    2452:	0021      	movs	r1, r4
    2454:	4b32      	ldr	r3, [pc, #200]	; (2520 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x370>)
    2456:	4798      	blx	r3
						state.status[pn+1]=0;
    2458:	683b      	ldr	r3, [r7, #0]
    245a:	1c5a      	adds	r2, r3, #1
    245c:	6879      	ldr	r1, [r7, #4]
    245e:	2383      	movs	r3, #131	; 0x83
    2460:	009b      	lsls	r3, r3, #2
    2462:	188a      	adds	r2, r1, r2
    2464:	18d3      	adds	r3, r2, r3
    2466:	2200      	movs	r2, #0
    2468:	701a      	strb	r2, [r3, #0]
    246a:	e146      	b.n	26fa <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x54a>
				}
		
		} 
		else
		{
			if (onWhite)
    246c:	687a      	ldr	r2, [r7, #4]
    246e:	2388      	movs	r3, #136	; 0x88
    2470:	33ff      	adds	r3, #255	; 0xff
    2472:	5cd3      	ldrb	r3, [r2, r3]
    2474:	2b00      	cmp	r3, #0
    2476:	d100      	bne.n	247a <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x2ca>
    2478:	e11e      	b.n	26b8 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x508>
			{
				StartBlinker(0);
    247a:	687b      	ldr	r3, [r7, #4]
    247c:	2100      	movs	r1, #0
    247e:	0018      	movs	r0, r3
    2480:	4b23      	ldr	r3, [pc, #140]	; (2510 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x360>)
    2482:	4798      	blx	r3
				PowerOnPin(pn);
    2484:	683a      	ldr	r2, [r7, #0]
    2486:	687b      	ldr	r3, [r7, #4]
    2488:	0011      	movs	r1, r2
    248a:	0018      	movs	r0, r3
    248c:	4b21      	ldr	r3, [pc, #132]	; (2514 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x364>)
    248e:	4798      	blx	r3
				if (pn<kTOTALLEFTPINS)
    2490:	683b      	ldr	r3, [r7, #0]
    2492:	2b1c      	cmp	r3, #28
    2494:	dc46      	bgt.n	2524 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x374>
				{
					SetPin(pins.allPorts[pn+2],pins.allPins[pn+2]);
    2496:	6878      	ldr	r0, [r7, #4]
    2498:	683b      	ldr	r3, [r7, #0]
    249a:	1c9a      	adds	r2, r3, #2
    249c:	6879      	ldr	r1, [r7, #4]
    249e:	23cc      	movs	r3, #204	; 0xcc
    24a0:	005b      	lsls	r3, r3, #1
    24a2:	188a      	adds	r2, r1, r2
    24a4:	18d3      	adds	r3, r2, r3
    24a6:	781c      	ldrb	r4, [r3, #0]
    24a8:	683b      	ldr	r3, [r7, #0]
    24aa:	1c9a      	adds	r2, r3, #2
    24ac:	6879      	ldr	r1, [r7, #4]
    24ae:	23e9      	movs	r3, #233	; 0xe9
    24b0:	005b      	lsls	r3, r3, #1
    24b2:	188a      	adds	r2, r1, r2
    24b4:	18d3      	adds	r3, r2, r3
    24b6:	781b      	ldrb	r3, [r3, #0]
    24b8:	001a      	movs	r2, r3
    24ba:	0021      	movs	r1, r4
    24bc:	4b16      	ldr	r3, [pc, #88]	; (2518 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x368>)
    24be:	4798      	blx	r3
					state.status[pn+2]=1;
    24c0:	683b      	ldr	r3, [r7, #0]
    24c2:	1c9a      	adds	r2, r3, #2
    24c4:	6879      	ldr	r1, [r7, #4]
    24c6:	2383      	movs	r3, #131	; 0x83
    24c8:	009b      	lsls	r3, r3, #2
    24ca:	188a      	adds	r2, r1, r2
    24cc:	18d3      	adds	r3, r2, r3
    24ce:	2201      	movs	r2, #1
    24d0:	701a      	strb	r2, [r3, #0]
					SetPin(pins.allPorts[pn+1],pins.allPins[pn+1]);
    24d2:	6878      	ldr	r0, [r7, #4]
    24d4:	683b      	ldr	r3, [r7, #0]
    24d6:	1c5a      	adds	r2, r3, #1
    24d8:	6879      	ldr	r1, [r7, #4]
    24da:	23cc      	movs	r3, #204	; 0xcc
    24dc:	005b      	lsls	r3, r3, #1
    24de:	188a      	adds	r2, r1, r2
    24e0:	18d3      	adds	r3, r2, r3
    24e2:	781c      	ldrb	r4, [r3, #0]
    24e4:	683b      	ldr	r3, [r7, #0]
    24e6:	1c5a      	adds	r2, r3, #1
    24e8:	6879      	ldr	r1, [r7, #4]
    24ea:	23e9      	movs	r3, #233	; 0xe9
    24ec:	005b      	lsls	r3, r3, #1
    24ee:	188a      	adds	r2, r1, r2
    24f0:	18d3      	adds	r3, r2, r3
    24f2:	781b      	ldrb	r3, [r3, #0]
    24f4:	001a      	movs	r2, r3
    24f6:	0021      	movs	r1, r4
    24f8:	4b07      	ldr	r3, [pc, #28]	; (2518 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x368>)
    24fa:	4798      	blx	r3
					state.status[pn+1]=1;
    24fc:	683b      	ldr	r3, [r7, #0]
    24fe:	1c5a      	adds	r2, r3, #1
    2500:	6879      	ldr	r1, [r7, #4]
    2502:	2383      	movs	r3, #131	; 0x83
    2504:	009b      	lsls	r3, r3, #2
    2506:	188a      	adds	r2, r1, r2
    2508:	18d3      	adds	r3, r2, r3
    250a:	2201      	movs	r2, #1
    250c:	701a      	strb	r2, [r3, #0]
    250e:	e045      	b.n	259c <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3ec>
    2510:	00002a85 	.word	0x00002a85
    2514:	00002aed 	.word	0x00002aed
    2518:	00003559 	.word	0x00003559
    251c:	00002b51 	.word	0x00002b51
    2520:	0000359d 	.word	0x0000359d
				}
				else
				{
					SetPin(pins.allPorts[pn-2],pins.allPins[pn-2]);
    2524:	6878      	ldr	r0, [r7, #4]
    2526:	683b      	ldr	r3, [r7, #0]
    2528:	1e9a      	subs	r2, r3, #2
    252a:	6879      	ldr	r1, [r7, #4]
    252c:	23cc      	movs	r3, #204	; 0xcc
    252e:	005b      	lsls	r3, r3, #1
    2530:	188a      	adds	r2, r1, r2
    2532:	18d3      	adds	r3, r2, r3
    2534:	781c      	ldrb	r4, [r3, #0]
    2536:	683b      	ldr	r3, [r7, #0]
    2538:	1e9a      	subs	r2, r3, #2
    253a:	6879      	ldr	r1, [r7, #4]
    253c:	23e9      	movs	r3, #233	; 0xe9
    253e:	005b      	lsls	r3, r3, #1
    2540:	188a      	adds	r2, r1, r2
    2542:	18d3      	adds	r3, r2, r3
    2544:	781b      	ldrb	r3, [r3, #0]
    2546:	001a      	movs	r2, r3
    2548:	0021      	movs	r1, r4
    254a:	4ba2      	ldr	r3, [pc, #648]	; (27d4 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x624>)
    254c:	4798      	blx	r3
					state.status[pn-2]=1;
    254e:	683b      	ldr	r3, [r7, #0]
    2550:	1e9a      	subs	r2, r3, #2
    2552:	6879      	ldr	r1, [r7, #4]
    2554:	2383      	movs	r3, #131	; 0x83
    2556:	009b      	lsls	r3, r3, #2
    2558:	188a      	adds	r2, r1, r2
    255a:	18d3      	adds	r3, r2, r3
    255c:	2201      	movs	r2, #1
    255e:	701a      	strb	r2, [r3, #0]
					SetPin(pins.allPorts[pn-1],pins.allPins[pn-1]);
    2560:	6878      	ldr	r0, [r7, #4]
    2562:	683b      	ldr	r3, [r7, #0]
    2564:	1e5a      	subs	r2, r3, #1
    2566:	6879      	ldr	r1, [r7, #4]
    2568:	23cc      	movs	r3, #204	; 0xcc
    256a:	005b      	lsls	r3, r3, #1
    256c:	188a      	adds	r2, r1, r2
    256e:	18d3      	adds	r3, r2, r3
    2570:	781c      	ldrb	r4, [r3, #0]
    2572:	683b      	ldr	r3, [r7, #0]
    2574:	1e5a      	subs	r2, r3, #1
    2576:	6879      	ldr	r1, [r7, #4]
    2578:	23e9      	movs	r3, #233	; 0xe9
    257a:	005b      	lsls	r3, r3, #1
    257c:	188a      	adds	r2, r1, r2
    257e:	18d3      	adds	r3, r2, r3
    2580:	781b      	ldrb	r3, [r3, #0]
    2582:	001a      	movs	r2, r3
    2584:	0021      	movs	r1, r4
    2586:	4b93      	ldr	r3, [pc, #588]	; (27d4 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x624>)
    2588:	4798      	blx	r3
					state.status[pn-1]=1;
    258a:	683b      	ldr	r3, [r7, #0]
    258c:	1e5a      	subs	r2, r3, #1
    258e:	6879      	ldr	r1, [r7, #4]
    2590:	2383      	movs	r3, #131	; 0x83
    2592:	009b      	lsls	r3, r3, #2
    2594:	188a      	adds	r2, r1, r2
    2596:	18d3      	adds	r3, r2, r3
    2598:	2201      	movs	r2, #1
    259a:	701a      	strb	r2, [r3, #0]
				}
				
				while((!blinkOut)){
    259c:	687a      	ldr	r2, [r7, #4]
    259e:	237c      	movs	r3, #124	; 0x7c
    25a0:	33ff      	adds	r3, #255	; 0xff
    25a2:	5cd3      	ldrb	r3, [r2, r3]
    25a4:	b2db      	uxtb	r3, r3
    25a6:	2201      	movs	r2, #1
    25a8:	4053      	eors	r3, r2
    25aa:	b2db      	uxtb	r3, r3
    25ac:	2b00      	cmp	r3, #0
    25ae:	d000      	beq.n	25b2 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x402>
    25b0:	e7f4      	b.n	259c <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3ec>
					//Dimmen(0);
				}
				PowerOffPin(pn);
    25b2:	683a      	ldr	r2, [r7, #0]
    25b4:	687b      	ldr	r3, [r7, #4]
    25b6:	0011      	movs	r1, r2
    25b8:	0018      	movs	r0, r3
    25ba:	4b87      	ldr	r3, [pc, #540]	; (27d8 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x628>)
    25bc:	4798      	blx	r3
				if (pn<kTOTALLEFTPINS)
    25be:	683b      	ldr	r3, [r7, #0]
    25c0:	2b1c      	cmp	r3, #28
    25c2:	dc3c      	bgt.n	263e <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x48e>
				{
					ClearPin(pins.allPorts[pn+2],pins.allPins[pn+2]);
    25c4:	6878      	ldr	r0, [r7, #4]
    25c6:	683b      	ldr	r3, [r7, #0]
    25c8:	1c9a      	adds	r2, r3, #2
    25ca:	6879      	ldr	r1, [r7, #4]
    25cc:	23cc      	movs	r3, #204	; 0xcc
    25ce:	005b      	lsls	r3, r3, #1
    25d0:	188a      	adds	r2, r1, r2
    25d2:	18d3      	adds	r3, r2, r3
    25d4:	781c      	ldrb	r4, [r3, #0]
    25d6:	683b      	ldr	r3, [r7, #0]
    25d8:	1c9a      	adds	r2, r3, #2
    25da:	6879      	ldr	r1, [r7, #4]
    25dc:	23e9      	movs	r3, #233	; 0xe9
    25de:	005b      	lsls	r3, r3, #1
    25e0:	188a      	adds	r2, r1, r2
    25e2:	18d3      	adds	r3, r2, r3
    25e4:	781b      	ldrb	r3, [r3, #0]
    25e6:	001a      	movs	r2, r3
    25e8:	0021      	movs	r1, r4
    25ea:	4b7c      	ldr	r3, [pc, #496]	; (27dc <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x62c>)
    25ec:	4798      	blx	r3
					state.status[pn+2]=0;
    25ee:	683b      	ldr	r3, [r7, #0]
    25f0:	1c9a      	adds	r2, r3, #2
    25f2:	6879      	ldr	r1, [r7, #4]
    25f4:	2383      	movs	r3, #131	; 0x83
    25f6:	009b      	lsls	r3, r3, #2
    25f8:	188a      	adds	r2, r1, r2
    25fa:	18d3      	adds	r3, r2, r3
    25fc:	2200      	movs	r2, #0
    25fe:	701a      	strb	r2, [r3, #0]
					ClearPin(pins.allPorts[pn+1],pins.allPins[pn+1]);
    2600:	6878      	ldr	r0, [r7, #4]
    2602:	683b      	ldr	r3, [r7, #0]
    2604:	1c5a      	adds	r2, r3, #1
    2606:	6879      	ldr	r1, [r7, #4]
    2608:	23cc      	movs	r3, #204	; 0xcc
    260a:	005b      	lsls	r3, r3, #1
    260c:	188a      	adds	r2, r1, r2
    260e:	18d3      	adds	r3, r2, r3
    2610:	781c      	ldrb	r4, [r3, #0]
    2612:	683b      	ldr	r3, [r7, #0]
    2614:	1c5a      	adds	r2, r3, #1
    2616:	6879      	ldr	r1, [r7, #4]
    2618:	23e9      	movs	r3, #233	; 0xe9
    261a:	005b      	lsls	r3, r3, #1
    261c:	188a      	adds	r2, r1, r2
    261e:	18d3      	adds	r3, r2, r3
    2620:	781b      	ldrb	r3, [r3, #0]
    2622:	001a      	movs	r2, r3
    2624:	0021      	movs	r1, r4
    2626:	4b6d      	ldr	r3, [pc, #436]	; (27dc <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x62c>)
    2628:	4798      	blx	r3
					state.status[pn+1]=0;
    262a:	683b      	ldr	r3, [r7, #0]
    262c:	1c5a      	adds	r2, r3, #1
    262e:	6879      	ldr	r1, [r7, #4]
    2630:	2383      	movs	r3, #131	; 0x83
    2632:	009b      	lsls	r3, r3, #2
    2634:	188a      	adds	r2, r1, r2
    2636:	18d3      	adds	r3, r2, r3
    2638:	2200      	movs	r2, #0
    263a:	701a      	strb	r2, [r3, #0]
    263c:	e05d      	b.n	26fa <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x54a>
				}
				else
				{
					ClearPin(pins.allPorts[pn-2],pins.allPins[pn-2]);
    263e:	6878      	ldr	r0, [r7, #4]
    2640:	683b      	ldr	r3, [r7, #0]
    2642:	1e9a      	subs	r2, r3, #2
    2644:	6879      	ldr	r1, [r7, #4]
    2646:	23cc      	movs	r3, #204	; 0xcc
    2648:	005b      	lsls	r3, r3, #1
    264a:	188a      	adds	r2, r1, r2
    264c:	18d3      	adds	r3, r2, r3
    264e:	781c      	ldrb	r4, [r3, #0]
    2650:	683b      	ldr	r3, [r7, #0]
    2652:	1e9a      	subs	r2, r3, #2
    2654:	6879      	ldr	r1, [r7, #4]
    2656:	23e9      	movs	r3, #233	; 0xe9
    2658:	005b      	lsls	r3, r3, #1
    265a:	188a      	adds	r2, r1, r2
    265c:	18d3      	adds	r3, r2, r3
    265e:	781b      	ldrb	r3, [r3, #0]
    2660:	001a      	movs	r2, r3
    2662:	0021      	movs	r1, r4
    2664:	4b5d      	ldr	r3, [pc, #372]	; (27dc <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x62c>)
    2666:	4798      	blx	r3
					state.status[pn-2]=0;
    2668:	683b      	ldr	r3, [r7, #0]
    266a:	1e9a      	subs	r2, r3, #2
    266c:	6879      	ldr	r1, [r7, #4]
    266e:	2383      	movs	r3, #131	; 0x83
    2670:	009b      	lsls	r3, r3, #2
    2672:	188a      	adds	r2, r1, r2
    2674:	18d3      	adds	r3, r2, r3
    2676:	2200      	movs	r2, #0
    2678:	701a      	strb	r2, [r3, #0]
					ClearPin(pins.allPorts[pn-1],pins.allPins[pn-1]);
    267a:	6878      	ldr	r0, [r7, #4]
    267c:	683b      	ldr	r3, [r7, #0]
    267e:	1e5a      	subs	r2, r3, #1
    2680:	6879      	ldr	r1, [r7, #4]
    2682:	23cc      	movs	r3, #204	; 0xcc
    2684:	005b      	lsls	r3, r3, #1
    2686:	188a      	adds	r2, r1, r2
    2688:	18d3      	adds	r3, r2, r3
    268a:	781c      	ldrb	r4, [r3, #0]
    268c:	683b      	ldr	r3, [r7, #0]
    268e:	1e5a      	subs	r2, r3, #1
    2690:	6879      	ldr	r1, [r7, #4]
    2692:	23e9      	movs	r3, #233	; 0xe9
    2694:	005b      	lsls	r3, r3, #1
    2696:	188a      	adds	r2, r1, r2
    2698:	18d3      	adds	r3, r2, r3
    269a:	781b      	ldrb	r3, [r3, #0]
    269c:	001a      	movs	r2, r3
    269e:	0021      	movs	r1, r4
    26a0:	4b4e      	ldr	r3, [pc, #312]	; (27dc <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x62c>)
    26a2:	4798      	blx	r3
					state.status[pn-1]=0;
    26a4:	683b      	ldr	r3, [r7, #0]
    26a6:	1e5a      	subs	r2, r3, #1
    26a8:	6879      	ldr	r1, [r7, #4]
    26aa:	2383      	movs	r3, #131	; 0x83
    26ac:	009b      	lsls	r3, r3, #2
    26ae:	188a      	adds	r2, r1, r2
    26b0:	18d3      	adds	r3, r2, r3
    26b2:	2200      	movs	r2, #0
    26b4:	701a      	strb	r2, [r3, #0]
    26b6:	e020      	b.n	26fa <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x54a>
				}	
			} 
			else
			{
				StartBlinker(0);
    26b8:	687b      	ldr	r3, [r7, #4]
    26ba:	2100      	movs	r1, #0
    26bc:	0018      	movs	r0, r3
    26be:	4b48      	ldr	r3, [pc, #288]	; (27e0 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x630>)
    26c0:	4798      	blx	r3
				PowerOnPin(pn);
    26c2:	683a      	ldr	r2, [r7, #0]
    26c4:	687b      	ldr	r3, [r7, #4]
    26c6:	0011      	movs	r1, r2
    26c8:	0018      	movs	r0, r3
    26ca:	4b46      	ldr	r3, [pc, #280]	; (27e4 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x634>)
    26cc:	4798      	blx	r3
				while((!blinkOut)){
    26ce:	687a      	ldr	r2, [r7, #4]
    26d0:	237c      	movs	r3, #124	; 0x7c
    26d2:	33ff      	adds	r3, #255	; 0xff
    26d4:	5cd3      	ldrb	r3, [r2, r3]
    26d6:	b2db      	uxtb	r3, r3
    26d8:	2201      	movs	r2, #1
    26da:	4053      	eors	r3, r2
    26dc:	b2db      	uxtb	r3, r3
    26de:	2b00      	cmp	r3, #0
    26e0:	d005      	beq.n	26ee <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x53e>
					Dimmen(0);
    26e2:	687b      	ldr	r3, [r7, #4]
    26e4:	2100      	movs	r1, #0
    26e6:	0018      	movs	r0, r3
    26e8:	4b3f      	ldr	r3, [pc, #252]	; (27e8 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x638>)
    26ea:	4798      	blx	r3
				while((!blinkOut)){
    26ec:	e7ef      	b.n	26ce <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x51e>
				}
				PowerOffPin(pn);
    26ee:	683a      	ldr	r2, [r7, #0]
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	0011      	movs	r1, r2
    26f4:	0018      	movs	r0, r3
    26f6:	4b38      	ldr	r3, [pc, #224]	; (27d8 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x628>)
    26f8:	4798      	blx	r3
		
		}
	}
	

	if (nmi.IsButtonPressed())
    26fa:	4b3c      	ldr	r3, [pc, #240]	; (27ec <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x63c>)
    26fc:	0018      	movs	r0, r3
    26fe:	4b3c      	ldr	r3, [pc, #240]	; (27f0 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x640>)
    2700:	4798      	blx	r3
    2702:	1e03      	subs	r3, r0, #0
    2704:	d009      	beq.n	271a <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x56a>
	{
		request=true;
    2706:	687a      	ldr	r2, [r7, #4]
    2708:	23c2      	movs	r3, #194	; 0xc2
    270a:	005b      	lsls	r3, r3, #1
    270c:	2101      	movs	r1, #1
    270e:	54d1      	strb	r1, [r2, r3]
		nmi.OnPressed();
    2710:	4b36      	ldr	r3, [pc, #216]	; (27ec <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x63c>)
    2712:	0018      	movs	r0, r3
    2714:	4b37      	ldr	r3, [pc, #220]	; (27f4 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x644>)
    2716:	4798      	blx	r3
    2718:	e056      	b.n	27c8 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x618>
		
		}else{
		if (request&&nmi.pressedTimerStarted)
    271a:	687a      	ldr	r2, [r7, #4]
    271c:	23c2      	movs	r3, #194	; 0xc2
    271e:	005b      	lsls	r3, r3, #1
    2720:	5cd3      	ldrb	r3, [r2, r3]
    2722:	2b00      	cmp	r3, #0
    2724:	d006      	beq.n	2734 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x584>
    2726:	4b31      	ldr	r3, [pc, #196]	; (27ec <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x63c>)
    2728:	785b      	ldrb	r3, [r3, #1]
    272a:	b2db      	uxtb	r3, r3
    272c:	2b00      	cmp	r3, #0
    272e:	d001      	beq.n	2734 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x584>
    2730:	2301      	movs	r3, #1
    2732:	e000      	b.n	2736 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x586>
    2734:	2300      	movs	r3, #0
    2736:	2b00      	cmp	r3, #0
    2738:	d046      	beq.n	27c8 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x618>
		{
			nmi.OnRelease();
    273a:	4b2c      	ldr	r3, [pc, #176]	; (27ec <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x63c>)
    273c:	0018      	movs	r0, r3
    273e:	4b2e      	ldr	r3, [pc, #184]	; (27f8 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x648>)
    2740:	4798      	blx	r3
			request=false;
    2742:	687a      	ldr	r2, [r7, #4]
    2744:	23c2      	movs	r3, #194	; 0xc2
    2746:	005b      	lsls	r3, r3, #1
    2748:	2100      	movs	r1, #0
    274a:	54d1      	strb	r1, [r2, r3]
			if (stepTime>tapLimit)
    274c:	687a      	ldr	r2, [r7, #4]
    274e:	23c0      	movs	r3, #192	; 0xc0
    2750:	005b      	lsls	r3, r3, #1
    2752:	58d3      	ldr	r3, [r2, r3]
    2754:	6879      	ldr	r1, [r7, #4]
    2756:	22ca      	movs	r2, #202	; 0xca
    2758:	0052      	lsls	r2, r2, #1
    275a:	588a      	ldr	r2, [r1, r2]
    275c:	429a      	cmp	r2, r3
    275e:	419b      	sbcs	r3, r3
    2760:	425b      	negs	r3, r3
    2762:	b2db      	uxtb	r3, r3
    2764:	2b00      	cmp	r3, #0
    2766:	d008      	beq.n	277a <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x5ca>
			{
				tapTime=tapLimit;
    2768:	687a      	ldr	r2, [r7, #4]
    276a:	23ca      	movs	r3, #202	; 0xca
    276c:	005b      	lsls	r3, r3, #1
    276e:	58d1      	ldr	r1, [r2, r3]
    2770:	687a      	ldr	r2, [r7, #4]
    2772:	23c8      	movs	r3, #200	; 0xc8
    2774:	005b      	lsls	r3, r3, #1
    2776:	50d1      	str	r1, [r2, r3]
    2778:	e007      	b.n	278a <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x5da>
			} 
			else
			{
				tapTime=stepTime;
    277a:	687a      	ldr	r2, [r7, #4]
    277c:	23c0      	movs	r3, #192	; 0xc0
    277e:	005b      	lsls	r3, r3, #1
    2780:	58d1      	ldr	r1, [r2, r3]
    2782:	687a      	ldr	r2, [r7, #4]
    2784:	23c8      	movs	r3, #200	; 0xc8
    2786:	005b      	lsls	r3, r3, #1
    2788:	50d1      	str	r1, [r2, r3]
			}
			if (nmi.pressCounter<(512*COUNTER_TIME/(tapTime+COUNTER_TIME))){
    278a:	4b18      	ldr	r3, [pc, #96]	; (27ec <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x63c>)
    278c:	689c      	ldr	r4, [r3, #8]
    278e:	687a      	ldr	r2, [r7, #4]
    2790:	23c8      	movs	r3, #200	; 0xc8
    2792:	005b      	lsls	r3, r3, #1
    2794:	58d3      	ldr	r3, [r2, r3]
    2796:	1d1a      	adds	r2, r3, #4
    2798:	4b18      	ldr	r3, [pc, #96]	; (27fc <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x64c>)
    279a:	0011      	movs	r1, r2
    279c:	2280      	movs	r2, #128	; 0x80
    279e:	0110      	lsls	r0, r2, #4
    27a0:	4798      	blx	r3
    27a2:	0003      	movs	r3, r0
    27a4:	429c      	cmp	r4, r3
    27a6:	419b      	sbcs	r3, r3
    27a8:	425b      	negs	r3, r3
    27aa:	b2db      	uxtb	r3, r3
    27ac:	2b00      	cmp	r3, #0
    27ae:	d006      	beq.n	27be <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x60e>
				changeModeRequest=true;
    27b0:	687a      	ldr	r2, [r7, #4]
    27b2:	23bc      	movs	r3, #188	; 0xbc
    27b4:	005b      	lsls	r3, r3, #1
    27b6:	2101      	movs	r1, #1
    27b8:	54d1      	strb	r1, [r2, r3]
				return false;
    27ba:	2300      	movs	r3, #0
    27bc:	e005      	b.n	27ca <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x61a>
			}else{
			changeModeRequest=false;
    27be:	687a      	ldr	r2, [r7, #4]
    27c0:	23bc      	movs	r3, #188	; 0xbc
    27c2:	005b      	lsls	r3, r3, #1
    27c4:	2100      	movs	r1, #0
    27c6:	54d1      	strb	r1, [r2, r3]
		}
		else
		{
		}
	}
	return true;
    27c8:	2301      	movs	r3, #1
}
    27ca:	0018      	movs	r0, r3
    27cc:	46bd      	mov	sp, r7
    27ce:	b003      	add	sp, #12
    27d0:	bd90      	pop	{r4, r7, pc}
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	00003559 	.word	0x00003559
    27d8:	00002b51 	.word	0x00002b51
    27dc:	0000359d 	.word	0x0000359d
    27e0:	00002a85 	.word	0x00002a85
    27e4:	00002aed 	.word	0x00002aed
    27e8:	00002c49 	.word	0x00002c49
    27ec:	200007e0 	.word	0x200007e0
    27f0:	000041c9 	.word	0x000041c9
    27f4:	00004259 	.word	0x00004259
    27f8:	000043ed 	.word	0x000043ed
    27fc:	00005175 	.word	0x00005175

00002800 <_ZN16LedHandler_Class11PowerOnFailEi>:

bool	LedHandler_Class::PowerOnFail(int pn){
    2800:	b580      	push	{r7, lr}
    2802:	b082      	sub	sp, #8
    2804:	af00      	add	r7, sp, #0
    2806:	6078      	str	r0, [r7, #4]
    2808:	6039      	str	r1, [r7, #0]
	if (IsRed(pn)){
    280a:	687b      	ldr	r3, [r7, #4]
    280c:	683a      	ldr	r2, [r7, #0]
    280e:	b2d2      	uxtb	r2, r2
    2810:	0011      	movs	r1, r2
    2812:	0018      	movs	r0, r3
    2814:	4b20      	ldr	r3, [pc, #128]	; (2898 <_ZN16LedHandler_Class11PowerOnFailEi+0x98>)
    2816:	4798      	blx	r3
    2818:	1e03      	subs	r3, r0, #0
    281a:	d006      	beq.n	282a <_ZN16LedHandler_Class11PowerOnFailEi+0x2a>
		SimplePowerON(pn);
    281c:	683a      	ldr	r2, [r7, #0]
    281e:	687b      	ldr	r3, [r7, #4]
    2820:	0011      	movs	r1, r2
    2822:	0018      	movs	r0, r3
    2824:	4b1d      	ldr	r3, [pc, #116]	; (289c <_ZN16LedHandler_Class11PowerOnFailEi+0x9c>)
    2826:	4798      	blx	r3
    2828:	e024      	b.n	2874 <_ZN16LedHandler_Class11PowerOnFailEi+0x74>
	}else{
		if (IsRed(pn+1)){
    282a:	687a      	ldr	r2, [r7, #4]
    282c:	683b      	ldr	r3, [r7, #0]
    282e:	b2db      	uxtb	r3, r3
    2830:	3301      	adds	r3, #1
    2832:	b2db      	uxtb	r3, r3
    2834:	0019      	movs	r1, r3
    2836:	0010      	movs	r0, r2
    2838:	4b17      	ldr	r3, [pc, #92]	; (2898 <_ZN16LedHandler_Class11PowerOnFailEi+0x98>)
    283a:	4798      	blx	r3
    283c:	1e03      	subs	r3, r0, #0
    283e:	d007      	beq.n	2850 <_ZN16LedHandler_Class11PowerOnFailEi+0x50>
			SimplePowerON(pn+1);
    2840:	683b      	ldr	r3, [r7, #0]
    2842:	1c5a      	adds	r2, r3, #1
    2844:	687b      	ldr	r3, [r7, #4]
    2846:	0011      	movs	r1, r2
    2848:	0018      	movs	r0, r3
    284a:	4b14      	ldr	r3, [pc, #80]	; (289c <_ZN16LedHandler_Class11PowerOnFailEi+0x9c>)
    284c:	4798      	blx	r3
    284e:	e011      	b.n	2874 <_ZN16LedHandler_Class11PowerOnFailEi+0x74>
		}else{
			if (IsRed(pn+2)){
    2850:	687a      	ldr	r2, [r7, #4]
    2852:	683b      	ldr	r3, [r7, #0]
    2854:	b2db      	uxtb	r3, r3
    2856:	3302      	adds	r3, #2
    2858:	b2db      	uxtb	r3, r3
    285a:	0019      	movs	r1, r3
    285c:	0010      	movs	r0, r2
    285e:	4b0e      	ldr	r3, [pc, #56]	; (2898 <_ZN16LedHandler_Class11PowerOnFailEi+0x98>)
    2860:	4798      	blx	r3
    2862:	1e03      	subs	r3, r0, #0
    2864:	d006      	beq.n	2874 <_ZN16LedHandler_Class11PowerOnFailEi+0x74>
				SimplePowerON(pn+2);
    2866:	683b      	ldr	r3, [r7, #0]
    2868:	1c9a      	adds	r2, r3, #2
    286a:	687b      	ldr	r3, [r7, #4]
    286c:	0011      	movs	r1, r2
    286e:	0018      	movs	r0, r3
    2870:	4b0a      	ldr	r3, [pc, #40]	; (289c <_ZN16LedHandler_Class11PowerOnFailEi+0x9c>)
    2872:	4798      	blx	r3
			}
		}
		
	}
	if (nmi.IsButtonPressed())
    2874:	4b0a      	ldr	r3, [pc, #40]	; (28a0 <_ZN16LedHandler_Class11PowerOnFailEi+0xa0>)
    2876:	0018      	movs	r0, r3
    2878:	4b0a      	ldr	r3, [pc, #40]	; (28a4 <_ZN16LedHandler_Class11PowerOnFailEi+0xa4>)
    287a:	4798      	blx	r3
    287c:	1e03      	subs	r3, r0, #0
    287e:	d006      	beq.n	288e <_ZN16LedHandler_Class11PowerOnFailEi+0x8e>
	{
		changeModeRequest=true;
    2880:	687a      	ldr	r2, [r7, #4]
    2882:	23bc      	movs	r3, #188	; 0xbc
    2884:	005b      	lsls	r3, r3, #1
    2886:	2101      	movs	r1, #1
    2888:	54d1      	strb	r1, [r2, r3]
		return false;
    288a:	2300      	movs	r3, #0
    288c:	e000      	b.n	2890 <_ZN16LedHandler_Class11PowerOnFailEi+0x90>
	}
	return true;
    288e:	2301      	movs	r3, #1
	
}
    2890:	0018      	movs	r0, r3
    2892:	46bd      	mov	sp, r7
    2894:	b002      	add	sp, #8
    2896:	bd80      	pop	{r7, pc}
    2898:	000037f5 	.word	0x000037f5
    289c:	000028a9 	.word	0x000028a9
    28a0:	200007e0 	.word	0x200007e0
    28a4:	000041c9 	.word	0x000041c9

000028a8 <_ZN16LedHandler_Class13SimplePowerONEi>:

void	LedHandler_Class::SimplePowerON(int pn){
    28a8:	b580      	push	{r7, lr}
    28aa:	b082      	sub	sp, #8
    28ac:	af00      	add	r7, sp, #0
    28ae:	6078      	str	r0, [r7, #4]
    28b0:	6039      	str	r1, [r7, #0]
	StartBlinker(0);
    28b2:	687b      	ldr	r3, [r7, #4]
    28b4:	2100      	movs	r1, #0
    28b6:	0018      	movs	r0, r3
    28b8:	4b0e      	ldr	r3, [pc, #56]	; (28f4 <_ZN16LedHandler_Class13SimplePowerONEi+0x4c>)
    28ba:	4798      	blx	r3
	PowerOnPin(pn);
    28bc:	683a      	ldr	r2, [r7, #0]
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	0011      	movs	r1, r2
    28c2:	0018      	movs	r0, r3
    28c4:	4b0c      	ldr	r3, [pc, #48]	; (28f8 <_ZN16LedHandler_Class13SimplePowerONEi+0x50>)
    28c6:	4798      	blx	r3
	while((!blinkOut)){
    28c8:	687a      	ldr	r2, [r7, #4]
    28ca:	237c      	movs	r3, #124	; 0x7c
    28cc:	33ff      	adds	r3, #255	; 0xff
    28ce:	5cd3      	ldrb	r3, [r2, r3]
    28d0:	b2db      	uxtb	r3, r3
    28d2:	2201      	movs	r2, #1
    28d4:	4053      	eors	r3, r2
    28d6:	b2db      	uxtb	r3, r3
    28d8:	2b00      	cmp	r3, #0
    28da:	d000      	beq.n	28de <_ZN16LedHandler_Class13SimplePowerONEi+0x36>
    28dc:	e7f4      	b.n	28c8 <_ZN16LedHandler_Class13SimplePowerONEi+0x20>
		//Dimmen(0);
	}
	PowerOffPin(pn);
    28de:	683a      	ldr	r2, [r7, #0]
    28e0:	687b      	ldr	r3, [r7, #4]
    28e2:	0011      	movs	r1, r2
    28e4:	0018      	movs	r0, r3
    28e6:	4b05      	ldr	r3, [pc, #20]	; (28fc <_ZN16LedHandler_Class13SimplePowerONEi+0x54>)
    28e8:	4798      	blx	r3
}
    28ea:	46c0      	nop			; (mov r8, r8)
    28ec:	46bd      	mov	sp, r7
    28ee:	b002      	add	sp, #8
    28f0:	bd80      	pop	{r7, pc}
    28f2:	46c0      	nop			; (mov r8, r8)
    28f4:	00002a85 	.word	0x00002a85
    28f8:	00002aed 	.word	0x00002aed
    28fc:	00002b51 	.word	0x00002b51

00002900 <_ZN16LedHandler_Class11PowerOnLilaEi>:



bool	LedHandler_Class::PowerOnLila(int pn){
    2900:	b590      	push	{r4, r7, lr}
    2902:	b083      	sub	sp, #12
    2904:	af00      	add	r7, sp, #0
    2906:	6078      	str	r0, [r7, #4]
    2908:	6039      	str	r1, [r7, #0]

	StartBlinker(0);
    290a:	687b      	ldr	r3, [r7, #4]
    290c:	2100      	movs	r1, #0
    290e:	0018      	movs	r0, r3
    2910:	4b55      	ldr	r3, [pc, #340]	; (2a68 <_ZN16LedHandler_Class11PowerOnLilaEi+0x168>)
    2912:	4798      	blx	r3
	PowerOnPin(pn);
    2914:	683a      	ldr	r2, [r7, #0]
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	0011      	movs	r1, r2
    291a:	0018      	movs	r0, r3
    291c:	4b53      	ldr	r3, [pc, #332]	; (2a6c <_ZN16LedHandler_Class11PowerOnLilaEi+0x16c>)
    291e:	4798      	blx	r3
	if (pn<kTOTALLEFTPINS)
    2920:	683b      	ldr	r3, [r7, #0]
    2922:	2b1c      	cmp	r3, #28
    2924:	dc1e      	bgt.n	2964 <_ZN16LedHandler_Class11PowerOnLilaEi+0x64>
	{
		SetPin(pins.allPorts[pn+2],pins.allPins[pn+2]);
    2926:	6878      	ldr	r0, [r7, #4]
    2928:	683b      	ldr	r3, [r7, #0]
    292a:	1c9a      	adds	r2, r3, #2
    292c:	6879      	ldr	r1, [r7, #4]
    292e:	23cc      	movs	r3, #204	; 0xcc
    2930:	005b      	lsls	r3, r3, #1
    2932:	188a      	adds	r2, r1, r2
    2934:	18d3      	adds	r3, r2, r3
    2936:	781c      	ldrb	r4, [r3, #0]
    2938:	683b      	ldr	r3, [r7, #0]
    293a:	1c9a      	adds	r2, r3, #2
    293c:	6879      	ldr	r1, [r7, #4]
    293e:	23e9      	movs	r3, #233	; 0xe9
    2940:	005b      	lsls	r3, r3, #1
    2942:	188a      	adds	r2, r1, r2
    2944:	18d3      	adds	r3, r2, r3
    2946:	781b      	ldrb	r3, [r3, #0]
    2948:	001a      	movs	r2, r3
    294a:	0021      	movs	r1, r4
    294c:	4b48      	ldr	r3, [pc, #288]	; (2a70 <_ZN16LedHandler_Class11PowerOnLilaEi+0x170>)
    294e:	4798      	blx	r3
		state.status[pn+2]=1;
    2950:	683b      	ldr	r3, [r7, #0]
    2952:	1c9a      	adds	r2, r3, #2
    2954:	6879      	ldr	r1, [r7, #4]
    2956:	2383      	movs	r3, #131	; 0x83
    2958:	009b      	lsls	r3, r3, #2
    295a:	188a      	adds	r2, r1, r2
    295c:	18d3      	adds	r3, r2, r3
    295e:	2201      	movs	r2, #1
    2960:	701a      	strb	r2, [r3, #0]
    2962:	e01d      	b.n	29a0 <_ZN16LedHandler_Class11PowerOnLilaEi+0xa0>
	}
	else
	{
		SetPin(pins.allPorts[pn-2],pins.allPins[pn-2]);
    2964:	6878      	ldr	r0, [r7, #4]
    2966:	683b      	ldr	r3, [r7, #0]
    2968:	1e9a      	subs	r2, r3, #2
    296a:	6879      	ldr	r1, [r7, #4]
    296c:	23cc      	movs	r3, #204	; 0xcc
    296e:	005b      	lsls	r3, r3, #1
    2970:	188a      	adds	r2, r1, r2
    2972:	18d3      	adds	r3, r2, r3
    2974:	781c      	ldrb	r4, [r3, #0]
    2976:	683b      	ldr	r3, [r7, #0]
    2978:	1e9a      	subs	r2, r3, #2
    297a:	6879      	ldr	r1, [r7, #4]
    297c:	23e9      	movs	r3, #233	; 0xe9
    297e:	005b      	lsls	r3, r3, #1
    2980:	188a      	adds	r2, r1, r2
    2982:	18d3      	adds	r3, r2, r3
    2984:	781b      	ldrb	r3, [r3, #0]
    2986:	001a      	movs	r2, r3
    2988:	0021      	movs	r1, r4
    298a:	4b39      	ldr	r3, [pc, #228]	; (2a70 <_ZN16LedHandler_Class11PowerOnLilaEi+0x170>)
    298c:	4798      	blx	r3
		state.status[pn-2]=1;
    298e:	683b      	ldr	r3, [r7, #0]
    2990:	1e9a      	subs	r2, r3, #2
    2992:	6879      	ldr	r1, [r7, #4]
    2994:	2383      	movs	r3, #131	; 0x83
    2996:	009b      	lsls	r3, r3, #2
    2998:	188a      	adds	r2, r1, r2
    299a:	18d3      	adds	r3, r2, r3
    299c:	2201      	movs	r2, #1
    299e:	701a      	strb	r2, [r3, #0]
	}
		
	while((!blinkOut)){
    29a0:	687a      	ldr	r2, [r7, #4]
    29a2:	237c      	movs	r3, #124	; 0x7c
    29a4:	33ff      	adds	r3, #255	; 0xff
    29a6:	5cd3      	ldrb	r3, [r2, r3]
    29a8:	b2db      	uxtb	r3, r3
    29aa:	2201      	movs	r2, #1
    29ac:	4053      	eors	r3, r2
    29ae:	b2db      	uxtb	r3, r3
    29b0:	2b00      	cmp	r3, #0
    29b2:	d000      	beq.n	29b6 <_ZN16LedHandler_Class11PowerOnLilaEi+0xb6>
    29b4:	e7f4      	b.n	29a0 <_ZN16LedHandler_Class11PowerOnLilaEi+0xa0>
		//Dimmen(0);
	}
	PowerOffPin(pn);
    29b6:	683a      	ldr	r2, [r7, #0]
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	0011      	movs	r1, r2
    29bc:	0018      	movs	r0, r3
    29be:	4b2d      	ldr	r3, [pc, #180]	; (2a74 <_ZN16LedHandler_Class11PowerOnLilaEi+0x174>)
    29c0:	4798      	blx	r3
	if (pn<kTOTALLEFTPINS)
    29c2:	683b      	ldr	r3, [r7, #0]
    29c4:	2b1c      	cmp	r3, #28
    29c6:	dc1e      	bgt.n	2a06 <_ZN16LedHandler_Class11PowerOnLilaEi+0x106>
	{
		ClearPin(pins.allPorts[pn+2],pins.allPins[pn+2]);
    29c8:	6878      	ldr	r0, [r7, #4]
    29ca:	683b      	ldr	r3, [r7, #0]
    29cc:	1c9a      	adds	r2, r3, #2
    29ce:	6879      	ldr	r1, [r7, #4]
    29d0:	23cc      	movs	r3, #204	; 0xcc
    29d2:	005b      	lsls	r3, r3, #1
    29d4:	188a      	adds	r2, r1, r2
    29d6:	18d3      	adds	r3, r2, r3
    29d8:	781c      	ldrb	r4, [r3, #0]
    29da:	683b      	ldr	r3, [r7, #0]
    29dc:	1c9a      	adds	r2, r3, #2
    29de:	6879      	ldr	r1, [r7, #4]
    29e0:	23e9      	movs	r3, #233	; 0xe9
    29e2:	005b      	lsls	r3, r3, #1
    29e4:	188a      	adds	r2, r1, r2
    29e6:	18d3      	adds	r3, r2, r3
    29e8:	781b      	ldrb	r3, [r3, #0]
    29ea:	001a      	movs	r2, r3
    29ec:	0021      	movs	r1, r4
    29ee:	4b22      	ldr	r3, [pc, #136]	; (2a78 <_ZN16LedHandler_Class11PowerOnLilaEi+0x178>)
    29f0:	4798      	blx	r3
		state.status[pn+2]=0;
    29f2:	683b      	ldr	r3, [r7, #0]
    29f4:	1c9a      	adds	r2, r3, #2
    29f6:	6879      	ldr	r1, [r7, #4]
    29f8:	2383      	movs	r3, #131	; 0x83
    29fa:	009b      	lsls	r3, r3, #2
    29fc:	188a      	adds	r2, r1, r2
    29fe:	18d3      	adds	r3, r2, r3
    2a00:	2200      	movs	r2, #0
    2a02:	701a      	strb	r2, [r3, #0]
    2a04:	e01d      	b.n	2a42 <_ZN16LedHandler_Class11PowerOnLilaEi+0x142>
	}
	else
	{
		ClearPin(pins.allPorts[pn-2],pins.allPins[pn-2]);
    2a06:	6878      	ldr	r0, [r7, #4]
    2a08:	683b      	ldr	r3, [r7, #0]
    2a0a:	1e9a      	subs	r2, r3, #2
    2a0c:	6879      	ldr	r1, [r7, #4]
    2a0e:	23cc      	movs	r3, #204	; 0xcc
    2a10:	005b      	lsls	r3, r3, #1
    2a12:	188a      	adds	r2, r1, r2
    2a14:	18d3      	adds	r3, r2, r3
    2a16:	781c      	ldrb	r4, [r3, #0]
    2a18:	683b      	ldr	r3, [r7, #0]
    2a1a:	1e9a      	subs	r2, r3, #2
    2a1c:	6879      	ldr	r1, [r7, #4]
    2a1e:	23e9      	movs	r3, #233	; 0xe9
    2a20:	005b      	lsls	r3, r3, #1
    2a22:	188a      	adds	r2, r1, r2
    2a24:	18d3      	adds	r3, r2, r3
    2a26:	781b      	ldrb	r3, [r3, #0]
    2a28:	001a      	movs	r2, r3
    2a2a:	0021      	movs	r1, r4
    2a2c:	4b12      	ldr	r3, [pc, #72]	; (2a78 <_ZN16LedHandler_Class11PowerOnLilaEi+0x178>)
    2a2e:	4798      	blx	r3
		state.status[pn-2]=0;
    2a30:	683b      	ldr	r3, [r7, #0]
    2a32:	1e9a      	subs	r2, r3, #2
    2a34:	6879      	ldr	r1, [r7, #4]
    2a36:	2383      	movs	r3, #131	; 0x83
    2a38:	009b      	lsls	r3, r3, #2
    2a3a:	188a      	adds	r2, r1, r2
    2a3c:	18d3      	adds	r3, r2, r3
    2a3e:	2200      	movs	r2, #0
    2a40:	701a      	strb	r2, [r3, #0]
	}
		
	if (nmi.IsButtonPressed())
    2a42:	4b0e      	ldr	r3, [pc, #56]	; (2a7c <_ZN16LedHandler_Class11PowerOnLilaEi+0x17c>)
    2a44:	0018      	movs	r0, r3
    2a46:	4b0e      	ldr	r3, [pc, #56]	; (2a80 <_ZN16LedHandler_Class11PowerOnLilaEi+0x180>)
    2a48:	4798      	blx	r3
    2a4a:	1e03      	subs	r3, r0, #0
    2a4c:	d006      	beq.n	2a5c <_ZN16LedHandler_Class11PowerOnLilaEi+0x15c>
	{
		changeModeRequest=true;
    2a4e:	687a      	ldr	r2, [r7, #4]
    2a50:	23bc      	movs	r3, #188	; 0xbc
    2a52:	005b      	lsls	r3, r3, #1
    2a54:	2101      	movs	r1, #1
    2a56:	54d1      	strb	r1, [r2, r3]
		return false;
    2a58:	2300      	movs	r3, #0
    2a5a:	e000      	b.n	2a5e <_ZN16LedHandler_Class11PowerOnLilaEi+0x15e>
	}
	return true;
    2a5c:	2301      	movs	r3, #1
}
    2a5e:	0018      	movs	r0, r3
    2a60:	46bd      	mov	sp, r7
    2a62:	b003      	add	sp, #12
    2a64:	bd90      	pop	{r4, r7, pc}
    2a66:	46c0      	nop			; (mov r8, r8)
    2a68:	00002a85 	.word	0x00002a85
    2a6c:	00002aed 	.word	0x00002aed
    2a70:	00003559 	.word	0x00003559
    2a74:	00002b51 	.word	0x00002b51
    2a78:	0000359d 	.word	0x0000359d
    2a7c:	200007e0 	.word	0x200007e0
    2a80:	000041c9 	.word	0x000041c9

00002a84 <_ZN16LedHandler_Class12StartBlinkerEh>:
void	LedHandler_Class::StartBlinker(uint8_t lapsus){
    2a84:	b580      	push	{r7, lr}
    2a86:	b082      	sub	sp, #8
    2a88:	af00      	add	r7, sp, #0
    2a8a:	6078      	str	r0, [r7, #4]
    2a8c:	000a      	movs	r2, r1
    2a8e:	1cfb      	adds	r3, r7, #3
    2a90:	701a      	strb	r2, [r3, #0]
		ledTimer.stop();
    2a92:	4b12      	ldr	r3, [pc, #72]	; (2adc <_ZN16LedHandler_Class12StartBlinkerEh+0x58>)
    2a94:	0018      	movs	r0, r3
    2a96:	4b12      	ldr	r3, [pc, #72]	; (2ae0 <_ZN16LedHandler_Class12StartBlinkerEh+0x5c>)
    2a98:	4798      	blx	r3
		if (lapsus>0)
    2a9a:	1cfb      	adds	r3, r7, #3
    2a9c:	781b      	ldrb	r3, [r3, #0]
    2a9e:	2b00      	cmp	r3, #0
    2aa0:	dd0a      	ble.n	2ab8 <_ZN16LedHandler_Class12StartBlinkerEh+0x34>
		{
			ledTimer.Start_oneShot_task((FUNC_PTR)BlinkTimer,2*stepTime);
    2aa2:	687a      	ldr	r2, [r7, #4]
    2aa4:	23c0      	movs	r3, #192	; 0xc0
    2aa6:	005b      	lsls	r3, r3, #1
    2aa8:	58d3      	ldr	r3, [r2, r3]
    2aaa:	005a      	lsls	r2, r3, #1
    2aac:	490d      	ldr	r1, [pc, #52]	; (2ae4 <_ZN16LedHandler_Class12StartBlinkerEh+0x60>)
    2aae:	4b0b      	ldr	r3, [pc, #44]	; (2adc <_ZN16LedHandler_Class12StartBlinkerEh+0x58>)
    2ab0:	0018      	movs	r0, r3
    2ab2:	4b0d      	ldr	r3, [pc, #52]	; (2ae8 <_ZN16LedHandler_Class12StartBlinkerEh+0x64>)
    2ab4:	4798      	blx	r3
    2ab6:	e008      	b.n	2aca <_ZN16LedHandler_Class12StartBlinkerEh+0x46>
		} 
		else
		{
			ledTimer.Start_oneShot_task((FUNC_PTR)BlinkTimer,stepTime);
    2ab8:	687a      	ldr	r2, [r7, #4]
    2aba:	23c0      	movs	r3, #192	; 0xc0
    2abc:	005b      	lsls	r3, r3, #1
    2abe:	58d2      	ldr	r2, [r2, r3]
    2ac0:	4908      	ldr	r1, [pc, #32]	; (2ae4 <_ZN16LedHandler_Class12StartBlinkerEh+0x60>)
    2ac2:	4b06      	ldr	r3, [pc, #24]	; (2adc <_ZN16LedHandler_Class12StartBlinkerEh+0x58>)
    2ac4:	0018      	movs	r0, r3
    2ac6:	4b08      	ldr	r3, [pc, #32]	; (2ae8 <_ZN16LedHandler_Class12StartBlinkerEh+0x64>)
    2ac8:	4798      	blx	r3
		}
		

		blinkOut=false;
    2aca:	687a      	ldr	r2, [r7, #4]
    2acc:	237c      	movs	r3, #124	; 0x7c
    2ace:	33ff      	adds	r3, #255	; 0xff
    2ad0:	2100      	movs	r1, #0
    2ad2:	54d1      	strb	r1, [r2, r3]
}
    2ad4:	46c0      	nop			; (mov r8, r8)
    2ad6:	46bd      	mov	sp, r7
    2ad8:	b002      	add	sp, #8
    2ada:	bd80      	pop	{r7, pc}
    2adc:	20000820 	.word	0x20000820
    2ae0:	00004561 	.word	0x00004561
    2ae4:	00001b25 	.word	0x00001b25
    2ae8:	0000461d 	.word	0x0000461d

00002aec <_ZN16LedHandler_Class10PowerOnPinEi>:
	
void	LedHandler_Class::PowerOnPin(int	pn){
    2aec:	b590      	push	{r4, r7, lr}
    2aee:	b083      	sub	sp, #12
    2af0:	af00      	add	r7, sp, #0
    2af2:	6078      	str	r0, [r7, #4]
    2af4:	6039      	str	r1, [r7, #0]
		SetPowerOnTimer();
    2af6:	687b      	ldr	r3, [r7, #4]
    2af8:	0018      	movs	r0, r3
    2afa:	4b13      	ldr	r3, [pc, #76]	; (2b48 <_ZN16LedHandler_Class10PowerOnPinEi+0x5c>)
    2afc:	4798      	blx	r3
		SetPin(pins.allPorts[pn],pins.allPins[pn]);
    2afe:	6878      	ldr	r0, [r7, #4]
    2b00:	6879      	ldr	r1, [r7, #4]
    2b02:	23cc      	movs	r3, #204	; 0xcc
    2b04:	005b      	lsls	r3, r3, #1
    2b06:	683a      	ldr	r2, [r7, #0]
    2b08:	188a      	adds	r2, r1, r2
    2b0a:	18d3      	adds	r3, r2, r3
    2b0c:	781c      	ldrb	r4, [r3, #0]
    2b0e:	6879      	ldr	r1, [r7, #4]
    2b10:	23e9      	movs	r3, #233	; 0xe9
    2b12:	005b      	lsls	r3, r3, #1
    2b14:	683a      	ldr	r2, [r7, #0]
    2b16:	188a      	adds	r2, r1, r2
    2b18:	18d3      	adds	r3, r2, r3
    2b1a:	781b      	ldrb	r3, [r3, #0]
    2b1c:	001a      	movs	r2, r3
    2b1e:	0021      	movs	r1, r4
    2b20:	4b0a      	ldr	r3, [pc, #40]	; (2b4c <_ZN16LedHandler_Class10PowerOnPinEi+0x60>)
    2b22:	4798      	blx	r3
		state.status[pn]=1;
    2b24:	6879      	ldr	r1, [r7, #4]
    2b26:	2383      	movs	r3, #131	; 0x83
    2b28:	009b      	lsls	r3, r3, #2
    2b2a:	683a      	ldr	r2, [r7, #0]
    2b2c:	188a      	adds	r2, r1, r2
    2b2e:	18d3      	adds	r3, r2, r3
    2b30:	2201      	movs	r2, #1
    2b32:	701a      	strb	r2, [r3, #0]
		poweron=true;
    2b34:	687a      	ldr	r2, [r7, #4]
    2b36:	23bb      	movs	r3, #187	; 0xbb
    2b38:	005b      	lsls	r3, r3, #1
    2b3a:	2101      	movs	r1, #1
    2b3c:	54d1      	strb	r1, [r2, r3]
	}
    2b3e:	46c0      	nop			; (mov r8, r8)
    2b40:	46bd      	mov	sp, r7
    2b42:	b003      	add	sp, #12
    2b44:	bd90      	pop	{r4, r7, pc}
    2b46:	46c0      	nop			; (mov r8, r8)
    2b48:	00002cd5 	.word	0x00002cd5
    2b4c:	00003559 	.word	0x00003559

00002b50 <_ZN16LedHandler_Class11PowerOffPinEi>:
void	LedHandler_Class::PowerOffPin(int	pn){
    2b50:	b590      	push	{r4, r7, lr}
    2b52:	b083      	sub	sp, #12
    2b54:	af00      	add	r7, sp, #0
    2b56:	6078      	str	r0, [r7, #4]
    2b58:	6039      	str	r1, [r7, #0]
	ClearPin(pins.allPorts[pn],pins.allPins[pn]);
    2b5a:	6878      	ldr	r0, [r7, #4]
    2b5c:	6879      	ldr	r1, [r7, #4]
    2b5e:	23cc      	movs	r3, #204	; 0xcc
    2b60:	005b      	lsls	r3, r3, #1
    2b62:	683a      	ldr	r2, [r7, #0]
    2b64:	188a      	adds	r2, r1, r2
    2b66:	18d3      	adds	r3, r2, r3
    2b68:	781c      	ldrb	r4, [r3, #0]
    2b6a:	6879      	ldr	r1, [r7, #4]
    2b6c:	23e9      	movs	r3, #233	; 0xe9
    2b6e:	005b      	lsls	r3, r3, #1
    2b70:	683a      	ldr	r2, [r7, #0]
    2b72:	188a      	adds	r2, r1, r2
    2b74:	18d3      	adds	r3, r2, r3
    2b76:	781b      	ldrb	r3, [r3, #0]
    2b78:	001a      	movs	r2, r3
    2b7a:	0021      	movs	r1, r4
    2b7c:	4b0b      	ldr	r3, [pc, #44]	; (2bac <_ZN16LedHandler_Class11PowerOffPinEi+0x5c>)
    2b7e:	4798      	blx	r3
	pwm_disable(&PWM_0);
    2b80:	4b0b      	ldr	r3, [pc, #44]	; (2bb0 <_ZN16LedHandler_Class11PowerOffPinEi+0x60>)
    2b82:	0018      	movs	r0, r3
    2b84:	4b0b      	ldr	r3, [pc, #44]	; (2bb4 <_ZN16LedHandler_Class11PowerOffPinEi+0x64>)
    2b86:	4798      	blx	r3
	state.status[pn]=0;
    2b88:	6879      	ldr	r1, [r7, #4]
    2b8a:	2383      	movs	r3, #131	; 0x83
    2b8c:	009b      	lsls	r3, r3, #2
    2b8e:	683a      	ldr	r2, [r7, #0]
    2b90:	188a      	adds	r2, r1, r2
    2b92:	18d3      	adds	r3, r2, r3
    2b94:	2200      	movs	r2, #0
    2b96:	701a      	strb	r2, [r3, #0]
	poweron=false;
    2b98:	687a      	ldr	r2, [r7, #4]
    2b9a:	23bb      	movs	r3, #187	; 0xbb
    2b9c:	005b      	lsls	r3, r3, #1
    2b9e:	2100      	movs	r1, #0
    2ba0:	54d1      	strb	r1, [r2, r3]
}
    2ba2:	46c0      	nop			; (mov r8, r8)
    2ba4:	46bd      	mov	sp, r7
    2ba6:	b003      	add	sp, #12
    2ba8:	bd90      	pop	{r4, r7, pc}
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	0000359d 	.word	0x0000359d
    2bb0:	20000960 	.word	0x20000960
    2bb4:	00000925 	.word	0x00000925

00002bb8 <_ZN16LedHandler_Class8ClearAllEv>:

void	LedHandler_Class::ClearAll(void){
    2bb8:	b590      	push	{r4, r7, lr}
    2bba:	b083      	sub	sp, #12
    2bbc:	af00      	add	r7, sp, #0
    2bbe:	6078      	str	r0, [r7, #4]
	for (i = 0; i < totalPins; i++)
    2bc0:	687a      	ldr	r2, [r7, #4]
    2bc2:	23a1      	movs	r3, #161	; 0xa1
    2bc4:	009b      	lsls	r3, r3, #2
    2bc6:	2100      	movs	r1, #0
    2bc8:	50d1      	str	r1, [r2, r3]
    2bca:	687a      	ldr	r2, [r7, #4]
    2bcc:	23a1      	movs	r3, #161	; 0xa1
    2bce:	009b      	lsls	r3, r3, #2
    2bd0:	58d3      	ldr	r3, [r2, r3]
    2bd2:	6879      	ldr	r1, [r7, #4]
    2bd4:	22a0      	movs	r2, #160	; 0xa0
    2bd6:	0092      	lsls	r2, r2, #2
    2bd8:	5c8a      	ldrb	r2, [r1, r2]
    2bda:	4293      	cmp	r3, r2
    2bdc:	da2d      	bge.n	2c3a <_ZN16LedHandler_Class8ClearAllEv+0x82>
	{
		ClearPin(pins.allPorts[i],pins.allPins[i]);
    2bde:	6878      	ldr	r0, [r7, #4]
    2be0:	687a      	ldr	r2, [r7, #4]
    2be2:	23a1      	movs	r3, #161	; 0xa1
    2be4:	009b      	lsls	r3, r3, #2
    2be6:	58d2      	ldr	r2, [r2, r3]
    2be8:	6879      	ldr	r1, [r7, #4]
    2bea:	23cc      	movs	r3, #204	; 0xcc
    2bec:	005b      	lsls	r3, r3, #1
    2bee:	188a      	adds	r2, r1, r2
    2bf0:	18d3      	adds	r3, r2, r3
    2bf2:	781c      	ldrb	r4, [r3, #0]
    2bf4:	687a      	ldr	r2, [r7, #4]
    2bf6:	23a1      	movs	r3, #161	; 0xa1
    2bf8:	009b      	lsls	r3, r3, #2
    2bfa:	58d2      	ldr	r2, [r2, r3]
    2bfc:	6879      	ldr	r1, [r7, #4]
    2bfe:	23e9      	movs	r3, #233	; 0xe9
    2c00:	005b      	lsls	r3, r3, #1
    2c02:	188a      	adds	r2, r1, r2
    2c04:	18d3      	adds	r3, r2, r3
    2c06:	781b      	ldrb	r3, [r3, #0]
    2c08:	001a      	movs	r2, r3
    2c0a:	0021      	movs	r1, r4
    2c0c:	4b0d      	ldr	r3, [pc, #52]	; (2c44 <_ZN16LedHandler_Class8ClearAllEv+0x8c>)
    2c0e:	4798      	blx	r3
		state.status[i]=0;
    2c10:	687a      	ldr	r2, [r7, #4]
    2c12:	23a1      	movs	r3, #161	; 0xa1
    2c14:	009b      	lsls	r3, r3, #2
    2c16:	58d2      	ldr	r2, [r2, r3]
    2c18:	6879      	ldr	r1, [r7, #4]
    2c1a:	2383      	movs	r3, #131	; 0x83
    2c1c:	009b      	lsls	r3, r3, #2
    2c1e:	188a      	adds	r2, r1, r2
    2c20:	18d3      	adds	r3, r2, r3
    2c22:	2200      	movs	r2, #0
    2c24:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < totalPins; i++)
    2c26:	687a      	ldr	r2, [r7, #4]
    2c28:	23a1      	movs	r3, #161	; 0xa1
    2c2a:	009b      	lsls	r3, r3, #2
    2c2c:	58d3      	ldr	r3, [r2, r3]
    2c2e:	1c59      	adds	r1, r3, #1
    2c30:	687a      	ldr	r2, [r7, #4]
    2c32:	23a1      	movs	r3, #161	; 0xa1
    2c34:	009b      	lsls	r3, r3, #2
    2c36:	50d1      	str	r1, [r2, r3]
    2c38:	e7c7      	b.n	2bca <_ZN16LedHandler_Class8ClearAllEv+0x12>
	}
}
    2c3a:	46c0      	nop			; (mov r8, r8)
    2c3c:	46bd      	mov	sp, r7
    2c3e:	b003      	add	sp, #12
    2c40:	bd90      	pop	{r4, r7, pc}
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	0000359d 	.word	0x0000359d

00002c48 <_ZN16LedHandler_Class6DimmenEi>:
		}
		
	}
}

void	LedHandler_Class::Dimmen(int	modulate){
    2c48:	b580      	push	{r7, lr}
    2c4a:	b082      	sub	sp, #8
    2c4c:	af00      	add	r7, sp, #0
    2c4e:	6078      	str	r0, [r7, #4]
    2c50:	6039      	str	r1, [r7, #0]
	if (stepTime>3*POWERON_SINGLE_TIME_MAX/4)
    2c52:	687a      	ldr	r2, [r7, #4]
    2c54:	23c0      	movs	r3, #192	; 0xc0
    2c56:	005b      	lsls	r3, r3, #1
    2c58:	58d3      	ldr	r3, [r2, r3]
    2c5a:	4a1b      	ldr	r2, [pc, #108]	; (2cc8 <_ZN16LedHandler_Class6DimmenEi+0x80>)
    2c5c:	429a      	cmp	r2, r3
    2c5e:	419b      	sbcs	r3, r3
    2c60:	425b      	negs	r3, r3
    2c62:	b2db      	uxtb	r3, r3
    2c64:	2b00      	cmp	r3, #0
    2c66:	d02a      	beq.n	2cbe <_ZN16LedHandler_Class6DimmenEi+0x76>
	{
		if (modulate>0)
		{
			//	pwm_set_parameters(&PWM_0, period, dutyCycle);
		}
		if (deadTime)
    2c68:	687a      	ldr	r2, [r7, #4]
    2c6a:	2378      	movs	r3, #120	; 0x78
    2c6c:	33ff      	adds	r3, #255	; 0xff
    2c6e:	5cd3      	ldrb	r3, [r2, r3]
    2c70:	b2db      	uxtb	r3, r3
    2c72:	2b00      	cmp	r3, #0
    2c74:	d010      	beq.n	2c98 <_ZN16LedHandler_Class6DimmenEi+0x50>
		{
			if (poweron)
    2c76:	687a      	ldr	r2, [r7, #4]
    2c78:	23bb      	movs	r3, #187	; 0xbb
    2c7a:	005b      	lsls	r3, r3, #1
    2c7c:	5cd3      	ldrb	r3, [r2, r3]
    2c7e:	b2db      	uxtb	r3, r3
    2c80:	2b00      	cmp	r3, #0
    2c82:	d01c      	beq.n	2cbe <_ZN16LedHandler_Class6DimmenEi+0x76>
			{
				LightOffActivePins();
    2c84:	687b      	ldr	r3, [r7, #4]
    2c86:	0018      	movs	r0, r3
    2c88:	4b10      	ldr	r3, [pc, #64]	; (2ccc <_ZN16LedHandler_Class6DimmenEi+0x84>)
    2c8a:	4798      	blx	r3
				poweron=false;
    2c8c:	687a      	ldr	r2, [r7, #4]
    2c8e:	23bb      	movs	r3, #187	; 0xbb
    2c90:	005b      	lsls	r3, r3, #1
    2c92:	2100      	movs	r1, #0
    2c94:	54d1      	strb	r1, [r2, r3]
			
		}
	}
	
	
}
    2c96:	e012      	b.n	2cbe <_ZN16LedHandler_Class6DimmenEi+0x76>
			if (!poweron)
    2c98:	687a      	ldr	r2, [r7, #4]
    2c9a:	23bb      	movs	r3, #187	; 0xbb
    2c9c:	005b      	lsls	r3, r3, #1
    2c9e:	5cd3      	ldrb	r3, [r2, r3]
    2ca0:	b2db      	uxtb	r3, r3
    2ca2:	2201      	movs	r2, #1
    2ca4:	4053      	eors	r3, r2
    2ca6:	b2db      	uxtb	r3, r3
    2ca8:	2b00      	cmp	r3, #0
    2caa:	d008      	beq.n	2cbe <_ZN16LedHandler_Class6DimmenEi+0x76>
				LightOnActivePins();
    2cac:	687b      	ldr	r3, [r7, #4]
    2cae:	0018      	movs	r0, r3
    2cb0:	4b07      	ldr	r3, [pc, #28]	; (2cd0 <_ZN16LedHandler_Class6DimmenEi+0x88>)
    2cb2:	4798      	blx	r3
				poweron=true;
    2cb4:	687a      	ldr	r2, [r7, #4]
    2cb6:	23bb      	movs	r3, #187	; 0xbb
    2cb8:	005b      	lsls	r3, r3, #1
    2cba:	2101      	movs	r1, #1
    2cbc:	54d1      	strb	r1, [r2, r3]
}
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	46bd      	mov	sp, r7
    2cc2:	b002      	add	sp, #8
    2cc4:	bd80      	pop	{r7, pc}
    2cc6:	46c0      	nop			; (mov r8, r8)
    2cc8:	00000bb8 	.word	0x00000bb8
    2ccc:	00002d95 	.word	0x00002d95
    2cd0:	00002d05 	.word	0x00002d05

00002cd4 <_ZN16LedHandler_Class15SetPowerOnTimerEv>:
void	LedHandler_Class::SetPowerOnTimer(void){
    2cd4:	b580      	push	{r7, lr}
    2cd6:	b082      	sub	sp, #8
    2cd8:	af00      	add	r7, sp, #0
    2cda:	6078      	str	r0, [r7, #4]
		pwmTimer.stop();
    2cdc:	4b05      	ldr	r3, [pc, #20]	; (2cf4 <_ZN16LedHandler_Class15SetPowerOnTimerEv+0x20>)
    2cde:	0018      	movs	r0, r3
    2ce0:	4b05      	ldr	r3, [pc, #20]	; (2cf8 <_ZN16LedHandler_Class15SetPowerOnTimerEv+0x24>)
    2ce2:	4798      	blx	r3
		pwm_enable(&PWM_0);
    2ce4:	4b05      	ldr	r3, [pc, #20]	; (2cfc <_ZN16LedHandler_Class15SetPowerOnTimerEv+0x28>)
    2ce6:	0018      	movs	r0, r3
    2ce8:	4b05      	ldr	r3, [pc, #20]	; (2d00 <_ZN16LedHandler_Class15SetPowerOnTimerEv+0x2c>)
    2cea:	4798      	blx	r3
		//pwmTimer.Start_oneShot_task((FUNC_PTR)PowerOnTimer,int(PWM_WAVE_PERIOD/20));

}
    2cec:	46c0      	nop			; (mov r8, r8)
    2cee:	46bd      	mov	sp, r7
    2cf0:	b002      	add	sp, #8
    2cf2:	bd80      	pop	{r7, pc}
    2cf4:	2000084c 	.word	0x2000084c
    2cf8:	00004561 	.word	0x00004561
    2cfc:	20000960 	.word	0x20000960
    2d00:	000008e9 	.word	0x000008e9

00002d04 <_ZN16LedHandler_Class17LightOnActivePinsEv>:
//	pwmTimer.remove_task();
	pwmTimer.add_oneShot_task((FUNC_PTR)PowerOffTimer,uint32_t(period*(1000-dutyCycle)/1000));
	pwmTimer.start();
}

void	LedHandler_Class::LightOnActivePins(void){
    2d04:	b590      	push	{r4, r7, lr}
    2d06:	b083      	sub	sp, #12
    2d08:	af00      	add	r7, sp, #0
    2d0a:	6078      	str	r0, [r7, #4]
		for (i = 0; i < totalPins; i++)
    2d0c:	687a      	ldr	r2, [r7, #4]
    2d0e:	23a1      	movs	r3, #161	; 0xa1
    2d10:	009b      	lsls	r3, r3, #2
    2d12:	2100      	movs	r1, #0
    2d14:	50d1      	str	r1, [r2, r3]
    2d16:	687a      	ldr	r2, [r7, #4]
    2d18:	23a1      	movs	r3, #161	; 0xa1
    2d1a:	009b      	lsls	r3, r3, #2
    2d1c:	58d3      	ldr	r3, [r2, r3]
    2d1e:	6879      	ldr	r1, [r7, #4]
    2d20:	22a0      	movs	r2, #160	; 0xa0
    2d22:	0092      	lsls	r2, r2, #2
    2d24:	5c8a      	ldrb	r2, [r1, r2]
    2d26:	4293      	cmp	r3, r2
    2d28:	da2e      	bge.n	2d88 <_ZN16LedHandler_Class17LightOnActivePinsEv+0x84>
		{
			if (state.status[i]==1)
    2d2a:	687a      	ldr	r2, [r7, #4]
    2d2c:	23a1      	movs	r3, #161	; 0xa1
    2d2e:	009b      	lsls	r3, r3, #2
    2d30:	58d2      	ldr	r2, [r2, r3]
    2d32:	6879      	ldr	r1, [r7, #4]
    2d34:	2383      	movs	r3, #131	; 0x83
    2d36:	009b      	lsls	r3, r3, #2
    2d38:	188a      	adds	r2, r1, r2
    2d3a:	18d3      	adds	r3, r2, r3
    2d3c:	781b      	ldrb	r3, [r3, #0]
    2d3e:	2b01      	cmp	r3, #1
    2d40:	d118      	bne.n	2d74 <_ZN16LedHandler_Class17LightOnActivePinsEv+0x70>
			{
				SetPin(pins.allPorts[i],pins.allPins[i]);
    2d42:	6878      	ldr	r0, [r7, #4]
    2d44:	687a      	ldr	r2, [r7, #4]
    2d46:	23a1      	movs	r3, #161	; 0xa1
    2d48:	009b      	lsls	r3, r3, #2
    2d4a:	58d2      	ldr	r2, [r2, r3]
    2d4c:	6879      	ldr	r1, [r7, #4]
    2d4e:	23cc      	movs	r3, #204	; 0xcc
    2d50:	005b      	lsls	r3, r3, #1
    2d52:	188a      	adds	r2, r1, r2
    2d54:	18d3      	adds	r3, r2, r3
    2d56:	781c      	ldrb	r4, [r3, #0]
    2d58:	687a      	ldr	r2, [r7, #4]
    2d5a:	23a1      	movs	r3, #161	; 0xa1
    2d5c:	009b      	lsls	r3, r3, #2
    2d5e:	58d2      	ldr	r2, [r2, r3]
    2d60:	6879      	ldr	r1, [r7, #4]
    2d62:	23e9      	movs	r3, #233	; 0xe9
    2d64:	005b      	lsls	r3, r3, #1
    2d66:	188a      	adds	r2, r1, r2
    2d68:	18d3      	adds	r3, r2, r3
    2d6a:	781b      	ldrb	r3, [r3, #0]
    2d6c:	001a      	movs	r2, r3
    2d6e:	0021      	movs	r1, r4
    2d70:	4b07      	ldr	r3, [pc, #28]	; (2d90 <_ZN16LedHandler_Class17LightOnActivePinsEv+0x8c>)
    2d72:	4798      	blx	r3
		for (i = 0; i < totalPins; i++)
    2d74:	687a      	ldr	r2, [r7, #4]
    2d76:	23a1      	movs	r3, #161	; 0xa1
    2d78:	009b      	lsls	r3, r3, #2
    2d7a:	58d3      	ldr	r3, [r2, r3]
    2d7c:	1c59      	adds	r1, r3, #1
    2d7e:	687a      	ldr	r2, [r7, #4]
    2d80:	23a1      	movs	r3, #161	; 0xa1
    2d82:	009b      	lsls	r3, r3, #2
    2d84:	50d1      	str	r1, [r2, r3]
    2d86:	e7c6      	b.n	2d16 <_ZN16LedHandler_Class17LightOnActivePinsEv+0x12>
				//ClearPin(pins.allPorts[i],pins.allPins[i]);
				
			}
			
		}
}
    2d88:	46c0      	nop			; (mov r8, r8)
    2d8a:	46bd      	mov	sp, r7
    2d8c:	b003      	add	sp, #12
    2d8e:	bd90      	pop	{r4, r7, pc}
    2d90:	00003559 	.word	0x00003559

00002d94 <_ZN16LedHandler_Class18LightOffActivePinsEv>:

void	LedHandler_Class::LightOffActivePins(void){
    2d94:	b590      	push	{r4, r7, lr}
    2d96:	b083      	sub	sp, #12
    2d98:	af00      	add	r7, sp, #0
    2d9a:	6078      	str	r0, [r7, #4]
	for (i = 0; i < totalPins; i++)
    2d9c:	687a      	ldr	r2, [r7, #4]
    2d9e:	23a1      	movs	r3, #161	; 0xa1
    2da0:	009b      	lsls	r3, r3, #2
    2da2:	2100      	movs	r1, #0
    2da4:	50d1      	str	r1, [r2, r3]
    2da6:	687a      	ldr	r2, [r7, #4]
    2da8:	23a1      	movs	r3, #161	; 0xa1
    2daa:	009b      	lsls	r3, r3, #2
    2dac:	58d3      	ldr	r3, [r2, r3]
    2dae:	6879      	ldr	r1, [r7, #4]
    2db0:	22a0      	movs	r2, #160	; 0xa0
    2db2:	0092      	lsls	r2, r2, #2
    2db4:	5c8a      	ldrb	r2, [r1, r2]
    2db6:	4293      	cmp	r3, r2
    2db8:	da22      	bge.n	2e00 <_ZN16LedHandler_Class18LightOffActivePinsEv+0x6c>
	{

			ClearPin(pins.allPorts[i],pins.allPins[i]);
    2dba:	6878      	ldr	r0, [r7, #4]
    2dbc:	687a      	ldr	r2, [r7, #4]
    2dbe:	23a1      	movs	r3, #161	; 0xa1
    2dc0:	009b      	lsls	r3, r3, #2
    2dc2:	58d2      	ldr	r2, [r2, r3]
    2dc4:	6879      	ldr	r1, [r7, #4]
    2dc6:	23cc      	movs	r3, #204	; 0xcc
    2dc8:	005b      	lsls	r3, r3, #1
    2dca:	188a      	adds	r2, r1, r2
    2dcc:	18d3      	adds	r3, r2, r3
    2dce:	781c      	ldrb	r4, [r3, #0]
    2dd0:	687a      	ldr	r2, [r7, #4]
    2dd2:	23a1      	movs	r3, #161	; 0xa1
    2dd4:	009b      	lsls	r3, r3, #2
    2dd6:	58d2      	ldr	r2, [r2, r3]
    2dd8:	6879      	ldr	r1, [r7, #4]
    2dda:	23e9      	movs	r3, #233	; 0xe9
    2ddc:	005b      	lsls	r3, r3, #1
    2dde:	188a      	adds	r2, r1, r2
    2de0:	18d3      	adds	r3, r2, r3
    2de2:	781b      	ldrb	r3, [r3, #0]
    2de4:	001a      	movs	r2, r3
    2de6:	0021      	movs	r1, r4
    2de8:	4b07      	ldr	r3, [pc, #28]	; (2e08 <_ZN16LedHandler_Class18LightOffActivePinsEv+0x74>)
    2dea:	4798      	blx	r3
	for (i = 0; i < totalPins; i++)
    2dec:	687a      	ldr	r2, [r7, #4]
    2dee:	23a1      	movs	r3, #161	; 0xa1
    2df0:	009b      	lsls	r3, r3, #2
    2df2:	58d3      	ldr	r3, [r2, r3]
    2df4:	1c59      	adds	r1, r3, #1
    2df6:	687a      	ldr	r2, [r7, #4]
    2df8:	23a1      	movs	r3, #161	; 0xa1
    2dfa:	009b      	lsls	r3, r3, #2
    2dfc:	50d1      	str	r1, [r2, r3]
    2dfe:	e7d2      	b.n	2da6 <_ZN16LedHandler_Class18LightOffActivePinsEv+0x12>

	}
}
    2e00:	46c0      	nop			; (mov r8, r8)
    2e02:	46bd      	mov	sp, r7
    2e04:	b003      	add	sp, #12
    2e06:	bd90      	pop	{r4, r7, pc}
    2e08:	0000359d 	.word	0x0000359d

00002e0c <_ZN16LedHandler_Class12GetTotalPinsEv>:
void	LedHandler_Class::Modulate(void){
	
}
uint8_t	LedHandler_Class::GetTotalPins(void){
    2e0c:	b580      	push	{r7, lr}
    2e0e:	b082      	sub	sp, #8
    2e10:	af00      	add	r7, sp, #0
    2e12:	6078      	str	r0, [r7, #4]
	return	totalPins;
    2e14:	687a      	ldr	r2, [r7, #4]
    2e16:	23a0      	movs	r3, #160	; 0xa0
    2e18:	009b      	lsls	r3, r3, #2
    2e1a:	5cd3      	ldrb	r3, [r2, r3]
}
    2e1c:	0018      	movs	r0, r3
    2e1e:	46bd      	mov	sp, r7
    2e20:	b002      	add	sp, #8
    2e22:	bd80      	pop	{r7, pc}

00002e24 <_Z41__static_initialization_and_destruction_0ii>:

LedHandler_Class		lighter;
    2e24:	b580      	push	{r7, lr}
    2e26:	b082      	sub	sp, #8
    2e28:	af00      	add	r7, sp, #0
    2e2a:	6078      	str	r0, [r7, #4]
    2e2c:	6039      	str	r1, [r7, #0]
    2e2e:	687b      	ldr	r3, [r7, #4]
    2e30:	2b01      	cmp	r3, #1
    2e32:	d10d      	bne.n	2e50 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2e34:	683b      	ldr	r3, [r7, #0]
    2e36:	4a08      	ldr	r2, [pc, #32]	; (2e58 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2e38:	4293      	cmp	r3, r2
    2e3a:	d109      	bne.n	2e50 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2e3c:	4b07      	ldr	r3, [pc, #28]	; (2e5c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2e3e:	0018      	movs	r0, r3
    2e40:	4b07      	ldr	r3, [pc, #28]	; (2e60 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2e42:	4798      	blx	r3
    2e44:	4a07      	ldr	r2, [pc, #28]	; (2e64 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2e46:	4908      	ldr	r1, [pc, #32]	; (2e68 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2e48:	4b04      	ldr	r3, [pc, #16]	; (2e5c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2e4a:	0018      	movs	r0, r3
    2e4c:	4b07      	ldr	r3, [pc, #28]	; (2e6c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    2e4e:	4798      	blx	r3
    2e50:	46c0      	nop			; (mov r8, r8)
    2e52:	46bd      	mov	sp, r7
    2e54:	b002      	add	sp, #8
    2e56:	bd80      	pop	{r7, pc}
    2e58:	0000ffff 	.word	0x0000ffff
    2e5c:	20000544 	.word	0x20000544
    2e60:	00001b45 	.word	0x00001b45
    2e64:	20000000 	.word	0x20000000
    2e68:	00001bad 	.word	0x00001bad
    2e6c:	00005165 	.word	0x00005165

00002e70 <_GLOBAL__sub_I_ptrLedHandler>:
    2e70:	b580      	push	{r7, lr}
    2e72:	af00      	add	r7, sp, #0
    2e74:	4b03      	ldr	r3, [pc, #12]	; (2e84 <_GLOBAL__sub_I_ptrLedHandler+0x14>)
    2e76:	0019      	movs	r1, r3
    2e78:	2001      	movs	r0, #1
    2e7a:	4b03      	ldr	r3, [pc, #12]	; (2e88 <_GLOBAL__sub_I_ptrLedHandler+0x18>)
    2e7c:	4798      	blx	r3
    2e7e:	46bd      	mov	sp, r7
    2e80:	bd80      	pop	{r7, pc}
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	0000ffff 	.word	0x0000ffff
    2e88:	00002e25 	.word	0x00002e25

00002e8c <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2e8c:	b580      	push	{r7, lr}
    2e8e:	b084      	sub	sp, #16
    2e90:	af00      	add	r7, sp, #0
    2e92:	60f8      	str	r0, [r7, #12]
    2e94:	607a      	str	r2, [r7, #4]
    2e96:	230b      	movs	r3, #11
    2e98:	18fb      	adds	r3, r7, r3
    2e9a:	1c0a      	adds	r2, r1, #0
    2e9c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2e9e:	230b      	movs	r3, #11
    2ea0:	18fb      	adds	r3, r7, r3
    2ea2:	781b      	ldrb	r3, [r3, #0]
    2ea4:	68fa      	ldr	r2, [r7, #12]
    2ea6:	01db      	lsls	r3, r3, #7
    2ea8:	18d3      	adds	r3, r2, r3
    2eaa:	3308      	adds	r3, #8
    2eac:	687a      	ldr	r2, [r7, #4]
    2eae:	601a      	str	r2, [r3, #0]
}
    2eb0:	46c0      	nop			; (mov r8, r8)
    2eb2:	46bd      	mov	sp, r7
    2eb4:	b004      	add	sp, #16
    2eb6:	bd80      	pop	{r7, pc}

00002eb8 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2eb8:	b580      	push	{r7, lr}
    2eba:	b084      	sub	sp, #16
    2ebc:	af00      	add	r7, sp, #0
    2ebe:	60f8      	str	r0, [r7, #12]
    2ec0:	607a      	str	r2, [r7, #4]
    2ec2:	230b      	movs	r3, #11
    2ec4:	18fb      	adds	r3, r7, r3
    2ec6:	1c0a      	adds	r2, r1, #0
    2ec8:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2eca:	230b      	movs	r3, #11
    2ecc:	18fb      	adds	r3, r7, r3
    2ece:	781b      	ldrb	r3, [r3, #0]
    2ed0:	68fa      	ldr	r2, [r7, #12]
    2ed2:	01db      	lsls	r3, r3, #7
    2ed4:	18d3      	adds	r3, r2, r3
    2ed6:	3304      	adds	r3, #4
    2ed8:	687a      	ldr	r2, [r7, #4]
    2eda:	601a      	str	r2, [r3, #0]
}
    2edc:	46c0      	nop			; (mov r8, r8)
    2ede:	46bd      	mov	sp, r7
    2ee0:	b004      	add	sp, #16
    2ee2:	bd80      	pop	{r7, pc}

00002ee4 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2ee4:	b580      	push	{r7, lr}
    2ee6:	b084      	sub	sp, #16
    2ee8:	af00      	add	r7, sp, #0
    2eea:	60f8      	str	r0, [r7, #12]
    2eec:	607a      	str	r2, [r7, #4]
    2eee:	230b      	movs	r3, #11
    2ef0:	18fb      	adds	r3, r7, r3
    2ef2:	1c0a      	adds	r2, r1, #0
    2ef4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ef6:	230b      	movs	r3, #11
    2ef8:	18fb      	adds	r3, r7, r3
    2efa:	781b      	ldrb	r3, [r3, #0]
    2efc:	68fa      	ldr	r2, [r7, #12]
    2efe:	01db      	lsls	r3, r3, #7
    2f00:	18d3      	adds	r3, r2, r3
    2f02:	3318      	adds	r3, #24
    2f04:	687a      	ldr	r2, [r7, #4]
    2f06:	601a      	str	r2, [r3, #0]
}
    2f08:	46c0      	nop			; (mov r8, r8)
    2f0a:	46bd      	mov	sp, r7
    2f0c:	b004      	add	sp, #16
    2f0e:	bd80      	pop	{r7, pc}

00002f10 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2f10:	b580      	push	{r7, lr}
    2f12:	b084      	sub	sp, #16
    2f14:	af00      	add	r7, sp, #0
    2f16:	60f8      	str	r0, [r7, #12]
    2f18:	607a      	str	r2, [r7, #4]
    2f1a:	230b      	movs	r3, #11
    2f1c:	18fb      	adds	r3, r7, r3
    2f1e:	1c0a      	adds	r2, r1, #0
    2f20:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2f22:	230b      	movs	r3, #11
    2f24:	18fb      	adds	r3, r7, r3
    2f26:	781b      	ldrb	r3, [r3, #0]
    2f28:	68fa      	ldr	r2, [r7, #12]
    2f2a:	01db      	lsls	r3, r3, #7
    2f2c:	18d3      	adds	r3, r2, r3
    2f2e:	3314      	adds	r3, #20
    2f30:	687a      	ldr	r2, [r7, #4]
    2f32:	601a      	str	r2, [r3, #0]
}
    2f34:	46c0      	nop			; (mov r8, r8)
    2f36:	46bd      	mov	sp, r7
    2f38:	b004      	add	sp, #16
    2f3a:	bd80      	pop	{r7, pc}

00002f3c <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2f3c:	b590      	push	{r4, r7, lr}
    2f3e:	b085      	sub	sp, #20
    2f40:	af00      	add	r7, sp, #0
    2f42:	6078      	str	r0, [r7, #4]
    2f44:	000c      	movs	r4, r1
    2f46:	0010      	movs	r0, r2
    2f48:	0019      	movs	r1, r3
    2f4a:	1cfb      	adds	r3, r7, #3
    2f4c:	1c22      	adds	r2, r4, #0
    2f4e:	701a      	strb	r2, [r3, #0]
    2f50:	1cbb      	adds	r3, r7, #2
    2f52:	1c02      	adds	r2, r0, #0
    2f54:	701a      	strb	r2, [r3, #0]
    2f56:	1c7b      	adds	r3, r7, #1
    2f58:	1c0a      	adds	r2, r1, #0
    2f5a:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2f5c:	1cfb      	adds	r3, r7, #3
    2f5e:	7819      	ldrb	r1, [r3, #0]
    2f60:	1cbb      	adds	r3, r7, #2
    2f62:	781a      	ldrb	r2, [r3, #0]
    2f64:	230f      	movs	r3, #15
    2f66:	18fb      	adds	r3, r7, r3
    2f68:	6878      	ldr	r0, [r7, #4]
    2f6a:	2430      	movs	r4, #48	; 0x30
    2f6c:	01c9      	lsls	r1, r1, #7
    2f6e:	1841      	adds	r1, r0, r1
    2f70:	188a      	adds	r2, r1, r2
    2f72:	1912      	adds	r2, r2, r4
    2f74:	7812      	ldrb	r2, [r2, #0]
    2f76:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2f78:	230f      	movs	r3, #15
    2f7a:	18fb      	adds	r3, r7, r3
    2f7c:	220f      	movs	r2, #15
    2f7e:	18ba      	adds	r2, r7, r2
    2f80:	7812      	ldrb	r2, [r2, #0]
    2f82:	210f      	movs	r1, #15
    2f84:	438a      	bics	r2, r1
    2f86:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
    2f88:	1c7b      	adds	r3, r7, #1
    2f8a:	781b      	ldrb	r3, [r3, #0]
    2f8c:	220f      	movs	r2, #15
    2f8e:	4013      	ands	r3, r2
    2f90:	b2d9      	uxtb	r1, r3
    2f92:	230f      	movs	r3, #15
    2f94:	18fb      	adds	r3, r7, r3
    2f96:	220f      	movs	r2, #15
    2f98:	18ba      	adds	r2, r7, r2
    2f9a:	7812      	ldrb	r2, [r2, #0]
    2f9c:	430a      	orrs	r2, r1
    2f9e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2fa0:	1cfb      	adds	r3, r7, #3
    2fa2:	781a      	ldrb	r2, [r3, #0]
    2fa4:	1cbb      	adds	r3, r7, #2
    2fa6:	781b      	ldrb	r3, [r3, #0]
    2fa8:	6879      	ldr	r1, [r7, #4]
    2faa:	2030      	movs	r0, #48	; 0x30
    2fac:	01d2      	lsls	r2, r2, #7
    2fae:	188a      	adds	r2, r1, r2
    2fb0:	18d3      	adds	r3, r2, r3
    2fb2:	181b      	adds	r3, r3, r0
    2fb4:	220f      	movs	r2, #15
    2fb6:	18ba      	adds	r2, r7, r2
    2fb8:	7812      	ldrb	r2, [r2, #0]
    2fba:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2fbc:	46c0      	nop			; (mov r8, r8)
    2fbe:	46bd      	mov	sp, r7
    2fc0:	b005      	add	sp, #20
    2fc2:	bd90      	pop	{r4, r7, pc}

00002fc4 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2fc4:	b590      	push	{r4, r7, lr}
    2fc6:	b085      	sub	sp, #20
    2fc8:	af00      	add	r7, sp, #0
    2fca:	6078      	str	r0, [r7, #4]
    2fcc:	000c      	movs	r4, r1
    2fce:	0010      	movs	r0, r2
    2fd0:	0019      	movs	r1, r3
    2fd2:	1cfb      	adds	r3, r7, #3
    2fd4:	1c22      	adds	r2, r4, #0
    2fd6:	701a      	strb	r2, [r3, #0]
    2fd8:	1cbb      	adds	r3, r7, #2
    2fda:	1c02      	adds	r2, r0, #0
    2fdc:	701a      	strb	r2, [r3, #0]
    2fde:	1c7b      	adds	r3, r7, #1
    2fe0:	1c0a      	adds	r2, r1, #0
    2fe2:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2fe4:	1cfb      	adds	r3, r7, #3
    2fe6:	7819      	ldrb	r1, [r3, #0]
    2fe8:	1cbb      	adds	r3, r7, #2
    2fea:	781a      	ldrb	r2, [r3, #0]
    2fec:	230f      	movs	r3, #15
    2fee:	18fb      	adds	r3, r7, r3
    2ff0:	6878      	ldr	r0, [r7, #4]
    2ff2:	2430      	movs	r4, #48	; 0x30
    2ff4:	01c9      	lsls	r1, r1, #7
    2ff6:	1841      	adds	r1, r0, r1
    2ff8:	188a      	adds	r2, r1, r2
    2ffa:	1912      	adds	r2, r2, r4
    2ffc:	7812      	ldrb	r2, [r2, #0]
    2ffe:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3000:	230f      	movs	r3, #15
    3002:	18fb      	adds	r3, r7, r3
    3004:	220f      	movs	r2, #15
    3006:	18ba      	adds	r2, r7, r2
    3008:	7812      	ldrb	r2, [r2, #0]
    300a:	210f      	movs	r1, #15
    300c:	400a      	ands	r2, r1
    300e:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
    3010:	1c7b      	adds	r3, r7, #1
    3012:	781b      	ldrb	r3, [r3, #0]
    3014:	011b      	lsls	r3, r3, #4
    3016:	b2d9      	uxtb	r1, r3
    3018:	230f      	movs	r3, #15
    301a:	18fb      	adds	r3, r7, r3
    301c:	220f      	movs	r2, #15
    301e:	18ba      	adds	r2, r7, r2
    3020:	7812      	ldrb	r2, [r2, #0]
    3022:	430a      	orrs	r2, r1
    3024:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3026:	1cfb      	adds	r3, r7, #3
    3028:	781a      	ldrb	r2, [r3, #0]
    302a:	1cbb      	adds	r3, r7, #2
    302c:	781b      	ldrb	r3, [r3, #0]
    302e:	6879      	ldr	r1, [r7, #4]
    3030:	2030      	movs	r0, #48	; 0x30
    3032:	01d2      	lsls	r2, r2, #7
    3034:	188a      	adds	r2, r1, r2
    3036:	18d3      	adds	r3, r2, r3
    3038:	181b      	adds	r3, r3, r0
    303a:	220f      	movs	r2, #15
    303c:	18ba      	adds	r2, r7, r2
    303e:	7812      	ldrb	r2, [r2, #0]
    3040:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    3042:	46c0      	nop			; (mov r8, r8)
    3044:	46bd      	mov	sp, r7
    3046:	b005      	add	sp, #20
    3048:	bd90      	pop	{r4, r7, pc}

0000304a <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    304a:	b590      	push	{r4, r7, lr}
    304c:	b085      	sub	sp, #20
    304e:	af00      	add	r7, sp, #0
    3050:	6078      	str	r0, [r7, #4]
    3052:	000c      	movs	r4, r1
    3054:	0010      	movs	r0, r2
    3056:	0019      	movs	r1, r3
    3058:	1cfb      	adds	r3, r7, #3
    305a:	1c22      	adds	r2, r4, #0
    305c:	701a      	strb	r2, [r3, #0]
    305e:	1cbb      	adds	r3, r7, #2
    3060:	1c02      	adds	r2, r0, #0
    3062:	701a      	strb	r2, [r3, #0]
    3064:	1c7b      	adds	r3, r7, #1
    3066:	1c0a      	adds	r2, r1, #0
    3068:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    306a:	1cfb      	adds	r3, r7, #3
    306c:	7819      	ldrb	r1, [r3, #0]
    306e:	1cbb      	adds	r3, r7, #2
    3070:	781a      	ldrb	r2, [r3, #0]
    3072:	230f      	movs	r3, #15
    3074:	18fb      	adds	r3, r7, r3
    3076:	6878      	ldr	r0, [r7, #4]
    3078:	2440      	movs	r4, #64	; 0x40
    307a:	01c9      	lsls	r1, r1, #7
    307c:	1841      	adds	r1, r0, r1
    307e:	188a      	adds	r2, r1, r2
    3080:	1912      	adds	r2, r2, r4
    3082:	7812      	ldrb	r2, [r2, #0]
    3084:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3086:	230f      	movs	r3, #15
    3088:	18fb      	adds	r3, r7, r3
    308a:	220f      	movs	r2, #15
    308c:	18ba      	adds	r2, r7, r2
    308e:	7812      	ldrb	r2, [r2, #0]
    3090:	2101      	movs	r1, #1
    3092:	438a      	bics	r2, r1
    3094:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3096:	1c7b      	adds	r3, r7, #1
    3098:	7819      	ldrb	r1, [r3, #0]
    309a:	230f      	movs	r3, #15
    309c:	18fb      	adds	r3, r7, r3
    309e:	220f      	movs	r2, #15
    30a0:	18ba      	adds	r2, r7, r2
    30a2:	7812      	ldrb	r2, [r2, #0]
    30a4:	430a      	orrs	r2, r1
    30a6:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    30a8:	1cfb      	adds	r3, r7, #3
    30aa:	781a      	ldrb	r2, [r3, #0]
    30ac:	1cbb      	adds	r3, r7, #2
    30ae:	781b      	ldrb	r3, [r3, #0]
    30b0:	6879      	ldr	r1, [r7, #4]
    30b2:	2040      	movs	r0, #64	; 0x40
    30b4:	01d2      	lsls	r2, r2, #7
    30b6:	188a      	adds	r2, r1, r2
    30b8:	18d3      	adds	r3, r2, r3
    30ba:	181b      	adds	r3, r3, r0
    30bc:	220f      	movs	r2, #15
    30be:	18ba      	adds	r2, r7, r2
    30c0:	7812      	ldrb	r2, [r2, #0]
    30c2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    30c4:	46c0      	nop			; (mov r8, r8)
    30c6:	46bd      	mov	sp, r7
    30c8:	b005      	add	sp, #20
    30ca:	bd90      	pop	{r4, r7, pc}

000030cc <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    30cc:	b580      	push	{r7, lr}
    30ce:	b084      	sub	sp, #16
    30d0:	af00      	add	r7, sp, #0
    30d2:	60f8      	str	r0, [r7, #12]
    30d4:	607a      	str	r2, [r7, #4]
    30d6:	230b      	movs	r3, #11
    30d8:	18fb      	adds	r3, r7, r3
    30da:	1c0a      	adds	r2, r1, #0
    30dc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    30de:	230b      	movs	r3, #11
    30e0:	18fb      	adds	r3, r7, r3
    30e2:	781b      	ldrb	r3, [r3, #0]
    30e4:	68fa      	ldr	r2, [r7, #12]
    30e6:	01db      	lsls	r3, r3, #7
    30e8:	18d3      	adds	r3, r2, r3
    30ea:	3328      	adds	r3, #40	; 0x28
    30ec:	687a      	ldr	r2, [r7, #4]
    30ee:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    30f0:	46c0      	nop			; (mov r8, r8)
    30f2:	46bd      	mov	sp, r7
    30f4:	b004      	add	sp, #16
    30f6:	bd80      	pop	{r7, pc}

000030f8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    30f8:	b580      	push	{r7, lr}
    30fa:	b082      	sub	sp, #8
    30fc:	af00      	add	r7, sp, #0
    30fe:	6039      	str	r1, [r7, #0]
    3100:	0011      	movs	r1, r2
    3102:	1dfb      	adds	r3, r7, #7
    3104:	1c02      	adds	r2, r0, #0
    3106:	701a      	strb	r2, [r3, #0]
    3108:	1dbb      	adds	r3, r7, #6
    310a:	1c0a      	adds	r2, r1, #0
    310c:	701a      	strb	r2, [r3, #0]
	switch (direction) {
    310e:	1dbb      	adds	r3, r7, #6
    3110:	781b      	ldrb	r3, [r3, #0]
    3112:	2b01      	cmp	r3, #1
    3114:	d023      	beq.n	315e <_gpio_set_direction+0x66>
    3116:	2b02      	cmp	r3, #2
    3118:	d03f      	beq.n	319a <_gpio_set_direction+0xa2>
    311a:	2b00      	cmp	r3, #0
    311c:	d15d      	bne.n	31da <_gpio_set_direction+0xe2>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    311e:	683a      	ldr	r2, [r7, #0]
    3120:	1dfb      	adds	r3, r7, #7
    3122:	7819      	ldrb	r1, [r3, #0]
    3124:	23c0      	movs	r3, #192	; 0xc0
    3126:	05db      	lsls	r3, r3, #23
    3128:	0018      	movs	r0, r3
    312a:	4b31      	ldr	r3, [pc, #196]	; (31f0 <_gpio_set_direction+0xf8>)
    312c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    312e:	683b      	ldr	r3, [r7, #0]
    3130:	041b      	lsls	r3, r3, #16
    3132:	0c1b      	lsrs	r3, r3, #16
    3134:	2280      	movs	r2, #128	; 0x80
    3136:	05d2      	lsls	r2, r2, #23
    3138:	431a      	orrs	r2, r3
    313a:	1dfb      	adds	r3, r7, #7
    313c:	781b      	ldrb	r3, [r3, #0]
    313e:	482d      	ldr	r0, [pc, #180]	; (31f4 <_gpio_set_direction+0xfc>)
    3140:	0019      	movs	r1, r3
    3142:	4b2d      	ldr	r3, [pc, #180]	; (31f8 <_gpio_set_direction+0x100>)
    3144:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3146:	683b      	ldr	r3, [r7, #0]
    3148:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    314a:	22c0      	movs	r2, #192	; 0xc0
    314c:	0612      	lsls	r2, r2, #24
    314e:	431a      	orrs	r2, r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3150:	1dfb      	adds	r3, r7, #7
    3152:	781b      	ldrb	r3, [r3, #0]
    3154:	4827      	ldr	r0, [pc, #156]	; (31f4 <_gpio_set_direction+0xfc>)
    3156:	0019      	movs	r1, r3
    3158:	4b27      	ldr	r3, [pc, #156]	; (31f8 <_gpio_set_direction+0x100>)
    315a:	4798      	blx	r3
		break;
    315c:	e043      	b.n	31e6 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    315e:	683a      	ldr	r2, [r7, #0]
    3160:	1dfb      	adds	r3, r7, #7
    3162:	7819      	ldrb	r1, [r3, #0]
    3164:	23c0      	movs	r3, #192	; 0xc0
    3166:	05db      	lsls	r3, r3, #23
    3168:	0018      	movs	r0, r3
    316a:	4b21      	ldr	r3, [pc, #132]	; (31f0 <_gpio_set_direction+0xf8>)
    316c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    316e:	683b      	ldr	r3, [r7, #0]
    3170:	041b      	lsls	r3, r3, #16
    3172:	0c1b      	lsrs	r3, r3, #16
    3174:	4a21      	ldr	r2, [pc, #132]	; (31fc <_gpio_set_direction+0x104>)
    3176:	431a      	orrs	r2, r3
    3178:	1dfb      	adds	r3, r7, #7
    317a:	781b      	ldrb	r3, [r3, #0]
    317c:	481d      	ldr	r0, [pc, #116]	; (31f4 <_gpio_set_direction+0xfc>)
    317e:	0019      	movs	r1, r3
    3180:	4b1d      	ldr	r3, [pc, #116]	; (31f8 <_gpio_set_direction+0x100>)
    3182:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    3184:	683b      	ldr	r3, [r7, #0]
    3186:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    3188:	4a1d      	ldr	r2, [pc, #116]	; (3200 <_gpio_set_direction+0x108>)
    318a:	431a      	orrs	r2, r3
		                                | ((mask & 0xffff0000) >> 16));
    318c:	1dfb      	adds	r3, r7, #7
    318e:	781b      	ldrb	r3, [r3, #0]
    3190:	4818      	ldr	r0, [pc, #96]	; (31f4 <_gpio_set_direction+0xfc>)
    3192:	0019      	movs	r1, r3
    3194:	4b18      	ldr	r3, [pc, #96]	; (31f8 <_gpio_set_direction+0x100>)
    3196:	4798      	blx	r3
		break;
    3198:	e025      	b.n	31e6 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
    319a:	683a      	ldr	r2, [r7, #0]
    319c:	1dfb      	adds	r3, r7, #7
    319e:	7819      	ldrb	r1, [r3, #0]
    31a0:	23c0      	movs	r3, #192	; 0xc0
    31a2:	05db      	lsls	r3, r3, #23
    31a4:	0018      	movs	r0, r3
    31a6:	4b17      	ldr	r3, [pc, #92]	; (3204 <_gpio_set_direction+0x10c>)
    31a8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    31aa:	683b      	ldr	r3, [r7, #0]
    31ac:	041b      	lsls	r3, r3, #16
    31ae:	0c1b      	lsrs	r3, r3, #16
    31b0:	2280      	movs	r2, #128	; 0x80
    31b2:	05d2      	lsls	r2, r2, #23
    31b4:	431a      	orrs	r2, r3
    31b6:	1dfb      	adds	r3, r7, #7
    31b8:	781b      	ldrb	r3, [r3, #0]
    31ba:	480e      	ldr	r0, [pc, #56]	; (31f4 <_gpio_set_direction+0xfc>)
    31bc:	0019      	movs	r1, r3
    31be:	4b0e      	ldr	r3, [pc, #56]	; (31f8 <_gpio_set_direction+0x100>)
    31c0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    31c2:	683b      	ldr	r3, [r7, #0]
    31c4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    31c6:	22c0      	movs	r2, #192	; 0xc0
    31c8:	0612      	lsls	r2, r2, #24
    31ca:	431a      	orrs	r2, r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    31cc:	1dfb      	adds	r3, r7, #7
    31ce:	781b      	ldrb	r3, [r3, #0]
    31d0:	4808      	ldr	r0, [pc, #32]	; (31f4 <_gpio_set_direction+0xfc>)
    31d2:	0019      	movs	r1, r3
    31d4:	4b08      	ldr	r3, [pc, #32]	; (31f8 <_gpio_set_direction+0x100>)
    31d6:	4798      	blx	r3
		break;
    31d8:	e005      	b.n	31e6 <_gpio_set_direction+0xee>

	default:
		ASSERT(false);
    31da:	4b0b      	ldr	r3, [pc, #44]	; (3208 <_gpio_set_direction+0x110>)
    31dc:	2245      	movs	r2, #69	; 0x45
    31de:	0019      	movs	r1, r3
    31e0:	2000      	movs	r0, #0
    31e2:	4b0a      	ldr	r3, [pc, #40]	; (320c <_gpio_set_direction+0x114>)
    31e4:	4798      	blx	r3
	}
}
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	46bd      	mov	sp, r7
    31ea:	b002      	add	sp, #8
    31ec:	bd80      	pop	{r7, pc}
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	00002eb9 	.word	0x00002eb9
    31f4:	41004400 	.word	0x41004400
    31f8:	000030cd 	.word	0x000030cd
    31fc:	40020000 	.word	0x40020000
    3200:	c0020000 	.word	0xc0020000
    3204:	00002e8d 	.word	0x00002e8d
    3208:	000057d0 	.word	0x000057d0
    320c:	00000e95 	.word	0x00000e95

00003210 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    3210:	b580      	push	{r7, lr}
    3212:	b082      	sub	sp, #8
    3214:	af00      	add	r7, sp, #0
    3216:	6039      	str	r1, [r7, #0]
    3218:	0011      	movs	r1, r2
    321a:	1dfb      	adds	r3, r7, #7
    321c:	1c02      	adds	r2, r0, #0
    321e:	701a      	strb	r2, [r3, #0]
    3220:	1dbb      	adds	r3, r7, #6
    3222:	1c0a      	adds	r2, r1, #0
    3224:	701a      	strb	r2, [r3, #0]
	if (level) {
    3226:	1dbb      	adds	r3, r7, #6
    3228:	781b      	ldrb	r3, [r3, #0]
    322a:	2b00      	cmp	r3, #0
    322c:	d008      	beq.n	3240 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    322e:	683a      	ldr	r2, [r7, #0]
    3230:	1dfb      	adds	r3, r7, #7
    3232:	7819      	ldrb	r1, [r3, #0]
    3234:	23c0      	movs	r3, #192	; 0xc0
    3236:	05db      	lsls	r3, r3, #23
    3238:	0018      	movs	r0, r3
    323a:	4b07      	ldr	r3, [pc, #28]	; (3258 <_gpio_set_level+0x48>)
    323c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
    323e:	e007      	b.n	3250 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    3240:	683a      	ldr	r2, [r7, #0]
    3242:	1dfb      	adds	r3, r7, #7
    3244:	7819      	ldrb	r1, [r3, #0]
    3246:	23c0      	movs	r3, #192	; 0xc0
    3248:	05db      	lsls	r3, r3, #23
    324a:	0018      	movs	r0, r3
    324c:	4b03      	ldr	r3, [pc, #12]	; (325c <_gpio_set_level+0x4c>)
    324e:	4798      	blx	r3
}
    3250:	46c0      	nop			; (mov r8, r8)
    3252:	46bd      	mov	sp, r7
    3254:	b002      	add	sp, #8
    3256:	bd80      	pop	{r7, pc}
    3258:	00002ee5 	.word	0x00002ee5
    325c:	00002f11 	.word	0x00002f11

00003260 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    3260:	b590      	push	{r4, r7, lr}
    3262:	b085      	sub	sp, #20
    3264:	af00      	add	r7, sp, #0
    3266:	6078      	str	r0, [r7, #4]
    3268:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    326a:	687b      	ldr	r3, [r7, #4]
    326c:	095a      	lsrs	r2, r3, #5
    326e:	230f      	movs	r3, #15
    3270:	18fb      	adds	r3, r7, r3
    3272:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    3274:	687b      	ldr	r3, [r7, #4]
    3276:	b2da      	uxtb	r2, r3
    3278:	230e      	movs	r3, #14
    327a:	18fb      	adds	r3, r7, r3
    327c:	211f      	movs	r1, #31
    327e:	400a      	ands	r2, r1
    3280:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    3282:	683b      	ldr	r3, [r7, #0]
    3284:	3301      	adds	r3, #1
    3286:	d10a      	bne.n	329e <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    3288:	230e      	movs	r3, #14
    328a:	18fb      	adds	r3, r7, r3
    328c:	781a      	ldrb	r2, [r3, #0]
    328e:	230f      	movs	r3, #15
    3290:	18fb      	adds	r3, r7, r3
    3292:	7819      	ldrb	r1, [r3, #0]
    3294:	481b      	ldr	r0, [pc, #108]	; (3304 <_gpio_set_pin_function+0xa4>)
    3296:	2300      	movs	r3, #0
    3298:	4c1b      	ldr	r4, [pc, #108]	; (3308 <_gpio_set_pin_function+0xa8>)
    329a:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    329c:	e02e      	b.n	32fc <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    329e:	230e      	movs	r3, #14
    32a0:	18fb      	adds	r3, r7, r3
    32a2:	781a      	ldrb	r2, [r3, #0]
    32a4:	230f      	movs	r3, #15
    32a6:	18fb      	adds	r3, r7, r3
    32a8:	7819      	ldrb	r1, [r3, #0]
    32aa:	4816      	ldr	r0, [pc, #88]	; (3304 <_gpio_set_pin_function+0xa4>)
    32ac:	2301      	movs	r3, #1
    32ae:	4c16      	ldr	r4, [pc, #88]	; (3308 <_gpio_set_pin_function+0xa8>)
    32b0:	47a0      	blx	r4
		if (pin & 1) {
    32b2:	230e      	movs	r3, #14
    32b4:	18fb      	adds	r3, r7, r3
    32b6:	781b      	ldrb	r3, [r3, #0]
    32b8:	2201      	movs	r2, #1
    32ba:	4013      	ands	r3, r2
    32bc:	d00f      	beq.n	32de <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    32be:	230e      	movs	r3, #14
    32c0:	18fb      	adds	r3, r7, r3
    32c2:	781b      	ldrb	r3, [r3, #0]
    32c4:	105b      	asrs	r3, r3, #1
    32c6:	b2da      	uxtb	r2, r3
    32c8:	683b      	ldr	r3, [r7, #0]
    32ca:	b2d8      	uxtb	r0, r3
    32cc:	230f      	movs	r3, #15
    32ce:	18fb      	adds	r3, r7, r3
    32d0:	7819      	ldrb	r1, [r3, #0]
    32d2:	4c0c      	ldr	r4, [pc, #48]	; (3304 <_gpio_set_pin_function+0xa4>)
    32d4:	0003      	movs	r3, r0
    32d6:	0020      	movs	r0, r4
    32d8:	4c0c      	ldr	r4, [pc, #48]	; (330c <_gpio_set_pin_function+0xac>)
    32da:	47a0      	blx	r4
}
    32dc:	e00e      	b.n	32fc <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    32de:	230e      	movs	r3, #14
    32e0:	18fb      	adds	r3, r7, r3
    32e2:	781b      	ldrb	r3, [r3, #0]
    32e4:	105b      	asrs	r3, r3, #1
    32e6:	b2da      	uxtb	r2, r3
    32e8:	683b      	ldr	r3, [r7, #0]
    32ea:	b2d8      	uxtb	r0, r3
    32ec:	230f      	movs	r3, #15
    32ee:	18fb      	adds	r3, r7, r3
    32f0:	7819      	ldrb	r1, [r3, #0]
    32f2:	4c04      	ldr	r4, [pc, #16]	; (3304 <_gpio_set_pin_function+0xa4>)
    32f4:	0003      	movs	r3, r0
    32f6:	0020      	movs	r0, r4
    32f8:	4c05      	ldr	r4, [pc, #20]	; (3310 <_gpio_set_pin_function+0xb0>)
    32fa:	47a0      	blx	r4
}
    32fc:	46c0      	nop			; (mov r8, r8)
    32fe:	46bd      	mov	sp, r7
    3300:	b005      	add	sp, #20
    3302:	bd90      	pop	{r4, r7, pc}
    3304:	41004400 	.word	0x41004400
    3308:	0000304b 	.word	0x0000304b
    330c:	00002fc5 	.word	0x00002fc5
    3310:	00002f3d 	.word	0x00002f3d

00003314 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    3314:	b580      	push	{r7, lr}
    3316:	b082      	sub	sp, #8
    3318:	af00      	add	r7, sp, #0
    331a:	6078      	str	r0, [r7, #4]
    331c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    331e:	683a      	ldr	r2, [r7, #0]
    3320:	687b      	ldr	r3, [r7, #4]
    3322:	0011      	movs	r1, r2
    3324:	0018      	movs	r0, r3
    3326:	4b03      	ldr	r3, [pc, #12]	; (3334 <gpio_set_pin_function+0x20>)
    3328:	4798      	blx	r3
}
    332a:	46c0      	nop			; (mov r8, r8)
    332c:	46bd      	mov	sp, r7
    332e:	b002      	add	sp, #8
    3330:	bd80      	pop	{r7, pc}
    3332:	46c0      	nop			; (mov r8, r8)
    3334:	00003261 	.word	0x00003261

00003338 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    3338:	b580      	push	{r7, lr}
    333a:	b082      	sub	sp, #8
    333c:	af00      	add	r7, sp, #0
    333e:	0002      	movs	r2, r0
    3340:	1dfb      	adds	r3, r7, #7
    3342:	701a      	strb	r2, [r3, #0]
    3344:	1dbb      	adds	r3, r7, #6
    3346:	1c0a      	adds	r2, r1, #0
    3348:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    334a:	1dfb      	adds	r3, r7, #7
    334c:	781b      	ldrb	r3, [r3, #0]
    334e:	115b      	asrs	r3, r3, #5
    3350:	b2d8      	uxtb	r0, r3
    3352:	1dfb      	adds	r3, r7, #7
    3354:	781b      	ldrb	r3, [r3, #0]
    3356:	001a      	movs	r2, r3
    3358:	231f      	movs	r3, #31
    335a:	4013      	ands	r3, r2
    335c:	2201      	movs	r2, #1
    335e:	409a      	lsls	r2, r3
    3360:	0011      	movs	r1, r2
    3362:	1dbb      	adds	r3, r7, #6
    3364:	781b      	ldrb	r3, [r3, #0]
    3366:	001a      	movs	r2, r3
    3368:	4b02      	ldr	r3, [pc, #8]	; (3374 <gpio_set_pin_direction+0x3c>)
    336a:	4798      	blx	r3
}
    336c:	46c0      	nop			; (mov r8, r8)
    336e:	46bd      	mov	sp, r7
    3370:	b002      	add	sp, #8
    3372:	bd80      	pop	{r7, pc}
    3374:	000030f9 	.word	0x000030f9

00003378 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    3378:	b580      	push	{r7, lr}
    337a:	b082      	sub	sp, #8
    337c:	af00      	add	r7, sp, #0
    337e:	0002      	movs	r2, r0
    3380:	1dfb      	adds	r3, r7, #7
    3382:	701a      	strb	r2, [r3, #0]
    3384:	1dbb      	adds	r3, r7, #6
    3386:	1c0a      	adds	r2, r1, #0
    3388:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    338a:	1dfb      	adds	r3, r7, #7
    338c:	781b      	ldrb	r3, [r3, #0]
    338e:	115b      	asrs	r3, r3, #5
    3390:	b2d8      	uxtb	r0, r3
    3392:	1dfb      	adds	r3, r7, #7
    3394:	781b      	ldrb	r3, [r3, #0]
    3396:	001a      	movs	r2, r3
    3398:	231f      	movs	r3, #31
    339a:	4013      	ands	r3, r2
    339c:	2201      	movs	r2, #1
    339e:	409a      	lsls	r2, r3
    33a0:	0011      	movs	r1, r2
    33a2:	1dbb      	adds	r3, r7, #6
    33a4:	781b      	ldrb	r3, [r3, #0]
    33a6:	001a      	movs	r2, r3
    33a8:	4b02      	ldr	r3, [pc, #8]	; (33b4 <gpio_set_pin_level+0x3c>)
    33aa:	4798      	blx	r3
}
    33ac:	46c0      	nop			; (mov r8, r8)
    33ae:	46bd      	mov	sp, r7
    33b0:	b002      	add	sp, #8
    33b2:	bd80      	pop	{r7, pc}
    33b4:	00003211 	.word	0x00003211

000033b8 <_ZN17LEDLighting_ClassC1Ev>:




// default constructor
LEDLighting_Class::LEDLighting_Class()
    33b8:	b580      	push	{r7, lr}
    33ba:	b082      	sub	sp, #8
    33bc:	af00      	add	r7, sp, #0
    33be:	6078      	str	r0, [r7, #4]
{
		totalPins=sizeof(PinMappingLeft)+sizeof(PinMappingRight);
    33c0:	687b      	ldr	r3, [r7, #4]
    33c2:	22e8      	movs	r2, #232	; 0xe8
    33c4:	2102      	movs	r1, #2
    33c6:	5499      	strb	r1, [r3, r2]
		

} //LEDMapping_Class
    33c8:	687b      	ldr	r3, [r7, #4]
    33ca:	0018      	movs	r0, r3
    33cc:	46bd      	mov	sp, r7
    33ce:	b002      	add	sp, #8
    33d0:	bd80      	pop	{r7, pc}

000033d2 <_ZN17LEDLighting_ClassD1Ev>:

// default destructor
LEDLighting_Class::~LEDLighting_Class()
    33d2:	b580      	push	{r7, lr}
    33d4:	b082      	sub	sp, #8
    33d6:	af00      	add	r7, sp, #0
    33d8:	6078      	str	r0, [r7, #4]
{
} //~LEDMapping_Class
    33da:	687b      	ldr	r3, [r7, #4]
    33dc:	0018      	movs	r0, r3
    33de:	46bd      	mov	sp, r7
    33e0:	b002      	add	sp, #8
    33e2:	bd80      	pop	{r7, pc}

000033e4 <_ZN17LEDLighting_Class11InitMappingEv>:

void	LEDLighting_Class::InitMapping(void){
    33e4:	b590      	push	{r4, r7, lr}
    33e6:	b0a3      	sub	sp, #140	; 0x8c
    33e8:	af00      	add	r7, sp, #0
    33ea:	6078      	str	r0, [r7, #4]
		0,
		
		0,
		
		
	};
    33ec:	2368      	movs	r3, #104	; 0x68
    33ee:	18fb      	adds	r3, r7, r3
    33f0:	4a55      	ldr	r2, [pc, #340]	; (3548 <_ZN17LEDLighting_Class11InitMappingEv+0x164>)
    33f2:	ca13      	ldmia	r2!, {r0, r1, r4}
    33f4:	c313      	stmia	r3!, {r0, r1, r4}
    33f6:	ca13      	ldmia	r2!, {r0, r1, r4}
    33f8:	c313      	stmia	r3!, {r0, r1, r4}
    33fa:	6811      	ldr	r1, [r2, #0]
    33fc:	6019      	str	r1, [r3, #0]
    33fe:	7912      	ldrb	r2, [r2, #4]
    3400:	711a      	strb	r2, [r3, #4]
	for (i = 0; i <(int)sizeof(portsleftleft); i++)
    3402:	687b      	ldr	r3, [r7, #4]
    3404:	22ec      	movs	r2, #236	; 0xec
    3406:	2100      	movs	r1, #0
    3408:	5099      	str	r1, [r3, r2]
    340a:	687b      	ldr	r3, [r7, #4]
    340c:	22ec      	movs	r2, #236	; 0xec
    340e:	589b      	ldr	r3, [r3, r2]
    3410:	2b1c      	cmp	r3, #28
    3412:	dc12      	bgt.n	343a <_ZN17LEDLighting_Class11InitMappingEv+0x56>
	{
		leftPins.portsLeft[i]=portsleftleft[i];
    3414:	687b      	ldr	r3, [r7, #4]
    3416:	22ec      	movs	r2, #236	; 0xec
    3418:	589b      	ldr	r3, [r3, r2]
    341a:	687a      	ldr	r2, [r7, #4]
    341c:	21ec      	movs	r1, #236	; 0xec
    341e:	5852      	ldr	r2, [r2, r1]
    3420:	2168      	movs	r1, #104	; 0x68
    3422:	1879      	adds	r1, r7, r1
    3424:	5c89      	ldrb	r1, [r1, r2]
    3426:	687a      	ldr	r2, [r7, #4]
    3428:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i <(int)sizeof(portsleftleft); i++)
    342a:	687b      	ldr	r3, [r7, #4]
    342c:	22ec      	movs	r2, #236	; 0xec
    342e:	589b      	ldr	r3, [r3, r2]
    3430:	1c5a      	adds	r2, r3, #1
    3432:	687b      	ldr	r3, [r7, #4]
    3434:	21ec      	movs	r1, #236	; 0xec
    3436:	505a      	str	r2, [r3, r1]
    3438:	e7e7      	b.n	340a <_ZN17LEDLighting_Class11InitMappingEv+0x26>
		
		3,
		
		2,

	};
    343a:	2348      	movs	r3, #72	; 0x48
    343c:	18fb      	adds	r3, r7, r3
    343e:	4a43      	ldr	r2, [pc, #268]	; (354c <_ZN17LEDLighting_Class11InitMappingEv+0x168>)
    3440:	ca13      	ldmia	r2!, {r0, r1, r4}
    3442:	c313      	stmia	r3!, {r0, r1, r4}
    3444:	ca13      	ldmia	r2!, {r0, r1, r4}
    3446:	c313      	stmia	r3!, {r0, r1, r4}
    3448:	6811      	ldr	r1, [r2, #0]
    344a:	6019      	str	r1, [r3, #0]
    344c:	7912      	ldrb	r2, [r2, #4]
    344e:	711a      	strb	r2, [r3, #4]
	for (i = 0; i < (int)sizeof(pinsLeftLeft); i++)
    3450:	687b      	ldr	r3, [r7, #4]
    3452:	22ec      	movs	r2, #236	; 0xec
    3454:	2100      	movs	r1, #0
    3456:	5099      	str	r1, [r3, r2]
    3458:	687b      	ldr	r3, [r7, #4]
    345a:	22ec      	movs	r2, #236	; 0xec
    345c:	589b      	ldr	r3, [r3, r2]
    345e:	2b1c      	cmp	r3, #28
    3460:	dc14      	bgt.n	348c <_ZN17LEDLighting_Class11InitMappingEv+0xa8>
	{
		leftPins.pinsLeft[i]=pinsLeftLeft[i];
    3462:	687b      	ldr	r3, [r7, #4]
    3464:	22ec      	movs	r2, #236	; 0xec
    3466:	589b      	ldr	r3, [r3, r2]
    3468:	687a      	ldr	r2, [r7, #4]
    346a:	21ec      	movs	r1, #236	; 0xec
    346c:	5852      	ldr	r2, [r2, r1]
    346e:	2148      	movs	r1, #72	; 0x48
    3470:	1879      	adds	r1, r7, r1
    3472:	5c89      	ldrb	r1, [r1, r2]
    3474:	687a      	ldr	r2, [r7, #4]
    3476:	18d3      	adds	r3, r2, r3
    3478:	1c0a      	adds	r2, r1, #0
    347a:	775a      	strb	r2, [r3, #29]
	for (i = 0; i < (int)sizeof(pinsLeftLeft); i++)
    347c:	687b      	ldr	r3, [r7, #4]
    347e:	22ec      	movs	r2, #236	; 0xec
    3480:	589b      	ldr	r3, [r3, r2]
    3482:	1c5a      	adds	r2, r3, #1
    3484:	687b      	ldr	r3, [r7, #4]
    3486:	21ec      	movs	r1, #236	; 0xec
    3488:	505a      	str	r2, [r3, r1]
    348a:	e7e5      	b.n	3458 <_ZN17LEDLighting_Class11InitMappingEv+0x74>

		0,

		0,

	};
    348c:	2328      	movs	r3, #40	; 0x28
    348e:	18fb      	adds	r3, r7, r3
    3490:	4a2f      	ldr	r2, [pc, #188]	; (3550 <_ZN17LEDLighting_Class11InitMappingEv+0x16c>)
    3492:	ca13      	ldmia	r2!, {r0, r1, r4}
    3494:	c313      	stmia	r3!, {r0, r1, r4}
    3496:	ca13      	ldmia	r2!, {r0, r1, r4}
    3498:	c313      	stmia	r3!, {r0, r1, r4}
    349a:	6811      	ldr	r1, [r2, #0]
    349c:	6019      	str	r1, [r3, #0]
    349e:	7912      	ldrb	r2, [r2, #4]
    34a0:	711a      	strb	r2, [r3, #4]
		for (i = 0; i < (int)sizeof(portsRightRight); i++)
    34a2:	687b      	ldr	r3, [r7, #4]
    34a4:	22ec      	movs	r2, #236	; 0xec
    34a6:	2100      	movs	r1, #0
    34a8:	5099      	str	r1, [r3, r2]
    34aa:	687b      	ldr	r3, [r7, #4]
    34ac:	22ec      	movs	r2, #236	; 0xec
    34ae:	589b      	ldr	r3, [r3, r2]
    34b0:	2b1c      	cmp	r3, #28
    34b2:	dc16      	bgt.n	34e2 <_ZN17LEDLighting_Class11InitMappingEv+0xfe>
		{
			rightPins.portsRight[i]=portsRightRight[i];
    34b4:	687b      	ldr	r3, [r7, #4]
    34b6:	22ec      	movs	r2, #236	; 0xec
    34b8:	589b      	ldr	r3, [r3, r2]
    34ba:	687a      	ldr	r2, [r7, #4]
    34bc:	21ec      	movs	r1, #236	; 0xec
    34be:	5852      	ldr	r2, [r2, r1]
    34c0:	2128      	movs	r1, #40	; 0x28
    34c2:	1879      	adds	r1, r7, r1
    34c4:	5c88      	ldrb	r0, [r1, r2]
    34c6:	687a      	ldr	r2, [r7, #4]
    34c8:	213a      	movs	r1, #58	; 0x3a
    34ca:	18d3      	adds	r3, r2, r3
    34cc:	185b      	adds	r3, r3, r1
    34ce:	1c02      	adds	r2, r0, #0
    34d0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < (int)sizeof(portsRightRight); i++)
    34d2:	687b      	ldr	r3, [r7, #4]
    34d4:	22ec      	movs	r2, #236	; 0xec
    34d6:	589b      	ldr	r3, [r3, r2]
    34d8:	1c5a      	adds	r2, r3, #1
    34da:	687b      	ldr	r3, [r7, #4]
    34dc:	21ec      	movs	r1, #236	; 0xec
    34de:	505a      	str	r2, [r3, r1]
    34e0:	e7e3      	b.n	34aa <_ZN17LEDLighting_Class11InitMappingEv+0xc6>
		8,
		
		31,
		
		30,
	};
    34e2:	2308      	movs	r3, #8
    34e4:	18fb      	adds	r3, r7, r3
    34e6:	4a1b      	ldr	r2, [pc, #108]	; (3554 <_ZN17LEDLighting_Class11InitMappingEv+0x170>)
    34e8:	ca13      	ldmia	r2!, {r0, r1, r4}
    34ea:	c313      	stmia	r3!, {r0, r1, r4}
    34ec:	ca13      	ldmia	r2!, {r0, r1, r4}
    34ee:	c313      	stmia	r3!, {r0, r1, r4}
    34f0:	6811      	ldr	r1, [r2, #0]
    34f2:	6019      	str	r1, [r3, #0]
    34f4:	7912      	ldrb	r2, [r2, #4]
    34f6:	711a      	strb	r2, [r3, #4]
			for (i = 0; i <(int)sizeof(pinsRightRight); i++)
    34f8:	687b      	ldr	r3, [r7, #4]
    34fa:	22ec      	movs	r2, #236	; 0xec
    34fc:	2100      	movs	r1, #0
    34fe:	5099      	str	r1, [r3, r2]
    3500:	687b      	ldr	r3, [r7, #4]
    3502:	22ec      	movs	r2, #236	; 0xec
    3504:	589b      	ldr	r3, [r3, r2]
    3506:	2b1c      	cmp	r3, #28
    3508:	dc16      	bgt.n	3538 <_ZN17LEDLighting_Class11InitMappingEv+0x154>
			{
				rightPins.pinsRight[i]=pinsRightRight[i];
    350a:	687b      	ldr	r3, [r7, #4]
    350c:	22ec      	movs	r2, #236	; 0xec
    350e:	589b      	ldr	r3, [r3, r2]
    3510:	687a      	ldr	r2, [r7, #4]
    3512:	21ec      	movs	r1, #236	; 0xec
    3514:	5852      	ldr	r2, [r2, r1]
    3516:	2108      	movs	r1, #8
    3518:	1879      	adds	r1, r7, r1
    351a:	5c88      	ldrb	r0, [r1, r2]
    351c:	687a      	ldr	r2, [r7, #4]
    351e:	2157      	movs	r1, #87	; 0x57
    3520:	18d3      	adds	r3, r2, r3
    3522:	185b      	adds	r3, r3, r1
    3524:	1c02      	adds	r2, r0, #0
    3526:	701a      	strb	r2, [r3, #0]
			for (i = 0; i <(int)sizeof(pinsRightRight); i++)
    3528:	687b      	ldr	r3, [r7, #4]
    352a:	22ec      	movs	r2, #236	; 0xec
    352c:	589b      	ldr	r3, [r3, r2]
    352e:	1c5a      	adds	r2, r3, #1
    3530:	687b      	ldr	r3, [r7, #4]
    3532:	21ec      	movs	r1, #236	; 0xec
    3534:	505a      	str	r2, [r3, r1]
    3536:	e7e3      	b.n	3500 <_ZN17LEDLighting_Class11InitMappingEv+0x11c>
			}
		totalPins=kTOTALLEFTPINS+kTOTALRIGHTPINS;	
    3538:	687b      	ldr	r3, [r7, #4]
    353a:	22e8      	movs	r2, #232	; 0xe8
    353c:	213a      	movs	r1, #58	; 0x3a
    353e:	5499      	strb	r1, [r3, r2]
}
    3540:	46c0      	nop			; (mov r8, r8)
    3542:	46bd      	mov	sp, r7
    3544:	b023      	add	sp, #140	; 0x8c
    3546:	bd90      	pop	{r4, r7, pc}
    3548:	00005814 	.word	0x00005814
    354c:	00005834 	.word	0x00005834
    3550:	00005854 	.word	0x00005854
    3554:	00005874 	.word	0x00005874

00003558 <_ZN17LEDLighting_Class6SetPinEhh>:

void	LEDLighting_Class::SetPin(uint8_t	pt,uint8_t pn){
    3558:	b580      	push	{r7, lr}
    355a:	b082      	sub	sp, #8
    355c:	af00      	add	r7, sp, #0
    355e:	6078      	str	r0, [r7, #4]
    3560:	0008      	movs	r0, r1
    3562:	0011      	movs	r1, r2
    3564:	1cfb      	adds	r3, r7, #3
    3566:	1c02      	adds	r2, r0, #0
    3568:	701a      	strb	r2, [r3, #0]
    356a:	1cbb      	adds	r3, r7, #2
    356c:	1c0a      	adds	r2, r1, #0
    356e:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(GPIO(pt,pn),true);
    3570:	1cfb      	adds	r3, r7, #3
    3572:	781b      	ldrb	r3, [r3, #0]
    3574:	015b      	lsls	r3, r3, #5
    3576:	b2da      	uxtb	r2, r3
    3578:	1cbb      	adds	r3, r7, #2
    357a:	781b      	ldrb	r3, [r3, #0]
    357c:	211f      	movs	r1, #31
    357e:	400b      	ands	r3, r1
    3580:	b2db      	uxtb	r3, r3
    3582:	18d3      	adds	r3, r2, r3
    3584:	b2db      	uxtb	r3, r3
    3586:	2101      	movs	r1, #1
    3588:	0018      	movs	r0, r3
    358a:	4b03      	ldr	r3, [pc, #12]	; (3598 <_ZN17LEDLighting_Class6SetPinEhh+0x40>)
    358c:	4798      	blx	r3
	
}
    358e:	46c0      	nop			; (mov r8, r8)
    3590:	46bd      	mov	sp, r7
    3592:	b002      	add	sp, #8
    3594:	bd80      	pop	{r7, pc}
    3596:	46c0      	nop			; (mov r8, r8)
    3598:	00003379 	.word	0x00003379

0000359c <_ZN17LEDLighting_Class8ClearPinEhh>:
void	LEDLighting_Class::ClearPin(uint8_t	pt,uint8_t pn){
    359c:	b580      	push	{r7, lr}
    359e:	b082      	sub	sp, #8
    35a0:	af00      	add	r7, sp, #0
    35a2:	6078      	str	r0, [r7, #4]
    35a4:	0008      	movs	r0, r1
    35a6:	0011      	movs	r1, r2
    35a8:	1cfb      	adds	r3, r7, #3
    35aa:	1c02      	adds	r2, r0, #0
    35ac:	701a      	strb	r2, [r3, #0]
    35ae:	1cbb      	adds	r3, r7, #2
    35b0:	1c0a      	adds	r2, r1, #0
    35b2:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(GPIO(pt,pn),false);
    35b4:	1cfb      	adds	r3, r7, #3
    35b6:	781b      	ldrb	r3, [r3, #0]
    35b8:	015b      	lsls	r3, r3, #5
    35ba:	b2da      	uxtb	r2, r3
    35bc:	1cbb      	adds	r3, r7, #2
    35be:	781b      	ldrb	r3, [r3, #0]
    35c0:	211f      	movs	r1, #31
    35c2:	400b      	ands	r3, r1
    35c4:	b2db      	uxtb	r3, r3
    35c6:	18d3      	adds	r3, r2, r3
    35c8:	b2db      	uxtb	r3, r3
    35ca:	2100      	movs	r1, #0
    35cc:	0018      	movs	r0, r3
    35ce:	4b03      	ldr	r3, [pc, #12]	; (35dc <_ZN17LEDLighting_Class8ClearPinEhh+0x40>)
    35d0:	4798      	blx	r3
	
}
    35d2:	46c0      	nop			; (mov r8, r8)
    35d4:	46bd      	mov	sp, r7
    35d6:	b002      	add	sp, #8
    35d8:	bd80      	pop	{r7, pc}
    35da:	46c0      	nop			; (mov r8, r8)
    35dc:	00003379 	.word	0x00003379

000035e0 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds>:
void LEDLighting_Class::DefineColors(StateLeds&	st){
    35e0:	b590      	push	{r4, r7, lr}
    35e2:	b083      	sub	sp, #12
    35e4:	af00      	add	r7, sp, #0
    35e6:	6078      	str	r0, [r7, #4]
    35e8:	6039      	str	r1, [r7, #0]
	
	j=0;
    35ea:	687b      	ldr	r3, [r7, #4]
    35ec:	22f0      	movs	r2, #240	; 0xf0
    35ee:	2100      	movs	r1, #0
    35f0:	5099      	str	r1, [r3, r2]
	for (i = 0; i < totalPins; i++){
    35f2:	687b      	ldr	r3, [r7, #4]
    35f4:	22ec      	movs	r2, #236	; 0xec
    35f6:	2100      	movs	r1, #0
    35f8:	5099      	str	r1, [r3, r2]
    35fa:	687b      	ldr	r3, [r7, #4]
    35fc:	22ec      	movs	r2, #236	; 0xec
    35fe:	589b      	ldr	r3, [r3, r2]
    3600:	687a      	ldr	r2, [r7, #4]
    3602:	21e8      	movs	r1, #232	; 0xe8
    3604:	5c52      	ldrb	r2, [r2, r1]
    3606:	4293      	cmp	r3, r2
    3608:	da3c      	bge.n	3684 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0xa4>
		if (i<kTOTALLEFTPINS)
    360a:	687b      	ldr	r3, [r7, #4]
    360c:	22ec      	movs	r2, #236	; 0xec
    360e:	589b      	ldr	r3, [r3, r2]
    3610:	2b1c      	cmp	r3, #28
    3612:	dc12      	bgt.n	363a <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0x5a>
		{
			st.color[i]=i%3;
    3614:	687b      	ldr	r3, [r7, #4]
    3616:	22ec      	movs	r2, #236	; 0xec
    3618:	589c      	ldr	r4, [r3, r2]
    361a:	687b      	ldr	r3, [r7, #4]
    361c:	22ec      	movs	r2, #236	; 0xec
    361e:	589a      	ldr	r2, [r3, r2]
    3620:	4b1f      	ldr	r3, [pc, #124]	; (36a0 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0xc0>)
    3622:	2103      	movs	r1, #3
    3624:	0010      	movs	r0, r2
    3626:	4798      	blx	r3
    3628:	000b      	movs	r3, r1
    362a:	b2d9      	uxtb	r1, r3
    362c:	683b      	ldr	r3, [r7, #0]
    362e:	223a      	movs	r2, #58	; 0x3a
    3630:	191b      	adds	r3, r3, r4
    3632:	189b      	adds	r3, r3, r2
    3634:	1c0a      	adds	r2, r1, #0
    3636:	701a      	strb	r2, [r3, #0]
    3638:	e01c      	b.n	3674 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0x94>
		} 
		else
		{
			st.color[i]=2-((j+1)%3);
    363a:	687b      	ldr	r3, [r7, #4]
    363c:	22ec      	movs	r2, #236	; 0xec
    363e:	589c      	ldr	r4, [r3, r2]
    3640:	687b      	ldr	r3, [r7, #4]
    3642:	22f0      	movs	r2, #240	; 0xf0
    3644:	589b      	ldr	r3, [r3, r2]
    3646:	1c5a      	adds	r2, r3, #1
    3648:	4b15      	ldr	r3, [pc, #84]	; (36a0 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0xc0>)
    364a:	2103      	movs	r1, #3
    364c:	0010      	movs	r0, r2
    364e:	4798      	blx	r3
    3650:	000b      	movs	r3, r1
    3652:	b2db      	uxtb	r3, r3
    3654:	2202      	movs	r2, #2
    3656:	1ad3      	subs	r3, r2, r3
    3658:	b2d9      	uxtb	r1, r3
    365a:	683b      	ldr	r3, [r7, #0]
    365c:	223a      	movs	r2, #58	; 0x3a
    365e:	191b      	adds	r3, r3, r4
    3660:	189b      	adds	r3, r3, r2
    3662:	1c0a      	adds	r2, r1, #0
    3664:	701a      	strb	r2, [r3, #0]
			j++;
    3666:	687b      	ldr	r3, [r7, #4]
    3668:	22f0      	movs	r2, #240	; 0xf0
    366a:	589b      	ldr	r3, [r3, r2]
    366c:	1c5a      	adds	r2, r3, #1
    366e:	687b      	ldr	r3, [r7, #4]
    3670:	21f0      	movs	r1, #240	; 0xf0
    3672:	505a      	str	r2, [r3, r1]
	for (i = 0; i < totalPins; i++){
    3674:	687b      	ldr	r3, [r7, #4]
    3676:	22ec      	movs	r2, #236	; 0xec
    3678:	589b      	ldr	r3, [r3, r2]
    367a:	1c5a      	adds	r2, r3, #1
    367c:	687b      	ldr	r3, [r7, #4]
    367e:	21ec      	movs	r1, #236	; 0xec
    3680:	505a      	str	r2, [r3, r1]
    3682:	e7ba      	b.n	35fa <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0x1a>
			
		}
		
	}
	localState=st;
    3684:	687a      	ldr	r2, [r7, #4]
    3686:	2380      	movs	r3, #128	; 0x80
    3688:	005b      	lsls	r3, r3, #1
    368a:	6839      	ldr	r1, [r7, #0]
    368c:	18d3      	adds	r3, r2, r3
    368e:	2274      	movs	r2, #116	; 0x74
    3690:	0018      	movs	r0, r3
    3692:	4b04      	ldr	r3, [pc, #16]	; (36a4 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0xc4>)
    3694:	4798      	blx	r3
	
}
    3696:	46c0      	nop			; (mov r8, r8)
    3698:	46bd      	mov	sp, r7
    369a:	b003      	add	sp, #12
    369c:	bd90      	pop	{r4, r7, pc}
    369e:	46c0      	nop			; (mov r8, r8)
    36a0:	00005455 	.word	0x00005455
    36a4:	0000550d 	.word	0x0000550d

000036a8 <_ZN17LEDLighting_Class16SetBothSidesPinsER12BothSidePins>:
void	LEDLighting_Class::SetBothSidesPins(BothSidePins& bp){
    36a8:	b580      	push	{r7, lr}
    36aa:	b082      	sub	sp, #8
    36ac:	af00      	add	r7, sp, #0
    36ae:	6078      	str	r0, [r7, #4]
    36b0:	6039      	str	r1, [r7, #0]
	pins=bp;
    36b2:	687b      	ldr	r3, [r7, #4]
    36b4:	683a      	ldr	r2, [r7, #0]
    36b6:	3374      	adds	r3, #116	; 0x74
    36b8:	0011      	movs	r1, r2
    36ba:	2274      	movs	r2, #116	; 0x74
    36bc:	0018      	movs	r0, r3
    36be:	4b05      	ldr	r3, [pc, #20]	; (36d4 <_ZN17LEDLighting_Class16SetBothSidesPinsER12BothSidePins+0x2c>)
    36c0:	4798      	blx	r3
	ConfiguratePins();
    36c2:	687b      	ldr	r3, [r7, #4]
    36c4:	0018      	movs	r0, r3
    36c6:	4b04      	ldr	r3, [pc, #16]	; (36d8 <_ZN17LEDLighting_Class16SetBothSidesPinsER12BothSidePins+0x30>)
    36c8:	4798      	blx	r3
}
    36ca:	46c0      	nop			; (mov r8, r8)
    36cc:	46bd      	mov	sp, r7
    36ce:	b002      	add	sp, #8
    36d0:	bd80      	pop	{r7, pc}
    36d2:	46c0      	nop			; (mov r8, r8)
    36d4:	0000550d 	.word	0x0000550d
    36d8:	000036dd 	.word	0x000036dd

000036dc <_ZN17LEDLighting_Class15ConfiguratePinsEv>:

void	LEDLighting_Class::ConfiguratePins(void){
    36dc:	b580      	push	{r7, lr}
    36de:	b082      	sub	sp, #8
    36e0:	af00      	add	r7, sp, #0
    36e2:	6078      	str	r0, [r7, #4]
	for (i = 0; i < totalPins; i++)
    36e4:	687b      	ldr	r3, [r7, #4]
    36e6:	22ec      	movs	r2, #236	; 0xec
    36e8:	2100      	movs	r1, #0
    36ea:	5099      	str	r1, [r3, r2]
    36ec:	687b      	ldr	r3, [r7, #4]
    36ee:	22ec      	movs	r2, #236	; 0xec
    36f0:	589b      	ldr	r3, [r3, r2]
    36f2:	687a      	ldr	r2, [r7, #4]
    36f4:	21e8      	movs	r1, #232	; 0xe8
    36f6:	5c52      	ldrb	r2, [r2, r1]
    36f8:	4293      	cmp	r3, r2
    36fa:	da5a      	bge.n	37b2 <_ZN17LEDLighting_Class15ConfiguratePinsEv+0xd6>
	{
		gpio_set_pin_direction(GPIO(pins.allPorts[i],pins.allPins[i]), GPIO_DIRECTION_OUT);
    36fc:	687b      	ldr	r3, [r7, #4]
    36fe:	22ec      	movs	r2, #236	; 0xec
    3700:	589b      	ldr	r3, [r3, r2]
    3702:	687a      	ldr	r2, [r7, #4]
    3704:	2174      	movs	r1, #116	; 0x74
    3706:	18d3      	adds	r3, r2, r3
    3708:	185b      	adds	r3, r3, r1
    370a:	781b      	ldrb	r3, [r3, #0]
    370c:	015b      	lsls	r3, r3, #5
    370e:	b2da      	uxtb	r2, r3
    3710:	687b      	ldr	r3, [r7, #4]
    3712:	21ec      	movs	r1, #236	; 0xec
    3714:	585b      	ldr	r3, [r3, r1]
    3716:	6879      	ldr	r1, [r7, #4]
    3718:	20ae      	movs	r0, #174	; 0xae
    371a:	18cb      	adds	r3, r1, r3
    371c:	181b      	adds	r3, r3, r0
    371e:	781b      	ldrb	r3, [r3, #0]
    3720:	211f      	movs	r1, #31
    3722:	400b      	ands	r3, r1
    3724:	b2db      	uxtb	r3, r3
    3726:	18d3      	adds	r3, r2, r3
    3728:	b2db      	uxtb	r3, r3
    372a:	2102      	movs	r1, #2
    372c:	0018      	movs	r0, r3
    372e:	4b23      	ldr	r3, [pc, #140]	; (37bc <_ZN17LEDLighting_Class15ConfiguratePinsEv+0xe0>)
    3730:	4798      	blx	r3
		gpio_set_pin_function(GPIO(pins.allPorts[i],pins.allPins[i]), GPIO_PIN_FUNCTION_OFF);
    3732:	687b      	ldr	r3, [r7, #4]
    3734:	22ec      	movs	r2, #236	; 0xec
    3736:	589b      	ldr	r3, [r3, r2]
    3738:	687a      	ldr	r2, [r7, #4]
    373a:	2174      	movs	r1, #116	; 0x74
    373c:	18d3      	adds	r3, r2, r3
    373e:	185b      	adds	r3, r3, r1
    3740:	781b      	ldrb	r3, [r3, #0]
    3742:	015b      	lsls	r3, r3, #5
    3744:	22ff      	movs	r2, #255	; 0xff
    3746:	401a      	ands	r2, r3
    3748:	687b      	ldr	r3, [r7, #4]
    374a:	21ec      	movs	r1, #236	; 0xec
    374c:	585b      	ldr	r3, [r3, r1]
    374e:	6879      	ldr	r1, [r7, #4]
    3750:	20ae      	movs	r0, #174	; 0xae
    3752:	18cb      	adds	r3, r1, r3
    3754:	181b      	adds	r3, r3, r0
    3756:	781b      	ldrb	r3, [r3, #0]
    3758:	0019      	movs	r1, r3
    375a:	231f      	movs	r3, #31
    375c:	400b      	ands	r3, r1
    375e:	18d2      	adds	r2, r2, r3
    3760:	2301      	movs	r3, #1
    3762:	425b      	negs	r3, r3
    3764:	0019      	movs	r1, r3
    3766:	0010      	movs	r0, r2
    3768:	4b15      	ldr	r3, [pc, #84]	; (37c0 <_ZN17LEDLighting_Class15ConfiguratePinsEv+0xe4>)
    376a:	4798      	blx	r3
		gpio_set_pin_level(GPIO(pins.allPorts[i],pins.allPins[i]),false);
    376c:	687b      	ldr	r3, [r7, #4]
    376e:	22ec      	movs	r2, #236	; 0xec
    3770:	589b      	ldr	r3, [r3, r2]
    3772:	687a      	ldr	r2, [r7, #4]
    3774:	2174      	movs	r1, #116	; 0x74
    3776:	18d3      	adds	r3, r2, r3
    3778:	185b      	adds	r3, r3, r1
    377a:	781b      	ldrb	r3, [r3, #0]
    377c:	015b      	lsls	r3, r3, #5
    377e:	b2da      	uxtb	r2, r3
    3780:	687b      	ldr	r3, [r7, #4]
    3782:	21ec      	movs	r1, #236	; 0xec
    3784:	585b      	ldr	r3, [r3, r1]
    3786:	6879      	ldr	r1, [r7, #4]
    3788:	20ae      	movs	r0, #174	; 0xae
    378a:	18cb      	adds	r3, r1, r3
    378c:	181b      	adds	r3, r3, r0
    378e:	781b      	ldrb	r3, [r3, #0]
    3790:	211f      	movs	r1, #31
    3792:	400b      	ands	r3, r1
    3794:	b2db      	uxtb	r3, r3
    3796:	18d3      	adds	r3, r2, r3
    3798:	b2db      	uxtb	r3, r3
    379a:	2100      	movs	r1, #0
    379c:	0018      	movs	r0, r3
    379e:	4b09      	ldr	r3, [pc, #36]	; (37c4 <_ZN17LEDLighting_Class15ConfiguratePinsEv+0xe8>)
    37a0:	4798      	blx	r3
	for (i = 0; i < totalPins; i++)
    37a2:	687b      	ldr	r3, [r7, #4]
    37a4:	22ec      	movs	r2, #236	; 0xec
    37a6:	589b      	ldr	r3, [r3, r2]
    37a8:	1c5a      	adds	r2, r3, #1
    37aa:	687b      	ldr	r3, [r7, #4]
    37ac:	21ec      	movs	r1, #236	; 0xec
    37ae:	505a      	str	r2, [r3, r1]
    37b0:	e79c      	b.n	36ec <_ZN17LEDLighting_Class15ConfiguratePinsEv+0x10>
	}
}
    37b2:	46c0      	nop			; (mov r8, r8)
    37b4:	46bd      	mov	sp, r7
    37b6:	b002      	add	sp, #8
    37b8:	bd80      	pop	{r7, pc}
    37ba:	46c0      	nop			; (mov r8, r8)
    37bc:	00003339 	.word	0x00003339
    37c0:	00003315 	.word	0x00003315
    37c4:	00003379 	.word	0x00003379

000037c8 <_ZN17LEDLighting_Class7IsGreenEh>:
bool	LEDLighting_Class::IsGreen(uint8_t l){
    37c8:	b580      	push	{r7, lr}
    37ca:	b082      	sub	sp, #8
    37cc:	af00      	add	r7, sp, #0
    37ce:	6078      	str	r0, [r7, #4]
    37d0:	000a      	movs	r2, r1
    37d2:	1cfb      	adds	r3, r7, #3
    37d4:	701a      	strb	r2, [r3, #0]
	return	localState.color[l]==0;
    37d6:	1cfb      	adds	r3, r7, #3
    37d8:	781a      	ldrb	r2, [r3, #0]
    37da:	6879      	ldr	r1, [r7, #4]
    37dc:	239d      	movs	r3, #157	; 0x9d
    37de:	005b      	lsls	r3, r3, #1
    37e0:	188a      	adds	r2, r1, r2
    37e2:	18d3      	adds	r3, r2, r3
    37e4:	781b      	ldrb	r3, [r3, #0]
    37e6:	425a      	negs	r2, r3
    37e8:	4153      	adcs	r3, r2
    37ea:	b2db      	uxtb	r3, r3
}
    37ec:	0018      	movs	r0, r3
    37ee:	46bd      	mov	sp, r7
    37f0:	b002      	add	sp, #8
    37f2:	bd80      	pop	{r7, pc}

000037f4 <_ZN17LEDLighting_Class5IsRedEh>:
bool	LEDLighting_Class::IsRed(uint8_t l){
    37f4:	b580      	push	{r7, lr}
    37f6:	b082      	sub	sp, #8
    37f8:	af00      	add	r7, sp, #0
    37fa:	6078      	str	r0, [r7, #4]
    37fc:	000a      	movs	r2, r1
    37fe:	1cfb      	adds	r3, r7, #3
    3800:	701a      	strb	r2, [r3, #0]
	return	localState.color[l]==1;
    3802:	1cfb      	adds	r3, r7, #3
    3804:	781a      	ldrb	r2, [r3, #0]
    3806:	6879      	ldr	r1, [r7, #4]
    3808:	239d      	movs	r3, #157	; 0x9d
    380a:	005b      	lsls	r3, r3, #1
    380c:	188a      	adds	r2, r1, r2
    380e:	18d3      	adds	r3, r2, r3
    3810:	781b      	ldrb	r3, [r3, #0]
    3812:	3b01      	subs	r3, #1
    3814:	425a      	negs	r2, r3
    3816:	4153      	adcs	r3, r2
    3818:	b2db      	uxtb	r3, r3
}
    381a:	0018      	movs	r0, r3
    381c:	46bd      	mov	sp, r7
    381e:	b002      	add	sp, #8
    3820:	bd80      	pop	{r7, pc}

00003822 <_ZN17LEDLighting_Class6IsBlueEh>:
bool	LEDLighting_Class::IsBlue(uint8_t l){
    3822:	b580      	push	{r7, lr}
    3824:	b082      	sub	sp, #8
    3826:	af00      	add	r7, sp, #0
    3828:	6078      	str	r0, [r7, #4]
    382a:	000a      	movs	r2, r1
    382c:	1cfb      	adds	r3, r7, #3
    382e:	701a      	strb	r2, [r3, #0]
	return	localState.color[l]==2;
    3830:	1cfb      	adds	r3, r7, #3
    3832:	781a      	ldrb	r2, [r3, #0]
    3834:	6879      	ldr	r1, [r7, #4]
    3836:	239d      	movs	r3, #157	; 0x9d
    3838:	005b      	lsls	r3, r3, #1
    383a:	188a      	adds	r2, r1, r2
    383c:	18d3      	adds	r3, r2, r3
    383e:	781b      	ldrb	r3, [r3, #0]
    3840:	3b02      	subs	r3, #2
    3842:	425a      	negs	r2, r3
    3844:	4153      	adcs	r3, r2
    3846:	b2db      	uxtb	r3, r3
}
    3848:	0018      	movs	r0, r3
    384a:	46bd      	mov	sp, r7
    384c:	b002      	add	sp, #8
    384e:	bd80      	pop	{r7, pc}

00003850 <hri_port_set_DIR_reg>:
{
    3850:	b580      	push	{r7, lr}
    3852:	b084      	sub	sp, #16
    3854:	af00      	add	r7, sp, #0
    3856:	60f8      	str	r0, [r7, #12]
    3858:	607a      	str	r2, [r7, #4]
    385a:	230b      	movs	r3, #11
    385c:	18fb      	adds	r3, r7, r3
    385e:	1c0a      	adds	r2, r1, #0
    3860:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3862:	230b      	movs	r3, #11
    3864:	18fb      	adds	r3, r7, r3
    3866:	781b      	ldrb	r3, [r3, #0]
    3868:	68fa      	ldr	r2, [r7, #12]
    386a:	01db      	lsls	r3, r3, #7
    386c:	18d3      	adds	r3, r2, r3
    386e:	3308      	adds	r3, #8
    3870:	687a      	ldr	r2, [r7, #4]
    3872:	601a      	str	r2, [r3, #0]
}
    3874:	46c0      	nop			; (mov r8, r8)
    3876:	46bd      	mov	sp, r7
    3878:	b004      	add	sp, #16
    387a:	bd80      	pop	{r7, pc}

0000387c <hri_port_read_DIR_reg>:
{
    387c:	b580      	push	{r7, lr}
    387e:	b082      	sub	sp, #8
    3880:	af00      	add	r7, sp, #0
    3882:	6078      	str	r0, [r7, #4]
    3884:	000a      	movs	r2, r1
    3886:	1cfb      	adds	r3, r7, #3
    3888:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    388a:	1cfb      	adds	r3, r7, #3
    388c:	781a      	ldrb	r2, [r3, #0]
    388e:	687b      	ldr	r3, [r7, #4]
    3890:	01d2      	lsls	r2, r2, #7
    3892:	58d3      	ldr	r3, [r2, r3]
}
    3894:	0018      	movs	r0, r3
    3896:	46bd      	mov	sp, r7
    3898:	b002      	add	sp, #8
    389a:	bd80      	pop	{r7, pc}

0000389c <hri_port_clear_DIR_reg>:
{
    389c:	b580      	push	{r7, lr}
    389e:	b084      	sub	sp, #16
    38a0:	af00      	add	r7, sp, #0
    38a2:	60f8      	str	r0, [r7, #12]
    38a4:	607a      	str	r2, [r7, #4]
    38a6:	230b      	movs	r3, #11
    38a8:	18fb      	adds	r3, r7, r3
    38aa:	1c0a      	adds	r2, r1, #0
    38ac:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    38ae:	230b      	movs	r3, #11
    38b0:	18fb      	adds	r3, r7, r3
    38b2:	781b      	ldrb	r3, [r3, #0]
    38b4:	68fa      	ldr	r2, [r7, #12]
    38b6:	01db      	lsls	r3, r3, #7
    38b8:	18d3      	adds	r3, r2, r3
    38ba:	3304      	adds	r3, #4
    38bc:	687a      	ldr	r2, [r7, #4]
    38be:	601a      	str	r2, [r3, #0]
}
    38c0:	46c0      	nop			; (mov r8, r8)
    38c2:	46bd      	mov	sp, r7
    38c4:	b004      	add	sp, #16
    38c6:	bd80      	pop	{r7, pc}

000038c8 <hri_port_set_OUT_reg>:
{
    38c8:	b580      	push	{r7, lr}
    38ca:	b084      	sub	sp, #16
    38cc:	af00      	add	r7, sp, #0
    38ce:	60f8      	str	r0, [r7, #12]
    38d0:	607a      	str	r2, [r7, #4]
    38d2:	230b      	movs	r3, #11
    38d4:	18fb      	adds	r3, r7, r3
    38d6:	1c0a      	adds	r2, r1, #0
    38d8:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    38da:	230b      	movs	r3, #11
    38dc:	18fb      	adds	r3, r7, r3
    38de:	781b      	ldrb	r3, [r3, #0]
    38e0:	68fa      	ldr	r2, [r7, #12]
    38e2:	01db      	lsls	r3, r3, #7
    38e4:	18d3      	adds	r3, r2, r3
    38e6:	3318      	adds	r3, #24
    38e8:	687a      	ldr	r2, [r7, #4]
    38ea:	601a      	str	r2, [r3, #0]
}
    38ec:	46c0      	nop			; (mov r8, r8)
    38ee:	46bd      	mov	sp, r7
    38f0:	b004      	add	sp, #16
    38f2:	bd80      	pop	{r7, pc}

000038f4 <hri_port_read_OUT_reg>:
{
    38f4:	b580      	push	{r7, lr}
    38f6:	b082      	sub	sp, #8
    38f8:	af00      	add	r7, sp, #0
    38fa:	6078      	str	r0, [r7, #4]
    38fc:	000a      	movs	r2, r1
    38fe:	1cfb      	adds	r3, r7, #3
    3900:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3902:	1cfb      	adds	r3, r7, #3
    3904:	781b      	ldrb	r3, [r3, #0]
    3906:	687a      	ldr	r2, [r7, #4]
    3908:	01db      	lsls	r3, r3, #7
    390a:	18d3      	adds	r3, r2, r3
    390c:	3310      	adds	r3, #16
    390e:	681b      	ldr	r3, [r3, #0]
}
    3910:	0018      	movs	r0, r3
    3912:	46bd      	mov	sp, r7
    3914:	b002      	add	sp, #8
    3916:	bd80      	pop	{r7, pc}

00003918 <hri_port_clear_OUT_reg>:
{
    3918:	b580      	push	{r7, lr}
    391a:	b084      	sub	sp, #16
    391c:	af00      	add	r7, sp, #0
    391e:	60f8      	str	r0, [r7, #12]
    3920:	607a      	str	r2, [r7, #4]
    3922:	230b      	movs	r3, #11
    3924:	18fb      	adds	r3, r7, r3
    3926:	1c0a      	adds	r2, r1, #0
    3928:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    392a:	230b      	movs	r3, #11
    392c:	18fb      	adds	r3, r7, r3
    392e:	781b      	ldrb	r3, [r3, #0]
    3930:	68fa      	ldr	r2, [r7, #12]
    3932:	01db      	lsls	r3, r3, #7
    3934:	18d3      	adds	r3, r2, r3
    3936:	3314      	adds	r3, #20
    3938:	687a      	ldr	r2, [r7, #4]
    393a:	601a      	str	r2, [r3, #0]
}
    393c:	46c0      	nop			; (mov r8, r8)
    393e:	46bd      	mov	sp, r7
    3940:	b004      	add	sp, #16
    3942:	bd80      	pop	{r7, pc}

00003944 <hri_port_read_IN_reg>:
{
    3944:	b580      	push	{r7, lr}
    3946:	b082      	sub	sp, #8
    3948:	af00      	add	r7, sp, #0
    394a:	6078      	str	r0, [r7, #4]
    394c:	000a      	movs	r2, r1
    394e:	1cfb      	adds	r3, r7, #3
    3950:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3952:	1cfb      	adds	r3, r7, #3
    3954:	781b      	ldrb	r3, [r3, #0]
    3956:	687a      	ldr	r2, [r7, #4]
    3958:	01db      	lsls	r3, r3, #7
    395a:	18d3      	adds	r3, r2, r3
    395c:	3320      	adds	r3, #32
    395e:	681b      	ldr	r3, [r3, #0]
}
    3960:	0018      	movs	r0, r3
    3962:	46bd      	mov	sp, r7
    3964:	b002      	add	sp, #8
    3966:	bd80      	pop	{r7, pc}

00003968 <hri_port_write_PMUX_PMUXE_bf>:
{
    3968:	b590      	push	{r4, r7, lr}
    396a:	b085      	sub	sp, #20
    396c:	af00      	add	r7, sp, #0
    396e:	6078      	str	r0, [r7, #4]
    3970:	000c      	movs	r4, r1
    3972:	0010      	movs	r0, r2
    3974:	0019      	movs	r1, r3
    3976:	1cfb      	adds	r3, r7, #3
    3978:	1c22      	adds	r2, r4, #0
    397a:	701a      	strb	r2, [r3, #0]
    397c:	1cbb      	adds	r3, r7, #2
    397e:	1c02      	adds	r2, r0, #0
    3980:	701a      	strb	r2, [r3, #0]
    3982:	1c7b      	adds	r3, r7, #1
    3984:	1c0a      	adds	r2, r1, #0
    3986:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3988:	1cfb      	adds	r3, r7, #3
    398a:	7819      	ldrb	r1, [r3, #0]
    398c:	1cbb      	adds	r3, r7, #2
    398e:	781a      	ldrb	r2, [r3, #0]
    3990:	230f      	movs	r3, #15
    3992:	18fb      	adds	r3, r7, r3
    3994:	6878      	ldr	r0, [r7, #4]
    3996:	2430      	movs	r4, #48	; 0x30
    3998:	01c9      	lsls	r1, r1, #7
    399a:	1841      	adds	r1, r0, r1
    399c:	188a      	adds	r2, r1, r2
    399e:	1912      	adds	r2, r2, r4
    39a0:	7812      	ldrb	r2, [r2, #0]
    39a2:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    39a4:	230f      	movs	r3, #15
    39a6:	18fb      	adds	r3, r7, r3
    39a8:	220f      	movs	r2, #15
    39aa:	18ba      	adds	r2, r7, r2
    39ac:	7812      	ldrb	r2, [r2, #0]
    39ae:	210f      	movs	r1, #15
    39b0:	438a      	bics	r2, r1
    39b2:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
    39b4:	1c7b      	adds	r3, r7, #1
    39b6:	781b      	ldrb	r3, [r3, #0]
    39b8:	220f      	movs	r2, #15
    39ba:	4013      	ands	r3, r2
    39bc:	b2d9      	uxtb	r1, r3
    39be:	230f      	movs	r3, #15
    39c0:	18fb      	adds	r3, r7, r3
    39c2:	220f      	movs	r2, #15
    39c4:	18ba      	adds	r2, r7, r2
    39c6:	7812      	ldrb	r2, [r2, #0]
    39c8:	430a      	orrs	r2, r1
    39ca:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    39cc:	1cfb      	adds	r3, r7, #3
    39ce:	781a      	ldrb	r2, [r3, #0]
    39d0:	1cbb      	adds	r3, r7, #2
    39d2:	781b      	ldrb	r3, [r3, #0]
    39d4:	6879      	ldr	r1, [r7, #4]
    39d6:	2030      	movs	r0, #48	; 0x30
    39d8:	01d2      	lsls	r2, r2, #7
    39da:	188a      	adds	r2, r1, r2
    39dc:	18d3      	adds	r3, r2, r3
    39de:	181b      	adds	r3, r3, r0
    39e0:	220f      	movs	r2, #15
    39e2:	18ba      	adds	r2, r7, r2
    39e4:	7812      	ldrb	r2, [r2, #0]
    39e6:	701a      	strb	r2, [r3, #0]
}
    39e8:	46c0      	nop			; (mov r8, r8)
    39ea:	46bd      	mov	sp, r7
    39ec:	b005      	add	sp, #20
    39ee:	bd90      	pop	{r4, r7, pc}

000039f0 <hri_port_write_PMUX_PMUXO_bf>:
{
    39f0:	b590      	push	{r4, r7, lr}
    39f2:	b085      	sub	sp, #20
    39f4:	af00      	add	r7, sp, #0
    39f6:	6078      	str	r0, [r7, #4]
    39f8:	000c      	movs	r4, r1
    39fa:	0010      	movs	r0, r2
    39fc:	0019      	movs	r1, r3
    39fe:	1cfb      	adds	r3, r7, #3
    3a00:	1c22      	adds	r2, r4, #0
    3a02:	701a      	strb	r2, [r3, #0]
    3a04:	1cbb      	adds	r3, r7, #2
    3a06:	1c02      	adds	r2, r0, #0
    3a08:	701a      	strb	r2, [r3, #0]
    3a0a:	1c7b      	adds	r3, r7, #1
    3a0c:	1c0a      	adds	r2, r1, #0
    3a0e:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3a10:	1cfb      	adds	r3, r7, #3
    3a12:	7819      	ldrb	r1, [r3, #0]
    3a14:	1cbb      	adds	r3, r7, #2
    3a16:	781a      	ldrb	r2, [r3, #0]
    3a18:	230f      	movs	r3, #15
    3a1a:	18fb      	adds	r3, r7, r3
    3a1c:	6878      	ldr	r0, [r7, #4]
    3a1e:	2430      	movs	r4, #48	; 0x30
    3a20:	01c9      	lsls	r1, r1, #7
    3a22:	1841      	adds	r1, r0, r1
    3a24:	188a      	adds	r2, r1, r2
    3a26:	1912      	adds	r2, r2, r4
    3a28:	7812      	ldrb	r2, [r2, #0]
    3a2a:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3a2c:	230f      	movs	r3, #15
    3a2e:	18fb      	adds	r3, r7, r3
    3a30:	220f      	movs	r2, #15
    3a32:	18ba      	adds	r2, r7, r2
    3a34:	7812      	ldrb	r2, [r2, #0]
    3a36:	210f      	movs	r1, #15
    3a38:	400a      	ands	r2, r1
    3a3a:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
    3a3c:	1c7b      	adds	r3, r7, #1
    3a3e:	781b      	ldrb	r3, [r3, #0]
    3a40:	011b      	lsls	r3, r3, #4
    3a42:	b2d9      	uxtb	r1, r3
    3a44:	230f      	movs	r3, #15
    3a46:	18fb      	adds	r3, r7, r3
    3a48:	220f      	movs	r2, #15
    3a4a:	18ba      	adds	r2, r7, r2
    3a4c:	7812      	ldrb	r2, [r2, #0]
    3a4e:	430a      	orrs	r2, r1
    3a50:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3a52:	1cfb      	adds	r3, r7, #3
    3a54:	781a      	ldrb	r2, [r3, #0]
    3a56:	1cbb      	adds	r3, r7, #2
    3a58:	781b      	ldrb	r3, [r3, #0]
    3a5a:	6879      	ldr	r1, [r7, #4]
    3a5c:	2030      	movs	r0, #48	; 0x30
    3a5e:	01d2      	lsls	r2, r2, #7
    3a60:	188a      	adds	r2, r1, r2
    3a62:	18d3      	adds	r3, r2, r3
    3a64:	181b      	adds	r3, r3, r0
    3a66:	220f      	movs	r2, #15
    3a68:	18ba      	adds	r2, r7, r2
    3a6a:	7812      	ldrb	r2, [r2, #0]
    3a6c:	701a      	strb	r2, [r3, #0]
}
    3a6e:	46c0      	nop			; (mov r8, r8)
    3a70:	46bd      	mov	sp, r7
    3a72:	b005      	add	sp, #20
    3a74:	bd90      	pop	{r4, r7, pc}

00003a76 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    3a76:	b590      	push	{r4, r7, lr}
    3a78:	b085      	sub	sp, #20
    3a7a:	af00      	add	r7, sp, #0
    3a7c:	6078      	str	r0, [r7, #4]
    3a7e:	000c      	movs	r4, r1
    3a80:	0010      	movs	r0, r2
    3a82:	0019      	movs	r1, r3
    3a84:	1cfb      	adds	r3, r7, #3
    3a86:	1c22      	adds	r2, r4, #0
    3a88:	701a      	strb	r2, [r3, #0]
    3a8a:	1cbb      	adds	r3, r7, #2
    3a8c:	1c02      	adds	r2, r0, #0
    3a8e:	701a      	strb	r2, [r3, #0]
    3a90:	1c7b      	adds	r3, r7, #1
    3a92:	1c0a      	adds	r2, r1, #0
    3a94:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3a96:	1cfb      	adds	r3, r7, #3
    3a98:	7819      	ldrb	r1, [r3, #0]
    3a9a:	1cbb      	adds	r3, r7, #2
    3a9c:	781a      	ldrb	r2, [r3, #0]
    3a9e:	230f      	movs	r3, #15
    3aa0:	18fb      	adds	r3, r7, r3
    3aa2:	6878      	ldr	r0, [r7, #4]
    3aa4:	2440      	movs	r4, #64	; 0x40
    3aa6:	01c9      	lsls	r1, r1, #7
    3aa8:	1841      	adds	r1, r0, r1
    3aaa:	188a      	adds	r2, r1, r2
    3aac:	1912      	adds	r2, r2, r4
    3aae:	7812      	ldrb	r2, [r2, #0]
    3ab0:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3ab2:	230f      	movs	r3, #15
    3ab4:	18fb      	adds	r3, r7, r3
    3ab6:	220f      	movs	r2, #15
    3ab8:	18ba      	adds	r2, r7, r2
    3aba:	7812      	ldrb	r2, [r2, #0]
    3abc:	2101      	movs	r1, #1
    3abe:	438a      	bics	r2, r1
    3ac0:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3ac2:	1c7b      	adds	r3, r7, #1
    3ac4:	7819      	ldrb	r1, [r3, #0]
    3ac6:	230f      	movs	r3, #15
    3ac8:	18fb      	adds	r3, r7, r3
    3aca:	220f      	movs	r2, #15
    3acc:	18ba      	adds	r2, r7, r2
    3ace:	7812      	ldrb	r2, [r2, #0]
    3ad0:	430a      	orrs	r2, r1
    3ad2:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3ad4:	1cfb      	adds	r3, r7, #3
    3ad6:	781a      	ldrb	r2, [r3, #0]
    3ad8:	1cbb      	adds	r3, r7, #2
    3ada:	781b      	ldrb	r3, [r3, #0]
    3adc:	6879      	ldr	r1, [r7, #4]
    3ade:	2040      	movs	r0, #64	; 0x40
    3ae0:	01d2      	lsls	r2, r2, #7
    3ae2:	188a      	adds	r2, r1, r2
    3ae4:	18d3      	adds	r3, r2, r3
    3ae6:	181b      	adds	r3, r3, r0
    3ae8:	220f      	movs	r2, #15
    3aea:	18ba      	adds	r2, r7, r2
    3aec:	7812      	ldrb	r2, [r2, #0]
    3aee:	701a      	strb	r2, [r3, #0]
}
    3af0:	46c0      	nop			; (mov r8, r8)
    3af2:	46bd      	mov	sp, r7
    3af4:	b005      	add	sp, #20
    3af6:	bd90      	pop	{r4, r7, pc}

00003af8 <hri_port_set_PINCFG_PULLEN_bit>:
{
    3af8:	b5b0      	push	{r4, r5, r7, lr}
    3afa:	b082      	sub	sp, #8
    3afc:	af00      	add	r7, sp, #0
    3afe:	6078      	str	r0, [r7, #4]
    3b00:	0008      	movs	r0, r1
    3b02:	0011      	movs	r1, r2
    3b04:	1cfb      	adds	r3, r7, #3
    3b06:	1c02      	adds	r2, r0, #0
    3b08:	701a      	strb	r2, [r3, #0]
    3b0a:	1cbb      	adds	r3, r7, #2
    3b0c:	1c0a      	adds	r2, r1, #0
    3b0e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3b10:	1cfb      	adds	r3, r7, #3
    3b12:	781a      	ldrb	r2, [r3, #0]
    3b14:	1cbb      	adds	r3, r7, #2
    3b16:	781b      	ldrb	r3, [r3, #0]
    3b18:	1cf9      	adds	r1, r7, #3
    3b1a:	7808      	ldrb	r0, [r1, #0]
    3b1c:	1cb9      	adds	r1, r7, #2
    3b1e:	7809      	ldrb	r1, [r1, #0]
    3b20:	687c      	ldr	r4, [r7, #4]
    3b22:	2540      	movs	r5, #64	; 0x40
    3b24:	01c0      	lsls	r0, r0, #7
    3b26:	1820      	adds	r0, r4, r0
    3b28:	1841      	adds	r1, r0, r1
    3b2a:	1949      	adds	r1, r1, r5
    3b2c:	7809      	ldrb	r1, [r1, #0]
    3b2e:	b2c9      	uxtb	r1, r1
    3b30:	2004      	movs	r0, #4
    3b32:	4301      	orrs	r1, r0
    3b34:	b2cc      	uxtb	r4, r1
    3b36:	6879      	ldr	r1, [r7, #4]
    3b38:	2040      	movs	r0, #64	; 0x40
    3b3a:	01d2      	lsls	r2, r2, #7
    3b3c:	188a      	adds	r2, r1, r2
    3b3e:	18d3      	adds	r3, r2, r3
    3b40:	181b      	adds	r3, r3, r0
    3b42:	1c22      	adds	r2, r4, #0
    3b44:	701a      	strb	r2, [r3, #0]
}
    3b46:	46c0      	nop			; (mov r8, r8)
    3b48:	46bd      	mov	sp, r7
    3b4a:	b002      	add	sp, #8
    3b4c:	bdb0      	pop	{r4, r5, r7, pc}

00003b4e <hri_port_clear_PINCFG_PULLEN_bit>:
{
    3b4e:	b5b0      	push	{r4, r5, r7, lr}
    3b50:	b082      	sub	sp, #8
    3b52:	af00      	add	r7, sp, #0
    3b54:	6078      	str	r0, [r7, #4]
    3b56:	0008      	movs	r0, r1
    3b58:	0011      	movs	r1, r2
    3b5a:	1cfb      	adds	r3, r7, #3
    3b5c:	1c02      	adds	r2, r0, #0
    3b5e:	701a      	strb	r2, [r3, #0]
    3b60:	1cbb      	adds	r3, r7, #2
    3b62:	1c0a      	adds	r2, r1, #0
    3b64:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    3b66:	1cfb      	adds	r3, r7, #3
    3b68:	781a      	ldrb	r2, [r3, #0]
    3b6a:	1cbb      	adds	r3, r7, #2
    3b6c:	781b      	ldrb	r3, [r3, #0]
    3b6e:	1cf9      	adds	r1, r7, #3
    3b70:	7808      	ldrb	r0, [r1, #0]
    3b72:	1cb9      	adds	r1, r7, #2
    3b74:	7809      	ldrb	r1, [r1, #0]
    3b76:	687c      	ldr	r4, [r7, #4]
    3b78:	2540      	movs	r5, #64	; 0x40
    3b7a:	01c0      	lsls	r0, r0, #7
    3b7c:	1820      	adds	r0, r4, r0
    3b7e:	1841      	adds	r1, r0, r1
    3b80:	1949      	adds	r1, r1, r5
    3b82:	7809      	ldrb	r1, [r1, #0]
    3b84:	b2c9      	uxtb	r1, r1
    3b86:	2004      	movs	r0, #4
    3b88:	4381      	bics	r1, r0
    3b8a:	b2cc      	uxtb	r4, r1
    3b8c:	6879      	ldr	r1, [r7, #4]
    3b8e:	2040      	movs	r0, #64	; 0x40
    3b90:	01d2      	lsls	r2, r2, #7
    3b92:	188a      	adds	r2, r1, r2
    3b94:	18d3      	adds	r3, r2, r3
    3b96:	181b      	adds	r3, r3, r0
    3b98:	1c22      	adds	r2, r4, #0
    3b9a:	701a      	strb	r2, [r3, #0]
}
    3b9c:	46c0      	nop			; (mov r8, r8)
    3b9e:	46bd      	mov	sp, r7
    3ba0:	b002      	add	sp, #8
    3ba2:	bdb0      	pop	{r4, r5, r7, pc}

00003ba4 <hri_port_write_WRCONFIG_reg>:
{
    3ba4:	b580      	push	{r7, lr}
    3ba6:	b084      	sub	sp, #16
    3ba8:	af00      	add	r7, sp, #0
    3baa:	60f8      	str	r0, [r7, #12]
    3bac:	607a      	str	r2, [r7, #4]
    3bae:	230b      	movs	r3, #11
    3bb0:	18fb      	adds	r3, r7, r3
    3bb2:	1c0a      	adds	r2, r1, #0
    3bb4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3bb6:	230b      	movs	r3, #11
    3bb8:	18fb      	adds	r3, r7, r3
    3bba:	781b      	ldrb	r3, [r3, #0]
    3bbc:	68fa      	ldr	r2, [r7, #12]
    3bbe:	01db      	lsls	r3, r3, #7
    3bc0:	18d3      	adds	r3, r2, r3
    3bc2:	3328      	adds	r3, #40	; 0x28
    3bc4:	687a      	ldr	r2, [r7, #4]
    3bc6:	601a      	str	r2, [r3, #0]
}
    3bc8:	46c0      	nop			; (mov r8, r8)
    3bca:	46bd      	mov	sp, r7
    3bcc:	b004      	add	sp, #16
    3bce:	bd80      	pop	{r7, pc}

00003bd0 <_gpio_set_direction>:
{
    3bd0:	b580      	push	{r7, lr}
    3bd2:	b082      	sub	sp, #8
    3bd4:	af00      	add	r7, sp, #0
    3bd6:	6039      	str	r1, [r7, #0]
    3bd8:	0011      	movs	r1, r2
    3bda:	1dfb      	adds	r3, r7, #7
    3bdc:	1c02      	adds	r2, r0, #0
    3bde:	701a      	strb	r2, [r3, #0]
    3be0:	1dbb      	adds	r3, r7, #6
    3be2:	1c0a      	adds	r2, r1, #0
    3be4:	701a      	strb	r2, [r3, #0]
	switch (direction) {
    3be6:	1dbb      	adds	r3, r7, #6
    3be8:	781b      	ldrb	r3, [r3, #0]
    3bea:	2b01      	cmp	r3, #1
    3bec:	d023      	beq.n	3c36 <_gpio_set_direction+0x66>
    3bee:	2b02      	cmp	r3, #2
    3bf0:	d03f      	beq.n	3c72 <_gpio_set_direction+0xa2>
    3bf2:	2b00      	cmp	r3, #0
    3bf4:	d15d      	bne.n	3cb2 <_gpio_set_direction+0xe2>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    3bf6:	683a      	ldr	r2, [r7, #0]
    3bf8:	1dfb      	adds	r3, r7, #7
    3bfa:	7819      	ldrb	r1, [r3, #0]
    3bfc:	23c0      	movs	r3, #192	; 0xc0
    3bfe:	05db      	lsls	r3, r3, #23
    3c00:	0018      	movs	r0, r3
    3c02:	4b31      	ldr	r3, [pc, #196]	; (3cc8 <_gpio_set_direction+0xf8>)
    3c04:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    3c06:	683b      	ldr	r3, [r7, #0]
    3c08:	041b      	lsls	r3, r3, #16
    3c0a:	0c1b      	lsrs	r3, r3, #16
    3c0c:	2280      	movs	r2, #128	; 0x80
    3c0e:	05d2      	lsls	r2, r2, #23
    3c10:	431a      	orrs	r2, r3
    3c12:	1dfb      	adds	r3, r7, #7
    3c14:	781b      	ldrb	r3, [r3, #0]
    3c16:	482d      	ldr	r0, [pc, #180]	; (3ccc <_gpio_set_direction+0xfc>)
    3c18:	0019      	movs	r1, r3
    3c1a:	4b2d      	ldr	r3, [pc, #180]	; (3cd0 <_gpio_set_direction+0x100>)
    3c1c:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3c1e:	683b      	ldr	r3, [r7, #0]
    3c20:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    3c22:	22c0      	movs	r2, #192	; 0xc0
    3c24:	0612      	lsls	r2, r2, #24
    3c26:	431a      	orrs	r2, r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3c28:	1dfb      	adds	r3, r7, #7
    3c2a:	781b      	ldrb	r3, [r3, #0]
    3c2c:	4827      	ldr	r0, [pc, #156]	; (3ccc <_gpio_set_direction+0xfc>)
    3c2e:	0019      	movs	r1, r3
    3c30:	4b27      	ldr	r3, [pc, #156]	; (3cd0 <_gpio_set_direction+0x100>)
    3c32:	4798      	blx	r3
		break;
    3c34:	e043      	b.n	3cbe <_gpio_set_direction+0xee>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    3c36:	683a      	ldr	r2, [r7, #0]
    3c38:	1dfb      	adds	r3, r7, #7
    3c3a:	7819      	ldrb	r1, [r3, #0]
    3c3c:	23c0      	movs	r3, #192	; 0xc0
    3c3e:	05db      	lsls	r3, r3, #23
    3c40:	0018      	movs	r0, r3
    3c42:	4b21      	ldr	r3, [pc, #132]	; (3cc8 <_gpio_set_direction+0xf8>)
    3c44:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    3c46:	683b      	ldr	r3, [r7, #0]
    3c48:	041b      	lsls	r3, r3, #16
    3c4a:	0c1b      	lsrs	r3, r3, #16
    3c4c:	4a21      	ldr	r2, [pc, #132]	; (3cd4 <_gpio_set_direction+0x104>)
    3c4e:	431a      	orrs	r2, r3
    3c50:	1dfb      	adds	r3, r7, #7
    3c52:	781b      	ldrb	r3, [r3, #0]
    3c54:	481d      	ldr	r0, [pc, #116]	; (3ccc <_gpio_set_direction+0xfc>)
    3c56:	0019      	movs	r1, r3
    3c58:	4b1d      	ldr	r3, [pc, #116]	; (3cd0 <_gpio_set_direction+0x100>)
    3c5a:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    3c5c:	683b      	ldr	r3, [r7, #0]
    3c5e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    3c60:	4a1d      	ldr	r2, [pc, #116]	; (3cd8 <_gpio_set_direction+0x108>)
    3c62:	431a      	orrs	r2, r3
		                                | ((mask & 0xffff0000) >> 16));
    3c64:	1dfb      	adds	r3, r7, #7
    3c66:	781b      	ldrb	r3, [r3, #0]
    3c68:	4818      	ldr	r0, [pc, #96]	; (3ccc <_gpio_set_direction+0xfc>)
    3c6a:	0019      	movs	r1, r3
    3c6c:	4b18      	ldr	r3, [pc, #96]	; (3cd0 <_gpio_set_direction+0x100>)
    3c6e:	4798      	blx	r3
		break;
    3c70:	e025      	b.n	3cbe <_gpio_set_direction+0xee>
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
    3c72:	683a      	ldr	r2, [r7, #0]
    3c74:	1dfb      	adds	r3, r7, #7
    3c76:	7819      	ldrb	r1, [r3, #0]
    3c78:	23c0      	movs	r3, #192	; 0xc0
    3c7a:	05db      	lsls	r3, r3, #23
    3c7c:	0018      	movs	r0, r3
    3c7e:	4b17      	ldr	r3, [pc, #92]	; (3cdc <_gpio_set_direction+0x10c>)
    3c80:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    3c82:	683b      	ldr	r3, [r7, #0]
    3c84:	041b      	lsls	r3, r3, #16
    3c86:	0c1b      	lsrs	r3, r3, #16
    3c88:	2280      	movs	r2, #128	; 0x80
    3c8a:	05d2      	lsls	r2, r2, #23
    3c8c:	431a      	orrs	r2, r3
    3c8e:	1dfb      	adds	r3, r7, #7
    3c90:	781b      	ldrb	r3, [r3, #0]
    3c92:	480e      	ldr	r0, [pc, #56]	; (3ccc <_gpio_set_direction+0xfc>)
    3c94:	0019      	movs	r1, r3
    3c96:	4b0e      	ldr	r3, [pc, #56]	; (3cd0 <_gpio_set_direction+0x100>)
    3c98:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3c9a:	683b      	ldr	r3, [r7, #0]
    3c9c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    3c9e:	22c0      	movs	r2, #192	; 0xc0
    3ca0:	0612      	lsls	r2, r2, #24
    3ca2:	431a      	orrs	r2, r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3ca4:	1dfb      	adds	r3, r7, #7
    3ca6:	781b      	ldrb	r3, [r3, #0]
    3ca8:	4808      	ldr	r0, [pc, #32]	; (3ccc <_gpio_set_direction+0xfc>)
    3caa:	0019      	movs	r1, r3
    3cac:	4b08      	ldr	r3, [pc, #32]	; (3cd0 <_gpio_set_direction+0x100>)
    3cae:	4798      	blx	r3
		break;
    3cb0:	e005      	b.n	3cbe <_gpio_set_direction+0xee>
		ASSERT(false);
    3cb2:	4b0b      	ldr	r3, [pc, #44]	; (3ce0 <_gpio_set_direction+0x110>)
    3cb4:	2245      	movs	r2, #69	; 0x45
    3cb6:	0019      	movs	r1, r3
    3cb8:	2000      	movs	r0, #0
    3cba:	4b0a      	ldr	r3, [pc, #40]	; (3ce4 <_gpio_set_direction+0x114>)
    3cbc:	4798      	blx	r3
}
    3cbe:	46c0      	nop			; (mov r8, r8)
    3cc0:	46bd      	mov	sp, r7
    3cc2:	b002      	add	sp, #8
    3cc4:	bd80      	pop	{r7, pc}
    3cc6:	46c0      	nop			; (mov r8, r8)
    3cc8:	0000389d 	.word	0x0000389d
    3ccc:	41004400 	.word	0x41004400
    3cd0:	00003ba5 	.word	0x00003ba5
    3cd4:	40020000 	.word	0x40020000
    3cd8:	c0020000 	.word	0xc0020000
    3cdc:	00003851 	.word	0x00003851
    3ce0:	00005894 	.word	0x00005894
    3ce4:	00000e95 	.word	0x00000e95

00003ce8 <_gpio_set_level>:
{
    3ce8:	b580      	push	{r7, lr}
    3cea:	b082      	sub	sp, #8
    3cec:	af00      	add	r7, sp, #0
    3cee:	6039      	str	r1, [r7, #0]
    3cf0:	0011      	movs	r1, r2
    3cf2:	1dfb      	adds	r3, r7, #7
    3cf4:	1c02      	adds	r2, r0, #0
    3cf6:	701a      	strb	r2, [r3, #0]
    3cf8:	1dbb      	adds	r3, r7, #6
    3cfa:	1c0a      	adds	r2, r1, #0
    3cfc:	701a      	strb	r2, [r3, #0]
	if (level) {
    3cfe:	1dbb      	adds	r3, r7, #6
    3d00:	781b      	ldrb	r3, [r3, #0]
    3d02:	2b00      	cmp	r3, #0
    3d04:	d008      	beq.n	3d18 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    3d06:	683a      	ldr	r2, [r7, #0]
    3d08:	1dfb      	adds	r3, r7, #7
    3d0a:	7819      	ldrb	r1, [r3, #0]
    3d0c:	23c0      	movs	r3, #192	; 0xc0
    3d0e:	05db      	lsls	r3, r3, #23
    3d10:	0018      	movs	r0, r3
    3d12:	4b07      	ldr	r3, [pc, #28]	; (3d30 <_gpio_set_level+0x48>)
    3d14:	4798      	blx	r3
}
    3d16:	e007      	b.n	3d28 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    3d18:	683a      	ldr	r2, [r7, #0]
    3d1a:	1dfb      	adds	r3, r7, #7
    3d1c:	7819      	ldrb	r1, [r3, #0]
    3d1e:	23c0      	movs	r3, #192	; 0xc0
    3d20:	05db      	lsls	r3, r3, #23
    3d22:	0018      	movs	r0, r3
    3d24:	4b03      	ldr	r3, [pc, #12]	; (3d34 <_gpio_set_level+0x4c>)
    3d26:	4798      	blx	r3
}
    3d28:	46c0      	nop			; (mov r8, r8)
    3d2a:	46bd      	mov	sp, r7
    3d2c:	b002      	add	sp, #8
    3d2e:	bd80      	pop	{r7, pc}
    3d30:	000038c9 	.word	0x000038c9
    3d34:	00003919 	.word	0x00003919

00003d38 <_gpio_get_level>:
{
    3d38:	b580      	push	{r7, lr}
    3d3a:	b086      	sub	sp, #24
    3d3c:	af00      	add	r7, sp, #0
    3d3e:	0002      	movs	r2, r0
    3d40:	1dfb      	adds	r3, r7, #7
    3d42:	701a      	strb	r2, [r3, #0]
	CRITICAL_SECTION_ENTER();
    3d44:	230c      	movs	r3, #12
    3d46:	18fb      	adds	r3, r7, r3
    3d48:	0018      	movs	r0, r3
    3d4a:	4b18      	ldr	r3, [pc, #96]	; (3dac <_gpio_get_level+0x74>)
    3d4c:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);
    3d4e:	1dfb      	adds	r3, r7, #7
    3d50:	781a      	ldrb	r2, [r3, #0]
    3d52:	23c0      	movs	r3, #192	; 0xc0
    3d54:	05db      	lsls	r3, r3, #23
    3d56:	0011      	movs	r1, r2
    3d58:	0018      	movs	r0, r3
    3d5a:	4b15      	ldr	r3, [pc, #84]	; (3db0 <_gpio_get_level+0x78>)
    3d5c:	4798      	blx	r3
    3d5e:	0003      	movs	r3, r0
    3d60:	617b      	str	r3, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    3d62:	1dfb      	adds	r3, r7, #7
    3d64:	781b      	ldrb	r3, [r3, #0]
    3d66:	4a13      	ldr	r2, [pc, #76]	; (3db4 <_gpio_get_level+0x7c>)
    3d68:	0019      	movs	r1, r3
    3d6a:	0010      	movs	r0, r2
    3d6c:	4b12      	ldr	r3, [pc, #72]	; (3db8 <_gpio_get_level+0x80>)
    3d6e:	4798      	blx	r3
    3d70:	0002      	movs	r2, r0
    3d72:	697b      	ldr	r3, [r7, #20]
    3d74:	43db      	mvns	r3, r3
    3d76:	4013      	ands	r3, r2
    3d78:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3d7a:	1dfb      	adds	r3, r7, #7
    3d7c:	781a      	ldrb	r2, [r3, #0]
    3d7e:	23c0      	movs	r3, #192	; 0xc0
    3d80:	05db      	lsls	r3, r3, #23
    3d82:	0011      	movs	r1, r2
    3d84:	0018      	movs	r0, r3
    3d86:	4b0d      	ldr	r3, [pc, #52]	; (3dbc <_gpio_get_level+0x84>)
    3d88:	4798      	blx	r3
    3d8a:	0002      	movs	r2, r0
    3d8c:	697b      	ldr	r3, [r7, #20]
    3d8e:	4013      	ands	r3, r2
    3d90:	693a      	ldr	r2, [r7, #16]
    3d92:	4313      	orrs	r3, r2
    3d94:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
    3d96:	230c      	movs	r3, #12
    3d98:	18fb      	adds	r3, r7, r3
    3d9a:	0018      	movs	r0, r3
    3d9c:	4b08      	ldr	r3, [pc, #32]	; (3dc0 <_gpio_get_level+0x88>)
    3d9e:	4798      	blx	r3
	return tmp;
    3da0:	693b      	ldr	r3, [r7, #16]
}
    3da2:	0018      	movs	r0, r3
    3da4:	46bd      	mov	sp, r7
    3da6:	b006      	add	sp, #24
    3da8:	bd80      	pop	{r7, pc}
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	00001a99 	.word	0x00001a99
    3db0:	0000387d 	.word	0x0000387d
    3db4:	41004400 	.word	0x41004400
    3db8:	00003945 	.word	0x00003945
    3dbc:	000038f5 	.word	0x000038f5
    3dc0:	00001aa7 	.word	0x00001aa7

00003dc4 <_gpio_set_pin_pull_mode>:
{
    3dc4:	b590      	push	{r4, r7, lr}
    3dc6:	b083      	sub	sp, #12
    3dc8:	af00      	add	r7, sp, #0
    3dca:	0004      	movs	r4, r0
    3dcc:	0008      	movs	r0, r1
    3dce:	0011      	movs	r1, r2
    3dd0:	1dfb      	adds	r3, r7, #7
    3dd2:	1c22      	adds	r2, r4, #0
    3dd4:	701a      	strb	r2, [r3, #0]
    3dd6:	1dbb      	adds	r3, r7, #6
    3dd8:	1c02      	adds	r2, r0, #0
    3dda:	701a      	strb	r2, [r3, #0]
    3ddc:	1d7b      	adds	r3, r7, #5
    3dde:	1c0a      	adds	r2, r1, #0
    3de0:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
    3de2:	1d7b      	adds	r3, r7, #5
    3de4:	781b      	ldrb	r3, [r3, #0]
    3de6:	2b01      	cmp	r3, #1
    3de8:	d00c      	beq.n	3e04 <_gpio_set_pin_pull_mode+0x40>
    3dea:	2b02      	cmp	r3, #2
    3dec:	d029      	beq.n	3e42 <_gpio_set_pin_pull_mode+0x7e>
    3dee:	2b00      	cmp	r3, #0
    3df0:	d146      	bne.n	3e80 <_gpio_set_pin_pull_mode+0xbc>
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    3df2:	1dbb      	adds	r3, r7, #6
    3df4:	781a      	ldrb	r2, [r3, #0]
    3df6:	1dfb      	adds	r3, r7, #7
    3df8:	781b      	ldrb	r3, [r3, #0]
    3dfa:	4827      	ldr	r0, [pc, #156]	; (3e98 <_gpio_set_pin_pull_mode+0xd4>)
    3dfc:	0019      	movs	r1, r3
    3dfe:	4b27      	ldr	r3, [pc, #156]	; (3e9c <_gpio_set_pin_pull_mode+0xd8>)
    3e00:	4798      	blx	r3
		break;
    3e02:	e044      	b.n	3e8e <_gpio_set_pin_pull_mode+0xca>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    3e04:	1dbb      	adds	r3, r7, #6
    3e06:	781b      	ldrb	r3, [r3, #0]
    3e08:	2201      	movs	r2, #1
    3e0a:	409a      	lsls	r2, r3
    3e0c:	1dfb      	adds	r3, r7, #7
    3e0e:	7819      	ldrb	r1, [r3, #0]
    3e10:	23c0      	movs	r3, #192	; 0xc0
    3e12:	05db      	lsls	r3, r3, #23
    3e14:	0018      	movs	r0, r3
    3e16:	4b22      	ldr	r3, [pc, #136]	; (3ea0 <_gpio_set_pin_pull_mode+0xdc>)
    3e18:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    3e1a:	1dbb      	adds	r3, r7, #6
    3e1c:	781a      	ldrb	r2, [r3, #0]
    3e1e:	1dfb      	adds	r3, r7, #7
    3e20:	781b      	ldrb	r3, [r3, #0]
    3e22:	481d      	ldr	r0, [pc, #116]	; (3e98 <_gpio_set_pin_pull_mode+0xd4>)
    3e24:	0019      	movs	r1, r3
    3e26:	4b1f      	ldr	r3, [pc, #124]	; (3ea4 <_gpio_set_pin_pull_mode+0xe0>)
    3e28:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
    3e2a:	1dbb      	adds	r3, r7, #6
    3e2c:	781b      	ldrb	r3, [r3, #0]
    3e2e:	2201      	movs	r2, #1
    3e30:	409a      	lsls	r2, r3
    3e32:	1dfb      	adds	r3, r7, #7
    3e34:	7819      	ldrb	r1, [r3, #0]
    3e36:	23c0      	movs	r3, #192	; 0xc0
    3e38:	05db      	lsls	r3, r3, #23
    3e3a:	0018      	movs	r0, r3
    3e3c:	4b1a      	ldr	r3, [pc, #104]	; (3ea8 <_gpio_set_pin_pull_mode+0xe4>)
    3e3e:	4798      	blx	r3
		break;
    3e40:	e025      	b.n	3e8e <_gpio_set_pin_pull_mode+0xca>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    3e42:	1dbb      	adds	r3, r7, #6
    3e44:	781b      	ldrb	r3, [r3, #0]
    3e46:	2201      	movs	r2, #1
    3e48:	409a      	lsls	r2, r3
    3e4a:	1dfb      	adds	r3, r7, #7
    3e4c:	7819      	ldrb	r1, [r3, #0]
    3e4e:	23c0      	movs	r3, #192	; 0xc0
    3e50:	05db      	lsls	r3, r3, #23
    3e52:	0018      	movs	r0, r3
    3e54:	4b12      	ldr	r3, [pc, #72]	; (3ea0 <_gpio_set_pin_pull_mode+0xdc>)
    3e56:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    3e58:	1dbb      	adds	r3, r7, #6
    3e5a:	781a      	ldrb	r2, [r3, #0]
    3e5c:	1dfb      	adds	r3, r7, #7
    3e5e:	781b      	ldrb	r3, [r3, #0]
    3e60:	480d      	ldr	r0, [pc, #52]	; (3e98 <_gpio_set_pin_pull_mode+0xd4>)
    3e62:	0019      	movs	r1, r3
    3e64:	4b0f      	ldr	r3, [pc, #60]	; (3ea4 <_gpio_set_pin_pull_mode+0xe0>)
    3e66:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
    3e68:	1dbb      	adds	r3, r7, #6
    3e6a:	781b      	ldrb	r3, [r3, #0]
    3e6c:	2201      	movs	r2, #1
    3e6e:	409a      	lsls	r2, r3
    3e70:	1dfb      	adds	r3, r7, #7
    3e72:	7819      	ldrb	r1, [r3, #0]
    3e74:	23c0      	movs	r3, #192	; 0xc0
    3e76:	05db      	lsls	r3, r3, #23
    3e78:	0018      	movs	r0, r3
    3e7a:	4b0c      	ldr	r3, [pc, #48]	; (3eac <_gpio_set_pin_pull_mode+0xe8>)
    3e7c:	4798      	blx	r3
		break;
    3e7e:	e006      	b.n	3e8e <_gpio_set_pin_pull_mode+0xca>
		ASSERT(false);
    3e80:	4b0b      	ldr	r3, [pc, #44]	; (3eb0 <_gpio_set_pin_pull_mode+0xec>)
    3e82:	2288      	movs	r2, #136	; 0x88
    3e84:	0019      	movs	r1, r3
    3e86:	2000      	movs	r0, #0
    3e88:	4b0a      	ldr	r3, [pc, #40]	; (3eb4 <_gpio_set_pin_pull_mode+0xf0>)
    3e8a:	4798      	blx	r3
		break;
    3e8c:	46c0      	nop			; (mov r8, r8)
}
    3e8e:	46c0      	nop			; (mov r8, r8)
    3e90:	46bd      	mov	sp, r7
    3e92:	b003      	add	sp, #12
    3e94:	bd90      	pop	{r4, r7, pc}
    3e96:	46c0      	nop			; (mov r8, r8)
    3e98:	41004400 	.word	0x41004400
    3e9c:	00003b4f 	.word	0x00003b4f
    3ea0:	0000389d 	.word	0x0000389d
    3ea4:	00003af9 	.word	0x00003af9
    3ea8:	000038c9 	.word	0x000038c9
    3eac:	00003919 	.word	0x00003919
    3eb0:	00005894 	.word	0x00005894
    3eb4:	00000e95 	.word	0x00000e95

00003eb8 <_gpio_set_pin_function>:
{
    3eb8:	b590      	push	{r4, r7, lr}
    3eba:	b085      	sub	sp, #20
    3ebc:	af00      	add	r7, sp, #0
    3ebe:	6078      	str	r0, [r7, #4]
    3ec0:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    3ec2:	687b      	ldr	r3, [r7, #4]
    3ec4:	095a      	lsrs	r2, r3, #5
    3ec6:	230f      	movs	r3, #15
    3ec8:	18fb      	adds	r3, r7, r3
    3eca:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    3ecc:	687b      	ldr	r3, [r7, #4]
    3ece:	b2da      	uxtb	r2, r3
    3ed0:	230e      	movs	r3, #14
    3ed2:	18fb      	adds	r3, r7, r3
    3ed4:	211f      	movs	r1, #31
    3ed6:	400a      	ands	r2, r1
    3ed8:	701a      	strb	r2, [r3, #0]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    3eda:	683b      	ldr	r3, [r7, #0]
    3edc:	3301      	adds	r3, #1
    3ede:	d10a      	bne.n	3ef6 <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    3ee0:	230e      	movs	r3, #14
    3ee2:	18fb      	adds	r3, r7, r3
    3ee4:	781a      	ldrb	r2, [r3, #0]
    3ee6:	230f      	movs	r3, #15
    3ee8:	18fb      	adds	r3, r7, r3
    3eea:	7819      	ldrb	r1, [r3, #0]
    3eec:	481b      	ldr	r0, [pc, #108]	; (3f5c <_gpio_set_pin_function+0xa4>)
    3eee:	2300      	movs	r3, #0
    3ef0:	4c1b      	ldr	r4, [pc, #108]	; (3f60 <_gpio_set_pin_function+0xa8>)
    3ef2:	47a0      	blx	r4
}
    3ef4:	e02e      	b.n	3f54 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    3ef6:	230e      	movs	r3, #14
    3ef8:	18fb      	adds	r3, r7, r3
    3efa:	781a      	ldrb	r2, [r3, #0]
    3efc:	230f      	movs	r3, #15
    3efe:	18fb      	adds	r3, r7, r3
    3f00:	7819      	ldrb	r1, [r3, #0]
    3f02:	4816      	ldr	r0, [pc, #88]	; (3f5c <_gpio_set_pin_function+0xa4>)
    3f04:	2301      	movs	r3, #1
    3f06:	4c16      	ldr	r4, [pc, #88]	; (3f60 <_gpio_set_pin_function+0xa8>)
    3f08:	47a0      	blx	r4
		if (pin & 1) {
    3f0a:	230e      	movs	r3, #14
    3f0c:	18fb      	adds	r3, r7, r3
    3f0e:	781b      	ldrb	r3, [r3, #0]
    3f10:	2201      	movs	r2, #1
    3f12:	4013      	ands	r3, r2
    3f14:	d00f      	beq.n	3f36 <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    3f16:	230e      	movs	r3, #14
    3f18:	18fb      	adds	r3, r7, r3
    3f1a:	781b      	ldrb	r3, [r3, #0]
    3f1c:	105b      	asrs	r3, r3, #1
    3f1e:	b2da      	uxtb	r2, r3
    3f20:	683b      	ldr	r3, [r7, #0]
    3f22:	b2d8      	uxtb	r0, r3
    3f24:	230f      	movs	r3, #15
    3f26:	18fb      	adds	r3, r7, r3
    3f28:	7819      	ldrb	r1, [r3, #0]
    3f2a:	4c0c      	ldr	r4, [pc, #48]	; (3f5c <_gpio_set_pin_function+0xa4>)
    3f2c:	0003      	movs	r3, r0
    3f2e:	0020      	movs	r0, r4
    3f30:	4c0c      	ldr	r4, [pc, #48]	; (3f64 <_gpio_set_pin_function+0xac>)
    3f32:	47a0      	blx	r4
}
    3f34:	e00e      	b.n	3f54 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    3f36:	230e      	movs	r3, #14
    3f38:	18fb      	adds	r3, r7, r3
    3f3a:	781b      	ldrb	r3, [r3, #0]
    3f3c:	105b      	asrs	r3, r3, #1
    3f3e:	b2da      	uxtb	r2, r3
    3f40:	683b      	ldr	r3, [r7, #0]
    3f42:	b2d8      	uxtb	r0, r3
    3f44:	230f      	movs	r3, #15
    3f46:	18fb      	adds	r3, r7, r3
    3f48:	7819      	ldrb	r1, [r3, #0]
    3f4a:	4c04      	ldr	r4, [pc, #16]	; (3f5c <_gpio_set_pin_function+0xa4>)
    3f4c:	0003      	movs	r3, r0
    3f4e:	0020      	movs	r0, r4
    3f50:	4c05      	ldr	r4, [pc, #20]	; (3f68 <_gpio_set_pin_function+0xb0>)
    3f52:	47a0      	blx	r4
}
    3f54:	46c0      	nop			; (mov r8, r8)
    3f56:	46bd      	mov	sp, r7
    3f58:	b005      	add	sp, #20
    3f5a:	bd90      	pop	{r4, r7, pc}
    3f5c:	41004400 	.word	0x41004400
    3f60:	00003a77 	.word	0x00003a77
    3f64:	000039f1 	.word	0x000039f1
    3f68:	00003969 	.word	0x00003969

00003f6c <gpio_set_pin_pull_mode>:
{
    3f6c:	b580      	push	{r7, lr}
    3f6e:	b082      	sub	sp, #8
    3f70:	af00      	add	r7, sp, #0
    3f72:	0002      	movs	r2, r0
    3f74:	1dfb      	adds	r3, r7, #7
    3f76:	701a      	strb	r2, [r3, #0]
    3f78:	1dbb      	adds	r3, r7, #6
    3f7a:	1c0a      	adds	r2, r1, #0
    3f7c:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    3f7e:	1dfb      	adds	r3, r7, #7
    3f80:	781b      	ldrb	r3, [r3, #0]
    3f82:	115b      	asrs	r3, r3, #5
    3f84:	b2d8      	uxtb	r0, r3
    3f86:	1dfb      	adds	r3, r7, #7
    3f88:	781b      	ldrb	r3, [r3, #0]
    3f8a:	221f      	movs	r2, #31
    3f8c:	4013      	ands	r3, r2
    3f8e:	b2d9      	uxtb	r1, r3
    3f90:	1dbb      	adds	r3, r7, #6
    3f92:	781b      	ldrb	r3, [r3, #0]
    3f94:	001a      	movs	r2, r3
    3f96:	4b03      	ldr	r3, [pc, #12]	; (3fa4 <gpio_set_pin_pull_mode+0x38>)
    3f98:	4798      	blx	r3
}
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	46bd      	mov	sp, r7
    3f9e:	b002      	add	sp, #8
    3fa0:	bd80      	pop	{r7, pc}
    3fa2:	46c0      	nop			; (mov r8, r8)
    3fa4:	00003dc5 	.word	0x00003dc5

00003fa8 <gpio_set_pin_function>:
{
    3fa8:	b580      	push	{r7, lr}
    3faa:	b082      	sub	sp, #8
    3fac:	af00      	add	r7, sp, #0
    3fae:	6078      	str	r0, [r7, #4]
    3fb0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    3fb2:	683a      	ldr	r2, [r7, #0]
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	0011      	movs	r1, r2
    3fb8:	0018      	movs	r0, r3
    3fba:	4b03      	ldr	r3, [pc, #12]	; (3fc8 <gpio_set_pin_function+0x20>)
    3fbc:	4798      	blx	r3
}
    3fbe:	46c0      	nop			; (mov r8, r8)
    3fc0:	46bd      	mov	sp, r7
    3fc2:	b002      	add	sp, #8
    3fc4:	bd80      	pop	{r7, pc}
    3fc6:	46c0      	nop			; (mov r8, r8)
    3fc8:	00003eb9 	.word	0x00003eb9

00003fcc <gpio_set_pin_direction>:
{
    3fcc:	b580      	push	{r7, lr}
    3fce:	b082      	sub	sp, #8
    3fd0:	af00      	add	r7, sp, #0
    3fd2:	0002      	movs	r2, r0
    3fd4:	1dfb      	adds	r3, r7, #7
    3fd6:	701a      	strb	r2, [r3, #0]
    3fd8:	1dbb      	adds	r3, r7, #6
    3fda:	1c0a      	adds	r2, r1, #0
    3fdc:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    3fde:	1dfb      	adds	r3, r7, #7
    3fe0:	781b      	ldrb	r3, [r3, #0]
    3fe2:	115b      	asrs	r3, r3, #5
    3fe4:	b2d8      	uxtb	r0, r3
    3fe6:	1dfb      	adds	r3, r7, #7
    3fe8:	781b      	ldrb	r3, [r3, #0]
    3fea:	001a      	movs	r2, r3
    3fec:	231f      	movs	r3, #31
    3fee:	4013      	ands	r3, r2
    3ff0:	2201      	movs	r2, #1
    3ff2:	409a      	lsls	r2, r3
    3ff4:	0011      	movs	r1, r2
    3ff6:	1dbb      	adds	r3, r7, #6
    3ff8:	781b      	ldrb	r3, [r3, #0]
    3ffa:	001a      	movs	r2, r3
    3ffc:	4b02      	ldr	r3, [pc, #8]	; (4008 <gpio_set_pin_direction+0x3c>)
    3ffe:	4798      	blx	r3
}
    4000:	46c0      	nop			; (mov r8, r8)
    4002:	46bd      	mov	sp, r7
    4004:	b002      	add	sp, #8
    4006:	bd80      	pop	{r7, pc}
    4008:	00003bd1 	.word	0x00003bd1

0000400c <gpio_set_pin_level>:
{
    400c:	b580      	push	{r7, lr}
    400e:	b082      	sub	sp, #8
    4010:	af00      	add	r7, sp, #0
    4012:	0002      	movs	r2, r0
    4014:	1dfb      	adds	r3, r7, #7
    4016:	701a      	strb	r2, [r3, #0]
    4018:	1dbb      	adds	r3, r7, #6
    401a:	1c0a      	adds	r2, r1, #0
    401c:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    401e:	1dfb      	adds	r3, r7, #7
    4020:	781b      	ldrb	r3, [r3, #0]
    4022:	115b      	asrs	r3, r3, #5
    4024:	b2d8      	uxtb	r0, r3
    4026:	1dfb      	adds	r3, r7, #7
    4028:	781b      	ldrb	r3, [r3, #0]
    402a:	001a      	movs	r2, r3
    402c:	231f      	movs	r3, #31
    402e:	4013      	ands	r3, r2
    4030:	2201      	movs	r2, #1
    4032:	409a      	lsls	r2, r3
    4034:	0011      	movs	r1, r2
    4036:	1dbb      	adds	r3, r7, #6
    4038:	781b      	ldrb	r3, [r3, #0]
    403a:	001a      	movs	r2, r3
    403c:	4b02      	ldr	r3, [pc, #8]	; (4048 <gpio_set_pin_level+0x3c>)
    403e:	4798      	blx	r3
}
    4040:	46c0      	nop			; (mov r8, r8)
    4042:	46bd      	mov	sp, r7
    4044:	b002      	add	sp, #8
    4046:	bd80      	pop	{r7, pc}
    4048:	00003ce9 	.word	0x00003ce9

0000404c <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    404c:	b580      	push	{r7, lr}
    404e:	b082      	sub	sp, #8
    4050:	af00      	add	r7, sp, #0
    4052:	0002      	movs	r2, r0
    4054:	1dfb      	adds	r3, r7, #7
    4056:	701a      	strb	r2, [r3, #0]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    4058:	1dfb      	adds	r3, r7, #7
    405a:	781b      	ldrb	r3, [r3, #0]
    405c:	115b      	asrs	r3, r3, #5
    405e:	b2db      	uxtb	r3, r3
    4060:	0018      	movs	r0, r3
    4062:	4b09      	ldr	r3, [pc, #36]	; (4088 <gpio_get_pin_level+0x3c>)
    4064:	4798      	blx	r3
    4066:	0001      	movs	r1, r0
    4068:	1dfb      	adds	r3, r7, #7
    406a:	781b      	ldrb	r3, [r3, #0]
    406c:	001a      	movs	r2, r3
    406e:	231f      	movs	r3, #31
    4070:	4013      	ands	r3, r2
    4072:	2201      	movs	r2, #1
    4074:	409a      	lsls	r2, r3
    4076:	0013      	movs	r3, r2
    4078:	400b      	ands	r3, r1
    407a:	1e5a      	subs	r2, r3, #1
    407c:	4193      	sbcs	r3, r2
    407e:	b2db      	uxtb	r3, r3
}
    4080:	0018      	movs	r0, r3
    4082:	46bd      	mov	sp, r7
    4084:	b002      	add	sp, #8
    4086:	bd80      	pop	{r7, pc}
    4088:	00003d39 	.word	0x00003d39

0000408c <_ZL15ChangeModeTimerPK10timer_task>:
	}
	
}

static void ChangeModeTimer(const struct timer_task *const timer_task)
{
    408c:	b580      	push	{r7, lr}
    408e:	b082      	sub	sp, #8
    4090:	af00      	add	r7, sp, #0
    4092:	6078      	str	r0, [r7, #4]
	if (nmi.pressed)
    4094:	4b3d      	ldr	r3, [pc, #244]	; (418c <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    4096:	781b      	ldrb	r3, [r3, #0]
    4098:	b2db      	uxtb	r3, r3
    409a:	2b00      	cmp	r3, #0
    409c:	d054      	beq.n	4148 <_ZL15ChangeModeTimerPK10timer_task+0xbc>
	{
		nmi.pressCounter++;
    409e:	4b3b      	ldr	r3, [pc, #236]	; (418c <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    40a0:	689b      	ldr	r3, [r3, #8]
    40a2:	1c5a      	adds	r2, r3, #1
    40a4:	4b39      	ldr	r3, [pc, #228]	; (418c <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    40a6:	609a      	str	r2, [r3, #8]
		//lighter.changeModeRequest=false;
		//nmi.modulate=true;
		if (!nmi.direction)
    40a8:	4b38      	ldr	r3, [pc, #224]	; (418c <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    40aa:	791b      	ldrb	r3, [r3, #4]
    40ac:	b2db      	uxtb	r3, r3
    40ae:	2201      	movs	r2, #1
    40b0:	4053      	eors	r3, r2
    40b2:	b2db      	uxtb	r3, r3
    40b4:	2b00      	cmp	r3, #0
    40b6:	d023      	beq.n	4100 <_ZL15ChangeModeTimerPK10timer_task+0x74>
		{
			if (lighter.stepTime<POWERON_SINGLE_TIME_MAX)
    40b8:	4a35      	ldr	r2, [pc, #212]	; (4190 <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    40ba:	23c0      	movs	r3, #192	; 0xc0
    40bc:	005b      	lsls	r3, r3, #1
    40be:	58d2      	ldr	r2, [r2, r3]
    40c0:	4934      	ldr	r1, [pc, #208]	; (4194 <_ZL15ChangeModeTimerPK10timer_task+0x108>)
    40c2:	2300      	movs	r3, #0
    40c4:	4291      	cmp	r1, r2
    40c6:	415b      	adcs	r3, r3
    40c8:	b2db      	uxtb	r3, r3
    40ca:	2b00      	cmp	r3, #0
    40cc:	d00a      	beq.n	40e4 <_ZL15ChangeModeTimerPK10timer_task+0x58>
			{
				lighter.stepTime+=10;
    40ce:	4a30      	ldr	r2, [pc, #192]	; (4190 <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    40d0:	23c0      	movs	r3, #192	; 0xc0
    40d2:	005b      	lsls	r3, r3, #1
    40d4:	58d3      	ldr	r3, [r2, r3]
    40d6:	330a      	adds	r3, #10
    40d8:	0019      	movs	r1, r3
    40da:	4a2d      	ldr	r2, [pc, #180]	; (4190 <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    40dc:	23c0      	movs	r3, #192	; 0xc0
    40de:	005b      	lsls	r3, r3, #1
    40e0:	50d1      	str	r1, [r2, r3]
			nmi.modulate=true;
		}
		//lighter.changeModeRequest=true;
	}
	
}
    40e2:	e04e      	b.n	4182 <_ZL15ChangeModeTimerPK10timer_task+0xf6>
				lighter.stepTime-=10;
    40e4:	4a2a      	ldr	r2, [pc, #168]	; (4190 <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    40e6:	23c0      	movs	r3, #192	; 0xc0
    40e8:	005b      	lsls	r3, r3, #1
    40ea:	58d3      	ldr	r3, [r2, r3]
    40ec:	3b0a      	subs	r3, #10
    40ee:	0019      	movs	r1, r3
    40f0:	4a27      	ldr	r2, [pc, #156]	; (4190 <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    40f2:	23c0      	movs	r3, #192	; 0xc0
    40f4:	005b      	lsls	r3, r3, #1
    40f6:	50d1      	str	r1, [r2, r3]
				nmi.direction=true;
    40f8:	4b24      	ldr	r3, [pc, #144]	; (418c <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    40fa:	2201      	movs	r2, #1
    40fc:	711a      	strb	r2, [r3, #4]
}
    40fe:	e040      	b.n	4182 <_ZL15ChangeModeTimerPK10timer_task+0xf6>
			if (lighter.stepTime<10)
    4100:	4a23      	ldr	r2, [pc, #140]	; (4190 <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    4102:	23c0      	movs	r3, #192	; 0xc0
    4104:	005b      	lsls	r3, r3, #1
    4106:	58d2      	ldr	r2, [r2, r3]
    4108:	2109      	movs	r1, #9
    410a:	2300      	movs	r3, #0
    410c:	4291      	cmp	r1, r2
    410e:	415b      	adcs	r3, r3
    4110:	b2db      	uxtb	r3, r3
    4112:	2b00      	cmp	r3, #0
    4114:	d00d      	beq.n	4132 <_ZL15ChangeModeTimerPK10timer_task+0xa6>
				lighter.stepTime+=10;
    4116:	4a1e      	ldr	r2, [pc, #120]	; (4190 <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    4118:	23c0      	movs	r3, #192	; 0xc0
    411a:	005b      	lsls	r3, r3, #1
    411c:	58d3      	ldr	r3, [r2, r3]
    411e:	330a      	adds	r3, #10
    4120:	0019      	movs	r1, r3
    4122:	4a1b      	ldr	r2, [pc, #108]	; (4190 <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    4124:	23c0      	movs	r3, #192	; 0xc0
    4126:	005b      	lsls	r3, r3, #1
    4128:	50d1      	str	r1, [r2, r3]
				nmi.direction=false;
    412a:	4b18      	ldr	r3, [pc, #96]	; (418c <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    412c:	2200      	movs	r2, #0
    412e:	711a      	strb	r2, [r3, #4]
}
    4130:	e027      	b.n	4182 <_ZL15ChangeModeTimerPK10timer_task+0xf6>
				lighter.stepTime-=10;
    4132:	4a17      	ldr	r2, [pc, #92]	; (4190 <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    4134:	23c0      	movs	r3, #192	; 0xc0
    4136:	005b      	lsls	r3, r3, #1
    4138:	58d3      	ldr	r3, [r2, r3]
    413a:	3b0a      	subs	r3, #10
    413c:	0019      	movs	r1, r3
    413e:	4a14      	ldr	r2, [pc, #80]	; (4190 <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    4140:	23c0      	movs	r3, #192	; 0xc0
    4142:	005b      	lsls	r3, r3, #1
    4144:	50d1      	str	r1, [r2, r3]
}
    4146:	e01c      	b.n	4182 <_ZL15ChangeModeTimerPK10timer_task+0xf6>
		nmi.released=true;
    4148:	4b10      	ldr	r3, [pc, #64]	; (418c <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    414a:	2201      	movs	r2, #1
    414c:	715a      	strb	r2, [r3, #5]
		if (nmi.pressCounter<100)
    414e:	4b0f      	ldr	r3, [pc, #60]	; (418c <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    4150:	689a      	ldr	r2, [r3, #8]
    4152:	2163      	movs	r1, #99	; 0x63
    4154:	2300      	movs	r3, #0
    4156:	4291      	cmp	r1, r2
    4158:	415b      	adcs	r3, r3
    415a:	b2db      	uxtb	r3, r3
    415c:	2b00      	cmp	r3, #0
    415e:	d008      	beq.n	4172 <_ZL15ChangeModeTimerPK10timer_task+0xe6>
			lighter.changeModeRequest=true;
    4160:	4a0b      	ldr	r2, [pc, #44]	; (4190 <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    4162:	23bc      	movs	r3, #188	; 0xbc
    4164:	005b      	lsls	r3, r3, #1
    4166:	2101      	movs	r1, #1
    4168:	54d1      	strb	r1, [r2, r3]
			nmi.modulate=false;
    416a:	4b08      	ldr	r3, [pc, #32]	; (418c <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    416c:	2200      	movs	r2, #0
    416e:	709a      	strb	r2, [r3, #2]
}
    4170:	e007      	b.n	4182 <_ZL15ChangeModeTimerPK10timer_task+0xf6>
			lighter.changeModeRequest=false;
    4172:	4a07      	ldr	r2, [pc, #28]	; (4190 <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    4174:	23bc      	movs	r3, #188	; 0xbc
    4176:	005b      	lsls	r3, r3, #1
    4178:	2100      	movs	r1, #0
    417a:	54d1      	strb	r1, [r2, r3]
			nmi.modulate=true;
    417c:	4b03      	ldr	r3, [pc, #12]	; (418c <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    417e:	2201      	movs	r2, #1
    4180:	709a      	strb	r2, [r3, #2]
}
    4182:	46c0      	nop			; (mov r8, r8)
    4184:	46bd      	mov	sp, r7
    4186:	b002      	add	sp, #8
    4188:	bd80      	pop	{r7, pc}
    418a:	46c0      	nop			; (mov r8, r8)
    418c:	200007e0 	.word	0x200007e0
    4190:	20000544 	.word	0x20000544
    4194:	00000f9f 	.word	0x00000f9f

00004198 <_ZN15NMIButton_ClassC1Ev>:

// default constructor
NMIButton_Class::NMIButton_Class()
    4198:	b580      	push	{r7, lr}
    419a:	b082      	sub	sp, #8
    419c:	af00      	add	r7, sp, #0
    419e:	6078      	str	r0, [r7, #4]
{
	pressedTimerStarted=false;
    41a0:	687b      	ldr	r3, [r7, #4]
    41a2:	2200      	movs	r2, #0
    41a4:	705a      	strb	r2, [r3, #1]
	pressCounter=0;
    41a6:	687b      	ldr	r3, [r7, #4]
    41a8:	2200      	movs	r2, #0
    41aa:	609a      	str	r2, [r3, #8]
} //NMIButton_Class
    41ac:	687b      	ldr	r3, [r7, #4]
    41ae:	0018      	movs	r0, r3
    41b0:	46bd      	mov	sp, r7
    41b2:	b002      	add	sp, #8
    41b4:	bd80      	pop	{r7, pc}

000041b6 <_ZN15NMIButton_ClassD1Ev>:

// default destructor
NMIButton_Class::~NMIButton_Class()
    41b6:	b580      	push	{r7, lr}
    41b8:	b082      	sub	sp, #8
    41ba:	af00      	add	r7, sp, #0
    41bc:	6078      	str	r0, [r7, #4]
{
} //~NMIButton_Class
    41be:	687b      	ldr	r3, [r7, #4]
    41c0:	0018      	movs	r0, r3
    41c2:	46bd      	mov	sp, r7
    41c4:	b002      	add	sp, #8
    41c6:	bd80      	pop	{r7, pc}

000041c8 <_ZN15NMIButton_Class15IsButtonPressedEv>:

bool	NMIButton_Class::IsButtonPressed(void){
    41c8:	b580      	push	{r7, lr}
    41ca:	b082      	sub	sp, #8
    41cc:	af00      	add	r7, sp, #0
    41ce:	6078      	str	r0, [r7, #4]
	if (!lighter.poweron)
    41d0:	4a1b      	ldr	r2, [pc, #108]	; (4240 <_ZN15NMIButton_Class15IsButtonPressedEv+0x78>)
    41d2:	23bb      	movs	r3, #187	; 0xbb
    41d4:	005b      	lsls	r3, r3, #1
    41d6:	5cd3      	ldrb	r3, [r2, r3]
    41d8:	b2db      	uxtb	r3, r3
    41da:	2201      	movs	r2, #1
    41dc:	4053      	eors	r3, r2
    41de:	b2db      	uxtb	r3, r3
    41e0:	2b00      	cmp	r3, #0
    41e2:	d027      	beq.n	4234 <_ZN15NMIButton_Class15IsButtonPressedEv+0x6c>
	{
		gpio_set_pin_direction(NMI,GPIO_DIRECTION_IN);
    41e4:	2101      	movs	r1, #1
    41e6:	2008      	movs	r0, #8
    41e8:	4b16      	ldr	r3, [pc, #88]	; (4244 <_ZN15NMIButton_Class15IsButtonPressedEv+0x7c>)
    41ea:	4798      	blx	r3
		gpio_set_pin_pull_mode(NMI,GPIO_PULL_UP);
    41ec:	2101      	movs	r1, #1
    41ee:	2008      	movs	r0, #8
    41f0:	4b15      	ldr	r3, [pc, #84]	; (4248 <_ZN15NMIButton_Class15IsButtonPressedEv+0x80>)
    41f2:	4798      	blx	r3
		pressed=gpio_get_pin_level(NMI)==false;
    41f4:	2008      	movs	r0, #8
    41f6:	4b15      	ldr	r3, [pc, #84]	; (424c <_ZN15NMIButton_Class15IsButtonPressedEv+0x84>)
    41f8:	4798      	blx	r3
    41fa:	0003      	movs	r3, r0
    41fc:	001a      	movs	r2, r3
    41fe:	2301      	movs	r3, #1
    4200:	4053      	eors	r3, r2
    4202:	b2da      	uxtb	r2, r3
    4204:	687b      	ldr	r3, [r7, #4]
    4206:	701a      	strb	r2, [r3, #0]
		
		
		gpio_set_pin_pull_mode(NMI,GPIO_PULL_DOWN);
    4208:	2102      	movs	r1, #2
    420a:	2008      	movs	r0, #8
    420c:	4b0e      	ldr	r3, [pc, #56]	; (4248 <_ZN15NMIButton_Class15IsButtonPressedEv+0x80>)
    420e:	4798      	blx	r3
		gpio_set_pin_direction(NMI, GPIO_DIRECTION_OUT);
    4210:	2102      	movs	r1, #2
    4212:	2008      	movs	r0, #8
    4214:	4b0b      	ldr	r3, [pc, #44]	; (4244 <_ZN15NMIButton_Class15IsButtonPressedEv+0x7c>)
    4216:	4798      	blx	r3
		gpio_set_pin_function(NMI, GPIO_PIN_FUNCTION_OFF);
    4218:	2301      	movs	r3, #1
    421a:	425b      	negs	r3, r3
    421c:	0019      	movs	r1, r3
    421e:	2008      	movs	r0, #8
    4220:	4b0b      	ldr	r3, [pc, #44]	; (4250 <_ZN15NMIButton_Class15IsButtonPressedEv+0x88>)
    4222:	4798      	blx	r3
		gpio_set_pin_level(NMI,false);
    4224:	2100      	movs	r1, #0
    4226:	2008      	movs	r0, #8
    4228:	4b0a      	ldr	r3, [pc, #40]	; (4254 <_ZN15NMIButton_Class15IsButtonPressedEv+0x8c>)
    422a:	4798      	blx	r3
		return	pressed;
    422c:	687b      	ldr	r3, [r7, #4]
    422e:	781b      	ldrb	r3, [r3, #0]
    4230:	b2db      	uxtb	r3, r3
    4232:	e000      	b.n	4236 <_ZN15NMIButton_Class15IsButtonPressedEv+0x6e>
	} 
	else
	{
		return false;
    4234:	2300      	movs	r3, #0
	}
	return false;
}
    4236:	0018      	movs	r0, r3
    4238:	46bd      	mov	sp, r7
    423a:	b002      	add	sp, #8
    423c:	bd80      	pop	{r7, pc}
    423e:	46c0      	nop			; (mov r8, r8)
    4240:	20000544 	.word	0x20000544
    4244:	00003fcd 	.word	0x00003fcd
    4248:	00003f6d 	.word	0x00003f6d
    424c:	0000404d 	.word	0x0000404d
    4250:	00003fa9 	.word	0x00003fa9
    4254:	0000400d 	.word	0x0000400d

00004258 <_ZN15NMIButton_Class9OnPressedEv>:
uint32_t	NMIButton_Class::OnPressed(void){
    4258:	b580      	push	{r7, lr}
    425a:	b082      	sub	sp, #8
    425c:	af00      	add	r7, sp, #0
    425e:	6078      	str	r0, [r7, #4]
	if (!pressedTimerStarted)
    4260:	687b      	ldr	r3, [r7, #4]
    4262:	785b      	ldrb	r3, [r3, #1]
    4264:	b2db      	uxtb	r3, r3
    4266:	2201      	movs	r2, #1
    4268:	4053      	eors	r3, r2
    426a:	b2db      	uxtb	r3, r3
    426c:	2b00      	cmp	r3, #0
    426e:	d020      	beq.n	42b2 <_ZN15NMIButton_Class9OnPressedEv+0x5a>
	{
		butttonTimer.stop();
    4270:	4b24      	ldr	r3, [pc, #144]	; (4304 <_ZN15NMIButton_Class9OnPressedEv+0xac>)
    4272:	0018      	movs	r0, r3
    4274:	4b24      	ldr	r3, [pc, #144]	; (4308 <_ZN15NMIButton_Class9OnPressedEv+0xb0>)
    4276:	4798      	blx	r3
		pressCounter=0;
    4278:	687b      	ldr	r3, [r7, #4]
    427a:	2200      	movs	r2, #0
    427c:	609a      	str	r2, [r3, #8]
		direction=false;
    427e:	687b      	ldr	r3, [r7, #4]
    4280:	2200      	movs	r2, #0
    4282:	711a      	strb	r2, [r3, #4]
		butttonTimer.add_periodic_task((FUNC_PTR)ChangeModeTimer,COUNTER_TIME);
    4284:	4921      	ldr	r1, [pc, #132]	; (430c <_ZN15NMIButton_Class9OnPressedEv+0xb4>)
    4286:	4b1f      	ldr	r3, [pc, #124]	; (4304 <_ZN15NMIButton_Class9OnPressedEv+0xac>)
    4288:	2204      	movs	r2, #4
    428a:	0018      	movs	r0, r3
    428c:	4b20      	ldr	r3, [pc, #128]	; (4310 <_ZN15NMIButton_Class9OnPressedEv+0xb8>)
    428e:	4798      	blx	r3
		butttonTimer.start();
    4290:	4b1c      	ldr	r3, [pc, #112]	; (4304 <_ZN15NMIButton_Class9OnPressedEv+0xac>)
    4292:	0018      	movs	r0, r3
    4294:	4b1f      	ldr	r3, [pc, #124]	; (4314 <_ZN15NMIButton_Class9OnPressedEv+0xbc>)
    4296:	4798      	blx	r3
		stepTime=lighter.stepTime;
    4298:	4a1f      	ldr	r2, [pc, #124]	; (4318 <_ZN15NMIButton_Class9OnPressedEv+0xc0>)
    429a:	23c0      	movs	r3, #192	; 0xc0
    429c:	005b      	lsls	r3, r3, #1
    429e:	58d2      	ldr	r2, [r2, r3]
    42a0:	687b      	ldr	r3, [r7, #4]
    42a2:	60da      	str	r2, [r3, #12]
		nmi.released=false;
    42a4:	4b1d      	ldr	r3, [pc, #116]	; (431c <_ZN15NMIButton_Class9OnPressedEv+0xc4>)
    42a6:	2200      	movs	r2, #0
    42a8:	715a      	strb	r2, [r3, #5]
		pressedTimerStarted=true;
    42aa:	687b      	ldr	r3, [r7, #4]
    42ac:	2201      	movs	r2, #1
    42ae:	705a      	strb	r2, [r3, #1]
    42b0:	e022      	b.n	42f8 <_ZN15NMIButton_Class9OnPressedEv+0xa0>
	}else{
		if (IsButtonPressed()){
    42b2:	687b      	ldr	r3, [r7, #4]
    42b4:	0018      	movs	r0, r3
    42b6:	4b1a      	ldr	r3, [pc, #104]	; (4320 <_ZN15NMIButton_Class9OnPressedEv+0xc8>)
    42b8:	4798      	blx	r3
    42ba:	1e03      	subs	r3, r0, #0
    42bc:	d004      	beq.n	42c8 <_ZN15NMIButton_Class9OnPressedEv+0x70>
			ModulateStepTime();
    42be:	687b      	ldr	r3, [r7, #4]
    42c0:	0018      	movs	r0, r3
    42c2:	4b18      	ldr	r3, [pc, #96]	; (4324 <_ZN15NMIButton_Class9OnPressedEv+0xcc>)
    42c4:	4798      	blx	r3
    42c6:	e017      	b.n	42f8 <_ZN15NMIButton_Class9OnPressedEv+0xa0>
		}
		else
		{
			if (pressCounter<COUNTER_TIME)
    42c8:	687b      	ldr	r3, [r7, #4]
    42ca:	689a      	ldr	r2, [r3, #8]
    42cc:	2103      	movs	r1, #3
    42ce:	2300      	movs	r3, #0
    42d0:	4291      	cmp	r1, r2
    42d2:	415b      	adcs	r3, r3
    42d4:	b2db      	uxtb	r3, r3
    42d6:	2b00      	cmp	r3, #0
    42d8:	d005      	beq.n	42e6 <_ZN15NMIButton_Class9OnPressedEv+0x8e>
			{
				lighter.changeModeRequest=true;
    42da:	4a0f      	ldr	r2, [pc, #60]	; (4318 <_ZN15NMIButton_Class9OnPressedEv+0xc0>)
    42dc:	23bc      	movs	r3, #188	; 0xbc
    42de:	005b      	lsls	r3, r3, #1
    42e0:	2101      	movs	r1, #1
    42e2:	54d1      	strb	r1, [r2, r3]
    42e4:	e004      	b.n	42f0 <_ZN15NMIButton_Class9OnPressedEv+0x98>
			
			} 
			else
			{
				lighter.changeModeRequest=false;
    42e6:	4a0c      	ldr	r2, [pc, #48]	; (4318 <_ZN15NMIButton_Class9OnPressedEv+0xc0>)
    42e8:	23bc      	movs	r3, #188	; 0xbc
    42ea:	005b      	lsls	r3, r3, #1
    42ec:	2100      	movs	r1, #0
    42ee:	54d1      	strb	r1, [r2, r3]
				
			}
			OnRelease();
    42f0:	687b      	ldr	r3, [r7, #4]
    42f2:	0018      	movs	r0, r3
    42f4:	4b0c      	ldr	r3, [pc, #48]	; (4328 <_ZN15NMIButton_Class9OnPressedEv+0xd0>)
    42f6:	4798      	blx	r3
			
		}
	}
		
	
	return	stepTime;
    42f8:	687b      	ldr	r3, [r7, #4]
    42fa:	68db      	ldr	r3, [r3, #12]
}
    42fc:	0018      	movs	r0, r3
    42fe:	46bd      	mov	sp, r7
    4300:	b002      	add	sp, #8
    4302:	bd80      	pop	{r7, pc}
    4304:	200007f4 	.word	0x200007f4
    4308:	00004561 	.word	0x00004561
    430c:	0000408d 	.word	0x0000408d
    4310:	000045f1 	.word	0x000045f1
    4314:	0000453d 	.word	0x0000453d
    4318:	20000544 	.word	0x20000544
    431c:	200007e0 	.word	0x200007e0
    4320:	000041c9 	.word	0x000041c9
    4324:	0000432d 	.word	0x0000432d
    4328:	000043ed 	.word	0x000043ed

0000432c <_ZN15NMIButton_Class16ModulateStepTimeEv>:
uint32_t	NMIButton_Class::ModulateStepTime(void){
    432c:	b580      	push	{r7, lr}
    432e:	b082      	sub	sp, #8
    4330:	af00      	add	r7, sp, #0
    4332:	6078      	str	r0, [r7, #4]
	pressCounter++;
    4334:	687b      	ldr	r3, [r7, #4]
    4336:	689b      	ldr	r3, [r3, #8]
    4338:	1c5a      	adds	r2, r3, #1
    433a:	687b      	ldr	r3, [r7, #4]
    433c:	609a      	str	r2, [r3, #8]
	
	if (!direction)
    433e:	687b      	ldr	r3, [r7, #4]
    4340:	791b      	ldrb	r3, [r3, #4]
    4342:	b2db      	uxtb	r3, r3
    4344:	2201      	movs	r2, #1
    4346:	4053      	eors	r3, r2
    4348:	b2db      	uxtb	r3, r3
    434a:	2b00      	cmp	r3, #0
    434c:	d021      	beq.n	4392 <_ZN15NMIButton_Class16ModulateStepTimeEv+0x66>
	{
		if (lighter.stepTime<POWERON_SINGLE_TIME_MAX)
    434e:	4a25      	ldr	r2, [pc, #148]	; (43e4 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    4350:	23c0      	movs	r3, #192	; 0xc0
    4352:	005b      	lsls	r3, r3, #1
    4354:	58d2      	ldr	r2, [r2, r3]
    4356:	4924      	ldr	r1, [pc, #144]	; (43e8 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xbc>)
    4358:	2300      	movs	r3, #0
    435a:	4291      	cmp	r1, r2
    435c:	415b      	adcs	r3, r3
    435e:	b2db      	uxtb	r3, r3
    4360:	2b00      	cmp	r3, #0
    4362:	d009      	beq.n	4378 <_ZN15NMIButton_Class16ModulateStepTimeEv+0x4c>
		{
			lighter.stepTime+=COUNTER_TIME;
    4364:	4a1f      	ldr	r2, [pc, #124]	; (43e4 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    4366:	23c0      	movs	r3, #192	; 0xc0
    4368:	005b      	lsls	r3, r3, #1
    436a:	58d3      	ldr	r3, [r2, r3]
    436c:	1d19      	adds	r1, r3, #4
    436e:	4a1d      	ldr	r2, [pc, #116]	; (43e4 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    4370:	23c0      	movs	r3, #192	; 0xc0
    4372:	005b      	lsls	r3, r3, #1
    4374:	50d1      	str	r1, [r2, r3]
    4376:	e02d      	b.n	43d4 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xa8>
		}
		else
		{
			lighter.stepTime-=COUNTER_TIME;
    4378:	4a1a      	ldr	r2, [pc, #104]	; (43e4 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    437a:	23c0      	movs	r3, #192	; 0xc0
    437c:	005b      	lsls	r3, r3, #1
    437e:	58d3      	ldr	r3, [r2, r3]
    4380:	1f19      	subs	r1, r3, #4
    4382:	4a18      	ldr	r2, [pc, #96]	; (43e4 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    4384:	23c0      	movs	r3, #192	; 0xc0
    4386:	005b      	lsls	r3, r3, #1
    4388:	50d1      	str	r1, [r2, r3]
			direction=true;
    438a:	687b      	ldr	r3, [r7, #4]
    438c:	2201      	movs	r2, #1
    438e:	711a      	strb	r2, [r3, #4]
    4390:	e020      	b.n	43d4 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xa8>
		}
	}
	else
	{
		if (lighter.stepTime<COUNTER_TIME)
    4392:	4a14      	ldr	r2, [pc, #80]	; (43e4 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    4394:	23c0      	movs	r3, #192	; 0xc0
    4396:	005b      	lsls	r3, r3, #1
    4398:	58d2      	ldr	r2, [r2, r3]
    439a:	2103      	movs	r1, #3
    439c:	2300      	movs	r3, #0
    439e:	4291      	cmp	r1, r2
    43a0:	415b      	adcs	r3, r3
    43a2:	b2db      	uxtb	r3, r3
    43a4:	2b00      	cmp	r3, #0
    43a6:	d00c      	beq.n	43c2 <_ZN15NMIButton_Class16ModulateStepTimeEv+0x96>
		{
			lighter.stepTime+=COUNTER_TIME;
    43a8:	4a0e      	ldr	r2, [pc, #56]	; (43e4 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    43aa:	23c0      	movs	r3, #192	; 0xc0
    43ac:	005b      	lsls	r3, r3, #1
    43ae:	58d3      	ldr	r3, [r2, r3]
    43b0:	1d19      	adds	r1, r3, #4
    43b2:	4a0c      	ldr	r2, [pc, #48]	; (43e4 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    43b4:	23c0      	movs	r3, #192	; 0xc0
    43b6:	005b      	lsls	r3, r3, #1
    43b8:	50d1      	str	r1, [r2, r3]
			direction=false;
    43ba:	687b      	ldr	r3, [r7, #4]
    43bc:	2200      	movs	r2, #0
    43be:	711a      	strb	r2, [r3, #4]
    43c0:	e008      	b.n	43d4 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xa8>
		}
		else
		{
			lighter.stepTime-=COUNTER_TIME;
    43c2:	4a08      	ldr	r2, [pc, #32]	; (43e4 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    43c4:	23c0      	movs	r3, #192	; 0xc0
    43c6:	005b      	lsls	r3, r3, #1
    43c8:	58d3      	ldr	r3, [r2, r3]
    43ca:	1f19      	subs	r1, r3, #4
    43cc:	4a05      	ldr	r2, [pc, #20]	; (43e4 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    43ce:	23c0      	movs	r3, #192	; 0xc0
    43d0:	005b      	lsls	r3, r3, #1
    43d2:	50d1      	str	r1, [r2, r3]
			
		}
	}
	return	lighter.stepTime;
    43d4:	4a03      	ldr	r2, [pc, #12]	; (43e4 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    43d6:	23c0      	movs	r3, #192	; 0xc0
    43d8:	005b      	lsls	r3, r3, #1
    43da:	58d3      	ldr	r3, [r2, r3]
}
    43dc:	0018      	movs	r0, r3
    43de:	46bd      	mov	sp, r7
    43e0:	b002      	add	sp, #8
    43e2:	bd80      	pop	{r7, pc}
    43e4:	20000544 	.word	0x20000544
    43e8:	00000f9f 	.word	0x00000f9f

000043ec <_ZN15NMIButton_Class9OnReleaseEv>:
	
uint32_t NMIButton_Class::OnRelease(void){
    43ec:	b580      	push	{r7, lr}
    43ee:	b082      	sub	sp, #8
    43f0:	af00      	add	r7, sp, #0
    43f2:	6078      	str	r0, [r7, #4]
	if (IsButtonPressed()){
    43f4:	687b      	ldr	r3, [r7, #4]
    43f6:	0018      	movs	r0, r3
    43f8:	4b0e      	ldr	r3, [pc, #56]	; (4434 <_ZN15NMIButton_Class9OnReleaseEv+0x48>)
    43fa:	4798      	blx	r3
    43fc:	1e03      	subs	r3, r0, #0
    43fe:	d002      	beq.n	4406 <_ZN15NMIButton_Class9OnReleaseEv+0x1a>
			if ((modulate))
    4400:	687b      	ldr	r3, [r7, #4]
    4402:	789b      	ldrb	r3, [r3, #2]
    4404:	e010      	b.n	4428 <_ZN15NMIButton_Class9OnReleaseEv+0x3c>
				//butttonTimer.stop();
				//butttonTimer.Start_oneShot_task((FUNC_PTR)IncrementDutyCycle,COUNTER_TIME);
				
			}
	}else{
				butttonTimer.stop();
    4406:	4b0c      	ldr	r3, [pc, #48]	; (4438 <_ZN15NMIButton_Class9OnReleaseEv+0x4c>)
    4408:	0018      	movs	r0, r3
    440a:	4b0c      	ldr	r3, [pc, #48]	; (443c <_ZN15NMIButton_Class9OnReleaseEv+0x50>)
    440c:	4798      	blx	r3
				butttonTimer.remove_task();
    440e:	4b0a      	ldr	r3, [pc, #40]	; (4438 <_ZN15NMIButton_Class9OnReleaseEv+0x4c>)
    4410:	0018      	movs	r0, r3
    4412:	4b0b      	ldr	r3, [pc, #44]	; (4440 <_ZN15NMIButton_Class9OnReleaseEv+0x54>)
    4414:	4798      	blx	r3
				stepTime=lighter.stepTime;
    4416:	4a0b      	ldr	r2, [pc, #44]	; (4444 <_ZN15NMIButton_Class9OnReleaseEv+0x58>)
    4418:	23c0      	movs	r3, #192	; 0xc0
    441a:	005b      	lsls	r3, r3, #1
    441c:	58d2      	ldr	r2, [r2, r3]
    441e:	687b      	ldr	r3, [r7, #4]
    4420:	60da      	str	r2, [r3, #12]
				pressedTimerStarted=false;
    4422:	687b      	ldr	r3, [r7, #4]
    4424:	2200      	movs	r2, #0
    4426:	705a      	strb	r2, [r3, #1]
				
	}

	return	stepTime;
    4428:	687b      	ldr	r3, [r7, #4]
    442a:	68db      	ldr	r3, [r3, #12]
}
    442c:	0018      	movs	r0, r3
    442e:	46bd      	mov	sp, r7
    4430:	b002      	add	sp, #8
    4432:	bd80      	pop	{r7, pc}
    4434:	000041c9 	.word	0x000041c9
    4438:	200007f4 	.word	0x200007f4
    443c:	00004561 	.word	0x00004561
    4440:	00004659 	.word	0x00004659
    4444:	20000544 	.word	0x20000544

00004448 <_Z41__static_initialization_and_destruction_0ii>:

NMIButton_Class		nmi;
    4448:	b580      	push	{r7, lr}
    444a:	b082      	sub	sp, #8
    444c:	af00      	add	r7, sp, #0
    444e:	6078      	str	r0, [r7, #4]
    4450:	6039      	str	r1, [r7, #0]
    4452:	687b      	ldr	r3, [r7, #4]
    4454:	2b01      	cmp	r3, #1
    4456:	d10d      	bne.n	4474 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    4458:	683b      	ldr	r3, [r7, #0]
    445a:	4a08      	ldr	r2, [pc, #32]	; (447c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    445c:	4293      	cmp	r3, r2
    445e:	d109      	bne.n	4474 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    4460:	4b07      	ldr	r3, [pc, #28]	; (4480 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    4462:	0018      	movs	r0, r3
    4464:	4b07      	ldr	r3, [pc, #28]	; (4484 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    4466:	4798      	blx	r3
    4468:	4a07      	ldr	r2, [pc, #28]	; (4488 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    446a:	4908      	ldr	r1, [pc, #32]	; (448c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    446c:	4b04      	ldr	r3, [pc, #16]	; (4480 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    446e:	0018      	movs	r0, r3
    4470:	4b07      	ldr	r3, [pc, #28]	; (4490 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    4472:	4798      	blx	r3
    4474:	46c0      	nop			; (mov r8, r8)
    4476:	46bd      	mov	sp, r7
    4478:	b002      	add	sp, #8
    447a:	bd80      	pop	{r7, pc}
    447c:	0000ffff 	.word	0x0000ffff
    4480:	200007e0 	.word	0x200007e0
    4484:	00004199 	.word	0x00004199
    4488:	20000000 	.word	0x20000000
    448c:	000041b7 	.word	0x000041b7
    4490:	00005165 	.word	0x00005165

00004494 <_GLOBAL__sub_I__ZN15NMIButton_ClassC2Ev>:
    4494:	b580      	push	{r7, lr}
    4496:	af00      	add	r7, sp, #0
    4498:	4b03      	ldr	r3, [pc, #12]	; (44a8 <_GLOBAL__sub_I__ZN15NMIButton_ClassC2Ev+0x14>)
    449a:	0019      	movs	r1, r3
    449c:	2001      	movs	r0, #1
    449e:	4b03      	ldr	r3, [pc, #12]	; (44ac <_GLOBAL__sub_I__ZN15NMIButton_ClassC2Ev+0x18>)
    44a0:	4798      	blx	r3
    44a2:	46bd      	mov	sp, r7
    44a4:	bd80      	pop	{r7, pc}
    44a6:	46c0      	nop			; (mov r8, r8)
    44a8:	0000ffff 	.word	0x0000ffff
    44ac:	00004449 	.word	0x00004449

000044b0 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    44b0:	b580      	push	{r7, lr}
    44b2:	b082      	sub	sp, #8
    44b4:	af00      	add	r7, sp, #0
    44b6:	6078      	str	r0, [r7, #4]
	ptrTimerClass->setTimeout();
    44b8:	4b04      	ldr	r3, [pc, #16]	; (44cc <_ZL7task_cbPK10timer_task+0x1c>)
    44ba:	681b      	ldr	r3, [r3, #0]
    44bc:	0018      	movs	r0, r3
    44be:	4b04      	ldr	r3, [pc, #16]	; (44d0 <_ZL7task_cbPK10timer_task+0x20>)
    44c0:	4798      	blx	r3
}
    44c2:	46c0      	nop			; (mov r8, r8)
    44c4:	46bd      	mov	sp, r7
    44c6:	b002      	add	sp, #8
    44c8:	bd80      	pop	{r7, pc}
    44ca:	46c0      	nop			; (mov r8, r8)
    44cc:	200007f0 	.word	0x200007f0
    44d0:	0000458d 	.word	0x0000458d

000044d4 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task.cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    44d4:	b580      	push	{r7, lr}
    44d6:	b082      	sub	sp, #8
    44d8:	af00      	add	r7, sp, #0
    44da:	6078      	str	r0, [r7, #4]
    44dc:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    44de:	687b      	ldr	r3, [r7, #4]
    44e0:	683a      	ldr	r2, [r7, #0]
    44e2:	609a      	str	r2, [r3, #8]
	ptrTimerClass=this;
    44e4:	4b07      	ldr	r3, [pc, #28]	; (4504 <_ZN11Timer_ClassC1EP16timer_descriptor+0x30>)
    44e6:	687a      	ldr	r2, [r7, #4]
    44e8:	601a      	str	r2, [r3, #0]
	clockCycles=1024;
    44ea:	687b      	ldr	r3, [r7, #4]
    44ec:	2280      	movs	r2, #128	; 0x80
    44ee:	00d2      	lsls	r2, r2, #3
    44f0:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    44f2:	687b      	ldr	r3, [r7, #4]
    44f4:	4a04      	ldr	r2, [pc, #16]	; (4508 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    44f6:	621a      	str	r2, [r3, #32]
} //Timer_Class
    44f8:	687b      	ldr	r3, [r7, #4]
    44fa:	0018      	movs	r0, r3
    44fc:	46bd      	mov	sp, r7
    44fe:	b002      	add	sp, #8
    4500:	bd80      	pop	{r7, pc}
    4502:	46c0      	nop			; (mov r8, r8)
    4504:	200007f0 	.word	0x200007f0
    4508:	000044b1 	.word	0x000044b1

0000450c <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    450c:	b580      	push	{r7, lr}
    450e:	b082      	sub	sp, #8
    4510:	af00      	add	r7, sp, #0
    4512:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    4514:	687b      	ldr	r3, [r7, #4]
    4516:	2200      	movs	r2, #0
    4518:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    451a:	687b      	ldr	r3, [r7, #4]
    451c:	0018      	movs	r0, r3
    451e:	46bd      	mov	sp, r7
    4520:	b002      	add	sp, #8
    4522:	bd80      	pop	{r7, pc}

00004524 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
void Timer_Class::Init(void){
    4524:	b580      	push	{r7, lr}
    4526:	b082      	sub	sp, #8
    4528:	af00      	add	r7, sp, #0
    452a:	6078      	str	r0, [r7, #4]
	ticks=0;
    452c:	687b      	ldr	r3, [r7, #4]
    452e:	2200      	movs	r2, #0
    4530:	629a      	str	r2, [r3, #40]	; 0x28
}
    4532:	46c0      	nop			; (mov r8, r8)
    4534:	46bd      	mov	sp, r7
    4536:	b002      	add	sp, #8
    4538:	bd80      	pop	{r7, pc}
	...

0000453c <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
    453c:	b580      	push	{r7, lr}
    453e:	b084      	sub	sp, #16
    4540:	af00      	add	r7, sp, #0
    4542:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    4544:	687b      	ldr	r3, [r7, #4]
    4546:	689b      	ldr	r3, [r3, #8]
    4548:	0018      	movs	r0, r3
    454a:	4b04      	ldr	r3, [pc, #16]	; (455c <_ZN11Timer_Class5startEv+0x20>)
    454c:	4798      	blx	r3
    454e:	0003      	movs	r3, r0
    4550:	60fb      	str	r3, [r7, #12]
	return status;
    4552:	68fb      	ldr	r3, [r7, #12]
	
}
    4554:	0018      	movs	r0, r3
    4556:	46bd      	mov	sp, r7
    4558:	b004      	add	sp, #16
    455a:	bd80      	pop	{r7, pc}
    455c:	00000cb5 	.word	0x00000cb5

00004560 <_ZN11Timer_Class4stopEv>:

int32_t Timer_Class::stop( void){
    4560:	b580      	push	{r7, lr}
    4562:	b084      	sub	sp, #16
    4564:	af00      	add	r7, sp, #0
    4566:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    4568:	687b      	ldr	r3, [r7, #4]
    456a:	689b      	ldr	r3, [r3, #8]
    456c:	0018      	movs	r0, r3
    456e:	4b06      	ldr	r3, [pc, #24]	; (4588 <_ZN11Timer_Class4stopEv+0x28>)
    4570:	4798      	blx	r3
    4572:	0003      	movs	r3, r0
    4574:	60fb      	str	r3, [r7, #12]
	timeout=0;
    4576:	687b      	ldr	r3, [r7, #4]
    4578:	2200      	movs	r2, #0
    457a:	705a      	strb	r2, [r3, #1]
	return status;
    457c:	68fb      	ldr	r3, [r7, #12]
}
    457e:	0018      	movs	r0, r3
    4580:	46bd      	mov	sp, r7
    4582:	b004      	add	sp, #16
    4584:	bd80      	pop	{r7, pc}
    4586:	46c0      	nop			; (mov r8, r8)
    4588:	00000cf9 	.word	0x00000cf9

0000458c <_ZN11Timer_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void Timer_Class::setTimeout(){
    458c:	b580      	push	{r7, lr}
    458e:	b082      	sub	sp, #8
    4590:	af00      	add	r7, sp, #0
    4592:	6078      	str	r0, [r7, #4]
	timeout=1;
    4594:	687b      	ldr	r3, [r7, #4]
    4596:	2201      	movs	r2, #1
    4598:	705a      	strb	r2, [r3, #1]
}
    459a:	46c0      	nop			; (mov r8, r8)
    459c:	46bd      	mov	sp, r7
    459e:	b002      	add	sp, #8
    45a0:	bd80      	pop	{r7, pc}
	...

000045a4 <_ZN11Timer_Class8add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t Timer_Class::add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    45a4:	b580      	push	{r7, lr}
    45a6:	b086      	sub	sp, #24
    45a8:	af00      	add	r7, sp, #0
    45aa:	60f8      	str	r0, [r7, #12]
    45ac:	60b9      	str	r1, [r7, #8]
    45ae:	607a      	str	r2, [r7, #4]
    45b0:	001a      	movs	r2, r3
    45b2:	1cfb      	adds	r3, r7, #3
    45b4:	701a      	strb	r2, [r3, #0]
	int32_t	status;

	task.interval = interval;
    45b6:	68fb      	ldr	r3, [r7, #12]
    45b8:	687a      	ldr	r2, [r7, #4]
    45ba:	61da      	str	r2, [r3, #28]
	task.cb       = (timer_cb_t)func;
    45bc:	68fb      	ldr	r3, [r7, #12]
    45be:	68ba      	ldr	r2, [r7, #8]
    45c0:	621a      	str	r2, [r3, #32]
	task.mode     = modeTask;
    45c2:	68fb      	ldr	r3, [r7, #12]
    45c4:	1cfa      	adds	r2, r7, #3
    45c6:	2124      	movs	r1, #36	; 0x24
    45c8:	7812      	ldrb	r2, [r2, #0]
    45ca:	545a      	strb	r2, [r3, r1]
	status=timer_add_task(timer_descr, &task);
    45cc:	68fb      	ldr	r3, [r7, #12]
    45ce:	689a      	ldr	r2, [r3, #8]
    45d0:	68fb      	ldr	r3, [r7, #12]
    45d2:	3314      	adds	r3, #20
    45d4:	0019      	movs	r1, r3
    45d6:	0010      	movs	r0, r2
    45d8:	4b04      	ldr	r3, [pc, #16]	; (45ec <_ZN11Timer_Class8add_taskEPFvvEm15timer_task_mode+0x48>)
    45da:	4798      	blx	r3
    45dc:	0003      	movs	r3, r0
    45de:	617b      	str	r3, [r7, #20]
	
	return status;
    45e0:	697b      	ldr	r3, [r7, #20]
}
    45e2:	0018      	movs	r0, r3
    45e4:	46bd      	mov	sp, r7
    45e6:	b006      	add	sp, #24
    45e8:	bd80      	pop	{r7, pc}
    45ea:	46c0      	nop			; (mov r8, r8)
    45ec:	00000d3d 	.word	0x00000d3d

000045f0 <_ZN11Timer_Class17add_periodic_taskEPFvvEm>:
int32_t Timer_Class::add_periodic_task(FUNC_PTR func,uint32_t interval){
    45f0:	b590      	push	{r4, r7, lr}
    45f2:	b087      	sub	sp, #28
    45f4:	af00      	add	r7, sp, #0
    45f6:	60f8      	str	r0, [r7, #12]
    45f8:	60b9      	str	r1, [r7, #8]
    45fa:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_REPEAT);
    45fc:	687a      	ldr	r2, [r7, #4]
    45fe:	68b9      	ldr	r1, [r7, #8]
    4600:	68f8      	ldr	r0, [r7, #12]
    4602:	2301      	movs	r3, #1
    4604:	4c04      	ldr	r4, [pc, #16]	; (4618 <_ZN11Timer_Class17add_periodic_taskEPFvvEm+0x28>)
    4606:	47a0      	blx	r4
    4608:	0003      	movs	r3, r0
    460a:	617b      	str	r3, [r7, #20]
		return status;
    460c:	697b      	ldr	r3, [r7, #20]
}
    460e:	0018      	movs	r0, r3
    4610:	46bd      	mov	sp, r7
    4612:	b007      	add	sp, #28
    4614:	bd90      	pop	{r4, r7, pc}
    4616:	46c0      	nop			; (mov r8, r8)
    4618:	000045a5 	.word	0x000045a5

0000461c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:
int32_t Timer_Class::add_oneShot_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_ONE_SHOT);
	return status;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    461c:	b590      	push	{r4, r7, lr}
    461e:	b087      	sub	sp, #28
    4620:	af00      	add	r7, sp, #0
    4622:	60f8      	str	r0, [r7, #12]
    4624:	60b9      	str	r1, [r7, #8]
    4626:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_ONE_SHOT);
    4628:	687a      	ldr	r2, [r7, #4]
    462a:	68b9      	ldr	r1, [r7, #8]
    462c:	68f8      	ldr	r0, [r7, #12]
    462e:	2300      	movs	r3, #0
    4630:	4c07      	ldr	r4, [pc, #28]	; (4650 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x34>)
    4632:	47a0      	blx	r4
    4634:	0003      	movs	r3, r0
    4636:	617b      	str	r3, [r7, #20]
	status=timer_start(timer_descr);
    4638:	68fb      	ldr	r3, [r7, #12]
    463a:	689b      	ldr	r3, [r3, #8]
    463c:	0018      	movs	r0, r3
    463e:	4b05      	ldr	r3, [pc, #20]	; (4654 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x38>)
    4640:	4798      	blx	r3
    4642:	0003      	movs	r3, r0
    4644:	617b      	str	r3, [r7, #20]
	return status;
    4646:	697b      	ldr	r3, [r7, #20]
}
    4648:	0018      	movs	r0, r3
    464a:	46bd      	mov	sp, r7
    464c:	b007      	add	sp, #28
    464e:	bd90      	pop	{r4, r7, pc}
    4650:	000045a5 	.word	0x000045a5
    4654:	00000cb5 	.word	0x00000cb5

00004658 <_ZN11Timer_Class11remove_taskEv>:

void	Timer_Class::remove_task(void){
    4658:	b580      	push	{r7, lr}
    465a:	b082      	sub	sp, #8
    465c:	af00      	add	r7, sp, #0
    465e:	6078      	str	r0, [r7, #4]
	timer_remove_task(timer_descr, &task);
    4660:	687b      	ldr	r3, [r7, #4]
    4662:	689a      	ldr	r2, [r3, #8]
    4664:	687b      	ldr	r3, [r7, #4]
    4666:	3314      	adds	r3, #20
    4668:	0019      	movs	r1, r3
    466a:	0010      	movs	r0, r2
    466c:	4b02      	ldr	r3, [pc, #8]	; (4678 <_ZN11Timer_Class11remove_taskEv+0x20>)
    466e:	4798      	blx	r3
}
    4670:	46c0      	nop			; (mov r8, r8)
    4672:	46bd      	mov	sp, r7
    4674:	b002      	add	sp, #8
    4676:	bd80      	pop	{r7, pc}
    4678:	00000ded 	.word	0x00000ded

0000467c <_Z41__static_initialization_and_destruction_0ii>:
	return ticks;
}

Timer_Class butttonTimer(&TIMER_2);
Timer_Class	ledTimer(&TIMER_1);
Timer_Class	pwmTimer(&TIMER_3);
    467c:	b580      	push	{r7, lr}
    467e:	b082      	sub	sp, #8
    4680:	af00      	add	r7, sp, #0
    4682:	6078      	str	r0, [r7, #4]
    4684:	6039      	str	r1, [r7, #0]
    4686:	687b      	ldr	r3, [r7, #4]
    4688:	2b01      	cmp	r3, #1
    468a:	d127      	bne.n	46dc <_Z41__static_initialization_and_destruction_0ii+0x60>
    468c:	683b      	ldr	r3, [r7, #0]
    468e:	4a15      	ldr	r2, [pc, #84]	; (46e4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    4690:	4293      	cmp	r3, r2
    4692:	d123      	bne.n	46dc <_Z41__static_initialization_and_destruction_0ii+0x60>
Timer_Class butttonTimer(&TIMER_2);
    4694:	4a14      	ldr	r2, [pc, #80]	; (46e8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    4696:	4b15      	ldr	r3, [pc, #84]	; (46ec <_Z41__static_initialization_and_destruction_0ii+0x70>)
    4698:	0011      	movs	r1, r2
    469a:	0018      	movs	r0, r3
    469c:	4b14      	ldr	r3, [pc, #80]	; (46f0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    469e:	4798      	blx	r3
    46a0:	4a14      	ldr	r2, [pc, #80]	; (46f4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    46a2:	4915      	ldr	r1, [pc, #84]	; (46f8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    46a4:	4b11      	ldr	r3, [pc, #68]	; (46ec <_Z41__static_initialization_and_destruction_0ii+0x70>)
    46a6:	0018      	movs	r0, r3
    46a8:	4b14      	ldr	r3, [pc, #80]	; (46fc <_Z41__static_initialization_and_destruction_0ii+0x80>)
    46aa:	4798      	blx	r3
Timer_Class	ledTimer(&TIMER_1);
    46ac:	4a14      	ldr	r2, [pc, #80]	; (4700 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    46ae:	4b15      	ldr	r3, [pc, #84]	; (4704 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    46b0:	0011      	movs	r1, r2
    46b2:	0018      	movs	r0, r3
    46b4:	4b0e      	ldr	r3, [pc, #56]	; (46f0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    46b6:	4798      	blx	r3
    46b8:	4a0e      	ldr	r2, [pc, #56]	; (46f4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    46ba:	490f      	ldr	r1, [pc, #60]	; (46f8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    46bc:	4b11      	ldr	r3, [pc, #68]	; (4704 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    46be:	0018      	movs	r0, r3
    46c0:	4b0e      	ldr	r3, [pc, #56]	; (46fc <_Z41__static_initialization_and_destruction_0ii+0x80>)
    46c2:	4798      	blx	r3
Timer_Class	pwmTimer(&TIMER_3);
    46c4:	4a10      	ldr	r2, [pc, #64]	; (4708 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    46c6:	4b11      	ldr	r3, [pc, #68]	; (470c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    46c8:	0011      	movs	r1, r2
    46ca:	0018      	movs	r0, r3
    46cc:	4b08      	ldr	r3, [pc, #32]	; (46f0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    46ce:	4798      	blx	r3
    46d0:	4a08      	ldr	r2, [pc, #32]	; (46f4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    46d2:	4909      	ldr	r1, [pc, #36]	; (46f8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    46d4:	4b0d      	ldr	r3, [pc, #52]	; (470c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    46d6:	0018      	movs	r0, r3
    46d8:	4b08      	ldr	r3, [pc, #32]	; (46fc <_Z41__static_initialization_and_destruction_0ii+0x80>)
    46da:	4798      	blx	r3
    46dc:	46c0      	nop			; (mov r8, r8)
    46de:	46bd      	mov	sp, r7
    46e0:	b002      	add	sp, #8
    46e2:	bd80      	pop	{r7, pc}
    46e4:	0000ffff 	.word	0x0000ffff
    46e8:	20000940 	.word	0x20000940
    46ec:	200007f4 	.word	0x200007f4
    46f0:	000044d5 	.word	0x000044d5
    46f4:	20000000 	.word	0x20000000
    46f8:	0000450d 	.word	0x0000450d
    46fc:	00005165 	.word	0x00005165
    4700:	2000097c 	.word	0x2000097c
    4704:	20000820 	.word	0x20000820
    4708:	200009b4 	.word	0x200009b4
    470c:	2000084c 	.word	0x2000084c

00004710 <_GLOBAL__sub_I_ptrTimerClass>:
    4710:	b580      	push	{r7, lr}
    4712:	af00      	add	r7, sp, #0
    4714:	4b03      	ldr	r3, [pc, #12]	; (4724 <_GLOBAL__sub_I_ptrTimerClass+0x14>)
    4716:	0019      	movs	r1, r3
    4718:	2001      	movs	r0, #1
    471a:	4b03      	ldr	r3, [pc, #12]	; (4728 <_GLOBAL__sub_I_ptrTimerClass+0x18>)
    471c:	4798      	blx	r3
    471e:	46bd      	mov	sp, r7
    4720:	bd80      	pop	{r7, pc}
    4722:	46c0      	nop			; (mov r8, r8)
    4724:	0000ffff 	.word	0x0000ffff
    4728:	0000467d 	.word	0x0000467d

0000472c <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    472c:	b580      	push	{r7, lr}
    472e:	b084      	sub	sp, #16
    4730:	af00      	add	r7, sp, #0
    4732:	60f8      	str	r0, [r7, #12]
    4734:	607a      	str	r2, [r7, #4]
    4736:	230b      	movs	r3, #11
    4738:	18fb      	adds	r3, r7, r3
    473a:	1c0a      	adds	r2, r1, #0
    473c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    473e:	230b      	movs	r3, #11
    4740:	18fb      	adds	r3, r7, r3
    4742:	781b      	ldrb	r3, [r3, #0]
    4744:	68fa      	ldr	r2, [r7, #12]
    4746:	01db      	lsls	r3, r3, #7
    4748:	18d3      	adds	r3, r2, r3
    474a:	3318      	adds	r3, #24
    474c:	687a      	ldr	r2, [r7, #4]
    474e:	601a      	str	r2, [r3, #0]
}
    4750:	46c0      	nop			; (mov r8, r8)
    4752:	46bd      	mov	sp, r7
    4754:	b004      	add	sp, #16
    4756:	bd80      	pop	{r7, pc}

00004758 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    4758:	b580      	push	{r7, lr}
    475a:	b084      	sub	sp, #16
    475c:	af00      	add	r7, sp, #0
    475e:	60f8      	str	r0, [r7, #12]
    4760:	607a      	str	r2, [r7, #4]
    4762:	230b      	movs	r3, #11
    4764:	18fb      	adds	r3, r7, r3
    4766:	1c0a      	adds	r2, r1, #0
    4768:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    476a:	230b      	movs	r3, #11
    476c:	18fb      	adds	r3, r7, r3
    476e:	781b      	ldrb	r3, [r3, #0]
    4770:	68fa      	ldr	r2, [r7, #12]
    4772:	01db      	lsls	r3, r3, #7
    4774:	18d3      	adds	r3, r2, r3
    4776:	3314      	adds	r3, #20
    4778:	687a      	ldr	r2, [r7, #4]
    477a:	601a      	str	r2, [r3, #0]
}
    477c:	46c0      	nop			; (mov r8, r8)
    477e:	46bd      	mov	sp, r7
    4780:	b004      	add	sp, #16
    4782:	bd80      	pop	{r7, pc}

00004784 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    4784:	b580      	push	{r7, lr}
    4786:	b082      	sub	sp, #8
    4788:	af00      	add	r7, sp, #0
    478a:	6039      	str	r1, [r7, #0]
    478c:	0011      	movs	r1, r2
    478e:	1dfb      	adds	r3, r7, #7
    4790:	1c02      	adds	r2, r0, #0
    4792:	701a      	strb	r2, [r3, #0]
    4794:	1dbb      	adds	r3, r7, #6
    4796:	1c0a      	adds	r2, r1, #0
    4798:	701a      	strb	r2, [r3, #0]
	if (level) {
    479a:	1dbb      	adds	r3, r7, #6
    479c:	781b      	ldrb	r3, [r3, #0]
    479e:	2b00      	cmp	r3, #0
    47a0:	d008      	beq.n	47b4 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    47a2:	683a      	ldr	r2, [r7, #0]
    47a4:	1dfb      	adds	r3, r7, #7
    47a6:	7819      	ldrb	r1, [r3, #0]
    47a8:	23c0      	movs	r3, #192	; 0xc0
    47aa:	05db      	lsls	r3, r3, #23
    47ac:	0018      	movs	r0, r3
    47ae:	4b07      	ldr	r3, [pc, #28]	; (47cc <_gpio_set_level+0x48>)
    47b0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
    47b2:	e007      	b.n	47c4 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    47b4:	683a      	ldr	r2, [r7, #0]
    47b6:	1dfb      	adds	r3, r7, #7
    47b8:	7819      	ldrb	r1, [r3, #0]
    47ba:	23c0      	movs	r3, #192	; 0xc0
    47bc:	05db      	lsls	r3, r3, #23
    47be:	0018      	movs	r0, r3
    47c0:	4b03      	ldr	r3, [pc, #12]	; (47d0 <_gpio_set_level+0x4c>)
    47c2:	4798      	blx	r3
}
    47c4:	46c0      	nop			; (mov r8, r8)
    47c6:	46bd      	mov	sp, r7
    47c8:	b002      	add	sp, #8
    47ca:	bd80      	pop	{r7, pc}
    47cc:	0000472d 	.word	0x0000472d
    47d0:	00004759 	.word	0x00004759

000047d4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    47d4:	b580      	push	{r7, lr}
    47d6:	b082      	sub	sp, #8
    47d8:	af00      	add	r7, sp, #0
    47da:	0002      	movs	r2, r0
    47dc:	1dfb      	adds	r3, r7, #7
    47de:	701a      	strb	r2, [r3, #0]
    47e0:	1dbb      	adds	r3, r7, #6
    47e2:	1c0a      	adds	r2, r1, #0
    47e4:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    47e6:	1dfb      	adds	r3, r7, #7
    47e8:	781b      	ldrb	r3, [r3, #0]
    47ea:	115b      	asrs	r3, r3, #5
    47ec:	b2d8      	uxtb	r0, r3
    47ee:	1dfb      	adds	r3, r7, #7
    47f0:	781b      	ldrb	r3, [r3, #0]
    47f2:	001a      	movs	r2, r3
    47f4:	231f      	movs	r3, #31
    47f6:	4013      	ands	r3, r2
    47f8:	2201      	movs	r2, #1
    47fa:	409a      	lsls	r2, r3
    47fc:	0011      	movs	r1, r2
    47fe:	1dbb      	adds	r3, r7, #6
    4800:	781b      	ldrb	r3, [r3, #0]
    4802:	001a      	movs	r2, r3
    4804:	4b02      	ldr	r3, [pc, #8]	; (4810 <gpio_set_pin_level+0x3c>)
    4806:	4798      	blx	r3
}
    4808:	46c0      	nop			; (mov r8, r8)
    480a:	46bd      	mov	sp, r7
    480c:	b002      	add	sp, #8
    480e:	bd80      	pop	{r7, pc}
    4810:	00004785 	.word	0x00004785

00004814 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryAddress=flashMemory;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
    4814:	b580      	push	{r7, lr}
    4816:	b082      	sub	sp, #8
    4818:	af00      	add	r7, sp, #0
    481a:	6078      	str	r0, [r7, #4]
    481c:	6039      	str	r1, [r7, #0]
    481e:	687b      	ldr	r3, [r7, #4]
    4820:	3390      	adds	r3, #144	; 0x90
    4822:	0018      	movs	r0, r3
    4824:	4b0b      	ldr	r3, [pc, #44]	; (4854 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x40>)
    4826:	4798      	blx	r3
{
	appParameters=defaultParameters;
    4828:	687b      	ldr	r3, [r7, #4]
    482a:	4a0b      	ldr	r2, [pc, #44]	; (4858 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x44>)
    482c:	3304      	adds	r3, #4
    482e:	0011      	movs	r1, r2
    4830:	227c      	movs	r2, #124	; 0x7c
    4832:	0018      	movs	r0, r3
    4834:	4b09      	ldr	r3, [pc, #36]	; (485c <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x48>)
    4836:	4798      	blx	r3
	spi_descriptor=spi_des;
    4838:	687b      	ldr	r3, [r7, #4]
    483a:	218c      	movs	r1, #140	; 0x8c
    483c:	683a      	ldr	r2, [r7, #0]
    483e:	505a      	str	r2, [r3, r1]
	memoryAddress=flashMemory;
    4840:	4b07      	ldr	r3, [pc, #28]	; (4860 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x4c>)
    4842:	681a      	ldr	r2, [r3, #0]
    4844:	687b      	ldr	r3, [r7, #4]
    4846:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
    4848:	687b      	ldr	r3, [r7, #4]
    484a:	0018      	movs	r0, r3
    484c:	46bd      	mov	sp, r7
    484e:	b002      	add	sp, #8
    4850:	bd80      	pop	{r7, pc}
    4852:	46c0      	nop			; (mov r8, r8)
    4854:	00004f8d 	.word	0x00004f8d
    4858:	000058d8 	.word	0x000058d8
    485c:	0000550d 	.word	0x0000550d
    4860:	20000878 	.word	0x20000878

00004864 <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
    4864:	b580      	push	{r7, lr}
    4866:	b082      	sub	sp, #8
    4868:	af00      	add	r7, sp, #0
    486a:	6078      	str	r0, [r7, #4]
    486c:	687b      	ldr	r3, [r7, #4]
    486e:	3390      	adds	r3, #144	; 0x90
    4870:	0018      	movs	r0, r3
    4872:	4b03      	ldr	r3, [pc, #12]	; (4880 <_ZN16FlashMemoryClassD1Ev+0x1c>)
    4874:	4798      	blx	r3
{
} //~FlashMemoryClass
    4876:	687b      	ldr	r3, [r7, #4]
    4878:	0018      	movs	r0, r3
    487a:	46bd      	mov	sp, r7
    487c:	b002      	add	sp, #8
    487e:	bd80      	pop	{r7, pc}
    4880:	00004fa9 	.word	0x00004fa9

00004884 <_ZN16FlashMemoryClass4InitEv>:
	flashOpen();
	//WriteStatusRegister(kFlashInitialStatus);
	flashClose();
	
}
void	FlashMemoryClass::Init(void){
    4884:	b580      	push	{r7, lr}
    4886:	b082      	sub	sp, #8
    4888:	af00      	add	r7, sp, #0
    488a:	6078      	str	r0, [r7, #4]
	spi.SetDescriptor(spi_descriptor);
    488c:	687b      	ldr	r3, [r7, #4]
    488e:	3390      	adds	r3, #144	; 0x90
    4890:	0018      	movs	r0, r3
    4892:	687b      	ldr	r3, [r7, #4]
    4894:	228c      	movs	r2, #140	; 0x8c
    4896:	589b      	ldr	r3, [r3, r2]
    4898:	0019      	movs	r1, r3
    489a:	4b0f      	ldr	r3, [pc, #60]	; (48d8 <_ZN16FlashMemoryClass4InitEv+0x54>)
    489c:	4798      	blx	r3
	spi.init();
    489e:	687b      	ldr	r3, [r7, #4]
    48a0:	3390      	adds	r3, #144	; 0x90
    48a2:	0018      	movs	r0, r3
    48a4:	4b0d      	ldr	r3, [pc, #52]	; (48dc <_ZN16FlashMemoryClass4InitEv+0x58>)
    48a6:	4798      	blx	r3


	memoryAddress=0x00;
    48a8:	687b      	ldr	r3, [r7, #4]
    48aa:	2200      	movs	r2, #0
    48ac:	601a      	str	r2, [r3, #0]
	
	flashOpen();
    48ae:	687b      	ldr	r3, [r7, #4]
    48b0:	0018      	movs	r0, r3
    48b2:	4b0b      	ldr	r3, [pc, #44]	; (48e0 <_ZN16FlashMemoryClass4InitEv+0x5c>)
    48b4:	4798      	blx	r3
//	WriteStatusRegister(0x02);
//	SoftwareReset();
//	ChipErase();
	status=ReadStatusRegister();
    48b6:	687b      	ldr	r3, [r7, #4]
    48b8:	0018      	movs	r0, r3
    48ba:	4b0a      	ldr	r3, [pc, #40]	; (48e4 <_ZN16FlashMemoryClass4InitEv+0x60>)
    48bc:	4798      	blx	r3
    48be:	0003      	movs	r3, r0
    48c0:	0019      	movs	r1, r3
    48c2:	687b      	ldr	r3, [r7, #4]
    48c4:	22bc      	movs	r2, #188	; 0xbc
    48c6:	5499      	strb	r1, [r3, r2]
//	functionsRegister=ReadFunctionRegister();
	
	flashClose();
    48c8:	687b      	ldr	r3, [r7, #4]
    48ca:	0018      	movs	r0, r3
    48cc:	4b06      	ldr	r3, [pc, #24]	; (48e8 <_ZN16FlashMemoryClass4InitEv+0x64>)
    48ce:	4798      	blx	r3
	
}
    48d0:	46c0      	nop			; (mov r8, r8)
    48d2:	46bd      	mov	sp, r7
    48d4:	b002      	add	sp, #8
    48d6:	bd80      	pop	{r7, pc}
    48d8:	00004ffd 	.word	0x00004ffd
    48dc:	00004fbd 	.word	0x00004fbd
    48e0:	000048ed 	.word	0x000048ed
    48e4:	00004c45 	.word	0x00004c45
    48e8:	00004cd9 	.word	0x00004cd9

000048ec <_ZN16FlashMemoryClass9flashOpenEv>:
}



void FlashMemoryClass::flashOpen(void)
{
    48ec:	b580      	push	{r7, lr}
    48ee:	b082      	sub	sp, #8
    48f0:	af00      	add	r7, sp, #0
    48f2:	6078      	str	r0, [r7, #4]
	garbage=spi.enable();
    48f4:	687b      	ldr	r3, [r7, #4]
    48f6:	3390      	adds	r3, #144	; 0x90
    48f8:	0018      	movs	r0, r3
    48fa:	4b05      	ldr	r3, [pc, #20]	; (4910 <_ZN16FlashMemoryClass9flashOpenEv+0x24>)
    48fc:	4798      	blx	r3
    48fe:	0003      	movs	r3, r0
    4900:	0019      	movs	r1, r3
    4902:	687b      	ldr	r3, [r7, #4]
    4904:	2280      	movs	r2, #128	; 0x80
    4906:	5099      	str	r1, [r3, r2]
	
	
}
    4908:	46c0      	nop			; (mov r8, r8)
    490a:	46bd      	mov	sp, r7
    490c:	b002      	add	sp, #8
    490e:	bd80      	pop	{r7, pc}
    4910:	00005021 	.word	0x00005021

00004914 <_ZN16FlashMemoryClass12CE_Low_FlashEv>:
	spi.read((uint8_t *)dest, (uint16_t)size);
	CE_High_Flash();
	return (uint8_t)src;
}
void FlashMemoryClass::CE_Low_Flash(void)
{
    4914:	b580      	push	{r7, lr}
    4916:	b082      	sub	sp, #8
    4918:	af00      	add	r7, sp, #0
    491a:	6078      	str	r0, [r7, #4]
	garbage=0;
    491c:	687b      	ldr	r3, [r7, #4]
    491e:	2280      	movs	r2, #128	; 0x80
    4920:	2100      	movs	r1, #0
    4922:	5099      	str	r1, [r3, r2]
		gpio_set_pin_level(CS_FLASH,
		// <y> Initial level
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);
    4924:	2100      	movs	r1, #0
    4926:	201b      	movs	r0, #27
    4928:	4b04      	ldr	r3, [pc, #16]	; (493c <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    492a:	4798      	blx	r3
		gpio_set_pin_level(CS_FRAM,true);
    492c:	2101      	movs	r1, #1
    492e:	201c      	movs	r0, #28
    4930:	4b02      	ldr	r3, [pc, #8]	; (493c <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    4932:	4798      	blx	r3
}
    4934:	46c0      	nop			; (mov r8, r8)
    4936:	46bd      	mov	sp, r7
    4938:	b002      	add	sp, #8
    493a:	bd80      	pop	{r7, pc}
    493c:	000047d5 	.word	0x000047d5

00004940 <_ZN16FlashMemoryClass13CE_High_FlashEv>:

void FlashMemoryClass::CE_High_Flash(void)
{
    4940:	b580      	push	{r7, lr}
    4942:	b082      	sub	sp, #8
    4944:	af00      	add	r7, sp, #0
    4946:	6078      	str	r0, [r7, #4]
	garbage=0;
    4948:	687b      	ldr	r3, [r7, #4]
    494a:	2280      	movs	r2, #128	; 0x80
    494c:	2100      	movs	r1, #0
    494e:	5099      	str	r1, [r3, r2]
	gpio_set_pin_level(CS_FLASH,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
    4950:	2101      	movs	r1, #1
    4952:	201b      	movs	r0, #27
    4954:	4b04      	ldr	r3, [pc, #16]	; (4968 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    4956:	4798      	blx	r3
	gpio_set_pin_level(CS_FRAM,true);
    4958:	2101      	movs	r1, #1
    495a:	201c      	movs	r0, #28
    495c:	4b02      	ldr	r3, [pc, #8]	; (4968 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    495e:	4798      	blx	r3
}
    4960:	46c0      	nop			; (mov r8, r8)
    4962:	46bd      	mov	sp, r7
    4964:	b002      	add	sp, #8
    4966:	bd80      	pop	{r7, pc}
    4968:	000047d5 	.word	0x000047d5

0000496c <_ZN16FlashMemoryClass9Send_ByteEh>:
uint8_t FlashMemoryClass::Send_Byte(uint8_t byte)
{
    496c:	b580      	push	{r7, lr}
    496e:	b082      	sub	sp, #8
    4970:	af00      	add	r7, sp, #0
    4972:	6078      	str	r0, [r7, #4]
    4974:	000a      	movs	r2, r1
    4976:	1cfb      	adds	r3, r7, #3
    4978:	701a      	strb	r2, [r3, #0]
	//WaitBusy();
	spi.write(&byte,1);
    497a:	687b      	ldr	r3, [r7, #4]
    497c:	3390      	adds	r3, #144	; 0x90
    497e:	1cf9      	adds	r1, r7, #3
    4980:	2201      	movs	r2, #1
    4982:	0018      	movs	r0, r3
    4984:	4b03      	ldr	r3, [pc, #12]	; (4994 <_ZN16FlashMemoryClass9Send_ByteEh+0x28>)
    4986:	4798      	blx	r3
	return byte;
    4988:	1cfb      	adds	r3, r7, #3
    498a:	781b      	ldrb	r3, [r3, #0]
}
    498c:	0018      	movs	r0, r3
    498e:	46bd      	mov	sp, r7
    4990:	b002      	add	sp, #8
    4992:	bd80      	pop	{r7, pc}
    4994:	0000505d 	.word	0x0000505d

00004998 <_ZN16FlashMemoryClass8Get_ByteEv>:

uint8_t FlashMemoryClass::Get_Byte(void)
{
    4998:	b580      	push	{r7, lr}
    499a:	b084      	sub	sp, #16
    499c:	af00      	add	r7, sp, #0
    499e:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	//WaitBusy();
	spi.read(&byte,1);
    49a0:	687b      	ldr	r3, [r7, #4]
    49a2:	3390      	adds	r3, #144	; 0x90
    49a4:	220f      	movs	r2, #15
    49a6:	18b9      	adds	r1, r7, r2
    49a8:	2201      	movs	r2, #1
    49aa:	0018      	movs	r0, r3
    49ac:	4b04      	ldr	r3, [pc, #16]	; (49c0 <_ZN16FlashMemoryClass8Get_ByteEv+0x28>)
    49ae:	4798      	blx	r3
	
	return byte;
    49b0:	230f      	movs	r3, #15
    49b2:	18fb      	adds	r3, r7, r3
    49b4:	781b      	ldrb	r3, [r3, #0]
}
    49b6:	0018      	movs	r0, r3
    49b8:	46bd      	mov	sp, r7
    49ba:	b004      	add	sp, #16
    49bc:	bd80      	pop	{r7, pc}
    49be:	46c0      	nop			; (mov r8, r8)
    49c0:	0000509d 	.word	0x0000509d

000049c4 <_ZN16FlashMemoryClass4WRENEv>:

void FlashMemoryClass::WREN(void)
{
    49c4:	b580      	push	{r7, lr}
    49c6:	b082      	sub	sp, #8
    49c8:	af00      	add	r7, sp, #0
    49ca:	6078      	str	r0, [r7, #4]
	do
	{
		CE_Low_Flash();			// enable device
    49cc:	687b      	ldr	r3, [r7, #4]
    49ce:	0018      	movs	r0, r3
    49d0:	4b0e      	ldr	r3, [pc, #56]	; (4a0c <_ZN16FlashMemoryClass4WRENEv+0x48>)
    49d2:	4798      	blx	r3
		Send_Byte(kFlashWREnable);	// send WREN command
    49d4:	687b      	ldr	r3, [r7, #4]
    49d6:	2106      	movs	r1, #6
    49d8:	0018      	movs	r0, r3
    49da:	4b0d      	ldr	r3, [pc, #52]	; (4a10 <_ZN16FlashMemoryClass4WRENEv+0x4c>)
    49dc:	4798      	blx	r3
		//WaitBusy();
		CE_High_Flash();
    49de:	687b      	ldr	r3, [r7, #4]
    49e0:	0018      	movs	r0, r3
    49e2:	4b0c      	ldr	r3, [pc, #48]	; (4a14 <_ZN16FlashMemoryClass4WRENEv+0x50>)
    49e4:	4798      	blx	r3
		status=ReadStatusRegister();
    49e6:	687b      	ldr	r3, [r7, #4]
    49e8:	0018      	movs	r0, r3
    49ea:	4b0b      	ldr	r3, [pc, #44]	; (4a18 <_ZN16FlashMemoryClass4WRENEv+0x54>)
    49ec:	4798      	blx	r3
    49ee:	0003      	movs	r3, r0
    49f0:	0019      	movs	r1, r3
    49f2:	687b      	ldr	r3, [r7, #4]
    49f4:	22bc      	movs	r2, #188	; 0xbc
    49f6:	5499      	strb	r1, [r3, r2]
	} while ((status&&(0x02))==0);
    49f8:	687b      	ldr	r3, [r7, #4]
    49fa:	22bc      	movs	r2, #188	; 0xbc
    49fc:	5c9b      	ldrb	r3, [r3, r2]
    49fe:	2b00      	cmp	r3, #0
    4a00:	d100      	bne.n	4a04 <_ZN16FlashMemoryClass4WRENEv+0x40>
	do
    4a02:	e7e3      	b.n	49cc <_ZN16FlashMemoryClass4WRENEv+0x8>

}
    4a04:	46c0      	nop			; (mov r8, r8)
    4a06:	46bd      	mov	sp, r7
    4a08:	b002      	add	sp, #8
    4a0a:	bd80      	pop	{r7, pc}
    4a0c:	00004915 	.word	0x00004915
    4a10:	0000496d 	.word	0x0000496d
    4a14:	00004941 	.word	0x00004941
    4a18:	00004c45 	.word	0x00004c45

00004a1c <_ZN16FlashMemoryClass4WRDIEv>:


void FlashMemoryClass::WRDI(void)
{
    4a1c:	b580      	push	{r7, lr}
    4a1e:	b082      	sub	sp, #8
    4a20:	af00      	add	r7, sp, #0
    4a22:	6078      	str	r0, [r7, #4]
	CE_Low_Flash();			// enable device
    4a24:	687b      	ldr	r3, [r7, #4]
    4a26:	0018      	movs	r0, r3
    4a28:	4b07      	ldr	r3, [pc, #28]	; (4a48 <_ZN16FlashMemoryClass4WRDIEv+0x2c>)
    4a2a:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
    4a2c:	687b      	ldr	r3, [r7, #4]
    4a2e:	2104      	movs	r1, #4
    4a30:	0018      	movs	r0, r3
    4a32:	4b06      	ldr	r3, [pc, #24]	; (4a4c <_ZN16FlashMemoryClass4WRDIEv+0x30>)
    4a34:	4798      	blx	r3
//	WaitBusy();
	CE_High_Flash();			// disable device
    4a36:	687b      	ldr	r3, [r7, #4]
    4a38:	0018      	movs	r0, r3
    4a3a:	4b05      	ldr	r3, [pc, #20]	; (4a50 <_ZN16FlashMemoryClass4WRDIEv+0x34>)
    4a3c:	4798      	blx	r3
	
}
    4a3e:	46c0      	nop			; (mov r8, r8)
    4a40:	46bd      	mov	sp, r7
    4a42:	b002      	add	sp, #8
    4a44:	bd80      	pop	{r7, pc}
    4a46:	46c0      	nop			; (mov r8, r8)
    4a48:	00004915 	.word	0x00004915
    4a4c:	0000496d 	.word	0x0000496d
    4a50:	00004941 	.word	0x00004941

00004a54 <_ZN16FlashMemoryClass10eraseFlashEmm>:
		return *srcPtr;

	}
	
void FlashMemoryClass::eraseFlash(uint32_t dest, uint32_t size)
	{
    4a54:	b580      	push	{r7, lr}
    4a56:	b086      	sub	sp, #24
    4a58:	af00      	add	r7, sp, #0
    4a5a:	60f8      	str	r0, [r7, #12]
    4a5c:	60b9      	str	r1, [r7, #8]
    4a5e:	607a      	str	r2, [r7, #4]
	uint32_t	eraseRemaining = size;
    4a60:	687b      	ldr	r3, [r7, #4]
    4a62:	617b      	str	r3, [r7, #20]
	uint32_t	eraseAddress = dest;
    4a64:	68bb      	ldr	r3, [r7, #8]
    4a66:	613b      	str	r3, [r7, #16]
	flashOpen();
    4a68:	68fb      	ldr	r3, [r7, #12]
    4a6a:	0018      	movs	r0, r3
    4a6c:	4b29      	ldr	r3, [pc, #164]	; (4b14 <_ZN16FlashMemoryClass10eraseFlashEmm+0xc0>)
    4a6e:	4798      	blx	r3
	while (eraseRemaining > 0)
    4a70:	697b      	ldr	r3, [r7, #20]
    4a72:	2b00      	cmp	r3, #0
    4a74:	d045      	beq.n	4b02 <_ZN16FlashMemoryClass10eraseFlashEmm+0xae>
	{
	WREN();
    4a76:	68fb      	ldr	r3, [r7, #12]
    4a78:	0018      	movs	r0, r3
    4a7a:	4b27      	ldr	r3, [pc, #156]	; (4b18 <_ZN16FlashMemoryClass10eraseFlashEmm+0xc4>)
    4a7c:	4798      	blx	r3
	if (eraseRemaining <= 4 * 1024)
    4a7e:	697a      	ldr	r2, [r7, #20]
    4a80:	2380      	movs	r3, #128	; 0x80
    4a82:	015b      	lsls	r3, r3, #5
    4a84:	429a      	cmp	r2, r3
    4a86:	d808      	bhi.n	4a9a <_ZN16FlashMemoryClass10eraseFlashEmm+0x46>
		{
		Sector_Erase(eraseAddress);
    4a88:	693a      	ldr	r2, [r7, #16]
    4a8a:	68fb      	ldr	r3, [r7, #12]
    4a8c:	0011      	movs	r1, r2
    4a8e:	0018      	movs	r0, r3
    4a90:	4b22      	ldr	r3, [pc, #136]	; (4b1c <_ZN16FlashMemoryClass10eraseFlashEmm+0xc8>)
    4a92:	4798      	blx	r3
		eraseRemaining = 0;
    4a94:	2300      	movs	r3, #0
    4a96:	617b      	str	r3, [r7, #20]
    4a98:	e02a      	b.n	4af0 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>
		}
	else if (eraseRemaining < 64 * 1024)
    4a9a:	697b      	ldr	r3, [r7, #20]
    4a9c:	4a20      	ldr	r2, [pc, #128]	; (4b20 <_ZN16FlashMemoryClass10eraseFlashEmm+0xcc>)
    4a9e:	4293      	cmp	r3, r2
    4aa0:	d811      	bhi.n	4ac6 <_ZN16FlashMemoryClass10eraseFlashEmm+0x72>
		{
		Sector_Erase(eraseAddress);
    4aa2:	693a      	ldr	r2, [r7, #16]
    4aa4:	68fb      	ldr	r3, [r7, #12]
    4aa6:	0011      	movs	r1, r2
    4aa8:	0018      	movs	r0, r3
    4aaa:	4b1c      	ldr	r3, [pc, #112]	; (4b1c <_ZN16FlashMemoryClass10eraseFlashEmm+0xc8>)
    4aac:	4798      	blx	r3
		eraseAddress += (4 * 1024);
    4aae:	693b      	ldr	r3, [r7, #16]
    4ab0:	2280      	movs	r2, #128	; 0x80
    4ab2:	0152      	lsls	r2, r2, #5
    4ab4:	4694      	mov	ip, r2
    4ab6:	4463      	add	r3, ip
    4ab8:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (4 * 1024);
    4aba:	697b      	ldr	r3, [r7, #20]
    4abc:	4a19      	ldr	r2, [pc, #100]	; (4b24 <_ZN16FlashMemoryClass10eraseFlashEmm+0xd0>)
    4abe:	4694      	mov	ip, r2
    4ac0:	4463      	add	r3, ip
    4ac2:	617b      	str	r3, [r7, #20]
    4ac4:	e014      	b.n	4af0 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>
		}

	else if (eraseRemaining >= 64 * 1024)
    4ac6:	697b      	ldr	r3, [r7, #20]
    4ac8:	4a15      	ldr	r2, [pc, #84]	; (4b20 <_ZN16FlashMemoryClass10eraseFlashEmm+0xcc>)
    4aca:	4293      	cmp	r3, r2
    4acc:	d910      	bls.n	4af0 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>
		{
		Block_Erase_64K(eraseAddress);
    4ace:	693a      	ldr	r2, [r7, #16]
    4ad0:	68fb      	ldr	r3, [r7, #12]
    4ad2:	0011      	movs	r1, r2
    4ad4:	0018      	movs	r0, r3
    4ad6:	4b14      	ldr	r3, [pc, #80]	; (4b28 <_ZN16FlashMemoryClass10eraseFlashEmm+0xd4>)
    4ad8:	4798      	blx	r3
		eraseAddress += (64 * 1024);
    4ada:	693b      	ldr	r3, [r7, #16]
    4adc:	2280      	movs	r2, #128	; 0x80
    4ade:	0252      	lsls	r2, r2, #9
    4ae0:	4694      	mov	ip, r2
    4ae2:	4463      	add	r3, ip
    4ae4:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (64 * 1024);
    4ae6:	697b      	ldr	r3, [r7, #20]
    4ae8:	4a10      	ldr	r2, [pc, #64]	; (4b2c <_ZN16FlashMemoryClass10eraseFlashEmm+0xd8>)
    4aea:	4694      	mov	ip, r2
    4aec:	4463      	add	r3, ip
    4aee:	617b      	str	r3, [r7, #20]
		Block_Erase_32K(eraseAddress);
		eraseAddress += (32 * 1024);
		eraseRemaining -= (32 * 1024);
		}
*/
	WaitBusy();
    4af0:	68fb      	ldr	r3, [r7, #12]
    4af2:	0018      	movs	r0, r3
    4af4:	4b0e      	ldr	r3, [pc, #56]	; (4b30 <_ZN16FlashMemoryClass10eraseFlashEmm+0xdc>)
    4af6:	4798      	blx	r3
	WRDI();
    4af8:	68fb      	ldr	r3, [r7, #12]
    4afa:	0018      	movs	r0, r3
    4afc:	4b0d      	ldr	r3, [pc, #52]	; (4b34 <_ZN16FlashMemoryClass10eraseFlashEmm+0xe0>)
    4afe:	4798      	blx	r3
	while (eraseRemaining > 0)
    4b00:	e7b6      	b.n	4a70 <_ZN16FlashMemoryClass10eraseFlashEmm+0x1c>
	}
	flashClose();
    4b02:	68fb      	ldr	r3, [r7, #12]
    4b04:	0018      	movs	r0, r3
    4b06:	4b0c      	ldr	r3, [pc, #48]	; (4b38 <_ZN16FlashMemoryClass10eraseFlashEmm+0xe4>)
    4b08:	4798      	blx	r3
}
    4b0a:	46c0      	nop			; (mov r8, r8)
    4b0c:	46bd      	mov	sp, r7
    4b0e:	b006      	add	sp, #24
    4b10:	bd80      	pop	{r7, pc}
    4b12:	46c0      	nop			; (mov r8, r8)
    4b14:	000048ed 	.word	0x000048ed
    4b18:	000049c5 	.word	0x000049c5
    4b1c:	00004d01 	.word	0x00004d01
    4b20:	0000ffff 	.word	0x0000ffff
    4b24:	fffff000 	.word	0xfffff000
    4b28:	00004b3d 	.word	0x00004b3d
    4b2c:	ffff0000 	.word	0xffff0000
    4b30:	00004ba5 	.word	0x00004ba5
    4b34:	00004a1d 	.word	0x00004a1d
    4b38:	00004cd9 	.word	0x00004cd9

00004b3c <_ZN16FlashMemoryClass15Block_Erase_64KEm>:
	
void	FlashMemoryClass::Block_Erase_64K(uint32_t Dst){
    4b3c:	b580      	push	{r7, lr}
    4b3e:	b082      	sub	sp, #8
    4b40:	af00      	add	r7, sp, #0
    4b42:	6078      	str	r0, [r7, #4]
    4b44:	6039      	str	r1, [r7, #0]

		CE_Low_Flash();				// enable device
    4b46:	687b      	ldr	r3, [r7, #4]
    4b48:	0018      	movs	r0, r3
    4b4a:	4b13      	ldr	r3, [pc, #76]	; (4b98 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x5c>)
    4b4c:	4798      	blx	r3
		Send_Byte(kFlash64KBlockErase);		// send Sector Erase command
    4b4e:	687b      	ldr	r3, [r7, #4]
    4b50:	21d8      	movs	r1, #216	; 0xd8
    4b52:	0018      	movs	r0, r3
    4b54:	4b11      	ldr	r3, [pc, #68]	; (4b9c <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x60>)
    4b56:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    4b58:	683b      	ldr	r3, [r7, #0]
    4b5a:	0c1b      	lsrs	r3, r3, #16
    4b5c:	b2da      	uxtb	r2, r3
    4b5e:	687b      	ldr	r3, [r7, #4]
    4b60:	0011      	movs	r1, r2
    4b62:	0018      	movs	r0, r3
    4b64:	4b0d      	ldr	r3, [pc, #52]	; (4b9c <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x60>)
    4b66:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFF) >> 8));
    4b68:	683b      	ldr	r3, [r7, #0]
    4b6a:	0a1b      	lsrs	r3, r3, #8
    4b6c:	b2da      	uxtb	r2, r3
    4b6e:	687b      	ldr	r3, [r7, #4]
    4b70:	0011      	movs	r1, r2
    4b72:	0018      	movs	r0, r3
    4b74:	4b09      	ldr	r3, [pc, #36]	; (4b9c <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x60>)
    4b76:	4798      	blx	r3
		Send_Byte(Dst & 0xFF);
    4b78:	683b      	ldr	r3, [r7, #0]
    4b7a:	b2da      	uxtb	r2, r3
    4b7c:	687b      	ldr	r3, [r7, #4]
    4b7e:	0011      	movs	r1, r2
    4b80:	0018      	movs	r0, r3
    4b82:	4b06      	ldr	r3, [pc, #24]	; (4b9c <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x60>)
    4b84:	4798      	blx	r3
		CE_High_Flash();				// disable device
    4b86:	687b      	ldr	r3, [r7, #4]
    4b88:	0018      	movs	r0, r3
    4b8a:	4b05      	ldr	r3, [pc, #20]	; (4ba0 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x64>)
    4b8c:	4798      	blx	r3
		
}
    4b8e:	46c0      	nop			; (mov r8, r8)
    4b90:	46bd      	mov	sp, r7
    4b92:	b002      	add	sp, #8
    4b94:	bd80      	pop	{r7, pc}
    4b96:	46c0      	nop			; (mov r8, r8)
    4b98:	00004915 	.word	0x00004915
    4b9c:	0000496d 	.word	0x0000496d
    4ba0:	00004941 	.word	0x00004941

00004ba4 <_ZN16FlashMemoryClass8WaitBusyEv>:
uint8_t  FlashMemoryClass::WaitBusy(void){
    4ba4:	b580      	push	{r7, lr}
    4ba6:	b082      	sub	sp, #8
    4ba8:	af00      	add	r7, sp, #0
    4baa:	6078      	str	r0, [r7, #4]
	status = ReadStatusRegister();
    4bac:	687b      	ldr	r3, [r7, #4]
    4bae:	0018      	movs	r0, r3
    4bb0:	4b0f      	ldr	r3, [pc, #60]	; (4bf0 <_ZN16FlashMemoryClass8WaitBusyEv+0x4c>)
    4bb2:	4798      	blx	r3
    4bb4:	0003      	movs	r3, r0
    4bb6:	0019      	movs	r1, r3
    4bb8:	687b      	ldr	r3, [r7, #4]
    4bba:	22bc      	movs	r2, #188	; 0xbc
    4bbc:	5499      	strb	r1, [r3, r2]
		
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    4bbe:	687b      	ldr	r3, [r7, #4]
    4bc0:	22bc      	movs	r2, #188	; 0xbc
    4bc2:	5c9b      	ldrb	r3, [r3, r2]
    4bc4:	001a      	movs	r2, r3
    4bc6:	2301      	movs	r3, #1
    4bc8:	4013      	ands	r3, r2
    4bca:	d009      	beq.n	4be0 <_ZN16FlashMemoryClass8WaitBusyEv+0x3c>
			status = ReadStatusRegister();
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	0018      	movs	r0, r3
    4bd0:	4b07      	ldr	r3, [pc, #28]	; (4bf0 <_ZN16FlashMemoryClass8WaitBusyEv+0x4c>)
    4bd2:	4798      	blx	r3
    4bd4:	0003      	movs	r3, r0
    4bd6:	0019      	movs	r1, r3
    4bd8:	687b      	ldr	r3, [r7, #4]
    4bda:	22bc      	movs	r2, #188	; 0xbc
    4bdc:	5499      	strb	r1, [r3, r2]
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    4bde:	e7ee      	b.n	4bbe <_ZN16FlashMemoryClass8WaitBusyEv+0x1a>
		}
		
		return	status;
    4be0:	687b      	ldr	r3, [r7, #4]
    4be2:	22bc      	movs	r2, #188	; 0xbc
    4be4:	5c9b      	ldrb	r3, [r3, r2]
	}
    4be6:	0018      	movs	r0, r3
    4be8:	46bd      	mov	sp, r7
    4bea:	b002      	add	sp, #8
    4bec:	bd80      	pop	{r7, pc}
    4bee:	46c0      	nop			; (mov r8, r8)
    4bf0:	00004c45 	.word	0x00004c45

00004bf4 <_ZN16FlashMemoryClass7IsReadyEv>:
bool  FlashMemoryClass::IsReady(void){
    4bf4:	b580      	push	{r7, lr}
    4bf6:	b082      	sub	sp, #8
    4bf8:	af00      	add	r7, sp, #0
    4bfa:	6078      	str	r0, [r7, #4]
	
	flashOpen();
    4bfc:	687b      	ldr	r3, [r7, #4]
    4bfe:	0018      	movs	r0, r3
    4c00:	4b0d      	ldr	r3, [pc, #52]	; (4c38 <_ZN16FlashMemoryClass7IsReadyEv+0x44>)
    4c02:	4798      	blx	r3
	status = ReadStatusRegister();
    4c04:	687b      	ldr	r3, [r7, #4]
    4c06:	0018      	movs	r0, r3
    4c08:	4b0c      	ldr	r3, [pc, #48]	; (4c3c <_ZN16FlashMemoryClass7IsReadyEv+0x48>)
    4c0a:	4798      	blx	r3
    4c0c:	0003      	movs	r3, r0
    4c0e:	0019      	movs	r1, r3
    4c10:	687b      	ldr	r3, [r7, #4]
    4c12:	22bc      	movs	r2, #188	; 0xbc
    4c14:	5499      	strb	r1, [r3, r2]
	flashClose();
    4c16:	687b      	ldr	r3, [r7, #4]
    4c18:	0018      	movs	r0, r3
    4c1a:	4b09      	ldr	r3, [pc, #36]	; (4c40 <_ZN16FlashMemoryClass7IsReadyEv+0x4c>)
    4c1c:	4798      	blx	r3
	return	(status&0x01)==0;
    4c1e:	687b      	ldr	r3, [r7, #4]
    4c20:	22bc      	movs	r2, #188	; 0xbc
    4c22:	5c9b      	ldrb	r3, [r3, r2]
    4c24:	001a      	movs	r2, r3
    4c26:	2301      	movs	r3, #1
    4c28:	4013      	ands	r3, r2
    4c2a:	425a      	negs	r2, r3
    4c2c:	4153      	adcs	r3, r2
    4c2e:	b2db      	uxtb	r3, r3
}
    4c30:	0018      	movs	r0, r3
    4c32:	46bd      	mov	sp, r7
    4c34:	b002      	add	sp, #8
    4c36:	bd80      	pop	{r7, pc}
    4c38:	000048ed 	.word	0x000048ed
    4c3c:	00004c45 	.word	0x00004c45
    4c40:	00004cd9 	.word	0x00004cd9

00004c44 <_ZN16FlashMemoryClass18ReadStatusRegisterEv>:
uint8_t  FlashMemoryClass::ReadStatusRegister(void){
    4c44:	b580      	push	{r7, lr}
    4c46:	b082      	sub	sp, #8
    4c48:	af00      	add	r7, sp, #0
    4c4a:	6078      	str	r0, [r7, #4]
			status=ReadSingleRegister(kFlashReadSR);
    4c4c:	687b      	ldr	r3, [r7, #4]
    4c4e:	2105      	movs	r1, #5
    4c50:	0018      	movs	r0, r3
    4c52:	4b07      	ldr	r3, [pc, #28]	; (4c70 <_ZN16FlashMemoryClass18ReadStatusRegisterEv+0x2c>)
    4c54:	4798      	blx	r3
    4c56:	0003      	movs	r3, r0
    4c58:	0019      	movs	r1, r3
    4c5a:	687b      	ldr	r3, [r7, #4]
    4c5c:	22bc      	movs	r2, #188	; 0xbc
    4c5e:	5499      	strb	r1, [r3, r2]
		return status;
    4c60:	687b      	ldr	r3, [r7, #4]
    4c62:	22bc      	movs	r2, #188	; 0xbc
    4c64:	5c9b      	ldrb	r3, [r3, r2]
	}
    4c66:	0018      	movs	r0, r3
    4c68:	46bd      	mov	sp, r7
    4c6a:	b002      	add	sp, #8
    4c6c:	bd80      	pop	{r7, pc}
    4c6e:	46c0      	nop			; (mov r8, r8)
    4c70:	00004c75 	.word	0x00004c75

00004c74 <_ZN16FlashMemoryClass18ReadSingleRegisterEh>:
uint8_t  FlashMemoryClass::ReadFunctionRegister(void){
			// disable device
		return ReadSingleRegister(kFlashReadFunction);
	}
	
uint8_t  FlashMemoryClass::ReadSingleRegister(uint8_t r){
    4c74:	b590      	push	{r4, r7, lr}
    4c76:	b085      	sub	sp, #20
    4c78:	af00      	add	r7, sp, #0
    4c7a:	6078      	str	r0, [r7, #4]
    4c7c:	000a      	movs	r2, r1
    4c7e:	1cfb      	adds	r3, r7, #3
    4c80:	701a      	strb	r2, [r3, #0]
	uint8_t b = 0;
    4c82:	230f      	movs	r3, #15
    4c84:	18fb      	adds	r3, r7, r3
    4c86:	2200      	movs	r2, #0
    4c88:	701a      	strb	r2, [r3, #0]
	CE_Low_Flash();			// enable device
    4c8a:	687b      	ldr	r3, [r7, #4]
    4c8c:	0018      	movs	r0, r3
    4c8e:	4b0e      	ldr	r3, [pc, #56]	; (4cc8 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x54>)
    4c90:	4798      	blx	r3
	Send_Byte(r);	// send RDSR command
    4c92:	1cfb      	adds	r3, r7, #3
    4c94:	781a      	ldrb	r2, [r3, #0]
    4c96:	687b      	ldr	r3, [r7, #4]
    4c98:	0011      	movs	r1, r2
    4c9a:	0018      	movs	r0, r3
    4c9c:	4b0b      	ldr	r3, [pc, #44]	; (4ccc <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x58>)
    4c9e:	4798      	blx	r3
	b = Get_Byte();		/* receive byte */
    4ca0:	230f      	movs	r3, #15
    4ca2:	18fc      	adds	r4, r7, r3
    4ca4:	687b      	ldr	r3, [r7, #4]
    4ca6:	0018      	movs	r0, r3
    4ca8:	4b09      	ldr	r3, [pc, #36]	; (4cd0 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x5c>)
    4caa:	4798      	blx	r3
    4cac:	0003      	movs	r3, r0
    4cae:	7023      	strb	r3, [r4, #0]
	CE_High_Flash();			// disable device
    4cb0:	687b      	ldr	r3, [r7, #4]
    4cb2:	0018      	movs	r0, r3
    4cb4:	4b07      	ldr	r3, [pc, #28]	; (4cd4 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x60>)
    4cb6:	4798      	blx	r3
	return b;
    4cb8:	230f      	movs	r3, #15
    4cba:	18fb      	adds	r3, r7, r3
    4cbc:	781b      	ldrb	r3, [r3, #0]
}
    4cbe:	0018      	movs	r0, r3
    4cc0:	46bd      	mov	sp, r7
    4cc2:	b005      	add	sp, #20
    4cc4:	bd90      	pop	{r4, r7, pc}
    4cc6:	46c0      	nop			; (mov r8, r8)
    4cc8:	00004915 	.word	0x00004915
    4ccc:	0000496d 	.word	0x0000496d
    4cd0:	00004999 	.word	0x00004999
    4cd4:	00004941 	.word	0x00004941

00004cd8 <_ZN16FlashMemoryClass10flashCloseEv>:
	Send_Byte(byte);		/* receive byte */
	CE_High_Flash();			// disable device
	return byte;
}

void FlashMemoryClass::flashClose(void){
    4cd8:	b580      	push	{r7, lr}
    4cda:	b082      	sub	sp, #8
    4cdc:	af00      	add	r7, sp, #0
    4cde:	6078      	str	r0, [r7, #4]
	garbage=0;
    4ce0:	687b      	ldr	r3, [r7, #4]
    4ce2:	2280      	movs	r2, #128	; 0x80
    4ce4:	2100      	movs	r1, #0
    4ce6:	5099      	str	r1, [r3, r2]
		spi.disable();
    4ce8:	687b      	ldr	r3, [r7, #4]
    4cea:	3390      	adds	r3, #144	; 0x90
    4cec:	0018      	movs	r0, r3
    4cee:	4b03      	ldr	r3, [pc, #12]	; (4cfc <_ZN16FlashMemoryClass10flashCloseEv+0x24>)
    4cf0:	4798      	blx	r3
	}
    4cf2:	46c0      	nop			; (mov r8, r8)
    4cf4:	46bd      	mov	sp, r7
    4cf6:	b002      	add	sp, #8
    4cf8:	bd80      	pop	{r7, pc}
    4cfa:	46c0      	nop			; (mov r8, r8)
    4cfc:	000050dd 	.word	0x000050dd

00004d00 <_ZN16FlashMemoryClass12Sector_EraseEm>:
void FlashMemoryClass::Sector_Erase(uint32_t Dst)
{
    4d00:	b580      	push	{r7, lr}
    4d02:	b082      	sub	sp, #8
    4d04:	af00      	add	r7, sp, #0
    4d06:	6078      	str	r0, [r7, #4]
    4d08:	6039      	str	r1, [r7, #0]
	CE_Low_Flash();				// enable device
    4d0a:	687b      	ldr	r3, [r7, #4]
    4d0c:	0018      	movs	r0, r3
    4d0e:	4b13      	ldr	r3, [pc, #76]	; (4d5c <_ZN16FlashMemoryClass12Sector_EraseEm+0x5c>)
    4d10:	4798      	blx	r3
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
    4d12:	687b      	ldr	r3, [r7, #4]
    4d14:	2120      	movs	r1, #32
    4d16:	0018      	movs	r0, r3
    4d18:	4b11      	ldr	r3, [pc, #68]	; (4d60 <_ZN16FlashMemoryClass12Sector_EraseEm+0x60>)
    4d1a:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    4d1c:	683b      	ldr	r3, [r7, #0]
    4d1e:	0c1b      	lsrs	r3, r3, #16
    4d20:	b2da      	uxtb	r2, r3
    4d22:	687b      	ldr	r3, [r7, #4]
    4d24:	0011      	movs	r1, r2
    4d26:	0018      	movs	r0, r3
    4d28:	4b0d      	ldr	r3, [pc, #52]	; (4d60 <_ZN16FlashMemoryClass12Sector_EraseEm+0x60>)
    4d2a:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFF) >> 8));
    4d2c:	683b      	ldr	r3, [r7, #0]
    4d2e:	0a1b      	lsrs	r3, r3, #8
    4d30:	b2da      	uxtb	r2, r3
    4d32:	687b      	ldr	r3, [r7, #4]
    4d34:	0011      	movs	r1, r2
    4d36:	0018      	movs	r0, r3
    4d38:	4b09      	ldr	r3, [pc, #36]	; (4d60 <_ZN16FlashMemoryClass12Sector_EraseEm+0x60>)
    4d3a:	4798      	blx	r3
	Send_Byte(Dst & 0xFF);
    4d3c:	683b      	ldr	r3, [r7, #0]
    4d3e:	b2da      	uxtb	r2, r3
    4d40:	687b      	ldr	r3, [r7, #4]
    4d42:	0011      	movs	r1, r2
    4d44:	0018      	movs	r0, r3
    4d46:	4b06      	ldr	r3, [pc, #24]	; (4d60 <_ZN16FlashMemoryClass12Sector_EraseEm+0x60>)
    4d48:	4798      	blx	r3
	CE_High_Flash();				// disable device
    4d4a:	687b      	ldr	r3, [r7, #4]
    4d4c:	0018      	movs	r0, r3
    4d4e:	4b05      	ldr	r3, [pc, #20]	; (4d64 <_ZN16FlashMemoryClass12Sector_EraseEm+0x64>)
    4d50:	4798      	blx	r3
}
    4d52:	46c0      	nop			; (mov r8, r8)
    4d54:	46bd      	mov	sp, r7
    4d56:	b002      	add	sp, #8
    4d58:	bd80      	pop	{r7, pc}
    4d5a:	46c0      	nop			; (mov r8, r8)
    4d5c:	00004915 	.word	0x00004915
    4d60:	0000496d 	.word	0x0000496d
    4d64:	00004941 	.word	0x00004941

00004d68 <_ZN16FlashMemoryClass12WriteAddressEPhmm>:
	delay_ms(100);
	CE_Low_Flash();
	Send_Byte(0x99);
	CE_High_Flash();				// disable device
}
uint32_t	FlashMemoryClass::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    4d68:	b580      	push	{r7, lr}
    4d6a:	b086      	sub	sp, #24
    4d6c:	af00      	add	r7, sp, #0
    4d6e:	60f8      	str	r0, [r7, #12]
    4d70:	60b9      	str	r1, [r7, #8]
    4d72:	607a      	str	r2, [r7, #4]
    4d74:	603b      	str	r3, [r7, #0]
	uint32_t	w;
	while(!IsReady());
    4d76:	68fb      	ldr	r3, [r7, #12]
    4d78:	0018      	movs	r0, r3
    4d7a:	4b30      	ldr	r3, [pc, #192]	; (4e3c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd4>)
    4d7c:	4798      	blx	r3
    4d7e:	0003      	movs	r3, r0
    4d80:	001a      	movs	r2, r3
    4d82:	2301      	movs	r3, #1
    4d84:	4053      	eors	r3, r2
    4d86:	b2db      	uxtb	r3, r3
    4d88:	2b00      	cmp	r3, #0
    4d8a:	d000      	beq.n	4d8e <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x26>
    4d8c:	e7f3      	b.n	4d76 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe>
	flashOpen();
    4d8e:	68fb      	ldr	r3, [r7, #12]
    4d90:	0018      	movs	r0, r3
    4d92:	4b2b      	ldr	r3, [pc, #172]	; (4e40 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd8>)
    4d94:	4798      	blx	r3
	WREN();
    4d96:	68fb      	ldr	r3, [r7, #12]
    4d98:	0018      	movs	r0, r3
    4d9a:	4b2a      	ldr	r3, [pc, #168]	; (4e44 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xdc>)
    4d9c:	4798      	blx	r3
	CE_Low_Flash();
    4d9e:	68fb      	ldr	r3, [r7, #12]
    4da0:	0018      	movs	r0, r3
    4da2:	4b29      	ldr	r3, [pc, #164]	; (4e48 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe0>)
    4da4:	4798      	blx	r3
	localBuffer[0]=kFlashByteProgram;
    4da6:	68fb      	ldr	r3, [r7, #12]
    4da8:	22a4      	movs	r2, #164	; 0xa4
    4daa:	2102      	movs	r1, #2
    4dac:	5499      	strb	r1, [r3, r2]
	localBuffer[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    4dae:	687b      	ldr	r3, [r7, #4]
    4db0:	0c1b      	lsrs	r3, r3, #16
    4db2:	b2d9      	uxtb	r1, r3
    4db4:	68fb      	ldr	r3, [r7, #12]
    4db6:	22a5      	movs	r2, #165	; 0xa5
    4db8:	5499      	strb	r1, [r3, r2]
	localBuffer[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    4dba:	687b      	ldr	r3, [r7, #4]
    4dbc:	0a1b      	lsrs	r3, r3, #8
    4dbe:	b2d9      	uxtb	r1, r3
    4dc0:	68fb      	ldr	r3, [r7, #12]
    4dc2:	22a6      	movs	r2, #166	; 0xa6
    4dc4:	5499      	strb	r1, [r3, r2]
	localBuffer[3]=(uint8_t)(addr&0xFF);
    4dc6:	687b      	ldr	r3, [r7, #4]
    4dc8:	b2d9      	uxtb	r1, r3
    4dca:	68fb      	ldr	r3, [r7, #12]
    4dcc:	22a7      	movs	r2, #167	; 0xa7
    4dce:	5499      	strb	r1, [r3, r2]
	for (uint32_t i = 4; i <(size)+4; i++)
    4dd0:	2304      	movs	r3, #4
    4dd2:	617b      	str	r3, [r7, #20]
    4dd4:	683b      	ldr	r3, [r7, #0]
    4dd6:	1d1a      	adds	r2, r3, #4
    4dd8:	697b      	ldr	r3, [r7, #20]
    4dda:	429a      	cmp	r2, r3
    4ddc:	d90f      	bls.n	4dfe <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x96>
	{
		localBuffer[i]=*p;
    4dde:	68bb      	ldr	r3, [r7, #8]
    4de0:	7818      	ldrb	r0, [r3, #0]
    4de2:	68fa      	ldr	r2, [r7, #12]
    4de4:	21a4      	movs	r1, #164	; 0xa4
    4de6:	697b      	ldr	r3, [r7, #20]
    4de8:	18d3      	adds	r3, r2, r3
    4dea:	185b      	adds	r3, r3, r1
    4dec:	1c02      	adds	r2, r0, #0
    4dee:	701a      	strb	r2, [r3, #0]
		p++;
    4df0:	68bb      	ldr	r3, [r7, #8]
    4df2:	3301      	adds	r3, #1
    4df4:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 4; i <(size)+4; i++)
    4df6:	697b      	ldr	r3, [r7, #20]
    4df8:	3301      	adds	r3, #1
    4dfa:	617b      	str	r3, [r7, #20]
    4dfc:	e7ea      	b.n	4dd4 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x6c>
	}


	w=spi.write(&localBuffer[0],size+4);
    4dfe:	68fb      	ldr	r3, [r7, #12]
    4e00:	3390      	adds	r3, #144	; 0x90
    4e02:	0018      	movs	r0, r3
    4e04:	68fb      	ldr	r3, [r7, #12]
    4e06:	33a4      	adds	r3, #164	; 0xa4
    4e08:	0019      	movs	r1, r3
    4e0a:	683b      	ldr	r3, [r7, #0]
    4e0c:	3304      	adds	r3, #4
    4e0e:	001a      	movs	r2, r3
    4e10:	4b0e      	ldr	r3, [pc, #56]	; (4e4c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe4>)
    4e12:	4798      	blx	r3
    4e14:	0003      	movs	r3, r0
    4e16:	613b      	str	r3, [r7, #16]

	CE_High_Flash();
    4e18:	68fb      	ldr	r3, [r7, #12]
    4e1a:	0018      	movs	r0, r3
    4e1c:	4b0c      	ldr	r3, [pc, #48]	; (4e50 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe8>)
    4e1e:	4798      	blx	r3
	WRDI();
    4e20:	68fb      	ldr	r3, [r7, #12]
    4e22:	0018      	movs	r0, r3
    4e24:	4b0b      	ldr	r3, [pc, #44]	; (4e54 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xec>)
    4e26:	4798      	blx	r3
	flashClose();
    4e28:	68fb      	ldr	r3, [r7, #12]
    4e2a:	0018      	movs	r0, r3
    4e2c:	4b0a      	ldr	r3, [pc, #40]	; (4e58 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xf0>)
    4e2e:	4798      	blx	r3
	return	w;
    4e30:	693b      	ldr	r3, [r7, #16]
	/*return (uint32_t)writeFlash(addr,(void*)p,size);*/
}
    4e32:	0018      	movs	r0, r3
    4e34:	46bd      	mov	sp, r7
    4e36:	b006      	add	sp, #24
    4e38:	bd80      	pop	{r7, pc}
    4e3a:	46c0      	nop			; (mov r8, r8)
    4e3c:	00004bf5 	.word	0x00004bf5
    4e40:	000048ed 	.word	0x000048ed
    4e44:	000049c5 	.word	0x000049c5
    4e48:	00004915 	.word	0x00004915
    4e4c:	0000505d 	.word	0x0000505d
    4e50:	00004941 	.word	0x00004941
    4e54:	00004a1d 	.word	0x00004a1d
    4e58:	00004cd9 	.word	0x00004cd9

00004e5c <_ZN16FlashMemoryClass11ReadAddressEPhmm>:
uint32_t	FlashMemoryClass::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    4e5c:	b580      	push	{r7, lr}
    4e5e:	b086      	sub	sp, #24
    4e60:	af00      	add	r7, sp, #0
    4e62:	60f8      	str	r0, [r7, #12]
    4e64:	60b9      	str	r1, [r7, #8]
    4e66:	607a      	str	r2, [r7, #4]
    4e68:	603b      	str	r3, [r7, #0]
	uint8_t	dummy;
	while(!IsReady());
    4e6a:	68fb      	ldr	r3, [r7, #12]
    4e6c:	0018      	movs	r0, r3
    4e6e:	4b24      	ldr	r3, [pc, #144]	; (4f00 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa4>)
    4e70:	4798      	blx	r3
    4e72:	0003      	movs	r3, r0
    4e74:	001a      	movs	r2, r3
    4e76:	2301      	movs	r3, #1
    4e78:	4053      	eors	r3, r2
    4e7a:	b2db      	uxtb	r3, r3
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	d000      	beq.n	4e82 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x26>
    4e80:	e7f3      	b.n	4e6a <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xe>
	flashOpen();
    4e82:	68fb      	ldr	r3, [r7, #12]
    4e84:	0018      	movs	r0, r3
    4e86:	4b1f      	ldr	r3, [pc, #124]	; (4f04 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa8>)
    4e88:	4798      	blx	r3
	CE_Low_Flash();
    4e8a:	68fb      	ldr	r3, [r7, #12]
    4e8c:	0018      	movs	r0, r3
    4e8e:	4b1e      	ldr	r3, [pc, #120]	; (4f08 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xac>)
    4e90:	4798      	blx	r3
	instruction[0]=kFlashRead;
    4e92:	68fb      	ldr	r3, [r7, #12]
    4e94:	22b8      	movs	r2, #184	; 0xb8
    4e96:	2103      	movs	r1, #3
    4e98:	5499      	strb	r1, [r3, r2]
	instruction[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    4e9a:	687b      	ldr	r3, [r7, #4]
    4e9c:	0c1b      	lsrs	r3, r3, #16
    4e9e:	b2d9      	uxtb	r1, r3
    4ea0:	68fb      	ldr	r3, [r7, #12]
    4ea2:	22b9      	movs	r2, #185	; 0xb9
    4ea4:	5499      	strb	r1, [r3, r2]
	instruction[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    4ea6:	687b      	ldr	r3, [r7, #4]
    4ea8:	0a1b      	lsrs	r3, r3, #8
    4eaa:	b2d9      	uxtb	r1, r3
    4eac:	68fb      	ldr	r3, [r7, #12]
    4eae:	22ba      	movs	r2, #186	; 0xba
    4eb0:	5499      	strb	r1, [r3, r2]
	instruction[3]=(uint8_t)(addr&0xFF);
    4eb2:	687b      	ldr	r3, [r7, #4]
    4eb4:	b2d9      	uxtb	r1, r3
    4eb6:	68fb      	ldr	r3, [r7, #12]
    4eb8:	22bb      	movs	r2, #187	; 0xbb
    4eba:	5499      	strb	r1, [r3, r2]
		
	uint32_t	r=spi.write(instruction,4);
    4ebc:	68fb      	ldr	r3, [r7, #12]
    4ebe:	3390      	adds	r3, #144	; 0x90
    4ec0:	0018      	movs	r0, r3
    4ec2:	68fb      	ldr	r3, [r7, #12]
    4ec4:	33b8      	adds	r3, #184	; 0xb8
    4ec6:	2204      	movs	r2, #4
    4ec8:	0019      	movs	r1, r3
    4eca:	4b10      	ldr	r3, [pc, #64]	; (4f0c <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb0>)
    4ecc:	4798      	blx	r3
    4ece:	0003      	movs	r3, r0
    4ed0:	617b      	str	r3, [r7, #20]
	r=spi.read(p,size);
    4ed2:	68fb      	ldr	r3, [r7, #12]
    4ed4:	3390      	adds	r3, #144	; 0x90
    4ed6:	683a      	ldr	r2, [r7, #0]
    4ed8:	68b9      	ldr	r1, [r7, #8]
    4eda:	0018      	movs	r0, r3
    4edc:	4b0c      	ldr	r3, [pc, #48]	; (4f10 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb4>)
    4ede:	4798      	blx	r3
    4ee0:	0003      	movs	r3, r0
    4ee2:	617b      	str	r3, [r7, #20]
	CE_High_Flash();
    4ee4:	68fb      	ldr	r3, [r7, #12]
    4ee6:	0018      	movs	r0, r3
    4ee8:	4b0a      	ldr	r3, [pc, #40]	; (4f14 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb8>)
    4eea:	4798      	blx	r3
	flashClose();
    4eec:	68fb      	ldr	r3, [r7, #12]
    4eee:	0018      	movs	r0, r3
    4ef0:	4b09      	ldr	r3, [pc, #36]	; (4f18 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xbc>)
    4ef2:	4798      	blx	r3
	
	return	r;
    4ef4:	697b      	ldr	r3, [r7, #20]
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
    4ef6:	0018      	movs	r0, r3
    4ef8:	46bd      	mov	sp, r7
    4efa:	b006      	add	sp, #24
    4efc:	bd80      	pop	{r7, pc}
    4efe:	46c0      	nop			; (mov r8, r8)
    4f00:	00004bf5 	.word	0x00004bf5
    4f04:	000048ed 	.word	0x000048ed
    4f08:	00004915 	.word	0x00004915
    4f0c:	0000505d 	.word	0x0000505d
    4f10:	0000509d 	.word	0x0000509d
    4f14:	00004941 	.word	0x00004941
    4f18:	00004cd9 	.word	0x00004cd9

00004f1c <_Z41__static_initialization_and_destruction_0ii>:
    4f1c:	b580      	push	{r7, lr}
    4f1e:	b082      	sub	sp, #8
    4f20:	af00      	add	r7, sp, #0
    4f22:	6078      	str	r0, [r7, #4]
    4f24:	6039      	str	r1, [r7, #0]
    4f26:	687b      	ldr	r3, [r7, #4]
    4f28:	2b01      	cmp	r3, #1
    4f2a:	d10f      	bne.n	4f4c <_Z41__static_initialization_and_destruction_0ii+0x30>
    4f2c:	683b      	ldr	r3, [r7, #0]
    4f2e:	4a09      	ldr	r2, [pc, #36]	; (4f54 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    4f30:	4293      	cmp	r3, r2
    4f32:	d10b      	bne.n	4f4c <_Z41__static_initialization_and_destruction_0ii+0x30>
    4f34:	4a08      	ldr	r2, [pc, #32]	; (4f58 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    4f36:	4b09      	ldr	r3, [pc, #36]	; (4f5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    4f38:	0011      	movs	r1, r2
    4f3a:	0018      	movs	r0, r3
    4f3c:	4b08      	ldr	r3, [pc, #32]	; (4f60 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    4f3e:	4798      	blx	r3
    4f40:	4a08      	ldr	r2, [pc, #32]	; (4f64 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    4f42:	4909      	ldr	r1, [pc, #36]	; (4f68 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    4f44:	4b05      	ldr	r3, [pc, #20]	; (4f5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    4f46:	0018      	movs	r0, r3
    4f48:	4b08      	ldr	r3, [pc, #32]	; (4f6c <_Z41__static_initialization_and_destruction_0ii+0x50>)
    4f4a:	4798      	blx	r3
    4f4c:	46c0      	nop			; (mov r8, r8)
    4f4e:	46bd      	mov	sp, r7
    4f50:	b002      	add	sp, #8
    4f52:	bd80      	pop	{r7, pc}
    4f54:	0000ffff 	.word	0x0000ffff
    4f58:	2000099c 	.word	0x2000099c
    4f5c:	2000087c 	.word	0x2000087c
    4f60:	00004815 	.word	0x00004815
    4f64:	20000000 	.word	0x20000000
    4f68:	00004865 	.word	0x00004865
    4f6c:	00005165 	.word	0x00005165

00004f70 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev>:
    4f70:	b580      	push	{r7, lr}
    4f72:	af00      	add	r7, sp, #0
    4f74:	4b03      	ldr	r3, [pc, #12]	; (4f84 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x14>)
    4f76:	0019      	movs	r1, r3
    4f78:	2001      	movs	r0, #1
    4f7a:	4b03      	ldr	r3, [pc, #12]	; (4f88 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x18>)
    4f7c:	4798      	blx	r3
    4f7e:	46bd      	mov	sp, r7
    4f80:	bd80      	pop	{r7, pc}
    4f82:	46c0      	nop			; (mov r8, r8)
    4f84:	0000ffff 	.word	0x0000ffff
    4f88:	00004f1d 	.word	0x00004f1d

00004f8c <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    4f8c:	b580      	push	{r7, lr}
    4f8e:	b082      	sub	sp, #8
    4f90:	af00      	add	r7, sp, #0
    4f92:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    4f94:	4b03      	ldr	r3, [pc, #12]	; (4fa4 <_ZN13SPI_Syn_ClassC1Ev+0x18>)
    4f96:	687a      	ldr	r2, [r7, #4]
    4f98:	601a      	str	r2, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    4f9a:	687b      	ldr	r3, [r7, #4]
    4f9c:	0018      	movs	r0, r3
    4f9e:	46bd      	mov	sp, r7
    4fa0:	b002      	add	sp, #8
    4fa2:	bd80      	pop	{r7, pc}
    4fa4:	2000093c 	.word	0x2000093c

00004fa8 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    4fa8:	b580      	push	{r7, lr}
    4faa:	b082      	sub	sp, #8
    4fac:	af00      	add	r7, sp, #0
    4fae:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    4fb0:	687b      	ldr	r3, [r7, #4]
    4fb2:	0018      	movs	r0, r3
    4fb4:	46bd      	mov	sp, r7
    4fb6:	b002      	add	sp, #8
    4fb8:	bd80      	pop	{r7, pc}
	...

00004fbc <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
    4fbc:	b580      	push	{r7, lr}
    4fbe:	b082      	sub	sp, #8
    4fc0:	af00      	add	r7, sp, #0
    4fc2:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    4fc4:	687b      	ldr	r3, [r7, #4]
    4fc6:	685a      	ldr	r2, [r3, #4]
    4fc8:	687b      	ldr	r3, [r7, #4]
    4fca:	3308      	adds	r3, #8
    4fcc:	0019      	movs	r1, r3
    4fce:	0010      	movs	r0, r2
    4fd0:	4b08      	ldr	r3, [pc, #32]	; (4ff4 <_ZN13SPI_Syn_Class4initEv+0x38>)
    4fd2:	4798      	blx	r3

	spi_m_sync_enable(SPI);
    4fd4:	687b      	ldr	r3, [r7, #4]
    4fd6:	685b      	ldr	r3, [r3, #4]
    4fd8:	0018      	movs	r0, r3
    4fda:	4b07      	ldr	r3, [pc, #28]	; (4ff8 <_ZN13SPI_Syn_Class4initEv+0x3c>)
    4fdc:	4798      	blx	r3
	
	ready=true;
    4fde:	687b      	ldr	r3, [r7, #4]
    4fe0:	2201      	movs	r2, #1
    4fe2:	701a      	strb	r2, [r3, #0]
	xferDone=true;
    4fe4:	687b      	ldr	r3, [r7, #4]
    4fe6:	2201      	movs	r2, #1
    4fe8:	705a      	strb	r2, [r3, #1]
	
}
    4fea:	46c0      	nop			; (mov r8, r8)
    4fec:	46bd      	mov	sp, r7
    4fee:	b002      	add	sp, #8
    4ff0:	bd80      	pop	{r7, pc}
    4ff2:	46c0      	nop			; (mov r8, r8)
    4ff4:	00000b41 	.word	0x00000b41
    4ff8:	00000a31 	.word	0x00000a31

00004ffc <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
    4ffc:	b580      	push	{r7, lr}
    4ffe:	b082      	sub	sp, #8
    5000:	af00      	add	r7, sp, #0
    5002:	6078      	str	r0, [r7, #4]
    5004:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
    5006:	4b05      	ldr	r3, [pc, #20]	; (501c <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
    5008:	687a      	ldr	r2, [r7, #4]
    500a:	601a      	str	r2, [r3, #0]
	SPI=spiDesc;
    500c:	687b      	ldr	r3, [r7, #4]
    500e:	683a      	ldr	r2, [r7, #0]
    5010:	605a      	str	r2, [r3, #4]
}
    5012:	46c0      	nop			; (mov r8, r8)
    5014:	46bd      	mov	sp, r7
    5016:	b002      	add	sp, #8
    5018:	bd80      	pop	{r7, pc}
    501a:	46c0      	nop			; (mov r8, r8)
    501c:	2000093c 	.word	0x2000093c

00005020 <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
    5020:	b580      	push	{r7, lr}
    5022:	b082      	sub	sp, #8
    5024:	af00      	add	r7, sp, #0
    5026:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    5028:	687b      	ldr	r3, [r7, #4]
    502a:	685a      	ldr	r2, [r3, #4]
    502c:	687b      	ldr	r3, [r7, #4]
    502e:	3308      	adds	r3, #8
    5030:	0019      	movs	r1, r3
    5032:	0010      	movs	r0, r2
    5034:	4b07      	ldr	r3, [pc, #28]	; (5054 <_ZN13SPI_Syn_Class6enableEv+0x34>)
    5036:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    5038:	687b      	ldr	r3, [r7, #4]
    503a:	685b      	ldr	r3, [r3, #4]
    503c:	0018      	movs	r0, r3
    503e:	4b06      	ldr	r3, [pc, #24]	; (5058 <_ZN13SPI_Syn_Class6enableEv+0x38>)
    5040:	4798      	blx	r3
	ready=true;
    5042:	687b      	ldr	r3, [r7, #4]
    5044:	2201      	movs	r2, #1
    5046:	701a      	strb	r2, [r3, #0]
	return 0;
    5048:	2300      	movs	r3, #0
}
    504a:	0018      	movs	r0, r3
    504c:	46bd      	mov	sp, r7
    504e:	b002      	add	sp, #8
    5050:	bd80      	pop	{r7, pc}
    5052:	46c0      	nop			; (mov r8, r8)
    5054:	00000b41 	.word	0x00000b41
    5058:	00000a31 	.word	0x00000a31

0000505c <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
    505c:	b580      	push	{r7, lr}
    505e:	b086      	sub	sp, #24
    5060:	af00      	add	r7, sp, #0
    5062:	60f8      	str	r0, [r7, #12]
    5064:	60b9      	str	r1, [r7, #8]
    5066:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
    5068:	68fb      	ldr	r3, [r7, #12]
    506a:	2201      	movs	r2, #1
    506c:	741a      	strb	r2, [r3, #16]
	w= io_write(spio,p,(uint16_t)n);
    506e:	68fb      	ldr	r3, [r7, #12]
    5070:	689b      	ldr	r3, [r3, #8]
    5072:	687a      	ldr	r2, [r7, #4]
    5074:	b292      	uxth	r2, r2
    5076:	68b9      	ldr	r1, [r7, #8]
    5078:	0018      	movs	r0, r3
    507a:	4b07      	ldr	r3, [pc, #28]	; (5098 <_ZN13SPI_Syn_Class5writeEPKhl+0x3c>)
    507c:	4798      	blx	r3
    507e:	0003      	movs	r3, r0
    5080:	617b      	str	r3, [r7, #20]
	wFlag=(bool)w;
    5082:	697b      	ldr	r3, [r7, #20]
    5084:	1e5a      	subs	r2, r3, #1
    5086:	4193      	sbcs	r3, r2
    5088:	b2da      	uxtb	r2, r3
    508a:	68fb      	ldr	r3, [r7, #12]
    508c:	741a      	strb	r2, [r3, #16]
	 return w;
    508e:	697b      	ldr	r3, [r7, #20]
	
}
    5090:	0018      	movs	r0, r3
    5092:	46bd      	mov	sp, r7
    5094:	b006      	add	sp, #24
    5096:	bd80      	pop	{r7, pc}
    5098:	000050fd 	.word	0x000050fd

0000509c <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
    509c:	b580      	push	{r7, lr}
    509e:	b086      	sub	sp, #24
    50a0:	af00      	add	r7, sp, #0
    50a2:	60f8      	str	r0, [r7, #12]
    50a4:	60b9      	str	r1, [r7, #8]
    50a6:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
    50a8:	68fb      	ldr	r3, [r7, #12]
    50aa:	2201      	movs	r2, #1
    50ac:	745a      	strb	r2, [r3, #17]
	r=io_read(spio,p,(uint16_t)n);
    50ae:	68fb      	ldr	r3, [r7, #12]
    50b0:	689b      	ldr	r3, [r3, #8]
    50b2:	687a      	ldr	r2, [r7, #4]
    50b4:	b292      	uxth	r2, r2
    50b6:	68b9      	ldr	r1, [r7, #8]
    50b8:	0018      	movs	r0, r3
    50ba:	4b07      	ldr	r3, [pc, #28]	; (50d8 <_ZN13SPI_Syn_Class4readEPhl+0x3c>)
    50bc:	4798      	blx	r3
    50be:	0003      	movs	r3, r0
    50c0:	617b      	str	r3, [r7, #20]
	rFlag=(bool)r;
    50c2:	697b      	ldr	r3, [r7, #20]
    50c4:	1e5a      	subs	r2, r3, #1
    50c6:	4193      	sbcs	r3, r2
    50c8:	b2da      	uxtb	r2, r3
    50ca:	68fb      	ldr	r3, [r7, #12]
    50cc:	745a      	strb	r2, [r3, #17]
	return  r;
    50ce:	697b      	ldr	r3, [r7, #20]
}
    50d0:	0018      	movs	r0, r3
    50d2:	46bd      	mov	sp, r7
    50d4:	b006      	add	sp, #24
    50d6:	bd80      	pop	{r7, pc}
    50d8:	00005131 	.word	0x00005131

000050dc <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
    50dc:	b580      	push	{r7, lr}
    50de:	b082      	sub	sp, #8
    50e0:	af00      	add	r7, sp, #0
    50e2:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
    50e4:	687b      	ldr	r3, [r7, #4]
    50e6:	685b      	ldr	r3, [r3, #4]
    50e8:	0018      	movs	r0, r3
    50ea:	4b03      	ldr	r3, [pc, #12]	; (50f8 <_ZN13SPI_Syn_Class7disableEv+0x1c>)
    50ec:	4798      	blx	r3
	
}
    50ee:	46c0      	nop			; (mov r8, r8)
    50f0:	46bd      	mov	sp, r7
    50f2:	b002      	add	sp, #8
    50f4:	bd80      	pop	{r7, pc}
    50f6:	46c0      	nop			; (mov r8, r8)
    50f8:	00000a59 	.word	0x00000a59

000050fc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    50fc:	b570      	push	{r4, r5, r6, lr}
    50fe:	0006      	movs	r6, r0
    5100:	000c      	movs	r4, r1
    5102:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    5104:	2800      	cmp	r0, #0
    5106:	d00d      	beq.n	5124 <io_write+0x28>
    5108:	0008      	movs	r0, r1
    510a:	1e43      	subs	r3, r0, #1
    510c:	4198      	sbcs	r0, r3
    510e:	b2c0      	uxtb	r0, r0
    5110:	2234      	movs	r2, #52	; 0x34
    5112:	4905      	ldr	r1, [pc, #20]	; (5128 <io_write+0x2c>)
    5114:	4b05      	ldr	r3, [pc, #20]	; (512c <io_write+0x30>)
    5116:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    5118:	6833      	ldr	r3, [r6, #0]
    511a:	002a      	movs	r2, r5
    511c:	0021      	movs	r1, r4
    511e:	0030      	movs	r0, r6
    5120:	4798      	blx	r3
}
    5122:	bd70      	pop	{r4, r5, r6, pc}
    5124:	2000      	movs	r0, #0
    5126:	e7f3      	b.n	5110 <io_write+0x14>
    5128:	0000595c 	.word	0x0000595c
    512c:	00000e95 	.word	0x00000e95

00005130 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    5130:	b570      	push	{r4, r5, r6, lr}
    5132:	0006      	movs	r6, r0
    5134:	000c      	movs	r4, r1
    5136:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    5138:	2800      	cmp	r0, #0
    513a:	d00d      	beq.n	5158 <io_read+0x28>
    513c:	0008      	movs	r0, r1
    513e:	1e43      	subs	r3, r0, #1
    5140:	4198      	sbcs	r0, r3
    5142:	b2c0      	uxtb	r0, r0
    5144:	223d      	movs	r2, #61	; 0x3d
    5146:	4905      	ldr	r1, [pc, #20]	; (515c <io_read+0x2c>)
    5148:	4b05      	ldr	r3, [pc, #20]	; (5160 <io_read+0x30>)
    514a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    514c:	6873      	ldr	r3, [r6, #4]
    514e:	002a      	movs	r2, r5
    5150:	0021      	movs	r1, r4
    5152:	0030      	movs	r0, r6
    5154:	4798      	blx	r3
}
    5156:	bd70      	pop	{r4, r5, r6, pc}
    5158:	2000      	movs	r0, #0
    515a:	e7f3      	b.n	5144 <io_read+0x14>
    515c:	0000595c 	.word	0x0000595c
    5160:	00000e95 	.word	0x00000e95

00005164 <__aeabi_atexit>:
    5164:	000b      	movs	r3, r1
    5166:	b510      	push	{r4, lr}
    5168:	0001      	movs	r1, r0
    516a:	0018      	movs	r0, r3
    516c:	f000 f9a2 	bl	54b4 <__cxa_atexit>
    5170:	bd10      	pop	{r4, pc}
    5172:	46c0      	nop			; (mov r8, r8)

00005174 <__udivsi3>:
    5174:	2200      	movs	r2, #0
    5176:	0843      	lsrs	r3, r0, #1
    5178:	428b      	cmp	r3, r1
    517a:	d374      	bcc.n	5266 <__udivsi3+0xf2>
    517c:	0903      	lsrs	r3, r0, #4
    517e:	428b      	cmp	r3, r1
    5180:	d35f      	bcc.n	5242 <__udivsi3+0xce>
    5182:	0a03      	lsrs	r3, r0, #8
    5184:	428b      	cmp	r3, r1
    5186:	d344      	bcc.n	5212 <__udivsi3+0x9e>
    5188:	0b03      	lsrs	r3, r0, #12
    518a:	428b      	cmp	r3, r1
    518c:	d328      	bcc.n	51e0 <__udivsi3+0x6c>
    518e:	0c03      	lsrs	r3, r0, #16
    5190:	428b      	cmp	r3, r1
    5192:	d30d      	bcc.n	51b0 <__udivsi3+0x3c>
    5194:	22ff      	movs	r2, #255	; 0xff
    5196:	0209      	lsls	r1, r1, #8
    5198:	ba12      	rev	r2, r2
    519a:	0c03      	lsrs	r3, r0, #16
    519c:	428b      	cmp	r3, r1
    519e:	d302      	bcc.n	51a6 <__udivsi3+0x32>
    51a0:	1212      	asrs	r2, r2, #8
    51a2:	0209      	lsls	r1, r1, #8
    51a4:	d065      	beq.n	5272 <__udivsi3+0xfe>
    51a6:	0b03      	lsrs	r3, r0, #12
    51a8:	428b      	cmp	r3, r1
    51aa:	d319      	bcc.n	51e0 <__udivsi3+0x6c>
    51ac:	e000      	b.n	51b0 <__udivsi3+0x3c>
    51ae:	0a09      	lsrs	r1, r1, #8
    51b0:	0bc3      	lsrs	r3, r0, #15
    51b2:	428b      	cmp	r3, r1
    51b4:	d301      	bcc.n	51ba <__udivsi3+0x46>
    51b6:	03cb      	lsls	r3, r1, #15
    51b8:	1ac0      	subs	r0, r0, r3
    51ba:	4152      	adcs	r2, r2
    51bc:	0b83      	lsrs	r3, r0, #14
    51be:	428b      	cmp	r3, r1
    51c0:	d301      	bcc.n	51c6 <__udivsi3+0x52>
    51c2:	038b      	lsls	r3, r1, #14
    51c4:	1ac0      	subs	r0, r0, r3
    51c6:	4152      	adcs	r2, r2
    51c8:	0b43      	lsrs	r3, r0, #13
    51ca:	428b      	cmp	r3, r1
    51cc:	d301      	bcc.n	51d2 <__udivsi3+0x5e>
    51ce:	034b      	lsls	r3, r1, #13
    51d0:	1ac0      	subs	r0, r0, r3
    51d2:	4152      	adcs	r2, r2
    51d4:	0b03      	lsrs	r3, r0, #12
    51d6:	428b      	cmp	r3, r1
    51d8:	d301      	bcc.n	51de <__udivsi3+0x6a>
    51da:	030b      	lsls	r3, r1, #12
    51dc:	1ac0      	subs	r0, r0, r3
    51de:	4152      	adcs	r2, r2
    51e0:	0ac3      	lsrs	r3, r0, #11
    51e2:	428b      	cmp	r3, r1
    51e4:	d301      	bcc.n	51ea <__udivsi3+0x76>
    51e6:	02cb      	lsls	r3, r1, #11
    51e8:	1ac0      	subs	r0, r0, r3
    51ea:	4152      	adcs	r2, r2
    51ec:	0a83      	lsrs	r3, r0, #10
    51ee:	428b      	cmp	r3, r1
    51f0:	d301      	bcc.n	51f6 <__udivsi3+0x82>
    51f2:	028b      	lsls	r3, r1, #10
    51f4:	1ac0      	subs	r0, r0, r3
    51f6:	4152      	adcs	r2, r2
    51f8:	0a43      	lsrs	r3, r0, #9
    51fa:	428b      	cmp	r3, r1
    51fc:	d301      	bcc.n	5202 <__udivsi3+0x8e>
    51fe:	024b      	lsls	r3, r1, #9
    5200:	1ac0      	subs	r0, r0, r3
    5202:	4152      	adcs	r2, r2
    5204:	0a03      	lsrs	r3, r0, #8
    5206:	428b      	cmp	r3, r1
    5208:	d301      	bcc.n	520e <__udivsi3+0x9a>
    520a:	020b      	lsls	r3, r1, #8
    520c:	1ac0      	subs	r0, r0, r3
    520e:	4152      	adcs	r2, r2
    5210:	d2cd      	bcs.n	51ae <__udivsi3+0x3a>
    5212:	09c3      	lsrs	r3, r0, #7
    5214:	428b      	cmp	r3, r1
    5216:	d301      	bcc.n	521c <__udivsi3+0xa8>
    5218:	01cb      	lsls	r3, r1, #7
    521a:	1ac0      	subs	r0, r0, r3
    521c:	4152      	adcs	r2, r2
    521e:	0983      	lsrs	r3, r0, #6
    5220:	428b      	cmp	r3, r1
    5222:	d301      	bcc.n	5228 <__udivsi3+0xb4>
    5224:	018b      	lsls	r3, r1, #6
    5226:	1ac0      	subs	r0, r0, r3
    5228:	4152      	adcs	r2, r2
    522a:	0943      	lsrs	r3, r0, #5
    522c:	428b      	cmp	r3, r1
    522e:	d301      	bcc.n	5234 <__udivsi3+0xc0>
    5230:	014b      	lsls	r3, r1, #5
    5232:	1ac0      	subs	r0, r0, r3
    5234:	4152      	adcs	r2, r2
    5236:	0903      	lsrs	r3, r0, #4
    5238:	428b      	cmp	r3, r1
    523a:	d301      	bcc.n	5240 <__udivsi3+0xcc>
    523c:	010b      	lsls	r3, r1, #4
    523e:	1ac0      	subs	r0, r0, r3
    5240:	4152      	adcs	r2, r2
    5242:	08c3      	lsrs	r3, r0, #3
    5244:	428b      	cmp	r3, r1
    5246:	d301      	bcc.n	524c <__udivsi3+0xd8>
    5248:	00cb      	lsls	r3, r1, #3
    524a:	1ac0      	subs	r0, r0, r3
    524c:	4152      	adcs	r2, r2
    524e:	0883      	lsrs	r3, r0, #2
    5250:	428b      	cmp	r3, r1
    5252:	d301      	bcc.n	5258 <__udivsi3+0xe4>
    5254:	008b      	lsls	r3, r1, #2
    5256:	1ac0      	subs	r0, r0, r3
    5258:	4152      	adcs	r2, r2
    525a:	0843      	lsrs	r3, r0, #1
    525c:	428b      	cmp	r3, r1
    525e:	d301      	bcc.n	5264 <__udivsi3+0xf0>
    5260:	004b      	lsls	r3, r1, #1
    5262:	1ac0      	subs	r0, r0, r3
    5264:	4152      	adcs	r2, r2
    5266:	1a41      	subs	r1, r0, r1
    5268:	d200      	bcs.n	526c <__udivsi3+0xf8>
    526a:	4601      	mov	r1, r0
    526c:	4152      	adcs	r2, r2
    526e:	4610      	mov	r0, r2
    5270:	4770      	bx	lr
    5272:	e7ff      	b.n	5274 <__udivsi3+0x100>
    5274:	b501      	push	{r0, lr}
    5276:	2000      	movs	r0, #0
    5278:	f000 f8f0 	bl	545c <__aeabi_idiv0>
    527c:	bd02      	pop	{r1, pc}
    527e:	46c0      	nop			; (mov r8, r8)

00005280 <__aeabi_uidivmod>:
    5280:	2900      	cmp	r1, #0
    5282:	d0f7      	beq.n	5274 <__udivsi3+0x100>
    5284:	e776      	b.n	5174 <__udivsi3>
    5286:	4770      	bx	lr

00005288 <__divsi3>:
    5288:	4603      	mov	r3, r0
    528a:	430b      	orrs	r3, r1
    528c:	d47f      	bmi.n	538e <__divsi3+0x106>
    528e:	2200      	movs	r2, #0
    5290:	0843      	lsrs	r3, r0, #1
    5292:	428b      	cmp	r3, r1
    5294:	d374      	bcc.n	5380 <__divsi3+0xf8>
    5296:	0903      	lsrs	r3, r0, #4
    5298:	428b      	cmp	r3, r1
    529a:	d35f      	bcc.n	535c <__divsi3+0xd4>
    529c:	0a03      	lsrs	r3, r0, #8
    529e:	428b      	cmp	r3, r1
    52a0:	d344      	bcc.n	532c <__divsi3+0xa4>
    52a2:	0b03      	lsrs	r3, r0, #12
    52a4:	428b      	cmp	r3, r1
    52a6:	d328      	bcc.n	52fa <__divsi3+0x72>
    52a8:	0c03      	lsrs	r3, r0, #16
    52aa:	428b      	cmp	r3, r1
    52ac:	d30d      	bcc.n	52ca <__divsi3+0x42>
    52ae:	22ff      	movs	r2, #255	; 0xff
    52b0:	0209      	lsls	r1, r1, #8
    52b2:	ba12      	rev	r2, r2
    52b4:	0c03      	lsrs	r3, r0, #16
    52b6:	428b      	cmp	r3, r1
    52b8:	d302      	bcc.n	52c0 <__divsi3+0x38>
    52ba:	1212      	asrs	r2, r2, #8
    52bc:	0209      	lsls	r1, r1, #8
    52be:	d065      	beq.n	538c <__divsi3+0x104>
    52c0:	0b03      	lsrs	r3, r0, #12
    52c2:	428b      	cmp	r3, r1
    52c4:	d319      	bcc.n	52fa <__divsi3+0x72>
    52c6:	e000      	b.n	52ca <__divsi3+0x42>
    52c8:	0a09      	lsrs	r1, r1, #8
    52ca:	0bc3      	lsrs	r3, r0, #15
    52cc:	428b      	cmp	r3, r1
    52ce:	d301      	bcc.n	52d4 <__divsi3+0x4c>
    52d0:	03cb      	lsls	r3, r1, #15
    52d2:	1ac0      	subs	r0, r0, r3
    52d4:	4152      	adcs	r2, r2
    52d6:	0b83      	lsrs	r3, r0, #14
    52d8:	428b      	cmp	r3, r1
    52da:	d301      	bcc.n	52e0 <__divsi3+0x58>
    52dc:	038b      	lsls	r3, r1, #14
    52de:	1ac0      	subs	r0, r0, r3
    52e0:	4152      	adcs	r2, r2
    52e2:	0b43      	lsrs	r3, r0, #13
    52e4:	428b      	cmp	r3, r1
    52e6:	d301      	bcc.n	52ec <__divsi3+0x64>
    52e8:	034b      	lsls	r3, r1, #13
    52ea:	1ac0      	subs	r0, r0, r3
    52ec:	4152      	adcs	r2, r2
    52ee:	0b03      	lsrs	r3, r0, #12
    52f0:	428b      	cmp	r3, r1
    52f2:	d301      	bcc.n	52f8 <__divsi3+0x70>
    52f4:	030b      	lsls	r3, r1, #12
    52f6:	1ac0      	subs	r0, r0, r3
    52f8:	4152      	adcs	r2, r2
    52fa:	0ac3      	lsrs	r3, r0, #11
    52fc:	428b      	cmp	r3, r1
    52fe:	d301      	bcc.n	5304 <__divsi3+0x7c>
    5300:	02cb      	lsls	r3, r1, #11
    5302:	1ac0      	subs	r0, r0, r3
    5304:	4152      	adcs	r2, r2
    5306:	0a83      	lsrs	r3, r0, #10
    5308:	428b      	cmp	r3, r1
    530a:	d301      	bcc.n	5310 <__divsi3+0x88>
    530c:	028b      	lsls	r3, r1, #10
    530e:	1ac0      	subs	r0, r0, r3
    5310:	4152      	adcs	r2, r2
    5312:	0a43      	lsrs	r3, r0, #9
    5314:	428b      	cmp	r3, r1
    5316:	d301      	bcc.n	531c <__divsi3+0x94>
    5318:	024b      	lsls	r3, r1, #9
    531a:	1ac0      	subs	r0, r0, r3
    531c:	4152      	adcs	r2, r2
    531e:	0a03      	lsrs	r3, r0, #8
    5320:	428b      	cmp	r3, r1
    5322:	d301      	bcc.n	5328 <__divsi3+0xa0>
    5324:	020b      	lsls	r3, r1, #8
    5326:	1ac0      	subs	r0, r0, r3
    5328:	4152      	adcs	r2, r2
    532a:	d2cd      	bcs.n	52c8 <__divsi3+0x40>
    532c:	09c3      	lsrs	r3, r0, #7
    532e:	428b      	cmp	r3, r1
    5330:	d301      	bcc.n	5336 <__divsi3+0xae>
    5332:	01cb      	lsls	r3, r1, #7
    5334:	1ac0      	subs	r0, r0, r3
    5336:	4152      	adcs	r2, r2
    5338:	0983      	lsrs	r3, r0, #6
    533a:	428b      	cmp	r3, r1
    533c:	d301      	bcc.n	5342 <__divsi3+0xba>
    533e:	018b      	lsls	r3, r1, #6
    5340:	1ac0      	subs	r0, r0, r3
    5342:	4152      	adcs	r2, r2
    5344:	0943      	lsrs	r3, r0, #5
    5346:	428b      	cmp	r3, r1
    5348:	d301      	bcc.n	534e <__divsi3+0xc6>
    534a:	014b      	lsls	r3, r1, #5
    534c:	1ac0      	subs	r0, r0, r3
    534e:	4152      	adcs	r2, r2
    5350:	0903      	lsrs	r3, r0, #4
    5352:	428b      	cmp	r3, r1
    5354:	d301      	bcc.n	535a <__divsi3+0xd2>
    5356:	010b      	lsls	r3, r1, #4
    5358:	1ac0      	subs	r0, r0, r3
    535a:	4152      	adcs	r2, r2
    535c:	08c3      	lsrs	r3, r0, #3
    535e:	428b      	cmp	r3, r1
    5360:	d301      	bcc.n	5366 <__divsi3+0xde>
    5362:	00cb      	lsls	r3, r1, #3
    5364:	1ac0      	subs	r0, r0, r3
    5366:	4152      	adcs	r2, r2
    5368:	0883      	lsrs	r3, r0, #2
    536a:	428b      	cmp	r3, r1
    536c:	d301      	bcc.n	5372 <__divsi3+0xea>
    536e:	008b      	lsls	r3, r1, #2
    5370:	1ac0      	subs	r0, r0, r3
    5372:	4152      	adcs	r2, r2
    5374:	0843      	lsrs	r3, r0, #1
    5376:	428b      	cmp	r3, r1
    5378:	d301      	bcc.n	537e <__divsi3+0xf6>
    537a:	004b      	lsls	r3, r1, #1
    537c:	1ac0      	subs	r0, r0, r3
    537e:	4152      	adcs	r2, r2
    5380:	1a41      	subs	r1, r0, r1
    5382:	d200      	bcs.n	5386 <__divsi3+0xfe>
    5384:	4601      	mov	r1, r0
    5386:	4152      	adcs	r2, r2
    5388:	4610      	mov	r0, r2
    538a:	4770      	bx	lr
    538c:	e05d      	b.n	544a <__divsi3+0x1c2>
    538e:	0fca      	lsrs	r2, r1, #31
    5390:	d000      	beq.n	5394 <__divsi3+0x10c>
    5392:	4249      	negs	r1, r1
    5394:	1003      	asrs	r3, r0, #32
    5396:	d300      	bcc.n	539a <__divsi3+0x112>
    5398:	4240      	negs	r0, r0
    539a:	4053      	eors	r3, r2
    539c:	2200      	movs	r2, #0
    539e:	469c      	mov	ip, r3
    53a0:	0903      	lsrs	r3, r0, #4
    53a2:	428b      	cmp	r3, r1
    53a4:	d32d      	bcc.n	5402 <__divsi3+0x17a>
    53a6:	0a03      	lsrs	r3, r0, #8
    53a8:	428b      	cmp	r3, r1
    53aa:	d312      	bcc.n	53d2 <__divsi3+0x14a>
    53ac:	22fc      	movs	r2, #252	; 0xfc
    53ae:	0189      	lsls	r1, r1, #6
    53b0:	ba12      	rev	r2, r2
    53b2:	0a03      	lsrs	r3, r0, #8
    53b4:	428b      	cmp	r3, r1
    53b6:	d30c      	bcc.n	53d2 <__divsi3+0x14a>
    53b8:	0189      	lsls	r1, r1, #6
    53ba:	1192      	asrs	r2, r2, #6
    53bc:	428b      	cmp	r3, r1
    53be:	d308      	bcc.n	53d2 <__divsi3+0x14a>
    53c0:	0189      	lsls	r1, r1, #6
    53c2:	1192      	asrs	r2, r2, #6
    53c4:	428b      	cmp	r3, r1
    53c6:	d304      	bcc.n	53d2 <__divsi3+0x14a>
    53c8:	0189      	lsls	r1, r1, #6
    53ca:	d03a      	beq.n	5442 <__divsi3+0x1ba>
    53cc:	1192      	asrs	r2, r2, #6
    53ce:	e000      	b.n	53d2 <__divsi3+0x14a>
    53d0:	0989      	lsrs	r1, r1, #6
    53d2:	09c3      	lsrs	r3, r0, #7
    53d4:	428b      	cmp	r3, r1
    53d6:	d301      	bcc.n	53dc <__divsi3+0x154>
    53d8:	01cb      	lsls	r3, r1, #7
    53da:	1ac0      	subs	r0, r0, r3
    53dc:	4152      	adcs	r2, r2
    53de:	0983      	lsrs	r3, r0, #6
    53e0:	428b      	cmp	r3, r1
    53e2:	d301      	bcc.n	53e8 <__divsi3+0x160>
    53e4:	018b      	lsls	r3, r1, #6
    53e6:	1ac0      	subs	r0, r0, r3
    53e8:	4152      	adcs	r2, r2
    53ea:	0943      	lsrs	r3, r0, #5
    53ec:	428b      	cmp	r3, r1
    53ee:	d301      	bcc.n	53f4 <__divsi3+0x16c>
    53f0:	014b      	lsls	r3, r1, #5
    53f2:	1ac0      	subs	r0, r0, r3
    53f4:	4152      	adcs	r2, r2
    53f6:	0903      	lsrs	r3, r0, #4
    53f8:	428b      	cmp	r3, r1
    53fa:	d301      	bcc.n	5400 <__divsi3+0x178>
    53fc:	010b      	lsls	r3, r1, #4
    53fe:	1ac0      	subs	r0, r0, r3
    5400:	4152      	adcs	r2, r2
    5402:	08c3      	lsrs	r3, r0, #3
    5404:	428b      	cmp	r3, r1
    5406:	d301      	bcc.n	540c <__divsi3+0x184>
    5408:	00cb      	lsls	r3, r1, #3
    540a:	1ac0      	subs	r0, r0, r3
    540c:	4152      	adcs	r2, r2
    540e:	0883      	lsrs	r3, r0, #2
    5410:	428b      	cmp	r3, r1
    5412:	d301      	bcc.n	5418 <__divsi3+0x190>
    5414:	008b      	lsls	r3, r1, #2
    5416:	1ac0      	subs	r0, r0, r3
    5418:	4152      	adcs	r2, r2
    541a:	d2d9      	bcs.n	53d0 <__divsi3+0x148>
    541c:	0843      	lsrs	r3, r0, #1
    541e:	428b      	cmp	r3, r1
    5420:	d301      	bcc.n	5426 <__divsi3+0x19e>
    5422:	004b      	lsls	r3, r1, #1
    5424:	1ac0      	subs	r0, r0, r3
    5426:	4152      	adcs	r2, r2
    5428:	1a41      	subs	r1, r0, r1
    542a:	d200      	bcs.n	542e <__divsi3+0x1a6>
    542c:	4601      	mov	r1, r0
    542e:	4663      	mov	r3, ip
    5430:	4152      	adcs	r2, r2
    5432:	105b      	asrs	r3, r3, #1
    5434:	4610      	mov	r0, r2
    5436:	d301      	bcc.n	543c <__divsi3+0x1b4>
    5438:	4240      	negs	r0, r0
    543a:	2b00      	cmp	r3, #0
    543c:	d500      	bpl.n	5440 <__divsi3+0x1b8>
    543e:	4249      	negs	r1, r1
    5440:	4770      	bx	lr
    5442:	4663      	mov	r3, ip
    5444:	105b      	asrs	r3, r3, #1
    5446:	d300      	bcc.n	544a <__divsi3+0x1c2>
    5448:	4240      	negs	r0, r0
    544a:	b501      	push	{r0, lr}
    544c:	2000      	movs	r0, #0
    544e:	f000 f805 	bl	545c <__aeabi_idiv0>
    5452:	bd02      	pop	{r1, pc}

00005454 <__aeabi_idivmod>:
    5454:	2900      	cmp	r1, #0
    5456:	d0f8      	beq.n	544a <__divsi3+0x1c2>
    5458:	e716      	b.n	5288 <__divsi3>
    545a:	4770      	bx	lr

0000545c <__aeabi_idiv0>:
    545c:	4770      	bx	lr
    545e:	46c0      	nop			; (mov r8, r8)

00005460 <__aeabi_lmul>:
    5460:	b5f0      	push	{r4, r5, r6, r7, lr}
    5462:	46ce      	mov	lr, r9
    5464:	4647      	mov	r7, r8
    5466:	0415      	lsls	r5, r2, #16
    5468:	0c2d      	lsrs	r5, r5, #16
    546a:	002e      	movs	r6, r5
    546c:	b580      	push	{r7, lr}
    546e:	0407      	lsls	r7, r0, #16
    5470:	0c14      	lsrs	r4, r2, #16
    5472:	0c3f      	lsrs	r7, r7, #16
    5474:	4699      	mov	r9, r3
    5476:	0c03      	lsrs	r3, r0, #16
    5478:	437e      	muls	r6, r7
    547a:	435d      	muls	r5, r3
    547c:	4367      	muls	r7, r4
    547e:	4363      	muls	r3, r4
    5480:	197f      	adds	r7, r7, r5
    5482:	0c34      	lsrs	r4, r6, #16
    5484:	19e4      	adds	r4, r4, r7
    5486:	469c      	mov	ip, r3
    5488:	42a5      	cmp	r5, r4
    548a:	d903      	bls.n	5494 <__aeabi_lmul+0x34>
    548c:	2380      	movs	r3, #128	; 0x80
    548e:	025b      	lsls	r3, r3, #9
    5490:	4698      	mov	r8, r3
    5492:	44c4      	add	ip, r8
    5494:	464b      	mov	r3, r9
    5496:	4351      	muls	r1, r2
    5498:	4343      	muls	r3, r0
    549a:	0436      	lsls	r6, r6, #16
    549c:	0c36      	lsrs	r6, r6, #16
    549e:	0c25      	lsrs	r5, r4, #16
    54a0:	0424      	lsls	r4, r4, #16
    54a2:	4465      	add	r5, ip
    54a4:	19a4      	adds	r4, r4, r6
    54a6:	1859      	adds	r1, r3, r1
    54a8:	1949      	adds	r1, r1, r5
    54aa:	0020      	movs	r0, r4
    54ac:	bc0c      	pop	{r2, r3}
    54ae:	4690      	mov	r8, r2
    54b0:	4699      	mov	r9, r3
    54b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000054b4 <__cxa_atexit>:
    54b4:	b510      	push	{r4, lr}
    54b6:	0013      	movs	r3, r2
    54b8:	000a      	movs	r2, r1
    54ba:	0001      	movs	r1, r0
    54bc:	2002      	movs	r0, #2
    54be:	f000 f881 	bl	55c4 <__register_exitproc>
    54c2:	bd10      	pop	{r4, pc}

000054c4 <__libc_init_array>:
    54c4:	b570      	push	{r4, r5, r6, lr}
    54c6:	4e0d      	ldr	r6, [pc, #52]	; (54fc <__libc_init_array+0x38>)
    54c8:	4d0d      	ldr	r5, [pc, #52]	; (5500 <__libc_init_array+0x3c>)
    54ca:	2400      	movs	r4, #0
    54cc:	1bad      	subs	r5, r5, r6
    54ce:	10ad      	asrs	r5, r5, #2
    54d0:	d005      	beq.n	54de <__libc_init_array+0x1a>
    54d2:	00a3      	lsls	r3, r4, #2
    54d4:	58f3      	ldr	r3, [r6, r3]
    54d6:	3401      	adds	r4, #1
    54d8:	4798      	blx	r3
    54da:	42a5      	cmp	r5, r4
    54dc:	d1f9      	bne.n	54d2 <__libc_init_array+0xe>
    54de:	f000 fa49 	bl	5974 <_init>
    54e2:	4e08      	ldr	r6, [pc, #32]	; (5504 <__libc_init_array+0x40>)
    54e4:	4d08      	ldr	r5, [pc, #32]	; (5508 <__libc_init_array+0x44>)
    54e6:	2400      	movs	r4, #0
    54e8:	1bad      	subs	r5, r5, r6
    54ea:	10ad      	asrs	r5, r5, #2
    54ec:	d005      	beq.n	54fa <__libc_init_array+0x36>
    54ee:	00a3      	lsls	r3, r4, #2
    54f0:	58f3      	ldr	r3, [r6, r3]
    54f2:	3401      	adds	r4, #1
    54f4:	4798      	blx	r3
    54f6:	42a5      	cmp	r5, r4
    54f8:	d1f9      	bne.n	54ee <__libc_init_array+0x2a>
    54fa:	bd70      	pop	{r4, r5, r6, pc}
    54fc:	00005980 	.word	0x00005980
    5500:	00005980 	.word	0x00005980
    5504:	00005980 	.word	0x00005980
    5508:	0000599c 	.word	0x0000599c

0000550c <memcpy>:
    550c:	b5f0      	push	{r4, r5, r6, r7, lr}
    550e:	0005      	movs	r5, r0
    5510:	2a0f      	cmp	r2, #15
    5512:	d92f      	bls.n	5574 <memcpy+0x68>
    5514:	000b      	movs	r3, r1
    5516:	4303      	orrs	r3, r0
    5518:	079b      	lsls	r3, r3, #30
    551a:	d134      	bne.n	5586 <memcpy+0x7a>
    551c:	0016      	movs	r6, r2
    551e:	000c      	movs	r4, r1
    5520:	0003      	movs	r3, r0
    5522:	3e10      	subs	r6, #16
    5524:	0935      	lsrs	r5, r6, #4
    5526:	3501      	adds	r5, #1
    5528:	012d      	lsls	r5, r5, #4
    552a:	1945      	adds	r5, r0, r5
    552c:	6827      	ldr	r7, [r4, #0]
    552e:	601f      	str	r7, [r3, #0]
    5530:	6867      	ldr	r7, [r4, #4]
    5532:	605f      	str	r7, [r3, #4]
    5534:	68a7      	ldr	r7, [r4, #8]
    5536:	609f      	str	r7, [r3, #8]
    5538:	68e7      	ldr	r7, [r4, #12]
    553a:	3410      	adds	r4, #16
    553c:	60df      	str	r7, [r3, #12]
    553e:	3310      	adds	r3, #16
    5540:	429d      	cmp	r5, r3
    5542:	d1f3      	bne.n	552c <memcpy+0x20>
    5544:	230f      	movs	r3, #15
    5546:	439e      	bics	r6, r3
    5548:	3610      	adds	r6, #16
    554a:	1985      	adds	r5, r0, r6
    554c:	1989      	adds	r1, r1, r6
    554e:	4013      	ands	r3, r2
    5550:	2b03      	cmp	r3, #3
    5552:	d91a      	bls.n	558a <memcpy+0x7e>
    5554:	1f1e      	subs	r6, r3, #4
    5556:	2300      	movs	r3, #0
    5558:	08b4      	lsrs	r4, r6, #2
    555a:	3401      	adds	r4, #1
    555c:	00a4      	lsls	r4, r4, #2
    555e:	58cf      	ldr	r7, [r1, r3]
    5560:	50ef      	str	r7, [r5, r3]
    5562:	3304      	adds	r3, #4
    5564:	42a3      	cmp	r3, r4
    5566:	d1fa      	bne.n	555e <memcpy+0x52>
    5568:	2403      	movs	r4, #3
    556a:	43a6      	bics	r6, r4
    556c:	1d33      	adds	r3, r6, #4
    556e:	4022      	ands	r2, r4
    5570:	18c9      	adds	r1, r1, r3
    5572:	18ed      	adds	r5, r5, r3
    5574:	2a00      	cmp	r2, #0
    5576:	d005      	beq.n	5584 <memcpy+0x78>
    5578:	2300      	movs	r3, #0
    557a:	5ccc      	ldrb	r4, [r1, r3]
    557c:	54ec      	strb	r4, [r5, r3]
    557e:	3301      	adds	r3, #1
    5580:	4293      	cmp	r3, r2
    5582:	d1fa      	bne.n	557a <memcpy+0x6e>
    5584:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5586:	0005      	movs	r5, r0
    5588:	e7f6      	b.n	5578 <memcpy+0x6c>
    558a:	001a      	movs	r2, r3
    558c:	e7f2      	b.n	5574 <memcpy+0x68>
    558e:	46c0      	nop			; (mov r8, r8)

00005590 <rand>:
    5590:	b510      	push	{r4, lr}
    5592:	4b09      	ldr	r3, [pc, #36]	; (55b8 <rand+0x28>)
    5594:	4a09      	ldr	r2, [pc, #36]	; (55bc <rand+0x2c>)
    5596:	681c      	ldr	r4, [r3, #0]
    5598:	4b09      	ldr	r3, [pc, #36]	; (55c0 <rand+0x30>)
    559a:	34a8      	adds	r4, #168	; 0xa8
    559c:	6820      	ldr	r0, [r4, #0]
    559e:	6861      	ldr	r1, [r4, #4]
    55a0:	f7ff ff5e 	bl	5460 <__aeabi_lmul>
    55a4:	2201      	movs	r2, #1
    55a6:	2300      	movs	r3, #0
    55a8:	1880      	adds	r0, r0, r2
    55aa:	4159      	adcs	r1, r3
    55ac:	6020      	str	r0, [r4, #0]
    55ae:	6061      	str	r1, [r4, #4]
    55b0:	0048      	lsls	r0, r1, #1
    55b2:	0840      	lsrs	r0, r0, #1
    55b4:	bd10      	pop	{r4, pc}
    55b6:	46c0      	nop			; (mov r8, r8)
    55b8:	200000a8 	.word	0x200000a8
    55bc:	4c957f2d 	.word	0x4c957f2d
    55c0:	5851f42d 	.word	0x5851f42d

000055c4 <__register_exitproc>:
    55c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    55c6:	464e      	mov	r6, r9
    55c8:	4645      	mov	r5, r8
    55ca:	46de      	mov	lr, fp
    55cc:	4657      	mov	r7, sl
    55ce:	b5e0      	push	{r5, r6, r7, lr}
    55d0:	4d36      	ldr	r5, [pc, #216]	; (56ac <__register_exitproc+0xe8>)
    55d2:	b083      	sub	sp, #12
    55d4:	0006      	movs	r6, r0
    55d6:	6828      	ldr	r0, [r5, #0]
    55d8:	4698      	mov	r8, r3
    55da:	000f      	movs	r7, r1
    55dc:	4691      	mov	r9, r2
    55de:	f000 f899 	bl	5714 <__retarget_lock_acquire_recursive>
    55e2:	4b33      	ldr	r3, [pc, #204]	; (56b0 <__register_exitproc+0xec>)
    55e4:	681c      	ldr	r4, [r3, #0]
    55e6:	23a4      	movs	r3, #164	; 0xa4
    55e8:	005b      	lsls	r3, r3, #1
    55ea:	58e0      	ldr	r0, [r4, r3]
    55ec:	2800      	cmp	r0, #0
    55ee:	d052      	beq.n	5696 <__register_exitproc+0xd2>
    55f0:	6843      	ldr	r3, [r0, #4]
    55f2:	2b1f      	cmp	r3, #31
    55f4:	dc13      	bgt.n	561e <__register_exitproc+0x5a>
    55f6:	1c5a      	adds	r2, r3, #1
    55f8:	9201      	str	r2, [sp, #4]
    55fa:	2e00      	cmp	r6, #0
    55fc:	d128      	bne.n	5650 <__register_exitproc+0x8c>
    55fe:	9a01      	ldr	r2, [sp, #4]
    5600:	3302      	adds	r3, #2
    5602:	009b      	lsls	r3, r3, #2
    5604:	6042      	str	r2, [r0, #4]
    5606:	501f      	str	r7, [r3, r0]
    5608:	6828      	ldr	r0, [r5, #0]
    560a:	f000 f885 	bl	5718 <__retarget_lock_release_recursive>
    560e:	2000      	movs	r0, #0
    5610:	b003      	add	sp, #12
    5612:	bc3c      	pop	{r2, r3, r4, r5}
    5614:	4690      	mov	r8, r2
    5616:	4699      	mov	r9, r3
    5618:	46a2      	mov	sl, r4
    561a:	46ab      	mov	fp, r5
    561c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    561e:	4b25      	ldr	r3, [pc, #148]	; (56b4 <__register_exitproc+0xf0>)
    5620:	2b00      	cmp	r3, #0
    5622:	d03d      	beq.n	56a0 <__register_exitproc+0xdc>
    5624:	20c8      	movs	r0, #200	; 0xc8
    5626:	0040      	lsls	r0, r0, #1
    5628:	e000      	b.n	562c <__register_exitproc+0x68>
    562a:	bf00      	nop
    562c:	2800      	cmp	r0, #0
    562e:	d037      	beq.n	56a0 <__register_exitproc+0xdc>
    5630:	22a4      	movs	r2, #164	; 0xa4
    5632:	2300      	movs	r3, #0
    5634:	0052      	lsls	r2, r2, #1
    5636:	58a1      	ldr	r1, [r4, r2]
    5638:	6043      	str	r3, [r0, #4]
    563a:	6001      	str	r1, [r0, #0]
    563c:	50a0      	str	r0, [r4, r2]
    563e:	3240      	adds	r2, #64	; 0x40
    5640:	5083      	str	r3, [r0, r2]
    5642:	3204      	adds	r2, #4
    5644:	5083      	str	r3, [r0, r2]
    5646:	3301      	adds	r3, #1
    5648:	9301      	str	r3, [sp, #4]
    564a:	2300      	movs	r3, #0
    564c:	2e00      	cmp	r6, #0
    564e:	d0d6      	beq.n	55fe <__register_exitproc+0x3a>
    5650:	009a      	lsls	r2, r3, #2
    5652:	4692      	mov	sl, r2
    5654:	4482      	add	sl, r0
    5656:	464a      	mov	r2, r9
    5658:	2188      	movs	r1, #136	; 0x88
    565a:	4654      	mov	r4, sl
    565c:	5062      	str	r2, [r4, r1]
    565e:	22c4      	movs	r2, #196	; 0xc4
    5660:	0052      	lsls	r2, r2, #1
    5662:	4691      	mov	r9, r2
    5664:	4481      	add	r9, r0
    5666:	464a      	mov	r2, r9
    5668:	3987      	subs	r1, #135	; 0x87
    566a:	4099      	lsls	r1, r3
    566c:	6812      	ldr	r2, [r2, #0]
    566e:	468b      	mov	fp, r1
    5670:	430a      	orrs	r2, r1
    5672:	4694      	mov	ip, r2
    5674:	464a      	mov	r2, r9
    5676:	4661      	mov	r1, ip
    5678:	6011      	str	r1, [r2, #0]
    567a:	2284      	movs	r2, #132	; 0x84
    567c:	4641      	mov	r1, r8
    567e:	0052      	lsls	r2, r2, #1
    5680:	50a1      	str	r1, [r4, r2]
    5682:	2e02      	cmp	r6, #2
    5684:	d1bb      	bne.n	55fe <__register_exitproc+0x3a>
    5686:	0002      	movs	r2, r0
    5688:	465c      	mov	r4, fp
    568a:	328d      	adds	r2, #141	; 0x8d
    568c:	32ff      	adds	r2, #255	; 0xff
    568e:	6811      	ldr	r1, [r2, #0]
    5690:	430c      	orrs	r4, r1
    5692:	6014      	str	r4, [r2, #0]
    5694:	e7b3      	b.n	55fe <__register_exitproc+0x3a>
    5696:	0020      	movs	r0, r4
    5698:	304d      	adds	r0, #77	; 0x4d
    569a:	30ff      	adds	r0, #255	; 0xff
    569c:	50e0      	str	r0, [r4, r3]
    569e:	e7a7      	b.n	55f0 <__register_exitproc+0x2c>
    56a0:	6828      	ldr	r0, [r5, #0]
    56a2:	f000 f839 	bl	5718 <__retarget_lock_release_recursive>
    56a6:	2001      	movs	r0, #1
    56a8:	4240      	negs	r0, r0
    56aa:	e7b1      	b.n	5610 <__register_exitproc+0x4c>
    56ac:	200004d8 	.word	0x200004d8
    56b0:	00005970 	.word	0x00005970
    56b4:	00000000 	.word	0x00000000

000056b8 <register_fini>:
    56b8:	4b03      	ldr	r3, [pc, #12]	; (56c8 <register_fini+0x10>)
    56ba:	b510      	push	{r4, lr}
    56bc:	2b00      	cmp	r3, #0
    56be:	d002      	beq.n	56c6 <register_fini+0xe>
    56c0:	4802      	ldr	r0, [pc, #8]	; (56cc <register_fini+0x14>)
    56c2:	f000 f805 	bl	56d0 <atexit>
    56c6:	bd10      	pop	{r4, pc}
    56c8:	00000000 	.word	0x00000000
    56cc:	000056e1 	.word	0x000056e1

000056d0 <atexit>:
    56d0:	b510      	push	{r4, lr}
    56d2:	0001      	movs	r1, r0
    56d4:	2300      	movs	r3, #0
    56d6:	2200      	movs	r2, #0
    56d8:	2000      	movs	r0, #0
    56da:	f7ff ff73 	bl	55c4 <__register_exitproc>
    56de:	bd10      	pop	{r4, pc}

000056e0 <__libc_fini_array>:
    56e0:	b570      	push	{r4, r5, r6, lr}
    56e2:	4b09      	ldr	r3, [pc, #36]	; (5708 <__libc_fini_array+0x28>)
    56e4:	4c09      	ldr	r4, [pc, #36]	; (570c <__libc_fini_array+0x2c>)
    56e6:	1ae4      	subs	r4, r4, r3
    56e8:	10a4      	asrs	r4, r4, #2
    56ea:	d009      	beq.n	5700 <__libc_fini_array+0x20>
    56ec:	4a08      	ldr	r2, [pc, #32]	; (5710 <__libc_fini_array+0x30>)
    56ee:	18a5      	adds	r5, r4, r2
    56f0:	00ad      	lsls	r5, r5, #2
    56f2:	18ed      	adds	r5, r5, r3
    56f4:	682b      	ldr	r3, [r5, #0]
    56f6:	3c01      	subs	r4, #1
    56f8:	4798      	blx	r3
    56fa:	3d04      	subs	r5, #4
    56fc:	2c00      	cmp	r4, #0
    56fe:	d1f9      	bne.n	56f4 <__libc_fini_array+0x14>
    5700:	f000 f94c 	bl	599c <_fini>
    5704:	bd70      	pop	{r4, r5, r6, pc}
    5706:	46c0      	nop			; (mov r8, r8)
    5708:	000059a8 	.word	0x000059a8
    570c:	000059ac 	.word	0x000059ac
    5710:	3fffffff 	.word	0x3fffffff

00005714 <__retarget_lock_acquire_recursive>:
    5714:	4770      	bx	lr
    5716:	46c0      	nop			; (mov r8, r8)

00005718 <__retarget_lock_release_recursive>:
    5718:	4770      	bx	lr
    571a:	46c0      	nop			; (mov r8, r8)
    571c:	00000376 	.word	0x00000376
    5720:	0000037e 	.word	0x0000037e
    5724:	00000386 	.word	0x00000386
    5728:	0000038e 	.word	0x0000038e
    572c:	00000396 	.word	0x00000396
    5730:	000003a6 	.word	0x000003a6
    5734:	682f2e2e 	.word	0x682f2e2e
    5738:	732f6c61 	.word	0x732f6c61
    573c:	682f6372 	.word	0x682f6372
    5740:	705f6c61 	.word	0x705f6c61
    5744:	632e6d77 	.word	0x632e6d77
    5748:	00000000 	.word	0x00000000
    574c:	682f2e2e 	.word	0x682f2e2e
    5750:	732f6c61 	.word	0x732f6c61
    5754:	682f6372 	.word	0x682f6372
    5758:	735f6c61 	.word	0x735f6c61
    575c:	6d5f6970 	.word	0x6d5f6970
    5760:	6e79735f 	.word	0x6e79735f
    5764:	00632e63 	.word	0x00632e63
    5768:	682f2e2e 	.word	0x682f2e2e
    576c:	732f6c61 	.word	0x732f6c61
    5770:	682f6372 	.word	0x682f6372
    5774:	745f6c61 	.word	0x745f6c61
    5778:	72656d69 	.word	0x72656d69
    577c:	0000632e 	.word	0x0000632e
    5780:	682f2e2e 	.word	0x682f2e2e
    5784:	752f6c61 	.word	0x752f6c61
    5788:	736c6974 	.word	0x736c6974
    578c:	6372732f 	.word	0x6372732f
    5790:	6974752f 	.word	0x6974752f
    5794:	6c5f736c 	.word	0x6c5f736c
    5798:	2e747369 	.word	0x2e747369
    579c:	00000063 	.word	0x00000063
    57a0:	682f2e2e 	.word	0x682f2e2e
    57a4:	732f6c70 	.word	0x732f6c70
    57a8:	6f637265 	.word	0x6f637265
    57ac:	70682f6d 	.word	0x70682f6d
    57b0:	65735f6c 	.word	0x65735f6c
    57b4:	6d6f6372 	.word	0x6d6f6372
    57b8:	0000632e 	.word	0x0000632e
    57bc:	682f2e2e 	.word	0x682f2e2e
    57c0:	742f6c70 	.word	0x742f6c70
    57c4:	70682f63 	.word	0x70682f63
    57c8:	63745f6c 	.word	0x63745f6c
    57cc:	0000632e 	.word	0x0000632e
    57d0:	2e2f2e2e 	.word	0x2e2f2e2e
    57d4:	2e2e2f2e 	.word	0x2e2e2f2e
    57d8:	4950472f 	.word	0x4950472f
    57dc:	41535f4f 	.word	0x41535f4f
    57e0:	3132444d 	.word	0x3132444d
    57e4:	5345545f 	.word	0x5345545f
    57e8:	50472f54 	.word	0x50472f54
    57ec:	535f4f49 	.word	0x535f4f49
    57f0:	32444d41 	.word	0x32444d41
    57f4:	45545f31 	.word	0x45545f31
    57f8:	682f5453 	.word	0x682f5453
    57fc:	702f6c70 	.word	0x702f6c70
    5800:	2f74726f 	.word	0x2f74726f
    5804:	5f6c7068 	.word	0x5f6c7068
    5808:	6f697067 	.word	0x6f697067
    580c:	7361625f 	.word	0x7361625f
    5810:	00682e65 	.word	0x00682e65
    5814:	01000000 	.word	0x01000000
    5818:	00000001 	.word	0x00000001
    581c:	01010100 	.word	0x01010100
    5820:	01010101 	.word	0x01010101
    5824:	01010101 	.word	0x01010101
    5828:	00000001 	.word	0x00000001
    582c:	00010100 	.word	0x00010100
    5830:	00000000 	.word	0x00000000
    5834:	11131516 	.word	0x11131516
    5838:	0d101110 	.word	0x0d101110
    583c:	0d0e0f0c 	.word	0x0d0e0f0c
    5840:	0506070c 	.word	0x0506070c
    5844:	01020304 	.word	0x01020304
    5848:	05060700 	.word	0x05060700
    584c:	03080904 	.word	0x03080904
    5850:	00000002 	.word	0x00000002
	...
    585c:	01010000 	.word	0x01010000
    5860:	01010000 	.word	0x01010000
    5864:	00000101 	.word	0x00000101
    5868:	01010000 	.word	0x01010000
    586c:	00000101 	.word	0x00000101
    5870:	00000000 	.word	0x00000000
    5874:	03171819 	.word	0x03171819
    5878:	0e0f1213 	.word	0x0e0f1213
    587c:	0a0b1415 	.word	0x0a0b1415
    5880:	0e0f1617 	.word	0x0e0f1617
    5884:	12130c0d 	.word	0x12130c0d
    5888:	16171011 	.word	0x16171011
    588c:	1f081e1f 	.word	0x1f081e1f
    5890:	0000001e 	.word	0x0000001e
    5894:	2e2f2e2e 	.word	0x2e2f2e2e
    5898:	2e2e2f2e 	.word	0x2e2e2f2e
    589c:	4950472f 	.word	0x4950472f
    58a0:	41535f4f 	.word	0x41535f4f
    58a4:	3132444d 	.word	0x3132444d
    58a8:	5345545f 	.word	0x5345545f
    58ac:	50472f54 	.word	0x50472f54
    58b0:	535f4f49 	.word	0x535f4f49
    58b4:	32444d41 	.word	0x32444d41
    58b8:	45545f31 	.word	0x45545f31
    58bc:	682f5453 	.word	0x682f5453
    58c0:	702f6c70 	.word	0x702f6c70
    58c4:	2f74726f 	.word	0x2f74726f
    58c8:	5f6c7068 	.word	0x5f6c7068
    58cc:	6f697067 	.word	0x6f697067
    58d0:	7361625f 	.word	0x7361625f
    58d4:	00682e65 	.word	0x00682e65

000058d8 <defaultParameters>:
    58d8:	02bc02ee 02ee07d0 07d00320 450de000     ........ ......E
    58e8:	400dde6a 41400000 429a0000 40c00000     j..@..@A...B...@
    58f8:	41400000 42a40000 430c0000 43020000     ..@A...B...C...C
    5908:	3e7ed289 44048000 44048000 41a00000     ..~>...D...D...A
    5918:	41f00000 3f800000 451c4000 453b8000     ...A...?.@.E..;E
    5928:	00001f40 00001f40 00001f40 00001f40     @...@...@...@...
    5938:	00001388 00001388 00000064 00000064     ........d...d...
    5948:	41000000 428c0000 00000000              ...A...B....

00005954 <defaultPreferences>:
    5954:	000000fa 00000032 682f2e2e 732f6c61     ....2...../hal/s
    5964:	682f6372 695f6c61 00632e6f              rc/hal_io.c.

00005970 <_global_impure_ptr>:
    5970:	200000b0                                ... 

00005974 <_init>:
    5974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5976:	46c0      	nop			; (mov r8, r8)
    5978:	bcf8      	pop	{r3, r4, r5, r6, r7}
    597a:	bc08      	pop	{r3}
    597c:	469e      	mov	lr, r3
    597e:	4770      	bx	lr

00005980 <__init_array_start>:
    5980:	000056b9 	.word	0x000056b9

00005984 <__frame_dummy_init_array_entry>:
    5984:	000000dd 00000495 00002e71 00004495     ........q....D..
    5994:	00004711 00004f71                       .G..qO..

0000599c <_fini>:
    599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    599e:	46c0      	nop			; (mov r8, r8)
    59a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    59a2:	bc08      	pop	{r3}
    59a4:	469e      	mov	lr, r3
    59a6:	4770      	bx	lr

000059a8 <__fini_array_start>:
    59a8:	000000b5 	.word	0x000000b5
