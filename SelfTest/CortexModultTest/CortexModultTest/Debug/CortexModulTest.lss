
CortexModulTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005348  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005348  00005348  00015348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000484  20000000  00005350  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000518  20000484  000057d4  00020484  2**2
                  ALLOC
  4 .stack        00002004  2000099c  00005cec  00020484  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020484  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000204ac  2**0
                  CONTENTS, READONLY
  7 .debug_info   00032b8a  00000000  00000000  00020505  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000044b8  00000000  00000000  0005308f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ebec  00000000  00000000  00057547  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001020  00000000  00000000  00066133  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000014b0  00000000  00000000  00067153  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001cf85  00000000  00000000  00068603  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00014b9b  00000000  00000000  00085588  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008cdd0  00000000  00000000  0009a123  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003204  00000000  00000000  00126ef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 29 00 20 c9 04 00 00 c5 04 00 00 c5 04 00 00     .). ............
	...
      2c:	c5 04 00 00 00 00 00 00 00 00 00 00 c5 04 00 00     ................
      3c:	c5 04 00 00 c5 04 00 00 c5 04 00 00 c5 04 00 00     ................
      4c:	c5 04 00 00 c5 04 00 00 c5 04 00 00 c5 04 00 00     ................
      5c:	c5 04 00 00 c5 04 00 00 c5 04 00 00 c5 04 00 00     ................
      6c:	c5 04 00 00 c5 04 00 00 c5 04 00 00 c5 04 00 00     ................
      7c:	c5 04 00 00 c5 04 00 00 c5 04 00 00 95 16 00 00     ................
      8c:	cd 16 00 00 e1 16 00 00 c5 04 00 00 f5 16 00 00     ................
      9c:	c5 04 00 00 c5 04 00 00 c5 04 00 00 c5 04 00 00     ................
      ac:	c5 04 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000484 	.word	0x20000484
      d4:	00000000 	.word	0x00000000
      d8:	00005350 	.word	0x00005350

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000488 	.word	0x20000488
     108:	00005350 	.word	0x00005350
     10c:	00005350 	.word	0x00005350
     110:	00000000 	.word	0x00000000

00000114 <_ZN17Application_ClassD1Ev>:
} //Application_Class

// default destructor
Application_Class::~Application_Class()
{
} //~Application_Class
     114:	4770      	bx	lr
	...

00000118 <_ZN17Application_Class4InitEv>:

void Application_Class::Init(void){
     118:	b570      	push	{r4, r5, r6, lr}
     11a:	0005      	movs	r5, r0
	lighter.poweronSingleTime=POWERON_SINGLE_TIME;
     11c:	4c09      	ldr	r4, [pc, #36]	; (144 <_ZN17Application_Class4InitEv+0x2c>)
     11e:	4a0a      	ldr	r2, [pc, #40]	; (148 <_ZN17Application_Class4InitEv+0x30>)
     120:	23c6      	movs	r3, #198	; 0xc6
     122:	005b      	lsls	r3, r3, #1
     124:	50e2      	str	r2, [r4, r3]
	lighter.Init();
     126:	0020      	movs	r0, r4
     128:	4b08      	ldr	r3, [pc, #32]	; (14c <_ZN17Application_Class4InitEv+0x34>)
     12a:	4798      	blx	r3
	flash.Init();
     12c:	4808      	ldr	r0, [pc, #32]	; (150 <_ZN17Application_Class4InitEv+0x38>)
     12e:	4b09      	ldr	r3, [pc, #36]	; (154 <_ZN17Application_Class4InitEv+0x3c>)
     130:	4798      	blx	r3
	totalPins=lighter.GetTotalPins();
     132:	0020      	movs	r0, r4
     134:	4b08      	ldr	r3, [pc, #32]	; (158 <_ZN17Application_Class4InitEv+0x40>)
     136:	4798      	blx	r3
     138:	2322      	movs	r3, #34	; 0x22
     13a:	54e8      	strb	r0, [r5, r3]
	addressCounter=0;
     13c:	2300      	movs	r3, #0
     13e:	626b      	str	r3, [r5, #36]	; 0x24
}
     140:	bd70      	pop	{r4, r5, r6, pc}
     142:	46c0      	nop			; (mov r8, r8)
     144:	200004ec 	.word	0x200004ec
     148:	00000bb8 	.word	0x00000bb8
     14c:	00001865 	.word	0x00001865
     150:	2000082c 	.word	0x2000082c
     154:	00004225 	.word	0x00004225
     158:	00002af5 	.word	0x00002af5

0000015c <_ZN17Application_Class15IsDataCorruptedEv>:
		lighter.onLila=false;
		return is_corrupted;
}


bool	Application_Class::IsDataCorrupted(void){
     15c:	b510      	push	{r4, lr}
	is_corrupted=false;
     15e:	2200      	movs	r2, #0
     160:	2320      	movs	r3, #32
     162:	54c2      	strb	r2, [r0, r3]
	for (int i = 0; i < ISSI_BUFFER_SIZE; i++) {
		if (tx_buffer[i] != rx_buffer[i]) {
     164:	7802      	ldrb	r2, [r0, #0]
     166:	7c03      	ldrb	r3, [r0, #16]
     168:	429a      	cmp	r2, r3
     16a:	d10c      	bne.n	186 <_ZN17Application_Class15IsDataCorruptedEv+0x2a>
     16c:	1c43      	adds	r3, r0, #1
     16e:	0004      	movs	r4, r0
     170:	3410      	adds	r4, #16
     172:	7819      	ldrb	r1, [r3, #0]
     174:	7c1a      	ldrb	r2, [r3, #16]
     176:	4291      	cmp	r1, r2
     178:	d105      	bne.n	186 <_ZN17Application_Class15IsDataCorruptedEv+0x2a>
     17a:	3301      	adds	r3, #1
	for (int i = 0; i < ISSI_BUFFER_SIZE; i++) {
     17c:	42a3      	cmp	r3, r4
     17e:	d1f8      	bne.n	172 <_ZN17Application_Class15IsDataCorruptedEv+0x16>
			is_corrupted=true;
			break;
		}
		
	}
	return	is_corrupted;
     180:	2320      	movs	r3, #32
     182:	5cc0      	ldrb	r0, [r0, r3]
}
     184:	bd10      	pop	{r4, pc}
			is_corrupted=true;
     186:	2201      	movs	r2, #1
     188:	2320      	movs	r3, #32
     18a:	54c2      	strb	r2, [r0, r3]
			break;
     18c:	e7f8      	b.n	180 <_ZN17Application_Class15IsDataCorruptedEv+0x24>
	...

00000190 <_ZN17Application_Class12FillTXBufferEv>:
	flash.ReadAddress(rx_buffer,addressCounter,ISSI_BUFFER_SIZE);
//	delay_ms(ISSI_BUFFER_SIZE/2);
	NextAddress();
	return	IsDataCorrupted();
}
uint8_t	Application_Class::FillTXBuffer(void){
     190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     192:	0007      	movs	r7, r0
     194:	0004      	movs	r4, r0
     196:	0006      	movs	r6, r0
     198:	3610      	adds	r6, #16
	for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
		tx_buffer[i] = (uint8_t)rand();
     19a:	4d04      	ldr	r5, [pc, #16]	; (1ac <_ZN17Application_Class12FillTXBufferEv+0x1c>)
     19c:	47a8      	blx	r5
     19e:	7020      	strb	r0, [r4, #0]
     1a0:	3401      	adds	r4, #1
	for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
     1a2:	42b4      	cmp	r4, r6
     1a4:	d1fa      	bne.n	19c <_ZN17Application_Class12FillTXBufferEv+0xc>
	}
	return	tx_buffer[ISSI_BUFFER_SIZE-1];
     1a6:	7bf8      	ldrb	r0, [r7, #15]
}
     1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1aa:	46c0      	nop			; (mov r8, r8)
     1ac:	00004f31 	.word	0x00004f31

000001b0 <_ZN17Application_Class11NextAddressEv>:
uint32_t	Application_Class::NextAddress(void){
     1b0:	0002      	movs	r2, r0
	addressCounter= (addressCounter+ISSI_BUFFER_SIZE)%TEST_FLASH_SIZE;
     1b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
     1b4:	3310      	adds	r3, #16
     1b6:	051b      	lsls	r3, r3, #20
     1b8:	0d18      	lsrs	r0, r3, #20
     1ba:	6250      	str	r0, [r2, #36]	; 0x24
	return	addressCounter;
}
     1bc:	4770      	bx	lr
	...

000001c0 <_ZN17Application_Class15FastMemoryCheckEv>:
bool	Application_Class::FastMemoryCheck(void){
     1c0:	b570      	push	{r4, r5, r6, lr}
     1c2:	0004      	movs	r4, r0
	FillTXBuffer();
     1c4:	4b0b      	ldr	r3, [pc, #44]	; (1f4 <_ZN17Application_Class15FastMemoryCheckEv+0x34>)
     1c6:	4798      	blx	r3
	flash.WriteAddress(tx_buffer,addressCounter,ISSI_BUFFER_SIZE);
     1c8:	4d0b      	ldr	r5, [pc, #44]	; (1f8 <_ZN17Application_Class15FastMemoryCheckEv+0x38>)
     1ca:	2310      	movs	r3, #16
     1cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
     1ce:	0021      	movs	r1, r4
     1d0:	0028      	movs	r0, r5
     1d2:	4e0a      	ldr	r6, [pc, #40]	; (1fc <_ZN17Application_Class15FastMemoryCheckEv+0x3c>)
     1d4:	47b0      	blx	r6
	flash.ReadAddress(rx_buffer,addressCounter,ISSI_BUFFER_SIZE);
     1d6:	0021      	movs	r1, r4
     1d8:	3110      	adds	r1, #16
     1da:	2310      	movs	r3, #16
     1dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
     1de:	0028      	movs	r0, r5
     1e0:	4d07      	ldr	r5, [pc, #28]	; (200 <_ZN17Application_Class15FastMemoryCheckEv+0x40>)
     1e2:	47a8      	blx	r5
	NextAddress();
     1e4:	0020      	movs	r0, r4
     1e6:	4b07      	ldr	r3, [pc, #28]	; (204 <_ZN17Application_Class15FastMemoryCheckEv+0x44>)
     1e8:	4798      	blx	r3
	return	IsDataCorrupted();
     1ea:	0020      	movs	r0, r4
     1ec:	4b06      	ldr	r3, [pc, #24]	; (208 <_ZN17Application_Class15FastMemoryCheckEv+0x48>)
     1ee:	4798      	blx	r3
}
     1f0:	bd70      	pop	{r4, r5, r6, pc}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	00000191 	.word	0x00000191
     1f8:	2000082c 	.word	0x2000082c
     1fc:	00004709 	.word	0x00004709
     200:	000047fd 	.word	0x000047fd
     204:	000001b1 	.word	0x000001b1
     208:	0000015d 	.word	0x0000015d

0000020c <_ZN17Application_Class16CheckFlashMemoryEv>:
bool	Application_Class::CheckFlashMemory(void){
     20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     20e:	0004      	movs	r4, r0
		lighter.request=false;
     210:	4b47      	ldr	r3, [pc, #284]	; (330 <_ZN17Application_Class16CheckFlashMemoryEv+0x124>)
     212:	2500      	movs	r5, #0
     214:	22c4      	movs	r2, #196	; 0xc4
     216:	0052      	lsls	r2, r2, #1
     218:	549d      	strb	r5, [r3, r2]
		lighter.onLila=true;
     21a:	2101      	movs	r1, #1
     21c:	228a      	movs	r2, #138	; 0x8a
     21e:	32ff      	adds	r2, #255	; 0xff
     220:	5499      	strb	r1, [r3, r2]
		FastMemoryCheck();
     222:	4b44      	ldr	r3, [pc, #272]	; (334 <_ZN17Application_Class16CheckFlashMemoryEv+0x128>)
     224:	4798      	blx	r3
		errorCounter=0;
     226:	62a5      	str	r5, [r4, #40]	; 0x28
		addressCounter=0; succesCounter=0;
     228:	6265      	str	r5, [r4, #36]	; 0x24
     22a:	62e5      	str	r5, [r4, #44]	; 0x2c
		succesLimit=(uint32_t)(TEST_FLASH_SIZE/ISSI_BUFFER_SIZE);
     22c:	2380      	movs	r3, #128	; 0x80
     22e:	005b      	lsls	r3, r3, #1
     230:	6323      	str	r3, [r4, #48]	; 0x30
		flash.eraseFlash(0,TEST_FLASH_SIZE*ISSI_BUFFER_SIZE*1);
     232:	2280      	movs	r2, #128	; 0x80
     234:	0252      	lsls	r2, r2, #9
     236:	2100      	movs	r1, #0
     238:	483f      	ldr	r0, [pc, #252]	; (338 <_ZN17Application_Class16CheckFlashMemoryEv+0x12c>)
     23a:	4b40      	ldr	r3, [pc, #256]	; (33c <_ZN17Application_Class16CheckFlashMemoryEv+0x130>)
     23c:	4798      	blx	r3
		while (app.FastMemoryCheck());
     23e:	4e40      	ldr	r6, [pc, #256]	; (340 <_ZN17Application_Class16CheckFlashMemoryEv+0x134>)
     240:	4d3c      	ldr	r5, [pc, #240]	; (334 <_ZN17Application_Class16CheckFlashMemoryEv+0x128>)
     242:	0030      	movs	r0, r6
     244:	47a8      	blx	r5
     246:	2800      	cmp	r0, #0
     248:	d1fb      	bne.n	242 <_ZN17Application_Class16CheckFlashMemoryEv+0x36>
			for (int k=2;k<totalPins;k++)
     24a:	2322      	movs	r3, #34	; 0x22
     24c:	5ce3      	ldrb	r3, [r4, r3]
     24e:	2b02      	cmp	r3, #2
     250:	dd49      	ble.n	2e6 <_ZN17Application_Class16CheckFlashMemoryEv+0xda>
     252:	2502      	movs	r5, #2
				if (lighter.IsBlue(k))
     254:	4f3b      	ldr	r7, [pc, #236]	; (344 <_ZN17Application_Class16CheckFlashMemoryEv+0x138>)
     256:	e022      	b.n	29e <_ZN17Application_Class16CheckFlashMemoryEv+0x92>
						FillTXBuffer();
     258:	0020      	movs	r0, r4
     25a:	4b3b      	ldr	r3, [pc, #236]	; (348 <_ZN17Application_Class16CheckFlashMemoryEv+0x13c>)
     25c:	4798      	blx	r3
						flash.WriteAddress(tx_buffer,addressCounter,ISSI_BUFFER_SIZE);
     25e:	2310      	movs	r3, #16
     260:	6a62      	ldr	r2, [r4, #36]	; 0x24
     262:	0021      	movs	r1, r4
     264:	4834      	ldr	r0, [pc, #208]	; (338 <_ZN17Application_Class16CheckFlashMemoryEv+0x12c>)
     266:	4e39      	ldr	r6, [pc, #228]	; (34c <_ZN17Application_Class16CheckFlashMemoryEv+0x140>)
     268:	47b0      	blx	r6
						if (!lighter.PowerOnLila(k))
     26a:	0029      	movs	r1, r5
     26c:	4830      	ldr	r0, [pc, #192]	; (330 <_ZN17Application_Class16CheckFlashMemoryEv+0x124>)
     26e:	4b38      	ldr	r3, [pc, #224]	; (350 <_ZN17Application_Class16CheckFlashMemoryEv+0x144>)
     270:	4798      	blx	r3
     272:	2800      	cmp	r0, #0
     274:	d037      	beq.n	2e6 <_ZN17Application_Class16CheckFlashMemoryEv+0xda>
						flash.ReadAddress(rx_buffer,addressCounter,ISSI_BUFFER_SIZE);
     276:	0021      	movs	r1, r4
     278:	3110      	adds	r1, #16
     27a:	2310      	movs	r3, #16
     27c:	6a62      	ldr	r2, [r4, #36]	; 0x24
     27e:	482e      	ldr	r0, [pc, #184]	; (338 <_ZN17Application_Class16CheckFlashMemoryEv+0x12c>)
     280:	4e34      	ldr	r6, [pc, #208]	; (354 <_ZN17Application_Class16CheckFlashMemoryEv+0x148>)
     282:	47b0      	blx	r6
						succesCounter++;
     284:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     286:	3301      	adds	r3, #1
     288:	62e3      	str	r3, [r4, #44]	; 0x2c
     28a:	e028      	b.n	2de <_ZN17Application_Class16CheckFlashMemoryEv+0xd2>
					lighter.PowerOffPin(k);
     28c:	0029      	movs	r1, r5
     28e:	4828      	ldr	r0, [pc, #160]	; (330 <_ZN17Application_Class16CheckFlashMemoryEv+0x124>)
     290:	4b31      	ldr	r3, [pc, #196]	; (358 <_ZN17Application_Class16CheckFlashMemoryEv+0x14c>)
     292:	4798      	blx	r3
			for (int k=2;k<totalPins;k++)
     294:	3501      	adds	r5, #1
     296:	2322      	movs	r3, #34	; 0x22
     298:	5ce3      	ldrb	r3, [r4, r3]
     29a:	42ab      	cmp	r3, r5
     29c:	dd23      	ble.n	2e6 <_ZN17Application_Class16CheckFlashMemoryEv+0xda>
				if (lighter.IsBlue(k))
     29e:	b2e9      	uxtb	r1, r5
     2a0:	4823      	ldr	r0, [pc, #140]	; (330 <_ZN17Application_Class16CheckFlashMemoryEv+0x124>)
     2a2:	47b8      	blx	r7
     2a4:	2800      	cmp	r0, #0
     2a6:	d0f1      	beq.n	28c <_ZN17Application_Class16CheckFlashMemoryEv+0x80>
					if (IsDataCorrupted())
     2a8:	0020      	movs	r0, r4
     2aa:	4b2c      	ldr	r3, [pc, #176]	; (35c <_ZN17Application_Class16CheckFlashMemoryEv+0x150>)
     2ac:	4798      	blx	r3
     2ae:	2800      	cmp	r0, #0
     2b0:	d0d2      	beq.n	258 <_ZN17Application_Class16CheckFlashMemoryEv+0x4c>
						flash.WriteAddress(tx_buffer,addressCounter,ISSI_BUFFER_SIZE);
     2b2:	2310      	movs	r3, #16
     2b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
     2b6:	0021      	movs	r1, r4
     2b8:	481f      	ldr	r0, [pc, #124]	; (338 <_ZN17Application_Class16CheckFlashMemoryEv+0x12c>)
     2ba:	4e24      	ldr	r6, [pc, #144]	; (34c <_ZN17Application_Class16CheckFlashMemoryEv+0x140>)
     2bc:	47b0      	blx	r6
						if (!lighter.PowerOnFail(k))
     2be:	0029      	movs	r1, r5
     2c0:	481b      	ldr	r0, [pc, #108]	; (330 <_ZN17Application_Class16CheckFlashMemoryEv+0x124>)
     2c2:	4b27      	ldr	r3, [pc, #156]	; (360 <_ZN17Application_Class16CheckFlashMemoryEv+0x154>)
     2c4:	4798      	blx	r3
     2c6:	2800      	cmp	r0, #0
     2c8:	d00d      	beq.n	2e6 <_ZN17Application_Class16CheckFlashMemoryEv+0xda>
						flash.ReadAddress(rx_buffer,addressCounter,ISSI_BUFFER_SIZE);
     2ca:	0021      	movs	r1, r4
     2cc:	3110      	adds	r1, #16
     2ce:	2310      	movs	r3, #16
     2d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
     2d2:	4819      	ldr	r0, [pc, #100]	; (338 <_ZN17Application_Class16CheckFlashMemoryEv+0x12c>)
     2d4:	4e1f      	ldr	r6, [pc, #124]	; (354 <_ZN17Application_Class16CheckFlashMemoryEv+0x148>)
     2d6:	47b0      	blx	r6
						errorCounter++;
     2d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     2da:	3301      	adds	r3, #1
     2dc:	62a3      	str	r3, [r4, #40]	; 0x28
					NextAddress();
     2de:	0020      	movs	r0, r4
     2e0:	4b20      	ldr	r3, [pc, #128]	; (364 <_ZN17Application_Class16CheckFlashMemoryEv+0x158>)
     2e2:	4798      	blx	r3
     2e4:	e7d6      	b.n	294 <_ZN17Application_Class16CheckFlashMemoryEv+0x88>
		}while((!lighter.changeModeRequest)&&(succesCounter<succesLimit)&&(errorCounter<TEST_FLASH_SIZE));
     2e6:	23bc      	movs	r3, #188	; 0xbc
     2e8:	005b      	lsls	r3, r3, #1
     2ea:	4a11      	ldr	r2, [pc, #68]	; (330 <_ZN17Application_Class16CheckFlashMemoryEv+0x124>)
     2ec:	5cd3      	ldrb	r3, [r2, r3]
     2ee:	2b00      	cmp	r3, #0
     2f0:	d10b      	bne.n	30a <_ZN17Application_Class16CheckFlashMemoryEv+0xfe>
     2f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     2f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
     2f6:	4293      	cmp	r3, r2
     2f8:	d207      	bcs.n	30a <_ZN17Application_Class16CheckFlashMemoryEv+0xfe>
     2fa:	4b1b      	ldr	r3, [pc, #108]	; (368 <_ZN17Application_Class16CheckFlashMemoryEv+0x15c>)
     2fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     2fe:	429a      	cmp	r2, r3
     300:	d9a3      	bls.n	24a <_ZN17Application_Class16CheckFlashMemoryEv+0x3e>
			modus=1;
     302:	2201      	movs	r2, #1
     304:	2321      	movs	r3, #33	; 0x21
     306:	54e2      	strb	r2, [r4, r3]
     308:	e006      	b.n	318 <_ZN17Application_Class16CheckFlashMemoryEv+0x10c>
		if (errorCounter>=TEST_FLASH_SIZE)
     30a:	4b17      	ldr	r3, [pc, #92]	; (368 <_ZN17Application_Class16CheckFlashMemoryEv+0x15c>)
     30c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     30e:	429a      	cmp	r2, r3
     310:	d8f7      	bhi.n	302 <_ZN17Application_Class16CheckFlashMemoryEv+0xf6>
			modus=4;	
     312:	2204      	movs	r2, #4
     314:	2321      	movs	r3, #33	; 0x21
     316:	54e2      	strb	r2, [r4, r3]
		addressCounter=0;
     318:	2300      	movs	r3, #0
     31a:	6263      	str	r3, [r4, #36]	; 0x24
		lighter.request=false;
     31c:	4a04      	ldr	r2, [pc, #16]	; (330 <_ZN17Application_Class16CheckFlashMemoryEv+0x124>)
     31e:	21c4      	movs	r1, #196	; 0xc4
     320:	0049      	lsls	r1, r1, #1
     322:	5453      	strb	r3, [r2, r1]
		lighter.onLila=false;
     324:	218a      	movs	r1, #138	; 0x8a
     326:	31ff      	adds	r1, #255	; 0xff
     328:	5453      	strb	r3, [r2, r1]
		return is_corrupted;
     32a:	3320      	adds	r3, #32
     32c:	5ce0      	ldrb	r0, [r4, r3]
}
     32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     330:	200004ec 	.word	0x200004ec
     334:	000001c1 	.word	0x000001c1
     338:	2000082c 	.word	0x2000082c
     33c:	000043f5 	.word	0x000043f5
     340:	200004a0 	.word	0x200004a0
     344:	0000350f 	.word	0x0000350f
     348:	00000191 	.word	0x00000191
     34c:	00004709 	.word	0x00004709
     350:	00002499 	.word	0x00002499
     354:	000047fd 	.word	0x000047fd
     358:	00002741 	.word	0x00002741
     35c:	0000015d 	.word	0x0000015d
     360:	00002399 	.word	0x00002399
     364:	000001b1 	.word	0x000001b1
     368:	00000fff 	.word	0x00000fff

0000036c <_ZN17Application_Class9RunOnModeEv>:
void	Application_Class::RunOnMode(void){
     36c:	b510      	push	{r4, lr}
	switch (modus)
     36e:	2321      	movs	r3, #33	; 0x21
     370:	5cc2      	ldrb	r2, [r0, r3]
     372:	2a04      	cmp	r2, #4
     374:	d80a      	bhi.n	38c <_ZN17Application_Class9RunOnModeEv+0x20>
     376:	0093      	lsls	r3, r2, #2
     378:	4a15      	ldr	r2, [pc, #84]	; (3d0 <_ZN17Application_Class9RunOnModeEv+0x64>)
     37a:	58d3      	ldr	r3, [r2, r3]
     37c:	469f      	mov	pc, r3
		lighter.stepTime=POWERON_SINGLE_TIME;
     37e:	4815      	ldr	r0, [pc, #84]	; (3d4 <_ZN17Application_Class9RunOnModeEv+0x68>)
     380:	4a15      	ldr	r2, [pc, #84]	; (3d8 <_ZN17Application_Class9RunOnModeEv+0x6c>)
     382:	23c2      	movs	r3, #194	; 0xc2
     384:	005b      	lsls	r3, r3, #1
     386:	50c2      	str	r2, [r0, r3]
		lighter.GreenWave();
     388:	4b14      	ldr	r3, [pc, #80]	; (3dc <_ZN17Application_Class9RunOnModeEv+0x70>)
     38a:	4798      	blx	r3
}
     38c:	bd10      	pop	{r4, pc}
		lighter.stepTime=POWERON_SINGLE_TIME;
     38e:	4811      	ldr	r0, [pc, #68]	; (3d4 <_ZN17Application_Class9RunOnModeEv+0x68>)
     390:	4a11      	ldr	r2, [pc, #68]	; (3d8 <_ZN17Application_Class9RunOnModeEv+0x6c>)
     392:	23c2      	movs	r3, #194	; 0xc2
     394:	005b      	lsls	r3, r3, #1
     396:	50c2      	str	r2, [r0, r3]
		lighter.RedWave();
     398:	4b11      	ldr	r3, [pc, #68]	; (3e0 <_ZN17Application_Class9RunOnModeEv+0x74>)
     39a:	4798      	blx	r3
		break;
     39c:	e7f6      	b.n	38c <_ZN17Application_Class9RunOnModeEv+0x20>
		lighter.stepTime=POWERON_SINGLE_TIME;
     39e:	480d      	ldr	r0, [pc, #52]	; (3d4 <_ZN17Application_Class9RunOnModeEv+0x68>)
     3a0:	4a0d      	ldr	r2, [pc, #52]	; (3d8 <_ZN17Application_Class9RunOnModeEv+0x6c>)
     3a2:	23c2      	movs	r3, #194	; 0xc2
     3a4:	005b      	lsls	r3, r3, #1
     3a6:	50c2      	str	r2, [r0, r3]
		lighter.BlueWave();
     3a8:	4b0e      	ldr	r3, [pc, #56]	; (3e4 <_ZN17Application_Class9RunOnModeEv+0x78>)
     3aa:	4798      	blx	r3
		break;
     3ac:	e7ee      	b.n	38c <_ZN17Application_Class9RunOnModeEv+0x20>
			lighter.stepTime=POWERON_SINGLE_TIME/1000;
     3ae:	2103      	movs	r1, #3
     3b0:	23c2      	movs	r3, #194	; 0xc2
     3b2:	005b      	lsls	r3, r3, #1
     3b4:	4a07      	ldr	r2, [pc, #28]	; (3d4 <_ZN17Application_Class9RunOnModeEv+0x68>)
     3b6:	50d1      	str	r1, [r2, r3]
			CheckFlashMemory();
     3b8:	4b0b      	ldr	r3, [pc, #44]	; (3e8 <_ZN17Application_Class9RunOnModeEv+0x7c>)
     3ba:	4798      	blx	r3
		break;
     3bc:	e7e6      	b.n	38c <_ZN17Application_Class9RunOnModeEv+0x20>
		lighter.stepTime=POWERON_SINGLE_TIME/1000;
     3be:	4805      	ldr	r0, [pc, #20]	; (3d4 <_ZN17Application_Class9RunOnModeEv+0x68>)
     3c0:	2203      	movs	r2, #3
     3c2:	23c2      	movs	r3, #194	; 0xc2
     3c4:	005b      	lsls	r3, r3, #1
     3c6:	50c2      	str	r2, [r0, r3]
			lighter.LilaWave();
     3c8:	4b08      	ldr	r3, [pc, #32]	; (3ec <_ZN17Application_Class9RunOnModeEv+0x80>)
     3ca:	4798      	blx	r3
}
     3cc:	e7de      	b.n	38c <_ZN17Application_Class9RunOnModeEv+0x20>
     3ce:	46c0      	nop			; (mov r8, r8)
     3d0:	000050bc 	.word	0x000050bc
     3d4:	200004ec 	.word	0x200004ec
     3d8:	00000bb8 	.word	0x00000bb8
     3dc:	00001a65 	.word	0x00001a65
     3e0:	00001b29 	.word	0x00001b29
     3e4:	00001bed 	.word	0x00001bed
     3e8:	0000020d 	.word	0x0000020d
     3ec:	00001cb1 	.word	0x00001cb1

000003f0 <_ZN17Application_Class11ChangeModusEv>:
void	Application_Class::ChangeModus(void){
     3f0:	b510      	push	{r4, lr}
     3f2:	0004      	movs	r4, r0
	lighter.RestartLedModus();
     3f4:	480c      	ldr	r0, [pc, #48]	; (428 <_ZN17Application_Class11ChangeModusEv+0x38>)
     3f6:	4b0d      	ldr	r3, [pc, #52]	; (42c <_ZN17Application_Class11ChangeModusEv+0x3c>)
     3f8:	4798      	blx	r3
	if (modus==4)
     3fa:	2321      	movs	r3, #33	; 0x21
     3fc:	5ce3      	ldrb	r3, [r4, r3]
     3fe:	2b04      	cmp	r3, #4
     400:	d00e      	beq.n	420 <_ZN17Application_Class11ChangeModusEv+0x30>
		modus=(modus+1)%NUMBER_STATES;
     402:	3301      	adds	r3, #1
     404:	2203      	movs	r2, #3
     406:	4013      	ands	r3, r2
     408:	321e      	adds	r2, #30
     40a:	54a3      	strb	r3, [r4, r2]
	while(!lighter.restarted);
     40c:	4906      	ldr	r1, [pc, #24]	; (428 <_ZN17Application_Class11ChangeModusEv+0x38>)
     40e:	2276      	movs	r2, #118	; 0x76
     410:	32ff      	adds	r2, #255	; 0xff
     412:	5c8b      	ldrb	r3, [r1, r2]
     414:	2b00      	cmp	r3, #0
     416:	d0fc      	beq.n	412 <_ZN17Application_Class11ChangeModusEv+0x22>
	RunOnMode();
     418:	0020      	movs	r0, r4
     41a:	4b05      	ldr	r3, [pc, #20]	; (430 <_ZN17Application_Class11ChangeModusEv+0x40>)
     41c:	4798      	blx	r3
}
     41e:	bd10      	pop	{r4, pc}
		modus=0;
     420:	2200      	movs	r2, #0
     422:	331d      	adds	r3, #29
     424:	54e2      	strb	r2, [r4, r3]
     426:	e7f1      	b.n	40c <_ZN17Application_Class11ChangeModusEv+0x1c>
     428:	200004ec 	.word	0x200004ec
     42c:	000019ed 	.word	0x000019ed
     430:	0000036d 	.word	0x0000036d

00000434 <_ZN17Application_Class3RunEv>:
void	Application_Class::Run(void){
     434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     436:	0005      	movs	r5, r0
	lighter.ClearAll();
     438:	4813      	ldr	r0, [pc, #76]	; (488 <_ZN17Application_Class3RunEv+0x54>)
     43a:	4b14      	ldr	r3, [pc, #80]	; (48c <_ZN17Application_Class3RunEv+0x58>)
     43c:	4798      	blx	r3
		if (nmi.IsButtonPressed())
     43e:	4c14      	ldr	r4, [pc, #80]	; (490 <_ZN17Application_Class3RunEv+0x5c>)
     440:	4e14      	ldr	r6, [pc, #80]	; (494 <_ZN17Application_Class3RunEv+0x60>)
			if (lighter.changeModeRequest){
     442:	4f11      	ldr	r7, [pc, #68]	; (488 <_ZN17Application_Class3RunEv+0x54>)
     444:	e013      	b.n	46e <_ZN17Application_Class3RunEv+0x3a>
			nmi.OnPressed();
     446:	4812      	ldr	r0, [pc, #72]	; (490 <_ZN17Application_Class3RunEv+0x5c>)
     448:	4b13      	ldr	r3, [pc, #76]	; (498 <_ZN17Application_Class3RunEv+0x64>)
     44a:	4798      	blx	r3
			if (!lighter.changeModeRequest)
     44c:	23bc      	movs	r3, #188	; 0xbc
     44e:	005b      	lsls	r3, r3, #1
     450:	4a0d      	ldr	r2, [pc, #52]	; (488 <_ZN17Application_Class3RunEv+0x54>)
     452:	5cd3      	ldrb	r3, [r2, r3]
     454:	2b00      	cmp	r3, #0
     456:	d103      	bne.n	460 <_ZN17Application_Class3RunEv+0x2c>
				RunOnMode();
     458:	0028      	movs	r0, r5
     45a:	4b10      	ldr	r3, [pc, #64]	; (49c <_ZN17Application_Class3RunEv+0x68>)
     45c:	4798      	blx	r3
     45e:	e006      	b.n	46e <_ZN17Application_Class3RunEv+0x3a>
				ChangeModus();
     460:	0028      	movs	r0, r5
     462:	4b0f      	ldr	r3, [pc, #60]	; (4a0 <_ZN17Application_Class3RunEv+0x6c>)
     464:	4798      	blx	r3
     466:	e002      	b.n	46e <_ZN17Application_Class3RunEv+0x3a>
				RunOnMode();
     468:	0028      	movs	r0, r5
     46a:	4b0c      	ldr	r3, [pc, #48]	; (49c <_ZN17Application_Class3RunEv+0x68>)
     46c:	4798      	blx	r3
		if (nmi.IsButtonPressed())
     46e:	0020      	movs	r0, r4
     470:	47b0      	blx	r6
     472:	2800      	cmp	r0, #0
     474:	d1e7      	bne.n	446 <_ZN17Application_Class3RunEv+0x12>
			if (lighter.changeModeRequest){
     476:	23bc      	movs	r3, #188	; 0xbc
     478:	005b      	lsls	r3, r3, #1
     47a:	5cfb      	ldrb	r3, [r7, r3]
     47c:	2b00      	cmp	r3, #0
     47e:	d0f3      	beq.n	468 <_ZN17Application_Class3RunEv+0x34>
				ChangeModus();
     480:	0028      	movs	r0, r5
     482:	4b07      	ldr	r3, [pc, #28]	; (4a0 <_ZN17Application_Class3RunEv+0x6c>)
     484:	4798      	blx	r3
     486:	e7f2      	b.n	46e <_ZN17Application_Class3RunEv+0x3a>
     488:	200004ec 	.word	0x200004ec
     48c:	000027d9 	.word	0x000027d9
     490:	20000790 	.word	0x20000790
     494:	00003da9 	.word	0x00003da9
     498:	00003e39 	.word	0x00003e39
     49c:	0000036d 	.word	0x0000036d
     4a0:	000003f1 	.word	0x000003f1

000004a4 <_GLOBAL__sub_I__ZN17Application_ClassC2Ev>:

     4a4:	b510      	push	{r4, lr}
     4a6:	4a03      	ldr	r2, [pc, #12]	; (4b4 <_GLOBAL__sub_I__ZN17Application_ClassC2Ev+0x10>)
     4a8:	4903      	ldr	r1, [pc, #12]	; (4b8 <_GLOBAL__sub_I__ZN17Application_ClassC2Ev+0x14>)
     4aa:	4804      	ldr	r0, [pc, #16]	; (4bc <_GLOBAL__sub_I__ZN17Application_ClassC2Ev+0x18>)
     4ac:	4b04      	ldr	r3, [pc, #16]	; (4c0 <_GLOBAL__sub_I__ZN17Application_ClassC2Ev+0x1c>)
     4ae:	4798      	blx	r3
     4b0:	bd10      	pop	{r4, pc}
     4b2:	46c0      	nop			; (mov r8, r8)
     4b4:	20000000 	.word	0x20000000
     4b8:	00000115 	.word	0x00000115
     4bc:	200004a0 	.word	0x200004a0
     4c0:	00004b05 	.word	0x00004b05

000004c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     4c4:	e7fe      	b.n	4c4 <Dummy_Handler>
	...

000004c8 <Reset_Handler>:
{
     4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     4ca:	4a2a      	ldr	r2, [pc, #168]	; (574 <Reset_Handler+0xac>)
     4cc:	4b2a      	ldr	r3, [pc, #168]	; (578 <Reset_Handler+0xb0>)
     4ce:	429a      	cmp	r2, r3
     4d0:	d011      	beq.n	4f6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     4d2:	001a      	movs	r2, r3
     4d4:	4b29      	ldr	r3, [pc, #164]	; (57c <Reset_Handler+0xb4>)
     4d6:	429a      	cmp	r2, r3
     4d8:	d20d      	bcs.n	4f6 <Reset_Handler+0x2e>
     4da:	4a29      	ldr	r2, [pc, #164]	; (580 <Reset_Handler+0xb8>)
     4dc:	3303      	adds	r3, #3
     4de:	1a9b      	subs	r3, r3, r2
     4e0:	089b      	lsrs	r3, r3, #2
     4e2:	3301      	adds	r3, #1
     4e4:	009b      	lsls	r3, r3, #2
     4e6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     4e8:	4823      	ldr	r0, [pc, #140]	; (578 <Reset_Handler+0xb0>)
     4ea:	4922      	ldr	r1, [pc, #136]	; (574 <Reset_Handler+0xac>)
     4ec:	588c      	ldr	r4, [r1, r2]
     4ee:	5084      	str	r4, [r0, r2]
     4f0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     4f2:	429a      	cmp	r2, r3
     4f4:	d1fa      	bne.n	4ec <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     4f6:	4a23      	ldr	r2, [pc, #140]	; (584 <Reset_Handler+0xbc>)
     4f8:	4b23      	ldr	r3, [pc, #140]	; (588 <Reset_Handler+0xc0>)
     4fa:	429a      	cmp	r2, r3
     4fc:	d20a      	bcs.n	514 <Reset_Handler+0x4c>
     4fe:	43d3      	mvns	r3, r2
     500:	4921      	ldr	r1, [pc, #132]	; (588 <Reset_Handler+0xc0>)
     502:	185b      	adds	r3, r3, r1
     504:	2103      	movs	r1, #3
     506:	438b      	bics	r3, r1
     508:	3304      	adds	r3, #4
     50a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     50c:	2100      	movs	r1, #0
     50e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     510:	4293      	cmp	r3, r2
     512:	d1fc      	bne.n	50e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     514:	4a1d      	ldr	r2, [pc, #116]	; (58c <Reset_Handler+0xc4>)
     516:	21ff      	movs	r1, #255	; 0xff
     518:	4b1d      	ldr	r3, [pc, #116]	; (590 <Reset_Handler+0xc8>)
     51a:	438b      	bics	r3, r1
     51c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     51e:	39fd      	subs	r1, #253	; 0xfd
     520:	2390      	movs	r3, #144	; 0x90
     522:	005b      	lsls	r3, r3, #1
     524:	4a1b      	ldr	r2, [pc, #108]	; (594 <Reset_Handler+0xcc>)
     526:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     528:	4a1b      	ldr	r2, [pc, #108]	; (598 <Reset_Handler+0xd0>)
     52a:	78d3      	ldrb	r3, [r2, #3]
     52c:	2503      	movs	r5, #3
     52e:	43ab      	bics	r3, r5
     530:	2402      	movs	r4, #2
     532:	4323      	orrs	r3, r4
     534:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     536:	78d3      	ldrb	r3, [r2, #3]
     538:	270c      	movs	r7, #12
     53a:	43bb      	bics	r3, r7
     53c:	2608      	movs	r6, #8
     53e:	4333      	orrs	r3, r6
     540:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     542:	4b16      	ldr	r3, [pc, #88]	; (59c <Reset_Handler+0xd4>)
     544:	7b98      	ldrb	r0, [r3, #14]
     546:	2230      	movs	r2, #48	; 0x30
     548:	4390      	bics	r0, r2
     54a:	2220      	movs	r2, #32
     54c:	4310      	orrs	r0, r2
     54e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     550:	7b99      	ldrb	r1, [r3, #14]
     552:	43b9      	bics	r1, r7
     554:	4331      	orrs	r1, r6
     556:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     558:	7b9a      	ldrb	r2, [r3, #14]
     55a:	43aa      	bics	r2, r5
     55c:	4322      	orrs	r2, r4
     55e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     560:	4a0f      	ldr	r2, [pc, #60]	; (5a0 <Reset_Handler+0xd8>)
     562:	6853      	ldr	r3, [r2, #4]
     564:	2180      	movs	r1, #128	; 0x80
     566:	430b      	orrs	r3, r1
     568:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     56a:	4b0e      	ldr	r3, [pc, #56]	; (5a4 <Reset_Handler+0xdc>)
     56c:	4798      	blx	r3
        main();
     56e:	4b0e      	ldr	r3, [pc, #56]	; (5a8 <Reset_Handler+0xe0>)
     570:	4798      	blx	r3
     572:	e7fe      	b.n	572 <Reset_Handler+0xaa>
     574:	00005350 	.word	0x00005350
     578:	20000000 	.word	0x20000000
     57c:	20000484 	.word	0x20000484
     580:	20000004 	.word	0x20000004
     584:	20000484 	.word	0x20000484
     588:	2000099c 	.word	0x2000099c
     58c:	e000ed00 	.word	0xe000ed00
     590:	00000000 	.word	0x00000000
     594:	41007000 	.word	0x41007000
     598:	41005000 	.word	0x41005000
     59c:	41004800 	.word	0x41004800
     5a0:	41004000 	.word	0x41004000
     5a4:	00004e65 	.word	0x00004e65
     5a8:	000005ad 	.word	0x000005ad

000005ac <main>:
#include <atmel_start.h>
#include "main.h"


int main(void)
{
     5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		atmel_start_init();
     5ae:	4b0b      	ldr	r3, [pc, #44]	; (5dc <main+0x30>)
     5b0:	4798      	blx	r3
		app.Init();
     5b2:	480b      	ldr	r0, [pc, #44]	; (5e0 <main+0x34>)
     5b4:	4b0b      	ldr	r3, [pc, #44]	; (5e4 <main+0x38>)
     5b6:	4798      	blx	r3
    /* Replace with your application code */
    while (1) 
    {
	flash.eraseFlash(0x100,TEST_FLASH_SIZE*ISSI_BUFFER_SIZE*1);
     5b8:	4e0b      	ldr	r6, [pc, #44]	; (5e8 <main+0x3c>)
     5ba:	4f0c      	ldr	r7, [pc, #48]	; (5ec <main+0x40>)
	while (app.FastMemoryCheck());
     5bc:	4d08      	ldr	r5, [pc, #32]	; (5e0 <main+0x34>)
	flash.eraseFlash(0x100,TEST_FLASH_SIZE*ISSI_BUFFER_SIZE*1);
     5be:	2280      	movs	r2, #128	; 0x80
     5c0:	0252      	lsls	r2, r2, #9
     5c2:	2180      	movs	r1, #128	; 0x80
     5c4:	0049      	lsls	r1, r1, #1
     5c6:	0030      	movs	r0, r6
     5c8:	47b8      	blx	r7
	while (app.FastMemoryCheck());
     5ca:	4c09      	ldr	r4, [pc, #36]	; (5f0 <main+0x44>)
     5cc:	0028      	movs	r0, r5
     5ce:	47a0      	blx	r4
     5d0:	2800      	cmp	r0, #0
     5d2:	d1fb      	bne.n	5cc <main+0x20>
		
		app.Run();
     5d4:	4802      	ldr	r0, [pc, #8]	; (5e0 <main+0x34>)
     5d6:	4b07      	ldr	r3, [pc, #28]	; (5f4 <main+0x48>)
     5d8:	4798      	blx	r3
	flash.eraseFlash(0x100,TEST_FLASH_SIZE*ISSI_BUFFER_SIZE*1);
     5da:	e7f0      	b.n	5be <main+0x12>
     5dc:	000005f9 	.word	0x000005f9
     5e0:	200004a0 	.word	0x200004a0
     5e4:	00000119 	.word	0x00000119
     5e8:	2000082c 	.word	0x2000082c
     5ec:	000043f5 	.word	0x000043f5
     5f0:	000001c1 	.word	0x000001c1
     5f4:	00000435 	.word	0x00000435

000005f8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     5f8:	b510      	push	{r4, lr}
	system_init();
     5fa:	4b01      	ldr	r3, [pc, #4]	; (600 <atmel_start_init+0x8>)
     5fc:	4798      	blx	r3
}
     5fe:	bd10      	pop	{r4, pc}
     600:	00000755 	.word	0x00000755

00000604 <SPI_0_PORT_init>:
struct timer_descriptor      TIMER_3;

struct pwm_descriptor PWM_0;

void SPI_0_PORT_init(void)
{
     604:	b5f0      	push	{r4, r5, r6, r7, lr}
     606:	46ce      	mov	lr, r9
     608:	4647      	mov	r7, r8
     60a:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     60c:	21c0      	movs	r1, #192	; 0xc0
     60e:	05c9      	lsls	r1, r1, #23
     610:	2380      	movs	r3, #128	; 0x80
     612:	009b      	lsls	r3, r3, #2
     614:	604b      	str	r3, [r1, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     616:	4b25      	ldr	r3, [pc, #148]	; (6ac <SPI_0_PORT_init+0xa8>)
     618:	4a25      	ldr	r2, [pc, #148]	; (6b0 <SPI_0_PORT_init+0xac>)
     61a:	629a      	str	r2, [r3, #40]	; 0x28
     61c:	4a25      	ldr	r2, [pc, #148]	; (6b4 <SPI_0_PORT_init+0xb0>)
     61e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     620:	2449      	movs	r4, #73	; 0x49
     622:	5d1a      	ldrb	r2, [r3, r4]
     624:	2004      	movs	r0, #4
     626:	4382      	bics	r2, r0
     628:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     62a:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     62c:	2601      	movs	r6, #1
     62e:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     630:	2201      	movs	r2, #1
     632:	4310      	orrs	r0, r2
     634:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     636:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     638:	2734      	movs	r7, #52	; 0x34
     63a:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     63c:	250f      	movs	r5, #15
     63e:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
     640:	2420      	movs	r4, #32
     642:	46a1      	mov	r9, r4
     644:	464c      	mov	r4, r9
     646:	4320      	orrs	r0, r4
     648:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64a:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     64c:	2080      	movs	r0, #128	; 0x80
     64e:	00c0      	lsls	r0, r0, #3
     650:	6148      	str	r0, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     652:	6088      	str	r0, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     654:	4818      	ldr	r0, [pc, #96]	; (6b8 <SPI_0_PORT_init+0xb4>)
     656:	6298      	str	r0, [r3, #40]	; 0x28
     658:	20c0      	movs	r0, #192	; 0xc0
     65a:	0600      	lsls	r0, r0, #24
     65c:	4684      	mov	ip, r0
     65e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     660:	3716      	adds	r7, #22
     662:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     664:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     666:	4310      	orrs	r0, r2
     668:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     66c:	2035      	movs	r0, #53	; 0x35
     66e:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     670:	240f      	movs	r4, #15
     672:	43a7      	bics	r7, r4
	tmp |= PORT_PMUX_PMUXE(data);
     674:	3c0d      	subs	r4, #13
     676:	4327      	orrs	r7, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     678:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     67a:	2780      	movs	r7, #128	; 0x80
     67c:	013f      	lsls	r7, r7, #4
     67e:	614f      	str	r7, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     680:	608f      	str	r7, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	490e      	ldr	r1, [pc, #56]	; (6bc <SPI_0_PORT_init+0xb8>)
     684:	6299      	str	r1, [r3, #40]	; 0x28
     686:	4661      	mov	r1, ip
     688:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68a:	274b      	movs	r7, #75	; 0x4b
     68c:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     68e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     690:	4311      	orrs	r1, r2
     692:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     694:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     696:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     698:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
     69a:	4649      	mov	r1, r9
     69c:	430a      	orrs	r2, r1
     69e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a0:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
}
     6a2:	bc0c      	pop	{r2, r3}
     6a4:	4690      	mov	r8, r2
     6a6:	4699      	mov	r9, r3
     6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6aa:	46c0      	nop			; (mov r8, r8)
     6ac:	41004400 	.word	0x41004400
     6b0:	40020200 	.word	0x40020200
     6b4:	c0020000 	.word	0xc0020000
     6b8:	40000400 	.word	0x40000400
     6bc:	40000800 	.word	0x40000800

000006c0 <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     6c0:	4a04      	ldr	r2, [pc, #16]	; (6d4 <SPI_0_CLOCK_init+0x14>)
     6c2:	6a13      	ldr	r3, [r2, #32]
     6c4:	2104      	movs	r1, #4
     6c6:	430b      	orrs	r3, r1
     6c8:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     6ca:	4a03      	ldr	r2, [pc, #12]	; (6d8 <SPI_0_CLOCK_init+0x18>)
     6cc:	4b03      	ldr	r3, [pc, #12]	; (6dc <SPI_0_CLOCK_init+0x1c>)
     6ce:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     6d0:	4770      	bx	lr
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	40000400 	.word	0x40000400
     6d8:	00004014 	.word	0x00004014
     6dc:	40000c00 	.word	0x40000c00

000006e0 <SPI_0_init>:

void SPI_0_init(void)
{
     6e0:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     6e2:	4b04      	ldr	r3, [pc, #16]	; (6f4 <SPI_0_init+0x14>)
     6e4:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     6e6:	4904      	ldr	r1, [pc, #16]	; (6f8 <SPI_0_init+0x18>)
     6e8:	4804      	ldr	r0, [pc, #16]	; (6fc <SPI_0_init+0x1c>)
     6ea:	4b05      	ldr	r3, [pc, #20]	; (700 <SPI_0_init+0x20>)
     6ec:	4798      	blx	r3
	SPI_0_PORT_init();
     6ee:	4b05      	ldr	r3, [pc, #20]	; (704 <SPI_0_init+0x24>)
     6f0:	4798      	blx	r3
}
     6f2:	bd10      	pop	{r4, pc}
     6f4:	000006c1 	.word	0x000006c1
     6f8:	42000800 	.word	0x42000800
     6fc:	20000944 	.word	0x20000944
     700:	000009bd 	.word	0x000009bd
     704:	00000605 	.word	0x00000605

00000708 <PWM_0_CLOCK_init>:
     708:	4a04      	ldr	r2, [pc, #16]	; (71c <PWM_0_CLOCK_init+0x14>)
     70a:	6a11      	ldr	r1, [r2, #32]
     70c:	2380      	movs	r3, #128	; 0x80
     70e:	011b      	lsls	r3, r3, #4
     710:	430b      	orrs	r3, r1
     712:	6213      	str	r3, [r2, #32]
     714:	4a02      	ldr	r2, [pc, #8]	; (720 <PWM_0_CLOCK_init+0x18>)
     716:	4b03      	ldr	r3, [pc, #12]	; (724 <PWM_0_CLOCK_init+0x1c>)
     718:	805a      	strh	r2, [r3, #2]

void PWM_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);
}
     71a:	4770      	bx	lr
     71c:	40000400 	.word	0x40000400
     720:	0000431b 	.word	0x0000431b
     724:	40000c00 	.word	0x40000c00

00000728 <PWM_0_init>:

void PWM_0_init(void)
{
     728:	b510      	push	{r4, lr}
	PWM_0_CLOCK_init();
     72a:	4b05      	ldr	r3, [pc, #20]	; (740 <PWM_0_init+0x18>)
     72c:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC3, _tc_get_pwm());
     72e:	4b05      	ldr	r3, [pc, #20]	; (744 <PWM_0_init+0x1c>)
     730:	4798      	blx	r3
     732:	0002      	movs	r2, r0
     734:	4904      	ldr	r1, [pc, #16]	; (748 <PWM_0_init+0x20>)
     736:	4805      	ldr	r0, [pc, #20]	; (74c <PWM_0_init+0x24>)
     738:	4b05      	ldr	r3, [pc, #20]	; (750 <PWM_0_init+0x28>)
     73a:	4798      	blx	r3
}
     73c:	bd10      	pop	{r4, pc}
     73e:	46c0      	nop			; (mov r8, r8)
     740:	00000709 	.word	0x00000709
     744:	00001671 	.word	0x00001671
     748:	42002c00 	.word	0x42002c00
     74c:	2000090c 	.word	0x2000090c
     750:	00000881 	.word	0x00000881

00000754 <system_init>:

	timer_init(&TIMER_3, TC7, _tc_get_timer());
}

void system_init(void)
{
     754:	b5f0      	push	{r4, r5, r6, r7, lr}
     756:	46c6      	mov	lr, r8
     758:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     75a:	4b2f      	ldr	r3, [pc, #188]	; (818 <system_init+0xc4>)
     75c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     75e:	22c0      	movs	r2, #192	; 0xc0
     760:	05d2      	lsls	r2, r2, #23
     762:	2080      	movs	r0, #128	; 0x80
     764:	0040      	lsls	r0, r0, #1
     766:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     768:	4b2c      	ldr	r3, [pc, #176]	; (81c <system_init+0xc8>)
     76a:	492d      	ldr	r1, [pc, #180]	; (820 <system_init+0xcc>)
     76c:	6299      	str	r1, [r3, #40]	; 0x28
     76e:	492d      	ldr	r1, [pc, #180]	; (824 <system_init+0xd0>)
     770:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     772:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     774:	2148      	movs	r1, #72	; 0x48
     776:	5c5c      	ldrb	r4, [r3, r1]
     778:	2504      	movs	r5, #4
     77a:	432c      	orrs	r4, r5
     77c:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     77e:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     780:	5c5c      	ldrb	r4, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     782:	38ff      	subs	r0, #255	; 0xff
     784:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     786:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     788:	2180      	movs	r1, #128	; 0x80
     78a:	0509      	lsls	r1, r1, #20
     78c:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     78e:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     790:	2480      	movs	r4, #128	; 0x80
     792:	05e4      	lsls	r4, r4, #23
     794:	629c      	str	r4, [r3, #40]	; 0x28
     796:	4924      	ldr	r1, [pc, #144]	; (828 <system_init+0xd4>)
     798:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     79a:	3557      	adds	r5, #87	; 0x57
     79c:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     79e:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7a0:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7a2:	2180      	movs	r1, #128	; 0x80
     7a4:	0549      	lsls	r1, r1, #21
     7a6:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7a8:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7aa:	629c      	str	r4, [r3, #40]	; 0x28
     7ac:	4a1f      	ldr	r2, [pc, #124]	; (82c <system_init+0xd8>)
     7ae:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7b0:	215c      	movs	r1, #92	; 0x5c
     7b2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7b4:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7b6:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);

	SPI_0_init();
     7b8:	4b1d      	ldr	r3, [pc, #116]	; (830 <system_init+0xdc>)
     7ba:	4798      	blx	r3

	PWM_0_init();
     7bc:	4b1d      	ldr	r3, [pc, #116]	; (834 <system_init+0xe0>)
     7be:	4798      	blx	r3
     7c0:	4c1d      	ldr	r4, [pc, #116]	; (838 <system_init+0xe4>)
     7c2:	6a22      	ldr	r2, [r4, #32]
     7c4:	2380      	movs	r3, #128	; 0x80
     7c6:	015b      	lsls	r3, r3, #5
     7c8:	4313      	orrs	r3, r2
     7ca:	6223      	str	r3, [r4, #32]
     7cc:	4f1b      	ldr	r7, [pc, #108]	; (83c <system_init+0xe8>)
     7ce:	4b1c      	ldr	r3, [pc, #112]	; (840 <system_init+0xec>)
     7d0:	4698      	mov	r8, r3
     7d2:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_1, TC4, _tc_get_timer());
     7d4:	4e1b      	ldr	r6, [pc, #108]	; (844 <system_init+0xf0>)
     7d6:	47b0      	blx	r6
     7d8:	0002      	movs	r2, r0
     7da:	491b      	ldr	r1, [pc, #108]	; (848 <system_init+0xf4>)
     7dc:	481b      	ldr	r0, [pc, #108]	; (84c <system_init+0xf8>)
     7de:	4d1c      	ldr	r5, [pc, #112]	; (850 <system_init+0xfc>)
     7e0:	47a8      	blx	r5
     7e2:	6a22      	ldr	r2, [r4, #32]
     7e4:	2380      	movs	r3, #128	; 0x80
     7e6:	019b      	lsls	r3, r3, #6
     7e8:	4313      	orrs	r3, r2
     7ea:	6223      	str	r3, [r4, #32]
     7ec:	4643      	mov	r3, r8
     7ee:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_2, TC5, _tc_get_timer());
     7f0:	47b0      	blx	r6
     7f2:	0002      	movs	r2, r0
     7f4:	4917      	ldr	r1, [pc, #92]	; (854 <system_init+0x100>)
     7f6:	4818      	ldr	r0, [pc, #96]	; (858 <system_init+0x104>)
     7f8:	47a8      	blx	r5
     7fa:	6a22      	ldr	r2, [r4, #32]
     7fc:	2380      	movs	r3, #128	; 0x80
     7fe:	021b      	lsls	r3, r3, #8
     800:	4313      	orrs	r3, r2
     802:	6223      	str	r3, [r4, #32]
     804:	4b15      	ldr	r3, [pc, #84]	; (85c <system_init+0x108>)
     806:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_3, TC7, _tc_get_timer());
     808:	47b0      	blx	r6
     80a:	0002      	movs	r2, r0
     80c:	4914      	ldr	r1, [pc, #80]	; (860 <system_init+0x10c>)
     80e:	4815      	ldr	r0, [pc, #84]	; (864 <system_init+0x110>)
     810:	47a8      	blx	r5

	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
}
     812:	bc04      	pop	{r2}
     814:	4690      	mov	r8, r2
     816:	bdf0      	pop	{r4, r5, r6, r7, pc}
     818:	00000e25 	.word	0x00000e25
     81c:	41004400 	.word	0x41004400
     820:	40020100 	.word	0x40020100
     824:	c0020000 	.word	0xc0020000
     828:	c0000800 	.word	0xc0000800
     82c:	c0001000 	.word	0xc0001000
     830:	000006e1 	.word	0x000006e1
     834:	00000729 	.word	0x00000729
     838:	40000400 	.word	0x40000400
     83c:	40000c00 	.word	0x40000c00
     840:	0000431c 	.word	0x0000431c
     844:	0000166d 	.word	0x0000166d
     848:	42003000 	.word	0x42003000
     84c:	20000928 	.word	0x20000928
     850:	00000c4d 	.word	0x00000c4d
     854:	42003400 	.word	0x42003400
     858:	200008f0 	.word	0x200008f0
     85c:	0000431d 	.word	0x0000431d
     860:	42003c00 	.word	0x42003c00
     864:	2000095c 	.word	0x2000095c

00000868 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     868:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     86a:	6943      	ldr	r3, [r0, #20]
     86c:	2b00      	cmp	r3, #0
     86e:	d000      	beq.n	872 <pwm_period_expired+0xa>
		descr->pwm_cb.period(descr);
     870:	4798      	blx	r3
	}
}
     872:	bd10      	pop	{r4, pc}

00000874 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     874:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     876:	6983      	ldr	r3, [r0, #24]
     878:	2b00      	cmp	r3, #0
     87a:	d000      	beq.n	87e <pwm_detect_fault+0xa>
		descr->pwm_cb.error(descr);
     87c:	4798      	blx	r3
	}
}
     87e:	bd10      	pop	{r4, pc}

00000880 <pwm_init>:
{
     880:	b570      	push	{r4, r5, r6, lr}
     882:	0005      	movs	r5, r0
     884:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     886:	2800      	cmp	r0, #0
     888:	d011      	beq.n	8ae <pwm_init+0x2e>
     88a:	0008      	movs	r0, r1
     88c:	1e43      	subs	r3, r0, #1
     88e:	4198      	sbcs	r0, r3
     890:	b2c0      	uxtb	r0, r0
     892:	2233      	movs	r2, #51	; 0x33
     894:	4907      	ldr	r1, [pc, #28]	; (8b4 <pwm_init+0x34>)
     896:	4b08      	ldr	r3, [pc, #32]	; (8b8 <pwm_init+0x38>)
     898:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     89a:	0021      	movs	r1, r4
     89c:	0028      	movs	r0, r5
     89e:	4b07      	ldr	r3, [pc, #28]	; (8bc <pwm_init+0x3c>)
     8a0:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     8a2:	4b07      	ldr	r3, [pc, #28]	; (8c0 <pwm_init+0x40>)
     8a4:	602b      	str	r3, [r5, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     8a6:	4b07      	ldr	r3, [pc, #28]	; (8c4 <pwm_init+0x44>)
     8a8:	606b      	str	r3, [r5, #4]
}
     8aa:	2000      	movs	r0, #0
     8ac:	bd70      	pop	{r4, r5, r6, pc}
     8ae:	2000      	movs	r0, #0
     8b0:	e7ef      	b.n	892 <pwm_init+0x12>
     8b2:	46c0      	nop			; (mov r8, r8)
     8b4:	000050d0 	.word	0x000050d0
     8b8:	00000db5 	.word	0x00000db5
     8bc:	000014bd 	.word	0x000014bd
     8c0:	00000869 	.word	0x00000869
     8c4:	00000875 	.word	0x00000875

000008c8 <pwm_enable>:
{
     8c8:	b510      	push	{r4, lr}
     8ca:	0004      	movs	r4, r0
	ASSERT(descr);
     8cc:	1e43      	subs	r3, r0, #1
     8ce:	4198      	sbcs	r0, r3
     8d0:	b2c0      	uxtb	r0, r0
     8d2:	224a      	movs	r2, #74	; 0x4a
     8d4:	4907      	ldr	r1, [pc, #28]	; (8f4 <pwm_enable+0x2c>)
     8d6:	4b08      	ldr	r3, [pc, #32]	; (8f8 <pwm_enable+0x30>)
     8d8:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
     8da:	0020      	movs	r0, r4
     8dc:	4b07      	ldr	r3, [pc, #28]	; (8fc <pwm_enable+0x34>)
     8de:	4798      	blx	r3
     8e0:	2800      	cmp	r0, #0
     8e2:	d104      	bne.n	8ee <pwm_enable+0x26>
	_pwm_enable(&descr->device);
     8e4:	0020      	movs	r0, r4
     8e6:	4b06      	ldr	r3, [pc, #24]	; (900 <pwm_enable+0x38>)
     8e8:	4798      	blx	r3
	return ERR_NONE;
     8ea:	2000      	movs	r0, #0
}
     8ec:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     8ee:	2011      	movs	r0, #17
     8f0:	4240      	negs	r0, r0
     8f2:	e7fb      	b.n	8ec <pwm_enable+0x24>
     8f4:	000050d0 	.word	0x000050d0
     8f8:	00000db5 	.word	0x00000db5
     8fc:	00001613 	.word	0x00001613
     900:	000015a5 	.word	0x000015a5

00000904 <pwm_disable>:
{
     904:	b510      	push	{r4, lr}
     906:	0004      	movs	r4, r0
	ASSERT(descr);
     908:	1e43      	subs	r3, r0, #1
     90a:	4198      	sbcs	r0, r3
     90c:	b2c0      	uxtb	r0, r0
     90e:	2258      	movs	r2, #88	; 0x58
     910:	4907      	ldr	r1, [pc, #28]	; (930 <pwm_disable+0x2c>)
     912:	4b08      	ldr	r3, [pc, #32]	; (934 <pwm_disable+0x30>)
     914:	4798      	blx	r3
	if (!_pwm_is_enabled(&descr->device)) {
     916:	0020      	movs	r0, r4
     918:	4b07      	ldr	r3, [pc, #28]	; (938 <pwm_disable+0x34>)
     91a:	4798      	blx	r3
     91c:	2800      	cmp	r0, #0
     91e:	d004      	beq.n	92a <pwm_disable+0x26>
	_pwm_disable(&descr->device);
     920:	0020      	movs	r0, r4
     922:	4b06      	ldr	r3, [pc, #24]	; (93c <pwm_disable+0x38>)
     924:	4798      	blx	r3
	return ERR_NONE;
     926:	2000      	movs	r0, #0
}
     928:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     92a:	2011      	movs	r0, #17
     92c:	4240      	negs	r0, r0
     92e:	e7fb      	b.n	928 <pwm_disable+0x24>
     930:	000050d0 	.word	0x000050d0
     934:	00000db5 	.word	0x00000db5
     938:	00001613 	.word	0x00001613
     93c:	000015bd 	.word	0x000015bd

00000940 <pwm_register_callback>:
{
     940:	b570      	push	{r4, r5, r6, lr}
     942:	0006      	movs	r6, r0
     944:	000d      	movs	r5, r1
     946:	0014      	movs	r4, r2
	switch (type) {
     948:	2900      	cmp	r1, #0
     94a:	d004      	beq.n	956 <pwm_register_callback+0x16>
     94c:	2901      	cmp	r1, #1
     94e:	d014      	beq.n	97a <pwm_register_callback+0x3a>
		return ERR_INVALID_ARG;
     950:	200d      	movs	r0, #13
     952:	4240      	negs	r0, r0
     954:	e010      	b.n	978 <pwm_register_callback+0x38>
		descr->pwm_cb.period = cb;
     956:	6172      	str	r2, [r6, #20]
	ASSERT(descr);
     958:	0030      	movs	r0, r6
     95a:	1e43      	subs	r3, r0, #1
     95c:	4198      	sbcs	r0, r3
     95e:	b2c0      	uxtb	r0, r0
     960:	2272      	movs	r2, #114	; 0x72
     962:	4907      	ldr	r1, [pc, #28]	; (980 <pwm_register_callback+0x40>)
     964:	4b07      	ldr	r3, [pc, #28]	; (984 <pwm_register_callback+0x44>)
     966:	4798      	blx	r3
	_pwm_set_irq_state(&descr->device, (enum _pwm_callback_type)type, NULL != cb);
     968:	1e62      	subs	r2, r4, #1
     96a:	4194      	sbcs	r4, r2
     96c:	b2e2      	uxtb	r2, r4
     96e:	0029      	movs	r1, r5
     970:	0030      	movs	r0, r6
     972:	4b05      	ldr	r3, [pc, #20]	; (988 <pwm_register_callback+0x48>)
     974:	4798      	blx	r3
	return ERR_NONE;
     976:	2000      	movs	r0, #0
}
     978:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.error = cb;
     97a:	61b2      	str	r2, [r6, #24]
		break;
     97c:	e7ec      	b.n	958 <pwm_register_callback+0x18>
     97e:	46c0      	nop			; (mov r8, r8)
     980:	000050d0 	.word	0x000050d0
     984:	00000db5 	.word	0x00000db5
     988:	0000161d 	.word	0x0000161d

0000098c <pwm_set_parameters>:
{
     98c:	b570      	push	{r4, r5, r6, lr}
     98e:	0004      	movs	r4, r0
     990:	000d      	movs	r5, r1
     992:	0016      	movs	r6, r2
	ASSERT(descr);
     994:	1e43      	subs	r3, r0, #1
     996:	4198      	sbcs	r0, r3
     998:	b2c0      	uxtb	r0, r0
     99a:	227c      	movs	r2, #124	; 0x7c
     99c:	4904      	ldr	r1, [pc, #16]	; (9b0 <pwm_set_parameters+0x24>)
     99e:	4b05      	ldr	r3, [pc, #20]	; (9b4 <pwm_set_parameters+0x28>)
     9a0:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
     9a2:	0032      	movs	r2, r6
     9a4:	0029      	movs	r1, r5
     9a6:	0020      	movs	r0, r4
     9a8:	4b03      	ldr	r3, [pc, #12]	; (9b8 <pwm_set_parameters+0x2c>)
     9aa:	4798      	blx	r3
}
     9ac:	2000      	movs	r0, #0
     9ae:	bd70      	pop	{r4, r5, r6, pc}
     9b0:	000050d0 	.word	0x000050d0
     9b4:	00000db5 	.word	0x00000db5
     9b8:	000015c9 	.word	0x000015c9

000009bc <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     9bc:	b570      	push	{r4, r5, r6, lr}
     9be:	0004      	movs	r4, r0
     9c0:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     9c2:	2800      	cmp	r0, #0
     9c4:	d016      	beq.n	9f4 <spi_m_sync_init+0x38>
     9c6:	0008      	movs	r0, r1
     9c8:	1e43      	subs	r3, r0, #1
     9ca:	4198      	sbcs	r0, r3
     9cc:	b2c0      	uxtb	r0, r0
     9ce:	2240      	movs	r2, #64	; 0x40
     9d0:	4909      	ldr	r1, [pc, #36]	; (9f8 <spi_m_sync_init+0x3c>)
     9d2:	4b0a      	ldr	r3, [pc, #40]	; (9fc <spi_m_sync_init+0x40>)
     9d4:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     9d6:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     9d8:	1d20      	adds	r0, r4, #4
     9da:	0029      	movs	r1, r5
     9dc:	4b08      	ldr	r3, [pc, #32]	; (a00 <spi_m_sync_init+0x44>)
     9de:	4798      	blx	r3

	if (rc < 0) {
     9e0:	2800      	cmp	r0, #0
     9e2:	db06      	blt.n	9f2 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     9e4:	4b07      	ldr	r3, [pc, #28]	; (a04 <spi_m_sync_init+0x48>)
     9e6:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     9e8:	4b07      	ldr	r3, [pc, #28]	; (a08 <spi_m_sync_init+0x4c>)
     9ea:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     9ec:	4b07      	ldr	r3, [pc, #28]	; (a0c <spi_m_sync_init+0x50>)
     9ee:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     9f0:	2000      	movs	r0, #0
}
     9f2:	bd70      	pop	{r4, r5, r6, pc}
     9f4:	2000      	movs	r0, #0
     9f6:	e7ea      	b.n	9ce <spi_m_sync_init+0x12>
     9f8:	000050e8 	.word	0x000050e8
     9fc:	00000db5 	.word	0x00000db5
     a00:	00000f8d 	.word	0x00000f8d
     a04:	ffff8000 	.word	0xffff8000
     a08:	00000ae5 	.word	0x00000ae5
     a0c:	00000aa9 	.word	0x00000aa9

00000a10 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     a10:	b510      	push	{r4, lr}
     a12:	0004      	movs	r4, r0
	ASSERT(spi);
     a14:	1e43      	subs	r3, r0, #1
     a16:	4198      	sbcs	r0, r3
     a18:	b2c0      	uxtb	r0, r0
     a1a:	2257      	movs	r2, #87	; 0x57
     a1c:	4903      	ldr	r1, [pc, #12]	; (a2c <spi_m_sync_enable+0x1c>)
     a1e:	4b04      	ldr	r3, [pc, #16]	; (a30 <spi_m_sync_enable+0x20>)
     a20:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     a22:	1d20      	adds	r0, r4, #4
     a24:	4b03      	ldr	r3, [pc, #12]	; (a34 <spi_m_sync_enable+0x24>)
     a26:	4798      	blx	r3
}
     a28:	bd10      	pop	{r4, pc}
     a2a:	46c0      	nop			; (mov r8, r8)
     a2c:	000050e8 	.word	0x000050e8
     a30:	00000db5 	.word	0x00000db5
     a34:	00001085 	.word	0x00001085

00000a38 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
     a38:	b510      	push	{r4, lr}
     a3a:	0004      	movs	r4, r0
	ASSERT(spi);
     a3c:	1e43      	subs	r3, r0, #1
     a3e:	4198      	sbcs	r0, r3
     a40:	b2c0      	uxtb	r0, r0
     a42:	225d      	movs	r2, #93	; 0x5d
     a44:	4903      	ldr	r1, [pc, #12]	; (a54 <spi_m_sync_disable+0x1c>)
     a46:	4b04      	ldr	r3, [pc, #16]	; (a58 <spi_m_sync_disable+0x20>)
     a48:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
     a4a:	1d20      	adds	r0, r4, #4
     a4c:	4b03      	ldr	r3, [pc, #12]	; (a5c <spi_m_sync_disable+0x24>)
     a4e:	4798      	blx	r3
}
     a50:	bd10      	pop	{r4, pc}
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	000050e8 	.word	0x000050e8
     a58:	00000db5 	.word	0x00000db5
     a5c:	000010b9 	.word	0x000010b9

00000a60 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     a60:	b530      	push	{r4, r5, lr}
     a62:	b087      	sub	sp, #28
     a64:	0004      	movs	r4, r0
     a66:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     a68:	2800      	cmp	r0, #0
     a6a:	d014      	beq.n	a96 <spi_m_sync_transfer+0x36>
     a6c:	0008      	movs	r0, r1
     a6e:	1e43      	subs	r3, r0, #1
     a70:	4198      	sbcs	r0, r3
     a72:	b2c0      	uxtb	r0, r0
     a74:	22b3      	movs	r2, #179	; 0xb3
     a76:	4909      	ldr	r1, [pc, #36]	; (a9c <spi_m_sync_transfer+0x3c>)
     a78:	4b09      	ldr	r3, [pc, #36]	; (aa0 <spi_m_sync_transfer+0x40>)
     a7a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     a7c:	682b      	ldr	r3, [r5, #0]
     a7e:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     a80:	686b      	ldr	r3, [r5, #4]
     a82:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     a84:	68ab      	ldr	r3, [r5, #8]
     a86:	9301      	str	r3, [sp, #4]
     a88:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     a8a:	1d20      	adds	r0, r4, #4
     a8c:	a903      	add	r1, sp, #12
     a8e:	4b05      	ldr	r3, [pc, #20]	; (aa4 <spi_m_sync_transfer+0x44>)
     a90:	4798      	blx	r3
}
     a92:	b007      	add	sp, #28
     a94:	bd30      	pop	{r4, r5, pc}
     a96:	2000      	movs	r0, #0
     a98:	e7ec      	b.n	a74 <spi_m_sync_transfer+0x14>
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	000050e8 	.word	0x000050e8
     aa0:	00000db5 	.word	0x00000db5
     aa4:	000010ed 	.word	0x000010ed

00000aa8 <_spi_m_sync_io_write>:
{
     aa8:	b570      	push	{r4, r5, r6, lr}
     aaa:	b084      	sub	sp, #16
     aac:	0004      	movs	r4, r0
     aae:	000e      	movs	r6, r1
     ab0:	0015      	movs	r5, r2
	ASSERT(io);
     ab2:	1e43      	subs	r3, r0, #1
     ab4:	4198      	sbcs	r0, r3
     ab6:	b2c0      	uxtb	r0, r0
     ab8:	22a3      	movs	r2, #163	; 0xa3
     aba:	4907      	ldr	r1, [pc, #28]	; (ad8 <_spi_m_sync_io_write+0x30>)
     abc:	4b07      	ldr	r3, [pc, #28]	; (adc <_spi_m_sync_io_write+0x34>)
     abe:	4798      	blx	r3
	xfer.rxbuf = 0;
     ac0:	2300      	movs	r3, #0
     ac2:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     ac4:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     ac6:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     ac8:	0020      	movs	r0, r4
     aca:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     acc:	a901      	add	r1, sp, #4
     ace:	4b04      	ldr	r3, [pc, #16]	; (ae0 <_spi_m_sync_io_write+0x38>)
     ad0:	4798      	blx	r3
}
     ad2:	b004      	add	sp, #16
     ad4:	bd70      	pop	{r4, r5, r6, pc}
     ad6:	46c0      	nop			; (mov r8, r8)
     ad8:	000050e8 	.word	0x000050e8
     adc:	00000db5 	.word	0x00000db5
     ae0:	00000a61 	.word	0x00000a61

00000ae4 <_spi_m_sync_io_read>:
{
     ae4:	b570      	push	{r4, r5, r6, lr}
     ae6:	b084      	sub	sp, #16
     ae8:	0004      	movs	r4, r0
     aea:	000e      	movs	r6, r1
     aec:	0015      	movs	r5, r2
	ASSERT(io);
     aee:	1e43      	subs	r3, r0, #1
     af0:	4198      	sbcs	r0, r3
     af2:	b2c0      	uxtb	r0, r0
     af4:	2287      	movs	r2, #135	; 0x87
     af6:	4907      	ldr	r1, [pc, #28]	; (b14 <_spi_m_sync_io_read+0x30>)
     af8:	4b07      	ldr	r3, [pc, #28]	; (b18 <_spi_m_sync_io_read+0x34>)
     afa:	4798      	blx	r3
	xfer.rxbuf = buf;
     afc:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     afe:	2300      	movs	r3, #0
     b00:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     b02:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     b04:	0020      	movs	r0, r4
     b06:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     b08:	a901      	add	r1, sp, #4
     b0a:	4b04      	ldr	r3, [pc, #16]	; (b1c <_spi_m_sync_io_read+0x38>)
     b0c:	4798      	blx	r3
}
     b0e:	b004      	add	sp, #16
     b10:	bd70      	pop	{r4, r5, r6, pc}
     b12:	46c0      	nop			; (mov r8, r8)
     b14:	000050e8 	.word	0x000050e8
     b18:	00000db5 	.word	0x00000db5
     b1c:	00000a61 	.word	0x00000a61

00000b20 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     b20:	b570      	push	{r4, r5, r6, lr}
     b22:	0004      	movs	r4, r0
     b24:	000d      	movs	r5, r1
	ASSERT(spi && io);
     b26:	2800      	cmp	r0, #0
     b28:	d00b      	beq.n	b42 <spi_m_sync_get_io_descriptor+0x22>
     b2a:	0008      	movs	r0, r1
     b2c:	1e43      	subs	r3, r0, #1
     b2e:	4198      	sbcs	r0, r3
     b30:	b2c0      	uxtb	r0, r0
     b32:	22bd      	movs	r2, #189	; 0xbd
     b34:	4904      	ldr	r1, [pc, #16]	; (b48 <spi_m_sync_get_io_descriptor+0x28>)
     b36:	4b05      	ldr	r3, [pc, #20]	; (b4c <spi_m_sync_get_io_descriptor+0x2c>)
     b38:	4798      	blx	r3
	*io = &spi->io;
     b3a:	340c      	adds	r4, #12
     b3c:	602c      	str	r4, [r5, #0]
	return 0;
}
     b3e:	2000      	movs	r0, #0
     b40:	bd70      	pop	{r4, r5, r6, pc}
     b42:	2000      	movs	r0, #0
     b44:	e7f5      	b.n	b32 <spi_m_sync_get_io_descriptor+0x12>
     b46:	46c0      	nop			; (mov r8, r8)
     b48:	000050e8 	.word	0x000050e8
     b4c:	00000db5 	.word	0x00000db5

00000b50 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b52:	46ce      	mov	lr, r9
     b54:	4647      	mov	r7, r8
     b56:	b580      	push	{r7, lr}
     b58:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     b5a:	6803      	ldr	r3, [r0, #0]
     b5c:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     b5e:	2b00      	cmp	r3, #0
     b60:	d005      	beq.n	b6e <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     b62:	688e      	ldr	r6, [r1, #8]
     b64:	001c      	movs	r4, r3
     b66:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     b68:	2701      	movs	r7, #1
     b6a:	1abf      	subs	r7, r7, r2
     b6c:	e00d      	b.n	b8a <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     b6e:	4b12      	ldr	r3, [pc, #72]	; (bb8 <timer_add_timer_task+0x68>)
     b70:	4798      	blx	r3
		return;
     b72:	e018      	b.n	ba6 <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     b74:	18fb      	adds	r3, r7, r3
     b76:	68a0      	ldr	r0, [r4, #8]
     b78:	4680      	mov	r8, r0
     b7a:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     b7c:	42b3      	cmp	r3, r6
     b7e:	d20c      	bcs.n	b9a <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     b80:	6823      	ldr	r3, [r4, #0]
     b82:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     b84:	2b00      	cmp	r3, #0
     b86:	d00b      	beq.n	ba0 <timer_add_timer_task+0x50>
     b88:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     b8a:	6863      	ldr	r3, [r4, #4]
     b8c:	4293      	cmp	r3, r2
     b8e:	d8f1      	bhi.n	b74 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     b90:	68a0      	ldr	r0, [r4, #8]
     b92:	4680      	mov	r8, r0
     b94:	4443      	add	r3, r8
     b96:	1a9b      	subs	r3, r3, r2
     b98:	e7f0      	b.n	b7c <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     b9a:	45a4      	cmp	ip, r4
     b9c:	d007      	beq.n	bae <timer_add_timer_task+0x5e>
     b9e:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     ba0:	0020      	movs	r0, r4
     ba2:	4b06      	ldr	r3, [pc, #24]	; (bbc <timer_add_timer_task+0x6c>)
     ba4:	4798      	blx	r3
	}
}
     ba6:	bc0c      	pop	{r2, r3}
     ba8:	4690      	mov	r8, r2
     baa:	4699      	mov	r9, r3
     bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     bae:	4648      	mov	r0, r9
     bb0:	4b01      	ldr	r3, [pc, #4]	; (bb8 <timer_add_timer_task+0x68>)
     bb2:	4798      	blx	r3
     bb4:	e7f7      	b.n	ba6 <timer_add_timer_task+0x56>
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	00000de1 	.word	0x00000de1
     bbc:	00000e0d 	.word	0x00000e0d

00000bc0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bc2:	46c6      	mov	lr, r8
     bc4:	b500      	push	{lr}
     bc6:	b082      	sub	sp, #8
     bc8:	0007      	movs	r7, r0
	return (void *)list->head;
     bca:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     bcc:	6903      	ldr	r3, [r0, #16]
     bce:	3301      	adds	r3, #1
     bd0:	4698      	mov	r8, r3
     bd2:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     bd4:	7e03      	ldrb	r3, [r0, #24]
     bd6:	07db      	lsls	r3, r3, #31
     bd8:	d411      	bmi.n	bfe <timer_process_counted+0x3e>
     bda:	7e03      	ldrb	r3, [r0, #24]
     bdc:	079b      	lsls	r3, r3, #30
     bde:	d40e      	bmi.n	bfe <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     be0:	2c00      	cmp	r4, #0
     be2:	d010      	beq.n	c06 <timer_process_counted+0x46>
     be4:	4643      	mov	r3, r8
     be6:	6862      	ldr	r2, [r4, #4]
     be8:	1a9b      	subs	r3, r3, r2
     bea:	68a2      	ldr	r2, [r4, #8]
     bec:	4293      	cmp	r3, r2
     bee:	d30a      	bcc.n	c06 <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     bf0:	2314      	movs	r3, #20
     bf2:	469c      	mov	ip, r3
     bf4:	4484      	add	ip, r0
     bf6:	4663      	mov	r3, ip
     bf8:	9301      	str	r3, [sp, #4]
     bfa:	4e12      	ldr	r6, [pc, #72]	; (c44 <timer_process_counted+0x84>)
     bfc:	e014      	b.n	c28 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     bfe:	7e3b      	ldrb	r3, [r7, #24]
     c00:	2202      	movs	r2, #2
     c02:	4313      	orrs	r3, r2
     c04:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     c06:	b002      	add	sp, #8
     c08:	bc04      	pop	{r2}
     c0a:	4690      	mov	r8, r2
     c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c0e:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     c10:	68e3      	ldr	r3, [r4, #12]
     c12:	0020      	movs	r0, r4
     c14:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     c16:	2d00      	cmp	r5, #0
     c18:	d0f5      	beq.n	c06 <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     c1a:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     c1c:	4643      	mov	r3, r8
     c1e:	686a      	ldr	r2, [r5, #4]
     c20:	1a9b      	subs	r3, r3, r2
     c22:	68aa      	ldr	r2, [r5, #8]
     c24:	4293      	cmp	r3, r2
     c26:	d3ee      	bcc.n	c06 <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     c28:	9801      	ldr	r0, [sp, #4]
     c2a:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     c2c:	7c23      	ldrb	r3, [r4, #16]
     c2e:	2b01      	cmp	r3, #1
     c30:	d1ed      	bne.n	c0e <timer_process_counted+0x4e>
			tmp->time_label = time;
     c32:	4643      	mov	r3, r8
     c34:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     c36:	4642      	mov	r2, r8
     c38:	0021      	movs	r1, r4
     c3a:	9801      	ldr	r0, [sp, #4]
     c3c:	4b02      	ldr	r3, [pc, #8]	; (c48 <timer_process_counted+0x88>)
     c3e:	4798      	blx	r3
     c40:	e7e5      	b.n	c0e <timer_process_counted+0x4e>
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	00000e15 	.word	0x00000e15
     c48:	00000b51 	.word	0x00000b51

00000c4c <timer_init>:
{
     c4c:	b570      	push	{r4, r5, r6, lr}
     c4e:	0005      	movs	r5, r0
     c50:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     c52:	2800      	cmp	r0, #0
     c54:	d011      	beq.n	c7a <timer_init+0x2e>
     c56:	0008      	movs	r0, r1
     c58:	1e43      	subs	r3, r0, #1
     c5a:	4198      	sbcs	r0, r3
     c5c:	b2c0      	uxtb	r0, r0
     c5e:	223b      	movs	r2, #59	; 0x3b
     c60:	4907      	ldr	r1, [pc, #28]	; (c80 <timer_init+0x34>)
     c62:	4b08      	ldr	r3, [pc, #32]	; (c84 <timer_init+0x38>)
     c64:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     c66:	0021      	movs	r1, r4
     c68:	0028      	movs	r0, r5
     c6a:	4b07      	ldr	r3, [pc, #28]	; (c88 <timer_init+0x3c>)
     c6c:	4798      	blx	r3
	descr->time                           = 0;
     c6e:	2300      	movs	r3, #0
     c70:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     c72:	4b06      	ldr	r3, [pc, #24]	; (c8c <timer_init+0x40>)
     c74:	602b      	str	r3, [r5, #0]
}
     c76:	2000      	movs	r0, #0
     c78:	bd70      	pop	{r4, r5, r6, pc}
     c7a:	2000      	movs	r0, #0
     c7c:	e7ef      	b.n	c5e <timer_init+0x12>
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	00005104 	.word	0x00005104
     c84:	00000db5 	.word	0x00000db5
     c88:	000013b1 	.word	0x000013b1
     c8c:	00000bc1 	.word	0x00000bc1

00000c90 <timer_start>:
{
     c90:	b510      	push	{r4, lr}
     c92:	0004      	movs	r4, r0
	ASSERT(descr);
     c94:	1e43      	subs	r3, r0, #1
     c96:	4198      	sbcs	r0, r3
     c98:	b2c0      	uxtb	r0, r0
     c9a:	2253      	movs	r2, #83	; 0x53
     c9c:	4907      	ldr	r1, [pc, #28]	; (cbc <timer_start+0x2c>)
     c9e:	4b08      	ldr	r3, [pc, #32]	; (cc0 <timer_start+0x30>)
     ca0:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     ca2:	0020      	movs	r0, r4
     ca4:	4b07      	ldr	r3, [pc, #28]	; (cc4 <timer_start+0x34>)
     ca6:	4798      	blx	r3
     ca8:	2800      	cmp	r0, #0
     caa:	d104      	bne.n	cb6 <timer_start+0x26>
	_timer_start(&descr->device);
     cac:	0020      	movs	r0, r4
     cae:	4b06      	ldr	r3, [pc, #24]	; (cc8 <timer_start+0x38>)
     cb0:	4798      	blx	r3
	return ERR_NONE;
     cb2:	2000      	movs	r0, #0
}
     cb4:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     cb6:	2011      	movs	r0, #17
     cb8:	4240      	negs	r0, r0
     cba:	e7fb      	b.n	cb4 <timer_start+0x24>
     cbc:	00005104 	.word	0x00005104
     cc0:	00000db5 	.word	0x00000db5
     cc4:	00001609 	.word	0x00001609
     cc8:	00001599 	.word	0x00001599

00000ccc <timer_stop>:
{
     ccc:	b510      	push	{r4, lr}
     cce:	0004      	movs	r4, r0
	ASSERT(descr);
     cd0:	1e43      	subs	r3, r0, #1
     cd2:	4198      	sbcs	r0, r3
     cd4:	b2c0      	uxtb	r0, r0
     cd6:	2261      	movs	r2, #97	; 0x61
     cd8:	4907      	ldr	r1, [pc, #28]	; (cf8 <timer_stop+0x2c>)
     cda:	4b08      	ldr	r3, [pc, #32]	; (cfc <timer_stop+0x30>)
     cdc:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
     cde:	0020      	movs	r0, r4
     ce0:	4b07      	ldr	r3, [pc, #28]	; (d00 <timer_stop+0x34>)
     ce2:	4798      	blx	r3
     ce4:	2800      	cmp	r0, #0
     ce6:	d004      	beq.n	cf2 <timer_stop+0x26>
	_timer_stop(&descr->device);
     ce8:	0020      	movs	r0, r4
     cea:	4b06      	ldr	r3, [pc, #24]	; (d04 <timer_stop+0x38>)
     cec:	4798      	blx	r3
	return ERR_NONE;
     cee:	2000      	movs	r0, #0
}
     cf0:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     cf2:	2011      	movs	r0, #17
     cf4:	4240      	negs	r0, r0
     cf6:	e7fb      	b.n	cf0 <timer_stop+0x24>
     cf8:	00005104 	.word	0x00005104
     cfc:	00000db5 	.word	0x00000db5
     d00:	00001609 	.word	0x00001609
     d04:	000015b1 	.word	0x000015b1

00000d08 <timer_add_task>:
{
     d08:	b570      	push	{r4, r5, r6, lr}
     d0a:	b082      	sub	sp, #8
     d0c:	0004      	movs	r4, r0
     d0e:	000d      	movs	r5, r1
	ASSERT(descr && task);
     d10:	2800      	cmp	r0, #0
     d12:	d024      	beq.n	d5e <timer_add_task+0x56>
     d14:	0008      	movs	r0, r1
     d16:	1e43      	subs	r3, r0, #1
     d18:	4198      	sbcs	r0, r3
     d1a:	b2c0      	uxtb	r0, r0
     d1c:	227a      	movs	r2, #122	; 0x7a
     d1e:	491e      	ldr	r1, [pc, #120]	; (d98 <timer_add_task+0x90>)
     d20:	4b1e      	ldr	r3, [pc, #120]	; (d9c <timer_add_task+0x94>)
     d22:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     d24:	7e23      	ldrb	r3, [r4, #24]
     d26:	2201      	movs	r2, #1
     d28:	4313      	orrs	r3, r2
     d2a:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     d2c:	0026      	movs	r6, r4
     d2e:	3614      	adds	r6, #20
     d30:	0029      	movs	r1, r5
     d32:	0030      	movs	r0, r6
     d34:	4b1a      	ldr	r3, [pc, #104]	; (da0 <timer_add_task+0x98>)
     d36:	4798      	blx	r3
     d38:	2800      	cmp	r0, #0
     d3a:	d112      	bne.n	d62 <timer_add_task+0x5a>
	task->time_label = descr->time;
     d3c:	6923      	ldr	r3, [r4, #16]
     d3e:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     d40:	6922      	ldr	r2, [r4, #16]
     d42:	0029      	movs	r1, r5
     d44:	0030      	movs	r0, r6
     d46:	4b17      	ldr	r3, [pc, #92]	; (da4 <timer_add_task+0x9c>)
     d48:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     d4a:	7e23      	ldrb	r3, [r4, #24]
     d4c:	2201      	movs	r2, #1
     d4e:	4393      	bics	r3, r2
     d50:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     d52:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
     d54:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     d56:	079b      	lsls	r3, r3, #30
     d58:	d40f      	bmi.n	d7a <timer_add_task+0x72>
}
     d5a:	b002      	add	sp, #8
     d5c:	bd70      	pop	{r4, r5, r6, pc}
     d5e:	2000      	movs	r0, #0
     d60:	e7dc      	b.n	d1c <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     d62:	7e23      	ldrb	r3, [r4, #24]
     d64:	2201      	movs	r2, #1
     d66:	4393      	bics	r3, r2
     d68:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     d6a:	327e      	adds	r2, #126	; 0x7e
     d6c:	490a      	ldr	r1, [pc, #40]	; (d98 <timer_add_task+0x90>)
     d6e:	2000      	movs	r0, #0
     d70:	4b0a      	ldr	r3, [pc, #40]	; (d9c <timer_add_task+0x94>)
     d72:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     d74:	2012      	movs	r0, #18
     d76:	4240      	negs	r0, r0
     d78:	e7ef      	b.n	d5a <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     d7a:	a801      	add	r0, sp, #4
     d7c:	4b0a      	ldr	r3, [pc, #40]	; (da8 <timer_add_task+0xa0>)
     d7e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     d80:	7e23      	ldrb	r3, [r4, #24]
     d82:	2202      	movs	r2, #2
     d84:	4393      	bics	r3, r2
     d86:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     d88:	0020      	movs	r0, r4
     d8a:	4b08      	ldr	r3, [pc, #32]	; (dac <timer_add_task+0xa4>)
     d8c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     d8e:	a801      	add	r0, sp, #4
     d90:	4b07      	ldr	r3, [pc, #28]	; (db0 <timer_add_task+0xa8>)
     d92:	4798      	blx	r3
	return ERR_NONE;
     d94:	2000      	movs	r0, #0
     d96:	e7e0      	b.n	d5a <timer_add_task+0x52>
     d98:	00005104 	.word	0x00005104
     d9c:	00000db5 	.word	0x00000db5
     da0:	00000dbd 	.word	0x00000dbd
     da4:	00000b51 	.word	0x00000b51
     da8:	00001709 	.word	0x00001709
     dac:	00001675 	.word	0x00001675
     db0:	00001717 	.word	0x00001717

00000db4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     db4:	2800      	cmp	r0, #0
     db6:	d100      	bne.n	dba <assert+0x6>
		__asm("BKPT #0");
     db8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     dba:	4770      	bx	lr

00000dbc <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     dbc:	6803      	ldr	r3, [r0, #0]
     dbe:	2b00      	cmp	r3, #0
     dc0:	d00a      	beq.n	dd8 <is_list_element+0x1c>
		if (it == element) {
     dc2:	428b      	cmp	r3, r1
     dc4:	d00a      	beq.n	ddc <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     dc6:	681b      	ldr	r3, [r3, #0]
     dc8:	2b00      	cmp	r3, #0
     dca:	d003      	beq.n	dd4 <is_list_element+0x18>
		if (it == element) {
     dcc:	4299      	cmp	r1, r3
     dce:	d1fa      	bne.n	dc6 <is_list_element+0xa>
			return true;
     dd0:	2001      	movs	r0, #1
     dd2:	e000      	b.n	dd6 <is_list_element+0x1a>
		}
	}

	return false;
     dd4:	2000      	movs	r0, #0
}
     dd6:	4770      	bx	lr
	return false;
     dd8:	2000      	movs	r0, #0
     dda:	e7fc      	b.n	dd6 <is_list_element+0x1a>
			return true;
     ddc:	2001      	movs	r0, #1
     dde:	e7fa      	b.n	dd6 <is_list_element+0x1a>

00000de0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     de0:	b570      	push	{r4, r5, r6, lr}
     de2:	0004      	movs	r4, r0
     de4:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     de6:	4b06      	ldr	r3, [pc, #24]	; (e00 <list_insert_as_head+0x20>)
     de8:	4798      	blx	r3
     dea:	2301      	movs	r3, #1
     dec:	4058      	eors	r0, r3
     dee:	b2c0      	uxtb	r0, r0
     df0:	2239      	movs	r2, #57	; 0x39
     df2:	4904      	ldr	r1, [pc, #16]	; (e04 <list_insert_as_head+0x24>)
     df4:	4b04      	ldr	r3, [pc, #16]	; (e08 <list_insert_as_head+0x28>)
     df6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     df8:	6823      	ldr	r3, [r4, #0]
     dfa:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     dfc:	6025      	str	r5, [r4, #0]
}
     dfe:	bd70      	pop	{r4, r5, r6, pc}
     e00:	00000dbd 	.word	0x00000dbd
     e04:	0000511c 	.word	0x0000511c
     e08:	00000db5 	.word	0x00000db5

00000e0c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     e0c:	6803      	ldr	r3, [r0, #0]
     e0e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     e10:	6001      	str	r1, [r0, #0]
}
     e12:	4770      	bx	lr

00000e14 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     e14:	6803      	ldr	r3, [r0, #0]
     e16:	2b00      	cmp	r3, #0
     e18:	d001      	beq.n	e1e <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     e1a:	681a      	ldr	r2, [r3, #0]
     e1c:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     e1e:	0018      	movs	r0, r3
     e20:	4770      	bx	lr
	...

00000e24 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     e24:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     e26:	4a08      	ldr	r2, [pc, #32]	; (e48 <_init_chip+0x24>)
     e28:	6853      	ldr	r3, [r2, #4]
     e2a:	2110      	movs	r1, #16
     e2c:	430b      	orrs	r3, r1
     e2e:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     e30:	4b06      	ldr	r3, [pc, #24]	; (e4c <_init_chip+0x28>)
     e32:	4798      	blx	r3
	_sysctrl_init_sources();
     e34:	4b06      	ldr	r3, [pc, #24]	; (e50 <_init_chip+0x2c>)
     e36:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     e38:	2010      	movs	r0, #16
     e3a:	4c06      	ldr	r4, [pc, #24]	; (e54 <_init_chip+0x30>)
     e3c:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     e3e:	4b06      	ldr	r3, [pc, #24]	; (e58 <_init_chip+0x34>)
     e40:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     e42:	20ef      	movs	r0, #239	; 0xef
     e44:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     e46:	bd10      	pop	{r4, pc}
     e48:	41004000 	.word	0x41004000
     e4c:	00000f2d 	.word	0x00000f2d
     e50:	000011fd 	.word	0x000011fd
     e54:	00000e5d 	.word	0x00000e5d
     e58:	00001241 	.word	0x00001241

00000e5c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     e5c:	07c3      	lsls	r3, r0, #31
     e5e:	d509      	bpl.n	e74 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     e60:	4b27      	ldr	r3, [pc, #156]	; (f00 <_gclk_init_generators_by_fref+0xa4>)
     e62:	2280      	movs	r2, #128	; 0x80
     e64:	0052      	lsls	r2, r2, #1
     e66:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     e68:	4a26      	ldr	r2, [pc, #152]	; (f04 <_gclk_init_generators_by_fref+0xa8>)
     e6a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     e6c:	001a      	movs	r2, r3
     e6e:	7853      	ldrb	r3, [r2, #1]
     e70:	09db      	lsrs	r3, r3, #7
     e72:	d1fc      	bne.n	e6e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     e74:	0783      	lsls	r3, r0, #30
     e76:	d509      	bpl.n	e8c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     e78:	4b21      	ldr	r3, [pc, #132]	; (f00 <_gclk_init_generators_by_fref+0xa4>)
     e7a:	2202      	movs	r2, #2
     e7c:	32ff      	adds	r2, #255	; 0xff
     e7e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     e80:	4a21      	ldr	r2, [pc, #132]	; (f08 <_gclk_init_generators_by_fref+0xac>)
     e82:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     e84:	001a      	movs	r2, r3
     e86:	7853      	ldrb	r3, [r2, #1]
     e88:	09db      	lsrs	r3, r3, #7
     e8a:	d1fc      	bne.n	e86 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
     e8c:	0743      	lsls	r3, r0, #29
     e8e:	d508      	bpl.n	ea2 <_gclk_init_generators_by_fref+0x46>
	((Gclk *)hw)->GENDIV.reg = data;
     e90:	4b1b      	ldr	r3, [pc, #108]	; (f00 <_gclk_init_generators_by_fref+0xa4>)
     e92:	4a1e      	ldr	r2, [pc, #120]	; (f0c <_gclk_init_generators_by_fref+0xb0>)
     e94:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     e96:	4a1e      	ldr	r2, [pc, #120]	; (f10 <_gclk_init_generators_by_fref+0xb4>)
     e98:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     e9a:	001a      	movs	r2, r3
     e9c:	7853      	ldrb	r3, [r2, #1]
     e9e:	09db      	lsrs	r3, r3, #7
     ea0:	d1fc      	bne.n	e9c <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     ea2:	0703      	lsls	r3, r0, #28
     ea4:	d509      	bpl.n	eba <_gclk_init_generators_by_fref+0x5e>
	((Gclk *)hw)->GENDIV.reg = data;
     ea6:	4b16      	ldr	r3, [pc, #88]	; (f00 <_gclk_init_generators_by_fref+0xa4>)
     ea8:	2204      	movs	r2, #4
     eaa:	32ff      	adds	r2, #255	; 0xff
     eac:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     eae:	4a19      	ldr	r2, [pc, #100]	; (f14 <_gclk_init_generators_by_fref+0xb8>)
     eb0:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     eb2:	001a      	movs	r2, r3
     eb4:	7853      	ldrb	r3, [r2, #1]
     eb6:	09db      	lsrs	r3, r3, #7
     eb8:	d1fc      	bne.n	eb4 <_gclk_init_generators_by_fref+0x58>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SRC | GCLK_GENCTRL_ID(3));
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
     eba:	06c3      	lsls	r3, r0, #27
     ebc:	d508      	bpl.n	ed0 <_gclk_init_generators_by_fref+0x74>
	((Gclk *)hw)->GENDIV.reg = data;
     ebe:	4b10      	ldr	r3, [pc, #64]	; (f00 <_gclk_init_generators_by_fref+0xa4>)
     ec0:	4a15      	ldr	r2, [pc, #84]	; (f18 <_gclk_init_generators_by_fref+0xbc>)
     ec2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     ec4:	4a15      	ldr	r2, [pc, #84]	; (f1c <_gclk_init_generators_by_fref+0xc0>)
     ec6:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     ec8:	001a      	movs	r2, r3
     eca:	7853      	ldrb	r3, [r2, #1]
     ecc:	09db      	lsrs	r3, r3, #7
     ece:	d1fc      	bne.n	eca <_gclk_init_generators_by_fref+0x6e>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
     ed0:	0683      	lsls	r3, r0, #26
     ed2:	d508      	bpl.n	ee6 <_gclk_init_generators_by_fref+0x8a>
	((Gclk *)hw)->GENDIV.reg = data;
     ed4:	4b0a      	ldr	r3, [pc, #40]	; (f00 <_gclk_init_generators_by_fref+0xa4>)
     ed6:	4a12      	ldr	r2, [pc, #72]	; (f20 <_gclk_init_generators_by_fref+0xc4>)
     ed8:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     eda:	4a12      	ldr	r2, [pc, #72]	; (f24 <_gclk_init_generators_by_fref+0xc8>)
     edc:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     ede:	001a      	movs	r2, r3
     ee0:	7853      	ldrb	r3, [r2, #1]
     ee2:	09db      	lsrs	r3, r3, #7
     ee4:	d1fc      	bne.n	ee0 <_gclk_init_generators_by_fref+0x84>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
     ee6:	0603      	lsls	r3, r0, #24
     ee8:	d509      	bpl.n	efe <_gclk_init_generators_by_fref+0xa2>
	((Gclk *)hw)->GENDIV.reg = data;
     eea:	4b05      	ldr	r3, [pc, #20]	; (f00 <_gclk_init_generators_by_fref+0xa4>)
     eec:	2208      	movs	r2, #8
     eee:	32ff      	adds	r2, #255	; 0xff
     ef0:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     ef2:	4a0d      	ldr	r2, [pc, #52]	; (f28 <_gclk_init_generators_by_fref+0xcc>)
     ef4:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     ef6:	001a      	movs	r2, r3
     ef8:	7853      	ldrb	r3, [r2, #1]
     efa:	09db      	lsrs	r3, r3, #7
     efc:	d1fc      	bne.n	ef8 <_gclk_init_generators_by_fref+0x9c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     efe:	4770      	bx	lr
     f00:	40000c00 	.word	0x40000c00
     f04:	00090800 	.word	0x00090800
     f08:	00090701 	.word	0x00090701
     f0c:	00000802 	.word	0x00000802
     f10:	00090602 	.word	0x00090602
     f14:	00090603 	.word	0x00090603
     f18:	00000404 	.word	0x00000404
     f1c:	00090604 	.word	0x00090604
     f20:	00002005 	.word	0x00002005
     f24:	00090305 	.word	0x00090305
     f28:	00090307 	.word	0x00090307

00000f2c <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     f2c:	4b06      	ldr	r3, [pc, #24]	; (f48 <_pm_init+0x1c>)
     f2e:	7a1a      	ldrb	r2, [r3, #8]
     f30:	b2d2      	uxtb	r2, r2
     f32:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     f34:	7a5a      	ldrb	r2, [r3, #9]
     f36:	b2d2      	uxtb	r2, r2
     f38:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     f3a:	7a9a      	ldrb	r2, [r3, #10]
     f3c:	b2d2      	uxtb	r2, r2
     f3e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     f40:	7ada      	ldrb	r2, [r3, #11]
     f42:	b2d2      	uxtb	r2, r2
     f44:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     f46:	4770      	bx	lr
     f48:	40000400 	.word	0x40000400

00000f4c <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     f4c:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
     f4e:	07db      	lsls	r3, r3, #31
     f50:	d409      	bmi.n	f66 <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     f52:	6803      	ldr	r3, [r0, #0]
     f54:	2202      	movs	r2, #2
     f56:	4313      	orrs	r3, r2
     f58:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     f5a:	3201      	adds	r2, #1
     f5c:	69c3      	ldr	r3, [r0, #28]
     f5e:	421a      	tst	r2, r3
     f60:	d1fc      	bne.n	f5c <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
     f62:	2000      	movs	r0, #0
}
     f64:	4770      	bx	lr
		return ERR_BUSY;
     f66:	2004      	movs	r0, #4
     f68:	4240      	negs	r0, r0
     f6a:	e7fb      	b.n	f64 <_spi_sync_enable+0x18>

00000f6c <_spi_sync_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     f6c:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
     f6e:	07db      	lsls	r3, r3, #31
     f70:	d409      	bmi.n	f86 <_spi_sync_disable+0x1a>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     f72:	6803      	ldr	r3, [r0, #0]
     f74:	2202      	movs	r2, #2
     f76:	4393      	bics	r3, r2
     f78:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     f7a:	3201      	adds	r2, #1
     f7c:	69c3      	ldr	r3, [r0, #28]
     f7e:	421a      	tst	r2, r3
     f80:	d1fc      	bne.n	f7c <_spi_sync_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
     f82:	2000      	movs	r0, #0
}
     f84:	4770      	bx	lr
		return ERR_BUSY;
     f86:	2004      	movs	r0, #4
     f88:	4240      	negs	r0, r0
     f8a:	e7fb      	b.n	f84 <_spi_sync_disable+0x18>

00000f8c <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
     f8c:	b570      	push	{r4, r5, r6, lr}
     f8e:	0005      	movs	r5, r0
     f90:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     f92:	4b35      	ldr	r3, [pc, #212]	; (1068 <_spi_m_sync_init+0xdc>)
     f94:	18cb      	adds	r3, r1, r3
     f96:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
     f98:	b2db      	uxtb	r3, r3
     f9a:	2b00      	cmp	r3, #0
     f9c:	d00b      	beq.n	fb6 <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
     f9e:	2800      	cmp	r0, #0
     fa0:	d051      	beq.n	1046 <_spi_m_sync_init+0xba>
     fa2:	1e60      	subs	r0, r4, #1
     fa4:	4184      	sbcs	r4, r0
     fa6:	b2e0      	uxtb	r0, r4
     fa8:	4a30      	ldr	r2, [pc, #192]	; (106c <_spi_m_sync_init+0xe0>)
     faa:	4931      	ldr	r1, [pc, #196]	; (1070 <_spi_m_sync_init+0xe4>)
     fac:	4b31      	ldr	r3, [pc, #196]	; (1074 <_spi_m_sync_init+0xe8>)
     fae:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
     fb0:	200d      	movs	r0, #13
     fb2:	4240      	negs	r0, r0
     fb4:	e046      	b.n	1044 <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
     fb6:	2800      	cmp	r0, #0
     fb8:	d14d      	bne.n	1056 <_spi_m_sync_init+0xca>
     fba:	4a2c      	ldr	r2, [pc, #176]	; (106c <_spi_m_sync_init+0xe0>)
     fbc:	492c      	ldr	r1, [pc, #176]	; (1070 <_spi_m_sync_init+0xe4>)
     fbe:	2000      	movs	r0, #0
     fc0:	4b2c      	ldr	r3, [pc, #176]	; (1074 <_spi_m_sync_init+0xe8>)
     fc2:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     fc4:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
     fc6:	07db      	lsls	r3, r3, #31
     fc8:	d418      	bmi.n	ffc <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     fca:	2203      	movs	r2, #3
     fcc:	69e3      	ldr	r3, [r4, #28]
     fce:	421a      	tst	r2, r3
     fd0:	d1fc      	bne.n	fcc <_spi_m_sync_init+0x40>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     fd2:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
     fd4:	079b      	lsls	r3, r3, #30
     fd6:	d50b      	bpl.n	ff0 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     fd8:	6823      	ldr	r3, [r4, #0]
     fda:	2202      	movs	r2, #2
     fdc:	4393      	bics	r3, r2
     fde:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     fe0:	3201      	adds	r2, #1
     fe2:	69e3      	ldr	r3, [r4, #28]
     fe4:	421a      	tst	r2, r3
     fe6:	d1fc      	bne.n	fe2 <_spi_m_sync_init+0x56>
     fe8:	2202      	movs	r2, #2
     fea:	69e3      	ldr	r3, [r4, #28]
     fec:	421a      	tst	r2, r3
     fee:	d1fc      	bne.n	fea <_spi_m_sync_init+0x5e>
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     ff0:	230d      	movs	r3, #13
     ff2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     ff4:	2203      	movs	r2, #3
     ff6:	69e3      	ldr	r3, [r4, #28]
     ff8:	421a      	tst	r2, r3
     ffa:	d1fc      	bne.n	ff6 <_spi_m_sync_init+0x6a>
     ffc:	2201      	movs	r2, #1
     ffe:	69e3      	ldr	r3, [r4, #28]
    1000:	421a      	tst	r2, r3
    1002:	d1fc      	bne.n	ffe <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1004:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1006:	0020      	movs	r0, r4
    1008:	1e43      	subs	r3, r0, #1
    100a:	4198      	sbcs	r0, r3
    100c:	b2c0      	uxtb	r0, r0
    100e:	4a1a      	ldr	r2, [pc, #104]	; (1078 <_spi_m_sync_init+0xec>)
    1010:	4917      	ldr	r1, [pc, #92]	; (1070 <_spi_m_sync_init+0xe4>)
    1012:	4b18      	ldr	r3, [pc, #96]	; (1074 <_spi_m_sync_init+0xe8>)
    1014:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1016:	4b19      	ldr	r3, [pc, #100]	; (107c <_spi_m_sync_init+0xf0>)
    1018:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    101a:	2203      	movs	r2, #3
    101c:	69e3      	ldr	r3, [r4, #28]
    101e:	421a      	tst	r2, r3
    1020:	d1fc      	bne.n	101c <_spi_m_sync_init+0x90>
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1022:	2380      	movs	r3, #128	; 0x80
    1024:	029b      	lsls	r3, r3, #10
    1026:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1028:	2207      	movs	r2, #7
    102a:	69e3      	ldr	r3, [r4, #28]
    102c:	421a      	tst	r2, r3
    102e:	d1fc      	bne.n	102a <_spi_m_sync_init+0x9e>
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1030:	2302      	movs	r3, #2
    1032:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1034:	2200      	movs	r2, #0
    1036:	332e      	adds	r3, #46	; 0x2e
    1038:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    103a:	3b2f      	subs	r3, #47	; 0x2f
    103c:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    103e:	4b10      	ldr	r3, [pc, #64]	; (1080 <_spi_m_sync_init+0xf4>)
    1040:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    1042:	2000      	movs	r0, #0
}
    1044:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    1046:	4a09      	ldr	r2, [pc, #36]	; (106c <_spi_m_sync_init+0xe0>)
    1048:	4909      	ldr	r1, [pc, #36]	; (1070 <_spi_m_sync_init+0xe4>)
    104a:	2000      	movs	r0, #0
    104c:	4b09      	ldr	r3, [pc, #36]	; (1074 <_spi_m_sync_init+0xe8>)
    104e:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1050:	200d      	movs	r0, #13
    1052:	4240      	negs	r0, r0
    1054:	e7f6      	b.n	1044 <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    1056:	0008      	movs	r0, r1
    1058:	1e43      	subs	r3, r0, #1
    105a:	4198      	sbcs	r0, r3
    105c:	b2c0      	uxtb	r0, r0
    105e:	4a03      	ldr	r2, [pc, #12]	; (106c <_spi_m_sync_init+0xe0>)
    1060:	4903      	ldr	r1, [pc, #12]	; (1070 <_spi_m_sync_init+0xe4>)
    1062:	4b04      	ldr	r3, [pc, #16]	; (1074 <_spi_m_sync_init+0xe8>)
    1064:	4798      	blx	r3
    1066:	e7ad      	b.n	fc4 <_spi_m_sync_init+0x38>
    1068:	bdfff800 	.word	0xbdfff800
    106c:	00000921 	.word	0x00000921
    1070:	0000513c 	.word	0x0000513c
    1074:	00000db5 	.word	0x00000db5
    1078:	000008eb 	.word	0x000008eb
    107c:	0011000c 	.word	0x0011000c
    1080:	000001ff 	.word	0x000001ff

00001084 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1084:	b510      	push	{r4, lr}
    1086:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    1088:	d00b      	beq.n	10a2 <_spi_m_sync_enable+0x1e>
    108a:	6800      	ldr	r0, [r0, #0]
    108c:	1e43      	subs	r3, r0, #1
    108e:	4198      	sbcs	r0, r3
    1090:	b2c0      	uxtb	r0, r0
    1092:	4a05      	ldr	r2, [pc, #20]	; (10a8 <_spi_m_sync_enable+0x24>)
    1094:	4905      	ldr	r1, [pc, #20]	; (10ac <_spi_m_sync_enable+0x28>)
    1096:	4b06      	ldr	r3, [pc, #24]	; (10b0 <_spi_m_sync_enable+0x2c>)
    1098:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    109a:	6820      	ldr	r0, [r4, #0]
    109c:	4b05      	ldr	r3, [pc, #20]	; (10b4 <_spi_m_sync_enable+0x30>)
    109e:	4798      	blx	r3
}
    10a0:	bd10      	pop	{r4, pc}
    10a2:	2000      	movs	r0, #0
    10a4:	e7f5      	b.n	1092 <_spi_m_sync_enable+0xe>
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	0000097c 	.word	0x0000097c
    10ac:	0000513c 	.word	0x0000513c
    10b0:	00000db5 	.word	0x00000db5
    10b4:	00000f4d 	.word	0x00000f4d

000010b8 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    10b8:	b510      	push	{r4, lr}
    10ba:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    10bc:	d00b      	beq.n	10d6 <_spi_m_sync_disable+0x1e>
    10be:	6800      	ldr	r0, [r0, #0]
    10c0:	1e43      	subs	r3, r0, #1
    10c2:	4198      	sbcs	r0, r3
    10c4:	b2c0      	uxtb	r0, r0
    10c6:	4a05      	ldr	r2, [pc, #20]	; (10dc <_spi_m_sync_disable+0x24>)
    10c8:	4905      	ldr	r1, [pc, #20]	; (10e0 <_spi_m_sync_disable+0x28>)
    10ca:	4b06      	ldr	r3, [pc, #24]	; (10e4 <_spi_m_sync_disable+0x2c>)
    10cc:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    10ce:	6820      	ldr	r0, [r4, #0]
    10d0:	4b05      	ldr	r3, [pc, #20]	; (10e8 <_spi_m_sync_disable+0x30>)
    10d2:	4798      	blx	r3
}
    10d4:	bd10      	pop	{r4, pc}
    10d6:	2000      	movs	r0, #0
    10d8:	e7f5      	b.n	10c6 <_spi_m_sync_disable+0xe>
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	00000998 	.word	0x00000998
    10e0:	0000513c 	.word	0x0000513c
    10e4:	00000db5 	.word	0x00000db5
    10e8:	00000f6d 	.word	0x00000f6d

000010ec <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    10ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ee:	46de      	mov	lr, fp
    10f0:	4657      	mov	r7, sl
    10f2:	464e      	mov	r6, r9
    10f4:	4645      	mov	r5, r8
    10f6:	b5e0      	push	{r5, r6, r7, lr}
    10f8:	b083      	sub	sp, #12
    10fa:	4681      	mov	r9, r0
    10fc:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    10fe:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1100:	680b      	ldr	r3, [r1, #0]
    1102:	4698      	mov	r8, r3
    1104:	684d      	ldr	r5, [r1, #4]
    1106:	7903      	ldrb	r3, [r0, #4]
    1108:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    110a:	2800      	cmp	r0, #0
    110c:	d015      	beq.n	113a <_spi_m_sync_trans+0x4e>
    110e:	0020      	movs	r0, r4
    1110:	1e43      	subs	r3, r0, #1
    1112:	4198      	sbcs	r0, r3
    1114:	b2c0      	uxtb	r0, r0
    1116:	4a36      	ldr	r2, [pc, #216]	; (11f0 <_spi_m_sync_trans+0x104>)
    1118:	4936      	ldr	r1, [pc, #216]	; (11f4 <_spi_m_sync_trans+0x108>)
    111a:	4b37      	ldr	r3, [pc, #220]	; (11f8 <_spi_m_sync_trans+0x10c>)
    111c:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    111e:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1120:	075b      	lsls	r3, r3, #29
    1122:	d13f      	bne.n	11a4 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1124:	2303      	movs	r3, #3
    1126:	69e0      	ldr	r0, [r4, #28]
    1128:	4018      	ands	r0, r3
    112a:	d1fc      	bne.n	1126 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    112c:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    112e:	079b      	lsls	r3, r3, #30
    1130:	d53b      	bpl.n	11aa <_spi_m_sync_trans+0xbe>
    1132:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1134:	2301      	movs	r3, #1
    1136:	469c      	mov	ip, r3
    1138:	e009      	b.n	114e <_spi_m_sync_trans+0x62>
    113a:	2000      	movs	r0, #0
    113c:	e7eb      	b.n	1116 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    113e:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    1140:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1142:	b25b      	sxtb	r3, r3
    1144:	2b00      	cmp	r3, #0
    1146:	db16      	blt.n	1176 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1148:	68b3      	ldr	r3, [r6, #8]
    114a:	4283      	cmp	r3, r0
    114c:	d927      	bls.n	119e <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    114e:	7e23      	ldrb	r3, [r4, #24]
    1150:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1152:	2104      	movs	r1, #4
    1154:	4219      	tst	r1, r3
    1156:	d02b      	beq.n	11b0 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1158:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    115a:	2d00      	cmp	r5, #0
    115c:	d0f0      	beq.n	1140 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    115e:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    1160:	9901      	ldr	r1, [sp, #4]
    1162:	2901      	cmp	r1, #1
    1164:	d9eb      	bls.n	113e <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1166:	0a3f      	lsrs	r7, r7, #8
    1168:	706f      	strb	r7, [r5, #1]
    116a:	3502      	adds	r5, #2
    116c:	e7e8      	b.n	1140 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    116e:	2101      	movs	r1, #1
    1170:	468b      	mov	fp, r1
    1172:	44d8      	add	r8, fp
    1174:	e037      	b.n	11e6 <_spi_m_sync_trans+0xfa>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1176:	2301      	movs	r3, #1
    1178:	425b      	negs	r3, r3
    117a:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    117c:	3381      	adds	r3, #129	; 0x81
    117e:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1180:	2013      	movs	r0, #19
    1182:	4240      	negs	r0, r0
	tmp &= mask;
    1184:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1186:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1188:	4213      	tst	r3, r2
    118a:	d0fc      	beq.n	1186 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    118c:	2303      	movs	r3, #3
    118e:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1190:	b003      	add	sp, #12
    1192:	bc3c      	pop	{r2, r3, r4, r5}
    1194:	4690      	mov	r8, r2
    1196:	4699      	mov	r9, r3
    1198:	46a2      	mov	sl, r4
    119a:	46ab      	mov	fp, r5
    119c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    119e:	4293      	cmp	r3, r2
    11a0:	d8d5      	bhi.n	114e <_spi_m_sync_trans+0x62>
    11a2:	e7ef      	b.n	1184 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    11a4:	2004      	movs	r0, #4
    11a6:	4240      	negs	r0, r0
    11a8:	e7f2      	b.n	1190 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    11aa:	2014      	movs	r0, #20
    11ac:	4240      	negs	r0, r0
    11ae:	e7ef      	b.n	1190 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    11b0:	4290      	cmp	r0, r2
    11b2:	d8c6      	bhi.n	1142 <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    11b4:	4667      	mov	r7, ip
    11b6:	421f      	tst	r7, r3
    11b8:	d0c3      	beq.n	1142 <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    11ba:	464f      	mov	r7, r9
    11bc:	88ff      	ldrh	r7, [r7, #6]
    11be:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    11c0:	4647      	mov	r7, r8
    11c2:	2f00      	cmp	r7, #0
    11c4:	d00f      	beq.n	11e6 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    11c6:	783f      	ldrb	r7, [r7, #0]
    11c8:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    11ca:	9901      	ldr	r1, [sp, #4]
    11cc:	2901      	cmp	r1, #1
    11ce:	d9ce      	bls.n	116e <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    11d0:	4647      	mov	r7, r8
    11d2:	787f      	ldrb	r7, [r7, #1]
    11d4:	023f      	lsls	r7, r7, #8
    11d6:	46bb      	mov	fp, r7
    11d8:	4657      	mov	r7, sl
    11da:	4659      	mov	r1, fp
    11dc:	430f      	orrs	r7, r1
    11de:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    11e0:	2102      	movs	r1, #2
    11e2:	468b      	mov	fp, r1
    11e4:	44d8      	add	r8, fp
	ctrl->txcnt++;
    11e6:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    11e8:	4657      	mov	r7, sl
    11ea:	62a7      	str	r7, [r4, #40]	; 0x28
    11ec:	e7a9      	b.n	1142 <_spi_m_sync_trans+0x56>
    11ee:	46c0      	nop			; (mov r8, r8)
    11f0:	00000a81 	.word	0x00000a81
    11f4:	0000513c 	.word	0x0000513c
    11f8:	00000db5 	.word	0x00000db5

000011fc <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    11fc:	4b0e      	ldr	r3, [pc, #56]	; (1238 <_sysctrl_init_sources+0x3c>)
    11fe:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1200:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1202:	480e      	ldr	r0, [pc, #56]	; (123c <_sysctrl_init_sources+0x40>)
    1204:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1206:	0f92      	lsrs	r2, r2, #30
    1208:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    120a:	2002      	movs	r0, #2
    120c:	4302      	orrs	r2, r0
    120e:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1210:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1212:	699a      	ldr	r2, [r3, #24]
    1214:	4302      	orrs	r2, r0
    1216:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1218:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    121a:	211f      	movs	r1, #31
    121c:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    121e:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1220:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1222:	2208      	movs	r2, #8
    1224:	68cb      	ldr	r3, [r1, #12]
    1226:	421a      	tst	r2, r3
    1228:	d0fc      	beq.n	1224 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    122a:	4a03      	ldr	r2, [pc, #12]	; (1238 <_sysctrl_init_sources+0x3c>)
    122c:	6a13      	ldr	r3, [r2, #32]
    122e:	2180      	movs	r1, #128	; 0x80
    1230:	430b      	orrs	r3, r1
    1232:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1234:	4770      	bx	lr
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	40000800 	.word	0x40000800
    123c:	0fff0000 	.word	0x0fff0000

00001240 <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    1240:	b530      	push	{r4, r5, lr}
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1242:	2202      	movs	r2, #2
    1244:	4b25      	ldr	r3, [pc, #148]	; (12dc <_sysctrl_init_referenced_generators+0x9c>)
    1246:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1248:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    124a:	320e      	adds	r2, #14
    124c:	68cb      	ldr	r3, [r1, #12]
    124e:	421a      	tst	r2, r3
    1250:	d0fc      	beq.n	124c <_sysctrl_init_referenced_generators+0xc>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1252:	4a23      	ldr	r2, [pc, #140]	; (12e0 <_sysctrl_init_referenced_generators+0xa0>)
    1254:	4b21      	ldr	r3, [pc, #132]	; (12dc <_sysctrl_init_referenced_generators+0x9c>)
    1256:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1258:	4b22      	ldr	r3, [pc, #136]	; (12e4 <_sysctrl_init_referenced_generators+0xa4>)
    125a:	681b      	ldr	r3, [r3, #0]
    125c:	0e9b      	lsrs	r3, r3, #26
    125e:	2b3f      	cmp	r3, #63	; 0x3f
    1260:	d032      	beq.n	12c8 <_sysctrl_init_referenced_generators+0x88>
    1262:	029b      	lsls	r3, r3, #10
    1264:	2280      	movs	r2, #128	; 0x80
    1266:	0092      	lsls	r2, r2, #2
    1268:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    126a:	4b1c      	ldr	r3, [pc, #112]	; (12dc <_sysctrl_init_referenced_generators+0x9c>)
    126c:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    126e:	2293      	movs	r2, #147	; 0x93
    1270:	0052      	lsls	r2, r2, #1
    1272:	849a      	strh	r2, [r3, #36]	; 0x24
	((Gclk *)hw)->CLKCTRL.reg = data;
    1274:	491c      	ldr	r1, [pc, #112]	; (12e8 <_sysctrl_init_referenced_generators+0xa8>)
    1276:	4a1d      	ldr	r2, [pc, #116]	; (12ec <_sysctrl_init_referenced_generators+0xac>)
    1278:	8051      	strh	r1, [r2, #2]
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    127a:	2102      	movs	r1, #2
    127c:	2244      	movs	r2, #68	; 0x44
    127e:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    1280:	3a2d      	subs	r2, #45	; 0x2d
    1282:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    1284:	3209      	adds	r2, #9
    1286:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1288:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    128a:	075b      	lsls	r3, r3, #29
    128c:	d51f      	bpl.n	12ce <_sysctrl_init_referenced_generators+0x8e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    128e:	4913      	ldr	r1, [pc, #76]	; (12dc <_sysctrl_init_referenced_generators+0x9c>)
	tmp &= mask;
    1290:	3a10      	subs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1292:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    1294:	421a      	tst	r2, r3
    1296:	d0fc      	beq.n	1292 <_sysctrl_init_referenced_generators+0x52>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    1298:	4a10      	ldr	r2, [pc, #64]	; (12dc <_sysctrl_init_referenced_generators+0x9c>)
    129a:	2350      	movs	r3, #80	; 0x50
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    129c:	2004      	movs	r0, #4
    129e:	2401      	movs	r4, #1
    12a0:	2502      	movs	r5, #2
    12a2:	5cd1      	ldrb	r1, [r2, r3]
    12a4:	4201      	tst	r1, r0
    12a6:	d105      	bne.n	12b4 <_sysctrl_init_referenced_generators+0x74>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    12a8:	5cd1      	ldrb	r1, [r2, r3]
    12aa:	4221      	tst	r1, r4
    12ac:	d102      	bne.n	12b4 <_sysctrl_init_referenced_generators+0x74>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    12ae:	5cd1      	ldrb	r1, [r2, r3]
    12b0:	4229      	tst	r1, r5
    12b2:	d0f6      	beq.n	12a2 <_sysctrl_init_referenced_generators+0x62>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    12b4:	4a0d      	ldr	r2, [pc, #52]	; (12ec <_sysctrl_init_referenced_generators+0xac>)
    12b6:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    12b8:	09db      	lsrs	r3, r3, #7
    12ba:	d1fc      	bne.n	12b6 <_sysctrl_init_referenced_generators+0x76>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    12bc:	4a07      	ldr	r2, [pc, #28]	; (12dc <_sysctrl_init_referenced_generators+0x9c>)
    12be:	6993      	ldr	r3, [r2, #24]
    12c0:	2102      	movs	r1, #2
    12c2:	438b      	bics	r3, r1
    12c4:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    12c6:	bd30      	pop	{r4, r5, pc}
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    12c8:	22fc      	movs	r2, #252	; 0xfc
    12ca:	01d2      	lsls	r2, r2, #7
    12cc:	e7cd      	b.n	126a <_sysctrl_init_referenced_generators+0x2a>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    12ce:	4903      	ldr	r1, [pc, #12]	; (12dc <_sysctrl_init_referenced_generators+0x9c>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    12d0:	2210      	movs	r2, #16
    12d2:	68cb      	ldr	r3, [r1, #12]
    12d4:	421a      	tst	r2, r3
    12d6:	d0fc      	beq.n	12d2 <_sysctrl_init_referenced_generators+0x92>
    12d8:	e7de      	b.n	1298 <_sysctrl_init_referenced_generators+0x58>
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	40000800 	.word	0x40000800
    12e0:	0401bb80 	.word	0x0401bb80
    12e4:	00806024 	.word	0x00806024
    12e8:	00004401 	.word	0x00004401
    12ec:	40000c00 	.word	0x40000c00

000012f0 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    12f0:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    12f2:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    12f4:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    12f6:	07d2      	lsls	r2, r2, #31
    12f8:	d400      	bmi.n	12fc <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    12fa:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    12fc:	2201      	movs	r2, #1
    12fe:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    1300:	6803      	ldr	r3, [r0, #0]
    1302:	4798      	blx	r3
}
    1304:	e7f9      	b.n	12fa <tc_interrupt_handler+0xa>
	...

00001308 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    1308:	4b0c      	ldr	r3, [pc, #48]	; (133c <_tc_init_irq_param+0x34>)
    130a:	4298      	cmp	r0, r3
    130c:	d009      	beq.n	1322 <_tc_init_irq_param+0x1a>
		_tc3_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC4) {
    130e:	4b0c      	ldr	r3, [pc, #48]	; (1340 <_tc_init_irq_param+0x38>)
    1310:	4298      	cmp	r0, r3
    1312:	d009      	beq.n	1328 <_tc_init_irq_param+0x20>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    1314:	4b0b      	ldr	r3, [pc, #44]	; (1344 <_tc_init_irq_param+0x3c>)
    1316:	4298      	cmp	r0, r3
    1318:	d009      	beq.n	132e <_tc_init_irq_param+0x26>
		_tc5_dev = (struct _timer_device *)dev;
	}
	if (hw == TC7) {
    131a:	4b0b      	ldr	r3, [pc, #44]	; (1348 <_tc_init_irq_param+0x40>)
    131c:	4298      	cmp	r0, r3
    131e:	d009      	beq.n	1334 <_tc_init_irq_param+0x2c>
		_tc7_dev = (struct _timer_device *)dev;
	}
}
    1320:	4770      	bx	lr
		_tc3_dev = (struct _pwm_device *)dev;
    1322:	4b0a      	ldr	r3, [pc, #40]	; (134c <_tc_init_irq_param+0x44>)
    1324:	6019      	str	r1, [r3, #0]
    1326:	e7f8      	b.n	131a <_tc_init_irq_param+0x12>
		_tc4_dev = (struct _timer_device *)dev;
    1328:	4b08      	ldr	r3, [pc, #32]	; (134c <_tc_init_irq_param+0x44>)
    132a:	6059      	str	r1, [r3, #4]
    132c:	e7f8      	b.n	1320 <_tc_init_irq_param+0x18>
		_tc5_dev = (struct _timer_device *)dev;
    132e:	4b07      	ldr	r3, [pc, #28]	; (134c <_tc_init_irq_param+0x44>)
    1330:	6099      	str	r1, [r3, #8]
    1332:	e7f5      	b.n	1320 <_tc_init_irq_param+0x18>
		_tc7_dev = (struct _timer_device *)dev;
    1334:	4b05      	ldr	r3, [pc, #20]	; (134c <_tc_init_irq_param+0x44>)
    1336:	60d9      	str	r1, [r3, #12]
}
    1338:	e7f2      	b.n	1320 <_tc_init_irq_param+0x18>
    133a:	46c0      	nop			; (mov r8, r8)
    133c:	42002c00 	.word	0x42002c00
    1340:	42003000 	.word	0x42003000
    1344:	42003400 	.word	0x42003400
    1348:	42003c00 	.word	0x42003c00
    134c:	200004d4 	.word	0x200004d4

00001350 <get_tc_index>:
{
    1350:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1352:	4b13      	ldr	r3, [pc, #76]	; (13a0 <get_tc_index+0x50>)
    1354:	18c3      	adds	r3, r0, r3
    1356:	0a9b      	lsrs	r3, r3, #10
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    1358:	3303      	adds	r3, #3
    135a:	b2db      	uxtb	r3, r3
		if (_tcs[i].number == tc_offset) {
    135c:	4a11      	ldr	r2, [pc, #68]	; (13a4 <get_tc_index+0x54>)
    135e:	7812      	ldrb	r2, [r2, #0]
    1360:	429a      	cmp	r2, r3
    1362:	d01a      	beq.n	139a <get_tc_index+0x4a>
    1364:	4a0f      	ldr	r2, [pc, #60]	; (13a4 <get_tc_index+0x54>)
    1366:	7d12      	ldrb	r2, [r2, #20]
    1368:	429a      	cmp	r2, r3
    136a:	d012      	beq.n	1392 <get_tc_index+0x42>
    136c:	2228      	movs	r2, #40	; 0x28
    136e:	490d      	ldr	r1, [pc, #52]	; (13a4 <get_tc_index+0x54>)
    1370:	5c8a      	ldrb	r2, [r1, r2]
    1372:	429a      	cmp	r2, r3
    1374:	d00f      	beq.n	1396 <get_tc_index+0x46>
    1376:	223c      	movs	r2, #60	; 0x3c
    1378:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    137a:	2003      	movs	r0, #3
		if (_tcs[i].number == tc_offset) {
    137c:	429a      	cmp	r2, r3
    137e:	d00d      	beq.n	139c <get_tc_index+0x4c>
	ASSERT(false);
    1380:	22fa      	movs	r2, #250	; 0xfa
    1382:	32ff      	adds	r2, #255	; 0xff
    1384:	4908      	ldr	r1, [pc, #32]	; (13a8 <get_tc_index+0x58>)
    1386:	2000      	movs	r0, #0
    1388:	4b08      	ldr	r3, [pc, #32]	; (13ac <get_tc_index+0x5c>)
    138a:	4798      	blx	r3
	return -1;
    138c:	2001      	movs	r0, #1
    138e:	4240      	negs	r0, r0
}
    1390:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1392:	2001      	movs	r0, #1
    1394:	e002      	b.n	139c <get_tc_index+0x4c>
    1396:	2002      	movs	r0, #2
    1398:	e000      	b.n	139c <get_tc_index+0x4c>
    139a:	2000      	movs	r0, #0
			return i;
    139c:	b240      	sxtb	r0, r0
    139e:	e7f7      	b.n	1390 <get_tc_index+0x40>
    13a0:	bdffd400 	.word	0xbdffd400
    13a4:	20000004 	.word	0x20000004
    13a8:	00005158 	.word	0x00005158
    13ac:	00000db5 	.word	0x00000db5

000013b0 <_timer_init>:
{
    13b0:	b570      	push	{r4, r5, r6, lr}
    13b2:	0006      	movs	r6, r0
    13b4:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    13b6:	0008      	movs	r0, r1
    13b8:	4b39      	ldr	r3, [pc, #228]	; (14a0 <_timer_init+0xf0>)
    13ba:	4798      	blx	r3
    13bc:	0005      	movs	r5, r0
	device->hw = hw;
    13be:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    13c0:	2291      	movs	r2, #145	; 0x91
    13c2:	4938      	ldr	r1, [pc, #224]	; (14a4 <_timer_init+0xf4>)
    13c4:	2001      	movs	r0, #1
    13c6:	4b38      	ldr	r3, [pc, #224]	; (14a8 <_timer_init+0xf8>)
    13c8:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    13ca:	7be3      	ldrb	r3, [r4, #15]
    13cc:	09db      	lsrs	r3, r3, #7
    13ce:	d1fc      	bne.n	13ca <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    13d0:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    13d2:	079b      	lsls	r3, r3, #30
    13d4:	d504      	bpl.n	13e0 <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    13d6:	2300      	movs	r3, #0
    13d8:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    13da:	7be3      	ldrb	r3, [r4, #15]
    13dc:	09db      	lsrs	r3, r3, #7
    13de:	d1fc      	bne.n	13da <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    13e0:	2301      	movs	r3, #1
    13e2:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    13e4:	7be3      	ldrb	r3, [r4, #15]
    13e6:	09db      	lsrs	r3, r3, #7
    13e8:	d1fc      	bne.n	13e4 <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    13ea:	00ab      	lsls	r3, r5, #2
    13ec:	195b      	adds	r3, r3, r5
    13ee:	009a      	lsls	r2, r3, #2
    13f0:	4b2e      	ldr	r3, [pc, #184]	; (14ac <_timer_init+0xfc>)
    13f2:	189b      	adds	r3, r3, r2
    13f4:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    13f6:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    13f8:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    13fa:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    13fc:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    13fe:	8163      	strh	r3, [r4, #10]
    1400:	230c      	movs	r3, #12
    1402:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1404:	2b08      	cmp	r3, #8
    1406:	d02c      	beq.n	1462 <_timer_init+0xb2>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1408:	2b00      	cmp	r3, #0
    140a:	d137      	bne.n	147c <_timer_init+0xcc>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    140c:	4927      	ldr	r1, [pc, #156]	; (14ac <_timer_init+0xfc>)
    140e:	00ab      	lsls	r3, r5, #2
    1410:	195a      	adds	r2, r3, r5
    1412:	0092      	lsls	r2, r2, #2
    1414:	188a      	adds	r2, r1, r2
    1416:	8992      	ldrh	r2, [r2, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1418:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    141a:	195b      	adds	r3, r3, r5
    141c:	009b      	lsls	r3, r3, #2
    141e:	18cb      	adds	r3, r1, r3
    1420:	8a1b      	ldrh	r3, [r3, #16]
    1422:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1424:	2301      	movs	r3, #1
    1426:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    1428:	0031      	movs	r1, r6
    142a:	0020      	movs	r0, r4
    142c:	4b20      	ldr	r3, [pc, #128]	; (14b0 <_timer_init+0x100>)
    142e:	4798      	blx	r3
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1430:	4b20      	ldr	r3, [pc, #128]	; (14b4 <_timer_init+0x104>)
    1432:	469c      	mov	ip, r3
    1434:	4464      	add	r4, ip
    1436:	0aa4      	lsrs	r4, r4, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1438:	3412      	adds	r4, #18
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    143a:	b2e3      	uxtb	r3, r4
    143c:	0622      	lsls	r2, r4, #24
    143e:	d40e      	bmi.n	145e <_timer_init+0xae>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1440:	221f      	movs	r2, #31
    1442:	401a      	ands	r2, r3
    1444:	2301      	movs	r3, #1
    1446:	4093      	lsls	r3, r2
    1448:	4a1b      	ldr	r2, [pc, #108]	; (14b8 <_timer_init+0x108>)
    144a:	2180      	movs	r1, #128	; 0x80
    144c:	5053      	str	r3, [r2, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    144e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1452:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1456:	3101      	adds	r1, #1
    1458:	31ff      	adds	r1, #255	; 0xff
    145a:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    145c:	6013      	str	r3, [r2, #0]
}
    145e:	2000      	movs	r0, #0
    1460:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1462:	4912      	ldr	r1, [pc, #72]	; (14ac <_timer_init+0xfc>)
    1464:	00ab      	lsls	r3, r5, #2
    1466:	195a      	adds	r2, r3, r5
    1468:	0092      	lsls	r2, r2, #2
    146a:	188a      	adds	r2, r1, r2
    146c:	68d2      	ldr	r2, [r2, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    146e:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1470:	195b      	adds	r3, r3, r5
    1472:	009b      	lsls	r3, r3, #2
    1474:	18cb      	adds	r3, r1, r3
    1476:	691b      	ldr	r3, [r3, #16]
    1478:	61e3      	str	r3, [r4, #28]
    147a:	e7d3      	b.n	1424 <_timer_init+0x74>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    147c:	2b04      	cmp	r3, #4
    147e:	d1d1      	bne.n	1424 <_timer_init+0x74>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    1480:	490a      	ldr	r1, [pc, #40]	; (14ac <_timer_init+0xfc>)
    1482:	00ab      	lsls	r3, r5, #2
    1484:	195a      	adds	r2, r3, r5
    1486:	0092      	lsls	r2, r2, #2
    1488:	188a      	adds	r2, r1, r2
    148a:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    148c:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    148e:	7c12      	ldrb	r2, [r2, #16]
    1490:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1492:	195b      	adds	r3, r3, r5
    1494:	009b      	lsls	r3, r3, #2
    1496:	18cb      	adds	r3, r1, r3
    1498:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    149a:	7523      	strb	r3, [r4, #20]
    149c:	e7c2      	b.n	1424 <_timer_init+0x74>
    149e:	46c0      	nop			; (mov r8, r8)
    14a0:	00001351 	.word	0x00001351
    14a4:	00005158 	.word	0x00005158
    14a8:	00000db5 	.word	0x00000db5
    14ac:	20000004 	.word	0x20000004
    14b0:	00001309 	.word	0x00001309
    14b4:	bdffd400 	.word	0xbdffd400
    14b8:	e000e100 	.word	0xe000e100

000014bc <_pwm_init>:
{
    14bc:	b570      	push	{r4, r5, r6, lr}
    14be:	0005      	movs	r5, r0
    14c0:	000c      	movs	r4, r1
	int8_t i   = get_tc_index(hw);
    14c2:	0008      	movs	r0, r1
    14c4:	4b2f      	ldr	r3, [pc, #188]	; (1584 <_pwm_init+0xc8>)
    14c6:	4798      	blx	r3
	device->hw = hw;
    14c8:	612c      	str	r4, [r5, #16]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    14ca:	7be3      	ldrb	r3, [r4, #15]
    14cc:	09db      	lsrs	r3, r3, #7
    14ce:	d1fc      	bne.n	14ca <_pwm_init+0xe>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    14d0:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    14d2:	079b      	lsls	r3, r3, #30
    14d4:	d504      	bpl.n	14e0 <_pwm_init+0x24>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    14d6:	2300      	movs	r3, #0
    14d8:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    14da:	7be3      	ldrb	r3, [r4, #15]
    14dc:	09db      	lsrs	r3, r3, #7
    14de:	d1fc      	bne.n	14da <_pwm_init+0x1e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    14e0:	2301      	movs	r3, #1
    14e2:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    14e4:	7be3      	ldrb	r3, [r4, #15]
    14e6:	09db      	lsrs	r3, r3, #7
    14e8:	d1fc      	bne.n	14e4 <_pwm_init+0x28>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    14ea:	0083      	lsls	r3, r0, #2
    14ec:	181b      	adds	r3, r3, r0
    14ee:	009a      	lsls	r2, r3, #2
    14f0:	4b25      	ldr	r3, [pc, #148]	; (1588 <_pwm_init+0xcc>)
    14f2:	189b      	adds	r3, r3, r2
    14f4:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    14f6:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    14f8:	7919      	ldrb	r1, [r3, #4]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    14fa:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    14fc:	88db      	ldrh	r3, [r3, #6]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    14fe:	8163      	strh	r3, [r4, #10]
    1500:	230c      	movs	r3, #12
    1502:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1504:	2b08      	cmp	r3, #8
    1506:	d02a      	beq.n	155e <_pwm_init+0xa2>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1508:	2b00      	cmp	r3, #0
    150a:	d135      	bne.n	1578 <_pwm_init+0xbc>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    150c:	491e      	ldr	r1, [pc, #120]	; (1588 <_pwm_init+0xcc>)
    150e:	0083      	lsls	r3, r0, #2
    1510:	181a      	adds	r2, r3, r0
    1512:	0092      	lsls	r2, r2, #2
    1514:	188a      	adds	r2, r1, r2
    1516:	8992      	ldrh	r2, [r2, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1518:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    151a:	1818      	adds	r0, r3, r0
    151c:	0080      	lsls	r0, r0, #2
    151e:	1808      	adds	r0, r1, r0
    1520:	8a03      	ldrh	r3, [r0, #16]
    1522:	8363      	strh	r3, [r4, #26]
	_tc_init_irq_param(hw, (void *)device);
    1524:	0029      	movs	r1, r5
    1526:	0020      	movs	r0, r4
    1528:	4b18      	ldr	r3, [pc, #96]	; (158c <_pwm_init+0xd0>)
    152a:	4798      	blx	r3
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    152c:	4b18      	ldr	r3, [pc, #96]	; (1590 <_pwm_init+0xd4>)
    152e:	469c      	mov	ip, r3
    1530:	4464      	add	r4, ip
    1532:	0aa4      	lsrs	r4, r4, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1534:	3412      	adds	r4, #18
  if ((int32_t)(IRQn) >= 0)
    1536:	b2e3      	uxtb	r3, r4
    1538:	0622      	lsls	r2, r4, #24
    153a:	d420      	bmi.n	157e <_pwm_init+0xc2>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    153c:	221f      	movs	r2, #31
    153e:	401a      	ands	r2, r3
    1540:	2301      	movs	r3, #1
    1542:	4093      	lsls	r3, r2
    1544:	4a13      	ldr	r2, [pc, #76]	; (1594 <_pwm_init+0xd8>)
    1546:	2180      	movs	r1, #128	; 0x80
    1548:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    154a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    154e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1552:	3101      	adds	r1, #1
    1554:	31ff      	adds	r1, #255	; 0xff
    1556:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1558:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
    155a:	2000      	movs	r0, #0
}
    155c:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    155e:	490a      	ldr	r1, [pc, #40]	; (1588 <_pwm_init+0xcc>)
    1560:	0083      	lsls	r3, r0, #2
    1562:	181a      	adds	r2, r3, r0
    1564:	0092      	lsls	r2, r2, #2
    1566:	188a      	adds	r2, r1, r2
    1568:	68d2      	ldr	r2, [r2, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    156a:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    156c:	1818      	adds	r0, r3, r0
    156e:	0080      	lsls	r0, r0, #2
    1570:	1808      	adds	r0, r1, r0
    1572:	6903      	ldr	r3, [r0, #16]
    1574:	61e3      	str	r3, [r4, #28]
    1576:	e7d5      	b.n	1524 <_pwm_init+0x68>
		return ERR_INVALID_DATA;
    1578:	2001      	movs	r0, #1
    157a:	4240      	negs	r0, r0
    157c:	e7ee      	b.n	155c <_pwm_init+0xa0>
	return ERR_NONE;
    157e:	2000      	movs	r0, #0
    1580:	e7ec      	b.n	155c <_pwm_init+0xa0>
    1582:	46c0      	nop			; (mov r8, r8)
    1584:	00001351 	.word	0x00001351
    1588:	20000004 	.word	0x20000004
    158c:	00001309 	.word	0x00001309
    1590:	bdffd400 	.word	0xbdffd400
    1594:	e000e100 	.word	0xe000e100

00001598 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    1598:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    159a:	8813      	ldrh	r3, [r2, #0]
    159c:	2102      	movs	r1, #2
    159e:	430b      	orrs	r3, r1
    15a0:	8013      	strh	r3, [r2, #0]
}
    15a2:	4770      	bx	lr

000015a4 <_pwm_enable>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    15a4:	6902      	ldr	r2, [r0, #16]
    15a6:	8813      	ldrh	r3, [r2, #0]
    15a8:	2102      	movs	r1, #2
    15aa:	430b      	orrs	r3, r1
    15ac:	8013      	strh	r3, [r2, #0]
}
    15ae:	4770      	bx	lr

000015b0 <_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    15b0:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    15b2:	8813      	ldrh	r3, [r2, #0]
    15b4:	2102      	movs	r1, #2
    15b6:	438b      	bics	r3, r1
    15b8:	8013      	strh	r3, [r2, #0]
}
    15ba:	4770      	bx	lr

000015bc <_pwm_disable>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    15bc:	6902      	ldr	r2, [r0, #16]
    15be:	8813      	ldrh	r3, [r2, #0]
    15c0:	2102      	movs	r1, #2
    15c2:	438b      	bics	r3, r1
    15c4:	8013      	strh	r3, [r2, #0]
}
    15c6:	4770      	bx	lr

000015c8 <_pwm_set_param>:
{
    15c8:	b570      	push	{r4, r5, r6, lr}
    15ca:	0006      	movs	r6, r0
    15cc:	000d      	movs	r5, r1
    15ce:	0014      	movs	r4, r2
	int8_t      i  = get_tc_index(device->hw);
    15d0:	6900      	ldr	r0, [r0, #16]
    15d2:	4b0b      	ldr	r3, [pc, #44]	; (1600 <_pwm_set_param+0x38>)
    15d4:	4798      	blx	r3
	void *const hw = device->hw;
    15d6:	6936      	ldr	r6, [r6, #16]
	_tcs[i].cc0    = period;
    15d8:	490a      	ldr	r1, [pc, #40]	; (1604 <_pwm_set_param+0x3c>)
    15da:	0083      	lsls	r3, r0, #2
    15dc:	181a      	adds	r2, r3, r0
    15de:	0092      	lsls	r2, r2, #2
    15e0:	188a      	adds	r2, r1, r2
    15e2:	60d5      	str	r5, [r2, #12]
	_tcs[i].cc1    = duty_cycle;
    15e4:	6114      	str	r4, [r2, #16]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    15e6:	8852      	ldrh	r2, [r2, #2]
    15e8:	230c      	movs	r3, #12
    15ea:	4013      	ands	r3, r2
    15ec:	2b08      	cmp	r3, #8
    15ee:	d004      	beq.n	15fa <_pwm_set_param+0x32>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    15f0:	b2ad      	uxth	r5, r5
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    15f2:	8335      	strh	r5, [r6, #24]
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    15f4:	b2a4      	uxth	r4, r4
    15f6:	8374      	strh	r4, [r6, #26]
}
    15f8:	bd70      	pop	{r4, r5, r6, pc}
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    15fa:	61b5      	str	r5, [r6, #24]
    15fc:	61f4      	str	r4, [r6, #28]
    15fe:	e7fb      	b.n	15f8 <_pwm_set_param+0x30>
    1600:	00001351 	.word	0x00001351
    1604:	20000004 	.word	0x20000004

00001608 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1608:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    160a:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    160c:	0780      	lsls	r0, r0, #30
    160e:	0fc0      	lsrs	r0, r0, #31
}
    1610:	4770      	bx	lr

00001612 <_pwm_is_enabled>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1612:	6903      	ldr	r3, [r0, #16]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1614:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    1616:	0780      	lsls	r0, r0, #30
    1618:	0fc0      	lsrs	r0, r0, #31
}
    161a:	4770      	bx	lr

0000161c <_pwm_set_irq_state>:
{
    161c:	b570      	push	{r4, r5, r6, lr}
    161e:	0004      	movs	r4, r0
    1620:	000e      	movs	r6, r1
    1622:	0015      	movs	r5, r2
	ASSERT(device);
    1624:	1e43      	subs	r3, r0, #1
    1626:	4198      	sbcs	r0, r3
    1628:	b2c0      	uxtb	r0, r0
    162a:	2274      	movs	r2, #116	; 0x74
    162c:	32ff      	adds	r2, #255	; 0xff
    162e:	490d      	ldr	r1, [pc, #52]	; (1664 <_pwm_set_irq_state+0x48>)
    1630:	4b0d      	ldr	r3, [pc, #52]	; (1668 <_pwm_set_irq_state+0x4c>)
    1632:	4798      	blx	r3
	if (PWM_DEVICE_PERIOD_CB == type) {
    1634:	2e00      	cmp	r6, #0
    1636:	d108      	bne.n	164a <_pwm_set_irq_state+0x2e>
		hri_tc_write_INTEN_OVF_bit(device->hw, disable);
    1638:	6923      	ldr	r3, [r4, #16]
	if (value == 0x0) {
    163a:	2d00      	cmp	r5, #0
    163c:	d102      	bne.n	1644 <_pwm_set_irq_state+0x28>
		((Tc *)hw)->COUNT16.INTENCLR.reg = TC_INTENSET_OVF;
    163e:	2201      	movs	r2, #1
    1640:	731a      	strb	r2, [r3, #12]
    1642:	e004      	b.n	164e <_pwm_set_irq_state+0x32>
		((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1644:	2201      	movs	r2, #1
    1646:	735a      	strb	r2, [r3, #13]
    1648:	e001      	b.n	164e <_pwm_set_irq_state+0x32>
	} else if (PWM_DEVICE_ERROR_CB == type) {
    164a:	2e01      	cmp	r6, #1
    164c:	d000      	beq.n	1650 <_pwm_set_irq_state+0x34>
}
    164e:	bd70      	pop	{r4, r5, r6, pc}
		hri_tc_write_INTEN_ERR_bit(device->hw, disable);
    1650:	6923      	ldr	r3, [r4, #16]
	if (value == 0x0) {
    1652:	2d00      	cmp	r5, #0
    1654:	d002      	beq.n	165c <_pwm_set_irq_state+0x40>
		((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
    1656:	2202      	movs	r2, #2
    1658:	735a      	strb	r2, [r3, #13]
}
    165a:	e7f8      	b.n	164e <_pwm_set_irq_state+0x32>
		((Tc *)hw)->COUNT16.INTENCLR.reg = TC_INTENSET_ERR;
    165c:	2202      	movs	r2, #2
    165e:	731a      	strb	r2, [r3, #12]
    1660:	e7f5      	b.n	164e <_pwm_set_irq_state+0x32>
    1662:	46c0      	nop			; (mov r8, r8)
    1664:	00005158 	.word	0x00005158
    1668:	00000db5 	.word	0x00000db5

0000166c <_tc_get_timer>:
}
    166c:	2000      	movs	r0, #0
    166e:	4770      	bx	lr

00001670 <_tc_get_pwm>:
}
    1670:	2000      	movs	r0, #0
    1672:	4770      	bx	lr

00001674 <_timer_set_irq>:
{
    1674:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1676:	68c0      	ldr	r0, [r0, #12]
    1678:	4b04      	ldr	r3, [pc, #16]	; (168c <_timer_set_irq+0x18>)
    167a:	469c      	mov	ip, r3
    167c:	4460      	add	r0, ip
    167e:	0a80      	lsrs	r0, r0, #10
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    1680:	3012      	adds	r0, #18
    1682:	b2c0      	uxtb	r0, r0
    1684:	4b02      	ldr	r3, [pc, #8]	; (1690 <_timer_set_irq+0x1c>)
    1686:	4798      	blx	r3
}
    1688:	bd10      	pop	{r4, pc}
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	bdffd400 	.word	0xbdffd400
    1690:	00001725 	.word	0x00001725

00001694 <TC3_Handler>:
{
    1694:	b570      	push	{r4, r5, r6, lr}
	tc_pwm_interrupt_handler(_tc3_dev);
    1696:	4b0c      	ldr	r3, [pc, #48]	; (16c8 <TC3_Handler+0x34>)
    1698:	681d      	ldr	r5, [r3, #0]
	void *const hw = device->hw;
    169a:	692c      	ldr	r4, [r5, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    169c:	7ba3      	ldrb	r3, [r4, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    169e:	07db      	lsls	r3, r3, #31
    16a0:	d506      	bpl.n	16b0 <TC3_Handler+0x1c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    16a2:	2301      	movs	r3, #1
    16a4:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_period_cb) {
    16a6:	682b      	ldr	r3, [r5, #0]
    16a8:	2b00      	cmp	r3, #0
    16aa:	d001      	beq.n	16b0 <TC3_Handler+0x1c>
			device->callback.pwm_period_cb(device);
    16ac:	0028      	movs	r0, r5
    16ae:	4798      	blx	r3
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    16b0:	7b63      	ldrb	r3, [r4, #13]
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    16b2:	079b      	lsls	r3, r3, #30
    16b4:	d506      	bpl.n	16c4 <TC3_Handler+0x30>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    16b6:	2302      	movs	r3, #2
    16b8:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_error_cb) {
    16ba:	686b      	ldr	r3, [r5, #4]
    16bc:	2b00      	cmp	r3, #0
    16be:	d001      	beq.n	16c4 <TC3_Handler+0x30>
			device->callback.pwm_error_cb(device);
    16c0:	0028      	movs	r0, r5
    16c2:	4798      	blx	r3
}
    16c4:	bd70      	pop	{r4, r5, r6, pc}
    16c6:	46c0      	nop			; (mov r8, r8)
    16c8:	200004d4 	.word	0x200004d4

000016cc <TC4_Handler>:
{
    16cc:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    16ce:	4b02      	ldr	r3, [pc, #8]	; (16d8 <TC4_Handler+0xc>)
    16d0:	6858      	ldr	r0, [r3, #4]
    16d2:	4b02      	ldr	r3, [pc, #8]	; (16dc <TC4_Handler+0x10>)
    16d4:	4798      	blx	r3
}
    16d6:	bd10      	pop	{r4, pc}
    16d8:	200004d4 	.word	0x200004d4
    16dc:	000012f1 	.word	0x000012f1

000016e0 <TC5_Handler>:
{
    16e0:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc5_dev);
    16e2:	4b02      	ldr	r3, [pc, #8]	; (16ec <TC5_Handler+0xc>)
    16e4:	6898      	ldr	r0, [r3, #8]
    16e6:	4b02      	ldr	r3, [pc, #8]	; (16f0 <TC5_Handler+0x10>)
    16e8:	4798      	blx	r3
}
    16ea:	bd10      	pop	{r4, pc}
    16ec:	200004d4 	.word	0x200004d4
    16f0:	000012f1 	.word	0x000012f1

000016f4 <TC7_Handler>:
{
    16f4:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc7_dev);
    16f6:	4b02      	ldr	r3, [pc, #8]	; (1700 <TC7_Handler+0xc>)
    16f8:	68d8      	ldr	r0, [r3, #12]
    16fa:	4b02      	ldr	r3, [pc, #8]	; (1704 <TC7_Handler+0x10>)
    16fc:	4798      	blx	r3
}
    16fe:	bd10      	pop	{r4, pc}
    1700:	200004d4 	.word	0x200004d4
    1704:	000012f1 	.word	0x000012f1

00001708 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1708:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    170c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    170e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1710:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1714:	4770      	bx	lr

00001716 <atomic_leave_critical>:
    1716:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    171a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    171c:	f383 8810 	msr	PRIMASK, r3
}
    1720:	4770      	bx	lr
	...

00001724 <_irq_set>:
  if ((int32_t)(IRQn) >= 0)
    1724:	b243      	sxtb	r3, r0
    1726:	2b00      	cmp	r3, #0
    1728:	db07      	blt.n	173a <_irq_set+0x16>
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    172a:	231f      	movs	r3, #31
    172c:	4018      	ands	r0, r3
    172e:	3b1e      	subs	r3, #30
    1730:	4083      	lsls	r3, r0
    1732:	2280      	movs	r2, #128	; 0x80
    1734:	0052      	lsls	r2, r2, #1
    1736:	4901      	ldr	r1, [pc, #4]	; (173c <_irq_set+0x18>)
    1738:	508b      	str	r3, [r1, r2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
    173a:	4770      	bx	lr
    173c:	e000e100 	.word	0xe000e100

00001740 <_ZL11RestartLedsPK10timer_task>:


LedHandler_Class		*ptrLedHandler;
uint32_t	tempTicks;
static void RestartLeds(const struct timer_task *const timer_task)
{
    1740:	b580      	push	{r7, lr}
    1742:	b082      	sub	sp, #8
    1744:	af00      	add	r7, sp, #0
    1746:	6078      	str	r0, [r7, #4]
	ptrLedHandler->restarted=true;
    1748:	4b04      	ldr	r3, [pc, #16]	; (175c <_ZL11RestartLedsPK10timer_task+0x1c>)
    174a:	681a      	ldr	r2, [r3, #0]
    174c:	2376      	movs	r3, #118	; 0x76
    174e:	33ff      	adds	r3, #255	; 0xff
    1750:	2101      	movs	r1, #1
    1752:	54d1      	strb	r1, [r2, r3]
}
    1754:	46c0      	nop			; (mov r8, r8)
    1756:	46bd      	mov	sp, r7
    1758:	b002      	add	sp, #8
    175a:	bd80      	pop	{r7, pc}
    175c:	200004e4 	.word	0x200004e4

00001760 <_ZL10BlinkTimerPK10timer_task>:


static void BlinkTimer(const struct timer_task *const timer_task)
{
    1760:	b580      	push	{r7, lr}
    1762:	b082      	sub	sp, #8
    1764:	af00      	add	r7, sp, #0
    1766:	6078      	str	r0, [r7, #4]
	ptrLedHandler->blinkOut=true;
    1768:	4b04      	ldr	r3, [pc, #16]	; (177c <_ZL10BlinkTimerPK10timer_task+0x1c>)
    176a:	681a      	ldr	r2, [r3, #0]
    176c:	237c      	movs	r3, #124	; 0x7c
    176e:	33ff      	adds	r3, #255	; 0xff
    1770:	2101      	movs	r1, #1
    1772:	54d1      	strb	r1, [r2, r3]
}
    1774:	46c0      	nop			; (mov r8, r8)
    1776:	46bd      	mov	sp, r7
    1778:	b002      	add	sp, #8
    177a:	bd80      	pop	{r7, pc}
    177c:	200004e4 	.word	0x200004e4

00001780 <_ZL12PowerOnTimerPK10timer_task>:

static void PowerOnTimer(const struct timer_task *const timer_task)
{
    1780:	b580      	push	{r7, lr}
    1782:	b082      	sub	sp, #8
    1784:	af00      	add	r7, sp, #0
    1786:	6078      	str	r0, [r7, #4]
	ptrLedHandler->deadTime=true;
    1788:	4b07      	ldr	r3, [pc, #28]	; (17a8 <_ZL12PowerOnTimerPK10timer_task+0x28>)
    178a:	681a      	ldr	r2, [r3, #0]
    178c:	2378      	movs	r3, #120	; 0x78
    178e:	33ff      	adds	r3, #255	; 0xff
    1790:	2101      	movs	r1, #1
    1792:	54d1      	strb	r1, [r2, r3]
	ptrLedHandler->timerFinish=true;
    1794:	4b04      	ldr	r3, [pc, #16]	; (17a8 <_ZL12PowerOnTimerPK10timer_task+0x28>)
    1796:	681a      	ldr	r2, [r3, #0]
    1798:	23be      	movs	r3, #190	; 0xbe
    179a:	005b      	lsls	r3, r3, #1
    179c:	2101      	movs	r1, #1
    179e:	54d1      	strb	r1, [r2, r3]
}
    17a0:	46c0      	nop			; (mov r8, r8)
    17a2:	46bd      	mov	sp, r7
    17a4:	b002      	add	sp, #8
    17a6:	bd80      	pop	{r7, pc}
    17a8:	200004e4 	.word	0x200004e4

000017ac <_ZL16PWMPeriodExpiredP11_pwm_device>:

static void PWMPeriodExpired(struct _pwm_device *device){
    17ac:	b580      	push	{r7, lr}
    17ae:	b082      	sub	sp, #8
    17b0:	af00      	add	r7, sp, #0
    17b2:	6078      	str	r0, [r7, #4]
	
	//ptrLedHandler->deadTime=false;


}
    17b4:	46c0      	nop			; (mov r8, r8)
    17b6:	46bd      	mov	sp, r7
    17b8:	b002      	add	sp, #8
    17ba:	bd80      	pop	{r7, pc}

000017bc <_ZL13PowerOffTimerPK10timer_task>:
static void PowerOffTimer(const struct timer_task *const timer_task)
{
    17bc:	b580      	push	{r7, lr}
    17be:	b082      	sub	sp, #8
    17c0:	af00      	add	r7, sp, #0
    17c2:	6078      	str	r0, [r7, #4]
	ptrLedHandler->deadTime=false;
    17c4:	4b07      	ldr	r3, [pc, #28]	; (17e4 <_ZL13PowerOffTimerPK10timer_task+0x28>)
    17c6:	681a      	ldr	r2, [r3, #0]
    17c8:	2378      	movs	r3, #120	; 0x78
    17ca:	33ff      	adds	r3, #255	; 0xff
    17cc:	2100      	movs	r1, #0
    17ce:	54d1      	strb	r1, [r2, r3]
	ptrLedHandler->timerFinish=true;
    17d0:	4b04      	ldr	r3, [pc, #16]	; (17e4 <_ZL13PowerOffTimerPK10timer_task+0x28>)
    17d2:	681a      	ldr	r2, [r3, #0]
    17d4:	23be      	movs	r3, #190	; 0xbe
    17d6:	005b      	lsls	r3, r3, #1
    17d8:	2101      	movs	r1, #1
    17da:	54d1      	strb	r1, [r2, r3]
}
    17dc:	46c0      	nop			; (mov r8, r8)
    17de:	46bd      	mov	sp, r7
    17e0:	b002      	add	sp, #8
    17e2:	bd80      	pop	{r7, pc}
    17e4:	200004e4 	.word	0x200004e4

000017e8 <_ZN16LedHandler_ClassC1Ev>:



// default constructor
LedHandler_Class::LedHandler_Class()
    17e8:	b580      	push	{r7, lr}
    17ea:	b082      	sub	sp, #8
    17ec:	af00      	add	r7, sp, #0
    17ee:	6078      	str	r0, [r7, #4]
    17f0:	687b      	ldr	r3, [r7, #4]
    17f2:	0018      	movs	r0, r3
    17f4:	4b10      	ldr	r3, [pc, #64]	; (1838 <_ZN16LedHandler_ClassC1Ev+0x50>)
    17f6:	4798      	blx	r3
{
	ready=false;
    17f8:	687a      	ldr	r2, [r7, #4]
    17fa:	23bd      	movs	r3, #189	; 0xbd
    17fc:	005b      	lsls	r3, r3, #1
    17fe:	2100      	movs	r1, #0
    1800:	54d1      	strb	r1, [r2, r3]
	modus=INITIAL_STATE;
    1802:	687a      	ldr	r2, [r7, #4]
    1804:	23c8      	movs	r3, #200	; 0xc8
    1806:	005b      	lsls	r3, r3, #1
    1808:	2100      	movs	r1, #0
    180a:	54d1      	strb	r1, [r2, r3]
	ptrLedHandler=this;
    180c:	4b0b      	ldr	r3, [pc, #44]	; (183c <_ZN16LedHandler_ClassC1Ev+0x54>)
    180e:	687a      	ldr	r2, [r7, #4]
    1810:	601a      	str	r2, [r3, #0]
	totalPins=kTOTALLEFTPINS+kTOTALRIGHTPINS;
    1812:	687b      	ldr	r3, [r7, #4]
    1814:	4a0a      	ldr	r2, [pc, #40]	; (1840 <_ZN16LedHandler_ClassC1Ev+0x58>)
    1816:	213a      	movs	r1, #58	; 0x3a
    1818:	5499      	strb	r1, [r3, r2]
	dutyCycle=200;
    181a:	687a      	ldr	r2, [r7, #4]
    181c:	23c0      	movs	r3, #192	; 0xc0
    181e:	005b      	lsls	r3, r3, #1
    1820:	21c8      	movs	r1, #200	; 0xc8
    1822:	50d1      	str	r1, [r2, r3]

	period=POWER_PERIOD;
    1824:	687a      	ldr	r2, [r7, #4]
    1826:	23a8      	movs	r3, #168	; 0xa8
    1828:	009b      	lsls	r3, r3, #2
    182a:	2132      	movs	r1, #50	; 0x32
    182c:	50d1      	str	r1, [r2, r3]
	
	} //LedDriverClass
    182e:	687b      	ldr	r3, [r7, #4]
    1830:	0018      	movs	r0, r3
    1832:	46bd      	mov	sp, r7
    1834:	b002      	add	sp, #8
    1836:	bd80      	pop	{r7, pc}
    1838:	000030a5 	.word	0x000030a5
    183c:	200004e4 	.word	0x200004e4
    1840:	00000289 	.word	0x00000289

00001844 <_ZN16LedHandler_ClassD1Ev>:

// default destructor
LedHandler_Class::~LedHandler_Class()
    1844:	b580      	push	{r7, lr}
    1846:	b082      	sub	sp, #8
    1848:	af00      	add	r7, sp, #0
    184a:	6078      	str	r0, [r7, #4]
    184c:	687b      	ldr	r3, [r7, #4]
    184e:	0018      	movs	r0, r3
    1850:	4b03      	ldr	r3, [pc, #12]	; (1860 <_ZN16LedHandler_ClassD1Ev+0x1c>)
    1852:	4798      	blx	r3
{
} //~LedDriverClass
    1854:	687b      	ldr	r3, [r7, #4]
    1856:	0018      	movs	r0, r3
    1858:	46bd      	mov	sp, r7
    185a:	b002      	add	sp, #8
    185c:	bd80      	pop	{r7, pc}
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	000030bf 	.word	0x000030bf

00001864 <_ZN16LedHandler_Class4InitEv>:

void	LedHandler_Class::Init(void){
    1864:	b580      	push	{r7, lr}
    1866:	b084      	sub	sp, #16
    1868:	af00      	add	r7, sp, #0
    186a:	6078      	str	r0, [r7, #4]
	InitMapping();
    186c:	687b      	ldr	r3, [r7, #4]
    186e:	0018      	movs	r0, r3
    1870:	4b50      	ldr	r3, [pc, #320]	; (19b4 <_ZN16LedHandler_Class4InitEv+0x150>)
    1872:	4798      	blx	r3
	for (int i=0;i<kTOTALLEFTPINS;i++)
    1874:	2300      	movs	r3, #0
    1876:	60fb      	str	r3, [r7, #12]
    1878:	68fb      	ldr	r3, [r7, #12]
    187a:	2b1c      	cmp	r3, #28
    187c:	dc1c      	bgt.n	18b8 <_ZN16LedHandler_Class4InitEv+0x54>
	{
		pins.allPins[i]=leftPins.pinsLeft[i];
    187e:	687a      	ldr	r2, [r7, #4]
    1880:	68fb      	ldr	r3, [r7, #12]
    1882:	18d3      	adds	r3, r2, r3
    1884:	331d      	adds	r3, #29
    1886:	7818      	ldrb	r0, [r3, #0]
    1888:	6879      	ldr	r1, [r7, #4]
    188a:	23dc      	movs	r3, #220	; 0xdc
    188c:	33ff      	adds	r3, #255	; 0xff
    188e:	68fa      	ldr	r2, [r7, #12]
    1890:	188a      	adds	r2, r1, r2
    1892:	18d3      	adds	r3, r2, r3
    1894:	1c02      	adds	r2, r0, #0
    1896:	701a      	strb	r2, [r3, #0]
		pins.allPorts[i]=leftPins.portsLeft[i];
    1898:	687a      	ldr	r2, [r7, #4]
    189a:	68fb      	ldr	r3, [r7, #12]
    189c:	18d3      	adds	r3, r2, r3
    189e:	7818      	ldrb	r0, [r3, #0]
    18a0:	6879      	ldr	r1, [r7, #4]
    18a2:	23a2      	movs	r3, #162	; 0xa2
    18a4:	33ff      	adds	r3, #255	; 0xff
    18a6:	68fa      	ldr	r2, [r7, #12]
    18a8:	188a      	adds	r2, r1, r2
    18aa:	18d3      	adds	r3, r2, r3
    18ac:	1c02      	adds	r2, r0, #0
    18ae:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<kTOTALLEFTPINS;i++)
    18b0:	68fb      	ldr	r3, [r7, #12]
    18b2:	3301      	adds	r3, #1
    18b4:	60fb      	str	r3, [r7, #12]
    18b6:	e7df      	b.n	1878 <_ZN16LedHandler_Class4InitEv+0x14>
	}
	for (int i=0;i<kTOTALRIGHTPINS;i++)
    18b8:	2300      	movs	r3, #0
    18ba:	60bb      	str	r3, [r7, #8]
    18bc:	68bb      	ldr	r3, [r7, #8]
    18be:	2b1c      	cmp	r3, #28
    18c0:	dc2b      	bgt.n	191a <_ZN16LedHandler_Class4InitEv+0xb6>
	{
		pins.allPins[totalPins-i-1]=rightPins.pinsRight[i];
    18c2:	687b      	ldr	r3, [r7, #4]
    18c4:	4a3c      	ldr	r2, [pc, #240]	; (19b8 <_ZN16LedHandler_Class4InitEv+0x154>)
    18c6:	5c9b      	ldrb	r3, [r3, r2]
    18c8:	001a      	movs	r2, r3
    18ca:	68bb      	ldr	r3, [r7, #8]
    18cc:	1ad3      	subs	r3, r2, r3
    18ce:	1e5a      	subs	r2, r3, #1
    18d0:	6879      	ldr	r1, [r7, #4]
    18d2:	2057      	movs	r0, #87	; 0x57
    18d4:	68bb      	ldr	r3, [r7, #8]
    18d6:	18cb      	adds	r3, r1, r3
    18d8:	181b      	adds	r3, r3, r0
    18da:	7818      	ldrb	r0, [r3, #0]
    18dc:	6879      	ldr	r1, [r7, #4]
    18de:	23dc      	movs	r3, #220	; 0xdc
    18e0:	33ff      	adds	r3, #255	; 0xff
    18e2:	188a      	adds	r2, r1, r2
    18e4:	18d3      	adds	r3, r2, r3
    18e6:	1c02      	adds	r2, r0, #0
    18e8:	701a      	strb	r2, [r3, #0]
		pins.allPorts[totalPins-i-1]=rightPins.portsRight[i];
    18ea:	687b      	ldr	r3, [r7, #4]
    18ec:	4a32      	ldr	r2, [pc, #200]	; (19b8 <_ZN16LedHandler_Class4InitEv+0x154>)
    18ee:	5c9b      	ldrb	r3, [r3, r2]
    18f0:	001a      	movs	r2, r3
    18f2:	68bb      	ldr	r3, [r7, #8]
    18f4:	1ad3      	subs	r3, r2, r3
    18f6:	1e5a      	subs	r2, r3, #1
    18f8:	6879      	ldr	r1, [r7, #4]
    18fa:	203a      	movs	r0, #58	; 0x3a
    18fc:	68bb      	ldr	r3, [r7, #8]
    18fe:	18cb      	adds	r3, r1, r3
    1900:	181b      	adds	r3, r3, r0
    1902:	7818      	ldrb	r0, [r3, #0]
    1904:	6879      	ldr	r1, [r7, #4]
    1906:	23a2      	movs	r3, #162	; 0xa2
    1908:	33ff      	adds	r3, #255	; 0xff
    190a:	188a      	adds	r2, r1, r2
    190c:	18d3      	adds	r3, r2, r3
    190e:	1c02      	adds	r2, r0, #0
    1910:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<kTOTALRIGHTPINS;i++)
    1912:	68bb      	ldr	r3, [r7, #8]
    1914:	3301      	adds	r3, #1
    1916:	60bb      	str	r3, [r7, #8]
    1918:	e7d0      	b.n	18bc <_ZN16LedHandler_Class4InitEv+0x58>
	}
	SetBothSidesPins(pins);
    191a:	687a      	ldr	r2, [r7, #4]
    191c:	687b      	ldr	r3, [r7, #4]
    191e:	33a2      	adds	r3, #162	; 0xa2
    1920:	33ff      	adds	r3, #255	; 0xff
    1922:	0019      	movs	r1, r3
    1924:	0010      	movs	r0, r2
    1926:	4b25      	ldr	r3, [pc, #148]	; (19bc <_ZN16LedHandler_Class4InitEv+0x158>)
    1928:	4798      	blx	r3
	deadTime=false;
    192a:	687a      	ldr	r2, [r7, #4]
    192c:	2378      	movs	r3, #120	; 0x78
    192e:	33ff      	adds	r3, #255	; 0xff
    1930:	2100      	movs	r1, #0
    1932:	54d1      	strb	r1, [r2, r3]
	stepTime=poweronSingleTime;
    1934:	687a      	ldr	r2, [r7, #4]
    1936:	23c6      	movs	r3, #198	; 0xc6
    1938:	005b      	lsls	r3, r3, #1
    193a:	58d1      	ldr	r1, [r2, r3]
    193c:	687a      	ldr	r2, [r7, #4]
    193e:	23c2      	movs	r3, #194	; 0xc2
    1940:	005b      	lsls	r3, r3, #1
    1942:	50d1      	str	r1, [r2, r3]
	ledTimer.Init();
    1944:	4b1e      	ldr	r3, [pc, #120]	; (19c0 <_ZN16LedHandler_Class4InitEv+0x15c>)
    1946:	0018      	movs	r0, r3
    1948:	4b1e      	ldr	r3, [pc, #120]	; (19c4 <_ZN16LedHandler_Class4InitEv+0x160>)
    194a:	4798      	blx	r3
	pwmTimer.Init();
    194c:	4b1e      	ldr	r3, [pc, #120]	; (19c8 <_ZN16LedHandler_Class4InitEv+0x164>)
    194e:	0018      	movs	r0, r3
    1950:	4b1c      	ldr	r3, [pc, #112]	; (19c4 <_ZN16LedHandler_Class4InitEv+0x160>)
    1952:	4798      	blx	r3
	DefineColors(state);
    1954:	687a      	ldr	r2, [r7, #4]
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	491c      	ldr	r1, [pc, #112]	; (19cc <_ZN16LedHandler_Class4InitEv+0x168>)
    195a:	468c      	mov	ip, r1
    195c:	4463      	add	r3, ip
    195e:	0019      	movs	r1, r3
    1960:	0010      	movs	r0, r2
    1962:	4b1b      	ldr	r3, [pc, #108]	; (19d0 <_ZN16LedHandler_Class4InitEv+0x16c>)
    1964:	4798      	blx	r3
	ready=true;
    1966:	687a      	ldr	r2, [r7, #4]
    1968:	23bd      	movs	r3, #189	; 0xbd
    196a:	005b      	lsls	r3, r3, #1
    196c:	2101      	movs	r1, #1
    196e:	54d1      	strb	r1, [r2, r3]
	pwm_set_parameters(&PWM_0,PWM_WAVE_PERIOD,dutyCycle);
    1970:	687a      	ldr	r2, [r7, #4]
    1972:	23c0      	movs	r3, #192	; 0xc0
    1974:	005b      	lsls	r3, r3, #1
    1976:	58d2      	ldr	r2, [r2, r3]
    1978:	4916      	ldr	r1, [pc, #88]	; (19d4 <_ZN16LedHandler_Class4InitEv+0x170>)
    197a:	4b17      	ldr	r3, [pc, #92]	; (19d8 <_ZN16LedHandler_Class4InitEv+0x174>)
    197c:	0018      	movs	r0, r3
    197e:	4b17      	ldr	r3, [pc, #92]	; (19dc <_ZN16LedHandler_Class4InitEv+0x178>)
    1980:	4798      	blx	r3
	pwm_register_callback(&PWM_0,PWM_PERIOD_CB, (pwm_cb_t)PWMPeriodExpired);
    1982:	4a17      	ldr	r2, [pc, #92]	; (19e0 <_ZN16LedHandler_Class4InitEv+0x17c>)
    1984:	4b14      	ldr	r3, [pc, #80]	; (19d8 <_ZN16LedHandler_Class4InitEv+0x174>)
    1986:	2100      	movs	r1, #0
    1988:	0018      	movs	r0, r3
    198a:	4b16      	ldr	r3, [pc, #88]	; (19e4 <_ZN16LedHandler_Class4InitEv+0x180>)
    198c:	4798      	blx	r3
	pwmTimer.stop();
    198e:	4b0e      	ldr	r3, [pc, #56]	; (19c8 <_ZN16LedHandler_Class4InitEv+0x164>)
    1990:	0018      	movs	r0, r3
    1992:	4b15      	ldr	r3, [pc, #84]	; (19e8 <_ZN16LedHandler_Class4InitEv+0x184>)
    1994:	4798      	blx	r3
	tapLimit=poweronSingleTime*(kTOTALLEFTPINS+kTOTALLEFTPINS);
    1996:	687a      	ldr	r2, [r7, #4]
    1998:	23c6      	movs	r3, #198	; 0xc6
    199a:	005b      	lsls	r3, r3, #1
    199c:	58d3      	ldr	r3, [r2, r3]
    199e:	223a      	movs	r2, #58	; 0x3a
    19a0:	435a      	muls	r2, r3
    19a2:	0011      	movs	r1, r2
    19a4:	687a      	ldr	r2, [r7, #4]
    19a6:	23ce      	movs	r3, #206	; 0xce
    19a8:	005b      	lsls	r3, r3, #1
    19aa:	50d1      	str	r1, [r2, r3]
	
}
    19ac:	46c0      	nop			; (mov r8, r8)
    19ae:	46bd      	mov	sp, r7
    19b0:	b004      	add	sp, #16
    19b2:	bd80      	pop	{r7, pc}
    19b4:	000030d1 	.word	0x000030d1
    19b8:	00000289 	.word	0x00000289
    19bc:	00003395 	.word	0x00003395
    19c0:	200007d0 	.word	0x200007d0
    19c4:	00003f39 	.word	0x00003f39
    19c8:	200007fc 	.word	0x200007fc
    19cc:	00000215 	.word	0x00000215
    19d0:	000032cd 	.word	0x000032cd
    19d4:	00002710 	.word	0x00002710
    19d8:	2000090c 	.word	0x2000090c
    19dc:	0000098d 	.word	0x0000098d
    19e0:	000017ad 	.word	0x000017ad
    19e4:	00000941 	.word	0x00000941
    19e8:	00003f51 	.word	0x00003f51

000019ec <_ZN16LedHandler_Class15RestartLedModusEv>:
		
		while(!restarted);
		//ledTimer.remove_task();
		RunOnMode();
}
void	LedHandler_Class::RestartLedModus(void){
    19ec:	b580      	push	{r7, lr}
    19ee:	b082      	sub	sp, #8
    19f0:	af00      	add	r7, sp, #0
    19f2:	6078      	str	r0, [r7, #4]
			ledTimer.stop();
    19f4:	4b15      	ldr	r3, [pc, #84]	; (1a4c <_ZN16LedHandler_Class15RestartLedModusEv+0x60>)
    19f6:	0018      	movs	r0, r3
    19f8:	4b15      	ldr	r3, [pc, #84]	; (1a50 <_ZN16LedHandler_Class15RestartLedModusEv+0x64>)
    19fa:	4798      	blx	r3
			restarted=false;
    19fc:	687a      	ldr	r2, [r7, #4]
    19fe:	2376      	movs	r3, #118	; 0x76
    1a00:	33ff      	adds	r3, #255	; 0xff
    1a02:	2100      	movs	r1, #0
    1a04:	54d1      	strb	r1, [r2, r3]
			ledTimer.Start_oneShot_task((FUNC_PTR)RestartLeds,poweronSingleTime*2);
    1a06:	687a      	ldr	r2, [r7, #4]
    1a08:	23c6      	movs	r3, #198	; 0xc6
    1a0a:	005b      	lsls	r3, r3, #1
    1a0c:	58d3      	ldr	r3, [r2, r3]
    1a0e:	005a      	lsls	r2, r3, #1
    1a10:	4910      	ldr	r1, [pc, #64]	; (1a54 <_ZN16LedHandler_Class15RestartLedModusEv+0x68>)
    1a12:	4b0e      	ldr	r3, [pc, #56]	; (1a4c <_ZN16LedHandler_Class15RestartLedModusEv+0x60>)
    1a14:	0018      	movs	r0, r3
    1a16:	4b10      	ldr	r3, [pc, #64]	; (1a58 <_ZN16LedHandler_Class15RestartLedModusEv+0x6c>)
    1a18:	4798      	blx	r3
			ClearAll();
    1a1a:	687b      	ldr	r3, [r7, #4]
    1a1c:	0018      	movs	r0, r3
    1a1e:	4b0f      	ldr	r3, [pc, #60]	; (1a5c <_ZN16LedHandler_Class15RestartLedModusEv+0x70>)
    1a20:	4798      	blx	r3
			nmi.pressedTimerStarted=false;
    1a22:	4b0f      	ldr	r3, [pc, #60]	; (1a60 <_ZN16LedHandler_Class15RestartLedModusEv+0x74>)
    1a24:	2200      	movs	r2, #0
    1a26:	705a      	strb	r2, [r3, #1]
			changeModeRequest=false;
    1a28:	687a      	ldr	r2, [r7, #4]
    1a2a:	23bc      	movs	r3, #188	; 0xbc
    1a2c:	005b      	lsls	r3, r3, #1
    1a2e:	2100      	movs	r1, #0
    1a30:	54d1      	strb	r1, [r2, r3]
			stepTime=poweronSingleTime;
    1a32:	687a      	ldr	r2, [r7, #4]
    1a34:	23c6      	movs	r3, #198	; 0xc6
    1a36:	005b      	lsls	r3, r3, #1
    1a38:	58d1      	ldr	r1, [r2, r3]
    1a3a:	687a      	ldr	r2, [r7, #4]
    1a3c:	23c2      	movs	r3, #194	; 0xc2
    1a3e:	005b      	lsls	r3, r3, #1
    1a40:	50d1      	str	r1, [r2, r3]
}
    1a42:	46c0      	nop			; (mov r8, r8)
    1a44:	46bd      	mov	sp, r7
    1a46:	b002      	add	sp, #8
    1a48:	bd80      	pop	{r7, pc}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	200007d0 	.word	0x200007d0
    1a50:	00003f51 	.word	0x00003f51
    1a54:	00001741 	.word	0x00001741
    1a58:	00003fe1 	.word	0x00003fe1
    1a5c:	000027d9 	.word	0x000027d9
    1a60:	20000790 	.word	0x20000790

00001a64 <_ZN16LedHandler_Class9GreenWaveEv>:
	}
		
	
}

void	LedHandler_Class::GreenWave(void){
    1a64:	b580      	push	{r7, lr}
    1a66:	b082      	sub	sp, #8
    1a68:	af00      	add	r7, sp, #0
    1a6a:	6078      	str	r0, [r7, #4]
	request=false;
    1a6c:	687a      	ldr	r2, [r7, #4]
    1a6e:	23c4      	movs	r3, #196	; 0xc4
    1a70:	005b      	lsls	r3, r3, #1
    1a72:	2100      	movs	r1, #0
    1a74:	54d1      	strb	r1, [r2, r3]
		do 
		{
			for ( k=0;k<totalPins;k++)
    1a76:	687a      	ldr	r2, [r7, #4]
    1a78:	23a5      	movs	r3, #165	; 0xa5
    1a7a:	009b      	lsls	r3, r3, #2
    1a7c:	2100      	movs	r1, #0
    1a7e:	50d1      	str	r1, [r2, r3]
    1a80:	687a      	ldr	r2, [r7, #4]
    1a82:	23a5      	movs	r3, #165	; 0xa5
    1a84:	009b      	lsls	r3, r3, #2
    1a86:	58d3      	ldr	r3, [r2, r3]
    1a88:	687a      	ldr	r2, [r7, #4]
    1a8a:	4923      	ldr	r1, [pc, #140]	; (1b18 <_ZN16LedHandler_Class9GreenWaveEv+0xb4>)
    1a8c:	5c52      	ldrb	r2, [r2, r1]
    1a8e:	4293      	cmp	r3, r2
    1a90:	da2e      	bge.n	1af0 <_ZN16LedHandler_Class9GreenWaveEv+0x8c>
			{
				if (IsGreen(k))
    1a92:	6878      	ldr	r0, [r7, #4]
    1a94:	687a      	ldr	r2, [r7, #4]
    1a96:	23a5      	movs	r3, #165	; 0xa5
    1a98:	009b      	lsls	r3, r3, #2
    1a9a:	58d3      	ldr	r3, [r2, r3]
    1a9c:	b2db      	uxtb	r3, r3
    1a9e:	0019      	movs	r1, r3
    1aa0:	4b1e      	ldr	r3, [pc, #120]	; (1b1c <_ZN16LedHandler_Class9GreenWaveEv+0xb8>)
    1aa2:	4798      	blx	r3
    1aa4:	1e03      	subs	r3, r0, #0
    1aa6:	d010      	beq.n	1aca <_ZN16LedHandler_Class9GreenWaveEv+0x66>
				{
					if (!PowerOnSingleLed(k))
    1aa8:	687a      	ldr	r2, [r7, #4]
    1aaa:	23a5      	movs	r3, #165	; 0xa5
    1aac:	009b      	lsls	r3, r3, #2
    1aae:	58d2      	ldr	r2, [r2, r3]
    1ab0:	687b      	ldr	r3, [r7, #4]
    1ab2:	0011      	movs	r1, r2
    1ab4:	0018      	movs	r0, r3
    1ab6:	4b1a      	ldr	r3, [pc, #104]	; (1b20 <_ZN16LedHandler_Class9GreenWaveEv+0xbc>)
    1ab8:	4798      	blx	r3
    1aba:	0003      	movs	r3, r0
    1abc:	001a      	movs	r2, r3
    1abe:	2301      	movs	r3, #1
    1ac0:	4053      	eors	r3, r2
    1ac2:	b2db      	uxtb	r3, r3
    1ac4:	2b00      	cmp	r3, #0
    1ac6:	d009      	beq.n	1adc <_ZN16LedHandler_Class9GreenWaveEv+0x78>
					{
						break;
    1ac8:	e012      	b.n	1af0 <_ZN16LedHandler_Class9GreenWaveEv+0x8c>
					}
					
				}
				else
				{
					PowerOffPin(k);
    1aca:	687a      	ldr	r2, [r7, #4]
    1acc:	23a5      	movs	r3, #165	; 0xa5
    1ace:	009b      	lsls	r3, r3, #2
    1ad0:	58d2      	ldr	r2, [r2, r3]
    1ad2:	687b      	ldr	r3, [r7, #4]
    1ad4:	0011      	movs	r1, r2
    1ad6:	0018      	movs	r0, r3
    1ad8:	4b12      	ldr	r3, [pc, #72]	; (1b24 <_ZN16LedHandler_Class9GreenWaveEv+0xc0>)
    1ada:	4798      	blx	r3
			for ( k=0;k<totalPins;k++)
    1adc:	687a      	ldr	r2, [r7, #4]
    1ade:	23a5      	movs	r3, #165	; 0xa5
    1ae0:	009b      	lsls	r3, r3, #2
    1ae2:	58d3      	ldr	r3, [r2, r3]
    1ae4:	1c59      	adds	r1, r3, #1
    1ae6:	687a      	ldr	r2, [r7, #4]
    1ae8:	23a5      	movs	r3, #165	; 0xa5
    1aea:	009b      	lsls	r3, r3, #2
    1aec:	50d1      	str	r1, [r2, r3]
    1aee:	e7c7      	b.n	1a80 <_ZN16LedHandler_Class9GreenWaveEv+0x1c>
				}
							
			}
		}while((!changeModeRequest));
    1af0:	687a      	ldr	r2, [r7, #4]
    1af2:	23bc      	movs	r3, #188	; 0xbc
    1af4:	005b      	lsls	r3, r3, #1
    1af6:	5cd3      	ldrb	r3, [r2, r3]
    1af8:	b2db      	uxtb	r3, r3
		do 
    1afa:	2201      	movs	r2, #1
    1afc:	4053      	eors	r3, r2
    1afe:	b2db      	uxtb	r3, r3
    1b00:	2b00      	cmp	r3, #0
    1b02:	d000      	beq.n	1b06 <_ZN16LedHandler_Class9GreenWaveEv+0xa2>
    1b04:	e7b7      	b.n	1a76 <_ZN16LedHandler_Class9GreenWaveEv+0x12>
	request=false;
    1b06:	687a      	ldr	r2, [r7, #4]
    1b08:	23c4      	movs	r3, #196	; 0xc4
    1b0a:	005b      	lsls	r3, r3, #1
    1b0c:	2100      	movs	r1, #0
    1b0e:	54d1      	strb	r1, [r2, r3]
	
}
    1b10:	46c0      	nop			; (mov r8, r8)
    1b12:	46bd      	mov	sp, r7
    1b14:	b002      	add	sp, #8
    1b16:	bd80      	pop	{r7, pc}
    1b18:	00000289 	.word	0x00000289
    1b1c:	000034b5 	.word	0x000034b5
    1b20:	00001d9d 	.word	0x00001d9d
    1b24:	00002741 	.word	0x00002741

00001b28 <_ZN16LedHandler_Class7RedWaveEv>:
void	LedHandler_Class::RedWave(void){
    1b28:	b580      	push	{r7, lr}
    1b2a:	b082      	sub	sp, #8
    1b2c:	af00      	add	r7, sp, #0
    1b2e:	6078      	str	r0, [r7, #4]
	request=false;
    1b30:	687a      	ldr	r2, [r7, #4]
    1b32:	23c4      	movs	r3, #196	; 0xc4
    1b34:	005b      	lsls	r3, r3, #1
    1b36:	2100      	movs	r1, #0
    1b38:	54d1      	strb	r1, [r2, r3]
	do
	{
		for ( k=1;k<totalPins;k++)
    1b3a:	687a      	ldr	r2, [r7, #4]
    1b3c:	23a5      	movs	r3, #165	; 0xa5
    1b3e:	009b      	lsls	r3, r3, #2
    1b40:	2101      	movs	r1, #1
    1b42:	50d1      	str	r1, [r2, r3]
    1b44:	687a      	ldr	r2, [r7, #4]
    1b46:	23a5      	movs	r3, #165	; 0xa5
    1b48:	009b      	lsls	r3, r3, #2
    1b4a:	58d3      	ldr	r3, [r2, r3]
    1b4c:	687a      	ldr	r2, [r7, #4]
    1b4e:	4923      	ldr	r1, [pc, #140]	; (1bdc <_ZN16LedHandler_Class7RedWaveEv+0xb4>)
    1b50:	5c52      	ldrb	r2, [r2, r1]
    1b52:	4293      	cmp	r3, r2
    1b54:	da2e      	bge.n	1bb4 <_ZN16LedHandler_Class7RedWaveEv+0x8c>
		{
			if (IsRed(k))
    1b56:	6878      	ldr	r0, [r7, #4]
    1b58:	687a      	ldr	r2, [r7, #4]
    1b5a:	23a5      	movs	r3, #165	; 0xa5
    1b5c:	009b      	lsls	r3, r3, #2
    1b5e:	58d3      	ldr	r3, [r2, r3]
    1b60:	b2db      	uxtb	r3, r3
    1b62:	0019      	movs	r1, r3
    1b64:	4b1e      	ldr	r3, [pc, #120]	; (1be0 <_ZN16LedHandler_Class7RedWaveEv+0xb8>)
    1b66:	4798      	blx	r3
    1b68:	1e03      	subs	r3, r0, #0
    1b6a:	d010      	beq.n	1b8e <_ZN16LedHandler_Class7RedWaveEv+0x66>
			{
				if (!PowerOnSingleLed(k))
    1b6c:	687a      	ldr	r2, [r7, #4]
    1b6e:	23a5      	movs	r3, #165	; 0xa5
    1b70:	009b      	lsls	r3, r3, #2
    1b72:	58d2      	ldr	r2, [r2, r3]
    1b74:	687b      	ldr	r3, [r7, #4]
    1b76:	0011      	movs	r1, r2
    1b78:	0018      	movs	r0, r3
    1b7a:	4b1a      	ldr	r3, [pc, #104]	; (1be4 <_ZN16LedHandler_Class7RedWaveEv+0xbc>)
    1b7c:	4798      	blx	r3
    1b7e:	0003      	movs	r3, r0
    1b80:	001a      	movs	r2, r3
    1b82:	2301      	movs	r3, #1
    1b84:	4053      	eors	r3, r2
    1b86:	b2db      	uxtb	r3, r3
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d009      	beq.n	1ba0 <_ZN16LedHandler_Class7RedWaveEv+0x78>
				{
					break;
    1b8c:	e012      	b.n	1bb4 <_ZN16LedHandler_Class7RedWaveEv+0x8c>
				}
				
			}
			else
			{
				PowerOffPin(k);
    1b8e:	687a      	ldr	r2, [r7, #4]
    1b90:	23a5      	movs	r3, #165	; 0xa5
    1b92:	009b      	lsls	r3, r3, #2
    1b94:	58d2      	ldr	r2, [r2, r3]
    1b96:	687b      	ldr	r3, [r7, #4]
    1b98:	0011      	movs	r1, r2
    1b9a:	0018      	movs	r0, r3
    1b9c:	4b12      	ldr	r3, [pc, #72]	; (1be8 <_ZN16LedHandler_Class7RedWaveEv+0xc0>)
    1b9e:	4798      	blx	r3
		for ( k=1;k<totalPins;k++)
    1ba0:	687a      	ldr	r2, [r7, #4]
    1ba2:	23a5      	movs	r3, #165	; 0xa5
    1ba4:	009b      	lsls	r3, r3, #2
    1ba6:	58d3      	ldr	r3, [r2, r3]
    1ba8:	1c59      	adds	r1, r3, #1
    1baa:	687a      	ldr	r2, [r7, #4]
    1bac:	23a5      	movs	r3, #165	; 0xa5
    1bae:	009b      	lsls	r3, r3, #2
    1bb0:	50d1      	str	r1, [r2, r3]
    1bb2:	e7c7      	b.n	1b44 <_ZN16LedHandler_Class7RedWaveEv+0x1c>
			}
			
		}
	}while((!changeModeRequest));
    1bb4:	687a      	ldr	r2, [r7, #4]
    1bb6:	23bc      	movs	r3, #188	; 0xbc
    1bb8:	005b      	lsls	r3, r3, #1
    1bba:	5cd3      	ldrb	r3, [r2, r3]
    1bbc:	b2db      	uxtb	r3, r3
	do
    1bbe:	2201      	movs	r2, #1
    1bc0:	4053      	eors	r3, r2
    1bc2:	b2db      	uxtb	r3, r3
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d000      	beq.n	1bca <_ZN16LedHandler_Class7RedWaveEv+0xa2>
    1bc8:	e7b7      	b.n	1b3a <_ZN16LedHandler_Class7RedWaveEv+0x12>
	request=false;
    1bca:	687a      	ldr	r2, [r7, #4]
    1bcc:	23c4      	movs	r3, #196	; 0xc4
    1bce:	005b      	lsls	r3, r3, #1
    1bd0:	2100      	movs	r1, #0
    1bd2:	54d1      	strb	r1, [r2, r3]
	
}
    1bd4:	46c0      	nop			; (mov r8, r8)
    1bd6:	46bd      	mov	sp, r7
    1bd8:	b002      	add	sp, #8
    1bda:	bd80      	pop	{r7, pc}
    1bdc:	00000289 	.word	0x00000289
    1be0:	000034e1 	.word	0x000034e1
    1be4:	00001d9d 	.word	0x00001d9d
    1be8:	00002741 	.word	0x00002741

00001bec <_ZN16LedHandler_Class8BlueWaveEv>:
void	LedHandler_Class::BlueWave(void){
    1bec:	b580      	push	{r7, lr}
    1bee:	b082      	sub	sp, #8
    1bf0:	af00      	add	r7, sp, #0
    1bf2:	6078      	str	r0, [r7, #4]
	request=false;
    1bf4:	687a      	ldr	r2, [r7, #4]
    1bf6:	23c4      	movs	r3, #196	; 0xc4
    1bf8:	005b      	lsls	r3, r3, #1
    1bfa:	2100      	movs	r1, #0
    1bfc:	54d1      	strb	r1, [r2, r3]
	do
	{
		for ( k=2;k<totalPins;k++)
    1bfe:	687a      	ldr	r2, [r7, #4]
    1c00:	23a5      	movs	r3, #165	; 0xa5
    1c02:	009b      	lsls	r3, r3, #2
    1c04:	2102      	movs	r1, #2
    1c06:	50d1      	str	r1, [r2, r3]
    1c08:	687a      	ldr	r2, [r7, #4]
    1c0a:	23a5      	movs	r3, #165	; 0xa5
    1c0c:	009b      	lsls	r3, r3, #2
    1c0e:	58d3      	ldr	r3, [r2, r3]
    1c10:	687a      	ldr	r2, [r7, #4]
    1c12:	4923      	ldr	r1, [pc, #140]	; (1ca0 <_ZN16LedHandler_Class8BlueWaveEv+0xb4>)
    1c14:	5c52      	ldrb	r2, [r2, r1]
    1c16:	4293      	cmp	r3, r2
    1c18:	da2e      	bge.n	1c78 <_ZN16LedHandler_Class8BlueWaveEv+0x8c>
		{
			if (IsBlue(k))
    1c1a:	6878      	ldr	r0, [r7, #4]
    1c1c:	687a      	ldr	r2, [r7, #4]
    1c1e:	23a5      	movs	r3, #165	; 0xa5
    1c20:	009b      	lsls	r3, r3, #2
    1c22:	58d3      	ldr	r3, [r2, r3]
    1c24:	b2db      	uxtb	r3, r3
    1c26:	0019      	movs	r1, r3
    1c28:	4b1e      	ldr	r3, [pc, #120]	; (1ca4 <_ZN16LedHandler_Class8BlueWaveEv+0xb8>)
    1c2a:	4798      	blx	r3
    1c2c:	1e03      	subs	r3, r0, #0
    1c2e:	d010      	beq.n	1c52 <_ZN16LedHandler_Class8BlueWaveEv+0x66>
			{
				if (!PowerOnSingleLed(k))
    1c30:	687a      	ldr	r2, [r7, #4]
    1c32:	23a5      	movs	r3, #165	; 0xa5
    1c34:	009b      	lsls	r3, r3, #2
    1c36:	58d2      	ldr	r2, [r2, r3]
    1c38:	687b      	ldr	r3, [r7, #4]
    1c3a:	0011      	movs	r1, r2
    1c3c:	0018      	movs	r0, r3
    1c3e:	4b1a      	ldr	r3, [pc, #104]	; (1ca8 <_ZN16LedHandler_Class8BlueWaveEv+0xbc>)
    1c40:	4798      	blx	r3
    1c42:	0003      	movs	r3, r0
    1c44:	001a      	movs	r2, r3
    1c46:	2301      	movs	r3, #1
    1c48:	4053      	eors	r3, r2
    1c4a:	b2db      	uxtb	r3, r3
    1c4c:	2b00      	cmp	r3, #0
    1c4e:	d009      	beq.n	1c64 <_ZN16LedHandler_Class8BlueWaveEv+0x78>
				{
					break;
    1c50:	e012      	b.n	1c78 <_ZN16LedHandler_Class8BlueWaveEv+0x8c>
				}
							
			}
			else
			{
				PowerOffPin(k);
    1c52:	687a      	ldr	r2, [r7, #4]
    1c54:	23a5      	movs	r3, #165	; 0xa5
    1c56:	009b      	lsls	r3, r3, #2
    1c58:	58d2      	ldr	r2, [r2, r3]
    1c5a:	687b      	ldr	r3, [r7, #4]
    1c5c:	0011      	movs	r1, r2
    1c5e:	0018      	movs	r0, r3
    1c60:	4b12      	ldr	r3, [pc, #72]	; (1cac <_ZN16LedHandler_Class8BlueWaveEv+0xc0>)
    1c62:	4798      	blx	r3
		for ( k=2;k<totalPins;k++)
    1c64:	687a      	ldr	r2, [r7, #4]
    1c66:	23a5      	movs	r3, #165	; 0xa5
    1c68:	009b      	lsls	r3, r3, #2
    1c6a:	58d3      	ldr	r3, [r2, r3]
    1c6c:	1c59      	adds	r1, r3, #1
    1c6e:	687a      	ldr	r2, [r7, #4]
    1c70:	23a5      	movs	r3, #165	; 0xa5
    1c72:	009b      	lsls	r3, r3, #2
    1c74:	50d1      	str	r1, [r2, r3]
    1c76:	e7c7      	b.n	1c08 <_ZN16LedHandler_Class8BlueWaveEv+0x1c>
			}
			
		}
	}while((!changeModeRequest));
    1c78:	687a      	ldr	r2, [r7, #4]
    1c7a:	23bc      	movs	r3, #188	; 0xbc
    1c7c:	005b      	lsls	r3, r3, #1
    1c7e:	5cd3      	ldrb	r3, [r2, r3]
    1c80:	b2db      	uxtb	r3, r3
	do
    1c82:	2201      	movs	r2, #1
    1c84:	4053      	eors	r3, r2
    1c86:	b2db      	uxtb	r3, r3
    1c88:	2b00      	cmp	r3, #0
    1c8a:	d000      	beq.n	1c8e <_ZN16LedHandler_Class8BlueWaveEv+0xa2>
    1c8c:	e7b7      	b.n	1bfe <_ZN16LedHandler_Class8BlueWaveEv+0x12>
	request=false;
    1c8e:	687a      	ldr	r2, [r7, #4]
    1c90:	23c4      	movs	r3, #196	; 0xc4
    1c92:	005b      	lsls	r3, r3, #1
    1c94:	2100      	movs	r1, #0
    1c96:	54d1      	strb	r1, [r2, r3]
	
}
    1c98:	46c0      	nop			; (mov r8, r8)
    1c9a:	46bd      	mov	sp, r7
    1c9c:	b002      	add	sp, #8
    1c9e:	bd80      	pop	{r7, pc}
    1ca0:	00000289 	.word	0x00000289
    1ca4:	0000350f 	.word	0x0000350f
    1ca8:	00001d9d 	.word	0x00001d9d
    1cac:	00002741 	.word	0x00002741

00001cb0 <_ZN16LedHandler_Class8LilaWaveEv>:
void	LedHandler_Class::LilaWave(void){
    1cb0:	b580      	push	{r7, lr}
    1cb2:	b082      	sub	sp, #8
    1cb4:	af00      	add	r7, sp, #0
    1cb6:	6078      	str	r0, [r7, #4]
	request=false;
    1cb8:	687a      	ldr	r2, [r7, #4]
    1cba:	23c4      	movs	r3, #196	; 0xc4
    1cbc:	005b      	lsls	r3, r3, #1
    1cbe:	2100      	movs	r1, #0
    1cc0:	54d1      	strb	r1, [r2, r3]
	onLila=true;
    1cc2:	687a      	ldr	r2, [r7, #4]
    1cc4:	238a      	movs	r3, #138	; 0x8a
    1cc6:	33ff      	adds	r3, #255	; 0xff
    1cc8:	2101      	movs	r1, #1
    1cca:	54d1      	strb	r1, [r2, r3]
	do
	{
		for ( k=2;k<totalPins;k++)
    1ccc:	687a      	ldr	r2, [r7, #4]
    1cce:	23a5      	movs	r3, #165	; 0xa5
    1cd0:	009b      	lsls	r3, r3, #2
    1cd2:	2102      	movs	r1, #2
    1cd4:	50d1      	str	r1, [r2, r3]
    1cd6:	687a      	ldr	r2, [r7, #4]
    1cd8:	23a5      	movs	r3, #165	; 0xa5
    1cda:	009b      	lsls	r3, r3, #2
    1cdc:	58d3      	ldr	r3, [r2, r3]
    1cde:	687a      	ldr	r2, [r7, #4]
    1ce0:	492a      	ldr	r1, [pc, #168]	; (1d8c <_ZN16LedHandler_Class8LilaWaveEv+0xdc>)
    1ce2:	5c52      	ldrb	r2, [r2, r1]
    1ce4:	4293      	cmp	r3, r2
    1ce6:	da38      	bge.n	1d5a <_ZN16LedHandler_Class8LilaWaveEv+0xaa>
		{
			if (IsBlue(k))
    1ce8:	6878      	ldr	r0, [r7, #4]
    1cea:	687a      	ldr	r2, [r7, #4]
    1cec:	23a5      	movs	r3, #165	; 0xa5
    1cee:	009b      	lsls	r3, r3, #2
    1cf0:	58d3      	ldr	r3, [r2, r3]
    1cf2:	b2db      	uxtb	r3, r3
    1cf4:	0019      	movs	r1, r3
    1cf6:	4b26      	ldr	r3, [pc, #152]	; (1d90 <_ZN16LedHandler_Class8LilaWaveEv+0xe0>)
    1cf8:	4798      	blx	r3
    1cfa:	1e03      	subs	r3, r0, #0
    1cfc:	d019      	beq.n	1d32 <_ZN16LedHandler_Class8LilaWaveEv+0x82>
			{
				if (!PowerOnSingleLed(k))
    1cfe:	687a      	ldr	r2, [r7, #4]
    1d00:	23a5      	movs	r3, #165	; 0xa5
    1d02:	009b      	lsls	r3, r3, #2
    1d04:	58d2      	ldr	r2, [r2, r3]
    1d06:	687b      	ldr	r3, [r7, #4]
    1d08:	0011      	movs	r1, r2
    1d0a:	0018      	movs	r0, r3
    1d0c:	4b21      	ldr	r3, [pc, #132]	; (1d94 <_ZN16LedHandler_Class8LilaWaveEv+0xe4>)
    1d0e:	4798      	blx	r3
    1d10:	0003      	movs	r3, r0
    1d12:	001a      	movs	r2, r3
    1d14:	2301      	movs	r3, #1
    1d16:	4053      	eors	r3, r2
    1d18:	b2db      	uxtb	r3, r3
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	d11c      	bne.n	1d58 <_ZN16LedHandler_Class8LilaWaveEv+0xa8>
				{
					break;
				}
				k++;
    1d1e:	687a      	ldr	r2, [r7, #4]
    1d20:	23a5      	movs	r3, #165	; 0xa5
    1d22:	009b      	lsls	r3, r3, #2
    1d24:	58d3      	ldr	r3, [r2, r3]
    1d26:	1c59      	adds	r1, r3, #1
    1d28:	687a      	ldr	r2, [r7, #4]
    1d2a:	23a5      	movs	r3, #165	; 0xa5
    1d2c:	009b      	lsls	r3, r3, #2
    1d2e:	50d1      	str	r1, [r2, r3]
    1d30:	e008      	b.n	1d44 <_ZN16LedHandler_Class8LilaWaveEv+0x94>
			}
			else
			{
				PowerOffPin(k);
    1d32:	687a      	ldr	r2, [r7, #4]
    1d34:	23a5      	movs	r3, #165	; 0xa5
    1d36:	009b      	lsls	r3, r3, #2
    1d38:	58d2      	ldr	r2, [r2, r3]
    1d3a:	687b      	ldr	r3, [r7, #4]
    1d3c:	0011      	movs	r1, r2
    1d3e:	0018      	movs	r0, r3
    1d40:	4b15      	ldr	r3, [pc, #84]	; (1d98 <_ZN16LedHandler_Class8LilaWaveEv+0xe8>)
    1d42:	4798      	blx	r3
		for ( k=2;k<totalPins;k++)
    1d44:	687a      	ldr	r2, [r7, #4]
    1d46:	23a5      	movs	r3, #165	; 0xa5
    1d48:	009b      	lsls	r3, r3, #2
    1d4a:	58d3      	ldr	r3, [r2, r3]
    1d4c:	1c59      	adds	r1, r3, #1
    1d4e:	687a      	ldr	r2, [r7, #4]
    1d50:	23a5      	movs	r3, #165	; 0xa5
    1d52:	009b      	lsls	r3, r3, #2
    1d54:	50d1      	str	r1, [r2, r3]
    1d56:	e7be      	b.n	1cd6 <_ZN16LedHandler_Class8LilaWaveEv+0x26>
					break;
    1d58:	46c0      	nop			; (mov r8, r8)
			}
		
			
		}
	}while((!changeModeRequest));
    1d5a:	687a      	ldr	r2, [r7, #4]
    1d5c:	23bc      	movs	r3, #188	; 0xbc
    1d5e:	005b      	lsls	r3, r3, #1
    1d60:	5cd3      	ldrb	r3, [r2, r3]
    1d62:	b2db      	uxtb	r3, r3
	do
    1d64:	2201      	movs	r2, #1
    1d66:	4053      	eors	r3, r2
    1d68:	b2db      	uxtb	r3, r3
    1d6a:	2b00      	cmp	r3, #0
    1d6c:	d000      	beq.n	1d70 <_ZN16LedHandler_Class8LilaWaveEv+0xc0>
    1d6e:	e7ad      	b.n	1ccc <_ZN16LedHandler_Class8LilaWaveEv+0x1c>
	request=false;
    1d70:	687a      	ldr	r2, [r7, #4]
    1d72:	23c4      	movs	r3, #196	; 0xc4
    1d74:	005b      	lsls	r3, r3, #1
    1d76:	2100      	movs	r1, #0
    1d78:	54d1      	strb	r1, [r2, r3]
	onLila=false;
    1d7a:	687a      	ldr	r2, [r7, #4]
    1d7c:	238a      	movs	r3, #138	; 0x8a
    1d7e:	33ff      	adds	r3, #255	; 0xff
    1d80:	2100      	movs	r1, #0
    1d82:	54d1      	strb	r1, [r2, r3]
	
}
    1d84:	46c0      	nop			; (mov r8, r8)
    1d86:	46bd      	mov	sp, r7
    1d88:	b002      	add	sp, #8
    1d8a:	bd80      	pop	{r7, pc}
    1d8c:	00000289 	.word	0x00000289
    1d90:	0000350f 	.word	0x0000350f
    1d94:	00001d9d 	.word	0x00001d9d
    1d98:	00002741 	.word	0x00002741

00001d9c <_ZN16LedHandler_Class16PowerOnSingleLedEi>:
	}while((!changeModeRequest));
	request=false;
	onWhite=false;
	
}
bool	LedHandler_Class::PowerOnSingleLed(int pn){
    1d9c:	b590      	push	{r4, r7, lr}
    1d9e:	b083      	sub	sp, #12
    1da0:	af00      	add	r7, sp, #0
    1da2:	6078      	str	r0, [r7, #4]
    1da4:	6039      	str	r1, [r7, #0]
	keepGoing=true;
    1da6:	687a      	ldr	r2, [r7, #4]
    1da8:	23d0      	movs	r3, #208	; 0xd0
    1daa:	005b      	lsls	r3, r3, #1
    1dac:	2101      	movs	r1, #1
    1dae:	54d1      	strb	r1, [r2, r3]
	if (onLila){
    1db0:	687a      	ldr	r2, [r7, #4]
    1db2:	238a      	movs	r3, #138	; 0x8a
    1db4:	33ff      	adds	r3, #255	; 0xff
    1db6:	5cd3      	ldrb	r3, [r2, r3]
    1db8:	2b00      	cmp	r3, #0
    1dba:	d100      	bne.n	1dbe <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x22>
    1dbc:	e09d      	b.n	1efa <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x15e>
		StartBlinker(1);
    1dbe:	687b      	ldr	r3, [r7, #4]
    1dc0:	2101      	movs	r1, #1
    1dc2:	0018      	movs	r0, r3
    1dc4:	4bcc      	ldr	r3, [pc, #816]	; (20f8 <STACK_SIZE+0xf8>)
    1dc6:	4798      	blx	r3
		PowerOnPin(pn);
    1dc8:	683a      	ldr	r2, [r7, #0]
    1dca:	687b      	ldr	r3, [r7, #4]
    1dcc:	0011      	movs	r1, r2
    1dce:	0018      	movs	r0, r3
    1dd0:	4bca      	ldr	r3, [pc, #808]	; (20fc <STACK_SIZE+0xfc>)
    1dd2:	4798      	blx	r3
		if (pn<kTOTALLEFTPINS)
    1dd4:	683b      	ldr	r3, [r7, #0]
    1dd6:	2b1c      	cmp	r3, #28
    1dd8:	dc1d      	bgt.n	1e16 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x7a>
		{
			SetPin(pins.allPorts[pn+2],pins.allPins[pn+2]);
    1dda:	6878      	ldr	r0, [r7, #4]
    1ddc:	683b      	ldr	r3, [r7, #0]
    1dde:	1c9a      	adds	r2, r3, #2
    1de0:	6879      	ldr	r1, [r7, #4]
    1de2:	23a2      	movs	r3, #162	; 0xa2
    1de4:	33ff      	adds	r3, #255	; 0xff
    1de6:	188a      	adds	r2, r1, r2
    1de8:	18d3      	adds	r3, r2, r3
    1dea:	781c      	ldrb	r4, [r3, #0]
    1dec:	683b      	ldr	r3, [r7, #0]
    1dee:	1c9a      	adds	r2, r3, #2
    1df0:	6879      	ldr	r1, [r7, #4]
    1df2:	23dc      	movs	r3, #220	; 0xdc
    1df4:	33ff      	adds	r3, #255	; 0xff
    1df6:	188a      	adds	r2, r1, r2
    1df8:	18d3      	adds	r3, r2, r3
    1dfa:	781b      	ldrb	r3, [r3, #0]
    1dfc:	001a      	movs	r2, r3
    1dfe:	0021      	movs	r1, r4
    1e00:	4bbf      	ldr	r3, [pc, #764]	; (2100 <STACK_SIZE+0x100>)
    1e02:	4798      	blx	r3
			state.status[pn+2]=1;
    1e04:	683b      	ldr	r3, [r7, #0]
    1e06:	3302      	adds	r3, #2
    1e08:	687a      	ldr	r2, [r7, #4]
    1e0a:	49be      	ldr	r1, [pc, #760]	; (2104 <STACK_SIZE+0x104>)
    1e0c:	18d3      	adds	r3, r2, r3
    1e0e:	185b      	adds	r3, r3, r1
    1e10:	2201      	movs	r2, #1
    1e12:	701a      	strb	r2, [r3, #0]
    1e14:	e01c      	b.n	1e50 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0xb4>
		}
		else
		{
			SetPin(pins.allPorts[pn-2],pins.allPins[pn-2]);
    1e16:	6878      	ldr	r0, [r7, #4]
    1e18:	683b      	ldr	r3, [r7, #0]
    1e1a:	1e9a      	subs	r2, r3, #2
    1e1c:	6879      	ldr	r1, [r7, #4]
    1e1e:	23a2      	movs	r3, #162	; 0xa2
    1e20:	33ff      	adds	r3, #255	; 0xff
    1e22:	188a      	adds	r2, r1, r2
    1e24:	18d3      	adds	r3, r2, r3
    1e26:	781c      	ldrb	r4, [r3, #0]
    1e28:	683b      	ldr	r3, [r7, #0]
    1e2a:	1e9a      	subs	r2, r3, #2
    1e2c:	6879      	ldr	r1, [r7, #4]
    1e2e:	23dc      	movs	r3, #220	; 0xdc
    1e30:	33ff      	adds	r3, #255	; 0xff
    1e32:	188a      	adds	r2, r1, r2
    1e34:	18d3      	adds	r3, r2, r3
    1e36:	781b      	ldrb	r3, [r3, #0]
    1e38:	001a      	movs	r2, r3
    1e3a:	0021      	movs	r1, r4
    1e3c:	4bb0      	ldr	r3, [pc, #704]	; (2100 <STACK_SIZE+0x100>)
    1e3e:	4798      	blx	r3
			state.status[pn-2]=1;
    1e40:	683b      	ldr	r3, [r7, #0]
    1e42:	3b02      	subs	r3, #2
    1e44:	687a      	ldr	r2, [r7, #4]
    1e46:	49af      	ldr	r1, [pc, #700]	; (2104 <STACK_SIZE+0x104>)
    1e48:	18d3      	adds	r3, r2, r3
    1e4a:	185b      	adds	r3, r3, r1
    1e4c:	2201      	movs	r2, #1
    1e4e:	701a      	strb	r2, [r3, #0]
		}
		
		while((!blinkOut)){
    1e50:	687a      	ldr	r2, [r7, #4]
    1e52:	237c      	movs	r3, #124	; 0x7c
    1e54:	33ff      	adds	r3, #255	; 0xff
    1e56:	5cd3      	ldrb	r3, [r2, r3]
    1e58:	b2db      	uxtb	r3, r3
    1e5a:	2201      	movs	r2, #1
    1e5c:	4053      	eors	r3, r2
    1e5e:	b2db      	uxtb	r3, r3
    1e60:	2b00      	cmp	r3, #0
    1e62:	d000      	beq.n	1e66 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0xca>
    1e64:	e7f4      	b.n	1e50 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0xb4>
			//Dimmen(0);
		}
		timerFinish=true;
    1e66:	687a      	ldr	r2, [r7, #4]
    1e68:	23be      	movs	r3, #190	; 0xbe
    1e6a:	005b      	lsls	r3, r3, #1
    1e6c:	2101      	movs	r1, #1
    1e6e:	54d1      	strb	r1, [r2, r3]
		PowerOffPin(pn);
    1e70:	683a      	ldr	r2, [r7, #0]
    1e72:	687b      	ldr	r3, [r7, #4]
    1e74:	0011      	movs	r1, r2
    1e76:	0018      	movs	r0, r3
    1e78:	4ba3      	ldr	r3, [pc, #652]	; (2108 <STACK_SIZE+0x108>)
    1e7a:	4798      	blx	r3
		if (pn<kTOTALLEFTPINS)
    1e7c:	683b      	ldr	r3, [r7, #0]
    1e7e:	2b1c      	cmp	r3, #28
    1e80:	dc1d      	bgt.n	1ebe <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x122>
		{
			ClearPin(pins.allPorts[pn+2],pins.allPins[pn+2]);
    1e82:	6878      	ldr	r0, [r7, #4]
    1e84:	683b      	ldr	r3, [r7, #0]
    1e86:	1c9a      	adds	r2, r3, #2
    1e88:	6879      	ldr	r1, [r7, #4]
    1e8a:	23a2      	movs	r3, #162	; 0xa2
    1e8c:	33ff      	adds	r3, #255	; 0xff
    1e8e:	188a      	adds	r2, r1, r2
    1e90:	18d3      	adds	r3, r2, r3
    1e92:	781c      	ldrb	r4, [r3, #0]
    1e94:	683b      	ldr	r3, [r7, #0]
    1e96:	1c9a      	adds	r2, r3, #2
    1e98:	6879      	ldr	r1, [r7, #4]
    1e9a:	23dc      	movs	r3, #220	; 0xdc
    1e9c:	33ff      	adds	r3, #255	; 0xff
    1e9e:	188a      	adds	r2, r1, r2
    1ea0:	18d3      	adds	r3, r2, r3
    1ea2:	781b      	ldrb	r3, [r3, #0]
    1ea4:	001a      	movs	r2, r3
    1ea6:	0021      	movs	r1, r4
    1ea8:	4b98      	ldr	r3, [pc, #608]	; (210c <STACK_SIZE+0x10c>)
    1eaa:	4798      	blx	r3
			state.status[pn+2]=0;
    1eac:	683b      	ldr	r3, [r7, #0]
    1eae:	3302      	adds	r3, #2
    1eb0:	687a      	ldr	r2, [r7, #4]
    1eb2:	4994      	ldr	r1, [pc, #592]	; (2104 <STACK_SIZE+0x104>)
    1eb4:	18d3      	adds	r3, r2, r3
    1eb6:	185b      	adds	r3, r3, r1
    1eb8:	2200      	movs	r2, #0
    1eba:	701a      	strb	r2, [r3, #0]
    1ebc:	e21b      	b.n	22f6 <STACK_SIZE+0x2f6>
		}
		else
		{
			ClearPin(pins.allPorts[pn-2],pins.allPins[pn-2]);
    1ebe:	6878      	ldr	r0, [r7, #4]
    1ec0:	683b      	ldr	r3, [r7, #0]
    1ec2:	1e9a      	subs	r2, r3, #2
    1ec4:	6879      	ldr	r1, [r7, #4]
    1ec6:	23a2      	movs	r3, #162	; 0xa2
    1ec8:	33ff      	adds	r3, #255	; 0xff
    1eca:	188a      	adds	r2, r1, r2
    1ecc:	18d3      	adds	r3, r2, r3
    1ece:	781c      	ldrb	r4, [r3, #0]
    1ed0:	683b      	ldr	r3, [r7, #0]
    1ed2:	1e9a      	subs	r2, r3, #2
    1ed4:	6879      	ldr	r1, [r7, #4]
    1ed6:	23dc      	movs	r3, #220	; 0xdc
    1ed8:	33ff      	adds	r3, #255	; 0xff
    1eda:	188a      	adds	r2, r1, r2
    1edc:	18d3      	adds	r3, r2, r3
    1ede:	781b      	ldrb	r3, [r3, #0]
    1ee0:	001a      	movs	r2, r3
    1ee2:	0021      	movs	r1, r4
    1ee4:	4b89      	ldr	r3, [pc, #548]	; (210c <STACK_SIZE+0x10c>)
    1ee6:	4798      	blx	r3
			state.status[pn-2]=0;
    1ee8:	683b      	ldr	r3, [r7, #0]
    1eea:	3b02      	subs	r3, #2
    1eec:	687a      	ldr	r2, [r7, #4]
    1eee:	4985      	ldr	r1, [pc, #532]	; (2104 <STACK_SIZE+0x104>)
    1ef0:	18d3      	adds	r3, r2, r3
    1ef2:	185b      	adds	r3, r3, r1
    1ef4:	2200      	movs	r2, #0
    1ef6:	701a      	strb	r2, [r3, #0]
    1ef8:	e1fd      	b.n	22f6 <STACK_SIZE+0x2f6>
		}
						
	}else{
		if (onMagenta)
    1efa:	687a      	ldr	r2, [r7, #4]
    1efc:	23c5      	movs	r3, #197	; 0xc5
    1efe:	005b      	lsls	r3, r3, #1
    1f00:	5cd3      	ldrb	r3, [r2, r3]
    1f02:	2b00      	cmp	r3, #0
    1f04:	d100      	bne.n	1f08 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x16c>
    1f06:	e0a7      	b.n	2058 <STACK_SIZE+0x58>
		{
				StartBlinker(1);
    1f08:	687b      	ldr	r3, [r7, #4]
    1f0a:	2101      	movs	r1, #1
    1f0c:	0018      	movs	r0, r3
    1f0e:	4b7a      	ldr	r3, [pc, #488]	; (20f8 <STACK_SIZE+0xf8>)
    1f10:	4798      	blx	r3
				PowerOnPin(pn);
    1f12:	683a      	ldr	r2, [r7, #0]
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	0011      	movs	r1, r2
    1f18:	0018      	movs	r0, r3
    1f1a:	4b78      	ldr	r3, [pc, #480]	; (20fc <STACK_SIZE+0xfc>)
    1f1c:	4798      	blx	r3
				if (pn<kTOTALLEFTPINS)
    1f1e:	683b      	ldr	r3, [r7, #0]
    1f20:	2b1c      	cmp	r3, #28
    1f22:	dc1d      	bgt.n	1f60 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x1c4>
				{
						SetPin(pins.allPorts[pn-1],pins.allPins[pn-1]);
    1f24:	6878      	ldr	r0, [r7, #4]
    1f26:	683b      	ldr	r3, [r7, #0]
    1f28:	1e5a      	subs	r2, r3, #1
    1f2a:	6879      	ldr	r1, [r7, #4]
    1f2c:	23a2      	movs	r3, #162	; 0xa2
    1f2e:	33ff      	adds	r3, #255	; 0xff
    1f30:	188a      	adds	r2, r1, r2
    1f32:	18d3      	adds	r3, r2, r3
    1f34:	781c      	ldrb	r4, [r3, #0]
    1f36:	683b      	ldr	r3, [r7, #0]
    1f38:	1e5a      	subs	r2, r3, #1
    1f3a:	6879      	ldr	r1, [r7, #4]
    1f3c:	23dc      	movs	r3, #220	; 0xdc
    1f3e:	33ff      	adds	r3, #255	; 0xff
    1f40:	188a      	adds	r2, r1, r2
    1f42:	18d3      	adds	r3, r2, r3
    1f44:	781b      	ldrb	r3, [r3, #0]
    1f46:	001a      	movs	r2, r3
    1f48:	0021      	movs	r1, r4
    1f4a:	4b6d      	ldr	r3, [pc, #436]	; (2100 <STACK_SIZE+0x100>)
    1f4c:	4798      	blx	r3
						state.status[pn-1]=1;
    1f4e:	683b      	ldr	r3, [r7, #0]
    1f50:	3b01      	subs	r3, #1
    1f52:	687a      	ldr	r2, [r7, #4]
    1f54:	496b      	ldr	r1, [pc, #428]	; (2104 <STACK_SIZE+0x104>)
    1f56:	18d3      	adds	r3, r2, r3
    1f58:	185b      	adds	r3, r3, r1
    1f5a:	2201      	movs	r2, #1
    1f5c:	701a      	strb	r2, [r3, #0]
    1f5e:	e023      	b.n	1fa8 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x20c>
				} 
				else
				{
					if (pn+1<totalPins)
    1f60:	683b      	ldr	r3, [r7, #0]
    1f62:	3301      	adds	r3, #1
    1f64:	687a      	ldr	r2, [r7, #4]
    1f66:	496a      	ldr	r1, [pc, #424]	; (2110 <STACK_SIZE+0x110>)
    1f68:	5c52      	ldrb	r2, [r2, r1]
    1f6a:	4293      	cmp	r3, r2
    1f6c:	da1c      	bge.n	1fa8 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x20c>
					{
						SetPin(pins.allPorts[pn+1],pins.allPins[pn+1]);
    1f6e:	6878      	ldr	r0, [r7, #4]
    1f70:	683b      	ldr	r3, [r7, #0]
    1f72:	1c5a      	adds	r2, r3, #1
    1f74:	6879      	ldr	r1, [r7, #4]
    1f76:	23a2      	movs	r3, #162	; 0xa2
    1f78:	33ff      	adds	r3, #255	; 0xff
    1f7a:	188a      	adds	r2, r1, r2
    1f7c:	18d3      	adds	r3, r2, r3
    1f7e:	781c      	ldrb	r4, [r3, #0]
    1f80:	683b      	ldr	r3, [r7, #0]
    1f82:	1c5a      	adds	r2, r3, #1
    1f84:	6879      	ldr	r1, [r7, #4]
    1f86:	23dc      	movs	r3, #220	; 0xdc
    1f88:	33ff      	adds	r3, #255	; 0xff
    1f8a:	188a      	adds	r2, r1, r2
    1f8c:	18d3      	adds	r3, r2, r3
    1f8e:	781b      	ldrb	r3, [r3, #0]
    1f90:	001a      	movs	r2, r3
    1f92:	0021      	movs	r1, r4
    1f94:	4b5a      	ldr	r3, [pc, #360]	; (2100 <STACK_SIZE+0x100>)
    1f96:	4798      	blx	r3
						state.status[pn+1]=1;
    1f98:	683b      	ldr	r3, [r7, #0]
    1f9a:	3301      	adds	r3, #1
    1f9c:	687a      	ldr	r2, [r7, #4]
    1f9e:	4959      	ldr	r1, [pc, #356]	; (2104 <STACK_SIZE+0x104>)
    1fa0:	18d3      	adds	r3, r2, r3
    1fa2:	185b      	adds	r3, r3, r1
    1fa4:	2201      	movs	r2, #1
    1fa6:	701a      	strb	r2, [r3, #0]
					}
					
				}
				while((!blinkOut)){
    1fa8:	687a      	ldr	r2, [r7, #4]
    1faa:	237c      	movs	r3, #124	; 0x7c
    1fac:	33ff      	adds	r3, #255	; 0xff
    1fae:	5cd3      	ldrb	r3, [r2, r3]
    1fb0:	b2db      	uxtb	r3, r3
    1fb2:	2201      	movs	r2, #1
    1fb4:	4053      	eors	r3, r2
    1fb6:	b2db      	uxtb	r3, r3
    1fb8:	2b00      	cmp	r3, #0
    1fba:	d000      	beq.n	1fbe <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x222>
    1fbc:	e7f4      	b.n	1fa8 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x20c>
					//Dimmen(0);
				}
				PowerOffPin(pn);
    1fbe:	683a      	ldr	r2, [r7, #0]
    1fc0:	687b      	ldr	r3, [r7, #4]
    1fc2:	0011      	movs	r1, r2
    1fc4:	0018      	movs	r0, r3
    1fc6:	4b50      	ldr	r3, [pc, #320]	; (2108 <STACK_SIZE+0x108>)
    1fc8:	4798      	blx	r3
				if (pn<kTOTALLEFTPINS)
    1fca:	683b      	ldr	r3, [r7, #0]
    1fcc:	2b1c      	cmp	r3, #28
    1fce:	dc1d      	bgt.n	200c <STACK_SIZE+0xc>
				{
					ClearPin(pins.allPorts[pn-1],pins.allPins[pn-1]);
    1fd0:	6878      	ldr	r0, [r7, #4]
    1fd2:	683b      	ldr	r3, [r7, #0]
    1fd4:	1e5a      	subs	r2, r3, #1
    1fd6:	6879      	ldr	r1, [r7, #4]
    1fd8:	23a2      	movs	r3, #162	; 0xa2
    1fda:	33ff      	adds	r3, #255	; 0xff
    1fdc:	188a      	adds	r2, r1, r2
    1fde:	18d3      	adds	r3, r2, r3
    1fe0:	781c      	ldrb	r4, [r3, #0]
    1fe2:	683b      	ldr	r3, [r7, #0]
    1fe4:	1e5a      	subs	r2, r3, #1
    1fe6:	6879      	ldr	r1, [r7, #4]
    1fe8:	23dc      	movs	r3, #220	; 0xdc
    1fea:	33ff      	adds	r3, #255	; 0xff
    1fec:	188a      	adds	r2, r1, r2
    1fee:	18d3      	adds	r3, r2, r3
    1ff0:	781b      	ldrb	r3, [r3, #0]
    1ff2:	001a      	movs	r2, r3
    1ff4:	0021      	movs	r1, r4
    1ff6:	4b45      	ldr	r3, [pc, #276]	; (210c <STACK_SIZE+0x10c>)
    1ff8:	4798      	blx	r3
					state.status[pn-1]=0;
    1ffa:	683b      	ldr	r3, [r7, #0]
    1ffc:	3b01      	subs	r3, #1
    1ffe:	687a      	ldr	r2, [r7, #4]
    2000:	4940      	ldr	r1, [pc, #256]	; (2104 <STACK_SIZE+0x104>)
    2002:	18d3      	adds	r3, r2, r3
    2004:	185b      	adds	r3, r3, r1
    2006:	2200      	movs	r2, #0
    2008:	701a      	strb	r2, [r3, #0]
    200a:	e174      	b.n	22f6 <STACK_SIZE+0x2f6>
				}
				else
				{
					if (pn+1<totalPins)
    200c:	683b      	ldr	r3, [r7, #0]
    200e:	3301      	adds	r3, #1
    2010:	687a      	ldr	r2, [r7, #4]
    2012:	493f      	ldr	r1, [pc, #252]	; (2110 <STACK_SIZE+0x110>)
    2014:	5c52      	ldrb	r2, [r2, r1]
    2016:	4293      	cmp	r3, r2
    2018:	db00      	blt.n	201c <STACK_SIZE+0x1c>
    201a:	e16c      	b.n	22f6 <STACK_SIZE+0x2f6>
					{
						ClearPin(pins.allPorts[pn+1],pins.allPins[pn+1]);
    201c:	6878      	ldr	r0, [r7, #4]
    201e:	683b      	ldr	r3, [r7, #0]
    2020:	1c5a      	adds	r2, r3, #1
    2022:	6879      	ldr	r1, [r7, #4]
    2024:	23a2      	movs	r3, #162	; 0xa2
    2026:	33ff      	adds	r3, #255	; 0xff
    2028:	188a      	adds	r2, r1, r2
    202a:	18d3      	adds	r3, r2, r3
    202c:	781c      	ldrb	r4, [r3, #0]
    202e:	683b      	ldr	r3, [r7, #0]
    2030:	1c5a      	adds	r2, r3, #1
    2032:	6879      	ldr	r1, [r7, #4]
    2034:	23dc      	movs	r3, #220	; 0xdc
    2036:	33ff      	adds	r3, #255	; 0xff
    2038:	188a      	adds	r2, r1, r2
    203a:	18d3      	adds	r3, r2, r3
    203c:	781b      	ldrb	r3, [r3, #0]
    203e:	001a      	movs	r2, r3
    2040:	0021      	movs	r1, r4
    2042:	4b32      	ldr	r3, [pc, #200]	; (210c <STACK_SIZE+0x10c>)
    2044:	4798      	blx	r3
						state.status[pn+1]=0;
    2046:	683b      	ldr	r3, [r7, #0]
    2048:	3301      	adds	r3, #1
    204a:	687a      	ldr	r2, [r7, #4]
    204c:	492d      	ldr	r1, [pc, #180]	; (2104 <STACK_SIZE+0x104>)
    204e:	18d3      	adds	r3, r2, r3
    2050:	185b      	adds	r3, r3, r1
    2052:	2200      	movs	r2, #0
    2054:	701a      	strb	r2, [r3, #0]
    2056:	e14e      	b.n	22f6 <STACK_SIZE+0x2f6>
				}
		
		} 
		else
		{
			if (onWhite)
    2058:	687a      	ldr	r2, [r7, #4]
    205a:	238c      	movs	r3, #140	; 0x8c
    205c:	33ff      	adds	r3, #255	; 0xff
    205e:	5cd3      	ldrb	r3, [r2, r3]
    2060:	2b00      	cmp	r3, #0
    2062:	d100      	bne.n	2066 <STACK_SIZE+0x66>
    2064:	e11a      	b.n	229c <STACK_SIZE+0x29c>
			{
				StartBlinker(1);
    2066:	687b      	ldr	r3, [r7, #4]
    2068:	2101      	movs	r1, #1
    206a:	0018      	movs	r0, r3
    206c:	4b22      	ldr	r3, [pc, #136]	; (20f8 <STACK_SIZE+0xf8>)
    206e:	4798      	blx	r3
				PowerOnPin(pn);
    2070:	683a      	ldr	r2, [r7, #0]
    2072:	687b      	ldr	r3, [r7, #4]
    2074:	0011      	movs	r1, r2
    2076:	0018      	movs	r0, r3
    2078:	4b20      	ldr	r3, [pc, #128]	; (20fc <STACK_SIZE+0xfc>)
    207a:	4798      	blx	r3
				if (pn<kTOTALLEFTPINS)
    207c:	683b      	ldr	r3, [r7, #0]
    207e:	2b1c      	cmp	r3, #28
    2080:	dc48      	bgt.n	2114 <STACK_SIZE+0x114>
				{
					SetPin(pins.allPorts[pn+2],pins.allPins[pn+2]);
    2082:	6878      	ldr	r0, [r7, #4]
    2084:	683b      	ldr	r3, [r7, #0]
    2086:	1c9a      	adds	r2, r3, #2
    2088:	6879      	ldr	r1, [r7, #4]
    208a:	23a2      	movs	r3, #162	; 0xa2
    208c:	33ff      	adds	r3, #255	; 0xff
    208e:	188a      	adds	r2, r1, r2
    2090:	18d3      	adds	r3, r2, r3
    2092:	781c      	ldrb	r4, [r3, #0]
    2094:	683b      	ldr	r3, [r7, #0]
    2096:	1c9a      	adds	r2, r3, #2
    2098:	6879      	ldr	r1, [r7, #4]
    209a:	23dc      	movs	r3, #220	; 0xdc
    209c:	33ff      	adds	r3, #255	; 0xff
    209e:	188a      	adds	r2, r1, r2
    20a0:	18d3      	adds	r3, r2, r3
    20a2:	781b      	ldrb	r3, [r3, #0]
    20a4:	001a      	movs	r2, r3
    20a6:	0021      	movs	r1, r4
    20a8:	4b15      	ldr	r3, [pc, #84]	; (2100 <STACK_SIZE+0x100>)
    20aa:	4798      	blx	r3
					state.status[pn+2]=1;
    20ac:	683b      	ldr	r3, [r7, #0]
    20ae:	3302      	adds	r3, #2
    20b0:	687a      	ldr	r2, [r7, #4]
    20b2:	4914      	ldr	r1, [pc, #80]	; (2104 <STACK_SIZE+0x104>)
    20b4:	18d3      	adds	r3, r2, r3
    20b6:	185b      	adds	r3, r3, r1
    20b8:	2201      	movs	r2, #1
    20ba:	701a      	strb	r2, [r3, #0]
					SetPin(pins.allPorts[pn+1],pins.allPins[pn+1]);
    20bc:	6878      	ldr	r0, [r7, #4]
    20be:	683b      	ldr	r3, [r7, #0]
    20c0:	1c5a      	adds	r2, r3, #1
    20c2:	6879      	ldr	r1, [r7, #4]
    20c4:	23a2      	movs	r3, #162	; 0xa2
    20c6:	33ff      	adds	r3, #255	; 0xff
    20c8:	188a      	adds	r2, r1, r2
    20ca:	18d3      	adds	r3, r2, r3
    20cc:	781c      	ldrb	r4, [r3, #0]
    20ce:	683b      	ldr	r3, [r7, #0]
    20d0:	1c5a      	adds	r2, r3, #1
    20d2:	6879      	ldr	r1, [r7, #4]
    20d4:	23dc      	movs	r3, #220	; 0xdc
    20d6:	33ff      	adds	r3, #255	; 0xff
    20d8:	188a      	adds	r2, r1, r2
    20da:	18d3      	adds	r3, r2, r3
    20dc:	781b      	ldrb	r3, [r3, #0]
    20de:	001a      	movs	r2, r3
    20e0:	0021      	movs	r1, r4
    20e2:	4b07      	ldr	r3, [pc, #28]	; (2100 <STACK_SIZE+0x100>)
    20e4:	4798      	blx	r3
					state.status[pn+1]=1;
    20e6:	683b      	ldr	r3, [r7, #0]
    20e8:	3301      	adds	r3, #1
    20ea:	687a      	ldr	r2, [r7, #4]
    20ec:	4905      	ldr	r1, [pc, #20]	; (2104 <STACK_SIZE+0x104>)
    20ee:	18d3      	adds	r3, r2, r3
    20f0:	185b      	adds	r3, r3, r1
    20f2:	2201      	movs	r2, #1
    20f4:	701a      	strb	r2, [r3, #0]
    20f6:	e047      	b.n	2188 <STACK_SIZE+0x188>
    20f8:	00002621 	.word	0x00002621
    20fc:	000026dd 	.word	0x000026dd
    2100:	00003245 	.word	0x00003245
    2104:	00000215 	.word	0x00000215
    2108:	00002741 	.word	0x00002741
    210c:	00003289 	.word	0x00003289
    2110:	00000289 	.word	0x00000289
				}
				else
				{
					SetPin(pins.allPorts[pn-2],pins.allPins[pn-2]);
    2114:	6878      	ldr	r0, [r7, #4]
    2116:	683b      	ldr	r3, [r7, #0]
    2118:	1e9a      	subs	r2, r3, #2
    211a:	6879      	ldr	r1, [r7, #4]
    211c:	23a2      	movs	r3, #162	; 0xa2
    211e:	33ff      	adds	r3, #255	; 0xff
    2120:	188a      	adds	r2, r1, r2
    2122:	18d3      	adds	r3, r2, r3
    2124:	781c      	ldrb	r4, [r3, #0]
    2126:	683b      	ldr	r3, [r7, #0]
    2128:	1e9a      	subs	r2, r3, #2
    212a:	6879      	ldr	r1, [r7, #4]
    212c:	23dc      	movs	r3, #220	; 0xdc
    212e:	33ff      	adds	r3, #255	; 0xff
    2130:	188a      	adds	r2, r1, r2
    2132:	18d3      	adds	r3, r2, r3
    2134:	781b      	ldrb	r3, [r3, #0]
    2136:	001a      	movs	r2, r3
    2138:	0021      	movs	r1, r4
    213a:	4b7b      	ldr	r3, [pc, #492]	; (2328 <STACK_SIZE+0x328>)
    213c:	4798      	blx	r3
					state.status[pn-2]=1;
    213e:	683b      	ldr	r3, [r7, #0]
    2140:	3b02      	subs	r3, #2
    2142:	687a      	ldr	r2, [r7, #4]
    2144:	4979      	ldr	r1, [pc, #484]	; (232c <STACK_SIZE+0x32c>)
    2146:	18d3      	adds	r3, r2, r3
    2148:	185b      	adds	r3, r3, r1
    214a:	2201      	movs	r2, #1
    214c:	701a      	strb	r2, [r3, #0]
					SetPin(pins.allPorts[pn-1],pins.allPins[pn-1]);
    214e:	6878      	ldr	r0, [r7, #4]
    2150:	683b      	ldr	r3, [r7, #0]
    2152:	1e5a      	subs	r2, r3, #1
    2154:	6879      	ldr	r1, [r7, #4]
    2156:	23a2      	movs	r3, #162	; 0xa2
    2158:	33ff      	adds	r3, #255	; 0xff
    215a:	188a      	adds	r2, r1, r2
    215c:	18d3      	adds	r3, r2, r3
    215e:	781c      	ldrb	r4, [r3, #0]
    2160:	683b      	ldr	r3, [r7, #0]
    2162:	1e5a      	subs	r2, r3, #1
    2164:	6879      	ldr	r1, [r7, #4]
    2166:	23dc      	movs	r3, #220	; 0xdc
    2168:	33ff      	adds	r3, #255	; 0xff
    216a:	188a      	adds	r2, r1, r2
    216c:	18d3      	adds	r3, r2, r3
    216e:	781b      	ldrb	r3, [r3, #0]
    2170:	001a      	movs	r2, r3
    2172:	0021      	movs	r1, r4
    2174:	4b6c      	ldr	r3, [pc, #432]	; (2328 <STACK_SIZE+0x328>)
    2176:	4798      	blx	r3
					state.status[pn-1]=1;
    2178:	683b      	ldr	r3, [r7, #0]
    217a:	3b01      	subs	r3, #1
    217c:	687a      	ldr	r2, [r7, #4]
    217e:	496b      	ldr	r1, [pc, #428]	; (232c <STACK_SIZE+0x32c>)
    2180:	18d3      	adds	r3, r2, r3
    2182:	185b      	adds	r3, r3, r1
    2184:	2201      	movs	r2, #1
    2186:	701a      	strb	r2, [r3, #0]
				}
				
				while((!blinkOut)){
    2188:	687a      	ldr	r2, [r7, #4]
    218a:	237c      	movs	r3, #124	; 0x7c
    218c:	33ff      	adds	r3, #255	; 0xff
    218e:	5cd3      	ldrb	r3, [r2, r3]
    2190:	b2db      	uxtb	r3, r3
    2192:	2201      	movs	r2, #1
    2194:	4053      	eors	r3, r2
    2196:	b2db      	uxtb	r3, r3
    2198:	2b00      	cmp	r3, #0
    219a:	d000      	beq.n	219e <STACK_SIZE+0x19e>
    219c:	e7f4      	b.n	2188 <STACK_SIZE+0x188>
					//Dimmen(0);
				}
				PowerOffPin(pn);
    219e:	683a      	ldr	r2, [r7, #0]
    21a0:	687b      	ldr	r3, [r7, #4]
    21a2:	0011      	movs	r1, r2
    21a4:	0018      	movs	r0, r3
    21a6:	4b62      	ldr	r3, [pc, #392]	; (2330 <STACK_SIZE+0x330>)
    21a8:	4798      	blx	r3
				if (pn<kTOTALLEFTPINS)
    21aa:	683b      	ldr	r3, [r7, #0]
    21ac:	2b1c      	cmp	r3, #28
    21ae:	dc3a      	bgt.n	2226 <STACK_SIZE+0x226>
				{
					ClearPin(pins.allPorts[pn+2],pins.allPins[pn+2]);
    21b0:	6878      	ldr	r0, [r7, #4]
    21b2:	683b      	ldr	r3, [r7, #0]
    21b4:	1c9a      	adds	r2, r3, #2
    21b6:	6879      	ldr	r1, [r7, #4]
    21b8:	23a2      	movs	r3, #162	; 0xa2
    21ba:	33ff      	adds	r3, #255	; 0xff
    21bc:	188a      	adds	r2, r1, r2
    21be:	18d3      	adds	r3, r2, r3
    21c0:	781c      	ldrb	r4, [r3, #0]
    21c2:	683b      	ldr	r3, [r7, #0]
    21c4:	1c9a      	adds	r2, r3, #2
    21c6:	6879      	ldr	r1, [r7, #4]
    21c8:	23dc      	movs	r3, #220	; 0xdc
    21ca:	33ff      	adds	r3, #255	; 0xff
    21cc:	188a      	adds	r2, r1, r2
    21ce:	18d3      	adds	r3, r2, r3
    21d0:	781b      	ldrb	r3, [r3, #0]
    21d2:	001a      	movs	r2, r3
    21d4:	0021      	movs	r1, r4
    21d6:	4b57      	ldr	r3, [pc, #348]	; (2334 <STACK_SIZE+0x334>)
    21d8:	4798      	blx	r3
					state.status[pn+2]=0;
    21da:	683b      	ldr	r3, [r7, #0]
    21dc:	3302      	adds	r3, #2
    21de:	687a      	ldr	r2, [r7, #4]
    21e0:	4952      	ldr	r1, [pc, #328]	; (232c <STACK_SIZE+0x32c>)
    21e2:	18d3      	adds	r3, r2, r3
    21e4:	185b      	adds	r3, r3, r1
    21e6:	2200      	movs	r2, #0
    21e8:	701a      	strb	r2, [r3, #0]
					ClearPin(pins.allPorts[pn+1],pins.allPins[pn+1]);
    21ea:	6878      	ldr	r0, [r7, #4]
    21ec:	683b      	ldr	r3, [r7, #0]
    21ee:	1c5a      	adds	r2, r3, #1
    21f0:	6879      	ldr	r1, [r7, #4]
    21f2:	23a2      	movs	r3, #162	; 0xa2
    21f4:	33ff      	adds	r3, #255	; 0xff
    21f6:	188a      	adds	r2, r1, r2
    21f8:	18d3      	adds	r3, r2, r3
    21fa:	781c      	ldrb	r4, [r3, #0]
    21fc:	683b      	ldr	r3, [r7, #0]
    21fe:	1c5a      	adds	r2, r3, #1
    2200:	6879      	ldr	r1, [r7, #4]
    2202:	23dc      	movs	r3, #220	; 0xdc
    2204:	33ff      	adds	r3, #255	; 0xff
    2206:	188a      	adds	r2, r1, r2
    2208:	18d3      	adds	r3, r2, r3
    220a:	781b      	ldrb	r3, [r3, #0]
    220c:	001a      	movs	r2, r3
    220e:	0021      	movs	r1, r4
    2210:	4b48      	ldr	r3, [pc, #288]	; (2334 <STACK_SIZE+0x334>)
    2212:	4798      	blx	r3
					state.status[pn+1]=0;
    2214:	683b      	ldr	r3, [r7, #0]
    2216:	3301      	adds	r3, #1
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	4944      	ldr	r1, [pc, #272]	; (232c <STACK_SIZE+0x32c>)
    221c:	18d3      	adds	r3, r2, r3
    221e:	185b      	adds	r3, r3, r1
    2220:	2200      	movs	r2, #0
    2222:	701a      	strb	r2, [r3, #0]
    2224:	e067      	b.n	22f6 <STACK_SIZE+0x2f6>
				}
				else
				{
					ClearPin(pins.allPorts[pn-2],pins.allPins[pn-2]);
    2226:	6878      	ldr	r0, [r7, #4]
    2228:	683b      	ldr	r3, [r7, #0]
    222a:	1e9a      	subs	r2, r3, #2
    222c:	6879      	ldr	r1, [r7, #4]
    222e:	23a2      	movs	r3, #162	; 0xa2
    2230:	33ff      	adds	r3, #255	; 0xff
    2232:	188a      	adds	r2, r1, r2
    2234:	18d3      	adds	r3, r2, r3
    2236:	781c      	ldrb	r4, [r3, #0]
    2238:	683b      	ldr	r3, [r7, #0]
    223a:	1e9a      	subs	r2, r3, #2
    223c:	6879      	ldr	r1, [r7, #4]
    223e:	23dc      	movs	r3, #220	; 0xdc
    2240:	33ff      	adds	r3, #255	; 0xff
    2242:	188a      	adds	r2, r1, r2
    2244:	18d3      	adds	r3, r2, r3
    2246:	781b      	ldrb	r3, [r3, #0]
    2248:	001a      	movs	r2, r3
    224a:	0021      	movs	r1, r4
    224c:	4b39      	ldr	r3, [pc, #228]	; (2334 <STACK_SIZE+0x334>)
    224e:	4798      	blx	r3
					state.status[pn-2]=0;
    2250:	683b      	ldr	r3, [r7, #0]
    2252:	3b02      	subs	r3, #2
    2254:	687a      	ldr	r2, [r7, #4]
    2256:	4935      	ldr	r1, [pc, #212]	; (232c <STACK_SIZE+0x32c>)
    2258:	18d3      	adds	r3, r2, r3
    225a:	185b      	adds	r3, r3, r1
    225c:	2200      	movs	r2, #0
    225e:	701a      	strb	r2, [r3, #0]
					ClearPin(pins.allPorts[pn-1],pins.allPins[pn-1]);
    2260:	6878      	ldr	r0, [r7, #4]
    2262:	683b      	ldr	r3, [r7, #0]
    2264:	1e5a      	subs	r2, r3, #1
    2266:	6879      	ldr	r1, [r7, #4]
    2268:	23a2      	movs	r3, #162	; 0xa2
    226a:	33ff      	adds	r3, #255	; 0xff
    226c:	188a      	adds	r2, r1, r2
    226e:	18d3      	adds	r3, r2, r3
    2270:	781c      	ldrb	r4, [r3, #0]
    2272:	683b      	ldr	r3, [r7, #0]
    2274:	1e5a      	subs	r2, r3, #1
    2276:	6879      	ldr	r1, [r7, #4]
    2278:	23dc      	movs	r3, #220	; 0xdc
    227a:	33ff      	adds	r3, #255	; 0xff
    227c:	188a      	adds	r2, r1, r2
    227e:	18d3      	adds	r3, r2, r3
    2280:	781b      	ldrb	r3, [r3, #0]
    2282:	001a      	movs	r2, r3
    2284:	0021      	movs	r1, r4
    2286:	4b2b      	ldr	r3, [pc, #172]	; (2334 <STACK_SIZE+0x334>)
    2288:	4798      	blx	r3
					state.status[pn-1]=0;
    228a:	683b      	ldr	r3, [r7, #0]
    228c:	3b01      	subs	r3, #1
    228e:	687a      	ldr	r2, [r7, #4]
    2290:	4926      	ldr	r1, [pc, #152]	; (232c <STACK_SIZE+0x32c>)
    2292:	18d3      	adds	r3, r2, r3
    2294:	185b      	adds	r3, r3, r1
    2296:	2200      	movs	r2, #0
    2298:	701a      	strb	r2, [r3, #0]
    229a:	e02c      	b.n	22f6 <STACK_SIZE+0x2f6>
				}	
			} 
			else
			{
				StartBlinker(0);
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	2100      	movs	r1, #0
    22a0:	0018      	movs	r0, r3
    22a2:	4b25      	ldr	r3, [pc, #148]	; (2338 <STACK_SIZE+0x338>)
    22a4:	4798      	blx	r3
				PowerOnPin(pn);
    22a6:	683a      	ldr	r2, [r7, #0]
    22a8:	687b      	ldr	r3, [r7, #4]
    22aa:	0011      	movs	r1, r2
    22ac:	0018      	movs	r0, r3
    22ae:	4b23      	ldr	r3, [pc, #140]	; (233c <STACK_SIZE+0x33c>)
    22b0:	4798      	blx	r3
				while((!blinkOut)){
    22b2:	687a      	ldr	r2, [r7, #4]
    22b4:	237c      	movs	r3, #124	; 0x7c
    22b6:	33ff      	adds	r3, #255	; 0xff
    22b8:	5cd3      	ldrb	r3, [r2, r3]
    22ba:	b2db      	uxtb	r3, r3
    22bc:	2201      	movs	r2, #1
    22be:	4053      	eors	r3, r2
    22c0:	b2db      	uxtb	r3, r3
    22c2:	2b00      	cmp	r3, #0
    22c4:	d011      	beq.n	22ea <STACK_SIZE+0x2ea>
					
					if (keepGoing)
    22c6:	687a      	ldr	r2, [r7, #4]
    22c8:	23d0      	movs	r3, #208	; 0xd0
    22ca:	005b      	lsls	r3, r3, #1
    22cc:	5cd3      	ldrb	r3, [r2, r3]
    22ce:	2b00      	cmp	r3, #0
    22d0:	d0ef      	beq.n	22b2 <STACK_SIZE+0x2b2>
					{
						keepGoing=Dimmen(0);
    22d2:	687b      	ldr	r3, [r7, #4]
    22d4:	2100      	movs	r1, #0
    22d6:	0018      	movs	r0, r3
    22d8:	4b19      	ldr	r3, [pc, #100]	; (2340 <STACK_SIZE+0x340>)
    22da:	4798      	blx	r3
    22dc:	0003      	movs	r3, r0
    22de:	0019      	movs	r1, r3
    22e0:	687a      	ldr	r2, [r7, #4]
    22e2:	23d0      	movs	r3, #208	; 0xd0
    22e4:	005b      	lsls	r3, r3, #1
    22e6:	54d1      	strb	r1, [r2, r3]
				while((!blinkOut)){
    22e8:	e7e3      	b.n	22b2 <STACK_SIZE+0x2b2>
					else
					{
						
					}
				}
				PowerOffPin(pn);
    22ea:	683a      	ldr	r2, [r7, #0]
    22ec:	687b      	ldr	r3, [r7, #4]
    22ee:	0011      	movs	r1, r2
    22f0:	0018      	movs	r0, r3
    22f2:	4b0f      	ldr	r3, [pc, #60]	; (2330 <STACK_SIZE+0x330>)
    22f4:	4798      	blx	r3
			}
		
		}
	}
	if (keepGoing)
    22f6:	687a      	ldr	r2, [r7, #4]
    22f8:	23d0      	movs	r3, #208	; 0xd0
    22fa:	005b      	lsls	r3, r3, #1
    22fc:	5cd3      	ldrb	r3, [r2, r3]
    22fe:	2b00      	cmp	r3, #0
    2300:	d009      	beq.n	2316 <STACK_SIZE+0x316>
	{
		keepGoing=CheckNMIButton();
    2302:	687b      	ldr	r3, [r7, #4]
    2304:	0018      	movs	r0, r3
    2306:	4b0f      	ldr	r3, [pc, #60]	; (2344 <STACK_SIZE+0x344>)
    2308:	4798      	blx	r3
    230a:	0003      	movs	r3, r0
    230c:	0019      	movs	r1, r3
    230e:	687a      	ldr	r2, [r7, #4]
    2310:	23d0      	movs	r3, #208	; 0xd0
    2312:	005b      	lsls	r3, r3, #1
    2314:	54d1      	strb	r1, [r2, r3]
	}
	
	return keepGoing;
    2316:	687a      	ldr	r2, [r7, #4]
    2318:	23d0      	movs	r3, #208	; 0xd0
    231a:	005b      	lsls	r3, r3, #1
    231c:	5cd3      	ldrb	r3, [r2, r3]

}
    231e:	0018      	movs	r0, r3
    2320:	46bd      	mov	sp, r7
    2322:	b003      	add	sp, #12
    2324:	bd90      	pop	{r4, r7, pc}
    2326:	46c0      	nop			; (mov r8, r8)
    2328:	00003245 	.word	0x00003245
    232c:	00000215 	.word	0x00000215
    2330:	00002741 	.word	0x00002741
    2334:	00003289 	.word	0x00003289
    2338:	00002621 	.word	0x00002621
    233c:	000026dd 	.word	0x000026dd
    2340:	0000286d 	.word	0x0000286d
    2344:	00002349 	.word	0x00002349

00002348 <_ZN16LedHandler_Class14CheckNMIButtonEv>:

bool	LedHandler_Class::CheckNMIButton(void){
    2348:	b580      	push	{r7, lr}
    234a:	b082      	sub	sp, #8
    234c:	af00      	add	r7, sp, #0
    234e:	6078      	str	r0, [r7, #4]
		if (nmi.IsButtonPressed())
    2350:	4b0e      	ldr	r3, [pc, #56]	; (238c <_ZN16LedHandler_Class14CheckNMIButtonEv+0x44>)
    2352:	0018      	movs	r0, r3
    2354:	4b0e      	ldr	r3, [pc, #56]	; (2390 <_ZN16LedHandler_Class14CheckNMIButtonEv+0x48>)
    2356:	4798      	blx	r3
    2358:	1e03      	subs	r3, r0, #0
    235a:	d009      	beq.n	2370 <_ZN16LedHandler_Class14CheckNMIButtonEv+0x28>
		{
			request=true;
    235c:	687a      	ldr	r2, [r7, #4]
    235e:	23c4      	movs	r3, #196	; 0xc4
    2360:	005b      	lsls	r3, r3, #1
    2362:	2101      	movs	r1, #1
    2364:	54d1      	strb	r1, [r2, r3]
			nmi.OnPressed();
    2366:	4b09      	ldr	r3, [pc, #36]	; (238c <_ZN16LedHandler_Class14CheckNMIButtonEv+0x44>)
    2368:	0018      	movs	r0, r3
    236a:	4b0a      	ldr	r3, [pc, #40]	; (2394 <_ZN16LedHandler_Class14CheckNMIButtonEv+0x4c>)
    236c:	4798      	blx	r3
    236e:	e008      	b.n	2382 <_ZN16LedHandler_Class14CheckNMIButtonEv+0x3a>
			
		}else{
		
			if (changeModeRequest)
    2370:	687a      	ldr	r2, [r7, #4]
    2372:	23bc      	movs	r3, #188	; 0xbc
    2374:	005b      	lsls	r3, r3, #1
    2376:	5cd3      	ldrb	r3, [r2, r3]
    2378:	b2db      	uxtb	r3, r3
    237a:	2b00      	cmp	r3, #0
    237c:	d001      	beq.n	2382 <_ZN16LedHandler_Class14CheckNMIButtonEv+0x3a>
			{
				return false;
    237e:	2300      	movs	r3, #0
    2380:	e000      	b.n	2384 <_ZN16LedHandler_Class14CheckNMIButtonEv+0x3c>
			}
			
		}
		return true;
    2382:	2301      	movs	r3, #1
}
    2384:	0018      	movs	r0, r3
    2386:	46bd      	mov	sp, r7
    2388:	b002      	add	sp, #8
    238a:	bd80      	pop	{r7, pc}
    238c:	20000790 	.word	0x20000790
    2390:	00003da9 	.word	0x00003da9
    2394:	00003e39 	.word	0x00003e39

00002398 <_ZN16LedHandler_Class11PowerOnFailEi>:

bool	LedHandler_Class::PowerOnFail(int pn){
    2398:	b580      	push	{r7, lr}
    239a:	b082      	sub	sp, #8
    239c:	af00      	add	r7, sp, #0
    239e:	6078      	str	r0, [r7, #4]
    23a0:	6039      	str	r1, [r7, #0]
	if (IsRed(pn)){
    23a2:	687b      	ldr	r3, [r7, #4]
    23a4:	683a      	ldr	r2, [r7, #0]
    23a6:	b2d2      	uxtb	r2, r2
    23a8:	0011      	movs	r1, r2
    23aa:	0018      	movs	r0, r3
    23ac:	4b20      	ldr	r3, [pc, #128]	; (2430 <_ZN16LedHandler_Class11PowerOnFailEi+0x98>)
    23ae:	4798      	blx	r3
    23b0:	1e03      	subs	r3, r0, #0
    23b2:	d006      	beq.n	23c2 <_ZN16LedHandler_Class11PowerOnFailEi+0x2a>
		SimplePowerON(pn);
    23b4:	683a      	ldr	r2, [r7, #0]
    23b6:	687b      	ldr	r3, [r7, #4]
    23b8:	0011      	movs	r1, r2
    23ba:	0018      	movs	r0, r3
    23bc:	4b1d      	ldr	r3, [pc, #116]	; (2434 <_ZN16LedHandler_Class11PowerOnFailEi+0x9c>)
    23be:	4798      	blx	r3
    23c0:	e024      	b.n	240c <_ZN16LedHandler_Class11PowerOnFailEi+0x74>
	}else{
		if (IsRed(pn+1)){
    23c2:	687a      	ldr	r2, [r7, #4]
    23c4:	683b      	ldr	r3, [r7, #0]
    23c6:	b2db      	uxtb	r3, r3
    23c8:	3301      	adds	r3, #1
    23ca:	b2db      	uxtb	r3, r3
    23cc:	0019      	movs	r1, r3
    23ce:	0010      	movs	r0, r2
    23d0:	4b17      	ldr	r3, [pc, #92]	; (2430 <_ZN16LedHandler_Class11PowerOnFailEi+0x98>)
    23d2:	4798      	blx	r3
    23d4:	1e03      	subs	r3, r0, #0
    23d6:	d007      	beq.n	23e8 <_ZN16LedHandler_Class11PowerOnFailEi+0x50>
			SimplePowerON(pn+1);
    23d8:	683b      	ldr	r3, [r7, #0]
    23da:	1c5a      	adds	r2, r3, #1
    23dc:	687b      	ldr	r3, [r7, #4]
    23de:	0011      	movs	r1, r2
    23e0:	0018      	movs	r0, r3
    23e2:	4b14      	ldr	r3, [pc, #80]	; (2434 <_ZN16LedHandler_Class11PowerOnFailEi+0x9c>)
    23e4:	4798      	blx	r3
    23e6:	e011      	b.n	240c <_ZN16LedHandler_Class11PowerOnFailEi+0x74>
		}else{
			if (IsRed(pn+2)){
    23e8:	687a      	ldr	r2, [r7, #4]
    23ea:	683b      	ldr	r3, [r7, #0]
    23ec:	b2db      	uxtb	r3, r3
    23ee:	3302      	adds	r3, #2
    23f0:	b2db      	uxtb	r3, r3
    23f2:	0019      	movs	r1, r3
    23f4:	0010      	movs	r0, r2
    23f6:	4b0e      	ldr	r3, [pc, #56]	; (2430 <_ZN16LedHandler_Class11PowerOnFailEi+0x98>)
    23f8:	4798      	blx	r3
    23fa:	1e03      	subs	r3, r0, #0
    23fc:	d006      	beq.n	240c <_ZN16LedHandler_Class11PowerOnFailEi+0x74>
				SimplePowerON(pn+2);
    23fe:	683b      	ldr	r3, [r7, #0]
    2400:	1c9a      	adds	r2, r3, #2
    2402:	687b      	ldr	r3, [r7, #4]
    2404:	0011      	movs	r1, r2
    2406:	0018      	movs	r0, r3
    2408:	4b0a      	ldr	r3, [pc, #40]	; (2434 <_ZN16LedHandler_Class11PowerOnFailEi+0x9c>)
    240a:	4798      	blx	r3
			}
		}
		
	}
	if (nmi.IsButtonPressed())
    240c:	4b0a      	ldr	r3, [pc, #40]	; (2438 <_ZN16LedHandler_Class11PowerOnFailEi+0xa0>)
    240e:	0018      	movs	r0, r3
    2410:	4b0a      	ldr	r3, [pc, #40]	; (243c <_ZN16LedHandler_Class11PowerOnFailEi+0xa4>)
    2412:	4798      	blx	r3
    2414:	1e03      	subs	r3, r0, #0
    2416:	d006      	beq.n	2426 <_ZN16LedHandler_Class11PowerOnFailEi+0x8e>
	{
		changeModeRequest=true;
    2418:	687a      	ldr	r2, [r7, #4]
    241a:	23bc      	movs	r3, #188	; 0xbc
    241c:	005b      	lsls	r3, r3, #1
    241e:	2101      	movs	r1, #1
    2420:	54d1      	strb	r1, [r2, r3]
		return false;
    2422:	2300      	movs	r3, #0
    2424:	e000      	b.n	2428 <_ZN16LedHandler_Class11PowerOnFailEi+0x90>
	}
	return true;
    2426:	2301      	movs	r3, #1
	
}
    2428:	0018      	movs	r0, r3
    242a:	46bd      	mov	sp, r7
    242c:	b002      	add	sp, #8
    242e:	bd80      	pop	{r7, pc}
    2430:	000034e1 	.word	0x000034e1
    2434:	00002441 	.word	0x00002441
    2438:	20000790 	.word	0x20000790
    243c:	00003da9 	.word	0x00003da9

00002440 <_ZN16LedHandler_Class13SimplePowerONEi>:

void	LedHandler_Class::SimplePowerON(int pn){
    2440:	b580      	push	{r7, lr}
    2442:	b082      	sub	sp, #8
    2444:	af00      	add	r7, sp, #0
    2446:	6078      	str	r0, [r7, #4]
    2448:	6039      	str	r1, [r7, #0]
	StartBlinker(0);
    244a:	687b      	ldr	r3, [r7, #4]
    244c:	2100      	movs	r1, #0
    244e:	0018      	movs	r0, r3
    2450:	4b0e      	ldr	r3, [pc, #56]	; (248c <_ZN16LedHandler_Class13SimplePowerONEi+0x4c>)
    2452:	4798      	blx	r3
	PowerOnPin(pn);
    2454:	683a      	ldr	r2, [r7, #0]
    2456:	687b      	ldr	r3, [r7, #4]
    2458:	0011      	movs	r1, r2
    245a:	0018      	movs	r0, r3
    245c:	4b0c      	ldr	r3, [pc, #48]	; (2490 <_ZN16LedHandler_Class13SimplePowerONEi+0x50>)
    245e:	4798      	blx	r3
	while((!blinkOut)){
    2460:	687a      	ldr	r2, [r7, #4]
    2462:	237c      	movs	r3, #124	; 0x7c
    2464:	33ff      	adds	r3, #255	; 0xff
    2466:	5cd3      	ldrb	r3, [r2, r3]
    2468:	b2db      	uxtb	r3, r3
    246a:	2201      	movs	r2, #1
    246c:	4053      	eors	r3, r2
    246e:	b2db      	uxtb	r3, r3
    2470:	2b00      	cmp	r3, #0
    2472:	d000      	beq.n	2476 <_ZN16LedHandler_Class13SimplePowerONEi+0x36>
    2474:	e7f4      	b.n	2460 <_ZN16LedHandler_Class13SimplePowerONEi+0x20>
		//Dimmen(0);
	}
	PowerOffPin(pn);
    2476:	683a      	ldr	r2, [r7, #0]
    2478:	687b      	ldr	r3, [r7, #4]
    247a:	0011      	movs	r1, r2
    247c:	0018      	movs	r0, r3
    247e:	4b05      	ldr	r3, [pc, #20]	; (2494 <_ZN16LedHandler_Class13SimplePowerONEi+0x54>)
    2480:	4798      	blx	r3
}
    2482:	46c0      	nop			; (mov r8, r8)
    2484:	46bd      	mov	sp, r7
    2486:	b002      	add	sp, #8
    2488:	bd80      	pop	{r7, pc}
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	00002621 	.word	0x00002621
    2490:	000026dd 	.word	0x000026dd
    2494:	00002741 	.word	0x00002741

00002498 <_ZN16LedHandler_Class11PowerOnLilaEi>:



bool	LedHandler_Class::PowerOnLila(int pn){
    2498:	b590      	push	{r4, r7, lr}
    249a:	b083      	sub	sp, #12
    249c:	af00      	add	r7, sp, #0
    249e:	6078      	str	r0, [r7, #4]
    24a0:	6039      	str	r1, [r7, #0]

	StartBlinker(1);
    24a2:	687b      	ldr	r3, [r7, #4]
    24a4:	2101      	movs	r1, #1
    24a6:	0018      	movs	r0, r3
    24a8:	4b55      	ldr	r3, [pc, #340]	; (2600 <_ZN16LedHandler_Class11PowerOnLilaEi+0x168>)
    24aa:	4798      	blx	r3
	PowerOnPin(pn);
    24ac:	683a      	ldr	r2, [r7, #0]
    24ae:	687b      	ldr	r3, [r7, #4]
    24b0:	0011      	movs	r1, r2
    24b2:	0018      	movs	r0, r3
    24b4:	4b53      	ldr	r3, [pc, #332]	; (2604 <_ZN16LedHandler_Class11PowerOnLilaEi+0x16c>)
    24b6:	4798      	blx	r3
	if (pn<kTOTALLEFTPINS)
    24b8:	683b      	ldr	r3, [r7, #0]
    24ba:	2b1c      	cmp	r3, #28
    24bc:	dc1d      	bgt.n	24fa <_ZN16LedHandler_Class11PowerOnLilaEi+0x62>
	{
		SetPin(pins.allPorts[pn+2],pins.allPins[pn+2]);
    24be:	6878      	ldr	r0, [r7, #4]
    24c0:	683b      	ldr	r3, [r7, #0]
    24c2:	1c9a      	adds	r2, r3, #2
    24c4:	6879      	ldr	r1, [r7, #4]
    24c6:	23a2      	movs	r3, #162	; 0xa2
    24c8:	33ff      	adds	r3, #255	; 0xff
    24ca:	188a      	adds	r2, r1, r2
    24cc:	18d3      	adds	r3, r2, r3
    24ce:	781c      	ldrb	r4, [r3, #0]
    24d0:	683b      	ldr	r3, [r7, #0]
    24d2:	1c9a      	adds	r2, r3, #2
    24d4:	6879      	ldr	r1, [r7, #4]
    24d6:	23dc      	movs	r3, #220	; 0xdc
    24d8:	33ff      	adds	r3, #255	; 0xff
    24da:	188a      	adds	r2, r1, r2
    24dc:	18d3      	adds	r3, r2, r3
    24de:	781b      	ldrb	r3, [r3, #0]
    24e0:	001a      	movs	r2, r3
    24e2:	0021      	movs	r1, r4
    24e4:	4b48      	ldr	r3, [pc, #288]	; (2608 <_ZN16LedHandler_Class11PowerOnLilaEi+0x170>)
    24e6:	4798      	blx	r3
		state.status[pn+2]=1;
    24e8:	683b      	ldr	r3, [r7, #0]
    24ea:	3302      	adds	r3, #2
    24ec:	687a      	ldr	r2, [r7, #4]
    24ee:	4947      	ldr	r1, [pc, #284]	; (260c <_ZN16LedHandler_Class11PowerOnLilaEi+0x174>)
    24f0:	18d3      	adds	r3, r2, r3
    24f2:	185b      	adds	r3, r3, r1
    24f4:	2201      	movs	r2, #1
    24f6:	701a      	strb	r2, [r3, #0]
    24f8:	e01c      	b.n	2534 <_ZN16LedHandler_Class11PowerOnLilaEi+0x9c>
	}
	else
	{
		SetPin(pins.allPorts[pn-2],pins.allPins[pn-2]);
    24fa:	6878      	ldr	r0, [r7, #4]
    24fc:	683b      	ldr	r3, [r7, #0]
    24fe:	1e9a      	subs	r2, r3, #2
    2500:	6879      	ldr	r1, [r7, #4]
    2502:	23a2      	movs	r3, #162	; 0xa2
    2504:	33ff      	adds	r3, #255	; 0xff
    2506:	188a      	adds	r2, r1, r2
    2508:	18d3      	adds	r3, r2, r3
    250a:	781c      	ldrb	r4, [r3, #0]
    250c:	683b      	ldr	r3, [r7, #0]
    250e:	1e9a      	subs	r2, r3, #2
    2510:	6879      	ldr	r1, [r7, #4]
    2512:	23dc      	movs	r3, #220	; 0xdc
    2514:	33ff      	adds	r3, #255	; 0xff
    2516:	188a      	adds	r2, r1, r2
    2518:	18d3      	adds	r3, r2, r3
    251a:	781b      	ldrb	r3, [r3, #0]
    251c:	001a      	movs	r2, r3
    251e:	0021      	movs	r1, r4
    2520:	4b39      	ldr	r3, [pc, #228]	; (2608 <_ZN16LedHandler_Class11PowerOnLilaEi+0x170>)
    2522:	4798      	blx	r3
		state.status[pn-2]=1;
    2524:	683b      	ldr	r3, [r7, #0]
    2526:	3b02      	subs	r3, #2
    2528:	687a      	ldr	r2, [r7, #4]
    252a:	4938      	ldr	r1, [pc, #224]	; (260c <_ZN16LedHandler_Class11PowerOnLilaEi+0x174>)
    252c:	18d3      	adds	r3, r2, r3
    252e:	185b      	adds	r3, r3, r1
    2530:	2201      	movs	r2, #1
    2532:	701a      	strb	r2, [r3, #0]
	}
		
	while((!blinkOut)){
    2534:	687a      	ldr	r2, [r7, #4]
    2536:	237c      	movs	r3, #124	; 0x7c
    2538:	33ff      	adds	r3, #255	; 0xff
    253a:	5cd3      	ldrb	r3, [r2, r3]
    253c:	b2db      	uxtb	r3, r3
    253e:	2201      	movs	r2, #1
    2540:	4053      	eors	r3, r2
    2542:	b2db      	uxtb	r3, r3
    2544:	2b00      	cmp	r3, #0
    2546:	d000      	beq.n	254a <_ZN16LedHandler_Class11PowerOnLilaEi+0xb2>
    2548:	e7f4      	b.n	2534 <_ZN16LedHandler_Class11PowerOnLilaEi+0x9c>
		//Dimmen(0);
	}
	timerFinish=true;
    254a:	687a      	ldr	r2, [r7, #4]
    254c:	23be      	movs	r3, #190	; 0xbe
    254e:	005b      	lsls	r3, r3, #1
    2550:	2101      	movs	r1, #1
    2552:	54d1      	strb	r1, [r2, r3]
	PowerOffPin(pn);
    2554:	683a      	ldr	r2, [r7, #0]
    2556:	687b      	ldr	r3, [r7, #4]
    2558:	0011      	movs	r1, r2
    255a:	0018      	movs	r0, r3
    255c:	4b2c      	ldr	r3, [pc, #176]	; (2610 <_ZN16LedHandler_Class11PowerOnLilaEi+0x178>)
    255e:	4798      	blx	r3
	if (pn<kTOTALLEFTPINS)
    2560:	683b      	ldr	r3, [r7, #0]
    2562:	2b1c      	cmp	r3, #28
    2564:	dc1d      	bgt.n	25a2 <_ZN16LedHandler_Class11PowerOnLilaEi+0x10a>
	{
		ClearPin(pins.allPorts[pn+2],pins.allPins[pn+2]);
    2566:	6878      	ldr	r0, [r7, #4]
    2568:	683b      	ldr	r3, [r7, #0]
    256a:	1c9a      	adds	r2, r3, #2
    256c:	6879      	ldr	r1, [r7, #4]
    256e:	23a2      	movs	r3, #162	; 0xa2
    2570:	33ff      	adds	r3, #255	; 0xff
    2572:	188a      	adds	r2, r1, r2
    2574:	18d3      	adds	r3, r2, r3
    2576:	781c      	ldrb	r4, [r3, #0]
    2578:	683b      	ldr	r3, [r7, #0]
    257a:	1c9a      	adds	r2, r3, #2
    257c:	6879      	ldr	r1, [r7, #4]
    257e:	23dc      	movs	r3, #220	; 0xdc
    2580:	33ff      	adds	r3, #255	; 0xff
    2582:	188a      	adds	r2, r1, r2
    2584:	18d3      	adds	r3, r2, r3
    2586:	781b      	ldrb	r3, [r3, #0]
    2588:	001a      	movs	r2, r3
    258a:	0021      	movs	r1, r4
    258c:	4b21      	ldr	r3, [pc, #132]	; (2614 <_ZN16LedHandler_Class11PowerOnLilaEi+0x17c>)
    258e:	4798      	blx	r3
		state.status[pn+2]=0;
    2590:	683b      	ldr	r3, [r7, #0]
    2592:	3302      	adds	r3, #2
    2594:	687a      	ldr	r2, [r7, #4]
    2596:	491d      	ldr	r1, [pc, #116]	; (260c <_ZN16LedHandler_Class11PowerOnLilaEi+0x174>)
    2598:	18d3      	adds	r3, r2, r3
    259a:	185b      	adds	r3, r3, r1
    259c:	2200      	movs	r2, #0
    259e:	701a      	strb	r2, [r3, #0]
    25a0:	e01c      	b.n	25dc <_ZN16LedHandler_Class11PowerOnLilaEi+0x144>
	}
	else
	{
		ClearPin(pins.allPorts[pn-2],pins.allPins[pn-2]);
    25a2:	6878      	ldr	r0, [r7, #4]
    25a4:	683b      	ldr	r3, [r7, #0]
    25a6:	1e9a      	subs	r2, r3, #2
    25a8:	6879      	ldr	r1, [r7, #4]
    25aa:	23a2      	movs	r3, #162	; 0xa2
    25ac:	33ff      	adds	r3, #255	; 0xff
    25ae:	188a      	adds	r2, r1, r2
    25b0:	18d3      	adds	r3, r2, r3
    25b2:	781c      	ldrb	r4, [r3, #0]
    25b4:	683b      	ldr	r3, [r7, #0]
    25b6:	1e9a      	subs	r2, r3, #2
    25b8:	6879      	ldr	r1, [r7, #4]
    25ba:	23dc      	movs	r3, #220	; 0xdc
    25bc:	33ff      	adds	r3, #255	; 0xff
    25be:	188a      	adds	r2, r1, r2
    25c0:	18d3      	adds	r3, r2, r3
    25c2:	781b      	ldrb	r3, [r3, #0]
    25c4:	001a      	movs	r2, r3
    25c6:	0021      	movs	r1, r4
    25c8:	4b12      	ldr	r3, [pc, #72]	; (2614 <_ZN16LedHandler_Class11PowerOnLilaEi+0x17c>)
    25ca:	4798      	blx	r3
		state.status[pn-2]=0;
    25cc:	683b      	ldr	r3, [r7, #0]
    25ce:	3b02      	subs	r3, #2
    25d0:	687a      	ldr	r2, [r7, #4]
    25d2:	490e      	ldr	r1, [pc, #56]	; (260c <_ZN16LedHandler_Class11PowerOnLilaEi+0x174>)
    25d4:	18d3      	adds	r3, r2, r3
    25d6:	185b      	adds	r3, r3, r1
    25d8:	2200      	movs	r2, #0
    25da:	701a      	strb	r2, [r3, #0]
	}
		
	if (nmi.IsButtonPressed())
    25dc:	4b0e      	ldr	r3, [pc, #56]	; (2618 <_ZN16LedHandler_Class11PowerOnLilaEi+0x180>)
    25de:	0018      	movs	r0, r3
    25e0:	4b0e      	ldr	r3, [pc, #56]	; (261c <_ZN16LedHandler_Class11PowerOnLilaEi+0x184>)
    25e2:	4798      	blx	r3
    25e4:	1e03      	subs	r3, r0, #0
    25e6:	d006      	beq.n	25f6 <_ZN16LedHandler_Class11PowerOnLilaEi+0x15e>
	{
		changeModeRequest=true;
    25e8:	687a      	ldr	r2, [r7, #4]
    25ea:	23bc      	movs	r3, #188	; 0xbc
    25ec:	005b      	lsls	r3, r3, #1
    25ee:	2101      	movs	r1, #1
    25f0:	54d1      	strb	r1, [r2, r3]
		return false;
    25f2:	2300      	movs	r3, #0
    25f4:	e000      	b.n	25f8 <_ZN16LedHandler_Class11PowerOnLilaEi+0x160>
	}
	return true;
    25f6:	2301      	movs	r3, #1
}
    25f8:	0018      	movs	r0, r3
    25fa:	46bd      	mov	sp, r7
    25fc:	b003      	add	sp, #12
    25fe:	bd90      	pop	{r4, r7, pc}
    2600:	00002621 	.word	0x00002621
    2604:	000026dd 	.word	0x000026dd
    2608:	00003245 	.word	0x00003245
    260c:	00000215 	.word	0x00000215
    2610:	00002741 	.word	0x00002741
    2614:	00003289 	.word	0x00003289
    2618:	20000790 	.word	0x20000790
    261c:	00003da9 	.word	0x00003da9

00002620 <_ZN16LedHandler_Class12StartBlinkerEh>:
void	LedHandler_Class::StartBlinker(uint8_t lapsus){
    2620:	b580      	push	{r7, lr}
    2622:	b082      	sub	sp, #8
    2624:	af00      	add	r7, sp, #0
    2626:	6078      	str	r0, [r7, #4]
    2628:	000a      	movs	r2, r1
    262a:	1cfb      	adds	r3, r7, #3
    262c:	701a      	strb	r2, [r3, #0]
		ledTimer.stop();
    262e:	4b22      	ldr	r3, [pc, #136]	; (26b8 <_ZN16LedHandler_Class12StartBlinkerEh+0x98>)
    2630:	0018      	movs	r0, r3
    2632:	4b22      	ldr	r3, [pc, #136]	; (26bc <_ZN16LedHandler_Class12StartBlinkerEh+0x9c>)
    2634:	4798      	blx	r3
		pwmTimer.stop();
    2636:	4b22      	ldr	r3, [pc, #136]	; (26c0 <_ZN16LedHandler_Class12StartBlinkerEh+0xa0>)
    2638:	0018      	movs	r0, r3
    263a:	4b20      	ldr	r3, [pc, #128]	; (26bc <_ZN16LedHandler_Class12StartBlinkerEh+0x9c>)
    263c:	4798      	blx	r3
		if (lapsus>0)
    263e:	1cfb      	adds	r3, r7, #3
    2640:	781b      	ldrb	r3, [r3, #0]
    2642:	2b00      	cmp	r3, #0
    2644:	dd0a      	ble.n	265c <_ZN16LedHandler_Class12StartBlinkerEh+0x3c>
		{
			ledTimer.Start_oneShot_task((FUNC_PTR)BlinkTimer,2*stepTime);
    2646:	687a      	ldr	r2, [r7, #4]
    2648:	23c2      	movs	r3, #194	; 0xc2
    264a:	005b      	lsls	r3, r3, #1
    264c:	58d3      	ldr	r3, [r2, r3]
    264e:	005a      	lsls	r2, r3, #1
    2650:	491c      	ldr	r1, [pc, #112]	; (26c4 <_ZN16LedHandler_Class12StartBlinkerEh+0xa4>)
    2652:	4b19      	ldr	r3, [pc, #100]	; (26b8 <_ZN16LedHandler_Class12StartBlinkerEh+0x98>)
    2654:	0018      	movs	r0, r3
    2656:	4b1c      	ldr	r3, [pc, #112]	; (26c8 <_ZN16LedHandler_Class12StartBlinkerEh+0xa8>)
    2658:	4798      	blx	r3
    265a:	e023      	b.n	26a4 <_ZN16LedHandler_Class12StartBlinkerEh+0x84>
		} 
		else
		{
			ledTimer.Start_oneShot_task((FUNC_PTR)BlinkTimer,stepTime);
    265c:	687a      	ldr	r2, [r7, #4]
    265e:	23c2      	movs	r3, #194	; 0xc2
    2660:	005b      	lsls	r3, r3, #1
    2662:	58d2      	ldr	r2, [r2, r3]
    2664:	4917      	ldr	r1, [pc, #92]	; (26c4 <_ZN16LedHandler_Class12StartBlinkerEh+0xa4>)
    2666:	4b14      	ldr	r3, [pc, #80]	; (26b8 <_ZN16LedHandler_Class12StartBlinkerEh+0x98>)
    2668:	0018      	movs	r0, r3
    266a:	4b17      	ldr	r3, [pc, #92]	; (26c8 <_ZN16LedHandler_Class12StartBlinkerEh+0xa8>)
    266c:	4798      	blx	r3
			timerFinish=false;
    266e:	687a      	ldr	r2, [r7, #4]
    2670:	23be      	movs	r3, #190	; 0xbe
    2672:	005b      	lsls	r3, r3, #1
    2674:	2100      	movs	r1, #0
    2676:	54d1      	strb	r1, [r2, r3]
			deadTime=false;
    2678:	687a      	ldr	r2, [r7, #4]
    267a:	2378      	movs	r3, #120	; 0x78
    267c:	33ff      	adds	r3, #255	; 0xff
    267e:	2100      	movs	r1, #0
    2680:	54d1      	strb	r1, [r2, r3]
			pwmTimer.Start_oneShot_task((FUNC_PTR)PowerOnTimer,(uint32_t)((PWM_WAVE_PERIOD*dutyCycle)/100000));
    2682:	687a      	ldr	r2, [r7, #4]
    2684:	23c0      	movs	r3, #192	; 0xc0
    2686:	005b      	lsls	r3, r3, #1
    2688:	58d3      	ldr	r3, [r2, r3]
    268a:	4a10      	ldr	r2, [pc, #64]	; (26cc <_ZN16LedHandler_Class12StartBlinkerEh+0xac>)
    268c:	435a      	muls	r2, r3
    268e:	4b10      	ldr	r3, [pc, #64]	; (26d0 <_ZN16LedHandler_Class12StartBlinkerEh+0xb0>)
    2690:	4910      	ldr	r1, [pc, #64]	; (26d4 <_ZN16LedHandler_Class12StartBlinkerEh+0xb4>)
    2692:	0010      	movs	r0, r2
    2694:	4798      	blx	r3
    2696:	0003      	movs	r3, r0
    2698:	001a      	movs	r2, r3
    269a:	490f      	ldr	r1, [pc, #60]	; (26d8 <_ZN16LedHandler_Class12StartBlinkerEh+0xb8>)
    269c:	4b08      	ldr	r3, [pc, #32]	; (26c0 <_ZN16LedHandler_Class12StartBlinkerEh+0xa0>)
    269e:	0018      	movs	r0, r3
    26a0:	4b09      	ldr	r3, [pc, #36]	; (26c8 <_ZN16LedHandler_Class12StartBlinkerEh+0xa8>)
    26a2:	4798      	blx	r3
				
		}
		
		blinkOut=false;
    26a4:	687a      	ldr	r2, [r7, #4]
    26a6:	237c      	movs	r3, #124	; 0x7c
    26a8:	33ff      	adds	r3, #255	; 0xff
    26aa:	2100      	movs	r1, #0
    26ac:	54d1      	strb	r1, [r2, r3]
}
    26ae:	46c0      	nop			; (mov r8, r8)
    26b0:	46bd      	mov	sp, r7
    26b2:	b002      	add	sp, #8
    26b4:	bd80      	pop	{r7, pc}
    26b6:	46c0      	nop			; (mov r8, r8)
    26b8:	200007d0 	.word	0x200007d0
    26bc:	00003f51 	.word	0x00003f51
    26c0:	200007fc 	.word	0x200007fc
    26c4:	00001761 	.word	0x00001761
    26c8:	00003fe1 	.word	0x00003fe1
    26cc:	00002710 	.word	0x00002710
    26d0:	00004b15 	.word	0x00004b15
    26d4:	000186a0 	.word	0x000186a0
    26d8:	00001781 	.word	0x00001781

000026dc <_ZN16LedHandler_Class10PowerOnPinEi>:
	
void	LedHandler_Class::PowerOnPin(int	pn){
    26dc:	b590      	push	{r4, r7, lr}
    26de:	b083      	sub	sp, #12
    26e0:	af00      	add	r7, sp, #0
    26e2:	6078      	str	r0, [r7, #4]
    26e4:	6039      	str	r1, [r7, #0]
		SetPowerOnTimer();
    26e6:	687b      	ldr	r3, [r7, #4]
    26e8:	0018      	movs	r0, r3
    26ea:	4b12      	ldr	r3, [pc, #72]	; (2734 <_ZN16LedHandler_Class10PowerOnPinEi+0x58>)
    26ec:	4798      	blx	r3
		SetPin(pins.allPorts[pn],pins.allPins[pn]);
    26ee:	6878      	ldr	r0, [r7, #4]
    26f0:	6879      	ldr	r1, [r7, #4]
    26f2:	23a2      	movs	r3, #162	; 0xa2
    26f4:	33ff      	adds	r3, #255	; 0xff
    26f6:	683a      	ldr	r2, [r7, #0]
    26f8:	188a      	adds	r2, r1, r2
    26fa:	18d3      	adds	r3, r2, r3
    26fc:	781c      	ldrb	r4, [r3, #0]
    26fe:	6879      	ldr	r1, [r7, #4]
    2700:	23dc      	movs	r3, #220	; 0xdc
    2702:	33ff      	adds	r3, #255	; 0xff
    2704:	683a      	ldr	r2, [r7, #0]
    2706:	188a      	adds	r2, r1, r2
    2708:	18d3      	adds	r3, r2, r3
    270a:	781b      	ldrb	r3, [r3, #0]
    270c:	001a      	movs	r2, r3
    270e:	0021      	movs	r1, r4
    2710:	4b09      	ldr	r3, [pc, #36]	; (2738 <_ZN16LedHandler_Class10PowerOnPinEi+0x5c>)
    2712:	4798      	blx	r3
		state.status[pn]=1;
    2714:	687a      	ldr	r2, [r7, #4]
    2716:	4909      	ldr	r1, [pc, #36]	; (273c <_ZN16LedHandler_Class10PowerOnPinEi+0x60>)
    2718:	683b      	ldr	r3, [r7, #0]
    271a:	18d3      	adds	r3, r2, r3
    271c:	185b      	adds	r3, r3, r1
    271e:	2201      	movs	r2, #1
    2720:	701a      	strb	r2, [r3, #0]
		poweron=true;
    2722:	687a      	ldr	r2, [r7, #4]
    2724:	23bb      	movs	r3, #187	; 0xbb
    2726:	005b      	lsls	r3, r3, #1
    2728:	2101      	movs	r1, #1
    272a:	54d1      	strb	r1, [r2, r3]
	}
    272c:	46c0      	nop			; (mov r8, r8)
    272e:	46bd      	mov	sp, r7
    2730:	b003      	add	sp, #12
    2732:	bd90      	pop	{r4, r7, pc}
    2734:	000029c5 	.word	0x000029c5
    2738:	00003245 	.word	0x00003245
    273c:	00000215 	.word	0x00000215

00002740 <_ZN16LedHandler_Class11PowerOffPinEi>:
void	LedHandler_Class::PowerOffPin(int	pn){
    2740:	b590      	push	{r4, r7, lr}
    2742:	b083      	sub	sp, #12
    2744:	af00      	add	r7, sp, #0
    2746:	6078      	str	r0, [r7, #4]
    2748:	6039      	str	r1, [r7, #0]
	ClearPin(pins.allPorts[pn],pins.allPins[pn]);
    274a:	6878      	ldr	r0, [r7, #4]
    274c:	6879      	ldr	r1, [r7, #4]
    274e:	23a2      	movs	r3, #162	; 0xa2
    2750:	33ff      	adds	r3, #255	; 0xff
    2752:	683a      	ldr	r2, [r7, #0]
    2754:	188a      	adds	r2, r1, r2
    2756:	18d3      	adds	r3, r2, r3
    2758:	781c      	ldrb	r4, [r3, #0]
    275a:	6879      	ldr	r1, [r7, #4]
    275c:	23dc      	movs	r3, #220	; 0xdc
    275e:	33ff      	adds	r3, #255	; 0xff
    2760:	683a      	ldr	r2, [r7, #0]
    2762:	188a      	adds	r2, r1, r2
    2764:	18d3      	adds	r3, r2, r3
    2766:	781b      	ldrb	r3, [r3, #0]
    2768:	001a      	movs	r2, r3
    276a:	0021      	movs	r1, r4
    276c:	4b14      	ldr	r3, [pc, #80]	; (27c0 <_ZN16LedHandler_Class11PowerOffPinEi+0x80>)
    276e:	4798      	blx	r3
	pwm_disable(&PWM_0);
    2770:	4b14      	ldr	r3, [pc, #80]	; (27c4 <_ZN16LedHandler_Class11PowerOffPinEi+0x84>)
    2772:	0018      	movs	r0, r3
    2774:	4b14      	ldr	r3, [pc, #80]	; (27c8 <_ZN16LedHandler_Class11PowerOffPinEi+0x88>)
    2776:	4798      	blx	r3
	while(!timerFinish);
    2778:	687a      	ldr	r2, [r7, #4]
    277a:	23be      	movs	r3, #190	; 0xbe
    277c:	005b      	lsls	r3, r3, #1
    277e:	5cd3      	ldrb	r3, [r2, r3]
    2780:	b2db      	uxtb	r3, r3
    2782:	2201      	movs	r2, #1
    2784:	4053      	eors	r3, r2
    2786:	b2db      	uxtb	r3, r3
    2788:	2b00      	cmp	r3, #0
    278a:	d000      	beq.n	278e <_ZN16LedHandler_Class11PowerOffPinEi+0x4e>
    278c:	e7f4      	b.n	2778 <_ZN16LedHandler_Class11PowerOffPinEi+0x38>
	pwmTimer.stop();
    278e:	4b0f      	ldr	r3, [pc, #60]	; (27cc <_ZN16LedHandler_Class11PowerOffPinEi+0x8c>)
    2790:	0018      	movs	r0, r3
    2792:	4b0f      	ldr	r3, [pc, #60]	; (27d0 <_ZN16LedHandler_Class11PowerOffPinEi+0x90>)
    2794:	4798      	blx	r3
	deadTime=false;
    2796:	687a      	ldr	r2, [r7, #4]
    2798:	2378      	movs	r3, #120	; 0x78
    279a:	33ff      	adds	r3, #255	; 0xff
    279c:	2100      	movs	r1, #0
    279e:	54d1      	strb	r1, [r2, r3]
	state.status[pn]=0;
    27a0:	687a      	ldr	r2, [r7, #4]
    27a2:	490c      	ldr	r1, [pc, #48]	; (27d4 <_ZN16LedHandler_Class11PowerOffPinEi+0x94>)
    27a4:	683b      	ldr	r3, [r7, #0]
    27a6:	18d3      	adds	r3, r2, r3
    27a8:	185b      	adds	r3, r3, r1
    27aa:	2200      	movs	r2, #0
    27ac:	701a      	strb	r2, [r3, #0]
	poweron=false;
    27ae:	687a      	ldr	r2, [r7, #4]
    27b0:	23bb      	movs	r3, #187	; 0xbb
    27b2:	005b      	lsls	r3, r3, #1
    27b4:	2100      	movs	r1, #0
    27b6:	54d1      	strb	r1, [r2, r3]
}
    27b8:	46c0      	nop			; (mov r8, r8)
    27ba:	46bd      	mov	sp, r7
    27bc:	b003      	add	sp, #12
    27be:	bd90      	pop	{r4, r7, pc}
    27c0:	00003289 	.word	0x00003289
    27c4:	2000090c 	.word	0x2000090c
    27c8:	00000905 	.word	0x00000905
    27cc:	200007fc 	.word	0x200007fc
    27d0:	00003f51 	.word	0x00003f51
    27d4:	00000215 	.word	0x00000215

000027d8 <_ZN16LedHandler_Class8ClearAllEv>:

void	LedHandler_Class::ClearAll(void){
    27d8:	b590      	push	{r4, r7, lr}
    27da:	b083      	sub	sp, #12
    27dc:	af00      	add	r7, sp, #0
    27de:	6078      	str	r0, [r7, #4]
	for (i = 0; i < totalPins; i++)
    27e0:	687a      	ldr	r2, [r7, #4]
    27e2:	23a3      	movs	r3, #163	; 0xa3
    27e4:	009b      	lsls	r3, r3, #2
    27e6:	2100      	movs	r1, #0
    27e8:	50d1      	str	r1, [r2, r3]
    27ea:	687a      	ldr	r2, [r7, #4]
    27ec:	23a3      	movs	r3, #163	; 0xa3
    27ee:	009b      	lsls	r3, r3, #2
    27f0:	58d3      	ldr	r3, [r2, r3]
    27f2:	687a      	ldr	r2, [r7, #4]
    27f4:	491a      	ldr	r1, [pc, #104]	; (2860 <_ZN16LedHandler_Class8ClearAllEv+0x88>)
    27f6:	5c52      	ldrb	r2, [r2, r1]
    27f8:	4293      	cmp	r3, r2
    27fa:	da2c      	bge.n	2856 <_ZN16LedHandler_Class8ClearAllEv+0x7e>
	{
		ClearPin(pins.allPorts[i],pins.allPins[i]);
    27fc:	6878      	ldr	r0, [r7, #4]
    27fe:	687a      	ldr	r2, [r7, #4]
    2800:	23a3      	movs	r3, #163	; 0xa3
    2802:	009b      	lsls	r3, r3, #2
    2804:	58d2      	ldr	r2, [r2, r3]
    2806:	6879      	ldr	r1, [r7, #4]
    2808:	23a2      	movs	r3, #162	; 0xa2
    280a:	33ff      	adds	r3, #255	; 0xff
    280c:	188a      	adds	r2, r1, r2
    280e:	18d3      	adds	r3, r2, r3
    2810:	781c      	ldrb	r4, [r3, #0]
    2812:	687a      	ldr	r2, [r7, #4]
    2814:	23a3      	movs	r3, #163	; 0xa3
    2816:	009b      	lsls	r3, r3, #2
    2818:	58d2      	ldr	r2, [r2, r3]
    281a:	6879      	ldr	r1, [r7, #4]
    281c:	23dc      	movs	r3, #220	; 0xdc
    281e:	33ff      	adds	r3, #255	; 0xff
    2820:	188a      	adds	r2, r1, r2
    2822:	18d3      	adds	r3, r2, r3
    2824:	781b      	ldrb	r3, [r3, #0]
    2826:	001a      	movs	r2, r3
    2828:	0021      	movs	r1, r4
    282a:	4b0e      	ldr	r3, [pc, #56]	; (2864 <_ZN16LedHandler_Class8ClearAllEv+0x8c>)
    282c:	4798      	blx	r3
		state.status[i]=0;
    282e:	687a      	ldr	r2, [r7, #4]
    2830:	23a3      	movs	r3, #163	; 0xa3
    2832:	009b      	lsls	r3, r3, #2
    2834:	58d3      	ldr	r3, [r2, r3]
    2836:	687a      	ldr	r2, [r7, #4]
    2838:	490b      	ldr	r1, [pc, #44]	; (2868 <_ZN16LedHandler_Class8ClearAllEv+0x90>)
    283a:	18d3      	adds	r3, r2, r3
    283c:	185b      	adds	r3, r3, r1
    283e:	2200      	movs	r2, #0
    2840:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < totalPins; i++)
    2842:	687a      	ldr	r2, [r7, #4]
    2844:	23a3      	movs	r3, #163	; 0xa3
    2846:	009b      	lsls	r3, r3, #2
    2848:	58d3      	ldr	r3, [r2, r3]
    284a:	1c59      	adds	r1, r3, #1
    284c:	687a      	ldr	r2, [r7, #4]
    284e:	23a3      	movs	r3, #163	; 0xa3
    2850:	009b      	lsls	r3, r3, #2
    2852:	50d1      	str	r1, [r2, r3]
    2854:	e7c9      	b.n	27ea <_ZN16LedHandler_Class8ClearAllEv+0x12>
	}
}
    2856:	46c0      	nop			; (mov r8, r8)
    2858:	46bd      	mov	sp, r7
    285a:	b003      	add	sp, #12
    285c:	bd90      	pop	{r4, r7, pc}
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	00000289 	.word	0x00000289
    2864:	00003289 	.word	0x00003289
    2868:	00000215 	.word	0x00000215

0000286c <_ZN16LedHandler_Class6DimmenEi>:
		}
		
	}
}

bool	LedHandler_Class::Dimmen(int	modulate){
    286c:	b580      	push	{r7, lr}
    286e:	b082      	sub	sp, #8
    2870:	af00      	add	r7, sp, #0
    2872:	6078      	str	r0, [r7, #4]
    2874:	6039      	str	r1, [r7, #0]
	keepGoing=true;
    2876:	687a      	ldr	r2, [r7, #4]
    2878:	23d0      	movs	r3, #208	; 0xd0
    287a:	005b      	lsls	r3, r3, #1
    287c:	2101      	movs	r1, #1
    287e:	54d1      	strb	r1, [r2, r3]
	if (modulate>0)
	{
		//	pwm_set_parameters(&PWM_0, period, dutyCycle);
	}
	if (deadTime)
    2880:	687a      	ldr	r2, [r7, #4]
    2882:	2378      	movs	r3, #120	; 0x78
    2884:	33ff      	adds	r3, #255	; 0xff
    2886:	5cd3      	ldrb	r3, [r2, r3]
    2888:	b2db      	uxtb	r3, r3
    288a:	2b00      	cmp	r3, #0
    288c:	d042      	beq.n	2914 <_ZN16LedHandler_Class6DimmenEi+0xa8>
	{
		if (poweron)
    288e:	687a      	ldr	r2, [r7, #4]
    2890:	23bb      	movs	r3, #187	; 0xbb
    2892:	005b      	lsls	r3, r3, #1
    2894:	5cd3      	ldrb	r3, [r2, r3]
    2896:	b2db      	uxtb	r3, r3
    2898:	2b00      	cmp	r3, #0
    289a:	d073      	beq.n	2984 <_ZN16LedHandler_Class6DimmenEi+0x118>
		{
			LightOffActivePins();
    289c:	687b      	ldr	r3, [r7, #4]
    289e:	0018      	movs	r0, r3
    28a0:	4b3c      	ldr	r3, [pc, #240]	; (2994 <_ZN16LedHandler_Class6DimmenEi+0x128>)
    28a2:	4798      	blx	r3
			poweron=false;
    28a4:	687a      	ldr	r2, [r7, #4]
    28a6:	23bb      	movs	r3, #187	; 0xbb
    28a8:	005b      	lsls	r3, r3, #1
    28aa:	2100      	movs	r1, #0
    28ac:	54d1      	strb	r1, [r2, r3]
			//keepGoing=CheckNMIButton();
			if (keepGoing)
    28ae:	687a      	ldr	r2, [r7, #4]
    28b0:	23d0      	movs	r3, #208	; 0xd0
    28b2:	005b      	lsls	r3, r3, #1
    28b4:	5cd3      	ldrb	r3, [r2, r3]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d027      	beq.n	290a <_ZN16LedHandler_Class6DimmenEi+0x9e>
			{
				while(!timerFinish);
    28ba:	687a      	ldr	r2, [r7, #4]
    28bc:	23be      	movs	r3, #190	; 0xbe
    28be:	005b      	lsls	r3, r3, #1
    28c0:	5cd3      	ldrb	r3, [r2, r3]
    28c2:	b2db      	uxtb	r3, r3
    28c4:	2201      	movs	r2, #1
    28c6:	4053      	eors	r3, r2
    28c8:	b2db      	uxtb	r3, r3
    28ca:	2b00      	cmp	r3, #0
    28cc:	d000      	beq.n	28d0 <_ZN16LedHandler_Class6DimmenEi+0x64>
    28ce:	e7f4      	b.n	28ba <_ZN16LedHandler_Class6DimmenEi+0x4e>
				pwmTimer.stop();
    28d0:	4b31      	ldr	r3, [pc, #196]	; (2998 <_ZN16LedHandler_Class6DimmenEi+0x12c>)
    28d2:	0018      	movs	r0, r3
    28d4:	4b31      	ldr	r3, [pc, #196]	; (299c <_ZN16LedHandler_Class6DimmenEi+0x130>)
    28d6:	4798      	blx	r3
				timerFinish=false;
    28d8:	687a      	ldr	r2, [r7, #4]
    28da:	23be      	movs	r3, #190	; 0xbe
    28dc:	005b      	lsls	r3, r3, #1
    28de:	2100      	movs	r1, #0
    28e0:	54d1      	strb	r1, [r2, r3]
				pwmTimer.Start_oneShot_task((FUNC_PTR)PowerOffTimer,(uint32_t)((PWM_WAVE_PERIOD*(1000-dutyCycle))/100000));
    28e2:	687a      	ldr	r2, [r7, #4]
    28e4:	23c0      	movs	r3, #192	; 0xc0
    28e6:	005b      	lsls	r3, r3, #1
    28e8:	58d3      	ldr	r3, [r2, r3]
    28ea:	4a2d      	ldr	r2, [pc, #180]	; (29a0 <_ZN16LedHandler_Class6DimmenEi+0x134>)
    28ec:	4353      	muls	r3, r2
    28ee:	4a2d      	ldr	r2, [pc, #180]	; (29a4 <_ZN16LedHandler_Class6DimmenEi+0x138>)
    28f0:	189a      	adds	r2, r3, r2
    28f2:	4b2d      	ldr	r3, [pc, #180]	; (29a8 <_ZN16LedHandler_Class6DimmenEi+0x13c>)
    28f4:	492d      	ldr	r1, [pc, #180]	; (29ac <_ZN16LedHandler_Class6DimmenEi+0x140>)
    28f6:	0010      	movs	r0, r2
    28f8:	4798      	blx	r3
    28fa:	0003      	movs	r3, r0
    28fc:	001a      	movs	r2, r3
    28fe:	492c      	ldr	r1, [pc, #176]	; (29b0 <_ZN16LedHandler_Class6DimmenEi+0x144>)
    2900:	4b25      	ldr	r3, [pc, #148]	; (2998 <_ZN16LedHandler_Class6DimmenEi+0x12c>)
    2902:	0018      	movs	r0, r3
    2904:	4b2b      	ldr	r3, [pc, #172]	; (29b4 <_ZN16LedHandler_Class6DimmenEi+0x148>)
    2906:	4798      	blx	r3
    2908:	e03c      	b.n	2984 <_ZN16LedHandler_Class6DimmenEi+0x118>
			} 
			else
			{
				return	keepGoing;
    290a:	687a      	ldr	r2, [r7, #4]
    290c:	23d0      	movs	r3, #208	; 0xd0
    290e:	005b      	lsls	r3, r3, #1
    2910:	5cd3      	ldrb	r3, [r2, r3]
    2912:	e03b      	b.n	298c <_ZN16LedHandler_Class6DimmenEi+0x120>
				
		}			
	}
	else
	{
		if (!poweron)
    2914:	687a      	ldr	r2, [r7, #4]
    2916:	23bb      	movs	r3, #187	; 0xbb
    2918:	005b      	lsls	r3, r3, #1
    291a:	5cd3      	ldrb	r3, [r2, r3]
    291c:	b2db      	uxtb	r3, r3
    291e:	2201      	movs	r2, #1
    2920:	4053      	eors	r3, r2
    2922:	b2db      	uxtb	r3, r3
    2924:	2b00      	cmp	r3, #0
    2926:	d02d      	beq.n	2984 <_ZN16LedHandler_Class6DimmenEi+0x118>
		{
			LightOnActivePins();
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	0018      	movs	r0, r3
    292c:	4b22      	ldr	r3, [pc, #136]	; (29b8 <_ZN16LedHandler_Class6DimmenEi+0x14c>)
    292e:	4798      	blx	r3
			while(!timerFinish);
    2930:	687a      	ldr	r2, [r7, #4]
    2932:	23be      	movs	r3, #190	; 0xbe
    2934:	005b      	lsls	r3, r3, #1
    2936:	5cd3      	ldrb	r3, [r2, r3]
    2938:	b2db      	uxtb	r3, r3
    293a:	2201      	movs	r2, #1
    293c:	4053      	eors	r3, r2
    293e:	b2db      	uxtb	r3, r3
    2940:	2b00      	cmp	r3, #0
    2942:	d000      	beq.n	2946 <_ZN16LedHandler_Class6DimmenEi+0xda>
    2944:	e7f4      	b.n	2930 <_ZN16LedHandler_Class6DimmenEi+0xc4>
			pwmTimer.stop();
    2946:	4b14      	ldr	r3, [pc, #80]	; (2998 <_ZN16LedHandler_Class6DimmenEi+0x12c>)
    2948:	0018      	movs	r0, r3
    294a:	4b14      	ldr	r3, [pc, #80]	; (299c <_ZN16LedHandler_Class6DimmenEi+0x130>)
    294c:	4798      	blx	r3
			timerFinish=false;
    294e:	687a      	ldr	r2, [r7, #4]
    2950:	23be      	movs	r3, #190	; 0xbe
    2952:	005b      	lsls	r3, r3, #1
    2954:	2100      	movs	r1, #0
    2956:	54d1      	strb	r1, [r2, r3]
			pwmTimer.Start_oneShot_task((FUNC_PTR)PowerOnTimer,(uint32_t)((PWM_WAVE_PERIOD*dutyCycle)/100000));
    2958:	687a      	ldr	r2, [r7, #4]
    295a:	23c0      	movs	r3, #192	; 0xc0
    295c:	005b      	lsls	r3, r3, #1
    295e:	58d3      	ldr	r3, [r2, r3]
    2960:	4a16      	ldr	r2, [pc, #88]	; (29bc <_ZN16LedHandler_Class6DimmenEi+0x150>)
    2962:	435a      	muls	r2, r3
    2964:	4b10      	ldr	r3, [pc, #64]	; (29a8 <_ZN16LedHandler_Class6DimmenEi+0x13c>)
    2966:	4911      	ldr	r1, [pc, #68]	; (29ac <_ZN16LedHandler_Class6DimmenEi+0x140>)
    2968:	0010      	movs	r0, r2
    296a:	4798      	blx	r3
    296c:	0003      	movs	r3, r0
    296e:	001a      	movs	r2, r3
    2970:	4913      	ldr	r1, [pc, #76]	; (29c0 <_ZN16LedHandler_Class6DimmenEi+0x154>)
    2972:	4b09      	ldr	r3, [pc, #36]	; (2998 <_ZN16LedHandler_Class6DimmenEi+0x12c>)
    2974:	0018      	movs	r0, r3
    2976:	4b0f      	ldr	r3, [pc, #60]	; (29b4 <_ZN16LedHandler_Class6DimmenEi+0x148>)
    2978:	4798      	blx	r3
			//SetPowerOnTimer();
			poweron=true;
    297a:	687a      	ldr	r2, [r7, #4]
    297c:	23bb      	movs	r3, #187	; 0xbb
    297e:	005b      	lsls	r3, r3, #1
    2980:	2101      	movs	r1, #1
    2982:	54d1      	strb	r1, [r2, r3]
				
		}
			
			
	}
	return	keepGoing;
    2984:	687a      	ldr	r2, [r7, #4]
    2986:	23d0      	movs	r3, #208	; 0xd0
    2988:	005b      	lsls	r3, r3, #1
    298a:	5cd3      	ldrb	r3, [r2, r3]
}
    298c:	0018      	movs	r0, r3
    298e:	46bd      	mov	sp, r7
    2990:	b002      	add	sp, #8
    2992:	bd80      	pop	{r7, pc}
    2994:	00002a79 	.word	0x00002a79
    2998:	200007fc 	.word	0x200007fc
    299c:	00003f51 	.word	0x00003f51
    29a0:	ffffd8f0 	.word	0xffffd8f0
    29a4:	00989680 	.word	0x00989680
    29a8:	00004b15 	.word	0x00004b15
    29ac:	000186a0 	.word	0x000186a0
    29b0:	000017bd 	.word	0x000017bd
    29b4:	00003fe1 	.word	0x00003fe1
    29b8:	000029e5 	.word	0x000029e5
    29bc:	00002710 	.word	0x00002710
    29c0:	00001781 	.word	0x00001781

000029c4 <_ZN16LedHandler_Class15SetPowerOnTimerEv>:
	
	

void	LedHandler_Class::SetPowerOnTimer(void){
    29c4:	b580      	push	{r7, lr}
    29c6:	b082      	sub	sp, #8
    29c8:	af00      	add	r7, sp, #0
    29ca:	6078      	str	r0, [r7, #4]
		//pwmTimer.stop();
		pwm_enable(&PWM_0);
    29cc:	4b03      	ldr	r3, [pc, #12]	; (29dc <_ZN16LedHandler_Class15SetPowerOnTimerEv+0x18>)
    29ce:	0018      	movs	r0, r3
    29d0:	4b03      	ldr	r3, [pc, #12]	; (29e0 <_ZN16LedHandler_Class15SetPowerOnTimerEv+0x1c>)
    29d2:	4798      	blx	r3
		

}
    29d4:	46c0      	nop			; (mov r8, r8)
    29d6:	46bd      	mov	sp, r7
    29d8:	b002      	add	sp, #8
    29da:	bd80      	pop	{r7, pc}
    29dc:	2000090c 	.word	0x2000090c
    29e0:	000008c9 	.word	0x000008c9

000029e4 <_ZN16LedHandler_Class17LightOnActivePinsEv>:
//	pwmTimer.remove_task();
//	pwmTimer.add_oneShot_task((FUNC_PTR)PowerOffTimer,uint32_t(period*(1000-dutyCycle)/1000));
//	pwmTimer.start();
}

void	LedHandler_Class::LightOnActivePins(void){
    29e4:	b590      	push	{r4, r7, lr}
    29e6:	b083      	sub	sp, #12
    29e8:	af00      	add	r7, sp, #0
    29ea:	6078      	str	r0, [r7, #4]
		for (i = 0; i < totalPins; i++)
    29ec:	687a      	ldr	r2, [r7, #4]
    29ee:	23a3      	movs	r3, #163	; 0xa3
    29f0:	009b      	lsls	r3, r3, #2
    29f2:	2100      	movs	r1, #0
    29f4:	50d1      	str	r1, [r2, r3]
    29f6:	687a      	ldr	r2, [r7, #4]
    29f8:	23a3      	movs	r3, #163	; 0xa3
    29fa:	009b      	lsls	r3, r3, #2
    29fc:	58d3      	ldr	r3, [r2, r3]
    29fe:	687a      	ldr	r2, [r7, #4]
    2a00:	491a      	ldr	r1, [pc, #104]	; (2a6c <_ZN16LedHandler_Class17LightOnActivePinsEv+0x88>)
    2a02:	5c52      	ldrb	r2, [r2, r1]
    2a04:	4293      	cmp	r3, r2
    2a06:	da2d      	bge.n	2a64 <_ZN16LedHandler_Class17LightOnActivePinsEv+0x80>
		{
			if (state.status[i]==1)
    2a08:	687a      	ldr	r2, [r7, #4]
    2a0a:	23a3      	movs	r3, #163	; 0xa3
    2a0c:	009b      	lsls	r3, r3, #2
    2a0e:	58d3      	ldr	r3, [r2, r3]
    2a10:	687a      	ldr	r2, [r7, #4]
    2a12:	4917      	ldr	r1, [pc, #92]	; (2a70 <_ZN16LedHandler_Class17LightOnActivePinsEv+0x8c>)
    2a14:	18d3      	adds	r3, r2, r3
    2a16:	185b      	adds	r3, r3, r1
    2a18:	781b      	ldrb	r3, [r3, #0]
    2a1a:	2b01      	cmp	r3, #1
    2a1c:	d118      	bne.n	2a50 <_ZN16LedHandler_Class17LightOnActivePinsEv+0x6c>
			{
				SetPin(pins.allPorts[i],pins.allPins[i]);
    2a1e:	6878      	ldr	r0, [r7, #4]
    2a20:	687a      	ldr	r2, [r7, #4]
    2a22:	23a3      	movs	r3, #163	; 0xa3
    2a24:	009b      	lsls	r3, r3, #2
    2a26:	58d2      	ldr	r2, [r2, r3]
    2a28:	6879      	ldr	r1, [r7, #4]
    2a2a:	23a2      	movs	r3, #162	; 0xa2
    2a2c:	33ff      	adds	r3, #255	; 0xff
    2a2e:	188a      	adds	r2, r1, r2
    2a30:	18d3      	adds	r3, r2, r3
    2a32:	781c      	ldrb	r4, [r3, #0]
    2a34:	687a      	ldr	r2, [r7, #4]
    2a36:	23a3      	movs	r3, #163	; 0xa3
    2a38:	009b      	lsls	r3, r3, #2
    2a3a:	58d2      	ldr	r2, [r2, r3]
    2a3c:	6879      	ldr	r1, [r7, #4]
    2a3e:	23dc      	movs	r3, #220	; 0xdc
    2a40:	33ff      	adds	r3, #255	; 0xff
    2a42:	188a      	adds	r2, r1, r2
    2a44:	18d3      	adds	r3, r2, r3
    2a46:	781b      	ldrb	r3, [r3, #0]
    2a48:	001a      	movs	r2, r3
    2a4a:	0021      	movs	r1, r4
    2a4c:	4b09      	ldr	r3, [pc, #36]	; (2a74 <_ZN16LedHandler_Class17LightOnActivePinsEv+0x90>)
    2a4e:	4798      	blx	r3
		for (i = 0; i < totalPins; i++)
    2a50:	687a      	ldr	r2, [r7, #4]
    2a52:	23a3      	movs	r3, #163	; 0xa3
    2a54:	009b      	lsls	r3, r3, #2
    2a56:	58d3      	ldr	r3, [r2, r3]
    2a58:	1c59      	adds	r1, r3, #1
    2a5a:	687a      	ldr	r2, [r7, #4]
    2a5c:	23a3      	movs	r3, #163	; 0xa3
    2a5e:	009b      	lsls	r3, r3, #2
    2a60:	50d1      	str	r1, [r2, r3]
    2a62:	e7c8      	b.n	29f6 <_ZN16LedHandler_Class17LightOnActivePinsEv+0x12>
				//ClearPin(pins.allPorts[i],pins.allPins[i]);
				
			}
			
		}
}
    2a64:	46c0      	nop			; (mov r8, r8)
    2a66:	46bd      	mov	sp, r7
    2a68:	b003      	add	sp, #12
    2a6a:	bd90      	pop	{r4, r7, pc}
    2a6c:	00000289 	.word	0x00000289
    2a70:	00000215 	.word	0x00000215
    2a74:	00003245 	.word	0x00003245

00002a78 <_ZN16LedHandler_Class18LightOffActivePinsEv>:

void	LedHandler_Class::LightOffActivePins(void){
    2a78:	b590      	push	{r4, r7, lr}
    2a7a:	b083      	sub	sp, #12
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	6078      	str	r0, [r7, #4]
	for (i = 0; i < totalPins; i++)
    2a80:	687a      	ldr	r2, [r7, #4]
    2a82:	23a3      	movs	r3, #163	; 0xa3
    2a84:	009b      	lsls	r3, r3, #2
    2a86:	2100      	movs	r1, #0
    2a88:	50d1      	str	r1, [r2, r3]
    2a8a:	687a      	ldr	r2, [r7, #4]
    2a8c:	23a3      	movs	r3, #163	; 0xa3
    2a8e:	009b      	lsls	r3, r3, #2
    2a90:	58d3      	ldr	r3, [r2, r3]
    2a92:	687a      	ldr	r2, [r7, #4]
    2a94:	4915      	ldr	r1, [pc, #84]	; (2aec <_ZN16LedHandler_Class18LightOffActivePinsEv+0x74>)
    2a96:	5c52      	ldrb	r2, [r2, r1]
    2a98:	4293      	cmp	r3, r2
    2a9a:	da22      	bge.n	2ae2 <_ZN16LedHandler_Class18LightOffActivePinsEv+0x6a>
	{

			ClearPin(pins.allPorts[i],pins.allPins[i]);
    2a9c:	6878      	ldr	r0, [r7, #4]
    2a9e:	687a      	ldr	r2, [r7, #4]
    2aa0:	23a3      	movs	r3, #163	; 0xa3
    2aa2:	009b      	lsls	r3, r3, #2
    2aa4:	58d2      	ldr	r2, [r2, r3]
    2aa6:	6879      	ldr	r1, [r7, #4]
    2aa8:	23a2      	movs	r3, #162	; 0xa2
    2aaa:	33ff      	adds	r3, #255	; 0xff
    2aac:	188a      	adds	r2, r1, r2
    2aae:	18d3      	adds	r3, r2, r3
    2ab0:	781c      	ldrb	r4, [r3, #0]
    2ab2:	687a      	ldr	r2, [r7, #4]
    2ab4:	23a3      	movs	r3, #163	; 0xa3
    2ab6:	009b      	lsls	r3, r3, #2
    2ab8:	58d2      	ldr	r2, [r2, r3]
    2aba:	6879      	ldr	r1, [r7, #4]
    2abc:	23dc      	movs	r3, #220	; 0xdc
    2abe:	33ff      	adds	r3, #255	; 0xff
    2ac0:	188a      	adds	r2, r1, r2
    2ac2:	18d3      	adds	r3, r2, r3
    2ac4:	781b      	ldrb	r3, [r3, #0]
    2ac6:	001a      	movs	r2, r3
    2ac8:	0021      	movs	r1, r4
    2aca:	4b09      	ldr	r3, [pc, #36]	; (2af0 <_ZN16LedHandler_Class18LightOffActivePinsEv+0x78>)
    2acc:	4798      	blx	r3
	for (i = 0; i < totalPins; i++)
    2ace:	687a      	ldr	r2, [r7, #4]
    2ad0:	23a3      	movs	r3, #163	; 0xa3
    2ad2:	009b      	lsls	r3, r3, #2
    2ad4:	58d3      	ldr	r3, [r2, r3]
    2ad6:	1c59      	adds	r1, r3, #1
    2ad8:	687a      	ldr	r2, [r7, #4]
    2ada:	23a3      	movs	r3, #163	; 0xa3
    2adc:	009b      	lsls	r3, r3, #2
    2ade:	50d1      	str	r1, [r2, r3]
    2ae0:	e7d3      	b.n	2a8a <_ZN16LedHandler_Class18LightOffActivePinsEv+0x12>

	}
}
    2ae2:	46c0      	nop			; (mov r8, r8)
    2ae4:	46bd      	mov	sp, r7
    2ae6:	b003      	add	sp, #12
    2ae8:	bd90      	pop	{r4, r7, pc}
    2aea:	46c0      	nop			; (mov r8, r8)
    2aec:	00000289 	.word	0x00000289
    2af0:	00003289 	.word	0x00003289

00002af4 <_ZN16LedHandler_Class12GetTotalPinsEv>:
void	LedHandler_Class::Modulate(void){
	
}
uint8_t	LedHandler_Class::GetTotalPins(void){
    2af4:	b580      	push	{r7, lr}
    2af6:	b082      	sub	sp, #8
    2af8:	af00      	add	r7, sp, #0
    2afa:	6078      	str	r0, [r7, #4]
	return	totalPins;
    2afc:	687b      	ldr	r3, [r7, #4]
    2afe:	4a03      	ldr	r2, [pc, #12]	; (2b0c <_ZN16LedHandler_Class12GetTotalPinsEv+0x18>)
    2b00:	5c9b      	ldrb	r3, [r3, r2]
}
    2b02:	0018      	movs	r0, r3
    2b04:	46bd      	mov	sp, r7
    2b06:	b002      	add	sp, #8
    2b08:	bd80      	pop	{r7, pc}
    2b0a:	46c0      	nop			; (mov r8, r8)
    2b0c:	00000289 	.word	0x00000289

00002b10 <_Z41__static_initialization_and_destruction_0ii>:

LedHandler_Class		lighter;
    2b10:	b580      	push	{r7, lr}
    2b12:	b082      	sub	sp, #8
    2b14:	af00      	add	r7, sp, #0
    2b16:	6078      	str	r0, [r7, #4]
    2b18:	6039      	str	r1, [r7, #0]
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	2b01      	cmp	r3, #1
    2b1e:	d10d      	bne.n	2b3c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2b20:	683b      	ldr	r3, [r7, #0]
    2b22:	4a08      	ldr	r2, [pc, #32]	; (2b44 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2b24:	4293      	cmp	r3, r2
    2b26:	d109      	bne.n	2b3c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2b28:	4b07      	ldr	r3, [pc, #28]	; (2b48 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2b2a:	0018      	movs	r0, r3
    2b2c:	4b07      	ldr	r3, [pc, #28]	; (2b4c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2b2e:	4798      	blx	r3
    2b30:	4a07      	ldr	r2, [pc, #28]	; (2b50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2b32:	4908      	ldr	r1, [pc, #32]	; (2b54 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2b34:	4b04      	ldr	r3, [pc, #16]	; (2b48 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2b36:	0018      	movs	r0, r3
    2b38:	4b07      	ldr	r3, [pc, #28]	; (2b58 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    2b3a:	4798      	blx	r3
    2b3c:	46c0      	nop			; (mov r8, r8)
    2b3e:	46bd      	mov	sp, r7
    2b40:	b002      	add	sp, #8
    2b42:	bd80      	pop	{r7, pc}
    2b44:	0000ffff 	.word	0x0000ffff
    2b48:	200004ec 	.word	0x200004ec
    2b4c:	000017e9 	.word	0x000017e9
    2b50:	20000000 	.word	0x20000000
    2b54:	00001845 	.word	0x00001845
    2b58:	00004b05 	.word	0x00004b05

00002b5c <_GLOBAL__sub_I_ptrLedHandler>:
    2b5c:	b580      	push	{r7, lr}
    2b5e:	af00      	add	r7, sp, #0
    2b60:	4b03      	ldr	r3, [pc, #12]	; (2b70 <_GLOBAL__sub_I_ptrLedHandler+0x14>)
    2b62:	0019      	movs	r1, r3
    2b64:	2001      	movs	r0, #1
    2b66:	4b03      	ldr	r3, [pc, #12]	; (2b74 <_GLOBAL__sub_I_ptrLedHandler+0x18>)
    2b68:	4798      	blx	r3
    2b6a:	46bd      	mov	sp, r7
    2b6c:	bd80      	pop	{r7, pc}
    2b6e:	46c0      	nop			; (mov r8, r8)
    2b70:	0000ffff 	.word	0x0000ffff
    2b74:	00002b11 	.word	0x00002b11

00002b78 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2b78:	b580      	push	{r7, lr}
    2b7a:	b084      	sub	sp, #16
    2b7c:	af00      	add	r7, sp, #0
    2b7e:	60f8      	str	r0, [r7, #12]
    2b80:	607a      	str	r2, [r7, #4]
    2b82:	230b      	movs	r3, #11
    2b84:	18fb      	adds	r3, r7, r3
    2b86:	1c0a      	adds	r2, r1, #0
    2b88:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2b8a:	230b      	movs	r3, #11
    2b8c:	18fb      	adds	r3, r7, r3
    2b8e:	781b      	ldrb	r3, [r3, #0]
    2b90:	68fa      	ldr	r2, [r7, #12]
    2b92:	01db      	lsls	r3, r3, #7
    2b94:	18d3      	adds	r3, r2, r3
    2b96:	3308      	adds	r3, #8
    2b98:	687a      	ldr	r2, [r7, #4]
    2b9a:	601a      	str	r2, [r3, #0]
}
    2b9c:	46c0      	nop			; (mov r8, r8)
    2b9e:	46bd      	mov	sp, r7
    2ba0:	b004      	add	sp, #16
    2ba2:	bd80      	pop	{r7, pc}

00002ba4 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2ba4:	b580      	push	{r7, lr}
    2ba6:	b084      	sub	sp, #16
    2ba8:	af00      	add	r7, sp, #0
    2baa:	60f8      	str	r0, [r7, #12]
    2bac:	607a      	str	r2, [r7, #4]
    2bae:	230b      	movs	r3, #11
    2bb0:	18fb      	adds	r3, r7, r3
    2bb2:	1c0a      	adds	r2, r1, #0
    2bb4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2bb6:	230b      	movs	r3, #11
    2bb8:	18fb      	adds	r3, r7, r3
    2bba:	781b      	ldrb	r3, [r3, #0]
    2bbc:	68fa      	ldr	r2, [r7, #12]
    2bbe:	01db      	lsls	r3, r3, #7
    2bc0:	18d3      	adds	r3, r2, r3
    2bc2:	3304      	adds	r3, #4
    2bc4:	687a      	ldr	r2, [r7, #4]
    2bc6:	601a      	str	r2, [r3, #0]
}
    2bc8:	46c0      	nop			; (mov r8, r8)
    2bca:	46bd      	mov	sp, r7
    2bcc:	b004      	add	sp, #16
    2bce:	bd80      	pop	{r7, pc}

00002bd0 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2bd0:	b580      	push	{r7, lr}
    2bd2:	b084      	sub	sp, #16
    2bd4:	af00      	add	r7, sp, #0
    2bd6:	60f8      	str	r0, [r7, #12]
    2bd8:	607a      	str	r2, [r7, #4]
    2bda:	230b      	movs	r3, #11
    2bdc:	18fb      	adds	r3, r7, r3
    2bde:	1c0a      	adds	r2, r1, #0
    2be0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2be2:	230b      	movs	r3, #11
    2be4:	18fb      	adds	r3, r7, r3
    2be6:	781b      	ldrb	r3, [r3, #0]
    2be8:	68fa      	ldr	r2, [r7, #12]
    2bea:	01db      	lsls	r3, r3, #7
    2bec:	18d3      	adds	r3, r2, r3
    2bee:	3318      	adds	r3, #24
    2bf0:	687a      	ldr	r2, [r7, #4]
    2bf2:	601a      	str	r2, [r3, #0]
}
    2bf4:	46c0      	nop			; (mov r8, r8)
    2bf6:	46bd      	mov	sp, r7
    2bf8:	b004      	add	sp, #16
    2bfa:	bd80      	pop	{r7, pc}

00002bfc <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2bfc:	b580      	push	{r7, lr}
    2bfe:	b084      	sub	sp, #16
    2c00:	af00      	add	r7, sp, #0
    2c02:	60f8      	str	r0, [r7, #12]
    2c04:	607a      	str	r2, [r7, #4]
    2c06:	230b      	movs	r3, #11
    2c08:	18fb      	adds	r3, r7, r3
    2c0a:	1c0a      	adds	r2, r1, #0
    2c0c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2c0e:	230b      	movs	r3, #11
    2c10:	18fb      	adds	r3, r7, r3
    2c12:	781b      	ldrb	r3, [r3, #0]
    2c14:	68fa      	ldr	r2, [r7, #12]
    2c16:	01db      	lsls	r3, r3, #7
    2c18:	18d3      	adds	r3, r2, r3
    2c1a:	3314      	adds	r3, #20
    2c1c:	687a      	ldr	r2, [r7, #4]
    2c1e:	601a      	str	r2, [r3, #0]
}
    2c20:	46c0      	nop			; (mov r8, r8)
    2c22:	46bd      	mov	sp, r7
    2c24:	b004      	add	sp, #16
    2c26:	bd80      	pop	{r7, pc}

00002c28 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2c28:	b590      	push	{r4, r7, lr}
    2c2a:	b085      	sub	sp, #20
    2c2c:	af00      	add	r7, sp, #0
    2c2e:	6078      	str	r0, [r7, #4]
    2c30:	000c      	movs	r4, r1
    2c32:	0010      	movs	r0, r2
    2c34:	0019      	movs	r1, r3
    2c36:	1cfb      	adds	r3, r7, #3
    2c38:	1c22      	adds	r2, r4, #0
    2c3a:	701a      	strb	r2, [r3, #0]
    2c3c:	1cbb      	adds	r3, r7, #2
    2c3e:	1c02      	adds	r2, r0, #0
    2c40:	701a      	strb	r2, [r3, #0]
    2c42:	1c7b      	adds	r3, r7, #1
    2c44:	1c0a      	adds	r2, r1, #0
    2c46:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2c48:	1cfb      	adds	r3, r7, #3
    2c4a:	7819      	ldrb	r1, [r3, #0]
    2c4c:	1cbb      	adds	r3, r7, #2
    2c4e:	781a      	ldrb	r2, [r3, #0]
    2c50:	230f      	movs	r3, #15
    2c52:	18fb      	adds	r3, r7, r3
    2c54:	6878      	ldr	r0, [r7, #4]
    2c56:	2430      	movs	r4, #48	; 0x30
    2c58:	01c9      	lsls	r1, r1, #7
    2c5a:	1841      	adds	r1, r0, r1
    2c5c:	188a      	adds	r2, r1, r2
    2c5e:	1912      	adds	r2, r2, r4
    2c60:	7812      	ldrb	r2, [r2, #0]
    2c62:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2c64:	230f      	movs	r3, #15
    2c66:	18fb      	adds	r3, r7, r3
    2c68:	220f      	movs	r2, #15
    2c6a:	18ba      	adds	r2, r7, r2
    2c6c:	7812      	ldrb	r2, [r2, #0]
    2c6e:	210f      	movs	r1, #15
    2c70:	438a      	bics	r2, r1
    2c72:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
    2c74:	1c7b      	adds	r3, r7, #1
    2c76:	781b      	ldrb	r3, [r3, #0]
    2c78:	220f      	movs	r2, #15
    2c7a:	4013      	ands	r3, r2
    2c7c:	b2d9      	uxtb	r1, r3
    2c7e:	230f      	movs	r3, #15
    2c80:	18fb      	adds	r3, r7, r3
    2c82:	220f      	movs	r2, #15
    2c84:	18ba      	adds	r2, r7, r2
    2c86:	7812      	ldrb	r2, [r2, #0]
    2c88:	430a      	orrs	r2, r1
    2c8a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2c8c:	1cfb      	adds	r3, r7, #3
    2c8e:	781a      	ldrb	r2, [r3, #0]
    2c90:	1cbb      	adds	r3, r7, #2
    2c92:	781b      	ldrb	r3, [r3, #0]
    2c94:	6879      	ldr	r1, [r7, #4]
    2c96:	2030      	movs	r0, #48	; 0x30
    2c98:	01d2      	lsls	r2, r2, #7
    2c9a:	188a      	adds	r2, r1, r2
    2c9c:	18d3      	adds	r3, r2, r3
    2c9e:	181b      	adds	r3, r3, r0
    2ca0:	220f      	movs	r2, #15
    2ca2:	18ba      	adds	r2, r7, r2
    2ca4:	7812      	ldrb	r2, [r2, #0]
    2ca6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2ca8:	46c0      	nop			; (mov r8, r8)
    2caa:	46bd      	mov	sp, r7
    2cac:	b005      	add	sp, #20
    2cae:	bd90      	pop	{r4, r7, pc}

00002cb0 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2cb0:	b590      	push	{r4, r7, lr}
    2cb2:	b085      	sub	sp, #20
    2cb4:	af00      	add	r7, sp, #0
    2cb6:	6078      	str	r0, [r7, #4]
    2cb8:	000c      	movs	r4, r1
    2cba:	0010      	movs	r0, r2
    2cbc:	0019      	movs	r1, r3
    2cbe:	1cfb      	adds	r3, r7, #3
    2cc0:	1c22      	adds	r2, r4, #0
    2cc2:	701a      	strb	r2, [r3, #0]
    2cc4:	1cbb      	adds	r3, r7, #2
    2cc6:	1c02      	adds	r2, r0, #0
    2cc8:	701a      	strb	r2, [r3, #0]
    2cca:	1c7b      	adds	r3, r7, #1
    2ccc:	1c0a      	adds	r2, r1, #0
    2cce:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2cd0:	1cfb      	adds	r3, r7, #3
    2cd2:	7819      	ldrb	r1, [r3, #0]
    2cd4:	1cbb      	adds	r3, r7, #2
    2cd6:	781a      	ldrb	r2, [r3, #0]
    2cd8:	230f      	movs	r3, #15
    2cda:	18fb      	adds	r3, r7, r3
    2cdc:	6878      	ldr	r0, [r7, #4]
    2cde:	2430      	movs	r4, #48	; 0x30
    2ce0:	01c9      	lsls	r1, r1, #7
    2ce2:	1841      	adds	r1, r0, r1
    2ce4:	188a      	adds	r2, r1, r2
    2ce6:	1912      	adds	r2, r2, r4
    2ce8:	7812      	ldrb	r2, [r2, #0]
    2cea:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2cec:	230f      	movs	r3, #15
    2cee:	18fb      	adds	r3, r7, r3
    2cf0:	220f      	movs	r2, #15
    2cf2:	18ba      	adds	r2, r7, r2
    2cf4:	7812      	ldrb	r2, [r2, #0]
    2cf6:	210f      	movs	r1, #15
    2cf8:	400a      	ands	r2, r1
    2cfa:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
    2cfc:	1c7b      	adds	r3, r7, #1
    2cfe:	781b      	ldrb	r3, [r3, #0]
    2d00:	011b      	lsls	r3, r3, #4
    2d02:	b2d9      	uxtb	r1, r3
    2d04:	230f      	movs	r3, #15
    2d06:	18fb      	adds	r3, r7, r3
    2d08:	220f      	movs	r2, #15
    2d0a:	18ba      	adds	r2, r7, r2
    2d0c:	7812      	ldrb	r2, [r2, #0]
    2d0e:	430a      	orrs	r2, r1
    2d10:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2d12:	1cfb      	adds	r3, r7, #3
    2d14:	781a      	ldrb	r2, [r3, #0]
    2d16:	1cbb      	adds	r3, r7, #2
    2d18:	781b      	ldrb	r3, [r3, #0]
    2d1a:	6879      	ldr	r1, [r7, #4]
    2d1c:	2030      	movs	r0, #48	; 0x30
    2d1e:	01d2      	lsls	r2, r2, #7
    2d20:	188a      	adds	r2, r1, r2
    2d22:	18d3      	adds	r3, r2, r3
    2d24:	181b      	adds	r3, r3, r0
    2d26:	220f      	movs	r2, #15
    2d28:	18ba      	adds	r2, r7, r2
    2d2a:	7812      	ldrb	r2, [r2, #0]
    2d2c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2d2e:	46c0      	nop			; (mov r8, r8)
    2d30:	46bd      	mov	sp, r7
    2d32:	b005      	add	sp, #20
    2d34:	bd90      	pop	{r4, r7, pc}

00002d36 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    2d36:	b590      	push	{r4, r7, lr}
    2d38:	b085      	sub	sp, #20
    2d3a:	af00      	add	r7, sp, #0
    2d3c:	6078      	str	r0, [r7, #4]
    2d3e:	000c      	movs	r4, r1
    2d40:	0010      	movs	r0, r2
    2d42:	0019      	movs	r1, r3
    2d44:	1cfb      	adds	r3, r7, #3
    2d46:	1c22      	adds	r2, r4, #0
    2d48:	701a      	strb	r2, [r3, #0]
    2d4a:	1cbb      	adds	r3, r7, #2
    2d4c:	1c02      	adds	r2, r0, #0
    2d4e:	701a      	strb	r2, [r3, #0]
    2d50:	1c7b      	adds	r3, r7, #1
    2d52:	1c0a      	adds	r2, r1, #0
    2d54:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d56:	1cfb      	adds	r3, r7, #3
    2d58:	7819      	ldrb	r1, [r3, #0]
    2d5a:	1cbb      	adds	r3, r7, #2
    2d5c:	781a      	ldrb	r2, [r3, #0]
    2d5e:	230f      	movs	r3, #15
    2d60:	18fb      	adds	r3, r7, r3
    2d62:	6878      	ldr	r0, [r7, #4]
    2d64:	2440      	movs	r4, #64	; 0x40
    2d66:	01c9      	lsls	r1, r1, #7
    2d68:	1841      	adds	r1, r0, r1
    2d6a:	188a      	adds	r2, r1, r2
    2d6c:	1912      	adds	r2, r2, r4
    2d6e:	7812      	ldrb	r2, [r2, #0]
    2d70:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d72:	230f      	movs	r3, #15
    2d74:	18fb      	adds	r3, r7, r3
    2d76:	220f      	movs	r2, #15
    2d78:	18ba      	adds	r2, r7, r2
    2d7a:	7812      	ldrb	r2, [r2, #0]
    2d7c:	2101      	movs	r1, #1
    2d7e:	438a      	bics	r2, r1
    2d80:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2d82:	1c7b      	adds	r3, r7, #1
    2d84:	7819      	ldrb	r1, [r3, #0]
    2d86:	230f      	movs	r3, #15
    2d88:	18fb      	adds	r3, r7, r3
    2d8a:	220f      	movs	r2, #15
    2d8c:	18ba      	adds	r2, r7, r2
    2d8e:	7812      	ldrb	r2, [r2, #0]
    2d90:	430a      	orrs	r2, r1
    2d92:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d94:	1cfb      	adds	r3, r7, #3
    2d96:	781a      	ldrb	r2, [r3, #0]
    2d98:	1cbb      	adds	r3, r7, #2
    2d9a:	781b      	ldrb	r3, [r3, #0]
    2d9c:	6879      	ldr	r1, [r7, #4]
    2d9e:	2040      	movs	r0, #64	; 0x40
    2da0:	01d2      	lsls	r2, r2, #7
    2da2:	188a      	adds	r2, r1, r2
    2da4:	18d3      	adds	r3, r2, r3
    2da6:	181b      	adds	r3, r3, r0
    2da8:	220f      	movs	r2, #15
    2daa:	18ba      	adds	r2, r7, r2
    2dac:	7812      	ldrb	r2, [r2, #0]
    2dae:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2db0:	46c0      	nop			; (mov r8, r8)
    2db2:	46bd      	mov	sp, r7
    2db4:	b005      	add	sp, #20
    2db6:	bd90      	pop	{r4, r7, pc}

00002db8 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    2db8:	b580      	push	{r7, lr}
    2dba:	b084      	sub	sp, #16
    2dbc:	af00      	add	r7, sp, #0
    2dbe:	60f8      	str	r0, [r7, #12]
    2dc0:	607a      	str	r2, [r7, #4]
    2dc2:	230b      	movs	r3, #11
    2dc4:	18fb      	adds	r3, r7, r3
    2dc6:	1c0a      	adds	r2, r1, #0
    2dc8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2dca:	230b      	movs	r3, #11
    2dcc:	18fb      	adds	r3, r7, r3
    2dce:	781b      	ldrb	r3, [r3, #0]
    2dd0:	68fa      	ldr	r2, [r7, #12]
    2dd2:	01db      	lsls	r3, r3, #7
    2dd4:	18d3      	adds	r3, r2, r3
    2dd6:	3328      	adds	r3, #40	; 0x28
    2dd8:	687a      	ldr	r2, [r7, #4]
    2dda:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2ddc:	46c0      	nop			; (mov r8, r8)
    2dde:	46bd      	mov	sp, r7
    2de0:	b004      	add	sp, #16
    2de2:	bd80      	pop	{r7, pc}

00002de4 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	b082      	sub	sp, #8
    2de8:	af00      	add	r7, sp, #0
    2dea:	6039      	str	r1, [r7, #0]
    2dec:	0011      	movs	r1, r2
    2dee:	1dfb      	adds	r3, r7, #7
    2df0:	1c02      	adds	r2, r0, #0
    2df2:	701a      	strb	r2, [r3, #0]
    2df4:	1dbb      	adds	r3, r7, #6
    2df6:	1c0a      	adds	r2, r1, #0
    2df8:	701a      	strb	r2, [r3, #0]
	switch (direction) {
    2dfa:	1dbb      	adds	r3, r7, #6
    2dfc:	781b      	ldrb	r3, [r3, #0]
    2dfe:	2b01      	cmp	r3, #1
    2e00:	d023      	beq.n	2e4a <_gpio_set_direction+0x66>
    2e02:	2b02      	cmp	r3, #2
    2e04:	d03f      	beq.n	2e86 <_gpio_set_direction+0xa2>
    2e06:	2b00      	cmp	r3, #0
    2e08:	d15d      	bne.n	2ec6 <_gpio_set_direction+0xe2>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    2e0a:	683a      	ldr	r2, [r7, #0]
    2e0c:	1dfb      	adds	r3, r7, #7
    2e0e:	7819      	ldrb	r1, [r3, #0]
    2e10:	23c0      	movs	r3, #192	; 0xc0
    2e12:	05db      	lsls	r3, r3, #23
    2e14:	0018      	movs	r0, r3
    2e16:	4b31      	ldr	r3, [pc, #196]	; (2edc <_gpio_set_direction+0xf8>)
    2e18:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2e1a:	683b      	ldr	r3, [r7, #0]
    2e1c:	041b      	lsls	r3, r3, #16
    2e1e:	0c1b      	lsrs	r3, r3, #16
    2e20:	2280      	movs	r2, #128	; 0x80
    2e22:	05d2      	lsls	r2, r2, #23
    2e24:	431a      	orrs	r2, r3
    2e26:	1dfb      	adds	r3, r7, #7
    2e28:	781b      	ldrb	r3, [r3, #0]
    2e2a:	482d      	ldr	r0, [pc, #180]	; (2ee0 <_gpio_set_direction+0xfc>)
    2e2c:	0019      	movs	r1, r3
    2e2e:	4b2d      	ldr	r3, [pc, #180]	; (2ee4 <_gpio_set_direction+0x100>)
    2e30:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2e32:	683b      	ldr	r3, [r7, #0]
    2e34:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    2e36:	22c0      	movs	r2, #192	; 0xc0
    2e38:	0612      	lsls	r2, r2, #24
    2e3a:	431a      	orrs	r2, r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2e3c:	1dfb      	adds	r3, r7, #7
    2e3e:	781b      	ldrb	r3, [r3, #0]
    2e40:	4827      	ldr	r0, [pc, #156]	; (2ee0 <_gpio_set_direction+0xfc>)
    2e42:	0019      	movs	r1, r3
    2e44:	4b27      	ldr	r3, [pc, #156]	; (2ee4 <_gpio_set_direction+0x100>)
    2e46:	4798      	blx	r3
		break;
    2e48:	e043      	b.n	2ed2 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    2e4a:	683a      	ldr	r2, [r7, #0]
    2e4c:	1dfb      	adds	r3, r7, #7
    2e4e:	7819      	ldrb	r1, [r3, #0]
    2e50:	23c0      	movs	r3, #192	; 0xc0
    2e52:	05db      	lsls	r3, r3, #23
    2e54:	0018      	movs	r0, r3
    2e56:	4b21      	ldr	r3, [pc, #132]	; (2edc <_gpio_set_direction+0xf8>)
    2e58:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    2e5a:	683b      	ldr	r3, [r7, #0]
    2e5c:	041b      	lsls	r3, r3, #16
    2e5e:	0c1b      	lsrs	r3, r3, #16
    2e60:	4a21      	ldr	r2, [pc, #132]	; (2ee8 <_gpio_set_direction+0x104>)
    2e62:	431a      	orrs	r2, r3
    2e64:	1dfb      	adds	r3, r7, #7
    2e66:	781b      	ldrb	r3, [r3, #0]
    2e68:	481d      	ldr	r0, [pc, #116]	; (2ee0 <_gpio_set_direction+0xfc>)
    2e6a:	0019      	movs	r1, r3
    2e6c:	4b1d      	ldr	r3, [pc, #116]	; (2ee4 <_gpio_set_direction+0x100>)
    2e6e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    2e70:	683b      	ldr	r3, [r7, #0]
    2e72:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    2e74:	4a1d      	ldr	r2, [pc, #116]	; (2eec <_gpio_set_direction+0x108>)
    2e76:	431a      	orrs	r2, r3
		                                | ((mask & 0xffff0000) >> 16));
    2e78:	1dfb      	adds	r3, r7, #7
    2e7a:	781b      	ldrb	r3, [r3, #0]
    2e7c:	4818      	ldr	r0, [pc, #96]	; (2ee0 <_gpio_set_direction+0xfc>)
    2e7e:	0019      	movs	r1, r3
    2e80:	4b18      	ldr	r3, [pc, #96]	; (2ee4 <_gpio_set_direction+0x100>)
    2e82:	4798      	blx	r3
		break;
    2e84:	e025      	b.n	2ed2 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
    2e86:	683a      	ldr	r2, [r7, #0]
    2e88:	1dfb      	adds	r3, r7, #7
    2e8a:	7819      	ldrb	r1, [r3, #0]
    2e8c:	23c0      	movs	r3, #192	; 0xc0
    2e8e:	05db      	lsls	r3, r3, #23
    2e90:	0018      	movs	r0, r3
    2e92:	4b17      	ldr	r3, [pc, #92]	; (2ef0 <_gpio_set_direction+0x10c>)
    2e94:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2e96:	683b      	ldr	r3, [r7, #0]
    2e98:	041b      	lsls	r3, r3, #16
    2e9a:	0c1b      	lsrs	r3, r3, #16
    2e9c:	2280      	movs	r2, #128	; 0x80
    2e9e:	05d2      	lsls	r2, r2, #23
    2ea0:	431a      	orrs	r2, r3
    2ea2:	1dfb      	adds	r3, r7, #7
    2ea4:	781b      	ldrb	r3, [r3, #0]
    2ea6:	480e      	ldr	r0, [pc, #56]	; (2ee0 <_gpio_set_direction+0xfc>)
    2ea8:	0019      	movs	r1, r3
    2eaa:	4b0e      	ldr	r3, [pc, #56]	; (2ee4 <_gpio_set_direction+0x100>)
    2eac:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2eae:	683b      	ldr	r3, [r7, #0]
    2eb0:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    2eb2:	22c0      	movs	r2, #192	; 0xc0
    2eb4:	0612      	lsls	r2, r2, #24
    2eb6:	431a      	orrs	r2, r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2eb8:	1dfb      	adds	r3, r7, #7
    2eba:	781b      	ldrb	r3, [r3, #0]
    2ebc:	4808      	ldr	r0, [pc, #32]	; (2ee0 <_gpio_set_direction+0xfc>)
    2ebe:	0019      	movs	r1, r3
    2ec0:	4b08      	ldr	r3, [pc, #32]	; (2ee4 <_gpio_set_direction+0x100>)
    2ec2:	4798      	blx	r3
		break;
    2ec4:	e005      	b.n	2ed2 <_gpio_set_direction+0xee>

	default:
		ASSERT(false);
    2ec6:	4b0b      	ldr	r3, [pc, #44]	; (2ef4 <_gpio_set_direction+0x110>)
    2ec8:	2245      	movs	r2, #69	; 0x45
    2eca:	0019      	movs	r1, r3
    2ecc:	2000      	movs	r0, #0
    2ece:	4b0a      	ldr	r3, [pc, #40]	; (2ef8 <_gpio_set_direction+0x114>)
    2ed0:	4798      	blx	r3
	}
}
    2ed2:	46c0      	nop			; (mov r8, r8)
    2ed4:	46bd      	mov	sp, r7
    2ed6:	b002      	add	sp, #8
    2ed8:	bd80      	pop	{r7, pc}
    2eda:	46c0      	nop			; (mov r8, r8)
    2edc:	00002ba5 	.word	0x00002ba5
    2ee0:	41004400 	.word	0x41004400
    2ee4:	00002db9 	.word	0x00002db9
    2ee8:	40020000 	.word	0x40020000
    2eec:	c0020000 	.word	0xc0020000
    2ef0:	00002b79 	.word	0x00002b79
    2ef4:	0000516c 	.word	0x0000516c
    2ef8:	00000db5 	.word	0x00000db5

00002efc <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    2efc:	b580      	push	{r7, lr}
    2efe:	b082      	sub	sp, #8
    2f00:	af00      	add	r7, sp, #0
    2f02:	6039      	str	r1, [r7, #0]
    2f04:	0011      	movs	r1, r2
    2f06:	1dfb      	adds	r3, r7, #7
    2f08:	1c02      	adds	r2, r0, #0
    2f0a:	701a      	strb	r2, [r3, #0]
    2f0c:	1dbb      	adds	r3, r7, #6
    2f0e:	1c0a      	adds	r2, r1, #0
    2f10:	701a      	strb	r2, [r3, #0]
	if (level) {
    2f12:	1dbb      	adds	r3, r7, #6
    2f14:	781b      	ldrb	r3, [r3, #0]
    2f16:	2b00      	cmp	r3, #0
    2f18:	d008      	beq.n	2f2c <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    2f1a:	683a      	ldr	r2, [r7, #0]
    2f1c:	1dfb      	adds	r3, r7, #7
    2f1e:	7819      	ldrb	r1, [r3, #0]
    2f20:	23c0      	movs	r3, #192	; 0xc0
    2f22:	05db      	lsls	r3, r3, #23
    2f24:	0018      	movs	r0, r3
    2f26:	4b07      	ldr	r3, [pc, #28]	; (2f44 <_gpio_set_level+0x48>)
    2f28:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
    2f2a:	e007      	b.n	2f3c <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    2f2c:	683a      	ldr	r2, [r7, #0]
    2f2e:	1dfb      	adds	r3, r7, #7
    2f30:	7819      	ldrb	r1, [r3, #0]
    2f32:	23c0      	movs	r3, #192	; 0xc0
    2f34:	05db      	lsls	r3, r3, #23
    2f36:	0018      	movs	r0, r3
    2f38:	4b03      	ldr	r3, [pc, #12]	; (2f48 <_gpio_set_level+0x4c>)
    2f3a:	4798      	blx	r3
}
    2f3c:	46c0      	nop			; (mov r8, r8)
    2f3e:	46bd      	mov	sp, r7
    2f40:	b002      	add	sp, #8
    2f42:	bd80      	pop	{r7, pc}
    2f44:	00002bd1 	.word	0x00002bd1
    2f48:	00002bfd 	.word	0x00002bfd

00002f4c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    2f4c:	b590      	push	{r4, r7, lr}
    2f4e:	b085      	sub	sp, #20
    2f50:	af00      	add	r7, sp, #0
    2f52:	6078      	str	r0, [r7, #4]
    2f54:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    2f56:	687b      	ldr	r3, [r7, #4]
    2f58:	095a      	lsrs	r2, r3, #5
    2f5a:	230f      	movs	r3, #15
    2f5c:	18fb      	adds	r3, r7, r3
    2f5e:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    2f60:	687b      	ldr	r3, [r7, #4]
    2f62:	b2da      	uxtb	r2, r3
    2f64:	230e      	movs	r3, #14
    2f66:	18fb      	adds	r3, r7, r3
    2f68:	211f      	movs	r1, #31
    2f6a:	400a      	ands	r2, r1
    2f6c:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    2f6e:	683b      	ldr	r3, [r7, #0]
    2f70:	3301      	adds	r3, #1
    2f72:	d10a      	bne.n	2f8a <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    2f74:	230e      	movs	r3, #14
    2f76:	18fb      	adds	r3, r7, r3
    2f78:	781a      	ldrb	r2, [r3, #0]
    2f7a:	230f      	movs	r3, #15
    2f7c:	18fb      	adds	r3, r7, r3
    2f7e:	7819      	ldrb	r1, [r3, #0]
    2f80:	481b      	ldr	r0, [pc, #108]	; (2ff0 <_gpio_set_pin_function+0xa4>)
    2f82:	2300      	movs	r3, #0
    2f84:	4c1b      	ldr	r4, [pc, #108]	; (2ff4 <_gpio_set_pin_function+0xa8>)
    2f86:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    2f88:	e02e      	b.n	2fe8 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    2f8a:	230e      	movs	r3, #14
    2f8c:	18fb      	adds	r3, r7, r3
    2f8e:	781a      	ldrb	r2, [r3, #0]
    2f90:	230f      	movs	r3, #15
    2f92:	18fb      	adds	r3, r7, r3
    2f94:	7819      	ldrb	r1, [r3, #0]
    2f96:	4816      	ldr	r0, [pc, #88]	; (2ff0 <_gpio_set_pin_function+0xa4>)
    2f98:	2301      	movs	r3, #1
    2f9a:	4c16      	ldr	r4, [pc, #88]	; (2ff4 <_gpio_set_pin_function+0xa8>)
    2f9c:	47a0      	blx	r4
		if (pin & 1) {
    2f9e:	230e      	movs	r3, #14
    2fa0:	18fb      	adds	r3, r7, r3
    2fa2:	781b      	ldrb	r3, [r3, #0]
    2fa4:	2201      	movs	r2, #1
    2fa6:	4013      	ands	r3, r2
    2fa8:	d00f      	beq.n	2fca <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    2faa:	230e      	movs	r3, #14
    2fac:	18fb      	adds	r3, r7, r3
    2fae:	781b      	ldrb	r3, [r3, #0]
    2fb0:	105b      	asrs	r3, r3, #1
    2fb2:	b2da      	uxtb	r2, r3
    2fb4:	683b      	ldr	r3, [r7, #0]
    2fb6:	b2d8      	uxtb	r0, r3
    2fb8:	230f      	movs	r3, #15
    2fba:	18fb      	adds	r3, r7, r3
    2fbc:	7819      	ldrb	r1, [r3, #0]
    2fbe:	4c0c      	ldr	r4, [pc, #48]	; (2ff0 <_gpio_set_pin_function+0xa4>)
    2fc0:	0003      	movs	r3, r0
    2fc2:	0020      	movs	r0, r4
    2fc4:	4c0c      	ldr	r4, [pc, #48]	; (2ff8 <_gpio_set_pin_function+0xac>)
    2fc6:	47a0      	blx	r4
}
    2fc8:	e00e      	b.n	2fe8 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    2fca:	230e      	movs	r3, #14
    2fcc:	18fb      	adds	r3, r7, r3
    2fce:	781b      	ldrb	r3, [r3, #0]
    2fd0:	105b      	asrs	r3, r3, #1
    2fd2:	b2da      	uxtb	r2, r3
    2fd4:	683b      	ldr	r3, [r7, #0]
    2fd6:	b2d8      	uxtb	r0, r3
    2fd8:	230f      	movs	r3, #15
    2fda:	18fb      	adds	r3, r7, r3
    2fdc:	7819      	ldrb	r1, [r3, #0]
    2fde:	4c04      	ldr	r4, [pc, #16]	; (2ff0 <_gpio_set_pin_function+0xa4>)
    2fe0:	0003      	movs	r3, r0
    2fe2:	0020      	movs	r0, r4
    2fe4:	4c05      	ldr	r4, [pc, #20]	; (2ffc <_gpio_set_pin_function+0xb0>)
    2fe6:	47a0      	blx	r4
}
    2fe8:	46c0      	nop			; (mov r8, r8)
    2fea:	46bd      	mov	sp, r7
    2fec:	b005      	add	sp, #20
    2fee:	bd90      	pop	{r4, r7, pc}
    2ff0:	41004400 	.word	0x41004400
    2ff4:	00002d37 	.word	0x00002d37
    2ff8:	00002cb1 	.word	0x00002cb1
    2ffc:	00002c29 	.word	0x00002c29

00003000 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    3000:	b580      	push	{r7, lr}
    3002:	b082      	sub	sp, #8
    3004:	af00      	add	r7, sp, #0
    3006:	6078      	str	r0, [r7, #4]
    3008:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    300a:	683a      	ldr	r2, [r7, #0]
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	0011      	movs	r1, r2
    3010:	0018      	movs	r0, r3
    3012:	4b03      	ldr	r3, [pc, #12]	; (3020 <gpio_set_pin_function+0x20>)
    3014:	4798      	blx	r3
}
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	46bd      	mov	sp, r7
    301a:	b002      	add	sp, #8
    301c:	bd80      	pop	{r7, pc}
    301e:	46c0      	nop			; (mov r8, r8)
    3020:	00002f4d 	.word	0x00002f4d

00003024 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    3024:	b580      	push	{r7, lr}
    3026:	b082      	sub	sp, #8
    3028:	af00      	add	r7, sp, #0
    302a:	0002      	movs	r2, r0
    302c:	1dfb      	adds	r3, r7, #7
    302e:	701a      	strb	r2, [r3, #0]
    3030:	1dbb      	adds	r3, r7, #6
    3032:	1c0a      	adds	r2, r1, #0
    3034:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    3036:	1dfb      	adds	r3, r7, #7
    3038:	781b      	ldrb	r3, [r3, #0]
    303a:	115b      	asrs	r3, r3, #5
    303c:	b2d8      	uxtb	r0, r3
    303e:	1dfb      	adds	r3, r7, #7
    3040:	781b      	ldrb	r3, [r3, #0]
    3042:	001a      	movs	r2, r3
    3044:	231f      	movs	r3, #31
    3046:	4013      	ands	r3, r2
    3048:	2201      	movs	r2, #1
    304a:	409a      	lsls	r2, r3
    304c:	0011      	movs	r1, r2
    304e:	1dbb      	adds	r3, r7, #6
    3050:	781b      	ldrb	r3, [r3, #0]
    3052:	001a      	movs	r2, r3
    3054:	4b02      	ldr	r3, [pc, #8]	; (3060 <gpio_set_pin_direction+0x3c>)
    3056:	4798      	blx	r3
}
    3058:	46c0      	nop			; (mov r8, r8)
    305a:	46bd      	mov	sp, r7
    305c:	b002      	add	sp, #8
    305e:	bd80      	pop	{r7, pc}
    3060:	00002de5 	.word	0x00002de5

00003064 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    3064:	b580      	push	{r7, lr}
    3066:	b082      	sub	sp, #8
    3068:	af00      	add	r7, sp, #0
    306a:	0002      	movs	r2, r0
    306c:	1dfb      	adds	r3, r7, #7
    306e:	701a      	strb	r2, [r3, #0]
    3070:	1dbb      	adds	r3, r7, #6
    3072:	1c0a      	adds	r2, r1, #0
    3074:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    3076:	1dfb      	adds	r3, r7, #7
    3078:	781b      	ldrb	r3, [r3, #0]
    307a:	115b      	asrs	r3, r3, #5
    307c:	b2d8      	uxtb	r0, r3
    307e:	1dfb      	adds	r3, r7, #7
    3080:	781b      	ldrb	r3, [r3, #0]
    3082:	001a      	movs	r2, r3
    3084:	231f      	movs	r3, #31
    3086:	4013      	ands	r3, r2
    3088:	2201      	movs	r2, #1
    308a:	409a      	lsls	r2, r3
    308c:	0011      	movs	r1, r2
    308e:	1dbb      	adds	r3, r7, #6
    3090:	781b      	ldrb	r3, [r3, #0]
    3092:	001a      	movs	r2, r3
    3094:	4b02      	ldr	r3, [pc, #8]	; (30a0 <gpio_set_pin_level+0x3c>)
    3096:	4798      	blx	r3
}
    3098:	46c0      	nop			; (mov r8, r8)
    309a:	46bd      	mov	sp, r7
    309c:	b002      	add	sp, #8
    309e:	bd80      	pop	{r7, pc}
    30a0:	00002efd 	.word	0x00002efd

000030a4 <_ZN17LEDLighting_ClassC1Ev>:




// default constructor
LEDLighting_Class::LEDLighting_Class()
    30a4:	b580      	push	{r7, lr}
    30a6:	b082      	sub	sp, #8
    30a8:	af00      	add	r7, sp, #0
    30aa:	6078      	str	r0, [r7, #4]
{
		totalPins=sizeof(PinMappingLeft)+sizeof(PinMappingRight);
    30ac:	687b      	ldr	r3, [r7, #4]
    30ae:	22e8      	movs	r2, #232	; 0xe8
    30b0:	2102      	movs	r1, #2
    30b2:	5499      	strb	r1, [r3, r2]
		

} //LEDMapping_Class
    30b4:	687b      	ldr	r3, [r7, #4]
    30b6:	0018      	movs	r0, r3
    30b8:	46bd      	mov	sp, r7
    30ba:	b002      	add	sp, #8
    30bc:	bd80      	pop	{r7, pc}

000030be <_ZN17LEDLighting_ClassD1Ev>:

// default destructor
LEDLighting_Class::~LEDLighting_Class()
    30be:	b580      	push	{r7, lr}
    30c0:	b082      	sub	sp, #8
    30c2:	af00      	add	r7, sp, #0
    30c4:	6078      	str	r0, [r7, #4]
{
} //~LEDMapping_Class
    30c6:	687b      	ldr	r3, [r7, #4]
    30c8:	0018      	movs	r0, r3
    30ca:	46bd      	mov	sp, r7
    30cc:	b002      	add	sp, #8
    30ce:	bd80      	pop	{r7, pc}

000030d0 <_ZN17LEDLighting_Class11InitMappingEv>:

void	LEDLighting_Class::InitMapping(void){
    30d0:	b590      	push	{r4, r7, lr}
    30d2:	b0a3      	sub	sp, #140	; 0x8c
    30d4:	af00      	add	r7, sp, #0
    30d6:	6078      	str	r0, [r7, #4]
		0,
		
		0,
		
		
	};
    30d8:	2368      	movs	r3, #104	; 0x68
    30da:	18fb      	adds	r3, r7, r3
    30dc:	4a55      	ldr	r2, [pc, #340]	; (3234 <_ZN17LEDLighting_Class11InitMappingEv+0x164>)
    30de:	ca13      	ldmia	r2!, {r0, r1, r4}
    30e0:	c313      	stmia	r3!, {r0, r1, r4}
    30e2:	ca13      	ldmia	r2!, {r0, r1, r4}
    30e4:	c313      	stmia	r3!, {r0, r1, r4}
    30e6:	6811      	ldr	r1, [r2, #0]
    30e8:	6019      	str	r1, [r3, #0]
    30ea:	7912      	ldrb	r2, [r2, #4]
    30ec:	711a      	strb	r2, [r3, #4]
	for (i = 0; i <(int)sizeof(portsleftleft); i++)
    30ee:	687b      	ldr	r3, [r7, #4]
    30f0:	22ec      	movs	r2, #236	; 0xec
    30f2:	2100      	movs	r1, #0
    30f4:	5099      	str	r1, [r3, r2]
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	22ec      	movs	r2, #236	; 0xec
    30fa:	589b      	ldr	r3, [r3, r2]
    30fc:	2b1c      	cmp	r3, #28
    30fe:	dc12      	bgt.n	3126 <_ZN17LEDLighting_Class11InitMappingEv+0x56>
	{
		leftPins.portsLeft[i]=portsleftleft[i];
    3100:	687b      	ldr	r3, [r7, #4]
    3102:	22ec      	movs	r2, #236	; 0xec
    3104:	589b      	ldr	r3, [r3, r2]
    3106:	687a      	ldr	r2, [r7, #4]
    3108:	21ec      	movs	r1, #236	; 0xec
    310a:	5852      	ldr	r2, [r2, r1]
    310c:	2168      	movs	r1, #104	; 0x68
    310e:	1879      	adds	r1, r7, r1
    3110:	5c89      	ldrb	r1, [r1, r2]
    3112:	687a      	ldr	r2, [r7, #4]
    3114:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i <(int)sizeof(portsleftleft); i++)
    3116:	687b      	ldr	r3, [r7, #4]
    3118:	22ec      	movs	r2, #236	; 0xec
    311a:	589b      	ldr	r3, [r3, r2]
    311c:	1c5a      	adds	r2, r3, #1
    311e:	687b      	ldr	r3, [r7, #4]
    3120:	21ec      	movs	r1, #236	; 0xec
    3122:	505a      	str	r2, [r3, r1]
    3124:	e7e7      	b.n	30f6 <_ZN17LEDLighting_Class11InitMappingEv+0x26>
		
		3,
		
		2,

	};
    3126:	2348      	movs	r3, #72	; 0x48
    3128:	18fb      	adds	r3, r7, r3
    312a:	4a43      	ldr	r2, [pc, #268]	; (3238 <_ZN17LEDLighting_Class11InitMappingEv+0x168>)
    312c:	ca13      	ldmia	r2!, {r0, r1, r4}
    312e:	c313      	stmia	r3!, {r0, r1, r4}
    3130:	ca13      	ldmia	r2!, {r0, r1, r4}
    3132:	c313      	stmia	r3!, {r0, r1, r4}
    3134:	6811      	ldr	r1, [r2, #0]
    3136:	6019      	str	r1, [r3, #0]
    3138:	7912      	ldrb	r2, [r2, #4]
    313a:	711a      	strb	r2, [r3, #4]
	for (i = 0; i < (int)sizeof(pinsLeftLeft); i++)
    313c:	687b      	ldr	r3, [r7, #4]
    313e:	22ec      	movs	r2, #236	; 0xec
    3140:	2100      	movs	r1, #0
    3142:	5099      	str	r1, [r3, r2]
    3144:	687b      	ldr	r3, [r7, #4]
    3146:	22ec      	movs	r2, #236	; 0xec
    3148:	589b      	ldr	r3, [r3, r2]
    314a:	2b1c      	cmp	r3, #28
    314c:	dc14      	bgt.n	3178 <_ZN17LEDLighting_Class11InitMappingEv+0xa8>
	{
		leftPins.pinsLeft[i]=pinsLeftLeft[i];
    314e:	687b      	ldr	r3, [r7, #4]
    3150:	22ec      	movs	r2, #236	; 0xec
    3152:	589b      	ldr	r3, [r3, r2]
    3154:	687a      	ldr	r2, [r7, #4]
    3156:	21ec      	movs	r1, #236	; 0xec
    3158:	5852      	ldr	r2, [r2, r1]
    315a:	2148      	movs	r1, #72	; 0x48
    315c:	1879      	adds	r1, r7, r1
    315e:	5c89      	ldrb	r1, [r1, r2]
    3160:	687a      	ldr	r2, [r7, #4]
    3162:	18d3      	adds	r3, r2, r3
    3164:	1c0a      	adds	r2, r1, #0
    3166:	775a      	strb	r2, [r3, #29]
	for (i = 0; i < (int)sizeof(pinsLeftLeft); i++)
    3168:	687b      	ldr	r3, [r7, #4]
    316a:	22ec      	movs	r2, #236	; 0xec
    316c:	589b      	ldr	r3, [r3, r2]
    316e:	1c5a      	adds	r2, r3, #1
    3170:	687b      	ldr	r3, [r7, #4]
    3172:	21ec      	movs	r1, #236	; 0xec
    3174:	505a      	str	r2, [r3, r1]
    3176:	e7e5      	b.n	3144 <_ZN17LEDLighting_Class11InitMappingEv+0x74>

		0,

		0,

	};
    3178:	2328      	movs	r3, #40	; 0x28
    317a:	18fb      	adds	r3, r7, r3
    317c:	4a2f      	ldr	r2, [pc, #188]	; (323c <_ZN17LEDLighting_Class11InitMappingEv+0x16c>)
    317e:	ca13      	ldmia	r2!, {r0, r1, r4}
    3180:	c313      	stmia	r3!, {r0, r1, r4}
    3182:	ca13      	ldmia	r2!, {r0, r1, r4}
    3184:	c313      	stmia	r3!, {r0, r1, r4}
    3186:	6811      	ldr	r1, [r2, #0]
    3188:	6019      	str	r1, [r3, #0]
    318a:	7912      	ldrb	r2, [r2, #4]
    318c:	711a      	strb	r2, [r3, #4]
		for (i = 0; i < (int)sizeof(portsRightRight); i++)
    318e:	687b      	ldr	r3, [r7, #4]
    3190:	22ec      	movs	r2, #236	; 0xec
    3192:	2100      	movs	r1, #0
    3194:	5099      	str	r1, [r3, r2]
    3196:	687b      	ldr	r3, [r7, #4]
    3198:	22ec      	movs	r2, #236	; 0xec
    319a:	589b      	ldr	r3, [r3, r2]
    319c:	2b1c      	cmp	r3, #28
    319e:	dc16      	bgt.n	31ce <_ZN17LEDLighting_Class11InitMappingEv+0xfe>
		{
			rightPins.portsRight[i]=portsRightRight[i];
    31a0:	687b      	ldr	r3, [r7, #4]
    31a2:	22ec      	movs	r2, #236	; 0xec
    31a4:	589b      	ldr	r3, [r3, r2]
    31a6:	687a      	ldr	r2, [r7, #4]
    31a8:	21ec      	movs	r1, #236	; 0xec
    31aa:	5852      	ldr	r2, [r2, r1]
    31ac:	2128      	movs	r1, #40	; 0x28
    31ae:	1879      	adds	r1, r7, r1
    31b0:	5c88      	ldrb	r0, [r1, r2]
    31b2:	687a      	ldr	r2, [r7, #4]
    31b4:	213a      	movs	r1, #58	; 0x3a
    31b6:	18d3      	adds	r3, r2, r3
    31b8:	185b      	adds	r3, r3, r1
    31ba:	1c02      	adds	r2, r0, #0
    31bc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < (int)sizeof(portsRightRight); i++)
    31be:	687b      	ldr	r3, [r7, #4]
    31c0:	22ec      	movs	r2, #236	; 0xec
    31c2:	589b      	ldr	r3, [r3, r2]
    31c4:	1c5a      	adds	r2, r3, #1
    31c6:	687b      	ldr	r3, [r7, #4]
    31c8:	21ec      	movs	r1, #236	; 0xec
    31ca:	505a      	str	r2, [r3, r1]
    31cc:	e7e3      	b.n	3196 <_ZN17LEDLighting_Class11InitMappingEv+0xc6>
		8,
		
		31,
		
		30,
	};
    31ce:	2308      	movs	r3, #8
    31d0:	18fb      	adds	r3, r7, r3
    31d2:	4a1b      	ldr	r2, [pc, #108]	; (3240 <_ZN17LEDLighting_Class11InitMappingEv+0x170>)
    31d4:	ca13      	ldmia	r2!, {r0, r1, r4}
    31d6:	c313      	stmia	r3!, {r0, r1, r4}
    31d8:	ca13      	ldmia	r2!, {r0, r1, r4}
    31da:	c313      	stmia	r3!, {r0, r1, r4}
    31dc:	6811      	ldr	r1, [r2, #0]
    31de:	6019      	str	r1, [r3, #0]
    31e0:	7912      	ldrb	r2, [r2, #4]
    31e2:	711a      	strb	r2, [r3, #4]
			for (i = 0; i <(int)sizeof(pinsRightRight); i++)
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	22ec      	movs	r2, #236	; 0xec
    31e8:	2100      	movs	r1, #0
    31ea:	5099      	str	r1, [r3, r2]
    31ec:	687b      	ldr	r3, [r7, #4]
    31ee:	22ec      	movs	r2, #236	; 0xec
    31f0:	589b      	ldr	r3, [r3, r2]
    31f2:	2b1c      	cmp	r3, #28
    31f4:	dc16      	bgt.n	3224 <_ZN17LEDLighting_Class11InitMappingEv+0x154>
			{
				rightPins.pinsRight[i]=pinsRightRight[i];
    31f6:	687b      	ldr	r3, [r7, #4]
    31f8:	22ec      	movs	r2, #236	; 0xec
    31fa:	589b      	ldr	r3, [r3, r2]
    31fc:	687a      	ldr	r2, [r7, #4]
    31fe:	21ec      	movs	r1, #236	; 0xec
    3200:	5852      	ldr	r2, [r2, r1]
    3202:	2108      	movs	r1, #8
    3204:	1879      	adds	r1, r7, r1
    3206:	5c88      	ldrb	r0, [r1, r2]
    3208:	687a      	ldr	r2, [r7, #4]
    320a:	2157      	movs	r1, #87	; 0x57
    320c:	18d3      	adds	r3, r2, r3
    320e:	185b      	adds	r3, r3, r1
    3210:	1c02      	adds	r2, r0, #0
    3212:	701a      	strb	r2, [r3, #0]
			for (i = 0; i <(int)sizeof(pinsRightRight); i++)
    3214:	687b      	ldr	r3, [r7, #4]
    3216:	22ec      	movs	r2, #236	; 0xec
    3218:	589b      	ldr	r3, [r3, r2]
    321a:	1c5a      	adds	r2, r3, #1
    321c:	687b      	ldr	r3, [r7, #4]
    321e:	21ec      	movs	r1, #236	; 0xec
    3220:	505a      	str	r2, [r3, r1]
    3222:	e7e3      	b.n	31ec <_ZN17LEDLighting_Class11InitMappingEv+0x11c>
			}
		totalPins=kTOTALLEFTPINS+kTOTALRIGHTPINS;	
    3224:	687b      	ldr	r3, [r7, #4]
    3226:	22e8      	movs	r2, #232	; 0xe8
    3228:	213a      	movs	r1, #58	; 0x3a
    322a:	5499      	strb	r1, [r3, r2]
}
    322c:	46c0      	nop			; (mov r8, r8)
    322e:	46bd      	mov	sp, r7
    3230:	b023      	add	sp, #140	; 0x8c
    3232:	bd90      	pop	{r4, r7, pc}
    3234:	000051b0 	.word	0x000051b0
    3238:	000051d0 	.word	0x000051d0
    323c:	000051f0 	.word	0x000051f0
    3240:	00005210 	.word	0x00005210

00003244 <_ZN17LEDLighting_Class6SetPinEhh>:

void	LEDLighting_Class::SetPin(uint8_t	pt,uint8_t pn){
    3244:	b580      	push	{r7, lr}
    3246:	b082      	sub	sp, #8
    3248:	af00      	add	r7, sp, #0
    324a:	6078      	str	r0, [r7, #4]
    324c:	0008      	movs	r0, r1
    324e:	0011      	movs	r1, r2
    3250:	1cfb      	adds	r3, r7, #3
    3252:	1c02      	adds	r2, r0, #0
    3254:	701a      	strb	r2, [r3, #0]
    3256:	1cbb      	adds	r3, r7, #2
    3258:	1c0a      	adds	r2, r1, #0
    325a:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(GPIO(pt,pn),true);
    325c:	1cfb      	adds	r3, r7, #3
    325e:	781b      	ldrb	r3, [r3, #0]
    3260:	015b      	lsls	r3, r3, #5
    3262:	b2da      	uxtb	r2, r3
    3264:	1cbb      	adds	r3, r7, #2
    3266:	781b      	ldrb	r3, [r3, #0]
    3268:	211f      	movs	r1, #31
    326a:	400b      	ands	r3, r1
    326c:	b2db      	uxtb	r3, r3
    326e:	18d3      	adds	r3, r2, r3
    3270:	b2db      	uxtb	r3, r3
    3272:	2101      	movs	r1, #1
    3274:	0018      	movs	r0, r3
    3276:	4b03      	ldr	r3, [pc, #12]	; (3284 <_ZN17LEDLighting_Class6SetPinEhh+0x40>)
    3278:	4798      	blx	r3
	
}
    327a:	46c0      	nop			; (mov r8, r8)
    327c:	46bd      	mov	sp, r7
    327e:	b002      	add	sp, #8
    3280:	bd80      	pop	{r7, pc}
    3282:	46c0      	nop			; (mov r8, r8)
    3284:	00003065 	.word	0x00003065

00003288 <_ZN17LEDLighting_Class8ClearPinEhh>:
void	LEDLighting_Class::ClearPin(uint8_t	pt,uint8_t pn){
    3288:	b580      	push	{r7, lr}
    328a:	b082      	sub	sp, #8
    328c:	af00      	add	r7, sp, #0
    328e:	6078      	str	r0, [r7, #4]
    3290:	0008      	movs	r0, r1
    3292:	0011      	movs	r1, r2
    3294:	1cfb      	adds	r3, r7, #3
    3296:	1c02      	adds	r2, r0, #0
    3298:	701a      	strb	r2, [r3, #0]
    329a:	1cbb      	adds	r3, r7, #2
    329c:	1c0a      	adds	r2, r1, #0
    329e:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(GPIO(pt,pn),false);
    32a0:	1cfb      	adds	r3, r7, #3
    32a2:	781b      	ldrb	r3, [r3, #0]
    32a4:	015b      	lsls	r3, r3, #5
    32a6:	b2da      	uxtb	r2, r3
    32a8:	1cbb      	adds	r3, r7, #2
    32aa:	781b      	ldrb	r3, [r3, #0]
    32ac:	211f      	movs	r1, #31
    32ae:	400b      	ands	r3, r1
    32b0:	b2db      	uxtb	r3, r3
    32b2:	18d3      	adds	r3, r2, r3
    32b4:	b2db      	uxtb	r3, r3
    32b6:	2100      	movs	r1, #0
    32b8:	0018      	movs	r0, r3
    32ba:	4b03      	ldr	r3, [pc, #12]	; (32c8 <_ZN17LEDLighting_Class8ClearPinEhh+0x40>)
    32bc:	4798      	blx	r3
	
}
    32be:	46c0      	nop			; (mov r8, r8)
    32c0:	46bd      	mov	sp, r7
    32c2:	b002      	add	sp, #8
    32c4:	bd80      	pop	{r7, pc}
    32c6:	46c0      	nop			; (mov r8, r8)
    32c8:	00003065 	.word	0x00003065

000032cc <_ZN17LEDLighting_Class12DefineColorsER9StateLeds>:
void LEDLighting_Class::DefineColors(StateLeds&	st){
    32cc:	b590      	push	{r4, r7, lr}
    32ce:	b083      	sub	sp, #12
    32d0:	af00      	add	r7, sp, #0
    32d2:	6078      	str	r0, [r7, #4]
    32d4:	6039      	str	r1, [r7, #0]
	
	j=0;
    32d6:	687b      	ldr	r3, [r7, #4]
    32d8:	22f0      	movs	r2, #240	; 0xf0
    32da:	2100      	movs	r1, #0
    32dc:	5099      	str	r1, [r3, r2]
	for (i = 0; i < totalPins; i++){
    32de:	687b      	ldr	r3, [r7, #4]
    32e0:	22ec      	movs	r2, #236	; 0xec
    32e2:	2100      	movs	r1, #0
    32e4:	5099      	str	r1, [r3, r2]
    32e6:	687b      	ldr	r3, [r7, #4]
    32e8:	22ec      	movs	r2, #236	; 0xec
    32ea:	589b      	ldr	r3, [r3, r2]
    32ec:	687a      	ldr	r2, [r7, #4]
    32ee:	21e8      	movs	r1, #232	; 0xe8
    32f0:	5c52      	ldrb	r2, [r2, r1]
    32f2:	4293      	cmp	r3, r2
    32f4:	da3c      	bge.n	3370 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0xa4>
		if (i<kTOTALLEFTPINS)
    32f6:	687b      	ldr	r3, [r7, #4]
    32f8:	22ec      	movs	r2, #236	; 0xec
    32fa:	589b      	ldr	r3, [r3, r2]
    32fc:	2b1c      	cmp	r3, #28
    32fe:	dc12      	bgt.n	3326 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0x5a>
		{
			st.color[i]=i%3;
    3300:	687b      	ldr	r3, [r7, #4]
    3302:	22ec      	movs	r2, #236	; 0xec
    3304:	589c      	ldr	r4, [r3, r2]
    3306:	687b      	ldr	r3, [r7, #4]
    3308:	22ec      	movs	r2, #236	; 0xec
    330a:	589a      	ldr	r2, [r3, r2]
    330c:	4b1f      	ldr	r3, [pc, #124]	; (338c <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0xc0>)
    330e:	2103      	movs	r1, #3
    3310:	0010      	movs	r0, r2
    3312:	4798      	blx	r3
    3314:	000b      	movs	r3, r1
    3316:	b2d9      	uxtb	r1, r3
    3318:	683b      	ldr	r3, [r7, #0]
    331a:	223a      	movs	r2, #58	; 0x3a
    331c:	191b      	adds	r3, r3, r4
    331e:	189b      	adds	r3, r3, r2
    3320:	1c0a      	adds	r2, r1, #0
    3322:	701a      	strb	r2, [r3, #0]
    3324:	e01c      	b.n	3360 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0x94>
		} 
		else
		{
			st.color[i]=2-((j+1)%3);
    3326:	687b      	ldr	r3, [r7, #4]
    3328:	22ec      	movs	r2, #236	; 0xec
    332a:	589c      	ldr	r4, [r3, r2]
    332c:	687b      	ldr	r3, [r7, #4]
    332e:	22f0      	movs	r2, #240	; 0xf0
    3330:	589b      	ldr	r3, [r3, r2]
    3332:	1c5a      	adds	r2, r3, #1
    3334:	4b15      	ldr	r3, [pc, #84]	; (338c <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0xc0>)
    3336:	2103      	movs	r1, #3
    3338:	0010      	movs	r0, r2
    333a:	4798      	blx	r3
    333c:	000b      	movs	r3, r1
    333e:	b2db      	uxtb	r3, r3
    3340:	2202      	movs	r2, #2
    3342:	1ad3      	subs	r3, r2, r3
    3344:	b2d9      	uxtb	r1, r3
    3346:	683b      	ldr	r3, [r7, #0]
    3348:	223a      	movs	r2, #58	; 0x3a
    334a:	191b      	adds	r3, r3, r4
    334c:	189b      	adds	r3, r3, r2
    334e:	1c0a      	adds	r2, r1, #0
    3350:	701a      	strb	r2, [r3, #0]
			j++;
    3352:	687b      	ldr	r3, [r7, #4]
    3354:	22f0      	movs	r2, #240	; 0xf0
    3356:	589b      	ldr	r3, [r3, r2]
    3358:	1c5a      	adds	r2, r3, #1
    335a:	687b      	ldr	r3, [r7, #4]
    335c:	21f0      	movs	r1, #240	; 0xf0
    335e:	505a      	str	r2, [r3, r1]
	for (i = 0; i < totalPins; i++){
    3360:	687b      	ldr	r3, [r7, #4]
    3362:	22ec      	movs	r2, #236	; 0xec
    3364:	589b      	ldr	r3, [r3, r2]
    3366:	1c5a      	adds	r2, r3, #1
    3368:	687b      	ldr	r3, [r7, #4]
    336a:	21ec      	movs	r1, #236	; 0xec
    336c:	505a      	str	r2, [r3, r1]
    336e:	e7ba      	b.n	32e6 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0x1a>
			
		}
		
	}
	localState=st;
    3370:	687a      	ldr	r2, [r7, #4]
    3372:	2380      	movs	r3, #128	; 0x80
    3374:	005b      	lsls	r3, r3, #1
    3376:	6839      	ldr	r1, [r7, #0]
    3378:	18d3      	adds	r3, r2, r3
    337a:	2274      	movs	r2, #116	; 0x74
    337c:	0018      	movs	r0, r3
    337e:	4b04      	ldr	r3, [pc, #16]	; (3390 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0xc4>)
    3380:	4798      	blx	r3
	
}
    3382:	46c0      	nop			; (mov r8, r8)
    3384:	46bd      	mov	sp, r7
    3386:	b003      	add	sp, #12
    3388:	bd90      	pop	{r4, r7, pc}
    338a:	46c0      	nop			; (mov r8, r8)
    338c:	00004df5 	.word	0x00004df5
    3390:	00004ead 	.word	0x00004ead

00003394 <_ZN17LEDLighting_Class16SetBothSidesPinsER12BothSidePins>:
void	LEDLighting_Class::SetBothSidesPins(BothSidePins& bp){
    3394:	b580      	push	{r7, lr}
    3396:	b082      	sub	sp, #8
    3398:	af00      	add	r7, sp, #0
    339a:	6078      	str	r0, [r7, #4]
    339c:	6039      	str	r1, [r7, #0]
	pins=bp;
    339e:	687b      	ldr	r3, [r7, #4]
    33a0:	683a      	ldr	r2, [r7, #0]
    33a2:	3374      	adds	r3, #116	; 0x74
    33a4:	0011      	movs	r1, r2
    33a6:	2274      	movs	r2, #116	; 0x74
    33a8:	0018      	movs	r0, r3
    33aa:	4b05      	ldr	r3, [pc, #20]	; (33c0 <_ZN17LEDLighting_Class16SetBothSidesPinsER12BothSidePins+0x2c>)
    33ac:	4798      	blx	r3
	ConfiguratePins();
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	0018      	movs	r0, r3
    33b2:	4b04      	ldr	r3, [pc, #16]	; (33c4 <_ZN17LEDLighting_Class16SetBothSidesPinsER12BothSidePins+0x30>)
    33b4:	4798      	blx	r3
}
    33b6:	46c0      	nop			; (mov r8, r8)
    33b8:	46bd      	mov	sp, r7
    33ba:	b002      	add	sp, #8
    33bc:	bd80      	pop	{r7, pc}
    33be:	46c0      	nop			; (mov r8, r8)
    33c0:	00004ead 	.word	0x00004ead
    33c4:	000033c9 	.word	0x000033c9

000033c8 <_ZN17LEDLighting_Class15ConfiguratePinsEv>:

void	LEDLighting_Class::ConfiguratePins(void){
    33c8:	b580      	push	{r7, lr}
    33ca:	b082      	sub	sp, #8
    33cc:	af00      	add	r7, sp, #0
    33ce:	6078      	str	r0, [r7, #4]
	for (i = 0; i < totalPins; i++)
    33d0:	687b      	ldr	r3, [r7, #4]
    33d2:	22ec      	movs	r2, #236	; 0xec
    33d4:	2100      	movs	r1, #0
    33d6:	5099      	str	r1, [r3, r2]
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	22ec      	movs	r2, #236	; 0xec
    33dc:	589b      	ldr	r3, [r3, r2]
    33de:	687a      	ldr	r2, [r7, #4]
    33e0:	21e8      	movs	r1, #232	; 0xe8
    33e2:	5c52      	ldrb	r2, [r2, r1]
    33e4:	4293      	cmp	r3, r2
    33e6:	da5a      	bge.n	349e <_ZN17LEDLighting_Class15ConfiguratePinsEv+0xd6>
	{
		gpio_set_pin_direction(GPIO(pins.allPorts[i],pins.allPins[i]), GPIO_DIRECTION_OUT);
    33e8:	687b      	ldr	r3, [r7, #4]
    33ea:	22ec      	movs	r2, #236	; 0xec
    33ec:	589b      	ldr	r3, [r3, r2]
    33ee:	687a      	ldr	r2, [r7, #4]
    33f0:	2174      	movs	r1, #116	; 0x74
    33f2:	18d3      	adds	r3, r2, r3
    33f4:	185b      	adds	r3, r3, r1
    33f6:	781b      	ldrb	r3, [r3, #0]
    33f8:	015b      	lsls	r3, r3, #5
    33fa:	b2da      	uxtb	r2, r3
    33fc:	687b      	ldr	r3, [r7, #4]
    33fe:	21ec      	movs	r1, #236	; 0xec
    3400:	585b      	ldr	r3, [r3, r1]
    3402:	6879      	ldr	r1, [r7, #4]
    3404:	20ae      	movs	r0, #174	; 0xae
    3406:	18cb      	adds	r3, r1, r3
    3408:	181b      	adds	r3, r3, r0
    340a:	781b      	ldrb	r3, [r3, #0]
    340c:	211f      	movs	r1, #31
    340e:	400b      	ands	r3, r1
    3410:	b2db      	uxtb	r3, r3
    3412:	18d3      	adds	r3, r2, r3
    3414:	b2db      	uxtb	r3, r3
    3416:	2102      	movs	r1, #2
    3418:	0018      	movs	r0, r3
    341a:	4b23      	ldr	r3, [pc, #140]	; (34a8 <_ZN17LEDLighting_Class15ConfiguratePinsEv+0xe0>)
    341c:	4798      	blx	r3
		gpio_set_pin_function(GPIO(pins.allPorts[i],pins.allPins[i]), GPIO_PIN_FUNCTION_OFF);
    341e:	687b      	ldr	r3, [r7, #4]
    3420:	22ec      	movs	r2, #236	; 0xec
    3422:	589b      	ldr	r3, [r3, r2]
    3424:	687a      	ldr	r2, [r7, #4]
    3426:	2174      	movs	r1, #116	; 0x74
    3428:	18d3      	adds	r3, r2, r3
    342a:	185b      	adds	r3, r3, r1
    342c:	781b      	ldrb	r3, [r3, #0]
    342e:	015b      	lsls	r3, r3, #5
    3430:	22ff      	movs	r2, #255	; 0xff
    3432:	401a      	ands	r2, r3
    3434:	687b      	ldr	r3, [r7, #4]
    3436:	21ec      	movs	r1, #236	; 0xec
    3438:	585b      	ldr	r3, [r3, r1]
    343a:	6879      	ldr	r1, [r7, #4]
    343c:	20ae      	movs	r0, #174	; 0xae
    343e:	18cb      	adds	r3, r1, r3
    3440:	181b      	adds	r3, r3, r0
    3442:	781b      	ldrb	r3, [r3, #0]
    3444:	0019      	movs	r1, r3
    3446:	231f      	movs	r3, #31
    3448:	400b      	ands	r3, r1
    344a:	18d2      	adds	r2, r2, r3
    344c:	2301      	movs	r3, #1
    344e:	425b      	negs	r3, r3
    3450:	0019      	movs	r1, r3
    3452:	0010      	movs	r0, r2
    3454:	4b15      	ldr	r3, [pc, #84]	; (34ac <_ZN17LEDLighting_Class15ConfiguratePinsEv+0xe4>)
    3456:	4798      	blx	r3
		gpio_set_pin_level(GPIO(pins.allPorts[i],pins.allPins[i]),false);
    3458:	687b      	ldr	r3, [r7, #4]
    345a:	22ec      	movs	r2, #236	; 0xec
    345c:	589b      	ldr	r3, [r3, r2]
    345e:	687a      	ldr	r2, [r7, #4]
    3460:	2174      	movs	r1, #116	; 0x74
    3462:	18d3      	adds	r3, r2, r3
    3464:	185b      	adds	r3, r3, r1
    3466:	781b      	ldrb	r3, [r3, #0]
    3468:	015b      	lsls	r3, r3, #5
    346a:	b2da      	uxtb	r2, r3
    346c:	687b      	ldr	r3, [r7, #4]
    346e:	21ec      	movs	r1, #236	; 0xec
    3470:	585b      	ldr	r3, [r3, r1]
    3472:	6879      	ldr	r1, [r7, #4]
    3474:	20ae      	movs	r0, #174	; 0xae
    3476:	18cb      	adds	r3, r1, r3
    3478:	181b      	adds	r3, r3, r0
    347a:	781b      	ldrb	r3, [r3, #0]
    347c:	211f      	movs	r1, #31
    347e:	400b      	ands	r3, r1
    3480:	b2db      	uxtb	r3, r3
    3482:	18d3      	adds	r3, r2, r3
    3484:	b2db      	uxtb	r3, r3
    3486:	2100      	movs	r1, #0
    3488:	0018      	movs	r0, r3
    348a:	4b09      	ldr	r3, [pc, #36]	; (34b0 <_ZN17LEDLighting_Class15ConfiguratePinsEv+0xe8>)
    348c:	4798      	blx	r3
	for (i = 0; i < totalPins; i++)
    348e:	687b      	ldr	r3, [r7, #4]
    3490:	22ec      	movs	r2, #236	; 0xec
    3492:	589b      	ldr	r3, [r3, r2]
    3494:	1c5a      	adds	r2, r3, #1
    3496:	687b      	ldr	r3, [r7, #4]
    3498:	21ec      	movs	r1, #236	; 0xec
    349a:	505a      	str	r2, [r3, r1]
    349c:	e79c      	b.n	33d8 <_ZN17LEDLighting_Class15ConfiguratePinsEv+0x10>
	}
}
    349e:	46c0      	nop			; (mov r8, r8)
    34a0:	46bd      	mov	sp, r7
    34a2:	b002      	add	sp, #8
    34a4:	bd80      	pop	{r7, pc}
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	00003025 	.word	0x00003025
    34ac:	00003001 	.word	0x00003001
    34b0:	00003065 	.word	0x00003065

000034b4 <_ZN17LEDLighting_Class7IsGreenEh>:
bool	LEDLighting_Class::IsGreen(uint8_t l){
    34b4:	b580      	push	{r7, lr}
    34b6:	b082      	sub	sp, #8
    34b8:	af00      	add	r7, sp, #0
    34ba:	6078      	str	r0, [r7, #4]
    34bc:	000a      	movs	r2, r1
    34be:	1cfb      	adds	r3, r7, #3
    34c0:	701a      	strb	r2, [r3, #0]
	return	localState.color[l]==0;
    34c2:	1cfb      	adds	r3, r7, #3
    34c4:	781a      	ldrb	r2, [r3, #0]
    34c6:	6879      	ldr	r1, [r7, #4]
    34c8:	239d      	movs	r3, #157	; 0x9d
    34ca:	005b      	lsls	r3, r3, #1
    34cc:	188a      	adds	r2, r1, r2
    34ce:	18d3      	adds	r3, r2, r3
    34d0:	781b      	ldrb	r3, [r3, #0]
    34d2:	425a      	negs	r2, r3
    34d4:	4153      	adcs	r3, r2
    34d6:	b2db      	uxtb	r3, r3
}
    34d8:	0018      	movs	r0, r3
    34da:	46bd      	mov	sp, r7
    34dc:	b002      	add	sp, #8
    34de:	bd80      	pop	{r7, pc}

000034e0 <_ZN17LEDLighting_Class5IsRedEh>:
bool	LEDLighting_Class::IsRed(uint8_t l){
    34e0:	b580      	push	{r7, lr}
    34e2:	b082      	sub	sp, #8
    34e4:	af00      	add	r7, sp, #0
    34e6:	6078      	str	r0, [r7, #4]
    34e8:	000a      	movs	r2, r1
    34ea:	1cfb      	adds	r3, r7, #3
    34ec:	701a      	strb	r2, [r3, #0]
	return	localState.color[l]==1;
    34ee:	1cfb      	adds	r3, r7, #3
    34f0:	781a      	ldrb	r2, [r3, #0]
    34f2:	6879      	ldr	r1, [r7, #4]
    34f4:	239d      	movs	r3, #157	; 0x9d
    34f6:	005b      	lsls	r3, r3, #1
    34f8:	188a      	adds	r2, r1, r2
    34fa:	18d3      	adds	r3, r2, r3
    34fc:	781b      	ldrb	r3, [r3, #0]
    34fe:	3b01      	subs	r3, #1
    3500:	425a      	negs	r2, r3
    3502:	4153      	adcs	r3, r2
    3504:	b2db      	uxtb	r3, r3
}
    3506:	0018      	movs	r0, r3
    3508:	46bd      	mov	sp, r7
    350a:	b002      	add	sp, #8
    350c:	bd80      	pop	{r7, pc}

0000350e <_ZN17LEDLighting_Class6IsBlueEh>:
bool	LEDLighting_Class::IsBlue(uint8_t l){
    350e:	b580      	push	{r7, lr}
    3510:	b082      	sub	sp, #8
    3512:	af00      	add	r7, sp, #0
    3514:	6078      	str	r0, [r7, #4]
    3516:	000a      	movs	r2, r1
    3518:	1cfb      	adds	r3, r7, #3
    351a:	701a      	strb	r2, [r3, #0]
	return	localState.color[l]==2;
    351c:	1cfb      	adds	r3, r7, #3
    351e:	781a      	ldrb	r2, [r3, #0]
    3520:	6879      	ldr	r1, [r7, #4]
    3522:	239d      	movs	r3, #157	; 0x9d
    3524:	005b      	lsls	r3, r3, #1
    3526:	188a      	adds	r2, r1, r2
    3528:	18d3      	adds	r3, r2, r3
    352a:	781b      	ldrb	r3, [r3, #0]
    352c:	3b02      	subs	r3, #2
    352e:	425a      	negs	r2, r3
    3530:	4153      	adcs	r3, r2
    3532:	b2db      	uxtb	r3, r3
}
    3534:	0018      	movs	r0, r3
    3536:	46bd      	mov	sp, r7
    3538:	b002      	add	sp, #8
    353a:	bd80      	pop	{r7, pc}

0000353c <hri_port_set_DIR_reg>:
{
    353c:	b580      	push	{r7, lr}
    353e:	b084      	sub	sp, #16
    3540:	af00      	add	r7, sp, #0
    3542:	60f8      	str	r0, [r7, #12]
    3544:	607a      	str	r2, [r7, #4]
    3546:	230b      	movs	r3, #11
    3548:	18fb      	adds	r3, r7, r3
    354a:	1c0a      	adds	r2, r1, #0
    354c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    354e:	230b      	movs	r3, #11
    3550:	18fb      	adds	r3, r7, r3
    3552:	781b      	ldrb	r3, [r3, #0]
    3554:	68fa      	ldr	r2, [r7, #12]
    3556:	01db      	lsls	r3, r3, #7
    3558:	18d3      	adds	r3, r2, r3
    355a:	3308      	adds	r3, #8
    355c:	687a      	ldr	r2, [r7, #4]
    355e:	601a      	str	r2, [r3, #0]
}
    3560:	46c0      	nop			; (mov r8, r8)
    3562:	46bd      	mov	sp, r7
    3564:	b004      	add	sp, #16
    3566:	bd80      	pop	{r7, pc}

00003568 <hri_port_read_DIR_reg>:
{
    3568:	b580      	push	{r7, lr}
    356a:	b082      	sub	sp, #8
    356c:	af00      	add	r7, sp, #0
    356e:	6078      	str	r0, [r7, #4]
    3570:	000a      	movs	r2, r1
    3572:	1cfb      	adds	r3, r7, #3
    3574:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3576:	1cfb      	adds	r3, r7, #3
    3578:	781a      	ldrb	r2, [r3, #0]
    357a:	687b      	ldr	r3, [r7, #4]
    357c:	01d2      	lsls	r2, r2, #7
    357e:	58d3      	ldr	r3, [r2, r3]
}
    3580:	0018      	movs	r0, r3
    3582:	46bd      	mov	sp, r7
    3584:	b002      	add	sp, #8
    3586:	bd80      	pop	{r7, pc}

00003588 <hri_port_clear_DIR_reg>:
{
    3588:	b580      	push	{r7, lr}
    358a:	b084      	sub	sp, #16
    358c:	af00      	add	r7, sp, #0
    358e:	60f8      	str	r0, [r7, #12]
    3590:	607a      	str	r2, [r7, #4]
    3592:	230b      	movs	r3, #11
    3594:	18fb      	adds	r3, r7, r3
    3596:	1c0a      	adds	r2, r1, #0
    3598:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    359a:	230b      	movs	r3, #11
    359c:	18fb      	adds	r3, r7, r3
    359e:	781b      	ldrb	r3, [r3, #0]
    35a0:	68fa      	ldr	r2, [r7, #12]
    35a2:	01db      	lsls	r3, r3, #7
    35a4:	18d3      	adds	r3, r2, r3
    35a6:	3304      	adds	r3, #4
    35a8:	687a      	ldr	r2, [r7, #4]
    35aa:	601a      	str	r2, [r3, #0]
}
    35ac:	46c0      	nop			; (mov r8, r8)
    35ae:	46bd      	mov	sp, r7
    35b0:	b004      	add	sp, #16
    35b2:	bd80      	pop	{r7, pc}

000035b4 <hri_port_set_OUT_reg>:
{
    35b4:	b580      	push	{r7, lr}
    35b6:	b084      	sub	sp, #16
    35b8:	af00      	add	r7, sp, #0
    35ba:	60f8      	str	r0, [r7, #12]
    35bc:	607a      	str	r2, [r7, #4]
    35be:	230b      	movs	r3, #11
    35c0:	18fb      	adds	r3, r7, r3
    35c2:	1c0a      	adds	r2, r1, #0
    35c4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    35c6:	230b      	movs	r3, #11
    35c8:	18fb      	adds	r3, r7, r3
    35ca:	781b      	ldrb	r3, [r3, #0]
    35cc:	68fa      	ldr	r2, [r7, #12]
    35ce:	01db      	lsls	r3, r3, #7
    35d0:	18d3      	adds	r3, r2, r3
    35d2:	3318      	adds	r3, #24
    35d4:	687a      	ldr	r2, [r7, #4]
    35d6:	601a      	str	r2, [r3, #0]
}
    35d8:	46c0      	nop			; (mov r8, r8)
    35da:	46bd      	mov	sp, r7
    35dc:	b004      	add	sp, #16
    35de:	bd80      	pop	{r7, pc}

000035e0 <hri_port_read_OUT_reg>:
{
    35e0:	b580      	push	{r7, lr}
    35e2:	b082      	sub	sp, #8
    35e4:	af00      	add	r7, sp, #0
    35e6:	6078      	str	r0, [r7, #4]
    35e8:	000a      	movs	r2, r1
    35ea:	1cfb      	adds	r3, r7, #3
    35ec:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    35ee:	1cfb      	adds	r3, r7, #3
    35f0:	781b      	ldrb	r3, [r3, #0]
    35f2:	687a      	ldr	r2, [r7, #4]
    35f4:	01db      	lsls	r3, r3, #7
    35f6:	18d3      	adds	r3, r2, r3
    35f8:	3310      	adds	r3, #16
    35fa:	681b      	ldr	r3, [r3, #0]
}
    35fc:	0018      	movs	r0, r3
    35fe:	46bd      	mov	sp, r7
    3600:	b002      	add	sp, #8
    3602:	bd80      	pop	{r7, pc}

00003604 <hri_port_clear_OUT_reg>:
{
    3604:	b580      	push	{r7, lr}
    3606:	b084      	sub	sp, #16
    3608:	af00      	add	r7, sp, #0
    360a:	60f8      	str	r0, [r7, #12]
    360c:	607a      	str	r2, [r7, #4]
    360e:	230b      	movs	r3, #11
    3610:	18fb      	adds	r3, r7, r3
    3612:	1c0a      	adds	r2, r1, #0
    3614:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3616:	230b      	movs	r3, #11
    3618:	18fb      	adds	r3, r7, r3
    361a:	781b      	ldrb	r3, [r3, #0]
    361c:	68fa      	ldr	r2, [r7, #12]
    361e:	01db      	lsls	r3, r3, #7
    3620:	18d3      	adds	r3, r2, r3
    3622:	3314      	adds	r3, #20
    3624:	687a      	ldr	r2, [r7, #4]
    3626:	601a      	str	r2, [r3, #0]
}
    3628:	46c0      	nop			; (mov r8, r8)
    362a:	46bd      	mov	sp, r7
    362c:	b004      	add	sp, #16
    362e:	bd80      	pop	{r7, pc}

00003630 <hri_port_read_IN_reg>:
{
    3630:	b580      	push	{r7, lr}
    3632:	b082      	sub	sp, #8
    3634:	af00      	add	r7, sp, #0
    3636:	6078      	str	r0, [r7, #4]
    3638:	000a      	movs	r2, r1
    363a:	1cfb      	adds	r3, r7, #3
    363c:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    363e:	1cfb      	adds	r3, r7, #3
    3640:	781b      	ldrb	r3, [r3, #0]
    3642:	687a      	ldr	r2, [r7, #4]
    3644:	01db      	lsls	r3, r3, #7
    3646:	18d3      	adds	r3, r2, r3
    3648:	3320      	adds	r3, #32
    364a:	681b      	ldr	r3, [r3, #0]
}
    364c:	0018      	movs	r0, r3
    364e:	46bd      	mov	sp, r7
    3650:	b002      	add	sp, #8
    3652:	bd80      	pop	{r7, pc}

00003654 <hri_port_write_PMUX_PMUXE_bf>:
{
    3654:	b590      	push	{r4, r7, lr}
    3656:	b085      	sub	sp, #20
    3658:	af00      	add	r7, sp, #0
    365a:	6078      	str	r0, [r7, #4]
    365c:	000c      	movs	r4, r1
    365e:	0010      	movs	r0, r2
    3660:	0019      	movs	r1, r3
    3662:	1cfb      	adds	r3, r7, #3
    3664:	1c22      	adds	r2, r4, #0
    3666:	701a      	strb	r2, [r3, #0]
    3668:	1cbb      	adds	r3, r7, #2
    366a:	1c02      	adds	r2, r0, #0
    366c:	701a      	strb	r2, [r3, #0]
    366e:	1c7b      	adds	r3, r7, #1
    3670:	1c0a      	adds	r2, r1, #0
    3672:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3674:	1cfb      	adds	r3, r7, #3
    3676:	7819      	ldrb	r1, [r3, #0]
    3678:	1cbb      	adds	r3, r7, #2
    367a:	781a      	ldrb	r2, [r3, #0]
    367c:	230f      	movs	r3, #15
    367e:	18fb      	adds	r3, r7, r3
    3680:	6878      	ldr	r0, [r7, #4]
    3682:	2430      	movs	r4, #48	; 0x30
    3684:	01c9      	lsls	r1, r1, #7
    3686:	1841      	adds	r1, r0, r1
    3688:	188a      	adds	r2, r1, r2
    368a:	1912      	adds	r2, r2, r4
    368c:	7812      	ldrb	r2, [r2, #0]
    368e:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3690:	230f      	movs	r3, #15
    3692:	18fb      	adds	r3, r7, r3
    3694:	220f      	movs	r2, #15
    3696:	18ba      	adds	r2, r7, r2
    3698:	7812      	ldrb	r2, [r2, #0]
    369a:	210f      	movs	r1, #15
    369c:	438a      	bics	r2, r1
    369e:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
    36a0:	1c7b      	adds	r3, r7, #1
    36a2:	781b      	ldrb	r3, [r3, #0]
    36a4:	220f      	movs	r2, #15
    36a6:	4013      	ands	r3, r2
    36a8:	b2d9      	uxtb	r1, r3
    36aa:	230f      	movs	r3, #15
    36ac:	18fb      	adds	r3, r7, r3
    36ae:	220f      	movs	r2, #15
    36b0:	18ba      	adds	r2, r7, r2
    36b2:	7812      	ldrb	r2, [r2, #0]
    36b4:	430a      	orrs	r2, r1
    36b6:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    36b8:	1cfb      	adds	r3, r7, #3
    36ba:	781a      	ldrb	r2, [r3, #0]
    36bc:	1cbb      	adds	r3, r7, #2
    36be:	781b      	ldrb	r3, [r3, #0]
    36c0:	6879      	ldr	r1, [r7, #4]
    36c2:	2030      	movs	r0, #48	; 0x30
    36c4:	01d2      	lsls	r2, r2, #7
    36c6:	188a      	adds	r2, r1, r2
    36c8:	18d3      	adds	r3, r2, r3
    36ca:	181b      	adds	r3, r3, r0
    36cc:	220f      	movs	r2, #15
    36ce:	18ba      	adds	r2, r7, r2
    36d0:	7812      	ldrb	r2, [r2, #0]
    36d2:	701a      	strb	r2, [r3, #0]
}
    36d4:	46c0      	nop			; (mov r8, r8)
    36d6:	46bd      	mov	sp, r7
    36d8:	b005      	add	sp, #20
    36da:	bd90      	pop	{r4, r7, pc}

000036dc <hri_port_write_PMUX_PMUXO_bf>:
{
    36dc:	b590      	push	{r4, r7, lr}
    36de:	b085      	sub	sp, #20
    36e0:	af00      	add	r7, sp, #0
    36e2:	6078      	str	r0, [r7, #4]
    36e4:	000c      	movs	r4, r1
    36e6:	0010      	movs	r0, r2
    36e8:	0019      	movs	r1, r3
    36ea:	1cfb      	adds	r3, r7, #3
    36ec:	1c22      	adds	r2, r4, #0
    36ee:	701a      	strb	r2, [r3, #0]
    36f0:	1cbb      	adds	r3, r7, #2
    36f2:	1c02      	adds	r2, r0, #0
    36f4:	701a      	strb	r2, [r3, #0]
    36f6:	1c7b      	adds	r3, r7, #1
    36f8:	1c0a      	adds	r2, r1, #0
    36fa:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    36fc:	1cfb      	adds	r3, r7, #3
    36fe:	7819      	ldrb	r1, [r3, #0]
    3700:	1cbb      	adds	r3, r7, #2
    3702:	781a      	ldrb	r2, [r3, #0]
    3704:	230f      	movs	r3, #15
    3706:	18fb      	adds	r3, r7, r3
    3708:	6878      	ldr	r0, [r7, #4]
    370a:	2430      	movs	r4, #48	; 0x30
    370c:	01c9      	lsls	r1, r1, #7
    370e:	1841      	adds	r1, r0, r1
    3710:	188a      	adds	r2, r1, r2
    3712:	1912      	adds	r2, r2, r4
    3714:	7812      	ldrb	r2, [r2, #0]
    3716:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3718:	230f      	movs	r3, #15
    371a:	18fb      	adds	r3, r7, r3
    371c:	220f      	movs	r2, #15
    371e:	18ba      	adds	r2, r7, r2
    3720:	7812      	ldrb	r2, [r2, #0]
    3722:	210f      	movs	r1, #15
    3724:	400a      	ands	r2, r1
    3726:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
    3728:	1c7b      	adds	r3, r7, #1
    372a:	781b      	ldrb	r3, [r3, #0]
    372c:	011b      	lsls	r3, r3, #4
    372e:	b2d9      	uxtb	r1, r3
    3730:	230f      	movs	r3, #15
    3732:	18fb      	adds	r3, r7, r3
    3734:	220f      	movs	r2, #15
    3736:	18ba      	adds	r2, r7, r2
    3738:	7812      	ldrb	r2, [r2, #0]
    373a:	430a      	orrs	r2, r1
    373c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    373e:	1cfb      	adds	r3, r7, #3
    3740:	781a      	ldrb	r2, [r3, #0]
    3742:	1cbb      	adds	r3, r7, #2
    3744:	781b      	ldrb	r3, [r3, #0]
    3746:	6879      	ldr	r1, [r7, #4]
    3748:	2030      	movs	r0, #48	; 0x30
    374a:	01d2      	lsls	r2, r2, #7
    374c:	188a      	adds	r2, r1, r2
    374e:	18d3      	adds	r3, r2, r3
    3750:	181b      	adds	r3, r3, r0
    3752:	220f      	movs	r2, #15
    3754:	18ba      	adds	r2, r7, r2
    3756:	7812      	ldrb	r2, [r2, #0]
    3758:	701a      	strb	r2, [r3, #0]
}
    375a:	46c0      	nop			; (mov r8, r8)
    375c:	46bd      	mov	sp, r7
    375e:	b005      	add	sp, #20
    3760:	bd90      	pop	{r4, r7, pc}

00003762 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    3762:	b590      	push	{r4, r7, lr}
    3764:	b085      	sub	sp, #20
    3766:	af00      	add	r7, sp, #0
    3768:	6078      	str	r0, [r7, #4]
    376a:	000c      	movs	r4, r1
    376c:	0010      	movs	r0, r2
    376e:	0019      	movs	r1, r3
    3770:	1cfb      	adds	r3, r7, #3
    3772:	1c22      	adds	r2, r4, #0
    3774:	701a      	strb	r2, [r3, #0]
    3776:	1cbb      	adds	r3, r7, #2
    3778:	1c02      	adds	r2, r0, #0
    377a:	701a      	strb	r2, [r3, #0]
    377c:	1c7b      	adds	r3, r7, #1
    377e:	1c0a      	adds	r2, r1, #0
    3780:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3782:	1cfb      	adds	r3, r7, #3
    3784:	7819      	ldrb	r1, [r3, #0]
    3786:	1cbb      	adds	r3, r7, #2
    3788:	781a      	ldrb	r2, [r3, #0]
    378a:	230f      	movs	r3, #15
    378c:	18fb      	adds	r3, r7, r3
    378e:	6878      	ldr	r0, [r7, #4]
    3790:	2440      	movs	r4, #64	; 0x40
    3792:	01c9      	lsls	r1, r1, #7
    3794:	1841      	adds	r1, r0, r1
    3796:	188a      	adds	r2, r1, r2
    3798:	1912      	adds	r2, r2, r4
    379a:	7812      	ldrb	r2, [r2, #0]
    379c:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    379e:	230f      	movs	r3, #15
    37a0:	18fb      	adds	r3, r7, r3
    37a2:	220f      	movs	r2, #15
    37a4:	18ba      	adds	r2, r7, r2
    37a6:	7812      	ldrb	r2, [r2, #0]
    37a8:	2101      	movs	r1, #1
    37aa:	438a      	bics	r2, r1
    37ac:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    37ae:	1c7b      	adds	r3, r7, #1
    37b0:	7819      	ldrb	r1, [r3, #0]
    37b2:	230f      	movs	r3, #15
    37b4:	18fb      	adds	r3, r7, r3
    37b6:	220f      	movs	r2, #15
    37b8:	18ba      	adds	r2, r7, r2
    37ba:	7812      	ldrb	r2, [r2, #0]
    37bc:	430a      	orrs	r2, r1
    37be:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    37c0:	1cfb      	adds	r3, r7, #3
    37c2:	781a      	ldrb	r2, [r3, #0]
    37c4:	1cbb      	adds	r3, r7, #2
    37c6:	781b      	ldrb	r3, [r3, #0]
    37c8:	6879      	ldr	r1, [r7, #4]
    37ca:	2040      	movs	r0, #64	; 0x40
    37cc:	01d2      	lsls	r2, r2, #7
    37ce:	188a      	adds	r2, r1, r2
    37d0:	18d3      	adds	r3, r2, r3
    37d2:	181b      	adds	r3, r3, r0
    37d4:	220f      	movs	r2, #15
    37d6:	18ba      	adds	r2, r7, r2
    37d8:	7812      	ldrb	r2, [r2, #0]
    37da:	701a      	strb	r2, [r3, #0]
}
    37dc:	46c0      	nop			; (mov r8, r8)
    37de:	46bd      	mov	sp, r7
    37e0:	b005      	add	sp, #20
    37e2:	bd90      	pop	{r4, r7, pc}

000037e4 <hri_port_set_PINCFG_PULLEN_bit>:
{
    37e4:	b5b0      	push	{r4, r5, r7, lr}
    37e6:	b082      	sub	sp, #8
    37e8:	af00      	add	r7, sp, #0
    37ea:	6078      	str	r0, [r7, #4]
    37ec:	0008      	movs	r0, r1
    37ee:	0011      	movs	r1, r2
    37f0:	1cfb      	adds	r3, r7, #3
    37f2:	1c02      	adds	r2, r0, #0
    37f4:	701a      	strb	r2, [r3, #0]
    37f6:	1cbb      	adds	r3, r7, #2
    37f8:	1c0a      	adds	r2, r1, #0
    37fa:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    37fc:	1cfb      	adds	r3, r7, #3
    37fe:	781a      	ldrb	r2, [r3, #0]
    3800:	1cbb      	adds	r3, r7, #2
    3802:	781b      	ldrb	r3, [r3, #0]
    3804:	1cf9      	adds	r1, r7, #3
    3806:	7808      	ldrb	r0, [r1, #0]
    3808:	1cb9      	adds	r1, r7, #2
    380a:	7809      	ldrb	r1, [r1, #0]
    380c:	687c      	ldr	r4, [r7, #4]
    380e:	2540      	movs	r5, #64	; 0x40
    3810:	01c0      	lsls	r0, r0, #7
    3812:	1820      	adds	r0, r4, r0
    3814:	1841      	adds	r1, r0, r1
    3816:	1949      	adds	r1, r1, r5
    3818:	7809      	ldrb	r1, [r1, #0]
    381a:	b2c9      	uxtb	r1, r1
    381c:	2004      	movs	r0, #4
    381e:	4301      	orrs	r1, r0
    3820:	b2cc      	uxtb	r4, r1
    3822:	6879      	ldr	r1, [r7, #4]
    3824:	2040      	movs	r0, #64	; 0x40
    3826:	01d2      	lsls	r2, r2, #7
    3828:	188a      	adds	r2, r1, r2
    382a:	18d3      	adds	r3, r2, r3
    382c:	181b      	adds	r3, r3, r0
    382e:	1c22      	adds	r2, r4, #0
    3830:	701a      	strb	r2, [r3, #0]
}
    3832:	46c0      	nop			; (mov r8, r8)
    3834:	46bd      	mov	sp, r7
    3836:	b002      	add	sp, #8
    3838:	bdb0      	pop	{r4, r5, r7, pc}

0000383a <hri_port_clear_PINCFG_PULLEN_bit>:
{
    383a:	b5b0      	push	{r4, r5, r7, lr}
    383c:	b082      	sub	sp, #8
    383e:	af00      	add	r7, sp, #0
    3840:	6078      	str	r0, [r7, #4]
    3842:	0008      	movs	r0, r1
    3844:	0011      	movs	r1, r2
    3846:	1cfb      	adds	r3, r7, #3
    3848:	1c02      	adds	r2, r0, #0
    384a:	701a      	strb	r2, [r3, #0]
    384c:	1cbb      	adds	r3, r7, #2
    384e:	1c0a      	adds	r2, r1, #0
    3850:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    3852:	1cfb      	adds	r3, r7, #3
    3854:	781a      	ldrb	r2, [r3, #0]
    3856:	1cbb      	adds	r3, r7, #2
    3858:	781b      	ldrb	r3, [r3, #0]
    385a:	1cf9      	adds	r1, r7, #3
    385c:	7808      	ldrb	r0, [r1, #0]
    385e:	1cb9      	adds	r1, r7, #2
    3860:	7809      	ldrb	r1, [r1, #0]
    3862:	687c      	ldr	r4, [r7, #4]
    3864:	2540      	movs	r5, #64	; 0x40
    3866:	01c0      	lsls	r0, r0, #7
    3868:	1820      	adds	r0, r4, r0
    386a:	1841      	adds	r1, r0, r1
    386c:	1949      	adds	r1, r1, r5
    386e:	7809      	ldrb	r1, [r1, #0]
    3870:	b2c9      	uxtb	r1, r1
    3872:	2004      	movs	r0, #4
    3874:	4381      	bics	r1, r0
    3876:	b2cc      	uxtb	r4, r1
    3878:	6879      	ldr	r1, [r7, #4]
    387a:	2040      	movs	r0, #64	; 0x40
    387c:	01d2      	lsls	r2, r2, #7
    387e:	188a      	adds	r2, r1, r2
    3880:	18d3      	adds	r3, r2, r3
    3882:	181b      	adds	r3, r3, r0
    3884:	1c22      	adds	r2, r4, #0
    3886:	701a      	strb	r2, [r3, #0]
}
    3888:	46c0      	nop			; (mov r8, r8)
    388a:	46bd      	mov	sp, r7
    388c:	b002      	add	sp, #8
    388e:	bdb0      	pop	{r4, r5, r7, pc}

00003890 <hri_port_write_WRCONFIG_reg>:
{
    3890:	b580      	push	{r7, lr}
    3892:	b084      	sub	sp, #16
    3894:	af00      	add	r7, sp, #0
    3896:	60f8      	str	r0, [r7, #12]
    3898:	607a      	str	r2, [r7, #4]
    389a:	230b      	movs	r3, #11
    389c:	18fb      	adds	r3, r7, r3
    389e:	1c0a      	adds	r2, r1, #0
    38a0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    38a2:	230b      	movs	r3, #11
    38a4:	18fb      	adds	r3, r7, r3
    38a6:	781b      	ldrb	r3, [r3, #0]
    38a8:	68fa      	ldr	r2, [r7, #12]
    38aa:	01db      	lsls	r3, r3, #7
    38ac:	18d3      	adds	r3, r2, r3
    38ae:	3328      	adds	r3, #40	; 0x28
    38b0:	687a      	ldr	r2, [r7, #4]
    38b2:	601a      	str	r2, [r3, #0]
}
    38b4:	46c0      	nop			; (mov r8, r8)
    38b6:	46bd      	mov	sp, r7
    38b8:	b004      	add	sp, #16
    38ba:	bd80      	pop	{r7, pc}

000038bc <_gpio_set_direction>:
{
    38bc:	b580      	push	{r7, lr}
    38be:	b082      	sub	sp, #8
    38c0:	af00      	add	r7, sp, #0
    38c2:	6039      	str	r1, [r7, #0]
    38c4:	0011      	movs	r1, r2
    38c6:	1dfb      	adds	r3, r7, #7
    38c8:	1c02      	adds	r2, r0, #0
    38ca:	701a      	strb	r2, [r3, #0]
    38cc:	1dbb      	adds	r3, r7, #6
    38ce:	1c0a      	adds	r2, r1, #0
    38d0:	701a      	strb	r2, [r3, #0]
	switch (direction) {
    38d2:	1dbb      	adds	r3, r7, #6
    38d4:	781b      	ldrb	r3, [r3, #0]
    38d6:	2b01      	cmp	r3, #1
    38d8:	d023      	beq.n	3922 <_gpio_set_direction+0x66>
    38da:	2b02      	cmp	r3, #2
    38dc:	d03f      	beq.n	395e <_gpio_set_direction+0xa2>
    38de:	2b00      	cmp	r3, #0
    38e0:	d15d      	bne.n	399e <_gpio_set_direction+0xe2>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    38e2:	683a      	ldr	r2, [r7, #0]
    38e4:	1dfb      	adds	r3, r7, #7
    38e6:	7819      	ldrb	r1, [r3, #0]
    38e8:	23c0      	movs	r3, #192	; 0xc0
    38ea:	05db      	lsls	r3, r3, #23
    38ec:	0018      	movs	r0, r3
    38ee:	4b31      	ldr	r3, [pc, #196]	; (39b4 <_gpio_set_direction+0xf8>)
    38f0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    38f2:	683b      	ldr	r3, [r7, #0]
    38f4:	041b      	lsls	r3, r3, #16
    38f6:	0c1b      	lsrs	r3, r3, #16
    38f8:	2280      	movs	r2, #128	; 0x80
    38fa:	05d2      	lsls	r2, r2, #23
    38fc:	431a      	orrs	r2, r3
    38fe:	1dfb      	adds	r3, r7, #7
    3900:	781b      	ldrb	r3, [r3, #0]
    3902:	482d      	ldr	r0, [pc, #180]	; (39b8 <_gpio_set_direction+0xfc>)
    3904:	0019      	movs	r1, r3
    3906:	4b2d      	ldr	r3, [pc, #180]	; (39bc <_gpio_set_direction+0x100>)
    3908:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    390a:	683b      	ldr	r3, [r7, #0]
    390c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    390e:	22c0      	movs	r2, #192	; 0xc0
    3910:	0612      	lsls	r2, r2, #24
    3912:	431a      	orrs	r2, r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3914:	1dfb      	adds	r3, r7, #7
    3916:	781b      	ldrb	r3, [r3, #0]
    3918:	4827      	ldr	r0, [pc, #156]	; (39b8 <_gpio_set_direction+0xfc>)
    391a:	0019      	movs	r1, r3
    391c:	4b27      	ldr	r3, [pc, #156]	; (39bc <_gpio_set_direction+0x100>)
    391e:	4798      	blx	r3
		break;
    3920:	e043      	b.n	39aa <_gpio_set_direction+0xee>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    3922:	683a      	ldr	r2, [r7, #0]
    3924:	1dfb      	adds	r3, r7, #7
    3926:	7819      	ldrb	r1, [r3, #0]
    3928:	23c0      	movs	r3, #192	; 0xc0
    392a:	05db      	lsls	r3, r3, #23
    392c:	0018      	movs	r0, r3
    392e:	4b21      	ldr	r3, [pc, #132]	; (39b4 <_gpio_set_direction+0xf8>)
    3930:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    3932:	683b      	ldr	r3, [r7, #0]
    3934:	041b      	lsls	r3, r3, #16
    3936:	0c1b      	lsrs	r3, r3, #16
    3938:	4a21      	ldr	r2, [pc, #132]	; (39c0 <_gpio_set_direction+0x104>)
    393a:	431a      	orrs	r2, r3
    393c:	1dfb      	adds	r3, r7, #7
    393e:	781b      	ldrb	r3, [r3, #0]
    3940:	481d      	ldr	r0, [pc, #116]	; (39b8 <_gpio_set_direction+0xfc>)
    3942:	0019      	movs	r1, r3
    3944:	4b1d      	ldr	r3, [pc, #116]	; (39bc <_gpio_set_direction+0x100>)
    3946:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    3948:	683b      	ldr	r3, [r7, #0]
    394a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    394c:	4a1d      	ldr	r2, [pc, #116]	; (39c4 <_gpio_set_direction+0x108>)
    394e:	431a      	orrs	r2, r3
		                                | ((mask & 0xffff0000) >> 16));
    3950:	1dfb      	adds	r3, r7, #7
    3952:	781b      	ldrb	r3, [r3, #0]
    3954:	4818      	ldr	r0, [pc, #96]	; (39b8 <_gpio_set_direction+0xfc>)
    3956:	0019      	movs	r1, r3
    3958:	4b18      	ldr	r3, [pc, #96]	; (39bc <_gpio_set_direction+0x100>)
    395a:	4798      	blx	r3
		break;
    395c:	e025      	b.n	39aa <_gpio_set_direction+0xee>
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
    395e:	683a      	ldr	r2, [r7, #0]
    3960:	1dfb      	adds	r3, r7, #7
    3962:	7819      	ldrb	r1, [r3, #0]
    3964:	23c0      	movs	r3, #192	; 0xc0
    3966:	05db      	lsls	r3, r3, #23
    3968:	0018      	movs	r0, r3
    396a:	4b17      	ldr	r3, [pc, #92]	; (39c8 <_gpio_set_direction+0x10c>)
    396c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    396e:	683b      	ldr	r3, [r7, #0]
    3970:	041b      	lsls	r3, r3, #16
    3972:	0c1b      	lsrs	r3, r3, #16
    3974:	2280      	movs	r2, #128	; 0x80
    3976:	05d2      	lsls	r2, r2, #23
    3978:	431a      	orrs	r2, r3
    397a:	1dfb      	adds	r3, r7, #7
    397c:	781b      	ldrb	r3, [r3, #0]
    397e:	480e      	ldr	r0, [pc, #56]	; (39b8 <_gpio_set_direction+0xfc>)
    3980:	0019      	movs	r1, r3
    3982:	4b0e      	ldr	r3, [pc, #56]	; (39bc <_gpio_set_direction+0x100>)
    3984:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3986:	683b      	ldr	r3, [r7, #0]
    3988:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    398a:	22c0      	movs	r2, #192	; 0xc0
    398c:	0612      	lsls	r2, r2, #24
    398e:	431a      	orrs	r2, r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3990:	1dfb      	adds	r3, r7, #7
    3992:	781b      	ldrb	r3, [r3, #0]
    3994:	4808      	ldr	r0, [pc, #32]	; (39b8 <_gpio_set_direction+0xfc>)
    3996:	0019      	movs	r1, r3
    3998:	4b08      	ldr	r3, [pc, #32]	; (39bc <_gpio_set_direction+0x100>)
    399a:	4798      	blx	r3
		break;
    399c:	e005      	b.n	39aa <_gpio_set_direction+0xee>
		ASSERT(false);
    399e:	4b0b      	ldr	r3, [pc, #44]	; (39cc <_gpio_set_direction+0x110>)
    39a0:	2245      	movs	r2, #69	; 0x45
    39a2:	0019      	movs	r1, r3
    39a4:	2000      	movs	r0, #0
    39a6:	4b0a      	ldr	r3, [pc, #40]	; (39d0 <_gpio_set_direction+0x114>)
    39a8:	4798      	blx	r3
}
    39aa:	46c0      	nop			; (mov r8, r8)
    39ac:	46bd      	mov	sp, r7
    39ae:	b002      	add	sp, #8
    39b0:	bd80      	pop	{r7, pc}
    39b2:	46c0      	nop			; (mov r8, r8)
    39b4:	00003589 	.word	0x00003589
    39b8:	41004400 	.word	0x41004400
    39bc:	00003891 	.word	0x00003891
    39c0:	40020000 	.word	0x40020000
    39c4:	c0020000 	.word	0xc0020000
    39c8:	0000353d 	.word	0x0000353d
    39cc:	00005230 	.word	0x00005230
    39d0:	00000db5 	.word	0x00000db5

000039d4 <_gpio_set_level>:
{
    39d4:	b580      	push	{r7, lr}
    39d6:	b082      	sub	sp, #8
    39d8:	af00      	add	r7, sp, #0
    39da:	6039      	str	r1, [r7, #0]
    39dc:	0011      	movs	r1, r2
    39de:	1dfb      	adds	r3, r7, #7
    39e0:	1c02      	adds	r2, r0, #0
    39e2:	701a      	strb	r2, [r3, #0]
    39e4:	1dbb      	adds	r3, r7, #6
    39e6:	1c0a      	adds	r2, r1, #0
    39e8:	701a      	strb	r2, [r3, #0]
	if (level) {
    39ea:	1dbb      	adds	r3, r7, #6
    39ec:	781b      	ldrb	r3, [r3, #0]
    39ee:	2b00      	cmp	r3, #0
    39f0:	d008      	beq.n	3a04 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    39f2:	683a      	ldr	r2, [r7, #0]
    39f4:	1dfb      	adds	r3, r7, #7
    39f6:	7819      	ldrb	r1, [r3, #0]
    39f8:	23c0      	movs	r3, #192	; 0xc0
    39fa:	05db      	lsls	r3, r3, #23
    39fc:	0018      	movs	r0, r3
    39fe:	4b07      	ldr	r3, [pc, #28]	; (3a1c <_gpio_set_level+0x48>)
    3a00:	4798      	blx	r3
}
    3a02:	e007      	b.n	3a14 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    3a04:	683a      	ldr	r2, [r7, #0]
    3a06:	1dfb      	adds	r3, r7, #7
    3a08:	7819      	ldrb	r1, [r3, #0]
    3a0a:	23c0      	movs	r3, #192	; 0xc0
    3a0c:	05db      	lsls	r3, r3, #23
    3a0e:	0018      	movs	r0, r3
    3a10:	4b03      	ldr	r3, [pc, #12]	; (3a20 <_gpio_set_level+0x4c>)
    3a12:	4798      	blx	r3
}
    3a14:	46c0      	nop			; (mov r8, r8)
    3a16:	46bd      	mov	sp, r7
    3a18:	b002      	add	sp, #8
    3a1a:	bd80      	pop	{r7, pc}
    3a1c:	000035b5 	.word	0x000035b5
    3a20:	00003605 	.word	0x00003605

00003a24 <_gpio_get_level>:
{
    3a24:	b580      	push	{r7, lr}
    3a26:	b086      	sub	sp, #24
    3a28:	af00      	add	r7, sp, #0
    3a2a:	0002      	movs	r2, r0
    3a2c:	1dfb      	adds	r3, r7, #7
    3a2e:	701a      	strb	r2, [r3, #0]
	CRITICAL_SECTION_ENTER();
    3a30:	230c      	movs	r3, #12
    3a32:	18fb      	adds	r3, r7, r3
    3a34:	0018      	movs	r0, r3
    3a36:	4b18      	ldr	r3, [pc, #96]	; (3a98 <_gpio_get_level+0x74>)
    3a38:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);
    3a3a:	1dfb      	adds	r3, r7, #7
    3a3c:	781a      	ldrb	r2, [r3, #0]
    3a3e:	23c0      	movs	r3, #192	; 0xc0
    3a40:	05db      	lsls	r3, r3, #23
    3a42:	0011      	movs	r1, r2
    3a44:	0018      	movs	r0, r3
    3a46:	4b15      	ldr	r3, [pc, #84]	; (3a9c <_gpio_get_level+0x78>)
    3a48:	4798      	blx	r3
    3a4a:	0003      	movs	r3, r0
    3a4c:	617b      	str	r3, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    3a4e:	1dfb      	adds	r3, r7, #7
    3a50:	781b      	ldrb	r3, [r3, #0]
    3a52:	4a13      	ldr	r2, [pc, #76]	; (3aa0 <_gpio_get_level+0x7c>)
    3a54:	0019      	movs	r1, r3
    3a56:	0010      	movs	r0, r2
    3a58:	4b12      	ldr	r3, [pc, #72]	; (3aa4 <_gpio_get_level+0x80>)
    3a5a:	4798      	blx	r3
    3a5c:	0002      	movs	r2, r0
    3a5e:	697b      	ldr	r3, [r7, #20]
    3a60:	43db      	mvns	r3, r3
    3a62:	4013      	ands	r3, r2
    3a64:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3a66:	1dfb      	adds	r3, r7, #7
    3a68:	781a      	ldrb	r2, [r3, #0]
    3a6a:	23c0      	movs	r3, #192	; 0xc0
    3a6c:	05db      	lsls	r3, r3, #23
    3a6e:	0011      	movs	r1, r2
    3a70:	0018      	movs	r0, r3
    3a72:	4b0d      	ldr	r3, [pc, #52]	; (3aa8 <_gpio_get_level+0x84>)
    3a74:	4798      	blx	r3
    3a76:	0002      	movs	r2, r0
    3a78:	697b      	ldr	r3, [r7, #20]
    3a7a:	4013      	ands	r3, r2
    3a7c:	693a      	ldr	r2, [r7, #16]
    3a7e:	4313      	orrs	r3, r2
    3a80:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
    3a82:	230c      	movs	r3, #12
    3a84:	18fb      	adds	r3, r7, r3
    3a86:	0018      	movs	r0, r3
    3a88:	4b08      	ldr	r3, [pc, #32]	; (3aac <_gpio_get_level+0x88>)
    3a8a:	4798      	blx	r3
	return tmp;
    3a8c:	693b      	ldr	r3, [r7, #16]
}
    3a8e:	0018      	movs	r0, r3
    3a90:	46bd      	mov	sp, r7
    3a92:	b006      	add	sp, #24
    3a94:	bd80      	pop	{r7, pc}
    3a96:	46c0      	nop			; (mov r8, r8)
    3a98:	00001709 	.word	0x00001709
    3a9c:	00003569 	.word	0x00003569
    3aa0:	41004400 	.word	0x41004400
    3aa4:	00003631 	.word	0x00003631
    3aa8:	000035e1 	.word	0x000035e1
    3aac:	00001717 	.word	0x00001717

00003ab0 <_gpio_set_pin_pull_mode>:
{
    3ab0:	b590      	push	{r4, r7, lr}
    3ab2:	b083      	sub	sp, #12
    3ab4:	af00      	add	r7, sp, #0
    3ab6:	0004      	movs	r4, r0
    3ab8:	0008      	movs	r0, r1
    3aba:	0011      	movs	r1, r2
    3abc:	1dfb      	adds	r3, r7, #7
    3abe:	1c22      	adds	r2, r4, #0
    3ac0:	701a      	strb	r2, [r3, #0]
    3ac2:	1dbb      	adds	r3, r7, #6
    3ac4:	1c02      	adds	r2, r0, #0
    3ac6:	701a      	strb	r2, [r3, #0]
    3ac8:	1d7b      	adds	r3, r7, #5
    3aca:	1c0a      	adds	r2, r1, #0
    3acc:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
    3ace:	1d7b      	adds	r3, r7, #5
    3ad0:	781b      	ldrb	r3, [r3, #0]
    3ad2:	2b01      	cmp	r3, #1
    3ad4:	d00c      	beq.n	3af0 <_gpio_set_pin_pull_mode+0x40>
    3ad6:	2b02      	cmp	r3, #2
    3ad8:	d029      	beq.n	3b2e <_gpio_set_pin_pull_mode+0x7e>
    3ada:	2b00      	cmp	r3, #0
    3adc:	d146      	bne.n	3b6c <_gpio_set_pin_pull_mode+0xbc>
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    3ade:	1dbb      	adds	r3, r7, #6
    3ae0:	781a      	ldrb	r2, [r3, #0]
    3ae2:	1dfb      	adds	r3, r7, #7
    3ae4:	781b      	ldrb	r3, [r3, #0]
    3ae6:	4827      	ldr	r0, [pc, #156]	; (3b84 <_gpio_set_pin_pull_mode+0xd4>)
    3ae8:	0019      	movs	r1, r3
    3aea:	4b27      	ldr	r3, [pc, #156]	; (3b88 <_gpio_set_pin_pull_mode+0xd8>)
    3aec:	4798      	blx	r3
		break;
    3aee:	e044      	b.n	3b7a <_gpio_set_pin_pull_mode+0xca>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    3af0:	1dbb      	adds	r3, r7, #6
    3af2:	781b      	ldrb	r3, [r3, #0]
    3af4:	2201      	movs	r2, #1
    3af6:	409a      	lsls	r2, r3
    3af8:	1dfb      	adds	r3, r7, #7
    3afa:	7819      	ldrb	r1, [r3, #0]
    3afc:	23c0      	movs	r3, #192	; 0xc0
    3afe:	05db      	lsls	r3, r3, #23
    3b00:	0018      	movs	r0, r3
    3b02:	4b22      	ldr	r3, [pc, #136]	; (3b8c <_gpio_set_pin_pull_mode+0xdc>)
    3b04:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    3b06:	1dbb      	adds	r3, r7, #6
    3b08:	781a      	ldrb	r2, [r3, #0]
    3b0a:	1dfb      	adds	r3, r7, #7
    3b0c:	781b      	ldrb	r3, [r3, #0]
    3b0e:	481d      	ldr	r0, [pc, #116]	; (3b84 <_gpio_set_pin_pull_mode+0xd4>)
    3b10:	0019      	movs	r1, r3
    3b12:	4b1f      	ldr	r3, [pc, #124]	; (3b90 <_gpio_set_pin_pull_mode+0xe0>)
    3b14:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
    3b16:	1dbb      	adds	r3, r7, #6
    3b18:	781b      	ldrb	r3, [r3, #0]
    3b1a:	2201      	movs	r2, #1
    3b1c:	409a      	lsls	r2, r3
    3b1e:	1dfb      	adds	r3, r7, #7
    3b20:	7819      	ldrb	r1, [r3, #0]
    3b22:	23c0      	movs	r3, #192	; 0xc0
    3b24:	05db      	lsls	r3, r3, #23
    3b26:	0018      	movs	r0, r3
    3b28:	4b1a      	ldr	r3, [pc, #104]	; (3b94 <_gpio_set_pin_pull_mode+0xe4>)
    3b2a:	4798      	blx	r3
		break;
    3b2c:	e025      	b.n	3b7a <_gpio_set_pin_pull_mode+0xca>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    3b2e:	1dbb      	adds	r3, r7, #6
    3b30:	781b      	ldrb	r3, [r3, #0]
    3b32:	2201      	movs	r2, #1
    3b34:	409a      	lsls	r2, r3
    3b36:	1dfb      	adds	r3, r7, #7
    3b38:	7819      	ldrb	r1, [r3, #0]
    3b3a:	23c0      	movs	r3, #192	; 0xc0
    3b3c:	05db      	lsls	r3, r3, #23
    3b3e:	0018      	movs	r0, r3
    3b40:	4b12      	ldr	r3, [pc, #72]	; (3b8c <_gpio_set_pin_pull_mode+0xdc>)
    3b42:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    3b44:	1dbb      	adds	r3, r7, #6
    3b46:	781a      	ldrb	r2, [r3, #0]
    3b48:	1dfb      	adds	r3, r7, #7
    3b4a:	781b      	ldrb	r3, [r3, #0]
    3b4c:	480d      	ldr	r0, [pc, #52]	; (3b84 <_gpio_set_pin_pull_mode+0xd4>)
    3b4e:	0019      	movs	r1, r3
    3b50:	4b0f      	ldr	r3, [pc, #60]	; (3b90 <_gpio_set_pin_pull_mode+0xe0>)
    3b52:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
    3b54:	1dbb      	adds	r3, r7, #6
    3b56:	781b      	ldrb	r3, [r3, #0]
    3b58:	2201      	movs	r2, #1
    3b5a:	409a      	lsls	r2, r3
    3b5c:	1dfb      	adds	r3, r7, #7
    3b5e:	7819      	ldrb	r1, [r3, #0]
    3b60:	23c0      	movs	r3, #192	; 0xc0
    3b62:	05db      	lsls	r3, r3, #23
    3b64:	0018      	movs	r0, r3
    3b66:	4b0c      	ldr	r3, [pc, #48]	; (3b98 <_gpio_set_pin_pull_mode+0xe8>)
    3b68:	4798      	blx	r3
		break;
    3b6a:	e006      	b.n	3b7a <_gpio_set_pin_pull_mode+0xca>
		ASSERT(false);
    3b6c:	4b0b      	ldr	r3, [pc, #44]	; (3b9c <_gpio_set_pin_pull_mode+0xec>)
    3b6e:	2288      	movs	r2, #136	; 0x88
    3b70:	0019      	movs	r1, r3
    3b72:	2000      	movs	r0, #0
    3b74:	4b0a      	ldr	r3, [pc, #40]	; (3ba0 <_gpio_set_pin_pull_mode+0xf0>)
    3b76:	4798      	blx	r3
		break;
    3b78:	46c0      	nop			; (mov r8, r8)
}
    3b7a:	46c0      	nop			; (mov r8, r8)
    3b7c:	46bd      	mov	sp, r7
    3b7e:	b003      	add	sp, #12
    3b80:	bd90      	pop	{r4, r7, pc}
    3b82:	46c0      	nop			; (mov r8, r8)
    3b84:	41004400 	.word	0x41004400
    3b88:	0000383b 	.word	0x0000383b
    3b8c:	00003589 	.word	0x00003589
    3b90:	000037e5 	.word	0x000037e5
    3b94:	000035b5 	.word	0x000035b5
    3b98:	00003605 	.word	0x00003605
    3b9c:	00005230 	.word	0x00005230
    3ba0:	00000db5 	.word	0x00000db5

00003ba4 <_gpio_set_pin_function>:
{
    3ba4:	b590      	push	{r4, r7, lr}
    3ba6:	b085      	sub	sp, #20
    3ba8:	af00      	add	r7, sp, #0
    3baa:	6078      	str	r0, [r7, #4]
    3bac:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    3bae:	687b      	ldr	r3, [r7, #4]
    3bb0:	095a      	lsrs	r2, r3, #5
    3bb2:	230f      	movs	r3, #15
    3bb4:	18fb      	adds	r3, r7, r3
    3bb6:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    3bb8:	687b      	ldr	r3, [r7, #4]
    3bba:	b2da      	uxtb	r2, r3
    3bbc:	230e      	movs	r3, #14
    3bbe:	18fb      	adds	r3, r7, r3
    3bc0:	211f      	movs	r1, #31
    3bc2:	400a      	ands	r2, r1
    3bc4:	701a      	strb	r2, [r3, #0]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    3bc6:	683b      	ldr	r3, [r7, #0]
    3bc8:	3301      	adds	r3, #1
    3bca:	d10a      	bne.n	3be2 <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    3bcc:	230e      	movs	r3, #14
    3bce:	18fb      	adds	r3, r7, r3
    3bd0:	781a      	ldrb	r2, [r3, #0]
    3bd2:	230f      	movs	r3, #15
    3bd4:	18fb      	adds	r3, r7, r3
    3bd6:	7819      	ldrb	r1, [r3, #0]
    3bd8:	481b      	ldr	r0, [pc, #108]	; (3c48 <_gpio_set_pin_function+0xa4>)
    3bda:	2300      	movs	r3, #0
    3bdc:	4c1b      	ldr	r4, [pc, #108]	; (3c4c <_gpio_set_pin_function+0xa8>)
    3bde:	47a0      	blx	r4
}
    3be0:	e02e      	b.n	3c40 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    3be2:	230e      	movs	r3, #14
    3be4:	18fb      	adds	r3, r7, r3
    3be6:	781a      	ldrb	r2, [r3, #0]
    3be8:	230f      	movs	r3, #15
    3bea:	18fb      	adds	r3, r7, r3
    3bec:	7819      	ldrb	r1, [r3, #0]
    3bee:	4816      	ldr	r0, [pc, #88]	; (3c48 <_gpio_set_pin_function+0xa4>)
    3bf0:	2301      	movs	r3, #1
    3bf2:	4c16      	ldr	r4, [pc, #88]	; (3c4c <_gpio_set_pin_function+0xa8>)
    3bf4:	47a0      	blx	r4
		if (pin & 1) {
    3bf6:	230e      	movs	r3, #14
    3bf8:	18fb      	adds	r3, r7, r3
    3bfa:	781b      	ldrb	r3, [r3, #0]
    3bfc:	2201      	movs	r2, #1
    3bfe:	4013      	ands	r3, r2
    3c00:	d00f      	beq.n	3c22 <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    3c02:	230e      	movs	r3, #14
    3c04:	18fb      	adds	r3, r7, r3
    3c06:	781b      	ldrb	r3, [r3, #0]
    3c08:	105b      	asrs	r3, r3, #1
    3c0a:	b2da      	uxtb	r2, r3
    3c0c:	683b      	ldr	r3, [r7, #0]
    3c0e:	b2d8      	uxtb	r0, r3
    3c10:	230f      	movs	r3, #15
    3c12:	18fb      	adds	r3, r7, r3
    3c14:	7819      	ldrb	r1, [r3, #0]
    3c16:	4c0c      	ldr	r4, [pc, #48]	; (3c48 <_gpio_set_pin_function+0xa4>)
    3c18:	0003      	movs	r3, r0
    3c1a:	0020      	movs	r0, r4
    3c1c:	4c0c      	ldr	r4, [pc, #48]	; (3c50 <_gpio_set_pin_function+0xac>)
    3c1e:	47a0      	blx	r4
}
    3c20:	e00e      	b.n	3c40 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    3c22:	230e      	movs	r3, #14
    3c24:	18fb      	adds	r3, r7, r3
    3c26:	781b      	ldrb	r3, [r3, #0]
    3c28:	105b      	asrs	r3, r3, #1
    3c2a:	b2da      	uxtb	r2, r3
    3c2c:	683b      	ldr	r3, [r7, #0]
    3c2e:	b2d8      	uxtb	r0, r3
    3c30:	230f      	movs	r3, #15
    3c32:	18fb      	adds	r3, r7, r3
    3c34:	7819      	ldrb	r1, [r3, #0]
    3c36:	4c04      	ldr	r4, [pc, #16]	; (3c48 <_gpio_set_pin_function+0xa4>)
    3c38:	0003      	movs	r3, r0
    3c3a:	0020      	movs	r0, r4
    3c3c:	4c05      	ldr	r4, [pc, #20]	; (3c54 <_gpio_set_pin_function+0xb0>)
    3c3e:	47a0      	blx	r4
}
    3c40:	46c0      	nop			; (mov r8, r8)
    3c42:	46bd      	mov	sp, r7
    3c44:	b005      	add	sp, #20
    3c46:	bd90      	pop	{r4, r7, pc}
    3c48:	41004400 	.word	0x41004400
    3c4c:	00003763 	.word	0x00003763
    3c50:	000036dd 	.word	0x000036dd
    3c54:	00003655 	.word	0x00003655

00003c58 <gpio_set_pin_pull_mode>:
{
    3c58:	b580      	push	{r7, lr}
    3c5a:	b082      	sub	sp, #8
    3c5c:	af00      	add	r7, sp, #0
    3c5e:	0002      	movs	r2, r0
    3c60:	1dfb      	adds	r3, r7, #7
    3c62:	701a      	strb	r2, [r3, #0]
    3c64:	1dbb      	adds	r3, r7, #6
    3c66:	1c0a      	adds	r2, r1, #0
    3c68:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    3c6a:	1dfb      	adds	r3, r7, #7
    3c6c:	781b      	ldrb	r3, [r3, #0]
    3c6e:	115b      	asrs	r3, r3, #5
    3c70:	b2d8      	uxtb	r0, r3
    3c72:	1dfb      	adds	r3, r7, #7
    3c74:	781b      	ldrb	r3, [r3, #0]
    3c76:	221f      	movs	r2, #31
    3c78:	4013      	ands	r3, r2
    3c7a:	b2d9      	uxtb	r1, r3
    3c7c:	1dbb      	adds	r3, r7, #6
    3c7e:	781b      	ldrb	r3, [r3, #0]
    3c80:	001a      	movs	r2, r3
    3c82:	4b03      	ldr	r3, [pc, #12]	; (3c90 <gpio_set_pin_pull_mode+0x38>)
    3c84:	4798      	blx	r3
}
    3c86:	46c0      	nop			; (mov r8, r8)
    3c88:	46bd      	mov	sp, r7
    3c8a:	b002      	add	sp, #8
    3c8c:	bd80      	pop	{r7, pc}
    3c8e:	46c0      	nop			; (mov r8, r8)
    3c90:	00003ab1 	.word	0x00003ab1

00003c94 <gpio_set_pin_function>:
{
    3c94:	b580      	push	{r7, lr}
    3c96:	b082      	sub	sp, #8
    3c98:	af00      	add	r7, sp, #0
    3c9a:	6078      	str	r0, [r7, #4]
    3c9c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    3c9e:	683a      	ldr	r2, [r7, #0]
    3ca0:	687b      	ldr	r3, [r7, #4]
    3ca2:	0011      	movs	r1, r2
    3ca4:	0018      	movs	r0, r3
    3ca6:	4b03      	ldr	r3, [pc, #12]	; (3cb4 <gpio_set_pin_function+0x20>)
    3ca8:	4798      	blx	r3
}
    3caa:	46c0      	nop			; (mov r8, r8)
    3cac:	46bd      	mov	sp, r7
    3cae:	b002      	add	sp, #8
    3cb0:	bd80      	pop	{r7, pc}
    3cb2:	46c0      	nop			; (mov r8, r8)
    3cb4:	00003ba5 	.word	0x00003ba5

00003cb8 <gpio_set_pin_direction>:
{
    3cb8:	b580      	push	{r7, lr}
    3cba:	b082      	sub	sp, #8
    3cbc:	af00      	add	r7, sp, #0
    3cbe:	0002      	movs	r2, r0
    3cc0:	1dfb      	adds	r3, r7, #7
    3cc2:	701a      	strb	r2, [r3, #0]
    3cc4:	1dbb      	adds	r3, r7, #6
    3cc6:	1c0a      	adds	r2, r1, #0
    3cc8:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    3cca:	1dfb      	adds	r3, r7, #7
    3ccc:	781b      	ldrb	r3, [r3, #0]
    3cce:	115b      	asrs	r3, r3, #5
    3cd0:	b2d8      	uxtb	r0, r3
    3cd2:	1dfb      	adds	r3, r7, #7
    3cd4:	781b      	ldrb	r3, [r3, #0]
    3cd6:	001a      	movs	r2, r3
    3cd8:	231f      	movs	r3, #31
    3cda:	4013      	ands	r3, r2
    3cdc:	2201      	movs	r2, #1
    3cde:	409a      	lsls	r2, r3
    3ce0:	0011      	movs	r1, r2
    3ce2:	1dbb      	adds	r3, r7, #6
    3ce4:	781b      	ldrb	r3, [r3, #0]
    3ce6:	001a      	movs	r2, r3
    3ce8:	4b02      	ldr	r3, [pc, #8]	; (3cf4 <gpio_set_pin_direction+0x3c>)
    3cea:	4798      	blx	r3
}
    3cec:	46c0      	nop			; (mov r8, r8)
    3cee:	46bd      	mov	sp, r7
    3cf0:	b002      	add	sp, #8
    3cf2:	bd80      	pop	{r7, pc}
    3cf4:	000038bd 	.word	0x000038bd

00003cf8 <gpio_set_pin_level>:
{
    3cf8:	b580      	push	{r7, lr}
    3cfa:	b082      	sub	sp, #8
    3cfc:	af00      	add	r7, sp, #0
    3cfe:	0002      	movs	r2, r0
    3d00:	1dfb      	adds	r3, r7, #7
    3d02:	701a      	strb	r2, [r3, #0]
    3d04:	1dbb      	adds	r3, r7, #6
    3d06:	1c0a      	adds	r2, r1, #0
    3d08:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    3d0a:	1dfb      	adds	r3, r7, #7
    3d0c:	781b      	ldrb	r3, [r3, #0]
    3d0e:	115b      	asrs	r3, r3, #5
    3d10:	b2d8      	uxtb	r0, r3
    3d12:	1dfb      	adds	r3, r7, #7
    3d14:	781b      	ldrb	r3, [r3, #0]
    3d16:	001a      	movs	r2, r3
    3d18:	231f      	movs	r3, #31
    3d1a:	4013      	ands	r3, r2
    3d1c:	2201      	movs	r2, #1
    3d1e:	409a      	lsls	r2, r3
    3d20:	0011      	movs	r1, r2
    3d22:	1dbb      	adds	r3, r7, #6
    3d24:	781b      	ldrb	r3, [r3, #0]
    3d26:	001a      	movs	r2, r3
    3d28:	4b02      	ldr	r3, [pc, #8]	; (3d34 <gpio_set_pin_level+0x3c>)
    3d2a:	4798      	blx	r3
}
    3d2c:	46c0      	nop			; (mov r8, r8)
    3d2e:	46bd      	mov	sp, r7
    3d30:	b002      	add	sp, #8
    3d32:	bd80      	pop	{r7, pc}
    3d34:	000039d5 	.word	0x000039d5

00003d38 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    3d38:	b580      	push	{r7, lr}
    3d3a:	b082      	sub	sp, #8
    3d3c:	af00      	add	r7, sp, #0
    3d3e:	0002      	movs	r2, r0
    3d40:	1dfb      	adds	r3, r7, #7
    3d42:	701a      	strb	r2, [r3, #0]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    3d44:	1dfb      	adds	r3, r7, #7
    3d46:	781b      	ldrb	r3, [r3, #0]
    3d48:	115b      	asrs	r3, r3, #5
    3d4a:	b2db      	uxtb	r3, r3
    3d4c:	0018      	movs	r0, r3
    3d4e:	4b09      	ldr	r3, [pc, #36]	; (3d74 <gpio_get_pin_level+0x3c>)
    3d50:	4798      	blx	r3
    3d52:	0001      	movs	r1, r0
    3d54:	1dfb      	adds	r3, r7, #7
    3d56:	781b      	ldrb	r3, [r3, #0]
    3d58:	001a      	movs	r2, r3
    3d5a:	231f      	movs	r3, #31
    3d5c:	4013      	ands	r3, r2
    3d5e:	2201      	movs	r2, #1
    3d60:	409a      	lsls	r2, r3
    3d62:	0013      	movs	r3, r2
    3d64:	400b      	ands	r3, r1
    3d66:	1e5a      	subs	r2, r3, #1
    3d68:	4193      	sbcs	r3, r2
    3d6a:	b2db      	uxtb	r3, r3
}
    3d6c:	0018      	movs	r0, r3
    3d6e:	46bd      	mov	sp, r7
    3d70:	b002      	add	sp, #8
    3d72:	bd80      	pop	{r7, pc}
    3d74:	00003a25 	.word	0x00003a25

00003d78 <_ZN15NMIButton_ClassC1Ev>:
	}
	
}

// default constructor
NMIButton_Class::NMIButton_Class()
    3d78:	b580      	push	{r7, lr}
    3d7a:	b082      	sub	sp, #8
    3d7c:	af00      	add	r7, sp, #0
    3d7e:	6078      	str	r0, [r7, #4]
{
	pressedTimerStarted=false;
    3d80:	687b      	ldr	r3, [r7, #4]
    3d82:	2200      	movs	r2, #0
    3d84:	705a      	strb	r2, [r3, #1]
	pressCounter=0;
    3d86:	687b      	ldr	r3, [r7, #4]
    3d88:	2200      	movs	r2, #0
    3d8a:	609a      	str	r2, [r3, #8]
} //NMIButton_Class
    3d8c:	687b      	ldr	r3, [r7, #4]
    3d8e:	0018      	movs	r0, r3
    3d90:	46bd      	mov	sp, r7
    3d92:	b002      	add	sp, #8
    3d94:	bd80      	pop	{r7, pc}

00003d96 <_ZN15NMIButton_ClassD1Ev>:

// default destructor
NMIButton_Class::~NMIButton_Class()
    3d96:	b580      	push	{r7, lr}
    3d98:	b082      	sub	sp, #8
    3d9a:	af00      	add	r7, sp, #0
    3d9c:	6078      	str	r0, [r7, #4]
{
} //~NMIButton_Class
    3d9e:	687b      	ldr	r3, [r7, #4]
    3da0:	0018      	movs	r0, r3
    3da2:	46bd      	mov	sp, r7
    3da4:	b002      	add	sp, #8
    3da6:	bd80      	pop	{r7, pc}

00003da8 <_ZN15NMIButton_Class15IsButtonPressedEv>:

bool	NMIButton_Class::IsButtonPressed(void){
    3da8:	b580      	push	{r7, lr}
    3daa:	b082      	sub	sp, #8
    3dac:	af00      	add	r7, sp, #0
    3dae:	6078      	str	r0, [r7, #4]
	if (!lighter.poweron)
    3db0:	4a1b      	ldr	r2, [pc, #108]	; (3e20 <_ZN15NMIButton_Class15IsButtonPressedEv+0x78>)
    3db2:	23bb      	movs	r3, #187	; 0xbb
    3db4:	005b      	lsls	r3, r3, #1
    3db6:	5cd3      	ldrb	r3, [r2, r3]
    3db8:	b2db      	uxtb	r3, r3
    3dba:	2201      	movs	r2, #1
    3dbc:	4053      	eors	r3, r2
    3dbe:	b2db      	uxtb	r3, r3
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	d027      	beq.n	3e14 <_ZN15NMIButton_Class15IsButtonPressedEv+0x6c>
	{
		gpio_set_pin_direction(NMI,GPIO_DIRECTION_IN);
    3dc4:	2101      	movs	r1, #1
    3dc6:	2008      	movs	r0, #8
    3dc8:	4b16      	ldr	r3, [pc, #88]	; (3e24 <_ZN15NMIButton_Class15IsButtonPressedEv+0x7c>)
    3dca:	4798      	blx	r3
		gpio_set_pin_pull_mode(NMI,GPIO_PULL_UP);
    3dcc:	2101      	movs	r1, #1
    3dce:	2008      	movs	r0, #8
    3dd0:	4b15      	ldr	r3, [pc, #84]	; (3e28 <_ZN15NMIButton_Class15IsButtonPressedEv+0x80>)
    3dd2:	4798      	blx	r3
		pressed=gpio_get_pin_level(NMI)==false;
    3dd4:	2008      	movs	r0, #8
    3dd6:	4b15      	ldr	r3, [pc, #84]	; (3e2c <_ZN15NMIButton_Class15IsButtonPressedEv+0x84>)
    3dd8:	4798      	blx	r3
    3dda:	0003      	movs	r3, r0
    3ddc:	001a      	movs	r2, r3
    3dde:	2301      	movs	r3, #1
    3de0:	4053      	eors	r3, r2
    3de2:	b2da      	uxtb	r2, r3
    3de4:	687b      	ldr	r3, [r7, #4]
    3de6:	701a      	strb	r2, [r3, #0]
		
		
		gpio_set_pin_pull_mode(NMI,GPIO_PULL_DOWN);
    3de8:	2102      	movs	r1, #2
    3dea:	2008      	movs	r0, #8
    3dec:	4b0e      	ldr	r3, [pc, #56]	; (3e28 <_ZN15NMIButton_Class15IsButtonPressedEv+0x80>)
    3dee:	4798      	blx	r3
		gpio_set_pin_direction(NMI, GPIO_DIRECTION_OUT);
    3df0:	2102      	movs	r1, #2
    3df2:	2008      	movs	r0, #8
    3df4:	4b0b      	ldr	r3, [pc, #44]	; (3e24 <_ZN15NMIButton_Class15IsButtonPressedEv+0x7c>)
    3df6:	4798      	blx	r3
		gpio_set_pin_function(NMI, GPIO_PIN_FUNCTION_OFF);
    3df8:	2301      	movs	r3, #1
    3dfa:	425b      	negs	r3, r3
    3dfc:	0019      	movs	r1, r3
    3dfe:	2008      	movs	r0, #8
    3e00:	4b0b      	ldr	r3, [pc, #44]	; (3e30 <_ZN15NMIButton_Class15IsButtonPressedEv+0x88>)
    3e02:	4798      	blx	r3
		gpio_set_pin_level(NMI,false);
    3e04:	2100      	movs	r1, #0
    3e06:	2008      	movs	r0, #8
    3e08:	4b0a      	ldr	r3, [pc, #40]	; (3e34 <_ZN15NMIButton_Class15IsButtonPressedEv+0x8c>)
    3e0a:	4798      	blx	r3
		return	pressed;
    3e0c:	687b      	ldr	r3, [r7, #4]
    3e0e:	781b      	ldrb	r3, [r3, #0]
    3e10:	b2db      	uxtb	r3, r3
    3e12:	e000      	b.n	3e16 <_ZN15NMIButton_Class15IsButtonPressedEv+0x6e>
	} 
	else
	{
		return false;
    3e14:	2300      	movs	r3, #0
	}
	return false;
}
    3e16:	0018      	movs	r0, r3
    3e18:	46bd      	mov	sp, r7
    3e1a:	b002      	add	sp, #8
    3e1c:	bd80      	pop	{r7, pc}
    3e1e:	46c0      	nop			; (mov r8, r8)
    3e20:	200004ec 	.word	0x200004ec
    3e24:	00003cb9 	.word	0x00003cb9
    3e28:	00003c59 	.word	0x00003c59
    3e2c:	00003d39 	.word	0x00003d39
    3e30:	00003c95 	.word	0x00003c95
    3e34:	00003cf9 	.word	0x00003cf9

00003e38 <_ZN15NMIButton_Class9OnPressedEv>:
uint32_t	NMIButton_Class::OnPressed(void){
    3e38:	b580      	push	{r7, lr}
    3e3a:	b082      	sub	sp, #8
    3e3c:	af00      	add	r7, sp, #0
    3e3e:	6078      	str	r0, [r7, #4]
// 			OnRelease();
// 			
// 		}
// 	}
		
	lighter.changeModeRequest=true;
    3e40:	4a05      	ldr	r2, [pc, #20]	; (3e58 <_ZN15NMIButton_Class9OnPressedEv+0x20>)
    3e42:	23bc      	movs	r3, #188	; 0xbc
    3e44:	005b      	lsls	r3, r3, #1
    3e46:	2101      	movs	r1, #1
    3e48:	54d1      	strb	r1, [r2, r3]
	return	stepTime;
    3e4a:	687b      	ldr	r3, [r7, #4]
    3e4c:	68db      	ldr	r3, [r3, #12]
}
    3e4e:	0018      	movs	r0, r3
    3e50:	46bd      	mov	sp, r7
    3e52:	b002      	add	sp, #8
    3e54:	bd80      	pop	{r7, pc}
    3e56:	46c0      	nop			; (mov r8, r8)
    3e58:	200004ec 	.word	0x200004ec

00003e5c <_Z41__static_initialization_and_destruction_0ii>:
				
	}
	return	stepTime;
}

NMIButton_Class		nmi;
    3e5c:	b580      	push	{r7, lr}
    3e5e:	b082      	sub	sp, #8
    3e60:	af00      	add	r7, sp, #0
    3e62:	6078      	str	r0, [r7, #4]
    3e64:	6039      	str	r1, [r7, #0]
    3e66:	687b      	ldr	r3, [r7, #4]
    3e68:	2b01      	cmp	r3, #1
    3e6a:	d10d      	bne.n	3e88 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    3e6c:	683b      	ldr	r3, [r7, #0]
    3e6e:	4a08      	ldr	r2, [pc, #32]	; (3e90 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    3e70:	4293      	cmp	r3, r2
    3e72:	d109      	bne.n	3e88 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    3e74:	4b07      	ldr	r3, [pc, #28]	; (3e94 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    3e76:	0018      	movs	r0, r3
    3e78:	4b07      	ldr	r3, [pc, #28]	; (3e98 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    3e7a:	4798      	blx	r3
    3e7c:	4a07      	ldr	r2, [pc, #28]	; (3e9c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    3e7e:	4908      	ldr	r1, [pc, #32]	; (3ea0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    3e80:	4b04      	ldr	r3, [pc, #16]	; (3e94 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    3e82:	0018      	movs	r0, r3
    3e84:	4b07      	ldr	r3, [pc, #28]	; (3ea4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    3e86:	4798      	blx	r3
    3e88:	46c0      	nop			; (mov r8, r8)
    3e8a:	46bd      	mov	sp, r7
    3e8c:	b002      	add	sp, #8
    3e8e:	bd80      	pop	{r7, pc}
    3e90:	0000ffff 	.word	0x0000ffff
    3e94:	20000790 	.word	0x20000790
    3e98:	00003d79 	.word	0x00003d79
    3e9c:	20000000 	.word	0x20000000
    3ea0:	00003d97 	.word	0x00003d97
    3ea4:	00004b05 	.word	0x00004b05

00003ea8 <_GLOBAL__sub_I__ZN15NMIButton_ClassC2Ev>:
    3ea8:	b580      	push	{r7, lr}
    3eaa:	af00      	add	r7, sp, #0
    3eac:	4b03      	ldr	r3, [pc, #12]	; (3ebc <_GLOBAL__sub_I__ZN15NMIButton_ClassC2Ev+0x14>)
    3eae:	0019      	movs	r1, r3
    3eb0:	2001      	movs	r0, #1
    3eb2:	4b03      	ldr	r3, [pc, #12]	; (3ec0 <_GLOBAL__sub_I__ZN15NMIButton_ClassC2Ev+0x18>)
    3eb4:	4798      	blx	r3
    3eb6:	46bd      	mov	sp, r7
    3eb8:	bd80      	pop	{r7, pc}
    3eba:	46c0      	nop			; (mov r8, r8)
    3ebc:	0000ffff 	.word	0x0000ffff
    3ec0:	00003e5d 	.word	0x00003e5d

00003ec4 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    3ec4:	b580      	push	{r7, lr}
    3ec6:	b082      	sub	sp, #8
    3ec8:	af00      	add	r7, sp, #0
    3eca:	6078      	str	r0, [r7, #4]
	ptrTimerClass->setTimeout();
    3ecc:	4b04      	ldr	r3, [pc, #16]	; (3ee0 <_ZL7task_cbPK10timer_task+0x1c>)
    3ece:	681b      	ldr	r3, [r3, #0]
    3ed0:	0018      	movs	r0, r3
    3ed2:	4b04      	ldr	r3, [pc, #16]	; (3ee4 <_ZL7task_cbPK10timer_task+0x20>)
    3ed4:	4798      	blx	r3
}
    3ed6:	46c0      	nop			; (mov r8, r8)
    3ed8:	46bd      	mov	sp, r7
    3eda:	b002      	add	sp, #8
    3edc:	bd80      	pop	{r7, pc}
    3ede:	46c0      	nop			; (mov r8, r8)
    3ee0:	200007a0 	.word	0x200007a0
    3ee4:	00003f7d 	.word	0x00003f7d

00003ee8 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task.cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    3ee8:	b580      	push	{r7, lr}
    3eea:	b082      	sub	sp, #8
    3eec:	af00      	add	r7, sp, #0
    3eee:	6078      	str	r0, [r7, #4]
    3ef0:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    3ef2:	687b      	ldr	r3, [r7, #4]
    3ef4:	683a      	ldr	r2, [r7, #0]
    3ef6:	609a      	str	r2, [r3, #8]
	ptrTimerClass=this;
    3ef8:	4b07      	ldr	r3, [pc, #28]	; (3f18 <_ZN11Timer_ClassC1EP16timer_descriptor+0x30>)
    3efa:	687a      	ldr	r2, [r7, #4]
    3efc:	601a      	str	r2, [r3, #0]
	clockCycles=1024;
    3efe:	687b      	ldr	r3, [r7, #4]
    3f00:	2280      	movs	r2, #128	; 0x80
    3f02:	00d2      	lsls	r2, r2, #3
    3f04:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    3f06:	687b      	ldr	r3, [r7, #4]
    3f08:	4a04      	ldr	r2, [pc, #16]	; (3f1c <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    3f0a:	621a      	str	r2, [r3, #32]
} //Timer_Class
    3f0c:	687b      	ldr	r3, [r7, #4]
    3f0e:	0018      	movs	r0, r3
    3f10:	46bd      	mov	sp, r7
    3f12:	b002      	add	sp, #8
    3f14:	bd80      	pop	{r7, pc}
    3f16:	46c0      	nop			; (mov r8, r8)
    3f18:	200007a0 	.word	0x200007a0
    3f1c:	00003ec5 	.word	0x00003ec5

00003f20 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    3f20:	b580      	push	{r7, lr}
    3f22:	b082      	sub	sp, #8
    3f24:	af00      	add	r7, sp, #0
    3f26:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    3f28:	687b      	ldr	r3, [r7, #4]
    3f2a:	2200      	movs	r2, #0
    3f2c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    3f2e:	687b      	ldr	r3, [r7, #4]
    3f30:	0018      	movs	r0, r3
    3f32:	46bd      	mov	sp, r7
    3f34:	b002      	add	sp, #8
    3f36:	bd80      	pop	{r7, pc}

00003f38 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
void Timer_Class::Init(void){
    3f38:	b580      	push	{r7, lr}
    3f3a:	b082      	sub	sp, #8
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	6078      	str	r0, [r7, #4]
	ticks=0;
    3f40:	687b      	ldr	r3, [r7, #4]
    3f42:	2200      	movs	r2, #0
    3f44:	629a      	str	r2, [r3, #40]	; 0x28
}
    3f46:	46c0      	nop			; (mov r8, r8)
    3f48:	46bd      	mov	sp, r7
    3f4a:	b002      	add	sp, #8
    3f4c:	bd80      	pop	{r7, pc}
	...

00003f50 <_ZN11Timer_Class4stopEv>:
	status=timer_start(timer_descr);
	return status;
	
}

int32_t Timer_Class::stop( void){
    3f50:	b580      	push	{r7, lr}
    3f52:	b084      	sub	sp, #16
    3f54:	af00      	add	r7, sp, #0
    3f56:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    3f58:	687b      	ldr	r3, [r7, #4]
    3f5a:	689b      	ldr	r3, [r3, #8]
    3f5c:	0018      	movs	r0, r3
    3f5e:	4b06      	ldr	r3, [pc, #24]	; (3f78 <_ZN11Timer_Class4stopEv+0x28>)
    3f60:	4798      	blx	r3
    3f62:	0003      	movs	r3, r0
    3f64:	60fb      	str	r3, [r7, #12]
	timeout=0;
    3f66:	687b      	ldr	r3, [r7, #4]
    3f68:	2200      	movs	r2, #0
    3f6a:	705a      	strb	r2, [r3, #1]
	return status;
    3f6c:	68fb      	ldr	r3, [r7, #12]
}
    3f6e:	0018      	movs	r0, r3
    3f70:	46bd      	mov	sp, r7
    3f72:	b004      	add	sp, #16
    3f74:	bd80      	pop	{r7, pc}
    3f76:	46c0      	nop			; (mov r8, r8)
    3f78:	00000ccd 	.word	0x00000ccd

00003f7c <_ZN11Timer_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void Timer_Class::setTimeout(){
    3f7c:	b580      	push	{r7, lr}
    3f7e:	b082      	sub	sp, #8
    3f80:	af00      	add	r7, sp, #0
    3f82:	6078      	str	r0, [r7, #4]
	timeout=1;
    3f84:	687b      	ldr	r3, [r7, #4]
    3f86:	2201      	movs	r2, #1
    3f88:	705a      	strb	r2, [r3, #1]
}
    3f8a:	46c0      	nop			; (mov r8, r8)
    3f8c:	46bd      	mov	sp, r7
    3f8e:	b002      	add	sp, #8
    3f90:	bd80      	pop	{r7, pc}
	...

00003f94 <_ZN11Timer_Class8add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t Timer_Class::add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    3f94:	b580      	push	{r7, lr}
    3f96:	b086      	sub	sp, #24
    3f98:	af00      	add	r7, sp, #0
    3f9a:	60f8      	str	r0, [r7, #12]
    3f9c:	60b9      	str	r1, [r7, #8]
    3f9e:	607a      	str	r2, [r7, #4]
    3fa0:	001a      	movs	r2, r3
    3fa2:	1cfb      	adds	r3, r7, #3
    3fa4:	701a      	strb	r2, [r3, #0]
	int32_t	status;

	task.interval = interval;
    3fa6:	68fb      	ldr	r3, [r7, #12]
    3fa8:	687a      	ldr	r2, [r7, #4]
    3faa:	61da      	str	r2, [r3, #28]
	task.cb       = (timer_cb_t)func;
    3fac:	68fb      	ldr	r3, [r7, #12]
    3fae:	68ba      	ldr	r2, [r7, #8]
    3fb0:	621a      	str	r2, [r3, #32]
	task.mode     = modeTask;
    3fb2:	68fb      	ldr	r3, [r7, #12]
    3fb4:	1cfa      	adds	r2, r7, #3
    3fb6:	2124      	movs	r1, #36	; 0x24
    3fb8:	7812      	ldrb	r2, [r2, #0]
    3fba:	545a      	strb	r2, [r3, r1]
	status=timer_add_task(timer_descr, &task);
    3fbc:	68fb      	ldr	r3, [r7, #12]
    3fbe:	689a      	ldr	r2, [r3, #8]
    3fc0:	68fb      	ldr	r3, [r7, #12]
    3fc2:	3314      	adds	r3, #20
    3fc4:	0019      	movs	r1, r3
    3fc6:	0010      	movs	r0, r2
    3fc8:	4b04      	ldr	r3, [pc, #16]	; (3fdc <_ZN11Timer_Class8add_taskEPFvvEm15timer_task_mode+0x48>)
    3fca:	4798      	blx	r3
    3fcc:	0003      	movs	r3, r0
    3fce:	617b      	str	r3, [r7, #20]
	
	return status;
    3fd0:	697b      	ldr	r3, [r7, #20]
}
    3fd2:	0018      	movs	r0, r3
    3fd4:	46bd      	mov	sp, r7
    3fd6:	b006      	add	sp, #24
    3fd8:	bd80      	pop	{r7, pc}
    3fda:	46c0      	nop			; (mov r8, r8)
    3fdc:	00000d09 	.word	0x00000d09

00003fe0 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:
int32_t Timer_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_ONE_SHOT);
	return status;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    3fe0:	b590      	push	{r4, r7, lr}
    3fe2:	b087      	sub	sp, #28
    3fe4:	af00      	add	r7, sp, #0
    3fe6:	60f8      	str	r0, [r7, #12]
    3fe8:	60b9      	str	r1, [r7, #8]
    3fea:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_ONE_SHOT);
    3fec:	687a      	ldr	r2, [r7, #4]
    3fee:	68b9      	ldr	r1, [r7, #8]
    3ff0:	68f8      	ldr	r0, [r7, #12]
    3ff2:	2300      	movs	r3, #0
    3ff4:	4c07      	ldr	r4, [pc, #28]	; (4014 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x34>)
    3ff6:	47a0      	blx	r4
    3ff8:	0003      	movs	r3, r0
    3ffa:	617b      	str	r3, [r7, #20]
	status=timer_start(timer_descr);
    3ffc:	68fb      	ldr	r3, [r7, #12]
    3ffe:	689b      	ldr	r3, [r3, #8]
    4000:	0018      	movs	r0, r3
    4002:	4b05      	ldr	r3, [pc, #20]	; (4018 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x38>)
    4004:	4798      	blx	r3
    4006:	0003      	movs	r3, r0
    4008:	617b      	str	r3, [r7, #20]
	return status;
    400a:	697b      	ldr	r3, [r7, #20]
}
    400c:	0018      	movs	r0, r3
    400e:	46bd      	mov	sp, r7
    4010:	b007      	add	sp, #28
    4012:	bd90      	pop	{r4, r7, pc}
    4014:	00003f95 	.word	0x00003f95
    4018:	00000c91 	.word	0x00000c91

0000401c <_Z41__static_initialization_and_destruction_0ii>:
	return ticks;
}

Timer_Class butttonTimer(&TIMER_2);
Timer_Class	ledTimer(&TIMER_1);
Timer_Class	pwmTimer(&TIMER_3);
    401c:	b580      	push	{r7, lr}
    401e:	b082      	sub	sp, #8
    4020:	af00      	add	r7, sp, #0
    4022:	6078      	str	r0, [r7, #4]
    4024:	6039      	str	r1, [r7, #0]
    4026:	687b      	ldr	r3, [r7, #4]
    4028:	2b01      	cmp	r3, #1
    402a:	d127      	bne.n	407c <_Z41__static_initialization_and_destruction_0ii+0x60>
    402c:	683b      	ldr	r3, [r7, #0]
    402e:	4a15      	ldr	r2, [pc, #84]	; (4084 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    4030:	4293      	cmp	r3, r2
    4032:	d123      	bne.n	407c <_Z41__static_initialization_and_destruction_0ii+0x60>
Timer_Class butttonTimer(&TIMER_2);
    4034:	4a14      	ldr	r2, [pc, #80]	; (4088 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    4036:	4b15      	ldr	r3, [pc, #84]	; (408c <_Z41__static_initialization_and_destruction_0ii+0x70>)
    4038:	0011      	movs	r1, r2
    403a:	0018      	movs	r0, r3
    403c:	4b14      	ldr	r3, [pc, #80]	; (4090 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    403e:	4798      	blx	r3
    4040:	4a14      	ldr	r2, [pc, #80]	; (4094 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    4042:	4915      	ldr	r1, [pc, #84]	; (4098 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    4044:	4b11      	ldr	r3, [pc, #68]	; (408c <_Z41__static_initialization_and_destruction_0ii+0x70>)
    4046:	0018      	movs	r0, r3
    4048:	4b14      	ldr	r3, [pc, #80]	; (409c <_Z41__static_initialization_and_destruction_0ii+0x80>)
    404a:	4798      	blx	r3
Timer_Class	ledTimer(&TIMER_1);
    404c:	4a14      	ldr	r2, [pc, #80]	; (40a0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    404e:	4b15      	ldr	r3, [pc, #84]	; (40a4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    4050:	0011      	movs	r1, r2
    4052:	0018      	movs	r0, r3
    4054:	4b0e      	ldr	r3, [pc, #56]	; (4090 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    4056:	4798      	blx	r3
    4058:	4a0e      	ldr	r2, [pc, #56]	; (4094 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    405a:	490f      	ldr	r1, [pc, #60]	; (4098 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    405c:	4b11      	ldr	r3, [pc, #68]	; (40a4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    405e:	0018      	movs	r0, r3
    4060:	4b0e      	ldr	r3, [pc, #56]	; (409c <_Z41__static_initialization_and_destruction_0ii+0x80>)
    4062:	4798      	blx	r3
Timer_Class	pwmTimer(&TIMER_3);
    4064:	4a10      	ldr	r2, [pc, #64]	; (40a8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    4066:	4b11      	ldr	r3, [pc, #68]	; (40ac <_Z41__static_initialization_and_destruction_0ii+0x90>)
    4068:	0011      	movs	r1, r2
    406a:	0018      	movs	r0, r3
    406c:	4b08      	ldr	r3, [pc, #32]	; (4090 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    406e:	4798      	blx	r3
    4070:	4a08      	ldr	r2, [pc, #32]	; (4094 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    4072:	4909      	ldr	r1, [pc, #36]	; (4098 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    4074:	4b0d      	ldr	r3, [pc, #52]	; (40ac <_Z41__static_initialization_and_destruction_0ii+0x90>)
    4076:	0018      	movs	r0, r3
    4078:	4b08      	ldr	r3, [pc, #32]	; (409c <_Z41__static_initialization_and_destruction_0ii+0x80>)
    407a:	4798      	blx	r3
    407c:	46c0      	nop			; (mov r8, r8)
    407e:	46bd      	mov	sp, r7
    4080:	b002      	add	sp, #8
    4082:	bd80      	pop	{r7, pc}
    4084:	0000ffff 	.word	0x0000ffff
    4088:	200008f0 	.word	0x200008f0
    408c:	200007a4 	.word	0x200007a4
    4090:	00003ee9 	.word	0x00003ee9
    4094:	20000000 	.word	0x20000000
    4098:	00003f21 	.word	0x00003f21
    409c:	00004b05 	.word	0x00004b05
    40a0:	20000928 	.word	0x20000928
    40a4:	200007d0 	.word	0x200007d0
    40a8:	2000095c 	.word	0x2000095c
    40ac:	200007fc 	.word	0x200007fc

000040b0 <_GLOBAL__sub_I_ptrTimerClass>:
    40b0:	b580      	push	{r7, lr}
    40b2:	af00      	add	r7, sp, #0
    40b4:	4b03      	ldr	r3, [pc, #12]	; (40c4 <_GLOBAL__sub_I_ptrTimerClass+0x14>)
    40b6:	0019      	movs	r1, r3
    40b8:	2001      	movs	r0, #1
    40ba:	4b03      	ldr	r3, [pc, #12]	; (40c8 <_GLOBAL__sub_I_ptrTimerClass+0x18>)
    40bc:	4798      	blx	r3
    40be:	46bd      	mov	sp, r7
    40c0:	bd80      	pop	{r7, pc}
    40c2:	46c0      	nop			; (mov r8, r8)
    40c4:	0000ffff 	.word	0x0000ffff
    40c8:	0000401d 	.word	0x0000401d

000040cc <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    40cc:	b580      	push	{r7, lr}
    40ce:	b084      	sub	sp, #16
    40d0:	af00      	add	r7, sp, #0
    40d2:	60f8      	str	r0, [r7, #12]
    40d4:	607a      	str	r2, [r7, #4]
    40d6:	230b      	movs	r3, #11
    40d8:	18fb      	adds	r3, r7, r3
    40da:	1c0a      	adds	r2, r1, #0
    40dc:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    40de:	230b      	movs	r3, #11
    40e0:	18fb      	adds	r3, r7, r3
    40e2:	781b      	ldrb	r3, [r3, #0]
    40e4:	68fa      	ldr	r2, [r7, #12]
    40e6:	01db      	lsls	r3, r3, #7
    40e8:	18d3      	adds	r3, r2, r3
    40ea:	3318      	adds	r3, #24
    40ec:	687a      	ldr	r2, [r7, #4]
    40ee:	601a      	str	r2, [r3, #0]
}
    40f0:	46c0      	nop			; (mov r8, r8)
    40f2:	46bd      	mov	sp, r7
    40f4:	b004      	add	sp, #16
    40f6:	bd80      	pop	{r7, pc}

000040f8 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    40f8:	b580      	push	{r7, lr}
    40fa:	b084      	sub	sp, #16
    40fc:	af00      	add	r7, sp, #0
    40fe:	60f8      	str	r0, [r7, #12]
    4100:	607a      	str	r2, [r7, #4]
    4102:	230b      	movs	r3, #11
    4104:	18fb      	adds	r3, r7, r3
    4106:	1c0a      	adds	r2, r1, #0
    4108:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    410a:	230b      	movs	r3, #11
    410c:	18fb      	adds	r3, r7, r3
    410e:	781b      	ldrb	r3, [r3, #0]
    4110:	68fa      	ldr	r2, [r7, #12]
    4112:	01db      	lsls	r3, r3, #7
    4114:	18d3      	adds	r3, r2, r3
    4116:	3314      	adds	r3, #20
    4118:	687a      	ldr	r2, [r7, #4]
    411a:	601a      	str	r2, [r3, #0]
}
    411c:	46c0      	nop			; (mov r8, r8)
    411e:	46bd      	mov	sp, r7
    4120:	b004      	add	sp, #16
    4122:	bd80      	pop	{r7, pc}

00004124 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    4124:	b580      	push	{r7, lr}
    4126:	b082      	sub	sp, #8
    4128:	af00      	add	r7, sp, #0
    412a:	6039      	str	r1, [r7, #0]
    412c:	0011      	movs	r1, r2
    412e:	1dfb      	adds	r3, r7, #7
    4130:	1c02      	adds	r2, r0, #0
    4132:	701a      	strb	r2, [r3, #0]
    4134:	1dbb      	adds	r3, r7, #6
    4136:	1c0a      	adds	r2, r1, #0
    4138:	701a      	strb	r2, [r3, #0]
	if (level) {
    413a:	1dbb      	adds	r3, r7, #6
    413c:	781b      	ldrb	r3, [r3, #0]
    413e:	2b00      	cmp	r3, #0
    4140:	d008      	beq.n	4154 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    4142:	683a      	ldr	r2, [r7, #0]
    4144:	1dfb      	adds	r3, r7, #7
    4146:	7819      	ldrb	r1, [r3, #0]
    4148:	23c0      	movs	r3, #192	; 0xc0
    414a:	05db      	lsls	r3, r3, #23
    414c:	0018      	movs	r0, r3
    414e:	4b07      	ldr	r3, [pc, #28]	; (416c <_gpio_set_level+0x48>)
    4150:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
    4152:	e007      	b.n	4164 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    4154:	683a      	ldr	r2, [r7, #0]
    4156:	1dfb      	adds	r3, r7, #7
    4158:	7819      	ldrb	r1, [r3, #0]
    415a:	23c0      	movs	r3, #192	; 0xc0
    415c:	05db      	lsls	r3, r3, #23
    415e:	0018      	movs	r0, r3
    4160:	4b03      	ldr	r3, [pc, #12]	; (4170 <_gpio_set_level+0x4c>)
    4162:	4798      	blx	r3
}
    4164:	46c0      	nop			; (mov r8, r8)
    4166:	46bd      	mov	sp, r7
    4168:	b002      	add	sp, #8
    416a:	bd80      	pop	{r7, pc}
    416c:	000040cd 	.word	0x000040cd
    4170:	000040f9 	.word	0x000040f9

00004174 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    4174:	b580      	push	{r7, lr}
    4176:	b082      	sub	sp, #8
    4178:	af00      	add	r7, sp, #0
    417a:	0002      	movs	r2, r0
    417c:	1dfb      	adds	r3, r7, #7
    417e:	701a      	strb	r2, [r3, #0]
    4180:	1dbb      	adds	r3, r7, #6
    4182:	1c0a      	adds	r2, r1, #0
    4184:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    4186:	1dfb      	adds	r3, r7, #7
    4188:	781b      	ldrb	r3, [r3, #0]
    418a:	115b      	asrs	r3, r3, #5
    418c:	b2d8      	uxtb	r0, r3
    418e:	1dfb      	adds	r3, r7, #7
    4190:	781b      	ldrb	r3, [r3, #0]
    4192:	001a      	movs	r2, r3
    4194:	231f      	movs	r3, #31
    4196:	4013      	ands	r3, r2
    4198:	2201      	movs	r2, #1
    419a:	409a      	lsls	r2, r3
    419c:	0011      	movs	r1, r2
    419e:	1dbb      	adds	r3, r7, #6
    41a0:	781b      	ldrb	r3, [r3, #0]
    41a2:	001a      	movs	r2, r3
    41a4:	4b02      	ldr	r3, [pc, #8]	; (41b0 <gpio_set_pin_level+0x3c>)
    41a6:	4798      	blx	r3
}
    41a8:	46c0      	nop			; (mov r8, r8)
    41aa:	46bd      	mov	sp, r7
    41ac:	b002      	add	sp, #8
    41ae:	bd80      	pop	{r7, pc}
    41b0:	00004125 	.word	0x00004125

000041b4 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryAddress=flashMemory;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
    41b4:	b580      	push	{r7, lr}
    41b6:	b082      	sub	sp, #8
    41b8:	af00      	add	r7, sp, #0
    41ba:	6078      	str	r0, [r7, #4]
    41bc:	6039      	str	r1, [r7, #0]
    41be:	687b      	ldr	r3, [r7, #4]
    41c0:	3390      	adds	r3, #144	; 0x90
    41c2:	0018      	movs	r0, r3
    41c4:	4b0b      	ldr	r3, [pc, #44]	; (41f4 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x40>)
    41c6:	4798      	blx	r3
{
	appParameters=defaultParameters;
    41c8:	687b      	ldr	r3, [r7, #4]
    41ca:	4a0b      	ldr	r2, [pc, #44]	; (41f8 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x44>)
    41cc:	3304      	adds	r3, #4
    41ce:	0011      	movs	r1, r2
    41d0:	227c      	movs	r2, #124	; 0x7c
    41d2:	0018      	movs	r0, r3
    41d4:	4b09      	ldr	r3, [pc, #36]	; (41fc <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x48>)
    41d6:	4798      	blx	r3
	spi_descriptor=spi_des;
    41d8:	687b      	ldr	r3, [r7, #4]
    41da:	218c      	movs	r1, #140	; 0x8c
    41dc:	683a      	ldr	r2, [r7, #0]
    41de:	505a      	str	r2, [r3, r1]
	memoryAddress=flashMemory;
    41e0:	4b07      	ldr	r3, [pc, #28]	; (4200 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x4c>)
    41e2:	681a      	ldr	r2, [r3, #0]
    41e4:	687b      	ldr	r3, [r7, #4]
    41e6:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
    41e8:	687b      	ldr	r3, [r7, #4]
    41ea:	0018      	movs	r0, r3
    41ec:	46bd      	mov	sp, r7
    41ee:	b002      	add	sp, #8
    41f0:	bd80      	pop	{r7, pc}
    41f2:	46c0      	nop			; (mov r8, r8)
    41f4:	0000492d 	.word	0x0000492d
    41f8:	00005274 	.word	0x00005274
    41fc:	00004ead 	.word	0x00004ead
    4200:	20000828 	.word	0x20000828

00004204 <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
    4204:	b580      	push	{r7, lr}
    4206:	b082      	sub	sp, #8
    4208:	af00      	add	r7, sp, #0
    420a:	6078      	str	r0, [r7, #4]
    420c:	687b      	ldr	r3, [r7, #4]
    420e:	3390      	adds	r3, #144	; 0x90
    4210:	0018      	movs	r0, r3
    4212:	4b03      	ldr	r3, [pc, #12]	; (4220 <_ZN16FlashMemoryClassD1Ev+0x1c>)
    4214:	4798      	blx	r3
{
} //~FlashMemoryClass
    4216:	687b      	ldr	r3, [r7, #4]
    4218:	0018      	movs	r0, r3
    421a:	46bd      	mov	sp, r7
    421c:	b002      	add	sp, #8
    421e:	bd80      	pop	{r7, pc}
    4220:	00004949 	.word	0x00004949

00004224 <_ZN16FlashMemoryClass4InitEv>:
	flashOpen();
	//WriteStatusRegister(kFlashInitialStatus);
	flashClose();
	
}
void	FlashMemoryClass::Init(void){
    4224:	b580      	push	{r7, lr}
    4226:	b082      	sub	sp, #8
    4228:	af00      	add	r7, sp, #0
    422a:	6078      	str	r0, [r7, #4]
	spi.SetDescriptor(spi_descriptor);
    422c:	687b      	ldr	r3, [r7, #4]
    422e:	3390      	adds	r3, #144	; 0x90
    4230:	0018      	movs	r0, r3
    4232:	687b      	ldr	r3, [r7, #4]
    4234:	228c      	movs	r2, #140	; 0x8c
    4236:	589b      	ldr	r3, [r3, r2]
    4238:	0019      	movs	r1, r3
    423a:	4b0f      	ldr	r3, [pc, #60]	; (4278 <_ZN16FlashMemoryClass4InitEv+0x54>)
    423c:	4798      	blx	r3
	spi.init();
    423e:	687b      	ldr	r3, [r7, #4]
    4240:	3390      	adds	r3, #144	; 0x90
    4242:	0018      	movs	r0, r3
    4244:	4b0d      	ldr	r3, [pc, #52]	; (427c <_ZN16FlashMemoryClass4InitEv+0x58>)
    4246:	4798      	blx	r3


	memoryAddress=0x00;
    4248:	687b      	ldr	r3, [r7, #4]
    424a:	2200      	movs	r2, #0
    424c:	601a      	str	r2, [r3, #0]
	
	flashOpen();
    424e:	687b      	ldr	r3, [r7, #4]
    4250:	0018      	movs	r0, r3
    4252:	4b0b      	ldr	r3, [pc, #44]	; (4280 <_ZN16FlashMemoryClass4InitEv+0x5c>)
    4254:	4798      	blx	r3
//	WriteStatusRegister(0x02);
//	SoftwareReset();
//	ChipErase();
	status=ReadStatusRegister();
    4256:	687b      	ldr	r3, [r7, #4]
    4258:	0018      	movs	r0, r3
    425a:	4b0a      	ldr	r3, [pc, #40]	; (4284 <_ZN16FlashMemoryClass4InitEv+0x60>)
    425c:	4798      	blx	r3
    425e:	0003      	movs	r3, r0
    4260:	0019      	movs	r1, r3
    4262:	687b      	ldr	r3, [r7, #4]
    4264:	22bc      	movs	r2, #188	; 0xbc
    4266:	5499      	strb	r1, [r3, r2]
//	functionsRegister=ReadFunctionRegister();
	
	flashClose();
    4268:	687b      	ldr	r3, [r7, #4]
    426a:	0018      	movs	r0, r3
    426c:	4b06      	ldr	r3, [pc, #24]	; (4288 <_ZN16FlashMemoryClass4InitEv+0x64>)
    426e:	4798      	blx	r3
	
}
    4270:	46c0      	nop			; (mov r8, r8)
    4272:	46bd      	mov	sp, r7
    4274:	b002      	add	sp, #8
    4276:	bd80      	pop	{r7, pc}
    4278:	0000499d 	.word	0x0000499d
    427c:	0000495d 	.word	0x0000495d
    4280:	0000428d 	.word	0x0000428d
    4284:	000045e5 	.word	0x000045e5
    4288:	00004679 	.word	0x00004679

0000428c <_ZN16FlashMemoryClass9flashOpenEv>:
}



void FlashMemoryClass::flashOpen(void)
{
    428c:	b580      	push	{r7, lr}
    428e:	b082      	sub	sp, #8
    4290:	af00      	add	r7, sp, #0
    4292:	6078      	str	r0, [r7, #4]
	garbage=spi.enable();
    4294:	687b      	ldr	r3, [r7, #4]
    4296:	3390      	adds	r3, #144	; 0x90
    4298:	0018      	movs	r0, r3
    429a:	4b05      	ldr	r3, [pc, #20]	; (42b0 <_ZN16FlashMemoryClass9flashOpenEv+0x24>)
    429c:	4798      	blx	r3
    429e:	0003      	movs	r3, r0
    42a0:	0019      	movs	r1, r3
    42a2:	687b      	ldr	r3, [r7, #4]
    42a4:	2280      	movs	r2, #128	; 0x80
    42a6:	5099      	str	r1, [r3, r2]
	
	
}
    42a8:	46c0      	nop			; (mov r8, r8)
    42aa:	46bd      	mov	sp, r7
    42ac:	b002      	add	sp, #8
    42ae:	bd80      	pop	{r7, pc}
    42b0:	000049c1 	.word	0x000049c1

000042b4 <_ZN16FlashMemoryClass12CE_Low_FlashEv>:
	spi.read((uint8_t *)dest, (uint16_t)size);
	CE_High_Flash();
	return (uint8_t)src;
}
void FlashMemoryClass::CE_Low_Flash(void)
{
    42b4:	b580      	push	{r7, lr}
    42b6:	b082      	sub	sp, #8
    42b8:	af00      	add	r7, sp, #0
    42ba:	6078      	str	r0, [r7, #4]
	garbage=0;
    42bc:	687b      	ldr	r3, [r7, #4]
    42be:	2280      	movs	r2, #128	; 0x80
    42c0:	2100      	movs	r1, #0
    42c2:	5099      	str	r1, [r3, r2]
		gpio_set_pin_level(CS_FLASH,
		// <y> Initial level
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);
    42c4:	2100      	movs	r1, #0
    42c6:	201b      	movs	r0, #27
    42c8:	4b04      	ldr	r3, [pc, #16]	; (42dc <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    42ca:	4798      	blx	r3
		gpio_set_pin_level(CS_FRAM,true);
    42cc:	2101      	movs	r1, #1
    42ce:	201c      	movs	r0, #28
    42d0:	4b02      	ldr	r3, [pc, #8]	; (42dc <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    42d2:	4798      	blx	r3
}
    42d4:	46c0      	nop			; (mov r8, r8)
    42d6:	46bd      	mov	sp, r7
    42d8:	b002      	add	sp, #8
    42da:	bd80      	pop	{r7, pc}
    42dc:	00004175 	.word	0x00004175

000042e0 <_ZN16FlashMemoryClass13CE_High_FlashEv>:

void FlashMemoryClass::CE_High_Flash(void)
{
    42e0:	b580      	push	{r7, lr}
    42e2:	b082      	sub	sp, #8
    42e4:	af00      	add	r7, sp, #0
    42e6:	6078      	str	r0, [r7, #4]
	garbage=0;
    42e8:	687b      	ldr	r3, [r7, #4]
    42ea:	2280      	movs	r2, #128	; 0x80
    42ec:	2100      	movs	r1, #0
    42ee:	5099      	str	r1, [r3, r2]
	gpio_set_pin_level(CS_FLASH,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
    42f0:	2101      	movs	r1, #1
    42f2:	201b      	movs	r0, #27
    42f4:	4b04      	ldr	r3, [pc, #16]	; (4308 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    42f6:	4798      	blx	r3
	gpio_set_pin_level(CS_FRAM,true);
    42f8:	2101      	movs	r1, #1
    42fa:	201c      	movs	r0, #28
    42fc:	4b02      	ldr	r3, [pc, #8]	; (4308 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    42fe:	4798      	blx	r3
}
    4300:	46c0      	nop			; (mov r8, r8)
    4302:	46bd      	mov	sp, r7
    4304:	b002      	add	sp, #8
    4306:	bd80      	pop	{r7, pc}
    4308:	00004175 	.word	0x00004175

0000430c <_ZN16FlashMemoryClass9Send_ByteEh>:
uint8_t FlashMemoryClass::Send_Byte(uint8_t byte)
{
    430c:	b580      	push	{r7, lr}
    430e:	b082      	sub	sp, #8
    4310:	af00      	add	r7, sp, #0
    4312:	6078      	str	r0, [r7, #4]
    4314:	000a      	movs	r2, r1
    4316:	1cfb      	adds	r3, r7, #3
    4318:	701a      	strb	r2, [r3, #0]
	//WaitBusy();
	spi.write(&byte,1);
    431a:	687b      	ldr	r3, [r7, #4]
    431c:	3390      	adds	r3, #144	; 0x90
    431e:	1cf9      	adds	r1, r7, #3
    4320:	2201      	movs	r2, #1
    4322:	0018      	movs	r0, r3
    4324:	4b03      	ldr	r3, [pc, #12]	; (4334 <_ZN16FlashMemoryClass9Send_ByteEh+0x28>)
    4326:	4798      	blx	r3
	return byte;
    4328:	1cfb      	adds	r3, r7, #3
    432a:	781b      	ldrb	r3, [r3, #0]
}
    432c:	0018      	movs	r0, r3
    432e:	46bd      	mov	sp, r7
    4330:	b002      	add	sp, #8
    4332:	bd80      	pop	{r7, pc}
    4334:	000049fd 	.word	0x000049fd

00004338 <_ZN16FlashMemoryClass8Get_ByteEv>:

uint8_t FlashMemoryClass::Get_Byte(void)
{
    4338:	b580      	push	{r7, lr}
    433a:	b084      	sub	sp, #16
    433c:	af00      	add	r7, sp, #0
    433e:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	//WaitBusy();
	spi.read(&byte,1);
    4340:	687b      	ldr	r3, [r7, #4]
    4342:	3390      	adds	r3, #144	; 0x90
    4344:	220f      	movs	r2, #15
    4346:	18b9      	adds	r1, r7, r2
    4348:	2201      	movs	r2, #1
    434a:	0018      	movs	r0, r3
    434c:	4b04      	ldr	r3, [pc, #16]	; (4360 <_ZN16FlashMemoryClass8Get_ByteEv+0x28>)
    434e:	4798      	blx	r3
	
	return byte;
    4350:	230f      	movs	r3, #15
    4352:	18fb      	adds	r3, r7, r3
    4354:	781b      	ldrb	r3, [r3, #0]
}
    4356:	0018      	movs	r0, r3
    4358:	46bd      	mov	sp, r7
    435a:	b004      	add	sp, #16
    435c:	bd80      	pop	{r7, pc}
    435e:	46c0      	nop			; (mov r8, r8)
    4360:	00004a3d 	.word	0x00004a3d

00004364 <_ZN16FlashMemoryClass4WRENEv>:

void FlashMemoryClass::WREN(void)
{
    4364:	b580      	push	{r7, lr}
    4366:	b082      	sub	sp, #8
    4368:	af00      	add	r7, sp, #0
    436a:	6078      	str	r0, [r7, #4]
	do
	{
		CE_Low_Flash();			// enable device
    436c:	687b      	ldr	r3, [r7, #4]
    436e:	0018      	movs	r0, r3
    4370:	4b0e      	ldr	r3, [pc, #56]	; (43ac <_ZN16FlashMemoryClass4WRENEv+0x48>)
    4372:	4798      	blx	r3
		Send_Byte(kFlashWREnable);	// send WREN command
    4374:	687b      	ldr	r3, [r7, #4]
    4376:	2106      	movs	r1, #6
    4378:	0018      	movs	r0, r3
    437a:	4b0d      	ldr	r3, [pc, #52]	; (43b0 <_ZN16FlashMemoryClass4WRENEv+0x4c>)
    437c:	4798      	blx	r3
		//WaitBusy();
		CE_High_Flash();
    437e:	687b      	ldr	r3, [r7, #4]
    4380:	0018      	movs	r0, r3
    4382:	4b0c      	ldr	r3, [pc, #48]	; (43b4 <_ZN16FlashMemoryClass4WRENEv+0x50>)
    4384:	4798      	blx	r3
		status=ReadStatusRegister();
    4386:	687b      	ldr	r3, [r7, #4]
    4388:	0018      	movs	r0, r3
    438a:	4b0b      	ldr	r3, [pc, #44]	; (43b8 <_ZN16FlashMemoryClass4WRENEv+0x54>)
    438c:	4798      	blx	r3
    438e:	0003      	movs	r3, r0
    4390:	0019      	movs	r1, r3
    4392:	687b      	ldr	r3, [r7, #4]
    4394:	22bc      	movs	r2, #188	; 0xbc
    4396:	5499      	strb	r1, [r3, r2]
	} while ((status&&(0x02))==0);
    4398:	687b      	ldr	r3, [r7, #4]
    439a:	22bc      	movs	r2, #188	; 0xbc
    439c:	5c9b      	ldrb	r3, [r3, r2]
    439e:	2b00      	cmp	r3, #0
    43a0:	d100      	bne.n	43a4 <_ZN16FlashMemoryClass4WRENEv+0x40>
	do
    43a2:	e7e3      	b.n	436c <_ZN16FlashMemoryClass4WRENEv+0x8>

}
    43a4:	46c0      	nop			; (mov r8, r8)
    43a6:	46bd      	mov	sp, r7
    43a8:	b002      	add	sp, #8
    43aa:	bd80      	pop	{r7, pc}
    43ac:	000042b5 	.word	0x000042b5
    43b0:	0000430d 	.word	0x0000430d
    43b4:	000042e1 	.word	0x000042e1
    43b8:	000045e5 	.word	0x000045e5

000043bc <_ZN16FlashMemoryClass4WRDIEv>:


void FlashMemoryClass::WRDI(void)
{
    43bc:	b580      	push	{r7, lr}
    43be:	b082      	sub	sp, #8
    43c0:	af00      	add	r7, sp, #0
    43c2:	6078      	str	r0, [r7, #4]
	CE_Low_Flash();			// enable device
    43c4:	687b      	ldr	r3, [r7, #4]
    43c6:	0018      	movs	r0, r3
    43c8:	4b07      	ldr	r3, [pc, #28]	; (43e8 <_ZN16FlashMemoryClass4WRDIEv+0x2c>)
    43ca:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
    43cc:	687b      	ldr	r3, [r7, #4]
    43ce:	2104      	movs	r1, #4
    43d0:	0018      	movs	r0, r3
    43d2:	4b06      	ldr	r3, [pc, #24]	; (43ec <_ZN16FlashMemoryClass4WRDIEv+0x30>)
    43d4:	4798      	blx	r3
//	WaitBusy();
	CE_High_Flash();			// disable device
    43d6:	687b      	ldr	r3, [r7, #4]
    43d8:	0018      	movs	r0, r3
    43da:	4b05      	ldr	r3, [pc, #20]	; (43f0 <_ZN16FlashMemoryClass4WRDIEv+0x34>)
    43dc:	4798      	blx	r3
	
}
    43de:	46c0      	nop			; (mov r8, r8)
    43e0:	46bd      	mov	sp, r7
    43e2:	b002      	add	sp, #8
    43e4:	bd80      	pop	{r7, pc}
    43e6:	46c0      	nop			; (mov r8, r8)
    43e8:	000042b5 	.word	0x000042b5
    43ec:	0000430d 	.word	0x0000430d
    43f0:	000042e1 	.word	0x000042e1

000043f4 <_ZN16FlashMemoryClass10eraseFlashEmm>:
		return *srcPtr;

	}
	
void FlashMemoryClass::eraseFlash(uint32_t dest, uint32_t size)
	{
    43f4:	b580      	push	{r7, lr}
    43f6:	b086      	sub	sp, #24
    43f8:	af00      	add	r7, sp, #0
    43fa:	60f8      	str	r0, [r7, #12]
    43fc:	60b9      	str	r1, [r7, #8]
    43fe:	607a      	str	r2, [r7, #4]
	uint32_t	eraseRemaining = size;
    4400:	687b      	ldr	r3, [r7, #4]
    4402:	617b      	str	r3, [r7, #20]
	uint32_t	eraseAddress = dest;
    4404:	68bb      	ldr	r3, [r7, #8]
    4406:	613b      	str	r3, [r7, #16]
	flashOpen();
    4408:	68fb      	ldr	r3, [r7, #12]
    440a:	0018      	movs	r0, r3
    440c:	4b29      	ldr	r3, [pc, #164]	; (44b4 <_ZN16FlashMemoryClass10eraseFlashEmm+0xc0>)
    440e:	4798      	blx	r3
	while (eraseRemaining > 0)
    4410:	697b      	ldr	r3, [r7, #20]
    4412:	2b00      	cmp	r3, #0
    4414:	d045      	beq.n	44a2 <_ZN16FlashMemoryClass10eraseFlashEmm+0xae>
	{
	WREN();
    4416:	68fb      	ldr	r3, [r7, #12]
    4418:	0018      	movs	r0, r3
    441a:	4b27      	ldr	r3, [pc, #156]	; (44b8 <_ZN16FlashMemoryClass10eraseFlashEmm+0xc4>)
    441c:	4798      	blx	r3
	if (eraseRemaining <= 4 * 1024)
    441e:	697a      	ldr	r2, [r7, #20]
    4420:	2380      	movs	r3, #128	; 0x80
    4422:	015b      	lsls	r3, r3, #5
    4424:	429a      	cmp	r2, r3
    4426:	d808      	bhi.n	443a <_ZN16FlashMemoryClass10eraseFlashEmm+0x46>
		{
		Sector_Erase(eraseAddress);
    4428:	693a      	ldr	r2, [r7, #16]
    442a:	68fb      	ldr	r3, [r7, #12]
    442c:	0011      	movs	r1, r2
    442e:	0018      	movs	r0, r3
    4430:	4b22      	ldr	r3, [pc, #136]	; (44bc <_ZN16FlashMemoryClass10eraseFlashEmm+0xc8>)
    4432:	4798      	blx	r3
		eraseRemaining = 0;
    4434:	2300      	movs	r3, #0
    4436:	617b      	str	r3, [r7, #20]
    4438:	e02a      	b.n	4490 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>
		}
	else if (eraseRemaining < 64 * 1024)
    443a:	697b      	ldr	r3, [r7, #20]
    443c:	4a20      	ldr	r2, [pc, #128]	; (44c0 <_ZN16FlashMemoryClass10eraseFlashEmm+0xcc>)
    443e:	4293      	cmp	r3, r2
    4440:	d811      	bhi.n	4466 <_ZN16FlashMemoryClass10eraseFlashEmm+0x72>
		{
		Sector_Erase(eraseAddress);
    4442:	693a      	ldr	r2, [r7, #16]
    4444:	68fb      	ldr	r3, [r7, #12]
    4446:	0011      	movs	r1, r2
    4448:	0018      	movs	r0, r3
    444a:	4b1c      	ldr	r3, [pc, #112]	; (44bc <_ZN16FlashMemoryClass10eraseFlashEmm+0xc8>)
    444c:	4798      	blx	r3
		eraseAddress += (4 * 1024);
    444e:	693b      	ldr	r3, [r7, #16]
    4450:	2280      	movs	r2, #128	; 0x80
    4452:	0152      	lsls	r2, r2, #5
    4454:	4694      	mov	ip, r2
    4456:	4463      	add	r3, ip
    4458:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (4 * 1024);
    445a:	697b      	ldr	r3, [r7, #20]
    445c:	4a19      	ldr	r2, [pc, #100]	; (44c4 <_ZN16FlashMemoryClass10eraseFlashEmm+0xd0>)
    445e:	4694      	mov	ip, r2
    4460:	4463      	add	r3, ip
    4462:	617b      	str	r3, [r7, #20]
    4464:	e014      	b.n	4490 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>
		}

	else if (eraseRemaining >= 64 * 1024)
    4466:	697b      	ldr	r3, [r7, #20]
    4468:	4a15      	ldr	r2, [pc, #84]	; (44c0 <_ZN16FlashMemoryClass10eraseFlashEmm+0xcc>)
    446a:	4293      	cmp	r3, r2
    446c:	d910      	bls.n	4490 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>
		{
		Block_Erase_64K(eraseAddress);
    446e:	693a      	ldr	r2, [r7, #16]
    4470:	68fb      	ldr	r3, [r7, #12]
    4472:	0011      	movs	r1, r2
    4474:	0018      	movs	r0, r3
    4476:	4b14      	ldr	r3, [pc, #80]	; (44c8 <_ZN16FlashMemoryClass10eraseFlashEmm+0xd4>)
    4478:	4798      	blx	r3
		eraseAddress += (64 * 1024);
    447a:	693b      	ldr	r3, [r7, #16]
    447c:	2280      	movs	r2, #128	; 0x80
    447e:	0252      	lsls	r2, r2, #9
    4480:	4694      	mov	ip, r2
    4482:	4463      	add	r3, ip
    4484:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (64 * 1024);
    4486:	697b      	ldr	r3, [r7, #20]
    4488:	4a10      	ldr	r2, [pc, #64]	; (44cc <_ZN16FlashMemoryClass10eraseFlashEmm+0xd8>)
    448a:	4694      	mov	ip, r2
    448c:	4463      	add	r3, ip
    448e:	617b      	str	r3, [r7, #20]
		Block_Erase_32K(eraseAddress);
		eraseAddress += (32 * 1024);
		eraseRemaining -= (32 * 1024);
		}
*/
	WaitBusy();
    4490:	68fb      	ldr	r3, [r7, #12]
    4492:	0018      	movs	r0, r3
    4494:	4b0e      	ldr	r3, [pc, #56]	; (44d0 <_ZN16FlashMemoryClass10eraseFlashEmm+0xdc>)
    4496:	4798      	blx	r3
	WRDI();
    4498:	68fb      	ldr	r3, [r7, #12]
    449a:	0018      	movs	r0, r3
    449c:	4b0d      	ldr	r3, [pc, #52]	; (44d4 <_ZN16FlashMemoryClass10eraseFlashEmm+0xe0>)
    449e:	4798      	blx	r3
	while (eraseRemaining > 0)
    44a0:	e7b6      	b.n	4410 <_ZN16FlashMemoryClass10eraseFlashEmm+0x1c>
	}
	flashClose();
    44a2:	68fb      	ldr	r3, [r7, #12]
    44a4:	0018      	movs	r0, r3
    44a6:	4b0c      	ldr	r3, [pc, #48]	; (44d8 <_ZN16FlashMemoryClass10eraseFlashEmm+0xe4>)
    44a8:	4798      	blx	r3
}
    44aa:	46c0      	nop			; (mov r8, r8)
    44ac:	46bd      	mov	sp, r7
    44ae:	b006      	add	sp, #24
    44b0:	bd80      	pop	{r7, pc}
    44b2:	46c0      	nop			; (mov r8, r8)
    44b4:	0000428d 	.word	0x0000428d
    44b8:	00004365 	.word	0x00004365
    44bc:	000046a1 	.word	0x000046a1
    44c0:	0000ffff 	.word	0x0000ffff
    44c4:	fffff000 	.word	0xfffff000
    44c8:	000044dd 	.word	0x000044dd
    44cc:	ffff0000 	.word	0xffff0000
    44d0:	00004545 	.word	0x00004545
    44d4:	000043bd 	.word	0x000043bd
    44d8:	00004679 	.word	0x00004679

000044dc <_ZN16FlashMemoryClass15Block_Erase_64KEm>:
	
void	FlashMemoryClass::Block_Erase_64K(uint32_t Dst){
    44dc:	b580      	push	{r7, lr}
    44de:	b082      	sub	sp, #8
    44e0:	af00      	add	r7, sp, #0
    44e2:	6078      	str	r0, [r7, #4]
    44e4:	6039      	str	r1, [r7, #0]

		CE_Low_Flash();				// enable device
    44e6:	687b      	ldr	r3, [r7, #4]
    44e8:	0018      	movs	r0, r3
    44ea:	4b13      	ldr	r3, [pc, #76]	; (4538 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x5c>)
    44ec:	4798      	blx	r3
		Send_Byte(kFlash64KBlockErase);		// send Sector Erase command
    44ee:	687b      	ldr	r3, [r7, #4]
    44f0:	21d8      	movs	r1, #216	; 0xd8
    44f2:	0018      	movs	r0, r3
    44f4:	4b11      	ldr	r3, [pc, #68]	; (453c <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x60>)
    44f6:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    44f8:	683b      	ldr	r3, [r7, #0]
    44fa:	0c1b      	lsrs	r3, r3, #16
    44fc:	b2da      	uxtb	r2, r3
    44fe:	687b      	ldr	r3, [r7, #4]
    4500:	0011      	movs	r1, r2
    4502:	0018      	movs	r0, r3
    4504:	4b0d      	ldr	r3, [pc, #52]	; (453c <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x60>)
    4506:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFF) >> 8));
    4508:	683b      	ldr	r3, [r7, #0]
    450a:	0a1b      	lsrs	r3, r3, #8
    450c:	b2da      	uxtb	r2, r3
    450e:	687b      	ldr	r3, [r7, #4]
    4510:	0011      	movs	r1, r2
    4512:	0018      	movs	r0, r3
    4514:	4b09      	ldr	r3, [pc, #36]	; (453c <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x60>)
    4516:	4798      	blx	r3
		Send_Byte(Dst & 0xFF);
    4518:	683b      	ldr	r3, [r7, #0]
    451a:	b2da      	uxtb	r2, r3
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	0011      	movs	r1, r2
    4520:	0018      	movs	r0, r3
    4522:	4b06      	ldr	r3, [pc, #24]	; (453c <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x60>)
    4524:	4798      	blx	r3
		CE_High_Flash();				// disable device
    4526:	687b      	ldr	r3, [r7, #4]
    4528:	0018      	movs	r0, r3
    452a:	4b05      	ldr	r3, [pc, #20]	; (4540 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x64>)
    452c:	4798      	blx	r3
		
}
    452e:	46c0      	nop			; (mov r8, r8)
    4530:	46bd      	mov	sp, r7
    4532:	b002      	add	sp, #8
    4534:	bd80      	pop	{r7, pc}
    4536:	46c0      	nop			; (mov r8, r8)
    4538:	000042b5 	.word	0x000042b5
    453c:	0000430d 	.word	0x0000430d
    4540:	000042e1 	.word	0x000042e1

00004544 <_ZN16FlashMemoryClass8WaitBusyEv>:
uint8_t  FlashMemoryClass::WaitBusy(void){
    4544:	b580      	push	{r7, lr}
    4546:	b082      	sub	sp, #8
    4548:	af00      	add	r7, sp, #0
    454a:	6078      	str	r0, [r7, #4]
	status = ReadStatusRegister();
    454c:	687b      	ldr	r3, [r7, #4]
    454e:	0018      	movs	r0, r3
    4550:	4b0f      	ldr	r3, [pc, #60]	; (4590 <_ZN16FlashMemoryClass8WaitBusyEv+0x4c>)
    4552:	4798      	blx	r3
    4554:	0003      	movs	r3, r0
    4556:	0019      	movs	r1, r3
    4558:	687b      	ldr	r3, [r7, #4]
    455a:	22bc      	movs	r2, #188	; 0xbc
    455c:	5499      	strb	r1, [r3, r2]
		
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    455e:	687b      	ldr	r3, [r7, #4]
    4560:	22bc      	movs	r2, #188	; 0xbc
    4562:	5c9b      	ldrb	r3, [r3, r2]
    4564:	001a      	movs	r2, r3
    4566:	2301      	movs	r3, #1
    4568:	4013      	ands	r3, r2
    456a:	d009      	beq.n	4580 <_ZN16FlashMemoryClass8WaitBusyEv+0x3c>
			status = ReadStatusRegister();
    456c:	687b      	ldr	r3, [r7, #4]
    456e:	0018      	movs	r0, r3
    4570:	4b07      	ldr	r3, [pc, #28]	; (4590 <_ZN16FlashMemoryClass8WaitBusyEv+0x4c>)
    4572:	4798      	blx	r3
    4574:	0003      	movs	r3, r0
    4576:	0019      	movs	r1, r3
    4578:	687b      	ldr	r3, [r7, #4]
    457a:	22bc      	movs	r2, #188	; 0xbc
    457c:	5499      	strb	r1, [r3, r2]
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    457e:	e7ee      	b.n	455e <_ZN16FlashMemoryClass8WaitBusyEv+0x1a>
		}
		
		return	status;
    4580:	687b      	ldr	r3, [r7, #4]
    4582:	22bc      	movs	r2, #188	; 0xbc
    4584:	5c9b      	ldrb	r3, [r3, r2]
	}
    4586:	0018      	movs	r0, r3
    4588:	46bd      	mov	sp, r7
    458a:	b002      	add	sp, #8
    458c:	bd80      	pop	{r7, pc}
    458e:	46c0      	nop			; (mov r8, r8)
    4590:	000045e5 	.word	0x000045e5

00004594 <_ZN16FlashMemoryClass7IsReadyEv>:
bool  FlashMemoryClass::IsReady(void){
    4594:	b580      	push	{r7, lr}
    4596:	b082      	sub	sp, #8
    4598:	af00      	add	r7, sp, #0
    459a:	6078      	str	r0, [r7, #4]
	
	flashOpen();
    459c:	687b      	ldr	r3, [r7, #4]
    459e:	0018      	movs	r0, r3
    45a0:	4b0d      	ldr	r3, [pc, #52]	; (45d8 <_ZN16FlashMemoryClass7IsReadyEv+0x44>)
    45a2:	4798      	blx	r3
	status = ReadStatusRegister();
    45a4:	687b      	ldr	r3, [r7, #4]
    45a6:	0018      	movs	r0, r3
    45a8:	4b0c      	ldr	r3, [pc, #48]	; (45dc <_ZN16FlashMemoryClass7IsReadyEv+0x48>)
    45aa:	4798      	blx	r3
    45ac:	0003      	movs	r3, r0
    45ae:	0019      	movs	r1, r3
    45b0:	687b      	ldr	r3, [r7, #4]
    45b2:	22bc      	movs	r2, #188	; 0xbc
    45b4:	5499      	strb	r1, [r3, r2]
	flashClose();
    45b6:	687b      	ldr	r3, [r7, #4]
    45b8:	0018      	movs	r0, r3
    45ba:	4b09      	ldr	r3, [pc, #36]	; (45e0 <_ZN16FlashMemoryClass7IsReadyEv+0x4c>)
    45bc:	4798      	blx	r3
	return	(status&0x01)==0;
    45be:	687b      	ldr	r3, [r7, #4]
    45c0:	22bc      	movs	r2, #188	; 0xbc
    45c2:	5c9b      	ldrb	r3, [r3, r2]
    45c4:	001a      	movs	r2, r3
    45c6:	2301      	movs	r3, #1
    45c8:	4013      	ands	r3, r2
    45ca:	425a      	negs	r2, r3
    45cc:	4153      	adcs	r3, r2
    45ce:	b2db      	uxtb	r3, r3
}
    45d0:	0018      	movs	r0, r3
    45d2:	46bd      	mov	sp, r7
    45d4:	b002      	add	sp, #8
    45d6:	bd80      	pop	{r7, pc}
    45d8:	0000428d 	.word	0x0000428d
    45dc:	000045e5 	.word	0x000045e5
    45e0:	00004679 	.word	0x00004679

000045e4 <_ZN16FlashMemoryClass18ReadStatusRegisterEv>:
uint8_t  FlashMemoryClass::ReadStatusRegister(void){
    45e4:	b580      	push	{r7, lr}
    45e6:	b082      	sub	sp, #8
    45e8:	af00      	add	r7, sp, #0
    45ea:	6078      	str	r0, [r7, #4]
			status=ReadSingleRegister(kFlashReadSR);
    45ec:	687b      	ldr	r3, [r7, #4]
    45ee:	2105      	movs	r1, #5
    45f0:	0018      	movs	r0, r3
    45f2:	4b07      	ldr	r3, [pc, #28]	; (4610 <_ZN16FlashMemoryClass18ReadStatusRegisterEv+0x2c>)
    45f4:	4798      	blx	r3
    45f6:	0003      	movs	r3, r0
    45f8:	0019      	movs	r1, r3
    45fa:	687b      	ldr	r3, [r7, #4]
    45fc:	22bc      	movs	r2, #188	; 0xbc
    45fe:	5499      	strb	r1, [r3, r2]
		return status;
    4600:	687b      	ldr	r3, [r7, #4]
    4602:	22bc      	movs	r2, #188	; 0xbc
    4604:	5c9b      	ldrb	r3, [r3, r2]
	}
    4606:	0018      	movs	r0, r3
    4608:	46bd      	mov	sp, r7
    460a:	b002      	add	sp, #8
    460c:	bd80      	pop	{r7, pc}
    460e:	46c0      	nop			; (mov r8, r8)
    4610:	00004615 	.word	0x00004615

00004614 <_ZN16FlashMemoryClass18ReadSingleRegisterEh>:
uint8_t  FlashMemoryClass::ReadFunctionRegister(void){
			// disable device
		return ReadSingleRegister(kFlashReadFunction);
	}
	
uint8_t  FlashMemoryClass::ReadSingleRegister(uint8_t r){
    4614:	b590      	push	{r4, r7, lr}
    4616:	b085      	sub	sp, #20
    4618:	af00      	add	r7, sp, #0
    461a:	6078      	str	r0, [r7, #4]
    461c:	000a      	movs	r2, r1
    461e:	1cfb      	adds	r3, r7, #3
    4620:	701a      	strb	r2, [r3, #0]
	uint8_t b = 0;
    4622:	230f      	movs	r3, #15
    4624:	18fb      	adds	r3, r7, r3
    4626:	2200      	movs	r2, #0
    4628:	701a      	strb	r2, [r3, #0]
	CE_Low_Flash();			// enable device
    462a:	687b      	ldr	r3, [r7, #4]
    462c:	0018      	movs	r0, r3
    462e:	4b0e      	ldr	r3, [pc, #56]	; (4668 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x54>)
    4630:	4798      	blx	r3
	Send_Byte(r);	// send RDSR command
    4632:	1cfb      	adds	r3, r7, #3
    4634:	781a      	ldrb	r2, [r3, #0]
    4636:	687b      	ldr	r3, [r7, #4]
    4638:	0011      	movs	r1, r2
    463a:	0018      	movs	r0, r3
    463c:	4b0b      	ldr	r3, [pc, #44]	; (466c <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x58>)
    463e:	4798      	blx	r3
	b = Get_Byte();		/* receive byte */
    4640:	230f      	movs	r3, #15
    4642:	18fc      	adds	r4, r7, r3
    4644:	687b      	ldr	r3, [r7, #4]
    4646:	0018      	movs	r0, r3
    4648:	4b09      	ldr	r3, [pc, #36]	; (4670 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x5c>)
    464a:	4798      	blx	r3
    464c:	0003      	movs	r3, r0
    464e:	7023      	strb	r3, [r4, #0]
	CE_High_Flash();			// disable device
    4650:	687b      	ldr	r3, [r7, #4]
    4652:	0018      	movs	r0, r3
    4654:	4b07      	ldr	r3, [pc, #28]	; (4674 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x60>)
    4656:	4798      	blx	r3
	return b;
    4658:	230f      	movs	r3, #15
    465a:	18fb      	adds	r3, r7, r3
    465c:	781b      	ldrb	r3, [r3, #0]
}
    465e:	0018      	movs	r0, r3
    4660:	46bd      	mov	sp, r7
    4662:	b005      	add	sp, #20
    4664:	bd90      	pop	{r4, r7, pc}
    4666:	46c0      	nop			; (mov r8, r8)
    4668:	000042b5 	.word	0x000042b5
    466c:	0000430d 	.word	0x0000430d
    4670:	00004339 	.word	0x00004339
    4674:	000042e1 	.word	0x000042e1

00004678 <_ZN16FlashMemoryClass10flashCloseEv>:
	Send_Byte(byte);		/* receive byte */
	CE_High_Flash();			// disable device
	return byte;
}

void FlashMemoryClass::flashClose(void){
    4678:	b580      	push	{r7, lr}
    467a:	b082      	sub	sp, #8
    467c:	af00      	add	r7, sp, #0
    467e:	6078      	str	r0, [r7, #4]
	garbage=0;
    4680:	687b      	ldr	r3, [r7, #4]
    4682:	2280      	movs	r2, #128	; 0x80
    4684:	2100      	movs	r1, #0
    4686:	5099      	str	r1, [r3, r2]
		spi.disable();
    4688:	687b      	ldr	r3, [r7, #4]
    468a:	3390      	adds	r3, #144	; 0x90
    468c:	0018      	movs	r0, r3
    468e:	4b03      	ldr	r3, [pc, #12]	; (469c <_ZN16FlashMemoryClass10flashCloseEv+0x24>)
    4690:	4798      	blx	r3
	}
    4692:	46c0      	nop			; (mov r8, r8)
    4694:	46bd      	mov	sp, r7
    4696:	b002      	add	sp, #8
    4698:	bd80      	pop	{r7, pc}
    469a:	46c0      	nop			; (mov r8, r8)
    469c:	00004a7d 	.word	0x00004a7d

000046a0 <_ZN16FlashMemoryClass12Sector_EraseEm>:
void FlashMemoryClass::Sector_Erase(uint32_t Dst)
{
    46a0:	b580      	push	{r7, lr}
    46a2:	b082      	sub	sp, #8
    46a4:	af00      	add	r7, sp, #0
    46a6:	6078      	str	r0, [r7, #4]
    46a8:	6039      	str	r1, [r7, #0]
	CE_Low_Flash();				// enable device
    46aa:	687b      	ldr	r3, [r7, #4]
    46ac:	0018      	movs	r0, r3
    46ae:	4b13      	ldr	r3, [pc, #76]	; (46fc <_ZN16FlashMemoryClass12Sector_EraseEm+0x5c>)
    46b0:	4798      	blx	r3
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
    46b2:	687b      	ldr	r3, [r7, #4]
    46b4:	2120      	movs	r1, #32
    46b6:	0018      	movs	r0, r3
    46b8:	4b11      	ldr	r3, [pc, #68]	; (4700 <_ZN16FlashMemoryClass12Sector_EraseEm+0x60>)
    46ba:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    46bc:	683b      	ldr	r3, [r7, #0]
    46be:	0c1b      	lsrs	r3, r3, #16
    46c0:	b2da      	uxtb	r2, r3
    46c2:	687b      	ldr	r3, [r7, #4]
    46c4:	0011      	movs	r1, r2
    46c6:	0018      	movs	r0, r3
    46c8:	4b0d      	ldr	r3, [pc, #52]	; (4700 <_ZN16FlashMemoryClass12Sector_EraseEm+0x60>)
    46ca:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFF) >> 8));
    46cc:	683b      	ldr	r3, [r7, #0]
    46ce:	0a1b      	lsrs	r3, r3, #8
    46d0:	b2da      	uxtb	r2, r3
    46d2:	687b      	ldr	r3, [r7, #4]
    46d4:	0011      	movs	r1, r2
    46d6:	0018      	movs	r0, r3
    46d8:	4b09      	ldr	r3, [pc, #36]	; (4700 <_ZN16FlashMemoryClass12Sector_EraseEm+0x60>)
    46da:	4798      	blx	r3
	Send_Byte(Dst & 0xFF);
    46dc:	683b      	ldr	r3, [r7, #0]
    46de:	b2da      	uxtb	r2, r3
    46e0:	687b      	ldr	r3, [r7, #4]
    46e2:	0011      	movs	r1, r2
    46e4:	0018      	movs	r0, r3
    46e6:	4b06      	ldr	r3, [pc, #24]	; (4700 <_ZN16FlashMemoryClass12Sector_EraseEm+0x60>)
    46e8:	4798      	blx	r3
	CE_High_Flash();				// disable device
    46ea:	687b      	ldr	r3, [r7, #4]
    46ec:	0018      	movs	r0, r3
    46ee:	4b05      	ldr	r3, [pc, #20]	; (4704 <_ZN16FlashMemoryClass12Sector_EraseEm+0x64>)
    46f0:	4798      	blx	r3
}
    46f2:	46c0      	nop			; (mov r8, r8)
    46f4:	46bd      	mov	sp, r7
    46f6:	b002      	add	sp, #8
    46f8:	bd80      	pop	{r7, pc}
    46fa:	46c0      	nop			; (mov r8, r8)
    46fc:	000042b5 	.word	0x000042b5
    4700:	0000430d 	.word	0x0000430d
    4704:	000042e1 	.word	0x000042e1

00004708 <_ZN16FlashMemoryClass12WriteAddressEPhmm>:
	delay_ms(100);
	CE_Low_Flash();
	Send_Byte(0x99);
	CE_High_Flash();				// disable device
}
uint32_t	FlashMemoryClass::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    4708:	b580      	push	{r7, lr}
    470a:	b086      	sub	sp, #24
    470c:	af00      	add	r7, sp, #0
    470e:	60f8      	str	r0, [r7, #12]
    4710:	60b9      	str	r1, [r7, #8]
    4712:	607a      	str	r2, [r7, #4]
    4714:	603b      	str	r3, [r7, #0]
	uint32_t	w;
	while(!IsReady());
    4716:	68fb      	ldr	r3, [r7, #12]
    4718:	0018      	movs	r0, r3
    471a:	4b30      	ldr	r3, [pc, #192]	; (47dc <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd4>)
    471c:	4798      	blx	r3
    471e:	0003      	movs	r3, r0
    4720:	001a      	movs	r2, r3
    4722:	2301      	movs	r3, #1
    4724:	4053      	eors	r3, r2
    4726:	b2db      	uxtb	r3, r3
    4728:	2b00      	cmp	r3, #0
    472a:	d000      	beq.n	472e <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x26>
    472c:	e7f3      	b.n	4716 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe>
	flashOpen();
    472e:	68fb      	ldr	r3, [r7, #12]
    4730:	0018      	movs	r0, r3
    4732:	4b2b      	ldr	r3, [pc, #172]	; (47e0 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd8>)
    4734:	4798      	blx	r3
	WREN();
    4736:	68fb      	ldr	r3, [r7, #12]
    4738:	0018      	movs	r0, r3
    473a:	4b2a      	ldr	r3, [pc, #168]	; (47e4 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xdc>)
    473c:	4798      	blx	r3
	CE_Low_Flash();
    473e:	68fb      	ldr	r3, [r7, #12]
    4740:	0018      	movs	r0, r3
    4742:	4b29      	ldr	r3, [pc, #164]	; (47e8 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe0>)
    4744:	4798      	blx	r3
	localBuffer[0]=kFlashByteProgram;
    4746:	68fb      	ldr	r3, [r7, #12]
    4748:	22a4      	movs	r2, #164	; 0xa4
    474a:	2102      	movs	r1, #2
    474c:	5499      	strb	r1, [r3, r2]
	localBuffer[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    474e:	687b      	ldr	r3, [r7, #4]
    4750:	0c1b      	lsrs	r3, r3, #16
    4752:	b2d9      	uxtb	r1, r3
    4754:	68fb      	ldr	r3, [r7, #12]
    4756:	22a5      	movs	r2, #165	; 0xa5
    4758:	5499      	strb	r1, [r3, r2]
	localBuffer[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    475a:	687b      	ldr	r3, [r7, #4]
    475c:	0a1b      	lsrs	r3, r3, #8
    475e:	b2d9      	uxtb	r1, r3
    4760:	68fb      	ldr	r3, [r7, #12]
    4762:	22a6      	movs	r2, #166	; 0xa6
    4764:	5499      	strb	r1, [r3, r2]
	localBuffer[3]=(uint8_t)(addr&0xFF);
    4766:	687b      	ldr	r3, [r7, #4]
    4768:	b2d9      	uxtb	r1, r3
    476a:	68fb      	ldr	r3, [r7, #12]
    476c:	22a7      	movs	r2, #167	; 0xa7
    476e:	5499      	strb	r1, [r3, r2]
	for (uint32_t i = 4; i <(size)+4; i++)
    4770:	2304      	movs	r3, #4
    4772:	617b      	str	r3, [r7, #20]
    4774:	683b      	ldr	r3, [r7, #0]
    4776:	1d1a      	adds	r2, r3, #4
    4778:	697b      	ldr	r3, [r7, #20]
    477a:	429a      	cmp	r2, r3
    477c:	d90f      	bls.n	479e <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x96>
	{
		localBuffer[i]=*p;
    477e:	68bb      	ldr	r3, [r7, #8]
    4780:	7818      	ldrb	r0, [r3, #0]
    4782:	68fa      	ldr	r2, [r7, #12]
    4784:	21a4      	movs	r1, #164	; 0xa4
    4786:	697b      	ldr	r3, [r7, #20]
    4788:	18d3      	adds	r3, r2, r3
    478a:	185b      	adds	r3, r3, r1
    478c:	1c02      	adds	r2, r0, #0
    478e:	701a      	strb	r2, [r3, #0]
		p++;
    4790:	68bb      	ldr	r3, [r7, #8]
    4792:	3301      	adds	r3, #1
    4794:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 4; i <(size)+4; i++)
    4796:	697b      	ldr	r3, [r7, #20]
    4798:	3301      	adds	r3, #1
    479a:	617b      	str	r3, [r7, #20]
    479c:	e7ea      	b.n	4774 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x6c>
	}


	w=spi.write(&localBuffer[0],size+4);
    479e:	68fb      	ldr	r3, [r7, #12]
    47a0:	3390      	adds	r3, #144	; 0x90
    47a2:	0018      	movs	r0, r3
    47a4:	68fb      	ldr	r3, [r7, #12]
    47a6:	33a4      	adds	r3, #164	; 0xa4
    47a8:	0019      	movs	r1, r3
    47aa:	683b      	ldr	r3, [r7, #0]
    47ac:	3304      	adds	r3, #4
    47ae:	001a      	movs	r2, r3
    47b0:	4b0e      	ldr	r3, [pc, #56]	; (47ec <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe4>)
    47b2:	4798      	blx	r3
    47b4:	0003      	movs	r3, r0
    47b6:	613b      	str	r3, [r7, #16]

	CE_High_Flash();
    47b8:	68fb      	ldr	r3, [r7, #12]
    47ba:	0018      	movs	r0, r3
    47bc:	4b0c      	ldr	r3, [pc, #48]	; (47f0 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe8>)
    47be:	4798      	blx	r3
	WRDI();
    47c0:	68fb      	ldr	r3, [r7, #12]
    47c2:	0018      	movs	r0, r3
    47c4:	4b0b      	ldr	r3, [pc, #44]	; (47f4 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xec>)
    47c6:	4798      	blx	r3
	flashClose();
    47c8:	68fb      	ldr	r3, [r7, #12]
    47ca:	0018      	movs	r0, r3
    47cc:	4b0a      	ldr	r3, [pc, #40]	; (47f8 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xf0>)
    47ce:	4798      	blx	r3
	return	w;
    47d0:	693b      	ldr	r3, [r7, #16]
	/*return (uint32_t)writeFlash(addr,(void*)p,size);*/
}
    47d2:	0018      	movs	r0, r3
    47d4:	46bd      	mov	sp, r7
    47d6:	b006      	add	sp, #24
    47d8:	bd80      	pop	{r7, pc}
    47da:	46c0      	nop			; (mov r8, r8)
    47dc:	00004595 	.word	0x00004595
    47e0:	0000428d 	.word	0x0000428d
    47e4:	00004365 	.word	0x00004365
    47e8:	000042b5 	.word	0x000042b5
    47ec:	000049fd 	.word	0x000049fd
    47f0:	000042e1 	.word	0x000042e1
    47f4:	000043bd 	.word	0x000043bd
    47f8:	00004679 	.word	0x00004679

000047fc <_ZN16FlashMemoryClass11ReadAddressEPhmm>:
uint32_t	FlashMemoryClass::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    47fc:	b580      	push	{r7, lr}
    47fe:	b086      	sub	sp, #24
    4800:	af00      	add	r7, sp, #0
    4802:	60f8      	str	r0, [r7, #12]
    4804:	60b9      	str	r1, [r7, #8]
    4806:	607a      	str	r2, [r7, #4]
    4808:	603b      	str	r3, [r7, #0]
	uint8_t	dummy;
	while(!IsReady());
    480a:	68fb      	ldr	r3, [r7, #12]
    480c:	0018      	movs	r0, r3
    480e:	4b24      	ldr	r3, [pc, #144]	; (48a0 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa4>)
    4810:	4798      	blx	r3
    4812:	0003      	movs	r3, r0
    4814:	001a      	movs	r2, r3
    4816:	2301      	movs	r3, #1
    4818:	4053      	eors	r3, r2
    481a:	b2db      	uxtb	r3, r3
    481c:	2b00      	cmp	r3, #0
    481e:	d000      	beq.n	4822 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x26>
    4820:	e7f3      	b.n	480a <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xe>
	flashOpen();
    4822:	68fb      	ldr	r3, [r7, #12]
    4824:	0018      	movs	r0, r3
    4826:	4b1f      	ldr	r3, [pc, #124]	; (48a4 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa8>)
    4828:	4798      	blx	r3
	CE_Low_Flash();
    482a:	68fb      	ldr	r3, [r7, #12]
    482c:	0018      	movs	r0, r3
    482e:	4b1e      	ldr	r3, [pc, #120]	; (48a8 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xac>)
    4830:	4798      	blx	r3
	instruction[0]=kFlashRead;
    4832:	68fb      	ldr	r3, [r7, #12]
    4834:	22b8      	movs	r2, #184	; 0xb8
    4836:	2103      	movs	r1, #3
    4838:	5499      	strb	r1, [r3, r2]
	instruction[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    483a:	687b      	ldr	r3, [r7, #4]
    483c:	0c1b      	lsrs	r3, r3, #16
    483e:	b2d9      	uxtb	r1, r3
    4840:	68fb      	ldr	r3, [r7, #12]
    4842:	22b9      	movs	r2, #185	; 0xb9
    4844:	5499      	strb	r1, [r3, r2]
	instruction[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    4846:	687b      	ldr	r3, [r7, #4]
    4848:	0a1b      	lsrs	r3, r3, #8
    484a:	b2d9      	uxtb	r1, r3
    484c:	68fb      	ldr	r3, [r7, #12]
    484e:	22ba      	movs	r2, #186	; 0xba
    4850:	5499      	strb	r1, [r3, r2]
	instruction[3]=(uint8_t)(addr&0xFF);
    4852:	687b      	ldr	r3, [r7, #4]
    4854:	b2d9      	uxtb	r1, r3
    4856:	68fb      	ldr	r3, [r7, #12]
    4858:	22bb      	movs	r2, #187	; 0xbb
    485a:	5499      	strb	r1, [r3, r2]
		
	uint32_t	r=spi.write(instruction,4);
    485c:	68fb      	ldr	r3, [r7, #12]
    485e:	3390      	adds	r3, #144	; 0x90
    4860:	0018      	movs	r0, r3
    4862:	68fb      	ldr	r3, [r7, #12]
    4864:	33b8      	adds	r3, #184	; 0xb8
    4866:	2204      	movs	r2, #4
    4868:	0019      	movs	r1, r3
    486a:	4b10      	ldr	r3, [pc, #64]	; (48ac <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb0>)
    486c:	4798      	blx	r3
    486e:	0003      	movs	r3, r0
    4870:	617b      	str	r3, [r7, #20]
	r=spi.read(p,size);
    4872:	68fb      	ldr	r3, [r7, #12]
    4874:	3390      	adds	r3, #144	; 0x90
    4876:	683a      	ldr	r2, [r7, #0]
    4878:	68b9      	ldr	r1, [r7, #8]
    487a:	0018      	movs	r0, r3
    487c:	4b0c      	ldr	r3, [pc, #48]	; (48b0 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb4>)
    487e:	4798      	blx	r3
    4880:	0003      	movs	r3, r0
    4882:	617b      	str	r3, [r7, #20]
	CE_High_Flash();
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	0018      	movs	r0, r3
    4888:	4b0a      	ldr	r3, [pc, #40]	; (48b4 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb8>)
    488a:	4798      	blx	r3
	flashClose();
    488c:	68fb      	ldr	r3, [r7, #12]
    488e:	0018      	movs	r0, r3
    4890:	4b09      	ldr	r3, [pc, #36]	; (48b8 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xbc>)
    4892:	4798      	blx	r3
	
	return	r;
    4894:	697b      	ldr	r3, [r7, #20]
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
    4896:	0018      	movs	r0, r3
    4898:	46bd      	mov	sp, r7
    489a:	b006      	add	sp, #24
    489c:	bd80      	pop	{r7, pc}
    489e:	46c0      	nop			; (mov r8, r8)
    48a0:	00004595 	.word	0x00004595
    48a4:	0000428d 	.word	0x0000428d
    48a8:	000042b5 	.word	0x000042b5
    48ac:	000049fd 	.word	0x000049fd
    48b0:	00004a3d 	.word	0x00004a3d
    48b4:	000042e1 	.word	0x000042e1
    48b8:	00004679 	.word	0x00004679

000048bc <_Z41__static_initialization_and_destruction_0ii>:
    48bc:	b580      	push	{r7, lr}
    48be:	b082      	sub	sp, #8
    48c0:	af00      	add	r7, sp, #0
    48c2:	6078      	str	r0, [r7, #4]
    48c4:	6039      	str	r1, [r7, #0]
    48c6:	687b      	ldr	r3, [r7, #4]
    48c8:	2b01      	cmp	r3, #1
    48ca:	d10f      	bne.n	48ec <_Z41__static_initialization_and_destruction_0ii+0x30>
    48cc:	683b      	ldr	r3, [r7, #0]
    48ce:	4a09      	ldr	r2, [pc, #36]	; (48f4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    48d0:	4293      	cmp	r3, r2
    48d2:	d10b      	bne.n	48ec <_Z41__static_initialization_and_destruction_0ii+0x30>
    48d4:	4a08      	ldr	r2, [pc, #32]	; (48f8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    48d6:	4b09      	ldr	r3, [pc, #36]	; (48fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
    48d8:	0011      	movs	r1, r2
    48da:	0018      	movs	r0, r3
    48dc:	4b08      	ldr	r3, [pc, #32]	; (4900 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    48de:	4798      	blx	r3
    48e0:	4a08      	ldr	r2, [pc, #32]	; (4904 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    48e2:	4909      	ldr	r1, [pc, #36]	; (4908 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    48e4:	4b05      	ldr	r3, [pc, #20]	; (48fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
    48e6:	0018      	movs	r0, r3
    48e8:	4b08      	ldr	r3, [pc, #32]	; (490c <_Z41__static_initialization_and_destruction_0ii+0x50>)
    48ea:	4798      	blx	r3
    48ec:	46c0      	nop			; (mov r8, r8)
    48ee:	46bd      	mov	sp, r7
    48f0:	b002      	add	sp, #8
    48f2:	bd80      	pop	{r7, pc}
    48f4:	0000ffff 	.word	0x0000ffff
    48f8:	20000944 	.word	0x20000944
    48fc:	2000082c 	.word	0x2000082c
    4900:	000041b5 	.word	0x000041b5
    4904:	20000000 	.word	0x20000000
    4908:	00004205 	.word	0x00004205
    490c:	00004b05 	.word	0x00004b05

00004910 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev>:
    4910:	b580      	push	{r7, lr}
    4912:	af00      	add	r7, sp, #0
    4914:	4b03      	ldr	r3, [pc, #12]	; (4924 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x14>)
    4916:	0019      	movs	r1, r3
    4918:	2001      	movs	r0, #1
    491a:	4b03      	ldr	r3, [pc, #12]	; (4928 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x18>)
    491c:	4798      	blx	r3
    491e:	46bd      	mov	sp, r7
    4920:	bd80      	pop	{r7, pc}
    4922:	46c0      	nop			; (mov r8, r8)
    4924:	0000ffff 	.word	0x0000ffff
    4928:	000048bd 	.word	0x000048bd

0000492c <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    492c:	b580      	push	{r7, lr}
    492e:	b082      	sub	sp, #8
    4930:	af00      	add	r7, sp, #0
    4932:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    4934:	4b03      	ldr	r3, [pc, #12]	; (4944 <_ZN13SPI_Syn_ClassC1Ev+0x18>)
    4936:	687a      	ldr	r2, [r7, #4]
    4938:	601a      	str	r2, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    493a:	687b      	ldr	r3, [r7, #4]
    493c:	0018      	movs	r0, r3
    493e:	46bd      	mov	sp, r7
    4940:	b002      	add	sp, #8
    4942:	bd80      	pop	{r7, pc}
    4944:	200008ec 	.word	0x200008ec

00004948 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    4948:	b580      	push	{r7, lr}
    494a:	b082      	sub	sp, #8
    494c:	af00      	add	r7, sp, #0
    494e:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    4950:	687b      	ldr	r3, [r7, #4]
    4952:	0018      	movs	r0, r3
    4954:	46bd      	mov	sp, r7
    4956:	b002      	add	sp, #8
    4958:	bd80      	pop	{r7, pc}
	...

0000495c <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
    495c:	b580      	push	{r7, lr}
    495e:	b082      	sub	sp, #8
    4960:	af00      	add	r7, sp, #0
    4962:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    4964:	687b      	ldr	r3, [r7, #4]
    4966:	685a      	ldr	r2, [r3, #4]
    4968:	687b      	ldr	r3, [r7, #4]
    496a:	3308      	adds	r3, #8
    496c:	0019      	movs	r1, r3
    496e:	0010      	movs	r0, r2
    4970:	4b08      	ldr	r3, [pc, #32]	; (4994 <_ZN13SPI_Syn_Class4initEv+0x38>)
    4972:	4798      	blx	r3

	spi_m_sync_enable(SPI);
    4974:	687b      	ldr	r3, [r7, #4]
    4976:	685b      	ldr	r3, [r3, #4]
    4978:	0018      	movs	r0, r3
    497a:	4b07      	ldr	r3, [pc, #28]	; (4998 <_ZN13SPI_Syn_Class4initEv+0x3c>)
    497c:	4798      	blx	r3
	
	ready=true;
    497e:	687b      	ldr	r3, [r7, #4]
    4980:	2201      	movs	r2, #1
    4982:	701a      	strb	r2, [r3, #0]
	xferDone=true;
    4984:	687b      	ldr	r3, [r7, #4]
    4986:	2201      	movs	r2, #1
    4988:	705a      	strb	r2, [r3, #1]
	
}
    498a:	46c0      	nop			; (mov r8, r8)
    498c:	46bd      	mov	sp, r7
    498e:	b002      	add	sp, #8
    4990:	bd80      	pop	{r7, pc}
    4992:	46c0      	nop			; (mov r8, r8)
    4994:	00000b21 	.word	0x00000b21
    4998:	00000a11 	.word	0x00000a11

0000499c <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
    499c:	b580      	push	{r7, lr}
    499e:	b082      	sub	sp, #8
    49a0:	af00      	add	r7, sp, #0
    49a2:	6078      	str	r0, [r7, #4]
    49a4:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
    49a6:	4b05      	ldr	r3, [pc, #20]	; (49bc <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
    49a8:	687a      	ldr	r2, [r7, #4]
    49aa:	601a      	str	r2, [r3, #0]
	SPI=spiDesc;
    49ac:	687b      	ldr	r3, [r7, #4]
    49ae:	683a      	ldr	r2, [r7, #0]
    49b0:	605a      	str	r2, [r3, #4]
}
    49b2:	46c0      	nop			; (mov r8, r8)
    49b4:	46bd      	mov	sp, r7
    49b6:	b002      	add	sp, #8
    49b8:	bd80      	pop	{r7, pc}
    49ba:	46c0      	nop			; (mov r8, r8)
    49bc:	200008ec 	.word	0x200008ec

000049c0 <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
    49c0:	b580      	push	{r7, lr}
    49c2:	b082      	sub	sp, #8
    49c4:	af00      	add	r7, sp, #0
    49c6:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    49c8:	687b      	ldr	r3, [r7, #4]
    49ca:	685a      	ldr	r2, [r3, #4]
    49cc:	687b      	ldr	r3, [r7, #4]
    49ce:	3308      	adds	r3, #8
    49d0:	0019      	movs	r1, r3
    49d2:	0010      	movs	r0, r2
    49d4:	4b07      	ldr	r3, [pc, #28]	; (49f4 <_ZN13SPI_Syn_Class6enableEv+0x34>)
    49d6:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    49d8:	687b      	ldr	r3, [r7, #4]
    49da:	685b      	ldr	r3, [r3, #4]
    49dc:	0018      	movs	r0, r3
    49de:	4b06      	ldr	r3, [pc, #24]	; (49f8 <_ZN13SPI_Syn_Class6enableEv+0x38>)
    49e0:	4798      	blx	r3
	ready=true;
    49e2:	687b      	ldr	r3, [r7, #4]
    49e4:	2201      	movs	r2, #1
    49e6:	701a      	strb	r2, [r3, #0]
	return 0;
    49e8:	2300      	movs	r3, #0
}
    49ea:	0018      	movs	r0, r3
    49ec:	46bd      	mov	sp, r7
    49ee:	b002      	add	sp, #8
    49f0:	bd80      	pop	{r7, pc}
    49f2:	46c0      	nop			; (mov r8, r8)
    49f4:	00000b21 	.word	0x00000b21
    49f8:	00000a11 	.word	0x00000a11

000049fc <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
    49fc:	b580      	push	{r7, lr}
    49fe:	b086      	sub	sp, #24
    4a00:	af00      	add	r7, sp, #0
    4a02:	60f8      	str	r0, [r7, #12]
    4a04:	60b9      	str	r1, [r7, #8]
    4a06:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
    4a08:	68fb      	ldr	r3, [r7, #12]
    4a0a:	2201      	movs	r2, #1
    4a0c:	741a      	strb	r2, [r3, #16]
	w= io_write(spio,p,(uint16_t)n);
    4a0e:	68fb      	ldr	r3, [r7, #12]
    4a10:	689b      	ldr	r3, [r3, #8]
    4a12:	687a      	ldr	r2, [r7, #4]
    4a14:	b292      	uxth	r2, r2
    4a16:	68b9      	ldr	r1, [r7, #8]
    4a18:	0018      	movs	r0, r3
    4a1a:	4b07      	ldr	r3, [pc, #28]	; (4a38 <_ZN13SPI_Syn_Class5writeEPKhl+0x3c>)
    4a1c:	4798      	blx	r3
    4a1e:	0003      	movs	r3, r0
    4a20:	617b      	str	r3, [r7, #20]
	wFlag=(bool)w;
    4a22:	697b      	ldr	r3, [r7, #20]
    4a24:	1e5a      	subs	r2, r3, #1
    4a26:	4193      	sbcs	r3, r2
    4a28:	b2da      	uxtb	r2, r3
    4a2a:	68fb      	ldr	r3, [r7, #12]
    4a2c:	741a      	strb	r2, [r3, #16]
	 return w;
    4a2e:	697b      	ldr	r3, [r7, #20]
	
}
    4a30:	0018      	movs	r0, r3
    4a32:	46bd      	mov	sp, r7
    4a34:	b006      	add	sp, #24
    4a36:	bd80      	pop	{r7, pc}
    4a38:	00004a9d 	.word	0x00004a9d

00004a3c <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
    4a3c:	b580      	push	{r7, lr}
    4a3e:	b086      	sub	sp, #24
    4a40:	af00      	add	r7, sp, #0
    4a42:	60f8      	str	r0, [r7, #12]
    4a44:	60b9      	str	r1, [r7, #8]
    4a46:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
    4a48:	68fb      	ldr	r3, [r7, #12]
    4a4a:	2201      	movs	r2, #1
    4a4c:	745a      	strb	r2, [r3, #17]
	r=io_read(spio,p,(uint16_t)n);
    4a4e:	68fb      	ldr	r3, [r7, #12]
    4a50:	689b      	ldr	r3, [r3, #8]
    4a52:	687a      	ldr	r2, [r7, #4]
    4a54:	b292      	uxth	r2, r2
    4a56:	68b9      	ldr	r1, [r7, #8]
    4a58:	0018      	movs	r0, r3
    4a5a:	4b07      	ldr	r3, [pc, #28]	; (4a78 <_ZN13SPI_Syn_Class4readEPhl+0x3c>)
    4a5c:	4798      	blx	r3
    4a5e:	0003      	movs	r3, r0
    4a60:	617b      	str	r3, [r7, #20]
	rFlag=(bool)r;
    4a62:	697b      	ldr	r3, [r7, #20]
    4a64:	1e5a      	subs	r2, r3, #1
    4a66:	4193      	sbcs	r3, r2
    4a68:	b2da      	uxtb	r2, r3
    4a6a:	68fb      	ldr	r3, [r7, #12]
    4a6c:	745a      	strb	r2, [r3, #17]
	return  r;
    4a6e:	697b      	ldr	r3, [r7, #20]
}
    4a70:	0018      	movs	r0, r3
    4a72:	46bd      	mov	sp, r7
    4a74:	b006      	add	sp, #24
    4a76:	bd80      	pop	{r7, pc}
    4a78:	00004ad1 	.word	0x00004ad1

00004a7c <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
    4a7c:	b580      	push	{r7, lr}
    4a7e:	b082      	sub	sp, #8
    4a80:	af00      	add	r7, sp, #0
    4a82:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
    4a84:	687b      	ldr	r3, [r7, #4]
    4a86:	685b      	ldr	r3, [r3, #4]
    4a88:	0018      	movs	r0, r3
    4a8a:	4b03      	ldr	r3, [pc, #12]	; (4a98 <_ZN13SPI_Syn_Class7disableEv+0x1c>)
    4a8c:	4798      	blx	r3
	
}
    4a8e:	46c0      	nop			; (mov r8, r8)
    4a90:	46bd      	mov	sp, r7
    4a92:	b002      	add	sp, #8
    4a94:	bd80      	pop	{r7, pc}
    4a96:	46c0      	nop			; (mov r8, r8)
    4a98:	00000a39 	.word	0x00000a39

00004a9c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    4a9c:	b570      	push	{r4, r5, r6, lr}
    4a9e:	0006      	movs	r6, r0
    4aa0:	000c      	movs	r4, r1
    4aa2:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    4aa4:	2800      	cmp	r0, #0
    4aa6:	d00d      	beq.n	4ac4 <io_write+0x28>
    4aa8:	0008      	movs	r0, r1
    4aaa:	1e43      	subs	r3, r0, #1
    4aac:	4198      	sbcs	r0, r3
    4aae:	b2c0      	uxtb	r0, r0
    4ab0:	2234      	movs	r2, #52	; 0x34
    4ab2:	4905      	ldr	r1, [pc, #20]	; (4ac8 <io_write+0x2c>)
    4ab4:	4b05      	ldr	r3, [pc, #20]	; (4acc <io_write+0x30>)
    4ab6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    4ab8:	6833      	ldr	r3, [r6, #0]
    4aba:	002a      	movs	r2, r5
    4abc:	0021      	movs	r1, r4
    4abe:	0030      	movs	r0, r6
    4ac0:	4798      	blx	r3
}
    4ac2:	bd70      	pop	{r4, r5, r6, pc}
    4ac4:	2000      	movs	r0, #0
    4ac6:	e7f3      	b.n	4ab0 <io_write+0x14>
    4ac8:	000052f8 	.word	0x000052f8
    4acc:	00000db5 	.word	0x00000db5

00004ad0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    4ad0:	b570      	push	{r4, r5, r6, lr}
    4ad2:	0006      	movs	r6, r0
    4ad4:	000c      	movs	r4, r1
    4ad6:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    4ad8:	2800      	cmp	r0, #0
    4ada:	d00d      	beq.n	4af8 <io_read+0x28>
    4adc:	0008      	movs	r0, r1
    4ade:	1e43      	subs	r3, r0, #1
    4ae0:	4198      	sbcs	r0, r3
    4ae2:	b2c0      	uxtb	r0, r0
    4ae4:	223d      	movs	r2, #61	; 0x3d
    4ae6:	4905      	ldr	r1, [pc, #20]	; (4afc <io_read+0x2c>)
    4ae8:	4b05      	ldr	r3, [pc, #20]	; (4b00 <io_read+0x30>)
    4aea:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    4aec:	6873      	ldr	r3, [r6, #4]
    4aee:	002a      	movs	r2, r5
    4af0:	0021      	movs	r1, r4
    4af2:	0030      	movs	r0, r6
    4af4:	4798      	blx	r3
}
    4af6:	bd70      	pop	{r4, r5, r6, pc}
    4af8:	2000      	movs	r0, #0
    4afa:	e7f3      	b.n	4ae4 <io_read+0x14>
    4afc:	000052f8 	.word	0x000052f8
    4b00:	00000db5 	.word	0x00000db5

00004b04 <__aeabi_atexit>:
    4b04:	000b      	movs	r3, r1
    4b06:	b510      	push	{r4, lr}
    4b08:	0001      	movs	r1, r0
    4b0a:	0018      	movs	r0, r3
    4b0c:	f000 f9a2 	bl	4e54 <__cxa_atexit>
    4b10:	bd10      	pop	{r4, pc}
    4b12:	46c0      	nop			; (mov r8, r8)

00004b14 <__udivsi3>:
    4b14:	2200      	movs	r2, #0
    4b16:	0843      	lsrs	r3, r0, #1
    4b18:	428b      	cmp	r3, r1
    4b1a:	d374      	bcc.n	4c06 <__udivsi3+0xf2>
    4b1c:	0903      	lsrs	r3, r0, #4
    4b1e:	428b      	cmp	r3, r1
    4b20:	d35f      	bcc.n	4be2 <__udivsi3+0xce>
    4b22:	0a03      	lsrs	r3, r0, #8
    4b24:	428b      	cmp	r3, r1
    4b26:	d344      	bcc.n	4bb2 <__udivsi3+0x9e>
    4b28:	0b03      	lsrs	r3, r0, #12
    4b2a:	428b      	cmp	r3, r1
    4b2c:	d328      	bcc.n	4b80 <__udivsi3+0x6c>
    4b2e:	0c03      	lsrs	r3, r0, #16
    4b30:	428b      	cmp	r3, r1
    4b32:	d30d      	bcc.n	4b50 <__udivsi3+0x3c>
    4b34:	22ff      	movs	r2, #255	; 0xff
    4b36:	0209      	lsls	r1, r1, #8
    4b38:	ba12      	rev	r2, r2
    4b3a:	0c03      	lsrs	r3, r0, #16
    4b3c:	428b      	cmp	r3, r1
    4b3e:	d302      	bcc.n	4b46 <__udivsi3+0x32>
    4b40:	1212      	asrs	r2, r2, #8
    4b42:	0209      	lsls	r1, r1, #8
    4b44:	d065      	beq.n	4c12 <__udivsi3+0xfe>
    4b46:	0b03      	lsrs	r3, r0, #12
    4b48:	428b      	cmp	r3, r1
    4b4a:	d319      	bcc.n	4b80 <__udivsi3+0x6c>
    4b4c:	e000      	b.n	4b50 <__udivsi3+0x3c>
    4b4e:	0a09      	lsrs	r1, r1, #8
    4b50:	0bc3      	lsrs	r3, r0, #15
    4b52:	428b      	cmp	r3, r1
    4b54:	d301      	bcc.n	4b5a <__udivsi3+0x46>
    4b56:	03cb      	lsls	r3, r1, #15
    4b58:	1ac0      	subs	r0, r0, r3
    4b5a:	4152      	adcs	r2, r2
    4b5c:	0b83      	lsrs	r3, r0, #14
    4b5e:	428b      	cmp	r3, r1
    4b60:	d301      	bcc.n	4b66 <__udivsi3+0x52>
    4b62:	038b      	lsls	r3, r1, #14
    4b64:	1ac0      	subs	r0, r0, r3
    4b66:	4152      	adcs	r2, r2
    4b68:	0b43      	lsrs	r3, r0, #13
    4b6a:	428b      	cmp	r3, r1
    4b6c:	d301      	bcc.n	4b72 <__udivsi3+0x5e>
    4b6e:	034b      	lsls	r3, r1, #13
    4b70:	1ac0      	subs	r0, r0, r3
    4b72:	4152      	adcs	r2, r2
    4b74:	0b03      	lsrs	r3, r0, #12
    4b76:	428b      	cmp	r3, r1
    4b78:	d301      	bcc.n	4b7e <__udivsi3+0x6a>
    4b7a:	030b      	lsls	r3, r1, #12
    4b7c:	1ac0      	subs	r0, r0, r3
    4b7e:	4152      	adcs	r2, r2
    4b80:	0ac3      	lsrs	r3, r0, #11
    4b82:	428b      	cmp	r3, r1
    4b84:	d301      	bcc.n	4b8a <__udivsi3+0x76>
    4b86:	02cb      	lsls	r3, r1, #11
    4b88:	1ac0      	subs	r0, r0, r3
    4b8a:	4152      	adcs	r2, r2
    4b8c:	0a83      	lsrs	r3, r0, #10
    4b8e:	428b      	cmp	r3, r1
    4b90:	d301      	bcc.n	4b96 <__udivsi3+0x82>
    4b92:	028b      	lsls	r3, r1, #10
    4b94:	1ac0      	subs	r0, r0, r3
    4b96:	4152      	adcs	r2, r2
    4b98:	0a43      	lsrs	r3, r0, #9
    4b9a:	428b      	cmp	r3, r1
    4b9c:	d301      	bcc.n	4ba2 <__udivsi3+0x8e>
    4b9e:	024b      	lsls	r3, r1, #9
    4ba0:	1ac0      	subs	r0, r0, r3
    4ba2:	4152      	adcs	r2, r2
    4ba4:	0a03      	lsrs	r3, r0, #8
    4ba6:	428b      	cmp	r3, r1
    4ba8:	d301      	bcc.n	4bae <__udivsi3+0x9a>
    4baa:	020b      	lsls	r3, r1, #8
    4bac:	1ac0      	subs	r0, r0, r3
    4bae:	4152      	adcs	r2, r2
    4bb0:	d2cd      	bcs.n	4b4e <__udivsi3+0x3a>
    4bb2:	09c3      	lsrs	r3, r0, #7
    4bb4:	428b      	cmp	r3, r1
    4bb6:	d301      	bcc.n	4bbc <__udivsi3+0xa8>
    4bb8:	01cb      	lsls	r3, r1, #7
    4bba:	1ac0      	subs	r0, r0, r3
    4bbc:	4152      	adcs	r2, r2
    4bbe:	0983      	lsrs	r3, r0, #6
    4bc0:	428b      	cmp	r3, r1
    4bc2:	d301      	bcc.n	4bc8 <__udivsi3+0xb4>
    4bc4:	018b      	lsls	r3, r1, #6
    4bc6:	1ac0      	subs	r0, r0, r3
    4bc8:	4152      	adcs	r2, r2
    4bca:	0943      	lsrs	r3, r0, #5
    4bcc:	428b      	cmp	r3, r1
    4bce:	d301      	bcc.n	4bd4 <__udivsi3+0xc0>
    4bd0:	014b      	lsls	r3, r1, #5
    4bd2:	1ac0      	subs	r0, r0, r3
    4bd4:	4152      	adcs	r2, r2
    4bd6:	0903      	lsrs	r3, r0, #4
    4bd8:	428b      	cmp	r3, r1
    4bda:	d301      	bcc.n	4be0 <__udivsi3+0xcc>
    4bdc:	010b      	lsls	r3, r1, #4
    4bde:	1ac0      	subs	r0, r0, r3
    4be0:	4152      	adcs	r2, r2
    4be2:	08c3      	lsrs	r3, r0, #3
    4be4:	428b      	cmp	r3, r1
    4be6:	d301      	bcc.n	4bec <__udivsi3+0xd8>
    4be8:	00cb      	lsls	r3, r1, #3
    4bea:	1ac0      	subs	r0, r0, r3
    4bec:	4152      	adcs	r2, r2
    4bee:	0883      	lsrs	r3, r0, #2
    4bf0:	428b      	cmp	r3, r1
    4bf2:	d301      	bcc.n	4bf8 <__udivsi3+0xe4>
    4bf4:	008b      	lsls	r3, r1, #2
    4bf6:	1ac0      	subs	r0, r0, r3
    4bf8:	4152      	adcs	r2, r2
    4bfa:	0843      	lsrs	r3, r0, #1
    4bfc:	428b      	cmp	r3, r1
    4bfe:	d301      	bcc.n	4c04 <__udivsi3+0xf0>
    4c00:	004b      	lsls	r3, r1, #1
    4c02:	1ac0      	subs	r0, r0, r3
    4c04:	4152      	adcs	r2, r2
    4c06:	1a41      	subs	r1, r0, r1
    4c08:	d200      	bcs.n	4c0c <__udivsi3+0xf8>
    4c0a:	4601      	mov	r1, r0
    4c0c:	4152      	adcs	r2, r2
    4c0e:	4610      	mov	r0, r2
    4c10:	4770      	bx	lr
    4c12:	e7ff      	b.n	4c14 <__udivsi3+0x100>
    4c14:	b501      	push	{r0, lr}
    4c16:	2000      	movs	r0, #0
    4c18:	f000 f8f0 	bl	4dfc <__aeabi_idiv0>
    4c1c:	bd02      	pop	{r1, pc}
    4c1e:	46c0      	nop			; (mov r8, r8)

00004c20 <__aeabi_uidivmod>:
    4c20:	2900      	cmp	r1, #0
    4c22:	d0f7      	beq.n	4c14 <__udivsi3+0x100>
    4c24:	e776      	b.n	4b14 <__udivsi3>
    4c26:	4770      	bx	lr

00004c28 <__divsi3>:
    4c28:	4603      	mov	r3, r0
    4c2a:	430b      	orrs	r3, r1
    4c2c:	d47f      	bmi.n	4d2e <__divsi3+0x106>
    4c2e:	2200      	movs	r2, #0
    4c30:	0843      	lsrs	r3, r0, #1
    4c32:	428b      	cmp	r3, r1
    4c34:	d374      	bcc.n	4d20 <__divsi3+0xf8>
    4c36:	0903      	lsrs	r3, r0, #4
    4c38:	428b      	cmp	r3, r1
    4c3a:	d35f      	bcc.n	4cfc <__divsi3+0xd4>
    4c3c:	0a03      	lsrs	r3, r0, #8
    4c3e:	428b      	cmp	r3, r1
    4c40:	d344      	bcc.n	4ccc <__divsi3+0xa4>
    4c42:	0b03      	lsrs	r3, r0, #12
    4c44:	428b      	cmp	r3, r1
    4c46:	d328      	bcc.n	4c9a <__divsi3+0x72>
    4c48:	0c03      	lsrs	r3, r0, #16
    4c4a:	428b      	cmp	r3, r1
    4c4c:	d30d      	bcc.n	4c6a <__divsi3+0x42>
    4c4e:	22ff      	movs	r2, #255	; 0xff
    4c50:	0209      	lsls	r1, r1, #8
    4c52:	ba12      	rev	r2, r2
    4c54:	0c03      	lsrs	r3, r0, #16
    4c56:	428b      	cmp	r3, r1
    4c58:	d302      	bcc.n	4c60 <__divsi3+0x38>
    4c5a:	1212      	asrs	r2, r2, #8
    4c5c:	0209      	lsls	r1, r1, #8
    4c5e:	d065      	beq.n	4d2c <__divsi3+0x104>
    4c60:	0b03      	lsrs	r3, r0, #12
    4c62:	428b      	cmp	r3, r1
    4c64:	d319      	bcc.n	4c9a <__divsi3+0x72>
    4c66:	e000      	b.n	4c6a <__divsi3+0x42>
    4c68:	0a09      	lsrs	r1, r1, #8
    4c6a:	0bc3      	lsrs	r3, r0, #15
    4c6c:	428b      	cmp	r3, r1
    4c6e:	d301      	bcc.n	4c74 <__divsi3+0x4c>
    4c70:	03cb      	lsls	r3, r1, #15
    4c72:	1ac0      	subs	r0, r0, r3
    4c74:	4152      	adcs	r2, r2
    4c76:	0b83      	lsrs	r3, r0, #14
    4c78:	428b      	cmp	r3, r1
    4c7a:	d301      	bcc.n	4c80 <__divsi3+0x58>
    4c7c:	038b      	lsls	r3, r1, #14
    4c7e:	1ac0      	subs	r0, r0, r3
    4c80:	4152      	adcs	r2, r2
    4c82:	0b43      	lsrs	r3, r0, #13
    4c84:	428b      	cmp	r3, r1
    4c86:	d301      	bcc.n	4c8c <__divsi3+0x64>
    4c88:	034b      	lsls	r3, r1, #13
    4c8a:	1ac0      	subs	r0, r0, r3
    4c8c:	4152      	adcs	r2, r2
    4c8e:	0b03      	lsrs	r3, r0, #12
    4c90:	428b      	cmp	r3, r1
    4c92:	d301      	bcc.n	4c98 <__divsi3+0x70>
    4c94:	030b      	lsls	r3, r1, #12
    4c96:	1ac0      	subs	r0, r0, r3
    4c98:	4152      	adcs	r2, r2
    4c9a:	0ac3      	lsrs	r3, r0, #11
    4c9c:	428b      	cmp	r3, r1
    4c9e:	d301      	bcc.n	4ca4 <__divsi3+0x7c>
    4ca0:	02cb      	lsls	r3, r1, #11
    4ca2:	1ac0      	subs	r0, r0, r3
    4ca4:	4152      	adcs	r2, r2
    4ca6:	0a83      	lsrs	r3, r0, #10
    4ca8:	428b      	cmp	r3, r1
    4caa:	d301      	bcc.n	4cb0 <__divsi3+0x88>
    4cac:	028b      	lsls	r3, r1, #10
    4cae:	1ac0      	subs	r0, r0, r3
    4cb0:	4152      	adcs	r2, r2
    4cb2:	0a43      	lsrs	r3, r0, #9
    4cb4:	428b      	cmp	r3, r1
    4cb6:	d301      	bcc.n	4cbc <__divsi3+0x94>
    4cb8:	024b      	lsls	r3, r1, #9
    4cba:	1ac0      	subs	r0, r0, r3
    4cbc:	4152      	adcs	r2, r2
    4cbe:	0a03      	lsrs	r3, r0, #8
    4cc0:	428b      	cmp	r3, r1
    4cc2:	d301      	bcc.n	4cc8 <__divsi3+0xa0>
    4cc4:	020b      	lsls	r3, r1, #8
    4cc6:	1ac0      	subs	r0, r0, r3
    4cc8:	4152      	adcs	r2, r2
    4cca:	d2cd      	bcs.n	4c68 <__divsi3+0x40>
    4ccc:	09c3      	lsrs	r3, r0, #7
    4cce:	428b      	cmp	r3, r1
    4cd0:	d301      	bcc.n	4cd6 <__divsi3+0xae>
    4cd2:	01cb      	lsls	r3, r1, #7
    4cd4:	1ac0      	subs	r0, r0, r3
    4cd6:	4152      	adcs	r2, r2
    4cd8:	0983      	lsrs	r3, r0, #6
    4cda:	428b      	cmp	r3, r1
    4cdc:	d301      	bcc.n	4ce2 <__divsi3+0xba>
    4cde:	018b      	lsls	r3, r1, #6
    4ce0:	1ac0      	subs	r0, r0, r3
    4ce2:	4152      	adcs	r2, r2
    4ce4:	0943      	lsrs	r3, r0, #5
    4ce6:	428b      	cmp	r3, r1
    4ce8:	d301      	bcc.n	4cee <__divsi3+0xc6>
    4cea:	014b      	lsls	r3, r1, #5
    4cec:	1ac0      	subs	r0, r0, r3
    4cee:	4152      	adcs	r2, r2
    4cf0:	0903      	lsrs	r3, r0, #4
    4cf2:	428b      	cmp	r3, r1
    4cf4:	d301      	bcc.n	4cfa <__divsi3+0xd2>
    4cf6:	010b      	lsls	r3, r1, #4
    4cf8:	1ac0      	subs	r0, r0, r3
    4cfa:	4152      	adcs	r2, r2
    4cfc:	08c3      	lsrs	r3, r0, #3
    4cfe:	428b      	cmp	r3, r1
    4d00:	d301      	bcc.n	4d06 <__divsi3+0xde>
    4d02:	00cb      	lsls	r3, r1, #3
    4d04:	1ac0      	subs	r0, r0, r3
    4d06:	4152      	adcs	r2, r2
    4d08:	0883      	lsrs	r3, r0, #2
    4d0a:	428b      	cmp	r3, r1
    4d0c:	d301      	bcc.n	4d12 <__divsi3+0xea>
    4d0e:	008b      	lsls	r3, r1, #2
    4d10:	1ac0      	subs	r0, r0, r3
    4d12:	4152      	adcs	r2, r2
    4d14:	0843      	lsrs	r3, r0, #1
    4d16:	428b      	cmp	r3, r1
    4d18:	d301      	bcc.n	4d1e <__divsi3+0xf6>
    4d1a:	004b      	lsls	r3, r1, #1
    4d1c:	1ac0      	subs	r0, r0, r3
    4d1e:	4152      	adcs	r2, r2
    4d20:	1a41      	subs	r1, r0, r1
    4d22:	d200      	bcs.n	4d26 <__divsi3+0xfe>
    4d24:	4601      	mov	r1, r0
    4d26:	4152      	adcs	r2, r2
    4d28:	4610      	mov	r0, r2
    4d2a:	4770      	bx	lr
    4d2c:	e05d      	b.n	4dea <__divsi3+0x1c2>
    4d2e:	0fca      	lsrs	r2, r1, #31
    4d30:	d000      	beq.n	4d34 <__divsi3+0x10c>
    4d32:	4249      	negs	r1, r1
    4d34:	1003      	asrs	r3, r0, #32
    4d36:	d300      	bcc.n	4d3a <__divsi3+0x112>
    4d38:	4240      	negs	r0, r0
    4d3a:	4053      	eors	r3, r2
    4d3c:	2200      	movs	r2, #0
    4d3e:	469c      	mov	ip, r3
    4d40:	0903      	lsrs	r3, r0, #4
    4d42:	428b      	cmp	r3, r1
    4d44:	d32d      	bcc.n	4da2 <__divsi3+0x17a>
    4d46:	0a03      	lsrs	r3, r0, #8
    4d48:	428b      	cmp	r3, r1
    4d4a:	d312      	bcc.n	4d72 <__divsi3+0x14a>
    4d4c:	22fc      	movs	r2, #252	; 0xfc
    4d4e:	0189      	lsls	r1, r1, #6
    4d50:	ba12      	rev	r2, r2
    4d52:	0a03      	lsrs	r3, r0, #8
    4d54:	428b      	cmp	r3, r1
    4d56:	d30c      	bcc.n	4d72 <__divsi3+0x14a>
    4d58:	0189      	lsls	r1, r1, #6
    4d5a:	1192      	asrs	r2, r2, #6
    4d5c:	428b      	cmp	r3, r1
    4d5e:	d308      	bcc.n	4d72 <__divsi3+0x14a>
    4d60:	0189      	lsls	r1, r1, #6
    4d62:	1192      	asrs	r2, r2, #6
    4d64:	428b      	cmp	r3, r1
    4d66:	d304      	bcc.n	4d72 <__divsi3+0x14a>
    4d68:	0189      	lsls	r1, r1, #6
    4d6a:	d03a      	beq.n	4de2 <__divsi3+0x1ba>
    4d6c:	1192      	asrs	r2, r2, #6
    4d6e:	e000      	b.n	4d72 <__divsi3+0x14a>
    4d70:	0989      	lsrs	r1, r1, #6
    4d72:	09c3      	lsrs	r3, r0, #7
    4d74:	428b      	cmp	r3, r1
    4d76:	d301      	bcc.n	4d7c <__divsi3+0x154>
    4d78:	01cb      	lsls	r3, r1, #7
    4d7a:	1ac0      	subs	r0, r0, r3
    4d7c:	4152      	adcs	r2, r2
    4d7e:	0983      	lsrs	r3, r0, #6
    4d80:	428b      	cmp	r3, r1
    4d82:	d301      	bcc.n	4d88 <__divsi3+0x160>
    4d84:	018b      	lsls	r3, r1, #6
    4d86:	1ac0      	subs	r0, r0, r3
    4d88:	4152      	adcs	r2, r2
    4d8a:	0943      	lsrs	r3, r0, #5
    4d8c:	428b      	cmp	r3, r1
    4d8e:	d301      	bcc.n	4d94 <__divsi3+0x16c>
    4d90:	014b      	lsls	r3, r1, #5
    4d92:	1ac0      	subs	r0, r0, r3
    4d94:	4152      	adcs	r2, r2
    4d96:	0903      	lsrs	r3, r0, #4
    4d98:	428b      	cmp	r3, r1
    4d9a:	d301      	bcc.n	4da0 <__divsi3+0x178>
    4d9c:	010b      	lsls	r3, r1, #4
    4d9e:	1ac0      	subs	r0, r0, r3
    4da0:	4152      	adcs	r2, r2
    4da2:	08c3      	lsrs	r3, r0, #3
    4da4:	428b      	cmp	r3, r1
    4da6:	d301      	bcc.n	4dac <__divsi3+0x184>
    4da8:	00cb      	lsls	r3, r1, #3
    4daa:	1ac0      	subs	r0, r0, r3
    4dac:	4152      	adcs	r2, r2
    4dae:	0883      	lsrs	r3, r0, #2
    4db0:	428b      	cmp	r3, r1
    4db2:	d301      	bcc.n	4db8 <__divsi3+0x190>
    4db4:	008b      	lsls	r3, r1, #2
    4db6:	1ac0      	subs	r0, r0, r3
    4db8:	4152      	adcs	r2, r2
    4dba:	d2d9      	bcs.n	4d70 <__divsi3+0x148>
    4dbc:	0843      	lsrs	r3, r0, #1
    4dbe:	428b      	cmp	r3, r1
    4dc0:	d301      	bcc.n	4dc6 <__divsi3+0x19e>
    4dc2:	004b      	lsls	r3, r1, #1
    4dc4:	1ac0      	subs	r0, r0, r3
    4dc6:	4152      	adcs	r2, r2
    4dc8:	1a41      	subs	r1, r0, r1
    4dca:	d200      	bcs.n	4dce <__divsi3+0x1a6>
    4dcc:	4601      	mov	r1, r0
    4dce:	4663      	mov	r3, ip
    4dd0:	4152      	adcs	r2, r2
    4dd2:	105b      	asrs	r3, r3, #1
    4dd4:	4610      	mov	r0, r2
    4dd6:	d301      	bcc.n	4ddc <__divsi3+0x1b4>
    4dd8:	4240      	negs	r0, r0
    4dda:	2b00      	cmp	r3, #0
    4ddc:	d500      	bpl.n	4de0 <__divsi3+0x1b8>
    4dde:	4249      	negs	r1, r1
    4de0:	4770      	bx	lr
    4de2:	4663      	mov	r3, ip
    4de4:	105b      	asrs	r3, r3, #1
    4de6:	d300      	bcc.n	4dea <__divsi3+0x1c2>
    4de8:	4240      	negs	r0, r0
    4dea:	b501      	push	{r0, lr}
    4dec:	2000      	movs	r0, #0
    4dee:	f000 f805 	bl	4dfc <__aeabi_idiv0>
    4df2:	bd02      	pop	{r1, pc}

00004df4 <__aeabi_idivmod>:
    4df4:	2900      	cmp	r1, #0
    4df6:	d0f8      	beq.n	4dea <__divsi3+0x1c2>
    4df8:	e716      	b.n	4c28 <__divsi3>
    4dfa:	4770      	bx	lr

00004dfc <__aeabi_idiv0>:
    4dfc:	4770      	bx	lr
    4dfe:	46c0      	nop			; (mov r8, r8)

00004e00 <__aeabi_lmul>:
    4e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e02:	46ce      	mov	lr, r9
    4e04:	4647      	mov	r7, r8
    4e06:	0415      	lsls	r5, r2, #16
    4e08:	0c2d      	lsrs	r5, r5, #16
    4e0a:	002e      	movs	r6, r5
    4e0c:	b580      	push	{r7, lr}
    4e0e:	0407      	lsls	r7, r0, #16
    4e10:	0c14      	lsrs	r4, r2, #16
    4e12:	0c3f      	lsrs	r7, r7, #16
    4e14:	4699      	mov	r9, r3
    4e16:	0c03      	lsrs	r3, r0, #16
    4e18:	437e      	muls	r6, r7
    4e1a:	435d      	muls	r5, r3
    4e1c:	4367      	muls	r7, r4
    4e1e:	4363      	muls	r3, r4
    4e20:	197f      	adds	r7, r7, r5
    4e22:	0c34      	lsrs	r4, r6, #16
    4e24:	19e4      	adds	r4, r4, r7
    4e26:	469c      	mov	ip, r3
    4e28:	42a5      	cmp	r5, r4
    4e2a:	d903      	bls.n	4e34 <__aeabi_lmul+0x34>
    4e2c:	2380      	movs	r3, #128	; 0x80
    4e2e:	025b      	lsls	r3, r3, #9
    4e30:	4698      	mov	r8, r3
    4e32:	44c4      	add	ip, r8
    4e34:	464b      	mov	r3, r9
    4e36:	4351      	muls	r1, r2
    4e38:	4343      	muls	r3, r0
    4e3a:	0436      	lsls	r6, r6, #16
    4e3c:	0c36      	lsrs	r6, r6, #16
    4e3e:	0c25      	lsrs	r5, r4, #16
    4e40:	0424      	lsls	r4, r4, #16
    4e42:	4465      	add	r5, ip
    4e44:	19a4      	adds	r4, r4, r6
    4e46:	1859      	adds	r1, r3, r1
    4e48:	1949      	adds	r1, r1, r5
    4e4a:	0020      	movs	r0, r4
    4e4c:	bc0c      	pop	{r2, r3}
    4e4e:	4690      	mov	r8, r2
    4e50:	4699      	mov	r9, r3
    4e52:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004e54 <__cxa_atexit>:
    4e54:	b510      	push	{r4, lr}
    4e56:	0013      	movs	r3, r2
    4e58:	000a      	movs	r2, r1
    4e5a:	0001      	movs	r1, r0
    4e5c:	2002      	movs	r0, #2
    4e5e:	f000 f881 	bl	4f64 <__register_exitproc>
    4e62:	bd10      	pop	{r4, pc}

00004e64 <__libc_init_array>:
    4e64:	b570      	push	{r4, r5, r6, lr}
    4e66:	4e0d      	ldr	r6, [pc, #52]	; (4e9c <__libc_init_array+0x38>)
    4e68:	4d0d      	ldr	r5, [pc, #52]	; (4ea0 <__libc_init_array+0x3c>)
    4e6a:	2400      	movs	r4, #0
    4e6c:	1bad      	subs	r5, r5, r6
    4e6e:	10ad      	asrs	r5, r5, #2
    4e70:	d005      	beq.n	4e7e <__libc_init_array+0x1a>
    4e72:	00a3      	lsls	r3, r4, #2
    4e74:	58f3      	ldr	r3, [r6, r3]
    4e76:	3401      	adds	r4, #1
    4e78:	4798      	blx	r3
    4e7a:	42a5      	cmp	r5, r4
    4e7c:	d1f9      	bne.n	4e72 <__libc_init_array+0xe>
    4e7e:	f000 fa47 	bl	5310 <_init>
    4e82:	4e08      	ldr	r6, [pc, #32]	; (4ea4 <__libc_init_array+0x40>)
    4e84:	4d08      	ldr	r5, [pc, #32]	; (4ea8 <__libc_init_array+0x44>)
    4e86:	2400      	movs	r4, #0
    4e88:	1bad      	subs	r5, r5, r6
    4e8a:	10ad      	asrs	r5, r5, #2
    4e8c:	d005      	beq.n	4e9a <__libc_init_array+0x36>
    4e8e:	00a3      	lsls	r3, r4, #2
    4e90:	58f3      	ldr	r3, [r6, r3]
    4e92:	3401      	adds	r4, #1
    4e94:	4798      	blx	r3
    4e96:	42a5      	cmp	r5, r4
    4e98:	d1f9      	bne.n	4e8e <__libc_init_array+0x2a>
    4e9a:	bd70      	pop	{r4, r5, r6, pc}
    4e9c:	0000531c 	.word	0x0000531c
    4ea0:	0000531c 	.word	0x0000531c
    4ea4:	0000531c 	.word	0x0000531c
    4ea8:	00005338 	.word	0x00005338

00004eac <memcpy>:
    4eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    4eae:	0005      	movs	r5, r0
    4eb0:	2a0f      	cmp	r2, #15
    4eb2:	d92f      	bls.n	4f14 <memcpy+0x68>
    4eb4:	000b      	movs	r3, r1
    4eb6:	4303      	orrs	r3, r0
    4eb8:	079b      	lsls	r3, r3, #30
    4eba:	d134      	bne.n	4f26 <memcpy+0x7a>
    4ebc:	0016      	movs	r6, r2
    4ebe:	000c      	movs	r4, r1
    4ec0:	0003      	movs	r3, r0
    4ec2:	3e10      	subs	r6, #16
    4ec4:	0935      	lsrs	r5, r6, #4
    4ec6:	3501      	adds	r5, #1
    4ec8:	012d      	lsls	r5, r5, #4
    4eca:	1945      	adds	r5, r0, r5
    4ecc:	6827      	ldr	r7, [r4, #0]
    4ece:	601f      	str	r7, [r3, #0]
    4ed0:	6867      	ldr	r7, [r4, #4]
    4ed2:	605f      	str	r7, [r3, #4]
    4ed4:	68a7      	ldr	r7, [r4, #8]
    4ed6:	609f      	str	r7, [r3, #8]
    4ed8:	68e7      	ldr	r7, [r4, #12]
    4eda:	3410      	adds	r4, #16
    4edc:	60df      	str	r7, [r3, #12]
    4ede:	3310      	adds	r3, #16
    4ee0:	429d      	cmp	r5, r3
    4ee2:	d1f3      	bne.n	4ecc <memcpy+0x20>
    4ee4:	230f      	movs	r3, #15
    4ee6:	439e      	bics	r6, r3
    4ee8:	3610      	adds	r6, #16
    4eea:	1985      	adds	r5, r0, r6
    4eec:	1989      	adds	r1, r1, r6
    4eee:	4013      	ands	r3, r2
    4ef0:	2b03      	cmp	r3, #3
    4ef2:	d91a      	bls.n	4f2a <memcpy+0x7e>
    4ef4:	1f1e      	subs	r6, r3, #4
    4ef6:	2300      	movs	r3, #0
    4ef8:	08b4      	lsrs	r4, r6, #2
    4efa:	3401      	adds	r4, #1
    4efc:	00a4      	lsls	r4, r4, #2
    4efe:	58cf      	ldr	r7, [r1, r3]
    4f00:	50ef      	str	r7, [r5, r3]
    4f02:	3304      	adds	r3, #4
    4f04:	42a3      	cmp	r3, r4
    4f06:	d1fa      	bne.n	4efe <memcpy+0x52>
    4f08:	2403      	movs	r4, #3
    4f0a:	43a6      	bics	r6, r4
    4f0c:	1d33      	adds	r3, r6, #4
    4f0e:	4022      	ands	r2, r4
    4f10:	18c9      	adds	r1, r1, r3
    4f12:	18ed      	adds	r5, r5, r3
    4f14:	2a00      	cmp	r2, #0
    4f16:	d005      	beq.n	4f24 <memcpy+0x78>
    4f18:	2300      	movs	r3, #0
    4f1a:	5ccc      	ldrb	r4, [r1, r3]
    4f1c:	54ec      	strb	r4, [r5, r3]
    4f1e:	3301      	adds	r3, #1
    4f20:	4293      	cmp	r3, r2
    4f22:	d1fa      	bne.n	4f1a <memcpy+0x6e>
    4f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f26:	0005      	movs	r5, r0
    4f28:	e7f6      	b.n	4f18 <memcpy+0x6c>
    4f2a:	001a      	movs	r2, r3
    4f2c:	e7f2      	b.n	4f14 <memcpy+0x68>
    4f2e:	46c0      	nop			; (mov r8, r8)

00004f30 <rand>:
    4f30:	b510      	push	{r4, lr}
    4f32:	4b09      	ldr	r3, [pc, #36]	; (4f58 <rand+0x28>)
    4f34:	4a09      	ldr	r2, [pc, #36]	; (4f5c <rand+0x2c>)
    4f36:	681c      	ldr	r4, [r3, #0]
    4f38:	4b09      	ldr	r3, [pc, #36]	; (4f60 <rand+0x30>)
    4f3a:	34a8      	adds	r4, #168	; 0xa8
    4f3c:	6820      	ldr	r0, [r4, #0]
    4f3e:	6861      	ldr	r1, [r4, #4]
    4f40:	f7ff ff5e 	bl	4e00 <__aeabi_lmul>
    4f44:	2201      	movs	r2, #1
    4f46:	2300      	movs	r3, #0
    4f48:	1880      	adds	r0, r0, r2
    4f4a:	4159      	adcs	r1, r3
    4f4c:	6020      	str	r0, [r4, #0]
    4f4e:	6061      	str	r1, [r4, #4]
    4f50:	0048      	lsls	r0, r1, #1
    4f52:	0840      	lsrs	r0, r0, #1
    4f54:	bd10      	pop	{r4, pc}
    4f56:	46c0      	nop			; (mov r8, r8)
    4f58:	20000054 	.word	0x20000054
    4f5c:	4c957f2d 	.word	0x4c957f2d
    4f60:	5851f42d 	.word	0x5851f42d

00004f64 <__register_exitproc>:
    4f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f66:	464e      	mov	r6, r9
    4f68:	4645      	mov	r5, r8
    4f6a:	46de      	mov	lr, fp
    4f6c:	4657      	mov	r7, sl
    4f6e:	b5e0      	push	{r5, r6, r7, lr}
    4f70:	4d36      	ldr	r5, [pc, #216]	; (504c <__register_exitproc+0xe8>)
    4f72:	b083      	sub	sp, #12
    4f74:	0006      	movs	r6, r0
    4f76:	6828      	ldr	r0, [r5, #0]
    4f78:	4698      	mov	r8, r3
    4f7a:	000f      	movs	r7, r1
    4f7c:	4691      	mov	r9, r2
    4f7e:	f000 f899 	bl	50b4 <__retarget_lock_acquire_recursive>
    4f82:	4b33      	ldr	r3, [pc, #204]	; (5050 <__register_exitproc+0xec>)
    4f84:	681c      	ldr	r4, [r3, #0]
    4f86:	23a4      	movs	r3, #164	; 0xa4
    4f88:	005b      	lsls	r3, r3, #1
    4f8a:	58e0      	ldr	r0, [r4, r3]
    4f8c:	2800      	cmp	r0, #0
    4f8e:	d052      	beq.n	5036 <__register_exitproc+0xd2>
    4f90:	6843      	ldr	r3, [r0, #4]
    4f92:	2b1f      	cmp	r3, #31
    4f94:	dc13      	bgt.n	4fbe <__register_exitproc+0x5a>
    4f96:	1c5a      	adds	r2, r3, #1
    4f98:	9201      	str	r2, [sp, #4]
    4f9a:	2e00      	cmp	r6, #0
    4f9c:	d128      	bne.n	4ff0 <__register_exitproc+0x8c>
    4f9e:	9a01      	ldr	r2, [sp, #4]
    4fa0:	3302      	adds	r3, #2
    4fa2:	009b      	lsls	r3, r3, #2
    4fa4:	6042      	str	r2, [r0, #4]
    4fa6:	501f      	str	r7, [r3, r0]
    4fa8:	6828      	ldr	r0, [r5, #0]
    4faa:	f000 f885 	bl	50b8 <__retarget_lock_release_recursive>
    4fae:	2000      	movs	r0, #0
    4fb0:	b003      	add	sp, #12
    4fb2:	bc3c      	pop	{r2, r3, r4, r5}
    4fb4:	4690      	mov	r8, r2
    4fb6:	4699      	mov	r9, r3
    4fb8:	46a2      	mov	sl, r4
    4fba:	46ab      	mov	fp, r5
    4fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fbe:	4b25      	ldr	r3, [pc, #148]	; (5054 <__register_exitproc+0xf0>)
    4fc0:	2b00      	cmp	r3, #0
    4fc2:	d03d      	beq.n	5040 <__register_exitproc+0xdc>
    4fc4:	20c8      	movs	r0, #200	; 0xc8
    4fc6:	0040      	lsls	r0, r0, #1
    4fc8:	e000      	b.n	4fcc <__register_exitproc+0x68>
    4fca:	bf00      	nop
    4fcc:	2800      	cmp	r0, #0
    4fce:	d037      	beq.n	5040 <__register_exitproc+0xdc>
    4fd0:	22a4      	movs	r2, #164	; 0xa4
    4fd2:	2300      	movs	r3, #0
    4fd4:	0052      	lsls	r2, r2, #1
    4fd6:	58a1      	ldr	r1, [r4, r2]
    4fd8:	6043      	str	r3, [r0, #4]
    4fda:	6001      	str	r1, [r0, #0]
    4fdc:	50a0      	str	r0, [r4, r2]
    4fde:	3240      	adds	r2, #64	; 0x40
    4fe0:	5083      	str	r3, [r0, r2]
    4fe2:	3204      	adds	r2, #4
    4fe4:	5083      	str	r3, [r0, r2]
    4fe6:	3301      	adds	r3, #1
    4fe8:	9301      	str	r3, [sp, #4]
    4fea:	2300      	movs	r3, #0
    4fec:	2e00      	cmp	r6, #0
    4fee:	d0d6      	beq.n	4f9e <__register_exitproc+0x3a>
    4ff0:	009a      	lsls	r2, r3, #2
    4ff2:	4692      	mov	sl, r2
    4ff4:	4482      	add	sl, r0
    4ff6:	464a      	mov	r2, r9
    4ff8:	2188      	movs	r1, #136	; 0x88
    4ffa:	4654      	mov	r4, sl
    4ffc:	5062      	str	r2, [r4, r1]
    4ffe:	22c4      	movs	r2, #196	; 0xc4
    5000:	0052      	lsls	r2, r2, #1
    5002:	4691      	mov	r9, r2
    5004:	4481      	add	r9, r0
    5006:	464a      	mov	r2, r9
    5008:	3987      	subs	r1, #135	; 0x87
    500a:	4099      	lsls	r1, r3
    500c:	6812      	ldr	r2, [r2, #0]
    500e:	468b      	mov	fp, r1
    5010:	430a      	orrs	r2, r1
    5012:	4694      	mov	ip, r2
    5014:	464a      	mov	r2, r9
    5016:	4661      	mov	r1, ip
    5018:	6011      	str	r1, [r2, #0]
    501a:	2284      	movs	r2, #132	; 0x84
    501c:	4641      	mov	r1, r8
    501e:	0052      	lsls	r2, r2, #1
    5020:	50a1      	str	r1, [r4, r2]
    5022:	2e02      	cmp	r6, #2
    5024:	d1bb      	bne.n	4f9e <__register_exitproc+0x3a>
    5026:	0002      	movs	r2, r0
    5028:	465c      	mov	r4, fp
    502a:	328d      	adds	r2, #141	; 0x8d
    502c:	32ff      	adds	r2, #255	; 0xff
    502e:	6811      	ldr	r1, [r2, #0]
    5030:	430c      	orrs	r4, r1
    5032:	6014      	str	r4, [r2, #0]
    5034:	e7b3      	b.n	4f9e <__register_exitproc+0x3a>
    5036:	0020      	movs	r0, r4
    5038:	304d      	adds	r0, #77	; 0x4d
    503a:	30ff      	adds	r0, #255	; 0xff
    503c:	50e0      	str	r0, [r4, r3]
    503e:	e7a7      	b.n	4f90 <__register_exitproc+0x2c>
    5040:	6828      	ldr	r0, [r5, #0]
    5042:	f000 f839 	bl	50b8 <__retarget_lock_release_recursive>
    5046:	2001      	movs	r0, #1
    5048:	4240      	negs	r0, r0
    504a:	e7b1      	b.n	4fb0 <__register_exitproc+0x4c>
    504c:	20000480 	.word	0x20000480
    5050:	0000530c 	.word	0x0000530c
    5054:	00000000 	.word	0x00000000

00005058 <register_fini>:
    5058:	4b03      	ldr	r3, [pc, #12]	; (5068 <register_fini+0x10>)
    505a:	b510      	push	{r4, lr}
    505c:	2b00      	cmp	r3, #0
    505e:	d002      	beq.n	5066 <register_fini+0xe>
    5060:	4802      	ldr	r0, [pc, #8]	; (506c <register_fini+0x14>)
    5062:	f000 f805 	bl	5070 <atexit>
    5066:	bd10      	pop	{r4, pc}
    5068:	00000000 	.word	0x00000000
    506c:	00005081 	.word	0x00005081

00005070 <atexit>:
    5070:	b510      	push	{r4, lr}
    5072:	0001      	movs	r1, r0
    5074:	2300      	movs	r3, #0
    5076:	2200      	movs	r2, #0
    5078:	2000      	movs	r0, #0
    507a:	f7ff ff73 	bl	4f64 <__register_exitproc>
    507e:	bd10      	pop	{r4, pc}

00005080 <__libc_fini_array>:
    5080:	b570      	push	{r4, r5, r6, lr}
    5082:	4b09      	ldr	r3, [pc, #36]	; (50a8 <__libc_fini_array+0x28>)
    5084:	4c09      	ldr	r4, [pc, #36]	; (50ac <__libc_fini_array+0x2c>)
    5086:	1ae4      	subs	r4, r4, r3
    5088:	10a4      	asrs	r4, r4, #2
    508a:	d009      	beq.n	50a0 <__libc_fini_array+0x20>
    508c:	4a08      	ldr	r2, [pc, #32]	; (50b0 <__libc_fini_array+0x30>)
    508e:	18a5      	adds	r5, r4, r2
    5090:	00ad      	lsls	r5, r5, #2
    5092:	18ed      	adds	r5, r5, r3
    5094:	682b      	ldr	r3, [r5, #0]
    5096:	3c01      	subs	r4, #1
    5098:	4798      	blx	r3
    509a:	3d04      	subs	r5, #4
    509c:	2c00      	cmp	r4, #0
    509e:	d1f9      	bne.n	5094 <__libc_fini_array+0x14>
    50a0:	f000 f94a 	bl	5338 <_fini>
    50a4:	bd70      	pop	{r4, r5, r6, pc}
    50a6:	46c0      	nop			; (mov r8, r8)
    50a8:	00005344 	.word	0x00005344
    50ac:	00005348 	.word	0x00005348
    50b0:	3fffffff 	.word	0x3fffffff

000050b4 <__retarget_lock_acquire_recursive>:
    50b4:	4770      	bx	lr
    50b6:	46c0      	nop			; (mov r8, r8)

000050b8 <__retarget_lock_release_recursive>:
    50b8:	4770      	bx	lr
    50ba:	46c0      	nop			; (mov r8, r8)
    50bc:	0000037e 	.word	0x0000037e
    50c0:	0000038e 	.word	0x0000038e
    50c4:	0000039e 	.word	0x0000039e
    50c8:	000003ae 	.word	0x000003ae
    50cc:	000003be 	.word	0x000003be
    50d0:	682f2e2e 	.word	0x682f2e2e
    50d4:	732f6c61 	.word	0x732f6c61
    50d8:	682f6372 	.word	0x682f6372
    50dc:	705f6c61 	.word	0x705f6c61
    50e0:	632e6d77 	.word	0x632e6d77
    50e4:	00000000 	.word	0x00000000
    50e8:	682f2e2e 	.word	0x682f2e2e
    50ec:	732f6c61 	.word	0x732f6c61
    50f0:	682f6372 	.word	0x682f6372
    50f4:	735f6c61 	.word	0x735f6c61
    50f8:	6d5f6970 	.word	0x6d5f6970
    50fc:	6e79735f 	.word	0x6e79735f
    5100:	00632e63 	.word	0x00632e63
    5104:	682f2e2e 	.word	0x682f2e2e
    5108:	732f6c61 	.word	0x732f6c61
    510c:	682f6372 	.word	0x682f6372
    5110:	745f6c61 	.word	0x745f6c61
    5114:	72656d69 	.word	0x72656d69
    5118:	0000632e 	.word	0x0000632e
    511c:	682f2e2e 	.word	0x682f2e2e
    5120:	752f6c61 	.word	0x752f6c61
    5124:	736c6974 	.word	0x736c6974
    5128:	6372732f 	.word	0x6372732f
    512c:	6974752f 	.word	0x6974752f
    5130:	6c5f736c 	.word	0x6c5f736c
    5134:	2e747369 	.word	0x2e747369
    5138:	00000063 	.word	0x00000063
    513c:	682f2e2e 	.word	0x682f2e2e
    5140:	732f6c70 	.word	0x732f6c70
    5144:	6f637265 	.word	0x6f637265
    5148:	70682f6d 	.word	0x70682f6d
    514c:	65735f6c 	.word	0x65735f6c
    5150:	6d6f6372 	.word	0x6d6f6372
    5154:	0000632e 	.word	0x0000632e
    5158:	682f2e2e 	.word	0x682f2e2e
    515c:	742f6c70 	.word	0x742f6c70
    5160:	70682f63 	.word	0x70682f63
    5164:	63745f6c 	.word	0x63745f6c
    5168:	0000632e 	.word	0x0000632e
    516c:	2e2f2e2e 	.word	0x2e2f2e2e
    5170:	2e2e2f2e 	.word	0x2e2e2f2e
    5174:	4950472f 	.word	0x4950472f
    5178:	41535f4f 	.word	0x41535f4f
    517c:	3132444d 	.word	0x3132444d
    5180:	5345545f 	.word	0x5345545f
    5184:	50472f54 	.word	0x50472f54
    5188:	535f4f49 	.word	0x535f4f49
    518c:	32444d41 	.word	0x32444d41
    5190:	45545f31 	.word	0x45545f31
    5194:	682f5453 	.word	0x682f5453
    5198:	702f6c70 	.word	0x702f6c70
    519c:	2f74726f 	.word	0x2f74726f
    51a0:	5f6c7068 	.word	0x5f6c7068
    51a4:	6f697067 	.word	0x6f697067
    51a8:	7361625f 	.word	0x7361625f
    51ac:	00682e65 	.word	0x00682e65
    51b0:	01000000 	.word	0x01000000
    51b4:	00000001 	.word	0x00000001
    51b8:	01010100 	.word	0x01010100
    51bc:	01010101 	.word	0x01010101
    51c0:	01010101 	.word	0x01010101
    51c4:	00000001 	.word	0x00000001
    51c8:	00010100 	.word	0x00010100
    51cc:	00000000 	.word	0x00000000
    51d0:	11131516 	.word	0x11131516
    51d4:	0d101110 	.word	0x0d101110
    51d8:	0d0e0f0c 	.word	0x0d0e0f0c
    51dc:	0506070c 	.word	0x0506070c
    51e0:	01020304 	.word	0x01020304
    51e4:	05060700 	.word	0x05060700
    51e8:	03080904 	.word	0x03080904
    51ec:	00000002 	.word	0x00000002
	...
    51f8:	01010000 	.word	0x01010000
    51fc:	01010000 	.word	0x01010000
    5200:	00000101 	.word	0x00000101
    5204:	01010000 	.word	0x01010000
    5208:	00000101 	.word	0x00000101
    520c:	00000000 	.word	0x00000000
    5210:	03171819 	.word	0x03171819
    5214:	0e0f1213 	.word	0x0e0f1213
    5218:	0a0b1415 	.word	0x0a0b1415
    521c:	0e0f1617 	.word	0x0e0f1617
    5220:	12130c0d 	.word	0x12130c0d
    5224:	16171011 	.word	0x16171011
    5228:	1f081e1f 	.word	0x1f081e1f
    522c:	0000001e 	.word	0x0000001e
    5230:	2e2f2e2e 	.word	0x2e2f2e2e
    5234:	2e2e2f2e 	.word	0x2e2e2f2e
    5238:	4950472f 	.word	0x4950472f
    523c:	41535f4f 	.word	0x41535f4f
    5240:	3132444d 	.word	0x3132444d
    5244:	5345545f 	.word	0x5345545f
    5248:	50472f54 	.word	0x50472f54
    524c:	535f4f49 	.word	0x535f4f49
    5250:	32444d41 	.word	0x32444d41
    5254:	45545f31 	.word	0x45545f31
    5258:	682f5453 	.word	0x682f5453
    525c:	702f6c70 	.word	0x702f6c70
    5260:	2f74726f 	.word	0x2f74726f
    5264:	5f6c7068 	.word	0x5f6c7068
    5268:	6f697067 	.word	0x6f697067
    526c:	7361625f 	.word	0x7361625f
    5270:	00682e65 	.word	0x00682e65

00005274 <defaultParameters>:
    5274:	02bc02ee 02ee07d0 07d00320 450de000     ........ ......E
    5284:	400dde6a 41400000 429a0000 40c00000     j..@..@A...B...@
    5294:	41400000 42a40000 430c0000 43020000     ..@A...B...C...C
    52a4:	3e7ed289 44048000 44048000 41a00000     ..~>...D...D...A
    52b4:	41f00000 3f800000 451c4000 453b8000     ...A...?.@.E..;E
    52c4:	00001f40 00001f40 00001f40 00001f40     @...@...@...@...
    52d4:	00001388 00001388 00000064 00000064     ........d...d...
    52e4:	41000000 428c0000 00000000              ...A...B....

000052f0 <defaultPreferences>:
    52f0:	000000fa 00000032 682f2e2e 732f6c61     ....2...../hal/s
    5300:	682f6372 695f6c61 00632e6f              rc/hal_io.c.

0000530c <_global_impure_ptr>:
    530c:	20000058                                X.. 

00005310 <_init>:
    5310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5312:	46c0      	nop			; (mov r8, r8)
    5314:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5316:	bc08      	pop	{r3}
    5318:	469e      	mov	lr, r3
    531a:	4770      	bx	lr

0000531c <__init_array_start>:
    531c:	00005059 	.word	0x00005059

00005320 <__frame_dummy_init_array_entry>:
    5320:	000000dd 000004a5 00002b5d 00003ea9     ........]+...>..
    5330:	000040b1 00004911                       .@...I..

00005338 <_fini>:
    5338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    533a:	46c0      	nop			; (mov r8, r8)
    533c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    533e:	bc08      	pop	{r3}
    5340:	469e      	mov	lr, r3
    5342:	4770      	bx	lr

00005344 <__fini_array_start>:
    5344:	000000b5 	.word	0x000000b5
