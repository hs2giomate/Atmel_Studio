
MemoriesTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021d8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000021d8  000021d8  000121d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000484  20000000  000021e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000001a4  20000484  00002664  00020484  2**2
                  ALLOC
  4 .stack        00002000  20000628  00002808  00020484  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020484  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000204ac  2**0
                  CONTENTS, READONLY
  7 .debug_info   00028142  00000000  00000000  00020505  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003297  00000000  00000000  00048647  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cfd3  00000000  00000000  0004b8de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000bb0  00000000  00000000  000588b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001078  00000000  00000000  00059461  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001be2c  00000000  00000000  0005a4d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ff6c  00000000  00000000  00076305  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008b574  00000000  00000000  00086271  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002224  00000000  00000000  001117e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 26 00 20 15 01 00 00 0d 02 00 00 0d 02 00 00     (&. ............
	...
      2c:	0d 02 00 00 00 00 00 00 00 00 00 00 0d 02 00 00     ................
      3c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      4c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      5c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      6c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      7c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 21 1c 00 00     ............!...
      8c:	59 1c 00 00 6d 1c 00 00 0d 02 00 00 81 1c 00 00     Y...m...........
      9c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      ac:	0d 02 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000484 	.word	0x20000484
      d4:	00000000 	.word	0x00000000
      d8:	000021e0 	.word	0x000021e0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000488 	.word	0x20000488
     108:	000021e0 	.word	0x000021e0
     10c:	000021e0 	.word	0x000021e0
     110:	00000000 	.word	0x00000000

00000114 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     11a:	4b2f      	ldr	r3, [pc, #188]	; (1d8 <Reset_Handler+0xc4>)
     11c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     11e:	4b2f      	ldr	r3, [pc, #188]	; (1dc <Reset_Handler+0xc8>)
     120:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     122:	687a      	ldr	r2, [r7, #4]
     124:	683b      	ldr	r3, [r7, #0]
     126:	429a      	cmp	r2, r3
     128:	d00c      	beq.n	144 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     12a:	e007      	b.n	13c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     12c:	683b      	ldr	r3, [r7, #0]
     12e:	1d1a      	adds	r2, r3, #4
     130:	603a      	str	r2, [r7, #0]
     132:	687a      	ldr	r2, [r7, #4]
     134:	1d11      	adds	r1, r2, #4
     136:	6079      	str	r1, [r7, #4]
     138:	6812      	ldr	r2, [r2, #0]
     13a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     13c:	683a      	ldr	r2, [r7, #0]
     13e:	4b28      	ldr	r3, [pc, #160]	; (1e0 <Reset_Handler+0xcc>)
     140:	429a      	cmp	r2, r3
     142:	d3f3      	bcc.n	12c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     144:	4b27      	ldr	r3, [pc, #156]	; (1e4 <Reset_Handler+0xd0>)
     146:	603b      	str	r3, [r7, #0]
     148:	e004      	b.n	154 <Reset_Handler+0x40>
                *pDest++ = 0;
     14a:	683b      	ldr	r3, [r7, #0]
     14c:	1d1a      	adds	r2, r3, #4
     14e:	603a      	str	r2, [r7, #0]
     150:	2200      	movs	r2, #0
     152:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     154:	683a      	ldr	r2, [r7, #0]
     156:	4b24      	ldr	r3, [pc, #144]	; (1e8 <Reset_Handler+0xd4>)
     158:	429a      	cmp	r2, r3
     15a:	d3f6      	bcc.n	14a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xd8>)
     15e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     160:	4b23      	ldr	r3, [pc, #140]	; (1f0 <Reset_Handler+0xdc>)
     162:	687a      	ldr	r2, [r7, #4]
     164:	21ff      	movs	r1, #255	; 0xff
     166:	438a      	bics	r2, r1
     168:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16a:	4a22      	ldr	r2, [pc, #136]	; (1f4 <Reset_Handler+0xe0>)
     16c:	2390      	movs	r3, #144	; 0x90
     16e:	005b      	lsls	r3, r3, #1
     170:	2102      	movs	r1, #2
     172:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     174:	4a20      	ldr	r2, [pc, #128]	; (1f8 <Reset_Handler+0xe4>)
     176:	78d3      	ldrb	r3, [r2, #3]
     178:	2103      	movs	r1, #3
     17a:	438b      	bics	r3, r1
     17c:	1c19      	adds	r1, r3, #0
     17e:	2302      	movs	r3, #2
     180:	430b      	orrs	r3, r1
     182:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     184:	4a1c      	ldr	r2, [pc, #112]	; (1f8 <Reset_Handler+0xe4>)
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	210c      	movs	r1, #12
     18a:	438b      	bics	r3, r1
     18c:	1c19      	adds	r1, r3, #0
     18e:	2308      	movs	r3, #8
     190:	430b      	orrs	r3, r1
     192:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     194:	4a19      	ldr	r2, [pc, #100]	; (1fc <Reset_Handler+0xe8>)
     196:	7b93      	ldrb	r3, [r2, #14]
     198:	2130      	movs	r1, #48	; 0x30
     19a:	438b      	bics	r3, r1
     19c:	1c19      	adds	r1, r3, #0
     19e:	2320      	movs	r3, #32
     1a0:	430b      	orrs	r3, r1
     1a2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a4:	4a15      	ldr	r2, [pc, #84]	; (1fc <Reset_Handler+0xe8>)
     1a6:	7b93      	ldrb	r3, [r2, #14]
     1a8:	210c      	movs	r1, #12
     1aa:	438b      	bics	r3, r1
     1ac:	1c19      	adds	r1, r3, #0
     1ae:	2308      	movs	r3, #8
     1b0:	430b      	orrs	r3, r1
     1b2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b4:	4a11      	ldr	r2, [pc, #68]	; (1fc <Reset_Handler+0xe8>)
     1b6:	7b93      	ldrb	r3, [r2, #14]
     1b8:	2103      	movs	r1, #3
     1ba:	438b      	bics	r3, r1
     1bc:	1c19      	adds	r1, r3, #0
     1be:	2302      	movs	r3, #2
     1c0:	430b      	orrs	r3, r1
     1c2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c4:	4a0e      	ldr	r2, [pc, #56]	; (200 <Reset_Handler+0xec>)
     1c6:	6853      	ldr	r3, [r2, #4]
     1c8:	2180      	movs	r1, #128	; 0x80
     1ca:	430b      	orrs	r3, r1
     1cc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ce:	4b0d      	ldr	r3, [pc, #52]	; (204 <Reset_Handler+0xf0>)
     1d0:	4798      	blx	r3

        /* Branch to main function */
        main();
     1d2:	4b0d      	ldr	r3, [pc, #52]	; (208 <Reset_Handler+0xf4>)
     1d4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xc2>
     1d8:	000021e0 	.word	0x000021e0
     1dc:	20000000 	.word	0x20000000
     1e0:	20000484 	.word	0x20000484
     1e4:	20000484 	.word	0x20000484
     1e8:	20000628 	.word	0x20000628
     1ec:	00000000 	.word	0x00000000
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	41007000 	.word	0x41007000
     1f8:	41005000 	.word	0x41005000
     1fc:	41004800 	.word	0x41004800
     200:	41004000 	.word	0x41004000
     204:	00001e21 	.word	0x00001e21
     208:	00000b5d 	.word	0x00000b5d

0000020c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     20c:	b580      	push	{r7, lr}
     20e:	af00      	add	r7, sp, #0
        while (1) {
     210:	e7fe      	b.n	210 <Dummy_Handler+0x4>

00000212 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     212:	b580      	push	{r7, lr}
     214:	b084      	sub	sp, #16
     216:	af00      	add	r7, sp, #0
     218:	60f8      	str	r0, [r7, #12]
     21a:	607a      	str	r2, [r7, #4]
     21c:	230b      	movs	r3, #11
     21e:	18fb      	adds	r3, r7, r3
     220:	1c0a      	adds	r2, r1, #0
     222:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     224:	230b      	movs	r3, #11
     226:	18fb      	adds	r3, r7, r3
     228:	781b      	ldrb	r3, [r3, #0]
     22a:	68fa      	ldr	r2, [r7, #12]
     22c:	01db      	lsls	r3, r3, #7
     22e:	18d3      	adds	r3, r2, r3
     230:	3318      	adds	r3, #24
     232:	687a      	ldr	r2, [r7, #4]
     234:	601a      	str	r2, [r3, #0]
}
     236:	46c0      	nop			; (mov r8, r8)
     238:	46bd      	mov	sp, r7
     23a:	b004      	add	sp, #16
     23c:	bd80      	pop	{r7, pc}

0000023e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     23e:	b580      	push	{r7, lr}
     240:	b084      	sub	sp, #16
     242:	af00      	add	r7, sp, #0
     244:	60f8      	str	r0, [r7, #12]
     246:	607a      	str	r2, [r7, #4]
     248:	230b      	movs	r3, #11
     24a:	18fb      	adds	r3, r7, r3
     24c:	1c0a      	adds	r2, r1, #0
     24e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     250:	230b      	movs	r3, #11
     252:	18fb      	adds	r3, r7, r3
     254:	781b      	ldrb	r3, [r3, #0]
     256:	68fa      	ldr	r2, [r7, #12]
     258:	01db      	lsls	r3, r3, #7
     25a:	18d3      	adds	r3, r2, r3
     25c:	3314      	adds	r3, #20
     25e:	687a      	ldr	r2, [r7, #4]
     260:	601a      	str	r2, [r3, #0]
}
     262:	46c0      	nop			; (mov r8, r8)
     264:	46bd      	mov	sp, r7
     266:	b004      	add	sp, #16
     268:	bd80      	pop	{r7, pc}
	...

0000026c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     26c:	b580      	push	{r7, lr}
     26e:	b082      	sub	sp, #8
     270:	af00      	add	r7, sp, #0
     272:	6039      	str	r1, [r7, #0]
     274:	0011      	movs	r1, r2
     276:	1dfb      	adds	r3, r7, #7
     278:	1c02      	adds	r2, r0, #0
     27a:	701a      	strb	r2, [r3, #0]
     27c:	1dbb      	adds	r3, r7, #6
     27e:	1c0a      	adds	r2, r1, #0
     280:	701a      	strb	r2, [r3, #0]
	if (level) {
     282:	1dbb      	adds	r3, r7, #6
     284:	781b      	ldrb	r3, [r3, #0]
     286:	2b00      	cmp	r3, #0
     288:	d008      	beq.n	29c <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     28a:	683a      	ldr	r2, [r7, #0]
     28c:	1dfb      	adds	r3, r7, #7
     28e:	7819      	ldrb	r1, [r3, #0]
     290:	23c0      	movs	r3, #192	; 0xc0
     292:	05db      	lsls	r3, r3, #23
     294:	0018      	movs	r0, r3
     296:	4b07      	ldr	r3, [pc, #28]	; (2b4 <_gpio_set_level+0x48>)
     298:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     29a:	e007      	b.n	2ac <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     29c:	683a      	ldr	r2, [r7, #0]
     29e:	1dfb      	adds	r3, r7, #7
     2a0:	7819      	ldrb	r1, [r3, #0]
     2a2:	23c0      	movs	r3, #192	; 0xc0
     2a4:	05db      	lsls	r3, r3, #23
     2a6:	0018      	movs	r0, r3
     2a8:	4b03      	ldr	r3, [pc, #12]	; (2b8 <_gpio_set_level+0x4c>)
     2aa:	4798      	blx	r3
}
     2ac:	46c0      	nop			; (mov r8, r8)
     2ae:	46bd      	mov	sp, r7
     2b0:	b002      	add	sp, #8
     2b2:	bd80      	pop	{r7, pc}
     2b4:	00000213 	.word	0x00000213
     2b8:	0000023f 	.word	0x0000023f

000002bc <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     2bc:	b580      	push	{r7, lr}
     2be:	b082      	sub	sp, #8
     2c0:	af00      	add	r7, sp, #0
     2c2:	0002      	movs	r2, r0
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	701a      	strb	r2, [r3, #0]
     2c8:	1dbb      	adds	r3, r7, #6
     2ca:	1c0a      	adds	r2, r1, #0
     2cc:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     2ce:	1dfb      	adds	r3, r7, #7
     2d0:	781b      	ldrb	r3, [r3, #0]
     2d2:	115b      	asrs	r3, r3, #5
     2d4:	b2d8      	uxtb	r0, r3
     2d6:	1dfb      	adds	r3, r7, #7
     2d8:	781b      	ldrb	r3, [r3, #0]
     2da:	001a      	movs	r2, r3
     2dc:	231f      	movs	r3, #31
     2de:	4013      	ands	r3, r2
     2e0:	2201      	movs	r2, #1
     2e2:	409a      	lsls	r2, r3
     2e4:	0011      	movs	r1, r2
     2e6:	1dbb      	adds	r3, r7, #6
     2e8:	781b      	ldrb	r3, [r3, #0]
     2ea:	001a      	movs	r2, r3
     2ec:	4b02      	ldr	r3, [pc, #8]	; (2f8 <gpio_set_pin_level+0x3c>)
     2ee:	4798      	blx	r3
}
     2f0:	46c0      	nop			; (mov r8, r8)
     2f2:	46bd      	mov	sp, r7
     2f4:	b002      	add	sp, #8
     2f6:	bd80      	pop	{r7, pc}
     2f8:	0000026d 	.word	0x0000026d

000002fc <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryAddress=flashMemory;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
     2fc:	b580      	push	{r7, lr}
     2fe:	b082      	sub	sp, #8
     300:	af00      	add	r7, sp, #0
     302:	6078      	str	r0, [r7, #4]
     304:	6039      	str	r1, [r7, #0]
     306:	687b      	ldr	r3, [r7, #4]
     308:	3390      	adds	r3, #144	; 0x90
     30a:	0018      	movs	r0, r3
     30c:	4b0b      	ldr	r3, [pc, #44]	; (33c <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x40>)
     30e:	4798      	blx	r3
{
	appParameters=defaultParameters;
     310:	687b      	ldr	r3, [r7, #4]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x44>)
     314:	3304      	adds	r3, #4
     316:	0011      	movs	r1, r2
     318:	227c      	movs	r2, #124	; 0x7c
     31a:	0018      	movs	r0, r3
     31c:	4b09      	ldr	r3, [pc, #36]	; (344 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x48>)
     31e:	4798      	blx	r3
	spi_descriptor=spi_des;
     320:	687b      	ldr	r3, [r7, #4]
     322:	218c      	movs	r1, #140	; 0x8c
     324:	683a      	ldr	r2, [r7, #0]
     326:	505a      	str	r2, [r3, r1]
	memoryAddress=flashMemory;
     328:	4b07      	ldr	r3, [pc, #28]	; (348 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x4c>)
     32a:	681a      	ldr	r2, [r3, #0]
     32c:	687b      	ldr	r3, [r7, #4]
     32e:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
     330:	687b      	ldr	r3, [r7, #4]
     332:	0018      	movs	r0, r3
     334:	46bd      	mov	sp, r7
     336:	b002      	add	sp, #8
     338:	bd80      	pop	{r7, pc}
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	00000c75 	.word	0x00000c75
     340:	00002078 	.word	0x00002078
     344:	00001e69 	.word	0x00001e69
     348:	200004a0 	.word	0x200004a0

0000034c <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
     34c:	b580      	push	{r7, lr}
     34e:	b082      	sub	sp, #8
     350:	af00      	add	r7, sp, #0
     352:	6078      	str	r0, [r7, #4]
     354:	687b      	ldr	r3, [r7, #4]
     356:	3390      	adds	r3, #144	; 0x90
     358:	0018      	movs	r0, r3
     35a:	4b03      	ldr	r3, [pc, #12]	; (368 <_ZN16FlashMemoryClassD1Ev+0x1c>)
     35c:	4798      	blx	r3
{
} //~FlashMemoryClass
     35e:	687b      	ldr	r3, [r7, #4]
     360:	0018      	movs	r0, r3
     362:	46bd      	mov	sp, r7
     364:	b002      	add	sp, #8
     366:	bd80      	pop	{r7, pc}
     368:	00000c91 	.word	0x00000c91

0000036c <_ZN16FlashMemoryClass4InitEv>:
	flashOpen();
	//WriteStatusRegister(kFlashInitialStatus);
	flashClose();
	
}
void	FlashMemoryClass::Init(void){
     36c:	b580      	push	{r7, lr}
     36e:	b082      	sub	sp, #8
     370:	af00      	add	r7, sp, #0
     372:	6078      	str	r0, [r7, #4]
	spi.SetDescriptor(spi_descriptor);
     374:	687b      	ldr	r3, [r7, #4]
     376:	3390      	adds	r3, #144	; 0x90
     378:	0018      	movs	r0, r3
     37a:	687b      	ldr	r3, [r7, #4]
     37c:	228c      	movs	r2, #140	; 0x8c
     37e:	589b      	ldr	r3, [r3, r2]
     380:	0019      	movs	r1, r3
     382:	4b0f      	ldr	r3, [pc, #60]	; (3c0 <_ZN16FlashMemoryClass4InitEv+0x54>)
     384:	4798      	blx	r3
	spi.init();
     386:	687b      	ldr	r3, [r7, #4]
     388:	3390      	adds	r3, #144	; 0x90
     38a:	0018      	movs	r0, r3
     38c:	4b0d      	ldr	r3, [pc, #52]	; (3c4 <_ZN16FlashMemoryClass4InitEv+0x58>)
     38e:	4798      	blx	r3


	memoryAddress=0x00;
     390:	687b      	ldr	r3, [r7, #4]
     392:	2200      	movs	r2, #0
     394:	601a      	str	r2, [r3, #0]
	
	flashOpen();
     396:	687b      	ldr	r3, [r7, #4]
     398:	0018      	movs	r0, r3
     39a:	4b0b      	ldr	r3, [pc, #44]	; (3c8 <_ZN16FlashMemoryClass4InitEv+0x5c>)
     39c:	4798      	blx	r3
//	WriteStatusRegister(0x02);
//	SoftwareReset();
//	ChipErase();
	status=ReadStatusRegister();
     39e:	687b      	ldr	r3, [r7, #4]
     3a0:	0018      	movs	r0, r3
     3a2:	4b0a      	ldr	r3, [pc, #40]	; (3cc <_ZN16FlashMemoryClass4InitEv+0x60>)
     3a4:	4798      	blx	r3
     3a6:	0003      	movs	r3, r0
     3a8:	0019      	movs	r1, r3
     3aa:	687b      	ldr	r3, [r7, #4]
     3ac:	22bc      	movs	r2, #188	; 0xbc
     3ae:	5499      	strb	r1, [r3, r2]
//	functionsRegister=ReadFunctionRegister();
	
	flashClose();
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	0018      	movs	r0, r3
     3b4:	4b06      	ldr	r3, [pc, #24]	; (3d0 <_ZN16FlashMemoryClass4InitEv+0x64>)
     3b6:	4798      	blx	r3
	
}
     3b8:	46c0      	nop			; (mov r8, r8)
     3ba:	46bd      	mov	sp, r7
     3bc:	b002      	add	sp, #8
     3be:	bd80      	pop	{r7, pc}
     3c0:	00000ce5 	.word	0x00000ce5
     3c4:	00000ca5 	.word	0x00000ca5
     3c8:	000003d5 	.word	0x000003d5
     3cc:	0000072d 	.word	0x0000072d
     3d0:	000007c1 	.word	0x000007c1

000003d4 <_ZN16FlashMemoryClass9flashOpenEv>:
}



void FlashMemoryClass::flashOpen(void)
{
     3d4:	b580      	push	{r7, lr}
     3d6:	b082      	sub	sp, #8
     3d8:	af00      	add	r7, sp, #0
     3da:	6078      	str	r0, [r7, #4]
	garbage=spi.enable();
     3dc:	687b      	ldr	r3, [r7, #4]
     3de:	3390      	adds	r3, #144	; 0x90
     3e0:	0018      	movs	r0, r3
     3e2:	4b05      	ldr	r3, [pc, #20]	; (3f8 <_ZN16FlashMemoryClass9flashOpenEv+0x24>)
     3e4:	4798      	blx	r3
     3e6:	0003      	movs	r3, r0
     3e8:	0019      	movs	r1, r3
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	2280      	movs	r2, #128	; 0x80
     3ee:	5099      	str	r1, [r3, r2]
	
	
}
     3f0:	46c0      	nop			; (mov r8, r8)
     3f2:	46bd      	mov	sp, r7
     3f4:	b002      	add	sp, #8
     3f6:	bd80      	pop	{r7, pc}
     3f8:	00000d09 	.word	0x00000d09

000003fc <_ZN16FlashMemoryClass12CE_Low_FlashEv>:
	spi.read((uint8_t *)dest, (uint16_t)size);
	CE_High_Flash();
	return (uint8_t)src;
}
void FlashMemoryClass::CE_Low_Flash(void)
{
     3fc:	b580      	push	{r7, lr}
     3fe:	b082      	sub	sp, #8
     400:	af00      	add	r7, sp, #0
     402:	6078      	str	r0, [r7, #4]
	garbage=0;
     404:	687b      	ldr	r3, [r7, #4]
     406:	2280      	movs	r2, #128	; 0x80
     408:	2100      	movs	r1, #0
     40a:	5099      	str	r1, [r3, r2]
		gpio_set_pin_level(CS_FLASH,
		// <y> Initial level
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);
     40c:	2100      	movs	r1, #0
     40e:	201b      	movs	r0, #27
     410:	4b04      	ldr	r3, [pc, #16]	; (424 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
     412:	4798      	blx	r3
		gpio_set_pin_level(CS_FRAM,true);
     414:	2101      	movs	r1, #1
     416:	201c      	movs	r0, #28
     418:	4b02      	ldr	r3, [pc, #8]	; (424 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
     41a:	4798      	blx	r3
}
     41c:	46c0      	nop			; (mov r8, r8)
     41e:	46bd      	mov	sp, r7
     420:	b002      	add	sp, #8
     422:	bd80      	pop	{r7, pc}
     424:	000002bd 	.word	0x000002bd

00000428 <_ZN16FlashMemoryClass13CE_High_FlashEv>:

void FlashMemoryClass::CE_High_Flash(void)
{
     428:	b580      	push	{r7, lr}
     42a:	b082      	sub	sp, #8
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
	garbage=0;
     430:	687b      	ldr	r3, [r7, #4]
     432:	2280      	movs	r2, #128	; 0x80
     434:	2100      	movs	r1, #0
     436:	5099      	str	r1, [r3, r2]
	gpio_set_pin_level(CS_FLASH,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
     438:	2101      	movs	r1, #1
     43a:	201b      	movs	r0, #27
     43c:	4b04      	ldr	r3, [pc, #16]	; (450 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
     43e:	4798      	blx	r3
	gpio_set_pin_level(CS_FRAM,true);
     440:	2101      	movs	r1, #1
     442:	201c      	movs	r0, #28
     444:	4b02      	ldr	r3, [pc, #8]	; (450 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
     446:	4798      	blx	r3
}
     448:	46c0      	nop			; (mov r8, r8)
     44a:	46bd      	mov	sp, r7
     44c:	b002      	add	sp, #8
     44e:	bd80      	pop	{r7, pc}
     450:	000002bd 	.word	0x000002bd

00000454 <_ZN16FlashMemoryClass9Send_ByteEh>:
uint8_t FlashMemoryClass::Send_Byte(uint8_t byte)
{
     454:	b580      	push	{r7, lr}
     456:	b082      	sub	sp, #8
     458:	af00      	add	r7, sp, #0
     45a:	6078      	str	r0, [r7, #4]
     45c:	000a      	movs	r2, r1
     45e:	1cfb      	adds	r3, r7, #3
     460:	701a      	strb	r2, [r3, #0]
	//WaitBusy();
	spi.write(&byte,1);
     462:	687b      	ldr	r3, [r7, #4]
     464:	3390      	adds	r3, #144	; 0x90
     466:	1cf9      	adds	r1, r7, #3
     468:	2201      	movs	r2, #1
     46a:	0018      	movs	r0, r3
     46c:	4b03      	ldr	r3, [pc, #12]	; (47c <_ZN16FlashMemoryClass9Send_ByteEh+0x28>)
     46e:	4798      	blx	r3
	return byte;
     470:	1cfb      	adds	r3, r7, #3
     472:	781b      	ldrb	r3, [r3, #0]
}
     474:	0018      	movs	r0, r3
     476:	46bd      	mov	sp, r7
     478:	b002      	add	sp, #8
     47a:	bd80      	pop	{r7, pc}
     47c:	00000d45 	.word	0x00000d45

00000480 <_ZN16FlashMemoryClass8Get_ByteEv>:

uint8_t FlashMemoryClass::Get_Byte(void)
{
     480:	b580      	push	{r7, lr}
     482:	b084      	sub	sp, #16
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	//WaitBusy();
	spi.read(&byte,1);
     488:	687b      	ldr	r3, [r7, #4]
     48a:	3390      	adds	r3, #144	; 0x90
     48c:	220f      	movs	r2, #15
     48e:	18b9      	adds	r1, r7, r2
     490:	2201      	movs	r2, #1
     492:	0018      	movs	r0, r3
     494:	4b04      	ldr	r3, [pc, #16]	; (4a8 <_ZN16FlashMemoryClass8Get_ByteEv+0x28>)
     496:	4798      	blx	r3
	
	return byte;
     498:	230f      	movs	r3, #15
     49a:	18fb      	adds	r3, r7, r3
     49c:	781b      	ldrb	r3, [r3, #0]
}
     49e:	0018      	movs	r0, r3
     4a0:	46bd      	mov	sp, r7
     4a2:	b004      	add	sp, #16
     4a4:	bd80      	pop	{r7, pc}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	00000d85 	.word	0x00000d85

000004ac <_ZN16FlashMemoryClass4WRENEv>:

void FlashMemoryClass::WREN(void)
{
     4ac:	b580      	push	{r7, lr}
     4ae:	b082      	sub	sp, #8
     4b0:	af00      	add	r7, sp, #0
     4b2:	6078      	str	r0, [r7, #4]
	do
	{
		CE_Low_Flash();			// enable device
     4b4:	687b      	ldr	r3, [r7, #4]
     4b6:	0018      	movs	r0, r3
     4b8:	4b0e      	ldr	r3, [pc, #56]	; (4f4 <_ZN16FlashMemoryClass4WRENEv+0x48>)
     4ba:	4798      	blx	r3
		Send_Byte(kFlashWREnable);	// send WREN command
     4bc:	687b      	ldr	r3, [r7, #4]
     4be:	2106      	movs	r1, #6
     4c0:	0018      	movs	r0, r3
     4c2:	4b0d      	ldr	r3, [pc, #52]	; (4f8 <_ZN16FlashMemoryClass4WRENEv+0x4c>)
     4c4:	4798      	blx	r3
		//WaitBusy();
		CE_High_Flash();
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	0018      	movs	r0, r3
     4ca:	4b0c      	ldr	r3, [pc, #48]	; (4fc <_ZN16FlashMemoryClass4WRENEv+0x50>)
     4cc:	4798      	blx	r3
		status=ReadStatusRegister();
     4ce:	687b      	ldr	r3, [r7, #4]
     4d0:	0018      	movs	r0, r3
     4d2:	4b0b      	ldr	r3, [pc, #44]	; (500 <_ZN16FlashMemoryClass4WRENEv+0x54>)
     4d4:	4798      	blx	r3
     4d6:	0003      	movs	r3, r0
     4d8:	0019      	movs	r1, r3
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	22bc      	movs	r2, #188	; 0xbc
     4de:	5499      	strb	r1, [r3, r2]
	} while ((status&&(0x02))==0);
     4e0:	687b      	ldr	r3, [r7, #4]
     4e2:	22bc      	movs	r2, #188	; 0xbc
     4e4:	5c9b      	ldrb	r3, [r3, r2]
     4e6:	2b00      	cmp	r3, #0
     4e8:	d100      	bne.n	4ec <_ZN16FlashMemoryClass4WRENEv+0x40>
	do
     4ea:	e7e3      	b.n	4b4 <_ZN16FlashMemoryClass4WRENEv+0x8>

}
     4ec:	46c0      	nop			; (mov r8, r8)
     4ee:	46bd      	mov	sp, r7
     4f0:	b002      	add	sp, #8
     4f2:	bd80      	pop	{r7, pc}
     4f4:	000003fd 	.word	0x000003fd
     4f8:	00000455 	.word	0x00000455
     4fc:	00000429 	.word	0x00000429
     500:	0000072d 	.word	0x0000072d

00000504 <_ZN16FlashMemoryClass4WRDIEv>:


void FlashMemoryClass::WRDI(void)
{
     504:	b580      	push	{r7, lr}
     506:	b082      	sub	sp, #8
     508:	af00      	add	r7, sp, #0
     50a:	6078      	str	r0, [r7, #4]
	CE_Low_Flash();			// enable device
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	0018      	movs	r0, r3
     510:	4b07      	ldr	r3, [pc, #28]	; (530 <_ZN16FlashMemoryClass4WRDIEv+0x2c>)
     512:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
     514:	687b      	ldr	r3, [r7, #4]
     516:	2104      	movs	r1, #4
     518:	0018      	movs	r0, r3
     51a:	4b06      	ldr	r3, [pc, #24]	; (534 <_ZN16FlashMemoryClass4WRDIEv+0x30>)
     51c:	4798      	blx	r3
//	WaitBusy();
	CE_High_Flash();			// disable device
     51e:	687b      	ldr	r3, [r7, #4]
     520:	0018      	movs	r0, r3
     522:	4b05      	ldr	r3, [pc, #20]	; (538 <_ZN16FlashMemoryClass4WRDIEv+0x34>)
     524:	4798      	blx	r3
	
}
     526:	46c0      	nop			; (mov r8, r8)
     528:	46bd      	mov	sp, r7
     52a:	b002      	add	sp, #8
     52c:	bd80      	pop	{r7, pc}
     52e:	46c0      	nop			; (mov r8, r8)
     530:	000003fd 	.word	0x000003fd
     534:	00000455 	.word	0x00000455
     538:	00000429 	.word	0x00000429

0000053c <_ZN16FlashMemoryClass10eraseFlashEmm>:
		return *srcPtr;

	}
	
void FlashMemoryClass::eraseFlash(uint32_t dest, uint32_t size)
	{
     53c:	b580      	push	{r7, lr}
     53e:	b086      	sub	sp, #24
     540:	af00      	add	r7, sp, #0
     542:	60f8      	str	r0, [r7, #12]
     544:	60b9      	str	r1, [r7, #8]
     546:	607a      	str	r2, [r7, #4]
	uint32_t	eraseRemaining = size;
     548:	687b      	ldr	r3, [r7, #4]
     54a:	617b      	str	r3, [r7, #20]
	uint32_t	eraseAddress = dest;
     54c:	68bb      	ldr	r3, [r7, #8]
     54e:	613b      	str	r3, [r7, #16]
	flashOpen();
     550:	68fb      	ldr	r3, [r7, #12]
     552:	0018      	movs	r0, r3
     554:	4b29      	ldr	r3, [pc, #164]	; (5fc <_ZN16FlashMemoryClass10eraseFlashEmm+0xc0>)
     556:	4798      	blx	r3
	while (eraseRemaining > 0)
     558:	697b      	ldr	r3, [r7, #20]
     55a:	2b00      	cmp	r3, #0
     55c:	d045      	beq.n	5ea <_ZN16FlashMemoryClass10eraseFlashEmm+0xae>
	{
	WREN();
     55e:	68fb      	ldr	r3, [r7, #12]
     560:	0018      	movs	r0, r3
     562:	4b27      	ldr	r3, [pc, #156]	; (600 <_ZN16FlashMemoryClass10eraseFlashEmm+0xc4>)
     564:	4798      	blx	r3
	if (eraseRemaining <= 4 * 1024)
     566:	697a      	ldr	r2, [r7, #20]
     568:	2380      	movs	r3, #128	; 0x80
     56a:	015b      	lsls	r3, r3, #5
     56c:	429a      	cmp	r2, r3
     56e:	d808      	bhi.n	582 <_ZN16FlashMemoryClass10eraseFlashEmm+0x46>
		{
		Sector_Erase(eraseAddress);
     570:	693a      	ldr	r2, [r7, #16]
     572:	68fb      	ldr	r3, [r7, #12]
     574:	0011      	movs	r1, r2
     576:	0018      	movs	r0, r3
     578:	4b22      	ldr	r3, [pc, #136]	; (604 <_ZN16FlashMemoryClass10eraseFlashEmm+0xc8>)
     57a:	4798      	blx	r3
		eraseRemaining = 0;
     57c:	2300      	movs	r3, #0
     57e:	617b      	str	r3, [r7, #20]
     580:	e02a      	b.n	5d8 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>
		}
	else if (eraseRemaining < 64 * 1024)
     582:	697b      	ldr	r3, [r7, #20]
     584:	4a20      	ldr	r2, [pc, #128]	; (608 <_ZN16FlashMemoryClass10eraseFlashEmm+0xcc>)
     586:	4293      	cmp	r3, r2
     588:	d811      	bhi.n	5ae <_ZN16FlashMemoryClass10eraseFlashEmm+0x72>
		{
		Sector_Erase(eraseAddress);
     58a:	693a      	ldr	r2, [r7, #16]
     58c:	68fb      	ldr	r3, [r7, #12]
     58e:	0011      	movs	r1, r2
     590:	0018      	movs	r0, r3
     592:	4b1c      	ldr	r3, [pc, #112]	; (604 <_ZN16FlashMemoryClass10eraseFlashEmm+0xc8>)
     594:	4798      	blx	r3
		eraseAddress += (4 * 1024);
     596:	693b      	ldr	r3, [r7, #16]
     598:	2280      	movs	r2, #128	; 0x80
     59a:	0152      	lsls	r2, r2, #5
     59c:	4694      	mov	ip, r2
     59e:	4463      	add	r3, ip
     5a0:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (4 * 1024);
     5a2:	697b      	ldr	r3, [r7, #20]
     5a4:	4a19      	ldr	r2, [pc, #100]	; (60c <_ZN16FlashMemoryClass10eraseFlashEmm+0xd0>)
     5a6:	4694      	mov	ip, r2
     5a8:	4463      	add	r3, ip
     5aa:	617b      	str	r3, [r7, #20]
     5ac:	e014      	b.n	5d8 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>
		}

	else if (eraseRemaining >= 64 * 1024)
     5ae:	697b      	ldr	r3, [r7, #20]
     5b0:	4a15      	ldr	r2, [pc, #84]	; (608 <_ZN16FlashMemoryClass10eraseFlashEmm+0xcc>)
     5b2:	4293      	cmp	r3, r2
     5b4:	d910      	bls.n	5d8 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>
		{
		Block_Erase_64K(eraseAddress);
     5b6:	693a      	ldr	r2, [r7, #16]
     5b8:	68fb      	ldr	r3, [r7, #12]
     5ba:	0011      	movs	r1, r2
     5bc:	0018      	movs	r0, r3
     5be:	4b14      	ldr	r3, [pc, #80]	; (610 <_ZN16FlashMemoryClass10eraseFlashEmm+0xd4>)
     5c0:	4798      	blx	r3
		eraseAddress += (64 * 1024);
     5c2:	693b      	ldr	r3, [r7, #16]
     5c4:	2280      	movs	r2, #128	; 0x80
     5c6:	0252      	lsls	r2, r2, #9
     5c8:	4694      	mov	ip, r2
     5ca:	4463      	add	r3, ip
     5cc:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (64 * 1024);
     5ce:	697b      	ldr	r3, [r7, #20]
     5d0:	4a10      	ldr	r2, [pc, #64]	; (614 <_ZN16FlashMemoryClass10eraseFlashEmm+0xd8>)
     5d2:	4694      	mov	ip, r2
     5d4:	4463      	add	r3, ip
     5d6:	617b      	str	r3, [r7, #20]
		Block_Erase_32K(eraseAddress);
		eraseAddress += (32 * 1024);
		eraseRemaining -= (32 * 1024);
		}
*/
	WaitBusy();
     5d8:	68fb      	ldr	r3, [r7, #12]
     5da:	0018      	movs	r0, r3
     5dc:	4b0e      	ldr	r3, [pc, #56]	; (618 <_ZN16FlashMemoryClass10eraseFlashEmm+0xdc>)
     5de:	4798      	blx	r3
	WRDI();
     5e0:	68fb      	ldr	r3, [r7, #12]
     5e2:	0018      	movs	r0, r3
     5e4:	4b0d      	ldr	r3, [pc, #52]	; (61c <_ZN16FlashMemoryClass10eraseFlashEmm+0xe0>)
     5e6:	4798      	blx	r3
	while (eraseRemaining > 0)
     5e8:	e7b6      	b.n	558 <_ZN16FlashMemoryClass10eraseFlashEmm+0x1c>
	}
	flashClose();
     5ea:	68fb      	ldr	r3, [r7, #12]
     5ec:	0018      	movs	r0, r3
     5ee:	4b0c      	ldr	r3, [pc, #48]	; (620 <_ZN16FlashMemoryClass10eraseFlashEmm+0xe4>)
     5f0:	4798      	blx	r3
}
     5f2:	46c0      	nop			; (mov r8, r8)
     5f4:	46bd      	mov	sp, r7
     5f6:	b006      	add	sp, #24
     5f8:	bd80      	pop	{r7, pc}
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	000003d5 	.word	0x000003d5
     600:	000004ad 	.word	0x000004ad
     604:	000007e9 	.word	0x000007e9
     608:	0000ffff 	.word	0x0000ffff
     60c:	fffff000 	.word	0xfffff000
     610:	00000625 	.word	0x00000625
     614:	ffff0000 	.word	0xffff0000
     618:	0000068d 	.word	0x0000068d
     61c:	00000505 	.word	0x00000505
     620:	000007c1 	.word	0x000007c1

00000624 <_ZN16FlashMemoryClass15Block_Erase_64KEm>:
	
void	FlashMemoryClass::Block_Erase_64K(uint32_t Dst){
     624:	b580      	push	{r7, lr}
     626:	b082      	sub	sp, #8
     628:	af00      	add	r7, sp, #0
     62a:	6078      	str	r0, [r7, #4]
     62c:	6039      	str	r1, [r7, #0]

		CE_Low_Flash();				// enable device
     62e:	687b      	ldr	r3, [r7, #4]
     630:	0018      	movs	r0, r3
     632:	4b13      	ldr	r3, [pc, #76]	; (680 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x5c>)
     634:	4798      	blx	r3
		Send_Byte(kFlash64KBlockErase);		// send Sector Erase command
     636:	687b      	ldr	r3, [r7, #4]
     638:	21d8      	movs	r1, #216	; 0xd8
     63a:	0018      	movs	r0, r3
     63c:	4b11      	ldr	r3, [pc, #68]	; (684 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x60>)
     63e:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
     640:	683b      	ldr	r3, [r7, #0]
     642:	0c1b      	lsrs	r3, r3, #16
     644:	b2da      	uxtb	r2, r3
     646:	687b      	ldr	r3, [r7, #4]
     648:	0011      	movs	r1, r2
     64a:	0018      	movs	r0, r3
     64c:	4b0d      	ldr	r3, [pc, #52]	; (684 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x60>)
     64e:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFF) >> 8));
     650:	683b      	ldr	r3, [r7, #0]
     652:	0a1b      	lsrs	r3, r3, #8
     654:	b2da      	uxtb	r2, r3
     656:	687b      	ldr	r3, [r7, #4]
     658:	0011      	movs	r1, r2
     65a:	0018      	movs	r0, r3
     65c:	4b09      	ldr	r3, [pc, #36]	; (684 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x60>)
     65e:	4798      	blx	r3
		Send_Byte(Dst & 0xFF);
     660:	683b      	ldr	r3, [r7, #0]
     662:	b2da      	uxtb	r2, r3
     664:	687b      	ldr	r3, [r7, #4]
     666:	0011      	movs	r1, r2
     668:	0018      	movs	r0, r3
     66a:	4b06      	ldr	r3, [pc, #24]	; (684 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x60>)
     66c:	4798      	blx	r3
		CE_High_Flash();				// disable device
     66e:	687b      	ldr	r3, [r7, #4]
     670:	0018      	movs	r0, r3
     672:	4b05      	ldr	r3, [pc, #20]	; (688 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x64>)
     674:	4798      	blx	r3
		
}
     676:	46c0      	nop			; (mov r8, r8)
     678:	46bd      	mov	sp, r7
     67a:	b002      	add	sp, #8
     67c:	bd80      	pop	{r7, pc}
     67e:	46c0      	nop			; (mov r8, r8)
     680:	000003fd 	.word	0x000003fd
     684:	00000455 	.word	0x00000455
     688:	00000429 	.word	0x00000429

0000068c <_ZN16FlashMemoryClass8WaitBusyEv>:
uint8_t  FlashMemoryClass::WaitBusy(void){
     68c:	b580      	push	{r7, lr}
     68e:	b082      	sub	sp, #8
     690:	af00      	add	r7, sp, #0
     692:	6078      	str	r0, [r7, #4]
	status = ReadStatusRegister();
     694:	687b      	ldr	r3, [r7, #4]
     696:	0018      	movs	r0, r3
     698:	4b0f      	ldr	r3, [pc, #60]	; (6d8 <_ZN16FlashMemoryClass8WaitBusyEv+0x4c>)
     69a:	4798      	blx	r3
     69c:	0003      	movs	r3, r0
     69e:	0019      	movs	r1, r3
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	22bc      	movs	r2, #188	; 0xbc
     6a4:	5499      	strb	r1, [r3, r2]
		
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
     6a6:	687b      	ldr	r3, [r7, #4]
     6a8:	22bc      	movs	r2, #188	; 0xbc
     6aa:	5c9b      	ldrb	r3, [r3, r2]
     6ac:	001a      	movs	r2, r3
     6ae:	2301      	movs	r3, #1
     6b0:	4013      	ands	r3, r2
     6b2:	d009      	beq.n	6c8 <_ZN16FlashMemoryClass8WaitBusyEv+0x3c>
			status = ReadStatusRegister();
     6b4:	687b      	ldr	r3, [r7, #4]
     6b6:	0018      	movs	r0, r3
     6b8:	4b07      	ldr	r3, [pc, #28]	; (6d8 <_ZN16FlashMemoryClass8WaitBusyEv+0x4c>)
     6ba:	4798      	blx	r3
     6bc:	0003      	movs	r3, r0
     6be:	0019      	movs	r1, r3
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	22bc      	movs	r2, #188	; 0xbc
     6c4:	5499      	strb	r1, [r3, r2]
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
     6c6:	e7ee      	b.n	6a6 <_ZN16FlashMemoryClass8WaitBusyEv+0x1a>
		}
		
		return	status;
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	22bc      	movs	r2, #188	; 0xbc
     6cc:	5c9b      	ldrb	r3, [r3, r2]
	}
     6ce:	0018      	movs	r0, r3
     6d0:	46bd      	mov	sp, r7
     6d2:	b002      	add	sp, #8
     6d4:	bd80      	pop	{r7, pc}
     6d6:	46c0      	nop			; (mov r8, r8)
     6d8:	0000072d 	.word	0x0000072d

000006dc <_ZN16FlashMemoryClass7IsReadyEv>:
bool  FlashMemoryClass::IsReady(void){
     6dc:	b580      	push	{r7, lr}
     6de:	b082      	sub	sp, #8
     6e0:	af00      	add	r7, sp, #0
     6e2:	6078      	str	r0, [r7, #4]
	
	flashOpen();
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	0018      	movs	r0, r3
     6e8:	4b0d      	ldr	r3, [pc, #52]	; (720 <_ZN16FlashMemoryClass7IsReadyEv+0x44>)
     6ea:	4798      	blx	r3
	status = ReadStatusRegister();
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	0018      	movs	r0, r3
     6f0:	4b0c      	ldr	r3, [pc, #48]	; (724 <_ZN16FlashMemoryClass7IsReadyEv+0x48>)
     6f2:	4798      	blx	r3
     6f4:	0003      	movs	r3, r0
     6f6:	0019      	movs	r1, r3
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	22bc      	movs	r2, #188	; 0xbc
     6fc:	5499      	strb	r1, [r3, r2]
	flashClose();
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	0018      	movs	r0, r3
     702:	4b09      	ldr	r3, [pc, #36]	; (728 <_ZN16FlashMemoryClass7IsReadyEv+0x4c>)
     704:	4798      	blx	r3
	return	(status&0x01)==0;
     706:	687b      	ldr	r3, [r7, #4]
     708:	22bc      	movs	r2, #188	; 0xbc
     70a:	5c9b      	ldrb	r3, [r3, r2]
     70c:	001a      	movs	r2, r3
     70e:	2301      	movs	r3, #1
     710:	4013      	ands	r3, r2
     712:	425a      	negs	r2, r3
     714:	4153      	adcs	r3, r2
     716:	b2db      	uxtb	r3, r3
}
     718:	0018      	movs	r0, r3
     71a:	46bd      	mov	sp, r7
     71c:	b002      	add	sp, #8
     71e:	bd80      	pop	{r7, pc}
     720:	000003d5 	.word	0x000003d5
     724:	0000072d 	.word	0x0000072d
     728:	000007c1 	.word	0x000007c1

0000072c <_ZN16FlashMemoryClass18ReadStatusRegisterEv>:
uint8_t  FlashMemoryClass::ReadStatusRegister(void){
     72c:	b580      	push	{r7, lr}
     72e:	b082      	sub	sp, #8
     730:	af00      	add	r7, sp, #0
     732:	6078      	str	r0, [r7, #4]
			status=ReadSingleRegister(kFlashReadSR);
     734:	687b      	ldr	r3, [r7, #4]
     736:	2105      	movs	r1, #5
     738:	0018      	movs	r0, r3
     73a:	4b07      	ldr	r3, [pc, #28]	; (758 <_ZN16FlashMemoryClass18ReadStatusRegisterEv+0x2c>)
     73c:	4798      	blx	r3
     73e:	0003      	movs	r3, r0
     740:	0019      	movs	r1, r3
     742:	687b      	ldr	r3, [r7, #4]
     744:	22bc      	movs	r2, #188	; 0xbc
     746:	5499      	strb	r1, [r3, r2]
		return status;
     748:	687b      	ldr	r3, [r7, #4]
     74a:	22bc      	movs	r2, #188	; 0xbc
     74c:	5c9b      	ldrb	r3, [r3, r2]
	}
     74e:	0018      	movs	r0, r3
     750:	46bd      	mov	sp, r7
     752:	b002      	add	sp, #8
     754:	bd80      	pop	{r7, pc}
     756:	46c0      	nop			; (mov r8, r8)
     758:	0000075d 	.word	0x0000075d

0000075c <_ZN16FlashMemoryClass18ReadSingleRegisterEh>:
uint8_t  FlashMemoryClass::ReadFunctionRegister(void){
			// disable device
		return ReadSingleRegister(kFlashReadFunction);
	}
	
uint8_t  FlashMemoryClass::ReadSingleRegister(uint8_t r){
     75c:	b590      	push	{r4, r7, lr}
     75e:	b085      	sub	sp, #20
     760:	af00      	add	r7, sp, #0
     762:	6078      	str	r0, [r7, #4]
     764:	000a      	movs	r2, r1
     766:	1cfb      	adds	r3, r7, #3
     768:	701a      	strb	r2, [r3, #0]
	uint8_t b = 0;
     76a:	230f      	movs	r3, #15
     76c:	18fb      	adds	r3, r7, r3
     76e:	2200      	movs	r2, #0
     770:	701a      	strb	r2, [r3, #0]
	CE_Low_Flash();			// enable device
     772:	687b      	ldr	r3, [r7, #4]
     774:	0018      	movs	r0, r3
     776:	4b0e      	ldr	r3, [pc, #56]	; (7b0 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x54>)
     778:	4798      	blx	r3
	Send_Byte(r);	// send RDSR command
     77a:	1cfb      	adds	r3, r7, #3
     77c:	781a      	ldrb	r2, [r3, #0]
     77e:	687b      	ldr	r3, [r7, #4]
     780:	0011      	movs	r1, r2
     782:	0018      	movs	r0, r3
     784:	4b0b      	ldr	r3, [pc, #44]	; (7b4 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x58>)
     786:	4798      	blx	r3
	b = Get_Byte();		/* receive byte */
     788:	230f      	movs	r3, #15
     78a:	18fc      	adds	r4, r7, r3
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	0018      	movs	r0, r3
     790:	4b09      	ldr	r3, [pc, #36]	; (7b8 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x5c>)
     792:	4798      	blx	r3
     794:	0003      	movs	r3, r0
     796:	7023      	strb	r3, [r4, #0]
	CE_High_Flash();			// disable device
     798:	687b      	ldr	r3, [r7, #4]
     79a:	0018      	movs	r0, r3
     79c:	4b07      	ldr	r3, [pc, #28]	; (7bc <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x60>)
     79e:	4798      	blx	r3
	return b;
     7a0:	230f      	movs	r3, #15
     7a2:	18fb      	adds	r3, r7, r3
     7a4:	781b      	ldrb	r3, [r3, #0]
}
     7a6:	0018      	movs	r0, r3
     7a8:	46bd      	mov	sp, r7
     7aa:	b005      	add	sp, #20
     7ac:	bd90      	pop	{r4, r7, pc}
     7ae:	46c0      	nop			; (mov r8, r8)
     7b0:	000003fd 	.word	0x000003fd
     7b4:	00000455 	.word	0x00000455
     7b8:	00000481 	.word	0x00000481
     7bc:	00000429 	.word	0x00000429

000007c0 <_ZN16FlashMemoryClass10flashCloseEv>:
	Send_Byte(byte);		/* receive byte */
	CE_High_Flash();			// disable device
	return byte;
}

void FlashMemoryClass::flashClose(void){
     7c0:	b580      	push	{r7, lr}
     7c2:	b082      	sub	sp, #8
     7c4:	af00      	add	r7, sp, #0
     7c6:	6078      	str	r0, [r7, #4]
	garbage=0;
     7c8:	687b      	ldr	r3, [r7, #4]
     7ca:	2280      	movs	r2, #128	; 0x80
     7cc:	2100      	movs	r1, #0
     7ce:	5099      	str	r1, [r3, r2]
		spi.disable();
     7d0:	687b      	ldr	r3, [r7, #4]
     7d2:	3390      	adds	r3, #144	; 0x90
     7d4:	0018      	movs	r0, r3
     7d6:	4b03      	ldr	r3, [pc, #12]	; (7e4 <_ZN16FlashMemoryClass10flashCloseEv+0x24>)
     7d8:	4798      	blx	r3
	}
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	46bd      	mov	sp, r7
     7de:	b002      	add	sp, #8
     7e0:	bd80      	pop	{r7, pc}
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	00000dc5 	.word	0x00000dc5

000007e8 <_ZN16FlashMemoryClass12Sector_EraseEm>:
void FlashMemoryClass::Sector_Erase(uint32_t Dst)
{
     7e8:	b580      	push	{r7, lr}
     7ea:	b082      	sub	sp, #8
     7ec:	af00      	add	r7, sp, #0
     7ee:	6078      	str	r0, [r7, #4]
     7f0:	6039      	str	r1, [r7, #0]
	CE_Low_Flash();				// enable device
     7f2:	687b      	ldr	r3, [r7, #4]
     7f4:	0018      	movs	r0, r3
     7f6:	4b13      	ldr	r3, [pc, #76]	; (844 <_ZN16FlashMemoryClass12Sector_EraseEm+0x5c>)
     7f8:	4798      	blx	r3
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
     7fa:	687b      	ldr	r3, [r7, #4]
     7fc:	2120      	movs	r1, #32
     7fe:	0018      	movs	r0, r3
     800:	4b11      	ldr	r3, [pc, #68]	; (848 <_ZN16FlashMemoryClass12Sector_EraseEm+0x60>)
     802:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
     804:	683b      	ldr	r3, [r7, #0]
     806:	0c1b      	lsrs	r3, r3, #16
     808:	b2da      	uxtb	r2, r3
     80a:	687b      	ldr	r3, [r7, #4]
     80c:	0011      	movs	r1, r2
     80e:	0018      	movs	r0, r3
     810:	4b0d      	ldr	r3, [pc, #52]	; (848 <_ZN16FlashMemoryClass12Sector_EraseEm+0x60>)
     812:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFF) >> 8));
     814:	683b      	ldr	r3, [r7, #0]
     816:	0a1b      	lsrs	r3, r3, #8
     818:	b2da      	uxtb	r2, r3
     81a:	687b      	ldr	r3, [r7, #4]
     81c:	0011      	movs	r1, r2
     81e:	0018      	movs	r0, r3
     820:	4b09      	ldr	r3, [pc, #36]	; (848 <_ZN16FlashMemoryClass12Sector_EraseEm+0x60>)
     822:	4798      	blx	r3
	Send_Byte(Dst & 0xFF);
     824:	683b      	ldr	r3, [r7, #0]
     826:	b2da      	uxtb	r2, r3
     828:	687b      	ldr	r3, [r7, #4]
     82a:	0011      	movs	r1, r2
     82c:	0018      	movs	r0, r3
     82e:	4b06      	ldr	r3, [pc, #24]	; (848 <_ZN16FlashMemoryClass12Sector_EraseEm+0x60>)
     830:	4798      	blx	r3
	CE_High_Flash();				// disable device
     832:	687b      	ldr	r3, [r7, #4]
     834:	0018      	movs	r0, r3
     836:	4b05      	ldr	r3, [pc, #20]	; (84c <_ZN16FlashMemoryClass12Sector_EraseEm+0x64>)
     838:	4798      	blx	r3
}
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	46bd      	mov	sp, r7
     83e:	b002      	add	sp, #8
     840:	bd80      	pop	{r7, pc}
     842:	46c0      	nop			; (mov r8, r8)
     844:	000003fd 	.word	0x000003fd
     848:	00000455 	.word	0x00000455
     84c:	00000429 	.word	0x00000429

00000850 <_ZN16FlashMemoryClass12WriteAddressEPhmm>:
	delay_ms(100);
	CE_Low_Flash();
	Send_Byte(0x99);
	CE_High_Flash();				// disable device
}
uint32_t	FlashMemoryClass::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
     850:	b580      	push	{r7, lr}
     852:	b086      	sub	sp, #24
     854:	af00      	add	r7, sp, #0
     856:	60f8      	str	r0, [r7, #12]
     858:	60b9      	str	r1, [r7, #8]
     85a:	607a      	str	r2, [r7, #4]
     85c:	603b      	str	r3, [r7, #0]
	uint32_t	w;
	while(!IsReady());
     85e:	68fb      	ldr	r3, [r7, #12]
     860:	0018      	movs	r0, r3
     862:	4b30      	ldr	r3, [pc, #192]	; (924 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd4>)
     864:	4798      	blx	r3
     866:	0003      	movs	r3, r0
     868:	001a      	movs	r2, r3
     86a:	2301      	movs	r3, #1
     86c:	4053      	eors	r3, r2
     86e:	b2db      	uxtb	r3, r3
     870:	2b00      	cmp	r3, #0
     872:	d000      	beq.n	876 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x26>
     874:	e7f3      	b.n	85e <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe>
	flashOpen();
     876:	68fb      	ldr	r3, [r7, #12]
     878:	0018      	movs	r0, r3
     87a:	4b2b      	ldr	r3, [pc, #172]	; (928 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd8>)
     87c:	4798      	blx	r3
	WREN();
     87e:	68fb      	ldr	r3, [r7, #12]
     880:	0018      	movs	r0, r3
     882:	4b2a      	ldr	r3, [pc, #168]	; (92c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xdc>)
     884:	4798      	blx	r3
	CE_Low_Flash();
     886:	68fb      	ldr	r3, [r7, #12]
     888:	0018      	movs	r0, r3
     88a:	4b29      	ldr	r3, [pc, #164]	; (930 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe0>)
     88c:	4798      	blx	r3
	localBuffer[0]=kFlashByteProgram;
     88e:	68fb      	ldr	r3, [r7, #12]
     890:	22a4      	movs	r2, #164	; 0xa4
     892:	2102      	movs	r1, #2
     894:	5499      	strb	r1, [r3, r2]
	localBuffer[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
     896:	687b      	ldr	r3, [r7, #4]
     898:	0c1b      	lsrs	r3, r3, #16
     89a:	b2d9      	uxtb	r1, r3
     89c:	68fb      	ldr	r3, [r7, #12]
     89e:	22a5      	movs	r2, #165	; 0xa5
     8a0:	5499      	strb	r1, [r3, r2]
	localBuffer[2]=(uint8_t)((addr & 0xFFFF) >> 8);
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	0a1b      	lsrs	r3, r3, #8
     8a6:	b2d9      	uxtb	r1, r3
     8a8:	68fb      	ldr	r3, [r7, #12]
     8aa:	22a6      	movs	r2, #166	; 0xa6
     8ac:	5499      	strb	r1, [r3, r2]
	localBuffer[3]=(uint8_t)(addr&0xFF);
     8ae:	687b      	ldr	r3, [r7, #4]
     8b0:	b2d9      	uxtb	r1, r3
     8b2:	68fb      	ldr	r3, [r7, #12]
     8b4:	22a7      	movs	r2, #167	; 0xa7
     8b6:	5499      	strb	r1, [r3, r2]
	for (uint32_t i = 4; i <(size)+4; i++)
     8b8:	2304      	movs	r3, #4
     8ba:	617b      	str	r3, [r7, #20]
     8bc:	683b      	ldr	r3, [r7, #0]
     8be:	1d1a      	adds	r2, r3, #4
     8c0:	697b      	ldr	r3, [r7, #20]
     8c2:	429a      	cmp	r2, r3
     8c4:	d90f      	bls.n	8e6 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x96>
	{
		localBuffer[i]=*p;
     8c6:	68bb      	ldr	r3, [r7, #8]
     8c8:	7818      	ldrb	r0, [r3, #0]
     8ca:	68fa      	ldr	r2, [r7, #12]
     8cc:	21a4      	movs	r1, #164	; 0xa4
     8ce:	697b      	ldr	r3, [r7, #20]
     8d0:	18d3      	adds	r3, r2, r3
     8d2:	185b      	adds	r3, r3, r1
     8d4:	1c02      	adds	r2, r0, #0
     8d6:	701a      	strb	r2, [r3, #0]
		p++;
     8d8:	68bb      	ldr	r3, [r7, #8]
     8da:	3301      	adds	r3, #1
     8dc:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 4; i <(size)+4; i++)
     8de:	697b      	ldr	r3, [r7, #20]
     8e0:	3301      	adds	r3, #1
     8e2:	617b      	str	r3, [r7, #20]
     8e4:	e7ea      	b.n	8bc <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x6c>
	}


	w=spi.write(&localBuffer[0],size+4);
     8e6:	68fb      	ldr	r3, [r7, #12]
     8e8:	3390      	adds	r3, #144	; 0x90
     8ea:	0018      	movs	r0, r3
     8ec:	68fb      	ldr	r3, [r7, #12]
     8ee:	33a4      	adds	r3, #164	; 0xa4
     8f0:	0019      	movs	r1, r3
     8f2:	683b      	ldr	r3, [r7, #0]
     8f4:	3304      	adds	r3, #4
     8f6:	001a      	movs	r2, r3
     8f8:	4b0e      	ldr	r3, [pc, #56]	; (934 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe4>)
     8fa:	4798      	blx	r3
     8fc:	0003      	movs	r3, r0
     8fe:	613b      	str	r3, [r7, #16]

	CE_High_Flash();
     900:	68fb      	ldr	r3, [r7, #12]
     902:	0018      	movs	r0, r3
     904:	4b0c      	ldr	r3, [pc, #48]	; (938 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe8>)
     906:	4798      	blx	r3
	WRDI();
     908:	68fb      	ldr	r3, [r7, #12]
     90a:	0018      	movs	r0, r3
     90c:	4b0b      	ldr	r3, [pc, #44]	; (93c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xec>)
     90e:	4798      	blx	r3
	flashClose();
     910:	68fb      	ldr	r3, [r7, #12]
     912:	0018      	movs	r0, r3
     914:	4b0a      	ldr	r3, [pc, #40]	; (940 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xf0>)
     916:	4798      	blx	r3
	return	w;
     918:	693b      	ldr	r3, [r7, #16]
	/*return (uint32_t)writeFlash(addr,(void*)p,size);*/
}
     91a:	0018      	movs	r0, r3
     91c:	46bd      	mov	sp, r7
     91e:	b006      	add	sp, #24
     920:	bd80      	pop	{r7, pc}
     922:	46c0      	nop			; (mov r8, r8)
     924:	000006dd 	.word	0x000006dd
     928:	000003d5 	.word	0x000003d5
     92c:	000004ad 	.word	0x000004ad
     930:	000003fd 	.word	0x000003fd
     934:	00000d45 	.word	0x00000d45
     938:	00000429 	.word	0x00000429
     93c:	00000505 	.word	0x00000505
     940:	000007c1 	.word	0x000007c1

00000944 <_ZN16FlashMemoryClass11ReadAddressEPhmm>:
uint32_t	FlashMemoryClass::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
     944:	b580      	push	{r7, lr}
     946:	b086      	sub	sp, #24
     948:	af00      	add	r7, sp, #0
     94a:	60f8      	str	r0, [r7, #12]
     94c:	60b9      	str	r1, [r7, #8]
     94e:	607a      	str	r2, [r7, #4]
     950:	603b      	str	r3, [r7, #0]
	uint8_t	dummy;
	while(!IsReady());
     952:	68fb      	ldr	r3, [r7, #12]
     954:	0018      	movs	r0, r3
     956:	4b24      	ldr	r3, [pc, #144]	; (9e8 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa4>)
     958:	4798      	blx	r3
     95a:	0003      	movs	r3, r0
     95c:	001a      	movs	r2, r3
     95e:	2301      	movs	r3, #1
     960:	4053      	eors	r3, r2
     962:	b2db      	uxtb	r3, r3
     964:	2b00      	cmp	r3, #0
     966:	d000      	beq.n	96a <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x26>
     968:	e7f3      	b.n	952 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xe>
	flashOpen();
     96a:	68fb      	ldr	r3, [r7, #12]
     96c:	0018      	movs	r0, r3
     96e:	4b1f      	ldr	r3, [pc, #124]	; (9ec <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa8>)
     970:	4798      	blx	r3
	CE_Low_Flash();
     972:	68fb      	ldr	r3, [r7, #12]
     974:	0018      	movs	r0, r3
     976:	4b1e      	ldr	r3, [pc, #120]	; (9f0 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xac>)
     978:	4798      	blx	r3
	instruction[0]=kFlashRead;
     97a:	68fb      	ldr	r3, [r7, #12]
     97c:	22b8      	movs	r2, #184	; 0xb8
     97e:	2103      	movs	r1, #3
     980:	5499      	strb	r1, [r3, r2]
	instruction[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
     982:	687b      	ldr	r3, [r7, #4]
     984:	0c1b      	lsrs	r3, r3, #16
     986:	b2d9      	uxtb	r1, r3
     988:	68fb      	ldr	r3, [r7, #12]
     98a:	22b9      	movs	r2, #185	; 0xb9
     98c:	5499      	strb	r1, [r3, r2]
	instruction[2]=(uint8_t)((addr & 0xFFFF) >> 8);
     98e:	687b      	ldr	r3, [r7, #4]
     990:	0a1b      	lsrs	r3, r3, #8
     992:	b2d9      	uxtb	r1, r3
     994:	68fb      	ldr	r3, [r7, #12]
     996:	22ba      	movs	r2, #186	; 0xba
     998:	5499      	strb	r1, [r3, r2]
	instruction[3]=(uint8_t)(addr&0xFF);
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	b2d9      	uxtb	r1, r3
     99e:	68fb      	ldr	r3, [r7, #12]
     9a0:	22bb      	movs	r2, #187	; 0xbb
     9a2:	5499      	strb	r1, [r3, r2]
		
	uint32_t	r=spi.write(instruction,4);
     9a4:	68fb      	ldr	r3, [r7, #12]
     9a6:	3390      	adds	r3, #144	; 0x90
     9a8:	0018      	movs	r0, r3
     9aa:	68fb      	ldr	r3, [r7, #12]
     9ac:	33b8      	adds	r3, #184	; 0xb8
     9ae:	2204      	movs	r2, #4
     9b0:	0019      	movs	r1, r3
     9b2:	4b10      	ldr	r3, [pc, #64]	; (9f4 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb0>)
     9b4:	4798      	blx	r3
     9b6:	0003      	movs	r3, r0
     9b8:	617b      	str	r3, [r7, #20]
	r=spi.read(p,size);
     9ba:	68fb      	ldr	r3, [r7, #12]
     9bc:	3390      	adds	r3, #144	; 0x90
     9be:	683a      	ldr	r2, [r7, #0]
     9c0:	68b9      	ldr	r1, [r7, #8]
     9c2:	0018      	movs	r0, r3
     9c4:	4b0c      	ldr	r3, [pc, #48]	; (9f8 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb4>)
     9c6:	4798      	blx	r3
     9c8:	0003      	movs	r3, r0
     9ca:	617b      	str	r3, [r7, #20]
	CE_High_Flash();
     9cc:	68fb      	ldr	r3, [r7, #12]
     9ce:	0018      	movs	r0, r3
     9d0:	4b0a      	ldr	r3, [pc, #40]	; (9fc <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb8>)
     9d2:	4798      	blx	r3
	flashClose();
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	0018      	movs	r0, r3
     9d8:	4b09      	ldr	r3, [pc, #36]	; (a00 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xbc>)
     9da:	4798      	blx	r3
	
	return	r;
     9dc:	697b      	ldr	r3, [r7, #20]
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
     9de:	0018      	movs	r0, r3
     9e0:	46bd      	mov	sp, r7
     9e2:	b006      	add	sp, #24
     9e4:	bd80      	pop	{r7, pc}
     9e6:	46c0      	nop			; (mov r8, r8)
     9e8:	000006dd 	.word	0x000006dd
     9ec:	000003d5 	.word	0x000003d5
     9f0:	000003fd 	.word	0x000003fd
     9f4:	00000d45 	.word	0x00000d45
     9f8:	00000d85 	.word	0x00000d85
     9fc:	00000429 	.word	0x00000429
     a00:	000007c1 	.word	0x000007c1

00000a04 <_Z41__static_initialization_and_destruction_0ii>:
     a04:	b580      	push	{r7, lr}
     a06:	b082      	sub	sp, #8
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
     a0c:	6039      	str	r1, [r7, #0]
     a0e:	687b      	ldr	r3, [r7, #4]
     a10:	2b01      	cmp	r3, #1
     a12:	d10f      	bne.n	a34 <_Z41__static_initialization_and_destruction_0ii+0x30>
     a14:	683b      	ldr	r3, [r7, #0]
     a16:	4a09      	ldr	r2, [pc, #36]	; (a3c <_Z41__static_initialization_and_destruction_0ii+0x38>)
     a18:	4293      	cmp	r3, r2
     a1a:	d10b      	bne.n	a34 <_Z41__static_initialization_and_destruction_0ii+0x30>
     a1c:	4a08      	ldr	r2, [pc, #32]	; (a40 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     a1e:	4b09      	ldr	r3, [pc, #36]	; (a44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     a20:	0011      	movs	r1, r2
     a22:	0018      	movs	r0, r3
     a24:	4b08      	ldr	r3, [pc, #32]	; (a48 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     a26:	4798      	blx	r3
     a28:	4a08      	ldr	r2, [pc, #32]	; (a4c <_Z41__static_initialization_and_destruction_0ii+0x48>)
     a2a:	4909      	ldr	r1, [pc, #36]	; (a50 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     a2c:	4b05      	ldr	r3, [pc, #20]	; (a44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     a2e:	0018      	movs	r0, r3
     a30:	4b08      	ldr	r3, [pc, #32]	; (a54 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     a32:	4798      	blx	r3
     a34:	46c0      	nop			; (mov r8, r8)
     a36:	46bd      	mov	sp, r7
     a38:	b002      	add	sp, #8
     a3a:	bd80      	pop	{r7, pc}
     a3c:	0000ffff 	.word	0x0000ffff
     a40:	200005d0 	.word	0x200005d0
     a44:	200004a4 	.word	0x200004a4
     a48:	000002fd 	.word	0x000002fd
     a4c:	20000000 	.word	0x20000000
     a50:	0000034d 	.word	0x0000034d
     a54:	00001c95 	.word	0x00001c95

00000a58 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev>:
     a58:	b580      	push	{r7, lr}
     a5a:	af00      	add	r7, sp, #0
     a5c:	4b03      	ldr	r3, [pc, #12]	; (a6c <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x14>)
     a5e:	0019      	movs	r1, r3
     a60:	2001      	movs	r0, #1
     a62:	4b03      	ldr	r3, [pc, #12]	; (a70 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x18>)
     a64:	4798      	blx	r3
     a66:	46bd      	mov	sp, r7
     a68:	bd80      	pop	{r7, pc}
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	0000ffff 	.word	0x0000ffff
     a70:	00000a05 	.word	0x00000a05

00000a74 <hri_port_set_OUT_reg>:
{
     a74:	b580      	push	{r7, lr}
     a76:	b084      	sub	sp, #16
     a78:	af00      	add	r7, sp, #0
     a7a:	60f8      	str	r0, [r7, #12]
     a7c:	607a      	str	r2, [r7, #4]
     a7e:	230b      	movs	r3, #11
     a80:	18fb      	adds	r3, r7, r3
     a82:	1c0a      	adds	r2, r1, #0
     a84:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a86:	230b      	movs	r3, #11
     a88:	18fb      	adds	r3, r7, r3
     a8a:	781b      	ldrb	r3, [r3, #0]
     a8c:	68fa      	ldr	r2, [r7, #12]
     a8e:	01db      	lsls	r3, r3, #7
     a90:	18d3      	adds	r3, r2, r3
     a92:	3318      	adds	r3, #24
     a94:	687a      	ldr	r2, [r7, #4]
     a96:	601a      	str	r2, [r3, #0]
}
     a98:	46c0      	nop			; (mov r8, r8)
     a9a:	46bd      	mov	sp, r7
     a9c:	b004      	add	sp, #16
     a9e:	bd80      	pop	{r7, pc}

00000aa0 <hri_port_clear_OUT_reg>:
{
     aa0:	b580      	push	{r7, lr}
     aa2:	b084      	sub	sp, #16
     aa4:	af00      	add	r7, sp, #0
     aa6:	60f8      	str	r0, [r7, #12]
     aa8:	607a      	str	r2, [r7, #4]
     aaa:	230b      	movs	r3, #11
     aac:	18fb      	adds	r3, r7, r3
     aae:	1c0a      	adds	r2, r1, #0
     ab0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ab2:	230b      	movs	r3, #11
     ab4:	18fb      	adds	r3, r7, r3
     ab6:	781b      	ldrb	r3, [r3, #0]
     ab8:	68fa      	ldr	r2, [r7, #12]
     aba:	01db      	lsls	r3, r3, #7
     abc:	18d3      	adds	r3, r2, r3
     abe:	3314      	adds	r3, #20
     ac0:	687a      	ldr	r2, [r7, #4]
     ac2:	601a      	str	r2, [r3, #0]
}
     ac4:	46c0      	nop			; (mov r8, r8)
     ac6:	46bd      	mov	sp, r7
     ac8:	b004      	add	sp, #16
     aca:	bd80      	pop	{r7, pc}

00000acc <_gpio_set_level>:
{
     acc:	b580      	push	{r7, lr}
     ace:	b082      	sub	sp, #8
     ad0:	af00      	add	r7, sp, #0
     ad2:	6039      	str	r1, [r7, #0]
     ad4:	0011      	movs	r1, r2
     ad6:	1dfb      	adds	r3, r7, #7
     ad8:	1c02      	adds	r2, r0, #0
     ada:	701a      	strb	r2, [r3, #0]
     adc:	1dbb      	adds	r3, r7, #6
     ade:	1c0a      	adds	r2, r1, #0
     ae0:	701a      	strb	r2, [r3, #0]
	if (level) {
     ae2:	1dbb      	adds	r3, r7, #6
     ae4:	781b      	ldrb	r3, [r3, #0]
     ae6:	2b00      	cmp	r3, #0
     ae8:	d008      	beq.n	afc <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     aea:	683a      	ldr	r2, [r7, #0]
     aec:	1dfb      	adds	r3, r7, #7
     aee:	7819      	ldrb	r1, [r3, #0]
     af0:	23c0      	movs	r3, #192	; 0xc0
     af2:	05db      	lsls	r3, r3, #23
     af4:	0018      	movs	r0, r3
     af6:	4b07      	ldr	r3, [pc, #28]	; (b14 <_gpio_set_level+0x48>)
     af8:	4798      	blx	r3
}
     afa:	e007      	b.n	b0c <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     afc:	683a      	ldr	r2, [r7, #0]
     afe:	1dfb      	adds	r3, r7, #7
     b00:	7819      	ldrb	r1, [r3, #0]
     b02:	23c0      	movs	r3, #192	; 0xc0
     b04:	05db      	lsls	r3, r3, #23
     b06:	0018      	movs	r0, r3
     b08:	4b03      	ldr	r3, [pc, #12]	; (b18 <_gpio_set_level+0x4c>)
     b0a:	4798      	blx	r3
}
     b0c:	46c0      	nop			; (mov r8, r8)
     b0e:	46bd      	mov	sp, r7
     b10:	b002      	add	sp, #8
     b12:	bd80      	pop	{r7, pc}
     b14:	00000a75 	.word	0x00000a75
     b18:	00000aa1 	.word	0x00000aa1

00000b1c <gpio_set_pin_level>:
{
     b1c:	b580      	push	{r7, lr}
     b1e:	b082      	sub	sp, #8
     b20:	af00      	add	r7, sp, #0
     b22:	0002      	movs	r2, r0
     b24:	1dfb      	adds	r3, r7, #7
     b26:	701a      	strb	r2, [r3, #0]
     b28:	1dbb      	adds	r3, r7, #6
     b2a:	1c0a      	adds	r2, r1, #0
     b2c:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     b2e:	1dfb      	adds	r3, r7, #7
     b30:	781b      	ldrb	r3, [r3, #0]
     b32:	115b      	asrs	r3, r3, #5
     b34:	b2d8      	uxtb	r0, r3
     b36:	1dfb      	adds	r3, r7, #7
     b38:	781b      	ldrb	r3, [r3, #0]
     b3a:	001a      	movs	r2, r3
     b3c:	231f      	movs	r3, #31
     b3e:	4013      	ands	r3, r2
     b40:	2201      	movs	r2, #1
     b42:	409a      	lsls	r2, r3
     b44:	0011      	movs	r1, r2
     b46:	1dbb      	adds	r3, r7, #6
     b48:	781b      	ldrb	r3, [r3, #0]
     b4a:	001a      	movs	r2, r3
     b4c:	4b02      	ldr	r3, [pc, #8]	; (b58 <gpio_set_pin_level+0x3c>)
     b4e:	4798      	blx	r3
}
     b50:	46c0      	nop			; (mov r8, r8)
     b52:	46bd      	mov	sp, r7
     b54:	b002      	add	sp, #8
     b56:	bd80      	pop	{r7, pc}
     b58:	00000acd 	.word	0x00000acd

00000b5c <main>:
#include <atmel_start.h>
#include "main.h"
#include "stdlib.h"
//static FlashMemoryClass	flash(&SPI_0);
int main(void)
{
     b5c:	b590      	push	{r4, r7, lr}
     b5e:	b08f      	sub	sp, #60	; 0x3c
     b60:	af00      	add	r7, sp, #0
	atmel_start_init();
     b62:	4b3b      	ldr	r3, [pc, #236]	; (c50 <main+0xf4>)
     b64:	4798      	blx	r3
	bool is_corrupted = false;
     b66:	2327      	movs	r3, #39	; 0x27
     b68:	18fb      	adds	r3, r7, r3
     b6a:	2200      	movs	r2, #0
     b6c:	701a      	strb	r2, [r3, #0]
	uint8_t tx_buffer[ISSI_BUFFER_SIZE] ;
	uint8_t rx_buffer[ISSI_BUFFER_SIZE] ;
	
	flash.Init();
     b6e:	4b39      	ldr	r3, [pc, #228]	; (c54 <main+0xf8>)
     b70:	0018      	movs	r0, r3
     b72:	4b39      	ldr	r3, [pc, #228]	; (c58 <main+0xfc>)
     b74:	4798      	blx	r3

	//usb.print("QSPI Program Started\n\r");
	/* Initialize Tx buffer */
	for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
     b76:	2300      	movs	r3, #0
     b78:	637b      	str	r3, [r7, #52]	; 0x34
     b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b7c:	2b0f      	cmp	r3, #15
     b7e:	dc0b      	bgt.n	b98 <main+0x3c>
		tx_buffer[i] = (uint8_t)i;
     b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b82:	b2d9      	uxtb	r1, r3
     b84:	2314      	movs	r3, #20
     b86:	18fa      	adds	r2, r7, r3
     b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b8a:	18d3      	adds	r3, r2, r3
     b8c:	1c0a      	adds	r2, r1, #0
     b8e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
     b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b92:	3301      	adds	r3, #1
     b94:	637b      	str	r3, [r7, #52]	; 0x34
     b96:	e7f0      	b.n	b7a <main+0x1e>
	}

	flash.eraseFlash(0,TEST_FLASH_SIZE);
     b98:	2380      	movs	r3, #128	; 0x80
     b9a:	015a      	lsls	r2, r3, #5
     b9c:	4b2d      	ldr	r3, [pc, #180]	; (c54 <main+0xf8>)
     b9e:	2100      	movs	r1, #0
     ba0:	0018      	movs	r0, r3
     ba2:	4b2e      	ldr	r3, [pc, #184]	; (c5c <main+0x100>)
     ba4:	4798      	blx	r3
	/* Erase flash memory */
	uint32_t	m=0;
     ba6:	2300      	movs	r3, #0
     ba8:	633b      	str	r3, [r7, #48]	; 0x30
	while (1) {
		//delay_us(100);
		/* Write data to flash memory */
		if (ERR_NONE ==flash.WriteAddress((uint8_t *)tx_buffer,m,ISSI_BUFFER_SIZE)) {
     baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     bac:	2314      	movs	r3, #20
     bae:	18f9      	adds	r1, r7, r3
     bb0:	4828      	ldr	r0, [pc, #160]	; (c54 <main+0xf8>)
     bb2:	2310      	movs	r3, #16
     bb4:	4c2a      	ldr	r4, [pc, #168]	; (c60 <main+0x104>)
     bb6:	47a0      	blx	r4
		
		}
		delay_ms(WRITE_DELAY);
     bb8:	2064      	movs	r0, #100	; 0x64
     bba:	4b2a      	ldr	r3, [pc, #168]	; (c64 <main+0x108>)
     bbc:	4798      	blx	r3
		//flash.WaitBusy();
		/* Read data from flash memory */
		if (ERR_NONE == flash.ReadAddress((uint8_t *)rx_buffer,m,ISSI_BUFFER_SIZE)) {
     bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     bc0:	1d39      	adds	r1, r7, #4
     bc2:	4824      	ldr	r0, [pc, #144]	; (c54 <main+0xf8>)
     bc4:	2310      	movs	r3, #16
     bc6:	4c28      	ldr	r4, [pc, #160]	; (c68 <main+0x10c>)
     bc8:	47a0      	blx	r4
			//while(!memory.xferDone);

		}
	//	delay_us(100);
		is_corrupted = false;
     bca:	2327      	movs	r3, #39	; 0x27
     bcc:	18fb      	adds	r3, r7, r3
     bce:	2200      	movs	r2, #0
     bd0:	701a      	strb	r2, [r3, #0]
		gpio_set_pin_level(NMI,true);
     bd2:	2101      	movs	r1, #1
     bd4:	2008      	movs	r0, #8
     bd6:	4b25      	ldr	r3, [pc, #148]	; (c6c <main+0x110>)
     bd8:	4798      	blx	r3
		for (int i = 1; i < ISSI_BUFFER_SIZE; i++) {
     bda:	2301      	movs	r3, #1
     bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
     bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     be0:	2b0f      	cmp	r3, #15
     be2:	dc19      	bgt.n	c18 <main+0xbc>
			if (tx_buffer[i] != rx_buffer[i]) {
     be4:	2314      	movs	r3, #20
     be6:	18fa      	adds	r2, r7, r3
     be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bea:	18d3      	adds	r3, r2, r3
     bec:	781a      	ldrb	r2, [r3, #0]
     bee:	1d39      	adds	r1, r7, #4
     bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bf2:	18cb      	adds	r3, r1, r3
     bf4:	781b      	ldrb	r3, [r3, #0]
     bf6:	429a      	cmp	r2, r3
     bf8:	d00a      	beq.n	c10 <main+0xb4>
				is_corrupted = true;
     bfa:	2327      	movs	r3, #39	; 0x27
     bfc:	18fb      	adds	r3, r7, r3
     bfe:	2201      	movs	r2, #1
     c00:	701a      	strb	r2, [r3, #0]
// 				usb.print("Flash data verification failed.\n\r");
// 				usb<<"bit :"<<i<<NEWLINE;
				i=ISSI_BUFFER_SIZE;
     c02:	2310      	movs	r3, #16
     c04:	62fb      	str	r3, [r7, #44]	; 0x2c
				gpio_set_pin_level(NMI,false);
     c06:	2100      	movs	r1, #0
     c08:	2008      	movs	r0, #8
     c0a:	4b18      	ldr	r3, [pc, #96]	; (c6c <main+0x110>)
     c0c:	4798      	blx	r3
				break;
     c0e:	e003      	b.n	c18 <main+0xbc>
		for (int i = 1; i < ISSI_BUFFER_SIZE; i++) {
     c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c12:	3301      	adds	r3, #1
     c14:	62fb      	str	r3, [r7, #44]	; 0x2c
     c16:	e7e2      	b.n	bde <main+0x82>
			}
		
		}

		delay_ms(WRITE_DELAY);
     c18:	2064      	movs	r0, #100	; 0x64
     c1a:	4b12      	ldr	r3, [pc, #72]	; (c64 <main+0x108>)
     c1c:	4798      	blx	r3
		m=(m+ISSI_BUFFER_SIZE)%TEST_FLASH_SIZE;
     c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c20:	3310      	adds	r3, #16
     c22:	051b      	lsls	r3, r3, #20
     c24:	0d1b      	lsrs	r3, r3, #20
     c26:	633b      	str	r3, [r7, #48]	; 0x30
			for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
     c28:	2300      	movs	r3, #0
     c2a:	62bb      	str	r3, [r7, #40]	; 0x28
     c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c2e:	2b0f      	cmp	r3, #15
     c30:	dcbb      	bgt.n	baa <main+0x4e>
				tx_buffer[i] = (uint8_t)rand();
     c32:	4b0f      	ldr	r3, [pc, #60]	; (c70 <main+0x114>)
     c34:	4798      	blx	r3
     c36:	0003      	movs	r3, r0
     c38:	b2d9      	uxtb	r1, r3
     c3a:	2314      	movs	r3, #20
     c3c:	18fa      	adds	r2, r7, r3
     c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c40:	18d3      	adds	r3, r2, r3
     c42:	1c0a      	adds	r2, r1, #0
     c44:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
     c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c48:	3301      	adds	r3, #1
     c4a:	62bb      	str	r3, [r7, #40]	; 0x28
     c4c:	e7ee      	b.n	c2c <main+0xd0>
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	00000de5 	.word	0x00000de5
     c54:	200004a4 	.word	0x200004a4
     c58:	0000036d 	.word	0x0000036d
     c5c:	0000053d 	.word	0x0000053d
     c60:	00000851 	.word	0x00000851
     c64:	00001055 	.word	0x00001055
     c68:	00000945 	.word	0x00000945
     c6c:	00000b1d 	.word	0x00000b1d
     c70:	00001eed 	.word	0x00001eed

00000c74 <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
     c74:	b580      	push	{r7, lr}
     c76:	b082      	sub	sp, #8
     c78:	af00      	add	r7, sp, #0
     c7a:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
     c7c:	4b03      	ldr	r3, [pc, #12]	; (c8c <_ZN13SPI_Syn_ClassC1Ev+0x18>)
     c7e:	687a      	ldr	r2, [r7, #4]
     c80:	601a      	str	r2, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
     c82:	687b      	ldr	r3, [r7, #4]
     c84:	0018      	movs	r0, r3
     c86:	46bd      	mov	sp, r7
     c88:	b002      	add	sp, #8
     c8a:	bd80      	pop	{r7, pc}
     c8c:	20000564 	.word	0x20000564

00000c90 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
     c90:	b580      	push	{r7, lr}
     c92:	b082      	sub	sp, #8
     c94:	af00      	add	r7, sp, #0
     c96:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
     c98:	687b      	ldr	r3, [r7, #4]
     c9a:	0018      	movs	r0, r3
     c9c:	46bd      	mov	sp, r7
     c9e:	b002      	add	sp, #8
     ca0:	bd80      	pop	{r7, pc}
	...

00000ca4 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
     ca4:	b580      	push	{r7, lr}
     ca6:	b082      	sub	sp, #8
     ca8:	af00      	add	r7, sp, #0
     caa:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
     cac:	687b      	ldr	r3, [r7, #4]
     cae:	685a      	ldr	r2, [r3, #4]
     cb0:	687b      	ldr	r3, [r7, #4]
     cb2:	3308      	adds	r3, #8
     cb4:	0019      	movs	r1, r3
     cb6:	0010      	movs	r0, r2
     cb8:	4b08      	ldr	r3, [pc, #32]	; (cdc <_ZN13SPI_Syn_Class4initEv+0x38>)
     cba:	4798      	blx	r3

	spi_m_sync_enable(SPI);
     cbc:	687b      	ldr	r3, [r7, #4]
     cbe:	685b      	ldr	r3, [r3, #4]
     cc0:	0018      	movs	r0, r3
     cc2:	4b07      	ldr	r3, [pc, #28]	; (ce0 <_ZN13SPI_Syn_Class4initEv+0x3c>)
     cc4:	4798      	blx	r3
	
	ready=true;
     cc6:	687b      	ldr	r3, [r7, #4]
     cc8:	2201      	movs	r2, #1
     cca:	701a      	strb	r2, [r3, #0]
	xferDone=true;
     ccc:	687b      	ldr	r3, [r7, #4]
     cce:	2201      	movs	r2, #1
     cd0:	705a      	strb	r2, [r3, #1]
	
}
     cd2:	46c0      	nop			; (mov r8, r8)
     cd4:	46bd      	mov	sp, r7
     cd6:	b002      	add	sp, #8
     cd8:	bd80      	pop	{r7, pc}
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	000012a1 	.word	0x000012a1
     ce0:	00001191 	.word	0x00001191

00000ce4 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
     ce4:	b580      	push	{r7, lr}
     ce6:	b082      	sub	sp, #8
     ce8:	af00      	add	r7, sp, #0
     cea:	6078      	str	r0, [r7, #4]
     cec:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
     cee:	4b05      	ldr	r3, [pc, #20]	; (d04 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
     cf0:	687a      	ldr	r2, [r7, #4]
     cf2:	601a      	str	r2, [r3, #0]
	SPI=spiDesc;
     cf4:	687b      	ldr	r3, [r7, #4]
     cf6:	683a      	ldr	r2, [r7, #0]
     cf8:	605a      	str	r2, [r3, #4]
}
     cfa:	46c0      	nop			; (mov r8, r8)
     cfc:	46bd      	mov	sp, r7
     cfe:	b002      	add	sp, #8
     d00:	bd80      	pop	{r7, pc}
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	20000564 	.word	0x20000564

00000d08 <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
     d08:	b580      	push	{r7, lr}
     d0a:	b082      	sub	sp, #8
     d0c:	af00      	add	r7, sp, #0
     d0e:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
     d10:	687b      	ldr	r3, [r7, #4]
     d12:	685a      	ldr	r2, [r3, #4]
     d14:	687b      	ldr	r3, [r7, #4]
     d16:	3308      	adds	r3, #8
     d18:	0019      	movs	r1, r3
     d1a:	0010      	movs	r0, r2
     d1c:	4b07      	ldr	r3, [pc, #28]	; (d3c <_ZN13SPI_Syn_Class6enableEv+0x34>)
     d1e:	4798      	blx	r3
	spi_m_sync_enable(SPI);
     d20:	687b      	ldr	r3, [r7, #4]
     d22:	685b      	ldr	r3, [r3, #4]
     d24:	0018      	movs	r0, r3
     d26:	4b06      	ldr	r3, [pc, #24]	; (d40 <_ZN13SPI_Syn_Class6enableEv+0x38>)
     d28:	4798      	blx	r3
	ready=true;
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	2201      	movs	r2, #1
     d2e:	701a      	strb	r2, [r3, #0]
	return 0;
     d30:	2300      	movs	r3, #0
}
     d32:	0018      	movs	r0, r3
     d34:	46bd      	mov	sp, r7
     d36:	b002      	add	sp, #8
     d38:	bd80      	pop	{r7, pc}
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	000012a1 	.word	0x000012a1
     d40:	00001191 	.word	0x00001191

00000d44 <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
     d44:	b580      	push	{r7, lr}
     d46:	b086      	sub	sp, #24
     d48:	af00      	add	r7, sp, #0
     d4a:	60f8      	str	r0, [r7, #12]
     d4c:	60b9      	str	r1, [r7, #8]
     d4e:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
     d50:	68fb      	ldr	r3, [r7, #12]
     d52:	2201      	movs	r2, #1
     d54:	741a      	strb	r2, [r3, #16]
	w= io_write(spio,p,(uint16_t)n);
     d56:	68fb      	ldr	r3, [r7, #12]
     d58:	689b      	ldr	r3, [r3, #8]
     d5a:	687a      	ldr	r2, [r7, #4]
     d5c:	b292      	uxth	r2, r2
     d5e:	68b9      	ldr	r1, [r7, #8]
     d60:	0018      	movs	r0, r3
     d62:	4b07      	ldr	r3, [pc, #28]	; (d80 <_ZN13SPI_Syn_Class5writeEPKhl+0x3c>)
     d64:	4798      	blx	r3
     d66:	0003      	movs	r3, r0
     d68:	617b      	str	r3, [r7, #20]
	wFlag=(bool)w;
     d6a:	697b      	ldr	r3, [r7, #20]
     d6c:	1e5a      	subs	r2, r3, #1
     d6e:	4193      	sbcs	r3, r2
     d70:	b2da      	uxtb	r2, r3
     d72:	68fb      	ldr	r3, [r7, #12]
     d74:	741a      	strb	r2, [r3, #16]
	 return w;
     d76:	697b      	ldr	r3, [r7, #20]
	
}
     d78:	0018      	movs	r0, r3
     d7a:	46bd      	mov	sp, r7
     d7c:	b006      	add	sp, #24
     d7e:	bd80      	pop	{r7, pc}
     d80:	00001075 	.word	0x00001075

00000d84 <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
     d84:	b580      	push	{r7, lr}
     d86:	b086      	sub	sp, #24
     d88:	af00      	add	r7, sp, #0
     d8a:	60f8      	str	r0, [r7, #12]
     d8c:	60b9      	str	r1, [r7, #8]
     d8e:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
     d90:	68fb      	ldr	r3, [r7, #12]
     d92:	2201      	movs	r2, #1
     d94:	745a      	strb	r2, [r3, #17]
	r=io_read(spio,p,(uint16_t)n);
     d96:	68fb      	ldr	r3, [r7, #12]
     d98:	689b      	ldr	r3, [r3, #8]
     d9a:	687a      	ldr	r2, [r7, #4]
     d9c:	b292      	uxth	r2, r2
     d9e:	68b9      	ldr	r1, [r7, #8]
     da0:	0018      	movs	r0, r3
     da2:	4b07      	ldr	r3, [pc, #28]	; (dc0 <_ZN13SPI_Syn_Class4readEPhl+0x3c>)
     da4:	4798      	blx	r3
     da6:	0003      	movs	r3, r0
     da8:	617b      	str	r3, [r7, #20]
	rFlag=(bool)r;
     daa:	697b      	ldr	r3, [r7, #20]
     dac:	1e5a      	subs	r2, r3, #1
     dae:	4193      	sbcs	r3, r2
     db0:	b2da      	uxtb	r2, r3
     db2:	68fb      	ldr	r3, [r7, #12]
     db4:	745a      	strb	r2, [r3, #17]
	return  r;
     db6:	697b      	ldr	r3, [r7, #20]
}
     db8:	0018      	movs	r0, r3
     dba:	46bd      	mov	sp, r7
     dbc:	b006      	add	sp, #24
     dbe:	bd80      	pop	{r7, pc}
     dc0:	000010a9 	.word	0x000010a9

00000dc4 <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
     dc4:	b580      	push	{r7, lr}
     dc6:	b082      	sub	sp, #8
     dc8:	af00      	add	r7, sp, #0
     dca:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
     dcc:	687b      	ldr	r3, [r7, #4]
     dce:	685b      	ldr	r3, [r3, #4]
     dd0:	0018      	movs	r0, r3
     dd2:	4b03      	ldr	r3, [pc, #12]	; (de0 <_ZN13SPI_Syn_Class7disableEv+0x1c>)
     dd4:	4798      	blx	r3
	
}
     dd6:	46c0      	nop			; (mov r8, r8)
     dd8:	46bd      	mov	sp, r7
     dda:	b002      	add	sp, #8
     ddc:	bd80      	pop	{r7, pc}
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	000011b9 	.word	0x000011b9

00000de4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     de4:	b510      	push	{r4, lr}
	system_init();
     de6:	4b01      	ldr	r3, [pc, #4]	; (dec <atmel_start_init+0x8>)
     de8:	4798      	blx	r3
}
     dea:	bd10      	pop	{r4, pc}
     dec:	00000f41 	.word	0x00000f41

00000df0 <SPI_0_PORT_init>:
struct timer_descriptor      TIMER_3;

struct pwm_descriptor PWM_0;

void SPI_0_PORT_init(void)
{
     df0:	b5f0      	push	{r4, r5, r6, r7, lr}
     df2:	46ce      	mov	lr, r9
     df4:	4647      	mov	r7, r8
     df6:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     df8:	21c0      	movs	r1, #192	; 0xc0
     dfa:	05c9      	lsls	r1, r1, #23
     dfc:	2380      	movs	r3, #128	; 0x80
     dfe:	009b      	lsls	r3, r3, #2
     e00:	604b      	str	r3, [r1, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e02:	4b25      	ldr	r3, [pc, #148]	; (e98 <SPI_0_PORT_init+0xa8>)
     e04:	4a25      	ldr	r2, [pc, #148]	; (e9c <SPI_0_PORT_init+0xac>)
     e06:	629a      	str	r2, [r3, #40]	; 0x28
     e08:	4a25      	ldr	r2, [pc, #148]	; (ea0 <SPI_0_PORT_init+0xb0>)
     e0a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e0c:	2449      	movs	r4, #73	; 0x49
     e0e:	5d1a      	ldrb	r2, [r3, r4]
     e10:	2004      	movs	r0, #4
     e12:	4382      	bics	r2, r0
     e14:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e16:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e18:	2601      	movs	r6, #1
     e1a:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e1c:	2201      	movs	r2, #1
     e1e:	4310      	orrs	r0, r2
     e20:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e22:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e24:	2734      	movs	r7, #52	; 0x34
     e26:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     e28:	250f      	movs	r5, #15
     e2a:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
     e2c:	2420      	movs	r4, #32
     e2e:	46a1      	mov	r9, r4
     e30:	464c      	mov	r4, r9
     e32:	4320      	orrs	r0, r4
     e34:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e36:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e38:	2080      	movs	r0, #128	; 0x80
     e3a:	00c0      	lsls	r0, r0, #3
     e3c:	6148      	str	r0, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e3e:	6088      	str	r0, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e40:	4818      	ldr	r0, [pc, #96]	; (ea4 <SPI_0_PORT_init+0xb4>)
     e42:	6298      	str	r0, [r3, #40]	; 0x28
     e44:	20c0      	movs	r0, #192	; 0xc0
     e46:	0600      	lsls	r0, r0, #24
     e48:	4684      	mov	ip, r0
     e4a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e4c:	3716      	adds	r7, #22
     e4e:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e50:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e52:	4310      	orrs	r0, r2
     e54:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e56:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e58:	2035      	movs	r0, #53	; 0x35
     e5a:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     e5c:	240f      	movs	r4, #15
     e5e:	43a7      	bics	r7, r4
	tmp |= PORT_PMUX_PMUXE(data);
     e60:	3c0d      	subs	r4, #13
     e62:	4327      	orrs	r7, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e64:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e66:	2780      	movs	r7, #128	; 0x80
     e68:	013f      	lsls	r7, r7, #4
     e6a:	614f      	str	r7, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e6c:	608f      	str	r7, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e6e:	490e      	ldr	r1, [pc, #56]	; (ea8 <SPI_0_PORT_init+0xb8>)
     e70:	6299      	str	r1, [r3, #40]	; 0x28
     e72:	4661      	mov	r1, ip
     e74:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e76:	274b      	movs	r7, #75	; 0x4b
     e78:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e7a:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e7c:	4311      	orrs	r1, r2
     e7e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e80:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e82:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     e84:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
     e86:	4649      	mov	r1, r9
     e88:	430a      	orrs	r2, r1
     e8a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e8c:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
}
     e8e:	bc0c      	pop	{r2, r3}
     e90:	4690      	mov	r8, r2
     e92:	4699      	mov	r9, r3
     e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e96:	46c0      	nop			; (mov r8, r8)
     e98:	41004400 	.word	0x41004400
     e9c:	40020200 	.word	0x40020200
     ea0:	c0020000 	.word	0xc0020000
     ea4:	40000400 	.word	0x40000400
     ea8:	40000800 	.word	0x40000800

00000eac <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     eac:	4a04      	ldr	r2, [pc, #16]	; (ec0 <SPI_0_CLOCK_init+0x14>)
     eae:	6a13      	ldr	r3, [r2, #32]
     eb0:	2104      	movs	r1, #4
     eb2:	430b      	orrs	r3, r1
     eb4:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     eb6:	4a03      	ldr	r2, [pc, #12]	; (ec4 <SPI_0_CLOCK_init+0x18>)
     eb8:	4b03      	ldr	r3, [pc, #12]	; (ec8 <SPI_0_CLOCK_init+0x1c>)
     eba:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     ebc:	4770      	bx	lr
     ebe:	46c0      	nop			; (mov r8, r8)
     ec0:	40000400 	.word	0x40000400
     ec4:	00004014 	.word	0x00004014
     ec8:	40000c00 	.word	0x40000c00

00000ecc <SPI_0_init>:

void SPI_0_init(void)
{
     ecc:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     ece:	4b04      	ldr	r3, [pc, #16]	; (ee0 <SPI_0_init+0x14>)
     ed0:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     ed2:	4904      	ldr	r1, [pc, #16]	; (ee4 <SPI_0_init+0x18>)
     ed4:	4804      	ldr	r0, [pc, #16]	; (ee8 <SPI_0_init+0x1c>)
     ed6:	4b05      	ldr	r3, [pc, #20]	; (eec <SPI_0_init+0x20>)
     ed8:	4798      	blx	r3
	SPI_0_PORT_init();
     eda:	4b05      	ldr	r3, [pc, #20]	; (ef0 <SPI_0_init+0x24>)
     edc:	4798      	blx	r3
}
     ede:	bd10      	pop	{r4, pc}
     ee0:	00000ead 	.word	0x00000ead
     ee4:	42000800 	.word	0x42000800
     ee8:	200005d0 	.word	0x200005d0
     eec:	0000113d 	.word	0x0000113d
     ef0:	00000df1 	.word	0x00000df1

00000ef4 <PWM_0_CLOCK_init>:
     ef4:	4a04      	ldr	r2, [pc, #16]	; (f08 <PWM_0_CLOCK_init+0x14>)
     ef6:	6a11      	ldr	r1, [r2, #32]
     ef8:	2380      	movs	r3, #128	; 0x80
     efa:	011b      	lsls	r3, r3, #4
     efc:	430b      	orrs	r3, r1
     efe:	6213      	str	r3, [r2, #32]
     f00:	4a02      	ldr	r2, [pc, #8]	; (f0c <PWM_0_CLOCK_init+0x18>)
     f02:	4b03      	ldr	r3, [pc, #12]	; (f10 <PWM_0_CLOCK_init+0x1c>)
     f04:	805a      	strh	r2, [r3, #2]

void PWM_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);
}
     f06:	4770      	bx	lr
     f08:	40000400 	.word	0x40000400
     f0c:	0000431b 	.word	0x0000431b
     f10:	40000c00 	.word	0x40000c00

00000f14 <PWM_0_init>:

void PWM_0_init(void)
{
     f14:	b510      	push	{r4, lr}
	PWM_0_CLOCK_init();
     f16:	4b05      	ldr	r3, [pc, #20]	; (f2c <PWM_0_init+0x18>)
     f18:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC3, _tc_get_pwm());
     f1a:	4b05      	ldr	r3, [pc, #20]	; (f30 <PWM_0_init+0x1c>)
     f1c:	4798      	blx	r3
     f1e:	0002      	movs	r2, r0
     f20:	4904      	ldr	r1, [pc, #16]	; (f34 <PWM_0_init+0x20>)
     f22:	4805      	ldr	r0, [pc, #20]	; (f38 <PWM_0_init+0x24>)
     f24:	4b05      	ldr	r3, [pc, #20]	; (f3c <PWM_0_init+0x28>)
     f26:	4798      	blx	r3
}
     f28:	bd10      	pop	{r4, pc}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	00000ef5 	.word	0x00000ef5
     f30:	00001c1d 	.word	0x00001c1d
     f34:	42002c00 	.word	0x42002c00
     f38:	20000598 	.word	0x20000598
     f3c:	000010f5 	.word	0x000010f5

00000f40 <system_init>:

	timer_init(&TIMER_3, TC7, _tc_get_timer());
}

void system_init(void)
{
     f40:	b5f0      	push	{r4, r5, r6, r7, lr}
     f42:	46c6      	mov	lr, r8
     f44:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     f46:	4b2f      	ldr	r3, [pc, #188]	; (1004 <system_init+0xc4>)
     f48:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f4a:	22c0      	movs	r2, #192	; 0xc0
     f4c:	05d2      	lsls	r2, r2, #23
     f4e:	2080      	movs	r0, #128	; 0x80
     f50:	0040      	lsls	r0, r0, #1
     f52:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f54:	4b2c      	ldr	r3, [pc, #176]	; (1008 <system_init+0xc8>)
     f56:	492d      	ldr	r1, [pc, #180]	; (100c <system_init+0xcc>)
     f58:	6299      	str	r1, [r3, #40]	; 0x28
     f5a:	492d      	ldr	r1, [pc, #180]	; (1010 <system_init+0xd0>)
     f5c:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f5e:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f60:	2148      	movs	r1, #72	; 0x48
     f62:	5c5c      	ldrb	r4, [r3, r1]
     f64:	2504      	movs	r5, #4
     f66:	432c      	orrs	r4, r5
     f68:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f6a:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f6c:	5c5c      	ldrb	r4, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     f6e:	38ff      	subs	r0, #255	; 0xff
     f70:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f72:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f74:	2180      	movs	r1, #128	; 0x80
     f76:	0509      	lsls	r1, r1, #20
     f78:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f7a:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f7c:	2480      	movs	r4, #128	; 0x80
     f7e:	05e4      	lsls	r4, r4, #23
     f80:	629c      	str	r4, [r3, #40]	; 0x28
     f82:	4924      	ldr	r1, [pc, #144]	; (1014 <system_init+0xd4>)
     f84:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f86:	3557      	adds	r5, #87	; 0x57
     f88:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     f8a:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f8c:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f8e:	2180      	movs	r1, #128	; 0x80
     f90:	0549      	lsls	r1, r1, #21
     f92:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f94:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f96:	629c      	str	r4, [r3, #40]	; 0x28
     f98:	4a1f      	ldr	r2, [pc, #124]	; (1018 <system_init+0xd8>)
     f9a:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f9c:	215c      	movs	r1, #92	; 0x5c
     f9e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     fa0:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fa2:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);

	SPI_0_init();
     fa4:	4b1d      	ldr	r3, [pc, #116]	; (101c <system_init+0xdc>)
     fa6:	4798      	blx	r3

	PWM_0_init();
     fa8:	4b1d      	ldr	r3, [pc, #116]	; (1020 <system_init+0xe0>)
     faa:	4798      	blx	r3
     fac:	4c1d      	ldr	r4, [pc, #116]	; (1024 <system_init+0xe4>)
     fae:	6a22      	ldr	r2, [r4, #32]
     fb0:	2380      	movs	r3, #128	; 0x80
     fb2:	015b      	lsls	r3, r3, #5
     fb4:	4313      	orrs	r3, r2
     fb6:	6223      	str	r3, [r4, #32]
     fb8:	4f1b      	ldr	r7, [pc, #108]	; (1028 <system_init+0xe8>)
     fba:	4b1c      	ldr	r3, [pc, #112]	; (102c <system_init+0xec>)
     fbc:	4698      	mov	r8, r3
     fbe:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_1, TC4, _tc_get_timer());
     fc0:	4e1b      	ldr	r6, [pc, #108]	; (1030 <system_init+0xf0>)
     fc2:	47b0      	blx	r6
     fc4:	0002      	movs	r2, r0
     fc6:	491b      	ldr	r1, [pc, #108]	; (1034 <system_init+0xf4>)
     fc8:	481b      	ldr	r0, [pc, #108]	; (1038 <system_init+0xf8>)
     fca:	4d1c      	ldr	r5, [pc, #112]	; (103c <system_init+0xfc>)
     fcc:	47a8      	blx	r5
     fce:	6a22      	ldr	r2, [r4, #32]
     fd0:	2380      	movs	r3, #128	; 0x80
     fd2:	019b      	lsls	r3, r3, #6
     fd4:	4313      	orrs	r3, r2
     fd6:	6223      	str	r3, [r4, #32]
     fd8:	4643      	mov	r3, r8
     fda:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_2, TC5, _tc_get_timer());
     fdc:	47b0      	blx	r6
     fde:	0002      	movs	r2, r0
     fe0:	4917      	ldr	r1, [pc, #92]	; (1040 <system_init+0x100>)
     fe2:	4818      	ldr	r0, [pc, #96]	; (1044 <system_init+0x104>)
     fe4:	47a8      	blx	r5
     fe6:	6a22      	ldr	r2, [r4, #32]
     fe8:	2380      	movs	r3, #128	; 0x80
     fea:	021b      	lsls	r3, r3, #8
     fec:	4313      	orrs	r3, r2
     fee:	6223      	str	r3, [r4, #32]
     ff0:	4b15      	ldr	r3, [pc, #84]	; (1048 <system_init+0x108>)
     ff2:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_3, TC7, _tc_get_timer());
     ff4:	47b0      	blx	r6
     ff6:	0002      	movs	r2, r0
     ff8:	4914      	ldr	r1, [pc, #80]	; (104c <system_init+0x10c>)
     ffa:	4815      	ldr	r0, [pc, #84]	; (1050 <system_init+0x110>)
     ffc:	47a8      	blx	r5

	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
}
     ffe:	bc04      	pop	{r2}
    1000:	4690      	mov	r8, r2
    1002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1004:	000014a5 	.word	0x000014a5
    1008:	41004400 	.word	0x41004400
    100c:	40020100 	.word	0x40020100
    1010:	c0020000 	.word	0xc0020000
    1014:	c0000800 	.word	0xc0000800
    1018:	c0001000 	.word	0xc0001000
    101c:	00000ecd 	.word	0x00000ecd
    1020:	00000f15 	.word	0x00000f15
    1024:	40000400 	.word	0x40000400
    1028:	40000c00 	.word	0x40000c00
    102c:	0000431c 	.word	0x0000431c
    1030:	00001c19 	.word	0x00001c19
    1034:	42003000 	.word	0x42003000
    1038:	200005b4 	.word	0x200005b4
    103c:	000013cd 	.word	0x000013cd
    1040:	42003400 	.word	0x42003400
    1044:	2000057c 	.word	0x2000057c
    1048:	0000431d 	.word	0x0000431d
    104c:	42003c00 	.word	0x42003c00
    1050:	200005e8 	.word	0x200005e8

00001054 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1054:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1056:	4b04      	ldr	r3, [pc, #16]	; (1068 <delay_ms+0x14>)
    1058:	681c      	ldr	r4, [r3, #0]
    105a:	4b04      	ldr	r3, [pc, #16]	; (106c <delay_ms+0x18>)
    105c:	4798      	blx	r3
    105e:	0001      	movs	r1, r0
    1060:	0020      	movs	r0, r4
    1062:	4b03      	ldr	r3, [pc, #12]	; (1070 <delay_ms+0x1c>)
    1064:	4798      	blx	r3
}
    1066:	bd10      	pop	{r4, pc}
    1068:	20000568 	.word	0x20000568
    106c:	00001481 	.word	0x00001481
    1070:	0000149d 	.word	0x0000149d

00001074 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1074:	b570      	push	{r4, r5, r6, lr}
    1076:	0006      	movs	r6, r0
    1078:	000c      	movs	r4, r1
    107a:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    107c:	2800      	cmp	r0, #0
    107e:	d00d      	beq.n	109c <io_write+0x28>
    1080:	0008      	movs	r0, r1
    1082:	1e43      	subs	r3, r0, #1
    1084:	4198      	sbcs	r0, r3
    1086:	b2c0      	uxtb	r0, r0
    1088:	2234      	movs	r2, #52	; 0x34
    108a:	4905      	ldr	r1, [pc, #20]	; (10a0 <io_write+0x2c>)
    108c:	4b05      	ldr	r3, [pc, #20]	; (10a4 <io_write+0x30>)
    108e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1090:	6833      	ldr	r3, [r6, #0]
    1092:	002a      	movs	r2, r5
    1094:	0021      	movs	r1, r4
    1096:	0030      	movs	r0, r6
    1098:	4798      	blx	r3
}
    109a:	bd70      	pop	{r4, r5, r6, pc}
    109c:	2000      	movs	r0, #0
    109e:	e7f3      	b.n	1088 <io_write+0x14>
    10a0:	000020fc 	.word	0x000020fc
    10a4:	00001411 	.word	0x00001411

000010a8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    10a8:	b570      	push	{r4, r5, r6, lr}
    10aa:	0006      	movs	r6, r0
    10ac:	000c      	movs	r4, r1
    10ae:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    10b0:	2800      	cmp	r0, #0
    10b2:	d00d      	beq.n	10d0 <io_read+0x28>
    10b4:	0008      	movs	r0, r1
    10b6:	1e43      	subs	r3, r0, #1
    10b8:	4198      	sbcs	r0, r3
    10ba:	b2c0      	uxtb	r0, r0
    10bc:	223d      	movs	r2, #61	; 0x3d
    10be:	4905      	ldr	r1, [pc, #20]	; (10d4 <io_read+0x2c>)
    10c0:	4b05      	ldr	r3, [pc, #20]	; (10d8 <io_read+0x30>)
    10c2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    10c4:	6873      	ldr	r3, [r6, #4]
    10c6:	002a      	movs	r2, r5
    10c8:	0021      	movs	r1, r4
    10ca:	0030      	movs	r0, r6
    10cc:	4798      	blx	r3
}
    10ce:	bd70      	pop	{r4, r5, r6, pc}
    10d0:	2000      	movs	r0, #0
    10d2:	e7f3      	b.n	10bc <io_read+0x14>
    10d4:	000020fc 	.word	0x000020fc
    10d8:	00001411 	.word	0x00001411

000010dc <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    10dc:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    10de:	6943      	ldr	r3, [r0, #20]
    10e0:	2b00      	cmp	r3, #0
    10e2:	d000      	beq.n	10e6 <pwm_period_expired+0xa>
		descr->pwm_cb.period(descr);
    10e4:	4798      	blx	r3
	}
}
    10e6:	bd10      	pop	{r4, pc}

000010e8 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    10e8:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    10ea:	6983      	ldr	r3, [r0, #24]
    10ec:	2b00      	cmp	r3, #0
    10ee:	d000      	beq.n	10f2 <pwm_detect_fault+0xa>
		descr->pwm_cb.error(descr);
    10f0:	4798      	blx	r3
	}
}
    10f2:	bd10      	pop	{r4, pc}

000010f4 <pwm_init>:
{
    10f4:	b570      	push	{r4, r5, r6, lr}
    10f6:	0005      	movs	r5, r0
    10f8:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    10fa:	2800      	cmp	r0, #0
    10fc:	d011      	beq.n	1122 <pwm_init+0x2e>
    10fe:	0008      	movs	r0, r1
    1100:	1e43      	subs	r3, r0, #1
    1102:	4198      	sbcs	r0, r3
    1104:	b2c0      	uxtb	r0, r0
    1106:	2233      	movs	r2, #51	; 0x33
    1108:	4907      	ldr	r1, [pc, #28]	; (1128 <pwm_init+0x34>)
    110a:	4b08      	ldr	r3, [pc, #32]	; (112c <pwm_init+0x38>)
    110c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    110e:	0021      	movs	r1, r4
    1110:	0028      	movs	r0, r5
    1112:	4b07      	ldr	r3, [pc, #28]	; (1130 <pwm_init+0x3c>)
    1114:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1116:	4b07      	ldr	r3, [pc, #28]	; (1134 <pwm_init+0x40>)
    1118:	602b      	str	r3, [r5, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    111a:	4b07      	ldr	r3, [pc, #28]	; (1138 <pwm_init+0x44>)
    111c:	606b      	str	r3, [r5, #4]
}
    111e:	2000      	movs	r0, #0
    1120:	bd70      	pop	{r4, r5, r6, pc}
    1122:	2000      	movs	r0, #0
    1124:	e7ef      	b.n	1106 <pwm_init+0x12>
    1126:	46c0      	nop			; (mov r8, r8)
    1128:	00002110 	.word	0x00002110
    112c:	00001411 	.word	0x00001411
    1130:	00001b3d 	.word	0x00001b3d
    1134:	000010dd 	.word	0x000010dd
    1138:	000010e9 	.word	0x000010e9

0000113c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    113c:	b570      	push	{r4, r5, r6, lr}
    113e:	0004      	movs	r4, r0
    1140:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    1142:	2800      	cmp	r0, #0
    1144:	d016      	beq.n	1174 <spi_m_sync_init+0x38>
    1146:	0008      	movs	r0, r1
    1148:	1e43      	subs	r3, r0, #1
    114a:	4198      	sbcs	r0, r3
    114c:	b2c0      	uxtb	r0, r0
    114e:	2240      	movs	r2, #64	; 0x40
    1150:	4909      	ldr	r1, [pc, #36]	; (1178 <spi_m_sync_init+0x3c>)
    1152:	4b0a      	ldr	r3, [pc, #40]	; (117c <spi_m_sync_init+0x40>)
    1154:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1156:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1158:	1d20      	adds	r0, r4, #4
    115a:	0029      	movs	r1, r5
    115c:	4b08      	ldr	r3, [pc, #32]	; (1180 <spi_m_sync_init+0x44>)
    115e:	4798      	blx	r3

	if (rc < 0) {
    1160:	2800      	cmp	r0, #0
    1162:	db06      	blt.n	1172 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    1164:	4b07      	ldr	r3, [pc, #28]	; (1184 <spi_m_sync_init+0x48>)
    1166:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1168:	4b07      	ldr	r3, [pc, #28]	; (1188 <spi_m_sync_init+0x4c>)
    116a:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    116c:	4b07      	ldr	r3, [pc, #28]	; (118c <spi_m_sync_init+0x50>)
    116e:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    1170:	2000      	movs	r0, #0
}
    1172:	bd70      	pop	{r4, r5, r6, pc}
    1174:	2000      	movs	r0, #0
    1176:	e7ea      	b.n	114e <spi_m_sync_init+0x12>
    1178:	00002128 	.word	0x00002128
    117c:	00001411 	.word	0x00001411
    1180:	0000160d 	.word	0x0000160d
    1184:	ffff8000 	.word	0xffff8000
    1188:	00001265 	.word	0x00001265
    118c:	00001229 	.word	0x00001229

00001190 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    1190:	b510      	push	{r4, lr}
    1192:	0004      	movs	r4, r0
	ASSERT(spi);
    1194:	1e43      	subs	r3, r0, #1
    1196:	4198      	sbcs	r0, r3
    1198:	b2c0      	uxtb	r0, r0
    119a:	2257      	movs	r2, #87	; 0x57
    119c:	4903      	ldr	r1, [pc, #12]	; (11ac <spi_m_sync_enable+0x1c>)
    119e:	4b04      	ldr	r3, [pc, #16]	; (11b0 <spi_m_sync_enable+0x20>)
    11a0:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    11a2:	1d20      	adds	r0, r4, #4
    11a4:	4b03      	ldr	r3, [pc, #12]	; (11b4 <spi_m_sync_enable+0x24>)
    11a6:	4798      	blx	r3
}
    11a8:	bd10      	pop	{r4, pc}
    11aa:	46c0      	nop			; (mov r8, r8)
    11ac:	00002128 	.word	0x00002128
    11b0:	00001411 	.word	0x00001411
    11b4:	00001705 	.word	0x00001705

000011b8 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    11b8:	b510      	push	{r4, lr}
    11ba:	0004      	movs	r4, r0
	ASSERT(spi);
    11bc:	1e43      	subs	r3, r0, #1
    11be:	4198      	sbcs	r0, r3
    11c0:	b2c0      	uxtb	r0, r0
    11c2:	225d      	movs	r2, #93	; 0x5d
    11c4:	4903      	ldr	r1, [pc, #12]	; (11d4 <spi_m_sync_disable+0x1c>)
    11c6:	4b04      	ldr	r3, [pc, #16]	; (11d8 <spi_m_sync_disable+0x20>)
    11c8:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    11ca:	1d20      	adds	r0, r4, #4
    11cc:	4b03      	ldr	r3, [pc, #12]	; (11dc <spi_m_sync_disable+0x24>)
    11ce:	4798      	blx	r3
}
    11d0:	bd10      	pop	{r4, pc}
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	00002128 	.word	0x00002128
    11d8:	00001411 	.word	0x00001411
    11dc:	00001739 	.word	0x00001739

000011e0 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    11e0:	b530      	push	{r4, r5, lr}
    11e2:	b087      	sub	sp, #28
    11e4:	0004      	movs	r4, r0
    11e6:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    11e8:	2800      	cmp	r0, #0
    11ea:	d014      	beq.n	1216 <spi_m_sync_transfer+0x36>
    11ec:	0008      	movs	r0, r1
    11ee:	1e43      	subs	r3, r0, #1
    11f0:	4198      	sbcs	r0, r3
    11f2:	b2c0      	uxtb	r0, r0
    11f4:	22b3      	movs	r2, #179	; 0xb3
    11f6:	4909      	ldr	r1, [pc, #36]	; (121c <spi_m_sync_transfer+0x3c>)
    11f8:	4b09      	ldr	r3, [pc, #36]	; (1220 <spi_m_sync_transfer+0x40>)
    11fa:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    11fc:	682b      	ldr	r3, [r5, #0]
    11fe:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    1200:	686b      	ldr	r3, [r5, #4]
    1202:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    1204:	68ab      	ldr	r3, [r5, #8]
    1206:	9301      	str	r3, [sp, #4]
    1208:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    120a:	1d20      	adds	r0, r4, #4
    120c:	a903      	add	r1, sp, #12
    120e:	4b05      	ldr	r3, [pc, #20]	; (1224 <spi_m_sync_transfer+0x44>)
    1210:	4798      	blx	r3
}
    1212:	b007      	add	sp, #28
    1214:	bd30      	pop	{r4, r5, pc}
    1216:	2000      	movs	r0, #0
    1218:	e7ec      	b.n	11f4 <spi_m_sync_transfer+0x14>
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	00002128 	.word	0x00002128
    1220:	00001411 	.word	0x00001411
    1224:	0000176d 	.word	0x0000176d

00001228 <_spi_m_sync_io_write>:
{
    1228:	b570      	push	{r4, r5, r6, lr}
    122a:	b084      	sub	sp, #16
    122c:	0004      	movs	r4, r0
    122e:	000e      	movs	r6, r1
    1230:	0015      	movs	r5, r2
	ASSERT(io);
    1232:	1e43      	subs	r3, r0, #1
    1234:	4198      	sbcs	r0, r3
    1236:	b2c0      	uxtb	r0, r0
    1238:	22a3      	movs	r2, #163	; 0xa3
    123a:	4907      	ldr	r1, [pc, #28]	; (1258 <_spi_m_sync_io_write+0x30>)
    123c:	4b07      	ldr	r3, [pc, #28]	; (125c <_spi_m_sync_io_write+0x34>)
    123e:	4798      	blx	r3
	xfer.rxbuf = 0;
    1240:	2300      	movs	r3, #0
    1242:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1244:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1246:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1248:	0020      	movs	r0, r4
    124a:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    124c:	a901      	add	r1, sp, #4
    124e:	4b04      	ldr	r3, [pc, #16]	; (1260 <_spi_m_sync_io_write+0x38>)
    1250:	4798      	blx	r3
}
    1252:	b004      	add	sp, #16
    1254:	bd70      	pop	{r4, r5, r6, pc}
    1256:	46c0      	nop			; (mov r8, r8)
    1258:	00002128 	.word	0x00002128
    125c:	00001411 	.word	0x00001411
    1260:	000011e1 	.word	0x000011e1

00001264 <_spi_m_sync_io_read>:
{
    1264:	b570      	push	{r4, r5, r6, lr}
    1266:	b084      	sub	sp, #16
    1268:	0004      	movs	r4, r0
    126a:	000e      	movs	r6, r1
    126c:	0015      	movs	r5, r2
	ASSERT(io);
    126e:	1e43      	subs	r3, r0, #1
    1270:	4198      	sbcs	r0, r3
    1272:	b2c0      	uxtb	r0, r0
    1274:	2287      	movs	r2, #135	; 0x87
    1276:	4907      	ldr	r1, [pc, #28]	; (1294 <_spi_m_sync_io_read+0x30>)
    1278:	4b07      	ldr	r3, [pc, #28]	; (1298 <_spi_m_sync_io_read+0x34>)
    127a:	4798      	blx	r3
	xfer.rxbuf = buf;
    127c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    127e:	2300      	movs	r3, #0
    1280:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    1282:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1284:	0020      	movs	r0, r4
    1286:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    1288:	a901      	add	r1, sp, #4
    128a:	4b04      	ldr	r3, [pc, #16]	; (129c <_spi_m_sync_io_read+0x38>)
    128c:	4798      	blx	r3
}
    128e:	b004      	add	sp, #16
    1290:	bd70      	pop	{r4, r5, r6, pc}
    1292:	46c0      	nop			; (mov r8, r8)
    1294:	00002128 	.word	0x00002128
    1298:	00001411 	.word	0x00001411
    129c:	000011e1 	.word	0x000011e1

000012a0 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    12a0:	b570      	push	{r4, r5, r6, lr}
    12a2:	0004      	movs	r4, r0
    12a4:	000d      	movs	r5, r1
	ASSERT(spi && io);
    12a6:	2800      	cmp	r0, #0
    12a8:	d00b      	beq.n	12c2 <spi_m_sync_get_io_descriptor+0x22>
    12aa:	0008      	movs	r0, r1
    12ac:	1e43      	subs	r3, r0, #1
    12ae:	4198      	sbcs	r0, r3
    12b0:	b2c0      	uxtb	r0, r0
    12b2:	22bd      	movs	r2, #189	; 0xbd
    12b4:	4904      	ldr	r1, [pc, #16]	; (12c8 <spi_m_sync_get_io_descriptor+0x28>)
    12b6:	4b05      	ldr	r3, [pc, #20]	; (12cc <spi_m_sync_get_io_descriptor+0x2c>)
    12b8:	4798      	blx	r3
	*io = &spi->io;
    12ba:	340c      	adds	r4, #12
    12bc:	602c      	str	r4, [r5, #0]
	return 0;
}
    12be:	2000      	movs	r0, #0
    12c0:	bd70      	pop	{r4, r5, r6, pc}
    12c2:	2000      	movs	r0, #0
    12c4:	e7f5      	b.n	12b2 <spi_m_sync_get_io_descriptor+0x12>
    12c6:	46c0      	nop			; (mov r8, r8)
    12c8:	00002128 	.word	0x00002128
    12cc:	00001411 	.word	0x00001411

000012d0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    12d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12d2:	46ce      	mov	lr, r9
    12d4:	4647      	mov	r7, r8
    12d6:	b580      	push	{r7, lr}
    12d8:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    12da:	6803      	ldr	r3, [r0, #0]
    12dc:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    12de:	2b00      	cmp	r3, #0
    12e0:	d005      	beq.n	12ee <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    12e2:	688e      	ldr	r6, [r1, #8]
    12e4:	001c      	movs	r4, r3
    12e6:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    12e8:	2701      	movs	r7, #1
    12ea:	1abf      	subs	r7, r7, r2
    12ec:	e00d      	b.n	130a <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
    12ee:	4b12      	ldr	r3, [pc, #72]	; (1338 <timer_add_timer_task+0x68>)
    12f0:	4798      	blx	r3
		return;
    12f2:	e018      	b.n	1326 <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    12f4:	18fb      	adds	r3, r7, r3
    12f6:	68a0      	ldr	r0, [r4, #8]
    12f8:	4680      	mov	r8, r0
    12fa:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
    12fc:	42b3      	cmp	r3, r6
    12fe:	d20c      	bcs.n	131a <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1300:	6823      	ldr	r3, [r4, #0]
    1302:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1304:	2b00      	cmp	r3, #0
    1306:	d00b      	beq.n	1320 <timer_add_timer_task+0x50>
    1308:	001c      	movs	r4, r3
		if (it->time_label <= time) {
    130a:	6863      	ldr	r3, [r4, #4]
    130c:	4293      	cmp	r3, r2
    130e:	d8f1      	bhi.n	12f4 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
    1310:	68a0      	ldr	r0, [r4, #8]
    1312:	4680      	mov	r8, r0
    1314:	4443      	add	r3, r8
    1316:	1a9b      	subs	r3, r3, r2
    1318:	e7f0      	b.n	12fc <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
    131a:	45a4      	cmp	ip, r4
    131c:	d007      	beq.n	132e <timer_add_timer_task+0x5e>
    131e:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1320:	0020      	movs	r0, r4
    1322:	4b06      	ldr	r3, [pc, #24]	; (133c <timer_add_timer_task+0x6c>)
    1324:	4798      	blx	r3
	}
}
    1326:	bc0c      	pop	{r2, r3}
    1328:	4690      	mov	r8, r2
    132a:	4699      	mov	r9, r3
    132c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    132e:	4648      	mov	r0, r9
    1330:	4b01      	ldr	r3, [pc, #4]	; (1338 <timer_add_timer_task+0x68>)
    1332:	4798      	blx	r3
    1334:	e7f7      	b.n	1326 <timer_add_timer_task+0x56>
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	0000143d 	.word	0x0000143d
    133c:	00001469 	.word	0x00001469

00001340 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1340:	b5f0      	push	{r4, r5, r6, r7, lr}
    1342:	46c6      	mov	lr, r8
    1344:	b500      	push	{lr}
    1346:	b082      	sub	sp, #8
    1348:	0007      	movs	r7, r0
	return (void *)list->head;
    134a:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    134c:	6903      	ldr	r3, [r0, #16]
    134e:	3301      	adds	r3, #1
    1350:	4698      	mov	r8, r3
    1352:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1354:	7e03      	ldrb	r3, [r0, #24]
    1356:	07db      	lsls	r3, r3, #31
    1358:	d411      	bmi.n	137e <timer_process_counted+0x3e>
    135a:	7e03      	ldrb	r3, [r0, #24]
    135c:	079b      	lsls	r3, r3, #30
    135e:	d40e      	bmi.n	137e <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1360:	2c00      	cmp	r4, #0
    1362:	d010      	beq.n	1386 <timer_process_counted+0x46>
    1364:	4643      	mov	r3, r8
    1366:	6862      	ldr	r2, [r4, #4]
    1368:	1a9b      	subs	r3, r3, r2
    136a:	68a2      	ldr	r2, [r4, #8]
    136c:	4293      	cmp	r3, r2
    136e:	d30a      	bcc.n	1386 <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1370:	2314      	movs	r3, #20
    1372:	469c      	mov	ip, r3
    1374:	4484      	add	ip, r0
    1376:	4663      	mov	r3, ip
    1378:	9301      	str	r3, [sp, #4]
    137a:	4e12      	ldr	r6, [pc, #72]	; (13c4 <timer_process_counted+0x84>)
    137c:	e014      	b.n	13a8 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    137e:	7e3b      	ldrb	r3, [r7, #24]
    1380:	2202      	movs	r2, #2
    1382:	4313      	orrs	r3, r2
    1384:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    1386:	b002      	add	sp, #8
    1388:	bc04      	pop	{r2}
    138a:	4690      	mov	r8, r2
    138c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    138e:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
    1390:	68e3      	ldr	r3, [r4, #12]
    1392:	0020      	movs	r0, r4
    1394:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1396:	2d00      	cmp	r5, #0
    1398:	d0f5      	beq.n	1386 <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    139a:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    139c:	4643      	mov	r3, r8
    139e:	686a      	ldr	r2, [r5, #4]
    13a0:	1a9b      	subs	r3, r3, r2
    13a2:	68aa      	ldr	r2, [r5, #8]
    13a4:	4293      	cmp	r3, r2
    13a6:	d3ee      	bcc.n	1386 <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
    13a8:	9801      	ldr	r0, [sp, #4]
    13aa:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
    13ac:	7c23      	ldrb	r3, [r4, #16]
    13ae:	2b01      	cmp	r3, #1
    13b0:	d1ed      	bne.n	138e <timer_process_counted+0x4e>
			tmp->time_label = time;
    13b2:	4643      	mov	r3, r8
    13b4:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    13b6:	4642      	mov	r2, r8
    13b8:	0021      	movs	r1, r4
    13ba:	9801      	ldr	r0, [sp, #4]
    13bc:	4b02      	ldr	r3, [pc, #8]	; (13c8 <timer_process_counted+0x88>)
    13be:	4798      	blx	r3
    13c0:	e7e5      	b.n	138e <timer_process_counted+0x4e>
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	00001471 	.word	0x00001471
    13c8:	000012d1 	.word	0x000012d1

000013cc <timer_init>:
{
    13cc:	b570      	push	{r4, r5, r6, lr}
    13ce:	0005      	movs	r5, r0
    13d0:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    13d2:	2800      	cmp	r0, #0
    13d4:	d011      	beq.n	13fa <timer_init+0x2e>
    13d6:	0008      	movs	r0, r1
    13d8:	1e43      	subs	r3, r0, #1
    13da:	4198      	sbcs	r0, r3
    13dc:	b2c0      	uxtb	r0, r0
    13de:	223b      	movs	r2, #59	; 0x3b
    13e0:	4907      	ldr	r1, [pc, #28]	; (1400 <timer_init+0x34>)
    13e2:	4b08      	ldr	r3, [pc, #32]	; (1404 <timer_init+0x38>)
    13e4:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    13e6:	0021      	movs	r1, r4
    13e8:	0028      	movs	r0, r5
    13ea:	4b07      	ldr	r3, [pc, #28]	; (1408 <timer_init+0x3c>)
    13ec:	4798      	blx	r3
	descr->time                           = 0;
    13ee:	2300      	movs	r3, #0
    13f0:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    13f2:	4b06      	ldr	r3, [pc, #24]	; (140c <timer_init+0x40>)
    13f4:	602b      	str	r3, [r5, #0]
}
    13f6:	2000      	movs	r0, #0
    13f8:	bd70      	pop	{r4, r5, r6, pc}
    13fa:	2000      	movs	r0, #0
    13fc:	e7ef      	b.n	13de <timer_init+0x12>
    13fe:	46c0      	nop			; (mov r8, r8)
    1400:	00002144 	.word	0x00002144
    1404:	00001411 	.word	0x00001411
    1408:	00001a31 	.word	0x00001a31
    140c:	00001341 	.word	0x00001341

00001410 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1410:	2800      	cmp	r0, #0
    1412:	d100      	bne.n	1416 <assert+0x6>
		__asm("BKPT #0");
    1414:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1416:	4770      	bx	lr

00001418 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1418:	6803      	ldr	r3, [r0, #0]
    141a:	2b00      	cmp	r3, #0
    141c:	d00a      	beq.n	1434 <is_list_element+0x1c>
		if (it == element) {
    141e:	428b      	cmp	r3, r1
    1420:	d00a      	beq.n	1438 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	2b00      	cmp	r3, #0
    1426:	d003      	beq.n	1430 <is_list_element+0x18>
		if (it == element) {
    1428:	4299      	cmp	r1, r3
    142a:	d1fa      	bne.n	1422 <is_list_element+0xa>
			return true;
    142c:	2001      	movs	r0, #1
    142e:	e000      	b.n	1432 <is_list_element+0x1a>
		}
	}

	return false;
    1430:	2000      	movs	r0, #0
}
    1432:	4770      	bx	lr
	return false;
    1434:	2000      	movs	r0, #0
    1436:	e7fc      	b.n	1432 <is_list_element+0x1a>
			return true;
    1438:	2001      	movs	r0, #1
    143a:	e7fa      	b.n	1432 <is_list_element+0x1a>

0000143c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    143c:	b570      	push	{r4, r5, r6, lr}
    143e:	0004      	movs	r4, r0
    1440:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    1442:	4b06      	ldr	r3, [pc, #24]	; (145c <list_insert_as_head+0x20>)
    1444:	4798      	blx	r3
    1446:	2301      	movs	r3, #1
    1448:	4058      	eors	r0, r3
    144a:	b2c0      	uxtb	r0, r0
    144c:	2239      	movs	r2, #57	; 0x39
    144e:	4904      	ldr	r1, [pc, #16]	; (1460 <list_insert_as_head+0x24>)
    1450:	4b04      	ldr	r3, [pc, #16]	; (1464 <list_insert_as_head+0x28>)
    1452:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1454:	6823      	ldr	r3, [r4, #0]
    1456:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1458:	6025      	str	r5, [r4, #0]
}
    145a:	bd70      	pop	{r4, r5, r6, pc}
    145c:	00001419 	.word	0x00001419
    1460:	0000215c 	.word	0x0000215c
    1464:	00001411 	.word	0x00001411

00001468 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1468:	6803      	ldr	r3, [r0, #0]
    146a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    146c:	6001      	str	r1, [r0, #0]
}
    146e:	4770      	bx	lr

00001470 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1470:	6803      	ldr	r3, [r0, #0]
    1472:	2b00      	cmp	r3, #0
    1474:	d001      	beq.n	147a <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1476:	681a      	ldr	r2, [r3, #0]
    1478:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    147a:	0018      	movs	r0, r3
    147c:	4770      	bx	lr
	...

00001480 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    1480:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
    1482:	0103      	lsls	r3, r0, #4
    1484:	1a18      	subs	r0, r3, r0
    1486:	0140      	lsls	r0, r0, #5
    1488:	3002      	adds	r0, #2
    148a:	2103      	movs	r1, #3
    148c:	4b02      	ldr	r3, [pc, #8]	; (1498 <_get_cycles_for_ms+0x18>)
    148e:	4798      	blx	r3
    1490:	2364      	movs	r3, #100	; 0x64
    1492:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1494:	bd10      	pop	{r4, pc}
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	00001ca5 	.word	0x00001ca5

0000149c <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    149c:	3901      	subs	r1, #1
    149e:	d8fd      	bhi.n	149c <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    14a0:	4770      	bx	lr
	...

000014a4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    14a4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    14a6:	4a08      	ldr	r2, [pc, #32]	; (14c8 <_init_chip+0x24>)
    14a8:	6853      	ldr	r3, [r2, #4]
    14aa:	2110      	movs	r1, #16
    14ac:	430b      	orrs	r3, r1
    14ae:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    14b0:	4b06      	ldr	r3, [pc, #24]	; (14cc <_init_chip+0x28>)
    14b2:	4798      	blx	r3
	_sysctrl_init_sources();
    14b4:	4b06      	ldr	r3, [pc, #24]	; (14d0 <_init_chip+0x2c>)
    14b6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    14b8:	2010      	movs	r0, #16
    14ba:	4c06      	ldr	r4, [pc, #24]	; (14d4 <_init_chip+0x30>)
    14bc:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    14be:	4b06      	ldr	r3, [pc, #24]	; (14d8 <_init_chip+0x34>)
    14c0:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    14c2:	20ef      	movs	r0, #239	; 0xef
    14c4:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    14c6:	bd10      	pop	{r4, pc}
    14c8:	41004000 	.word	0x41004000
    14cc:	000015ad 	.word	0x000015ad
    14d0:	0000187d 	.word	0x0000187d
    14d4:	000014dd 	.word	0x000014dd
    14d8:	000018c1 	.word	0x000018c1

000014dc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    14dc:	07c3      	lsls	r3, r0, #31
    14de:	d509      	bpl.n	14f4 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    14e0:	4b27      	ldr	r3, [pc, #156]	; (1580 <_gclk_init_generators_by_fref+0xa4>)
    14e2:	2280      	movs	r2, #128	; 0x80
    14e4:	0052      	lsls	r2, r2, #1
    14e6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    14e8:	4a26      	ldr	r2, [pc, #152]	; (1584 <_gclk_init_generators_by_fref+0xa8>)
    14ea:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    14ec:	001a      	movs	r2, r3
    14ee:	7853      	ldrb	r3, [r2, #1]
    14f0:	09db      	lsrs	r3, r3, #7
    14f2:	d1fc      	bne.n	14ee <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    14f4:	0783      	lsls	r3, r0, #30
    14f6:	d509      	bpl.n	150c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    14f8:	4b21      	ldr	r3, [pc, #132]	; (1580 <_gclk_init_generators_by_fref+0xa4>)
    14fa:	2202      	movs	r2, #2
    14fc:	32ff      	adds	r2, #255	; 0xff
    14fe:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1500:	4a21      	ldr	r2, [pc, #132]	; (1588 <_gclk_init_generators_by_fref+0xac>)
    1502:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1504:	001a      	movs	r2, r3
    1506:	7853      	ldrb	r3, [r2, #1]
    1508:	09db      	lsrs	r3, r3, #7
    150a:	d1fc      	bne.n	1506 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    150c:	0743      	lsls	r3, r0, #29
    150e:	d508      	bpl.n	1522 <_gclk_init_generators_by_fref+0x46>
	((Gclk *)hw)->GENDIV.reg = data;
    1510:	4b1b      	ldr	r3, [pc, #108]	; (1580 <_gclk_init_generators_by_fref+0xa4>)
    1512:	4a1e      	ldr	r2, [pc, #120]	; (158c <_gclk_init_generators_by_fref+0xb0>)
    1514:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1516:	4a1e      	ldr	r2, [pc, #120]	; (1590 <_gclk_init_generators_by_fref+0xb4>)
    1518:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    151a:	001a      	movs	r2, r3
    151c:	7853      	ldrb	r3, [r2, #1]
    151e:	09db      	lsrs	r3, r3, #7
    1520:	d1fc      	bne.n	151c <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1522:	0703      	lsls	r3, r0, #28
    1524:	d509      	bpl.n	153a <_gclk_init_generators_by_fref+0x5e>
	((Gclk *)hw)->GENDIV.reg = data;
    1526:	4b16      	ldr	r3, [pc, #88]	; (1580 <_gclk_init_generators_by_fref+0xa4>)
    1528:	2204      	movs	r2, #4
    152a:	32ff      	adds	r2, #255	; 0xff
    152c:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    152e:	4a19      	ldr	r2, [pc, #100]	; (1594 <_gclk_init_generators_by_fref+0xb8>)
    1530:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1532:	001a      	movs	r2, r3
    1534:	7853      	ldrb	r3, [r2, #1]
    1536:	09db      	lsrs	r3, r3, #7
    1538:	d1fc      	bne.n	1534 <_gclk_init_generators_by_fref+0x58>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SRC | GCLK_GENCTRL_ID(3));
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    153a:	06c3      	lsls	r3, r0, #27
    153c:	d508      	bpl.n	1550 <_gclk_init_generators_by_fref+0x74>
	((Gclk *)hw)->GENDIV.reg = data;
    153e:	4b10      	ldr	r3, [pc, #64]	; (1580 <_gclk_init_generators_by_fref+0xa4>)
    1540:	4a15      	ldr	r2, [pc, #84]	; (1598 <_gclk_init_generators_by_fref+0xbc>)
    1542:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1544:	4a15      	ldr	r2, [pc, #84]	; (159c <_gclk_init_generators_by_fref+0xc0>)
    1546:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1548:	001a      	movs	r2, r3
    154a:	7853      	ldrb	r3, [r2, #1]
    154c:	09db      	lsrs	r3, r3, #7
    154e:	d1fc      	bne.n	154a <_gclk_init_generators_by_fref+0x6e>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    1550:	0683      	lsls	r3, r0, #26
    1552:	d508      	bpl.n	1566 <_gclk_init_generators_by_fref+0x8a>
	((Gclk *)hw)->GENDIV.reg = data;
    1554:	4b0a      	ldr	r3, [pc, #40]	; (1580 <_gclk_init_generators_by_fref+0xa4>)
    1556:	4a12      	ldr	r2, [pc, #72]	; (15a0 <_gclk_init_generators_by_fref+0xc4>)
    1558:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    155a:	4a12      	ldr	r2, [pc, #72]	; (15a4 <_gclk_init_generators_by_fref+0xc8>)
    155c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    155e:	001a      	movs	r2, r3
    1560:	7853      	ldrb	r3, [r2, #1]
    1562:	09db      	lsrs	r3, r3, #7
    1564:	d1fc      	bne.n	1560 <_gclk_init_generators_by_fref+0x84>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    1566:	0603      	lsls	r3, r0, #24
    1568:	d509      	bpl.n	157e <_gclk_init_generators_by_fref+0xa2>
	((Gclk *)hw)->GENDIV.reg = data;
    156a:	4b05      	ldr	r3, [pc, #20]	; (1580 <_gclk_init_generators_by_fref+0xa4>)
    156c:	2208      	movs	r2, #8
    156e:	32ff      	adds	r2, #255	; 0xff
    1570:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1572:	4a0d      	ldr	r2, [pc, #52]	; (15a8 <_gclk_init_generators_by_fref+0xcc>)
    1574:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1576:	001a      	movs	r2, r3
    1578:	7853      	ldrb	r3, [r2, #1]
    157a:	09db      	lsrs	r3, r3, #7
    157c:	d1fc      	bne.n	1578 <_gclk_init_generators_by_fref+0x9c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    157e:	4770      	bx	lr
    1580:	40000c00 	.word	0x40000c00
    1584:	00090800 	.word	0x00090800
    1588:	00090701 	.word	0x00090701
    158c:	00000802 	.word	0x00000802
    1590:	00090602 	.word	0x00090602
    1594:	00090603 	.word	0x00090603
    1598:	00000404 	.word	0x00000404
    159c:	00090604 	.word	0x00090604
    15a0:	00002005 	.word	0x00002005
    15a4:	00090305 	.word	0x00090305
    15a8:	00090307 	.word	0x00090307

000015ac <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    15ac:	4b06      	ldr	r3, [pc, #24]	; (15c8 <_pm_init+0x1c>)
    15ae:	7a1a      	ldrb	r2, [r3, #8]
    15b0:	b2d2      	uxtb	r2, r2
    15b2:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    15b4:	7a5a      	ldrb	r2, [r3, #9]
    15b6:	b2d2      	uxtb	r2, r2
    15b8:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    15ba:	7a9a      	ldrb	r2, [r3, #10]
    15bc:	b2d2      	uxtb	r2, r2
    15be:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    15c0:	7ada      	ldrb	r2, [r3, #11]
    15c2:	b2d2      	uxtb	r2, r2
    15c4:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    15c6:	4770      	bx	lr
    15c8:	40000400 	.word	0x40000400

000015cc <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    15cc:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    15ce:	07db      	lsls	r3, r3, #31
    15d0:	d409      	bmi.n	15e6 <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    15d2:	6803      	ldr	r3, [r0, #0]
    15d4:	2202      	movs	r2, #2
    15d6:	4313      	orrs	r3, r2
    15d8:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    15da:	3201      	adds	r2, #1
    15dc:	69c3      	ldr	r3, [r0, #28]
    15de:	421a      	tst	r2, r3
    15e0:	d1fc      	bne.n	15dc <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    15e2:	2000      	movs	r0, #0
}
    15e4:	4770      	bx	lr
		return ERR_BUSY;
    15e6:	2004      	movs	r0, #4
    15e8:	4240      	negs	r0, r0
    15ea:	e7fb      	b.n	15e4 <_spi_sync_enable+0x18>

000015ec <_spi_sync_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    15ec:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    15ee:	07db      	lsls	r3, r3, #31
    15f0:	d409      	bmi.n	1606 <_spi_sync_disable+0x1a>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    15f2:	6803      	ldr	r3, [r0, #0]
    15f4:	2202      	movs	r2, #2
    15f6:	4393      	bics	r3, r2
    15f8:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    15fa:	3201      	adds	r2, #1
    15fc:	69c3      	ldr	r3, [r0, #28]
    15fe:	421a      	tst	r2, r3
    1600:	d1fc      	bne.n	15fc <_spi_sync_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1602:	2000      	movs	r0, #0
}
    1604:	4770      	bx	lr
		return ERR_BUSY;
    1606:	2004      	movs	r0, #4
    1608:	4240      	negs	r0, r0
    160a:	e7fb      	b.n	1604 <_spi_sync_disable+0x18>

0000160c <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    160c:	b570      	push	{r4, r5, r6, lr}
    160e:	0005      	movs	r5, r0
    1610:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1612:	4b35      	ldr	r3, [pc, #212]	; (16e8 <_spi_m_sync_init+0xdc>)
    1614:	18cb      	adds	r3, r1, r3
    1616:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    1618:	b2db      	uxtb	r3, r3
    161a:	2b00      	cmp	r3, #0
    161c:	d00b      	beq.n	1636 <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    161e:	2800      	cmp	r0, #0
    1620:	d051      	beq.n	16c6 <_spi_m_sync_init+0xba>
    1622:	1e60      	subs	r0, r4, #1
    1624:	4184      	sbcs	r4, r0
    1626:	b2e0      	uxtb	r0, r4
    1628:	4a30      	ldr	r2, [pc, #192]	; (16ec <_spi_m_sync_init+0xe0>)
    162a:	4931      	ldr	r1, [pc, #196]	; (16f0 <_spi_m_sync_init+0xe4>)
    162c:	4b31      	ldr	r3, [pc, #196]	; (16f4 <_spi_m_sync_init+0xe8>)
    162e:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1630:	200d      	movs	r0, #13
    1632:	4240      	negs	r0, r0
    1634:	e046      	b.n	16c4 <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    1636:	2800      	cmp	r0, #0
    1638:	d14d      	bne.n	16d6 <_spi_m_sync_init+0xca>
    163a:	4a2c      	ldr	r2, [pc, #176]	; (16ec <_spi_m_sync_init+0xe0>)
    163c:	492c      	ldr	r1, [pc, #176]	; (16f0 <_spi_m_sync_init+0xe4>)
    163e:	2000      	movs	r0, #0
    1640:	4b2c      	ldr	r3, [pc, #176]	; (16f4 <_spi_m_sync_init+0xe8>)
    1642:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1644:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1646:	07db      	lsls	r3, r3, #31
    1648:	d418      	bmi.n	167c <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    164a:	2203      	movs	r2, #3
    164c:	69e3      	ldr	r3, [r4, #28]
    164e:	421a      	tst	r2, r3
    1650:	d1fc      	bne.n	164c <_spi_m_sync_init+0x40>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1652:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1654:	079b      	lsls	r3, r3, #30
    1656:	d50b      	bpl.n	1670 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1658:	6823      	ldr	r3, [r4, #0]
    165a:	2202      	movs	r2, #2
    165c:	4393      	bics	r3, r2
    165e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1660:	3201      	adds	r2, #1
    1662:	69e3      	ldr	r3, [r4, #28]
    1664:	421a      	tst	r2, r3
    1666:	d1fc      	bne.n	1662 <_spi_m_sync_init+0x56>
    1668:	2202      	movs	r2, #2
    166a:	69e3      	ldr	r3, [r4, #28]
    166c:	421a      	tst	r2, r3
    166e:	d1fc      	bne.n	166a <_spi_m_sync_init+0x5e>
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1670:	230d      	movs	r3, #13
    1672:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1674:	2203      	movs	r2, #3
    1676:	69e3      	ldr	r3, [r4, #28]
    1678:	421a      	tst	r2, r3
    167a:	d1fc      	bne.n	1676 <_spi_m_sync_init+0x6a>
    167c:	2201      	movs	r2, #1
    167e:	69e3      	ldr	r3, [r4, #28]
    1680:	421a      	tst	r2, r3
    1682:	d1fc      	bne.n	167e <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1684:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1686:	0020      	movs	r0, r4
    1688:	1e43      	subs	r3, r0, #1
    168a:	4198      	sbcs	r0, r3
    168c:	b2c0      	uxtb	r0, r0
    168e:	4a1a      	ldr	r2, [pc, #104]	; (16f8 <_spi_m_sync_init+0xec>)
    1690:	4917      	ldr	r1, [pc, #92]	; (16f0 <_spi_m_sync_init+0xe4>)
    1692:	4b18      	ldr	r3, [pc, #96]	; (16f4 <_spi_m_sync_init+0xe8>)
    1694:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1696:	4b19      	ldr	r3, [pc, #100]	; (16fc <_spi_m_sync_init+0xf0>)
    1698:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    169a:	2203      	movs	r2, #3
    169c:	69e3      	ldr	r3, [r4, #28]
    169e:	421a      	tst	r2, r3
    16a0:	d1fc      	bne.n	169c <_spi_m_sync_init+0x90>
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    16a2:	2380      	movs	r3, #128	; 0x80
    16a4:	029b      	lsls	r3, r3, #10
    16a6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    16a8:	2207      	movs	r2, #7
    16aa:	69e3      	ldr	r3, [r4, #28]
    16ac:	421a      	tst	r2, r3
    16ae:	d1fc      	bne.n	16aa <_spi_m_sync_init+0x9e>
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    16b0:	2302      	movs	r3, #2
    16b2:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    16b4:	2200      	movs	r2, #0
    16b6:	332e      	adds	r3, #46	; 0x2e
    16b8:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    16ba:	3b2f      	subs	r3, #47	; 0x2f
    16bc:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    16be:	4b10      	ldr	r3, [pc, #64]	; (1700 <_spi_m_sync_init+0xf4>)
    16c0:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    16c2:	2000      	movs	r0, #0
}
    16c4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    16c6:	4a09      	ldr	r2, [pc, #36]	; (16ec <_spi_m_sync_init+0xe0>)
    16c8:	4909      	ldr	r1, [pc, #36]	; (16f0 <_spi_m_sync_init+0xe4>)
    16ca:	2000      	movs	r0, #0
    16cc:	4b09      	ldr	r3, [pc, #36]	; (16f4 <_spi_m_sync_init+0xe8>)
    16ce:	4798      	blx	r3
		return ERR_INVALID_ARG;
    16d0:	200d      	movs	r0, #13
    16d2:	4240      	negs	r0, r0
    16d4:	e7f6      	b.n	16c4 <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    16d6:	0008      	movs	r0, r1
    16d8:	1e43      	subs	r3, r0, #1
    16da:	4198      	sbcs	r0, r3
    16dc:	b2c0      	uxtb	r0, r0
    16de:	4a03      	ldr	r2, [pc, #12]	; (16ec <_spi_m_sync_init+0xe0>)
    16e0:	4903      	ldr	r1, [pc, #12]	; (16f0 <_spi_m_sync_init+0xe4>)
    16e2:	4b04      	ldr	r3, [pc, #16]	; (16f4 <_spi_m_sync_init+0xe8>)
    16e4:	4798      	blx	r3
    16e6:	e7ad      	b.n	1644 <_spi_m_sync_init+0x38>
    16e8:	bdfff800 	.word	0xbdfff800
    16ec:	00000921 	.word	0x00000921
    16f0:	0000217c 	.word	0x0000217c
    16f4:	00001411 	.word	0x00001411
    16f8:	000008eb 	.word	0x000008eb
    16fc:	0011000c 	.word	0x0011000c
    1700:	000001ff 	.word	0x000001ff

00001704 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1704:	b510      	push	{r4, lr}
    1706:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    1708:	d00b      	beq.n	1722 <_spi_m_sync_enable+0x1e>
    170a:	6800      	ldr	r0, [r0, #0]
    170c:	1e43      	subs	r3, r0, #1
    170e:	4198      	sbcs	r0, r3
    1710:	b2c0      	uxtb	r0, r0
    1712:	4a05      	ldr	r2, [pc, #20]	; (1728 <_spi_m_sync_enable+0x24>)
    1714:	4905      	ldr	r1, [pc, #20]	; (172c <_spi_m_sync_enable+0x28>)
    1716:	4b06      	ldr	r3, [pc, #24]	; (1730 <_spi_m_sync_enable+0x2c>)
    1718:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    171a:	6820      	ldr	r0, [r4, #0]
    171c:	4b05      	ldr	r3, [pc, #20]	; (1734 <_spi_m_sync_enable+0x30>)
    171e:	4798      	blx	r3
}
    1720:	bd10      	pop	{r4, pc}
    1722:	2000      	movs	r0, #0
    1724:	e7f5      	b.n	1712 <_spi_m_sync_enable+0xe>
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	0000097c 	.word	0x0000097c
    172c:	0000217c 	.word	0x0000217c
    1730:	00001411 	.word	0x00001411
    1734:	000015cd 	.word	0x000015cd

00001738 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    1738:	b510      	push	{r4, lr}
    173a:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    173c:	d00b      	beq.n	1756 <_spi_m_sync_disable+0x1e>
    173e:	6800      	ldr	r0, [r0, #0]
    1740:	1e43      	subs	r3, r0, #1
    1742:	4198      	sbcs	r0, r3
    1744:	b2c0      	uxtb	r0, r0
    1746:	4a05      	ldr	r2, [pc, #20]	; (175c <_spi_m_sync_disable+0x24>)
    1748:	4905      	ldr	r1, [pc, #20]	; (1760 <_spi_m_sync_disable+0x28>)
    174a:	4b06      	ldr	r3, [pc, #24]	; (1764 <_spi_m_sync_disable+0x2c>)
    174c:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    174e:	6820      	ldr	r0, [r4, #0]
    1750:	4b05      	ldr	r3, [pc, #20]	; (1768 <_spi_m_sync_disable+0x30>)
    1752:	4798      	blx	r3
}
    1754:	bd10      	pop	{r4, pc}
    1756:	2000      	movs	r0, #0
    1758:	e7f5      	b.n	1746 <_spi_m_sync_disable+0xe>
    175a:	46c0      	nop			; (mov r8, r8)
    175c:	00000998 	.word	0x00000998
    1760:	0000217c 	.word	0x0000217c
    1764:	00001411 	.word	0x00001411
    1768:	000015ed 	.word	0x000015ed

0000176c <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    176c:	b5f0      	push	{r4, r5, r6, r7, lr}
    176e:	46de      	mov	lr, fp
    1770:	4657      	mov	r7, sl
    1772:	464e      	mov	r6, r9
    1774:	4645      	mov	r5, r8
    1776:	b5e0      	push	{r5, r6, r7, lr}
    1778:	b083      	sub	sp, #12
    177a:	4681      	mov	r9, r0
    177c:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    177e:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1780:	680b      	ldr	r3, [r1, #0]
    1782:	4698      	mov	r8, r3
    1784:	684d      	ldr	r5, [r1, #4]
    1786:	7903      	ldrb	r3, [r0, #4]
    1788:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    178a:	2800      	cmp	r0, #0
    178c:	d015      	beq.n	17ba <_spi_m_sync_trans+0x4e>
    178e:	0020      	movs	r0, r4
    1790:	1e43      	subs	r3, r0, #1
    1792:	4198      	sbcs	r0, r3
    1794:	b2c0      	uxtb	r0, r0
    1796:	4a36      	ldr	r2, [pc, #216]	; (1870 <_spi_m_sync_trans+0x104>)
    1798:	4936      	ldr	r1, [pc, #216]	; (1874 <_spi_m_sync_trans+0x108>)
    179a:	4b37      	ldr	r3, [pc, #220]	; (1878 <_spi_m_sync_trans+0x10c>)
    179c:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    179e:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    17a0:	075b      	lsls	r3, r3, #29
    17a2:	d13f      	bne.n	1824 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    17a4:	2303      	movs	r3, #3
    17a6:	69e0      	ldr	r0, [r4, #28]
    17a8:	4018      	ands	r0, r3
    17aa:	d1fc      	bne.n	17a6 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    17ac:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    17ae:	079b      	lsls	r3, r3, #30
    17b0:	d53b      	bpl.n	182a <_spi_m_sync_trans+0xbe>
    17b2:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    17b4:	2301      	movs	r3, #1
    17b6:	469c      	mov	ip, r3
    17b8:	e009      	b.n	17ce <_spi_m_sync_trans+0x62>
    17ba:	2000      	movs	r0, #0
    17bc:	e7eb      	b.n	1796 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    17be:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    17c0:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    17c2:	b25b      	sxtb	r3, r3
    17c4:	2b00      	cmp	r3, #0
    17c6:	db16      	blt.n	17f6 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    17c8:	68b3      	ldr	r3, [r6, #8]
    17ca:	4283      	cmp	r3, r0
    17cc:	d927      	bls.n	181e <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    17ce:	7e23      	ldrb	r3, [r4, #24]
    17d0:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    17d2:	2104      	movs	r1, #4
    17d4:	4219      	tst	r1, r3
    17d6:	d02b      	beq.n	1830 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    17d8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    17da:	2d00      	cmp	r5, #0
    17dc:	d0f0      	beq.n	17c0 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    17de:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    17e0:	9901      	ldr	r1, [sp, #4]
    17e2:	2901      	cmp	r1, #1
    17e4:	d9eb      	bls.n	17be <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    17e6:	0a3f      	lsrs	r7, r7, #8
    17e8:	706f      	strb	r7, [r5, #1]
    17ea:	3502      	adds	r5, #2
    17ec:	e7e8      	b.n	17c0 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    17ee:	2101      	movs	r1, #1
    17f0:	468b      	mov	fp, r1
    17f2:	44d8      	add	r8, fp
    17f4:	e037      	b.n	1866 <_spi_m_sync_trans+0xfa>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    17f6:	2301      	movs	r3, #1
    17f8:	425b      	negs	r3, r3
    17fa:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    17fc:	3381      	adds	r3, #129	; 0x81
    17fe:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1800:	2013      	movs	r0, #19
    1802:	4240      	negs	r0, r0
	tmp &= mask;
    1804:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1806:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1808:	4213      	tst	r3, r2
    180a:	d0fc      	beq.n	1806 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    180c:	2303      	movs	r3, #3
    180e:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1810:	b003      	add	sp, #12
    1812:	bc3c      	pop	{r2, r3, r4, r5}
    1814:	4690      	mov	r8, r2
    1816:	4699      	mov	r9, r3
    1818:	46a2      	mov	sl, r4
    181a:	46ab      	mov	fp, r5
    181c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    181e:	4293      	cmp	r3, r2
    1820:	d8d5      	bhi.n	17ce <_spi_m_sync_trans+0x62>
    1822:	e7ef      	b.n	1804 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    1824:	2004      	movs	r0, #4
    1826:	4240      	negs	r0, r0
    1828:	e7f2      	b.n	1810 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    182a:	2014      	movs	r0, #20
    182c:	4240      	negs	r0, r0
    182e:	e7ef      	b.n	1810 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1830:	4290      	cmp	r0, r2
    1832:	d8c6      	bhi.n	17c2 <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1834:	4667      	mov	r7, ip
    1836:	421f      	tst	r7, r3
    1838:	d0c3      	beq.n	17c2 <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    183a:	464f      	mov	r7, r9
    183c:	88ff      	ldrh	r7, [r7, #6]
    183e:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    1840:	4647      	mov	r7, r8
    1842:	2f00      	cmp	r7, #0
    1844:	d00f      	beq.n	1866 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    1846:	783f      	ldrb	r7, [r7, #0]
    1848:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    184a:	9901      	ldr	r1, [sp, #4]
    184c:	2901      	cmp	r1, #1
    184e:	d9ce      	bls.n	17ee <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    1850:	4647      	mov	r7, r8
    1852:	787f      	ldrb	r7, [r7, #1]
    1854:	023f      	lsls	r7, r7, #8
    1856:	46bb      	mov	fp, r7
    1858:	4657      	mov	r7, sl
    185a:	4659      	mov	r1, fp
    185c:	430f      	orrs	r7, r1
    185e:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    1860:	2102      	movs	r1, #2
    1862:	468b      	mov	fp, r1
    1864:	44d8      	add	r8, fp
	ctrl->txcnt++;
    1866:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1868:	4657      	mov	r7, sl
    186a:	62a7      	str	r7, [r4, #40]	; 0x28
    186c:	e7a9      	b.n	17c2 <_spi_m_sync_trans+0x56>
    186e:	46c0      	nop			; (mov r8, r8)
    1870:	00000a81 	.word	0x00000a81
    1874:	0000217c 	.word	0x0000217c
    1878:	00001411 	.word	0x00001411

0000187c <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    187c:	4b0e      	ldr	r3, [pc, #56]	; (18b8 <_sysctrl_init_sources+0x3c>)
    187e:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1880:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1882:	480e      	ldr	r0, [pc, #56]	; (18bc <_sysctrl_init_sources+0x40>)
    1884:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1886:	0f92      	lsrs	r2, r2, #30
    1888:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    188a:	2002      	movs	r0, #2
    188c:	4302      	orrs	r2, r0
    188e:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1890:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1892:	699a      	ldr	r2, [r3, #24]
    1894:	4302      	orrs	r2, r0
    1896:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1898:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    189a:	211f      	movs	r1, #31
    189c:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    189e:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    18a0:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    18a2:	2208      	movs	r2, #8
    18a4:	68cb      	ldr	r3, [r1, #12]
    18a6:	421a      	tst	r2, r3
    18a8:	d0fc      	beq.n	18a4 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    18aa:	4a03      	ldr	r2, [pc, #12]	; (18b8 <_sysctrl_init_sources+0x3c>)
    18ac:	6a13      	ldr	r3, [r2, #32]
    18ae:	2180      	movs	r1, #128	; 0x80
    18b0:	430b      	orrs	r3, r1
    18b2:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    18b4:	4770      	bx	lr
    18b6:	46c0      	nop			; (mov r8, r8)
    18b8:	40000800 	.word	0x40000800
    18bc:	0fff0000 	.word	0x0fff0000

000018c0 <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    18c0:	b530      	push	{r4, r5, lr}
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    18c2:	2202      	movs	r2, #2
    18c4:	4b25      	ldr	r3, [pc, #148]	; (195c <_sysctrl_init_referenced_generators+0x9c>)
    18c6:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    18c8:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    18ca:	320e      	adds	r2, #14
    18cc:	68cb      	ldr	r3, [r1, #12]
    18ce:	421a      	tst	r2, r3
    18d0:	d0fc      	beq.n	18cc <_sysctrl_init_referenced_generators+0xc>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    18d2:	4a23      	ldr	r2, [pc, #140]	; (1960 <_sysctrl_init_referenced_generators+0xa0>)
    18d4:	4b21      	ldr	r3, [pc, #132]	; (195c <_sysctrl_init_referenced_generators+0x9c>)
    18d6:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    18d8:	4b22      	ldr	r3, [pc, #136]	; (1964 <_sysctrl_init_referenced_generators+0xa4>)
    18da:	681b      	ldr	r3, [r3, #0]
    18dc:	0e9b      	lsrs	r3, r3, #26
    18de:	2b3f      	cmp	r3, #63	; 0x3f
    18e0:	d032      	beq.n	1948 <_sysctrl_init_referenced_generators+0x88>
    18e2:	029b      	lsls	r3, r3, #10
    18e4:	2280      	movs	r2, #128	; 0x80
    18e6:	0092      	lsls	r2, r2, #2
    18e8:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    18ea:	4b1c      	ldr	r3, [pc, #112]	; (195c <_sysctrl_init_referenced_generators+0x9c>)
    18ec:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    18ee:	2293      	movs	r2, #147	; 0x93
    18f0:	0052      	lsls	r2, r2, #1
    18f2:	849a      	strh	r2, [r3, #36]	; 0x24
	((Gclk *)hw)->CLKCTRL.reg = data;
    18f4:	491c      	ldr	r1, [pc, #112]	; (1968 <_sysctrl_init_referenced_generators+0xa8>)
    18f6:	4a1d      	ldr	r2, [pc, #116]	; (196c <_sysctrl_init_referenced_generators+0xac>)
    18f8:	8051      	strh	r1, [r2, #2]
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    18fa:	2102      	movs	r1, #2
    18fc:	2244      	movs	r2, #68	; 0x44
    18fe:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    1900:	3a2d      	subs	r2, #45	; 0x2d
    1902:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    1904:	3209      	adds	r2, #9
    1906:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1908:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    190a:	075b      	lsls	r3, r3, #29
    190c:	d51f      	bpl.n	194e <_sysctrl_init_referenced_generators+0x8e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    190e:	4913      	ldr	r1, [pc, #76]	; (195c <_sysctrl_init_referenced_generators+0x9c>)
	tmp &= mask;
    1910:	3a10      	subs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1912:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    1914:	421a      	tst	r2, r3
    1916:	d0fc      	beq.n	1912 <_sysctrl_init_referenced_generators+0x52>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    1918:	4a10      	ldr	r2, [pc, #64]	; (195c <_sysctrl_init_referenced_generators+0x9c>)
    191a:	2350      	movs	r3, #80	; 0x50
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    191c:	2004      	movs	r0, #4
    191e:	2401      	movs	r4, #1
    1920:	2502      	movs	r5, #2
    1922:	5cd1      	ldrb	r1, [r2, r3]
    1924:	4201      	tst	r1, r0
    1926:	d105      	bne.n	1934 <_sysctrl_init_referenced_generators+0x74>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    1928:	5cd1      	ldrb	r1, [r2, r3]
    192a:	4221      	tst	r1, r4
    192c:	d102      	bne.n	1934 <_sysctrl_init_referenced_generators+0x74>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    192e:	5cd1      	ldrb	r1, [r2, r3]
    1930:	4229      	tst	r1, r5
    1932:	d0f6      	beq.n	1922 <_sysctrl_init_referenced_generators+0x62>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    1934:	4a0d      	ldr	r2, [pc, #52]	; (196c <_sysctrl_init_referenced_generators+0xac>)
    1936:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    1938:	09db      	lsrs	r3, r3, #7
    193a:	d1fc      	bne.n	1936 <_sysctrl_init_referenced_generators+0x76>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    193c:	4a07      	ldr	r2, [pc, #28]	; (195c <_sysctrl_init_referenced_generators+0x9c>)
    193e:	6993      	ldr	r3, [r2, #24]
    1940:	2102      	movs	r1, #2
    1942:	438b      	bics	r3, r1
    1944:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1946:	bd30      	pop	{r4, r5, pc}
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1948:	22fc      	movs	r2, #252	; 0xfc
    194a:	01d2      	lsls	r2, r2, #7
    194c:	e7cd      	b.n	18ea <_sysctrl_init_referenced_generators+0x2a>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    194e:	4903      	ldr	r1, [pc, #12]	; (195c <_sysctrl_init_referenced_generators+0x9c>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1950:	2210      	movs	r2, #16
    1952:	68cb      	ldr	r3, [r1, #12]
    1954:	421a      	tst	r2, r3
    1956:	d0fc      	beq.n	1952 <_sysctrl_init_referenced_generators+0x92>
    1958:	e7de      	b.n	1918 <_sysctrl_init_referenced_generators+0x58>
    195a:	46c0      	nop			; (mov r8, r8)
    195c:	40000800 	.word	0x40000800
    1960:	0401bb80 	.word	0x0401bb80
    1964:	00806024 	.word	0x00806024
    1968:	00004401 	.word	0x00004401
    196c:	40000c00 	.word	0x40000c00

00001970 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    1970:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    1972:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1974:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1976:	07d2      	lsls	r2, r2, #31
    1978:	d400      	bmi.n	197c <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    197a:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    197c:	2201      	movs	r2, #1
    197e:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    1980:	6803      	ldr	r3, [r0, #0]
    1982:	4798      	blx	r3
}
    1984:	e7f9      	b.n	197a <tc_interrupt_handler+0xa>
	...

00001988 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    1988:	4b0c      	ldr	r3, [pc, #48]	; (19bc <_tc_init_irq_param+0x34>)
    198a:	4298      	cmp	r0, r3
    198c:	d009      	beq.n	19a2 <_tc_init_irq_param+0x1a>
		_tc3_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC4) {
    198e:	4b0c      	ldr	r3, [pc, #48]	; (19c0 <_tc_init_irq_param+0x38>)
    1990:	4298      	cmp	r0, r3
    1992:	d009      	beq.n	19a8 <_tc_init_irq_param+0x20>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    1994:	4b0b      	ldr	r3, [pc, #44]	; (19c4 <_tc_init_irq_param+0x3c>)
    1996:	4298      	cmp	r0, r3
    1998:	d009      	beq.n	19ae <_tc_init_irq_param+0x26>
		_tc5_dev = (struct _timer_device *)dev;
	}
	if (hw == TC7) {
    199a:	4b0b      	ldr	r3, [pc, #44]	; (19c8 <_tc_init_irq_param+0x40>)
    199c:	4298      	cmp	r0, r3
    199e:	d009      	beq.n	19b4 <_tc_init_irq_param+0x2c>
		_tc7_dev = (struct _timer_device *)dev;
	}
}
    19a0:	4770      	bx	lr
		_tc3_dev = (struct _pwm_device *)dev;
    19a2:	4b0a      	ldr	r3, [pc, #40]	; (19cc <_tc_init_irq_param+0x44>)
    19a4:	6019      	str	r1, [r3, #0]
    19a6:	e7f8      	b.n	199a <_tc_init_irq_param+0x12>
		_tc4_dev = (struct _timer_device *)dev;
    19a8:	4b08      	ldr	r3, [pc, #32]	; (19cc <_tc_init_irq_param+0x44>)
    19aa:	6059      	str	r1, [r3, #4]
    19ac:	e7f8      	b.n	19a0 <_tc_init_irq_param+0x18>
		_tc5_dev = (struct _timer_device *)dev;
    19ae:	4b07      	ldr	r3, [pc, #28]	; (19cc <_tc_init_irq_param+0x44>)
    19b0:	6099      	str	r1, [r3, #8]
    19b2:	e7f5      	b.n	19a0 <_tc_init_irq_param+0x18>
		_tc7_dev = (struct _timer_device *)dev;
    19b4:	4b05      	ldr	r3, [pc, #20]	; (19cc <_tc_init_irq_param+0x44>)
    19b6:	60d9      	str	r1, [r3, #12]
}
    19b8:	e7f2      	b.n	19a0 <_tc_init_irq_param+0x18>
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	42002c00 	.word	0x42002c00
    19c0:	42003000 	.word	0x42003000
    19c4:	42003400 	.word	0x42003400
    19c8:	42003c00 	.word	0x42003c00
    19cc:	2000056c 	.word	0x2000056c

000019d0 <get_tc_index>:
{
    19d0:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    19d2:	4b13      	ldr	r3, [pc, #76]	; (1a20 <get_tc_index+0x50>)
    19d4:	18c3      	adds	r3, r0, r3
    19d6:	0a9b      	lsrs	r3, r3, #10
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    19d8:	3303      	adds	r3, #3
    19da:	b2db      	uxtb	r3, r3
		if (_tcs[i].number == tc_offset) {
    19dc:	4a11      	ldr	r2, [pc, #68]	; (1a24 <get_tc_index+0x54>)
    19de:	7812      	ldrb	r2, [r2, #0]
    19e0:	429a      	cmp	r2, r3
    19e2:	d01a      	beq.n	1a1a <get_tc_index+0x4a>
    19e4:	4a0f      	ldr	r2, [pc, #60]	; (1a24 <get_tc_index+0x54>)
    19e6:	7d12      	ldrb	r2, [r2, #20]
    19e8:	429a      	cmp	r2, r3
    19ea:	d012      	beq.n	1a12 <get_tc_index+0x42>
    19ec:	2228      	movs	r2, #40	; 0x28
    19ee:	490d      	ldr	r1, [pc, #52]	; (1a24 <get_tc_index+0x54>)
    19f0:	5c8a      	ldrb	r2, [r1, r2]
    19f2:	429a      	cmp	r2, r3
    19f4:	d00f      	beq.n	1a16 <get_tc_index+0x46>
    19f6:	223c      	movs	r2, #60	; 0x3c
    19f8:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    19fa:	2003      	movs	r0, #3
		if (_tcs[i].number == tc_offset) {
    19fc:	429a      	cmp	r2, r3
    19fe:	d00d      	beq.n	1a1c <get_tc_index+0x4c>
	ASSERT(false);
    1a00:	22fa      	movs	r2, #250	; 0xfa
    1a02:	32ff      	adds	r2, #255	; 0xff
    1a04:	4908      	ldr	r1, [pc, #32]	; (1a28 <get_tc_index+0x58>)
    1a06:	2000      	movs	r0, #0
    1a08:	4b08      	ldr	r3, [pc, #32]	; (1a2c <get_tc_index+0x5c>)
    1a0a:	4798      	blx	r3
	return -1;
    1a0c:	2001      	movs	r0, #1
    1a0e:	4240      	negs	r0, r0
}
    1a10:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1a12:	2001      	movs	r0, #1
    1a14:	e002      	b.n	1a1c <get_tc_index+0x4c>
    1a16:	2002      	movs	r0, #2
    1a18:	e000      	b.n	1a1c <get_tc_index+0x4c>
    1a1a:	2000      	movs	r0, #0
			return i;
    1a1c:	b240      	sxtb	r0, r0
    1a1e:	e7f7      	b.n	1a10 <get_tc_index+0x40>
    1a20:	bdffd400 	.word	0xbdffd400
    1a24:	20000004 	.word	0x20000004
    1a28:	00002198 	.word	0x00002198
    1a2c:	00001411 	.word	0x00001411

00001a30 <_timer_init>:
{
    1a30:	b570      	push	{r4, r5, r6, lr}
    1a32:	0006      	movs	r6, r0
    1a34:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    1a36:	0008      	movs	r0, r1
    1a38:	4b39      	ldr	r3, [pc, #228]	; (1b20 <_timer_init+0xf0>)
    1a3a:	4798      	blx	r3
    1a3c:	0005      	movs	r5, r0
	device->hw = hw;
    1a3e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1a40:	2291      	movs	r2, #145	; 0x91
    1a42:	4938      	ldr	r1, [pc, #224]	; (1b24 <_timer_init+0xf4>)
    1a44:	2001      	movs	r0, #1
    1a46:	4b38      	ldr	r3, [pc, #224]	; (1b28 <_timer_init+0xf8>)
    1a48:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1a4a:	7be3      	ldrb	r3, [r4, #15]
    1a4c:	09db      	lsrs	r3, r3, #7
    1a4e:	d1fc      	bne.n	1a4a <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1a50:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1a52:	079b      	lsls	r3, r3, #30
    1a54:	d504      	bpl.n	1a60 <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1a56:	2300      	movs	r3, #0
    1a58:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1a5a:	7be3      	ldrb	r3, [r4, #15]
    1a5c:	09db      	lsrs	r3, r3, #7
    1a5e:	d1fc      	bne.n	1a5a <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1a60:	2301      	movs	r3, #1
    1a62:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1a64:	7be3      	ldrb	r3, [r4, #15]
    1a66:	09db      	lsrs	r3, r3, #7
    1a68:	d1fc      	bne.n	1a64 <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1a6a:	00ab      	lsls	r3, r5, #2
    1a6c:	195b      	adds	r3, r3, r5
    1a6e:	009a      	lsls	r2, r3, #2
    1a70:	4b2e      	ldr	r3, [pc, #184]	; (1b2c <_timer_init+0xfc>)
    1a72:	189b      	adds	r3, r3, r2
    1a74:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1a76:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1a78:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1a7a:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1a7c:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1a7e:	8163      	strh	r3, [r4, #10]
    1a80:	230c      	movs	r3, #12
    1a82:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1a84:	2b08      	cmp	r3, #8
    1a86:	d02c      	beq.n	1ae2 <_timer_init+0xb2>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1a88:	2b00      	cmp	r3, #0
    1a8a:	d137      	bne.n	1afc <_timer_init+0xcc>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1a8c:	4927      	ldr	r1, [pc, #156]	; (1b2c <_timer_init+0xfc>)
    1a8e:	00ab      	lsls	r3, r5, #2
    1a90:	195a      	adds	r2, r3, r5
    1a92:	0092      	lsls	r2, r2, #2
    1a94:	188a      	adds	r2, r1, r2
    1a96:	8992      	ldrh	r2, [r2, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1a98:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    1a9a:	195b      	adds	r3, r3, r5
    1a9c:	009b      	lsls	r3, r3, #2
    1a9e:	18cb      	adds	r3, r1, r3
    1aa0:	8a1b      	ldrh	r3, [r3, #16]
    1aa2:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1aa4:	2301      	movs	r3, #1
    1aa6:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    1aa8:	0031      	movs	r1, r6
    1aaa:	0020      	movs	r0, r4
    1aac:	4b20      	ldr	r3, [pc, #128]	; (1b30 <_timer_init+0x100>)
    1aae:	4798      	blx	r3
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1ab0:	4b20      	ldr	r3, [pc, #128]	; (1b34 <_timer_init+0x104>)
    1ab2:	469c      	mov	ip, r3
    1ab4:	4464      	add	r4, ip
    1ab6:	0aa4      	lsrs	r4, r4, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1ab8:	3412      	adds	r4, #18
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1aba:	b2e3      	uxtb	r3, r4
    1abc:	0622      	lsls	r2, r4, #24
    1abe:	d40e      	bmi.n	1ade <_timer_init+0xae>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ac0:	221f      	movs	r2, #31
    1ac2:	401a      	ands	r2, r3
    1ac4:	2301      	movs	r3, #1
    1ac6:	4093      	lsls	r3, r2
    1ac8:	4a1b      	ldr	r2, [pc, #108]	; (1b38 <_timer_init+0x108>)
    1aca:	2180      	movs	r1, #128	; 0x80
    1acc:	5053      	str	r3, [r2, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1ace:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ad2:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ad6:	3101      	adds	r1, #1
    1ad8:	31ff      	adds	r1, #255	; 0xff
    1ada:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1adc:	6013      	str	r3, [r2, #0]
}
    1ade:	2000      	movs	r0, #0
    1ae0:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1ae2:	4912      	ldr	r1, [pc, #72]	; (1b2c <_timer_init+0xfc>)
    1ae4:	00ab      	lsls	r3, r5, #2
    1ae6:	195a      	adds	r2, r3, r5
    1ae8:	0092      	lsls	r2, r2, #2
    1aea:	188a      	adds	r2, r1, r2
    1aec:	68d2      	ldr	r2, [r2, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1aee:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1af0:	195b      	adds	r3, r3, r5
    1af2:	009b      	lsls	r3, r3, #2
    1af4:	18cb      	adds	r3, r1, r3
    1af6:	691b      	ldr	r3, [r3, #16]
    1af8:	61e3      	str	r3, [r4, #28]
    1afa:	e7d3      	b.n	1aa4 <_timer_init+0x74>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    1afc:	2b04      	cmp	r3, #4
    1afe:	d1d1      	bne.n	1aa4 <_timer_init+0x74>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    1b00:	490a      	ldr	r1, [pc, #40]	; (1b2c <_timer_init+0xfc>)
    1b02:	00ab      	lsls	r3, r5, #2
    1b04:	195a      	adds	r2, r3, r5
    1b06:	0092      	lsls	r2, r2, #2
    1b08:	188a      	adds	r2, r1, r2
    1b0a:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1b0c:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    1b0e:	7c12      	ldrb	r2, [r2, #16]
    1b10:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1b12:	195b      	adds	r3, r3, r5
    1b14:	009b      	lsls	r3, r3, #2
    1b16:	18cb      	adds	r3, r1, r3
    1b18:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    1b1a:	7523      	strb	r3, [r4, #20]
    1b1c:	e7c2      	b.n	1aa4 <_timer_init+0x74>
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	000019d1 	.word	0x000019d1
    1b24:	00002198 	.word	0x00002198
    1b28:	00001411 	.word	0x00001411
    1b2c:	20000004 	.word	0x20000004
    1b30:	00001989 	.word	0x00001989
    1b34:	bdffd400 	.word	0xbdffd400
    1b38:	e000e100 	.word	0xe000e100

00001b3c <_pwm_init>:
{
    1b3c:	b570      	push	{r4, r5, r6, lr}
    1b3e:	0005      	movs	r5, r0
    1b40:	000c      	movs	r4, r1
	int8_t i   = get_tc_index(hw);
    1b42:	0008      	movs	r0, r1
    1b44:	4b2f      	ldr	r3, [pc, #188]	; (1c04 <_pwm_init+0xc8>)
    1b46:	4798      	blx	r3
	device->hw = hw;
    1b48:	612c      	str	r4, [r5, #16]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1b4a:	7be3      	ldrb	r3, [r4, #15]
    1b4c:	09db      	lsrs	r3, r3, #7
    1b4e:	d1fc      	bne.n	1b4a <_pwm_init+0xe>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1b50:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1b52:	079b      	lsls	r3, r3, #30
    1b54:	d504      	bpl.n	1b60 <_pwm_init+0x24>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1b56:	2300      	movs	r3, #0
    1b58:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1b5a:	7be3      	ldrb	r3, [r4, #15]
    1b5c:	09db      	lsrs	r3, r3, #7
    1b5e:	d1fc      	bne.n	1b5a <_pwm_init+0x1e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1b60:	2301      	movs	r3, #1
    1b62:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1b64:	7be3      	ldrb	r3, [r4, #15]
    1b66:	09db      	lsrs	r3, r3, #7
    1b68:	d1fc      	bne.n	1b64 <_pwm_init+0x28>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1b6a:	0083      	lsls	r3, r0, #2
    1b6c:	181b      	adds	r3, r3, r0
    1b6e:	009a      	lsls	r2, r3, #2
    1b70:	4b25      	ldr	r3, [pc, #148]	; (1c08 <_pwm_init+0xcc>)
    1b72:	189b      	adds	r3, r3, r2
    1b74:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1b76:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1b78:	7919      	ldrb	r1, [r3, #4]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1b7a:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1b7c:	88db      	ldrh	r3, [r3, #6]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1b7e:	8163      	strh	r3, [r4, #10]
    1b80:	230c      	movs	r3, #12
    1b82:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1b84:	2b08      	cmp	r3, #8
    1b86:	d02a      	beq.n	1bde <_pwm_init+0xa2>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d135      	bne.n	1bf8 <_pwm_init+0xbc>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1b8c:	491e      	ldr	r1, [pc, #120]	; (1c08 <_pwm_init+0xcc>)
    1b8e:	0083      	lsls	r3, r0, #2
    1b90:	181a      	adds	r2, r3, r0
    1b92:	0092      	lsls	r2, r2, #2
    1b94:	188a      	adds	r2, r1, r2
    1b96:	8992      	ldrh	r2, [r2, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1b98:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    1b9a:	1818      	adds	r0, r3, r0
    1b9c:	0080      	lsls	r0, r0, #2
    1b9e:	1808      	adds	r0, r1, r0
    1ba0:	8a03      	ldrh	r3, [r0, #16]
    1ba2:	8363      	strh	r3, [r4, #26]
	_tc_init_irq_param(hw, (void *)device);
    1ba4:	0029      	movs	r1, r5
    1ba6:	0020      	movs	r0, r4
    1ba8:	4b18      	ldr	r3, [pc, #96]	; (1c0c <_pwm_init+0xd0>)
    1baa:	4798      	blx	r3
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1bac:	4b18      	ldr	r3, [pc, #96]	; (1c10 <_pwm_init+0xd4>)
    1bae:	469c      	mov	ip, r3
    1bb0:	4464      	add	r4, ip
    1bb2:	0aa4      	lsrs	r4, r4, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1bb4:	3412      	adds	r4, #18
  if ((int32_t)(IRQn) >= 0)
    1bb6:	b2e3      	uxtb	r3, r4
    1bb8:	0622      	lsls	r2, r4, #24
    1bba:	d420      	bmi.n	1bfe <_pwm_init+0xc2>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bbc:	221f      	movs	r2, #31
    1bbe:	401a      	ands	r2, r3
    1bc0:	2301      	movs	r3, #1
    1bc2:	4093      	lsls	r3, r2
    1bc4:	4a13      	ldr	r2, [pc, #76]	; (1c14 <_pwm_init+0xd8>)
    1bc6:	2180      	movs	r1, #128	; 0x80
    1bc8:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1bca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bce:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bd2:	3101      	adds	r1, #1
    1bd4:	31ff      	adds	r1, #255	; 0xff
    1bd6:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bd8:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
    1bda:	2000      	movs	r0, #0
}
    1bdc:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1bde:	490a      	ldr	r1, [pc, #40]	; (1c08 <_pwm_init+0xcc>)
    1be0:	0083      	lsls	r3, r0, #2
    1be2:	181a      	adds	r2, r3, r0
    1be4:	0092      	lsls	r2, r2, #2
    1be6:	188a      	adds	r2, r1, r2
    1be8:	68d2      	ldr	r2, [r2, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1bea:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1bec:	1818      	adds	r0, r3, r0
    1bee:	0080      	lsls	r0, r0, #2
    1bf0:	1808      	adds	r0, r1, r0
    1bf2:	6903      	ldr	r3, [r0, #16]
    1bf4:	61e3      	str	r3, [r4, #28]
    1bf6:	e7d5      	b.n	1ba4 <_pwm_init+0x68>
		return ERR_INVALID_DATA;
    1bf8:	2001      	movs	r0, #1
    1bfa:	4240      	negs	r0, r0
    1bfc:	e7ee      	b.n	1bdc <_pwm_init+0xa0>
	return ERR_NONE;
    1bfe:	2000      	movs	r0, #0
    1c00:	e7ec      	b.n	1bdc <_pwm_init+0xa0>
    1c02:	46c0      	nop			; (mov r8, r8)
    1c04:	000019d1 	.word	0x000019d1
    1c08:	20000004 	.word	0x20000004
    1c0c:	00001989 	.word	0x00001989
    1c10:	bdffd400 	.word	0xbdffd400
    1c14:	e000e100 	.word	0xe000e100

00001c18 <_tc_get_timer>:
}
    1c18:	2000      	movs	r0, #0
    1c1a:	4770      	bx	lr

00001c1c <_tc_get_pwm>:
}
    1c1c:	2000      	movs	r0, #0
    1c1e:	4770      	bx	lr

00001c20 <TC3_Handler>:
{
    1c20:	b570      	push	{r4, r5, r6, lr}
	tc_pwm_interrupt_handler(_tc3_dev);
    1c22:	4b0c      	ldr	r3, [pc, #48]	; (1c54 <TC3_Handler+0x34>)
    1c24:	681d      	ldr	r5, [r3, #0]
	void *const hw = device->hw;
    1c26:	692c      	ldr	r4, [r5, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1c28:	7ba3      	ldrb	r3, [r4, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1c2a:	07db      	lsls	r3, r3, #31
    1c2c:	d506      	bpl.n	1c3c <TC3_Handler+0x1c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1c2e:	2301      	movs	r3, #1
    1c30:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_period_cb) {
    1c32:	682b      	ldr	r3, [r5, #0]
    1c34:	2b00      	cmp	r3, #0
    1c36:	d001      	beq.n	1c3c <TC3_Handler+0x1c>
			device->callback.pwm_period_cb(device);
    1c38:	0028      	movs	r0, r5
    1c3a:	4798      	blx	r3
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1c3c:	7b63      	ldrb	r3, [r4, #13]
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1c3e:	079b      	lsls	r3, r3, #30
    1c40:	d506      	bpl.n	1c50 <TC3_Handler+0x30>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1c42:	2302      	movs	r3, #2
    1c44:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_error_cb) {
    1c46:	686b      	ldr	r3, [r5, #4]
    1c48:	2b00      	cmp	r3, #0
    1c4a:	d001      	beq.n	1c50 <TC3_Handler+0x30>
			device->callback.pwm_error_cb(device);
    1c4c:	0028      	movs	r0, r5
    1c4e:	4798      	blx	r3
}
    1c50:	bd70      	pop	{r4, r5, r6, pc}
    1c52:	46c0      	nop			; (mov r8, r8)
    1c54:	2000056c 	.word	0x2000056c

00001c58 <TC4_Handler>:
{
    1c58:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    1c5a:	4b02      	ldr	r3, [pc, #8]	; (1c64 <TC4_Handler+0xc>)
    1c5c:	6858      	ldr	r0, [r3, #4]
    1c5e:	4b02      	ldr	r3, [pc, #8]	; (1c68 <TC4_Handler+0x10>)
    1c60:	4798      	blx	r3
}
    1c62:	bd10      	pop	{r4, pc}
    1c64:	2000056c 	.word	0x2000056c
    1c68:	00001971 	.word	0x00001971

00001c6c <TC5_Handler>:
{
    1c6c:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc5_dev);
    1c6e:	4b02      	ldr	r3, [pc, #8]	; (1c78 <TC5_Handler+0xc>)
    1c70:	6898      	ldr	r0, [r3, #8]
    1c72:	4b02      	ldr	r3, [pc, #8]	; (1c7c <TC5_Handler+0x10>)
    1c74:	4798      	blx	r3
}
    1c76:	bd10      	pop	{r4, pc}
    1c78:	2000056c 	.word	0x2000056c
    1c7c:	00001971 	.word	0x00001971

00001c80 <TC7_Handler>:
{
    1c80:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc7_dev);
    1c82:	4b02      	ldr	r3, [pc, #8]	; (1c8c <TC7_Handler+0xc>)
    1c84:	68d8      	ldr	r0, [r3, #12]
    1c86:	4b02      	ldr	r3, [pc, #8]	; (1c90 <TC7_Handler+0x10>)
    1c88:	4798      	blx	r3
}
    1c8a:	bd10      	pop	{r4, pc}
    1c8c:	2000056c 	.word	0x2000056c
    1c90:	00001971 	.word	0x00001971

00001c94 <__aeabi_atexit>:
    1c94:	000b      	movs	r3, r1
    1c96:	b510      	push	{r4, lr}
    1c98:	0001      	movs	r1, r0
    1c9a:	0018      	movs	r0, r3
    1c9c:	f000 f8b8 	bl	1e10 <__cxa_atexit>
    1ca0:	bd10      	pop	{r4, pc}
    1ca2:	46c0      	nop			; (mov r8, r8)

00001ca4 <__udivsi3>:
    1ca4:	2200      	movs	r2, #0
    1ca6:	0843      	lsrs	r3, r0, #1
    1ca8:	428b      	cmp	r3, r1
    1caa:	d374      	bcc.n	1d96 <__udivsi3+0xf2>
    1cac:	0903      	lsrs	r3, r0, #4
    1cae:	428b      	cmp	r3, r1
    1cb0:	d35f      	bcc.n	1d72 <__udivsi3+0xce>
    1cb2:	0a03      	lsrs	r3, r0, #8
    1cb4:	428b      	cmp	r3, r1
    1cb6:	d344      	bcc.n	1d42 <__udivsi3+0x9e>
    1cb8:	0b03      	lsrs	r3, r0, #12
    1cba:	428b      	cmp	r3, r1
    1cbc:	d328      	bcc.n	1d10 <__udivsi3+0x6c>
    1cbe:	0c03      	lsrs	r3, r0, #16
    1cc0:	428b      	cmp	r3, r1
    1cc2:	d30d      	bcc.n	1ce0 <__udivsi3+0x3c>
    1cc4:	22ff      	movs	r2, #255	; 0xff
    1cc6:	0209      	lsls	r1, r1, #8
    1cc8:	ba12      	rev	r2, r2
    1cca:	0c03      	lsrs	r3, r0, #16
    1ccc:	428b      	cmp	r3, r1
    1cce:	d302      	bcc.n	1cd6 <__udivsi3+0x32>
    1cd0:	1212      	asrs	r2, r2, #8
    1cd2:	0209      	lsls	r1, r1, #8
    1cd4:	d065      	beq.n	1da2 <__udivsi3+0xfe>
    1cd6:	0b03      	lsrs	r3, r0, #12
    1cd8:	428b      	cmp	r3, r1
    1cda:	d319      	bcc.n	1d10 <__udivsi3+0x6c>
    1cdc:	e000      	b.n	1ce0 <__udivsi3+0x3c>
    1cde:	0a09      	lsrs	r1, r1, #8
    1ce0:	0bc3      	lsrs	r3, r0, #15
    1ce2:	428b      	cmp	r3, r1
    1ce4:	d301      	bcc.n	1cea <__udivsi3+0x46>
    1ce6:	03cb      	lsls	r3, r1, #15
    1ce8:	1ac0      	subs	r0, r0, r3
    1cea:	4152      	adcs	r2, r2
    1cec:	0b83      	lsrs	r3, r0, #14
    1cee:	428b      	cmp	r3, r1
    1cf0:	d301      	bcc.n	1cf6 <__udivsi3+0x52>
    1cf2:	038b      	lsls	r3, r1, #14
    1cf4:	1ac0      	subs	r0, r0, r3
    1cf6:	4152      	adcs	r2, r2
    1cf8:	0b43      	lsrs	r3, r0, #13
    1cfa:	428b      	cmp	r3, r1
    1cfc:	d301      	bcc.n	1d02 <__udivsi3+0x5e>
    1cfe:	034b      	lsls	r3, r1, #13
    1d00:	1ac0      	subs	r0, r0, r3
    1d02:	4152      	adcs	r2, r2
    1d04:	0b03      	lsrs	r3, r0, #12
    1d06:	428b      	cmp	r3, r1
    1d08:	d301      	bcc.n	1d0e <__udivsi3+0x6a>
    1d0a:	030b      	lsls	r3, r1, #12
    1d0c:	1ac0      	subs	r0, r0, r3
    1d0e:	4152      	adcs	r2, r2
    1d10:	0ac3      	lsrs	r3, r0, #11
    1d12:	428b      	cmp	r3, r1
    1d14:	d301      	bcc.n	1d1a <__udivsi3+0x76>
    1d16:	02cb      	lsls	r3, r1, #11
    1d18:	1ac0      	subs	r0, r0, r3
    1d1a:	4152      	adcs	r2, r2
    1d1c:	0a83      	lsrs	r3, r0, #10
    1d1e:	428b      	cmp	r3, r1
    1d20:	d301      	bcc.n	1d26 <__udivsi3+0x82>
    1d22:	028b      	lsls	r3, r1, #10
    1d24:	1ac0      	subs	r0, r0, r3
    1d26:	4152      	adcs	r2, r2
    1d28:	0a43      	lsrs	r3, r0, #9
    1d2a:	428b      	cmp	r3, r1
    1d2c:	d301      	bcc.n	1d32 <__udivsi3+0x8e>
    1d2e:	024b      	lsls	r3, r1, #9
    1d30:	1ac0      	subs	r0, r0, r3
    1d32:	4152      	adcs	r2, r2
    1d34:	0a03      	lsrs	r3, r0, #8
    1d36:	428b      	cmp	r3, r1
    1d38:	d301      	bcc.n	1d3e <__udivsi3+0x9a>
    1d3a:	020b      	lsls	r3, r1, #8
    1d3c:	1ac0      	subs	r0, r0, r3
    1d3e:	4152      	adcs	r2, r2
    1d40:	d2cd      	bcs.n	1cde <__udivsi3+0x3a>
    1d42:	09c3      	lsrs	r3, r0, #7
    1d44:	428b      	cmp	r3, r1
    1d46:	d301      	bcc.n	1d4c <__udivsi3+0xa8>
    1d48:	01cb      	lsls	r3, r1, #7
    1d4a:	1ac0      	subs	r0, r0, r3
    1d4c:	4152      	adcs	r2, r2
    1d4e:	0983      	lsrs	r3, r0, #6
    1d50:	428b      	cmp	r3, r1
    1d52:	d301      	bcc.n	1d58 <__udivsi3+0xb4>
    1d54:	018b      	lsls	r3, r1, #6
    1d56:	1ac0      	subs	r0, r0, r3
    1d58:	4152      	adcs	r2, r2
    1d5a:	0943      	lsrs	r3, r0, #5
    1d5c:	428b      	cmp	r3, r1
    1d5e:	d301      	bcc.n	1d64 <__udivsi3+0xc0>
    1d60:	014b      	lsls	r3, r1, #5
    1d62:	1ac0      	subs	r0, r0, r3
    1d64:	4152      	adcs	r2, r2
    1d66:	0903      	lsrs	r3, r0, #4
    1d68:	428b      	cmp	r3, r1
    1d6a:	d301      	bcc.n	1d70 <__udivsi3+0xcc>
    1d6c:	010b      	lsls	r3, r1, #4
    1d6e:	1ac0      	subs	r0, r0, r3
    1d70:	4152      	adcs	r2, r2
    1d72:	08c3      	lsrs	r3, r0, #3
    1d74:	428b      	cmp	r3, r1
    1d76:	d301      	bcc.n	1d7c <__udivsi3+0xd8>
    1d78:	00cb      	lsls	r3, r1, #3
    1d7a:	1ac0      	subs	r0, r0, r3
    1d7c:	4152      	adcs	r2, r2
    1d7e:	0883      	lsrs	r3, r0, #2
    1d80:	428b      	cmp	r3, r1
    1d82:	d301      	bcc.n	1d88 <__udivsi3+0xe4>
    1d84:	008b      	lsls	r3, r1, #2
    1d86:	1ac0      	subs	r0, r0, r3
    1d88:	4152      	adcs	r2, r2
    1d8a:	0843      	lsrs	r3, r0, #1
    1d8c:	428b      	cmp	r3, r1
    1d8e:	d301      	bcc.n	1d94 <__udivsi3+0xf0>
    1d90:	004b      	lsls	r3, r1, #1
    1d92:	1ac0      	subs	r0, r0, r3
    1d94:	4152      	adcs	r2, r2
    1d96:	1a41      	subs	r1, r0, r1
    1d98:	d200      	bcs.n	1d9c <__udivsi3+0xf8>
    1d9a:	4601      	mov	r1, r0
    1d9c:	4152      	adcs	r2, r2
    1d9e:	4610      	mov	r0, r2
    1da0:	4770      	bx	lr
    1da2:	e7ff      	b.n	1da4 <__udivsi3+0x100>
    1da4:	b501      	push	{r0, lr}
    1da6:	2000      	movs	r0, #0
    1da8:	f000 f806 	bl	1db8 <__aeabi_idiv0>
    1dac:	bd02      	pop	{r1, pc}
    1dae:	46c0      	nop			; (mov r8, r8)

00001db0 <__aeabi_uidivmod>:
    1db0:	2900      	cmp	r1, #0
    1db2:	d0f7      	beq.n	1da4 <__udivsi3+0x100>
    1db4:	e776      	b.n	1ca4 <__udivsi3>
    1db6:	4770      	bx	lr

00001db8 <__aeabi_idiv0>:
    1db8:	4770      	bx	lr
    1dba:	46c0      	nop			; (mov r8, r8)

00001dbc <__aeabi_lmul>:
    1dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dbe:	46ce      	mov	lr, r9
    1dc0:	4647      	mov	r7, r8
    1dc2:	0415      	lsls	r5, r2, #16
    1dc4:	0c2d      	lsrs	r5, r5, #16
    1dc6:	002e      	movs	r6, r5
    1dc8:	b580      	push	{r7, lr}
    1dca:	0407      	lsls	r7, r0, #16
    1dcc:	0c14      	lsrs	r4, r2, #16
    1dce:	0c3f      	lsrs	r7, r7, #16
    1dd0:	4699      	mov	r9, r3
    1dd2:	0c03      	lsrs	r3, r0, #16
    1dd4:	437e      	muls	r6, r7
    1dd6:	435d      	muls	r5, r3
    1dd8:	4367      	muls	r7, r4
    1dda:	4363      	muls	r3, r4
    1ddc:	197f      	adds	r7, r7, r5
    1dde:	0c34      	lsrs	r4, r6, #16
    1de0:	19e4      	adds	r4, r4, r7
    1de2:	469c      	mov	ip, r3
    1de4:	42a5      	cmp	r5, r4
    1de6:	d903      	bls.n	1df0 <__aeabi_lmul+0x34>
    1de8:	2380      	movs	r3, #128	; 0x80
    1dea:	025b      	lsls	r3, r3, #9
    1dec:	4698      	mov	r8, r3
    1dee:	44c4      	add	ip, r8
    1df0:	464b      	mov	r3, r9
    1df2:	4351      	muls	r1, r2
    1df4:	4343      	muls	r3, r0
    1df6:	0436      	lsls	r6, r6, #16
    1df8:	0c36      	lsrs	r6, r6, #16
    1dfa:	0c25      	lsrs	r5, r4, #16
    1dfc:	0424      	lsls	r4, r4, #16
    1dfe:	4465      	add	r5, ip
    1e00:	19a4      	adds	r4, r4, r6
    1e02:	1859      	adds	r1, r3, r1
    1e04:	1949      	adds	r1, r1, r5
    1e06:	0020      	movs	r0, r4
    1e08:	bc0c      	pop	{r2, r3}
    1e0a:	4690      	mov	r8, r2
    1e0c:	4699      	mov	r9, r3
    1e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001e10 <__cxa_atexit>:
    1e10:	b510      	push	{r4, lr}
    1e12:	0013      	movs	r3, r2
    1e14:	000a      	movs	r2, r1
    1e16:	0001      	movs	r1, r0
    1e18:	2002      	movs	r0, #2
    1e1a:	f000 f881 	bl	1f20 <__register_exitproc>
    1e1e:	bd10      	pop	{r4, pc}

00001e20 <__libc_init_array>:
    1e20:	b570      	push	{r4, r5, r6, lr}
    1e22:	4e0d      	ldr	r6, [pc, #52]	; (1e58 <__libc_init_array+0x38>)
    1e24:	4d0d      	ldr	r5, [pc, #52]	; (1e5c <__libc_init_array+0x3c>)
    1e26:	2400      	movs	r4, #0
    1e28:	1bad      	subs	r5, r5, r6
    1e2a:	10ad      	asrs	r5, r5, #2
    1e2c:	d005      	beq.n	1e3a <__libc_init_array+0x1a>
    1e2e:	00a3      	lsls	r3, r4, #2
    1e30:	58f3      	ldr	r3, [r6, r3]
    1e32:	3401      	adds	r4, #1
    1e34:	4798      	blx	r3
    1e36:	42a5      	cmp	r5, r4
    1e38:	d1f9      	bne.n	1e2e <__libc_init_array+0xe>
    1e3a:	f000 f9b9 	bl	21b0 <_init>
    1e3e:	4e08      	ldr	r6, [pc, #32]	; (1e60 <__libc_init_array+0x40>)
    1e40:	4d08      	ldr	r5, [pc, #32]	; (1e64 <__libc_init_array+0x44>)
    1e42:	2400      	movs	r4, #0
    1e44:	1bad      	subs	r5, r5, r6
    1e46:	10ad      	asrs	r5, r5, #2
    1e48:	d005      	beq.n	1e56 <__libc_init_array+0x36>
    1e4a:	00a3      	lsls	r3, r4, #2
    1e4c:	58f3      	ldr	r3, [r6, r3]
    1e4e:	3401      	adds	r4, #1
    1e50:	4798      	blx	r3
    1e52:	42a5      	cmp	r5, r4
    1e54:	d1f9      	bne.n	1e4a <__libc_init_array+0x2a>
    1e56:	bd70      	pop	{r4, r5, r6, pc}
    1e58:	000021bc 	.word	0x000021bc
    1e5c:	000021bc 	.word	0x000021bc
    1e60:	000021bc 	.word	0x000021bc
    1e64:	000021c8 	.word	0x000021c8

00001e68 <memcpy>:
    1e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e6a:	0005      	movs	r5, r0
    1e6c:	2a0f      	cmp	r2, #15
    1e6e:	d92f      	bls.n	1ed0 <memcpy+0x68>
    1e70:	000b      	movs	r3, r1
    1e72:	4303      	orrs	r3, r0
    1e74:	079b      	lsls	r3, r3, #30
    1e76:	d134      	bne.n	1ee2 <memcpy+0x7a>
    1e78:	0016      	movs	r6, r2
    1e7a:	000c      	movs	r4, r1
    1e7c:	0003      	movs	r3, r0
    1e7e:	3e10      	subs	r6, #16
    1e80:	0935      	lsrs	r5, r6, #4
    1e82:	3501      	adds	r5, #1
    1e84:	012d      	lsls	r5, r5, #4
    1e86:	1945      	adds	r5, r0, r5
    1e88:	6827      	ldr	r7, [r4, #0]
    1e8a:	601f      	str	r7, [r3, #0]
    1e8c:	6867      	ldr	r7, [r4, #4]
    1e8e:	605f      	str	r7, [r3, #4]
    1e90:	68a7      	ldr	r7, [r4, #8]
    1e92:	609f      	str	r7, [r3, #8]
    1e94:	68e7      	ldr	r7, [r4, #12]
    1e96:	3410      	adds	r4, #16
    1e98:	60df      	str	r7, [r3, #12]
    1e9a:	3310      	adds	r3, #16
    1e9c:	429d      	cmp	r5, r3
    1e9e:	d1f3      	bne.n	1e88 <memcpy+0x20>
    1ea0:	230f      	movs	r3, #15
    1ea2:	439e      	bics	r6, r3
    1ea4:	3610      	adds	r6, #16
    1ea6:	1985      	adds	r5, r0, r6
    1ea8:	1989      	adds	r1, r1, r6
    1eaa:	4013      	ands	r3, r2
    1eac:	2b03      	cmp	r3, #3
    1eae:	d91a      	bls.n	1ee6 <memcpy+0x7e>
    1eb0:	1f1e      	subs	r6, r3, #4
    1eb2:	2300      	movs	r3, #0
    1eb4:	08b4      	lsrs	r4, r6, #2
    1eb6:	3401      	adds	r4, #1
    1eb8:	00a4      	lsls	r4, r4, #2
    1eba:	58cf      	ldr	r7, [r1, r3]
    1ebc:	50ef      	str	r7, [r5, r3]
    1ebe:	3304      	adds	r3, #4
    1ec0:	42a3      	cmp	r3, r4
    1ec2:	d1fa      	bne.n	1eba <memcpy+0x52>
    1ec4:	2403      	movs	r4, #3
    1ec6:	43a6      	bics	r6, r4
    1ec8:	1d33      	adds	r3, r6, #4
    1eca:	4022      	ands	r2, r4
    1ecc:	18c9      	adds	r1, r1, r3
    1ece:	18ed      	adds	r5, r5, r3
    1ed0:	2a00      	cmp	r2, #0
    1ed2:	d005      	beq.n	1ee0 <memcpy+0x78>
    1ed4:	2300      	movs	r3, #0
    1ed6:	5ccc      	ldrb	r4, [r1, r3]
    1ed8:	54ec      	strb	r4, [r5, r3]
    1eda:	3301      	adds	r3, #1
    1edc:	4293      	cmp	r3, r2
    1ede:	d1fa      	bne.n	1ed6 <memcpy+0x6e>
    1ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ee2:	0005      	movs	r5, r0
    1ee4:	e7f6      	b.n	1ed4 <memcpy+0x6c>
    1ee6:	001a      	movs	r2, r3
    1ee8:	e7f2      	b.n	1ed0 <memcpy+0x68>
    1eea:	46c0      	nop			; (mov r8, r8)

00001eec <rand>:
    1eec:	b510      	push	{r4, lr}
    1eee:	4b09      	ldr	r3, [pc, #36]	; (1f14 <rand+0x28>)
    1ef0:	4a09      	ldr	r2, [pc, #36]	; (1f18 <rand+0x2c>)
    1ef2:	681c      	ldr	r4, [r3, #0]
    1ef4:	4b09      	ldr	r3, [pc, #36]	; (1f1c <rand+0x30>)
    1ef6:	34a8      	adds	r4, #168	; 0xa8
    1ef8:	6820      	ldr	r0, [r4, #0]
    1efa:	6861      	ldr	r1, [r4, #4]
    1efc:	f7ff ff5e 	bl	1dbc <__aeabi_lmul>
    1f00:	2201      	movs	r2, #1
    1f02:	2300      	movs	r3, #0
    1f04:	1880      	adds	r0, r0, r2
    1f06:	4159      	adcs	r1, r3
    1f08:	6020      	str	r0, [r4, #0]
    1f0a:	6061      	str	r1, [r4, #4]
    1f0c:	0048      	lsls	r0, r1, #1
    1f0e:	0840      	lsrs	r0, r0, #1
    1f10:	bd10      	pop	{r4, pc}
    1f12:	46c0      	nop			; (mov r8, r8)
    1f14:	20000054 	.word	0x20000054
    1f18:	4c957f2d 	.word	0x4c957f2d
    1f1c:	5851f42d 	.word	0x5851f42d

00001f20 <__register_exitproc>:
    1f20:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f22:	464e      	mov	r6, r9
    1f24:	4645      	mov	r5, r8
    1f26:	46de      	mov	lr, fp
    1f28:	4657      	mov	r7, sl
    1f2a:	b5e0      	push	{r5, r6, r7, lr}
    1f2c:	4d36      	ldr	r5, [pc, #216]	; (2008 <STACK_SIZE+0x8>)
    1f2e:	b083      	sub	sp, #12
    1f30:	0006      	movs	r6, r0
    1f32:	6828      	ldr	r0, [r5, #0]
    1f34:	4698      	mov	r8, r3
    1f36:	000f      	movs	r7, r1
    1f38:	4691      	mov	r9, r2
    1f3a:	f000 f899 	bl	2070 <__retarget_lock_acquire_recursive>
    1f3e:	4b33      	ldr	r3, [pc, #204]	; (200c <STACK_SIZE+0xc>)
    1f40:	681c      	ldr	r4, [r3, #0]
    1f42:	23a4      	movs	r3, #164	; 0xa4
    1f44:	005b      	lsls	r3, r3, #1
    1f46:	58e0      	ldr	r0, [r4, r3]
    1f48:	2800      	cmp	r0, #0
    1f4a:	d052      	beq.n	1ff2 <__register_exitproc+0xd2>
    1f4c:	6843      	ldr	r3, [r0, #4]
    1f4e:	2b1f      	cmp	r3, #31
    1f50:	dc13      	bgt.n	1f7a <__register_exitproc+0x5a>
    1f52:	1c5a      	adds	r2, r3, #1
    1f54:	9201      	str	r2, [sp, #4]
    1f56:	2e00      	cmp	r6, #0
    1f58:	d128      	bne.n	1fac <__register_exitproc+0x8c>
    1f5a:	9a01      	ldr	r2, [sp, #4]
    1f5c:	3302      	adds	r3, #2
    1f5e:	009b      	lsls	r3, r3, #2
    1f60:	6042      	str	r2, [r0, #4]
    1f62:	501f      	str	r7, [r3, r0]
    1f64:	6828      	ldr	r0, [r5, #0]
    1f66:	f000 f885 	bl	2074 <__retarget_lock_release_recursive>
    1f6a:	2000      	movs	r0, #0
    1f6c:	b003      	add	sp, #12
    1f6e:	bc3c      	pop	{r2, r3, r4, r5}
    1f70:	4690      	mov	r8, r2
    1f72:	4699      	mov	r9, r3
    1f74:	46a2      	mov	sl, r4
    1f76:	46ab      	mov	fp, r5
    1f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f7a:	4b25      	ldr	r3, [pc, #148]	; (2010 <STACK_SIZE+0x10>)
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d03d      	beq.n	1ffc <__register_exitproc+0xdc>
    1f80:	20c8      	movs	r0, #200	; 0xc8
    1f82:	0040      	lsls	r0, r0, #1
    1f84:	e000      	b.n	1f88 <__register_exitproc+0x68>
    1f86:	bf00      	nop
    1f88:	2800      	cmp	r0, #0
    1f8a:	d037      	beq.n	1ffc <__register_exitproc+0xdc>
    1f8c:	22a4      	movs	r2, #164	; 0xa4
    1f8e:	2300      	movs	r3, #0
    1f90:	0052      	lsls	r2, r2, #1
    1f92:	58a1      	ldr	r1, [r4, r2]
    1f94:	6043      	str	r3, [r0, #4]
    1f96:	6001      	str	r1, [r0, #0]
    1f98:	50a0      	str	r0, [r4, r2]
    1f9a:	3240      	adds	r2, #64	; 0x40
    1f9c:	5083      	str	r3, [r0, r2]
    1f9e:	3204      	adds	r2, #4
    1fa0:	5083      	str	r3, [r0, r2]
    1fa2:	3301      	adds	r3, #1
    1fa4:	9301      	str	r3, [sp, #4]
    1fa6:	2300      	movs	r3, #0
    1fa8:	2e00      	cmp	r6, #0
    1faa:	d0d6      	beq.n	1f5a <__register_exitproc+0x3a>
    1fac:	009a      	lsls	r2, r3, #2
    1fae:	4692      	mov	sl, r2
    1fb0:	4482      	add	sl, r0
    1fb2:	464a      	mov	r2, r9
    1fb4:	2188      	movs	r1, #136	; 0x88
    1fb6:	4654      	mov	r4, sl
    1fb8:	5062      	str	r2, [r4, r1]
    1fba:	22c4      	movs	r2, #196	; 0xc4
    1fbc:	0052      	lsls	r2, r2, #1
    1fbe:	4691      	mov	r9, r2
    1fc0:	4481      	add	r9, r0
    1fc2:	464a      	mov	r2, r9
    1fc4:	3987      	subs	r1, #135	; 0x87
    1fc6:	4099      	lsls	r1, r3
    1fc8:	6812      	ldr	r2, [r2, #0]
    1fca:	468b      	mov	fp, r1
    1fcc:	430a      	orrs	r2, r1
    1fce:	4694      	mov	ip, r2
    1fd0:	464a      	mov	r2, r9
    1fd2:	4661      	mov	r1, ip
    1fd4:	6011      	str	r1, [r2, #0]
    1fd6:	2284      	movs	r2, #132	; 0x84
    1fd8:	4641      	mov	r1, r8
    1fda:	0052      	lsls	r2, r2, #1
    1fdc:	50a1      	str	r1, [r4, r2]
    1fde:	2e02      	cmp	r6, #2
    1fe0:	d1bb      	bne.n	1f5a <__register_exitproc+0x3a>
    1fe2:	0002      	movs	r2, r0
    1fe4:	465c      	mov	r4, fp
    1fe6:	328d      	adds	r2, #141	; 0x8d
    1fe8:	32ff      	adds	r2, #255	; 0xff
    1fea:	6811      	ldr	r1, [r2, #0]
    1fec:	430c      	orrs	r4, r1
    1fee:	6014      	str	r4, [r2, #0]
    1ff0:	e7b3      	b.n	1f5a <__register_exitproc+0x3a>
    1ff2:	0020      	movs	r0, r4
    1ff4:	304d      	adds	r0, #77	; 0x4d
    1ff6:	30ff      	adds	r0, #255	; 0xff
    1ff8:	50e0      	str	r0, [r4, r3]
    1ffa:	e7a7      	b.n	1f4c <__register_exitproc+0x2c>
    1ffc:	6828      	ldr	r0, [r5, #0]
    1ffe:	f000 f839 	bl	2074 <__retarget_lock_release_recursive>
    2002:	2001      	movs	r0, #1
    2004:	4240      	negs	r0, r0
    2006:	e7b1      	b.n	1f6c <__register_exitproc+0x4c>
    2008:	20000480 	.word	0x20000480
    200c:	000021ac 	.word	0x000021ac
    2010:	00000000 	.word	0x00000000

00002014 <register_fini>:
    2014:	4b03      	ldr	r3, [pc, #12]	; (2024 <register_fini+0x10>)
    2016:	b510      	push	{r4, lr}
    2018:	2b00      	cmp	r3, #0
    201a:	d002      	beq.n	2022 <register_fini+0xe>
    201c:	4802      	ldr	r0, [pc, #8]	; (2028 <register_fini+0x14>)
    201e:	f000 f805 	bl	202c <atexit>
    2022:	bd10      	pop	{r4, pc}
    2024:	00000000 	.word	0x00000000
    2028:	0000203d 	.word	0x0000203d

0000202c <atexit>:
    202c:	b510      	push	{r4, lr}
    202e:	0001      	movs	r1, r0
    2030:	2300      	movs	r3, #0
    2032:	2200      	movs	r2, #0
    2034:	2000      	movs	r0, #0
    2036:	f7ff ff73 	bl	1f20 <__register_exitproc>
    203a:	bd10      	pop	{r4, pc}

0000203c <__libc_fini_array>:
    203c:	b570      	push	{r4, r5, r6, lr}
    203e:	4b09      	ldr	r3, [pc, #36]	; (2064 <__libc_fini_array+0x28>)
    2040:	4c09      	ldr	r4, [pc, #36]	; (2068 <__libc_fini_array+0x2c>)
    2042:	1ae4      	subs	r4, r4, r3
    2044:	10a4      	asrs	r4, r4, #2
    2046:	d009      	beq.n	205c <__libc_fini_array+0x20>
    2048:	4a08      	ldr	r2, [pc, #32]	; (206c <__libc_fini_array+0x30>)
    204a:	18a5      	adds	r5, r4, r2
    204c:	00ad      	lsls	r5, r5, #2
    204e:	18ed      	adds	r5, r5, r3
    2050:	682b      	ldr	r3, [r5, #0]
    2052:	3c01      	subs	r4, #1
    2054:	4798      	blx	r3
    2056:	3d04      	subs	r5, #4
    2058:	2c00      	cmp	r4, #0
    205a:	d1f9      	bne.n	2050 <__libc_fini_array+0x14>
    205c:	f000 f8b4 	bl	21c8 <_fini>
    2060:	bd70      	pop	{r4, r5, r6, pc}
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	000021d4 	.word	0x000021d4
    2068:	000021d8 	.word	0x000021d8
    206c:	3fffffff 	.word	0x3fffffff

00002070 <__retarget_lock_acquire_recursive>:
    2070:	4770      	bx	lr
    2072:	46c0      	nop			; (mov r8, r8)

00002074 <__retarget_lock_release_recursive>:
    2074:	4770      	bx	lr
    2076:	46c0      	nop			; (mov r8, r8)

00002078 <defaultParameters>:
    2078:	02ee 02bc 07d0 02ee 0320 07d0 e000 450d     ........ ......E
    2088:	de6a 400d 0000 4140 0000 429a 0000 40c0     j..@..@A...B...@
    2098:	0000 4140 0000 42a4 0000 430c 0000 4302     ..@A...B...C...C
    20a8:	d289 3e7e 8000 4404 8000 4404 0000 41a0     ..~>...D...D...A
    20b8:	0000 41f0 0000 3f80 4000 451c 8000 453b     ...A...?.@.E..;E
    20c8:	1f40 0000 1f40 0000 1f40 0000 1f40 0000     @...@...@...@...
    20d8:	1388 0000 1388 0000 0064 0000 0064 0000     ........d...d...
    20e8:	0000 4100 0000 428c 0000 0000               ...A...B....

000020f4 <defaultPreferences>:
    20f4:	00fa 0000 0032 0000 2e2e 682f 6c61 732f     ....2...../hal/s
    2104:	6372 682f 6c61 695f 2e6f 0063 2e2e 682f     rc/hal_io.c.../h
    2114:	6c61 732f 6372 682f 6c61 705f 6d77 632e     al/src/hal_pwm.c
    2124:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
    2134:	6c61 735f 6970 6d5f 735f 6e79 2e63 0063     al_spi_m_sync.c.
    2144:	2e2e 682f 6c61 732f 6372 682f 6c61 745f     ../hal/src/hal_t
    2154:	6d69 7265 632e 0000 2e2e 682f 6c61 752f     imer.c..../hal/u
    2164:	6974 736c 732f 6372 752f 6974 736c 6c5f     tils/src/utils_l
    2174:	7369 2e74 0063 0000 2e2e 682f 6c70 732f     ist.c...../hpl/s
    2184:	7265 6f63 2f6d 7068 5f6c 6573 6372 6d6f     ercom/hpl_sercom
    2194:	632e 0000 2e2e 682f 6c70 742f 2f63 7068     .c..../hpl/tc/hp
    21a4:	5f6c 6374 632e 0000                         l_tc.c..

000021ac <_global_impure_ptr>:
    21ac:	0058 2000                                   X.. 

000021b0 <_init>:
    21b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21b2:	46c0      	nop			; (mov r8, r8)
    21b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21b6:	bc08      	pop	{r3}
    21b8:	469e      	mov	lr, r3
    21ba:	4770      	bx	lr

000021bc <__init_array_start>:
    21bc:	00002015 	.word	0x00002015

000021c0 <__frame_dummy_init_array_entry>:
    21c0:	000000dd 00000a59                       ....Y...

000021c8 <_fini>:
    21c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21ce:	bc08      	pop	{r3}
    21d0:	469e      	mov	lr, r3
    21d2:	4770      	bx	lr

000021d4 <__fini_array_start>:
    21d4:	000000b5 	.word	0x000000b5
