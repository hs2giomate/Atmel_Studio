
MemoriesTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024e0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000024e0  000024e0  000124e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000004dc  20000000  000024e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000001b0  200004dc  000029c4  000204dc  2**2
                  ALLOC
  4 .stack        00002004  2000068c  00002b74  000204dc  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000204dc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020504  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002d4b6  00000000  00000000  0002055d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000036c7  00000000  00000000  0004da13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000d6aa  00000000  00000000  000510da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c20  00000000  00000000  0005e784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001190  00000000  00000000  0005f3a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c393  00000000  00000000  00060534  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010c8d  00000000  00000000  0007c8c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008c52c  00000000  00000000  0008d554  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002304  00000000  00000000  00119a80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 26 00 20 15 01 00 00 0d 02 00 00 0d 02 00 00     .&. ............
	...
      2c:	0d 02 00 00 00 00 00 00 00 00 00 00 0d 02 00 00     ................
      3c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      4c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      5c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      6c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      7c:	75 1b 00 00 0d 02 00 00 0d 02 00 00 3d 1f 00 00     u...........=...
      8c:	75 1f 00 00 89 1f 00 00 0d 02 00 00 0d 02 00 00     u...............
      9c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      ac:	0d 02 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004dc 	.word	0x200004dc
      d4:	00000000 	.word	0x00000000
      d8:	000024e8 	.word	0x000024e8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004e0 	.word	0x200004e0
     108:	000024e8 	.word	0x000024e8
     10c:	000024e8 	.word	0x000024e8
     110:	00000000 	.word	0x00000000

00000114 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     11a:	4b2f      	ldr	r3, [pc, #188]	; (1d8 <Reset_Handler+0xc4>)
     11c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     11e:	4b2f      	ldr	r3, [pc, #188]	; (1dc <Reset_Handler+0xc8>)
     120:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     122:	687a      	ldr	r2, [r7, #4]
     124:	683b      	ldr	r3, [r7, #0]
     126:	429a      	cmp	r2, r3
     128:	d00c      	beq.n	144 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     12a:	e007      	b.n	13c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     12c:	683b      	ldr	r3, [r7, #0]
     12e:	1d1a      	adds	r2, r3, #4
     130:	603a      	str	r2, [r7, #0]
     132:	687a      	ldr	r2, [r7, #4]
     134:	1d11      	adds	r1, r2, #4
     136:	6079      	str	r1, [r7, #4]
     138:	6812      	ldr	r2, [r2, #0]
     13a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     13c:	683a      	ldr	r2, [r7, #0]
     13e:	4b28      	ldr	r3, [pc, #160]	; (1e0 <Reset_Handler+0xcc>)
     140:	429a      	cmp	r2, r3
     142:	d3f3      	bcc.n	12c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     144:	4b27      	ldr	r3, [pc, #156]	; (1e4 <Reset_Handler+0xd0>)
     146:	603b      	str	r3, [r7, #0]
     148:	e004      	b.n	154 <Reset_Handler+0x40>
                *pDest++ = 0;
     14a:	683b      	ldr	r3, [r7, #0]
     14c:	1d1a      	adds	r2, r3, #4
     14e:	603a      	str	r2, [r7, #0]
     150:	2200      	movs	r2, #0
     152:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     154:	683a      	ldr	r2, [r7, #0]
     156:	4b24      	ldr	r3, [pc, #144]	; (1e8 <Reset_Handler+0xd4>)
     158:	429a      	cmp	r2, r3
     15a:	d3f6      	bcc.n	14a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xd8>)
     15e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     160:	4b23      	ldr	r3, [pc, #140]	; (1f0 <Reset_Handler+0xdc>)
     162:	687a      	ldr	r2, [r7, #4]
     164:	21ff      	movs	r1, #255	; 0xff
     166:	438a      	bics	r2, r1
     168:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16a:	4a22      	ldr	r2, [pc, #136]	; (1f4 <Reset_Handler+0xe0>)
     16c:	2390      	movs	r3, #144	; 0x90
     16e:	005b      	lsls	r3, r3, #1
     170:	2102      	movs	r1, #2
     172:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     174:	4a20      	ldr	r2, [pc, #128]	; (1f8 <Reset_Handler+0xe4>)
     176:	78d3      	ldrb	r3, [r2, #3]
     178:	2103      	movs	r1, #3
     17a:	438b      	bics	r3, r1
     17c:	1c19      	adds	r1, r3, #0
     17e:	2302      	movs	r3, #2
     180:	430b      	orrs	r3, r1
     182:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     184:	4a1c      	ldr	r2, [pc, #112]	; (1f8 <Reset_Handler+0xe4>)
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	210c      	movs	r1, #12
     18a:	438b      	bics	r3, r1
     18c:	1c19      	adds	r1, r3, #0
     18e:	2308      	movs	r3, #8
     190:	430b      	orrs	r3, r1
     192:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     194:	4a19      	ldr	r2, [pc, #100]	; (1fc <Reset_Handler+0xe8>)
     196:	7b93      	ldrb	r3, [r2, #14]
     198:	2130      	movs	r1, #48	; 0x30
     19a:	438b      	bics	r3, r1
     19c:	1c19      	adds	r1, r3, #0
     19e:	2320      	movs	r3, #32
     1a0:	430b      	orrs	r3, r1
     1a2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a4:	4a15      	ldr	r2, [pc, #84]	; (1fc <Reset_Handler+0xe8>)
     1a6:	7b93      	ldrb	r3, [r2, #14]
     1a8:	210c      	movs	r1, #12
     1aa:	438b      	bics	r3, r1
     1ac:	1c19      	adds	r1, r3, #0
     1ae:	2308      	movs	r3, #8
     1b0:	430b      	orrs	r3, r1
     1b2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b4:	4a11      	ldr	r2, [pc, #68]	; (1fc <Reset_Handler+0xe8>)
     1b6:	7b93      	ldrb	r3, [r2, #14]
     1b8:	2103      	movs	r1, #3
     1ba:	438b      	bics	r3, r1
     1bc:	1c19      	adds	r1, r3, #0
     1be:	2302      	movs	r3, #2
     1c0:	430b      	orrs	r3, r1
     1c2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c4:	4a0e      	ldr	r2, [pc, #56]	; (200 <Reset_Handler+0xec>)
     1c6:	6853      	ldr	r3, [r2, #4]
     1c8:	2180      	movs	r1, #128	; 0x80
     1ca:	430b      	orrs	r3, r1
     1cc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ce:	4b0d      	ldr	r3, [pc, #52]	; (204 <Reset_Handler+0xf0>)
     1d0:	4798      	blx	r3

        /* Branch to main function */
        main();
     1d2:	4b0d      	ldr	r3, [pc, #52]	; (208 <Reset_Handler+0xf4>)
     1d4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xc2>
     1d8:	000024e8 	.word	0x000024e8
     1dc:	20000000 	.word	0x20000000
     1e0:	200004dc 	.word	0x200004dc
     1e4:	200004dc 	.word	0x200004dc
     1e8:	2000068c 	.word	0x2000068c
     1ec:	00000000 	.word	0x00000000
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	41007000 	.word	0x41007000
     1f8:	41005000 	.word	0x41005000
     1fc:	41004800 	.word	0x41004800
     200:	41004000 	.word	0x41004000
     204:	00002129 	.word	0x00002129
     208:	00000b55 	.word	0x00000b55

0000020c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     20c:	b580      	push	{r7, lr}
     20e:	af00      	add	r7, sp, #0
        while (1) {
     210:	e7fe      	b.n	210 <Dummy_Handler+0x4>

00000212 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     212:	b580      	push	{r7, lr}
     214:	b084      	sub	sp, #16
     216:	af00      	add	r7, sp, #0
     218:	60f8      	str	r0, [r7, #12]
     21a:	607a      	str	r2, [r7, #4]
     21c:	230b      	movs	r3, #11
     21e:	18fb      	adds	r3, r7, r3
     220:	1c0a      	adds	r2, r1, #0
     222:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     224:	230b      	movs	r3, #11
     226:	18fb      	adds	r3, r7, r3
     228:	781b      	ldrb	r3, [r3, #0]
     22a:	68fa      	ldr	r2, [r7, #12]
     22c:	01db      	lsls	r3, r3, #7
     22e:	18d3      	adds	r3, r2, r3
     230:	3318      	adds	r3, #24
     232:	687a      	ldr	r2, [r7, #4]
     234:	601a      	str	r2, [r3, #0]
}
     236:	46c0      	nop			; (mov r8, r8)
     238:	46bd      	mov	sp, r7
     23a:	b004      	add	sp, #16
     23c:	bd80      	pop	{r7, pc}

0000023e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     23e:	b580      	push	{r7, lr}
     240:	b084      	sub	sp, #16
     242:	af00      	add	r7, sp, #0
     244:	60f8      	str	r0, [r7, #12]
     246:	607a      	str	r2, [r7, #4]
     248:	230b      	movs	r3, #11
     24a:	18fb      	adds	r3, r7, r3
     24c:	1c0a      	adds	r2, r1, #0
     24e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     250:	230b      	movs	r3, #11
     252:	18fb      	adds	r3, r7, r3
     254:	781b      	ldrb	r3, [r3, #0]
     256:	68fa      	ldr	r2, [r7, #12]
     258:	01db      	lsls	r3, r3, #7
     25a:	18d3      	adds	r3, r2, r3
     25c:	3314      	adds	r3, #20
     25e:	687a      	ldr	r2, [r7, #4]
     260:	601a      	str	r2, [r3, #0]
}
     262:	46c0      	nop			; (mov r8, r8)
     264:	46bd      	mov	sp, r7
     266:	b004      	add	sp, #16
     268:	bd80      	pop	{r7, pc}
	...

0000026c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     26c:	b580      	push	{r7, lr}
     26e:	b082      	sub	sp, #8
     270:	af00      	add	r7, sp, #0
     272:	6039      	str	r1, [r7, #0]
     274:	0011      	movs	r1, r2
     276:	1dfb      	adds	r3, r7, #7
     278:	1c02      	adds	r2, r0, #0
     27a:	701a      	strb	r2, [r3, #0]
     27c:	1dbb      	adds	r3, r7, #6
     27e:	1c0a      	adds	r2, r1, #0
     280:	701a      	strb	r2, [r3, #0]
	if (level) {
     282:	1dbb      	adds	r3, r7, #6
     284:	781b      	ldrb	r3, [r3, #0]
     286:	2b00      	cmp	r3, #0
     288:	d008      	beq.n	29c <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     28a:	683a      	ldr	r2, [r7, #0]
     28c:	1dfb      	adds	r3, r7, #7
     28e:	7819      	ldrb	r1, [r3, #0]
     290:	23c0      	movs	r3, #192	; 0xc0
     292:	05db      	lsls	r3, r3, #23
     294:	0018      	movs	r0, r3
     296:	4b07      	ldr	r3, [pc, #28]	; (2b4 <_gpio_set_level+0x48>)
     298:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     29a:	e007      	b.n	2ac <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     29c:	683a      	ldr	r2, [r7, #0]
     29e:	1dfb      	adds	r3, r7, #7
     2a0:	7819      	ldrb	r1, [r3, #0]
     2a2:	23c0      	movs	r3, #192	; 0xc0
     2a4:	05db      	lsls	r3, r3, #23
     2a6:	0018      	movs	r0, r3
     2a8:	4b03      	ldr	r3, [pc, #12]	; (2b8 <_gpio_set_level+0x4c>)
     2aa:	4798      	blx	r3
}
     2ac:	46c0      	nop			; (mov r8, r8)
     2ae:	46bd      	mov	sp, r7
     2b0:	b002      	add	sp, #8
     2b2:	bd80      	pop	{r7, pc}
     2b4:	00000213 	.word	0x00000213
     2b8:	0000023f 	.word	0x0000023f

000002bc <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     2bc:	b580      	push	{r7, lr}
     2be:	b082      	sub	sp, #8
     2c0:	af00      	add	r7, sp, #0
     2c2:	0002      	movs	r2, r0
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	701a      	strb	r2, [r3, #0]
     2c8:	1dbb      	adds	r3, r7, #6
     2ca:	1c0a      	adds	r2, r1, #0
     2cc:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     2ce:	1dfb      	adds	r3, r7, #7
     2d0:	781b      	ldrb	r3, [r3, #0]
     2d2:	115b      	asrs	r3, r3, #5
     2d4:	b2d8      	uxtb	r0, r3
     2d6:	1dfb      	adds	r3, r7, #7
     2d8:	781b      	ldrb	r3, [r3, #0]
     2da:	001a      	movs	r2, r3
     2dc:	231f      	movs	r3, #31
     2de:	4013      	ands	r3, r2
     2e0:	2201      	movs	r2, #1
     2e2:	409a      	lsls	r2, r3
     2e4:	0011      	movs	r1, r2
     2e6:	1dbb      	adds	r3, r7, #6
     2e8:	781b      	ldrb	r3, [r3, #0]
     2ea:	001a      	movs	r2, r3
     2ec:	4b02      	ldr	r3, [pc, #8]	; (2f8 <gpio_set_pin_level+0x3c>)
     2ee:	4798      	blx	r3
}
     2f0:	46c0      	nop			; (mov r8, r8)
     2f2:	46bd      	mov	sp, r7
     2f4:	b002      	add	sp, #8
     2f6:	bd80      	pop	{r7, pc}
     2f8:	0000026d 	.word	0x0000026d

000002fc <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryAddress=flashMemory;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
     2fc:	b580      	push	{r7, lr}
     2fe:	b082      	sub	sp, #8
     300:	af00      	add	r7, sp, #0
     302:	6078      	str	r0, [r7, #4]
     304:	6039      	str	r1, [r7, #0]
     306:	687b      	ldr	r3, [r7, #4]
     308:	3390      	adds	r3, #144	; 0x90
     30a:	0018      	movs	r0, r3
     30c:	4b0b      	ldr	r3, [pc, #44]	; (33c <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x40>)
     30e:	4798      	blx	r3
{
	appParameters=defaultParameters;
     310:	687b      	ldr	r3, [r7, #4]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x44>)
     314:	3304      	adds	r3, #4
     316:	0011      	movs	r1, r2
     318:	227c      	movs	r2, #124	; 0x7c
     31a:	0018      	movs	r0, r3
     31c:	4b09      	ldr	r3, [pc, #36]	; (344 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x48>)
     31e:	4798      	blx	r3
	spi_descriptor=spi_des;
     320:	687b      	ldr	r3, [r7, #4]
     322:	218c      	movs	r1, #140	; 0x8c
     324:	683a      	ldr	r2, [r7, #0]
     326:	505a      	str	r2, [r3, r1]
	memoryAddress=flashMemory;
     328:	4b07      	ldr	r3, [pc, #28]	; (348 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x4c>)
     32a:	681a      	ldr	r2, [r3, #0]
     32c:	687b      	ldr	r3, [r7, #4]
     32e:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
     330:	687b      	ldr	r3, [r7, #4]
     332:	0018      	movs	r0, r3
     334:	46bd      	mov	sp, r7
     336:	b002      	add	sp, #8
     338:	bd80      	pop	{r7, pc}
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	00000c7d 	.word	0x00000c7d
     340:	00002380 	.word	0x00002380
     344:	00002171 	.word	0x00002171
     348:	200004f8 	.word	0x200004f8

0000034c <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
     34c:	b580      	push	{r7, lr}
     34e:	b082      	sub	sp, #8
     350:	af00      	add	r7, sp, #0
     352:	6078      	str	r0, [r7, #4]
     354:	687b      	ldr	r3, [r7, #4]
     356:	3390      	adds	r3, #144	; 0x90
     358:	0018      	movs	r0, r3
     35a:	4b03      	ldr	r3, [pc, #12]	; (368 <_ZN16FlashMemoryClassD1Ev+0x1c>)
     35c:	4798      	blx	r3
{
} //~FlashMemoryClass
     35e:	687b      	ldr	r3, [r7, #4]
     360:	0018      	movs	r0, r3
     362:	46bd      	mov	sp, r7
     364:	b002      	add	sp, #8
     366:	bd80      	pop	{r7, pc}
     368:	00000c99 	.word	0x00000c99

0000036c <_ZN16FlashMemoryClass4InitEv>:
	flashOpen();
	//WriteStatusRegister(kFlashInitialStatus);
	flashClose();
	
}
void	FlashMemoryClass::Init(void){
     36c:	b580      	push	{r7, lr}
     36e:	b082      	sub	sp, #8
     370:	af00      	add	r7, sp, #0
     372:	6078      	str	r0, [r7, #4]
	spi.SetDescriptor(spi_descriptor);
     374:	687b      	ldr	r3, [r7, #4]
     376:	3390      	adds	r3, #144	; 0x90
     378:	0018      	movs	r0, r3
     37a:	687b      	ldr	r3, [r7, #4]
     37c:	228c      	movs	r2, #140	; 0x8c
     37e:	589b      	ldr	r3, [r3, r2]
     380:	0019      	movs	r1, r3
     382:	4b0f      	ldr	r3, [pc, #60]	; (3c0 <_ZN16FlashMemoryClass4InitEv+0x54>)
     384:	4798      	blx	r3
	spi.init();
     386:	687b      	ldr	r3, [r7, #4]
     388:	3390      	adds	r3, #144	; 0x90
     38a:	0018      	movs	r0, r3
     38c:	4b0d      	ldr	r3, [pc, #52]	; (3c4 <_ZN16FlashMemoryClass4InitEv+0x58>)
     38e:	4798      	blx	r3


	memoryAddress=0x00;
     390:	687b      	ldr	r3, [r7, #4]
     392:	2200      	movs	r2, #0
     394:	601a      	str	r2, [r3, #0]
	
	flashOpen();
     396:	687b      	ldr	r3, [r7, #4]
     398:	0018      	movs	r0, r3
     39a:	4b0b      	ldr	r3, [pc, #44]	; (3c8 <_ZN16FlashMemoryClass4InitEv+0x5c>)
     39c:	4798      	blx	r3
//	WriteStatusRegister(0x02);
//	SoftwareReset();
//	ChipErase();
	status=ReadStatusRegister();
     39e:	687b      	ldr	r3, [r7, #4]
     3a0:	0018      	movs	r0, r3
     3a2:	4b0a      	ldr	r3, [pc, #40]	; (3cc <_ZN16FlashMemoryClass4InitEv+0x60>)
     3a4:	4798      	blx	r3
     3a6:	0003      	movs	r3, r0
     3a8:	0019      	movs	r1, r3
     3aa:	687b      	ldr	r3, [r7, #4]
     3ac:	22bc      	movs	r2, #188	; 0xbc
     3ae:	5499      	strb	r1, [r3, r2]
//	functionsRegister=ReadFunctionRegister();
	
	flashClose();
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	0018      	movs	r0, r3
     3b4:	4b06      	ldr	r3, [pc, #24]	; (3d0 <_ZN16FlashMemoryClass4InitEv+0x64>)
     3b6:	4798      	blx	r3
	
}
     3b8:	46c0      	nop			; (mov r8, r8)
     3ba:	46bd      	mov	sp, r7
     3bc:	b002      	add	sp, #8
     3be:	bd80      	pop	{r7, pc}
     3c0:	00000ced 	.word	0x00000ced
     3c4:	00000cad 	.word	0x00000cad
     3c8:	000003d5 	.word	0x000003d5
     3cc:	0000072d 	.word	0x0000072d
     3d0:	000007c1 	.word	0x000007c1

000003d4 <_ZN16FlashMemoryClass9flashOpenEv>:
}



void FlashMemoryClass::flashOpen(void)
{
     3d4:	b580      	push	{r7, lr}
     3d6:	b082      	sub	sp, #8
     3d8:	af00      	add	r7, sp, #0
     3da:	6078      	str	r0, [r7, #4]
	garbage=spi.enable();
     3dc:	687b      	ldr	r3, [r7, #4]
     3de:	3390      	adds	r3, #144	; 0x90
     3e0:	0018      	movs	r0, r3
     3e2:	4b05      	ldr	r3, [pc, #20]	; (3f8 <_ZN16FlashMemoryClass9flashOpenEv+0x24>)
     3e4:	4798      	blx	r3
     3e6:	0003      	movs	r3, r0
     3e8:	0019      	movs	r1, r3
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	2280      	movs	r2, #128	; 0x80
     3ee:	5099      	str	r1, [r3, r2]
	
	
}
     3f0:	46c0      	nop			; (mov r8, r8)
     3f2:	46bd      	mov	sp, r7
     3f4:	b002      	add	sp, #8
     3f6:	bd80      	pop	{r7, pc}
     3f8:	00000d11 	.word	0x00000d11

000003fc <_ZN16FlashMemoryClass12CE_Low_FlashEv>:
	spi.read((uint8_t *)dest, (uint16_t)size);
	CE_High_Flash();
	return (uint8_t)src;
}
void FlashMemoryClass::CE_Low_Flash(void)
{
     3fc:	b580      	push	{r7, lr}
     3fe:	b082      	sub	sp, #8
     400:	af00      	add	r7, sp, #0
     402:	6078      	str	r0, [r7, #4]
	garbage=0;
     404:	687b      	ldr	r3, [r7, #4]
     406:	2280      	movs	r2, #128	; 0x80
     408:	2100      	movs	r1, #0
     40a:	5099      	str	r1, [r3, r2]
		gpio_set_pin_level(CS_FLASH,
		// <y> Initial level
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);
     40c:	2100      	movs	r1, #0
     40e:	201b      	movs	r0, #27
     410:	4b04      	ldr	r3, [pc, #16]	; (424 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
     412:	4798      	blx	r3
		gpio_set_pin_level(CS_FRAM,true);
     414:	2101      	movs	r1, #1
     416:	201c      	movs	r0, #28
     418:	4b02      	ldr	r3, [pc, #8]	; (424 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
     41a:	4798      	blx	r3
}
     41c:	46c0      	nop			; (mov r8, r8)
     41e:	46bd      	mov	sp, r7
     420:	b002      	add	sp, #8
     422:	bd80      	pop	{r7, pc}
     424:	000002bd 	.word	0x000002bd

00000428 <_ZN16FlashMemoryClass13CE_High_FlashEv>:

void FlashMemoryClass::CE_High_Flash(void)
{
     428:	b580      	push	{r7, lr}
     42a:	b082      	sub	sp, #8
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
	garbage=0;
     430:	687b      	ldr	r3, [r7, #4]
     432:	2280      	movs	r2, #128	; 0x80
     434:	2100      	movs	r1, #0
     436:	5099      	str	r1, [r3, r2]
	gpio_set_pin_level(CS_FLASH,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
     438:	2101      	movs	r1, #1
     43a:	201b      	movs	r0, #27
     43c:	4b04      	ldr	r3, [pc, #16]	; (450 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
     43e:	4798      	blx	r3
	gpio_set_pin_level(CS_FRAM,true);
     440:	2101      	movs	r1, #1
     442:	201c      	movs	r0, #28
     444:	4b02      	ldr	r3, [pc, #8]	; (450 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
     446:	4798      	blx	r3
}
     448:	46c0      	nop			; (mov r8, r8)
     44a:	46bd      	mov	sp, r7
     44c:	b002      	add	sp, #8
     44e:	bd80      	pop	{r7, pc}
     450:	000002bd 	.word	0x000002bd

00000454 <_ZN16FlashMemoryClass9Send_ByteEh>:
uint8_t FlashMemoryClass::Send_Byte(uint8_t byte)
{
     454:	b580      	push	{r7, lr}
     456:	b082      	sub	sp, #8
     458:	af00      	add	r7, sp, #0
     45a:	6078      	str	r0, [r7, #4]
     45c:	000a      	movs	r2, r1
     45e:	1cfb      	adds	r3, r7, #3
     460:	701a      	strb	r2, [r3, #0]
	//WaitBusy();
	spi.write(&byte,1);
     462:	687b      	ldr	r3, [r7, #4]
     464:	3390      	adds	r3, #144	; 0x90
     466:	1cf9      	adds	r1, r7, #3
     468:	2201      	movs	r2, #1
     46a:	0018      	movs	r0, r3
     46c:	4b03      	ldr	r3, [pc, #12]	; (47c <_ZN16FlashMemoryClass9Send_ByteEh+0x28>)
     46e:	4798      	blx	r3
	return byte;
     470:	1cfb      	adds	r3, r7, #3
     472:	781b      	ldrb	r3, [r3, #0]
}
     474:	0018      	movs	r0, r3
     476:	46bd      	mov	sp, r7
     478:	b002      	add	sp, #8
     47a:	bd80      	pop	{r7, pc}
     47c:	00000d4d 	.word	0x00000d4d

00000480 <_ZN16FlashMemoryClass8Get_ByteEv>:

uint8_t FlashMemoryClass::Get_Byte(void)
{
     480:	b580      	push	{r7, lr}
     482:	b084      	sub	sp, #16
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	//WaitBusy();
	spi.read(&byte,1);
     488:	687b      	ldr	r3, [r7, #4]
     48a:	3390      	adds	r3, #144	; 0x90
     48c:	220f      	movs	r2, #15
     48e:	18b9      	adds	r1, r7, r2
     490:	2201      	movs	r2, #1
     492:	0018      	movs	r0, r3
     494:	4b04      	ldr	r3, [pc, #16]	; (4a8 <_ZN16FlashMemoryClass8Get_ByteEv+0x28>)
     496:	4798      	blx	r3
	
	return byte;
     498:	230f      	movs	r3, #15
     49a:	18fb      	adds	r3, r7, r3
     49c:	781b      	ldrb	r3, [r3, #0]
}
     49e:	0018      	movs	r0, r3
     4a0:	46bd      	mov	sp, r7
     4a2:	b004      	add	sp, #16
     4a4:	bd80      	pop	{r7, pc}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	00000d8d 	.word	0x00000d8d

000004ac <_ZN16FlashMemoryClass4WRENEv>:

void FlashMemoryClass::WREN(void)
{
     4ac:	b580      	push	{r7, lr}
     4ae:	b082      	sub	sp, #8
     4b0:	af00      	add	r7, sp, #0
     4b2:	6078      	str	r0, [r7, #4]
	do
	{
		CE_Low_Flash();			// enable device
     4b4:	687b      	ldr	r3, [r7, #4]
     4b6:	0018      	movs	r0, r3
     4b8:	4b0e      	ldr	r3, [pc, #56]	; (4f4 <_ZN16FlashMemoryClass4WRENEv+0x48>)
     4ba:	4798      	blx	r3
		Send_Byte(kFlashWREnable);	// send WREN command
     4bc:	687b      	ldr	r3, [r7, #4]
     4be:	2106      	movs	r1, #6
     4c0:	0018      	movs	r0, r3
     4c2:	4b0d      	ldr	r3, [pc, #52]	; (4f8 <_ZN16FlashMemoryClass4WRENEv+0x4c>)
     4c4:	4798      	blx	r3
		//WaitBusy();
		CE_High_Flash();
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	0018      	movs	r0, r3
     4ca:	4b0c      	ldr	r3, [pc, #48]	; (4fc <_ZN16FlashMemoryClass4WRENEv+0x50>)
     4cc:	4798      	blx	r3
		status=ReadStatusRegister();
     4ce:	687b      	ldr	r3, [r7, #4]
     4d0:	0018      	movs	r0, r3
     4d2:	4b0b      	ldr	r3, [pc, #44]	; (500 <_ZN16FlashMemoryClass4WRENEv+0x54>)
     4d4:	4798      	blx	r3
     4d6:	0003      	movs	r3, r0
     4d8:	0019      	movs	r1, r3
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	22bc      	movs	r2, #188	; 0xbc
     4de:	5499      	strb	r1, [r3, r2]
	} while ((status&&(0x02))==0);
     4e0:	687b      	ldr	r3, [r7, #4]
     4e2:	22bc      	movs	r2, #188	; 0xbc
     4e4:	5c9b      	ldrb	r3, [r3, r2]
     4e6:	2b00      	cmp	r3, #0
     4e8:	d100      	bne.n	4ec <_ZN16FlashMemoryClass4WRENEv+0x40>
	do
     4ea:	e7e3      	b.n	4b4 <_ZN16FlashMemoryClass4WRENEv+0x8>

}
     4ec:	46c0      	nop			; (mov r8, r8)
     4ee:	46bd      	mov	sp, r7
     4f0:	b002      	add	sp, #8
     4f2:	bd80      	pop	{r7, pc}
     4f4:	000003fd 	.word	0x000003fd
     4f8:	00000455 	.word	0x00000455
     4fc:	00000429 	.word	0x00000429
     500:	0000072d 	.word	0x0000072d

00000504 <_ZN16FlashMemoryClass4WRDIEv>:


void FlashMemoryClass::WRDI(void)
{
     504:	b580      	push	{r7, lr}
     506:	b082      	sub	sp, #8
     508:	af00      	add	r7, sp, #0
     50a:	6078      	str	r0, [r7, #4]
	CE_Low_Flash();			// enable device
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	0018      	movs	r0, r3
     510:	4b07      	ldr	r3, [pc, #28]	; (530 <_ZN16FlashMemoryClass4WRDIEv+0x2c>)
     512:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
     514:	687b      	ldr	r3, [r7, #4]
     516:	2104      	movs	r1, #4
     518:	0018      	movs	r0, r3
     51a:	4b06      	ldr	r3, [pc, #24]	; (534 <_ZN16FlashMemoryClass4WRDIEv+0x30>)
     51c:	4798      	blx	r3
//	WaitBusy();
	CE_High_Flash();			// disable device
     51e:	687b      	ldr	r3, [r7, #4]
     520:	0018      	movs	r0, r3
     522:	4b05      	ldr	r3, [pc, #20]	; (538 <_ZN16FlashMemoryClass4WRDIEv+0x34>)
     524:	4798      	blx	r3
	
}
     526:	46c0      	nop			; (mov r8, r8)
     528:	46bd      	mov	sp, r7
     52a:	b002      	add	sp, #8
     52c:	bd80      	pop	{r7, pc}
     52e:	46c0      	nop			; (mov r8, r8)
     530:	000003fd 	.word	0x000003fd
     534:	00000455 	.word	0x00000455
     538:	00000429 	.word	0x00000429

0000053c <_ZN16FlashMemoryClass10eraseFlashEmm>:
		return *srcPtr;

	}
	
void FlashMemoryClass::eraseFlash(uint32_t dest, uint32_t size)
	{
     53c:	b580      	push	{r7, lr}
     53e:	b086      	sub	sp, #24
     540:	af00      	add	r7, sp, #0
     542:	60f8      	str	r0, [r7, #12]
     544:	60b9      	str	r1, [r7, #8]
     546:	607a      	str	r2, [r7, #4]
	uint32_t	eraseRemaining = size;
     548:	687b      	ldr	r3, [r7, #4]
     54a:	617b      	str	r3, [r7, #20]
	uint32_t	eraseAddress = dest;
     54c:	68bb      	ldr	r3, [r7, #8]
     54e:	613b      	str	r3, [r7, #16]
	flashOpen();
     550:	68fb      	ldr	r3, [r7, #12]
     552:	0018      	movs	r0, r3
     554:	4b29      	ldr	r3, [pc, #164]	; (5fc <_ZN16FlashMemoryClass10eraseFlashEmm+0xc0>)
     556:	4798      	blx	r3
	while (eraseRemaining > 0)
     558:	697b      	ldr	r3, [r7, #20]
     55a:	2b00      	cmp	r3, #0
     55c:	d045      	beq.n	5ea <_ZN16FlashMemoryClass10eraseFlashEmm+0xae>
		{
		WREN();
     55e:	68fb      	ldr	r3, [r7, #12]
     560:	0018      	movs	r0, r3
     562:	4b27      	ldr	r3, [pc, #156]	; (600 <_ZN16FlashMemoryClass10eraseFlashEmm+0xc4>)
     564:	4798      	blx	r3
		if (eraseRemaining <= 4 * 1024)
     566:	697a      	ldr	r2, [r7, #20]
     568:	2380      	movs	r3, #128	; 0x80
     56a:	015b      	lsls	r3, r3, #5
     56c:	429a      	cmp	r2, r3
     56e:	d808      	bhi.n	582 <_ZN16FlashMemoryClass10eraseFlashEmm+0x46>
			{
			Sector_Erase(eraseAddress);
     570:	693a      	ldr	r2, [r7, #16]
     572:	68fb      	ldr	r3, [r7, #12]
     574:	0011      	movs	r1, r2
     576:	0018      	movs	r0, r3
     578:	4b22      	ldr	r3, [pc, #136]	; (604 <_ZN16FlashMemoryClass10eraseFlashEmm+0xc8>)
     57a:	4798      	blx	r3
			eraseRemaining = 0;
     57c:	2300      	movs	r3, #0
     57e:	617b      	str	r3, [r7, #20]
     580:	e02a      	b.n	5d8 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>
			}
		else if (eraseRemaining < 64 * 1024)
     582:	697b      	ldr	r3, [r7, #20]
     584:	4a20      	ldr	r2, [pc, #128]	; (608 <_ZN16FlashMemoryClass10eraseFlashEmm+0xcc>)
     586:	4293      	cmp	r3, r2
     588:	d811      	bhi.n	5ae <_ZN16FlashMemoryClass10eraseFlashEmm+0x72>
			{
			Sector_Erase(eraseAddress);
     58a:	693a      	ldr	r2, [r7, #16]
     58c:	68fb      	ldr	r3, [r7, #12]
     58e:	0011      	movs	r1, r2
     590:	0018      	movs	r0, r3
     592:	4b1c      	ldr	r3, [pc, #112]	; (604 <_ZN16FlashMemoryClass10eraseFlashEmm+0xc8>)
     594:	4798      	blx	r3
			eraseAddress += (4 * 1024);
     596:	693b      	ldr	r3, [r7, #16]
     598:	2280      	movs	r2, #128	; 0x80
     59a:	0152      	lsls	r2, r2, #5
     59c:	4694      	mov	ip, r2
     59e:	4463      	add	r3, ip
     5a0:	613b      	str	r3, [r7, #16]
			eraseRemaining -= (4 * 1024);
     5a2:	697b      	ldr	r3, [r7, #20]
     5a4:	4a19      	ldr	r2, [pc, #100]	; (60c <_ZN16FlashMemoryClass10eraseFlashEmm+0xd0>)
     5a6:	4694      	mov	ip, r2
     5a8:	4463      	add	r3, ip
     5aa:	617b      	str	r3, [r7, #20]
     5ac:	e014      	b.n	5d8 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>
			}

		else if (eraseRemaining >= 64 * 1024)
     5ae:	697b      	ldr	r3, [r7, #20]
     5b0:	4a15      	ldr	r2, [pc, #84]	; (608 <_ZN16FlashMemoryClass10eraseFlashEmm+0xcc>)
     5b2:	4293      	cmp	r3, r2
     5b4:	d910      	bls.n	5d8 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>
			{
			Block_Erase_64K(eraseAddress);
     5b6:	693a      	ldr	r2, [r7, #16]
     5b8:	68fb      	ldr	r3, [r7, #12]
     5ba:	0011      	movs	r1, r2
     5bc:	0018      	movs	r0, r3
     5be:	4b14      	ldr	r3, [pc, #80]	; (610 <_ZN16FlashMemoryClass10eraseFlashEmm+0xd4>)
     5c0:	4798      	blx	r3
			eraseAddress += (64 * 1024);
     5c2:	693b      	ldr	r3, [r7, #16]
     5c4:	2280      	movs	r2, #128	; 0x80
     5c6:	0252      	lsls	r2, r2, #9
     5c8:	4694      	mov	ip, r2
     5ca:	4463      	add	r3, ip
     5cc:	613b      	str	r3, [r7, #16]
			eraseRemaining -= (64 * 1024);
     5ce:	697b      	ldr	r3, [r7, #20]
     5d0:	4a10      	ldr	r2, [pc, #64]	; (614 <_ZN16FlashMemoryClass10eraseFlashEmm+0xd8>)
     5d2:	4694      	mov	ip, r2
     5d4:	4463      	add	r3, ip
     5d6:	617b      	str	r3, [r7, #20]
			Block_Erase_32K(eraseAddress);
			eraseAddress += (32 * 1024);
			eraseRemaining -= (32 * 1024);
			}
*/
		WaitBusy();
     5d8:	68fb      	ldr	r3, [r7, #12]
     5da:	0018      	movs	r0, r3
     5dc:	4b0e      	ldr	r3, [pc, #56]	; (618 <_ZN16FlashMemoryClass10eraseFlashEmm+0xdc>)
     5de:	4798      	blx	r3
		WRDI();
     5e0:	68fb      	ldr	r3, [r7, #12]
     5e2:	0018      	movs	r0, r3
     5e4:	4b0d      	ldr	r3, [pc, #52]	; (61c <_ZN16FlashMemoryClass10eraseFlashEmm+0xe0>)
     5e6:	4798      	blx	r3
	while (eraseRemaining > 0)
     5e8:	e7b6      	b.n	558 <_ZN16FlashMemoryClass10eraseFlashEmm+0x1c>
		}
			flashClose();
     5ea:	68fb      	ldr	r3, [r7, #12]
     5ec:	0018      	movs	r0, r3
     5ee:	4b0c      	ldr	r3, [pc, #48]	; (620 <_ZN16FlashMemoryClass10eraseFlashEmm+0xe4>)
     5f0:	4798      	blx	r3
	}
     5f2:	46c0      	nop			; (mov r8, r8)
     5f4:	46bd      	mov	sp, r7
     5f6:	b006      	add	sp, #24
     5f8:	bd80      	pop	{r7, pc}
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	000003d5 	.word	0x000003d5
     600:	000004ad 	.word	0x000004ad
     604:	000007e9 	.word	0x000007e9
     608:	0000ffff 	.word	0x0000ffff
     60c:	fffff000 	.word	0xfffff000
     610:	00000625 	.word	0x00000625
     614:	ffff0000 	.word	0xffff0000
     618:	0000068d 	.word	0x0000068d
     61c:	00000505 	.word	0x00000505
     620:	000007c1 	.word	0x000007c1

00000624 <_ZN16FlashMemoryClass15Block_Erase_64KEm>:
	
void	FlashMemoryClass::Block_Erase_64K(uint32_t Dst){
     624:	b580      	push	{r7, lr}
     626:	b082      	sub	sp, #8
     628:	af00      	add	r7, sp, #0
     62a:	6078      	str	r0, [r7, #4]
     62c:	6039      	str	r1, [r7, #0]

		CE_Low_Flash();				// enable device
     62e:	687b      	ldr	r3, [r7, #4]
     630:	0018      	movs	r0, r3
     632:	4b13      	ldr	r3, [pc, #76]	; (680 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x5c>)
     634:	4798      	blx	r3
		Send_Byte(kFlash64KBlockErase);		// send Sector Erase command
     636:	687b      	ldr	r3, [r7, #4]
     638:	21d8      	movs	r1, #216	; 0xd8
     63a:	0018      	movs	r0, r3
     63c:	4b11      	ldr	r3, [pc, #68]	; (684 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x60>)
     63e:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
     640:	683b      	ldr	r3, [r7, #0]
     642:	0c1b      	lsrs	r3, r3, #16
     644:	b2da      	uxtb	r2, r3
     646:	687b      	ldr	r3, [r7, #4]
     648:	0011      	movs	r1, r2
     64a:	0018      	movs	r0, r3
     64c:	4b0d      	ldr	r3, [pc, #52]	; (684 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x60>)
     64e:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFF) >> 8));
     650:	683b      	ldr	r3, [r7, #0]
     652:	0a1b      	lsrs	r3, r3, #8
     654:	b2da      	uxtb	r2, r3
     656:	687b      	ldr	r3, [r7, #4]
     658:	0011      	movs	r1, r2
     65a:	0018      	movs	r0, r3
     65c:	4b09      	ldr	r3, [pc, #36]	; (684 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x60>)
     65e:	4798      	blx	r3
		Send_Byte(Dst & 0xFF);
     660:	683b      	ldr	r3, [r7, #0]
     662:	b2da      	uxtb	r2, r3
     664:	687b      	ldr	r3, [r7, #4]
     666:	0011      	movs	r1, r2
     668:	0018      	movs	r0, r3
     66a:	4b06      	ldr	r3, [pc, #24]	; (684 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x60>)
     66c:	4798      	blx	r3
		CE_High_Flash();				// disable device
     66e:	687b      	ldr	r3, [r7, #4]
     670:	0018      	movs	r0, r3
     672:	4b05      	ldr	r3, [pc, #20]	; (688 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x64>)
     674:	4798      	blx	r3
		
}
     676:	46c0      	nop			; (mov r8, r8)
     678:	46bd      	mov	sp, r7
     67a:	b002      	add	sp, #8
     67c:	bd80      	pop	{r7, pc}
     67e:	46c0      	nop			; (mov r8, r8)
     680:	000003fd 	.word	0x000003fd
     684:	00000455 	.word	0x00000455
     688:	00000429 	.word	0x00000429

0000068c <_ZN16FlashMemoryClass8WaitBusyEv>:
uint8_t  FlashMemoryClass::WaitBusy(void){
     68c:	b580      	push	{r7, lr}
     68e:	b082      	sub	sp, #8
     690:	af00      	add	r7, sp, #0
     692:	6078      	str	r0, [r7, #4]
	status = ReadStatusRegister();
     694:	687b      	ldr	r3, [r7, #4]
     696:	0018      	movs	r0, r3
     698:	4b0f      	ldr	r3, [pc, #60]	; (6d8 <_ZN16FlashMemoryClass8WaitBusyEv+0x4c>)
     69a:	4798      	blx	r3
     69c:	0003      	movs	r3, r0
     69e:	0019      	movs	r1, r3
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	22bc      	movs	r2, #188	; 0xbc
     6a4:	5499      	strb	r1, [r3, r2]
		
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
     6a6:	687b      	ldr	r3, [r7, #4]
     6a8:	22bc      	movs	r2, #188	; 0xbc
     6aa:	5c9b      	ldrb	r3, [r3, r2]
     6ac:	001a      	movs	r2, r3
     6ae:	2301      	movs	r3, #1
     6b0:	4013      	ands	r3, r2
     6b2:	d009      	beq.n	6c8 <_ZN16FlashMemoryClass8WaitBusyEv+0x3c>
			status = ReadStatusRegister();
     6b4:	687b      	ldr	r3, [r7, #4]
     6b6:	0018      	movs	r0, r3
     6b8:	4b07      	ldr	r3, [pc, #28]	; (6d8 <_ZN16FlashMemoryClass8WaitBusyEv+0x4c>)
     6ba:	4798      	blx	r3
     6bc:	0003      	movs	r3, r0
     6be:	0019      	movs	r1, r3
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	22bc      	movs	r2, #188	; 0xbc
     6c4:	5499      	strb	r1, [r3, r2]
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
     6c6:	e7ee      	b.n	6a6 <_ZN16FlashMemoryClass8WaitBusyEv+0x1a>
		}
		
		return	status;
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	22bc      	movs	r2, #188	; 0xbc
     6cc:	5c9b      	ldrb	r3, [r3, r2]
	}
     6ce:	0018      	movs	r0, r3
     6d0:	46bd      	mov	sp, r7
     6d2:	b002      	add	sp, #8
     6d4:	bd80      	pop	{r7, pc}
     6d6:	46c0      	nop			; (mov r8, r8)
     6d8:	0000072d 	.word	0x0000072d

000006dc <_ZN16FlashMemoryClass7IsReadyEv>:
bool  FlashMemoryClass::IsReady(void){
     6dc:	b580      	push	{r7, lr}
     6de:	b082      	sub	sp, #8
     6e0:	af00      	add	r7, sp, #0
     6e2:	6078      	str	r0, [r7, #4]
	
	flashOpen();
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	0018      	movs	r0, r3
     6e8:	4b0d      	ldr	r3, [pc, #52]	; (720 <_ZN16FlashMemoryClass7IsReadyEv+0x44>)
     6ea:	4798      	blx	r3
	status = ReadStatusRegister();
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	0018      	movs	r0, r3
     6f0:	4b0c      	ldr	r3, [pc, #48]	; (724 <_ZN16FlashMemoryClass7IsReadyEv+0x48>)
     6f2:	4798      	blx	r3
     6f4:	0003      	movs	r3, r0
     6f6:	0019      	movs	r1, r3
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	22bc      	movs	r2, #188	; 0xbc
     6fc:	5499      	strb	r1, [r3, r2]
	flashClose();
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	0018      	movs	r0, r3
     702:	4b09      	ldr	r3, [pc, #36]	; (728 <_ZN16FlashMemoryClass7IsReadyEv+0x4c>)
     704:	4798      	blx	r3
	return	(status&0x01)==0;
     706:	687b      	ldr	r3, [r7, #4]
     708:	22bc      	movs	r2, #188	; 0xbc
     70a:	5c9b      	ldrb	r3, [r3, r2]
     70c:	001a      	movs	r2, r3
     70e:	2301      	movs	r3, #1
     710:	4013      	ands	r3, r2
     712:	425a      	negs	r2, r3
     714:	4153      	adcs	r3, r2
     716:	b2db      	uxtb	r3, r3
}
     718:	0018      	movs	r0, r3
     71a:	46bd      	mov	sp, r7
     71c:	b002      	add	sp, #8
     71e:	bd80      	pop	{r7, pc}
     720:	000003d5 	.word	0x000003d5
     724:	0000072d 	.word	0x0000072d
     728:	000007c1 	.word	0x000007c1

0000072c <_ZN16FlashMemoryClass18ReadStatusRegisterEv>:
uint8_t  FlashMemoryClass::ReadStatusRegister(void){
     72c:	b580      	push	{r7, lr}
     72e:	b082      	sub	sp, #8
     730:	af00      	add	r7, sp, #0
     732:	6078      	str	r0, [r7, #4]
			status=ReadSingleRegister(kFlashReadSR);
     734:	687b      	ldr	r3, [r7, #4]
     736:	2105      	movs	r1, #5
     738:	0018      	movs	r0, r3
     73a:	4b07      	ldr	r3, [pc, #28]	; (758 <_ZN16FlashMemoryClass18ReadStatusRegisterEv+0x2c>)
     73c:	4798      	blx	r3
     73e:	0003      	movs	r3, r0
     740:	0019      	movs	r1, r3
     742:	687b      	ldr	r3, [r7, #4]
     744:	22bc      	movs	r2, #188	; 0xbc
     746:	5499      	strb	r1, [r3, r2]
		return status;
     748:	687b      	ldr	r3, [r7, #4]
     74a:	22bc      	movs	r2, #188	; 0xbc
     74c:	5c9b      	ldrb	r3, [r3, r2]
	}
     74e:	0018      	movs	r0, r3
     750:	46bd      	mov	sp, r7
     752:	b002      	add	sp, #8
     754:	bd80      	pop	{r7, pc}
     756:	46c0      	nop			; (mov r8, r8)
     758:	0000075d 	.word	0x0000075d

0000075c <_ZN16FlashMemoryClass18ReadSingleRegisterEh>:
uint8_t  FlashMemoryClass::ReadFunctionRegister(void){
			// disable device
		return ReadSingleRegister(kFlashReadFunction);
	}
	
uint8_t  FlashMemoryClass::ReadSingleRegister(uint8_t r){
     75c:	b590      	push	{r4, r7, lr}
     75e:	b085      	sub	sp, #20
     760:	af00      	add	r7, sp, #0
     762:	6078      	str	r0, [r7, #4]
     764:	000a      	movs	r2, r1
     766:	1cfb      	adds	r3, r7, #3
     768:	701a      	strb	r2, [r3, #0]
	uint8_t b = 0;
     76a:	230f      	movs	r3, #15
     76c:	18fb      	adds	r3, r7, r3
     76e:	2200      	movs	r2, #0
     770:	701a      	strb	r2, [r3, #0]
	CE_Low_Flash();			// enable device
     772:	687b      	ldr	r3, [r7, #4]
     774:	0018      	movs	r0, r3
     776:	4b0e      	ldr	r3, [pc, #56]	; (7b0 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x54>)
     778:	4798      	blx	r3
	Send_Byte(r);	// send RDSR command
     77a:	1cfb      	adds	r3, r7, #3
     77c:	781a      	ldrb	r2, [r3, #0]
     77e:	687b      	ldr	r3, [r7, #4]
     780:	0011      	movs	r1, r2
     782:	0018      	movs	r0, r3
     784:	4b0b      	ldr	r3, [pc, #44]	; (7b4 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x58>)
     786:	4798      	blx	r3
	b = Get_Byte();		/* receive byte */
     788:	230f      	movs	r3, #15
     78a:	18fc      	adds	r4, r7, r3
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	0018      	movs	r0, r3
     790:	4b09      	ldr	r3, [pc, #36]	; (7b8 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x5c>)
     792:	4798      	blx	r3
     794:	0003      	movs	r3, r0
     796:	7023      	strb	r3, [r4, #0]
	CE_High_Flash();			// disable device
     798:	687b      	ldr	r3, [r7, #4]
     79a:	0018      	movs	r0, r3
     79c:	4b07      	ldr	r3, [pc, #28]	; (7bc <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x60>)
     79e:	4798      	blx	r3
	return b;
     7a0:	230f      	movs	r3, #15
     7a2:	18fb      	adds	r3, r7, r3
     7a4:	781b      	ldrb	r3, [r3, #0]
}
     7a6:	0018      	movs	r0, r3
     7a8:	46bd      	mov	sp, r7
     7aa:	b005      	add	sp, #20
     7ac:	bd90      	pop	{r4, r7, pc}
     7ae:	46c0      	nop			; (mov r8, r8)
     7b0:	000003fd 	.word	0x000003fd
     7b4:	00000455 	.word	0x00000455
     7b8:	00000481 	.word	0x00000481
     7bc:	00000429 	.word	0x00000429

000007c0 <_ZN16FlashMemoryClass10flashCloseEv>:
	Send_Byte(byte);		/* receive byte */
	CE_High_Flash();			// disable device
	return byte;
}

void FlashMemoryClass::flashClose(void){
     7c0:	b580      	push	{r7, lr}
     7c2:	b082      	sub	sp, #8
     7c4:	af00      	add	r7, sp, #0
     7c6:	6078      	str	r0, [r7, #4]
	garbage=0;
     7c8:	687b      	ldr	r3, [r7, #4]
     7ca:	2280      	movs	r2, #128	; 0x80
     7cc:	2100      	movs	r1, #0
     7ce:	5099      	str	r1, [r3, r2]
		spi.disable();
     7d0:	687b      	ldr	r3, [r7, #4]
     7d2:	3390      	adds	r3, #144	; 0x90
     7d4:	0018      	movs	r0, r3
     7d6:	4b03      	ldr	r3, [pc, #12]	; (7e4 <_ZN16FlashMemoryClass10flashCloseEv+0x24>)
     7d8:	4798      	blx	r3
	}
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	46bd      	mov	sp, r7
     7de:	b002      	add	sp, #8
     7e0:	bd80      	pop	{r7, pc}
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	00000dcd 	.word	0x00000dcd

000007e8 <_ZN16FlashMemoryClass12Sector_EraseEm>:
void FlashMemoryClass::Sector_Erase(uint32_t Dst)
{
     7e8:	b580      	push	{r7, lr}
     7ea:	b082      	sub	sp, #8
     7ec:	af00      	add	r7, sp, #0
     7ee:	6078      	str	r0, [r7, #4]
     7f0:	6039      	str	r1, [r7, #0]
	CE_Low_Flash();				// enable device
     7f2:	687b      	ldr	r3, [r7, #4]
     7f4:	0018      	movs	r0, r3
     7f6:	4b13      	ldr	r3, [pc, #76]	; (844 <_ZN16FlashMemoryClass12Sector_EraseEm+0x5c>)
     7f8:	4798      	blx	r3
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
     7fa:	687b      	ldr	r3, [r7, #4]
     7fc:	2120      	movs	r1, #32
     7fe:	0018      	movs	r0, r3
     800:	4b11      	ldr	r3, [pc, #68]	; (848 <_ZN16FlashMemoryClass12Sector_EraseEm+0x60>)
     802:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
     804:	683b      	ldr	r3, [r7, #0]
     806:	0c1b      	lsrs	r3, r3, #16
     808:	b2da      	uxtb	r2, r3
     80a:	687b      	ldr	r3, [r7, #4]
     80c:	0011      	movs	r1, r2
     80e:	0018      	movs	r0, r3
     810:	4b0d      	ldr	r3, [pc, #52]	; (848 <_ZN16FlashMemoryClass12Sector_EraseEm+0x60>)
     812:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFF) >> 8));
     814:	683b      	ldr	r3, [r7, #0]
     816:	0a1b      	lsrs	r3, r3, #8
     818:	b2da      	uxtb	r2, r3
     81a:	687b      	ldr	r3, [r7, #4]
     81c:	0011      	movs	r1, r2
     81e:	0018      	movs	r0, r3
     820:	4b09      	ldr	r3, [pc, #36]	; (848 <_ZN16FlashMemoryClass12Sector_EraseEm+0x60>)
     822:	4798      	blx	r3
	Send_Byte(Dst & 0xFF);
     824:	683b      	ldr	r3, [r7, #0]
     826:	b2da      	uxtb	r2, r3
     828:	687b      	ldr	r3, [r7, #4]
     82a:	0011      	movs	r1, r2
     82c:	0018      	movs	r0, r3
     82e:	4b06      	ldr	r3, [pc, #24]	; (848 <_ZN16FlashMemoryClass12Sector_EraseEm+0x60>)
     830:	4798      	blx	r3
	CE_High_Flash();				// disable device
     832:	687b      	ldr	r3, [r7, #4]
     834:	0018      	movs	r0, r3
     836:	4b05      	ldr	r3, [pc, #20]	; (84c <_ZN16FlashMemoryClass12Sector_EraseEm+0x64>)
     838:	4798      	blx	r3
}
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	46bd      	mov	sp, r7
     83e:	b002      	add	sp, #8
     840:	bd80      	pop	{r7, pc}
     842:	46c0      	nop			; (mov r8, r8)
     844:	000003fd 	.word	0x000003fd
     848:	00000455 	.word	0x00000455
     84c:	00000429 	.word	0x00000429

00000850 <_ZN16FlashMemoryClass12WriteAddressEPhmm>:
	delay_ms(100);
	CE_Low_Flash();
	Send_Byte(0x99);
	CE_High_Flash();				// disable device
}
uint32_t	FlashMemoryClass::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
     850:	b580      	push	{r7, lr}
     852:	b086      	sub	sp, #24
     854:	af00      	add	r7, sp, #0
     856:	60f8      	str	r0, [r7, #12]
     858:	60b9      	str	r1, [r7, #8]
     85a:	607a      	str	r2, [r7, #4]
     85c:	603b      	str	r3, [r7, #0]
	uint32_t	w;
	while(!IsReady());
     85e:	68fb      	ldr	r3, [r7, #12]
     860:	0018      	movs	r0, r3
     862:	4b30      	ldr	r3, [pc, #192]	; (924 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd4>)
     864:	4798      	blx	r3
     866:	0003      	movs	r3, r0
     868:	001a      	movs	r2, r3
     86a:	2301      	movs	r3, #1
     86c:	4053      	eors	r3, r2
     86e:	b2db      	uxtb	r3, r3
     870:	2b00      	cmp	r3, #0
     872:	d000      	beq.n	876 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x26>
     874:	e7f3      	b.n	85e <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe>
	flashOpen();
     876:	68fb      	ldr	r3, [r7, #12]
     878:	0018      	movs	r0, r3
     87a:	4b2b      	ldr	r3, [pc, #172]	; (928 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd8>)
     87c:	4798      	blx	r3
	WREN();
     87e:	68fb      	ldr	r3, [r7, #12]
     880:	0018      	movs	r0, r3
     882:	4b2a      	ldr	r3, [pc, #168]	; (92c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xdc>)
     884:	4798      	blx	r3
	localBuffer[0]=kFlashByteProgram;
     886:	68fb      	ldr	r3, [r7, #12]
     888:	22a4      	movs	r2, #164	; 0xa4
     88a:	2102      	movs	r1, #2
     88c:	5499      	strb	r1, [r3, r2]
	localBuffer[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
     88e:	687b      	ldr	r3, [r7, #4]
     890:	0c1b      	lsrs	r3, r3, #16
     892:	b2d9      	uxtb	r1, r3
     894:	68fb      	ldr	r3, [r7, #12]
     896:	22a5      	movs	r2, #165	; 0xa5
     898:	5499      	strb	r1, [r3, r2]
	localBuffer[2]=(uint8_t)((addr & 0xFFFF) >> 8);
     89a:	687b      	ldr	r3, [r7, #4]
     89c:	0a1b      	lsrs	r3, r3, #8
     89e:	b2d9      	uxtb	r1, r3
     8a0:	68fb      	ldr	r3, [r7, #12]
     8a2:	22a6      	movs	r2, #166	; 0xa6
     8a4:	5499      	strb	r1, [r3, r2]
	localBuffer[3]=(uint8_t)(addr&0xFF);
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	b2d9      	uxtb	r1, r3
     8aa:	68fb      	ldr	r3, [r7, #12]
     8ac:	22a7      	movs	r2, #167	; 0xa7
     8ae:	5499      	strb	r1, [r3, r2]
	for (uint32_t i = 4; i <(size)+4; i++)
     8b0:	2304      	movs	r3, #4
     8b2:	617b      	str	r3, [r7, #20]
     8b4:	683b      	ldr	r3, [r7, #0]
     8b6:	1d1a      	adds	r2, r3, #4
     8b8:	697b      	ldr	r3, [r7, #20]
     8ba:	429a      	cmp	r2, r3
     8bc:	d90f      	bls.n	8de <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x8e>
	{
		localBuffer[i]=*p;
     8be:	68bb      	ldr	r3, [r7, #8]
     8c0:	7818      	ldrb	r0, [r3, #0]
     8c2:	68fa      	ldr	r2, [r7, #12]
     8c4:	21a4      	movs	r1, #164	; 0xa4
     8c6:	697b      	ldr	r3, [r7, #20]
     8c8:	18d3      	adds	r3, r2, r3
     8ca:	185b      	adds	r3, r3, r1
     8cc:	1c02      	adds	r2, r0, #0
     8ce:	701a      	strb	r2, [r3, #0]
		p++;
     8d0:	68bb      	ldr	r3, [r7, #8]
     8d2:	3301      	adds	r3, #1
     8d4:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 4; i <(size)+4; i++)
     8d6:	697b      	ldr	r3, [r7, #20]
     8d8:	3301      	adds	r3, #1
     8da:	617b      	str	r3, [r7, #20]
     8dc:	e7ea      	b.n	8b4 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x64>
	}
	CE_Low_Flash();
     8de:	68fb      	ldr	r3, [r7, #12]
     8e0:	0018      	movs	r0, r3
     8e2:	4b13      	ldr	r3, [pc, #76]	; (930 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe0>)
     8e4:	4798      	blx	r3
	//WaitBusy();
	w=spi.write(&localBuffer[0],size+4);
     8e6:	68fb      	ldr	r3, [r7, #12]
     8e8:	3390      	adds	r3, #144	; 0x90
     8ea:	0018      	movs	r0, r3
     8ec:	68fb      	ldr	r3, [r7, #12]
     8ee:	33a4      	adds	r3, #164	; 0xa4
     8f0:	0019      	movs	r1, r3
     8f2:	683b      	ldr	r3, [r7, #0]
     8f4:	3304      	adds	r3, #4
     8f6:	001a      	movs	r2, r3
     8f8:	4b0e      	ldr	r3, [pc, #56]	; (934 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe4>)
     8fa:	4798      	blx	r3
     8fc:	0003      	movs	r3, r0
     8fe:	613b      	str	r3, [r7, #16]
	//WaitBusy();
	//w=spi.write(&localBuffer[4],size);
//	w=spi.write(p,size);

	//WaitBusy();
	CE_High_Flash();
     900:	68fb      	ldr	r3, [r7, #12]
     902:	0018      	movs	r0, r3
     904:	4b0c      	ldr	r3, [pc, #48]	; (938 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe8>)
     906:	4798      	blx	r3
	WRDI();
     908:	68fb      	ldr	r3, [r7, #12]
     90a:	0018      	movs	r0, r3
     90c:	4b0b      	ldr	r3, [pc, #44]	; (93c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xec>)
     90e:	4798      	blx	r3
	flashClose();
     910:	68fb      	ldr	r3, [r7, #12]
     912:	0018      	movs	r0, r3
     914:	4b0a      	ldr	r3, [pc, #40]	; (940 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xf0>)
     916:	4798      	blx	r3
	return	w;
     918:	693b      	ldr	r3, [r7, #16]
	/*return (uint32_t)writeFlash(addr,(void*)p,size);*/
}
     91a:	0018      	movs	r0, r3
     91c:	46bd      	mov	sp, r7
     91e:	b006      	add	sp, #24
     920:	bd80      	pop	{r7, pc}
     922:	46c0      	nop			; (mov r8, r8)
     924:	000006dd 	.word	0x000006dd
     928:	000003d5 	.word	0x000003d5
     92c:	000004ad 	.word	0x000004ad
     930:	000003fd 	.word	0x000003fd
     934:	00000d4d 	.word	0x00000d4d
     938:	00000429 	.word	0x00000429
     93c:	00000505 	.word	0x00000505
     940:	000007c1 	.word	0x000007c1

00000944 <_ZN16FlashMemoryClass11ReadAddressEPhmm>:
uint32_t	FlashMemoryClass::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
     944:	b580      	push	{r7, lr}
     946:	b086      	sub	sp, #24
     948:	af00      	add	r7, sp, #0
     94a:	60f8      	str	r0, [r7, #12]
     94c:	60b9      	str	r1, [r7, #8]
     94e:	607a      	str	r2, [r7, #4]
     950:	603b      	str	r3, [r7, #0]
	uint8_t	dummy;
		flashOpen();
     952:	68fb      	ldr	r3, [r7, #12]
     954:	0018      	movs	r0, r3
     956:	4b23      	ldr	r3, [pc, #140]	; (9e4 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa0>)
     958:	4798      	blx	r3
		CE_Low_Flash();
     95a:	68fb      	ldr	r3, [r7, #12]
     95c:	0018      	movs	r0, r3
     95e:	4b22      	ldr	r3, [pc, #136]	; (9e8 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa4>)
     960:	4798      	blx	r3
		instruction[0]=kFlashRead;
     962:	68fb      	ldr	r3, [r7, #12]
     964:	22b8      	movs	r2, #184	; 0xb8
     966:	2103      	movs	r1, #3
     968:	5499      	strb	r1, [r3, r2]
		instruction[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	0c1b      	lsrs	r3, r3, #16
     96e:	b2d9      	uxtb	r1, r3
     970:	68fb      	ldr	r3, [r7, #12]
     972:	22b9      	movs	r2, #185	; 0xb9
     974:	5499      	strb	r1, [r3, r2]
		instruction[2]=(uint8_t)((addr & 0xFFFF) >> 8);
     976:	687b      	ldr	r3, [r7, #4]
     978:	0a1b      	lsrs	r3, r3, #8
     97a:	b2d9      	uxtb	r1, r3
     97c:	68fb      	ldr	r3, [r7, #12]
     97e:	22ba      	movs	r2, #186	; 0xba
     980:	5499      	strb	r1, [r3, r2]
		instruction[3]=(uint8_t)(addr&0xFF);
     982:	687b      	ldr	r3, [r7, #4]
     984:	b2d9      	uxtb	r1, r3
     986:	68fb      	ldr	r3, [r7, #12]
     988:	22bb      	movs	r2, #187	; 0xbb
     98a:	5499      	strb	r1, [r3, r2]
		
		uint32_t	r=spi.write(instruction,4);
     98c:	68fb      	ldr	r3, [r7, #12]
     98e:	3390      	adds	r3, #144	; 0x90
     990:	0018      	movs	r0, r3
     992:	68fb      	ldr	r3, [r7, #12]
     994:	33b8      	adds	r3, #184	; 0xb8
     996:	2204      	movs	r2, #4
     998:	0019      	movs	r1, r3
     99a:	4b14      	ldr	r3, [pc, #80]	; (9ec <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa8>)
     99c:	4798      	blx	r3
     99e:	0003      	movs	r3, r0
     9a0:	617b      	str	r3, [r7, #20]
		//r=spi.read(&dummy,1);
		//r=spi.read(instruction,4);
		//WaitBusy();
		r=spi.read(p,size);
     9a2:	68fb      	ldr	r3, [r7, #12]
     9a4:	3390      	adds	r3, #144	; 0x90
     9a6:	683a      	ldr	r2, [r7, #0]
     9a8:	68b9      	ldr	r1, [r7, #8]
     9aa:	0018      	movs	r0, r3
     9ac:	4b10      	ldr	r3, [pc, #64]	; (9f0 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xac>)
     9ae:	4798      	blx	r3
     9b0:	0003      	movs	r3, r0
     9b2:	617b      	str	r3, [r7, #20]
		while (!spi.xferDone);
     9b4:	68fb      	ldr	r3, [r7, #12]
     9b6:	2291      	movs	r2, #145	; 0x91
     9b8:	5c9b      	ldrb	r3, [r3, r2]
     9ba:	b2db      	uxtb	r3, r3
     9bc:	2201      	movs	r2, #1
     9be:	4053      	eors	r3, r2
     9c0:	b2db      	uxtb	r3, r3
     9c2:	2b00      	cmp	r3, #0
     9c4:	d000      	beq.n	9c8 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x84>
     9c6:	e7f5      	b.n	9b4 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x70>
		CE_High_Flash();
     9c8:	68fb      	ldr	r3, [r7, #12]
     9ca:	0018      	movs	r0, r3
     9cc:	4b09      	ldr	r3, [pc, #36]	; (9f4 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb0>)
     9ce:	4798      	blx	r3
		flashClose();
     9d0:	68fb      	ldr	r3, [r7, #12]
     9d2:	0018      	movs	r0, r3
     9d4:	4b08      	ldr	r3, [pc, #32]	; (9f8 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb4>)
     9d6:	4798      	blx	r3
	
		return	r;
     9d8:	697b      	ldr	r3, [r7, #20]
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
     9da:	0018      	movs	r0, r3
     9dc:	46bd      	mov	sp, r7
     9de:	b006      	add	sp, #24
     9e0:	bd80      	pop	{r7, pc}
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	000003d5 	.word	0x000003d5
     9e8:	000003fd 	.word	0x000003fd
     9ec:	00000d4d 	.word	0x00000d4d
     9f0:	00000d8d 	.word	0x00000d8d
     9f4:	00000429 	.word	0x00000429
     9f8:	000007c1 	.word	0x000007c1

000009fc <_Z41__static_initialization_and_destruction_0ii>:
     9fc:	b580      	push	{r7, lr}
     9fe:	b082      	sub	sp, #8
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
     a04:	6039      	str	r1, [r7, #0]
     a06:	687b      	ldr	r3, [r7, #4]
     a08:	2b01      	cmp	r3, #1
     a0a:	d10f      	bne.n	a2c <_Z41__static_initialization_and_destruction_0ii+0x30>
     a0c:	683b      	ldr	r3, [r7, #0]
     a0e:	4a09      	ldr	r2, [pc, #36]	; (a34 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     a10:	4293      	cmp	r3, r2
     a12:	d10b      	bne.n	a2c <_Z41__static_initialization_and_destruction_0ii+0x30>
     a14:	4a08      	ldr	r2, [pc, #32]	; (a38 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     a16:	4b09      	ldr	r3, [pc, #36]	; (a3c <_Z41__static_initialization_and_destruction_0ii+0x40>)
     a18:	0011      	movs	r1, r2
     a1a:	0018      	movs	r0, r3
     a1c:	4b08      	ldr	r3, [pc, #32]	; (a40 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     a1e:	4798      	blx	r3
     a20:	4a08      	ldr	r2, [pc, #32]	; (a44 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     a22:	4909      	ldr	r1, [pc, #36]	; (a48 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     a24:	4b05      	ldr	r3, [pc, #20]	; (a3c <_Z41__static_initialization_and_destruction_0ii+0x40>)
     a26:	0018      	movs	r0, r3
     a28:	4b08      	ldr	r3, [pc, #32]	; (a4c <_Z41__static_initialization_and_destruction_0ii+0x50>)
     a2a:	4798      	blx	r3
     a2c:	46c0      	nop			; (mov r8, r8)
     a2e:	46bd      	mov	sp, r7
     a30:	b002      	add	sp, #8
     a32:	bd80      	pop	{r7, pc}
     a34:	0000ffff 	.word	0x0000ffff
     a38:	20000630 	.word	0x20000630
     a3c:	200004fc 	.word	0x200004fc
     a40:	000002fd 	.word	0x000002fd
     a44:	20000000 	.word	0x20000000
     a48:	0000034d 	.word	0x0000034d
     a4c:	00001f9d 	.word	0x00001f9d

00000a50 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev>:
     a50:	b580      	push	{r7, lr}
     a52:	af00      	add	r7, sp, #0
     a54:	4b03      	ldr	r3, [pc, #12]	; (a64 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x14>)
     a56:	0019      	movs	r1, r3
     a58:	2001      	movs	r0, #1
     a5a:	4b03      	ldr	r3, [pc, #12]	; (a68 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x18>)
     a5c:	4798      	blx	r3
     a5e:	46bd      	mov	sp, r7
     a60:	bd80      	pop	{r7, pc}
     a62:	46c0      	nop			; (mov r8, r8)
     a64:	0000ffff 	.word	0x0000ffff
     a68:	000009fd 	.word	0x000009fd

00000a6c <hri_port_set_OUT_reg>:
{
     a6c:	b580      	push	{r7, lr}
     a6e:	b084      	sub	sp, #16
     a70:	af00      	add	r7, sp, #0
     a72:	60f8      	str	r0, [r7, #12]
     a74:	607a      	str	r2, [r7, #4]
     a76:	230b      	movs	r3, #11
     a78:	18fb      	adds	r3, r7, r3
     a7a:	1c0a      	adds	r2, r1, #0
     a7c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a7e:	230b      	movs	r3, #11
     a80:	18fb      	adds	r3, r7, r3
     a82:	781b      	ldrb	r3, [r3, #0]
     a84:	68fa      	ldr	r2, [r7, #12]
     a86:	01db      	lsls	r3, r3, #7
     a88:	18d3      	adds	r3, r2, r3
     a8a:	3318      	adds	r3, #24
     a8c:	687a      	ldr	r2, [r7, #4]
     a8e:	601a      	str	r2, [r3, #0]
}
     a90:	46c0      	nop			; (mov r8, r8)
     a92:	46bd      	mov	sp, r7
     a94:	b004      	add	sp, #16
     a96:	bd80      	pop	{r7, pc}

00000a98 <hri_port_clear_OUT_reg>:
{
     a98:	b580      	push	{r7, lr}
     a9a:	b084      	sub	sp, #16
     a9c:	af00      	add	r7, sp, #0
     a9e:	60f8      	str	r0, [r7, #12]
     aa0:	607a      	str	r2, [r7, #4]
     aa2:	230b      	movs	r3, #11
     aa4:	18fb      	adds	r3, r7, r3
     aa6:	1c0a      	adds	r2, r1, #0
     aa8:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aaa:	230b      	movs	r3, #11
     aac:	18fb      	adds	r3, r7, r3
     aae:	781b      	ldrb	r3, [r3, #0]
     ab0:	68fa      	ldr	r2, [r7, #12]
     ab2:	01db      	lsls	r3, r3, #7
     ab4:	18d3      	adds	r3, r2, r3
     ab6:	3314      	adds	r3, #20
     ab8:	687a      	ldr	r2, [r7, #4]
     aba:	601a      	str	r2, [r3, #0]
}
     abc:	46c0      	nop			; (mov r8, r8)
     abe:	46bd      	mov	sp, r7
     ac0:	b004      	add	sp, #16
     ac2:	bd80      	pop	{r7, pc}

00000ac4 <_gpio_set_level>:
{
     ac4:	b580      	push	{r7, lr}
     ac6:	b082      	sub	sp, #8
     ac8:	af00      	add	r7, sp, #0
     aca:	6039      	str	r1, [r7, #0]
     acc:	0011      	movs	r1, r2
     ace:	1dfb      	adds	r3, r7, #7
     ad0:	1c02      	adds	r2, r0, #0
     ad2:	701a      	strb	r2, [r3, #0]
     ad4:	1dbb      	adds	r3, r7, #6
     ad6:	1c0a      	adds	r2, r1, #0
     ad8:	701a      	strb	r2, [r3, #0]
	if (level) {
     ada:	1dbb      	adds	r3, r7, #6
     adc:	781b      	ldrb	r3, [r3, #0]
     ade:	2b00      	cmp	r3, #0
     ae0:	d008      	beq.n	af4 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     ae2:	683a      	ldr	r2, [r7, #0]
     ae4:	1dfb      	adds	r3, r7, #7
     ae6:	7819      	ldrb	r1, [r3, #0]
     ae8:	23c0      	movs	r3, #192	; 0xc0
     aea:	05db      	lsls	r3, r3, #23
     aec:	0018      	movs	r0, r3
     aee:	4b07      	ldr	r3, [pc, #28]	; (b0c <_gpio_set_level+0x48>)
     af0:	4798      	blx	r3
}
     af2:	e007      	b.n	b04 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     af4:	683a      	ldr	r2, [r7, #0]
     af6:	1dfb      	adds	r3, r7, #7
     af8:	7819      	ldrb	r1, [r3, #0]
     afa:	23c0      	movs	r3, #192	; 0xc0
     afc:	05db      	lsls	r3, r3, #23
     afe:	0018      	movs	r0, r3
     b00:	4b03      	ldr	r3, [pc, #12]	; (b10 <_gpio_set_level+0x4c>)
     b02:	4798      	blx	r3
}
     b04:	46c0      	nop			; (mov r8, r8)
     b06:	46bd      	mov	sp, r7
     b08:	b002      	add	sp, #8
     b0a:	bd80      	pop	{r7, pc}
     b0c:	00000a6d 	.word	0x00000a6d
     b10:	00000a99 	.word	0x00000a99

00000b14 <gpio_set_pin_level>:
{
     b14:	b580      	push	{r7, lr}
     b16:	b082      	sub	sp, #8
     b18:	af00      	add	r7, sp, #0
     b1a:	0002      	movs	r2, r0
     b1c:	1dfb      	adds	r3, r7, #7
     b1e:	701a      	strb	r2, [r3, #0]
     b20:	1dbb      	adds	r3, r7, #6
     b22:	1c0a      	adds	r2, r1, #0
     b24:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     b26:	1dfb      	adds	r3, r7, #7
     b28:	781b      	ldrb	r3, [r3, #0]
     b2a:	115b      	asrs	r3, r3, #5
     b2c:	b2d8      	uxtb	r0, r3
     b2e:	1dfb      	adds	r3, r7, #7
     b30:	781b      	ldrb	r3, [r3, #0]
     b32:	001a      	movs	r2, r3
     b34:	231f      	movs	r3, #31
     b36:	4013      	ands	r3, r2
     b38:	2201      	movs	r2, #1
     b3a:	409a      	lsls	r2, r3
     b3c:	0011      	movs	r1, r2
     b3e:	1dbb      	adds	r3, r7, #6
     b40:	781b      	ldrb	r3, [r3, #0]
     b42:	001a      	movs	r2, r3
     b44:	4b02      	ldr	r3, [pc, #8]	; (b50 <gpio_set_pin_level+0x3c>)
     b46:	4798      	blx	r3
}
     b48:	46c0      	nop			; (mov r8, r8)
     b4a:	46bd      	mov	sp, r7
     b4c:	b002      	add	sp, #8
     b4e:	bd80      	pop	{r7, pc}
     b50:	00000ac5 	.word	0x00000ac5

00000b54 <main>:
#include <atmel_start.h>
#include "main.h"
#include "stdlib.h"
//static FlashMemoryClass	flash(&SPI_0);
int main(void)
{
     b54:	b590      	push	{r4, r7, lr}
     b56:	b08f      	sub	sp, #60	; 0x3c
     b58:	af00      	add	r7, sp, #0
	atmel_start_init();
     b5a:	4b3d      	ldr	r3, [pc, #244]	; (c50 <main+0xfc>)
     b5c:	4798      	blx	r3
	bool is_corrupted = false;
     b5e:	2327      	movs	r3, #39	; 0x27
     b60:	18fb      	adds	r3, r7, r3
     b62:	2200      	movs	r2, #0
     b64:	701a      	strb	r2, [r3, #0]
	uint8_t tx_buffer[ISSI_BUFFER_SIZE] ;
	uint8_t rx_buffer[ISSI_BUFFER_SIZE] ;
	
	flash.Init();
     b66:	4b3b      	ldr	r3, [pc, #236]	; (c54 <main+0x100>)
     b68:	0018      	movs	r0, r3
     b6a:	4b3b      	ldr	r3, [pc, #236]	; (c58 <main+0x104>)
     b6c:	4798      	blx	r3

	//usb.print("QSPI Program Started\n\r");
	/* Initialize Tx buffer */
	for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
     b6e:	2300      	movs	r3, #0
     b70:	637b      	str	r3, [r7, #52]	; 0x34
     b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b74:	2b0f      	cmp	r3, #15
     b76:	dc0b      	bgt.n	b90 <main+0x3c>
		tx_buffer[i] = (uint8_t)i;
     b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b7a:	b2d9      	uxtb	r1, r3
     b7c:	2314      	movs	r3, #20
     b7e:	18fa      	adds	r2, r7, r3
     b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b82:	18d3      	adds	r3, r2, r3
     b84:	1c0a      	adds	r2, r1, #0
     b86:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
     b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b8a:	3301      	adds	r3, #1
     b8c:	637b      	str	r3, [r7, #52]	; 0x34
     b8e:	e7f0      	b.n	b72 <main+0x1e>
	}

	flash.eraseFlash(0,1*1024);
     b90:	2380      	movs	r3, #128	; 0x80
     b92:	00da      	lsls	r2, r3, #3
     b94:	4b2f      	ldr	r3, [pc, #188]	; (c54 <main+0x100>)
     b96:	2100      	movs	r1, #0
     b98:	0018      	movs	r0, r3
     b9a:	4b30      	ldr	r3, [pc, #192]	; (c5c <main+0x108>)
     b9c:	4798      	blx	r3
	/* Erase flash memory */
	uint32_t	m=0;
     b9e:	2300      	movs	r3, #0
     ba0:	633b      	str	r3, [r7, #48]	; 0x30
	while (1) {
		//delay_us(100);
		/* Write data to flash memory */
		if (ERR_NONE ==flash.WriteAddress((uint8_t *)tx_buffer,m,ISSI_BUFFER_SIZE)) {
     ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     ba4:	2314      	movs	r3, #20
     ba6:	18f9      	adds	r1, r7, r3
     ba8:	482a      	ldr	r0, [pc, #168]	; (c54 <main+0x100>)
     baa:	2310      	movs	r3, #16
     bac:	4c2c      	ldr	r4, [pc, #176]	; (c60 <main+0x10c>)
     bae:	47a0      	blx	r4
		
		}
		delay_ms(WRITE_DELAY);
     bb0:	2064      	movs	r0, #100	; 0x64
     bb2:	4b2c      	ldr	r3, [pc, #176]	; (c64 <main+0x110>)
     bb4:	4798      	blx	r3
		//flash.WaitBusy();
		/* Read data from flash memory */
		if (ERR_NONE == flash.ReadAddress((uint8_t *)rx_buffer,m,ISSI_BUFFER_SIZE)) {
     bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     bb8:	1d39      	adds	r1, r7, #4
     bba:	4826      	ldr	r0, [pc, #152]	; (c54 <main+0x100>)
     bbc:	2310      	movs	r3, #16
     bbe:	4c2a      	ldr	r4, [pc, #168]	; (c68 <main+0x114>)
     bc0:	47a0      	blx	r4
			//while(!memory.xferDone);

		}
	//	delay_us(100);
		is_corrupted = false;
     bc2:	2327      	movs	r3, #39	; 0x27
     bc4:	18fb      	adds	r3, r7, r3
     bc6:	2200      	movs	r2, #0
     bc8:	701a      	strb	r2, [r3, #0]
		gpio_set_pin_level(NMI,true);
     bca:	2101      	movs	r1, #1
     bcc:	2008      	movs	r0, #8
     bce:	4b27      	ldr	r3, [pc, #156]	; (c6c <main+0x118>)
     bd0:	4798      	blx	r3
		for (int i = 1; i < ISSI_BUFFER_SIZE; i++) {
     bd2:	2301      	movs	r3, #1
     bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
     bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bd8:	2b0f      	cmp	r3, #15
     bda:	dc19      	bgt.n	c10 <main+0xbc>
			if (tx_buffer[i] != rx_buffer[i]) {
     bdc:	2314      	movs	r3, #20
     bde:	18fa      	adds	r2, r7, r3
     be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     be2:	18d3      	adds	r3, r2, r3
     be4:	781a      	ldrb	r2, [r3, #0]
     be6:	1d39      	adds	r1, r7, #4
     be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bea:	18cb      	adds	r3, r1, r3
     bec:	781b      	ldrb	r3, [r3, #0]
     bee:	429a      	cmp	r2, r3
     bf0:	d00a      	beq.n	c08 <main+0xb4>
				is_corrupted = true;
     bf2:	2327      	movs	r3, #39	; 0x27
     bf4:	18fb      	adds	r3, r7, r3
     bf6:	2201      	movs	r2, #1
     bf8:	701a      	strb	r2, [r3, #0]
// 				usb.print("Flash data verification failed.\n\r");
// 				usb<<"bit :"<<i<<NEWLINE;
				i=ISSI_BUFFER_SIZE;
     bfa:	2310      	movs	r3, #16
     bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
				gpio_set_pin_level(NMI,false);
     bfe:	2100      	movs	r1, #0
     c00:	2008      	movs	r0, #8
     c02:	4b1a      	ldr	r3, [pc, #104]	; (c6c <main+0x118>)
     c04:	4798      	blx	r3
				break;
     c06:	e003      	b.n	c10 <main+0xbc>
		for (int i = 1; i < ISSI_BUFFER_SIZE; i++) {
     c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c0a:	3301      	adds	r3, #1
     c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
     c0e:	e7e2      	b.n	bd6 <main+0x82>
			}
		
		}

		delay_ms(WRITE_DELAY);
     c10:	2064      	movs	r0, #100	; 0x64
     c12:	4b14      	ldr	r3, [pc, #80]	; (c64 <main+0x110>)
     c14:	4798      	blx	r3
		m=(m+ISSI_BUFFER_SIZE)%TEST_FLASH_SIZE;
     c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c18:	3310      	adds	r3, #16
     c1a:	001a      	movs	r2, r3
     c1c:	4b14      	ldr	r3, [pc, #80]	; (c70 <main+0x11c>)
     c1e:	4915      	ldr	r1, [pc, #84]	; (c74 <main+0x120>)
     c20:	0010      	movs	r0, r2
     c22:	4798      	blx	r3
     c24:	000b      	movs	r3, r1
     c26:	633b      	str	r3, [r7, #48]	; 0x30
			for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
     c28:	2300      	movs	r3, #0
     c2a:	62bb      	str	r3, [r7, #40]	; 0x28
     c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c2e:	2b0f      	cmp	r3, #15
     c30:	dcb7      	bgt.n	ba2 <main+0x4e>
				tx_buffer[i] = (uint8_t)rand();
     c32:	4b11      	ldr	r3, [pc, #68]	; (c78 <main+0x124>)
     c34:	4798      	blx	r3
     c36:	0003      	movs	r3, r0
     c38:	b2d9      	uxtb	r1, r3
     c3a:	2314      	movs	r3, #20
     c3c:	18fa      	adds	r2, r7, r3
     c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c40:	18d3      	adds	r3, r2, r3
     c42:	1c0a      	adds	r2, r1, #0
     c44:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
     c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c48:	3301      	adds	r3, #1
     c4a:	62bb      	str	r3, [r7, #40]	; 0x28
     c4c:	e7ee      	b.n	c2c <main+0xd8>
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	00000ded 	.word	0x00000ded
     c54:	200004fc 	.word	0x200004fc
     c58:	0000036d 	.word	0x0000036d
     c5c:	0000053d 	.word	0x0000053d
     c60:	00000851 	.word	0x00000851
     c64:	0000108d 	.word	0x0000108d
     c68:	00000945 	.word	0x00000945
     c6c:	00000b15 	.word	0x00000b15
     c70:	000020b9 	.word	0x000020b9
     c74:	00000fff 	.word	0x00000fff
     c78:	000021f5 	.word	0x000021f5

00000c7c <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
     c7c:	b580      	push	{r7, lr}
     c7e:	b082      	sub	sp, #8
     c80:	af00      	add	r7, sp, #0
     c82:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
     c84:	4b03      	ldr	r3, [pc, #12]	; (c94 <_ZN13SPI_Syn_ClassC1Ev+0x18>)
     c86:	687a      	ldr	r2, [r7, #4]
     c88:	601a      	str	r2, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
     c8a:	687b      	ldr	r3, [r7, #4]
     c8c:	0018      	movs	r0, r3
     c8e:	46bd      	mov	sp, r7
     c90:	b002      	add	sp, #8
     c92:	bd80      	pop	{r7, pc}
     c94:	200005bc 	.word	0x200005bc

00000c98 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
     c98:	b580      	push	{r7, lr}
     c9a:	b082      	sub	sp, #8
     c9c:	af00      	add	r7, sp, #0
     c9e:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
     ca0:	687b      	ldr	r3, [r7, #4]
     ca2:	0018      	movs	r0, r3
     ca4:	46bd      	mov	sp, r7
     ca6:	b002      	add	sp, #8
     ca8:	bd80      	pop	{r7, pc}
	...

00000cac <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
     cac:	b580      	push	{r7, lr}
     cae:	b082      	sub	sp, #8
     cb0:	af00      	add	r7, sp, #0
     cb2:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	685a      	ldr	r2, [r3, #4]
     cb8:	687b      	ldr	r3, [r7, #4]
     cba:	3308      	adds	r3, #8
     cbc:	0019      	movs	r1, r3
     cbe:	0010      	movs	r0, r2
     cc0:	4b08      	ldr	r3, [pc, #32]	; (ce4 <_ZN13SPI_Syn_Class4initEv+0x38>)
     cc2:	4798      	blx	r3

	spi_m_sync_enable(SPI);
     cc4:	687b      	ldr	r3, [r7, #4]
     cc6:	685b      	ldr	r3, [r3, #4]
     cc8:	0018      	movs	r0, r3
     cca:	4b07      	ldr	r3, [pc, #28]	; (ce8 <_ZN13SPI_Syn_Class4initEv+0x3c>)
     ccc:	4798      	blx	r3
	
	ready=true;
     cce:	687b      	ldr	r3, [r7, #4]
     cd0:	2201      	movs	r2, #1
     cd2:	701a      	strb	r2, [r3, #0]
	xferDone=true;
     cd4:	687b      	ldr	r3, [r7, #4]
     cd6:	2201      	movs	r2, #1
     cd8:	705a      	strb	r2, [r3, #1]
	
}
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	46bd      	mov	sp, r7
     cde:	b002      	add	sp, #8
     ce0:	bd80      	pop	{r7, pc}
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	000012d9 	.word	0x000012d9
     ce8:	000011c9 	.word	0x000011c9

00000cec <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
     cec:	b580      	push	{r7, lr}
     cee:	b082      	sub	sp, #8
     cf0:	af00      	add	r7, sp, #0
     cf2:	6078      	str	r0, [r7, #4]
     cf4:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
     cf6:	4b05      	ldr	r3, [pc, #20]	; (d0c <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
     cf8:	687a      	ldr	r2, [r7, #4]
     cfa:	601a      	str	r2, [r3, #0]
	SPI=spiDesc;
     cfc:	687b      	ldr	r3, [r7, #4]
     cfe:	683a      	ldr	r2, [r7, #0]
     d00:	605a      	str	r2, [r3, #4]
}
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	46bd      	mov	sp, r7
     d06:	b002      	add	sp, #8
     d08:	bd80      	pop	{r7, pc}
     d0a:	46c0      	nop			; (mov r8, r8)
     d0c:	200005bc 	.word	0x200005bc

00000d10 <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
     d10:	b580      	push	{r7, lr}
     d12:	b082      	sub	sp, #8
     d14:	af00      	add	r7, sp, #0
     d16:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
     d18:	687b      	ldr	r3, [r7, #4]
     d1a:	685a      	ldr	r2, [r3, #4]
     d1c:	687b      	ldr	r3, [r7, #4]
     d1e:	3308      	adds	r3, #8
     d20:	0019      	movs	r1, r3
     d22:	0010      	movs	r0, r2
     d24:	4b07      	ldr	r3, [pc, #28]	; (d44 <_ZN13SPI_Syn_Class6enableEv+0x34>)
     d26:	4798      	blx	r3
	spi_m_sync_enable(SPI);
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	685b      	ldr	r3, [r3, #4]
     d2c:	0018      	movs	r0, r3
     d2e:	4b06      	ldr	r3, [pc, #24]	; (d48 <_ZN13SPI_Syn_Class6enableEv+0x38>)
     d30:	4798      	blx	r3
	ready=true;
     d32:	687b      	ldr	r3, [r7, #4]
     d34:	2201      	movs	r2, #1
     d36:	701a      	strb	r2, [r3, #0]
	return 0;
     d38:	2300      	movs	r3, #0
}
     d3a:	0018      	movs	r0, r3
     d3c:	46bd      	mov	sp, r7
     d3e:	b002      	add	sp, #8
     d40:	bd80      	pop	{r7, pc}
     d42:	46c0      	nop			; (mov r8, r8)
     d44:	000012d9 	.word	0x000012d9
     d48:	000011c9 	.word	0x000011c9

00000d4c <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
     d4c:	b580      	push	{r7, lr}
     d4e:	b086      	sub	sp, #24
     d50:	af00      	add	r7, sp, #0
     d52:	60f8      	str	r0, [r7, #12]
     d54:	60b9      	str	r1, [r7, #8]
     d56:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
     d58:	68fb      	ldr	r3, [r7, #12]
     d5a:	2201      	movs	r2, #1
     d5c:	741a      	strb	r2, [r3, #16]
	w= io_write(spio,p,(uint16_t)n);
     d5e:	68fb      	ldr	r3, [r7, #12]
     d60:	689b      	ldr	r3, [r3, #8]
     d62:	687a      	ldr	r2, [r7, #4]
     d64:	b292      	uxth	r2, r2
     d66:	68b9      	ldr	r1, [r7, #8]
     d68:	0018      	movs	r0, r3
     d6a:	4b07      	ldr	r3, [pc, #28]	; (d88 <_ZN13SPI_Syn_Class5writeEPKhl+0x3c>)
     d6c:	4798      	blx	r3
     d6e:	0003      	movs	r3, r0
     d70:	617b      	str	r3, [r7, #20]
	wFlag=(bool)w;
     d72:	697b      	ldr	r3, [r7, #20]
     d74:	1e5a      	subs	r2, r3, #1
     d76:	4193      	sbcs	r3, r2
     d78:	b2da      	uxtb	r2, r3
     d7a:	68fb      	ldr	r3, [r7, #12]
     d7c:	741a      	strb	r2, [r3, #16]
	 return w;
     d7e:	697b      	ldr	r3, [r7, #20]
	
}
     d80:	0018      	movs	r0, r3
     d82:	46bd      	mov	sp, r7
     d84:	b006      	add	sp, #24
     d86:	bd80      	pop	{r7, pc}
     d88:	000010ad 	.word	0x000010ad

00000d8c <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
     d8c:	b580      	push	{r7, lr}
     d8e:	b086      	sub	sp, #24
     d90:	af00      	add	r7, sp, #0
     d92:	60f8      	str	r0, [r7, #12]
     d94:	60b9      	str	r1, [r7, #8]
     d96:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
     d98:	68fb      	ldr	r3, [r7, #12]
     d9a:	2201      	movs	r2, #1
     d9c:	745a      	strb	r2, [r3, #17]
	r=io_read(spio,p,(uint16_t)n);
     d9e:	68fb      	ldr	r3, [r7, #12]
     da0:	689b      	ldr	r3, [r3, #8]
     da2:	687a      	ldr	r2, [r7, #4]
     da4:	b292      	uxth	r2, r2
     da6:	68b9      	ldr	r1, [r7, #8]
     da8:	0018      	movs	r0, r3
     daa:	4b07      	ldr	r3, [pc, #28]	; (dc8 <_ZN13SPI_Syn_Class4readEPhl+0x3c>)
     dac:	4798      	blx	r3
     dae:	0003      	movs	r3, r0
     db0:	617b      	str	r3, [r7, #20]
	rFlag=(bool)r;
     db2:	697b      	ldr	r3, [r7, #20]
     db4:	1e5a      	subs	r2, r3, #1
     db6:	4193      	sbcs	r3, r2
     db8:	b2da      	uxtb	r2, r3
     dba:	68fb      	ldr	r3, [r7, #12]
     dbc:	745a      	strb	r2, [r3, #17]
	return  r;
     dbe:	697b      	ldr	r3, [r7, #20]
}
     dc0:	0018      	movs	r0, r3
     dc2:	46bd      	mov	sp, r7
     dc4:	b006      	add	sp, #24
     dc6:	bd80      	pop	{r7, pc}
     dc8:	000010e1 	.word	0x000010e1

00000dcc <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
     dcc:	b580      	push	{r7, lr}
     dce:	b082      	sub	sp, #8
     dd0:	af00      	add	r7, sp, #0
     dd2:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
     dd4:	687b      	ldr	r3, [r7, #4]
     dd6:	685b      	ldr	r3, [r3, #4]
     dd8:	0018      	movs	r0, r3
     dda:	4b03      	ldr	r3, [pc, #12]	; (de8 <_ZN13SPI_Syn_Class7disableEv+0x1c>)
     ddc:	4798      	blx	r3
	
}
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	46bd      	mov	sp, r7
     de2:	b002      	add	sp, #8
     de4:	bd80      	pop	{r7, pc}
     de6:	46c0      	nop			; (mov r8, r8)
     de8:	000011f1 	.word	0x000011f1

00000dec <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     dec:	b510      	push	{r4, lr}
	system_init();
     dee:	4b01      	ldr	r3, [pc, #4]	; (df4 <atmel_start_init+0x8>)
     df0:	4798      	blx	r3
}
     df2:	bd10      	pop	{r4, pc}
     df4:	00000f95 	.word	0x00000f95

00000df8 <SPI_0_PORT_init>:
struct pwm_descriptor PWM_0;

struct timer_descriptor TIMER_3;

void SPI_0_PORT_init(void)
{
     df8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dfa:	46ce      	mov	lr, r9
     dfc:	4647      	mov	r7, r8
     dfe:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e00:	21c0      	movs	r1, #192	; 0xc0
     e02:	05c9      	lsls	r1, r1, #23
     e04:	2380      	movs	r3, #128	; 0x80
     e06:	009b      	lsls	r3, r3, #2
     e08:	604b      	str	r3, [r1, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e0a:	4b25      	ldr	r3, [pc, #148]	; (ea0 <SPI_0_PORT_init+0xa8>)
     e0c:	4a25      	ldr	r2, [pc, #148]	; (ea4 <SPI_0_PORT_init+0xac>)
     e0e:	629a      	str	r2, [r3, #40]	; 0x28
     e10:	4a25      	ldr	r2, [pc, #148]	; (ea8 <SPI_0_PORT_init+0xb0>)
     e12:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e14:	2449      	movs	r4, #73	; 0x49
     e16:	5d1a      	ldrb	r2, [r3, r4]
     e18:	2004      	movs	r0, #4
     e1a:	4382      	bics	r2, r0
     e1c:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e1e:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e20:	2601      	movs	r6, #1
     e22:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e24:	2201      	movs	r2, #1
     e26:	4310      	orrs	r0, r2
     e28:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e2a:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e2c:	2734      	movs	r7, #52	; 0x34
     e2e:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     e30:	250f      	movs	r5, #15
     e32:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
     e34:	2420      	movs	r4, #32
     e36:	46a1      	mov	r9, r4
     e38:	464c      	mov	r4, r9
     e3a:	4320      	orrs	r0, r4
     e3c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e3e:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e40:	2080      	movs	r0, #128	; 0x80
     e42:	00c0      	lsls	r0, r0, #3
     e44:	6148      	str	r0, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e46:	6088      	str	r0, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e48:	4818      	ldr	r0, [pc, #96]	; (eac <SPI_0_PORT_init+0xb4>)
     e4a:	6298      	str	r0, [r3, #40]	; 0x28
     e4c:	20c0      	movs	r0, #192	; 0xc0
     e4e:	0600      	lsls	r0, r0, #24
     e50:	4684      	mov	ip, r0
     e52:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e54:	3716      	adds	r7, #22
     e56:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e58:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e5a:	4310      	orrs	r0, r2
     e5c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e5e:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e60:	2035      	movs	r0, #53	; 0x35
     e62:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     e64:	240f      	movs	r4, #15
     e66:	43a7      	bics	r7, r4
	tmp |= PORT_PMUX_PMUXE(data);
     e68:	3c0d      	subs	r4, #13
     e6a:	4327      	orrs	r7, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e6c:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e6e:	2780      	movs	r7, #128	; 0x80
     e70:	013f      	lsls	r7, r7, #4
     e72:	614f      	str	r7, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e74:	608f      	str	r7, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e76:	490e      	ldr	r1, [pc, #56]	; (eb0 <SPI_0_PORT_init+0xb8>)
     e78:	6299      	str	r1, [r3, #40]	; 0x28
     e7a:	4661      	mov	r1, ip
     e7c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e7e:	274b      	movs	r7, #75	; 0x4b
     e80:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e82:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e84:	4311      	orrs	r1, r2
     e86:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e88:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e8a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     e8c:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
     e8e:	4649      	mov	r1, r9
     e90:	430a      	orrs	r2, r1
     e92:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e94:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
}
     e96:	bc0c      	pop	{r2, r3}
     e98:	4690      	mov	r8, r2
     e9a:	4699      	mov	r9, r3
     e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e9e:	46c0      	nop			; (mov r8, r8)
     ea0:	41004400 	.word	0x41004400
     ea4:	40020200 	.word	0x40020200
     ea8:	c0020000 	.word	0xc0020000
     eac:	40000400 	.word	0x40000400
     eb0:	40000800 	.word	0x40000800

00000eb4 <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     eb4:	4a04      	ldr	r2, [pc, #16]	; (ec8 <SPI_0_CLOCK_init+0x14>)
     eb6:	6a13      	ldr	r3, [r2, #32]
     eb8:	2104      	movs	r1, #4
     eba:	430b      	orrs	r3, r1
     ebc:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     ebe:	4a03      	ldr	r2, [pc, #12]	; (ecc <SPI_0_CLOCK_init+0x18>)
     ec0:	4b03      	ldr	r3, [pc, #12]	; (ed0 <SPI_0_CLOCK_init+0x1c>)
     ec2:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     ec4:	4770      	bx	lr
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	40000400 	.word	0x40000400
     ecc:	00004014 	.word	0x00004014
     ed0:	40000c00 	.word	0x40000c00

00000ed4 <SPI_0_init>:

void SPI_0_init(void)
{
     ed4:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     ed6:	4b04      	ldr	r3, [pc, #16]	; (ee8 <SPI_0_init+0x14>)
     ed8:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     eda:	4904      	ldr	r1, [pc, #16]	; (eec <SPI_0_init+0x18>)
     edc:	4804      	ldr	r0, [pc, #16]	; (ef0 <SPI_0_init+0x1c>)
     ede:	4b05      	ldr	r3, [pc, #20]	; (ef4 <SPI_0_init+0x20>)
     ee0:	4798      	blx	r3
	SPI_0_PORT_init();
     ee2:	4b05      	ldr	r3, [pc, #20]	; (ef8 <SPI_0_init+0x24>)
     ee4:	4798      	blx	r3
}
     ee6:	bd10      	pop	{r4, pc}
     ee8:	00000eb5 	.word	0x00000eb5
     eec:	42000800 	.word	0x42000800
     ef0:	20000630 	.word	0x20000630
     ef4:	00001175 	.word	0x00001175
     ef8:	00000df9 	.word	0x00000df9

00000efc <PWM_0_CLOCK_init>:
     efc:	4a04      	ldr	r2, [pc, #16]	; (f10 <PWM_0_CLOCK_init+0x14>)
     efe:	6a11      	ldr	r1, [r2, #32]
     f00:	2380      	movs	r3, #128	; 0x80
     f02:	011b      	lsls	r3, r3, #4
     f04:	430b      	orrs	r3, r1
     f06:	6213      	str	r3, [r2, #32]
     f08:	4a02      	ldr	r2, [pc, #8]	; (f14 <PWM_0_CLOCK_init+0x18>)
     f0a:	4b03      	ldr	r3, [pc, #12]	; (f18 <PWM_0_CLOCK_init+0x1c>)
     f0c:	805a      	strh	r2, [r3, #2]

void PWM_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);
}
     f0e:	4770      	bx	lr
     f10:	40000400 	.word	0x40000400
     f14:	0000431b 	.word	0x0000431b
     f18:	40000c00 	.word	0x40000c00

00000f1c <PWM_0_init>:

void PWM_0_init(void)
{
     f1c:	b510      	push	{r4, lr}
	PWM_0_CLOCK_init();
     f1e:	4b05      	ldr	r3, [pc, #20]	; (f34 <PWM_0_init+0x18>)
     f20:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC3, _tc_get_pwm());
     f22:	4b05      	ldr	r3, [pc, #20]	; (f38 <PWM_0_init+0x1c>)
     f24:	4798      	blx	r3
     f26:	0002      	movs	r2, r0
     f28:	4904      	ldr	r1, [pc, #16]	; (f3c <PWM_0_init+0x20>)
     f2a:	4805      	ldr	r0, [pc, #20]	; (f40 <PWM_0_init+0x24>)
     f2c:	4b05      	ldr	r3, [pc, #20]	; (f44 <PWM_0_init+0x28>)
     f2e:	4798      	blx	r3
}
     f30:	bd10      	pop	{r4, pc}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	00000efd 	.word	0x00000efd
     f38:	00001f39 	.word	0x00001f39
     f3c:	42002c00 	.word	0x42002c00
     f40:	200005f4 	.word	0x200005f4
     f44:	0000112d 	.word	0x0000112d

00000f48 <TIMER_3_CLOCK_init>:
     f48:	4a04      	ldr	r2, [pc, #16]	; (f5c <TIMER_3_CLOCK_init+0x14>)
     f4a:	6a11      	ldr	r1, [r2, #32]
     f4c:	2380      	movs	r3, #128	; 0x80
     f4e:	005b      	lsls	r3, r3, #1
     f50:	430b      	orrs	r3, r1
     f52:	6213      	str	r3, [r2, #32]
     f54:	4a02      	ldr	r2, [pc, #8]	; (f60 <TIMER_3_CLOCK_init+0x18>)
     f56:	4b03      	ldr	r3, [pc, #12]	; (f64 <TIMER_3_CLOCK_init+0x1c>)
     f58:	805a      	strh	r2, [r3, #2]

void TIMER_3_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TCC0);
	_gclk_enable_channel(TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC);
}
     f5a:	4770      	bx	lr
     f5c:	40000400 	.word	0x40000400
     f60:	0000421a 	.word	0x0000421a
     f64:	40000c00 	.word	0x40000c00

00000f68 <TIMER_3_init>:

void TIMER_3_init(void)
{
     f68:	b510      	push	{r4, lr}
	TIMER_3_CLOCK_init();
     f6a:	4b05      	ldr	r3, [pc, #20]	; (f80 <TIMER_3_init+0x18>)
     f6c:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
     f6e:	4b05      	ldr	r3, [pc, #20]	; (f84 <TIMER_3_init+0x1c>)
     f70:	4798      	blx	r3
     f72:	0002      	movs	r2, r0
     f74:	4904      	ldr	r1, [pc, #16]	; (f88 <TIMER_3_init+0x20>)
     f76:	4805      	ldr	r0, [pc, #20]	; (f8c <TIMER_3_init+0x24>)
     f78:	4b05      	ldr	r3, [pc, #20]	; (f90 <TIMER_3_init+0x28>)
     f7a:	4798      	blx	r3
}
     f7c:	bd10      	pop	{r4, pc}
     f7e:	46c0      	nop			; (mov r8, r8)
     f80:	00000f49 	.word	0x00000f49
     f84:	00001b69 	.word	0x00001b69
     f88:	42002000 	.word	0x42002000
     f8c:	20000648 	.word	0x20000648
     f90:	00001405 	.word	0x00001405

00000f94 <system_init>:

void system_init(void)
{
     f94:	b5f0      	push	{r4, r5, r6, r7, lr}
     f96:	46c6      	mov	lr, r8
     f98:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     f9a:	4b2a      	ldr	r3, [pc, #168]	; (1044 <system_init+0xb0>)
     f9c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f9e:	22c0      	movs	r2, #192	; 0xc0
     fa0:	05d2      	lsls	r2, r2, #23
     fa2:	2080      	movs	r0, #128	; 0x80
     fa4:	0040      	lsls	r0, r0, #1
     fa6:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fa8:	4b27      	ldr	r3, [pc, #156]	; (1048 <system_init+0xb4>)
     faa:	4928      	ldr	r1, [pc, #160]	; (104c <system_init+0xb8>)
     fac:	6299      	str	r1, [r3, #40]	; 0x28
     fae:	4928      	ldr	r1, [pc, #160]	; (1050 <system_init+0xbc>)
     fb0:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     fb2:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     fb4:	2148      	movs	r1, #72	; 0x48
     fb6:	5c5c      	ldrb	r4, [r3, r1]
     fb8:	2504      	movs	r5, #4
     fba:	432c      	orrs	r4, r5
     fbc:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     fbe:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fc0:	5c5c      	ldrb	r4, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     fc2:	38ff      	subs	r0, #255	; 0xff
     fc4:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fc6:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     fc8:	2180      	movs	r1, #128	; 0x80
     fca:	0509      	lsls	r1, r1, #20
     fcc:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fce:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fd0:	2480      	movs	r4, #128	; 0x80
     fd2:	05e4      	lsls	r4, r4, #23
     fd4:	629c      	str	r4, [r3, #40]	; 0x28
     fd6:	491f      	ldr	r1, [pc, #124]	; (1054 <system_init+0xc0>)
     fd8:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fda:	3557      	adds	r5, #87	; 0x57
     fdc:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     fde:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fe0:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     fe2:	2180      	movs	r1, #128	; 0x80
     fe4:	0549      	lsls	r1, r1, #21
     fe6:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fe8:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fea:	629c      	str	r4, [r3, #40]	; 0x28
     fec:	4a1a      	ldr	r2, [pc, #104]	; (1058 <system_init+0xc4>)
     fee:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ff0:	215c      	movs	r1, #92	; 0x5c
     ff2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ff4:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff6:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);

	SPI_0_init();
     ff8:	4b18      	ldr	r3, [pc, #96]	; (105c <system_init+0xc8>)
     ffa:	4798      	blx	r3

	PWM_0_init();
     ffc:	4b18      	ldr	r3, [pc, #96]	; (1060 <system_init+0xcc>)
     ffe:	4798      	blx	r3
    1000:	4c18      	ldr	r4, [pc, #96]	; (1064 <system_init+0xd0>)
    1002:	6a22      	ldr	r2, [r4, #32]
    1004:	2380      	movs	r3, #128	; 0x80
    1006:	015b      	lsls	r3, r3, #5
    1008:	4313      	orrs	r3, r2
    100a:	6223      	str	r3, [r4, #32]
    100c:	4f16      	ldr	r7, [pc, #88]	; (1068 <system_init+0xd4>)
    100e:	4b17      	ldr	r3, [pc, #92]	; (106c <system_init+0xd8>)
    1010:	4698      	mov	r8, r3
    1012:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_1, TC4, _tc_get_timer());
    1014:	4e16      	ldr	r6, [pc, #88]	; (1070 <system_init+0xdc>)
    1016:	47b0      	blx	r6
    1018:	0002      	movs	r2, r0
    101a:	4916      	ldr	r1, [pc, #88]	; (1074 <system_init+0xe0>)
    101c:	4816      	ldr	r0, [pc, #88]	; (1078 <system_init+0xe4>)
    101e:	4d17      	ldr	r5, [pc, #92]	; (107c <system_init+0xe8>)
    1020:	47a8      	blx	r5
    1022:	6a22      	ldr	r2, [r4, #32]
    1024:	2380      	movs	r3, #128	; 0x80
    1026:	019b      	lsls	r3, r3, #6
    1028:	4313      	orrs	r3, r2
    102a:	6223      	str	r3, [r4, #32]
    102c:	4643      	mov	r3, r8
    102e:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_2, TC5, _tc_get_timer());
    1030:	47b0      	blx	r6
    1032:	0002      	movs	r2, r0
    1034:	4912      	ldr	r1, [pc, #72]	; (1080 <system_init+0xec>)
    1036:	4813      	ldr	r0, [pc, #76]	; (1084 <system_init+0xf0>)
    1038:	47a8      	blx	r5

	TIMER_1_init();
	TIMER_2_init();

	TIMER_3_init();
    103a:	4b13      	ldr	r3, [pc, #76]	; (1088 <system_init+0xf4>)
    103c:	4798      	blx	r3
}
    103e:	bc04      	pop	{r2}
    1040:	4690      	mov	r8, r2
    1042:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1044:	000014fd 	.word	0x000014fd
    1048:	41004400 	.word	0x41004400
    104c:	40020100 	.word	0x40020100
    1050:	c0020000 	.word	0xc0020000
    1054:	c0000800 	.word	0xc0000800
    1058:	c0001000 	.word	0xc0001000
    105c:	00000ed5 	.word	0x00000ed5
    1060:	00000f1d 	.word	0x00000f1d
    1064:	40000400 	.word	0x40000400
    1068:	40000c00 	.word	0x40000c00
    106c:	0000431c 	.word	0x0000431c
    1070:	00001f2d 	.word	0x00001f2d
    1074:	42003000 	.word	0x42003000
    1078:	20000610 	.word	0x20000610
    107c:	00001405 	.word	0x00001405
    1080:	42003400 	.word	0x42003400
    1084:	200005d4 	.word	0x200005d4
    1088:	00000f69 	.word	0x00000f69

0000108c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    108c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    108e:	4b04      	ldr	r3, [pc, #16]	; (10a0 <delay_ms+0x14>)
    1090:	681c      	ldr	r4, [r3, #0]
    1092:	4b04      	ldr	r3, [pc, #16]	; (10a4 <delay_ms+0x18>)
    1094:	4798      	blx	r3
    1096:	0001      	movs	r1, r0
    1098:	0020      	movs	r0, r4
    109a:	4b03      	ldr	r3, [pc, #12]	; (10a8 <delay_ms+0x1c>)
    109c:	4798      	blx	r3
}
    109e:	bd10      	pop	{r4, pc}
    10a0:	200005c0 	.word	0x200005c0
    10a4:	000014d9 	.word	0x000014d9
    10a8:	000014f5 	.word	0x000014f5

000010ac <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    10ac:	b570      	push	{r4, r5, r6, lr}
    10ae:	0006      	movs	r6, r0
    10b0:	000c      	movs	r4, r1
    10b2:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    10b4:	2800      	cmp	r0, #0
    10b6:	d00d      	beq.n	10d4 <io_write+0x28>
    10b8:	0008      	movs	r0, r1
    10ba:	1e43      	subs	r3, r0, #1
    10bc:	4198      	sbcs	r0, r3
    10be:	b2c0      	uxtb	r0, r0
    10c0:	2234      	movs	r2, #52	; 0x34
    10c2:	4905      	ldr	r1, [pc, #20]	; (10d8 <io_write+0x2c>)
    10c4:	4b05      	ldr	r3, [pc, #20]	; (10dc <io_write+0x30>)
    10c6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    10c8:	6833      	ldr	r3, [r6, #0]
    10ca:	002a      	movs	r2, r5
    10cc:	0021      	movs	r1, r4
    10ce:	0030      	movs	r0, r6
    10d0:	4798      	blx	r3
}
    10d2:	bd70      	pop	{r4, r5, r6, pc}
    10d4:	2000      	movs	r0, #0
    10d6:	e7f3      	b.n	10c0 <io_write+0x14>
    10d8:	00002404 	.word	0x00002404
    10dc:	0000144d 	.word	0x0000144d

000010e0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    10e0:	b570      	push	{r4, r5, r6, lr}
    10e2:	0006      	movs	r6, r0
    10e4:	000c      	movs	r4, r1
    10e6:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    10e8:	2800      	cmp	r0, #0
    10ea:	d00d      	beq.n	1108 <io_read+0x28>
    10ec:	0008      	movs	r0, r1
    10ee:	1e43      	subs	r3, r0, #1
    10f0:	4198      	sbcs	r0, r3
    10f2:	b2c0      	uxtb	r0, r0
    10f4:	223d      	movs	r2, #61	; 0x3d
    10f6:	4905      	ldr	r1, [pc, #20]	; (110c <io_read+0x2c>)
    10f8:	4b05      	ldr	r3, [pc, #20]	; (1110 <io_read+0x30>)
    10fa:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    10fc:	6873      	ldr	r3, [r6, #4]
    10fe:	002a      	movs	r2, r5
    1100:	0021      	movs	r1, r4
    1102:	0030      	movs	r0, r6
    1104:	4798      	blx	r3
}
    1106:	bd70      	pop	{r4, r5, r6, pc}
    1108:	2000      	movs	r0, #0
    110a:	e7f3      	b.n	10f4 <io_read+0x14>
    110c:	00002404 	.word	0x00002404
    1110:	0000144d 	.word	0x0000144d

00001114 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1114:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    1116:	6943      	ldr	r3, [r0, #20]
    1118:	2b00      	cmp	r3, #0
    111a:	d000      	beq.n	111e <pwm_period_expired+0xa>
		descr->pwm_cb.period(descr);
    111c:	4798      	blx	r3
	}
}
    111e:	bd10      	pop	{r4, pc}

00001120 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1120:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    1122:	6983      	ldr	r3, [r0, #24]
    1124:	2b00      	cmp	r3, #0
    1126:	d000      	beq.n	112a <pwm_detect_fault+0xa>
		descr->pwm_cb.error(descr);
    1128:	4798      	blx	r3
	}
}
    112a:	bd10      	pop	{r4, pc}

0000112c <pwm_init>:
{
    112c:	b570      	push	{r4, r5, r6, lr}
    112e:	0005      	movs	r5, r0
    1130:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    1132:	2800      	cmp	r0, #0
    1134:	d011      	beq.n	115a <pwm_init+0x2e>
    1136:	0008      	movs	r0, r1
    1138:	1e43      	subs	r3, r0, #1
    113a:	4198      	sbcs	r0, r3
    113c:	b2c0      	uxtb	r0, r0
    113e:	2233      	movs	r2, #51	; 0x33
    1140:	4907      	ldr	r1, [pc, #28]	; (1160 <pwm_init+0x34>)
    1142:	4b08      	ldr	r3, [pc, #32]	; (1164 <pwm_init+0x38>)
    1144:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1146:	0021      	movs	r1, r4
    1148:	0028      	movs	r0, r5
    114a:	4b07      	ldr	r3, [pc, #28]	; (1168 <pwm_init+0x3c>)
    114c:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    114e:	4b07      	ldr	r3, [pc, #28]	; (116c <pwm_init+0x40>)
    1150:	602b      	str	r3, [r5, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1152:	4b07      	ldr	r3, [pc, #28]	; (1170 <pwm_init+0x44>)
    1154:	606b      	str	r3, [r5, #4]
}
    1156:	2000      	movs	r0, #0
    1158:	bd70      	pop	{r4, r5, r6, pc}
    115a:	2000      	movs	r0, #0
    115c:	e7ef      	b.n	113e <pwm_init+0x12>
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	00002418 	.word	0x00002418
    1164:	0000144d 	.word	0x0000144d
    1168:	00001e21 	.word	0x00001e21
    116c:	00001115 	.word	0x00001115
    1170:	00001121 	.word	0x00001121

00001174 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1174:	b570      	push	{r4, r5, r6, lr}
    1176:	0004      	movs	r4, r0
    1178:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    117a:	2800      	cmp	r0, #0
    117c:	d016      	beq.n	11ac <spi_m_sync_init+0x38>
    117e:	0008      	movs	r0, r1
    1180:	1e43      	subs	r3, r0, #1
    1182:	4198      	sbcs	r0, r3
    1184:	b2c0      	uxtb	r0, r0
    1186:	2240      	movs	r2, #64	; 0x40
    1188:	4909      	ldr	r1, [pc, #36]	; (11b0 <spi_m_sync_init+0x3c>)
    118a:	4b0a      	ldr	r3, [pc, #40]	; (11b4 <spi_m_sync_init+0x40>)
    118c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    118e:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1190:	1d20      	adds	r0, r4, #4
    1192:	0029      	movs	r1, r5
    1194:	4b08      	ldr	r3, [pc, #32]	; (11b8 <spi_m_sync_init+0x44>)
    1196:	4798      	blx	r3

	if (rc < 0) {
    1198:	2800      	cmp	r0, #0
    119a:	db06      	blt.n	11aa <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    119c:	4b07      	ldr	r3, [pc, #28]	; (11bc <spi_m_sync_init+0x48>)
    119e:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    11a0:	4b07      	ldr	r3, [pc, #28]	; (11c0 <spi_m_sync_init+0x4c>)
    11a2:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    11a4:	4b07      	ldr	r3, [pc, #28]	; (11c4 <spi_m_sync_init+0x50>)
    11a6:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    11a8:	2000      	movs	r0, #0
}
    11aa:	bd70      	pop	{r4, r5, r6, pc}
    11ac:	2000      	movs	r0, #0
    11ae:	e7ea      	b.n	1186 <spi_m_sync_init+0x12>
    11b0:	00002430 	.word	0x00002430
    11b4:	0000144d 	.word	0x0000144d
    11b8:	00001649 	.word	0x00001649
    11bc:	ffff8000 	.word	0xffff8000
    11c0:	0000129d 	.word	0x0000129d
    11c4:	00001261 	.word	0x00001261

000011c8 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    11c8:	b510      	push	{r4, lr}
    11ca:	0004      	movs	r4, r0
	ASSERT(spi);
    11cc:	1e43      	subs	r3, r0, #1
    11ce:	4198      	sbcs	r0, r3
    11d0:	b2c0      	uxtb	r0, r0
    11d2:	2257      	movs	r2, #87	; 0x57
    11d4:	4903      	ldr	r1, [pc, #12]	; (11e4 <spi_m_sync_enable+0x1c>)
    11d6:	4b04      	ldr	r3, [pc, #16]	; (11e8 <spi_m_sync_enable+0x20>)
    11d8:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    11da:	1d20      	adds	r0, r4, #4
    11dc:	4b03      	ldr	r3, [pc, #12]	; (11ec <spi_m_sync_enable+0x24>)
    11de:	4798      	blx	r3
}
    11e0:	bd10      	pop	{r4, pc}
    11e2:	46c0      	nop			; (mov r8, r8)
    11e4:	00002430 	.word	0x00002430
    11e8:	0000144d 	.word	0x0000144d
    11ec:	00001741 	.word	0x00001741

000011f0 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    11f0:	b510      	push	{r4, lr}
    11f2:	0004      	movs	r4, r0
	ASSERT(spi);
    11f4:	1e43      	subs	r3, r0, #1
    11f6:	4198      	sbcs	r0, r3
    11f8:	b2c0      	uxtb	r0, r0
    11fa:	225d      	movs	r2, #93	; 0x5d
    11fc:	4903      	ldr	r1, [pc, #12]	; (120c <spi_m_sync_disable+0x1c>)
    11fe:	4b04      	ldr	r3, [pc, #16]	; (1210 <spi_m_sync_disable+0x20>)
    1200:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    1202:	1d20      	adds	r0, r4, #4
    1204:	4b03      	ldr	r3, [pc, #12]	; (1214 <spi_m_sync_disable+0x24>)
    1206:	4798      	blx	r3
}
    1208:	bd10      	pop	{r4, pc}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	00002430 	.word	0x00002430
    1210:	0000144d 	.word	0x0000144d
    1214:	00001775 	.word	0x00001775

00001218 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1218:	b530      	push	{r4, r5, lr}
    121a:	b087      	sub	sp, #28
    121c:	0004      	movs	r4, r0
    121e:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1220:	2800      	cmp	r0, #0
    1222:	d014      	beq.n	124e <spi_m_sync_transfer+0x36>
    1224:	0008      	movs	r0, r1
    1226:	1e43      	subs	r3, r0, #1
    1228:	4198      	sbcs	r0, r3
    122a:	b2c0      	uxtb	r0, r0
    122c:	22b3      	movs	r2, #179	; 0xb3
    122e:	4909      	ldr	r1, [pc, #36]	; (1254 <spi_m_sync_transfer+0x3c>)
    1230:	4b09      	ldr	r3, [pc, #36]	; (1258 <spi_m_sync_transfer+0x40>)
    1232:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1234:	682b      	ldr	r3, [r5, #0]
    1236:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    1238:	686b      	ldr	r3, [r5, #4]
    123a:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    123c:	68ab      	ldr	r3, [r5, #8]
    123e:	9301      	str	r3, [sp, #4]
    1240:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1242:	1d20      	adds	r0, r4, #4
    1244:	a903      	add	r1, sp, #12
    1246:	4b05      	ldr	r3, [pc, #20]	; (125c <spi_m_sync_transfer+0x44>)
    1248:	4798      	blx	r3
}
    124a:	b007      	add	sp, #28
    124c:	bd30      	pop	{r4, r5, pc}
    124e:	2000      	movs	r0, #0
    1250:	e7ec      	b.n	122c <spi_m_sync_transfer+0x14>
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	00002430 	.word	0x00002430
    1258:	0000144d 	.word	0x0000144d
    125c:	000017a9 	.word	0x000017a9

00001260 <_spi_m_sync_io_write>:
{
    1260:	b570      	push	{r4, r5, r6, lr}
    1262:	b084      	sub	sp, #16
    1264:	0004      	movs	r4, r0
    1266:	000e      	movs	r6, r1
    1268:	0015      	movs	r5, r2
	ASSERT(io);
    126a:	1e43      	subs	r3, r0, #1
    126c:	4198      	sbcs	r0, r3
    126e:	b2c0      	uxtb	r0, r0
    1270:	22a3      	movs	r2, #163	; 0xa3
    1272:	4907      	ldr	r1, [pc, #28]	; (1290 <_spi_m_sync_io_write+0x30>)
    1274:	4b07      	ldr	r3, [pc, #28]	; (1294 <_spi_m_sync_io_write+0x34>)
    1276:	4798      	blx	r3
	xfer.rxbuf = 0;
    1278:	2300      	movs	r3, #0
    127a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    127c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    127e:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1280:	0020      	movs	r0, r4
    1282:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    1284:	a901      	add	r1, sp, #4
    1286:	4b04      	ldr	r3, [pc, #16]	; (1298 <_spi_m_sync_io_write+0x38>)
    1288:	4798      	blx	r3
}
    128a:	b004      	add	sp, #16
    128c:	bd70      	pop	{r4, r5, r6, pc}
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	00002430 	.word	0x00002430
    1294:	0000144d 	.word	0x0000144d
    1298:	00001219 	.word	0x00001219

0000129c <_spi_m_sync_io_read>:
{
    129c:	b570      	push	{r4, r5, r6, lr}
    129e:	b084      	sub	sp, #16
    12a0:	0004      	movs	r4, r0
    12a2:	000e      	movs	r6, r1
    12a4:	0015      	movs	r5, r2
	ASSERT(io);
    12a6:	1e43      	subs	r3, r0, #1
    12a8:	4198      	sbcs	r0, r3
    12aa:	b2c0      	uxtb	r0, r0
    12ac:	2287      	movs	r2, #135	; 0x87
    12ae:	4907      	ldr	r1, [pc, #28]	; (12cc <_spi_m_sync_io_read+0x30>)
    12b0:	4b07      	ldr	r3, [pc, #28]	; (12d0 <_spi_m_sync_io_read+0x34>)
    12b2:	4798      	blx	r3
	xfer.rxbuf = buf;
    12b4:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    12b6:	2300      	movs	r3, #0
    12b8:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    12ba:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    12bc:	0020      	movs	r0, r4
    12be:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    12c0:	a901      	add	r1, sp, #4
    12c2:	4b04      	ldr	r3, [pc, #16]	; (12d4 <_spi_m_sync_io_read+0x38>)
    12c4:	4798      	blx	r3
}
    12c6:	b004      	add	sp, #16
    12c8:	bd70      	pop	{r4, r5, r6, pc}
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	00002430 	.word	0x00002430
    12d0:	0000144d 	.word	0x0000144d
    12d4:	00001219 	.word	0x00001219

000012d8 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    12d8:	b570      	push	{r4, r5, r6, lr}
    12da:	0004      	movs	r4, r0
    12dc:	000d      	movs	r5, r1
	ASSERT(spi && io);
    12de:	2800      	cmp	r0, #0
    12e0:	d00b      	beq.n	12fa <spi_m_sync_get_io_descriptor+0x22>
    12e2:	0008      	movs	r0, r1
    12e4:	1e43      	subs	r3, r0, #1
    12e6:	4198      	sbcs	r0, r3
    12e8:	b2c0      	uxtb	r0, r0
    12ea:	22bd      	movs	r2, #189	; 0xbd
    12ec:	4904      	ldr	r1, [pc, #16]	; (1300 <spi_m_sync_get_io_descriptor+0x28>)
    12ee:	4b05      	ldr	r3, [pc, #20]	; (1304 <spi_m_sync_get_io_descriptor+0x2c>)
    12f0:	4798      	blx	r3
	*io = &spi->io;
    12f2:	340c      	adds	r4, #12
    12f4:	602c      	str	r4, [r5, #0]
	return 0;
}
    12f6:	2000      	movs	r0, #0
    12f8:	bd70      	pop	{r4, r5, r6, pc}
    12fa:	2000      	movs	r0, #0
    12fc:	e7f5      	b.n	12ea <spi_m_sync_get_io_descriptor+0x12>
    12fe:	46c0      	nop			; (mov r8, r8)
    1300:	00002430 	.word	0x00002430
    1304:	0000144d 	.word	0x0000144d

00001308 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    130a:	46ce      	mov	lr, r9
    130c:	4647      	mov	r7, r8
    130e:	b580      	push	{r7, lr}
    1310:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1312:	6803      	ldr	r3, [r0, #0]
    1314:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1316:	2b00      	cmp	r3, #0
    1318:	d005      	beq.n	1326 <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    131a:	688e      	ldr	r6, [r1, #8]
    131c:	001c      	movs	r4, r3
    131e:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1320:	2701      	movs	r7, #1
    1322:	1abf      	subs	r7, r7, r2
    1324:	e00d      	b.n	1342 <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
    1326:	4b12      	ldr	r3, [pc, #72]	; (1370 <timer_add_timer_task+0x68>)
    1328:	4798      	blx	r3
		return;
    132a:	e018      	b.n	135e <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    132c:	18fb      	adds	r3, r7, r3
    132e:	68a0      	ldr	r0, [r4, #8]
    1330:	4680      	mov	r8, r0
    1332:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
    1334:	42b3      	cmp	r3, r6
    1336:	d20c      	bcs.n	1352 <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1338:	6823      	ldr	r3, [r4, #0]
    133a:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    133c:	2b00      	cmp	r3, #0
    133e:	d00b      	beq.n	1358 <timer_add_timer_task+0x50>
    1340:	001c      	movs	r4, r3
		if (it->time_label <= time) {
    1342:	6863      	ldr	r3, [r4, #4]
    1344:	4293      	cmp	r3, r2
    1346:	d8f1      	bhi.n	132c <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
    1348:	68a0      	ldr	r0, [r4, #8]
    134a:	4680      	mov	r8, r0
    134c:	4443      	add	r3, r8
    134e:	1a9b      	subs	r3, r3, r2
    1350:	e7f0      	b.n	1334 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
    1352:	45a4      	cmp	ip, r4
    1354:	d007      	beq.n	1366 <timer_add_timer_task+0x5e>
    1356:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1358:	0020      	movs	r0, r4
    135a:	4b06      	ldr	r3, [pc, #24]	; (1374 <timer_add_timer_task+0x6c>)
    135c:	4798      	blx	r3
	}
}
    135e:	bc0c      	pop	{r2, r3}
    1360:	4690      	mov	r8, r2
    1362:	4699      	mov	r9, r3
    1364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1366:	4648      	mov	r0, r9
    1368:	4b01      	ldr	r3, [pc, #4]	; (1370 <timer_add_timer_task+0x68>)
    136a:	4798      	blx	r3
    136c:	e7f7      	b.n	135e <timer_add_timer_task+0x56>
    136e:	46c0      	nop			; (mov r8, r8)
    1370:	00001479 	.word	0x00001479
    1374:	000014a5 	.word	0x000014a5

00001378 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1378:	b5f0      	push	{r4, r5, r6, r7, lr}
    137a:	46c6      	mov	lr, r8
    137c:	b500      	push	{lr}
    137e:	b082      	sub	sp, #8
    1380:	0007      	movs	r7, r0
	return (void *)list->head;
    1382:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1384:	6902      	ldr	r2, [r0, #16]
    1386:	3201      	adds	r2, #1
    1388:	4690      	mov	r8, r2
    138a:	6102      	str	r2, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    138c:	7e03      	ldrb	r3, [r0, #24]
    138e:	07db      	lsls	r3, r3, #31
    1390:	d411      	bmi.n	13b6 <timer_process_counted+0x3e>
    1392:	7e03      	ldrb	r3, [r0, #24]
    1394:	079b      	lsls	r3, r3, #30
    1396:	d40e      	bmi.n	13b6 <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1398:	2c00      	cmp	r4, #0
    139a:	d010      	beq.n	13be <timer_process_counted+0x46>
    139c:	0013      	movs	r3, r2
    139e:	6862      	ldr	r2, [r4, #4]
    13a0:	1a9b      	subs	r3, r3, r2
    13a2:	68a2      	ldr	r2, [r4, #8]
    13a4:	4293      	cmp	r3, r2
    13a6:	d30a      	bcc.n	13be <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    13a8:	2314      	movs	r3, #20
    13aa:	469c      	mov	ip, r3
    13ac:	4484      	add	ip, r0
    13ae:	4663      	mov	r3, ip
    13b0:	9301      	str	r3, [sp, #4]
    13b2:	4e12      	ldr	r6, [pc, #72]	; (13fc <timer_process_counted+0x84>)
    13b4:	e014      	b.n	13e0 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    13b6:	7e3b      	ldrb	r3, [r7, #24]
    13b8:	2202      	movs	r2, #2
    13ba:	4313      	orrs	r3, r2
    13bc:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    13be:	b002      	add	sp, #8
    13c0:	bc04      	pop	{r2}
    13c2:	4690      	mov	r8, r2
    13c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13c6:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
    13c8:	68e3      	ldr	r3, [r4, #12]
    13ca:	0020      	movs	r0, r4
    13cc:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    13ce:	2d00      	cmp	r5, #0
    13d0:	d0f5      	beq.n	13be <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    13d2:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    13d4:	4643      	mov	r3, r8
    13d6:	686a      	ldr	r2, [r5, #4]
    13d8:	1a9b      	subs	r3, r3, r2
    13da:	68aa      	ldr	r2, [r5, #8]
    13dc:	4293      	cmp	r3, r2
    13de:	d3ee      	bcc.n	13be <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
    13e0:	9801      	ldr	r0, [sp, #4]
    13e2:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
    13e4:	7c23      	ldrb	r3, [r4, #16]
    13e6:	2b01      	cmp	r3, #1
    13e8:	d1ed      	bne.n	13c6 <timer_process_counted+0x4e>
			tmp->time_label = time;
    13ea:	4643      	mov	r3, r8
    13ec:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    13ee:	4642      	mov	r2, r8
    13f0:	0021      	movs	r1, r4
    13f2:	9801      	ldr	r0, [sp, #4]
    13f4:	4b02      	ldr	r3, [pc, #8]	; (1400 <timer_process_counted+0x88>)
    13f6:	4798      	blx	r3
    13f8:	e7e5      	b.n	13c6 <timer_process_counted+0x4e>
    13fa:	46c0      	nop			; (mov r8, r8)
    13fc:	000014ad 	.word	0x000014ad
    1400:	00001309 	.word	0x00001309

00001404 <timer_init>:
{
    1404:	b570      	push	{r4, r5, r6, lr}
    1406:	0004      	movs	r4, r0
    1408:	000d      	movs	r5, r1
    140a:	0016      	movs	r6, r2
	ASSERT(descr && hw && func);
    140c:	2800      	cmp	r0, #0
    140e:	d013      	beq.n	1438 <timer_init+0x34>
    1410:	2900      	cmp	r1, #0
    1412:	d013      	beq.n	143c <timer_init+0x38>
    1414:	0010      	movs	r0, r2
    1416:	1e43      	subs	r3, r0, #1
    1418:	4198      	sbcs	r0, r3
    141a:	223b      	movs	r2, #59	; 0x3b
    141c:	4908      	ldr	r1, [pc, #32]	; (1440 <timer_init+0x3c>)
    141e:	4b09      	ldr	r3, [pc, #36]	; (1444 <timer_init+0x40>)
    1420:	4798      	blx	r3
	descr->func = func;
    1422:	0020      	movs	r0, r4
    1424:	c040      	stmia	r0!, {r6}
	descr->func->init(&descr->device, hw);
    1426:	6833      	ldr	r3, [r6, #0]
    1428:	0029      	movs	r1, r5
    142a:	4798      	blx	r3
	descr->time                           = 0;
    142c:	2300      	movs	r3, #0
    142e:	6163      	str	r3, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1430:	4b05      	ldr	r3, [pc, #20]	; (1448 <timer_init+0x44>)
    1432:	6063      	str	r3, [r4, #4]
}
    1434:	2000      	movs	r0, #0
    1436:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    1438:	2000      	movs	r0, #0
    143a:	e7ee      	b.n	141a <timer_init+0x16>
    143c:	2000      	movs	r0, #0
    143e:	e7ec      	b.n	141a <timer_init+0x16>
    1440:	0000244c 	.word	0x0000244c
    1444:	0000144d 	.word	0x0000144d
    1448:	00001379 	.word	0x00001379

0000144c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    144c:	2800      	cmp	r0, #0
    144e:	d100      	bne.n	1452 <assert+0x6>
		__asm("BKPT #0");
    1450:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1452:	4770      	bx	lr

00001454 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1454:	6803      	ldr	r3, [r0, #0]
    1456:	2b00      	cmp	r3, #0
    1458:	d00a      	beq.n	1470 <is_list_element+0x1c>
		if (it == element) {
    145a:	428b      	cmp	r3, r1
    145c:	d00a      	beq.n	1474 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    145e:	681b      	ldr	r3, [r3, #0]
    1460:	2b00      	cmp	r3, #0
    1462:	d003      	beq.n	146c <is_list_element+0x18>
		if (it == element) {
    1464:	4299      	cmp	r1, r3
    1466:	d1fa      	bne.n	145e <is_list_element+0xa>
			return true;
    1468:	2001      	movs	r0, #1
    146a:	e000      	b.n	146e <is_list_element+0x1a>
		}
	}

	return false;
    146c:	2000      	movs	r0, #0
}
    146e:	4770      	bx	lr
	return false;
    1470:	2000      	movs	r0, #0
    1472:	e7fc      	b.n	146e <is_list_element+0x1a>
			return true;
    1474:	2001      	movs	r0, #1
    1476:	e7fa      	b.n	146e <is_list_element+0x1a>

00001478 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1478:	b570      	push	{r4, r5, r6, lr}
    147a:	0004      	movs	r4, r0
    147c:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    147e:	4b06      	ldr	r3, [pc, #24]	; (1498 <list_insert_as_head+0x20>)
    1480:	4798      	blx	r3
    1482:	2301      	movs	r3, #1
    1484:	4058      	eors	r0, r3
    1486:	b2c0      	uxtb	r0, r0
    1488:	2239      	movs	r2, #57	; 0x39
    148a:	4904      	ldr	r1, [pc, #16]	; (149c <list_insert_as_head+0x24>)
    148c:	4b04      	ldr	r3, [pc, #16]	; (14a0 <list_insert_as_head+0x28>)
    148e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1490:	6823      	ldr	r3, [r4, #0]
    1492:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1494:	6025      	str	r5, [r4, #0]
}
    1496:	bd70      	pop	{r4, r5, r6, pc}
    1498:	00001455 	.word	0x00001455
    149c:	00002464 	.word	0x00002464
    14a0:	0000144d 	.word	0x0000144d

000014a4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    14a4:	6803      	ldr	r3, [r0, #0]
    14a6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    14a8:	6001      	str	r1, [r0, #0]
}
    14aa:	4770      	bx	lr

000014ac <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    14ac:	6803      	ldr	r3, [r0, #0]
    14ae:	2b00      	cmp	r3, #0
    14b0:	d001      	beq.n	14b6 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    14b2:	681a      	ldr	r2, [r3, #0]
    14b4:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    14b6:	0018      	movs	r0, r3
    14b8:	4770      	bx	lr
	...

000014bc <_irq_set>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    14bc:	b243      	sxtb	r3, r0
    14be:	2b00      	cmp	r3, #0
    14c0:	db07      	blt.n	14d2 <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14c2:	231f      	movs	r3, #31
    14c4:	4018      	ands	r0, r3
    14c6:	3b1e      	subs	r3, #30
    14c8:	4083      	lsls	r3, r0
    14ca:	2280      	movs	r2, #128	; 0x80
    14cc:	0052      	lsls	r2, r2, #1
    14ce:	4901      	ldr	r1, [pc, #4]	; (14d4 <_irq_set+0x18>)
    14d0:	508b      	str	r3, [r1, r2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
    14d2:	4770      	bx	lr
    14d4:	e000e100 	.word	0xe000e100

000014d8 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    14d8:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
    14da:	0103      	lsls	r3, r0, #4
    14dc:	1a1b      	subs	r3, r3, r0
    14de:	015b      	lsls	r3, r3, #5
    14e0:	1a18      	subs	r0, r3, r0
    14e2:	3002      	adds	r0, #2
    14e4:	2103      	movs	r1, #3
    14e6:	4b02      	ldr	r3, [pc, #8]	; (14f0 <_get_cycles_for_ms+0x18>)
    14e8:	4798      	blx	r3
    14ea:	2364      	movs	r3, #100	; 0x64
    14ec:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    14ee:	bd10      	pop	{r4, pc}
    14f0:	00001fad 	.word	0x00001fad

000014f4 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    14f4:	3901      	subs	r1, #1
    14f6:	d8fd      	bhi.n	14f4 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    14f8:	4770      	bx	lr
	...

000014fc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    14fc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    14fe:	4a08      	ldr	r2, [pc, #32]	; (1520 <_init_chip+0x24>)
    1500:	6853      	ldr	r3, [r2, #4]
    1502:	2108      	movs	r1, #8
    1504:	430b      	orrs	r3, r1
    1506:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    1508:	4b06      	ldr	r3, [pc, #24]	; (1524 <_init_chip+0x28>)
    150a:	4798      	blx	r3
	_sysctrl_init_sources();
    150c:	4b06      	ldr	r3, [pc, #24]	; (1528 <_init_chip+0x2c>)
    150e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1510:	2080      	movs	r0, #128	; 0x80
    1512:	4c06      	ldr	r4, [pc, #24]	; (152c <_init_chip+0x30>)
    1514:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    1516:	4b06      	ldr	r3, [pc, #24]	; (1530 <_init_chip+0x34>)
    1518:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    151a:	207f      	movs	r0, #127	; 0x7f
    151c:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    151e:	bd10      	pop	{r4, pc}
    1520:	41004000 	.word	0x41004000
    1524:	000015e9 	.word	0x000015e9
    1528:	000018b9 	.word	0x000018b9
    152c:	00001535 	.word	0x00001535
    1530:	000018fd 	.word	0x000018fd

00001534 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1534:	07c3      	lsls	r3, r0, #31
    1536:	d509      	bpl.n	154c <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1538:	4b22      	ldr	r3, [pc, #136]	; (15c4 <_gclk_init_generators_by_fref+0x90>)
    153a:	2280      	movs	r2, #128	; 0x80
    153c:	0052      	lsls	r2, r2, #1
    153e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1540:	4a21      	ldr	r2, [pc, #132]	; (15c8 <_gclk_init_generators_by_fref+0x94>)
    1542:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1544:	001a      	movs	r2, r3
    1546:	7853      	ldrb	r3, [r2, #1]
    1548:	09db      	lsrs	r3, r3, #7
    154a:	d1fc      	bne.n	1546 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    154c:	0783      	lsls	r3, r0, #30
    154e:	d509      	bpl.n	1564 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    1550:	4b1c      	ldr	r3, [pc, #112]	; (15c4 <_gclk_init_generators_by_fref+0x90>)
    1552:	2202      	movs	r2, #2
    1554:	32ff      	adds	r2, #255	; 0xff
    1556:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1558:	4a1c      	ldr	r2, [pc, #112]	; (15cc <_gclk_init_generators_by_fref+0x98>)
    155a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    155c:	001a      	movs	r2, r3
    155e:	7853      	ldrb	r3, [r2, #1]
    1560:	09db      	lsrs	r3, r3, #7
    1562:	d1fc      	bne.n	155e <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1564:	0743      	lsls	r3, r0, #29
    1566:	d508      	bpl.n	157a <_gclk_init_generators_by_fref+0x46>
	((Gclk *)hw)->GENDIV.reg = data;
    1568:	4b16      	ldr	r3, [pc, #88]	; (15c4 <_gclk_init_generators_by_fref+0x90>)
    156a:	4a19      	ldr	r2, [pc, #100]	; (15d0 <_gclk_init_generators_by_fref+0x9c>)
    156c:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    156e:	4a19      	ldr	r2, [pc, #100]	; (15d4 <_gclk_init_generators_by_fref+0xa0>)
    1570:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1572:	001a      	movs	r2, r3
    1574:	7853      	ldrb	r3, [r2, #1]
    1576:	09db      	lsrs	r3, r3, #7
    1578:	d1fc      	bne.n	1574 <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    157a:	0703      	lsls	r3, r0, #28
    157c:	d509      	bpl.n	1592 <_gclk_init_generators_by_fref+0x5e>
	((Gclk *)hw)->GENDIV.reg = data;
    157e:	4b11      	ldr	r3, [pc, #68]	; (15c4 <_gclk_init_generators_by_fref+0x90>)
    1580:	2204      	movs	r2, #4
    1582:	32ff      	adds	r2, #255	; 0xff
    1584:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1586:	4a14      	ldr	r2, [pc, #80]	; (15d8 <_gclk_init_generators_by_fref+0xa4>)
    1588:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    158a:	001a      	movs	r2, r3
    158c:	7853      	ldrb	r3, [r2, #1]
    158e:	09db      	lsrs	r3, r3, #7
    1590:	d1fc      	bne.n	158c <_gclk_init_generators_by_fref+0x58>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    1592:	0683      	lsls	r3, r0, #26
    1594:	d508      	bpl.n	15a8 <_gclk_init_generators_by_fref+0x74>
	((Gclk *)hw)->GENDIV.reg = data;
    1596:	4b0b      	ldr	r3, [pc, #44]	; (15c4 <_gclk_init_generators_by_fref+0x90>)
    1598:	4a10      	ldr	r2, [pc, #64]	; (15dc <_gclk_init_generators_by_fref+0xa8>)
    159a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    159c:	4a10      	ldr	r2, [pc, #64]	; (15e0 <_gclk_init_generators_by_fref+0xac>)
    159e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    15a0:	001a      	movs	r2, r3
    15a2:	7853      	ldrb	r3, [r2, #1]
    15a4:	09db      	lsrs	r3, r3, #7
    15a6:	d1fc      	bne.n	15a2 <_gclk_init_generators_by_fref+0x6e>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    15a8:	0603      	lsls	r3, r0, #24
    15aa:	d509      	bpl.n	15c0 <_gclk_init_generators_by_fref+0x8c>
	((Gclk *)hw)->GENDIV.reg = data;
    15ac:	4b05      	ldr	r3, [pc, #20]	; (15c4 <_gclk_init_generators_by_fref+0x90>)
    15ae:	2208      	movs	r2, #8
    15b0:	32ff      	adds	r2, #255	; 0xff
    15b2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    15b4:	4a0b      	ldr	r2, [pc, #44]	; (15e4 <_gclk_init_generators_by_fref+0xb0>)
    15b6:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    15b8:	001a      	movs	r2, r3
    15ba:	7853      	ldrb	r3, [r2, #1]
    15bc:	09db      	lsrs	r3, r3, #7
    15be:	d1fc      	bne.n	15ba <_gclk_init_generators_by_fref+0x86>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    15c0:	4770      	bx	lr
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	40000c00 	.word	0x40000c00
    15c8:	00090800 	.word	0x00090800
    15cc:	00090701 	.word	0x00090701
    15d0:	00000802 	.word	0x00000802
    15d4:	00090602 	.word	0x00090602
    15d8:	00090603 	.word	0x00090603
    15dc:	00002005 	.word	0x00002005
    15e0:	00090305 	.word	0x00090305
    15e4:	00090307 	.word	0x00090307

000015e8 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    15e8:	4b06      	ldr	r3, [pc, #24]	; (1604 <_pm_init+0x1c>)
    15ea:	7a1a      	ldrb	r2, [r3, #8]
    15ec:	b2d2      	uxtb	r2, r2
    15ee:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    15f0:	7a5a      	ldrb	r2, [r3, #9]
    15f2:	b2d2      	uxtb	r2, r2
    15f4:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    15f6:	7a9a      	ldrb	r2, [r3, #10]
    15f8:	b2d2      	uxtb	r2, r2
    15fa:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    15fc:	7ada      	ldrb	r2, [r3, #11]
    15fe:	b2d2      	uxtb	r2, r2
    1600:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1602:	4770      	bx	lr
    1604:	40000400 	.word	0x40000400

00001608 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1608:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    160a:	07db      	lsls	r3, r3, #31
    160c:	d409      	bmi.n	1622 <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    160e:	6803      	ldr	r3, [r0, #0]
    1610:	2202      	movs	r2, #2
    1612:	4313      	orrs	r3, r2
    1614:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1616:	3201      	adds	r2, #1
    1618:	69c3      	ldr	r3, [r0, #28]
    161a:	421a      	tst	r2, r3
    161c:	d1fc      	bne.n	1618 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    161e:	2000      	movs	r0, #0
}
    1620:	4770      	bx	lr
		return ERR_BUSY;
    1622:	2004      	movs	r0, #4
    1624:	4240      	negs	r0, r0
    1626:	e7fb      	b.n	1620 <_spi_sync_enable+0x18>

00001628 <_spi_sync_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1628:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    162a:	07db      	lsls	r3, r3, #31
    162c:	d409      	bmi.n	1642 <_spi_sync_disable+0x1a>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    162e:	6803      	ldr	r3, [r0, #0]
    1630:	2202      	movs	r2, #2
    1632:	4393      	bics	r3, r2
    1634:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1636:	3201      	adds	r2, #1
    1638:	69c3      	ldr	r3, [r0, #28]
    163a:	421a      	tst	r2, r3
    163c:	d1fc      	bne.n	1638 <_spi_sync_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    163e:	2000      	movs	r0, #0
}
    1640:	4770      	bx	lr
		return ERR_BUSY;
    1642:	2004      	movs	r0, #4
    1644:	4240      	negs	r0, r0
    1646:	e7fb      	b.n	1640 <_spi_sync_disable+0x18>

00001648 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1648:	b570      	push	{r4, r5, r6, lr}
    164a:	0005      	movs	r5, r0
    164c:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    164e:	4b35      	ldr	r3, [pc, #212]	; (1724 <_spi_m_sync_init+0xdc>)
    1650:	18cb      	adds	r3, r1, r3
    1652:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    1654:	b2db      	uxtb	r3, r3
    1656:	2b00      	cmp	r3, #0
    1658:	d00b      	beq.n	1672 <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    165a:	2800      	cmp	r0, #0
    165c:	d050      	beq.n	1700 <_spi_m_sync_init+0xb8>
    165e:	1e60      	subs	r0, r4, #1
    1660:	4184      	sbcs	r4, r0
    1662:	b2e0      	uxtb	r0, r4
    1664:	4a30      	ldr	r2, [pc, #192]	; (1728 <_spi_m_sync_init+0xe0>)
    1666:	4931      	ldr	r1, [pc, #196]	; (172c <_spi_m_sync_init+0xe4>)
    1668:	4b31      	ldr	r3, [pc, #196]	; (1730 <_spi_m_sync_init+0xe8>)
    166a:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    166c:	200d      	movs	r0, #13
    166e:	4240      	negs	r0, r0
    1670:	e045      	b.n	16fe <_spi_m_sync_init+0xb6>
	ASSERT(dev && hw);
    1672:	2800      	cmp	r0, #0
    1674:	d14c      	bne.n	1710 <_spi_m_sync_init+0xc8>
    1676:	4a2c      	ldr	r2, [pc, #176]	; (1728 <_spi_m_sync_init+0xe0>)
    1678:	492c      	ldr	r1, [pc, #176]	; (172c <_spi_m_sync_init+0xe4>)
    167a:	2000      	movs	r0, #0
    167c:	4b2c      	ldr	r3, [pc, #176]	; (1730 <_spi_m_sync_init+0xe8>)
    167e:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1680:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1682:	07db      	lsls	r3, r3, #31
    1684:	d418      	bmi.n	16b8 <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1686:	2203      	movs	r2, #3
    1688:	69e3      	ldr	r3, [r4, #28]
    168a:	421a      	tst	r2, r3
    168c:	d1fc      	bne.n	1688 <_spi_m_sync_init+0x40>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    168e:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1690:	079b      	lsls	r3, r3, #30
    1692:	d50b      	bpl.n	16ac <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1694:	6823      	ldr	r3, [r4, #0]
    1696:	2202      	movs	r2, #2
    1698:	4393      	bics	r3, r2
    169a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    169c:	3201      	adds	r2, #1
    169e:	69e3      	ldr	r3, [r4, #28]
    16a0:	421a      	tst	r2, r3
    16a2:	d1fc      	bne.n	169e <_spi_m_sync_init+0x56>
    16a4:	2202      	movs	r2, #2
    16a6:	69e3      	ldr	r3, [r4, #28]
    16a8:	421a      	tst	r2, r3
    16aa:	d1fc      	bne.n	16a6 <_spi_m_sync_init+0x5e>
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    16ac:	230d      	movs	r3, #13
    16ae:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    16b0:	2203      	movs	r2, #3
    16b2:	69e3      	ldr	r3, [r4, #28]
    16b4:	421a      	tst	r2, r3
    16b6:	d1fc      	bne.n	16b2 <_spi_m_sync_init+0x6a>
    16b8:	2201      	movs	r2, #1
    16ba:	69e3      	ldr	r3, [r4, #28]
    16bc:	421a      	tst	r2, r3
    16be:	d1fc      	bne.n	16ba <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    16c0:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    16c2:	0020      	movs	r0, r4
    16c4:	1e43      	subs	r3, r0, #1
    16c6:	4198      	sbcs	r0, r3
    16c8:	b2c0      	uxtb	r0, r0
    16ca:	4a1a      	ldr	r2, [pc, #104]	; (1734 <_spi_m_sync_init+0xec>)
    16cc:	4917      	ldr	r1, [pc, #92]	; (172c <_spi_m_sync_init+0xe4>)
    16ce:	4b18      	ldr	r3, [pc, #96]	; (1730 <_spi_m_sync_init+0xe8>)
    16d0:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    16d2:	4b19      	ldr	r3, [pc, #100]	; (1738 <_spi_m_sync_init+0xf0>)
    16d4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    16d6:	2203      	movs	r2, #3
    16d8:	69e3      	ldr	r3, [r4, #28]
    16da:	421a      	tst	r2, r3
    16dc:	d1fc      	bne.n	16d8 <_spi_m_sync_init+0x90>
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    16de:	2380      	movs	r3, #128	; 0x80
    16e0:	029b      	lsls	r3, r3, #10
    16e2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    16e4:	2207      	movs	r2, #7
    16e6:	69e3      	ldr	r3, [r4, #28]
    16e8:	421a      	tst	r2, r3
    16ea:	d1fc      	bne.n	16e6 <_spi_m_sync_init+0x9e>
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    16ec:	2301      	movs	r3, #1
    16ee:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    16f0:	2100      	movs	r1, #0
    16f2:	2230      	movs	r2, #48	; 0x30
    16f4:	54a1      	strb	r1, [r4, r2]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    16f6:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    16f8:	4b10      	ldr	r3, [pc, #64]	; (173c <_spi_m_sync_init+0xf4>)
    16fa:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    16fc:	2000      	movs	r0, #0
}
    16fe:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    1700:	4a09      	ldr	r2, [pc, #36]	; (1728 <_spi_m_sync_init+0xe0>)
    1702:	490a      	ldr	r1, [pc, #40]	; (172c <_spi_m_sync_init+0xe4>)
    1704:	2000      	movs	r0, #0
    1706:	4b0a      	ldr	r3, [pc, #40]	; (1730 <_spi_m_sync_init+0xe8>)
    1708:	4798      	blx	r3
		return ERR_INVALID_ARG;
    170a:	200d      	movs	r0, #13
    170c:	4240      	negs	r0, r0
    170e:	e7f6      	b.n	16fe <_spi_m_sync_init+0xb6>
	ASSERT(dev && hw);
    1710:	0008      	movs	r0, r1
    1712:	1e43      	subs	r3, r0, #1
    1714:	4198      	sbcs	r0, r3
    1716:	b2c0      	uxtb	r0, r0
    1718:	4a03      	ldr	r2, [pc, #12]	; (1728 <_spi_m_sync_init+0xe0>)
    171a:	4904      	ldr	r1, [pc, #16]	; (172c <_spi_m_sync_init+0xe4>)
    171c:	4b04      	ldr	r3, [pc, #16]	; (1730 <_spi_m_sync_init+0xe8>)
    171e:	4798      	blx	r3
    1720:	e7ae      	b.n	1680 <_spi_m_sync_init+0x38>
    1722:	46c0      	nop			; (mov r8, r8)
    1724:	bdfff800 	.word	0xbdfff800
    1728:	00000921 	.word	0x00000921
    172c:	00002484 	.word	0x00002484
    1730:	0000144d 	.word	0x0000144d
    1734:	000008eb 	.word	0x000008eb
    1738:	0011000c 	.word	0x0011000c
    173c:	000001ff 	.word	0x000001ff

00001740 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1740:	b510      	push	{r4, lr}
    1742:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    1744:	d00b      	beq.n	175e <_spi_m_sync_enable+0x1e>
    1746:	6800      	ldr	r0, [r0, #0]
    1748:	1e43      	subs	r3, r0, #1
    174a:	4198      	sbcs	r0, r3
    174c:	b2c0      	uxtb	r0, r0
    174e:	4a05      	ldr	r2, [pc, #20]	; (1764 <_spi_m_sync_enable+0x24>)
    1750:	4905      	ldr	r1, [pc, #20]	; (1768 <_spi_m_sync_enable+0x28>)
    1752:	4b06      	ldr	r3, [pc, #24]	; (176c <_spi_m_sync_enable+0x2c>)
    1754:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1756:	6820      	ldr	r0, [r4, #0]
    1758:	4b05      	ldr	r3, [pc, #20]	; (1770 <_spi_m_sync_enable+0x30>)
    175a:	4798      	blx	r3
}
    175c:	bd10      	pop	{r4, pc}
    175e:	2000      	movs	r0, #0
    1760:	e7f5      	b.n	174e <_spi_m_sync_enable+0xe>
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	0000097c 	.word	0x0000097c
    1768:	00002484 	.word	0x00002484
    176c:	0000144d 	.word	0x0000144d
    1770:	00001609 	.word	0x00001609

00001774 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    1774:	b510      	push	{r4, lr}
    1776:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    1778:	d00b      	beq.n	1792 <_spi_m_sync_disable+0x1e>
    177a:	6800      	ldr	r0, [r0, #0]
    177c:	1e43      	subs	r3, r0, #1
    177e:	4198      	sbcs	r0, r3
    1780:	b2c0      	uxtb	r0, r0
    1782:	4a05      	ldr	r2, [pc, #20]	; (1798 <_spi_m_sync_disable+0x24>)
    1784:	4905      	ldr	r1, [pc, #20]	; (179c <_spi_m_sync_disable+0x28>)
    1786:	4b06      	ldr	r3, [pc, #24]	; (17a0 <_spi_m_sync_disable+0x2c>)
    1788:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    178a:	6820      	ldr	r0, [r4, #0]
    178c:	4b05      	ldr	r3, [pc, #20]	; (17a4 <_spi_m_sync_disable+0x30>)
    178e:	4798      	blx	r3
}
    1790:	bd10      	pop	{r4, pc}
    1792:	2000      	movs	r0, #0
    1794:	e7f5      	b.n	1782 <_spi_m_sync_disable+0xe>
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	00000998 	.word	0x00000998
    179c:	00002484 	.word	0x00002484
    17a0:	0000144d 	.word	0x0000144d
    17a4:	00001629 	.word	0x00001629

000017a8 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    17a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17aa:	46de      	mov	lr, fp
    17ac:	4657      	mov	r7, sl
    17ae:	464e      	mov	r6, r9
    17b0:	4645      	mov	r5, r8
    17b2:	b5e0      	push	{r5, r6, r7, lr}
    17b4:	b083      	sub	sp, #12
    17b6:	4681      	mov	r9, r0
    17b8:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    17ba:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    17bc:	680b      	ldr	r3, [r1, #0]
    17be:	4698      	mov	r8, r3
    17c0:	684d      	ldr	r5, [r1, #4]
    17c2:	7903      	ldrb	r3, [r0, #4]
    17c4:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    17c6:	2800      	cmp	r0, #0
    17c8:	d015      	beq.n	17f6 <_spi_m_sync_trans+0x4e>
    17ca:	0020      	movs	r0, r4
    17cc:	1e43      	subs	r3, r0, #1
    17ce:	4198      	sbcs	r0, r3
    17d0:	b2c0      	uxtb	r0, r0
    17d2:	4a36      	ldr	r2, [pc, #216]	; (18ac <_spi_m_sync_trans+0x104>)
    17d4:	4936      	ldr	r1, [pc, #216]	; (18b0 <_spi_m_sync_trans+0x108>)
    17d6:	4b37      	ldr	r3, [pc, #220]	; (18b4 <_spi_m_sync_trans+0x10c>)
    17d8:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    17da:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    17dc:	075b      	lsls	r3, r3, #29
    17de:	d13f      	bne.n	1860 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    17e0:	2303      	movs	r3, #3
    17e2:	69e0      	ldr	r0, [r4, #28]
    17e4:	4018      	ands	r0, r3
    17e6:	d1fc      	bne.n	17e2 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    17e8:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    17ea:	079b      	lsls	r3, r3, #30
    17ec:	d53b      	bpl.n	1866 <_spi_m_sync_trans+0xbe>
    17ee:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    17f0:	2301      	movs	r3, #1
    17f2:	469c      	mov	ip, r3
    17f4:	e009      	b.n	180a <_spi_m_sync_trans+0x62>
    17f6:	2000      	movs	r0, #0
    17f8:	e7eb      	b.n	17d2 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    17fa:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    17fc:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    17fe:	b25b      	sxtb	r3, r3
    1800:	2b00      	cmp	r3, #0
    1802:	db16      	blt.n	1832 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1804:	68b3      	ldr	r3, [r6, #8]
    1806:	4283      	cmp	r3, r0
    1808:	d927      	bls.n	185a <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    180a:	7e23      	ldrb	r3, [r4, #24]
    180c:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    180e:	2104      	movs	r1, #4
    1810:	4219      	tst	r1, r3
    1812:	d02b      	beq.n	186c <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1814:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1816:	2d00      	cmp	r5, #0
    1818:	d0f0      	beq.n	17fc <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    181a:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    181c:	9901      	ldr	r1, [sp, #4]
    181e:	2901      	cmp	r1, #1
    1820:	d9eb      	bls.n	17fa <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1822:	0a3f      	lsrs	r7, r7, #8
    1824:	706f      	strb	r7, [r5, #1]
    1826:	3502      	adds	r5, #2
    1828:	e7e8      	b.n	17fc <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    182a:	2101      	movs	r1, #1
    182c:	468b      	mov	fp, r1
    182e:	44d8      	add	r8, fp
    1830:	e037      	b.n	18a2 <_spi_m_sync_trans+0xfa>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1832:	2301      	movs	r3, #1
    1834:	425b      	negs	r3, r3
    1836:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1838:	3381      	adds	r3, #129	; 0x81
    183a:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    183c:	2013      	movs	r0, #19
    183e:	4240      	negs	r0, r0
	tmp &= mask;
    1840:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1842:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1844:	4213      	tst	r3, r2
    1846:	d0fc      	beq.n	1842 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1848:	2303      	movs	r3, #3
    184a:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    184c:	b003      	add	sp, #12
    184e:	bc3c      	pop	{r2, r3, r4, r5}
    1850:	4690      	mov	r8, r2
    1852:	4699      	mov	r9, r3
    1854:	46a2      	mov	sl, r4
    1856:	46ab      	mov	fp, r5
    1858:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    185a:	4293      	cmp	r3, r2
    185c:	d8d5      	bhi.n	180a <_spi_m_sync_trans+0x62>
    185e:	e7ef      	b.n	1840 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    1860:	2004      	movs	r0, #4
    1862:	4240      	negs	r0, r0
    1864:	e7f2      	b.n	184c <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    1866:	2014      	movs	r0, #20
    1868:	4240      	negs	r0, r0
    186a:	e7ef      	b.n	184c <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    186c:	4290      	cmp	r0, r2
    186e:	d8c6      	bhi.n	17fe <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1870:	4667      	mov	r7, ip
    1872:	421f      	tst	r7, r3
    1874:	d0c3      	beq.n	17fe <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1876:	464f      	mov	r7, r9
    1878:	88ff      	ldrh	r7, [r7, #6]
    187a:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    187c:	4647      	mov	r7, r8
    187e:	2f00      	cmp	r7, #0
    1880:	d00f      	beq.n	18a2 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    1882:	783f      	ldrb	r7, [r7, #0]
    1884:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    1886:	9901      	ldr	r1, [sp, #4]
    1888:	2901      	cmp	r1, #1
    188a:	d9ce      	bls.n	182a <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    188c:	4647      	mov	r7, r8
    188e:	787f      	ldrb	r7, [r7, #1]
    1890:	023f      	lsls	r7, r7, #8
    1892:	46bb      	mov	fp, r7
    1894:	4657      	mov	r7, sl
    1896:	4659      	mov	r1, fp
    1898:	430f      	orrs	r7, r1
    189a:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    189c:	2102      	movs	r1, #2
    189e:	468b      	mov	fp, r1
    18a0:	44d8      	add	r8, fp
	ctrl->txcnt++;
    18a2:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    18a4:	4657      	mov	r7, sl
    18a6:	62a7      	str	r7, [r4, #40]	; 0x28
    18a8:	e7a9      	b.n	17fe <_spi_m_sync_trans+0x56>
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	00000a81 	.word	0x00000a81
    18b0:	00002484 	.word	0x00002484
    18b4:	0000144d 	.word	0x0000144d

000018b8 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    18b8:	4b0e      	ldr	r3, [pc, #56]	; (18f4 <_sysctrl_init_sources+0x3c>)
    18ba:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    18bc:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    18be:	480e      	ldr	r0, [pc, #56]	; (18f8 <_sysctrl_init_sources+0x40>)
    18c0:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    18c2:	0f92      	lsrs	r2, r2, #30
    18c4:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    18c6:	2002      	movs	r0, #2
    18c8:	4302      	orrs	r2, r0
    18ca:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    18cc:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    18ce:	699a      	ldr	r2, [r3, #24]
    18d0:	4302      	orrs	r2, r0
    18d2:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    18d4:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    18d6:	211f      	movs	r1, #31
    18d8:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    18da:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    18dc:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    18de:	2208      	movs	r2, #8
    18e0:	68cb      	ldr	r3, [r1, #12]
    18e2:	421a      	tst	r2, r3
    18e4:	d0fc      	beq.n	18e0 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    18e6:	4a03      	ldr	r2, [pc, #12]	; (18f4 <_sysctrl_init_sources+0x3c>)
    18e8:	6a13      	ldr	r3, [r2, #32]
    18ea:	2180      	movs	r1, #128	; 0x80
    18ec:	430b      	orrs	r3, r1
    18ee:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    18f0:	4770      	bx	lr
    18f2:	46c0      	nop			; (mov r8, r8)
    18f4:	40000800 	.word	0x40000800
    18f8:	0fff0000 	.word	0x0fff0000

000018fc <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    18fc:	b530      	push	{r4, r5, lr}
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    18fe:	2202      	movs	r2, #2
    1900:	4b25      	ldr	r3, [pc, #148]	; (1998 <_sysctrl_init_referenced_generators+0x9c>)
    1902:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1904:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1906:	320e      	adds	r2, #14
    1908:	68cb      	ldr	r3, [r1, #12]
    190a:	421a      	tst	r2, r3
    190c:	d0fc      	beq.n	1908 <_sysctrl_init_referenced_generators+0xc>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    190e:	4a23      	ldr	r2, [pc, #140]	; (199c <_sysctrl_init_referenced_generators+0xa0>)
    1910:	4b21      	ldr	r3, [pc, #132]	; (1998 <_sysctrl_init_referenced_generators+0x9c>)
    1912:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1914:	4b22      	ldr	r3, [pc, #136]	; (19a0 <_sysctrl_init_referenced_generators+0xa4>)
    1916:	681b      	ldr	r3, [r3, #0]
    1918:	0e9b      	lsrs	r3, r3, #26
    191a:	2b3f      	cmp	r3, #63	; 0x3f
    191c:	d032      	beq.n	1984 <_sysctrl_init_referenced_generators+0x88>
    191e:	029b      	lsls	r3, r3, #10
    1920:	2280      	movs	r2, #128	; 0x80
    1922:	0092      	lsls	r2, r2, #2
    1924:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1926:	4b1c      	ldr	r3, [pc, #112]	; (1998 <_sysctrl_init_referenced_generators+0x9c>)
    1928:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    192a:	2293      	movs	r2, #147	; 0x93
    192c:	0052      	lsls	r2, r2, #1
    192e:	849a      	strh	r2, [r3, #36]	; 0x24
	((Gclk *)hw)->CLKCTRL.reg = data;
    1930:	491c      	ldr	r1, [pc, #112]	; (19a4 <_sysctrl_init_referenced_generators+0xa8>)
    1932:	4a1d      	ldr	r2, [pc, #116]	; (19a8 <_sysctrl_init_referenced_generators+0xac>)
    1934:	8051      	strh	r1, [r2, #2]
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    1936:	2102      	movs	r1, #2
    1938:	2244      	movs	r2, #68	; 0x44
    193a:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    193c:	4a1b      	ldr	r2, [pc, #108]	; (19ac <_sysctrl_init_referenced_generators+0xb0>)
    193e:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    1940:	2220      	movs	r2, #32
    1942:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1944:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1946:	075b      	lsls	r3, r3, #29
    1948:	d51f      	bpl.n	198a <_sysctrl_init_referenced_generators+0x8e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    194a:	4913      	ldr	r1, [pc, #76]	; (1998 <_sysctrl_init_referenced_generators+0x9c>)
	tmp &= mask;
    194c:	3a10      	subs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    194e:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    1950:	421a      	tst	r2, r3
    1952:	d0fc      	beq.n	194e <_sysctrl_init_referenced_generators+0x52>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    1954:	4a10      	ldr	r2, [pc, #64]	; (1998 <_sysctrl_init_referenced_generators+0x9c>)
    1956:	2350      	movs	r3, #80	; 0x50
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    1958:	2004      	movs	r0, #4
    195a:	2401      	movs	r4, #1
    195c:	2502      	movs	r5, #2
    195e:	5cd1      	ldrb	r1, [r2, r3]
    1960:	4201      	tst	r1, r0
    1962:	d105      	bne.n	1970 <_sysctrl_init_referenced_generators+0x74>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    1964:	5cd1      	ldrb	r1, [r2, r3]
    1966:	4221      	tst	r1, r4
    1968:	d102      	bne.n	1970 <_sysctrl_init_referenced_generators+0x74>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    196a:	5cd1      	ldrb	r1, [r2, r3]
    196c:	4229      	tst	r1, r5
    196e:	d0f6      	beq.n	195e <_sysctrl_init_referenced_generators+0x62>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    1970:	4a0d      	ldr	r2, [pc, #52]	; (19a8 <_sysctrl_init_referenced_generators+0xac>)
    1972:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    1974:	09db      	lsrs	r3, r3, #7
    1976:	d1fc      	bne.n	1972 <_sysctrl_init_referenced_generators+0x76>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1978:	4a07      	ldr	r2, [pc, #28]	; (1998 <_sysctrl_init_referenced_generators+0x9c>)
    197a:	6993      	ldr	r3, [r2, #24]
    197c:	2102      	movs	r1, #2
    197e:	438b      	bics	r3, r1
    1980:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1982:	bd30      	pop	{r4, r5, pc}
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1984:	22fc      	movs	r2, #252	; 0xfc
    1986:	01d2      	lsls	r2, r2, #7
    1988:	e7cd      	b.n	1926 <_sysctrl_init_referenced_generators+0x2a>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    198a:	4903      	ldr	r1, [pc, #12]	; (1998 <_sysctrl_init_referenced_generators+0x9c>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    198c:	2210      	movs	r2, #16
    198e:	68cb      	ldr	r3, [r1, #12]
    1990:	421a      	tst	r2, r3
    1992:	d0fc      	beq.n	198e <_sysctrl_init_referenced_generators+0x92>
    1994:	e7de      	b.n	1954 <_sysctrl_init_referenced_generators+0x58>
    1996:	46c0      	nop			; (mov r8, r8)
    1998:	40000800 	.word	0x40000800
    199c:	0401bb80 	.word	0x0401bb80
    19a0:	00806024 	.word	0x00806024
    19a4:	00004701 	.word	0x00004701
    19a8:	40000c00 	.word	0x40000c00
    19ac:	000d05b7 	.word	0x000d05b7

000019b0 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    19b0:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    19b2:	6813      	ldr	r3, [r2, #0]
    19b4:	2102      	movs	r1, #2
    19b6:	430b      	orrs	r3, r1
    19b8:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    19ba:	3101      	adds	r1, #1
    19bc:	6893      	ldr	r3, [r2, #8]
    19be:	4219      	tst	r1, r3
    19c0:	d1fc      	bne.n	19bc <_tcc_timer_start+0xc>
}
    19c2:	4770      	bx	lr

000019c4 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    19c4:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    19c6:	6813      	ldr	r3, [r2, #0]
    19c8:	2102      	movs	r1, #2
    19ca:	438b      	bics	r3, r1
    19cc:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    19ce:	3101      	adds	r1, #1
    19d0:	6893      	ldr	r3, [r2, #8]
    19d2:	4219      	tst	r1, r3
    19d4:	d1fc      	bne.n	19d0 <_tcc_timer_stop+0xc>
}
    19d6:	4770      	bx	lr

000019d8 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    19d8:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    19da:	6411      	str	r1, [r2, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    19dc:	2180      	movs	r1, #128	; 0x80
    19de:	6893      	ldr	r3, [r2, #8]
    19e0:	4219      	tst	r1, r3
    19e2:	d1fc      	bne.n	19de <_tcc_timer_set_period+0x6>
}
    19e4:	4770      	bx	lr

000019e6 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
	return hri_tcc_read_PER_reg(device->hw);
    19e6:	68c2      	ldr	r2, [r0, #12]
    19e8:	2180      	movs	r1, #128	; 0x80
    19ea:	6893      	ldr	r3, [r2, #8]
    19ec:	4219      	tst	r1, r3
    19ee:	d1fc      	bne.n	19ea <_tcc_timer_get_period+0x4>
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	return ((Tcc *)hw)->PER.reg;
    19f0:	6c10      	ldr	r0, [r2, #64]	; 0x40
}
    19f2:	4770      	bx	lr

000019f4 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    19f4:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    19f6:	2103      	movs	r1, #3
    19f8:	6893      	ldr	r3, [r2, #8]
    19fa:	4219      	tst	r1, r3
    19fc:	d1fc      	bne.n	19f8 <_tcc_timer_is_started+0x4>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    19fe:	6810      	ldr	r0, [r2, #0]
	return (bool)tmp;
    1a00:	0780      	lsls	r0, r0, #30
    1a02:	0fc0      	lsrs	r0, r0, #31
}
    1a04:	4770      	bx	lr
	...

00001a08 <_tcc_timer_init>:
{
    1a08:	b510      	push	{r4, lr}
static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
		if (_cfgs[i].hw == hw) {
    1a0a:	4b36      	ldr	r3, [pc, #216]	; (1ae4 <_tcc_timer_init+0xdc>)
    1a0c:	681b      	ldr	r3, [r3, #0]
    1a0e:	4299      	cmp	r1, r3
    1a10:	d002      	beq.n	1a18 <_tcc_timer_init+0x10>
		return ERR_NOT_FOUND;
    1a12:	200a      	movs	r0, #10
    1a14:	4240      	negs	r0, r0
}
    1a16:	bd10      	pop	{r4, pc}
	device->hw = hw;
    1a18:	60c1      	str	r1, [r0, #12]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    1a1a:	688b      	ldr	r3, [r1, #8]
	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    1a1c:	07db      	lsls	r3, r3, #31
    1a1e:	d418      	bmi.n	1a52 <_tcc_timer_init+0x4a>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1a20:	2203      	movs	r2, #3
    1a22:	688b      	ldr	r3, [r1, #8]
    1a24:	421a      	tst	r2, r3
    1a26:	d1fc      	bne.n	1a22 <_tcc_timer_init+0x1a>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1a28:	680b      	ldr	r3, [r1, #0]
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    1a2a:	079b      	lsls	r3, r3, #30
    1a2c:	d50b      	bpl.n	1a46 <_tcc_timer_init+0x3e>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1a2e:	680b      	ldr	r3, [r1, #0]
    1a30:	2202      	movs	r2, #2
    1a32:	4393      	bics	r3, r2
    1a34:	600b      	str	r3, [r1, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1a36:	3201      	adds	r2, #1
    1a38:	688b      	ldr	r3, [r1, #8]
    1a3a:	421a      	tst	r2, r3
    1a3c:	d1fc      	bne.n	1a38 <_tcc_timer_init+0x30>
    1a3e:	2202      	movs	r2, #2
    1a40:	688b      	ldr	r3, [r1, #8]
    1a42:	421a      	tst	r2, r3
    1a44:	d1fc      	bne.n	1a40 <_tcc_timer_init+0x38>
	((Tcc *)hw)->CTRLA.reg = data;
    1a46:	2301      	movs	r3, #1
    1a48:	600b      	str	r3, [r1, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1a4a:	2203      	movs	r2, #3
    1a4c:	688b      	ldr	r3, [r1, #8]
    1a4e:	421a      	tst	r2, r3
    1a50:	d1fc      	bne.n	1a4c <_tcc_timer_init+0x44>
    1a52:	2201      	movs	r2, #1
    1a54:	688b      	ldr	r3, [r1, #8]
    1a56:	421a      	tst	r2, r3
    1a58:	d1fc      	bne.n	1a54 <_tcc_timer_init+0x4c>
	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    1a5a:	4b22      	ldr	r3, [pc, #136]	; (1ae4 <_tcc_timer_init+0xdc>)
    1a5c:	689b      	ldr	r3, [r3, #8]
	((Tcc *)hw)->CTRLA.reg = data;
    1a5e:	600b      	str	r3, [r1, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1a60:	2203      	movs	r2, #3
    1a62:	688b      	ldr	r3, [r1, #8]
    1a64:	421a      	tst	r2, r3
    1a66:	d1fc      	bne.n	1a62 <_tcc_timer_init+0x5a>
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    1a68:	4b1e      	ldr	r3, [pc, #120]	; (1ae4 <_tcc_timer_init+0xdc>)
    1a6a:	7b1a      	ldrb	r2, [r3, #12]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    1a6c:	714a      	strb	r2, [r1, #5]
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    1a6e:	7b5a      	ldrb	r2, [r3, #13]
	((Tcc *)hw)->DBGCTRL.reg = data;
    1a70:	778a      	strb	r2, [r1, #30]
	((Tcc *)hw)->EVCTRL.reg = data;
    1a72:	691a      	ldr	r2, [r3, #16]
    1a74:	620a      	str	r2, [r1, #32]
	hri_tcc_write_PER_reg(hw, cfg->per);
    1a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    1a78:	640b      	str	r3, [r1, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1a7a:	2280      	movs	r2, #128	; 0x80
    1a7c:	688b      	ldr	r3, [r1, #8]
    1a7e:	421a      	tst	r2, r3
    1a80:	d1fc      	bne.n	1a7c <_tcc_timer_init+0x74>
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    1a82:	2301      	movs	r3, #1
    1a84:	628b      	str	r3, [r1, #40]	; 0x28
	if (hw == TCC0) {
    1a86:	4b18      	ldr	r3, [pc, #96]	; (1ae8 <_tcc_timer_init+0xe0>)
    1a88:	4299      	cmp	r1, r3
    1a8a:	d025      	beq.n	1ad8 <_tcc_timer_init+0xd0>
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    1a8c:	4b15      	ldr	r3, [pc, #84]	; (1ae4 <_tcc_timer_init+0xdc>)
    1a8e:	791b      	ldrb	r3, [r3, #4]
    1a90:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    1a92:	2b00      	cmp	r3, #0
    1a94:	db23      	blt.n	1ade <_tcc_timer_init+0xd6>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a96:	221f      	movs	r2, #31
    1a98:	401a      	ands	r2, r3
    1a9a:	2301      	movs	r3, #1
    1a9c:	4093      	lsls	r3, r2
    1a9e:	2280      	movs	r2, #128	; 0x80
    1aa0:	4912      	ldr	r1, [pc, #72]	; (1aec <_tcc_timer_init+0xe4>)
    1aa2:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1aa4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1aa8:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    1aac:	4b0d      	ldr	r3, [pc, #52]	; (1ae4 <_tcc_timer_init+0xdc>)
    1aae:	2104      	movs	r1, #4
    1ab0:	5659      	ldrsb	r1, [r3, r1]
	return ERR_NONE;
    1ab2:	2000      	movs	r0, #0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1ab4:	2900      	cmp	r1, #0
    1ab6:	dbae      	blt.n	1a16 <_tcc_timer_init+0xe>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ab8:	3a61      	subs	r2, #97	; 0x61
    1aba:	4011      	ands	r1, r2
    1abc:	2301      	movs	r3, #1
    1abe:	001c      	movs	r4, r3
    1ac0:	408c      	lsls	r4, r1
    1ac2:	490a      	ldr	r1, [pc, #40]	; (1aec <_tcc_timer_init+0xe4>)
    1ac4:	3081      	adds	r0, #129	; 0x81
    1ac6:	30ff      	adds	r0, #255	; 0xff
    1ac8:	500c      	str	r4, [r1, r0]
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    1aca:	4806      	ldr	r0, [pc, #24]	; (1ae4 <_tcc_timer_init+0xdc>)
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1acc:	7900      	ldrb	r0, [r0, #4]
    1ace:	4002      	ands	r2, r0
    1ad0:	4093      	lsls	r3, r2
    1ad2:	600b      	str	r3, [r1, #0]
	return ERR_NONE;
    1ad4:	2000      	movs	r0, #0
    1ad6:	e79e      	b.n	1a16 <_tcc_timer_init+0xe>
		_tcc0_dev = (struct _timer_device *)dev;
    1ad8:	4b05      	ldr	r3, [pc, #20]	; (1af0 <_tcc_timer_init+0xe8>)
    1ada:	6018      	str	r0, [r3, #0]
    1adc:	e7d6      	b.n	1a8c <_tcc_timer_init+0x84>
	return ERR_NONE;
    1ade:	2000      	movs	r0, #0
    1ae0:	e799      	b.n	1a16 <_tcc_timer_init+0xe>
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	20000004 	.word	0x20000004
    1ae8:	42002000 	.word	0x42002000
    1aec:	e000e100 	.word	0xe000e100
    1af0:	200005c4 	.word	0x200005c4

00001af4 <_tcc_timer_set_irq>:
{
    1af4:	b510      	push	{r4, lr}
		if (_cfgs[i].hw == hw) {
    1af6:	68c2      	ldr	r2, [r0, #12]
    1af8:	4b04      	ldr	r3, [pc, #16]	; (1b0c <_tcc_timer_set_irq+0x18>)
    1afa:	681b      	ldr	r3, [r3, #0]
    1afc:	429a      	cmp	r2, r3
    1afe:	d000      	beq.n	1b02 <_tcc_timer_set_irq+0xe>
}
    1b00:	bd10      	pop	{r4, pc}
		_irq_set((IRQn_Type)cfg->irq);
    1b02:	4b02      	ldr	r3, [pc, #8]	; (1b0c <_tcc_timer_set_irq+0x18>)
    1b04:	7918      	ldrb	r0, [r3, #4]
    1b06:	4b02      	ldr	r3, [pc, #8]	; (1b10 <_tcc_timer_set_irq+0x1c>)
    1b08:	4798      	blx	r3
}
    1b0a:	e7f9      	b.n	1b00 <_tcc_timer_set_irq+0xc>
    1b0c:	20000004 	.word	0x20000004
    1b10:	000014bd 	.word	0x000014bd

00001b14 <_tcc_timer_deinit>:
	void *const     hw  = device->hw;
    1b14:	68c3      	ldr	r3, [r0, #12]
		if (_cfgs[i].hw == hw) {
    1b16:	4a12      	ldr	r2, [pc, #72]	; (1b60 <_tcc_timer_deinit+0x4c>)
    1b18:	6812      	ldr	r2, [r2, #0]
    1b1a:	4293      	cmp	r3, r2
    1b1c:	d000      	beq.n	1b20 <_tcc_timer_deinit+0xc>
}
    1b1e:	4770      	bx	lr
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    1b20:	4a0f      	ldr	r2, [pc, #60]	; (1b60 <_tcc_timer_deinit+0x4c>)
    1b22:	7912      	ldrb	r2, [r2, #4]
    1b24:	b252      	sxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
    1b26:	2a00      	cmp	r2, #0
    1b28:	db0a      	blt.n	1b40 <_tcc_timer_deinit+0x2c>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b2a:	211f      	movs	r1, #31
    1b2c:	4011      	ands	r1, r2
    1b2e:	2201      	movs	r2, #1
    1b30:	408a      	lsls	r2, r1
    1b32:	2180      	movs	r1, #128	; 0x80
    1b34:	480b      	ldr	r0, [pc, #44]	; (1b64 <_tcc_timer_deinit+0x50>)
    1b36:	5042      	str	r2, [r0, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1b38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b3c:	f3bf 8f6f 	isb	sy
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1b40:	681a      	ldr	r2, [r3, #0]
    1b42:	2102      	movs	r1, #2
    1b44:	438a      	bics	r2, r1
    1b46:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1b48:	3101      	adds	r1, #1
    1b4a:	689a      	ldr	r2, [r3, #8]
    1b4c:	4211      	tst	r1, r2
    1b4e:	d1fc      	bne.n	1b4a <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    1b50:	681a      	ldr	r2, [r3, #0]
    1b52:	2101      	movs	r1, #1
    1b54:	430a      	orrs	r2, r1
    1b56:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1b58:	689a      	ldr	r2, [r3, #8]
    1b5a:	4211      	tst	r1, r2
    1b5c:	d1fc      	bne.n	1b58 <_tcc_timer_deinit+0x44>
    1b5e:	e7de      	b.n	1b1e <_tcc_timer_deinit+0xa>
    1b60:	20000004 	.word	0x20000004
    1b64:	e000e100 	.word	0xe000e100

00001b68 <_tcc_get_timer>:
	return &_tcc_timer_functions;
    1b68:	4801      	ldr	r0, [pc, #4]	; (1b70 <_tcc_get_timer+0x8>)
}
    1b6a:	3028      	adds	r0, #40	; 0x28
    1b6c:	4770      	bx	lr
    1b6e:	46c0      	nop			; (mov r8, r8)
    1b70:	20000004 	.word	0x20000004

00001b74 <TCC0_Handler>:
{
    1b74:	b510      	push	{r4, lr}
	tcc_interrupt_handler(_tcc0_dev);
    1b76:	4b06      	ldr	r3, [pc, #24]	; (1b90 <TCC0_Handler+0x1c>)
    1b78:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    1b7a:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    1b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    1b7e:	07d2      	lsls	r2, r2, #31
    1b80:	d400      	bmi.n	1b84 <TCC0_Handler+0x10>
}
    1b82:	bd10      	pop	{r4, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    1b84:	2201      	movs	r2, #1
    1b86:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    1b88:	6803      	ldr	r3, [r0, #0]
    1b8a:	4798      	blx	r3
}
    1b8c:	e7f9      	b.n	1b82 <TCC0_Handler+0xe>
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	200005c4 	.word	0x200005c4

00001b94 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    1b94:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    1b96:	8813      	ldrh	r3, [r2, #0]
    1b98:	2102      	movs	r1, #2
    1b9a:	430b      	orrs	r3, r1
    1b9c:	8013      	strh	r3, [r2, #0]
}
    1b9e:	4770      	bx	lr

00001ba0 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    1ba0:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1ba2:	8813      	ldrh	r3, [r2, #0]
    1ba4:	2102      	movs	r1, #2
    1ba6:	438b      	bics	r3, r1
    1ba8:	8013      	strh	r3, [r2, #0]
}
    1baa:	4770      	bx	lr

00001bac <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    1bac:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1bae:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1bb0:	071b      	lsls	r3, r3, #28

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1bb2:	0f9b      	lsrs	r3, r3, #30
    1bb4:	2b02      	cmp	r3, #2
    1bb6:	d00b      	beq.n	1bd0 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1bb8:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1bba:	071b      	lsls	r3, r3, #28
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1bbc:	0f9b      	lsrs	r3, r3, #30
    1bbe:	d009      	beq.n	1bd4 <_tc_timer_set_period+0x28>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1bc0:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1bc2:	071b      	lsls	r3, r3, #28
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1bc4:	0f9b      	lsrs	r3, r3, #30
    1bc6:	2b01      	cmp	r3, #1
    1bc8:	d106      	bne.n	1bd8 <_tc_timer_set_period+0x2c>
		hri_tccount8_write_PER_reg(hw, (hri_tccount8_per_reg_t)clock_cycles);
    1bca:	b2c9      	uxtb	r1, r1
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    1bcc:	7511      	strb	r1, [r2, #20]
	}
}
    1bce:	e003      	b.n	1bd8 <_tc_timer_set_period+0x2c>
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1bd0:	6191      	str	r1, [r2, #24]
    1bd2:	e001      	b.n	1bd8 <_tc_timer_set_period+0x2c>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)clock_cycles);
    1bd4:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1bd6:	8311      	strh	r1, [r2, #24]
}
    1bd8:	4770      	bx	lr

00001bda <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    1bda:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1bdc:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1bde:	071b      	lsls	r3, r3, #28

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1be0:	0f9b      	lsrs	r3, r3, #30
    1be2:	2b02      	cmp	r3, #2
    1be4:	d00c      	beq.n	1c00 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1be6:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1be8:	071b      	lsls	r3, r3, #28
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1bea:	0f9b      	lsrs	r3, r3, #30
    1bec:	d00a      	beq.n	1c04 <_tc_timer_get_period+0x2a>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1bee:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1bf0:	071b      	lsls	r3, r3, #28
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1bf2:	0f9b      	lsrs	r3, r3, #30
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    1bf4:	2000      	movs	r0, #0
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1bf6:	2b01      	cmp	r3, #1
    1bf8:	d106      	bne.n	1c08 <_tc_timer_get_period+0x2e>
	return ((Tc *)hw)->COUNT8.PER.reg;
    1bfa:	7d10      	ldrb	r0, [r2, #20]
    1bfc:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    1bfe:	e003      	b.n	1c08 <_tc_timer_get_period+0x2e>
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    1c00:	6990      	ldr	r0, [r2, #24]
		return hri_tccount32_read_CC_reg(hw, 0);
    1c02:	e001      	b.n	1c08 <_tc_timer_get_period+0x2e>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    1c04:	8b10      	ldrh	r0, [r2, #24]
    1c06:	b280      	uxth	r0, r0
}
    1c08:	4770      	bx	lr

00001c0a <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1c0a:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1c0c:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    1c0e:	0780      	lsls	r0, r0, #30
    1c10:	0fc0      	lsrs	r0, r0, #31
}
    1c12:	4770      	bx	lr

00001c14 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    1c14:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    1c16:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1c18:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1c1a:	07d2      	lsls	r2, r2, #31
    1c1c:	d400      	bmi.n	1c20 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    1c1e:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1c20:	2201      	movs	r2, #1
    1c22:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    1c24:	6803      	ldr	r3, [r0, #0]
    1c26:	4798      	blx	r3
}
    1c28:	e7f9      	b.n	1c1e <tc_interrupt_handler+0xa>
	...

00001c2c <_tc_timer_deinit>:
	void *const hw = device->hw;
    1c2c:	68c2      	ldr	r2, [r0, #12]
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1c2e:	4b0d      	ldr	r3, [pc, #52]	; (1c64 <_tc_timer_deinit+0x38>)
    1c30:	18d3      	adds	r3, r2, r3
    1c32:	0a9b      	lsrs	r3, r3, #10
	NVIC_DisableIRQ((IRQn_Type)(TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1c34:	3312      	adds	r3, #18
  if ((int32_t)(IRQn) >= 0)
    1c36:	b2d8      	uxtb	r0, r3
    1c38:	061b      	lsls	r3, r3, #24
    1c3a:	d40a      	bmi.n	1c52 <_tc_timer_deinit+0x26>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c3c:	211f      	movs	r1, #31
    1c3e:	4001      	ands	r1, r0
    1c40:	2301      	movs	r3, #1
    1c42:	408b      	lsls	r3, r1
    1c44:	2180      	movs	r1, #128	; 0x80
    1c46:	4808      	ldr	r0, [pc, #32]	; (1c68 <_tc_timer_deinit+0x3c>)
    1c48:	5043      	str	r3, [r0, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1c4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c4e:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1c52:	8813      	ldrh	r3, [r2, #0]
    1c54:	2102      	movs	r1, #2
    1c56:	438b      	bics	r3, r1
    1c58:	8013      	strh	r3, [r2, #0]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    1c5a:	8813      	ldrh	r3, [r2, #0]
    1c5c:	3901      	subs	r1, #1
    1c5e:	430b      	orrs	r3, r1
    1c60:	8013      	strh	r3, [r2, #0]
}
    1c62:	4770      	bx	lr
    1c64:	bdffd400 	.word	0xbdffd400
    1c68:	e000e100 	.word	0xe000e100

00001c6c <_tc_timer_set_irq>:
{
    1c6c:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1c6e:	68c0      	ldr	r0, [r0, #12]
    1c70:	4b04      	ldr	r3, [pc, #16]	; (1c84 <_tc_timer_set_irq+0x18>)
    1c72:	469c      	mov	ip, r3
    1c74:	4460      	add	r0, ip
    1c76:	0a80      	lsrs	r0, r0, #10
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    1c78:	3012      	adds	r0, #18
    1c7a:	b2c0      	uxtb	r0, r0
    1c7c:	4b02      	ldr	r3, [pc, #8]	; (1c88 <_tc_timer_set_irq+0x1c>)
    1c7e:	4798      	blx	r3
}
    1c80:	bd10      	pop	{r4, pc}
    1c82:	46c0      	nop			; (mov r8, r8)
    1c84:	bdffd400 	.word	0xbdffd400
    1c88:	000014bd 	.word	0x000014bd

00001c8c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    1c8c:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1c8e:	4b10      	ldr	r3, [pc, #64]	; (1cd0 <get_tc_index+0x44>)
    1c90:	18c3      	adds	r3, r0, r3
    1c92:	0a9b      	lsrs	r3, r3, #10
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    1c94:	3303      	adds	r3, #3
    1c96:	b2db      	uxtb	r3, r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    1c98:	4a0e      	ldr	r2, [pc, #56]	; (1cd4 <get_tc_index+0x48>)
    1c9a:	7812      	ldrb	r2, [r2, #0]
    1c9c:	429a      	cmp	r2, r3
    1c9e:	d014      	beq.n	1cca <get_tc_index+0x3e>
    1ca0:	4a0c      	ldr	r2, [pc, #48]	; (1cd4 <get_tc_index+0x48>)
    1ca2:	7d12      	ldrb	r2, [r2, #20]
    1ca4:	429a      	cmp	r2, r3
    1ca6:	d00e      	beq.n	1cc6 <get_tc_index+0x3a>
    1ca8:	2228      	movs	r2, #40	; 0x28
    1caa:	490a      	ldr	r1, [pc, #40]	; (1cd4 <get_tc_index+0x48>)
    1cac:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1cae:	2002      	movs	r0, #2
		if (_tcs[i].number == tc_offset) {
    1cb0:	429a      	cmp	r2, r3
    1cb2:	d00b      	beq.n	1ccc <get_tc_index+0x40>
			return i;
		}
	}

	ASSERT(false);
    1cb4:	22fe      	movs	r2, #254	; 0xfe
    1cb6:	0052      	lsls	r2, r2, #1
    1cb8:	4907      	ldr	r1, [pc, #28]	; (1cd8 <get_tc_index+0x4c>)
    1cba:	2000      	movs	r0, #0
    1cbc:	4b07      	ldr	r3, [pc, #28]	; (1cdc <get_tc_index+0x50>)
    1cbe:	4798      	blx	r3
	return -1;
    1cc0:	2001      	movs	r0, #1
    1cc2:	4240      	negs	r0, r0
}
    1cc4:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1cc6:	2001      	movs	r0, #1
    1cc8:	e000      	b.n	1ccc <get_tc_index+0x40>
    1cca:	2000      	movs	r0, #0
			return i;
    1ccc:	b240      	sxtb	r0, r0
    1cce:	e7f9      	b.n	1cc4 <get_tc_index+0x38>
    1cd0:	bdffd400 	.word	0xbdffd400
    1cd4:	2000004c 	.word	0x2000004c
    1cd8:	000024a0 	.word	0x000024a0
    1cdc:	0000144d 	.word	0x0000144d

00001ce0 <_tc_timer_init>:
{
    1ce0:	b570      	push	{r4, r5, r6, lr}
    1ce2:	0006      	movs	r6, r0
    1ce4:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    1ce6:	0008      	movs	r0, r1
    1ce8:	4b43      	ldr	r3, [pc, #268]	; (1df8 <_tc_timer_init+0x118>)
    1cea:	4798      	blx	r3
    1cec:	0005      	movs	r5, r0
	device->hw = hw;
    1cee:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1cf0:	229c      	movs	r2, #156	; 0x9c
    1cf2:	4942      	ldr	r1, [pc, #264]	; (1dfc <_tc_timer_init+0x11c>)
    1cf4:	2001      	movs	r0, #1
    1cf6:	4b42      	ldr	r3, [pc, #264]	; (1e00 <_tc_timer_init+0x120>)
    1cf8:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1cfa:	7be3      	ldrb	r3, [r4, #15]
    1cfc:	09db      	lsrs	r3, r3, #7
    1cfe:	d1fc      	bne.n	1cfa <_tc_timer_init+0x1a>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1d00:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1d02:	079b      	lsls	r3, r3, #30
    1d04:	d504      	bpl.n	1d10 <_tc_timer_init+0x30>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1d06:	2300      	movs	r3, #0
    1d08:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1d0a:	7be3      	ldrb	r3, [r4, #15]
    1d0c:	09db      	lsrs	r3, r3, #7
    1d0e:	d1fc      	bne.n	1d0a <_tc_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1d10:	2301      	movs	r3, #1
    1d12:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1d14:	7be3      	ldrb	r3, [r4, #15]
    1d16:	09db      	lsrs	r3, r3, #7
    1d18:	d1fc      	bne.n	1d14 <_tc_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1d1a:	00ab      	lsls	r3, r5, #2
    1d1c:	195b      	adds	r3, r3, r5
    1d1e:	009a      	lsls	r2, r3, #2
    1d20:	4b38      	ldr	r3, [pc, #224]	; (1e04 <_tc_timer_init+0x124>)
    1d22:	189b      	adds	r3, r3, r2
    1d24:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1d26:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1d28:	7919      	ldrb	r1, [r3, #4]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1d2a:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1d2c:	88db      	ldrh	r3, [r3, #6]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1d2e:	8163      	strh	r3, [r4, #10]
    1d30:	230c      	movs	r3, #12
    1d32:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1d34:	2b08      	cmp	r3, #8
    1d36:	d031      	beq.n	1d9c <_tc_timer_init+0xbc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1d38:	2b00      	cmp	r3, #0
    1d3a:	d13c      	bne.n	1db6 <_tc_timer_init+0xd6>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1d3c:	4931      	ldr	r1, [pc, #196]	; (1e04 <_tc_timer_init+0x124>)
    1d3e:	00ab      	lsls	r3, r5, #2
    1d40:	195a      	adds	r2, r3, r5
    1d42:	0092      	lsls	r2, r2, #2
    1d44:	188a      	adds	r2, r1, r2
    1d46:	8992      	ldrh	r2, [r2, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1d48:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    1d4a:	195b      	adds	r3, r3, r5
    1d4c:	009b      	lsls	r3, r3, #2
    1d4e:	18cb      	adds	r3, r1, r3
    1d50:	8a1b      	ldrh	r3, [r3, #16]
    1d52:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1d54:	2301      	movs	r3, #1
    1d56:	7363      	strb	r3, [r4, #13]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    1d58:	4b2b      	ldr	r3, [pc, #172]	; (1e08 <_tc_timer_init+0x128>)
    1d5a:	429c      	cmp	r4, r3
    1d5c:	d03c      	beq.n	1dd8 <_tc_timer_init+0xf8>
		_tc3_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC4) {
    1d5e:	4b2b      	ldr	r3, [pc, #172]	; (1e0c <_tc_timer_init+0x12c>)
    1d60:	429c      	cmp	r4, r3
    1d62:	d03c      	beq.n	1dde <_tc_timer_init+0xfe>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    1d64:	4b2a      	ldr	r3, [pc, #168]	; (1e10 <_tc_timer_init+0x130>)
    1d66:	429c      	cmp	r4, r3
    1d68:	d041      	beq.n	1dee <_tc_timer_init+0x10e>
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1d6a:	4b2a      	ldr	r3, [pc, #168]	; (1e14 <_tc_timer_init+0x134>)
    1d6c:	469c      	mov	ip, r3
    1d6e:	4464      	add	r4, ip
    1d70:	0aa4      	lsrs	r4, r4, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1d72:	3412      	adds	r4, #18
  if ((int32_t)(IRQn) >= 0)
    1d74:	b2e3      	uxtb	r3, r4
    1d76:	0622      	lsls	r2, r4, #24
    1d78:	d40e      	bmi.n	1d98 <_tc_timer_init+0xb8>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d7a:	221f      	movs	r2, #31
    1d7c:	401a      	ands	r2, r3
    1d7e:	2301      	movs	r3, #1
    1d80:	4093      	lsls	r3, r2
    1d82:	4a25      	ldr	r2, [pc, #148]	; (1e18 <_tc_timer_init+0x138>)
    1d84:	2180      	movs	r1, #128	; 0x80
    1d86:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1d88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d8c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d90:	3101      	adds	r1, #1
    1d92:	31ff      	adds	r1, #255	; 0xff
    1d94:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d96:	6013      	str	r3, [r2, #0]
}
    1d98:	2000      	movs	r0, #0
    1d9a:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1d9c:	4919      	ldr	r1, [pc, #100]	; (1e04 <_tc_timer_init+0x124>)
    1d9e:	00ab      	lsls	r3, r5, #2
    1da0:	195a      	adds	r2, r3, r5
    1da2:	0092      	lsls	r2, r2, #2
    1da4:	188a      	adds	r2, r1, r2
    1da6:	68d2      	ldr	r2, [r2, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1da8:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1daa:	195b      	adds	r3, r3, r5
    1dac:	009b      	lsls	r3, r3, #2
    1dae:	18cb      	adds	r3, r1, r3
    1db0:	691b      	ldr	r3, [r3, #16]
    1db2:	61e3      	str	r3, [r4, #28]
    1db4:	e7ce      	b.n	1d54 <_tc_timer_init+0x74>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    1db6:	2b04      	cmp	r3, #4
    1db8:	d1cc      	bne.n	1d54 <_tc_timer_init+0x74>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    1dba:	4912      	ldr	r1, [pc, #72]	; (1e04 <_tc_timer_init+0x124>)
    1dbc:	00ab      	lsls	r3, r5, #2
    1dbe:	195a      	adds	r2, r3, r5
    1dc0:	0092      	lsls	r2, r2, #2
    1dc2:	188a      	adds	r2, r1, r2
    1dc4:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1dc6:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    1dc8:	7c12      	ldrb	r2, [r2, #16]
    1dca:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1dcc:	195b      	adds	r3, r3, r5
    1dce:	009b      	lsls	r3, r3, #2
    1dd0:	18cb      	adds	r3, r1, r3
    1dd2:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    1dd4:	7523      	strb	r3, [r4, #20]
    1dd6:	e7bd      	b.n	1d54 <_tc_timer_init+0x74>
		_tc3_dev = (struct _pwm_device *)dev;
    1dd8:	4b10      	ldr	r3, [pc, #64]	; (1e1c <_tc_timer_init+0x13c>)
    1dda:	601e      	str	r6, [r3, #0]
    1ddc:	e7c5      	b.n	1d6a <_tc_timer_init+0x8a>
		_tc4_dev = (struct _timer_device *)dev;
    1dde:	4b0f      	ldr	r3, [pc, #60]	; (1e1c <_tc_timer_init+0x13c>)
    1de0:	605e      	str	r6, [r3, #4]
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1de2:	4b0c      	ldr	r3, [pc, #48]	; (1e14 <_tc_timer_init+0x134>)
    1de4:	18e2      	adds	r2, r4, r3
    1de6:	0a92      	lsrs	r2, r2, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1de8:	3212      	adds	r2, #18
    1dea:	b2d3      	uxtb	r3, r2
    1dec:	e7c5      	b.n	1d7a <_tc_timer_init+0x9a>
		_tc5_dev = (struct _timer_device *)dev;
    1dee:	4b0b      	ldr	r3, [pc, #44]	; (1e1c <_tc_timer_init+0x13c>)
    1df0:	609e      	str	r6, [r3, #8]
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1df2:	2314      	movs	r3, #20
    1df4:	e7c1      	b.n	1d7a <_tc_timer_init+0x9a>
    1df6:	46c0      	nop			; (mov r8, r8)
    1df8:	00001c8d 	.word	0x00001c8d
    1dfc:	000024a0 	.word	0x000024a0
    1e00:	0000144d 	.word	0x0000144d
    1e04:	2000004c 	.word	0x2000004c
    1e08:	42002c00 	.word	0x42002c00
    1e0c:	42003000 	.word	0x42003000
    1e10:	42003400 	.word	0x42003400
    1e14:	bdffd400 	.word	0xbdffd400
    1e18:	e000e100 	.word	0xe000e100
    1e1c:	200005c8 	.word	0x200005c8

00001e20 <_pwm_init>:
{
    1e20:	b570      	push	{r4, r5, r6, lr}
    1e22:	0005      	movs	r5, r0
    1e24:	000c      	movs	r4, r1
	int8_t i   = get_tc_index(hw);
    1e26:	0008      	movs	r0, r1
    1e28:	4b38      	ldr	r3, [pc, #224]	; (1f0c <_pwm_init+0xec>)
    1e2a:	4798      	blx	r3
	device->hw = hw;
    1e2c:	612c      	str	r4, [r5, #16]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1e2e:	7be3      	ldrb	r3, [r4, #15]
    1e30:	09db      	lsrs	r3, r3, #7
    1e32:	d1fc      	bne.n	1e2e <_pwm_init+0xe>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1e34:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1e36:	079b      	lsls	r3, r3, #30
    1e38:	d504      	bpl.n	1e44 <_pwm_init+0x24>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1e3a:	2300      	movs	r3, #0
    1e3c:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1e3e:	7be3      	ldrb	r3, [r4, #15]
    1e40:	09db      	lsrs	r3, r3, #7
    1e42:	d1fc      	bne.n	1e3e <_pwm_init+0x1e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1e44:	2301      	movs	r3, #1
    1e46:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1e48:	7be3      	ldrb	r3, [r4, #15]
    1e4a:	09db      	lsrs	r3, r3, #7
    1e4c:	d1fc      	bne.n	1e48 <_pwm_init+0x28>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1e4e:	0083      	lsls	r3, r0, #2
    1e50:	181b      	adds	r3, r3, r0
    1e52:	009a      	lsls	r2, r3, #2
    1e54:	4b2e      	ldr	r3, [pc, #184]	; (1f10 <_pwm_init+0xf0>)
    1e56:	189b      	adds	r3, r3, r2
    1e58:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1e5a:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1e5c:	7919      	ldrb	r1, [r3, #4]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1e5e:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1e60:	88db      	ldrh	r3, [r3, #6]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1e62:	8163      	strh	r3, [r4, #10]
    1e64:	230c      	movs	r3, #12
    1e66:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1e68:	2b08      	cmp	r3, #8
    1e6a:	d030      	beq.n	1ece <_pwm_init+0xae>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	d14a      	bne.n	1f06 <_pwm_init+0xe6>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1e70:	4927      	ldr	r1, [pc, #156]	; (1f10 <_pwm_init+0xf0>)
    1e72:	0083      	lsls	r3, r0, #2
    1e74:	181a      	adds	r2, r3, r0
    1e76:	0092      	lsls	r2, r2, #2
    1e78:	188a      	adds	r2, r1, r2
    1e7a:	8992      	ldrh	r2, [r2, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1e7c:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    1e7e:	1818      	adds	r0, r3, r0
    1e80:	0080      	lsls	r0, r0, #2
    1e82:	1808      	adds	r0, r1, r0
    1e84:	8a03      	ldrh	r3, [r0, #16]
    1e86:	8363      	strh	r3, [r4, #26]
	if (hw == TC3) {
    1e88:	4b22      	ldr	r3, [pc, #136]	; (1f14 <_pwm_init+0xf4>)
    1e8a:	429c      	cmp	r4, r3
    1e8c:	d02c      	beq.n	1ee8 <_pwm_init+0xc8>
	if (hw == TC4) {
    1e8e:	4b22      	ldr	r3, [pc, #136]	; (1f18 <_pwm_init+0xf8>)
    1e90:	429c      	cmp	r4, r3
    1e92:	d02c      	beq.n	1eee <_pwm_init+0xce>
	if (hw == TC5) {
    1e94:	4b21      	ldr	r3, [pc, #132]	; (1f1c <_pwm_init+0xfc>)
    1e96:	429c      	cmp	r4, r3
    1e98:	d031      	beq.n	1efe <_pwm_init+0xde>
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1e9a:	4b21      	ldr	r3, [pc, #132]	; (1f20 <_pwm_init+0x100>)
    1e9c:	469c      	mov	ip, r3
    1e9e:	4464      	add	r4, ip
    1ea0:	0aa4      	lsrs	r4, r4, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1ea2:	3412      	adds	r4, #18
  if ((int32_t)(IRQn) >= 0)
    1ea4:	b2e3      	uxtb	r3, r4
	return ERR_NONE;
    1ea6:	2000      	movs	r0, #0
    1ea8:	0622      	lsls	r2, r4, #24
    1eaa:	d40f      	bmi.n	1ecc <_pwm_init+0xac>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1eac:	221f      	movs	r2, #31
    1eae:	401a      	ands	r2, r3
    1eb0:	2301      	movs	r3, #1
    1eb2:	4093      	lsls	r3, r2
    1eb4:	4a1b      	ldr	r2, [pc, #108]	; (1f24 <_pwm_init+0x104>)
    1eb6:	2180      	movs	r1, #128	; 0x80
    1eb8:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1eba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ebe:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ec2:	3101      	adds	r1, #1
    1ec4:	31ff      	adds	r1, #255	; 0xff
    1ec6:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ec8:	6013      	str	r3, [r2, #0]
    1eca:	2000      	movs	r0, #0
}
    1ecc:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1ece:	4910      	ldr	r1, [pc, #64]	; (1f10 <_pwm_init+0xf0>)
    1ed0:	0083      	lsls	r3, r0, #2
    1ed2:	181a      	adds	r2, r3, r0
    1ed4:	0092      	lsls	r2, r2, #2
    1ed6:	188a      	adds	r2, r1, r2
    1ed8:	68d2      	ldr	r2, [r2, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1eda:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1edc:	1818      	adds	r0, r3, r0
    1ede:	0080      	lsls	r0, r0, #2
    1ee0:	1808      	adds	r0, r1, r0
    1ee2:	6903      	ldr	r3, [r0, #16]
    1ee4:	61e3      	str	r3, [r4, #28]
    1ee6:	e7cf      	b.n	1e88 <_pwm_init+0x68>
		_tc3_dev = (struct _pwm_device *)dev;
    1ee8:	4b0f      	ldr	r3, [pc, #60]	; (1f28 <_pwm_init+0x108>)
    1eea:	601d      	str	r5, [r3, #0]
    1eec:	e7d5      	b.n	1e9a <_pwm_init+0x7a>
		_tc4_dev = (struct _timer_device *)dev;
    1eee:	4b0e      	ldr	r3, [pc, #56]	; (1f28 <_pwm_init+0x108>)
    1ef0:	605d      	str	r5, [r3, #4]
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1ef2:	4b0b      	ldr	r3, [pc, #44]	; (1f20 <_pwm_init+0x100>)
    1ef4:	18e2      	adds	r2, r4, r3
    1ef6:	0a92      	lsrs	r2, r2, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1ef8:	3212      	adds	r2, #18
    1efa:	b2d3      	uxtb	r3, r2
    1efc:	e7d6      	b.n	1eac <_pwm_init+0x8c>
		_tc5_dev = (struct _timer_device *)dev;
    1efe:	4b0a      	ldr	r3, [pc, #40]	; (1f28 <_pwm_init+0x108>)
    1f00:	609d      	str	r5, [r3, #8]
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1f02:	2314      	movs	r3, #20
    1f04:	e7d2      	b.n	1eac <_pwm_init+0x8c>
		return ERR_INVALID_DATA;
    1f06:	2001      	movs	r0, #1
    1f08:	4240      	negs	r0, r0
    1f0a:	e7df      	b.n	1ecc <_pwm_init+0xac>
    1f0c:	00001c8d 	.word	0x00001c8d
    1f10:	2000004c 	.word	0x2000004c
    1f14:	42002c00 	.word	0x42002c00
    1f18:	42003000 	.word	0x42003000
    1f1c:	42003400 	.word	0x42003400
    1f20:	bdffd400 	.word	0xbdffd400
    1f24:	e000e100 	.word	0xe000e100
    1f28:	200005c8 	.word	0x200005c8

00001f2c <_tc_get_timer>:
	return &_tc_timer_functions;
    1f2c:	4801      	ldr	r0, [pc, #4]	; (1f34 <_tc_get_timer+0x8>)
}
    1f2e:	303c      	adds	r0, #60	; 0x3c
    1f30:	4770      	bx	lr
    1f32:	46c0      	nop			; (mov r8, r8)
    1f34:	2000004c 	.word	0x2000004c

00001f38 <_tc_get_pwm>:
}
    1f38:	2000      	movs	r0, #0
    1f3a:	4770      	bx	lr

00001f3c <TC3_Handler>:
{
    1f3c:	b570      	push	{r4, r5, r6, lr}
	tc_pwm_interrupt_handler(_tc3_dev);
    1f3e:	4b0c      	ldr	r3, [pc, #48]	; (1f70 <TC3_Handler+0x34>)
    1f40:	681d      	ldr	r5, [r3, #0]
	void *const hw = device->hw;
    1f42:	692c      	ldr	r4, [r5, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1f44:	7ba3      	ldrb	r3, [r4, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1f46:	07db      	lsls	r3, r3, #31
    1f48:	d506      	bpl.n	1f58 <TC3_Handler+0x1c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1f4a:	2301      	movs	r3, #1
    1f4c:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_period_cb) {
    1f4e:	682b      	ldr	r3, [r5, #0]
    1f50:	2b00      	cmp	r3, #0
    1f52:	d001      	beq.n	1f58 <TC3_Handler+0x1c>
			device->callback.pwm_period_cb(device);
    1f54:	0028      	movs	r0, r5
    1f56:	4798      	blx	r3
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1f58:	7b63      	ldrb	r3, [r4, #13]
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1f5a:	079b      	lsls	r3, r3, #30
    1f5c:	d506      	bpl.n	1f6c <TC3_Handler+0x30>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1f5e:	2302      	movs	r3, #2
    1f60:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_error_cb) {
    1f62:	686b      	ldr	r3, [r5, #4]
    1f64:	2b00      	cmp	r3, #0
    1f66:	d001      	beq.n	1f6c <TC3_Handler+0x30>
			device->callback.pwm_error_cb(device);
    1f68:	0028      	movs	r0, r5
    1f6a:	4798      	blx	r3
}
    1f6c:	bd70      	pop	{r4, r5, r6, pc}
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	200005c8 	.word	0x200005c8

00001f74 <TC4_Handler>:
{
    1f74:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    1f76:	4b02      	ldr	r3, [pc, #8]	; (1f80 <TC4_Handler+0xc>)
    1f78:	6858      	ldr	r0, [r3, #4]
    1f7a:	4b02      	ldr	r3, [pc, #8]	; (1f84 <TC4_Handler+0x10>)
    1f7c:	4798      	blx	r3
}
    1f7e:	bd10      	pop	{r4, pc}
    1f80:	200005c8 	.word	0x200005c8
    1f84:	00001c15 	.word	0x00001c15

00001f88 <TC5_Handler>:
{
    1f88:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc5_dev);
    1f8a:	4b02      	ldr	r3, [pc, #8]	; (1f94 <TC5_Handler+0xc>)
    1f8c:	6898      	ldr	r0, [r3, #8]
    1f8e:	4b02      	ldr	r3, [pc, #8]	; (1f98 <TC5_Handler+0x10>)
    1f90:	4798      	blx	r3
}
    1f92:	bd10      	pop	{r4, pc}
    1f94:	200005c8 	.word	0x200005c8
    1f98:	00001c15 	.word	0x00001c15

00001f9c <__aeabi_atexit>:
    1f9c:	000b      	movs	r3, r1
    1f9e:	b510      	push	{r4, lr}
    1fa0:	0001      	movs	r1, r0
    1fa2:	0018      	movs	r0, r3
    1fa4:	f000 f8b8 	bl	2118 <__cxa_atexit>
    1fa8:	bd10      	pop	{r4, pc}
    1faa:	46c0      	nop			; (mov r8, r8)

00001fac <__udivsi3>:
    1fac:	2200      	movs	r2, #0
    1fae:	0843      	lsrs	r3, r0, #1
    1fb0:	428b      	cmp	r3, r1
    1fb2:	d374      	bcc.n	209e <STACK_SIZE+0x9e>
    1fb4:	0903      	lsrs	r3, r0, #4
    1fb6:	428b      	cmp	r3, r1
    1fb8:	d35f      	bcc.n	207a <STACK_SIZE+0x7a>
    1fba:	0a03      	lsrs	r3, r0, #8
    1fbc:	428b      	cmp	r3, r1
    1fbe:	d344      	bcc.n	204a <STACK_SIZE+0x4a>
    1fc0:	0b03      	lsrs	r3, r0, #12
    1fc2:	428b      	cmp	r3, r1
    1fc4:	d328      	bcc.n	2018 <STACK_SIZE+0x18>
    1fc6:	0c03      	lsrs	r3, r0, #16
    1fc8:	428b      	cmp	r3, r1
    1fca:	d30d      	bcc.n	1fe8 <__udivsi3+0x3c>
    1fcc:	22ff      	movs	r2, #255	; 0xff
    1fce:	0209      	lsls	r1, r1, #8
    1fd0:	ba12      	rev	r2, r2
    1fd2:	0c03      	lsrs	r3, r0, #16
    1fd4:	428b      	cmp	r3, r1
    1fd6:	d302      	bcc.n	1fde <__udivsi3+0x32>
    1fd8:	1212      	asrs	r2, r2, #8
    1fda:	0209      	lsls	r1, r1, #8
    1fdc:	d065      	beq.n	20aa <STACK_SIZE+0xaa>
    1fde:	0b03      	lsrs	r3, r0, #12
    1fe0:	428b      	cmp	r3, r1
    1fe2:	d319      	bcc.n	2018 <STACK_SIZE+0x18>
    1fe4:	e000      	b.n	1fe8 <__udivsi3+0x3c>
    1fe6:	0a09      	lsrs	r1, r1, #8
    1fe8:	0bc3      	lsrs	r3, r0, #15
    1fea:	428b      	cmp	r3, r1
    1fec:	d301      	bcc.n	1ff2 <__udivsi3+0x46>
    1fee:	03cb      	lsls	r3, r1, #15
    1ff0:	1ac0      	subs	r0, r0, r3
    1ff2:	4152      	adcs	r2, r2
    1ff4:	0b83      	lsrs	r3, r0, #14
    1ff6:	428b      	cmp	r3, r1
    1ff8:	d301      	bcc.n	1ffe <__udivsi3+0x52>
    1ffa:	038b      	lsls	r3, r1, #14
    1ffc:	1ac0      	subs	r0, r0, r3
    1ffe:	4152      	adcs	r2, r2
    2000:	0b43      	lsrs	r3, r0, #13
    2002:	428b      	cmp	r3, r1
    2004:	d301      	bcc.n	200a <STACK_SIZE+0xa>
    2006:	034b      	lsls	r3, r1, #13
    2008:	1ac0      	subs	r0, r0, r3
    200a:	4152      	adcs	r2, r2
    200c:	0b03      	lsrs	r3, r0, #12
    200e:	428b      	cmp	r3, r1
    2010:	d301      	bcc.n	2016 <STACK_SIZE+0x16>
    2012:	030b      	lsls	r3, r1, #12
    2014:	1ac0      	subs	r0, r0, r3
    2016:	4152      	adcs	r2, r2
    2018:	0ac3      	lsrs	r3, r0, #11
    201a:	428b      	cmp	r3, r1
    201c:	d301      	bcc.n	2022 <STACK_SIZE+0x22>
    201e:	02cb      	lsls	r3, r1, #11
    2020:	1ac0      	subs	r0, r0, r3
    2022:	4152      	adcs	r2, r2
    2024:	0a83      	lsrs	r3, r0, #10
    2026:	428b      	cmp	r3, r1
    2028:	d301      	bcc.n	202e <STACK_SIZE+0x2e>
    202a:	028b      	lsls	r3, r1, #10
    202c:	1ac0      	subs	r0, r0, r3
    202e:	4152      	adcs	r2, r2
    2030:	0a43      	lsrs	r3, r0, #9
    2032:	428b      	cmp	r3, r1
    2034:	d301      	bcc.n	203a <STACK_SIZE+0x3a>
    2036:	024b      	lsls	r3, r1, #9
    2038:	1ac0      	subs	r0, r0, r3
    203a:	4152      	adcs	r2, r2
    203c:	0a03      	lsrs	r3, r0, #8
    203e:	428b      	cmp	r3, r1
    2040:	d301      	bcc.n	2046 <STACK_SIZE+0x46>
    2042:	020b      	lsls	r3, r1, #8
    2044:	1ac0      	subs	r0, r0, r3
    2046:	4152      	adcs	r2, r2
    2048:	d2cd      	bcs.n	1fe6 <__udivsi3+0x3a>
    204a:	09c3      	lsrs	r3, r0, #7
    204c:	428b      	cmp	r3, r1
    204e:	d301      	bcc.n	2054 <STACK_SIZE+0x54>
    2050:	01cb      	lsls	r3, r1, #7
    2052:	1ac0      	subs	r0, r0, r3
    2054:	4152      	adcs	r2, r2
    2056:	0983      	lsrs	r3, r0, #6
    2058:	428b      	cmp	r3, r1
    205a:	d301      	bcc.n	2060 <STACK_SIZE+0x60>
    205c:	018b      	lsls	r3, r1, #6
    205e:	1ac0      	subs	r0, r0, r3
    2060:	4152      	adcs	r2, r2
    2062:	0943      	lsrs	r3, r0, #5
    2064:	428b      	cmp	r3, r1
    2066:	d301      	bcc.n	206c <STACK_SIZE+0x6c>
    2068:	014b      	lsls	r3, r1, #5
    206a:	1ac0      	subs	r0, r0, r3
    206c:	4152      	adcs	r2, r2
    206e:	0903      	lsrs	r3, r0, #4
    2070:	428b      	cmp	r3, r1
    2072:	d301      	bcc.n	2078 <STACK_SIZE+0x78>
    2074:	010b      	lsls	r3, r1, #4
    2076:	1ac0      	subs	r0, r0, r3
    2078:	4152      	adcs	r2, r2
    207a:	08c3      	lsrs	r3, r0, #3
    207c:	428b      	cmp	r3, r1
    207e:	d301      	bcc.n	2084 <STACK_SIZE+0x84>
    2080:	00cb      	lsls	r3, r1, #3
    2082:	1ac0      	subs	r0, r0, r3
    2084:	4152      	adcs	r2, r2
    2086:	0883      	lsrs	r3, r0, #2
    2088:	428b      	cmp	r3, r1
    208a:	d301      	bcc.n	2090 <STACK_SIZE+0x90>
    208c:	008b      	lsls	r3, r1, #2
    208e:	1ac0      	subs	r0, r0, r3
    2090:	4152      	adcs	r2, r2
    2092:	0843      	lsrs	r3, r0, #1
    2094:	428b      	cmp	r3, r1
    2096:	d301      	bcc.n	209c <STACK_SIZE+0x9c>
    2098:	004b      	lsls	r3, r1, #1
    209a:	1ac0      	subs	r0, r0, r3
    209c:	4152      	adcs	r2, r2
    209e:	1a41      	subs	r1, r0, r1
    20a0:	d200      	bcs.n	20a4 <STACK_SIZE+0xa4>
    20a2:	4601      	mov	r1, r0
    20a4:	4152      	adcs	r2, r2
    20a6:	4610      	mov	r0, r2
    20a8:	4770      	bx	lr
    20aa:	e7ff      	b.n	20ac <STACK_SIZE+0xac>
    20ac:	b501      	push	{r0, lr}
    20ae:	2000      	movs	r0, #0
    20b0:	f000 f806 	bl	20c0 <__aeabi_idiv0>
    20b4:	bd02      	pop	{r1, pc}
    20b6:	46c0      	nop			; (mov r8, r8)

000020b8 <__aeabi_uidivmod>:
    20b8:	2900      	cmp	r1, #0
    20ba:	d0f7      	beq.n	20ac <STACK_SIZE+0xac>
    20bc:	e776      	b.n	1fac <__udivsi3>
    20be:	4770      	bx	lr

000020c0 <__aeabi_idiv0>:
    20c0:	4770      	bx	lr
    20c2:	46c0      	nop			; (mov r8, r8)

000020c4 <__aeabi_lmul>:
    20c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    20c6:	46ce      	mov	lr, r9
    20c8:	4647      	mov	r7, r8
    20ca:	0415      	lsls	r5, r2, #16
    20cc:	0c2d      	lsrs	r5, r5, #16
    20ce:	002e      	movs	r6, r5
    20d0:	b580      	push	{r7, lr}
    20d2:	0407      	lsls	r7, r0, #16
    20d4:	0c14      	lsrs	r4, r2, #16
    20d6:	0c3f      	lsrs	r7, r7, #16
    20d8:	4699      	mov	r9, r3
    20da:	0c03      	lsrs	r3, r0, #16
    20dc:	437e      	muls	r6, r7
    20de:	435d      	muls	r5, r3
    20e0:	4367      	muls	r7, r4
    20e2:	4363      	muls	r3, r4
    20e4:	197f      	adds	r7, r7, r5
    20e6:	0c34      	lsrs	r4, r6, #16
    20e8:	19e4      	adds	r4, r4, r7
    20ea:	469c      	mov	ip, r3
    20ec:	42a5      	cmp	r5, r4
    20ee:	d903      	bls.n	20f8 <__aeabi_lmul+0x34>
    20f0:	2380      	movs	r3, #128	; 0x80
    20f2:	025b      	lsls	r3, r3, #9
    20f4:	4698      	mov	r8, r3
    20f6:	44c4      	add	ip, r8
    20f8:	464b      	mov	r3, r9
    20fa:	4351      	muls	r1, r2
    20fc:	4343      	muls	r3, r0
    20fe:	0436      	lsls	r6, r6, #16
    2100:	0c36      	lsrs	r6, r6, #16
    2102:	0c25      	lsrs	r5, r4, #16
    2104:	0424      	lsls	r4, r4, #16
    2106:	4465      	add	r5, ip
    2108:	19a4      	adds	r4, r4, r6
    210a:	1859      	adds	r1, r3, r1
    210c:	1949      	adds	r1, r1, r5
    210e:	0020      	movs	r0, r4
    2110:	bc0c      	pop	{r2, r3}
    2112:	4690      	mov	r8, r2
    2114:	4699      	mov	r9, r3
    2116:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002118 <__cxa_atexit>:
    2118:	b510      	push	{r4, lr}
    211a:	0013      	movs	r3, r2
    211c:	000a      	movs	r2, r1
    211e:	0001      	movs	r1, r0
    2120:	2002      	movs	r0, #2
    2122:	f000 f881 	bl	2228 <__register_exitproc>
    2126:	bd10      	pop	{r4, pc}

00002128 <__libc_init_array>:
    2128:	b570      	push	{r4, r5, r6, lr}
    212a:	4e0d      	ldr	r6, [pc, #52]	; (2160 <__libc_init_array+0x38>)
    212c:	4d0d      	ldr	r5, [pc, #52]	; (2164 <__libc_init_array+0x3c>)
    212e:	2400      	movs	r4, #0
    2130:	1bad      	subs	r5, r5, r6
    2132:	10ad      	asrs	r5, r5, #2
    2134:	d005      	beq.n	2142 <__libc_init_array+0x1a>
    2136:	00a3      	lsls	r3, r4, #2
    2138:	58f3      	ldr	r3, [r6, r3]
    213a:	3401      	adds	r4, #1
    213c:	4798      	blx	r3
    213e:	42a5      	cmp	r5, r4
    2140:	d1f9      	bne.n	2136 <__libc_init_array+0xe>
    2142:	f000 f9b9 	bl	24b8 <_init>
    2146:	4e08      	ldr	r6, [pc, #32]	; (2168 <__libc_init_array+0x40>)
    2148:	4d08      	ldr	r5, [pc, #32]	; (216c <__libc_init_array+0x44>)
    214a:	2400      	movs	r4, #0
    214c:	1bad      	subs	r5, r5, r6
    214e:	10ad      	asrs	r5, r5, #2
    2150:	d005      	beq.n	215e <__libc_init_array+0x36>
    2152:	00a3      	lsls	r3, r4, #2
    2154:	58f3      	ldr	r3, [r6, r3]
    2156:	3401      	adds	r4, #1
    2158:	4798      	blx	r3
    215a:	42a5      	cmp	r5, r4
    215c:	d1f9      	bne.n	2152 <__libc_init_array+0x2a>
    215e:	bd70      	pop	{r4, r5, r6, pc}
    2160:	000024c4 	.word	0x000024c4
    2164:	000024c4 	.word	0x000024c4
    2168:	000024c4 	.word	0x000024c4
    216c:	000024d0 	.word	0x000024d0

00002170 <memcpy>:
    2170:	b5f0      	push	{r4, r5, r6, r7, lr}
    2172:	0005      	movs	r5, r0
    2174:	2a0f      	cmp	r2, #15
    2176:	d92f      	bls.n	21d8 <memcpy+0x68>
    2178:	000b      	movs	r3, r1
    217a:	4303      	orrs	r3, r0
    217c:	079b      	lsls	r3, r3, #30
    217e:	d134      	bne.n	21ea <memcpy+0x7a>
    2180:	0016      	movs	r6, r2
    2182:	000c      	movs	r4, r1
    2184:	0003      	movs	r3, r0
    2186:	3e10      	subs	r6, #16
    2188:	0935      	lsrs	r5, r6, #4
    218a:	3501      	adds	r5, #1
    218c:	012d      	lsls	r5, r5, #4
    218e:	1945      	adds	r5, r0, r5
    2190:	6827      	ldr	r7, [r4, #0]
    2192:	601f      	str	r7, [r3, #0]
    2194:	6867      	ldr	r7, [r4, #4]
    2196:	605f      	str	r7, [r3, #4]
    2198:	68a7      	ldr	r7, [r4, #8]
    219a:	609f      	str	r7, [r3, #8]
    219c:	68e7      	ldr	r7, [r4, #12]
    219e:	3410      	adds	r4, #16
    21a0:	60df      	str	r7, [r3, #12]
    21a2:	3310      	adds	r3, #16
    21a4:	429d      	cmp	r5, r3
    21a6:	d1f3      	bne.n	2190 <memcpy+0x20>
    21a8:	230f      	movs	r3, #15
    21aa:	439e      	bics	r6, r3
    21ac:	3610      	adds	r6, #16
    21ae:	1985      	adds	r5, r0, r6
    21b0:	1989      	adds	r1, r1, r6
    21b2:	4013      	ands	r3, r2
    21b4:	2b03      	cmp	r3, #3
    21b6:	d91a      	bls.n	21ee <memcpy+0x7e>
    21b8:	1f1e      	subs	r6, r3, #4
    21ba:	2300      	movs	r3, #0
    21bc:	08b4      	lsrs	r4, r6, #2
    21be:	3401      	adds	r4, #1
    21c0:	00a4      	lsls	r4, r4, #2
    21c2:	58cf      	ldr	r7, [r1, r3]
    21c4:	50ef      	str	r7, [r5, r3]
    21c6:	3304      	adds	r3, #4
    21c8:	42a3      	cmp	r3, r4
    21ca:	d1fa      	bne.n	21c2 <memcpy+0x52>
    21cc:	2403      	movs	r4, #3
    21ce:	43a6      	bics	r6, r4
    21d0:	1d33      	adds	r3, r6, #4
    21d2:	4022      	ands	r2, r4
    21d4:	18c9      	adds	r1, r1, r3
    21d6:	18ed      	adds	r5, r5, r3
    21d8:	2a00      	cmp	r2, #0
    21da:	d005      	beq.n	21e8 <memcpy+0x78>
    21dc:	2300      	movs	r3, #0
    21de:	5ccc      	ldrb	r4, [r1, r3]
    21e0:	54ec      	strb	r4, [r5, r3]
    21e2:	3301      	adds	r3, #1
    21e4:	4293      	cmp	r3, r2
    21e6:	d1fa      	bne.n	21de <memcpy+0x6e>
    21e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21ea:	0005      	movs	r5, r0
    21ec:	e7f6      	b.n	21dc <memcpy+0x6c>
    21ee:	001a      	movs	r2, r3
    21f0:	e7f2      	b.n	21d8 <memcpy+0x68>
    21f2:	46c0      	nop			; (mov r8, r8)

000021f4 <rand>:
    21f4:	b510      	push	{r4, lr}
    21f6:	4b09      	ldr	r3, [pc, #36]	; (221c <rand+0x28>)
    21f8:	4a09      	ldr	r2, [pc, #36]	; (2220 <rand+0x2c>)
    21fa:	681c      	ldr	r4, [r3, #0]
    21fc:	4b09      	ldr	r3, [pc, #36]	; (2224 <rand+0x30>)
    21fe:	34a8      	adds	r4, #168	; 0xa8
    2200:	6820      	ldr	r0, [r4, #0]
    2202:	6861      	ldr	r1, [r4, #4]
    2204:	f7ff ff5e 	bl	20c4 <__aeabi_lmul>
    2208:	2201      	movs	r2, #1
    220a:	2300      	movs	r3, #0
    220c:	1880      	adds	r0, r0, r2
    220e:	4159      	adcs	r1, r3
    2210:	6020      	str	r0, [r4, #0]
    2212:	6061      	str	r1, [r4, #4]
    2214:	0048      	lsls	r0, r1, #1
    2216:	0840      	lsrs	r0, r0, #1
    2218:	bd10      	pop	{r4, pc}
    221a:	46c0      	nop			; (mov r8, r8)
    221c:	200000a8 	.word	0x200000a8
    2220:	4c957f2d 	.word	0x4c957f2d
    2224:	5851f42d 	.word	0x5851f42d

00002228 <__register_exitproc>:
    2228:	b5f0      	push	{r4, r5, r6, r7, lr}
    222a:	464e      	mov	r6, r9
    222c:	4645      	mov	r5, r8
    222e:	46de      	mov	lr, fp
    2230:	4657      	mov	r7, sl
    2232:	b5e0      	push	{r5, r6, r7, lr}
    2234:	4d36      	ldr	r5, [pc, #216]	; (2310 <__register_exitproc+0xe8>)
    2236:	b083      	sub	sp, #12
    2238:	0006      	movs	r6, r0
    223a:	6828      	ldr	r0, [r5, #0]
    223c:	4698      	mov	r8, r3
    223e:	000f      	movs	r7, r1
    2240:	4691      	mov	r9, r2
    2242:	f000 f899 	bl	2378 <__retarget_lock_acquire_recursive>
    2246:	4b33      	ldr	r3, [pc, #204]	; (2314 <__register_exitproc+0xec>)
    2248:	681c      	ldr	r4, [r3, #0]
    224a:	23a4      	movs	r3, #164	; 0xa4
    224c:	005b      	lsls	r3, r3, #1
    224e:	58e0      	ldr	r0, [r4, r3]
    2250:	2800      	cmp	r0, #0
    2252:	d052      	beq.n	22fa <__register_exitproc+0xd2>
    2254:	6843      	ldr	r3, [r0, #4]
    2256:	2b1f      	cmp	r3, #31
    2258:	dc13      	bgt.n	2282 <__register_exitproc+0x5a>
    225a:	1c5a      	adds	r2, r3, #1
    225c:	9201      	str	r2, [sp, #4]
    225e:	2e00      	cmp	r6, #0
    2260:	d128      	bne.n	22b4 <__register_exitproc+0x8c>
    2262:	9a01      	ldr	r2, [sp, #4]
    2264:	3302      	adds	r3, #2
    2266:	009b      	lsls	r3, r3, #2
    2268:	6042      	str	r2, [r0, #4]
    226a:	501f      	str	r7, [r3, r0]
    226c:	6828      	ldr	r0, [r5, #0]
    226e:	f000 f885 	bl	237c <__retarget_lock_release_recursive>
    2272:	2000      	movs	r0, #0
    2274:	b003      	add	sp, #12
    2276:	bc3c      	pop	{r2, r3, r4, r5}
    2278:	4690      	mov	r8, r2
    227a:	4699      	mov	r9, r3
    227c:	46a2      	mov	sl, r4
    227e:	46ab      	mov	fp, r5
    2280:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2282:	4b25      	ldr	r3, [pc, #148]	; (2318 <__register_exitproc+0xf0>)
    2284:	2b00      	cmp	r3, #0
    2286:	d03d      	beq.n	2304 <__register_exitproc+0xdc>
    2288:	20c8      	movs	r0, #200	; 0xc8
    228a:	0040      	lsls	r0, r0, #1
    228c:	e000      	b.n	2290 <__register_exitproc+0x68>
    228e:	bf00      	nop
    2290:	2800      	cmp	r0, #0
    2292:	d037      	beq.n	2304 <__register_exitproc+0xdc>
    2294:	22a4      	movs	r2, #164	; 0xa4
    2296:	2300      	movs	r3, #0
    2298:	0052      	lsls	r2, r2, #1
    229a:	58a1      	ldr	r1, [r4, r2]
    229c:	6043      	str	r3, [r0, #4]
    229e:	6001      	str	r1, [r0, #0]
    22a0:	50a0      	str	r0, [r4, r2]
    22a2:	3240      	adds	r2, #64	; 0x40
    22a4:	5083      	str	r3, [r0, r2]
    22a6:	3204      	adds	r2, #4
    22a8:	5083      	str	r3, [r0, r2]
    22aa:	3301      	adds	r3, #1
    22ac:	9301      	str	r3, [sp, #4]
    22ae:	2300      	movs	r3, #0
    22b0:	2e00      	cmp	r6, #0
    22b2:	d0d6      	beq.n	2262 <__register_exitproc+0x3a>
    22b4:	009a      	lsls	r2, r3, #2
    22b6:	4692      	mov	sl, r2
    22b8:	4482      	add	sl, r0
    22ba:	464a      	mov	r2, r9
    22bc:	2188      	movs	r1, #136	; 0x88
    22be:	4654      	mov	r4, sl
    22c0:	5062      	str	r2, [r4, r1]
    22c2:	22c4      	movs	r2, #196	; 0xc4
    22c4:	0052      	lsls	r2, r2, #1
    22c6:	4691      	mov	r9, r2
    22c8:	4481      	add	r9, r0
    22ca:	464a      	mov	r2, r9
    22cc:	3987      	subs	r1, #135	; 0x87
    22ce:	4099      	lsls	r1, r3
    22d0:	6812      	ldr	r2, [r2, #0]
    22d2:	468b      	mov	fp, r1
    22d4:	430a      	orrs	r2, r1
    22d6:	4694      	mov	ip, r2
    22d8:	464a      	mov	r2, r9
    22da:	4661      	mov	r1, ip
    22dc:	6011      	str	r1, [r2, #0]
    22de:	2284      	movs	r2, #132	; 0x84
    22e0:	4641      	mov	r1, r8
    22e2:	0052      	lsls	r2, r2, #1
    22e4:	50a1      	str	r1, [r4, r2]
    22e6:	2e02      	cmp	r6, #2
    22e8:	d1bb      	bne.n	2262 <__register_exitproc+0x3a>
    22ea:	0002      	movs	r2, r0
    22ec:	465c      	mov	r4, fp
    22ee:	328d      	adds	r2, #141	; 0x8d
    22f0:	32ff      	adds	r2, #255	; 0xff
    22f2:	6811      	ldr	r1, [r2, #0]
    22f4:	430c      	orrs	r4, r1
    22f6:	6014      	str	r4, [r2, #0]
    22f8:	e7b3      	b.n	2262 <__register_exitproc+0x3a>
    22fa:	0020      	movs	r0, r4
    22fc:	304d      	adds	r0, #77	; 0x4d
    22fe:	30ff      	adds	r0, #255	; 0xff
    2300:	50e0      	str	r0, [r4, r3]
    2302:	e7a7      	b.n	2254 <__register_exitproc+0x2c>
    2304:	6828      	ldr	r0, [r5, #0]
    2306:	f000 f839 	bl	237c <__retarget_lock_release_recursive>
    230a:	2001      	movs	r0, #1
    230c:	4240      	negs	r0, r0
    230e:	e7b1      	b.n	2274 <__register_exitproc+0x4c>
    2310:	200004d8 	.word	0x200004d8
    2314:	000024b4 	.word	0x000024b4
    2318:	00000000 	.word	0x00000000

0000231c <register_fini>:
    231c:	4b03      	ldr	r3, [pc, #12]	; (232c <register_fini+0x10>)
    231e:	b510      	push	{r4, lr}
    2320:	2b00      	cmp	r3, #0
    2322:	d002      	beq.n	232a <register_fini+0xe>
    2324:	4802      	ldr	r0, [pc, #8]	; (2330 <register_fini+0x14>)
    2326:	f000 f805 	bl	2334 <atexit>
    232a:	bd10      	pop	{r4, pc}
    232c:	00000000 	.word	0x00000000
    2330:	00002345 	.word	0x00002345

00002334 <atexit>:
    2334:	b510      	push	{r4, lr}
    2336:	0001      	movs	r1, r0
    2338:	2300      	movs	r3, #0
    233a:	2200      	movs	r2, #0
    233c:	2000      	movs	r0, #0
    233e:	f7ff ff73 	bl	2228 <__register_exitproc>
    2342:	bd10      	pop	{r4, pc}

00002344 <__libc_fini_array>:
    2344:	b570      	push	{r4, r5, r6, lr}
    2346:	4b09      	ldr	r3, [pc, #36]	; (236c <__libc_fini_array+0x28>)
    2348:	4c09      	ldr	r4, [pc, #36]	; (2370 <__libc_fini_array+0x2c>)
    234a:	1ae4      	subs	r4, r4, r3
    234c:	10a4      	asrs	r4, r4, #2
    234e:	d009      	beq.n	2364 <__libc_fini_array+0x20>
    2350:	4a08      	ldr	r2, [pc, #32]	; (2374 <__libc_fini_array+0x30>)
    2352:	18a5      	adds	r5, r4, r2
    2354:	00ad      	lsls	r5, r5, #2
    2356:	18ed      	adds	r5, r5, r3
    2358:	682b      	ldr	r3, [r5, #0]
    235a:	3c01      	subs	r4, #1
    235c:	4798      	blx	r3
    235e:	3d04      	subs	r5, #4
    2360:	2c00      	cmp	r4, #0
    2362:	d1f9      	bne.n	2358 <__libc_fini_array+0x14>
    2364:	f000 f8b4 	bl	24d0 <_fini>
    2368:	bd70      	pop	{r4, r5, r6, pc}
    236a:	46c0      	nop			; (mov r8, r8)
    236c:	000024dc 	.word	0x000024dc
    2370:	000024e0 	.word	0x000024e0
    2374:	3fffffff 	.word	0x3fffffff

00002378 <__retarget_lock_acquire_recursive>:
    2378:	4770      	bx	lr
    237a:	46c0      	nop			; (mov r8, r8)

0000237c <__retarget_lock_release_recursive>:
    237c:	4770      	bx	lr
    237e:	46c0      	nop			; (mov r8, r8)

00002380 <defaultParameters>:
    2380:	02ee 02bc 07d0 02ee 0320 07d0 e000 450d     ........ ......E
    2390:	de6a 400d 0000 4140 0000 429a 0000 40c0     j..@..@A...B...@
    23a0:	0000 4140 0000 42a4 0000 430c 0000 4302     ..@A...B...C...C
    23b0:	d289 3e7e 8000 4404 8000 4404 0000 41a0     ..~>...D...D...A
    23c0:	0000 41f0 0000 3f80 4000 451c 8000 453b     ...A...?.@.E..;E
    23d0:	1f40 0000 1f40 0000 1f40 0000 1f40 0000     @...@...@...@...
    23e0:	1388 0000 1388 0000 0064 0000 0064 0000     ........d...d...
    23f0:	0000 4100 0000 428c 0000 0000               ...A...B....

000023fc <defaultPreferences>:
    23fc:	00fa 0000 0032 0000 2e2e 682f 6c61 732f     ....2...../hal/s
    240c:	6372 682f 6c61 695f 2e6f 0063 2e2e 682f     rc/hal_io.c.../h
    241c:	6c61 732f 6372 682f 6c61 705f 6d77 632e     al/src/hal_pwm.c
    242c:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
    243c:	6c61 735f 6970 6d5f 735f 6e79 2e63 0063     al_spi_m_sync.c.
    244c:	2e2e 682f 6c61 732f 6372 682f 6c61 745f     ../hal/src/hal_t
    245c:	6d69 7265 632e 0000 2e2e 682f 6c61 752f     imer.c..../hal/u
    246c:	6974 736c 732f 6372 752f 6974 736c 6c5f     tils/src/utils_l
    247c:	7369 2e74 0063 0000 2e2e 682f 6c70 732f     ist.c...../hpl/s
    248c:	7265 6f63 2f6d 7068 5f6c 6573 6372 6d6f     ercom/hpl_sercom
    249c:	632e 0000 2e2e 682f 6c70 742f 2f63 7068     .c..../hpl/tc/hp
    24ac:	5f6c 6374 632e 0000                         l_tc.c..

000024b4 <_global_impure_ptr>:
    24b4:	00b0 2000                                   ... 

000024b8 <_init>:
    24b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24ba:	46c0      	nop			; (mov r8, r8)
    24bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    24be:	bc08      	pop	{r3}
    24c0:	469e      	mov	lr, r3
    24c2:	4770      	bx	lr

000024c4 <__init_array_start>:
    24c4:	0000231d 	.word	0x0000231d

000024c8 <__frame_dummy_init_array_entry>:
    24c8:	000000dd 00000a51                       ....Q...

000024d0 <_fini>:
    24d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    24d6:	bc08      	pop	{r3}
    24d8:	469e      	mov	lr, r3
    24da:	4770      	bx	lr

000024dc <__fini_array_start>:
    24dc:	000000b5 	.word	0x000000b5
