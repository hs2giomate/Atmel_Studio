
LedLightingVerification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004794  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00004794  00004794  00014794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000004f4  20000000  0000479c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000464  200004f4  00004c90  000204f4  2**2
                  ALLOC
  4 .stack        00002000  20000958  000050f4  000204f4  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000204f4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002051c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00031c8e  00000000  00000000  00020575  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003d68  00000000  00000000  00052203  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000e6c3  00000000  00000000  00055f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e48  00000000  00000000  0006462e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000013b0  00000000  00000000  00065476  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001bb43  00000000  00000000  00066826  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012971  00000000  00000000  00082369  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00088b01  00000000  00000000  00094cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002ab0  00000000  00000000  0011d7dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 29 00 20 15 01 00 00 0d 02 00 00 0d 02 00 00     X). ............
	...
      2c:	0d 02 00 00 00 00 00 00 00 00 00 00 0d 02 00 00     ................
      3c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      4c:	81 36 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     .6..............
      5c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      6c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      7c:	69 3b 00 00 0d 02 00 00 0d 02 00 00 e5 3f 00 00     i;...........?..
      8c:	1d 40 00 00 31 40 00 00 0d 02 00 00 0d 02 00 00     .@..1@..........
      9c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      ac:	0d 02 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004f4 	.word	0x200004f4
      d4:	00000000 	.word	0x00000000
      d8:	0000479c 	.word	0x0000479c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004f8 	.word	0x200004f8
     108:	0000479c 	.word	0x0000479c
     10c:	0000479c 	.word	0x0000479c
     110:	00000000 	.word	0x00000000

00000114 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     11a:	4b2f      	ldr	r3, [pc, #188]	; (1d8 <Reset_Handler+0xc4>)
     11c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     11e:	4b2f      	ldr	r3, [pc, #188]	; (1dc <Reset_Handler+0xc8>)
     120:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     122:	687a      	ldr	r2, [r7, #4]
     124:	683b      	ldr	r3, [r7, #0]
     126:	429a      	cmp	r2, r3
     128:	d00c      	beq.n	144 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     12a:	e007      	b.n	13c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     12c:	683b      	ldr	r3, [r7, #0]
     12e:	1d1a      	adds	r2, r3, #4
     130:	603a      	str	r2, [r7, #0]
     132:	687a      	ldr	r2, [r7, #4]
     134:	1d11      	adds	r1, r2, #4
     136:	6079      	str	r1, [r7, #4]
     138:	6812      	ldr	r2, [r2, #0]
     13a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     13c:	683a      	ldr	r2, [r7, #0]
     13e:	4b28      	ldr	r3, [pc, #160]	; (1e0 <Reset_Handler+0xcc>)
     140:	429a      	cmp	r2, r3
     142:	d3f3      	bcc.n	12c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     144:	4b27      	ldr	r3, [pc, #156]	; (1e4 <Reset_Handler+0xd0>)
     146:	603b      	str	r3, [r7, #0]
     148:	e004      	b.n	154 <Reset_Handler+0x40>
                *pDest++ = 0;
     14a:	683b      	ldr	r3, [r7, #0]
     14c:	1d1a      	adds	r2, r3, #4
     14e:	603a      	str	r2, [r7, #0]
     150:	2200      	movs	r2, #0
     152:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     154:	683a      	ldr	r2, [r7, #0]
     156:	4b24      	ldr	r3, [pc, #144]	; (1e8 <Reset_Handler+0xd4>)
     158:	429a      	cmp	r2, r3
     15a:	d3f6      	bcc.n	14a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xd8>)
     15e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     160:	4b23      	ldr	r3, [pc, #140]	; (1f0 <Reset_Handler+0xdc>)
     162:	687a      	ldr	r2, [r7, #4]
     164:	21ff      	movs	r1, #255	; 0xff
     166:	438a      	bics	r2, r1
     168:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16a:	4a22      	ldr	r2, [pc, #136]	; (1f4 <Reset_Handler+0xe0>)
     16c:	2390      	movs	r3, #144	; 0x90
     16e:	005b      	lsls	r3, r3, #1
     170:	2102      	movs	r1, #2
     172:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     174:	4a20      	ldr	r2, [pc, #128]	; (1f8 <Reset_Handler+0xe4>)
     176:	78d3      	ldrb	r3, [r2, #3]
     178:	2103      	movs	r1, #3
     17a:	438b      	bics	r3, r1
     17c:	1c19      	adds	r1, r3, #0
     17e:	2302      	movs	r3, #2
     180:	430b      	orrs	r3, r1
     182:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     184:	4a1c      	ldr	r2, [pc, #112]	; (1f8 <Reset_Handler+0xe4>)
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	210c      	movs	r1, #12
     18a:	438b      	bics	r3, r1
     18c:	1c19      	adds	r1, r3, #0
     18e:	2308      	movs	r3, #8
     190:	430b      	orrs	r3, r1
     192:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     194:	4a19      	ldr	r2, [pc, #100]	; (1fc <Reset_Handler+0xe8>)
     196:	7b93      	ldrb	r3, [r2, #14]
     198:	2130      	movs	r1, #48	; 0x30
     19a:	438b      	bics	r3, r1
     19c:	1c19      	adds	r1, r3, #0
     19e:	2320      	movs	r3, #32
     1a0:	430b      	orrs	r3, r1
     1a2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a4:	4a15      	ldr	r2, [pc, #84]	; (1fc <Reset_Handler+0xe8>)
     1a6:	7b93      	ldrb	r3, [r2, #14]
     1a8:	210c      	movs	r1, #12
     1aa:	438b      	bics	r3, r1
     1ac:	1c19      	adds	r1, r3, #0
     1ae:	2308      	movs	r3, #8
     1b0:	430b      	orrs	r3, r1
     1b2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b4:	4a11      	ldr	r2, [pc, #68]	; (1fc <Reset_Handler+0xe8>)
     1b6:	7b93      	ldrb	r3, [r2, #14]
     1b8:	2103      	movs	r1, #3
     1ba:	438b      	bics	r3, r1
     1bc:	1c19      	adds	r1, r3, #0
     1be:	2302      	movs	r3, #2
     1c0:	430b      	orrs	r3, r1
     1c2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c4:	4a0e      	ldr	r2, [pc, #56]	; (200 <Reset_Handler+0xec>)
     1c6:	6853      	ldr	r3, [r2, #4]
     1c8:	2180      	movs	r1, #128	; 0x80
     1ca:	430b      	orrs	r3, r1
     1cc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ce:	4b0d      	ldr	r3, [pc, #52]	; (204 <Reset_Handler+0xf0>)
     1d0:	4798      	blx	r3

        /* Branch to main function */
        main();
     1d2:	4b0d      	ldr	r3, [pc, #52]	; (208 <Reset_Handler+0xf4>)
     1d4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xc2>
     1d8:	0000479c 	.word	0x0000479c
     1dc:	20000000 	.word	0x20000000
     1e0:	200004f4 	.word	0x200004f4
     1e4:	200004f4 	.word	0x200004f4
     1e8:	20000958 	.word	0x20000958
     1ec:	00000000 	.word	0x00000000
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	41007000 	.word	0x41007000
     1f8:	41005000 	.word	0x41005000
     1fc:	41004800 	.word	0x41004800
     200:	41004000 	.word	0x41004000
     204:	0000436d 	.word	0x0000436d
     208:	00001bd1 	.word	0x00001bd1

0000020c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     20c:	b580      	push	{r7, lr}
     20e:	af00      	add	r7, sp, #0
        while (1) {
     210:	e7fe      	b.n	210 <Dummy_Handler+0x4>
	...

00000214 <_ZL11RestartLedsPK10timer_task>:


LedHandler_Class		*ptrLedHandler;
uint32_t	tempTicks;
static void RestartLeds(const struct timer_task *const timer_task)
{
     214:	b580      	push	{r7, lr}
     216:	b082      	sub	sp, #8
     218:	af00      	add	r7, sp, #0
     21a:	6078      	str	r0, [r7, #4]
	ptrLedHandler->restarted=true;
     21c:	4b04      	ldr	r3, [pc, #16]	; (230 <_ZL11RestartLedsPK10timer_task+0x1c>)
     21e:	681a      	ldr	r2, [r3, #0]
     220:	2376      	movs	r3, #118	; 0x76
     222:	33ff      	adds	r3, #255	; 0xff
     224:	2101      	movs	r1, #1
     226:	54d1      	strb	r1, [r2, r3]
}
     228:	46c0      	nop			; (mov r8, r8)
     22a:	46bd      	mov	sp, r7
     22c:	b002      	add	sp, #8
     22e:	bd80      	pop	{r7, pc}
     230:	20000510 	.word	0x20000510

00000234 <_ZL16PWMPeriodExpiredP11_pwm_device>:
static void PWMPeriodExpired(struct _pwm_device *device){
     234:	b580      	push	{r7, lr}
     236:	b082      	sub	sp, #8
     238:	af00      	add	r7, sp, #0
     23a:	6078      	str	r0, [r7, #4]
	

	ptrLedHandler->deadTime=!lighter.deadTime;
     23c:	4b08      	ldr	r3, [pc, #32]	; (260 <_ZL16PWMPeriodExpiredP11_pwm_device+0x2c>)
     23e:	681a      	ldr	r2, [r3, #0]
     240:	4908      	ldr	r1, [pc, #32]	; (264 <_ZL16PWMPeriodExpiredP11_pwm_device+0x30>)
     242:	2378      	movs	r3, #120	; 0x78
     244:	33ff      	adds	r3, #255	; 0xff
     246:	5ccb      	ldrb	r3, [r1, r3]
     248:	b2db      	uxtb	r3, r3
     24a:	2101      	movs	r1, #1
     24c:	404b      	eors	r3, r1
     24e:	b2d9      	uxtb	r1, r3
     250:	2378      	movs	r3, #120	; 0x78
     252:	33ff      	adds	r3, #255	; 0xff
     254:	54d1      	strb	r1, [r2, r3]
}
     256:	46c0      	nop			; (mov r8, r8)
     258:	46bd      	mov	sp, r7
     25a:	b002      	add	sp, #8
     25c:	bd80      	pop	{r7, pc}
     25e:	46c0      	nop			; (mov r8, r8)
     260:	20000510 	.word	0x20000510
     264:	20000518 	.word	0x20000518

00000268 <_ZL10BlinkTimerPK10timer_task>:

static void BlinkTimer(const struct timer_task *const timer_task)
{
     268:	b580      	push	{r7, lr}
     26a:	b082      	sub	sp, #8
     26c:	af00      	add	r7, sp, #0
     26e:	6078      	str	r0, [r7, #4]
	ptrLedHandler->blinkOut=true;
     270:	4b04      	ldr	r3, [pc, #16]	; (284 <_ZL10BlinkTimerPK10timer_task+0x1c>)
     272:	681a      	ldr	r2, [r3, #0]
     274:	237c      	movs	r3, #124	; 0x7c
     276:	33ff      	adds	r3, #255	; 0xff
     278:	2101      	movs	r1, #1
     27a:	54d1      	strb	r1, [r2, r3]
}
     27c:	46c0      	nop			; (mov r8, r8)
     27e:	46bd      	mov	sp, r7
     280:	b002      	add	sp, #8
     282:	bd80      	pop	{r7, pc}
     284:	20000510 	.word	0x20000510

00000288 <_ZN16LedHandler_ClassC1Ev>:
}



// default constructor
LedHandler_Class::LedHandler_Class()
     288:	b580      	push	{r7, lr}
     28a:	b082      	sub	sp, #8
     28c:	af00      	add	r7, sp, #0
     28e:	6078      	str	r0, [r7, #4]
     290:	687b      	ldr	r3, [r7, #4]
     292:	0018      	movs	r0, r3
     294:	4b14      	ldr	r3, [pc, #80]	; (2e8 <_ZN16LedHandler_ClassC1Ev+0x60>)
     296:	4798      	blx	r3
{
	ready=false;
     298:	687a      	ldr	r2, [r7, #4]
     29a:	23bd      	movs	r3, #189	; 0xbd
     29c:	005b      	lsls	r3, r3, #1
     29e:	2100      	movs	r1, #0
     2a0:	54d1      	strb	r1, [r2, r3]
	modus=INITIAL_STATE;
     2a2:	687a      	ldr	r2, [r7, #4]
     2a4:	2388      	movs	r3, #136	; 0x88
     2a6:	33ff      	adds	r3, #255	; 0xff
     2a8:	2100      	movs	r1, #0
     2aa:	54d1      	strb	r1, [r2, r3]
	ptrLedHandler=this;
     2ac:	4b0f      	ldr	r3, [pc, #60]	; (2ec <_ZN16LedHandler_ClassC1Ev+0x64>)
     2ae:	687a      	ldr	r2, [r7, #4]
     2b0:	601a      	str	r2, [r3, #0]
	totalPins=kTOTALLEFTPINS+kTOTALRIGHTPINS;
     2b2:	687a      	ldr	r2, [r7, #4]
     2b4:	239d      	movs	r3, #157	; 0x9d
     2b6:	009b      	lsls	r3, r3, #2
     2b8:	213a      	movs	r1, #58	; 0x3a
     2ba:	54d1      	strb	r1, [r2, r3]
	dutyCycle=500;
     2bc:	687a      	ldr	r2, [r7, #4]
     2be:	23be      	movs	r3, #190	; 0xbe
     2c0:	005b      	lsls	r3, r3, #1
     2c2:	21fa      	movs	r1, #250	; 0xfa
     2c4:	0049      	lsls	r1, r1, #1
     2c6:	50d1      	str	r1, [r2, r3]
	stepTime=POWERON_SINGLE_TIME;
     2c8:	687a      	ldr	r2, [r7, #4]
     2ca:	23c0      	movs	r3, #192	; 0xc0
     2cc:	005b      	lsls	r3, r3, #1
     2ce:	2104      	movs	r1, #4
     2d0:	50d1      	str	r1, [r2, r3]
	period=POWER_PERIOD;
     2d2:	687a      	ldr	r2, [r7, #4]
     2d4:	23a3      	movs	r3, #163	; 0xa3
     2d6:	009b      	lsls	r3, r3, #2
     2d8:	2132      	movs	r1, #50	; 0x32
     2da:	50d1      	str	r1, [r2, r3]
	} //LedDriverClass
     2dc:	687b      	ldr	r3, [r7, #4]
     2de:	0018      	movs	r0, r3
     2e0:	46bd      	mov	sp, r7
     2e2:	b002      	add	sp, #8
     2e4:	bd80      	pop	{r7, pc}
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	00001739 	.word	0x00001739
     2ec:	20000510 	.word	0x20000510

000002f0 <_ZN16LedHandler_ClassD1Ev>:

// default destructor
LedHandler_Class::~LedHandler_Class()
     2f0:	b580      	push	{r7, lr}
     2f2:	b082      	sub	sp, #8
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
     2f8:	687b      	ldr	r3, [r7, #4]
     2fa:	0018      	movs	r0, r3
     2fc:	4b03      	ldr	r3, [pc, #12]	; (30c <_ZN16LedHandler_ClassD1Ev+0x1c>)
     2fe:	4798      	blx	r3
{
} //~LedDriverClass
     300:	687b      	ldr	r3, [r7, #4]
     302:	0018      	movs	r0, r3
     304:	46bd      	mov	sp, r7
     306:	b002      	add	sp, #8
     308:	bd80      	pop	{r7, pc}
     30a:	46c0      	nop			; (mov r8, r8)
     30c:	00001753 	.word	0x00001753

00000310 <_ZN16LedHandler_Class4InitEv>:

void	LedHandler_Class::Init(void){
     310:	b580      	push	{r7, lr}
     312:	b084      	sub	sp, #16
     314:	af00      	add	r7, sp, #0
     316:	6078      	str	r0, [r7, #4]
	InitMapping();
     318:	687b      	ldr	r3, [r7, #4]
     31a:	0018      	movs	r0, r3
     31c:	4b47      	ldr	r3, [pc, #284]	; (43c <_ZN16LedHandler_Class4InitEv+0x12c>)
     31e:	4798      	blx	r3
	for (int i=0;i<kTOTALLEFTPINS;i++)
     320:	2300      	movs	r3, #0
     322:	60fb      	str	r3, [r7, #12]
     324:	68fb      	ldr	r3, [r7, #12]
     326:	2b1c      	cmp	r3, #28
     328:	dc1c      	bgt.n	364 <_ZN16LedHandler_Class4InitEv+0x54>
	{
		pins.allPins[i]=leftPins.pinsLeft[i];
     32a:	687a      	ldr	r2, [r7, #4]
     32c:	68fb      	ldr	r3, [r7, #12]
     32e:	18d3      	adds	r3, r2, r3
     330:	331d      	adds	r3, #29
     332:	7818      	ldrb	r0, [r3, #0]
     334:	6879      	ldr	r1, [r7, #4]
     336:	23e3      	movs	r3, #227	; 0xe3
     338:	005b      	lsls	r3, r3, #1
     33a:	68fa      	ldr	r2, [r7, #12]
     33c:	188a      	adds	r2, r1, r2
     33e:	18d3      	adds	r3, r2, r3
     340:	1c02      	adds	r2, r0, #0
     342:	701a      	strb	r2, [r3, #0]
		pins.allPorts[i]=leftPins.portsLeft[i];
     344:	687a      	ldr	r2, [r7, #4]
     346:	68fb      	ldr	r3, [r7, #12]
     348:	18d3      	adds	r3, r2, r3
     34a:	7818      	ldrb	r0, [r3, #0]
     34c:	6879      	ldr	r1, [r7, #4]
     34e:	23c6      	movs	r3, #198	; 0xc6
     350:	005b      	lsls	r3, r3, #1
     352:	68fa      	ldr	r2, [r7, #12]
     354:	188a      	adds	r2, r1, r2
     356:	18d3      	adds	r3, r2, r3
     358:	1c02      	adds	r2, r0, #0
     35a:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<kTOTALLEFTPINS;i++)
     35c:	68fb      	ldr	r3, [r7, #12]
     35e:	3301      	adds	r3, #1
     360:	60fb      	str	r3, [r7, #12]
     362:	e7df      	b.n	324 <_ZN16LedHandler_Class4InitEv+0x14>
	}
	for (int i=0;i<kTOTALRIGHTPINS;i++)
     364:	2300      	movs	r3, #0
     366:	60bb      	str	r3, [r7, #8]
     368:	68bb      	ldr	r3, [r7, #8]
     36a:	2b1c      	cmp	r3, #28
     36c:	dc2d      	bgt.n	3ca <_ZN16LedHandler_Class4InitEv+0xba>
	{
		pins.allPins[totalPins-i-1]=rightPins.pinsRight[i];
     36e:	687a      	ldr	r2, [r7, #4]
     370:	239d      	movs	r3, #157	; 0x9d
     372:	009b      	lsls	r3, r3, #2
     374:	5cd3      	ldrb	r3, [r2, r3]
     376:	001a      	movs	r2, r3
     378:	68bb      	ldr	r3, [r7, #8]
     37a:	1ad3      	subs	r3, r2, r3
     37c:	1e5a      	subs	r2, r3, #1
     37e:	6879      	ldr	r1, [r7, #4]
     380:	2057      	movs	r0, #87	; 0x57
     382:	68bb      	ldr	r3, [r7, #8]
     384:	18cb      	adds	r3, r1, r3
     386:	181b      	adds	r3, r3, r0
     388:	7818      	ldrb	r0, [r3, #0]
     38a:	6879      	ldr	r1, [r7, #4]
     38c:	23e3      	movs	r3, #227	; 0xe3
     38e:	005b      	lsls	r3, r3, #1
     390:	188a      	adds	r2, r1, r2
     392:	18d3      	adds	r3, r2, r3
     394:	1c02      	adds	r2, r0, #0
     396:	701a      	strb	r2, [r3, #0]
		pins.allPorts[totalPins-i-1]=rightPins.portsRight[i];
     398:	687a      	ldr	r2, [r7, #4]
     39a:	239d      	movs	r3, #157	; 0x9d
     39c:	009b      	lsls	r3, r3, #2
     39e:	5cd3      	ldrb	r3, [r2, r3]
     3a0:	001a      	movs	r2, r3
     3a2:	68bb      	ldr	r3, [r7, #8]
     3a4:	1ad3      	subs	r3, r2, r3
     3a6:	1e5a      	subs	r2, r3, #1
     3a8:	6879      	ldr	r1, [r7, #4]
     3aa:	203a      	movs	r0, #58	; 0x3a
     3ac:	68bb      	ldr	r3, [r7, #8]
     3ae:	18cb      	adds	r3, r1, r3
     3b0:	181b      	adds	r3, r3, r0
     3b2:	7818      	ldrb	r0, [r3, #0]
     3b4:	6879      	ldr	r1, [r7, #4]
     3b6:	23c6      	movs	r3, #198	; 0xc6
     3b8:	005b      	lsls	r3, r3, #1
     3ba:	188a      	adds	r2, r1, r2
     3bc:	18d3      	adds	r3, r2, r3
     3be:	1c02      	adds	r2, r0, #0
     3c0:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<kTOTALRIGHTPINS;i++)
     3c2:	68bb      	ldr	r3, [r7, #8]
     3c4:	3301      	adds	r3, #1
     3c6:	60bb      	str	r3, [r7, #8]
     3c8:	e7ce      	b.n	368 <_ZN16LedHandler_Class4InitEv+0x58>
	}
	SetBothSidesPins(pins);
     3ca:	687a      	ldr	r2, [r7, #4]
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	338d      	adds	r3, #141	; 0x8d
     3d0:	33ff      	adds	r3, #255	; 0xff
     3d2:	0019      	movs	r1, r3
     3d4:	0010      	movs	r0, r2
     3d6:	4b1a      	ldr	r3, [pc, #104]	; (440 <_ZN16LedHandler_Class4InitEv+0x130>)
     3d8:	4798      	blx	r3
	deadTime=false;
     3da:	687a      	ldr	r2, [r7, #4]
     3dc:	2378      	movs	r3, #120	; 0x78
     3de:	33ff      	adds	r3, #255	; 0xff
     3e0:	2100      	movs	r1, #0
     3e2:	54d1      	strb	r1, [r2, r3]

	ledTimer.Init();
     3e4:	4b17      	ldr	r3, [pc, #92]	; (444 <_ZN16LedHandler_Class4InitEv+0x134>)
     3e6:	0018      	movs	r0, r3
     3e8:	4b17      	ldr	r3, [pc, #92]	; (448 <_ZN16LedHandler_Class4InitEv+0x138>)
     3ea:	4798      	blx	r3
	pwmTimer.Init();
     3ec:	4b17      	ldr	r3, [pc, #92]	; (44c <_ZN16LedHandler_Class4InitEv+0x13c>)
     3ee:	0018      	movs	r0, r3
     3f0:	4b15      	ldr	r3, [pc, #84]	; (448 <_ZN16LedHandler_Class4InitEv+0x138>)
     3f2:	4798      	blx	r3
	DefineColors(state);
     3f4:	687a      	ldr	r2, [r7, #4]
     3f6:	687b      	ldr	r3, [r7, #4]
     3f8:	2180      	movs	r1, #128	; 0x80
     3fa:	0089      	lsls	r1, r1, #2
     3fc:	468c      	mov	ip, r1
     3fe:	4463      	add	r3, ip
     400:	0019      	movs	r1, r3
     402:	0010      	movs	r0, r2
     404:	4b12      	ldr	r3, [pc, #72]	; (450 <_ZN16LedHandler_Class4InitEv+0x140>)
     406:	4798      	blx	r3
	ready=true;
     408:	687a      	ldr	r2, [r7, #4]
     40a:	23bd      	movs	r3, #189	; 0xbd
     40c:	005b      	lsls	r3, r3, #1
     40e:	2101      	movs	r1, #1
     410:	54d1      	strb	r1, [r2, r3]
	pwm_set_parameters(&PWM_0,PWM_WAVE_PERIOD,PWM_WAVE_DUTY);
     412:	23fa      	movs	r3, #250	; 0xfa
     414:	005a      	lsls	r2, r3, #1
     416:	490f      	ldr	r1, [pc, #60]	; (454 <_ZN16LedHandler_Class4InitEv+0x144>)
     418:	4b0f      	ldr	r3, [pc, #60]	; (458 <_ZN16LedHandler_Class4InitEv+0x148>)
     41a:	0018      	movs	r0, r3
     41c:	4b0f      	ldr	r3, [pc, #60]	; (45c <_ZN16LedHandler_Class4InitEv+0x14c>)
     41e:	4798      	blx	r3
	pwm_register_callback(&PWM_0,PWM_PERIOD_CB, (pwm_cb_t)PWMPeriodExpired);
     420:	4a0f      	ldr	r2, [pc, #60]	; (460 <_ZN16LedHandler_Class4InitEv+0x150>)
     422:	4b0d      	ldr	r3, [pc, #52]	; (458 <_ZN16LedHandler_Class4InitEv+0x148>)
     424:	2100      	movs	r1, #0
     426:	0018      	movs	r0, r3
     428:	4b0e      	ldr	r3, [pc, #56]	; (464 <_ZN16LedHandler_Class4InitEv+0x154>)
     42a:	4798      	blx	r3
	pwmTimer.stop();
     42c:	4b07      	ldr	r3, [pc, #28]	; (44c <_ZN16LedHandler_Class4InitEv+0x13c>)
     42e:	0018      	movs	r0, r3
     430:	4b0d      	ldr	r3, [pc, #52]	; (468 <_ZN16LedHandler_Class4InitEv+0x158>)
     432:	4798      	blx	r3

}
     434:	46c0      	nop			; (mov r8, r8)
     436:	46bd      	mov	sp, r7
     438:	b004      	add	sp, #16
     43a:	bd80      	pop	{r7, pc}
     43c:	00001765 	.word	0x00001765
     440:	00001a29 	.word	0x00001a29
     444:	200007e8 	.word	0x200007e8
     448:	000028d1 	.word	0x000028d1
     44c:	20000814 	.word	0x20000814
     450:	00001961 	.word	0x00001961
     454:	00000823 	.word	0x00000823
     458:	200008a0 	.word	0x200008a0
     45c:	00002f01 	.word	0x00002f01
     460:	00000235 	.word	0x00000235
     464:	00002eb5 	.word	0x00002eb5
     468:	0000290d 	.word	0x0000290d

0000046c <_ZN16LedHandler_Class3RunEv>:

void	LedHandler_Class::Run(void){
     46c:	b580      	push	{r7, lr}
     46e:	b082      	sub	sp, #8
     470:	af00      	add	r7, sp, #0
     472:	6078      	str	r0, [r7, #4]
	ClearAll();
     474:	687b      	ldr	r3, [r7, #4]
     476:	0018      	movs	r0, r3
     478:	4b18      	ldr	r3, [pc, #96]	; (4dc <_ZN16LedHandler_Class3RunEv+0x70>)
     47a:	4798      	blx	r3
	//GreenWave();

	while(1){
		if (nmi.IsButtonPressed())
     47c:	4b18      	ldr	r3, [pc, #96]	; (4e0 <_ZN16LedHandler_Class3RunEv+0x74>)
     47e:	0018      	movs	r0, r3
     480:	4b18      	ldr	r3, [pc, #96]	; (4e4 <_ZN16LedHandler_Class3RunEv+0x78>)
     482:	4798      	blx	r3
     484:	1e03      	subs	r3, r0, #0
     486:	d017      	beq.n	4b8 <_ZN16LedHandler_Class3RunEv+0x4c>
		{
	
			nmi.OnPressed();
     488:	4b15      	ldr	r3, [pc, #84]	; (4e0 <_ZN16LedHandler_Class3RunEv+0x74>)
     48a:	0018      	movs	r0, r3
     48c:	4b16      	ldr	r3, [pc, #88]	; (4e8 <_ZN16LedHandler_Class3RunEv+0x7c>)
     48e:	4798      	blx	r3
	
			if (!changeModeRequest)
     490:	687a      	ldr	r2, [r7, #4]
     492:	23bc      	movs	r3, #188	; 0xbc
     494:	005b      	lsls	r3, r3, #1
     496:	5cd3      	ldrb	r3, [r2, r3]
     498:	b2db      	uxtb	r3, r3
     49a:	2201      	movs	r2, #1
     49c:	4053      	eors	r3, r2
     49e:	b2db      	uxtb	r3, r3
     4a0:	2b00      	cmp	r3, #0
     4a2:	d004      	beq.n	4ae <_ZN16LedHandler_Class3RunEv+0x42>
			{
		
					RunOnMode();
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	0018      	movs	r0, r3
     4a8:	4b10      	ldr	r3, [pc, #64]	; (4ec <_ZN16LedHandler_Class3RunEv+0x80>)
     4aa:	4798      	blx	r3
     4ac:	e7e6      	b.n	47c <_ZN16LedHandler_Class3RunEv+0x10>
					
			} 
			else
			{
				ChangeModus();
     4ae:	687b      	ldr	r3, [r7, #4]
     4b0:	0018      	movs	r0, r3
     4b2:	4b0f      	ldr	r3, [pc, #60]	; (4f0 <_ZN16LedHandler_Class3RunEv+0x84>)
     4b4:	4798      	blx	r3
     4b6:	e7e1      	b.n	47c <_ZN16LedHandler_Class3RunEv+0x10>
		
		} 
		else
		{
		
			if (changeModeRequest){
     4b8:	687a      	ldr	r2, [r7, #4]
     4ba:	23bc      	movs	r3, #188	; 0xbc
     4bc:	005b      	lsls	r3, r3, #1
     4be:	5cd3      	ldrb	r3, [r2, r3]
     4c0:	b2db      	uxtb	r3, r3
     4c2:	2b00      	cmp	r3, #0
     4c4:	d004      	beq.n	4d0 <_ZN16LedHandler_Class3RunEv+0x64>
				
				ChangeModus();
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	0018      	movs	r0, r3
     4ca:	4b09      	ldr	r3, [pc, #36]	; (4f0 <_ZN16LedHandler_Class3RunEv+0x84>)
     4cc:	4798      	blx	r3
     4ce:	e7d5      	b.n	47c <_ZN16LedHandler_Class3RunEv+0x10>
			
			}else{
				
				RunOnMode();
     4d0:	687b      	ldr	r3, [r7, #4]
     4d2:	0018      	movs	r0, r3
     4d4:	4b05      	ldr	r3, [pc, #20]	; (4ec <_ZN16LedHandler_Class3RunEv+0x80>)
     4d6:	4798      	blx	r3
		if (nmi.IsButtonPressed())
     4d8:	e7d0      	b.n	47c <_ZN16LedHandler_Class3RunEv+0x10>
     4da:	46c0      	nop			; (mov r8, r8)
     4dc:	00000f51 	.word	0x00000f51
     4e0:	200007a8 	.word	0x200007a8
     4e4:	00002575 	.word	0x00002575
     4e8:	00002605 	.word	0x00002605
     4ec:	000005b9 	.word	0x000005b9
     4f0:	000004f5 	.word	0x000004f5

000004f4 <_ZN16LedHandler_Class11ChangeModusEv>:
		}
		
	}
}

void	LedHandler_Class::ChangeModus(void){
     4f4:	b580      	push	{r7, lr}
     4f6:	b082      	sub	sp, #8
     4f8:	af00      	add	r7, sp, #0
     4fa:	6078      	str	r0, [r7, #4]
		ledTimer.stop();
     4fc:	4b26      	ldr	r3, [pc, #152]	; (598 <_ZN16LedHandler_Class11ChangeModusEv+0xa4>)
     4fe:	0018      	movs	r0, r3
     500:	4b26      	ldr	r3, [pc, #152]	; (59c <_ZN16LedHandler_Class11ChangeModusEv+0xa8>)
     502:	4798      	blx	r3
		restarted=false;
     504:	687a      	ldr	r2, [r7, #4]
     506:	2376      	movs	r3, #118	; 0x76
     508:	33ff      	adds	r3, #255	; 0xff
     50a:	2100      	movs	r1, #0
     50c:	54d1      	strb	r1, [r2, r3]
		ledTimer.Start_oneShot_task((FUNC_PTR)RestartLeds,POWEROFF_SINGLE_TIME);
     50e:	23fa      	movs	r3, #250	; 0xfa
     510:	009a      	lsls	r2, r3, #2
     512:	4923      	ldr	r1, [pc, #140]	; (5a0 <_ZN16LedHandler_Class11ChangeModusEv+0xac>)
     514:	4b20      	ldr	r3, [pc, #128]	; (598 <_ZN16LedHandler_Class11ChangeModusEv+0xa4>)
     516:	0018      	movs	r0, r3
     518:	4b22      	ldr	r3, [pc, #136]	; (5a4 <_ZN16LedHandler_Class11ChangeModusEv+0xb0>)
     51a:	4798      	blx	r3
		ClearAll();
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	0018      	movs	r0, r3
     520:	4b21      	ldr	r3, [pc, #132]	; (5a8 <_ZN16LedHandler_Class11ChangeModusEv+0xb4>)
     522:	4798      	blx	r3
		nmi.pressedTimerStarted=false;
     524:	4b21      	ldr	r3, [pc, #132]	; (5ac <_ZN16LedHandler_Class11ChangeModusEv+0xb8>)
     526:	2200      	movs	r2, #0
     528:	705a      	strb	r2, [r3, #1]
		changeModeRequest=false;
     52a:	687a      	ldr	r2, [r7, #4]
     52c:	23bc      	movs	r3, #188	; 0xbc
     52e:	005b      	lsls	r3, r3, #1
     530:	2100      	movs	r1, #0
     532:	54d1      	strb	r1, [r2, r3]
		stepTime=COUNTER_TIME;
     534:	687a      	ldr	r2, [r7, #4]
     536:	23c0      	movs	r3, #192	; 0xc0
     538:	005b      	lsls	r3, r3, #1
     53a:	2104      	movs	r1, #4
     53c:	50d1      	str	r1, [r2, r3]
		modus=(modus+1)%NUMBER_STATES;
     53e:	687a      	ldr	r2, [r7, #4]
     540:	2388      	movs	r3, #136	; 0x88
     542:	33ff      	adds	r3, #255	; 0xff
     544:	5cd3      	ldrb	r3, [r2, r3]
     546:	1c5a      	adds	r2, r3, #1
     548:	4b19      	ldr	r3, [pc, #100]	; (5b0 <_ZN16LedHandler_Class11ChangeModusEv+0xbc>)
     54a:	2105      	movs	r1, #5
     54c:	0010      	movs	r0, r2
     54e:	4798      	blx	r3
     550:	000b      	movs	r3, r1
     552:	b2d9      	uxtb	r1, r3
     554:	687a      	ldr	r2, [r7, #4]
     556:	2388      	movs	r3, #136	; 0x88
     558:	33ff      	adds	r3, #255	; 0xff
     55a:	54d1      	strb	r1, [r2, r3]
		if (modus>NUMBER_STATES)
     55c:	687a      	ldr	r2, [r7, #4]
     55e:	2388      	movs	r3, #136	; 0x88
     560:	33ff      	adds	r3, #255	; 0xff
     562:	5cd3      	ldrb	r3, [r2, r3]
     564:	2b05      	cmp	r3, #5
     566:	dd04      	ble.n	572 <_ZN16LedHandler_Class11ChangeModusEv+0x7e>
		{
			modus=0;
     568:	687a      	ldr	r2, [r7, #4]
     56a:	2388      	movs	r3, #136	; 0x88
     56c:	33ff      	adds	r3, #255	; 0xff
     56e:	2100      	movs	r1, #0
     570:	54d1      	strb	r1, [r2, r3]
		}
		
		while(!restarted);
     572:	687a      	ldr	r2, [r7, #4]
     574:	2376      	movs	r3, #118	; 0x76
     576:	33ff      	adds	r3, #255	; 0xff
     578:	5cd3      	ldrb	r3, [r2, r3]
     57a:	b2db      	uxtb	r3, r3
     57c:	2201      	movs	r2, #1
     57e:	4053      	eors	r3, r2
     580:	b2db      	uxtb	r3, r3
     582:	2b00      	cmp	r3, #0
     584:	d000      	beq.n	588 <_ZN16LedHandler_Class11ChangeModusEv+0x94>
     586:	e7f4      	b.n	572 <_ZN16LedHandler_Class11ChangeModusEv+0x7e>
		//ledTimer.remove_task();
		RunOnMode();
     588:	687b      	ldr	r3, [r7, #4]
     58a:	0018      	movs	r0, r3
     58c:	4b09      	ldr	r3, [pc, #36]	; (5b4 <_ZN16LedHandler_Class11ChangeModusEv+0xc0>)
     58e:	4798      	blx	r3
}
     590:	46c0      	nop			; (mov r8, r8)
     592:	46bd      	mov	sp, r7
     594:	b002      	add	sp, #8
     596:	bd80      	pop	{r7, pc}
     598:	200007e8 	.word	0x200007e8
     59c:	0000290d 	.word	0x0000290d
     5a0:	00000215 	.word	0x00000215
     5a4:	000029c9 	.word	0x000029c9
     5a8:	00000f51 	.word	0x00000f51
     5ac:	200007a8 	.word	0x200007a8
     5b0:	00004351 	.word	0x00004351
     5b4:	000005b9 	.word	0x000005b9

000005b8 <_ZN16LedHandler_Class9RunOnModeEv>:
			nmi.pressedTimerStarted=false;
			changeModeRequest=false;
			stepTime=COUNTER_TIME;
}

void	LedHandler_Class::RunOnMode(void){
     5b8:	b580      	push	{r7, lr}
     5ba:	b082      	sub	sp, #8
     5bc:	af00      	add	r7, sp, #0
     5be:	6078      	str	r0, [r7, #4]
	switch (modus)
     5c0:	687a      	ldr	r2, [r7, #4]
     5c2:	2388      	movs	r3, #136	; 0x88
     5c4:	33ff      	adds	r3, #255	; 0xff
     5c6:	5cd3      	ldrb	r3, [r2, r3]
     5c8:	2b04      	cmp	r3, #4
     5ca:	d81d      	bhi.n	608 <_ZN16LedHandler_Class9RunOnModeEv+0x50>
     5cc:	009a      	lsls	r2, r3, #2
     5ce:	4b13      	ldr	r3, [pc, #76]	; (61c <_ZN16LedHandler_Class9RunOnModeEv+0x64>)
     5d0:	18d3      	adds	r3, r2, r3
     5d2:	681b      	ldr	r3, [r3, #0]
     5d4:	469f      	mov	pc, r3
	{
		case 0:
			GreenWave();
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	0018      	movs	r0, r3
     5da:	4b11      	ldr	r3, [pc, #68]	; (620 <_ZN16LedHandler_Class9RunOnModeEv+0x68>)
     5dc:	4798      	blx	r3
		/* Your code here */
		break;
     5de:	e018      	b.n	612 <_ZN16LedHandler_Class9RunOnModeEv+0x5a>
		case 1:
			RedWave();
     5e0:	687b      	ldr	r3, [r7, #4]
     5e2:	0018      	movs	r0, r3
     5e4:	4b0f      	ldr	r3, [pc, #60]	; (624 <_ZN16LedHandler_Class9RunOnModeEv+0x6c>)
     5e6:	4798      	blx	r3
		/* Your code here */
		break;
     5e8:	e013      	b.n	612 <_ZN16LedHandler_Class9RunOnModeEv+0x5a>
		case 2:
			BlueWave();
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	0018      	movs	r0, r3
     5ee:	4b0e      	ldr	r3, [pc, #56]	; (628 <_ZN16LedHandler_Class9RunOnModeEv+0x70>)
     5f0:	4798      	blx	r3
		/* Your code here */
		break;
     5f2:	e00e      	b.n	612 <_ZN16LedHandler_Class9RunOnModeEv+0x5a>
		case 3:
			LilaWave();
     5f4:	687b      	ldr	r3, [r7, #4]
     5f6:	0018      	movs	r0, r3
     5f8:	4b0c      	ldr	r3, [pc, #48]	; (62c <_ZN16LedHandler_Class9RunOnModeEv+0x74>)
     5fa:	4798      	blx	r3
		/* Your code here */
		break;
     5fc:	e009      	b.n	612 <_ZN16LedHandler_Class9RunOnModeEv+0x5a>
		case 4:
			MagentaWave();
     5fe:	687b      	ldr	r3, [r7, #4]
     600:	0018      	movs	r0, r3
     602:	4b0b      	ldr	r3, [pc, #44]	; (630 <_ZN16LedHandler_Class9RunOnModeEv+0x78>)
     604:	4798      	blx	r3
		/* Your code here */
		break;
     606:	e004      	b.n	612 <_ZN16LedHandler_Class9RunOnModeEv+0x5a>
		default:
			GreenWave();
     608:	687b      	ldr	r3, [r7, #4]
     60a:	0018      	movs	r0, r3
     60c:	4b04      	ldr	r3, [pc, #16]	; (620 <_ZN16LedHandler_Class9RunOnModeEv+0x68>)
     60e:	4798      	blx	r3
		/* Your code here */
		break;
     610:	46c0      	nop			; (mov r8, r8)
	}
}
     612:	46c0      	nop			; (mov r8, r8)
     614:	46bd      	mov	sp, r7
     616:	b002      	add	sp, #8
     618:	bd80      	pop	{r7, pc}
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	00004590 	.word	0x00004590
     620:	00000635 	.word	0x00000635
     624:	000006f9 	.word	0x000006f9
     628:	000007bd 	.word	0x000007bd
     62c:	00000881 	.word	0x00000881
     630:	0000096d 	.word	0x0000096d

00000634 <_ZN16LedHandler_Class9GreenWaveEv>:
	}
		
	
}

void	LedHandler_Class::GreenWave(void){
     634:	b580      	push	{r7, lr}
     636:	b082      	sub	sp, #8
     638:	af00      	add	r7, sp, #0
     63a:	6078      	str	r0, [r7, #4]
	request=false;
     63c:	687a      	ldr	r2, [r7, #4]
     63e:	23c2      	movs	r3, #194	; 0xc2
     640:	005b      	lsls	r3, r3, #1
     642:	2100      	movs	r1, #0
     644:	54d1      	strb	r1, [r2, r3]
		do 
		{
			for ( k=0;k<totalPins;k++)
     646:	687a      	ldr	r2, [r7, #4]
     648:	23a0      	movs	r3, #160	; 0xa0
     64a:	009b      	lsls	r3, r3, #2
     64c:	2100      	movs	r1, #0
     64e:	50d1      	str	r1, [r2, r3]
     650:	687a      	ldr	r2, [r7, #4]
     652:	23a0      	movs	r3, #160	; 0xa0
     654:	009b      	lsls	r3, r3, #2
     656:	58d3      	ldr	r3, [r2, r3]
     658:	6879      	ldr	r1, [r7, #4]
     65a:	229d      	movs	r2, #157	; 0x9d
     65c:	0092      	lsls	r2, r2, #2
     65e:	5c8a      	ldrb	r2, [r1, r2]
     660:	4293      	cmp	r3, r2
     662:	da2e      	bge.n	6c2 <_ZN16LedHandler_Class9GreenWaveEv+0x8e>
			{
				if (IsGreen(k))
     664:	6878      	ldr	r0, [r7, #4]
     666:	687a      	ldr	r2, [r7, #4]
     668:	23a0      	movs	r3, #160	; 0xa0
     66a:	009b      	lsls	r3, r3, #2
     66c:	58d3      	ldr	r3, [r2, r3]
     66e:	b2db      	uxtb	r3, r3
     670:	0019      	movs	r1, r3
     672:	4b1e      	ldr	r3, [pc, #120]	; (6ec <_ZN16LedHandler_Class9GreenWaveEv+0xb8>)
     674:	4798      	blx	r3
     676:	1e03      	subs	r3, r0, #0
     678:	d010      	beq.n	69c <_ZN16LedHandler_Class9GreenWaveEv+0x68>
				{
					if (!PowerOnSingleLed(k))
     67a:	687a      	ldr	r2, [r7, #4]
     67c:	23a0      	movs	r3, #160	; 0xa0
     67e:	009b      	lsls	r3, r3, #2
     680:	58d2      	ldr	r2, [r2, r3]
     682:	687b      	ldr	r3, [r7, #4]
     684:	0011      	movs	r1, r2
     686:	0018      	movs	r0, r3
     688:	4b19      	ldr	r3, [pc, #100]	; (6f0 <_ZN16LedHandler_Class9GreenWaveEv+0xbc>)
     68a:	4798      	blx	r3
     68c:	0003      	movs	r3, r0
     68e:	001a      	movs	r2, r3
     690:	2301      	movs	r3, #1
     692:	4053      	eors	r3, r2
     694:	b2db      	uxtb	r3, r3
     696:	2b00      	cmp	r3, #0
     698:	d009      	beq.n	6ae <_ZN16LedHandler_Class9GreenWaveEv+0x7a>
					{
						break;
     69a:	e012      	b.n	6c2 <_ZN16LedHandler_Class9GreenWaveEv+0x8e>
					}
					
				}
				else
				{
					PowerOffPin(k);
     69c:	687a      	ldr	r2, [r7, #4]
     69e:	23a0      	movs	r3, #160	; 0xa0
     6a0:	009b      	lsls	r3, r3, #2
     6a2:	58d2      	ldr	r2, [r2, r3]
     6a4:	687b      	ldr	r3, [r7, #4]
     6a6:	0011      	movs	r1, r2
     6a8:	0018      	movs	r0, r3
     6aa:	4b12      	ldr	r3, [pc, #72]	; (6f4 <_ZN16LedHandler_Class9GreenWaveEv+0xc0>)
     6ac:	4798      	blx	r3
			for ( k=0;k<totalPins;k++)
     6ae:	687a      	ldr	r2, [r7, #4]
     6b0:	23a0      	movs	r3, #160	; 0xa0
     6b2:	009b      	lsls	r3, r3, #2
     6b4:	58d3      	ldr	r3, [r2, r3]
     6b6:	1c59      	adds	r1, r3, #1
     6b8:	687a      	ldr	r2, [r7, #4]
     6ba:	23a0      	movs	r3, #160	; 0xa0
     6bc:	009b      	lsls	r3, r3, #2
     6be:	50d1      	str	r1, [r2, r3]
     6c0:	e7c6      	b.n	650 <_ZN16LedHandler_Class9GreenWaveEv+0x1c>
				}
							
			}
		}while((!changeModeRequest));
     6c2:	687a      	ldr	r2, [r7, #4]
     6c4:	23bc      	movs	r3, #188	; 0xbc
     6c6:	005b      	lsls	r3, r3, #1
     6c8:	5cd3      	ldrb	r3, [r2, r3]
     6ca:	b2db      	uxtb	r3, r3
		do 
     6cc:	2201      	movs	r2, #1
     6ce:	4053      	eors	r3, r2
     6d0:	b2db      	uxtb	r3, r3
     6d2:	2b00      	cmp	r3, #0
     6d4:	d000      	beq.n	6d8 <_ZN16LedHandler_Class9GreenWaveEv+0xa4>
     6d6:	e7b6      	b.n	646 <_ZN16LedHandler_Class9GreenWaveEv+0x12>
	request=false;
     6d8:	687a      	ldr	r2, [r7, #4]
     6da:	23c2      	movs	r3, #194	; 0xc2
     6dc:	005b      	lsls	r3, r3, #1
     6de:	2100      	movs	r1, #0
     6e0:	54d1      	strb	r1, [r2, r3]
	
}
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	46bd      	mov	sp, r7
     6e6:	b002      	add	sp, #8
     6e8:	bd80      	pop	{r7, pc}
     6ea:	46c0      	nop			; (mov r8, r8)
     6ec:	00001b49 	.word	0x00001b49
     6f0:	00000a59 	.word	0x00000a59
     6f4:	00000ee9 	.word	0x00000ee9

000006f8 <_ZN16LedHandler_Class7RedWaveEv>:
void	LedHandler_Class::RedWave(void){
     6f8:	b580      	push	{r7, lr}
     6fa:	b082      	sub	sp, #8
     6fc:	af00      	add	r7, sp, #0
     6fe:	6078      	str	r0, [r7, #4]
	request=false;
     700:	687a      	ldr	r2, [r7, #4]
     702:	23c2      	movs	r3, #194	; 0xc2
     704:	005b      	lsls	r3, r3, #1
     706:	2100      	movs	r1, #0
     708:	54d1      	strb	r1, [r2, r3]
	do
	{
		for ( k=1;k<totalPins;k++)
     70a:	687a      	ldr	r2, [r7, #4]
     70c:	23a0      	movs	r3, #160	; 0xa0
     70e:	009b      	lsls	r3, r3, #2
     710:	2101      	movs	r1, #1
     712:	50d1      	str	r1, [r2, r3]
     714:	687a      	ldr	r2, [r7, #4]
     716:	23a0      	movs	r3, #160	; 0xa0
     718:	009b      	lsls	r3, r3, #2
     71a:	58d3      	ldr	r3, [r2, r3]
     71c:	6879      	ldr	r1, [r7, #4]
     71e:	229d      	movs	r2, #157	; 0x9d
     720:	0092      	lsls	r2, r2, #2
     722:	5c8a      	ldrb	r2, [r1, r2]
     724:	4293      	cmp	r3, r2
     726:	da2e      	bge.n	786 <_ZN16LedHandler_Class7RedWaveEv+0x8e>
		{
			if (IsRed(k))
     728:	6878      	ldr	r0, [r7, #4]
     72a:	687a      	ldr	r2, [r7, #4]
     72c:	23a0      	movs	r3, #160	; 0xa0
     72e:	009b      	lsls	r3, r3, #2
     730:	58d3      	ldr	r3, [r2, r3]
     732:	b2db      	uxtb	r3, r3
     734:	0019      	movs	r1, r3
     736:	4b1e      	ldr	r3, [pc, #120]	; (7b0 <_ZN16LedHandler_Class7RedWaveEv+0xb8>)
     738:	4798      	blx	r3
     73a:	1e03      	subs	r3, r0, #0
     73c:	d010      	beq.n	760 <_ZN16LedHandler_Class7RedWaveEv+0x68>
			{
				if (!PowerOnSingleLed(k))
     73e:	687a      	ldr	r2, [r7, #4]
     740:	23a0      	movs	r3, #160	; 0xa0
     742:	009b      	lsls	r3, r3, #2
     744:	58d2      	ldr	r2, [r2, r3]
     746:	687b      	ldr	r3, [r7, #4]
     748:	0011      	movs	r1, r2
     74a:	0018      	movs	r0, r3
     74c:	4b19      	ldr	r3, [pc, #100]	; (7b4 <_ZN16LedHandler_Class7RedWaveEv+0xbc>)
     74e:	4798      	blx	r3
     750:	0003      	movs	r3, r0
     752:	001a      	movs	r2, r3
     754:	2301      	movs	r3, #1
     756:	4053      	eors	r3, r2
     758:	b2db      	uxtb	r3, r3
     75a:	2b00      	cmp	r3, #0
     75c:	d009      	beq.n	772 <_ZN16LedHandler_Class7RedWaveEv+0x7a>
				{
					break;
     75e:	e012      	b.n	786 <_ZN16LedHandler_Class7RedWaveEv+0x8e>
				}
				
			}
			else
			{
				PowerOffPin(k);
     760:	687a      	ldr	r2, [r7, #4]
     762:	23a0      	movs	r3, #160	; 0xa0
     764:	009b      	lsls	r3, r3, #2
     766:	58d2      	ldr	r2, [r2, r3]
     768:	687b      	ldr	r3, [r7, #4]
     76a:	0011      	movs	r1, r2
     76c:	0018      	movs	r0, r3
     76e:	4b12      	ldr	r3, [pc, #72]	; (7b8 <_ZN16LedHandler_Class7RedWaveEv+0xc0>)
     770:	4798      	blx	r3
		for ( k=1;k<totalPins;k++)
     772:	687a      	ldr	r2, [r7, #4]
     774:	23a0      	movs	r3, #160	; 0xa0
     776:	009b      	lsls	r3, r3, #2
     778:	58d3      	ldr	r3, [r2, r3]
     77a:	1c59      	adds	r1, r3, #1
     77c:	687a      	ldr	r2, [r7, #4]
     77e:	23a0      	movs	r3, #160	; 0xa0
     780:	009b      	lsls	r3, r3, #2
     782:	50d1      	str	r1, [r2, r3]
     784:	e7c6      	b.n	714 <_ZN16LedHandler_Class7RedWaveEv+0x1c>
			}
			
		}
	}while((!changeModeRequest));
     786:	687a      	ldr	r2, [r7, #4]
     788:	23bc      	movs	r3, #188	; 0xbc
     78a:	005b      	lsls	r3, r3, #1
     78c:	5cd3      	ldrb	r3, [r2, r3]
     78e:	b2db      	uxtb	r3, r3
	do
     790:	2201      	movs	r2, #1
     792:	4053      	eors	r3, r2
     794:	b2db      	uxtb	r3, r3
     796:	2b00      	cmp	r3, #0
     798:	d000      	beq.n	79c <_ZN16LedHandler_Class7RedWaveEv+0xa4>
     79a:	e7b6      	b.n	70a <_ZN16LedHandler_Class7RedWaveEv+0x12>
	request=false;
     79c:	687a      	ldr	r2, [r7, #4]
     79e:	23c2      	movs	r3, #194	; 0xc2
     7a0:	005b      	lsls	r3, r3, #1
     7a2:	2100      	movs	r1, #0
     7a4:	54d1      	strb	r1, [r2, r3]
	
}
     7a6:	46c0      	nop			; (mov r8, r8)
     7a8:	46bd      	mov	sp, r7
     7aa:	b002      	add	sp, #8
     7ac:	bd80      	pop	{r7, pc}
     7ae:	46c0      	nop			; (mov r8, r8)
     7b0:	00001b75 	.word	0x00001b75
     7b4:	00000a59 	.word	0x00000a59
     7b8:	00000ee9 	.word	0x00000ee9

000007bc <_ZN16LedHandler_Class8BlueWaveEv>:
void	LedHandler_Class::BlueWave(void){
     7bc:	b580      	push	{r7, lr}
     7be:	b082      	sub	sp, #8
     7c0:	af00      	add	r7, sp, #0
     7c2:	6078      	str	r0, [r7, #4]
	request=false;
     7c4:	687a      	ldr	r2, [r7, #4]
     7c6:	23c2      	movs	r3, #194	; 0xc2
     7c8:	005b      	lsls	r3, r3, #1
     7ca:	2100      	movs	r1, #0
     7cc:	54d1      	strb	r1, [r2, r3]
	do
	{
		for ( k=2;k<totalPins;k++)
     7ce:	687a      	ldr	r2, [r7, #4]
     7d0:	23a0      	movs	r3, #160	; 0xa0
     7d2:	009b      	lsls	r3, r3, #2
     7d4:	2102      	movs	r1, #2
     7d6:	50d1      	str	r1, [r2, r3]
     7d8:	687a      	ldr	r2, [r7, #4]
     7da:	23a0      	movs	r3, #160	; 0xa0
     7dc:	009b      	lsls	r3, r3, #2
     7de:	58d3      	ldr	r3, [r2, r3]
     7e0:	6879      	ldr	r1, [r7, #4]
     7e2:	229d      	movs	r2, #157	; 0x9d
     7e4:	0092      	lsls	r2, r2, #2
     7e6:	5c8a      	ldrb	r2, [r1, r2]
     7e8:	4293      	cmp	r3, r2
     7ea:	da2e      	bge.n	84a <_ZN16LedHandler_Class8BlueWaveEv+0x8e>
		{
			if (IsBlue(k))
     7ec:	6878      	ldr	r0, [r7, #4]
     7ee:	687a      	ldr	r2, [r7, #4]
     7f0:	23a0      	movs	r3, #160	; 0xa0
     7f2:	009b      	lsls	r3, r3, #2
     7f4:	58d3      	ldr	r3, [r2, r3]
     7f6:	b2db      	uxtb	r3, r3
     7f8:	0019      	movs	r1, r3
     7fa:	4b1e      	ldr	r3, [pc, #120]	; (874 <_ZN16LedHandler_Class8BlueWaveEv+0xb8>)
     7fc:	4798      	blx	r3
     7fe:	1e03      	subs	r3, r0, #0
     800:	d010      	beq.n	824 <_ZN16LedHandler_Class8BlueWaveEv+0x68>
			{
				if (!PowerOnSingleLed(k))
     802:	687a      	ldr	r2, [r7, #4]
     804:	23a0      	movs	r3, #160	; 0xa0
     806:	009b      	lsls	r3, r3, #2
     808:	58d2      	ldr	r2, [r2, r3]
     80a:	687b      	ldr	r3, [r7, #4]
     80c:	0011      	movs	r1, r2
     80e:	0018      	movs	r0, r3
     810:	4b19      	ldr	r3, [pc, #100]	; (878 <_ZN16LedHandler_Class8BlueWaveEv+0xbc>)
     812:	4798      	blx	r3
     814:	0003      	movs	r3, r0
     816:	001a      	movs	r2, r3
     818:	2301      	movs	r3, #1
     81a:	4053      	eors	r3, r2
     81c:	b2db      	uxtb	r3, r3
     81e:	2b00      	cmp	r3, #0
     820:	d009      	beq.n	836 <_ZN16LedHandler_Class8BlueWaveEv+0x7a>
				{
					break;
     822:	e012      	b.n	84a <_ZN16LedHandler_Class8BlueWaveEv+0x8e>
				}
							
			}
			else
			{
				PowerOffPin(k);
     824:	687a      	ldr	r2, [r7, #4]
     826:	23a0      	movs	r3, #160	; 0xa0
     828:	009b      	lsls	r3, r3, #2
     82a:	58d2      	ldr	r2, [r2, r3]
     82c:	687b      	ldr	r3, [r7, #4]
     82e:	0011      	movs	r1, r2
     830:	0018      	movs	r0, r3
     832:	4b12      	ldr	r3, [pc, #72]	; (87c <_ZN16LedHandler_Class8BlueWaveEv+0xc0>)
     834:	4798      	blx	r3
		for ( k=2;k<totalPins;k++)
     836:	687a      	ldr	r2, [r7, #4]
     838:	23a0      	movs	r3, #160	; 0xa0
     83a:	009b      	lsls	r3, r3, #2
     83c:	58d3      	ldr	r3, [r2, r3]
     83e:	1c59      	adds	r1, r3, #1
     840:	687a      	ldr	r2, [r7, #4]
     842:	23a0      	movs	r3, #160	; 0xa0
     844:	009b      	lsls	r3, r3, #2
     846:	50d1      	str	r1, [r2, r3]
     848:	e7c6      	b.n	7d8 <_ZN16LedHandler_Class8BlueWaveEv+0x1c>
			}
			
		}
	}while((!changeModeRequest));
     84a:	687a      	ldr	r2, [r7, #4]
     84c:	23bc      	movs	r3, #188	; 0xbc
     84e:	005b      	lsls	r3, r3, #1
     850:	5cd3      	ldrb	r3, [r2, r3]
     852:	b2db      	uxtb	r3, r3
	do
     854:	2201      	movs	r2, #1
     856:	4053      	eors	r3, r2
     858:	b2db      	uxtb	r3, r3
     85a:	2b00      	cmp	r3, #0
     85c:	d000      	beq.n	860 <_ZN16LedHandler_Class8BlueWaveEv+0xa4>
     85e:	e7b6      	b.n	7ce <_ZN16LedHandler_Class8BlueWaveEv+0x12>
	request=false;
     860:	687a      	ldr	r2, [r7, #4]
     862:	23c2      	movs	r3, #194	; 0xc2
     864:	005b      	lsls	r3, r3, #1
     866:	2100      	movs	r1, #0
     868:	54d1      	strb	r1, [r2, r3]
	
}
     86a:	46c0      	nop			; (mov r8, r8)
     86c:	46bd      	mov	sp, r7
     86e:	b002      	add	sp, #8
     870:	bd80      	pop	{r7, pc}
     872:	46c0      	nop			; (mov r8, r8)
     874:	00001ba3 	.word	0x00001ba3
     878:	00000a59 	.word	0x00000a59
     87c:	00000ee9 	.word	0x00000ee9

00000880 <_ZN16LedHandler_Class8LilaWaveEv>:
void	LedHandler_Class::LilaWave(void){
     880:	b580      	push	{r7, lr}
     882:	b082      	sub	sp, #8
     884:	af00      	add	r7, sp, #0
     886:	6078      	str	r0, [r7, #4]
	request=false;
     888:	687a      	ldr	r2, [r7, #4]
     88a:	23c2      	movs	r3, #194	; 0xc2
     88c:	005b      	lsls	r3, r3, #1
     88e:	2100      	movs	r1, #0
     890:	54d1      	strb	r1, [r2, r3]
	onLila=true;
     892:	687a      	ldr	r2, [r7, #4]
     894:	2386      	movs	r3, #134	; 0x86
     896:	33ff      	adds	r3, #255	; 0xff
     898:	2101      	movs	r1, #1
     89a:	54d1      	strb	r1, [r2, r3]
	do
	{
		for ( k=2;k<totalPins;k++)
     89c:	687a      	ldr	r2, [r7, #4]
     89e:	23a0      	movs	r3, #160	; 0xa0
     8a0:	009b      	lsls	r3, r3, #2
     8a2:	2102      	movs	r1, #2
     8a4:	50d1      	str	r1, [r2, r3]
     8a6:	687a      	ldr	r2, [r7, #4]
     8a8:	23a0      	movs	r3, #160	; 0xa0
     8aa:	009b      	lsls	r3, r3, #2
     8ac:	58d3      	ldr	r3, [r2, r3]
     8ae:	6879      	ldr	r1, [r7, #4]
     8b0:	229d      	movs	r2, #157	; 0x9d
     8b2:	0092      	lsls	r2, r2, #2
     8b4:	5c8a      	ldrb	r2, [r1, r2]
     8b6:	4293      	cmp	r3, r2
     8b8:	da38      	bge.n	92c <_ZN16LedHandler_Class8LilaWaveEv+0xac>
		{
			if (IsBlue(k))
     8ba:	6878      	ldr	r0, [r7, #4]
     8bc:	687a      	ldr	r2, [r7, #4]
     8be:	23a0      	movs	r3, #160	; 0xa0
     8c0:	009b      	lsls	r3, r3, #2
     8c2:	58d3      	ldr	r3, [r2, r3]
     8c4:	b2db      	uxtb	r3, r3
     8c6:	0019      	movs	r1, r3
     8c8:	4b25      	ldr	r3, [pc, #148]	; (960 <_ZN16LedHandler_Class8LilaWaveEv+0xe0>)
     8ca:	4798      	blx	r3
     8cc:	1e03      	subs	r3, r0, #0
     8ce:	d019      	beq.n	904 <_ZN16LedHandler_Class8LilaWaveEv+0x84>
			{
				if (!PowerOnSingleLed(k))
     8d0:	687a      	ldr	r2, [r7, #4]
     8d2:	23a0      	movs	r3, #160	; 0xa0
     8d4:	009b      	lsls	r3, r3, #2
     8d6:	58d2      	ldr	r2, [r2, r3]
     8d8:	687b      	ldr	r3, [r7, #4]
     8da:	0011      	movs	r1, r2
     8dc:	0018      	movs	r0, r3
     8de:	4b21      	ldr	r3, [pc, #132]	; (964 <_ZN16LedHandler_Class8LilaWaveEv+0xe4>)
     8e0:	4798      	blx	r3
     8e2:	0003      	movs	r3, r0
     8e4:	001a      	movs	r2, r3
     8e6:	2301      	movs	r3, #1
     8e8:	4053      	eors	r3, r2
     8ea:	b2db      	uxtb	r3, r3
     8ec:	2b00      	cmp	r3, #0
     8ee:	d11c      	bne.n	92a <_ZN16LedHandler_Class8LilaWaveEv+0xaa>
				{
					break;
				}
				k++;
     8f0:	687a      	ldr	r2, [r7, #4]
     8f2:	23a0      	movs	r3, #160	; 0xa0
     8f4:	009b      	lsls	r3, r3, #2
     8f6:	58d3      	ldr	r3, [r2, r3]
     8f8:	1c59      	adds	r1, r3, #1
     8fa:	687a      	ldr	r2, [r7, #4]
     8fc:	23a0      	movs	r3, #160	; 0xa0
     8fe:	009b      	lsls	r3, r3, #2
     900:	50d1      	str	r1, [r2, r3]
     902:	e008      	b.n	916 <_ZN16LedHandler_Class8LilaWaveEv+0x96>
			}
			else
			{
				PowerOffPin(k);
     904:	687a      	ldr	r2, [r7, #4]
     906:	23a0      	movs	r3, #160	; 0xa0
     908:	009b      	lsls	r3, r3, #2
     90a:	58d2      	ldr	r2, [r2, r3]
     90c:	687b      	ldr	r3, [r7, #4]
     90e:	0011      	movs	r1, r2
     910:	0018      	movs	r0, r3
     912:	4b15      	ldr	r3, [pc, #84]	; (968 <_ZN16LedHandler_Class8LilaWaveEv+0xe8>)
     914:	4798      	blx	r3
		for ( k=2;k<totalPins;k++)
     916:	687a      	ldr	r2, [r7, #4]
     918:	23a0      	movs	r3, #160	; 0xa0
     91a:	009b      	lsls	r3, r3, #2
     91c:	58d3      	ldr	r3, [r2, r3]
     91e:	1c59      	adds	r1, r3, #1
     920:	687a      	ldr	r2, [r7, #4]
     922:	23a0      	movs	r3, #160	; 0xa0
     924:	009b      	lsls	r3, r3, #2
     926:	50d1      	str	r1, [r2, r3]
     928:	e7bd      	b.n	8a6 <_ZN16LedHandler_Class8LilaWaveEv+0x26>
					break;
     92a:	46c0      	nop			; (mov r8, r8)
			}
		
			
		}
	}while((!changeModeRequest));
     92c:	687a      	ldr	r2, [r7, #4]
     92e:	23bc      	movs	r3, #188	; 0xbc
     930:	005b      	lsls	r3, r3, #1
     932:	5cd3      	ldrb	r3, [r2, r3]
     934:	b2db      	uxtb	r3, r3
	do
     936:	2201      	movs	r2, #1
     938:	4053      	eors	r3, r2
     93a:	b2db      	uxtb	r3, r3
     93c:	2b00      	cmp	r3, #0
     93e:	d000      	beq.n	942 <_ZN16LedHandler_Class8LilaWaveEv+0xc2>
     940:	e7ac      	b.n	89c <_ZN16LedHandler_Class8LilaWaveEv+0x1c>
	request=false;
     942:	687a      	ldr	r2, [r7, #4]
     944:	23c2      	movs	r3, #194	; 0xc2
     946:	005b      	lsls	r3, r3, #1
     948:	2100      	movs	r1, #0
     94a:	54d1      	strb	r1, [r2, r3]
	onLila=false;
     94c:	687a      	ldr	r2, [r7, #4]
     94e:	2386      	movs	r3, #134	; 0x86
     950:	33ff      	adds	r3, #255	; 0xff
     952:	2100      	movs	r1, #0
     954:	54d1      	strb	r1, [r2, r3]
	
}
     956:	46c0      	nop			; (mov r8, r8)
     958:	46bd      	mov	sp, r7
     95a:	b002      	add	sp, #8
     95c:	bd80      	pop	{r7, pc}
     95e:	46c0      	nop			; (mov r8, r8)
     960:	00001ba3 	.word	0x00001ba3
     964:	00000a59 	.word	0x00000a59
     968:	00000ee9 	.word	0x00000ee9

0000096c <_ZN16LedHandler_Class11MagentaWaveEv>:
void	LedHandler_Class::MagentaWave(void){
     96c:	b580      	push	{r7, lr}
     96e:	b082      	sub	sp, #8
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
	request=false;
     974:	687a      	ldr	r2, [r7, #4]
     976:	23c2      	movs	r3, #194	; 0xc2
     978:	005b      	lsls	r3, r3, #1
     97a:	2100      	movs	r1, #0
     97c:	54d1      	strb	r1, [r2, r3]
	onMagenta=true;
     97e:	687a      	ldr	r2, [r7, #4]
     980:	23c3      	movs	r3, #195	; 0xc3
     982:	005b      	lsls	r3, r3, #1
     984:	2101      	movs	r1, #1
     986:	54d1      	strb	r1, [r2, r3]
	do
	{
		for ( k=3;k<totalPins;k++)
     988:	687a      	ldr	r2, [r7, #4]
     98a:	23a0      	movs	r3, #160	; 0xa0
     98c:	009b      	lsls	r3, r3, #2
     98e:	2103      	movs	r1, #3
     990:	50d1      	str	r1, [r2, r3]
     992:	687a      	ldr	r2, [r7, #4]
     994:	23a0      	movs	r3, #160	; 0xa0
     996:	009b      	lsls	r3, r3, #2
     998:	58d3      	ldr	r3, [r2, r3]
     99a:	6879      	ldr	r1, [r7, #4]
     99c:	229d      	movs	r2, #157	; 0x9d
     99e:	0092      	lsls	r2, r2, #2
     9a0:	5c8a      	ldrb	r2, [r1, r2]
     9a2:	4293      	cmp	r3, r2
     9a4:	da38      	bge.n	a18 <_ZN16LedHandler_Class11MagentaWaveEv+0xac>
		{
			if (IsGreen(k))
     9a6:	6878      	ldr	r0, [r7, #4]
     9a8:	687a      	ldr	r2, [r7, #4]
     9aa:	23a0      	movs	r3, #160	; 0xa0
     9ac:	009b      	lsls	r3, r3, #2
     9ae:	58d3      	ldr	r3, [r2, r3]
     9b0:	b2db      	uxtb	r3, r3
     9b2:	0019      	movs	r1, r3
     9b4:	4b25      	ldr	r3, [pc, #148]	; (a4c <_ZN16LedHandler_Class11MagentaWaveEv+0xe0>)
     9b6:	4798      	blx	r3
     9b8:	1e03      	subs	r3, r0, #0
     9ba:	d019      	beq.n	9f0 <_ZN16LedHandler_Class11MagentaWaveEv+0x84>
			{
				if (!PowerOnSingleLed(k))
     9bc:	687a      	ldr	r2, [r7, #4]
     9be:	23a0      	movs	r3, #160	; 0xa0
     9c0:	009b      	lsls	r3, r3, #2
     9c2:	58d2      	ldr	r2, [r2, r3]
     9c4:	687b      	ldr	r3, [r7, #4]
     9c6:	0011      	movs	r1, r2
     9c8:	0018      	movs	r0, r3
     9ca:	4b21      	ldr	r3, [pc, #132]	; (a50 <_ZN16LedHandler_Class11MagentaWaveEv+0xe4>)
     9cc:	4798      	blx	r3
     9ce:	0003      	movs	r3, r0
     9d0:	001a      	movs	r2, r3
     9d2:	2301      	movs	r3, #1
     9d4:	4053      	eors	r3, r2
     9d6:	b2db      	uxtb	r3, r3
     9d8:	2b00      	cmp	r3, #0
     9da:	d11c      	bne.n	a16 <_ZN16LedHandler_Class11MagentaWaveEv+0xaa>
				{
					break;
				}
				k++;
     9dc:	687a      	ldr	r2, [r7, #4]
     9de:	23a0      	movs	r3, #160	; 0xa0
     9e0:	009b      	lsls	r3, r3, #2
     9e2:	58d3      	ldr	r3, [r2, r3]
     9e4:	1c59      	adds	r1, r3, #1
     9e6:	687a      	ldr	r2, [r7, #4]
     9e8:	23a0      	movs	r3, #160	; 0xa0
     9ea:	009b      	lsls	r3, r3, #2
     9ec:	50d1      	str	r1, [r2, r3]
     9ee:	e008      	b.n	a02 <_ZN16LedHandler_Class11MagentaWaveEv+0x96>
			}
			else
			{
				PowerOffPin(k);
     9f0:	687a      	ldr	r2, [r7, #4]
     9f2:	23a0      	movs	r3, #160	; 0xa0
     9f4:	009b      	lsls	r3, r3, #2
     9f6:	58d2      	ldr	r2, [r2, r3]
     9f8:	687b      	ldr	r3, [r7, #4]
     9fa:	0011      	movs	r1, r2
     9fc:	0018      	movs	r0, r3
     9fe:	4b15      	ldr	r3, [pc, #84]	; (a54 <_ZN16LedHandler_Class11MagentaWaveEv+0xe8>)
     a00:	4798      	blx	r3
		for ( k=3;k<totalPins;k++)
     a02:	687a      	ldr	r2, [r7, #4]
     a04:	23a0      	movs	r3, #160	; 0xa0
     a06:	009b      	lsls	r3, r3, #2
     a08:	58d3      	ldr	r3, [r2, r3]
     a0a:	1c59      	adds	r1, r3, #1
     a0c:	687a      	ldr	r2, [r7, #4]
     a0e:	23a0      	movs	r3, #160	; 0xa0
     a10:	009b      	lsls	r3, r3, #2
     a12:	50d1      	str	r1, [r2, r3]
     a14:	e7bd      	b.n	992 <_ZN16LedHandler_Class11MagentaWaveEv+0x26>
					break;
     a16:	46c0      	nop			; (mov r8, r8)
			}
			
			
		}
	}while((!changeModeRequest));
     a18:	687a      	ldr	r2, [r7, #4]
     a1a:	23bc      	movs	r3, #188	; 0xbc
     a1c:	005b      	lsls	r3, r3, #1
     a1e:	5cd3      	ldrb	r3, [r2, r3]
     a20:	b2db      	uxtb	r3, r3
	do
     a22:	2201      	movs	r2, #1
     a24:	4053      	eors	r3, r2
     a26:	b2db      	uxtb	r3, r3
     a28:	2b00      	cmp	r3, #0
     a2a:	d000      	beq.n	a2e <_ZN16LedHandler_Class11MagentaWaveEv+0xc2>
     a2c:	e7ac      	b.n	988 <_ZN16LedHandler_Class11MagentaWaveEv+0x1c>
	request=false;
     a2e:	687a      	ldr	r2, [r7, #4]
     a30:	23c2      	movs	r3, #194	; 0xc2
     a32:	005b      	lsls	r3, r3, #1
     a34:	2100      	movs	r1, #0
     a36:	54d1      	strb	r1, [r2, r3]
	onMagenta=false;
     a38:	687a      	ldr	r2, [r7, #4]
     a3a:	23c3      	movs	r3, #195	; 0xc3
     a3c:	005b      	lsls	r3, r3, #1
     a3e:	2100      	movs	r1, #0
     a40:	54d1      	strb	r1, [r2, r3]
	
}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	46bd      	mov	sp, r7
     a46:	b002      	add	sp, #8
     a48:	bd80      	pop	{r7, pc}
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	00001b49 	.word	0x00001b49
     a50:	00000a59 	.word	0x00000a59
     a54:	00000ee9 	.word	0x00000ee9

00000a58 <_ZN16LedHandler_Class16PowerOnSingleLedEi>:
bool	LedHandler_Class::PowerOnSingleLed(int pn){
     a58:	b590      	push	{r4, r7, lr}
     a5a:	b083      	sub	sp, #12
     a5c:	af00      	add	r7, sp, #0
     a5e:	6078      	str	r0, [r7, #4]
     a60:	6039      	str	r1, [r7, #0]

	if (onLila){
     a62:	687a      	ldr	r2, [r7, #4]
     a64:	2386      	movs	r3, #134	; 0x86
     a66:	33ff      	adds	r3, #255	; 0xff
     a68:	5cd3      	ldrb	r3, [r2, r3]
     a6a:	2b00      	cmp	r3, #0
     a6c:	d100      	bne.n	a70 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x18>
     a6e:	e09c      	b.n	baa <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x152>
		StartBlinker(1);
     a70:	687b      	ldr	r3, [r7, #4]
     a72:	2101      	movs	r1, #1
     a74:	0018      	movs	r0, r3
     a76:	4bde      	ldr	r3, [pc, #888]	; (df0 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x398>)
     a78:	4798      	blx	r3
		PowerOnPin(pn);
     a7a:	683a      	ldr	r2, [r7, #0]
     a7c:	687b      	ldr	r3, [r7, #4]
     a7e:	0011      	movs	r1, r2
     a80:	0018      	movs	r0, r3
     a82:	4bdc      	ldr	r3, [pc, #880]	; (df4 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x39c>)
     a84:	4798      	blx	r3
		if (pn<kTOTALLEFTPINS)
     a86:	683b      	ldr	r3, [r7, #0]
     a88:	2b1c      	cmp	r3, #28
     a8a:	dc1e      	bgt.n	aca <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x72>
		{
			SetPin(pins.allPorts[pn+2],pins.allPins[pn+2]);
     a8c:	6878      	ldr	r0, [r7, #4]
     a8e:	683b      	ldr	r3, [r7, #0]
     a90:	1c9a      	adds	r2, r3, #2
     a92:	6879      	ldr	r1, [r7, #4]
     a94:	23c6      	movs	r3, #198	; 0xc6
     a96:	005b      	lsls	r3, r3, #1
     a98:	188a      	adds	r2, r1, r2
     a9a:	18d3      	adds	r3, r2, r3
     a9c:	781c      	ldrb	r4, [r3, #0]
     a9e:	683b      	ldr	r3, [r7, #0]
     aa0:	1c9a      	adds	r2, r3, #2
     aa2:	6879      	ldr	r1, [r7, #4]
     aa4:	23e3      	movs	r3, #227	; 0xe3
     aa6:	005b      	lsls	r3, r3, #1
     aa8:	188a      	adds	r2, r1, r2
     aaa:	18d3      	adds	r3, r2, r3
     aac:	781b      	ldrb	r3, [r3, #0]
     aae:	001a      	movs	r2, r3
     ab0:	0021      	movs	r1, r4
     ab2:	4bd1      	ldr	r3, [pc, #836]	; (df8 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3a0>)
     ab4:	4798      	blx	r3
			state.status[pn+2]=1;
     ab6:	683b      	ldr	r3, [r7, #0]
     ab8:	1c9a      	adds	r2, r3, #2
     aba:	6879      	ldr	r1, [r7, #4]
     abc:	2380      	movs	r3, #128	; 0x80
     abe:	009b      	lsls	r3, r3, #2
     ac0:	188a      	adds	r2, r1, r2
     ac2:	18d3      	adds	r3, r2, r3
     ac4:	2201      	movs	r2, #1
     ac6:	701a      	strb	r2, [r3, #0]
     ac8:	e01d      	b.n	b06 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0xae>
		}
		else
		{
			SetPin(pins.allPorts[pn-2],pins.allPins[pn-2]);
     aca:	6878      	ldr	r0, [r7, #4]
     acc:	683b      	ldr	r3, [r7, #0]
     ace:	1e9a      	subs	r2, r3, #2
     ad0:	6879      	ldr	r1, [r7, #4]
     ad2:	23c6      	movs	r3, #198	; 0xc6
     ad4:	005b      	lsls	r3, r3, #1
     ad6:	188a      	adds	r2, r1, r2
     ad8:	18d3      	adds	r3, r2, r3
     ada:	781c      	ldrb	r4, [r3, #0]
     adc:	683b      	ldr	r3, [r7, #0]
     ade:	1e9a      	subs	r2, r3, #2
     ae0:	6879      	ldr	r1, [r7, #4]
     ae2:	23e3      	movs	r3, #227	; 0xe3
     ae4:	005b      	lsls	r3, r3, #1
     ae6:	188a      	adds	r2, r1, r2
     ae8:	18d3      	adds	r3, r2, r3
     aea:	781b      	ldrb	r3, [r3, #0]
     aec:	001a      	movs	r2, r3
     aee:	0021      	movs	r1, r4
     af0:	4bc1      	ldr	r3, [pc, #772]	; (df8 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3a0>)
     af2:	4798      	blx	r3
			state.status[pn-2]=1;
     af4:	683b      	ldr	r3, [r7, #0]
     af6:	1e9a      	subs	r2, r3, #2
     af8:	6879      	ldr	r1, [r7, #4]
     afa:	2380      	movs	r3, #128	; 0x80
     afc:	009b      	lsls	r3, r3, #2
     afe:	188a      	adds	r2, r1, r2
     b00:	18d3      	adds	r3, r2, r3
     b02:	2201      	movs	r2, #1
     b04:	701a      	strb	r2, [r3, #0]
		}
		
		while((!blinkOut)){
     b06:	687a      	ldr	r2, [r7, #4]
     b08:	237c      	movs	r3, #124	; 0x7c
     b0a:	33ff      	adds	r3, #255	; 0xff
     b0c:	5cd3      	ldrb	r3, [r2, r3]
     b0e:	b2db      	uxtb	r3, r3
     b10:	2201      	movs	r2, #1
     b12:	4053      	eors	r3, r2
     b14:	b2db      	uxtb	r3, r3
     b16:	2b00      	cmp	r3, #0
     b18:	d000      	beq.n	b1c <_ZN16LedHandler_Class16PowerOnSingleLedEi+0xc4>
     b1a:	e7f4      	b.n	b06 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0xae>
			//Dimmen(0);
		}
		PowerOffPin(pn);
     b1c:	683a      	ldr	r2, [r7, #0]
     b1e:	687b      	ldr	r3, [r7, #4]
     b20:	0011      	movs	r1, r2
     b22:	0018      	movs	r0, r3
     b24:	4bb5      	ldr	r3, [pc, #724]	; (dfc <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3a4>)
     b26:	4798      	blx	r3
		if (pn<kTOTALLEFTPINS)
     b28:	683b      	ldr	r3, [r7, #0]
     b2a:	2b1c      	cmp	r3, #28
     b2c:	dc1e      	bgt.n	b6c <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x114>
		{
			ClearPin(pins.allPorts[pn+2],pins.allPins[pn+2]);
     b2e:	6878      	ldr	r0, [r7, #4]
     b30:	683b      	ldr	r3, [r7, #0]
     b32:	1c9a      	adds	r2, r3, #2
     b34:	6879      	ldr	r1, [r7, #4]
     b36:	23c6      	movs	r3, #198	; 0xc6
     b38:	005b      	lsls	r3, r3, #1
     b3a:	188a      	adds	r2, r1, r2
     b3c:	18d3      	adds	r3, r2, r3
     b3e:	781c      	ldrb	r4, [r3, #0]
     b40:	683b      	ldr	r3, [r7, #0]
     b42:	1c9a      	adds	r2, r3, #2
     b44:	6879      	ldr	r1, [r7, #4]
     b46:	23e3      	movs	r3, #227	; 0xe3
     b48:	005b      	lsls	r3, r3, #1
     b4a:	188a      	adds	r2, r1, r2
     b4c:	18d3      	adds	r3, r2, r3
     b4e:	781b      	ldrb	r3, [r3, #0]
     b50:	001a      	movs	r2, r3
     b52:	0021      	movs	r1, r4
     b54:	4baa      	ldr	r3, [pc, #680]	; (e00 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3a8>)
     b56:	4798      	blx	r3
			state.status[pn+2]=0;
     b58:	683b      	ldr	r3, [r7, #0]
     b5a:	1c9a      	adds	r2, r3, #2
     b5c:	6879      	ldr	r1, [r7, #4]
     b5e:	2380      	movs	r3, #128	; 0x80
     b60:	009b      	lsls	r3, r3, #2
     b62:	188a      	adds	r2, r1, r2
     b64:	18d3      	adds	r3, r2, r3
     b66:	2200      	movs	r2, #0
     b68:	701a      	strb	r2, [r3, #0]
     b6a:	e0f3      	b.n	d54 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x2fc>
		}
		else
		{
			ClearPin(pins.allPorts[pn-2],pins.allPins[pn-2]);
     b6c:	6878      	ldr	r0, [r7, #4]
     b6e:	683b      	ldr	r3, [r7, #0]
     b70:	1e9a      	subs	r2, r3, #2
     b72:	6879      	ldr	r1, [r7, #4]
     b74:	23c6      	movs	r3, #198	; 0xc6
     b76:	005b      	lsls	r3, r3, #1
     b78:	188a      	adds	r2, r1, r2
     b7a:	18d3      	adds	r3, r2, r3
     b7c:	781c      	ldrb	r4, [r3, #0]
     b7e:	683b      	ldr	r3, [r7, #0]
     b80:	1e9a      	subs	r2, r3, #2
     b82:	6879      	ldr	r1, [r7, #4]
     b84:	23e3      	movs	r3, #227	; 0xe3
     b86:	005b      	lsls	r3, r3, #1
     b88:	188a      	adds	r2, r1, r2
     b8a:	18d3      	adds	r3, r2, r3
     b8c:	781b      	ldrb	r3, [r3, #0]
     b8e:	001a      	movs	r2, r3
     b90:	0021      	movs	r1, r4
     b92:	4b9b      	ldr	r3, [pc, #620]	; (e00 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3a8>)
     b94:	4798      	blx	r3
			state.status[pn-2]=0;
     b96:	683b      	ldr	r3, [r7, #0]
     b98:	1e9a      	subs	r2, r3, #2
     b9a:	6879      	ldr	r1, [r7, #4]
     b9c:	2380      	movs	r3, #128	; 0x80
     b9e:	009b      	lsls	r3, r3, #2
     ba0:	188a      	adds	r2, r1, r2
     ba2:	18d3      	adds	r3, r2, r3
     ba4:	2200      	movs	r2, #0
     ba6:	701a      	strb	r2, [r3, #0]
     ba8:	e0d4      	b.n	d54 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x2fc>
		}
						
	}else{
		if (onMagenta)
     baa:	687a      	ldr	r2, [r7, #4]
     bac:	23c3      	movs	r3, #195	; 0xc3
     bae:	005b      	lsls	r3, r3, #1
     bb0:	5cd3      	ldrb	r3, [r2, r3]
     bb2:	2b00      	cmp	r3, #0
     bb4:	d100      	bne.n	bb8 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x160>
     bb6:	e0ac      	b.n	d12 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x2ba>
		{
				StartBlinker(1);
     bb8:	687b      	ldr	r3, [r7, #4]
     bba:	2101      	movs	r1, #1
     bbc:	0018      	movs	r0, r3
     bbe:	4b8c      	ldr	r3, [pc, #560]	; (df0 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x398>)
     bc0:	4798      	blx	r3
				PowerOnPin(pn);
     bc2:	683a      	ldr	r2, [r7, #0]
     bc4:	687b      	ldr	r3, [r7, #4]
     bc6:	0011      	movs	r1, r2
     bc8:	0018      	movs	r0, r3
     bca:	4b8a      	ldr	r3, [pc, #552]	; (df4 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x39c>)
     bcc:	4798      	blx	r3
				if (pn<kTOTALLEFTPINS)
     bce:	683b      	ldr	r3, [r7, #0]
     bd0:	2b1c      	cmp	r3, #28
     bd2:	dc1e      	bgt.n	c12 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x1ba>
				{
						SetPin(pins.allPorts[pn-1],pins.allPins[pn-1]);
     bd4:	6878      	ldr	r0, [r7, #4]
     bd6:	683b      	ldr	r3, [r7, #0]
     bd8:	1e5a      	subs	r2, r3, #1
     bda:	6879      	ldr	r1, [r7, #4]
     bdc:	23c6      	movs	r3, #198	; 0xc6
     bde:	005b      	lsls	r3, r3, #1
     be0:	188a      	adds	r2, r1, r2
     be2:	18d3      	adds	r3, r2, r3
     be4:	781c      	ldrb	r4, [r3, #0]
     be6:	683b      	ldr	r3, [r7, #0]
     be8:	1e5a      	subs	r2, r3, #1
     bea:	6879      	ldr	r1, [r7, #4]
     bec:	23e3      	movs	r3, #227	; 0xe3
     bee:	005b      	lsls	r3, r3, #1
     bf0:	188a      	adds	r2, r1, r2
     bf2:	18d3      	adds	r3, r2, r3
     bf4:	781b      	ldrb	r3, [r3, #0]
     bf6:	001a      	movs	r2, r3
     bf8:	0021      	movs	r1, r4
     bfa:	4b7f      	ldr	r3, [pc, #508]	; (df8 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3a0>)
     bfc:	4798      	blx	r3
						state.status[pn-1]=1;
     bfe:	683b      	ldr	r3, [r7, #0]
     c00:	1e5a      	subs	r2, r3, #1
     c02:	6879      	ldr	r1, [r7, #4]
     c04:	2380      	movs	r3, #128	; 0x80
     c06:	009b      	lsls	r3, r3, #2
     c08:	188a      	adds	r2, r1, r2
     c0a:	18d3      	adds	r3, r2, r3
     c0c:	2201      	movs	r2, #1
     c0e:	701a      	strb	r2, [r3, #0]
     c10:	e025      	b.n	c5e <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x206>
				} 
				else
				{
					if (pn+1<totalPins)
     c12:	683b      	ldr	r3, [r7, #0]
     c14:	3301      	adds	r3, #1
     c16:	6879      	ldr	r1, [r7, #4]
     c18:	229d      	movs	r2, #157	; 0x9d
     c1a:	0092      	lsls	r2, r2, #2
     c1c:	5c8a      	ldrb	r2, [r1, r2]
     c1e:	4293      	cmp	r3, r2
     c20:	da1d      	bge.n	c5e <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x206>
					{
						SetPin(pins.allPorts[pn+1],pins.allPins[pn+1]);
     c22:	6878      	ldr	r0, [r7, #4]
     c24:	683b      	ldr	r3, [r7, #0]
     c26:	1c5a      	adds	r2, r3, #1
     c28:	6879      	ldr	r1, [r7, #4]
     c2a:	23c6      	movs	r3, #198	; 0xc6
     c2c:	005b      	lsls	r3, r3, #1
     c2e:	188a      	adds	r2, r1, r2
     c30:	18d3      	adds	r3, r2, r3
     c32:	781c      	ldrb	r4, [r3, #0]
     c34:	683b      	ldr	r3, [r7, #0]
     c36:	1c5a      	adds	r2, r3, #1
     c38:	6879      	ldr	r1, [r7, #4]
     c3a:	23e3      	movs	r3, #227	; 0xe3
     c3c:	005b      	lsls	r3, r3, #1
     c3e:	188a      	adds	r2, r1, r2
     c40:	18d3      	adds	r3, r2, r3
     c42:	781b      	ldrb	r3, [r3, #0]
     c44:	001a      	movs	r2, r3
     c46:	0021      	movs	r1, r4
     c48:	4b6b      	ldr	r3, [pc, #428]	; (df8 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3a0>)
     c4a:	4798      	blx	r3
						state.status[pn+1]=1;
     c4c:	683b      	ldr	r3, [r7, #0]
     c4e:	1c5a      	adds	r2, r3, #1
     c50:	6879      	ldr	r1, [r7, #4]
     c52:	2380      	movs	r3, #128	; 0x80
     c54:	009b      	lsls	r3, r3, #2
     c56:	188a      	adds	r2, r1, r2
     c58:	18d3      	adds	r3, r2, r3
     c5a:	2201      	movs	r2, #1
     c5c:	701a      	strb	r2, [r3, #0]
					}
					
				}
				while((!blinkOut)){
     c5e:	687a      	ldr	r2, [r7, #4]
     c60:	237c      	movs	r3, #124	; 0x7c
     c62:	33ff      	adds	r3, #255	; 0xff
     c64:	5cd3      	ldrb	r3, [r2, r3]
     c66:	b2db      	uxtb	r3, r3
     c68:	2201      	movs	r2, #1
     c6a:	4053      	eors	r3, r2
     c6c:	b2db      	uxtb	r3, r3
     c6e:	2b00      	cmp	r3, #0
     c70:	d000      	beq.n	c74 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x21c>
     c72:	e7f4      	b.n	c5e <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x206>
					//Dimmen(0);
				}
				PowerOffPin(pn);
     c74:	683a      	ldr	r2, [r7, #0]
     c76:	687b      	ldr	r3, [r7, #4]
     c78:	0011      	movs	r1, r2
     c7a:	0018      	movs	r0, r3
     c7c:	4b5f      	ldr	r3, [pc, #380]	; (dfc <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3a4>)
     c7e:	4798      	blx	r3
				if (pn<kTOTALLEFTPINS)
     c80:	683b      	ldr	r3, [r7, #0]
     c82:	2b1c      	cmp	r3, #28
     c84:	dc1e      	bgt.n	cc4 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x26c>
				{
					ClearPin(pins.allPorts[pn-1],pins.allPins[pn-1]);
     c86:	6878      	ldr	r0, [r7, #4]
     c88:	683b      	ldr	r3, [r7, #0]
     c8a:	1e5a      	subs	r2, r3, #1
     c8c:	6879      	ldr	r1, [r7, #4]
     c8e:	23c6      	movs	r3, #198	; 0xc6
     c90:	005b      	lsls	r3, r3, #1
     c92:	188a      	adds	r2, r1, r2
     c94:	18d3      	adds	r3, r2, r3
     c96:	781c      	ldrb	r4, [r3, #0]
     c98:	683b      	ldr	r3, [r7, #0]
     c9a:	1e5a      	subs	r2, r3, #1
     c9c:	6879      	ldr	r1, [r7, #4]
     c9e:	23e3      	movs	r3, #227	; 0xe3
     ca0:	005b      	lsls	r3, r3, #1
     ca2:	188a      	adds	r2, r1, r2
     ca4:	18d3      	adds	r3, r2, r3
     ca6:	781b      	ldrb	r3, [r3, #0]
     ca8:	001a      	movs	r2, r3
     caa:	0021      	movs	r1, r4
     cac:	4b54      	ldr	r3, [pc, #336]	; (e00 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3a8>)
     cae:	4798      	blx	r3
					state.status[pn-1]=0;
     cb0:	683b      	ldr	r3, [r7, #0]
     cb2:	1e5a      	subs	r2, r3, #1
     cb4:	6879      	ldr	r1, [r7, #4]
     cb6:	2380      	movs	r3, #128	; 0x80
     cb8:	009b      	lsls	r3, r3, #2
     cba:	188a      	adds	r2, r1, r2
     cbc:	18d3      	adds	r3, r2, r3
     cbe:	2200      	movs	r2, #0
     cc0:	701a      	strb	r2, [r3, #0]
     cc2:	e047      	b.n	d54 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x2fc>
				}
				else
				{
					if (pn+1<totalPins)
     cc4:	683b      	ldr	r3, [r7, #0]
     cc6:	3301      	adds	r3, #1
     cc8:	6879      	ldr	r1, [r7, #4]
     cca:	229d      	movs	r2, #157	; 0x9d
     ccc:	0092      	lsls	r2, r2, #2
     cce:	5c8a      	ldrb	r2, [r1, r2]
     cd0:	4293      	cmp	r3, r2
     cd2:	da3f      	bge.n	d54 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x2fc>
					{
						ClearPin(pins.allPorts[pn+1],pins.allPins[pn+1]);
     cd4:	6878      	ldr	r0, [r7, #4]
     cd6:	683b      	ldr	r3, [r7, #0]
     cd8:	1c5a      	adds	r2, r3, #1
     cda:	6879      	ldr	r1, [r7, #4]
     cdc:	23c6      	movs	r3, #198	; 0xc6
     cde:	005b      	lsls	r3, r3, #1
     ce0:	188a      	adds	r2, r1, r2
     ce2:	18d3      	adds	r3, r2, r3
     ce4:	781c      	ldrb	r4, [r3, #0]
     ce6:	683b      	ldr	r3, [r7, #0]
     ce8:	1c5a      	adds	r2, r3, #1
     cea:	6879      	ldr	r1, [r7, #4]
     cec:	23e3      	movs	r3, #227	; 0xe3
     cee:	005b      	lsls	r3, r3, #1
     cf0:	188a      	adds	r2, r1, r2
     cf2:	18d3      	adds	r3, r2, r3
     cf4:	781b      	ldrb	r3, [r3, #0]
     cf6:	001a      	movs	r2, r3
     cf8:	0021      	movs	r1, r4
     cfa:	4b41      	ldr	r3, [pc, #260]	; (e00 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3a8>)
     cfc:	4798      	blx	r3
						state.status[pn+1]=0;
     cfe:	683b      	ldr	r3, [r7, #0]
     d00:	1c5a      	adds	r2, r3, #1
     d02:	6879      	ldr	r1, [r7, #4]
     d04:	2380      	movs	r3, #128	; 0x80
     d06:	009b      	lsls	r3, r3, #2
     d08:	188a      	adds	r2, r1, r2
     d0a:	18d3      	adds	r3, r2, r3
     d0c:	2200      	movs	r2, #0
     d0e:	701a      	strb	r2, [r3, #0]
     d10:	e020      	b.n	d54 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x2fc>
				}
		
		} 
		else
		{
			StartBlinker(0);
     d12:	687b      	ldr	r3, [r7, #4]
     d14:	2100      	movs	r1, #0
     d16:	0018      	movs	r0, r3
     d18:	4b35      	ldr	r3, [pc, #212]	; (df0 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x398>)
     d1a:	4798      	blx	r3
			PowerOnPin(pn);
     d1c:	683a      	ldr	r2, [r7, #0]
     d1e:	687b      	ldr	r3, [r7, #4]
     d20:	0011      	movs	r1, r2
     d22:	0018      	movs	r0, r3
     d24:	4b33      	ldr	r3, [pc, #204]	; (df4 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x39c>)
     d26:	4798      	blx	r3
			while((!blinkOut)){
     d28:	687a      	ldr	r2, [r7, #4]
     d2a:	237c      	movs	r3, #124	; 0x7c
     d2c:	33ff      	adds	r3, #255	; 0xff
     d2e:	5cd3      	ldrb	r3, [r2, r3]
     d30:	b2db      	uxtb	r3, r3
     d32:	2201      	movs	r2, #1
     d34:	4053      	eors	r3, r2
     d36:	b2db      	uxtb	r3, r3
     d38:	2b00      	cmp	r3, #0
     d3a:	d005      	beq.n	d48 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x2f0>
				Dimmen(0);
     d3c:	687b      	ldr	r3, [r7, #4]
     d3e:	2100      	movs	r1, #0
     d40:	0018      	movs	r0, r3
     d42:	4b30      	ldr	r3, [pc, #192]	; (e04 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3ac>)
     d44:	4798      	blx	r3
			while((!blinkOut)){
     d46:	e7ef      	b.n	d28 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x2d0>
			}
			PowerOffPin(pn);
     d48:	683a      	ldr	r2, [r7, #0]
     d4a:	687b      	ldr	r3, [r7, #4]
     d4c:	0011      	movs	r1, r2
     d4e:	0018      	movs	r0, r3
     d50:	4b2a      	ldr	r3, [pc, #168]	; (dfc <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3a4>)
     d52:	4798      	blx	r3
		}
	}
	

	if (nmi.IsButtonPressed())
     d54:	4b2c      	ldr	r3, [pc, #176]	; (e08 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3b0>)
     d56:	0018      	movs	r0, r3
     d58:	4b2c      	ldr	r3, [pc, #176]	; (e0c <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3b4>)
     d5a:	4798      	blx	r3
     d5c:	1e03      	subs	r3, r0, #0
     d5e:	d009      	beq.n	d74 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x31c>
	{
		request=true;
     d60:	687a      	ldr	r2, [r7, #4]
     d62:	23c2      	movs	r3, #194	; 0xc2
     d64:	005b      	lsls	r3, r3, #1
     d66:	2101      	movs	r1, #1
     d68:	54d1      	strb	r1, [r2, r3]
		nmi.OnPressed();
     d6a:	4b27      	ldr	r3, [pc, #156]	; (e08 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3b0>)
     d6c:	0018      	movs	r0, r3
     d6e:	4b28      	ldr	r3, [pc, #160]	; (e10 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3b8>)
     d70:	4798      	blx	r3
     d72:	e037      	b.n	de4 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x38c>
		
		}else{
		if (request&&nmi.pressedTimerStarted)
     d74:	687a      	ldr	r2, [r7, #4]
     d76:	23c2      	movs	r3, #194	; 0xc2
     d78:	005b      	lsls	r3, r3, #1
     d7a:	5cd3      	ldrb	r3, [r2, r3]
     d7c:	2b00      	cmp	r3, #0
     d7e:	d006      	beq.n	d8e <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x336>
     d80:	4b21      	ldr	r3, [pc, #132]	; (e08 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3b0>)
     d82:	785b      	ldrb	r3, [r3, #1]
     d84:	b2db      	uxtb	r3, r3
     d86:	2b00      	cmp	r3, #0
     d88:	d001      	beq.n	d8e <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x336>
     d8a:	2301      	movs	r3, #1
     d8c:	e000      	b.n	d90 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x338>
     d8e:	2300      	movs	r3, #0
     d90:	2b00      	cmp	r3, #0
     d92:	d027      	beq.n	de4 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x38c>
		{
			nmi.OnRelease();
     d94:	4b1c      	ldr	r3, [pc, #112]	; (e08 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3b0>)
     d96:	0018      	movs	r0, r3
     d98:	4b1e      	ldr	r3, [pc, #120]	; (e14 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3bc>)
     d9a:	4798      	blx	r3
			request=false;
     d9c:	687a      	ldr	r2, [r7, #4]
     d9e:	23c2      	movs	r3, #194	; 0xc2
     da0:	005b      	lsls	r3, r3, #1
     da2:	2100      	movs	r1, #0
     da4:	54d1      	strb	r1, [r2, r3]
			if (nmi.pressCounter<(512*COUNTER_TIME/(stepTime+COUNTER_TIME))){
     da6:	4b18      	ldr	r3, [pc, #96]	; (e08 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3b0>)
     da8:	689c      	ldr	r4, [r3, #8]
     daa:	687a      	ldr	r2, [r7, #4]
     dac:	23c0      	movs	r3, #192	; 0xc0
     dae:	005b      	lsls	r3, r3, #1
     db0:	58d3      	ldr	r3, [r2, r3]
     db2:	1d1a      	adds	r2, r3, #4
     db4:	4b18      	ldr	r3, [pc, #96]	; (e18 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x3c0>)
     db6:	0011      	movs	r1, r2
     db8:	2280      	movs	r2, #128	; 0x80
     dba:	0110      	lsls	r0, r2, #4
     dbc:	4798      	blx	r3
     dbe:	0003      	movs	r3, r0
     dc0:	429c      	cmp	r4, r3
     dc2:	419b      	sbcs	r3, r3
     dc4:	425b      	negs	r3, r3
     dc6:	b2db      	uxtb	r3, r3
     dc8:	2b00      	cmp	r3, #0
     dca:	d006      	beq.n	dda <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x382>
				changeModeRequest=true;
     dcc:	687a      	ldr	r2, [r7, #4]
     dce:	23bc      	movs	r3, #188	; 0xbc
     dd0:	005b      	lsls	r3, r3, #1
     dd2:	2101      	movs	r1, #1
     dd4:	54d1      	strb	r1, [r2, r3]
				return false;
     dd6:	2300      	movs	r3, #0
     dd8:	e005      	b.n	de6 <_ZN16LedHandler_Class16PowerOnSingleLedEi+0x38e>
			}else{
			changeModeRequest=false;
     dda:	687a      	ldr	r2, [r7, #4]
     ddc:	23bc      	movs	r3, #188	; 0xbc
     dde:	005b      	lsls	r3, r3, #1
     de0:	2100      	movs	r1, #0
     de2:	54d1      	strb	r1, [r2, r3]
		}
		else
		{
		}
	}
	return true;
     de4:	2301      	movs	r3, #1
}
     de6:	0018      	movs	r0, r3
     de8:	46bd      	mov	sp, r7
     dea:	b003      	add	sp, #12
     dec:	bd90      	pop	{r4, r7, pc}
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	00000e1d 	.word	0x00000e1d
     df4:	00000e85 	.word	0x00000e85
     df8:	000018d9 	.word	0x000018d9
     dfc:	00000ee9 	.word	0x00000ee9
     e00:	0000191d 	.word	0x0000191d
     e04:	00000fe1 	.word	0x00000fe1
     e08:	200007a8 	.word	0x200007a8
     e0c:	00002575 	.word	0x00002575
     e10:	00002605 	.word	0x00002605
     e14:	00002799 	.word	0x00002799
     e18:	00004071 	.word	0x00004071

00000e1c <_ZN16LedHandler_Class12StartBlinkerEh>:
void	LedHandler_Class::StartBlinker(uint8_t lapsus){
     e1c:	b580      	push	{r7, lr}
     e1e:	b082      	sub	sp, #8
     e20:	af00      	add	r7, sp, #0
     e22:	6078      	str	r0, [r7, #4]
     e24:	000a      	movs	r2, r1
     e26:	1cfb      	adds	r3, r7, #3
     e28:	701a      	strb	r2, [r3, #0]
		ledTimer.stop();
     e2a:	4b12      	ldr	r3, [pc, #72]	; (e74 <_ZN16LedHandler_Class12StartBlinkerEh+0x58>)
     e2c:	0018      	movs	r0, r3
     e2e:	4b12      	ldr	r3, [pc, #72]	; (e78 <_ZN16LedHandler_Class12StartBlinkerEh+0x5c>)
     e30:	4798      	blx	r3
		if (lapsus>0)
     e32:	1cfb      	adds	r3, r7, #3
     e34:	781b      	ldrb	r3, [r3, #0]
     e36:	2b00      	cmp	r3, #0
     e38:	dd0a      	ble.n	e50 <_ZN16LedHandler_Class12StartBlinkerEh+0x34>
		{
			ledTimer.Start_oneShot_task((FUNC_PTR)BlinkTimer,2*stepTime);
     e3a:	687a      	ldr	r2, [r7, #4]
     e3c:	23c0      	movs	r3, #192	; 0xc0
     e3e:	005b      	lsls	r3, r3, #1
     e40:	58d3      	ldr	r3, [r2, r3]
     e42:	005a      	lsls	r2, r3, #1
     e44:	490d      	ldr	r1, [pc, #52]	; (e7c <_ZN16LedHandler_Class12StartBlinkerEh+0x60>)
     e46:	4b0b      	ldr	r3, [pc, #44]	; (e74 <_ZN16LedHandler_Class12StartBlinkerEh+0x58>)
     e48:	0018      	movs	r0, r3
     e4a:	4b0d      	ldr	r3, [pc, #52]	; (e80 <_ZN16LedHandler_Class12StartBlinkerEh+0x64>)
     e4c:	4798      	blx	r3
     e4e:	e008      	b.n	e62 <_ZN16LedHandler_Class12StartBlinkerEh+0x46>
		} 
		else
		{
			ledTimer.Start_oneShot_task((FUNC_PTR)BlinkTimer,stepTime);
     e50:	687a      	ldr	r2, [r7, #4]
     e52:	23c0      	movs	r3, #192	; 0xc0
     e54:	005b      	lsls	r3, r3, #1
     e56:	58d2      	ldr	r2, [r2, r3]
     e58:	4908      	ldr	r1, [pc, #32]	; (e7c <_ZN16LedHandler_Class12StartBlinkerEh+0x60>)
     e5a:	4b06      	ldr	r3, [pc, #24]	; (e74 <_ZN16LedHandler_Class12StartBlinkerEh+0x58>)
     e5c:	0018      	movs	r0, r3
     e5e:	4b08      	ldr	r3, [pc, #32]	; (e80 <_ZN16LedHandler_Class12StartBlinkerEh+0x64>)
     e60:	4798      	blx	r3
		}
		

		blinkOut=false;
     e62:	687a      	ldr	r2, [r7, #4]
     e64:	237c      	movs	r3, #124	; 0x7c
     e66:	33ff      	adds	r3, #255	; 0xff
     e68:	2100      	movs	r1, #0
     e6a:	54d1      	strb	r1, [r2, r3]
}
     e6c:	46c0      	nop			; (mov r8, r8)
     e6e:	46bd      	mov	sp, r7
     e70:	b002      	add	sp, #8
     e72:	bd80      	pop	{r7, pc}
     e74:	200007e8 	.word	0x200007e8
     e78:	0000290d 	.word	0x0000290d
     e7c:	00000269 	.word	0x00000269
     e80:	000029c9 	.word	0x000029c9

00000e84 <_ZN16LedHandler_Class10PowerOnPinEi>:
	
void	LedHandler_Class::PowerOnPin(int	pn){
     e84:	b590      	push	{r4, r7, lr}
     e86:	b083      	sub	sp, #12
     e88:	af00      	add	r7, sp, #0
     e8a:	6078      	str	r0, [r7, #4]
     e8c:	6039      	str	r1, [r7, #0]
		SetPowerOnTimer();
     e8e:	687b      	ldr	r3, [r7, #4]
     e90:	0018      	movs	r0, r3
     e92:	4b13      	ldr	r3, [pc, #76]	; (ee0 <_ZN16LedHandler_Class10PowerOnPinEi+0x5c>)
     e94:	4798      	blx	r3
		SetPin(pins.allPorts[pn],pins.allPins[pn]);
     e96:	6878      	ldr	r0, [r7, #4]
     e98:	6879      	ldr	r1, [r7, #4]
     e9a:	23c6      	movs	r3, #198	; 0xc6
     e9c:	005b      	lsls	r3, r3, #1
     e9e:	683a      	ldr	r2, [r7, #0]
     ea0:	188a      	adds	r2, r1, r2
     ea2:	18d3      	adds	r3, r2, r3
     ea4:	781c      	ldrb	r4, [r3, #0]
     ea6:	6879      	ldr	r1, [r7, #4]
     ea8:	23e3      	movs	r3, #227	; 0xe3
     eaa:	005b      	lsls	r3, r3, #1
     eac:	683a      	ldr	r2, [r7, #0]
     eae:	188a      	adds	r2, r1, r2
     eb0:	18d3      	adds	r3, r2, r3
     eb2:	781b      	ldrb	r3, [r3, #0]
     eb4:	001a      	movs	r2, r3
     eb6:	0021      	movs	r1, r4
     eb8:	4b0a      	ldr	r3, [pc, #40]	; (ee4 <_ZN16LedHandler_Class10PowerOnPinEi+0x60>)
     eba:	4798      	blx	r3
		state.status[pn]=1;
     ebc:	6879      	ldr	r1, [r7, #4]
     ebe:	2380      	movs	r3, #128	; 0x80
     ec0:	009b      	lsls	r3, r3, #2
     ec2:	683a      	ldr	r2, [r7, #0]
     ec4:	188a      	adds	r2, r1, r2
     ec6:	18d3      	adds	r3, r2, r3
     ec8:	2201      	movs	r2, #1
     eca:	701a      	strb	r2, [r3, #0]
		poweron=true;
     ecc:	687a      	ldr	r2, [r7, #4]
     ece:	23bb      	movs	r3, #187	; 0xbb
     ed0:	005b      	lsls	r3, r3, #1
     ed2:	2101      	movs	r1, #1
     ed4:	54d1      	strb	r1, [r2, r3]
	}
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	46bd      	mov	sp, r7
     eda:	b003      	add	sp, #12
     edc:	bd90      	pop	{r4, r7, pc}
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	0000106d 	.word	0x0000106d
     ee4:	000018d9 	.word	0x000018d9

00000ee8 <_ZN16LedHandler_Class11PowerOffPinEi>:
void	LedHandler_Class::PowerOffPin(int	pn){
     ee8:	b590      	push	{r4, r7, lr}
     eea:	b083      	sub	sp, #12
     eec:	af00      	add	r7, sp, #0
     eee:	6078      	str	r0, [r7, #4]
     ef0:	6039      	str	r1, [r7, #0]
	ClearPin(pins.allPorts[pn],pins.allPins[pn]);
     ef2:	6878      	ldr	r0, [r7, #4]
     ef4:	6879      	ldr	r1, [r7, #4]
     ef6:	23c6      	movs	r3, #198	; 0xc6
     ef8:	005b      	lsls	r3, r3, #1
     efa:	683a      	ldr	r2, [r7, #0]
     efc:	188a      	adds	r2, r1, r2
     efe:	18d3      	adds	r3, r2, r3
     f00:	781c      	ldrb	r4, [r3, #0]
     f02:	6879      	ldr	r1, [r7, #4]
     f04:	23e3      	movs	r3, #227	; 0xe3
     f06:	005b      	lsls	r3, r3, #1
     f08:	683a      	ldr	r2, [r7, #0]
     f0a:	188a      	adds	r2, r1, r2
     f0c:	18d3      	adds	r3, r2, r3
     f0e:	781b      	ldrb	r3, [r3, #0]
     f10:	001a      	movs	r2, r3
     f12:	0021      	movs	r1, r4
     f14:	4b0b      	ldr	r3, [pc, #44]	; (f44 <_ZN16LedHandler_Class11PowerOffPinEi+0x5c>)
     f16:	4798      	blx	r3
	pwm_disable(&PWM_0);
     f18:	4b0b      	ldr	r3, [pc, #44]	; (f48 <_ZN16LedHandler_Class11PowerOffPinEi+0x60>)
     f1a:	0018      	movs	r0, r3
     f1c:	4b0b      	ldr	r3, [pc, #44]	; (f4c <_ZN16LedHandler_Class11PowerOffPinEi+0x64>)
     f1e:	4798      	blx	r3
	state.status[pn]=0;
     f20:	6879      	ldr	r1, [r7, #4]
     f22:	2380      	movs	r3, #128	; 0x80
     f24:	009b      	lsls	r3, r3, #2
     f26:	683a      	ldr	r2, [r7, #0]
     f28:	188a      	adds	r2, r1, r2
     f2a:	18d3      	adds	r3, r2, r3
     f2c:	2200      	movs	r2, #0
     f2e:	701a      	strb	r2, [r3, #0]
	poweron=false;
     f30:	687a      	ldr	r2, [r7, #4]
     f32:	23bb      	movs	r3, #187	; 0xbb
     f34:	005b      	lsls	r3, r3, #1
     f36:	2100      	movs	r1, #0
     f38:	54d1      	strb	r1, [r2, r3]
}
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	46bd      	mov	sp, r7
     f3e:	b003      	add	sp, #12
     f40:	bd90      	pop	{r4, r7, pc}
     f42:	46c0      	nop			; (mov r8, r8)
     f44:	0000191d 	.word	0x0000191d
     f48:	200008a0 	.word	0x200008a0
     f4c:	00002e79 	.word	0x00002e79

00000f50 <_ZN16LedHandler_Class8ClearAllEv>:

void	LedHandler_Class::ClearAll(void){
     f50:	b590      	push	{r4, r7, lr}
     f52:	b083      	sub	sp, #12
     f54:	af00      	add	r7, sp, #0
     f56:	6078      	str	r0, [r7, #4]
	for (i = 0; i < totalPins; i++)
     f58:	687a      	ldr	r2, [r7, #4]
     f5a:	239e      	movs	r3, #158	; 0x9e
     f5c:	009b      	lsls	r3, r3, #2
     f5e:	2100      	movs	r1, #0
     f60:	50d1      	str	r1, [r2, r3]
     f62:	687a      	ldr	r2, [r7, #4]
     f64:	239e      	movs	r3, #158	; 0x9e
     f66:	009b      	lsls	r3, r3, #2
     f68:	58d3      	ldr	r3, [r2, r3]
     f6a:	6879      	ldr	r1, [r7, #4]
     f6c:	229d      	movs	r2, #157	; 0x9d
     f6e:	0092      	lsls	r2, r2, #2
     f70:	5c8a      	ldrb	r2, [r1, r2]
     f72:	4293      	cmp	r3, r2
     f74:	da2d      	bge.n	fd2 <_ZN16LedHandler_Class8ClearAllEv+0x82>
	{
		ClearPin(pins.allPorts[i],pins.allPins[i]);
     f76:	6878      	ldr	r0, [r7, #4]
     f78:	687a      	ldr	r2, [r7, #4]
     f7a:	239e      	movs	r3, #158	; 0x9e
     f7c:	009b      	lsls	r3, r3, #2
     f7e:	58d2      	ldr	r2, [r2, r3]
     f80:	6879      	ldr	r1, [r7, #4]
     f82:	23c6      	movs	r3, #198	; 0xc6
     f84:	005b      	lsls	r3, r3, #1
     f86:	188a      	adds	r2, r1, r2
     f88:	18d3      	adds	r3, r2, r3
     f8a:	781c      	ldrb	r4, [r3, #0]
     f8c:	687a      	ldr	r2, [r7, #4]
     f8e:	239e      	movs	r3, #158	; 0x9e
     f90:	009b      	lsls	r3, r3, #2
     f92:	58d2      	ldr	r2, [r2, r3]
     f94:	6879      	ldr	r1, [r7, #4]
     f96:	23e3      	movs	r3, #227	; 0xe3
     f98:	005b      	lsls	r3, r3, #1
     f9a:	188a      	adds	r2, r1, r2
     f9c:	18d3      	adds	r3, r2, r3
     f9e:	781b      	ldrb	r3, [r3, #0]
     fa0:	001a      	movs	r2, r3
     fa2:	0021      	movs	r1, r4
     fa4:	4b0d      	ldr	r3, [pc, #52]	; (fdc <_ZN16LedHandler_Class8ClearAllEv+0x8c>)
     fa6:	4798      	blx	r3
		state.status[i]=0;
     fa8:	687a      	ldr	r2, [r7, #4]
     faa:	239e      	movs	r3, #158	; 0x9e
     fac:	009b      	lsls	r3, r3, #2
     fae:	58d2      	ldr	r2, [r2, r3]
     fb0:	6879      	ldr	r1, [r7, #4]
     fb2:	2380      	movs	r3, #128	; 0x80
     fb4:	009b      	lsls	r3, r3, #2
     fb6:	188a      	adds	r2, r1, r2
     fb8:	18d3      	adds	r3, r2, r3
     fba:	2200      	movs	r2, #0
     fbc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < totalPins; i++)
     fbe:	687a      	ldr	r2, [r7, #4]
     fc0:	239e      	movs	r3, #158	; 0x9e
     fc2:	009b      	lsls	r3, r3, #2
     fc4:	58d3      	ldr	r3, [r2, r3]
     fc6:	1c59      	adds	r1, r3, #1
     fc8:	687a      	ldr	r2, [r7, #4]
     fca:	239e      	movs	r3, #158	; 0x9e
     fcc:	009b      	lsls	r3, r3, #2
     fce:	50d1      	str	r1, [r2, r3]
     fd0:	e7c7      	b.n	f62 <_ZN16LedHandler_Class8ClearAllEv+0x12>
	}
}
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	46bd      	mov	sp, r7
     fd6:	b003      	add	sp, #12
     fd8:	bd90      	pop	{r4, r7, pc}
     fda:	46c0      	nop			; (mov r8, r8)
     fdc:	0000191d 	.word	0x0000191d

00000fe0 <_ZN16LedHandler_Class6DimmenEi>:
		}
		
	}
}

void	LedHandler_Class::Dimmen(int	modulate){
     fe0:	b580      	push	{r7, lr}
     fe2:	b082      	sub	sp, #8
     fe4:	af00      	add	r7, sp, #0
     fe6:	6078      	str	r0, [r7, #4]
     fe8:	6039      	str	r1, [r7, #0]
	if (stepTime>3*POWERON_SINGLE_TIME_MAX/4)
     fea:	687a      	ldr	r2, [r7, #4]
     fec:	23c0      	movs	r3, #192	; 0xc0
     fee:	005b      	lsls	r3, r3, #1
     ff0:	58d3      	ldr	r3, [r2, r3]
     ff2:	4a1b      	ldr	r2, [pc, #108]	; (1060 <_ZN16LedHandler_Class6DimmenEi+0x80>)
     ff4:	429a      	cmp	r2, r3
     ff6:	419b      	sbcs	r3, r3
     ff8:	425b      	negs	r3, r3
     ffa:	b2db      	uxtb	r3, r3
     ffc:	2b00      	cmp	r3, #0
     ffe:	d02a      	beq.n	1056 <_ZN16LedHandler_Class6DimmenEi+0x76>
	{
		if (modulate>0)
		{
			//	pwm_set_parameters(&PWM_0, period, dutyCycle);
		}
		if (deadTime)
    1000:	687a      	ldr	r2, [r7, #4]
    1002:	2378      	movs	r3, #120	; 0x78
    1004:	33ff      	adds	r3, #255	; 0xff
    1006:	5cd3      	ldrb	r3, [r2, r3]
    1008:	b2db      	uxtb	r3, r3
    100a:	2b00      	cmp	r3, #0
    100c:	d010      	beq.n	1030 <_ZN16LedHandler_Class6DimmenEi+0x50>
		{
			if (poweron)
    100e:	687a      	ldr	r2, [r7, #4]
    1010:	23bb      	movs	r3, #187	; 0xbb
    1012:	005b      	lsls	r3, r3, #1
    1014:	5cd3      	ldrb	r3, [r2, r3]
    1016:	b2db      	uxtb	r3, r3
    1018:	2b00      	cmp	r3, #0
    101a:	d01c      	beq.n	1056 <_ZN16LedHandler_Class6DimmenEi+0x76>
			{
				LightOffActivePins();
    101c:	687b      	ldr	r3, [r7, #4]
    101e:	0018      	movs	r0, r3
    1020:	4b10      	ldr	r3, [pc, #64]	; (1064 <_ZN16LedHandler_Class6DimmenEi+0x84>)
    1022:	4798      	blx	r3
				poweron=false;
    1024:	687a      	ldr	r2, [r7, #4]
    1026:	23bb      	movs	r3, #187	; 0xbb
    1028:	005b      	lsls	r3, r3, #1
    102a:	2100      	movs	r1, #0
    102c:	54d1      	strb	r1, [r2, r3]
			
		}
	}
	
	
}
    102e:	e012      	b.n	1056 <_ZN16LedHandler_Class6DimmenEi+0x76>
			if (!poweron)
    1030:	687a      	ldr	r2, [r7, #4]
    1032:	23bb      	movs	r3, #187	; 0xbb
    1034:	005b      	lsls	r3, r3, #1
    1036:	5cd3      	ldrb	r3, [r2, r3]
    1038:	b2db      	uxtb	r3, r3
    103a:	2201      	movs	r2, #1
    103c:	4053      	eors	r3, r2
    103e:	b2db      	uxtb	r3, r3
    1040:	2b00      	cmp	r3, #0
    1042:	d008      	beq.n	1056 <_ZN16LedHandler_Class6DimmenEi+0x76>
				LightOnActivePins();
    1044:	687b      	ldr	r3, [r7, #4]
    1046:	0018      	movs	r0, r3
    1048:	4b07      	ldr	r3, [pc, #28]	; (1068 <_ZN16LedHandler_Class6DimmenEi+0x88>)
    104a:	4798      	blx	r3
				poweron=true;
    104c:	687a      	ldr	r2, [r7, #4]
    104e:	23bb      	movs	r3, #187	; 0xbb
    1050:	005b      	lsls	r3, r3, #1
    1052:	2101      	movs	r1, #1
    1054:	54d1      	strb	r1, [r2, r3]
}
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	46bd      	mov	sp, r7
    105a:	b002      	add	sp, #8
    105c:	bd80      	pop	{r7, pc}
    105e:	46c0      	nop			; (mov r8, r8)
    1060:	00000bb8 	.word	0x00000bb8
    1064:	0000112d 	.word	0x0000112d
    1068:	0000109d 	.word	0x0000109d

0000106c <_ZN16LedHandler_Class15SetPowerOnTimerEv>:
void	LedHandler_Class::SetPowerOnTimer(void){
    106c:	b580      	push	{r7, lr}
    106e:	b082      	sub	sp, #8
    1070:	af00      	add	r7, sp, #0
    1072:	6078      	str	r0, [r7, #4]
		pwmTimer.stop();
    1074:	4b05      	ldr	r3, [pc, #20]	; (108c <_ZN16LedHandler_Class15SetPowerOnTimerEv+0x20>)
    1076:	0018      	movs	r0, r3
    1078:	4b05      	ldr	r3, [pc, #20]	; (1090 <_ZN16LedHandler_Class15SetPowerOnTimerEv+0x24>)
    107a:	4798      	blx	r3
		pwm_enable(&PWM_0);
    107c:	4b05      	ldr	r3, [pc, #20]	; (1094 <_ZN16LedHandler_Class15SetPowerOnTimerEv+0x28>)
    107e:	0018      	movs	r0, r3
    1080:	4b05      	ldr	r3, [pc, #20]	; (1098 <_ZN16LedHandler_Class15SetPowerOnTimerEv+0x2c>)
    1082:	4798      	blx	r3
		//pwmTimer.Start_oneShot_task((FUNC_PTR)PowerOnTimer,int(PWM_WAVE_PERIOD/20));

}
    1084:	46c0      	nop			; (mov r8, r8)
    1086:	46bd      	mov	sp, r7
    1088:	b002      	add	sp, #8
    108a:	bd80      	pop	{r7, pc}
    108c:	20000814 	.word	0x20000814
    1090:	0000290d 	.word	0x0000290d
    1094:	200008a0 	.word	0x200008a0
    1098:	00002e3d 	.word	0x00002e3d

0000109c <_ZN16LedHandler_Class17LightOnActivePinsEv>:
//	pwmTimer.remove_task();
	pwmTimer.add_oneShot_task((FUNC_PTR)PowerOffTimer,uint32_t(period*(1000-dutyCycle)/1000));
	pwmTimer.start();
}

void	LedHandler_Class::LightOnActivePins(void){
    109c:	b590      	push	{r4, r7, lr}
    109e:	b083      	sub	sp, #12
    10a0:	af00      	add	r7, sp, #0
    10a2:	6078      	str	r0, [r7, #4]
		for (i = 0; i < totalPins; i++)
    10a4:	687a      	ldr	r2, [r7, #4]
    10a6:	239e      	movs	r3, #158	; 0x9e
    10a8:	009b      	lsls	r3, r3, #2
    10aa:	2100      	movs	r1, #0
    10ac:	50d1      	str	r1, [r2, r3]
    10ae:	687a      	ldr	r2, [r7, #4]
    10b0:	239e      	movs	r3, #158	; 0x9e
    10b2:	009b      	lsls	r3, r3, #2
    10b4:	58d3      	ldr	r3, [r2, r3]
    10b6:	6879      	ldr	r1, [r7, #4]
    10b8:	229d      	movs	r2, #157	; 0x9d
    10ba:	0092      	lsls	r2, r2, #2
    10bc:	5c8a      	ldrb	r2, [r1, r2]
    10be:	4293      	cmp	r3, r2
    10c0:	da2e      	bge.n	1120 <_ZN16LedHandler_Class17LightOnActivePinsEv+0x84>
		{
			if (state.status[i]==1)
    10c2:	687a      	ldr	r2, [r7, #4]
    10c4:	239e      	movs	r3, #158	; 0x9e
    10c6:	009b      	lsls	r3, r3, #2
    10c8:	58d2      	ldr	r2, [r2, r3]
    10ca:	6879      	ldr	r1, [r7, #4]
    10cc:	2380      	movs	r3, #128	; 0x80
    10ce:	009b      	lsls	r3, r3, #2
    10d0:	188a      	adds	r2, r1, r2
    10d2:	18d3      	adds	r3, r2, r3
    10d4:	781b      	ldrb	r3, [r3, #0]
    10d6:	2b01      	cmp	r3, #1
    10d8:	d118      	bne.n	110c <_ZN16LedHandler_Class17LightOnActivePinsEv+0x70>
			{
				SetPin(pins.allPorts[i],pins.allPins[i]);
    10da:	6878      	ldr	r0, [r7, #4]
    10dc:	687a      	ldr	r2, [r7, #4]
    10de:	239e      	movs	r3, #158	; 0x9e
    10e0:	009b      	lsls	r3, r3, #2
    10e2:	58d2      	ldr	r2, [r2, r3]
    10e4:	6879      	ldr	r1, [r7, #4]
    10e6:	23c6      	movs	r3, #198	; 0xc6
    10e8:	005b      	lsls	r3, r3, #1
    10ea:	188a      	adds	r2, r1, r2
    10ec:	18d3      	adds	r3, r2, r3
    10ee:	781c      	ldrb	r4, [r3, #0]
    10f0:	687a      	ldr	r2, [r7, #4]
    10f2:	239e      	movs	r3, #158	; 0x9e
    10f4:	009b      	lsls	r3, r3, #2
    10f6:	58d2      	ldr	r2, [r2, r3]
    10f8:	6879      	ldr	r1, [r7, #4]
    10fa:	23e3      	movs	r3, #227	; 0xe3
    10fc:	005b      	lsls	r3, r3, #1
    10fe:	188a      	adds	r2, r1, r2
    1100:	18d3      	adds	r3, r2, r3
    1102:	781b      	ldrb	r3, [r3, #0]
    1104:	001a      	movs	r2, r3
    1106:	0021      	movs	r1, r4
    1108:	4b07      	ldr	r3, [pc, #28]	; (1128 <_ZN16LedHandler_Class17LightOnActivePinsEv+0x8c>)
    110a:	4798      	blx	r3
		for (i = 0; i < totalPins; i++)
    110c:	687a      	ldr	r2, [r7, #4]
    110e:	239e      	movs	r3, #158	; 0x9e
    1110:	009b      	lsls	r3, r3, #2
    1112:	58d3      	ldr	r3, [r2, r3]
    1114:	1c59      	adds	r1, r3, #1
    1116:	687a      	ldr	r2, [r7, #4]
    1118:	239e      	movs	r3, #158	; 0x9e
    111a:	009b      	lsls	r3, r3, #2
    111c:	50d1      	str	r1, [r2, r3]
    111e:	e7c6      	b.n	10ae <_ZN16LedHandler_Class17LightOnActivePinsEv+0x12>
				//ClearPin(pins.allPorts[i],pins.allPins[i]);
				
			}
			
		}
}
    1120:	46c0      	nop			; (mov r8, r8)
    1122:	46bd      	mov	sp, r7
    1124:	b003      	add	sp, #12
    1126:	bd90      	pop	{r4, r7, pc}
    1128:	000018d9 	.word	0x000018d9

0000112c <_ZN16LedHandler_Class18LightOffActivePinsEv>:

void	LedHandler_Class::LightOffActivePins(void){
    112c:	b590      	push	{r4, r7, lr}
    112e:	b083      	sub	sp, #12
    1130:	af00      	add	r7, sp, #0
    1132:	6078      	str	r0, [r7, #4]
	for (i = 0; i < totalPins; i++)
    1134:	687a      	ldr	r2, [r7, #4]
    1136:	239e      	movs	r3, #158	; 0x9e
    1138:	009b      	lsls	r3, r3, #2
    113a:	2100      	movs	r1, #0
    113c:	50d1      	str	r1, [r2, r3]
    113e:	687a      	ldr	r2, [r7, #4]
    1140:	239e      	movs	r3, #158	; 0x9e
    1142:	009b      	lsls	r3, r3, #2
    1144:	58d3      	ldr	r3, [r2, r3]
    1146:	6879      	ldr	r1, [r7, #4]
    1148:	229d      	movs	r2, #157	; 0x9d
    114a:	0092      	lsls	r2, r2, #2
    114c:	5c8a      	ldrb	r2, [r1, r2]
    114e:	4293      	cmp	r3, r2
    1150:	da22      	bge.n	1198 <_ZN16LedHandler_Class18LightOffActivePinsEv+0x6c>
	{

			ClearPin(pins.allPorts[i],pins.allPins[i]);
    1152:	6878      	ldr	r0, [r7, #4]
    1154:	687a      	ldr	r2, [r7, #4]
    1156:	239e      	movs	r3, #158	; 0x9e
    1158:	009b      	lsls	r3, r3, #2
    115a:	58d2      	ldr	r2, [r2, r3]
    115c:	6879      	ldr	r1, [r7, #4]
    115e:	23c6      	movs	r3, #198	; 0xc6
    1160:	005b      	lsls	r3, r3, #1
    1162:	188a      	adds	r2, r1, r2
    1164:	18d3      	adds	r3, r2, r3
    1166:	781c      	ldrb	r4, [r3, #0]
    1168:	687a      	ldr	r2, [r7, #4]
    116a:	239e      	movs	r3, #158	; 0x9e
    116c:	009b      	lsls	r3, r3, #2
    116e:	58d2      	ldr	r2, [r2, r3]
    1170:	6879      	ldr	r1, [r7, #4]
    1172:	23e3      	movs	r3, #227	; 0xe3
    1174:	005b      	lsls	r3, r3, #1
    1176:	188a      	adds	r2, r1, r2
    1178:	18d3      	adds	r3, r2, r3
    117a:	781b      	ldrb	r3, [r3, #0]
    117c:	001a      	movs	r2, r3
    117e:	0021      	movs	r1, r4
    1180:	4b07      	ldr	r3, [pc, #28]	; (11a0 <_ZN16LedHandler_Class18LightOffActivePinsEv+0x74>)
    1182:	4798      	blx	r3
	for (i = 0; i < totalPins; i++)
    1184:	687a      	ldr	r2, [r7, #4]
    1186:	239e      	movs	r3, #158	; 0x9e
    1188:	009b      	lsls	r3, r3, #2
    118a:	58d3      	ldr	r3, [r2, r3]
    118c:	1c59      	adds	r1, r3, #1
    118e:	687a      	ldr	r2, [r7, #4]
    1190:	239e      	movs	r3, #158	; 0x9e
    1192:	009b      	lsls	r3, r3, #2
    1194:	50d1      	str	r1, [r2, r3]
    1196:	e7d2      	b.n	113e <_ZN16LedHandler_Class18LightOffActivePinsEv+0x12>

	}
}
    1198:	46c0      	nop			; (mov r8, r8)
    119a:	46bd      	mov	sp, r7
    119c:	b003      	add	sp, #12
    119e:	bd90      	pop	{r4, r7, pc}
    11a0:	0000191d 	.word	0x0000191d

000011a4 <_Z41__static_initialization_and_destruction_0ii>:
}
uint8_t	LedHandler_Class::GetTotalPins(void){
	return	totalPins;
}

LedHandler_Class		lighter;
    11a4:	b580      	push	{r7, lr}
    11a6:	b082      	sub	sp, #8
    11a8:	af00      	add	r7, sp, #0
    11aa:	6078      	str	r0, [r7, #4]
    11ac:	6039      	str	r1, [r7, #0]
    11ae:	687b      	ldr	r3, [r7, #4]
    11b0:	2b01      	cmp	r3, #1
    11b2:	d10d      	bne.n	11d0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    11b4:	683b      	ldr	r3, [r7, #0]
    11b6:	4a08      	ldr	r2, [pc, #32]	; (11d8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    11b8:	4293      	cmp	r3, r2
    11ba:	d109      	bne.n	11d0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    11bc:	4b07      	ldr	r3, [pc, #28]	; (11dc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    11be:	0018      	movs	r0, r3
    11c0:	4b07      	ldr	r3, [pc, #28]	; (11e0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    11c2:	4798      	blx	r3
    11c4:	4a07      	ldr	r2, [pc, #28]	; (11e4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    11c6:	4908      	ldr	r1, [pc, #32]	; (11e8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    11c8:	4b04      	ldr	r3, [pc, #16]	; (11dc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    11ca:	0018      	movs	r0, r3
    11cc:	4b07      	ldr	r3, [pc, #28]	; (11ec <_Z41__static_initialization_and_destruction_0ii+0x48>)
    11ce:	4798      	blx	r3
    11d0:	46c0      	nop			; (mov r8, r8)
    11d2:	46bd      	mov	sp, r7
    11d4:	b002      	add	sp, #8
    11d6:	bd80      	pop	{r7, pc}
    11d8:	0000ffff 	.word	0x0000ffff
    11dc:	20000518 	.word	0x20000518
    11e0:	00000289 	.word	0x00000289
    11e4:	20000000 	.word	0x20000000
    11e8:	000002f1 	.word	0x000002f1
    11ec:	00004061 	.word	0x00004061

000011f0 <_GLOBAL__sub_I_ptrLedHandler>:
    11f0:	b580      	push	{r7, lr}
    11f2:	af00      	add	r7, sp, #0
    11f4:	4b03      	ldr	r3, [pc, #12]	; (1204 <_GLOBAL__sub_I_ptrLedHandler+0x14>)
    11f6:	0019      	movs	r1, r3
    11f8:	2001      	movs	r0, #1
    11fa:	4b03      	ldr	r3, [pc, #12]	; (1208 <_GLOBAL__sub_I_ptrLedHandler+0x18>)
    11fc:	4798      	blx	r3
    11fe:	46bd      	mov	sp, r7
    1200:	bd80      	pop	{r7, pc}
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	0000ffff 	.word	0x0000ffff
    1208:	000011a5 	.word	0x000011a5

0000120c <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    120c:	b580      	push	{r7, lr}
    120e:	b084      	sub	sp, #16
    1210:	af00      	add	r7, sp, #0
    1212:	60f8      	str	r0, [r7, #12]
    1214:	607a      	str	r2, [r7, #4]
    1216:	230b      	movs	r3, #11
    1218:	18fb      	adds	r3, r7, r3
    121a:	1c0a      	adds	r2, r1, #0
    121c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    121e:	230b      	movs	r3, #11
    1220:	18fb      	adds	r3, r7, r3
    1222:	781b      	ldrb	r3, [r3, #0]
    1224:	68fa      	ldr	r2, [r7, #12]
    1226:	01db      	lsls	r3, r3, #7
    1228:	18d3      	adds	r3, r2, r3
    122a:	3308      	adds	r3, #8
    122c:	687a      	ldr	r2, [r7, #4]
    122e:	601a      	str	r2, [r3, #0]
}
    1230:	46c0      	nop			; (mov r8, r8)
    1232:	46bd      	mov	sp, r7
    1234:	b004      	add	sp, #16
    1236:	bd80      	pop	{r7, pc}

00001238 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1238:	b580      	push	{r7, lr}
    123a:	b084      	sub	sp, #16
    123c:	af00      	add	r7, sp, #0
    123e:	60f8      	str	r0, [r7, #12]
    1240:	607a      	str	r2, [r7, #4]
    1242:	230b      	movs	r3, #11
    1244:	18fb      	adds	r3, r7, r3
    1246:	1c0a      	adds	r2, r1, #0
    1248:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    124a:	230b      	movs	r3, #11
    124c:	18fb      	adds	r3, r7, r3
    124e:	781b      	ldrb	r3, [r3, #0]
    1250:	68fa      	ldr	r2, [r7, #12]
    1252:	01db      	lsls	r3, r3, #7
    1254:	18d3      	adds	r3, r2, r3
    1256:	3304      	adds	r3, #4
    1258:	687a      	ldr	r2, [r7, #4]
    125a:	601a      	str	r2, [r3, #0]
}
    125c:	46c0      	nop			; (mov r8, r8)
    125e:	46bd      	mov	sp, r7
    1260:	b004      	add	sp, #16
    1262:	bd80      	pop	{r7, pc}

00001264 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1264:	b580      	push	{r7, lr}
    1266:	b084      	sub	sp, #16
    1268:	af00      	add	r7, sp, #0
    126a:	60f8      	str	r0, [r7, #12]
    126c:	607a      	str	r2, [r7, #4]
    126e:	230b      	movs	r3, #11
    1270:	18fb      	adds	r3, r7, r3
    1272:	1c0a      	adds	r2, r1, #0
    1274:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1276:	230b      	movs	r3, #11
    1278:	18fb      	adds	r3, r7, r3
    127a:	781b      	ldrb	r3, [r3, #0]
    127c:	68fa      	ldr	r2, [r7, #12]
    127e:	01db      	lsls	r3, r3, #7
    1280:	18d3      	adds	r3, r2, r3
    1282:	3318      	adds	r3, #24
    1284:	687a      	ldr	r2, [r7, #4]
    1286:	601a      	str	r2, [r3, #0]
}
    1288:	46c0      	nop			; (mov r8, r8)
    128a:	46bd      	mov	sp, r7
    128c:	b004      	add	sp, #16
    128e:	bd80      	pop	{r7, pc}

00001290 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1290:	b580      	push	{r7, lr}
    1292:	b084      	sub	sp, #16
    1294:	af00      	add	r7, sp, #0
    1296:	60f8      	str	r0, [r7, #12]
    1298:	607a      	str	r2, [r7, #4]
    129a:	230b      	movs	r3, #11
    129c:	18fb      	adds	r3, r7, r3
    129e:	1c0a      	adds	r2, r1, #0
    12a0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    12a2:	230b      	movs	r3, #11
    12a4:	18fb      	adds	r3, r7, r3
    12a6:	781b      	ldrb	r3, [r3, #0]
    12a8:	68fa      	ldr	r2, [r7, #12]
    12aa:	01db      	lsls	r3, r3, #7
    12ac:	18d3      	adds	r3, r2, r3
    12ae:	3314      	adds	r3, #20
    12b0:	687a      	ldr	r2, [r7, #4]
    12b2:	601a      	str	r2, [r3, #0]
}
    12b4:	46c0      	nop			; (mov r8, r8)
    12b6:	46bd      	mov	sp, r7
    12b8:	b004      	add	sp, #16
    12ba:	bd80      	pop	{r7, pc}

000012bc <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    12bc:	b590      	push	{r4, r7, lr}
    12be:	b085      	sub	sp, #20
    12c0:	af00      	add	r7, sp, #0
    12c2:	6078      	str	r0, [r7, #4]
    12c4:	000c      	movs	r4, r1
    12c6:	0010      	movs	r0, r2
    12c8:	0019      	movs	r1, r3
    12ca:	1cfb      	adds	r3, r7, #3
    12cc:	1c22      	adds	r2, r4, #0
    12ce:	701a      	strb	r2, [r3, #0]
    12d0:	1cbb      	adds	r3, r7, #2
    12d2:	1c02      	adds	r2, r0, #0
    12d4:	701a      	strb	r2, [r3, #0]
    12d6:	1c7b      	adds	r3, r7, #1
    12d8:	1c0a      	adds	r2, r1, #0
    12da:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    12dc:	1cfb      	adds	r3, r7, #3
    12de:	7819      	ldrb	r1, [r3, #0]
    12e0:	1cbb      	adds	r3, r7, #2
    12e2:	781a      	ldrb	r2, [r3, #0]
    12e4:	230f      	movs	r3, #15
    12e6:	18fb      	adds	r3, r7, r3
    12e8:	6878      	ldr	r0, [r7, #4]
    12ea:	2430      	movs	r4, #48	; 0x30
    12ec:	01c9      	lsls	r1, r1, #7
    12ee:	1841      	adds	r1, r0, r1
    12f0:	188a      	adds	r2, r1, r2
    12f2:	1912      	adds	r2, r2, r4
    12f4:	7812      	ldrb	r2, [r2, #0]
    12f6:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    12f8:	230f      	movs	r3, #15
    12fa:	18fb      	adds	r3, r7, r3
    12fc:	220f      	movs	r2, #15
    12fe:	18ba      	adds	r2, r7, r2
    1300:	7812      	ldrb	r2, [r2, #0]
    1302:	210f      	movs	r1, #15
    1304:	438a      	bics	r2, r1
    1306:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
    1308:	1c7b      	adds	r3, r7, #1
    130a:	781b      	ldrb	r3, [r3, #0]
    130c:	220f      	movs	r2, #15
    130e:	4013      	ands	r3, r2
    1310:	b2d9      	uxtb	r1, r3
    1312:	230f      	movs	r3, #15
    1314:	18fb      	adds	r3, r7, r3
    1316:	220f      	movs	r2, #15
    1318:	18ba      	adds	r2, r7, r2
    131a:	7812      	ldrb	r2, [r2, #0]
    131c:	430a      	orrs	r2, r1
    131e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1320:	1cfb      	adds	r3, r7, #3
    1322:	781a      	ldrb	r2, [r3, #0]
    1324:	1cbb      	adds	r3, r7, #2
    1326:	781b      	ldrb	r3, [r3, #0]
    1328:	6879      	ldr	r1, [r7, #4]
    132a:	2030      	movs	r0, #48	; 0x30
    132c:	01d2      	lsls	r2, r2, #7
    132e:	188a      	adds	r2, r1, r2
    1330:	18d3      	adds	r3, r2, r3
    1332:	181b      	adds	r3, r3, r0
    1334:	220f      	movs	r2, #15
    1336:	18ba      	adds	r2, r7, r2
    1338:	7812      	ldrb	r2, [r2, #0]
    133a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    133c:	46c0      	nop			; (mov r8, r8)
    133e:	46bd      	mov	sp, r7
    1340:	b005      	add	sp, #20
    1342:	bd90      	pop	{r4, r7, pc}

00001344 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1344:	b590      	push	{r4, r7, lr}
    1346:	b085      	sub	sp, #20
    1348:	af00      	add	r7, sp, #0
    134a:	6078      	str	r0, [r7, #4]
    134c:	000c      	movs	r4, r1
    134e:	0010      	movs	r0, r2
    1350:	0019      	movs	r1, r3
    1352:	1cfb      	adds	r3, r7, #3
    1354:	1c22      	adds	r2, r4, #0
    1356:	701a      	strb	r2, [r3, #0]
    1358:	1cbb      	adds	r3, r7, #2
    135a:	1c02      	adds	r2, r0, #0
    135c:	701a      	strb	r2, [r3, #0]
    135e:	1c7b      	adds	r3, r7, #1
    1360:	1c0a      	adds	r2, r1, #0
    1362:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1364:	1cfb      	adds	r3, r7, #3
    1366:	7819      	ldrb	r1, [r3, #0]
    1368:	1cbb      	adds	r3, r7, #2
    136a:	781a      	ldrb	r2, [r3, #0]
    136c:	230f      	movs	r3, #15
    136e:	18fb      	adds	r3, r7, r3
    1370:	6878      	ldr	r0, [r7, #4]
    1372:	2430      	movs	r4, #48	; 0x30
    1374:	01c9      	lsls	r1, r1, #7
    1376:	1841      	adds	r1, r0, r1
    1378:	188a      	adds	r2, r1, r2
    137a:	1912      	adds	r2, r2, r4
    137c:	7812      	ldrb	r2, [r2, #0]
    137e:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1380:	230f      	movs	r3, #15
    1382:	18fb      	adds	r3, r7, r3
    1384:	220f      	movs	r2, #15
    1386:	18ba      	adds	r2, r7, r2
    1388:	7812      	ldrb	r2, [r2, #0]
    138a:	210f      	movs	r1, #15
    138c:	400a      	ands	r2, r1
    138e:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
    1390:	1c7b      	adds	r3, r7, #1
    1392:	781b      	ldrb	r3, [r3, #0]
    1394:	011b      	lsls	r3, r3, #4
    1396:	b2d9      	uxtb	r1, r3
    1398:	230f      	movs	r3, #15
    139a:	18fb      	adds	r3, r7, r3
    139c:	220f      	movs	r2, #15
    139e:	18ba      	adds	r2, r7, r2
    13a0:	7812      	ldrb	r2, [r2, #0]
    13a2:	430a      	orrs	r2, r1
    13a4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    13a6:	1cfb      	adds	r3, r7, #3
    13a8:	781a      	ldrb	r2, [r3, #0]
    13aa:	1cbb      	adds	r3, r7, #2
    13ac:	781b      	ldrb	r3, [r3, #0]
    13ae:	6879      	ldr	r1, [r7, #4]
    13b0:	2030      	movs	r0, #48	; 0x30
    13b2:	01d2      	lsls	r2, r2, #7
    13b4:	188a      	adds	r2, r1, r2
    13b6:	18d3      	adds	r3, r2, r3
    13b8:	181b      	adds	r3, r3, r0
    13ba:	220f      	movs	r2, #15
    13bc:	18ba      	adds	r2, r7, r2
    13be:	7812      	ldrb	r2, [r2, #0]
    13c0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	46bd      	mov	sp, r7
    13c6:	b005      	add	sp, #20
    13c8:	bd90      	pop	{r4, r7, pc}

000013ca <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    13ca:	b590      	push	{r4, r7, lr}
    13cc:	b085      	sub	sp, #20
    13ce:	af00      	add	r7, sp, #0
    13d0:	6078      	str	r0, [r7, #4]
    13d2:	000c      	movs	r4, r1
    13d4:	0010      	movs	r0, r2
    13d6:	0019      	movs	r1, r3
    13d8:	1cfb      	adds	r3, r7, #3
    13da:	1c22      	adds	r2, r4, #0
    13dc:	701a      	strb	r2, [r3, #0]
    13de:	1cbb      	adds	r3, r7, #2
    13e0:	1c02      	adds	r2, r0, #0
    13e2:	701a      	strb	r2, [r3, #0]
    13e4:	1c7b      	adds	r3, r7, #1
    13e6:	1c0a      	adds	r2, r1, #0
    13e8:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    13ea:	1cfb      	adds	r3, r7, #3
    13ec:	7819      	ldrb	r1, [r3, #0]
    13ee:	1cbb      	adds	r3, r7, #2
    13f0:	781a      	ldrb	r2, [r3, #0]
    13f2:	230f      	movs	r3, #15
    13f4:	18fb      	adds	r3, r7, r3
    13f6:	6878      	ldr	r0, [r7, #4]
    13f8:	2440      	movs	r4, #64	; 0x40
    13fa:	01c9      	lsls	r1, r1, #7
    13fc:	1841      	adds	r1, r0, r1
    13fe:	188a      	adds	r2, r1, r2
    1400:	1912      	adds	r2, r2, r4
    1402:	7812      	ldrb	r2, [r2, #0]
    1404:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1406:	230f      	movs	r3, #15
    1408:	18fb      	adds	r3, r7, r3
    140a:	220f      	movs	r2, #15
    140c:	18ba      	adds	r2, r7, r2
    140e:	7812      	ldrb	r2, [r2, #0]
    1410:	2101      	movs	r1, #1
    1412:	438a      	bics	r2, r1
    1414:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1416:	1c7b      	adds	r3, r7, #1
    1418:	7819      	ldrb	r1, [r3, #0]
    141a:	230f      	movs	r3, #15
    141c:	18fb      	adds	r3, r7, r3
    141e:	220f      	movs	r2, #15
    1420:	18ba      	adds	r2, r7, r2
    1422:	7812      	ldrb	r2, [r2, #0]
    1424:	430a      	orrs	r2, r1
    1426:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1428:	1cfb      	adds	r3, r7, #3
    142a:	781a      	ldrb	r2, [r3, #0]
    142c:	1cbb      	adds	r3, r7, #2
    142e:	781b      	ldrb	r3, [r3, #0]
    1430:	6879      	ldr	r1, [r7, #4]
    1432:	2040      	movs	r0, #64	; 0x40
    1434:	01d2      	lsls	r2, r2, #7
    1436:	188a      	adds	r2, r1, r2
    1438:	18d3      	adds	r3, r2, r3
    143a:	181b      	adds	r3, r3, r0
    143c:	220f      	movs	r2, #15
    143e:	18ba      	adds	r2, r7, r2
    1440:	7812      	ldrb	r2, [r2, #0]
    1442:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1444:	46c0      	nop			; (mov r8, r8)
    1446:	46bd      	mov	sp, r7
    1448:	b005      	add	sp, #20
    144a:	bd90      	pop	{r4, r7, pc}

0000144c <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    144c:	b580      	push	{r7, lr}
    144e:	b084      	sub	sp, #16
    1450:	af00      	add	r7, sp, #0
    1452:	60f8      	str	r0, [r7, #12]
    1454:	607a      	str	r2, [r7, #4]
    1456:	230b      	movs	r3, #11
    1458:	18fb      	adds	r3, r7, r3
    145a:	1c0a      	adds	r2, r1, #0
    145c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    145e:	230b      	movs	r3, #11
    1460:	18fb      	adds	r3, r7, r3
    1462:	781b      	ldrb	r3, [r3, #0]
    1464:	68fa      	ldr	r2, [r7, #12]
    1466:	01db      	lsls	r3, r3, #7
    1468:	18d3      	adds	r3, r2, r3
    146a:	3328      	adds	r3, #40	; 0x28
    146c:	687a      	ldr	r2, [r7, #4]
    146e:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1470:	46c0      	nop			; (mov r8, r8)
    1472:	46bd      	mov	sp, r7
    1474:	b004      	add	sp, #16
    1476:	bd80      	pop	{r7, pc}

00001478 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    1478:	b580      	push	{r7, lr}
    147a:	b082      	sub	sp, #8
    147c:	af00      	add	r7, sp, #0
    147e:	6039      	str	r1, [r7, #0]
    1480:	0011      	movs	r1, r2
    1482:	1dfb      	adds	r3, r7, #7
    1484:	1c02      	adds	r2, r0, #0
    1486:	701a      	strb	r2, [r3, #0]
    1488:	1dbb      	adds	r3, r7, #6
    148a:	1c0a      	adds	r2, r1, #0
    148c:	701a      	strb	r2, [r3, #0]
	switch (direction) {
    148e:	1dbb      	adds	r3, r7, #6
    1490:	781b      	ldrb	r3, [r3, #0]
    1492:	2b01      	cmp	r3, #1
    1494:	d023      	beq.n	14de <_gpio_set_direction+0x66>
    1496:	2b02      	cmp	r3, #2
    1498:	d03f      	beq.n	151a <_gpio_set_direction+0xa2>
    149a:	2b00      	cmp	r3, #0
    149c:	d15d      	bne.n	155a <_gpio_set_direction+0xe2>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    149e:	683a      	ldr	r2, [r7, #0]
    14a0:	1dfb      	adds	r3, r7, #7
    14a2:	7819      	ldrb	r1, [r3, #0]
    14a4:	23c0      	movs	r3, #192	; 0xc0
    14a6:	05db      	lsls	r3, r3, #23
    14a8:	0018      	movs	r0, r3
    14aa:	4b31      	ldr	r3, [pc, #196]	; (1570 <_gpio_set_direction+0xf8>)
    14ac:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    14ae:	683b      	ldr	r3, [r7, #0]
    14b0:	041b      	lsls	r3, r3, #16
    14b2:	0c1b      	lsrs	r3, r3, #16
    14b4:	2280      	movs	r2, #128	; 0x80
    14b6:	05d2      	lsls	r2, r2, #23
    14b8:	431a      	orrs	r2, r3
    14ba:	1dfb      	adds	r3, r7, #7
    14bc:	781b      	ldrb	r3, [r3, #0]
    14be:	482d      	ldr	r0, [pc, #180]	; (1574 <_gpio_set_direction+0xfc>)
    14c0:	0019      	movs	r1, r3
    14c2:	4b2d      	ldr	r3, [pc, #180]	; (1578 <_gpio_set_direction+0x100>)
    14c4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    14c6:	683b      	ldr	r3, [r7, #0]
    14c8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    14ca:	22c0      	movs	r2, #192	; 0xc0
    14cc:	0612      	lsls	r2, r2, #24
    14ce:	431a      	orrs	r2, r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    14d0:	1dfb      	adds	r3, r7, #7
    14d2:	781b      	ldrb	r3, [r3, #0]
    14d4:	4827      	ldr	r0, [pc, #156]	; (1574 <_gpio_set_direction+0xfc>)
    14d6:	0019      	movs	r1, r3
    14d8:	4b27      	ldr	r3, [pc, #156]	; (1578 <_gpio_set_direction+0x100>)
    14da:	4798      	blx	r3
		break;
    14dc:	e043      	b.n	1566 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    14de:	683a      	ldr	r2, [r7, #0]
    14e0:	1dfb      	adds	r3, r7, #7
    14e2:	7819      	ldrb	r1, [r3, #0]
    14e4:	23c0      	movs	r3, #192	; 0xc0
    14e6:	05db      	lsls	r3, r3, #23
    14e8:	0018      	movs	r0, r3
    14ea:	4b21      	ldr	r3, [pc, #132]	; (1570 <_gpio_set_direction+0xf8>)
    14ec:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    14ee:	683b      	ldr	r3, [r7, #0]
    14f0:	041b      	lsls	r3, r3, #16
    14f2:	0c1b      	lsrs	r3, r3, #16
    14f4:	4a21      	ldr	r2, [pc, #132]	; (157c <_gpio_set_direction+0x104>)
    14f6:	431a      	orrs	r2, r3
    14f8:	1dfb      	adds	r3, r7, #7
    14fa:	781b      	ldrb	r3, [r3, #0]
    14fc:	481d      	ldr	r0, [pc, #116]	; (1574 <_gpio_set_direction+0xfc>)
    14fe:	0019      	movs	r1, r3
    1500:	4b1d      	ldr	r3, [pc, #116]	; (1578 <_gpio_set_direction+0x100>)
    1502:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    1504:	683b      	ldr	r3, [r7, #0]
    1506:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    1508:	4a1d      	ldr	r2, [pc, #116]	; (1580 <_gpio_set_direction+0x108>)
    150a:	431a      	orrs	r2, r3
		                                | ((mask & 0xffff0000) >> 16));
    150c:	1dfb      	adds	r3, r7, #7
    150e:	781b      	ldrb	r3, [r3, #0]
    1510:	4818      	ldr	r0, [pc, #96]	; (1574 <_gpio_set_direction+0xfc>)
    1512:	0019      	movs	r1, r3
    1514:	4b18      	ldr	r3, [pc, #96]	; (1578 <_gpio_set_direction+0x100>)
    1516:	4798      	blx	r3
		break;
    1518:	e025      	b.n	1566 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
    151a:	683a      	ldr	r2, [r7, #0]
    151c:	1dfb      	adds	r3, r7, #7
    151e:	7819      	ldrb	r1, [r3, #0]
    1520:	23c0      	movs	r3, #192	; 0xc0
    1522:	05db      	lsls	r3, r3, #23
    1524:	0018      	movs	r0, r3
    1526:	4b17      	ldr	r3, [pc, #92]	; (1584 <_gpio_set_direction+0x10c>)
    1528:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    152a:	683b      	ldr	r3, [r7, #0]
    152c:	041b      	lsls	r3, r3, #16
    152e:	0c1b      	lsrs	r3, r3, #16
    1530:	2280      	movs	r2, #128	; 0x80
    1532:	05d2      	lsls	r2, r2, #23
    1534:	431a      	orrs	r2, r3
    1536:	1dfb      	adds	r3, r7, #7
    1538:	781b      	ldrb	r3, [r3, #0]
    153a:	480e      	ldr	r0, [pc, #56]	; (1574 <_gpio_set_direction+0xfc>)
    153c:	0019      	movs	r1, r3
    153e:	4b0e      	ldr	r3, [pc, #56]	; (1578 <_gpio_set_direction+0x100>)
    1540:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1542:	683b      	ldr	r3, [r7, #0]
    1544:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1546:	22c0      	movs	r2, #192	; 0xc0
    1548:	0612      	lsls	r2, r2, #24
    154a:	431a      	orrs	r2, r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    154c:	1dfb      	adds	r3, r7, #7
    154e:	781b      	ldrb	r3, [r3, #0]
    1550:	4808      	ldr	r0, [pc, #32]	; (1574 <_gpio_set_direction+0xfc>)
    1552:	0019      	movs	r1, r3
    1554:	4b08      	ldr	r3, [pc, #32]	; (1578 <_gpio_set_direction+0x100>)
    1556:	4798      	blx	r3
		break;
    1558:	e005      	b.n	1566 <_gpio_set_direction+0xee>

	default:
		ASSERT(false);
    155a:	4b0b      	ldr	r3, [pc, #44]	; (1588 <_gpio_set_direction+0x110>)
    155c:	2245      	movs	r2, #69	; 0x45
    155e:	0019      	movs	r1, r3
    1560:	2000      	movs	r0, #0
    1562:	4b0a      	ldr	r3, [pc, #40]	; (158c <_gpio_set_direction+0x114>)
    1564:	4798      	blx	r3
	}
}
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	46bd      	mov	sp, r7
    156a:	b002      	add	sp, #8
    156c:	bd80      	pop	{r7, pc}
    156e:	46c0      	nop			; (mov r8, r8)
    1570:	00001239 	.word	0x00001239
    1574:	41004400 	.word	0x41004400
    1578:	0000144d 	.word	0x0000144d
    157c:	40020000 	.word	0x40020000
    1580:	c0020000 	.word	0xc0020000
    1584:	0000120d 	.word	0x0000120d
    1588:	000045a4 	.word	0x000045a4
    158c:	00003369 	.word	0x00003369

00001590 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1590:	b580      	push	{r7, lr}
    1592:	b082      	sub	sp, #8
    1594:	af00      	add	r7, sp, #0
    1596:	6039      	str	r1, [r7, #0]
    1598:	0011      	movs	r1, r2
    159a:	1dfb      	adds	r3, r7, #7
    159c:	1c02      	adds	r2, r0, #0
    159e:	701a      	strb	r2, [r3, #0]
    15a0:	1dbb      	adds	r3, r7, #6
    15a2:	1c0a      	adds	r2, r1, #0
    15a4:	701a      	strb	r2, [r3, #0]
	if (level) {
    15a6:	1dbb      	adds	r3, r7, #6
    15a8:	781b      	ldrb	r3, [r3, #0]
    15aa:	2b00      	cmp	r3, #0
    15ac:	d008      	beq.n	15c0 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    15ae:	683a      	ldr	r2, [r7, #0]
    15b0:	1dfb      	adds	r3, r7, #7
    15b2:	7819      	ldrb	r1, [r3, #0]
    15b4:	23c0      	movs	r3, #192	; 0xc0
    15b6:	05db      	lsls	r3, r3, #23
    15b8:	0018      	movs	r0, r3
    15ba:	4b07      	ldr	r3, [pc, #28]	; (15d8 <_gpio_set_level+0x48>)
    15bc:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
    15be:	e007      	b.n	15d0 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    15c0:	683a      	ldr	r2, [r7, #0]
    15c2:	1dfb      	adds	r3, r7, #7
    15c4:	7819      	ldrb	r1, [r3, #0]
    15c6:	23c0      	movs	r3, #192	; 0xc0
    15c8:	05db      	lsls	r3, r3, #23
    15ca:	0018      	movs	r0, r3
    15cc:	4b03      	ldr	r3, [pc, #12]	; (15dc <_gpio_set_level+0x4c>)
    15ce:	4798      	blx	r3
}
    15d0:	46c0      	nop			; (mov r8, r8)
    15d2:	46bd      	mov	sp, r7
    15d4:	b002      	add	sp, #8
    15d6:	bd80      	pop	{r7, pc}
    15d8:	00001265 	.word	0x00001265
    15dc:	00001291 	.word	0x00001291

000015e0 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    15e0:	b590      	push	{r4, r7, lr}
    15e2:	b085      	sub	sp, #20
    15e4:	af00      	add	r7, sp, #0
    15e6:	6078      	str	r0, [r7, #4]
    15e8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    15ea:	687b      	ldr	r3, [r7, #4]
    15ec:	095a      	lsrs	r2, r3, #5
    15ee:	230f      	movs	r3, #15
    15f0:	18fb      	adds	r3, r7, r3
    15f2:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    15f4:	687b      	ldr	r3, [r7, #4]
    15f6:	b2da      	uxtb	r2, r3
    15f8:	230e      	movs	r3, #14
    15fa:	18fb      	adds	r3, r7, r3
    15fc:	211f      	movs	r1, #31
    15fe:	400a      	ands	r2, r1
    1600:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1602:	683b      	ldr	r3, [r7, #0]
    1604:	3301      	adds	r3, #1
    1606:	d10a      	bne.n	161e <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1608:	230e      	movs	r3, #14
    160a:	18fb      	adds	r3, r7, r3
    160c:	781a      	ldrb	r2, [r3, #0]
    160e:	230f      	movs	r3, #15
    1610:	18fb      	adds	r3, r7, r3
    1612:	7819      	ldrb	r1, [r3, #0]
    1614:	481b      	ldr	r0, [pc, #108]	; (1684 <_gpio_set_pin_function+0xa4>)
    1616:	2300      	movs	r3, #0
    1618:	4c1b      	ldr	r4, [pc, #108]	; (1688 <_gpio_set_pin_function+0xa8>)
    161a:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    161c:	e02e      	b.n	167c <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    161e:	230e      	movs	r3, #14
    1620:	18fb      	adds	r3, r7, r3
    1622:	781a      	ldrb	r2, [r3, #0]
    1624:	230f      	movs	r3, #15
    1626:	18fb      	adds	r3, r7, r3
    1628:	7819      	ldrb	r1, [r3, #0]
    162a:	4816      	ldr	r0, [pc, #88]	; (1684 <_gpio_set_pin_function+0xa4>)
    162c:	2301      	movs	r3, #1
    162e:	4c16      	ldr	r4, [pc, #88]	; (1688 <_gpio_set_pin_function+0xa8>)
    1630:	47a0      	blx	r4
		if (pin & 1) {
    1632:	230e      	movs	r3, #14
    1634:	18fb      	adds	r3, r7, r3
    1636:	781b      	ldrb	r3, [r3, #0]
    1638:	2201      	movs	r2, #1
    163a:	4013      	ands	r3, r2
    163c:	d00f      	beq.n	165e <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    163e:	230e      	movs	r3, #14
    1640:	18fb      	adds	r3, r7, r3
    1642:	781b      	ldrb	r3, [r3, #0]
    1644:	105b      	asrs	r3, r3, #1
    1646:	b2da      	uxtb	r2, r3
    1648:	683b      	ldr	r3, [r7, #0]
    164a:	b2d8      	uxtb	r0, r3
    164c:	230f      	movs	r3, #15
    164e:	18fb      	adds	r3, r7, r3
    1650:	7819      	ldrb	r1, [r3, #0]
    1652:	4c0c      	ldr	r4, [pc, #48]	; (1684 <_gpio_set_pin_function+0xa4>)
    1654:	0003      	movs	r3, r0
    1656:	0020      	movs	r0, r4
    1658:	4c0c      	ldr	r4, [pc, #48]	; (168c <_gpio_set_pin_function+0xac>)
    165a:	47a0      	blx	r4
}
    165c:	e00e      	b.n	167c <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    165e:	230e      	movs	r3, #14
    1660:	18fb      	adds	r3, r7, r3
    1662:	781b      	ldrb	r3, [r3, #0]
    1664:	105b      	asrs	r3, r3, #1
    1666:	b2da      	uxtb	r2, r3
    1668:	683b      	ldr	r3, [r7, #0]
    166a:	b2d8      	uxtb	r0, r3
    166c:	230f      	movs	r3, #15
    166e:	18fb      	adds	r3, r7, r3
    1670:	7819      	ldrb	r1, [r3, #0]
    1672:	4c04      	ldr	r4, [pc, #16]	; (1684 <_gpio_set_pin_function+0xa4>)
    1674:	0003      	movs	r3, r0
    1676:	0020      	movs	r0, r4
    1678:	4c05      	ldr	r4, [pc, #20]	; (1690 <_gpio_set_pin_function+0xb0>)
    167a:	47a0      	blx	r4
}
    167c:	46c0      	nop			; (mov r8, r8)
    167e:	46bd      	mov	sp, r7
    1680:	b005      	add	sp, #20
    1682:	bd90      	pop	{r4, r7, pc}
    1684:	41004400 	.word	0x41004400
    1688:	000013cb 	.word	0x000013cb
    168c:	00001345 	.word	0x00001345
    1690:	000012bd 	.word	0x000012bd

00001694 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1694:	b580      	push	{r7, lr}
    1696:	b082      	sub	sp, #8
    1698:	af00      	add	r7, sp, #0
    169a:	6078      	str	r0, [r7, #4]
    169c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    169e:	683a      	ldr	r2, [r7, #0]
    16a0:	687b      	ldr	r3, [r7, #4]
    16a2:	0011      	movs	r1, r2
    16a4:	0018      	movs	r0, r3
    16a6:	4b03      	ldr	r3, [pc, #12]	; (16b4 <gpio_set_pin_function+0x20>)
    16a8:	4798      	blx	r3
}
    16aa:	46c0      	nop			; (mov r8, r8)
    16ac:	46bd      	mov	sp, r7
    16ae:	b002      	add	sp, #8
    16b0:	bd80      	pop	{r7, pc}
    16b2:	46c0      	nop			; (mov r8, r8)
    16b4:	000015e1 	.word	0x000015e1

000016b8 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    16b8:	b580      	push	{r7, lr}
    16ba:	b082      	sub	sp, #8
    16bc:	af00      	add	r7, sp, #0
    16be:	0002      	movs	r2, r0
    16c0:	1dfb      	adds	r3, r7, #7
    16c2:	701a      	strb	r2, [r3, #0]
    16c4:	1dbb      	adds	r3, r7, #6
    16c6:	1c0a      	adds	r2, r1, #0
    16c8:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    16ca:	1dfb      	adds	r3, r7, #7
    16cc:	781b      	ldrb	r3, [r3, #0]
    16ce:	115b      	asrs	r3, r3, #5
    16d0:	b2d8      	uxtb	r0, r3
    16d2:	1dfb      	adds	r3, r7, #7
    16d4:	781b      	ldrb	r3, [r3, #0]
    16d6:	001a      	movs	r2, r3
    16d8:	231f      	movs	r3, #31
    16da:	4013      	ands	r3, r2
    16dc:	2201      	movs	r2, #1
    16de:	409a      	lsls	r2, r3
    16e0:	0011      	movs	r1, r2
    16e2:	1dbb      	adds	r3, r7, #6
    16e4:	781b      	ldrb	r3, [r3, #0]
    16e6:	001a      	movs	r2, r3
    16e8:	4b02      	ldr	r3, [pc, #8]	; (16f4 <gpio_set_pin_direction+0x3c>)
    16ea:	4798      	blx	r3
}
    16ec:	46c0      	nop			; (mov r8, r8)
    16ee:	46bd      	mov	sp, r7
    16f0:	b002      	add	sp, #8
    16f2:	bd80      	pop	{r7, pc}
    16f4:	00001479 	.word	0x00001479

000016f8 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    16f8:	b580      	push	{r7, lr}
    16fa:	b082      	sub	sp, #8
    16fc:	af00      	add	r7, sp, #0
    16fe:	0002      	movs	r2, r0
    1700:	1dfb      	adds	r3, r7, #7
    1702:	701a      	strb	r2, [r3, #0]
    1704:	1dbb      	adds	r3, r7, #6
    1706:	1c0a      	adds	r2, r1, #0
    1708:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    170a:	1dfb      	adds	r3, r7, #7
    170c:	781b      	ldrb	r3, [r3, #0]
    170e:	115b      	asrs	r3, r3, #5
    1710:	b2d8      	uxtb	r0, r3
    1712:	1dfb      	adds	r3, r7, #7
    1714:	781b      	ldrb	r3, [r3, #0]
    1716:	001a      	movs	r2, r3
    1718:	231f      	movs	r3, #31
    171a:	4013      	ands	r3, r2
    171c:	2201      	movs	r2, #1
    171e:	409a      	lsls	r2, r3
    1720:	0011      	movs	r1, r2
    1722:	1dbb      	adds	r3, r7, #6
    1724:	781b      	ldrb	r3, [r3, #0]
    1726:	001a      	movs	r2, r3
    1728:	4b02      	ldr	r3, [pc, #8]	; (1734 <gpio_set_pin_level+0x3c>)
    172a:	4798      	blx	r3
}
    172c:	46c0      	nop			; (mov r8, r8)
    172e:	46bd      	mov	sp, r7
    1730:	b002      	add	sp, #8
    1732:	bd80      	pop	{r7, pc}
    1734:	00001591 	.word	0x00001591

00001738 <_ZN17LEDLighting_ClassC1Ev>:




// default constructor
LEDLighting_Class::LEDLighting_Class()
    1738:	b580      	push	{r7, lr}
    173a:	b082      	sub	sp, #8
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
{
		totalPins=sizeof(PinMappingLeft)+sizeof(PinMappingRight);
    1740:	687b      	ldr	r3, [r7, #4]
    1742:	22e8      	movs	r2, #232	; 0xe8
    1744:	2102      	movs	r1, #2
    1746:	5499      	strb	r1, [r3, r2]
		

} //LEDMapping_Class
    1748:	687b      	ldr	r3, [r7, #4]
    174a:	0018      	movs	r0, r3
    174c:	46bd      	mov	sp, r7
    174e:	b002      	add	sp, #8
    1750:	bd80      	pop	{r7, pc}

00001752 <_ZN17LEDLighting_ClassD1Ev>:

// default destructor
LEDLighting_Class::~LEDLighting_Class()
    1752:	b580      	push	{r7, lr}
    1754:	b082      	sub	sp, #8
    1756:	af00      	add	r7, sp, #0
    1758:	6078      	str	r0, [r7, #4]
{
} //~LEDMapping_Class
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	0018      	movs	r0, r3
    175e:	46bd      	mov	sp, r7
    1760:	b002      	add	sp, #8
    1762:	bd80      	pop	{r7, pc}

00001764 <_ZN17LEDLighting_Class11InitMappingEv>:

void	LEDLighting_Class::InitMapping(void){
    1764:	b590      	push	{r4, r7, lr}
    1766:	b0a3      	sub	sp, #140	; 0x8c
    1768:	af00      	add	r7, sp, #0
    176a:	6078      	str	r0, [r7, #4]
		0,
		
		0,
		
		
	};
    176c:	2368      	movs	r3, #104	; 0x68
    176e:	18fb      	adds	r3, r7, r3
    1770:	4a55      	ldr	r2, [pc, #340]	; (18c8 <_ZN17LEDLighting_Class11InitMappingEv+0x164>)
    1772:	ca13      	ldmia	r2!, {r0, r1, r4}
    1774:	c313      	stmia	r3!, {r0, r1, r4}
    1776:	ca13      	ldmia	r2!, {r0, r1, r4}
    1778:	c313      	stmia	r3!, {r0, r1, r4}
    177a:	6811      	ldr	r1, [r2, #0]
    177c:	6019      	str	r1, [r3, #0]
    177e:	7912      	ldrb	r2, [r2, #4]
    1780:	711a      	strb	r2, [r3, #4]
	for (i = 0; i <(int)sizeof(portsleftleft); i++)
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	22ec      	movs	r2, #236	; 0xec
    1786:	2100      	movs	r1, #0
    1788:	5099      	str	r1, [r3, r2]
    178a:	687b      	ldr	r3, [r7, #4]
    178c:	22ec      	movs	r2, #236	; 0xec
    178e:	589b      	ldr	r3, [r3, r2]
    1790:	2b1c      	cmp	r3, #28
    1792:	dc12      	bgt.n	17ba <_ZN17LEDLighting_Class11InitMappingEv+0x56>
	{
		leftPins.portsLeft[i]=portsleftleft[i];
    1794:	687b      	ldr	r3, [r7, #4]
    1796:	22ec      	movs	r2, #236	; 0xec
    1798:	589b      	ldr	r3, [r3, r2]
    179a:	687a      	ldr	r2, [r7, #4]
    179c:	21ec      	movs	r1, #236	; 0xec
    179e:	5852      	ldr	r2, [r2, r1]
    17a0:	2168      	movs	r1, #104	; 0x68
    17a2:	1879      	adds	r1, r7, r1
    17a4:	5c89      	ldrb	r1, [r1, r2]
    17a6:	687a      	ldr	r2, [r7, #4]
    17a8:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i <(int)sizeof(portsleftleft); i++)
    17aa:	687b      	ldr	r3, [r7, #4]
    17ac:	22ec      	movs	r2, #236	; 0xec
    17ae:	589b      	ldr	r3, [r3, r2]
    17b0:	1c5a      	adds	r2, r3, #1
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	21ec      	movs	r1, #236	; 0xec
    17b6:	505a      	str	r2, [r3, r1]
    17b8:	e7e7      	b.n	178a <_ZN17LEDLighting_Class11InitMappingEv+0x26>
		
		3,
		
		2,

	};
    17ba:	2348      	movs	r3, #72	; 0x48
    17bc:	18fb      	adds	r3, r7, r3
    17be:	4a43      	ldr	r2, [pc, #268]	; (18cc <_ZN17LEDLighting_Class11InitMappingEv+0x168>)
    17c0:	ca13      	ldmia	r2!, {r0, r1, r4}
    17c2:	c313      	stmia	r3!, {r0, r1, r4}
    17c4:	ca13      	ldmia	r2!, {r0, r1, r4}
    17c6:	c313      	stmia	r3!, {r0, r1, r4}
    17c8:	6811      	ldr	r1, [r2, #0]
    17ca:	6019      	str	r1, [r3, #0]
    17cc:	7912      	ldrb	r2, [r2, #4]
    17ce:	711a      	strb	r2, [r3, #4]
	for (i = 0; i < (int)sizeof(pinsLeftLeft); i++)
    17d0:	687b      	ldr	r3, [r7, #4]
    17d2:	22ec      	movs	r2, #236	; 0xec
    17d4:	2100      	movs	r1, #0
    17d6:	5099      	str	r1, [r3, r2]
    17d8:	687b      	ldr	r3, [r7, #4]
    17da:	22ec      	movs	r2, #236	; 0xec
    17dc:	589b      	ldr	r3, [r3, r2]
    17de:	2b1c      	cmp	r3, #28
    17e0:	dc14      	bgt.n	180c <_ZN17LEDLighting_Class11InitMappingEv+0xa8>
	{
		leftPins.pinsLeft[i]=pinsLeftLeft[i];
    17e2:	687b      	ldr	r3, [r7, #4]
    17e4:	22ec      	movs	r2, #236	; 0xec
    17e6:	589b      	ldr	r3, [r3, r2]
    17e8:	687a      	ldr	r2, [r7, #4]
    17ea:	21ec      	movs	r1, #236	; 0xec
    17ec:	5852      	ldr	r2, [r2, r1]
    17ee:	2148      	movs	r1, #72	; 0x48
    17f0:	1879      	adds	r1, r7, r1
    17f2:	5c89      	ldrb	r1, [r1, r2]
    17f4:	687a      	ldr	r2, [r7, #4]
    17f6:	18d3      	adds	r3, r2, r3
    17f8:	1c0a      	adds	r2, r1, #0
    17fa:	775a      	strb	r2, [r3, #29]
	for (i = 0; i < (int)sizeof(pinsLeftLeft); i++)
    17fc:	687b      	ldr	r3, [r7, #4]
    17fe:	22ec      	movs	r2, #236	; 0xec
    1800:	589b      	ldr	r3, [r3, r2]
    1802:	1c5a      	adds	r2, r3, #1
    1804:	687b      	ldr	r3, [r7, #4]
    1806:	21ec      	movs	r1, #236	; 0xec
    1808:	505a      	str	r2, [r3, r1]
    180a:	e7e5      	b.n	17d8 <_ZN17LEDLighting_Class11InitMappingEv+0x74>

		0,

		0,

	};
    180c:	2328      	movs	r3, #40	; 0x28
    180e:	18fb      	adds	r3, r7, r3
    1810:	4a2f      	ldr	r2, [pc, #188]	; (18d0 <_ZN17LEDLighting_Class11InitMappingEv+0x16c>)
    1812:	ca13      	ldmia	r2!, {r0, r1, r4}
    1814:	c313      	stmia	r3!, {r0, r1, r4}
    1816:	ca13      	ldmia	r2!, {r0, r1, r4}
    1818:	c313      	stmia	r3!, {r0, r1, r4}
    181a:	6811      	ldr	r1, [r2, #0]
    181c:	6019      	str	r1, [r3, #0]
    181e:	7912      	ldrb	r2, [r2, #4]
    1820:	711a      	strb	r2, [r3, #4]
		for (i = 0; i < (int)sizeof(portsRightRight); i++)
    1822:	687b      	ldr	r3, [r7, #4]
    1824:	22ec      	movs	r2, #236	; 0xec
    1826:	2100      	movs	r1, #0
    1828:	5099      	str	r1, [r3, r2]
    182a:	687b      	ldr	r3, [r7, #4]
    182c:	22ec      	movs	r2, #236	; 0xec
    182e:	589b      	ldr	r3, [r3, r2]
    1830:	2b1c      	cmp	r3, #28
    1832:	dc16      	bgt.n	1862 <_ZN17LEDLighting_Class11InitMappingEv+0xfe>
		{
			rightPins.portsRight[i]=portsRightRight[i];
    1834:	687b      	ldr	r3, [r7, #4]
    1836:	22ec      	movs	r2, #236	; 0xec
    1838:	589b      	ldr	r3, [r3, r2]
    183a:	687a      	ldr	r2, [r7, #4]
    183c:	21ec      	movs	r1, #236	; 0xec
    183e:	5852      	ldr	r2, [r2, r1]
    1840:	2128      	movs	r1, #40	; 0x28
    1842:	1879      	adds	r1, r7, r1
    1844:	5c88      	ldrb	r0, [r1, r2]
    1846:	687a      	ldr	r2, [r7, #4]
    1848:	213a      	movs	r1, #58	; 0x3a
    184a:	18d3      	adds	r3, r2, r3
    184c:	185b      	adds	r3, r3, r1
    184e:	1c02      	adds	r2, r0, #0
    1850:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < (int)sizeof(portsRightRight); i++)
    1852:	687b      	ldr	r3, [r7, #4]
    1854:	22ec      	movs	r2, #236	; 0xec
    1856:	589b      	ldr	r3, [r3, r2]
    1858:	1c5a      	adds	r2, r3, #1
    185a:	687b      	ldr	r3, [r7, #4]
    185c:	21ec      	movs	r1, #236	; 0xec
    185e:	505a      	str	r2, [r3, r1]
    1860:	e7e3      	b.n	182a <_ZN17LEDLighting_Class11InitMappingEv+0xc6>
		8,
		
		31,
		
		30,
	};
    1862:	2308      	movs	r3, #8
    1864:	18fb      	adds	r3, r7, r3
    1866:	4a1b      	ldr	r2, [pc, #108]	; (18d4 <_ZN17LEDLighting_Class11InitMappingEv+0x170>)
    1868:	ca13      	ldmia	r2!, {r0, r1, r4}
    186a:	c313      	stmia	r3!, {r0, r1, r4}
    186c:	ca13      	ldmia	r2!, {r0, r1, r4}
    186e:	c313      	stmia	r3!, {r0, r1, r4}
    1870:	6811      	ldr	r1, [r2, #0]
    1872:	6019      	str	r1, [r3, #0]
    1874:	7912      	ldrb	r2, [r2, #4]
    1876:	711a      	strb	r2, [r3, #4]
			for (i = 0; i <(int)sizeof(pinsRightRight); i++)
    1878:	687b      	ldr	r3, [r7, #4]
    187a:	22ec      	movs	r2, #236	; 0xec
    187c:	2100      	movs	r1, #0
    187e:	5099      	str	r1, [r3, r2]
    1880:	687b      	ldr	r3, [r7, #4]
    1882:	22ec      	movs	r2, #236	; 0xec
    1884:	589b      	ldr	r3, [r3, r2]
    1886:	2b1c      	cmp	r3, #28
    1888:	dc16      	bgt.n	18b8 <_ZN17LEDLighting_Class11InitMappingEv+0x154>
			{
				rightPins.pinsRight[i]=pinsRightRight[i];
    188a:	687b      	ldr	r3, [r7, #4]
    188c:	22ec      	movs	r2, #236	; 0xec
    188e:	589b      	ldr	r3, [r3, r2]
    1890:	687a      	ldr	r2, [r7, #4]
    1892:	21ec      	movs	r1, #236	; 0xec
    1894:	5852      	ldr	r2, [r2, r1]
    1896:	2108      	movs	r1, #8
    1898:	1879      	adds	r1, r7, r1
    189a:	5c88      	ldrb	r0, [r1, r2]
    189c:	687a      	ldr	r2, [r7, #4]
    189e:	2157      	movs	r1, #87	; 0x57
    18a0:	18d3      	adds	r3, r2, r3
    18a2:	185b      	adds	r3, r3, r1
    18a4:	1c02      	adds	r2, r0, #0
    18a6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i <(int)sizeof(pinsRightRight); i++)
    18a8:	687b      	ldr	r3, [r7, #4]
    18aa:	22ec      	movs	r2, #236	; 0xec
    18ac:	589b      	ldr	r3, [r3, r2]
    18ae:	1c5a      	adds	r2, r3, #1
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	21ec      	movs	r1, #236	; 0xec
    18b4:	505a      	str	r2, [r3, r1]
    18b6:	e7e3      	b.n	1880 <_ZN17LEDLighting_Class11InitMappingEv+0x11c>
			}
		totalPins=kTOTALLEFTPINS+kTOTALRIGHTPINS;	
    18b8:	687b      	ldr	r3, [r7, #4]
    18ba:	22e8      	movs	r2, #232	; 0xe8
    18bc:	213a      	movs	r1, #58	; 0x3a
    18be:	5499      	strb	r1, [r3, r2]
}
    18c0:	46c0      	nop			; (mov r8, r8)
    18c2:	46bd      	mov	sp, r7
    18c4:	b023      	add	sp, #140	; 0x8c
    18c6:	bd90      	pop	{r4, r7, pc}
    18c8:	000045e8 	.word	0x000045e8
    18cc:	00004608 	.word	0x00004608
    18d0:	00004628 	.word	0x00004628
    18d4:	00004648 	.word	0x00004648

000018d8 <_ZN17LEDLighting_Class6SetPinEhh>:

void	LEDLighting_Class::SetPin(uint8_t	pt,uint8_t pn){
    18d8:	b580      	push	{r7, lr}
    18da:	b082      	sub	sp, #8
    18dc:	af00      	add	r7, sp, #0
    18de:	6078      	str	r0, [r7, #4]
    18e0:	0008      	movs	r0, r1
    18e2:	0011      	movs	r1, r2
    18e4:	1cfb      	adds	r3, r7, #3
    18e6:	1c02      	adds	r2, r0, #0
    18e8:	701a      	strb	r2, [r3, #0]
    18ea:	1cbb      	adds	r3, r7, #2
    18ec:	1c0a      	adds	r2, r1, #0
    18ee:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(GPIO(pt,pn),true);
    18f0:	1cfb      	adds	r3, r7, #3
    18f2:	781b      	ldrb	r3, [r3, #0]
    18f4:	015b      	lsls	r3, r3, #5
    18f6:	b2da      	uxtb	r2, r3
    18f8:	1cbb      	adds	r3, r7, #2
    18fa:	781b      	ldrb	r3, [r3, #0]
    18fc:	211f      	movs	r1, #31
    18fe:	400b      	ands	r3, r1
    1900:	b2db      	uxtb	r3, r3
    1902:	18d3      	adds	r3, r2, r3
    1904:	b2db      	uxtb	r3, r3
    1906:	2101      	movs	r1, #1
    1908:	0018      	movs	r0, r3
    190a:	4b03      	ldr	r3, [pc, #12]	; (1918 <_ZN17LEDLighting_Class6SetPinEhh+0x40>)
    190c:	4798      	blx	r3
	
}
    190e:	46c0      	nop			; (mov r8, r8)
    1910:	46bd      	mov	sp, r7
    1912:	b002      	add	sp, #8
    1914:	bd80      	pop	{r7, pc}
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	000016f9 	.word	0x000016f9

0000191c <_ZN17LEDLighting_Class8ClearPinEhh>:
void	LEDLighting_Class::ClearPin(uint8_t	pt,uint8_t pn){
    191c:	b580      	push	{r7, lr}
    191e:	b082      	sub	sp, #8
    1920:	af00      	add	r7, sp, #0
    1922:	6078      	str	r0, [r7, #4]
    1924:	0008      	movs	r0, r1
    1926:	0011      	movs	r1, r2
    1928:	1cfb      	adds	r3, r7, #3
    192a:	1c02      	adds	r2, r0, #0
    192c:	701a      	strb	r2, [r3, #0]
    192e:	1cbb      	adds	r3, r7, #2
    1930:	1c0a      	adds	r2, r1, #0
    1932:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(GPIO(pt,pn),false);
    1934:	1cfb      	adds	r3, r7, #3
    1936:	781b      	ldrb	r3, [r3, #0]
    1938:	015b      	lsls	r3, r3, #5
    193a:	b2da      	uxtb	r2, r3
    193c:	1cbb      	adds	r3, r7, #2
    193e:	781b      	ldrb	r3, [r3, #0]
    1940:	211f      	movs	r1, #31
    1942:	400b      	ands	r3, r1
    1944:	b2db      	uxtb	r3, r3
    1946:	18d3      	adds	r3, r2, r3
    1948:	b2db      	uxtb	r3, r3
    194a:	2100      	movs	r1, #0
    194c:	0018      	movs	r0, r3
    194e:	4b03      	ldr	r3, [pc, #12]	; (195c <_ZN17LEDLighting_Class8ClearPinEhh+0x40>)
    1950:	4798      	blx	r3
	
}
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	46bd      	mov	sp, r7
    1956:	b002      	add	sp, #8
    1958:	bd80      	pop	{r7, pc}
    195a:	46c0      	nop			; (mov r8, r8)
    195c:	000016f9 	.word	0x000016f9

00001960 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds>:
void LEDLighting_Class::DefineColors(StateLeds&	st){
    1960:	b590      	push	{r4, r7, lr}
    1962:	b083      	sub	sp, #12
    1964:	af00      	add	r7, sp, #0
    1966:	6078      	str	r0, [r7, #4]
    1968:	6039      	str	r1, [r7, #0]
	
	j=0;
    196a:	687b      	ldr	r3, [r7, #4]
    196c:	22f0      	movs	r2, #240	; 0xf0
    196e:	2100      	movs	r1, #0
    1970:	5099      	str	r1, [r3, r2]
	for (i = 0; i < totalPins; i++){
    1972:	687b      	ldr	r3, [r7, #4]
    1974:	22ec      	movs	r2, #236	; 0xec
    1976:	2100      	movs	r1, #0
    1978:	5099      	str	r1, [r3, r2]
    197a:	687b      	ldr	r3, [r7, #4]
    197c:	22ec      	movs	r2, #236	; 0xec
    197e:	589b      	ldr	r3, [r3, r2]
    1980:	687a      	ldr	r2, [r7, #4]
    1982:	21e8      	movs	r1, #232	; 0xe8
    1984:	5c52      	ldrb	r2, [r2, r1]
    1986:	4293      	cmp	r3, r2
    1988:	da3c      	bge.n	1a04 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0xa4>
		if (i<kTOTALLEFTPINS)
    198a:	687b      	ldr	r3, [r7, #4]
    198c:	22ec      	movs	r2, #236	; 0xec
    198e:	589b      	ldr	r3, [r3, r2]
    1990:	2b1c      	cmp	r3, #28
    1992:	dc12      	bgt.n	19ba <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0x5a>
		{
			st.color[i]=i%3;
    1994:	687b      	ldr	r3, [r7, #4]
    1996:	22ec      	movs	r2, #236	; 0xec
    1998:	589c      	ldr	r4, [r3, r2]
    199a:	687b      	ldr	r3, [r7, #4]
    199c:	22ec      	movs	r2, #236	; 0xec
    199e:	589a      	ldr	r2, [r3, r2]
    19a0:	4b1f      	ldr	r3, [pc, #124]	; (1a20 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0xc0>)
    19a2:	2103      	movs	r1, #3
    19a4:	0010      	movs	r0, r2
    19a6:	4798      	blx	r3
    19a8:	000b      	movs	r3, r1
    19aa:	b2d9      	uxtb	r1, r3
    19ac:	683b      	ldr	r3, [r7, #0]
    19ae:	223a      	movs	r2, #58	; 0x3a
    19b0:	191b      	adds	r3, r3, r4
    19b2:	189b      	adds	r3, r3, r2
    19b4:	1c0a      	adds	r2, r1, #0
    19b6:	701a      	strb	r2, [r3, #0]
    19b8:	e01c      	b.n	19f4 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0x94>
		} 
		else
		{
			st.color[i]=2-((j+1)%3);
    19ba:	687b      	ldr	r3, [r7, #4]
    19bc:	22ec      	movs	r2, #236	; 0xec
    19be:	589c      	ldr	r4, [r3, r2]
    19c0:	687b      	ldr	r3, [r7, #4]
    19c2:	22f0      	movs	r2, #240	; 0xf0
    19c4:	589b      	ldr	r3, [r3, r2]
    19c6:	1c5a      	adds	r2, r3, #1
    19c8:	4b15      	ldr	r3, [pc, #84]	; (1a20 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0xc0>)
    19ca:	2103      	movs	r1, #3
    19cc:	0010      	movs	r0, r2
    19ce:	4798      	blx	r3
    19d0:	000b      	movs	r3, r1
    19d2:	b2db      	uxtb	r3, r3
    19d4:	2202      	movs	r2, #2
    19d6:	1ad3      	subs	r3, r2, r3
    19d8:	b2d9      	uxtb	r1, r3
    19da:	683b      	ldr	r3, [r7, #0]
    19dc:	223a      	movs	r2, #58	; 0x3a
    19de:	191b      	adds	r3, r3, r4
    19e0:	189b      	adds	r3, r3, r2
    19e2:	1c0a      	adds	r2, r1, #0
    19e4:	701a      	strb	r2, [r3, #0]
			j++;
    19e6:	687b      	ldr	r3, [r7, #4]
    19e8:	22f0      	movs	r2, #240	; 0xf0
    19ea:	589b      	ldr	r3, [r3, r2]
    19ec:	1c5a      	adds	r2, r3, #1
    19ee:	687b      	ldr	r3, [r7, #4]
    19f0:	21f0      	movs	r1, #240	; 0xf0
    19f2:	505a      	str	r2, [r3, r1]
	for (i = 0; i < totalPins; i++){
    19f4:	687b      	ldr	r3, [r7, #4]
    19f6:	22ec      	movs	r2, #236	; 0xec
    19f8:	589b      	ldr	r3, [r3, r2]
    19fa:	1c5a      	adds	r2, r3, #1
    19fc:	687b      	ldr	r3, [r7, #4]
    19fe:	21ec      	movs	r1, #236	; 0xec
    1a00:	505a      	str	r2, [r3, r1]
    1a02:	e7ba      	b.n	197a <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0x1a>
			
		}
		
	}
	localState=st;
    1a04:	687a      	ldr	r2, [r7, #4]
    1a06:	2380      	movs	r3, #128	; 0x80
    1a08:	005b      	lsls	r3, r3, #1
    1a0a:	6839      	ldr	r1, [r7, #0]
    1a0c:	18d3      	adds	r3, r2, r3
    1a0e:	2274      	movs	r2, #116	; 0x74
    1a10:	0018      	movs	r0, r3
    1a12:	4b04      	ldr	r3, [pc, #16]	; (1a24 <_ZN17LEDLighting_Class12DefineColorsER9StateLeds+0xc4>)
    1a14:	4798      	blx	r3
	
}
    1a16:	46c0      	nop			; (mov r8, r8)
    1a18:	46bd      	mov	sp, r7
    1a1a:	b003      	add	sp, #12
    1a1c:	bd90      	pop	{r4, r7, pc}
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	00004351 	.word	0x00004351
    1a24:	000043b5 	.word	0x000043b5

00001a28 <_ZN17LEDLighting_Class16SetBothSidesPinsER12BothSidePins>:
void	LEDLighting_Class::SetBothSidesPins(BothSidePins& bp){
    1a28:	b580      	push	{r7, lr}
    1a2a:	b082      	sub	sp, #8
    1a2c:	af00      	add	r7, sp, #0
    1a2e:	6078      	str	r0, [r7, #4]
    1a30:	6039      	str	r1, [r7, #0]
	pins=bp;
    1a32:	687b      	ldr	r3, [r7, #4]
    1a34:	683a      	ldr	r2, [r7, #0]
    1a36:	3374      	adds	r3, #116	; 0x74
    1a38:	0011      	movs	r1, r2
    1a3a:	2274      	movs	r2, #116	; 0x74
    1a3c:	0018      	movs	r0, r3
    1a3e:	4b05      	ldr	r3, [pc, #20]	; (1a54 <_ZN17LEDLighting_Class16SetBothSidesPinsER12BothSidePins+0x2c>)
    1a40:	4798      	blx	r3
	ConfiguratePins();
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	0018      	movs	r0, r3
    1a46:	4b04      	ldr	r3, [pc, #16]	; (1a58 <_ZN17LEDLighting_Class16SetBothSidesPinsER12BothSidePins+0x30>)
    1a48:	4798      	blx	r3
}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	46bd      	mov	sp, r7
    1a4e:	b002      	add	sp, #8
    1a50:	bd80      	pop	{r7, pc}
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	000043b5 	.word	0x000043b5
    1a58:	00001a5d 	.word	0x00001a5d

00001a5c <_ZN17LEDLighting_Class15ConfiguratePinsEv>:

void	LEDLighting_Class::ConfiguratePins(void){
    1a5c:	b580      	push	{r7, lr}
    1a5e:	b082      	sub	sp, #8
    1a60:	af00      	add	r7, sp, #0
    1a62:	6078      	str	r0, [r7, #4]
	for (i = 0; i < totalPins; i++)
    1a64:	687b      	ldr	r3, [r7, #4]
    1a66:	22ec      	movs	r2, #236	; 0xec
    1a68:	2100      	movs	r1, #0
    1a6a:	5099      	str	r1, [r3, r2]
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	22ec      	movs	r2, #236	; 0xec
    1a70:	589b      	ldr	r3, [r3, r2]
    1a72:	687a      	ldr	r2, [r7, #4]
    1a74:	21e8      	movs	r1, #232	; 0xe8
    1a76:	5c52      	ldrb	r2, [r2, r1]
    1a78:	4293      	cmp	r3, r2
    1a7a:	da5a      	bge.n	1b32 <_ZN17LEDLighting_Class15ConfiguratePinsEv+0xd6>
	{
		gpio_set_pin_direction(GPIO(pins.allPorts[i],pins.allPins[i]), GPIO_DIRECTION_OUT);
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	22ec      	movs	r2, #236	; 0xec
    1a80:	589b      	ldr	r3, [r3, r2]
    1a82:	687a      	ldr	r2, [r7, #4]
    1a84:	2174      	movs	r1, #116	; 0x74
    1a86:	18d3      	adds	r3, r2, r3
    1a88:	185b      	adds	r3, r3, r1
    1a8a:	781b      	ldrb	r3, [r3, #0]
    1a8c:	015b      	lsls	r3, r3, #5
    1a8e:	b2da      	uxtb	r2, r3
    1a90:	687b      	ldr	r3, [r7, #4]
    1a92:	21ec      	movs	r1, #236	; 0xec
    1a94:	585b      	ldr	r3, [r3, r1]
    1a96:	6879      	ldr	r1, [r7, #4]
    1a98:	20ae      	movs	r0, #174	; 0xae
    1a9a:	18cb      	adds	r3, r1, r3
    1a9c:	181b      	adds	r3, r3, r0
    1a9e:	781b      	ldrb	r3, [r3, #0]
    1aa0:	211f      	movs	r1, #31
    1aa2:	400b      	ands	r3, r1
    1aa4:	b2db      	uxtb	r3, r3
    1aa6:	18d3      	adds	r3, r2, r3
    1aa8:	b2db      	uxtb	r3, r3
    1aaa:	2102      	movs	r1, #2
    1aac:	0018      	movs	r0, r3
    1aae:	4b23      	ldr	r3, [pc, #140]	; (1b3c <_ZN17LEDLighting_Class15ConfiguratePinsEv+0xe0>)
    1ab0:	4798      	blx	r3
		gpio_set_pin_function(GPIO(pins.allPorts[i],pins.allPins[i]), GPIO_PIN_FUNCTION_OFF);
    1ab2:	687b      	ldr	r3, [r7, #4]
    1ab4:	22ec      	movs	r2, #236	; 0xec
    1ab6:	589b      	ldr	r3, [r3, r2]
    1ab8:	687a      	ldr	r2, [r7, #4]
    1aba:	2174      	movs	r1, #116	; 0x74
    1abc:	18d3      	adds	r3, r2, r3
    1abe:	185b      	adds	r3, r3, r1
    1ac0:	781b      	ldrb	r3, [r3, #0]
    1ac2:	015b      	lsls	r3, r3, #5
    1ac4:	22ff      	movs	r2, #255	; 0xff
    1ac6:	401a      	ands	r2, r3
    1ac8:	687b      	ldr	r3, [r7, #4]
    1aca:	21ec      	movs	r1, #236	; 0xec
    1acc:	585b      	ldr	r3, [r3, r1]
    1ace:	6879      	ldr	r1, [r7, #4]
    1ad0:	20ae      	movs	r0, #174	; 0xae
    1ad2:	18cb      	adds	r3, r1, r3
    1ad4:	181b      	adds	r3, r3, r0
    1ad6:	781b      	ldrb	r3, [r3, #0]
    1ad8:	0019      	movs	r1, r3
    1ada:	231f      	movs	r3, #31
    1adc:	400b      	ands	r3, r1
    1ade:	18d2      	adds	r2, r2, r3
    1ae0:	2301      	movs	r3, #1
    1ae2:	425b      	negs	r3, r3
    1ae4:	0019      	movs	r1, r3
    1ae6:	0010      	movs	r0, r2
    1ae8:	4b15      	ldr	r3, [pc, #84]	; (1b40 <_ZN17LEDLighting_Class15ConfiguratePinsEv+0xe4>)
    1aea:	4798      	blx	r3
		gpio_set_pin_level(GPIO(pins.allPorts[i],pins.allPins[i]),false);
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	22ec      	movs	r2, #236	; 0xec
    1af0:	589b      	ldr	r3, [r3, r2]
    1af2:	687a      	ldr	r2, [r7, #4]
    1af4:	2174      	movs	r1, #116	; 0x74
    1af6:	18d3      	adds	r3, r2, r3
    1af8:	185b      	adds	r3, r3, r1
    1afa:	781b      	ldrb	r3, [r3, #0]
    1afc:	015b      	lsls	r3, r3, #5
    1afe:	b2da      	uxtb	r2, r3
    1b00:	687b      	ldr	r3, [r7, #4]
    1b02:	21ec      	movs	r1, #236	; 0xec
    1b04:	585b      	ldr	r3, [r3, r1]
    1b06:	6879      	ldr	r1, [r7, #4]
    1b08:	20ae      	movs	r0, #174	; 0xae
    1b0a:	18cb      	adds	r3, r1, r3
    1b0c:	181b      	adds	r3, r3, r0
    1b0e:	781b      	ldrb	r3, [r3, #0]
    1b10:	211f      	movs	r1, #31
    1b12:	400b      	ands	r3, r1
    1b14:	b2db      	uxtb	r3, r3
    1b16:	18d3      	adds	r3, r2, r3
    1b18:	b2db      	uxtb	r3, r3
    1b1a:	2100      	movs	r1, #0
    1b1c:	0018      	movs	r0, r3
    1b1e:	4b09      	ldr	r3, [pc, #36]	; (1b44 <_ZN17LEDLighting_Class15ConfiguratePinsEv+0xe8>)
    1b20:	4798      	blx	r3
	for (i = 0; i < totalPins; i++)
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	22ec      	movs	r2, #236	; 0xec
    1b26:	589b      	ldr	r3, [r3, r2]
    1b28:	1c5a      	adds	r2, r3, #1
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	21ec      	movs	r1, #236	; 0xec
    1b2e:	505a      	str	r2, [r3, r1]
    1b30:	e79c      	b.n	1a6c <_ZN17LEDLighting_Class15ConfiguratePinsEv+0x10>
	}
}
    1b32:	46c0      	nop			; (mov r8, r8)
    1b34:	46bd      	mov	sp, r7
    1b36:	b002      	add	sp, #8
    1b38:	bd80      	pop	{r7, pc}
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	000016b9 	.word	0x000016b9
    1b40:	00001695 	.word	0x00001695
    1b44:	000016f9 	.word	0x000016f9

00001b48 <_ZN17LEDLighting_Class7IsGreenEh>:
bool	LEDLighting_Class::IsGreen(uint8_t l){
    1b48:	b580      	push	{r7, lr}
    1b4a:	b082      	sub	sp, #8
    1b4c:	af00      	add	r7, sp, #0
    1b4e:	6078      	str	r0, [r7, #4]
    1b50:	000a      	movs	r2, r1
    1b52:	1cfb      	adds	r3, r7, #3
    1b54:	701a      	strb	r2, [r3, #0]
	return	localState.color[l]==0;
    1b56:	1cfb      	adds	r3, r7, #3
    1b58:	781a      	ldrb	r2, [r3, #0]
    1b5a:	6879      	ldr	r1, [r7, #4]
    1b5c:	239d      	movs	r3, #157	; 0x9d
    1b5e:	005b      	lsls	r3, r3, #1
    1b60:	188a      	adds	r2, r1, r2
    1b62:	18d3      	adds	r3, r2, r3
    1b64:	781b      	ldrb	r3, [r3, #0]
    1b66:	425a      	negs	r2, r3
    1b68:	4153      	adcs	r3, r2
    1b6a:	b2db      	uxtb	r3, r3
}
    1b6c:	0018      	movs	r0, r3
    1b6e:	46bd      	mov	sp, r7
    1b70:	b002      	add	sp, #8
    1b72:	bd80      	pop	{r7, pc}

00001b74 <_ZN17LEDLighting_Class5IsRedEh>:
bool	LEDLighting_Class::IsRed(uint8_t l){
    1b74:	b580      	push	{r7, lr}
    1b76:	b082      	sub	sp, #8
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	000a      	movs	r2, r1
    1b7e:	1cfb      	adds	r3, r7, #3
    1b80:	701a      	strb	r2, [r3, #0]
	return	localState.color[l]==1;
    1b82:	1cfb      	adds	r3, r7, #3
    1b84:	781a      	ldrb	r2, [r3, #0]
    1b86:	6879      	ldr	r1, [r7, #4]
    1b88:	239d      	movs	r3, #157	; 0x9d
    1b8a:	005b      	lsls	r3, r3, #1
    1b8c:	188a      	adds	r2, r1, r2
    1b8e:	18d3      	adds	r3, r2, r3
    1b90:	781b      	ldrb	r3, [r3, #0]
    1b92:	3b01      	subs	r3, #1
    1b94:	425a      	negs	r2, r3
    1b96:	4153      	adcs	r3, r2
    1b98:	b2db      	uxtb	r3, r3
}
    1b9a:	0018      	movs	r0, r3
    1b9c:	46bd      	mov	sp, r7
    1b9e:	b002      	add	sp, #8
    1ba0:	bd80      	pop	{r7, pc}

00001ba2 <_ZN17LEDLighting_Class6IsBlueEh>:
bool	LEDLighting_Class::IsBlue(uint8_t l){
    1ba2:	b580      	push	{r7, lr}
    1ba4:	b082      	sub	sp, #8
    1ba6:	af00      	add	r7, sp, #0
    1ba8:	6078      	str	r0, [r7, #4]
    1baa:	000a      	movs	r2, r1
    1bac:	1cfb      	adds	r3, r7, #3
    1bae:	701a      	strb	r2, [r3, #0]
	return	localState.color[l]==2;
    1bb0:	1cfb      	adds	r3, r7, #3
    1bb2:	781a      	ldrb	r2, [r3, #0]
    1bb4:	6879      	ldr	r1, [r7, #4]
    1bb6:	239d      	movs	r3, #157	; 0x9d
    1bb8:	005b      	lsls	r3, r3, #1
    1bba:	188a      	adds	r2, r1, r2
    1bbc:	18d3      	adds	r3, r2, r3
    1bbe:	781b      	ldrb	r3, [r3, #0]
    1bc0:	3b02      	subs	r3, #2
    1bc2:	425a      	negs	r2, r3
    1bc4:	4153      	adcs	r3, r2
    1bc6:	b2db      	uxtb	r3, r3
}
    1bc8:	0018      	movs	r0, r3
    1bca:	46bd      	mov	sp, r7
    1bcc:	b002      	add	sp, #8
    1bce:	bd80      	pop	{r7, pc}

00001bd0 <main>:

#include <atmel_start.h>
#include "main.h"

int main(void)
{
    1bd0:	b580      	push	{r7, lr}
    1bd2:	af00      	add	r7, sp, #0
	atmel_start_init();
    1bd4:	4b05      	ldr	r3, [pc, #20]	; (1bec <main+0x1c>)
    1bd6:	4798      	blx	r3
	lighter.Init();
    1bd8:	4b05      	ldr	r3, [pc, #20]	; (1bf0 <main+0x20>)
    1bda:	0018      	movs	r0, r3
    1bdc:	4b05      	ldr	r3, [pc, #20]	; (1bf4 <main+0x24>)
    1bde:	4798      	blx	r3
    /* Replace with your application code */
    while (1) 
    {
		lighter.Run();
    1be0:	4b03      	ldr	r3, [pc, #12]	; (1bf0 <main+0x20>)
    1be2:	0018      	movs	r0, r3
    1be4:	4b04      	ldr	r3, [pc, #16]	; (1bf8 <main+0x28>)
    1be6:	4798      	blx	r3
    1be8:	e7fa      	b.n	1be0 <main+0x10>
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	00002af9 	.word	0x00002af9
    1bf0:	20000518 	.word	0x20000518
    1bf4:	00000311 	.word	0x00000311
    1bf8:	0000046d 	.word	0x0000046d

00001bfc <hri_port_set_DIR_reg>:
{
    1bfc:	b580      	push	{r7, lr}
    1bfe:	b084      	sub	sp, #16
    1c00:	af00      	add	r7, sp, #0
    1c02:	60f8      	str	r0, [r7, #12]
    1c04:	607a      	str	r2, [r7, #4]
    1c06:	230b      	movs	r3, #11
    1c08:	18fb      	adds	r3, r7, r3
    1c0a:	1c0a      	adds	r2, r1, #0
    1c0c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1c0e:	230b      	movs	r3, #11
    1c10:	18fb      	adds	r3, r7, r3
    1c12:	781b      	ldrb	r3, [r3, #0]
    1c14:	68fa      	ldr	r2, [r7, #12]
    1c16:	01db      	lsls	r3, r3, #7
    1c18:	18d3      	adds	r3, r2, r3
    1c1a:	3308      	adds	r3, #8
    1c1c:	687a      	ldr	r2, [r7, #4]
    1c1e:	601a      	str	r2, [r3, #0]
}
    1c20:	46c0      	nop			; (mov r8, r8)
    1c22:	46bd      	mov	sp, r7
    1c24:	b004      	add	sp, #16
    1c26:	bd80      	pop	{r7, pc}

00001c28 <hri_port_read_DIR_reg>:
{
    1c28:	b580      	push	{r7, lr}
    1c2a:	b082      	sub	sp, #8
    1c2c:	af00      	add	r7, sp, #0
    1c2e:	6078      	str	r0, [r7, #4]
    1c30:	000a      	movs	r2, r1
    1c32:	1cfb      	adds	r3, r7, #3
    1c34:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1c36:	1cfb      	adds	r3, r7, #3
    1c38:	781a      	ldrb	r2, [r3, #0]
    1c3a:	687b      	ldr	r3, [r7, #4]
    1c3c:	01d2      	lsls	r2, r2, #7
    1c3e:	58d3      	ldr	r3, [r2, r3]
}
    1c40:	0018      	movs	r0, r3
    1c42:	46bd      	mov	sp, r7
    1c44:	b002      	add	sp, #8
    1c46:	bd80      	pop	{r7, pc}

00001c48 <hri_port_clear_DIR_reg>:
{
    1c48:	b580      	push	{r7, lr}
    1c4a:	b084      	sub	sp, #16
    1c4c:	af00      	add	r7, sp, #0
    1c4e:	60f8      	str	r0, [r7, #12]
    1c50:	607a      	str	r2, [r7, #4]
    1c52:	230b      	movs	r3, #11
    1c54:	18fb      	adds	r3, r7, r3
    1c56:	1c0a      	adds	r2, r1, #0
    1c58:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1c5a:	230b      	movs	r3, #11
    1c5c:	18fb      	adds	r3, r7, r3
    1c5e:	781b      	ldrb	r3, [r3, #0]
    1c60:	68fa      	ldr	r2, [r7, #12]
    1c62:	01db      	lsls	r3, r3, #7
    1c64:	18d3      	adds	r3, r2, r3
    1c66:	3304      	adds	r3, #4
    1c68:	687a      	ldr	r2, [r7, #4]
    1c6a:	601a      	str	r2, [r3, #0]
}
    1c6c:	46c0      	nop			; (mov r8, r8)
    1c6e:	46bd      	mov	sp, r7
    1c70:	b004      	add	sp, #16
    1c72:	bd80      	pop	{r7, pc}

00001c74 <hri_port_set_OUT_reg>:
{
    1c74:	b580      	push	{r7, lr}
    1c76:	b084      	sub	sp, #16
    1c78:	af00      	add	r7, sp, #0
    1c7a:	60f8      	str	r0, [r7, #12]
    1c7c:	607a      	str	r2, [r7, #4]
    1c7e:	230b      	movs	r3, #11
    1c80:	18fb      	adds	r3, r7, r3
    1c82:	1c0a      	adds	r2, r1, #0
    1c84:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1c86:	230b      	movs	r3, #11
    1c88:	18fb      	adds	r3, r7, r3
    1c8a:	781b      	ldrb	r3, [r3, #0]
    1c8c:	68fa      	ldr	r2, [r7, #12]
    1c8e:	01db      	lsls	r3, r3, #7
    1c90:	18d3      	adds	r3, r2, r3
    1c92:	3318      	adds	r3, #24
    1c94:	687a      	ldr	r2, [r7, #4]
    1c96:	601a      	str	r2, [r3, #0]
}
    1c98:	46c0      	nop			; (mov r8, r8)
    1c9a:	46bd      	mov	sp, r7
    1c9c:	b004      	add	sp, #16
    1c9e:	bd80      	pop	{r7, pc}

00001ca0 <hri_port_read_OUT_reg>:
{
    1ca0:	b580      	push	{r7, lr}
    1ca2:	b082      	sub	sp, #8
    1ca4:	af00      	add	r7, sp, #0
    1ca6:	6078      	str	r0, [r7, #4]
    1ca8:	000a      	movs	r2, r1
    1caa:	1cfb      	adds	r3, r7, #3
    1cac:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1cae:	1cfb      	adds	r3, r7, #3
    1cb0:	781b      	ldrb	r3, [r3, #0]
    1cb2:	687a      	ldr	r2, [r7, #4]
    1cb4:	01db      	lsls	r3, r3, #7
    1cb6:	18d3      	adds	r3, r2, r3
    1cb8:	3310      	adds	r3, #16
    1cba:	681b      	ldr	r3, [r3, #0]
}
    1cbc:	0018      	movs	r0, r3
    1cbe:	46bd      	mov	sp, r7
    1cc0:	b002      	add	sp, #8
    1cc2:	bd80      	pop	{r7, pc}

00001cc4 <hri_port_clear_OUT_reg>:
{
    1cc4:	b580      	push	{r7, lr}
    1cc6:	b084      	sub	sp, #16
    1cc8:	af00      	add	r7, sp, #0
    1cca:	60f8      	str	r0, [r7, #12]
    1ccc:	607a      	str	r2, [r7, #4]
    1cce:	230b      	movs	r3, #11
    1cd0:	18fb      	adds	r3, r7, r3
    1cd2:	1c0a      	adds	r2, r1, #0
    1cd4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1cd6:	230b      	movs	r3, #11
    1cd8:	18fb      	adds	r3, r7, r3
    1cda:	781b      	ldrb	r3, [r3, #0]
    1cdc:	68fa      	ldr	r2, [r7, #12]
    1cde:	01db      	lsls	r3, r3, #7
    1ce0:	18d3      	adds	r3, r2, r3
    1ce2:	3314      	adds	r3, #20
    1ce4:	687a      	ldr	r2, [r7, #4]
    1ce6:	601a      	str	r2, [r3, #0]
}
    1ce8:	46c0      	nop			; (mov r8, r8)
    1cea:	46bd      	mov	sp, r7
    1cec:	b004      	add	sp, #16
    1cee:	bd80      	pop	{r7, pc}

00001cf0 <hri_port_read_IN_reg>:
{
    1cf0:	b580      	push	{r7, lr}
    1cf2:	b082      	sub	sp, #8
    1cf4:	af00      	add	r7, sp, #0
    1cf6:	6078      	str	r0, [r7, #4]
    1cf8:	000a      	movs	r2, r1
    1cfa:	1cfb      	adds	r3, r7, #3
    1cfc:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1cfe:	1cfb      	adds	r3, r7, #3
    1d00:	781b      	ldrb	r3, [r3, #0]
    1d02:	687a      	ldr	r2, [r7, #4]
    1d04:	01db      	lsls	r3, r3, #7
    1d06:	18d3      	adds	r3, r2, r3
    1d08:	3320      	adds	r3, #32
    1d0a:	681b      	ldr	r3, [r3, #0]
}
    1d0c:	0018      	movs	r0, r3
    1d0e:	46bd      	mov	sp, r7
    1d10:	b002      	add	sp, #8
    1d12:	bd80      	pop	{r7, pc}

00001d14 <hri_port_write_PMUX_PMUXE_bf>:
{
    1d14:	b590      	push	{r4, r7, lr}
    1d16:	b085      	sub	sp, #20
    1d18:	af00      	add	r7, sp, #0
    1d1a:	6078      	str	r0, [r7, #4]
    1d1c:	000c      	movs	r4, r1
    1d1e:	0010      	movs	r0, r2
    1d20:	0019      	movs	r1, r3
    1d22:	1cfb      	adds	r3, r7, #3
    1d24:	1c22      	adds	r2, r4, #0
    1d26:	701a      	strb	r2, [r3, #0]
    1d28:	1cbb      	adds	r3, r7, #2
    1d2a:	1c02      	adds	r2, r0, #0
    1d2c:	701a      	strb	r2, [r3, #0]
    1d2e:	1c7b      	adds	r3, r7, #1
    1d30:	1c0a      	adds	r2, r1, #0
    1d32:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1d34:	1cfb      	adds	r3, r7, #3
    1d36:	7819      	ldrb	r1, [r3, #0]
    1d38:	1cbb      	adds	r3, r7, #2
    1d3a:	781a      	ldrb	r2, [r3, #0]
    1d3c:	230f      	movs	r3, #15
    1d3e:	18fb      	adds	r3, r7, r3
    1d40:	6878      	ldr	r0, [r7, #4]
    1d42:	2430      	movs	r4, #48	; 0x30
    1d44:	01c9      	lsls	r1, r1, #7
    1d46:	1841      	adds	r1, r0, r1
    1d48:	188a      	adds	r2, r1, r2
    1d4a:	1912      	adds	r2, r2, r4
    1d4c:	7812      	ldrb	r2, [r2, #0]
    1d4e:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1d50:	230f      	movs	r3, #15
    1d52:	18fb      	adds	r3, r7, r3
    1d54:	220f      	movs	r2, #15
    1d56:	18ba      	adds	r2, r7, r2
    1d58:	7812      	ldrb	r2, [r2, #0]
    1d5a:	210f      	movs	r1, #15
    1d5c:	438a      	bics	r2, r1
    1d5e:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
    1d60:	1c7b      	adds	r3, r7, #1
    1d62:	781b      	ldrb	r3, [r3, #0]
    1d64:	220f      	movs	r2, #15
    1d66:	4013      	ands	r3, r2
    1d68:	b2d9      	uxtb	r1, r3
    1d6a:	230f      	movs	r3, #15
    1d6c:	18fb      	adds	r3, r7, r3
    1d6e:	220f      	movs	r2, #15
    1d70:	18ba      	adds	r2, r7, r2
    1d72:	7812      	ldrb	r2, [r2, #0]
    1d74:	430a      	orrs	r2, r1
    1d76:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1d78:	1cfb      	adds	r3, r7, #3
    1d7a:	781a      	ldrb	r2, [r3, #0]
    1d7c:	1cbb      	adds	r3, r7, #2
    1d7e:	781b      	ldrb	r3, [r3, #0]
    1d80:	6879      	ldr	r1, [r7, #4]
    1d82:	2030      	movs	r0, #48	; 0x30
    1d84:	01d2      	lsls	r2, r2, #7
    1d86:	188a      	adds	r2, r1, r2
    1d88:	18d3      	adds	r3, r2, r3
    1d8a:	181b      	adds	r3, r3, r0
    1d8c:	220f      	movs	r2, #15
    1d8e:	18ba      	adds	r2, r7, r2
    1d90:	7812      	ldrb	r2, [r2, #0]
    1d92:	701a      	strb	r2, [r3, #0]
}
    1d94:	46c0      	nop			; (mov r8, r8)
    1d96:	46bd      	mov	sp, r7
    1d98:	b005      	add	sp, #20
    1d9a:	bd90      	pop	{r4, r7, pc}

00001d9c <hri_port_write_PMUX_PMUXO_bf>:
{
    1d9c:	b590      	push	{r4, r7, lr}
    1d9e:	b085      	sub	sp, #20
    1da0:	af00      	add	r7, sp, #0
    1da2:	6078      	str	r0, [r7, #4]
    1da4:	000c      	movs	r4, r1
    1da6:	0010      	movs	r0, r2
    1da8:	0019      	movs	r1, r3
    1daa:	1cfb      	adds	r3, r7, #3
    1dac:	1c22      	adds	r2, r4, #0
    1dae:	701a      	strb	r2, [r3, #0]
    1db0:	1cbb      	adds	r3, r7, #2
    1db2:	1c02      	adds	r2, r0, #0
    1db4:	701a      	strb	r2, [r3, #0]
    1db6:	1c7b      	adds	r3, r7, #1
    1db8:	1c0a      	adds	r2, r1, #0
    1dba:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1dbc:	1cfb      	adds	r3, r7, #3
    1dbe:	7819      	ldrb	r1, [r3, #0]
    1dc0:	1cbb      	adds	r3, r7, #2
    1dc2:	781a      	ldrb	r2, [r3, #0]
    1dc4:	230f      	movs	r3, #15
    1dc6:	18fb      	adds	r3, r7, r3
    1dc8:	6878      	ldr	r0, [r7, #4]
    1dca:	2430      	movs	r4, #48	; 0x30
    1dcc:	01c9      	lsls	r1, r1, #7
    1dce:	1841      	adds	r1, r0, r1
    1dd0:	188a      	adds	r2, r1, r2
    1dd2:	1912      	adds	r2, r2, r4
    1dd4:	7812      	ldrb	r2, [r2, #0]
    1dd6:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1dd8:	230f      	movs	r3, #15
    1dda:	18fb      	adds	r3, r7, r3
    1ddc:	220f      	movs	r2, #15
    1dde:	18ba      	adds	r2, r7, r2
    1de0:	7812      	ldrb	r2, [r2, #0]
    1de2:	210f      	movs	r1, #15
    1de4:	400a      	ands	r2, r1
    1de6:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
    1de8:	1c7b      	adds	r3, r7, #1
    1dea:	781b      	ldrb	r3, [r3, #0]
    1dec:	011b      	lsls	r3, r3, #4
    1dee:	b2d9      	uxtb	r1, r3
    1df0:	230f      	movs	r3, #15
    1df2:	18fb      	adds	r3, r7, r3
    1df4:	220f      	movs	r2, #15
    1df6:	18ba      	adds	r2, r7, r2
    1df8:	7812      	ldrb	r2, [r2, #0]
    1dfa:	430a      	orrs	r2, r1
    1dfc:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1dfe:	1cfb      	adds	r3, r7, #3
    1e00:	781a      	ldrb	r2, [r3, #0]
    1e02:	1cbb      	adds	r3, r7, #2
    1e04:	781b      	ldrb	r3, [r3, #0]
    1e06:	6879      	ldr	r1, [r7, #4]
    1e08:	2030      	movs	r0, #48	; 0x30
    1e0a:	01d2      	lsls	r2, r2, #7
    1e0c:	188a      	adds	r2, r1, r2
    1e0e:	18d3      	adds	r3, r2, r3
    1e10:	181b      	adds	r3, r3, r0
    1e12:	220f      	movs	r2, #15
    1e14:	18ba      	adds	r2, r7, r2
    1e16:	7812      	ldrb	r2, [r2, #0]
    1e18:	701a      	strb	r2, [r3, #0]
}
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	46bd      	mov	sp, r7
    1e1e:	b005      	add	sp, #20
    1e20:	bd90      	pop	{r4, r7, pc}

00001e22 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    1e22:	b590      	push	{r4, r7, lr}
    1e24:	b085      	sub	sp, #20
    1e26:	af00      	add	r7, sp, #0
    1e28:	6078      	str	r0, [r7, #4]
    1e2a:	000c      	movs	r4, r1
    1e2c:	0010      	movs	r0, r2
    1e2e:	0019      	movs	r1, r3
    1e30:	1cfb      	adds	r3, r7, #3
    1e32:	1c22      	adds	r2, r4, #0
    1e34:	701a      	strb	r2, [r3, #0]
    1e36:	1cbb      	adds	r3, r7, #2
    1e38:	1c02      	adds	r2, r0, #0
    1e3a:	701a      	strb	r2, [r3, #0]
    1e3c:	1c7b      	adds	r3, r7, #1
    1e3e:	1c0a      	adds	r2, r1, #0
    1e40:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e42:	1cfb      	adds	r3, r7, #3
    1e44:	7819      	ldrb	r1, [r3, #0]
    1e46:	1cbb      	adds	r3, r7, #2
    1e48:	781a      	ldrb	r2, [r3, #0]
    1e4a:	230f      	movs	r3, #15
    1e4c:	18fb      	adds	r3, r7, r3
    1e4e:	6878      	ldr	r0, [r7, #4]
    1e50:	2440      	movs	r4, #64	; 0x40
    1e52:	01c9      	lsls	r1, r1, #7
    1e54:	1841      	adds	r1, r0, r1
    1e56:	188a      	adds	r2, r1, r2
    1e58:	1912      	adds	r2, r2, r4
    1e5a:	7812      	ldrb	r2, [r2, #0]
    1e5c:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e5e:	230f      	movs	r3, #15
    1e60:	18fb      	adds	r3, r7, r3
    1e62:	220f      	movs	r2, #15
    1e64:	18ba      	adds	r2, r7, r2
    1e66:	7812      	ldrb	r2, [r2, #0]
    1e68:	2101      	movs	r1, #1
    1e6a:	438a      	bics	r2, r1
    1e6c:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1e6e:	1c7b      	adds	r3, r7, #1
    1e70:	7819      	ldrb	r1, [r3, #0]
    1e72:	230f      	movs	r3, #15
    1e74:	18fb      	adds	r3, r7, r3
    1e76:	220f      	movs	r2, #15
    1e78:	18ba      	adds	r2, r7, r2
    1e7a:	7812      	ldrb	r2, [r2, #0]
    1e7c:	430a      	orrs	r2, r1
    1e7e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e80:	1cfb      	adds	r3, r7, #3
    1e82:	781a      	ldrb	r2, [r3, #0]
    1e84:	1cbb      	adds	r3, r7, #2
    1e86:	781b      	ldrb	r3, [r3, #0]
    1e88:	6879      	ldr	r1, [r7, #4]
    1e8a:	2040      	movs	r0, #64	; 0x40
    1e8c:	01d2      	lsls	r2, r2, #7
    1e8e:	188a      	adds	r2, r1, r2
    1e90:	18d3      	adds	r3, r2, r3
    1e92:	181b      	adds	r3, r3, r0
    1e94:	220f      	movs	r2, #15
    1e96:	18ba      	adds	r2, r7, r2
    1e98:	7812      	ldrb	r2, [r2, #0]
    1e9a:	701a      	strb	r2, [r3, #0]
}
    1e9c:	46c0      	nop			; (mov r8, r8)
    1e9e:	46bd      	mov	sp, r7
    1ea0:	b005      	add	sp, #20
    1ea2:	bd90      	pop	{r4, r7, pc}

00001ea4 <hri_port_set_PINCFG_PULLEN_bit>:
{
    1ea4:	b5b0      	push	{r4, r5, r7, lr}
    1ea6:	b082      	sub	sp, #8
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	0008      	movs	r0, r1
    1eae:	0011      	movs	r1, r2
    1eb0:	1cfb      	adds	r3, r7, #3
    1eb2:	1c02      	adds	r2, r0, #0
    1eb4:	701a      	strb	r2, [r3, #0]
    1eb6:	1cbb      	adds	r3, r7, #2
    1eb8:	1c0a      	adds	r2, r1, #0
    1eba:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1ebc:	1cfb      	adds	r3, r7, #3
    1ebe:	781a      	ldrb	r2, [r3, #0]
    1ec0:	1cbb      	adds	r3, r7, #2
    1ec2:	781b      	ldrb	r3, [r3, #0]
    1ec4:	1cf9      	adds	r1, r7, #3
    1ec6:	7808      	ldrb	r0, [r1, #0]
    1ec8:	1cb9      	adds	r1, r7, #2
    1eca:	7809      	ldrb	r1, [r1, #0]
    1ecc:	687c      	ldr	r4, [r7, #4]
    1ece:	2540      	movs	r5, #64	; 0x40
    1ed0:	01c0      	lsls	r0, r0, #7
    1ed2:	1820      	adds	r0, r4, r0
    1ed4:	1841      	adds	r1, r0, r1
    1ed6:	1949      	adds	r1, r1, r5
    1ed8:	7809      	ldrb	r1, [r1, #0]
    1eda:	b2c9      	uxtb	r1, r1
    1edc:	2004      	movs	r0, #4
    1ede:	4301      	orrs	r1, r0
    1ee0:	b2cc      	uxtb	r4, r1
    1ee2:	6879      	ldr	r1, [r7, #4]
    1ee4:	2040      	movs	r0, #64	; 0x40
    1ee6:	01d2      	lsls	r2, r2, #7
    1ee8:	188a      	adds	r2, r1, r2
    1eea:	18d3      	adds	r3, r2, r3
    1eec:	181b      	adds	r3, r3, r0
    1eee:	1c22      	adds	r2, r4, #0
    1ef0:	701a      	strb	r2, [r3, #0]
}
    1ef2:	46c0      	nop			; (mov r8, r8)
    1ef4:	46bd      	mov	sp, r7
    1ef6:	b002      	add	sp, #8
    1ef8:	bdb0      	pop	{r4, r5, r7, pc}

00001efa <hri_port_clear_PINCFG_PULLEN_bit>:
{
    1efa:	b5b0      	push	{r4, r5, r7, lr}
    1efc:	b082      	sub	sp, #8
    1efe:	af00      	add	r7, sp, #0
    1f00:	6078      	str	r0, [r7, #4]
    1f02:	0008      	movs	r0, r1
    1f04:	0011      	movs	r1, r2
    1f06:	1cfb      	adds	r3, r7, #3
    1f08:	1c02      	adds	r2, r0, #0
    1f0a:	701a      	strb	r2, [r3, #0]
    1f0c:	1cbb      	adds	r3, r7, #2
    1f0e:	1c0a      	adds	r2, r1, #0
    1f10:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1f12:	1cfb      	adds	r3, r7, #3
    1f14:	781a      	ldrb	r2, [r3, #0]
    1f16:	1cbb      	adds	r3, r7, #2
    1f18:	781b      	ldrb	r3, [r3, #0]
    1f1a:	1cf9      	adds	r1, r7, #3
    1f1c:	7808      	ldrb	r0, [r1, #0]
    1f1e:	1cb9      	adds	r1, r7, #2
    1f20:	7809      	ldrb	r1, [r1, #0]
    1f22:	687c      	ldr	r4, [r7, #4]
    1f24:	2540      	movs	r5, #64	; 0x40
    1f26:	01c0      	lsls	r0, r0, #7
    1f28:	1820      	adds	r0, r4, r0
    1f2a:	1841      	adds	r1, r0, r1
    1f2c:	1949      	adds	r1, r1, r5
    1f2e:	7809      	ldrb	r1, [r1, #0]
    1f30:	b2c9      	uxtb	r1, r1
    1f32:	2004      	movs	r0, #4
    1f34:	4381      	bics	r1, r0
    1f36:	b2cc      	uxtb	r4, r1
    1f38:	6879      	ldr	r1, [r7, #4]
    1f3a:	2040      	movs	r0, #64	; 0x40
    1f3c:	01d2      	lsls	r2, r2, #7
    1f3e:	188a      	adds	r2, r1, r2
    1f40:	18d3      	adds	r3, r2, r3
    1f42:	181b      	adds	r3, r3, r0
    1f44:	1c22      	adds	r2, r4, #0
    1f46:	701a      	strb	r2, [r3, #0]
}
    1f48:	46c0      	nop			; (mov r8, r8)
    1f4a:	46bd      	mov	sp, r7
    1f4c:	b002      	add	sp, #8
    1f4e:	bdb0      	pop	{r4, r5, r7, pc}

00001f50 <hri_port_write_WRCONFIG_reg>:
{
    1f50:	b580      	push	{r7, lr}
    1f52:	b084      	sub	sp, #16
    1f54:	af00      	add	r7, sp, #0
    1f56:	60f8      	str	r0, [r7, #12]
    1f58:	607a      	str	r2, [r7, #4]
    1f5a:	230b      	movs	r3, #11
    1f5c:	18fb      	adds	r3, r7, r3
    1f5e:	1c0a      	adds	r2, r1, #0
    1f60:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f62:	230b      	movs	r3, #11
    1f64:	18fb      	adds	r3, r7, r3
    1f66:	781b      	ldrb	r3, [r3, #0]
    1f68:	68fa      	ldr	r2, [r7, #12]
    1f6a:	01db      	lsls	r3, r3, #7
    1f6c:	18d3      	adds	r3, r2, r3
    1f6e:	3328      	adds	r3, #40	; 0x28
    1f70:	687a      	ldr	r2, [r7, #4]
    1f72:	601a      	str	r2, [r3, #0]
}
    1f74:	46c0      	nop			; (mov r8, r8)
    1f76:	46bd      	mov	sp, r7
    1f78:	b004      	add	sp, #16
    1f7a:	bd80      	pop	{r7, pc}

00001f7c <_gpio_set_direction>:
{
    1f7c:	b580      	push	{r7, lr}
    1f7e:	b082      	sub	sp, #8
    1f80:	af00      	add	r7, sp, #0
    1f82:	6039      	str	r1, [r7, #0]
    1f84:	0011      	movs	r1, r2
    1f86:	1dfb      	adds	r3, r7, #7
    1f88:	1c02      	adds	r2, r0, #0
    1f8a:	701a      	strb	r2, [r3, #0]
    1f8c:	1dbb      	adds	r3, r7, #6
    1f8e:	1c0a      	adds	r2, r1, #0
    1f90:	701a      	strb	r2, [r3, #0]
	switch (direction) {
    1f92:	1dbb      	adds	r3, r7, #6
    1f94:	781b      	ldrb	r3, [r3, #0]
    1f96:	2b01      	cmp	r3, #1
    1f98:	d023      	beq.n	1fe2 <_gpio_set_direction+0x66>
    1f9a:	2b02      	cmp	r3, #2
    1f9c:	d03f      	beq.n	201e <STACK_SIZE+0x1e>
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	d15d      	bne.n	205e <STACK_SIZE+0x5e>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    1fa2:	683a      	ldr	r2, [r7, #0]
    1fa4:	1dfb      	adds	r3, r7, #7
    1fa6:	7819      	ldrb	r1, [r3, #0]
    1fa8:	23c0      	movs	r3, #192	; 0xc0
    1faa:	05db      	lsls	r3, r3, #23
    1fac:	0018      	movs	r0, r3
    1fae:	4b31      	ldr	r3, [pc, #196]	; (2074 <STACK_SIZE+0x74>)
    1fb0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1fb2:	683b      	ldr	r3, [r7, #0]
    1fb4:	041b      	lsls	r3, r3, #16
    1fb6:	0c1b      	lsrs	r3, r3, #16
    1fb8:	2280      	movs	r2, #128	; 0x80
    1fba:	05d2      	lsls	r2, r2, #23
    1fbc:	431a      	orrs	r2, r3
    1fbe:	1dfb      	adds	r3, r7, #7
    1fc0:	781b      	ldrb	r3, [r3, #0]
    1fc2:	482d      	ldr	r0, [pc, #180]	; (2078 <STACK_SIZE+0x78>)
    1fc4:	0019      	movs	r1, r3
    1fc6:	4b2d      	ldr	r3, [pc, #180]	; (207c <STACK_SIZE+0x7c>)
    1fc8:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1fca:	683b      	ldr	r3, [r7, #0]
    1fcc:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1fce:	22c0      	movs	r2, #192	; 0xc0
    1fd0:	0612      	lsls	r2, r2, #24
    1fd2:	431a      	orrs	r2, r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1fd4:	1dfb      	adds	r3, r7, #7
    1fd6:	781b      	ldrb	r3, [r3, #0]
    1fd8:	4827      	ldr	r0, [pc, #156]	; (2078 <STACK_SIZE+0x78>)
    1fda:	0019      	movs	r1, r3
    1fdc:	4b27      	ldr	r3, [pc, #156]	; (207c <STACK_SIZE+0x7c>)
    1fde:	4798      	blx	r3
		break;
    1fe0:	e043      	b.n	206a <STACK_SIZE+0x6a>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    1fe2:	683a      	ldr	r2, [r7, #0]
    1fe4:	1dfb      	adds	r3, r7, #7
    1fe6:	7819      	ldrb	r1, [r3, #0]
    1fe8:	23c0      	movs	r3, #192	; 0xc0
    1fea:	05db      	lsls	r3, r3, #23
    1fec:	0018      	movs	r0, r3
    1fee:	4b21      	ldr	r3, [pc, #132]	; (2074 <STACK_SIZE+0x74>)
    1ff0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1ff2:	683b      	ldr	r3, [r7, #0]
    1ff4:	041b      	lsls	r3, r3, #16
    1ff6:	0c1b      	lsrs	r3, r3, #16
    1ff8:	4a21      	ldr	r2, [pc, #132]	; (2080 <STACK_SIZE+0x80>)
    1ffa:	431a      	orrs	r2, r3
    1ffc:	1dfb      	adds	r3, r7, #7
    1ffe:	781b      	ldrb	r3, [r3, #0]
    2000:	481d      	ldr	r0, [pc, #116]	; (2078 <STACK_SIZE+0x78>)
    2002:	0019      	movs	r1, r3
    2004:	4b1d      	ldr	r3, [pc, #116]	; (207c <STACK_SIZE+0x7c>)
    2006:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    2008:	683b      	ldr	r3, [r7, #0]
    200a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    200c:	4a1d      	ldr	r2, [pc, #116]	; (2084 <STACK_SIZE+0x84>)
    200e:	431a      	orrs	r2, r3
		                                | ((mask & 0xffff0000) >> 16));
    2010:	1dfb      	adds	r3, r7, #7
    2012:	781b      	ldrb	r3, [r3, #0]
    2014:	4818      	ldr	r0, [pc, #96]	; (2078 <STACK_SIZE+0x78>)
    2016:	0019      	movs	r1, r3
    2018:	4b18      	ldr	r3, [pc, #96]	; (207c <STACK_SIZE+0x7c>)
    201a:	4798      	blx	r3
		break;
    201c:	e025      	b.n	206a <STACK_SIZE+0x6a>
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
    201e:	683a      	ldr	r2, [r7, #0]
    2020:	1dfb      	adds	r3, r7, #7
    2022:	7819      	ldrb	r1, [r3, #0]
    2024:	23c0      	movs	r3, #192	; 0xc0
    2026:	05db      	lsls	r3, r3, #23
    2028:	0018      	movs	r0, r3
    202a:	4b17      	ldr	r3, [pc, #92]	; (2088 <STACK_SIZE+0x88>)
    202c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    202e:	683b      	ldr	r3, [r7, #0]
    2030:	041b      	lsls	r3, r3, #16
    2032:	0c1b      	lsrs	r3, r3, #16
    2034:	2280      	movs	r2, #128	; 0x80
    2036:	05d2      	lsls	r2, r2, #23
    2038:	431a      	orrs	r2, r3
    203a:	1dfb      	adds	r3, r7, #7
    203c:	781b      	ldrb	r3, [r3, #0]
    203e:	480e      	ldr	r0, [pc, #56]	; (2078 <STACK_SIZE+0x78>)
    2040:	0019      	movs	r1, r3
    2042:	4b0e      	ldr	r3, [pc, #56]	; (207c <STACK_SIZE+0x7c>)
    2044:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2046:	683b      	ldr	r3, [r7, #0]
    2048:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    204a:	22c0      	movs	r2, #192	; 0xc0
    204c:	0612      	lsls	r2, r2, #24
    204e:	431a      	orrs	r2, r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2050:	1dfb      	adds	r3, r7, #7
    2052:	781b      	ldrb	r3, [r3, #0]
    2054:	4808      	ldr	r0, [pc, #32]	; (2078 <STACK_SIZE+0x78>)
    2056:	0019      	movs	r1, r3
    2058:	4b08      	ldr	r3, [pc, #32]	; (207c <STACK_SIZE+0x7c>)
    205a:	4798      	blx	r3
		break;
    205c:	e005      	b.n	206a <STACK_SIZE+0x6a>
		ASSERT(false);
    205e:	4b0b      	ldr	r3, [pc, #44]	; (208c <STACK_SIZE+0x8c>)
    2060:	2245      	movs	r2, #69	; 0x45
    2062:	0019      	movs	r1, r3
    2064:	2000      	movs	r0, #0
    2066:	4b0a      	ldr	r3, [pc, #40]	; (2090 <STACK_SIZE+0x90>)
    2068:	4798      	blx	r3
}
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	46bd      	mov	sp, r7
    206e:	b002      	add	sp, #8
    2070:	bd80      	pop	{r7, pc}
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	00001c49 	.word	0x00001c49
    2078:	41004400 	.word	0x41004400
    207c:	00001f51 	.word	0x00001f51
    2080:	40020000 	.word	0x40020000
    2084:	c0020000 	.word	0xc0020000
    2088:	00001bfd 	.word	0x00001bfd
    208c:	00004668 	.word	0x00004668
    2090:	00003369 	.word	0x00003369

00002094 <_gpio_set_level>:
{
    2094:	b580      	push	{r7, lr}
    2096:	b082      	sub	sp, #8
    2098:	af00      	add	r7, sp, #0
    209a:	6039      	str	r1, [r7, #0]
    209c:	0011      	movs	r1, r2
    209e:	1dfb      	adds	r3, r7, #7
    20a0:	1c02      	adds	r2, r0, #0
    20a2:	701a      	strb	r2, [r3, #0]
    20a4:	1dbb      	adds	r3, r7, #6
    20a6:	1c0a      	adds	r2, r1, #0
    20a8:	701a      	strb	r2, [r3, #0]
	if (level) {
    20aa:	1dbb      	adds	r3, r7, #6
    20ac:	781b      	ldrb	r3, [r3, #0]
    20ae:	2b00      	cmp	r3, #0
    20b0:	d008      	beq.n	20c4 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    20b2:	683a      	ldr	r2, [r7, #0]
    20b4:	1dfb      	adds	r3, r7, #7
    20b6:	7819      	ldrb	r1, [r3, #0]
    20b8:	23c0      	movs	r3, #192	; 0xc0
    20ba:	05db      	lsls	r3, r3, #23
    20bc:	0018      	movs	r0, r3
    20be:	4b07      	ldr	r3, [pc, #28]	; (20dc <_gpio_set_level+0x48>)
    20c0:	4798      	blx	r3
}
    20c2:	e007      	b.n	20d4 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    20c4:	683a      	ldr	r2, [r7, #0]
    20c6:	1dfb      	adds	r3, r7, #7
    20c8:	7819      	ldrb	r1, [r3, #0]
    20ca:	23c0      	movs	r3, #192	; 0xc0
    20cc:	05db      	lsls	r3, r3, #23
    20ce:	0018      	movs	r0, r3
    20d0:	4b03      	ldr	r3, [pc, #12]	; (20e0 <_gpio_set_level+0x4c>)
    20d2:	4798      	blx	r3
}
    20d4:	46c0      	nop			; (mov r8, r8)
    20d6:	46bd      	mov	sp, r7
    20d8:	b002      	add	sp, #8
    20da:	bd80      	pop	{r7, pc}
    20dc:	00001c75 	.word	0x00001c75
    20e0:	00001cc5 	.word	0x00001cc5

000020e4 <_gpio_get_level>:
{
    20e4:	b580      	push	{r7, lr}
    20e6:	b086      	sub	sp, #24
    20e8:	af00      	add	r7, sp, #0
    20ea:	0002      	movs	r2, r0
    20ec:	1dfb      	adds	r3, r7, #7
    20ee:	701a      	strb	r2, [r3, #0]
	CRITICAL_SECTION_ENTER();
    20f0:	230c      	movs	r3, #12
    20f2:	18fb      	adds	r3, r7, r3
    20f4:	0018      	movs	r0, r3
    20f6:	4b18      	ldr	r3, [pc, #96]	; (2158 <_gpio_get_level+0x74>)
    20f8:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);
    20fa:	1dfb      	adds	r3, r7, #7
    20fc:	781a      	ldrb	r2, [r3, #0]
    20fe:	23c0      	movs	r3, #192	; 0xc0
    2100:	05db      	lsls	r3, r3, #23
    2102:	0011      	movs	r1, r2
    2104:	0018      	movs	r0, r3
    2106:	4b15      	ldr	r3, [pc, #84]	; (215c <_gpio_get_level+0x78>)
    2108:	4798      	blx	r3
    210a:	0003      	movs	r3, r0
    210c:	617b      	str	r3, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    210e:	1dfb      	adds	r3, r7, #7
    2110:	781b      	ldrb	r3, [r3, #0]
    2112:	4a13      	ldr	r2, [pc, #76]	; (2160 <_gpio_get_level+0x7c>)
    2114:	0019      	movs	r1, r3
    2116:	0010      	movs	r0, r2
    2118:	4b12      	ldr	r3, [pc, #72]	; (2164 <_gpio_get_level+0x80>)
    211a:	4798      	blx	r3
    211c:	0002      	movs	r2, r0
    211e:	697b      	ldr	r3, [r7, #20]
    2120:	43db      	mvns	r3, r3
    2122:	4013      	ands	r3, r2
    2124:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2126:	1dfb      	adds	r3, r7, #7
    2128:	781a      	ldrb	r2, [r3, #0]
    212a:	23c0      	movs	r3, #192	; 0xc0
    212c:	05db      	lsls	r3, r3, #23
    212e:	0011      	movs	r1, r2
    2130:	0018      	movs	r0, r3
    2132:	4b0d      	ldr	r3, [pc, #52]	; (2168 <_gpio_get_level+0x84>)
    2134:	4798      	blx	r3
    2136:	0002      	movs	r2, r0
    2138:	697b      	ldr	r3, [r7, #20]
    213a:	4013      	ands	r3, r2
    213c:	693a      	ldr	r2, [r7, #16]
    213e:	4313      	orrs	r3, r2
    2140:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
    2142:	230c      	movs	r3, #12
    2144:	18fb      	adds	r3, r7, r3
    2146:	0018      	movs	r0, r3
    2148:	4b08      	ldr	r3, [pc, #32]	; (216c <_gpio_get_level+0x88>)
    214a:	4798      	blx	r3
	return tmp;
    214c:	693b      	ldr	r3, [r7, #16]
}
    214e:	0018      	movs	r0, r3
    2150:	46bd      	mov	sp, r7
    2152:	b006      	add	sp, #24
    2154:	bd80      	pop	{r7, pc}
    2156:	46c0      	nop			; (mov r8, r8)
    2158:	00002dc1 	.word	0x00002dc1
    215c:	00001c29 	.word	0x00001c29
    2160:	41004400 	.word	0x41004400
    2164:	00001cf1 	.word	0x00001cf1
    2168:	00001ca1 	.word	0x00001ca1
    216c:	00002dcf 	.word	0x00002dcf

00002170 <_gpio_set_pin_pull_mode>:
{
    2170:	b590      	push	{r4, r7, lr}
    2172:	b083      	sub	sp, #12
    2174:	af00      	add	r7, sp, #0
    2176:	0004      	movs	r4, r0
    2178:	0008      	movs	r0, r1
    217a:	0011      	movs	r1, r2
    217c:	1dfb      	adds	r3, r7, #7
    217e:	1c22      	adds	r2, r4, #0
    2180:	701a      	strb	r2, [r3, #0]
    2182:	1dbb      	adds	r3, r7, #6
    2184:	1c02      	adds	r2, r0, #0
    2186:	701a      	strb	r2, [r3, #0]
    2188:	1d7b      	adds	r3, r7, #5
    218a:	1c0a      	adds	r2, r1, #0
    218c:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
    218e:	1d7b      	adds	r3, r7, #5
    2190:	781b      	ldrb	r3, [r3, #0]
    2192:	2b01      	cmp	r3, #1
    2194:	d00c      	beq.n	21b0 <_gpio_set_pin_pull_mode+0x40>
    2196:	2b02      	cmp	r3, #2
    2198:	d029      	beq.n	21ee <_gpio_set_pin_pull_mode+0x7e>
    219a:	2b00      	cmp	r3, #0
    219c:	d146      	bne.n	222c <_gpio_set_pin_pull_mode+0xbc>
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    219e:	1dbb      	adds	r3, r7, #6
    21a0:	781a      	ldrb	r2, [r3, #0]
    21a2:	1dfb      	adds	r3, r7, #7
    21a4:	781b      	ldrb	r3, [r3, #0]
    21a6:	4827      	ldr	r0, [pc, #156]	; (2244 <_gpio_set_pin_pull_mode+0xd4>)
    21a8:	0019      	movs	r1, r3
    21aa:	4b27      	ldr	r3, [pc, #156]	; (2248 <_gpio_set_pin_pull_mode+0xd8>)
    21ac:	4798      	blx	r3
		break;
    21ae:	e044      	b.n	223a <_gpio_set_pin_pull_mode+0xca>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    21b0:	1dbb      	adds	r3, r7, #6
    21b2:	781b      	ldrb	r3, [r3, #0]
    21b4:	2201      	movs	r2, #1
    21b6:	409a      	lsls	r2, r3
    21b8:	1dfb      	adds	r3, r7, #7
    21ba:	7819      	ldrb	r1, [r3, #0]
    21bc:	23c0      	movs	r3, #192	; 0xc0
    21be:	05db      	lsls	r3, r3, #23
    21c0:	0018      	movs	r0, r3
    21c2:	4b22      	ldr	r3, [pc, #136]	; (224c <_gpio_set_pin_pull_mode+0xdc>)
    21c4:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    21c6:	1dbb      	adds	r3, r7, #6
    21c8:	781a      	ldrb	r2, [r3, #0]
    21ca:	1dfb      	adds	r3, r7, #7
    21cc:	781b      	ldrb	r3, [r3, #0]
    21ce:	481d      	ldr	r0, [pc, #116]	; (2244 <_gpio_set_pin_pull_mode+0xd4>)
    21d0:	0019      	movs	r1, r3
    21d2:	4b1f      	ldr	r3, [pc, #124]	; (2250 <_gpio_set_pin_pull_mode+0xe0>)
    21d4:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
    21d6:	1dbb      	adds	r3, r7, #6
    21d8:	781b      	ldrb	r3, [r3, #0]
    21da:	2201      	movs	r2, #1
    21dc:	409a      	lsls	r2, r3
    21de:	1dfb      	adds	r3, r7, #7
    21e0:	7819      	ldrb	r1, [r3, #0]
    21e2:	23c0      	movs	r3, #192	; 0xc0
    21e4:	05db      	lsls	r3, r3, #23
    21e6:	0018      	movs	r0, r3
    21e8:	4b1a      	ldr	r3, [pc, #104]	; (2254 <_gpio_set_pin_pull_mode+0xe4>)
    21ea:	4798      	blx	r3
		break;
    21ec:	e025      	b.n	223a <_gpio_set_pin_pull_mode+0xca>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    21ee:	1dbb      	adds	r3, r7, #6
    21f0:	781b      	ldrb	r3, [r3, #0]
    21f2:	2201      	movs	r2, #1
    21f4:	409a      	lsls	r2, r3
    21f6:	1dfb      	adds	r3, r7, #7
    21f8:	7819      	ldrb	r1, [r3, #0]
    21fa:	23c0      	movs	r3, #192	; 0xc0
    21fc:	05db      	lsls	r3, r3, #23
    21fe:	0018      	movs	r0, r3
    2200:	4b12      	ldr	r3, [pc, #72]	; (224c <_gpio_set_pin_pull_mode+0xdc>)
    2202:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    2204:	1dbb      	adds	r3, r7, #6
    2206:	781a      	ldrb	r2, [r3, #0]
    2208:	1dfb      	adds	r3, r7, #7
    220a:	781b      	ldrb	r3, [r3, #0]
    220c:	480d      	ldr	r0, [pc, #52]	; (2244 <_gpio_set_pin_pull_mode+0xd4>)
    220e:	0019      	movs	r1, r3
    2210:	4b0f      	ldr	r3, [pc, #60]	; (2250 <_gpio_set_pin_pull_mode+0xe0>)
    2212:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
    2214:	1dbb      	adds	r3, r7, #6
    2216:	781b      	ldrb	r3, [r3, #0]
    2218:	2201      	movs	r2, #1
    221a:	409a      	lsls	r2, r3
    221c:	1dfb      	adds	r3, r7, #7
    221e:	7819      	ldrb	r1, [r3, #0]
    2220:	23c0      	movs	r3, #192	; 0xc0
    2222:	05db      	lsls	r3, r3, #23
    2224:	0018      	movs	r0, r3
    2226:	4b0c      	ldr	r3, [pc, #48]	; (2258 <_gpio_set_pin_pull_mode+0xe8>)
    2228:	4798      	blx	r3
		break;
    222a:	e006      	b.n	223a <_gpio_set_pin_pull_mode+0xca>
		ASSERT(false);
    222c:	4b0b      	ldr	r3, [pc, #44]	; (225c <_gpio_set_pin_pull_mode+0xec>)
    222e:	2288      	movs	r2, #136	; 0x88
    2230:	0019      	movs	r1, r3
    2232:	2000      	movs	r0, #0
    2234:	4b0a      	ldr	r3, [pc, #40]	; (2260 <_gpio_set_pin_pull_mode+0xf0>)
    2236:	4798      	blx	r3
		break;
    2238:	46c0      	nop			; (mov r8, r8)
}
    223a:	46c0      	nop			; (mov r8, r8)
    223c:	46bd      	mov	sp, r7
    223e:	b003      	add	sp, #12
    2240:	bd90      	pop	{r4, r7, pc}
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	41004400 	.word	0x41004400
    2248:	00001efb 	.word	0x00001efb
    224c:	00001c49 	.word	0x00001c49
    2250:	00001ea5 	.word	0x00001ea5
    2254:	00001c75 	.word	0x00001c75
    2258:	00001cc5 	.word	0x00001cc5
    225c:	00004668 	.word	0x00004668
    2260:	00003369 	.word	0x00003369

00002264 <_gpio_set_pin_function>:
{
    2264:	b590      	push	{r4, r7, lr}
    2266:	b085      	sub	sp, #20
    2268:	af00      	add	r7, sp, #0
    226a:	6078      	str	r0, [r7, #4]
    226c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    226e:	687b      	ldr	r3, [r7, #4]
    2270:	095a      	lsrs	r2, r3, #5
    2272:	230f      	movs	r3, #15
    2274:	18fb      	adds	r3, r7, r3
    2276:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    2278:	687b      	ldr	r3, [r7, #4]
    227a:	b2da      	uxtb	r2, r3
    227c:	230e      	movs	r3, #14
    227e:	18fb      	adds	r3, r7, r3
    2280:	211f      	movs	r1, #31
    2282:	400a      	ands	r2, r1
    2284:	701a      	strb	r2, [r3, #0]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    2286:	683b      	ldr	r3, [r7, #0]
    2288:	3301      	adds	r3, #1
    228a:	d10a      	bne.n	22a2 <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    228c:	230e      	movs	r3, #14
    228e:	18fb      	adds	r3, r7, r3
    2290:	781a      	ldrb	r2, [r3, #0]
    2292:	230f      	movs	r3, #15
    2294:	18fb      	adds	r3, r7, r3
    2296:	7819      	ldrb	r1, [r3, #0]
    2298:	481b      	ldr	r0, [pc, #108]	; (2308 <_gpio_set_pin_function+0xa4>)
    229a:	2300      	movs	r3, #0
    229c:	4c1b      	ldr	r4, [pc, #108]	; (230c <_gpio_set_pin_function+0xa8>)
    229e:	47a0      	blx	r4
}
    22a0:	e02e      	b.n	2300 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    22a2:	230e      	movs	r3, #14
    22a4:	18fb      	adds	r3, r7, r3
    22a6:	781a      	ldrb	r2, [r3, #0]
    22a8:	230f      	movs	r3, #15
    22aa:	18fb      	adds	r3, r7, r3
    22ac:	7819      	ldrb	r1, [r3, #0]
    22ae:	4816      	ldr	r0, [pc, #88]	; (2308 <_gpio_set_pin_function+0xa4>)
    22b0:	2301      	movs	r3, #1
    22b2:	4c16      	ldr	r4, [pc, #88]	; (230c <_gpio_set_pin_function+0xa8>)
    22b4:	47a0      	blx	r4
		if (pin & 1) {
    22b6:	230e      	movs	r3, #14
    22b8:	18fb      	adds	r3, r7, r3
    22ba:	781b      	ldrb	r3, [r3, #0]
    22bc:	2201      	movs	r2, #1
    22be:	4013      	ands	r3, r2
    22c0:	d00f      	beq.n	22e2 <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    22c2:	230e      	movs	r3, #14
    22c4:	18fb      	adds	r3, r7, r3
    22c6:	781b      	ldrb	r3, [r3, #0]
    22c8:	105b      	asrs	r3, r3, #1
    22ca:	b2da      	uxtb	r2, r3
    22cc:	683b      	ldr	r3, [r7, #0]
    22ce:	b2d8      	uxtb	r0, r3
    22d0:	230f      	movs	r3, #15
    22d2:	18fb      	adds	r3, r7, r3
    22d4:	7819      	ldrb	r1, [r3, #0]
    22d6:	4c0c      	ldr	r4, [pc, #48]	; (2308 <_gpio_set_pin_function+0xa4>)
    22d8:	0003      	movs	r3, r0
    22da:	0020      	movs	r0, r4
    22dc:	4c0c      	ldr	r4, [pc, #48]	; (2310 <_gpio_set_pin_function+0xac>)
    22de:	47a0      	blx	r4
}
    22e0:	e00e      	b.n	2300 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    22e2:	230e      	movs	r3, #14
    22e4:	18fb      	adds	r3, r7, r3
    22e6:	781b      	ldrb	r3, [r3, #0]
    22e8:	105b      	asrs	r3, r3, #1
    22ea:	b2da      	uxtb	r2, r3
    22ec:	683b      	ldr	r3, [r7, #0]
    22ee:	b2d8      	uxtb	r0, r3
    22f0:	230f      	movs	r3, #15
    22f2:	18fb      	adds	r3, r7, r3
    22f4:	7819      	ldrb	r1, [r3, #0]
    22f6:	4c04      	ldr	r4, [pc, #16]	; (2308 <_gpio_set_pin_function+0xa4>)
    22f8:	0003      	movs	r3, r0
    22fa:	0020      	movs	r0, r4
    22fc:	4c05      	ldr	r4, [pc, #20]	; (2314 <_gpio_set_pin_function+0xb0>)
    22fe:	47a0      	blx	r4
}
    2300:	46c0      	nop			; (mov r8, r8)
    2302:	46bd      	mov	sp, r7
    2304:	b005      	add	sp, #20
    2306:	bd90      	pop	{r4, r7, pc}
    2308:	41004400 	.word	0x41004400
    230c:	00001e23 	.word	0x00001e23
    2310:	00001d9d 	.word	0x00001d9d
    2314:	00001d15 	.word	0x00001d15

00002318 <gpio_set_pin_pull_mode>:
{
    2318:	b580      	push	{r7, lr}
    231a:	b082      	sub	sp, #8
    231c:	af00      	add	r7, sp, #0
    231e:	0002      	movs	r2, r0
    2320:	1dfb      	adds	r3, r7, #7
    2322:	701a      	strb	r2, [r3, #0]
    2324:	1dbb      	adds	r3, r7, #6
    2326:	1c0a      	adds	r2, r1, #0
    2328:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    232a:	1dfb      	adds	r3, r7, #7
    232c:	781b      	ldrb	r3, [r3, #0]
    232e:	115b      	asrs	r3, r3, #5
    2330:	b2d8      	uxtb	r0, r3
    2332:	1dfb      	adds	r3, r7, #7
    2334:	781b      	ldrb	r3, [r3, #0]
    2336:	221f      	movs	r2, #31
    2338:	4013      	ands	r3, r2
    233a:	b2d9      	uxtb	r1, r3
    233c:	1dbb      	adds	r3, r7, #6
    233e:	781b      	ldrb	r3, [r3, #0]
    2340:	001a      	movs	r2, r3
    2342:	4b03      	ldr	r3, [pc, #12]	; (2350 <gpio_set_pin_pull_mode+0x38>)
    2344:	4798      	blx	r3
}
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	46bd      	mov	sp, r7
    234a:	b002      	add	sp, #8
    234c:	bd80      	pop	{r7, pc}
    234e:	46c0      	nop			; (mov r8, r8)
    2350:	00002171 	.word	0x00002171

00002354 <gpio_set_pin_function>:
{
    2354:	b580      	push	{r7, lr}
    2356:	b082      	sub	sp, #8
    2358:	af00      	add	r7, sp, #0
    235a:	6078      	str	r0, [r7, #4]
    235c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    235e:	683a      	ldr	r2, [r7, #0]
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	0011      	movs	r1, r2
    2364:	0018      	movs	r0, r3
    2366:	4b03      	ldr	r3, [pc, #12]	; (2374 <gpio_set_pin_function+0x20>)
    2368:	4798      	blx	r3
}
    236a:	46c0      	nop			; (mov r8, r8)
    236c:	46bd      	mov	sp, r7
    236e:	b002      	add	sp, #8
    2370:	bd80      	pop	{r7, pc}
    2372:	46c0      	nop			; (mov r8, r8)
    2374:	00002265 	.word	0x00002265

00002378 <gpio_set_pin_direction>:
{
    2378:	b580      	push	{r7, lr}
    237a:	b082      	sub	sp, #8
    237c:	af00      	add	r7, sp, #0
    237e:	0002      	movs	r2, r0
    2380:	1dfb      	adds	r3, r7, #7
    2382:	701a      	strb	r2, [r3, #0]
    2384:	1dbb      	adds	r3, r7, #6
    2386:	1c0a      	adds	r2, r1, #0
    2388:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    238a:	1dfb      	adds	r3, r7, #7
    238c:	781b      	ldrb	r3, [r3, #0]
    238e:	115b      	asrs	r3, r3, #5
    2390:	b2d8      	uxtb	r0, r3
    2392:	1dfb      	adds	r3, r7, #7
    2394:	781b      	ldrb	r3, [r3, #0]
    2396:	001a      	movs	r2, r3
    2398:	231f      	movs	r3, #31
    239a:	4013      	ands	r3, r2
    239c:	2201      	movs	r2, #1
    239e:	409a      	lsls	r2, r3
    23a0:	0011      	movs	r1, r2
    23a2:	1dbb      	adds	r3, r7, #6
    23a4:	781b      	ldrb	r3, [r3, #0]
    23a6:	001a      	movs	r2, r3
    23a8:	4b02      	ldr	r3, [pc, #8]	; (23b4 <gpio_set_pin_direction+0x3c>)
    23aa:	4798      	blx	r3
}
    23ac:	46c0      	nop			; (mov r8, r8)
    23ae:	46bd      	mov	sp, r7
    23b0:	b002      	add	sp, #8
    23b2:	bd80      	pop	{r7, pc}
    23b4:	00001f7d 	.word	0x00001f7d

000023b8 <gpio_set_pin_level>:
{
    23b8:	b580      	push	{r7, lr}
    23ba:	b082      	sub	sp, #8
    23bc:	af00      	add	r7, sp, #0
    23be:	0002      	movs	r2, r0
    23c0:	1dfb      	adds	r3, r7, #7
    23c2:	701a      	strb	r2, [r3, #0]
    23c4:	1dbb      	adds	r3, r7, #6
    23c6:	1c0a      	adds	r2, r1, #0
    23c8:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    23ca:	1dfb      	adds	r3, r7, #7
    23cc:	781b      	ldrb	r3, [r3, #0]
    23ce:	115b      	asrs	r3, r3, #5
    23d0:	b2d8      	uxtb	r0, r3
    23d2:	1dfb      	adds	r3, r7, #7
    23d4:	781b      	ldrb	r3, [r3, #0]
    23d6:	001a      	movs	r2, r3
    23d8:	231f      	movs	r3, #31
    23da:	4013      	ands	r3, r2
    23dc:	2201      	movs	r2, #1
    23de:	409a      	lsls	r2, r3
    23e0:	0011      	movs	r1, r2
    23e2:	1dbb      	adds	r3, r7, #6
    23e4:	781b      	ldrb	r3, [r3, #0]
    23e6:	001a      	movs	r2, r3
    23e8:	4b02      	ldr	r3, [pc, #8]	; (23f4 <gpio_set_pin_level+0x3c>)
    23ea:	4798      	blx	r3
}
    23ec:	46c0      	nop			; (mov r8, r8)
    23ee:	46bd      	mov	sp, r7
    23f0:	b002      	add	sp, #8
    23f2:	bd80      	pop	{r7, pc}
    23f4:	00002095 	.word	0x00002095

000023f8 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    23f8:	b580      	push	{r7, lr}
    23fa:	b082      	sub	sp, #8
    23fc:	af00      	add	r7, sp, #0
    23fe:	0002      	movs	r2, r0
    2400:	1dfb      	adds	r3, r7, #7
    2402:	701a      	strb	r2, [r3, #0]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    2404:	1dfb      	adds	r3, r7, #7
    2406:	781b      	ldrb	r3, [r3, #0]
    2408:	115b      	asrs	r3, r3, #5
    240a:	b2db      	uxtb	r3, r3
    240c:	0018      	movs	r0, r3
    240e:	4b09      	ldr	r3, [pc, #36]	; (2434 <gpio_get_pin_level+0x3c>)
    2410:	4798      	blx	r3
    2412:	0001      	movs	r1, r0
    2414:	1dfb      	adds	r3, r7, #7
    2416:	781b      	ldrb	r3, [r3, #0]
    2418:	001a      	movs	r2, r3
    241a:	231f      	movs	r3, #31
    241c:	4013      	ands	r3, r2
    241e:	2201      	movs	r2, #1
    2420:	409a      	lsls	r2, r3
    2422:	0013      	movs	r3, r2
    2424:	400b      	ands	r3, r1
    2426:	1e5a      	subs	r2, r3, #1
    2428:	4193      	sbcs	r3, r2
    242a:	b2db      	uxtb	r3, r3
}
    242c:	0018      	movs	r0, r3
    242e:	46bd      	mov	sp, r7
    2430:	b002      	add	sp, #8
    2432:	bd80      	pop	{r7, pc}
    2434:	000020e5 	.word	0x000020e5

00002438 <_ZL15ChangeModeTimerPK10timer_task>:
	}
	
}

static void ChangeModeTimer(const struct timer_task *const timer_task)
{
    2438:	b580      	push	{r7, lr}
    243a:	b082      	sub	sp, #8
    243c:	af00      	add	r7, sp, #0
    243e:	6078      	str	r0, [r7, #4]
	if (nmi.pressed)
    2440:	4b3d      	ldr	r3, [pc, #244]	; (2538 <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    2442:	781b      	ldrb	r3, [r3, #0]
    2444:	b2db      	uxtb	r3, r3
    2446:	2b00      	cmp	r3, #0
    2448:	d054      	beq.n	24f4 <_ZL15ChangeModeTimerPK10timer_task+0xbc>
	{
		nmi.pressCounter++;
    244a:	4b3b      	ldr	r3, [pc, #236]	; (2538 <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    244c:	689b      	ldr	r3, [r3, #8]
    244e:	1c5a      	adds	r2, r3, #1
    2450:	4b39      	ldr	r3, [pc, #228]	; (2538 <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    2452:	609a      	str	r2, [r3, #8]
		//lighter.changeModeRequest=false;
		//nmi.modulate=true;
		if (!nmi.direction)
    2454:	4b38      	ldr	r3, [pc, #224]	; (2538 <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    2456:	791b      	ldrb	r3, [r3, #4]
    2458:	b2db      	uxtb	r3, r3
    245a:	2201      	movs	r2, #1
    245c:	4053      	eors	r3, r2
    245e:	b2db      	uxtb	r3, r3
    2460:	2b00      	cmp	r3, #0
    2462:	d023      	beq.n	24ac <_ZL15ChangeModeTimerPK10timer_task+0x74>
		{
			if (lighter.stepTime<POWERON_SINGLE_TIME_MAX)
    2464:	4a35      	ldr	r2, [pc, #212]	; (253c <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    2466:	23c0      	movs	r3, #192	; 0xc0
    2468:	005b      	lsls	r3, r3, #1
    246a:	58d2      	ldr	r2, [r2, r3]
    246c:	4934      	ldr	r1, [pc, #208]	; (2540 <_ZL15ChangeModeTimerPK10timer_task+0x108>)
    246e:	2300      	movs	r3, #0
    2470:	4291      	cmp	r1, r2
    2472:	415b      	adcs	r3, r3
    2474:	b2db      	uxtb	r3, r3
    2476:	2b00      	cmp	r3, #0
    2478:	d00a      	beq.n	2490 <_ZL15ChangeModeTimerPK10timer_task+0x58>
			{
				lighter.stepTime+=10;
    247a:	4a30      	ldr	r2, [pc, #192]	; (253c <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    247c:	23c0      	movs	r3, #192	; 0xc0
    247e:	005b      	lsls	r3, r3, #1
    2480:	58d3      	ldr	r3, [r2, r3]
    2482:	330a      	adds	r3, #10
    2484:	0019      	movs	r1, r3
    2486:	4a2d      	ldr	r2, [pc, #180]	; (253c <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    2488:	23c0      	movs	r3, #192	; 0xc0
    248a:	005b      	lsls	r3, r3, #1
    248c:	50d1      	str	r1, [r2, r3]
			nmi.modulate=true;
		}
		//lighter.changeModeRequest=true;
	}
	
}
    248e:	e04e      	b.n	252e <_ZL15ChangeModeTimerPK10timer_task+0xf6>
				lighter.stepTime-=10;
    2490:	4a2a      	ldr	r2, [pc, #168]	; (253c <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    2492:	23c0      	movs	r3, #192	; 0xc0
    2494:	005b      	lsls	r3, r3, #1
    2496:	58d3      	ldr	r3, [r2, r3]
    2498:	3b0a      	subs	r3, #10
    249a:	0019      	movs	r1, r3
    249c:	4a27      	ldr	r2, [pc, #156]	; (253c <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    249e:	23c0      	movs	r3, #192	; 0xc0
    24a0:	005b      	lsls	r3, r3, #1
    24a2:	50d1      	str	r1, [r2, r3]
				nmi.direction=true;
    24a4:	4b24      	ldr	r3, [pc, #144]	; (2538 <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    24a6:	2201      	movs	r2, #1
    24a8:	711a      	strb	r2, [r3, #4]
}
    24aa:	e040      	b.n	252e <_ZL15ChangeModeTimerPK10timer_task+0xf6>
			if (lighter.stepTime<10)
    24ac:	4a23      	ldr	r2, [pc, #140]	; (253c <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    24ae:	23c0      	movs	r3, #192	; 0xc0
    24b0:	005b      	lsls	r3, r3, #1
    24b2:	58d2      	ldr	r2, [r2, r3]
    24b4:	2109      	movs	r1, #9
    24b6:	2300      	movs	r3, #0
    24b8:	4291      	cmp	r1, r2
    24ba:	415b      	adcs	r3, r3
    24bc:	b2db      	uxtb	r3, r3
    24be:	2b00      	cmp	r3, #0
    24c0:	d00d      	beq.n	24de <_ZL15ChangeModeTimerPK10timer_task+0xa6>
				lighter.stepTime+=10;
    24c2:	4a1e      	ldr	r2, [pc, #120]	; (253c <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    24c4:	23c0      	movs	r3, #192	; 0xc0
    24c6:	005b      	lsls	r3, r3, #1
    24c8:	58d3      	ldr	r3, [r2, r3]
    24ca:	330a      	adds	r3, #10
    24cc:	0019      	movs	r1, r3
    24ce:	4a1b      	ldr	r2, [pc, #108]	; (253c <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    24d0:	23c0      	movs	r3, #192	; 0xc0
    24d2:	005b      	lsls	r3, r3, #1
    24d4:	50d1      	str	r1, [r2, r3]
				nmi.direction=false;
    24d6:	4b18      	ldr	r3, [pc, #96]	; (2538 <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    24d8:	2200      	movs	r2, #0
    24da:	711a      	strb	r2, [r3, #4]
}
    24dc:	e027      	b.n	252e <_ZL15ChangeModeTimerPK10timer_task+0xf6>
				lighter.stepTime-=10;
    24de:	4a17      	ldr	r2, [pc, #92]	; (253c <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    24e0:	23c0      	movs	r3, #192	; 0xc0
    24e2:	005b      	lsls	r3, r3, #1
    24e4:	58d3      	ldr	r3, [r2, r3]
    24e6:	3b0a      	subs	r3, #10
    24e8:	0019      	movs	r1, r3
    24ea:	4a14      	ldr	r2, [pc, #80]	; (253c <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    24ec:	23c0      	movs	r3, #192	; 0xc0
    24ee:	005b      	lsls	r3, r3, #1
    24f0:	50d1      	str	r1, [r2, r3]
}
    24f2:	e01c      	b.n	252e <_ZL15ChangeModeTimerPK10timer_task+0xf6>
		nmi.released=true;
    24f4:	4b10      	ldr	r3, [pc, #64]	; (2538 <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    24f6:	2201      	movs	r2, #1
    24f8:	715a      	strb	r2, [r3, #5]
		if (nmi.pressCounter<100)
    24fa:	4b0f      	ldr	r3, [pc, #60]	; (2538 <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    24fc:	689a      	ldr	r2, [r3, #8]
    24fe:	2163      	movs	r1, #99	; 0x63
    2500:	2300      	movs	r3, #0
    2502:	4291      	cmp	r1, r2
    2504:	415b      	adcs	r3, r3
    2506:	b2db      	uxtb	r3, r3
    2508:	2b00      	cmp	r3, #0
    250a:	d008      	beq.n	251e <_ZL15ChangeModeTimerPK10timer_task+0xe6>
			lighter.changeModeRequest=true;
    250c:	4a0b      	ldr	r2, [pc, #44]	; (253c <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    250e:	23bc      	movs	r3, #188	; 0xbc
    2510:	005b      	lsls	r3, r3, #1
    2512:	2101      	movs	r1, #1
    2514:	54d1      	strb	r1, [r2, r3]
			nmi.modulate=false;
    2516:	4b08      	ldr	r3, [pc, #32]	; (2538 <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    2518:	2200      	movs	r2, #0
    251a:	709a      	strb	r2, [r3, #2]
}
    251c:	e007      	b.n	252e <_ZL15ChangeModeTimerPK10timer_task+0xf6>
			lighter.changeModeRequest=false;
    251e:	4a07      	ldr	r2, [pc, #28]	; (253c <_ZL15ChangeModeTimerPK10timer_task+0x104>)
    2520:	23bc      	movs	r3, #188	; 0xbc
    2522:	005b      	lsls	r3, r3, #1
    2524:	2100      	movs	r1, #0
    2526:	54d1      	strb	r1, [r2, r3]
			nmi.modulate=true;
    2528:	4b03      	ldr	r3, [pc, #12]	; (2538 <_ZL15ChangeModeTimerPK10timer_task+0x100>)
    252a:	2201      	movs	r2, #1
    252c:	709a      	strb	r2, [r3, #2]
}
    252e:	46c0      	nop			; (mov r8, r8)
    2530:	46bd      	mov	sp, r7
    2532:	b002      	add	sp, #8
    2534:	bd80      	pop	{r7, pc}
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	200007a8 	.word	0x200007a8
    253c:	20000518 	.word	0x20000518
    2540:	00000f9f 	.word	0x00000f9f

00002544 <_ZN15NMIButton_ClassC1Ev>:

// default constructor
NMIButton_Class::NMIButton_Class()
    2544:	b580      	push	{r7, lr}
    2546:	b082      	sub	sp, #8
    2548:	af00      	add	r7, sp, #0
    254a:	6078      	str	r0, [r7, #4]
{
	pressedTimerStarted=false;
    254c:	687b      	ldr	r3, [r7, #4]
    254e:	2200      	movs	r2, #0
    2550:	705a      	strb	r2, [r3, #1]
	pressCounter=0;
    2552:	687b      	ldr	r3, [r7, #4]
    2554:	2200      	movs	r2, #0
    2556:	609a      	str	r2, [r3, #8]
} //NMIButton_Class
    2558:	687b      	ldr	r3, [r7, #4]
    255a:	0018      	movs	r0, r3
    255c:	46bd      	mov	sp, r7
    255e:	b002      	add	sp, #8
    2560:	bd80      	pop	{r7, pc}

00002562 <_ZN15NMIButton_ClassD1Ev>:

// default destructor
NMIButton_Class::~NMIButton_Class()
    2562:	b580      	push	{r7, lr}
    2564:	b082      	sub	sp, #8
    2566:	af00      	add	r7, sp, #0
    2568:	6078      	str	r0, [r7, #4]
{
} //~NMIButton_Class
    256a:	687b      	ldr	r3, [r7, #4]
    256c:	0018      	movs	r0, r3
    256e:	46bd      	mov	sp, r7
    2570:	b002      	add	sp, #8
    2572:	bd80      	pop	{r7, pc}

00002574 <_ZN15NMIButton_Class15IsButtonPressedEv>:

bool	NMIButton_Class::IsButtonPressed(void){
    2574:	b580      	push	{r7, lr}
    2576:	b082      	sub	sp, #8
    2578:	af00      	add	r7, sp, #0
    257a:	6078      	str	r0, [r7, #4]
	if (!lighter.poweron)
    257c:	4a1b      	ldr	r2, [pc, #108]	; (25ec <_ZN15NMIButton_Class15IsButtonPressedEv+0x78>)
    257e:	23bb      	movs	r3, #187	; 0xbb
    2580:	005b      	lsls	r3, r3, #1
    2582:	5cd3      	ldrb	r3, [r2, r3]
    2584:	b2db      	uxtb	r3, r3
    2586:	2201      	movs	r2, #1
    2588:	4053      	eors	r3, r2
    258a:	b2db      	uxtb	r3, r3
    258c:	2b00      	cmp	r3, #0
    258e:	d027      	beq.n	25e0 <_ZN15NMIButton_Class15IsButtonPressedEv+0x6c>
	{
		gpio_set_pin_direction(NMI,GPIO_DIRECTION_IN);
    2590:	2101      	movs	r1, #1
    2592:	2008      	movs	r0, #8
    2594:	4b16      	ldr	r3, [pc, #88]	; (25f0 <_ZN15NMIButton_Class15IsButtonPressedEv+0x7c>)
    2596:	4798      	blx	r3
		gpio_set_pin_pull_mode(NMI,GPIO_PULL_UP);
    2598:	2101      	movs	r1, #1
    259a:	2008      	movs	r0, #8
    259c:	4b15      	ldr	r3, [pc, #84]	; (25f4 <_ZN15NMIButton_Class15IsButtonPressedEv+0x80>)
    259e:	4798      	blx	r3
		pressed=gpio_get_pin_level(NMI)==false;
    25a0:	2008      	movs	r0, #8
    25a2:	4b15      	ldr	r3, [pc, #84]	; (25f8 <_ZN15NMIButton_Class15IsButtonPressedEv+0x84>)
    25a4:	4798      	blx	r3
    25a6:	0003      	movs	r3, r0
    25a8:	001a      	movs	r2, r3
    25aa:	2301      	movs	r3, #1
    25ac:	4053      	eors	r3, r2
    25ae:	b2da      	uxtb	r2, r3
    25b0:	687b      	ldr	r3, [r7, #4]
    25b2:	701a      	strb	r2, [r3, #0]
		
		
		gpio_set_pin_pull_mode(NMI,GPIO_PULL_DOWN);
    25b4:	2102      	movs	r1, #2
    25b6:	2008      	movs	r0, #8
    25b8:	4b0e      	ldr	r3, [pc, #56]	; (25f4 <_ZN15NMIButton_Class15IsButtonPressedEv+0x80>)
    25ba:	4798      	blx	r3
		gpio_set_pin_direction(NMI, GPIO_DIRECTION_OUT);
    25bc:	2102      	movs	r1, #2
    25be:	2008      	movs	r0, #8
    25c0:	4b0b      	ldr	r3, [pc, #44]	; (25f0 <_ZN15NMIButton_Class15IsButtonPressedEv+0x7c>)
    25c2:	4798      	blx	r3
		gpio_set_pin_function(NMI, GPIO_PIN_FUNCTION_OFF);
    25c4:	2301      	movs	r3, #1
    25c6:	425b      	negs	r3, r3
    25c8:	0019      	movs	r1, r3
    25ca:	2008      	movs	r0, #8
    25cc:	4b0b      	ldr	r3, [pc, #44]	; (25fc <_ZN15NMIButton_Class15IsButtonPressedEv+0x88>)
    25ce:	4798      	blx	r3
		gpio_set_pin_level(NMI,false);
    25d0:	2100      	movs	r1, #0
    25d2:	2008      	movs	r0, #8
    25d4:	4b0a      	ldr	r3, [pc, #40]	; (2600 <_ZN15NMIButton_Class15IsButtonPressedEv+0x8c>)
    25d6:	4798      	blx	r3
		return	pressed;
    25d8:	687b      	ldr	r3, [r7, #4]
    25da:	781b      	ldrb	r3, [r3, #0]
    25dc:	b2db      	uxtb	r3, r3
    25de:	e000      	b.n	25e2 <_ZN15NMIButton_Class15IsButtonPressedEv+0x6e>
	} 
	else
	{
		return false;
    25e0:	2300      	movs	r3, #0
	}
	return false;
}
    25e2:	0018      	movs	r0, r3
    25e4:	46bd      	mov	sp, r7
    25e6:	b002      	add	sp, #8
    25e8:	bd80      	pop	{r7, pc}
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	20000518 	.word	0x20000518
    25f0:	00002379 	.word	0x00002379
    25f4:	00002319 	.word	0x00002319
    25f8:	000023f9 	.word	0x000023f9
    25fc:	00002355 	.word	0x00002355
    2600:	000023b9 	.word	0x000023b9

00002604 <_ZN15NMIButton_Class9OnPressedEv>:
uint32_t	NMIButton_Class::OnPressed(void){
    2604:	b580      	push	{r7, lr}
    2606:	b082      	sub	sp, #8
    2608:	af00      	add	r7, sp, #0
    260a:	6078      	str	r0, [r7, #4]
	if (!pressedTimerStarted)
    260c:	687b      	ldr	r3, [r7, #4]
    260e:	785b      	ldrb	r3, [r3, #1]
    2610:	b2db      	uxtb	r3, r3
    2612:	2201      	movs	r2, #1
    2614:	4053      	eors	r3, r2
    2616:	b2db      	uxtb	r3, r3
    2618:	2b00      	cmp	r3, #0
    261a:	d020      	beq.n	265e <_ZN15NMIButton_Class9OnPressedEv+0x5a>
	{
		butttonTimer.stop();
    261c:	4b24      	ldr	r3, [pc, #144]	; (26b0 <_ZN15NMIButton_Class9OnPressedEv+0xac>)
    261e:	0018      	movs	r0, r3
    2620:	4b24      	ldr	r3, [pc, #144]	; (26b4 <_ZN15NMIButton_Class9OnPressedEv+0xb0>)
    2622:	4798      	blx	r3
		pressCounter=0;
    2624:	687b      	ldr	r3, [r7, #4]
    2626:	2200      	movs	r2, #0
    2628:	609a      	str	r2, [r3, #8]
		direction=false;
    262a:	687b      	ldr	r3, [r7, #4]
    262c:	2200      	movs	r2, #0
    262e:	711a      	strb	r2, [r3, #4]
		butttonTimer.add_periodic_task((FUNC_PTR)ChangeModeTimer,COUNTER_TIME);
    2630:	4921      	ldr	r1, [pc, #132]	; (26b8 <_ZN15NMIButton_Class9OnPressedEv+0xb4>)
    2632:	4b1f      	ldr	r3, [pc, #124]	; (26b0 <_ZN15NMIButton_Class9OnPressedEv+0xac>)
    2634:	2204      	movs	r2, #4
    2636:	0018      	movs	r0, r3
    2638:	4b20      	ldr	r3, [pc, #128]	; (26bc <_ZN15NMIButton_Class9OnPressedEv+0xb8>)
    263a:	4798      	blx	r3
		butttonTimer.start();
    263c:	4b1c      	ldr	r3, [pc, #112]	; (26b0 <_ZN15NMIButton_Class9OnPressedEv+0xac>)
    263e:	0018      	movs	r0, r3
    2640:	4b1f      	ldr	r3, [pc, #124]	; (26c0 <_ZN15NMIButton_Class9OnPressedEv+0xbc>)
    2642:	4798      	blx	r3
		stepTime=lighter.stepTime;
    2644:	4a1f      	ldr	r2, [pc, #124]	; (26c4 <_ZN15NMIButton_Class9OnPressedEv+0xc0>)
    2646:	23c0      	movs	r3, #192	; 0xc0
    2648:	005b      	lsls	r3, r3, #1
    264a:	58d2      	ldr	r2, [r2, r3]
    264c:	687b      	ldr	r3, [r7, #4]
    264e:	60da      	str	r2, [r3, #12]
		nmi.released=false;
    2650:	4b1d      	ldr	r3, [pc, #116]	; (26c8 <_ZN15NMIButton_Class9OnPressedEv+0xc4>)
    2652:	2200      	movs	r2, #0
    2654:	715a      	strb	r2, [r3, #5]
		pressedTimerStarted=true;
    2656:	687b      	ldr	r3, [r7, #4]
    2658:	2201      	movs	r2, #1
    265a:	705a      	strb	r2, [r3, #1]
    265c:	e022      	b.n	26a4 <_ZN15NMIButton_Class9OnPressedEv+0xa0>
	}else{
		if (IsButtonPressed()){
    265e:	687b      	ldr	r3, [r7, #4]
    2660:	0018      	movs	r0, r3
    2662:	4b1a      	ldr	r3, [pc, #104]	; (26cc <_ZN15NMIButton_Class9OnPressedEv+0xc8>)
    2664:	4798      	blx	r3
    2666:	1e03      	subs	r3, r0, #0
    2668:	d004      	beq.n	2674 <_ZN15NMIButton_Class9OnPressedEv+0x70>
			ModulateStepTime();
    266a:	687b      	ldr	r3, [r7, #4]
    266c:	0018      	movs	r0, r3
    266e:	4b18      	ldr	r3, [pc, #96]	; (26d0 <_ZN15NMIButton_Class9OnPressedEv+0xcc>)
    2670:	4798      	blx	r3
    2672:	e017      	b.n	26a4 <_ZN15NMIButton_Class9OnPressedEv+0xa0>
		}
		else
		{
			if (pressCounter<COUNTER_TIME)
    2674:	687b      	ldr	r3, [r7, #4]
    2676:	689a      	ldr	r2, [r3, #8]
    2678:	2103      	movs	r1, #3
    267a:	2300      	movs	r3, #0
    267c:	4291      	cmp	r1, r2
    267e:	415b      	adcs	r3, r3
    2680:	b2db      	uxtb	r3, r3
    2682:	2b00      	cmp	r3, #0
    2684:	d005      	beq.n	2692 <_ZN15NMIButton_Class9OnPressedEv+0x8e>
			{
				lighter.changeModeRequest=true;
    2686:	4a0f      	ldr	r2, [pc, #60]	; (26c4 <_ZN15NMIButton_Class9OnPressedEv+0xc0>)
    2688:	23bc      	movs	r3, #188	; 0xbc
    268a:	005b      	lsls	r3, r3, #1
    268c:	2101      	movs	r1, #1
    268e:	54d1      	strb	r1, [r2, r3]
    2690:	e004      	b.n	269c <_ZN15NMIButton_Class9OnPressedEv+0x98>
			
			} 
			else
			{
				lighter.changeModeRequest=false;
    2692:	4a0c      	ldr	r2, [pc, #48]	; (26c4 <_ZN15NMIButton_Class9OnPressedEv+0xc0>)
    2694:	23bc      	movs	r3, #188	; 0xbc
    2696:	005b      	lsls	r3, r3, #1
    2698:	2100      	movs	r1, #0
    269a:	54d1      	strb	r1, [r2, r3]
				
			}
			OnRelease();
    269c:	687b      	ldr	r3, [r7, #4]
    269e:	0018      	movs	r0, r3
    26a0:	4b0c      	ldr	r3, [pc, #48]	; (26d4 <_ZN15NMIButton_Class9OnPressedEv+0xd0>)
    26a2:	4798      	blx	r3
			
		}
	}
		
	
	return	stepTime;
    26a4:	687b      	ldr	r3, [r7, #4]
    26a6:	68db      	ldr	r3, [r3, #12]
}
    26a8:	0018      	movs	r0, r3
    26aa:	46bd      	mov	sp, r7
    26ac:	b002      	add	sp, #8
    26ae:	bd80      	pop	{r7, pc}
    26b0:	200007bc 	.word	0x200007bc
    26b4:	0000290d 	.word	0x0000290d
    26b8:	00002439 	.word	0x00002439
    26bc:	0000299d 	.word	0x0000299d
    26c0:	000028e9 	.word	0x000028e9
    26c4:	20000518 	.word	0x20000518
    26c8:	200007a8 	.word	0x200007a8
    26cc:	00002575 	.word	0x00002575
    26d0:	000026d9 	.word	0x000026d9
    26d4:	00002799 	.word	0x00002799

000026d8 <_ZN15NMIButton_Class16ModulateStepTimeEv>:
uint32_t	NMIButton_Class::ModulateStepTime(void){
    26d8:	b580      	push	{r7, lr}
    26da:	b082      	sub	sp, #8
    26dc:	af00      	add	r7, sp, #0
    26de:	6078      	str	r0, [r7, #4]
	pressCounter++;
    26e0:	687b      	ldr	r3, [r7, #4]
    26e2:	689b      	ldr	r3, [r3, #8]
    26e4:	1c5a      	adds	r2, r3, #1
    26e6:	687b      	ldr	r3, [r7, #4]
    26e8:	609a      	str	r2, [r3, #8]
	
	if (!direction)
    26ea:	687b      	ldr	r3, [r7, #4]
    26ec:	791b      	ldrb	r3, [r3, #4]
    26ee:	b2db      	uxtb	r3, r3
    26f0:	2201      	movs	r2, #1
    26f2:	4053      	eors	r3, r2
    26f4:	b2db      	uxtb	r3, r3
    26f6:	2b00      	cmp	r3, #0
    26f8:	d021      	beq.n	273e <_ZN15NMIButton_Class16ModulateStepTimeEv+0x66>
	{
		if (lighter.stepTime<POWERON_SINGLE_TIME_MAX)
    26fa:	4a25      	ldr	r2, [pc, #148]	; (2790 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    26fc:	23c0      	movs	r3, #192	; 0xc0
    26fe:	005b      	lsls	r3, r3, #1
    2700:	58d2      	ldr	r2, [r2, r3]
    2702:	4924      	ldr	r1, [pc, #144]	; (2794 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xbc>)
    2704:	2300      	movs	r3, #0
    2706:	4291      	cmp	r1, r2
    2708:	415b      	adcs	r3, r3
    270a:	b2db      	uxtb	r3, r3
    270c:	2b00      	cmp	r3, #0
    270e:	d009      	beq.n	2724 <_ZN15NMIButton_Class16ModulateStepTimeEv+0x4c>
		{
			lighter.stepTime+=COUNTER_TIME;
    2710:	4a1f      	ldr	r2, [pc, #124]	; (2790 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    2712:	23c0      	movs	r3, #192	; 0xc0
    2714:	005b      	lsls	r3, r3, #1
    2716:	58d3      	ldr	r3, [r2, r3]
    2718:	1d19      	adds	r1, r3, #4
    271a:	4a1d      	ldr	r2, [pc, #116]	; (2790 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    271c:	23c0      	movs	r3, #192	; 0xc0
    271e:	005b      	lsls	r3, r3, #1
    2720:	50d1      	str	r1, [r2, r3]
    2722:	e02d      	b.n	2780 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xa8>
		}
		else
		{
			lighter.stepTime-=COUNTER_TIME;
    2724:	4a1a      	ldr	r2, [pc, #104]	; (2790 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    2726:	23c0      	movs	r3, #192	; 0xc0
    2728:	005b      	lsls	r3, r3, #1
    272a:	58d3      	ldr	r3, [r2, r3]
    272c:	1f19      	subs	r1, r3, #4
    272e:	4a18      	ldr	r2, [pc, #96]	; (2790 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    2730:	23c0      	movs	r3, #192	; 0xc0
    2732:	005b      	lsls	r3, r3, #1
    2734:	50d1      	str	r1, [r2, r3]
			direction=true;
    2736:	687b      	ldr	r3, [r7, #4]
    2738:	2201      	movs	r2, #1
    273a:	711a      	strb	r2, [r3, #4]
    273c:	e020      	b.n	2780 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xa8>
		}
	}
	else
	{
		if (lighter.stepTime<COUNTER_TIME)
    273e:	4a14      	ldr	r2, [pc, #80]	; (2790 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    2740:	23c0      	movs	r3, #192	; 0xc0
    2742:	005b      	lsls	r3, r3, #1
    2744:	58d2      	ldr	r2, [r2, r3]
    2746:	2103      	movs	r1, #3
    2748:	2300      	movs	r3, #0
    274a:	4291      	cmp	r1, r2
    274c:	415b      	adcs	r3, r3
    274e:	b2db      	uxtb	r3, r3
    2750:	2b00      	cmp	r3, #0
    2752:	d00c      	beq.n	276e <_ZN15NMIButton_Class16ModulateStepTimeEv+0x96>
		{
			lighter.stepTime+=COUNTER_TIME;
    2754:	4a0e      	ldr	r2, [pc, #56]	; (2790 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    2756:	23c0      	movs	r3, #192	; 0xc0
    2758:	005b      	lsls	r3, r3, #1
    275a:	58d3      	ldr	r3, [r2, r3]
    275c:	1d19      	adds	r1, r3, #4
    275e:	4a0c      	ldr	r2, [pc, #48]	; (2790 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    2760:	23c0      	movs	r3, #192	; 0xc0
    2762:	005b      	lsls	r3, r3, #1
    2764:	50d1      	str	r1, [r2, r3]
			direction=false;
    2766:	687b      	ldr	r3, [r7, #4]
    2768:	2200      	movs	r2, #0
    276a:	711a      	strb	r2, [r3, #4]
    276c:	e008      	b.n	2780 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xa8>
		}
		else
		{
			lighter.stepTime-=COUNTER_TIME;
    276e:	4a08      	ldr	r2, [pc, #32]	; (2790 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    2770:	23c0      	movs	r3, #192	; 0xc0
    2772:	005b      	lsls	r3, r3, #1
    2774:	58d3      	ldr	r3, [r2, r3]
    2776:	1f19      	subs	r1, r3, #4
    2778:	4a05      	ldr	r2, [pc, #20]	; (2790 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    277a:	23c0      	movs	r3, #192	; 0xc0
    277c:	005b      	lsls	r3, r3, #1
    277e:	50d1      	str	r1, [r2, r3]
			
		}
	}
	return	lighter.stepTime;
    2780:	4a03      	ldr	r2, [pc, #12]	; (2790 <_ZN15NMIButton_Class16ModulateStepTimeEv+0xb8>)
    2782:	23c0      	movs	r3, #192	; 0xc0
    2784:	005b      	lsls	r3, r3, #1
    2786:	58d3      	ldr	r3, [r2, r3]
}
    2788:	0018      	movs	r0, r3
    278a:	46bd      	mov	sp, r7
    278c:	b002      	add	sp, #8
    278e:	bd80      	pop	{r7, pc}
    2790:	20000518 	.word	0x20000518
    2794:	00000f9f 	.word	0x00000f9f

00002798 <_ZN15NMIButton_Class9OnReleaseEv>:
	
uint32_t NMIButton_Class::OnRelease(void){
    2798:	b580      	push	{r7, lr}
    279a:	b082      	sub	sp, #8
    279c:	af00      	add	r7, sp, #0
    279e:	6078      	str	r0, [r7, #4]
	if (IsButtonPressed()){
    27a0:	687b      	ldr	r3, [r7, #4]
    27a2:	0018      	movs	r0, r3
    27a4:	4b0e      	ldr	r3, [pc, #56]	; (27e0 <_ZN15NMIButton_Class9OnReleaseEv+0x48>)
    27a6:	4798      	blx	r3
    27a8:	1e03      	subs	r3, r0, #0
    27aa:	d002      	beq.n	27b2 <_ZN15NMIButton_Class9OnReleaseEv+0x1a>
			if ((modulate))
    27ac:	687b      	ldr	r3, [r7, #4]
    27ae:	789b      	ldrb	r3, [r3, #2]
    27b0:	e010      	b.n	27d4 <_ZN15NMIButton_Class9OnReleaseEv+0x3c>
				//butttonTimer.stop();
				//butttonTimer.Start_oneShot_task((FUNC_PTR)IncrementDutyCycle,COUNTER_TIME);
				
			}
	}else{
				butttonTimer.stop();
    27b2:	4b0c      	ldr	r3, [pc, #48]	; (27e4 <_ZN15NMIButton_Class9OnReleaseEv+0x4c>)
    27b4:	0018      	movs	r0, r3
    27b6:	4b0c      	ldr	r3, [pc, #48]	; (27e8 <_ZN15NMIButton_Class9OnReleaseEv+0x50>)
    27b8:	4798      	blx	r3
				butttonTimer.remove_task();
    27ba:	4b0a      	ldr	r3, [pc, #40]	; (27e4 <_ZN15NMIButton_Class9OnReleaseEv+0x4c>)
    27bc:	0018      	movs	r0, r3
    27be:	4b0b      	ldr	r3, [pc, #44]	; (27ec <_ZN15NMIButton_Class9OnReleaseEv+0x54>)
    27c0:	4798      	blx	r3
				stepTime=lighter.stepTime;
    27c2:	4a0b      	ldr	r2, [pc, #44]	; (27f0 <_ZN15NMIButton_Class9OnReleaseEv+0x58>)
    27c4:	23c0      	movs	r3, #192	; 0xc0
    27c6:	005b      	lsls	r3, r3, #1
    27c8:	58d2      	ldr	r2, [r2, r3]
    27ca:	687b      	ldr	r3, [r7, #4]
    27cc:	60da      	str	r2, [r3, #12]
				pressedTimerStarted=false;
    27ce:	687b      	ldr	r3, [r7, #4]
    27d0:	2200      	movs	r2, #0
    27d2:	705a      	strb	r2, [r3, #1]
				
	}

	return	stepTime;
    27d4:	687b      	ldr	r3, [r7, #4]
    27d6:	68db      	ldr	r3, [r3, #12]
}
    27d8:	0018      	movs	r0, r3
    27da:	46bd      	mov	sp, r7
    27dc:	b002      	add	sp, #8
    27de:	bd80      	pop	{r7, pc}
    27e0:	00002575 	.word	0x00002575
    27e4:	200007bc 	.word	0x200007bc
    27e8:	0000290d 	.word	0x0000290d
    27ec:	00002a05 	.word	0x00002a05
    27f0:	20000518 	.word	0x20000518

000027f4 <_Z41__static_initialization_and_destruction_0ii>:

NMIButton_Class		nmi;
    27f4:	b580      	push	{r7, lr}
    27f6:	b082      	sub	sp, #8
    27f8:	af00      	add	r7, sp, #0
    27fa:	6078      	str	r0, [r7, #4]
    27fc:	6039      	str	r1, [r7, #0]
    27fe:	687b      	ldr	r3, [r7, #4]
    2800:	2b01      	cmp	r3, #1
    2802:	d10d      	bne.n	2820 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2804:	683b      	ldr	r3, [r7, #0]
    2806:	4a08      	ldr	r2, [pc, #32]	; (2828 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2808:	4293      	cmp	r3, r2
    280a:	d109      	bne.n	2820 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    280c:	4b07      	ldr	r3, [pc, #28]	; (282c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    280e:	0018      	movs	r0, r3
    2810:	4b07      	ldr	r3, [pc, #28]	; (2830 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2812:	4798      	blx	r3
    2814:	4a07      	ldr	r2, [pc, #28]	; (2834 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2816:	4908      	ldr	r1, [pc, #32]	; (2838 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2818:	4b04      	ldr	r3, [pc, #16]	; (282c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    281a:	0018      	movs	r0, r3
    281c:	4b07      	ldr	r3, [pc, #28]	; (283c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    281e:	4798      	blx	r3
    2820:	46c0      	nop			; (mov r8, r8)
    2822:	46bd      	mov	sp, r7
    2824:	b002      	add	sp, #8
    2826:	bd80      	pop	{r7, pc}
    2828:	0000ffff 	.word	0x0000ffff
    282c:	200007a8 	.word	0x200007a8
    2830:	00002545 	.word	0x00002545
    2834:	20000000 	.word	0x20000000
    2838:	00002563 	.word	0x00002563
    283c:	00004061 	.word	0x00004061

00002840 <_GLOBAL__sub_I__ZN15NMIButton_ClassC2Ev>:
    2840:	b580      	push	{r7, lr}
    2842:	af00      	add	r7, sp, #0
    2844:	4b03      	ldr	r3, [pc, #12]	; (2854 <_GLOBAL__sub_I__ZN15NMIButton_ClassC2Ev+0x14>)
    2846:	0019      	movs	r1, r3
    2848:	2001      	movs	r0, #1
    284a:	4b03      	ldr	r3, [pc, #12]	; (2858 <_GLOBAL__sub_I__ZN15NMIButton_ClassC2Ev+0x18>)
    284c:	4798      	blx	r3
    284e:	46bd      	mov	sp, r7
    2850:	bd80      	pop	{r7, pc}
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	0000ffff 	.word	0x0000ffff
    2858:	000027f5 	.word	0x000027f5

0000285c <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    285c:	b580      	push	{r7, lr}
    285e:	b082      	sub	sp, #8
    2860:	af00      	add	r7, sp, #0
    2862:	6078      	str	r0, [r7, #4]
	ptrTimerClass->setTimeout();
    2864:	4b04      	ldr	r3, [pc, #16]	; (2878 <_ZL7task_cbPK10timer_task+0x1c>)
    2866:	681b      	ldr	r3, [r3, #0]
    2868:	0018      	movs	r0, r3
    286a:	4b04      	ldr	r3, [pc, #16]	; (287c <_ZL7task_cbPK10timer_task+0x20>)
    286c:	4798      	blx	r3
}
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	46bd      	mov	sp, r7
    2872:	b002      	add	sp, #8
    2874:	bd80      	pop	{r7, pc}
    2876:	46c0      	nop			; (mov r8, r8)
    2878:	200007b8 	.word	0x200007b8
    287c:	00002939 	.word	0x00002939

00002880 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task.cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    2880:	b580      	push	{r7, lr}
    2882:	b082      	sub	sp, #8
    2884:	af00      	add	r7, sp, #0
    2886:	6078      	str	r0, [r7, #4]
    2888:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    288a:	687b      	ldr	r3, [r7, #4]
    288c:	683a      	ldr	r2, [r7, #0]
    288e:	609a      	str	r2, [r3, #8]
	ptrTimerClass=this;
    2890:	4b07      	ldr	r3, [pc, #28]	; (28b0 <_ZN11Timer_ClassC1EP16timer_descriptor+0x30>)
    2892:	687a      	ldr	r2, [r7, #4]
    2894:	601a      	str	r2, [r3, #0]
	clockCycles=1024;
    2896:	687b      	ldr	r3, [r7, #4]
    2898:	2280      	movs	r2, #128	; 0x80
    289a:	00d2      	lsls	r2, r2, #3
    289c:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    289e:	687b      	ldr	r3, [r7, #4]
    28a0:	4a04      	ldr	r2, [pc, #16]	; (28b4 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    28a2:	621a      	str	r2, [r3, #32]
} //Timer_Class
    28a4:	687b      	ldr	r3, [r7, #4]
    28a6:	0018      	movs	r0, r3
    28a8:	46bd      	mov	sp, r7
    28aa:	b002      	add	sp, #8
    28ac:	bd80      	pop	{r7, pc}
    28ae:	46c0      	nop			; (mov r8, r8)
    28b0:	200007b8 	.word	0x200007b8
    28b4:	0000285d 	.word	0x0000285d

000028b8 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    28b8:	b580      	push	{r7, lr}
    28ba:	b082      	sub	sp, #8
    28bc:	af00      	add	r7, sp, #0
    28be:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    28c0:	687b      	ldr	r3, [r7, #4]
    28c2:	2200      	movs	r2, #0
    28c4:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    28c6:	687b      	ldr	r3, [r7, #4]
    28c8:	0018      	movs	r0, r3
    28ca:	46bd      	mov	sp, r7
    28cc:	b002      	add	sp, #8
    28ce:	bd80      	pop	{r7, pc}

000028d0 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
void Timer_Class::Init(void){
    28d0:	b580      	push	{r7, lr}
    28d2:	b082      	sub	sp, #8
    28d4:	af00      	add	r7, sp, #0
    28d6:	6078      	str	r0, [r7, #4]
	ticks=0;
    28d8:	687b      	ldr	r3, [r7, #4]
    28da:	2200      	movs	r2, #0
    28dc:	629a      	str	r2, [r3, #40]	; 0x28
}
    28de:	46c0      	nop			; (mov r8, r8)
    28e0:	46bd      	mov	sp, r7
    28e2:	b002      	add	sp, #8
    28e4:	bd80      	pop	{r7, pc}
	...

000028e8 <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
    28e8:	b580      	push	{r7, lr}
    28ea:	b084      	sub	sp, #16
    28ec:	af00      	add	r7, sp, #0
    28ee:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    28f0:	687b      	ldr	r3, [r7, #4]
    28f2:	689b      	ldr	r3, [r3, #8]
    28f4:	0018      	movs	r0, r3
    28f6:	4b04      	ldr	r3, [pc, #16]	; (2908 <_ZN11Timer_Class5startEv+0x20>)
    28f8:	4798      	blx	r3
    28fa:	0003      	movs	r3, r0
    28fc:	60fb      	str	r3, [r7, #12]
	return status;
    28fe:	68fb      	ldr	r3, [r7, #12]
	
}
    2900:	0018      	movs	r0, r3
    2902:	46bd      	mov	sp, r7
    2904:	b004      	add	sp, #16
    2906:	bd80      	pop	{r7, pc}
    2908:	00003189 	.word	0x00003189

0000290c <_ZN11Timer_Class4stopEv>:

int32_t Timer_Class::stop( void){
    290c:	b580      	push	{r7, lr}
    290e:	b084      	sub	sp, #16
    2910:	af00      	add	r7, sp, #0
    2912:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    2914:	687b      	ldr	r3, [r7, #4]
    2916:	689b      	ldr	r3, [r3, #8]
    2918:	0018      	movs	r0, r3
    291a:	4b06      	ldr	r3, [pc, #24]	; (2934 <_ZN11Timer_Class4stopEv+0x28>)
    291c:	4798      	blx	r3
    291e:	0003      	movs	r3, r0
    2920:	60fb      	str	r3, [r7, #12]
	timeout=0;
    2922:	687b      	ldr	r3, [r7, #4]
    2924:	2200      	movs	r2, #0
    2926:	705a      	strb	r2, [r3, #1]
	return status;
    2928:	68fb      	ldr	r3, [r7, #12]
}
    292a:	0018      	movs	r0, r3
    292c:	46bd      	mov	sp, r7
    292e:	b004      	add	sp, #16
    2930:	bd80      	pop	{r7, pc}
    2932:	46c0      	nop			; (mov r8, r8)
    2934:	000031cd 	.word	0x000031cd

00002938 <_ZN11Timer_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void Timer_Class::setTimeout(){
    2938:	b580      	push	{r7, lr}
    293a:	b082      	sub	sp, #8
    293c:	af00      	add	r7, sp, #0
    293e:	6078      	str	r0, [r7, #4]
	timeout=1;
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	2201      	movs	r2, #1
    2944:	705a      	strb	r2, [r3, #1]
}
    2946:	46c0      	nop			; (mov r8, r8)
    2948:	46bd      	mov	sp, r7
    294a:	b002      	add	sp, #8
    294c:	bd80      	pop	{r7, pc}
	...

00002950 <_ZN11Timer_Class8add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t Timer_Class::add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    2950:	b580      	push	{r7, lr}
    2952:	b086      	sub	sp, #24
    2954:	af00      	add	r7, sp, #0
    2956:	60f8      	str	r0, [r7, #12]
    2958:	60b9      	str	r1, [r7, #8]
    295a:	607a      	str	r2, [r7, #4]
    295c:	001a      	movs	r2, r3
    295e:	1cfb      	adds	r3, r7, #3
    2960:	701a      	strb	r2, [r3, #0]
	int32_t	status;

	task.interval = interval;
    2962:	68fb      	ldr	r3, [r7, #12]
    2964:	687a      	ldr	r2, [r7, #4]
    2966:	61da      	str	r2, [r3, #28]
	task.cb       = (timer_cb_t)func;
    2968:	68fb      	ldr	r3, [r7, #12]
    296a:	68ba      	ldr	r2, [r7, #8]
    296c:	621a      	str	r2, [r3, #32]
	task.mode     = modeTask;
    296e:	68fb      	ldr	r3, [r7, #12]
    2970:	1cfa      	adds	r2, r7, #3
    2972:	2124      	movs	r1, #36	; 0x24
    2974:	7812      	ldrb	r2, [r2, #0]
    2976:	545a      	strb	r2, [r3, r1]
	status=timer_add_task(timer_descr, &task);
    2978:	68fb      	ldr	r3, [r7, #12]
    297a:	689a      	ldr	r2, [r3, #8]
    297c:	68fb      	ldr	r3, [r7, #12]
    297e:	3314      	adds	r3, #20
    2980:	0019      	movs	r1, r3
    2982:	0010      	movs	r0, r2
    2984:	4b04      	ldr	r3, [pc, #16]	; (2998 <_ZN11Timer_Class8add_taskEPFvvEm15timer_task_mode+0x48>)
    2986:	4798      	blx	r3
    2988:	0003      	movs	r3, r0
    298a:	617b      	str	r3, [r7, #20]
	
	return status;
    298c:	697b      	ldr	r3, [r7, #20]
}
    298e:	0018      	movs	r0, r3
    2990:	46bd      	mov	sp, r7
    2992:	b006      	add	sp, #24
    2994:	bd80      	pop	{r7, pc}
    2996:	46c0      	nop			; (mov r8, r8)
    2998:	00003211 	.word	0x00003211

0000299c <_ZN11Timer_Class17add_periodic_taskEPFvvEm>:
int32_t Timer_Class::add_periodic_task(FUNC_PTR func,uint32_t interval){
    299c:	b590      	push	{r4, r7, lr}
    299e:	b087      	sub	sp, #28
    29a0:	af00      	add	r7, sp, #0
    29a2:	60f8      	str	r0, [r7, #12]
    29a4:	60b9      	str	r1, [r7, #8]
    29a6:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_REPEAT);
    29a8:	687a      	ldr	r2, [r7, #4]
    29aa:	68b9      	ldr	r1, [r7, #8]
    29ac:	68f8      	ldr	r0, [r7, #12]
    29ae:	2301      	movs	r3, #1
    29b0:	4c04      	ldr	r4, [pc, #16]	; (29c4 <_ZN11Timer_Class17add_periodic_taskEPFvvEm+0x28>)
    29b2:	47a0      	blx	r4
    29b4:	0003      	movs	r3, r0
    29b6:	617b      	str	r3, [r7, #20]
		return status;
    29b8:	697b      	ldr	r3, [r7, #20]
}
    29ba:	0018      	movs	r0, r3
    29bc:	46bd      	mov	sp, r7
    29be:	b007      	add	sp, #28
    29c0:	bd90      	pop	{r4, r7, pc}
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	00002951 	.word	0x00002951

000029c8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:
int32_t Timer_Class::add_oneShot_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_ONE_SHOT);
	return status;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    29c8:	b590      	push	{r4, r7, lr}
    29ca:	b087      	sub	sp, #28
    29cc:	af00      	add	r7, sp, #0
    29ce:	60f8      	str	r0, [r7, #12]
    29d0:	60b9      	str	r1, [r7, #8]
    29d2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_ONE_SHOT);
    29d4:	687a      	ldr	r2, [r7, #4]
    29d6:	68b9      	ldr	r1, [r7, #8]
    29d8:	68f8      	ldr	r0, [r7, #12]
    29da:	2300      	movs	r3, #0
    29dc:	4c07      	ldr	r4, [pc, #28]	; (29fc <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x34>)
    29de:	47a0      	blx	r4
    29e0:	0003      	movs	r3, r0
    29e2:	617b      	str	r3, [r7, #20]
	status=timer_start(timer_descr);
    29e4:	68fb      	ldr	r3, [r7, #12]
    29e6:	689b      	ldr	r3, [r3, #8]
    29e8:	0018      	movs	r0, r3
    29ea:	4b05      	ldr	r3, [pc, #20]	; (2a00 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x38>)
    29ec:	4798      	blx	r3
    29ee:	0003      	movs	r3, r0
    29f0:	617b      	str	r3, [r7, #20]
	return status;
    29f2:	697b      	ldr	r3, [r7, #20]
}
    29f4:	0018      	movs	r0, r3
    29f6:	46bd      	mov	sp, r7
    29f8:	b007      	add	sp, #28
    29fa:	bd90      	pop	{r4, r7, pc}
    29fc:	00002951 	.word	0x00002951
    2a00:	00003189 	.word	0x00003189

00002a04 <_ZN11Timer_Class11remove_taskEv>:

void	Timer_Class::remove_task(void){
    2a04:	b580      	push	{r7, lr}
    2a06:	b082      	sub	sp, #8
    2a08:	af00      	add	r7, sp, #0
    2a0a:	6078      	str	r0, [r7, #4]
	timer_remove_task(timer_descr, &task);
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	689a      	ldr	r2, [r3, #8]
    2a10:	687b      	ldr	r3, [r7, #4]
    2a12:	3314      	adds	r3, #20
    2a14:	0019      	movs	r1, r3
    2a16:	0010      	movs	r0, r2
    2a18:	4b02      	ldr	r3, [pc, #8]	; (2a24 <_ZN11Timer_Class11remove_taskEv+0x20>)
    2a1a:	4798      	blx	r3
}
    2a1c:	46c0      	nop			; (mov r8, r8)
    2a1e:	46bd      	mov	sp, r7
    2a20:	b002      	add	sp, #8
    2a22:	bd80      	pop	{r7, pc}
    2a24:	000032c1 	.word	0x000032c1

00002a28 <_Z41__static_initialization_and_destruction_0ii>:
}

Timer_Class butttonTimer(&TIMER_2);
Timer_Class	ledTimer(&TIMER_1);
Timer_Class	pwmTimer(&TIMER_3);
    2a28:	b580      	push	{r7, lr}
    2a2a:	b082      	sub	sp, #8
    2a2c:	af00      	add	r7, sp, #0
    2a2e:	6078      	str	r0, [r7, #4]
    2a30:	6039      	str	r1, [r7, #0]
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	2b01      	cmp	r3, #1
    2a36:	d133      	bne.n	2aa0 <_Z41__static_initialization_and_destruction_0ii+0x78>
    2a38:	683b      	ldr	r3, [r7, #0]
    2a3a:	4a1b      	ldr	r2, [pc, #108]	; (2aa8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    2a3c:	4293      	cmp	r3, r2
    2a3e:	d12f      	bne.n	2aa0 <_Z41__static_initialization_and_destruction_0ii+0x78>
Timer_Class butttonTimer(&TIMER_2);
    2a40:	4a1a      	ldr	r2, [pc, #104]	; (2aac <_Z41__static_initialization_and_destruction_0ii+0x84>)
    2a42:	4b1b      	ldr	r3, [pc, #108]	; (2ab0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    2a44:	0011      	movs	r1, r2
    2a46:	0018      	movs	r0, r3
    2a48:	4b1a      	ldr	r3, [pc, #104]	; (2ab4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    2a4a:	4798      	blx	r3
    2a4c:	4a1a      	ldr	r2, [pc, #104]	; (2ab8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    2a4e:	491b      	ldr	r1, [pc, #108]	; (2abc <_Z41__static_initialization_and_destruction_0ii+0x94>)
    2a50:	4b17      	ldr	r3, [pc, #92]	; (2ab0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    2a52:	0018      	movs	r0, r3
    2a54:	4b1a      	ldr	r3, [pc, #104]	; (2ac0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    2a56:	4798      	blx	r3
Timer_Class	ledTimer(&TIMER_1);
    2a58:	4a1a      	ldr	r2, [pc, #104]	; (2ac4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    2a5a:	4b1b      	ldr	r3, [pc, #108]	; (2ac8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    2a5c:	0011      	movs	r1, r2
    2a5e:	0018      	movs	r0, r3
    2a60:	4b14      	ldr	r3, [pc, #80]	; (2ab4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    2a62:	4798      	blx	r3
    2a64:	4a14      	ldr	r2, [pc, #80]	; (2ab8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    2a66:	4915      	ldr	r1, [pc, #84]	; (2abc <_Z41__static_initialization_and_destruction_0ii+0x94>)
    2a68:	4b17      	ldr	r3, [pc, #92]	; (2ac8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    2a6a:	0018      	movs	r0, r3
    2a6c:	4b14      	ldr	r3, [pc, #80]	; (2ac0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    2a6e:	4798      	blx	r3
Timer_Class	pwmTimer(&TIMER_3);
    2a70:	4a16      	ldr	r2, [pc, #88]	; (2acc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    2a72:	4b17      	ldr	r3, [pc, #92]	; (2ad0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    2a74:	0011      	movs	r1, r2
    2a76:	0018      	movs	r0, r3
    2a78:	4b0e      	ldr	r3, [pc, #56]	; (2ab4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    2a7a:	4798      	blx	r3
    2a7c:	4a0e      	ldr	r2, [pc, #56]	; (2ab8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    2a7e:	490f      	ldr	r1, [pc, #60]	; (2abc <_Z41__static_initialization_and_destruction_0ii+0x94>)
    2a80:	4b13      	ldr	r3, [pc, #76]	; (2ad0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    2a82:	0018      	movs	r0, r3
    2a84:	4b0e      	ldr	r3, [pc, #56]	; (2ac0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    2a86:	4798      	blx	r3
    2a88:	4a12      	ldr	r2, [pc, #72]	; (2ad4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    2a8a:	4b13      	ldr	r3, [pc, #76]	; (2ad8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    2a8c:	0011      	movs	r1, r2
    2a8e:	0018      	movs	r0, r3
    2a90:	4b08      	ldr	r3, [pc, #32]	; (2ab4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    2a92:	4798      	blx	r3
    2a94:	4a08      	ldr	r2, [pc, #32]	; (2ab8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    2a96:	4909      	ldr	r1, [pc, #36]	; (2abc <_Z41__static_initialization_and_destruction_0ii+0x94>)
    2a98:	4b0f      	ldr	r3, [pc, #60]	; (2ad8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    2a9a:	0018      	movs	r0, r3
    2a9c:	4b08      	ldr	r3, [pc, #32]	; (2ac0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    2a9e:	4798      	blx	r3
    2aa0:	46c0      	nop			; (mov r8, r8)
    2aa2:	46bd      	mov	sp, r7
    2aa4:	b002      	add	sp, #8
    2aa6:	bd80      	pop	{r7, pc}
    2aa8:	0000ffff 	.word	0x0000ffff
    2aac:	20000880 	.word	0x20000880
    2ab0:	200007bc 	.word	0x200007bc
    2ab4:	00002881 	.word	0x00002881
    2ab8:	20000000 	.word	0x20000000
    2abc:	000028b9 	.word	0x000028b9
    2ac0:	00004061 	.word	0x00004061
    2ac4:	200008bc 	.word	0x200008bc
    2ac8:	200007e8 	.word	0x200007e8
    2acc:	200008f4 	.word	0x200008f4
    2ad0:	20000814 	.word	0x20000814
    2ad4:	20000914 	.word	0x20000914
    2ad8:	20000840 	.word	0x20000840

00002adc <_GLOBAL__sub_I_ptrTimerClass>:
    2adc:	b580      	push	{r7, lr}
    2ade:	af00      	add	r7, sp, #0
    2ae0:	4b03      	ldr	r3, [pc, #12]	; (2af0 <_GLOBAL__sub_I_ptrTimerClass+0x14>)
    2ae2:	0019      	movs	r1, r3
    2ae4:	2001      	movs	r0, #1
    2ae6:	4b03      	ldr	r3, [pc, #12]	; (2af4 <_GLOBAL__sub_I_ptrTimerClass+0x18>)
    2ae8:	4798      	blx	r3
    2aea:	46bd      	mov	sp, r7
    2aec:	bd80      	pop	{r7, pc}
    2aee:	46c0      	nop			; (mov r8, r8)
    2af0:	0000ffff 	.word	0x0000ffff
    2af4:	00002a29 	.word	0x00002a29

00002af8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    2af8:	b510      	push	{r4, lr}
	system_init();
    2afa:	4b01      	ldr	r3, [pc, #4]	; (2b00 <atmel_start_init+0x8>)
    2afc:	4798      	blx	r3
}
    2afe:	bd10      	pop	{r4, pc}
    2b00:	00002ca1 	.word	0x00002ca1

00002b04 <SPI_0_PORT_init>:
struct pwm_descriptor PWM_0;

struct timer_descriptor TIMER_3;

void SPI_0_PORT_init(void)
{
    2b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b06:	46ce      	mov	lr, r9
    2b08:	4647      	mov	r7, r8
    2b0a:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2b0c:	21c0      	movs	r1, #192	; 0xc0
    2b0e:	05c9      	lsls	r1, r1, #23
    2b10:	2380      	movs	r3, #128	; 0x80
    2b12:	009b      	lsls	r3, r3, #2
    2b14:	604b      	str	r3, [r1, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b16:	4b25      	ldr	r3, [pc, #148]	; (2bac <SPI_0_PORT_init+0xa8>)
    2b18:	4a25      	ldr	r2, [pc, #148]	; (2bb0 <SPI_0_PORT_init+0xac>)
    2b1a:	629a      	str	r2, [r3, #40]	; 0x28
    2b1c:	4a25      	ldr	r2, [pc, #148]	; (2bb4 <SPI_0_PORT_init+0xb0>)
    2b1e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2b20:	2449      	movs	r4, #73	; 0x49
    2b22:	5d1a      	ldrb	r2, [r3, r4]
    2b24:	2004      	movs	r0, #4
    2b26:	4382      	bics	r2, r0
    2b28:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b2a:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b2c:	2601      	movs	r6, #1
    2b2e:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2b30:	2201      	movs	r2, #1
    2b32:	4310      	orrs	r0, r2
    2b34:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b36:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2b38:	2734      	movs	r7, #52	; 0x34
    2b3a:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2b3c:	250f      	movs	r5, #15
    2b3e:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
    2b40:	2420      	movs	r4, #32
    2b42:	46a1      	mov	r9, r4
    2b44:	464c      	mov	r4, r9
    2b46:	4320      	orrs	r0, r4
    2b48:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2b4a:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b4c:	2080      	movs	r0, #128	; 0x80
    2b4e:	00c0      	lsls	r0, r0, #3
    2b50:	6148      	str	r0, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2b52:	6088      	str	r0, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b54:	4818      	ldr	r0, [pc, #96]	; (2bb8 <SPI_0_PORT_init+0xb4>)
    2b56:	6298      	str	r0, [r3, #40]	; 0x28
    2b58:	20c0      	movs	r0, #192	; 0xc0
    2b5a:	0600      	lsls	r0, r0, #24
    2b5c:	4684      	mov	ip, r0
    2b5e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b60:	3716      	adds	r7, #22
    2b62:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b64:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2b66:	4310      	orrs	r0, r2
    2b68:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b6a:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2b6c:	2035      	movs	r0, #53	; 0x35
    2b6e:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2b70:	240f      	movs	r4, #15
    2b72:	43a7      	bics	r7, r4
	tmp |= PORT_PMUX_PMUXE(data);
    2b74:	3c0d      	subs	r4, #13
    2b76:	4327      	orrs	r7, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2b78:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b7a:	2780      	movs	r7, #128	; 0x80
    2b7c:	013f      	lsls	r7, r7, #4
    2b7e:	614f      	str	r7, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2b80:	608f      	str	r7, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b82:	490e      	ldr	r1, [pc, #56]	; (2bbc <SPI_0_PORT_init+0xb8>)
    2b84:	6299      	str	r1, [r3, #40]	; 0x28
    2b86:	4661      	mov	r1, ip
    2b88:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b8a:	274b      	movs	r7, #75	; 0x4b
    2b8c:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b8e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2b90:	4311      	orrs	r1, r2
    2b92:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b94:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2b96:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2b98:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
    2b9a:	4649      	mov	r1, r9
    2b9c:	430a      	orrs	r2, r1
    2b9e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2ba0:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
}
    2ba2:	bc0c      	pop	{r2, r3}
    2ba4:	4690      	mov	r8, r2
    2ba6:	4699      	mov	r9, r3
    2ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	41004400 	.word	0x41004400
    2bb0:	40020200 	.word	0x40020200
    2bb4:	c0020000 	.word	0xc0020000
    2bb8:	40000400 	.word	0x40000400
    2bbc:	40000800 	.word	0x40000800

00002bc0 <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    2bc0:	4a04      	ldr	r2, [pc, #16]	; (2bd4 <SPI_0_CLOCK_init+0x14>)
    2bc2:	6a13      	ldr	r3, [r2, #32]
    2bc4:	2104      	movs	r1, #4
    2bc6:	430b      	orrs	r3, r1
    2bc8:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
    2bca:	4a03      	ldr	r2, [pc, #12]	; (2bd8 <SPI_0_CLOCK_init+0x18>)
    2bcc:	4b03      	ldr	r3, [pc, #12]	; (2bdc <SPI_0_CLOCK_init+0x1c>)
    2bce:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
    2bd0:	4770      	bx	lr
    2bd2:	46c0      	nop			; (mov r8, r8)
    2bd4:	40000400 	.word	0x40000400
    2bd8:	00004014 	.word	0x00004014
    2bdc:	40000c00 	.word	0x40000c00

00002be0 <SPI_0_init>:

void SPI_0_init(void)
{
    2be0:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
    2be2:	4b04      	ldr	r3, [pc, #16]	; (2bf4 <SPI_0_init+0x14>)
    2be4:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
    2be6:	4904      	ldr	r1, [pc, #16]	; (2bf8 <SPI_0_init+0x18>)
    2be8:	4804      	ldr	r0, [pc, #16]	; (2bfc <SPI_0_init+0x1c>)
    2bea:	4b05      	ldr	r3, [pc, #20]	; (2c00 <SPI_0_init+0x20>)
    2bec:	4798      	blx	r3
	SPI_0_PORT_init();
    2bee:	4b05      	ldr	r3, [pc, #20]	; (2c04 <SPI_0_init+0x24>)
    2bf0:	4798      	blx	r3
}
    2bf2:	bd10      	pop	{r4, pc}
    2bf4:	00002bc1 	.word	0x00002bc1
    2bf8:	42000800 	.word	0x42000800
    2bfc:	200008dc 	.word	0x200008dc
    2c00:	00002f31 	.word	0x00002f31
    2c04:	00002b05 	.word	0x00002b05

00002c08 <PWM_0_CLOCK_init>:
    2c08:	4a04      	ldr	r2, [pc, #16]	; (2c1c <PWM_0_CLOCK_init+0x14>)
    2c0a:	6a11      	ldr	r1, [r2, #32]
    2c0c:	2380      	movs	r3, #128	; 0x80
    2c0e:	011b      	lsls	r3, r3, #4
    2c10:	430b      	orrs	r3, r1
    2c12:	6213      	str	r3, [r2, #32]
    2c14:	4a02      	ldr	r2, [pc, #8]	; (2c20 <PWM_0_CLOCK_init+0x18>)
    2c16:	4b03      	ldr	r3, [pc, #12]	; (2c24 <PWM_0_CLOCK_init+0x1c>)
    2c18:	805a      	strh	r2, [r3, #2]

void PWM_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);
}
    2c1a:	4770      	bx	lr
    2c1c:	40000400 	.word	0x40000400
    2c20:	0000431b 	.word	0x0000431b
    2c24:	40000c00 	.word	0x40000c00

00002c28 <PWM_0_init>:

void PWM_0_init(void)
{
    2c28:	b510      	push	{r4, lr}
	PWM_0_CLOCK_init();
    2c2a:	4b05      	ldr	r3, [pc, #20]	; (2c40 <PWM_0_init+0x18>)
    2c2c:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC3, _tc_get_pwm());
    2c2e:	4b05      	ldr	r3, [pc, #20]	; (2c44 <PWM_0_init+0x1c>)
    2c30:	4798      	blx	r3
    2c32:	0002      	movs	r2, r0
    2c34:	4904      	ldr	r1, [pc, #16]	; (2c48 <PWM_0_init+0x20>)
    2c36:	4805      	ldr	r0, [pc, #20]	; (2c4c <PWM_0_init+0x24>)
    2c38:	4b05      	ldr	r3, [pc, #20]	; (2c50 <PWM_0_init+0x28>)
    2c3a:	4798      	blx	r3
}
    2c3c:	bd10      	pop	{r4, pc}
    2c3e:	46c0      	nop			; (mov r8, r8)
    2c40:	00002c09 	.word	0x00002c09
    2c44:	00003fe1 	.word	0x00003fe1
    2c48:	42002c00 	.word	0x42002c00
    2c4c:	200008a0 	.word	0x200008a0
    2c50:	00002df5 	.word	0x00002df5

00002c54 <TIMER_3_CLOCK_init>:
    2c54:	4a04      	ldr	r2, [pc, #16]	; (2c68 <TIMER_3_CLOCK_init+0x14>)
    2c56:	6a11      	ldr	r1, [r2, #32]
    2c58:	2380      	movs	r3, #128	; 0x80
    2c5a:	005b      	lsls	r3, r3, #1
    2c5c:	430b      	orrs	r3, r1
    2c5e:	6213      	str	r3, [r2, #32]
    2c60:	4a02      	ldr	r2, [pc, #8]	; (2c6c <TIMER_3_CLOCK_init+0x18>)
    2c62:	4b03      	ldr	r3, [pc, #12]	; (2c70 <TIMER_3_CLOCK_init+0x1c>)
    2c64:	805a      	strh	r2, [r3, #2]

void TIMER_3_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TCC0);
	_gclk_enable_channel(TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC);
}
    2c66:	4770      	bx	lr
    2c68:	40000400 	.word	0x40000400
    2c6c:	0000421a 	.word	0x0000421a
    2c70:	40000c00 	.word	0x40000c00

00002c74 <TIMER_3_init>:

void TIMER_3_init(void)
{
    2c74:	b510      	push	{r4, lr}
	TIMER_3_CLOCK_init();
    2c76:	4b05      	ldr	r3, [pc, #20]	; (2c8c <TIMER_3_init+0x18>)
    2c78:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
    2c7a:	4b05      	ldr	r3, [pc, #20]	; (2c90 <TIMER_3_init+0x1c>)
    2c7c:	4798      	blx	r3
    2c7e:	0002      	movs	r2, r0
    2c80:	4904      	ldr	r1, [pc, #16]	; (2c94 <TIMER_3_init+0x20>)
    2c82:	4805      	ldr	r0, [pc, #20]	; (2c98 <TIMER_3_init+0x24>)
    2c84:	4b05      	ldr	r3, [pc, #20]	; (2c9c <TIMER_3_init+0x28>)
    2c86:	4798      	blx	r3
}
    2c88:	bd10      	pop	{r4, pc}
    2c8a:	46c0      	nop			; (mov r8, r8)
    2c8c:	00002c55 	.word	0x00002c55
    2c90:	00003b5d 	.word	0x00003b5d
    2c94:	42002000 	.word	0x42002000
    2c98:	200008f4 	.word	0x200008f4
    2c9c:	00003141 	.word	0x00003141

00002ca0 <system_init>:

void system_init(void)
{
    2ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ca2:	46c6      	mov	lr, r8
    2ca4:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    2ca6:	4b30      	ldr	r3, [pc, #192]	; (2d68 <system_init+0xc8>)
    2ca8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2caa:	22c0      	movs	r2, #192	; 0xc0
    2cac:	05d2      	lsls	r2, r2, #23
    2cae:	2080      	movs	r0, #128	; 0x80
    2cb0:	0040      	lsls	r0, r0, #1
    2cb2:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2cb4:	4b2d      	ldr	r3, [pc, #180]	; (2d6c <system_init+0xcc>)
    2cb6:	492e      	ldr	r1, [pc, #184]	; (2d70 <system_init+0xd0>)
    2cb8:	6299      	str	r1, [r3, #40]	; 0x28
    2cba:	492e      	ldr	r1, [pc, #184]	; (2d74 <system_init+0xd4>)
    2cbc:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2cbe:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2cc0:	2148      	movs	r1, #72	; 0x48
    2cc2:	5c5c      	ldrb	r4, [r3, r1]
    2cc4:	2504      	movs	r5, #4
    2cc6:	432c      	orrs	r4, r5
    2cc8:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cca:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ccc:	5c5c      	ldrb	r4, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2cce:	38ff      	subs	r0, #255	; 0xff
    2cd0:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2cd2:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cd4:	2180      	movs	r1, #128	; 0x80
    2cd6:	0509      	lsls	r1, r1, #20
    2cd8:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2cda:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2cdc:	2480      	movs	r4, #128	; 0x80
    2cde:	05e4      	lsls	r4, r4, #23
    2ce0:	629c      	str	r4, [r3, #40]	; 0x28
    2ce2:	4925      	ldr	r1, [pc, #148]	; (2d78 <system_init+0xd8>)
    2ce4:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ce6:	3557      	adds	r5, #87	; 0x57
    2ce8:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2cea:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2cec:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cee:	2180      	movs	r1, #128	; 0x80
    2cf0:	0549      	lsls	r1, r1, #21
    2cf2:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2cf4:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2cf6:	629c      	str	r4, [r3, #40]	; 0x28
    2cf8:	4a20      	ldr	r2, [pc, #128]	; (2d7c <system_init+0xdc>)
    2cfa:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2cfc:	215c      	movs	r1, #92	; 0x5c
    2cfe:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d00:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d02:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);

	SPI_0_init();
    2d04:	4b1e      	ldr	r3, [pc, #120]	; (2d80 <system_init+0xe0>)
    2d06:	4798      	blx	r3
		PM->APBAMASK.reg |= 1 << peripheral;
    2d08:	4c1e      	ldr	r4, [pc, #120]	; (2d84 <system_init+0xe4>)
    2d0a:	69a3      	ldr	r3, [r4, #24]
    2d0c:	2220      	movs	r2, #32
    2d0e:	4313      	orrs	r3, r2
    2d10:	61a3      	str	r3, [r4, #24]
    2d12:	4e1d      	ldr	r6, [pc, #116]	; (2d88 <system_init+0xe8>)
    2d14:	4b1d      	ldr	r3, [pc, #116]	; (2d8c <system_init+0xec>)
    2d16:	8073      	strh	r3, [r6, #2]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
    2d18:	4b1d      	ldr	r3, [pc, #116]	; (2d90 <system_init+0xf0>)
    2d1a:	4798      	blx	r3
    2d1c:	0002      	movs	r2, r0
    2d1e:	491d      	ldr	r1, [pc, #116]	; (2d94 <system_init+0xf4>)
    2d20:	481d      	ldr	r0, [pc, #116]	; (2d98 <system_init+0xf8>)
    2d22:	4d1e      	ldr	r5, [pc, #120]	; (2d9c <system_init+0xfc>)
    2d24:	47a8      	blx	r5

	TIMER_0_init();

	PWM_0_init();
    2d26:	4b1e      	ldr	r3, [pc, #120]	; (2da0 <system_init+0x100>)
    2d28:	4798      	blx	r3
		PM->APBCMASK.reg |= 1 << peripheral;
    2d2a:	6a22      	ldr	r2, [r4, #32]
    2d2c:	2380      	movs	r3, #128	; 0x80
    2d2e:	015b      	lsls	r3, r3, #5
    2d30:	4313      	orrs	r3, r2
    2d32:	6223      	str	r3, [r4, #32]
    2d34:	4b1b      	ldr	r3, [pc, #108]	; (2da4 <system_init+0x104>)
    2d36:	4698      	mov	r8, r3
    2d38:	8073      	strh	r3, [r6, #2]
	timer_init(&TIMER_1, TC4, _tc_get_timer());
    2d3a:	4f1b      	ldr	r7, [pc, #108]	; (2da8 <system_init+0x108>)
    2d3c:	47b8      	blx	r7
    2d3e:	0002      	movs	r2, r0
    2d40:	491a      	ldr	r1, [pc, #104]	; (2dac <system_init+0x10c>)
    2d42:	481b      	ldr	r0, [pc, #108]	; (2db0 <system_init+0x110>)
    2d44:	47a8      	blx	r5
    2d46:	6a22      	ldr	r2, [r4, #32]
    2d48:	2380      	movs	r3, #128	; 0x80
    2d4a:	019b      	lsls	r3, r3, #6
    2d4c:	4313      	orrs	r3, r2
    2d4e:	6223      	str	r3, [r4, #32]
    2d50:	4643      	mov	r3, r8
    2d52:	8073      	strh	r3, [r6, #2]
	timer_init(&TIMER_2, TC5, _tc_get_timer());
    2d54:	47b8      	blx	r7
    2d56:	0002      	movs	r2, r0
    2d58:	4916      	ldr	r1, [pc, #88]	; (2db4 <system_init+0x114>)
    2d5a:	4817      	ldr	r0, [pc, #92]	; (2db8 <system_init+0x118>)
    2d5c:	47a8      	blx	r5

	TIMER_1_init();
	TIMER_2_init();

	TIMER_3_init();
    2d5e:	4b17      	ldr	r3, [pc, #92]	; (2dbc <system_init+0x11c>)
    2d60:	4798      	blx	r3
}
    2d62:	bc04      	pop	{r2}
    2d64:	4690      	mov	r8, r2
    2d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d68:	00003419 	.word	0x00003419
    2d6c:	41004400 	.word	0x41004400
    2d70:	40020100 	.word	0x40020100
    2d74:	c0020000 	.word	0xc0020000
    2d78:	c0000800 	.word	0xc0000800
    2d7c:	c0001000 	.word	0xc0001000
    2d80:	00002be1 	.word	0x00002be1
    2d84:	40000400 	.word	0x40000400
    2d88:	40000c00 	.word	0x40000c00
    2d8c:	00004504 	.word	0x00004504
    2d90:	00003679 	.word	0x00003679
    2d94:	40001400 	.word	0x40001400
    2d98:	20000914 	.word	0x20000914
    2d9c:	00003141 	.word	0x00003141
    2da0:	00002c29 	.word	0x00002c29
    2da4:	0000431c 	.word	0x0000431c
    2da8:	00003fd5 	.word	0x00003fd5
    2dac:	42003000 	.word	0x42003000
    2db0:	200008bc 	.word	0x200008bc
    2db4:	42003400 	.word	0x42003400
    2db8:	20000880 	.word	0x20000880
    2dbc:	00002c75 	.word	0x00002c75

00002dc0 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2dc0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    2dc4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2dc6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2dc8:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    2dcc:	4770      	bx	lr

00002dce <atomic_leave_critical>:
    2dce:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    2dd2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2dd4:	f383 8810 	msr	PRIMASK, r3
}
    2dd8:	4770      	bx	lr

00002dda <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2dda:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    2ddc:	6943      	ldr	r3, [r0, #20]
    2dde:	2b00      	cmp	r3, #0
    2de0:	d000      	beq.n	2de4 <pwm_period_expired+0xa>
		descr->pwm_cb.period(descr);
    2de2:	4798      	blx	r3
	}
}
    2de4:	bd10      	pop	{r4, pc}

00002de6 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2de6:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    2de8:	6983      	ldr	r3, [r0, #24]
    2dea:	2b00      	cmp	r3, #0
    2dec:	d000      	beq.n	2df0 <pwm_detect_fault+0xa>
		descr->pwm_cb.error(descr);
    2dee:	4798      	blx	r3
	}
}
    2df0:	bd10      	pop	{r4, pc}
	...

00002df4 <pwm_init>:
{
    2df4:	b570      	push	{r4, r5, r6, lr}
    2df6:	0005      	movs	r5, r0
    2df8:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    2dfa:	2800      	cmp	r0, #0
    2dfc:	d011      	beq.n	2e22 <pwm_init+0x2e>
    2dfe:	0008      	movs	r0, r1
    2e00:	1e43      	subs	r3, r0, #1
    2e02:	4198      	sbcs	r0, r3
    2e04:	b2c0      	uxtb	r0, r0
    2e06:	2233      	movs	r2, #51	; 0x33
    2e08:	4907      	ldr	r1, [pc, #28]	; (2e28 <pwm_init+0x34>)
    2e0a:	4b08      	ldr	r3, [pc, #32]	; (2e2c <pwm_init+0x38>)
    2e0c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2e0e:	0021      	movs	r1, r4
    2e10:	0028      	movs	r0, r5
    2e12:	4b07      	ldr	r3, [pc, #28]	; (2e30 <pwm_init+0x3c>)
    2e14:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2e16:	4b07      	ldr	r3, [pc, #28]	; (2e34 <pwm_init+0x40>)
    2e18:	602b      	str	r3, [r5, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2e1a:	4b07      	ldr	r3, [pc, #28]	; (2e38 <pwm_init+0x44>)
    2e1c:	606b      	str	r3, [r5, #4]
}
    2e1e:	2000      	movs	r0, #0
    2e20:	bd70      	pop	{r4, r5, r6, pc}
    2e22:	2000      	movs	r0, #0
    2e24:	e7ef      	b.n	2e06 <pwm_init+0x12>
    2e26:	46c0      	nop			; (mov r8, r8)
    2e28:	000046ac 	.word	0x000046ac
    2e2c:	00003369 	.word	0x00003369
    2e30:	00003e15 	.word	0x00003e15
    2e34:	00002ddb 	.word	0x00002ddb
    2e38:	00002de7 	.word	0x00002de7

00002e3c <pwm_enable>:
{
    2e3c:	b510      	push	{r4, lr}
    2e3e:	0004      	movs	r4, r0
	ASSERT(descr);
    2e40:	1e43      	subs	r3, r0, #1
    2e42:	4198      	sbcs	r0, r3
    2e44:	b2c0      	uxtb	r0, r0
    2e46:	224a      	movs	r2, #74	; 0x4a
    2e48:	4907      	ldr	r1, [pc, #28]	; (2e68 <pwm_enable+0x2c>)
    2e4a:	4b08      	ldr	r3, [pc, #32]	; (2e6c <pwm_enable+0x30>)
    2e4c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    2e4e:	0020      	movs	r0, r4
    2e50:	4b07      	ldr	r3, [pc, #28]	; (2e70 <pwm_enable+0x34>)
    2e52:	4798      	blx	r3
    2e54:	2800      	cmp	r0, #0
    2e56:	d104      	bne.n	2e62 <pwm_enable+0x26>
	_pwm_enable(&descr->device);
    2e58:	0020      	movs	r0, r4
    2e5a:	4b06      	ldr	r3, [pc, #24]	; (2e74 <pwm_enable+0x38>)
    2e5c:	4798      	blx	r3
	return ERR_NONE;
    2e5e:	2000      	movs	r0, #0
}
    2e60:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2e62:	2011      	movs	r0, #17
    2e64:	4240      	negs	r0, r0
    2e66:	e7fb      	b.n	2e60 <pwm_enable+0x24>
    2e68:	000046ac 	.word	0x000046ac
    2e6c:	00003369 	.word	0x00003369
    2e70:	00003f79 	.word	0x00003f79
    2e74:	00003f21 	.word	0x00003f21

00002e78 <pwm_disable>:
{
    2e78:	b510      	push	{r4, lr}
    2e7a:	0004      	movs	r4, r0
	ASSERT(descr);
    2e7c:	1e43      	subs	r3, r0, #1
    2e7e:	4198      	sbcs	r0, r3
    2e80:	b2c0      	uxtb	r0, r0
    2e82:	2258      	movs	r2, #88	; 0x58
    2e84:	4907      	ldr	r1, [pc, #28]	; (2ea4 <pwm_disable+0x2c>)
    2e86:	4b08      	ldr	r3, [pc, #32]	; (2ea8 <pwm_disable+0x30>)
    2e88:	4798      	blx	r3
	if (!_pwm_is_enabled(&descr->device)) {
    2e8a:	0020      	movs	r0, r4
    2e8c:	4b07      	ldr	r3, [pc, #28]	; (2eac <pwm_disable+0x34>)
    2e8e:	4798      	blx	r3
    2e90:	2800      	cmp	r0, #0
    2e92:	d004      	beq.n	2e9e <pwm_disable+0x26>
	_pwm_disable(&descr->device);
    2e94:	0020      	movs	r0, r4
    2e96:	4b06      	ldr	r3, [pc, #24]	; (2eb0 <pwm_disable+0x38>)
    2e98:	4798      	blx	r3
	return ERR_NONE;
    2e9a:	2000      	movs	r0, #0
}
    2e9c:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2e9e:	2011      	movs	r0, #17
    2ea0:	4240      	negs	r0, r0
    2ea2:	e7fb      	b.n	2e9c <pwm_disable+0x24>
    2ea4:	000046ac 	.word	0x000046ac
    2ea8:	00003369 	.word	0x00003369
    2eac:	00003f79 	.word	0x00003f79
    2eb0:	00003f2d 	.word	0x00003f2d

00002eb4 <pwm_register_callback>:
{
    2eb4:	b570      	push	{r4, r5, r6, lr}
    2eb6:	0006      	movs	r6, r0
    2eb8:	000d      	movs	r5, r1
    2eba:	0014      	movs	r4, r2
	switch (type) {
    2ebc:	2900      	cmp	r1, #0
    2ebe:	d004      	beq.n	2eca <pwm_register_callback+0x16>
    2ec0:	2901      	cmp	r1, #1
    2ec2:	d014      	beq.n	2eee <pwm_register_callback+0x3a>
		return ERR_INVALID_ARG;
    2ec4:	200d      	movs	r0, #13
    2ec6:	4240      	negs	r0, r0
    2ec8:	e010      	b.n	2eec <pwm_register_callback+0x38>
		descr->pwm_cb.period = cb;
    2eca:	6172      	str	r2, [r6, #20]
	ASSERT(descr);
    2ecc:	0030      	movs	r0, r6
    2ece:	1e43      	subs	r3, r0, #1
    2ed0:	4198      	sbcs	r0, r3
    2ed2:	b2c0      	uxtb	r0, r0
    2ed4:	2272      	movs	r2, #114	; 0x72
    2ed6:	4907      	ldr	r1, [pc, #28]	; (2ef4 <pwm_register_callback+0x40>)
    2ed8:	4b07      	ldr	r3, [pc, #28]	; (2ef8 <pwm_register_callback+0x44>)
    2eda:	4798      	blx	r3
	_pwm_set_irq_state(&descr->device, (enum _pwm_callback_type)type, NULL != cb);
    2edc:	1e62      	subs	r2, r4, #1
    2ede:	4194      	sbcs	r4, r2
    2ee0:	b2e2      	uxtb	r2, r4
    2ee2:	0029      	movs	r1, r5
    2ee4:	0030      	movs	r0, r6
    2ee6:	4b05      	ldr	r3, [pc, #20]	; (2efc <pwm_register_callback+0x48>)
    2ee8:	4798      	blx	r3
	return ERR_NONE;
    2eea:	2000      	movs	r0, #0
}
    2eec:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.error = cb;
    2eee:	61b2      	str	r2, [r6, #24]
		break;
    2ef0:	e7ec      	b.n	2ecc <pwm_register_callback+0x18>
    2ef2:	46c0      	nop			; (mov r8, r8)
    2ef4:	000046ac 	.word	0x000046ac
    2ef8:	00003369 	.word	0x00003369
    2efc:	00003f85 	.word	0x00003f85

00002f00 <pwm_set_parameters>:
{
    2f00:	b570      	push	{r4, r5, r6, lr}
    2f02:	0004      	movs	r4, r0
    2f04:	000d      	movs	r5, r1
    2f06:	0016      	movs	r6, r2
	ASSERT(descr);
    2f08:	1e43      	subs	r3, r0, #1
    2f0a:	4198      	sbcs	r0, r3
    2f0c:	b2c0      	uxtb	r0, r0
    2f0e:	227c      	movs	r2, #124	; 0x7c
    2f10:	4904      	ldr	r1, [pc, #16]	; (2f24 <pwm_set_parameters+0x24>)
    2f12:	4b05      	ldr	r3, [pc, #20]	; (2f28 <pwm_set_parameters+0x28>)
    2f14:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
    2f16:	0032      	movs	r2, r6
    2f18:	0029      	movs	r1, r5
    2f1a:	0020      	movs	r0, r4
    2f1c:	4b03      	ldr	r3, [pc, #12]	; (2f2c <pwm_set_parameters+0x2c>)
    2f1e:	4798      	blx	r3
}
    2f20:	2000      	movs	r0, #0
    2f22:	bd70      	pop	{r4, r5, r6, pc}
    2f24:	000046ac 	.word	0x000046ac
    2f28:	00003369 	.word	0x00003369
    2f2c:	00003f39 	.word	0x00003f39

00002f30 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2f30:	b570      	push	{r4, r5, r6, lr}
    2f32:	0004      	movs	r4, r0
    2f34:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    2f36:	2800      	cmp	r0, #0
    2f38:	d016      	beq.n	2f68 <spi_m_sync_init+0x38>
    2f3a:	0008      	movs	r0, r1
    2f3c:	1e43      	subs	r3, r0, #1
    2f3e:	4198      	sbcs	r0, r3
    2f40:	b2c0      	uxtb	r0, r0
    2f42:	2240      	movs	r2, #64	; 0x40
    2f44:	4909      	ldr	r1, [pc, #36]	; (2f6c <spi_m_sync_init+0x3c>)
    2f46:	4b0a      	ldr	r3, [pc, #40]	; (2f70 <spi_m_sync_init+0x40>)
    2f48:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2f4a:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2f4c:	1d20      	adds	r0, r4, #4
    2f4e:	0029      	movs	r1, r5
    2f50:	4b08      	ldr	r3, [pc, #32]	; (2f74 <spi_m_sync_init+0x44>)
    2f52:	4798      	blx	r3

	if (rc < 0) {
    2f54:	2800      	cmp	r0, #0
    2f56:	db06      	blt.n	2f66 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2f58:	4b07      	ldr	r3, [pc, #28]	; (2f78 <spi_m_sync_init+0x48>)
    2f5a:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2f5c:	4b07      	ldr	r3, [pc, #28]	; (2f7c <spi_m_sync_init+0x4c>)
    2f5e:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    2f60:	4b07      	ldr	r3, [pc, #28]	; (2f80 <spi_m_sync_init+0x50>)
    2f62:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    2f64:	2000      	movs	r0, #0
}
    2f66:	bd70      	pop	{r4, r5, r6, pc}
    2f68:	2000      	movs	r0, #0
    2f6a:	e7ea      	b.n	2f42 <spi_m_sync_init+0x12>
    2f6c:	000046c4 	.word	0x000046c4
    2f70:	00003369 	.word	0x00003369
    2f74:	000036a5 	.word	0x000036a5
    2f78:	ffff8000 	.word	0xffff8000
    2f7c:	00003009 	.word	0x00003009
    2f80:	00002fcd 	.word	0x00002fcd

00002f84 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2f84:	b530      	push	{r4, r5, lr}
    2f86:	b087      	sub	sp, #28
    2f88:	0004      	movs	r4, r0
    2f8a:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2f8c:	2800      	cmp	r0, #0
    2f8e:	d014      	beq.n	2fba <spi_m_sync_transfer+0x36>
    2f90:	0008      	movs	r0, r1
    2f92:	1e43      	subs	r3, r0, #1
    2f94:	4198      	sbcs	r0, r3
    2f96:	b2c0      	uxtb	r0, r0
    2f98:	22b3      	movs	r2, #179	; 0xb3
    2f9a:	4909      	ldr	r1, [pc, #36]	; (2fc0 <spi_m_sync_transfer+0x3c>)
    2f9c:	4b09      	ldr	r3, [pc, #36]	; (2fc4 <spi_m_sync_transfer+0x40>)
    2f9e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2fa0:	682b      	ldr	r3, [r5, #0]
    2fa2:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2fa4:	686b      	ldr	r3, [r5, #4]
    2fa6:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    2fa8:	68ab      	ldr	r3, [r5, #8]
    2faa:	9301      	str	r3, [sp, #4]
    2fac:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2fae:	1d20      	adds	r0, r4, #4
    2fb0:	a903      	add	r1, sp, #12
    2fb2:	4b05      	ldr	r3, [pc, #20]	; (2fc8 <spi_m_sync_transfer+0x44>)
    2fb4:	4798      	blx	r3
}
    2fb6:	b007      	add	sp, #28
    2fb8:	bd30      	pop	{r4, r5, pc}
    2fba:	2000      	movs	r0, #0
    2fbc:	e7ec      	b.n	2f98 <spi_m_sync_transfer+0x14>
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	000046c4 	.word	0x000046c4
    2fc4:	00003369 	.word	0x00003369
    2fc8:	0000379d 	.word	0x0000379d

00002fcc <_spi_m_sync_io_write>:
{
    2fcc:	b570      	push	{r4, r5, r6, lr}
    2fce:	b084      	sub	sp, #16
    2fd0:	0004      	movs	r4, r0
    2fd2:	000e      	movs	r6, r1
    2fd4:	0015      	movs	r5, r2
	ASSERT(io);
    2fd6:	1e43      	subs	r3, r0, #1
    2fd8:	4198      	sbcs	r0, r3
    2fda:	b2c0      	uxtb	r0, r0
    2fdc:	22a3      	movs	r2, #163	; 0xa3
    2fde:	4907      	ldr	r1, [pc, #28]	; (2ffc <_spi_m_sync_io_write+0x30>)
    2fe0:	4b07      	ldr	r3, [pc, #28]	; (3000 <_spi_m_sync_io_write+0x34>)
    2fe2:	4798      	blx	r3
	xfer.rxbuf = 0;
    2fe4:	2300      	movs	r3, #0
    2fe6:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    2fe8:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    2fea:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2fec:	0020      	movs	r0, r4
    2fee:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    2ff0:	a901      	add	r1, sp, #4
    2ff2:	4b04      	ldr	r3, [pc, #16]	; (3004 <_spi_m_sync_io_write+0x38>)
    2ff4:	4798      	blx	r3
}
    2ff6:	b004      	add	sp, #16
    2ff8:	bd70      	pop	{r4, r5, r6, pc}
    2ffa:	46c0      	nop			; (mov r8, r8)
    2ffc:	000046c4 	.word	0x000046c4
    3000:	00003369 	.word	0x00003369
    3004:	00002f85 	.word	0x00002f85

00003008 <_spi_m_sync_io_read>:
{
    3008:	b570      	push	{r4, r5, r6, lr}
    300a:	b084      	sub	sp, #16
    300c:	0004      	movs	r4, r0
    300e:	000e      	movs	r6, r1
    3010:	0015      	movs	r5, r2
	ASSERT(io);
    3012:	1e43      	subs	r3, r0, #1
    3014:	4198      	sbcs	r0, r3
    3016:	b2c0      	uxtb	r0, r0
    3018:	2287      	movs	r2, #135	; 0x87
    301a:	4907      	ldr	r1, [pc, #28]	; (3038 <_spi_m_sync_io_read+0x30>)
    301c:	4b07      	ldr	r3, [pc, #28]	; (303c <_spi_m_sync_io_read+0x34>)
    301e:	4798      	blx	r3
	xfer.rxbuf = buf;
    3020:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    3022:	2300      	movs	r3, #0
    3024:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    3026:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    3028:	0020      	movs	r0, r4
    302a:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    302c:	a901      	add	r1, sp, #4
    302e:	4b04      	ldr	r3, [pc, #16]	; (3040 <_spi_m_sync_io_read+0x38>)
    3030:	4798      	blx	r3
}
    3032:	b004      	add	sp, #16
    3034:	bd70      	pop	{r4, r5, r6, pc}
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	000046c4 	.word	0x000046c4
    303c:	00003369 	.word	0x00003369
    3040:	00002f85 	.word	0x00002f85

00003044 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    3044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3046:	46ce      	mov	lr, r9
    3048:	4647      	mov	r7, r8
    304a:	b580      	push	{r7, lr}
    304c:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    304e:	6803      	ldr	r3, [r0, #0]
    3050:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    3052:	2b00      	cmp	r3, #0
    3054:	d005      	beq.n	3062 <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    3056:	688e      	ldr	r6, [r1, #8]
    3058:	001c      	movs	r4, r3
    305a:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    305c:	2701      	movs	r7, #1
    305e:	1abf      	subs	r7, r7, r2
    3060:	e00d      	b.n	307e <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
    3062:	4b12      	ldr	r3, [pc, #72]	; (30ac <timer_add_timer_task+0x68>)
    3064:	4798      	blx	r3
		return;
    3066:	e018      	b.n	309a <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    3068:	18fb      	adds	r3, r7, r3
    306a:	68a0      	ldr	r0, [r4, #8]
    306c:	4680      	mov	r8, r0
    306e:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
    3070:	42b3      	cmp	r3, r6
    3072:	d20c      	bcs.n	308e <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    3074:	6823      	ldr	r3, [r4, #0]
    3076:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3078:	2b00      	cmp	r3, #0
    307a:	d00b      	beq.n	3094 <timer_add_timer_task+0x50>
    307c:	001c      	movs	r4, r3
		if (it->time_label <= time) {
    307e:	6863      	ldr	r3, [r4, #4]
    3080:	4293      	cmp	r3, r2
    3082:	d8f1      	bhi.n	3068 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
    3084:	68a0      	ldr	r0, [r4, #8]
    3086:	4680      	mov	r8, r0
    3088:	4443      	add	r3, r8
    308a:	1a9b      	subs	r3, r3, r2
    308c:	e7f0      	b.n	3070 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
    308e:	45a4      	cmp	ip, r4
    3090:	d007      	beq.n	30a2 <timer_add_timer_task+0x5e>
    3092:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    3094:	0020      	movs	r0, r4
    3096:	4b06      	ldr	r3, [pc, #24]	; (30b0 <timer_add_timer_task+0x6c>)
    3098:	4798      	blx	r3
	}
}
    309a:	bc0c      	pop	{r2, r3}
    309c:	4690      	mov	r8, r2
    309e:	4699      	mov	r9, r3
    30a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    30a2:	4648      	mov	r0, r9
    30a4:	4b01      	ldr	r3, [pc, #4]	; (30ac <timer_add_timer_task+0x68>)
    30a6:	4798      	blx	r3
    30a8:	e7f7      	b.n	309a <timer_add_timer_task+0x56>
    30aa:	46c0      	nop			; (mov r8, r8)
    30ac:	00003395 	.word	0x00003395
    30b0:	000033c1 	.word	0x000033c1

000030b4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    30b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    30b6:	46c6      	mov	lr, r8
    30b8:	b500      	push	{lr}
    30ba:	b082      	sub	sp, #8
    30bc:	0007      	movs	r7, r0
	return (void *)list->head;
    30be:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    30c0:	6902      	ldr	r2, [r0, #16]
    30c2:	3201      	adds	r2, #1
    30c4:	4690      	mov	r8, r2
    30c6:	6102      	str	r2, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    30c8:	7e03      	ldrb	r3, [r0, #24]
    30ca:	07db      	lsls	r3, r3, #31
    30cc:	d411      	bmi.n	30f2 <timer_process_counted+0x3e>
    30ce:	7e03      	ldrb	r3, [r0, #24]
    30d0:	079b      	lsls	r3, r3, #30
    30d2:	d40e      	bmi.n	30f2 <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    30d4:	2c00      	cmp	r4, #0
    30d6:	d010      	beq.n	30fa <timer_process_counted+0x46>
    30d8:	0013      	movs	r3, r2
    30da:	6862      	ldr	r2, [r4, #4]
    30dc:	1a9b      	subs	r3, r3, r2
    30de:	68a2      	ldr	r2, [r4, #8]
    30e0:	4293      	cmp	r3, r2
    30e2:	d30a      	bcc.n	30fa <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    30e4:	2314      	movs	r3, #20
    30e6:	469c      	mov	ip, r3
    30e8:	4484      	add	ip, r0
    30ea:	4663      	mov	r3, ip
    30ec:	9301      	str	r3, [sp, #4]
    30ee:	4e12      	ldr	r6, [pc, #72]	; (3138 <timer_process_counted+0x84>)
    30f0:	e014      	b.n	311c <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    30f2:	7e3b      	ldrb	r3, [r7, #24]
    30f4:	2202      	movs	r2, #2
    30f6:	4313      	orrs	r3, r2
    30f8:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    30fa:	b002      	add	sp, #8
    30fc:	bc04      	pop	{r2}
    30fe:	4690      	mov	r8, r2
    3100:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3102:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
    3104:	68e3      	ldr	r3, [r4, #12]
    3106:	0020      	movs	r0, r4
    3108:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    310a:	2d00      	cmp	r5, #0
    310c:	d0f5      	beq.n	30fa <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    310e:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    3110:	4643      	mov	r3, r8
    3112:	686a      	ldr	r2, [r5, #4]
    3114:	1a9b      	subs	r3, r3, r2
    3116:	68aa      	ldr	r2, [r5, #8]
    3118:	4293      	cmp	r3, r2
    311a:	d3ee      	bcc.n	30fa <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
    311c:	9801      	ldr	r0, [sp, #4]
    311e:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
    3120:	7c23      	ldrb	r3, [r4, #16]
    3122:	2b01      	cmp	r3, #1
    3124:	d1ed      	bne.n	3102 <timer_process_counted+0x4e>
			tmp->time_label = time;
    3126:	4643      	mov	r3, r8
    3128:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    312a:	4642      	mov	r2, r8
    312c:	0021      	movs	r1, r4
    312e:	9801      	ldr	r0, [sp, #4]
    3130:	4b02      	ldr	r3, [pc, #8]	; (313c <timer_process_counted+0x88>)
    3132:	4798      	blx	r3
    3134:	e7e5      	b.n	3102 <timer_process_counted+0x4e>
    3136:	46c0      	nop			; (mov r8, r8)
    3138:	000033c9 	.word	0x000033c9
    313c:	00003045 	.word	0x00003045

00003140 <timer_init>:
{
    3140:	b570      	push	{r4, r5, r6, lr}
    3142:	0004      	movs	r4, r0
    3144:	000d      	movs	r5, r1
    3146:	0016      	movs	r6, r2
	ASSERT(descr && hw && func);
    3148:	2800      	cmp	r0, #0
    314a:	d013      	beq.n	3174 <timer_init+0x34>
    314c:	2900      	cmp	r1, #0
    314e:	d013      	beq.n	3178 <timer_init+0x38>
    3150:	0010      	movs	r0, r2
    3152:	1e43      	subs	r3, r0, #1
    3154:	4198      	sbcs	r0, r3
    3156:	223b      	movs	r2, #59	; 0x3b
    3158:	4908      	ldr	r1, [pc, #32]	; (317c <timer_init+0x3c>)
    315a:	4b09      	ldr	r3, [pc, #36]	; (3180 <timer_init+0x40>)
    315c:	4798      	blx	r3
	descr->func = func;
    315e:	0020      	movs	r0, r4
    3160:	c040      	stmia	r0!, {r6}
	descr->func->init(&descr->device, hw);
    3162:	6833      	ldr	r3, [r6, #0]
    3164:	0029      	movs	r1, r5
    3166:	4798      	blx	r3
	descr->time                           = 0;
    3168:	2300      	movs	r3, #0
    316a:	6163      	str	r3, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    316c:	4b05      	ldr	r3, [pc, #20]	; (3184 <timer_init+0x44>)
    316e:	6063      	str	r3, [r4, #4]
}
    3170:	2000      	movs	r0, #0
    3172:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    3174:	2000      	movs	r0, #0
    3176:	e7ee      	b.n	3156 <timer_init+0x16>
    3178:	2000      	movs	r0, #0
    317a:	e7ec      	b.n	3156 <timer_init+0x16>
    317c:	000046e0 	.word	0x000046e0
    3180:	00003369 	.word	0x00003369
    3184:	000030b5 	.word	0x000030b5

00003188 <timer_start>:
{
    3188:	b570      	push	{r4, r5, r6, lr}
    318a:	1e04      	subs	r4, r0, #0
	ASSERT(descr && descr->func);
    318c:	d014      	beq.n	31b8 <timer_start+0x30>
    318e:	6800      	ldr	r0, [r0, #0]
    3190:	1e43      	subs	r3, r0, #1
    3192:	4198      	sbcs	r0, r3
    3194:	b2c0      	uxtb	r0, r0
    3196:	2254      	movs	r2, #84	; 0x54
    3198:	490a      	ldr	r1, [pc, #40]	; (31c4 <timer_start+0x3c>)
    319a:	4b0b      	ldr	r3, [pc, #44]	; (31c8 <timer_start+0x40>)
    319c:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    319e:	1d25      	adds	r5, r4, #4
    31a0:	6823      	ldr	r3, [r4, #0]
    31a2:	699b      	ldr	r3, [r3, #24]
    31a4:	0028      	movs	r0, r5
    31a6:	4798      	blx	r3
    31a8:	2800      	cmp	r0, #0
    31aa:	d107      	bne.n	31bc <timer_start+0x34>
	descr->func->start_timer(&descr->device);
    31ac:	6823      	ldr	r3, [r4, #0]
    31ae:	689b      	ldr	r3, [r3, #8]
    31b0:	0028      	movs	r0, r5
    31b2:	4798      	blx	r3
	return ERR_NONE;
    31b4:	2000      	movs	r0, #0
}
    31b6:	bd70      	pop	{r4, r5, r6, pc}
    31b8:	2000      	movs	r0, #0
    31ba:	e7ec      	b.n	3196 <timer_start+0xe>
		return ERR_DENIED;
    31bc:	2011      	movs	r0, #17
    31be:	4240      	negs	r0, r0
    31c0:	e7f9      	b.n	31b6 <timer_start+0x2e>
    31c2:	46c0      	nop			; (mov r8, r8)
    31c4:	000046e0 	.word	0x000046e0
    31c8:	00003369 	.word	0x00003369

000031cc <timer_stop>:
{
    31cc:	b570      	push	{r4, r5, r6, lr}
    31ce:	1e04      	subs	r4, r0, #0
	ASSERT(descr && descr->func);
    31d0:	d014      	beq.n	31fc <timer_stop+0x30>
    31d2:	6800      	ldr	r0, [r0, #0]
    31d4:	1e43      	subs	r3, r0, #1
    31d6:	4198      	sbcs	r0, r3
    31d8:	b2c0      	uxtb	r0, r0
    31da:	2262      	movs	r2, #98	; 0x62
    31dc:	490a      	ldr	r1, [pc, #40]	; (3208 <timer_stop+0x3c>)
    31de:	4b0b      	ldr	r3, [pc, #44]	; (320c <timer_stop+0x40>)
    31e0:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    31e2:	1d25      	adds	r5, r4, #4
    31e4:	6823      	ldr	r3, [r4, #0]
    31e6:	699b      	ldr	r3, [r3, #24]
    31e8:	0028      	movs	r0, r5
    31ea:	4798      	blx	r3
    31ec:	2800      	cmp	r0, #0
    31ee:	d007      	beq.n	3200 <timer_stop+0x34>
	descr->func->stop_timer(&descr->device);
    31f0:	6823      	ldr	r3, [r4, #0]
    31f2:	68db      	ldr	r3, [r3, #12]
    31f4:	0028      	movs	r0, r5
    31f6:	4798      	blx	r3
	return ERR_NONE;
    31f8:	2000      	movs	r0, #0
}
    31fa:	bd70      	pop	{r4, r5, r6, pc}
    31fc:	2000      	movs	r0, #0
    31fe:	e7ec      	b.n	31da <timer_stop+0xe>
		return ERR_DENIED;
    3200:	2011      	movs	r0, #17
    3202:	4240      	negs	r0, r0
    3204:	e7f9      	b.n	31fa <timer_stop+0x2e>
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	000046e0 	.word	0x000046e0
    320c:	00003369 	.word	0x00003369

00003210 <timer_add_task>:
{
    3210:	b570      	push	{r4, r5, r6, lr}
    3212:	b082      	sub	sp, #8
    3214:	0004      	movs	r4, r0
    3216:	000d      	movs	r5, r1
	ASSERT(descr && task && descr->func);
    3218:	2800      	cmp	r0, #0
    321a:	d025      	beq.n	3268 <timer_add_task+0x58>
    321c:	2900      	cmp	r1, #0
    321e:	d025      	beq.n	326c <timer_add_task+0x5c>
    3220:	6800      	ldr	r0, [r0, #0]
    3222:	1e43      	subs	r3, r0, #1
    3224:	4198      	sbcs	r0, r3
    3226:	227b      	movs	r2, #123	; 0x7b
    3228:	491f      	ldr	r1, [pc, #124]	; (32a8 <timer_add_task+0x98>)
    322a:	4b20      	ldr	r3, [pc, #128]	; (32ac <timer_add_task+0x9c>)
    322c:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    322e:	7f23      	ldrb	r3, [r4, #28]
    3230:	2201      	movs	r2, #1
    3232:	4313      	orrs	r3, r2
    3234:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    3236:	0026      	movs	r6, r4
    3238:	3618      	adds	r6, #24
    323a:	0029      	movs	r1, r5
    323c:	0030      	movs	r0, r6
    323e:	4b1c      	ldr	r3, [pc, #112]	; (32b0 <timer_add_task+0xa0>)
    3240:	4798      	blx	r3
    3242:	2800      	cmp	r0, #0
    3244:	d114      	bne.n	3270 <timer_add_task+0x60>
	task->time_label = descr->time;
    3246:	6963      	ldr	r3, [r4, #20]
    3248:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    324a:	6962      	ldr	r2, [r4, #20]
    324c:	0029      	movs	r1, r5
    324e:	0030      	movs	r0, r6
    3250:	4b18      	ldr	r3, [pc, #96]	; (32b4 <timer_add_task+0xa4>)
    3252:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3254:	7f23      	ldrb	r3, [r4, #28]
    3256:	2201      	movs	r2, #1
    3258:	4393      	bics	r3, r2
    325a:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    325c:	7f23      	ldrb	r3, [r4, #28]
	return ERR_NONE;
    325e:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3260:	079b      	lsls	r3, r3, #30
    3262:	d411      	bmi.n	3288 <timer_add_task+0x78>
}
    3264:	b002      	add	sp, #8
    3266:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    3268:	2000      	movs	r0, #0
    326a:	e7dc      	b.n	3226 <timer_add_task+0x16>
    326c:	2000      	movs	r0, #0
    326e:	e7da      	b.n	3226 <timer_add_task+0x16>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3270:	7f23      	ldrb	r3, [r4, #28]
    3272:	2201      	movs	r2, #1
    3274:	4393      	bics	r3, r2
    3276:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    3278:	327f      	adds	r2, #127	; 0x7f
    327a:	490b      	ldr	r1, [pc, #44]	; (32a8 <timer_add_task+0x98>)
    327c:	2000      	movs	r0, #0
    327e:	4b0b      	ldr	r3, [pc, #44]	; (32ac <timer_add_task+0x9c>)
    3280:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    3282:	2012      	movs	r0, #18
    3284:	4240      	negs	r0, r0
    3286:	e7ed      	b.n	3264 <timer_add_task+0x54>
		CRITICAL_SECTION_ENTER()
    3288:	a801      	add	r0, sp, #4
    328a:	4b0b      	ldr	r3, [pc, #44]	; (32b8 <timer_add_task+0xa8>)
    328c:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    328e:	7f23      	ldrb	r3, [r4, #28]
    3290:	2202      	movs	r2, #2
    3292:	4393      	bics	r3, r2
    3294:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    3296:	1d20      	adds	r0, r4, #4
    3298:	6823      	ldr	r3, [r4, #0]
    329a:	69db      	ldr	r3, [r3, #28]
    329c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    329e:	a801      	add	r0, sp, #4
    32a0:	4b06      	ldr	r3, [pc, #24]	; (32bc <timer_add_task+0xac>)
    32a2:	4798      	blx	r3
	return ERR_NONE;
    32a4:	2000      	movs	r0, #0
    32a6:	e7dd      	b.n	3264 <timer_add_task+0x54>
    32a8:	000046e0 	.word	0x000046e0
    32ac:	00003369 	.word	0x00003369
    32b0:	00003371 	.word	0x00003371
    32b4:	00003045 	.word	0x00003045
    32b8:	00002dc1 	.word	0x00002dc1
    32bc:	00002dcf 	.word	0x00002dcf

000032c0 <timer_remove_task>:
{
    32c0:	b570      	push	{r4, r5, r6, lr}
    32c2:	b082      	sub	sp, #8
    32c4:	0004      	movs	r4, r0
    32c6:	000d      	movs	r5, r1
	ASSERT(descr && task && descr->func);
    32c8:	2800      	cmp	r0, #0
    32ca:	d022      	beq.n	3312 <timer_remove_task+0x52>
    32cc:	2900      	cmp	r1, #0
    32ce:	d022      	beq.n	3316 <timer_remove_task+0x56>
    32d0:	6800      	ldr	r0, [r0, #0]
    32d2:	1e43      	subs	r3, r0, #1
    32d4:	4198      	sbcs	r0, r3
    32d6:	2296      	movs	r2, #150	; 0x96
    32d8:	491d      	ldr	r1, [pc, #116]	; (3350 <timer_remove_task+0x90>)
    32da:	4b1e      	ldr	r3, [pc, #120]	; (3354 <timer_remove_task+0x94>)
    32dc:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    32de:	7f23      	ldrb	r3, [r4, #28]
    32e0:	2201      	movs	r2, #1
    32e2:	4313      	orrs	r3, r2
    32e4:	7723      	strb	r3, [r4, #28]
	if (!is_list_element(&descr->tasks, task)) {
    32e6:	0026      	movs	r6, r4
    32e8:	3618      	adds	r6, #24
    32ea:	0029      	movs	r1, r5
    32ec:	0030      	movs	r0, r6
    32ee:	4b1a      	ldr	r3, [pc, #104]	; (3358 <timer_remove_task+0x98>)
    32f0:	4798      	blx	r3
    32f2:	2800      	cmp	r0, #0
    32f4:	d011      	beq.n	331a <timer_remove_task+0x5a>
	list_delete_element(&descr->tasks, task);
    32f6:	0029      	movs	r1, r5
    32f8:	0030      	movs	r0, r6
    32fa:	4b18      	ldr	r3, [pc, #96]	; (335c <timer_remove_task+0x9c>)
    32fc:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    32fe:	7f23      	ldrb	r3, [r4, #28]
    3300:	2201      	movs	r2, #1
    3302:	4393      	bics	r3, r2
    3304:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3306:	7f23      	ldrb	r3, [r4, #28]
	return ERR_NONE;
    3308:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    330a:	079b      	lsls	r3, r3, #30
    330c:	d410      	bmi.n	3330 <timer_remove_task+0x70>
}
    330e:	b002      	add	sp, #8
    3310:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    3312:	2000      	movs	r0, #0
    3314:	e7df      	b.n	32d6 <timer_remove_task+0x16>
    3316:	2000      	movs	r0, #0
    3318:	e7dd      	b.n	32d6 <timer_remove_task+0x16>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    331a:	7f23      	ldrb	r3, [r4, #28]
    331c:	2201      	movs	r2, #1
    331e:	4393      	bics	r3, r2
    3320:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    3322:	329a      	adds	r2, #154	; 0x9a
    3324:	490a      	ldr	r1, [pc, #40]	; (3350 <timer_remove_task+0x90>)
    3326:	4b0b      	ldr	r3, [pc, #44]	; (3354 <timer_remove_task+0x94>)
    3328:	4798      	blx	r3
		return ERR_NOT_FOUND;
    332a:	200a      	movs	r0, #10
    332c:	4240      	negs	r0, r0
    332e:	e7ee      	b.n	330e <timer_remove_task+0x4e>
		CRITICAL_SECTION_ENTER()
    3330:	a801      	add	r0, sp, #4
    3332:	4b0b      	ldr	r3, [pc, #44]	; (3360 <timer_remove_task+0xa0>)
    3334:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3336:	7f23      	ldrb	r3, [r4, #28]
    3338:	2202      	movs	r2, #2
    333a:	4393      	bics	r3, r2
    333c:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    333e:	1d20      	adds	r0, r4, #4
    3340:	6823      	ldr	r3, [r4, #0]
    3342:	69db      	ldr	r3, [r3, #28]
    3344:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3346:	a801      	add	r0, sp, #4
    3348:	4b06      	ldr	r3, [pc, #24]	; (3364 <timer_remove_task+0xa4>)
    334a:	4798      	blx	r3
	return ERR_NONE;
    334c:	2000      	movs	r0, #0
    334e:	e7de      	b.n	330e <timer_remove_task+0x4e>
    3350:	000046e0 	.word	0x000046e0
    3354:	00003369 	.word	0x00003369
    3358:	00003371 	.word	0x00003371
    335c:	000033d7 	.word	0x000033d7
    3360:	00002dc1 	.word	0x00002dc1
    3364:	00002dcf 	.word	0x00002dcf

00003368 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    3368:	2800      	cmp	r0, #0
    336a:	d100      	bne.n	336e <assert+0x6>
		__asm("BKPT #0");
    336c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    336e:	4770      	bx	lr

00003370 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3370:	6803      	ldr	r3, [r0, #0]
    3372:	2b00      	cmp	r3, #0
    3374:	d00a      	beq.n	338c <is_list_element+0x1c>
		if (it == element) {
    3376:	428b      	cmp	r3, r1
    3378:	d00a      	beq.n	3390 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    337a:	681b      	ldr	r3, [r3, #0]
    337c:	2b00      	cmp	r3, #0
    337e:	d003      	beq.n	3388 <is_list_element+0x18>
		if (it == element) {
    3380:	4299      	cmp	r1, r3
    3382:	d1fa      	bne.n	337a <is_list_element+0xa>
			return true;
    3384:	2001      	movs	r0, #1
    3386:	e000      	b.n	338a <is_list_element+0x1a>
		}
	}

	return false;
    3388:	2000      	movs	r0, #0
}
    338a:	4770      	bx	lr
	return false;
    338c:	2000      	movs	r0, #0
    338e:	e7fc      	b.n	338a <is_list_element+0x1a>
			return true;
    3390:	2001      	movs	r0, #1
    3392:	e7fa      	b.n	338a <is_list_element+0x1a>

00003394 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3394:	b570      	push	{r4, r5, r6, lr}
    3396:	0004      	movs	r4, r0
    3398:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    339a:	4b06      	ldr	r3, [pc, #24]	; (33b4 <list_insert_as_head+0x20>)
    339c:	4798      	blx	r3
    339e:	2301      	movs	r3, #1
    33a0:	4058      	eors	r0, r3
    33a2:	b2c0      	uxtb	r0, r0
    33a4:	2239      	movs	r2, #57	; 0x39
    33a6:	4904      	ldr	r1, [pc, #16]	; (33b8 <list_insert_as_head+0x24>)
    33a8:	4b04      	ldr	r3, [pc, #16]	; (33bc <list_insert_as_head+0x28>)
    33aa:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    33ac:	6823      	ldr	r3, [r4, #0]
    33ae:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    33b0:	6025      	str	r5, [r4, #0]
}
    33b2:	bd70      	pop	{r4, r5, r6, pc}
    33b4:	00003371 	.word	0x00003371
    33b8:	000046f8 	.word	0x000046f8
    33bc:	00003369 	.word	0x00003369

000033c0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    33c0:	6803      	ldr	r3, [r0, #0]
    33c2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    33c4:	6001      	str	r1, [r0, #0]
}
    33c6:	4770      	bx	lr

000033c8 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    33c8:	6803      	ldr	r3, [r0, #0]
    33ca:	2b00      	cmp	r3, #0
    33cc:	d001      	beq.n	33d2 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    33ce:	681a      	ldr	r2, [r3, #0]
    33d0:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    33d2:	0018      	movs	r0, r3
    33d4:	4770      	bx	lr

000033d6 <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
    33d6:	2900      	cmp	r1, #0
    33d8:	d019      	beq.n	340e <list_delete_element+0x38>
		return false;
	}

	if (list->head == element) {
    33da:	6802      	ldr	r2, [r0, #0]
    33dc:	4291      	cmp	r1, r2
    33de:	d00b      	beq.n	33f8 <list_delete_element+0x22>
		list->head = list->head->next;
		return true;
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
    33e0:	2a00      	cmp	r2, #0
    33e2:	d016      	beq.n	3412 <list_delete_element+0x3c>
    33e4:	6813      	ldr	r3, [r2, #0]
    33e6:	4299      	cmp	r1, r3
    33e8:	d00a      	beq.n	3400 <list_delete_element+0x2a>
    33ea:	2b00      	cmp	r3, #0
    33ec:	d00d      	beq.n	340a <list_delete_element+0x34>
    33ee:	681a      	ldr	r2, [r3, #0]
    33f0:	4291      	cmp	r1, r2
    33f2:	d006      	beq.n	3402 <list_delete_element+0x2c>
    33f4:	0013      	movs	r3, r2
    33f6:	e7f8      	b.n	33ea <list_delete_element+0x14>
		list->head = list->head->next;
    33f8:	6813      	ldr	r3, [r2, #0]
    33fa:	6003      	str	r3, [r0, #0]
		return true;
    33fc:	2001      	movs	r0, #1
    33fe:	e003      	b.n	3408 <list_delete_element+0x32>
		while (it && it->next != element) {
    3400:	0013      	movs	r3, r2
			it = it->next;
		}
		if (it) {
			it->next = ((struct list_element *)element)->next;
    3402:	680a      	ldr	r2, [r1, #0]
    3404:	601a      	str	r2, [r3, #0]
			return true;
    3406:	2001      	movs	r0, #1
		}
	}

	return false;
}
    3408:	4770      	bx	lr
	return false;
    340a:	2000      	movs	r0, #0
    340c:	e7fc      	b.n	3408 <list_delete_element+0x32>
		return false;
    340e:	2000      	movs	r0, #0
    3410:	e7fa      	b.n	3408 <list_delete_element+0x32>
	return false;
    3412:	2000      	movs	r0, #0
    3414:	e7f8      	b.n	3408 <list_delete_element+0x32>
	...

00003418 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3418:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    341a:	4a08      	ldr	r2, [pc, #32]	; (343c <_init_chip+0x24>)
    341c:	6853      	ldr	r3, [r2, #4]
    341e:	2108      	movs	r1, #8
    3420:	430b      	orrs	r3, r1
    3422:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    3424:	4b06      	ldr	r3, [pc, #24]	; (3440 <_init_chip+0x28>)
    3426:	4798      	blx	r3
	_sysctrl_init_sources();
    3428:	4b06      	ldr	r3, [pc, #24]	; (3444 <_init_chip+0x2c>)
    342a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    342c:	2080      	movs	r0, #128	; 0x80
    342e:	4c06      	ldr	r4, [pc, #24]	; (3448 <_init_chip+0x30>)
    3430:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    3432:	4b06      	ldr	r3, [pc, #24]	; (344c <_init_chip+0x34>)
    3434:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    3436:	207f      	movs	r0, #127	; 0x7f
    3438:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    343a:	bd10      	pop	{r4, pc}
    343c:	41004000 	.word	0x41004000
    3440:	00003505 	.word	0x00003505
    3444:	000038ad 	.word	0x000038ad
    3448:	00003451 	.word	0x00003451
    344c:	000038f1 	.word	0x000038f1

00003450 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    3450:	07c3      	lsls	r3, r0, #31
    3452:	d509      	bpl.n	3468 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    3454:	4b22      	ldr	r3, [pc, #136]	; (34e0 <_gclk_init_generators_by_fref+0x90>)
    3456:	2280      	movs	r2, #128	; 0x80
    3458:	0052      	lsls	r2, r2, #1
    345a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    345c:	4a21      	ldr	r2, [pc, #132]	; (34e4 <_gclk_init_generators_by_fref+0x94>)
    345e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3460:	001a      	movs	r2, r3
    3462:	7853      	ldrb	r3, [r2, #1]
    3464:	09db      	lsrs	r3, r3, #7
    3466:	d1fc      	bne.n	3462 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    3468:	0783      	lsls	r3, r0, #30
    346a:	d509      	bpl.n	3480 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    346c:	4b1c      	ldr	r3, [pc, #112]	; (34e0 <_gclk_init_generators_by_fref+0x90>)
    346e:	2202      	movs	r2, #2
    3470:	32ff      	adds	r2, #255	; 0xff
    3472:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    3474:	4a1c      	ldr	r2, [pc, #112]	; (34e8 <_gclk_init_generators_by_fref+0x98>)
    3476:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3478:	001a      	movs	r2, r3
    347a:	7853      	ldrb	r3, [r2, #1]
    347c:	09db      	lsrs	r3, r3, #7
    347e:	d1fc      	bne.n	347a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    3480:	0743      	lsls	r3, r0, #29
    3482:	d508      	bpl.n	3496 <_gclk_init_generators_by_fref+0x46>
	((Gclk *)hw)->GENDIV.reg = data;
    3484:	4b16      	ldr	r3, [pc, #88]	; (34e0 <_gclk_init_generators_by_fref+0x90>)
    3486:	4a19      	ldr	r2, [pc, #100]	; (34ec <_gclk_init_generators_by_fref+0x9c>)
    3488:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    348a:	4a19      	ldr	r2, [pc, #100]	; (34f0 <_gclk_init_generators_by_fref+0xa0>)
    348c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    348e:	001a      	movs	r2, r3
    3490:	7853      	ldrb	r3, [r2, #1]
    3492:	09db      	lsrs	r3, r3, #7
    3494:	d1fc      	bne.n	3490 <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    3496:	0703      	lsls	r3, r0, #28
    3498:	d509      	bpl.n	34ae <_gclk_init_generators_by_fref+0x5e>
	((Gclk *)hw)->GENDIV.reg = data;
    349a:	4b11      	ldr	r3, [pc, #68]	; (34e0 <_gclk_init_generators_by_fref+0x90>)
    349c:	2204      	movs	r2, #4
    349e:	32ff      	adds	r2, #255	; 0xff
    34a0:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    34a2:	4a14      	ldr	r2, [pc, #80]	; (34f4 <_gclk_init_generators_by_fref+0xa4>)
    34a4:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    34a6:	001a      	movs	r2, r3
    34a8:	7853      	ldrb	r3, [r2, #1]
    34aa:	09db      	lsrs	r3, r3, #7
    34ac:	d1fc      	bne.n	34a8 <_gclk_init_generators_by_fref+0x58>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    34ae:	0683      	lsls	r3, r0, #26
    34b0:	d508      	bpl.n	34c4 <_gclk_init_generators_by_fref+0x74>
	((Gclk *)hw)->GENDIV.reg = data;
    34b2:	4b0b      	ldr	r3, [pc, #44]	; (34e0 <_gclk_init_generators_by_fref+0x90>)
    34b4:	4a10      	ldr	r2, [pc, #64]	; (34f8 <_gclk_init_generators_by_fref+0xa8>)
    34b6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    34b8:	4a10      	ldr	r2, [pc, #64]	; (34fc <_gclk_init_generators_by_fref+0xac>)
    34ba:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    34bc:	001a      	movs	r2, r3
    34be:	7853      	ldrb	r3, [r2, #1]
    34c0:	09db      	lsrs	r3, r3, #7
    34c2:	d1fc      	bne.n	34be <_gclk_init_generators_by_fref+0x6e>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    34c4:	0603      	lsls	r3, r0, #24
    34c6:	d509      	bpl.n	34dc <_gclk_init_generators_by_fref+0x8c>
	((Gclk *)hw)->GENDIV.reg = data;
    34c8:	4b05      	ldr	r3, [pc, #20]	; (34e0 <_gclk_init_generators_by_fref+0x90>)
    34ca:	2208      	movs	r2, #8
    34cc:	32ff      	adds	r2, #255	; 0xff
    34ce:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    34d0:	4a0b      	ldr	r2, [pc, #44]	; (3500 <_gclk_init_generators_by_fref+0xb0>)
    34d2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    34d4:	001a      	movs	r2, r3
    34d6:	7853      	ldrb	r3, [r2, #1]
    34d8:	09db      	lsrs	r3, r3, #7
    34da:	d1fc      	bne.n	34d6 <_gclk_init_generators_by_fref+0x86>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    34dc:	4770      	bx	lr
    34de:	46c0      	nop			; (mov r8, r8)
    34e0:	40000c00 	.word	0x40000c00
    34e4:	00090600 	.word	0x00090600
    34e8:	00090701 	.word	0x00090701
    34ec:	00000802 	.word	0x00000802
    34f0:	00090602 	.word	0x00090602
    34f4:	00090603 	.word	0x00090603
    34f8:	00002005 	.word	0x00002005
    34fc:	00090305 	.word	0x00090305
    3500:	00090307 	.word	0x00090307

00003504 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    3504:	4b06      	ldr	r3, [pc, #24]	; (3520 <_pm_init+0x1c>)
    3506:	7a1a      	ldrb	r2, [r3, #8]
    3508:	b2d2      	uxtb	r2, r2
    350a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    350c:	7a5a      	ldrb	r2, [r3, #9]
    350e:	b2d2      	uxtb	r2, r2
    3510:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    3512:	7a9a      	ldrb	r2, [r3, #10]
    3514:	b2d2      	uxtb	r2, r2
    3516:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    3518:	7ada      	ldrb	r2, [r3, #11]
    351a:	b2d2      	uxtb	r2, r2
    351c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    351e:	4770      	bx	lr
    3520:	40000400 	.word	0x40000400

00003524 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, clock_cycles);
    3524:	68c2      	ldr	r2, [r0, #12]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
    3526:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
    3528:	6191      	str	r1, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    352a:	7a93      	ldrb	r3, [r2, #10]
    352c:	09db      	lsrs	r3, r3, #7
    352e:	d1fc      	bne.n	352a <_rtc_timer_set_period+0x6>
}
    3530:	4770      	bx	lr

00003532 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_COMP_bf(dev->hw, 0);
    3532:	68c2      	ldr	r2, [r0, #12]
    3534:	7a93      	ldrb	r3, [r2, #10]
    3536:	09db      	lsrs	r3, r3, #7
    3538:	d1fc      	bne.n	3534 <_rtc_timer_get_period+0x2>

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_COMP_bf(const void *const hw, uint8_t index)
{
	uint32_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
    353a:	6990      	ldr	r0, [r2, #24]
}
    353c:	4770      	bx	lr

0000353e <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw);
    353e:	68c2      	ldr	r2, [r0, #12]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    3540:	7a93      	ldrb	r3, [r2, #10]
    3542:	09db      	lsrs	r3, r3, #7
    3544:	d1fc      	bne.n	3540 <_rtc_timer_is_started+0x2>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    3546:	8810      	ldrh	r0, [r2, #0]
	return (bool)tmp;
    3548:	0780      	lsls	r0, r0, #30
    354a:	0fc0      	lsrs	r0, r0, #31
}
    354c:	4770      	bx	lr

0000354e <_rtc_timer_set_irq>:
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
	(void)dev;
}
    354e:	4770      	bx	lr

00003550 <_rtc_timer_init>:
{
    3550:	b570      	push	{r4, r5, r6, lr}
    3552:	0004      	movs	r4, r0
    3554:	000d      	movs	r5, r1
	ASSERT(dev);
    3556:	1e43      	subs	r3, r0, #1
    3558:	4198      	sbcs	r0, r3
    355a:	b2c0      	uxtb	r0, r0
    355c:	2233      	movs	r2, #51	; 0x33
    355e:	4910      	ldr	r1, [pc, #64]	; (35a0 <_rtc_timer_init+0x50>)
    3560:	4b10      	ldr	r3, [pc, #64]	; (35a4 <_rtc_timer_init+0x54>)
    3562:	4798      	blx	r3
	dev->hw = hw;
    3564:	60e5      	str	r5, [r4, #12]
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    3566:	2301      	movs	r3, #1
    3568:	802b      	strh	r3, [r5, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    356a:	7aab      	ldrb	r3, [r5, #10]
    356c:	09db      	lsrs	r3, r3, #7
    356e:	d1fc      	bne.n	356a <_rtc_timer_init+0x1a>
	hri_rtcmode0_wait_for_sync(dev->hw);
    3570:	68e2      	ldr	r2, [r4, #12]
    3572:	7a93      	ldrb	r3, [r2, #10]
    3574:	09db      	lsrs	r3, r3, #7
    3576:	d1fc      	bne.n	3572 <_rtc_timer_init+0x22>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    3578:	3380      	adds	r3, #128	; 0x80
    357a:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    357c:	7a93      	ldrb	r3, [r2, #10]
    357e:	09db      	lsrs	r3, r3, #7
    3580:	d1fc      	bne.n	357c <_rtc_timer_init+0x2c>
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
    3582:	68e2      	ldr	r2, [r4, #12]
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
    3584:	6993      	ldr	r3, [r2, #24]
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
    3586:	2380      	movs	r3, #128	; 0x80
    3588:	00db      	lsls	r3, r3, #3
    358a:	6193      	str	r3, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    358c:	7a93      	ldrb	r3, [r2, #10]
    358e:	09db      	lsrs	r3, r3, #7
    3590:	d1fc      	bne.n	358c <_rtc_timer_init+0x3c>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    3592:	3301      	adds	r3, #1
    3594:	68e2      	ldr	r2, [r4, #12]
    3596:	71d3      	strb	r3, [r2, #7]
	_rtc_dev = dev;
    3598:	4b03      	ldr	r3, [pc, #12]	; (35a8 <_rtc_timer_init+0x58>)
    359a:	601c      	str	r4, [r3, #0]
}
    359c:	2000      	movs	r0, #0
    359e:	bd70      	pop	{r4, r5, r6, pc}
    35a0:	00004718 	.word	0x00004718
    35a4:	00003369 	.word	0x00003369
    35a8:	2000086c 	.word	0x2000086c

000035ac <_rtc_timer_deinit>:
{
    35ac:	b510      	push	{r4, lr}
    35ae:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
    35b0:	d016      	beq.n	35e0 <_rtc_timer_deinit+0x34>
    35b2:	68c0      	ldr	r0, [r0, #12]
    35b4:	1e43      	subs	r3, r0, #1
    35b6:	4198      	sbcs	r0, r3
    35b8:	b2c0      	uxtb	r0, r0
    35ba:	225e      	movs	r2, #94	; 0x5e
    35bc:	4909      	ldr	r1, [pc, #36]	; (35e4 <_rtc_timer_deinit+0x38>)
    35be:	4b0a      	ldr	r3, [pc, #40]	; (35e8 <_rtc_timer_deinit+0x3c>)
    35c0:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    35c2:	2108      	movs	r1, #8
    35c4:	2380      	movs	r3, #128	; 0x80
    35c6:	4a09      	ldr	r2, [pc, #36]	; (35ec <_rtc_timer_deinit+0x40>)
    35c8:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    35ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    35ce:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRL_reg(dev->hw, RTC_MODE0_CTRL_SWRST);
    35d2:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    35d4:	3b7f      	subs	r3, #127	; 0x7f
    35d6:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    35d8:	7a93      	ldrb	r3, [r2, #10]
    35da:	09db      	lsrs	r3, r3, #7
    35dc:	d1fc      	bne.n	35d8 <_rtc_timer_deinit+0x2c>
}
    35de:	bd10      	pop	{r4, pc}
    35e0:	2000      	movs	r0, #0
    35e2:	e7ea      	b.n	35ba <_rtc_timer_deinit+0xe>
    35e4:	00004718 	.word	0x00004718
    35e8:	00003369 	.word	0x00003369
    35ec:	e000e100 	.word	0xe000e100

000035f0 <_rtc_timer_start>:
{
    35f0:	b510      	push	{r4, lr}
    35f2:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
    35f4:	d01d      	beq.n	3632 <_rtc_timer_start+0x42>
    35f6:	68c0      	ldr	r0, [r0, #12]
    35f8:	1e43      	subs	r3, r0, #1
    35fa:	4198      	sbcs	r0, r3
    35fc:	b2c0      	uxtb	r0, r0
    35fe:	226a      	movs	r2, #106	; 0x6a
    3600:	490d      	ldr	r1, [pc, #52]	; (3638 <_rtc_timer_start+0x48>)
    3602:	4b0e      	ldr	r3, [pc, #56]	; (363c <_rtc_timer_start+0x4c>)
    3604:	4798      	blx	r3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3606:	2208      	movs	r2, #8
    3608:	4b0d      	ldr	r3, [pc, #52]	; (3640 <_rtc_timer_start+0x50>)
    360a:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_COUNT_bf(dev->hw, 0);
    360c:	68e2      	ldr	r2, [r4, #12]
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
    360e:	6913      	ldr	r3, [r2, #16]
	((Rtc *)hw)->MODE0.COUNT.reg = tmp;
    3610:	2300      	movs	r3, #0
    3612:	6113      	str	r3, [r2, #16]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    3614:	7a93      	ldrb	r3, [r2, #10]
    3616:	09db      	lsrs	r3, r3, #7
    3618:	d1fc      	bne.n	3614 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw);
    361a:	68e2      	ldr	r2, [r4, #12]
    361c:	7a93      	ldrb	r3, [r2, #10]
    361e:	09db      	lsrs	r3, r3, #7
    3620:	d1fc      	bne.n	361c <_rtc_timer_start+0x2c>
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    3622:	8813      	ldrh	r3, [r2, #0]
    3624:	2102      	movs	r1, #2
    3626:	430b      	orrs	r3, r1
    3628:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    362a:	7a93      	ldrb	r3, [r2, #10]
    362c:	09db      	lsrs	r3, r3, #7
    362e:	d1fc      	bne.n	362a <_rtc_timer_start+0x3a>
}
    3630:	bd10      	pop	{r4, pc}
    3632:	2000      	movs	r0, #0
    3634:	e7e3      	b.n	35fe <_rtc_timer_start+0xe>
    3636:	46c0      	nop			; (mov r8, r8)
    3638:	00004718 	.word	0x00004718
    363c:	00003369 	.word	0x00003369
    3640:	e000e100 	.word	0xe000e100

00003644 <_rtc_timer_stop>:
{
    3644:	b510      	push	{r4, lr}
    3646:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
    3648:	d010      	beq.n	366c <_rtc_timer_stop+0x28>
    364a:	68c0      	ldr	r0, [r0, #12]
    364c:	1e43      	subs	r3, r0, #1
    364e:	4198      	sbcs	r0, r3
    3650:	b2c0      	uxtb	r0, r0
    3652:	2277      	movs	r2, #119	; 0x77
    3654:	4906      	ldr	r1, [pc, #24]	; (3670 <_rtc_timer_stop+0x2c>)
    3656:	4b07      	ldr	r3, [pc, #28]	; (3674 <_rtc_timer_stop+0x30>)
    3658:	4798      	blx	r3
	hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
    365a:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    365c:	8813      	ldrh	r3, [r2, #0]
    365e:	2102      	movs	r1, #2
    3660:	438b      	bics	r3, r1
    3662:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    3664:	7a93      	ldrb	r3, [r2, #10]
    3666:	09db      	lsrs	r3, r3, #7
    3668:	d1fc      	bne.n	3664 <_rtc_timer_stop+0x20>
}
    366a:	bd10      	pop	{r4, pc}
    366c:	2000      	movs	r0, #0
    366e:	e7f0      	b.n	3652 <_rtc_timer_stop+0xe>
    3670:	00004718 	.word	0x00004718
    3674:	00003369 	.word	0x00003369

00003678 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    3678:	4800      	ldr	r0, [pc, #0]	; (367c <_rtc_get_timer+0x4>)
    367a:	4770      	bx	lr
    367c:	20000004 	.word	0x20000004

00003680 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    3680:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    3682:	4b07      	ldr	r3, [pc, #28]	; (36a0 <RTC_Handler+0x20>)
    3684:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    3686:	68e3      	ldr	r3, [r4, #12]
    3688:	7a1b      	ldrb	r3, [r3, #8]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    368a:	07db      	lsls	r3, r3, #31
    368c:	d507      	bpl.n	369e <RTC_Handler+0x1e>
		if (dev->timer_cb.period_expired) {
    368e:	6823      	ldr	r3, [r4, #0]
    3690:	2b00      	cmp	r3, #0
    3692:	d001      	beq.n	3698 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    3694:	0020      	movs	r0, r4
    3696:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    3698:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    369a:	2201      	movs	r2, #1
    369c:	721a      	strb	r2, [r3, #8]
}
    369e:	bd10      	pop	{r4, pc}
    36a0:	2000086c 	.word	0x2000086c

000036a4 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    36a4:	b570      	push	{r4, r5, r6, lr}
    36a6:	0005      	movs	r5, r0
    36a8:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    36aa:	4b35      	ldr	r3, [pc, #212]	; (3780 <_spi_m_sync_init+0xdc>)
    36ac:	18cb      	adds	r3, r1, r3
    36ae:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    36b0:	b2db      	uxtb	r3, r3
    36b2:	2b00      	cmp	r3, #0
    36b4:	d00b      	beq.n	36ce <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    36b6:	2800      	cmp	r0, #0
    36b8:	d051      	beq.n	375e <_spi_m_sync_init+0xba>
    36ba:	1e60      	subs	r0, r4, #1
    36bc:	4184      	sbcs	r4, r0
    36be:	b2e0      	uxtb	r0, r4
    36c0:	4a30      	ldr	r2, [pc, #192]	; (3784 <_spi_m_sync_init+0xe0>)
    36c2:	4931      	ldr	r1, [pc, #196]	; (3788 <_spi_m_sync_init+0xe4>)
    36c4:	4b31      	ldr	r3, [pc, #196]	; (378c <_spi_m_sync_init+0xe8>)
    36c6:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    36c8:	200d      	movs	r0, #13
    36ca:	4240      	negs	r0, r0
    36cc:	e046      	b.n	375c <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    36ce:	2800      	cmp	r0, #0
    36d0:	d14d      	bne.n	376e <_spi_m_sync_init+0xca>
    36d2:	4a2c      	ldr	r2, [pc, #176]	; (3784 <_spi_m_sync_init+0xe0>)
    36d4:	492c      	ldr	r1, [pc, #176]	; (3788 <_spi_m_sync_init+0xe4>)
    36d6:	2000      	movs	r0, #0
    36d8:	4b2c      	ldr	r3, [pc, #176]	; (378c <_spi_m_sync_init+0xe8>)
    36da:	4798      	blx	r3
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    36dc:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    36de:	07db      	lsls	r3, r3, #31
    36e0:	d418      	bmi.n	3714 <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    36e2:	2203      	movs	r2, #3
    36e4:	69e3      	ldr	r3, [r4, #28]
    36e6:	421a      	tst	r2, r3
    36e8:	d1fc      	bne.n	36e4 <_spi_m_sync_init+0x40>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    36ea:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    36ec:	079b      	lsls	r3, r3, #30
    36ee:	d50b      	bpl.n	3708 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    36f0:	6823      	ldr	r3, [r4, #0]
    36f2:	2202      	movs	r2, #2
    36f4:	4393      	bics	r3, r2
    36f6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    36f8:	3201      	adds	r2, #1
    36fa:	69e3      	ldr	r3, [r4, #28]
    36fc:	421a      	tst	r2, r3
    36fe:	d1fc      	bne.n	36fa <_spi_m_sync_init+0x56>
    3700:	2202      	movs	r2, #2
    3702:	69e3      	ldr	r3, [r4, #28]
    3704:	421a      	tst	r2, r3
    3706:	d1fc      	bne.n	3702 <_spi_m_sync_init+0x5e>
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3708:	230d      	movs	r3, #13
    370a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    370c:	2203      	movs	r2, #3
    370e:	69e3      	ldr	r3, [r4, #28]
    3710:	421a      	tst	r2, r3
    3712:	d1fc      	bne.n	370e <_spi_m_sync_init+0x6a>
    3714:	2201      	movs	r2, #1
    3716:	69e3      	ldr	r3, [r4, #28]
    3718:	421a      	tst	r2, r3
    371a:	d1fc      	bne.n	3716 <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    371c:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    371e:	0020      	movs	r0, r4
    3720:	1e43      	subs	r3, r0, #1
    3722:	4198      	sbcs	r0, r3
    3724:	b2c0      	uxtb	r0, r0
    3726:	4a1a      	ldr	r2, [pc, #104]	; (3790 <_spi_m_sync_init+0xec>)
    3728:	4917      	ldr	r1, [pc, #92]	; (3788 <_spi_m_sync_init+0xe4>)
    372a:	4b18      	ldr	r3, [pc, #96]	; (378c <_spi_m_sync_init+0xe8>)
    372c:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    372e:	4b19      	ldr	r3, [pc, #100]	; (3794 <_spi_m_sync_init+0xf0>)
    3730:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3732:	2203      	movs	r2, #3
    3734:	69e3      	ldr	r3, [r4, #28]
    3736:	421a      	tst	r2, r3
    3738:	d1fc      	bne.n	3734 <_spi_m_sync_init+0x90>
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    373a:	2380      	movs	r3, #128	; 0x80
    373c:	029b      	lsls	r3, r3, #10
    373e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3740:	2207      	movs	r2, #7
    3742:	69e3      	ldr	r3, [r4, #28]
    3744:	421a      	tst	r2, r3
    3746:	d1fc      	bne.n	3742 <_spi_m_sync_init+0x9e>
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3748:	2327      	movs	r3, #39	; 0x27
    374a:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    374c:	2200      	movs	r2, #0
    374e:	3309      	adds	r3, #9
    3750:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3752:	3b2f      	subs	r3, #47	; 0x2f
    3754:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    3756:	4b10      	ldr	r3, [pc, #64]	; (3798 <_spi_m_sync_init+0xf4>)
    3758:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    375a:	2000      	movs	r0, #0
}
    375c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    375e:	4a09      	ldr	r2, [pc, #36]	; (3784 <_spi_m_sync_init+0xe0>)
    3760:	4909      	ldr	r1, [pc, #36]	; (3788 <_spi_m_sync_init+0xe4>)
    3762:	2000      	movs	r0, #0
    3764:	4b09      	ldr	r3, [pc, #36]	; (378c <_spi_m_sync_init+0xe8>)
    3766:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3768:	200d      	movs	r0, #13
    376a:	4240      	negs	r0, r0
    376c:	e7f6      	b.n	375c <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    376e:	0008      	movs	r0, r1
    3770:	1e43      	subs	r3, r0, #1
    3772:	4198      	sbcs	r0, r3
    3774:	b2c0      	uxtb	r0, r0
    3776:	4a03      	ldr	r2, [pc, #12]	; (3784 <_spi_m_sync_init+0xe0>)
    3778:	4903      	ldr	r1, [pc, #12]	; (3788 <_spi_m_sync_init+0xe4>)
    377a:	4b04      	ldr	r3, [pc, #16]	; (378c <_spi_m_sync_init+0xe8>)
    377c:	4798      	blx	r3
    377e:	e7ad      	b.n	36dc <_spi_m_sync_init+0x38>
    3780:	bdfff800 	.word	0xbdfff800
    3784:	00000921 	.word	0x00000921
    3788:	00004730 	.word	0x00004730
    378c:	00003369 	.word	0x00003369
    3790:	000008eb 	.word	0x000008eb
    3794:	0011000c 	.word	0x0011000c
    3798:	000001ff 	.word	0x000001ff

0000379c <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    379c:	b5f0      	push	{r4, r5, r6, r7, lr}
    379e:	46de      	mov	lr, fp
    37a0:	4657      	mov	r7, sl
    37a2:	464e      	mov	r6, r9
    37a4:	4645      	mov	r5, r8
    37a6:	b5e0      	push	{r5, r6, r7, lr}
    37a8:	b083      	sub	sp, #12
    37aa:	4681      	mov	r9, r0
    37ac:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    37ae:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    37b0:	680b      	ldr	r3, [r1, #0]
    37b2:	4698      	mov	r8, r3
    37b4:	684d      	ldr	r5, [r1, #4]
    37b6:	7903      	ldrb	r3, [r0, #4]
    37b8:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    37ba:	2800      	cmp	r0, #0
    37bc:	d015      	beq.n	37ea <_spi_m_sync_trans+0x4e>
    37be:	0020      	movs	r0, r4
    37c0:	1e43      	subs	r3, r0, #1
    37c2:	4198      	sbcs	r0, r3
    37c4:	b2c0      	uxtb	r0, r0
    37c6:	4a36      	ldr	r2, [pc, #216]	; (38a0 <_spi_m_sync_trans+0x104>)
    37c8:	4936      	ldr	r1, [pc, #216]	; (38a4 <_spi_m_sync_trans+0x108>)
    37ca:	4b37      	ldr	r3, [pc, #220]	; (38a8 <_spi_m_sync_trans+0x10c>)
    37cc:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    37ce:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    37d0:	075b      	lsls	r3, r3, #29
    37d2:	d13f      	bne.n	3854 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    37d4:	2303      	movs	r3, #3
    37d6:	69e0      	ldr	r0, [r4, #28]
    37d8:	4018      	ands	r0, r3
    37da:	d1fc      	bne.n	37d6 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    37dc:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    37de:	079b      	lsls	r3, r3, #30
    37e0:	d53b      	bpl.n	385a <_spi_m_sync_trans+0xbe>
    37e2:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    37e4:	2301      	movs	r3, #1
    37e6:	469c      	mov	ip, r3
    37e8:	e009      	b.n	37fe <_spi_m_sync_trans+0x62>
    37ea:	2000      	movs	r0, #0
    37ec:	e7eb      	b.n	37c6 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    37ee:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    37f0:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    37f2:	b25b      	sxtb	r3, r3
    37f4:	2b00      	cmp	r3, #0
    37f6:	db16      	blt.n	3826 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    37f8:	68b3      	ldr	r3, [r6, #8]
    37fa:	4283      	cmp	r3, r0
    37fc:	d927      	bls.n	384e <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    37fe:	7e23      	ldrb	r3, [r4, #24]
    3800:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3802:	2104      	movs	r1, #4
    3804:	4219      	tst	r1, r3
    3806:	d02b      	beq.n	3860 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    3808:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    380a:	2d00      	cmp	r5, #0
    380c:	d0f0      	beq.n	37f0 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    380e:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    3810:	9901      	ldr	r1, [sp, #4]
    3812:	2901      	cmp	r1, #1
    3814:	d9eb      	bls.n	37ee <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    3816:	0a3f      	lsrs	r7, r7, #8
    3818:	706f      	strb	r7, [r5, #1]
    381a:	3502      	adds	r5, #2
    381c:	e7e8      	b.n	37f0 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    381e:	2101      	movs	r1, #1
    3820:	468b      	mov	fp, r1
    3822:	44d8      	add	r8, fp
    3824:	e037      	b.n	3896 <_spi_m_sync_trans+0xfa>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3826:	2301      	movs	r3, #1
    3828:	425b      	negs	r3, r3
    382a:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    382c:	3381      	adds	r3, #129	; 0x81
    382e:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    3830:	2013      	movs	r0, #19
    3832:	4240      	negs	r0, r0
	tmp &= mask;
    3834:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    3836:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3838:	4213      	tst	r3, r2
    383a:	d0fc      	beq.n	3836 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    383c:	2303      	movs	r3, #3
    383e:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    3840:	b003      	add	sp, #12
    3842:	bc3c      	pop	{r2, r3, r4, r5}
    3844:	4690      	mov	r8, r2
    3846:	4699      	mov	r9, r3
    3848:	46a2      	mov	sl, r4
    384a:	46ab      	mov	fp, r5
    384c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    384e:	4293      	cmp	r3, r2
    3850:	d8d5      	bhi.n	37fe <_spi_m_sync_trans+0x62>
    3852:	e7ef      	b.n	3834 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    3854:	2004      	movs	r0, #4
    3856:	4240      	negs	r0, r0
    3858:	e7f2      	b.n	3840 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    385a:	2014      	movs	r0, #20
    385c:	4240      	negs	r0, r0
    385e:	e7ef      	b.n	3840 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    3860:	4290      	cmp	r0, r2
    3862:	d8c6      	bhi.n	37f2 <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    3864:	4667      	mov	r7, ip
    3866:	421f      	tst	r7, r3
    3868:	d0c3      	beq.n	37f2 <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    386a:	464f      	mov	r7, r9
    386c:	88ff      	ldrh	r7, [r7, #6]
    386e:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    3870:	4647      	mov	r7, r8
    3872:	2f00      	cmp	r7, #0
    3874:	d00f      	beq.n	3896 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    3876:	783f      	ldrb	r7, [r7, #0]
    3878:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    387a:	9901      	ldr	r1, [sp, #4]
    387c:	2901      	cmp	r1, #1
    387e:	d9ce      	bls.n	381e <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    3880:	4647      	mov	r7, r8
    3882:	787f      	ldrb	r7, [r7, #1]
    3884:	023f      	lsls	r7, r7, #8
    3886:	46bb      	mov	fp, r7
    3888:	4657      	mov	r7, sl
    388a:	4659      	mov	r1, fp
    388c:	430f      	orrs	r7, r1
    388e:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    3890:	2102      	movs	r1, #2
    3892:	468b      	mov	fp, r1
    3894:	44d8      	add	r8, fp
	ctrl->txcnt++;
    3896:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    3898:	4657      	mov	r7, sl
    389a:	62a7      	str	r7, [r4, #40]	; 0x28
    389c:	e7a9      	b.n	37f2 <_spi_m_sync_trans+0x56>
    389e:	46c0      	nop			; (mov r8, r8)
    38a0:	00000a81 	.word	0x00000a81
    38a4:	00004730 	.word	0x00004730
    38a8:	00003369 	.word	0x00003369

000038ac <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    38ac:	4b0e      	ldr	r3, [pc, #56]	; (38e8 <_sysctrl_init_sources+0x3c>)
    38ae:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    38b0:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    38b2:	480e      	ldr	r0, [pc, #56]	; (38ec <_sysctrl_init_sources+0x40>)
    38b4:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    38b6:	0f92      	lsrs	r2, r2, #30
    38b8:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    38ba:	2002      	movs	r0, #2
    38bc:	4302      	orrs	r2, r0
    38be:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    38c0:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    38c2:	699a      	ldr	r2, [r3, #24]
    38c4:	4302      	orrs	r2, r0
    38c6:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    38c8:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    38ca:	211f      	movs	r1, #31
    38cc:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    38ce:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    38d0:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    38d2:	2208      	movs	r2, #8
    38d4:	68cb      	ldr	r3, [r1, #12]
    38d6:	421a      	tst	r2, r3
    38d8:	d0fc      	beq.n	38d4 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    38da:	4a03      	ldr	r2, [pc, #12]	; (38e8 <_sysctrl_init_sources+0x3c>)
    38dc:	6a13      	ldr	r3, [r2, #32]
    38de:	2180      	movs	r1, #128	; 0x80
    38e0:	430b      	orrs	r3, r1
    38e2:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    38e4:	4770      	bx	lr
    38e6:	46c0      	nop			; (mov r8, r8)
    38e8:	40000800 	.word	0x40000800
    38ec:	0fff0000 	.word	0x0fff0000

000038f0 <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    38f0:	b530      	push	{r4, r5, lr}
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    38f2:	2202      	movs	r2, #2
    38f4:	4b25      	ldr	r3, [pc, #148]	; (398c <_sysctrl_init_referenced_generators+0x9c>)
    38f6:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    38f8:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    38fa:	320e      	adds	r2, #14
    38fc:	68cb      	ldr	r3, [r1, #12]
    38fe:	421a      	tst	r2, r3
    3900:	d0fc      	beq.n	38fc <_sysctrl_init_referenced_generators+0xc>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    3902:	4a23      	ldr	r2, [pc, #140]	; (3990 <_sysctrl_init_referenced_generators+0xa0>)
    3904:	4b21      	ldr	r3, [pc, #132]	; (398c <_sysctrl_init_referenced_generators+0x9c>)
    3906:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    3908:	4b22      	ldr	r3, [pc, #136]	; (3994 <_sysctrl_init_referenced_generators+0xa4>)
    390a:	681b      	ldr	r3, [r3, #0]
    390c:	0e9b      	lsrs	r3, r3, #26
    390e:	2b3f      	cmp	r3, #63	; 0x3f
    3910:	d032      	beq.n	3978 <_sysctrl_init_referenced_generators+0x88>
    3912:	029b      	lsls	r3, r3, #10
    3914:	2280      	movs	r2, #128	; 0x80
    3916:	0092      	lsls	r2, r2, #2
    3918:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    391a:	4b1c      	ldr	r3, [pc, #112]	; (398c <_sysctrl_init_referenced_generators+0x9c>)
    391c:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    391e:	2293      	movs	r2, #147	; 0x93
    3920:	0052      	lsls	r2, r2, #1
    3922:	849a      	strh	r2, [r3, #36]	; 0x24
	((Gclk *)hw)->CLKCTRL.reg = data;
    3924:	491c      	ldr	r1, [pc, #112]	; (3998 <_sysctrl_init_referenced_generators+0xa8>)
    3926:	4a1d      	ldr	r2, [pc, #116]	; (399c <_sysctrl_init_referenced_generators+0xac>)
    3928:	8051      	strh	r1, [r2, #2]
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    392a:	2102      	movs	r1, #2
    392c:	2244      	movs	r2, #68	; 0x44
    392e:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    3930:	4a1b      	ldr	r2, [pc, #108]	; (39a0 <_sysctrl_init_referenced_generators+0xb0>)
    3932:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    3934:	2220      	movs	r2, #32
    3936:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    3938:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    393a:	075b      	lsls	r3, r3, #29
    393c:	d51f      	bpl.n	397e <_sysctrl_init_referenced_generators+0x8e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    393e:	4913      	ldr	r1, [pc, #76]	; (398c <_sysctrl_init_referenced_generators+0x9c>)
	tmp &= mask;
    3940:	3a10      	subs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3942:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    3944:	421a      	tst	r2, r3
    3946:	d0fc      	beq.n	3942 <_sysctrl_init_referenced_generators+0x52>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    3948:	4a10      	ldr	r2, [pc, #64]	; (398c <_sysctrl_init_referenced_generators+0x9c>)
    394a:	2350      	movs	r3, #80	; 0x50
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    394c:	2004      	movs	r0, #4
    394e:	2401      	movs	r4, #1
    3950:	2502      	movs	r5, #2
    3952:	5cd1      	ldrb	r1, [r2, r3]
    3954:	4201      	tst	r1, r0
    3956:	d105      	bne.n	3964 <_sysctrl_init_referenced_generators+0x74>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    3958:	5cd1      	ldrb	r1, [r2, r3]
    395a:	4221      	tst	r1, r4
    395c:	d102      	bne.n	3964 <_sysctrl_init_referenced_generators+0x74>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    395e:	5cd1      	ldrb	r1, [r2, r3]
    3960:	4229      	tst	r1, r5
    3962:	d0f6      	beq.n	3952 <_sysctrl_init_referenced_generators+0x62>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    3964:	4a0d      	ldr	r2, [pc, #52]	; (399c <_sysctrl_init_referenced_generators+0xac>)
    3966:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    3968:	09db      	lsrs	r3, r3, #7
    396a:	d1fc      	bne.n	3966 <_sysctrl_init_referenced_generators+0x76>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    396c:	4a07      	ldr	r2, [pc, #28]	; (398c <_sysctrl_init_referenced_generators+0x9c>)
    396e:	6993      	ldr	r3, [r2, #24]
    3970:	2102      	movs	r1, #2
    3972:	438b      	bics	r3, r1
    3974:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    3976:	bd30      	pop	{r4, r5, pc}
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    3978:	22fc      	movs	r2, #252	; 0xfc
    397a:	01d2      	lsls	r2, r2, #7
    397c:	e7cd      	b.n	391a <_sysctrl_init_referenced_generators+0x2a>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    397e:	4903      	ldr	r1, [pc, #12]	; (398c <_sysctrl_init_referenced_generators+0x9c>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    3980:	2210      	movs	r2, #16
    3982:	68cb      	ldr	r3, [r1, #12]
    3984:	421a      	tst	r2, r3
    3986:	d0fc      	beq.n	3982 <_sysctrl_init_referenced_generators+0x92>
    3988:	e7de      	b.n	3948 <_sysctrl_init_referenced_generators+0x58>
    398a:	46c0      	nop			; (mov r8, r8)
    398c:	40000800 	.word	0x40000800
    3990:	0401bb80 	.word	0x0401bb80
    3994:	00806024 	.word	0x00806024
    3998:	00004701 	.word	0x00004701
    399c:	40000c00 	.word	0x40000c00
    39a0:	000d05b7 	.word	0x000d05b7

000039a4 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    39a4:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    39a6:	6813      	ldr	r3, [r2, #0]
    39a8:	2102      	movs	r1, #2
    39aa:	430b      	orrs	r3, r1
    39ac:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    39ae:	3101      	adds	r1, #1
    39b0:	6893      	ldr	r3, [r2, #8]
    39b2:	4219      	tst	r1, r3
    39b4:	d1fc      	bne.n	39b0 <_tcc_timer_start+0xc>
}
    39b6:	4770      	bx	lr

000039b8 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    39b8:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    39ba:	6813      	ldr	r3, [r2, #0]
    39bc:	2102      	movs	r1, #2
    39be:	438b      	bics	r3, r1
    39c0:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    39c2:	3101      	adds	r1, #1
    39c4:	6893      	ldr	r3, [r2, #8]
    39c6:	4219      	tst	r1, r3
    39c8:	d1fc      	bne.n	39c4 <_tcc_timer_stop+0xc>
}
    39ca:	4770      	bx	lr

000039cc <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    39cc:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    39ce:	6411      	str	r1, [r2, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    39d0:	2180      	movs	r1, #128	; 0x80
    39d2:	6893      	ldr	r3, [r2, #8]
    39d4:	4219      	tst	r1, r3
    39d6:	d1fc      	bne.n	39d2 <_tcc_timer_set_period+0x6>
}
    39d8:	4770      	bx	lr

000039da <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
	return hri_tcc_read_PER_reg(device->hw);
    39da:	68c2      	ldr	r2, [r0, #12]
    39dc:	2180      	movs	r1, #128	; 0x80
    39de:	6893      	ldr	r3, [r2, #8]
    39e0:	4219      	tst	r1, r3
    39e2:	d1fc      	bne.n	39de <_tcc_timer_get_period+0x4>
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	return ((Tcc *)hw)->PER.reg;
    39e4:	6c10      	ldr	r0, [r2, #64]	; 0x40
}
    39e6:	4770      	bx	lr

000039e8 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    39e8:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    39ea:	2103      	movs	r1, #3
    39ec:	6893      	ldr	r3, [r2, #8]
    39ee:	4219      	tst	r1, r3
    39f0:	d1fc      	bne.n	39ec <_tcc_timer_is_started+0x4>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    39f2:	6810      	ldr	r0, [r2, #0]
	return (bool)tmp;
    39f4:	0780      	lsls	r0, r0, #30
    39f6:	0fc0      	lsrs	r0, r0, #31
}
    39f8:	4770      	bx	lr
	...

000039fc <_tcc_timer_init>:
{
    39fc:	b510      	push	{r4, lr}
static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
		if (_cfgs[i].hw == hw) {
    39fe:	4b36      	ldr	r3, [pc, #216]	; (3ad8 <_tcc_timer_init+0xdc>)
    3a00:	681b      	ldr	r3, [r3, #0]
    3a02:	4299      	cmp	r1, r3
    3a04:	d002      	beq.n	3a0c <_tcc_timer_init+0x10>
		return ERR_NOT_FOUND;
    3a06:	200a      	movs	r0, #10
    3a08:	4240      	negs	r0, r0
}
    3a0a:	bd10      	pop	{r4, pc}
	device->hw = hw;
    3a0c:	60c1      	str	r1, [r0, #12]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    3a0e:	688b      	ldr	r3, [r1, #8]
	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    3a10:	07db      	lsls	r3, r3, #31
    3a12:	d418      	bmi.n	3a46 <_tcc_timer_init+0x4a>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3a14:	2203      	movs	r2, #3
    3a16:	688b      	ldr	r3, [r1, #8]
    3a18:	421a      	tst	r2, r3
    3a1a:	d1fc      	bne.n	3a16 <_tcc_timer_init+0x1a>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    3a1c:	680b      	ldr	r3, [r1, #0]
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    3a1e:	079b      	lsls	r3, r3, #30
    3a20:	d50b      	bpl.n	3a3a <_tcc_timer_init+0x3e>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    3a22:	680b      	ldr	r3, [r1, #0]
    3a24:	2202      	movs	r2, #2
    3a26:	4393      	bics	r3, r2
    3a28:	600b      	str	r3, [r1, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3a2a:	3201      	adds	r2, #1
    3a2c:	688b      	ldr	r3, [r1, #8]
    3a2e:	421a      	tst	r2, r3
    3a30:	d1fc      	bne.n	3a2c <_tcc_timer_init+0x30>
    3a32:	2202      	movs	r2, #2
    3a34:	688b      	ldr	r3, [r1, #8]
    3a36:	421a      	tst	r2, r3
    3a38:	d1fc      	bne.n	3a34 <_tcc_timer_init+0x38>
	((Tcc *)hw)->CTRLA.reg = data;
    3a3a:	2301      	movs	r3, #1
    3a3c:	600b      	str	r3, [r1, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3a3e:	2203      	movs	r2, #3
    3a40:	688b      	ldr	r3, [r1, #8]
    3a42:	421a      	tst	r2, r3
    3a44:	d1fc      	bne.n	3a40 <_tcc_timer_init+0x44>
    3a46:	2201      	movs	r2, #1
    3a48:	688b      	ldr	r3, [r1, #8]
    3a4a:	421a      	tst	r2, r3
    3a4c:	d1fc      	bne.n	3a48 <_tcc_timer_init+0x4c>
	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    3a4e:	4b22      	ldr	r3, [pc, #136]	; (3ad8 <_tcc_timer_init+0xdc>)
    3a50:	689b      	ldr	r3, [r3, #8]
	((Tcc *)hw)->CTRLA.reg = data;
    3a52:	600b      	str	r3, [r1, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3a54:	2203      	movs	r2, #3
    3a56:	688b      	ldr	r3, [r1, #8]
    3a58:	421a      	tst	r2, r3
    3a5a:	d1fc      	bne.n	3a56 <_tcc_timer_init+0x5a>
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    3a5c:	4b1e      	ldr	r3, [pc, #120]	; (3ad8 <_tcc_timer_init+0xdc>)
    3a5e:	7b1a      	ldrb	r2, [r3, #12]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    3a60:	714a      	strb	r2, [r1, #5]
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    3a62:	7b5a      	ldrb	r2, [r3, #13]
	((Tcc *)hw)->DBGCTRL.reg = data;
    3a64:	778a      	strb	r2, [r1, #30]
	((Tcc *)hw)->EVCTRL.reg = data;
    3a66:	691a      	ldr	r2, [r3, #16]
    3a68:	620a      	str	r2, [r1, #32]
	hri_tcc_write_PER_reg(hw, cfg->per);
    3a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    3a6c:	640b      	str	r3, [r1, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3a6e:	2280      	movs	r2, #128	; 0x80
    3a70:	688b      	ldr	r3, [r1, #8]
    3a72:	421a      	tst	r2, r3
    3a74:	d1fc      	bne.n	3a70 <_tcc_timer_init+0x74>
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    3a76:	2301      	movs	r3, #1
    3a78:	628b      	str	r3, [r1, #40]	; 0x28
	if (hw == TCC0) {
    3a7a:	4b18      	ldr	r3, [pc, #96]	; (3adc <_tcc_timer_init+0xe0>)
    3a7c:	4299      	cmp	r1, r3
    3a7e:	d025      	beq.n	3acc <_tcc_timer_init+0xd0>
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    3a80:	4b15      	ldr	r3, [pc, #84]	; (3ad8 <_tcc_timer_init+0xdc>)
    3a82:	791b      	ldrb	r3, [r3, #4]
    3a84:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    3a86:	2b00      	cmp	r3, #0
    3a88:	db23      	blt.n	3ad2 <_tcc_timer_init+0xd6>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a8a:	221f      	movs	r2, #31
    3a8c:	401a      	ands	r2, r3
    3a8e:	2301      	movs	r3, #1
    3a90:	4093      	lsls	r3, r2
    3a92:	2280      	movs	r2, #128	; 0x80
    3a94:	4912      	ldr	r1, [pc, #72]	; (3ae0 <_tcc_timer_init+0xe4>)
    3a96:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    3a98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a9c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    3aa0:	4b0d      	ldr	r3, [pc, #52]	; (3ad8 <_tcc_timer_init+0xdc>)
    3aa2:	2104      	movs	r1, #4
    3aa4:	5659      	ldrsb	r1, [r3, r1]
	return ERR_NONE;
    3aa6:	2000      	movs	r0, #0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3aa8:	2900      	cmp	r1, #0
    3aaa:	dbae      	blt.n	3a0a <_tcc_timer_init+0xe>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3aac:	3a61      	subs	r2, #97	; 0x61
    3aae:	4011      	ands	r1, r2
    3ab0:	2301      	movs	r3, #1
    3ab2:	001c      	movs	r4, r3
    3ab4:	408c      	lsls	r4, r1
    3ab6:	490a      	ldr	r1, [pc, #40]	; (3ae0 <_tcc_timer_init+0xe4>)
    3ab8:	3081      	adds	r0, #129	; 0x81
    3aba:	30ff      	adds	r0, #255	; 0xff
    3abc:	500c      	str	r4, [r1, r0]
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    3abe:	4806      	ldr	r0, [pc, #24]	; (3ad8 <_tcc_timer_init+0xdc>)
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ac0:	7900      	ldrb	r0, [r0, #4]
    3ac2:	4002      	ands	r2, r0
    3ac4:	4093      	lsls	r3, r2
    3ac6:	600b      	str	r3, [r1, #0]
	return ERR_NONE;
    3ac8:	2000      	movs	r0, #0
    3aca:	e79e      	b.n	3a0a <_tcc_timer_init+0xe>
		_tcc0_dev = (struct _timer_device *)dev;
    3acc:	4b05      	ldr	r3, [pc, #20]	; (3ae4 <_tcc_timer_init+0xe8>)
    3ace:	6018      	str	r0, [r3, #0]
    3ad0:	e7d6      	b.n	3a80 <_tcc_timer_init+0x84>
	return ERR_NONE;
    3ad2:	2000      	movs	r0, #0
    3ad4:	e799      	b.n	3a0a <_tcc_timer_init+0xe>
    3ad6:	46c0      	nop			; (mov r8, r8)
    3ad8:	20000024 	.word	0x20000024
    3adc:	42002000 	.word	0x42002000
    3ae0:	e000e100 	.word	0xe000e100
    3ae4:	20000870 	.word	0x20000870

00003ae8 <_tcc_timer_set_irq>:
{
    3ae8:	b510      	push	{r4, lr}
		if (_cfgs[i].hw == hw) {
    3aea:	68c2      	ldr	r2, [r0, #12]
    3aec:	4b04      	ldr	r3, [pc, #16]	; (3b00 <_tcc_timer_set_irq+0x18>)
    3aee:	681b      	ldr	r3, [r3, #0]
    3af0:	429a      	cmp	r2, r3
    3af2:	d000      	beq.n	3af6 <_tcc_timer_set_irq+0xe>
}
    3af4:	bd10      	pop	{r4, pc}
		_irq_set((IRQn_Type)cfg->irq);
    3af6:	4b02      	ldr	r3, [pc, #8]	; (3b00 <_tcc_timer_set_irq+0x18>)
    3af8:	7918      	ldrb	r0, [r3, #4]
    3afa:	4b02      	ldr	r3, [pc, #8]	; (3b04 <_tcc_timer_set_irq+0x1c>)
    3afc:	4798      	blx	r3
}
    3afe:	e7f9      	b.n	3af4 <_tcc_timer_set_irq+0xc>
    3b00:	20000024 	.word	0x20000024
    3b04:	00004045 	.word	0x00004045

00003b08 <_tcc_timer_deinit>:
	void *const     hw  = device->hw;
    3b08:	68c3      	ldr	r3, [r0, #12]
		if (_cfgs[i].hw == hw) {
    3b0a:	4a12      	ldr	r2, [pc, #72]	; (3b54 <_tcc_timer_deinit+0x4c>)
    3b0c:	6812      	ldr	r2, [r2, #0]
    3b0e:	4293      	cmp	r3, r2
    3b10:	d000      	beq.n	3b14 <_tcc_timer_deinit+0xc>
}
    3b12:	4770      	bx	lr
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    3b14:	4a0f      	ldr	r2, [pc, #60]	; (3b54 <_tcc_timer_deinit+0x4c>)
    3b16:	7912      	ldrb	r2, [r2, #4]
    3b18:	b252      	sxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
    3b1a:	2a00      	cmp	r2, #0
    3b1c:	db0a      	blt.n	3b34 <_tcc_timer_deinit+0x2c>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b1e:	211f      	movs	r1, #31
    3b20:	4011      	ands	r1, r2
    3b22:	2201      	movs	r2, #1
    3b24:	408a      	lsls	r2, r1
    3b26:	2180      	movs	r1, #128	; 0x80
    3b28:	480b      	ldr	r0, [pc, #44]	; (3b58 <_tcc_timer_deinit+0x50>)
    3b2a:	5042      	str	r2, [r0, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    3b2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b30:	f3bf 8f6f 	isb	sy
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    3b34:	681a      	ldr	r2, [r3, #0]
    3b36:	2102      	movs	r1, #2
    3b38:	438a      	bics	r2, r1
    3b3a:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3b3c:	3101      	adds	r1, #1
    3b3e:	689a      	ldr	r2, [r3, #8]
    3b40:	4211      	tst	r1, r2
    3b42:	d1fc      	bne.n	3b3e <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    3b44:	681a      	ldr	r2, [r3, #0]
    3b46:	2101      	movs	r1, #1
    3b48:	430a      	orrs	r2, r1
    3b4a:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3b4c:	689a      	ldr	r2, [r3, #8]
    3b4e:	4211      	tst	r1, r2
    3b50:	d1fc      	bne.n	3b4c <_tcc_timer_deinit+0x44>
    3b52:	e7de      	b.n	3b12 <_tcc_timer_deinit+0xa>
    3b54:	20000024 	.word	0x20000024
    3b58:	e000e100 	.word	0xe000e100

00003b5c <_tcc_get_timer>:
	return &_tcc_timer_functions;
    3b5c:	4801      	ldr	r0, [pc, #4]	; (3b64 <_tcc_get_timer+0x8>)
}
    3b5e:	3028      	adds	r0, #40	; 0x28
    3b60:	4770      	bx	lr
    3b62:	46c0      	nop			; (mov r8, r8)
    3b64:	20000024 	.word	0x20000024

00003b68 <TCC0_Handler>:
{
    3b68:	b510      	push	{r4, lr}
	tcc_interrupt_handler(_tcc0_dev);
    3b6a:	4b06      	ldr	r3, [pc, #24]	; (3b84 <TCC0_Handler+0x1c>)
    3b6c:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    3b6e:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    3b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    3b72:	07d2      	lsls	r2, r2, #31
    3b74:	d400      	bmi.n	3b78 <TCC0_Handler+0x10>
}
    3b76:	bd10      	pop	{r4, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    3b78:	2201      	movs	r2, #1
    3b7a:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    3b7c:	6803      	ldr	r3, [r0, #0]
    3b7e:	4798      	blx	r3
}
    3b80:	e7f9      	b.n	3b76 <TCC0_Handler+0xe>
    3b82:	46c0      	nop			; (mov r8, r8)
    3b84:	20000870 	.word	0x20000870

00003b88 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    3b88:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    3b8a:	8813      	ldrh	r3, [r2, #0]
    3b8c:	2102      	movs	r1, #2
    3b8e:	430b      	orrs	r3, r1
    3b90:	8013      	strh	r3, [r2, #0]
}
    3b92:	4770      	bx	lr

00003b94 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    3b94:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3b96:	8813      	ldrh	r3, [r2, #0]
    3b98:	2102      	movs	r1, #2
    3b9a:	438b      	bics	r3, r1
    3b9c:	8013      	strh	r3, [r2, #0]
}
    3b9e:	4770      	bx	lr

00003ba0 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    3ba0:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3ba2:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    3ba4:	071b      	lsls	r3, r3, #28

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3ba6:	0f9b      	lsrs	r3, r3, #30
    3ba8:	2b02      	cmp	r3, #2
    3baa:	d00b      	beq.n	3bc4 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3bac:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    3bae:	071b      	lsls	r3, r3, #28
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3bb0:	0f9b      	lsrs	r3, r3, #30
    3bb2:	d009      	beq.n	3bc8 <_tc_timer_set_period+0x28>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3bb4:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    3bb6:	071b      	lsls	r3, r3, #28
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3bb8:	0f9b      	lsrs	r3, r3, #30
    3bba:	2b01      	cmp	r3, #1
    3bbc:	d106      	bne.n	3bcc <_tc_timer_set_period+0x2c>
		hri_tccount8_write_PER_reg(hw, (hri_tccount8_per_reg_t)clock_cycles);
    3bbe:	b2c9      	uxtb	r1, r1
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    3bc0:	7511      	strb	r1, [r2, #20]
	}
}
    3bc2:	e003      	b.n	3bcc <_tc_timer_set_period+0x2c>
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3bc4:	6191      	str	r1, [r2, #24]
    3bc6:	e001      	b.n	3bcc <_tc_timer_set_period+0x2c>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)clock_cycles);
    3bc8:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3bca:	8311      	strh	r1, [r2, #24]
}
    3bcc:	4770      	bx	lr

00003bce <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    3bce:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3bd0:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    3bd2:	071b      	lsls	r3, r3, #28

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3bd4:	0f9b      	lsrs	r3, r3, #30
    3bd6:	2b02      	cmp	r3, #2
    3bd8:	d00c      	beq.n	3bf4 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3bda:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    3bdc:	071b      	lsls	r3, r3, #28
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3bde:	0f9b      	lsrs	r3, r3, #30
    3be0:	d00a      	beq.n	3bf8 <_tc_timer_get_period+0x2a>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3be2:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    3be4:	071b      	lsls	r3, r3, #28
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3be6:	0f9b      	lsrs	r3, r3, #30
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    3be8:	2000      	movs	r0, #0
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3bea:	2b01      	cmp	r3, #1
    3bec:	d106      	bne.n	3bfc <_tc_timer_get_period+0x2e>
	return ((Tc *)hw)->COUNT8.PER.reg;
    3bee:	7d10      	ldrb	r0, [r2, #20]
    3bf0:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    3bf2:	e003      	b.n	3bfc <_tc_timer_get_period+0x2e>
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    3bf4:	6990      	ldr	r0, [r2, #24]
		return hri_tccount32_read_CC_reg(hw, 0);
    3bf6:	e001      	b.n	3bfc <_tc_timer_get_period+0x2e>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    3bf8:	8b10      	ldrh	r0, [r2, #24]
    3bfa:	b280      	uxth	r0, r0
}
    3bfc:	4770      	bx	lr

00003bfe <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    3bfe:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3c00:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    3c02:	0780      	lsls	r0, r0, #30
    3c04:	0fc0      	lsrs	r0, r0, #31
}
    3c06:	4770      	bx	lr

00003c08 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    3c08:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    3c0a:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    3c0c:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    3c0e:	07d2      	lsls	r2, r2, #31
    3c10:	d400      	bmi.n	3c14 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    3c12:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    3c14:	2201      	movs	r2, #1
    3c16:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    3c18:	6803      	ldr	r3, [r0, #0]
    3c1a:	4798      	blx	r3
}
    3c1c:	e7f9      	b.n	3c12 <tc_interrupt_handler+0xa>
	...

00003c20 <_tc_timer_deinit>:
	void *const hw = device->hw;
    3c20:	68c2      	ldr	r2, [r0, #12]
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    3c22:	4b0d      	ldr	r3, [pc, #52]	; (3c58 <_tc_timer_deinit+0x38>)
    3c24:	18d3      	adds	r3, r2, r3
    3c26:	0a9b      	lsrs	r3, r3, #10
	NVIC_DisableIRQ((IRQn_Type)(TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    3c28:	3312      	adds	r3, #18
  if ((int32_t)(IRQn) >= 0)
    3c2a:	b2d8      	uxtb	r0, r3
    3c2c:	061b      	lsls	r3, r3, #24
    3c2e:	d40a      	bmi.n	3c46 <_tc_timer_deinit+0x26>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c30:	211f      	movs	r1, #31
    3c32:	4001      	ands	r1, r0
    3c34:	2301      	movs	r3, #1
    3c36:	408b      	lsls	r3, r1
    3c38:	2180      	movs	r1, #128	; 0x80
    3c3a:	4808      	ldr	r0, [pc, #32]	; (3c5c <_tc_timer_deinit+0x3c>)
    3c3c:	5043      	str	r3, [r0, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    3c3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c42:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3c46:	8813      	ldrh	r3, [r2, #0]
    3c48:	2102      	movs	r1, #2
    3c4a:	438b      	bics	r3, r1
    3c4c:	8013      	strh	r3, [r2, #0]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    3c4e:	8813      	ldrh	r3, [r2, #0]
    3c50:	3901      	subs	r1, #1
    3c52:	430b      	orrs	r3, r1
    3c54:	8013      	strh	r3, [r2, #0]
}
    3c56:	4770      	bx	lr
    3c58:	bdffd400 	.word	0xbdffd400
    3c5c:	e000e100 	.word	0xe000e100

00003c60 <_tc_timer_set_irq>:
{
    3c60:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    3c62:	68c0      	ldr	r0, [r0, #12]
    3c64:	4b04      	ldr	r3, [pc, #16]	; (3c78 <_tc_timer_set_irq+0x18>)
    3c66:	469c      	mov	ip, r3
    3c68:	4460      	add	r0, ip
    3c6a:	0a80      	lsrs	r0, r0, #10
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    3c6c:	3012      	adds	r0, #18
    3c6e:	b2c0      	uxtb	r0, r0
    3c70:	4b02      	ldr	r3, [pc, #8]	; (3c7c <_tc_timer_set_irq+0x1c>)
    3c72:	4798      	blx	r3
}
    3c74:	bd10      	pop	{r4, pc}
    3c76:	46c0      	nop			; (mov r8, r8)
    3c78:	bdffd400 	.word	0xbdffd400
    3c7c:	00004045 	.word	0x00004045

00003c80 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    3c80:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    3c82:	4b10      	ldr	r3, [pc, #64]	; (3cc4 <get_tc_index+0x44>)
    3c84:	18c3      	adds	r3, r0, r3
    3c86:	0a9b      	lsrs	r3, r3, #10
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    3c88:	3303      	adds	r3, #3
    3c8a:	b2db      	uxtb	r3, r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    3c8c:	4a0e      	ldr	r2, [pc, #56]	; (3cc8 <get_tc_index+0x48>)
    3c8e:	7812      	ldrb	r2, [r2, #0]
    3c90:	429a      	cmp	r2, r3
    3c92:	d014      	beq.n	3cbe <get_tc_index+0x3e>
    3c94:	4a0c      	ldr	r2, [pc, #48]	; (3cc8 <get_tc_index+0x48>)
    3c96:	7d12      	ldrb	r2, [r2, #20]
    3c98:	429a      	cmp	r2, r3
    3c9a:	d00e      	beq.n	3cba <get_tc_index+0x3a>
    3c9c:	2228      	movs	r2, #40	; 0x28
    3c9e:	490a      	ldr	r1, [pc, #40]	; (3cc8 <get_tc_index+0x48>)
    3ca0:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3ca2:	2002      	movs	r0, #2
		if (_tcs[i].number == tc_offset) {
    3ca4:	429a      	cmp	r2, r3
    3ca6:	d00b      	beq.n	3cc0 <get_tc_index+0x40>
			return i;
		}
	}

	ASSERT(false);
    3ca8:	22fe      	movs	r2, #254	; 0xfe
    3caa:	0052      	lsls	r2, r2, #1
    3cac:	4907      	ldr	r1, [pc, #28]	; (3ccc <get_tc_index+0x4c>)
    3cae:	2000      	movs	r0, #0
    3cb0:	4b07      	ldr	r3, [pc, #28]	; (3cd0 <get_tc_index+0x50>)
    3cb2:	4798      	blx	r3
	return -1;
    3cb4:	2001      	movs	r0, #1
    3cb6:	4240      	negs	r0, r0
}
    3cb8:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3cba:	2001      	movs	r0, #1
    3cbc:	e000      	b.n	3cc0 <get_tc_index+0x40>
    3cbe:	2000      	movs	r0, #0
			return i;
    3cc0:	b240      	sxtb	r0, r0
    3cc2:	e7f9      	b.n	3cb8 <get_tc_index+0x38>
    3cc4:	bdffd400 	.word	0xbdffd400
    3cc8:	2000006c 	.word	0x2000006c
    3ccc:	0000474c 	.word	0x0000474c
    3cd0:	00003369 	.word	0x00003369

00003cd4 <_tc_timer_init>:
{
    3cd4:	b570      	push	{r4, r5, r6, lr}
    3cd6:	0006      	movs	r6, r0
    3cd8:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    3cda:	0008      	movs	r0, r1
    3cdc:	4b43      	ldr	r3, [pc, #268]	; (3dec <_tc_timer_init+0x118>)
    3cde:	4798      	blx	r3
    3ce0:	0005      	movs	r5, r0
	device->hw = hw;
    3ce2:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    3ce4:	229c      	movs	r2, #156	; 0x9c
    3ce6:	4942      	ldr	r1, [pc, #264]	; (3df0 <_tc_timer_init+0x11c>)
    3ce8:	2001      	movs	r0, #1
    3cea:	4b42      	ldr	r3, [pc, #264]	; (3df4 <_tc_timer_init+0x120>)
    3cec:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    3cee:	7be3      	ldrb	r3, [r4, #15]
    3cf0:	09db      	lsrs	r3, r3, #7
    3cf2:	d1fc      	bne.n	3cee <_tc_timer_init+0x1a>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3cf4:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    3cf6:	079b      	lsls	r3, r3, #30
    3cf8:	d504      	bpl.n	3d04 <_tc_timer_init+0x30>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3cfa:	2300      	movs	r3, #0
    3cfc:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    3cfe:	7be3      	ldrb	r3, [r4, #15]
    3d00:	09db      	lsrs	r3, r3, #7
    3d02:	d1fc      	bne.n	3cfe <_tc_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3d04:	2301      	movs	r3, #1
    3d06:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    3d08:	7be3      	ldrb	r3, [r4, #15]
    3d0a:	09db      	lsrs	r3, r3, #7
    3d0c:	d1fc      	bne.n	3d08 <_tc_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3d0e:	00ab      	lsls	r3, r5, #2
    3d10:	195b      	adds	r3, r3, r5
    3d12:	009a      	lsls	r2, r3, #2
    3d14:	4b38      	ldr	r3, [pc, #224]	; (3df8 <_tc_timer_init+0x124>)
    3d16:	189b      	adds	r3, r3, r2
    3d18:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3d1a:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3d1c:	7919      	ldrb	r1, [r3, #4]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    3d1e:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3d20:	88db      	ldrh	r3, [r3, #6]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    3d22:	8163      	strh	r3, [r4, #10]
    3d24:	230c      	movs	r3, #12
    3d26:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3d28:	2b08      	cmp	r3, #8
    3d2a:	d031      	beq.n	3d90 <_tc_timer_init+0xbc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3d2c:	2b00      	cmp	r3, #0
    3d2e:	d13c      	bne.n	3daa <_tc_timer_init+0xd6>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    3d30:	4931      	ldr	r1, [pc, #196]	; (3df8 <_tc_timer_init+0x124>)
    3d32:	00ab      	lsls	r3, r5, #2
    3d34:	195a      	adds	r2, r3, r5
    3d36:	0092      	lsls	r2, r2, #2
    3d38:	188a      	adds	r2, r1, r2
    3d3a:	8992      	ldrh	r2, [r2, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3d3c:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    3d3e:	195b      	adds	r3, r3, r5
    3d40:	009b      	lsls	r3, r3, #2
    3d42:	18cb      	adds	r3, r1, r3
    3d44:	8a1b      	ldrh	r3, [r3, #16]
    3d46:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    3d48:	2301      	movs	r3, #1
    3d4a:	7363      	strb	r3, [r4, #13]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    3d4c:	4b2b      	ldr	r3, [pc, #172]	; (3dfc <_tc_timer_init+0x128>)
    3d4e:	429c      	cmp	r4, r3
    3d50:	d03c      	beq.n	3dcc <_tc_timer_init+0xf8>
		_tc3_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC4) {
    3d52:	4b2b      	ldr	r3, [pc, #172]	; (3e00 <_tc_timer_init+0x12c>)
    3d54:	429c      	cmp	r4, r3
    3d56:	d03c      	beq.n	3dd2 <_tc_timer_init+0xfe>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    3d58:	4b2a      	ldr	r3, [pc, #168]	; (3e04 <_tc_timer_init+0x130>)
    3d5a:	429c      	cmp	r4, r3
    3d5c:	d041      	beq.n	3de2 <_tc_timer_init+0x10e>
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    3d5e:	4b2a      	ldr	r3, [pc, #168]	; (3e08 <_tc_timer_init+0x134>)
    3d60:	469c      	mov	ip, r3
    3d62:	4464      	add	r4, ip
    3d64:	0aa4      	lsrs	r4, r4, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    3d66:	3412      	adds	r4, #18
  if ((int32_t)(IRQn) >= 0)
    3d68:	b2e3      	uxtb	r3, r4
    3d6a:	0622      	lsls	r2, r4, #24
    3d6c:	d40e      	bmi.n	3d8c <_tc_timer_init+0xb8>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d6e:	221f      	movs	r2, #31
    3d70:	401a      	ands	r2, r3
    3d72:	2301      	movs	r3, #1
    3d74:	4093      	lsls	r3, r2
    3d76:	4a25      	ldr	r2, [pc, #148]	; (3e0c <_tc_timer_init+0x138>)
    3d78:	2180      	movs	r1, #128	; 0x80
    3d7a:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    3d7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d80:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d84:	3101      	adds	r1, #1
    3d86:	31ff      	adds	r1, #255	; 0xff
    3d88:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d8a:	6013      	str	r3, [r2, #0]
}
    3d8c:	2000      	movs	r0, #0
    3d8e:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3d90:	4919      	ldr	r1, [pc, #100]	; (3df8 <_tc_timer_init+0x124>)
    3d92:	00ab      	lsls	r3, r5, #2
    3d94:	195a      	adds	r2, r3, r5
    3d96:	0092      	lsls	r2, r2, #2
    3d98:	188a      	adds	r2, r1, r2
    3d9a:	68d2      	ldr	r2, [r2, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3d9c:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    3d9e:	195b      	adds	r3, r3, r5
    3da0:	009b      	lsls	r3, r3, #2
    3da2:	18cb      	adds	r3, r1, r3
    3da4:	691b      	ldr	r3, [r3, #16]
    3da6:	61e3      	str	r3, [r4, #28]
    3da8:	e7ce      	b.n	3d48 <_tc_timer_init+0x74>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    3daa:	2b04      	cmp	r3, #4
    3dac:	d1cc      	bne.n	3d48 <_tc_timer_init+0x74>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    3dae:	4912      	ldr	r1, [pc, #72]	; (3df8 <_tc_timer_init+0x124>)
    3db0:	00ab      	lsls	r3, r5, #2
    3db2:	195a      	adds	r2, r3, r5
    3db4:	0092      	lsls	r2, r2, #2
    3db6:	188a      	adds	r2, r1, r2
    3db8:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    3dba:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    3dbc:	7c12      	ldrb	r2, [r2, #16]
    3dbe:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    3dc0:	195b      	adds	r3, r3, r5
    3dc2:	009b      	lsls	r3, r3, #2
    3dc4:	18cb      	adds	r3, r1, r3
    3dc6:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    3dc8:	7523      	strb	r3, [r4, #20]
    3dca:	e7bd      	b.n	3d48 <_tc_timer_init+0x74>
		_tc3_dev = (struct _pwm_device *)dev;
    3dcc:	4b10      	ldr	r3, [pc, #64]	; (3e10 <_tc_timer_init+0x13c>)
    3dce:	601e      	str	r6, [r3, #0]
    3dd0:	e7c5      	b.n	3d5e <_tc_timer_init+0x8a>
		_tc4_dev = (struct _timer_device *)dev;
    3dd2:	4b0f      	ldr	r3, [pc, #60]	; (3e10 <_tc_timer_init+0x13c>)
    3dd4:	605e      	str	r6, [r3, #4]
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    3dd6:	4b0c      	ldr	r3, [pc, #48]	; (3e08 <_tc_timer_init+0x134>)
    3dd8:	18e2      	adds	r2, r4, r3
    3dda:	0a92      	lsrs	r2, r2, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    3ddc:	3212      	adds	r2, #18
    3dde:	b2d3      	uxtb	r3, r2
    3de0:	e7c5      	b.n	3d6e <_tc_timer_init+0x9a>
		_tc5_dev = (struct _timer_device *)dev;
    3de2:	4b0b      	ldr	r3, [pc, #44]	; (3e10 <_tc_timer_init+0x13c>)
    3de4:	609e      	str	r6, [r3, #8]
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    3de6:	2314      	movs	r3, #20
    3de8:	e7c1      	b.n	3d6e <_tc_timer_init+0x9a>
    3dea:	46c0      	nop			; (mov r8, r8)
    3dec:	00003c81 	.word	0x00003c81
    3df0:	0000474c 	.word	0x0000474c
    3df4:	00003369 	.word	0x00003369
    3df8:	2000006c 	.word	0x2000006c
    3dfc:	42002c00 	.word	0x42002c00
    3e00:	42003000 	.word	0x42003000
    3e04:	42003400 	.word	0x42003400
    3e08:	bdffd400 	.word	0xbdffd400
    3e0c:	e000e100 	.word	0xe000e100
    3e10:	20000874 	.word	0x20000874

00003e14 <_pwm_init>:
{
    3e14:	b570      	push	{r4, r5, r6, lr}
    3e16:	0005      	movs	r5, r0
    3e18:	000c      	movs	r4, r1
	int8_t i   = get_tc_index(hw);
    3e1a:	0008      	movs	r0, r1
    3e1c:	4b38      	ldr	r3, [pc, #224]	; (3f00 <_pwm_init+0xec>)
    3e1e:	4798      	blx	r3
	device->hw = hw;
    3e20:	612c      	str	r4, [r5, #16]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    3e22:	7be3      	ldrb	r3, [r4, #15]
    3e24:	09db      	lsrs	r3, r3, #7
    3e26:	d1fc      	bne.n	3e22 <_pwm_init+0xe>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3e28:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    3e2a:	079b      	lsls	r3, r3, #30
    3e2c:	d504      	bpl.n	3e38 <_pwm_init+0x24>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3e2e:	2300      	movs	r3, #0
    3e30:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    3e32:	7be3      	ldrb	r3, [r4, #15]
    3e34:	09db      	lsrs	r3, r3, #7
    3e36:	d1fc      	bne.n	3e32 <_pwm_init+0x1e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3e38:	2301      	movs	r3, #1
    3e3a:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    3e3c:	7be3      	ldrb	r3, [r4, #15]
    3e3e:	09db      	lsrs	r3, r3, #7
    3e40:	d1fc      	bne.n	3e3c <_pwm_init+0x28>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3e42:	0083      	lsls	r3, r0, #2
    3e44:	181b      	adds	r3, r3, r0
    3e46:	009a      	lsls	r2, r3, #2
    3e48:	4b2e      	ldr	r3, [pc, #184]	; (3f04 <_pwm_init+0xf0>)
    3e4a:	189b      	adds	r3, r3, r2
    3e4c:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3e4e:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3e50:	7919      	ldrb	r1, [r3, #4]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    3e52:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3e54:	88db      	ldrh	r3, [r3, #6]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    3e56:	8163      	strh	r3, [r4, #10]
    3e58:	230c      	movs	r3, #12
    3e5a:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3e5c:	2b08      	cmp	r3, #8
    3e5e:	d030      	beq.n	3ec2 <_pwm_init+0xae>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3e60:	2b00      	cmp	r3, #0
    3e62:	d14a      	bne.n	3efa <_pwm_init+0xe6>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    3e64:	4927      	ldr	r1, [pc, #156]	; (3f04 <_pwm_init+0xf0>)
    3e66:	0083      	lsls	r3, r0, #2
    3e68:	181a      	adds	r2, r3, r0
    3e6a:	0092      	lsls	r2, r2, #2
    3e6c:	188a      	adds	r2, r1, r2
    3e6e:	8992      	ldrh	r2, [r2, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3e70:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    3e72:	1818      	adds	r0, r3, r0
    3e74:	0080      	lsls	r0, r0, #2
    3e76:	1808      	adds	r0, r1, r0
    3e78:	8a03      	ldrh	r3, [r0, #16]
    3e7a:	8363      	strh	r3, [r4, #26]
	if (hw == TC3) {
    3e7c:	4b22      	ldr	r3, [pc, #136]	; (3f08 <_pwm_init+0xf4>)
    3e7e:	429c      	cmp	r4, r3
    3e80:	d02c      	beq.n	3edc <_pwm_init+0xc8>
	if (hw == TC4) {
    3e82:	4b22      	ldr	r3, [pc, #136]	; (3f0c <_pwm_init+0xf8>)
    3e84:	429c      	cmp	r4, r3
    3e86:	d02c      	beq.n	3ee2 <_pwm_init+0xce>
	if (hw == TC5) {
    3e88:	4b21      	ldr	r3, [pc, #132]	; (3f10 <_pwm_init+0xfc>)
    3e8a:	429c      	cmp	r4, r3
    3e8c:	d031      	beq.n	3ef2 <_pwm_init+0xde>
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    3e8e:	4b21      	ldr	r3, [pc, #132]	; (3f14 <_pwm_init+0x100>)
    3e90:	469c      	mov	ip, r3
    3e92:	4464      	add	r4, ip
    3e94:	0aa4      	lsrs	r4, r4, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    3e96:	3412      	adds	r4, #18
  if ((int32_t)(IRQn) >= 0)
    3e98:	b2e3      	uxtb	r3, r4
	return ERR_NONE;
    3e9a:	2000      	movs	r0, #0
    3e9c:	0622      	lsls	r2, r4, #24
    3e9e:	d40f      	bmi.n	3ec0 <_pwm_init+0xac>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ea0:	221f      	movs	r2, #31
    3ea2:	401a      	ands	r2, r3
    3ea4:	2301      	movs	r3, #1
    3ea6:	4093      	lsls	r3, r2
    3ea8:	4a1b      	ldr	r2, [pc, #108]	; (3f18 <_pwm_init+0x104>)
    3eaa:	2180      	movs	r1, #128	; 0x80
    3eac:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    3eae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3eb2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3eb6:	3101      	adds	r1, #1
    3eb8:	31ff      	adds	r1, #255	; 0xff
    3eba:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ebc:	6013      	str	r3, [r2, #0]
    3ebe:	2000      	movs	r0, #0
}
    3ec0:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3ec2:	4910      	ldr	r1, [pc, #64]	; (3f04 <_pwm_init+0xf0>)
    3ec4:	0083      	lsls	r3, r0, #2
    3ec6:	181a      	adds	r2, r3, r0
    3ec8:	0092      	lsls	r2, r2, #2
    3eca:	188a      	adds	r2, r1, r2
    3ecc:	68d2      	ldr	r2, [r2, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3ece:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    3ed0:	1818      	adds	r0, r3, r0
    3ed2:	0080      	lsls	r0, r0, #2
    3ed4:	1808      	adds	r0, r1, r0
    3ed6:	6903      	ldr	r3, [r0, #16]
    3ed8:	61e3      	str	r3, [r4, #28]
    3eda:	e7cf      	b.n	3e7c <_pwm_init+0x68>
		_tc3_dev = (struct _pwm_device *)dev;
    3edc:	4b0f      	ldr	r3, [pc, #60]	; (3f1c <_pwm_init+0x108>)
    3ede:	601d      	str	r5, [r3, #0]
    3ee0:	e7d5      	b.n	3e8e <_pwm_init+0x7a>
		_tc4_dev = (struct _timer_device *)dev;
    3ee2:	4b0e      	ldr	r3, [pc, #56]	; (3f1c <_pwm_init+0x108>)
    3ee4:	605d      	str	r5, [r3, #4]
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    3ee6:	4b0b      	ldr	r3, [pc, #44]	; (3f14 <_pwm_init+0x100>)
    3ee8:	18e2      	adds	r2, r4, r3
    3eea:	0a92      	lsrs	r2, r2, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    3eec:	3212      	adds	r2, #18
    3eee:	b2d3      	uxtb	r3, r2
    3ef0:	e7d6      	b.n	3ea0 <_pwm_init+0x8c>
		_tc5_dev = (struct _timer_device *)dev;
    3ef2:	4b0a      	ldr	r3, [pc, #40]	; (3f1c <_pwm_init+0x108>)
    3ef4:	609d      	str	r5, [r3, #8]
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    3ef6:	2314      	movs	r3, #20
    3ef8:	e7d2      	b.n	3ea0 <_pwm_init+0x8c>
		return ERR_INVALID_DATA;
    3efa:	2001      	movs	r0, #1
    3efc:	4240      	negs	r0, r0
    3efe:	e7df      	b.n	3ec0 <_pwm_init+0xac>
    3f00:	00003c81 	.word	0x00003c81
    3f04:	2000006c 	.word	0x2000006c
    3f08:	42002c00 	.word	0x42002c00
    3f0c:	42003000 	.word	0x42003000
    3f10:	42003400 	.word	0x42003400
    3f14:	bdffd400 	.word	0xbdffd400
    3f18:	e000e100 	.word	0xe000e100
    3f1c:	20000874 	.word	0x20000874

00003f20 <_pwm_enable>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    3f20:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    3f22:	8813      	ldrh	r3, [r2, #0]
    3f24:	2102      	movs	r1, #2
    3f26:	430b      	orrs	r3, r1
    3f28:	8013      	strh	r3, [r2, #0]
}
    3f2a:	4770      	bx	lr

00003f2c <_pwm_disable>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    3f2c:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3f2e:	8813      	ldrh	r3, [r2, #0]
    3f30:	2102      	movs	r1, #2
    3f32:	438b      	bics	r3, r1
    3f34:	8013      	strh	r3, [r2, #0]
}
    3f36:	4770      	bx	lr

00003f38 <_pwm_set_param>:
{
    3f38:	b570      	push	{r4, r5, r6, lr}
    3f3a:	0006      	movs	r6, r0
    3f3c:	000d      	movs	r5, r1
    3f3e:	0014      	movs	r4, r2
	int8_t      i  = get_tc_index(device->hw);
    3f40:	6900      	ldr	r0, [r0, #16]
    3f42:	4b0b      	ldr	r3, [pc, #44]	; (3f70 <_pwm_set_param+0x38>)
    3f44:	4798      	blx	r3
	void *const hw = device->hw;
    3f46:	6936      	ldr	r6, [r6, #16]
	_tcs[i].cc0    = period;
    3f48:	490a      	ldr	r1, [pc, #40]	; (3f74 <_pwm_set_param+0x3c>)
    3f4a:	0083      	lsls	r3, r0, #2
    3f4c:	181a      	adds	r2, r3, r0
    3f4e:	0092      	lsls	r2, r2, #2
    3f50:	188a      	adds	r2, r1, r2
    3f52:	60d5      	str	r5, [r2, #12]
	_tcs[i].cc1    = duty_cycle;
    3f54:	6114      	str	r4, [r2, #16]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3f56:	8852      	ldrh	r2, [r2, #2]
    3f58:	230c      	movs	r3, #12
    3f5a:	4013      	ands	r3, r2
    3f5c:	2b08      	cmp	r3, #8
    3f5e:	d004      	beq.n	3f6a <_pwm_set_param+0x32>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    3f60:	b2ad      	uxth	r5, r5
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3f62:	8335      	strh	r5, [r6, #24]
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    3f64:	b2a4      	uxth	r4, r4
    3f66:	8374      	strh	r4, [r6, #26]
}
    3f68:	bd70      	pop	{r4, r5, r6, pc}
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3f6a:	61b5      	str	r5, [r6, #24]
    3f6c:	61f4      	str	r4, [r6, #28]
    3f6e:	e7fb      	b.n	3f68 <_pwm_set_param+0x30>
    3f70:	00003c81 	.word	0x00003c81
    3f74:	2000006c 	.word	0x2000006c

00003f78 <_pwm_is_enabled>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    3f78:	6903      	ldr	r3, [r0, #16]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3f7a:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    3f7c:	0780      	lsls	r0, r0, #30
    3f7e:	0fc0      	lsrs	r0, r0, #31
}
    3f80:	4770      	bx	lr
	...

00003f84 <_pwm_set_irq_state>:
{
    3f84:	b570      	push	{r4, r5, r6, lr}
    3f86:	0004      	movs	r4, r0
    3f88:	000e      	movs	r6, r1
    3f8a:	0015      	movs	r5, r2
	ASSERT(device);
    3f8c:	1e43      	subs	r3, r0, #1
    3f8e:	4198      	sbcs	r0, r3
    3f90:	b2c0      	uxtb	r0, r0
    3f92:	22bf      	movs	r2, #191	; 0xbf
    3f94:	0052      	lsls	r2, r2, #1
    3f96:	490d      	ldr	r1, [pc, #52]	; (3fcc <_pwm_set_irq_state+0x48>)
    3f98:	4b0d      	ldr	r3, [pc, #52]	; (3fd0 <_pwm_set_irq_state+0x4c>)
    3f9a:	4798      	blx	r3
	if (PWM_DEVICE_PERIOD_CB == type) {
    3f9c:	2e00      	cmp	r6, #0
    3f9e:	d108      	bne.n	3fb2 <_pwm_set_irq_state+0x2e>
		hri_tc_write_INTEN_OVF_bit(device->hw, disable);
    3fa0:	6923      	ldr	r3, [r4, #16]
	if (value == 0x0) {
    3fa2:	2d00      	cmp	r5, #0
    3fa4:	d102      	bne.n	3fac <_pwm_set_irq_state+0x28>
		((Tc *)hw)->COUNT16.INTENCLR.reg = TC_INTENSET_OVF;
    3fa6:	2201      	movs	r2, #1
    3fa8:	731a      	strb	r2, [r3, #12]
    3faa:	e004      	b.n	3fb6 <_pwm_set_irq_state+0x32>
		((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    3fac:	2201      	movs	r2, #1
    3fae:	735a      	strb	r2, [r3, #13]
    3fb0:	e001      	b.n	3fb6 <_pwm_set_irq_state+0x32>
	} else if (PWM_DEVICE_ERROR_CB == type) {
    3fb2:	2e01      	cmp	r6, #1
    3fb4:	d000      	beq.n	3fb8 <_pwm_set_irq_state+0x34>
}
    3fb6:	bd70      	pop	{r4, r5, r6, pc}
		hri_tc_write_INTEN_ERR_bit(device->hw, disable);
    3fb8:	6923      	ldr	r3, [r4, #16]
	if (value == 0x0) {
    3fba:	2d00      	cmp	r5, #0
    3fbc:	d002      	beq.n	3fc4 <_pwm_set_irq_state+0x40>
		((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
    3fbe:	2202      	movs	r2, #2
    3fc0:	735a      	strb	r2, [r3, #13]
}
    3fc2:	e7f8      	b.n	3fb6 <_pwm_set_irq_state+0x32>
		((Tc *)hw)->COUNT16.INTENCLR.reg = TC_INTENSET_ERR;
    3fc4:	2202      	movs	r2, #2
    3fc6:	731a      	strb	r2, [r3, #12]
    3fc8:	e7f5      	b.n	3fb6 <_pwm_set_irq_state+0x32>
    3fca:	46c0      	nop			; (mov r8, r8)
    3fcc:	0000474c 	.word	0x0000474c
    3fd0:	00003369 	.word	0x00003369

00003fd4 <_tc_get_timer>:
	return &_tc_timer_functions;
    3fd4:	4801      	ldr	r0, [pc, #4]	; (3fdc <_tc_get_timer+0x8>)
}
    3fd6:	303c      	adds	r0, #60	; 0x3c
    3fd8:	4770      	bx	lr
    3fda:	46c0      	nop			; (mov r8, r8)
    3fdc:	2000006c 	.word	0x2000006c

00003fe0 <_tc_get_pwm>:
}
    3fe0:	2000      	movs	r0, #0
    3fe2:	4770      	bx	lr

00003fe4 <TC3_Handler>:
{
    3fe4:	b570      	push	{r4, r5, r6, lr}
	tc_pwm_interrupt_handler(_tc3_dev);
    3fe6:	4b0c      	ldr	r3, [pc, #48]	; (4018 <TC3_Handler+0x34>)
    3fe8:	681d      	ldr	r5, [r3, #0]
	void *const hw = device->hw;
    3fea:	692c      	ldr	r4, [r5, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    3fec:	7ba3      	ldrb	r3, [r4, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    3fee:	07db      	lsls	r3, r3, #31
    3ff0:	d506      	bpl.n	4000 <TC3_Handler+0x1c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    3ff2:	2301      	movs	r3, #1
    3ff4:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_period_cb) {
    3ff6:	682b      	ldr	r3, [r5, #0]
    3ff8:	2b00      	cmp	r3, #0
    3ffa:	d001      	beq.n	4000 <TC3_Handler+0x1c>
			device->callback.pwm_period_cb(device);
    3ffc:	0028      	movs	r0, r5
    3ffe:	4798      	blx	r3
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    4000:	7b63      	ldrb	r3, [r4, #13]
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    4002:	079b      	lsls	r3, r3, #30
    4004:	d506      	bpl.n	4014 <TC3_Handler+0x30>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    4006:	2302      	movs	r3, #2
    4008:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_error_cb) {
    400a:	686b      	ldr	r3, [r5, #4]
    400c:	2b00      	cmp	r3, #0
    400e:	d001      	beq.n	4014 <TC3_Handler+0x30>
			device->callback.pwm_error_cb(device);
    4010:	0028      	movs	r0, r5
    4012:	4798      	blx	r3
}
    4014:	bd70      	pop	{r4, r5, r6, pc}
    4016:	46c0      	nop			; (mov r8, r8)
    4018:	20000874 	.word	0x20000874

0000401c <TC4_Handler>:
{
    401c:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    401e:	4b02      	ldr	r3, [pc, #8]	; (4028 <TC4_Handler+0xc>)
    4020:	6858      	ldr	r0, [r3, #4]
    4022:	4b02      	ldr	r3, [pc, #8]	; (402c <TC4_Handler+0x10>)
    4024:	4798      	blx	r3
}
    4026:	bd10      	pop	{r4, pc}
    4028:	20000874 	.word	0x20000874
    402c:	00003c09 	.word	0x00003c09

00004030 <TC5_Handler>:
{
    4030:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc5_dev);
    4032:	4b02      	ldr	r3, [pc, #8]	; (403c <TC5_Handler+0xc>)
    4034:	6898      	ldr	r0, [r3, #8]
    4036:	4b02      	ldr	r3, [pc, #8]	; (4040 <TC5_Handler+0x10>)
    4038:	4798      	blx	r3
}
    403a:	bd10      	pop	{r4, pc}
    403c:	20000874 	.word	0x20000874
    4040:	00003c09 	.word	0x00003c09

00004044 <_irq_set>:
  if ((int32_t)(IRQn) >= 0)
    4044:	b243      	sxtb	r3, r0
    4046:	2b00      	cmp	r3, #0
    4048:	db07      	blt.n	405a <_irq_set+0x16>
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    404a:	231f      	movs	r3, #31
    404c:	4018      	ands	r0, r3
    404e:	3b1e      	subs	r3, #30
    4050:	4083      	lsls	r3, r0
    4052:	2280      	movs	r2, #128	; 0x80
    4054:	0052      	lsls	r2, r2, #1
    4056:	4901      	ldr	r1, [pc, #4]	; (405c <_irq_set+0x18>)
    4058:	508b      	str	r3, [r1, r2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
    405a:	4770      	bx	lr
    405c:	e000e100 	.word	0xe000e100

00004060 <__aeabi_atexit>:
    4060:	000b      	movs	r3, r1
    4062:	b510      	push	{r4, lr}
    4064:	0001      	movs	r1, r0
    4066:	0018      	movs	r0, r3
    4068:	f000 f978 	bl	435c <__cxa_atexit>
    406c:	bd10      	pop	{r4, pc}
    406e:	46c0      	nop			; (mov r8, r8)

00004070 <__udivsi3>:
    4070:	2200      	movs	r2, #0
    4072:	0843      	lsrs	r3, r0, #1
    4074:	428b      	cmp	r3, r1
    4076:	d374      	bcc.n	4162 <__udivsi3+0xf2>
    4078:	0903      	lsrs	r3, r0, #4
    407a:	428b      	cmp	r3, r1
    407c:	d35f      	bcc.n	413e <__udivsi3+0xce>
    407e:	0a03      	lsrs	r3, r0, #8
    4080:	428b      	cmp	r3, r1
    4082:	d344      	bcc.n	410e <__udivsi3+0x9e>
    4084:	0b03      	lsrs	r3, r0, #12
    4086:	428b      	cmp	r3, r1
    4088:	d328      	bcc.n	40dc <__udivsi3+0x6c>
    408a:	0c03      	lsrs	r3, r0, #16
    408c:	428b      	cmp	r3, r1
    408e:	d30d      	bcc.n	40ac <__udivsi3+0x3c>
    4090:	22ff      	movs	r2, #255	; 0xff
    4092:	0209      	lsls	r1, r1, #8
    4094:	ba12      	rev	r2, r2
    4096:	0c03      	lsrs	r3, r0, #16
    4098:	428b      	cmp	r3, r1
    409a:	d302      	bcc.n	40a2 <__udivsi3+0x32>
    409c:	1212      	asrs	r2, r2, #8
    409e:	0209      	lsls	r1, r1, #8
    40a0:	d065      	beq.n	416e <__udivsi3+0xfe>
    40a2:	0b03      	lsrs	r3, r0, #12
    40a4:	428b      	cmp	r3, r1
    40a6:	d319      	bcc.n	40dc <__udivsi3+0x6c>
    40a8:	e000      	b.n	40ac <__udivsi3+0x3c>
    40aa:	0a09      	lsrs	r1, r1, #8
    40ac:	0bc3      	lsrs	r3, r0, #15
    40ae:	428b      	cmp	r3, r1
    40b0:	d301      	bcc.n	40b6 <__udivsi3+0x46>
    40b2:	03cb      	lsls	r3, r1, #15
    40b4:	1ac0      	subs	r0, r0, r3
    40b6:	4152      	adcs	r2, r2
    40b8:	0b83      	lsrs	r3, r0, #14
    40ba:	428b      	cmp	r3, r1
    40bc:	d301      	bcc.n	40c2 <__udivsi3+0x52>
    40be:	038b      	lsls	r3, r1, #14
    40c0:	1ac0      	subs	r0, r0, r3
    40c2:	4152      	adcs	r2, r2
    40c4:	0b43      	lsrs	r3, r0, #13
    40c6:	428b      	cmp	r3, r1
    40c8:	d301      	bcc.n	40ce <__udivsi3+0x5e>
    40ca:	034b      	lsls	r3, r1, #13
    40cc:	1ac0      	subs	r0, r0, r3
    40ce:	4152      	adcs	r2, r2
    40d0:	0b03      	lsrs	r3, r0, #12
    40d2:	428b      	cmp	r3, r1
    40d4:	d301      	bcc.n	40da <__udivsi3+0x6a>
    40d6:	030b      	lsls	r3, r1, #12
    40d8:	1ac0      	subs	r0, r0, r3
    40da:	4152      	adcs	r2, r2
    40dc:	0ac3      	lsrs	r3, r0, #11
    40de:	428b      	cmp	r3, r1
    40e0:	d301      	bcc.n	40e6 <__udivsi3+0x76>
    40e2:	02cb      	lsls	r3, r1, #11
    40e4:	1ac0      	subs	r0, r0, r3
    40e6:	4152      	adcs	r2, r2
    40e8:	0a83      	lsrs	r3, r0, #10
    40ea:	428b      	cmp	r3, r1
    40ec:	d301      	bcc.n	40f2 <__udivsi3+0x82>
    40ee:	028b      	lsls	r3, r1, #10
    40f0:	1ac0      	subs	r0, r0, r3
    40f2:	4152      	adcs	r2, r2
    40f4:	0a43      	lsrs	r3, r0, #9
    40f6:	428b      	cmp	r3, r1
    40f8:	d301      	bcc.n	40fe <__udivsi3+0x8e>
    40fa:	024b      	lsls	r3, r1, #9
    40fc:	1ac0      	subs	r0, r0, r3
    40fe:	4152      	adcs	r2, r2
    4100:	0a03      	lsrs	r3, r0, #8
    4102:	428b      	cmp	r3, r1
    4104:	d301      	bcc.n	410a <__udivsi3+0x9a>
    4106:	020b      	lsls	r3, r1, #8
    4108:	1ac0      	subs	r0, r0, r3
    410a:	4152      	adcs	r2, r2
    410c:	d2cd      	bcs.n	40aa <__udivsi3+0x3a>
    410e:	09c3      	lsrs	r3, r0, #7
    4110:	428b      	cmp	r3, r1
    4112:	d301      	bcc.n	4118 <__udivsi3+0xa8>
    4114:	01cb      	lsls	r3, r1, #7
    4116:	1ac0      	subs	r0, r0, r3
    4118:	4152      	adcs	r2, r2
    411a:	0983      	lsrs	r3, r0, #6
    411c:	428b      	cmp	r3, r1
    411e:	d301      	bcc.n	4124 <__udivsi3+0xb4>
    4120:	018b      	lsls	r3, r1, #6
    4122:	1ac0      	subs	r0, r0, r3
    4124:	4152      	adcs	r2, r2
    4126:	0943      	lsrs	r3, r0, #5
    4128:	428b      	cmp	r3, r1
    412a:	d301      	bcc.n	4130 <__udivsi3+0xc0>
    412c:	014b      	lsls	r3, r1, #5
    412e:	1ac0      	subs	r0, r0, r3
    4130:	4152      	adcs	r2, r2
    4132:	0903      	lsrs	r3, r0, #4
    4134:	428b      	cmp	r3, r1
    4136:	d301      	bcc.n	413c <__udivsi3+0xcc>
    4138:	010b      	lsls	r3, r1, #4
    413a:	1ac0      	subs	r0, r0, r3
    413c:	4152      	adcs	r2, r2
    413e:	08c3      	lsrs	r3, r0, #3
    4140:	428b      	cmp	r3, r1
    4142:	d301      	bcc.n	4148 <__udivsi3+0xd8>
    4144:	00cb      	lsls	r3, r1, #3
    4146:	1ac0      	subs	r0, r0, r3
    4148:	4152      	adcs	r2, r2
    414a:	0883      	lsrs	r3, r0, #2
    414c:	428b      	cmp	r3, r1
    414e:	d301      	bcc.n	4154 <__udivsi3+0xe4>
    4150:	008b      	lsls	r3, r1, #2
    4152:	1ac0      	subs	r0, r0, r3
    4154:	4152      	adcs	r2, r2
    4156:	0843      	lsrs	r3, r0, #1
    4158:	428b      	cmp	r3, r1
    415a:	d301      	bcc.n	4160 <__udivsi3+0xf0>
    415c:	004b      	lsls	r3, r1, #1
    415e:	1ac0      	subs	r0, r0, r3
    4160:	4152      	adcs	r2, r2
    4162:	1a41      	subs	r1, r0, r1
    4164:	d200      	bcs.n	4168 <__udivsi3+0xf8>
    4166:	4601      	mov	r1, r0
    4168:	4152      	adcs	r2, r2
    416a:	4610      	mov	r0, r2
    416c:	4770      	bx	lr
    416e:	e7ff      	b.n	4170 <__udivsi3+0x100>
    4170:	b501      	push	{r0, lr}
    4172:	2000      	movs	r0, #0
    4174:	f000 f8f0 	bl	4358 <__aeabi_idiv0>
    4178:	bd02      	pop	{r1, pc}
    417a:	46c0      	nop			; (mov r8, r8)

0000417c <__aeabi_uidivmod>:
    417c:	2900      	cmp	r1, #0
    417e:	d0f7      	beq.n	4170 <__udivsi3+0x100>
    4180:	e776      	b.n	4070 <__udivsi3>
    4182:	4770      	bx	lr

00004184 <__divsi3>:
    4184:	4603      	mov	r3, r0
    4186:	430b      	orrs	r3, r1
    4188:	d47f      	bmi.n	428a <__divsi3+0x106>
    418a:	2200      	movs	r2, #0
    418c:	0843      	lsrs	r3, r0, #1
    418e:	428b      	cmp	r3, r1
    4190:	d374      	bcc.n	427c <__divsi3+0xf8>
    4192:	0903      	lsrs	r3, r0, #4
    4194:	428b      	cmp	r3, r1
    4196:	d35f      	bcc.n	4258 <__divsi3+0xd4>
    4198:	0a03      	lsrs	r3, r0, #8
    419a:	428b      	cmp	r3, r1
    419c:	d344      	bcc.n	4228 <__divsi3+0xa4>
    419e:	0b03      	lsrs	r3, r0, #12
    41a0:	428b      	cmp	r3, r1
    41a2:	d328      	bcc.n	41f6 <__divsi3+0x72>
    41a4:	0c03      	lsrs	r3, r0, #16
    41a6:	428b      	cmp	r3, r1
    41a8:	d30d      	bcc.n	41c6 <__divsi3+0x42>
    41aa:	22ff      	movs	r2, #255	; 0xff
    41ac:	0209      	lsls	r1, r1, #8
    41ae:	ba12      	rev	r2, r2
    41b0:	0c03      	lsrs	r3, r0, #16
    41b2:	428b      	cmp	r3, r1
    41b4:	d302      	bcc.n	41bc <__divsi3+0x38>
    41b6:	1212      	asrs	r2, r2, #8
    41b8:	0209      	lsls	r1, r1, #8
    41ba:	d065      	beq.n	4288 <__divsi3+0x104>
    41bc:	0b03      	lsrs	r3, r0, #12
    41be:	428b      	cmp	r3, r1
    41c0:	d319      	bcc.n	41f6 <__divsi3+0x72>
    41c2:	e000      	b.n	41c6 <__divsi3+0x42>
    41c4:	0a09      	lsrs	r1, r1, #8
    41c6:	0bc3      	lsrs	r3, r0, #15
    41c8:	428b      	cmp	r3, r1
    41ca:	d301      	bcc.n	41d0 <__divsi3+0x4c>
    41cc:	03cb      	lsls	r3, r1, #15
    41ce:	1ac0      	subs	r0, r0, r3
    41d0:	4152      	adcs	r2, r2
    41d2:	0b83      	lsrs	r3, r0, #14
    41d4:	428b      	cmp	r3, r1
    41d6:	d301      	bcc.n	41dc <__divsi3+0x58>
    41d8:	038b      	lsls	r3, r1, #14
    41da:	1ac0      	subs	r0, r0, r3
    41dc:	4152      	adcs	r2, r2
    41de:	0b43      	lsrs	r3, r0, #13
    41e0:	428b      	cmp	r3, r1
    41e2:	d301      	bcc.n	41e8 <__divsi3+0x64>
    41e4:	034b      	lsls	r3, r1, #13
    41e6:	1ac0      	subs	r0, r0, r3
    41e8:	4152      	adcs	r2, r2
    41ea:	0b03      	lsrs	r3, r0, #12
    41ec:	428b      	cmp	r3, r1
    41ee:	d301      	bcc.n	41f4 <__divsi3+0x70>
    41f0:	030b      	lsls	r3, r1, #12
    41f2:	1ac0      	subs	r0, r0, r3
    41f4:	4152      	adcs	r2, r2
    41f6:	0ac3      	lsrs	r3, r0, #11
    41f8:	428b      	cmp	r3, r1
    41fa:	d301      	bcc.n	4200 <__divsi3+0x7c>
    41fc:	02cb      	lsls	r3, r1, #11
    41fe:	1ac0      	subs	r0, r0, r3
    4200:	4152      	adcs	r2, r2
    4202:	0a83      	lsrs	r3, r0, #10
    4204:	428b      	cmp	r3, r1
    4206:	d301      	bcc.n	420c <__divsi3+0x88>
    4208:	028b      	lsls	r3, r1, #10
    420a:	1ac0      	subs	r0, r0, r3
    420c:	4152      	adcs	r2, r2
    420e:	0a43      	lsrs	r3, r0, #9
    4210:	428b      	cmp	r3, r1
    4212:	d301      	bcc.n	4218 <__divsi3+0x94>
    4214:	024b      	lsls	r3, r1, #9
    4216:	1ac0      	subs	r0, r0, r3
    4218:	4152      	adcs	r2, r2
    421a:	0a03      	lsrs	r3, r0, #8
    421c:	428b      	cmp	r3, r1
    421e:	d301      	bcc.n	4224 <__divsi3+0xa0>
    4220:	020b      	lsls	r3, r1, #8
    4222:	1ac0      	subs	r0, r0, r3
    4224:	4152      	adcs	r2, r2
    4226:	d2cd      	bcs.n	41c4 <__divsi3+0x40>
    4228:	09c3      	lsrs	r3, r0, #7
    422a:	428b      	cmp	r3, r1
    422c:	d301      	bcc.n	4232 <__divsi3+0xae>
    422e:	01cb      	lsls	r3, r1, #7
    4230:	1ac0      	subs	r0, r0, r3
    4232:	4152      	adcs	r2, r2
    4234:	0983      	lsrs	r3, r0, #6
    4236:	428b      	cmp	r3, r1
    4238:	d301      	bcc.n	423e <__divsi3+0xba>
    423a:	018b      	lsls	r3, r1, #6
    423c:	1ac0      	subs	r0, r0, r3
    423e:	4152      	adcs	r2, r2
    4240:	0943      	lsrs	r3, r0, #5
    4242:	428b      	cmp	r3, r1
    4244:	d301      	bcc.n	424a <__divsi3+0xc6>
    4246:	014b      	lsls	r3, r1, #5
    4248:	1ac0      	subs	r0, r0, r3
    424a:	4152      	adcs	r2, r2
    424c:	0903      	lsrs	r3, r0, #4
    424e:	428b      	cmp	r3, r1
    4250:	d301      	bcc.n	4256 <__divsi3+0xd2>
    4252:	010b      	lsls	r3, r1, #4
    4254:	1ac0      	subs	r0, r0, r3
    4256:	4152      	adcs	r2, r2
    4258:	08c3      	lsrs	r3, r0, #3
    425a:	428b      	cmp	r3, r1
    425c:	d301      	bcc.n	4262 <__divsi3+0xde>
    425e:	00cb      	lsls	r3, r1, #3
    4260:	1ac0      	subs	r0, r0, r3
    4262:	4152      	adcs	r2, r2
    4264:	0883      	lsrs	r3, r0, #2
    4266:	428b      	cmp	r3, r1
    4268:	d301      	bcc.n	426e <__divsi3+0xea>
    426a:	008b      	lsls	r3, r1, #2
    426c:	1ac0      	subs	r0, r0, r3
    426e:	4152      	adcs	r2, r2
    4270:	0843      	lsrs	r3, r0, #1
    4272:	428b      	cmp	r3, r1
    4274:	d301      	bcc.n	427a <__divsi3+0xf6>
    4276:	004b      	lsls	r3, r1, #1
    4278:	1ac0      	subs	r0, r0, r3
    427a:	4152      	adcs	r2, r2
    427c:	1a41      	subs	r1, r0, r1
    427e:	d200      	bcs.n	4282 <__divsi3+0xfe>
    4280:	4601      	mov	r1, r0
    4282:	4152      	adcs	r2, r2
    4284:	4610      	mov	r0, r2
    4286:	4770      	bx	lr
    4288:	e05d      	b.n	4346 <__divsi3+0x1c2>
    428a:	0fca      	lsrs	r2, r1, #31
    428c:	d000      	beq.n	4290 <__divsi3+0x10c>
    428e:	4249      	negs	r1, r1
    4290:	1003      	asrs	r3, r0, #32
    4292:	d300      	bcc.n	4296 <__divsi3+0x112>
    4294:	4240      	negs	r0, r0
    4296:	4053      	eors	r3, r2
    4298:	2200      	movs	r2, #0
    429a:	469c      	mov	ip, r3
    429c:	0903      	lsrs	r3, r0, #4
    429e:	428b      	cmp	r3, r1
    42a0:	d32d      	bcc.n	42fe <__divsi3+0x17a>
    42a2:	0a03      	lsrs	r3, r0, #8
    42a4:	428b      	cmp	r3, r1
    42a6:	d312      	bcc.n	42ce <__divsi3+0x14a>
    42a8:	22fc      	movs	r2, #252	; 0xfc
    42aa:	0189      	lsls	r1, r1, #6
    42ac:	ba12      	rev	r2, r2
    42ae:	0a03      	lsrs	r3, r0, #8
    42b0:	428b      	cmp	r3, r1
    42b2:	d30c      	bcc.n	42ce <__divsi3+0x14a>
    42b4:	0189      	lsls	r1, r1, #6
    42b6:	1192      	asrs	r2, r2, #6
    42b8:	428b      	cmp	r3, r1
    42ba:	d308      	bcc.n	42ce <__divsi3+0x14a>
    42bc:	0189      	lsls	r1, r1, #6
    42be:	1192      	asrs	r2, r2, #6
    42c0:	428b      	cmp	r3, r1
    42c2:	d304      	bcc.n	42ce <__divsi3+0x14a>
    42c4:	0189      	lsls	r1, r1, #6
    42c6:	d03a      	beq.n	433e <__divsi3+0x1ba>
    42c8:	1192      	asrs	r2, r2, #6
    42ca:	e000      	b.n	42ce <__divsi3+0x14a>
    42cc:	0989      	lsrs	r1, r1, #6
    42ce:	09c3      	lsrs	r3, r0, #7
    42d0:	428b      	cmp	r3, r1
    42d2:	d301      	bcc.n	42d8 <__divsi3+0x154>
    42d4:	01cb      	lsls	r3, r1, #7
    42d6:	1ac0      	subs	r0, r0, r3
    42d8:	4152      	adcs	r2, r2
    42da:	0983      	lsrs	r3, r0, #6
    42dc:	428b      	cmp	r3, r1
    42de:	d301      	bcc.n	42e4 <__divsi3+0x160>
    42e0:	018b      	lsls	r3, r1, #6
    42e2:	1ac0      	subs	r0, r0, r3
    42e4:	4152      	adcs	r2, r2
    42e6:	0943      	lsrs	r3, r0, #5
    42e8:	428b      	cmp	r3, r1
    42ea:	d301      	bcc.n	42f0 <__divsi3+0x16c>
    42ec:	014b      	lsls	r3, r1, #5
    42ee:	1ac0      	subs	r0, r0, r3
    42f0:	4152      	adcs	r2, r2
    42f2:	0903      	lsrs	r3, r0, #4
    42f4:	428b      	cmp	r3, r1
    42f6:	d301      	bcc.n	42fc <__divsi3+0x178>
    42f8:	010b      	lsls	r3, r1, #4
    42fa:	1ac0      	subs	r0, r0, r3
    42fc:	4152      	adcs	r2, r2
    42fe:	08c3      	lsrs	r3, r0, #3
    4300:	428b      	cmp	r3, r1
    4302:	d301      	bcc.n	4308 <__divsi3+0x184>
    4304:	00cb      	lsls	r3, r1, #3
    4306:	1ac0      	subs	r0, r0, r3
    4308:	4152      	adcs	r2, r2
    430a:	0883      	lsrs	r3, r0, #2
    430c:	428b      	cmp	r3, r1
    430e:	d301      	bcc.n	4314 <__divsi3+0x190>
    4310:	008b      	lsls	r3, r1, #2
    4312:	1ac0      	subs	r0, r0, r3
    4314:	4152      	adcs	r2, r2
    4316:	d2d9      	bcs.n	42cc <__divsi3+0x148>
    4318:	0843      	lsrs	r3, r0, #1
    431a:	428b      	cmp	r3, r1
    431c:	d301      	bcc.n	4322 <__divsi3+0x19e>
    431e:	004b      	lsls	r3, r1, #1
    4320:	1ac0      	subs	r0, r0, r3
    4322:	4152      	adcs	r2, r2
    4324:	1a41      	subs	r1, r0, r1
    4326:	d200      	bcs.n	432a <__divsi3+0x1a6>
    4328:	4601      	mov	r1, r0
    432a:	4663      	mov	r3, ip
    432c:	4152      	adcs	r2, r2
    432e:	105b      	asrs	r3, r3, #1
    4330:	4610      	mov	r0, r2
    4332:	d301      	bcc.n	4338 <__divsi3+0x1b4>
    4334:	4240      	negs	r0, r0
    4336:	2b00      	cmp	r3, #0
    4338:	d500      	bpl.n	433c <__divsi3+0x1b8>
    433a:	4249      	negs	r1, r1
    433c:	4770      	bx	lr
    433e:	4663      	mov	r3, ip
    4340:	105b      	asrs	r3, r3, #1
    4342:	d300      	bcc.n	4346 <__divsi3+0x1c2>
    4344:	4240      	negs	r0, r0
    4346:	b501      	push	{r0, lr}
    4348:	2000      	movs	r0, #0
    434a:	f000 f805 	bl	4358 <__aeabi_idiv0>
    434e:	bd02      	pop	{r1, pc}

00004350 <__aeabi_idivmod>:
    4350:	2900      	cmp	r1, #0
    4352:	d0f8      	beq.n	4346 <__divsi3+0x1c2>
    4354:	e716      	b.n	4184 <__divsi3>
    4356:	4770      	bx	lr

00004358 <__aeabi_idiv0>:
    4358:	4770      	bx	lr
    435a:	46c0      	nop			; (mov r8, r8)

0000435c <__cxa_atexit>:
    435c:	b510      	push	{r4, lr}
    435e:	0013      	movs	r3, r2
    4360:	000a      	movs	r2, r1
    4362:	0001      	movs	r1, r0
    4364:	2002      	movs	r0, #2
    4366:	f000 f867 	bl	4438 <__register_exitproc>
    436a:	bd10      	pop	{r4, pc}

0000436c <__libc_init_array>:
    436c:	b570      	push	{r4, r5, r6, lr}
    436e:	4e0d      	ldr	r6, [pc, #52]	; (43a4 <__libc_init_array+0x38>)
    4370:	4d0d      	ldr	r5, [pc, #52]	; (43a8 <__libc_init_array+0x3c>)
    4372:	2400      	movs	r4, #0
    4374:	1bad      	subs	r5, r5, r6
    4376:	10ad      	asrs	r5, r5, #2
    4378:	d005      	beq.n	4386 <__libc_init_array+0x1a>
    437a:	00a3      	lsls	r3, r4, #2
    437c:	58f3      	ldr	r3, [r6, r3]
    437e:	3401      	adds	r4, #1
    4380:	4798      	blx	r3
    4382:	42a5      	cmp	r5, r4
    4384:	d1f9      	bne.n	437a <__libc_init_array+0xe>
    4386:	f000 f9ed 	bl	4764 <_init>
    438a:	4e08      	ldr	r6, [pc, #32]	; (43ac <__libc_init_array+0x40>)
    438c:	4d08      	ldr	r5, [pc, #32]	; (43b0 <__libc_init_array+0x44>)
    438e:	2400      	movs	r4, #0
    4390:	1bad      	subs	r5, r5, r6
    4392:	10ad      	asrs	r5, r5, #2
    4394:	d005      	beq.n	43a2 <__libc_init_array+0x36>
    4396:	00a3      	lsls	r3, r4, #2
    4398:	58f3      	ldr	r3, [r6, r3]
    439a:	3401      	adds	r4, #1
    439c:	4798      	blx	r3
    439e:	42a5      	cmp	r5, r4
    43a0:	d1f9      	bne.n	4396 <__libc_init_array+0x2a>
    43a2:	bd70      	pop	{r4, r5, r6, pc}
    43a4:	00004770 	.word	0x00004770
    43a8:	00004770 	.word	0x00004770
    43ac:	00004770 	.word	0x00004770
    43b0:	00004784 	.word	0x00004784

000043b4 <memcpy>:
    43b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    43b6:	0005      	movs	r5, r0
    43b8:	2a0f      	cmp	r2, #15
    43ba:	d92f      	bls.n	441c <memcpy+0x68>
    43bc:	000b      	movs	r3, r1
    43be:	4303      	orrs	r3, r0
    43c0:	079b      	lsls	r3, r3, #30
    43c2:	d134      	bne.n	442e <memcpy+0x7a>
    43c4:	0016      	movs	r6, r2
    43c6:	000c      	movs	r4, r1
    43c8:	0003      	movs	r3, r0
    43ca:	3e10      	subs	r6, #16
    43cc:	0935      	lsrs	r5, r6, #4
    43ce:	3501      	adds	r5, #1
    43d0:	012d      	lsls	r5, r5, #4
    43d2:	1945      	adds	r5, r0, r5
    43d4:	6827      	ldr	r7, [r4, #0]
    43d6:	601f      	str	r7, [r3, #0]
    43d8:	6867      	ldr	r7, [r4, #4]
    43da:	605f      	str	r7, [r3, #4]
    43dc:	68a7      	ldr	r7, [r4, #8]
    43de:	609f      	str	r7, [r3, #8]
    43e0:	68e7      	ldr	r7, [r4, #12]
    43e2:	3410      	adds	r4, #16
    43e4:	60df      	str	r7, [r3, #12]
    43e6:	3310      	adds	r3, #16
    43e8:	429d      	cmp	r5, r3
    43ea:	d1f3      	bne.n	43d4 <memcpy+0x20>
    43ec:	230f      	movs	r3, #15
    43ee:	439e      	bics	r6, r3
    43f0:	3610      	adds	r6, #16
    43f2:	1985      	adds	r5, r0, r6
    43f4:	1989      	adds	r1, r1, r6
    43f6:	4013      	ands	r3, r2
    43f8:	2b03      	cmp	r3, #3
    43fa:	d91a      	bls.n	4432 <memcpy+0x7e>
    43fc:	1f1e      	subs	r6, r3, #4
    43fe:	2300      	movs	r3, #0
    4400:	08b4      	lsrs	r4, r6, #2
    4402:	3401      	adds	r4, #1
    4404:	00a4      	lsls	r4, r4, #2
    4406:	58cf      	ldr	r7, [r1, r3]
    4408:	50ef      	str	r7, [r5, r3]
    440a:	3304      	adds	r3, #4
    440c:	42a3      	cmp	r3, r4
    440e:	d1fa      	bne.n	4406 <memcpy+0x52>
    4410:	2403      	movs	r4, #3
    4412:	43a6      	bics	r6, r4
    4414:	1d33      	adds	r3, r6, #4
    4416:	4022      	ands	r2, r4
    4418:	18c9      	adds	r1, r1, r3
    441a:	18ed      	adds	r5, r5, r3
    441c:	2a00      	cmp	r2, #0
    441e:	d005      	beq.n	442c <memcpy+0x78>
    4420:	2300      	movs	r3, #0
    4422:	5ccc      	ldrb	r4, [r1, r3]
    4424:	54ec      	strb	r4, [r5, r3]
    4426:	3301      	adds	r3, #1
    4428:	4293      	cmp	r3, r2
    442a:	d1fa      	bne.n	4422 <memcpy+0x6e>
    442c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    442e:	0005      	movs	r5, r0
    4430:	e7f6      	b.n	4420 <memcpy+0x6c>
    4432:	001a      	movs	r2, r3
    4434:	e7f2      	b.n	441c <memcpy+0x68>
    4436:	46c0      	nop			; (mov r8, r8)

00004438 <__register_exitproc>:
    4438:	b5f0      	push	{r4, r5, r6, r7, lr}
    443a:	464e      	mov	r6, r9
    443c:	4645      	mov	r5, r8
    443e:	46de      	mov	lr, fp
    4440:	4657      	mov	r7, sl
    4442:	b5e0      	push	{r5, r6, r7, lr}
    4444:	4d36      	ldr	r5, [pc, #216]	; (4520 <__register_exitproc+0xe8>)
    4446:	b083      	sub	sp, #12
    4448:	0006      	movs	r6, r0
    444a:	6828      	ldr	r0, [r5, #0]
    444c:	4698      	mov	r8, r3
    444e:	000f      	movs	r7, r1
    4450:	4691      	mov	r9, r2
    4452:	f000 f899 	bl	4588 <__retarget_lock_acquire_recursive>
    4456:	4b33      	ldr	r3, [pc, #204]	; (4524 <__register_exitproc+0xec>)
    4458:	681c      	ldr	r4, [r3, #0]
    445a:	23a4      	movs	r3, #164	; 0xa4
    445c:	005b      	lsls	r3, r3, #1
    445e:	58e0      	ldr	r0, [r4, r3]
    4460:	2800      	cmp	r0, #0
    4462:	d052      	beq.n	450a <__register_exitproc+0xd2>
    4464:	6843      	ldr	r3, [r0, #4]
    4466:	2b1f      	cmp	r3, #31
    4468:	dc13      	bgt.n	4492 <__register_exitproc+0x5a>
    446a:	1c5a      	adds	r2, r3, #1
    446c:	9201      	str	r2, [sp, #4]
    446e:	2e00      	cmp	r6, #0
    4470:	d128      	bne.n	44c4 <__register_exitproc+0x8c>
    4472:	9a01      	ldr	r2, [sp, #4]
    4474:	3302      	adds	r3, #2
    4476:	009b      	lsls	r3, r3, #2
    4478:	6042      	str	r2, [r0, #4]
    447a:	501f      	str	r7, [r3, r0]
    447c:	6828      	ldr	r0, [r5, #0]
    447e:	f000 f885 	bl	458c <__retarget_lock_release_recursive>
    4482:	2000      	movs	r0, #0
    4484:	b003      	add	sp, #12
    4486:	bc3c      	pop	{r2, r3, r4, r5}
    4488:	4690      	mov	r8, r2
    448a:	4699      	mov	r9, r3
    448c:	46a2      	mov	sl, r4
    448e:	46ab      	mov	fp, r5
    4490:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4492:	4b25      	ldr	r3, [pc, #148]	; (4528 <__register_exitproc+0xf0>)
    4494:	2b00      	cmp	r3, #0
    4496:	d03d      	beq.n	4514 <__register_exitproc+0xdc>
    4498:	20c8      	movs	r0, #200	; 0xc8
    449a:	0040      	lsls	r0, r0, #1
    449c:	e000      	b.n	44a0 <__register_exitproc+0x68>
    449e:	bf00      	nop
    44a0:	2800      	cmp	r0, #0
    44a2:	d037      	beq.n	4514 <__register_exitproc+0xdc>
    44a4:	22a4      	movs	r2, #164	; 0xa4
    44a6:	2300      	movs	r3, #0
    44a8:	0052      	lsls	r2, r2, #1
    44aa:	58a1      	ldr	r1, [r4, r2]
    44ac:	6043      	str	r3, [r0, #4]
    44ae:	6001      	str	r1, [r0, #0]
    44b0:	50a0      	str	r0, [r4, r2]
    44b2:	3240      	adds	r2, #64	; 0x40
    44b4:	5083      	str	r3, [r0, r2]
    44b6:	3204      	adds	r2, #4
    44b8:	5083      	str	r3, [r0, r2]
    44ba:	3301      	adds	r3, #1
    44bc:	9301      	str	r3, [sp, #4]
    44be:	2300      	movs	r3, #0
    44c0:	2e00      	cmp	r6, #0
    44c2:	d0d6      	beq.n	4472 <__register_exitproc+0x3a>
    44c4:	009a      	lsls	r2, r3, #2
    44c6:	4692      	mov	sl, r2
    44c8:	4482      	add	sl, r0
    44ca:	464a      	mov	r2, r9
    44cc:	2188      	movs	r1, #136	; 0x88
    44ce:	4654      	mov	r4, sl
    44d0:	5062      	str	r2, [r4, r1]
    44d2:	22c4      	movs	r2, #196	; 0xc4
    44d4:	0052      	lsls	r2, r2, #1
    44d6:	4691      	mov	r9, r2
    44d8:	4481      	add	r9, r0
    44da:	464a      	mov	r2, r9
    44dc:	3987      	subs	r1, #135	; 0x87
    44de:	4099      	lsls	r1, r3
    44e0:	6812      	ldr	r2, [r2, #0]
    44e2:	468b      	mov	fp, r1
    44e4:	430a      	orrs	r2, r1
    44e6:	4694      	mov	ip, r2
    44e8:	464a      	mov	r2, r9
    44ea:	4661      	mov	r1, ip
    44ec:	6011      	str	r1, [r2, #0]
    44ee:	2284      	movs	r2, #132	; 0x84
    44f0:	4641      	mov	r1, r8
    44f2:	0052      	lsls	r2, r2, #1
    44f4:	50a1      	str	r1, [r4, r2]
    44f6:	2e02      	cmp	r6, #2
    44f8:	d1bb      	bne.n	4472 <__register_exitproc+0x3a>
    44fa:	0002      	movs	r2, r0
    44fc:	465c      	mov	r4, fp
    44fe:	328d      	adds	r2, #141	; 0x8d
    4500:	32ff      	adds	r2, #255	; 0xff
    4502:	6811      	ldr	r1, [r2, #0]
    4504:	430c      	orrs	r4, r1
    4506:	6014      	str	r4, [r2, #0]
    4508:	e7b3      	b.n	4472 <__register_exitproc+0x3a>
    450a:	0020      	movs	r0, r4
    450c:	304d      	adds	r0, #77	; 0x4d
    450e:	30ff      	adds	r0, #255	; 0xff
    4510:	50e0      	str	r0, [r4, r3]
    4512:	e7a7      	b.n	4464 <__register_exitproc+0x2c>
    4514:	6828      	ldr	r0, [r5, #0]
    4516:	f000 f839 	bl	458c <__retarget_lock_release_recursive>
    451a:	2001      	movs	r0, #1
    451c:	4240      	negs	r0, r0
    451e:	e7b1      	b.n	4484 <__register_exitproc+0x4c>
    4520:	200004f0 	.word	0x200004f0
    4524:	00004760 	.word	0x00004760
    4528:	00000000 	.word	0x00000000

0000452c <register_fini>:
    452c:	4b03      	ldr	r3, [pc, #12]	; (453c <register_fini+0x10>)
    452e:	b510      	push	{r4, lr}
    4530:	2b00      	cmp	r3, #0
    4532:	d002      	beq.n	453a <register_fini+0xe>
    4534:	4802      	ldr	r0, [pc, #8]	; (4540 <register_fini+0x14>)
    4536:	f000 f805 	bl	4544 <atexit>
    453a:	bd10      	pop	{r4, pc}
    453c:	00000000 	.word	0x00000000
    4540:	00004555 	.word	0x00004555

00004544 <atexit>:
    4544:	b510      	push	{r4, lr}
    4546:	0001      	movs	r1, r0
    4548:	2300      	movs	r3, #0
    454a:	2200      	movs	r2, #0
    454c:	2000      	movs	r0, #0
    454e:	f7ff ff73 	bl	4438 <__register_exitproc>
    4552:	bd10      	pop	{r4, pc}

00004554 <__libc_fini_array>:
    4554:	b570      	push	{r4, r5, r6, lr}
    4556:	4b09      	ldr	r3, [pc, #36]	; (457c <__libc_fini_array+0x28>)
    4558:	4c09      	ldr	r4, [pc, #36]	; (4580 <__libc_fini_array+0x2c>)
    455a:	1ae4      	subs	r4, r4, r3
    455c:	10a4      	asrs	r4, r4, #2
    455e:	d009      	beq.n	4574 <__libc_fini_array+0x20>
    4560:	4a08      	ldr	r2, [pc, #32]	; (4584 <__libc_fini_array+0x30>)
    4562:	18a5      	adds	r5, r4, r2
    4564:	00ad      	lsls	r5, r5, #2
    4566:	18ed      	adds	r5, r5, r3
    4568:	682b      	ldr	r3, [r5, #0]
    456a:	3c01      	subs	r4, #1
    456c:	4798      	blx	r3
    456e:	3d04      	subs	r5, #4
    4570:	2c00      	cmp	r4, #0
    4572:	d1f9      	bne.n	4568 <__libc_fini_array+0x14>
    4574:	f000 f906 	bl	4784 <_fini>
    4578:	bd70      	pop	{r4, r5, r6, pc}
    457a:	46c0      	nop			; (mov r8, r8)
    457c:	00004790 	.word	0x00004790
    4580:	00004794 	.word	0x00004794
    4584:	3fffffff 	.word	0x3fffffff

00004588 <__retarget_lock_acquire_recursive>:
    4588:	4770      	bx	lr
    458a:	46c0      	nop			; (mov r8, r8)

0000458c <__retarget_lock_release_recursive>:
    458c:	4770      	bx	lr
    458e:	46c0      	nop			; (mov r8, r8)
    4590:	000005d6 	.word	0x000005d6
    4594:	000005e0 	.word	0x000005e0
    4598:	000005ea 	.word	0x000005ea
    459c:	000005f4 	.word	0x000005f4
    45a0:	000005fe 	.word	0x000005fe
    45a4:	2e2f2e2e 	.word	0x2e2f2e2e
    45a8:	2e2e2f2e 	.word	0x2e2e2f2e
    45ac:	4950472f 	.word	0x4950472f
    45b0:	41535f4f 	.word	0x41535f4f
    45b4:	3132444d 	.word	0x3132444d
    45b8:	5345545f 	.word	0x5345545f
    45bc:	50472f54 	.word	0x50472f54
    45c0:	535f4f49 	.word	0x535f4f49
    45c4:	32444d41 	.word	0x32444d41
    45c8:	45545f31 	.word	0x45545f31
    45cc:	682f5453 	.word	0x682f5453
    45d0:	702f6c70 	.word	0x702f6c70
    45d4:	2f74726f 	.word	0x2f74726f
    45d8:	5f6c7068 	.word	0x5f6c7068
    45dc:	6f697067 	.word	0x6f697067
    45e0:	7361625f 	.word	0x7361625f
    45e4:	00682e65 	.word	0x00682e65
    45e8:	01000000 	.word	0x01000000
    45ec:	00000001 	.word	0x00000001
    45f0:	01010100 	.word	0x01010100
    45f4:	01010101 	.word	0x01010101
    45f8:	01010101 	.word	0x01010101
    45fc:	00000001 	.word	0x00000001
    4600:	00010100 	.word	0x00010100
    4604:	00000000 	.word	0x00000000
    4608:	11131516 	.word	0x11131516
    460c:	0d101110 	.word	0x0d101110
    4610:	0d0e0f0c 	.word	0x0d0e0f0c
    4614:	0506070c 	.word	0x0506070c
    4618:	01020304 	.word	0x01020304
    461c:	05060700 	.word	0x05060700
    4620:	03080904 	.word	0x03080904
    4624:	00000002 	.word	0x00000002
	...
    4630:	01010000 	.word	0x01010000
    4634:	01010000 	.word	0x01010000
    4638:	00000101 	.word	0x00000101
    463c:	01010000 	.word	0x01010000
    4640:	00000101 	.word	0x00000101
    4644:	00000000 	.word	0x00000000
    4648:	03171819 	.word	0x03171819
    464c:	0e0f1213 	.word	0x0e0f1213
    4650:	0a0b1415 	.word	0x0a0b1415
    4654:	0e0f1617 	.word	0x0e0f1617
    4658:	12130c0d 	.word	0x12130c0d
    465c:	16171011 	.word	0x16171011
    4660:	1f081e1f 	.word	0x1f081e1f
    4664:	0000001e 	.word	0x0000001e
    4668:	2e2f2e2e 	.word	0x2e2f2e2e
    466c:	2e2e2f2e 	.word	0x2e2e2f2e
    4670:	4950472f 	.word	0x4950472f
    4674:	41535f4f 	.word	0x41535f4f
    4678:	3132444d 	.word	0x3132444d
    467c:	5345545f 	.word	0x5345545f
    4680:	50472f54 	.word	0x50472f54
    4684:	535f4f49 	.word	0x535f4f49
    4688:	32444d41 	.word	0x32444d41
    468c:	45545f31 	.word	0x45545f31
    4690:	682f5453 	.word	0x682f5453
    4694:	702f6c70 	.word	0x702f6c70
    4698:	2f74726f 	.word	0x2f74726f
    469c:	5f6c7068 	.word	0x5f6c7068
    46a0:	6f697067 	.word	0x6f697067
    46a4:	7361625f 	.word	0x7361625f
    46a8:	00682e65 	.word	0x00682e65
    46ac:	682f2e2e 	.word	0x682f2e2e
    46b0:	732f6c61 	.word	0x732f6c61
    46b4:	682f6372 	.word	0x682f6372
    46b8:	705f6c61 	.word	0x705f6c61
    46bc:	632e6d77 	.word	0x632e6d77
    46c0:	00000000 	.word	0x00000000
    46c4:	682f2e2e 	.word	0x682f2e2e
    46c8:	732f6c61 	.word	0x732f6c61
    46cc:	682f6372 	.word	0x682f6372
    46d0:	735f6c61 	.word	0x735f6c61
    46d4:	6d5f6970 	.word	0x6d5f6970
    46d8:	6e79735f 	.word	0x6e79735f
    46dc:	00632e63 	.word	0x00632e63
    46e0:	682f2e2e 	.word	0x682f2e2e
    46e4:	732f6c61 	.word	0x732f6c61
    46e8:	682f6372 	.word	0x682f6372
    46ec:	745f6c61 	.word	0x745f6c61
    46f0:	72656d69 	.word	0x72656d69
    46f4:	0000632e 	.word	0x0000632e
    46f8:	682f2e2e 	.word	0x682f2e2e
    46fc:	752f6c61 	.word	0x752f6c61
    4700:	736c6974 	.word	0x736c6974
    4704:	6372732f 	.word	0x6372732f
    4708:	6974752f 	.word	0x6974752f
    470c:	6c5f736c 	.word	0x6c5f736c
    4710:	2e747369 	.word	0x2e747369
    4714:	00000063 	.word	0x00000063
    4718:	682f2e2e 	.word	0x682f2e2e
    471c:	722f6c70 	.word	0x722f6c70
    4720:	682f6374 	.word	0x682f6374
    4724:	725f6c70 	.word	0x725f6c70
    4728:	632e6374 	.word	0x632e6374
    472c:	00000000 	.word	0x00000000
    4730:	682f2e2e 	.word	0x682f2e2e
    4734:	732f6c70 	.word	0x732f6c70
    4738:	6f637265 	.word	0x6f637265
    473c:	70682f6d 	.word	0x70682f6d
    4740:	65735f6c 	.word	0x65735f6c
    4744:	6d6f6372 	.word	0x6d6f6372
    4748:	0000632e 	.word	0x0000632e
    474c:	682f2e2e 	.word	0x682f2e2e
    4750:	742f6c70 	.word	0x742f6c70
    4754:	70682f63 	.word	0x70682f63
    4758:	63745f6c 	.word	0x63745f6c
    475c:	0000632e 	.word	0x0000632e

00004760 <_global_impure_ptr>:
    4760:	200000c8                                ... 

00004764 <_init>:
    4764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4766:	46c0      	nop			; (mov r8, r8)
    4768:	bcf8      	pop	{r3, r4, r5, r6, r7}
    476a:	bc08      	pop	{r3}
    476c:	469e      	mov	lr, r3
    476e:	4770      	bx	lr

00004770 <__init_array_start>:
    4770:	0000452d 	.word	0x0000452d

00004774 <__frame_dummy_init_array_entry>:
    4774:	000000dd 000011f1 00002841 00002add     ........A(...*..

00004784 <_fini>:
    4784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4786:	46c0      	nop			; (mov r8, r8)
    4788:	bcf8      	pop	{r3, r4, r5, r6, r7}
    478a:	bc08      	pop	{r3}
    478c:	469e      	mov	lr, r3
    478e:	4770      	bx	lr

00004790 <__fini_array_start>:
    4790:	000000b5 	.word	0x000000b5
