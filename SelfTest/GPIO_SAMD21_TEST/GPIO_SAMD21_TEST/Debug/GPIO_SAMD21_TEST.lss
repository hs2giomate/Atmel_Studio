
GPIO_SAMD21_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004348  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000134  20000000  00004348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003dc  20000134  0000447c  00020134  2**2
                  ALLOC
  3 .stack        00002000  20000510  00004858  00020134  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003e16f  00000000  00000000  000201b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005767  00000000  00000000  0005e324  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001574a  00000000  00000000  00063a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001050  00000000  00000000  000791d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001a20  00000000  00000000  0007a225  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000200fa  00000000  00000000  0007bc45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00019eda  00000000  00000000  0009bd3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00098323  00000000  00000000  000b5c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002eb4  00000000  00000000  0014df3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	10 25 00 20 35 01 00 00 31 01 00 00 31 01 00 00     .%. 5...1...1...
	...
      2c:	31 01 00 00 00 00 00 00 00 00 00 00 31 01 00 00     1...........1...
      3c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      4c:	81 13 00 00 4d 10 00 00 31 01 00 00 31 01 00 00     ....M...1...1...
      5c:	11 2a 00 00 31 01 00 00 31 01 00 00 31 01 00 00     .*..1...1...1...
      6c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      7c:	31 01 00 00 31 01 00 00 31 01 00 00 e9 18 00 00     1...1...1.......
      8c:	21 19 00 00 31 01 00 00 31 01 00 00 31 01 00 00     !...1...1...1...
      9c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      ac:	31 01 00 00 00 00 00 00                             1.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000134 	.word	0x20000134
      d4:	00000000 	.word	0x00000000
      d8:	00004348 	.word	0x00004348

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000138 	.word	0x20000138
     108:	00004348 	.word	0x00004348
     10c:	00004348 	.word	0x00004348
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b03      	ldr	r3, [pc, #12]	; (124 <atmel_start_init+0x10>)
     118:	4798      	blx	r3
	usb_init();
     11a:	4b03      	ldr	r3, [pc, #12]	; (128 <atmel_start_init+0x14>)
     11c:	4798      	blx	r3
	stdio_redirect_init();
     11e:	4b03      	ldr	r3, [pc, #12]	; (12c <atmel_start_init+0x18>)
     120:	4798      	blx	r3
}
     122:	bd10      	pop	{r4, pc}
     124:	00000409 	.word	0x00000409
     128:	0000387d 	.word	0x0000387d
     12c:	00002d1d 	.word	0x00002d1d

00000130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     130:	e7fe      	b.n	130 <Dummy_Handler>
	...

00000134 <Reset_Handler>:
{
     134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     136:	4a2a      	ldr	r2, [pc, #168]	; (1e0 <Reset_Handler+0xac>)
     138:	4b2a      	ldr	r3, [pc, #168]	; (1e4 <Reset_Handler+0xb0>)
     13a:	429a      	cmp	r2, r3
     13c:	d011      	beq.n	162 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     13e:	001a      	movs	r2, r3
     140:	4b29      	ldr	r3, [pc, #164]	; (1e8 <Reset_Handler+0xb4>)
     142:	429a      	cmp	r2, r3
     144:	d20d      	bcs.n	162 <Reset_Handler+0x2e>
     146:	4a29      	ldr	r2, [pc, #164]	; (1ec <Reset_Handler+0xb8>)
     148:	3303      	adds	r3, #3
     14a:	1a9b      	subs	r3, r3, r2
     14c:	089b      	lsrs	r3, r3, #2
     14e:	3301      	adds	r3, #1
     150:	009b      	lsls	r3, r3, #2
     152:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     154:	4823      	ldr	r0, [pc, #140]	; (1e4 <Reset_Handler+0xb0>)
     156:	4922      	ldr	r1, [pc, #136]	; (1e0 <Reset_Handler+0xac>)
     158:	588c      	ldr	r4, [r1, r2]
     15a:	5084      	str	r4, [r0, r2]
     15c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     15e:	429a      	cmp	r2, r3
     160:	d1fa      	bne.n	158 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     162:	4a23      	ldr	r2, [pc, #140]	; (1f0 <Reset_Handler+0xbc>)
     164:	4b23      	ldr	r3, [pc, #140]	; (1f4 <Reset_Handler+0xc0>)
     166:	429a      	cmp	r2, r3
     168:	d20a      	bcs.n	180 <Reset_Handler+0x4c>
     16a:	43d3      	mvns	r3, r2
     16c:	4921      	ldr	r1, [pc, #132]	; (1f4 <Reset_Handler+0xc0>)
     16e:	185b      	adds	r3, r3, r1
     170:	2103      	movs	r1, #3
     172:	438b      	bics	r3, r1
     174:	3304      	adds	r3, #4
     176:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     178:	2100      	movs	r1, #0
     17a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     17c:	4293      	cmp	r3, r2
     17e:	d1fc      	bne.n	17a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     180:	4a1d      	ldr	r2, [pc, #116]	; (1f8 <Reset_Handler+0xc4>)
     182:	21ff      	movs	r1, #255	; 0xff
     184:	4b1d      	ldr	r3, [pc, #116]	; (1fc <Reset_Handler+0xc8>)
     186:	438b      	bics	r3, r1
     188:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     18a:	39fd      	subs	r1, #253	; 0xfd
     18c:	2390      	movs	r3, #144	; 0x90
     18e:	005b      	lsls	r3, r3, #1
     190:	4a1b      	ldr	r2, [pc, #108]	; (200 <Reset_Handler+0xcc>)
     192:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     194:	4a1b      	ldr	r2, [pc, #108]	; (204 <Reset_Handler+0xd0>)
     196:	78d3      	ldrb	r3, [r2, #3]
     198:	2503      	movs	r5, #3
     19a:	43ab      	bics	r3, r5
     19c:	2402      	movs	r4, #2
     19e:	4323      	orrs	r3, r4
     1a0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     1a2:	78d3      	ldrb	r3, [r2, #3]
     1a4:	270c      	movs	r7, #12
     1a6:	43bb      	bics	r3, r7
     1a8:	2608      	movs	r6, #8
     1aa:	4333      	orrs	r3, r6
     1ac:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1ae:	4b16      	ldr	r3, [pc, #88]	; (208 <Reset_Handler+0xd4>)
     1b0:	7b98      	ldrb	r0, [r3, #14]
     1b2:	2230      	movs	r2, #48	; 0x30
     1b4:	4390      	bics	r0, r2
     1b6:	2220      	movs	r2, #32
     1b8:	4310      	orrs	r0, r2
     1ba:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1bc:	7b99      	ldrb	r1, [r3, #14]
     1be:	43b9      	bics	r1, r7
     1c0:	4331      	orrs	r1, r6
     1c2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1c4:	7b9a      	ldrb	r2, [r3, #14]
     1c6:	43aa      	bics	r2, r5
     1c8:	4322      	orrs	r2, r4
     1ca:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1cc:	4a0f      	ldr	r2, [pc, #60]	; (20c <Reset_Handler+0xd8>)
     1ce:	6853      	ldr	r3, [r2, #4]
     1d0:	2180      	movs	r1, #128	; 0x80
     1d2:	430b      	orrs	r3, r1
     1d4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1d6:	4b0e      	ldr	r3, [pc, #56]	; (210 <Reset_Handler+0xdc>)
     1d8:	4798      	blx	r3
        main();
     1da:	4b0e      	ldr	r3, [pc, #56]	; (214 <Reset_Handler+0xe0>)
     1dc:	4798      	blx	r3
     1de:	e7fe      	b.n	1de <Reset_Handler+0xaa>
     1e0:	00004348 	.word	0x00004348
     1e4:	20000000 	.word	0x20000000
     1e8:	20000134 	.word	0x20000134
     1ec:	20000004 	.word	0x20000004
     1f0:	20000134 	.word	0x20000134
     1f4:	20000510 	.word	0x20000510
     1f8:	e000ed00 	.word	0xe000ed00
     1fc:	00000000 	.word	0x00000000
     200:	41007000 	.word	0x41007000
     204:	41005000 	.word	0x41005000
     208:	41004800 	.word	0x41004800
     20c:	41004000 	.word	0x41004000
     210:	000038dd 	.word	0x000038dd
     214:	00002c4d 	.word	0x00002c4d

00000218 <EXTERNAL_IRQ_0_init>:
struct usart_sync_descriptor TARGET_IO;

struct pwm_descriptor PWM_0;

void EXTERNAL_IRQ_0_init(void)
{
     218:	b510      	push	{r4, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     21a:	4a03      	ldr	r2, [pc, #12]	; (228 <EXTERNAL_IRQ_0_init+0x10>)
     21c:	4b03      	ldr	r3, [pc, #12]	; (22c <EXTERNAL_IRQ_0_init+0x14>)
     21e:	805a      	strh	r2, [r3, #2]
	_gclk_enable_channel(EIC_GCLK_ID, CONF_GCLK_EIC_SRC);

	ext_irq_init();
     220:	4b03      	ldr	r3, [pc, #12]	; (230 <EXTERNAL_IRQ_0_init+0x18>)
     222:	4798      	blx	r3
}
     224:	bd10      	pop	{r4, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	00004005 	.word	0x00004005
     22c:	40000c00 	.word	0x40000c00
     230:	00000539 	.word	0x00000539

00000234 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     234:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     236:	4b0e      	ldr	r3, [pc, #56]	; (270 <TARGET_IO_PORT_init+0x3c>)
     238:	2244      	movs	r2, #68	; 0x44
     23a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     23c:	2501      	movs	r5, #1
     23e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     240:	2401      	movs	r4, #1
     242:	4321      	orrs	r1, r4
     244:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     246:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     248:	2032      	movs	r0, #50	; 0x32
     24a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     24c:	3a35      	subs	r2, #53	; 0x35
     24e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     250:	3a0c      	subs	r2, #12
     252:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     254:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     256:	2145      	movs	r1, #69	; 0x45
     258:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     25a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     25c:	4322      	orrs	r2, r4
     25e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     260:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     262:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     264:	3936      	subs	r1, #54	; 0x36
     266:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     268:	3121      	adds	r1, #33	; 0x21
     26a:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     26c:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
}
     26e:	bd30      	pop	{r4, r5, pc}
     270:	41004400 	.word	0x41004400

00000274 <TARGET_IO_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     274:	4a04      	ldr	r2, [pc, #16]	; (288 <TARGET_IO_CLOCK_init+0x14>)
     276:	6a13      	ldr	r3, [r2, #32]
     278:	2104      	movs	r1, #4
     27a:	430b      	orrs	r3, r1
     27c:	6213      	str	r3, [r2, #32]
     27e:	4a03      	ldr	r2, [pc, #12]	; (28c <TARGET_IO_CLOCK_init+0x18>)
     280:	4b03      	ldr	r3, [pc, #12]	; (290 <TARGET_IO_CLOCK_init+0x1c>)
     282:	805a      	strh	r2, [r3, #2]

void TARGET_IO_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     284:	4770      	bx	lr
     286:	46c0      	nop			; (mov r8, r8)
     288:	40000400 	.word	0x40000400
     28c:	00004014 	.word	0x00004014
     290:	40000c00 	.word	0x40000c00

00000294 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     294:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     296:	4b05      	ldr	r3, [pc, #20]	; (2ac <TARGET_IO_init+0x18>)
     298:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM0, (void *)NULL);
     29a:	2200      	movs	r2, #0
     29c:	4904      	ldr	r1, [pc, #16]	; (2b0 <TARGET_IO_init+0x1c>)
     29e:	4805      	ldr	r0, [pc, #20]	; (2b4 <TARGET_IO_init+0x20>)
     2a0:	4b05      	ldr	r3, [pc, #20]	; (2b8 <TARGET_IO_init+0x24>)
     2a2:	4798      	blx	r3
	TARGET_IO_PORT_init();
     2a4:	4b05      	ldr	r3, [pc, #20]	; (2bc <TARGET_IO_init+0x28>)
     2a6:	4798      	blx	r3
}
     2a8:	bd10      	pop	{r4, pc}
     2aa:	46c0      	nop			; (mov r8, r8)
     2ac:	00000275 	.word	0x00000275
     2b0:	42000800 	.word	0x42000800
     2b4:	200004c0 	.word	0x200004c0
     2b8:	0000084d 	.word	0x0000084d
     2bc:	00000235 	.word	0x00000235

000002c0 <PWM_0_CLOCK_init>:
     2c0:	4a04      	ldr	r2, [pc, #16]	; (2d4 <PWM_0_CLOCK_init+0x14>)
     2c2:	6a11      	ldr	r1, [r2, #32]
     2c4:	2380      	movs	r3, #128	; 0x80
     2c6:	011b      	lsls	r3, r3, #4
     2c8:	430b      	orrs	r3, r1
     2ca:	6213      	str	r3, [r2, #32]
     2cc:	4a02      	ldr	r2, [pc, #8]	; (2d8 <PWM_0_CLOCK_init+0x18>)
     2ce:	4b03      	ldr	r3, [pc, #12]	; (2dc <PWM_0_CLOCK_init+0x1c>)
     2d0:	805a      	strh	r2, [r3, #2]

void PWM_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);
}
     2d2:	4770      	bx	lr
     2d4:	40000400 	.word	0x40000400
     2d8:	0000421b 	.word	0x0000421b
     2dc:	40000c00 	.word	0x40000c00

000002e0 <PWM_0_init>:

void PWM_0_init(void)
{
     2e0:	b510      	push	{r4, lr}
	PWM_0_CLOCK_init();
     2e2:	4b05      	ldr	r3, [pc, #20]	; (2f8 <PWM_0_init+0x18>)
     2e4:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC3, _tc_get_pwm());
     2e6:	4b05      	ldr	r3, [pc, #20]	; (2fc <PWM_0_init+0x1c>)
     2e8:	4798      	blx	r3
     2ea:	0002      	movs	r2, r0
     2ec:	4904      	ldr	r1, [pc, #16]	; (300 <PWM_0_init+0x20>)
     2ee:	4805      	ldr	r0, [pc, #20]	; (304 <PWM_0_init+0x24>)
     2f0:	4b05      	ldr	r3, [pc, #20]	; (308 <PWM_0_init+0x28>)
     2f2:	4798      	blx	r3
}
     2f4:	bd10      	pop	{r4, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	000002c1 	.word	0x000002c1
     2fc:	000018e5 	.word	0x000018e5
     300:	42002c00 	.word	0x42002c00
     304:	200004a4 	.word	0x200004a4
     308:	000005dd 	.word	0x000005dd

0000030c <EVENT_SYSTEM_0_init>:

	timer_init(&TIMER_1, TC4, _tc_get_timer());
}

void EVENT_SYSTEM_0_init(void)
{
     30c:	b510      	push	{r4, lr}
     30e:	4b06      	ldr	r3, [pc, #24]	; (328 <EVENT_SYSTEM_0_init+0x1c>)
     310:	4a06      	ldr	r2, [pc, #24]	; (32c <EVENT_SYSTEM_0_init+0x20>)
     312:	805a      	strh	r2, [r3, #2]
     314:	4a06      	ldr	r2, [pc, #24]	; (330 <EVENT_SYSTEM_0_init+0x24>)
     316:	805a      	strh	r2, [r3, #2]
     318:	4a06      	ldr	r2, [pc, #24]	; (334 <EVENT_SYSTEM_0_init+0x28>)
     31a:	6a13      	ldr	r3, [r2, #32]
     31c:	2102      	movs	r1, #2
     31e:	430b      	orrs	r3, r1
     320:	6213      	str	r3, [r2, #32]
	_gclk_enable_channel(EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC);
	_gclk_enable_channel(EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC);

	_pm_enable_bus_clock(PM_BUS_APBC, EVSYS);

	event_system_init();
     322:	4b05      	ldr	r3, [pc, #20]	; (338 <EVENT_SYSTEM_0_init+0x2c>)
     324:	4798      	blx	r3
}
     326:	bd10      	pop	{r4, pc}
     328:	40000c00 	.word	0x40000c00
     32c:	00004007 	.word	0x00004007
     330:	00004008 	.word	0x00004008
     334:	40000400 	.word	0x40000400
     338:	000004f5 	.word	0x000004f5

0000033c <USB_0_PORT_init>:

void USB_0_PORT_init(void)
{
     33c:	b5f0      	push	{r4, r5, r6, r7, lr}
     33e:	46c6      	mov	lr, r8
     340:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     342:	24c0      	movs	r4, #192	; 0xc0
     344:	05e4      	lsls	r4, r4, #23
     346:	2280      	movs	r2, #128	; 0x80
     348:	0452      	lsls	r2, r2, #17
     34a:	60a2      	str	r2, [r4, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     34c:	4b1a      	ldr	r3, [pc, #104]	; (3b8 <USB_0_PORT_init+0x7c>)
     34e:	2780      	movs	r7, #128	; 0x80
     350:	05ff      	lsls	r7, r7, #23
     352:	629f      	str	r7, [r3, #40]	; 0x28
     354:	4919      	ldr	r1, [pc, #100]	; (3bc <USB_0_PORT_init+0x80>)
     356:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     358:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     35a:	2058      	movs	r0, #88	; 0x58
     35c:	5c19      	ldrb	r1, [r3, r0]
     35e:	2204      	movs	r2, #4
     360:	4690      	mov	r8, r2
     362:	4391      	bics	r1, r2
     364:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     366:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     368:	2601      	movs	r6, #1
     36a:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     36c:	2501      	movs	r5, #1
     36e:	4329      	orrs	r1, r5
     370:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     372:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     374:	381c      	subs	r0, #28
     376:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     378:	320b      	adds	r2, #11
     37a:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     37c:	3a09      	subs	r2, #9
     37e:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     380:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     382:	2180      	movs	r1, #128	; 0x80
     384:	0489      	lsls	r1, r1, #18
     386:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     388:	629f      	str	r7, [r3, #40]	; 0x28
     38a:	4f0d      	ldr	r7, [pc, #52]	; (3c0 <USB_0_PORT_init+0x84>)
     38c:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     38e:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     390:	2159      	movs	r1, #89	; 0x59
     392:	5c5c      	ldrb	r4, [r3, r1]
     394:	4642      	mov	r2, r8
     396:	4394      	bics	r4, r2
     398:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     39a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     39c:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     39e:	432a      	orrs	r2, r5
     3a0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3a2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3a4:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3a6:	394a      	subs	r1, #74	; 0x4a
     3a8:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     3aa:	3151      	adds	r1, #81	; 0x51
     3ac:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ae:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     3b0:	bc04      	pop	{r2}
     3b2:	4690      	mov	r8, r2
     3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	41004400 	.word	0x41004400
     3bc:	c0000100 	.word	0xc0000100
     3c0:	c0000200 	.word	0xc0000200

000003c4 <USB_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     3c4:	4b06      	ldr	r3, [pc, #24]	; (3e0 <USB_0_CLOCK_init+0x1c>)
     3c6:	69da      	ldr	r2, [r3, #28]
     3c8:	2120      	movs	r1, #32
     3ca:	430a      	orrs	r2, r1
     3cc:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     3ce:	695a      	ldr	r2, [r3, #20]
     3d0:	3120      	adds	r1, #32
     3d2:	430a      	orrs	r2, r1
     3d4:	615a      	str	r2, [r3, #20]
     3d6:	4a03      	ldr	r2, [pc, #12]	; (3e4 <USB_0_CLOCK_init+0x20>)
     3d8:	4b03      	ldr	r3, [pc, #12]	; (3e8 <USB_0_CLOCK_init+0x24>)
     3da:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     3dc:	4770      	bx	lr
     3de:	46c0      	nop			; (mov r8, r8)
     3e0:	40000400 	.word	0x40000400
     3e4:	00004106 	.word	0x00004106
     3e8:	40000c00 	.word	0x40000c00

000003ec <USB_0_init>:

void USB_0_init(void)
{
     3ec:	b510      	push	{r4, lr}
	USB_0_CLOCK_init();
     3ee:	4b03      	ldr	r3, [pc, #12]	; (3fc <USB_0_init+0x10>)
     3f0:	4798      	blx	r3
	usb_d_init();
     3f2:	4b03      	ldr	r3, [pc, #12]	; (400 <USB_0_init+0x14>)
     3f4:	4798      	blx	r3
	USB_0_PORT_init();
     3f6:	4b03      	ldr	r3, [pc, #12]	; (404 <USB_0_init+0x18>)
     3f8:	4798      	blx	r3
}
     3fa:	bd10      	pop	{r4, pc}
     3fc:	000003c5 	.word	0x000003c5
     400:	00000b35 	.word	0x00000b35
     404:	0000033d 	.word	0x0000033d

00000408 <system_init>:

void system_init(void)
{
     408:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     40a:	4b1f      	ldr	r3, [pc, #124]	; (488 <system_init+0x80>)
     40c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     40e:	21c0      	movs	r1, #192	; 0xc0
     410:	05c9      	lsls	r1, r1, #23
     412:	2080      	movs	r0, #128	; 0x80
     414:	0040      	lsls	r0, r0, #1
     416:	6048      	str	r0, [r1, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     418:	4b1c      	ldr	r3, [pc, #112]	; (48c <system_init+0x84>)
     41a:	4a1d      	ldr	r2, [pc, #116]	; (490 <system_init+0x88>)
     41c:	629a      	str	r2, [r3, #40]	; 0x28
     41e:	4a1d      	ldr	r2, [pc, #116]	; (494 <system_init+0x8c>)
     420:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     422:	6048      	str	r0, [r1, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     424:	2248      	movs	r2, #72	; 0x48
     426:	5c9c      	ldrb	r4, [r3, r2]
     428:	2504      	movs	r5, #4
     42a:	432c      	orrs	r4, r5
     42c:	549c      	strb	r4, [r3, r2]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     42e:	6188      	str	r0, [r1, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     430:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     432:	38ff      	subs	r0, #255	; 0xff
     434:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     436:	5499      	strb	r1, [r3, r2]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(NMI, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     438:	4b17      	ldr	r3, [pc, #92]	; (498 <system_init+0x90>)
     43a:	4798      	blx	r3

	TARGET_IO_init();
     43c:	4b17      	ldr	r3, [pc, #92]	; (49c <system_init+0x94>)
     43e:	4798      	blx	r3
		PM->APBAMASK.reg |= 1 << peripheral;
     440:	4c17      	ldr	r4, [pc, #92]	; (4a0 <system_init+0x98>)
     442:	69a3      	ldr	r3, [r4, #24]
     444:	2220      	movs	r2, #32
     446:	4313      	orrs	r3, r2
     448:	61a3      	str	r3, [r4, #24]
     44a:	4e16      	ldr	r6, [pc, #88]	; (4a4 <system_init+0x9c>)
     44c:	4b16      	ldr	r3, [pc, #88]	; (4a8 <system_init+0xa0>)
     44e:	8073      	strh	r3, [r6, #2]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     450:	4b16      	ldr	r3, [pc, #88]	; (4ac <system_init+0xa4>)
     452:	4798      	blx	r3
     454:	0002      	movs	r2, r0
     456:	4916      	ldr	r1, [pc, #88]	; (4b0 <system_init+0xa8>)
     458:	4816      	ldr	r0, [pc, #88]	; (4b4 <system_init+0xac>)
     45a:	4d17      	ldr	r5, [pc, #92]	; (4b8 <system_init+0xb0>)
     45c:	47a8      	blx	r5

	TIMER_0_init();

	PWM_0_init();
     45e:	4b17      	ldr	r3, [pc, #92]	; (4bc <system_init+0xb4>)
     460:	4798      	blx	r3
		PM->APBCMASK.reg |= 1 << peripheral;
     462:	6a22      	ldr	r2, [r4, #32]
     464:	2380      	movs	r3, #128	; 0x80
     466:	015b      	lsls	r3, r3, #5
     468:	4313      	orrs	r3, r2
     46a:	6223      	str	r3, [r4, #32]
     46c:	4b14      	ldr	r3, [pc, #80]	; (4c0 <system_init+0xb8>)
     46e:	8073      	strh	r3, [r6, #2]
	timer_init(&TIMER_1, TC4, _tc_get_timer());
     470:	4b14      	ldr	r3, [pc, #80]	; (4c4 <system_init+0xbc>)
     472:	4798      	blx	r3
     474:	0002      	movs	r2, r0
     476:	4914      	ldr	r1, [pc, #80]	; (4c8 <system_init+0xc0>)
     478:	4814      	ldr	r0, [pc, #80]	; (4cc <system_init+0xc4>)
     47a:	47a8      	blx	r5

	TIMER_1_init();

	EVENT_SYSTEM_0_init();
     47c:	4b14      	ldr	r3, [pc, #80]	; (4d0 <system_init+0xc8>)
     47e:	4798      	blx	r3

	USB_0_init();
     480:	4b14      	ldr	r3, [pc, #80]	; (4d4 <system_init+0xcc>)
     482:	4798      	blx	r3
}
     484:	bd70      	pop	{r4, r5, r6, pc}
     486:	46c0      	nop			; (mov r8, r8)
     488:	00000f8d 	.word	0x00000f8d
     48c:	41004400 	.word	0x41004400
     490:	40020100 	.word	0x40020100
     494:	c0020000 	.word	0xc0020000
     498:	00000219 	.word	0x00000219
     49c:	00000295 	.word	0x00000295
     4a0:	40000400 	.word	0x40000400
     4a4:	40000c00 	.word	0x40000c00
     4a8:	00004504 	.word	0x00004504
     4ac:	00001379 	.word	0x00001379
     4b0:	40001400 	.word	0x40001400
     4b4:	200004ec 	.word	0x200004ec
     4b8:	00000721 	.word	0x00000721
     4bc:	000002e1 	.word	0x000002e1
     4c0:	0000421c 	.word	0x0000421c
     4c4:	000018d9 	.word	0x000018d9
     4c8:	42003000 	.word	0x42003000
     4cc:	200004cc 	.word	0x200004cc
     4d0:	0000030d 	.word	0x0000030d
     4d4:	000003ed 	.word	0x000003ed

000004d8 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     4d8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     4dc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     4de:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     4e0:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     4e4:	4770      	bx	lr

000004e6 <atomic_leave_critical>:
     4e6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     4ea:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     4ec:	f383 8810 	msr	PRIMASK, r3
}
     4f0:	4770      	bx	lr
	...

000004f4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     4f4:	b510      	push	{r4, lr}
	return _event_system_init();
     4f6:	4b01      	ldr	r3, [pc, #4]	; (4fc <event_system_init+0x8>)
     4f8:	4798      	blx	r3
}
     4fa:	bd10      	pop	{r4, pc}
     4fc:	00001115 	.word	0x00001115

00000500 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     500:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     502:	4b0c      	ldr	r3, [pc, #48]	; (534 <process_ext_irq+0x34>)
     504:	685c      	ldr	r4, [r3, #4]
     506:	42a0      	cmp	r0, r4
     508:	d00e      	beq.n	528 <process_ext_irq+0x28>
     50a:	2201      	movs	r2, #1
     50c:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     50e:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     510:	25ff      	movs	r5, #255	; 0xff
     512:	e003      	b.n	51c <process_ext_irq+0x1c>
     514:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     516:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     518:	085b      	lsrs	r3, r3, #1
     51a:	d10a      	bne.n	532 <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     51c:	42a0      	cmp	r0, r4
     51e:	d9f9      	bls.n	514 <process_ext_irq+0x14>
	while (upper >= lower) {
     520:	2a00      	cmp	r2, #0
     522:	d006      	beq.n	532 <process_ext_irq+0x32>
			lower = middle + 1;
     524:	0031      	movs	r1, r6
     526:	e7f6      	b.n	516 <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     528:	4b02      	ldr	r3, [pc, #8]	; (534 <process_ext_irq+0x34>)
     52a:	681b      	ldr	r3, [r3, #0]
     52c:	2b00      	cmp	r3, #0
     52e:	d000      	beq.n	532 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     530:	4798      	blx	r3
		}
	}
}
     532:	bd70      	pop	{r4, r5, r6, pc}
     534:	20000150 	.word	0x20000150

00000538 <ext_irq_init>:
{
     538:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     53a:	4b05      	ldr	r3, [pc, #20]	; (550 <ext_irq_init+0x18>)
     53c:	2201      	movs	r2, #1
     53e:	4252      	negs	r2, r2
     540:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     542:	2200      	movs	r2, #0
     544:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     546:	4803      	ldr	r0, [pc, #12]	; (554 <ext_irq_init+0x1c>)
     548:	4b03      	ldr	r3, [pc, #12]	; (558 <ext_irq_init+0x20>)
     54a:	4798      	blx	r3
}
     54c:	bd10      	pop	{r4, pc}
     54e:	46c0      	nop			; (mov r8, r8)
     550:	20000150 	.word	0x20000150
     554:	00000501 	.word	0x00000501
     558:	00000fbd 	.word	0x00000fbd

0000055c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     55c:	b570      	push	{r4, r5, r6, lr}
     55e:	0006      	movs	r6, r0
     560:	000c      	movs	r4, r1
     562:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     564:	2800      	cmp	r0, #0
     566:	d00d      	beq.n	584 <io_write+0x28>
     568:	0008      	movs	r0, r1
     56a:	1e43      	subs	r3, r0, #1
     56c:	4198      	sbcs	r0, r3
     56e:	b2c0      	uxtb	r0, r0
     570:	2234      	movs	r2, #52	; 0x34
     572:	4905      	ldr	r1, [pc, #20]	; (588 <io_write+0x2c>)
     574:	4b05      	ldr	r3, [pc, #20]	; (58c <io_write+0x30>)
     576:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     578:	6833      	ldr	r3, [r6, #0]
     57a:	002a      	movs	r2, r5
     57c:	0021      	movs	r1, r4
     57e:	0030      	movs	r0, r6
     580:	4798      	blx	r3
}
     582:	bd70      	pop	{r4, r5, r6, pc}
     584:	2000      	movs	r0, #0
     586:	e7f3      	b.n	570 <io_write+0x14>
     588:	00004100 	.word	0x00004100
     58c:	00000e89 	.word	0x00000e89

00000590 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     590:	b570      	push	{r4, r5, r6, lr}
     592:	0006      	movs	r6, r0
     594:	000c      	movs	r4, r1
     596:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     598:	2800      	cmp	r0, #0
     59a:	d00d      	beq.n	5b8 <io_read+0x28>
     59c:	0008      	movs	r0, r1
     59e:	1e43      	subs	r3, r0, #1
     5a0:	4198      	sbcs	r0, r3
     5a2:	b2c0      	uxtb	r0, r0
     5a4:	223d      	movs	r2, #61	; 0x3d
     5a6:	4905      	ldr	r1, [pc, #20]	; (5bc <io_read+0x2c>)
     5a8:	4b05      	ldr	r3, [pc, #20]	; (5c0 <io_read+0x30>)
     5aa:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     5ac:	6873      	ldr	r3, [r6, #4]
     5ae:	002a      	movs	r2, r5
     5b0:	0021      	movs	r1, r4
     5b2:	0030      	movs	r0, r6
     5b4:	4798      	blx	r3
}
     5b6:	bd70      	pop	{r4, r5, r6, pc}
     5b8:	2000      	movs	r0, #0
     5ba:	e7f3      	b.n	5a4 <io_read+0x14>
     5bc:	00004100 	.word	0x00004100
     5c0:	00000e89 	.word	0x00000e89

000005c4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     5c4:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     5c6:	6943      	ldr	r3, [r0, #20]
     5c8:	2b00      	cmp	r3, #0
     5ca:	d000      	beq.n	5ce <pwm_period_expired+0xa>
		descr->pwm_cb.period(descr);
     5cc:	4798      	blx	r3
	}
}
     5ce:	bd10      	pop	{r4, pc}

000005d0 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     5d0:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     5d2:	6983      	ldr	r3, [r0, #24]
     5d4:	2b00      	cmp	r3, #0
     5d6:	d000      	beq.n	5da <pwm_detect_fault+0xa>
		descr->pwm_cb.error(descr);
     5d8:	4798      	blx	r3
	}
}
     5da:	bd10      	pop	{r4, pc}

000005dc <pwm_init>:
{
     5dc:	b570      	push	{r4, r5, r6, lr}
     5de:	0005      	movs	r5, r0
     5e0:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     5e2:	2800      	cmp	r0, #0
     5e4:	d011      	beq.n	60a <pwm_init+0x2e>
     5e6:	0008      	movs	r0, r1
     5e8:	1e43      	subs	r3, r0, #1
     5ea:	4198      	sbcs	r0, r3
     5ec:	b2c0      	uxtb	r0, r0
     5ee:	2233      	movs	r2, #51	; 0x33
     5f0:	4907      	ldr	r1, [pc, #28]	; (610 <pwm_init+0x34>)
     5f2:	4b08      	ldr	r3, [pc, #32]	; (614 <pwm_init+0x38>)
     5f4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     5f6:	0021      	movs	r1, r4
     5f8:	0028      	movs	r0, r5
     5fa:	4b07      	ldr	r3, [pc, #28]	; (618 <pwm_init+0x3c>)
     5fc:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     5fe:	4b07      	ldr	r3, [pc, #28]	; (61c <pwm_init+0x40>)
     600:	602b      	str	r3, [r5, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     602:	4b07      	ldr	r3, [pc, #28]	; (620 <pwm_init+0x44>)
     604:	606b      	str	r3, [r5, #4]
}
     606:	2000      	movs	r0, #0
     608:	bd70      	pop	{r4, r5, r6, pc}
     60a:	2000      	movs	r0, #0
     60c:	e7ef      	b.n	5ee <pwm_init+0x12>
     60e:	46c0      	nop			; (mov r8, r8)
     610:	00004114 	.word	0x00004114
     614:	00000e89 	.word	0x00000e89
     618:	000017dd 	.word	0x000017dd
     61c:	000005c5 	.word	0x000005c5
     620:	000005d1 	.word	0x000005d1

00000624 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     626:	46ce      	mov	lr, r9
     628:	4647      	mov	r7, r8
     62a:	b580      	push	{r7, lr}
     62c:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     62e:	6803      	ldr	r3, [r0, #0]
     630:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     632:	2b00      	cmp	r3, #0
     634:	d005      	beq.n	642 <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     636:	688e      	ldr	r6, [r1, #8]
     638:	001c      	movs	r4, r3
     63a:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     63c:	2701      	movs	r7, #1
     63e:	1abf      	subs	r7, r7, r2
     640:	e00d      	b.n	65e <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     642:	4b12      	ldr	r3, [pc, #72]	; (68c <timer_add_timer_task+0x68>)
     644:	4798      	blx	r3
		return;
     646:	e018      	b.n	67a <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     648:	18fb      	adds	r3, r7, r3
     64a:	68a0      	ldr	r0, [r4, #8]
     64c:	4680      	mov	r8, r0
     64e:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     650:	42b3      	cmp	r3, r6
     652:	d20c      	bcs.n	66e <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     654:	6823      	ldr	r3, [r4, #0]
     656:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     658:	2b00      	cmp	r3, #0
     65a:	d00b      	beq.n	674 <timer_add_timer_task+0x50>
     65c:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     65e:	6863      	ldr	r3, [r4, #4]
     660:	4293      	cmp	r3, r2
     662:	d8f1      	bhi.n	648 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     664:	68a0      	ldr	r0, [r4, #8]
     666:	4680      	mov	r8, r0
     668:	4443      	add	r3, r8
     66a:	1a9b      	subs	r3, r3, r2
     66c:	e7f0      	b.n	650 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     66e:	45a4      	cmp	ip, r4
     670:	d007      	beq.n	682 <timer_add_timer_task+0x5e>
     672:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     674:	0020      	movs	r0, r4
     676:	4b06      	ldr	r3, [pc, #24]	; (690 <timer_add_timer_task+0x6c>)
     678:	4798      	blx	r3
	}
}
     67a:	bc0c      	pop	{r2, r3}
     67c:	4690      	mov	r8, r2
     67e:	4699      	mov	r9, r3
     680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     682:	4648      	mov	r0, r9
     684:	4b01      	ldr	r3, [pc, #4]	; (68c <timer_add_timer_task+0x68>)
     686:	4798      	blx	r3
     688:	e7f7      	b.n	67a <timer_add_timer_task+0x56>
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	00000eb5 	.word	0x00000eb5
     690:	00000ee1 	.word	0x00000ee1

00000694 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     694:	b5f0      	push	{r4, r5, r6, r7, lr}
     696:	46c6      	mov	lr, r8
     698:	b500      	push	{lr}
     69a:	b082      	sub	sp, #8
     69c:	0007      	movs	r7, r0
	return (void *)list->head;
     69e:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     6a0:	6902      	ldr	r2, [r0, #16]
     6a2:	3201      	adds	r2, #1
     6a4:	4690      	mov	r8, r2
     6a6:	6102      	str	r2, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     6a8:	7e03      	ldrb	r3, [r0, #24]
     6aa:	07db      	lsls	r3, r3, #31
     6ac:	d411      	bmi.n	6d2 <timer_process_counted+0x3e>
     6ae:	7e03      	ldrb	r3, [r0, #24]
     6b0:	079b      	lsls	r3, r3, #30
     6b2:	d40e      	bmi.n	6d2 <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     6b4:	2c00      	cmp	r4, #0
     6b6:	d010      	beq.n	6da <timer_process_counted+0x46>
     6b8:	0013      	movs	r3, r2
     6ba:	6862      	ldr	r2, [r4, #4]
     6bc:	1a9b      	subs	r3, r3, r2
     6be:	68a2      	ldr	r2, [r4, #8]
     6c0:	4293      	cmp	r3, r2
     6c2:	d30a      	bcc.n	6da <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     6c4:	2314      	movs	r3, #20
     6c6:	469c      	mov	ip, r3
     6c8:	4484      	add	ip, r0
     6ca:	4663      	mov	r3, ip
     6cc:	9301      	str	r3, [sp, #4]
     6ce:	4e12      	ldr	r6, [pc, #72]	; (718 <timer_process_counted+0x84>)
     6d0:	e014      	b.n	6fc <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     6d2:	7e3b      	ldrb	r3, [r7, #24]
     6d4:	2202      	movs	r2, #2
     6d6:	4313      	orrs	r3, r2
     6d8:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     6da:	b002      	add	sp, #8
     6dc:	bc04      	pop	{r2}
     6de:	4690      	mov	r8, r2
     6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6e2:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     6e4:	68e3      	ldr	r3, [r4, #12]
     6e6:	0020      	movs	r0, r4
     6e8:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     6ea:	2d00      	cmp	r5, #0
     6ec:	d0f5      	beq.n	6da <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     6ee:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     6f0:	4643      	mov	r3, r8
     6f2:	686a      	ldr	r2, [r5, #4]
     6f4:	1a9b      	subs	r3, r3, r2
     6f6:	68aa      	ldr	r2, [r5, #8]
     6f8:	4293      	cmp	r3, r2
     6fa:	d3ee      	bcc.n	6da <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     6fc:	9801      	ldr	r0, [sp, #4]
     6fe:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     700:	7c23      	ldrb	r3, [r4, #16]
     702:	2b01      	cmp	r3, #1
     704:	d1ed      	bne.n	6e2 <timer_process_counted+0x4e>
			tmp->time_label = time;
     706:	4643      	mov	r3, r8
     708:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     70a:	4642      	mov	r2, r8
     70c:	0021      	movs	r1, r4
     70e:	9801      	ldr	r0, [sp, #4]
     710:	4b02      	ldr	r3, [pc, #8]	; (71c <timer_process_counted+0x88>)
     712:	4798      	blx	r3
     714:	e7e5      	b.n	6e2 <timer_process_counted+0x4e>
     716:	46c0      	nop			; (mov r8, r8)
     718:	00000f29 	.word	0x00000f29
     71c:	00000625 	.word	0x00000625

00000720 <timer_init>:
{
     720:	b570      	push	{r4, r5, r6, lr}
     722:	0004      	movs	r4, r0
     724:	000d      	movs	r5, r1
     726:	0016      	movs	r6, r2
	ASSERT(descr && hw && func);
     728:	2800      	cmp	r0, #0
     72a:	d013      	beq.n	754 <timer_init+0x34>
     72c:	2900      	cmp	r1, #0
     72e:	d013      	beq.n	758 <timer_init+0x38>
     730:	0010      	movs	r0, r2
     732:	1e43      	subs	r3, r0, #1
     734:	4198      	sbcs	r0, r3
     736:	223b      	movs	r2, #59	; 0x3b
     738:	4908      	ldr	r1, [pc, #32]	; (75c <timer_init+0x3c>)
     73a:	4b09      	ldr	r3, [pc, #36]	; (760 <timer_init+0x40>)
     73c:	4798      	blx	r3
	descr->func = func;
     73e:	0020      	movs	r0, r4
     740:	c040      	stmia	r0!, {r6}
	descr->func->init(&descr->device, hw);
     742:	6833      	ldr	r3, [r6, #0]
     744:	0029      	movs	r1, r5
     746:	4798      	blx	r3
	descr->time                           = 0;
     748:	2300      	movs	r3, #0
     74a:	6163      	str	r3, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
     74c:	4b05      	ldr	r3, [pc, #20]	; (764 <timer_init+0x44>)
     74e:	6063      	str	r3, [r4, #4]
}
     750:	2000      	movs	r0, #0
     752:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
     754:	2000      	movs	r0, #0
     756:	e7ee      	b.n	736 <timer_init+0x16>
     758:	2000      	movs	r0, #0
     75a:	e7ec      	b.n	736 <timer_init+0x16>
     75c:	0000412c 	.word	0x0000412c
     760:	00000e89 	.word	0x00000e89
     764:	00000695 	.word	0x00000695

00000768 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     76a:	46ce      	mov	lr, r9
     76c:	4647      	mov	r7, r8
     76e:	b580      	push	{r7, lr}
     770:	0004      	movs	r4, r0
     772:	000f      	movs	r7, r1
     774:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     776:	2800      	cmp	r0, #0
     778:	d026      	beq.n	7c8 <usart_sync_write+0x60>
     77a:	2900      	cmp	r1, #0
     77c:	d026      	beq.n	7cc <usart_sync_write+0x64>
     77e:	0010      	movs	r0, r2
     780:	1e43      	subs	r3, r0, #1
     782:	4198      	sbcs	r0, r3
     784:	22f1      	movs	r2, #241	; 0xf1
     786:	4912      	ldr	r1, [pc, #72]	; (7d0 <usart_sync_write+0x68>)
     788:	4b12      	ldr	r3, [pc, #72]	; (7d4 <usart_sync_write+0x6c>)
     78a:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     78c:	3408      	adds	r4, #8
     78e:	4d12      	ldr	r5, [pc, #72]	; (7d8 <usart_sync_write+0x70>)
     790:	0020      	movs	r0, r4
     792:	47a8      	blx	r5
     794:	2800      	cmp	r0, #0
     796:	d0fb      	beq.n	790 <usart_sync_write+0x28>
     798:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     79a:	4b10      	ldr	r3, [pc, #64]	; (7dc <usart_sync_write+0x74>)
     79c:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     79e:	4d0e      	ldr	r5, [pc, #56]	; (7d8 <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     7a0:	5db9      	ldrb	r1, [r7, r6]
     7a2:	0020      	movs	r0, r4
     7a4:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     7a6:	0020      	movs	r0, r4
     7a8:	47a8      	blx	r5
     7aa:	2800      	cmp	r0, #0
     7ac:	d0fb      	beq.n	7a6 <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     7ae:	3601      	adds	r6, #1
     7b0:	4546      	cmp	r6, r8
     7b2:	d3f5      	bcc.n	7a0 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     7b4:	4d0a      	ldr	r5, [pc, #40]	; (7e0 <usart_sync_write+0x78>)
     7b6:	0020      	movs	r0, r4
     7b8:	47a8      	blx	r5
     7ba:	2800      	cmp	r0, #0
     7bc:	d0fb      	beq.n	7b6 <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
     7be:	0030      	movs	r0, r6
     7c0:	bc0c      	pop	{r2, r3}
     7c2:	4690      	mov	r8, r2
     7c4:	4699      	mov	r9, r3
     7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     7c8:	2000      	movs	r0, #0
     7ca:	e7db      	b.n	784 <usart_sync_write+0x1c>
     7cc:	2000      	movs	r0, #0
     7ce:	e7d9      	b.n	784 <usart_sync_write+0x1c>
     7d0:	00004144 	.word	0x00004144
     7d4:	00000e89 	.word	0x00000e89
     7d8:	00001491 	.word	0x00001491
     7dc:	00001481 	.word	0x00001481
     7e0:	0000149b 	.word	0x0000149b

000007e4 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7e6:	46ce      	mov	lr, r9
     7e8:	4647      	mov	r7, r8
     7ea:	b580      	push	{r7, lr}
     7ec:	0004      	movs	r4, r0
     7ee:	000f      	movs	r7, r1
     7f0:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     7f2:	2800      	cmp	r0, #0
     7f4:	d01d      	beq.n	832 <usart_sync_read+0x4e>
     7f6:	2900      	cmp	r1, #0
     7f8:	d01d      	beq.n	836 <usart_sync_read+0x52>
     7fa:	0010      	movs	r0, r2
     7fc:	1e43      	subs	r3, r0, #1
     7fe:	4198      	sbcs	r0, r3
     800:	2286      	movs	r2, #134	; 0x86
     802:	0052      	lsls	r2, r2, #1
     804:	490d      	ldr	r1, [pc, #52]	; (83c <usart_sync_read+0x58>)
     806:	4b0e      	ldr	r3, [pc, #56]	; (840 <usart_sync_read+0x5c>)
     808:	4798      	blx	r3
	uint32_t                      offset = 0;
     80a:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     80c:	3408      	adds	r4, #8
     80e:	4d0d      	ldr	r5, [pc, #52]	; (844 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     810:	4b0d      	ldr	r3, [pc, #52]	; (848 <usart_sync_read+0x64>)
     812:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     814:	0020      	movs	r0, r4
     816:	47a8      	blx	r5
     818:	2800      	cmp	r0, #0
     81a:	d0fb      	beq.n	814 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     81c:	0020      	movs	r0, r4
     81e:	47c8      	blx	r9
     820:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     822:	3601      	adds	r6, #1
     824:	4546      	cmp	r6, r8
     826:	d3f5      	bcc.n	814 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     828:	0030      	movs	r0, r6
     82a:	bc0c      	pop	{r2, r3}
     82c:	4690      	mov	r8, r2
     82e:	4699      	mov	r9, r3
     830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     832:	2000      	movs	r0, #0
     834:	e7e4      	b.n	800 <usart_sync_read+0x1c>
     836:	2000      	movs	r0, #0
     838:	e7e2      	b.n	800 <usart_sync_read+0x1c>
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	00004144 	.word	0x00004144
     840:	00000e89 	.word	0x00000e89
     844:	000014a5 	.word	0x000014a5
     848:	00001489 	.word	0x00001489

0000084c <usart_sync_init>:
{
     84c:	b570      	push	{r4, r5, r6, lr}
     84e:	0005      	movs	r5, r0
     850:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     852:	2800      	cmp	r0, #0
     854:	d013      	beq.n	87e <usart_sync_init+0x32>
     856:	0008      	movs	r0, r1
     858:	1e43      	subs	r3, r0, #1
     85a:	4198      	sbcs	r0, r3
     85c:	b2c0      	uxtb	r0, r0
     85e:	2234      	movs	r2, #52	; 0x34
     860:	4908      	ldr	r1, [pc, #32]	; (884 <usart_sync_init+0x38>)
     862:	4b09      	ldr	r3, [pc, #36]	; (888 <usart_sync_init+0x3c>)
     864:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     866:	0028      	movs	r0, r5
     868:	3008      	adds	r0, #8
     86a:	0021      	movs	r1, r4
     86c:	4b07      	ldr	r3, [pc, #28]	; (88c <usart_sync_init+0x40>)
     86e:	4798      	blx	r3
	if (init_status) {
     870:	2800      	cmp	r0, #0
     872:	d103      	bne.n	87c <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     874:	4b06      	ldr	r3, [pc, #24]	; (890 <usart_sync_init+0x44>)
     876:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     878:	4b06      	ldr	r3, [pc, #24]	; (894 <usart_sync_init+0x48>)
     87a:	602b      	str	r3, [r5, #0]
}
     87c:	bd70      	pop	{r4, r5, r6, pc}
     87e:	2000      	movs	r0, #0
     880:	e7ed      	b.n	85e <usart_sync_init+0x12>
     882:	46c0      	nop			; (mov r8, r8)
     884:	00004144 	.word	0x00004144
     888:	00000e89 	.word	0x00000e89
     88c:	00001441 	.word	0x00001441
     890:	000007e5 	.word	0x000007e5
     894:	00000769 	.word	0x00000769

00000898 <usart_sync_enable>:
{
     898:	b510      	push	{r4, lr}
     89a:	0004      	movs	r4, r0
	ASSERT(descr);
     89c:	1e43      	subs	r3, r0, #1
     89e:	4198      	sbcs	r0, r3
     8a0:	b2c0      	uxtb	r0, r0
     8a2:	2253      	movs	r2, #83	; 0x53
     8a4:	4904      	ldr	r1, [pc, #16]	; (8b8 <usart_sync_enable+0x20>)
     8a6:	4b05      	ldr	r3, [pc, #20]	; (8bc <usart_sync_enable+0x24>)
     8a8:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     8aa:	0020      	movs	r0, r4
     8ac:	3008      	adds	r0, #8
     8ae:	4b04      	ldr	r3, [pc, #16]	; (8c0 <usart_sync_enable+0x28>)
     8b0:	4798      	blx	r3
}
     8b2:	2000      	movs	r0, #0
     8b4:	bd10      	pop	{r4, pc}
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	00004144 	.word	0x00004144
     8bc:	00000e89 	.word	0x00000e89
     8c0:	0000146d 	.word	0x0000146d

000008c4 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8c6:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     8c8:	4b0e      	ldr	r3, [pc, #56]	; (904 <_usb_d_find_ep+0x40>)
     8ca:	785a      	ldrb	r2, [r3, #1]
     8cc:	4290      	cmp	r0, r2
     8ce:	d017      	beq.n	900 <_usb_d_find_ep+0x3c>
     8d0:	2300      	movs	r3, #0
     8d2:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     8d4:	4f0b      	ldr	r7, [pc, #44]	; (904 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     8d6:	260f      	movs	r6, #15
     8d8:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     8da:	003d      	movs	r5, r7
     8dc:	e008      	b.n	8f0 <_usb_d_find_ep+0x2c>
     8de:	3001      	adds	r0, #1
     8e0:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     8e2:	2804      	cmp	r0, #4
     8e4:	d00a      	beq.n	8fc <_usb_d_find_ep+0x38>
     8e6:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     8e8:	18ea      	adds	r2, r5, r3
     8ea:	7852      	ldrb	r2, [r2, #1]
     8ec:	42a2      	cmp	r2, r4
     8ee:	d006      	beq.n	8fe <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     8f0:	5dd9      	ldrb	r1, [r3, r7]
     8f2:	2900      	cmp	r1, #0
     8f4:	d1f3      	bne.n	8de <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     8f6:	4296      	cmp	r6, r2
     8f8:	d1f1      	bne.n	8de <_usb_d_find_ep+0x1a>
     8fa:	e000      	b.n	8fe <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     8fc:	3805      	subs	r0, #5
}
     8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     900:	2000      	movs	r0, #0
     902:	e7fc      	b.n	8fe <_usb_d_find_ep+0x3a>
     904:	20000158 	.word	0x20000158

00000908 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     908:	2000      	movs	r0, #0
     90a:	4770      	bx	lr

0000090c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     90c:	b570      	push	{r4, r5, r6, lr}
     90e:	0004      	movs	r4, r0
     910:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     912:	4b0a      	ldr	r3, [pc, #40]	; (93c <usb_d_cb_trans_more+0x30>)
     914:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     916:	0142      	lsls	r2, r0, #5
     918:	4b09      	ldr	r3, [pc, #36]	; (940 <usb_d_cb_trans_more+0x34>)
     91a:	189b      	adds	r3, r3, r2
     91c:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     91e:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     920:	2a03      	cmp	r2, #3
     922:	d001      	beq.n	928 <usb_d_cb_trans_more+0x1c>
}
     924:	0018      	movs	r0, r3
     926:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     928:	0140      	lsls	r0, r0, #5
     92a:	4b05      	ldr	r3, [pc, #20]	; (940 <usb_d_cb_trans_more+0x34>)
     92c:	1818      	adds	r0, r3, r0
     92e:	6983      	ldr	r3, [r0, #24]
     930:	0029      	movs	r1, r5
     932:	0020      	movs	r0, r4
     934:	4798      	blx	r3
     936:	0003      	movs	r3, r0
     938:	e7f4      	b.n	924 <usb_d_cb_trans_more+0x18>
     93a:	46c0      	nop			; (mov r8, r8)
     93c:	000008c5 	.word	0x000008c5
     940:	20000158 	.word	0x20000158

00000944 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     944:	b5f0      	push	{r4, r5, r6, r7, lr}
     946:	b085      	sub	sp, #20
     948:	0005      	movs	r5, r0
     94a:	000f      	movs	r7, r1
     94c:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     94e:	4b51      	ldr	r3, [pc, #324]	; (a94 <_usb_d_cb_trans_done+0x150>)
     950:	4798      	blx	r3
     952:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     954:	2f00      	cmp	r7, #0
     956:	d162      	bne.n	a1e <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     958:	4b4f      	ldr	r3, [pc, #316]	; (a98 <_usb_d_cb_trans_done+0x154>)
     95a:	0142      	lsls	r2, r0, #5
     95c:	1899      	adds	r1, r3, r2
     95e:	2000      	movs	r0, #0
     960:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     962:	5cd3      	ldrb	r3, [r2, r3]
     964:	2b00      	cmp	r3, #0
     966:	d00e      	beq.n	986 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     968:	0162      	lsls	r2, r4, #5
     96a:	4b4b      	ldr	r3, [pc, #300]	; (a98 <_usb_d_cb_trans_done+0x154>)
     96c:	189b      	adds	r3, r3, r2
     96e:	2201      	movs	r2, #1
     970:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     972:	0164      	lsls	r4, r4, #5
     974:	4b48      	ldr	r3, [pc, #288]	; (a98 <_usb_d_cb_trans_done+0x154>)
     976:	191c      	adds	r4, r3, r4
     978:	78e1      	ldrb	r1, [r4, #3]
     97a:	69e3      	ldr	r3, [r4, #28]
     97c:	0032      	movs	r2, r6
     97e:	0028      	movs	r0, r5
     980:	4798      	blx	r3
}
     982:	b005      	add	sp, #20
     984:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     986:	788b      	ldrb	r3, [r1, #2]
     988:	2b03      	cmp	r3, #3
     98a:	d00c      	beq.n	9a6 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     98c:	4b42      	ldr	r3, [pc, #264]	; (a98 <_usb_d_cb_trans_done+0x154>)
     98e:	0162      	lsls	r2, r4, #5
     990:	320c      	adds	r2, #12
     992:	189a      	adds	r2, r3, r2
     994:	0164      	lsls	r4, r4, #5
     996:	191c      	adds	r4, r3, r4
     998:	7860      	ldrb	r0, [r4, #1]
     99a:	2100      	movs	r1, #0
     99c:	69e3      	ldr	r3, [r4, #28]
     99e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     9a0:	2302      	movs	r3, #2
     9a2:	70a3      	strb	r3, [r4, #2]
     9a4:	e7ed      	b.n	982 <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     9a6:	4a3c      	ldr	r2, [pc, #240]	; (a98 <_usb_d_cb_trans_done+0x154>)
     9a8:	000b      	movs	r3, r1
     9aa:	250c      	movs	r5, #12
     9ac:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     9ae:	0161      	lsls	r1, r4, #5
     9b0:	310c      	adds	r1, #12
     9b2:	1852      	adds	r2, r2, r1
     9b4:	7858      	ldrb	r0, [r3, #1]
     9b6:	69db      	ldr	r3, [r3, #28]
     9b8:	2101      	movs	r1, #1
     9ba:	4798      	blx	r3
		if (err) {
     9bc:	2800      	cmp	r0, #0
     9be:	d017      	beq.n	9f0 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     9c0:	0162      	lsls	r2, r4, #5
     9c2:	4b35      	ldr	r3, [pc, #212]	; (a98 <_usb_d_cb_trans_done+0x154>)
     9c4:	189b      	adds	r3, r3, r2
     9c6:	2205      	movs	r2, #5
     9c8:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     9ca:	3a03      	subs	r2, #3
     9cc:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     9ce:	2d00      	cmp	r5, #0
     9d0:	db09      	blt.n	9e6 <_usb_d_cb_trans_done+0xa2>
     9d2:	0164      	lsls	r4, r4, #5
     9d4:	4b30      	ldr	r3, [pc, #192]	; (a98 <_usb_d_cb_trans_done+0x154>)
     9d6:	191c      	adds	r4, r3, r4
     9d8:	7860      	ldrb	r0, [r4, #1]
     9da:	2380      	movs	r3, #128	; 0x80
     9dc:	4318      	orrs	r0, r3
     9de:	2101      	movs	r1, #1
     9e0:	4b2e      	ldr	r3, [pc, #184]	; (a9c <_usb_d_cb_trans_done+0x158>)
     9e2:	4798      	blx	r3
     9e4:	e7cd      	b.n	982 <_usb_d_cb_trans_done+0x3e>
     9e6:	0164      	lsls	r4, r4, #5
     9e8:	4b2b      	ldr	r3, [pc, #172]	; (a98 <_usb_d_cb_trans_done+0x154>)
     9ea:	191c      	adds	r4, r3, r4
     9ec:	7860      	ldrb	r0, [r4, #1]
     9ee:	e7f6      	b.n	9de <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     9f0:	0164      	lsls	r4, r4, #5
     9f2:	4b29      	ldr	r3, [pc, #164]	; (a98 <_usb_d_cb_trans_done+0x154>)
     9f4:	191c      	adds	r4, r3, r4
     9f6:	2304      	movs	r3, #4
     9f8:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     9fa:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     9fc:	2200      	movs	r2, #0
     9fe:	9201      	str	r2, [sp, #4]
     a00:	9202      	str	r2, [sp, #8]
     a02:	2d00      	cmp	r5, #0
     a04:	db08      	blt.n	a18 <_usb_d_cb_trans_done+0xd4>
     a06:	3280      	adds	r2, #128	; 0x80
     a08:	4313      	orrs	r3, r2
     a0a:	a801      	add	r0, sp, #4
     a0c:	7203      	strb	r3, [r0, #8]
     a0e:	2301      	movs	r3, #1
     a10:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     a12:	4b23      	ldr	r3, [pc, #140]	; (aa0 <_usb_d_cb_trans_done+0x15c>)
     a14:	4798      	blx	r3
     a16:	e7b4      	b.n	982 <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     a18:	220f      	movs	r2, #15
     a1a:	4013      	ands	r3, r2
     a1c:	e7f5      	b.n	a0a <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     a1e:	2f01      	cmp	r7, #1
     a20:	d00a      	beq.n	a38 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     a22:	2f02      	cmp	r7, #2
     a24:	d01d      	beq.n	a62 <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     a26:	2f03      	cmp	r7, #3
     a28:	d02c      	beq.n	a84 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     a2a:	0142      	lsls	r2, r0, #5
     a2c:	4b1a      	ldr	r3, [pc, #104]	; (a98 <_usb_d_cb_trans_done+0x154>)
     a2e:	189b      	adds	r3, r3, r2
     a30:	2206      	movs	r2, #6
     a32:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     a34:	70da      	strb	r2, [r3, #3]
     a36:	e79c      	b.n	972 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     a38:	4b17      	ldr	r3, [pc, #92]	; (a98 <_usb_d_cb_trans_done+0x154>)
     a3a:	0142      	lsls	r2, r0, #5
     a3c:	1899      	adds	r1, r3, r2
     a3e:	2002      	movs	r0, #2
     a40:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     a42:	5cd3      	ldrb	r3, [r2, r3]
     a44:	2b00      	cmp	r3, #0
     a46:	d005      	beq.n	a54 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     a48:	0162      	lsls	r2, r4, #5
     a4a:	4b13      	ldr	r3, [pc, #76]	; (a98 <_usb_d_cb_trans_done+0x154>)
     a4c:	189b      	adds	r3, r3, r2
     a4e:	2205      	movs	r2, #5
     a50:	709a      	strb	r2, [r3, #2]
     a52:	e78e      	b.n	972 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     a54:	2202      	movs	r2, #2
     a56:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     a58:	2100      	movs	r1, #0
     a5a:	0028      	movs	r0, r5
     a5c:	4b0f      	ldr	r3, [pc, #60]	; (a9c <_usb_d_cb_trans_done+0x158>)
     a5e:	4798      	blx	r3
     a60:	e787      	b.n	972 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     a62:	4b0d      	ldr	r3, [pc, #52]	; (a98 <_usb_d_cb_trans_done+0x154>)
     a64:	0142      	lsls	r2, r0, #5
     a66:	1899      	adds	r1, r3, r2
     a68:	2004      	movs	r0, #4
     a6a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     a6c:	5cd3      	ldrb	r3, [r2, r3]
     a6e:	2b00      	cmp	r3, #0
     a70:	d005      	beq.n	a7e <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     a72:	0162      	lsls	r2, r4, #5
     a74:	4b08      	ldr	r3, [pc, #32]	; (a98 <_usb_d_cb_trans_done+0x154>)
     a76:	189b      	adds	r3, r3, r2
     a78:	2201      	movs	r2, #1
     a7a:	709a      	strb	r2, [r3, #2]
     a7c:	e779      	b.n	972 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     a7e:	2302      	movs	r3, #2
     a80:	708b      	strb	r3, [r1, #2]
			return;
     a82:	e77e      	b.n	982 <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     a84:	0142      	lsls	r2, r0, #5
     a86:	4b04      	ldr	r3, [pc, #16]	; (a98 <_usb_d_cb_trans_done+0x154>)
     a88:	189b      	adds	r3, r3, r2
     a8a:	2200      	movs	r2, #0
     a8c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     a8e:	3205      	adds	r2, #5
     a90:	70da      	strb	r2, [r3, #3]
     a92:	e76e      	b.n	972 <_usb_d_cb_trans_done+0x2e>
     a94:	000008c5 	.word	0x000008c5
     a98:	20000158 	.word	0x20000158
     a9c:	000025d5 	.word	0x000025d5
     aa0:	000027a9 	.word	0x000027a9

00000aa4 <usb_d_cb_trans_setup>:
{
     aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
     aa6:	46c6      	mov	lr, r8
     aa8:	b500      	push	{lr}
     aaa:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     aac:	4b1d      	ldr	r3, [pc, #116]	; (b24 <usb_d_cb_trans_setup+0x80>)
     aae:	4798      	blx	r3
     ab0:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     ab2:	0145      	lsls	r5, r0, #5
     ab4:	350c      	adds	r5, #12
     ab6:	4b1c      	ldr	r3, [pc, #112]	; (b28 <usb_d_cb_trans_setup+0x84>)
     ab8:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     aba:	0029      	movs	r1, r5
     abc:	0020      	movs	r0, r4
     abe:	4b1b      	ldr	r3, [pc, #108]	; (b2c <usb_d_cb_trans_setup+0x88>)
     ac0:	4798      	blx	r3
	if (n != 8) {
     ac2:	b2c0      	uxtb	r0, r0
     ac4:	2808      	cmp	r0, #8
     ac6:	d00a      	beq.n	ade <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     ac8:	2101      	movs	r1, #1
     aca:	0020      	movs	r0, r4
     acc:	4d18      	ldr	r5, [pc, #96]	; (b30 <usb_d_cb_trans_setup+0x8c>)
     ace:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     ad0:	2080      	movs	r0, #128	; 0x80
     ad2:	4320      	orrs	r0, r4
     ad4:	2101      	movs	r1, #1
     ad6:	47a8      	blx	r5
}
     ad8:	bc04      	pop	{r2}
     ada:	4690      	mov	r8, r2
     adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     ade:	2100      	movs	r1, #0
     ae0:	0020      	movs	r0, r4
     ae2:	4b13      	ldr	r3, [pc, #76]	; (b30 <usb_d_cb_trans_setup+0x8c>)
     ae4:	4698      	mov	r8, r3
     ae6:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     ae8:	2780      	movs	r7, #128	; 0x80
     aea:	4327      	orrs	r7, r4
     aec:	2100      	movs	r1, #0
     aee:	0038      	movs	r0, r7
     af0:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     af2:	0172      	lsls	r2, r6, #5
     af4:	4b0c      	ldr	r3, [pc, #48]	; (b28 <usb_d_cb_trans_setup+0x84>)
     af6:	189b      	adds	r3, r3, r2
     af8:	2201      	movs	r2, #1
     afa:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     afc:	695b      	ldr	r3, [r3, #20]
     afe:	0029      	movs	r1, r5
     b00:	0020      	movs	r0, r4
     b02:	4798      	blx	r3
     b04:	2800      	cmp	r0, #0
     b06:	d1e7      	bne.n	ad8 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     b08:	0176      	lsls	r6, r6, #5
     b0a:	4b07      	ldr	r3, [pc, #28]	; (b28 <usb_d_cb_trans_setup+0x84>)
     b0c:	199e      	adds	r6, r3, r6
     b0e:	2305      	movs	r3, #5
     b10:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     b12:	2101      	movs	r1, #1
     b14:	0020      	movs	r0, r4
     b16:	4c06      	ldr	r4, [pc, #24]	; (b30 <usb_d_cb_trans_setup+0x8c>)
     b18:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     b1a:	2101      	movs	r1, #1
     b1c:	0038      	movs	r0, r7
     b1e:	47a0      	blx	r4
     b20:	e7da      	b.n	ad8 <usb_d_cb_trans_setup+0x34>
     b22:	46c0      	nop			; (mov r8, r8)
     b24:	000008c5 	.word	0x000008c5
     b28:	20000158 	.word	0x20000158
     b2c:	00002739 	.word	0x00002739
     b30:	000025d5 	.word	0x000025d5

00000b34 <usb_d_init>:

int32_t usb_d_init(void)
{
     b34:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     b36:	4b10      	ldr	r3, [pc, #64]	; (b78 <usb_d_init+0x44>)
     b38:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     b3a:	2800      	cmp	r0, #0
     b3c:	db1b      	blt.n	b76 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     b3e:	4c0f      	ldr	r4, [pc, #60]	; (b7c <usb_d_init+0x48>)
     b40:	2280      	movs	r2, #128	; 0x80
     b42:	2100      	movs	r1, #0
     b44:	0020      	movs	r0, r4
     b46:	4b0e      	ldr	r3, [pc, #56]	; (b80 <usb_d_init+0x4c>)
     b48:	4798      	blx	r3
     b4a:	0023      	movs	r3, r4
     b4c:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     b4e:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     b50:	4a0c      	ldr	r2, [pc, #48]	; (b84 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     b52:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     b54:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     b56:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     b58:	61da      	str	r2, [r3, #28]
     b5a:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     b5c:	42a3      	cmp	r3, r4
     b5e:	d1f8      	bne.n	b52 <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     b60:	4909      	ldr	r1, [pc, #36]	; (b88 <usb_d_init+0x54>)
     b62:	2000      	movs	r0, #0
     b64:	4c09      	ldr	r4, [pc, #36]	; (b8c <usb_d_init+0x58>)
     b66:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     b68:	4909      	ldr	r1, [pc, #36]	; (b90 <usb_d_init+0x5c>)
     b6a:	2001      	movs	r0, #1
     b6c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     b6e:	4909      	ldr	r1, [pc, #36]	; (b94 <usb_d_init+0x60>)
     b70:	2002      	movs	r0, #2
     b72:	47a0      	blx	r4
	return ERR_NONE;
     b74:	2000      	movs	r0, #0
}
     b76:	bd10      	pop	{r4, pc}
     b78:	00001fb5 	.word	0x00001fb5
     b7c:	20000158 	.word	0x20000158
     b80:	00003937 	.word	0x00003937
     b84:	00000909 	.word	0x00000909
     b88:	00000aa5 	.word	0x00000aa5
     b8c:	000029e1 	.word	0x000029e1
     b90:	0000090d 	.word	0x0000090d
     b94:	00000945 	.word	0x00000945

00000b98 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     b98:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     b9a:	4b01      	ldr	r3, [pc, #4]	; (ba0 <usb_d_register_callback+0x8>)
     b9c:	4798      	blx	r3
}
     b9e:	bd10      	pop	{r4, pc}
     ba0:	000029bd 	.word	0x000029bd

00000ba4 <usb_d_enable>:

int32_t usb_d_enable(void)
{
     ba4:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     ba6:	4b01      	ldr	r3, [pc, #4]	; (bac <usb_d_enable+0x8>)
     ba8:	4798      	blx	r3
}
     baa:	bd10      	pop	{r4, pc}
     bac:	00002091 	.word	0x00002091

00000bb0 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     bb0:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     bb2:	4b01      	ldr	r3, [pc, #4]	; (bb8 <usb_d_attach+0x8>)
     bb4:	4798      	blx	r3
}
     bb6:	bd10      	pop	{r4, pc}
     bb8:	000020e1 	.word	0x000020e1

00000bbc <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     bbc:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     bbe:	4b01      	ldr	r3, [pc, #4]	; (bc4 <usb_d_set_address+0x8>)
     bc0:	4798      	blx	r3
}
     bc2:	bd10      	pop	{r4, pc}
     bc4:	000020f1 	.word	0x000020f1

00000bc8 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bca:	0005      	movs	r5, r0
     bcc:	000e      	movs	r6, r1
     bce:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     bd0:	4b0f      	ldr	r3, [pc, #60]	; (c10 <usb_d_ep_init+0x48>)
     bd2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     bd4:	2800      	cmp	r0, #0
     bd6:	da14      	bge.n	c02 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     bd8:	20ff      	movs	r0, #255	; 0xff
     bda:	4b0d      	ldr	r3, [pc, #52]	; (c10 <usb_d_ep_init+0x48>)
     bdc:	4798      	blx	r3
     bde:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     be0:	db12      	blt.n	c08 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     be2:	003a      	movs	r2, r7
     be4:	0031      	movs	r1, r6
     be6:	0028      	movs	r0, r5
     be8:	4b0a      	ldr	r3, [pc, #40]	; (c14 <usb_d_ep_init+0x4c>)
     bea:	4798      	blx	r3
	if (rc < 0) {
     bec:	2800      	cmp	r0, #0
     bee:	db07      	blt.n	c00 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     bf0:	4a09      	ldr	r2, [pc, #36]	; (c18 <usb_d_ep_init+0x50>)
     bf2:	0164      	lsls	r4, r4, #5
     bf4:	1913      	adds	r3, r2, r4
     bf6:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     bf8:	2303      	movs	r3, #3
     bfa:	401e      	ands	r6, r3
     bfc:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
     bfe:	2000      	movs	r0, #0
}
     c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     c02:	2014      	movs	r0, #20
     c04:	4240      	negs	r0, r0
     c06:	e7fb      	b.n	c00 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
     c08:	2015      	movs	r0, #21
     c0a:	4240      	negs	r0, r0
     c0c:	e7f8      	b.n	c00 <usb_d_ep_init+0x38>
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	000008c5 	.word	0x000008c5
     c14:	00002101 	.word	0x00002101
     c18:	20000158 	.word	0x20000158

00000c1c <usb_d_ep0_init>:
{
     c1c:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     c1e:	b282      	uxth	r2, r0
     c20:	2100      	movs	r1, #0
     c22:	2000      	movs	r0, #0
     c24:	4b01      	ldr	r3, [pc, #4]	; (c2c <usb_d_ep0_init+0x10>)
     c26:	4798      	blx	r3
}
     c28:	bd10      	pop	{r4, pc}
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	00000bc9 	.word	0x00000bc9

00000c30 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     c30:	b570      	push	{r4, r5, r6, lr}
     c32:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     c34:	4b06      	ldr	r3, [pc, #24]	; (c50 <usb_d_ep_deinit+0x20>)
     c36:	4798      	blx	r3
     c38:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     c3a:	db07      	blt.n	c4c <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     c3c:	0028      	movs	r0, r5
     c3e:	4b05      	ldr	r3, [pc, #20]	; (c54 <usb_d_ep_deinit+0x24>)
     c40:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     c42:	0164      	lsls	r4, r4, #5
     c44:	4b04      	ldr	r3, [pc, #16]	; (c58 <usb_d_ep_deinit+0x28>)
     c46:	191c      	adds	r4, r3, r4
     c48:	23ff      	movs	r3, #255	; 0xff
     c4a:	7063      	strb	r3, [r4, #1]
}
     c4c:	bd70      	pop	{r4, r5, r6, pc}
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	000008c5 	.word	0x000008c5
     c54:	0000222d 	.word	0x0000222d
     c58:	20000158 	.word	0x20000158

00000c5c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     c5c:	b570      	push	{r4, r5, r6, lr}
     c5e:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     c60:	4b0e      	ldr	r3, [pc, #56]	; (c9c <usb_d_ep_enable+0x40>)
     c62:	4798      	blx	r3
     c64:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     c66:	db15      	blt.n	c94 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     c68:	0143      	lsls	r3, r0, #5
     c6a:	4a0d      	ldr	r2, [pc, #52]	; (ca0 <usb_d_ep_enable+0x44>)
     c6c:	5c9b      	ldrb	r3, [r3, r2]
     c6e:	425a      	negs	r2, r3
     c70:	4153      	adcs	r3, r2
     c72:	3301      	adds	r3, #1
     c74:	0141      	lsls	r1, r0, #5
     c76:	4a0a      	ldr	r2, [pc, #40]	; (ca0 <usb_d_ep_enable+0x44>)
     c78:	1852      	adds	r2, r2, r1
     c7a:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     c7c:	0020      	movs	r0, r4
     c7e:	4b09      	ldr	r3, [pc, #36]	; (ca4 <usb_d_ep_enable+0x48>)
     c80:	4798      	blx	r3
	if (rc < 0) {
     c82:	2800      	cmp	r0, #0
     c84:	db00      	blt.n	c88 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     c86:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     c88:	016d      	lsls	r5, r5, #5
     c8a:	4b05      	ldr	r3, [pc, #20]	; (ca0 <usb_d_ep_enable+0x44>)
     c8c:	195d      	adds	r5, r3, r5
     c8e:	2300      	movs	r3, #0
     c90:	70ab      	strb	r3, [r5, #2]
     c92:	e7f8      	b.n	c86 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
     c94:	2012      	movs	r0, #18
     c96:	4240      	negs	r0, r0
     c98:	e7f5      	b.n	c86 <usb_d_ep_enable+0x2a>
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	000008c5 	.word	0x000008c5
     ca0:	20000158 	.word	0x20000158
     ca4:	000022f9 	.word	0x000022f9

00000ca8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
     caa:	46d6      	mov	lr, sl
     cac:	464f      	mov	r7, r9
     cae:	4646      	mov	r6, r8
     cb0:	b5c0      	push	{r6, r7, lr}
     cb2:	b086      	sub	sp, #24
     cb4:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     cb6:	7a07      	ldrb	r7, [r0, #8]
     cb8:	0038      	movs	r0, r7
     cba:	4b40      	ldr	r3, [pc, #256]	; (dbc <usb_d_ep_transfer+0x114>)
     cbc:	4798      	blx	r3
     cbe:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     cc0:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
     cc2:	6863      	ldr	r3, [r4, #4]
     cc4:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     cc6:	2800      	cmp	r0, #0
     cc8:	da00      	bge.n	ccc <usb_d_ep_transfer+0x24>
     cca:	e071      	b.n	db0 <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     ccc:	a804      	add	r0, sp, #16
     cce:	4b3c      	ldr	r3, [pc, #240]	; (dc0 <usb_d_ep_transfer+0x118>)
     cd0:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     cd2:	016a      	lsls	r2, r5, #5
     cd4:	4b3b      	ldr	r3, [pc, #236]	; (dc4 <usb_d_ep_transfer+0x11c>)
     cd6:	189b      	adds	r3, r3, r2
     cd8:	789a      	ldrb	r2, [r3, #2]
     cda:	2317      	movs	r3, #23
     cdc:	446b      	add	r3, sp
     cde:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
     ce0:	781b      	ldrb	r3, [r3, #0]
     ce2:	2b01      	cmp	r3, #1
     ce4:	d010      	beq.n	d08 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     ce6:	a804      	add	r0, sp, #16
     ce8:	4b37      	ldr	r3, [pc, #220]	; (dc8 <usb_d_ep_transfer+0x120>)
     cea:	4798      	blx	r3
		switch (state) {
     cec:	2317      	movs	r3, #23
     cee:	446b      	add	r3, sp
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	b2db      	uxtb	r3, r3
     cf4:	2b05      	cmp	r3, #5
     cf6:	d05e      	beq.n	db6 <usb_d_ep_transfer+0x10e>
     cf8:	2b06      	cmp	r3, #6
     cfa:	d023      	beq.n	d44 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     cfc:	2001      	movs	r0, #1
		switch (state) {
     cfe:	2b00      	cmp	r3, #0
     d00:	d13c      	bne.n	d7c <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
     d02:	2013      	movs	r0, #19
     d04:	4240      	negs	r0, r0
     d06:	e039      	b.n	d7c <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     d08:	4b2e      	ldr	r3, [pc, #184]	; (dc4 <usb_d_ep_transfer+0x11c>)
     d0a:	4699      	mov	r9, r3
     d0c:	016b      	lsls	r3, r5, #5
     d0e:	469a      	mov	sl, r3
     d10:	464b      	mov	r3, r9
     d12:	4453      	add	r3, sl
     d14:	2203      	movs	r2, #3
     d16:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     d18:	a804      	add	r0, sp, #16
     d1a:	4b2b      	ldr	r3, [pc, #172]	; (dc8 <usb_d_ep_transfer+0x120>)
     d1c:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     d1e:	464b      	mov	r3, r9
     d20:	4652      	mov	r2, sl
     d22:	5cd3      	ldrb	r3, [r2, r3]
     d24:	2b00      	cmp	r3, #0
     d26:	d010      	beq.n	d4a <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     d28:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     d2a:	1e72      	subs	r2, r6, #1
     d2c:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     d2e:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
     d30:	6822      	ldr	r2, [r4, #0]
     d32:	9201      	str	r2, [sp, #4]
     d34:	4642      	mov	r2, r8
     d36:	9202      	str	r2, [sp, #8]
     d38:	b27f      	sxtb	r7, r7
     d3a:	2f00      	cmp	r7, #0
     d3c:	db17      	blt.n	d6e <usb_d_ep_transfer+0xc6>
     d3e:	220f      	movs	r2, #15
     d40:	4013      	ands	r3, r2
     d42:	e016      	b.n	d72 <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
     d44:	2010      	movs	r0, #16
     d46:	4240      	negs	r0, r0
     d48:	e018      	b.n	d7c <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     d4a:	016b      	lsls	r3, r5, #5
     d4c:	4a1d      	ldr	r2, [pc, #116]	; (dc4 <usb_d_ep_transfer+0x11c>)
     d4e:	18d2      	adds	r2, r2, r3
     d50:	7cd1      	ldrb	r1, [r2, #19]
     d52:	0209      	lsls	r1, r1, #8
     d54:	7c93      	ldrb	r3, [r2, #18]
     d56:	185b      	adds	r3, r3, r1
     d58:	b29b      	uxth	r3, r3
		if (req_len == 0) {
     d5a:	2b00      	cmp	r3, #0
     d5c:	d114      	bne.n	d88 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     d5e:	2304      	movs	r3, #4
     d60:	7093      	strb	r3, [r2, #2]
			len                 = 0;
     d62:	2200      	movs	r2, #0
			zlp                 = true;
     d64:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     d66:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
     d68:	6821      	ldr	r1, [r4, #0]
     d6a:	9101      	str	r1, [sp, #4]
     d6c:	9202      	str	r2, [sp, #8]
     d6e:	2280      	movs	r2, #128	; 0x80
     d70:	4313      	orrs	r3, r2
     d72:	a801      	add	r0, sp, #4
     d74:	7203      	strb	r3, [r0, #8]
     d76:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     d78:	4b14      	ldr	r3, [pc, #80]	; (dcc <usb_d_ep_transfer+0x124>)
     d7a:	4798      	blx	r3
	return rc;
}
     d7c:	b006      	add	sp, #24
     d7e:	bc1c      	pop	{r2, r3, r4}
     d80:	4690      	mov	r8, r2
     d82:	4699      	mov	r9, r3
     d84:	46a2      	mov	sl, r4
     d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d88:	4642      	mov	r2, r8
     d8a:	429a      	cmp	r2, r3
     d8c:	d900      	bls.n	d90 <usb_d_ep_transfer+0xe8>
     d8e:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     d90:	016d      	lsls	r5, r5, #5
     d92:	490c      	ldr	r1, [pc, #48]	; (dc4 <usb_d_ep_transfer+0x11c>)
     d94:	194d      	adds	r5, r1, r5
			if (dir) {
     d96:	7b29      	ldrb	r1, [r5, #12]
     d98:	297f      	cmp	r1, #127	; 0x7f
     d9a:	d805      	bhi.n	da8 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     d9c:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
     d9e:	6821      	ldr	r1, [r4, #0]
     da0:	9101      	str	r1, [sp, #4]
     da2:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     da4:	2600      	movs	r6, #0
     da6:	e7ca      	b.n	d3e <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
     da8:	429a      	cmp	r2, r3
     daa:	41b6      	sbcs	r6, r6
     dac:	4276      	negs	r6, r6
     dae:	e7da      	b.n	d66 <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
     db0:	2012      	movs	r0, #18
     db2:	4240      	negs	r0, r0
     db4:	e7e2      	b.n	d7c <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
     db6:	2002      	movs	r0, #2
     db8:	e7e0      	b.n	d7c <usb_d_ep_transfer+0xd4>
     dba:	46c0      	nop			; (mov r8, r8)
     dbc:	000008c5 	.word	0x000008c5
     dc0:	000004d9 	.word	0x000004d9
     dc4:	20000158 	.word	0x20000158
     dc8:	000004e7 	.word	0x000004e7
     dcc:	000027a9 	.word	0x000027a9

00000dd0 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     dd0:	b570      	push	{r4, r5, r6, lr}
     dd2:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     dd4:	2900      	cmp	r1, #0
     dd6:	d005      	beq.n	de4 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     dd8:	2901      	cmp	r1, #1
     dda:	d021      	beq.n	e20 <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     ddc:	2102      	movs	r1, #2
     dde:	4b13      	ldr	r3, [pc, #76]	; (e2c <usb_d_ep_halt+0x5c>)
     de0:	4798      	blx	r3
	}
}
     de2:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     de4:	4b12      	ldr	r3, [pc, #72]	; (e30 <usb_d_ep_halt+0x60>)
     de6:	4798      	blx	r3
     de8:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
     dea:	db1c      	blt.n	e26 <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     dec:	2102      	movs	r1, #2
     dee:	0020      	movs	r0, r4
     df0:	4b0e      	ldr	r3, [pc, #56]	; (e2c <usb_d_ep_halt+0x5c>)
     df2:	4798      	blx	r3
     df4:	2800      	cmp	r0, #0
     df6:	d0f4      	beq.n	de2 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     df8:	2100      	movs	r1, #0
     dfa:	0020      	movs	r0, r4
     dfc:	4b0b      	ldr	r3, [pc, #44]	; (e2c <usb_d_ep_halt+0x5c>)
     dfe:	4798      	blx	r3
		if (rc < 0) {
     e00:	2800      	cmp	r0, #0
     e02:	dbee      	blt.n	de2 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     e04:	016d      	lsls	r5, r5, #5
     e06:	4b0b      	ldr	r3, [pc, #44]	; (e34 <usb_d_ep_halt+0x64>)
     e08:	195d      	adds	r5, r3, r5
     e0a:	2301      	movs	r3, #1
     e0c:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     e0e:	3302      	adds	r3, #2
     e10:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     e12:	69eb      	ldr	r3, [r5, #28]
     e14:	2200      	movs	r2, #0
     e16:	2103      	movs	r1, #3
     e18:	0020      	movs	r0, r4
     e1a:	4798      	blx	r3
	return ERR_NONE;
     e1c:	2000      	movs	r0, #0
     e1e:	e7e0      	b.n	de2 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     e20:	4b02      	ldr	r3, [pc, #8]	; (e2c <usb_d_ep_halt+0x5c>)
     e22:	4798      	blx	r3
     e24:	e7dd      	b.n	de2 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
     e26:	2012      	movs	r0, #18
     e28:	4240      	negs	r0, r0
     e2a:	e7da      	b.n	de2 <usb_d_ep_halt+0x12>
     e2c:	000025d5 	.word	0x000025d5
     e30:	000008c5 	.word	0x000008c5
     e34:	20000158 	.word	0x20000158

00000e38 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     e38:	b570      	push	{r4, r5, r6, lr}
     e3a:	000d      	movs	r5, r1
     e3c:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     e3e:	4b0f      	ldr	r3, [pc, #60]	; (e7c <usb_d_ep_register_callback+0x44>)
     e40:	4798      	blx	r3
     e42:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     e44:	1e22      	subs	r2, r4, #0
     e46:	d008      	beq.n	e5a <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
     e48:	2b00      	cmp	r3, #0
     e4a:	db05      	blt.n	e58 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
     e4c:	2d01      	cmp	r5, #1
     e4e:	d00b      	beq.n	e68 <usb_d_ep_register_callback+0x30>
     e50:	2d00      	cmp	r5, #0
     e52:	d004      	beq.n	e5e <usb_d_ep_register_callback+0x26>
     e54:	2d02      	cmp	r5, #2
     e56:	d00c      	beq.n	e72 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
     e58:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     e5a:	4a09      	ldr	r2, [pc, #36]	; (e80 <usb_d_ep_register_callback+0x48>)
     e5c:	e7f4      	b.n	e48 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     e5e:	0140      	lsls	r0, r0, #5
     e60:	4b08      	ldr	r3, [pc, #32]	; (e84 <usb_d_ep_register_callback+0x4c>)
     e62:	1818      	adds	r0, r3, r0
     e64:	6142      	str	r2, [r0, #20]
		break;
     e66:	e7f7      	b.n	e58 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     e68:	0140      	lsls	r0, r0, #5
     e6a:	4b06      	ldr	r3, [pc, #24]	; (e84 <usb_d_ep_register_callback+0x4c>)
     e6c:	1818      	adds	r0, r3, r0
     e6e:	6182      	str	r2, [r0, #24]
		break;
     e70:	e7f2      	b.n	e58 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     e72:	0140      	lsls	r0, r0, #5
     e74:	4b03      	ldr	r3, [pc, #12]	; (e84 <usb_d_ep_register_callback+0x4c>)
     e76:	1818      	adds	r0, r3, r0
     e78:	61c2      	str	r2, [r0, #28]
		break;
     e7a:	e7ed      	b.n	e58 <usb_d_ep_register_callback+0x20>
     e7c:	000008c5 	.word	0x000008c5
     e80:	00000909 	.word	0x00000909
     e84:	20000158 	.word	0x20000158

00000e88 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     e88:	2800      	cmp	r0, #0
     e8a:	d100      	bne.n	e8e <assert+0x6>
		__asm("BKPT #0");
     e8c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     e8e:	4770      	bx	lr

00000e90 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     e90:	6803      	ldr	r3, [r0, #0]
     e92:	2b00      	cmp	r3, #0
     e94:	d00a      	beq.n	eac <is_list_element+0x1c>
		if (it == element) {
     e96:	428b      	cmp	r3, r1
     e98:	d00a      	beq.n	eb0 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     e9a:	681b      	ldr	r3, [r3, #0]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d003      	beq.n	ea8 <is_list_element+0x18>
		if (it == element) {
     ea0:	4299      	cmp	r1, r3
     ea2:	d1fa      	bne.n	e9a <is_list_element+0xa>
			return true;
     ea4:	2001      	movs	r0, #1
     ea6:	e000      	b.n	eaa <is_list_element+0x1a>
		}
	}

	return false;
     ea8:	2000      	movs	r0, #0
}
     eaa:	4770      	bx	lr
	return false;
     eac:	2000      	movs	r0, #0
     eae:	e7fc      	b.n	eaa <is_list_element+0x1a>
			return true;
     eb0:	2001      	movs	r0, #1
     eb2:	e7fa      	b.n	eaa <is_list_element+0x1a>

00000eb4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     eb4:	b570      	push	{r4, r5, r6, lr}
     eb6:	0004      	movs	r4, r0
     eb8:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     eba:	4b06      	ldr	r3, [pc, #24]	; (ed4 <list_insert_as_head+0x20>)
     ebc:	4798      	blx	r3
     ebe:	2301      	movs	r3, #1
     ec0:	4058      	eors	r0, r3
     ec2:	b2c0      	uxtb	r0, r0
     ec4:	2239      	movs	r2, #57	; 0x39
     ec6:	4904      	ldr	r1, [pc, #16]	; (ed8 <list_insert_as_head+0x24>)
     ec8:	4b04      	ldr	r3, [pc, #16]	; (edc <list_insert_as_head+0x28>)
     eca:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     ecc:	6823      	ldr	r3, [r4, #0]
     ece:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     ed0:	6025      	str	r5, [r4, #0]
}
     ed2:	bd70      	pop	{r4, r5, r6, pc}
     ed4:	00000e91 	.word	0x00000e91
     ed8:	00004160 	.word	0x00004160
     edc:	00000e89 	.word	0x00000e89

00000ee0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     ee0:	6803      	ldr	r3, [r0, #0]
     ee2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     ee4:	6001      	str	r1, [r0, #0]
}
     ee6:	4770      	bx	lr

00000ee8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     ee8:	b570      	push	{r4, r5, r6, lr}
     eea:	0005      	movs	r5, r0
     eec:	000e      	movs	r6, r1
	struct list_element *it = list->head;
     eee:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
     ef0:	4b0a      	ldr	r3, [pc, #40]	; (f1c <list_insert_at_end+0x34>)
     ef2:	4798      	blx	r3
     ef4:	2301      	movs	r3, #1
     ef6:	4058      	eors	r0, r3
     ef8:	b2c0      	uxtb	r0, r0
     efa:	224f      	movs	r2, #79	; 0x4f
     efc:	4908      	ldr	r1, [pc, #32]	; (f20 <list_insert_at_end+0x38>)
     efe:	4b09      	ldr	r3, [pc, #36]	; (f24 <list_insert_at_end+0x3c>)
     f00:	4798      	blx	r3

	if (!list->head) {
     f02:	682b      	ldr	r3, [r5, #0]
     f04:	2b00      	cmp	r3, #0
     f06:	d103      	bne.n	f10 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
     f08:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
     f0a:	6033      	str	r3, [r6, #0]
		return;
     f0c:	e005      	b.n	f1a <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
     f0e:	001c      	movs	r4, r3
	while (it->next) {
     f10:	6823      	ldr	r3, [r4, #0]
     f12:	2b00      	cmp	r3, #0
     f14:	d1fb      	bne.n	f0e <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
     f16:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
     f18:	6033      	str	r3, [r6, #0]
}
     f1a:	bd70      	pop	{r4, r5, r6, pc}
     f1c:	00000e91 	.word	0x00000e91
     f20:	00004160 	.word	0x00004160
     f24:	00000e89 	.word	0x00000e89

00000f28 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     f28:	6803      	ldr	r3, [r0, #0]
     f2a:	2b00      	cmp	r3, #0
     f2c:	d001      	beq.n	f32 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     f2e:	681a      	ldr	r2, [r3, #0]
     f30:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     f32:	0018      	movs	r0, r3
     f34:	4770      	bx	lr
	...

00000f38 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     f38:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     f3a:	4a06      	ldr	r2, [pc, #24]	; (f54 <_sbrk+0x1c>)
     f3c:	6812      	ldr	r2, [r2, #0]
     f3e:	2a00      	cmp	r2, #0
     f40:	d004      	beq.n	f4c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     f42:	4a04      	ldr	r2, [pc, #16]	; (f54 <_sbrk+0x1c>)
     f44:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     f46:	18c3      	adds	r3, r0, r3
     f48:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     f4a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     f4c:	4902      	ldr	r1, [pc, #8]	; (f58 <_sbrk+0x20>)
     f4e:	4a01      	ldr	r2, [pc, #4]	; (f54 <_sbrk+0x1c>)
     f50:	6011      	str	r1, [r2, #0]
     f52:	e7f6      	b.n	f42 <_sbrk+0xa>
     f54:	200001d8 	.word	0x200001d8
     f58:	20002510 	.word	0x20002510

00000f5c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     f5c:	2001      	movs	r0, #1
     f5e:	4240      	negs	r0, r0
     f60:	4770      	bx	lr

00000f62 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     f62:	2380      	movs	r3, #128	; 0x80
     f64:	019b      	lsls	r3, r3, #6
     f66:	604b      	str	r3, [r1, #4]

	return 0;
}
     f68:	2000      	movs	r0, #0
     f6a:	4770      	bx	lr

00000f6c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     f6c:	2000      	movs	r0, #0
     f6e:	4770      	bx	lr

00000f70 <_irq_set>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     f70:	b243      	sxtb	r3, r0
     f72:	2b00      	cmp	r3, #0
     f74:	db07      	blt.n	f86 <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f76:	231f      	movs	r3, #31
     f78:	4018      	ands	r0, r3
     f7a:	3b1e      	subs	r3, #30
     f7c:	4083      	lsls	r3, r0
     f7e:	2280      	movs	r2, #128	; 0x80
     f80:	0052      	lsls	r2, r2, #1
     f82:	4901      	ldr	r1, [pc, #4]	; (f88 <_irq_set+0x18>)
     f84:	508b      	str	r3, [r1, r2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
     f86:	4770      	bx	lr
     f88:	e000e100 	.word	0xe000e100

00000f8c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     f8c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     f8e:	4b06      	ldr	r3, [pc, #24]	; (fa8 <_init_chip+0x1c>)
     f90:	685a      	ldr	r2, [r3, #4]
     f92:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     f94:	4b05      	ldr	r3, [pc, #20]	; (fac <_init_chip+0x20>)
     f96:	4798      	blx	r3
	_sysctrl_init_sources();
     f98:	4b05      	ldr	r3, [pc, #20]	; (fb0 <_init_chip+0x24>)
     f9a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     f9c:	4b05      	ldr	r3, [pc, #20]	; (fb4 <_init_chip+0x28>)
     f9e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     fa0:	20ff      	movs	r0, #255	; 0xff
     fa2:	4b05      	ldr	r3, [pc, #20]	; (fb8 <_init_chip+0x2c>)
     fa4:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     fa6:	bd10      	pop	{r4, pc}
     fa8:	41004000 	.word	0x41004000
     fac:	00001205 	.word	0x00001205
     fb0:	000014b1 	.word	0x000014b1
     fb4:	0000150d 	.word	0x0000150d
     fb8:	00001155 	.word	0x00001155

00000fbc <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     fbc:	4a20      	ldr	r2, [pc, #128]	; (1040 <_ext_irq_init+0x84>)
     fbe:	7853      	ldrb	r3, [r2, #1]
     fc0:	09db      	lsrs	r3, r3, #7
     fc2:	d1fc      	bne.n	fbe <_ext_irq_init+0x2>
     fc4:	4a1e      	ldr	r2, [pc, #120]	; (1040 <_ext_irq_init+0x84>)
     fc6:	7853      	ldrb	r3, [r2, #1]
     fc8:	09db      	lsrs	r3, r3, #7
     fca:	d1fc      	bne.n	fc6 <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     fcc:	4b1c      	ldr	r3, [pc, #112]	; (1040 <_ext_irq_init+0x84>)
     fce:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     fd0:	079b      	lsls	r3, r3, #30
     fd2:	d50a      	bpl.n	fea <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     fd4:	2200      	movs	r2, #0
     fd6:	4b1a      	ldr	r3, [pc, #104]	; (1040 <_ext_irq_init+0x84>)
     fd8:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     fda:	001a      	movs	r2, r3
     fdc:	7853      	ldrb	r3, [r2, #1]
     fde:	09db      	lsrs	r3, r3, #7
     fe0:	d1fc      	bne.n	fdc <_ext_irq_init+0x20>
     fe2:	4a17      	ldr	r2, [pc, #92]	; (1040 <_ext_irq_init+0x84>)
     fe4:	7853      	ldrb	r3, [r2, #1]
     fe6:	09db      	lsrs	r3, r3, #7
     fe8:	d1fc      	bne.n	fe4 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
     fea:	2201      	movs	r2, #1
     fec:	4b14      	ldr	r3, [pc, #80]	; (1040 <_ext_irq_init+0x84>)
     fee:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     ff0:	001a      	movs	r2, r3
     ff2:	7853      	ldrb	r3, [r2, #1]
     ff4:	09db      	lsrs	r3, r3, #7
     ff6:	d1fc      	bne.n	ff2 <_ext_irq_init+0x36>
     ff8:	4a11      	ldr	r2, [pc, #68]	; (1040 <_ext_irq_init+0x84>)
     ffa:	7853      	ldrb	r3, [r2, #1]
     ffc:	09db      	lsrs	r3, r3, #7
     ffe:	d1fc      	bne.n	ffa <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1000:	4b0f      	ldr	r3, [pc, #60]	; (1040 <_ext_irq_init+0x84>)
    1002:	220b      	movs	r2, #11
    1004:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1006:	2200      	movs	r2, #0
    1008:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    100a:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    100c:	619a      	str	r2, [r3, #24]
    100e:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    1010:	781a      	ldrb	r2, [r3, #0]
    1012:	2102      	movs	r1, #2
    1014:	430a      	orrs	r2, r1
    1016:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1018:	001a      	movs	r2, r3
    101a:	7853      	ldrb	r3, [r2, #1]
    101c:	09db      	lsrs	r3, r3, #7
    101e:	d1fc      	bne.n	101a <_ext_irq_init+0x5e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1020:	4b08      	ldr	r3, [pc, #32]	; (1044 <_ext_irq_init+0x88>)
    1022:	2210      	movs	r2, #16
    1024:	2180      	movs	r1, #128	; 0x80
    1026:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1028:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    102c:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1030:	3101      	adds	r1, #1
    1032:	31ff      	adds	r1, #255	; 0xff
    1034:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1036:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    1038:	4b03      	ldr	r3, [pc, #12]	; (1048 <_ext_irq_init+0x8c>)
    103a:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    103c:	2000      	movs	r0, #0
    103e:	4770      	bx	lr
    1040:	40001800 	.word	0x40001800
    1044:	e000e100 	.word	0xe000e100
    1048:	200001dc 	.word	0x200001dc

0000104c <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    104c:	b5f0      	push	{r4, r5, r6, r7, lr}
    104e:	46d6      	mov	lr, sl
    1050:	4647      	mov	r7, r8
    1052:	b580      	push	{r7, lr}
    1054:	b085      	sub	sp, #20
	return ((Eic *)hw)->INTFLAG.reg;
    1056:	4b29      	ldr	r3, [pc, #164]	; (10fc <EIC_Handler+0xb0>)
    1058:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    105a:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    105c:	400a      	ands	r2, r1
    105e:	9203      	str	r2, [sp, #12]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1060:	9a03      	ldr	r2, [sp, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    1062:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    1064:	4b26      	ldr	r3, [pc, #152]	; (1100 <EIC_Handler+0xb4>)
    1066:	6818      	ldr	r0, [r3, #0]
    1068:	1e43      	subs	r3, r0, #1
    106a:	4198      	sbcs	r0, r3
    106c:	b2c0      	uxtb	r0, r0
    106e:	22d2      	movs	r2, #210	; 0xd2
    1070:	4924      	ldr	r1, [pc, #144]	; (1104 <EIC_Handler+0xb8>)
    1072:	4b25      	ldr	r3, [pc, #148]	; (1108 <EIC_Handler+0xbc>)
    1074:	4798      	blx	r3

	while (flags) {
    1076:	9b03      	ldr	r3, [sp, #12]
    1078:	2b00      	cmp	r3, #0
    107a:	d039      	beq.n	10f0 <EIC_Handler+0xa4>
		pos = ffs(flags) - 1;
    107c:	4b23      	ldr	r3, [pc, #140]	; (110c <EIC_Handler+0xc0>)
    107e:	469a      	mov	sl, r3
		while (-1 != pos) {
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
    1080:	24ff      	movs	r4, #255	; 0xff
    1082:	4f23      	ldr	r7, [pc, #140]	; (1110 <EIC_Handler+0xc4>)
    1084:	9401      	str	r4, [sp, #4]

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
			}
			flags &= ~(1ul << pos);
			pos = ffs(flags) - 1;
    1086:	4698      	mov	r8, r3
    1088:	e02a      	b.n	10e0 <EIC_Handler+0x94>
					upper = middle - 1;
    108a:	3e01      	subs	r6, #1
    108c:	b2f1      	uxtb	r1, r6
			while (upper >= lower) {
    108e:	428a      	cmp	r2, r1
    1090:	d80c      	bhi.n	10ac <EIC_Handler+0x60>
				middle = (upper + lower) >> 1;
    1092:	188b      	adds	r3, r1, r2
    1094:	105b      	asrs	r3, r3, #1
    1096:	b2de      	uxtb	r6, r3
				if (_map[middle].extint == pos) {
    1098:	4023      	ands	r3, r4
    109a:	00db      	lsls	r3, r3, #3
    109c:	5ddb      	ldrb	r3, [r3, r7]
    109e:	4283      	cmp	r3, r0
    10a0:	d004      	beq.n	10ac <EIC_Handler+0x60>
				if (_map[middle].extint < pos) {
    10a2:	4298      	cmp	r0, r3
    10a4:	ddf1      	ble.n	108a <EIC_Handler+0x3e>
					lower = middle + 1;
    10a6:	3601      	adds	r6, #1
    10a8:	b2f2      	uxtb	r2, r6
    10aa:	e7f0      	b.n	108e <EIC_Handler+0x42>
			flags &= ~(1ul << pos);
    10ac:	9b03      	ldr	r3, [sp, #12]
    10ae:	002a      	movs	r2, r5
    10b0:	4082      	lsls	r2, r0
    10b2:	4393      	bics	r3, r2
    10b4:	9303      	str	r3, [sp, #12]
			pos = ffs(flags) - 1;
    10b6:	9803      	ldr	r0, [sp, #12]
    10b8:	47c0      	blx	r8
    10ba:	3801      	subs	r0, #1
    10bc:	b240      	sxtb	r0, r0
		while (-1 != pos) {
    10be:	1c43      	adds	r3, r0, #1
    10c0:	d004      	beq.n	10cc <EIC_Handler+0x80>
				if (_map[middle].extint == pos) {
    10c2:	9b01      	ldr	r3, [sp, #4]
    10c4:	2600      	movs	r6, #0
    10c6:	2100      	movs	r1, #0
    10c8:	2200      	movs	r2, #0
    10ca:	e7ea      	b.n	10a2 <EIC_Handler+0x56>
	return ((Eic *)hw)->INTFLAG.reg;
    10cc:	4b0b      	ldr	r3, [pc, #44]	; (10fc <EIC_Handler+0xb0>)
    10ce:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    10d0:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    10d2:	400a      	ands	r2, r1
    10d4:	9203      	str	r2, [sp, #12]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    10d6:	9a03      	ldr	r2, [sp, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    10d8:	611a      	str	r2, [r3, #16]
	while (flags) {
    10da:	9b03      	ldr	r3, [sp, #12]
    10dc:	2b00      	cmp	r3, #0
    10de:	d007      	beq.n	10f0 <EIC_Handler+0xa4>
		pos = ffs(flags) - 1;
    10e0:	9803      	ldr	r0, [sp, #12]
    10e2:	47d0      	blx	sl
    10e4:	3801      	subs	r0, #1
    10e6:	b240      	sxtb	r0, r0
			flags &= ~(1ul << pos);
    10e8:	2501      	movs	r5, #1
		while (-1 != pos) {
    10ea:	1c43      	adds	r3, r0, #1
    10ec:	d1e9      	bne.n	10c2 <EIC_Handler+0x76>
    10ee:	e7ed      	b.n	10cc <EIC_Handler+0x80>
	}
}
    10f0:	b005      	add	sp, #20
    10f2:	bc0c      	pop	{r2, r3}
    10f4:	4690      	mov	r8, r2
    10f6:	469a      	mov	sl, r3
    10f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10fa:	46c0      	nop			; (mov r8, r8)
    10fc:	40001800 	.word	0x40001800
    1100:	200001dc 	.word	0x200001dc
    1104:	00004188 	.word	0x00004188
    1108:	00000e89 	.word	0x00000e89
    110c:	00003889 	.word	0x00003889
    1110:	00004180 	.word	0x00004180

00001114 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1114:	4b0c      	ldr	r3, [pc, #48]	; (1148 <_event_system_init+0x34>)
    1116:	0018      	movs	r0, r3
    1118:	303a      	adds	r0, #58	; 0x3a
}

static inline void hri_evsys_write_USER_reg(const void *const hw, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER.reg = data;
    111a:	490c      	ldr	r1, [pc, #48]	; (114c <_event_system_init+0x38>)
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, user_mux_confs[i]);
    111c:	881a      	ldrh	r2, [r3, #0]
    111e:	810a      	strh	r2, [r1, #8]
    1120:	3302      	adds	r3, #2
	for (i = 0; i < EVSYS_USERS; i++) {
    1122:	4283      	cmp	r3, r0
    1124:	d1fa      	bne.n	111c <_event_system_init+0x8>
    1126:	4908      	ldr	r1, [pc, #32]	; (1148 <_event_system_init+0x34>)
    1128:	000b      	movs	r3, r1
    112a:	333c      	adds	r3, #60	; 0x3c
    112c:	316c      	adds	r1, #108	; 0x6c
	((Evsys *)hw)->CHANNEL.reg = data;
    112e:	4807      	ldr	r0, [pc, #28]	; (114c <_event_system_init+0x38>)
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, channel_confs[i]);
    1130:	cb04      	ldmia	r3!, {r2}
    1132:	6042      	str	r2, [r0, #4]
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1134:	428b      	cmp	r3, r1
    1136:	d1fb      	bne.n	1130 <_event_system_init+0x1c>
	((Evsys *)hw)->INTENSET.reg = data;
    1138:	4b04      	ldr	r3, [pc, #16]	; (114c <_event_system_init+0x38>)
    113a:	22c0      	movs	r2, #192	; 0xc0
    113c:	0092      	lsls	r2, r2, #2
    113e:	615a      	str	r2, [r3, #20]
	((Evsys *)hw)->INTENCLR.reg = ~data;
    1140:	4a03      	ldr	r2, [pc, #12]	; (1150 <_event_system_init+0x3c>)
    1142:	611a      	str	r2, [r3, #16]
	}

	hri_evsys_write_INTEN_reg(EVSYS, interrupt_cfg);

	return ERR_NONE;
}
    1144:	2000      	movs	r0, #0
    1146:	4770      	bx	lr
    1148:	000041a0 	.word	0x000041a0
    114c:	42000400 	.word	0x42000400
    1150:	fffffcff 	.word	0xfffffcff

00001154 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1154:	07c3      	lsls	r3, r0, #31
    1156:	d50a      	bpl.n	116e <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1158:	4b22      	ldr	r3, [pc, #136]	; (11e4 <_gclk_init_generators_by_fref+0x90>)
    115a:	2280      	movs	r2, #128	; 0x80
    115c:	0052      	lsls	r2, r2, #1
    115e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1160:	2283      	movs	r2, #131	; 0x83
    1162:	0252      	lsls	r2, r2, #9
    1164:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1166:	001a      	movs	r2, r3
    1168:	7853      	ldrb	r3, [r2, #1]
    116a:	09db      	lsrs	r3, r3, #7
    116c:	d1fc      	bne.n	1168 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    116e:	0783      	lsls	r3, r0, #30
    1170:	d509      	bpl.n	1186 <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
    1172:	4b1c      	ldr	r3, [pc, #112]	; (11e4 <_gclk_init_generators_by_fref+0x90>)
    1174:	2202      	movs	r2, #2
    1176:	32ff      	adds	r2, #255	; 0xff
    1178:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    117a:	4a1b      	ldr	r2, [pc, #108]	; (11e8 <_gclk_init_generators_by_fref+0x94>)
    117c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    117e:	001a      	movs	r2, r3
    1180:	7853      	ldrb	r3, [r2, #1]
    1182:	09db      	lsrs	r3, r3, #7
    1184:	d1fc      	bne.n	1180 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1186:	0743      	lsls	r3, r0, #29
    1188:	d508      	bpl.n	119c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
    118a:	4b16      	ldr	r3, [pc, #88]	; (11e4 <_gclk_init_generators_by_fref+0x90>)
    118c:	4a17      	ldr	r2, [pc, #92]	; (11ec <_gclk_init_generators_by_fref+0x98>)
    118e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1190:	4a17      	ldr	r2, [pc, #92]	; (11f0 <_gclk_init_generators_by_fref+0x9c>)
    1192:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1194:	001a      	movs	r2, r3
    1196:	7853      	ldrb	r3, [r2, #1]
    1198:	09db      	lsrs	r3, r3, #7
    119a:	d1fc      	bne.n	1196 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    119c:	0683      	lsls	r3, r0, #26
    119e:	d508      	bpl.n	11b2 <_gclk_init_generators_by_fref+0x5e>
	((Gclk *)hw)->GENDIV.reg = data;
    11a0:	4b10      	ldr	r3, [pc, #64]	; (11e4 <_gclk_init_generators_by_fref+0x90>)
    11a2:	4a14      	ldr	r2, [pc, #80]	; (11f4 <_gclk_init_generators_by_fref+0xa0>)
    11a4:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    11a6:	4a14      	ldr	r2, [pc, #80]	; (11f8 <_gclk_init_generators_by_fref+0xa4>)
    11a8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    11aa:	001a      	movs	r2, r3
    11ac:	7853      	ldrb	r3, [r2, #1]
    11ae:	09db      	lsrs	r3, r3, #7
    11b0:	d1fc      	bne.n	11ac <_gclk_init_generators_by_fref+0x58>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    11b2:	0643      	lsls	r3, r0, #25
    11b4:	d509      	bpl.n	11ca <_gclk_init_generators_by_fref+0x76>
	((Gclk *)hw)->GENDIV.reg = data;
    11b6:	4b0b      	ldr	r3, [pc, #44]	; (11e4 <_gclk_init_generators_by_fref+0x90>)
    11b8:	2283      	movs	r2, #131	; 0x83
    11ba:	0052      	lsls	r2, r2, #1
    11bc:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    11be:	4a0f      	ldr	r2, [pc, #60]	; (11fc <_gclk_init_generators_by_fref+0xa8>)
    11c0:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    11c2:	001a      	movs	r2, r3
    11c4:	7853      	ldrb	r3, [r2, #1]
    11c6:	09db      	lsrs	r3, r3, #7
    11c8:	d1fc      	bne.n	11c4 <_gclk_init_generators_by_fref+0x70>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    11ca:	0603      	lsls	r3, r0, #24
    11cc:	d509      	bpl.n	11e2 <_gclk_init_generators_by_fref+0x8e>
	((Gclk *)hw)->GENDIV.reg = data;
    11ce:	4b05      	ldr	r3, [pc, #20]	; (11e4 <_gclk_init_generators_by_fref+0x90>)
    11d0:	2208      	movs	r2, #8
    11d2:	32ff      	adds	r2, #255	; 0xff
    11d4:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    11d6:	4a0a      	ldr	r2, [pc, #40]	; (1200 <_gclk_init_generators_by_fref+0xac>)
    11d8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    11da:	001a      	movs	r2, r3
    11dc:	7853      	ldrb	r3, [r2, #1]
    11de:	09db      	lsrs	r3, r3, #7
    11e0:	d1fc      	bne.n	11dc <_gclk_init_generators_by_fref+0x88>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    11e2:	4770      	bx	lr
    11e4:	40000c00 	.word	0x40000c00
    11e8:	00090701 	.word	0x00090701
    11ec:	00000802 	.word	0x00000802
    11f0:	00090602 	.word	0x00090602
    11f4:	00002005 	.word	0x00002005
    11f8:	00090305 	.word	0x00090305
    11fc:	00090506 	.word	0x00090506
    1200:	00090307 	.word	0x00090307

00001204 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1204:	4b06      	ldr	r3, [pc, #24]	; (1220 <_pm_init+0x1c>)
    1206:	7a1a      	ldrb	r2, [r3, #8]
    1208:	b2d2      	uxtb	r2, r2
    120a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    120c:	7a5a      	ldrb	r2, [r3, #9]
    120e:	b2d2      	uxtb	r2, r2
    1210:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    1212:	7a9a      	ldrb	r2, [r3, #10]
    1214:	b2d2      	uxtb	r2, r2
    1216:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1218:	7ada      	ldrb	r2, [r3, #11]
    121a:	b2d2      	uxtb	r2, r2
    121c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    121e:	4770      	bx	lr
    1220:	40000400 	.word	0x40000400

00001224 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, clock_cycles);
    1224:	68c2      	ldr	r2, [r0, #12]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
    1226:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
    1228:	6191      	str	r1, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    122a:	7a93      	ldrb	r3, [r2, #10]
    122c:	09db      	lsrs	r3, r3, #7
    122e:	d1fc      	bne.n	122a <_rtc_timer_set_period+0x6>
}
    1230:	4770      	bx	lr

00001232 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_COMP_bf(dev->hw, 0);
    1232:	68c2      	ldr	r2, [r0, #12]
    1234:	7a93      	ldrb	r3, [r2, #10]
    1236:	09db      	lsrs	r3, r3, #7
    1238:	d1fc      	bne.n	1234 <_rtc_timer_get_period+0x2>

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_COMP_bf(const void *const hw, uint8_t index)
{
	uint32_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
    123a:	6990      	ldr	r0, [r2, #24]
}
    123c:	4770      	bx	lr

0000123e <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw);
    123e:	68c2      	ldr	r2, [r0, #12]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1240:	7a93      	ldrb	r3, [r2, #10]
    1242:	09db      	lsrs	r3, r3, #7
    1244:	d1fc      	bne.n	1240 <_rtc_timer_is_started+0x2>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    1246:	8810      	ldrh	r0, [r2, #0]
	return (bool)tmp;
    1248:	0780      	lsls	r0, r0, #30
    124a:	0fc0      	lsrs	r0, r0, #31
}
    124c:	4770      	bx	lr

0000124e <_rtc_timer_set_irq>:
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
	(void)dev;
}
    124e:	4770      	bx	lr

00001250 <_rtc_timer_init>:
{
    1250:	b570      	push	{r4, r5, r6, lr}
    1252:	0004      	movs	r4, r0
    1254:	000d      	movs	r5, r1
	ASSERT(dev);
    1256:	1e43      	subs	r3, r0, #1
    1258:	4198      	sbcs	r0, r3
    125a:	b2c0      	uxtb	r0, r0
    125c:	2233      	movs	r2, #51	; 0x33
    125e:	4910      	ldr	r1, [pc, #64]	; (12a0 <_rtc_timer_init+0x50>)
    1260:	4b10      	ldr	r3, [pc, #64]	; (12a4 <_rtc_timer_init+0x54>)
    1262:	4798      	blx	r3
	dev->hw = hw;
    1264:	60e5      	str	r5, [r4, #12]
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    1266:	2301      	movs	r3, #1
    1268:	802b      	strh	r3, [r5, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    126a:	7aab      	ldrb	r3, [r5, #10]
    126c:	09db      	lsrs	r3, r3, #7
    126e:	d1fc      	bne.n	126a <_rtc_timer_init+0x1a>
	hri_rtcmode0_wait_for_sync(dev->hw);
    1270:	68e2      	ldr	r2, [r4, #12]
    1272:	7a93      	ldrb	r3, [r2, #10]
    1274:	09db      	lsrs	r3, r3, #7
    1276:	d1fc      	bne.n	1272 <_rtc_timer_init+0x22>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    1278:	3380      	adds	r3, #128	; 0x80
    127a:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    127c:	7a93      	ldrb	r3, [r2, #10]
    127e:	09db      	lsrs	r3, r3, #7
    1280:	d1fc      	bne.n	127c <_rtc_timer_init+0x2c>
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
    1282:	68e2      	ldr	r2, [r4, #12]
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
    1284:	6993      	ldr	r3, [r2, #24]
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
    1286:	2380      	movs	r3, #128	; 0x80
    1288:	00db      	lsls	r3, r3, #3
    128a:	6193      	str	r3, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    128c:	7a93      	ldrb	r3, [r2, #10]
    128e:	09db      	lsrs	r3, r3, #7
    1290:	d1fc      	bne.n	128c <_rtc_timer_init+0x3c>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1292:	3301      	adds	r3, #1
    1294:	68e2      	ldr	r2, [r4, #12]
    1296:	71d3      	strb	r3, [r2, #7]
	_rtc_dev = dev;
    1298:	4b03      	ldr	r3, [pc, #12]	; (12a8 <_rtc_timer_init+0x58>)
    129a:	601c      	str	r4, [r3, #0]
}
    129c:	2000      	movs	r0, #0
    129e:	bd70      	pop	{r4, r5, r6, pc}
    12a0:	0000420c 	.word	0x0000420c
    12a4:	00000e89 	.word	0x00000e89
    12a8:	200001e0 	.word	0x200001e0

000012ac <_rtc_timer_deinit>:
{
    12ac:	b510      	push	{r4, lr}
    12ae:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
    12b0:	d016      	beq.n	12e0 <_rtc_timer_deinit+0x34>
    12b2:	68c0      	ldr	r0, [r0, #12]
    12b4:	1e43      	subs	r3, r0, #1
    12b6:	4198      	sbcs	r0, r3
    12b8:	b2c0      	uxtb	r0, r0
    12ba:	225e      	movs	r2, #94	; 0x5e
    12bc:	4909      	ldr	r1, [pc, #36]	; (12e4 <_rtc_timer_deinit+0x38>)
    12be:	4b0a      	ldr	r3, [pc, #40]	; (12e8 <_rtc_timer_deinit+0x3c>)
    12c0:	4798      	blx	r3
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12c2:	2108      	movs	r1, #8
    12c4:	2380      	movs	r3, #128	; 0x80
    12c6:	4a09      	ldr	r2, [pc, #36]	; (12ec <_rtc_timer_deinit+0x40>)
    12c8:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    12ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12ce:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRL_reg(dev->hw, RTC_MODE0_CTRL_SWRST);
    12d2:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    12d4:	3b7f      	subs	r3, #127	; 0x7f
    12d6:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    12d8:	7a93      	ldrb	r3, [r2, #10]
    12da:	09db      	lsrs	r3, r3, #7
    12dc:	d1fc      	bne.n	12d8 <_rtc_timer_deinit+0x2c>
}
    12de:	bd10      	pop	{r4, pc}
    12e0:	2000      	movs	r0, #0
    12e2:	e7ea      	b.n	12ba <_rtc_timer_deinit+0xe>
    12e4:	0000420c 	.word	0x0000420c
    12e8:	00000e89 	.word	0x00000e89
    12ec:	e000e100 	.word	0xe000e100

000012f0 <_rtc_timer_start>:
{
    12f0:	b510      	push	{r4, lr}
    12f2:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
    12f4:	d01d      	beq.n	1332 <_rtc_timer_start+0x42>
    12f6:	68c0      	ldr	r0, [r0, #12]
    12f8:	1e43      	subs	r3, r0, #1
    12fa:	4198      	sbcs	r0, r3
    12fc:	b2c0      	uxtb	r0, r0
    12fe:	226a      	movs	r2, #106	; 0x6a
    1300:	490d      	ldr	r1, [pc, #52]	; (1338 <_rtc_timer_start+0x48>)
    1302:	4b0e      	ldr	r3, [pc, #56]	; (133c <_rtc_timer_start+0x4c>)
    1304:	4798      	blx	r3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1306:	2208      	movs	r2, #8
    1308:	4b0d      	ldr	r3, [pc, #52]	; (1340 <_rtc_timer_start+0x50>)
    130a:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_COUNT_bf(dev->hw, 0);
    130c:	68e2      	ldr	r2, [r4, #12]
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
    130e:	6913      	ldr	r3, [r2, #16]
	((Rtc *)hw)->MODE0.COUNT.reg = tmp;
    1310:	2300      	movs	r3, #0
    1312:	6113      	str	r3, [r2, #16]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1314:	7a93      	ldrb	r3, [r2, #10]
    1316:	09db      	lsrs	r3, r3, #7
    1318:	d1fc      	bne.n	1314 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw);
    131a:	68e2      	ldr	r2, [r4, #12]
    131c:	7a93      	ldrb	r3, [r2, #10]
    131e:	09db      	lsrs	r3, r3, #7
    1320:	d1fc      	bne.n	131c <_rtc_timer_start+0x2c>
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    1322:	8813      	ldrh	r3, [r2, #0]
    1324:	2102      	movs	r1, #2
    1326:	430b      	orrs	r3, r1
    1328:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    132a:	7a93      	ldrb	r3, [r2, #10]
    132c:	09db      	lsrs	r3, r3, #7
    132e:	d1fc      	bne.n	132a <_rtc_timer_start+0x3a>
}
    1330:	bd10      	pop	{r4, pc}
    1332:	2000      	movs	r0, #0
    1334:	e7e3      	b.n	12fe <_rtc_timer_start+0xe>
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	0000420c 	.word	0x0000420c
    133c:	00000e89 	.word	0x00000e89
    1340:	e000e100 	.word	0xe000e100

00001344 <_rtc_timer_stop>:
{
    1344:	b510      	push	{r4, lr}
    1346:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
    1348:	d010      	beq.n	136c <_rtc_timer_stop+0x28>
    134a:	68c0      	ldr	r0, [r0, #12]
    134c:	1e43      	subs	r3, r0, #1
    134e:	4198      	sbcs	r0, r3
    1350:	b2c0      	uxtb	r0, r0
    1352:	2277      	movs	r2, #119	; 0x77
    1354:	4906      	ldr	r1, [pc, #24]	; (1370 <_rtc_timer_stop+0x2c>)
    1356:	4b07      	ldr	r3, [pc, #28]	; (1374 <_rtc_timer_stop+0x30>)
    1358:	4798      	blx	r3
	hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
    135a:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    135c:	8813      	ldrh	r3, [r2, #0]
    135e:	2102      	movs	r1, #2
    1360:	438b      	bics	r3, r1
    1362:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1364:	7a93      	ldrb	r3, [r2, #10]
    1366:	09db      	lsrs	r3, r3, #7
    1368:	d1fc      	bne.n	1364 <_rtc_timer_stop+0x20>
}
    136a:	bd10      	pop	{r4, pc}
    136c:	2000      	movs	r0, #0
    136e:	e7f0      	b.n	1352 <_rtc_timer_stop+0xe>
    1370:	0000420c 	.word	0x0000420c
    1374:	00000e89 	.word	0x00000e89

00001378 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    1378:	4800      	ldr	r0, [pc, #0]	; (137c <_rtc_get_timer+0x4>)
    137a:	4770      	bx	lr
    137c:	20000000 	.word	0x20000000

00001380 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1380:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    1382:	4b07      	ldr	r3, [pc, #28]	; (13a0 <RTC_Handler+0x20>)
    1384:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1386:	68e3      	ldr	r3, [r4, #12]
    1388:	7a1b      	ldrb	r3, [r3, #8]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    138a:	07db      	lsls	r3, r3, #31
    138c:	d507      	bpl.n	139e <RTC_Handler+0x1e>
		if (dev->timer_cb.period_expired) {
    138e:	6823      	ldr	r3, [r4, #0]
    1390:	2b00      	cmp	r3, #0
    1392:	d001      	beq.n	1398 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    1394:	0020      	movs	r0, r4
    1396:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1398:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    139a:	2201      	movs	r2, #1
    139c:	721a      	strb	r2, [r3, #8]
}
    139e:	bd10      	pop	{r4, pc}
    13a0:	200001e0 	.word	0x200001e0

000013a4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    13a4:	b510      	push	{r4, lr}
    13a6:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    13a8:	4b1f      	ldr	r3, [pc, #124]	; (1428 <_usart_init+0x84>)
    13aa:	18c3      	adds	r3, r0, r3
    13ac:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    13ae:	b2db      	uxtb	r3, r3
    13b0:	2b00      	cmp	r3, #0
    13b2:	d004      	beq.n	13be <_usart_init+0x1a>
	ASSERT(false);
    13b4:	4a1d      	ldr	r2, [pc, #116]	; (142c <_usart_init+0x88>)
    13b6:	491e      	ldr	r1, [pc, #120]	; (1430 <_usart_init+0x8c>)
    13b8:	2000      	movs	r0, #0
    13ba:	4b1e      	ldr	r3, [pc, #120]	; (1434 <_usart_init+0x90>)
    13bc:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    13be:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    13c0:	07db      	lsls	r3, r3, #31
    13c2:	d418      	bmi.n	13f6 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13c4:	2203      	movs	r2, #3
    13c6:	69e3      	ldr	r3, [r4, #28]
    13c8:	421a      	tst	r2, r3
    13ca:	d1fc      	bne.n	13c6 <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    13cc:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    13ce:	079b      	lsls	r3, r3, #30
    13d0:	d50b      	bpl.n	13ea <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    13d2:	6823      	ldr	r3, [r4, #0]
    13d4:	2202      	movs	r2, #2
    13d6:	4393      	bics	r3, r2
    13d8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13da:	3201      	adds	r2, #1
    13dc:	69e3      	ldr	r3, [r4, #28]
    13de:	421a      	tst	r2, r3
    13e0:	d1fc      	bne.n	13dc <_usart_init+0x38>
    13e2:	2202      	movs	r2, #2
    13e4:	69e3      	ldr	r3, [r4, #28]
    13e6:	421a      	tst	r2, r3
    13e8:	d1fc      	bne.n	13e4 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    13ea:	2305      	movs	r3, #5
    13ec:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13ee:	2203      	movs	r2, #3
    13f0:	69e3      	ldr	r3, [r4, #28]
    13f2:	421a      	tst	r2, r3
    13f4:	d1fc      	bne.n	13f0 <_usart_init+0x4c>
    13f6:	2201      	movs	r2, #1
    13f8:	69e3      	ldr	r3, [r4, #28]
    13fa:	421a      	tst	r2, r3
    13fc:	d1fc      	bne.n	13f8 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    13fe:	4b0e      	ldr	r3, [pc, #56]	; (1438 <_usart_init+0x94>)
    1400:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1402:	2203      	movs	r2, #3
    1404:	69e3      	ldr	r3, [r4, #28]
    1406:	421a      	tst	r2, r3
    1408:	d1fc      	bne.n	1404 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    140a:	23c0      	movs	r3, #192	; 0xc0
    140c:	029b      	lsls	r3, r3, #10
    140e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1410:	2207      	movs	r2, #7
    1412:	69e3      	ldr	r3, [r4, #28]
    1414:	421a      	tst	r2, r3
    1416:	d1fc      	bne.n	1412 <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1418:	4b08      	ldr	r3, [pc, #32]	; (143c <_usart_init+0x98>)
    141a:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    141c:	2300      	movs	r3, #0
    141e:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1420:	2230      	movs	r2, #48	; 0x30
    1422:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    1424:	2000      	movs	r0, #0
    1426:	bd10      	pop	{r4, pc}
    1428:	bdfff800 	.word	0xbdfff800
    142c:	0000023a 	.word	0x0000023a
    1430:	00004224 	.word	0x00004224
    1434:	00000e89 	.word	0x00000e89
    1438:	40100004 	.word	0x40100004
    143c:	fffffb15 	.word	0xfffffb15

00001440 <_usart_sync_init>:
{
    1440:	b570      	push	{r4, r5, r6, lr}
    1442:	0005      	movs	r5, r0
    1444:	000c      	movs	r4, r1
	ASSERT(device);
    1446:	1e43      	subs	r3, r0, #1
    1448:	4198      	sbcs	r0, r3
    144a:	b2c0      	uxtb	r0, r0
    144c:	22b4      	movs	r2, #180	; 0xb4
    144e:	4904      	ldr	r1, [pc, #16]	; (1460 <_usart_sync_init+0x20>)
    1450:	4b04      	ldr	r3, [pc, #16]	; (1464 <_usart_sync_init+0x24>)
    1452:	4798      	blx	r3
	device->hw = hw;
    1454:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1456:	0020      	movs	r0, r4
    1458:	4b03      	ldr	r3, [pc, #12]	; (1468 <_usart_sync_init+0x28>)
    145a:	4798      	blx	r3
}
    145c:	bd70      	pop	{r4, r5, r6, pc}
    145e:	46c0      	nop			; (mov r8, r8)
    1460:	00004224 	.word	0x00004224
    1464:	00000e89 	.word	0x00000e89
    1468:	000013a5 	.word	0x000013a5

0000146c <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    146c:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    146e:	6813      	ldr	r3, [r2, #0]
    1470:	2102      	movs	r1, #2
    1472:	430b      	orrs	r3, r1
    1474:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1476:	3101      	adds	r1, #1
    1478:	69d3      	ldr	r3, [r2, #28]
    147a:	4219      	tst	r1, r3
    147c:	d1fc      	bne.n	1478 <_usart_sync_enable+0xc>
}
    147e:	4770      	bx	lr

00001480 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1480:	6803      	ldr	r3, [r0, #0]
    1482:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1484:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1486:	4770      	bx	lr

00001488 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1488:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    148a:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    148c:	b2c0      	uxtb	r0, r0
}
    148e:	4770      	bx	lr

00001490 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1490:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1492:	7e18      	ldrb	r0, [r3, #24]
    1494:	2301      	movs	r3, #1
    1496:	4018      	ands	r0, r3
}
    1498:	4770      	bx	lr

0000149a <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    149a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    149c:	7e18      	ldrb	r0, [r3, #24]
    149e:	0780      	lsls	r0, r0, #30
    14a0:	0fc0      	lsrs	r0, r0, #31
}
    14a2:	4770      	bx	lr

000014a4 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    14a4:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    14a6:	7e18      	ldrb	r0, [r3, #24]
    14a8:	0740      	lsls	r0, r0, #29
    14aa:	0fc0      	lsrs	r0, r0, #31
}
    14ac:	4770      	bx	lr
	...

000014b0 <_sysctrl_init_sources>:
 * \brief Initializes clock generators
 *
 * All GCLK generators are running when this function returns.
 */
void _sysctrl_init_sources(void)
{
    14b0:	b510      	push	{r4, lr}
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    14b2:	4b14      	ldr	r3, [pc, #80]	; (1504 <_sysctrl_init_sources+0x54>)
    14b4:	2002      	movs	r0, #2
    14b6:	8298      	strh	r0, [r3, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    14b8:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    14ba:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    14bc:	4c12      	ldr	r4, [pc, #72]	; (1508 <_sysctrl_init_sources+0x58>)
    14be:	4021      	ands	r1, r4
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    14c0:	0f92      	lsrs	r2, r2, #30
    14c2:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    14c4:	4302      	orrs	r2, r0
    14c6:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    14c8:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    14ca:	699a      	ldr	r2, [r3, #24]
    14cc:	4302      	orrs	r2, r0
    14ce:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    14d0:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    14d2:	211f      	movs	r1, #31
    14d4:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    14d6:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    14d8:	0019      	movs	r1, r3
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    14da:	2202      	movs	r2, #2
    14dc:	68cb      	ldr	r3, [r1, #12]
    14de:	421a      	tst	r2, r3
    14e0:	d0fc      	beq.n	14dc <_sysctrl_init_sources+0x2c>
	((Sysctrl *)hw)->XOSC32K.reg |= SYSCTRL_XOSC32K_ONDEMAND;
    14e2:	4a08      	ldr	r2, [pc, #32]	; (1504 <_sysctrl_init_sources+0x54>)
    14e4:	8a93      	ldrh	r3, [r2, #20]
    14e6:	2180      	movs	r1, #128	; 0x80
    14e8:	430b      	orrs	r3, r1
    14ea:	8293      	strh	r3, [r2, #20]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    14ec:	0011      	movs	r1, r2
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    14ee:	2208      	movs	r2, #8
    14f0:	68cb      	ldr	r3, [r1, #12]
    14f2:	421a      	tst	r2, r3
    14f4:	d0fc      	beq.n	14f0 <_sysctrl_init_sources+0x40>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    14f6:	4a03      	ldr	r2, [pc, #12]	; (1504 <_sysctrl_init_sources+0x54>)
    14f8:	6a13      	ldr	r3, [r2, #32]
    14fa:	2180      	movs	r1, #128	; 0x80
    14fc:	430b      	orrs	r3, r1
    14fe:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1500:	bd10      	pop	{r4, pc}
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	40000800 	.word	0x40000800
    1508:	0fff0000 	.word	0x0fff0000

0000150c <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    150c:	2202      	movs	r2, #2
    150e:	4b19      	ldr	r3, [pc, #100]	; (1574 <_sysctrl_init_referenced_generators+0x68>)
    1510:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1512:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1514:	320e      	adds	r2, #14
    1516:	68cb      	ldr	r3, [r1, #12]
    1518:	421a      	tst	r2, r3
    151a:	d0fc      	beq.n	1516 <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    151c:	4a16      	ldr	r2, [pc, #88]	; (1578 <_sysctrl_init_referenced_generators+0x6c>)
    151e:	4b15      	ldr	r3, [pc, #84]	; (1574 <_sysctrl_init_referenced_generators+0x68>)
    1520:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1522:	4b16      	ldr	r3, [pc, #88]	; (157c <_sysctrl_init_referenced_generators+0x70>)
    1524:	681b      	ldr	r3, [r3, #0]
    1526:	0e9b      	lsrs	r3, r3, #26
    1528:	2b3f      	cmp	r3, #63	; 0x3f
    152a:	d01a      	beq.n	1562 <_sysctrl_init_referenced_generators+0x56>
    152c:	029b      	lsls	r3, r3, #10
    152e:	2280      	movs	r2, #128	; 0x80
    1530:	0092      	lsls	r2, r2, #2
    1532:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1534:	4a0f      	ldr	r2, [pc, #60]	; (1574 <_sysctrl_init_referenced_generators+0x68>)
    1536:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1538:	2393      	movs	r3, #147	; 0x93
    153a:	005b      	lsls	r3, r3, #1
    153c:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    153e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1540:	075b      	lsls	r3, r3, #29
    1542:	d511      	bpl.n	1568 <_sysctrl_init_referenced_generators+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1544:	0011      	movs	r1, r2
	tmp &= mask;
    1546:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1548:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    154a:	421a      	tst	r2, r3
    154c:	d0fc      	beq.n	1548 <_sysctrl_init_referenced_generators+0x3c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    154e:	4a0c      	ldr	r2, [pc, #48]	; (1580 <_sysctrl_init_referenced_generators+0x74>)
    1550:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    1552:	09db      	lsrs	r3, r3, #7
    1554:	d1fc      	bne.n	1550 <_sysctrl_init_referenced_generators+0x44>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1556:	4a07      	ldr	r2, [pc, #28]	; (1574 <_sysctrl_init_referenced_generators+0x68>)
    1558:	6993      	ldr	r3, [r2, #24]
    155a:	2102      	movs	r1, #2
    155c:	438b      	bics	r3, r1
    155e:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1560:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1562:	23fc      	movs	r3, #252	; 0xfc
    1564:	01db      	lsls	r3, r3, #7
    1566:	e7e5      	b.n	1534 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1568:	4902      	ldr	r1, [pc, #8]	; (1574 <_sysctrl_init_referenced_generators+0x68>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    156a:	2210      	movs	r2, #16
    156c:	68cb      	ldr	r3, [r1, #12]
    156e:	421a      	tst	r2, r3
    1570:	d0fc      	beq.n	156c <_sysctrl_init_referenced_generators+0x60>
    1572:	e7ec      	b.n	154e <_sysctrl_init_referenced_generators+0x42>
    1574:	40000800 	.word	0x40000800
    1578:	0401bb80 	.word	0x0401bb80
    157c:	00806024 	.word	0x00806024
    1580:	40000c00 	.word	0x40000c00

00001584 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    1584:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    1586:	8813      	ldrh	r3, [r2, #0]
    1588:	2102      	movs	r1, #2
    158a:	430b      	orrs	r3, r1
    158c:	8013      	strh	r3, [r2, #0]
}
    158e:	4770      	bx	lr

00001590 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    1590:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1592:	8813      	ldrh	r3, [r2, #0]
    1594:	2102      	movs	r1, #2
    1596:	438b      	bics	r3, r1
    1598:	8013      	strh	r3, [r2, #0]
}
    159a:	4770      	bx	lr

0000159c <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    159c:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    159e:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    15a0:	071b      	lsls	r3, r3, #28

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    15a2:	0f9b      	lsrs	r3, r3, #30
    15a4:	2b02      	cmp	r3, #2
    15a6:	d00b      	beq.n	15c0 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    15a8:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    15aa:	071b      	lsls	r3, r3, #28
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    15ac:	0f9b      	lsrs	r3, r3, #30
    15ae:	d009      	beq.n	15c4 <_tc_timer_set_period+0x28>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    15b0:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    15b2:	071b      	lsls	r3, r3, #28
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    15b4:	0f9b      	lsrs	r3, r3, #30
    15b6:	2b01      	cmp	r3, #1
    15b8:	d106      	bne.n	15c8 <_tc_timer_set_period+0x2c>
		hri_tccount8_write_PER_reg(hw, (hri_tccount8_per_reg_t)clock_cycles);
    15ba:	b2c9      	uxtb	r1, r1
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    15bc:	7511      	strb	r1, [r2, #20]
	}
}
    15be:	e003      	b.n	15c8 <_tc_timer_set_period+0x2c>
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    15c0:	6191      	str	r1, [r2, #24]
    15c2:	e001      	b.n	15c8 <_tc_timer_set_period+0x2c>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)clock_cycles);
    15c4:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    15c6:	8311      	strh	r1, [r2, #24]
}
    15c8:	4770      	bx	lr

000015ca <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    15ca:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    15cc:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    15ce:	071b      	lsls	r3, r3, #28

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    15d0:	0f9b      	lsrs	r3, r3, #30
    15d2:	2b02      	cmp	r3, #2
    15d4:	d00c      	beq.n	15f0 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    15d6:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    15d8:	071b      	lsls	r3, r3, #28
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    15da:	0f9b      	lsrs	r3, r3, #30
    15dc:	d00a      	beq.n	15f4 <_tc_timer_get_period+0x2a>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    15de:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    15e0:	071b      	lsls	r3, r3, #28
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    15e2:	0f9b      	lsrs	r3, r3, #30
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    15e4:	2000      	movs	r0, #0
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    15e6:	2b01      	cmp	r3, #1
    15e8:	d106      	bne.n	15f8 <_tc_timer_get_period+0x2e>
	return ((Tc *)hw)->COUNT8.PER.reg;
    15ea:	7d10      	ldrb	r0, [r2, #20]
    15ec:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    15ee:	e003      	b.n	15f8 <_tc_timer_get_period+0x2e>
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    15f0:	6990      	ldr	r0, [r2, #24]
		return hri_tccount32_read_CC_reg(hw, 0);
    15f2:	e001      	b.n	15f8 <_tc_timer_get_period+0x2e>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    15f4:	8b10      	ldrh	r0, [r2, #24]
    15f6:	b280      	uxth	r0, r0
}
    15f8:	4770      	bx	lr

000015fa <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    15fa:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    15fc:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    15fe:	0780      	lsls	r0, r0, #30
    1600:	0fc0      	lsrs	r0, r0, #31
}
    1602:	4770      	bx	lr

00001604 <_tc_timer_deinit>:
	void *const hw = device->hw;
    1604:	68c2      	ldr	r2, [r0, #12]
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1606:	4b0d      	ldr	r3, [pc, #52]	; (163c <_tc_timer_deinit+0x38>)
    1608:	18d3      	adds	r3, r2, r3
    160a:	0a9b      	lsrs	r3, r3, #10
	NVIC_DisableIRQ((IRQn_Type)(TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    160c:	3312      	adds	r3, #18
  if ((int32_t)(IRQn) >= 0)
    160e:	b2d8      	uxtb	r0, r3
    1610:	061b      	lsls	r3, r3, #24
    1612:	d40a      	bmi.n	162a <_tc_timer_deinit+0x26>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1614:	211f      	movs	r1, #31
    1616:	4001      	ands	r1, r0
    1618:	2301      	movs	r3, #1
    161a:	408b      	lsls	r3, r1
    161c:	2180      	movs	r1, #128	; 0x80
    161e:	4808      	ldr	r0, [pc, #32]	; (1640 <_tc_timer_deinit+0x3c>)
    1620:	5043      	str	r3, [r0, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1622:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1626:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    162a:	8813      	ldrh	r3, [r2, #0]
    162c:	2102      	movs	r1, #2
    162e:	438b      	bics	r3, r1
    1630:	8013      	strh	r3, [r2, #0]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    1632:	8813      	ldrh	r3, [r2, #0]
    1634:	3901      	subs	r1, #1
    1636:	430b      	orrs	r3, r1
    1638:	8013      	strh	r3, [r2, #0]
}
    163a:	4770      	bx	lr
    163c:	bdffd400 	.word	0xbdffd400
    1640:	e000e100 	.word	0xe000e100

00001644 <_tc_timer_set_irq>:
{
    1644:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1646:	68c0      	ldr	r0, [r0, #12]
    1648:	4b04      	ldr	r3, [pc, #16]	; (165c <_tc_timer_set_irq+0x18>)
    164a:	469c      	mov	ip, r3
    164c:	4460      	add	r0, ip
    164e:	0a80      	lsrs	r0, r0, #10
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    1650:	3012      	adds	r0, #18
    1652:	b2c0      	uxtb	r0, r0
    1654:	4b02      	ldr	r3, [pc, #8]	; (1660 <_tc_timer_set_irq+0x1c>)
    1656:	4798      	blx	r3
}
    1658:	bd10      	pop	{r4, pc}
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	bdffd400 	.word	0xbdffd400
    1660:	00000f71 	.word	0x00000f71

00001664 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    1664:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1666:	4b0d      	ldr	r3, [pc, #52]	; (169c <get_tc_index+0x38>)
    1668:	18c3      	adds	r3, r0, r3
    166a:	0a9b      	lsrs	r3, r3, #10
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    166c:	3303      	adds	r3, #3
    166e:	b2db      	uxtb	r3, r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    1670:	4a0b      	ldr	r2, [pc, #44]	; (16a0 <get_tc_index+0x3c>)
    1672:	7812      	ldrb	r2, [r2, #0]
    1674:	429a      	cmp	r2, r3
    1676:	d00d      	beq.n	1694 <get_tc_index+0x30>
    1678:	4a09      	ldr	r2, [pc, #36]	; (16a0 <get_tc_index+0x3c>)
    167a:	7d12      	ldrb	r2, [r2, #20]
    167c:	2001      	movs	r0, #1
    167e:	429a      	cmp	r2, r3
    1680:	d009      	beq.n	1696 <get_tc_index+0x32>
			return i;
		}
	}

	ASSERT(false);
    1682:	22f9      	movs	r2, #249	; 0xf9
    1684:	0052      	lsls	r2, r2, #1
    1686:	4907      	ldr	r1, [pc, #28]	; (16a4 <get_tc_index+0x40>)
    1688:	2000      	movs	r0, #0
    168a:	4b07      	ldr	r3, [pc, #28]	; (16a8 <get_tc_index+0x44>)
    168c:	4798      	blx	r3
	return -1;
    168e:	2001      	movs	r0, #1
    1690:	4240      	negs	r0, r0
}
    1692:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1694:	2000      	movs	r0, #0
			return i;
    1696:	b240      	sxtb	r0, r0
    1698:	e7fb      	b.n	1692 <get_tc_index+0x2e>
    169a:	46c0      	nop			; (mov r8, r8)
    169c:	bdffd400 	.word	0xbdffd400
    16a0:	20000020 	.word	0x20000020
    16a4:	00004240 	.word	0x00004240
    16a8:	00000e89 	.word	0x00000e89

000016ac <_tc_timer_init>:
{
    16ac:	b570      	push	{r4, r5, r6, lr}
    16ae:	0006      	movs	r6, r0
    16b0:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    16b2:	0008      	movs	r0, r1
    16b4:	4b40      	ldr	r3, [pc, #256]	; (17b8 <_tc_timer_init+0x10c>)
    16b6:	4798      	blx	r3
    16b8:	0005      	movs	r5, r0
	device->hw = hw;
    16ba:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    16bc:	229a      	movs	r2, #154	; 0x9a
    16be:	493f      	ldr	r1, [pc, #252]	; (17bc <_tc_timer_init+0x110>)
    16c0:	2001      	movs	r0, #1
    16c2:	4b3f      	ldr	r3, [pc, #252]	; (17c0 <_tc_timer_init+0x114>)
    16c4:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    16c6:	7be3      	ldrb	r3, [r4, #15]
    16c8:	09db      	lsrs	r3, r3, #7
    16ca:	d1fc      	bne.n	16c6 <_tc_timer_init+0x1a>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    16cc:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    16ce:	079b      	lsls	r3, r3, #30
    16d0:	d504      	bpl.n	16dc <_tc_timer_init+0x30>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    16d2:	2300      	movs	r3, #0
    16d4:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    16d6:	7be3      	ldrb	r3, [r4, #15]
    16d8:	09db      	lsrs	r3, r3, #7
    16da:	d1fc      	bne.n	16d6 <_tc_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    16dc:	2301      	movs	r3, #1
    16de:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    16e0:	7be3      	ldrb	r3, [r4, #15]
    16e2:	09db      	lsrs	r3, r3, #7
    16e4:	d1fc      	bne.n	16e0 <_tc_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    16e6:	00ab      	lsls	r3, r5, #2
    16e8:	195b      	adds	r3, r3, r5
    16ea:	009a      	lsls	r2, r3, #2
    16ec:	4b35      	ldr	r3, [pc, #212]	; (17c4 <_tc_timer_init+0x118>)
    16ee:	189b      	adds	r3, r3, r2
    16f0:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    16f2:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    16f4:	7919      	ldrb	r1, [r3, #4]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    16f6:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    16f8:	88db      	ldrh	r3, [r3, #6]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    16fa:	8163      	strh	r3, [r4, #10]
    16fc:	230c      	movs	r3, #12
    16fe:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1700:	2b08      	cmp	r3, #8
    1702:	d02e      	beq.n	1762 <_tc_timer_init+0xb6>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1704:	2b00      	cmp	r3, #0
    1706:	d139      	bne.n	177c <_tc_timer_init+0xd0>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1708:	492e      	ldr	r1, [pc, #184]	; (17c4 <_tc_timer_init+0x118>)
    170a:	00ab      	lsls	r3, r5, #2
    170c:	195a      	adds	r2, r3, r5
    170e:	0092      	lsls	r2, r2, #2
    1710:	188a      	adds	r2, r1, r2
    1712:	8992      	ldrh	r2, [r2, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1714:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    1716:	195b      	adds	r3, r3, r5
    1718:	009b      	lsls	r3, r3, #2
    171a:	18cb      	adds	r3, r1, r3
    171c:	8a1b      	ldrh	r3, [r3, #16]
    171e:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1720:	2301      	movs	r3, #1
    1722:	7363      	strb	r3, [r4, #13]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    1724:	4b28      	ldr	r3, [pc, #160]	; (17c8 <_tc_timer_init+0x11c>)
    1726:	429c      	cmp	r4, r3
    1728:	d039      	beq.n	179e <_tc_timer_init+0xf2>
		_tc3_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC4) {
    172a:	4b28      	ldr	r3, [pc, #160]	; (17cc <_tc_timer_init+0x120>)
    172c:	429c      	cmp	r4, r3
    172e:	d03e      	beq.n	17ae <_tc_timer_init+0x102>
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1730:	4b27      	ldr	r3, [pc, #156]	; (17d0 <_tc_timer_init+0x124>)
    1732:	469c      	mov	ip, r3
    1734:	4464      	add	r4, ip
    1736:	0aa4      	lsrs	r4, r4, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1738:	3412      	adds	r4, #18
  if ((int32_t)(IRQn) >= 0)
    173a:	b2e3      	uxtb	r3, r4
    173c:	0622      	lsls	r2, r4, #24
    173e:	d40e      	bmi.n	175e <_tc_timer_init+0xb2>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1740:	221f      	movs	r2, #31
    1742:	401a      	ands	r2, r3
    1744:	2301      	movs	r3, #1
    1746:	4093      	lsls	r3, r2
    1748:	4a22      	ldr	r2, [pc, #136]	; (17d4 <_tc_timer_init+0x128>)
    174a:	2180      	movs	r1, #128	; 0x80
    174c:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    174e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1752:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1756:	3101      	adds	r1, #1
    1758:	31ff      	adds	r1, #255	; 0xff
    175a:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    175c:	6013      	str	r3, [r2, #0]
}
    175e:	2000      	movs	r0, #0
    1760:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1762:	4918      	ldr	r1, [pc, #96]	; (17c4 <_tc_timer_init+0x118>)
    1764:	00ab      	lsls	r3, r5, #2
    1766:	195a      	adds	r2, r3, r5
    1768:	0092      	lsls	r2, r2, #2
    176a:	188a      	adds	r2, r1, r2
    176c:	68d2      	ldr	r2, [r2, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    176e:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1770:	195b      	adds	r3, r3, r5
    1772:	009b      	lsls	r3, r3, #2
    1774:	18cb      	adds	r3, r1, r3
    1776:	691b      	ldr	r3, [r3, #16]
    1778:	61e3      	str	r3, [r4, #28]
    177a:	e7d1      	b.n	1720 <_tc_timer_init+0x74>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    177c:	2b04      	cmp	r3, #4
    177e:	d1cf      	bne.n	1720 <_tc_timer_init+0x74>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    1780:	4910      	ldr	r1, [pc, #64]	; (17c4 <_tc_timer_init+0x118>)
    1782:	00ab      	lsls	r3, r5, #2
    1784:	195a      	adds	r2, r3, r5
    1786:	0092      	lsls	r2, r2, #2
    1788:	188a      	adds	r2, r1, r2
    178a:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    178c:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    178e:	7c12      	ldrb	r2, [r2, #16]
    1790:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1792:	195b      	adds	r3, r3, r5
    1794:	009b      	lsls	r3, r3, #2
    1796:	18cb      	adds	r3, r1, r3
    1798:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    179a:	7523      	strb	r3, [r4, #20]
    179c:	e7c0      	b.n	1720 <_tc_timer_init+0x74>
		_tc3_dev = (struct _pwm_device *)dev;
    179e:	4b0e      	ldr	r3, [pc, #56]	; (17d8 <_tc_timer_init+0x12c>)
    17a0:	601e      	str	r6, [r3, #0]
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    17a2:	4b0b      	ldr	r3, [pc, #44]	; (17d0 <_tc_timer_init+0x124>)
    17a4:	18e2      	adds	r2, r4, r3
    17a6:	0a92      	lsrs	r2, r2, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    17a8:	3212      	adds	r2, #18
    17aa:	b2d3      	uxtb	r3, r2
    17ac:	e7c8      	b.n	1740 <_tc_timer_init+0x94>
		_tc4_dev = (struct _timer_device *)dev;
    17ae:	4b0a      	ldr	r3, [pc, #40]	; (17d8 <_tc_timer_init+0x12c>)
    17b0:	605e      	str	r6, [r3, #4]
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    17b2:	2313      	movs	r3, #19
    17b4:	e7c4      	b.n	1740 <_tc_timer_init+0x94>
    17b6:	46c0      	nop			; (mov r8, r8)
    17b8:	00001665 	.word	0x00001665
    17bc:	00004240 	.word	0x00004240
    17c0:	00000e89 	.word	0x00000e89
    17c4:	20000020 	.word	0x20000020
    17c8:	42002c00 	.word	0x42002c00
    17cc:	42003000 	.word	0x42003000
    17d0:	bdffd400 	.word	0xbdffd400
    17d4:	e000e100 	.word	0xe000e100
    17d8:	200001e4 	.word	0x200001e4

000017dc <_pwm_init>:
{
    17dc:	b570      	push	{r4, r5, r6, lr}
    17de:	0005      	movs	r5, r0
    17e0:	000c      	movs	r4, r1
	int8_t i   = get_tc_index(hw);
    17e2:	0008      	movs	r0, r1
    17e4:	4b35      	ldr	r3, [pc, #212]	; (18bc <_pwm_init+0xe0>)
    17e6:	4798      	blx	r3
	device->hw = hw;
    17e8:	612c      	str	r4, [r5, #16]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    17ea:	7be3      	ldrb	r3, [r4, #15]
    17ec:	09db      	lsrs	r3, r3, #7
    17ee:	d1fc      	bne.n	17ea <_pwm_init+0xe>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    17f0:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    17f2:	079b      	lsls	r3, r3, #30
    17f4:	d504      	bpl.n	1800 <_pwm_init+0x24>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    17f6:	2300      	movs	r3, #0
    17f8:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    17fa:	7be3      	ldrb	r3, [r4, #15]
    17fc:	09db      	lsrs	r3, r3, #7
    17fe:	d1fc      	bne.n	17fa <_pwm_init+0x1e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1800:	2301      	movs	r3, #1
    1802:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1804:	7be3      	ldrb	r3, [r4, #15]
    1806:	09db      	lsrs	r3, r3, #7
    1808:	d1fc      	bne.n	1804 <_pwm_init+0x28>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    180a:	0083      	lsls	r3, r0, #2
    180c:	181b      	adds	r3, r3, r0
    180e:	009a      	lsls	r2, r3, #2
    1810:	4b2b      	ldr	r3, [pc, #172]	; (18c0 <_pwm_init+0xe4>)
    1812:	189b      	adds	r3, r3, r2
    1814:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1816:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1818:	7919      	ldrb	r1, [r3, #4]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    181a:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    181c:	88db      	ldrh	r3, [r3, #6]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    181e:	8163      	strh	r3, [r4, #10]
    1820:	230c      	movs	r3, #12
    1822:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1824:	2b08      	cmp	r3, #8
    1826:	d02d      	beq.n	1884 <_pwm_init+0xa8>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1828:	2b00      	cmp	r3, #0
    182a:	d144      	bne.n	18b6 <_pwm_init+0xda>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    182c:	4924      	ldr	r1, [pc, #144]	; (18c0 <_pwm_init+0xe4>)
    182e:	0083      	lsls	r3, r0, #2
    1830:	181a      	adds	r2, r3, r0
    1832:	0092      	lsls	r2, r2, #2
    1834:	188a      	adds	r2, r1, r2
    1836:	8992      	ldrh	r2, [r2, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1838:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    183a:	1818      	adds	r0, r3, r0
    183c:	0080      	lsls	r0, r0, #2
    183e:	1808      	adds	r0, r1, r0
    1840:	8a03      	ldrh	r3, [r0, #16]
    1842:	8363      	strh	r3, [r4, #26]
	if (hw == TC3) {
    1844:	4b1f      	ldr	r3, [pc, #124]	; (18c4 <_pwm_init+0xe8>)
    1846:	429c      	cmp	r4, r3
    1848:	d029      	beq.n	189e <_pwm_init+0xc2>
	if (hw == TC4) {
    184a:	4b1f      	ldr	r3, [pc, #124]	; (18c8 <_pwm_init+0xec>)
    184c:	429c      	cmp	r4, r3
    184e:	d02e      	beq.n	18ae <_pwm_init+0xd2>
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1850:	4b1e      	ldr	r3, [pc, #120]	; (18cc <_pwm_init+0xf0>)
    1852:	469c      	mov	ip, r3
    1854:	4464      	add	r4, ip
    1856:	0aa4      	lsrs	r4, r4, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1858:	3412      	adds	r4, #18
  if ((int32_t)(IRQn) >= 0)
    185a:	b2e3      	uxtb	r3, r4
	return ERR_NONE;
    185c:	2000      	movs	r0, #0
    185e:	0622      	lsls	r2, r4, #24
    1860:	d40f      	bmi.n	1882 <_pwm_init+0xa6>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1862:	221f      	movs	r2, #31
    1864:	401a      	ands	r2, r3
    1866:	2301      	movs	r3, #1
    1868:	4093      	lsls	r3, r2
    186a:	4a19      	ldr	r2, [pc, #100]	; (18d0 <_pwm_init+0xf4>)
    186c:	2180      	movs	r1, #128	; 0x80
    186e:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1870:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1874:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1878:	3101      	adds	r1, #1
    187a:	31ff      	adds	r1, #255	; 0xff
    187c:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    187e:	6013      	str	r3, [r2, #0]
    1880:	2000      	movs	r0, #0
}
    1882:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1884:	490e      	ldr	r1, [pc, #56]	; (18c0 <_pwm_init+0xe4>)
    1886:	0083      	lsls	r3, r0, #2
    1888:	181a      	adds	r2, r3, r0
    188a:	0092      	lsls	r2, r2, #2
    188c:	188a      	adds	r2, r1, r2
    188e:	68d2      	ldr	r2, [r2, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1890:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1892:	1818      	adds	r0, r3, r0
    1894:	0080      	lsls	r0, r0, #2
    1896:	1808      	adds	r0, r1, r0
    1898:	6903      	ldr	r3, [r0, #16]
    189a:	61e3      	str	r3, [r4, #28]
    189c:	e7d2      	b.n	1844 <_pwm_init+0x68>
		_tc3_dev = (struct _pwm_device *)dev;
    189e:	4b0d      	ldr	r3, [pc, #52]	; (18d4 <_pwm_init+0xf8>)
    18a0:	601d      	str	r5, [r3, #0]
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    18a2:	4b0a      	ldr	r3, [pc, #40]	; (18cc <_pwm_init+0xf0>)
    18a4:	18e2      	adds	r2, r4, r3
    18a6:	0a92      	lsrs	r2, r2, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    18a8:	3212      	adds	r2, #18
    18aa:	b2d3      	uxtb	r3, r2
    18ac:	e7d9      	b.n	1862 <_pwm_init+0x86>
		_tc4_dev = (struct _timer_device *)dev;
    18ae:	4b09      	ldr	r3, [pc, #36]	; (18d4 <_pwm_init+0xf8>)
    18b0:	605d      	str	r5, [r3, #4]
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    18b2:	2313      	movs	r3, #19
    18b4:	e7d5      	b.n	1862 <_pwm_init+0x86>
		return ERR_INVALID_DATA;
    18b6:	2001      	movs	r0, #1
    18b8:	4240      	negs	r0, r0
    18ba:	e7e2      	b.n	1882 <_pwm_init+0xa6>
    18bc:	00001665 	.word	0x00001665
    18c0:	20000020 	.word	0x20000020
    18c4:	42002c00 	.word	0x42002c00
    18c8:	42003000 	.word	0x42003000
    18cc:	bdffd400 	.word	0xbdffd400
    18d0:	e000e100 	.word	0xe000e100
    18d4:	200001e4 	.word	0x200001e4

000018d8 <_tc_get_timer>:
	return &_tc_timer_functions;
    18d8:	4801      	ldr	r0, [pc, #4]	; (18e0 <_tc_get_timer+0x8>)
}
    18da:	3028      	adds	r0, #40	; 0x28
    18dc:	4770      	bx	lr
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	20000020 	.word	0x20000020

000018e4 <_tc_get_pwm>:
}
    18e4:	2000      	movs	r0, #0
    18e6:	4770      	bx	lr

000018e8 <TC3_Handler>:
{
    18e8:	b570      	push	{r4, r5, r6, lr}
	tc_pwm_interrupt_handler(_tc3_dev);
    18ea:	4b0c      	ldr	r3, [pc, #48]	; (191c <TC3_Handler+0x34>)
    18ec:	681d      	ldr	r5, [r3, #0]
	void *const hw = device->hw;
    18ee:	692c      	ldr	r4, [r5, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    18f0:	7ba3      	ldrb	r3, [r4, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    18f2:	07db      	lsls	r3, r3, #31
    18f4:	d506      	bpl.n	1904 <TC3_Handler+0x1c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    18f6:	2301      	movs	r3, #1
    18f8:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_period_cb) {
    18fa:	682b      	ldr	r3, [r5, #0]
    18fc:	2b00      	cmp	r3, #0
    18fe:	d001      	beq.n	1904 <TC3_Handler+0x1c>
			device->callback.pwm_period_cb(device);
    1900:	0028      	movs	r0, r5
    1902:	4798      	blx	r3
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1904:	7b63      	ldrb	r3, [r4, #13]
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1906:	079b      	lsls	r3, r3, #30
    1908:	d506      	bpl.n	1918 <TC3_Handler+0x30>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    190a:	2302      	movs	r3, #2
    190c:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_error_cb) {
    190e:	686b      	ldr	r3, [r5, #4]
    1910:	2b00      	cmp	r3, #0
    1912:	d001      	beq.n	1918 <TC3_Handler+0x30>
			device->callback.pwm_error_cb(device);
    1914:	0028      	movs	r0, r5
    1916:	4798      	blx	r3
}
    1918:	bd70      	pop	{r4, r5, r6, pc}
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	200001e4 	.word	0x200001e4

00001920 <TC4_Handler>:
{
    1920:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    1922:	4b06      	ldr	r3, [pc, #24]	; (193c <TC4_Handler+0x1c>)
    1924:	6858      	ldr	r0, [r3, #4]
	void *const hw = device->hw;
    1926:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1928:	7b9a      	ldrb	r2, [r3, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    192a:	07d2      	lsls	r2, r2, #31
    192c:	d400      	bmi.n	1930 <TC4_Handler+0x10>
}
    192e:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1930:	2201      	movs	r2, #1
    1932:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    1934:	6803      	ldr	r3, [r0, #0]
    1936:	4798      	blx	r3
}
    1938:	e7f9      	b.n	192e <TC4_Handler+0xe>
    193a:	46c0      	nop			; (mov r8, r8)
    193c:	200001e4 	.word	0x200001e4

00001940 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1940:	2000      	movs	r0, #0
    1942:	4770      	bx	lr

00001944 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1944:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1946:	7c83      	ldrb	r3, [r0, #18]
    1948:	220f      	movs	r2, #15
    194a:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    194c:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    194e:	3a08      	subs	r2, #8
    1950:	400a      	ands	r2, r1
    1952:	2a01      	cmp	r2, #1
    1954:	d00b      	beq.n	196e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1956:	015a      	lsls	r2, r3, #5
    1958:	4919      	ldr	r1, [pc, #100]	; (19c0 <_usb_d_dev_handle_setup+0x7c>)
    195a:	468c      	mov	ip, r1
    195c:	4462      	add	r2, ip
    195e:	2110      	movs	r1, #16
    1960:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1962:	015b      	lsls	r3, r3, #5
    1964:	4a17      	ldr	r2, [pc, #92]	; (19c4 <_usb_d_dev_handle_setup+0x80>)
    1966:	4694      	mov	ip, r2
    1968:	4463      	add	r3, ip
    196a:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    196c:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    196e:	064a      	lsls	r2, r1, #25
    1970:	d50e      	bpl.n	1990 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    1972:	7cc2      	ldrb	r2, [r0, #19]
    1974:	2140      	movs	r1, #64	; 0x40
    1976:	438a      	bics	r2, r1
    1978:	74c2      	strb	r2, [r0, #19]
    197a:	015a      	lsls	r2, r3, #5
    197c:	4c12      	ldr	r4, [pc, #72]	; (19c8 <_usb_d_dev_handle_setup+0x84>)
    197e:	46a4      	mov	ip, r4
    1980:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1982:	2580      	movs	r5, #128	; 0x80
    1984:	2482      	movs	r4, #130	; 0x82
    1986:	0064      	lsls	r4, r4, #1
    1988:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    198a:	2406      	movs	r4, #6
    198c:	34ff      	adds	r4, #255	; 0xff
    198e:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    1990:	7cc2      	ldrb	r2, [r0, #19]
    1992:	2108      	movs	r1, #8
    1994:	438a      	bics	r2, r1
    1996:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1998:	490c      	ldr	r1, [pc, #48]	; (19cc <_usb_d_dev_handle_setup+0x88>)
    199a:	015a      	lsls	r2, r3, #5
    199c:	188c      	adds	r4, r1, r2
    199e:	2500      	movs	r5, #0
    19a0:	72a5      	strb	r5, [r4, #10]
    19a2:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    19a4:	0013      	movs	r3, r2
    19a6:	4c06      	ldr	r4, [pc, #24]	; (19c0 <_usb_d_dev_handle_setup+0x7c>)
    19a8:	46a4      	mov	ip, r4
    19aa:	4463      	add	r3, ip
    19ac:	246f      	movs	r4, #111	; 0x6f
    19ae:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    19b0:	4b04      	ldr	r3, [pc, #16]	; (19c4 <_usb_d_dev_handle_setup+0x80>)
    19b2:	469c      	mov	ip, r3
    19b4:	4462      	add	r2, ip
    19b6:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    19b8:	7c80      	ldrb	r0, [r0, #18]
    19ba:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    19bc:	4798      	blx	r3
    19be:	e7d5      	b.n	196c <_usb_d_dev_handle_setup+0x28>
    19c0:	41005100 	.word	0x41005100
    19c4:	41005108 	.word	0x41005108
    19c8:	41005000 	.word	0x41005000
    19cc:	200001ec 	.word	0x200001ec

000019d0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    19d0:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    19d2:	2220      	movs	r2, #32
    19d4:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    19d6:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    19d8:	7c81      	ldrb	r1, [r0, #18]
    19da:	230f      	movs	r3, #15
    19dc:	400b      	ands	r3, r1
    19de:	015b      	lsls	r3, r3, #5
    19e0:	4905      	ldr	r1, [pc, #20]	; (19f8 <_usb_d_dev_handle_stall+0x28>)
    19e2:	468c      	mov	ip, r1
    19e4:	4463      	add	r3, ip
    19e6:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    19e8:	6882      	ldr	r2, [r0, #8]
    19ea:	7c80      	ldrb	r0, [r0, #18]
    19ec:	4b03      	ldr	r3, [pc, #12]	; (19fc <_usb_d_dev_handle_stall+0x2c>)
    19ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    19f0:	2101      	movs	r1, #1
    19f2:	4798      	blx	r3
}
    19f4:	bd10      	pop	{r4, pc}
    19f6:	46c0      	nop			; (mov r8, r8)
    19f8:	41005108 	.word	0x41005108
    19fc:	200001ec 	.word	0x200001ec

00001a00 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1a00:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1a02:	7c83      	ldrb	r3, [r0, #18]
    1a04:	2bff      	cmp	r3, #255	; 0xff
    1a06:	d002      	beq.n	1a0e <_usb_d_dev_trans_done+0xe>
    1a08:	7cc2      	ldrb	r2, [r0, #19]
    1a0a:	0652      	lsls	r2, r2, #25
    1a0c:	d400      	bmi.n	1a10 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    1a0e:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    1a10:	7cc2      	ldrb	r2, [r0, #19]
    1a12:	2440      	movs	r4, #64	; 0x40
    1a14:	43a2      	bics	r2, r4
    1a16:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1a18:	6882      	ldr	r2, [r0, #8]
    1a1a:	4802      	ldr	r0, [pc, #8]	; (1a24 <_usb_d_dev_trans_done+0x24>)
    1a1c:	6f04      	ldr	r4, [r0, #112]	; 0x70
    1a1e:	0018      	movs	r0, r3
    1a20:	47a0      	blx	r4
    1a22:	e7f4      	b.n	1a0e <_usb_d_dev_trans_done+0xe>
    1a24:	200001ec 	.word	0x200001ec

00001a28 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1a28:	b530      	push	{r4, r5, lr}
    1a2a:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1a2c:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1a2e:	ac01      	add	r4, sp, #4
    1a30:	2525      	movs	r5, #37	; 0x25
    1a32:	7025      	strb	r5, [r4, #0]
    1a34:	3525      	adds	r5, #37	; 0x25
    1a36:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1a38:	2bff      	cmp	r3, #255	; 0xff
    1a3a:	d01b      	beq.n	1a74 <_usb_d_dev_trans_stop+0x4c>
    1a3c:	7cc4      	ldrb	r4, [r0, #19]
    1a3e:	0664      	lsls	r4, r4, #25
    1a40:	d518      	bpl.n	1a74 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1a42:	240f      	movs	r4, #15
    1a44:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    1a46:	2900      	cmp	r1, #0
    1a48:	d016      	beq.n	1a78 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1a4a:	015c      	lsls	r4, r3, #5
    1a4c:	4d0e      	ldr	r5, [pc, #56]	; (1a88 <_usb_d_dev_trans_stop+0x60>)
    1a4e:	46ac      	mov	ip, r5
    1a50:	4464      	add	r4, ip
    1a52:	2580      	movs	r5, #128	; 0x80
    1a54:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1a56:	ac01      	add	r4, sp, #4
    1a58:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1a5a:	0159      	lsls	r1, r3, #5
    1a5c:	4d0a      	ldr	r5, [pc, #40]	; (1a88 <_usb_d_dev_trans_stop+0x60>)
    1a5e:	46ac      	mov	ip, r5
    1a60:	4461      	add	r1, ip
    1a62:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1a64:	015b      	lsls	r3, r3, #5
    1a66:	4909      	ldr	r1, [pc, #36]	; (1a8c <_usb_d_dev_trans_stop+0x64>)
    1a68:	468c      	mov	ip, r1
    1a6a:	4463      	add	r3, ip
    1a6c:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1a6e:	0011      	movs	r1, r2
    1a70:	4b07      	ldr	r3, [pc, #28]	; (1a90 <_usb_d_dev_trans_stop+0x68>)
    1a72:	4798      	blx	r3
}
    1a74:	b003      	add	sp, #12
    1a76:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1a78:	015c      	lsls	r4, r3, #5
    1a7a:	4d03      	ldr	r5, [pc, #12]	; (1a88 <_usb_d_dev_trans_stop+0x60>)
    1a7c:	46ac      	mov	ip, r5
    1a7e:	4464      	add	r4, ip
    1a80:	2540      	movs	r5, #64	; 0x40
    1a82:	7165      	strb	r5, [r4, #5]
    1a84:	e7e7      	b.n	1a56 <_usb_d_dev_trans_stop+0x2e>
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	41005100 	.word	0x41005100
    1a8c:	41005108 	.word	0x41005108
    1a90:	00001a01 	.word	0x00001a01

00001a94 <_usb_d_dev_handle_trfail>:
{
    1a94:	b570      	push	{r4, r5, r6, lr}
    1a96:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1a98:	7c83      	ldrb	r3, [r0, #18]
    1a9a:	220f      	movs	r2, #15
    1a9c:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1a9e:	aa01      	add	r2, sp, #4
    1aa0:	2404      	movs	r4, #4
    1aa2:	7014      	strb	r4, [r2, #0]
    1aa4:	3404      	adds	r4, #4
    1aa6:	7054      	strb	r4, [r2, #1]
    1aa8:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    1aaa:	2900      	cmp	r1, #0
    1aac:	d031      	beq.n	1b12 <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1aae:	001a      	movs	r2, r3
    1ab0:	3208      	adds	r2, #8
    1ab2:	0152      	lsls	r2, r2, #5
    1ab4:	4c32      	ldr	r4, [pc, #200]	; (1b80 <_usb_d_dev_handle_trfail+0xec>)
    1ab6:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1ab8:	0664      	lsls	r4, r4, #25
    1aba:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    1abc:	010a      	lsls	r2, r1, #4
    1abe:	1952      	adds	r2, r2, r5
    1ac0:	4d30      	ldr	r5, [pc, #192]	; (1b84 <_usb_d_dev_handle_trfail+0xf0>)
    1ac2:	18aa      	adds	r2, r5, r2
    1ac4:	7a95      	ldrb	r5, [r2, #10]
    1ac6:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1ac8:	2c02      	cmp	r4, #2
    1aca:	d02a      	beq.n	1b22 <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    1acc:	07ac      	lsls	r4, r5, #30
    1ace:	d541      	bpl.n	1b54 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1ad0:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1ad2:	7a94      	ldrb	r4, [r2, #10]
    1ad4:	2602      	movs	r6, #2
    1ad6:	43b4      	bics	r4, r6
    1ad8:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1ada:	aa01      	add	r2, sp, #4
    1adc:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1ade:	015a      	lsls	r2, r3, #5
    1ae0:	4e29      	ldr	r6, [pc, #164]	; (1b88 <_usb_d_dev_handle_trfail+0xf4>)
    1ae2:	46b4      	mov	ip, r6
    1ae4:	4462      	add	r2, ip
    1ae6:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1ae8:	015b      	lsls	r3, r3, #5
    1aea:	4a28      	ldr	r2, [pc, #160]	; (1b8c <_usb_d_dev_handle_trfail+0xf8>)
    1aec:	4694      	mov	ip, r2
    1aee:	4463      	add	r3, ip
    1af0:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1af2:	2307      	movs	r3, #7
    1af4:	402b      	ands	r3, r5
    1af6:	2b01      	cmp	r3, #1
    1af8:	d13f      	bne.n	1b7a <_usb_d_dev_handle_trfail+0xe6>
    1afa:	7cc3      	ldrb	r3, [r0, #19]
    1afc:	065b      	lsls	r3, r3, #25
    1afe:	d53c      	bpl.n	1b7a <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1b00:	7cc3      	ldrb	r3, [r0, #19]
    1b02:	09db      	lsrs	r3, r3, #7
    1b04:	4299      	cmp	r1, r3
    1b06:	d038      	beq.n	1b7a <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1b08:	2200      	movs	r2, #0
    1b0a:	0019      	movs	r1, r3
    1b0c:	4b20      	ldr	r3, [pc, #128]	; (1b90 <_usb_d_dev_handle_trfail+0xfc>)
    1b0e:	4798      	blx	r3
    1b10:	e033      	b.n	1b7a <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1b12:	001a      	movs	r2, r3
    1b14:	3208      	adds	r2, #8
    1b16:	0152      	lsls	r2, r2, #5
    1b18:	4c19      	ldr	r4, [pc, #100]	; (1b80 <_usb_d_dev_handle_trfail+0xec>)
    1b1a:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1b1c:	2207      	movs	r2, #7
    1b1e:	4014      	ands	r4, r2
    1b20:	e7cc      	b.n	1abc <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1b22:	07ec      	lsls	r4, r5, #31
    1b24:	d5d2      	bpl.n	1acc <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1b26:	7a94      	ldrb	r4, [r2, #10]
    1b28:	2501      	movs	r5, #1
    1b2a:	43ac      	bics	r4, r5
    1b2c:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1b2e:	aa01      	add	r2, sp, #4
    1b30:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1b32:	015a      	lsls	r2, r3, #5
    1b34:	4d14      	ldr	r5, [pc, #80]	; (1b88 <_usb_d_dev_handle_trfail+0xf4>)
    1b36:	46ac      	mov	ip, r5
    1b38:	4462      	add	r2, ip
    1b3a:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1b3c:	015b      	lsls	r3, r3, #5
    1b3e:	4a13      	ldr	r2, [pc, #76]	; (1b8c <_usb_d_dev_handle_trfail+0xf8>)
    1b40:	4694      	mov	ip, r2
    1b42:	4463      	add	r3, ip
    1b44:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1b46:	1e4b      	subs	r3, r1, #1
    1b48:	4199      	sbcs	r1, r3
    1b4a:	b2c9      	uxtb	r1, r1
    1b4c:	2204      	movs	r2, #4
    1b4e:	4b10      	ldr	r3, [pc, #64]	; (1b90 <_usb_d_dev_handle_trfail+0xfc>)
    1b50:	4798      	blx	r3
    1b52:	e012      	b.n	1b7a <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    1b54:	005a      	lsls	r2, r3, #1
    1b56:	1852      	adds	r2, r2, r1
    1b58:	0112      	lsls	r2, r2, #4
    1b5a:	480a      	ldr	r0, [pc, #40]	; (1b84 <_usb_d_dev_handle_trfail+0xf0>)
    1b5c:	1882      	adds	r2, r0, r2
    1b5e:	2000      	movs	r0, #0
    1b60:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1b62:	aa01      	add	r2, sp, #4
    1b64:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1b66:	015a      	lsls	r2, r3, #5
    1b68:	4807      	ldr	r0, [pc, #28]	; (1b88 <_usb_d_dev_handle_trfail+0xf4>)
    1b6a:	4684      	mov	ip, r0
    1b6c:	4462      	add	r2, ip
    1b6e:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1b70:	015b      	lsls	r3, r3, #5
    1b72:	4a06      	ldr	r2, [pc, #24]	; (1b8c <_usb_d_dev_handle_trfail+0xf8>)
    1b74:	4694      	mov	ip, r2
    1b76:	4463      	add	r3, ip
    1b78:	7019      	strb	r1, [r3, #0]
}
    1b7a:	b002      	add	sp, #8
    1b7c:	bd70      	pop	{r4, r5, r6, pc}
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	41005000 	.word	0x41005000
    1b84:	200001ec 	.word	0x200001ec
    1b88:	41005100 	.word	0x41005100
    1b8c:	41005108 	.word	0x41005108
    1b90:	00001a29 	.word	0x00001a29

00001b94 <_usb_d_dev_reset_epts>:
{
    1b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b96:	46c6      	mov	lr, r8
    1b98:	b500      	push	{lr}
    1b9a:	4d0c      	ldr	r5, [pc, #48]	; (1bcc <_usb_d_dev_reset_epts+0x38>)
    1b9c:	002c      	movs	r4, r5
    1b9e:	3474      	adds	r4, #116	; 0x74
    1ba0:	3529      	adds	r5, #41	; 0x29
    1ba2:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1ba4:	4b0a      	ldr	r3, [pc, #40]	; (1bd0 <_usb_d_dev_reset_epts+0x3c>)
    1ba6:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    1ba8:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    1baa:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1bac:	2103      	movs	r1, #3
    1bae:	0020      	movs	r0, r4
    1bb0:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    1bb2:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1bb4:	74e6      	strb	r6, [r4, #19]
    1bb6:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1bb8:	42ac      	cmp	r4, r5
    1bba:	d1f7      	bne.n	1bac <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1bbc:	2260      	movs	r2, #96	; 0x60
    1bbe:	2100      	movs	r1, #0
    1bc0:	4802      	ldr	r0, [pc, #8]	; (1bcc <_usb_d_dev_reset_epts+0x38>)
    1bc2:	4b04      	ldr	r3, [pc, #16]	; (1bd4 <_usb_d_dev_reset_epts+0x40>)
    1bc4:	4798      	blx	r3
}
    1bc6:	bc04      	pop	{r2}
    1bc8:	4690      	mov	r8, r2
    1bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bcc:	200001ec 	.word	0x200001ec
    1bd0:	00001a01 	.word	0x00001a01
    1bd4:	00003937 	.word	0x00003937

00001bd8 <_usb_d_dev_in_next>:
{
    1bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bda:	46c6      	mov	lr, r8
    1bdc:	b500      	push	{lr}
    1bde:	0004      	movs	r4, r0
    1be0:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1be2:	7c83      	ldrb	r3, [r0, #18]
    1be4:	250f      	movs	r5, #15
    1be6:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1be8:	2900      	cmp	r1, #0
    1bea:	d100      	bne.n	1bee <_usb_d_dev_in_next+0x16>
    1bec:	e0aa      	b.n	1d44 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1bee:	016a      	lsls	r2, r5, #5
    1bf0:	4b5a      	ldr	r3, [pc, #360]	; (1d5c <_usb_d_dev_in_next+0x184>)
    1bf2:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1bf4:	6958      	ldr	r0, [r3, #20]
    1bf6:	0480      	lsls	r0, r0, #18
    1bf8:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1bfa:	8a23      	ldrh	r3, [r4, #16]
    1bfc:	4a58      	ldr	r2, [pc, #352]	; (1d60 <_usb_d_dev_in_next+0x188>)
    1bfe:	4293      	cmp	r3, r2
    1c00:	d100      	bne.n	1c04 <_usb_d_dev_in_next+0x2c>
    1c02:	e09a      	b.n	1d3a <_usb_d_dev_in_next+0x162>
    1c04:	3b01      	subs	r3, #1
    1c06:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1c08:	7ce3      	ldrb	r3, [r4, #19]
    1c0a:	2707      	movs	r7, #7
    1c0c:	401f      	ands	r7, r3
	if (isr) {
    1c0e:	2e00      	cmp	r6, #0
    1c10:	d005      	beq.n	1c1e <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1c12:	016b      	lsls	r3, r5, #5
    1c14:	4953      	ldr	r1, [pc, #332]	; (1d64 <_usb_d_dev_in_next+0x18c>)
    1c16:	468c      	mov	ip, r1
    1c18:	4463      	add	r3, ip
    1c1a:	2102      	movs	r1, #2
    1c1c:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    1c1e:	68a3      	ldr	r3, [r4, #8]
    1c20:	18c1      	adds	r1, r0, r3
    1c22:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    1c24:	6863      	ldr	r3, [r4, #4]
    1c26:	4299      	cmp	r1, r3
    1c28:	d24a      	bcs.n	1cc0 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    1c2a:	1a5b      	subs	r3, r3, r1
    1c2c:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    1c2e:	7ce2      	ldrb	r2, [r4, #19]
    1c30:	0692      	lsls	r2, r2, #26
    1c32:	d535      	bpl.n	1ca0 <_usb_d_dev_in_next+0xc8>
    1c34:	8a22      	ldrh	r2, [r4, #16]
    1c36:	1c10      	adds	r0, r2, #0
    1c38:	b292      	uxth	r2, r2
    1c3a:	429a      	cmp	r2, r3
    1c3c:	d900      	bls.n	1c40 <_usb_d_dev_in_next+0x68>
    1c3e:	1c18      	adds	r0, r3, #0
    1c40:	b283      	uxth	r3, r0
    1c42:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1c44:	6823      	ldr	r3, [r4, #0]
    1c46:	469c      	mov	ip, r3
    1c48:	4461      	add	r1, ip
    1c4a:	4642      	mov	r2, r8
    1c4c:	68e0      	ldr	r0, [r4, #12]
    1c4e:	4b46      	ldr	r3, [pc, #280]	; (1d68 <_usb_d_dev_in_next+0x190>)
    1c50:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1c52:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    1c54:	016a      	lsls	r2, r5, #5
    1c56:	4b41      	ldr	r3, [pc, #260]	; (1d5c <_usb_d_dev_in_next+0x184>)
    1c58:	189b      	adds	r3, r3, r2
    1c5a:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1c5c:	016a      	lsls	r2, r5, #5
    1c5e:	4b3f      	ldr	r3, [pc, #252]	; (1d5c <_usb_d_dev_in_next+0x184>)
    1c60:	189b      	adds	r3, r3, r2
    1c62:	695a      	ldr	r2, [r3, #20]
    1c64:	4641      	mov	r1, r8
    1c66:	0489      	lsls	r1, r1, #18
    1c68:	0c89      	lsrs	r1, r1, #18
    1c6a:	0b92      	lsrs	r2, r2, #14
    1c6c:	0392      	lsls	r2, r2, #14
    1c6e:	430a      	orrs	r2, r1
    1c70:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1c72:	695a      	ldr	r2, [r3, #20]
    1c74:	493d      	ldr	r1, [pc, #244]	; (1d6c <_usb_d_dev_in_next+0x194>)
    1c76:	400a      	ands	r2, r1
    1c78:	615a      	str	r2, [r3, #20]
	if (!isr) {
    1c7a:	2e00      	cmp	r6, #0
    1c7c:	d107      	bne.n	1c8e <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    1c7e:	2f01      	cmp	r7, #1
    1c80:	d059      	beq.n	1d36 <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    1c82:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1c84:	016b      	lsls	r3, r5, #5
    1c86:	493a      	ldr	r1, [pc, #232]	; (1d70 <_usb_d_dev_in_next+0x198>)
    1c88:	468c      	mov	ip, r1
    1c8a:	4463      	add	r3, ip
    1c8c:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1c8e:	016d      	lsls	r5, r5, #5
    1c90:	4b34      	ldr	r3, [pc, #208]	; (1d64 <_usb_d_dev_in_next+0x18c>)
    1c92:	469c      	mov	ip, r3
    1c94:	4465      	add	r5, ip
    1c96:	2380      	movs	r3, #128	; 0x80
    1c98:	716b      	strb	r3, [r5, #5]
}
    1c9a:	bc04      	pop	{r2}
    1c9c:	4690      	mov	r8, r2
    1c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ca0:	1c1a      	adds	r2, r3, #0
    1ca2:	2080      	movs	r0, #128	; 0x80
    1ca4:	0180      	lsls	r0, r0, #6
    1ca6:	4283      	cmp	r3, r0
    1ca8:	d901      	bls.n	1cae <_usb_d_dev_in_next+0xd6>
    1caa:	4b32      	ldr	r3, [pc, #200]	; (1d74 <_usb_d_dev_in_next+0x19c>)
    1cac:	881a      	ldrh	r2, [r3, #0]
    1cae:	b293      	uxth	r3, r2
    1cb0:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1cb2:	6823      	ldr	r3, [r4, #0]
    1cb4:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    1cb6:	016a      	lsls	r2, r5, #5
    1cb8:	4b28      	ldr	r3, [pc, #160]	; (1d5c <_usb_d_dev_in_next+0x184>)
    1cba:	189b      	adds	r3, r3, r2
    1cbc:	6119      	str	r1, [r3, #16]
    1cbe:	e7cd      	b.n	1c5c <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    1cc0:	7ce3      	ldrb	r3, [r4, #19]
    1cc2:	06db      	lsls	r3, r3, #27
    1cc4:	d50f      	bpl.n	1ce6 <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    1cc6:	7ce3      	ldrb	r3, [r4, #19]
    1cc8:	2210      	movs	r2, #16
    1cca:	4393      	bics	r3, r2
    1ccc:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1cce:	016a      	lsls	r2, r5, #5
    1cd0:	4b22      	ldr	r3, [pc, #136]	; (1d5c <_usb_d_dev_in_next+0x184>)
    1cd2:	189b      	adds	r3, r3, r2
    1cd4:	695a      	ldr	r2, [r3, #20]
    1cd6:	0b92      	lsrs	r2, r2, #14
    1cd8:	0392      	lsls	r2, r2, #14
    1cda:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1cdc:	695a      	ldr	r2, [r3, #20]
    1cde:	4923      	ldr	r1, [pc, #140]	; (1d6c <_usb_d_dev_in_next+0x194>)
    1ce0:	400a      	ands	r2, r1
    1ce2:	615a      	str	r2, [r3, #20]
    1ce4:	e7c9      	b.n	1c7a <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    1ce6:	2f01      	cmp	r7, #1
    1ce8:	d00e      	beq.n	1d08 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1cea:	016d      	lsls	r5, r5, #5
    1cec:	4b22      	ldr	r3, [pc, #136]	; (1d78 <_usb_d_dev_in_next+0x1a0>)
    1cee:	469c      	mov	ip, r3
    1cf0:	4465      	add	r5, ip
    1cf2:	234a      	movs	r3, #74	; 0x4a
    1cf4:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    1cf6:	8a21      	ldrh	r1, [r4, #16]
    1cf8:	4002      	ands	r2, r0
    1cfa:	4291      	cmp	r1, r2
    1cfc:	d00b      	beq.n	1d16 <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1cfe:	2100      	movs	r1, #0
    1d00:	0020      	movs	r0, r4
    1d02:	4b1e      	ldr	r3, [pc, #120]	; (1d7c <_usb_d_dev_in_next+0x1a4>)
    1d04:	4798      	blx	r3
	return;
    1d06:	e7c8      	b.n	1c9a <_usb_d_dev_in_next+0xc2>
    1d08:	016d      	lsls	r5, r5, #5
    1d0a:	4b1b      	ldr	r3, [pc, #108]	; (1d78 <_usb_d_dev_in_next+0x1a0>)
    1d0c:	469c      	mov	ip, r3
    1d0e:	4465      	add	r5, ip
    1d10:	234b      	movs	r3, #75	; 0x4b
    1d12:	702b      	strb	r3, [r5, #0]
    1d14:	e7ef      	b.n	1cf6 <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    1d16:	7ce3      	ldrb	r3, [r4, #19]
    1d18:	2240      	movs	r2, #64	; 0x40
    1d1a:	4393      	bics	r3, r2
    1d1c:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1d1e:	7ca0      	ldrb	r0, [r4, #18]
    1d20:	4b0e      	ldr	r3, [pc, #56]	; (1d5c <_usb_d_dev_in_next+0x184>)
    1d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1d24:	68a1      	ldr	r1, [r4, #8]
    1d26:	4798      	blx	r3
    1d28:	2800      	cmp	r0, #0
    1d2a:	d1b6      	bne.n	1c9a <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    1d2c:	7ce3      	ldrb	r3, [r4, #19]
    1d2e:	2240      	movs	r2, #64	; 0x40
    1d30:	4313      	orrs	r3, r2
    1d32:	74e3      	strb	r3, [r4, #19]
    1d34:	e7e3      	b.n	1cfe <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1d36:	224e      	movs	r2, #78	; 0x4e
    1d38:	e7a4      	b.n	1c84 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1d3a:	7ce7      	ldrb	r7, [r4, #19]
    1d3c:	2307      	movs	r3, #7
    1d3e:	401f      	ands	r7, r3
    1d40:	4a07      	ldr	r2, [pc, #28]	; (1d60 <_usb_d_dev_in_next+0x188>)
    1d42:	e766      	b.n	1c12 <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1d44:	8a03      	ldrh	r3, [r0, #16]
    1d46:	4a06      	ldr	r2, [pc, #24]	; (1d60 <_usb_d_dev_in_next+0x188>)
    1d48:	2000      	movs	r0, #0
    1d4a:	4293      	cmp	r3, r2
    1d4c:	d000      	beq.n	1d50 <_usb_d_dev_in_next+0x178>
    1d4e:	e759      	b.n	1c04 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1d50:	7ce3      	ldrb	r3, [r4, #19]
    1d52:	2707      	movs	r7, #7
    1d54:	401f      	ands	r7, r3
    1d56:	2000      	movs	r0, #0
    1d58:	4a01      	ldr	r2, [pc, #4]	; (1d60 <_usb_d_dev_in_next+0x188>)
    1d5a:	e760      	b.n	1c1e <_usb_d_dev_in_next+0x46>
    1d5c:	200001ec 	.word	0x200001ec
    1d60:	000003ff 	.word	0x000003ff
    1d64:	41005100 	.word	0x41005100
    1d68:	00003925 	.word	0x00003925
    1d6c:	f0003fff 	.word	0xf0003fff
    1d70:	41005109 	.word	0x41005109
    1d74:	00004254 	.word	0x00004254
    1d78:	41005108 	.word	0x41005108
    1d7c:	00001a01 	.word	0x00001a01

00001d80 <_usb_d_dev_out_next>:
{
    1d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d82:	46de      	mov	lr, fp
    1d84:	4657      	mov	r7, sl
    1d86:	464e      	mov	r6, r9
    1d88:	4645      	mov	r5, r8
    1d8a:	b5e0      	push	{r5, r6, r7, lr}
    1d8c:	0004      	movs	r4, r0
    1d8e:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1d90:	7c83      	ldrb	r3, [r0, #18]
    1d92:	250f      	movs	r5, #15
    1d94:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1d96:	2900      	cmp	r1, #0
    1d98:	d057      	beq.n	1e4a <_usb_d_dev_out_next+0xca>
    1d9a:	016a      	lsls	r2, r5, #5
    1d9c:	4b7d      	ldr	r3, [pc, #500]	; (1f94 <_usb_d_dev_out_next+0x214>)
    1d9e:	189b      	adds	r3, r3, r2
    1da0:	685a      	ldr	r2, [r3, #4]
    1da2:	0112      	lsls	r2, r2, #4
    1da4:	0c92      	lsrs	r2, r2, #18
    1da6:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1da8:	685f      	ldr	r7, [r3, #4]
    1daa:	04bf      	lsls	r7, r7, #18
    1dac:	0cbf      	lsrs	r7, r7, #18
    1dae:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1db0:	8a06      	ldrh	r6, [r0, #16]
    1db2:	4b79      	ldr	r3, [pc, #484]	; (1f98 <_usb_d_dev_out_next+0x218>)
    1db4:	429e      	cmp	r6, r3
    1db6:	d100      	bne.n	1dba <_usb_d_dev_out_next+0x3a>
    1db8:	e0cd      	b.n	1f56 <_usb_d_dev_out_next+0x1d6>
    1dba:	3e01      	subs	r6, #1
    1dbc:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    1dbe:	465f      	mov	r7, fp
    1dc0:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1dc2:	7ce3      	ldrb	r3, [r4, #19]
    1dc4:	2207      	movs	r2, #7
    1dc6:	401a      	ands	r2, r3
    1dc8:	4691      	mov	r9, r2
	if (isr) {
    1dca:	4643      	mov	r3, r8
    1dcc:	2b00      	cmp	r3, #0
    1dce:	d005      	beq.n	1ddc <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1dd0:	016b      	lsls	r3, r5, #5
    1dd2:	4a72      	ldr	r2, [pc, #456]	; (1f9c <_usb_d_dev_out_next+0x21c>)
    1dd4:	4694      	mov	ip, r2
    1dd6:	4463      	add	r3, ip
    1dd8:	2201      	movs	r2, #1
    1dda:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1ddc:	7ce3      	ldrb	r3, [r4, #19]
    1dde:	069b      	lsls	r3, r3, #26
    1de0:	d50f      	bpl.n	1e02 <_usb_d_dev_out_next+0x82>
    1de2:	6863      	ldr	r3, [r4, #4]
    1de4:	2b00      	cmp	r3, #0
    1de6:	d039      	beq.n	1e5c <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1de8:	68a0      	ldr	r0, [r4, #8]
    1dea:	1a1b      	subs	r3, r3, r0
    1dec:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1dee:	6822      	ldr	r2, [r4, #0]
    1df0:	4694      	mov	ip, r2
    1df2:	4460      	add	r0, ip
    1df4:	68e1      	ldr	r1, [r4, #12]
    1df6:	001a      	movs	r2, r3
    1df8:	42bb      	cmp	r3, r7
    1dfa:	d900      	bls.n	1dfe <_usb_d_dev_out_next+0x7e>
    1dfc:	003a      	movs	r2, r7
    1dfe:	4b68      	ldr	r3, [pc, #416]	; (1fa0 <_usb_d_dev_out_next+0x220>)
    1e00:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1e02:	6863      	ldr	r3, [r4, #4]
    1e04:	2b00      	cmp	r3, #0
    1e06:	d029      	beq.n	1e5c <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    1e08:	4642      	mov	r2, r8
    1e0a:	2a00      	cmp	r2, #0
    1e0c:	d042      	beq.n	1e94 <_usb_d_dev_out_next+0x114>
    1e0e:	8a22      	ldrh	r2, [r4, #16]
    1e10:	42ba      	cmp	r2, r7
    1e12:	d93f      	bls.n	1e94 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    1e14:	7ce3      	ldrb	r3, [r4, #19]
    1e16:	2210      	movs	r2, #16
    1e18:	4393      	bics	r3, r2
    1e1a:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1e1c:	68a3      	ldr	r3, [r4, #8]
    1e1e:	445b      	add	r3, fp
    1e20:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    1e22:	464b      	mov	r3, r9
    1e24:	2b01      	cmp	r3, #1
    1e26:	d100      	bne.n	1e2a <_usb_d_dev_out_next+0xaa>
    1e28:	e087      	b.n	1f3a <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1e2a:	016b      	lsls	r3, r5, #5
    1e2c:	4a5d      	ldr	r2, [pc, #372]	; (1fa4 <_usb_d_dev_out_next+0x224>)
    1e2e:	4694      	mov	ip, r2
    1e30:	4463      	add	r3, ip
    1e32:	2225      	movs	r2, #37	; 0x25
    1e34:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    1e36:	2d00      	cmp	r5, #0
    1e38:	d102      	bne.n	1e40 <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    1e3a:	4b56      	ldr	r3, [pc, #344]	; (1f94 <_usb_d_dev_out_next+0x214>)
    1e3c:	68e2      	ldr	r2, [r4, #12]
    1e3e:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1e40:	2100      	movs	r1, #0
    1e42:	0020      	movs	r0, r4
    1e44:	4b58      	ldr	r3, [pc, #352]	; (1fa8 <_usb_d_dev_out_next+0x228>)
    1e46:	4798      	blx	r3
	return;
    1e48:	e059      	b.n	1efe <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1e4a:	8a06      	ldrh	r6, [r0, #16]
    1e4c:	4b52      	ldr	r3, [pc, #328]	; (1f98 <_usb_d_dev_out_next+0x218>)
    1e4e:	429e      	cmp	r6, r3
    1e50:	d100      	bne.n	1e54 <_usb_d_dev_out_next+0xd4>
    1e52:	e08e      	b.n	1f72 <_usb_d_dev_out_next+0x1f2>
    1e54:	2300      	movs	r3, #0
    1e56:	469b      	mov	fp, r3
    1e58:	469a      	mov	sl, r3
    1e5a:	e7ae      	b.n	1dba <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1e5c:	7ce3      	ldrb	r3, [r4, #19]
    1e5e:	06db      	lsls	r3, r3, #27
    1e60:	d400      	bmi.n	1e64 <_usb_d_dev_out_next+0xe4>
    1e62:	e07f      	b.n	1f64 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    1e64:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1e66:	2210      	movs	r2, #16
    1e68:	4393      	bics	r3, r2
    1e6a:	2220      	movs	r2, #32
    1e6c:	4313      	orrs	r3, r2
    1e6e:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    1e70:	4a48      	ldr	r2, [pc, #288]	; (1f94 <_usb_d_dev_out_next+0x214>)
    1e72:	016b      	lsls	r3, r5, #5
    1e74:	68e1      	ldr	r1, [r4, #12]
    1e76:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1e78:	8a21      	ldrh	r1, [r4, #16]
    1e7a:	18d3      	adds	r3, r2, r3
    1e7c:	685a      	ldr	r2, [r3, #4]
    1e7e:	0489      	lsls	r1, r1, #18
    1e80:	0909      	lsrs	r1, r1, #4
    1e82:	484a      	ldr	r0, [pc, #296]	; (1fac <_usb_d_dev_out_next+0x22c>)
    1e84:	4002      	ands	r2, r0
    1e86:	430a      	orrs	r2, r1
    1e88:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1e8a:	685a      	ldr	r2, [r3, #4]
    1e8c:	0b92      	lsrs	r2, r2, #14
    1e8e:	0392      	lsls	r2, r2, #14
    1e90:	605a      	str	r2, [r3, #4]
    1e92:	e022      	b.n	1eda <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    1e94:	68a2      	ldr	r2, [r4, #8]
    1e96:	4452      	add	r2, sl
    1e98:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1e9a:	4293      	cmp	r3, r2
    1e9c:	d9c1      	bls.n	1e22 <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    1e9e:	1a9b      	subs	r3, r3, r2
    1ea0:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1ea2:	7ce1      	ldrb	r1, [r4, #19]
    1ea4:	0689      	lsls	r1, r1, #26
    1ea6:	d530      	bpl.n	1f0a <_usb_d_dev_out_next+0x18a>
    1ea8:	8a22      	ldrh	r2, [r4, #16]
    1eaa:	1c11      	adds	r1, r2, #0
    1eac:	b292      	uxth	r2, r2
    1eae:	429a      	cmp	r2, r3
    1eb0:	d900      	bls.n	1eb4 <_usb_d_dev_out_next+0x134>
    1eb2:	1c19      	adds	r1, r3, #0
    1eb4:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1eb6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1eb8:	016a      	lsls	r2, r5, #5
    1eba:	4936      	ldr	r1, [pc, #216]	; (1f94 <_usb_d_dev_out_next+0x214>)
    1ebc:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1ebe:	016a      	lsls	r2, r5, #5
    1ec0:	4934      	ldr	r1, [pc, #208]	; (1f94 <_usb_d_dev_out_next+0x214>)
    1ec2:	1889      	adds	r1, r1, r2
    1ec4:	684a      	ldr	r2, [r1, #4]
    1ec6:	049b      	lsls	r3, r3, #18
    1ec8:	091b      	lsrs	r3, r3, #4
    1eca:	4838      	ldr	r0, [pc, #224]	; (1fac <_usb_d_dev_out_next+0x22c>)
    1ecc:	4002      	ands	r2, r0
    1ece:	4313      	orrs	r3, r2
    1ed0:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1ed2:	684b      	ldr	r3, [r1, #4]
    1ed4:	0b9b      	lsrs	r3, r3, #14
    1ed6:	039b      	lsls	r3, r3, #14
    1ed8:	604b      	str	r3, [r1, #4]
	if (!isr) {
    1eda:	4643      	mov	r3, r8
    1edc:	2b00      	cmp	r3, #0
    1ede:	d108      	bne.n	1ef2 <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    1ee0:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    1ee2:	464b      	mov	r3, r9
    1ee4:	2b01      	cmp	r3, #1
    1ee6:	d02f      	beq.n	1f48 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1ee8:	016b      	lsls	r3, r5, #5
    1eea:	4931      	ldr	r1, [pc, #196]	; (1fb0 <_usb_d_dev_out_next+0x230>)
    1eec:	468c      	mov	ip, r1
    1eee:	4463      	add	r3, ip
    1ef0:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1ef2:	016d      	lsls	r5, r5, #5
    1ef4:	4b29      	ldr	r3, [pc, #164]	; (1f9c <_usb_d_dev_out_next+0x21c>)
    1ef6:	469c      	mov	ip, r3
    1ef8:	4465      	add	r5, ip
    1efa:	2340      	movs	r3, #64	; 0x40
    1efc:	712b      	strb	r3, [r5, #4]
}
    1efe:	bc3c      	pop	{r2, r3, r4, r5}
    1f00:	4690      	mov	r8, r2
    1f02:	4699      	mov	r9, r3
    1f04:	46a2      	mov	sl, r4
    1f06:	46ab      	mov	fp, r5
    1f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    1f0a:	8a21      	ldrh	r1, [r4, #16]
    1f0c:	428b      	cmp	r3, r1
    1f0e:	d90a      	bls.n	1f26 <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1f10:	2180      	movs	r1, #128	; 0x80
    1f12:	0189      	lsls	r1, r1, #6
    1f14:	428b      	cmp	r3, r1
    1f16:	d80d      	bhi.n	1f34 <_usb_d_dev_out_next+0x1b4>
    1f18:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1f1a:	6821      	ldr	r1, [r4, #0]
    1f1c:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    1f1e:	0169      	lsls	r1, r5, #5
    1f20:	481c      	ldr	r0, [pc, #112]	; (1f94 <_usb_d_dev_out_next+0x214>)
    1f22:	500a      	str	r2, [r1, r0]
    1f24:	e7cb      	b.n	1ebe <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    1f26:	428b      	cmp	r3, r1
    1f28:	d2f7      	bcs.n	1f1a <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    1f2a:	7ce1      	ldrb	r1, [r4, #19]
    1f2c:	2020      	movs	r0, #32
    1f2e:	4301      	orrs	r1, r0
    1f30:	74e1      	strb	r1, [r4, #19]
    1f32:	e7f2      	b.n	1f1a <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    1f34:	2380      	movs	r3, #128	; 0x80
    1f36:	019b      	lsls	r3, r3, #6
    1f38:	e7ef      	b.n	1f1a <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1f3a:	016b      	lsls	r3, r5, #5
    1f3c:	4a19      	ldr	r2, [pc, #100]	; (1fa4 <_usb_d_dev_out_next+0x224>)
    1f3e:	4694      	mov	ip, r2
    1f40:	4463      	add	r3, ip
    1f42:	222d      	movs	r2, #45	; 0x2d
    1f44:	701a      	strb	r2, [r3, #0]
    1f46:	e776      	b.n	1e36 <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    1f48:	016a      	lsls	r2, r5, #5
    1f4a:	4b12      	ldr	r3, [pc, #72]	; (1f94 <_usb_d_dev_out_next+0x214>)
    1f4c:	189b      	adds	r3, r3, r2
    1f4e:	2200      	movs	r2, #0
    1f50:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1f52:	322d      	adds	r2, #45	; 0x2d
    1f54:	e7c8      	b.n	1ee8 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    1f56:	05bf      	lsls	r7, r7, #22
    1f58:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1f5a:	7cc3      	ldrb	r3, [r0, #19]
    1f5c:	2207      	movs	r2, #7
    1f5e:	401a      	ands	r2, r3
    1f60:	4691      	mov	r9, r2
    1f62:	e735      	b.n	1dd0 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    1f64:	4643      	mov	r3, r8
    1f66:	2b00      	cmp	r3, #0
    1f68:	d10c      	bne.n	1f84 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    1f6a:	68a3      	ldr	r3, [r4, #8]
    1f6c:	4453      	add	r3, sl
    1f6e:	60a3      	str	r3, [r4, #8]
    1f70:	e757      	b.n	1e22 <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1f72:	7cc3      	ldrb	r3, [r0, #19]
    1f74:	2207      	movs	r2, #7
    1f76:	401a      	ands	r2, r3
    1f78:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    1f7a:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1f7c:	2300      	movs	r3, #0
    1f7e:	469b      	mov	fp, r3
    1f80:	469a      	mov	sl, r3
    1f82:	e72b      	b.n	1ddc <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    1f84:	8a23      	ldrh	r3, [r4, #16]
    1f86:	42bb      	cmp	r3, r7
    1f88:	d900      	bls.n	1f8c <_usb_d_dev_out_next+0x20c>
    1f8a:	e743      	b.n	1e14 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    1f8c:	68a3      	ldr	r3, [r4, #8]
    1f8e:	4453      	add	r3, sl
    1f90:	60a3      	str	r3, [r4, #8]
    1f92:	e746      	b.n	1e22 <_usb_d_dev_out_next+0xa2>
    1f94:	200001ec 	.word	0x200001ec
    1f98:	000003ff 	.word	0x000003ff
    1f9c:	41005100 	.word	0x41005100
    1fa0:	00003925 	.word	0x00003925
    1fa4:	41005108 	.word	0x41005108
    1fa8:	00001a01 	.word	0x00001a01
    1fac:	f0003fff 	.word	0xf0003fff
    1fb0:	41005109 	.word	0x41005109

00001fb4 <_usb_d_dev_init>:
{
    1fb4:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1fb6:	4b31      	ldr	r3, [pc, #196]	; (207c <STACK_SIZE+0x7c>)
    1fb8:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1fba:	07db      	lsls	r3, r3, #31
    1fbc:	d41f      	bmi.n	1ffe <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1fbe:	492f      	ldr	r1, [pc, #188]	; (207c <STACK_SIZE+0x7c>)
    1fc0:	2203      	movs	r2, #3
    1fc2:	788b      	ldrb	r3, [r1, #2]
    1fc4:	4213      	tst	r3, r2
    1fc6:	d1fc      	bne.n	1fc2 <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    1fc8:	4b2c      	ldr	r3, [pc, #176]	; (207c <STACK_SIZE+0x7c>)
    1fca:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1fcc:	079b      	lsls	r3, r3, #30
    1fce:	d50e      	bpl.n	1fee <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1fd0:	4a2a      	ldr	r2, [pc, #168]	; (207c <STACK_SIZE+0x7c>)
    1fd2:	7813      	ldrb	r3, [r2, #0]
    1fd4:	2102      	movs	r1, #2
    1fd6:	438b      	bics	r3, r1
    1fd8:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1fda:	0011      	movs	r1, r2
    1fdc:	2203      	movs	r2, #3
    1fde:	788b      	ldrb	r3, [r1, #2]
    1fe0:	4213      	tst	r3, r2
    1fe2:	d1fc      	bne.n	1fde <_usb_d_dev_init+0x2a>
    1fe4:	4925      	ldr	r1, [pc, #148]	; (207c <STACK_SIZE+0x7c>)
    1fe6:	2202      	movs	r2, #2
    1fe8:	788b      	ldrb	r3, [r1, #2]
    1fea:	4213      	tst	r3, r2
    1fec:	d1fc      	bne.n	1fe8 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1fee:	2201      	movs	r2, #1
    1ff0:	4b22      	ldr	r3, [pc, #136]	; (207c <STACK_SIZE+0x7c>)
    1ff2:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1ff4:	0019      	movs	r1, r3
    1ff6:	3202      	adds	r2, #2
    1ff8:	788b      	ldrb	r3, [r1, #2]
    1ffa:	4213      	tst	r3, r2
    1ffc:	d1fc      	bne.n	1ff8 <_usb_d_dev_init+0x44>
    1ffe:	491f      	ldr	r1, [pc, #124]	; (207c <STACK_SIZE+0x7c>)
    2000:	2201      	movs	r2, #1
    2002:	788b      	ldrb	r3, [r1, #2]
    2004:	4213      	tst	r3, r2
    2006:	d1fc      	bne.n	2002 <STACK_SIZE+0x2>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2008:	4b1d      	ldr	r3, [pc, #116]	; (2080 <STACK_SIZE+0x80>)
    200a:	4a1e      	ldr	r2, [pc, #120]	; (2084 <STACK_SIZE+0x84>)
    200c:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    200e:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2010:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2012:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2014:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    2016:	4b1c      	ldr	r3, [pc, #112]	; (2088 <STACK_SIZE+0x88>)
    2018:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    201a:	4b1c      	ldr	r3, [pc, #112]	; (208c <STACK_SIZE+0x8c>)
    201c:	681b      	ldr	r3, [r3, #0]
    201e:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    2020:	211f      	movs	r1, #31
    2022:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    2024:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    2026:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    2028:	019b      	lsls	r3, r3, #6
    202a:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    202c:	2a1f      	cmp	r2, #31
    202e:	d01f      	beq.n	2070 <STACK_SIZE+0x70>
	if (pad_transp == 0x1F) {
    2030:	291f      	cmp	r1, #31
    2032:	d01f      	beq.n	2074 <STACK_SIZE+0x74>
	if (pad_trim == 0x7) {
    2034:	2b07      	cmp	r3, #7
    2036:	d01f      	beq.n	2078 <STACK_SIZE+0x78>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    2038:	0192      	lsls	r2, r2, #6
    203a:	430a      	orrs	r2, r1
    203c:	031b      	lsls	r3, r3, #12
    203e:	4313      	orrs	r3, r2
    2040:	4a0e      	ldr	r2, [pc, #56]	; (207c <STACK_SIZE+0x7c>)
    2042:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    2044:	78d3      	ldrb	r3, [r2, #3]
    2046:	2103      	movs	r1, #3
    2048:	430b      	orrs	r3, r1
    204a:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    204c:	78d3      	ldrb	r3, [r2, #3]
    204e:	210c      	movs	r1, #12
    2050:	430b      	orrs	r3, r1
    2052:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2054:	2304      	movs	r3, #4
    2056:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2058:	0011      	movs	r1, r2
    205a:	2203      	movs	r2, #3
    205c:	788b      	ldrb	r3, [r1, #2]
    205e:	4213      	tst	r3, r2
    2060:	d1fc      	bne.n	205c <STACK_SIZE+0x5c>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    2062:	4b06      	ldr	r3, [pc, #24]	; (207c <STACK_SIZE+0x7c>)
    2064:	4a06      	ldr	r2, [pc, #24]	; (2080 <STACK_SIZE+0x80>)
    2066:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    2068:	2201      	movs	r2, #1
    206a:	811a      	strh	r2, [r3, #8]
}
    206c:	2000      	movs	r0, #0
    206e:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    2070:	3a1a      	subs	r2, #26
    2072:	e7dd      	b.n	2030 <STACK_SIZE+0x30>
		pad_transp = 29;
    2074:	3902      	subs	r1, #2
    2076:	e7dd      	b.n	2034 <STACK_SIZE+0x34>
		pad_trim = 5;
    2078:	3b02      	subs	r3, #2
    207a:	e7dd      	b.n	2038 <STACK_SIZE+0x38>
    207c:	41005000 	.word	0x41005000
    2080:	200001ec 	.word	0x200001ec
    2084:	00001941 	.word	0x00001941
    2088:	00001b95 	.word	0x00001b95
    208c:	00806024 	.word	0x00806024

00002090 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    2090:	4b10      	ldr	r3, [pc, #64]	; (20d4 <_usb_d_dev_enable+0x44>)
    2092:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    2094:	079b      	lsls	r3, r3, #30
    2096:	d11a      	bne.n	20ce <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2098:	490e      	ldr	r1, [pc, #56]	; (20d4 <_usb_d_dev_enable+0x44>)
    209a:	2203      	movs	r2, #3
    209c:	788b      	ldrb	r3, [r1, #2]
    209e:	4213      	tst	r3, r2
    20a0:	d1fc      	bne.n	209c <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    20a2:	4b0c      	ldr	r3, [pc, #48]	; (20d4 <_usb_d_dev_enable+0x44>)
    20a4:	781b      	ldrb	r3, [r3, #0]
    20a6:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    20a8:	079a      	lsls	r2, r3, #30
    20aa:	d408      	bmi.n	20be <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    20ac:	2202      	movs	r2, #2
    20ae:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    20b0:	4a08      	ldr	r2, [pc, #32]	; (20d4 <_usb_d_dev_enable+0x44>)
    20b2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    20b4:	0011      	movs	r1, r2
    20b6:	2203      	movs	r2, #3
    20b8:	788b      	ldrb	r3, [r1, #2]
    20ba:	4213      	tst	r3, r2
    20bc:	d1fc      	bne.n	20b8 <_usb_d_dev_enable+0x28>
    20be:	2280      	movs	r2, #128	; 0x80
    20c0:	4b05      	ldr	r3, [pc, #20]	; (20d8 <_usb_d_dev_enable+0x48>)
    20c2:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    20c4:	4a05      	ldr	r2, [pc, #20]	; (20dc <_usb_d_dev_enable+0x4c>)
    20c6:	4b03      	ldr	r3, [pc, #12]	; (20d4 <_usb_d_dev_enable+0x44>)
    20c8:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    20ca:	2000      	movs	r0, #0
}
    20cc:	4770      	bx	lr
		return -USB_ERR_DENIED;
    20ce:	2011      	movs	r0, #17
    20d0:	4240      	negs	r0, r0
    20d2:	e7fb      	b.n	20cc <_usb_d_dev_enable+0x3c>
    20d4:	41005000 	.word	0x41005000
    20d8:	e000e100 	.word	0xe000e100
    20dc:	0000028d 	.word	0x0000028d

000020e0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    20e0:	4a02      	ldr	r2, [pc, #8]	; (20ec <_usb_d_dev_attach+0xc>)
    20e2:	8913      	ldrh	r3, [r2, #8]
    20e4:	2101      	movs	r1, #1
    20e6:	438b      	bics	r3, r1
    20e8:	8113      	strh	r3, [r2, #8]
}
    20ea:	4770      	bx	lr
    20ec:	41005000 	.word	0x41005000

000020f0 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    20f0:	2380      	movs	r3, #128	; 0x80
    20f2:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    20f4:	4b01      	ldr	r3, [pc, #4]	; (20fc <_usb_d_dev_set_address+0xc>)
    20f6:	7298      	strb	r0, [r3, #10]
}
    20f8:	4770      	bx	lr
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	41005000 	.word	0x41005000

00002100 <_usb_d_dev_ep_init>:
{
    2100:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    2102:	240f      	movs	r4, #15
    2104:	4004      	ands	r4, r0
    2106:	b243      	sxtb	r3, r0
    2108:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    210a:	2c00      	cmp	r4, #0
    210c:	d054      	beq.n	21b8 <_usb_d_dev_ep_init+0xb8>
    210e:	0025      	movs	r5, r4
    2110:	2b00      	cmp	r3, #0
    2112:	db07      	blt.n	2124 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2114:	2303      	movs	r3, #3
    2116:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2118:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    211a:	2c02      	cmp	r4, #2
    211c:	d950      	bls.n	21c0 <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    211e:	2012      	movs	r0, #18
    2120:	4240      	negs	r0, r0
    2122:	e025      	b.n	2170 <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2124:	1ca5      	adds	r5, r4, #2
    2126:	e7f5      	b.n	2114 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2128:	4663      	mov	r3, ip
    212a:	2b00      	cmp	r3, #0
    212c:	db21      	blt.n	2172 <_usb_d_dev_ep_init+0x72>
    212e:	007b      	lsls	r3, r7, #1
    2130:	19db      	adds	r3, r3, r7
    2132:	009b      	lsls	r3, r3, #2
    2134:	4c3b      	ldr	r4, [pc, #236]	; (2224 <_usb_d_dev_ep_init+0x124>)
    2136:	591b      	ldr	r3, [r3, r4]
    2138:	2b00      	cmp	r3, #0
    213a:	d166      	bne.n	220a <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    213c:	007b      	lsls	r3, r7, #1
    213e:	19df      	adds	r7, r3, r7
    2140:	00bf      	lsls	r7, r7, #2
    2142:	4b38      	ldr	r3, [pc, #224]	; (2224 <_usb_d_dev_ep_init+0x124>)
    2144:	58ff      	ldr	r7, [r7, r3]
    2146:	4b38      	ldr	r3, [pc, #224]	; (2228 <_usb_d_dev_ep_init+0x128>)
    2148:	00ae      	lsls	r6, r5, #2
    214a:	1974      	adds	r4, r6, r5
    214c:	00a4      	lsls	r4, r4, #2
    214e:	191c      	adds	r4, r3, r4
    2150:	3480      	adds	r4, #128	; 0x80
    2152:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    2154:	3360      	adds	r3, #96	; 0x60
    2156:	1974      	adds	r4, r6, r5
    2158:	00a4      	lsls	r4, r4, #2
    215a:	191c      	adds	r4, r3, r4
    215c:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    215e:	3427      	adds	r4, #39	; 0x27
    2160:	3101      	adds	r1, #1
    2162:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    2164:	1975      	adds	r5, r6, r5
    2166:	00ad      	lsls	r5, r5, #2
    2168:	195b      	adds	r3, r3, r5
    216a:	3326      	adds	r3, #38	; 0x26
    216c:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    216e:	2000      	movs	r0, #0
}
    2170:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2172:	007b      	lsls	r3, r7, #1
    2174:	19db      	adds	r3, r3, r7
    2176:	009b      	lsls	r3, r3, #2
    2178:	4c2a      	ldr	r4, [pc, #168]	; (2224 <_usb_d_dev_ep_init+0x124>)
    217a:	18e3      	adds	r3, r4, r3
    217c:	685b      	ldr	r3, [r3, #4]
    217e:	2b00      	cmp	r3, #0
    2180:	d106      	bne.n	2190 <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2182:	007b      	lsls	r3, r7, #1
    2184:	19df      	adds	r7, r3, r7
    2186:	00bf      	lsls	r7, r7, #2
    2188:	4b26      	ldr	r3, [pc, #152]	; (2224 <_usb_d_dev_ep_init+0x124>)
    218a:	19df      	adds	r7, r3, r7
    218c:	687f      	ldr	r7, [r7, #4]
    218e:	e7da      	b.n	2146 <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2190:	007b      	lsls	r3, r7, #1
    2192:	19db      	adds	r3, r3, r7
    2194:	009b      	lsls	r3, r3, #2
    2196:	4c23      	ldr	r4, [pc, #140]	; (2224 <_usb_d_dev_ep_init+0x124>)
    2198:	18e3      	adds	r3, r4, r3
    219a:	895b      	ldrh	r3, [r3, #10]
    219c:	4293      	cmp	r3, r2
    219e:	daf0      	bge.n	2182 <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    21a0:	2013      	movs	r0, #19
    21a2:	4240      	negs	r0, r0
    21a4:	e7e4      	b.n	2170 <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    21a6:	2014      	movs	r0, #20
    21a8:	4240      	negs	r0, r0
    21aa:	e7e1      	b.n	2170 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    21ac:	2014      	movs	r0, #20
    21ae:	4240      	negs	r0, r0
    21b0:	e7de      	b.n	2170 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    21b2:	2013      	movs	r0, #19
    21b4:	4240      	negs	r0, r0
    21b6:	e7db      	b.n	2170 <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    21b8:	2303      	movs	r3, #3
    21ba:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    21bc:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    21be:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    21c0:	00ab      	lsls	r3, r5, #2
    21c2:	195b      	adds	r3, r3, r5
    21c4:	009e      	lsls	r6, r3, #2
    21c6:	4b18      	ldr	r3, [pc, #96]	; (2228 <_usb_d_dev_ep_init+0x128>)
    21c8:	199b      	adds	r3, r3, r6
    21ca:	3386      	adds	r3, #134	; 0x86
    21cc:	781b      	ldrb	r3, [r3, #0]
    21ce:	2bff      	cmp	r3, #255	; 0xff
    21d0:	d1e9      	bne.n	21a6 <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    21d2:	2900      	cmp	r1, #0
    21d4:	d1a8      	bne.n	2128 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    21d6:	2c00      	cmp	r4, #0
    21d8:	d004      	beq.n	21e4 <_usb_d_dev_ep_init+0xe4>
    21da:	4663      	mov	r3, ip
    21dc:	2b00      	cmp	r3, #0
    21de:	db01      	blt.n	21e4 <_usb_d_dev_ep_init+0xe4>
    21e0:	3402      	adds	r4, #2
    21e2:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    21e4:	00a3      	lsls	r3, r4, #2
    21e6:	191b      	adds	r3, r3, r4
    21e8:	009b      	lsls	r3, r3, #2
    21ea:	4c0f      	ldr	r4, [pc, #60]	; (2228 <_usb_d_dev_ep_init+0x128>)
    21ec:	18e4      	adds	r4, r4, r3
    21ee:	3486      	adds	r4, #134	; 0x86
    21f0:	7823      	ldrb	r3, [r4, #0]
    21f2:	2bff      	cmp	r3, #255	; 0xff
    21f4:	d1da      	bne.n	21ac <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    21f6:	007b      	lsls	r3, r7, #1
    21f8:	19db      	adds	r3, r3, r7
    21fa:	009b      	lsls	r3, r3, #2
    21fc:	4c09      	ldr	r4, [pc, #36]	; (2224 <_usb_d_dev_ep_init+0x124>)
    21fe:	591b      	ldr	r3, [r3, r4]
    2200:	2b00      	cmp	r3, #0
    2202:	d0d6      	beq.n	21b2 <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2204:	4663      	mov	r3, ip
    2206:	2b00      	cmp	r3, #0
    2208:	dbb3      	blt.n	2172 <_usb_d_dev_ep_init+0x72>
    220a:	007b      	lsls	r3, r7, #1
    220c:	19db      	adds	r3, r3, r7
    220e:	009b      	lsls	r3, r3, #2
    2210:	4c04      	ldr	r4, [pc, #16]	; (2224 <_usb_d_dev_ep_init+0x124>)
    2212:	18e3      	adds	r3, r4, r3
    2214:	891b      	ldrh	r3, [r3, #8]
    2216:	4293      	cmp	r3, r2
    2218:	db00      	blt.n	221c <_usb_d_dev_ep_init+0x11c>
    221a:	e78f      	b.n	213c <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    221c:	2013      	movs	r0, #19
    221e:	4240      	negs	r0, r0
    2220:	e7a6      	b.n	2170 <_usb_d_dev_ep_init+0x70>
    2222:	46c0      	nop			; (mov r8, r8)
    2224:	00004258 	.word	0x00004258
    2228:	200001ec 	.word	0x200001ec

0000222c <_usb_d_dev_ep_deinit>:
{
    222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    222e:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    2230:	240f      	movs	r4, #15
    2232:	4004      	ands	r4, r0
    2234:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2236:	2c00      	cmp	r4, #0
    2238:	d010      	beq.n	225c <_usb_d_dev_ep_deinit+0x30>
    223a:	0020      	movs	r0, r4
    223c:	2f00      	cmp	r7, #0
    223e:	db02      	blt.n	2246 <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2240:	2c02      	cmp	r4, #2
    2242:	d902      	bls.n	224a <_usb_d_dev_ep_deinit+0x1e>
}
    2244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2246:	1ca0      	adds	r0, r4, #2
    2248:	e7fa      	b.n	2240 <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    224a:	0006      	movs	r6, r0
    224c:	3001      	adds	r0, #1
    224e:	0083      	lsls	r3, r0, #2
    2250:	1818      	adds	r0, r3, r0
    2252:	0080      	lsls	r0, r0, #2
    2254:	4b25      	ldr	r3, [pc, #148]	; (22ec <_usb_d_dev_ep_deinit+0xc0>)
    2256:	3360      	adds	r3, #96	; 0x60
    2258:	1818      	adds	r0, r3, r0
    225a:	e002      	b.n	2262 <_usb_d_dev_ep_deinit+0x36>
    225c:	4823      	ldr	r0, [pc, #140]	; (22ec <_usb_d_dev_ep_deinit+0xc0>)
    225e:	3074      	adds	r0, #116	; 0x74
    2260:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2262:	00b3      	lsls	r3, r6, #2
    2264:	199b      	adds	r3, r3, r6
    2266:	009a      	lsls	r2, r3, #2
    2268:	4b20      	ldr	r3, [pc, #128]	; (22ec <_usb_d_dev_ep_deinit+0xc0>)
    226a:	189b      	adds	r3, r3, r2
    226c:	3386      	adds	r3, #134	; 0x86
    226e:	781b      	ldrb	r3, [r3, #0]
    2270:	2bff      	cmp	r3, #255	; 0xff
    2272:	d0e7      	beq.n	2244 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    2274:	0ff9      	lsrs	r1, r7, #31
    2276:	2203      	movs	r2, #3
    2278:	4b1d      	ldr	r3, [pc, #116]	; (22f0 <_usb_d_dev_ep_deinit+0xc4>)
    227a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    227c:	00b3      	lsls	r3, r6, #2
    227e:	199b      	adds	r3, r3, r6
    2280:	009a      	lsls	r2, r3, #2
    2282:	4b1a      	ldr	r3, [pc, #104]	; (22ec <_usb_d_dev_ep_deinit+0xc0>)
    2284:	189b      	adds	r3, r3, r2
    2286:	3380      	adds	r3, #128	; 0x80
    2288:	79da      	ldrb	r2, [r3, #7]
    228a:	2307      	movs	r3, #7
    228c:	4013      	ands	r3, r2
    228e:	2b01      	cmp	r3, #1
    2290:	d01b      	beq.n	22ca <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    2292:	2f00      	cmp	r7, #0
    2294:	db1f      	blt.n	22d6 <_usb_d_dev_ep_deinit+0xaa>
    2296:	016d      	lsls	r5, r5, #5
    2298:	4b16      	ldr	r3, [pc, #88]	; (22f4 <_usb_d_dev_ep_deinit+0xc8>)
    229a:	469c      	mov	ip, r3
    229c:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    229e:	2280      	movs	r2, #128	; 0x80
    22a0:	0052      	lsls	r2, r2, #1
    22a2:	5cab      	ldrb	r3, [r5, r2]
    22a4:	2107      	movs	r1, #7
    22a6:	438b      	bics	r3, r1
    22a8:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    22aa:	4b10      	ldr	r3, [pc, #64]	; (22ec <_usb_d_dev_ep_deinit+0xc0>)
    22ac:	3360      	adds	r3, #96	; 0x60
    22ae:	00b1      	lsls	r1, r6, #2
    22b0:	198a      	adds	r2, r1, r6
    22b2:	0092      	lsls	r2, r2, #2
    22b4:	189a      	adds	r2, r3, r2
    22b6:	3227      	adds	r2, #39	; 0x27
    22b8:	2000      	movs	r0, #0
    22ba:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    22bc:	198e      	adds	r6, r1, r6
    22be:	00b6      	lsls	r6, r6, #2
    22c0:	199b      	adds	r3, r3, r6
    22c2:	3326      	adds	r3, #38	; 0x26
    22c4:	22ff      	movs	r2, #255	; 0xff
    22c6:	701a      	strb	r2, [r3, #0]
    22c8:	e7bc      	b.n	2244 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    22ca:	3508      	adds	r5, #8
    22cc:	016d      	lsls	r5, r5, #5
    22ce:	2200      	movs	r2, #0
    22d0:	4b08      	ldr	r3, [pc, #32]	; (22f4 <_usb_d_dev_ep_deinit+0xc8>)
    22d2:	54ea      	strb	r2, [r5, r3]
    22d4:	e7e9      	b.n	22aa <_usb_d_dev_ep_deinit+0x7e>
    22d6:	0164      	lsls	r4, r4, #5
    22d8:	4b06      	ldr	r3, [pc, #24]	; (22f4 <_usb_d_dev_ep_deinit+0xc8>)
    22da:	469c      	mov	ip, r3
    22dc:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    22de:	2280      	movs	r2, #128	; 0x80
    22e0:	0052      	lsls	r2, r2, #1
    22e2:	5ca3      	ldrb	r3, [r4, r2]
    22e4:	2170      	movs	r1, #112	; 0x70
    22e6:	438b      	bics	r3, r1
    22e8:	54a3      	strb	r3, [r4, r2]
    22ea:	e7de      	b.n	22aa <_usb_d_dev_ep_deinit+0x7e>
    22ec:	200001ec 	.word	0x200001ec
    22f0:	00001a29 	.word	0x00001a29
    22f4:	41005000 	.word	0x41005000

000022f8 <_usb_d_dev_ep_enable>:
{
    22f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    22fa:	46c6      	mov	lr, r8
    22fc:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    22fe:	220f      	movs	r2, #15
    2300:	4002      	ands	r2, r0
    2302:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2304:	2a00      	cmp	r2, #0
    2306:	d100      	bne.n	230a <_usb_d_dev_ep_enable+0x12>
    2308:	e092      	b.n	2430 <_usb_d_dev_ep_enable+0x138>
    230a:	0013      	movs	r3, r2
    230c:	2800      	cmp	r0, #0
    230e:	db0b      	blt.n	2328 <_usb_d_dev_ep_enable+0x30>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2310:	0011      	movs	r1, r2
    2312:	3208      	adds	r2, #8
    2314:	0152      	lsls	r2, r2, #5
    2316:	4caa      	ldr	r4, [pc, #680]	; (25c0 <_usb_d_dev_ep_enable+0x2c8>)
    2318:	5d15      	ldrb	r5, [r2, r4]
    231a:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    231c:	2902      	cmp	r1, #2
    231e:	d800      	bhi.n	2322 <_usb_d_dev_ep_enable+0x2a>
    2320:	e08d      	b.n	243e <_usb_d_dev_ep_enable+0x146>
		return -USB_ERR_PARAM;
    2322:	2012      	movs	r0, #18
    2324:	4240      	negs	r0, r0
    2326:	e0e5      	b.n	24f4 <_usb_d_dev_ep_enable+0x1fc>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2328:	1c93      	adds	r3, r2, #2
    232a:	e7f1      	b.n	2310 <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    232c:	3276      	adds	r2, #118	; 0x76
    232e:	422a      	tst	r2, r5
    2330:	d175      	bne.n	241e <_usb_d_dev_ep_enable+0x126>
    2332:	4aa3      	ldr	r2, [pc, #652]	; (25c0 <_usb_d_dev_ep_enable+0x2c8>)
    2334:	4690      	mov	r8, r2
    2336:	4444      	add	r4, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2338:	2011      	movs	r0, #17
    233a:	2280      	movs	r2, #128	; 0x80
    233c:	0052      	lsls	r2, r2, #1
    233e:	54a0      	strb	r0, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2340:	009a      	lsls	r2, r3, #2
    2342:	18d2      	adds	r2, r2, r3
    2344:	0095      	lsls	r5, r2, #2
    2346:	4a9f      	ldr	r2, [pc, #636]	; (25c4 <_usb_d_dev_ep_enable+0x2cc>)
    2348:	3260      	adds	r2, #96	; 0x60
    234a:	1952      	adds	r2, r2, r5
    234c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    234e:	0395      	lsls	r5, r2, #14
    2350:	489d      	ldr	r0, [pc, #628]	; (25c8 <_usb_d_dev_ep_enable+0x2d0>)
    2352:	4005      	ands	r5, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2354:	2080      	movs	r0, #128	; 0x80
    2356:	0080      	lsls	r0, r0, #2
    2358:	4282      	cmp	r2, r0
    235a:	d900      	bls.n	235e <_usb_d_dev_ep_enable+0x66>
    235c:	e0cd      	b.n	24fa <_usb_d_dev_ep_enable+0x202>
    235e:	3801      	subs	r0, #1
    2360:	38ff      	subs	r0, #255	; 0xff
    2362:	4282      	cmp	r2, r0
    2364:	d900      	bls.n	2368 <_usb_d_dev_ep_enable+0x70>
    2366:	e113      	b.n	2590 <_usb_d_dev_ep_enable+0x298>
    2368:	2a80      	cmp	r2, #128	; 0x80
    236a:	d900      	bls.n	236e <_usb_d_dev_ep_enable+0x76>
    236c:	e100      	b.n	2570 <_usb_d_dev_ep_enable+0x278>
    236e:	2a40      	cmp	r2, #64	; 0x40
    2370:	d900      	bls.n	2374 <_usb_d_dev_ep_enable+0x7c>
    2372:	e115      	b.n	25a0 <_usb_d_dev_ep_enable+0x2a8>
    2374:	2a20      	cmp	r2, #32
    2376:	d900      	bls.n	237a <_usb_d_dev_ep_enable+0x82>
    2378:	e102      	b.n	2580 <_usb_d_dev_ep_enable+0x288>
    237a:	2a10      	cmp	r2, #16
    237c:	d900      	bls.n	2380 <_usb_d_dev_ep_enable+0x88>
    237e:	e117      	b.n	25b0 <_usb_d_dev_ep_enable+0x2b8>
    2380:	38f8      	subs	r0, #248	; 0xf8
    2382:	4290      	cmp	r0, r2
    2384:	4180      	sbcs	r0, r0
    2386:	4240      	negs	r0, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2388:	0706      	lsls	r6, r0, #28
    238a:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    238c:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    238e:	0495      	lsls	r5, r2, #18
    2390:	0cad      	lsrs	r5, r5, #18
    2392:	e0b9      	b.n	2508 <_usb_d_dev_ep_enable+0x210>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2394:	2270      	movs	r2, #112	; 0x70
    2396:	422a      	tst	r2, r5
    2398:	d144      	bne.n	2424 <_usb_d_dev_ep_enable+0x12c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    239a:	488a      	ldr	r0, [pc, #552]	; (25c4 <_usb_d_dev_ep_enable+0x2cc>)
    239c:	009e      	lsls	r6, r3, #2
    239e:	18f2      	adds	r2, r6, r3
    23a0:	0092      	lsls	r2, r2, #2
    23a2:	1882      	adds	r2, r0, r2
    23a4:	3280      	adds	r2, #128	; 0x80
    23a6:	79d2      	ldrb	r2, [r2, #7]
    23a8:	0752      	lsls	r2, r2, #29
    23aa:	0e52      	lsrs	r2, r2, #25
    23ac:	4315      	orrs	r5, r2
    23ae:	4a84      	ldr	r2, [pc, #528]	; (25c0 <_usb_d_dev_ep_enable+0x2c8>)
    23b0:	4694      	mov	ip, r2
    23b2:	4464      	add	r4, ip
    23b4:	2280      	movs	r2, #128	; 0x80
    23b6:	0052      	lsls	r2, r2, #1
    23b8:	54a5      	strb	r5, [r4, r2]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    23ba:	3060      	adds	r0, #96	; 0x60
    23bc:	18f6      	adds	r6, r6, r3
    23be:	00b6      	lsls	r6, r6, #2
    23c0:	1980      	adds	r0, r0, r6
    23c2:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    23c4:	0485      	lsls	r5, r0, #18
    23c6:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    23c8:	3201      	adds	r2, #1
    23ca:	32ff      	adds	r2, #255	; 0xff
    23cc:	2307      	movs	r3, #7
    23ce:	4290      	cmp	r0, r2
    23d0:	d814      	bhi.n	23fc <_usb_d_dev_ep_enable+0x104>
    23d2:	3a01      	subs	r2, #1
    23d4:	3aff      	subs	r2, #255	; 0xff
    23d6:	3b01      	subs	r3, #1
    23d8:	4290      	cmp	r0, r2
    23da:	d80f      	bhi.n	23fc <_usb_d_dev_ep_enable+0x104>
    23dc:	3b01      	subs	r3, #1
    23de:	2880      	cmp	r0, #128	; 0x80
    23e0:	d80c      	bhi.n	23fc <_usb_d_dev_ep_enable+0x104>
    23e2:	3b01      	subs	r3, #1
    23e4:	2840      	cmp	r0, #64	; 0x40
    23e6:	d809      	bhi.n	23fc <_usb_d_dev_ep_enable+0x104>
    23e8:	3b01      	subs	r3, #1
    23ea:	2820      	cmp	r0, #32
    23ec:	d806      	bhi.n	23fc <_usb_d_dev_ep_enable+0x104>
    23ee:	3b01      	subs	r3, #1
    23f0:	2810      	cmp	r0, #16
    23f2:	d803      	bhi.n	23fc <_usb_d_dev_ep_enable+0x104>
    23f4:	3af8      	subs	r2, #248	; 0xf8
    23f6:	4282      	cmp	r2, r0
    23f8:	4192      	sbcs	r2, r2
    23fa:	4253      	negs	r3, r2
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    23fc:	071b      	lsls	r3, r3, #28
    23fe:	432b      	orrs	r3, r5
    2400:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2402:	2280      	movs	r2, #128	; 0x80
    2404:	2382      	movs	r3, #130	; 0x82
    2406:	005b      	lsls	r3, r3, #1
    2408:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    240a:	0149      	lsls	r1, r1, #5
    240c:	4b6d      	ldr	r3, [pc, #436]	; (25c4 <_usb_d_dev_ep_enable+0x2cc>)
    240e:	1859      	adds	r1, r3, r1
    2410:	2300      	movs	r3, #0
    2412:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    2414:	2000      	movs	r0, #0
    2416:	e06d      	b.n	24f4 <_usb_d_dev_ep_enable+0x1fc>
		return -USB_ERR_PARAM;
    2418:	2012      	movs	r0, #18
    241a:	4240      	negs	r0, r0
    241c:	e06a      	b.n	24f4 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    241e:	2014      	movs	r0, #20
    2420:	4240      	negs	r0, r0
    2422:	e067      	b.n	24f4 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    2424:	2014      	movs	r0, #20
    2426:	4240      	negs	r0, r0
    2428:	e064      	b.n	24f4 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    242a:	2014      	movs	r0, #20
    242c:	4240      	negs	r0, r0
    242e:	e061      	b.n	24f4 <_usb_d_dev_ep_enable+0x1fc>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2430:	2380      	movs	r3, #128	; 0x80
    2432:	005b      	lsls	r3, r3, #1
    2434:	4a62      	ldr	r2, [pc, #392]	; (25c0 <_usb_d_dev_ep_enable+0x2c8>)
    2436:	5cd5      	ldrb	r5, [r2, r3]
    2438:	b2ed      	uxtb	r5, r5
    243a:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    243c:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    243e:	009a      	lsls	r2, r3, #2
    2440:	18d2      	adds	r2, r2, r3
    2442:	0094      	lsls	r4, r2, #2
    2444:	4a5f      	ldr	r2, [pc, #380]	; (25c4 <_usb_d_dev_ep_enable+0x2cc>)
    2446:	1912      	adds	r2, r2, r4
    2448:	3286      	adds	r2, #134	; 0x86
    244a:	7812      	ldrb	r2, [r2, #0]
    244c:	4694      	mov	ip, r2
    244e:	2aff      	cmp	r2, #255	; 0xff
    2450:	d0e2      	beq.n	2418 <_usb_d_dev_ep_enable+0x120>
    2452:	014c      	lsls	r4, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    2454:	4a5b      	ldr	r2, [pc, #364]	; (25c4 <_usb_d_dev_ep_enable+0x2cc>)
    2456:	1917      	adds	r7, r2, r4
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2458:	009e      	lsls	r6, r3, #2
    245a:	18f6      	adds	r6, r6, r3
    245c:	00b6      	lsls	r6, r6, #2
    245e:	1992      	adds	r2, r2, r6
    2460:	3280      	adds	r2, #128	; 0x80
    2462:	79d6      	ldrb	r6, [r2, #7]
    2464:	2207      	movs	r2, #7
    2466:	4032      	ands	r2, r6
    2468:	2a01      	cmp	r2, #1
    246a:	d100      	bne.n	246e <_usb_d_dev_ep_enable+0x176>
    246c:	e75e      	b.n	232c <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    246e:	2800      	cmp	r0, #0
    2470:	db90      	blt.n	2394 <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    2472:	076a      	lsls	r2, r5, #29
    2474:	d1d9      	bne.n	242a <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    2476:	4853      	ldr	r0, [pc, #332]	; (25c4 <_usb_d_dev_ep_enable+0x2cc>)
    2478:	009e      	lsls	r6, r3, #2
    247a:	18f2      	adds	r2, r6, r3
    247c:	0092      	lsls	r2, r2, #2
    247e:	1882      	adds	r2, r0, r2
    2480:	3280      	adds	r2, #128	; 0x80
    2482:	79d2      	ldrb	r2, [r2, #7]
    2484:	0752      	lsls	r2, r2, #29
    2486:	0f52      	lsrs	r2, r2, #29
    2488:	4315      	orrs	r5, r2
    248a:	4a4d      	ldr	r2, [pc, #308]	; (25c0 <_usb_d_dev_ep_enable+0x2c8>)
    248c:	4694      	mov	ip, r2
    248e:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2490:	2280      	movs	r2, #128	; 0x80
    2492:	0052      	lsls	r2, r2, #1
    2494:	54a5      	strb	r5, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2496:	3060      	adds	r0, #96	; 0x60
    2498:	18f6      	adds	r6, r6, r3
    249a:	00b6      	lsls	r6, r6, #2
    249c:	1980      	adds	r0, r0, r6
    249e:	8c85      	ldrh	r5, [r0, #36]	; 0x24
    24a0:	03ab      	lsls	r3, r5, #14
    24a2:	4849      	ldr	r0, [pc, #292]	; (25c8 <_usb_d_dev_ep_enable+0x2d0>)
    24a4:	4018      	ands	r0, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    24a6:	3201      	adds	r2, #1
    24a8:	32ff      	adds	r2, #255	; 0xff
    24aa:	2307      	movs	r3, #7
    24ac:	4295      	cmp	r5, r2
    24ae:	d814      	bhi.n	24da <_usb_d_dev_ep_enable+0x1e2>
    24b0:	3a01      	subs	r2, #1
    24b2:	3aff      	subs	r2, #255	; 0xff
    24b4:	3b01      	subs	r3, #1
    24b6:	4295      	cmp	r5, r2
    24b8:	d80f      	bhi.n	24da <_usb_d_dev_ep_enable+0x1e2>
    24ba:	3b01      	subs	r3, #1
    24bc:	2d80      	cmp	r5, #128	; 0x80
    24be:	d80c      	bhi.n	24da <_usb_d_dev_ep_enable+0x1e2>
    24c0:	3b01      	subs	r3, #1
    24c2:	2d40      	cmp	r5, #64	; 0x40
    24c4:	d809      	bhi.n	24da <_usb_d_dev_ep_enable+0x1e2>
    24c6:	3b01      	subs	r3, #1
    24c8:	2d20      	cmp	r5, #32
    24ca:	d806      	bhi.n	24da <_usb_d_dev_ep_enable+0x1e2>
    24cc:	3b01      	subs	r3, #1
    24ce:	2d10      	cmp	r5, #16
    24d0:	d803      	bhi.n	24da <_usb_d_dev_ep_enable+0x1e2>
    24d2:	3af8      	subs	r2, #248	; 0xf8
    24d4:	42aa      	cmp	r2, r5
    24d6:	4192      	sbcs	r2, r2
    24d8:	4253      	negs	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    24da:	071b      	lsls	r3, r3, #28
    24dc:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    24de:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    24e0:	2240      	movs	r2, #64	; 0x40
    24e2:	2306      	movs	r3, #6
    24e4:	33ff      	adds	r3, #255	; 0xff
    24e6:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    24e8:	0149      	lsls	r1, r1, #5
    24ea:	4b36      	ldr	r3, [pc, #216]	; (25c4 <_usb_d_dev_ep_enable+0x2cc>)
    24ec:	1859      	adds	r1, r3, r1
    24ee:	2300      	movs	r3, #0
    24f0:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    24f2:	2000      	movs	r0, #0
}
    24f4:	bc04      	pop	{r2}
    24f6:	4690      	mov	r8, r2
    24f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    24fa:	20e0      	movs	r0, #224	; 0xe0
    24fc:	05c0      	lsls	r0, r0, #23
    24fe:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2500:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2502:	0495      	lsls	r5, r2, #18
    2504:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2506:	2007      	movs	r0, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2508:	0700      	lsls	r0, r0, #28
    250a:	4328      	orrs	r0, r5
    250c:	6178      	str	r0, [r7, #20]
    250e:	2506      	movs	r5, #6
    2510:	35ff      	adds	r5, #255	; 0xff
    2512:	2640      	movs	r6, #64	; 0x40
    2514:	5566      	strb	r6, [r4, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2516:	2782      	movs	r7, #130	; 0x82
    2518:	007f      	lsls	r7, r7, #1
    251a:	2080      	movs	r0, #128	; 0x80
    251c:	55e0      	strb	r0, [r4, r7]
	bank->STATUS_BK.reg     = 0;
    251e:	4829      	ldr	r0, [pc, #164]	; (25c4 <_usb_d_dev_ep_enable+0x2cc>)
    2520:	0149      	lsls	r1, r1, #5
    2522:	1841      	adds	r1, r0, r1
    2524:	2400      	movs	r4, #0
    2526:	728c      	strb	r4, [r1, #10]
    2528:	768c      	strb	r4, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    252a:	340f      	adds	r4, #15
    252c:	4661      	mov	r1, ip
    252e:	400c      	ands	r4, r1
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2530:	0099      	lsls	r1, r3, #2
    2532:	18c9      	adds	r1, r1, r3
    2534:	0089      	lsls	r1, r1, #2
    2536:	1841      	adds	r1, r0, r1
    2538:	3180      	adds	r1, #128	; 0x80
    253a:	6809      	ldr	r1, [r1, #0]
	bank->ADDR.reg          = addr;
    253c:	0163      	lsls	r3, r4, #5
    253e:	5019      	str	r1, [r3, r0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2540:	18c0      	adds	r0, r0, r3
    2542:	6841      	ldr	r1, [r0, #4]
    2544:	0492      	lsls	r2, r2, #18
    2546:	0914      	lsrs	r4, r2, #4
    2548:	4a20      	ldr	r2, [pc, #128]	; (25cc <_usb_d_dev_ep_enable+0x2d4>)
    254a:	400a      	ands	r2, r1
    254c:	4322      	orrs	r2, r4
    254e:	6042      	str	r2, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2550:	6842      	ldr	r2, [r0, #4]
    2552:	0b92      	lsrs	r2, r2, #14
    2554:	0392      	lsls	r2, r2, #14
    2556:	6042      	str	r2, [r0, #4]
    2558:	4a19      	ldr	r2, [pc, #100]	; (25c0 <_usb_d_dev_ep_enable+0x2c8>)
    255a:	189a      	adds	r2, r3, r2
    255c:	21b0      	movs	r1, #176	; 0xb0
    255e:	55d1      	strb	r1, [r2, r7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2560:	5556      	strb	r6, [r2, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2562:	4a1b      	ldr	r2, [pc, #108]	; (25d0 <_usb_d_dev_ep_enable+0x2d8>)
    2564:	4694      	mov	ip, r2
    2566:	4463      	add	r3, ip
    2568:	2210      	movs	r2, #16
    256a:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    256c:	2000      	movs	r0, #0
    256e:	e7c1      	b.n	24f4 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2570:	20a0      	movs	r0, #160	; 0xa0
    2572:	05c0      	lsls	r0, r0, #23
    2574:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2576:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2578:	0495      	lsls	r5, r2, #18
    257a:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    257c:	2005      	movs	r0, #5
    257e:	e7c3      	b.n	2508 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2580:	20c0      	movs	r0, #192	; 0xc0
    2582:	0580      	lsls	r0, r0, #22
    2584:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2586:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2588:	0495      	lsls	r5, r2, #18
    258a:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    258c:	2003      	movs	r0, #3
    258e:	e7bb      	b.n	2508 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2590:	20c0      	movs	r0, #192	; 0xc0
    2592:	05c0      	lsls	r0, r0, #23
    2594:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2596:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2598:	0495      	lsls	r5, r2, #18
    259a:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    259c:	2006      	movs	r0, #6
    259e:	e7b3      	b.n	2508 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    25a0:	2080      	movs	r0, #128	; 0x80
    25a2:	05c0      	lsls	r0, r0, #23
    25a4:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    25a6:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    25a8:	0495      	lsls	r5, r2, #18
    25aa:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    25ac:	2004      	movs	r0, #4
    25ae:	e7ab      	b.n	2508 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    25b0:	2080      	movs	r0, #128	; 0x80
    25b2:	0580      	lsls	r0, r0, #22
    25b4:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    25b6:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    25b8:	0495      	lsls	r5, r2, #18
    25ba:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    25bc:	2002      	movs	r0, #2
    25be:	e7a3      	b.n	2508 <_usb_d_dev_ep_enable+0x210>
    25c0:	41005000 	.word	0x41005000
    25c4:	200001ec 	.word	0x200001ec
    25c8:	0fffc000 	.word	0x0fffc000
    25cc:	f0003fff 	.word	0xf0003fff
    25d0:	41005109 	.word	0x41005109

000025d4 <_usb_d_dev_ep_stall>:
{
    25d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    25d6:	230f      	movs	r3, #15
    25d8:	4003      	ands	r3, r0
    25da:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    25dc:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    25de:	2b00      	cmp	r3, #0
    25e0:	d009      	beq.n	25f6 <_usb_d_dev_ep_stall+0x22>
    25e2:	001a      	movs	r2, r3
    25e4:	2800      	cmp	r0, #0
    25e6:	db04      	blt.n	25f2 <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    25e8:	2b02      	cmp	r3, #2
    25ea:	d905      	bls.n	25f8 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    25ec:	2012      	movs	r0, #18
    25ee:	4240      	negs	r0, r0
    25f0:	e019      	b.n	2626 <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    25f2:	1c9a      	adds	r2, r3, #2
    25f4:	e7f8      	b.n	25e8 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    25f6:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    25f8:	2901      	cmp	r1, #1
    25fa:	d015      	beq.n	2628 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    25fc:	2900      	cmp	r1, #0
    25fe:	d036      	beq.n	266e <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2600:	0093      	lsls	r3, r2, #2
    2602:	189b      	adds	r3, r3, r2
    2604:	009b      	lsls	r3, r3, #2
    2606:	4a47      	ldr	r2, [pc, #284]	; (2724 <_usb_d_dev_ep_stall+0x150>)
    2608:	18d2      	adds	r2, r2, r3
    260a:	3286      	adds	r2, #134	; 0x86
    260c:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    260e:	230f      	movs	r3, #15
    2610:	4013      	ands	r3, r2
    2612:	015b      	lsls	r3, r3, #5
    2614:	4a44      	ldr	r2, [pc, #272]	; (2728 <_usb_d_dev_ep_stall+0x154>)
    2616:	4694      	mov	ip, r2
    2618:	4463      	add	r3, ip
    261a:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    261c:	2310      	movs	r3, #16
    261e:	40a3      	lsls	r3, r4
    2620:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    2622:	1e43      	subs	r3, r0, #1
    2624:	4198      	sbcs	r0, r3
}
    2626:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2628:	2510      	movs	r5, #16
    262a:	40a5      	lsls	r5, r4
    262c:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    262e:	493d      	ldr	r1, [pc, #244]	; (2724 <_usb_d_dev_ep_stall+0x150>)
    2630:	0090      	lsls	r0, r2, #2
    2632:	1883      	adds	r3, r0, r2
    2634:	009b      	lsls	r3, r3, #2
    2636:	18cb      	adds	r3, r1, r3
    2638:	3386      	adds	r3, #134	; 0x86
    263a:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    263c:	230f      	movs	r3, #15
    263e:	4033      	ands	r3, r6
    2640:	015e      	lsls	r6, r3, #5
    2642:	4f39      	ldr	r7, [pc, #228]	; (2728 <_usb_d_dev_ep_stall+0x154>)
    2644:	46bc      	mov	ip, r7
    2646:	4466      	add	r6, ip
    2648:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    264a:	2520      	movs	r5, #32
    264c:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    264e:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2650:	015b      	lsls	r3, r3, #5
    2652:	4d36      	ldr	r5, [pc, #216]	; (272c <_usb_d_dev_ep_stall+0x158>)
    2654:	46ac      	mov	ip, r5
    2656:	4463      	add	r3, ip
    2658:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    265a:	1882      	adds	r2, r0, r2
    265c:	0092      	lsls	r2, r2, #2
    265e:	188a      	adds	r2, r1, r2
    2660:	3280      	adds	r2, #128	; 0x80
    2662:	79d3      	ldrb	r3, [r2, #7]
    2664:	2108      	movs	r1, #8
    2666:	430b      	orrs	r3, r1
    2668:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    266a:	2000      	movs	r0, #0
    266c:	e7db      	b.n	2626 <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    266e:	0093      	lsls	r3, r2, #2
    2670:	189b      	adds	r3, r3, r2
    2672:	0099      	lsls	r1, r3, #2
    2674:	4b2b      	ldr	r3, [pc, #172]	; (2724 <_usb_d_dev_ep_stall+0x150>)
    2676:	185b      	adds	r3, r3, r1
    2678:	3386      	adds	r3, #134	; 0x86
    267a:	781b      	ldrb	r3, [r3, #0]
    267c:	210f      	movs	r1, #15
    267e:	400b      	ands	r3, r1
    2680:	015d      	lsls	r5, r3, #5
    2682:	492b      	ldr	r1, [pc, #172]	; (2730 <_usb_d_dev_ep_stall+0x15c>)
    2684:	468c      	mov	ip, r1
    2686:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2688:	2183      	movs	r1, #131	; 0x83
    268a:	0049      	lsls	r1, r1, #1
    268c:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    268e:	39f6      	subs	r1, #246	; 0xf6
    2690:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2692:	2000      	movs	r0, #0
	if (!is_stalled) {
    2694:	420e      	tst	r6, r1
    2696:	d0c6      	beq.n	2626 <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2698:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    269a:	3005      	adds	r0, #5
    269c:	30ff      	adds	r0, #255	; 0xff
    269e:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    26a0:	2120      	movs	r1, #32
    26a2:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    26a4:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    26a6:	015b      	lsls	r3, r3, #5
    26a8:	4e22      	ldr	r6, [pc, #136]	; (2734 <_usb_d_dev_ep_stall+0x160>)
    26aa:	46b4      	mov	ip, r6
    26ac:	4463      	add	r3, ip
    26ae:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    26b0:	2308      	movs	r3, #8
    26b2:	33ff      	adds	r3, #255	; 0xff
    26b4:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    26b6:	420b      	tst	r3, r1
    26b8:	d009      	beq.n	26ce <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    26ba:	2308      	movs	r3, #8
    26bc:	33ff      	adds	r3, #255	; 0xff
    26be:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    26c0:	3b07      	subs	r3, #7
    26c2:	3bff      	subs	r3, #255	; 0xff
    26c4:	40a3      	lsls	r3, r4
    26c6:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    26c8:	2182      	movs	r1, #130	; 0x82
    26ca:	0049      	lsls	r1, r1, #1
    26cc:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    26ce:	0093      	lsls	r3, r2, #2
    26d0:	189b      	adds	r3, r3, r2
    26d2:	0099      	lsls	r1, r3, #2
    26d4:	4b13      	ldr	r3, [pc, #76]	; (2724 <_usb_d_dev_ep_stall+0x150>)
    26d6:	185b      	adds	r3, r3, r1
    26d8:	3380      	adds	r3, #128	; 0x80
    26da:	79d9      	ldrb	r1, [r3, #7]
    26dc:	2307      	movs	r3, #7
    26de:	400b      	ands	r3, r1
    26e0:	2b01      	cmp	r3, #1
    26e2:	d00b      	beq.n	26fc <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    26e4:	0093      	lsls	r3, r2, #2
    26e6:	189a      	adds	r2, r3, r2
    26e8:	0092      	lsls	r2, r2, #2
    26ea:	4b0e      	ldr	r3, [pc, #56]	; (2724 <_usb_d_dev_ep_stall+0x150>)
    26ec:	189b      	adds	r3, r3, r2
    26ee:	3380      	adds	r3, #128	; 0x80
    26f0:	79da      	ldrb	r2, [r3, #7]
    26f2:	2108      	movs	r1, #8
    26f4:	438a      	bics	r2, r1
    26f6:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    26f8:	2000      	movs	r0, #0
    26fa:	e794      	b.n	2626 <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    26fc:	3306      	adds	r3, #6
    26fe:	33ff      	adds	r3, #255	; 0xff
    2700:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2702:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2704:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2706:	4219      	tst	r1, r3
    2708:	d000      	beq.n	270c <_usb_d_dev_ep_stall+0x138>
    270a:	e78c      	b.n	2626 <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    270c:	0093      	lsls	r3, r2, #2
    270e:	189a      	adds	r2, r3, r2
    2710:	0092      	lsls	r2, r2, #2
    2712:	4b04      	ldr	r3, [pc, #16]	; (2724 <_usb_d_dev_ep_stall+0x150>)
    2714:	189b      	adds	r3, r3, r2
    2716:	3380      	adds	r3, #128	; 0x80
    2718:	79da      	ldrb	r2, [r3, #7]
    271a:	2108      	movs	r1, #8
    271c:	438a      	bics	r2, r1
    271e:	71da      	strb	r2, [r3, #7]
    2720:	e781      	b.n	2626 <_usb_d_dev_ep_stall+0x52>
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	200001ec 	.word	0x200001ec
    2728:	41005100 	.word	0x41005100
    272c:	41005109 	.word	0x41005109
    2730:	41005000 	.word	0x41005000
    2734:	41005108 	.word	0x41005108

00002738 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    2738:	b570      	push	{r4, r5, r6, lr}
    273a:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    273c:	230f      	movs	r3, #15
    273e:	4018      	ands	r0, r3
    2740:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    2742:	4b16      	ldr	r3, [pc, #88]	; (279c <_usb_d_dev_ep_read_req+0x64>)
    2744:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    2746:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    2748:	685b      	ldr	r3, [r3, #4]
    274a:	049b      	lsls	r3, r3, #18
    274c:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    274e:	2802      	cmp	r0, #2
    2750:	d81a      	bhi.n	2788 <_usb_d_dev_ep_read_req+0x50>
    2752:	2d00      	cmp	r5, #0
    2754:	d01b      	beq.n	278e <_usb_d_dev_ep_read_req+0x56>
    2756:	4b12      	ldr	r3, [pc, #72]	; (27a0 <_usb_d_dev_ep_read_req+0x68>)
    2758:	469c      	mov	ip, r3
    275a:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    275c:	2380      	movs	r3, #128	; 0x80
    275e:	005b      	lsls	r3, r3, #1
    2760:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    2762:	2b11      	cmp	r3, #17
    2764:	d116      	bne.n	2794 <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2766:	2308      	movs	r3, #8
    2768:	33ff      	adds	r3, #255	; 0xff
    276a:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    276c:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    276e:	06db      	lsls	r3, r3, #27
    2770:	d400      	bmi.n	2774 <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    2772:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    2774:	2208      	movs	r2, #8
    2776:	0028      	movs	r0, r5
    2778:	4b0a      	ldr	r3, [pc, #40]	; (27a4 <_usb_d_dev_ep_read_req+0x6c>)
    277a:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    277c:	2210      	movs	r2, #16
    277e:	2308      	movs	r3, #8
    2780:	33ff      	adds	r3, #255	; 0xff
    2782:	54e2      	strb	r2, [r4, r3]
	return bytes;
    2784:	0030      	movs	r0, r6
    2786:	e7f4      	b.n	2772 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    2788:	2012      	movs	r0, #18
    278a:	4240      	negs	r0, r0
    278c:	e7f1      	b.n	2772 <_usb_d_dev_ep_read_req+0x3a>
    278e:	2012      	movs	r0, #18
    2790:	4240      	negs	r0, r0
    2792:	e7ee      	b.n	2772 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    2794:	2013      	movs	r0, #19
    2796:	4240      	negs	r0, r0
    2798:	e7eb      	b.n	2772 <_usb_d_dev_ep_read_req+0x3a>
    279a:	46c0      	nop			; (mov r8, r8)
    279c:	200001ec 	.word	0x200001ec
    27a0:	41005000 	.word	0x41005000
    27a4:	00003925 	.word	0x00003925

000027a8 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    27a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27aa:	46de      	mov	lr, fp
    27ac:	4657      	mov	r7, sl
    27ae:	464e      	mov	r6, r9
    27b0:	4645      	mov	r5, r8
    27b2:	b5e0      	push	{r5, r6, r7, lr}
    27b4:	b085      	sub	sp, #20
    27b6:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    27b8:	7a06      	ldrb	r6, [r0, #8]
    27ba:	230f      	movs	r3, #15
    27bc:	4033      	ands	r3, r6
    27be:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    27c0:	2b00      	cmp	r3, #0
    27c2:	d100      	bne.n	27c6 <_usb_d_dev_ep_trans+0x1e>
    27c4:	e0d3      	b.n	296e <_usb_d_dev_ep_trans+0x1c6>
    27c6:	0018      	movs	r0, r3
    27c8:	2e00      	cmp	r6, #0
    27ca:	db39      	blt.n	2840 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    27cc:	0004      	movs	r4, r0
    27ce:	4a73      	ldr	r2, [pc, #460]	; (299c <_usb_d_dev_ep_trans+0x1f4>)
    27d0:	3260      	adds	r2, #96	; 0x60
    27d2:	1c41      	adds	r1, r0, #1
    27d4:	008d      	lsls	r5, r1, #2
    27d6:	186d      	adds	r5, r5, r1
    27d8:	00ad      	lsls	r5, r5, #2
    27da:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    27dc:	0081      	lsls	r1, r0, #2
    27de:	1809      	adds	r1, r1, r0
    27e0:	0089      	lsls	r1, r1, #2
    27e2:	1852      	adds	r2, r2, r1
    27e4:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    27e6:	4a6e      	ldr	r2, [pc, #440]	; (29a0 <_usb_d_dev_ep_trans+0x1f8>)
    27e8:	4291      	cmp	r1, r2
    27ea:	d02b      	beq.n	2844 <_usb_d_dev_ep_trans+0x9c>
    27ec:	1e4f      	subs	r7, r1, #1
    27ee:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    27f0:	4642      	mov	r2, r8
    27f2:	6852      	ldr	r2, [r2, #4]
    27f4:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    27f6:	2b02      	cmp	r3, #2
    27f8:	d900      	bls.n	27fc <_usb_d_dev_ep_trans+0x54>
    27fa:	e0a4      	b.n	2946 <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    27fc:	4643      	mov	r3, r8
    27fe:	681b      	ldr	r3, [r3, #0]
    2800:	4868      	ldr	r0, [pc, #416]	; (29a4 <_usb_d_dev_ep_trans+0x1fc>)
    2802:	4283      	cmp	r3, r0
    2804:	d920      	bls.n	2848 <_usb_d_dev_ep_trans+0xa0>
    2806:	1898      	adds	r0, r3, r2
    2808:	9001      	str	r0, [sp, #4]
    280a:	4867      	ldr	r0, [pc, #412]	; (29a8 <_usb_d_dev_ep_trans+0x200>)
    280c:	4684      	mov	ip, r0
    280e:	9801      	ldr	r0, [sp, #4]
    2810:	4560      	cmp	r0, ip
    2812:	d819      	bhi.n	2848 <_usb_d_dev_ep_trans+0xa0>
    2814:	079b      	lsls	r3, r3, #30
    2816:	d117      	bne.n	2848 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    2818:	2e00      	cmp	r6, #0
    281a:	db32      	blt.n	2882 <_usb_d_dev_ep_trans+0xda>
    281c:	4291      	cmp	r1, r2
    281e:	d900      	bls.n	2822 <_usb_d_dev_ep_trans+0x7a>
    2820:	e0af      	b.n	2982 <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    2822:	2f00      	cmp	r7, #0
    2824:	d030      	beq.n	2888 <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    2826:	00a3      	lsls	r3, r4, #2
    2828:	191b      	adds	r3, r3, r4
    282a:	009a      	lsls	r2, r3, #2
    282c:	4b5b      	ldr	r3, [pc, #364]	; (299c <_usb_d_dev_ep_trans+0x1f4>)
    282e:	189b      	adds	r3, r3, r2
    2830:	3380      	adds	r3, #128	; 0x80
    2832:	681b      	ldr	r3, [r3, #0]
    2834:	2b00      	cmp	r3, #0
    2836:	d100      	bne.n	283a <_usb_d_dev_ep_trans+0x92>
    2838:	e08b      	b.n	2952 <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    283a:	2300      	movs	r3, #0
    283c:	4699      	mov	r9, r3
    283e:	e00f      	b.n	2860 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2840:	1c98      	adds	r0, r3, #2
    2842:	e7c3      	b.n	27cc <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2844:	000f      	movs	r7, r1
    2846:	e7d3      	b.n	27f0 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    2848:	00a3      	lsls	r3, r4, #2
    284a:	191b      	adds	r3, r3, r4
    284c:	009a      	lsls	r2, r3, #2
    284e:	4b53      	ldr	r3, [pc, #332]	; (299c <_usb_d_dev_ep_trans+0x1f4>)
    2850:	189b      	adds	r3, r3, r2
    2852:	3380      	adds	r3, #128	; 0x80
    2854:	681b      	ldr	r3, [r3, #0]
    2856:	2b00      	cmp	r3, #0
    2858:	d100      	bne.n	285c <_usb_d_dev_ep_trans+0xb4>
    285a:	e077      	b.n	294c <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    285c:	2301      	movs	r3, #1
    285e:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    2860:	00a3      	lsls	r3, r4, #2
    2862:	191b      	adds	r3, r3, r4
    2864:	009a      	lsls	r2, r3, #2
    2866:	4b4d      	ldr	r3, [pc, #308]	; (299c <_usb_d_dev_ep_trans+0x1f4>)
    2868:	189b      	adds	r3, r3, r2
    286a:	3380      	adds	r3, #128	; 0x80
    286c:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    286e:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    2870:	071b      	lsls	r3, r3, #28
    2872:	d50c      	bpl.n	288e <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2874:	b005      	add	sp, #20
    2876:	bc3c      	pop	{r2, r3, r4, r5}
    2878:	4690      	mov	r8, r2
    287a:	4699      	mov	r9, r3
    287c:	46a2      	mov	sl, r4
    287e:	46ab      	mov	fp, r5
    2880:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    2882:	2300      	movs	r3, #0
    2884:	4699      	mov	r9, r3
    2886:	e7eb      	b.n	2860 <_usb_d_dev_ep_trans+0xb8>
    2888:	2300      	movs	r3, #0
    288a:	4699      	mov	r9, r3
    288c:	e7e8      	b.n	2860 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    288e:	a803      	add	r0, sp, #12
    2890:	4b46      	ldr	r3, [pc, #280]	; (29ac <_usb_d_dev_ep_trans+0x204>)
    2892:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    2894:	00a3      	lsls	r3, r4, #2
    2896:	191b      	adds	r3, r3, r4
    2898:	009a      	lsls	r2, r3, #2
    289a:	4b40      	ldr	r3, [pc, #256]	; (299c <_usb_d_dev_ep_trans+0x1f4>)
    289c:	189b      	adds	r3, r3, r2
    289e:	3380      	adds	r3, #128	; 0x80
    28a0:	79db      	ldrb	r3, [r3, #7]
    28a2:	065b      	lsls	r3, r3, #25
    28a4:	d444      	bmi.n	2930 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    28a6:	00a3      	lsls	r3, r4, #2
    28a8:	191b      	adds	r3, r3, r4
    28aa:	009b      	lsls	r3, r3, #2
    28ac:	4a3b      	ldr	r2, [pc, #236]	; (299c <_usb_d_dev_ep_trans+0x1f4>)
    28ae:	4693      	mov	fp, r2
    28b0:	449b      	add	fp, r3
    28b2:	2380      	movs	r3, #128	; 0x80
    28b4:	445b      	add	r3, fp
    28b6:	469a      	mov	sl, r3
    28b8:	79db      	ldrb	r3, [r3, #7]
    28ba:	2240      	movs	r2, #64	; 0x40
    28bc:	4313      	orrs	r3, r2
    28be:	4652      	mov	r2, sl
    28c0:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    28c2:	a803      	add	r0, sp, #12
    28c4:	4b3a      	ldr	r3, [pc, #232]	; (29b0 <_usb_d_dev_ep_trans+0x208>)
    28c6:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    28c8:	465b      	mov	r3, fp
    28ca:	4642      	mov	r2, r8
    28cc:	6812      	ldr	r2, [r2, #0]
    28ce:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    28d0:	4642      	mov	r2, r8
    28d2:	6852      	ldr	r2, [r2, #4]
    28d4:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    28d6:	2300      	movs	r3, #0
    28d8:	465a      	mov	r2, fp
    28da:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    28dc:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    28de:	01d2      	lsls	r2, r2, #7
    28e0:	4653      	mov	r3, sl
    28e2:	79d9      	ldrb	r1, [r3, #7]
    28e4:	237f      	movs	r3, #127	; 0x7f
    28e6:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    28e8:	4649      	mov	r1, r9
    28ea:	0149      	lsls	r1, r1, #5
    28ec:	4313      	orrs	r3, r2
    28ee:	2220      	movs	r2, #32
    28f0:	4393      	bics	r3, r2
    28f2:	430b      	orrs	r3, r1
    28f4:	4652      	mov	r2, sl
    28f6:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    28f8:	4643      	mov	r3, r8
    28fa:	7a5b      	ldrb	r3, [r3, #9]
    28fc:	2200      	movs	r2, #0
    28fe:	2b00      	cmp	r3, #0
    2900:	d002      	beq.n	2908 <_usb_d_dev_ep_trans+0x160>
    2902:	427a      	negs	r2, r7
    2904:	417a      	adcs	r2, r7
    2906:	b2d2      	uxtb	r2, r2
    2908:	00a3      	lsls	r3, r4, #2
    290a:	191c      	adds	r4, r3, r4
    290c:	00a4      	lsls	r4, r4, #2
    290e:	4b23      	ldr	r3, [pc, #140]	; (299c <_usb_d_dev_ep_trans+0x1f4>)
    2910:	191b      	adds	r3, r3, r4
    2912:	3380      	adds	r3, #128	; 0x80
    2914:	0112      	lsls	r2, r2, #4
    2916:	79df      	ldrb	r7, [r3, #7]
    2918:	2110      	movs	r1, #16
    291a:	438f      	bics	r7, r1
    291c:	4317      	orrs	r7, r2
    291e:	71df      	strb	r7, [r3, #7]
	if (dir) {
    2920:	2e00      	cmp	r6, #0
    2922:	db0a      	blt.n	293a <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    2924:	2100      	movs	r1, #0
    2926:	0028      	movs	r0, r5
    2928:	4b22      	ldr	r3, [pc, #136]	; (29b4 <_usb_d_dev_ep_trans+0x20c>)
    292a:	4798      	blx	r3
	return ERR_NONE;
    292c:	2000      	movs	r0, #0
    292e:	e7a1      	b.n	2874 <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    2930:	a803      	add	r0, sp, #12
    2932:	4b1f      	ldr	r3, [pc, #124]	; (29b0 <_usb_d_dev_ep_trans+0x208>)
    2934:	4798      	blx	r3
		return USB_BUSY;
    2936:	2001      	movs	r0, #1
    2938:	e79c      	b.n	2874 <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    293a:	2100      	movs	r1, #0
    293c:	0028      	movs	r0, r5
    293e:	4b1e      	ldr	r3, [pc, #120]	; (29b8 <_usb_d_dev_ep_trans+0x210>)
    2940:	4798      	blx	r3
	return ERR_NONE;
    2942:	2000      	movs	r0, #0
    2944:	e796      	b.n	2874 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    2946:	2012      	movs	r0, #18
    2948:	4240      	negs	r0, r0
    294a:	e793      	b.n	2874 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    294c:	2013      	movs	r0, #19
    294e:	4240      	negs	r0, r0
    2950:	e790      	b.n	2874 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    2952:	2012      	movs	r0, #18
    2954:	4240      	negs	r0, r0
    2956:	e78d      	b.n	2874 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    2958:	2013      	movs	r0, #19
    295a:	4240      	negs	r0, r0
    295c:	e78a      	b.n	2874 <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    295e:	4643      	mov	r3, r8
    2960:	685a      	ldr	r2, [r3, #4]
    2962:	0597      	lsls	r7, r2, #22
    2964:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    2966:	4d0d      	ldr	r5, [pc, #52]	; (299c <_usb_d_dev_ep_trans+0x1f4>)
    2968:	3574      	adds	r5, #116	; 0x74
    296a:	2400      	movs	r4, #0
    296c:	e746      	b.n	27fc <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    296e:	4a0b      	ldr	r2, [pc, #44]	; (299c <_usb_d_dev_ep_trans+0x1f4>)
    2970:	3260      	adds	r2, #96	; 0x60
    2972:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    2974:	4a0a      	ldr	r2, [pc, #40]	; (29a0 <_usb_d_dev_ep_trans+0x1f8>)
    2976:	4291      	cmp	r1, r2
    2978:	d0f1      	beq.n	295e <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    297a:	4d08      	ldr	r5, [pc, #32]	; (299c <_usb_d_dev_ep_trans+0x1f4>)
    297c:	3574      	adds	r5, #116	; 0x74
    297e:	2400      	movs	r4, #0
    2980:	e734      	b.n	27ec <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    2982:	00a3      	lsls	r3, r4, #2
    2984:	191b      	adds	r3, r3, r4
    2986:	009a      	lsls	r2, r3, #2
    2988:	4b04      	ldr	r3, [pc, #16]	; (299c <_usb_d_dev_ep_trans+0x1f4>)
    298a:	189b      	adds	r3, r3, r2
    298c:	3380      	adds	r3, #128	; 0x80
    298e:	681b      	ldr	r3, [r3, #0]
    2990:	2b00      	cmp	r3, #0
    2992:	d0e1      	beq.n	2958 <_usb_d_dev_ep_trans+0x1b0>
    2994:	2301      	movs	r3, #1
    2996:	4699      	mov	r9, r3
    2998:	e762      	b.n	2860 <_usb_d_dev_ep_trans+0xb8>
    299a:	46c0      	nop			; (mov r8, r8)
    299c:	200001ec 	.word	0x200001ec
    29a0:	000003ff 	.word	0x000003ff
    29a4:	1fffffff 	.word	0x1fffffff
    29a8:	20007fff 	.word	0x20007fff
    29ac:	000004d9 	.word	0x000004d9
    29b0:	000004e7 	.word	0x000004e7
    29b4:	00001d81 	.word	0x00001d81
    29b8:	00001bd9 	.word	0x00001bd9

000029bc <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    29bc:	1e0b      	subs	r3, r1, #0
    29be:	d006      	beq.n	29ce <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    29c0:	2801      	cmp	r0, #1
    29c2:	d006      	beq.n	29d2 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    29c4:	2800      	cmp	r0, #0
    29c6:	d101      	bne.n	29cc <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    29c8:	4a03      	ldr	r2, [pc, #12]	; (29d8 <_usb_d_dev_register_callback+0x1c>)
    29ca:	6613      	str	r3, [r2, #96]	; 0x60
	}
}
    29cc:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    29ce:	4b03      	ldr	r3, [pc, #12]	; (29dc <_usb_d_dev_register_callback+0x20>)
    29d0:	e7f6      	b.n	29c0 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    29d2:	4a01      	ldr	r2, [pc, #4]	; (29d8 <_usb_d_dev_register_callback+0x1c>)
    29d4:	6653      	str	r3, [r2, #100]	; 0x64
    29d6:	e7f9      	b.n	29cc <_usb_d_dev_register_callback+0x10>
    29d8:	200001ec 	.word	0x200001ec
    29dc:	00001941 	.word	0x00001941

000029e0 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    29e0:	1e0b      	subs	r3, r1, #0
    29e2:	d008      	beq.n	29f6 <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    29e4:	2800      	cmp	r0, #0
    29e6:	d008      	beq.n	29fa <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    29e8:	2801      	cmp	r0, #1
    29ea:	d009      	beq.n	2a00 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    29ec:	2802      	cmp	r0, #2
    29ee:	d106      	bne.n	29fe <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    29f0:	4a05      	ldr	r2, [pc, #20]	; (2a08 <_usb_d_dev_register_ep_callback+0x28>)
    29f2:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    29f4:	e003      	b.n	29fe <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    29f6:	4b05      	ldr	r3, [pc, #20]	; (2a0c <_usb_d_dev_register_ep_callback+0x2c>)
    29f8:	e7f4      	b.n	29e4 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    29fa:	4a03      	ldr	r2, [pc, #12]	; (2a08 <_usb_d_dev_register_ep_callback+0x28>)
    29fc:	6693      	str	r3, [r2, #104]	; 0x68
}
    29fe:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2a00:	4a01      	ldr	r2, [pc, #4]	; (2a08 <_usb_d_dev_register_ep_callback+0x28>)
    2a02:	66d3      	str	r3, [r2, #108]	; 0x6c
    2a04:	e7fb      	b.n	29fe <_usb_d_dev_register_ep_callback+0x1e>
    2a06:	46c0      	nop			; (mov r8, r8)
    2a08:	200001ec 	.word	0x200001ec
    2a0c:	00001941 	.word	0x00001941

00002a10 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    2a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    2a12:	4b82      	ldr	r3, [pc, #520]	; (2c1c <USB_Handler+0x20c>)
    2a14:	8c1e      	ldrh	r6, [r3, #32]
    2a16:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2a18:	2e00      	cmp	r6, #0
    2a1a:	d003      	beq.n	2a24 <USB_Handler+0x14>
    2a1c:	4c80      	ldr	r4, [pc, #512]	; (2c20 <USB_Handler+0x210>)
    2a1e:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    2a20:	2500      	movs	r5, #0
    2a22:	e0b9      	b.n	2b98 <USB_Handler+0x188>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2a24:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    2a26:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    2a28:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    2a2a:	075a      	lsls	r2, r3, #29
    2a2c:	d417      	bmi.n	2a5e <USB_Handler+0x4e>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    2a2e:	059a      	lsls	r2, r3, #22
    2a30:	d41c      	bmi.n	2a6c <USB_Handler+0x5c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2a32:	061a      	lsls	r2, r3, #24
    2a34:	d43e      	bmi.n	2ab4 <USB_Handler+0xa4>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    2a36:	2270      	movs	r2, #112	; 0x70
    2a38:	421a      	tst	r2, r3
    2a3a:	d144      	bne.n	2ac6 <USB_Handler+0xb6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    2a3c:	071a      	lsls	r2, r3, #28
    2a3e:	d45e      	bmi.n	2afe <USB_Handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    2a40:	07db      	lsls	r3, r3, #31
    2a42:	d5eb      	bpl.n	2a1c <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2a44:	4b75      	ldr	r3, [pc, #468]	; (2c1c <USB_Handler+0x20c>)
    2a46:	4a77      	ldr	r2, [pc, #476]	; (2c24 <USB_Handler+0x214>)
    2a48:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2a4a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2a4c:	3a92      	subs	r2, #146	; 0x92
    2a4e:	3aff      	subs	r2, #255	; 0xff
    2a50:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2a52:	4b73      	ldr	r3, [pc, #460]	; (2c20 <USB_Handler+0x210>)
    2a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2a56:	2100      	movs	r1, #0
    2a58:	2004      	movs	r0, #4
    2a5a:	4798      	blx	r3
    2a5c:	e005      	b.n	2a6a <USB_Handler+0x5a>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2a5e:	2204      	movs	r2, #4
    2a60:	4b6e      	ldr	r3, [pc, #440]	; (2c1c <USB_Handler+0x20c>)
    2a62:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    2a64:	4b6e      	ldr	r3, [pc, #440]	; (2c20 <USB_Handler+0x210>)
    2a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2a68:	4798      	blx	r3

	_usb_d_dev_handler();
}
    2a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a6c:	4b6b      	ldr	r3, [pc, #428]	; (2c1c <USB_Handler+0x20c>)
    2a6e:	4a6d      	ldr	r2, [pc, #436]	; (2c24 <USB_Handler+0x214>)
    2a70:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2a72:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2a74:	3a92      	subs	r2, #146	; 0x92
    2a76:	3aff      	subs	r2, #255	; 0xff
    2a78:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2a7a:	4b69      	ldr	r3, [pc, #420]	; (2c20 <USB_Handler+0x210>)
    2a7c:	891b      	ldrh	r3, [r3, #8]
    2a7e:	071b      	lsls	r3, r3, #28
    2a80:	0f1b      	lsrs	r3, r3, #28
    2a82:	2b03      	cmp	r3, #3
    2a84:	d00c      	beq.n	2aa0 <USB_Handler+0x90>
    2a86:	4b66      	ldr	r3, [pc, #408]	; (2c20 <USB_Handler+0x210>)
    2a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2a8a:	071b      	lsls	r3, r3, #28
    2a8c:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    2a8e:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2a90:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2a92:	2b03      	cmp	r3, #3
    2a94:	d005      	beq.n	2aa2 <USB_Handler+0x92>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2a96:	4b62      	ldr	r3, [pc, #392]	; (2c20 <USB_Handler+0x210>)
    2a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2a9a:	2003      	movs	r0, #3
    2a9c:	4798      	blx	r3
    2a9e:	e7e4      	b.n	2a6a <USB_Handler+0x5a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2aa0:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2aa2:	0152      	lsls	r2, r2, #5
    2aa4:	4b5e      	ldr	r3, [pc, #376]	; (2c20 <USB_Handler+0x210>)
    2aa6:	189b      	adds	r3, r3, r2
    2aa8:	8919      	ldrh	r1, [r3, #8]
    2aaa:	0449      	lsls	r1, r1, #17
    2aac:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    2aae:	2200      	movs	r2, #0
    2ab0:	811a      	strh	r2, [r3, #8]
    2ab2:	e7f0      	b.n	2a96 <USB_Handler+0x86>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2ab4:	2280      	movs	r2, #128	; 0x80
    2ab6:	4b59      	ldr	r3, [pc, #356]	; (2c1c <USB_Handler+0x20c>)
    2ab8:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    2aba:	4b59      	ldr	r3, [pc, #356]	; (2c20 <USB_Handler+0x210>)
    2abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2abe:	2100      	movs	r1, #0
    2ac0:	2005      	movs	r0, #5
    2ac2:	4798      	blx	r3
    2ac4:	e7d1      	b.n	2a6a <USB_Handler+0x5a>
    2ac6:	4b55      	ldr	r3, [pc, #340]	; (2c1c <USB_Handler+0x20c>)
    2ac8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2aca:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2acc:	4a55      	ldr	r2, [pc, #340]	; (2c24 <USB_Handler+0x214>)
    2ace:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2ad0:	4b55      	ldr	r3, [pc, #340]	; (2c28 <USB_Handler+0x218>)
    2ad2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2ad4:	069b      	lsls	r3, r3, #26
    2ad6:	d40c      	bmi.n	2af2 <USB_Handler+0xe2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2ad8:	4953      	ldr	r1, [pc, #332]	; (2c28 <USB_Handler+0x218>)
	tmp &= mask;
    2ada:	3a32      	subs	r2, #50	; 0x32
    2adc:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2ade:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    2ae0:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    2ae2:	2bd0      	cmp	r3, #208	; 0xd0
    2ae4:	d1fb      	bne.n	2ade <USB_Handler+0xce>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    2ae6:	4b4e      	ldr	r3, [pc, #312]	; (2c20 <USB_Handler+0x210>)
    2ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2aea:	2100      	movs	r1, #0
    2aec:	2002      	movs	r0, #2
    2aee:	4798      	blx	r3
    2af0:	e7bb      	b.n	2a6a <USB_Handler+0x5a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2af2:	494d      	ldr	r1, [pc, #308]	; (2c28 <USB_Handler+0x218>)
	tmp &= mask;
    2af4:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2af6:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    2af8:	421a      	tst	r2, r3
    2afa:	d0fc      	beq.n	2af6 <USB_Handler+0xe6>
    2afc:	e7f3      	b.n	2ae6 <USB_Handler+0xd6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2afe:	4b47      	ldr	r3, [pc, #284]	; (2c1c <USB_Handler+0x20c>)
    2b00:	2100      	movs	r1, #0
    2b02:	2280      	movs	r2, #128	; 0x80
    2b04:	0052      	lsls	r2, r2, #1
    2b06:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2b08:	3af8      	subs	r2, #248	; 0xf8
    2b0a:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2b0c:	3268      	adds	r2, #104	; 0x68
    2b0e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2b10:	4a44      	ldr	r2, [pc, #272]	; (2c24 <USB_Handler+0x214>)
    2b12:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    2b14:	4b45      	ldr	r3, [pc, #276]	; (2c2c <USB_Handler+0x21c>)
    2b16:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    2b18:	4b41      	ldr	r3, [pc, #260]	; (2c20 <USB_Handler+0x210>)
    2b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2b1c:	2100      	movs	r1, #0
    2b1e:	2001      	movs	r0, #1
    2b20:	4798      	blx	r3
    2b22:	e7a2      	b.n	2a6a <USB_Handler+0x5a>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2b24:	06cb      	lsls	r3, r1, #27
    2b26:	d407      	bmi.n	2b38 <USB_Handler+0x128>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2b28:	064b      	lsls	r3, r1, #25
    2b2a:	d408      	bmi.n	2b3e <USB_Handler+0x12e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2b2c:	068b      	lsls	r3, r1, #26
    2b2e:	d52e      	bpl.n	2b8e <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    2b30:	2100      	movs	r1, #0
    2b32:	4b3f      	ldr	r3, [pc, #252]	; (2c30 <USB_Handler+0x220>)
    2b34:	4798      	blx	r3
    2b36:	e02a      	b.n	2b8e <USB_Handler+0x17e>
		_usb_d_dev_handle_setup(ept);
    2b38:	4b3e      	ldr	r3, [pc, #248]	; (2c34 <USB_Handler+0x224>)
    2b3a:	4798      	blx	r3
    2b3c:	e027      	b.n	2b8e <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    2b3e:	2101      	movs	r1, #1
    2b40:	4b3b      	ldr	r3, [pc, #236]	; (2c30 <USB_Handler+0x220>)
    2b42:	4798      	blx	r3
    2b44:	e023      	b.n	2b8e <USB_Handler+0x17e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2b46:	064b      	lsls	r3, r1, #25
    2b48:	d40e      	bmi.n	2b68 <USB_Handler+0x158>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2b4a:	070b      	lsls	r3, r1, #28
    2b4c:	d410      	bmi.n	2b70 <USB_Handler+0x160>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2b4e:	078b      	lsls	r3, r1, #30
    2b50:	d412      	bmi.n	2b78 <USB_Handler+0x168>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2b52:	2307      	movs	r3, #7
    2b54:	401a      	ands	r2, r3
    2b56:	2a01      	cmp	r2, #1
    2b58:	d119      	bne.n	2b8e <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2b5a:	074b      	lsls	r3, r1, #29
    2b5c:	d410      	bmi.n	2b80 <USB_Handler+0x170>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2b5e:	06cb      	lsls	r3, r1, #27
    2b60:	d515      	bpl.n	2b8e <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    2b62:	4b34      	ldr	r3, [pc, #208]	; (2c34 <USB_Handler+0x224>)
    2b64:	4798      	blx	r3
    2b66:	e012      	b.n	2b8e <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    2b68:	2101      	movs	r1, #1
    2b6a:	4b31      	ldr	r3, [pc, #196]	; (2c30 <USB_Handler+0x220>)
    2b6c:	4798      	blx	r3
    2b6e:	e00e      	b.n	2b8e <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 1);
    2b70:	2101      	movs	r1, #1
    2b72:	4b31      	ldr	r3, [pc, #196]	; (2c38 <USB_Handler+0x228>)
    2b74:	4798      	blx	r3
    2b76:	e00a      	b.n	2b8e <USB_Handler+0x17e>
		_usb_d_dev_in_next(ept, true);
    2b78:	2101      	movs	r1, #1
    2b7a:	4b30      	ldr	r3, [pc, #192]	; (2c3c <USB_Handler+0x22c>)
    2b7c:	4798      	blx	r3
    2b7e:	e006      	b.n	2b8e <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 0);
    2b80:	2100      	movs	r1, #0
    2b82:	4b2d      	ldr	r3, [pc, #180]	; (2c38 <USB_Handler+0x228>)
    2b84:	4798      	blx	r3
    2b86:	e002      	b.n	2b8e <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    2b88:	2100      	movs	r1, #0
    2b8a:	4b29      	ldr	r3, [pc, #164]	; (2c30 <USB_Handler+0x220>)
    2b8c:	4798      	blx	r3
    2b8e:	3501      	adds	r5, #1
    2b90:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2b92:	2d09      	cmp	r5, #9
    2b94:	d100      	bne.n	2b98 <USB_Handler+0x188>
    2b96:	e768      	b.n	2a6a <USB_Handler+0x5a>
    2b98:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    2b9a:	7ca1      	ldrb	r1, [r4, #18]
    2b9c:	29ff      	cmp	r1, #255	; 0xff
    2b9e:	d0f6      	beq.n	2b8e <USB_Handler+0x17e>
	if (!(epint & (1u << epn))) {
    2ba0:	230f      	movs	r3, #15
    2ba2:	400b      	ands	r3, r1
    2ba4:	2101      	movs	r1, #1
    2ba6:	4099      	lsls	r1, r3
    2ba8:	420e      	tst	r6, r1
    2baa:	d0f0      	beq.n	2b8e <USB_Handler+0x17e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2bac:	0159      	lsls	r1, r3, #5
    2bae:	4f24      	ldr	r7, [pc, #144]	; (2c40 <USB_Handler+0x230>)
    2bb0:	46bc      	mov	ip, r7
    2bb2:	4461      	add	r1, ip
    2bb4:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2bb6:	015b      	lsls	r3, r3, #5
    2bb8:	4f22      	ldr	r7, [pc, #136]	; (2c44 <USB_Handler+0x234>)
    2bba:	46bc      	mov	ip, r7
    2bbc:	4463      	add	r3, ip
    2bbe:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    2bc0:	4019      	ands	r1, r3
	if (flags) {
    2bc2:	d0e4      	beq.n	2b8e <USB_Handler+0x17e>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2bc4:	00ab      	lsls	r3, r5, #2
    2bc6:	195a      	adds	r2, r3, r5
    2bc8:	0092      	lsls	r2, r2, #2
    2bca:	4b15      	ldr	r3, [pc, #84]	; (2c20 <USB_Handler+0x210>)
    2bcc:	469c      	mov	ip, r3
    2bce:	4462      	add	r2, ip
    2bd0:	3270      	adds	r2, #112	; 0x70
    2bd2:	7dd2      	ldrb	r2, [r2, #23]
    2bd4:	2347      	movs	r3, #71	; 0x47
    2bd6:	4013      	ands	r3, r2
    2bd8:	2b01      	cmp	r3, #1
    2bda:	d0a3      	beq.n	2b24 <USB_Handler+0x114>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2bdc:	b253      	sxtb	r3, r2
    2bde:	2b00      	cmp	r3, #0
    2be0:	dbb1      	blt.n	2b46 <USB_Handler+0x136>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2be2:	068b      	lsls	r3, r1, #26
    2be4:	d4d0      	bmi.n	2b88 <USB_Handler+0x178>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2be6:	074b      	lsls	r3, r1, #29
    2be8:	d40c      	bmi.n	2c04 <USB_Handler+0x1f4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2bea:	07cb      	lsls	r3, r1, #31
    2bec:	d40e      	bmi.n	2c0c <USB_Handler+0x1fc>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2bee:	2307      	movs	r3, #7
    2bf0:	401a      	ands	r2, r3
    2bf2:	2a01      	cmp	r2, #1
    2bf4:	d1cb      	bne.n	2b8e <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2bf6:	070b      	lsls	r3, r1, #28
    2bf8:	d40c      	bmi.n	2c14 <USB_Handler+0x204>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2bfa:	06cb      	lsls	r3, r1, #27
    2bfc:	d5c7      	bpl.n	2b8e <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    2bfe:	4b0d      	ldr	r3, [pc, #52]	; (2c34 <USB_Handler+0x224>)
    2c00:	4798      	blx	r3
    2c02:	e7c4      	b.n	2b8e <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 0);
    2c04:	2100      	movs	r1, #0
    2c06:	4b0c      	ldr	r3, [pc, #48]	; (2c38 <USB_Handler+0x228>)
    2c08:	4798      	blx	r3
    2c0a:	e7c0      	b.n	2b8e <USB_Handler+0x17e>
		_usb_d_dev_out_next(ept, true);
    2c0c:	2101      	movs	r1, #1
    2c0e:	4b0e      	ldr	r3, [pc, #56]	; (2c48 <USB_Handler+0x238>)
    2c10:	4798      	blx	r3
    2c12:	e7bc      	b.n	2b8e <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 1);
    2c14:	2101      	movs	r1, #1
    2c16:	4b08      	ldr	r3, [pc, #32]	; (2c38 <USB_Handler+0x228>)
    2c18:	4798      	blx	r3
    2c1a:	e7b8      	b.n	2b8e <USB_Handler+0x17e>
    2c1c:	41005000 	.word	0x41005000
    2c20:	200001ec 	.word	0x200001ec
    2c24:	00000201 	.word	0x00000201
    2c28:	40000800 	.word	0x40000800
    2c2c:	00001b95 	.word	0x00001b95
    2c30:	000019d1 	.word	0x000019d1
    2c34:	00001945 	.word	0x00001945
    2c38:	00001a95 	.word	0x00001a95
    2c3c:	00001bd9 	.word	0x00001bd9
    2c40:	41005100 	.word	0x41005100
    2c44:	41005109 	.word	0x41005109
    2c48:	00001d81 	.word	0x00001d81

00002c4c <main>:
#include <atmel_start.h>

int main(void)
{
    2c4c:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2c4e:	4b01      	ldr	r3, [pc, #4]	; (2c54 <main+0x8>)
    2c50:	4798      	blx	r3
    2c52:	e7fe      	b.n	2c52 <main+0x6>
    2c54:	00000115 	.word	0x00000115

00002c58 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    2c58:	b510      	push	{r4, lr}
    2c5a:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    2c5c:	2800      	cmp	r0, #0
    2c5e:	d109      	bne.n	2c74 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    2c60:	0011      	movs	r1, r2
    2c62:	0018      	movs	r0, r3
    2c64:	4b05      	ldr	r3, [pc, #20]	; (2c7c <_read+0x24>)
    2c66:	4798      	blx	r3
    2c68:	2800      	cmp	r0, #0
    2c6a:	db00      	blt.n	2c6e <_read+0x16>
	if (n < 0) {
		return -1;
	}

	return n;
}
    2c6c:	bd10      	pop	{r4, pc}
    2c6e:	2001      	movs	r0, #1
    2c70:	4240      	negs	r0, r0
    2c72:	e7fb      	b.n	2c6c <_read+0x14>
		return -1;
    2c74:	2001      	movs	r0, #1
    2c76:	4240      	negs	r0, r0
    2c78:	e7f8      	b.n	2c6c <_read+0x14>
    2c7a:	46c0      	nop			; (mov r8, r8)
    2c7c:	00002cd5 	.word	0x00002cd5

00002c80 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    2c80:	b510      	push	{r4, lr}
    2c82:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    2c84:	3801      	subs	r0, #1
    2c86:	2802      	cmp	r0, #2
    2c88:	d809      	bhi.n	2c9e <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    2c8a:	0011      	movs	r1, r2
    2c8c:	0018      	movs	r0, r3
    2c8e:	4b05      	ldr	r3, [pc, #20]	; (2ca4 <_write+0x24>)
    2c90:	4798      	blx	r3
    2c92:	2800      	cmp	r0, #0
    2c94:	db00      	blt.n	2c98 <_write+0x18>
	if (n < 0) {
		return -1;
	}

	return n;
}
    2c96:	bd10      	pop	{r4, pc}
    2c98:	2001      	movs	r0, #1
    2c9a:	4240      	negs	r0, r0
    2c9c:	e7fb      	b.n	2c96 <_write+0x16>
		return -1;
    2c9e:	2001      	movs	r0, #1
    2ca0:	4240      	negs	r0, r0
    2ca2:	e7f8      	b.n	2c96 <_write+0x16>
    2ca4:	00002cf9 	.word	0x00002cf9

00002ca8 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    2ca8:	b570      	push	{r4, r5, r6, lr}
    2caa:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    2cac:	4d06      	ldr	r5, [pc, #24]	; (2cc8 <stdio_io_init+0x20>)
    2cae:	682b      	ldr	r3, [r5, #0]
    2cb0:	6898      	ldr	r0, [r3, #8]
    2cb2:	2100      	movs	r1, #0
    2cb4:	4c05      	ldr	r4, [pc, #20]	; (2ccc <stdio_io_init+0x24>)
    2cb6:	47a0      	blx	r4
	setbuf(stdin, NULL);
    2cb8:	682b      	ldr	r3, [r5, #0]
    2cba:	6858      	ldr	r0, [r3, #4]
    2cbc:	2100      	movs	r1, #0
    2cbe:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    2cc0:	4b03      	ldr	r3, [pc, #12]	; (2cd0 <stdio_io_init+0x28>)
    2cc2:	601e      	str	r6, [r3, #0]
}
    2cc4:	bd70      	pop	{r4, r5, r6, pc}
    2cc6:	46c0      	nop			; (mov r8, r8)
    2cc8:	200000d0 	.word	0x200000d0
    2ccc:	00003947 	.word	0x00003947
    2cd0:	200003d4 	.word	0x200003d4

00002cd4 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    2cd4:	b510      	push	{r4, lr}
    2cd6:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    2cd8:	4b05      	ldr	r3, [pc, #20]	; (2cf0 <stdio_io_read+0x1c>)
    2cda:	6818      	ldr	r0, [r3, #0]
    2cdc:	2800      	cmp	r0, #0
    2cde:	d004      	beq.n	2cea <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    2ce0:	b28a      	uxth	r2, r1
    2ce2:	0021      	movs	r1, r4
    2ce4:	4b03      	ldr	r3, [pc, #12]	; (2cf4 <stdio_io_read+0x20>)
    2ce6:	4798      	blx	r3
}
    2ce8:	bd10      	pop	{r4, pc}
		return 0;
    2cea:	2000      	movs	r0, #0
    2cec:	e7fc      	b.n	2ce8 <stdio_io_read+0x14>
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	200003d4 	.word	0x200003d4
    2cf4:	00000591 	.word	0x00000591

00002cf8 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    2cf8:	b510      	push	{r4, lr}
    2cfa:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    2cfc:	4b05      	ldr	r3, [pc, #20]	; (2d14 <stdio_io_write+0x1c>)
    2cfe:	6818      	ldr	r0, [r3, #0]
    2d00:	2800      	cmp	r0, #0
    2d02:	d004      	beq.n	2d0e <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    2d04:	b28a      	uxth	r2, r1
    2d06:	0021      	movs	r1, r4
    2d08:	4b03      	ldr	r3, [pc, #12]	; (2d18 <stdio_io_write+0x20>)
    2d0a:	4798      	blx	r3
}
    2d0c:	bd10      	pop	{r4, pc}
		return 0;
    2d0e:	2000      	movs	r0, #0
    2d10:	e7fc      	b.n	2d0c <stdio_io_write+0x14>
    2d12:	46c0      	nop			; (mov r8, r8)
    2d14:	200003d4 	.word	0x200003d4
    2d18:	0000055d 	.word	0x0000055d

00002d1c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    2d1c:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    2d1e:	4c04      	ldr	r4, [pc, #16]	; (2d30 <stdio_redirect_init+0x14>)
    2d20:	0020      	movs	r0, r4
    2d22:	4b04      	ldr	r3, [pc, #16]	; (2d34 <stdio_redirect_init+0x18>)
    2d24:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    2d26:	0020      	movs	r0, r4
    2d28:	4b03      	ldr	r3, [pc, #12]	; (2d38 <stdio_redirect_init+0x1c>)
    2d2a:	4798      	blx	r3
}
    2d2c:	bd10      	pop	{r4, pc}
    2d2e:	46c0      	nop			; (mov r8, r8)
    2d30:	200004c0 	.word	0x200004c0
    2d34:	00000899 	.word	0x00000899
    2d38:	00002ca9 	.word	0x00002ca9

00002d3c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d3e:	b083      	sub	sp, #12
    2d40:	0006      	movs	r6, r0
    2d42:	000c      	movs	r4, r1
    2d44:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    2d46:	780a      	ldrb	r2, [r1, #0]
    2d48:	0653      	lsls	r3, r2, #25
    2d4a:	0f9b      	lsrs	r3, r3, #30
    2d4c:	2b01      	cmp	r3, #1
    2d4e:	d000      	beq.n	2d52 <cdcdf_acm_req+0x16>
    2d50:	e06c      	b.n	2e2c <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2d52:	7909      	ldrb	r1, [r1, #4]
    2d54:	7963      	ldrb	r3, [r4, #5]
    2d56:	021b      	lsls	r3, r3, #8
    2d58:	430b      	orrs	r3, r1
    2d5a:	493b      	ldr	r1, [pc, #236]	; (2e48 <cdcdf_acm_req+0x10c>)
    2d5c:	7809      	ldrb	r1, [r1, #0]
    2d5e:	4299      	cmp	r1, r3
    2d60:	d003      	beq.n	2d6a <cdcdf_acm_req+0x2e>
    2d62:	4939      	ldr	r1, [pc, #228]	; (2e48 <cdcdf_acm_req+0x10c>)
    2d64:	7849      	ldrb	r1, [r1, #1]
    2d66:	4299      	cmp	r1, r3
    2d68:	d163      	bne.n	2e32 <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    2d6a:	b252      	sxtb	r2, r2
    2d6c:	2a00      	cmp	r2, #0
    2d6e:	db0e      	blt.n	2d8e <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    2d70:	79a7      	ldrb	r7, [r4, #6]
    2d72:	79e3      	ldrb	r3, [r4, #7]
    2d74:	021b      	lsls	r3, r3, #8
    2d76:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    2d78:	4b34      	ldr	r3, [pc, #208]	; (2e4c <cdcdf_acm_req+0x110>)
    2d7a:	4798      	blx	r3
	switch (req->bRequest) {
    2d7c:	7863      	ldrb	r3, [r4, #1]
    2d7e:	2b20      	cmp	r3, #32
    2d80:	d018      	beq.n	2db4 <cdcdf_acm_req+0x78>
    2d82:	2b22      	cmp	r3, #34	; 0x22
    2d84:	d03c      	beq.n	2e00 <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    2d86:	200d      	movs	r0, #13
    2d88:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    2d8a:	b003      	add	sp, #12
    2d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    2d8e:	2d01      	cmp	r5, #1
    2d90:	d052      	beq.n	2e38 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    2d92:	7863      	ldrb	r3, [r4, #1]
    2d94:	2b21      	cmp	r3, #33	; 0x21
    2d96:	d151      	bne.n	2e3c <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    2d98:	79a2      	ldrb	r2, [r4, #6]
    2d9a:	79e3      	ldrb	r3, [r4, #7]
    2d9c:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2d9e:	4313      	orrs	r3, r2
    2da0:	2b07      	cmp	r3, #7
    2da2:	d14e      	bne.n	2e42 <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2da4:	2300      	movs	r3, #0
    2da6:	2207      	movs	r2, #7
    2da8:	4927      	ldr	r1, [pc, #156]	; (2e48 <cdcdf_acm_req+0x10c>)
    2daa:	3108      	adds	r1, #8
    2dac:	0030      	movs	r0, r6
    2dae:	4c28      	ldr	r4, [pc, #160]	; (2e50 <cdcdf_acm_req+0x114>)
    2db0:	47a0      	blx	r4
    2db2:	e7ea      	b.n	2d8a <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2db4:	2f07      	cmp	r7, #7
    2db6:	d134      	bne.n	2e22 <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    2db8:	2d00      	cmp	r5, #0
    2dba:	d01a      	beq.n	2df2 <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2dbc:	2207      	movs	r2, #7
    2dbe:	0001      	movs	r1, r0
    2dc0:	4668      	mov	r0, sp
    2dc2:	4b24      	ldr	r3, [pc, #144]	; (2e54 <cdcdf_acm_req+0x118>)
    2dc4:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2dc6:	4b20      	ldr	r3, [pc, #128]	; (2e48 <cdcdf_acm_req+0x10c>)
    2dc8:	691b      	ldr	r3, [r3, #16]
    2dca:	2b00      	cmp	r3, #0
    2dcc:	d005      	beq.n	2dda <cdcdf_acm_req+0x9e>
    2dce:	4668      	mov	r0, sp
    2dd0:	4798      	blx	r3
    2dd2:	0003      	movs	r3, r0
			return ERR_NONE;
    2dd4:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d0d7      	beq.n	2d8a <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    2dda:	4a1b      	ldr	r2, [pc, #108]	; (2e48 <cdcdf_acm_req+0x10c>)
    2ddc:	0013      	movs	r3, r2
    2dde:	9900      	ldr	r1, [sp, #0]
    2de0:	6091      	str	r1, [r2, #8]
    2de2:	466a      	mov	r2, sp
    2de4:	8892      	ldrh	r2, [r2, #4]
    2de6:	819a      	strh	r2, [r3, #12]
    2de8:	466a      	mov	r2, sp
    2dea:	7992      	ldrb	r2, [r2, #6]
    2dec:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    2dee:	2000      	movs	r0, #0
    2df0:	e7cb      	b.n	2d8a <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2df2:	2300      	movs	r3, #0
    2df4:	2207      	movs	r2, #7
    2df6:	0001      	movs	r1, r0
    2df8:	0030      	movs	r0, r6
    2dfa:	4c15      	ldr	r4, [pc, #84]	; (2e50 <cdcdf_acm_req+0x114>)
    2dfc:	47a0      	blx	r4
    2dfe:	e7c4      	b.n	2d8a <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    2e00:	2300      	movs	r3, #0
    2e02:	2200      	movs	r2, #0
    2e04:	2100      	movs	r1, #0
    2e06:	2000      	movs	r0, #0
    2e08:	4d11      	ldr	r5, [pc, #68]	; (2e50 <cdcdf_acm_req+0x114>)
    2e0a:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    2e0c:	4b0e      	ldr	r3, [pc, #56]	; (2e48 <cdcdf_acm_req+0x10c>)
    2e0e:	695b      	ldr	r3, [r3, #20]
    2e10:	2b00      	cmp	r3, #0
    2e12:	d009      	beq.n	2e28 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    2e14:	78a2      	ldrb	r2, [r4, #2]
    2e16:	78e0      	ldrb	r0, [r4, #3]
    2e18:	0200      	lsls	r0, r0, #8
    2e1a:	4310      	orrs	r0, r2
    2e1c:	4798      	blx	r3
		return ERR_NONE;
    2e1e:	2000      	movs	r0, #0
    2e20:	e7b3      	b.n	2d8a <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    2e22:	2001      	movs	r0, #1
    2e24:	4240      	negs	r0, r0
    2e26:	e7b0      	b.n	2d8a <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    2e28:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    2e2a:	e7ae      	b.n	2d8a <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    2e2c:	200a      	movs	r0, #10
    2e2e:	4240      	negs	r0, r0
    2e30:	e7ab      	b.n	2d8a <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    2e32:	200a      	movs	r0, #10
    2e34:	4240      	negs	r0, r0
    2e36:	e7a8      	b.n	2d8a <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    2e38:	2000      	movs	r0, #0
    2e3a:	e7a6      	b.n	2d8a <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    2e3c:	200d      	movs	r0, #13
    2e3e:	4240      	negs	r0, r0
    2e40:	e7a3      	b.n	2d8a <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    2e42:	2001      	movs	r0, #1
    2e44:	4240      	negs	r0, r0
    2e46:	e7a0      	b.n	2d8a <cdcdf_acm_req+0x4e>
    2e48:	200003d8 	.word	0x200003d8
    2e4c:	0000370d 	.word	0x0000370d
    2e50:	000031bd 	.word	0x000031bd
    2e54:	00003925 	.word	0x00003925

00002e58 <cdcdf_acm_ctrl>:
{
    2e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e5a:	46de      	mov	lr, fp
    2e5c:	4657      	mov	r7, sl
    2e5e:	464e      	mov	r6, r9
    2e60:	4645      	mov	r5, r8
    2e62:	b5e0      	push	{r5, r6, r7, lr}
    2e64:	b083      	sub	sp, #12
    2e66:	0016      	movs	r6, r2
	switch (ctrl) {
    2e68:	2901      	cmp	r1, #1
    2e6a:	d068      	beq.n	2f3e <cdcdf_acm_ctrl+0xe6>
    2e6c:	2900      	cmp	r1, #0
    2e6e:	d00b      	beq.n	2e88 <cdcdf_acm_ctrl+0x30>
    2e70:	2902      	cmp	r1, #2
    2e72:	d100      	bne.n	2e76 <cdcdf_acm_ctrl+0x1e>
    2e74:	e093      	b.n	2f9e <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    2e76:	200d      	movs	r0, #13
    2e78:	4240      	negs	r0, r0
}
    2e7a:	b003      	add	sp, #12
    2e7c:	bc3c      	pop	{r2, r3, r4, r5}
    2e7e:	4690      	mov	r8, r2
    2e80:	4699      	mov	r9, r3
    2e82:	46a2      	mov	sl, r4
    2e84:	46ab      	mov	fp, r5
    2e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2e88:	6883      	ldr	r3, [r0, #8]
    2e8a:	4698      	mov	r8, r3
	ifc = desc->sod;
    2e8c:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    2e8e:	2800      	cmp	r0, #0
    2e90:	d100      	bne.n	2e94 <cdcdf_acm_ctrl+0x3c>
    2e92:	e087      	b.n	2fa4 <cdcdf_acm_ctrl+0x14c>
    2e94:	9301      	str	r3, [sp, #4]
    2e96:	2301      	movs	r3, #1
    2e98:	4443      	add	r3, r8
    2e9a:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2e9c:	4f47      	ldr	r7, [pc, #284]	; (2fbc <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    2e9e:	4b48      	ldr	r3, [pc, #288]	; (2fc0 <cdcdf_acm_ctrl+0x168>)
    2ea0:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    2ea2:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    2ea4:	7943      	ldrb	r3, [r0, #5]
    2ea6:	2108      	movs	r1, #8
    2ea8:	438b      	bics	r3, r1
    2eaa:	2b02      	cmp	r3, #2
    2eac:	d002      	beq.n	2eb4 <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    2eae:	200a      	movs	r0, #10
    2eb0:	4240      	negs	r0, r0
    2eb2:	e7e2      	b.n	2e7a <cdcdf_acm_ctrl+0x22>
    2eb4:	9901      	ldr	r1, [sp, #4]
    2eb6:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    2eb8:	780b      	ldrb	r3, [r1, #0]
    2eba:	429a      	cmp	r2, r3
    2ebc:	d075      	beq.n	2faa <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    2ebe:	2bff      	cmp	r3, #255	; 0xff
    2ec0:	d176      	bne.n	2fb0 <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    2ec2:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    2ec4:	2205      	movs	r2, #5
    2ec6:	6871      	ldr	r1, [r6, #4]
    2ec8:	4b3e      	ldr	r3, [pc, #248]	; (2fc4 <cdcdf_acm_ctrl+0x16c>)
    2eca:	4798      	blx	r3
    2ecc:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    2ece:	d11e      	bne.n	2f0e <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    2ed0:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2ed2:	7803      	ldrb	r3, [r0, #0]
    2ed4:	18c0      	adds	r0, r0, r3
    2ed6:	2204      	movs	r2, #4
    2ed8:	6871      	ldr	r1, [r6, #4]
    2eda:	4b3a      	ldr	r3, [pc, #232]	; (2fc4 <cdcdf_acm_ctrl+0x16c>)
    2edc:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    2ede:	9b01      	ldr	r3, [sp, #4]
    2ee0:	455b      	cmp	r3, fp
    2ee2:	d027      	beq.n	2f34 <cdcdf_acm_ctrl+0xdc>
    2ee4:	9b01      	ldr	r3, [sp, #4]
    2ee6:	3301      	adds	r3, #1
    2ee8:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    2eea:	2800      	cmp	r0, #0
    2eec:	d1d9      	bne.n	2ea2 <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    2eee:	200a      	movs	r0, #10
    2ef0:	4240      	negs	r0, r0
    2ef2:	e7c2      	b.n	2e7a <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    2ef4:	4653      	mov	r3, sl
    2ef6:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    2ef8:	0028      	movs	r0, r5
    2efa:	4b31      	ldr	r3, [pc, #196]	; (2fc0 <cdcdf_acm_ctrl+0x168>)
    2efc:	4798      	blx	r3
			desc->sod = ep;
    2efe:	6034      	str	r4, [r6, #0]
    2f00:	7820      	ldrb	r0, [r4, #0]
    2f02:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2f04:	6871      	ldr	r1, [r6, #4]
    2f06:	4b30      	ldr	r3, [pc, #192]	; (2fc8 <cdcdf_acm_ctrl+0x170>)
    2f08:	4798      	blx	r3
    2f0a:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    2f0c:	d0e0      	beq.n	2ed0 <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    2f0e:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    2f10:	7963      	ldrb	r3, [r4, #5]
    2f12:	021b      	lsls	r3, r3, #8
    2f14:	7922      	ldrb	r2, [r4, #4]
    2f16:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2f18:	b292      	uxth	r2, r2
    2f1a:	78e1      	ldrb	r1, [r4, #3]
    2f1c:	0028      	movs	r0, r5
    2f1e:	47b8      	blx	r7
    2f20:	2800      	cmp	r0, #0
    2f22:	d148      	bne.n	2fb6 <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2f24:	b26b      	sxtb	r3, r5
    2f26:	2b00      	cmp	r3, #0
    2f28:	dbe4      	blt.n	2ef4 <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    2f2a:	4643      	mov	r3, r8
    2f2c:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    2f2e:	0028      	movs	r0, r5
    2f30:	47c8      	blx	r9
    2f32:	e7e4      	b.n	2efe <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    2f34:	2201      	movs	r2, #1
    2f36:	4b25      	ldr	r3, [pc, #148]	; (2fcc <cdcdf_acm_ctrl+0x174>)
    2f38:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    2f3a:	2000      	movs	r0, #0
    2f3c:	e79d      	b.n	2e7a <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2f3e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    2f40:	2a00      	cmp	r2, #0
    2f42:	d008      	beq.n	2f56 <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    2f44:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2f46:	795b      	ldrb	r3, [r3, #5]
    2f48:	2208      	movs	r2, #8
    2f4a:	4393      	bics	r3, r2
    2f4c:	2b02      	cmp	r3, #2
    2f4e:	d002      	beq.n	2f56 <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    2f50:	200a      	movs	r0, #10
    2f52:	4240      	negs	r0, r0
    2f54:	e791      	b.n	2e7a <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    2f56:	7823      	ldrb	r3, [r4, #0]
    2f58:	2bff      	cmp	r3, #255	; 0xff
    2f5a:	d008      	beq.n	2f6e <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    2f5c:	23ff      	movs	r3, #255	; 0xff
    2f5e:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    2f60:	78a0      	ldrb	r0, [r4, #2]
    2f62:	28ff      	cmp	r0, #255	; 0xff
    2f64:	d003      	beq.n	2f6e <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2f66:	4b1a      	ldr	r3, [pc, #104]	; (2fd0 <cdcdf_acm_ctrl+0x178>)
    2f68:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2f6a:	23ff      	movs	r3, #255	; 0xff
    2f6c:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    2f6e:	7863      	ldrb	r3, [r4, #1]
    2f70:	2bff      	cmp	r3, #255	; 0xff
    2f72:	d008      	beq.n	2f86 <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    2f74:	23ff      	movs	r3, #255	; 0xff
    2f76:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    2f78:	78e0      	ldrb	r0, [r4, #3]
    2f7a:	28ff      	cmp	r0, #255	; 0xff
    2f7c:	d003      	beq.n	2f86 <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2f7e:	4b14      	ldr	r3, [pc, #80]	; (2fd0 <cdcdf_acm_ctrl+0x178>)
    2f80:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2f82:	23ff      	movs	r3, #255	; 0xff
    2f84:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    2f86:	7920      	ldrb	r0, [r4, #4]
    2f88:	28ff      	cmp	r0, #255	; 0xff
    2f8a:	d003      	beq.n	2f94 <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    2f8c:	4b10      	ldr	r3, [pc, #64]	; (2fd0 <cdcdf_acm_ctrl+0x178>)
    2f8e:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    2f90:	23ff      	movs	r3, #255	; 0xff
    2f92:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    2f94:	2200      	movs	r2, #0
    2f96:	4b0d      	ldr	r3, [pc, #52]	; (2fcc <cdcdf_acm_ctrl+0x174>)
    2f98:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    2f9a:	2000      	movs	r0, #0
    2f9c:	e76d      	b.n	2e7a <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    2f9e:	201b      	movs	r0, #27
    2fa0:	4240      	negs	r0, r0
    2fa2:	e76a      	b.n	2e7a <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    2fa4:	200a      	movs	r0, #10
    2fa6:	4240      	negs	r0, r0
    2fa8:	e767      	b.n	2e7a <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    2faa:	2012      	movs	r0, #18
    2fac:	4240      	negs	r0, r0
    2fae:	e764      	b.n	2e7a <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    2fb0:	201c      	movs	r0, #28
    2fb2:	4240      	negs	r0, r0
    2fb4:	e761      	b.n	2e7a <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    2fb6:	2014      	movs	r0, #20
    2fb8:	4240      	negs	r0, r0
    2fba:	e75e      	b.n	2e7a <cdcdf_acm_ctrl+0x22>
    2fbc:	00000bc9 	.word	0x00000bc9
    2fc0:	00000c5d 	.word	0x00000c5d
    2fc4:	00003729 	.word	0x00003729
    2fc8:	0000375f 	.word	0x0000375f
    2fcc:	200003d8 	.word	0x200003d8
    2fd0:	00000c31 	.word	0x00000c31

00002fd4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2fd4:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    2fd6:	4b0a      	ldr	r3, [pc, #40]	; (3000 <cdcdf_acm_init+0x2c>)
    2fd8:	4798      	blx	r3
    2fda:	2801      	cmp	r0, #1
    2fdc:	d80c      	bhi.n	2ff8 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    2fde:	4809      	ldr	r0, [pc, #36]	; (3004 <cdcdf_acm_init+0x30>)
    2fe0:	4b09      	ldr	r3, [pc, #36]	; (3008 <cdcdf_acm_init+0x34>)
    2fe2:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2fe4:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    2fe6:	3018      	adds	r0, #24
    2fe8:	4b08      	ldr	r3, [pc, #32]	; (300c <cdcdf_acm_init+0x38>)
    2fea:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2fec:	4908      	ldr	r1, [pc, #32]	; (3010 <cdcdf_acm_init+0x3c>)
    2fee:	2001      	movs	r0, #1
    2ff0:	4b08      	ldr	r3, [pc, #32]	; (3014 <cdcdf_acm_init+0x40>)
    2ff2:	4798      	blx	r3
	return ERR_NONE;
    2ff4:	2000      	movs	r0, #0
}
    2ff6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2ff8:	2011      	movs	r0, #17
    2ffa:	4240      	negs	r0, r0
    2ffc:	e7fb      	b.n	2ff6 <cdcdf_acm_init+0x22>
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	00003719 	.word	0x00003719
    3004:	200003d8 	.word	0x200003d8
    3008:	00002e59 	.word	0x00002e59
    300c:	000036b1 	.word	0x000036b1
    3010:	20000068 	.word	0x20000068
    3014:	00003619 	.word	0x00003619

00003018 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    3018:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    301a:	4b06      	ldr	r3, [pc, #24]	; (3034 <usbdc_unconfig+0x1c>)
    301c:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    301e:	2c00      	cmp	r4, #0
    3020:	d007      	beq.n	3032 <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    3022:	2200      	movs	r2, #0
    3024:	2101      	movs	r1, #1
    3026:	0020      	movs	r0, r4
    3028:	6863      	ldr	r3, [r4, #4]
    302a:	4798      	blx	r3
		func = func->next;
    302c:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    302e:	2c00      	cmp	r4, #0
    3030:	d1f7      	bne.n	3022 <usbdc_unconfig+0xa>
	}
}
    3032:	bd10      	pop	{r4, pc}
    3034:	200003fc 	.word	0x200003fc

00003038 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    3038:	b570      	push	{r4, r5, r6, lr}
    303a:	0006      	movs	r6, r0
    303c:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    303e:	4b07      	ldr	r3, [pc, #28]	; (305c <usbdc_change_notify+0x24>)
    3040:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    3042:	2c00      	cmp	r4, #0
    3044:	d103      	bne.n	304e <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    3046:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    3048:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    304a:	2c00      	cmp	r4, #0
    304c:	d0fb      	beq.n	3046 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    304e:	6863      	ldr	r3, [r4, #4]
    3050:	2b00      	cmp	r3, #0
    3052:	d0f9      	beq.n	3048 <usbdc_change_notify+0x10>
			cg->cb(change, value);
    3054:	0029      	movs	r1, r5
    3056:	0030      	movs	r0, r6
    3058:	4798      	blx	r3
    305a:	e7f5      	b.n	3048 <usbdc_change_notify+0x10>
    305c:	200003fc 	.word	0x200003fc

00003060 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3062:	0007      	movs	r7, r0
    3064:	000e      	movs	r6, r1
    3066:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3068:	4b0d      	ldr	r3, [pc, #52]	; (30a0 <usbdc_request_handler+0x40>)
    306a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    306c:	2c00      	cmp	r4, #0
    306e:	d104      	bne.n	307a <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    3070:	2000      	movs	r0, #0
    3072:	e011      	b.n	3098 <usbdc_request_handler+0x38>
		h = h->next;
    3074:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    3076:	2c00      	cmp	r4, #0
    3078:	d00d      	beq.n	3096 <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    307a:	6863      	ldr	r3, [r4, #4]
    307c:	2b00      	cmp	r3, #0
    307e:	d0f9      	beq.n	3074 <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    3080:	002a      	movs	r2, r5
    3082:	0031      	movs	r1, r6
    3084:	0038      	movs	r0, r7
    3086:	4798      	blx	r3
			if (0 == rc) {
    3088:	2800      	cmp	r0, #0
    308a:	d006      	beq.n	309a <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    308c:	300a      	adds	r0, #10
    308e:	d0f1      	beq.n	3074 <usbdc_request_handler+0x14>
				return -1;
    3090:	2001      	movs	r0, #1
    3092:	4240      	negs	r0, r0
    3094:	e000      	b.n	3098 <usbdc_request_handler+0x38>
	return false;
    3096:	2000      	movs	r0, #0
}
    3098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    309a:	2001      	movs	r0, #1
    309c:	e7fc      	b.n	3098 <usbdc_request_handler+0x38>
    309e:	46c0      	nop			; (mov r8, r8)
    30a0:	200003fc 	.word	0x200003fc

000030a4 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    30a4:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    30a6:	4b06      	ldr	r3, [pc, #24]	; (30c0 <usbd_sof_cb+0x1c>)
    30a8:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    30aa:	2c00      	cmp	r4, #0
    30ac:	d103      	bne.n	30b6 <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    30ae:	bd10      	pop	{r4, pc}
		sof = sof->next;
    30b0:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    30b2:	2c00      	cmp	r4, #0
    30b4:	d0fb      	beq.n	30ae <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    30b6:	6863      	ldr	r3, [r4, #4]
    30b8:	2b00      	cmp	r3, #0
    30ba:	d0f9      	beq.n	30b0 <usbd_sof_cb+0xc>
			sof->cb();
    30bc:	4798      	blx	r3
    30be:	e7f7      	b.n	30b0 <usbd_sof_cb+0xc>
    30c0:	200003fc 	.word	0x200003fc

000030c4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    30c4:	b510      	push	{r4, lr}
    30c6:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    30c8:	2900      	cmp	r1, #0
    30ca:	d003      	beq.n	30d4 <usbdc_cb_ctl_done+0x10>
    30cc:	2901      	cmp	r1, #1
    30ce:	d029      	beq.n	3124 <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    30d0:	2000      	movs	r0, #0
    30d2:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    30d4:	7813      	ldrb	r3, [r2, #0]
    30d6:	2b00      	cmp	r3, #0
    30d8:	d1fa      	bne.n	30d0 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    30da:	7853      	ldrb	r3, [r2, #1]
    30dc:	2b05      	cmp	r3, #5
    30de:	d011      	beq.n	3104 <usbdc_cb_ctl_done+0x40>
    30e0:	2b09      	cmp	r3, #9
    30e2:	d1f5      	bne.n	30d0 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    30e4:	7892      	ldrb	r2, [r2, #2]
    30e6:	4b12      	ldr	r3, [pc, #72]	; (3130 <usbdc_cb_ctl_done+0x6c>)
    30e8:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    30ea:	78a3      	ldrb	r3, [r4, #2]
    30ec:	78e1      	ldrb	r1, [r4, #3]
    30ee:	0209      	lsls	r1, r1, #8
    30f0:	4319      	orrs	r1, r3
    30f2:	1e4b      	subs	r3, r1, #1
    30f4:	4199      	sbcs	r1, r3
    30f6:	3103      	adds	r1, #3
    30f8:	4b0d      	ldr	r3, [pc, #52]	; (3130 <usbdc_cb_ctl_done+0x6c>)
    30fa:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    30fc:	2001      	movs	r0, #1
    30fe:	4b0d      	ldr	r3, [pc, #52]	; (3134 <usbdc_cb_ctl_done+0x70>)
    3100:	4798      	blx	r3
    3102:	e7e5      	b.n	30d0 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    3104:	7890      	ldrb	r0, [r2, #2]
    3106:	4b0c      	ldr	r3, [pc, #48]	; (3138 <usbdc_cb_ctl_done+0x74>)
    3108:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    310a:	78a3      	ldrb	r3, [r4, #2]
    310c:	78e1      	ldrb	r1, [r4, #3]
    310e:	0209      	lsls	r1, r1, #8
    3110:	4319      	orrs	r1, r3
    3112:	1e4b      	subs	r3, r1, #1
    3114:	4199      	sbcs	r1, r3
    3116:	3102      	adds	r1, #2
    3118:	4b05      	ldr	r3, [pc, #20]	; (3130 <usbdc_cb_ctl_done+0x6c>)
    311a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    311c:	2001      	movs	r0, #1
    311e:	4b05      	ldr	r3, [pc, #20]	; (3134 <usbdc_cb_ctl_done+0x70>)
    3120:	4798      	blx	r3
    3122:	e7d5      	b.n	30d0 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    3124:	2201      	movs	r2, #1
    3126:	0021      	movs	r1, r4
    3128:	2000      	movs	r0, #0
    312a:	4b04      	ldr	r3, [pc, #16]	; (313c <usbdc_cb_ctl_done+0x78>)
    312c:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    312e:	e7cf      	b.n	30d0 <usbdc_cb_ctl_done+0xc>
    3130:	200003fc 	.word	0x200003fc
    3134:	00003039 	.word	0x00003039
    3138:	00000bbd 	.word	0x00000bbd
    313c:	00003061 	.word	0x00003061

00003140 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    3140:	b510      	push	{r4, lr}
	usbdc_unconfig();
    3142:	4b0d      	ldr	r3, [pc, #52]	; (3178 <usbdc_reset+0x38>)
    3144:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    3146:	4c0d      	ldr	r4, [pc, #52]	; (317c <usbdc_reset+0x3c>)
    3148:	2302      	movs	r3, #2
    314a:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    314c:	2300      	movs	r3, #0
    314e:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    3150:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    3152:	2000      	movs	r0, #0
    3154:	4b0a      	ldr	r3, [pc, #40]	; (3180 <usbdc_reset+0x40>)
    3156:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    3158:	7f20      	ldrb	r0, [r4, #28]
    315a:	4b0a      	ldr	r3, [pc, #40]	; (3184 <usbdc_reset+0x44>)
    315c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    315e:	4a0a      	ldr	r2, [pc, #40]	; (3188 <usbdc_reset+0x48>)
    3160:	2100      	movs	r1, #0
    3162:	2000      	movs	r0, #0
    3164:	4c09      	ldr	r4, [pc, #36]	; (318c <usbdc_reset+0x4c>)
    3166:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3168:	4a09      	ldr	r2, [pc, #36]	; (3190 <usbdc_reset+0x50>)
    316a:	2102      	movs	r1, #2
    316c:	2000      	movs	r0, #0
    316e:	47a0      	blx	r4
	usb_d_ep_enable(0);
    3170:	2000      	movs	r0, #0
    3172:	4b08      	ldr	r3, [pc, #32]	; (3194 <usbdc_reset+0x54>)
    3174:	4798      	blx	r3
}
    3176:	bd10      	pop	{r4, pc}
    3178:	00003019 	.word	0x00003019
    317c:	200003fc 	.word	0x200003fc
    3180:	00000c31 	.word	0x00000c31
    3184:	00000c1d 	.word	0x00000c1d
    3188:	000031d9 	.word	0x000031d9
    318c:	00000e39 	.word	0x00000e39
    3190:	000030c5 	.word	0x000030c5
    3194:	00000c5d 	.word	0x00000c5d

00003198 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    3198:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    319a:	2800      	cmp	r0, #0
    319c:	d002      	beq.n	31a4 <usbd_event_cb+0xc>
    319e:	2801      	cmp	r0, #1
    31a0:	d004      	beq.n	31ac <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    31a2:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    31a4:	2000      	movs	r0, #0
    31a6:	4b03      	ldr	r3, [pc, #12]	; (31b4 <usbd_event_cb+0x1c>)
    31a8:	4798      	blx	r3
		break;
    31aa:	e7fa      	b.n	31a2 <usbd_event_cb+0xa>
		usbdc_reset();
    31ac:	4b02      	ldr	r3, [pc, #8]	; (31b8 <usbd_event_cb+0x20>)
    31ae:	4798      	blx	r3
}
    31b0:	e7f7      	b.n	31a2 <usbd_event_cb+0xa>
    31b2:	46c0      	nop			; (mov r8, r8)
    31b4:	00003039 	.word	0x00003039
    31b8:	00003141 	.word	0x00003141

000031bc <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    31bc:	b510      	push	{r4, lr}
    31be:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    31c0:	ac01      	add	r4, sp, #4
    31c2:	9101      	str	r1, [sp, #4]
    31c4:	9202      	str	r2, [sp, #8]
    31c6:	7220      	strb	r0, [r4, #8]
    31c8:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    31ca:	0020      	movs	r0, r4
    31cc:	4b01      	ldr	r3, [pc, #4]	; (31d4 <usbdc_xfer+0x18>)
    31ce:	4798      	blx	r3
}
    31d0:	b004      	add	sp, #16
    31d2:	bd10      	pop	{r4, pc}
    31d4:	00000ca9 	.word	0x00000ca9

000031d8 <usbdc_cb_ctl_req>:
{
    31d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31da:	46c6      	mov	lr, r8
    31dc:	b500      	push	{lr}
    31de:	b084      	sub	sp, #16
    31e0:	0005      	movs	r5, r0
    31e2:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    31e4:	2200      	movs	r2, #0
    31e6:	4bb5      	ldr	r3, [pc, #724]	; (34bc <usbdc_cb_ctl_req+0x2e4>)
    31e8:	4798      	blx	r3
    31ea:	1c43      	adds	r3, r0, #1
    31ec:	d00d      	beq.n	320a <usbdc_cb_ctl_req+0x32>
		return true;
    31ee:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    31f0:	2801      	cmp	r0, #1
    31f2:	d00b      	beq.n	320c <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    31f4:	7822      	ldrb	r2, [r4, #0]
    31f6:	231f      	movs	r3, #31
    31f8:	0011      	movs	r1, r2
    31fa:	4399      	bics	r1, r3
    31fc:	d00b      	beq.n	3216 <usbdc_cb_ctl_req+0x3e>
    31fe:	b2cb      	uxtb	r3, r1
    3200:	2b80      	cmp	r3, #128	; 0x80
    3202:	d100      	bne.n	3206 <usbdc_cb_ctl_req+0x2e>
    3204:	e0f8      	b.n	33f8 <usbdc_cb_ctl_req+0x220>
		return false;
    3206:	2300      	movs	r3, #0
    3208:	e000      	b.n	320c <usbdc_cb_ctl_req+0x34>
		return false;
    320a:	2300      	movs	r3, #0
}
    320c:	0018      	movs	r0, r3
    320e:	b004      	add	sp, #16
    3210:	bc04      	pop	{r2}
    3212:	4690      	mov	r8, r2
    3214:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    3216:	7863      	ldrb	r3, [r4, #1]
    3218:	2b0b      	cmp	r3, #11
    321a:	d900      	bls.n	321e <usbdc_cb_ctl_req+0x46>
    321c:	e1e4      	b.n	35e8 <usbdc_cb_ctl_req+0x410>
    321e:	009b      	lsls	r3, r3, #2
    3220:	49a7      	ldr	r1, [pc, #668]	; (34c0 <usbdc_cb_ctl_req+0x2e8>)
    3222:	58cb      	ldr	r3, [r1, r3]
    3224:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3226:	2301      	movs	r3, #1
    3228:	2200      	movs	r2, #0
    322a:	2100      	movs	r1, #0
    322c:	0028      	movs	r0, r5
    322e:	4ca5      	ldr	r4, [pc, #660]	; (34c4 <usbdc_cb_ctl_req+0x2ec>)
    3230:	47a0      	blx	r4
    3232:	4243      	negs	r3, r0
    3234:	4143      	adcs	r3, r0
    3236:	b2db      	uxtb	r3, r3
    3238:	e7e8      	b.n	320c <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    323a:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    323c:	2a00      	cmp	r2, #0
    323e:	d01a      	beq.n	3276 <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    3240:	4ba1      	ldr	r3, [pc, #644]	; (34c8 <usbdc_cb_ctl_req+0x2f0>)
    3242:	681b      	ldr	r3, [r3, #0]
    3244:	6859      	ldr	r1, [r3, #4]
    3246:	6818      	ldr	r0, [r3, #0]
    3248:	4ba0      	ldr	r3, [pc, #640]	; (34cc <usbdc_cb_ctl_req+0x2f4>)
    324a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    324c:	2800      	cmp	r0, #0
    324e:	d100      	bne.n	3252 <usbdc_cb_ctl_req+0x7a>
    3250:	e1d4      	b.n	35fc <usbdc_cb_ctl_req+0x424>
    3252:	78c3      	ldrb	r3, [r0, #3]
    3254:	021b      	lsls	r3, r3, #8
    3256:	7881      	ldrb	r1, [r0, #2]
    3258:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    325a:	b289      	uxth	r1, r1
    325c:	1841      	adds	r1, r0, r1
    325e:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3260:	2204      	movs	r2, #4
    3262:	4b9b      	ldr	r3, [pc, #620]	; (34d0 <usbdc_cb_ctl_req+0x2f8>)
    3264:	4798      	blx	r3
    3266:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    3268:	2800      	cmp	r0, #0
    326a:	d006      	beq.n	327a <usbdc_cb_ctl_req+0xa2>
    326c:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    326e:	4f96      	ldr	r7, [pc, #600]	; (34c8 <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3270:	4b97      	ldr	r3, [pc, #604]	; (34d0 <usbdc_cb_ctl_req+0x2f8>)
    3272:	4698      	mov	r8, r3
    3274:	e01a      	b.n	32ac <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    3276:	4b97      	ldr	r3, [pc, #604]	; (34d4 <usbdc_cb_ctl_req+0x2fc>)
    3278:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    327a:	2301      	movs	r3, #1
    327c:	2200      	movs	r2, #0
    327e:	2100      	movs	r1, #0
    3280:	0028      	movs	r0, r5
    3282:	4c90      	ldr	r4, [pc, #576]	; (34c4 <usbdc_cb_ctl_req+0x2ec>)
    3284:	47a0      	blx	r4
    3286:	4243      	negs	r3, r0
    3288:	4143      	adcs	r3, r0
    328a:	b2db      	uxtb	r3, r3
    328c:	e7be      	b.n	320c <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    328e:	0034      	movs	r4, r6
    3290:	e000      	b.n	3294 <usbdc_cb_ctl_req+0xbc>
    3292:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    3294:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    3296:	7803      	ldrb	r3, [r0, #0]
    3298:	18c0      	adds	r0, r0, r3
    329a:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    329c:	9b03      	ldr	r3, [sp, #12]
    329e:	9301      	str	r3, [sp, #4]
    32a0:	2204      	movs	r2, #4
    32a2:	0019      	movs	r1, r3
    32a4:	47c0      	blx	r8
    32a6:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    32a8:	2800      	cmp	r0, #0
    32aa:	d0e6      	beq.n	327a <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    32ac:	7886      	ldrb	r6, [r0, #2]
    32ae:	42a6      	cmp	r6, r4
    32b0:	d0f0      	beq.n	3294 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    32b2:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    32b4:	2c00      	cmp	r4, #0
    32b6:	d0ea      	beq.n	328e <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    32b8:	aa02      	add	r2, sp, #8
    32ba:	2100      	movs	r1, #0
    32bc:	0020      	movs	r0, r4
    32be:	6863      	ldr	r3, [r4, #4]
    32c0:	4798      	blx	r3
    32c2:	2800      	cmp	r0, #0
    32c4:	d0e5      	beq.n	3292 <usbdc_cb_ctl_req+0xba>
					func = func->next;
    32c6:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    32c8:	2c00      	cmp	r4, #0
    32ca:	d1f5      	bne.n	32b8 <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    32cc:	0034      	movs	r4, r6
    32ce:	e7e1      	b.n	3294 <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    32d0:	231f      	movs	r3, #31
    32d2:	401a      	ands	r2, r3
		return false;
    32d4:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    32d6:	2a02      	cmp	r2, #2
    32d8:	d198      	bne.n	320c <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    32da:	79a3      	ldrb	r3, [r4, #6]
    32dc:	79e2      	ldrb	r2, [r4, #7]
    32de:	0212      	lsls	r2, r2, #8
    32e0:	431a      	orrs	r2, r3
			return false;
    32e2:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    32e4:	2a00      	cmp	r2, #0
    32e6:	d000      	beq.n	32ea <usbdc_cb_ctl_req+0x112>
    32e8:	e790      	b.n	320c <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    32ea:	7920      	ldrb	r0, [r4, #4]
    32ec:	2100      	movs	r1, #0
    32ee:	4b7a      	ldr	r3, [pc, #488]	; (34d8 <usbdc_cb_ctl_req+0x300>)
    32f0:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    32f2:	2301      	movs	r3, #1
    32f4:	2200      	movs	r2, #0
    32f6:	2100      	movs	r1, #0
    32f8:	0028      	movs	r0, r5
    32fa:	4c72      	ldr	r4, [pc, #456]	; (34c4 <usbdc_cb_ctl_req+0x2ec>)
    32fc:	47a0      	blx	r4
		return true;
    32fe:	2301      	movs	r3, #1
    3300:	e784      	b.n	320c <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3302:	231f      	movs	r3, #31
    3304:	401a      	ands	r2, r3
		return false;
    3306:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3308:	2a02      	cmp	r2, #2
    330a:	d000      	beq.n	330e <usbdc_cb_ctl_req+0x136>
    330c:	e77e      	b.n	320c <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    330e:	79a3      	ldrb	r3, [r4, #6]
    3310:	79e2      	ldrb	r2, [r4, #7]
    3312:	0212      	lsls	r2, r2, #8
    3314:	431a      	orrs	r2, r3
			return false;
    3316:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    3318:	2a00      	cmp	r2, #0
    331a:	d000      	beq.n	331e <usbdc_cb_ctl_req+0x146>
    331c:	e776      	b.n	320c <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    331e:	7920      	ldrb	r0, [r4, #4]
    3320:	2101      	movs	r1, #1
    3322:	4b6d      	ldr	r3, [pc, #436]	; (34d8 <usbdc_cb_ctl_req+0x300>)
    3324:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3326:	2301      	movs	r3, #1
    3328:	2200      	movs	r2, #0
    332a:	2100      	movs	r1, #0
    332c:	0028      	movs	r0, r5
    332e:	4c65      	ldr	r4, [pc, #404]	; (34c4 <usbdc_cb_ctl_req+0x2ec>)
    3330:	47a0      	blx	r4
		return true;
    3332:	2301      	movs	r3, #1
    3334:	e76a      	b.n	320c <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    3336:	78a3      	ldrb	r3, [r4, #2]
    3338:	78e5      	ldrb	r5, [r4, #3]
    333a:	022d      	lsls	r5, r5, #8
    333c:	431d      	orrs	r5, r3
    333e:	7923      	ldrb	r3, [r4, #4]
    3340:	7964      	ldrb	r4, [r4, #5]
    3342:	0224      	lsls	r4, r4, #8
    3344:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    3346:	4a60      	ldr	r2, [pc, #384]	; (34c8 <usbdc_cb_ctl_req+0x2f0>)
    3348:	6813      	ldr	r3, [r2, #0]
    334a:	7ed2      	ldrb	r2, [r2, #27]
    334c:	6859      	ldr	r1, [r3, #4]
    334e:	6818      	ldr	r0, [r3, #0]
    3350:	4b5e      	ldr	r3, [pc, #376]	; (34cc <usbdc_cb_ctl_req+0x2f4>)
    3352:	4798      	blx	r3
	if (NULL == ifc) {
    3354:	2800      	cmp	r0, #0
    3356:	d047      	beq.n	33e8 <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    3358:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    335a:	78c3      	ldrb	r3, [r0, #3]
    335c:	021b      	lsls	r3, r3, #8
    335e:	7881      	ldrb	r1, [r0, #2]
    3360:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3362:	b289      	uxth	r1, r1
    3364:	1841      	adds	r1, r0, r1
    3366:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    3368:	2204      	movs	r2, #4
    336a:	4b59      	ldr	r3, [pc, #356]	; (34d0 <usbdc_cb_ctl_req+0x2f8>)
    336c:	4798      	blx	r3
    336e:	2800      	cmp	r0, #0
    3370:	d03c      	beq.n	33ec <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3372:	4e57      	ldr	r6, [pc, #348]	; (34d0 <usbdc_cb_ctl_req+0x2f8>)
    3374:	e008      	b.n	3388 <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    3376:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    3378:	7803      	ldrb	r3, [r0, #0]
    337a:	18c0      	adds	r0, r0, r3
    337c:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    337e:	2204      	movs	r2, #4
    3380:	9903      	ldr	r1, [sp, #12]
    3382:	47b0      	blx	r6
		if (NULL == ifc) {
    3384:	2800      	cmp	r0, #0
    3386:	d033      	beq.n	33f0 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    3388:	7883      	ldrb	r3, [r0, #2]
    338a:	42a3      	cmp	r3, r4
    338c:	d1f3      	bne.n	3376 <usbdc_cb_ctl_req+0x19e>
    338e:	78c3      	ldrb	r3, [r0, #3]
    3390:	42ab      	cmp	r3, r5
    3392:	d1f0      	bne.n	3376 <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    3394:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    3396:	4b4c      	ldr	r3, [pc, #304]	; (34c8 <usbdc_cb_ctl_req+0x2f0>)
    3398:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    339a:	2e00      	cmp	r6, #0
    339c:	d02a      	beq.n	33f4 <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    339e:	aa02      	add	r2, sp, #8
    33a0:	2101      	movs	r1, #1
    33a2:	0030      	movs	r0, r6
    33a4:	6873      	ldr	r3, [r6, #4]
    33a6:	4798      	blx	r3
    33a8:	2800      	cmp	r0, #0
    33aa:	d004      	beq.n	33b6 <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    33ac:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    33ae:	2e00      	cmp	r6, #0
    33b0:	d1f5      	bne.n	339e <usbdc_cb_ctl_req+0x1c6>
	return false;
    33b2:	2300      	movs	r3, #0
    33b4:	e72a      	b.n	320c <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    33b6:	6873      	ldr	r3, [r6, #4]
    33b8:	aa02      	add	r2, sp, #8
    33ba:	2100      	movs	r1, #0
    33bc:	0030      	movs	r0, r6
    33be:	4798      	blx	r3
			return false;
    33c0:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    33c2:	2800      	cmp	r0, #0
    33c4:	d000      	beq.n	33c8 <usbdc_cb_ctl_req+0x1f0>
    33c6:	e721      	b.n	320c <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    33c8:	2d00      	cmp	r5, #0
    33ca:	d005      	beq.n	33d8 <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    33cc:	493e      	ldr	r1, [pc, #248]	; (34c8 <usbdc_cb_ctl_req+0x2f0>)
    33ce:	2201      	movs	r2, #1
    33d0:	40a2      	lsls	r2, r4
    33d2:	7f4b      	ldrb	r3, [r1, #29]
    33d4:	4313      	orrs	r3, r2
    33d6:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    33d8:	2300      	movs	r3, #0
    33da:	2200      	movs	r2, #0
    33dc:	2100      	movs	r1, #0
    33de:	2000      	movs	r0, #0
    33e0:	4c38      	ldr	r4, [pc, #224]	; (34c4 <usbdc_cb_ctl_req+0x2ec>)
    33e2:	47a0      	blx	r4
			return true;
    33e4:	2301      	movs	r3, #1
    33e6:	e711      	b.n	320c <usbdc_cb_ctl_req+0x34>
		return false;
    33e8:	2300      	movs	r3, #0
    33ea:	e70f      	b.n	320c <usbdc_cb_ctl_req+0x34>
		return false;
    33ec:	2300      	movs	r3, #0
    33ee:	e70d      	b.n	320c <usbdc_cb_ctl_req+0x34>
			return false;
    33f0:	2300      	movs	r3, #0
    33f2:	e70b      	b.n	320c <usbdc_cb_ctl_req+0x34>
	return false;
    33f4:	2300      	movs	r3, #0
    33f6:	e709      	b.n	320c <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    33f8:	7863      	ldrb	r3, [r4, #1]
    33fa:	2b06      	cmp	r3, #6
    33fc:	d033      	beq.n	3466 <usbdc_cb_ctl_req+0x28e>
    33fe:	b2d9      	uxtb	r1, r3
    3400:	2906      	cmp	r1, #6
    3402:	d922      	bls.n	344a <usbdc_cb_ctl_req+0x272>
    3404:	2b08      	cmp	r3, #8
    3406:	d100      	bne.n	340a <usbdc_cb_ctl_req+0x232>
    3408:	e0af      	b.n	356a <usbdc_cb_ctl_req+0x392>
    340a:	2b0a      	cmp	r3, #10
    340c:	d000      	beq.n	3410 <usbdc_cb_ctl_req+0x238>
    340e:	e0ed      	b.n	35ec <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    3410:	4b2d      	ldr	r3, [pc, #180]	; (34c8 <usbdc_cb_ctl_req+0x2f0>)
    3412:	7f5a      	ldrb	r2, [r3, #29]
    3414:	7921      	ldrb	r1, [r4, #4]
    3416:	7963      	ldrb	r3, [r4, #5]
    3418:	021b      	lsls	r3, r3, #8
    341a:	430b      	orrs	r3, r1
    341c:	411a      	asrs	r2, r3
    341e:	07d3      	lsls	r3, r2, #31
    3420:	d400      	bmi.n	3424 <usbdc_cb_ctl_req+0x24c>
    3422:	e0ca      	b.n	35ba <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3424:	4b28      	ldr	r3, [pc, #160]	; (34c8 <usbdc_cb_ctl_req+0x2f0>)
    3426:	691d      	ldr	r5, [r3, #16]
	return false;
    3428:	2300      	movs	r3, #0
	while (NULL != func) {
    342a:	2d00      	cmp	r5, #0
    342c:	d100      	bne.n	3430 <usbdc_cb_ctl_req+0x258>
    342e:	e6ed      	b.n	320c <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    3430:	0022      	movs	r2, r4
    3432:	2102      	movs	r1, #2
    3434:	0028      	movs	r0, r5
    3436:	686b      	ldr	r3, [r5, #4]
    3438:	4798      	blx	r3
    343a:	2800      	cmp	r0, #0
    343c:	db00      	blt.n	3440 <usbdc_cb_ctl_req+0x268>
    343e:	e0c8      	b.n	35d2 <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    3440:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    3442:	2d00      	cmp	r5, #0
    3444:	d1f4      	bne.n	3430 <usbdc_cb_ctl_req+0x258>
	return false;
    3446:	2300      	movs	r3, #0
    3448:	e6e0      	b.n	320c <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    344a:	2b00      	cmp	r3, #0
    344c:	d000      	beq.n	3450 <usbdc_cb_ctl_req+0x278>
    344e:	e0cd      	b.n	35ec <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3450:	231f      	movs	r3, #31
    3452:	401a      	ands	r2, r3
    3454:	b2d3      	uxtb	r3, r2
    3456:	2b01      	cmp	r3, #1
    3458:	d800      	bhi.n	345c <usbdc_cb_ctl_req+0x284>
    345a:	e092      	b.n	3582 <usbdc_cb_ctl_req+0x3aa>
    345c:	2a02      	cmp	r2, #2
    345e:	d100      	bne.n	3462 <usbdc_cb_ctl_req+0x28a>
    3460:	e09f      	b.n	35a2 <usbdc_cb_ctl_req+0x3ca>
		return false;
    3462:	2300      	movs	r3, #0
    3464:	e6d2      	b.n	320c <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    3466:	78a3      	ldrb	r3, [r4, #2]
    3468:	78e2      	ldrb	r2, [r4, #3]
    346a:	0212      	lsls	r2, r2, #8
    346c:	431a      	orrs	r2, r3
    346e:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    3470:	2b02      	cmp	r3, #2
    3472:	d033      	beq.n	34dc <usbdc_cb_ctl_req+0x304>
    3474:	2b03      	cmp	r3, #3
    3476:	d056      	beq.n	3526 <usbdc_cb_ctl_req+0x34e>
    3478:	2b01      	cmp	r3, #1
    347a:	d001      	beq.n	3480 <usbdc_cb_ctl_req+0x2a8>
	return false;
    347c:	2300      	movs	r3, #0
    347e:	e6c5      	b.n	320c <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    3480:	79a2      	ldrb	r2, [r4, #6]
    3482:	79e3      	ldrb	r3, [r4, #7]
    3484:	021b      	lsls	r3, r3, #8
    3486:	4313      	orrs	r3, r2
    3488:	1c1a      	adds	r2, r3, #0
    348a:	2b12      	cmp	r3, #18
    348c:	d900      	bls.n	3490 <usbdc_cb_ctl_req+0x2b8>
    348e:	2212      	movs	r2, #18
    3490:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    3492:	4b0d      	ldr	r3, [pc, #52]	; (34c8 <usbdc_cb_ctl_req+0x2f0>)
    3494:	681b      	ldr	r3, [r3, #0]
    3496:	6859      	ldr	r1, [r3, #4]
    3498:	6818      	ldr	r0, [r3, #0]
    349a:	2201      	movs	r2, #1
    349c:	4b0c      	ldr	r3, [pc, #48]	; (34d0 <usbdc_cb_ctl_req+0x2f8>)
    349e:	4798      	blx	r3
	if (!dev_desc) {
    34a0:	2800      	cmp	r0, #0
    34a2:	d100      	bne.n	34a6 <usbdc_cb_ctl_req+0x2ce>
    34a4:	e0a4      	b.n	35f0 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    34a6:	2300      	movs	r3, #0
    34a8:	0022      	movs	r2, r4
    34aa:	0001      	movs	r1, r0
    34ac:	0028      	movs	r0, r5
    34ae:	4c05      	ldr	r4, [pc, #20]	; (34c4 <usbdc_cb_ctl_req+0x2ec>)
    34b0:	47a0      	blx	r4
    34b2:	4243      	negs	r3, r0
    34b4:	4143      	adcs	r3, r0
    34b6:	b2db      	uxtb	r3, r3
    34b8:	e6a8      	b.n	320c <usbdc_cb_ctl_req+0x34>
    34ba:	46c0      	nop			; (mov r8, r8)
    34bc:	00003061 	.word	0x00003061
    34c0:	0000427c 	.word	0x0000427c
    34c4:	000031bd 	.word	0x000031bd
    34c8:	200003fc 	.word	0x200003fc
    34cc:	000037a5 	.word	0x000037a5
    34d0:	00003729 	.word	0x00003729
    34d4:	00003019 	.word	0x00003019
    34d8:	00000dd1 	.word	0x00000dd1
	uint16_t length   = req->wLength;
    34dc:	79a3      	ldrb	r3, [r4, #6]
    34de:	79e6      	ldrb	r6, [r4, #7]
    34e0:	0236      	lsls	r6, r6, #8
    34e2:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    34e4:	4b46      	ldr	r3, [pc, #280]	; (3600 <usbdc_cb_ctl_req+0x428>)
    34e6:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    34e8:	681b      	ldr	r3, [r3, #0]
    34ea:	3201      	adds	r2, #1
    34ec:	b2d2      	uxtb	r2, r2
    34ee:	6859      	ldr	r1, [r3, #4]
    34f0:	6818      	ldr	r0, [r3, #0]
    34f2:	4b44      	ldr	r3, [pc, #272]	; (3604 <usbdc_cb_ctl_req+0x42c>)
    34f4:	4798      	blx	r3
    34f6:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    34f8:	d07c      	beq.n	35f4 <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    34fa:	78c3      	ldrb	r3, [r0, #3]
    34fc:	021b      	lsls	r3, r3, #8
    34fe:	7884      	ldrb	r4, [r0, #2]
    3500:	18e4      	adds	r4, r4, r3
    3502:	b2a4      	uxth	r4, r4
		need_zlp = false;
    3504:	2300      	movs	r3, #0
	if (length <= total_len) {
    3506:	42a6      	cmp	r6, r4
    3508:	d905      	bls.n	3516 <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    350a:	3f01      	subs	r7, #1
    350c:	403e      	ands	r6, r7
    350e:	4273      	negs	r3, r6
    3510:	4173      	adcs	r3, r6
    3512:	b2db      	uxtb	r3, r3
		length = total_len;
    3514:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    3516:	0032      	movs	r2, r6
    3518:	0028      	movs	r0, r5
    351a:	4c3b      	ldr	r4, [pc, #236]	; (3608 <usbdc_cb_ctl_req+0x430>)
    351c:	47a0      	blx	r4
    351e:	4243      	negs	r3, r0
    3520:	4143      	adcs	r3, r0
    3522:	b2db      	uxtb	r3, r3
    3524:	e672      	b.n	320c <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    3526:	79a3      	ldrb	r3, [r4, #6]
    3528:	79e1      	ldrb	r1, [r4, #7]
    352a:	0209      	lsls	r1, r1, #8
    352c:	4319      	orrs	r1, r3
    352e:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3530:	4b33      	ldr	r3, [pc, #204]	; (3600 <usbdc_cb_ctl_req+0x428>)
    3532:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    3534:	681b      	ldr	r3, [r3, #0]
    3536:	b2d2      	uxtb	r2, r2
    3538:	6859      	ldr	r1, [r3, #4]
    353a:	6818      	ldr	r0, [r3, #0]
    353c:	4b33      	ldr	r3, [pc, #204]	; (360c <usbdc_cb_ctl_req+0x434>)
    353e:	4798      	blx	r3
    3540:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    3542:	d059      	beq.n	35f8 <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    3544:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    3546:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    3548:	4294      	cmp	r4, r2
    354a:	d906      	bls.n	355a <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    354c:	1e73      	subs	r3, r6, #1
    354e:	4023      	ands	r3, r4
    3550:	0018      	movs	r0, r3
    3552:	4243      	negs	r3, r0
    3554:	4143      	adcs	r3, r0
    3556:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    3558:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    355a:	0022      	movs	r2, r4
    355c:	0028      	movs	r0, r5
    355e:	4c2a      	ldr	r4, [pc, #168]	; (3608 <usbdc_cb_ctl_req+0x430>)
    3560:	47a0      	blx	r4
    3562:	4243      	negs	r3, r0
    3564:	4143      	adcs	r3, r0
    3566:	b2db      	uxtb	r3, r3
    3568:	e650      	b.n	320c <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    356a:	4b25      	ldr	r3, [pc, #148]	; (3600 <usbdc_cb_ctl_req+0x428>)
    356c:	7eda      	ldrb	r2, [r3, #27]
    356e:	6959      	ldr	r1, [r3, #20]
    3570:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    3572:	6959      	ldr	r1, [r3, #20]
    3574:	2300      	movs	r3, #0
    3576:	2201      	movs	r2, #1
    3578:	0028      	movs	r0, r5
    357a:	4c23      	ldr	r4, [pc, #140]	; (3608 <usbdc_cb_ctl_req+0x430>)
    357c:	47a0      	blx	r4
		return true;
    357e:	2301      	movs	r3, #1
    3580:	e644      	b.n	320c <usbdc_cb_ctl_req+0x34>
		st = 0;
    3582:	2300      	movs	r3, #0
    3584:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    3586:	4c1e      	ldr	r4, [pc, #120]	; (3600 <usbdc_cb_ctl_req+0x428>)
    3588:	2202      	movs	r2, #2
    358a:	a902      	add	r1, sp, #8
    358c:	6960      	ldr	r0, [r4, #20]
    358e:	4b20      	ldr	r3, [pc, #128]	; (3610 <usbdc_cb_ctl_req+0x438>)
    3590:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    3592:	6961      	ldr	r1, [r4, #20]
    3594:	2300      	movs	r3, #0
    3596:	2202      	movs	r2, #2
    3598:	0028      	movs	r0, r5
    359a:	4c1b      	ldr	r4, [pc, #108]	; (3608 <usbdc_cb_ctl_req+0x430>)
    359c:	47a0      	blx	r4
	return true;
    359e:	2301      	movs	r3, #1
    35a0:	e634      	b.n	320c <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    35a2:	7920      	ldrb	r0, [r4, #4]
    35a4:	2102      	movs	r1, #2
    35a6:	4b1b      	ldr	r3, [pc, #108]	; (3614 <usbdc_cb_ctl_req+0x43c>)
    35a8:	4798      	blx	r3
		if (st < 0) {
    35aa:	2800      	cmp	r0, #0
    35ac:	db03      	blt.n	35b6 <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    35ae:	2301      	movs	r3, #1
    35b0:	4018      	ands	r0, r3
    35b2:	9002      	str	r0, [sp, #8]
    35b4:	e7e7      	b.n	3586 <usbdc_cb_ctl_req+0x3ae>
			return false;
    35b6:	2300      	movs	r3, #0
    35b8:	e628      	b.n	320c <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    35ba:	4b11      	ldr	r3, [pc, #68]	; (3600 <usbdc_cb_ctl_req+0x428>)
    35bc:	2200      	movs	r2, #0
    35be:	6959      	ldr	r1, [r3, #20]
    35c0:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    35c2:	6959      	ldr	r1, [r3, #20]
    35c4:	2300      	movs	r3, #0
    35c6:	3201      	adds	r2, #1
    35c8:	2000      	movs	r0, #0
    35ca:	4c0f      	ldr	r4, [pc, #60]	; (3608 <usbdc_cb_ctl_req+0x430>)
    35cc:	47a0      	blx	r4
		return true;
    35ce:	2301      	movs	r3, #1
    35d0:	e61c      	b.n	320c <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    35d2:	4b0b      	ldr	r3, [pc, #44]	; (3600 <usbdc_cb_ctl_req+0x428>)
    35d4:	695a      	ldr	r2, [r3, #20]
    35d6:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    35d8:	6959      	ldr	r1, [r3, #20]
    35da:	2300      	movs	r3, #0
    35dc:	2201      	movs	r2, #1
    35de:	2000      	movs	r0, #0
    35e0:	4c09      	ldr	r4, [pc, #36]	; (3608 <usbdc_cb_ctl_req+0x430>)
    35e2:	47a0      	blx	r4
			return true;
    35e4:	2301      	movs	r3, #1
    35e6:	e611      	b.n	320c <usbdc_cb_ctl_req+0x34>
		return false;
    35e8:	2300      	movs	r3, #0
    35ea:	e60f      	b.n	320c <usbdc_cb_ctl_req+0x34>
		return false;
    35ec:	2300      	movs	r3, #0
    35ee:	e60d      	b.n	320c <usbdc_cb_ctl_req+0x34>
		return false;
    35f0:	2300      	movs	r3, #0
    35f2:	e60b      	b.n	320c <usbdc_cb_ctl_req+0x34>
		return false;
    35f4:	2300      	movs	r3, #0
    35f6:	e609      	b.n	320c <usbdc_cb_ctl_req+0x34>
		return false;
    35f8:	2300      	movs	r3, #0
    35fa:	e607      	b.n	320c <usbdc_cb_ctl_req+0x34>
			return false;
    35fc:	2300      	movs	r3, #0
    35fe:	e605      	b.n	320c <usbdc_cb_ctl_req+0x34>
    3600:	200003fc 	.word	0x200003fc
    3604:	000037a5 	.word	0x000037a5
    3608:	000031bd 	.word	0x000031bd
    360c:	0000380d 	.word	0x0000380d
    3610:	00003925 	.word	0x00003925
    3614:	00000dd1 	.word	0x00000dd1

00003618 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    3618:	b510      	push	{r4, lr}
	switch (type) {
    361a:	2801      	cmp	r0, #1
    361c:	d009      	beq.n	3632 <usbdc_register_handler+0x1a>
    361e:	2800      	cmp	r0, #0
    3620:	d002      	beq.n	3628 <usbdc_register_handler+0x10>
    3622:	2802      	cmp	r0, #2
    3624:	d00a      	beq.n	363c <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    3626:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    3628:	4807      	ldr	r0, [pc, #28]	; (3648 <usbdc_register_handler+0x30>)
    362a:	3004      	adds	r0, #4
    362c:	4b07      	ldr	r3, [pc, #28]	; (364c <usbdc_register_handler+0x34>)
    362e:	4798      	blx	r3
		break;
    3630:	e7f9      	b.n	3626 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    3632:	4805      	ldr	r0, [pc, #20]	; (3648 <usbdc_register_handler+0x30>)
    3634:	3008      	adds	r0, #8
    3636:	4b05      	ldr	r3, [pc, #20]	; (364c <usbdc_register_handler+0x34>)
    3638:	4798      	blx	r3
		break;
    363a:	e7f4      	b.n	3626 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    363c:	4802      	ldr	r0, [pc, #8]	; (3648 <usbdc_register_handler+0x30>)
    363e:	300c      	adds	r0, #12
    3640:	4b02      	ldr	r3, [pc, #8]	; (364c <usbdc_register_handler+0x34>)
    3642:	4798      	blx	r3
}
    3644:	e7ef      	b.n	3626 <usbdc_register_handler+0xe>
    3646:	46c0      	nop			; (mov r8, r8)
    3648:	200003fc 	.word	0x200003fc
    364c:	00000ee9 	.word	0x00000ee9

00003650 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    3650:	b570      	push	{r4, r5, r6, lr}
    3652:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    3654:	1e43      	subs	r3, r0, #1
    3656:	4198      	sbcs	r0, r3
    3658:	b2c0      	uxtb	r0, r0
    365a:	4a0c      	ldr	r2, [pc, #48]	; (368c <usbdc_init+0x3c>)
    365c:	490c      	ldr	r1, [pc, #48]	; (3690 <usbdc_init+0x40>)
    365e:	4b0d      	ldr	r3, [pc, #52]	; (3694 <usbdc_init+0x44>)
    3660:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    3662:	4b0d      	ldr	r3, [pc, #52]	; (3698 <usbdc_init+0x48>)
    3664:	4798      	blx	r3
	if (rc < 0) {
    3666:	2800      	cmp	r0, #0
    3668:	db0e      	blt.n	3688 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    366a:	4d0c      	ldr	r5, [pc, #48]	; (369c <usbdc_init+0x4c>)
    366c:	2220      	movs	r2, #32
    366e:	2100      	movs	r1, #0
    3670:	0028      	movs	r0, r5
    3672:	4b0b      	ldr	r3, [pc, #44]	; (36a0 <usbdc_init+0x50>)
    3674:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    3676:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    3678:	490a      	ldr	r1, [pc, #40]	; (36a4 <usbdc_init+0x54>)
    367a:	2000      	movs	r0, #0
    367c:	4c0a      	ldr	r4, [pc, #40]	; (36a8 <usbdc_init+0x58>)
    367e:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    3680:	490a      	ldr	r1, [pc, #40]	; (36ac <usbdc_init+0x5c>)
    3682:	2001      	movs	r0, #1
    3684:	47a0      	blx	r4

	return 0;
    3686:	2000      	movs	r0, #0
}
    3688:	bd70      	pop	{r4, r5, r6, pc}
    368a:	46c0      	nop			; (mov r8, r8)
    368c:	00000355 	.word	0x00000355
    3690:	000042ac 	.word	0x000042ac
    3694:	00000e89 	.word	0x00000e89
    3698:	00000b35 	.word	0x00000b35
    369c:	200003fc 	.word	0x200003fc
    36a0:	00003937 	.word	0x00003937
    36a4:	000030a5 	.word	0x000030a5
    36a8:	00000b99 	.word	0x00000b99
    36ac:	00003199 	.word	0x00003199

000036b0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    36b0:	b510      	push	{r4, lr}
    36b2:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    36b4:	4802      	ldr	r0, [pc, #8]	; (36c0 <usbdc_register_function+0x10>)
    36b6:	3010      	adds	r0, #16
    36b8:	4b02      	ldr	r3, [pc, #8]	; (36c4 <usbdc_register_function+0x14>)
    36ba:	4798      	blx	r3
}
    36bc:	bd10      	pop	{r4, pc}
    36be:	46c0      	nop			; (mov r8, r8)
    36c0:	200003fc 	.word	0x200003fc
    36c4:	00000ee9 	.word	0x00000ee9

000036c8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    36c8:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    36ca:	4b0b      	ldr	r3, [pc, #44]	; (36f8 <usbdc_start+0x30>)
    36cc:	7e9b      	ldrb	r3, [r3, #26]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d10c      	bne.n	36ec <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    36d2:	2800      	cmp	r0, #0
    36d4:	d00d      	beq.n	36f2 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    36d6:	4b08      	ldr	r3, [pc, #32]	; (36f8 <usbdc_start+0x30>)
    36d8:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    36da:	6802      	ldr	r2, [r0, #0]
    36dc:	79d2      	ldrb	r2, [r2, #7]
    36de:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    36e0:	2201      	movs	r2, #1
    36e2:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    36e4:	4b05      	ldr	r3, [pc, #20]	; (36fc <usbdc_start+0x34>)
    36e6:	4798      	blx	r3
	return ERR_NONE;
    36e8:	2000      	movs	r0, #0
}
    36ea:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    36ec:	2004      	movs	r0, #4
    36ee:	4240      	negs	r0, r0
    36f0:	e7fb      	b.n	36ea <usbdc_start+0x22>
		return ERR_BAD_DATA;
    36f2:	2009      	movs	r0, #9
    36f4:	4240      	negs	r0, r0
    36f6:	e7f8      	b.n	36ea <usbdc_start+0x22>
    36f8:	200003fc 	.word	0x200003fc
    36fc:	00000ba5 	.word	0x00000ba5

00003700 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    3700:	b510      	push	{r4, lr}
	usb_d_attach();
    3702:	4b01      	ldr	r3, [pc, #4]	; (3708 <usbdc_attach+0x8>)
    3704:	4798      	blx	r3
}
    3706:	bd10      	pop	{r4, pc}
    3708:	00000bb1 	.word	0x00000bb1

0000370c <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    370c:	4b01      	ldr	r3, [pc, #4]	; (3714 <usbdc_get_ctrl_buffer+0x8>)
    370e:	6958      	ldr	r0, [r3, #20]
}
    3710:	4770      	bx	lr
    3712:	46c0      	nop			; (mov r8, r8)
    3714:	200003fc 	.word	0x200003fc

00003718 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    3718:	4b02      	ldr	r3, [pc, #8]	; (3724 <usbdc_get_state+0xc>)
    371a:	7e98      	ldrb	r0, [r3, #26]
    371c:	06c3      	lsls	r3, r0, #27
    371e:	d500      	bpl.n	3722 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    3720:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    3722:	4770      	bx	lr
    3724:	200003fc 	.word	0x200003fc

00003728 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    3728:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    372a:	4288      	cmp	r0, r1
    372c:	d211      	bcs.n	3752 <usb_find_desc+0x2a>
	return desc[0];
    372e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3730:	2b01      	cmp	r3, #1
    3732:	d910      	bls.n	3756 <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    3734:	7844      	ldrb	r4, [r0, #1]
    3736:	4294      	cmp	r4, r2
    3738:	d00a      	beq.n	3750 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    373a:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    373c:	4281      	cmp	r1, r0
    373e:	d906      	bls.n	374e <usb_find_desc+0x26>
	return desc[0];
    3740:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3742:	2b01      	cmp	r3, #1
    3744:	d909      	bls.n	375a <usb_find_desc+0x32>
	return desc[1];
    3746:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    3748:	4294      	cmp	r4, r2
    374a:	d1f6      	bne.n	373a <usb_find_desc+0x12>
    374c:	e000      	b.n	3750 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    374e:	2000      	movs	r0, #0
}
    3750:	bd10      	pop	{r4, pc}
	return NULL;
    3752:	2000      	movs	r0, #0
    3754:	e7fc      	b.n	3750 <usb_find_desc+0x28>
		_desc_len_check();
    3756:	2000      	movs	r0, #0
    3758:	e7fa      	b.n	3750 <usb_find_desc+0x28>
    375a:	2000      	movs	r0, #0
    375c:	e7f8      	b.n	3750 <usb_find_desc+0x28>

0000375e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    375e:	4288      	cmp	r0, r1
    3760:	d215      	bcs.n	378e <usb_find_ep_desc+0x30>
	return desc[0];
    3762:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3764:	2b01      	cmp	r3, #1
    3766:	d914      	bls.n	3792 <usb_find_ep_desc+0x34>
	return desc[1];
    3768:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    376a:	2a04      	cmp	r2, #4
    376c:	d013      	beq.n	3796 <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    376e:	2a05      	cmp	r2, #5
    3770:	d00c      	beq.n	378c <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    3772:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    3774:	4281      	cmp	r1, r0
    3776:	d908      	bls.n	378a <usb_find_ep_desc+0x2c>
	return desc[0];
    3778:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    377a:	2b01      	cmp	r3, #1
    377c:	d90d      	bls.n	379a <usb_find_ep_desc+0x3c>
	return desc[1];
    377e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3780:	2a04      	cmp	r2, #4
    3782:	d00c      	beq.n	379e <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3784:	2a05      	cmp	r2, #5
    3786:	d1f4      	bne.n	3772 <usb_find_ep_desc+0x14>
    3788:	e000      	b.n	378c <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    378a:	2000      	movs	r0, #0
}
    378c:	4770      	bx	lr
	return NULL;
    378e:	2000      	movs	r0, #0
    3790:	e7fc      	b.n	378c <usb_find_ep_desc+0x2e>
		_desc_len_check();
    3792:	2000      	movs	r0, #0
    3794:	e7fa      	b.n	378c <usb_find_ep_desc+0x2e>
	return NULL;
    3796:	2000      	movs	r0, #0
    3798:	e7f8      	b.n	378c <usb_find_ep_desc+0x2e>
		_desc_len_check();
    379a:	2000      	movs	r0, #0
    379c:	e7f6      	b.n	378c <usb_find_ep_desc+0x2e>
	return NULL;
    379e:	2000      	movs	r0, #0
    37a0:	e7f4      	b.n	378c <usb_find_ep_desc+0x2e>
	...

000037a4 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    37a4:	b570      	push	{r4, r5, r6, lr}
    37a6:	000c      	movs	r4, r1
    37a8:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    37aa:	2202      	movs	r2, #2
    37ac:	4b16      	ldr	r3, [pc, #88]	; (3808 <usb_find_cfg_desc+0x64>)
    37ae:	4798      	blx	r3
	if (!desc) {
    37b0:	2800      	cmp	r0, #0
    37b2:	d01d      	beq.n	37f0 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    37b4:	4284      	cmp	r4, r0
    37b6:	d91c      	bls.n	37f2 <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    37b8:	7803      	ldrb	r3, [r0, #0]
    37ba:	2b01      	cmp	r3, #1
    37bc:	d91b      	bls.n	37f6 <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    37be:	7843      	ldrb	r3, [r0, #1]
    37c0:	2b02      	cmp	r3, #2
    37c2:	d11a      	bne.n	37fa <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    37c4:	7943      	ldrb	r3, [r0, #5]
    37c6:	42ab      	cmp	r3, r5
    37c8:	d012      	beq.n	37f0 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    37ca:	78c2      	ldrb	r2, [r0, #3]
    37cc:	0212      	lsls	r2, r2, #8
    37ce:	7883      	ldrb	r3, [r0, #2]
    37d0:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    37d2:	b29b      	uxth	r3, r3
    37d4:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    37d6:	4284      	cmp	r4, r0
    37d8:	d909      	bls.n	37ee <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    37da:	7803      	ldrb	r3, [r0, #0]
    37dc:	2b01      	cmp	r3, #1
    37de:	d90e      	bls.n	37fe <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    37e0:	7843      	ldrb	r3, [r0, #1]
    37e2:	2b02      	cmp	r3, #2
    37e4:	d10d      	bne.n	3802 <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    37e6:	7943      	ldrb	r3, [r0, #5]
    37e8:	42ab      	cmp	r3, r5
    37ea:	d1ee      	bne.n	37ca <usb_find_cfg_desc+0x26>
    37ec:	e000      	b.n	37f0 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    37ee:	2000      	movs	r0, #0
}
    37f0:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    37f2:	2000      	movs	r0, #0
    37f4:	e7fc      	b.n	37f0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    37f6:	2000      	movs	r0, #0
    37f8:	e7fa      	b.n	37f0 <usb_find_cfg_desc+0x4c>
	return NULL;
    37fa:	2000      	movs	r0, #0
    37fc:	e7f8      	b.n	37f0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    37fe:	2000      	movs	r0, #0
    3800:	e7f6      	b.n	37f0 <usb_find_cfg_desc+0x4c>
	return NULL;
    3802:	2000      	movs	r0, #0
    3804:	e7f4      	b.n	37f0 <usb_find_cfg_desc+0x4c>
    3806:	46c0      	nop			; (mov r8, r8)
    3808:	00003729 	.word	0x00003729

0000380c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    380e:	000d      	movs	r5, r1
    3810:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    3812:	4288      	cmp	r0, r1
    3814:	d212      	bcs.n	383c <usb_find_str_desc+0x30>
    3816:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    3818:	4e0a      	ldr	r6, [pc, #40]	; (3844 <usb_find_str_desc+0x38>)
    381a:	2203      	movs	r2, #3
    381c:	0029      	movs	r1, r5
    381e:	47b0      	blx	r6
		if (desc) {
    3820:	2800      	cmp	r0, #0
    3822:	d00e      	beq.n	3842 <usb_find_str_desc+0x36>
	return desc[0];
    3824:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    3826:	2b01      	cmp	r3, #1
    3828:	d90a      	bls.n	3840 <usb_find_str_desc+0x34>
			if (i == str_index) {
    382a:	42a7      	cmp	r7, r4
    382c:	d009      	beq.n	3842 <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    382e:	3401      	adds	r4, #1
    3830:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    3832:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    3834:	4285      	cmp	r5, r0
    3836:	d8f0      	bhi.n	381a <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    3838:	2000      	movs	r0, #0
    383a:	e002      	b.n	3842 <usb_find_str_desc+0x36>
    383c:	2000      	movs	r0, #0
    383e:	e000      	b.n	3842 <usb_find_str_desc+0x36>
			_desc_len_check();
    3840:	2000      	movs	r0, #0
}
    3842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3844:	00003729 	.word	0x00003729

00003848 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    3848:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    384a:	4806      	ldr	r0, [pc, #24]	; (3864 <cdc_device_acm_init+0x1c>)
    384c:	3040      	adds	r0, #64	; 0x40
    384e:	4b06      	ldr	r3, [pc, #24]	; (3868 <cdc_device_acm_init+0x20>)
    3850:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    3852:	4b06      	ldr	r3, [pc, #24]	; (386c <cdc_device_acm_init+0x24>)
    3854:	4798      	blx	r3

	usbdc_start(single_desc);
    3856:	4806      	ldr	r0, [pc, #24]	; (3870 <cdc_device_acm_init+0x28>)
    3858:	4b06      	ldr	r3, [pc, #24]	; (3874 <cdc_device_acm_init+0x2c>)
    385a:	4798      	blx	r3
	usbdc_attach();
    385c:	4b06      	ldr	r3, [pc, #24]	; (3878 <cdc_device_acm_init+0x30>)
    385e:	4798      	blx	r3
}
    3860:	bd10      	pop	{r4, pc}
    3862:	46c0      	nop			; (mov r8, r8)
    3864:	2000041c 	.word	0x2000041c
    3868:	00003651 	.word	0x00003651
    386c:	00002fd5 	.word	0x00002fd5
    3870:	20000070 	.word	0x20000070
    3874:	000036c9 	.word	0x000036c9
    3878:	00003701 	.word	0x00003701

0000387c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    387c:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    387e:	4b01      	ldr	r3, [pc, #4]	; (3884 <usb_init+0x8>)
    3880:	4798      	blx	r3
}
    3882:	bd10      	pop	{r4, pc}
    3884:	00003849 	.word	0x00003849

00003888 <__ffssi2>:
    3888:	b510      	push	{r4, lr}
    388a:	2300      	movs	r3, #0
    388c:	2800      	cmp	r0, #0
    388e:	d002      	beq.n	3896 <__ffssi2+0xe>
    3890:	f000 f804 	bl	389c <__ctzsi2>
    3894:	1c43      	adds	r3, r0, #1
    3896:	0018      	movs	r0, r3
    3898:	bd10      	pop	{r4, pc}
    389a:	46c0      	nop			; (mov r8, r8)

0000389c <__ctzsi2>:
    389c:	4241      	negs	r1, r0
    389e:	4008      	ands	r0, r1
    38a0:	211c      	movs	r1, #28
    38a2:	2301      	movs	r3, #1
    38a4:	041b      	lsls	r3, r3, #16
    38a6:	4298      	cmp	r0, r3
    38a8:	d301      	bcc.n	38ae <__ctzsi2+0x12>
    38aa:	0c00      	lsrs	r0, r0, #16
    38ac:	3910      	subs	r1, #16
    38ae:	0a1b      	lsrs	r3, r3, #8
    38b0:	4298      	cmp	r0, r3
    38b2:	d301      	bcc.n	38b8 <__ctzsi2+0x1c>
    38b4:	0a00      	lsrs	r0, r0, #8
    38b6:	3908      	subs	r1, #8
    38b8:	091b      	lsrs	r3, r3, #4
    38ba:	4298      	cmp	r0, r3
    38bc:	d301      	bcc.n	38c2 <__ctzsi2+0x26>
    38be:	0900      	lsrs	r0, r0, #4
    38c0:	3904      	subs	r1, #4
    38c2:	a202      	add	r2, pc, #8	; (adr r2, 38cc <__ctzsi2+0x30>)
    38c4:	5c10      	ldrb	r0, [r2, r0]
    38c6:	1a40      	subs	r0, r0, r1
    38c8:	4770      	bx	lr
    38ca:	46c0      	nop			; (mov r8, r8)
    38cc:	1d1d1c1b 	.word	0x1d1d1c1b
    38d0:	1e1e1e1e 	.word	0x1e1e1e1e
    38d4:	1f1f1f1f 	.word	0x1f1f1f1f
    38d8:	1f1f1f1f 	.word	0x1f1f1f1f

000038dc <__libc_init_array>:
    38dc:	b570      	push	{r4, r5, r6, lr}
    38de:	2600      	movs	r6, #0
    38e0:	4d0c      	ldr	r5, [pc, #48]	; (3914 <__libc_init_array+0x38>)
    38e2:	4c0d      	ldr	r4, [pc, #52]	; (3918 <__libc_init_array+0x3c>)
    38e4:	1b64      	subs	r4, r4, r5
    38e6:	10a4      	asrs	r4, r4, #2
    38e8:	42a6      	cmp	r6, r4
    38ea:	d109      	bne.n	3900 <__libc_init_array+0x24>
    38ec:	2600      	movs	r6, #0
    38ee:	f000 fd1b 	bl	4328 <_init>
    38f2:	4d0a      	ldr	r5, [pc, #40]	; (391c <__libc_init_array+0x40>)
    38f4:	4c0a      	ldr	r4, [pc, #40]	; (3920 <__libc_init_array+0x44>)
    38f6:	1b64      	subs	r4, r4, r5
    38f8:	10a4      	asrs	r4, r4, #2
    38fa:	42a6      	cmp	r6, r4
    38fc:	d105      	bne.n	390a <__libc_init_array+0x2e>
    38fe:	bd70      	pop	{r4, r5, r6, pc}
    3900:	00b3      	lsls	r3, r6, #2
    3902:	58eb      	ldr	r3, [r5, r3]
    3904:	4798      	blx	r3
    3906:	3601      	adds	r6, #1
    3908:	e7ee      	b.n	38e8 <__libc_init_array+0xc>
    390a:	00b3      	lsls	r3, r6, #2
    390c:	58eb      	ldr	r3, [r5, r3]
    390e:	4798      	blx	r3
    3910:	3601      	adds	r6, #1
    3912:	e7f2      	b.n	38fa <__libc_init_array+0x1e>
    3914:	00004334 	.word	0x00004334
    3918:	00004334 	.word	0x00004334
    391c:	00004334 	.word	0x00004334
    3920:	00004338 	.word	0x00004338

00003924 <memcpy>:
    3924:	2300      	movs	r3, #0
    3926:	b510      	push	{r4, lr}
    3928:	429a      	cmp	r2, r3
    392a:	d100      	bne.n	392e <memcpy+0xa>
    392c:	bd10      	pop	{r4, pc}
    392e:	5ccc      	ldrb	r4, [r1, r3]
    3930:	54c4      	strb	r4, [r0, r3]
    3932:	3301      	adds	r3, #1
    3934:	e7f8      	b.n	3928 <memcpy+0x4>

00003936 <memset>:
    3936:	0003      	movs	r3, r0
    3938:	1882      	adds	r2, r0, r2
    393a:	4293      	cmp	r3, r2
    393c:	d100      	bne.n	3940 <memset+0xa>
    393e:	4770      	bx	lr
    3940:	7019      	strb	r1, [r3, #0]
    3942:	3301      	adds	r3, #1
    3944:	e7f9      	b.n	393a <memset+0x4>

00003946 <setbuf>:
    3946:	424a      	negs	r2, r1
    3948:	414a      	adcs	r2, r1
    394a:	2380      	movs	r3, #128	; 0x80
    394c:	b510      	push	{r4, lr}
    394e:	0052      	lsls	r2, r2, #1
    3950:	00db      	lsls	r3, r3, #3
    3952:	f000 f801 	bl	3958 <setvbuf>
    3956:	bd10      	pop	{r4, pc}

00003958 <setvbuf>:
    3958:	b5f0      	push	{r4, r5, r6, r7, lr}
    395a:	001d      	movs	r5, r3
    395c:	4b4f      	ldr	r3, [pc, #316]	; (3a9c <setvbuf+0x144>)
    395e:	b085      	sub	sp, #20
    3960:	681e      	ldr	r6, [r3, #0]
    3962:	0004      	movs	r4, r0
    3964:	000f      	movs	r7, r1
    3966:	9200      	str	r2, [sp, #0]
    3968:	2e00      	cmp	r6, #0
    396a:	d005      	beq.n	3978 <setvbuf+0x20>
    396c:	69b3      	ldr	r3, [r6, #24]
    396e:	2b00      	cmp	r3, #0
    3970:	d102      	bne.n	3978 <setvbuf+0x20>
    3972:	0030      	movs	r0, r6
    3974:	f000 f994 	bl	3ca0 <__sinit>
    3978:	4b49      	ldr	r3, [pc, #292]	; (3aa0 <setvbuf+0x148>)
    397a:	429c      	cmp	r4, r3
    397c:	d150      	bne.n	3a20 <setvbuf+0xc8>
    397e:	6874      	ldr	r4, [r6, #4]
    3980:	9b00      	ldr	r3, [sp, #0]
    3982:	2b02      	cmp	r3, #2
    3984:	d005      	beq.n	3992 <setvbuf+0x3a>
    3986:	2b01      	cmp	r3, #1
    3988:	d900      	bls.n	398c <setvbuf+0x34>
    398a:	e084      	b.n	3a96 <setvbuf+0x13e>
    398c:	2d00      	cmp	r5, #0
    398e:	da00      	bge.n	3992 <setvbuf+0x3a>
    3990:	e081      	b.n	3a96 <setvbuf+0x13e>
    3992:	0021      	movs	r1, r4
    3994:	0030      	movs	r0, r6
    3996:	f000 f915 	bl	3bc4 <_fflush_r>
    399a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    399c:	2900      	cmp	r1, #0
    399e:	d008      	beq.n	39b2 <setvbuf+0x5a>
    39a0:	0023      	movs	r3, r4
    39a2:	3344      	adds	r3, #68	; 0x44
    39a4:	4299      	cmp	r1, r3
    39a6:	d002      	beq.n	39ae <setvbuf+0x56>
    39a8:	0030      	movs	r0, r6
    39aa:	f000 fa41 	bl	3e30 <_free_r>
    39ae:	2300      	movs	r3, #0
    39b0:	6363      	str	r3, [r4, #52]	; 0x34
    39b2:	2300      	movs	r3, #0
    39b4:	61a3      	str	r3, [r4, #24]
    39b6:	6063      	str	r3, [r4, #4]
    39b8:	89a3      	ldrh	r3, [r4, #12]
    39ba:	061b      	lsls	r3, r3, #24
    39bc:	d503      	bpl.n	39c6 <setvbuf+0x6e>
    39be:	6921      	ldr	r1, [r4, #16]
    39c0:	0030      	movs	r0, r6
    39c2:	f000 fa35 	bl	3e30 <_free_r>
    39c6:	89a3      	ldrh	r3, [r4, #12]
    39c8:	4a36      	ldr	r2, [pc, #216]	; (3aa4 <setvbuf+0x14c>)
    39ca:	4013      	ands	r3, r2
    39cc:	81a3      	strh	r3, [r4, #12]
    39ce:	9b00      	ldr	r3, [sp, #0]
    39d0:	2b02      	cmp	r3, #2
    39d2:	d05a      	beq.n	3a8a <setvbuf+0x132>
    39d4:	ab03      	add	r3, sp, #12
    39d6:	aa02      	add	r2, sp, #8
    39d8:	0021      	movs	r1, r4
    39da:	0030      	movs	r0, r6
    39dc:	f000 f9f6 	bl	3dcc <__swhatbuf_r>
    39e0:	89a3      	ldrh	r3, [r4, #12]
    39e2:	4318      	orrs	r0, r3
    39e4:	81a0      	strh	r0, [r4, #12]
    39e6:	2d00      	cmp	r5, #0
    39e8:	d124      	bne.n	3a34 <setvbuf+0xdc>
    39ea:	9d02      	ldr	r5, [sp, #8]
    39ec:	0028      	movs	r0, r5
    39ee:	f000 fa15 	bl	3e1c <malloc>
    39f2:	9501      	str	r5, [sp, #4]
    39f4:	1e07      	subs	r7, r0, #0
    39f6:	d142      	bne.n	3a7e <setvbuf+0x126>
    39f8:	9b02      	ldr	r3, [sp, #8]
    39fa:	9301      	str	r3, [sp, #4]
    39fc:	42ab      	cmp	r3, r5
    39fe:	d139      	bne.n	3a74 <setvbuf+0x11c>
    3a00:	2001      	movs	r0, #1
    3a02:	4240      	negs	r0, r0
    3a04:	2302      	movs	r3, #2
    3a06:	89a2      	ldrh	r2, [r4, #12]
    3a08:	4313      	orrs	r3, r2
    3a0a:	81a3      	strh	r3, [r4, #12]
    3a0c:	2300      	movs	r3, #0
    3a0e:	60a3      	str	r3, [r4, #8]
    3a10:	0023      	movs	r3, r4
    3a12:	3347      	adds	r3, #71	; 0x47
    3a14:	6023      	str	r3, [r4, #0]
    3a16:	6123      	str	r3, [r4, #16]
    3a18:	2301      	movs	r3, #1
    3a1a:	6163      	str	r3, [r4, #20]
    3a1c:	b005      	add	sp, #20
    3a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a20:	4b21      	ldr	r3, [pc, #132]	; (3aa8 <setvbuf+0x150>)
    3a22:	429c      	cmp	r4, r3
    3a24:	d101      	bne.n	3a2a <setvbuf+0xd2>
    3a26:	68b4      	ldr	r4, [r6, #8]
    3a28:	e7aa      	b.n	3980 <setvbuf+0x28>
    3a2a:	4b20      	ldr	r3, [pc, #128]	; (3aac <setvbuf+0x154>)
    3a2c:	429c      	cmp	r4, r3
    3a2e:	d1a7      	bne.n	3980 <setvbuf+0x28>
    3a30:	68f4      	ldr	r4, [r6, #12]
    3a32:	e7a5      	b.n	3980 <setvbuf+0x28>
    3a34:	2f00      	cmp	r7, #0
    3a36:	d0d9      	beq.n	39ec <setvbuf+0x94>
    3a38:	69b3      	ldr	r3, [r6, #24]
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	d102      	bne.n	3a44 <setvbuf+0xec>
    3a3e:	0030      	movs	r0, r6
    3a40:	f000 f92e 	bl	3ca0 <__sinit>
    3a44:	9b00      	ldr	r3, [sp, #0]
    3a46:	2b01      	cmp	r3, #1
    3a48:	d103      	bne.n	3a52 <setvbuf+0xfa>
    3a4a:	89a3      	ldrh	r3, [r4, #12]
    3a4c:	9a00      	ldr	r2, [sp, #0]
    3a4e:	431a      	orrs	r2, r3
    3a50:	81a2      	strh	r2, [r4, #12]
    3a52:	2008      	movs	r0, #8
    3a54:	89a3      	ldrh	r3, [r4, #12]
    3a56:	6027      	str	r7, [r4, #0]
    3a58:	6127      	str	r7, [r4, #16]
    3a5a:	6165      	str	r5, [r4, #20]
    3a5c:	4018      	ands	r0, r3
    3a5e:	d018      	beq.n	3a92 <setvbuf+0x13a>
    3a60:	2001      	movs	r0, #1
    3a62:	4018      	ands	r0, r3
    3a64:	2300      	movs	r3, #0
    3a66:	4298      	cmp	r0, r3
    3a68:	d011      	beq.n	3a8e <setvbuf+0x136>
    3a6a:	426d      	negs	r5, r5
    3a6c:	60a3      	str	r3, [r4, #8]
    3a6e:	61a5      	str	r5, [r4, #24]
    3a70:	0018      	movs	r0, r3
    3a72:	e7d3      	b.n	3a1c <setvbuf+0xc4>
    3a74:	9801      	ldr	r0, [sp, #4]
    3a76:	f000 f9d1 	bl	3e1c <malloc>
    3a7a:	1e07      	subs	r7, r0, #0
    3a7c:	d0c0      	beq.n	3a00 <setvbuf+0xa8>
    3a7e:	2380      	movs	r3, #128	; 0x80
    3a80:	89a2      	ldrh	r2, [r4, #12]
    3a82:	9d01      	ldr	r5, [sp, #4]
    3a84:	4313      	orrs	r3, r2
    3a86:	81a3      	strh	r3, [r4, #12]
    3a88:	e7d6      	b.n	3a38 <setvbuf+0xe0>
    3a8a:	2000      	movs	r0, #0
    3a8c:	e7ba      	b.n	3a04 <setvbuf+0xac>
    3a8e:	60a5      	str	r5, [r4, #8]
    3a90:	e7c4      	b.n	3a1c <setvbuf+0xc4>
    3a92:	60a0      	str	r0, [r4, #8]
    3a94:	e7c2      	b.n	3a1c <setvbuf+0xc4>
    3a96:	2001      	movs	r0, #1
    3a98:	4240      	negs	r0, r0
    3a9a:	e7bf      	b.n	3a1c <setvbuf+0xc4>
    3a9c:	200000d0 	.word	0x200000d0
    3aa0:	000042e8 	.word	0x000042e8
    3aa4:	fffff35c 	.word	0xfffff35c
    3aa8:	00004308 	.word	0x00004308
    3aac:	000042c8 	.word	0x000042c8

00003ab0 <__sflush_r>:
    3ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3ab2:	898a      	ldrh	r2, [r1, #12]
    3ab4:	0005      	movs	r5, r0
    3ab6:	000c      	movs	r4, r1
    3ab8:	0713      	lsls	r3, r2, #28
    3aba:	d460      	bmi.n	3b7e <__sflush_r+0xce>
    3abc:	684b      	ldr	r3, [r1, #4]
    3abe:	2b00      	cmp	r3, #0
    3ac0:	dc04      	bgt.n	3acc <__sflush_r+0x1c>
    3ac2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	dc01      	bgt.n	3acc <__sflush_r+0x1c>
    3ac8:	2000      	movs	r0, #0
    3aca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3acc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3ace:	2f00      	cmp	r7, #0
    3ad0:	d0fa      	beq.n	3ac8 <__sflush_r+0x18>
    3ad2:	2300      	movs	r3, #0
    3ad4:	682e      	ldr	r6, [r5, #0]
    3ad6:	602b      	str	r3, [r5, #0]
    3ad8:	2380      	movs	r3, #128	; 0x80
    3ada:	015b      	lsls	r3, r3, #5
    3adc:	401a      	ands	r2, r3
    3ade:	d034      	beq.n	3b4a <__sflush_r+0x9a>
    3ae0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3ae2:	89a3      	ldrh	r3, [r4, #12]
    3ae4:	075b      	lsls	r3, r3, #29
    3ae6:	d506      	bpl.n	3af6 <__sflush_r+0x46>
    3ae8:	6863      	ldr	r3, [r4, #4]
    3aea:	1ac0      	subs	r0, r0, r3
    3aec:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3aee:	2b00      	cmp	r3, #0
    3af0:	d001      	beq.n	3af6 <__sflush_r+0x46>
    3af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3af4:	1ac0      	subs	r0, r0, r3
    3af6:	0002      	movs	r2, r0
    3af8:	6a21      	ldr	r1, [r4, #32]
    3afa:	2300      	movs	r3, #0
    3afc:	0028      	movs	r0, r5
    3afe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3b00:	47b8      	blx	r7
    3b02:	89a1      	ldrh	r1, [r4, #12]
    3b04:	1c43      	adds	r3, r0, #1
    3b06:	d106      	bne.n	3b16 <__sflush_r+0x66>
    3b08:	682b      	ldr	r3, [r5, #0]
    3b0a:	2b1d      	cmp	r3, #29
    3b0c:	d831      	bhi.n	3b72 <__sflush_r+0xc2>
    3b0e:	4a2c      	ldr	r2, [pc, #176]	; (3bc0 <__sflush_r+0x110>)
    3b10:	40da      	lsrs	r2, r3
    3b12:	07d3      	lsls	r3, r2, #31
    3b14:	d52d      	bpl.n	3b72 <__sflush_r+0xc2>
    3b16:	2300      	movs	r3, #0
    3b18:	6063      	str	r3, [r4, #4]
    3b1a:	6923      	ldr	r3, [r4, #16]
    3b1c:	6023      	str	r3, [r4, #0]
    3b1e:	04cb      	lsls	r3, r1, #19
    3b20:	d505      	bpl.n	3b2e <__sflush_r+0x7e>
    3b22:	1c43      	adds	r3, r0, #1
    3b24:	d102      	bne.n	3b2c <__sflush_r+0x7c>
    3b26:	682b      	ldr	r3, [r5, #0]
    3b28:	2b00      	cmp	r3, #0
    3b2a:	d100      	bne.n	3b2e <__sflush_r+0x7e>
    3b2c:	6560      	str	r0, [r4, #84]	; 0x54
    3b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3b30:	602e      	str	r6, [r5, #0]
    3b32:	2900      	cmp	r1, #0
    3b34:	d0c8      	beq.n	3ac8 <__sflush_r+0x18>
    3b36:	0023      	movs	r3, r4
    3b38:	3344      	adds	r3, #68	; 0x44
    3b3a:	4299      	cmp	r1, r3
    3b3c:	d002      	beq.n	3b44 <__sflush_r+0x94>
    3b3e:	0028      	movs	r0, r5
    3b40:	f000 f976 	bl	3e30 <_free_r>
    3b44:	2000      	movs	r0, #0
    3b46:	6360      	str	r0, [r4, #52]	; 0x34
    3b48:	e7bf      	b.n	3aca <__sflush_r+0x1a>
    3b4a:	2301      	movs	r3, #1
    3b4c:	6a21      	ldr	r1, [r4, #32]
    3b4e:	0028      	movs	r0, r5
    3b50:	47b8      	blx	r7
    3b52:	1c43      	adds	r3, r0, #1
    3b54:	d1c5      	bne.n	3ae2 <__sflush_r+0x32>
    3b56:	682b      	ldr	r3, [r5, #0]
    3b58:	2b00      	cmp	r3, #0
    3b5a:	d0c2      	beq.n	3ae2 <__sflush_r+0x32>
    3b5c:	2b1d      	cmp	r3, #29
    3b5e:	d001      	beq.n	3b64 <__sflush_r+0xb4>
    3b60:	2b16      	cmp	r3, #22
    3b62:	d101      	bne.n	3b68 <__sflush_r+0xb8>
    3b64:	602e      	str	r6, [r5, #0]
    3b66:	e7af      	b.n	3ac8 <__sflush_r+0x18>
    3b68:	2340      	movs	r3, #64	; 0x40
    3b6a:	89a2      	ldrh	r2, [r4, #12]
    3b6c:	4313      	orrs	r3, r2
    3b6e:	81a3      	strh	r3, [r4, #12]
    3b70:	e7ab      	b.n	3aca <__sflush_r+0x1a>
    3b72:	2340      	movs	r3, #64	; 0x40
    3b74:	430b      	orrs	r3, r1
    3b76:	2001      	movs	r0, #1
    3b78:	81a3      	strh	r3, [r4, #12]
    3b7a:	4240      	negs	r0, r0
    3b7c:	e7a5      	b.n	3aca <__sflush_r+0x1a>
    3b7e:	690f      	ldr	r7, [r1, #16]
    3b80:	2f00      	cmp	r7, #0
    3b82:	d0a1      	beq.n	3ac8 <__sflush_r+0x18>
    3b84:	680b      	ldr	r3, [r1, #0]
    3b86:	600f      	str	r7, [r1, #0]
    3b88:	1bdb      	subs	r3, r3, r7
    3b8a:	9301      	str	r3, [sp, #4]
    3b8c:	2300      	movs	r3, #0
    3b8e:	0792      	lsls	r2, r2, #30
    3b90:	d100      	bne.n	3b94 <__sflush_r+0xe4>
    3b92:	694b      	ldr	r3, [r1, #20]
    3b94:	60a3      	str	r3, [r4, #8]
    3b96:	9b01      	ldr	r3, [sp, #4]
    3b98:	2b00      	cmp	r3, #0
    3b9a:	dc00      	bgt.n	3b9e <__sflush_r+0xee>
    3b9c:	e794      	b.n	3ac8 <__sflush_r+0x18>
    3b9e:	9b01      	ldr	r3, [sp, #4]
    3ba0:	003a      	movs	r2, r7
    3ba2:	6a21      	ldr	r1, [r4, #32]
    3ba4:	0028      	movs	r0, r5
    3ba6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3ba8:	47b0      	blx	r6
    3baa:	2800      	cmp	r0, #0
    3bac:	dc03      	bgt.n	3bb6 <__sflush_r+0x106>
    3bae:	2340      	movs	r3, #64	; 0x40
    3bb0:	89a2      	ldrh	r2, [r4, #12]
    3bb2:	4313      	orrs	r3, r2
    3bb4:	e7df      	b.n	3b76 <__sflush_r+0xc6>
    3bb6:	9b01      	ldr	r3, [sp, #4]
    3bb8:	183f      	adds	r7, r7, r0
    3bba:	1a1b      	subs	r3, r3, r0
    3bbc:	9301      	str	r3, [sp, #4]
    3bbe:	e7ea      	b.n	3b96 <__sflush_r+0xe6>
    3bc0:	20400001 	.word	0x20400001

00003bc4 <_fflush_r>:
    3bc4:	690b      	ldr	r3, [r1, #16]
    3bc6:	b570      	push	{r4, r5, r6, lr}
    3bc8:	0005      	movs	r5, r0
    3bca:	000c      	movs	r4, r1
    3bcc:	2b00      	cmp	r3, #0
    3bce:	d101      	bne.n	3bd4 <_fflush_r+0x10>
    3bd0:	2000      	movs	r0, #0
    3bd2:	bd70      	pop	{r4, r5, r6, pc}
    3bd4:	2800      	cmp	r0, #0
    3bd6:	d004      	beq.n	3be2 <_fflush_r+0x1e>
    3bd8:	6983      	ldr	r3, [r0, #24]
    3bda:	2b00      	cmp	r3, #0
    3bdc:	d101      	bne.n	3be2 <_fflush_r+0x1e>
    3bde:	f000 f85f 	bl	3ca0 <__sinit>
    3be2:	4b0b      	ldr	r3, [pc, #44]	; (3c10 <_fflush_r+0x4c>)
    3be4:	429c      	cmp	r4, r3
    3be6:	d109      	bne.n	3bfc <_fflush_r+0x38>
    3be8:	686c      	ldr	r4, [r5, #4]
    3bea:	220c      	movs	r2, #12
    3bec:	5ea3      	ldrsh	r3, [r4, r2]
    3bee:	2b00      	cmp	r3, #0
    3bf0:	d0ee      	beq.n	3bd0 <_fflush_r+0xc>
    3bf2:	0021      	movs	r1, r4
    3bf4:	0028      	movs	r0, r5
    3bf6:	f7ff ff5b 	bl	3ab0 <__sflush_r>
    3bfa:	e7ea      	b.n	3bd2 <_fflush_r+0xe>
    3bfc:	4b05      	ldr	r3, [pc, #20]	; (3c14 <_fflush_r+0x50>)
    3bfe:	429c      	cmp	r4, r3
    3c00:	d101      	bne.n	3c06 <_fflush_r+0x42>
    3c02:	68ac      	ldr	r4, [r5, #8]
    3c04:	e7f1      	b.n	3bea <_fflush_r+0x26>
    3c06:	4b04      	ldr	r3, [pc, #16]	; (3c18 <_fflush_r+0x54>)
    3c08:	429c      	cmp	r4, r3
    3c0a:	d1ee      	bne.n	3bea <_fflush_r+0x26>
    3c0c:	68ec      	ldr	r4, [r5, #12]
    3c0e:	e7ec      	b.n	3bea <_fflush_r+0x26>
    3c10:	000042e8 	.word	0x000042e8
    3c14:	00004308 	.word	0x00004308
    3c18:	000042c8 	.word	0x000042c8

00003c1c <_cleanup_r>:
    3c1c:	b510      	push	{r4, lr}
    3c1e:	4902      	ldr	r1, [pc, #8]	; (3c28 <_cleanup_r+0xc>)
    3c20:	f000 f8b2 	bl	3d88 <_fwalk_reent>
    3c24:	bd10      	pop	{r4, pc}
    3c26:	46c0      	nop			; (mov r8, r8)
    3c28:	00003bc5 	.word	0x00003bc5

00003c2c <std.isra.0>:
    3c2c:	2300      	movs	r3, #0
    3c2e:	b510      	push	{r4, lr}
    3c30:	0004      	movs	r4, r0
    3c32:	6003      	str	r3, [r0, #0]
    3c34:	6043      	str	r3, [r0, #4]
    3c36:	6083      	str	r3, [r0, #8]
    3c38:	8181      	strh	r1, [r0, #12]
    3c3a:	6643      	str	r3, [r0, #100]	; 0x64
    3c3c:	81c2      	strh	r2, [r0, #14]
    3c3e:	6103      	str	r3, [r0, #16]
    3c40:	6143      	str	r3, [r0, #20]
    3c42:	6183      	str	r3, [r0, #24]
    3c44:	0019      	movs	r1, r3
    3c46:	2208      	movs	r2, #8
    3c48:	305c      	adds	r0, #92	; 0x5c
    3c4a:	f7ff fe74 	bl	3936 <memset>
    3c4e:	4b05      	ldr	r3, [pc, #20]	; (3c64 <std.isra.0+0x38>)
    3c50:	6224      	str	r4, [r4, #32]
    3c52:	6263      	str	r3, [r4, #36]	; 0x24
    3c54:	4b04      	ldr	r3, [pc, #16]	; (3c68 <std.isra.0+0x3c>)
    3c56:	62a3      	str	r3, [r4, #40]	; 0x28
    3c58:	4b04      	ldr	r3, [pc, #16]	; (3c6c <std.isra.0+0x40>)
    3c5a:	62e3      	str	r3, [r4, #44]	; 0x2c
    3c5c:	4b04      	ldr	r3, [pc, #16]	; (3c70 <std.isra.0+0x44>)
    3c5e:	6323      	str	r3, [r4, #48]	; 0x30
    3c60:	bd10      	pop	{r4, pc}
    3c62:	46c0      	nop			; (mov r8, r8)
    3c64:	00003fa5 	.word	0x00003fa5
    3c68:	00003fcd 	.word	0x00003fcd
    3c6c:	00004005 	.word	0x00004005
    3c70:	00004031 	.word	0x00004031

00003c74 <__sfmoreglue>:
    3c74:	b570      	push	{r4, r5, r6, lr}
    3c76:	2568      	movs	r5, #104	; 0x68
    3c78:	1e4a      	subs	r2, r1, #1
    3c7a:	4355      	muls	r5, r2
    3c7c:	000e      	movs	r6, r1
    3c7e:	0029      	movs	r1, r5
    3c80:	3174      	adds	r1, #116	; 0x74
    3c82:	f000 f91f 	bl	3ec4 <_malloc_r>
    3c86:	1e04      	subs	r4, r0, #0
    3c88:	d008      	beq.n	3c9c <__sfmoreglue+0x28>
    3c8a:	2100      	movs	r1, #0
    3c8c:	002a      	movs	r2, r5
    3c8e:	6001      	str	r1, [r0, #0]
    3c90:	6046      	str	r6, [r0, #4]
    3c92:	300c      	adds	r0, #12
    3c94:	60a0      	str	r0, [r4, #8]
    3c96:	3268      	adds	r2, #104	; 0x68
    3c98:	f7ff fe4d 	bl	3936 <memset>
    3c9c:	0020      	movs	r0, r4
    3c9e:	bd70      	pop	{r4, r5, r6, pc}

00003ca0 <__sinit>:
    3ca0:	6983      	ldr	r3, [r0, #24]
    3ca2:	b513      	push	{r0, r1, r4, lr}
    3ca4:	0004      	movs	r4, r0
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	d128      	bne.n	3cfc <__sinit+0x5c>
    3caa:	6483      	str	r3, [r0, #72]	; 0x48
    3cac:	64c3      	str	r3, [r0, #76]	; 0x4c
    3cae:	6503      	str	r3, [r0, #80]	; 0x50
    3cb0:	4b13      	ldr	r3, [pc, #76]	; (3d00 <__sinit+0x60>)
    3cb2:	4a14      	ldr	r2, [pc, #80]	; (3d04 <__sinit+0x64>)
    3cb4:	681b      	ldr	r3, [r3, #0]
    3cb6:	6282      	str	r2, [r0, #40]	; 0x28
    3cb8:	9301      	str	r3, [sp, #4]
    3cba:	4298      	cmp	r0, r3
    3cbc:	d101      	bne.n	3cc2 <__sinit+0x22>
    3cbe:	2301      	movs	r3, #1
    3cc0:	6183      	str	r3, [r0, #24]
    3cc2:	0020      	movs	r0, r4
    3cc4:	f000 f820 	bl	3d08 <__sfp>
    3cc8:	6060      	str	r0, [r4, #4]
    3cca:	0020      	movs	r0, r4
    3ccc:	f000 f81c 	bl	3d08 <__sfp>
    3cd0:	60a0      	str	r0, [r4, #8]
    3cd2:	0020      	movs	r0, r4
    3cd4:	f000 f818 	bl	3d08 <__sfp>
    3cd8:	2200      	movs	r2, #0
    3cda:	60e0      	str	r0, [r4, #12]
    3cdc:	2104      	movs	r1, #4
    3cde:	6860      	ldr	r0, [r4, #4]
    3ce0:	f7ff ffa4 	bl	3c2c <std.isra.0>
    3ce4:	2201      	movs	r2, #1
    3ce6:	2109      	movs	r1, #9
    3ce8:	68a0      	ldr	r0, [r4, #8]
    3cea:	f7ff ff9f 	bl	3c2c <std.isra.0>
    3cee:	2202      	movs	r2, #2
    3cf0:	2112      	movs	r1, #18
    3cf2:	68e0      	ldr	r0, [r4, #12]
    3cf4:	f7ff ff9a 	bl	3c2c <std.isra.0>
    3cf8:	2301      	movs	r3, #1
    3cfa:	61a3      	str	r3, [r4, #24]
    3cfc:	bd13      	pop	{r0, r1, r4, pc}
    3cfe:	46c0      	nop			; (mov r8, r8)
    3d00:	000042c4 	.word	0x000042c4
    3d04:	00003c1d 	.word	0x00003c1d

00003d08 <__sfp>:
    3d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d0a:	4b1e      	ldr	r3, [pc, #120]	; (3d84 <__sfp+0x7c>)
    3d0c:	0007      	movs	r7, r0
    3d0e:	681e      	ldr	r6, [r3, #0]
    3d10:	69b3      	ldr	r3, [r6, #24]
    3d12:	2b00      	cmp	r3, #0
    3d14:	d102      	bne.n	3d1c <__sfp+0x14>
    3d16:	0030      	movs	r0, r6
    3d18:	f7ff ffc2 	bl	3ca0 <__sinit>
    3d1c:	3648      	adds	r6, #72	; 0x48
    3d1e:	68b4      	ldr	r4, [r6, #8]
    3d20:	6873      	ldr	r3, [r6, #4]
    3d22:	3b01      	subs	r3, #1
    3d24:	d504      	bpl.n	3d30 <__sfp+0x28>
    3d26:	6833      	ldr	r3, [r6, #0]
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d007      	beq.n	3d3c <__sfp+0x34>
    3d2c:	6836      	ldr	r6, [r6, #0]
    3d2e:	e7f6      	b.n	3d1e <__sfp+0x16>
    3d30:	220c      	movs	r2, #12
    3d32:	5ea5      	ldrsh	r5, [r4, r2]
    3d34:	2d00      	cmp	r5, #0
    3d36:	d00d      	beq.n	3d54 <__sfp+0x4c>
    3d38:	3468      	adds	r4, #104	; 0x68
    3d3a:	e7f2      	b.n	3d22 <__sfp+0x1a>
    3d3c:	2104      	movs	r1, #4
    3d3e:	0038      	movs	r0, r7
    3d40:	f7ff ff98 	bl	3c74 <__sfmoreglue>
    3d44:	6030      	str	r0, [r6, #0]
    3d46:	2800      	cmp	r0, #0
    3d48:	d1f0      	bne.n	3d2c <__sfp+0x24>
    3d4a:	230c      	movs	r3, #12
    3d4c:	0004      	movs	r4, r0
    3d4e:	603b      	str	r3, [r7, #0]
    3d50:	0020      	movs	r0, r4
    3d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d54:	2301      	movs	r3, #1
    3d56:	0020      	movs	r0, r4
    3d58:	425b      	negs	r3, r3
    3d5a:	81e3      	strh	r3, [r4, #14]
    3d5c:	3302      	adds	r3, #2
    3d5e:	81a3      	strh	r3, [r4, #12]
    3d60:	6665      	str	r5, [r4, #100]	; 0x64
    3d62:	6025      	str	r5, [r4, #0]
    3d64:	60a5      	str	r5, [r4, #8]
    3d66:	6065      	str	r5, [r4, #4]
    3d68:	6125      	str	r5, [r4, #16]
    3d6a:	6165      	str	r5, [r4, #20]
    3d6c:	61a5      	str	r5, [r4, #24]
    3d6e:	2208      	movs	r2, #8
    3d70:	0029      	movs	r1, r5
    3d72:	305c      	adds	r0, #92	; 0x5c
    3d74:	f7ff fddf 	bl	3936 <memset>
    3d78:	6365      	str	r5, [r4, #52]	; 0x34
    3d7a:	63a5      	str	r5, [r4, #56]	; 0x38
    3d7c:	64a5      	str	r5, [r4, #72]	; 0x48
    3d7e:	64e5      	str	r5, [r4, #76]	; 0x4c
    3d80:	e7e6      	b.n	3d50 <__sfp+0x48>
    3d82:	46c0      	nop			; (mov r8, r8)
    3d84:	000042c4 	.word	0x000042c4

00003d88 <_fwalk_reent>:
    3d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3d8a:	0004      	movs	r4, r0
    3d8c:	0007      	movs	r7, r0
    3d8e:	2600      	movs	r6, #0
    3d90:	9101      	str	r1, [sp, #4]
    3d92:	3448      	adds	r4, #72	; 0x48
    3d94:	2c00      	cmp	r4, #0
    3d96:	d101      	bne.n	3d9c <_fwalk_reent+0x14>
    3d98:	0030      	movs	r0, r6
    3d9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3d9c:	6863      	ldr	r3, [r4, #4]
    3d9e:	68a5      	ldr	r5, [r4, #8]
    3da0:	9300      	str	r3, [sp, #0]
    3da2:	9b00      	ldr	r3, [sp, #0]
    3da4:	3b01      	subs	r3, #1
    3da6:	9300      	str	r3, [sp, #0]
    3da8:	d501      	bpl.n	3dae <_fwalk_reent+0x26>
    3daa:	6824      	ldr	r4, [r4, #0]
    3dac:	e7f2      	b.n	3d94 <_fwalk_reent+0xc>
    3dae:	89ab      	ldrh	r3, [r5, #12]
    3db0:	2b01      	cmp	r3, #1
    3db2:	d908      	bls.n	3dc6 <_fwalk_reent+0x3e>
    3db4:	220e      	movs	r2, #14
    3db6:	5eab      	ldrsh	r3, [r5, r2]
    3db8:	3301      	adds	r3, #1
    3dba:	d004      	beq.n	3dc6 <_fwalk_reent+0x3e>
    3dbc:	0029      	movs	r1, r5
    3dbe:	0038      	movs	r0, r7
    3dc0:	9b01      	ldr	r3, [sp, #4]
    3dc2:	4798      	blx	r3
    3dc4:	4306      	orrs	r6, r0
    3dc6:	3568      	adds	r5, #104	; 0x68
    3dc8:	e7eb      	b.n	3da2 <_fwalk_reent+0x1a>
	...

00003dcc <__swhatbuf_r>:
    3dcc:	b570      	push	{r4, r5, r6, lr}
    3dce:	000e      	movs	r6, r1
    3dd0:	001d      	movs	r5, r3
    3dd2:	230e      	movs	r3, #14
    3dd4:	5ec9      	ldrsh	r1, [r1, r3]
    3dd6:	b090      	sub	sp, #64	; 0x40
    3dd8:	0014      	movs	r4, r2
    3dda:	2900      	cmp	r1, #0
    3ddc:	da07      	bge.n	3dee <__swhatbuf_r+0x22>
    3dde:	2300      	movs	r3, #0
    3de0:	602b      	str	r3, [r5, #0]
    3de2:	89b3      	ldrh	r3, [r6, #12]
    3de4:	061b      	lsls	r3, r3, #24
    3de6:	d411      	bmi.n	3e0c <__swhatbuf_r+0x40>
    3de8:	2380      	movs	r3, #128	; 0x80
    3dea:	00db      	lsls	r3, r3, #3
    3dec:	e00f      	b.n	3e0e <__swhatbuf_r+0x42>
    3dee:	aa01      	add	r2, sp, #4
    3df0:	f000 f94a 	bl	4088 <_fstat_r>
    3df4:	2800      	cmp	r0, #0
    3df6:	dbf2      	blt.n	3dde <__swhatbuf_r+0x12>
    3df8:	22f0      	movs	r2, #240	; 0xf0
    3dfa:	9b02      	ldr	r3, [sp, #8]
    3dfc:	0212      	lsls	r2, r2, #8
    3dfe:	4013      	ands	r3, r2
    3e00:	4a05      	ldr	r2, [pc, #20]	; (3e18 <__swhatbuf_r+0x4c>)
    3e02:	189b      	adds	r3, r3, r2
    3e04:	425a      	negs	r2, r3
    3e06:	4153      	adcs	r3, r2
    3e08:	602b      	str	r3, [r5, #0]
    3e0a:	e7ed      	b.n	3de8 <__swhatbuf_r+0x1c>
    3e0c:	2340      	movs	r3, #64	; 0x40
    3e0e:	2000      	movs	r0, #0
    3e10:	6023      	str	r3, [r4, #0]
    3e12:	b010      	add	sp, #64	; 0x40
    3e14:	bd70      	pop	{r4, r5, r6, pc}
    3e16:	46c0      	nop			; (mov r8, r8)
    3e18:	ffffe000 	.word	0xffffe000

00003e1c <malloc>:
    3e1c:	b510      	push	{r4, lr}
    3e1e:	4b03      	ldr	r3, [pc, #12]	; (3e2c <malloc+0x10>)
    3e20:	0001      	movs	r1, r0
    3e22:	6818      	ldr	r0, [r3, #0]
    3e24:	f000 f84e 	bl	3ec4 <_malloc_r>
    3e28:	bd10      	pop	{r4, pc}
    3e2a:	46c0      	nop			; (mov r8, r8)
    3e2c:	200000d0 	.word	0x200000d0

00003e30 <_free_r>:
    3e30:	b570      	push	{r4, r5, r6, lr}
    3e32:	0005      	movs	r5, r0
    3e34:	2900      	cmp	r1, #0
    3e36:	d010      	beq.n	3e5a <_free_r+0x2a>
    3e38:	1f0c      	subs	r4, r1, #4
    3e3a:	6823      	ldr	r3, [r4, #0]
    3e3c:	2b00      	cmp	r3, #0
    3e3e:	da00      	bge.n	3e42 <_free_r+0x12>
    3e40:	18e4      	adds	r4, r4, r3
    3e42:	0028      	movs	r0, r5
    3e44:	f000 f946 	bl	40d4 <__malloc_lock>
    3e48:	4a1d      	ldr	r2, [pc, #116]	; (3ec0 <_free_r+0x90>)
    3e4a:	6813      	ldr	r3, [r2, #0]
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	d105      	bne.n	3e5c <_free_r+0x2c>
    3e50:	6063      	str	r3, [r4, #4]
    3e52:	6014      	str	r4, [r2, #0]
    3e54:	0028      	movs	r0, r5
    3e56:	f000 f93e 	bl	40d6 <__malloc_unlock>
    3e5a:	bd70      	pop	{r4, r5, r6, pc}
    3e5c:	42a3      	cmp	r3, r4
    3e5e:	d909      	bls.n	3e74 <_free_r+0x44>
    3e60:	6821      	ldr	r1, [r4, #0]
    3e62:	1860      	adds	r0, r4, r1
    3e64:	4283      	cmp	r3, r0
    3e66:	d1f3      	bne.n	3e50 <_free_r+0x20>
    3e68:	6818      	ldr	r0, [r3, #0]
    3e6a:	685b      	ldr	r3, [r3, #4]
    3e6c:	1841      	adds	r1, r0, r1
    3e6e:	6021      	str	r1, [r4, #0]
    3e70:	e7ee      	b.n	3e50 <_free_r+0x20>
    3e72:	0013      	movs	r3, r2
    3e74:	685a      	ldr	r2, [r3, #4]
    3e76:	2a00      	cmp	r2, #0
    3e78:	d001      	beq.n	3e7e <_free_r+0x4e>
    3e7a:	42a2      	cmp	r2, r4
    3e7c:	d9f9      	bls.n	3e72 <_free_r+0x42>
    3e7e:	6819      	ldr	r1, [r3, #0]
    3e80:	1858      	adds	r0, r3, r1
    3e82:	42a0      	cmp	r0, r4
    3e84:	d10b      	bne.n	3e9e <_free_r+0x6e>
    3e86:	6820      	ldr	r0, [r4, #0]
    3e88:	1809      	adds	r1, r1, r0
    3e8a:	1858      	adds	r0, r3, r1
    3e8c:	6019      	str	r1, [r3, #0]
    3e8e:	4282      	cmp	r2, r0
    3e90:	d1e0      	bne.n	3e54 <_free_r+0x24>
    3e92:	6810      	ldr	r0, [r2, #0]
    3e94:	6852      	ldr	r2, [r2, #4]
    3e96:	1841      	adds	r1, r0, r1
    3e98:	6019      	str	r1, [r3, #0]
    3e9a:	605a      	str	r2, [r3, #4]
    3e9c:	e7da      	b.n	3e54 <_free_r+0x24>
    3e9e:	42a0      	cmp	r0, r4
    3ea0:	d902      	bls.n	3ea8 <_free_r+0x78>
    3ea2:	230c      	movs	r3, #12
    3ea4:	602b      	str	r3, [r5, #0]
    3ea6:	e7d5      	b.n	3e54 <_free_r+0x24>
    3ea8:	6821      	ldr	r1, [r4, #0]
    3eaa:	1860      	adds	r0, r4, r1
    3eac:	4282      	cmp	r2, r0
    3eae:	d103      	bne.n	3eb8 <_free_r+0x88>
    3eb0:	6810      	ldr	r0, [r2, #0]
    3eb2:	6852      	ldr	r2, [r2, #4]
    3eb4:	1841      	adds	r1, r0, r1
    3eb6:	6021      	str	r1, [r4, #0]
    3eb8:	6062      	str	r2, [r4, #4]
    3eba:	605c      	str	r4, [r3, #4]
    3ebc:	e7ca      	b.n	3e54 <_free_r+0x24>
    3ebe:	46c0      	nop			; (mov r8, r8)
    3ec0:	2000049c 	.word	0x2000049c

00003ec4 <_malloc_r>:
    3ec4:	2303      	movs	r3, #3
    3ec6:	b570      	push	{r4, r5, r6, lr}
    3ec8:	1ccd      	adds	r5, r1, #3
    3eca:	439d      	bics	r5, r3
    3ecc:	3508      	adds	r5, #8
    3ece:	0006      	movs	r6, r0
    3ed0:	2d0c      	cmp	r5, #12
    3ed2:	d21e      	bcs.n	3f12 <_malloc_r+0x4e>
    3ed4:	250c      	movs	r5, #12
    3ed6:	42a9      	cmp	r1, r5
    3ed8:	d81d      	bhi.n	3f16 <_malloc_r+0x52>
    3eda:	0030      	movs	r0, r6
    3edc:	f000 f8fa 	bl	40d4 <__malloc_lock>
    3ee0:	4a25      	ldr	r2, [pc, #148]	; (3f78 <_malloc_r+0xb4>)
    3ee2:	6814      	ldr	r4, [r2, #0]
    3ee4:	0021      	movs	r1, r4
    3ee6:	2900      	cmp	r1, #0
    3ee8:	d119      	bne.n	3f1e <_malloc_r+0x5a>
    3eea:	4c24      	ldr	r4, [pc, #144]	; (3f7c <_malloc_r+0xb8>)
    3eec:	6823      	ldr	r3, [r4, #0]
    3eee:	2b00      	cmp	r3, #0
    3ef0:	d103      	bne.n	3efa <_malloc_r+0x36>
    3ef2:	0030      	movs	r0, r6
    3ef4:	f000 f844 	bl	3f80 <_sbrk_r>
    3ef8:	6020      	str	r0, [r4, #0]
    3efa:	0029      	movs	r1, r5
    3efc:	0030      	movs	r0, r6
    3efe:	f000 f83f 	bl	3f80 <_sbrk_r>
    3f02:	1c43      	adds	r3, r0, #1
    3f04:	d12c      	bne.n	3f60 <_malloc_r+0x9c>
    3f06:	230c      	movs	r3, #12
    3f08:	0030      	movs	r0, r6
    3f0a:	6033      	str	r3, [r6, #0]
    3f0c:	f000 f8e3 	bl	40d6 <__malloc_unlock>
    3f10:	e003      	b.n	3f1a <_malloc_r+0x56>
    3f12:	2d00      	cmp	r5, #0
    3f14:	dadf      	bge.n	3ed6 <_malloc_r+0x12>
    3f16:	230c      	movs	r3, #12
    3f18:	6033      	str	r3, [r6, #0]
    3f1a:	2000      	movs	r0, #0
    3f1c:	bd70      	pop	{r4, r5, r6, pc}
    3f1e:	680b      	ldr	r3, [r1, #0]
    3f20:	1b5b      	subs	r3, r3, r5
    3f22:	d41a      	bmi.n	3f5a <_malloc_r+0x96>
    3f24:	2b0b      	cmp	r3, #11
    3f26:	d903      	bls.n	3f30 <_malloc_r+0x6c>
    3f28:	600b      	str	r3, [r1, #0]
    3f2a:	18cc      	adds	r4, r1, r3
    3f2c:	6025      	str	r5, [r4, #0]
    3f2e:	e003      	b.n	3f38 <_malloc_r+0x74>
    3f30:	428c      	cmp	r4, r1
    3f32:	d10e      	bne.n	3f52 <_malloc_r+0x8e>
    3f34:	6863      	ldr	r3, [r4, #4]
    3f36:	6013      	str	r3, [r2, #0]
    3f38:	0030      	movs	r0, r6
    3f3a:	f000 f8cc 	bl	40d6 <__malloc_unlock>
    3f3e:	0020      	movs	r0, r4
    3f40:	2207      	movs	r2, #7
    3f42:	300b      	adds	r0, #11
    3f44:	1d23      	adds	r3, r4, #4
    3f46:	4390      	bics	r0, r2
    3f48:	1ac3      	subs	r3, r0, r3
    3f4a:	d0e7      	beq.n	3f1c <_malloc_r+0x58>
    3f4c:	425a      	negs	r2, r3
    3f4e:	50e2      	str	r2, [r4, r3]
    3f50:	e7e4      	b.n	3f1c <_malloc_r+0x58>
    3f52:	684b      	ldr	r3, [r1, #4]
    3f54:	6063      	str	r3, [r4, #4]
    3f56:	000c      	movs	r4, r1
    3f58:	e7ee      	b.n	3f38 <_malloc_r+0x74>
    3f5a:	000c      	movs	r4, r1
    3f5c:	6849      	ldr	r1, [r1, #4]
    3f5e:	e7c2      	b.n	3ee6 <_malloc_r+0x22>
    3f60:	2303      	movs	r3, #3
    3f62:	1cc4      	adds	r4, r0, #3
    3f64:	439c      	bics	r4, r3
    3f66:	42a0      	cmp	r0, r4
    3f68:	d0e0      	beq.n	3f2c <_malloc_r+0x68>
    3f6a:	1a21      	subs	r1, r4, r0
    3f6c:	0030      	movs	r0, r6
    3f6e:	f000 f807 	bl	3f80 <_sbrk_r>
    3f72:	1c43      	adds	r3, r0, #1
    3f74:	d1da      	bne.n	3f2c <_malloc_r+0x68>
    3f76:	e7c6      	b.n	3f06 <_malloc_r+0x42>
    3f78:	2000049c 	.word	0x2000049c
    3f7c:	200004a0 	.word	0x200004a0

00003f80 <_sbrk_r>:
    3f80:	2300      	movs	r3, #0
    3f82:	b570      	push	{r4, r5, r6, lr}
    3f84:	4c06      	ldr	r4, [pc, #24]	; (3fa0 <_sbrk_r+0x20>)
    3f86:	0005      	movs	r5, r0
    3f88:	0008      	movs	r0, r1
    3f8a:	6023      	str	r3, [r4, #0]
    3f8c:	f7fc ffd4 	bl	f38 <_sbrk>
    3f90:	1c43      	adds	r3, r0, #1
    3f92:	d103      	bne.n	3f9c <_sbrk_r+0x1c>
    3f94:	6823      	ldr	r3, [r4, #0]
    3f96:	2b00      	cmp	r3, #0
    3f98:	d000      	beq.n	3f9c <_sbrk_r+0x1c>
    3f9a:	602b      	str	r3, [r5, #0]
    3f9c:	bd70      	pop	{r4, r5, r6, pc}
    3f9e:	46c0      	nop			; (mov r8, r8)
    3fa0:	2000050c 	.word	0x2000050c

00003fa4 <__sread>:
    3fa4:	b570      	push	{r4, r5, r6, lr}
    3fa6:	000c      	movs	r4, r1
    3fa8:	250e      	movs	r5, #14
    3faa:	5f49      	ldrsh	r1, [r1, r5]
    3fac:	f000 f894 	bl	40d8 <_read_r>
    3fb0:	2800      	cmp	r0, #0
    3fb2:	db03      	blt.n	3fbc <__sread+0x18>
    3fb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3fb6:	181b      	adds	r3, r3, r0
    3fb8:	6563      	str	r3, [r4, #84]	; 0x54
    3fba:	bd70      	pop	{r4, r5, r6, pc}
    3fbc:	89a3      	ldrh	r3, [r4, #12]
    3fbe:	4a02      	ldr	r2, [pc, #8]	; (3fc8 <__sread+0x24>)
    3fc0:	4013      	ands	r3, r2
    3fc2:	81a3      	strh	r3, [r4, #12]
    3fc4:	e7f9      	b.n	3fba <__sread+0x16>
    3fc6:	46c0      	nop			; (mov r8, r8)
    3fc8:	ffffefff 	.word	0xffffefff

00003fcc <__swrite>:
    3fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fce:	001f      	movs	r7, r3
    3fd0:	898b      	ldrh	r3, [r1, #12]
    3fd2:	0005      	movs	r5, r0
    3fd4:	000c      	movs	r4, r1
    3fd6:	0016      	movs	r6, r2
    3fd8:	05db      	lsls	r3, r3, #23
    3fda:	d505      	bpl.n	3fe8 <__swrite+0x1c>
    3fdc:	230e      	movs	r3, #14
    3fde:	5ec9      	ldrsh	r1, [r1, r3]
    3fe0:	2200      	movs	r2, #0
    3fe2:	2302      	movs	r3, #2
    3fe4:	f000 f862 	bl	40ac <_lseek_r>
    3fe8:	89a3      	ldrh	r3, [r4, #12]
    3fea:	4a05      	ldr	r2, [pc, #20]	; (4000 <__swrite+0x34>)
    3fec:	0028      	movs	r0, r5
    3fee:	4013      	ands	r3, r2
    3ff0:	81a3      	strh	r3, [r4, #12]
    3ff2:	0032      	movs	r2, r6
    3ff4:	230e      	movs	r3, #14
    3ff6:	5ee1      	ldrsh	r1, [r4, r3]
    3ff8:	003b      	movs	r3, r7
    3ffa:	f000 f81f 	bl	403c <_write_r>
    3ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4000:	ffffefff 	.word	0xffffefff

00004004 <__sseek>:
    4004:	b570      	push	{r4, r5, r6, lr}
    4006:	000c      	movs	r4, r1
    4008:	250e      	movs	r5, #14
    400a:	5f49      	ldrsh	r1, [r1, r5]
    400c:	f000 f84e 	bl	40ac <_lseek_r>
    4010:	89a3      	ldrh	r3, [r4, #12]
    4012:	1c42      	adds	r2, r0, #1
    4014:	d103      	bne.n	401e <__sseek+0x1a>
    4016:	4a05      	ldr	r2, [pc, #20]	; (402c <__sseek+0x28>)
    4018:	4013      	ands	r3, r2
    401a:	81a3      	strh	r3, [r4, #12]
    401c:	bd70      	pop	{r4, r5, r6, pc}
    401e:	2280      	movs	r2, #128	; 0x80
    4020:	0152      	lsls	r2, r2, #5
    4022:	4313      	orrs	r3, r2
    4024:	81a3      	strh	r3, [r4, #12]
    4026:	6560      	str	r0, [r4, #84]	; 0x54
    4028:	e7f8      	b.n	401c <__sseek+0x18>
    402a:	46c0      	nop			; (mov r8, r8)
    402c:	ffffefff 	.word	0xffffefff

00004030 <__sclose>:
    4030:	b510      	push	{r4, lr}
    4032:	230e      	movs	r3, #14
    4034:	5ec9      	ldrsh	r1, [r1, r3]
    4036:	f000 f815 	bl	4064 <_close_r>
    403a:	bd10      	pop	{r4, pc}

0000403c <_write_r>:
    403c:	b570      	push	{r4, r5, r6, lr}
    403e:	0005      	movs	r5, r0
    4040:	0008      	movs	r0, r1
    4042:	0011      	movs	r1, r2
    4044:	2200      	movs	r2, #0
    4046:	4c06      	ldr	r4, [pc, #24]	; (4060 <_write_r+0x24>)
    4048:	6022      	str	r2, [r4, #0]
    404a:	001a      	movs	r2, r3
    404c:	f7fe fe18 	bl	2c80 <_write>
    4050:	1c43      	adds	r3, r0, #1
    4052:	d103      	bne.n	405c <_write_r+0x20>
    4054:	6823      	ldr	r3, [r4, #0]
    4056:	2b00      	cmp	r3, #0
    4058:	d000      	beq.n	405c <_write_r+0x20>
    405a:	602b      	str	r3, [r5, #0]
    405c:	bd70      	pop	{r4, r5, r6, pc}
    405e:	46c0      	nop			; (mov r8, r8)
    4060:	2000050c 	.word	0x2000050c

00004064 <_close_r>:
    4064:	2300      	movs	r3, #0
    4066:	b570      	push	{r4, r5, r6, lr}
    4068:	4c06      	ldr	r4, [pc, #24]	; (4084 <_close_r+0x20>)
    406a:	0005      	movs	r5, r0
    406c:	0008      	movs	r0, r1
    406e:	6023      	str	r3, [r4, #0]
    4070:	f7fc ff74 	bl	f5c <_close>
    4074:	1c43      	adds	r3, r0, #1
    4076:	d103      	bne.n	4080 <_close_r+0x1c>
    4078:	6823      	ldr	r3, [r4, #0]
    407a:	2b00      	cmp	r3, #0
    407c:	d000      	beq.n	4080 <_close_r+0x1c>
    407e:	602b      	str	r3, [r5, #0]
    4080:	bd70      	pop	{r4, r5, r6, pc}
    4082:	46c0      	nop			; (mov r8, r8)
    4084:	2000050c 	.word	0x2000050c

00004088 <_fstat_r>:
    4088:	2300      	movs	r3, #0
    408a:	b570      	push	{r4, r5, r6, lr}
    408c:	4c06      	ldr	r4, [pc, #24]	; (40a8 <_fstat_r+0x20>)
    408e:	0005      	movs	r5, r0
    4090:	0008      	movs	r0, r1
    4092:	0011      	movs	r1, r2
    4094:	6023      	str	r3, [r4, #0]
    4096:	f7fc ff64 	bl	f62 <_fstat>
    409a:	1c43      	adds	r3, r0, #1
    409c:	d103      	bne.n	40a6 <_fstat_r+0x1e>
    409e:	6823      	ldr	r3, [r4, #0]
    40a0:	2b00      	cmp	r3, #0
    40a2:	d000      	beq.n	40a6 <_fstat_r+0x1e>
    40a4:	602b      	str	r3, [r5, #0]
    40a6:	bd70      	pop	{r4, r5, r6, pc}
    40a8:	2000050c 	.word	0x2000050c

000040ac <_lseek_r>:
    40ac:	b570      	push	{r4, r5, r6, lr}
    40ae:	0005      	movs	r5, r0
    40b0:	0008      	movs	r0, r1
    40b2:	0011      	movs	r1, r2
    40b4:	2200      	movs	r2, #0
    40b6:	4c06      	ldr	r4, [pc, #24]	; (40d0 <_lseek_r+0x24>)
    40b8:	6022      	str	r2, [r4, #0]
    40ba:	001a      	movs	r2, r3
    40bc:	f7fc ff56 	bl	f6c <_lseek>
    40c0:	1c43      	adds	r3, r0, #1
    40c2:	d103      	bne.n	40cc <_lseek_r+0x20>
    40c4:	6823      	ldr	r3, [r4, #0]
    40c6:	2b00      	cmp	r3, #0
    40c8:	d000      	beq.n	40cc <_lseek_r+0x20>
    40ca:	602b      	str	r3, [r5, #0]
    40cc:	bd70      	pop	{r4, r5, r6, pc}
    40ce:	46c0      	nop			; (mov r8, r8)
    40d0:	2000050c 	.word	0x2000050c

000040d4 <__malloc_lock>:
    40d4:	4770      	bx	lr

000040d6 <__malloc_unlock>:
    40d6:	4770      	bx	lr

000040d8 <_read_r>:
    40d8:	b570      	push	{r4, r5, r6, lr}
    40da:	0005      	movs	r5, r0
    40dc:	0008      	movs	r0, r1
    40de:	0011      	movs	r1, r2
    40e0:	2200      	movs	r2, #0
    40e2:	4c06      	ldr	r4, [pc, #24]	; (40fc <_read_r+0x24>)
    40e4:	6022      	str	r2, [r4, #0]
    40e6:	001a      	movs	r2, r3
    40e8:	f7fe fdb6 	bl	2c58 <_read>
    40ec:	1c43      	adds	r3, r0, #1
    40ee:	d103      	bne.n	40f8 <_read_r+0x20>
    40f0:	6823      	ldr	r3, [r4, #0]
    40f2:	2b00      	cmp	r3, #0
    40f4:	d000      	beq.n	40f8 <_read_r+0x20>
    40f6:	602b      	str	r3, [r5, #0]
    40f8:	bd70      	pop	{r4, r5, r6, pc}
    40fa:	46c0      	nop			; (mov r8, r8)
    40fc:	2000050c 	.word	0x2000050c
    4100:	682f2e2e 	.word	0x682f2e2e
    4104:	732f6c61 	.word	0x732f6c61
    4108:	682f6372 	.word	0x682f6372
    410c:	695f6c61 	.word	0x695f6c61
    4110:	00632e6f 	.word	0x00632e6f
    4114:	682f2e2e 	.word	0x682f2e2e
    4118:	732f6c61 	.word	0x732f6c61
    411c:	682f6372 	.word	0x682f6372
    4120:	705f6c61 	.word	0x705f6c61
    4124:	632e6d77 	.word	0x632e6d77
    4128:	00000000 	.word	0x00000000
    412c:	682f2e2e 	.word	0x682f2e2e
    4130:	732f6c61 	.word	0x732f6c61
    4134:	682f6372 	.word	0x682f6372
    4138:	745f6c61 	.word	0x745f6c61
    413c:	72656d69 	.word	0x72656d69
    4140:	0000632e 	.word	0x0000632e
    4144:	682f2e2e 	.word	0x682f2e2e
    4148:	732f6c61 	.word	0x732f6c61
    414c:	682f6372 	.word	0x682f6372
    4150:	755f6c61 	.word	0x755f6c61
    4154:	74726173 	.word	0x74726173
    4158:	6e79735f 	.word	0x6e79735f
    415c:	00632e63 	.word	0x00632e63
    4160:	682f2e2e 	.word	0x682f2e2e
    4164:	752f6c61 	.word	0x752f6c61
    4168:	736c6974 	.word	0x736c6974
    416c:	6372732f 	.word	0x6372732f
    4170:	6974752f 	.word	0x6974752f
    4174:	6c5f736c 	.word	0x6c5f736c
    4178:	2e747369 	.word	0x2e747369
    417c:	00000063 	.word	0x00000063

00004180 <_map>:
    4180:	000000ff ffffffff 682f2e2e 652f6c70     ........../hpl/e
    4190:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

000041a0 <user_mux_confs>:
    41a0:	00010000 00030002 00050004 00070006     ................
    41b0:	00090008 000b000a 000d000c 000f000e     ................
    41c0:	00110010 00130012 00150014 00170016     ................
    41d0:	00190018 001b001a 0000001c              ............

000041dc <channel_confs>:
    41dc:	06340000 06350001 00000002 00000003     ..4...5.........
    41ec:	00000004 00000005 00000006 00000007     ................
    41fc:	00000008 00000009 0000000a 0000000b     ................
    420c:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    421c:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
    422c:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    423c:	0000632e 682f2e2e 742f6c70 70682f63     .c..../hpl/tc/hp
    424c:	63745f6c 0000632e 00002000              l_tc.c... ..

00004258 <_usb_ep_cfgs>:
    4258:	20000394 00000000 00000040 20000354     ... ....@...T.. 
    4268:	00000000 00000040 20000314 00000000     ....@...... ....
    4278:	00000040 000035e8 000032d0 000035e8     @....5...2...5..
    4288:	00003302 000035e8 00003226 000035e8     .3...5..&2...5..
    4298:	000035e8 000035e8 0000323a 000035e8     .5...5..:2...5..
    42a8:	00003336 752f2e2e 642f6273 63697665     63..../usb/devic
    42b8:	73752f65 2e636462 00000063              e/usbdc.c...

000042c4 <_global_impure_ptr>:
    42c4:	200000d4                                ... 

000042c8 <__sf_fake_stderr>:
	...

000042e8 <__sf_fake_stdin>:
	...

00004308 <__sf_fake_stdout>:
	...

00004328 <_init>:
    4328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    432a:	46c0      	nop			; (mov r8, r8)
    432c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    432e:	bc08      	pop	{r3}
    4330:	469e      	mov	lr, r3
    4332:	4770      	bx	lr

00004334 <__init_array_start>:
    4334:	000000dd 	.word	0x000000dd

00004338 <_fini>:
    4338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    433a:	46c0      	nop			; (mov r8, r8)
    433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    433e:	bc08      	pop	{r3}
    4340:	469e      	mov	lr, r3
    4342:	4770      	bx	lr

00004344 <__fini_array_start>:
    4344:	000000b5 	.word	0x000000b5
