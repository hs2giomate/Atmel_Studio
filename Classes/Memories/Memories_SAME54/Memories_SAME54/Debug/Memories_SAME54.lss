
Memories_SAME54.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c74  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00003c74  00003c74  00013c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000049c  20000000  00003c7c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000006b4  2000049c  00004118  0002049c  2**2
                  ALLOC
  4 .stack        00002000  20000b50  000047cc  0002049c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000204c4  2**0
                  CONTENTS, READONLY
  7 .debug_info   00038936  00000000  00000000  0002051d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004b05  00000000  00000000  00058e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000160d0  00000000  00000000  0005d958  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000f00  00000000  00000000  00073a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000018a8  00000000  00000000  00074928  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001e3f8  00000000  00000000  000761d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001502e  00000000  00000000  000945c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00090a90  00000000  00000000  000a95f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002b2c  00000000  00000000  0013a088  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 2b 00 20 19 01 00 00 15 01 00 00 15 01 00 00     P+. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	25 28 00 00 15 01 00 00 15 01 00 00 15 01 00 00     %(..............
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000049c 	.word	0x2000049c
      d4:	00000000 	.word	0x00000000
      d8:	00003c7c 	.word	0x00003c7c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004a0 	.word	0x200004a0
     108:	00003c7c 	.word	0x00003c7c
     10c:	00003c7c 	.word	0x00003c7c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	00003c7c 	.word	0x00003c7c
     1c8:	20000000 	.word	0x20000000
     1cc:	2000049c 	.word	0x2000049c
     1d0:	20000004 	.word	0x20000004
     1d4:	2000049c 	.word	0x2000049c
     1d8:	20000b50 	.word	0x20000b50
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	000037e1 	.word	0x000037e1
     1f8:	000007d5 	.word	0x000007d5

000001fc <_ZN16FlashMemoryClassD1Ev>:
	spi_descriptor=spi_des;
	memoryAddress=flashMemory;
} //FlashMemoryClass

// default destructor
FlashMemoryClass::~FlashMemoryClass()
     1fc:	b510      	push	{r4, lr}
     1fe:	0004      	movs	r4, r0
     200:	3090      	adds	r0, #144	; 0x90
     202:	4b02      	ldr	r3, [pc, #8]	; (20c <_ZN16FlashMemoryClassD1Ev+0x10>)
     204:	4798      	blx	r3
{
} //~FlashMemoryClass
     206:	0020      	movs	r0, r4
     208:	bd10      	pop	{r4, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	000007f5 	.word	0x000007f5

00000210 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
     210:	b570      	push	{r4, r5, r6, lr}
     212:	0004      	movs	r4, r0
     214:	000d      	movs	r5, r1
     216:	3090      	adds	r0, #144	; 0x90
     218:	4b06      	ldr	r3, [pc, #24]	; (234 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x24>)
     21a:	4798      	blx	r3
	appParameters=defaultParameters;
     21c:	1d20      	adds	r0, r4, #4
     21e:	227c      	movs	r2, #124	; 0x7c
     220:	4905      	ldr	r1, [pc, #20]	; (238 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x28>)
     222:	4b06      	ldr	r3, [pc, #24]	; (23c <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x2c>)
     224:	4798      	blx	r3
	spi_descriptor=spi_des;
     226:	238c      	movs	r3, #140	; 0x8c
     228:	50e5      	str	r5, [r4, r3]
	memoryAddress=flashMemory;
     22a:	2300      	movs	r3, #0
     22c:	6023      	str	r3, [r4, #0]
} //FlashMemoryClass
     22e:	0020      	movs	r0, r4
     230:	bd70      	pop	{r4, r5, r6, pc}
     232:	46c0      	nop			; (mov r8, r8)
     234:	000007e9 	.word	0x000007e9
     238:	00003ad4 	.word	0x00003ad4
     23c:	00003829 	.word	0x00003829

00000240 <_ZN16FlashMemoryClass9flashOpenEv>:
}



void FlashMemoryClass::flashOpen(void)
{
     240:	b510      	push	{r4, lr}
     242:	0004      	movs	r4, r0
	garbage=spi.enable();
     244:	3090      	adds	r0, #144	; 0x90
     246:	4b02      	ldr	r3, [pc, #8]	; (250 <_ZN16FlashMemoryClass9flashOpenEv+0x10>)
     248:	4798      	blx	r3
     24a:	2380      	movs	r3, #128	; 0x80
     24c:	50e0      	str	r0, [r4, r3]
	
	
}
     24e:	bd10      	pop	{r4, pc}
     250:	00000829 	.word	0x00000829

00000254 <_ZN16FlashMemoryClass12CE_Low_FlashEv>:
	CE_High_Flash();
	return (uint8_t)src;
}
void FlashMemoryClass::CE_Low_Flash(void)
{
	garbage=0;
     254:	2200      	movs	r2, #0
     256:	2380      	movs	r3, #128	; 0x80
     258:	50c2      	str	r2, [r0, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     25a:	23c0      	movs	r3, #192	; 0xc0
     25c:	05db      	lsls	r3, r3, #23
     25e:	2280      	movs	r2, #128	; 0x80
     260:	0512      	lsls	r2, r2, #20
     262:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     264:	2280      	movs	r2, #128	; 0x80
     266:	0552      	lsls	r2, r2, #21
     268:	619a      	str	r2, [r3, #24]
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);
		gpio_set_pin_level(CS_FRAM,true);
}
     26a:	4770      	bx	lr

0000026c <_ZN16FlashMemoryClass13CE_High_FlashEv>:

void FlashMemoryClass::CE_High_Flash(void)
{
	garbage=0;
     26c:	2200      	movs	r2, #0
     26e:	2380      	movs	r3, #128	; 0x80
     270:	50c2      	str	r2, [r0, r3]
     272:	23c0      	movs	r3, #192	; 0xc0
     274:	05db      	lsls	r3, r3, #23
     276:	2280      	movs	r2, #128	; 0x80
     278:	0512      	lsls	r2, r2, #20
     27a:	619a      	str	r2, [r3, #24]
     27c:	2280      	movs	r2, #128	; 0x80
     27e:	0552      	lsls	r2, r2, #21
     280:	619a      	str	r2, [r3, #24]
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
	gpio_set_pin_level(CS_FRAM,true);
}
     282:	4770      	bx	lr

00000284 <_ZN16FlashMemoryClass9Send_ByteEh>:
uint8_t FlashMemoryClass::Send_Byte(uint8_t byte)
{
     284:	b510      	push	{r4, lr}
     286:	b082      	sub	sp, #8
     288:	466b      	mov	r3, sp
     28a:	1ddc      	adds	r4, r3, #7
     28c:	71d9      	strb	r1, [r3, #7]
	//WaitBusy();
	spi.write(&byte,1);
     28e:	3090      	adds	r0, #144	; 0x90
     290:	2201      	movs	r2, #1
     292:	0021      	movs	r1, r4
     294:	4b02      	ldr	r3, [pc, #8]	; (2a0 <_ZN16FlashMemoryClass9Send_ByteEh+0x1c>)
     296:	4798      	blx	r3
	return byte;
     298:	7820      	ldrb	r0, [r4, #0]
}
     29a:	b002      	add	sp, #8
     29c:	bd10      	pop	{r4, pc}
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	0000084d 	.word	0x0000084d

000002a4 <_ZN16FlashMemoryClass8Get_ByteEv>:

uint8_t FlashMemoryClass::Get_Byte(void)
{
     2a4:	b510      	push	{r4, lr}
     2a6:	b082      	sub	sp, #8
	uint8_t byte;
	//WaitBusy();
	spi.read(&byte,1);
     2a8:	466b      	mov	r3, sp
     2aa:	1ddc      	adds	r4, r3, #7
     2ac:	3090      	adds	r0, #144	; 0x90
     2ae:	2201      	movs	r2, #1
     2b0:	0021      	movs	r1, r4
     2b2:	4b02      	ldr	r3, [pc, #8]	; (2bc <_ZN16FlashMemoryClass8Get_ByteEv+0x18>)
     2b4:	4798      	blx	r3
	
	return byte;
     2b6:	7820      	ldrb	r0, [r4, #0]
}
     2b8:	b002      	add	sp, #8
     2ba:	bd10      	pop	{r4, pc}
     2bc:	0000086d 	.word	0x0000086d

000002c0 <_ZN16FlashMemoryClass4WRDIEv>:

}


void FlashMemoryClass::WRDI(void)
{
     2c0:	b510      	push	{r4, lr}
     2c2:	0004      	movs	r4, r0
	CE_Low_Flash();			// enable device
     2c4:	4b04      	ldr	r3, [pc, #16]	; (2d8 <_ZN16FlashMemoryClass4WRDIEv+0x18>)
     2c6:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
     2c8:	2104      	movs	r1, #4
     2ca:	0020      	movs	r0, r4
     2cc:	4b03      	ldr	r3, [pc, #12]	; (2dc <_ZN16FlashMemoryClass4WRDIEv+0x1c>)
     2ce:	4798      	blx	r3
//	WaitBusy();
	CE_High_Flash();			// disable device
     2d0:	0020      	movs	r0, r4
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <_ZN16FlashMemoryClass4WRDIEv+0x20>)
     2d4:	4798      	blx	r3
	
}
     2d6:	bd10      	pop	{r4, pc}
     2d8:	00000255 	.word	0x00000255
     2dc:	00000285 	.word	0x00000285
     2e0:	0000026d 	.word	0x0000026d

000002e4 <_ZN16FlashMemoryClass15Block_Erase_64KEm>:
	WRDI();
	}
	flashClose();
}
	
void	FlashMemoryClass::Block_Erase_64K(uint32_t Dst){
     2e4:	b570      	push	{r4, r5, r6, lr}
     2e6:	0004      	movs	r4, r0
     2e8:	000d      	movs	r5, r1

		CE_Low_Flash();				// enable device
     2ea:	4b0a      	ldr	r3, [pc, #40]	; (314 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x30>)
     2ec:	4798      	blx	r3
		Send_Byte(kFlash64KBlockErase);		// send Sector Erase command
     2ee:	21d8      	movs	r1, #216	; 0xd8
     2f0:	0020      	movs	r0, r4
     2f2:	4e09      	ldr	r6, [pc, #36]	; (318 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x34>)
     2f4:	47b0      	blx	r6
		Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
     2f6:	0c29      	lsrs	r1, r5, #16
     2f8:	b2c9      	uxtb	r1, r1
     2fa:	0020      	movs	r0, r4
     2fc:	47b0      	blx	r6
		Send_Byte(((Dst & 0xFFFF) >> 8));
     2fe:	0a29      	lsrs	r1, r5, #8
     300:	b2c9      	uxtb	r1, r1
     302:	0020      	movs	r0, r4
     304:	47b0      	blx	r6
		Send_Byte(Dst & 0xFF);
     306:	b2e9      	uxtb	r1, r5
     308:	0020      	movs	r0, r4
     30a:	47b0      	blx	r6
		CE_High_Flash();				// disable device
     30c:	0020      	movs	r0, r4
     30e:	4b03      	ldr	r3, [pc, #12]	; (31c <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x38>)
     310:	4798      	blx	r3
		
}
     312:	bd70      	pop	{r4, r5, r6, pc}
     314:	00000255 	.word	0x00000255
     318:	00000285 	.word	0x00000285
     31c:	0000026d 	.word	0x0000026d

00000320 <_ZN16FlashMemoryClass18ReadSingleRegisterEh>:
uint8_t  FlashMemoryClass::ReadFunctionRegister(void){
			// disable device
		return ReadSingleRegister(kFlashReadFunction);
	}
	
uint8_t  FlashMemoryClass::ReadSingleRegister(uint8_t r){
     320:	b570      	push	{r4, r5, r6, lr}
     322:	0004      	movs	r4, r0
     324:	000d      	movs	r5, r1
	uint8_t b = 0;
	CE_Low_Flash();			// enable device
     326:	4b07      	ldr	r3, [pc, #28]	; (344 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x24>)
     328:	4798      	blx	r3
	Send_Byte(r);	// send RDSR command
     32a:	0029      	movs	r1, r5
     32c:	0020      	movs	r0, r4
     32e:	4b06      	ldr	r3, [pc, #24]	; (348 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x28>)
     330:	4798      	blx	r3
	b = Get_Byte();		/* receive byte */
     332:	0020      	movs	r0, r4
     334:	4b05      	ldr	r3, [pc, #20]	; (34c <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x2c>)
     336:	4798      	blx	r3
     338:	0005      	movs	r5, r0
	CE_High_Flash();			// disable device
     33a:	0020      	movs	r0, r4
     33c:	4b04      	ldr	r3, [pc, #16]	; (350 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x30>)
     33e:	4798      	blx	r3
	return b;
}
     340:	0028      	movs	r0, r5
     342:	bd70      	pop	{r4, r5, r6, pc}
     344:	00000255 	.word	0x00000255
     348:	00000285 	.word	0x00000285
     34c:	000002a5 	.word	0x000002a5
     350:	0000026d 	.word	0x0000026d

00000354 <_ZN16FlashMemoryClass18ReadStatusRegisterEv>:
uint8_t  FlashMemoryClass::ReadStatusRegister(void){
     354:	b510      	push	{r4, lr}
     356:	0004      	movs	r4, r0
			status=ReadSingleRegister(kFlashReadSR);
     358:	2105      	movs	r1, #5
     35a:	4b02      	ldr	r3, [pc, #8]	; (364 <_ZN16FlashMemoryClass18ReadStatusRegisterEv+0x10>)
     35c:	4798      	blx	r3
     35e:	23bc      	movs	r3, #188	; 0xbc
     360:	54e0      	strb	r0, [r4, r3]
	}
     362:	bd10      	pop	{r4, pc}
     364:	00000321 	.word	0x00000321

00000368 <_ZN16FlashMemoryClass4WRENEv>:
{
     368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     36a:	0004      	movs	r4, r0
		CE_Low_Flash();			// enable device
     36c:	4f08      	ldr	r7, [pc, #32]	; (390 <_ZN16FlashMemoryClass4WRENEv+0x28>)
		Send_Byte(kFlashWREnable);	// send WREN command
     36e:	4e09      	ldr	r6, [pc, #36]	; (394 <_ZN16FlashMemoryClass4WRENEv+0x2c>)
		CE_High_Flash();
     370:	4d09      	ldr	r5, [pc, #36]	; (398 <_ZN16FlashMemoryClass4WRENEv+0x30>)
		CE_Low_Flash();			// enable device
     372:	0020      	movs	r0, r4
     374:	47b8      	blx	r7
		Send_Byte(kFlashWREnable);	// send WREN command
     376:	2106      	movs	r1, #6
     378:	0020      	movs	r0, r4
     37a:	47b0      	blx	r6
		CE_High_Flash();
     37c:	0020      	movs	r0, r4
     37e:	47a8      	blx	r5
		status=ReadStatusRegister();
     380:	0020      	movs	r0, r4
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <_ZN16FlashMemoryClass4WRENEv+0x34>)
     384:	4798      	blx	r3
     386:	23bc      	movs	r3, #188	; 0xbc
     388:	54e0      	strb	r0, [r4, r3]
	} while ((status&&(0x02))==0);
     38a:	2800      	cmp	r0, #0
     38c:	d0f1      	beq.n	372 <_ZN16FlashMemoryClass4WRENEv+0xa>
}
     38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     390:	00000255 	.word	0x00000255
     394:	00000285 	.word	0x00000285
     398:	0000026d 	.word	0x0000026d
     39c:	00000355 	.word	0x00000355

000003a0 <_ZN16FlashMemoryClass8WaitBusyEv>:
uint8_t  FlashMemoryClass::WaitBusy(void){
     3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3a2:	0004      	movs	r4, r0
	status = ReadStatusRegister();
     3a4:	4b08      	ldr	r3, [pc, #32]	; (3c8 <_ZN16FlashMemoryClass8WaitBusyEv+0x28>)
     3a6:	4798      	blx	r3
     3a8:	0003      	movs	r3, r0
     3aa:	22bc      	movs	r2, #188	; 0xbc
     3ac:	54a0      	strb	r0, [r4, r2]
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
     3ae:	07c2      	lsls	r2, r0, #31
     3b0:	d508      	bpl.n	3c4 <_ZN16FlashMemoryClass8WaitBusyEv+0x24>
			status = ReadStatusRegister();
     3b2:	4f05      	ldr	r7, [pc, #20]	; (3c8 <_ZN16FlashMemoryClass8WaitBusyEv+0x28>)
     3b4:	26bc      	movs	r6, #188	; 0xbc
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
     3b6:	2501      	movs	r5, #1
			status = ReadStatusRegister();
     3b8:	0020      	movs	r0, r4
     3ba:	47b8      	blx	r7
     3bc:	0003      	movs	r3, r0
     3be:	55a0      	strb	r0, [r4, r6]
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
     3c0:	4205      	tst	r5, r0
     3c2:	d1f9      	bne.n	3b8 <_ZN16FlashMemoryClass8WaitBusyEv+0x18>
	}
     3c4:	0018      	movs	r0, r3
     3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3c8:	00000355 	.word	0x00000355

000003cc <_ZN16FlashMemoryClass10flashCloseEv>:
	Send_Byte(byte);		/* receive byte */
	CE_High_Flash();			// disable device
	return byte;
}

void FlashMemoryClass::flashClose(void){
     3cc:	b510      	push	{r4, lr}
	garbage=0;
     3ce:	2200      	movs	r2, #0
     3d0:	2380      	movs	r3, #128	; 0x80
     3d2:	50c2      	str	r2, [r0, r3]
		spi.disable();
     3d4:	3090      	adds	r0, #144	; 0x90
     3d6:	4b01      	ldr	r3, [pc, #4]	; (3dc <_ZN16FlashMemoryClass10flashCloseEv+0x10>)
     3d8:	4798      	blx	r3
	}
     3da:	bd10      	pop	{r4, pc}
     3dc:	0000088d 	.word	0x0000088d

000003e0 <_ZN16FlashMemoryClass4InitEv>:
void	FlashMemoryClass::Init(void){
     3e0:	b570      	push	{r4, r5, r6, lr}
     3e2:	0004      	movs	r4, r0
	spi.SetDescriptor(spi_descriptor);
     3e4:	0005      	movs	r5, r0
     3e6:	3590      	adds	r5, #144	; 0x90
     3e8:	238c      	movs	r3, #140	; 0x8c
     3ea:	58c1      	ldr	r1, [r0, r3]
     3ec:	0028      	movs	r0, r5
     3ee:	4b09      	ldr	r3, [pc, #36]	; (414 <_ZN16FlashMemoryClass4InitEv+0x34>)
     3f0:	4798      	blx	r3
	spi.init();
     3f2:	0028      	movs	r0, r5
     3f4:	4b08      	ldr	r3, [pc, #32]	; (418 <_ZN16FlashMemoryClass4InitEv+0x38>)
     3f6:	4798      	blx	r3
	memoryAddress=0x00;
     3f8:	2300      	movs	r3, #0
     3fa:	6023      	str	r3, [r4, #0]
	flashOpen();
     3fc:	0020      	movs	r0, r4
     3fe:	4b07      	ldr	r3, [pc, #28]	; (41c <_ZN16FlashMemoryClass4InitEv+0x3c>)
     400:	4798      	blx	r3
	status=ReadStatusRegister();
     402:	0020      	movs	r0, r4
     404:	4b06      	ldr	r3, [pc, #24]	; (420 <_ZN16FlashMemoryClass4InitEv+0x40>)
     406:	4798      	blx	r3
     408:	23bc      	movs	r3, #188	; 0xbc
     40a:	54e0      	strb	r0, [r4, r3]
	flashClose();
     40c:	0020      	movs	r0, r4
     40e:	4b05      	ldr	r3, [pc, #20]	; (424 <_ZN16FlashMemoryClass4InitEv+0x44>)
     410:	4798      	blx	r3
}
     412:	bd70      	pop	{r4, r5, r6, pc}
     414:	0000081d 	.word	0x0000081d
     418:	000007f9 	.word	0x000007f9
     41c:	00000241 	.word	0x00000241
     420:	00000355 	.word	0x00000355
     424:	000003cd 	.word	0x000003cd

00000428 <_ZN16FlashMemoryClass7IsReadyEv>:
bool  FlashMemoryClass::IsReady(void){
     428:	b570      	push	{r4, r5, r6, lr}
     42a:	0004      	movs	r4, r0
	flashOpen();
     42c:	4b07      	ldr	r3, [pc, #28]	; (44c <_ZN16FlashMemoryClass7IsReadyEv+0x24>)
     42e:	4798      	blx	r3
	status = ReadStatusRegister();
     430:	0020      	movs	r0, r4
     432:	4b07      	ldr	r3, [pc, #28]	; (450 <_ZN16FlashMemoryClass7IsReadyEv+0x28>)
     434:	4798      	blx	r3
     436:	25bc      	movs	r5, #188	; 0xbc
     438:	5560      	strb	r0, [r4, r5]
	flashClose();
     43a:	0020      	movs	r0, r4
     43c:	4b05      	ldr	r3, [pc, #20]	; (454 <_ZN16FlashMemoryClass7IsReadyEv+0x2c>)
     43e:	4798      	blx	r3
	return	(status&0x01)==0;
     440:	5d60      	ldrb	r0, [r4, r5]
     442:	2301      	movs	r3, #1
     444:	4043      	eors	r3, r0
     446:	2001      	movs	r0, #1
     448:	4018      	ands	r0, r3
}
     44a:	bd70      	pop	{r4, r5, r6, pc}
     44c:	00000241 	.word	0x00000241
     450:	00000355 	.word	0x00000355
     454:	000003cd 	.word	0x000003cd

00000458 <_ZN16FlashMemoryClass12Sector_EraseEm>:
void FlashMemoryClass::Sector_Erase(uint32_t Dst)
{
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	0004      	movs	r4, r0
     45c:	000d      	movs	r5, r1
	CE_Low_Flash();				// enable device
     45e:	4b0a      	ldr	r3, [pc, #40]	; (488 <_ZN16FlashMemoryClass12Sector_EraseEm+0x30>)
     460:	4798      	blx	r3
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
     462:	2120      	movs	r1, #32
     464:	0020      	movs	r0, r4
     466:	4e09      	ldr	r6, [pc, #36]	; (48c <_ZN16FlashMemoryClass12Sector_EraseEm+0x34>)
     468:	47b0      	blx	r6
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
     46a:	0c29      	lsrs	r1, r5, #16
     46c:	b2c9      	uxtb	r1, r1
     46e:	0020      	movs	r0, r4
     470:	47b0      	blx	r6
	Send_Byte(((Dst & 0xFFFF) >> 8));
     472:	0a29      	lsrs	r1, r5, #8
     474:	b2c9      	uxtb	r1, r1
     476:	0020      	movs	r0, r4
     478:	47b0      	blx	r6
	Send_Byte(Dst & 0xFF);
     47a:	b2e9      	uxtb	r1, r5
     47c:	0020      	movs	r0, r4
     47e:	47b0      	blx	r6
	CE_High_Flash();				// disable device
     480:	0020      	movs	r0, r4
     482:	4b03      	ldr	r3, [pc, #12]	; (490 <_ZN16FlashMemoryClass12Sector_EraseEm+0x38>)
     484:	4798      	blx	r3
}
     486:	bd70      	pop	{r4, r5, r6, pc}
     488:	00000255 	.word	0x00000255
     48c:	00000285 	.word	0x00000285
     490:	0000026d 	.word	0x0000026d

00000494 <_ZN16FlashMemoryClass10eraseFlashEmm>:
	{
     494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     496:	0004      	movs	r4, r0
     498:	000e      	movs	r6, r1
     49a:	0015      	movs	r5, r2
	flashOpen();
     49c:	4b1d      	ldr	r3, [pc, #116]	; (514 <_ZN16FlashMemoryClass10eraseFlashEmm+0x80>)
     49e:	4798      	blx	r3
	while (eraseRemaining > 0)
     4a0:	2d00      	cmp	r5, #0
     4a2:	d00b      	beq.n	4bc <_ZN16FlashMemoryClass10eraseFlashEmm+0x28>
	WREN();
     4a4:	4f1c      	ldr	r7, [pc, #112]	; (518 <_ZN16FlashMemoryClass10eraseFlashEmm+0x84>)
     4a6:	e020      	b.n	4ea <_ZN16FlashMemoryClass10eraseFlashEmm+0x56>
		Sector_Erase(eraseAddress);
     4a8:	0031      	movs	r1, r6
     4aa:	0020      	movs	r0, r4
     4ac:	4b1b      	ldr	r3, [pc, #108]	; (51c <_ZN16FlashMemoryClass10eraseFlashEmm+0x88>)
     4ae:	4798      	blx	r3
	WaitBusy();
     4b0:	0020      	movs	r0, r4
     4b2:	4b1b      	ldr	r3, [pc, #108]	; (520 <_ZN16FlashMemoryClass10eraseFlashEmm+0x8c>)
     4b4:	4798      	blx	r3
	WRDI();
     4b6:	0020      	movs	r0, r4
     4b8:	4b1a      	ldr	r3, [pc, #104]	; (524 <_ZN16FlashMemoryClass10eraseFlashEmm+0x90>)
     4ba:	4798      	blx	r3
	flashClose();
     4bc:	0020      	movs	r0, r4
     4be:	4b1a      	ldr	r3, [pc, #104]	; (528 <_ZN16FlashMemoryClass10eraseFlashEmm+0x94>)
     4c0:	4798      	blx	r3
}
     4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Block_Erase_64K(eraseAddress);
     4c4:	0031      	movs	r1, r6
     4c6:	0020      	movs	r0, r4
     4c8:	4b18      	ldr	r3, [pc, #96]	; (52c <_ZN16FlashMemoryClass10eraseFlashEmm+0x98>)
     4ca:	4798      	blx	r3
		eraseAddress += (64 * 1024);
     4cc:	2380      	movs	r3, #128	; 0x80
     4ce:	025b      	lsls	r3, r3, #9
     4d0:	469c      	mov	ip, r3
     4d2:	4466      	add	r6, ip
		eraseRemaining -= (64 * 1024);
     4d4:	4b16      	ldr	r3, [pc, #88]	; (530 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>)
     4d6:	469c      	mov	ip, r3
     4d8:	4465      	add	r5, ip
	WaitBusy();
     4da:	0020      	movs	r0, r4
     4dc:	4b10      	ldr	r3, [pc, #64]	; (520 <_ZN16FlashMemoryClass10eraseFlashEmm+0x8c>)
     4de:	4798      	blx	r3
	WRDI();
     4e0:	0020      	movs	r0, r4
     4e2:	4b10      	ldr	r3, [pc, #64]	; (524 <_ZN16FlashMemoryClass10eraseFlashEmm+0x90>)
     4e4:	4798      	blx	r3
	while (eraseRemaining > 0)
     4e6:	2d00      	cmp	r5, #0
     4e8:	d0e8      	beq.n	4bc <_ZN16FlashMemoryClass10eraseFlashEmm+0x28>
	WREN();
     4ea:	0020      	movs	r0, r4
     4ec:	47b8      	blx	r7
	if (eraseRemaining <= 4 * 1024)
     4ee:	2380      	movs	r3, #128	; 0x80
     4f0:	015b      	lsls	r3, r3, #5
     4f2:	429d      	cmp	r5, r3
     4f4:	d9d8      	bls.n	4a8 <_ZN16FlashMemoryClass10eraseFlashEmm+0x14>
	else if (eraseRemaining < 64 * 1024)
     4f6:	4b0f      	ldr	r3, [pc, #60]	; (534 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa0>)
     4f8:	429d      	cmp	r5, r3
     4fa:	d8e3      	bhi.n	4c4 <_ZN16FlashMemoryClass10eraseFlashEmm+0x30>
		Sector_Erase(eraseAddress);
     4fc:	0031      	movs	r1, r6
     4fe:	0020      	movs	r0, r4
     500:	4b06      	ldr	r3, [pc, #24]	; (51c <_ZN16FlashMemoryClass10eraseFlashEmm+0x88>)
     502:	4798      	blx	r3
		eraseAddress += (4 * 1024);
     504:	2380      	movs	r3, #128	; 0x80
     506:	015b      	lsls	r3, r3, #5
     508:	469c      	mov	ip, r3
     50a:	4466      	add	r6, ip
		eraseRemaining -= (4 * 1024);
     50c:	4b0a      	ldr	r3, [pc, #40]	; (538 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
     50e:	469c      	mov	ip, r3
     510:	4465      	add	r5, ip
     512:	e7e2      	b.n	4da <_ZN16FlashMemoryClass10eraseFlashEmm+0x46>
     514:	00000241 	.word	0x00000241
     518:	00000369 	.word	0x00000369
     51c:	00000459 	.word	0x00000459
     520:	000003a1 	.word	0x000003a1
     524:	000002c1 	.word	0x000002c1
     528:	000003cd 	.word	0x000003cd
     52c:	000002e5 	.word	0x000002e5
     530:	ffff0000 	.word	0xffff0000
     534:	0000ffff 	.word	0x0000ffff
     538:	fffff000 	.word	0xfffff000

0000053c <_ZN16FlashMemoryClass12WriteAddressEPhmm>:
	delay_ms(100);
	CE_Low_Flash();
	Send_Byte(0x99);
	CE_High_Flash();				// disable device
}
uint32_t	FlashMemoryClass::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
     53c:	b5f0      	push	{r4, r5, r6, r7, lr}
     53e:	46c6      	mov	lr, r8
     540:	b500      	push	{lr}
     542:	0005      	movs	r5, r0
     544:	000c      	movs	r4, r1
     546:	4690      	mov	r8, r2
     548:	001e      	movs	r6, r3
	uint32_t	w;
	while(!IsReady());
     54a:	4f1e      	ldr	r7, [pc, #120]	; (5c4 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x88>)
     54c:	0028      	movs	r0, r5
     54e:	47b8      	blx	r7
     550:	2800      	cmp	r0, #0
     552:	d0fb      	beq.n	54c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x10>
	flashOpen();
     554:	0028      	movs	r0, r5
     556:	4b1c      	ldr	r3, [pc, #112]	; (5c8 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x8c>)
     558:	4798      	blx	r3
	WREN();
     55a:	0028      	movs	r0, r5
     55c:	4b1b      	ldr	r3, [pc, #108]	; (5cc <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x90>)
     55e:	4798      	blx	r3
	CE_Low_Flash();
     560:	0028      	movs	r0, r5
     562:	4b1b      	ldr	r3, [pc, #108]	; (5d0 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x94>)
     564:	4798      	blx	r3
	localBuffer[0]=kFlashByteProgram;
     566:	2202      	movs	r2, #2
     568:	23a4      	movs	r3, #164	; 0xa4
     56a:	54ea      	strb	r2, [r5, r3]
	localBuffer[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
     56c:	4643      	mov	r3, r8
     56e:	0c1a      	lsrs	r2, r3, #16
     570:	23a5      	movs	r3, #165	; 0xa5
     572:	54ea      	strb	r2, [r5, r3]
	localBuffer[2]=(uint8_t)((addr & 0xFFFF) >> 8);
     574:	4643      	mov	r3, r8
     576:	0a1a      	lsrs	r2, r3, #8
     578:	23a6      	movs	r3, #166	; 0xa6
     57a:	54ea      	strb	r2, [r5, r3]
	localBuffer[3]=(uint8_t)(addr&0xFF);
     57c:	3301      	adds	r3, #1
     57e:	4642      	mov	r2, r8
     580:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i = 4; i <(size)+4; i++)
     582:	1d32      	adds	r2, r6, #4
     584:	2a04      	cmp	r2, #4
     586:	d908      	bls.n	59a <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x5e>
     588:	0029      	movs	r1, r5
     58a:	31a8      	adds	r1, #168	; 0xa8
     58c:	19a6      	adds	r6, r4, r6
	{
		localBuffer[i]=*p;
     58e:	7820      	ldrb	r0, [r4, #0]
     590:	7008      	strb	r0, [r1, #0]
		p++;
     592:	3401      	adds	r4, #1
     594:	3101      	adds	r1, #1
	for (uint32_t i = 4; i <(size)+4; i++)
     596:	42b4      	cmp	r4, r6
     598:	d1f9      	bne.n	58e <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x52>
	}


	w=spi.write(&localBuffer[0],size+4);
     59a:	0029      	movs	r1, r5
     59c:	31a4      	adds	r1, #164	; 0xa4
     59e:	0028      	movs	r0, r5
     5a0:	3090      	adds	r0, #144	; 0x90
     5a2:	4b0c      	ldr	r3, [pc, #48]	; (5d4 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x98>)
     5a4:	4798      	blx	r3
     5a6:	0004      	movs	r4, r0

	CE_High_Flash();
     5a8:	0028      	movs	r0, r5
     5aa:	4b0b      	ldr	r3, [pc, #44]	; (5d8 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x9c>)
     5ac:	4798      	blx	r3
	WRDI();
     5ae:	0028      	movs	r0, r5
     5b0:	4b0a      	ldr	r3, [pc, #40]	; (5dc <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xa0>)
     5b2:	4798      	blx	r3
	flashClose();
     5b4:	0028      	movs	r0, r5
     5b6:	4b0a      	ldr	r3, [pc, #40]	; (5e0 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xa4>)
     5b8:	4798      	blx	r3
	return	w;
	/*return (uint32_t)writeFlash(addr,(void*)p,size);*/
}
     5ba:	0020      	movs	r0, r4
     5bc:	bc04      	pop	{r2}
     5be:	4690      	mov	r8, r2
     5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	00000429 	.word	0x00000429
     5c8:	00000241 	.word	0x00000241
     5cc:	00000369 	.word	0x00000369
     5d0:	00000255 	.word	0x00000255
     5d4:	0000084d 	.word	0x0000084d
     5d8:	0000026d 	.word	0x0000026d
     5dc:	000002c1 	.word	0x000002c1
     5e0:	000003cd 	.word	0x000003cd

000005e4 <_ZN16FlashMemoryClass11ReadAddressEPhmm>:
uint32_t	FlashMemoryClass::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
     5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5e6:	b083      	sub	sp, #12
     5e8:	0004      	movs	r4, r0
     5ea:	9101      	str	r1, [sp, #4]
     5ec:	0015      	movs	r5, r2
     5ee:	001e      	movs	r6, r3
	uint8_t	dummy;
	while(!IsReady());
     5f0:	4f16      	ldr	r7, [pc, #88]	; (64c <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x68>)
     5f2:	0020      	movs	r0, r4
     5f4:	47b8      	blx	r7
     5f6:	2800      	cmp	r0, #0
     5f8:	d0fb      	beq.n	5f2 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xe>
	flashOpen();
     5fa:	0020      	movs	r0, r4
     5fc:	4b14      	ldr	r3, [pc, #80]	; (650 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x6c>)
     5fe:	4798      	blx	r3
	CE_Low_Flash();
     600:	0020      	movs	r0, r4
     602:	4b14      	ldr	r3, [pc, #80]	; (654 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x70>)
     604:	4798      	blx	r3
	instruction[0]=kFlashRead;
     606:	2203      	movs	r2, #3
     608:	23b8      	movs	r3, #184	; 0xb8
     60a:	54e2      	strb	r2, [r4, r3]
	instruction[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
     60c:	0c2a      	lsrs	r2, r5, #16
     60e:	3301      	adds	r3, #1
     610:	54e2      	strb	r2, [r4, r3]
	instruction[2]=(uint8_t)((addr & 0xFFFF) >> 8);
     612:	0a2a      	lsrs	r2, r5, #8
     614:	3301      	adds	r3, #1
     616:	54e2      	strb	r2, [r4, r3]
	instruction[3]=(uint8_t)(addr&0xFF);
     618:	3301      	adds	r3, #1
     61a:	54e5      	strb	r5, [r4, r3]
		
	uint32_t	r=spi.write(instruction,4);
     61c:	0027      	movs	r7, r4
     61e:	3790      	adds	r7, #144	; 0x90
     620:	0021      	movs	r1, r4
     622:	31b8      	adds	r1, #184	; 0xb8
     624:	2204      	movs	r2, #4
     626:	0038      	movs	r0, r7
     628:	4b0b      	ldr	r3, [pc, #44]	; (658 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x74>)
     62a:	4798      	blx	r3
	r=spi.read(p,size);
     62c:	0032      	movs	r2, r6
     62e:	9901      	ldr	r1, [sp, #4]
     630:	0038      	movs	r0, r7
     632:	4b0a      	ldr	r3, [pc, #40]	; (65c <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x78>)
     634:	4798      	blx	r3
     636:	0005      	movs	r5, r0
	CE_High_Flash();
     638:	0020      	movs	r0, r4
     63a:	4b09      	ldr	r3, [pc, #36]	; (660 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x7c>)
     63c:	4798      	blx	r3
	flashClose();
     63e:	0020      	movs	r0, r4
     640:	4b08      	ldr	r3, [pc, #32]	; (664 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x80>)
     642:	4798      	blx	r3
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
     644:	0028      	movs	r0, r5
     646:	b003      	add	sp, #12
     648:	bdf0      	pop	{r4, r5, r6, r7, pc}
     64a:	46c0      	nop			; (mov r8, r8)
     64c:	00000429 	.word	0x00000429
     650:	00000241 	.word	0x00000241
     654:	00000255 	.word	0x00000255
     658:	0000084d 	.word	0x0000084d
     65c:	0000086d 	.word	0x0000086d
     660:	0000026d 	.word	0x0000026d
     664:	000003cd 	.word	0x000003cd

00000668 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev>:
     668:	b510      	push	{r4, lr}
     66a:	4c05      	ldr	r4, [pc, #20]	; (680 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x18>)
     66c:	4905      	ldr	r1, [pc, #20]	; (684 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x1c>)
     66e:	0020      	movs	r0, r4
     670:	4b05      	ldr	r3, [pc, #20]	; (688 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x20>)
     672:	4798      	blx	r3
     674:	4a05      	ldr	r2, [pc, #20]	; (68c <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x24>)
     676:	4906      	ldr	r1, [pc, #24]	; (690 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x28>)
     678:	0020      	movs	r0, r4
     67a:	4b06      	ldr	r3, [pc, #24]	; (694 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x2c>)
     67c:	4798      	blx	r3
     67e:	bd10      	pop	{r4, pc}
     680:	200004b8 	.word	0x200004b8
     684:	20000b14 	.word	0x20000b14
     688:	00000211 	.word	0x00000211
     68c:	20000000 	.word	0x20000000
     690:	000001fd 	.word	0x000001fd
     694:	00003655 	.word	0x00003655

00000698 <_ZN17FRAM_Memory_ClassD1Ev>:
		spiPort=0;
		memoryAddress=framMemory;
} //FRAM_Memory_Class

// default destructor
FRAM_Memory_Class::~FRAM_Memory_Class()
     698:	b510      	push	{r4, lr}
     69a:	0004      	movs	r4, r0
     69c:	3090      	adds	r0, #144	; 0x90
     69e:	4b02      	ldr	r3, [pc, #8]	; (6a8 <_ZN17FRAM_Memory_ClassD1Ev+0x10>)
     6a0:	4798      	blx	r3
{
} //~FRAM_Memory_Class
     6a2:	0020      	movs	r0, r4
     6a4:	bd10      	pop	{r4, pc}
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	000007f5 	.word	0x000007f5

000006ac <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor>:
FRAM_Memory_Class::FRAM_Memory_Class(uint8_t sp){
	spiPort=sp;
	memoryAddress=framMemory;
	
}
FRAM_Memory_Class::FRAM_Memory_Class(spi_m_sync_descriptor *spi_des)
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	0004      	movs	r4, r0
     6b0:	000d      	movs	r5, r1
     6b2:	3090      	adds	r0, #144	; 0x90
     6b4:	4b06      	ldr	r3, [pc, #24]	; (6d0 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x24>)
     6b6:	4798      	blx	r3
{
	appParameters=defaultParameters;
     6b8:	0020      	movs	r0, r4
     6ba:	3010      	adds	r0, #16
     6bc:	227c      	movs	r2, #124	; 0x7c
     6be:	4905      	ldr	r1, [pc, #20]	; (6d4 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x28>)
     6c0:	4b05      	ldr	r3, [pc, #20]	; (6d8 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x2c>)
     6c2:	4798      	blx	r3
	spi_descriptor=spi_des;
     6c4:	238c      	movs	r3, #140	; 0x8c
     6c6:	50e5      	str	r5, [r4, r3]
	memoryAddress=framMemory;
     6c8:	2300      	movs	r3, #0
     6ca:	60e3      	str	r3, [r4, #12]
} //FlashMemoryClass
     6cc:	0020      	movs	r0, r4
     6ce:	bd70      	pop	{r4, r5, r6, pc}
     6d0:	000007e9 	.word	0x000007e9
     6d4:	00003ad4 	.word	0x00003ad4
     6d8:	00003829 	.word	0x00003829

000006dc <_GLOBAL__sub_I__ZN17FRAM_Memory_ClassC2Ev>:
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}

     6dc:	b510      	push	{r4, lr}
     6de:	4c05      	ldr	r4, [pc, #20]	; (6f4 <_GLOBAL__sub_I__ZN17FRAM_Memory_ClassC2Ev+0x18>)
     6e0:	4905      	ldr	r1, [pc, #20]	; (6f8 <_GLOBAL__sub_I__ZN17FRAM_Memory_ClassC2Ev+0x1c>)
     6e2:	0020      	movs	r0, r4
     6e4:	4b05      	ldr	r3, [pc, #20]	; (6fc <_GLOBAL__sub_I__ZN17FRAM_Memory_ClassC2Ev+0x20>)
     6e6:	4798      	blx	r3
     6e8:	4a05      	ldr	r2, [pc, #20]	; (700 <_GLOBAL__sub_I__ZN17FRAM_Memory_ClassC2Ev+0x24>)
     6ea:	4906      	ldr	r1, [pc, #24]	; (704 <_GLOBAL__sub_I__ZN17FRAM_Memory_ClassC2Ev+0x28>)
     6ec:	0020      	movs	r0, r4
     6ee:	4b06      	ldr	r3, [pc, #24]	; (708 <_GLOBAL__sub_I__ZN17FRAM_Memory_ClassC2Ev+0x2c>)
     6f0:	4798      	blx	r3
     6f2:	bd10      	pop	{r4, pc}
     6f4:	20000578 	.word	0x20000578
     6f8:	20000b14 	.word	0x20000b14
     6fc:	000006ad 	.word	0x000006ad
     700:	20000000 	.word	0x20000000
     704:	00000699 	.word	0x00000699
     708:	00003655 	.word	0x00003655

0000070c <_Z15FlashMemoryTestv>:
		FlashMemoryTest();
		//FramMemoryTest();
    }
}

void	FlashMemoryTest(void){
     70c:	b5f0      	push	{r4, r5, r6, r7, lr}
     70e:	46c6      	mov	lr, r8
     710:	b500      	push	{lr}
     712:	b088      	sub	sp, #32
	bool is_corrupted = false;
	uint8_t tx_buffer[ISSI_BUFFER_SIZE] ;
	uint8_t rx_buffer[ISSI_BUFFER_SIZE] ;
	
	flash.Init();
     714:	4828      	ldr	r0, [pc, #160]	; (7b8 <_Z15FlashMemoryTestv+0xac>)
     716:	4b29      	ldr	r3, [pc, #164]	; (7bc <_Z15FlashMemoryTestv+0xb0>)
     718:	4798      	blx	r3

	//usb.print("QSPI Program Started\n\r");
	/* Initialize Tx buffer */
	for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
     71a:	2300      	movs	r3, #0
		tx_buffer[i] = (uint8_t)i;
     71c:	aa04      	add	r2, sp, #16
     71e:	549b      	strb	r3, [r3, r2]
	for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
     720:	3301      	adds	r3, #1
     722:	2b10      	cmp	r3, #16
     724:	d1fb      	bne.n	71e <_Z15FlashMemoryTestv+0x12>
	}

	flash.eraseFlash(0,TEST_FLASH_SIZE);
     726:	2280      	movs	r2, #128	; 0x80
     728:	0152      	lsls	r2, r2, #5
     72a:	2100      	movs	r1, #0
     72c:	4822      	ldr	r0, [pc, #136]	; (7b8 <_Z15FlashMemoryTestv+0xac>)
     72e:	4b24      	ldr	r3, [pc, #144]	; (7c0 <_Z15FlashMemoryTestv+0xb4>)
     730:	4798      	blx	r3
	/* Erase flash memory */
	uint32_t	m=0;
     732:	2600      	movs	r6, #0
	while (1) {
		//delay_us(100);
		/* Write data to flash memory */
		if (ERR_NONE ==flash.WriteAddress((uint8_t *)tx_buffer,m,ISSI_BUFFER_SIZE)) {
     734:	ac04      	add	r4, sp, #16
     736:	4f23      	ldr	r7, [pc, #140]	; (7c4 <_Z15FlashMemoryTestv+0xb8>)
     738:	2310      	movs	r3, #16
     73a:	0032      	movs	r2, r6
     73c:	0021      	movs	r1, r4
     73e:	481e      	ldr	r0, [pc, #120]	; (7b8 <_Z15FlashMemoryTestv+0xac>)
     740:	47b8      	blx	r7
			
		}
		delay_ms(WRITE_DELAY);
     742:	2064      	movs	r0, #100	; 0x64
     744:	4b20      	ldr	r3, [pc, #128]	; (7c8 <_Z15FlashMemoryTestv+0xbc>)
     746:	4798      	blx	r3
		//flash.WaitBusy();
		/* Read data from flash memory */
		if (ERR_NONE == flash.ReadAddress((uint8_t *)rx_buffer,m,ISSI_BUFFER_SIZE)) {
     748:	2310      	movs	r3, #16
     74a:	0032      	movs	r2, r6
     74c:	4669      	mov	r1, sp
     74e:	481a      	ldr	r0, [pc, #104]	; (7b8 <_Z15FlashMemoryTestv+0xac>)
     750:	4d1e      	ldr	r5, [pc, #120]	; (7cc <_Z15FlashMemoryTestv+0xc0>)
     752:	47a8      	blx	r5
     754:	23c0      	movs	r3, #192	; 0xc0
     756:	05db      	lsls	r3, r3, #23
     758:	2280      	movs	r2, #128	; 0x80
     75a:	03d2      	lsls	r2, r2, #15
     75c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     75e:	2280      	movs	r2, #128	; 0x80
     760:	0392      	lsls	r2, r2, #14
     762:	615a      	str	r2, [r3, #20]
		//	delay_us(100);
		is_corrupted = false;
		gpio_set_pin_level(LEDA22,true);
		gpio_set_pin_level(LEDA21,false);
		for (int i = 1; i < ISSI_BUFFER_SIZE; i++) {
			if (tx_buffer[i] != rx_buffer[i]) {
     764:	7862      	ldrb	r2, [r4, #1]
     766:	466b      	mov	r3, sp
     768:	785b      	ldrb	r3, [r3, #1]
     76a:	429a      	cmp	r2, r3
     76c:	d11b      	bne.n	7a6 <_Z15FlashMemoryTestv+0x9a>
     76e:	2302      	movs	r3, #2
     770:	5d19      	ldrb	r1, [r3, r4]
     772:	466a      	mov	r2, sp
     774:	5c9a      	ldrb	r2, [r3, r2]
     776:	4291      	cmp	r1, r2
     778:	d115      	bne.n	7a6 <_Z15FlashMemoryTestv+0x9a>
		for (int i = 1; i < ISSI_BUFFER_SIZE; i++) {
     77a:	3301      	adds	r3, #1
     77c:	2b10      	cmp	r3, #16
     77e:	d1f7      	bne.n	770 <_Z15FlashMemoryTestv+0x64>
				break;
			}
			
		}

		delay_ms(WRITE_DELAY);
     780:	2064      	movs	r0, #100	; 0x64
     782:	4b11      	ldr	r3, [pc, #68]	; (7c8 <_Z15FlashMemoryTestv+0xbc>)
     784:	4798      	blx	r3
		m=(m+ISSI_BUFFER_SIZE)%TEST_FLASH_SIZE;
     786:	3610      	adds	r6, #16
     788:	0536      	lsls	r6, r6, #20
     78a:	0d36      	lsrs	r6, r6, #20
		for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
     78c:	2300      	movs	r3, #0
     78e:	4698      	mov	r8, r3
			tx_buffer[i] = (uint8_t)rand();
     790:	4d0f      	ldr	r5, [pc, #60]	; (7d0 <_Z15FlashMemoryTestv+0xc4>)
     792:	47a8      	blx	r5
     794:	4643      	mov	r3, r8
     796:	5518      	strb	r0, [r3, r4]
		for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
     798:	2301      	movs	r3, #1
     79a:	469c      	mov	ip, r3
     79c:	44e0      	add	r8, ip
     79e:	4643      	mov	r3, r8
     7a0:	2b10      	cmp	r3, #16
     7a2:	d0c9      	beq.n	738 <_Z15FlashMemoryTestv+0x2c>
     7a4:	e7f5      	b.n	792 <_Z15FlashMemoryTestv+0x86>
     7a6:	23c0      	movs	r3, #192	; 0xc0
     7a8:	05db      	lsls	r3, r3, #23
     7aa:	2280      	movs	r2, #128	; 0x80
     7ac:	03d2      	lsls	r2, r2, #15
     7ae:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7b0:	2280      	movs	r2, #128	; 0x80
     7b2:	0392      	lsls	r2, r2, #14
     7b4:	619a      	str	r2, [r3, #24]
     7b6:	e7e3      	b.n	780 <_Z15FlashMemoryTestv+0x74>
     7b8:	200004b8 	.word	0x200004b8
     7bc:	000003e1 	.word	0x000003e1
     7c0:	00000495 	.word	0x00000495
     7c4:	0000053d 	.word	0x0000053d
     7c8:	00000b15 	.word	0x00000b15
     7cc:	000005e5 	.word	0x000005e5
     7d0:	00003941 	.word	0x00003941

000007d4 <main>:
{
     7d4:	b510      	push	{r4, lr}
	atmel_start_init();
     7d6:	4b02      	ldr	r3, [pc, #8]	; (7e0 <main+0xc>)
     7d8:	4798      	blx	r3
		FlashMemoryTest();
     7da:	4b02      	ldr	r3, [pc, #8]	; (7e4 <main+0x10>)
     7dc:	4798      	blx	r3
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	0000089d 	.word	0x0000089d
     7e4:	0000070d 	.word	0x0000070d

000007e8 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
{
		ptrSPISync=this;
     7e8:	4b01      	ldr	r3, [pc, #4]	; (7f0 <_ZN13SPI_Syn_ClassC1Ev+0x8>)
     7ea:	6018      	str	r0, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
     7ec:	4770      	bx	lr
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	20000660 	.word	0x20000660

000007f4 <_ZN13SPI_Syn_ClassD1Ev>:
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
{
} //~SPI_Syn_Class
     7f4:	4770      	bx	lr
	...

000007f8 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
     7f8:	b510      	push	{r4, lr}
     7fa:	0004      	movs	r4, r0
	spi_m_sync_get_io_descriptor(SPI, &spio);
     7fc:	0001      	movs	r1, r0
     7fe:	3108      	adds	r1, #8
     800:	6840      	ldr	r0, [r0, #4]
     802:	4b04      	ldr	r3, [pc, #16]	; (814 <_ZN13SPI_Syn_Class4initEv+0x1c>)
     804:	4798      	blx	r3

	spi_m_sync_enable(SPI);
     806:	6860      	ldr	r0, [r4, #4]
     808:	4b03      	ldr	r3, [pc, #12]	; (818 <_ZN13SPI_Syn_Class4initEv+0x20>)
     80a:	4798      	blx	r3
	
	ready=true;
     80c:	2301      	movs	r3, #1
     80e:	7023      	strb	r3, [r4, #0]
	xferDone=true;
     810:	7063      	strb	r3, [r4, #1]
	
}
     812:	bd10      	pop	{r4, pc}
     814:	00000d01 	.word	0x00000d01
     818:	00000bf1 	.word	0x00000bf1

0000081c <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
	ptrSPISync=this;
     81c:	4b01      	ldr	r3, [pc, #4]	; (824 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x8>)
     81e:	6018      	str	r0, [r3, #0]
	SPI=spiDesc;
     820:	6041      	str	r1, [r0, #4]
}
     822:	4770      	bx	lr
     824:	20000660 	.word	0x20000660

00000828 <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
     828:	b510      	push	{r4, lr}
     82a:	0004      	movs	r4, r0
	spi_m_sync_get_io_descriptor(SPI, &spio);
     82c:	0001      	movs	r1, r0
     82e:	3108      	adds	r1, #8
     830:	6840      	ldr	r0, [r0, #4]
     832:	4b04      	ldr	r3, [pc, #16]	; (844 <_ZN13SPI_Syn_Class6enableEv+0x1c>)
     834:	4798      	blx	r3
	spi_m_sync_enable(SPI);
     836:	6860      	ldr	r0, [r4, #4]
     838:	4b03      	ldr	r3, [pc, #12]	; (848 <_ZN13SPI_Syn_Class6enableEv+0x20>)
     83a:	4798      	blx	r3
	ready=true;
     83c:	2301      	movs	r3, #1
     83e:	7023      	strb	r3, [r4, #0]
	return 0;
}
     840:	2000      	movs	r0, #0
     842:	bd10      	pop	{r4, pc}
     844:	00000d01 	.word	0x00000d01
     848:	00000bf1 	.word	0x00000bf1

0000084c <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
     84c:	b510      	push	{r4, lr}
     84e:	0004      	movs	r4, r0
	int32_t w;
	wFlag=true;
     850:	2301      	movs	r3, #1
     852:	7403      	strb	r3, [r0, #16]
	w= io_write(spio,p,(uint16_t)n);
     854:	b292      	uxth	r2, r2
     856:	6880      	ldr	r0, [r0, #8]
     858:	4b03      	ldr	r3, [pc, #12]	; (868 <_ZN13SPI_Syn_Class5writeEPKhl+0x1c>)
     85a:	4798      	blx	r3
	wFlag=(bool)w;
     85c:	0003      	movs	r3, r0
     85e:	1e5a      	subs	r2, r3, #1
     860:	4193      	sbcs	r3, r2
     862:	b2db      	uxtb	r3, r3
     864:	7423      	strb	r3, [r4, #16]
	 return w;
	
}
     866:	bd10      	pop	{r4, pc}
     868:	00000b35 	.word	0x00000b35

0000086c <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
     86c:	b510      	push	{r4, lr}
     86e:	0004      	movs	r4, r0
	int32_t r;
	rFlag=true;
     870:	2301      	movs	r3, #1
     872:	7443      	strb	r3, [r0, #17]
	r=io_read(spio,p,(uint16_t)n);
     874:	b292      	uxth	r2, r2
     876:	6880      	ldr	r0, [r0, #8]
     878:	4b03      	ldr	r3, [pc, #12]	; (888 <_ZN13SPI_Syn_Class4readEPhl+0x1c>)
     87a:	4798      	blx	r3
	rFlag=(bool)r;
     87c:	0003      	movs	r3, r0
     87e:	1e5a      	subs	r2, r3, #1
     880:	4193      	sbcs	r3, r2
     882:	b2db      	uxtb	r3, r3
     884:	7463      	strb	r3, [r4, #17]
	return  r;
}
     886:	bd10      	pop	{r4, pc}
     888:	00000b69 	.word	0x00000b69

0000088c <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
     88c:	b510      	push	{r4, lr}
	spi_m_sync_disable(SPI);
     88e:	6840      	ldr	r0, [r0, #4]
     890:	4b01      	ldr	r3, [pc, #4]	; (898 <_ZN13SPI_Syn_Class7disableEv+0xc>)
     892:	4798      	blx	r3
	
}
     894:	bd10      	pop	{r4, pc}
     896:	46c0      	nop			; (mov r8, r8)
     898:	00000c19 	.word	0x00000c19

0000089c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     89c:	b510      	push	{r4, lr}
	system_init();
     89e:	4b02      	ldr	r3, [pc, #8]	; (8a8 <atmel_start_init+0xc>)
     8a0:	4798      	blx	r3
	usb_init();
     8a2:	4b02      	ldr	r3, [pc, #8]	; (8ac <atmel_start_init+0x10>)
     8a4:	4798      	blx	r3
}
     8a6:	bd10      	pop	{r4, pc}
     8a8:	00000a81 	.word	0x00000a81
     8ac:	00002abd 	.word	0x00002abd

000008b0 <SPI_MEMORIES_PORT_init>:
#include <hpl_pm_base.h>

struct spi_m_sync_descriptor SPI_MEMORIES;

void SPI_MEMORIES_PORT_init(void)
{
     8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8b2:	46ce      	mov	lr, r9
     8b4:	4647      	mov	r7, r8
     8b6:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     8b8:	21c0      	movs	r1, #192	; 0xc0
     8ba:	05c9      	lsls	r1, r1, #23
     8bc:	2380      	movs	r3, #128	; 0x80
     8be:	009b      	lsls	r3, r3, #2
     8c0:	604b      	str	r3, [r1, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8c2:	4b25      	ldr	r3, [pc, #148]	; (958 <SPI_MEMORIES_PORT_init+0xa8>)
     8c4:	4a25      	ldr	r2, [pc, #148]	; (95c <SPI_MEMORIES_PORT_init+0xac>)
     8c6:	629a      	str	r2, [r3, #40]	; 0x28
     8c8:	4a25      	ldr	r2, [pc, #148]	; (960 <SPI_MEMORIES_PORT_init+0xb0>)
     8ca:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8cc:	2449      	movs	r4, #73	; 0x49
     8ce:	5d1a      	ldrb	r2, [r3, r4]
     8d0:	2004      	movs	r0, #4
     8d2:	4382      	bics	r2, r0
     8d4:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8d6:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     8d8:	2601      	movs	r6, #1
     8da:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8dc:	2201      	movs	r2, #1
     8de:	4310      	orrs	r0, r2
     8e0:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8e2:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8e4:	2734      	movs	r7, #52	; 0x34
     8e6:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8e8:	250f      	movs	r5, #15
     8ea:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
     8ec:	2420      	movs	r4, #32
     8ee:	46a1      	mov	r9, r4
     8f0:	464c      	mov	r4, r9
     8f2:	4320      	orrs	r0, r4
     8f4:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8f6:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8f8:	2080      	movs	r0, #128	; 0x80
     8fa:	00c0      	lsls	r0, r0, #3
     8fc:	6148      	str	r0, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8fe:	6088      	str	r0, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     900:	4818      	ldr	r0, [pc, #96]	; (964 <SPI_MEMORIES_PORT_init+0xb4>)
     902:	6298      	str	r0, [r3, #40]	; 0x28
     904:	20c0      	movs	r0, #192	; 0xc0
     906:	0600      	lsls	r0, r0, #24
     908:	4684      	mov	ip, r0
     90a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     90c:	3716      	adds	r7, #22
     90e:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     910:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     912:	4310      	orrs	r0, r2
     914:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     916:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     918:	2035      	movs	r0, #53	; 0x35
     91a:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     91c:	240f      	movs	r4, #15
     91e:	43a7      	bics	r7, r4
	tmp |= PORT_PMUX_PMUXE(data);
     920:	3c0d      	subs	r4, #13
     922:	4327      	orrs	r7, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     924:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     926:	2780      	movs	r7, #128	; 0x80
     928:	013f      	lsls	r7, r7, #4
     92a:	614f      	str	r7, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     92c:	608f      	str	r7, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     92e:	490e      	ldr	r1, [pc, #56]	; (968 <SPI_MEMORIES_PORT_init+0xb8>)
     930:	6299      	str	r1, [r3, #40]	; 0x28
     932:	4661      	mov	r1, ip
     934:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     936:	274b      	movs	r7, #75	; 0x4b
     938:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     93a:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     93c:	4311      	orrs	r1, r2
     93e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     940:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     942:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     944:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
     946:	4649      	mov	r1, r9
     948:	430a      	orrs	r2, r1
     94a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     94c:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
}
     94e:	bc0c      	pop	{r2, r3}
     950:	4690      	mov	r8, r2
     952:	4699      	mov	r9, r3
     954:	bdf0      	pop	{r4, r5, r6, r7, pc}
     956:	46c0      	nop			; (mov r8, r8)
     958:	41004400 	.word	0x41004400
     95c:	40020200 	.word	0x40020200
     960:	c0020000 	.word	0xc0020000
     964:	40000400 	.word	0x40000400
     968:	40000800 	.word	0x40000800

0000096c <SPI_MEMORIES_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     96c:	4a04      	ldr	r2, [pc, #16]	; (980 <SPI_MEMORIES_CLOCK_init+0x14>)
     96e:	6a13      	ldr	r3, [r2, #32]
     970:	2104      	movs	r1, #4
     972:	430b      	orrs	r3, r1
     974:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     976:	4a03      	ldr	r2, [pc, #12]	; (984 <SPI_MEMORIES_CLOCK_init+0x18>)
     978:	4b03      	ldr	r3, [pc, #12]	; (988 <SPI_MEMORIES_CLOCK_init+0x1c>)
     97a:	805a      	strh	r2, [r3, #2]

void SPI_MEMORIES_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     97c:	4770      	bx	lr
     97e:	46c0      	nop			; (mov r8, r8)
     980:	40000400 	.word	0x40000400
     984:	00004014 	.word	0x00004014
     988:	40000c00 	.word	0x40000c00

0000098c <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
     98c:	b510      	push	{r4, lr}
	SPI_MEMORIES_CLOCK_init();
     98e:	4b04      	ldr	r3, [pc, #16]	; (9a0 <SPI_MEMORIES_init+0x14>)
     990:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM0);
     992:	4904      	ldr	r1, [pc, #16]	; (9a4 <SPI_MEMORIES_init+0x18>)
     994:	4804      	ldr	r0, [pc, #16]	; (9a8 <SPI_MEMORIES_init+0x1c>)
     996:	4b05      	ldr	r3, [pc, #20]	; (9ac <SPI_MEMORIES_init+0x20>)
     998:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
     99a:	4b05      	ldr	r3, [pc, #20]	; (9b0 <SPI_MEMORIES_init+0x24>)
     99c:	4798      	blx	r3
}
     99e:	bd10      	pop	{r4, pc}
     9a0:	0000096d 	.word	0x0000096d
     9a4:	42000800 	.word	0x42000800
     9a8:	20000b14 	.word	0x20000b14
     9ac:	00000b9d 	.word	0x00000b9d
     9b0:	000008b1 	.word	0x000008b1

000009b4 <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
     9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9b6:	46c6      	mov	lr, r8
     9b8:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9ba:	24c0      	movs	r4, #192	; 0xc0
     9bc:	05e4      	lsls	r4, r4, #23
     9be:	2280      	movs	r2, #128	; 0x80
     9c0:	0452      	lsls	r2, r2, #17
     9c2:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9c4:	4b1a      	ldr	r3, [pc, #104]	; (a30 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     9c6:	2780      	movs	r7, #128	; 0x80
     9c8:	05ff      	lsls	r7, r7, #23
     9ca:	629f      	str	r7, [r3, #40]	; 0x28
     9cc:	4919      	ldr	r1, [pc, #100]	; (a34 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     9ce:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9d0:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     9d2:	2058      	movs	r0, #88	; 0x58
     9d4:	5c19      	ldrb	r1, [r3, r0]
     9d6:	2204      	movs	r2, #4
     9d8:	4690      	mov	r8, r2
     9da:	4391      	bics	r1, r2
     9dc:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9de:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     9e0:	2601      	movs	r6, #1
     9e2:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9e4:	2501      	movs	r5, #1
     9e6:	4329      	orrs	r1, r5
     9e8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9ea:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9ec:	381c      	subs	r0, #28
     9ee:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9f0:	320b      	adds	r2, #11
     9f2:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     9f4:	3a09      	subs	r2, #9
     9f6:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9f8:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9fa:	2180      	movs	r1, #128	; 0x80
     9fc:	0489      	lsls	r1, r1, #18
     9fe:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a00:	629f      	str	r7, [r3, #40]	; 0x28
     a02:	4f0d      	ldr	r7, [pc, #52]	; (a38 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     a04:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a06:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a08:	2159      	movs	r1, #89	; 0x59
     a0a:	5c5c      	ldrb	r4, [r3, r1]
     a0c:	4642      	mov	r2, r8
     a0e:	4394      	bics	r4, r2
     a10:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a12:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a14:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a16:	432a      	orrs	r2, r5
     a18:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a1a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a1c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a1e:	394a      	subs	r1, #74	; 0x4a
     a20:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     a22:	3151      	adds	r1, #81	; 0x51
     a24:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a26:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     a28:	bc04      	pop	{r2}
     a2a:	4690      	mov	r8, r2
     a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a2e:	46c0      	nop			; (mov r8, r8)
     a30:	41004400 	.word	0x41004400
     a34:	c0000100 	.word	0xc0000100
     a38:	c0000200 	.word	0xc0000200

00000a3c <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     a3c:	4b06      	ldr	r3, [pc, #24]	; (a58 <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
     a3e:	69da      	ldr	r2, [r3, #28]
     a40:	2120      	movs	r1, #32
     a42:	430a      	orrs	r2, r1
     a44:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     a46:	695a      	ldr	r2, [r3, #20]
     a48:	3120      	adds	r1, #32
     a4a:	430a      	orrs	r2, r1
     a4c:	615a      	str	r2, [r3, #20]
     a4e:	4a03      	ldr	r2, [pc, #12]	; (a5c <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     a50:	4b03      	ldr	r3, [pc, #12]	; (a60 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
     a52:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     a54:	4770      	bx	lr
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	40000400 	.word	0x40000400
     a5c:	00004106 	.word	0x00004106
     a60:	40000c00 	.word	0x40000c00

00000a64 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
     a64:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     a66:	4b03      	ldr	r3, [pc, #12]	; (a74 <USB_DEVICE_INSTANCE_init+0x10>)
     a68:	4798      	blx	r3
	usb_d_init();
     a6a:	4b03      	ldr	r3, [pc, #12]	; (a78 <USB_DEVICE_INSTANCE_init+0x14>)
     a6c:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     a6e:	4b03      	ldr	r3, [pc, #12]	; (a7c <USB_DEVICE_INSTANCE_init+0x18>)
     a70:	4798      	blx	r3
}
     a72:	bd10      	pop	{r4, pc}
     a74:	00000a3d 	.word	0x00000a3d
     a78:	00000fa1 	.word	0x00000fa1
     a7c:	000009b5 	.word	0x000009b5

00000a80 <system_init>:

void system_init(void)
{
     a80:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     a82:	4b1c      	ldr	r3, [pc, #112]	; (af4 <system_init+0x74>)
     a84:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a86:	22c0      	movs	r2, #192	; 0xc0
     a88:	05d2      	lsls	r2, r2, #23
     a8a:	2380      	movs	r3, #128	; 0x80
     a8c:	039b      	lsls	r3, r3, #14
     a8e:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a90:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a92:	4b19      	ldr	r3, [pc, #100]	; (af8 <system_init+0x78>)
     a94:	2080      	movs	r0, #128	; 0x80
     a96:	05c0      	lsls	r0, r0, #23
     a98:	6298      	str	r0, [r3, #40]	; 0x28
     a9a:	4918      	ldr	r1, [pc, #96]	; (afc <system_init+0x7c>)
     a9c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a9e:	2555      	movs	r5, #85	; 0x55
     aa0:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     aa2:	2101      	movs	r1, #1
     aa4:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aa6:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aa8:	2480      	movs	r4, #128	; 0x80
     aaa:	03e4      	lsls	r4, r4, #15
     aac:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     aae:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ab0:	6298      	str	r0, [r3, #40]	; 0x28
     ab2:	4c13      	ldr	r4, [pc, #76]	; (b00 <system_init+0x80>)
     ab4:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ab6:	3501      	adds	r5, #1
     ab8:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     aba:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     abc:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     abe:	2480      	movs	r4, #128	; 0x80
     ac0:	0524      	lsls	r4, r4, #20
     ac2:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ac4:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ac6:	6298      	str	r0, [r3, #40]	; 0x28
     ac8:	4c0e      	ldr	r4, [pc, #56]	; (b04 <system_init+0x84>)
     aca:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     acc:	3505      	adds	r5, #5
     ace:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ad0:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ad2:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ad4:	2480      	movs	r4, #128	; 0x80
     ad6:	0564      	lsls	r4, r4, #21
     ad8:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ada:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     adc:	6298      	str	r0, [r3, #40]	; 0x28
     ade:	4a0a      	ldr	r2, [pc, #40]	; (b08 <system_init+0x88>)
     ae0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ae2:	205c      	movs	r0, #92	; 0x5c
     ae4:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ae6:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ae8:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);

	SPI_MEMORIES_init();
     aea:	4b08      	ldr	r3, [pc, #32]	; (b0c <system_init+0x8c>)
     aec:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
     aee:	4b08      	ldr	r3, [pc, #32]	; (b10 <system_init+0x90>)
     af0:	4798      	blx	r3
}
     af2:	bd70      	pop	{r4, r5, r6, pc}
     af4:	00001325 	.word	0x00001325
     af8:	41004400 	.word	0x41004400
     afc:	c0000020 	.word	0xc0000020
     b00:	c0000040 	.word	0xc0000040
     b04:	c0000800 	.word	0xc0000800
     b08:	c0001000 	.word	0xc0001000
     b0c:	0000098d 	.word	0x0000098d
     b10:	00000a65 	.word	0x00000a65

00000b14 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     b14:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     b16:	4b04      	ldr	r3, [pc, #16]	; (b28 <delay_ms+0x14>)
     b18:	681c      	ldr	r4, [r3, #0]
     b1a:	4b04      	ldr	r3, [pc, #16]	; (b2c <delay_ms+0x18>)
     b1c:	4798      	blx	r3
     b1e:	0001      	movs	r1, r0
     b20:	0020      	movs	r0, r4
     b22:	4b03      	ldr	r3, [pc, #12]	; (b30 <delay_ms+0x1c>)
     b24:	4798      	blx	r3
}
     b26:	bd10      	pop	{r4, pc}
     b28:	20000664 	.word	0x20000664
     b2c:	000012fd 	.word	0x000012fd
     b30:	0000131d 	.word	0x0000131d

00000b34 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     b34:	b570      	push	{r4, r5, r6, lr}
     b36:	0006      	movs	r6, r0
     b38:	000c      	movs	r4, r1
     b3a:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     b3c:	2800      	cmp	r0, #0
     b3e:	d00d      	beq.n	b5c <io_write+0x28>
     b40:	0008      	movs	r0, r1
     b42:	1e43      	subs	r3, r0, #1
     b44:	4198      	sbcs	r0, r3
     b46:	b2c0      	uxtb	r0, r0
     b48:	2234      	movs	r2, #52	; 0x34
     b4a:	4905      	ldr	r1, [pc, #20]	; (b60 <io_write+0x2c>)
     b4c:	4b05      	ldr	r3, [pc, #20]	; (b64 <io_write+0x30>)
     b4e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     b50:	6833      	ldr	r3, [r6, #0]
     b52:	002a      	movs	r2, r5
     b54:	0021      	movs	r1, r4
     b56:	0030      	movs	r0, r6
     b58:	4798      	blx	r3
}
     b5a:	bd70      	pop	{r4, r5, r6, pc}
     b5c:	2000      	movs	r0, #0
     b5e:	e7f3      	b.n	b48 <io_write+0x14>
     b60:	00003b50 	.word	0x00003b50
     b64:	000012f5 	.word	0x000012f5

00000b68 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     b68:	b570      	push	{r4, r5, r6, lr}
     b6a:	0006      	movs	r6, r0
     b6c:	000c      	movs	r4, r1
     b6e:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     b70:	2800      	cmp	r0, #0
     b72:	d00d      	beq.n	b90 <io_read+0x28>
     b74:	0008      	movs	r0, r1
     b76:	1e43      	subs	r3, r0, #1
     b78:	4198      	sbcs	r0, r3
     b7a:	b2c0      	uxtb	r0, r0
     b7c:	223d      	movs	r2, #61	; 0x3d
     b7e:	4905      	ldr	r1, [pc, #20]	; (b94 <io_read+0x2c>)
     b80:	4b05      	ldr	r3, [pc, #20]	; (b98 <io_read+0x30>)
     b82:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     b84:	6873      	ldr	r3, [r6, #4]
     b86:	002a      	movs	r2, r5
     b88:	0021      	movs	r1, r4
     b8a:	0030      	movs	r0, r6
     b8c:	4798      	blx	r3
}
     b8e:	bd70      	pop	{r4, r5, r6, pc}
     b90:	2000      	movs	r0, #0
     b92:	e7f3      	b.n	b7c <io_read+0x14>
     b94:	00003b50 	.word	0x00003b50
     b98:	000012f5 	.word	0x000012f5

00000b9c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     b9c:	b570      	push	{r4, r5, r6, lr}
     b9e:	0004      	movs	r4, r0
     ba0:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     ba2:	2800      	cmp	r0, #0
     ba4:	d016      	beq.n	bd4 <spi_m_sync_init+0x38>
     ba6:	0008      	movs	r0, r1
     ba8:	1e43      	subs	r3, r0, #1
     baa:	4198      	sbcs	r0, r3
     bac:	b2c0      	uxtb	r0, r0
     bae:	2240      	movs	r2, #64	; 0x40
     bb0:	4909      	ldr	r1, [pc, #36]	; (bd8 <spi_m_sync_init+0x3c>)
     bb2:	4b0a      	ldr	r3, [pc, #40]	; (bdc <spi_m_sync_init+0x40>)
     bb4:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     bb6:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     bb8:	1d20      	adds	r0, r4, #4
     bba:	0029      	movs	r1, r5
     bbc:	4b08      	ldr	r3, [pc, #32]	; (be0 <spi_m_sync_init+0x44>)
     bbe:	4798      	blx	r3

	if (rc < 0) {
     bc0:	2800      	cmp	r0, #0
     bc2:	db06      	blt.n	bd2 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     bc4:	4b07      	ldr	r3, [pc, #28]	; (be4 <spi_m_sync_init+0x48>)
     bc6:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     bc8:	4b07      	ldr	r3, [pc, #28]	; (be8 <spi_m_sync_init+0x4c>)
     bca:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     bcc:	4b07      	ldr	r3, [pc, #28]	; (bec <spi_m_sync_init+0x50>)
     bce:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     bd0:	2000      	movs	r0, #0
}
     bd2:	bd70      	pop	{r4, r5, r6, pc}
     bd4:	2000      	movs	r0, #0
     bd6:	e7ea      	b.n	bae <spi_m_sync_init+0x12>
     bd8:	00003b64 	.word	0x00003b64
     bdc:	000012f5 	.word	0x000012f5
     be0:	0000140d 	.word	0x0000140d
     be4:	ffff8000 	.word	0xffff8000
     be8:	00000cc5 	.word	0x00000cc5
     bec:	00000c89 	.word	0x00000c89

00000bf0 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     bf0:	b510      	push	{r4, lr}
     bf2:	0004      	movs	r4, r0
	ASSERT(spi);
     bf4:	1e43      	subs	r3, r0, #1
     bf6:	4198      	sbcs	r0, r3
     bf8:	b2c0      	uxtb	r0, r0
     bfa:	2257      	movs	r2, #87	; 0x57
     bfc:	4903      	ldr	r1, [pc, #12]	; (c0c <spi_m_sync_enable+0x1c>)
     bfe:	4b04      	ldr	r3, [pc, #16]	; (c10 <spi_m_sync_enable+0x20>)
     c00:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     c02:	1d20      	adds	r0, r4, #4
     c04:	4b03      	ldr	r3, [pc, #12]	; (c14 <spi_m_sync_enable+0x24>)
     c06:	4798      	blx	r3
}
     c08:	bd10      	pop	{r4, pc}
     c0a:	46c0      	nop			; (mov r8, r8)
     c0c:	00003b64 	.word	0x00003b64
     c10:	000012f5 	.word	0x000012f5
     c14:	00001505 	.word	0x00001505

00000c18 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
     c18:	b510      	push	{r4, lr}
     c1a:	0004      	movs	r4, r0
	ASSERT(spi);
     c1c:	1e43      	subs	r3, r0, #1
     c1e:	4198      	sbcs	r0, r3
     c20:	b2c0      	uxtb	r0, r0
     c22:	225d      	movs	r2, #93	; 0x5d
     c24:	4903      	ldr	r1, [pc, #12]	; (c34 <spi_m_sync_disable+0x1c>)
     c26:	4b04      	ldr	r3, [pc, #16]	; (c38 <spi_m_sync_disable+0x20>)
     c28:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
     c2a:	1d20      	adds	r0, r4, #4
     c2c:	4b03      	ldr	r3, [pc, #12]	; (c3c <spi_m_sync_disable+0x24>)
     c2e:	4798      	blx	r3
}
     c30:	bd10      	pop	{r4, pc}
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	00003b64 	.word	0x00003b64
     c38:	000012f5 	.word	0x000012f5
     c3c:	00001535 	.word	0x00001535

00000c40 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     c40:	b530      	push	{r4, r5, lr}
     c42:	b087      	sub	sp, #28
     c44:	0004      	movs	r4, r0
     c46:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     c48:	2800      	cmp	r0, #0
     c4a:	d014      	beq.n	c76 <spi_m_sync_transfer+0x36>
     c4c:	0008      	movs	r0, r1
     c4e:	1e43      	subs	r3, r0, #1
     c50:	4198      	sbcs	r0, r3
     c52:	b2c0      	uxtb	r0, r0
     c54:	22b3      	movs	r2, #179	; 0xb3
     c56:	4909      	ldr	r1, [pc, #36]	; (c7c <spi_m_sync_transfer+0x3c>)
     c58:	4b09      	ldr	r3, [pc, #36]	; (c80 <spi_m_sync_transfer+0x40>)
     c5a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     c5c:	682b      	ldr	r3, [r5, #0]
     c5e:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     c60:	686b      	ldr	r3, [r5, #4]
     c62:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     c64:	68ab      	ldr	r3, [r5, #8]
     c66:	9301      	str	r3, [sp, #4]
     c68:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     c6a:	1d20      	adds	r0, r4, #4
     c6c:	a903      	add	r1, sp, #12
     c6e:	4b05      	ldr	r3, [pc, #20]	; (c84 <spi_m_sync_transfer+0x44>)
     c70:	4798      	blx	r3
}
     c72:	b007      	add	sp, #28
     c74:	bd30      	pop	{r4, r5, pc}
     c76:	2000      	movs	r0, #0
     c78:	e7ec      	b.n	c54 <spi_m_sync_transfer+0x14>
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	00003b64 	.word	0x00003b64
     c80:	000012f5 	.word	0x000012f5
     c84:	00001569 	.word	0x00001569

00000c88 <_spi_m_sync_io_write>:
{
     c88:	b570      	push	{r4, r5, r6, lr}
     c8a:	b084      	sub	sp, #16
     c8c:	0004      	movs	r4, r0
     c8e:	000e      	movs	r6, r1
     c90:	0015      	movs	r5, r2
	ASSERT(io);
     c92:	1e43      	subs	r3, r0, #1
     c94:	4198      	sbcs	r0, r3
     c96:	b2c0      	uxtb	r0, r0
     c98:	22a3      	movs	r2, #163	; 0xa3
     c9a:	4907      	ldr	r1, [pc, #28]	; (cb8 <_spi_m_sync_io_write+0x30>)
     c9c:	4b07      	ldr	r3, [pc, #28]	; (cbc <_spi_m_sync_io_write+0x34>)
     c9e:	4798      	blx	r3
	xfer.rxbuf = 0;
     ca0:	2300      	movs	r3, #0
     ca2:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     ca4:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     ca6:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     ca8:	0020      	movs	r0, r4
     caa:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     cac:	a901      	add	r1, sp, #4
     cae:	4b04      	ldr	r3, [pc, #16]	; (cc0 <_spi_m_sync_io_write+0x38>)
     cb0:	4798      	blx	r3
}
     cb2:	b004      	add	sp, #16
     cb4:	bd70      	pop	{r4, r5, r6, pc}
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	00003b64 	.word	0x00003b64
     cbc:	000012f5 	.word	0x000012f5
     cc0:	00000c41 	.word	0x00000c41

00000cc4 <_spi_m_sync_io_read>:
{
     cc4:	b570      	push	{r4, r5, r6, lr}
     cc6:	b084      	sub	sp, #16
     cc8:	0004      	movs	r4, r0
     cca:	000e      	movs	r6, r1
     ccc:	0015      	movs	r5, r2
	ASSERT(io);
     cce:	1e43      	subs	r3, r0, #1
     cd0:	4198      	sbcs	r0, r3
     cd2:	b2c0      	uxtb	r0, r0
     cd4:	2287      	movs	r2, #135	; 0x87
     cd6:	4907      	ldr	r1, [pc, #28]	; (cf4 <_spi_m_sync_io_read+0x30>)
     cd8:	4b07      	ldr	r3, [pc, #28]	; (cf8 <_spi_m_sync_io_read+0x34>)
     cda:	4798      	blx	r3
	xfer.rxbuf = buf;
     cdc:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     cde:	2300      	movs	r3, #0
     ce0:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     ce2:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     ce4:	0020      	movs	r0, r4
     ce6:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     ce8:	a901      	add	r1, sp, #4
     cea:	4b04      	ldr	r3, [pc, #16]	; (cfc <_spi_m_sync_io_read+0x38>)
     cec:	4798      	blx	r3
}
     cee:	b004      	add	sp, #16
     cf0:	bd70      	pop	{r4, r5, r6, pc}
     cf2:	46c0      	nop			; (mov r8, r8)
     cf4:	00003b64 	.word	0x00003b64
     cf8:	000012f5 	.word	0x000012f5
     cfc:	00000c41 	.word	0x00000c41

00000d00 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     d00:	b570      	push	{r4, r5, r6, lr}
     d02:	0004      	movs	r4, r0
     d04:	000d      	movs	r5, r1
	ASSERT(spi && io);
     d06:	2800      	cmp	r0, #0
     d08:	d00b      	beq.n	d22 <spi_m_sync_get_io_descriptor+0x22>
     d0a:	0008      	movs	r0, r1
     d0c:	1e43      	subs	r3, r0, #1
     d0e:	4198      	sbcs	r0, r3
     d10:	b2c0      	uxtb	r0, r0
     d12:	22bd      	movs	r2, #189	; 0xbd
     d14:	4904      	ldr	r1, [pc, #16]	; (d28 <spi_m_sync_get_io_descriptor+0x28>)
     d16:	4b05      	ldr	r3, [pc, #20]	; (d2c <spi_m_sync_get_io_descriptor+0x2c>)
     d18:	4798      	blx	r3
	*io = &spi->io;
     d1a:	340c      	adds	r4, #12
     d1c:	602c      	str	r4, [r5, #0]
	return 0;
}
     d1e:	2000      	movs	r0, #0
     d20:	bd70      	pop	{r4, r5, r6, pc}
     d22:	2000      	movs	r0, #0
     d24:	e7f5      	b.n	d12 <spi_m_sync_get_io_descriptor+0x12>
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	00003b64 	.word	0x00003b64
     d2c:	000012f5 	.word	0x000012f5

00000d30 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     d30:	b5f0      	push	{r4, r5, r6, r7, lr}
     d32:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     d34:	4b0e      	ldr	r3, [pc, #56]	; (d70 <_usb_d_find_ep+0x40>)
     d36:	785a      	ldrb	r2, [r3, #1]
     d38:	4290      	cmp	r0, r2
     d3a:	d017      	beq.n	d6c <_usb_d_find_ep+0x3c>
     d3c:	2300      	movs	r3, #0
     d3e:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     d40:	4f0b      	ldr	r7, [pc, #44]	; (d70 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     d42:	260f      	movs	r6, #15
     d44:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     d46:	003d      	movs	r5, r7
     d48:	e008      	b.n	d5c <_usb_d_find_ep+0x2c>
     d4a:	3001      	adds	r0, #1
     d4c:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     d4e:	2804      	cmp	r0, #4
     d50:	d00a      	beq.n	d68 <_usb_d_find_ep+0x38>
     d52:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     d54:	18ea      	adds	r2, r5, r3
     d56:	7852      	ldrb	r2, [r2, #1]
     d58:	42a2      	cmp	r2, r4
     d5a:	d006      	beq.n	d6a <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     d5c:	5dd9      	ldrb	r1, [r3, r7]
     d5e:	2900      	cmp	r1, #0
     d60:	d1f3      	bne.n	d4a <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     d62:	4296      	cmp	r6, r2
     d64:	d1f1      	bne.n	d4a <_usb_d_find_ep+0x1a>
     d66:	e000      	b.n	d6a <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     d68:	3805      	subs	r0, #5
}
     d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     d6c:	2000      	movs	r0, #0
     d6e:	e7fc      	b.n	d6a <_usb_d_find_ep+0x3a>
     d70:	20000668 	.word	0x20000668

00000d74 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     d74:	2000      	movs	r0, #0
     d76:	4770      	bx	lr

00000d78 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     d78:	b570      	push	{r4, r5, r6, lr}
     d7a:	0004      	movs	r4, r0
     d7c:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     d7e:	4b0a      	ldr	r3, [pc, #40]	; (da8 <usb_d_cb_trans_more+0x30>)
     d80:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     d82:	0142      	lsls	r2, r0, #5
     d84:	4b09      	ldr	r3, [pc, #36]	; (dac <usb_d_cb_trans_more+0x34>)
     d86:	189b      	adds	r3, r3, r2
     d88:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     d8a:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     d8c:	2a03      	cmp	r2, #3
     d8e:	d001      	beq.n	d94 <usb_d_cb_trans_more+0x1c>
}
     d90:	0018      	movs	r0, r3
     d92:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     d94:	0140      	lsls	r0, r0, #5
     d96:	4b05      	ldr	r3, [pc, #20]	; (dac <usb_d_cb_trans_more+0x34>)
     d98:	1818      	adds	r0, r3, r0
     d9a:	6983      	ldr	r3, [r0, #24]
     d9c:	0029      	movs	r1, r5
     d9e:	0020      	movs	r0, r4
     da0:	4798      	blx	r3
     da2:	0003      	movs	r3, r0
     da4:	e7f4      	b.n	d90 <usb_d_cb_trans_more+0x18>
     da6:	46c0      	nop			; (mov r8, r8)
     da8:	00000d31 	.word	0x00000d31
     dac:	20000668 	.word	0x20000668

00000db0 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     db0:	b5f0      	push	{r4, r5, r6, r7, lr}
     db2:	b085      	sub	sp, #20
     db4:	0005      	movs	r5, r0
     db6:	000f      	movs	r7, r1
     db8:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     dba:	4b51      	ldr	r3, [pc, #324]	; (f00 <_usb_d_cb_trans_done+0x150>)
     dbc:	4798      	blx	r3
     dbe:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     dc0:	2f00      	cmp	r7, #0
     dc2:	d162      	bne.n	e8a <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     dc4:	4b4f      	ldr	r3, [pc, #316]	; (f04 <_usb_d_cb_trans_done+0x154>)
     dc6:	0142      	lsls	r2, r0, #5
     dc8:	1899      	adds	r1, r3, r2
     dca:	2000      	movs	r0, #0
     dcc:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     dce:	5cd3      	ldrb	r3, [r2, r3]
     dd0:	2b00      	cmp	r3, #0
     dd2:	d00e      	beq.n	df2 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     dd4:	0162      	lsls	r2, r4, #5
     dd6:	4b4b      	ldr	r3, [pc, #300]	; (f04 <_usb_d_cb_trans_done+0x154>)
     dd8:	189b      	adds	r3, r3, r2
     dda:	2201      	movs	r2, #1
     ddc:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     dde:	0164      	lsls	r4, r4, #5
     de0:	4b48      	ldr	r3, [pc, #288]	; (f04 <_usb_d_cb_trans_done+0x154>)
     de2:	191c      	adds	r4, r3, r4
     de4:	78e1      	ldrb	r1, [r4, #3]
     de6:	69e3      	ldr	r3, [r4, #28]
     de8:	0032      	movs	r2, r6
     dea:	0028      	movs	r0, r5
     dec:	4798      	blx	r3
}
     dee:	b005      	add	sp, #20
     df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     df2:	788b      	ldrb	r3, [r1, #2]
     df4:	2b03      	cmp	r3, #3
     df6:	d00c      	beq.n	e12 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     df8:	4b42      	ldr	r3, [pc, #264]	; (f04 <_usb_d_cb_trans_done+0x154>)
     dfa:	0162      	lsls	r2, r4, #5
     dfc:	320c      	adds	r2, #12
     dfe:	189a      	adds	r2, r3, r2
     e00:	0164      	lsls	r4, r4, #5
     e02:	191c      	adds	r4, r3, r4
     e04:	7860      	ldrb	r0, [r4, #1]
     e06:	2100      	movs	r1, #0
     e08:	69e3      	ldr	r3, [r4, #28]
     e0a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     e0c:	2302      	movs	r3, #2
     e0e:	70a3      	strb	r3, [r4, #2]
     e10:	e7ed      	b.n	dee <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     e12:	4a3c      	ldr	r2, [pc, #240]	; (f04 <_usb_d_cb_trans_done+0x154>)
     e14:	000b      	movs	r3, r1
     e16:	250c      	movs	r5, #12
     e18:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     e1a:	0161      	lsls	r1, r4, #5
     e1c:	310c      	adds	r1, #12
     e1e:	1852      	adds	r2, r2, r1
     e20:	7858      	ldrb	r0, [r3, #1]
     e22:	69db      	ldr	r3, [r3, #28]
     e24:	2101      	movs	r1, #1
     e26:	4798      	blx	r3
		if (err) {
     e28:	2800      	cmp	r0, #0
     e2a:	d017      	beq.n	e5c <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     e2c:	0162      	lsls	r2, r4, #5
     e2e:	4b35      	ldr	r3, [pc, #212]	; (f04 <_usb_d_cb_trans_done+0x154>)
     e30:	189b      	adds	r3, r3, r2
     e32:	2205      	movs	r2, #5
     e34:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     e36:	3a03      	subs	r2, #3
     e38:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     e3a:	2d00      	cmp	r5, #0
     e3c:	db09      	blt.n	e52 <_usb_d_cb_trans_done+0xa2>
     e3e:	0164      	lsls	r4, r4, #5
     e40:	4b30      	ldr	r3, [pc, #192]	; (f04 <_usb_d_cb_trans_done+0x154>)
     e42:	191c      	adds	r4, r3, r4
     e44:	7860      	ldrb	r0, [r4, #1]
     e46:	2380      	movs	r3, #128	; 0x80
     e48:	4318      	orrs	r0, r3
     e4a:	2101      	movs	r1, #1
     e4c:	4b2e      	ldr	r3, [pc, #184]	; (f08 <_usb_d_cb_trans_done+0x158>)
     e4e:	4798      	blx	r3
     e50:	e7cd      	b.n	dee <_usb_d_cb_trans_done+0x3e>
     e52:	0164      	lsls	r4, r4, #5
     e54:	4b2b      	ldr	r3, [pc, #172]	; (f04 <_usb_d_cb_trans_done+0x154>)
     e56:	191c      	adds	r4, r3, r4
     e58:	7860      	ldrb	r0, [r4, #1]
     e5a:	e7f6      	b.n	e4a <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     e5c:	0164      	lsls	r4, r4, #5
     e5e:	4b29      	ldr	r3, [pc, #164]	; (f04 <_usb_d_cb_trans_done+0x154>)
     e60:	191c      	adds	r4, r3, r4
     e62:	2304      	movs	r3, #4
     e64:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     e66:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     e68:	2200      	movs	r2, #0
     e6a:	9201      	str	r2, [sp, #4]
     e6c:	9202      	str	r2, [sp, #8]
     e6e:	2d00      	cmp	r5, #0
     e70:	db08      	blt.n	e84 <_usb_d_cb_trans_done+0xd4>
     e72:	3280      	adds	r2, #128	; 0x80
     e74:	4313      	orrs	r3, r2
     e76:	a801      	add	r0, sp, #4
     e78:	7203      	strb	r3, [r0, #8]
     e7a:	2301      	movs	r3, #1
     e7c:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     e7e:	4b23      	ldr	r3, [pc, #140]	; (f0c <_usb_d_cb_trans_done+0x15c>)
     e80:	4798      	blx	r3
     e82:	e7b4      	b.n	dee <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     e84:	220f      	movs	r2, #15
     e86:	4013      	ands	r3, r2
     e88:	e7f5      	b.n	e76 <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     e8a:	2f01      	cmp	r7, #1
     e8c:	d00a      	beq.n	ea4 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     e8e:	2f02      	cmp	r7, #2
     e90:	d01d      	beq.n	ece <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     e92:	2f03      	cmp	r7, #3
     e94:	d02c      	beq.n	ef0 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     e96:	0142      	lsls	r2, r0, #5
     e98:	4b1a      	ldr	r3, [pc, #104]	; (f04 <_usb_d_cb_trans_done+0x154>)
     e9a:	189b      	adds	r3, r3, r2
     e9c:	2206      	movs	r2, #6
     e9e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     ea0:	70da      	strb	r2, [r3, #3]
     ea2:	e79c      	b.n	dde <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     ea4:	4b17      	ldr	r3, [pc, #92]	; (f04 <_usb_d_cb_trans_done+0x154>)
     ea6:	0142      	lsls	r2, r0, #5
     ea8:	1899      	adds	r1, r3, r2
     eaa:	2002      	movs	r0, #2
     eac:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     eae:	5cd3      	ldrb	r3, [r2, r3]
     eb0:	2b00      	cmp	r3, #0
     eb2:	d005      	beq.n	ec0 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     eb4:	0162      	lsls	r2, r4, #5
     eb6:	4b13      	ldr	r3, [pc, #76]	; (f04 <_usb_d_cb_trans_done+0x154>)
     eb8:	189b      	adds	r3, r3, r2
     eba:	2205      	movs	r2, #5
     ebc:	709a      	strb	r2, [r3, #2]
     ebe:	e78e      	b.n	dde <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     ec0:	2202      	movs	r2, #2
     ec2:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     ec4:	2100      	movs	r1, #0
     ec6:	0028      	movs	r0, r5
     ec8:	4b0f      	ldr	r3, [pc, #60]	; (f08 <_usb_d_cb_trans_done+0x158>)
     eca:	4798      	blx	r3
     ecc:	e787      	b.n	dde <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     ece:	4b0d      	ldr	r3, [pc, #52]	; (f04 <_usb_d_cb_trans_done+0x154>)
     ed0:	0142      	lsls	r2, r0, #5
     ed2:	1899      	adds	r1, r3, r2
     ed4:	2004      	movs	r0, #4
     ed6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     ed8:	5cd3      	ldrb	r3, [r2, r3]
     eda:	2b00      	cmp	r3, #0
     edc:	d005      	beq.n	eea <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     ede:	0162      	lsls	r2, r4, #5
     ee0:	4b08      	ldr	r3, [pc, #32]	; (f04 <_usb_d_cb_trans_done+0x154>)
     ee2:	189b      	adds	r3, r3, r2
     ee4:	2201      	movs	r2, #1
     ee6:	709a      	strb	r2, [r3, #2]
     ee8:	e779      	b.n	dde <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     eea:	2302      	movs	r3, #2
     eec:	708b      	strb	r3, [r1, #2]
			return;
     eee:	e77e      	b.n	dee <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     ef0:	0142      	lsls	r2, r0, #5
     ef2:	4b04      	ldr	r3, [pc, #16]	; (f04 <_usb_d_cb_trans_done+0x154>)
     ef4:	189b      	adds	r3, r3, r2
     ef6:	2200      	movs	r2, #0
     ef8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     efa:	3205      	adds	r2, #5
     efc:	70da      	strb	r2, [r3, #3]
     efe:	e76e      	b.n	dde <_usb_d_cb_trans_done+0x2e>
     f00:	00000d31 	.word	0x00000d31
     f04:	20000668 	.word	0x20000668
     f08:	000023ed 	.word	0x000023ed
     f0c:	000025c1 	.word	0x000025c1

00000f10 <usb_d_cb_trans_setup>:
{
     f10:	b5f0      	push	{r4, r5, r6, r7, lr}
     f12:	46c6      	mov	lr, r8
     f14:	b500      	push	{lr}
     f16:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     f18:	4b1d      	ldr	r3, [pc, #116]	; (f90 <usb_d_cb_trans_setup+0x80>)
     f1a:	4798      	blx	r3
     f1c:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     f1e:	0145      	lsls	r5, r0, #5
     f20:	350c      	adds	r5, #12
     f22:	4b1c      	ldr	r3, [pc, #112]	; (f94 <usb_d_cb_trans_setup+0x84>)
     f24:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     f26:	0029      	movs	r1, r5
     f28:	0020      	movs	r0, r4
     f2a:	4b1b      	ldr	r3, [pc, #108]	; (f98 <usb_d_cb_trans_setup+0x88>)
     f2c:	4798      	blx	r3
	if (n != 8) {
     f2e:	b2c0      	uxtb	r0, r0
     f30:	2808      	cmp	r0, #8
     f32:	d00a      	beq.n	f4a <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     f34:	2101      	movs	r1, #1
     f36:	0020      	movs	r0, r4
     f38:	4d18      	ldr	r5, [pc, #96]	; (f9c <usb_d_cb_trans_setup+0x8c>)
     f3a:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     f3c:	2080      	movs	r0, #128	; 0x80
     f3e:	4320      	orrs	r0, r4
     f40:	2101      	movs	r1, #1
     f42:	47a8      	blx	r5
}
     f44:	bc04      	pop	{r2}
     f46:	4690      	mov	r8, r2
     f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     f4a:	2100      	movs	r1, #0
     f4c:	0020      	movs	r0, r4
     f4e:	4b13      	ldr	r3, [pc, #76]	; (f9c <usb_d_cb_trans_setup+0x8c>)
     f50:	4698      	mov	r8, r3
     f52:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     f54:	2780      	movs	r7, #128	; 0x80
     f56:	4327      	orrs	r7, r4
     f58:	2100      	movs	r1, #0
     f5a:	0038      	movs	r0, r7
     f5c:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     f5e:	0172      	lsls	r2, r6, #5
     f60:	4b0c      	ldr	r3, [pc, #48]	; (f94 <usb_d_cb_trans_setup+0x84>)
     f62:	189b      	adds	r3, r3, r2
     f64:	2201      	movs	r2, #1
     f66:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     f68:	695b      	ldr	r3, [r3, #20]
     f6a:	0029      	movs	r1, r5
     f6c:	0020      	movs	r0, r4
     f6e:	4798      	blx	r3
     f70:	2800      	cmp	r0, #0
     f72:	d1e7      	bne.n	f44 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     f74:	0176      	lsls	r6, r6, #5
     f76:	4b07      	ldr	r3, [pc, #28]	; (f94 <usb_d_cb_trans_setup+0x84>)
     f78:	199e      	adds	r6, r3, r6
     f7a:	2305      	movs	r3, #5
     f7c:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     f7e:	2101      	movs	r1, #1
     f80:	0020      	movs	r0, r4
     f82:	4c06      	ldr	r4, [pc, #24]	; (f9c <usb_d_cb_trans_setup+0x8c>)
     f84:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     f86:	2101      	movs	r1, #1
     f88:	0038      	movs	r0, r7
     f8a:	47a0      	blx	r4
     f8c:	e7da      	b.n	f44 <usb_d_cb_trans_setup+0x34>
     f8e:	46c0      	nop			; (mov r8, r8)
     f90:	00000d31 	.word	0x00000d31
     f94:	20000668 	.word	0x20000668
     f98:	00002551 	.word	0x00002551
     f9c:	000023ed 	.word	0x000023ed

00000fa0 <usb_d_init>:

int32_t usb_d_init(void)
{
     fa0:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     fa2:	4b10      	ldr	r3, [pc, #64]	; (fe4 <usb_d_init+0x44>)
     fa4:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     fa6:	2800      	cmp	r0, #0
     fa8:	db1b      	blt.n	fe2 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     faa:	4c0f      	ldr	r4, [pc, #60]	; (fe8 <usb_d_init+0x48>)
     fac:	2280      	movs	r2, #128	; 0x80
     fae:	2100      	movs	r1, #0
     fb0:	0020      	movs	r0, r4
     fb2:	4b0e      	ldr	r3, [pc, #56]	; (fec <usb_d_init+0x4c>)
     fb4:	4798      	blx	r3
     fb6:	0023      	movs	r3, r4
     fb8:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     fba:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     fbc:	4a0c      	ldr	r2, [pc, #48]	; (ff0 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     fbe:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     fc0:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     fc2:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     fc4:	61da      	str	r2, [r3, #28]
     fc6:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     fc8:	42a3      	cmp	r3, r4
     fca:	d1f8      	bne.n	fbe <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     fcc:	4909      	ldr	r1, [pc, #36]	; (ff4 <usb_d_init+0x54>)
     fce:	2000      	movs	r0, #0
     fd0:	4c09      	ldr	r4, [pc, #36]	; (ff8 <usb_d_init+0x58>)
     fd2:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     fd4:	4909      	ldr	r1, [pc, #36]	; (ffc <usb_d_init+0x5c>)
     fd6:	2001      	movs	r0, #1
     fd8:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     fda:	4909      	ldr	r1, [pc, #36]	; (1000 <usb_d_init+0x60>)
     fdc:	2002      	movs	r0, #2
     fde:	47a0      	blx	r4
	return ERR_NONE;
     fe0:	2000      	movs	r0, #0
}
     fe2:	bd10      	pop	{r4, pc}
     fe4:	00001dc1 	.word	0x00001dc1
     fe8:	20000668 	.word	0x20000668
     fec:	000038ad 	.word	0x000038ad
     ff0:	00000d75 	.word	0x00000d75
     ff4:	00000f11 	.word	0x00000f11
     ff8:	000027f5 	.word	0x000027f5
     ffc:	00000d79 	.word	0x00000d79
    1000:	00000db1 	.word	0x00000db1

00001004 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    1004:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1006:	4b01      	ldr	r3, [pc, #4]	; (100c <usb_d_register_callback+0x8>)
    1008:	4798      	blx	r3
}
    100a:	bd10      	pop	{r4, pc}
    100c:	000027d1 	.word	0x000027d1

00001010 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    1010:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    1012:	4b01      	ldr	r3, [pc, #4]	; (1018 <usb_d_enable+0x8>)
    1014:	4798      	blx	r3
}
    1016:	bd10      	pop	{r4, pc}
    1018:	00001ea1 	.word	0x00001ea1

0000101c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    101c:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    101e:	4b01      	ldr	r3, [pc, #4]	; (1024 <usb_d_attach+0x8>)
    1020:	4798      	blx	r3
}
    1022:	bd10      	pop	{r4, pc}
    1024:	00001ef1 	.word	0x00001ef1

00001028 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    1028:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    102a:	4b01      	ldr	r3, [pc, #4]	; (1030 <usb_d_set_address+0x8>)
    102c:	4798      	blx	r3
}
    102e:	bd10      	pop	{r4, pc}
    1030:	00001f01 	.word	0x00001f01

00001034 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1036:	0005      	movs	r5, r0
    1038:	000e      	movs	r6, r1
    103a:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    103c:	4b0f      	ldr	r3, [pc, #60]	; (107c <usb_d_ep_init+0x48>)
    103e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1040:	2800      	cmp	r0, #0
    1042:	da14      	bge.n	106e <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1044:	20ff      	movs	r0, #255	; 0xff
    1046:	4b0d      	ldr	r3, [pc, #52]	; (107c <usb_d_ep_init+0x48>)
    1048:	4798      	blx	r3
    104a:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    104c:	db12      	blt.n	1074 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    104e:	003a      	movs	r2, r7
    1050:	0031      	movs	r1, r6
    1052:	0028      	movs	r0, r5
    1054:	4b0a      	ldr	r3, [pc, #40]	; (1080 <usb_d_ep_init+0x4c>)
    1056:	4798      	blx	r3
	if (rc < 0) {
    1058:	2800      	cmp	r0, #0
    105a:	db07      	blt.n	106c <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    105c:	4a09      	ldr	r2, [pc, #36]	; (1084 <usb_d_ep_init+0x50>)
    105e:	0164      	lsls	r4, r4, #5
    1060:	1913      	adds	r3, r2, r4
    1062:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1064:	2303      	movs	r3, #3
    1066:	401e      	ands	r6, r3
    1068:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    106a:	2000      	movs	r0, #0
}
    106c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    106e:	2014      	movs	r0, #20
    1070:	4240      	negs	r0, r0
    1072:	e7fb      	b.n	106c <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    1074:	2015      	movs	r0, #21
    1076:	4240      	negs	r0, r0
    1078:	e7f8      	b.n	106c <usb_d_ep_init+0x38>
    107a:	46c0      	nop			; (mov r8, r8)
    107c:	00000d31 	.word	0x00000d31
    1080:	00001f11 	.word	0x00001f11
    1084:	20000668 	.word	0x20000668

00001088 <usb_d_ep0_init>:
{
    1088:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    108a:	b282      	uxth	r2, r0
    108c:	2100      	movs	r1, #0
    108e:	2000      	movs	r0, #0
    1090:	4b01      	ldr	r3, [pc, #4]	; (1098 <usb_d_ep0_init+0x10>)
    1092:	4798      	blx	r3
}
    1094:	bd10      	pop	{r4, pc}
    1096:	46c0      	nop			; (mov r8, r8)
    1098:	00001035 	.word	0x00001035

0000109c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    109c:	b570      	push	{r4, r5, r6, lr}
    109e:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    10a0:	4b06      	ldr	r3, [pc, #24]	; (10bc <usb_d_ep_deinit+0x20>)
    10a2:	4798      	blx	r3
    10a4:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    10a6:	db07      	blt.n	10b8 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    10a8:	0028      	movs	r0, r5
    10aa:	4b05      	ldr	r3, [pc, #20]	; (10c0 <usb_d_ep_deinit+0x24>)
    10ac:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    10ae:	0164      	lsls	r4, r4, #5
    10b0:	4b04      	ldr	r3, [pc, #16]	; (10c4 <usb_d_ep_deinit+0x28>)
    10b2:	191c      	adds	r4, r3, r4
    10b4:	23ff      	movs	r3, #255	; 0xff
    10b6:	7063      	strb	r3, [r4, #1]
}
    10b8:	bd70      	pop	{r4, r5, r6, pc}
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	00000d31 	.word	0x00000d31
    10c0:	0000203d 	.word	0x0000203d
    10c4:	20000668 	.word	0x20000668

000010c8 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    10c8:	b570      	push	{r4, r5, r6, lr}
    10ca:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    10cc:	4b0e      	ldr	r3, [pc, #56]	; (1108 <usb_d_ep_enable+0x40>)
    10ce:	4798      	blx	r3
    10d0:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    10d2:	db15      	blt.n	1100 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    10d4:	0143      	lsls	r3, r0, #5
    10d6:	4a0d      	ldr	r2, [pc, #52]	; (110c <usb_d_ep_enable+0x44>)
    10d8:	5c9b      	ldrb	r3, [r3, r2]
    10da:	425a      	negs	r2, r3
    10dc:	4153      	adcs	r3, r2
    10de:	3301      	adds	r3, #1
    10e0:	0141      	lsls	r1, r0, #5
    10e2:	4a0a      	ldr	r2, [pc, #40]	; (110c <usb_d_ep_enable+0x44>)
    10e4:	1852      	adds	r2, r2, r1
    10e6:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    10e8:	0020      	movs	r0, r4
    10ea:	4b09      	ldr	r3, [pc, #36]	; (1110 <usb_d_ep_enable+0x48>)
    10ec:	4798      	blx	r3
	if (rc < 0) {
    10ee:	2800      	cmp	r0, #0
    10f0:	db00      	blt.n	10f4 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    10f2:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    10f4:	016d      	lsls	r5, r5, #5
    10f6:	4b05      	ldr	r3, [pc, #20]	; (110c <usb_d_ep_enable+0x44>)
    10f8:	195d      	adds	r5, r3, r5
    10fa:	2300      	movs	r3, #0
    10fc:	70ab      	strb	r3, [r5, #2]
    10fe:	e7f8      	b.n	10f2 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    1100:	2012      	movs	r0, #18
    1102:	4240      	negs	r0, r0
    1104:	e7f5      	b.n	10f2 <usb_d_ep_enable+0x2a>
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	00000d31 	.word	0x00000d31
    110c:	20000668 	.word	0x20000668
    1110:	00002109 	.word	0x00002109

00001114 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1114:	b5f0      	push	{r4, r5, r6, r7, lr}
    1116:	46d6      	mov	lr, sl
    1118:	464f      	mov	r7, r9
    111a:	4646      	mov	r6, r8
    111c:	b5c0      	push	{r6, r7, lr}
    111e:	b086      	sub	sp, #24
    1120:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1122:	7a07      	ldrb	r7, [r0, #8]
    1124:	0038      	movs	r0, r7
    1126:	4b40      	ldr	r3, [pc, #256]	; (1228 <usb_d_ep_transfer+0x114>)
    1128:	4798      	blx	r3
    112a:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    112c:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
    112e:	6863      	ldr	r3, [r4, #4]
    1130:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1132:	2800      	cmp	r0, #0
    1134:	da00      	bge.n	1138 <usb_d_ep_transfer+0x24>
    1136:	e071      	b.n	121c <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    1138:	a804      	add	r0, sp, #16
    113a:	4b3c      	ldr	r3, [pc, #240]	; (122c <usb_d_ep_transfer+0x118>)
    113c:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    113e:	016a      	lsls	r2, r5, #5
    1140:	4b3b      	ldr	r3, [pc, #236]	; (1230 <usb_d_ep_transfer+0x11c>)
    1142:	189b      	adds	r3, r3, r2
    1144:	789a      	ldrb	r2, [r3, #2]
    1146:	2317      	movs	r3, #23
    1148:	446b      	add	r3, sp
    114a:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    114c:	781b      	ldrb	r3, [r3, #0]
    114e:	2b01      	cmp	r3, #1
    1150:	d010      	beq.n	1174 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1152:	a804      	add	r0, sp, #16
    1154:	4b37      	ldr	r3, [pc, #220]	; (1234 <usb_d_ep_transfer+0x120>)
    1156:	4798      	blx	r3
		switch (state) {
    1158:	2317      	movs	r3, #23
    115a:	446b      	add	r3, sp
    115c:	781b      	ldrb	r3, [r3, #0]
    115e:	b2db      	uxtb	r3, r3
    1160:	2b05      	cmp	r3, #5
    1162:	d05e      	beq.n	1222 <usb_d_ep_transfer+0x10e>
    1164:	2b06      	cmp	r3, #6
    1166:	d023      	beq.n	11b0 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    1168:	2001      	movs	r0, #1
		switch (state) {
    116a:	2b00      	cmp	r3, #0
    116c:	d13c      	bne.n	11e8 <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
    116e:	2013      	movs	r0, #19
    1170:	4240      	negs	r0, r0
    1172:	e039      	b.n	11e8 <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1174:	4b2e      	ldr	r3, [pc, #184]	; (1230 <usb_d_ep_transfer+0x11c>)
    1176:	4699      	mov	r9, r3
    1178:	016b      	lsls	r3, r5, #5
    117a:	469a      	mov	sl, r3
    117c:	464b      	mov	r3, r9
    117e:	4453      	add	r3, sl
    1180:	2203      	movs	r2, #3
    1182:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1184:	a804      	add	r0, sp, #16
    1186:	4b2b      	ldr	r3, [pc, #172]	; (1234 <usb_d_ep_transfer+0x120>)
    1188:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    118a:	464b      	mov	r3, r9
    118c:	4652      	mov	r2, sl
    118e:	5cd3      	ldrb	r3, [r2, r3]
    1190:	2b00      	cmp	r3, #0
    1192:	d010      	beq.n	11b6 <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1194:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1196:	1e72      	subs	r2, r6, #1
    1198:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    119a:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
    119c:	6822      	ldr	r2, [r4, #0]
    119e:	9201      	str	r2, [sp, #4]
    11a0:	4642      	mov	r2, r8
    11a2:	9202      	str	r2, [sp, #8]
    11a4:	b27f      	sxtb	r7, r7
    11a6:	2f00      	cmp	r7, #0
    11a8:	db17      	blt.n	11da <usb_d_ep_transfer+0xc6>
    11aa:	220f      	movs	r2, #15
    11ac:	4013      	ands	r3, r2
    11ae:	e016      	b.n	11de <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
    11b0:	2010      	movs	r0, #16
    11b2:	4240      	negs	r0, r0
    11b4:	e018      	b.n	11e8 <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    11b6:	016b      	lsls	r3, r5, #5
    11b8:	4a1d      	ldr	r2, [pc, #116]	; (1230 <usb_d_ep_transfer+0x11c>)
    11ba:	18d2      	adds	r2, r2, r3
    11bc:	7cd1      	ldrb	r1, [r2, #19]
    11be:	0209      	lsls	r1, r1, #8
    11c0:	7c93      	ldrb	r3, [r2, #18]
    11c2:	185b      	adds	r3, r3, r1
    11c4:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    11c6:	2b00      	cmp	r3, #0
    11c8:	d114      	bne.n	11f4 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    11ca:	2304      	movs	r3, #4
    11cc:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    11ce:	2200      	movs	r2, #0
			zlp                 = true;
    11d0:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    11d2:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    11d4:	6821      	ldr	r1, [r4, #0]
    11d6:	9101      	str	r1, [sp, #4]
    11d8:	9202      	str	r2, [sp, #8]
    11da:	2280      	movs	r2, #128	; 0x80
    11dc:	4313      	orrs	r3, r2
    11de:	a801      	add	r0, sp, #4
    11e0:	7203      	strb	r3, [r0, #8]
    11e2:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    11e4:	4b14      	ldr	r3, [pc, #80]	; (1238 <usb_d_ep_transfer+0x124>)
    11e6:	4798      	blx	r3
	return rc;
}
    11e8:	b006      	add	sp, #24
    11ea:	bc1c      	pop	{r2, r3, r4}
    11ec:	4690      	mov	r8, r2
    11ee:	4699      	mov	r9, r3
    11f0:	46a2      	mov	sl, r4
    11f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11f4:	4642      	mov	r2, r8
    11f6:	429a      	cmp	r2, r3
    11f8:	d900      	bls.n	11fc <usb_d_ep_transfer+0xe8>
    11fa:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    11fc:	016d      	lsls	r5, r5, #5
    11fe:	490c      	ldr	r1, [pc, #48]	; (1230 <usb_d_ep_transfer+0x11c>)
    1200:	194d      	adds	r5, r1, r5
			if (dir) {
    1202:	7b29      	ldrb	r1, [r5, #12]
    1204:	297f      	cmp	r1, #127	; 0x7f
    1206:	d805      	bhi.n	1214 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1208:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    120a:	6821      	ldr	r1, [r4, #0]
    120c:	9101      	str	r1, [sp, #4]
    120e:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1210:	2600      	movs	r6, #0
    1212:	e7ca      	b.n	11aa <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
    1214:	429a      	cmp	r2, r3
    1216:	41b6      	sbcs	r6, r6
    1218:	4276      	negs	r6, r6
    121a:	e7da      	b.n	11d2 <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
    121c:	2012      	movs	r0, #18
    121e:	4240      	negs	r0, r0
    1220:	e7e2      	b.n	11e8 <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
    1222:	2002      	movs	r0, #2
    1224:	e7e0      	b.n	11e8 <usb_d_ep_transfer+0xd4>
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	00000d31 	.word	0x00000d31
    122c:	00002ac9 	.word	0x00002ac9
    1230:	20000668 	.word	0x20000668
    1234:	00002ad7 	.word	0x00002ad7
    1238:	000025c1 	.word	0x000025c1

0000123c <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    123c:	b570      	push	{r4, r5, r6, lr}
    123e:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1240:	2900      	cmp	r1, #0
    1242:	d005      	beq.n	1250 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1244:	2901      	cmp	r1, #1
    1246:	d021      	beq.n	128c <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1248:	2102      	movs	r1, #2
    124a:	4b13      	ldr	r3, [pc, #76]	; (1298 <usb_d_ep_halt+0x5c>)
    124c:	4798      	blx	r3
	}
}
    124e:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1250:	4b12      	ldr	r3, [pc, #72]	; (129c <usb_d_ep_halt+0x60>)
    1252:	4798      	blx	r3
    1254:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    1256:	db1c      	blt.n	1292 <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1258:	2102      	movs	r1, #2
    125a:	0020      	movs	r0, r4
    125c:	4b0e      	ldr	r3, [pc, #56]	; (1298 <usb_d_ep_halt+0x5c>)
    125e:	4798      	blx	r3
    1260:	2800      	cmp	r0, #0
    1262:	d0f4      	beq.n	124e <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1264:	2100      	movs	r1, #0
    1266:	0020      	movs	r0, r4
    1268:	4b0b      	ldr	r3, [pc, #44]	; (1298 <usb_d_ep_halt+0x5c>)
    126a:	4798      	blx	r3
		if (rc < 0) {
    126c:	2800      	cmp	r0, #0
    126e:	dbee      	blt.n	124e <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1270:	016d      	lsls	r5, r5, #5
    1272:	4b0b      	ldr	r3, [pc, #44]	; (12a0 <usb_d_ep_halt+0x64>)
    1274:	195d      	adds	r5, r3, r5
    1276:	2301      	movs	r3, #1
    1278:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    127a:	3302      	adds	r3, #2
    127c:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    127e:	69eb      	ldr	r3, [r5, #28]
    1280:	2200      	movs	r2, #0
    1282:	2103      	movs	r1, #3
    1284:	0020      	movs	r0, r4
    1286:	4798      	blx	r3
	return ERR_NONE;
    1288:	2000      	movs	r0, #0
    128a:	e7e0      	b.n	124e <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    128c:	4b02      	ldr	r3, [pc, #8]	; (1298 <usb_d_ep_halt+0x5c>)
    128e:	4798      	blx	r3
    1290:	e7dd      	b.n	124e <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    1292:	2012      	movs	r0, #18
    1294:	4240      	negs	r0, r0
    1296:	e7da      	b.n	124e <usb_d_ep_halt+0x12>
    1298:	000023ed 	.word	0x000023ed
    129c:	00000d31 	.word	0x00000d31
    12a0:	20000668 	.word	0x20000668

000012a4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    12a4:	b570      	push	{r4, r5, r6, lr}
    12a6:	000d      	movs	r5, r1
    12a8:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    12aa:	4b0f      	ldr	r3, [pc, #60]	; (12e8 <usb_d_ep_register_callback+0x44>)
    12ac:	4798      	blx	r3
    12ae:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    12b0:	1e22      	subs	r2, r4, #0
    12b2:	d008      	beq.n	12c6 <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    12b4:	2b00      	cmp	r3, #0
    12b6:	db05      	blt.n	12c4 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    12b8:	2d01      	cmp	r5, #1
    12ba:	d00b      	beq.n	12d4 <usb_d_ep_register_callback+0x30>
    12bc:	2d00      	cmp	r5, #0
    12be:	d004      	beq.n	12ca <usb_d_ep_register_callback+0x26>
    12c0:	2d02      	cmp	r5, #2
    12c2:	d00c      	beq.n	12de <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    12c4:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    12c6:	4a09      	ldr	r2, [pc, #36]	; (12ec <usb_d_ep_register_callback+0x48>)
    12c8:	e7f4      	b.n	12b4 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    12ca:	0140      	lsls	r0, r0, #5
    12cc:	4b08      	ldr	r3, [pc, #32]	; (12f0 <usb_d_ep_register_callback+0x4c>)
    12ce:	1818      	adds	r0, r3, r0
    12d0:	6142      	str	r2, [r0, #20]
		break;
    12d2:	e7f7      	b.n	12c4 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    12d4:	0140      	lsls	r0, r0, #5
    12d6:	4b06      	ldr	r3, [pc, #24]	; (12f0 <usb_d_ep_register_callback+0x4c>)
    12d8:	1818      	adds	r0, r3, r0
    12da:	6182      	str	r2, [r0, #24]
		break;
    12dc:	e7f2      	b.n	12c4 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    12de:	0140      	lsls	r0, r0, #5
    12e0:	4b03      	ldr	r3, [pc, #12]	; (12f0 <usb_d_ep_register_callback+0x4c>)
    12e2:	1818      	adds	r0, r3, r0
    12e4:	61c2      	str	r2, [r0, #28]
		break;
    12e6:	e7ed      	b.n	12c4 <usb_d_ep_register_callback+0x20>
    12e8:	00000d31 	.word	0x00000d31
    12ec:	00000d75 	.word	0x00000d75
    12f0:	20000668 	.word	0x20000668

000012f4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    12f4:	2800      	cmp	r0, #0
    12f6:	d100      	bne.n	12fa <assert+0x6>
		__asm("BKPT #0");
    12f8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    12fa:	4770      	bx	lr

000012fc <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    12fc:	b510      	push	{r4, lr}
    12fe:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
    1300:	20c8      	movs	r0, #200	; 0xc8
    1302:	0080      	lsls	r0, r0, #2
    1304:	4358      	muls	r0, r3
    1306:	3002      	adds	r0, #2
    1308:	2103      	movs	r1, #3
    130a:	4b03      	ldr	r3, [pc, #12]	; (1318 <_get_cycles_for_ms+0x1c>)
    130c:	4798      	blx	r3
    130e:	0003      	movs	r3, r0
    1310:	0080      	lsls	r0, r0, #2
    1312:	18c0      	adds	r0, r0, r3
    1314:	0040      	lsls	r0, r0, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1316:	bd10      	pop	{r4, pc}
    1318:	00003665 	.word	0x00003665

0000131c <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    131c:	3901      	subs	r1, #1
    131e:	d8fd      	bhi.n	131c <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    1320:	4770      	bx	lr
	...

00001324 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1324:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1326:	4b06      	ldr	r3, [pc, #24]	; (1340 <_init_chip+0x1c>)
    1328:	685a      	ldr	r2, [r3, #4]
    132a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    132c:	4b05      	ldr	r3, [pc, #20]	; (1344 <_init_chip+0x20>)
    132e:	4798      	blx	r3
	_sysctrl_init_sources();
    1330:	4b05      	ldr	r3, [pc, #20]	; (1348 <_init_chip+0x24>)
    1332:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    1334:	4b05      	ldr	r3, [pc, #20]	; (134c <_init_chip+0x28>)
    1336:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1338:	20ff      	movs	r0, #255	; 0xff
    133a:	4b05      	ldr	r3, [pc, #20]	; (1350 <_init_chip+0x2c>)
    133c:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    133e:	bd10      	pop	{r4, pc}
    1340:	41004000 	.word	0x41004000
    1344:	000013ad 	.word	0x000013ad
    1348:	00001679 	.word	0x00001679
    134c:	000016cd 	.word	0x000016cd
    1350:	00001355 	.word	0x00001355

00001354 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1354:	07c3      	lsls	r3, r0, #31
    1356:	d50a      	bpl.n	136e <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1358:	4b11      	ldr	r3, [pc, #68]	; (13a0 <_gclk_init_generators_by_fref+0x4c>)
    135a:	2280      	movs	r2, #128	; 0x80
    135c:	0052      	lsls	r2, r2, #1
    135e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1360:	2283      	movs	r2, #131	; 0x83
    1362:	0252      	lsls	r2, r2, #9
    1364:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1366:	001a      	movs	r2, r3
    1368:	7853      	ldrb	r3, [r2, #1]
    136a:	09db      	lsrs	r3, r3, #7
    136c:	d1fc      	bne.n	1368 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    136e:	0783      	lsls	r3, r0, #30
    1370:	d509      	bpl.n	1386 <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
    1372:	4b0b      	ldr	r3, [pc, #44]	; (13a0 <_gclk_init_generators_by_fref+0x4c>)
    1374:	2202      	movs	r2, #2
    1376:	32ff      	adds	r2, #255	; 0xff
    1378:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    137a:	4a0a      	ldr	r2, [pc, #40]	; (13a4 <_gclk_init_generators_by_fref+0x50>)
    137c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    137e:	001a      	movs	r2, r3
    1380:	7853      	ldrb	r3, [r2, #1]
    1382:	09db      	lsrs	r3, r3, #7
    1384:	d1fc      	bne.n	1380 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    1386:	0603      	lsls	r3, r0, #24
    1388:	d509      	bpl.n	139e <_gclk_init_generators_by_fref+0x4a>
	((Gclk *)hw)->GENDIV.reg = data;
    138a:	4b05      	ldr	r3, [pc, #20]	; (13a0 <_gclk_init_generators_by_fref+0x4c>)
    138c:	2208      	movs	r2, #8
    138e:	32ff      	adds	r2, #255	; 0xff
    1390:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1392:	4a05      	ldr	r2, [pc, #20]	; (13a8 <_gclk_init_generators_by_fref+0x54>)
    1394:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1396:	001a      	movs	r2, r3
    1398:	7853      	ldrb	r3, [r2, #1]
    139a:	09db      	lsrs	r3, r3, #7
    139c:	d1fc      	bne.n	1398 <_gclk_init_generators_by_fref+0x44>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    139e:	4770      	bx	lr
    13a0:	40000c00 	.word	0x40000c00
    13a4:	00090701 	.word	0x00090701
    13a8:	00010407 	.word	0x00010407

000013ac <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    13ac:	4b06      	ldr	r3, [pc, #24]	; (13c8 <_pm_init+0x1c>)
    13ae:	7a1a      	ldrb	r2, [r3, #8]
    13b0:	b2d2      	uxtb	r2, r2
    13b2:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    13b4:	7a5a      	ldrb	r2, [r3, #9]
    13b6:	b2d2      	uxtb	r2, r2
    13b8:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    13ba:	7a9a      	ldrb	r2, [r3, #10]
    13bc:	b2d2      	uxtb	r2, r2
    13be:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    13c0:	7ada      	ldrb	r2, [r3, #11]
    13c2:	b2d2      	uxtb	r2, r2
    13c4:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    13c6:	4770      	bx	lr
    13c8:	40000400 	.word	0x40000400

000013cc <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    13cc:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    13ce:	07db      	lsls	r3, r3, #31
    13d0:	d409      	bmi.n	13e6 <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    13d2:	6803      	ldr	r3, [r0, #0]
    13d4:	2202      	movs	r2, #2
    13d6:	4313      	orrs	r3, r2
    13d8:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    13da:	3201      	adds	r2, #1
    13dc:	69c3      	ldr	r3, [r0, #28]
    13de:	421a      	tst	r2, r3
    13e0:	d1fc      	bne.n	13dc <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    13e2:	2000      	movs	r0, #0
}
    13e4:	4770      	bx	lr
		return ERR_BUSY;
    13e6:	2004      	movs	r0, #4
    13e8:	4240      	negs	r0, r0
    13ea:	e7fb      	b.n	13e4 <_spi_sync_enable+0x18>

000013ec <_spi_sync_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    13ec:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    13ee:	07db      	lsls	r3, r3, #31
    13f0:	d409      	bmi.n	1406 <_spi_sync_disable+0x1a>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    13f2:	6803      	ldr	r3, [r0, #0]
    13f4:	2202      	movs	r2, #2
    13f6:	4393      	bics	r3, r2
    13f8:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    13fa:	3201      	adds	r2, #1
    13fc:	69c3      	ldr	r3, [r0, #28]
    13fe:	421a      	tst	r2, r3
    1400:	d1fc      	bne.n	13fc <_spi_sync_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1402:	2000      	movs	r0, #0
}
    1404:	4770      	bx	lr
		return ERR_BUSY;
    1406:	2004      	movs	r0, #4
    1408:	4240      	negs	r0, r0
    140a:	e7fb      	b.n	1404 <_spi_sync_disable+0x18>

0000140c <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    140c:	b570      	push	{r4, r5, r6, lr}
    140e:	0005      	movs	r5, r0
    1410:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1412:	4b35      	ldr	r3, [pc, #212]	; (14e8 <_spi_m_sync_init+0xdc>)
    1414:	18cb      	adds	r3, r1, r3
    1416:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    1418:	b2db      	uxtb	r3, r3
    141a:	2b00      	cmp	r3, #0
    141c:	d00b      	beq.n	1436 <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    141e:	2800      	cmp	r0, #0
    1420:	d051      	beq.n	14c6 <_spi_m_sync_init+0xba>
    1422:	1e60      	subs	r0, r4, #1
    1424:	4184      	sbcs	r4, r0
    1426:	b2e0      	uxtb	r0, r4
    1428:	4a30      	ldr	r2, [pc, #192]	; (14ec <_spi_m_sync_init+0xe0>)
    142a:	4931      	ldr	r1, [pc, #196]	; (14f0 <_spi_m_sync_init+0xe4>)
    142c:	4b31      	ldr	r3, [pc, #196]	; (14f4 <_spi_m_sync_init+0xe8>)
    142e:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1430:	200d      	movs	r0, #13
    1432:	4240      	negs	r0, r0
    1434:	e046      	b.n	14c4 <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    1436:	2800      	cmp	r0, #0
    1438:	d14d      	bne.n	14d6 <_spi_m_sync_init+0xca>
    143a:	4a2c      	ldr	r2, [pc, #176]	; (14ec <_spi_m_sync_init+0xe0>)
    143c:	492c      	ldr	r1, [pc, #176]	; (14f0 <_spi_m_sync_init+0xe4>)
    143e:	2000      	movs	r0, #0
    1440:	4b2c      	ldr	r3, [pc, #176]	; (14f4 <_spi_m_sync_init+0xe8>)
    1442:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1444:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1446:	07db      	lsls	r3, r3, #31
    1448:	d418      	bmi.n	147c <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    144a:	2203      	movs	r2, #3
    144c:	69e3      	ldr	r3, [r4, #28]
    144e:	421a      	tst	r2, r3
    1450:	d1fc      	bne.n	144c <_spi_m_sync_init+0x40>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1452:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1454:	079b      	lsls	r3, r3, #30
    1456:	d50b      	bpl.n	1470 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1458:	6823      	ldr	r3, [r4, #0]
    145a:	2202      	movs	r2, #2
    145c:	4393      	bics	r3, r2
    145e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1460:	3201      	adds	r2, #1
    1462:	69e3      	ldr	r3, [r4, #28]
    1464:	421a      	tst	r2, r3
    1466:	d1fc      	bne.n	1462 <_spi_m_sync_init+0x56>
    1468:	2202      	movs	r2, #2
    146a:	69e3      	ldr	r3, [r4, #28]
    146c:	421a      	tst	r2, r3
    146e:	d1fc      	bne.n	146a <_spi_m_sync_init+0x5e>
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1470:	230d      	movs	r3, #13
    1472:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1474:	2203      	movs	r2, #3
    1476:	69e3      	ldr	r3, [r4, #28]
    1478:	421a      	tst	r2, r3
    147a:	d1fc      	bne.n	1476 <_spi_m_sync_init+0x6a>
    147c:	2201      	movs	r2, #1
    147e:	69e3      	ldr	r3, [r4, #28]
    1480:	421a      	tst	r2, r3
    1482:	d1fc      	bne.n	147e <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1484:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1486:	0020      	movs	r0, r4
    1488:	1e43      	subs	r3, r0, #1
    148a:	4198      	sbcs	r0, r3
    148c:	b2c0      	uxtb	r0, r0
    148e:	4a1a      	ldr	r2, [pc, #104]	; (14f8 <_spi_m_sync_init+0xec>)
    1490:	4917      	ldr	r1, [pc, #92]	; (14f0 <_spi_m_sync_init+0xe4>)
    1492:	4b18      	ldr	r3, [pc, #96]	; (14f4 <_spi_m_sync_init+0xe8>)
    1494:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1496:	4b19      	ldr	r3, [pc, #100]	; (14fc <_spi_m_sync_init+0xf0>)
    1498:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    149a:	2203      	movs	r2, #3
    149c:	69e3      	ldr	r3, [r4, #28]
    149e:	421a      	tst	r2, r3
    14a0:	d1fc      	bne.n	149c <_spi_m_sync_init+0x90>
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    14a2:	2380      	movs	r3, #128	; 0x80
    14a4:	029b      	lsls	r3, r3, #10
    14a6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    14a8:	2207      	movs	r2, #7
    14aa:	69e3      	ldr	r3, [r4, #28]
    14ac:	421a      	tst	r2, r3
    14ae:	d1fc      	bne.n	14aa <_spi_m_sync_init+0x9e>
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    14b0:	234f      	movs	r3, #79	; 0x4f
    14b2:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    14b4:	2200      	movs	r2, #0
    14b6:	3b1f      	subs	r3, #31
    14b8:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    14ba:	3b2f      	subs	r3, #47	; 0x2f
    14bc:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    14be:	4b10      	ldr	r3, [pc, #64]	; (1500 <_spi_m_sync_init+0xf4>)
    14c0:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    14c2:	2000      	movs	r0, #0
}
    14c4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    14c6:	4a09      	ldr	r2, [pc, #36]	; (14ec <_spi_m_sync_init+0xe0>)
    14c8:	4909      	ldr	r1, [pc, #36]	; (14f0 <_spi_m_sync_init+0xe4>)
    14ca:	2000      	movs	r0, #0
    14cc:	4b09      	ldr	r3, [pc, #36]	; (14f4 <_spi_m_sync_init+0xe8>)
    14ce:	4798      	blx	r3
		return ERR_INVALID_ARG;
    14d0:	200d      	movs	r0, #13
    14d2:	4240      	negs	r0, r0
    14d4:	e7f6      	b.n	14c4 <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    14d6:	0008      	movs	r0, r1
    14d8:	1e43      	subs	r3, r0, #1
    14da:	4198      	sbcs	r0, r3
    14dc:	b2c0      	uxtb	r0, r0
    14de:	4a03      	ldr	r2, [pc, #12]	; (14ec <_spi_m_sync_init+0xe0>)
    14e0:	4903      	ldr	r1, [pc, #12]	; (14f0 <_spi_m_sync_init+0xe4>)
    14e2:	4b04      	ldr	r3, [pc, #16]	; (14f4 <_spi_m_sync_init+0xe8>)
    14e4:	4798      	blx	r3
    14e6:	e7ad      	b.n	1444 <_spi_m_sync_init+0x38>
    14e8:	bdfff800 	.word	0xbdfff800
    14ec:	00000925 	.word	0x00000925
    14f0:	00003b80 	.word	0x00003b80
    14f4:	000012f5 	.word	0x000012f5
    14f8:	000008ef 	.word	0x000008ef
    14fc:	0011000c 	.word	0x0011000c
    1500:	000001ff 	.word	0x000001ff

00001504 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1504:	b510      	push	{r4, lr}
    1506:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    1508:	d00c      	beq.n	1524 <_spi_m_sync_enable+0x20>
    150a:	6800      	ldr	r0, [r0, #0]
    150c:	1e43      	subs	r3, r0, #1
    150e:	4198      	sbcs	r0, r3
    1510:	b2c0      	uxtb	r0, r0
    1512:	2298      	movs	r2, #152	; 0x98
    1514:	0112      	lsls	r2, r2, #4
    1516:	4904      	ldr	r1, [pc, #16]	; (1528 <_spi_m_sync_enable+0x24>)
    1518:	4b04      	ldr	r3, [pc, #16]	; (152c <_spi_m_sync_enable+0x28>)
    151a:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    151c:	6820      	ldr	r0, [r4, #0]
    151e:	4b04      	ldr	r3, [pc, #16]	; (1530 <_spi_m_sync_enable+0x2c>)
    1520:	4798      	blx	r3
}
    1522:	bd10      	pop	{r4, pc}
    1524:	2000      	movs	r0, #0
    1526:	e7f4      	b.n	1512 <_spi_m_sync_enable+0xe>
    1528:	00003b80 	.word	0x00003b80
    152c:	000012f5 	.word	0x000012f5
    1530:	000013cd 	.word	0x000013cd

00001534 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    1534:	b510      	push	{r4, lr}
    1536:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    1538:	d00b      	beq.n	1552 <_spi_m_sync_disable+0x1e>
    153a:	6800      	ldr	r0, [r0, #0]
    153c:	1e43      	subs	r3, r0, #1
    153e:	4198      	sbcs	r0, r3
    1540:	b2c0      	uxtb	r0, r0
    1542:	4a05      	ldr	r2, [pc, #20]	; (1558 <_spi_m_sync_disable+0x24>)
    1544:	4905      	ldr	r1, [pc, #20]	; (155c <_spi_m_sync_disable+0x28>)
    1546:	4b06      	ldr	r3, [pc, #24]	; (1560 <_spi_m_sync_disable+0x2c>)
    1548:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    154a:	6820      	ldr	r0, [r4, #0]
    154c:	4b05      	ldr	r3, [pc, #20]	; (1564 <_spi_m_sync_disable+0x30>)
    154e:	4798      	blx	r3
}
    1550:	bd10      	pop	{r4, pc}
    1552:	2000      	movs	r0, #0
    1554:	e7f5      	b.n	1542 <_spi_m_sync_disable+0xe>
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	0000099c 	.word	0x0000099c
    155c:	00003b80 	.word	0x00003b80
    1560:	000012f5 	.word	0x000012f5
    1564:	000013ed 	.word	0x000013ed

00001568 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1568:	b5f0      	push	{r4, r5, r6, r7, lr}
    156a:	46de      	mov	lr, fp
    156c:	4657      	mov	r7, sl
    156e:	464e      	mov	r6, r9
    1570:	4645      	mov	r5, r8
    1572:	b5e0      	push	{r5, r6, r7, lr}
    1574:	b083      	sub	sp, #12
    1576:	4681      	mov	r9, r0
    1578:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    157a:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    157c:	680b      	ldr	r3, [r1, #0]
    157e:	4698      	mov	r8, r3
    1580:	684d      	ldr	r5, [r1, #4]
    1582:	7903      	ldrb	r3, [r0, #4]
    1584:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    1586:	2800      	cmp	r0, #0
    1588:	d015      	beq.n	15b6 <_spi_m_sync_trans+0x4e>
    158a:	0020      	movs	r0, r4
    158c:	1e43      	subs	r3, r0, #1
    158e:	4198      	sbcs	r0, r3
    1590:	b2c0      	uxtb	r0, r0
    1592:	4a36      	ldr	r2, [pc, #216]	; (166c <_spi_m_sync_trans+0x104>)
    1594:	4936      	ldr	r1, [pc, #216]	; (1670 <_spi_m_sync_trans+0x108>)
    1596:	4b37      	ldr	r3, [pc, #220]	; (1674 <_spi_m_sync_trans+0x10c>)
    1598:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    159a:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    159c:	075b      	lsls	r3, r3, #29
    159e:	d13f      	bne.n	1620 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    15a0:	2303      	movs	r3, #3
    15a2:	69e0      	ldr	r0, [r4, #28]
    15a4:	4018      	ands	r0, r3
    15a6:	d1fc      	bne.n	15a2 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    15a8:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    15aa:	079b      	lsls	r3, r3, #30
    15ac:	d53b      	bpl.n	1626 <_spi_m_sync_trans+0xbe>
    15ae:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    15b0:	2301      	movs	r3, #1
    15b2:	469c      	mov	ip, r3
    15b4:	e009      	b.n	15ca <_spi_m_sync_trans+0x62>
    15b6:	2000      	movs	r0, #0
    15b8:	e7eb      	b.n	1592 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    15ba:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    15bc:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    15be:	b25b      	sxtb	r3, r3
    15c0:	2b00      	cmp	r3, #0
    15c2:	db16      	blt.n	15f2 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    15c4:	68b3      	ldr	r3, [r6, #8]
    15c6:	4283      	cmp	r3, r0
    15c8:	d927      	bls.n	161a <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    15ca:	7e23      	ldrb	r3, [r4, #24]
    15cc:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    15ce:	2104      	movs	r1, #4
    15d0:	4219      	tst	r1, r3
    15d2:	d02b      	beq.n	162c <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    15d4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    15d6:	2d00      	cmp	r5, #0
    15d8:	d0f0      	beq.n	15bc <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    15da:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    15dc:	9901      	ldr	r1, [sp, #4]
    15de:	2901      	cmp	r1, #1
    15e0:	d9eb      	bls.n	15ba <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    15e2:	0a3f      	lsrs	r7, r7, #8
    15e4:	706f      	strb	r7, [r5, #1]
    15e6:	3502      	adds	r5, #2
    15e8:	e7e8      	b.n	15bc <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    15ea:	2101      	movs	r1, #1
    15ec:	468b      	mov	fp, r1
    15ee:	44d8      	add	r8, fp
    15f0:	e037      	b.n	1662 <_spi_m_sync_trans+0xfa>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    15f2:	2301      	movs	r3, #1
    15f4:	425b      	negs	r3, r3
    15f6:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    15f8:	3381      	adds	r3, #129	; 0x81
    15fa:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    15fc:	2013      	movs	r0, #19
    15fe:	4240      	negs	r0, r0
	tmp &= mask;
    1600:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1602:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1604:	4213      	tst	r3, r2
    1606:	d0fc      	beq.n	1602 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1608:	2303      	movs	r3, #3
    160a:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    160c:	b003      	add	sp, #12
    160e:	bc3c      	pop	{r2, r3, r4, r5}
    1610:	4690      	mov	r8, r2
    1612:	4699      	mov	r9, r3
    1614:	46a2      	mov	sl, r4
    1616:	46ab      	mov	fp, r5
    1618:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    161a:	4293      	cmp	r3, r2
    161c:	d8d5      	bhi.n	15ca <_spi_m_sync_trans+0x62>
    161e:	e7ef      	b.n	1600 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    1620:	2004      	movs	r0, #4
    1622:	4240      	negs	r0, r0
    1624:	e7f2      	b.n	160c <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    1626:	2014      	movs	r0, #20
    1628:	4240      	negs	r0, r0
    162a:	e7ef      	b.n	160c <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    162c:	4290      	cmp	r0, r2
    162e:	d8c6      	bhi.n	15be <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1630:	4667      	mov	r7, ip
    1632:	421f      	tst	r7, r3
    1634:	d0c3      	beq.n	15be <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1636:	464f      	mov	r7, r9
    1638:	88ff      	ldrh	r7, [r7, #6]
    163a:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    163c:	4647      	mov	r7, r8
    163e:	2f00      	cmp	r7, #0
    1640:	d00f      	beq.n	1662 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    1642:	783f      	ldrb	r7, [r7, #0]
    1644:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    1646:	9901      	ldr	r1, [sp, #4]
    1648:	2901      	cmp	r1, #1
    164a:	d9ce      	bls.n	15ea <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    164c:	4647      	mov	r7, r8
    164e:	787f      	ldrb	r7, [r7, #1]
    1650:	023f      	lsls	r7, r7, #8
    1652:	46bb      	mov	fp, r7
    1654:	4657      	mov	r7, sl
    1656:	4659      	mov	r1, fp
    1658:	430f      	orrs	r7, r1
    165a:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    165c:	2102      	movs	r1, #2
    165e:	468b      	mov	fp, r1
    1660:	44d8      	add	r8, fp
	ctrl->txcnt++;
    1662:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1664:	4657      	mov	r7, sl
    1666:	62a7      	str	r7, [r4, #40]	; 0x28
    1668:	e7a9      	b.n	15be <_spi_m_sync_trans+0x56>
    166a:	46c0      	nop			; (mov r8, r8)
    166c:	00000a85 	.word	0x00000a85
    1670:	00003b80 	.word	0x00003b80
    1674:	000012f5 	.word	0x000012f5

00001678 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1678:	4b12      	ldr	r3, [pc, #72]	; (16c4 <_sysctrl_init_sources+0x4c>)
    167a:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    167c:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    167e:	4812      	ldr	r0, [pc, #72]	; (16c8 <_sysctrl_init_sources+0x50>)
    1680:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1682:	0f92      	lsrs	r2, r2, #30
    1684:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    1686:	2002      	movs	r0, #2
    1688:	4302      	orrs	r2, r0
    168a:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    168c:	621a      	str	r2, [r3, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    168e:	699a      	ldr	r2, [r3, #24]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    1690:	21fe      	movs	r1, #254	; 0xfe
    1692:	03c9      	lsls	r1, r1, #15
    1694:	400a      	ands	r2, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    1696:	2146      	movs	r1, #70	; 0x46
    1698:	430a      	orrs	r2, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    169a:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    169c:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    169e:	3927      	subs	r1, #39	; 0x27
    16a0:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    16a2:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    16a4:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    16a6:	2204      	movs	r2, #4
    16a8:	68cb      	ldr	r3, [r1, #12]
    16aa:	421a      	tst	r2, r3
    16ac:	d0fc      	beq.n	16a8 <_sysctrl_init_sources+0x30>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    16ae:	4905      	ldr	r1, [pc, #20]	; (16c4 <_sysctrl_init_sources+0x4c>)
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    16b0:	2208      	movs	r2, #8
    16b2:	68cb      	ldr	r3, [r1, #12]
    16b4:	421a      	tst	r2, r3
    16b6:	d0fc      	beq.n	16b2 <_sysctrl_init_sources+0x3a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    16b8:	4a02      	ldr	r2, [pc, #8]	; (16c4 <_sysctrl_init_sources+0x4c>)
    16ba:	6a13      	ldr	r3, [r2, #32]
    16bc:	2180      	movs	r1, #128	; 0x80
    16be:	430b      	orrs	r3, r1
    16c0:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    16c2:	4770      	bx	lr
    16c4:	40000800 	.word	0x40000800
    16c8:	0fff0000 	.word	0x0fff0000

000016cc <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    16cc:	2202      	movs	r2, #2
    16ce:	4b17      	ldr	r3, [pc, #92]	; (172c <_sysctrl_init_referenced_generators+0x60>)
    16d0:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    16d2:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    16d4:	320e      	adds	r2, #14
    16d6:	68cb      	ldr	r3, [r1, #12]
    16d8:	421a      	tst	r2, r3
    16da:	d0fc      	beq.n	16d6 <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    16dc:	4a14      	ldr	r2, [pc, #80]	; (1730 <_sysctrl_init_referenced_generators+0x64>)
    16de:	4b13      	ldr	r3, [pc, #76]	; (172c <_sysctrl_init_referenced_generators+0x60>)
    16e0:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    16e2:	4b14      	ldr	r3, [pc, #80]	; (1734 <_sysctrl_init_referenced_generators+0x68>)
    16e4:	681b      	ldr	r3, [r3, #0]
    16e6:	0e9b      	lsrs	r3, r3, #26
    16e8:	2b3f      	cmp	r3, #63	; 0x3f
    16ea:	d015      	beq.n	1718 <_sysctrl_init_referenced_generators+0x4c>
    16ec:	029b      	lsls	r3, r3, #10
    16ee:	2280      	movs	r2, #128	; 0x80
    16f0:	0092      	lsls	r2, r2, #2
    16f2:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    16f4:	4a0d      	ldr	r2, [pc, #52]	; (172c <_sysctrl_init_referenced_generators+0x60>)
    16f6:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    16f8:	2393      	movs	r3, #147	; 0x93
    16fa:	005b      	lsls	r3, r3, #1
    16fc:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    16fe:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1700:	075b      	lsls	r3, r3, #29
    1702:	d50c      	bpl.n	171e <_sysctrl_init_referenced_generators+0x52>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1704:	0011      	movs	r1, r2
	tmp &= mask;
    1706:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1708:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    170a:	421a      	tst	r2, r3
    170c:	d0fc      	beq.n	1708 <_sysctrl_init_referenced_generators+0x3c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    170e:	4a0a      	ldr	r2, [pc, #40]	; (1738 <_sysctrl_init_referenced_generators+0x6c>)
    1710:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    1712:	09db      	lsrs	r3, r3, #7
    1714:	d1fc      	bne.n	1710 <_sysctrl_init_referenced_generators+0x44>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1716:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1718:	23fc      	movs	r3, #252	; 0xfc
    171a:	01db      	lsls	r3, r3, #7
    171c:	e7ea      	b.n	16f4 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    171e:	4903      	ldr	r1, [pc, #12]	; (172c <_sysctrl_init_referenced_generators+0x60>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1720:	2210      	movs	r2, #16
    1722:	68cb      	ldr	r3, [r1, #12]
    1724:	421a      	tst	r2, r3
    1726:	d0fc      	beq.n	1722 <_sysctrl_init_referenced_generators+0x56>
    1728:	e7f1      	b.n	170e <_sysctrl_init_referenced_generators+0x42>
    172a:	46c0      	nop			; (mov r8, r8)
    172c:	40000800 	.word	0x40000800
    1730:	0401bb80 	.word	0x0401bb80
    1734:	00806024 	.word	0x00806024
    1738:	40000c00 	.word	0x40000c00

0000173c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    173c:	2000      	movs	r0, #0
    173e:	4770      	bx	lr

00001740 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1740:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1742:	7c83      	ldrb	r3, [r0, #18]
    1744:	220f      	movs	r2, #15
    1746:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1748:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    174a:	3a08      	subs	r2, #8
    174c:	400a      	ands	r2, r1
    174e:	2a01      	cmp	r2, #1
    1750:	d00b      	beq.n	176a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1752:	015a      	lsls	r2, r3, #5
    1754:	491a      	ldr	r1, [pc, #104]	; (17c0 <_usb_d_dev_handle_setup+0x80>)
    1756:	468c      	mov	ip, r1
    1758:	4462      	add	r2, ip
    175a:	2110      	movs	r1, #16
    175c:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    175e:	015b      	lsls	r3, r3, #5
    1760:	4a18      	ldr	r2, [pc, #96]	; (17c4 <_usb_d_dev_handle_setup+0x84>)
    1762:	4694      	mov	ip, r2
    1764:	4463      	add	r3, ip
    1766:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    1768:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    176a:	064a      	lsls	r2, r1, #25
    176c:	d50e      	bpl.n	178c <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    176e:	7cc2      	ldrb	r2, [r0, #19]
    1770:	2140      	movs	r1, #64	; 0x40
    1772:	438a      	bics	r2, r1
    1774:	74c2      	strb	r2, [r0, #19]
    1776:	015a      	lsls	r2, r3, #5
    1778:	4c13      	ldr	r4, [pc, #76]	; (17c8 <_usb_d_dev_handle_setup+0x88>)
    177a:	46a4      	mov	ip, r4
    177c:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    177e:	2580      	movs	r5, #128	; 0x80
    1780:	2482      	movs	r4, #130	; 0x82
    1782:	0064      	lsls	r4, r4, #1
    1784:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1786:	2406      	movs	r4, #6
    1788:	34ff      	adds	r4, #255	; 0xff
    178a:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    178c:	7cc2      	ldrb	r2, [r0, #19]
    178e:	2108      	movs	r1, #8
    1790:	438a      	bics	r2, r1
    1792:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1794:	015a      	lsls	r2, r3, #5
    1796:	490d      	ldr	r1, [pc, #52]	; (17cc <_usb_d_dev_handle_setup+0x8c>)
    1798:	1889      	adds	r1, r1, r2
    179a:	2400      	movs	r4, #0
    179c:	728c      	strb	r4, [r1, #10]
    179e:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    17a0:	0013      	movs	r3, r2
    17a2:	4907      	ldr	r1, [pc, #28]	; (17c0 <_usb_d_dev_handle_setup+0x80>)
    17a4:	468c      	mov	ip, r1
    17a6:	4463      	add	r3, ip
    17a8:	216f      	movs	r1, #111	; 0x6f
    17aa:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    17ac:	4b05      	ldr	r3, [pc, #20]	; (17c4 <_usb_d_dev_handle_setup+0x84>)
    17ae:	469c      	mov	ip, r3
    17b0:	4462      	add	r2, ip
    17b2:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    17b4:	7c80      	ldrb	r0, [r0, #18]
    17b6:	4b06      	ldr	r3, [pc, #24]	; (17d0 <_usb_d_dev_handle_setup+0x90>)
    17b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17ba:	4798      	blx	r3
    17bc:	e7d4      	b.n	1768 <_usb_d_dev_handle_setup+0x28>
    17be:	46c0      	nop			; (mov r8, r8)
    17c0:	41005100 	.word	0x41005100
    17c4:	41005108 	.word	0x41005108
    17c8:	41005000 	.word	0x41005000
    17cc:	200006e8 	.word	0x200006e8
    17d0:	20000768 	.word	0x20000768

000017d4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    17d4:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    17d6:	2220      	movs	r2, #32
    17d8:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    17da:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    17dc:	7c81      	ldrb	r1, [r0, #18]
    17de:	230f      	movs	r3, #15
    17e0:	400b      	ands	r3, r1
    17e2:	015b      	lsls	r3, r3, #5
    17e4:	4905      	ldr	r1, [pc, #20]	; (17fc <_usb_d_dev_handle_stall+0x28>)
    17e6:	468c      	mov	ip, r1
    17e8:	4463      	add	r3, ip
    17ea:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    17ec:	6882      	ldr	r2, [r0, #8]
    17ee:	7c80      	ldrb	r0, [r0, #18]
    17f0:	4b03      	ldr	r3, [pc, #12]	; (1800 <_usb_d_dev_handle_stall+0x2c>)
    17f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    17f4:	2101      	movs	r1, #1
    17f6:	4798      	blx	r3
}
    17f8:	bd10      	pop	{r4, pc}
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	41005108 	.word	0x41005108
    1800:	20000768 	.word	0x20000768

00001804 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1804:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1806:	7c83      	ldrb	r3, [r0, #18]
    1808:	2bff      	cmp	r3, #255	; 0xff
    180a:	d002      	beq.n	1812 <_usb_d_dev_trans_done+0xe>
    180c:	7cc2      	ldrb	r2, [r0, #19]
    180e:	0652      	lsls	r2, r2, #25
    1810:	d400      	bmi.n	1814 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    1812:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    1814:	7cc2      	ldrb	r2, [r0, #19]
    1816:	2440      	movs	r4, #64	; 0x40
    1818:	43a2      	bics	r2, r4
    181a:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    181c:	6882      	ldr	r2, [r0, #8]
    181e:	4802      	ldr	r0, [pc, #8]	; (1828 <_usb_d_dev_trans_done+0x24>)
    1820:	6b04      	ldr	r4, [r0, #48]	; 0x30
    1822:	0018      	movs	r0, r3
    1824:	47a0      	blx	r4
    1826:	e7f4      	b.n	1812 <_usb_d_dev_trans_done+0xe>
    1828:	20000768 	.word	0x20000768

0000182c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    182c:	b530      	push	{r4, r5, lr}
    182e:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1830:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1832:	ac01      	add	r4, sp, #4
    1834:	2525      	movs	r5, #37	; 0x25
    1836:	7025      	strb	r5, [r4, #0]
    1838:	3525      	adds	r5, #37	; 0x25
    183a:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    183c:	2bff      	cmp	r3, #255	; 0xff
    183e:	d01b      	beq.n	1878 <_usb_d_dev_trans_stop+0x4c>
    1840:	7cc4      	ldrb	r4, [r0, #19]
    1842:	0664      	lsls	r4, r4, #25
    1844:	d518      	bpl.n	1878 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1846:	240f      	movs	r4, #15
    1848:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    184a:	2900      	cmp	r1, #0
    184c:	d016      	beq.n	187c <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    184e:	015c      	lsls	r4, r3, #5
    1850:	4d0e      	ldr	r5, [pc, #56]	; (188c <_usb_d_dev_trans_stop+0x60>)
    1852:	46ac      	mov	ip, r5
    1854:	4464      	add	r4, ip
    1856:	2580      	movs	r5, #128	; 0x80
    1858:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    185a:	ac01      	add	r4, sp, #4
    185c:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    185e:	0159      	lsls	r1, r3, #5
    1860:	4d0a      	ldr	r5, [pc, #40]	; (188c <_usb_d_dev_trans_stop+0x60>)
    1862:	46ac      	mov	ip, r5
    1864:	4461      	add	r1, ip
    1866:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1868:	015b      	lsls	r3, r3, #5
    186a:	4909      	ldr	r1, [pc, #36]	; (1890 <_usb_d_dev_trans_stop+0x64>)
    186c:	468c      	mov	ip, r1
    186e:	4463      	add	r3, ip
    1870:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1872:	0011      	movs	r1, r2
    1874:	4b07      	ldr	r3, [pc, #28]	; (1894 <_usb_d_dev_trans_stop+0x68>)
    1876:	4798      	blx	r3
}
    1878:	b003      	add	sp, #12
    187a:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    187c:	015c      	lsls	r4, r3, #5
    187e:	4d03      	ldr	r5, [pc, #12]	; (188c <_usb_d_dev_trans_stop+0x60>)
    1880:	46ac      	mov	ip, r5
    1882:	4464      	add	r4, ip
    1884:	2540      	movs	r5, #64	; 0x40
    1886:	7165      	strb	r5, [r4, #5]
    1888:	e7e7      	b.n	185a <_usb_d_dev_trans_stop+0x2e>
    188a:	46c0      	nop			; (mov r8, r8)
    188c:	41005100 	.word	0x41005100
    1890:	41005108 	.word	0x41005108
    1894:	00001805 	.word	0x00001805

00001898 <_usb_d_dev_handle_trfail>:
{
    1898:	b570      	push	{r4, r5, r6, lr}
    189a:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    189c:	7c83      	ldrb	r3, [r0, #18]
    189e:	220f      	movs	r2, #15
    18a0:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    18a2:	aa01      	add	r2, sp, #4
    18a4:	2404      	movs	r4, #4
    18a6:	7014      	strb	r4, [r2, #0]
    18a8:	3404      	adds	r4, #4
    18aa:	7054      	strb	r4, [r2, #1]
    18ac:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    18ae:	2900      	cmp	r1, #0
    18b0:	d031      	beq.n	1916 <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    18b2:	001a      	movs	r2, r3
    18b4:	3208      	adds	r2, #8
    18b6:	0152      	lsls	r2, r2, #5
    18b8:	4c32      	ldr	r4, [pc, #200]	; (1984 <_usb_d_dev_handle_trfail+0xec>)
    18ba:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    18bc:	0664      	lsls	r4, r4, #25
    18be:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    18c0:	010a      	lsls	r2, r1, #4
    18c2:	1952      	adds	r2, r2, r5
    18c4:	4d30      	ldr	r5, [pc, #192]	; (1988 <_usb_d_dev_handle_trfail+0xf0>)
    18c6:	18aa      	adds	r2, r5, r2
    18c8:	7a95      	ldrb	r5, [r2, #10]
    18ca:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    18cc:	2c02      	cmp	r4, #2
    18ce:	d02a      	beq.n	1926 <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    18d0:	07ac      	lsls	r4, r5, #30
    18d2:	d541      	bpl.n	1958 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    18d4:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    18d6:	7a94      	ldrb	r4, [r2, #10]
    18d8:	2602      	movs	r6, #2
    18da:	43b4      	bics	r4, r6
    18dc:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    18de:	aa01      	add	r2, sp, #4
    18e0:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    18e2:	015a      	lsls	r2, r3, #5
    18e4:	4e29      	ldr	r6, [pc, #164]	; (198c <_usb_d_dev_handle_trfail+0xf4>)
    18e6:	46b4      	mov	ip, r6
    18e8:	4462      	add	r2, ip
    18ea:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    18ec:	015b      	lsls	r3, r3, #5
    18ee:	4a28      	ldr	r2, [pc, #160]	; (1990 <_usb_d_dev_handle_trfail+0xf8>)
    18f0:	4694      	mov	ip, r2
    18f2:	4463      	add	r3, ip
    18f4:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    18f6:	2307      	movs	r3, #7
    18f8:	402b      	ands	r3, r5
    18fa:	2b01      	cmp	r3, #1
    18fc:	d13f      	bne.n	197e <_usb_d_dev_handle_trfail+0xe6>
    18fe:	7cc3      	ldrb	r3, [r0, #19]
    1900:	065b      	lsls	r3, r3, #25
    1902:	d53c      	bpl.n	197e <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1904:	7cc3      	ldrb	r3, [r0, #19]
    1906:	09db      	lsrs	r3, r3, #7
    1908:	4299      	cmp	r1, r3
    190a:	d038      	beq.n	197e <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    190c:	2200      	movs	r2, #0
    190e:	0019      	movs	r1, r3
    1910:	4b20      	ldr	r3, [pc, #128]	; (1994 <_usb_d_dev_handle_trfail+0xfc>)
    1912:	4798      	blx	r3
    1914:	e033      	b.n	197e <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1916:	001a      	movs	r2, r3
    1918:	3208      	adds	r2, #8
    191a:	0152      	lsls	r2, r2, #5
    191c:	4c19      	ldr	r4, [pc, #100]	; (1984 <_usb_d_dev_handle_trfail+0xec>)
    191e:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1920:	2207      	movs	r2, #7
    1922:	4014      	ands	r4, r2
    1924:	e7cc      	b.n	18c0 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1926:	07ec      	lsls	r4, r5, #31
    1928:	d5d2      	bpl.n	18d0 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    192a:	7a94      	ldrb	r4, [r2, #10]
    192c:	2501      	movs	r5, #1
    192e:	43ac      	bics	r4, r5
    1930:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1932:	aa01      	add	r2, sp, #4
    1934:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1936:	015a      	lsls	r2, r3, #5
    1938:	4d14      	ldr	r5, [pc, #80]	; (198c <_usb_d_dev_handle_trfail+0xf4>)
    193a:	46ac      	mov	ip, r5
    193c:	4462      	add	r2, ip
    193e:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1940:	015b      	lsls	r3, r3, #5
    1942:	4a13      	ldr	r2, [pc, #76]	; (1990 <_usb_d_dev_handle_trfail+0xf8>)
    1944:	4694      	mov	ip, r2
    1946:	4463      	add	r3, ip
    1948:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    194a:	1e4b      	subs	r3, r1, #1
    194c:	4199      	sbcs	r1, r3
    194e:	b2c9      	uxtb	r1, r1
    1950:	2204      	movs	r2, #4
    1952:	4b10      	ldr	r3, [pc, #64]	; (1994 <_usb_d_dev_handle_trfail+0xfc>)
    1954:	4798      	blx	r3
    1956:	e012      	b.n	197e <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    1958:	005a      	lsls	r2, r3, #1
    195a:	1852      	adds	r2, r2, r1
    195c:	0112      	lsls	r2, r2, #4
    195e:	480a      	ldr	r0, [pc, #40]	; (1988 <_usb_d_dev_handle_trfail+0xf0>)
    1960:	1882      	adds	r2, r0, r2
    1962:	2000      	movs	r0, #0
    1964:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1966:	aa01      	add	r2, sp, #4
    1968:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    196a:	015a      	lsls	r2, r3, #5
    196c:	4807      	ldr	r0, [pc, #28]	; (198c <_usb_d_dev_handle_trfail+0xf4>)
    196e:	4684      	mov	ip, r0
    1970:	4462      	add	r2, ip
    1972:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1974:	015b      	lsls	r3, r3, #5
    1976:	4a06      	ldr	r2, [pc, #24]	; (1990 <_usb_d_dev_handle_trfail+0xf8>)
    1978:	4694      	mov	ip, r2
    197a:	4463      	add	r3, ip
    197c:	7019      	strb	r1, [r3, #0]
}
    197e:	b002      	add	sp, #8
    1980:	bd70      	pop	{r4, r5, r6, pc}
    1982:	46c0      	nop			; (mov r8, r8)
    1984:	41005000 	.word	0x41005000
    1988:	200006e8 	.word	0x200006e8
    198c:	41005100 	.word	0x41005100
    1990:	41005108 	.word	0x41005108
    1994:	0000182d 	.word	0x0000182d

00001998 <_usb_d_dev_reset_epts>:
{
    1998:	b5f0      	push	{r4, r5, r6, r7, lr}
    199a:	46c6      	mov	lr, r8
    199c:	b500      	push	{lr}
    199e:	4d0c      	ldr	r5, [pc, #48]	; (19d0 <_usb_d_dev_reset_epts+0x38>)
    19a0:	002c      	movs	r4, r5
    19a2:	3434      	adds	r4, #52	; 0x34
    19a4:	35e8      	adds	r5, #232	; 0xe8
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    19a6:	4b0b      	ldr	r3, [pc, #44]	; (19d4 <_usb_d_dev_reset_epts+0x3c>)
    19a8:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    19aa:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    19ac:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    19ae:	2103      	movs	r1, #3
    19b0:	0020      	movs	r0, r4
    19b2:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    19b4:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    19b6:	74e6      	strb	r6, [r4, #19]
    19b8:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    19ba:	42ac      	cmp	r4, r5
    19bc:	d1f7      	bne.n	19ae <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    19be:	22a0      	movs	r2, #160	; 0xa0
    19c0:	2100      	movs	r1, #0
    19c2:	4805      	ldr	r0, [pc, #20]	; (19d8 <_usb_d_dev_reset_epts+0x40>)
    19c4:	4b05      	ldr	r3, [pc, #20]	; (19dc <_usb_d_dev_reset_epts+0x44>)
    19c6:	4798      	blx	r3
}
    19c8:	bc04      	pop	{r2}
    19ca:	4690      	mov	r8, r2
    19cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19ce:	46c0      	nop			; (mov r8, r8)
    19d0:	20000768 	.word	0x20000768
    19d4:	00001805 	.word	0x00001805
    19d8:	200006e8 	.word	0x200006e8
    19dc:	000038ad 	.word	0x000038ad

000019e0 <_usb_d_dev_in_next>:
{
    19e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19e2:	46c6      	mov	lr, r8
    19e4:	b500      	push	{lr}
    19e6:	0004      	movs	r4, r0
    19e8:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    19ea:	7c83      	ldrb	r3, [r0, #18]
    19ec:	250f      	movs	r5, #15
    19ee:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    19f0:	2900      	cmp	r1, #0
    19f2:	d100      	bne.n	19f6 <_usb_d_dev_in_next+0x16>
    19f4:	e0aa      	b.n	1b4c <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    19f6:	016a      	lsls	r2, r5, #5
    19f8:	4b5a      	ldr	r3, [pc, #360]	; (1b64 <_usb_d_dev_in_next+0x184>)
    19fa:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    19fc:	6958      	ldr	r0, [r3, #20]
    19fe:	0480      	lsls	r0, r0, #18
    1a00:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1a02:	8a23      	ldrh	r3, [r4, #16]
    1a04:	4a58      	ldr	r2, [pc, #352]	; (1b68 <_usb_d_dev_in_next+0x188>)
    1a06:	4293      	cmp	r3, r2
    1a08:	d100      	bne.n	1a0c <_usb_d_dev_in_next+0x2c>
    1a0a:	e09a      	b.n	1b42 <_usb_d_dev_in_next+0x162>
    1a0c:	3b01      	subs	r3, #1
    1a0e:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1a10:	7ce3      	ldrb	r3, [r4, #19]
    1a12:	2707      	movs	r7, #7
    1a14:	401f      	ands	r7, r3
	if (isr) {
    1a16:	2e00      	cmp	r6, #0
    1a18:	d005      	beq.n	1a26 <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1a1a:	016b      	lsls	r3, r5, #5
    1a1c:	4953      	ldr	r1, [pc, #332]	; (1b6c <_usb_d_dev_in_next+0x18c>)
    1a1e:	468c      	mov	ip, r1
    1a20:	4463      	add	r3, ip
    1a22:	2102      	movs	r1, #2
    1a24:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    1a26:	68a3      	ldr	r3, [r4, #8]
    1a28:	18c1      	adds	r1, r0, r3
    1a2a:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    1a2c:	6863      	ldr	r3, [r4, #4]
    1a2e:	4299      	cmp	r1, r3
    1a30:	d24a      	bcs.n	1ac8 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    1a32:	1a5b      	subs	r3, r3, r1
    1a34:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    1a36:	7ce2      	ldrb	r2, [r4, #19]
    1a38:	0692      	lsls	r2, r2, #26
    1a3a:	d535      	bpl.n	1aa8 <_usb_d_dev_in_next+0xc8>
    1a3c:	8a22      	ldrh	r2, [r4, #16]
    1a3e:	1c10      	adds	r0, r2, #0
    1a40:	b292      	uxth	r2, r2
    1a42:	429a      	cmp	r2, r3
    1a44:	d900      	bls.n	1a48 <_usb_d_dev_in_next+0x68>
    1a46:	1c18      	adds	r0, r3, #0
    1a48:	b283      	uxth	r3, r0
    1a4a:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1a4c:	6823      	ldr	r3, [r4, #0]
    1a4e:	469c      	mov	ip, r3
    1a50:	4461      	add	r1, ip
    1a52:	4642      	mov	r2, r8
    1a54:	68e0      	ldr	r0, [r4, #12]
    1a56:	4b46      	ldr	r3, [pc, #280]	; (1b70 <_usb_d_dev_in_next+0x190>)
    1a58:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1a5a:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    1a5c:	016a      	lsls	r2, r5, #5
    1a5e:	4b41      	ldr	r3, [pc, #260]	; (1b64 <_usb_d_dev_in_next+0x184>)
    1a60:	189b      	adds	r3, r3, r2
    1a62:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1a64:	016a      	lsls	r2, r5, #5
    1a66:	4b3f      	ldr	r3, [pc, #252]	; (1b64 <_usb_d_dev_in_next+0x184>)
    1a68:	189b      	adds	r3, r3, r2
    1a6a:	695a      	ldr	r2, [r3, #20]
    1a6c:	4641      	mov	r1, r8
    1a6e:	0489      	lsls	r1, r1, #18
    1a70:	0c89      	lsrs	r1, r1, #18
    1a72:	0b92      	lsrs	r2, r2, #14
    1a74:	0392      	lsls	r2, r2, #14
    1a76:	430a      	orrs	r2, r1
    1a78:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1a7a:	695a      	ldr	r2, [r3, #20]
    1a7c:	493d      	ldr	r1, [pc, #244]	; (1b74 <_usb_d_dev_in_next+0x194>)
    1a7e:	400a      	ands	r2, r1
    1a80:	615a      	str	r2, [r3, #20]
	if (!isr) {
    1a82:	2e00      	cmp	r6, #0
    1a84:	d107      	bne.n	1a96 <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    1a86:	2f01      	cmp	r7, #1
    1a88:	d059      	beq.n	1b3e <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    1a8a:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1a8c:	016b      	lsls	r3, r5, #5
    1a8e:	493a      	ldr	r1, [pc, #232]	; (1b78 <_usb_d_dev_in_next+0x198>)
    1a90:	468c      	mov	ip, r1
    1a92:	4463      	add	r3, ip
    1a94:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1a96:	016d      	lsls	r5, r5, #5
    1a98:	4b34      	ldr	r3, [pc, #208]	; (1b6c <_usb_d_dev_in_next+0x18c>)
    1a9a:	469c      	mov	ip, r3
    1a9c:	4465      	add	r5, ip
    1a9e:	2380      	movs	r3, #128	; 0x80
    1aa0:	716b      	strb	r3, [r5, #5]
}
    1aa2:	bc04      	pop	{r2}
    1aa4:	4690      	mov	r8, r2
    1aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1aa8:	1c1a      	adds	r2, r3, #0
    1aaa:	2080      	movs	r0, #128	; 0x80
    1aac:	0180      	lsls	r0, r0, #6
    1aae:	4283      	cmp	r3, r0
    1ab0:	d901      	bls.n	1ab6 <_usb_d_dev_in_next+0xd6>
    1ab2:	4b32      	ldr	r3, [pc, #200]	; (1b7c <_usb_d_dev_in_next+0x19c>)
    1ab4:	881a      	ldrh	r2, [r3, #0]
    1ab6:	b293      	uxth	r3, r2
    1ab8:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1aba:	6823      	ldr	r3, [r4, #0]
    1abc:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    1abe:	016a      	lsls	r2, r5, #5
    1ac0:	4b28      	ldr	r3, [pc, #160]	; (1b64 <_usb_d_dev_in_next+0x184>)
    1ac2:	189b      	adds	r3, r3, r2
    1ac4:	6119      	str	r1, [r3, #16]
    1ac6:	e7cd      	b.n	1a64 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    1ac8:	7ce3      	ldrb	r3, [r4, #19]
    1aca:	06db      	lsls	r3, r3, #27
    1acc:	d50f      	bpl.n	1aee <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    1ace:	7ce3      	ldrb	r3, [r4, #19]
    1ad0:	2210      	movs	r2, #16
    1ad2:	4393      	bics	r3, r2
    1ad4:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1ad6:	016a      	lsls	r2, r5, #5
    1ad8:	4b22      	ldr	r3, [pc, #136]	; (1b64 <_usb_d_dev_in_next+0x184>)
    1ada:	189b      	adds	r3, r3, r2
    1adc:	695a      	ldr	r2, [r3, #20]
    1ade:	0b92      	lsrs	r2, r2, #14
    1ae0:	0392      	lsls	r2, r2, #14
    1ae2:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1ae4:	695a      	ldr	r2, [r3, #20]
    1ae6:	4923      	ldr	r1, [pc, #140]	; (1b74 <_usb_d_dev_in_next+0x194>)
    1ae8:	400a      	ands	r2, r1
    1aea:	615a      	str	r2, [r3, #20]
    1aec:	e7c9      	b.n	1a82 <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    1aee:	2f01      	cmp	r7, #1
    1af0:	d00e      	beq.n	1b10 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1af2:	016d      	lsls	r5, r5, #5
    1af4:	4b22      	ldr	r3, [pc, #136]	; (1b80 <_usb_d_dev_in_next+0x1a0>)
    1af6:	469c      	mov	ip, r3
    1af8:	4465      	add	r5, ip
    1afa:	234a      	movs	r3, #74	; 0x4a
    1afc:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    1afe:	8a21      	ldrh	r1, [r4, #16]
    1b00:	4002      	ands	r2, r0
    1b02:	4291      	cmp	r1, r2
    1b04:	d00b      	beq.n	1b1e <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1b06:	2100      	movs	r1, #0
    1b08:	0020      	movs	r0, r4
    1b0a:	4b1e      	ldr	r3, [pc, #120]	; (1b84 <_usb_d_dev_in_next+0x1a4>)
    1b0c:	4798      	blx	r3
	return;
    1b0e:	e7c8      	b.n	1aa2 <_usb_d_dev_in_next+0xc2>
    1b10:	016d      	lsls	r5, r5, #5
    1b12:	4b1b      	ldr	r3, [pc, #108]	; (1b80 <_usb_d_dev_in_next+0x1a0>)
    1b14:	469c      	mov	ip, r3
    1b16:	4465      	add	r5, ip
    1b18:	234b      	movs	r3, #75	; 0x4b
    1b1a:	702b      	strb	r3, [r5, #0]
    1b1c:	e7ef      	b.n	1afe <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    1b1e:	7ce3      	ldrb	r3, [r4, #19]
    1b20:	2240      	movs	r2, #64	; 0x40
    1b22:	4393      	bics	r3, r2
    1b24:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1b26:	7ca0      	ldrb	r0, [r4, #18]
    1b28:	4b17      	ldr	r3, [pc, #92]	; (1b88 <_usb_d_dev_in_next+0x1a8>)
    1b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b2c:	68a1      	ldr	r1, [r4, #8]
    1b2e:	4798      	blx	r3
    1b30:	2800      	cmp	r0, #0
    1b32:	d1b6      	bne.n	1aa2 <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    1b34:	7ce3      	ldrb	r3, [r4, #19]
    1b36:	2240      	movs	r2, #64	; 0x40
    1b38:	4313      	orrs	r3, r2
    1b3a:	74e3      	strb	r3, [r4, #19]
    1b3c:	e7e3      	b.n	1b06 <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1b3e:	224e      	movs	r2, #78	; 0x4e
    1b40:	e7a4      	b.n	1a8c <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1b42:	7ce7      	ldrb	r7, [r4, #19]
    1b44:	2307      	movs	r3, #7
    1b46:	401f      	ands	r7, r3
    1b48:	4a07      	ldr	r2, [pc, #28]	; (1b68 <_usb_d_dev_in_next+0x188>)
    1b4a:	e766      	b.n	1a1a <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1b4c:	8a03      	ldrh	r3, [r0, #16]
    1b4e:	4a06      	ldr	r2, [pc, #24]	; (1b68 <_usb_d_dev_in_next+0x188>)
    1b50:	2000      	movs	r0, #0
    1b52:	4293      	cmp	r3, r2
    1b54:	d000      	beq.n	1b58 <_usb_d_dev_in_next+0x178>
    1b56:	e759      	b.n	1a0c <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1b58:	7ce3      	ldrb	r3, [r4, #19]
    1b5a:	2707      	movs	r7, #7
    1b5c:	401f      	ands	r7, r3
    1b5e:	2000      	movs	r0, #0
    1b60:	4a01      	ldr	r2, [pc, #4]	; (1b68 <_usb_d_dev_in_next+0x188>)
    1b62:	e760      	b.n	1a26 <_usb_d_dev_in_next+0x46>
    1b64:	200006e8 	.word	0x200006e8
    1b68:	000003ff 	.word	0x000003ff
    1b6c:	41005100 	.word	0x41005100
    1b70:	00003829 	.word	0x00003829
    1b74:	f0003fff 	.word	0xf0003fff
    1b78:	41005109 	.word	0x41005109
    1b7c:	00003b9c 	.word	0x00003b9c
    1b80:	41005108 	.word	0x41005108
    1b84:	00001805 	.word	0x00001805
    1b88:	20000768 	.word	0x20000768

00001b8c <_usb_d_dev_out_next>:
{
    1b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b8e:	46de      	mov	lr, fp
    1b90:	4657      	mov	r7, sl
    1b92:	464e      	mov	r6, r9
    1b94:	4645      	mov	r5, r8
    1b96:	b5e0      	push	{r5, r6, r7, lr}
    1b98:	0004      	movs	r4, r0
    1b9a:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1b9c:	7c83      	ldrb	r3, [r0, #18]
    1b9e:	250f      	movs	r5, #15
    1ba0:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1ba2:	2900      	cmp	r1, #0
    1ba4:	d057      	beq.n	1c56 <_usb_d_dev_out_next+0xca>
    1ba6:	016a      	lsls	r2, r5, #5
    1ba8:	4b7d      	ldr	r3, [pc, #500]	; (1da0 <_usb_d_dev_out_next+0x214>)
    1baa:	189b      	adds	r3, r3, r2
    1bac:	685a      	ldr	r2, [r3, #4]
    1bae:	0112      	lsls	r2, r2, #4
    1bb0:	0c92      	lsrs	r2, r2, #18
    1bb2:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1bb4:	685f      	ldr	r7, [r3, #4]
    1bb6:	04bf      	lsls	r7, r7, #18
    1bb8:	0cbf      	lsrs	r7, r7, #18
    1bba:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1bbc:	8a06      	ldrh	r6, [r0, #16]
    1bbe:	4b79      	ldr	r3, [pc, #484]	; (1da4 <_usb_d_dev_out_next+0x218>)
    1bc0:	429e      	cmp	r6, r3
    1bc2:	d100      	bne.n	1bc6 <_usb_d_dev_out_next+0x3a>
    1bc4:	e0cd      	b.n	1d62 <_usb_d_dev_out_next+0x1d6>
    1bc6:	3e01      	subs	r6, #1
    1bc8:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    1bca:	465f      	mov	r7, fp
    1bcc:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1bce:	7ce3      	ldrb	r3, [r4, #19]
    1bd0:	2207      	movs	r2, #7
    1bd2:	401a      	ands	r2, r3
    1bd4:	4691      	mov	r9, r2
	if (isr) {
    1bd6:	4643      	mov	r3, r8
    1bd8:	2b00      	cmp	r3, #0
    1bda:	d005      	beq.n	1be8 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1bdc:	016b      	lsls	r3, r5, #5
    1bde:	4a72      	ldr	r2, [pc, #456]	; (1da8 <_usb_d_dev_out_next+0x21c>)
    1be0:	4694      	mov	ip, r2
    1be2:	4463      	add	r3, ip
    1be4:	2201      	movs	r2, #1
    1be6:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1be8:	7ce3      	ldrb	r3, [r4, #19]
    1bea:	069b      	lsls	r3, r3, #26
    1bec:	d50f      	bpl.n	1c0e <_usb_d_dev_out_next+0x82>
    1bee:	6863      	ldr	r3, [r4, #4]
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d039      	beq.n	1c68 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1bf4:	68a0      	ldr	r0, [r4, #8]
    1bf6:	1a1b      	subs	r3, r3, r0
    1bf8:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1bfa:	6822      	ldr	r2, [r4, #0]
    1bfc:	4694      	mov	ip, r2
    1bfe:	4460      	add	r0, ip
    1c00:	68e1      	ldr	r1, [r4, #12]
    1c02:	001a      	movs	r2, r3
    1c04:	42bb      	cmp	r3, r7
    1c06:	d900      	bls.n	1c0a <_usb_d_dev_out_next+0x7e>
    1c08:	003a      	movs	r2, r7
    1c0a:	4b68      	ldr	r3, [pc, #416]	; (1dac <_usb_d_dev_out_next+0x220>)
    1c0c:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1c0e:	6863      	ldr	r3, [r4, #4]
    1c10:	2b00      	cmp	r3, #0
    1c12:	d029      	beq.n	1c68 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    1c14:	4642      	mov	r2, r8
    1c16:	2a00      	cmp	r2, #0
    1c18:	d042      	beq.n	1ca0 <_usb_d_dev_out_next+0x114>
    1c1a:	8a22      	ldrh	r2, [r4, #16]
    1c1c:	42ba      	cmp	r2, r7
    1c1e:	d93f      	bls.n	1ca0 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    1c20:	7ce3      	ldrb	r3, [r4, #19]
    1c22:	2210      	movs	r2, #16
    1c24:	4393      	bics	r3, r2
    1c26:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1c28:	68a3      	ldr	r3, [r4, #8]
    1c2a:	445b      	add	r3, fp
    1c2c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    1c2e:	464b      	mov	r3, r9
    1c30:	2b01      	cmp	r3, #1
    1c32:	d100      	bne.n	1c36 <_usb_d_dev_out_next+0xaa>
    1c34:	e087      	b.n	1d46 <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1c36:	016b      	lsls	r3, r5, #5
    1c38:	4a5d      	ldr	r2, [pc, #372]	; (1db0 <_usb_d_dev_out_next+0x224>)
    1c3a:	4694      	mov	ip, r2
    1c3c:	4463      	add	r3, ip
    1c3e:	2225      	movs	r2, #37	; 0x25
    1c40:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    1c42:	2d00      	cmp	r5, #0
    1c44:	d102      	bne.n	1c4c <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    1c46:	4b56      	ldr	r3, [pc, #344]	; (1da0 <_usb_d_dev_out_next+0x214>)
    1c48:	68e2      	ldr	r2, [r4, #12]
    1c4a:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1c4c:	2100      	movs	r1, #0
    1c4e:	0020      	movs	r0, r4
    1c50:	4b58      	ldr	r3, [pc, #352]	; (1db4 <_usb_d_dev_out_next+0x228>)
    1c52:	4798      	blx	r3
	return;
    1c54:	e059      	b.n	1d0a <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1c56:	8a06      	ldrh	r6, [r0, #16]
    1c58:	4b52      	ldr	r3, [pc, #328]	; (1da4 <_usb_d_dev_out_next+0x218>)
    1c5a:	429e      	cmp	r6, r3
    1c5c:	d100      	bne.n	1c60 <_usb_d_dev_out_next+0xd4>
    1c5e:	e08e      	b.n	1d7e <_usb_d_dev_out_next+0x1f2>
    1c60:	2300      	movs	r3, #0
    1c62:	469b      	mov	fp, r3
    1c64:	469a      	mov	sl, r3
    1c66:	e7ae      	b.n	1bc6 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1c68:	7ce3      	ldrb	r3, [r4, #19]
    1c6a:	06db      	lsls	r3, r3, #27
    1c6c:	d400      	bmi.n	1c70 <_usb_d_dev_out_next+0xe4>
    1c6e:	e07f      	b.n	1d70 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    1c70:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1c72:	2210      	movs	r2, #16
    1c74:	4393      	bics	r3, r2
    1c76:	2220      	movs	r2, #32
    1c78:	4313      	orrs	r3, r2
    1c7a:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    1c7c:	4a48      	ldr	r2, [pc, #288]	; (1da0 <_usb_d_dev_out_next+0x214>)
    1c7e:	016b      	lsls	r3, r5, #5
    1c80:	68e1      	ldr	r1, [r4, #12]
    1c82:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1c84:	8a21      	ldrh	r1, [r4, #16]
    1c86:	18d3      	adds	r3, r2, r3
    1c88:	685a      	ldr	r2, [r3, #4]
    1c8a:	0489      	lsls	r1, r1, #18
    1c8c:	0909      	lsrs	r1, r1, #4
    1c8e:	484a      	ldr	r0, [pc, #296]	; (1db8 <_usb_d_dev_out_next+0x22c>)
    1c90:	4002      	ands	r2, r0
    1c92:	430a      	orrs	r2, r1
    1c94:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1c96:	685a      	ldr	r2, [r3, #4]
    1c98:	0b92      	lsrs	r2, r2, #14
    1c9a:	0392      	lsls	r2, r2, #14
    1c9c:	605a      	str	r2, [r3, #4]
    1c9e:	e022      	b.n	1ce6 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    1ca0:	68a2      	ldr	r2, [r4, #8]
    1ca2:	4452      	add	r2, sl
    1ca4:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1ca6:	4293      	cmp	r3, r2
    1ca8:	d9c1      	bls.n	1c2e <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    1caa:	1a9b      	subs	r3, r3, r2
    1cac:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1cae:	7ce1      	ldrb	r1, [r4, #19]
    1cb0:	0689      	lsls	r1, r1, #26
    1cb2:	d530      	bpl.n	1d16 <_usb_d_dev_out_next+0x18a>
    1cb4:	8a22      	ldrh	r2, [r4, #16]
    1cb6:	1c11      	adds	r1, r2, #0
    1cb8:	b292      	uxth	r2, r2
    1cba:	429a      	cmp	r2, r3
    1cbc:	d900      	bls.n	1cc0 <_usb_d_dev_out_next+0x134>
    1cbe:	1c19      	adds	r1, r3, #0
    1cc0:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1cc2:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1cc4:	016a      	lsls	r2, r5, #5
    1cc6:	4936      	ldr	r1, [pc, #216]	; (1da0 <_usb_d_dev_out_next+0x214>)
    1cc8:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1cca:	016a      	lsls	r2, r5, #5
    1ccc:	4934      	ldr	r1, [pc, #208]	; (1da0 <_usb_d_dev_out_next+0x214>)
    1cce:	1889      	adds	r1, r1, r2
    1cd0:	684a      	ldr	r2, [r1, #4]
    1cd2:	049b      	lsls	r3, r3, #18
    1cd4:	091b      	lsrs	r3, r3, #4
    1cd6:	4838      	ldr	r0, [pc, #224]	; (1db8 <_usb_d_dev_out_next+0x22c>)
    1cd8:	4002      	ands	r2, r0
    1cda:	4313      	orrs	r3, r2
    1cdc:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1cde:	684b      	ldr	r3, [r1, #4]
    1ce0:	0b9b      	lsrs	r3, r3, #14
    1ce2:	039b      	lsls	r3, r3, #14
    1ce4:	604b      	str	r3, [r1, #4]
	if (!isr) {
    1ce6:	4643      	mov	r3, r8
    1ce8:	2b00      	cmp	r3, #0
    1cea:	d108      	bne.n	1cfe <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    1cec:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    1cee:	464b      	mov	r3, r9
    1cf0:	2b01      	cmp	r3, #1
    1cf2:	d02f      	beq.n	1d54 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1cf4:	016b      	lsls	r3, r5, #5
    1cf6:	4931      	ldr	r1, [pc, #196]	; (1dbc <_usb_d_dev_out_next+0x230>)
    1cf8:	468c      	mov	ip, r1
    1cfa:	4463      	add	r3, ip
    1cfc:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1cfe:	016d      	lsls	r5, r5, #5
    1d00:	4b29      	ldr	r3, [pc, #164]	; (1da8 <_usb_d_dev_out_next+0x21c>)
    1d02:	469c      	mov	ip, r3
    1d04:	4465      	add	r5, ip
    1d06:	2340      	movs	r3, #64	; 0x40
    1d08:	712b      	strb	r3, [r5, #4]
}
    1d0a:	bc3c      	pop	{r2, r3, r4, r5}
    1d0c:	4690      	mov	r8, r2
    1d0e:	4699      	mov	r9, r3
    1d10:	46a2      	mov	sl, r4
    1d12:	46ab      	mov	fp, r5
    1d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    1d16:	8a21      	ldrh	r1, [r4, #16]
    1d18:	428b      	cmp	r3, r1
    1d1a:	d90a      	bls.n	1d32 <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1d1c:	2180      	movs	r1, #128	; 0x80
    1d1e:	0189      	lsls	r1, r1, #6
    1d20:	428b      	cmp	r3, r1
    1d22:	d80d      	bhi.n	1d40 <_usb_d_dev_out_next+0x1b4>
    1d24:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1d26:	6821      	ldr	r1, [r4, #0]
    1d28:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    1d2a:	0169      	lsls	r1, r5, #5
    1d2c:	481c      	ldr	r0, [pc, #112]	; (1da0 <_usb_d_dev_out_next+0x214>)
    1d2e:	500a      	str	r2, [r1, r0]
    1d30:	e7cb      	b.n	1cca <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    1d32:	428b      	cmp	r3, r1
    1d34:	d2f7      	bcs.n	1d26 <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    1d36:	7ce1      	ldrb	r1, [r4, #19]
    1d38:	2020      	movs	r0, #32
    1d3a:	4301      	orrs	r1, r0
    1d3c:	74e1      	strb	r1, [r4, #19]
    1d3e:	e7f2      	b.n	1d26 <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    1d40:	2380      	movs	r3, #128	; 0x80
    1d42:	019b      	lsls	r3, r3, #6
    1d44:	e7ef      	b.n	1d26 <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1d46:	016b      	lsls	r3, r5, #5
    1d48:	4a19      	ldr	r2, [pc, #100]	; (1db0 <_usb_d_dev_out_next+0x224>)
    1d4a:	4694      	mov	ip, r2
    1d4c:	4463      	add	r3, ip
    1d4e:	222d      	movs	r2, #45	; 0x2d
    1d50:	701a      	strb	r2, [r3, #0]
    1d52:	e776      	b.n	1c42 <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    1d54:	016a      	lsls	r2, r5, #5
    1d56:	4b12      	ldr	r3, [pc, #72]	; (1da0 <_usb_d_dev_out_next+0x214>)
    1d58:	189b      	adds	r3, r3, r2
    1d5a:	2200      	movs	r2, #0
    1d5c:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1d5e:	322d      	adds	r2, #45	; 0x2d
    1d60:	e7c8      	b.n	1cf4 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    1d62:	05bf      	lsls	r7, r7, #22
    1d64:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1d66:	7cc3      	ldrb	r3, [r0, #19]
    1d68:	2207      	movs	r2, #7
    1d6a:	401a      	ands	r2, r3
    1d6c:	4691      	mov	r9, r2
    1d6e:	e735      	b.n	1bdc <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    1d70:	4643      	mov	r3, r8
    1d72:	2b00      	cmp	r3, #0
    1d74:	d10c      	bne.n	1d90 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    1d76:	68a3      	ldr	r3, [r4, #8]
    1d78:	4453      	add	r3, sl
    1d7a:	60a3      	str	r3, [r4, #8]
    1d7c:	e757      	b.n	1c2e <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1d7e:	7cc3      	ldrb	r3, [r0, #19]
    1d80:	2207      	movs	r2, #7
    1d82:	401a      	ands	r2, r3
    1d84:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    1d86:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1d88:	2300      	movs	r3, #0
    1d8a:	469b      	mov	fp, r3
    1d8c:	469a      	mov	sl, r3
    1d8e:	e72b      	b.n	1be8 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    1d90:	8a23      	ldrh	r3, [r4, #16]
    1d92:	42bb      	cmp	r3, r7
    1d94:	d900      	bls.n	1d98 <_usb_d_dev_out_next+0x20c>
    1d96:	e743      	b.n	1c20 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    1d98:	68a3      	ldr	r3, [r4, #8]
    1d9a:	4453      	add	r3, sl
    1d9c:	60a3      	str	r3, [r4, #8]
    1d9e:	e746      	b.n	1c2e <_usb_d_dev_out_next+0xa2>
    1da0:	200006e8 	.word	0x200006e8
    1da4:	000003ff 	.word	0x000003ff
    1da8:	41005100 	.word	0x41005100
    1dac:	00003829 	.word	0x00003829
    1db0:	41005108 	.word	0x41005108
    1db4:	00001805 	.word	0x00001805
    1db8:	f0003fff 	.word	0xf0003fff
    1dbc:	41005109 	.word	0x41005109

00001dc0 <_usb_d_dev_init>:
{
    1dc0:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1dc2:	4b31      	ldr	r3, [pc, #196]	; (1e88 <_usb_d_dev_init+0xc8>)
    1dc4:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1dc6:	07db      	lsls	r3, r3, #31
    1dc8:	d41f      	bmi.n	1e0a <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1dca:	492f      	ldr	r1, [pc, #188]	; (1e88 <_usb_d_dev_init+0xc8>)
    1dcc:	2203      	movs	r2, #3
    1dce:	788b      	ldrb	r3, [r1, #2]
    1dd0:	4213      	tst	r3, r2
    1dd2:	d1fc      	bne.n	1dce <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    1dd4:	4b2c      	ldr	r3, [pc, #176]	; (1e88 <_usb_d_dev_init+0xc8>)
    1dd6:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1dd8:	079b      	lsls	r3, r3, #30
    1dda:	d50e      	bpl.n	1dfa <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1ddc:	4a2a      	ldr	r2, [pc, #168]	; (1e88 <_usb_d_dev_init+0xc8>)
    1dde:	7813      	ldrb	r3, [r2, #0]
    1de0:	2102      	movs	r1, #2
    1de2:	438b      	bics	r3, r1
    1de4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1de6:	0011      	movs	r1, r2
    1de8:	2203      	movs	r2, #3
    1dea:	788b      	ldrb	r3, [r1, #2]
    1dec:	4213      	tst	r3, r2
    1dee:	d1fc      	bne.n	1dea <_usb_d_dev_init+0x2a>
    1df0:	4925      	ldr	r1, [pc, #148]	; (1e88 <_usb_d_dev_init+0xc8>)
    1df2:	2202      	movs	r2, #2
    1df4:	788b      	ldrb	r3, [r1, #2]
    1df6:	4213      	tst	r3, r2
    1df8:	d1fc      	bne.n	1df4 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1dfa:	2201      	movs	r2, #1
    1dfc:	4b22      	ldr	r3, [pc, #136]	; (1e88 <_usb_d_dev_init+0xc8>)
    1dfe:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1e00:	0019      	movs	r1, r3
    1e02:	3202      	adds	r2, #2
    1e04:	788b      	ldrb	r3, [r1, #2]
    1e06:	4213      	tst	r3, r2
    1e08:	d1fc      	bne.n	1e04 <_usb_d_dev_init+0x44>
    1e0a:	491f      	ldr	r1, [pc, #124]	; (1e88 <_usb_d_dev_init+0xc8>)
    1e0c:	2201      	movs	r2, #1
    1e0e:	788b      	ldrb	r3, [r1, #2]
    1e10:	4213      	tst	r3, r2
    1e12:	d1fc      	bne.n	1e0e <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1e14:	4b1d      	ldr	r3, [pc, #116]	; (1e8c <_usb_d_dev_init+0xcc>)
    1e16:	4a1e      	ldr	r2, [pc, #120]	; (1e90 <_usb_d_dev_init+0xd0>)
    1e18:	621a      	str	r2, [r3, #32]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    1e1a:	625a      	str	r2, [r3, #36]	; 0x24
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    1e1c:	629a      	str	r2, [r3, #40]	; 0x28
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1e1e:	62da      	str	r2, [r3, #44]	; 0x2c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1e20:	631a      	str	r2, [r3, #48]	; 0x30
	_usb_d_dev_reset_epts();
    1e22:	4b1c      	ldr	r3, [pc, #112]	; (1e94 <_usb_d_dev_init+0xd4>)
    1e24:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1e26:	4b1c      	ldr	r3, [pc, #112]	; (1e98 <_usb_d_dev_init+0xd8>)
    1e28:	681b      	ldr	r3, [r3, #0]
    1e2a:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    1e2c:	211f      	movs	r1, #31
    1e2e:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    1e30:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    1e32:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1e34:	019b      	lsls	r3, r3, #6
    1e36:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    1e38:	2a1f      	cmp	r2, #31
    1e3a:	d01f      	beq.n	1e7c <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    1e3c:	291f      	cmp	r1, #31
    1e3e:	d01f      	beq.n	1e80 <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    1e40:	2b07      	cmp	r3, #7
    1e42:	d01f      	beq.n	1e84 <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1e44:	0192      	lsls	r2, r2, #6
    1e46:	430a      	orrs	r2, r1
    1e48:	031b      	lsls	r3, r3, #12
    1e4a:	4313      	orrs	r3, r2
    1e4c:	4a0e      	ldr	r2, [pc, #56]	; (1e88 <_usb_d_dev_init+0xc8>)
    1e4e:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1e50:	78d3      	ldrb	r3, [r2, #3]
    1e52:	2103      	movs	r1, #3
    1e54:	430b      	orrs	r3, r1
    1e56:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1e58:	78d3      	ldrb	r3, [r2, #3]
    1e5a:	210c      	movs	r1, #12
    1e5c:	430b      	orrs	r3, r1
    1e5e:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1e60:	2304      	movs	r3, #4
    1e62:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1e64:	0011      	movs	r1, r2
    1e66:	2203      	movs	r2, #3
    1e68:	788b      	ldrb	r3, [r1, #2]
    1e6a:	4213      	tst	r3, r2
    1e6c:	d1fc      	bne.n	1e68 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    1e6e:	4b06      	ldr	r3, [pc, #24]	; (1e88 <_usb_d_dev_init+0xc8>)
    1e70:	4a0a      	ldr	r2, [pc, #40]	; (1e9c <_usb_d_dev_init+0xdc>)
    1e72:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1e74:	2201      	movs	r2, #1
    1e76:	811a      	strh	r2, [r3, #8]
}
    1e78:	2000      	movs	r0, #0
    1e7a:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    1e7c:	3a1a      	subs	r2, #26
    1e7e:	e7dd      	b.n	1e3c <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    1e80:	3902      	subs	r1, #2
    1e82:	e7dd      	b.n	1e40 <_usb_d_dev_init+0x80>
		pad_trim = 5;
    1e84:	3b02      	subs	r3, #2
    1e86:	e7dd      	b.n	1e44 <_usb_d_dev_init+0x84>
    1e88:	41005000 	.word	0x41005000
    1e8c:	20000768 	.word	0x20000768
    1e90:	0000173d 	.word	0x0000173d
    1e94:	00001999 	.word	0x00001999
    1e98:	00806024 	.word	0x00806024
    1e9c:	200006e8 	.word	0x200006e8

00001ea0 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    1ea0:	4b10      	ldr	r3, [pc, #64]	; (1ee4 <_usb_d_dev_enable+0x44>)
    1ea2:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    1ea4:	079b      	lsls	r3, r3, #30
    1ea6:	d11a      	bne.n	1ede <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1ea8:	490e      	ldr	r1, [pc, #56]	; (1ee4 <_usb_d_dev_enable+0x44>)
    1eaa:	2203      	movs	r2, #3
    1eac:	788b      	ldrb	r3, [r1, #2]
    1eae:	4213      	tst	r3, r2
    1eb0:	d1fc      	bne.n	1eac <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    1eb2:	4b0c      	ldr	r3, [pc, #48]	; (1ee4 <_usb_d_dev_enable+0x44>)
    1eb4:	781b      	ldrb	r3, [r3, #0]
    1eb6:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    1eb8:	079a      	lsls	r2, r3, #30
    1eba:	d408      	bmi.n	1ece <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    1ebc:	2202      	movs	r2, #2
    1ebe:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1ec0:	4a08      	ldr	r2, [pc, #32]	; (1ee4 <_usb_d_dev_enable+0x44>)
    1ec2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1ec4:	0011      	movs	r1, r2
    1ec6:	2203      	movs	r2, #3
    1ec8:	788b      	ldrb	r3, [r1, #2]
    1eca:	4213      	tst	r3, r2
    1ecc:	d1fc      	bne.n	1ec8 <_usb_d_dev_enable+0x28>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ece:	2280      	movs	r2, #128	; 0x80
    1ed0:	4b05      	ldr	r3, [pc, #20]	; (1ee8 <_usb_d_dev_enable+0x48>)
    1ed2:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1ed4:	4a05      	ldr	r2, [pc, #20]	; (1eec <_usb_d_dev_enable+0x4c>)
    1ed6:	4b03      	ldr	r3, [pc, #12]	; (1ee4 <_usb_d_dev_enable+0x44>)
    1ed8:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    1eda:	2000      	movs	r0, #0
}
    1edc:	4770      	bx	lr
		return -USB_ERR_DENIED;
    1ede:	2011      	movs	r0, #17
    1ee0:	4240      	negs	r0, r0
    1ee2:	e7fb      	b.n	1edc <_usb_d_dev_enable+0x3c>
    1ee4:	41005000 	.word	0x41005000
    1ee8:	e000e100 	.word	0xe000e100
    1eec:	0000028d 	.word	0x0000028d

00001ef0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1ef0:	4a02      	ldr	r2, [pc, #8]	; (1efc <_usb_d_dev_attach+0xc>)
    1ef2:	8913      	ldrh	r3, [r2, #8]
    1ef4:	2101      	movs	r1, #1
    1ef6:	438b      	bics	r3, r1
    1ef8:	8113      	strh	r3, [r2, #8]
}
    1efa:	4770      	bx	lr
    1efc:	41005000 	.word	0x41005000

00001f00 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    1f00:	2380      	movs	r3, #128	; 0x80
    1f02:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    1f04:	4b01      	ldr	r3, [pc, #4]	; (1f0c <_usb_d_dev_set_address+0xc>)
    1f06:	7298      	strb	r0, [r3, #10]
}
    1f08:	4770      	bx	lr
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	41005000 	.word	0x41005000

00001f10 <_usb_d_dev_ep_init>:
{
    1f10:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    1f12:	240f      	movs	r4, #15
    1f14:	4004      	ands	r4, r0
    1f16:	b243      	sxtb	r3, r0
    1f18:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1f1a:	2c00      	cmp	r4, #0
    1f1c:	d054      	beq.n	1fc8 <_usb_d_dev_ep_init+0xb8>
    1f1e:	0025      	movs	r5, r4
    1f20:	2b00      	cmp	r3, #0
    1f22:	db07      	blt.n	1f34 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1f24:	2303      	movs	r3, #3
    1f26:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1f28:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    1f2a:	2c04      	cmp	r4, #4
    1f2c:	d950      	bls.n	1fd0 <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    1f2e:	2012      	movs	r0, #18
    1f30:	4240      	negs	r0, r0
    1f32:	e025      	b.n	1f80 <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1f34:	1d25      	adds	r5, r4, #4
    1f36:	e7f5      	b.n	1f24 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1f38:	4663      	mov	r3, ip
    1f3a:	2b00      	cmp	r3, #0
    1f3c:	db21      	blt.n	1f82 <_usb_d_dev_ep_init+0x72>
    1f3e:	007b      	lsls	r3, r7, #1
    1f40:	19db      	adds	r3, r3, r7
    1f42:	009b      	lsls	r3, r3, #2
    1f44:	4c3b      	ldr	r4, [pc, #236]	; (2034 <STACK_SIZE+0x34>)
    1f46:	591b      	ldr	r3, [r3, r4]
    1f48:	2b00      	cmp	r3, #0
    1f4a:	d166      	bne.n	201a <STACK_SIZE+0x1a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1f4c:	007b      	lsls	r3, r7, #1
    1f4e:	19df      	adds	r7, r3, r7
    1f50:	00bf      	lsls	r7, r7, #2
    1f52:	4b38      	ldr	r3, [pc, #224]	; (2034 <STACK_SIZE+0x34>)
    1f54:	58ff      	ldr	r7, [r7, r3]
    1f56:	4b38      	ldr	r3, [pc, #224]	; (2038 <STACK_SIZE+0x38>)
    1f58:	00ae      	lsls	r6, r5, #2
    1f5a:	1974      	adds	r4, r6, r5
    1f5c:	00a4      	lsls	r4, r4, #2
    1f5e:	191c      	adds	r4, r3, r4
    1f60:	6427      	str	r7, [r4, #64]	; 0x40
	ept->size     = max_pkt_siz;
    1f62:	3444      	adds	r4, #68	; 0x44
    1f64:	8022      	strh	r2, [r4, #0]
	ept->flags.u8 = (ep_type + 1);
    1f66:	3320      	adds	r3, #32
    1f68:	1972      	adds	r2, r6, r5
    1f6a:	0092      	lsls	r2, r2, #2
    1f6c:	189a      	adds	r2, r3, r2
    1f6e:	3227      	adds	r2, #39	; 0x27
    1f70:	3101      	adds	r1, #1
    1f72:	7011      	strb	r1, [r2, #0]
	ept->ep       = ep;
    1f74:	1975      	adds	r5, r6, r5
    1f76:	00ad      	lsls	r5, r5, #2
    1f78:	195b      	adds	r3, r3, r5
    1f7a:	3326      	adds	r3, #38	; 0x26
    1f7c:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    1f7e:	2000      	movs	r0, #0
}
    1f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1f82:	007b      	lsls	r3, r7, #1
    1f84:	19db      	adds	r3, r3, r7
    1f86:	009b      	lsls	r3, r3, #2
    1f88:	4c2a      	ldr	r4, [pc, #168]	; (2034 <STACK_SIZE+0x34>)
    1f8a:	18e3      	adds	r3, r4, r3
    1f8c:	685b      	ldr	r3, [r3, #4]
    1f8e:	2b00      	cmp	r3, #0
    1f90:	d106      	bne.n	1fa0 <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1f92:	007b      	lsls	r3, r7, #1
    1f94:	19df      	adds	r7, r3, r7
    1f96:	00bf      	lsls	r7, r7, #2
    1f98:	4b26      	ldr	r3, [pc, #152]	; (2034 <STACK_SIZE+0x34>)
    1f9a:	19df      	adds	r7, r3, r7
    1f9c:	687f      	ldr	r7, [r7, #4]
    1f9e:	e7da      	b.n	1f56 <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1fa0:	007b      	lsls	r3, r7, #1
    1fa2:	19db      	adds	r3, r3, r7
    1fa4:	009b      	lsls	r3, r3, #2
    1fa6:	4c23      	ldr	r4, [pc, #140]	; (2034 <STACK_SIZE+0x34>)
    1fa8:	18e3      	adds	r3, r4, r3
    1faa:	895b      	ldrh	r3, [r3, #10]
    1fac:	4293      	cmp	r3, r2
    1fae:	daf0      	bge.n	1f92 <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    1fb0:	2013      	movs	r0, #19
    1fb2:	4240      	negs	r0, r0
    1fb4:	e7e4      	b.n	1f80 <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    1fb6:	2014      	movs	r0, #20
    1fb8:	4240      	negs	r0, r0
    1fba:	e7e1      	b.n	1f80 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    1fbc:	2014      	movs	r0, #20
    1fbe:	4240      	negs	r0, r0
    1fc0:	e7de      	b.n	1f80 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    1fc2:	2013      	movs	r0, #19
    1fc4:	4240      	negs	r0, r0
    1fc6:	e7db      	b.n	1f80 <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1fc8:	2303      	movs	r3, #3
    1fca:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    1fcc:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1fce:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    1fd0:	00ab      	lsls	r3, r5, #2
    1fd2:	195b      	adds	r3, r3, r5
    1fd4:	009e      	lsls	r6, r3, #2
    1fd6:	4b18      	ldr	r3, [pc, #96]	; (2038 <STACK_SIZE+0x38>)
    1fd8:	199b      	adds	r3, r3, r6
    1fda:	3346      	adds	r3, #70	; 0x46
    1fdc:	781b      	ldrb	r3, [r3, #0]
    1fde:	2bff      	cmp	r3, #255	; 0xff
    1fe0:	d1e9      	bne.n	1fb6 <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    1fe2:	2900      	cmp	r1, #0
    1fe4:	d1a8      	bne.n	1f38 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1fe6:	2c00      	cmp	r4, #0
    1fe8:	d004      	beq.n	1ff4 <_usb_d_dev_ep_init+0xe4>
    1fea:	4663      	mov	r3, ip
    1fec:	2b00      	cmp	r3, #0
    1fee:	db01      	blt.n	1ff4 <_usb_d_dev_ep_init+0xe4>
    1ff0:	3404      	adds	r4, #4
    1ff2:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    1ff4:	00a3      	lsls	r3, r4, #2
    1ff6:	191b      	adds	r3, r3, r4
    1ff8:	009b      	lsls	r3, r3, #2
    1ffa:	4c0f      	ldr	r4, [pc, #60]	; (2038 <STACK_SIZE+0x38>)
    1ffc:	18e4      	adds	r4, r4, r3
    1ffe:	3446      	adds	r4, #70	; 0x46
    2000:	7823      	ldrb	r3, [r4, #0]
    2002:	2bff      	cmp	r3, #255	; 0xff
    2004:	d1da      	bne.n	1fbc <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    2006:	007b      	lsls	r3, r7, #1
    2008:	19db      	adds	r3, r3, r7
    200a:	009b      	lsls	r3, r3, #2
    200c:	4c09      	ldr	r4, [pc, #36]	; (2034 <STACK_SIZE+0x34>)
    200e:	591b      	ldr	r3, [r3, r4]
    2010:	2b00      	cmp	r3, #0
    2012:	d0d6      	beq.n	1fc2 <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2014:	4663      	mov	r3, ip
    2016:	2b00      	cmp	r3, #0
    2018:	dbb3      	blt.n	1f82 <_usb_d_dev_ep_init+0x72>
    201a:	007b      	lsls	r3, r7, #1
    201c:	19db      	adds	r3, r3, r7
    201e:	009b      	lsls	r3, r3, #2
    2020:	4c04      	ldr	r4, [pc, #16]	; (2034 <STACK_SIZE+0x34>)
    2022:	18e3      	adds	r3, r4, r3
    2024:	891b      	ldrh	r3, [r3, #8]
    2026:	4293      	cmp	r3, r2
    2028:	db00      	blt.n	202c <STACK_SIZE+0x2c>
    202a:	e78f      	b.n	1f4c <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    202c:	2013      	movs	r0, #19
    202e:	4240      	negs	r0, r0
    2030:	e7a6      	b.n	1f80 <_usb_d_dev_ep_init+0x70>
    2032:	46c0      	nop			; (mov r8, r8)
    2034:	00003ba0 	.word	0x00003ba0
    2038:	20000768 	.word	0x20000768

0000203c <_usb_d_dev_ep_deinit>:
{
    203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    203e:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    2040:	240f      	movs	r4, #15
    2042:	4004      	ands	r4, r0
    2044:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2046:	2c00      	cmp	r4, #0
    2048:	d010      	beq.n	206c <_usb_d_dev_ep_deinit+0x30>
    204a:	0020      	movs	r0, r4
    204c:	2f00      	cmp	r7, #0
    204e:	db02      	blt.n	2056 <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2050:	2c04      	cmp	r4, #4
    2052:	d902      	bls.n	205a <_usb_d_dev_ep_deinit+0x1e>
}
    2054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2056:	1d20      	adds	r0, r4, #4
    2058:	e7fa      	b.n	2050 <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    205a:	0006      	movs	r6, r0
    205c:	3001      	adds	r0, #1
    205e:	0083      	lsls	r3, r0, #2
    2060:	1818      	adds	r0, r3, r0
    2062:	0080      	lsls	r0, r0, #2
    2064:	4b25      	ldr	r3, [pc, #148]	; (20fc <_usb_d_dev_ep_deinit+0xc0>)
    2066:	3320      	adds	r3, #32
    2068:	1818      	adds	r0, r3, r0
    206a:	e002      	b.n	2072 <_usb_d_dev_ep_deinit+0x36>
    206c:	4823      	ldr	r0, [pc, #140]	; (20fc <_usb_d_dev_ep_deinit+0xc0>)
    206e:	3034      	adds	r0, #52	; 0x34
    2070:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2072:	00b3      	lsls	r3, r6, #2
    2074:	199b      	adds	r3, r3, r6
    2076:	009a      	lsls	r2, r3, #2
    2078:	4b20      	ldr	r3, [pc, #128]	; (20fc <_usb_d_dev_ep_deinit+0xc0>)
    207a:	189b      	adds	r3, r3, r2
    207c:	3346      	adds	r3, #70	; 0x46
    207e:	781b      	ldrb	r3, [r3, #0]
    2080:	2bff      	cmp	r3, #255	; 0xff
    2082:	d0e7      	beq.n	2054 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    2084:	0ff9      	lsrs	r1, r7, #31
    2086:	2203      	movs	r2, #3
    2088:	4b1d      	ldr	r3, [pc, #116]	; (2100 <_usb_d_dev_ep_deinit+0xc4>)
    208a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    208c:	00b3      	lsls	r3, r6, #2
    208e:	199b      	adds	r3, r3, r6
    2090:	009a      	lsls	r2, r3, #2
    2092:	4b1a      	ldr	r3, [pc, #104]	; (20fc <_usb_d_dev_ep_deinit+0xc0>)
    2094:	189b      	adds	r3, r3, r2
    2096:	3340      	adds	r3, #64	; 0x40
    2098:	79da      	ldrb	r2, [r3, #7]
    209a:	2307      	movs	r3, #7
    209c:	4013      	ands	r3, r2
    209e:	2b01      	cmp	r3, #1
    20a0:	d01b      	beq.n	20da <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    20a2:	2f00      	cmp	r7, #0
    20a4:	db1f      	blt.n	20e6 <_usb_d_dev_ep_deinit+0xaa>
    20a6:	016d      	lsls	r5, r5, #5
    20a8:	4b16      	ldr	r3, [pc, #88]	; (2104 <_usb_d_dev_ep_deinit+0xc8>)
    20aa:	469c      	mov	ip, r3
    20ac:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    20ae:	2280      	movs	r2, #128	; 0x80
    20b0:	0052      	lsls	r2, r2, #1
    20b2:	5cab      	ldrb	r3, [r5, r2]
    20b4:	2107      	movs	r1, #7
    20b6:	438b      	bics	r3, r1
    20b8:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    20ba:	4b10      	ldr	r3, [pc, #64]	; (20fc <_usb_d_dev_ep_deinit+0xc0>)
    20bc:	3320      	adds	r3, #32
    20be:	00b1      	lsls	r1, r6, #2
    20c0:	198a      	adds	r2, r1, r6
    20c2:	0092      	lsls	r2, r2, #2
    20c4:	189a      	adds	r2, r3, r2
    20c6:	3227      	adds	r2, #39	; 0x27
    20c8:	2000      	movs	r0, #0
    20ca:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    20cc:	198e      	adds	r6, r1, r6
    20ce:	00b6      	lsls	r6, r6, #2
    20d0:	199b      	adds	r3, r3, r6
    20d2:	3326      	adds	r3, #38	; 0x26
    20d4:	22ff      	movs	r2, #255	; 0xff
    20d6:	701a      	strb	r2, [r3, #0]
    20d8:	e7bc      	b.n	2054 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    20da:	3508      	adds	r5, #8
    20dc:	016d      	lsls	r5, r5, #5
    20de:	2200      	movs	r2, #0
    20e0:	4b08      	ldr	r3, [pc, #32]	; (2104 <_usb_d_dev_ep_deinit+0xc8>)
    20e2:	54ea      	strb	r2, [r5, r3]
    20e4:	e7e9      	b.n	20ba <_usb_d_dev_ep_deinit+0x7e>
    20e6:	0164      	lsls	r4, r4, #5
    20e8:	4b06      	ldr	r3, [pc, #24]	; (2104 <_usb_d_dev_ep_deinit+0xc8>)
    20ea:	469c      	mov	ip, r3
    20ec:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    20ee:	2280      	movs	r2, #128	; 0x80
    20f0:	0052      	lsls	r2, r2, #1
    20f2:	5ca3      	ldrb	r3, [r4, r2]
    20f4:	2170      	movs	r1, #112	; 0x70
    20f6:	438b      	bics	r3, r1
    20f8:	54a3      	strb	r3, [r4, r2]
    20fa:	e7de      	b.n	20ba <_usb_d_dev_ep_deinit+0x7e>
    20fc:	20000768 	.word	0x20000768
    2100:	0000182d 	.word	0x0000182d
    2104:	41005000 	.word	0x41005000

00002108 <_usb_d_dev_ep_enable>:
{
    2108:	b5f0      	push	{r4, r5, r6, r7, lr}
    210a:	46c6      	mov	lr, r8
    210c:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    210e:	220f      	movs	r2, #15
    2110:	4002      	ands	r2, r0
    2112:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2114:	2a00      	cmp	r2, #0
    2116:	d100      	bne.n	211a <_usb_d_dev_ep_enable+0x12>
    2118:	e092      	b.n	2240 <_usb_d_dev_ep_enable+0x138>
    211a:	0013      	movs	r3, r2
    211c:	2800      	cmp	r0, #0
    211e:	db0b      	blt.n	2138 <_usb_d_dev_ep_enable+0x30>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2120:	0011      	movs	r1, r2
    2122:	3208      	adds	r2, #8
    2124:	0152      	lsls	r2, r2, #5
    2126:	4cab      	ldr	r4, [pc, #684]	; (23d4 <_usb_d_dev_ep_enable+0x2cc>)
    2128:	5d15      	ldrb	r5, [r2, r4]
    212a:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    212c:	2904      	cmp	r1, #4
    212e:	d800      	bhi.n	2132 <_usb_d_dev_ep_enable+0x2a>
    2130:	e08d      	b.n	224e <_usb_d_dev_ep_enable+0x146>
		return -USB_ERR_PARAM;
    2132:	2012      	movs	r0, #18
    2134:	4240      	negs	r0, r0
    2136:	e0e6      	b.n	2306 <_usb_d_dev_ep_enable+0x1fe>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2138:	1d13      	adds	r3, r2, #4
    213a:	e7f1      	b.n	2120 <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    213c:	2077      	movs	r0, #119	; 0x77
    213e:	4228      	tst	r0, r5
    2140:	d175      	bne.n	222e <_usb_d_dev_ep_enable+0x126>
    2142:	48a4      	ldr	r0, [pc, #656]	; (23d4 <_usb_d_dev_ep_enable+0x2cc>)
    2144:	4680      	mov	r8, r0
    2146:	4442      	add	r2, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2148:	3410      	adds	r4, #16
    214a:	2080      	movs	r0, #128	; 0x80
    214c:	0040      	lsls	r0, r0, #1
    214e:	5414      	strb	r4, [r2, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2150:	0098      	lsls	r0, r3, #2
    2152:	18c0      	adds	r0, r0, r3
    2154:	0084      	lsls	r4, r0, #2
    2156:	48a0      	ldr	r0, [pc, #640]	; (23d8 <_usb_d_dev_ep_enable+0x2d0>)
    2158:	1900      	adds	r0, r0, r4
    215a:	3044      	adds	r0, #68	; 0x44
    215c:	8800      	ldrh	r0, [r0, #0]
    215e:	0385      	lsls	r5, r0, #14
    2160:	4c9e      	ldr	r4, [pc, #632]	; (23dc <_usb_d_dev_ep_enable+0x2d4>)
    2162:	4025      	ands	r5, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2164:	2480      	movs	r4, #128	; 0x80
    2166:	00a4      	lsls	r4, r4, #2
    2168:	42a0      	cmp	r0, r4
    216a:	d900      	bls.n	216e <_usb_d_dev_ep_enable+0x66>
    216c:	e0ce      	b.n	230c <_usb_d_dev_ep_enable+0x204>
    216e:	3c01      	subs	r4, #1
    2170:	3cff      	subs	r4, #255	; 0xff
    2172:	42a0      	cmp	r0, r4
    2174:	d900      	bls.n	2178 <_usb_d_dev_ep_enable+0x70>
    2176:	e114      	b.n	23a2 <_usb_d_dev_ep_enable+0x29a>
    2178:	2880      	cmp	r0, #128	; 0x80
    217a:	d900      	bls.n	217e <_usb_d_dev_ep_enable+0x76>
    217c:	e101      	b.n	2382 <_usb_d_dev_ep_enable+0x27a>
    217e:	2840      	cmp	r0, #64	; 0x40
    2180:	d900      	bls.n	2184 <_usb_d_dev_ep_enable+0x7c>
    2182:	e116      	b.n	23b2 <_usb_d_dev_ep_enable+0x2aa>
    2184:	2820      	cmp	r0, #32
    2186:	d900      	bls.n	218a <_usb_d_dev_ep_enable+0x82>
    2188:	e103      	b.n	2392 <_usb_d_dev_ep_enable+0x28a>
    218a:	2810      	cmp	r0, #16
    218c:	d900      	bls.n	2190 <_usb_d_dev_ep_enable+0x88>
    218e:	e118      	b.n	23c2 <_usb_d_dev_ep_enable+0x2ba>
    2190:	3cf8      	subs	r4, #248	; 0xf8
    2192:	4284      	cmp	r4, r0
    2194:	41a4      	sbcs	r4, r4
    2196:	4264      	negs	r4, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2198:	0726      	lsls	r6, r4, #28
    219a:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    219c:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    219e:	0485      	lsls	r5, r0, #18
    21a0:	0cad      	lsrs	r5, r5, #18
    21a2:	e0ba      	b.n	231a <_usb_d_dev_ep_enable+0x212>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    21a4:	2070      	movs	r0, #112	; 0x70
    21a6:	4228      	tst	r0, r5
    21a8:	d144      	bne.n	2234 <_usb_d_dev_ep_enable+0x12c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    21aa:	4c8b      	ldr	r4, [pc, #556]	; (23d8 <_usb_d_dev_ep_enable+0x2d0>)
    21ac:	009e      	lsls	r6, r3, #2
    21ae:	18f0      	adds	r0, r6, r3
    21b0:	0080      	lsls	r0, r0, #2
    21b2:	1820      	adds	r0, r4, r0
    21b4:	3040      	adds	r0, #64	; 0x40
    21b6:	79c0      	ldrb	r0, [r0, #7]
    21b8:	0740      	lsls	r0, r0, #29
    21ba:	0e40      	lsrs	r0, r0, #25
    21bc:	4305      	orrs	r5, r0
    21be:	4885      	ldr	r0, [pc, #532]	; (23d4 <_usb_d_dev_ep_enable+0x2cc>)
    21c0:	4684      	mov	ip, r0
    21c2:	4462      	add	r2, ip
    21c4:	2080      	movs	r0, #128	; 0x80
    21c6:	0040      	lsls	r0, r0, #1
    21c8:	5415      	strb	r5, [r2, r0]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    21ca:	18f6      	adds	r6, r6, r3
    21cc:	00b6      	lsls	r6, r6, #2
    21ce:	19a4      	adds	r4, r4, r6
    21d0:	3444      	adds	r4, #68	; 0x44
    21d2:	8824      	ldrh	r4, [r4, #0]
    21d4:	04a5      	lsls	r5, r4, #18
    21d6:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    21d8:	3001      	adds	r0, #1
    21da:	30ff      	adds	r0, #255	; 0xff
    21dc:	2307      	movs	r3, #7
    21de:	4284      	cmp	r4, r0
    21e0:	d814      	bhi.n	220c <_usb_d_dev_ep_enable+0x104>
    21e2:	3801      	subs	r0, #1
    21e4:	38ff      	subs	r0, #255	; 0xff
    21e6:	3b01      	subs	r3, #1
    21e8:	4284      	cmp	r4, r0
    21ea:	d80f      	bhi.n	220c <_usb_d_dev_ep_enable+0x104>
    21ec:	3b01      	subs	r3, #1
    21ee:	2c80      	cmp	r4, #128	; 0x80
    21f0:	d80c      	bhi.n	220c <_usb_d_dev_ep_enable+0x104>
    21f2:	3b01      	subs	r3, #1
    21f4:	2c40      	cmp	r4, #64	; 0x40
    21f6:	d809      	bhi.n	220c <_usb_d_dev_ep_enable+0x104>
    21f8:	3b01      	subs	r3, #1
    21fa:	2c20      	cmp	r4, #32
    21fc:	d806      	bhi.n	220c <_usb_d_dev_ep_enable+0x104>
    21fe:	3b01      	subs	r3, #1
    2200:	2c10      	cmp	r4, #16
    2202:	d803      	bhi.n	220c <_usb_d_dev_ep_enable+0x104>
    2204:	38f8      	subs	r0, #248	; 0xf8
    2206:	42a0      	cmp	r0, r4
    2208:	4180      	sbcs	r0, r0
    220a:	4243      	negs	r3, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    220c:	071b      	lsls	r3, r3, #28
    220e:	432b      	orrs	r3, r5
    2210:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2212:	2080      	movs	r0, #128	; 0x80
    2214:	2382      	movs	r3, #130	; 0x82
    2216:	005b      	lsls	r3, r3, #1
    2218:	54d0      	strb	r0, [r2, r3]
	bank->STATUS_BK.reg     = 0;
    221a:	0149      	lsls	r1, r1, #5
    221c:	4b70      	ldr	r3, [pc, #448]	; (23e0 <_usb_d_dev_ep_enable+0x2d8>)
    221e:	1859      	adds	r1, r3, r1
    2220:	2300      	movs	r3, #0
    2222:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    2224:	2000      	movs	r0, #0
    2226:	e06e      	b.n	2306 <_usb_d_dev_ep_enable+0x1fe>
		return -USB_ERR_PARAM;
    2228:	2012      	movs	r0, #18
    222a:	4240      	negs	r0, r0
    222c:	e06b      	b.n	2306 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    222e:	2014      	movs	r0, #20
    2230:	4240      	negs	r0, r0
    2232:	e068      	b.n	2306 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    2234:	2014      	movs	r0, #20
    2236:	4240      	negs	r0, r0
    2238:	e065      	b.n	2306 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    223a:	2014      	movs	r0, #20
    223c:	4240      	negs	r0, r0
    223e:	e062      	b.n	2306 <_usb_d_dev_ep_enable+0x1fe>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2240:	2380      	movs	r3, #128	; 0x80
    2242:	005b      	lsls	r3, r3, #1
    2244:	4a63      	ldr	r2, [pc, #396]	; (23d4 <_usb_d_dev_ep_enable+0x2cc>)
    2246:	5cd5      	ldrb	r5, [r2, r3]
    2248:	b2ed      	uxtb	r5, r5
    224a:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    224c:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    224e:	009a      	lsls	r2, r3, #2
    2250:	18d2      	adds	r2, r2, r3
    2252:	0094      	lsls	r4, r2, #2
    2254:	4a60      	ldr	r2, [pc, #384]	; (23d8 <_usb_d_dev_ep_enable+0x2d0>)
    2256:	1912      	adds	r2, r2, r4
    2258:	3246      	adds	r2, #70	; 0x46
    225a:	7812      	ldrb	r2, [r2, #0]
    225c:	4694      	mov	ip, r2
    225e:	2aff      	cmp	r2, #255	; 0xff
    2260:	d0e2      	beq.n	2228 <_usb_d_dev_ep_enable+0x120>
    2262:	014a      	lsls	r2, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    2264:	4f5e      	ldr	r7, [pc, #376]	; (23e0 <_usb_d_dev_ep_enable+0x2d8>)
    2266:	18bf      	adds	r7, r7, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2268:	009c      	lsls	r4, r3, #2
    226a:	18e4      	adds	r4, r4, r3
    226c:	00a6      	lsls	r6, r4, #2
    226e:	4c5a      	ldr	r4, [pc, #360]	; (23d8 <_usb_d_dev_ep_enable+0x2d0>)
    2270:	19a4      	adds	r4, r4, r6
    2272:	3440      	adds	r4, #64	; 0x40
    2274:	79e6      	ldrb	r6, [r4, #7]
    2276:	2407      	movs	r4, #7
    2278:	4034      	ands	r4, r6
    227a:	2c01      	cmp	r4, #1
    227c:	d100      	bne.n	2280 <_usb_d_dev_ep_enable+0x178>
    227e:	e75d      	b.n	213c <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    2280:	2800      	cmp	r0, #0
    2282:	db8f      	blt.n	21a4 <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    2284:	0768      	lsls	r0, r5, #29
    2286:	d1d8      	bne.n	223a <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    2288:	4c53      	ldr	r4, [pc, #332]	; (23d8 <_usb_d_dev_ep_enable+0x2d0>)
    228a:	009e      	lsls	r6, r3, #2
    228c:	18f0      	adds	r0, r6, r3
    228e:	0080      	lsls	r0, r0, #2
    2290:	1820      	adds	r0, r4, r0
    2292:	3040      	adds	r0, #64	; 0x40
    2294:	79c0      	ldrb	r0, [r0, #7]
    2296:	0740      	lsls	r0, r0, #29
    2298:	0f40      	lsrs	r0, r0, #29
    229a:	4305      	orrs	r5, r0
    229c:	484d      	ldr	r0, [pc, #308]	; (23d4 <_usb_d_dev_ep_enable+0x2cc>)
    229e:	4684      	mov	ip, r0
    22a0:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    22a2:	2080      	movs	r0, #128	; 0x80
    22a4:	0040      	lsls	r0, r0, #1
    22a6:	5415      	strb	r5, [r2, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    22a8:	18f6      	adds	r6, r6, r3
    22aa:	00b6      	lsls	r6, r6, #2
    22ac:	19a4      	adds	r4, r4, r6
    22ae:	3444      	adds	r4, #68	; 0x44
    22b0:	8825      	ldrh	r5, [r4, #0]
    22b2:	03ab      	lsls	r3, r5, #14
    22b4:	4c49      	ldr	r4, [pc, #292]	; (23dc <_usb_d_dev_ep_enable+0x2d4>)
    22b6:	401c      	ands	r4, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    22b8:	3001      	adds	r0, #1
    22ba:	30ff      	adds	r0, #255	; 0xff
    22bc:	2307      	movs	r3, #7
    22be:	4285      	cmp	r5, r0
    22c0:	d814      	bhi.n	22ec <_usb_d_dev_ep_enable+0x1e4>
    22c2:	3801      	subs	r0, #1
    22c4:	38ff      	subs	r0, #255	; 0xff
    22c6:	3b01      	subs	r3, #1
    22c8:	4285      	cmp	r5, r0
    22ca:	d80f      	bhi.n	22ec <_usb_d_dev_ep_enable+0x1e4>
    22cc:	3b01      	subs	r3, #1
    22ce:	2d80      	cmp	r5, #128	; 0x80
    22d0:	d80c      	bhi.n	22ec <_usb_d_dev_ep_enable+0x1e4>
    22d2:	3b01      	subs	r3, #1
    22d4:	2d40      	cmp	r5, #64	; 0x40
    22d6:	d809      	bhi.n	22ec <_usb_d_dev_ep_enable+0x1e4>
    22d8:	3b01      	subs	r3, #1
    22da:	2d20      	cmp	r5, #32
    22dc:	d806      	bhi.n	22ec <_usb_d_dev_ep_enable+0x1e4>
    22de:	3b01      	subs	r3, #1
    22e0:	2d10      	cmp	r5, #16
    22e2:	d803      	bhi.n	22ec <_usb_d_dev_ep_enable+0x1e4>
    22e4:	38f8      	subs	r0, #248	; 0xf8
    22e6:	42a8      	cmp	r0, r5
    22e8:	4180      	sbcs	r0, r0
    22ea:	4243      	negs	r3, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22ec:	071b      	lsls	r3, r3, #28
    22ee:	4323      	orrs	r3, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    22f0:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    22f2:	2040      	movs	r0, #64	; 0x40
    22f4:	2306      	movs	r3, #6
    22f6:	33ff      	adds	r3, #255	; 0xff
    22f8:	54d0      	strb	r0, [r2, r3]
	bank->STATUS_BK.reg     = 0;
    22fa:	0149      	lsls	r1, r1, #5
    22fc:	4b38      	ldr	r3, [pc, #224]	; (23e0 <_usb_d_dev_ep_enable+0x2d8>)
    22fe:	1859      	adds	r1, r3, r1
    2300:	2300      	movs	r3, #0
    2302:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    2304:	2000      	movs	r0, #0
}
    2306:	bc04      	pop	{r2}
    2308:	4690      	mov	r8, r2
    230a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    230c:	24e0      	movs	r4, #224	; 0xe0
    230e:	05e4      	lsls	r4, r4, #23
    2310:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2312:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2314:	0485      	lsls	r5, r0, #18
    2316:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2318:	2407      	movs	r4, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    231a:	0724      	lsls	r4, r4, #28
    231c:	432c      	orrs	r4, r5
    231e:	617c      	str	r4, [r7, #20]
    2320:	2406      	movs	r4, #6
    2322:	34ff      	adds	r4, #255	; 0xff
    2324:	2540      	movs	r5, #64	; 0x40
    2326:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2328:	2682      	movs	r6, #130	; 0x82
    232a:	0076      	lsls	r6, r6, #1
    232c:	2780      	movs	r7, #128	; 0x80
    232e:	5597      	strb	r7, [r2, r6]
	bank->STATUS_BK.reg     = 0;
    2330:	4f2b      	ldr	r7, [pc, #172]	; (23e0 <_usb_d_dev_ep_enable+0x2d8>)
    2332:	0149      	lsls	r1, r1, #5
    2334:	1879      	adds	r1, r7, r1
    2336:	2200      	movs	r2, #0
    2338:	728a      	strb	r2, [r1, #10]
    233a:	768a      	strb	r2, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    233c:	210f      	movs	r1, #15
    233e:	4662      	mov	r2, ip
    2340:	4011      	ands	r1, r2
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2342:	009a      	lsls	r2, r3, #2
    2344:	18d2      	adds	r2, r2, r3
    2346:	0092      	lsls	r2, r2, #2
    2348:	4b23      	ldr	r3, [pc, #140]	; (23d8 <_usb_d_dev_ep_enable+0x2d0>)
    234a:	189a      	adds	r2, r3, r2
    234c:	6c12      	ldr	r2, [r2, #64]	; 0x40
	bank->ADDR.reg          = addr;
    234e:	014b      	lsls	r3, r1, #5
    2350:	51da      	str	r2, [r3, r7]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2352:	18f9      	adds	r1, r7, r3
    2354:	684a      	ldr	r2, [r1, #4]
    2356:	0480      	lsls	r0, r0, #18
    2358:	0907      	lsrs	r7, r0, #4
    235a:	4822      	ldr	r0, [pc, #136]	; (23e4 <_usb_d_dev_ep_enable+0x2dc>)
    235c:	4010      	ands	r0, r2
    235e:	4338      	orrs	r0, r7
    2360:	6048      	str	r0, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2362:	684a      	ldr	r2, [r1, #4]
    2364:	0b92      	lsrs	r2, r2, #14
    2366:	0392      	lsls	r2, r2, #14
    2368:	604a      	str	r2, [r1, #4]
    236a:	4a1a      	ldr	r2, [pc, #104]	; (23d4 <_usb_d_dev_ep_enable+0x2cc>)
    236c:	189a      	adds	r2, r3, r2
    236e:	21b0      	movs	r1, #176	; 0xb0
    2370:	5591      	strb	r1, [r2, r6]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2372:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2374:	4a1c      	ldr	r2, [pc, #112]	; (23e8 <_usb_d_dev_ep_enable+0x2e0>)
    2376:	4694      	mov	ip, r2
    2378:	4463      	add	r3, ip
    237a:	2210      	movs	r2, #16
    237c:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    237e:	2000      	movs	r0, #0
    2380:	e7c1      	b.n	2306 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2382:	24a0      	movs	r4, #160	; 0xa0
    2384:	05e4      	lsls	r4, r4, #23
    2386:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2388:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    238a:	0485      	lsls	r5, r0, #18
    238c:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    238e:	2405      	movs	r4, #5
    2390:	e7c3      	b.n	231a <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2392:	24c0      	movs	r4, #192	; 0xc0
    2394:	05a4      	lsls	r4, r4, #22
    2396:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2398:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    239a:	0485      	lsls	r5, r0, #18
    239c:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    239e:	2403      	movs	r4, #3
    23a0:	e7bb      	b.n	231a <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    23a2:	24c0      	movs	r4, #192	; 0xc0
    23a4:	05e4      	lsls	r4, r4, #23
    23a6:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    23a8:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    23aa:	0485      	lsls	r5, r0, #18
    23ac:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    23ae:	2406      	movs	r4, #6
    23b0:	e7b3      	b.n	231a <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    23b2:	2480      	movs	r4, #128	; 0x80
    23b4:	05e4      	lsls	r4, r4, #23
    23b6:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    23b8:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    23ba:	0485      	lsls	r5, r0, #18
    23bc:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    23be:	2404      	movs	r4, #4
    23c0:	e7ab      	b.n	231a <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    23c2:	2480      	movs	r4, #128	; 0x80
    23c4:	05a4      	lsls	r4, r4, #22
    23c6:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    23c8:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    23ca:	0485      	lsls	r5, r0, #18
    23cc:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    23ce:	2402      	movs	r4, #2
    23d0:	e7a3      	b.n	231a <_usb_d_dev_ep_enable+0x212>
    23d2:	46c0      	nop			; (mov r8, r8)
    23d4:	41005000 	.word	0x41005000
    23d8:	20000768 	.word	0x20000768
    23dc:	0fffc000 	.word	0x0fffc000
    23e0:	200006e8 	.word	0x200006e8
    23e4:	f0003fff 	.word	0xf0003fff
    23e8:	41005109 	.word	0x41005109

000023ec <_usb_d_dev_ep_stall>:
{
    23ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    23ee:	230f      	movs	r3, #15
    23f0:	4003      	ands	r3, r0
    23f2:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    23f4:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    23f6:	2b00      	cmp	r3, #0
    23f8:	d009      	beq.n	240e <_usb_d_dev_ep_stall+0x22>
    23fa:	001a      	movs	r2, r3
    23fc:	2800      	cmp	r0, #0
    23fe:	db04      	blt.n	240a <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    2400:	2b04      	cmp	r3, #4
    2402:	d905      	bls.n	2410 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    2404:	2012      	movs	r0, #18
    2406:	4240      	negs	r0, r0
    2408:	e019      	b.n	243e <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    240a:	1d1a      	adds	r2, r3, #4
    240c:	e7f8      	b.n	2400 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    240e:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    2410:	2901      	cmp	r1, #1
    2412:	d015      	beq.n	2440 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2414:	2900      	cmp	r1, #0
    2416:	d036      	beq.n	2486 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2418:	0093      	lsls	r3, r2, #2
    241a:	189b      	adds	r3, r3, r2
    241c:	009b      	lsls	r3, r3, #2
    241e:	4a47      	ldr	r2, [pc, #284]	; (253c <_usb_d_dev_ep_stall+0x150>)
    2420:	18d2      	adds	r2, r2, r3
    2422:	3246      	adds	r2, #70	; 0x46
    2424:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2426:	230f      	movs	r3, #15
    2428:	4013      	ands	r3, r2
    242a:	015b      	lsls	r3, r3, #5
    242c:	4a44      	ldr	r2, [pc, #272]	; (2540 <_usb_d_dev_ep_stall+0x154>)
    242e:	4694      	mov	ip, r2
    2430:	4463      	add	r3, ip
    2432:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2434:	2310      	movs	r3, #16
    2436:	40a3      	lsls	r3, r4
    2438:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    243a:	1e43      	subs	r3, r0, #1
    243c:	4198      	sbcs	r0, r3
}
    243e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2440:	2510      	movs	r5, #16
    2442:	40a5      	lsls	r5, r4
    2444:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2446:	493d      	ldr	r1, [pc, #244]	; (253c <_usb_d_dev_ep_stall+0x150>)
    2448:	0090      	lsls	r0, r2, #2
    244a:	1883      	adds	r3, r0, r2
    244c:	009b      	lsls	r3, r3, #2
    244e:	18cb      	adds	r3, r1, r3
    2450:	3346      	adds	r3, #70	; 0x46
    2452:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2454:	230f      	movs	r3, #15
    2456:	4033      	ands	r3, r6
    2458:	015e      	lsls	r6, r3, #5
    245a:	4f39      	ldr	r7, [pc, #228]	; (2540 <_usb_d_dev_ep_stall+0x154>)
    245c:	46bc      	mov	ip, r7
    245e:	4466      	add	r6, ip
    2460:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2462:	2520      	movs	r5, #32
    2464:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    2466:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2468:	015b      	lsls	r3, r3, #5
    246a:	4d36      	ldr	r5, [pc, #216]	; (2544 <_usb_d_dev_ep_stall+0x158>)
    246c:	46ac      	mov	ip, r5
    246e:	4463      	add	r3, ip
    2470:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    2472:	1882      	adds	r2, r0, r2
    2474:	0092      	lsls	r2, r2, #2
    2476:	188a      	adds	r2, r1, r2
    2478:	3240      	adds	r2, #64	; 0x40
    247a:	79d3      	ldrb	r3, [r2, #7]
    247c:	2108      	movs	r1, #8
    247e:	430b      	orrs	r3, r1
    2480:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    2482:	2000      	movs	r0, #0
    2484:	e7db      	b.n	243e <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    2486:	0093      	lsls	r3, r2, #2
    2488:	189b      	adds	r3, r3, r2
    248a:	0099      	lsls	r1, r3, #2
    248c:	4b2b      	ldr	r3, [pc, #172]	; (253c <_usb_d_dev_ep_stall+0x150>)
    248e:	185b      	adds	r3, r3, r1
    2490:	3346      	adds	r3, #70	; 0x46
    2492:	781b      	ldrb	r3, [r3, #0]
    2494:	210f      	movs	r1, #15
    2496:	400b      	ands	r3, r1
    2498:	015d      	lsls	r5, r3, #5
    249a:	492b      	ldr	r1, [pc, #172]	; (2548 <_usb_d_dev_ep_stall+0x15c>)
    249c:	468c      	mov	ip, r1
    249e:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    24a0:	2183      	movs	r1, #131	; 0x83
    24a2:	0049      	lsls	r1, r1, #1
    24a4:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    24a6:	39f6      	subs	r1, #246	; 0xf6
    24a8:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    24aa:	2000      	movs	r0, #0
	if (!is_stalled) {
    24ac:	420e      	tst	r6, r1
    24ae:	d0c6      	beq.n	243e <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    24b0:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    24b2:	3005      	adds	r0, #5
    24b4:	30ff      	adds	r0, #255	; 0xff
    24b6:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    24b8:	2120      	movs	r1, #32
    24ba:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    24bc:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    24be:	015b      	lsls	r3, r3, #5
    24c0:	4e22      	ldr	r6, [pc, #136]	; (254c <_usb_d_dev_ep_stall+0x160>)
    24c2:	46b4      	mov	ip, r6
    24c4:	4463      	add	r3, ip
    24c6:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    24c8:	2308      	movs	r3, #8
    24ca:	33ff      	adds	r3, #255	; 0xff
    24cc:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    24ce:	420b      	tst	r3, r1
    24d0:	d009      	beq.n	24e6 <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    24d2:	2308      	movs	r3, #8
    24d4:	33ff      	adds	r3, #255	; 0xff
    24d6:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    24d8:	3b07      	subs	r3, #7
    24da:	3bff      	subs	r3, #255	; 0xff
    24dc:	40a3      	lsls	r3, r4
    24de:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    24e0:	2182      	movs	r1, #130	; 0x82
    24e2:	0049      	lsls	r1, r1, #1
    24e4:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    24e6:	0093      	lsls	r3, r2, #2
    24e8:	189b      	adds	r3, r3, r2
    24ea:	0099      	lsls	r1, r3, #2
    24ec:	4b13      	ldr	r3, [pc, #76]	; (253c <_usb_d_dev_ep_stall+0x150>)
    24ee:	185b      	adds	r3, r3, r1
    24f0:	3340      	adds	r3, #64	; 0x40
    24f2:	79d9      	ldrb	r1, [r3, #7]
    24f4:	2307      	movs	r3, #7
    24f6:	400b      	ands	r3, r1
    24f8:	2b01      	cmp	r3, #1
    24fa:	d00b      	beq.n	2514 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    24fc:	0093      	lsls	r3, r2, #2
    24fe:	189a      	adds	r2, r3, r2
    2500:	0092      	lsls	r2, r2, #2
    2502:	4b0e      	ldr	r3, [pc, #56]	; (253c <_usb_d_dev_ep_stall+0x150>)
    2504:	189b      	adds	r3, r3, r2
    2506:	3340      	adds	r3, #64	; 0x40
    2508:	79da      	ldrb	r2, [r3, #7]
    250a:	2108      	movs	r1, #8
    250c:	438a      	bics	r2, r1
    250e:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2510:	2000      	movs	r0, #0
    2512:	e794      	b.n	243e <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2514:	3306      	adds	r3, #6
    2516:	33ff      	adds	r3, #255	; 0xff
    2518:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    251a:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    251c:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    251e:	4219      	tst	r1, r3
    2520:	d000      	beq.n	2524 <_usb_d_dev_ep_stall+0x138>
    2522:	e78c      	b.n	243e <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    2524:	0093      	lsls	r3, r2, #2
    2526:	189a      	adds	r2, r3, r2
    2528:	0092      	lsls	r2, r2, #2
    252a:	4b04      	ldr	r3, [pc, #16]	; (253c <_usb_d_dev_ep_stall+0x150>)
    252c:	189b      	adds	r3, r3, r2
    252e:	3340      	adds	r3, #64	; 0x40
    2530:	79da      	ldrb	r2, [r3, #7]
    2532:	2108      	movs	r1, #8
    2534:	438a      	bics	r2, r1
    2536:	71da      	strb	r2, [r3, #7]
    2538:	e781      	b.n	243e <_usb_d_dev_ep_stall+0x52>
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	20000768 	.word	0x20000768
    2540:	41005100 	.word	0x41005100
    2544:	41005109 	.word	0x41005109
    2548:	41005000 	.word	0x41005000
    254c:	41005108 	.word	0x41005108

00002550 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    2550:	b570      	push	{r4, r5, r6, lr}
    2552:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    2554:	230f      	movs	r3, #15
    2556:	4018      	ands	r0, r3
    2558:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    255a:	4b16      	ldr	r3, [pc, #88]	; (25b4 <_usb_d_dev_ep_read_req+0x64>)
    255c:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    255e:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    2560:	685b      	ldr	r3, [r3, #4]
    2562:	049b      	lsls	r3, r3, #18
    2564:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    2566:	2804      	cmp	r0, #4
    2568:	d81a      	bhi.n	25a0 <_usb_d_dev_ep_read_req+0x50>
    256a:	2d00      	cmp	r5, #0
    256c:	d01b      	beq.n	25a6 <_usb_d_dev_ep_read_req+0x56>
    256e:	4b12      	ldr	r3, [pc, #72]	; (25b8 <_usb_d_dev_ep_read_req+0x68>)
    2570:	469c      	mov	ip, r3
    2572:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2574:	2380      	movs	r3, #128	; 0x80
    2576:	005b      	lsls	r3, r3, #1
    2578:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    257a:	2b11      	cmp	r3, #17
    257c:	d116      	bne.n	25ac <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    257e:	2308      	movs	r3, #8
    2580:	33ff      	adds	r3, #255	; 0xff
    2582:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    2584:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    2586:	06db      	lsls	r3, r3, #27
    2588:	d400      	bmi.n	258c <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    258a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    258c:	2208      	movs	r2, #8
    258e:	0028      	movs	r0, r5
    2590:	4b0a      	ldr	r3, [pc, #40]	; (25bc <_usb_d_dev_ep_read_req+0x6c>)
    2592:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2594:	2210      	movs	r2, #16
    2596:	2308      	movs	r3, #8
    2598:	33ff      	adds	r3, #255	; 0xff
    259a:	54e2      	strb	r2, [r4, r3]
	return bytes;
    259c:	0030      	movs	r0, r6
    259e:	e7f4      	b.n	258a <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    25a0:	2012      	movs	r0, #18
    25a2:	4240      	negs	r0, r0
    25a4:	e7f1      	b.n	258a <_usb_d_dev_ep_read_req+0x3a>
    25a6:	2012      	movs	r0, #18
    25a8:	4240      	negs	r0, r0
    25aa:	e7ee      	b.n	258a <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    25ac:	2013      	movs	r0, #19
    25ae:	4240      	negs	r0, r0
    25b0:	e7eb      	b.n	258a <_usb_d_dev_ep_read_req+0x3a>
    25b2:	46c0      	nop			; (mov r8, r8)
    25b4:	200006e8 	.word	0x200006e8
    25b8:	41005000 	.word	0x41005000
    25bc:	00003829 	.word	0x00003829

000025c0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    25c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25c2:	46de      	mov	lr, fp
    25c4:	4657      	mov	r7, sl
    25c6:	464e      	mov	r6, r9
    25c8:	4645      	mov	r5, r8
    25ca:	b5e0      	push	{r5, r6, r7, lr}
    25cc:	b085      	sub	sp, #20
    25ce:	0007      	movs	r7, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    25d0:	7a05      	ldrb	r5, [r0, #8]
    25d2:	230f      	movs	r3, #15
    25d4:	402b      	ands	r3, r5
    25d6:	b26d      	sxtb	r5, r5
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    25d8:	2b00      	cmp	r3, #0
    25da:	d100      	bne.n	25de <_usb_d_dev_ep_trans+0x1e>
    25dc:	e0d0      	b.n	2780 <_usb_d_dev_ep_trans+0x1c0>
    25de:	001e      	movs	r6, r3
    25e0:	2d00      	cmp	r5, #0
    25e2:	db39      	blt.n	2658 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    25e4:	0034      	movs	r4, r6
    25e6:	4a72      	ldr	r2, [pc, #456]	; (27b0 <_usb_d_dev_ep_trans+0x1f0>)
    25e8:	2120      	movs	r1, #32
    25ea:	4688      	mov	r8, r1
    25ec:	4490      	add	r8, r2
    25ee:	1c71      	adds	r1, r6, #1
    25f0:	0088      	lsls	r0, r1, #2
    25f2:	1840      	adds	r0, r0, r1
    25f4:	0080      	lsls	r0, r0, #2
    25f6:	4480      	add	r8, r0
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    25f8:	00b1      	lsls	r1, r6, #2
    25fa:	1989      	adds	r1, r1, r6
    25fc:	0089      	lsls	r1, r1, #2
    25fe:	1852      	adds	r2, r2, r1
    2600:	3244      	adds	r2, #68	; 0x44
    2602:	8812      	ldrh	r2, [r2, #0]
    2604:	496b      	ldr	r1, [pc, #428]	; (27b4 <_usb_d_dev_ep_trans+0x1f4>)
    2606:	428a      	cmp	r2, r1
    2608:	d028      	beq.n	265c <_usb_d_dev_ep_trans+0x9c>
    260a:	1e56      	subs	r6, r2, #1
    260c:	b2b6      	uxth	r6, r6
	bool     size_n_aligned = (trans->size & size_mask);
    260e:	6879      	ldr	r1, [r7, #4]
    2610:	400e      	ands	r6, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    2612:	2b04      	cmp	r3, #4
    2614:	d900      	bls.n	2618 <_usb_d_dev_ep_trans+0x58>
    2616:	e09e      	b.n	2756 <_usb_d_dev_ep_trans+0x196>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    2618:	683b      	ldr	r3, [r7, #0]
    261a:	4867      	ldr	r0, [pc, #412]	; (27b8 <_usb_d_dev_ep_trans+0x1f8>)
    261c:	4283      	cmp	r3, r0
    261e:	d91f      	bls.n	2660 <_usb_d_dev_ep_trans+0xa0>
    2620:	1858      	adds	r0, r3, r1
    2622:	9001      	str	r0, [sp, #4]
    2624:	4865      	ldr	r0, [pc, #404]	; (27bc <_usb_d_dev_ep_trans+0x1fc>)
    2626:	4684      	mov	ip, r0
    2628:	9801      	ldr	r0, [sp, #4]
    262a:	4560      	cmp	r0, ip
    262c:	d818      	bhi.n	2660 <_usb_d_dev_ep_trans+0xa0>
    262e:	079b      	lsls	r3, r3, #30
    2630:	d116      	bne.n	2660 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    2632:	2d00      	cmp	r5, #0
    2634:	db30      	blt.n	2698 <_usb_d_dev_ep_trans+0xd8>
    2636:	428a      	cmp	r2, r1
    2638:	d900      	bls.n	263c <_usb_d_dev_ep_trans+0x7c>
    263a:	e0ad      	b.n	2798 <_usb_d_dev_ep_trans+0x1d8>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    263c:	2e00      	cmp	r6, #0
    263e:	d02e      	beq.n	269e <_usb_d_dev_ep_trans+0xde>
		if (!ept->cache) {
    2640:	00a3      	lsls	r3, r4, #2
    2642:	191b      	adds	r3, r3, r4
    2644:	009b      	lsls	r3, r3, #2
    2646:	4a5a      	ldr	r2, [pc, #360]	; (27b0 <_usb_d_dev_ep_trans+0x1f0>)
    2648:	18d3      	adds	r3, r2, r3
    264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    264c:	2b00      	cmp	r3, #0
    264e:	d100      	bne.n	2652 <_usb_d_dev_ep_trans+0x92>
    2650:	e087      	b.n	2762 <_usb_d_dev_ep_trans+0x1a2>
	bool use_cache = false;
    2652:	2300      	movs	r3, #0
    2654:	4699      	mov	r9, r3
    2656:	e00e      	b.n	2676 <_usb_d_dev_ep_trans+0xb6>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2658:	1d1e      	adds	r6, r3, #4
    265a:	e7c3      	b.n	25e4 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    265c:	0016      	movs	r6, r2
    265e:	e7d6      	b.n	260e <_usb_d_dev_ep_trans+0x4e>
		if (!ept->cache) {
    2660:	00a3      	lsls	r3, r4, #2
    2662:	191b      	adds	r3, r3, r4
    2664:	009b      	lsls	r3, r3, #2
    2666:	4a52      	ldr	r2, [pc, #328]	; (27b0 <_usb_d_dev_ep_trans+0x1f0>)
    2668:	18d3      	adds	r3, r2, r3
    266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    266c:	2b00      	cmp	r3, #0
    266e:	d100      	bne.n	2672 <_usb_d_dev_ep_trans+0xb2>
    2670:	e074      	b.n	275c <_usb_d_dev_ep_trans+0x19c>
		use_cache = true;
    2672:	2301      	movs	r3, #1
    2674:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    2676:	00a3      	lsls	r3, r4, #2
    2678:	191b      	adds	r3, r3, r4
    267a:	009a      	lsls	r2, r3, #2
    267c:	4b4c      	ldr	r3, [pc, #304]	; (27b0 <_usb_d_dev_ep_trans+0x1f0>)
    267e:	189b      	adds	r3, r3, r2
    2680:	3340      	adds	r3, #64	; 0x40
    2682:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    2684:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    2686:	071b      	lsls	r3, r3, #28
    2688:	d50c      	bpl.n	26a4 <_usb_d_dev_ep_trans+0xe4>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    268a:	b005      	add	sp, #20
    268c:	bc3c      	pop	{r2, r3, r4, r5}
    268e:	4690      	mov	r8, r2
    2690:	4699      	mov	r9, r3
    2692:	46a2      	mov	sl, r4
    2694:	46ab      	mov	fp, r5
    2696:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    2698:	2300      	movs	r3, #0
    269a:	4699      	mov	r9, r3
    269c:	e7eb      	b.n	2676 <_usb_d_dev_ep_trans+0xb6>
    269e:	2300      	movs	r3, #0
    26a0:	4699      	mov	r9, r3
    26a2:	e7e8      	b.n	2676 <_usb_d_dev_ep_trans+0xb6>
	atomic_enter_critical(&flags);
    26a4:	a803      	add	r0, sp, #12
    26a6:	4b46      	ldr	r3, [pc, #280]	; (27c0 <_usb_d_dev_ep_trans+0x200>)
    26a8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    26aa:	00a3      	lsls	r3, r4, #2
    26ac:	191b      	adds	r3, r3, r4
    26ae:	009a      	lsls	r2, r3, #2
    26b0:	4b3f      	ldr	r3, [pc, #252]	; (27b0 <_usb_d_dev_ep_trans+0x1f0>)
    26b2:	189b      	adds	r3, r3, r2
    26b4:	3340      	adds	r3, #64	; 0x40
    26b6:	79db      	ldrb	r3, [r3, #7]
    26b8:	065b      	lsls	r3, r3, #25
    26ba:	d441      	bmi.n	2740 <_usb_d_dev_ep_trans+0x180>
	ept->flags.bits.is_busy = 1;
    26bc:	00a3      	lsls	r3, r4, #2
    26be:	191b      	adds	r3, r3, r4
    26c0:	009b      	lsls	r3, r3, #2
    26c2:	4a3b      	ldr	r2, [pc, #236]	; (27b0 <_usb_d_dev_ep_trans+0x1f0>)
    26c4:	4693      	mov	fp, r2
    26c6:	449b      	add	fp, r3
    26c8:	2340      	movs	r3, #64	; 0x40
    26ca:	445b      	add	r3, fp
    26cc:	469a      	mov	sl, r3
    26ce:	79db      	ldrb	r3, [r3, #7]
    26d0:	2240      	movs	r2, #64	; 0x40
    26d2:	4313      	orrs	r3, r2
    26d4:	4652      	mov	r2, sl
    26d6:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    26d8:	a803      	add	r0, sp, #12
    26da:	4b3a      	ldr	r3, [pc, #232]	; (27c4 <_usb_d_dev_ep_trans+0x204>)
    26dc:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    26de:	465b      	mov	r3, fp
    26e0:	683a      	ldr	r2, [r7, #0]
    26e2:	635a      	str	r2, [r3, #52]	; 0x34
	ept->trans_size  = trans->size;
    26e4:	687a      	ldr	r2, [r7, #4]
    26e6:	639a      	str	r2, [r3, #56]	; 0x38
	ept->trans_count = 0;
    26e8:	2300      	movs	r3, #0
    26ea:	465a      	mov	r2, fp
    26ec:	63d3      	str	r3, [r2, #60]	; 0x3c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    26ee:	0fea      	lsrs	r2, r5, #31
	ept->flags.bits.dir       = dir;
    26f0:	01d2      	lsls	r2, r2, #7
    26f2:	4653      	mov	r3, sl
    26f4:	79d9      	ldrb	r1, [r3, #7]
    26f6:	237f      	movs	r3, #127	; 0x7f
    26f8:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    26fa:	4649      	mov	r1, r9
    26fc:	0149      	lsls	r1, r1, #5
    26fe:	4313      	orrs	r3, r2
    2700:	2220      	movs	r2, #32
    2702:	4393      	bics	r3, r2
    2704:	430b      	orrs	r3, r1
    2706:	4652      	mov	r2, sl
    2708:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    270a:	7a7b      	ldrb	r3, [r7, #9]
    270c:	2200      	movs	r2, #0
    270e:	2b00      	cmp	r3, #0
    2710:	d002      	beq.n	2718 <_usb_d_dev_ep_trans+0x158>
    2712:	4272      	negs	r2, r6
    2714:	4172      	adcs	r2, r6
    2716:	b2d2      	uxtb	r2, r2
    2718:	00a3      	lsls	r3, r4, #2
    271a:	191c      	adds	r4, r3, r4
    271c:	00a4      	lsls	r4, r4, #2
    271e:	4b24      	ldr	r3, [pc, #144]	; (27b0 <_usb_d_dev_ep_trans+0x1f0>)
    2720:	191b      	adds	r3, r3, r4
    2722:	3340      	adds	r3, #64	; 0x40
    2724:	0112      	lsls	r2, r2, #4
    2726:	79de      	ldrb	r6, [r3, #7]
    2728:	2110      	movs	r1, #16
    272a:	438e      	bics	r6, r1
    272c:	4316      	orrs	r6, r2
    272e:	71de      	strb	r6, [r3, #7]
	if (dir) {
    2730:	2d00      	cmp	r5, #0
    2732:	db0a      	blt.n	274a <_usb_d_dev_ep_trans+0x18a>
		_usb_d_dev_out_next(ept, false);
    2734:	2100      	movs	r1, #0
    2736:	4640      	mov	r0, r8
    2738:	4b23      	ldr	r3, [pc, #140]	; (27c8 <_usb_d_dev_ep_trans+0x208>)
    273a:	4798      	blx	r3
	return ERR_NONE;
    273c:	2000      	movs	r0, #0
    273e:	e7a4      	b.n	268a <_usb_d_dev_ep_trans+0xca>
		atomic_leave_critical(&flags);
    2740:	a803      	add	r0, sp, #12
    2742:	4b20      	ldr	r3, [pc, #128]	; (27c4 <_usb_d_dev_ep_trans+0x204>)
    2744:	4798      	blx	r3
		return USB_BUSY;
    2746:	2001      	movs	r0, #1
    2748:	e79f      	b.n	268a <_usb_d_dev_ep_trans+0xca>
		_usb_d_dev_in_next(ept, false);
    274a:	2100      	movs	r1, #0
    274c:	4640      	mov	r0, r8
    274e:	4b1f      	ldr	r3, [pc, #124]	; (27cc <_usb_d_dev_ep_trans+0x20c>)
    2750:	4798      	blx	r3
	return ERR_NONE;
    2752:	2000      	movs	r0, #0
    2754:	e799      	b.n	268a <_usb_d_dev_ep_trans+0xca>
		return -USB_ERR_PARAM;
    2756:	2012      	movs	r0, #18
    2758:	4240      	negs	r0, r0
    275a:	e796      	b.n	268a <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_FUNC;
    275c:	2013      	movs	r0, #19
    275e:	4240      	negs	r0, r0
    2760:	e793      	b.n	268a <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_PARAM;
    2762:	2012      	movs	r0, #18
    2764:	4240      	negs	r0, r0
    2766:	e790      	b.n	268a <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_FUNC;
    2768:	2013      	movs	r0, #19
    276a:	4240      	negs	r0, r0
    276c:	e78d      	b.n	268a <_usb_d_dev_ep_trans+0xca>
	bool     size_n_aligned = (trans->size & size_mask);
    276e:	6879      	ldr	r1, [r7, #4]
    2770:	058e      	lsls	r6, r1, #22
    2772:	0db6      	lsrs	r6, r6, #22
	return &dev_inst.ep[ep_index];
    2774:	4b0e      	ldr	r3, [pc, #56]	; (27b0 <_usb_d_dev_ep_trans+0x1f0>)
    2776:	2034      	movs	r0, #52	; 0x34
    2778:	4680      	mov	r8, r0
    277a:	4498      	add	r8, r3
    277c:	2400      	movs	r4, #0
    277e:	e74b      	b.n	2618 <_usb_d_dev_ep_trans+0x58>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2780:	2244      	movs	r2, #68	; 0x44
    2782:	490b      	ldr	r1, [pc, #44]	; (27b0 <_usb_d_dev_ep_trans+0x1f0>)
    2784:	5a8a      	ldrh	r2, [r1, r2]
    2786:	490b      	ldr	r1, [pc, #44]	; (27b4 <_usb_d_dev_ep_trans+0x1f4>)
    2788:	428a      	cmp	r2, r1
    278a:	d0f0      	beq.n	276e <_usb_d_dev_ep_trans+0x1ae>
	return &dev_inst.ep[ep_index];
    278c:	4908      	ldr	r1, [pc, #32]	; (27b0 <_usb_d_dev_ep_trans+0x1f0>)
    278e:	2034      	movs	r0, #52	; 0x34
    2790:	4680      	mov	r8, r0
    2792:	4488      	add	r8, r1
    2794:	2400      	movs	r4, #0
    2796:	e738      	b.n	260a <_usb_d_dev_ep_trans+0x4a>
		if (!ept->cache) {
    2798:	00a3      	lsls	r3, r4, #2
    279a:	191b      	adds	r3, r3, r4
    279c:	009b      	lsls	r3, r3, #2
    279e:	4a04      	ldr	r2, [pc, #16]	; (27b0 <_usb_d_dev_ep_trans+0x1f0>)
    27a0:	18d3      	adds	r3, r2, r3
    27a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    27a4:	2b00      	cmp	r3, #0
    27a6:	d0df      	beq.n	2768 <_usb_d_dev_ep_trans+0x1a8>
    27a8:	2301      	movs	r3, #1
    27aa:	4699      	mov	r9, r3
    27ac:	e763      	b.n	2676 <_usb_d_dev_ep_trans+0xb6>
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	20000768 	.word	0x20000768
    27b4:	000003ff 	.word	0x000003ff
    27b8:	1fffffff 	.word	0x1fffffff
    27bc:	20007fff 	.word	0x20007fff
    27c0:	00002ac9 	.word	0x00002ac9
    27c4:	00002ad7 	.word	0x00002ad7
    27c8:	00001b8d 	.word	0x00001b8d
    27cc:	000019e1 	.word	0x000019e1

000027d0 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    27d0:	1e0b      	subs	r3, r1, #0
    27d2:	d006      	beq.n	27e2 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    27d4:	2801      	cmp	r0, #1
    27d6:	d006      	beq.n	27e6 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    27d8:	2800      	cmp	r0, #0
    27da:	d101      	bne.n	27e0 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    27dc:	4a03      	ldr	r2, [pc, #12]	; (27ec <_usb_d_dev_register_callback+0x1c>)
    27de:	6213      	str	r3, [r2, #32]
	}
}
    27e0:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    27e2:	4b03      	ldr	r3, [pc, #12]	; (27f0 <_usb_d_dev_register_callback+0x20>)
    27e4:	e7f6      	b.n	27d4 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    27e6:	4a01      	ldr	r2, [pc, #4]	; (27ec <_usb_d_dev_register_callback+0x1c>)
    27e8:	6253      	str	r3, [r2, #36]	; 0x24
    27ea:	e7f9      	b.n	27e0 <_usb_d_dev_register_callback+0x10>
    27ec:	20000768 	.word	0x20000768
    27f0:	0000173d 	.word	0x0000173d

000027f4 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    27f4:	1e0b      	subs	r3, r1, #0
    27f6:	d008      	beq.n	280a <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    27f8:	2800      	cmp	r0, #0
    27fa:	d008      	beq.n	280e <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    27fc:	2801      	cmp	r0, #1
    27fe:	d009      	beq.n	2814 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2800:	2802      	cmp	r0, #2
    2802:	d106      	bne.n	2812 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2804:	4a05      	ldr	r2, [pc, #20]	; (281c <_usb_d_dev_register_ep_callback+0x28>)
    2806:	6313      	str	r3, [r2, #48]	; 0x30
	}
}
    2808:	e003      	b.n	2812 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    280a:	4b05      	ldr	r3, [pc, #20]	; (2820 <_usb_d_dev_register_ep_callback+0x2c>)
    280c:	e7f4      	b.n	27f8 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    280e:	4a03      	ldr	r2, [pc, #12]	; (281c <_usb_d_dev_register_ep_callback+0x28>)
    2810:	6293      	str	r3, [r2, #40]	; 0x28
}
    2812:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2814:	4a01      	ldr	r2, [pc, #4]	; (281c <_usb_d_dev_register_ep_callback+0x28>)
    2816:	62d3      	str	r3, [r2, #44]	; 0x2c
    2818:	e7fb      	b.n	2812 <_usb_d_dev_register_ep_callback+0x1e>
    281a:	46c0      	nop			; (mov r8, r8)
    281c:	20000768 	.word	0x20000768
    2820:	0000173d 	.word	0x0000173d

00002824 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    2824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    2826:	4b8b      	ldr	r3, [pc, #556]	; (2a54 <USB_Handler+0x230>)
    2828:	8c1e      	ldrh	r6, [r3, #32]
    282a:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    282c:	2e00      	cmp	r6, #0
    282e:	d003      	beq.n	2838 <USB_Handler+0x14>
    2830:	4c89      	ldr	r4, [pc, #548]	; (2a58 <USB_Handler+0x234>)
    2832:	3434      	adds	r4, #52	; 0x34
	uint32_t lpm_variable = 0;
    2834:	2500      	movs	r5, #0
    2836:	e0ca      	b.n	29ce <USB_Handler+0x1aa>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2838:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    283a:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    283c:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    283e:	075a      	lsls	r2, r3, #29
    2840:	d418      	bmi.n	2874 <USB_Handler+0x50>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    2842:	059a      	lsls	r2, r3, #22
    2844:	d41d      	bmi.n	2882 <USB_Handler+0x5e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2846:	061a      	lsls	r2, r3, #24
    2848:	d44f      	bmi.n	28ea <USB_Handler+0xc6>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    284a:	2270      	movs	r2, #112	; 0x70
    284c:	421a      	tst	r2, r3
    284e:	d155      	bne.n	28fc <USB_Handler+0xd8>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    2850:	071a      	lsls	r2, r3, #28
    2852:	d500      	bpl.n	2856 <USB_Handler+0x32>
    2854:	e06e      	b.n	2934 <USB_Handler+0x110>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    2856:	07db      	lsls	r3, r3, #31
    2858:	d5ea      	bpl.n	2830 <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    285a:	4b7e      	ldr	r3, [pc, #504]	; (2a54 <USB_Handler+0x230>)
    285c:	4a7f      	ldr	r2, [pc, #508]	; (2a5c <USB_Handler+0x238>)
    285e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2860:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2862:	3a92      	subs	r2, #146	; 0x92
    2864:	3aff      	subs	r2, #255	; 0xff
    2866:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2868:	4b7b      	ldr	r3, [pc, #492]	; (2a58 <USB_Handler+0x234>)
    286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    286c:	2100      	movs	r1, #0
    286e:	2004      	movs	r0, #4
    2870:	4798      	blx	r3
    2872:	e005      	b.n	2880 <USB_Handler+0x5c>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2874:	2204      	movs	r2, #4
    2876:	4b77      	ldr	r3, [pc, #476]	; (2a54 <USB_Handler+0x230>)
    2878:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    287a:	4b77      	ldr	r3, [pc, #476]	; (2a58 <USB_Handler+0x234>)
    287c:	6a1b      	ldr	r3, [r3, #32]
    287e:	4798      	blx	r3

	_usb_d_dev_handler();
}
    2880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2882:	4b74      	ldr	r3, [pc, #464]	; (2a54 <USB_Handler+0x230>)
    2884:	4a75      	ldr	r2, [pc, #468]	; (2a5c <USB_Handler+0x238>)
    2886:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2888:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    288a:	3a92      	subs	r2, #146	; 0x92
    288c:	3aff      	subs	r2, #255	; 0xff
    288e:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2890:	4b73      	ldr	r3, [pc, #460]	; (2a60 <USB_Handler+0x23c>)
    2892:	891b      	ldrh	r3, [r3, #8]
    2894:	071b      	lsls	r3, r3, #28
    2896:	0f1b      	lsrs	r3, r3, #28
    2898:	2b03      	cmp	r3, #3
    289a:	d024      	beq.n	28e6 <USB_Handler+0xc2>
    289c:	4b70      	ldr	r3, [pc, #448]	; (2a60 <USB_Handler+0x23c>)
    289e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    28a0:	071b      	lsls	r3, r3, #28
    28a2:	0f1b      	lsrs	r3, r3, #28
    28a4:	2b03      	cmp	r3, #3
    28a6:	d012      	beq.n	28ce <USB_Handler+0xaa>
    28a8:	2348      	movs	r3, #72	; 0x48
    28aa:	4a6d      	ldr	r2, [pc, #436]	; (2a60 <USB_Handler+0x23c>)
    28ac:	5ad3      	ldrh	r3, [r2, r3]
    28ae:	071b      	lsls	r3, r3, #28
    28b0:	0f1b      	lsrs	r3, r3, #28
    28b2:	2b03      	cmp	r3, #3
    28b4:	d015      	beq.n	28e2 <USB_Handler+0xbe>
    28b6:	2368      	movs	r3, #104	; 0x68
    28b8:	5ad3      	ldrh	r3, [r2, r3]
    28ba:	071b      	lsls	r3, r3, #28
    28bc:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    28be:	2100      	movs	r1, #0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    28c0:	2b03      	cmp	r3, #3
    28c2:	d005      	beq.n	28d0 <USB_Handler+0xac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    28c4:	4b64      	ldr	r3, [pc, #400]	; (2a58 <USB_Handler+0x234>)
    28c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    28c8:	2003      	movs	r0, #3
    28ca:	4798      	blx	r3
    28cc:	e7d8      	b.n	2880 <USB_Handler+0x5c>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    28ce:	2301      	movs	r3, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    28d0:	015b      	lsls	r3, r3, #5
    28d2:	4a63      	ldr	r2, [pc, #396]	; (2a60 <USB_Handler+0x23c>)
    28d4:	18d3      	adds	r3, r2, r3
    28d6:	8919      	ldrh	r1, [r3, #8]
    28d8:	0449      	lsls	r1, r1, #17
    28da:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    28dc:	2200      	movs	r2, #0
    28de:	811a      	strh	r2, [r3, #8]
    28e0:	e7f0      	b.n	28c4 <USB_Handler+0xa0>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    28e2:	2302      	movs	r3, #2
    28e4:	e7f4      	b.n	28d0 <USB_Handler+0xac>
    28e6:	2300      	movs	r3, #0
    28e8:	e7f2      	b.n	28d0 <USB_Handler+0xac>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    28ea:	2280      	movs	r2, #128	; 0x80
    28ec:	4b59      	ldr	r3, [pc, #356]	; (2a54 <USB_Handler+0x230>)
    28ee:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    28f0:	4b59      	ldr	r3, [pc, #356]	; (2a58 <USB_Handler+0x234>)
    28f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    28f4:	2100      	movs	r1, #0
    28f6:	2005      	movs	r0, #5
    28f8:	4798      	blx	r3
    28fa:	e7c1      	b.n	2880 <USB_Handler+0x5c>
    28fc:	4b55      	ldr	r3, [pc, #340]	; (2a54 <USB_Handler+0x230>)
    28fe:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2900:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2902:	4a56      	ldr	r2, [pc, #344]	; (2a5c <USB_Handler+0x238>)
    2904:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2906:	4b57      	ldr	r3, [pc, #348]	; (2a64 <USB_Handler+0x240>)
    2908:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    290a:	069b      	lsls	r3, r3, #26
    290c:	d40c      	bmi.n	2928 <USB_Handler+0x104>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    290e:	4955      	ldr	r1, [pc, #340]	; (2a64 <USB_Handler+0x240>)
	tmp &= mask;
    2910:	3a32      	subs	r2, #50	; 0x32
    2912:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2914:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    2916:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    2918:	2bd0      	cmp	r3, #208	; 0xd0
    291a:	d1fb      	bne.n	2914 <USB_Handler+0xf0>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    291c:	4b4e      	ldr	r3, [pc, #312]	; (2a58 <USB_Handler+0x234>)
    291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2920:	2100      	movs	r1, #0
    2922:	2002      	movs	r0, #2
    2924:	4798      	blx	r3
    2926:	e7ab      	b.n	2880 <USB_Handler+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2928:	494e      	ldr	r1, [pc, #312]	; (2a64 <USB_Handler+0x240>)
	tmp &= mask;
    292a:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    292c:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    292e:	421a      	tst	r2, r3
    2930:	d0fc      	beq.n	292c <USB_Handler+0x108>
    2932:	e7f3      	b.n	291c <USB_Handler+0xf8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2934:	4b47      	ldr	r3, [pc, #284]	; (2a54 <USB_Handler+0x230>)
    2936:	2100      	movs	r1, #0
    2938:	2280      	movs	r2, #128	; 0x80
    293a:	0052      	lsls	r2, r2, #1
    293c:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    293e:	3af8      	subs	r2, #248	; 0xf8
    2940:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2942:	3268      	adds	r2, #104	; 0x68
    2944:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2946:	4a45      	ldr	r2, [pc, #276]	; (2a5c <USB_Handler+0x238>)
    2948:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    294a:	4b47      	ldr	r3, [pc, #284]	; (2a68 <USB_Handler+0x244>)
    294c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    294e:	4b42      	ldr	r3, [pc, #264]	; (2a58 <USB_Handler+0x234>)
    2950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2952:	2100      	movs	r1, #0
    2954:	2001      	movs	r0, #1
    2956:	4798      	blx	r3
    2958:	e792      	b.n	2880 <USB_Handler+0x5c>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    295a:	06cb      	lsls	r3, r1, #27
    295c:	d407      	bmi.n	296e <USB_Handler+0x14a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    295e:	064b      	lsls	r3, r1, #25
    2960:	d408      	bmi.n	2974 <USB_Handler+0x150>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2962:	068b      	lsls	r3, r1, #26
    2964:	d52e      	bpl.n	29c4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 0);
    2966:	2100      	movs	r1, #0
    2968:	4b40      	ldr	r3, [pc, #256]	; (2a6c <USB_Handler+0x248>)
    296a:	4798      	blx	r3
    296c:	e02a      	b.n	29c4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_setup(ept);
    296e:	4b40      	ldr	r3, [pc, #256]	; (2a70 <USB_Handler+0x24c>)
    2970:	4798      	blx	r3
    2972:	e027      	b.n	29c4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 1);
    2974:	2101      	movs	r1, #1
    2976:	4b3d      	ldr	r3, [pc, #244]	; (2a6c <USB_Handler+0x248>)
    2978:	4798      	blx	r3
    297a:	e023      	b.n	29c4 <USB_Handler+0x1a0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    297c:	064b      	lsls	r3, r1, #25
    297e:	d40e      	bmi.n	299e <USB_Handler+0x17a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2980:	070b      	lsls	r3, r1, #28
    2982:	d410      	bmi.n	29a6 <USB_Handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2984:	078b      	lsls	r3, r1, #30
    2986:	d412      	bmi.n	29ae <USB_Handler+0x18a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2988:	2307      	movs	r3, #7
    298a:	401a      	ands	r2, r3
    298c:	2a01      	cmp	r2, #1
    298e:	d119      	bne.n	29c4 <USB_Handler+0x1a0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2990:	074b      	lsls	r3, r1, #29
    2992:	d410      	bmi.n	29b6 <USB_Handler+0x192>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2994:	06cb      	lsls	r3, r1, #27
    2996:	d515      	bpl.n	29c4 <USB_Handler+0x1a0>
			_usb_d_dev_handle_setup(ept);
    2998:	4b35      	ldr	r3, [pc, #212]	; (2a70 <USB_Handler+0x24c>)
    299a:	4798      	blx	r3
    299c:	e012      	b.n	29c4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 1);
    299e:	2101      	movs	r1, #1
    29a0:	4b32      	ldr	r3, [pc, #200]	; (2a6c <USB_Handler+0x248>)
    29a2:	4798      	blx	r3
    29a4:	e00e      	b.n	29c4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_trfail(ept, 1);
    29a6:	2101      	movs	r1, #1
    29a8:	4b32      	ldr	r3, [pc, #200]	; (2a74 <USB_Handler+0x250>)
    29aa:	4798      	blx	r3
    29ac:	e00a      	b.n	29c4 <USB_Handler+0x1a0>
		_usb_d_dev_in_next(ept, true);
    29ae:	2101      	movs	r1, #1
    29b0:	4b31      	ldr	r3, [pc, #196]	; (2a78 <USB_Handler+0x254>)
    29b2:	4798      	blx	r3
    29b4:	e006      	b.n	29c4 <USB_Handler+0x1a0>
			_usb_d_dev_handle_trfail(ept, 0);
    29b6:	2100      	movs	r1, #0
    29b8:	4b2e      	ldr	r3, [pc, #184]	; (2a74 <USB_Handler+0x250>)
    29ba:	4798      	blx	r3
    29bc:	e002      	b.n	29c4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 0);
    29be:	2100      	movs	r1, #0
    29c0:	4b2a      	ldr	r3, [pc, #168]	; (2a6c <USB_Handler+0x248>)
    29c2:	4798      	blx	r3
    29c4:	3501      	adds	r5, #1
    29c6:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    29c8:	2d09      	cmp	r5, #9
    29ca:	d100      	bne.n	29ce <USB_Handler+0x1aa>
    29cc:	e758      	b.n	2880 <USB_Handler+0x5c>
    29ce:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    29d0:	7ca1      	ldrb	r1, [r4, #18]
    29d2:	29ff      	cmp	r1, #255	; 0xff
    29d4:	d0f6      	beq.n	29c4 <USB_Handler+0x1a0>
	if (!(epint & (1u << epn))) {
    29d6:	230f      	movs	r3, #15
    29d8:	400b      	ands	r3, r1
    29da:	2101      	movs	r1, #1
    29dc:	4099      	lsls	r1, r3
    29de:	420e      	tst	r6, r1
    29e0:	d0f0      	beq.n	29c4 <USB_Handler+0x1a0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    29e2:	0159      	lsls	r1, r3, #5
    29e4:	4f25      	ldr	r7, [pc, #148]	; (2a7c <USB_Handler+0x258>)
    29e6:	46bc      	mov	ip, r7
    29e8:	4461      	add	r1, ip
    29ea:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    29ec:	015b      	lsls	r3, r3, #5
    29ee:	4f24      	ldr	r7, [pc, #144]	; (2a80 <USB_Handler+0x25c>)
    29f0:	46bc      	mov	ip, r7
    29f2:	4463      	add	r3, ip
    29f4:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    29f6:	4019      	ands	r1, r3
	if (flags) {
    29f8:	d0e4      	beq.n	29c4 <USB_Handler+0x1a0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    29fa:	00ab      	lsls	r3, r5, #2
    29fc:	195a      	adds	r2, r3, r5
    29fe:	0092      	lsls	r2, r2, #2
    2a00:	4b15      	ldr	r3, [pc, #84]	; (2a58 <USB_Handler+0x234>)
    2a02:	469c      	mov	ip, r3
    2a04:	4462      	add	r2, ip
    2a06:	3230      	adds	r2, #48	; 0x30
    2a08:	7dd2      	ldrb	r2, [r2, #23]
    2a0a:	2347      	movs	r3, #71	; 0x47
    2a0c:	4013      	ands	r3, r2
    2a0e:	2b01      	cmp	r3, #1
    2a10:	d0a3      	beq.n	295a <USB_Handler+0x136>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2a12:	b253      	sxtb	r3, r2
    2a14:	2b00      	cmp	r3, #0
    2a16:	dbb1      	blt.n	297c <USB_Handler+0x158>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2a18:	068b      	lsls	r3, r1, #26
    2a1a:	d4d0      	bmi.n	29be <USB_Handler+0x19a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2a1c:	074b      	lsls	r3, r1, #29
    2a1e:	d40c      	bmi.n	2a3a <USB_Handler+0x216>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2a20:	07cb      	lsls	r3, r1, #31
    2a22:	d40e      	bmi.n	2a42 <USB_Handler+0x21e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2a24:	2307      	movs	r3, #7
    2a26:	401a      	ands	r2, r3
    2a28:	2a01      	cmp	r2, #1
    2a2a:	d1cb      	bne.n	29c4 <USB_Handler+0x1a0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2a2c:	070b      	lsls	r3, r1, #28
    2a2e:	d40c      	bmi.n	2a4a <USB_Handler+0x226>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2a30:	06cb      	lsls	r3, r1, #27
    2a32:	d5c7      	bpl.n	29c4 <USB_Handler+0x1a0>
			_usb_d_dev_handle_setup(ept);
    2a34:	4b0e      	ldr	r3, [pc, #56]	; (2a70 <USB_Handler+0x24c>)
    2a36:	4798      	blx	r3
    2a38:	e7c4      	b.n	29c4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_trfail(ept, 0);
    2a3a:	2100      	movs	r1, #0
    2a3c:	4b0d      	ldr	r3, [pc, #52]	; (2a74 <USB_Handler+0x250>)
    2a3e:	4798      	blx	r3
    2a40:	e7c0      	b.n	29c4 <USB_Handler+0x1a0>
		_usb_d_dev_out_next(ept, true);
    2a42:	2101      	movs	r1, #1
    2a44:	4b0f      	ldr	r3, [pc, #60]	; (2a84 <USB_Handler+0x260>)
    2a46:	4798      	blx	r3
    2a48:	e7bc      	b.n	29c4 <USB_Handler+0x1a0>
			_usb_d_dev_handle_trfail(ept, 1);
    2a4a:	2101      	movs	r1, #1
    2a4c:	4b09      	ldr	r3, [pc, #36]	; (2a74 <USB_Handler+0x250>)
    2a4e:	4798      	blx	r3
    2a50:	e7b8      	b.n	29c4 <USB_Handler+0x1a0>
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	41005000 	.word	0x41005000
    2a58:	20000768 	.word	0x20000768
    2a5c:	00000201 	.word	0x00000201
    2a60:	200006e8 	.word	0x200006e8
    2a64:	40000800 	.word	0x40000800
    2a68:	00001999 	.word	0x00001999
    2a6c:	000017d5 	.word	0x000017d5
    2a70:	00001741 	.word	0x00001741
    2a74:	00001899 	.word	0x00001899
    2a78:	000019e1 	.word	0x000019e1
    2a7c:	41005100 	.word	0x41005100
    2a80:	41005109 	.word	0x41005109
    2a84:	00001b8d 	.word	0x00001b8d

00002a88 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    2a88:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2a8a:	4806      	ldr	r0, [pc, #24]	; (2aa4 <cdc_device_acm_init+0x1c>)
    2a8c:	3040      	adds	r0, #64	; 0x40
    2a8e:	4b06      	ldr	r3, [pc, #24]	; (2aa8 <cdc_device_acm_init+0x20>)
    2a90:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    2a92:	4b06      	ldr	r3, [pc, #24]	; (2aac <cdc_device_acm_init+0x24>)
    2a94:	4798      	blx	r3

	usbdc_start(single_desc);
    2a96:	4806      	ldr	r0, [pc, #24]	; (2ab0 <cdc_device_acm_init+0x28>)
    2a98:	4b06      	ldr	r3, [pc, #24]	; (2ab4 <cdc_device_acm_init+0x2c>)
    2a9a:	4798      	blx	r3
	usbdc_attach();
    2a9c:	4b06      	ldr	r3, [pc, #24]	; (2ab8 <cdc_device_acm_init+0x30>)
    2a9e:	4798      	blx	r3
}
    2aa0:	bd10      	pop	{r4, pc}
    2aa2:	46c0      	nop			; (mov r8, r8)
    2aa4:	20000a50 	.word	0x20000a50
    2aa8:	000033f9 	.word	0x000033f9
    2aac:	00002d7d 	.word	0x00002d7d
    2ab0:	20000004 	.word	0x20000004
    2ab4:	00003471 	.word	0x00003471
    2ab8:	000034a9 	.word	0x000034a9

00002abc <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    2abc:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    2abe:	4b01      	ldr	r3, [pc, #4]	; (2ac4 <usb_init+0x8>)
    2ac0:	4798      	blx	r3
}
    2ac2:	bd10      	pop	{r4, pc}
    2ac4:	00002a89 	.word	0x00002a89

00002ac8 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2ac8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    2acc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2ace:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2ad0:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    2ad4:	4770      	bx	lr

00002ad6 <atomic_leave_critical>:
    2ad6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    2ada:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2adc:	f383 8810 	msr	PRIMASK, r3
}
    2ae0:	4770      	bx	lr
	...

00002ae4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ae6:	b083      	sub	sp, #12
    2ae8:	0006      	movs	r6, r0
    2aea:	000c      	movs	r4, r1
    2aec:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    2aee:	780a      	ldrb	r2, [r1, #0]
    2af0:	0653      	lsls	r3, r2, #25
    2af2:	0f9b      	lsrs	r3, r3, #30
    2af4:	2b01      	cmp	r3, #1
    2af6:	d000      	beq.n	2afa <cdcdf_acm_req+0x16>
    2af8:	e06c      	b.n	2bd4 <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2afa:	7909      	ldrb	r1, [r1, #4]
    2afc:	7963      	ldrb	r3, [r4, #5]
    2afe:	021b      	lsls	r3, r3, #8
    2b00:	430b      	orrs	r3, r1
    2b02:	493b      	ldr	r1, [pc, #236]	; (2bf0 <cdcdf_acm_req+0x10c>)
    2b04:	7809      	ldrb	r1, [r1, #0]
    2b06:	4299      	cmp	r1, r3
    2b08:	d003      	beq.n	2b12 <cdcdf_acm_req+0x2e>
    2b0a:	4939      	ldr	r1, [pc, #228]	; (2bf0 <cdcdf_acm_req+0x10c>)
    2b0c:	7849      	ldrb	r1, [r1, #1]
    2b0e:	4299      	cmp	r1, r3
    2b10:	d163      	bne.n	2bda <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    2b12:	b252      	sxtb	r2, r2
    2b14:	2a00      	cmp	r2, #0
    2b16:	db0e      	blt.n	2b36 <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    2b18:	79a7      	ldrb	r7, [r4, #6]
    2b1a:	79e3      	ldrb	r3, [r4, #7]
    2b1c:	021b      	lsls	r3, r3, #8
    2b1e:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    2b20:	4b34      	ldr	r3, [pc, #208]	; (2bf4 <cdcdf_acm_req+0x110>)
    2b22:	4798      	blx	r3
	switch (req->bRequest) {
    2b24:	7863      	ldrb	r3, [r4, #1]
    2b26:	2b20      	cmp	r3, #32
    2b28:	d018      	beq.n	2b5c <cdcdf_acm_req+0x78>
    2b2a:	2b22      	cmp	r3, #34	; 0x22
    2b2c:	d03c      	beq.n	2ba8 <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    2b2e:	200d      	movs	r0, #13
    2b30:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    2b32:	b003      	add	sp, #12
    2b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    2b36:	2d01      	cmp	r5, #1
    2b38:	d052      	beq.n	2be0 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    2b3a:	7863      	ldrb	r3, [r4, #1]
    2b3c:	2b21      	cmp	r3, #33	; 0x21
    2b3e:	d151      	bne.n	2be4 <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    2b40:	79a2      	ldrb	r2, [r4, #6]
    2b42:	79e3      	ldrb	r3, [r4, #7]
    2b44:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2b46:	4313      	orrs	r3, r2
    2b48:	2b07      	cmp	r3, #7
    2b4a:	d14e      	bne.n	2bea <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2b4c:	2300      	movs	r3, #0
    2b4e:	2207      	movs	r2, #7
    2b50:	4927      	ldr	r1, [pc, #156]	; (2bf0 <cdcdf_acm_req+0x10c>)
    2b52:	3108      	adds	r1, #8
    2b54:	0030      	movs	r0, r6
    2b56:	4c28      	ldr	r4, [pc, #160]	; (2bf8 <cdcdf_acm_req+0x114>)
    2b58:	47a0      	blx	r4
    2b5a:	e7ea      	b.n	2b32 <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2b5c:	2f07      	cmp	r7, #7
    2b5e:	d134      	bne.n	2bca <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    2b60:	2d00      	cmp	r5, #0
    2b62:	d01a      	beq.n	2b9a <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2b64:	2207      	movs	r2, #7
    2b66:	0001      	movs	r1, r0
    2b68:	4668      	mov	r0, sp
    2b6a:	4b24      	ldr	r3, [pc, #144]	; (2bfc <cdcdf_acm_req+0x118>)
    2b6c:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2b6e:	4b20      	ldr	r3, [pc, #128]	; (2bf0 <cdcdf_acm_req+0x10c>)
    2b70:	691b      	ldr	r3, [r3, #16]
    2b72:	2b00      	cmp	r3, #0
    2b74:	d005      	beq.n	2b82 <cdcdf_acm_req+0x9e>
    2b76:	4668      	mov	r0, sp
    2b78:	4798      	blx	r3
    2b7a:	0003      	movs	r3, r0
			return ERR_NONE;
    2b7c:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2b7e:	2b00      	cmp	r3, #0
    2b80:	d0d7      	beq.n	2b32 <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    2b82:	4a1b      	ldr	r2, [pc, #108]	; (2bf0 <cdcdf_acm_req+0x10c>)
    2b84:	0013      	movs	r3, r2
    2b86:	9900      	ldr	r1, [sp, #0]
    2b88:	6091      	str	r1, [r2, #8]
    2b8a:	466a      	mov	r2, sp
    2b8c:	8892      	ldrh	r2, [r2, #4]
    2b8e:	819a      	strh	r2, [r3, #12]
    2b90:	466a      	mov	r2, sp
    2b92:	7992      	ldrb	r2, [r2, #6]
    2b94:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    2b96:	2000      	movs	r0, #0
    2b98:	e7cb      	b.n	2b32 <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2b9a:	2300      	movs	r3, #0
    2b9c:	2207      	movs	r2, #7
    2b9e:	0001      	movs	r1, r0
    2ba0:	0030      	movs	r0, r6
    2ba2:	4c15      	ldr	r4, [pc, #84]	; (2bf8 <cdcdf_acm_req+0x114>)
    2ba4:	47a0      	blx	r4
    2ba6:	e7c4      	b.n	2b32 <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    2ba8:	2300      	movs	r3, #0
    2baa:	2200      	movs	r2, #0
    2bac:	2100      	movs	r1, #0
    2bae:	2000      	movs	r0, #0
    2bb0:	4d11      	ldr	r5, [pc, #68]	; (2bf8 <cdcdf_acm_req+0x114>)
    2bb2:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    2bb4:	4b0e      	ldr	r3, [pc, #56]	; (2bf0 <cdcdf_acm_req+0x10c>)
    2bb6:	695b      	ldr	r3, [r3, #20]
    2bb8:	2b00      	cmp	r3, #0
    2bba:	d009      	beq.n	2bd0 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    2bbc:	78a2      	ldrb	r2, [r4, #2]
    2bbe:	78e0      	ldrb	r0, [r4, #3]
    2bc0:	0200      	lsls	r0, r0, #8
    2bc2:	4310      	orrs	r0, r2
    2bc4:	4798      	blx	r3
		return ERR_NONE;
    2bc6:	2000      	movs	r0, #0
    2bc8:	e7b3      	b.n	2b32 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    2bca:	2001      	movs	r0, #1
    2bcc:	4240      	negs	r0, r0
    2bce:	e7b0      	b.n	2b32 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    2bd0:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    2bd2:	e7ae      	b.n	2b32 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    2bd4:	200a      	movs	r0, #10
    2bd6:	4240      	negs	r0, r0
    2bd8:	e7ab      	b.n	2b32 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    2bda:	200a      	movs	r0, #10
    2bdc:	4240      	negs	r0, r0
    2bde:	e7a8      	b.n	2b32 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    2be0:	2000      	movs	r0, #0
    2be2:	e7a6      	b.n	2b32 <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    2be4:	200d      	movs	r0, #13
    2be6:	4240      	negs	r0, r0
    2be8:	e7a3      	b.n	2b32 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    2bea:	2001      	movs	r0, #1
    2bec:	4240      	negs	r0, r0
    2bee:	e7a0      	b.n	2b32 <cdcdf_acm_req+0x4e>
    2bf0:	20000ad0 	.word	0x20000ad0
    2bf4:	000034b5 	.word	0x000034b5
    2bf8:	00002f65 	.word	0x00002f65
    2bfc:	00003829 	.word	0x00003829

00002c00 <cdcdf_acm_ctrl>:
{
    2c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c02:	46de      	mov	lr, fp
    2c04:	4657      	mov	r7, sl
    2c06:	464e      	mov	r6, r9
    2c08:	4645      	mov	r5, r8
    2c0a:	b5e0      	push	{r5, r6, r7, lr}
    2c0c:	b083      	sub	sp, #12
    2c0e:	0016      	movs	r6, r2
	switch (ctrl) {
    2c10:	2901      	cmp	r1, #1
    2c12:	d068      	beq.n	2ce6 <cdcdf_acm_ctrl+0xe6>
    2c14:	2900      	cmp	r1, #0
    2c16:	d00b      	beq.n	2c30 <cdcdf_acm_ctrl+0x30>
    2c18:	2902      	cmp	r1, #2
    2c1a:	d100      	bne.n	2c1e <cdcdf_acm_ctrl+0x1e>
    2c1c:	e093      	b.n	2d46 <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    2c1e:	200d      	movs	r0, #13
    2c20:	4240      	negs	r0, r0
}
    2c22:	b003      	add	sp, #12
    2c24:	bc3c      	pop	{r2, r3, r4, r5}
    2c26:	4690      	mov	r8, r2
    2c28:	4699      	mov	r9, r3
    2c2a:	46a2      	mov	sl, r4
    2c2c:	46ab      	mov	fp, r5
    2c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2c30:	6883      	ldr	r3, [r0, #8]
    2c32:	4698      	mov	r8, r3
	ifc = desc->sod;
    2c34:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    2c36:	2800      	cmp	r0, #0
    2c38:	d100      	bne.n	2c3c <cdcdf_acm_ctrl+0x3c>
    2c3a:	e087      	b.n	2d4c <cdcdf_acm_ctrl+0x14c>
    2c3c:	9301      	str	r3, [sp, #4]
    2c3e:	2301      	movs	r3, #1
    2c40:	4443      	add	r3, r8
    2c42:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2c44:	4f47      	ldr	r7, [pc, #284]	; (2d64 <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    2c46:	4b48      	ldr	r3, [pc, #288]	; (2d68 <cdcdf_acm_ctrl+0x168>)
    2c48:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    2c4a:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    2c4c:	7943      	ldrb	r3, [r0, #5]
    2c4e:	2108      	movs	r1, #8
    2c50:	438b      	bics	r3, r1
    2c52:	2b02      	cmp	r3, #2
    2c54:	d002      	beq.n	2c5c <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    2c56:	200a      	movs	r0, #10
    2c58:	4240      	negs	r0, r0
    2c5a:	e7e2      	b.n	2c22 <cdcdf_acm_ctrl+0x22>
    2c5c:	9901      	ldr	r1, [sp, #4]
    2c5e:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    2c60:	780b      	ldrb	r3, [r1, #0]
    2c62:	429a      	cmp	r2, r3
    2c64:	d075      	beq.n	2d52 <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    2c66:	2bff      	cmp	r3, #255	; 0xff
    2c68:	d176      	bne.n	2d58 <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    2c6a:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    2c6c:	2205      	movs	r2, #5
    2c6e:	6871      	ldr	r1, [r6, #4]
    2c70:	4b3e      	ldr	r3, [pc, #248]	; (2d6c <cdcdf_acm_ctrl+0x16c>)
    2c72:	4798      	blx	r3
    2c74:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    2c76:	d11e      	bne.n	2cb6 <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    2c78:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2c7a:	7803      	ldrb	r3, [r0, #0]
    2c7c:	18c0      	adds	r0, r0, r3
    2c7e:	2204      	movs	r2, #4
    2c80:	6871      	ldr	r1, [r6, #4]
    2c82:	4b3a      	ldr	r3, [pc, #232]	; (2d6c <cdcdf_acm_ctrl+0x16c>)
    2c84:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    2c86:	9b01      	ldr	r3, [sp, #4]
    2c88:	455b      	cmp	r3, fp
    2c8a:	d027      	beq.n	2cdc <cdcdf_acm_ctrl+0xdc>
    2c8c:	9b01      	ldr	r3, [sp, #4]
    2c8e:	3301      	adds	r3, #1
    2c90:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    2c92:	2800      	cmp	r0, #0
    2c94:	d1d9      	bne.n	2c4a <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    2c96:	200a      	movs	r0, #10
    2c98:	4240      	negs	r0, r0
    2c9a:	e7c2      	b.n	2c22 <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    2c9c:	4653      	mov	r3, sl
    2c9e:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    2ca0:	0028      	movs	r0, r5
    2ca2:	4b31      	ldr	r3, [pc, #196]	; (2d68 <cdcdf_acm_ctrl+0x168>)
    2ca4:	4798      	blx	r3
			desc->sod = ep;
    2ca6:	6034      	str	r4, [r6, #0]
    2ca8:	7820      	ldrb	r0, [r4, #0]
    2caa:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2cac:	6871      	ldr	r1, [r6, #4]
    2cae:	4b30      	ldr	r3, [pc, #192]	; (2d70 <cdcdf_acm_ctrl+0x170>)
    2cb0:	4798      	blx	r3
    2cb2:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    2cb4:	d0e0      	beq.n	2c78 <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    2cb6:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    2cb8:	7963      	ldrb	r3, [r4, #5]
    2cba:	021b      	lsls	r3, r3, #8
    2cbc:	7922      	ldrb	r2, [r4, #4]
    2cbe:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2cc0:	b292      	uxth	r2, r2
    2cc2:	78e1      	ldrb	r1, [r4, #3]
    2cc4:	0028      	movs	r0, r5
    2cc6:	47b8      	blx	r7
    2cc8:	2800      	cmp	r0, #0
    2cca:	d148      	bne.n	2d5e <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2ccc:	b26b      	sxtb	r3, r5
    2cce:	2b00      	cmp	r3, #0
    2cd0:	dbe4      	blt.n	2c9c <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    2cd2:	4643      	mov	r3, r8
    2cd4:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    2cd6:	0028      	movs	r0, r5
    2cd8:	47c8      	blx	r9
    2cda:	e7e4      	b.n	2ca6 <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    2cdc:	2201      	movs	r2, #1
    2cde:	4b25      	ldr	r3, [pc, #148]	; (2d74 <cdcdf_acm_ctrl+0x174>)
    2ce0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    2ce2:	2000      	movs	r0, #0
    2ce4:	e79d      	b.n	2c22 <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2ce6:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    2ce8:	2a00      	cmp	r2, #0
    2cea:	d008      	beq.n	2cfe <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    2cec:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2cee:	795b      	ldrb	r3, [r3, #5]
    2cf0:	2208      	movs	r2, #8
    2cf2:	4393      	bics	r3, r2
    2cf4:	2b02      	cmp	r3, #2
    2cf6:	d002      	beq.n	2cfe <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    2cf8:	200a      	movs	r0, #10
    2cfa:	4240      	negs	r0, r0
    2cfc:	e791      	b.n	2c22 <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    2cfe:	7823      	ldrb	r3, [r4, #0]
    2d00:	2bff      	cmp	r3, #255	; 0xff
    2d02:	d008      	beq.n	2d16 <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    2d04:	23ff      	movs	r3, #255	; 0xff
    2d06:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    2d08:	78a0      	ldrb	r0, [r4, #2]
    2d0a:	28ff      	cmp	r0, #255	; 0xff
    2d0c:	d003      	beq.n	2d16 <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2d0e:	4b1a      	ldr	r3, [pc, #104]	; (2d78 <cdcdf_acm_ctrl+0x178>)
    2d10:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2d12:	23ff      	movs	r3, #255	; 0xff
    2d14:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    2d16:	7863      	ldrb	r3, [r4, #1]
    2d18:	2bff      	cmp	r3, #255	; 0xff
    2d1a:	d008      	beq.n	2d2e <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    2d1c:	23ff      	movs	r3, #255	; 0xff
    2d1e:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    2d20:	78e0      	ldrb	r0, [r4, #3]
    2d22:	28ff      	cmp	r0, #255	; 0xff
    2d24:	d003      	beq.n	2d2e <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2d26:	4b14      	ldr	r3, [pc, #80]	; (2d78 <cdcdf_acm_ctrl+0x178>)
    2d28:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2d2a:	23ff      	movs	r3, #255	; 0xff
    2d2c:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    2d2e:	7920      	ldrb	r0, [r4, #4]
    2d30:	28ff      	cmp	r0, #255	; 0xff
    2d32:	d003      	beq.n	2d3c <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    2d34:	4b10      	ldr	r3, [pc, #64]	; (2d78 <cdcdf_acm_ctrl+0x178>)
    2d36:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    2d38:	23ff      	movs	r3, #255	; 0xff
    2d3a:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    2d3c:	2200      	movs	r2, #0
    2d3e:	4b0d      	ldr	r3, [pc, #52]	; (2d74 <cdcdf_acm_ctrl+0x174>)
    2d40:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    2d42:	2000      	movs	r0, #0
    2d44:	e76d      	b.n	2c22 <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    2d46:	201b      	movs	r0, #27
    2d48:	4240      	negs	r0, r0
    2d4a:	e76a      	b.n	2c22 <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    2d4c:	200a      	movs	r0, #10
    2d4e:	4240      	negs	r0, r0
    2d50:	e767      	b.n	2c22 <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    2d52:	2012      	movs	r0, #18
    2d54:	4240      	negs	r0, r0
    2d56:	e764      	b.n	2c22 <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    2d58:	201c      	movs	r0, #28
    2d5a:	4240      	negs	r0, r0
    2d5c:	e761      	b.n	2c22 <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    2d5e:	2014      	movs	r0, #20
    2d60:	4240      	negs	r0, r0
    2d62:	e75e      	b.n	2c22 <cdcdf_acm_ctrl+0x22>
    2d64:	00001035 	.word	0x00001035
    2d68:	000010c9 	.word	0x000010c9
    2d6c:	000034d1 	.word	0x000034d1
    2d70:	00003507 	.word	0x00003507
    2d74:	20000ad0 	.word	0x20000ad0
    2d78:	0000109d 	.word	0x0000109d

00002d7c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2d7c:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    2d7e:	4b0a      	ldr	r3, [pc, #40]	; (2da8 <cdcdf_acm_init+0x2c>)
    2d80:	4798      	blx	r3
    2d82:	2801      	cmp	r0, #1
    2d84:	d80c      	bhi.n	2da0 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    2d86:	4809      	ldr	r0, [pc, #36]	; (2dac <cdcdf_acm_init+0x30>)
    2d88:	4b09      	ldr	r3, [pc, #36]	; (2db0 <cdcdf_acm_init+0x34>)
    2d8a:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2d8c:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    2d8e:	3018      	adds	r0, #24
    2d90:	4b08      	ldr	r3, [pc, #32]	; (2db4 <cdcdf_acm_init+0x38>)
    2d92:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2d94:	4908      	ldr	r1, [pc, #32]	; (2db8 <cdcdf_acm_init+0x3c>)
    2d96:	2001      	movs	r0, #1
    2d98:	4b08      	ldr	r3, [pc, #32]	; (2dbc <cdcdf_acm_init+0x40>)
    2d9a:	4798      	blx	r3
	return ERR_NONE;
    2d9c:	2000      	movs	r0, #0
}
    2d9e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2da0:	2011      	movs	r0, #17
    2da2:	4240      	negs	r0, r0
    2da4:	e7fb      	b.n	2d9e <cdcdf_acm_init+0x22>
    2da6:	46c0      	nop			; (mov r8, r8)
    2da8:	000034c1 	.word	0x000034c1
    2dac:	20000ad0 	.word	0x20000ad0
    2db0:	00002c01 	.word	0x00002c01
    2db4:	00003459 	.word	0x00003459
    2db8:	20000064 	.word	0x20000064
    2dbc:	000033c1 	.word	0x000033c1

00002dc0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    2dc0:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2dc2:	4b06      	ldr	r3, [pc, #24]	; (2ddc <usbdc_unconfig+0x1c>)
    2dc4:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    2dc6:	2c00      	cmp	r4, #0
    2dc8:	d007      	beq.n	2dda <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    2dca:	2200      	movs	r2, #0
    2dcc:	2101      	movs	r1, #1
    2dce:	0020      	movs	r0, r4
    2dd0:	6863      	ldr	r3, [r4, #4]
    2dd2:	4798      	blx	r3
		func = func->next;
    2dd4:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    2dd6:	2c00      	cmp	r4, #0
    2dd8:	d1f7      	bne.n	2dca <usbdc_unconfig+0xa>
	}
}
    2dda:	bd10      	pop	{r4, pc}
    2ddc:	20000af4 	.word	0x20000af4

00002de0 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    2de0:	b570      	push	{r4, r5, r6, lr}
    2de2:	0006      	movs	r6, r0
    2de4:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    2de6:	4b07      	ldr	r3, [pc, #28]	; (2e04 <usbdc_change_notify+0x24>)
    2de8:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    2dea:	2c00      	cmp	r4, #0
    2dec:	d103      	bne.n	2df6 <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    2dee:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    2df0:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    2df2:	2c00      	cmp	r4, #0
    2df4:	d0fb      	beq.n	2dee <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    2df6:	6863      	ldr	r3, [r4, #4]
    2df8:	2b00      	cmp	r3, #0
    2dfa:	d0f9      	beq.n	2df0 <usbdc_change_notify+0x10>
			cg->cb(change, value);
    2dfc:	0029      	movs	r1, r5
    2dfe:	0030      	movs	r0, r6
    2e00:	4798      	blx	r3
    2e02:	e7f5      	b.n	2df0 <usbdc_change_notify+0x10>
    2e04:	20000af4 	.word	0x20000af4

00002e08 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e0a:	0007      	movs	r7, r0
    2e0c:	000e      	movs	r6, r1
    2e0e:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    2e10:	4b0d      	ldr	r3, [pc, #52]	; (2e48 <usbdc_request_handler+0x40>)
    2e12:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    2e14:	2c00      	cmp	r4, #0
    2e16:	d104      	bne.n	2e22 <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    2e18:	2000      	movs	r0, #0
    2e1a:	e011      	b.n	2e40 <usbdc_request_handler+0x38>
		h = h->next;
    2e1c:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    2e1e:	2c00      	cmp	r4, #0
    2e20:	d00d      	beq.n	2e3e <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    2e22:	6863      	ldr	r3, [r4, #4]
    2e24:	2b00      	cmp	r3, #0
    2e26:	d0f9      	beq.n	2e1c <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    2e28:	002a      	movs	r2, r5
    2e2a:	0031      	movs	r1, r6
    2e2c:	0038      	movs	r0, r7
    2e2e:	4798      	blx	r3
			if (0 == rc) {
    2e30:	2800      	cmp	r0, #0
    2e32:	d006      	beq.n	2e42 <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    2e34:	300a      	adds	r0, #10
    2e36:	d0f1      	beq.n	2e1c <usbdc_request_handler+0x14>
				return -1;
    2e38:	2001      	movs	r0, #1
    2e3a:	4240      	negs	r0, r0
    2e3c:	e000      	b.n	2e40 <usbdc_request_handler+0x38>
	return false;
    2e3e:	2000      	movs	r0, #0
}
    2e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    2e42:	2001      	movs	r0, #1
    2e44:	e7fc      	b.n	2e40 <usbdc_request_handler+0x38>
    2e46:	46c0      	nop			; (mov r8, r8)
    2e48:	20000af4 	.word	0x20000af4

00002e4c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    2e4c:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    2e4e:	4b06      	ldr	r3, [pc, #24]	; (2e68 <usbd_sof_cb+0x1c>)
    2e50:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    2e52:	2c00      	cmp	r4, #0
    2e54:	d103      	bne.n	2e5e <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    2e56:	bd10      	pop	{r4, pc}
		sof = sof->next;
    2e58:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    2e5a:	2c00      	cmp	r4, #0
    2e5c:	d0fb      	beq.n	2e56 <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    2e5e:	6863      	ldr	r3, [r4, #4]
    2e60:	2b00      	cmp	r3, #0
    2e62:	d0f9      	beq.n	2e58 <usbd_sof_cb+0xc>
			sof->cb();
    2e64:	4798      	blx	r3
    2e66:	e7f7      	b.n	2e58 <usbd_sof_cb+0xc>
    2e68:	20000af4 	.word	0x20000af4

00002e6c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    2e6c:	b510      	push	{r4, lr}
    2e6e:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    2e70:	2900      	cmp	r1, #0
    2e72:	d003      	beq.n	2e7c <usbdc_cb_ctl_done+0x10>
    2e74:	2901      	cmp	r1, #1
    2e76:	d029      	beq.n	2ecc <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    2e78:	2000      	movs	r0, #0
    2e7a:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    2e7c:	7813      	ldrb	r3, [r2, #0]
    2e7e:	2b00      	cmp	r3, #0
    2e80:	d1fa      	bne.n	2e78 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    2e82:	7853      	ldrb	r3, [r2, #1]
    2e84:	2b05      	cmp	r3, #5
    2e86:	d011      	beq.n	2eac <usbdc_cb_ctl_done+0x40>
    2e88:	2b09      	cmp	r3, #9
    2e8a:	d1f5      	bne.n	2e78 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    2e8c:	7892      	ldrb	r2, [r2, #2]
    2e8e:	4b12      	ldr	r3, [pc, #72]	; (2ed8 <usbdc_cb_ctl_done+0x6c>)
    2e90:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    2e92:	78a3      	ldrb	r3, [r4, #2]
    2e94:	78e1      	ldrb	r1, [r4, #3]
    2e96:	0209      	lsls	r1, r1, #8
    2e98:	4319      	orrs	r1, r3
    2e9a:	1e4b      	subs	r3, r1, #1
    2e9c:	4199      	sbcs	r1, r3
    2e9e:	3103      	adds	r1, #3
    2ea0:	4b0d      	ldr	r3, [pc, #52]	; (2ed8 <usbdc_cb_ctl_done+0x6c>)
    2ea2:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2ea4:	2001      	movs	r0, #1
    2ea6:	4b0d      	ldr	r3, [pc, #52]	; (2edc <usbdc_cb_ctl_done+0x70>)
    2ea8:	4798      	blx	r3
    2eaa:	e7e5      	b.n	2e78 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    2eac:	7890      	ldrb	r0, [r2, #2]
    2eae:	4b0c      	ldr	r3, [pc, #48]	; (2ee0 <usbdc_cb_ctl_done+0x74>)
    2eb0:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    2eb2:	78a3      	ldrb	r3, [r4, #2]
    2eb4:	78e1      	ldrb	r1, [r4, #3]
    2eb6:	0209      	lsls	r1, r1, #8
    2eb8:	4319      	orrs	r1, r3
    2eba:	1e4b      	subs	r3, r1, #1
    2ebc:	4199      	sbcs	r1, r3
    2ebe:	3102      	adds	r1, #2
    2ec0:	4b05      	ldr	r3, [pc, #20]	; (2ed8 <usbdc_cb_ctl_done+0x6c>)
    2ec2:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2ec4:	2001      	movs	r0, #1
    2ec6:	4b05      	ldr	r3, [pc, #20]	; (2edc <usbdc_cb_ctl_done+0x70>)
    2ec8:	4798      	blx	r3
    2eca:	e7d5      	b.n	2e78 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    2ecc:	2201      	movs	r2, #1
    2ece:	0021      	movs	r1, r4
    2ed0:	2000      	movs	r0, #0
    2ed2:	4b04      	ldr	r3, [pc, #16]	; (2ee4 <usbdc_cb_ctl_done+0x78>)
    2ed4:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    2ed6:	e7cf      	b.n	2e78 <usbdc_cb_ctl_done+0xc>
    2ed8:	20000af4 	.word	0x20000af4
    2edc:	00002de1 	.word	0x00002de1
    2ee0:	00001029 	.word	0x00001029
    2ee4:	00002e09 	.word	0x00002e09

00002ee8 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    2ee8:	b510      	push	{r4, lr}
	usbdc_unconfig();
    2eea:	4b0d      	ldr	r3, [pc, #52]	; (2f20 <usbdc_reset+0x38>)
    2eec:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    2eee:	4c0d      	ldr	r4, [pc, #52]	; (2f24 <usbdc_reset+0x3c>)
    2ef0:	2302      	movs	r3, #2
    2ef2:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    2ef4:	2300      	movs	r3, #0
    2ef6:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    2ef8:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    2efa:	2000      	movs	r0, #0
    2efc:	4b0a      	ldr	r3, [pc, #40]	; (2f28 <usbdc_reset+0x40>)
    2efe:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    2f00:	7f20      	ldrb	r0, [r4, #28]
    2f02:	4b0a      	ldr	r3, [pc, #40]	; (2f2c <usbdc_reset+0x44>)
    2f04:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    2f06:	4a0a      	ldr	r2, [pc, #40]	; (2f30 <usbdc_reset+0x48>)
    2f08:	2100      	movs	r1, #0
    2f0a:	2000      	movs	r0, #0
    2f0c:	4c09      	ldr	r4, [pc, #36]	; (2f34 <usbdc_reset+0x4c>)
    2f0e:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    2f10:	4a09      	ldr	r2, [pc, #36]	; (2f38 <usbdc_reset+0x50>)
    2f12:	2102      	movs	r1, #2
    2f14:	2000      	movs	r0, #0
    2f16:	47a0      	blx	r4
	usb_d_ep_enable(0);
    2f18:	2000      	movs	r0, #0
    2f1a:	4b08      	ldr	r3, [pc, #32]	; (2f3c <usbdc_reset+0x54>)
    2f1c:	4798      	blx	r3
}
    2f1e:	bd10      	pop	{r4, pc}
    2f20:	00002dc1 	.word	0x00002dc1
    2f24:	20000af4 	.word	0x20000af4
    2f28:	0000109d 	.word	0x0000109d
    2f2c:	00001089 	.word	0x00001089
    2f30:	00002f81 	.word	0x00002f81
    2f34:	000012a5 	.word	0x000012a5
    2f38:	00002e6d 	.word	0x00002e6d
    2f3c:	000010c9 	.word	0x000010c9

00002f40 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    2f40:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    2f42:	2800      	cmp	r0, #0
    2f44:	d002      	beq.n	2f4c <usbd_event_cb+0xc>
    2f46:	2801      	cmp	r0, #1
    2f48:	d004      	beq.n	2f54 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    2f4a:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    2f4c:	2000      	movs	r0, #0
    2f4e:	4b03      	ldr	r3, [pc, #12]	; (2f5c <usbd_event_cb+0x1c>)
    2f50:	4798      	blx	r3
		break;
    2f52:	e7fa      	b.n	2f4a <usbd_event_cb+0xa>
		usbdc_reset();
    2f54:	4b02      	ldr	r3, [pc, #8]	; (2f60 <usbd_event_cb+0x20>)
    2f56:	4798      	blx	r3
}
    2f58:	e7f7      	b.n	2f4a <usbd_event_cb+0xa>
    2f5a:	46c0      	nop			; (mov r8, r8)
    2f5c:	00002de1 	.word	0x00002de1
    2f60:	00002ee9 	.word	0x00002ee9

00002f64 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    2f64:	b510      	push	{r4, lr}
    2f66:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2f68:	ac01      	add	r4, sp, #4
    2f6a:	9101      	str	r1, [sp, #4]
    2f6c:	9202      	str	r2, [sp, #8]
    2f6e:	7220      	strb	r0, [r4, #8]
    2f70:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    2f72:	0020      	movs	r0, r4
    2f74:	4b01      	ldr	r3, [pc, #4]	; (2f7c <usbdc_xfer+0x18>)
    2f76:	4798      	blx	r3
}
    2f78:	b004      	add	sp, #16
    2f7a:	bd10      	pop	{r4, pc}
    2f7c:	00001115 	.word	0x00001115

00002f80 <usbdc_cb_ctl_req>:
{
    2f80:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f82:	46c6      	mov	lr, r8
    2f84:	b500      	push	{lr}
    2f86:	b084      	sub	sp, #16
    2f88:	0005      	movs	r5, r0
    2f8a:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2f8c:	2200      	movs	r2, #0
    2f8e:	4bb5      	ldr	r3, [pc, #724]	; (3264 <usbdc_cb_ctl_req+0x2e4>)
    2f90:	4798      	blx	r3
    2f92:	1c43      	adds	r3, r0, #1
    2f94:	d00d      	beq.n	2fb2 <usbdc_cb_ctl_req+0x32>
		return true;
    2f96:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2f98:	2801      	cmp	r0, #1
    2f9a:	d00b      	beq.n	2fb4 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    2f9c:	7822      	ldrb	r2, [r4, #0]
    2f9e:	231f      	movs	r3, #31
    2fa0:	0011      	movs	r1, r2
    2fa2:	4399      	bics	r1, r3
    2fa4:	d00b      	beq.n	2fbe <usbdc_cb_ctl_req+0x3e>
    2fa6:	b2cb      	uxtb	r3, r1
    2fa8:	2b80      	cmp	r3, #128	; 0x80
    2faa:	d100      	bne.n	2fae <usbdc_cb_ctl_req+0x2e>
    2fac:	e0f8      	b.n	31a0 <usbdc_cb_ctl_req+0x220>
		return false;
    2fae:	2300      	movs	r3, #0
    2fb0:	e000      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		return false;
    2fb2:	2300      	movs	r3, #0
}
    2fb4:	0018      	movs	r0, r3
    2fb6:	b004      	add	sp, #16
    2fb8:	bc04      	pop	{r2}
    2fba:	4690      	mov	r8, r2
    2fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    2fbe:	7863      	ldrb	r3, [r4, #1]
    2fc0:	2b0b      	cmp	r3, #11
    2fc2:	d900      	bls.n	2fc6 <usbdc_cb_ctl_req+0x46>
    2fc4:	e1e4      	b.n	3390 <usbdc_cb_ctl_req+0x410>
    2fc6:	009b      	lsls	r3, r3, #2
    2fc8:	49a7      	ldr	r1, [pc, #668]	; (3268 <usbdc_cb_ctl_req+0x2e8>)
    2fca:	58cb      	ldr	r3, [r1, r3]
    2fcc:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2fce:	2301      	movs	r3, #1
    2fd0:	2200      	movs	r2, #0
    2fd2:	2100      	movs	r1, #0
    2fd4:	0028      	movs	r0, r5
    2fd6:	4ca5      	ldr	r4, [pc, #660]	; (326c <usbdc_cb_ctl_req+0x2ec>)
    2fd8:	47a0      	blx	r4
    2fda:	4243      	negs	r3, r0
    2fdc:	4143      	adcs	r3, r0
    2fde:	b2db      	uxtb	r3, r3
    2fe0:	e7e8      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    2fe2:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    2fe4:	2a00      	cmp	r2, #0
    2fe6:	d01a      	beq.n	301e <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    2fe8:	4ba1      	ldr	r3, [pc, #644]	; (3270 <usbdc_cb_ctl_req+0x2f0>)
    2fea:	681b      	ldr	r3, [r3, #0]
    2fec:	6859      	ldr	r1, [r3, #4]
    2fee:	6818      	ldr	r0, [r3, #0]
    2ff0:	4ba0      	ldr	r3, [pc, #640]	; (3274 <usbdc_cb_ctl_req+0x2f4>)
    2ff2:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2ff4:	2800      	cmp	r0, #0
    2ff6:	d100      	bne.n	2ffa <usbdc_cb_ctl_req+0x7a>
    2ff8:	e1d4      	b.n	33a4 <usbdc_cb_ctl_req+0x424>
    2ffa:	78c3      	ldrb	r3, [r0, #3]
    2ffc:	021b      	lsls	r3, r3, #8
    2ffe:	7881      	ldrb	r1, [r0, #2]
    3000:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    3002:	b289      	uxth	r1, r1
    3004:	1841      	adds	r1, r0, r1
    3006:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3008:	2204      	movs	r2, #4
    300a:	4b9b      	ldr	r3, [pc, #620]	; (3278 <usbdc_cb_ctl_req+0x2f8>)
    300c:	4798      	blx	r3
    300e:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    3010:	2800      	cmp	r0, #0
    3012:	d006      	beq.n	3022 <usbdc_cb_ctl_req+0xa2>
    3014:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3016:	4f96      	ldr	r7, [pc, #600]	; (3270 <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3018:	4b97      	ldr	r3, [pc, #604]	; (3278 <usbdc_cb_ctl_req+0x2f8>)
    301a:	4698      	mov	r8, r3
    301c:	e01a      	b.n	3054 <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    301e:	4b97      	ldr	r3, [pc, #604]	; (327c <usbdc_cb_ctl_req+0x2fc>)
    3020:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3022:	2301      	movs	r3, #1
    3024:	2200      	movs	r2, #0
    3026:	2100      	movs	r1, #0
    3028:	0028      	movs	r0, r5
    302a:	4c90      	ldr	r4, [pc, #576]	; (326c <usbdc_cb_ctl_req+0x2ec>)
    302c:	47a0      	blx	r4
    302e:	4243      	negs	r3, r0
    3030:	4143      	adcs	r3, r0
    3032:	b2db      	uxtb	r3, r3
    3034:	e7be      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    3036:	0034      	movs	r4, r6
    3038:	e000      	b.n	303c <usbdc_cb_ctl_req+0xbc>
    303a:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    303c:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    303e:	7803      	ldrb	r3, [r0, #0]
    3040:	18c0      	adds	r0, r0, r3
    3042:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3044:	9b03      	ldr	r3, [sp, #12]
    3046:	9301      	str	r3, [sp, #4]
    3048:	2204      	movs	r2, #4
    304a:	0019      	movs	r1, r3
    304c:	47c0      	blx	r8
    304e:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    3050:	2800      	cmp	r0, #0
    3052:	d0e6      	beq.n	3022 <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    3054:	7886      	ldrb	r6, [r0, #2]
    3056:	42a6      	cmp	r6, r4
    3058:	d0f0      	beq.n	303c <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    305a:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    305c:	2c00      	cmp	r4, #0
    305e:	d0ea      	beq.n	3036 <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    3060:	aa02      	add	r2, sp, #8
    3062:	2100      	movs	r1, #0
    3064:	0020      	movs	r0, r4
    3066:	6863      	ldr	r3, [r4, #4]
    3068:	4798      	blx	r3
    306a:	2800      	cmp	r0, #0
    306c:	d0e5      	beq.n	303a <usbdc_cb_ctl_req+0xba>
					func = func->next;
    306e:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    3070:	2c00      	cmp	r4, #0
    3072:	d1f5      	bne.n	3060 <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    3074:	0034      	movs	r4, r6
    3076:	e7e1      	b.n	303c <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3078:	231f      	movs	r3, #31
    307a:	401a      	ands	r2, r3
		return false;
    307c:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    307e:	2a02      	cmp	r2, #2
    3080:	d198      	bne.n	2fb4 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    3082:	79a3      	ldrb	r3, [r4, #6]
    3084:	79e2      	ldrb	r2, [r4, #7]
    3086:	0212      	lsls	r2, r2, #8
    3088:	431a      	orrs	r2, r3
			return false;
    308a:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    308c:	2a00      	cmp	r2, #0
    308e:	d000      	beq.n	3092 <usbdc_cb_ctl_req+0x112>
    3090:	e790      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    3092:	7920      	ldrb	r0, [r4, #4]
    3094:	2100      	movs	r1, #0
    3096:	4b7a      	ldr	r3, [pc, #488]	; (3280 <usbdc_cb_ctl_req+0x300>)
    3098:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    309a:	2301      	movs	r3, #1
    309c:	2200      	movs	r2, #0
    309e:	2100      	movs	r1, #0
    30a0:	0028      	movs	r0, r5
    30a2:	4c72      	ldr	r4, [pc, #456]	; (326c <usbdc_cb_ctl_req+0x2ec>)
    30a4:	47a0      	blx	r4
		return true;
    30a6:	2301      	movs	r3, #1
    30a8:	e784      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    30aa:	231f      	movs	r3, #31
    30ac:	401a      	ands	r2, r3
		return false;
    30ae:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    30b0:	2a02      	cmp	r2, #2
    30b2:	d000      	beq.n	30b6 <usbdc_cb_ctl_req+0x136>
    30b4:	e77e      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    30b6:	79a3      	ldrb	r3, [r4, #6]
    30b8:	79e2      	ldrb	r2, [r4, #7]
    30ba:	0212      	lsls	r2, r2, #8
    30bc:	431a      	orrs	r2, r3
			return false;
    30be:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    30c0:	2a00      	cmp	r2, #0
    30c2:	d000      	beq.n	30c6 <usbdc_cb_ctl_req+0x146>
    30c4:	e776      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    30c6:	7920      	ldrb	r0, [r4, #4]
    30c8:	2101      	movs	r1, #1
    30ca:	4b6d      	ldr	r3, [pc, #436]	; (3280 <usbdc_cb_ctl_req+0x300>)
    30cc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    30ce:	2301      	movs	r3, #1
    30d0:	2200      	movs	r2, #0
    30d2:	2100      	movs	r1, #0
    30d4:	0028      	movs	r0, r5
    30d6:	4c65      	ldr	r4, [pc, #404]	; (326c <usbdc_cb_ctl_req+0x2ec>)
    30d8:	47a0      	blx	r4
		return true;
    30da:	2301      	movs	r3, #1
    30dc:	e76a      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    30de:	78a3      	ldrb	r3, [r4, #2]
    30e0:	78e5      	ldrb	r5, [r4, #3]
    30e2:	022d      	lsls	r5, r5, #8
    30e4:	431d      	orrs	r5, r3
    30e6:	7923      	ldrb	r3, [r4, #4]
    30e8:	7964      	ldrb	r4, [r4, #5]
    30ea:	0224      	lsls	r4, r4, #8
    30ec:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    30ee:	4a60      	ldr	r2, [pc, #384]	; (3270 <usbdc_cb_ctl_req+0x2f0>)
    30f0:	6813      	ldr	r3, [r2, #0]
    30f2:	7ed2      	ldrb	r2, [r2, #27]
    30f4:	6859      	ldr	r1, [r3, #4]
    30f6:	6818      	ldr	r0, [r3, #0]
    30f8:	4b5e      	ldr	r3, [pc, #376]	; (3274 <usbdc_cb_ctl_req+0x2f4>)
    30fa:	4798      	blx	r3
	if (NULL == ifc) {
    30fc:	2800      	cmp	r0, #0
    30fe:	d047      	beq.n	3190 <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    3100:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    3102:	78c3      	ldrb	r3, [r0, #3]
    3104:	021b      	lsls	r3, r3, #8
    3106:	7881      	ldrb	r1, [r0, #2]
    3108:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    310a:	b289      	uxth	r1, r1
    310c:	1841      	adds	r1, r0, r1
    310e:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    3110:	2204      	movs	r2, #4
    3112:	4b59      	ldr	r3, [pc, #356]	; (3278 <usbdc_cb_ctl_req+0x2f8>)
    3114:	4798      	blx	r3
    3116:	2800      	cmp	r0, #0
    3118:	d03c      	beq.n	3194 <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    311a:	4e57      	ldr	r6, [pc, #348]	; (3278 <usbdc_cb_ctl_req+0x2f8>)
    311c:	e008      	b.n	3130 <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    311e:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    3120:	7803      	ldrb	r3, [r0, #0]
    3122:	18c0      	adds	r0, r0, r3
    3124:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3126:	2204      	movs	r2, #4
    3128:	9903      	ldr	r1, [sp, #12]
    312a:	47b0      	blx	r6
		if (NULL == ifc) {
    312c:	2800      	cmp	r0, #0
    312e:	d033      	beq.n	3198 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    3130:	7883      	ldrb	r3, [r0, #2]
    3132:	42a3      	cmp	r3, r4
    3134:	d1f3      	bne.n	311e <usbdc_cb_ctl_req+0x19e>
    3136:	78c3      	ldrb	r3, [r0, #3]
    3138:	42ab      	cmp	r3, r5
    313a:	d1f0      	bne.n	311e <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    313c:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    313e:	4b4c      	ldr	r3, [pc, #304]	; (3270 <usbdc_cb_ctl_req+0x2f0>)
    3140:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    3142:	2e00      	cmp	r6, #0
    3144:	d02a      	beq.n	319c <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3146:	aa02      	add	r2, sp, #8
    3148:	2101      	movs	r1, #1
    314a:	0030      	movs	r0, r6
    314c:	6873      	ldr	r3, [r6, #4]
    314e:	4798      	blx	r3
    3150:	2800      	cmp	r0, #0
    3152:	d004      	beq.n	315e <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    3154:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    3156:	2e00      	cmp	r6, #0
    3158:	d1f5      	bne.n	3146 <usbdc_cb_ctl_req+0x1c6>
	return false;
    315a:	2300      	movs	r3, #0
    315c:	e72a      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    315e:	6873      	ldr	r3, [r6, #4]
    3160:	aa02      	add	r2, sp, #8
    3162:	2100      	movs	r1, #0
    3164:	0030      	movs	r0, r6
    3166:	4798      	blx	r3
			return false;
    3168:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    316a:	2800      	cmp	r0, #0
    316c:	d000      	beq.n	3170 <usbdc_cb_ctl_req+0x1f0>
    316e:	e721      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    3170:	2d00      	cmp	r5, #0
    3172:	d005      	beq.n	3180 <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    3174:	493e      	ldr	r1, [pc, #248]	; (3270 <usbdc_cb_ctl_req+0x2f0>)
    3176:	2201      	movs	r2, #1
    3178:	40a2      	lsls	r2, r4
    317a:	7f4b      	ldrb	r3, [r1, #29]
    317c:	4313      	orrs	r3, r2
    317e:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    3180:	2300      	movs	r3, #0
    3182:	2200      	movs	r2, #0
    3184:	2100      	movs	r1, #0
    3186:	2000      	movs	r0, #0
    3188:	4c38      	ldr	r4, [pc, #224]	; (326c <usbdc_cb_ctl_req+0x2ec>)
    318a:	47a0      	blx	r4
			return true;
    318c:	2301      	movs	r3, #1
    318e:	e711      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		return false;
    3190:	2300      	movs	r3, #0
    3192:	e70f      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		return false;
    3194:	2300      	movs	r3, #0
    3196:	e70d      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
			return false;
    3198:	2300      	movs	r3, #0
    319a:	e70b      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
	return false;
    319c:	2300      	movs	r3, #0
    319e:	e709      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    31a0:	7863      	ldrb	r3, [r4, #1]
    31a2:	2b06      	cmp	r3, #6
    31a4:	d033      	beq.n	320e <usbdc_cb_ctl_req+0x28e>
    31a6:	b2d9      	uxtb	r1, r3
    31a8:	2906      	cmp	r1, #6
    31aa:	d922      	bls.n	31f2 <usbdc_cb_ctl_req+0x272>
    31ac:	2b08      	cmp	r3, #8
    31ae:	d100      	bne.n	31b2 <usbdc_cb_ctl_req+0x232>
    31b0:	e0af      	b.n	3312 <usbdc_cb_ctl_req+0x392>
    31b2:	2b0a      	cmp	r3, #10
    31b4:	d000      	beq.n	31b8 <usbdc_cb_ctl_req+0x238>
    31b6:	e0ed      	b.n	3394 <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    31b8:	4b2d      	ldr	r3, [pc, #180]	; (3270 <usbdc_cb_ctl_req+0x2f0>)
    31ba:	7f5a      	ldrb	r2, [r3, #29]
    31bc:	7921      	ldrb	r1, [r4, #4]
    31be:	7963      	ldrb	r3, [r4, #5]
    31c0:	021b      	lsls	r3, r3, #8
    31c2:	430b      	orrs	r3, r1
    31c4:	411a      	asrs	r2, r3
    31c6:	07d3      	lsls	r3, r2, #31
    31c8:	d400      	bmi.n	31cc <usbdc_cb_ctl_req+0x24c>
    31ca:	e0ca      	b.n	3362 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    31cc:	4b28      	ldr	r3, [pc, #160]	; (3270 <usbdc_cb_ctl_req+0x2f0>)
    31ce:	691d      	ldr	r5, [r3, #16]
	return false;
    31d0:	2300      	movs	r3, #0
	while (NULL != func) {
    31d2:	2d00      	cmp	r5, #0
    31d4:	d100      	bne.n	31d8 <usbdc_cb_ctl_req+0x258>
    31d6:	e6ed      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    31d8:	0022      	movs	r2, r4
    31da:	2102      	movs	r1, #2
    31dc:	0028      	movs	r0, r5
    31de:	686b      	ldr	r3, [r5, #4]
    31e0:	4798      	blx	r3
    31e2:	2800      	cmp	r0, #0
    31e4:	db00      	blt.n	31e8 <usbdc_cb_ctl_req+0x268>
    31e6:	e0c8      	b.n	337a <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    31e8:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    31ea:	2d00      	cmp	r5, #0
    31ec:	d1f4      	bne.n	31d8 <usbdc_cb_ctl_req+0x258>
	return false;
    31ee:	2300      	movs	r3, #0
    31f0:	e6e0      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    31f2:	2b00      	cmp	r3, #0
    31f4:	d000      	beq.n	31f8 <usbdc_cb_ctl_req+0x278>
    31f6:	e0cd      	b.n	3394 <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    31f8:	231f      	movs	r3, #31
    31fa:	401a      	ands	r2, r3
    31fc:	b2d3      	uxtb	r3, r2
    31fe:	2b01      	cmp	r3, #1
    3200:	d800      	bhi.n	3204 <usbdc_cb_ctl_req+0x284>
    3202:	e092      	b.n	332a <usbdc_cb_ctl_req+0x3aa>
    3204:	2a02      	cmp	r2, #2
    3206:	d100      	bne.n	320a <usbdc_cb_ctl_req+0x28a>
    3208:	e09f      	b.n	334a <usbdc_cb_ctl_req+0x3ca>
		return false;
    320a:	2300      	movs	r3, #0
    320c:	e6d2      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    320e:	78a3      	ldrb	r3, [r4, #2]
    3210:	78e2      	ldrb	r2, [r4, #3]
    3212:	0212      	lsls	r2, r2, #8
    3214:	431a      	orrs	r2, r3
    3216:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    3218:	2b02      	cmp	r3, #2
    321a:	d033      	beq.n	3284 <usbdc_cb_ctl_req+0x304>
    321c:	2b03      	cmp	r3, #3
    321e:	d056      	beq.n	32ce <usbdc_cb_ctl_req+0x34e>
    3220:	2b01      	cmp	r3, #1
    3222:	d001      	beq.n	3228 <usbdc_cb_ctl_req+0x2a8>
	return false;
    3224:	2300      	movs	r3, #0
    3226:	e6c5      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    3228:	79a2      	ldrb	r2, [r4, #6]
    322a:	79e3      	ldrb	r3, [r4, #7]
    322c:	021b      	lsls	r3, r3, #8
    322e:	4313      	orrs	r3, r2
    3230:	1c1a      	adds	r2, r3, #0
    3232:	2b12      	cmp	r3, #18
    3234:	d900      	bls.n	3238 <usbdc_cb_ctl_req+0x2b8>
    3236:	2212      	movs	r2, #18
    3238:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    323a:	4b0d      	ldr	r3, [pc, #52]	; (3270 <usbdc_cb_ctl_req+0x2f0>)
    323c:	681b      	ldr	r3, [r3, #0]
    323e:	6859      	ldr	r1, [r3, #4]
    3240:	6818      	ldr	r0, [r3, #0]
    3242:	2201      	movs	r2, #1
    3244:	4b0c      	ldr	r3, [pc, #48]	; (3278 <usbdc_cb_ctl_req+0x2f8>)
    3246:	4798      	blx	r3
	if (!dev_desc) {
    3248:	2800      	cmp	r0, #0
    324a:	d100      	bne.n	324e <usbdc_cb_ctl_req+0x2ce>
    324c:	e0a4      	b.n	3398 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    324e:	2300      	movs	r3, #0
    3250:	0022      	movs	r2, r4
    3252:	0001      	movs	r1, r0
    3254:	0028      	movs	r0, r5
    3256:	4c05      	ldr	r4, [pc, #20]	; (326c <usbdc_cb_ctl_req+0x2ec>)
    3258:	47a0      	blx	r4
    325a:	4243      	negs	r3, r0
    325c:	4143      	adcs	r3, r0
    325e:	b2db      	uxtb	r3, r3
    3260:	e6a8      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
    3262:	46c0      	nop			; (mov r8, r8)
    3264:	00002e09 	.word	0x00002e09
    3268:	00003bdc 	.word	0x00003bdc
    326c:	00002f65 	.word	0x00002f65
    3270:	20000af4 	.word	0x20000af4
    3274:	0000354d 	.word	0x0000354d
    3278:	000034d1 	.word	0x000034d1
    327c:	00002dc1 	.word	0x00002dc1
    3280:	0000123d 	.word	0x0000123d
	uint16_t length   = req->wLength;
    3284:	79a3      	ldrb	r3, [r4, #6]
    3286:	79e6      	ldrb	r6, [r4, #7]
    3288:	0236      	lsls	r6, r6, #8
    328a:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    328c:	4b46      	ldr	r3, [pc, #280]	; (33a8 <usbdc_cb_ctl_req+0x428>)
    328e:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    3290:	681b      	ldr	r3, [r3, #0]
    3292:	3201      	adds	r2, #1
    3294:	b2d2      	uxtb	r2, r2
    3296:	6859      	ldr	r1, [r3, #4]
    3298:	6818      	ldr	r0, [r3, #0]
    329a:	4b44      	ldr	r3, [pc, #272]	; (33ac <usbdc_cb_ctl_req+0x42c>)
    329c:	4798      	blx	r3
    329e:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    32a0:	d07c      	beq.n	339c <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    32a2:	78c3      	ldrb	r3, [r0, #3]
    32a4:	021b      	lsls	r3, r3, #8
    32a6:	7884      	ldrb	r4, [r0, #2]
    32a8:	18e4      	adds	r4, r4, r3
    32aa:	b2a4      	uxth	r4, r4
		need_zlp = false;
    32ac:	2300      	movs	r3, #0
	if (length <= total_len) {
    32ae:	42a6      	cmp	r6, r4
    32b0:	d905      	bls.n	32be <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    32b2:	3f01      	subs	r7, #1
    32b4:	403e      	ands	r6, r7
    32b6:	4273      	negs	r3, r6
    32b8:	4173      	adcs	r3, r6
    32ba:	b2db      	uxtb	r3, r3
		length = total_len;
    32bc:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    32be:	0032      	movs	r2, r6
    32c0:	0028      	movs	r0, r5
    32c2:	4c3b      	ldr	r4, [pc, #236]	; (33b0 <usbdc_cb_ctl_req+0x430>)
    32c4:	47a0      	blx	r4
    32c6:	4243      	negs	r3, r0
    32c8:	4143      	adcs	r3, r0
    32ca:	b2db      	uxtb	r3, r3
    32cc:	e672      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    32ce:	79a3      	ldrb	r3, [r4, #6]
    32d0:	79e1      	ldrb	r1, [r4, #7]
    32d2:	0209      	lsls	r1, r1, #8
    32d4:	4319      	orrs	r1, r3
    32d6:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    32d8:	4b33      	ldr	r3, [pc, #204]	; (33a8 <usbdc_cb_ctl_req+0x428>)
    32da:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    32dc:	681b      	ldr	r3, [r3, #0]
    32de:	b2d2      	uxtb	r2, r2
    32e0:	6859      	ldr	r1, [r3, #4]
    32e2:	6818      	ldr	r0, [r3, #0]
    32e4:	4b33      	ldr	r3, [pc, #204]	; (33b4 <usbdc_cb_ctl_req+0x434>)
    32e6:	4798      	blx	r3
    32e8:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    32ea:	d059      	beq.n	33a0 <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    32ec:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    32ee:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    32f0:	4294      	cmp	r4, r2
    32f2:	d906      	bls.n	3302 <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    32f4:	1e73      	subs	r3, r6, #1
    32f6:	4023      	ands	r3, r4
    32f8:	0018      	movs	r0, r3
    32fa:	4243      	negs	r3, r0
    32fc:	4143      	adcs	r3, r0
    32fe:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    3300:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    3302:	0022      	movs	r2, r4
    3304:	0028      	movs	r0, r5
    3306:	4c2a      	ldr	r4, [pc, #168]	; (33b0 <usbdc_cb_ctl_req+0x430>)
    3308:	47a0      	blx	r4
    330a:	4243      	negs	r3, r0
    330c:	4143      	adcs	r3, r0
    330e:	b2db      	uxtb	r3, r3
    3310:	e650      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    3312:	4b25      	ldr	r3, [pc, #148]	; (33a8 <usbdc_cb_ctl_req+0x428>)
    3314:	7eda      	ldrb	r2, [r3, #27]
    3316:	6959      	ldr	r1, [r3, #20]
    3318:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    331a:	6959      	ldr	r1, [r3, #20]
    331c:	2300      	movs	r3, #0
    331e:	2201      	movs	r2, #1
    3320:	0028      	movs	r0, r5
    3322:	4c23      	ldr	r4, [pc, #140]	; (33b0 <usbdc_cb_ctl_req+0x430>)
    3324:	47a0      	blx	r4
		return true;
    3326:	2301      	movs	r3, #1
    3328:	e644      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		st = 0;
    332a:	2300      	movs	r3, #0
    332c:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    332e:	4c1e      	ldr	r4, [pc, #120]	; (33a8 <usbdc_cb_ctl_req+0x428>)
    3330:	2202      	movs	r2, #2
    3332:	a902      	add	r1, sp, #8
    3334:	6960      	ldr	r0, [r4, #20]
    3336:	4b20      	ldr	r3, [pc, #128]	; (33b8 <usbdc_cb_ctl_req+0x438>)
    3338:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    333a:	6961      	ldr	r1, [r4, #20]
    333c:	2300      	movs	r3, #0
    333e:	2202      	movs	r2, #2
    3340:	0028      	movs	r0, r5
    3342:	4c1b      	ldr	r4, [pc, #108]	; (33b0 <usbdc_cb_ctl_req+0x430>)
    3344:	47a0      	blx	r4
	return true;
    3346:	2301      	movs	r3, #1
    3348:	e634      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    334a:	7920      	ldrb	r0, [r4, #4]
    334c:	2102      	movs	r1, #2
    334e:	4b1b      	ldr	r3, [pc, #108]	; (33bc <usbdc_cb_ctl_req+0x43c>)
    3350:	4798      	blx	r3
		if (st < 0) {
    3352:	2800      	cmp	r0, #0
    3354:	db03      	blt.n	335e <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    3356:	2301      	movs	r3, #1
    3358:	4018      	ands	r0, r3
    335a:	9002      	str	r0, [sp, #8]
    335c:	e7e7      	b.n	332e <usbdc_cb_ctl_req+0x3ae>
			return false;
    335e:	2300      	movs	r3, #0
    3360:	e628      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    3362:	4b11      	ldr	r3, [pc, #68]	; (33a8 <usbdc_cb_ctl_req+0x428>)
    3364:	2200      	movs	r2, #0
    3366:	6959      	ldr	r1, [r3, #20]
    3368:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    336a:	6959      	ldr	r1, [r3, #20]
    336c:	2300      	movs	r3, #0
    336e:	3201      	adds	r2, #1
    3370:	2000      	movs	r0, #0
    3372:	4c0f      	ldr	r4, [pc, #60]	; (33b0 <usbdc_cb_ctl_req+0x430>)
    3374:	47a0      	blx	r4
		return true;
    3376:	2301      	movs	r3, #1
    3378:	e61c      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    337a:	4b0b      	ldr	r3, [pc, #44]	; (33a8 <usbdc_cb_ctl_req+0x428>)
    337c:	695a      	ldr	r2, [r3, #20]
    337e:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3380:	6959      	ldr	r1, [r3, #20]
    3382:	2300      	movs	r3, #0
    3384:	2201      	movs	r2, #1
    3386:	2000      	movs	r0, #0
    3388:	4c09      	ldr	r4, [pc, #36]	; (33b0 <usbdc_cb_ctl_req+0x430>)
    338a:	47a0      	blx	r4
			return true;
    338c:	2301      	movs	r3, #1
    338e:	e611      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		return false;
    3390:	2300      	movs	r3, #0
    3392:	e60f      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		return false;
    3394:	2300      	movs	r3, #0
    3396:	e60d      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		return false;
    3398:	2300      	movs	r3, #0
    339a:	e60b      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		return false;
    339c:	2300      	movs	r3, #0
    339e:	e609      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
		return false;
    33a0:	2300      	movs	r3, #0
    33a2:	e607      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
			return false;
    33a4:	2300      	movs	r3, #0
    33a6:	e605      	b.n	2fb4 <usbdc_cb_ctl_req+0x34>
    33a8:	20000af4 	.word	0x20000af4
    33ac:	0000354d 	.word	0x0000354d
    33b0:	00002f65 	.word	0x00002f65
    33b4:	000035b5 	.word	0x000035b5
    33b8:	00003829 	.word	0x00003829
    33bc:	0000123d 	.word	0x0000123d

000033c0 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    33c0:	b510      	push	{r4, lr}
	switch (type) {
    33c2:	2801      	cmp	r0, #1
    33c4:	d009      	beq.n	33da <usbdc_register_handler+0x1a>
    33c6:	2800      	cmp	r0, #0
    33c8:	d002      	beq.n	33d0 <usbdc_register_handler+0x10>
    33ca:	2802      	cmp	r0, #2
    33cc:	d00a      	beq.n	33e4 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    33ce:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    33d0:	4807      	ldr	r0, [pc, #28]	; (33f0 <usbdc_register_handler+0x30>)
    33d2:	3004      	adds	r0, #4
    33d4:	4b07      	ldr	r3, [pc, #28]	; (33f4 <usbdc_register_handler+0x34>)
    33d6:	4798      	blx	r3
		break;
    33d8:	e7f9      	b.n	33ce <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    33da:	4805      	ldr	r0, [pc, #20]	; (33f0 <usbdc_register_handler+0x30>)
    33dc:	3008      	adds	r0, #8
    33de:	4b05      	ldr	r3, [pc, #20]	; (33f4 <usbdc_register_handler+0x34>)
    33e0:	4798      	blx	r3
		break;
    33e2:	e7f4      	b.n	33ce <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    33e4:	4802      	ldr	r0, [pc, #8]	; (33f0 <usbdc_register_handler+0x30>)
    33e6:	300c      	adds	r0, #12
    33e8:	4b02      	ldr	r3, [pc, #8]	; (33f4 <usbdc_register_handler+0x34>)
    33ea:	4798      	blx	r3
}
    33ec:	e7ef      	b.n	33ce <usbdc_register_handler+0xe>
    33ee:	46c0      	nop			; (mov r8, r8)
    33f0:	20000af4 	.word	0x20000af4
    33f4:	00003615 	.word	0x00003615

000033f8 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    33f8:	b570      	push	{r4, r5, r6, lr}
    33fa:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    33fc:	1e43      	subs	r3, r0, #1
    33fe:	4198      	sbcs	r0, r3
    3400:	b2c0      	uxtb	r0, r0
    3402:	4a0c      	ldr	r2, [pc, #48]	; (3434 <usbdc_init+0x3c>)
    3404:	490c      	ldr	r1, [pc, #48]	; (3438 <usbdc_init+0x40>)
    3406:	4b0d      	ldr	r3, [pc, #52]	; (343c <usbdc_init+0x44>)
    3408:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    340a:	4b0d      	ldr	r3, [pc, #52]	; (3440 <usbdc_init+0x48>)
    340c:	4798      	blx	r3
	if (rc < 0) {
    340e:	2800      	cmp	r0, #0
    3410:	db0e      	blt.n	3430 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    3412:	4d0c      	ldr	r5, [pc, #48]	; (3444 <usbdc_init+0x4c>)
    3414:	2220      	movs	r2, #32
    3416:	2100      	movs	r1, #0
    3418:	0028      	movs	r0, r5
    341a:	4b0b      	ldr	r3, [pc, #44]	; (3448 <usbdc_init+0x50>)
    341c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    341e:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    3420:	490a      	ldr	r1, [pc, #40]	; (344c <usbdc_init+0x54>)
    3422:	2000      	movs	r0, #0
    3424:	4c0a      	ldr	r4, [pc, #40]	; (3450 <usbdc_init+0x58>)
    3426:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    3428:	490a      	ldr	r1, [pc, #40]	; (3454 <usbdc_init+0x5c>)
    342a:	2001      	movs	r0, #1
    342c:	47a0      	blx	r4

	return 0;
    342e:	2000      	movs	r0, #0
}
    3430:	bd70      	pop	{r4, r5, r6, pc}
    3432:	46c0      	nop			; (mov r8, r8)
    3434:	00000355 	.word	0x00000355
    3438:	00003c0c 	.word	0x00003c0c
    343c:	000012f5 	.word	0x000012f5
    3440:	00000fa1 	.word	0x00000fa1
    3444:	20000af4 	.word	0x20000af4
    3448:	000038ad 	.word	0x000038ad
    344c:	00002e4d 	.word	0x00002e4d
    3450:	00001005 	.word	0x00001005
    3454:	00002f41 	.word	0x00002f41

00003458 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    3458:	b510      	push	{r4, lr}
    345a:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    345c:	4802      	ldr	r0, [pc, #8]	; (3468 <usbdc_register_function+0x10>)
    345e:	3010      	adds	r0, #16
    3460:	4b02      	ldr	r3, [pc, #8]	; (346c <usbdc_register_function+0x14>)
    3462:	4798      	blx	r3
}
    3464:	bd10      	pop	{r4, pc}
    3466:	46c0      	nop			; (mov r8, r8)
    3468:	20000af4 	.word	0x20000af4
    346c:	00003615 	.word	0x00003615

00003470 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    3470:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    3472:	4b0b      	ldr	r3, [pc, #44]	; (34a0 <usbdc_start+0x30>)
    3474:	7e9b      	ldrb	r3, [r3, #26]
    3476:	2b00      	cmp	r3, #0
    3478:	d10c      	bne.n	3494 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    347a:	2800      	cmp	r0, #0
    347c:	d00d      	beq.n	349a <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    347e:	4b08      	ldr	r3, [pc, #32]	; (34a0 <usbdc_start+0x30>)
    3480:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    3482:	6802      	ldr	r2, [r0, #0]
    3484:	79d2      	ldrb	r2, [r2, #7]
    3486:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    3488:	2201      	movs	r2, #1
    348a:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    348c:	4b05      	ldr	r3, [pc, #20]	; (34a4 <usbdc_start+0x34>)
    348e:	4798      	blx	r3
	return ERR_NONE;
    3490:	2000      	movs	r0, #0
}
    3492:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    3494:	2004      	movs	r0, #4
    3496:	4240      	negs	r0, r0
    3498:	e7fb      	b.n	3492 <usbdc_start+0x22>
		return ERR_BAD_DATA;
    349a:	2009      	movs	r0, #9
    349c:	4240      	negs	r0, r0
    349e:	e7f8      	b.n	3492 <usbdc_start+0x22>
    34a0:	20000af4 	.word	0x20000af4
    34a4:	00001011 	.word	0x00001011

000034a8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    34a8:	b510      	push	{r4, lr}
	usb_d_attach();
    34aa:	4b01      	ldr	r3, [pc, #4]	; (34b0 <usbdc_attach+0x8>)
    34ac:	4798      	blx	r3
}
    34ae:	bd10      	pop	{r4, pc}
    34b0:	0000101d 	.word	0x0000101d

000034b4 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    34b4:	4b01      	ldr	r3, [pc, #4]	; (34bc <usbdc_get_ctrl_buffer+0x8>)
    34b6:	6958      	ldr	r0, [r3, #20]
}
    34b8:	4770      	bx	lr
    34ba:	46c0      	nop			; (mov r8, r8)
    34bc:	20000af4 	.word	0x20000af4

000034c0 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    34c0:	4b02      	ldr	r3, [pc, #8]	; (34cc <usbdc_get_state+0xc>)
    34c2:	7e98      	ldrb	r0, [r3, #26]
    34c4:	06c3      	lsls	r3, r0, #27
    34c6:	d500      	bpl.n	34ca <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    34c8:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    34ca:	4770      	bx	lr
    34cc:	20000af4 	.word	0x20000af4

000034d0 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    34d0:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    34d2:	4288      	cmp	r0, r1
    34d4:	d211      	bcs.n	34fa <usb_find_desc+0x2a>
	return desc[0];
    34d6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    34d8:	2b01      	cmp	r3, #1
    34da:	d910      	bls.n	34fe <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    34dc:	7844      	ldrb	r4, [r0, #1]
    34de:	4294      	cmp	r4, r2
    34e0:	d00a      	beq.n	34f8 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    34e2:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    34e4:	4281      	cmp	r1, r0
    34e6:	d906      	bls.n	34f6 <usb_find_desc+0x26>
	return desc[0];
    34e8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    34ea:	2b01      	cmp	r3, #1
    34ec:	d909      	bls.n	3502 <usb_find_desc+0x32>
	return desc[1];
    34ee:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    34f0:	4294      	cmp	r4, r2
    34f2:	d1f6      	bne.n	34e2 <usb_find_desc+0x12>
    34f4:	e000      	b.n	34f8 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    34f6:	2000      	movs	r0, #0
}
    34f8:	bd10      	pop	{r4, pc}
	return NULL;
    34fa:	2000      	movs	r0, #0
    34fc:	e7fc      	b.n	34f8 <usb_find_desc+0x28>
		_desc_len_check();
    34fe:	2000      	movs	r0, #0
    3500:	e7fa      	b.n	34f8 <usb_find_desc+0x28>
    3502:	2000      	movs	r0, #0
    3504:	e7f8      	b.n	34f8 <usb_find_desc+0x28>

00003506 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3506:	4288      	cmp	r0, r1
    3508:	d215      	bcs.n	3536 <usb_find_ep_desc+0x30>
	return desc[0];
    350a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    350c:	2b01      	cmp	r3, #1
    350e:	d914      	bls.n	353a <usb_find_ep_desc+0x34>
	return desc[1];
    3510:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3512:	2a04      	cmp	r2, #4
    3514:	d013      	beq.n	353e <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3516:	2a05      	cmp	r2, #5
    3518:	d00c      	beq.n	3534 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    351a:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    351c:	4281      	cmp	r1, r0
    351e:	d908      	bls.n	3532 <usb_find_ep_desc+0x2c>
	return desc[0];
    3520:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3522:	2b01      	cmp	r3, #1
    3524:	d90d      	bls.n	3542 <usb_find_ep_desc+0x3c>
	return desc[1];
    3526:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3528:	2a04      	cmp	r2, #4
    352a:	d00c      	beq.n	3546 <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    352c:	2a05      	cmp	r2, #5
    352e:	d1f4      	bne.n	351a <usb_find_ep_desc+0x14>
    3530:	e000      	b.n	3534 <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3532:	2000      	movs	r0, #0
}
    3534:	4770      	bx	lr
	return NULL;
    3536:	2000      	movs	r0, #0
    3538:	e7fc      	b.n	3534 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    353a:	2000      	movs	r0, #0
    353c:	e7fa      	b.n	3534 <usb_find_ep_desc+0x2e>
	return NULL;
    353e:	2000      	movs	r0, #0
    3540:	e7f8      	b.n	3534 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    3542:	2000      	movs	r0, #0
    3544:	e7f6      	b.n	3534 <usb_find_ep_desc+0x2e>
	return NULL;
    3546:	2000      	movs	r0, #0
    3548:	e7f4      	b.n	3534 <usb_find_ep_desc+0x2e>
	...

0000354c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    354c:	b570      	push	{r4, r5, r6, lr}
    354e:	000c      	movs	r4, r1
    3550:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    3552:	2202      	movs	r2, #2
    3554:	4b16      	ldr	r3, [pc, #88]	; (35b0 <usb_find_cfg_desc+0x64>)
    3556:	4798      	blx	r3
	if (!desc) {
    3558:	2800      	cmp	r0, #0
    355a:	d01d      	beq.n	3598 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    355c:	4284      	cmp	r4, r0
    355e:	d91c      	bls.n	359a <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    3560:	7803      	ldrb	r3, [r0, #0]
    3562:	2b01      	cmp	r3, #1
    3564:	d91b      	bls.n	359e <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    3566:	7843      	ldrb	r3, [r0, #1]
    3568:	2b02      	cmp	r3, #2
    356a:	d11a      	bne.n	35a2 <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    356c:	7943      	ldrb	r3, [r0, #5]
    356e:	42ab      	cmp	r3, r5
    3570:	d012      	beq.n	3598 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    3572:	78c2      	ldrb	r2, [r0, #3]
    3574:	0212      	lsls	r2, r2, #8
    3576:	7883      	ldrb	r3, [r0, #2]
    3578:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    357a:	b29b      	uxth	r3, r3
    357c:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    357e:	4284      	cmp	r4, r0
    3580:	d909      	bls.n	3596 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    3582:	7803      	ldrb	r3, [r0, #0]
    3584:	2b01      	cmp	r3, #1
    3586:	d90e      	bls.n	35a6 <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    3588:	7843      	ldrb	r3, [r0, #1]
    358a:	2b02      	cmp	r3, #2
    358c:	d10d      	bne.n	35aa <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    358e:	7943      	ldrb	r3, [r0, #5]
    3590:	42ab      	cmp	r3, r5
    3592:	d1ee      	bne.n	3572 <usb_find_cfg_desc+0x26>
    3594:	e000      	b.n	3598 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    3596:	2000      	movs	r0, #0
}
    3598:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    359a:	2000      	movs	r0, #0
    359c:	e7fc      	b.n	3598 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    359e:	2000      	movs	r0, #0
    35a0:	e7fa      	b.n	3598 <usb_find_cfg_desc+0x4c>
	return NULL;
    35a2:	2000      	movs	r0, #0
    35a4:	e7f8      	b.n	3598 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    35a6:	2000      	movs	r0, #0
    35a8:	e7f6      	b.n	3598 <usb_find_cfg_desc+0x4c>
	return NULL;
    35aa:	2000      	movs	r0, #0
    35ac:	e7f4      	b.n	3598 <usb_find_cfg_desc+0x4c>
    35ae:	46c0      	nop			; (mov r8, r8)
    35b0:	000034d1 	.word	0x000034d1

000035b4 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    35b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35b6:	000d      	movs	r5, r1
    35b8:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    35ba:	4288      	cmp	r0, r1
    35bc:	d212      	bcs.n	35e4 <usb_find_str_desc+0x30>
    35be:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    35c0:	4e0a      	ldr	r6, [pc, #40]	; (35ec <usb_find_str_desc+0x38>)
    35c2:	2203      	movs	r2, #3
    35c4:	0029      	movs	r1, r5
    35c6:	47b0      	blx	r6
		if (desc) {
    35c8:	2800      	cmp	r0, #0
    35ca:	d00e      	beq.n	35ea <usb_find_str_desc+0x36>
	return desc[0];
    35cc:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    35ce:	2b01      	cmp	r3, #1
    35d0:	d90a      	bls.n	35e8 <usb_find_str_desc+0x34>
			if (i == str_index) {
    35d2:	42a7      	cmp	r7, r4
    35d4:	d009      	beq.n	35ea <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    35d6:	3401      	adds	r4, #1
    35d8:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    35da:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    35dc:	4285      	cmp	r5, r0
    35de:	d8f0      	bhi.n	35c2 <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    35e0:	2000      	movs	r0, #0
    35e2:	e002      	b.n	35ea <usb_find_str_desc+0x36>
    35e4:	2000      	movs	r0, #0
    35e6:	e000      	b.n	35ea <usb_find_str_desc+0x36>
			_desc_len_check();
    35e8:	2000      	movs	r0, #0
}
    35ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35ec:	000034d1 	.word	0x000034d1

000035f0 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    35f0:	6803      	ldr	r3, [r0, #0]
    35f2:	2b00      	cmp	r3, #0
    35f4:	d00a      	beq.n	360c <is_list_element+0x1c>
		if (it == element) {
    35f6:	428b      	cmp	r3, r1
    35f8:	d00a      	beq.n	3610 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    35fa:	681b      	ldr	r3, [r3, #0]
    35fc:	2b00      	cmp	r3, #0
    35fe:	d003      	beq.n	3608 <is_list_element+0x18>
		if (it == element) {
    3600:	4299      	cmp	r1, r3
    3602:	d1fa      	bne.n	35fa <is_list_element+0xa>
			return true;
    3604:	2001      	movs	r0, #1
    3606:	e000      	b.n	360a <is_list_element+0x1a>
		}
	}

	return false;
    3608:	2000      	movs	r0, #0
}
    360a:	4770      	bx	lr
	return false;
    360c:	2000      	movs	r0, #0
    360e:	e7fc      	b.n	360a <is_list_element+0x1a>
			return true;
    3610:	2001      	movs	r0, #1
    3612:	e7fa      	b.n	360a <is_list_element+0x1a>

00003614 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3614:	b570      	push	{r4, r5, r6, lr}
    3616:	0005      	movs	r5, r0
    3618:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    361a:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    361c:	4b0a      	ldr	r3, [pc, #40]	; (3648 <list_insert_at_end+0x34>)
    361e:	4798      	blx	r3
    3620:	2301      	movs	r3, #1
    3622:	4058      	eors	r0, r3
    3624:	b2c0      	uxtb	r0, r0
    3626:	224f      	movs	r2, #79	; 0x4f
    3628:	4908      	ldr	r1, [pc, #32]	; (364c <list_insert_at_end+0x38>)
    362a:	4b09      	ldr	r3, [pc, #36]	; (3650 <list_insert_at_end+0x3c>)
    362c:	4798      	blx	r3

	if (!list->head) {
    362e:	682b      	ldr	r3, [r5, #0]
    3630:	2b00      	cmp	r3, #0
    3632:	d103      	bne.n	363c <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    3634:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    3636:	6033      	str	r3, [r6, #0]
		return;
    3638:	e005      	b.n	3646 <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    363a:	001c      	movs	r4, r3
	while (it->next) {
    363c:	6823      	ldr	r3, [r4, #0]
    363e:	2b00      	cmp	r3, #0
    3640:	d1fb      	bne.n	363a <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    3642:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    3644:	6033      	str	r3, [r6, #0]
}
    3646:	bd70      	pop	{r4, r5, r6, pc}
    3648:	000035f1 	.word	0x000035f1
    364c:	00003c24 	.word	0x00003c24
    3650:	000012f5 	.word	0x000012f5

00003654 <__aeabi_atexit>:
    3654:	000b      	movs	r3, r1
    3656:	b510      	push	{r4, lr}
    3658:	0001      	movs	r1, r0
    365a:	0018      	movs	r0, r3
    365c:	f000 f8b8 	bl	37d0 <__cxa_atexit>
    3660:	bd10      	pop	{r4, pc}
    3662:	46c0      	nop			; (mov r8, r8)

00003664 <__udivsi3>:
    3664:	2200      	movs	r2, #0
    3666:	0843      	lsrs	r3, r0, #1
    3668:	428b      	cmp	r3, r1
    366a:	d374      	bcc.n	3756 <__udivsi3+0xf2>
    366c:	0903      	lsrs	r3, r0, #4
    366e:	428b      	cmp	r3, r1
    3670:	d35f      	bcc.n	3732 <__udivsi3+0xce>
    3672:	0a03      	lsrs	r3, r0, #8
    3674:	428b      	cmp	r3, r1
    3676:	d344      	bcc.n	3702 <__udivsi3+0x9e>
    3678:	0b03      	lsrs	r3, r0, #12
    367a:	428b      	cmp	r3, r1
    367c:	d328      	bcc.n	36d0 <__udivsi3+0x6c>
    367e:	0c03      	lsrs	r3, r0, #16
    3680:	428b      	cmp	r3, r1
    3682:	d30d      	bcc.n	36a0 <__udivsi3+0x3c>
    3684:	22ff      	movs	r2, #255	; 0xff
    3686:	0209      	lsls	r1, r1, #8
    3688:	ba12      	rev	r2, r2
    368a:	0c03      	lsrs	r3, r0, #16
    368c:	428b      	cmp	r3, r1
    368e:	d302      	bcc.n	3696 <__udivsi3+0x32>
    3690:	1212      	asrs	r2, r2, #8
    3692:	0209      	lsls	r1, r1, #8
    3694:	d065      	beq.n	3762 <__udivsi3+0xfe>
    3696:	0b03      	lsrs	r3, r0, #12
    3698:	428b      	cmp	r3, r1
    369a:	d319      	bcc.n	36d0 <__udivsi3+0x6c>
    369c:	e000      	b.n	36a0 <__udivsi3+0x3c>
    369e:	0a09      	lsrs	r1, r1, #8
    36a0:	0bc3      	lsrs	r3, r0, #15
    36a2:	428b      	cmp	r3, r1
    36a4:	d301      	bcc.n	36aa <__udivsi3+0x46>
    36a6:	03cb      	lsls	r3, r1, #15
    36a8:	1ac0      	subs	r0, r0, r3
    36aa:	4152      	adcs	r2, r2
    36ac:	0b83      	lsrs	r3, r0, #14
    36ae:	428b      	cmp	r3, r1
    36b0:	d301      	bcc.n	36b6 <__udivsi3+0x52>
    36b2:	038b      	lsls	r3, r1, #14
    36b4:	1ac0      	subs	r0, r0, r3
    36b6:	4152      	adcs	r2, r2
    36b8:	0b43      	lsrs	r3, r0, #13
    36ba:	428b      	cmp	r3, r1
    36bc:	d301      	bcc.n	36c2 <__udivsi3+0x5e>
    36be:	034b      	lsls	r3, r1, #13
    36c0:	1ac0      	subs	r0, r0, r3
    36c2:	4152      	adcs	r2, r2
    36c4:	0b03      	lsrs	r3, r0, #12
    36c6:	428b      	cmp	r3, r1
    36c8:	d301      	bcc.n	36ce <__udivsi3+0x6a>
    36ca:	030b      	lsls	r3, r1, #12
    36cc:	1ac0      	subs	r0, r0, r3
    36ce:	4152      	adcs	r2, r2
    36d0:	0ac3      	lsrs	r3, r0, #11
    36d2:	428b      	cmp	r3, r1
    36d4:	d301      	bcc.n	36da <__udivsi3+0x76>
    36d6:	02cb      	lsls	r3, r1, #11
    36d8:	1ac0      	subs	r0, r0, r3
    36da:	4152      	adcs	r2, r2
    36dc:	0a83      	lsrs	r3, r0, #10
    36de:	428b      	cmp	r3, r1
    36e0:	d301      	bcc.n	36e6 <__udivsi3+0x82>
    36e2:	028b      	lsls	r3, r1, #10
    36e4:	1ac0      	subs	r0, r0, r3
    36e6:	4152      	adcs	r2, r2
    36e8:	0a43      	lsrs	r3, r0, #9
    36ea:	428b      	cmp	r3, r1
    36ec:	d301      	bcc.n	36f2 <__udivsi3+0x8e>
    36ee:	024b      	lsls	r3, r1, #9
    36f0:	1ac0      	subs	r0, r0, r3
    36f2:	4152      	adcs	r2, r2
    36f4:	0a03      	lsrs	r3, r0, #8
    36f6:	428b      	cmp	r3, r1
    36f8:	d301      	bcc.n	36fe <__udivsi3+0x9a>
    36fa:	020b      	lsls	r3, r1, #8
    36fc:	1ac0      	subs	r0, r0, r3
    36fe:	4152      	adcs	r2, r2
    3700:	d2cd      	bcs.n	369e <__udivsi3+0x3a>
    3702:	09c3      	lsrs	r3, r0, #7
    3704:	428b      	cmp	r3, r1
    3706:	d301      	bcc.n	370c <__udivsi3+0xa8>
    3708:	01cb      	lsls	r3, r1, #7
    370a:	1ac0      	subs	r0, r0, r3
    370c:	4152      	adcs	r2, r2
    370e:	0983      	lsrs	r3, r0, #6
    3710:	428b      	cmp	r3, r1
    3712:	d301      	bcc.n	3718 <__udivsi3+0xb4>
    3714:	018b      	lsls	r3, r1, #6
    3716:	1ac0      	subs	r0, r0, r3
    3718:	4152      	adcs	r2, r2
    371a:	0943      	lsrs	r3, r0, #5
    371c:	428b      	cmp	r3, r1
    371e:	d301      	bcc.n	3724 <__udivsi3+0xc0>
    3720:	014b      	lsls	r3, r1, #5
    3722:	1ac0      	subs	r0, r0, r3
    3724:	4152      	adcs	r2, r2
    3726:	0903      	lsrs	r3, r0, #4
    3728:	428b      	cmp	r3, r1
    372a:	d301      	bcc.n	3730 <__udivsi3+0xcc>
    372c:	010b      	lsls	r3, r1, #4
    372e:	1ac0      	subs	r0, r0, r3
    3730:	4152      	adcs	r2, r2
    3732:	08c3      	lsrs	r3, r0, #3
    3734:	428b      	cmp	r3, r1
    3736:	d301      	bcc.n	373c <__udivsi3+0xd8>
    3738:	00cb      	lsls	r3, r1, #3
    373a:	1ac0      	subs	r0, r0, r3
    373c:	4152      	adcs	r2, r2
    373e:	0883      	lsrs	r3, r0, #2
    3740:	428b      	cmp	r3, r1
    3742:	d301      	bcc.n	3748 <__udivsi3+0xe4>
    3744:	008b      	lsls	r3, r1, #2
    3746:	1ac0      	subs	r0, r0, r3
    3748:	4152      	adcs	r2, r2
    374a:	0843      	lsrs	r3, r0, #1
    374c:	428b      	cmp	r3, r1
    374e:	d301      	bcc.n	3754 <__udivsi3+0xf0>
    3750:	004b      	lsls	r3, r1, #1
    3752:	1ac0      	subs	r0, r0, r3
    3754:	4152      	adcs	r2, r2
    3756:	1a41      	subs	r1, r0, r1
    3758:	d200      	bcs.n	375c <__udivsi3+0xf8>
    375a:	4601      	mov	r1, r0
    375c:	4152      	adcs	r2, r2
    375e:	4610      	mov	r0, r2
    3760:	4770      	bx	lr
    3762:	e7ff      	b.n	3764 <__udivsi3+0x100>
    3764:	b501      	push	{r0, lr}
    3766:	2000      	movs	r0, #0
    3768:	f000 f806 	bl	3778 <__aeabi_idiv0>
    376c:	bd02      	pop	{r1, pc}
    376e:	46c0      	nop			; (mov r8, r8)

00003770 <__aeabi_uidivmod>:
    3770:	2900      	cmp	r1, #0
    3772:	d0f7      	beq.n	3764 <__udivsi3+0x100>
    3774:	e776      	b.n	3664 <__udivsi3>
    3776:	4770      	bx	lr

00003778 <__aeabi_idiv0>:
    3778:	4770      	bx	lr
    377a:	46c0      	nop			; (mov r8, r8)

0000377c <__aeabi_lmul>:
    377c:	b5f0      	push	{r4, r5, r6, r7, lr}
    377e:	46ce      	mov	lr, r9
    3780:	4647      	mov	r7, r8
    3782:	0415      	lsls	r5, r2, #16
    3784:	0c2d      	lsrs	r5, r5, #16
    3786:	002e      	movs	r6, r5
    3788:	b580      	push	{r7, lr}
    378a:	0407      	lsls	r7, r0, #16
    378c:	0c14      	lsrs	r4, r2, #16
    378e:	0c3f      	lsrs	r7, r7, #16
    3790:	4699      	mov	r9, r3
    3792:	0c03      	lsrs	r3, r0, #16
    3794:	437e      	muls	r6, r7
    3796:	435d      	muls	r5, r3
    3798:	4367      	muls	r7, r4
    379a:	4363      	muls	r3, r4
    379c:	197f      	adds	r7, r7, r5
    379e:	0c34      	lsrs	r4, r6, #16
    37a0:	19e4      	adds	r4, r4, r7
    37a2:	469c      	mov	ip, r3
    37a4:	42a5      	cmp	r5, r4
    37a6:	d903      	bls.n	37b0 <__aeabi_lmul+0x34>
    37a8:	2380      	movs	r3, #128	; 0x80
    37aa:	025b      	lsls	r3, r3, #9
    37ac:	4698      	mov	r8, r3
    37ae:	44c4      	add	ip, r8
    37b0:	464b      	mov	r3, r9
    37b2:	4351      	muls	r1, r2
    37b4:	4343      	muls	r3, r0
    37b6:	0436      	lsls	r6, r6, #16
    37b8:	0c36      	lsrs	r6, r6, #16
    37ba:	0c25      	lsrs	r5, r4, #16
    37bc:	0424      	lsls	r4, r4, #16
    37be:	4465      	add	r5, ip
    37c0:	19a4      	adds	r4, r4, r6
    37c2:	1859      	adds	r1, r3, r1
    37c4:	1949      	adds	r1, r1, r5
    37c6:	0020      	movs	r0, r4
    37c8:	bc0c      	pop	{r2, r3}
    37ca:	4690      	mov	r8, r2
    37cc:	4699      	mov	r9, r3
    37ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000037d0 <__cxa_atexit>:
    37d0:	b510      	push	{r4, lr}
    37d2:	0013      	movs	r3, r2
    37d4:	000a      	movs	r2, r1
    37d6:	0001      	movs	r1, r0
    37d8:	2002      	movs	r0, #2
    37da:	f000 f8cb 	bl	3974 <__register_exitproc>
    37de:	bd10      	pop	{r4, pc}

000037e0 <__libc_init_array>:
    37e0:	b570      	push	{r4, r5, r6, lr}
    37e2:	4e0d      	ldr	r6, [pc, #52]	; (3818 <__libc_init_array+0x38>)
    37e4:	4d0d      	ldr	r5, [pc, #52]	; (381c <__libc_init_array+0x3c>)
    37e6:	2400      	movs	r4, #0
    37e8:	1bad      	subs	r5, r5, r6
    37ea:	10ad      	asrs	r5, r5, #2
    37ec:	d005      	beq.n	37fa <__libc_init_array+0x1a>
    37ee:	00a3      	lsls	r3, r4, #2
    37f0:	58f3      	ldr	r3, [r6, r3]
    37f2:	3401      	adds	r4, #1
    37f4:	4798      	blx	r3
    37f6:	42a5      	cmp	r5, r4
    37f8:	d1f9      	bne.n	37ee <__libc_init_array+0xe>
    37fa:	f000 fa25 	bl	3c48 <_init>
    37fe:	4e08      	ldr	r6, [pc, #32]	; (3820 <__libc_init_array+0x40>)
    3800:	4d08      	ldr	r5, [pc, #32]	; (3824 <__libc_init_array+0x44>)
    3802:	2400      	movs	r4, #0
    3804:	1bad      	subs	r5, r5, r6
    3806:	10ad      	asrs	r5, r5, #2
    3808:	d005      	beq.n	3816 <__libc_init_array+0x36>
    380a:	00a3      	lsls	r3, r4, #2
    380c:	58f3      	ldr	r3, [r6, r3]
    380e:	3401      	adds	r4, #1
    3810:	4798      	blx	r3
    3812:	42a5      	cmp	r5, r4
    3814:	d1f9      	bne.n	380a <__libc_init_array+0x2a>
    3816:	bd70      	pop	{r4, r5, r6, pc}
    3818:	00003c54 	.word	0x00003c54
    381c:	00003c54 	.word	0x00003c54
    3820:	00003c54 	.word	0x00003c54
    3824:	00003c64 	.word	0x00003c64

00003828 <memcpy>:
    3828:	b5f0      	push	{r4, r5, r6, r7, lr}
    382a:	0005      	movs	r5, r0
    382c:	2a0f      	cmp	r2, #15
    382e:	d92f      	bls.n	3890 <memcpy+0x68>
    3830:	000b      	movs	r3, r1
    3832:	4303      	orrs	r3, r0
    3834:	079b      	lsls	r3, r3, #30
    3836:	d134      	bne.n	38a2 <memcpy+0x7a>
    3838:	0016      	movs	r6, r2
    383a:	000c      	movs	r4, r1
    383c:	0003      	movs	r3, r0
    383e:	3e10      	subs	r6, #16
    3840:	0935      	lsrs	r5, r6, #4
    3842:	3501      	adds	r5, #1
    3844:	012d      	lsls	r5, r5, #4
    3846:	1945      	adds	r5, r0, r5
    3848:	6827      	ldr	r7, [r4, #0]
    384a:	601f      	str	r7, [r3, #0]
    384c:	6867      	ldr	r7, [r4, #4]
    384e:	605f      	str	r7, [r3, #4]
    3850:	68a7      	ldr	r7, [r4, #8]
    3852:	609f      	str	r7, [r3, #8]
    3854:	68e7      	ldr	r7, [r4, #12]
    3856:	3410      	adds	r4, #16
    3858:	60df      	str	r7, [r3, #12]
    385a:	3310      	adds	r3, #16
    385c:	429d      	cmp	r5, r3
    385e:	d1f3      	bne.n	3848 <memcpy+0x20>
    3860:	230f      	movs	r3, #15
    3862:	439e      	bics	r6, r3
    3864:	3610      	adds	r6, #16
    3866:	1985      	adds	r5, r0, r6
    3868:	1989      	adds	r1, r1, r6
    386a:	4013      	ands	r3, r2
    386c:	2b03      	cmp	r3, #3
    386e:	d91a      	bls.n	38a6 <memcpy+0x7e>
    3870:	1f1e      	subs	r6, r3, #4
    3872:	2300      	movs	r3, #0
    3874:	08b4      	lsrs	r4, r6, #2
    3876:	3401      	adds	r4, #1
    3878:	00a4      	lsls	r4, r4, #2
    387a:	58cf      	ldr	r7, [r1, r3]
    387c:	50ef      	str	r7, [r5, r3]
    387e:	3304      	adds	r3, #4
    3880:	42a3      	cmp	r3, r4
    3882:	d1fa      	bne.n	387a <memcpy+0x52>
    3884:	2403      	movs	r4, #3
    3886:	43a6      	bics	r6, r4
    3888:	1d33      	adds	r3, r6, #4
    388a:	4022      	ands	r2, r4
    388c:	18c9      	adds	r1, r1, r3
    388e:	18ed      	adds	r5, r5, r3
    3890:	2a00      	cmp	r2, #0
    3892:	d005      	beq.n	38a0 <memcpy+0x78>
    3894:	2300      	movs	r3, #0
    3896:	5ccc      	ldrb	r4, [r1, r3]
    3898:	54ec      	strb	r4, [r5, r3]
    389a:	3301      	adds	r3, #1
    389c:	4293      	cmp	r3, r2
    389e:	d1fa      	bne.n	3896 <memcpy+0x6e>
    38a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38a2:	0005      	movs	r5, r0
    38a4:	e7f6      	b.n	3894 <memcpy+0x6c>
    38a6:	001a      	movs	r2, r3
    38a8:	e7f2      	b.n	3890 <memcpy+0x68>
    38aa:	46c0      	nop			; (mov r8, r8)

000038ac <memset>:
    38ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ae:	0783      	lsls	r3, r0, #30
    38b0:	d043      	beq.n	393a <memset+0x8e>
    38b2:	1e54      	subs	r4, r2, #1
    38b4:	2a00      	cmp	r2, #0
    38b6:	d03f      	beq.n	3938 <memset+0x8c>
    38b8:	b2ce      	uxtb	r6, r1
    38ba:	0002      	movs	r2, r0
    38bc:	2503      	movs	r5, #3
    38be:	e002      	b.n	38c6 <memset+0x1a>
    38c0:	001a      	movs	r2, r3
    38c2:	3c01      	subs	r4, #1
    38c4:	d338      	bcc.n	3938 <memset+0x8c>
    38c6:	1c53      	adds	r3, r2, #1
    38c8:	7016      	strb	r6, [r2, #0]
    38ca:	422b      	tst	r3, r5
    38cc:	d1f8      	bne.n	38c0 <memset+0x14>
    38ce:	2c03      	cmp	r4, #3
    38d0:	d92a      	bls.n	3928 <memset+0x7c>
    38d2:	22ff      	movs	r2, #255	; 0xff
    38d4:	400a      	ands	r2, r1
    38d6:	0215      	lsls	r5, r2, #8
    38d8:	4315      	orrs	r5, r2
    38da:	042a      	lsls	r2, r5, #16
    38dc:	4315      	orrs	r5, r2
    38de:	2c0f      	cmp	r4, #15
    38e0:	d914      	bls.n	390c <memset+0x60>
    38e2:	0027      	movs	r7, r4
    38e4:	001a      	movs	r2, r3
    38e6:	3f10      	subs	r7, #16
    38e8:	093e      	lsrs	r6, r7, #4
    38ea:	3601      	adds	r6, #1
    38ec:	0136      	lsls	r6, r6, #4
    38ee:	199e      	adds	r6, r3, r6
    38f0:	6015      	str	r5, [r2, #0]
    38f2:	6055      	str	r5, [r2, #4]
    38f4:	6095      	str	r5, [r2, #8]
    38f6:	60d5      	str	r5, [r2, #12]
    38f8:	3210      	adds	r2, #16
    38fa:	4296      	cmp	r6, r2
    38fc:	d1f8      	bne.n	38f0 <memset+0x44>
    38fe:	220f      	movs	r2, #15
    3900:	4397      	bics	r7, r2
    3902:	3710      	adds	r7, #16
    3904:	19db      	adds	r3, r3, r7
    3906:	4014      	ands	r4, r2
    3908:	2c03      	cmp	r4, #3
    390a:	d90d      	bls.n	3928 <memset+0x7c>
    390c:	001a      	movs	r2, r3
    390e:	1f27      	subs	r7, r4, #4
    3910:	08be      	lsrs	r6, r7, #2
    3912:	3601      	adds	r6, #1
    3914:	00b6      	lsls	r6, r6, #2
    3916:	199e      	adds	r6, r3, r6
    3918:	c220      	stmia	r2!, {r5}
    391a:	42b2      	cmp	r2, r6
    391c:	d1fc      	bne.n	3918 <memset+0x6c>
    391e:	2203      	movs	r2, #3
    3920:	4397      	bics	r7, r2
    3922:	3704      	adds	r7, #4
    3924:	19db      	adds	r3, r3, r7
    3926:	4014      	ands	r4, r2
    3928:	2c00      	cmp	r4, #0
    392a:	d005      	beq.n	3938 <memset+0x8c>
    392c:	b2c9      	uxtb	r1, r1
    392e:	191c      	adds	r4, r3, r4
    3930:	7019      	strb	r1, [r3, #0]
    3932:	3301      	adds	r3, #1
    3934:	429c      	cmp	r4, r3
    3936:	d1fb      	bne.n	3930 <memset+0x84>
    3938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    393a:	0014      	movs	r4, r2
    393c:	0003      	movs	r3, r0
    393e:	e7c6      	b.n	38ce <memset+0x22>

00003940 <rand>:
    3940:	b510      	push	{r4, lr}
    3942:	4b09      	ldr	r3, [pc, #36]	; (3968 <rand+0x28>)
    3944:	4a09      	ldr	r2, [pc, #36]	; (396c <rand+0x2c>)
    3946:	681c      	ldr	r4, [r3, #0]
    3948:	4b09      	ldr	r3, [pc, #36]	; (3970 <rand+0x30>)
    394a:	34a8      	adds	r4, #168	; 0xa8
    394c:	6820      	ldr	r0, [r4, #0]
    394e:	6861      	ldr	r1, [r4, #4]
    3950:	f7ff ff14 	bl	377c <__aeabi_lmul>
    3954:	2201      	movs	r2, #1
    3956:	2300      	movs	r3, #0
    3958:	1880      	adds	r0, r0, r2
    395a:	4159      	adcs	r1, r3
    395c:	6020      	str	r0, [r4, #0]
    395e:	6061      	str	r1, [r4, #4]
    3960:	0048      	lsls	r0, r1, #1
    3962:	0840      	lsrs	r0, r0, #1
    3964:	bd10      	pop	{r4, pc}
    3966:	46c0      	nop			; (mov r8, r8)
    3968:	2000006c 	.word	0x2000006c
    396c:	4c957f2d 	.word	0x4c957f2d
    3970:	5851f42d 	.word	0x5851f42d

00003974 <__register_exitproc>:
    3974:	b5f0      	push	{r4, r5, r6, r7, lr}
    3976:	464e      	mov	r6, r9
    3978:	4645      	mov	r5, r8
    397a:	46de      	mov	lr, fp
    397c:	4657      	mov	r7, sl
    397e:	b5e0      	push	{r5, r6, r7, lr}
    3980:	4d36      	ldr	r5, [pc, #216]	; (3a5c <__register_exitproc+0xe8>)
    3982:	b083      	sub	sp, #12
    3984:	0006      	movs	r6, r0
    3986:	6828      	ldr	r0, [r5, #0]
    3988:	4698      	mov	r8, r3
    398a:	000f      	movs	r7, r1
    398c:	4691      	mov	r9, r2
    398e:	f000 f899 	bl	3ac4 <__retarget_lock_acquire_recursive>
    3992:	4b33      	ldr	r3, [pc, #204]	; (3a60 <__register_exitproc+0xec>)
    3994:	681c      	ldr	r4, [r3, #0]
    3996:	23a4      	movs	r3, #164	; 0xa4
    3998:	005b      	lsls	r3, r3, #1
    399a:	58e0      	ldr	r0, [r4, r3]
    399c:	2800      	cmp	r0, #0
    399e:	d052      	beq.n	3a46 <__register_exitproc+0xd2>
    39a0:	6843      	ldr	r3, [r0, #4]
    39a2:	2b1f      	cmp	r3, #31
    39a4:	dc13      	bgt.n	39ce <__register_exitproc+0x5a>
    39a6:	1c5a      	adds	r2, r3, #1
    39a8:	9201      	str	r2, [sp, #4]
    39aa:	2e00      	cmp	r6, #0
    39ac:	d128      	bne.n	3a00 <__register_exitproc+0x8c>
    39ae:	9a01      	ldr	r2, [sp, #4]
    39b0:	3302      	adds	r3, #2
    39b2:	009b      	lsls	r3, r3, #2
    39b4:	6042      	str	r2, [r0, #4]
    39b6:	501f      	str	r7, [r3, r0]
    39b8:	6828      	ldr	r0, [r5, #0]
    39ba:	f000 f885 	bl	3ac8 <__retarget_lock_release_recursive>
    39be:	2000      	movs	r0, #0
    39c0:	b003      	add	sp, #12
    39c2:	bc3c      	pop	{r2, r3, r4, r5}
    39c4:	4690      	mov	r8, r2
    39c6:	4699      	mov	r9, r3
    39c8:	46a2      	mov	sl, r4
    39ca:	46ab      	mov	fp, r5
    39cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39ce:	4b25      	ldr	r3, [pc, #148]	; (3a64 <__register_exitproc+0xf0>)
    39d0:	2b00      	cmp	r3, #0
    39d2:	d03d      	beq.n	3a50 <__register_exitproc+0xdc>
    39d4:	20c8      	movs	r0, #200	; 0xc8
    39d6:	0040      	lsls	r0, r0, #1
    39d8:	e000      	b.n	39dc <__register_exitproc+0x68>
    39da:	bf00      	nop
    39dc:	2800      	cmp	r0, #0
    39de:	d037      	beq.n	3a50 <__register_exitproc+0xdc>
    39e0:	22a4      	movs	r2, #164	; 0xa4
    39e2:	2300      	movs	r3, #0
    39e4:	0052      	lsls	r2, r2, #1
    39e6:	58a1      	ldr	r1, [r4, r2]
    39e8:	6043      	str	r3, [r0, #4]
    39ea:	6001      	str	r1, [r0, #0]
    39ec:	50a0      	str	r0, [r4, r2]
    39ee:	3240      	adds	r2, #64	; 0x40
    39f0:	5083      	str	r3, [r0, r2]
    39f2:	3204      	adds	r2, #4
    39f4:	5083      	str	r3, [r0, r2]
    39f6:	3301      	adds	r3, #1
    39f8:	9301      	str	r3, [sp, #4]
    39fa:	2300      	movs	r3, #0
    39fc:	2e00      	cmp	r6, #0
    39fe:	d0d6      	beq.n	39ae <__register_exitproc+0x3a>
    3a00:	009a      	lsls	r2, r3, #2
    3a02:	4692      	mov	sl, r2
    3a04:	4482      	add	sl, r0
    3a06:	464a      	mov	r2, r9
    3a08:	2188      	movs	r1, #136	; 0x88
    3a0a:	4654      	mov	r4, sl
    3a0c:	5062      	str	r2, [r4, r1]
    3a0e:	22c4      	movs	r2, #196	; 0xc4
    3a10:	0052      	lsls	r2, r2, #1
    3a12:	4691      	mov	r9, r2
    3a14:	4481      	add	r9, r0
    3a16:	464a      	mov	r2, r9
    3a18:	3987      	subs	r1, #135	; 0x87
    3a1a:	4099      	lsls	r1, r3
    3a1c:	6812      	ldr	r2, [r2, #0]
    3a1e:	468b      	mov	fp, r1
    3a20:	430a      	orrs	r2, r1
    3a22:	4694      	mov	ip, r2
    3a24:	464a      	mov	r2, r9
    3a26:	4661      	mov	r1, ip
    3a28:	6011      	str	r1, [r2, #0]
    3a2a:	2284      	movs	r2, #132	; 0x84
    3a2c:	4641      	mov	r1, r8
    3a2e:	0052      	lsls	r2, r2, #1
    3a30:	50a1      	str	r1, [r4, r2]
    3a32:	2e02      	cmp	r6, #2
    3a34:	d1bb      	bne.n	39ae <__register_exitproc+0x3a>
    3a36:	0002      	movs	r2, r0
    3a38:	465c      	mov	r4, fp
    3a3a:	328d      	adds	r2, #141	; 0x8d
    3a3c:	32ff      	adds	r2, #255	; 0xff
    3a3e:	6811      	ldr	r1, [r2, #0]
    3a40:	430c      	orrs	r4, r1
    3a42:	6014      	str	r4, [r2, #0]
    3a44:	e7b3      	b.n	39ae <__register_exitproc+0x3a>
    3a46:	0020      	movs	r0, r4
    3a48:	304d      	adds	r0, #77	; 0x4d
    3a4a:	30ff      	adds	r0, #255	; 0xff
    3a4c:	50e0      	str	r0, [r4, r3]
    3a4e:	e7a7      	b.n	39a0 <__register_exitproc+0x2c>
    3a50:	6828      	ldr	r0, [r5, #0]
    3a52:	f000 f839 	bl	3ac8 <__retarget_lock_release_recursive>
    3a56:	2001      	movs	r0, #1
    3a58:	4240      	negs	r0, r0
    3a5a:	e7b1      	b.n	39c0 <__register_exitproc+0x4c>
    3a5c:	20000498 	.word	0x20000498
    3a60:	00003c44 	.word	0x00003c44
    3a64:	00000000 	.word	0x00000000

00003a68 <register_fini>:
    3a68:	4b03      	ldr	r3, [pc, #12]	; (3a78 <register_fini+0x10>)
    3a6a:	b510      	push	{r4, lr}
    3a6c:	2b00      	cmp	r3, #0
    3a6e:	d002      	beq.n	3a76 <register_fini+0xe>
    3a70:	4802      	ldr	r0, [pc, #8]	; (3a7c <register_fini+0x14>)
    3a72:	f000 f805 	bl	3a80 <atexit>
    3a76:	bd10      	pop	{r4, pc}
    3a78:	00000000 	.word	0x00000000
    3a7c:	00003a91 	.word	0x00003a91

00003a80 <atexit>:
    3a80:	b510      	push	{r4, lr}
    3a82:	0001      	movs	r1, r0
    3a84:	2300      	movs	r3, #0
    3a86:	2200      	movs	r2, #0
    3a88:	2000      	movs	r0, #0
    3a8a:	f7ff ff73 	bl	3974 <__register_exitproc>
    3a8e:	bd10      	pop	{r4, pc}

00003a90 <__libc_fini_array>:
    3a90:	b570      	push	{r4, r5, r6, lr}
    3a92:	4b09      	ldr	r3, [pc, #36]	; (3ab8 <__libc_fini_array+0x28>)
    3a94:	4c09      	ldr	r4, [pc, #36]	; (3abc <__libc_fini_array+0x2c>)
    3a96:	1ae4      	subs	r4, r4, r3
    3a98:	10a4      	asrs	r4, r4, #2
    3a9a:	d009      	beq.n	3ab0 <__libc_fini_array+0x20>
    3a9c:	4a08      	ldr	r2, [pc, #32]	; (3ac0 <__libc_fini_array+0x30>)
    3a9e:	18a5      	adds	r5, r4, r2
    3aa0:	00ad      	lsls	r5, r5, #2
    3aa2:	18ed      	adds	r5, r5, r3
    3aa4:	682b      	ldr	r3, [r5, #0]
    3aa6:	3c01      	subs	r4, #1
    3aa8:	4798      	blx	r3
    3aaa:	3d04      	subs	r5, #4
    3aac:	2c00      	cmp	r4, #0
    3aae:	d1f9      	bne.n	3aa4 <__libc_fini_array+0x14>
    3ab0:	f000 f8d8 	bl	3c64 <_fini>
    3ab4:	bd70      	pop	{r4, r5, r6, pc}
    3ab6:	46c0      	nop			; (mov r8, r8)
    3ab8:	00003c70 	.word	0x00003c70
    3abc:	00003c74 	.word	0x00003c74
    3ac0:	3fffffff 	.word	0x3fffffff

00003ac4 <__retarget_lock_acquire_recursive>:
    3ac4:	4770      	bx	lr
    3ac6:	46c0      	nop			; (mov r8, r8)

00003ac8 <__retarget_lock_release_recursive>:
    3ac8:	4770      	bx	lr
    3aca:	46c0      	nop			; (mov r8, r8)

00003acc <defaultPreferences>:
    3acc:	00fa 0000 0032 0000                         ....2...

00003ad4 <defaultParameters>:
    3ad4:	02ee 02bc 07d0 02ee 0320 07d0 e000 450d     ........ ......E
    3ae4:	de6a 400d 0000 4140 0000 429a 0000 40c0     j..@..@A...B...@
    3af4:	0000 4140 0000 42a4 0000 430c 0000 4302     ..@A...B...C...C
    3b04:	d289 3e7e 8000 4404 8000 4404 0000 41a0     ..~>...D...D...A
    3b14:	0000 41f0 0000 3f80 4000 451c 8000 453b     ...A...?.@.E..;E
    3b24:	1f40 0000 1f40 0000 1f40 0000 1f40 0000     @...@...@...@...
    3b34:	1388 0000 1388 0000 0064 0000 0064 0000     ........d...d...
    3b44:	0000 4100 0000 428c 0000 0000 2e2e 682f     ...A...B....../h
    3b54:	6c61 732f 6372 682f 6c61 695f 2e6f 0063     al/src/hal_io.c.
    3b64:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
    3b74:	6970 6d5f 735f 6e79 2e63 0063 2e2e 682f     pi_m_sync.c.../h
    3b84:	6c70 732f 7265 6f63 2f6d 7068 5f6c 6573     pl/sercom/hpl_se
    3b94:	6372 6d6f 632e 0000 2000 0000               rcom.c... ..

00003ba0 <_usb_ep_cfgs>:
    3ba0:	0a10 2000 0000 0000 0040 0000 09d0 2000     ... ....@...... 
    3bb0:	0990 2000 0040 0040 0950 2000 0910 2000     ... @.@.P.. ... 
    3bc0:	0040 0040 08d0 2000 0890 2000 0040 0040     @.@.... ... @.@.
    3bd0:	0850 2000 0000 0000 0040 0000 3390 0000     P.. ....@....3..
    3be0:	3078 0000 3390 0000 30aa 0000 3390 0000     x0...3...0...3..
    3bf0:	2fce 0000 3390 0000 3390 0000 3390 0000     ./...3...3...3..
    3c00:	2fe2 0000 3390 0000 30de 0000 2e2e 752f     ./...3...0..../u
    3c10:	6273 642f 7665 6369 2f65 7375 6462 2e63     sb/device/usbdc.
    3c20:	0063 0000 2e2e 682f 6c61 752f 6974 736c     c...../hal/utils
    3c30:	732f 6372 752f 6974 736c 6c5f 7369 2e74     /src/utils_list.
    3c40:	0063 0000                                   c...

00003c44 <_global_impure_ptr>:
    3c44:	0070 2000                                   p.. 

00003c48 <_init>:
    3c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c4a:	46c0      	nop			; (mov r8, r8)
    3c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c4e:	bc08      	pop	{r3}
    3c50:	469e      	mov	lr, r3
    3c52:	4770      	bx	lr

00003c54 <__init_array_start>:
    3c54:	00003a69 	.word	0x00003a69

00003c58 <__frame_dummy_init_array_entry>:
    3c58:	000000dd 00000669 000006dd              ....i.......

00003c64 <_fini>:
    3c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c66:	46c0      	nop			; (mov r8, r8)
    3c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c6a:	bc08      	pop	{r3}
    3c6c:	469e      	mov	lr, r3
    3c6e:	4770      	bx	lr

00003c70 <__fini_array_start>:
    3c70:	000000b5 	.word	0x000000b5
