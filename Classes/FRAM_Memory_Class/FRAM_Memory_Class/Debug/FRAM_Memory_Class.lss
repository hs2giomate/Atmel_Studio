
FRAM_Memory_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004968  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00004968  00004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000049c  20000000  00004970  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000484  2000049c  00004e0c  0002049c  2**2
                  ALLOC
  4 .stack        00002000  20000920  00005290  0002049c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000204c4  2**0
                  CONTENTS, READONLY
  7 .debug_info   00038811  00000000  00000000  0002051d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000049b9  00000000  00000000  00058d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00015720  00000000  00000000  0005d6e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000fa8  00000000  00000000  00072e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000018d0  00000000  00000000  00073daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00020265  00000000  00000000  0007567f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000160f1  00000000  00000000  000958e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008f75e  00000000  00000000  000ab9d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002ce0  00000000  00000000  0013b134  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 29 00 20 15 01 00 00 0d 02 00 00 0d 02 00 00      ). ............
	...
      2c:	0d 02 00 00 00 00 00 00 00 00 00 00 0d 02 00 00     ................
      3c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      4c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      5c:	91 33 00 00 0d 02 00 00 79 1d 00 00 0d 02 00 00     .3......y.......
      6c:	c9 1d 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      7c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      8c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      9c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      ac:	0d 02 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000049c 	.word	0x2000049c
      d4:	00000000 	.word	0x00000000
      d8:	00004970 	.word	0x00004970

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004a0 	.word	0x200004a0
     108:	00004970 	.word	0x00004970
     10c:	00004970 	.word	0x00004970
     110:	00000000 	.word	0x00000000

00000114 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     11a:	4b2f      	ldr	r3, [pc, #188]	; (1d8 <Reset_Handler+0xc4>)
     11c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     11e:	4b2f      	ldr	r3, [pc, #188]	; (1dc <Reset_Handler+0xc8>)
     120:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     122:	687a      	ldr	r2, [r7, #4]
     124:	683b      	ldr	r3, [r7, #0]
     126:	429a      	cmp	r2, r3
     128:	d00c      	beq.n	144 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     12a:	e007      	b.n	13c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     12c:	683b      	ldr	r3, [r7, #0]
     12e:	1d1a      	adds	r2, r3, #4
     130:	603a      	str	r2, [r7, #0]
     132:	687a      	ldr	r2, [r7, #4]
     134:	1d11      	adds	r1, r2, #4
     136:	6079      	str	r1, [r7, #4]
     138:	6812      	ldr	r2, [r2, #0]
     13a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     13c:	683a      	ldr	r2, [r7, #0]
     13e:	4b28      	ldr	r3, [pc, #160]	; (1e0 <Reset_Handler+0xcc>)
     140:	429a      	cmp	r2, r3
     142:	d3f3      	bcc.n	12c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     144:	4b27      	ldr	r3, [pc, #156]	; (1e4 <Reset_Handler+0xd0>)
     146:	603b      	str	r3, [r7, #0]
     148:	e004      	b.n	154 <Reset_Handler+0x40>
                *pDest++ = 0;
     14a:	683b      	ldr	r3, [r7, #0]
     14c:	1d1a      	adds	r2, r3, #4
     14e:	603a      	str	r2, [r7, #0]
     150:	2200      	movs	r2, #0
     152:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     154:	683a      	ldr	r2, [r7, #0]
     156:	4b24      	ldr	r3, [pc, #144]	; (1e8 <Reset_Handler+0xd4>)
     158:	429a      	cmp	r2, r3
     15a:	d3f6      	bcc.n	14a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xd8>)
     15e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     160:	4b23      	ldr	r3, [pc, #140]	; (1f0 <Reset_Handler+0xdc>)
     162:	687a      	ldr	r2, [r7, #4]
     164:	21ff      	movs	r1, #255	; 0xff
     166:	438a      	bics	r2, r1
     168:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16a:	4a22      	ldr	r2, [pc, #136]	; (1f4 <Reset_Handler+0xe0>)
     16c:	2390      	movs	r3, #144	; 0x90
     16e:	005b      	lsls	r3, r3, #1
     170:	2102      	movs	r1, #2
     172:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     174:	4a20      	ldr	r2, [pc, #128]	; (1f8 <Reset_Handler+0xe4>)
     176:	78d3      	ldrb	r3, [r2, #3]
     178:	2103      	movs	r1, #3
     17a:	438b      	bics	r3, r1
     17c:	1c19      	adds	r1, r3, #0
     17e:	2302      	movs	r3, #2
     180:	430b      	orrs	r3, r1
     182:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     184:	4a1c      	ldr	r2, [pc, #112]	; (1f8 <Reset_Handler+0xe4>)
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	210c      	movs	r1, #12
     18a:	438b      	bics	r3, r1
     18c:	1c19      	adds	r1, r3, #0
     18e:	2308      	movs	r3, #8
     190:	430b      	orrs	r3, r1
     192:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     194:	4a19      	ldr	r2, [pc, #100]	; (1fc <Reset_Handler+0xe8>)
     196:	7b93      	ldrb	r3, [r2, #14]
     198:	2130      	movs	r1, #48	; 0x30
     19a:	438b      	bics	r3, r1
     19c:	1c19      	adds	r1, r3, #0
     19e:	2320      	movs	r3, #32
     1a0:	430b      	orrs	r3, r1
     1a2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a4:	4a15      	ldr	r2, [pc, #84]	; (1fc <Reset_Handler+0xe8>)
     1a6:	7b93      	ldrb	r3, [r2, #14]
     1a8:	210c      	movs	r1, #12
     1aa:	438b      	bics	r3, r1
     1ac:	1c19      	adds	r1, r3, #0
     1ae:	2308      	movs	r3, #8
     1b0:	430b      	orrs	r3, r1
     1b2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b4:	4a11      	ldr	r2, [pc, #68]	; (1fc <Reset_Handler+0xe8>)
     1b6:	7b93      	ldrb	r3, [r2, #14]
     1b8:	2103      	movs	r1, #3
     1ba:	438b      	bics	r3, r1
     1bc:	1c19      	adds	r1, r3, #0
     1be:	2302      	movs	r3, #2
     1c0:	430b      	orrs	r3, r1
     1c2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c4:	4a0e      	ldr	r2, [pc, #56]	; (200 <Reset_Handler+0xec>)
     1c6:	6853      	ldr	r3, [r2, #4]
     1c8:	2180      	movs	r1, #128	; 0x80
     1ca:	430b      	orrs	r3, r1
     1cc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ce:	4b0d      	ldr	r3, [pc, #52]	; (204 <Reset_Handler+0xf0>)
     1d0:	4798      	blx	r3

        /* Branch to main function */
        main();
     1d2:	4b0d      	ldr	r3, [pc, #52]	; (208 <Reset_Handler+0xf4>)
     1d4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xc2>
     1d8:	00004970 	.word	0x00004970
     1dc:	20000000 	.word	0x20000000
     1e0:	2000049c 	.word	0x2000049c
     1e4:	2000049c 	.word	0x2000049c
     1e8:	20000920 	.word	0x20000920
     1ec:	00000000 	.word	0x00000000
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	41007000 	.word	0x41007000
     1f8:	41005000 	.word	0x41005000
     1fc:	41004800 	.word	0x41004800
     200:	41004000 	.word	0x41004000
     204:	000044dd 	.word	0x000044dd
     208:	00000941 	.word	0x00000941

0000020c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     20c:	b580      	push	{r7, lr}
     20e:	af00      	add	r7, sp, #0
        while (1) {
     210:	e7fe      	b.n	210 <Dummy_Handler+0x4>

00000212 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     212:	b580      	push	{r7, lr}
     214:	b084      	sub	sp, #16
     216:	af00      	add	r7, sp, #0
     218:	60f8      	str	r0, [r7, #12]
     21a:	607a      	str	r2, [r7, #4]
     21c:	230b      	movs	r3, #11
     21e:	18fb      	adds	r3, r7, r3
     220:	1c0a      	adds	r2, r1, #0
     222:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     224:	230b      	movs	r3, #11
     226:	18fb      	adds	r3, r7, r3
     228:	781b      	ldrb	r3, [r3, #0]
     22a:	68fa      	ldr	r2, [r7, #12]
     22c:	01db      	lsls	r3, r3, #7
     22e:	18d3      	adds	r3, r2, r3
     230:	3318      	adds	r3, #24
     232:	687a      	ldr	r2, [r7, #4]
     234:	601a      	str	r2, [r3, #0]
}
     236:	46c0      	nop			; (mov r8, r8)
     238:	46bd      	mov	sp, r7
     23a:	b004      	add	sp, #16
     23c:	bd80      	pop	{r7, pc}

0000023e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     23e:	b580      	push	{r7, lr}
     240:	b084      	sub	sp, #16
     242:	af00      	add	r7, sp, #0
     244:	60f8      	str	r0, [r7, #12]
     246:	607a      	str	r2, [r7, #4]
     248:	230b      	movs	r3, #11
     24a:	18fb      	adds	r3, r7, r3
     24c:	1c0a      	adds	r2, r1, #0
     24e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     250:	230b      	movs	r3, #11
     252:	18fb      	adds	r3, r7, r3
     254:	781b      	ldrb	r3, [r3, #0]
     256:	68fa      	ldr	r2, [r7, #12]
     258:	01db      	lsls	r3, r3, #7
     25a:	18d3      	adds	r3, r2, r3
     25c:	3314      	adds	r3, #20
     25e:	687a      	ldr	r2, [r7, #4]
     260:	601a      	str	r2, [r3, #0]
}
     262:	46c0      	nop			; (mov r8, r8)
     264:	46bd      	mov	sp, r7
     266:	b004      	add	sp, #16
     268:	bd80      	pop	{r7, pc}
	...

0000026c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     26c:	b580      	push	{r7, lr}
     26e:	b082      	sub	sp, #8
     270:	af00      	add	r7, sp, #0
     272:	6039      	str	r1, [r7, #0]
     274:	0011      	movs	r1, r2
     276:	1dfb      	adds	r3, r7, #7
     278:	1c02      	adds	r2, r0, #0
     27a:	701a      	strb	r2, [r3, #0]
     27c:	1dbb      	adds	r3, r7, #6
     27e:	1c0a      	adds	r2, r1, #0
     280:	701a      	strb	r2, [r3, #0]
	if (level) {
     282:	1dbb      	adds	r3, r7, #6
     284:	781b      	ldrb	r3, [r3, #0]
     286:	2b00      	cmp	r3, #0
     288:	d008      	beq.n	29c <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     28a:	683a      	ldr	r2, [r7, #0]
     28c:	1dfb      	adds	r3, r7, #7
     28e:	7819      	ldrb	r1, [r3, #0]
     290:	23c0      	movs	r3, #192	; 0xc0
     292:	05db      	lsls	r3, r3, #23
     294:	0018      	movs	r0, r3
     296:	4b07      	ldr	r3, [pc, #28]	; (2b4 <_gpio_set_level+0x48>)
     298:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     29a:	e007      	b.n	2ac <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     29c:	683a      	ldr	r2, [r7, #0]
     29e:	1dfb      	adds	r3, r7, #7
     2a0:	7819      	ldrb	r1, [r3, #0]
     2a2:	23c0      	movs	r3, #192	; 0xc0
     2a4:	05db      	lsls	r3, r3, #23
     2a6:	0018      	movs	r0, r3
     2a8:	4b03      	ldr	r3, [pc, #12]	; (2b8 <_gpio_set_level+0x4c>)
     2aa:	4798      	blx	r3
}
     2ac:	46c0      	nop			; (mov r8, r8)
     2ae:	46bd      	mov	sp, r7
     2b0:	b002      	add	sp, #8
     2b2:	bd80      	pop	{r7, pc}
     2b4:	00000213 	.word	0x00000213
     2b8:	0000023f 	.word	0x0000023f

000002bc <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     2bc:	b580      	push	{r7, lr}
     2be:	b082      	sub	sp, #8
     2c0:	af00      	add	r7, sp, #0
     2c2:	0002      	movs	r2, r0
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	701a      	strb	r2, [r3, #0]
     2c8:	1dbb      	adds	r3, r7, #6
     2ca:	1c0a      	adds	r2, r1, #0
     2cc:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     2ce:	1dfb      	adds	r3, r7, #7
     2d0:	781b      	ldrb	r3, [r3, #0]
     2d2:	115b      	asrs	r3, r3, #5
     2d4:	b2d8      	uxtb	r0, r3
     2d6:	1dfb      	adds	r3, r7, #7
     2d8:	781b      	ldrb	r3, [r3, #0]
     2da:	001a      	movs	r2, r3
     2dc:	231f      	movs	r3, #31
     2de:	4013      	ands	r3, r2
     2e0:	2201      	movs	r2, #1
     2e2:	409a      	lsls	r2, r3
     2e4:	0011      	movs	r1, r2
     2e6:	1dbb      	adds	r3, r7, #6
     2e8:	781b      	ldrb	r3, [r3, #0]
     2ea:	001a      	movs	r2, r3
     2ec:	4b02      	ldr	r3, [pc, #8]	; (2f8 <gpio_set_pin_level+0x3c>)
     2ee:	4798      	blx	r3
}
     2f0:	46c0      	nop			; (mov r8, r8)
     2f2:	46bd      	mov	sp, r7
     2f4:	b002      	add	sp, #8
     2f6:	bd80      	pop	{r7, pc}
     2f8:	0000026d 	.word	0x0000026d

000002fc <_ZN17FRAM_Memory_ClassC1Ev>:

#include "FRAM_Memory_Class.h"
#include "SPI_Asyn_Class.h"

// default constructor
FRAM_Memory_Class::FRAM_Memory_Class()
     2fc:	b580      	push	{r7, lr}
     2fe:	b082      	sub	sp, #8
     300:	af00      	add	r7, sp, #0
     302:	6078      	str	r0, [r7, #4]
{
		appParameters=defaultParameters;
     304:	687b      	ldr	r3, [r7, #4]
     306:	4a0a      	ldr	r2, [pc, #40]	; (330 <_ZN17FRAM_Memory_ClassC1Ev+0x34>)
     308:	3304      	adds	r3, #4
     30a:	0011      	movs	r1, r2
     30c:	227c      	movs	r2, #124	; 0x7c
     30e:	0018      	movs	r0, r3
     310:	4b08      	ldr	r3, [pc, #32]	; (334 <_ZN17FRAM_Memory_ClassC1Ev+0x38>)
     312:	4798      	blx	r3
		spiPort=0;
     314:	687b      	ldr	r3, [r7, #4]
     316:	2280      	movs	r2, #128	; 0x80
     318:	2100      	movs	r1, #0
     31a:	5499      	strb	r1, [r3, r2]
		memory=framMemory;
     31c:	4b06      	ldr	r3, [pc, #24]	; (338 <_ZN17FRAM_Memory_ClassC1Ev+0x3c>)
     31e:	681a      	ldr	r2, [r3, #0]
     320:	687b      	ldr	r3, [r7, #4]
     322:	601a      	str	r2, [r3, #0]
} //FRAM_Memory_Class
     324:	687b      	ldr	r3, [r7, #4]
     326:	0018      	movs	r0, r3
     328:	46bd      	mov	sp, r7
     32a:	b002      	add	sp, #8
     32c:	bd80      	pop	{r7, pc}
     32e:	46c0      	nop			; (mov r8, r8)
     330:	00004794 	.word	0x00004794
     334:	00004525 	.word	0x00004525
     338:	200004b8 	.word	0x200004b8

0000033c <_ZN17FRAM_Memory_Class4initEP14userParameters>:
	spiPort=0;
	memory=framMemory;
}


void	FRAM_Memory_Class::init(userParameters* p){
     33c:	b580      	push	{r7, lr}
     33e:	b082      	sub	sp, #8
     340:	af00      	add	r7, sp, #0
     342:	6078      	str	r0, [r7, #4]
     344:	6039      	str	r1, [r7, #0]
		appParameters=*p;
     346:	687b      	ldr	r3, [r7, #4]
     348:	683a      	ldr	r2, [r7, #0]
     34a:	3304      	adds	r3, #4
     34c:	0011      	movs	r1, r2
     34e:	227c      	movs	r2, #124	; 0x7c
     350:	0018      	movs	r0, r3
     352:	4b0c      	ldr	r3, [pc, #48]	; (384 <_ZN17FRAM_Memory_Class4initEP14userParameters+0x48>)
     354:	4798      	blx	r3
		spiPort=0;
     356:	687b      	ldr	r3, [r7, #4]
     358:	2280      	movs	r2, #128	; 0x80
     35a:	2100      	movs	r1, #0
     35c:	5499      	strb	r1, [r3, r2]
	memory=0x00;
     35e:	687b      	ldr	r3, [r7, #4]
     360:	2200      	movs	r2, #0
     362:	601a      	str	r2, [r3, #0]
	
	spi0.init();
     364:	4b08      	ldr	r3, [pc, #32]	; (388 <_ZN17FRAM_Memory_Class4initEP14userParameters+0x4c>)
     366:	0018      	movs	r0, r3
     368:	4b08      	ldr	r3, [pc, #32]	; (38c <_ZN17FRAM_Memory_Class4initEP14userParameters+0x50>)
     36a:	4798      	blx	r3
	flashOpen();
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	0018      	movs	r0, r3
     370:	4b07      	ldr	r3, [pc, #28]	; (390 <_ZN17FRAM_Memory_Class4initEP14userParameters+0x54>)
     372:	4798      	blx	r3
	flashClose();
     374:	687b      	ldr	r3, [r7, #4]
     376:	0018      	movs	r0, r3
     378:	4b06      	ldr	r3, [pc, #24]	; (394 <_ZN17FRAM_Memory_Class4initEP14userParameters+0x58>)
     37a:	4798      	blx	r3
	
}
     37c:	46c0      	nop			; (mov r8, r8)
     37e:	46bd      	mov	sp, r7
     380:	b002      	add	sp, #8
     382:	bd80      	pop	{r7, pc}
     384:	00004525 	.word	0x00004525
     388:	200004bc 	.word	0x200004bc
     38c:	000041d9 	.word	0x000041d9
     390:	000004dd 	.word	0x000004dd
     394:	000007cd 	.word	0x000007cd

00000398 <_ZN17FRAM_Memory_Class22flushConfigurationDataEP14userParameters>:

void FRAM_Memory_Class::flushConfigurationData(userParameters *data)
{
     398:	b590      	push	{r4, r7, lr}
     39a:	b0a3      	sub	sp, #140	; 0x8c
     39c:	af00      	add	r7, sp, #0
     39e:	6078      	str	r0, [r7, #4]
     3a0:	6039      	str	r1, [r7, #0]
	gpio_set_pin_level(Write_Fail,true);
     3a2:	2101      	movs	r1, #1
     3a4:	2029      	movs	r0, #41	; 0x29
     3a6:	4b14      	ldr	r3, [pc, #80]	; (3f8 <_ZN17FRAM_Memory_Class22flushConfigurationDataEP14userParameters+0x60>)
     3a8:	4798      	blx	r3
	userParameters	appData;
	appData=*data;
     3aa:	230c      	movs	r3, #12
     3ac:	18fa      	adds	r2, r7, r3
     3ae:	683b      	ldr	r3, [r7, #0]
     3b0:	0010      	movs	r0, r2
     3b2:	0019      	movs	r1, r3
     3b4:	237c      	movs	r3, #124	; 0x7c
     3b6:	001a      	movs	r2, r3
     3b8:	4b10      	ldr	r3, [pc, #64]	; (3fc <_ZN17FRAM_Memory_Class22flushConfigurationDataEP14userParameters+0x64>)
     3ba:	4798      	blx	r3
	flashOpen();
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	0018      	movs	r0, r3
     3c0:	4b0f      	ldr	r3, [pc, #60]	; (400 <_ZN17FRAM_Memory_Class22flushConfigurationDataEP14userParameters+0x68>)
     3c2:	4798      	blx	r3
	

	//eraseFlash((uint32_t)&memory->parameters, sizeof(userParameters));
	writeFRAM((uint32_t)&memory->parameters, &appData, sizeof(userParameters));
     3c4:	687b      	ldr	r3, [r7, #4]
     3c6:	681b      	ldr	r3, [r3, #0]
     3c8:	2280      	movs	r2, #128	; 0x80
     3ca:	00d2      	lsls	r2, r2, #3
     3cc:	4694      	mov	ip, r2
     3ce:	4463      	add	r3, ip
     3d0:	0019      	movs	r1, r3
     3d2:	230c      	movs	r3, #12
     3d4:	18fa      	adds	r2, r7, r3
     3d6:	6878      	ldr	r0, [r7, #4]
     3d8:	237c      	movs	r3, #124	; 0x7c
     3da:	4c0a      	ldr	r4, [pc, #40]	; (404 <_ZN17FRAM_Memory_Class22flushConfigurationDataEP14userParameters+0x6c>)
     3dc:	47a0      	blx	r4
	flashClose();
     3de:	687b      	ldr	r3, [r7, #4]
     3e0:	0018      	movs	r0, r3
     3e2:	4b09      	ldr	r3, [pc, #36]	; (408 <_ZN17FRAM_Memory_Class22flushConfigurationDataEP14userParameters+0x70>)
     3e4:	4798      	blx	r3
	gpio_set_pin_level(Write_OK,true);
     3e6:	2101      	movs	r1, #1
     3e8:	2004      	movs	r0, #4
     3ea:	4b03      	ldr	r3, [pc, #12]	; (3f8 <_ZN17FRAM_Memory_Class22flushConfigurationDataEP14userParameters+0x60>)
     3ec:	4798      	blx	r3
}
     3ee:	46c0      	nop			; (mov r8, r8)
     3f0:	46bd      	mov	sp, r7
     3f2:	b023      	add	sp, #140	; 0x8c
     3f4:	bd90      	pop	{r4, r7, pc}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	000002bd 	.word	0x000002bd
     3fc:	00004525 	.word	0x00004525
     400:	000004dd 	.word	0x000004dd
     404:	00000679 	.word	0x00000679
     408:	000007cd 	.word	0x000007cd

0000040c <_ZN17FRAM_Memory_Class21readConfigurationDataEP14userParameters>:
	flashClose();
	gpio_set_pin_level(Write_OK,true);
}

void FRAM_Memory_Class::readConfigurationData(userParameters *data)
{
     40c:	b590      	push	{r4, r7, lr}
     40e:	b0a3      	sub	sp, #140	; 0x8c
     410:	af00      	add	r7, sp, #0
     412:	6078      	str	r0, [r7, #4]
     414:	6039      	str	r1, [r7, #0]
	userParameters	appData;

	flashOpen();
     416:	687b      	ldr	r3, [r7, #4]
     418:	0018      	movs	r0, r3
     41a:	4b1f      	ldr	r3, [pc, #124]	; (498 <_ZN17FRAM_Memory_Class21readConfigurationDataEP14userParameters+0x8c>)
     41c:	4798      	blx	r3
	readFRAM(&appData, (uint32_t)&memory->parameters, sizeof(userParameters));
     41e:	687b      	ldr	r3, [r7, #4]
     420:	681b      	ldr	r3, [r3, #0]
     422:	2280      	movs	r2, #128	; 0x80
     424:	00d2      	lsls	r2, r2, #3
     426:	4694      	mov	ip, r2
     428:	4463      	add	r3, ip
     42a:	001a      	movs	r2, r3
     42c:	230c      	movs	r3, #12
     42e:	18f9      	adds	r1, r7, r3
     430:	6878      	ldr	r0, [r7, #4]
     432:	237c      	movs	r3, #124	; 0x7c
     434:	4c19      	ldr	r4, [pc, #100]	; (49c <_ZN17FRAM_Memory_Class21readConfigurationDataEP14userParameters+0x90>)
     436:	47a0      	blx	r4
	flashClose();
     438:	687b      	ldr	r3, [r7, #4]
     43a:	0018      	movs	r0, r3
     43c:	4b18      	ldr	r3, [pc, #96]	; (4a0 <_ZN17FRAM_Memory_Class21readConfigurationDataEP14userParameters+0x94>)
     43e:	4798      	blx	r3

	if  ((appData.deployParkingLimit == 4600)){
     440:	230c      	movs	r3, #12
     442:	18fb      	adds	r3, r7, r3
     444:	6cda      	ldr	r2, [r3, #76]	; 0x4c
     446:	4b17      	ldr	r3, [pc, #92]	; (4a4 <_ZN17FRAM_Memory_Class21readConfigurationDataEP14userParameters+0x98>)
     448:	4917      	ldr	r1, [pc, #92]	; (4a8 <_ZN17FRAM_Memory_Class21readConfigurationDataEP14userParameters+0x9c>)
     44a:	1c10      	adds	r0, r2, #0
     44c:	4798      	blx	r3
     44e:	1e03      	subs	r3, r0, #0
     450:	d00b      	beq.n	46a <_ZN17FRAM_Memory_Class21readConfigurationDataEP14userParameters+0x5e>
		memcpy(data, &appData, sizeof(userParameters));
     452:	230c      	movs	r3, #12
     454:	18f9      	adds	r1, r7, r3
     456:	683b      	ldr	r3, [r7, #0]
     458:	227c      	movs	r2, #124	; 0x7c
     45a:	0018      	movs	r0, r3
     45c:	4b13      	ldr	r3, [pc, #76]	; (4ac <_ZN17FRAM_Memory_Class21readConfigurationDataEP14userParameters+0xa0>)
     45e:	4798      	blx	r3
		gpio_set_pin_level(Read_OK,true);
     460:	2101      	movs	r1, #1
     462:	2003      	movs	r0, #3
     464:	4b12      	ldr	r3, [pc, #72]	; (4b0 <_ZN17FRAM_Memory_Class21readConfigurationDataEP14userParameters+0xa4>)
     466:	4798      	blx	r3
		gpio_set_pin_level(Read_Fail,true);
		initializeConfigurationData(&appParameters);
		memcpy(data, &appParameters, sizeof(userParameters));
		
	}
}
     468:	e011      	b.n	48e <_ZN17FRAM_Memory_Class21readConfigurationDataEP14userParameters+0x82>
		gpio_set_pin_level(Read_Fail,true);
     46a:	2101      	movs	r1, #1
     46c:	2002      	movs	r0, #2
     46e:	4b10      	ldr	r3, [pc, #64]	; (4b0 <_ZN17FRAM_Memory_Class21readConfigurationDataEP14userParameters+0xa4>)
     470:	4798      	blx	r3
		initializeConfigurationData(&appParameters);
     472:	687b      	ldr	r3, [r7, #4]
     474:	1d1a      	adds	r2, r3, #4
     476:	687b      	ldr	r3, [r7, #4]
     478:	0011      	movs	r1, r2
     47a:	0018      	movs	r0, r3
     47c:	4b0d      	ldr	r3, [pc, #52]	; (4b4 <_ZN17FRAM_Memory_Class21readConfigurationDataEP14userParameters+0xa8>)
     47e:	4798      	blx	r3
		memcpy(data, &appParameters, sizeof(userParameters));
     480:	687b      	ldr	r3, [r7, #4]
     482:	1d19      	adds	r1, r3, #4
     484:	683b      	ldr	r3, [r7, #0]
     486:	227c      	movs	r2, #124	; 0x7c
     488:	0018      	movs	r0, r3
     48a:	4b08      	ldr	r3, [pc, #32]	; (4ac <_ZN17FRAM_Memory_Class21readConfigurationDataEP14userParameters+0xa0>)
     48c:	4798      	blx	r3
}
     48e:	46c0      	nop			; (mov r8, r8)
     490:	46bd      	mov	sp, r7
     492:	b023      	add	sp, #140	; 0x8c
     494:	bd90      	pop	{r4, r7, pc}
     496:	46c0      	nop			; (mov r8, r8)
     498:	000004dd 	.word	0x000004dd
     49c:	000004fd 	.word	0x000004fd
     4a0:	000007cd 	.word	0x000007cd
     4a4:	00004321 	.word	0x00004321
     4a8:	458fc000 	.word	0x458fc000
     4ac:	00004525 	.word	0x00004525
     4b0:	000002bd 	.word	0x000002bd
     4b4:	000004b9 	.word	0x000004b9

000004b8 <_ZN17FRAM_Memory_Class27initializeConfigurationDataEP14userParameters>:
		
	}
}


void FRAM_Memory_Class::initializeConfigurationData(userParameters *data){
     4b8:	b580      	push	{r7, lr}
     4ba:	b082      	sub	sp, #8
     4bc:	af00      	add	r7, sp, #0
     4be:	6078      	str	r0, [r7, #4]
     4c0:	6039      	str	r1, [r7, #0]
	
	flushConfigurationData(data);
     4c2:	683a      	ldr	r2, [r7, #0]
     4c4:	687b      	ldr	r3, [r7, #4]
     4c6:	0011      	movs	r1, r2
     4c8:	0018      	movs	r0, r3
     4ca:	4b03      	ldr	r3, [pc, #12]	; (4d8 <_ZN17FRAM_Memory_Class27initializeConfigurationDataEP14userParameters+0x20>)
     4cc:	4798      	blx	r3
	return;
     4ce:	46c0      	nop			; (mov r8, r8)
}
     4d0:	46bd      	mov	sp, r7
     4d2:	b002      	add	sp, #8
     4d4:	bd80      	pop	{r7, pc}
     4d6:	46c0      	nop			; (mov r8, r8)
     4d8:	00000399 	.word	0x00000399

000004dc <_ZN17FRAM_Memory_Class9flashOpenEv>:
}



void FRAM_Memory_Class::flashOpen(void)
{
     4dc:	b580      	push	{r7, lr}
     4de:	b082      	sub	sp, #8
     4e0:	af00      	add	r7, sp, #0
     4e2:	6078      	str	r0, [r7, #4]
	spi0.enable();
     4e4:	4b03      	ldr	r3, [pc, #12]	; (4f4 <_ZN17FRAM_Memory_Class9flashOpenEv+0x18>)
     4e6:	0018      	movs	r0, r3
     4e8:	4b03      	ldr	r3, [pc, #12]	; (4f8 <_ZN17FRAM_Memory_Class9flashOpenEv+0x1c>)
     4ea:	4798      	blx	r3
	
	
}
     4ec:	46c0      	nop			; (mov r8, r8)
     4ee:	46bd      	mov	sp, r7
     4f0:	b002      	add	sp, #8
     4f2:	bd80      	pop	{r7, pc}
     4f4:	200004bc 	.word	0x200004bc
     4f8:	00004211 	.word	0x00004211

000004fc <_ZN17FRAM_Memory_Class8readFRAMEPvmm>:
uint8_t FRAM_Memory_Class::readFRAM(void* dest, uint32_t src, uint32_t size)
{
     4fc:	b580      	push	{r7, lr}
     4fe:	b084      	sub	sp, #16
     500:	af00      	add	r7, sp, #0
     502:	60f8      	str	r0, [r7, #12]
     504:	60b9      	str	r1, [r7, #8]
     506:	607a      	str	r2, [r7, #4]
     508:	603b      	str	r3, [r7, #0]
	CE_Low_FRAM();
     50a:	68fb      	ldr	r3, [r7, #12]
     50c:	0018      	movs	r0, r3
     50e:	4b14      	ldr	r3, [pc, #80]	; (560 <_ZN17FRAM_Memory_Class8readFRAMEPvmm+0x64>)
     510:	4798      	blx	r3
	Send_Byte(kFlashRead);
     512:	68fb      	ldr	r3, [r7, #12]
     514:	2103      	movs	r1, #3
     516:	0018      	movs	r0, r3
     518:	4b12      	ldr	r3, [pc, #72]	; (564 <_ZN17FRAM_Memory_Class8readFRAMEPvmm+0x68>)
     51a:	4798      	blx	r3
	//	send 3 address bytes
	//Send_Byte(((src & 0xFFFFFF) >> 16));
	Send_Byte(((src & 0xFFFF) >> 8));
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	0a1b      	lsrs	r3, r3, #8
     520:	b2da      	uxtb	r2, r3
     522:	68fb      	ldr	r3, [r7, #12]
     524:	0011      	movs	r1, r2
     526:	0018      	movs	r0, r3
     528:	4b0e      	ldr	r3, [pc, #56]	; (564 <_ZN17FRAM_Memory_Class8readFRAMEPvmm+0x68>)
     52a:	4798      	blx	r3
	Send_Byte(src & 0xFF);
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	b2da      	uxtb	r2, r3
     530:	68fb      	ldr	r3, [r7, #12]
     532:	0011      	movs	r1, r2
     534:	0018      	movs	r0, r3
     536:	4b0b      	ldr	r3, [pc, #44]	; (564 <_ZN17FRAM_Memory_Class8readFRAMEPvmm+0x68>)
     538:	4798      	blx	r3
	spi0.read((uint8_t *)dest, (uint16_t)size);
     53a:	683b      	ldr	r3, [r7, #0]
     53c:	b29b      	uxth	r3, r3
     53e:	001a      	movs	r2, r3
     540:	68b9      	ldr	r1, [r7, #8]
     542:	4b09      	ldr	r3, [pc, #36]	; (568 <_ZN17FRAM_Memory_Class8readFRAMEPvmm+0x6c>)
     544:	0018      	movs	r0, r3
     546:	4b09      	ldr	r3, [pc, #36]	; (56c <_ZN17FRAM_Memory_Class8readFRAMEPvmm+0x70>)
     548:	4798      	blx	r3
	CE_High_FRAM();
     54a:	68fb      	ldr	r3, [r7, #12]
     54c:	0018      	movs	r0, r3
     54e:	4b08      	ldr	r3, [pc, #32]	; (570 <_ZN17FRAM_Memory_Class8readFRAMEPvmm+0x74>)
     550:	4798      	blx	r3
	return (uint8_t)src;
     552:	687b      	ldr	r3, [r7, #4]
     554:	b2db      	uxtb	r3, r3
}
     556:	0018      	movs	r0, r3
     558:	46bd      	mov	sp, r7
     55a:	b004      	add	sp, #16
     55c:	bd80      	pop	{r7, pc}
     55e:	46c0      	nop			; (mov r8, r8)
     560:	00000575 	.word	0x00000575
     564:	000005ad 	.word	0x000005ad
     568:	200004bc 	.word	0x200004bc
     56c:	00004265 	.word	0x00004265
     570:	00000591 	.word	0x00000591

00000574 <_ZN17FRAM_Memory_Class11CE_Low_FRAMEv>:
void FRAM_Memory_Class::CE_Low_FRAM(void)
{
     574:	b580      	push	{r7, lr}
     576:	b082      	sub	sp, #8
     578:	af00      	add	r7, sp, #0
     57a:	6078      	str	r0, [r7, #4]
		gpio_set_pin_level(Flash_CS,
		// <y> Initial level
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);
     57c:	2100      	movs	r1, #0
     57e:	201b      	movs	r0, #27
     580:	4b02      	ldr	r3, [pc, #8]	; (58c <_ZN17FRAM_Memory_Class11CE_Low_FRAMEv+0x18>)
     582:	4798      	blx	r3
}
     584:	46c0      	nop			; (mov r8, r8)
     586:	46bd      	mov	sp, r7
     588:	b002      	add	sp, #8
     58a:	bd80      	pop	{r7, pc}
     58c:	000002bd 	.word	0x000002bd

00000590 <_ZN17FRAM_Memory_Class12CE_High_FRAMEv>:

void FRAM_Memory_Class::CE_High_FRAM(void)
{
     590:	b580      	push	{r7, lr}
     592:	b082      	sub	sp, #8
     594:	af00      	add	r7, sp, #0
     596:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(Flash_CS,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
     598:	2101      	movs	r1, #1
     59a:	201b      	movs	r0, #27
     59c:	4b02      	ldr	r3, [pc, #8]	; (5a8 <_ZN17FRAM_Memory_Class12CE_High_FRAMEv+0x18>)
     59e:	4798      	blx	r3
}
     5a0:	46c0      	nop			; (mov r8, r8)
     5a2:	46bd      	mov	sp, r7
     5a4:	b002      	add	sp, #8
     5a6:	bd80      	pop	{r7, pc}
     5a8:	000002bd 	.word	0x000002bd

000005ac <_ZN17FRAM_Memory_Class9Send_ByteEh>:
uint8_t FRAM_Memory_Class::Send_Byte(uint8_t byte)
{
     5ac:	b580      	push	{r7, lr}
     5ae:	b082      	sub	sp, #8
     5b0:	af00      	add	r7, sp, #0
     5b2:	6078      	str	r0, [r7, #4]
     5b4:	000a      	movs	r2, r1
     5b6:	1cfb      	adds	r3, r7, #3
     5b8:	701a      	strb	r2, [r3, #0]
	
	spi0.write(&byte,1);
     5ba:	1cf9      	adds	r1, r7, #3
     5bc:	4b05      	ldr	r3, [pc, #20]	; (5d4 <_ZN17FRAM_Memory_Class9Send_ByteEh+0x28>)
     5be:	2201      	movs	r2, #1
     5c0:	0018      	movs	r0, r3
     5c2:	4b05      	ldr	r3, [pc, #20]	; (5d8 <_ZN17FRAM_Memory_Class9Send_ByteEh+0x2c>)
     5c4:	4798      	blx	r3
	return byte;
     5c6:	1cfb      	adds	r3, r7, #3
     5c8:	781b      	ldrb	r3, [r3, #0]
}
     5ca:	0018      	movs	r0, r3
     5cc:	46bd      	mov	sp, r7
     5ce:	b002      	add	sp, #8
     5d0:	bd80      	pop	{r7, pc}
     5d2:	46c0      	nop			; (mov r8, r8)
     5d4:	200004bc 	.word	0x200004bc
     5d8:	00004249 	.word	0x00004249

000005dc <_ZN17FRAM_Memory_Class8Get_ByteEv>:

uint8_t FRAM_Memory_Class::Get_Byte(void)
{
     5dc:	b580      	push	{r7, lr}
     5de:	b084      	sub	sp, #16
     5e0:	af00      	add	r7, sp, #0
     5e2:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	spi0.read(&byte,1);
     5e4:	230f      	movs	r3, #15
     5e6:	18f9      	adds	r1, r7, r3
     5e8:	4b05      	ldr	r3, [pc, #20]	; (600 <_ZN17FRAM_Memory_Class8Get_ByteEv+0x24>)
     5ea:	2201      	movs	r2, #1
     5ec:	0018      	movs	r0, r3
     5ee:	4b05      	ldr	r3, [pc, #20]	; (604 <_ZN17FRAM_Memory_Class8Get_ByteEv+0x28>)
     5f0:	4798      	blx	r3
	
	return byte;
     5f2:	230f      	movs	r3, #15
     5f4:	18fb      	adds	r3, r7, r3
     5f6:	781b      	ldrb	r3, [r3, #0]
}
     5f8:	0018      	movs	r0, r3
     5fa:	46bd      	mov	sp, r7
     5fc:	b004      	add	sp, #16
     5fe:	bd80      	pop	{r7, pc}
     600:	200004bc 	.word	0x200004bc
     604:	00004265 	.word	0x00004265

00000608 <_ZN17FRAM_Memory_Class4WRENEv>:

void FRAM_Memory_Class::WREN(void)
{
     608:	b580      	push	{r7, lr}
     60a:	b082      	sub	sp, #8
     60c:	af00      	add	r7, sp, #0
     60e:	6078      	str	r0, [r7, #4]
	CE_Low_FRAM();			// enable device
     610:	687b      	ldr	r3, [r7, #4]
     612:	0018      	movs	r0, r3
     614:	4b07      	ldr	r3, [pc, #28]	; (634 <_ZN17FRAM_Memory_Class4WRENEv+0x2c>)
     616:	4798      	blx	r3
	Send_Byte(kFlashWREnable);	// send WREN command
     618:	687b      	ldr	r3, [r7, #4]
     61a:	2106      	movs	r1, #6
     61c:	0018      	movs	r0, r3
     61e:	4b06      	ldr	r3, [pc, #24]	; (638 <_ZN17FRAM_Memory_Class4WRENEv+0x30>)
     620:	4798      	blx	r3
	CE_High_FRAM();			// disable device
     622:	687b      	ldr	r3, [r7, #4]
     624:	0018      	movs	r0, r3
     626:	4b05      	ldr	r3, [pc, #20]	; (63c <_ZN17FRAM_Memory_Class4WRENEv+0x34>)
     628:	4798      	blx	r3
}
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	46bd      	mov	sp, r7
     62e:	b002      	add	sp, #8
     630:	bd80      	pop	{r7, pc}
     632:	46c0      	nop			; (mov r8, r8)
     634:	00000575 	.word	0x00000575
     638:	000005ad 	.word	0x000005ad
     63c:	00000591 	.word	0x00000591

00000640 <_ZN17FRAM_Memory_Class4WRDIEv>:


void FRAM_Memory_Class::WRDI(void)
{
     640:	b580      	push	{r7, lr}
     642:	b082      	sub	sp, #8
     644:	af00      	add	r7, sp, #0
     646:	6078      	str	r0, [r7, #4]
	CE_Low_FRAM();			// enable device
     648:	687b      	ldr	r3, [r7, #4]
     64a:	0018      	movs	r0, r3
     64c:	4b07      	ldr	r3, [pc, #28]	; (66c <_ZN17FRAM_Memory_Class4WRDIEv+0x2c>)
     64e:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
     650:	687b      	ldr	r3, [r7, #4]
     652:	2104      	movs	r1, #4
     654:	0018      	movs	r0, r3
     656:	4b06      	ldr	r3, [pc, #24]	; (670 <_ZN17FRAM_Memory_Class4WRDIEv+0x30>)
     658:	4798      	blx	r3
	CE_High_FRAM();			// disable device
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	0018      	movs	r0, r3
     65e:	4b05      	ldr	r3, [pc, #20]	; (674 <_ZN17FRAM_Memory_Class4WRDIEv+0x34>)
     660:	4798      	blx	r3
}
     662:	46c0      	nop			; (mov r8, r8)
     664:	46bd      	mov	sp, r7
     666:	b002      	add	sp, #8
     668:	bd80      	pop	{r7, pc}
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	00000575 	.word	0x00000575
     670:	000005ad 	.word	0x000005ad
     674:	00000591 	.word	0x00000591

00000678 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm>:
uint8_t FRAM_Memory_Class::writeFRAM(uint32_t dest, const void* src, uint32_t size){
     678:	b580      	push	{r7, lr}
     67a:	b086      	sub	sp, #24
     67c:	af00      	add	r7, sp, #0
     67e:	60f8      	str	r0, [r7, #12]
     680:	60b9      	str	r1, [r7, #8]
     682:	607a      	str	r2, [r7, #4]
     684:	603b      	str	r3, [r7, #0]
	const uint8_t*	srcPtr = (const uint8_t*)src;
     686:	687b      	ldr	r3, [r7, #4]
     688:	617b      	str	r3, [r7, #20]
		WREN();
     68a:	68fb      	ldr	r3, [r7, #12]
     68c:	0018      	movs	r0, r3
     68e:	4b33      	ldr	r3, [pc, #204]	; (75c <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xe4>)
     690:	4798      	blx	r3
		
		while ((ReadStatusRegister()&0x02)==0);
     692:	68fb      	ldr	r3, [r7, #12]
     694:	0018      	movs	r0, r3
     696:	4b32      	ldr	r3, [pc, #200]	; (760 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xe8>)
     698:	4798      	blx	r3
     69a:	0003      	movs	r3, r0
     69c:	001a      	movs	r2, r3
     69e:	2302      	movs	r3, #2
     6a0:	4013      	ands	r3, r2
     6a2:	425a      	negs	r2, r3
     6a4:	4153      	adcs	r3, r2
     6a6:	b2db      	uxtb	r3, r3
     6a8:	2b00      	cmp	r3, #0
     6aa:	d000      	beq.n	6ae <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0x36>
     6ac:	e7f1      	b.n	692 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0x1a>
	
	while (size > 0){
     6ae:	683b      	ldr	r3, [r7, #0]
     6b0:	2b00      	cmp	r3, #0
     6b2:	d04c      	beq.n	74e <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xd6>
		uint16_t	i;
		

		
		CE_Low_FRAM();
     6b4:	68fb      	ldr	r3, [r7, #12]
     6b6:	0018      	movs	r0, r3
     6b8:	4b2a      	ldr	r3, [pc, #168]	; (764 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xec>)
     6ba:	4798      	blx	r3
		Send_Byte(kFRAMWrite);
     6bc:	68fb      	ldr	r3, [r7, #12]
     6be:	2102      	movs	r1, #2
     6c0:	0018      	movs	r0, r3
     6c2:	4b29      	ldr	r3, [pc, #164]	; (768 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xf0>)
     6c4:	4798      	blx	r3
		//Send_Byte(((dest & 0xFFFFFF) >> 16));
		Send_Byte(((dest & 0xFFFF) >> 8));
     6c6:	68bb      	ldr	r3, [r7, #8]
     6c8:	0a1b      	lsrs	r3, r3, #8
     6ca:	b2da      	uxtb	r2, r3
     6cc:	68fb      	ldr	r3, [r7, #12]
     6ce:	0011      	movs	r1, r2
     6d0:	0018      	movs	r0, r3
     6d2:	4b25      	ldr	r3, [pc, #148]	; (768 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xf0>)
     6d4:	4798      	blx	r3
		Send_Byte(dest & 0xFF);
     6d6:	68bb      	ldr	r3, [r7, #8]
     6d8:	b2da      	uxtb	r2, r3
     6da:	68fb      	ldr	r3, [r7, #12]
     6dc:	0011      	movs	r1, r2
     6de:	0018      	movs	r0, r3
     6e0:	4b21      	ldr	r3, [pc, #132]	; (768 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xf0>)
     6e2:	4798      	blx	r3
	
		for (i=0; (i < 256) && (i<size); i++){
     6e4:	2312      	movs	r3, #18
     6e6:	18fb      	adds	r3, r7, r3
     6e8:	2200      	movs	r2, #0
     6ea:	801a      	strh	r2, [r3, #0]
     6ec:	2312      	movs	r3, #18
     6ee:	18fb      	adds	r3, r7, r3
     6f0:	881b      	ldrh	r3, [r3, #0]
     6f2:	2bff      	cmp	r3, #255	; 0xff
     6f4:	dc16      	bgt.n	724 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xac>
     6f6:	2312      	movs	r3, #18
     6f8:	18fb      	adds	r3, r7, r3
     6fa:	881a      	ldrh	r2, [r3, #0]
     6fc:	683b      	ldr	r3, [r7, #0]
     6fe:	429a      	cmp	r2, r3
     700:	d210      	bcs.n	724 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xac>
			Send_Byte(*srcPtr++);
     702:	697b      	ldr	r3, [r7, #20]
     704:	1c5a      	adds	r2, r3, #1
     706:	617a      	str	r2, [r7, #20]
     708:	781a      	ldrb	r2, [r3, #0]
     70a:	68fb      	ldr	r3, [r7, #12]
     70c:	0011      	movs	r1, r2
     70e:	0018      	movs	r0, r3
     710:	4b15      	ldr	r3, [pc, #84]	; (768 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xf0>)
     712:	4798      	blx	r3
		for (i=0; (i < 256) && (i<size); i++){
     714:	2312      	movs	r3, #18
     716:	18fb      	adds	r3, r7, r3
     718:	881a      	ldrh	r2, [r3, #0]
     71a:	2312      	movs	r3, #18
     71c:	18fb      	adds	r3, r7, r3
     71e:	3201      	adds	r2, #1
     720:	801a      	strh	r2, [r3, #0]
     722:	e7e3      	b.n	6ec <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0x74>
		}
		CE_High_FRAM();
     724:	68fb      	ldr	r3, [r7, #12]
     726:	0018      	movs	r0, r3
     728:	4b10      	ldr	r3, [pc, #64]	; (76c <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xf4>)
     72a:	4798      	blx	r3
		WRDI();
     72c:	68fb      	ldr	r3, [r7, #12]
     72e:	0018      	movs	r0, r3
     730:	4b0f      	ldr	r3, [pc, #60]	; (770 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xf8>)
     732:	4798      	blx	r3
		size -= i;
     734:	2312      	movs	r3, #18
     736:	18fb      	adds	r3, r7, r3
     738:	881b      	ldrh	r3, [r3, #0]
     73a:	683a      	ldr	r2, [r7, #0]
     73c:	1ad3      	subs	r3, r2, r3
     73e:	603b      	str	r3, [r7, #0]
		dest += i;
     740:	2312      	movs	r3, #18
     742:	18fb      	adds	r3, r7, r3
     744:	881b      	ldrh	r3, [r3, #0]
     746:	68ba      	ldr	r2, [r7, #8]
     748:	18d3      	adds	r3, r2, r3
     74a:	60bb      	str	r3, [r7, #8]
	while (size > 0){
     74c:	e7af      	b.n	6ae <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0x36>
		}
		return *srcPtr;
     74e:	697b      	ldr	r3, [r7, #20]
     750:	781b      	ldrb	r3, [r3, #0]

	}
     752:	0018      	movs	r0, r3
     754:	46bd      	mov	sp, r7
     756:	b006      	add	sp, #24
     758:	bd80      	pop	{r7, pc}
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	00000609 	.word	0x00000609
     760:	00000775 	.word	0x00000775
     764:	00000575 	.word	0x00000575
     768:	000005ad 	.word	0x000005ad
     76c:	00000591 	.word	0x00000591
     770:	00000641 	.word	0x00000641

00000774 <_ZN17FRAM_Memory_Class18ReadStatusRegisterEv>:
		uint8_t	status = ReadStatusRegister();
		
		while ((status & kFlashRead) == kFlashRead)	// waste time until not busy
		status = ReadStatusRegister();
	}
uint8_t  FRAM_Memory_Class::ReadStatusRegister(void){
     774:	b590      	push	{r4, r7, lr}
     776:	b085      	sub	sp, #20
     778:	af00      	add	r7, sp, #0
     77a:	6078      	str	r0, [r7, #4]
		uint8_t byte = 0;
     77c:	230f      	movs	r3, #15
     77e:	18fb      	adds	r3, r7, r3
     780:	2200      	movs	r2, #0
     782:	701a      	strb	r2, [r3, #0]
		CE_Low_FRAM();			// enable device
     784:	687b      	ldr	r3, [r7, #4]
     786:	0018      	movs	r0, r3
     788:	4b0c      	ldr	r3, [pc, #48]	; (7bc <_ZN17FRAM_Memory_Class18ReadStatusRegisterEv+0x48>)
     78a:	4798      	blx	r3
		Send_Byte(kFlashReadSR);	// send RDSR command
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	2105      	movs	r1, #5
     790:	0018      	movs	r0, r3
     792:	4b0b      	ldr	r3, [pc, #44]	; (7c0 <_ZN17FRAM_Memory_Class18ReadStatusRegisterEv+0x4c>)
     794:	4798      	blx	r3
		byte = Get_Byte();		/* receive byte */
     796:	230f      	movs	r3, #15
     798:	18fc      	adds	r4, r7, r3
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	0018      	movs	r0, r3
     79e:	4b09      	ldr	r3, [pc, #36]	; (7c4 <_ZN17FRAM_Memory_Class18ReadStatusRegisterEv+0x50>)
     7a0:	4798      	blx	r3
     7a2:	0003      	movs	r3, r0
     7a4:	7023      	strb	r3, [r4, #0]
		CE_High_FRAM();			// disable device
     7a6:	687b      	ldr	r3, [r7, #4]
     7a8:	0018      	movs	r0, r3
     7aa:	4b07      	ldr	r3, [pc, #28]	; (7c8 <_ZN17FRAM_Memory_Class18ReadStatusRegisterEv+0x54>)
     7ac:	4798      	blx	r3
		return byte;
     7ae:	230f      	movs	r3, #15
     7b0:	18fb      	adds	r3, r7, r3
     7b2:	781b      	ldrb	r3, [r3, #0]
	}
     7b4:	0018      	movs	r0, r3
     7b6:	46bd      	mov	sp, r7
     7b8:	b005      	add	sp, #20
     7ba:	bd90      	pop	{r4, r7, pc}
     7bc:	00000575 	.word	0x00000575
     7c0:	000005ad 	.word	0x000005ad
     7c4:	000005dd 	.word	0x000005dd
     7c8:	00000591 	.word	0x00000591

000007cc <_ZN17FRAM_Memory_Class10flashCloseEv>:
void FRAM_Memory_Class::flashClose(void){
     7cc:	b580      	push	{r7, lr}
     7ce:	b082      	sub	sp, #8
     7d0:	af00      	add	r7, sp, #0
     7d2:	6078      	str	r0, [r7, #4]
	
		spi0.disable();
     7d4:	4b03      	ldr	r3, [pc, #12]	; (7e4 <_ZN17FRAM_Memory_Class10flashCloseEv+0x18>)
     7d6:	0018      	movs	r0, r3
     7d8:	4b03      	ldr	r3, [pc, #12]	; (7e8 <_ZN17FRAM_Memory_Class10flashCloseEv+0x1c>)
     7da:	4798      	blx	r3
	}
     7dc:	46c0      	nop			; (mov r8, r8)
     7de:	46bd      	mov	sp, r7
     7e0:	b002      	add	sp, #8
     7e2:	bd80      	pop	{r7, pc}
     7e4:	200004bc 	.word	0x200004bc
     7e8:	00004281 	.word	0x00004281

000007ec <_Z41__static_initialization_and_destruction_0ii>:
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
	Send_Byte(((Dst & 0xFFFF) >> 8));
	Send_Byte(Dst & 0xFF);
	CE_High_FRAM();				// disable device
     7ec:	b580      	push	{r7, lr}
     7ee:	b082      	sub	sp, #8
     7f0:	af00      	add	r7, sp, #0
     7f2:	6078      	str	r0, [r7, #4]
     7f4:	6039      	str	r1, [r7, #0]
     7f6:	687b      	ldr	r3, [r7, #4]
     7f8:	2b01      	cmp	r3, #1
     7fa:	d10e      	bne.n	81a <_Z41__static_initialization_and_destruction_0ii+0x2e>
     7fc:	683b      	ldr	r3, [r7, #0]
     7fe:	4a09      	ldr	r2, [pc, #36]	; (824 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     800:	4293      	cmp	r3, r2
     802:	d10a      	bne.n	81a <_Z41__static_initialization_and_destruction_0ii+0x2e>
SPI_Asyn_Class FRAM_Memory_Class::spi0(0);
     804:	4b08      	ldr	r3, [pc, #32]	; (828 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     806:	2100      	movs	r1, #0
     808:	0018      	movs	r0, r3
     80a:	4b08      	ldr	r3, [pc, #32]	; (82c <_Z41__static_initialization_and_destruction_0ii+0x40>)
     80c:	4798      	blx	r3
     80e:	4a08      	ldr	r2, [pc, #32]	; (830 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     810:	4908      	ldr	r1, [pc, #32]	; (834 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     812:	4b05      	ldr	r3, [pc, #20]	; (828 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     814:	0018      	movs	r0, r3
     816:	4b08      	ldr	r3, [pc, #32]	; (838 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     818:	4798      	blx	r3
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	46bd      	mov	sp, r7
     81e:	b002      	add	sp, #8
     820:	bd80      	pop	{r7, pc}
     822:	46c0      	nop			; (mov r8, r8)
     824:	0000ffff 	.word	0x0000ffff
     828:	200004bc 	.word	0x200004bc
     82c:	000041b1 	.word	0x000041b1
     830:	20000000 	.word	0x20000000
     834:	000041ad 	.word	0x000041ad
     838:	000042f9 	.word	0x000042f9

0000083c <_GLOBAL__sub_I__ZN17FRAM_Memory_ClassC2Ev>:
     83c:	b580      	push	{r7, lr}
     83e:	af00      	add	r7, sp, #0
     840:	4b03      	ldr	r3, [pc, #12]	; (850 <_GLOBAL__sub_I__ZN17FRAM_Memory_ClassC2Ev+0x14>)
     842:	0019      	movs	r1, r3
     844:	2001      	movs	r0, #1
     846:	4b03      	ldr	r3, [pc, #12]	; (854 <_GLOBAL__sub_I__ZN17FRAM_Memory_ClassC2Ev+0x18>)
     848:	4798      	blx	r3
     84a:	46bd      	mov	sp, r7
     84c:	bd80      	pop	{r7, pc}
     84e:	46c0      	nop			; (mov r8, r8)
     850:	0000ffff 	.word	0x0000ffff
     854:	000007ed 	.word	0x000007ed

00000858 <hri_port_set_OUT_reg>:
{
     858:	b580      	push	{r7, lr}
     85a:	b084      	sub	sp, #16
     85c:	af00      	add	r7, sp, #0
     85e:	60f8      	str	r0, [r7, #12]
     860:	607a      	str	r2, [r7, #4]
     862:	230b      	movs	r3, #11
     864:	18fb      	adds	r3, r7, r3
     866:	1c0a      	adds	r2, r1, #0
     868:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     86a:	230b      	movs	r3, #11
     86c:	18fb      	adds	r3, r7, r3
     86e:	781b      	ldrb	r3, [r3, #0]
     870:	68fa      	ldr	r2, [r7, #12]
     872:	01db      	lsls	r3, r3, #7
     874:	18d3      	adds	r3, r2, r3
     876:	3318      	adds	r3, #24
     878:	687a      	ldr	r2, [r7, #4]
     87a:	601a      	str	r2, [r3, #0]
}
     87c:	46c0      	nop			; (mov r8, r8)
     87e:	46bd      	mov	sp, r7
     880:	b004      	add	sp, #16
     882:	bd80      	pop	{r7, pc}

00000884 <hri_port_clear_OUT_reg>:
{
     884:	b580      	push	{r7, lr}
     886:	b084      	sub	sp, #16
     888:	af00      	add	r7, sp, #0
     88a:	60f8      	str	r0, [r7, #12]
     88c:	607a      	str	r2, [r7, #4]
     88e:	230b      	movs	r3, #11
     890:	18fb      	adds	r3, r7, r3
     892:	1c0a      	adds	r2, r1, #0
     894:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     896:	230b      	movs	r3, #11
     898:	18fb      	adds	r3, r7, r3
     89a:	781b      	ldrb	r3, [r3, #0]
     89c:	68fa      	ldr	r2, [r7, #12]
     89e:	01db      	lsls	r3, r3, #7
     8a0:	18d3      	adds	r3, r2, r3
     8a2:	3314      	adds	r3, #20
     8a4:	687a      	ldr	r2, [r7, #4]
     8a6:	601a      	str	r2, [r3, #0]
}
     8a8:	46c0      	nop			; (mov r8, r8)
     8aa:	46bd      	mov	sp, r7
     8ac:	b004      	add	sp, #16
     8ae:	bd80      	pop	{r7, pc}

000008b0 <_gpio_set_level>:
{
     8b0:	b580      	push	{r7, lr}
     8b2:	b082      	sub	sp, #8
     8b4:	af00      	add	r7, sp, #0
     8b6:	6039      	str	r1, [r7, #0]
     8b8:	0011      	movs	r1, r2
     8ba:	1dfb      	adds	r3, r7, #7
     8bc:	1c02      	adds	r2, r0, #0
     8be:	701a      	strb	r2, [r3, #0]
     8c0:	1dbb      	adds	r3, r7, #6
     8c2:	1c0a      	adds	r2, r1, #0
     8c4:	701a      	strb	r2, [r3, #0]
	if (level) {
     8c6:	1dbb      	adds	r3, r7, #6
     8c8:	781b      	ldrb	r3, [r3, #0]
     8ca:	2b00      	cmp	r3, #0
     8cc:	d008      	beq.n	8e0 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     8ce:	683a      	ldr	r2, [r7, #0]
     8d0:	1dfb      	adds	r3, r7, #7
     8d2:	7819      	ldrb	r1, [r3, #0]
     8d4:	23c0      	movs	r3, #192	; 0xc0
     8d6:	05db      	lsls	r3, r3, #23
     8d8:	0018      	movs	r0, r3
     8da:	4b07      	ldr	r3, [pc, #28]	; (8f8 <_gpio_set_level+0x48>)
     8dc:	4798      	blx	r3
}
     8de:	e007      	b.n	8f0 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     8e0:	683a      	ldr	r2, [r7, #0]
     8e2:	1dfb      	adds	r3, r7, #7
     8e4:	7819      	ldrb	r1, [r3, #0]
     8e6:	23c0      	movs	r3, #192	; 0xc0
     8e8:	05db      	lsls	r3, r3, #23
     8ea:	0018      	movs	r0, r3
     8ec:	4b03      	ldr	r3, [pc, #12]	; (8fc <_gpio_set_level+0x4c>)
     8ee:	4798      	blx	r3
}
     8f0:	46c0      	nop			; (mov r8, r8)
     8f2:	46bd      	mov	sp, r7
     8f4:	b002      	add	sp, #8
     8f6:	bd80      	pop	{r7, pc}
     8f8:	00000859 	.word	0x00000859
     8fc:	00000885 	.word	0x00000885

00000900 <gpio_set_pin_level>:
{
     900:	b580      	push	{r7, lr}
     902:	b082      	sub	sp, #8
     904:	af00      	add	r7, sp, #0
     906:	0002      	movs	r2, r0
     908:	1dfb      	adds	r3, r7, #7
     90a:	701a      	strb	r2, [r3, #0]
     90c:	1dbb      	adds	r3, r7, #6
     90e:	1c0a      	adds	r2, r1, #0
     910:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     912:	1dfb      	adds	r3, r7, #7
     914:	781b      	ldrb	r3, [r3, #0]
     916:	115b      	asrs	r3, r3, #5
     918:	b2d8      	uxtb	r0, r3
     91a:	1dfb      	adds	r3, r7, #7
     91c:	781b      	ldrb	r3, [r3, #0]
     91e:	001a      	movs	r2, r3
     920:	231f      	movs	r3, #31
     922:	4013      	ands	r3, r2
     924:	2201      	movs	r2, #1
     926:	409a      	lsls	r2, r3
     928:	0011      	movs	r1, r2
     92a:	1dbb      	adds	r3, r7, #6
     92c:	781b      	ldrb	r3, [r3, #0]
     92e:	001a      	movs	r2, r3
     930:	4b02      	ldr	r3, [pc, #8]	; (93c <gpio_set_pin_level+0x3c>)
     932:	4798      	blx	r3
}
     934:	46c0      	nop			; (mov r8, r8)
     936:	46bd      	mov	sp, r7
     938:	b002      	add	sp, #8
     93a:	bd80      	pop	{r7, pc}
     93c:	000008b1 	.word	0x000008b1

00000940 <main>:
#include <atmel_start.h>
#include "FRAM_Memory_Class.h"


int main(void)
{
     940:	b580      	push	{r7, lr}
     942:	b0c2      	sub	sp, #264	; 0x108
     944:	af00      	add	r7, sp, #0
	atmel_start_init();
     946:	4b20      	ldr	r3, [pc, #128]	; (9c8 <main+0x88>)
     948:	4798      	blx	r3
	userParameters	parameters;
	FRAM_Memory_Class cypress;
     94a:	1d3b      	adds	r3, r7, #4
     94c:	0018      	movs	r0, r3
     94e:	4b1f      	ldr	r3, [pc, #124]	; (9cc <main+0x8c>)
     950:	4798      	blx	r3
	parameters	 =	defaultParameters;
     952:	238c      	movs	r3, #140	; 0x8c
     954:	18fa      	adds	r2, r7, r3
     956:	4b1e      	ldr	r3, [pc, #120]	; (9d0 <main+0x90>)
     958:	0010      	movs	r0, r2
     95a:	0019      	movs	r1, r3
     95c:	237c      	movs	r3, #124	; 0x7c
     95e:	001a      	movs	r2, r3
     960:	4b1c      	ldr	r3, [pc, #112]	; (9d4 <main+0x94>)
     962:	4798      	blx	r3
		
	cypress.init(&parameters);
     964:	238c      	movs	r3, #140	; 0x8c
     966:	18fa      	adds	r2, r7, r3
     968:	1d3b      	adds	r3, r7, #4
     96a:	0011      	movs	r1, r2
     96c:	0018      	movs	r0, r3
     96e:	4b1a      	ldr	r3, [pc, #104]	; (9d8 <main+0x98>)
     970:	4798      	blx	r3
	cypress.readConfigurationData(&parameters);
     972:	238c      	movs	r3, #140	; 0x8c
     974:	18fa      	adds	r2, r7, r3
     976:	1d3b      	adds	r3, r7, #4
     978:	0011      	movs	r1, r2
     97a:	0018      	movs	r0, r3
     97c:	4b17      	ldr	r3, [pc, #92]	; (9dc <main+0x9c>)
     97e:	4798      	blx	r3
    /* Replace with your application code */
    while (1) 
    {
				cypress.readConfigurationData(&parameters);
     980:	238c      	movs	r3, #140	; 0x8c
     982:	18fa      	adds	r2, r7, r3
     984:	1d3b      	adds	r3, r7, #4
     986:	0011      	movs	r1, r2
     988:	0018      	movs	r0, r3
     98a:	4b14      	ldr	r3, [pc, #80]	; (9dc <main+0x9c>)
     98c:	4798      	blx	r3
				delay_ms(1000);
     98e:	23fa      	movs	r3, #250	; 0xfa
     990:	009b      	lsls	r3, r3, #2
     992:	0018      	movs	r0, r3
     994:	4b12      	ldr	r3, [pc, #72]	; (9e0 <main+0xa0>)
     996:	4798      	blx	r3
				gpio_set_pin_level(Read_OK,false);
     998:	2100      	movs	r1, #0
     99a:	2003      	movs	r0, #3
     99c:	4b11      	ldr	r3, [pc, #68]	; (9e4 <main+0xa4>)
     99e:	4798      	blx	r3
				gpio_set_pin_level(Read_Fail,false);
     9a0:	2100      	movs	r1, #0
     9a2:	2002      	movs	r0, #2
     9a4:	4b0f      	ldr	r3, [pc, #60]	; (9e4 <main+0xa4>)
     9a6:	4798      	blx	r3
				gpio_set_pin_level(Write_Fail,false);
     9a8:	2100      	movs	r1, #0
     9aa:	2029      	movs	r0, #41	; 0x29
     9ac:	4b0d      	ldr	r3, [pc, #52]	; (9e4 <main+0xa4>)
     9ae:	4798      	blx	r3
				gpio_set_pin_level(Write_OK,false);
     9b0:	2100      	movs	r1, #0
     9b2:	2004      	movs	r0, #4
     9b4:	4b0b      	ldr	r3, [pc, #44]	; (9e4 <main+0xa4>)
     9b6:	4798      	blx	r3
				cypress.flushConfigurationData(&parameters);
     9b8:	238c      	movs	r3, #140	; 0x8c
     9ba:	18fa      	adds	r2, r7, r3
     9bc:	1d3b      	adds	r3, r7, #4
     9be:	0011      	movs	r1, r2
     9c0:	0018      	movs	r0, r3
     9c2:	4b09      	ldr	r3, [pc, #36]	; (9e8 <main+0xa8>)
     9c4:	4798      	blx	r3
				cypress.readConfigurationData(&parameters);
     9c6:	e7db      	b.n	980 <main+0x40>
     9c8:	000009ed 	.word	0x000009ed
     9cc:	000002fd 	.word	0x000002fd
     9d0:	00004794 	.word	0x00004794
     9d4:	00004525 	.word	0x00004525
     9d8:	0000033d 	.word	0x0000033d
     9dc:	0000040d 	.word	0x0000040d
     9e0:	00000df1 	.word	0x00000df1
     9e4:	00000901 	.word	0x00000901
     9e8:	00000399 	.word	0x00000399

000009ec <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     9ec:	b510      	push	{r4, lr}
	system_init();
     9ee:	4b02      	ldr	r3, [pc, #8]	; (9f8 <atmel_start_init+0xc>)
     9f0:	4798      	blx	r3
	usb_init();
     9f2:	4b02      	ldr	r3, [pc, #8]	; (9fc <atmel_start_init+0x10>)
     9f4:	4798      	blx	r3
}
     9f6:	bd10      	pop	{r4, pc}
     9f8:	00000c7d 	.word	0x00000c7d
     9fc:	00003601 	.word	0x00003601

00000a00 <SPI_0_PORT_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct spi_m_async_descriptor SPI_0;

void SPI_0_PORT_init(void)
{
     a00:	b5f0      	push	{r4, r5, r6, r7, lr}
     a02:	46ce      	mov	lr, r9
     a04:	4647      	mov	r7, r8
     a06:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a08:	21c0      	movs	r1, #192	; 0xc0
     a0a:	05c9      	lsls	r1, r1, #23
     a0c:	2380      	movs	r3, #128	; 0x80
     a0e:	009b      	lsls	r3, r3, #2
     a10:	604b      	str	r3, [r1, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a12:	4b25      	ldr	r3, [pc, #148]	; (aa8 <SPI_0_PORT_init+0xa8>)
     a14:	4a25      	ldr	r2, [pc, #148]	; (aac <SPI_0_PORT_init+0xac>)
     a16:	629a      	str	r2, [r3, #40]	; 0x28
     a18:	4a25      	ldr	r2, [pc, #148]	; (ab0 <SPI_0_PORT_init+0xb0>)
     a1a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a1c:	2449      	movs	r4, #73	; 0x49
     a1e:	5d1a      	ldrb	r2, [r3, r4]
     a20:	2004      	movs	r0, #4
     a22:	4382      	bics	r2, r0
     a24:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a26:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a28:	2601      	movs	r6, #1
     a2a:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a2c:	2201      	movs	r2, #1
     a2e:	4310      	orrs	r0, r2
     a30:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a32:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a34:	2734      	movs	r7, #52	; 0x34
     a36:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a38:	250f      	movs	r5, #15
     a3a:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
     a3c:	2420      	movs	r4, #32
     a3e:	46a1      	mov	r9, r4
     a40:	464c      	mov	r4, r9
     a42:	4320      	orrs	r0, r4
     a44:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a46:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a48:	2080      	movs	r0, #128	; 0x80
     a4a:	00c0      	lsls	r0, r0, #3
     a4c:	6148      	str	r0, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a4e:	6088      	str	r0, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a50:	4818      	ldr	r0, [pc, #96]	; (ab4 <SPI_0_PORT_init+0xb4>)
     a52:	6298      	str	r0, [r3, #40]	; 0x28
     a54:	20c0      	movs	r0, #192	; 0xc0
     a56:	0600      	lsls	r0, r0, #24
     a58:	4684      	mov	ip, r0
     a5a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a5c:	3716      	adds	r7, #22
     a5e:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a60:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a62:	4310      	orrs	r0, r2
     a64:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a66:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a68:	2035      	movs	r0, #53	; 0x35
     a6a:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a6c:	240f      	movs	r4, #15
     a6e:	43a7      	bics	r7, r4
	tmp |= PORT_PMUX_PMUXE(data);
     a70:	3c0d      	subs	r4, #13
     a72:	4327      	orrs	r7, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a74:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a76:	2780      	movs	r7, #128	; 0x80
     a78:	013f      	lsls	r7, r7, #4
     a7a:	614f      	str	r7, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a7c:	608f      	str	r7, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a7e:	490e      	ldr	r1, [pc, #56]	; (ab8 <SPI_0_PORT_init+0xb8>)
     a80:	6299      	str	r1, [r3, #40]	; 0x28
     a82:	4661      	mov	r1, ip
     a84:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a86:	274b      	movs	r7, #75	; 0x4b
     a88:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a8a:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a8c:	4311      	orrs	r1, r2
     a8e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a90:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a92:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a94:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
     a96:	4649      	mov	r1, r9
     a98:	430a      	orrs	r2, r1
     a9a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a9c:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
}
     a9e:	bc0c      	pop	{r2, r3}
     aa0:	4690      	mov	r8, r2
     aa2:	4699      	mov	r9, r3
     aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     aa6:	46c0      	nop			; (mov r8, r8)
     aa8:	41004400 	.word	0x41004400
     aac:	40020200 	.word	0x40020200
     ab0:	c0020000 	.word	0xc0020000
     ab4:	40000400 	.word	0x40000400
     ab8:	40000800 	.word	0x40000800

00000abc <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     abc:	4a04      	ldr	r2, [pc, #16]	; (ad0 <SPI_0_CLOCK_init+0x14>)
     abe:	6a13      	ldr	r3, [r2, #32]
     ac0:	2104      	movs	r1, #4
     ac2:	430b      	orrs	r3, r1
     ac4:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     ac6:	4a03      	ldr	r2, [pc, #12]	; (ad4 <SPI_0_CLOCK_init+0x18>)
     ac8:	4b03      	ldr	r3, [pc, #12]	; (ad8 <SPI_0_CLOCK_init+0x1c>)
     aca:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     acc:	4770      	bx	lr
     ace:	46c0      	nop			; (mov r8, r8)
     ad0:	40000400 	.word	0x40000400
     ad4:	00004014 	.word	0x00004014
     ad8:	40000c00 	.word	0x40000c00

00000adc <SPI_0_init>:

void SPI_0_init(void)
{
     adc:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     ade:	4b04      	ldr	r3, [pc, #16]	; (af0 <SPI_0_init+0x14>)
     ae0:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
     ae2:	4904      	ldr	r1, [pc, #16]	; (af4 <SPI_0_init+0x18>)
     ae4:	4804      	ldr	r0, [pc, #16]	; (af8 <SPI_0_init+0x1c>)
     ae6:	4b05      	ldr	r3, [pc, #20]	; (afc <SPI_0_init+0x20>)
     ae8:	4798      	blx	r3
	SPI_0_PORT_init();
     aea:	4b05      	ldr	r3, [pc, #20]	; (b00 <SPI_0_init+0x24>)
     aec:	4798      	blx	r3
}
     aee:	bd10      	pop	{r4, pc}
     af0:	00000abd 	.word	0x00000abd
     af4:	42000800 	.word	0x42000800
     af8:	20000864 	.word	0x20000864
     afc:	0000100d 	.word	0x0000100d
     b00:	00000a01 	.word	0x00000a01

00000b04 <USART_0_CLOCK_init>:
     b04:	4a04      	ldr	r2, [pc, #16]	; (b18 <USART_0_CLOCK_init+0x14>)
     b06:	6a13      	ldr	r3, [r2, #32]
     b08:	2110      	movs	r1, #16
     b0a:	430b      	orrs	r3, r1
     b0c:	6213      	str	r3, [r2, #32]
     b0e:	4a03      	ldr	r2, [pc, #12]	; (b1c <USART_0_CLOCK_init+0x18>)
     b10:	4b03      	ldr	r3, [pc, #12]	; (b20 <USART_0_CLOCK_init+0x1c>)
     b12:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
}
     b14:	4770      	bx	lr
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	40000400 	.word	0x40000400
     b1c:	00004016 	.word	0x00004016
     b20:	40000c00 	.word	0x40000c00

00000b24 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     b24:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b26:	4b0e      	ldr	r3, [pc, #56]	; (b60 <USART_0_PORT_init+0x3c>)
     b28:	224c      	movs	r2, #76	; 0x4c
     b2a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b2c:	2501      	movs	r5, #1
     b2e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b30:	2401      	movs	r4, #1
     b32:	4321      	orrs	r1, r4
     b34:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b36:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b38:	2036      	movs	r0, #54	; 0x36
     b3a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b3c:	3a3d      	subs	r2, #61	; 0x3d
     b3e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     b40:	3a0d      	subs	r2, #13
     b42:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b44:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b46:	214d      	movs	r1, #77	; 0x4d
     b48:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b4a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b4c:	4322      	orrs	r2, r4
     b4e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b50:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b52:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b54:	393e      	subs	r1, #62	; 0x3e
     b56:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     b58:	3111      	adds	r1, #17
     b5a:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b5c:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);

	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
}
     b5e:	bd30      	pop	{r4, r5, pc}
     b60:	41004400 	.word	0x41004400

00000b64 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     b64:	b510      	push	{r4, lr}
     b66:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     b68:	4b06      	ldr	r3, [pc, #24]	; (b84 <USART_0_init+0x20>)
     b6a:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM2, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     b6c:	2300      	movs	r3, #0
     b6e:	9300      	str	r3, [sp, #0]
     b70:	3310      	adds	r3, #16
     b72:	4a05      	ldr	r2, [pc, #20]	; (b88 <USART_0_init+0x24>)
     b74:	4905      	ldr	r1, [pc, #20]	; (b8c <USART_0_init+0x28>)
     b76:	4806      	ldr	r0, [pc, #24]	; (b90 <USART_0_init+0x2c>)
     b78:	4c06      	ldr	r4, [pc, #24]	; (b94 <USART_0_init+0x30>)
     b7a:	47a0      	blx	r4
	USART_0_PORT_init();
     b7c:	4b06      	ldr	r3, [pc, #24]	; (b98 <USART_0_init+0x34>)
     b7e:	4798      	blx	r3
}
     b80:	b002      	add	sp, #8
     b82:	bd10      	pop	{r4, pc}
     b84:	00000b05 	.word	0x00000b05
     b88:	20000518 	.word	0x20000518
     b8c:	42001000 	.word	0x42001000
     b90:	200008ac 	.word	0x200008ac
     b94:	0000133d 	.word	0x0000133d
     b98:	00000b25 	.word	0x00000b25

00000b9c <delay_driver_init>:

void delay_driver_init(void)
{
     b9c:	b510      	push	{r4, lr}
	delay_init(SysTick);
     b9e:	4802      	ldr	r0, [pc, #8]	; (ba8 <delay_driver_init+0xc>)
     ba0:	4b02      	ldr	r3, [pc, #8]	; (bac <delay_driver_init+0x10>)
     ba2:	4798      	blx	r3
}
     ba4:	bd10      	pop	{r4, pc}
     ba6:	46c0      	nop			; (mov r8, r8)
     ba8:	e000e010 	.word	0xe000e010
     bac:	00000ddd 	.word	0x00000ddd

00000bb0 <USB_0_PORT_init>:

void USB_0_PORT_init(void)
{
     bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bb2:	46c6      	mov	lr, r8
     bb4:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bb6:	24c0      	movs	r4, #192	; 0xc0
     bb8:	05e4      	lsls	r4, r4, #23
     bba:	2280      	movs	r2, #128	; 0x80
     bbc:	0452      	lsls	r2, r2, #17
     bbe:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bc0:	4b1a      	ldr	r3, [pc, #104]	; (c2c <USB_0_PORT_init+0x7c>)
     bc2:	2780      	movs	r7, #128	; 0x80
     bc4:	05ff      	lsls	r7, r7, #23
     bc6:	629f      	str	r7, [r3, #40]	; 0x28
     bc8:	4919      	ldr	r1, [pc, #100]	; (c30 <USB_0_PORT_init+0x80>)
     bca:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bcc:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bce:	2058      	movs	r0, #88	; 0x58
     bd0:	5c19      	ldrb	r1, [r3, r0]
     bd2:	2204      	movs	r2, #4
     bd4:	4690      	mov	r8, r2
     bd6:	4391      	bics	r1, r2
     bd8:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bda:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     bdc:	2601      	movs	r6, #1
     bde:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     be0:	2501      	movs	r5, #1
     be2:	4329      	orrs	r1, r5
     be4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     be6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     be8:	381c      	subs	r0, #28
     bea:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bec:	320b      	adds	r2, #11
     bee:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     bf0:	3a09      	subs	r2, #9
     bf2:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bf4:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bf6:	2180      	movs	r1, #128	; 0x80
     bf8:	0489      	lsls	r1, r1, #18
     bfa:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bfc:	629f      	str	r7, [r3, #40]	; 0x28
     bfe:	4f0d      	ldr	r7, [pc, #52]	; (c34 <USB_0_PORT_init+0x84>)
     c00:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c02:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c04:	2159      	movs	r1, #89	; 0x59
     c06:	5c5c      	ldrb	r4, [r3, r1]
     c08:	4642      	mov	r2, r8
     c0a:	4394      	bics	r4, r2
     c0c:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c0e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c10:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c12:	432a      	orrs	r2, r5
     c14:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c16:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c18:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c1a:	394a      	subs	r1, #74	; 0x4a
     c1c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     c1e:	3151      	adds	r1, #81	; 0x51
     c20:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c22:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     c24:	bc04      	pop	{r2}
     c26:	4690      	mov	r8, r2
     c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	41004400 	.word	0x41004400
     c30:	c0000100 	.word	0xc0000100
     c34:	c0000200 	.word	0xc0000200

00000c38 <USB_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     c38:	4b06      	ldr	r3, [pc, #24]	; (c54 <USB_0_CLOCK_init+0x1c>)
     c3a:	69da      	ldr	r2, [r3, #28]
     c3c:	2120      	movs	r1, #32
     c3e:	430a      	orrs	r2, r1
     c40:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     c42:	695a      	ldr	r2, [r3, #20]
     c44:	3120      	adds	r1, #32
     c46:	430a      	orrs	r2, r1
     c48:	615a      	str	r2, [r3, #20]
     c4a:	4a03      	ldr	r2, [pc, #12]	; (c58 <USB_0_CLOCK_init+0x20>)
     c4c:	4b03      	ldr	r3, [pc, #12]	; (c5c <USB_0_CLOCK_init+0x24>)
     c4e:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     c50:	4770      	bx	lr
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	40000400 	.word	0x40000400
     c58:	00004206 	.word	0x00004206
     c5c:	40000c00 	.word	0x40000c00

00000c60 <USB_0_init>:

void USB_0_init(void)
{
     c60:	b510      	push	{r4, lr}
	USB_0_CLOCK_init();
     c62:	4b03      	ldr	r3, [pc, #12]	; (c70 <USB_0_init+0x10>)
     c64:	4798      	blx	r3
	usb_d_init();
     c66:	4b03      	ldr	r3, [pc, #12]	; (c74 <USB_0_init+0x14>)
     c68:	4798      	blx	r3
	USB_0_PORT_init();
     c6a:	4b03      	ldr	r3, [pc, #12]	; (c78 <USB_0_init+0x18>)
     c6c:	4798      	blx	r3
}
     c6e:	bd10      	pop	{r4, pc}
     c70:	00000c39 	.word	0x00000c39
     c74:	00001645 	.word	0x00001645
     c78:	00000bb1 	.word	0x00000bb1

00000c7c <system_init>:

void system_init(void)
{
     c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c7e:	46d6      	mov	lr, sl
     c80:	464f      	mov	r7, r9
     c82:	4646      	mov	r6, r8
     c84:	b5c0      	push	{r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     c86:	4b46      	ldr	r3, [pc, #280]	; (da0 <system_init+0x124>)
     c88:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c8a:	22c0      	movs	r2, #192	; 0xc0
     c8c:	05d2      	lsls	r2, r2, #23
     c8e:	2304      	movs	r3, #4
     c90:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c92:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c94:	4b43      	ldr	r3, [pc, #268]	; (da4 <system_init+0x128>)
     c96:	4944      	ldr	r1, [pc, #272]	; (da8 <system_init+0x12c>)
     c98:	6299      	str	r1, [r3, #40]	; 0x28
     c9a:	24c0      	movs	r4, #192	; 0xc0
     c9c:	0624      	lsls	r4, r4, #24
     c9e:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ca0:	2542      	movs	r5, #66	; 0x42
     ca2:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ca4:	2101      	movs	r1, #1
     ca6:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ca8:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     caa:	2008      	movs	r0, #8
     cac:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     cae:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cb0:	483e      	ldr	r0, [pc, #248]	; (dac <system_init+0x130>)
     cb2:	6298      	str	r0, [r3, #40]	; 0x28
     cb4:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cb6:	3501      	adds	r5, #1
     cb8:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     cba:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cbc:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cbe:	2010      	movs	r0, #16
     cc0:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     cc2:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cc4:	483a      	ldr	r0, [pc, #232]	; (db0 <system_init+0x134>)
     cc6:	6298      	str	r0, [r3, #40]	; 0x28
     cc8:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cca:	3501      	adds	r5, #1
     ccc:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     cce:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cd0:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cd2:	2080      	movs	r0, #128	; 0x80
     cd4:	0040      	lsls	r0, r0, #1
     cd6:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     cd8:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cda:	4836      	ldr	r0, [pc, #216]	; (db4 <system_init+0x138>)
     cdc:	6298      	str	r0, [r3, #40]	; 0x28
     cde:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ce0:	3504      	adds	r5, #4
     ce2:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ce4:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ce6:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ce8:	2080      	movs	r0, #128	; 0x80
     cea:	0500      	lsls	r0, r0, #20
     cec:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     cee:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cf0:	2080      	movs	r0, #128	; 0x80
     cf2:	05c0      	lsls	r0, r0, #23
     cf4:	6298      	str	r0, [r3, #40]	; 0x28
     cf6:	4d30      	ldr	r5, [pc, #192]	; (db8 <system_init+0x13c>)
     cf8:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cfa:	265b      	movs	r6, #91	; 0x5b
     cfc:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     cfe:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d00:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d02:	2580      	movs	r5, #128	; 0x80
     d04:	056d      	lsls	r5, r5, #21
     d06:	6195      	str	r5, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d08:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d0a:	6298      	str	r0, [r3, #40]	; 0x28
     d0c:	4d2b      	ldr	r5, [pc, #172]	; (dbc <system_init+0x140>)
     d0e:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d10:	3601      	adds	r6, #1
     d12:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d14:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d16:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d18:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d1a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d1c:	6298      	str	r0, [r3, #40]	; 0x28
     d1e:	4d28      	ldr	r5, [pc, #160]	; (dc0 <system_init+0x144>)
     d20:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d22:	3602      	adds	r6, #2
     d24:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d26:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d28:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2a:	2680      	movs	r6, #128	; 0x80
     d2c:	0636      	lsls	r6, r6, #24
     d2e:	6156      	str	r6, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d30:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d32:	6298      	str	r0, [r3, #40]	; 0x28
     d34:	4d23      	ldr	r5, [pc, #140]	; (dc4 <system_init+0x148>)
     d36:	46aa      	mov	sl, r5
     d38:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d3a:	255f      	movs	r5, #95	; 0x5f
     d3c:	46ac      	mov	ip, r5
     d3e:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d40:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d42:	4667      	mov	r7, ip
     d44:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d46:	2594      	movs	r5, #148	; 0x94
     d48:	46a8      	mov	r8, r5
     d4a:	356d      	adds	r5, #109	; 0x6d
     d4c:	35ff      	adds	r5, #255	; 0xff
     d4e:	4647      	mov	r7, r8
     d50:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d52:	3f0c      	subs	r7, #12
     d54:	46bc      	mov	ip, r7
     d56:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d58:	3d59      	subs	r5, #89	; 0x59
     d5a:	3dff      	subs	r5, #255	; 0xff
     d5c:	4f1a      	ldr	r7, [pc, #104]	; (dc8 <system_init+0x14c>)
     d5e:	515f      	str	r7, [r3, r5]
     d60:	515c      	str	r4, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d62:	24c9      	movs	r4, #201	; 0xc9
     d64:	46a1      	mov	r9, r4
     d66:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d68:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d6a:	464f      	mov	r7, r9
     d6c:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d6e:	4644      	mov	r4, r8
     d70:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d72:	4664      	mov	r4, ip
     d74:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d76:	5158      	str	r0, [r3, r5]
     d78:	4652      	mov	r2, sl
     d7a:	515a      	str	r2, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d7c:	20df      	movs	r0, #223	; 0xdf
     d7e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d80:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d82:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(pb31, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(pb31, GPIO_PIN_FUNCTION_OFF);

	SPI_0_init();
     d84:	4b11      	ldr	r3, [pc, #68]	; (dcc <system_init+0x150>)
     d86:	4798      	blx	r3
	USART_0_init();
     d88:	4b11      	ldr	r3, [pc, #68]	; (dd0 <system_init+0x154>)
     d8a:	4798      	blx	r3

	delay_driver_init();
     d8c:	4b11      	ldr	r3, [pc, #68]	; (dd4 <system_init+0x158>)
     d8e:	4798      	blx	r3

	USB_0_init();
     d90:	4b11      	ldr	r3, [pc, #68]	; (dd8 <system_init+0x15c>)
     d92:	4798      	blx	r3
}
     d94:	bc1c      	pop	{r2, r3, r4}
     d96:	4690      	mov	r8, r2
     d98:	4699      	mov	r9, r3
     d9a:	46a2      	mov	sl, r4
     d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	00001aa9 	.word	0x00001aa9
     da4:	41004400 	.word	0x41004400
     da8:	40000004 	.word	0x40000004
     dac:	40000008 	.word	0x40000008
     db0:	40000010 	.word	0x40000010
     db4:	40000100 	.word	0x40000100
     db8:	c0000800 	.word	0xc0000800
     dbc:	c0001000 	.word	0xc0001000
     dc0:	c0004000 	.word	0xc0004000
     dc4:	c0008000 	.word	0xc0008000
     dc8:	40000200 	.word	0x40000200
     dcc:	00000add 	.word	0x00000add
     dd0:	00000b65 	.word	0x00000b65
     dd4:	00000b9d 	.word	0x00000b9d
     dd8:	00000c61 	.word	0x00000c61

00000ddc <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     ddc:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     dde:	4b02      	ldr	r3, [pc, #8]	; (de8 <delay_init+0xc>)
     de0:	6018      	str	r0, [r3, #0]
     de2:	4b02      	ldr	r3, [pc, #8]	; (dec <delay_init+0x10>)
     de4:	4798      	blx	r3
}
     de6:	bd10      	pop	{r4, pc}
     de8:	20000528 	.word	0x20000528
     dec:	00002259 	.word	0x00002259

00000df0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     df0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     df2:	4b04      	ldr	r3, [pc, #16]	; (e04 <delay_ms+0x14>)
     df4:	681c      	ldr	r4, [r3, #0]
     df6:	4b04      	ldr	r3, [pc, #16]	; (e08 <delay_ms+0x18>)
     df8:	4798      	blx	r3
     dfa:	0001      	movs	r1, r0
     dfc:	0020      	movs	r0, r4
     dfe:	4b03      	ldr	r3, [pc, #12]	; (e0c <delay_ms+0x1c>)
     e00:	4798      	blx	r3
}
     e02:	bd10      	pop	{r4, pc}
     e04:	20000528 	.word	0x20000528
     e08:	00001aa1 	.word	0x00001aa1
     e0c:	0000226d 	.word	0x0000226d

00000e10 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     e10:	b570      	push	{r4, r5, r6, lr}
     e12:	0004      	movs	r4, r0
     e14:	000e      	movs	r6, r1
     e16:	0015      	movs	r5, r2
	ASSERT(io);
     e18:	1e43      	subs	r3, r0, #1
     e1a:	4198      	sbcs	r0, r3
     e1c:	b2c0      	uxtb	r0, r0
     e1e:	2228      	movs	r2, #40	; 0x28
     e20:	32ff      	adds	r2, #255	; 0xff
     e22:	490a      	ldr	r1, [pc, #40]	; (e4c <_spi_m_async_io_write+0x3c>)
     e24:	4b0a      	ldr	r3, [pc, #40]	; (e50 <_spi_m_async_io_write+0x40>)
     e26:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
     e28:	0023      	movs	r3, r4
     e2a:	2200      	movs	r2, #0
     e2c:	61a2      	str	r2, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
     e2e:	6166      	str	r6, [r4, #20]
	spi->xfer.size  = length;
     e30:	61e5      	str	r5, [r4, #28]
	spi->xfercnt    = 0;
     e32:	6222      	str	r2, [r4, #32]
	spi->xfer.rxbuf = NULL;
     e34:	3b24      	subs	r3, #36	; 0x24

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     e36:	2110      	movs	r1, #16
     e38:	322c      	adds	r2, #44	; 0x2c
     e3a:	5499      	strb	r1, [r3, r2]
	_spi_m_async_enable_tx(&spi->dev, true);
     e3c:	0020      	movs	r0, r4
     e3e:	3820      	subs	r0, #32
     e40:	390f      	subs	r1, #15
     e42:	4b04      	ldr	r3, [pc, #16]	; (e54 <_spi_m_async_io_write+0x44>)
     e44:	4798      	blx	r3

	return ERR_NONE;
}
     e46:	2000      	movs	r0, #0
     e48:	bd70      	pop	{r4, r5, r6, pc}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	00004818 	.word	0x00004818
     e50:	00001999 	.word	0x00001999
     e54:	00001ff9 	.word	0x00001ff9

00000e58 <_spi_m_async_io_read>:
{
     e58:	b570      	push	{r4, r5, r6, lr}
     e5a:	0004      	movs	r4, r0
     e5c:	000e      	movs	r6, r1
     e5e:	0015      	movs	r5, r2
	ASSERT(io);
     e60:	1e43      	subs	r3, r0, #1
     e62:	4198      	sbcs	r0, r3
     e64:	b2c0      	uxtb	r0, r0
     e66:	2206      	movs	r2, #6
     e68:	32ff      	adds	r2, #255	; 0xff
     e6a:	490c      	ldr	r1, [pc, #48]	; (e9c <_spi_m_async_io_read+0x44>)
     e6c:	4b0c      	ldr	r3, [pc, #48]	; (ea0 <_spi_m_async_io_read+0x48>)
     e6e:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
     e70:	0023      	movs	r3, r4
     e72:	61a6      	str	r6, [r4, #24]
	spi->xfer.txbuf = NULL;
     e74:	2200      	movs	r2, #0
     e76:	6162      	str	r2, [r4, #20]
	spi->xfer.size  = length;
     e78:	61e5      	str	r5, [r4, #28]
	spi->xfercnt    = 0;
     e7a:	6222      	str	r2, [r4, #32]
	spi->xfer.rxbuf = buf;
     e7c:	3b24      	subs	r3, #36	; 0x24
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     e7e:	2110      	movs	r1, #16
     e80:	322c      	adds	r2, #44	; 0x2c
     e82:	5499      	strb	r1, [r3, r2]
	_spi_m_async_enable_rx(&spi->dev, true);
     e84:	3c20      	subs	r4, #32
     e86:	390f      	subs	r1, #15
     e88:	0020      	movs	r0, r4
     e8a:	4b06      	ldr	r3, [pc, #24]	; (ea4 <_spi_m_async_io_read+0x4c>)
     e8c:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
     e8e:	4906      	ldr	r1, [pc, #24]	; (ea8 <_spi_m_async_io_read+0x50>)
     e90:	0020      	movs	r0, r4
     e92:	4b06      	ldr	r3, [pc, #24]	; (eac <_spi_m_async_io_read+0x54>)
     e94:	4798      	blx	r3
}
     e96:	2000      	movs	r0, #0
     e98:	bd70      	pop	{r4, r5, r6, pc}
     e9a:	46c0      	nop			; (mov r8, r8)
     e9c:	00004818 	.word	0x00004818
     ea0:	00001999 	.word	0x00001999
     ea4:	00002035 	.word	0x00002035
     ea8:	000001ff 	.word	0x000001ff
     eac:	000020bd 	.word	0x000020bd

00000eb0 <_spi_dev_error>:
{
     eb0:	b570      	push	{r4, r5, r6, lr}
     eb2:	0004      	movs	r4, r0
     eb4:	000e      	movs	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     eb6:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
     eb8:	2100      	movs	r1, #0
     eba:	4b0a      	ldr	r3, [pc, #40]	; (ee4 <_spi_dev_error+0x34>)
     ebc:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
     ebe:	2100      	movs	r1, #0
     ec0:	0020      	movs	r0, r4
     ec2:	4b09      	ldr	r3, [pc, #36]	; (ee8 <_spi_dev_error+0x38>)
     ec4:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
     ec6:	2100      	movs	r1, #0
     ec8:	0020      	movs	r0, r4
     eca:	4b08      	ldr	r3, [pc, #32]	; (eec <_spi_dev_error+0x3c>)
     ecc:	4798      	blx	r3
	spi->stat = 0;
     ece:	2200      	movs	r2, #0
     ed0:	232c      	movs	r3, #44	; 0x2c
     ed2:	54ea      	strb	r2, [r5, r3]
	if (spi->callbacks.cb_error) {
     ed4:	6b23      	ldr	r3, [r4, #48]	; 0x30
     ed6:	2b00      	cmp	r3, #0
     ed8:	d002      	beq.n	ee0 <_spi_dev_error+0x30>
		spi->callbacks.cb_error(spi, status);
     eda:	0031      	movs	r1, r6
     edc:	0028      	movs	r0, r5
     ede:	4798      	blx	r3
}
     ee0:	bd70      	pop	{r4, r5, r6, pc}
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	00001ff9 	.word	0x00001ff9
     ee8:	00002035 	.word	0x00002035
     eec:	0000207d 	.word	0x0000207d

00000ef0 <_spi_dev_complete>:
{
     ef0:	b510      	push	{r4, lr}
     ef2:	0004      	movs	r4, r0
	if (spi->xfercnt >= spi->xfer.size) {
     ef4:	6c02      	ldr	r2, [r0, #64]	; 0x40
     ef6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     ef8:	429a      	cmp	r2, r3
     efa:	d200      	bcs.n	efe <_spi_dev_complete+0xe>
}
     efc:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx_complete(dev, false);
     efe:	2100      	movs	r1, #0
     f00:	4b05      	ldr	r3, [pc, #20]	; (f18 <_spi_dev_complete+0x28>)
     f02:	4798      	blx	r3
		spi->stat = 0;
     f04:	1f23      	subs	r3, r4, #4
     f06:	2100      	movs	r1, #0
     f08:	222c      	movs	r2, #44	; 0x2c
     f0a:	5499      	strb	r1, [r3, r2]
		if (spi->callbacks.cb_xfer) {
     f0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     f0e:	2b00      	cmp	r3, #0
     f10:	d0f4      	beq.n	efc <_spi_dev_complete+0xc>
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     f12:	1f20      	subs	r0, r4, #4
			spi->callbacks.cb_xfer(spi);
     f14:	4798      	blx	r3
}
     f16:	e7f1      	b.n	efc <_spi_dev_complete+0xc>
     f18:	0000207d 	.word	0x0000207d

00000f1c <_spi_dev_tx>:
{
     f1c:	b510      	push	{r4, lr}
     f1e:	0004      	movs	r4, r0
	if (!(dev->char_size > 1)) {
     f20:	7903      	ldrb	r3, [r0, #4]
     f22:	2b01      	cmp	r3, #1
     f24:	d90d      	bls.n	f42 <_spi_dev_tx+0x26>
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
     f26:	6b41      	ldr	r1, [r0, #52]	; 0x34
     f28:	6c03      	ldr	r3, [r0, #64]	; 0x40
     f2a:	1c58      	adds	r0, r3, #1
     f2c:	6420      	str	r0, [r4, #64]	; 0x40
     f2e:	005b      	lsls	r3, r3, #1
     f30:	5a59      	ldrh	r1, [r3, r1]
     f32:	0020      	movs	r0, r4
     f34:	4b0c      	ldr	r3, [pc, #48]	; (f68 <_spi_dev_tx+0x4c>)
     f36:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
     f38:	6c22      	ldr	r2, [r4, #64]	; 0x40
     f3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     f3c:	429a      	cmp	r2, r3
     f3e:	d009      	beq.n	f54 <_spi_dev_tx+0x38>
}
     f40:	bd10      	pop	{r4, pc}
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
     f42:	6b41      	ldr	r1, [r0, #52]	; 0x34
     f44:	6c02      	ldr	r2, [r0, #64]	; 0x40
     f46:	1c50      	adds	r0, r2, #1
     f48:	6420      	str	r0, [r4, #64]	; 0x40
     f4a:	5c89      	ldrb	r1, [r1, r2]
     f4c:	0020      	movs	r0, r4
     f4e:	4b06      	ldr	r3, [pc, #24]	; (f68 <_spi_dev_tx+0x4c>)
     f50:	4798      	blx	r3
     f52:	e7f1      	b.n	f38 <_spi_dev_tx+0x1c>
		_spi_m_async_enable_tx(dev, false);
     f54:	2100      	movs	r1, #0
     f56:	0020      	movs	r0, r4
     f58:	4b04      	ldr	r3, [pc, #16]	; (f6c <_spi_dev_tx+0x50>)
     f5a:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
     f5c:	2101      	movs	r1, #1
     f5e:	0020      	movs	r0, r4
     f60:	4b03      	ldr	r3, [pc, #12]	; (f70 <_spi_dev_tx+0x54>)
     f62:	4798      	blx	r3
}
     f64:	e7ec      	b.n	f40 <_spi_dev_tx+0x24>
     f66:	46c0      	nop			; (mov r8, r8)
     f68:	000020bd 	.word	0x000020bd
     f6c:	00001ff9 	.word	0x00001ff9
     f70:	0000207d 	.word	0x0000207d

00000f74 <_spi_dev_rx>:
{
     f74:	b570      	push	{r4, r5, r6, lr}
     f76:	0004      	movs	r4, r0
	if (spi->xfer.rxbuf) {
     f78:	6b83      	ldr	r3, [r0, #56]	; 0x38
     f7a:	2b00      	cmp	r3, #0
     f7c:	d022      	beq.n	fc4 <_spi_dev_rx+0x50>
		if (!(dev->char_size > 1)) {
     f7e:	7902      	ldrb	r2, [r0, #4]
     f80:	2a01      	cmp	r2, #1
     f82:	d917      	bls.n	fb4 <_spi_dev_rx+0x40>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
     f84:	6c05      	ldr	r5, [r0, #64]	; 0x40
     f86:	1c69      	adds	r1, r5, #1
     f88:	6401      	str	r1, [r0, #64]	; 0x40
     f8a:	006d      	lsls	r5, r5, #1
     f8c:	195d      	adds	r5, r3, r5
     f8e:	4b1c      	ldr	r3, [pc, #112]	; (1000 <_spi_dev_rx+0x8c>)
     f90:	4798      	blx	r3
     f92:	8028      	strh	r0, [r5, #0]
	if (spi->xfercnt < spi->xfer.size) {
     f94:	6c23      	ldr	r3, [r4, #64]	; 0x40
     f96:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     f98:	4293      	cmp	r3, r2
     f9a:	d223      	bcs.n	fe4 <_spi_dev_rx+0x70>
		if (spi->xfer.txbuf) {
     f9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
     f9e:	2a00      	cmp	r2, #0
     fa0:	d01b      	beq.n	fda <_spi_dev_rx+0x66>
			if (!(dev->char_size > 1)) {
     fa2:	7921      	ldrb	r1, [r4, #4]
     fa4:	2901      	cmp	r1, #1
     fa6:	d913      	bls.n	fd0 <_spi_dev_rx+0x5c>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
     fa8:	005b      	lsls	r3, r3, #1
     faa:	5a99      	ldrh	r1, [r3, r2]
     fac:	0020      	movs	r0, r4
     fae:	4b15      	ldr	r3, [pc, #84]	; (1004 <_spi_dev_rx+0x90>)
     fb0:	4798      	blx	r3
}
     fb2:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
     fb4:	6c05      	ldr	r5, [r0, #64]	; 0x40
     fb6:	1c69      	adds	r1, r5, #1
     fb8:	6401      	str	r1, [r0, #64]	; 0x40
     fba:	195d      	adds	r5, r3, r5
     fbc:	4b10      	ldr	r3, [pc, #64]	; (1000 <_spi_dev_rx+0x8c>)
     fbe:	4798      	blx	r3
     fc0:	7028      	strb	r0, [r5, #0]
     fc2:	e7e7      	b.n	f94 <_spi_dev_rx+0x20>
		_spi_m_async_read_one(dev);
     fc4:	4b0e      	ldr	r3, [pc, #56]	; (1000 <_spi_dev_rx+0x8c>)
     fc6:	4798      	blx	r3
		spi->xfercnt++;
     fc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
     fca:	3301      	adds	r3, #1
     fcc:	6423      	str	r3, [r4, #64]	; 0x40
     fce:	e7e1      	b.n	f94 <_spi_dev_rx+0x20>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
     fd0:	5cd1      	ldrb	r1, [r2, r3]
     fd2:	0020      	movs	r0, r4
     fd4:	4b0b      	ldr	r3, [pc, #44]	; (1004 <_spi_dev_rx+0x90>)
     fd6:	4798      	blx	r3
     fd8:	e7eb      	b.n	fb2 <_spi_dev_rx+0x3e>
			_spi_m_async_write_one(dev, dev->dummy_byte);
     fda:	88e1      	ldrh	r1, [r4, #6]
     fdc:	0020      	movs	r0, r4
     fde:	4b09      	ldr	r3, [pc, #36]	; (1004 <_spi_dev_rx+0x90>)
     fe0:	4798      	blx	r3
     fe2:	e7e6      	b.n	fb2 <_spi_dev_rx+0x3e>
		_spi_m_async_enable_rx(dev, false);
     fe4:	2100      	movs	r1, #0
     fe6:	0020      	movs	r0, r4
     fe8:	4b07      	ldr	r3, [pc, #28]	; (1008 <_spi_dev_rx+0x94>)
     fea:	4798      	blx	r3
		spi->stat = 0;
     fec:	1f23      	subs	r3, r4, #4
     fee:	2100      	movs	r1, #0
     ff0:	222c      	movs	r2, #44	; 0x2c
     ff2:	5499      	strb	r1, [r3, r2]
		if (spi->callbacks.cb_xfer) {
     ff4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     ff6:	2b00      	cmp	r3, #0
     ff8:	d0db      	beq.n	fb2 <_spi_dev_rx+0x3e>
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     ffa:	1f20      	subs	r0, r4, #4
			spi->callbacks.cb_xfer(spi);
     ffc:	4798      	blx	r3
}
     ffe:	e7d8      	b.n	fb2 <_spi_dev_rx+0x3e>
    1000:	000020f1 	.word	0x000020f1
    1004:	000020bd 	.word	0x000020bd
    1008:	00002035 	.word	0x00002035

0000100c <spi_m_async_init>:
{
    100c:	b570      	push	{r4, r5, r6, lr}
    100e:	0004      	movs	r4, r0
    1010:	000e      	movs	r6, r1
	ASSERT(spi && hw);
    1012:	2800      	cmp	r0, #0
    1014:	d026      	beq.n	1064 <spi_m_async_init+0x58>
    1016:	0008      	movs	r0, r1
    1018:	1e43      	subs	r3, r0, #1
    101a:	4198      	sbcs	r0, r3
    101c:	b2c0      	uxtb	r0, r0
    101e:	22a5      	movs	r2, #165	; 0xa5
    1020:	4911      	ldr	r1, [pc, #68]	; (1068 <spi_m_async_init+0x5c>)
    1022:	4b12      	ldr	r3, [pc, #72]	; (106c <spi_m_async_init+0x60>)
    1024:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1026:	6066      	str	r6, [r4, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    1028:	1d25      	adds	r5, r4, #4
    102a:	0031      	movs	r1, r6
    102c:	0028      	movs	r0, r5
    102e:	4b10      	ldr	r3, [pc, #64]	; (1070 <spi_m_async_init+0x64>)
    1030:	4798      	blx	r3
	if (rc >= 0) {
    1032:	2800      	cmp	r0, #0
    1034:	db15      	blt.n	1062 <spi_m_async_init+0x56>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    1036:	4a0f      	ldr	r2, [pc, #60]	; (1074 <spi_m_async_init+0x68>)
    1038:	2100      	movs	r1, #0
    103a:	0028      	movs	r0, r5
    103c:	4e0e      	ldr	r6, [pc, #56]	; (1078 <spi_m_async_init+0x6c>)
    103e:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    1040:	4a0e      	ldr	r2, [pc, #56]	; (107c <spi_m_async_init+0x70>)
    1042:	2101      	movs	r1, #1
    1044:	0028      	movs	r0, r5
    1046:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    1048:	4a0d      	ldr	r2, [pc, #52]	; (1080 <spi_m_async_init+0x74>)
    104a:	2102      	movs	r1, #2
    104c:	0028      	movs	r0, r5
    104e:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    1050:	4a0c      	ldr	r2, [pc, #48]	; (1084 <spi_m_async_init+0x78>)
    1052:	2103      	movs	r1, #3
    1054:	0028      	movs	r0, r5
    1056:	47b0      	blx	r6
	spi->io.read  = _spi_m_async_io_read;
    1058:	4b0b      	ldr	r3, [pc, #44]	; (1088 <spi_m_async_init+0x7c>)
    105a:	62a3      	str	r3, [r4, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    105c:	4b0b      	ldr	r3, [pc, #44]	; (108c <spi_m_async_init+0x80>)
    105e:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
    1060:	2000      	movs	r0, #0
}
    1062:	bd70      	pop	{r4, r5, r6, pc}
    1064:	2000      	movs	r0, #0
    1066:	e7da      	b.n	101e <spi_m_async_init+0x12>
    1068:	00004818 	.word	0x00004818
    106c:	00001999 	.word	0x00001999
    1070:	00001f2d 	.word	0x00001f2d
    1074:	00000f1d 	.word	0x00000f1d
    1078:	00002121 	.word	0x00002121
    107c:	00000f75 	.word	0x00000f75
    1080:	00000ef1 	.word	0x00000ef1
    1084:	00000eb1 	.word	0x00000eb1
    1088:	00000e59 	.word	0x00000e59
    108c:	00000e11 	.word	0x00000e11

00001090 <spi_m_async_enable>:
{
    1090:	b510      	push	{r4, lr}
    1092:	0004      	movs	r4, r0
	ASSERT(spi);
    1094:	1e43      	subs	r3, r0, #1
    1096:	4198      	sbcs	r0, r3
    1098:	b2c0      	uxtb	r0, r0
    109a:	22c1      	movs	r2, #193	; 0xc1
    109c:	4903      	ldr	r1, [pc, #12]	; (10ac <spi_m_async_enable+0x1c>)
    109e:	4b04      	ldr	r3, [pc, #16]	; (10b0 <spi_m_async_enable+0x20>)
    10a0:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    10a2:	1d20      	adds	r0, r4, #4
    10a4:	4b03      	ldr	r3, [pc, #12]	; (10b4 <spi_m_async_enable+0x24>)
    10a6:	4798      	blx	r3
}
    10a8:	bd10      	pop	{r4, pc}
    10aa:	46c0      	nop			; (mov r8, r8)
    10ac:	00004818 	.word	0x00004818
    10b0:	00001999 	.word	0x00001999
    10b4:	00001f91 	.word	0x00001f91

000010b8 <spi_m_async_disable>:
{
    10b8:	b510      	push	{r4, lr}
    10ba:	0004      	movs	r4, r0
	ASSERT(spi);
    10bc:	1e43      	subs	r3, r0, #1
    10be:	4198      	sbcs	r0, r3
    10c0:	b2c0      	uxtb	r0, r0
    10c2:	22c7      	movs	r2, #199	; 0xc7
    10c4:	4907      	ldr	r1, [pc, #28]	; (10e4 <spi_m_async_disable+0x2c>)
    10c6:	4b08      	ldr	r3, [pc, #32]	; (10e8 <spi_m_async_disable+0x30>)
    10c8:	4798      	blx	r3
	_spi_m_async_enable_tx(&spi->dev, false);
    10ca:	3404      	adds	r4, #4
    10cc:	2100      	movs	r1, #0
    10ce:	0020      	movs	r0, r4
    10d0:	4b06      	ldr	r3, [pc, #24]	; (10ec <spi_m_async_disable+0x34>)
    10d2:	4798      	blx	r3
	_spi_m_async_enable_rx(&spi->dev, false);
    10d4:	2100      	movs	r1, #0
    10d6:	0020      	movs	r0, r4
    10d8:	4b05      	ldr	r3, [pc, #20]	; (10f0 <spi_m_async_disable+0x38>)
    10da:	4798      	blx	r3
	_spi_m_async_disable(&spi->dev);
    10dc:	0020      	movs	r0, r4
    10de:	4b05      	ldr	r3, [pc, #20]	; (10f4 <spi_m_async_disable+0x3c>)
    10e0:	4798      	blx	r3
}
    10e2:	bd10      	pop	{r4, pc}
    10e4:	00004818 	.word	0x00004818
    10e8:	00001999 	.word	0x00001999
    10ec:	00001ff9 	.word	0x00001ff9
    10f0:	00002035 	.word	0x00002035
    10f4:	00001fc5 	.word	0x00001fc5

000010f8 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    10f8:	b570      	push	{r4, r5, r6, lr}
    10fa:	0004      	movs	r4, r0
    10fc:	000e      	movs	r6, r1
    10fe:	0015      	movs	r5, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    1100:	2800      	cmp	r0, #0
    1102:	d00f      	beq.n	1124 <spi_m_async_register_callback+0x2c>
    1104:	2000      	movs	r0, #0
    1106:	2301      	movs	r3, #1
    1108:	428b      	cmp	r3, r1
    110a:	4140      	adcs	r0, r0
    110c:	b2c0      	uxtb	r0, r0
    110e:	2301      	movs	r3, #1
    1110:	4018      	ands	r0, r3
    1112:	2264      	movs	r2, #100	; 0x64
    1114:	32ff      	adds	r2, #255	; 0xff
    1116:	4909      	ldr	r1, [pc, #36]	; (113c <spi_m_async_register_callback+0x44>)
    1118:	4b09      	ldr	r3, [pc, #36]	; (1140 <spi_m_async_register_callback+0x48>)
    111a:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    111c:	2e00      	cmp	r6, #0
    111e:	d103      	bne.n	1128 <spi_m_async_register_callback+0x30>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    1120:	6325      	str	r5, [r4, #48]	; 0x30
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
	}
}
    1122:	bd70      	pop	{r4, r5, r6, pc}
    1124:	2000      	movs	r0, #0
    1126:	e7f2      	b.n	110e <spi_m_async_register_callback+0x16>
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    1128:	6365      	str	r5, [r4, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    112a:	1e6a      	subs	r2, r5, #1
    112c:	4195      	sbcs	r5, r2
    112e:	b2ea      	uxtb	r2, r5
    1130:	1d20      	adds	r0, r4, #4
    1132:	2103      	movs	r1, #3
    1134:	4b03      	ldr	r3, [pc, #12]	; (1144 <spi_m_async_register_callback+0x4c>)
    1136:	4798      	blx	r3
}
    1138:	e7f3      	b.n	1122 <spi_m_async_register_callback+0x2a>
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	00004818 	.word	0x00004818
    1140:	00001999 	.word	0x00001999
    1144:	0000215d 	.word	0x0000215d

00001148 <spi_m_async_get_io_descriptor>:

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    1148:	b570      	push	{r4, r5, r6, lr}
    114a:	0004      	movs	r4, r0
    114c:	000d      	movs	r5, r1
	ASSERT(spi && io);
    114e:	2800      	cmp	r0, #0
    1150:	d00c      	beq.n	116c <spi_m_async_get_io_descriptor+0x24>
    1152:	0008      	movs	r0, r1
    1154:	1e43      	subs	r3, r0, #1
    1156:	4198      	sbcs	r0, r3
    1158:	b2c0      	uxtb	r0, r0
    115a:	2270      	movs	r2, #112	; 0x70
    115c:	32ff      	adds	r2, #255	; 0xff
    115e:	4904      	ldr	r1, [pc, #16]	; (1170 <spi_m_async_get_io_descriptor+0x28>)
    1160:	4b04      	ldr	r3, [pc, #16]	; (1174 <spi_m_async_get_io_descriptor+0x2c>)
    1162:	4798      	blx	r3
	*io = &spi->io;
    1164:	3424      	adds	r4, #36	; 0x24
    1166:	602c      	str	r4, [r5, #0]
	return 0;
}
    1168:	2000      	movs	r0, #0
    116a:	bd70      	pop	{r4, r5, r6, pc}
    116c:	2000      	movs	r0, #0
    116e:	e7f4      	b.n	115a <spi_m_async_get_io_descriptor+0x12>
    1170:	00004818 	.word	0x00004818
    1174:	00001999 	.word	0x00001999

00001178 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1178:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    117a:	3808      	subs	r0, #8

	descr->stat = 0;
    117c:	2300      	movs	r3, #0
    117e:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    1180:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1182:	2b00      	cmp	r3, #0
    1184:	d000      	beq.n	1188 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
    1186:	4798      	blx	r3
	}
}
    1188:	bd10      	pop	{r4, pc}

0000118a <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    118a:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    118c:	3808      	subs	r0, #8

	descr->stat = 0;
    118e:	2300      	movs	r3, #0
    1190:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
    1192:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1194:	2b00      	cmp	r3, #0
    1196:	d000      	beq.n	119a <usart_error+0x10>
		descr->usart_cb.error(descr);
    1198:	4798      	blx	r3
	}
}
    119a:	bd10      	pop	{r4, pc}

0000119c <usart_fill_rx_buffer>:
{
    119c:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    119e:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
    11a0:	302c      	adds	r0, #44	; 0x2c
    11a2:	4b04      	ldr	r3, [pc, #16]	; (11b4 <usart_fill_rx_buffer+0x18>)
    11a4:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    11a6:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    11a8:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
    11aa:	2b00      	cmp	r3, #0
    11ac:	d001      	beq.n	11b2 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    11ae:	0020      	movs	r0, r4
    11b0:	4798      	blx	r3
}
    11b2:	bd10      	pop	{r4, pc}
    11b4:	00001a3d 	.word	0x00001a3d

000011b8 <usart_async_write>:
{
    11b8:	b570      	push	{r4, r5, r6, lr}
    11ba:	0004      	movs	r4, r0
    11bc:	000e      	movs	r6, r1
    11be:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
    11c0:	2800      	cmp	r0, #0
    11c2:	d01d      	beq.n	1200 <usart_async_write+0x48>
    11c4:	2900      	cmp	r1, #0
    11c6:	d01d      	beq.n	1204 <usart_async_write+0x4c>
    11c8:	0010      	movs	r0, r2
    11ca:	1e43      	subs	r3, r0, #1
    11cc:	4198      	sbcs	r0, r3
    11ce:	223c      	movs	r2, #60	; 0x3c
    11d0:	32ff      	adds	r2, #255	; 0xff
    11d2:	490f      	ldr	r1, [pc, #60]	; (1210 <usart_async_write+0x58>)
    11d4:	4b0f      	ldr	r3, [pc, #60]	; (1214 <usart_async_write+0x5c>)
    11d6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    11d8:	2344      	movs	r3, #68	; 0x44
    11da:	5ae2      	ldrh	r2, [r4, r3]
    11dc:	3308      	adds	r3, #8
    11de:	5ae3      	ldrh	r3, [r4, r3]
    11e0:	429a      	cmp	r2, r3
    11e2:	d111      	bne.n	1208 <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
    11e4:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    11e6:	234c      	movs	r3, #76	; 0x4c
    11e8:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
    11ea:	2200      	movs	r2, #0
    11ec:	3b08      	subs	r3, #8
    11ee:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    11f0:	3b43      	subs	r3, #67	; 0x43
    11f2:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    11f4:	0020      	movs	r0, r4
    11f6:	3008      	adds	r0, #8
    11f8:	4b07      	ldr	r3, [pc, #28]	; (1218 <usart_async_write+0x60>)
    11fa:	4798      	blx	r3
	return (int32_t)length;
    11fc:	0028      	movs	r0, r5
}
    11fe:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    1200:	2000      	movs	r0, #0
    1202:	e7e4      	b.n	11ce <usart_async_write+0x16>
    1204:	2000      	movs	r0, #0
    1206:	e7e2      	b.n	11ce <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
    1208:	201c      	movs	r0, #28
    120a:	4240      	negs	r0, r0
    120c:	e7f7      	b.n	11fe <usart_async_write+0x46>
    120e:	46c0      	nop			; (mov r8, r8)
    1210:	00004838 	.word	0x00004838
    1214:	00001999 	.word	0x00001999
    1218:	00001d69 	.word	0x00001d69

0000121c <usart_process_byte_sent>:
{
    121c:	b570      	push	{r4, r5, r6, lr}
    121e:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1220:	0001      	movs	r1, r0
    1222:	3908      	subs	r1, #8
    1224:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1226:	224c      	movs	r2, #76	; 0x4c
    1228:	5a8a      	ldrh	r2, [r1, r2]
    122a:	429a      	cmp	r2, r3
    122c:	d00c      	beq.n	1248 <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    122e:	000a      	movs	r2, r1
    1230:	6c89      	ldr	r1, [r1, #72]	; 0x48
    1232:	1c5d      	adds	r5, r3, #1
    1234:	2044      	movs	r0, #68	; 0x44
    1236:	5215      	strh	r5, [r2, r0]
    1238:	5cc9      	ldrb	r1, [r1, r3]
    123a:	0020      	movs	r0, r4
    123c:	4b04      	ldr	r3, [pc, #16]	; (1250 <usart_process_byte_sent+0x34>)
    123e:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1240:	0020      	movs	r0, r4
    1242:	4b04      	ldr	r3, [pc, #16]	; (1254 <usart_process_byte_sent+0x38>)
    1244:	4798      	blx	r3
}
    1246:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1248:	4b03      	ldr	r3, [pc, #12]	; (1258 <usart_process_byte_sent+0x3c>)
    124a:	4798      	blx	r3
}
    124c:	e7fb      	b.n	1246 <usart_process_byte_sent+0x2a>
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	00001d61 	.word	0x00001d61
    1254:	00001d69 	.word	0x00001d69
    1258:	00001d71 	.word	0x00001d71

0000125c <usart_async_read>:
{
    125c:	b5f0      	push	{r4, r5, r6, r7, lr}
    125e:	46ce      	mov	lr, r9
    1260:	4647      	mov	r7, r8
    1262:	b580      	push	{r7, lr}
    1264:	b085      	sub	sp, #20
    1266:	0005      	movs	r5, r0
    1268:	000e      	movs	r6, r1
    126a:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
    126c:	2800      	cmp	r0, #0
    126e:	d015      	beq.n	129c <usart_async_read+0x40>
    1270:	2900      	cmp	r1, #0
    1272:	d013      	beq.n	129c <usart_async_read+0x40>
    1274:	2a00      	cmp	r2, #0
    1276:	d12a      	bne.n	12ce <usart_async_read+0x72>
    1278:	22ac      	movs	r2, #172	; 0xac
    127a:	0052      	lsls	r2, r2, #1
    127c:	4929      	ldr	r1, [pc, #164]	; (1324 <usart_async_read+0xc8>)
    127e:	2000      	movs	r0, #0
    1280:	4b29      	ldr	r3, [pc, #164]	; (1328 <usart_async_read+0xcc>)
    1282:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1284:	a803      	add	r0, sp, #12
    1286:	4b29      	ldr	r3, [pc, #164]	; (132c <usart_async_read+0xd0>)
    1288:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    128a:	0028      	movs	r0, r5
    128c:	3034      	adds	r0, #52	; 0x34
    128e:	4b28      	ldr	r3, [pc, #160]	; (1330 <usart_async_read+0xd4>)
    1290:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1292:	a803      	add	r0, sp, #12
    1294:	4b27      	ldr	r3, [pc, #156]	; (1334 <usart_async_read+0xd8>)
    1296:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1298:	2500      	movs	r5, #0
	return (int32_t)was_read;
    129a:	e03c      	b.n	1316 <usart_async_read+0xba>
	ASSERT(descr && buf && length);
    129c:	22ac      	movs	r2, #172	; 0xac
    129e:	0052      	lsls	r2, r2, #1
    12a0:	4920      	ldr	r1, [pc, #128]	; (1324 <usart_async_read+0xc8>)
    12a2:	2000      	movs	r0, #0
    12a4:	4b20      	ldr	r3, [pc, #128]	; (1328 <usart_async_read+0xcc>)
    12a6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    12a8:	a803      	add	r0, sp, #12
    12aa:	4b20      	ldr	r3, [pc, #128]	; (132c <usart_async_read+0xd0>)
    12ac:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    12ae:	3534      	adds	r5, #52	; 0x34
    12b0:	0028      	movs	r0, r5
    12b2:	9501      	str	r5, [sp, #4]
    12b4:	4b1e      	ldr	r3, [pc, #120]	; (1330 <usart_async_read+0xd4>)
    12b6:	4798      	blx	r3
    12b8:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    12ba:	a803      	add	r0, sp, #12
    12bc:	4b1d      	ldr	r3, [pc, #116]	; (1334 <usart_async_read+0xd8>)
    12be:	4798      	blx	r3
	uint16_t                       was_read = 0;
    12c0:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    12c2:	4643      	mov	r3, r8
    12c4:	2b00      	cmp	r3, #0
    12c6:	d026      	beq.n	1316 <usart_async_read+0xba>
    12c8:	2f00      	cmp	r7, #0
    12ca:	d116      	bne.n	12fa <usart_async_read+0x9e>
    12cc:	e023      	b.n	1316 <usart_async_read+0xba>
	ASSERT(descr && buf && length);
    12ce:	22ac      	movs	r2, #172	; 0xac
    12d0:	0052      	lsls	r2, r2, #1
    12d2:	4914      	ldr	r1, [pc, #80]	; (1324 <usart_async_read+0xc8>)
    12d4:	2001      	movs	r0, #1
    12d6:	4b14      	ldr	r3, [pc, #80]	; (1328 <usart_async_read+0xcc>)
    12d8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    12da:	a803      	add	r0, sp, #12
    12dc:	4b13      	ldr	r3, [pc, #76]	; (132c <usart_async_read+0xd0>)
    12de:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    12e0:	3534      	adds	r5, #52	; 0x34
    12e2:	0028      	movs	r0, r5
    12e4:	9501      	str	r5, [sp, #4]
    12e6:	4b12      	ldr	r3, [pc, #72]	; (1330 <usart_async_read+0xd4>)
    12e8:	4798      	blx	r3
    12ea:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    12ec:	a803      	add	r0, sp, #12
    12ee:	4b11      	ldr	r3, [pc, #68]	; (1334 <usart_async_read+0xd8>)
    12f0:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    12f2:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
    12f4:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    12f6:	2b00      	cmp	r3, #0
    12f8:	d00d      	beq.n	1316 <usart_async_read+0xba>
{
    12fa:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    12fc:	4b0e      	ldr	r3, [pc, #56]	; (1338 <usart_async_read+0xdc>)
    12fe:	4699      	mov	r9, r3
    1300:	1c65      	adds	r5, r4, #1
    1302:	b2ad      	uxth	r5, r5
    1304:	1931      	adds	r1, r6, r4
    1306:	9801      	ldr	r0, [sp, #4]
    1308:	47c8      	blx	r9
    130a:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    130c:	4544      	cmp	r4, r8
    130e:	d202      	bcs.n	1316 <usart_async_read+0xba>
    1310:	b2a3      	uxth	r3, r4
    1312:	429f      	cmp	r7, r3
    1314:	d8f4      	bhi.n	1300 <usart_async_read+0xa4>
}
    1316:	0028      	movs	r0, r5
    1318:	b005      	add	sp, #20
    131a:	bc0c      	pop	{r2, r3}
    131c:	4690      	mov	r8, r2
    131e:	4699      	mov	r9, r3
    1320:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	00004838 	.word	0x00004838
    1328:	00001999 	.word	0x00001999
    132c:	0000360d 	.word	0x0000360d
    1330:	00001a7d 	.word	0x00001a7d
    1334:	0000361b 	.word	0x0000361b
    1338:	000019f5 	.word	0x000019f5

0000133c <usart_async_init>:
{
    133c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    133e:	0004      	movs	r4, r0
    1340:	000d      	movs	r5, r1
    1342:	0016      	movs	r6, r2
    1344:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1346:	2800      	cmp	r0, #0
    1348:	d026      	beq.n	1398 <usart_async_init+0x5c>
    134a:	2900      	cmp	r1, #0
    134c:	d026      	beq.n	139c <usart_async_init+0x60>
    134e:	2a00      	cmp	r2, #0
    1350:	d026      	beq.n	13a0 <usart_async_init+0x64>
    1352:	0018      	movs	r0, r3
    1354:	1e43      	subs	r3, r0, #1
    1356:	4198      	sbcs	r0, r3
    1358:	223a      	movs	r2, #58	; 0x3a
    135a:	4914      	ldr	r1, [pc, #80]	; (13ac <usart_async_init+0x70>)
    135c:	4b14      	ldr	r3, [pc, #80]	; (13b0 <usart_async_init+0x74>)
    135e:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1360:	0020      	movs	r0, r4
    1362:	3034      	adds	r0, #52	; 0x34
    1364:	003a      	movs	r2, r7
    1366:	0031      	movs	r1, r6
    1368:	4b12      	ldr	r3, [pc, #72]	; (13b4 <usart_async_init+0x78>)
    136a:	4798      	blx	r3
    136c:	2800      	cmp	r0, #0
    136e:	d119      	bne.n	13a4 <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
    1370:	0020      	movs	r0, r4
    1372:	3008      	adds	r0, #8
    1374:	0029      	movs	r1, r5
    1376:	4b10      	ldr	r3, [pc, #64]	; (13b8 <usart_async_init+0x7c>)
    1378:	4798      	blx	r3
	if (init_status) {
    137a:	2800      	cmp	r0, #0
    137c:	d10b      	bne.n	1396 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
    137e:	4b0f      	ldr	r3, [pc, #60]	; (13bc <usart_async_init+0x80>)
    1380:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    1382:	4b0f      	ldr	r3, [pc, #60]	; (13c0 <usart_async_init+0x84>)
    1384:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1386:	4b0f      	ldr	r3, [pc, #60]	; (13c4 <usart_async_init+0x88>)
    1388:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    138a:	4b0f      	ldr	r3, [pc, #60]	; (13c8 <usart_async_init+0x8c>)
    138c:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    138e:	4b0f      	ldr	r3, [pc, #60]	; (13cc <usart_async_init+0x90>)
    1390:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1392:	4b0f      	ldr	r3, [pc, #60]	; (13d0 <usart_async_init+0x94>)
    1394:	6163      	str	r3, [r4, #20]
}
    1396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1398:	2000      	movs	r0, #0
    139a:	e7dd      	b.n	1358 <usart_async_init+0x1c>
    139c:	2000      	movs	r0, #0
    139e:	e7db      	b.n	1358 <usart_async_init+0x1c>
    13a0:	2000      	movs	r0, #0
    13a2:	e7d9      	b.n	1358 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
    13a4:	200d      	movs	r0, #13
    13a6:	4240      	negs	r0, r0
    13a8:	e7f5      	b.n	1396 <usart_async_init+0x5a>
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	00004838 	.word	0x00004838
    13b0:	00001999 	.word	0x00001999
    13b4:	000019a1 	.word	0x000019a1
    13b8:	00001ced 	.word	0x00001ced
    13bc:	0000125d 	.word	0x0000125d
    13c0:	000011b9 	.word	0x000011b9
    13c4:	0000121d 	.word	0x0000121d
    13c8:	0000119d 	.word	0x0000119d
    13cc:	00001179 	.word	0x00001179
    13d0:	0000118b 	.word	0x0000118b

000013d4 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    13d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    13d6:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    13d8:	4b0e      	ldr	r3, [pc, #56]	; (1414 <_usb_d_find_ep+0x40>)
    13da:	785a      	ldrb	r2, [r3, #1]
    13dc:	4290      	cmp	r0, r2
    13de:	d017      	beq.n	1410 <_usb_d_find_ep+0x3c>
    13e0:	2300      	movs	r3, #0
    13e2:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    13e4:	4f0b      	ldr	r7, [pc, #44]	; (1414 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    13e6:	260f      	movs	r6, #15
    13e8:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    13ea:	003d      	movs	r5, r7
    13ec:	e008      	b.n	1400 <_usb_d_find_ep+0x2c>
    13ee:	3001      	adds	r0, #1
    13f0:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    13f2:	2804      	cmp	r0, #4
    13f4:	d00a      	beq.n	140c <_usb_d_find_ep+0x38>
    13f6:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    13f8:	18ea      	adds	r2, r5, r3
    13fa:	7852      	ldrb	r2, [r2, #1]
    13fc:	42a2      	cmp	r2, r4
    13fe:	d006      	beq.n	140e <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1400:	5dd9      	ldrb	r1, [r3, r7]
    1402:	2900      	cmp	r1, #0
    1404:	d1f3      	bne.n	13ee <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1406:	4296      	cmp	r6, r2
    1408:	d1f1      	bne.n	13ee <_usb_d_find_ep+0x1a>
    140a:	e000      	b.n	140e <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
    140c:	3805      	subs	r0, #5
}
    140e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1410:	2000      	movs	r0, #0
    1412:	e7fc      	b.n	140e <_usb_d_find_ep+0x3a>
    1414:	2000052c 	.word	0x2000052c

00001418 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1418:	2000      	movs	r0, #0
    141a:	4770      	bx	lr

0000141c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    141c:	b570      	push	{r4, r5, r6, lr}
    141e:	0004      	movs	r4, r0
    1420:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1422:	4b0a      	ldr	r3, [pc, #40]	; (144c <usb_d_cb_trans_more+0x30>)
    1424:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1426:	0142      	lsls	r2, r0, #5
    1428:	4b09      	ldr	r3, [pc, #36]	; (1450 <usb_d_cb_trans_more+0x34>)
    142a:	189b      	adds	r3, r3, r2
    142c:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    142e:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1430:	2a03      	cmp	r2, #3
    1432:	d001      	beq.n	1438 <usb_d_cb_trans_more+0x1c>
}
    1434:	0018      	movs	r0, r3
    1436:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
    1438:	0140      	lsls	r0, r0, #5
    143a:	4b05      	ldr	r3, [pc, #20]	; (1450 <usb_d_cb_trans_more+0x34>)
    143c:	1818      	adds	r0, r3, r0
    143e:	6983      	ldr	r3, [r0, #24]
    1440:	0029      	movs	r1, r5
    1442:	0020      	movs	r0, r4
    1444:	4798      	blx	r3
    1446:	0003      	movs	r3, r0
    1448:	e7f4      	b.n	1434 <usb_d_cb_trans_more+0x18>
    144a:	46c0      	nop			; (mov r8, r8)
    144c:	000013d5 	.word	0x000013d5
    1450:	2000052c 	.word	0x2000052c

00001454 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1454:	b5f0      	push	{r4, r5, r6, r7, lr}
    1456:	b085      	sub	sp, #20
    1458:	0005      	movs	r5, r0
    145a:	000f      	movs	r7, r1
    145c:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    145e:	4b51      	ldr	r3, [pc, #324]	; (15a4 <_usb_d_cb_trans_done+0x150>)
    1460:	4798      	blx	r3
    1462:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1464:	2f00      	cmp	r7, #0
    1466:	d162      	bne.n	152e <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1468:	4b4f      	ldr	r3, [pc, #316]	; (15a8 <_usb_d_cb_trans_done+0x154>)
    146a:	0142      	lsls	r2, r0, #5
    146c:	1899      	adds	r1, r3, r2
    146e:	2000      	movs	r0, #0
    1470:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1472:	5cd3      	ldrb	r3, [r2, r3]
    1474:	2b00      	cmp	r3, #0
    1476:	d00e      	beq.n	1496 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1478:	0162      	lsls	r2, r4, #5
    147a:	4b4b      	ldr	r3, [pc, #300]	; (15a8 <_usb_d_cb_trans_done+0x154>)
    147c:	189b      	adds	r3, r3, r2
    147e:	2201      	movs	r2, #1
    1480:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1482:	0164      	lsls	r4, r4, #5
    1484:	4b48      	ldr	r3, [pc, #288]	; (15a8 <_usb_d_cb_trans_done+0x154>)
    1486:	191c      	adds	r4, r3, r4
    1488:	78e1      	ldrb	r1, [r4, #3]
    148a:	69e3      	ldr	r3, [r4, #28]
    148c:	0032      	movs	r2, r6
    148e:	0028      	movs	r0, r5
    1490:	4798      	blx	r3
}
    1492:	b005      	add	sp, #20
    1494:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    1496:	788b      	ldrb	r3, [r1, #2]
    1498:	2b03      	cmp	r3, #3
    149a:	d00c      	beq.n	14b6 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    149c:	4b42      	ldr	r3, [pc, #264]	; (15a8 <_usb_d_cb_trans_done+0x154>)
    149e:	0162      	lsls	r2, r4, #5
    14a0:	320c      	adds	r2, #12
    14a2:	189a      	adds	r2, r3, r2
    14a4:	0164      	lsls	r4, r4, #5
    14a6:	191c      	adds	r4, r3, r4
    14a8:	7860      	ldrb	r0, [r4, #1]
    14aa:	2100      	movs	r1, #0
    14ac:	69e3      	ldr	r3, [r4, #28]
    14ae:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    14b0:	2302      	movs	r3, #2
    14b2:	70a3      	strb	r3, [r4, #2]
    14b4:	e7ed      	b.n	1492 <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    14b6:	4a3c      	ldr	r2, [pc, #240]	; (15a8 <_usb_d_cb_trans_done+0x154>)
    14b8:	000b      	movs	r3, r1
    14ba:	250c      	movs	r5, #12
    14bc:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    14be:	0161      	lsls	r1, r4, #5
    14c0:	310c      	adds	r1, #12
    14c2:	1852      	adds	r2, r2, r1
    14c4:	7858      	ldrb	r0, [r3, #1]
    14c6:	69db      	ldr	r3, [r3, #28]
    14c8:	2101      	movs	r1, #1
    14ca:	4798      	blx	r3
		if (err) {
    14cc:	2800      	cmp	r0, #0
    14ce:	d017      	beq.n	1500 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    14d0:	0162      	lsls	r2, r4, #5
    14d2:	4b35      	ldr	r3, [pc, #212]	; (15a8 <_usb_d_cb_trans_done+0x154>)
    14d4:	189b      	adds	r3, r3, r2
    14d6:	2205      	movs	r2, #5
    14d8:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    14da:	3a03      	subs	r2, #3
    14dc:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    14de:	2d00      	cmp	r5, #0
    14e0:	db09      	blt.n	14f6 <_usb_d_cb_trans_done+0xa2>
    14e2:	0164      	lsls	r4, r4, #5
    14e4:	4b30      	ldr	r3, [pc, #192]	; (15a8 <_usb_d_cb_trans_done+0x154>)
    14e6:	191c      	adds	r4, r3, r4
    14e8:	7860      	ldrb	r0, [r4, #1]
    14ea:	2380      	movs	r3, #128	; 0x80
    14ec:	4318      	orrs	r0, r3
    14ee:	2101      	movs	r1, #1
    14f0:	4b2e      	ldr	r3, [pc, #184]	; (15ac <_usb_d_cb_trans_done+0x158>)
    14f2:	4798      	blx	r3
    14f4:	e7cd      	b.n	1492 <_usb_d_cb_trans_done+0x3e>
    14f6:	0164      	lsls	r4, r4, #5
    14f8:	4b2b      	ldr	r3, [pc, #172]	; (15a8 <_usb_d_cb_trans_done+0x154>)
    14fa:	191c      	adds	r4, r3, r4
    14fc:	7860      	ldrb	r0, [r4, #1]
    14fe:	e7f6      	b.n	14ee <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1500:	0164      	lsls	r4, r4, #5
    1502:	4b29      	ldr	r3, [pc, #164]	; (15a8 <_usb_d_cb_trans_done+0x154>)
    1504:	191c      	adds	r4, r3, r4
    1506:	2304      	movs	r3, #4
    1508:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    150a:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    150c:	2200      	movs	r2, #0
    150e:	9201      	str	r2, [sp, #4]
    1510:	9202      	str	r2, [sp, #8]
    1512:	2d00      	cmp	r5, #0
    1514:	db08      	blt.n	1528 <_usb_d_cb_trans_done+0xd4>
    1516:	3280      	adds	r2, #128	; 0x80
    1518:	4313      	orrs	r3, r2
    151a:	a801      	add	r0, sp, #4
    151c:	7203      	strb	r3, [r0, #8]
    151e:	2301      	movs	r3, #1
    1520:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    1522:	4b23      	ldr	r3, [pc, #140]	; (15b0 <_usb_d_cb_trans_done+0x15c>)
    1524:	4798      	blx	r3
    1526:	e7b4      	b.n	1492 <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
    1528:	220f      	movs	r2, #15
    152a:	4013      	ands	r3, r2
    152c:	e7f5      	b.n	151a <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
    152e:	2f01      	cmp	r7, #1
    1530:	d00a      	beq.n	1548 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
    1532:	2f02      	cmp	r7, #2
    1534:	d01d      	beq.n	1572 <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
    1536:	2f03      	cmp	r7, #3
    1538:	d02c      	beq.n	1594 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    153a:	0142      	lsls	r2, r0, #5
    153c:	4b1a      	ldr	r3, [pc, #104]	; (15a8 <_usb_d_cb_trans_done+0x154>)
    153e:	189b      	adds	r3, r3, r2
    1540:	2206      	movs	r2, #6
    1542:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    1544:	70da      	strb	r2, [r3, #3]
    1546:	e79c      	b.n	1482 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
    1548:	4b17      	ldr	r3, [pc, #92]	; (15a8 <_usb_d_cb_trans_done+0x154>)
    154a:	0142      	lsls	r2, r0, #5
    154c:	1899      	adds	r1, r3, r2
    154e:	2002      	movs	r0, #2
    1550:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1552:	5cd3      	ldrb	r3, [r2, r3]
    1554:	2b00      	cmp	r3, #0
    1556:	d005      	beq.n	1564 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1558:	0162      	lsls	r2, r4, #5
    155a:	4b13      	ldr	r3, [pc, #76]	; (15a8 <_usb_d_cb_trans_done+0x154>)
    155c:	189b      	adds	r3, r3, r2
    155e:	2205      	movs	r2, #5
    1560:	709a      	strb	r2, [r3, #2]
    1562:	e78e      	b.n	1482 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1564:	2202      	movs	r2, #2
    1566:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1568:	2100      	movs	r1, #0
    156a:	0028      	movs	r0, r5
    156c:	4b0f      	ldr	r3, [pc, #60]	; (15ac <_usb_d_cb_trans_done+0x158>)
    156e:	4798      	blx	r3
    1570:	e787      	b.n	1482 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1572:	4b0d      	ldr	r3, [pc, #52]	; (15a8 <_usb_d_cb_trans_done+0x154>)
    1574:	0142      	lsls	r2, r0, #5
    1576:	1899      	adds	r1, r3, r2
    1578:	2004      	movs	r0, #4
    157a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    157c:	5cd3      	ldrb	r3, [r2, r3]
    157e:	2b00      	cmp	r3, #0
    1580:	d005      	beq.n	158e <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1582:	0162      	lsls	r2, r4, #5
    1584:	4b08      	ldr	r3, [pc, #32]	; (15a8 <_usb_d_cb_trans_done+0x154>)
    1586:	189b      	adds	r3, r3, r2
    1588:	2201      	movs	r2, #1
    158a:	709a      	strb	r2, [r3, #2]
    158c:	e779      	b.n	1482 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    158e:	2302      	movs	r3, #2
    1590:	708b      	strb	r3, [r1, #2]
			return;
    1592:	e77e      	b.n	1492 <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1594:	0142      	lsls	r2, r0, #5
    1596:	4b04      	ldr	r3, [pc, #16]	; (15a8 <_usb_d_cb_trans_done+0x154>)
    1598:	189b      	adds	r3, r3, r2
    159a:	2200      	movs	r2, #0
    159c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    159e:	3205      	adds	r2, #5
    15a0:	70da      	strb	r2, [r3, #3]
    15a2:	e76e      	b.n	1482 <_usb_d_cb_trans_done+0x2e>
    15a4:	000013d5 	.word	0x000013d5
    15a8:	2000052c 	.word	0x2000052c
    15ac:	00002f55 	.word	0x00002f55
    15b0:	00003129 	.word	0x00003129

000015b4 <usb_d_cb_trans_setup>:
{
    15b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15b6:	46c6      	mov	lr, r8
    15b8:	b500      	push	{lr}
    15ba:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    15bc:	4b1d      	ldr	r3, [pc, #116]	; (1634 <usb_d_cb_trans_setup+0x80>)
    15be:	4798      	blx	r3
    15c0:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
    15c2:	0145      	lsls	r5, r0, #5
    15c4:	350c      	adds	r5, #12
    15c6:	4b1c      	ldr	r3, [pc, #112]	; (1638 <usb_d_cb_trans_setup+0x84>)
    15c8:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    15ca:	0029      	movs	r1, r5
    15cc:	0020      	movs	r0, r4
    15ce:	4b1b      	ldr	r3, [pc, #108]	; (163c <usb_d_cb_trans_setup+0x88>)
    15d0:	4798      	blx	r3
	if (n != 8) {
    15d2:	b2c0      	uxtb	r0, r0
    15d4:	2808      	cmp	r0, #8
    15d6:	d00a      	beq.n	15ee <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    15d8:	2101      	movs	r1, #1
    15da:	0020      	movs	r0, r4
    15dc:	4d18      	ldr	r5, [pc, #96]	; (1640 <usb_d_cb_trans_setup+0x8c>)
    15de:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    15e0:	2080      	movs	r0, #128	; 0x80
    15e2:	4320      	orrs	r0, r4
    15e4:	2101      	movs	r1, #1
    15e6:	47a8      	blx	r5
}
    15e8:	bc04      	pop	{r2}
    15ea:	4690      	mov	r8, r2
    15ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    15ee:	2100      	movs	r1, #0
    15f0:	0020      	movs	r0, r4
    15f2:	4b13      	ldr	r3, [pc, #76]	; (1640 <usb_d_cb_trans_setup+0x8c>)
    15f4:	4698      	mov	r8, r3
    15f6:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    15f8:	2780      	movs	r7, #128	; 0x80
    15fa:	4327      	orrs	r7, r4
    15fc:	2100      	movs	r1, #0
    15fe:	0038      	movs	r0, r7
    1600:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1602:	0172      	lsls	r2, r6, #5
    1604:	4b0c      	ldr	r3, [pc, #48]	; (1638 <usb_d_cb_trans_setup+0x84>)
    1606:	189b      	adds	r3, r3, r2
    1608:	2201      	movs	r2, #1
    160a:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    160c:	695b      	ldr	r3, [r3, #20]
    160e:	0029      	movs	r1, r5
    1610:	0020      	movs	r0, r4
    1612:	4798      	blx	r3
    1614:	2800      	cmp	r0, #0
    1616:	d1e7      	bne.n	15e8 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1618:	0176      	lsls	r6, r6, #5
    161a:	4b07      	ldr	r3, [pc, #28]	; (1638 <usb_d_cb_trans_setup+0x84>)
    161c:	199e      	adds	r6, r3, r6
    161e:	2305      	movs	r3, #5
    1620:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1622:	2101      	movs	r1, #1
    1624:	0020      	movs	r0, r4
    1626:	4c06      	ldr	r4, [pc, #24]	; (1640 <usb_d_cb_trans_setup+0x8c>)
    1628:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    162a:	2101      	movs	r1, #1
    162c:	0038      	movs	r0, r7
    162e:	47a0      	blx	r4
    1630:	e7da      	b.n	15e8 <usb_d_cb_trans_setup+0x34>
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	000013d5 	.word	0x000013d5
    1638:	2000052c 	.word	0x2000052c
    163c:	000030b9 	.word	0x000030b9
    1640:	00002f55 	.word	0x00002f55

00001644 <usb_d_init>:

int32_t usb_d_init(void)
{
    1644:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1646:	4b10      	ldr	r3, [pc, #64]	; (1688 <usb_d_init+0x44>)
    1648:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    164a:	2800      	cmp	r0, #0
    164c:	db1b      	blt.n	1686 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    164e:	4c0f      	ldr	r4, [pc, #60]	; (168c <usb_d_init+0x48>)
    1650:	2280      	movs	r2, #128	; 0x80
    1652:	2100      	movs	r1, #0
    1654:	0020      	movs	r0, r4
    1656:	4b0e      	ldr	r3, [pc, #56]	; (1690 <usb_d_init+0x4c>)
    1658:	4798      	blx	r3
    165a:	0023      	movs	r3, r4
    165c:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    165e:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1660:	4a0c      	ldr	r2, [pc, #48]	; (1694 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1662:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1664:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1666:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1668:	61da      	str	r2, [r3, #28]
    166a:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    166c:	42a3      	cmp	r3, r4
    166e:	d1f8      	bne.n	1662 <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1670:	4909      	ldr	r1, [pc, #36]	; (1698 <usb_d_init+0x54>)
    1672:	2000      	movs	r0, #0
    1674:	4c09      	ldr	r4, [pc, #36]	; (169c <usb_d_init+0x58>)
    1676:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1678:	4909      	ldr	r1, [pc, #36]	; (16a0 <usb_d_init+0x5c>)
    167a:	2001      	movs	r0, #1
    167c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    167e:	4909      	ldr	r1, [pc, #36]	; (16a4 <usb_d_init+0x60>)
    1680:	2002      	movs	r0, #2
    1682:	47a0      	blx	r4
	return ERR_NONE;
    1684:	2000      	movs	r0, #0
}
    1686:	bd10      	pop	{r4, pc}
    1688:	00002935 	.word	0x00002935
    168c:	2000052c 	.word	0x2000052c
    1690:	000045a9 	.word	0x000045a9
    1694:	00001419 	.word	0x00001419
    1698:	000015b5 	.word	0x000015b5
    169c:	00003361 	.word	0x00003361
    16a0:	0000141d 	.word	0x0000141d
    16a4:	00001455 	.word	0x00001455

000016a8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    16a8:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    16aa:	4b01      	ldr	r3, [pc, #4]	; (16b0 <usb_d_register_callback+0x8>)
    16ac:	4798      	blx	r3
}
    16ae:	bd10      	pop	{r4, pc}
    16b0:	0000333d 	.word	0x0000333d

000016b4 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    16b4:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    16b6:	4b01      	ldr	r3, [pc, #4]	; (16bc <usb_d_enable+0x8>)
    16b8:	4798      	blx	r3
}
    16ba:	bd10      	pop	{r4, pc}
    16bc:	00002a11 	.word	0x00002a11

000016c0 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    16c0:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    16c2:	4b01      	ldr	r3, [pc, #4]	; (16c8 <usb_d_attach+0x8>)
    16c4:	4798      	blx	r3
}
    16c6:	bd10      	pop	{r4, pc}
    16c8:	00002a61 	.word	0x00002a61

000016cc <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    16cc:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    16ce:	4b01      	ldr	r3, [pc, #4]	; (16d4 <usb_d_set_address+0x8>)
    16d0:	4798      	blx	r3
}
    16d2:	bd10      	pop	{r4, pc}
    16d4:	00002a71 	.word	0x00002a71

000016d8 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    16d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16da:	0005      	movs	r5, r0
    16dc:	000e      	movs	r6, r1
    16de:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    16e0:	4b0f      	ldr	r3, [pc, #60]	; (1720 <usb_d_ep_init+0x48>)
    16e2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    16e4:	2800      	cmp	r0, #0
    16e6:	da14      	bge.n	1712 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    16e8:	20ff      	movs	r0, #255	; 0xff
    16ea:	4b0d      	ldr	r3, [pc, #52]	; (1720 <usb_d_ep_init+0x48>)
    16ec:	4798      	blx	r3
    16ee:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    16f0:	db12      	blt.n	1718 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    16f2:	003a      	movs	r2, r7
    16f4:	0031      	movs	r1, r6
    16f6:	0028      	movs	r0, r5
    16f8:	4b0a      	ldr	r3, [pc, #40]	; (1724 <usb_d_ep_init+0x4c>)
    16fa:	4798      	blx	r3
	if (rc < 0) {
    16fc:	2800      	cmp	r0, #0
    16fe:	db07      	blt.n	1710 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1700:	4a09      	ldr	r2, [pc, #36]	; (1728 <usb_d_ep_init+0x50>)
    1702:	0164      	lsls	r4, r4, #5
    1704:	1913      	adds	r3, r2, r4
    1706:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1708:	2303      	movs	r3, #3
    170a:	401e      	ands	r6, r3
    170c:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    170e:	2000      	movs	r0, #0
}
    1710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1712:	2014      	movs	r0, #20
    1714:	4240      	negs	r0, r0
    1716:	e7fb      	b.n	1710 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    1718:	2015      	movs	r0, #21
    171a:	4240      	negs	r0, r0
    171c:	e7f8      	b.n	1710 <usb_d_ep_init+0x38>
    171e:	46c0      	nop			; (mov r8, r8)
    1720:	000013d5 	.word	0x000013d5
    1724:	00002a81 	.word	0x00002a81
    1728:	2000052c 	.word	0x2000052c

0000172c <usb_d_ep0_init>:
{
    172c:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    172e:	b282      	uxth	r2, r0
    1730:	2100      	movs	r1, #0
    1732:	2000      	movs	r0, #0
    1734:	4b01      	ldr	r3, [pc, #4]	; (173c <usb_d_ep0_init+0x10>)
    1736:	4798      	blx	r3
}
    1738:	bd10      	pop	{r4, pc}
    173a:	46c0      	nop			; (mov r8, r8)
    173c:	000016d9 	.word	0x000016d9

00001740 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1740:	b570      	push	{r4, r5, r6, lr}
    1742:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1744:	4b06      	ldr	r3, [pc, #24]	; (1760 <usb_d_ep_deinit+0x20>)
    1746:	4798      	blx	r3
    1748:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    174a:	db07      	blt.n	175c <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    174c:	0028      	movs	r0, r5
    174e:	4b05      	ldr	r3, [pc, #20]	; (1764 <usb_d_ep_deinit+0x24>)
    1750:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1752:	0164      	lsls	r4, r4, #5
    1754:	4b04      	ldr	r3, [pc, #16]	; (1768 <usb_d_ep_deinit+0x28>)
    1756:	191c      	adds	r4, r3, r4
    1758:	23ff      	movs	r3, #255	; 0xff
    175a:	7063      	strb	r3, [r4, #1]
}
    175c:	bd70      	pop	{r4, r5, r6, pc}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	000013d5 	.word	0x000013d5
    1764:	00002bad 	.word	0x00002bad
    1768:	2000052c 	.word	0x2000052c

0000176c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    176c:	b570      	push	{r4, r5, r6, lr}
    176e:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1770:	4b0e      	ldr	r3, [pc, #56]	; (17ac <usb_d_ep_enable+0x40>)
    1772:	4798      	blx	r3
    1774:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1776:	db15      	blt.n	17a4 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1778:	0143      	lsls	r3, r0, #5
    177a:	4a0d      	ldr	r2, [pc, #52]	; (17b0 <usb_d_ep_enable+0x44>)
    177c:	5c9b      	ldrb	r3, [r3, r2]
    177e:	425a      	negs	r2, r3
    1780:	4153      	adcs	r3, r2
    1782:	3301      	adds	r3, #1
    1784:	0141      	lsls	r1, r0, #5
    1786:	4a0a      	ldr	r2, [pc, #40]	; (17b0 <usb_d_ep_enable+0x44>)
    1788:	1852      	adds	r2, r2, r1
    178a:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    178c:	0020      	movs	r0, r4
    178e:	4b09      	ldr	r3, [pc, #36]	; (17b4 <usb_d_ep_enable+0x48>)
    1790:	4798      	blx	r3
	if (rc < 0) {
    1792:	2800      	cmp	r0, #0
    1794:	db00      	blt.n	1798 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1796:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1798:	016d      	lsls	r5, r5, #5
    179a:	4b05      	ldr	r3, [pc, #20]	; (17b0 <usb_d_ep_enable+0x44>)
    179c:	195d      	adds	r5, r3, r5
    179e:	2300      	movs	r3, #0
    17a0:	70ab      	strb	r3, [r5, #2]
    17a2:	e7f8      	b.n	1796 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    17a4:	2012      	movs	r0, #18
    17a6:	4240      	negs	r0, r0
    17a8:	e7f5      	b.n	1796 <usb_d_ep_enable+0x2a>
    17aa:	46c0      	nop			; (mov r8, r8)
    17ac:	000013d5 	.word	0x000013d5
    17b0:	2000052c 	.word	0x2000052c
    17b4:	00002c79 	.word	0x00002c79

000017b8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    17b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ba:	46d6      	mov	lr, sl
    17bc:	464f      	mov	r7, r9
    17be:	4646      	mov	r6, r8
    17c0:	b5c0      	push	{r6, r7, lr}
    17c2:	b086      	sub	sp, #24
    17c4:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    17c6:	7a07      	ldrb	r7, [r0, #8]
    17c8:	0038      	movs	r0, r7
    17ca:	4b40      	ldr	r3, [pc, #256]	; (18cc <usb_d_ep_transfer+0x114>)
    17cc:	4798      	blx	r3
    17ce:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    17d0:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
    17d2:	6863      	ldr	r3, [r4, #4]
    17d4:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    17d6:	2800      	cmp	r0, #0
    17d8:	da00      	bge.n	17dc <usb_d_ep_transfer+0x24>
    17da:	e071      	b.n	18c0 <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    17dc:	a804      	add	r0, sp, #16
    17de:	4b3c      	ldr	r3, [pc, #240]	; (18d0 <usb_d_ep_transfer+0x118>)
    17e0:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    17e2:	016a      	lsls	r2, r5, #5
    17e4:	4b3b      	ldr	r3, [pc, #236]	; (18d4 <usb_d_ep_transfer+0x11c>)
    17e6:	189b      	adds	r3, r3, r2
    17e8:	789a      	ldrb	r2, [r3, #2]
    17ea:	2317      	movs	r3, #23
    17ec:	446b      	add	r3, sp
    17ee:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    17f0:	781b      	ldrb	r3, [r3, #0]
    17f2:	2b01      	cmp	r3, #1
    17f4:	d010      	beq.n	1818 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    17f6:	a804      	add	r0, sp, #16
    17f8:	4b37      	ldr	r3, [pc, #220]	; (18d8 <usb_d_ep_transfer+0x120>)
    17fa:	4798      	blx	r3
		switch (state) {
    17fc:	2317      	movs	r3, #23
    17fe:	446b      	add	r3, sp
    1800:	781b      	ldrb	r3, [r3, #0]
    1802:	b2db      	uxtb	r3, r3
    1804:	2b05      	cmp	r3, #5
    1806:	d05e      	beq.n	18c6 <usb_d_ep_transfer+0x10e>
    1808:	2b06      	cmp	r3, #6
    180a:	d023      	beq.n	1854 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    180c:	2001      	movs	r0, #1
		switch (state) {
    180e:	2b00      	cmp	r3, #0
    1810:	d13c      	bne.n	188c <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
    1812:	2013      	movs	r0, #19
    1814:	4240      	negs	r0, r0
    1816:	e039      	b.n	188c <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1818:	4b2e      	ldr	r3, [pc, #184]	; (18d4 <usb_d_ep_transfer+0x11c>)
    181a:	4699      	mov	r9, r3
    181c:	016b      	lsls	r3, r5, #5
    181e:	469a      	mov	sl, r3
    1820:	464b      	mov	r3, r9
    1822:	4453      	add	r3, sl
    1824:	2203      	movs	r2, #3
    1826:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1828:	a804      	add	r0, sp, #16
    182a:	4b2b      	ldr	r3, [pc, #172]	; (18d8 <usb_d_ep_transfer+0x120>)
    182c:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    182e:	464b      	mov	r3, r9
    1830:	4652      	mov	r2, sl
    1832:	5cd3      	ldrb	r3, [r2, r3]
    1834:	2b00      	cmp	r3, #0
    1836:	d010      	beq.n	185a <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1838:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    183a:	1e72      	subs	r2, r6, #1
    183c:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    183e:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
    1840:	6822      	ldr	r2, [r4, #0]
    1842:	9201      	str	r2, [sp, #4]
    1844:	4642      	mov	r2, r8
    1846:	9202      	str	r2, [sp, #8]
    1848:	b27f      	sxtb	r7, r7
    184a:	2f00      	cmp	r7, #0
    184c:	db17      	blt.n	187e <usb_d_ep_transfer+0xc6>
    184e:	220f      	movs	r2, #15
    1850:	4013      	ands	r3, r2
    1852:	e016      	b.n	1882 <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
    1854:	2010      	movs	r0, #16
    1856:	4240      	negs	r0, r0
    1858:	e018      	b.n	188c <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    185a:	016b      	lsls	r3, r5, #5
    185c:	4a1d      	ldr	r2, [pc, #116]	; (18d4 <usb_d_ep_transfer+0x11c>)
    185e:	18d2      	adds	r2, r2, r3
    1860:	7cd1      	ldrb	r1, [r2, #19]
    1862:	0209      	lsls	r1, r1, #8
    1864:	7c93      	ldrb	r3, [r2, #18]
    1866:	185b      	adds	r3, r3, r1
    1868:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    186a:	2b00      	cmp	r3, #0
    186c:	d114      	bne.n	1898 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    186e:	2304      	movs	r3, #4
    1870:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    1872:	2200      	movs	r2, #0
			zlp                 = true;
    1874:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1876:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    1878:	6821      	ldr	r1, [r4, #0]
    187a:	9101      	str	r1, [sp, #4]
    187c:	9202      	str	r2, [sp, #8]
    187e:	2280      	movs	r2, #128	; 0x80
    1880:	4313      	orrs	r3, r2
    1882:	a801      	add	r0, sp, #4
    1884:	7203      	strb	r3, [r0, #8]
    1886:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    1888:	4b14      	ldr	r3, [pc, #80]	; (18dc <usb_d_ep_transfer+0x124>)
    188a:	4798      	blx	r3
	return rc;
}
    188c:	b006      	add	sp, #24
    188e:	bc1c      	pop	{r2, r3, r4}
    1890:	4690      	mov	r8, r2
    1892:	4699      	mov	r9, r3
    1894:	46a2      	mov	sl, r4
    1896:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1898:	4642      	mov	r2, r8
    189a:	429a      	cmp	r2, r3
    189c:	d900      	bls.n	18a0 <usb_d_ep_transfer+0xe8>
    189e:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    18a0:	016d      	lsls	r5, r5, #5
    18a2:	490c      	ldr	r1, [pc, #48]	; (18d4 <usb_d_ep_transfer+0x11c>)
    18a4:	194d      	adds	r5, r1, r5
			if (dir) {
    18a6:	7b29      	ldrb	r1, [r5, #12]
    18a8:	297f      	cmp	r1, #127	; 0x7f
    18aa:	d805      	bhi.n	18b8 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    18ac:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    18ae:	6821      	ldr	r1, [r4, #0]
    18b0:	9101      	str	r1, [sp, #4]
    18b2:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    18b4:	2600      	movs	r6, #0
    18b6:	e7ca      	b.n	184e <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
    18b8:	429a      	cmp	r2, r3
    18ba:	41b6      	sbcs	r6, r6
    18bc:	4276      	negs	r6, r6
    18be:	e7da      	b.n	1876 <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
    18c0:	2012      	movs	r0, #18
    18c2:	4240      	negs	r0, r0
    18c4:	e7e2      	b.n	188c <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
    18c6:	2002      	movs	r0, #2
    18c8:	e7e0      	b.n	188c <usb_d_ep_transfer+0xd4>
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	000013d5 	.word	0x000013d5
    18d0:	0000360d 	.word	0x0000360d
    18d4:	2000052c 	.word	0x2000052c
    18d8:	0000361b 	.word	0x0000361b
    18dc:	00003129 	.word	0x00003129

000018e0 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    18e0:	b570      	push	{r4, r5, r6, lr}
    18e2:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    18e4:	2900      	cmp	r1, #0
    18e6:	d005      	beq.n	18f4 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    18e8:	2901      	cmp	r1, #1
    18ea:	d021      	beq.n	1930 <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    18ec:	2102      	movs	r1, #2
    18ee:	4b13      	ldr	r3, [pc, #76]	; (193c <usb_d_ep_halt+0x5c>)
    18f0:	4798      	blx	r3
	}
}
    18f2:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    18f4:	4b12      	ldr	r3, [pc, #72]	; (1940 <usb_d_ep_halt+0x60>)
    18f6:	4798      	blx	r3
    18f8:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    18fa:	db1c      	blt.n	1936 <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    18fc:	2102      	movs	r1, #2
    18fe:	0020      	movs	r0, r4
    1900:	4b0e      	ldr	r3, [pc, #56]	; (193c <usb_d_ep_halt+0x5c>)
    1902:	4798      	blx	r3
    1904:	2800      	cmp	r0, #0
    1906:	d0f4      	beq.n	18f2 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1908:	2100      	movs	r1, #0
    190a:	0020      	movs	r0, r4
    190c:	4b0b      	ldr	r3, [pc, #44]	; (193c <usb_d_ep_halt+0x5c>)
    190e:	4798      	blx	r3
		if (rc < 0) {
    1910:	2800      	cmp	r0, #0
    1912:	dbee      	blt.n	18f2 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1914:	016d      	lsls	r5, r5, #5
    1916:	4b0b      	ldr	r3, [pc, #44]	; (1944 <usb_d_ep_halt+0x64>)
    1918:	195d      	adds	r5, r3, r5
    191a:	2301      	movs	r3, #1
    191c:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    191e:	3302      	adds	r3, #2
    1920:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1922:	69eb      	ldr	r3, [r5, #28]
    1924:	2200      	movs	r2, #0
    1926:	2103      	movs	r1, #3
    1928:	0020      	movs	r0, r4
    192a:	4798      	blx	r3
	return ERR_NONE;
    192c:	2000      	movs	r0, #0
    192e:	e7e0      	b.n	18f2 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1930:	4b02      	ldr	r3, [pc, #8]	; (193c <usb_d_ep_halt+0x5c>)
    1932:	4798      	blx	r3
    1934:	e7dd      	b.n	18f2 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    1936:	2012      	movs	r0, #18
    1938:	4240      	negs	r0, r0
    193a:	e7da      	b.n	18f2 <usb_d_ep_halt+0x12>
    193c:	00002f55 	.word	0x00002f55
    1940:	000013d5 	.word	0x000013d5
    1944:	2000052c 	.word	0x2000052c

00001948 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1948:	b570      	push	{r4, r5, r6, lr}
    194a:	000d      	movs	r5, r1
    194c:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    194e:	4b0f      	ldr	r3, [pc, #60]	; (198c <usb_d_ep_register_callback+0x44>)
    1950:	4798      	blx	r3
    1952:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1954:	1e22      	subs	r2, r4, #0
    1956:	d008      	beq.n	196a <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    1958:	2b00      	cmp	r3, #0
    195a:	db05      	blt.n	1968 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    195c:	2d01      	cmp	r5, #1
    195e:	d00b      	beq.n	1978 <usb_d_ep_register_callback+0x30>
    1960:	2d00      	cmp	r5, #0
    1962:	d004      	beq.n	196e <usb_d_ep_register_callback+0x26>
    1964:	2d02      	cmp	r5, #2
    1966:	d00c      	beq.n	1982 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    1968:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    196a:	4a09      	ldr	r2, [pc, #36]	; (1990 <usb_d_ep_register_callback+0x48>)
    196c:	e7f4      	b.n	1958 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    196e:	0140      	lsls	r0, r0, #5
    1970:	4b08      	ldr	r3, [pc, #32]	; (1994 <usb_d_ep_register_callback+0x4c>)
    1972:	1818      	adds	r0, r3, r0
    1974:	6142      	str	r2, [r0, #20]
		break;
    1976:	e7f7      	b.n	1968 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1978:	0140      	lsls	r0, r0, #5
    197a:	4b06      	ldr	r3, [pc, #24]	; (1994 <usb_d_ep_register_callback+0x4c>)
    197c:	1818      	adds	r0, r3, r0
    197e:	6182      	str	r2, [r0, #24]
		break;
    1980:	e7f2      	b.n	1968 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1982:	0140      	lsls	r0, r0, #5
    1984:	4b03      	ldr	r3, [pc, #12]	; (1994 <usb_d_ep_register_callback+0x4c>)
    1986:	1818      	adds	r0, r3, r0
    1988:	61c2      	str	r2, [r0, #28]
		break;
    198a:	e7ed      	b.n	1968 <usb_d_ep_register_callback+0x20>
    198c:	000013d5 	.word	0x000013d5
    1990:	00001419 	.word	0x00001419
    1994:	2000052c 	.word	0x2000052c

00001998 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1998:	2800      	cmp	r0, #0
    199a:	d100      	bne.n	199e <assert+0x6>
		__asm("BKPT #0");
    199c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    199e:	4770      	bx	lr

000019a0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    19a0:	b570      	push	{r4, r5, r6, lr}
    19a2:	0004      	movs	r4, r0
    19a4:	000e      	movs	r6, r1
    19a6:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    19a8:	2800      	cmp	r0, #0
    19aa:	d00b      	beq.n	19c4 <ringbuffer_init+0x24>
    19ac:	2900      	cmp	r1, #0
    19ae:	d018      	beq.n	19e2 <ringbuffer_init+0x42>
    19b0:	2001      	movs	r0, #1
    19b2:	2a00      	cmp	r2, #0
    19b4:	d107      	bne.n	19c6 <ringbuffer_init+0x26>
    19b6:	2228      	movs	r2, #40	; 0x28
    19b8:	490c      	ldr	r1, [pc, #48]	; (19ec <ringbuffer_init+0x4c>)
    19ba:	2000      	movs	r0, #0
    19bc:	4b0c      	ldr	r3, [pc, #48]	; (19f0 <ringbuffer_init+0x50>)
    19be:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    19c0:	1e6b      	subs	r3, r5, #1
    19c2:	e007      	b.n	19d4 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
    19c4:	2000      	movs	r0, #0
    19c6:	2228      	movs	r2, #40	; 0x28
    19c8:	4908      	ldr	r1, [pc, #32]	; (19ec <ringbuffer_init+0x4c>)
    19ca:	4b09      	ldr	r3, [pc, #36]	; (19f0 <ringbuffer_init+0x50>)
    19cc:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    19ce:	1e6b      	subs	r3, r5, #1
    19d0:	422b      	tst	r3, r5
    19d2:	d108      	bne.n	19e6 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    19d4:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    19d6:	2300      	movs	r3, #0
    19d8:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    19da:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    19dc:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    19de:	2000      	movs	r0, #0
}
    19e0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    19e2:	2000      	movs	r0, #0
    19e4:	e7ef      	b.n	19c6 <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
    19e6:	200d      	movs	r0, #13
    19e8:	4240      	negs	r0, r0
    19ea:	e7f9      	b.n	19e0 <ringbuffer_init+0x40>
    19ec:	00004858 	.word	0x00004858
    19f0:	00001999 	.word	0x00001999

000019f4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    19f4:	b570      	push	{r4, r5, r6, lr}
    19f6:	0004      	movs	r4, r0
    19f8:	000d      	movs	r5, r1
	ASSERT(rb && data);
    19fa:	2800      	cmp	r0, #0
    19fc:	d015      	beq.n	1a2a <ringbuffer_get+0x36>
    19fe:	0008      	movs	r0, r1
    1a00:	1e43      	subs	r3, r0, #1
    1a02:	4198      	sbcs	r0, r3
    1a04:	b2c0      	uxtb	r0, r0
    1a06:	2240      	movs	r2, #64	; 0x40
    1a08:	490a      	ldr	r1, [pc, #40]	; (1a34 <ringbuffer_get+0x40>)
    1a0a:	4b0b      	ldr	r3, [pc, #44]	; (1a38 <ringbuffer_get+0x44>)
    1a0c:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1a0e:	68a3      	ldr	r3, [r4, #8]
    1a10:	68e2      	ldr	r2, [r4, #12]
    1a12:	429a      	cmp	r2, r3
    1a14:	d00b      	beq.n	1a2e <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
    1a16:	6862      	ldr	r2, [r4, #4]
    1a18:	4013      	ands	r3, r2
    1a1a:	6822      	ldr	r2, [r4, #0]
    1a1c:	5cd3      	ldrb	r3, [r2, r3]
    1a1e:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1a20:	68a3      	ldr	r3, [r4, #8]
    1a22:	3301      	adds	r3, #1
    1a24:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1a26:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    1a28:	bd70      	pop	{r4, r5, r6, pc}
    1a2a:	2000      	movs	r0, #0
    1a2c:	e7eb      	b.n	1a06 <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
    1a2e:	200a      	movs	r0, #10
    1a30:	4240      	negs	r0, r0
    1a32:	e7f9      	b.n	1a28 <ringbuffer_get+0x34>
    1a34:	00004858 	.word	0x00004858
    1a38:	00001999 	.word	0x00001999

00001a3c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1a3c:	b570      	push	{r4, r5, r6, lr}
    1a3e:	0004      	movs	r4, r0
    1a40:	000d      	movs	r5, r1
	ASSERT(rb);
    1a42:	1e43      	subs	r3, r0, #1
    1a44:	4198      	sbcs	r0, r3
    1a46:	b2c0      	uxtb	r0, r0
    1a48:	2251      	movs	r2, #81	; 0x51
    1a4a:	490a      	ldr	r1, [pc, #40]	; (1a74 <ringbuffer_put+0x38>)
    1a4c:	4b0a      	ldr	r3, [pc, #40]	; (1a78 <ringbuffer_put+0x3c>)
    1a4e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1a50:	6863      	ldr	r3, [r4, #4]
    1a52:	68e2      	ldr	r2, [r4, #12]
    1a54:	4013      	ands	r3, r2
    1a56:	6822      	ldr	r2, [r4, #0]
    1a58:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1a5a:	68e3      	ldr	r3, [r4, #12]
    1a5c:	6861      	ldr	r1, [r4, #4]
    1a5e:	68a2      	ldr	r2, [r4, #8]
    1a60:	1a9a      	subs	r2, r3, r2
    1a62:	428a      	cmp	r2, r1
    1a64:	d901      	bls.n	1a6a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    1a66:	1a59      	subs	r1, r3, r1
    1a68:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    1a6a:	3301      	adds	r3, #1
    1a6c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1a6e:	2000      	movs	r0, #0
    1a70:	bd70      	pop	{r4, r5, r6, pc}
    1a72:	46c0      	nop			; (mov r8, r8)
    1a74:	00004858 	.word	0x00004858
    1a78:	00001999 	.word	0x00001999

00001a7c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1a7c:	b510      	push	{r4, lr}
    1a7e:	0004      	movs	r4, r0
	ASSERT(rb);
    1a80:	1e43      	subs	r3, r0, #1
    1a82:	4198      	sbcs	r0, r3
    1a84:	b2c0      	uxtb	r0, r0
    1a86:	2267      	movs	r2, #103	; 0x67
    1a88:	4903      	ldr	r1, [pc, #12]	; (1a98 <ringbuffer_num+0x1c>)
    1a8a:	4b04      	ldr	r3, [pc, #16]	; (1a9c <ringbuffer_num+0x20>)
    1a8c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1a8e:	68e0      	ldr	r0, [r4, #12]
    1a90:	68a3      	ldr	r3, [r4, #8]
    1a92:	1ac0      	subs	r0, r0, r3
}
    1a94:	bd10      	pop	{r4, pc}
    1a96:	46c0      	nop			; (mov r8, r8)
    1a98:	00004858 	.word	0x00004858
    1a9c:	00001999 	.word	0x00001999

00001aa0 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
    1aa0:	23fa      	movs	r3, #250	; 0xfa
    1aa2:	009b      	lsls	r3, r3, #2
    1aa4:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1aa6:	4770      	bx	lr

00001aa8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1aa8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1aaa:	4b06      	ldr	r3, [pc, #24]	; (1ac4 <_init_chip+0x1c>)
    1aac:	685a      	ldr	r2, [r3, #4]
    1aae:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    1ab0:	4b05      	ldr	r3, [pc, #20]	; (1ac8 <_init_chip+0x20>)
    1ab2:	4798      	blx	r3
	_sysctrl_init_sources();
    1ab4:	4b05      	ldr	r3, [pc, #20]	; (1acc <_init_chip+0x24>)
    1ab6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    1ab8:	4b05      	ldr	r3, [pc, #20]	; (1ad0 <_init_chip+0x28>)
    1aba:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1abc:	20ff      	movs	r0, #255	; 0xff
    1abe:	4b05      	ldr	r3, [pc, #20]	; (1ad4 <_init_chip+0x2c>)
    1ac0:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    1ac2:	bd10      	pop	{r4, pc}
    1ac4:	41004000 	.word	0x41004000
    1ac8:	00001b51 	.word	0x00001b51
    1acc:	00002199 	.word	0x00002199
    1ad0:	000021e1 	.word	0x000021e1
    1ad4:	00001ad9 	.word	0x00001ad9

00001ad8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1ad8:	07c3      	lsls	r3, r0, #31
    1ada:	d509      	bpl.n	1af0 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1adc:	4b17      	ldr	r3, [pc, #92]	; (1b3c <_gclk_init_generators_by_fref+0x64>)
    1ade:	2280      	movs	r2, #128	; 0x80
    1ae0:	0052      	lsls	r2, r2, #1
    1ae2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1ae4:	4a16      	ldr	r2, [pc, #88]	; (1b40 <_gclk_init_generators_by_fref+0x68>)
    1ae6:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1ae8:	001a      	movs	r2, r3
    1aea:	7853      	ldrb	r3, [r2, #1]
    1aec:	09db      	lsrs	r3, r3, #7
    1aee:	d1fc      	bne.n	1aea <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1af0:	0783      	lsls	r3, r0, #30
    1af2:	d509      	bpl.n	1b08 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    1af4:	4b11      	ldr	r3, [pc, #68]	; (1b3c <_gclk_init_generators_by_fref+0x64>)
    1af6:	2202      	movs	r2, #2
    1af8:	32ff      	adds	r2, #255	; 0xff
    1afa:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1afc:	4a11      	ldr	r2, [pc, #68]	; (1b44 <_gclk_init_generators_by_fref+0x6c>)
    1afe:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1b00:	001a      	movs	r2, r3
    1b02:	7853      	ldrb	r3, [r2, #1]
    1b04:	09db      	lsrs	r3, r3, #7
    1b06:	d1fc      	bne.n	1b02 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1b08:	0743      	lsls	r3, r0, #29
    1b0a:	d509      	bpl.n	1b20 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
    1b0c:	4b0b      	ldr	r3, [pc, #44]	; (1b3c <_gclk_init_generators_by_fref+0x64>)
    1b0e:	2281      	movs	r2, #129	; 0x81
    1b10:	0052      	lsls	r2, r2, #1
    1b12:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1b14:	4a0c      	ldr	r2, [pc, #48]	; (1b48 <_gclk_init_generators_by_fref+0x70>)
    1b16:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1b18:	001a      	movs	r2, r3
    1b1a:	7853      	ldrb	r3, [r2, #1]
    1b1c:	09db      	lsrs	r3, r3, #7
    1b1e:	d1fc      	bne.n	1b1a <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1b20:	0703      	lsls	r3, r0, #28
    1b22:	d509      	bpl.n	1b38 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENDIV.reg = data;
    1b24:	4b05      	ldr	r3, [pc, #20]	; (1b3c <_gclk_init_generators_by_fref+0x64>)
    1b26:	2204      	movs	r2, #4
    1b28:	32ff      	adds	r2, #255	; 0xff
    1b2a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1b2c:	4a07      	ldr	r2, [pc, #28]	; (1b4c <_gclk_init_generators_by_fref+0x74>)
    1b2e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1b30:	001a      	movs	r2, r3
    1b32:	7853      	ldrb	r3, [r2, #1]
    1b34:	09db      	lsrs	r3, r3, #7
    1b36:	d1fc      	bne.n	1b32 <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    1b38:	4770      	bx	lr
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	40000c00 	.word	0x40000c00
    1b40:	00090600 	.word	0x00090600
    1b44:	00010401 	.word	0x00010401
    1b48:	00090702 	.word	0x00090702
    1b4c:	00010303 	.word	0x00010303

00001b50 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1b50:	4b06      	ldr	r3, [pc, #24]	; (1b6c <_pm_init+0x1c>)
    1b52:	7a1a      	ldrb	r2, [r3, #8]
    1b54:	b2d2      	uxtb	r2, r2
    1b56:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1b58:	7a5a      	ldrb	r2, [r3, #9]
    1b5a:	b2d2      	uxtb	r2, r2
    1b5c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    1b5e:	7a9a      	ldrb	r2, [r3, #10]
    1b60:	b2d2      	uxtb	r2, r2
    1b62:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1b64:	7ada      	ldrb	r2, [r3, #11]
    1b66:	b2d2      	uxtb	r2, r2
    1b68:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1b6a:	4770      	bx	lr
    1b6c:	40000400 	.word	0x40000400

00001b70 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    1b70:	4b06      	ldr	r3, [pc, #24]	; (1b8c <_sercom_init_irq_param+0x1c>)
    1b72:	4298      	cmp	r0, r3
    1b74:	d003      	beq.n	1b7e <_sercom_init_irq_param+0xe>
		_sercom0_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM2) {
    1b76:	4b06      	ldr	r3, [pc, #24]	; (1b90 <_sercom_init_irq_param+0x20>)
    1b78:	4298      	cmp	r0, r3
    1b7a:	d003      	beq.n	1b84 <_sercom_init_irq_param+0x14>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}
}
    1b7c:	4770      	bx	lr
		_sercom0_dev = (struct _spi_async_dev *)dev;
    1b7e:	4b05      	ldr	r3, [pc, #20]	; (1b94 <_sercom_init_irq_param+0x24>)
    1b80:	6019      	str	r1, [r3, #0]
    1b82:	e7fb      	b.n	1b7c <_sercom_init_irq_param+0xc>
		_sercom2_dev = (struct _usart_async_device *)dev;
    1b84:	4b03      	ldr	r3, [pc, #12]	; (1b94 <_sercom_init_irq_param+0x24>)
    1b86:	6059      	str	r1, [r3, #4]
}
    1b88:	e7f8      	b.n	1b7c <_sercom_init_irq_param+0xc>
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	42000800 	.word	0x42000800
    1b90:	42001000 	.word	0x42001000
    1b94:	200005ac 	.word	0x200005ac

00001b98 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1b98:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1b9a:	07db      	lsls	r3, r3, #31
    1b9c:	d409      	bmi.n	1bb2 <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1b9e:	6803      	ldr	r3, [r0, #0]
    1ba0:	2202      	movs	r2, #2
    1ba2:	4313      	orrs	r3, r2
    1ba4:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ba6:	3201      	adds	r2, #1
    1ba8:	69c3      	ldr	r3, [r0, #28]
    1baa:	421a      	tst	r2, r3
    1bac:	d1fc      	bne.n	1ba8 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1bae:	2000      	movs	r0, #0
}
    1bb0:	4770      	bx	lr
		return ERR_BUSY;
    1bb2:	2004      	movs	r0, #4
    1bb4:	4240      	negs	r0, r0
    1bb6:	e7fb      	b.n	1bb0 <_spi_sync_enable+0x18>

00001bb8 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    1bb8:	b510      	push	{r4, lr}
    1bba:	0004      	movs	r4, r0
	_spi_sync_enable(hw);
    1bbc:	4b08      	ldr	r3, [pc, #32]	; (1be0 <_spi_async_enable+0x28>)
    1bbe:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1bc0:	4b08      	ldr	r3, [pc, #32]	; (1be4 <_spi_async_enable+0x2c>)
    1bc2:	469c      	mov	ip, r3
    1bc4:	4464      	add	r4, ip
    1bc6:	0aa4      	lsrs	r4, r4, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1bc8:	3409      	adds	r4, #9
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1bca:	b2e3      	uxtb	r3, r4
    1bcc:	0622      	lsls	r2, r4, #24
    1bce:	d405      	bmi.n	1bdc <_spi_async_enable+0x24>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bd0:	221f      	movs	r2, #31
    1bd2:	401a      	ands	r2, r3
    1bd4:	2301      	movs	r3, #1
    1bd6:	4093      	lsls	r3, r2
    1bd8:	4a03      	ldr	r2, [pc, #12]	; (1be8 <_spi_async_enable+0x30>)
    1bda:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ((IRQn_Type)_sercom_get_irq_num(hw));

	return ERR_NONE;
}
    1bdc:	2000      	movs	r0, #0
    1bde:	bd10      	pop	{r4, pc}
    1be0:	00001b99 	.word	0x00001b99
    1be4:	bdfff800 	.word	0xbdfff800
    1be8:	e000e100 	.word	0xe000e100

00001bec <_spi_sync_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1bec:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1bee:	07db      	lsls	r3, r3, #31
    1bf0:	d409      	bmi.n	1c06 <_spi_sync_disable+0x1a>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1bf2:	6803      	ldr	r3, [r0, #0]
    1bf4:	2202      	movs	r2, #2
    1bf6:	4393      	bics	r3, r2
    1bf8:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1bfa:	3201      	adds	r2, #1
    1bfc:	69c3      	ldr	r3, [r0, #28]
    1bfe:	421a      	tst	r2, r3
    1c00:	d1fc      	bne.n	1bfc <_spi_sync_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1c02:	2000      	movs	r0, #0
}
    1c04:	4770      	bx	lr
		return ERR_BUSY;
    1c06:	2004      	movs	r0, #4
    1c08:	4240      	negs	r0, r0
    1c0a:	e7fb      	b.n	1c04 <_spi_sync_disable+0x18>

00001c0c <_usart_init>:
{
    1c0c:	b510      	push	{r4, lr}
    1c0e:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1c10:	4b20      	ldr	r3, [pc, #128]	; (1c94 <_usart_init+0x88>)
    1c12:	18c3      	adds	r3, r0, r3
    1c14:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    1c16:	b2db      	uxtb	r3, r3
    1c18:	2b02      	cmp	r3, #2
    1c1a:	d005      	beq.n	1c28 <_usart_init+0x1c>
	ASSERT(false);
    1c1c:	2298      	movs	r2, #152	; 0x98
    1c1e:	0092      	lsls	r2, r2, #2
    1c20:	491d      	ldr	r1, [pc, #116]	; (1c98 <_usart_init+0x8c>)
    1c22:	2000      	movs	r0, #0
    1c24:	4b1d      	ldr	r3, [pc, #116]	; (1c9c <_usart_init+0x90>)
    1c26:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1c28:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1c2a:	07db      	lsls	r3, r3, #31
    1c2c:	d418      	bmi.n	1c60 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1c2e:	2203      	movs	r2, #3
    1c30:	69e3      	ldr	r3, [r4, #28]
    1c32:	421a      	tst	r2, r3
    1c34:	d1fc      	bne.n	1c30 <_usart_init+0x24>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1c36:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1c38:	079b      	lsls	r3, r3, #30
    1c3a:	d50b      	bpl.n	1c54 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1c3c:	6823      	ldr	r3, [r4, #0]
    1c3e:	2202      	movs	r2, #2
    1c40:	4393      	bics	r3, r2
    1c42:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1c44:	3201      	adds	r2, #1
    1c46:	69e3      	ldr	r3, [r4, #28]
    1c48:	421a      	tst	r2, r3
    1c4a:	d1fc      	bne.n	1c46 <_usart_init+0x3a>
    1c4c:	2202      	movs	r2, #2
    1c4e:	69e3      	ldr	r3, [r4, #28]
    1c50:	421a      	tst	r2, r3
    1c52:	d1fc      	bne.n	1c4e <_usart_init+0x42>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1c54:	2305      	movs	r3, #5
    1c56:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1c58:	2203      	movs	r2, #3
    1c5a:	69e3      	ldr	r3, [r4, #28]
    1c5c:	421a      	tst	r2, r3
    1c5e:	d1fc      	bne.n	1c5a <_usart_init+0x4e>
    1c60:	2201      	movs	r2, #1
    1c62:	69e3      	ldr	r3, [r4, #28]
    1c64:	421a      	tst	r2, r3
    1c66:	d1fc      	bne.n	1c62 <_usart_init+0x56>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1c68:	4b0d      	ldr	r3, [pc, #52]	; (1ca0 <_usart_init+0x94>)
    1c6a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1c6c:	2203      	movs	r2, #3
    1c6e:	69e3      	ldr	r3, [r4, #28]
    1c70:	421a      	tst	r2, r3
    1c72:	d1fc      	bne.n	1c6e <_usart_init+0x62>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1c74:	23c0      	movs	r3, #192	; 0xc0
    1c76:	029b      	lsls	r3, r3, #10
    1c78:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1c7a:	2207      	movs	r2, #7
    1c7c:	69e3      	ldr	r3, [r4, #28]
    1c7e:	421a      	tst	r2, r3
    1c80:	d1fc      	bne.n	1c7c <_usart_init+0x70>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1c82:	4b08      	ldr	r3, [pc, #32]	; (1ca4 <_usart_init+0x98>)
    1c84:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1c86:	2300      	movs	r3, #0
    1c88:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1c8a:	2230      	movs	r2, #48	; 0x30
    1c8c:	54a3      	strb	r3, [r4, r2]
}
    1c8e:	2000      	movs	r0, #0
    1c90:	bd10      	pop	{r4, pc}
    1c92:	46c0      	nop			; (mov r8, r8)
    1c94:	bdfff800 	.word	0xbdfff800
    1c98:	0000487c 	.word	0x0000487c
    1c9c:	00001999 	.word	0x00001999
    1ca0:	40100004 	.word	0x40100004
    1ca4:	ffffd8ad 	.word	0xffffd8ad

00001ca8 <_spi_async_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_async_disable(void *const hw)
{
    1ca8:	b510      	push	{r4, lr}
    1caa:	0004      	movs	r4, r0
	_spi_sync_disable(hw);
    1cac:	4b0c      	ldr	r3, [pc, #48]	; (1ce0 <_spi_async_disable+0x38>)
    1cae:	4798      	blx	r3
	((Sercom *)hw)->SPI.INTENCLR.reg = mask;
    1cb0:	2387      	movs	r3, #135	; 0x87
    1cb2:	7523      	strb	r3, [r4, #20]
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1cb4:	4b0b      	ldr	r3, [pc, #44]	; (1ce4 <_spi_async_disable+0x3c>)
    1cb6:	469c      	mov	ip, r3
    1cb8:	4464      	add	r4, ip
    1cba:	0aa4      	lsrs	r4, r4, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1cbc:	3409      	adds	r4, #9
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1cbe:	b2e3      	uxtb	r3, r4
    1cc0:	0622      	lsls	r2, r4, #24
    1cc2:	d40a      	bmi.n	1cda <_spi_async_disable+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cc4:	221f      	movs	r2, #31
    1cc6:	401a      	ands	r2, r3
    1cc8:	2301      	movs	r3, #1
    1cca:	4093      	lsls	r3, r2
    1ccc:	2280      	movs	r2, #128	; 0x80
    1cce:	4906      	ldr	r1, [pc, #24]	; (1ce8 <_spi_async_disable+0x40>)
    1cd0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1cd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1cd6:	f3bf 8f6f 	isb	sy
	hri_sercomspi_clear_INTEN_reg(
	    hw, SERCOM_SPI_INTFLAG_ERROR | SERCOM_SPI_INTFLAG_RXC | SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));

	return ERR_NONE;
}
    1cda:	2000      	movs	r0, #0
    1cdc:	bd10      	pop	{r4, pc}
    1cde:	46c0      	nop			; (mov r8, r8)
    1ce0:	00001bed 	.word	0x00001bed
    1ce4:	bdfff800 	.word	0xbdfff800
    1ce8:	e000e100 	.word	0xe000e100

00001cec <_usart_async_init>:
{
    1cec:	b570      	push	{r4, r5, r6, lr}
    1cee:	0006      	movs	r6, r0
    1cf0:	000c      	movs	r4, r1
	ASSERT(device);
    1cf2:	1e43      	subs	r3, r0, #1
    1cf4:	4198      	sbcs	r0, r3
    1cf6:	b2c0      	uxtb	r0, r0
    1cf8:	22c6      	movs	r2, #198	; 0xc6
    1cfa:	4913      	ldr	r1, [pc, #76]	; (1d48 <_usart_async_init+0x5c>)
    1cfc:	4b13      	ldr	r3, [pc, #76]	; (1d4c <_usart_async_init+0x60>)
    1cfe:	4798      	blx	r3
	init_status = _usart_init(hw);
    1d00:	0020      	movs	r0, r4
    1d02:	4b13      	ldr	r3, [pc, #76]	; (1d50 <_usart_async_init+0x64>)
    1d04:	4798      	blx	r3
    1d06:	1e05      	subs	r5, r0, #0
	if (init_status) {
    1d08:	d001      	beq.n	1d0e <_usart_async_init+0x22>
}
    1d0a:	0028      	movs	r0, r5
    1d0c:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    1d0e:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    1d10:	0031      	movs	r1, r6
    1d12:	0020      	movs	r0, r4
    1d14:	4b0f      	ldr	r3, [pc, #60]	; (1d54 <_usart_async_init+0x68>)
    1d16:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1d18:	4b0f      	ldr	r3, [pc, #60]	; (1d58 <_usart_async_init+0x6c>)
    1d1a:	469c      	mov	ip, r3
    1d1c:	4464      	add	r4, ip
    1d1e:	0aa4      	lsrs	r4, r4, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1d20:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    1d22:	b2e3      	uxtb	r3, r4
    1d24:	0622      	lsls	r2, r4, #24
    1d26:	d4f0      	bmi.n	1d0a <_usart_async_init+0x1e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d28:	221f      	movs	r2, #31
    1d2a:	401a      	ands	r2, r3
    1d2c:	2301      	movs	r3, #1
    1d2e:	4093      	lsls	r3, r2
    1d30:	4a0a      	ldr	r2, [pc, #40]	; (1d5c <_usart_async_init+0x70>)
    1d32:	2180      	movs	r1, #128	; 0x80
    1d34:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1d36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d3a:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d3e:	3101      	adds	r1, #1
    1d40:	31ff      	adds	r1, #255	; 0xff
    1d42:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d44:	6013      	str	r3, [r2, #0]
    1d46:	e7e0      	b.n	1d0a <_usart_async_init+0x1e>
    1d48:	0000487c 	.word	0x0000487c
    1d4c:	00001999 	.word	0x00001999
    1d50:	00001c0d 	.word	0x00001c0d
    1d54:	00001b71 	.word	0x00001b71
    1d58:	bdfff800 	.word	0xbdfff800
    1d5c:	e000e100 	.word	0xe000e100

00001d60 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1d60:	6983      	ldr	r3, [r0, #24]
    1d62:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1d64:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1d66:	4770      	bx	lr

00001d68 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1d68:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1d6a:	2201      	movs	r2, #1
    1d6c:	759a      	strb	r2, [r3, #22]
}
    1d6e:	4770      	bx	lr

00001d70 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1d70:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1d72:	2202      	movs	r2, #2
    1d74:	759a      	strb	r2, [r3, #22]
}
    1d76:	4770      	bx	lr

00001d78 <SERCOM0_Handler>:
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}

void SERCOM0_Handler(void)
{
    1d78:	b510      	push	{r4, lr}
	_spi_handler(_sercom0_dev);
    1d7a:	4b12      	ldr	r3, [pc, #72]	; (1dc4 <SERCOM0_Handler+0x4c>)
    1d7c:	6818      	ldr	r0, [r3, #0]
	void *                      hw = dev->prvt;
    1d7e:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1d80:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    1d82:	7d93      	ldrb	r3, [r2, #22]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    1d84:	400b      	ands	r3, r1
	if (st & SERCOM_SPI_INTFLAG_DRE) {
    1d86:	07d9      	lsls	r1, r3, #31
    1d88:	d407      	bmi.n	1d9a <SERCOM0_Handler+0x22>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    1d8a:	0759      	lsls	r1, r3, #29
    1d8c:	d408      	bmi.n	1da0 <SERCOM0_Handler+0x28>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    1d8e:	0799      	lsls	r1, r3, #30
    1d90:	d409      	bmi.n	1da6 <SERCOM0_Handler+0x2e>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    1d92:	b25b      	sxtb	r3, r3
    1d94:	2b00      	cmp	r3, #0
    1d96:	db0b      	blt.n	1db0 <SERCOM0_Handler+0x38>
}
    1d98:	bd10      	pop	{r4, pc}
		dev->callbacks.tx(dev);
    1d9a:	6883      	ldr	r3, [r0, #8]
    1d9c:	4798      	blx	r3
    1d9e:	e7fb      	b.n	1d98 <SERCOM0_Handler+0x20>
		dev->callbacks.rx(dev);
    1da0:	68c3      	ldr	r3, [r0, #12]
    1da2:	4798      	blx	r3
    1da4:	e7f8      	b.n	1d98 <SERCOM0_Handler+0x20>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1da6:	2302      	movs	r3, #2
    1da8:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    1daa:	6903      	ldr	r3, [r0, #16]
    1dac:	4798      	blx	r3
    1dae:	e7f3      	b.n	1d98 <SERCOM0_Handler+0x20>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1db0:	2304      	movs	r3, #4
    1db2:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1db4:	337c      	adds	r3, #124	; 0x7c
    1db6:	7613      	strb	r3, [r2, #24]
		dev->callbacks.err(dev, ERR_OVERFLOW);
    1db8:	6943      	ldr	r3, [r0, #20]
    1dba:	2113      	movs	r1, #19
    1dbc:	4249      	negs	r1, r1
    1dbe:	4798      	blx	r3
}
    1dc0:	e7ea      	b.n	1d98 <SERCOM0_Handler+0x20>
    1dc2:	46c0      	nop			; (mov r8, r8)
    1dc4:	200005ac 	.word	0x200005ac

00001dc8 <SERCOM2_Handler>:

void SERCOM2_Handler(void)
{
    1dc8:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    1dca:	4b19      	ldr	r3, [pc, #100]	; (1e30 <SERCOM2_Handler+0x68>)
    1dcc:	6858      	ldr	r0, [r3, #4]
	void *hw = device->hw;
    1dce:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1dd0:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1dd2:	07db      	lsls	r3, r3, #31
    1dd4:	d502      	bpl.n	1ddc <SERCOM2_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1dd6:	7da3      	ldrb	r3, [r4, #22]
    1dd8:	07db      	lsls	r3, r3, #31
    1dda:	d40f      	bmi.n	1dfc <SERCOM2_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1ddc:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1dde:	079b      	lsls	r3, r3, #30
    1de0:	d502      	bpl.n	1de8 <SERCOM2_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1de2:	7da3      	ldrb	r3, [r4, #22]
    1de4:	079b      	lsls	r3, r3, #30
    1de6:	d40e      	bmi.n	1e06 <SERCOM2_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1de8:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1dea:	075b      	lsls	r3, r3, #29
    1dec:	d515      	bpl.n	1e1a <SERCOM2_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    1dee:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1df0:	2337      	movs	r3, #55	; 0x37
    1df2:	421a      	tst	r2, r3
    1df4:	d00c      	beq.n	1e10 <SERCOM2_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1df6:	3308      	adds	r3, #8
    1df8:	8363      	strh	r3, [r4, #26]
}
    1dfa:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1dfc:	2301      	movs	r3, #1
    1dfe:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    1e00:	6803      	ldr	r3, [r0, #0]
    1e02:	4798      	blx	r3
    1e04:	e7f9      	b.n	1dfa <SERCOM2_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1e06:	2302      	movs	r3, #2
    1e08:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1e0a:	6883      	ldr	r3, [r0, #8]
    1e0c:	4798      	blx	r3
    1e0e:	e7f4      	b.n	1dfa <SERCOM2_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
    1e10:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1e12:	b2c9      	uxtb	r1, r1
    1e14:	6843      	ldr	r3, [r0, #4]
    1e16:	4798      	blx	r3
    1e18:	e7ef      	b.n	1dfa <SERCOM2_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1e1a:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1e1c:	09db      	lsrs	r3, r3, #7
    1e1e:	d0ec      	beq.n	1dfa <SERCOM2_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1e20:	2380      	movs	r3, #128	; 0x80
    1e22:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    1e24:	68c3      	ldr	r3, [r0, #12]
    1e26:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1e28:	8b63      	ldrh	r3, [r4, #26]
    1e2a:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1e2c:	8363      	strh	r3, [r4, #26]
}
    1e2e:	e7e4      	b.n	1dfa <SERCOM2_Handler+0x32>
    1e30:	200005ac 	.word	0x200005ac

00001e34 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1e34:	b570      	push	{r4, r5, r6, lr}
    1e36:	0005      	movs	r5, r0
    1e38:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1e3a:	4b35      	ldr	r3, [pc, #212]	; (1f10 <_spi_m_sync_init+0xdc>)
    1e3c:	18cb      	adds	r3, r1, r3
    1e3e:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    1e40:	b2db      	uxtb	r3, r3
    1e42:	2b00      	cmp	r3, #0
    1e44:	d00b      	beq.n	1e5e <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1e46:	2800      	cmp	r0, #0
    1e48:	d051      	beq.n	1eee <_spi_m_sync_init+0xba>
    1e4a:	1e60      	subs	r0, r4, #1
    1e4c:	4184      	sbcs	r4, r0
    1e4e:	b2e0      	uxtb	r0, r4
    1e50:	4a30      	ldr	r2, [pc, #192]	; (1f14 <_spi_m_sync_init+0xe0>)
    1e52:	4931      	ldr	r1, [pc, #196]	; (1f18 <_spi_m_sync_init+0xe4>)
    1e54:	4b31      	ldr	r3, [pc, #196]	; (1f1c <_spi_m_sync_init+0xe8>)
    1e56:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1e58:	200d      	movs	r0, #13
    1e5a:	4240      	negs	r0, r0
    1e5c:	e046      	b.n	1eec <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    1e5e:	2800      	cmp	r0, #0
    1e60:	d14d      	bne.n	1efe <_spi_m_sync_init+0xca>
    1e62:	4a2c      	ldr	r2, [pc, #176]	; (1f14 <_spi_m_sync_init+0xe0>)
    1e64:	492c      	ldr	r1, [pc, #176]	; (1f18 <_spi_m_sync_init+0xe4>)
    1e66:	2000      	movs	r0, #0
    1e68:	4b2c      	ldr	r3, [pc, #176]	; (1f1c <_spi_m_sync_init+0xe8>)
    1e6a:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1e6c:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1e6e:	07db      	lsls	r3, r3, #31
    1e70:	d418      	bmi.n	1ea4 <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1e72:	2203      	movs	r2, #3
    1e74:	69e3      	ldr	r3, [r4, #28]
    1e76:	421a      	tst	r2, r3
    1e78:	d1fc      	bne.n	1e74 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1e7a:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1e7c:	079b      	lsls	r3, r3, #30
    1e7e:	d50b      	bpl.n	1e98 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1e80:	6823      	ldr	r3, [r4, #0]
    1e82:	2202      	movs	r2, #2
    1e84:	4393      	bics	r3, r2
    1e86:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1e88:	3201      	adds	r2, #1
    1e8a:	69e3      	ldr	r3, [r4, #28]
    1e8c:	421a      	tst	r2, r3
    1e8e:	d1fc      	bne.n	1e8a <_spi_m_sync_init+0x56>
    1e90:	2202      	movs	r2, #2
    1e92:	69e3      	ldr	r3, [r4, #28]
    1e94:	421a      	tst	r2, r3
    1e96:	d1fc      	bne.n	1e92 <_spi_m_sync_init+0x5e>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1e98:	230d      	movs	r3, #13
    1e9a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1e9c:	2203      	movs	r2, #3
    1e9e:	69e3      	ldr	r3, [r4, #28]
    1ea0:	421a      	tst	r2, r3
    1ea2:	d1fc      	bne.n	1e9e <_spi_m_sync_init+0x6a>
    1ea4:	2201      	movs	r2, #1
    1ea6:	69e3      	ldr	r3, [r4, #28]
    1ea8:	421a      	tst	r2, r3
    1eaa:	d1fc      	bne.n	1ea6 <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1eac:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1eae:	0020      	movs	r0, r4
    1eb0:	1e43      	subs	r3, r0, #1
    1eb2:	4198      	sbcs	r0, r3
    1eb4:	b2c0      	uxtb	r0, r0
    1eb6:	4a1a      	ldr	r2, [pc, #104]	; (1f20 <_spi_m_sync_init+0xec>)
    1eb8:	4917      	ldr	r1, [pc, #92]	; (1f18 <_spi_m_sync_init+0xe4>)
    1eba:	4b18      	ldr	r3, [pc, #96]	; (1f1c <_spi_m_sync_init+0xe8>)
    1ebc:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1ebe:	4b19      	ldr	r3, [pc, #100]	; (1f24 <_spi_m_sync_init+0xf0>)
    1ec0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ec2:	2203      	movs	r2, #3
    1ec4:	69e3      	ldr	r3, [r4, #28]
    1ec6:	421a      	tst	r2, r3
    1ec8:	d1fc      	bne.n	1ec4 <_spi_m_sync_init+0x90>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1eca:	2380      	movs	r3, #128	; 0x80
    1ecc:	029b      	lsls	r3, r3, #10
    1ece:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ed0:	2207      	movs	r2, #7
    1ed2:	69e3      	ldr	r3, [r4, #28]
    1ed4:	421a      	tst	r2, r3
    1ed6:	d1fc      	bne.n	1ed2 <_spi_m_sync_init+0x9e>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1ed8:	23ff      	movs	r3, #255	; 0xff
    1eda:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1edc:	2200      	movs	r2, #0
    1ede:	3bcf      	subs	r3, #207	; 0xcf
    1ee0:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1ee2:	3b2f      	subs	r3, #47	; 0x2f
    1ee4:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1ee6:	4b10      	ldr	r3, [pc, #64]	; (1f28 <_spi_m_sync_init+0xf4>)
    1ee8:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    1eea:	2000      	movs	r0, #0
}
    1eec:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    1eee:	4a09      	ldr	r2, [pc, #36]	; (1f14 <_spi_m_sync_init+0xe0>)
    1ef0:	4909      	ldr	r1, [pc, #36]	; (1f18 <_spi_m_sync_init+0xe4>)
    1ef2:	2000      	movs	r0, #0
    1ef4:	4b09      	ldr	r3, [pc, #36]	; (1f1c <_spi_m_sync_init+0xe8>)
    1ef6:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1ef8:	200d      	movs	r0, #13
    1efa:	4240      	negs	r0, r0
    1efc:	e7f6      	b.n	1eec <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    1efe:	0008      	movs	r0, r1
    1f00:	1e43      	subs	r3, r0, #1
    1f02:	4198      	sbcs	r0, r3
    1f04:	b2c0      	uxtb	r0, r0
    1f06:	4a03      	ldr	r2, [pc, #12]	; (1f14 <_spi_m_sync_init+0xe0>)
    1f08:	4903      	ldr	r1, [pc, #12]	; (1f18 <_spi_m_sync_init+0xe4>)
    1f0a:	4b04      	ldr	r3, [pc, #16]	; (1f1c <_spi_m_sync_init+0xe8>)
    1f0c:	4798      	blx	r3
    1f0e:	e7ad      	b.n	1e6c <_spi_m_sync_init+0x38>
    1f10:	bdfff800 	.word	0xbdfff800
    1f14:	0000096d 	.word	0x0000096d
    1f18:	0000487c 	.word	0x0000487c
    1f1c:	00001999 	.word	0x00001999
    1f20:	00000913 	.word	0x00000913
    1f24:	0011000c 	.word	0x0011000c
    1f28:	000001ff 	.word	0x000001ff

00001f2c <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    1f2c:	b570      	push	{r4, r5, r6, lr}
    1f2e:	0005      	movs	r5, r0
    1f30:	000c      	movs	r4, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    1f32:	4b13      	ldr	r3, [pc, #76]	; (1f80 <_spi_m_async_init+0x54>)
    1f34:	4798      	blx	r3

	if (rc < 0) {
    1f36:	2800      	cmp	r0, #0
    1f38:	db1e      	blt.n	1f78 <_spi_m_async_init+0x4c>
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
    1f3a:	0029      	movs	r1, r5
    1f3c:	0020      	movs	r0, r4
    1f3e:	4b11      	ldr	r3, [pc, #68]	; (1f84 <_spi_m_async_init+0x58>)
    1f40:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    1f42:	2300      	movs	r3, #0
    1f44:	612b      	str	r3, [r5, #16]
	spid->callbacks.rx       = NULL;
    1f46:	60eb      	str	r3, [r5, #12]
	spid->callbacks.tx       = NULL;
    1f48:	60ab      	str	r3, [r5, #8]
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1f4a:	4b0f      	ldr	r3, [pc, #60]	; (1f88 <_spi_m_async_init+0x5c>)
    1f4c:	469c      	mov	ip, r3
    1f4e:	4464      	add	r4, ip
    1f50:	0aa4      	lsrs	r4, r4, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1f52:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    1f54:	b2e3      	uxtb	r3, r4
    1f56:	0622      	lsls	r2, r4, #24
    1f58:	d40f      	bmi.n	1f7a <_spi_m_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f5a:	221f      	movs	r2, #31
    1f5c:	401a      	ands	r2, r3
    1f5e:	2301      	movs	r3, #1
    1f60:	4093      	lsls	r3, r2
    1f62:	4a0a      	ldr	r2, [pc, #40]	; (1f8c <_spi_m_async_init+0x60>)
    1f64:	2180      	movs	r1, #128	; 0x80
    1f66:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1f68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f6c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f70:	3101      	adds	r1, #1
    1f72:	31ff      	adds	r1, #255	; 0xff
    1f74:	5053      	str	r3, [r2, r1]
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));

	return ERR_NONE;
    1f76:	2000      	movs	r0, #0
}
    1f78:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    1f7a:	2000      	movs	r0, #0
    1f7c:	e7fc      	b.n	1f78 <_spi_m_async_init+0x4c>
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	00001e35 	.word	0x00001e35
    1f84:	00001b71 	.word	0x00001b71
    1f88:	bdfff800 	.word	0xbdfff800
    1f8c:	e000e100 	.word	0xe000e100

00001f90 <_spi_m_async_enable>:

	return _spi_sync_enable(dev->prvt);
}

int32_t _spi_m_async_enable(struct _spi_async_dev *dev)
{
    1f90:	b510      	push	{r4, lr}
    1f92:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    1f94:	d00b      	beq.n	1fae <_spi_m_async_enable+0x1e>
    1f96:	6800      	ldr	r0, [r0, #0]
    1f98:	1e43      	subs	r3, r0, #1
    1f9a:	4198      	sbcs	r0, r3
    1f9c:	b2c0      	uxtb	r0, r0
    1f9e:	4a05      	ldr	r2, [pc, #20]	; (1fb4 <_spi_m_async_enable+0x24>)
    1fa0:	4905      	ldr	r1, [pc, #20]	; (1fb8 <_spi_m_async_enable+0x28>)
    1fa2:	4b06      	ldr	r3, [pc, #24]	; (1fbc <_spi_m_async_enable+0x2c>)
    1fa4:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
    1fa6:	6820      	ldr	r0, [r4, #0]
    1fa8:	4b05      	ldr	r3, [pc, #20]	; (1fc0 <_spi_m_async_enable+0x30>)
    1faa:	4798      	blx	r3
}
    1fac:	bd10      	pop	{r4, pc}
    1fae:	2000      	movs	r0, #0
    1fb0:	e7f5      	b.n	1f9e <_spi_m_async_enable+0xe>
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	000009d6 	.word	0x000009d6
    1fb8:	0000487c 	.word	0x0000487c
    1fbc:	00001999 	.word	0x00001999
    1fc0:	00001bb9 	.word	0x00001bb9

00001fc4 <_spi_m_async_disable>:

	return _spi_sync_disable(dev->prvt);
}

int32_t _spi_m_async_disable(struct _spi_async_dev *dev)
{
    1fc4:	b510      	push	{r4, lr}
    1fc6:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    1fc8:	d00b      	beq.n	1fe2 <_spi_m_async_disable+0x1e>
    1fca:	6800      	ldr	r0, [r0, #0]
    1fcc:	1e43      	subs	r3, r0, #1
    1fce:	4198      	sbcs	r0, r3
    1fd0:	b2c0      	uxtb	r0, r0
    1fd2:	4a05      	ldr	r2, [pc, #20]	; (1fe8 <_spi_m_async_disable+0x24>)
    1fd4:	4905      	ldr	r1, [pc, #20]	; (1fec <_spi_m_async_disable+0x28>)
    1fd6:	4b06      	ldr	r3, [pc, #24]	; (1ff0 <_spi_m_async_disable+0x2c>)
    1fd8:	4798      	blx	r3

	return _spi_async_disable(dev->prvt);
    1fda:	6820      	ldr	r0, [r4, #0]
    1fdc:	4b05      	ldr	r3, [pc, #20]	; (1ff4 <_spi_m_async_disable+0x30>)
    1fde:	4798      	blx	r3
}
    1fe0:	bd10      	pop	{r4, pc}
    1fe2:	2000      	movs	r0, #0
    1fe4:	e7f5      	b.n	1fd2 <_spi_m_async_disable+0xe>
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	000009f2 	.word	0x000009f2
    1fec:	0000487c 	.word	0x0000487c
    1ff0:	00001999 	.word	0x00001999
    1ff4:	00001ca9 	.word	0x00001ca9

00001ff8 <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    1ff8:	b570      	push	{r4, r5, r6, lr}
    1ffa:	000d      	movs	r5, r1
	void *hw = dev->prvt;
    1ffc:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    1ffe:	2800      	cmp	r0, #0
    2000:	d00d      	beq.n	201e <STACK_SIZE+0x1e>
    2002:	0020      	movs	r0, r4
    2004:	1e43      	subs	r3, r0, #1
    2006:	4198      	sbcs	r0, r3
    2008:	b2c0      	uxtb	r0, r0
    200a:	4a07      	ldr	r2, [pc, #28]	; (2028 <STACK_SIZE+0x28>)
    200c:	4907      	ldr	r1, [pc, #28]	; (202c <STACK_SIZE+0x2c>)
    200e:	4b08      	ldr	r3, [pc, #32]	; (2030 <STACK_SIZE+0x30>)
    2010:	4798      	blx	r3

	if (state) {
    2012:	2d00      	cmp	r5, #0
    2014:	d105      	bne.n	2022 <STACK_SIZE+0x22>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    2016:	2301      	movs	r3, #1
    2018:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    201a:	2000      	movs	r0, #0
    201c:	bd70      	pop	{r4, r5, r6, pc}
    201e:	2000      	movs	r0, #0
    2020:	e7f3      	b.n	200a <STACK_SIZE+0xa>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    2022:	2301      	movs	r3, #1
    2024:	75a3      	strb	r3, [r4, #22]
    2026:	e7f8      	b.n	201a <STACK_SIZE+0x1a>
    2028:	00000af9 	.word	0x00000af9
    202c:	0000487c 	.word	0x0000487c
    2030:	00001999 	.word	0x00001999

00002034 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    2034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2036:	000e      	movs	r6, r1
	void *hw = dev->prvt;
    2038:	6805      	ldr	r5, [r0, #0]

	ASSERT(dev);
    203a:	4c0c      	ldr	r4, [pc, #48]	; (206c <_spi_m_async_enable_rx+0x38>)
    203c:	1e43      	subs	r3, r0, #1
    203e:	4198      	sbcs	r0, r3
    2040:	b2c0      	uxtb	r0, r0
    2042:	4a0b      	ldr	r2, [pc, #44]	; (2070 <_spi_m_async_enable_rx+0x3c>)
    2044:	0021      	movs	r1, r4
    2046:	4f0b      	ldr	r7, [pc, #44]	; (2074 <_spi_m_async_enable_rx+0x40>)
    2048:	47b8      	blx	r7
	ASSERT(hw);
    204a:	0028      	movs	r0, r5
    204c:	1e43      	subs	r3, r0, #1
    204e:	4198      	sbcs	r0, r3
    2050:	b2c0      	uxtb	r0, r0
    2052:	4a09      	ldr	r2, [pc, #36]	; (2078 <_spi_m_async_enable_rx+0x44>)
    2054:	0021      	movs	r1, r4
    2056:	47b8      	blx	r7

	if (state) {
    2058:	2e00      	cmp	r6, #0
    205a:	d103      	bne.n	2064 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    205c:	2304      	movs	r3, #4
    205e:	752b      	strb	r3, [r5, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    2060:	2000      	movs	r0, #0
    2062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    2064:	2304      	movs	r3, #4
    2066:	75ab      	strb	r3, [r5, #22]
    2068:	e7fa      	b.n	2060 <_spi_m_async_enable_rx+0x2c>
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	0000487c 	.word	0x0000487c
    2070:	00000b0d 	.word	0x00000b0d
    2074:	00001999 	.word	0x00001999
    2078:	00000b0e 	.word	0x00000b0e

0000207c <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    207c:	b570      	push	{r4, r5, r6, lr}
    207e:	0004      	movs	r4, r0
    2080:	000d      	movs	r5, r1
	ASSERT(dev && dev->prvt);
    2082:	2800      	cmp	r0, #0
    2084:	d00f      	beq.n	20a6 <_spi_m_async_enable_tx_complete+0x2a>
    2086:	6800      	ldr	r0, [r0, #0]
    2088:	1e43      	subs	r3, r0, #1
    208a:	4198      	sbcs	r0, r3
    208c:	b2c0      	uxtb	r0, r0
    208e:	22b2      	movs	r2, #178	; 0xb2
    2090:	0112      	lsls	r2, r2, #4
    2092:	4908      	ldr	r1, [pc, #32]	; (20b4 <_spi_m_async_enable_tx_complete+0x38>)
    2094:	4b08      	ldr	r3, [pc, #32]	; (20b8 <_spi_m_async_enable_tx_complete+0x3c>)
    2096:	4798      	blx	r3

	if (state) {
    2098:	2d00      	cmp	r5, #0
    209a:	d106      	bne.n	20aa <_spi_m_async_enable_tx_complete+0x2e>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    209c:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    209e:	2202      	movs	r2, #2
    20a0:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    20a2:	2000      	movs	r0, #0
    20a4:	bd70      	pop	{r4, r5, r6, pc}
    20a6:	2000      	movs	r0, #0
    20a8:	e7f1      	b.n	208e <_spi_m_async_enable_tx_complete+0x12>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    20aa:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    20ac:	2202      	movs	r2, #2
    20ae:	759a      	strb	r2, [r3, #22]
    20b0:	e7f7      	b.n	20a2 <_spi_m_async_enable_tx_complete+0x26>
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	0000487c 	.word	0x0000487c
    20b8:	00001999 	.word	0x00001999

000020bc <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    20bc:	b570      	push	{r4, r5, r6, lr}
    20be:	0004      	movs	r4, r0
    20c0:	000d      	movs	r5, r1
	ASSERT(dev && dev->prvt);
    20c2:	2800      	cmp	r0, #0
    20c4:	d00b      	beq.n	20de <_spi_m_async_write_one+0x22>
    20c6:	6800      	ldr	r0, [r0, #0]
    20c8:	1e43      	subs	r3, r0, #1
    20ca:	4198      	sbcs	r0, r3
    20cc:	b2c0      	uxtb	r0, r0
    20ce:	4a05      	ldr	r2, [pc, #20]	; (20e4 <_spi_m_async_write_one+0x28>)
    20d0:	4905      	ldr	r1, [pc, #20]	; (20e8 <_spi_m_async_write_one+0x2c>)
    20d2:	4b06      	ldr	r3, [pc, #24]	; (20ec <_spi_m_async_write_one+0x30>)
    20d4:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    20d6:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    20d8:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    20da:	2000      	movs	r0, #0
    20dc:	bd70      	pop	{r4, r5, r6, pc}
    20de:	2000      	movs	r0, #0
    20e0:	e7f5      	b.n	20ce <_spi_m_async_write_one+0x12>
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	00000b32 	.word	0x00000b32
    20e8:	0000487c 	.word	0x0000487c
    20ec:	00001999 	.word	0x00001999

000020f0 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    20f0:	b510      	push	{r4, lr}
    20f2:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    20f4:	d00b      	beq.n	210e <_spi_m_async_read_one+0x1e>
    20f6:	6800      	ldr	r0, [r0, #0]
    20f8:	1e43      	subs	r3, r0, #1
    20fa:	4198      	sbcs	r0, r3
    20fc:	b2c0      	uxtb	r0, r0
    20fe:	4a05      	ldr	r2, [pc, #20]	; (2114 <_spi_m_async_read_one+0x24>)
    2100:	4905      	ldr	r1, [pc, #20]	; (2118 <_spi_m_async_read_one+0x28>)
    2102:	4b06      	ldr	r3, [pc, #24]	; (211c <_spi_m_async_read_one+0x2c>)
    2104:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    2106:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    2108:	6a98      	ldr	r0, [r3, #40]	; 0x28
    210a:	b280      	uxth	r0, r0
}
    210c:	bd10      	pop	{r4, pc}
    210e:	2000      	movs	r0, #0
    2110:	e7f5      	b.n	20fe <_spi_m_async_read_one+0xe>
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	00000b4d 	.word	0x00000b4d
    2118:	0000487c 	.word	0x0000487c
    211c:	00001999 	.word	0x00001999

00002120 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    2120:	b570      	push	{r4, r5, r6, lr}
    2122:	0004      	movs	r4, r0
    2124:	000d      	movs	r5, r1
    2126:	0016      	movs	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    2128:	2800      	cmp	r0, #0
    212a:	d00f      	beq.n	214c <_spi_m_async_register_callback+0x2c>
    212c:	2000      	movs	r0, #0
    212e:	2303      	movs	r3, #3
    2130:	428b      	cmp	r3, r1
    2132:	4140      	adcs	r0, r0
    2134:	b2c0      	uxtb	r0, r0
    2136:	2301      	movs	r3, #1
    2138:	4018      	ands	r0, r3
    213a:	4a05      	ldr	r2, [pc, #20]	; (2150 <_spi_m_async_register_callback+0x30>)
    213c:	4905      	ldr	r1, [pc, #20]	; (2154 <_spi_m_async_register_callback+0x34>)
    213e:	4b06      	ldr	r3, [pc, #24]	; (2158 <_spi_m_async_register_callback+0x38>)
    2140:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    2142:	00ad      	lsls	r5, r5, #2
    2144:	1964      	adds	r4, r4, r5
    2146:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    2148:	2000      	movs	r0, #0
    214a:	bd70      	pop	{r4, r5, r6, pc}
    214c:	2000      	movs	r0, #0
    214e:	e7f2      	b.n	2136 <_spi_m_async_register_callback+0x16>
    2150:	00000b66 	.word	0x00000b66
    2154:	0000487c 	.word	0x0000487c
    2158:	00001999 	.word	0x00001999

0000215c <_spi_m_async_set_irq_state>:
 * param[in] type The type of interrupt to disable/enable if applicable
 * param[in] state Enable or disable
 */
void _spi_m_async_set_irq_state(struct _spi_async_dev *const device, const enum _spi_async_dev_cb_type type,
                                const bool state)
{
    215c:	b570      	push	{r4, r5, r6, lr}
    215e:	0004      	movs	r4, r0
    2160:	000e      	movs	r6, r1
    2162:	0015      	movs	r5, r2
	ASSERT(device);
    2164:	1e43      	subs	r3, r0, #1
    2166:	4198      	sbcs	r0, r3
    2168:	b2c0      	uxtb	r0, r0
    216a:	4a08      	ldr	r2, [pc, #32]	; (218c <_spi_m_async_set_irq_state+0x30>)
    216c:	4908      	ldr	r1, [pc, #32]	; (2190 <_spi_m_async_set_irq_state+0x34>)
    216e:	4b09      	ldr	r3, [pc, #36]	; (2194 <_spi_m_async_set_irq_state+0x38>)
    2170:	4798      	blx	r3

	if (SPI_DEV_CB_ERROR == type) {
    2172:	2e03      	cmp	r6, #3
    2174:	d000      	beq.n	2178 <_spi_m_async_set_irq_state+0x1c>
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
	}
}
    2176:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    2178:	6823      	ldr	r3, [r4, #0]
	if (value == 0x0) {
    217a:	2d00      	cmp	r5, #0
    217c:	d002      	beq.n	2184 <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    217e:	2280      	movs	r2, #128	; 0x80
    2180:	759a      	strb	r2, [r3, #22]
}
    2182:	e7f8      	b.n	2176 <_spi_m_async_set_irq_state+0x1a>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    2184:	2280      	movs	r2, #128	; 0x80
    2186:	751a      	strb	r2, [r3, #20]
    2188:	e7f5      	b.n	2176 <_spi_m_async_set_irq_state+0x1a>
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	00000ba7 	.word	0x00000ba7
    2190:	0000487c 	.word	0x0000487c
    2194:	00001999 	.word	0x00001999

00002198 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    2198:	4b0e      	ldr	r3, [pc, #56]	; (21d4 <_sysctrl_init_sources+0x3c>)
    219a:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    219c:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    219e:	480e      	ldr	r0, [pc, #56]	; (21d8 <_sysctrl_init_sources+0x40>)
    21a0:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    21a2:	0f89      	lsrs	r1, r1, #30
    21a4:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    21a6:	480d      	ldr	r0, [pc, #52]	; (21dc <_sysctrl_init_sources+0x44>)
    21a8:	4301      	orrs	r1, r0
    21aa:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    21ac:	621a      	str	r2, [r3, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    21ae:	699a      	ldr	r2, [r3, #24]
	((Sysctrl *)hw)->OSC32K.reg = data;
    21b0:	220a      	movs	r2, #10
    21b2:	619a      	str	r2, [r3, #24]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    21b4:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    21b6:	3a06      	subs	r2, #6
    21b8:	68cb      	ldr	r3, [r1, #12]
    21ba:	421a      	tst	r2, r3
    21bc:	d0fc      	beq.n	21b8 <_sysctrl_init_sources+0x20>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    21be:	4905      	ldr	r1, [pc, #20]	; (21d4 <_sysctrl_init_sources+0x3c>)
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    21c0:	2208      	movs	r2, #8
    21c2:	68cb      	ldr	r3, [r1, #12]
    21c4:	421a      	tst	r2, r3
    21c6:	d0fc      	beq.n	21c2 <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    21c8:	4a02      	ldr	r2, [pc, #8]	; (21d4 <_sysctrl_init_sources+0x3c>)
    21ca:	6a13      	ldr	r3, [r2, #32]
    21cc:	2180      	movs	r1, #128	; 0x80
    21ce:	430b      	orrs	r3, r1
    21d0:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    21d2:	4770      	bx	lr
    21d4:	40000800 	.word	0x40000800
    21d8:	0fff0000 	.word	0x0fff0000
    21dc:	00000302 	.word	0x00000302

000021e0 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    21e0:	2202      	movs	r2, #2
    21e2:	4b19      	ldr	r3, [pc, #100]	; (2248 <_sysctrl_init_referenced_generators+0x68>)
    21e4:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    21e6:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    21e8:	320e      	adds	r2, #14
    21ea:	68cb      	ldr	r3, [r1, #12]
    21ec:	421a      	tst	r2, r3
    21ee:	d0fc      	beq.n	21ea <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    21f0:	4a16      	ldr	r2, [pc, #88]	; (224c <_sysctrl_init_referenced_generators+0x6c>)
    21f2:	4b15      	ldr	r3, [pc, #84]	; (2248 <_sysctrl_init_referenced_generators+0x68>)
    21f4:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    21f6:	4b16      	ldr	r3, [pc, #88]	; (2250 <_sysctrl_init_referenced_generators+0x70>)
    21f8:	681b      	ldr	r3, [r3, #0]
    21fa:	0e9b      	lsrs	r3, r3, #26
    21fc:	2b3f      	cmp	r3, #63	; 0x3f
    21fe:	d01a      	beq.n	2236 <_sysctrl_init_referenced_generators+0x56>
    2200:	029b      	lsls	r3, r3, #10
    2202:	2280      	movs	r2, #128	; 0x80
    2204:	0092      	lsls	r2, r2, #2
    2206:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    2208:	4a0f      	ldr	r2, [pc, #60]	; (2248 <_sysctrl_init_referenced_generators+0x68>)
    220a:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    220c:	2393      	movs	r3, #147	; 0x93
    220e:	005b      	lsls	r3, r3, #1
    2210:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    2212:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    2214:	075b      	lsls	r3, r3, #29
    2216:	d511      	bpl.n	223c <_sysctrl_init_referenced_generators+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2218:	0011      	movs	r1, r2
	tmp &= mask;
    221a:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    221c:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    221e:	421a      	tst	r2, r3
    2220:	d0fc      	beq.n	221c <_sysctrl_init_referenced_generators+0x3c>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    2222:	4a09      	ldr	r2, [pc, #36]	; (2248 <_sysctrl_init_referenced_generators+0x68>)
    2224:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2226:	2180      	movs	r1, #128	; 0x80
    2228:	430b      	orrs	r3, r1
    222a:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    222c:	4a09      	ldr	r2, [pc, #36]	; (2254 <_sysctrl_init_referenced_generators+0x74>)
    222e:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    2230:	09db      	lsrs	r3, r3, #7
    2232:	d1fc      	bne.n	222e <_sysctrl_init_referenced_generators+0x4e>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    2234:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    2236:	23fc      	movs	r3, #252	; 0xfc
    2238:	01db      	lsls	r3, r3, #7
    223a:	e7e5      	b.n	2208 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    223c:	4902      	ldr	r1, [pc, #8]	; (2248 <_sysctrl_init_referenced_generators+0x68>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    223e:	2210      	movs	r2, #16
    2240:	68cb      	ldr	r3, [r1, #12]
    2242:	421a      	tst	r2, r3
    2244:	d0fc      	beq.n	2240 <_sysctrl_init_referenced_generators+0x60>
    2246:	e7ec      	b.n	2222 <_sysctrl_init_referenced_generators+0x42>
    2248:	40000800 	.word	0x40000800
    224c:	0401bb80 	.word	0x0401bb80
    2250:	00806024 	.word	0x00806024
    2254:	40000c00 	.word	0x40000c00

00002258 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2258:	4b02      	ldr	r3, [pc, #8]	; (2264 <_delay_init+0xc>)
    225a:	4a03      	ldr	r2, [pc, #12]	; (2268 <_delay_init+0x10>)
    225c:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    225e:	2205      	movs	r2, #5
    2260:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    2262:	4770      	bx	lr
    2264:	e000e010 	.word	0xe000e010
    2268:	00ffffff 	.word	0x00ffffff

0000226c <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    226c:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
    226e:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2270:	1e5e      	subs	r6, r3, #1
    2272:	b2f6      	uxtb	r6, r6
    2274:	2b00      	cmp	r3, #0
    2276:	d013      	beq.n	22a0 <_delay_cycles+0x34>
    2278:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
    227a:	4a0e      	ldr	r2, [pc, #56]	; (22b4 <_delay_cycles+0x48>)
    227c:	4d0e      	ldr	r5, [pc, #56]	; (22b8 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    227e:	2080      	movs	r0, #128	; 0x80
    2280:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
    2282:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    2284:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2286:	6813      	ldr	r3, [r2, #0]
    2288:	4203      	tst	r3, r0
    228a:	d0fc      	beq.n	2286 <_delay_cycles+0x1a>
	while (n--) {
    228c:	3c01      	subs	r4, #1
    228e:	b2e4      	uxtb	r4, r4
    2290:	2cff      	cmp	r4, #255	; 0xff
    2292:	d1f6      	bne.n	2282 <_delay_cycles+0x16>
    2294:	0633      	lsls	r3, r6, #24
    2296:	1af6      	subs	r6, r6, r3
    2298:	4b08      	ldr	r3, [pc, #32]	; (22bc <_delay_cycles+0x50>)
    229a:	469c      	mov	ip, r3
    229c:	4461      	add	r1, ip
    229e:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    22a0:	4b04      	ldr	r3, [pc, #16]	; (22b4 <_delay_cycles+0x48>)
    22a2:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    22a4:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    22a6:	0019      	movs	r1, r3
    22a8:	2280      	movs	r2, #128	; 0x80
    22aa:	0252      	lsls	r2, r2, #9
    22ac:	680b      	ldr	r3, [r1, #0]
    22ae:	4213      	tst	r3, r2
    22b0:	d0fc      	beq.n	22ac <_delay_cycles+0x40>
		;
}
    22b2:	bd70      	pop	{r4, r5, r6, pc}
    22b4:	e000e010 	.word	0xe000e010
    22b8:	00ffffff 	.word	0x00ffffff
    22bc:	ff000001 	.word	0xff000001

000022c0 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    22c0:	2000      	movs	r0, #0
    22c2:	4770      	bx	lr

000022c4 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    22c4:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    22c6:	7c83      	ldrb	r3, [r0, #18]
    22c8:	220f      	movs	r2, #15
    22ca:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    22cc:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    22ce:	3a08      	subs	r2, #8
    22d0:	400a      	ands	r2, r1
    22d2:	2a01      	cmp	r2, #1
    22d4:	d00b      	beq.n	22ee <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    22d6:	015a      	lsls	r2, r3, #5
    22d8:	4919      	ldr	r1, [pc, #100]	; (2340 <_usb_d_dev_handle_setup+0x7c>)
    22da:	468c      	mov	ip, r1
    22dc:	4462      	add	r2, ip
    22de:	2110      	movs	r1, #16
    22e0:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    22e2:	015b      	lsls	r3, r3, #5
    22e4:	4a17      	ldr	r2, [pc, #92]	; (2344 <_usb_d_dev_handle_setup+0x80>)
    22e6:	4694      	mov	ip, r2
    22e8:	4463      	add	r3, ip
    22ea:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    22ec:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    22ee:	064a      	lsls	r2, r1, #25
    22f0:	d50e      	bpl.n	2310 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    22f2:	7cc2      	ldrb	r2, [r0, #19]
    22f4:	2140      	movs	r1, #64	; 0x40
    22f6:	438a      	bics	r2, r1
    22f8:	74c2      	strb	r2, [r0, #19]
    22fa:	015a      	lsls	r2, r3, #5
    22fc:	4c12      	ldr	r4, [pc, #72]	; (2348 <_usb_d_dev_handle_setup+0x84>)
    22fe:	46a4      	mov	ip, r4
    2300:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2302:	2580      	movs	r5, #128	; 0x80
    2304:	2482      	movs	r4, #130	; 0x82
    2306:	0064      	lsls	r4, r4, #1
    2308:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    230a:	2406      	movs	r4, #6
    230c:	34ff      	adds	r4, #255	; 0xff
    230e:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    2310:	7cc2      	ldrb	r2, [r0, #19]
    2312:	2108      	movs	r1, #8
    2314:	438a      	bics	r2, r1
    2316:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    2318:	490c      	ldr	r1, [pc, #48]	; (234c <_usb_d_dev_handle_setup+0x88>)
    231a:	015a      	lsls	r2, r3, #5
    231c:	188c      	adds	r4, r1, r2
    231e:	2500      	movs	r5, #0
    2320:	72a5      	strb	r5, [r4, #10]
    2322:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2324:	0013      	movs	r3, r2
    2326:	4c06      	ldr	r4, [pc, #24]	; (2340 <_usb_d_dev_handle_setup+0x7c>)
    2328:	46a4      	mov	ip, r4
    232a:	4463      	add	r3, ip
    232c:	246f      	movs	r4, #111	; 0x6f
    232e:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2330:	4b04      	ldr	r3, [pc, #16]	; (2344 <_usb_d_dev_handle_setup+0x80>)
    2332:	469c      	mov	ip, r3
    2334:	4462      	add	r2, ip
    2336:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    2338:	7c80      	ldrb	r0, [r0, #18]
    233a:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    233c:	4798      	blx	r3
    233e:	e7d5      	b.n	22ec <_usb_d_dev_handle_setup+0x28>
    2340:	41005100 	.word	0x41005100
    2344:	41005108 	.word	0x41005108
    2348:	41005000 	.word	0x41005000
    234c:	200005b4 	.word	0x200005b4

00002350 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    2350:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    2352:	2220      	movs	r2, #32
    2354:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2356:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2358:	7c81      	ldrb	r1, [r0, #18]
    235a:	230f      	movs	r3, #15
    235c:	400b      	ands	r3, r1
    235e:	015b      	lsls	r3, r3, #5
    2360:	4905      	ldr	r1, [pc, #20]	; (2378 <_usb_d_dev_handle_stall+0x28>)
    2362:	468c      	mov	ip, r1
    2364:	4463      	add	r3, ip
    2366:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    2368:	6882      	ldr	r2, [r0, #8]
    236a:	7c80      	ldrb	r0, [r0, #18]
    236c:	4b03      	ldr	r3, [pc, #12]	; (237c <_usb_d_dev_handle_stall+0x2c>)
    236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2370:	2101      	movs	r1, #1
    2372:	4798      	blx	r3
}
    2374:	bd10      	pop	{r4, pc}
    2376:	46c0      	nop			; (mov r8, r8)
    2378:	41005108 	.word	0x41005108
    237c:	200005b4 	.word	0x200005b4

00002380 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    2380:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2382:	7c83      	ldrb	r3, [r0, #18]
    2384:	2bff      	cmp	r3, #255	; 0xff
    2386:	d002      	beq.n	238e <_usb_d_dev_trans_done+0xe>
    2388:	7cc2      	ldrb	r2, [r0, #19]
    238a:	0652      	lsls	r2, r2, #25
    238c:	d400      	bmi.n	2390 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    238e:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    2390:	7cc2      	ldrb	r2, [r0, #19]
    2392:	2440      	movs	r4, #64	; 0x40
    2394:	43a2      	bics	r2, r4
    2396:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    2398:	6882      	ldr	r2, [r0, #8]
    239a:	4802      	ldr	r0, [pc, #8]	; (23a4 <_usb_d_dev_trans_done+0x24>)
    239c:	6f04      	ldr	r4, [r0, #112]	; 0x70
    239e:	0018      	movs	r0, r3
    23a0:	47a0      	blx	r4
    23a2:	e7f4      	b.n	238e <_usb_d_dev_trans_done+0xe>
    23a4:	200005b4 	.word	0x200005b4

000023a8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    23a8:	b530      	push	{r4, r5, lr}
    23aa:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    23ac:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    23ae:	ac01      	add	r4, sp, #4
    23b0:	2525      	movs	r5, #37	; 0x25
    23b2:	7025      	strb	r5, [r4, #0]
    23b4:	3525      	adds	r5, #37	; 0x25
    23b6:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    23b8:	2bff      	cmp	r3, #255	; 0xff
    23ba:	d01b      	beq.n	23f4 <_usb_d_dev_trans_stop+0x4c>
    23bc:	7cc4      	ldrb	r4, [r0, #19]
    23be:	0664      	lsls	r4, r4, #25
    23c0:	d518      	bpl.n	23f4 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    23c2:	240f      	movs	r4, #15
    23c4:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    23c6:	2900      	cmp	r1, #0
    23c8:	d016      	beq.n	23f8 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    23ca:	015c      	lsls	r4, r3, #5
    23cc:	4d0e      	ldr	r5, [pc, #56]	; (2408 <_usb_d_dev_trans_stop+0x60>)
    23ce:	46ac      	mov	ip, r5
    23d0:	4464      	add	r4, ip
    23d2:	2580      	movs	r5, #128	; 0x80
    23d4:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    23d6:	ac01      	add	r4, sp, #4
    23d8:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    23da:	0159      	lsls	r1, r3, #5
    23dc:	4d0a      	ldr	r5, [pc, #40]	; (2408 <_usb_d_dev_trans_stop+0x60>)
    23de:	46ac      	mov	ip, r5
    23e0:	4461      	add	r1, ip
    23e2:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    23e4:	015b      	lsls	r3, r3, #5
    23e6:	4909      	ldr	r1, [pc, #36]	; (240c <_usb_d_dev_trans_stop+0x64>)
    23e8:	468c      	mov	ip, r1
    23ea:	4463      	add	r3, ip
    23ec:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    23ee:	0011      	movs	r1, r2
    23f0:	4b07      	ldr	r3, [pc, #28]	; (2410 <_usb_d_dev_trans_stop+0x68>)
    23f2:	4798      	blx	r3
}
    23f4:	b003      	add	sp, #12
    23f6:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    23f8:	015c      	lsls	r4, r3, #5
    23fa:	4d03      	ldr	r5, [pc, #12]	; (2408 <_usb_d_dev_trans_stop+0x60>)
    23fc:	46ac      	mov	ip, r5
    23fe:	4464      	add	r4, ip
    2400:	2540      	movs	r5, #64	; 0x40
    2402:	7165      	strb	r5, [r4, #5]
    2404:	e7e7      	b.n	23d6 <_usb_d_dev_trans_stop+0x2e>
    2406:	46c0      	nop			; (mov r8, r8)
    2408:	41005100 	.word	0x41005100
    240c:	41005108 	.word	0x41005108
    2410:	00002381 	.word	0x00002381

00002414 <_usb_d_dev_handle_trfail>:
{
    2414:	b570      	push	{r4, r5, r6, lr}
    2416:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    2418:	7c83      	ldrb	r3, [r0, #18]
    241a:	220f      	movs	r2, #15
    241c:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    241e:	aa01      	add	r2, sp, #4
    2420:	2404      	movs	r4, #4
    2422:	7014      	strb	r4, [r2, #0]
    2424:	3404      	adds	r4, #4
    2426:	7054      	strb	r4, [r2, #1]
    2428:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    242a:	2900      	cmp	r1, #0
    242c:	d031      	beq.n	2492 <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    242e:	001a      	movs	r2, r3
    2430:	3208      	adds	r2, #8
    2432:	0152      	lsls	r2, r2, #5
    2434:	4c32      	ldr	r4, [pc, #200]	; (2500 <_usb_d_dev_handle_trfail+0xec>)
    2436:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    2438:	0664      	lsls	r4, r4, #25
    243a:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    243c:	010a      	lsls	r2, r1, #4
    243e:	1952      	adds	r2, r2, r5
    2440:	4d30      	ldr	r5, [pc, #192]	; (2504 <_usb_d_dev_handle_trfail+0xf0>)
    2442:	18aa      	adds	r2, r5, r2
    2444:	7a95      	ldrb	r5, [r2, #10]
    2446:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2448:	2c02      	cmp	r4, #2
    244a:	d02a      	beq.n	24a2 <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    244c:	07ac      	lsls	r4, r5, #30
    244e:	d541      	bpl.n	24d4 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2450:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    2452:	7a94      	ldrb	r4, [r2, #10]
    2454:	2602      	movs	r6, #2
    2456:	43b4      	bics	r4, r6
    2458:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    245a:	aa01      	add	r2, sp, #4
    245c:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    245e:	015a      	lsls	r2, r3, #5
    2460:	4e29      	ldr	r6, [pc, #164]	; (2508 <_usb_d_dev_handle_trfail+0xf4>)
    2462:	46b4      	mov	ip, r6
    2464:	4462      	add	r2, ip
    2466:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2468:	015b      	lsls	r3, r3, #5
    246a:	4a28      	ldr	r2, [pc, #160]	; (250c <_usb_d_dev_handle_trfail+0xf8>)
    246c:	4694      	mov	ip, r2
    246e:	4463      	add	r3, ip
    2470:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    2472:	2307      	movs	r3, #7
    2474:	402b      	ands	r3, r5
    2476:	2b01      	cmp	r3, #1
    2478:	d13f      	bne.n	24fa <_usb_d_dev_handle_trfail+0xe6>
    247a:	7cc3      	ldrb	r3, [r0, #19]
    247c:	065b      	lsls	r3, r3, #25
    247e:	d53c      	bpl.n	24fa <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2480:	7cc3      	ldrb	r3, [r0, #19]
    2482:	09db      	lsrs	r3, r3, #7
    2484:	4299      	cmp	r1, r3
    2486:	d038      	beq.n	24fa <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    2488:	2200      	movs	r2, #0
    248a:	0019      	movs	r1, r3
    248c:	4b20      	ldr	r3, [pc, #128]	; (2510 <_usb_d_dev_handle_trfail+0xfc>)
    248e:	4798      	blx	r3
    2490:	e033      	b.n	24fa <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2492:	001a      	movs	r2, r3
    2494:	3208      	adds	r2, #8
    2496:	0152      	lsls	r2, r2, #5
    2498:	4c19      	ldr	r4, [pc, #100]	; (2500 <_usb_d_dev_handle_trfail+0xec>)
    249a:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    249c:	2207      	movs	r2, #7
    249e:	4014      	ands	r4, r2
    24a0:	e7cc      	b.n	243c <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    24a2:	07ec      	lsls	r4, r5, #31
    24a4:	d5d2      	bpl.n	244c <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    24a6:	7a94      	ldrb	r4, [r2, #10]
    24a8:	2501      	movs	r5, #1
    24aa:	43ac      	bics	r4, r5
    24ac:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    24ae:	aa01      	add	r2, sp, #4
    24b0:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    24b2:	015a      	lsls	r2, r3, #5
    24b4:	4d14      	ldr	r5, [pc, #80]	; (2508 <_usb_d_dev_handle_trfail+0xf4>)
    24b6:	46ac      	mov	ip, r5
    24b8:	4462      	add	r2, ip
    24ba:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    24bc:	015b      	lsls	r3, r3, #5
    24be:	4a13      	ldr	r2, [pc, #76]	; (250c <_usb_d_dev_handle_trfail+0xf8>)
    24c0:	4694      	mov	ip, r2
    24c2:	4463      	add	r3, ip
    24c4:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    24c6:	1e4b      	subs	r3, r1, #1
    24c8:	4199      	sbcs	r1, r3
    24ca:	b2c9      	uxtb	r1, r1
    24cc:	2204      	movs	r2, #4
    24ce:	4b10      	ldr	r3, [pc, #64]	; (2510 <_usb_d_dev_handle_trfail+0xfc>)
    24d0:	4798      	blx	r3
    24d2:	e012      	b.n	24fa <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    24d4:	005a      	lsls	r2, r3, #1
    24d6:	1852      	adds	r2, r2, r1
    24d8:	0112      	lsls	r2, r2, #4
    24da:	480a      	ldr	r0, [pc, #40]	; (2504 <_usb_d_dev_handle_trfail+0xf0>)
    24dc:	1882      	adds	r2, r0, r2
    24de:	2000      	movs	r0, #0
    24e0:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    24e2:	aa01      	add	r2, sp, #4
    24e4:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    24e6:	015a      	lsls	r2, r3, #5
    24e8:	4807      	ldr	r0, [pc, #28]	; (2508 <_usb_d_dev_handle_trfail+0xf4>)
    24ea:	4684      	mov	ip, r0
    24ec:	4462      	add	r2, ip
    24ee:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    24f0:	015b      	lsls	r3, r3, #5
    24f2:	4a06      	ldr	r2, [pc, #24]	; (250c <_usb_d_dev_handle_trfail+0xf8>)
    24f4:	4694      	mov	ip, r2
    24f6:	4463      	add	r3, ip
    24f8:	7019      	strb	r1, [r3, #0]
}
    24fa:	b002      	add	sp, #8
    24fc:	bd70      	pop	{r4, r5, r6, pc}
    24fe:	46c0      	nop			; (mov r8, r8)
    2500:	41005000 	.word	0x41005000
    2504:	200005b4 	.word	0x200005b4
    2508:	41005100 	.word	0x41005100
    250c:	41005108 	.word	0x41005108
    2510:	000023a9 	.word	0x000023a9

00002514 <_usb_d_dev_reset_epts>:
{
    2514:	b5f0      	push	{r4, r5, r6, r7, lr}
    2516:	46c6      	mov	lr, r8
    2518:	b500      	push	{lr}
    251a:	4d0c      	ldr	r5, [pc, #48]	; (254c <_usb_d_dev_reset_epts+0x38>)
    251c:	002c      	movs	r4, r5
    251e:	3474      	adds	r4, #116	; 0x74
    2520:	3529      	adds	r5, #41	; 0x29
    2522:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2524:	4b0a      	ldr	r3, [pc, #40]	; (2550 <_usb_d_dev_reset_epts+0x3c>)
    2526:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    2528:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    252a:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    252c:	2103      	movs	r1, #3
    252e:	0020      	movs	r0, r4
    2530:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    2532:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    2534:	74e6      	strb	r6, [r4, #19]
    2536:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2538:	42ac      	cmp	r4, r5
    253a:	d1f7      	bne.n	252c <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    253c:	2260      	movs	r2, #96	; 0x60
    253e:	2100      	movs	r1, #0
    2540:	4802      	ldr	r0, [pc, #8]	; (254c <_usb_d_dev_reset_epts+0x38>)
    2542:	4b04      	ldr	r3, [pc, #16]	; (2554 <_usb_d_dev_reset_epts+0x40>)
    2544:	4798      	blx	r3
}
    2546:	bc04      	pop	{r2}
    2548:	4690      	mov	r8, r2
    254a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    254c:	200005b4 	.word	0x200005b4
    2550:	00002381 	.word	0x00002381
    2554:	000045a9 	.word	0x000045a9

00002558 <_usb_d_dev_in_next>:
{
    2558:	b5f0      	push	{r4, r5, r6, r7, lr}
    255a:	46c6      	mov	lr, r8
    255c:	b500      	push	{lr}
    255e:	0004      	movs	r4, r0
    2560:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    2562:	7c83      	ldrb	r3, [r0, #18]
    2564:	250f      	movs	r5, #15
    2566:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2568:	2900      	cmp	r1, #0
    256a:	d100      	bne.n	256e <_usb_d_dev_in_next+0x16>
    256c:	e0aa      	b.n	26c4 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    256e:	016a      	lsls	r2, r5, #5
    2570:	4b5a      	ldr	r3, [pc, #360]	; (26dc <_usb_d_dev_in_next+0x184>)
    2572:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2574:	6958      	ldr	r0, [r3, #20]
    2576:	0480      	lsls	r0, r0, #18
    2578:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    257a:	8a23      	ldrh	r3, [r4, #16]
    257c:	4a58      	ldr	r2, [pc, #352]	; (26e0 <_usb_d_dev_in_next+0x188>)
    257e:	4293      	cmp	r3, r2
    2580:	d100      	bne.n	2584 <_usb_d_dev_in_next+0x2c>
    2582:	e09a      	b.n	26ba <_usb_d_dev_in_next+0x162>
    2584:	3b01      	subs	r3, #1
    2586:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2588:	7ce3      	ldrb	r3, [r4, #19]
    258a:	2707      	movs	r7, #7
    258c:	401f      	ands	r7, r3
	if (isr) {
    258e:	2e00      	cmp	r6, #0
    2590:	d005      	beq.n	259e <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2592:	016b      	lsls	r3, r5, #5
    2594:	4953      	ldr	r1, [pc, #332]	; (26e4 <_usb_d_dev_in_next+0x18c>)
    2596:	468c      	mov	ip, r1
    2598:	4463      	add	r3, ip
    259a:	2102      	movs	r1, #2
    259c:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    259e:	68a3      	ldr	r3, [r4, #8]
    25a0:	18c1      	adds	r1, r0, r3
    25a2:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    25a4:	6863      	ldr	r3, [r4, #4]
    25a6:	4299      	cmp	r1, r3
    25a8:	d24a      	bcs.n	2640 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    25aa:	1a5b      	subs	r3, r3, r1
    25ac:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    25ae:	7ce2      	ldrb	r2, [r4, #19]
    25b0:	0692      	lsls	r2, r2, #26
    25b2:	d535      	bpl.n	2620 <_usb_d_dev_in_next+0xc8>
    25b4:	8a22      	ldrh	r2, [r4, #16]
    25b6:	1c10      	adds	r0, r2, #0
    25b8:	b292      	uxth	r2, r2
    25ba:	429a      	cmp	r2, r3
    25bc:	d900      	bls.n	25c0 <_usb_d_dev_in_next+0x68>
    25be:	1c18      	adds	r0, r3, #0
    25c0:	b283      	uxth	r3, r0
    25c2:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    25c4:	6823      	ldr	r3, [r4, #0]
    25c6:	469c      	mov	ip, r3
    25c8:	4461      	add	r1, ip
    25ca:	4642      	mov	r2, r8
    25cc:	68e0      	ldr	r0, [r4, #12]
    25ce:	4b46      	ldr	r3, [pc, #280]	; (26e8 <_usb_d_dev_in_next+0x190>)
    25d0:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    25d2:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    25d4:	016a      	lsls	r2, r5, #5
    25d6:	4b41      	ldr	r3, [pc, #260]	; (26dc <_usb_d_dev_in_next+0x184>)
    25d8:	189b      	adds	r3, r3, r2
    25da:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    25dc:	016a      	lsls	r2, r5, #5
    25de:	4b3f      	ldr	r3, [pc, #252]	; (26dc <_usb_d_dev_in_next+0x184>)
    25e0:	189b      	adds	r3, r3, r2
    25e2:	695a      	ldr	r2, [r3, #20]
    25e4:	4641      	mov	r1, r8
    25e6:	0489      	lsls	r1, r1, #18
    25e8:	0c89      	lsrs	r1, r1, #18
    25ea:	0b92      	lsrs	r2, r2, #14
    25ec:	0392      	lsls	r2, r2, #14
    25ee:	430a      	orrs	r2, r1
    25f0:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    25f2:	695a      	ldr	r2, [r3, #20]
    25f4:	493d      	ldr	r1, [pc, #244]	; (26ec <_usb_d_dev_in_next+0x194>)
    25f6:	400a      	ands	r2, r1
    25f8:	615a      	str	r2, [r3, #20]
	if (!isr) {
    25fa:	2e00      	cmp	r6, #0
    25fc:	d107      	bne.n	260e <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    25fe:	2f01      	cmp	r7, #1
    2600:	d059      	beq.n	26b6 <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    2602:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2604:	016b      	lsls	r3, r5, #5
    2606:	493a      	ldr	r1, [pc, #232]	; (26f0 <_usb_d_dev_in_next+0x198>)
    2608:	468c      	mov	ip, r1
    260a:	4463      	add	r3, ip
    260c:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    260e:	016d      	lsls	r5, r5, #5
    2610:	4b34      	ldr	r3, [pc, #208]	; (26e4 <_usb_d_dev_in_next+0x18c>)
    2612:	469c      	mov	ip, r3
    2614:	4465      	add	r5, ip
    2616:	2380      	movs	r3, #128	; 0x80
    2618:	716b      	strb	r3, [r5, #5]
}
    261a:	bc04      	pop	{r2}
    261c:	4690      	mov	r8, r2
    261e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2620:	1c1a      	adds	r2, r3, #0
    2622:	2080      	movs	r0, #128	; 0x80
    2624:	0180      	lsls	r0, r0, #6
    2626:	4283      	cmp	r3, r0
    2628:	d901      	bls.n	262e <_usb_d_dev_in_next+0xd6>
    262a:	4b32      	ldr	r3, [pc, #200]	; (26f4 <_usb_d_dev_in_next+0x19c>)
    262c:	881a      	ldrh	r2, [r3, #0]
    262e:	b293      	uxth	r3, r2
    2630:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2632:	6823      	ldr	r3, [r4, #0]
    2634:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    2636:	016a      	lsls	r2, r5, #5
    2638:	4b28      	ldr	r3, [pc, #160]	; (26dc <_usb_d_dev_in_next+0x184>)
    263a:	189b      	adds	r3, r3, r2
    263c:	6119      	str	r1, [r3, #16]
    263e:	e7cd      	b.n	25dc <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    2640:	7ce3      	ldrb	r3, [r4, #19]
    2642:	06db      	lsls	r3, r3, #27
    2644:	d50f      	bpl.n	2666 <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    2646:	7ce3      	ldrb	r3, [r4, #19]
    2648:	2210      	movs	r2, #16
    264a:	4393      	bics	r3, r2
    264c:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    264e:	016a      	lsls	r2, r5, #5
    2650:	4b22      	ldr	r3, [pc, #136]	; (26dc <_usb_d_dev_in_next+0x184>)
    2652:	189b      	adds	r3, r3, r2
    2654:	695a      	ldr	r2, [r3, #20]
    2656:	0b92      	lsrs	r2, r2, #14
    2658:	0392      	lsls	r2, r2, #14
    265a:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    265c:	695a      	ldr	r2, [r3, #20]
    265e:	4923      	ldr	r1, [pc, #140]	; (26ec <_usb_d_dev_in_next+0x194>)
    2660:	400a      	ands	r2, r1
    2662:	615a      	str	r2, [r3, #20]
    2664:	e7c9      	b.n	25fa <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    2666:	2f01      	cmp	r7, #1
    2668:	d00e      	beq.n	2688 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    266a:	016d      	lsls	r5, r5, #5
    266c:	4b22      	ldr	r3, [pc, #136]	; (26f8 <_usb_d_dev_in_next+0x1a0>)
    266e:	469c      	mov	ip, r3
    2670:	4465      	add	r5, ip
    2672:	234a      	movs	r3, #74	; 0x4a
    2674:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    2676:	8a21      	ldrh	r1, [r4, #16]
    2678:	4002      	ands	r2, r0
    267a:	4291      	cmp	r1, r2
    267c:	d00b      	beq.n	2696 <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    267e:	2100      	movs	r1, #0
    2680:	0020      	movs	r0, r4
    2682:	4b1e      	ldr	r3, [pc, #120]	; (26fc <_usb_d_dev_in_next+0x1a4>)
    2684:	4798      	blx	r3
	return;
    2686:	e7c8      	b.n	261a <_usb_d_dev_in_next+0xc2>
    2688:	016d      	lsls	r5, r5, #5
    268a:	4b1b      	ldr	r3, [pc, #108]	; (26f8 <_usb_d_dev_in_next+0x1a0>)
    268c:	469c      	mov	ip, r3
    268e:	4465      	add	r5, ip
    2690:	234b      	movs	r3, #75	; 0x4b
    2692:	702b      	strb	r3, [r5, #0]
    2694:	e7ef      	b.n	2676 <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    2696:	7ce3      	ldrb	r3, [r4, #19]
    2698:	2240      	movs	r2, #64	; 0x40
    269a:	4393      	bics	r3, r2
    269c:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    269e:	7ca0      	ldrb	r0, [r4, #18]
    26a0:	4b0e      	ldr	r3, [pc, #56]	; (26dc <_usb_d_dev_in_next+0x184>)
    26a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    26a4:	68a1      	ldr	r1, [r4, #8]
    26a6:	4798      	blx	r3
    26a8:	2800      	cmp	r0, #0
    26aa:	d1b6      	bne.n	261a <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    26ac:	7ce3      	ldrb	r3, [r4, #19]
    26ae:	2240      	movs	r2, #64	; 0x40
    26b0:	4313      	orrs	r3, r2
    26b2:	74e3      	strb	r3, [r4, #19]
    26b4:	e7e3      	b.n	267e <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    26b6:	224e      	movs	r2, #78	; 0x4e
    26b8:	e7a4      	b.n	2604 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    26ba:	7ce7      	ldrb	r7, [r4, #19]
    26bc:	2307      	movs	r3, #7
    26be:	401f      	ands	r7, r3
    26c0:	4a07      	ldr	r2, [pc, #28]	; (26e0 <_usb_d_dev_in_next+0x188>)
    26c2:	e766      	b.n	2592 <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    26c4:	8a03      	ldrh	r3, [r0, #16]
    26c6:	4a06      	ldr	r2, [pc, #24]	; (26e0 <_usb_d_dev_in_next+0x188>)
    26c8:	2000      	movs	r0, #0
    26ca:	4293      	cmp	r3, r2
    26cc:	d000      	beq.n	26d0 <_usb_d_dev_in_next+0x178>
    26ce:	e759      	b.n	2584 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    26d0:	7ce3      	ldrb	r3, [r4, #19]
    26d2:	2707      	movs	r7, #7
    26d4:	401f      	ands	r7, r3
    26d6:	2000      	movs	r0, #0
    26d8:	4a01      	ldr	r2, [pc, #4]	; (26e0 <_usb_d_dev_in_next+0x188>)
    26da:	e760      	b.n	259e <_usb_d_dev_in_next+0x46>
    26dc:	200005b4 	.word	0x200005b4
    26e0:	000003ff 	.word	0x000003ff
    26e4:	41005100 	.word	0x41005100
    26e8:	00004525 	.word	0x00004525
    26ec:	f0003fff 	.word	0xf0003fff
    26f0:	41005109 	.word	0x41005109
    26f4:	00004898 	.word	0x00004898
    26f8:	41005108 	.word	0x41005108
    26fc:	00002381 	.word	0x00002381

00002700 <_usb_d_dev_out_next>:
{
    2700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2702:	46de      	mov	lr, fp
    2704:	4657      	mov	r7, sl
    2706:	464e      	mov	r6, r9
    2708:	4645      	mov	r5, r8
    270a:	b5e0      	push	{r5, r6, r7, lr}
    270c:	0004      	movs	r4, r0
    270e:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    2710:	7c83      	ldrb	r3, [r0, #18]
    2712:	250f      	movs	r5, #15
    2714:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    2716:	2900      	cmp	r1, #0
    2718:	d057      	beq.n	27ca <_usb_d_dev_out_next+0xca>
    271a:	016a      	lsls	r2, r5, #5
    271c:	4b7d      	ldr	r3, [pc, #500]	; (2914 <_usb_d_dev_out_next+0x214>)
    271e:	189b      	adds	r3, r3, r2
    2720:	685a      	ldr	r2, [r3, #4]
    2722:	0112      	lsls	r2, r2, #4
    2724:	0c92      	lsrs	r2, r2, #18
    2726:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    2728:	685f      	ldr	r7, [r3, #4]
    272a:	04bf      	lsls	r7, r7, #18
    272c:	0cbf      	lsrs	r7, r7, #18
    272e:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2730:	8a06      	ldrh	r6, [r0, #16]
    2732:	4b79      	ldr	r3, [pc, #484]	; (2918 <_usb_d_dev_out_next+0x218>)
    2734:	429e      	cmp	r6, r3
    2736:	d100      	bne.n	273a <_usb_d_dev_out_next+0x3a>
    2738:	e0cd      	b.n	28d6 <_usb_d_dev_out_next+0x1d6>
    273a:	3e01      	subs	r6, #1
    273c:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    273e:	465f      	mov	r7, fp
    2740:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2742:	7ce3      	ldrb	r3, [r4, #19]
    2744:	2207      	movs	r2, #7
    2746:	401a      	ands	r2, r3
    2748:	4691      	mov	r9, r2
	if (isr) {
    274a:	4643      	mov	r3, r8
    274c:	2b00      	cmp	r3, #0
    274e:	d005      	beq.n	275c <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2750:	016b      	lsls	r3, r5, #5
    2752:	4a72      	ldr	r2, [pc, #456]	; (291c <_usb_d_dev_out_next+0x21c>)
    2754:	4694      	mov	ip, r2
    2756:	4463      	add	r3, ip
    2758:	2201      	movs	r2, #1
    275a:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    275c:	7ce3      	ldrb	r3, [r4, #19]
    275e:	069b      	lsls	r3, r3, #26
    2760:	d50f      	bpl.n	2782 <_usb_d_dev_out_next+0x82>
    2762:	6863      	ldr	r3, [r4, #4]
    2764:	2b00      	cmp	r3, #0
    2766:	d039      	beq.n	27dc <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    2768:	68a0      	ldr	r0, [r4, #8]
    276a:	1a1b      	subs	r3, r3, r0
    276c:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    276e:	6822      	ldr	r2, [r4, #0]
    2770:	4694      	mov	ip, r2
    2772:	4460      	add	r0, ip
    2774:	68e1      	ldr	r1, [r4, #12]
    2776:	001a      	movs	r2, r3
    2778:	42bb      	cmp	r3, r7
    277a:	d900      	bls.n	277e <_usb_d_dev_out_next+0x7e>
    277c:	003a      	movs	r2, r7
    277e:	4b68      	ldr	r3, [pc, #416]	; (2920 <_usb_d_dev_out_next+0x220>)
    2780:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2782:	6863      	ldr	r3, [r4, #4]
    2784:	2b00      	cmp	r3, #0
    2786:	d029      	beq.n	27dc <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    2788:	4642      	mov	r2, r8
    278a:	2a00      	cmp	r2, #0
    278c:	d042      	beq.n	2814 <_usb_d_dev_out_next+0x114>
    278e:	8a22      	ldrh	r2, [r4, #16]
    2790:	42ba      	cmp	r2, r7
    2792:	d93f      	bls.n	2814 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    2794:	7ce3      	ldrb	r3, [r4, #19]
    2796:	2210      	movs	r2, #16
    2798:	4393      	bics	r3, r2
    279a:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    279c:	68a3      	ldr	r3, [r4, #8]
    279e:	445b      	add	r3, fp
    27a0:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    27a2:	464b      	mov	r3, r9
    27a4:	2b01      	cmp	r3, #1
    27a6:	d100      	bne.n	27aa <_usb_d_dev_out_next+0xaa>
    27a8:	e087      	b.n	28ba <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    27aa:	016b      	lsls	r3, r5, #5
    27ac:	4a5d      	ldr	r2, [pc, #372]	; (2924 <_usb_d_dev_out_next+0x224>)
    27ae:	4694      	mov	ip, r2
    27b0:	4463      	add	r3, ip
    27b2:	2225      	movs	r2, #37	; 0x25
    27b4:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    27b6:	2d00      	cmp	r5, #0
    27b8:	d102      	bne.n	27c0 <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    27ba:	4b56      	ldr	r3, [pc, #344]	; (2914 <_usb_d_dev_out_next+0x214>)
    27bc:	68e2      	ldr	r2, [r4, #12]
    27be:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    27c0:	2100      	movs	r1, #0
    27c2:	0020      	movs	r0, r4
    27c4:	4b58      	ldr	r3, [pc, #352]	; (2928 <_usb_d_dev_out_next+0x228>)
    27c6:	4798      	blx	r3
	return;
    27c8:	e059      	b.n	287e <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    27ca:	8a06      	ldrh	r6, [r0, #16]
    27cc:	4b52      	ldr	r3, [pc, #328]	; (2918 <_usb_d_dev_out_next+0x218>)
    27ce:	429e      	cmp	r6, r3
    27d0:	d100      	bne.n	27d4 <_usb_d_dev_out_next+0xd4>
    27d2:	e08e      	b.n	28f2 <_usb_d_dev_out_next+0x1f2>
    27d4:	2300      	movs	r3, #0
    27d6:	469b      	mov	fp, r3
    27d8:	469a      	mov	sl, r3
    27da:	e7ae      	b.n	273a <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    27dc:	7ce3      	ldrb	r3, [r4, #19]
    27de:	06db      	lsls	r3, r3, #27
    27e0:	d400      	bmi.n	27e4 <_usb_d_dev_out_next+0xe4>
    27e2:	e07f      	b.n	28e4 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    27e4:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    27e6:	2210      	movs	r2, #16
    27e8:	4393      	bics	r3, r2
    27ea:	2220      	movs	r2, #32
    27ec:	4313      	orrs	r3, r2
    27ee:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    27f0:	4a48      	ldr	r2, [pc, #288]	; (2914 <_usb_d_dev_out_next+0x214>)
    27f2:	016b      	lsls	r3, r5, #5
    27f4:	68e1      	ldr	r1, [r4, #12]
    27f6:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    27f8:	8a21      	ldrh	r1, [r4, #16]
    27fa:	18d3      	adds	r3, r2, r3
    27fc:	685a      	ldr	r2, [r3, #4]
    27fe:	0489      	lsls	r1, r1, #18
    2800:	0909      	lsrs	r1, r1, #4
    2802:	484a      	ldr	r0, [pc, #296]	; (292c <_usb_d_dev_out_next+0x22c>)
    2804:	4002      	ands	r2, r0
    2806:	430a      	orrs	r2, r1
    2808:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    280a:	685a      	ldr	r2, [r3, #4]
    280c:	0b92      	lsrs	r2, r2, #14
    280e:	0392      	lsls	r2, r2, #14
    2810:	605a      	str	r2, [r3, #4]
    2812:	e022      	b.n	285a <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    2814:	68a2      	ldr	r2, [r4, #8]
    2816:	4452      	add	r2, sl
    2818:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    281a:	4293      	cmp	r3, r2
    281c:	d9c1      	bls.n	27a2 <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    281e:	1a9b      	subs	r3, r3, r2
    2820:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    2822:	7ce1      	ldrb	r1, [r4, #19]
    2824:	0689      	lsls	r1, r1, #26
    2826:	d530      	bpl.n	288a <_usb_d_dev_out_next+0x18a>
    2828:	8a22      	ldrh	r2, [r4, #16]
    282a:	1c11      	adds	r1, r2, #0
    282c:	b292      	uxth	r2, r2
    282e:	429a      	cmp	r2, r3
    2830:	d900      	bls.n	2834 <_usb_d_dev_out_next+0x134>
    2832:	1c19      	adds	r1, r3, #0
    2834:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2836:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2838:	016a      	lsls	r2, r5, #5
    283a:	4936      	ldr	r1, [pc, #216]	; (2914 <_usb_d_dev_out_next+0x214>)
    283c:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    283e:	016a      	lsls	r2, r5, #5
    2840:	4934      	ldr	r1, [pc, #208]	; (2914 <_usb_d_dev_out_next+0x214>)
    2842:	1889      	adds	r1, r1, r2
    2844:	684a      	ldr	r2, [r1, #4]
    2846:	049b      	lsls	r3, r3, #18
    2848:	091b      	lsrs	r3, r3, #4
    284a:	4838      	ldr	r0, [pc, #224]	; (292c <_usb_d_dev_out_next+0x22c>)
    284c:	4002      	ands	r2, r0
    284e:	4313      	orrs	r3, r2
    2850:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2852:	684b      	ldr	r3, [r1, #4]
    2854:	0b9b      	lsrs	r3, r3, #14
    2856:	039b      	lsls	r3, r3, #14
    2858:	604b      	str	r3, [r1, #4]
	if (!isr) {
    285a:	4643      	mov	r3, r8
    285c:	2b00      	cmp	r3, #0
    285e:	d108      	bne.n	2872 <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    2860:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    2862:	464b      	mov	r3, r9
    2864:	2b01      	cmp	r3, #1
    2866:	d02f      	beq.n	28c8 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2868:	016b      	lsls	r3, r5, #5
    286a:	4931      	ldr	r1, [pc, #196]	; (2930 <_usb_d_dev_out_next+0x230>)
    286c:	468c      	mov	ip, r1
    286e:	4463      	add	r3, ip
    2870:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2872:	016d      	lsls	r5, r5, #5
    2874:	4b29      	ldr	r3, [pc, #164]	; (291c <_usb_d_dev_out_next+0x21c>)
    2876:	469c      	mov	ip, r3
    2878:	4465      	add	r5, ip
    287a:	2340      	movs	r3, #64	; 0x40
    287c:	712b      	strb	r3, [r5, #4]
}
    287e:	bc3c      	pop	{r2, r3, r4, r5}
    2880:	4690      	mov	r8, r2
    2882:	4699      	mov	r9, r3
    2884:	46a2      	mov	sl, r4
    2886:	46ab      	mov	fp, r5
    2888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    288a:	8a21      	ldrh	r1, [r4, #16]
    288c:	428b      	cmp	r3, r1
    288e:	d90a      	bls.n	28a6 <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    2890:	2180      	movs	r1, #128	; 0x80
    2892:	0189      	lsls	r1, r1, #6
    2894:	428b      	cmp	r3, r1
    2896:	d80d      	bhi.n	28b4 <_usb_d_dev_out_next+0x1b4>
    2898:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    289a:	6821      	ldr	r1, [r4, #0]
    289c:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    289e:	0169      	lsls	r1, r5, #5
    28a0:	481c      	ldr	r0, [pc, #112]	; (2914 <_usb_d_dev_out_next+0x214>)
    28a2:	500a      	str	r2, [r1, r0]
    28a4:	e7cb      	b.n	283e <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    28a6:	428b      	cmp	r3, r1
    28a8:	d2f7      	bcs.n	289a <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    28aa:	7ce1      	ldrb	r1, [r4, #19]
    28ac:	2020      	movs	r0, #32
    28ae:	4301      	orrs	r1, r0
    28b0:	74e1      	strb	r1, [r4, #19]
    28b2:	e7f2      	b.n	289a <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    28b4:	2380      	movs	r3, #128	; 0x80
    28b6:	019b      	lsls	r3, r3, #6
    28b8:	e7ef      	b.n	289a <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    28ba:	016b      	lsls	r3, r5, #5
    28bc:	4a19      	ldr	r2, [pc, #100]	; (2924 <_usb_d_dev_out_next+0x224>)
    28be:	4694      	mov	ip, r2
    28c0:	4463      	add	r3, ip
    28c2:	222d      	movs	r2, #45	; 0x2d
    28c4:	701a      	strb	r2, [r3, #0]
    28c6:	e776      	b.n	27b6 <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    28c8:	016a      	lsls	r2, r5, #5
    28ca:	4b12      	ldr	r3, [pc, #72]	; (2914 <_usb_d_dev_out_next+0x214>)
    28cc:	189b      	adds	r3, r3, r2
    28ce:	2200      	movs	r2, #0
    28d0:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    28d2:	322d      	adds	r2, #45	; 0x2d
    28d4:	e7c8      	b.n	2868 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    28d6:	05bf      	lsls	r7, r7, #22
    28d8:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    28da:	7cc3      	ldrb	r3, [r0, #19]
    28dc:	2207      	movs	r2, #7
    28de:	401a      	ands	r2, r3
    28e0:	4691      	mov	r9, r2
    28e2:	e735      	b.n	2750 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    28e4:	4643      	mov	r3, r8
    28e6:	2b00      	cmp	r3, #0
    28e8:	d10c      	bne.n	2904 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    28ea:	68a3      	ldr	r3, [r4, #8]
    28ec:	4453      	add	r3, sl
    28ee:	60a3      	str	r3, [r4, #8]
    28f0:	e757      	b.n	27a2 <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    28f2:	7cc3      	ldrb	r3, [r0, #19]
    28f4:	2207      	movs	r2, #7
    28f6:	401a      	ands	r2, r3
    28f8:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    28fa:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    28fc:	2300      	movs	r3, #0
    28fe:	469b      	mov	fp, r3
    2900:	469a      	mov	sl, r3
    2902:	e72b      	b.n	275c <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    2904:	8a23      	ldrh	r3, [r4, #16]
    2906:	42bb      	cmp	r3, r7
    2908:	d900      	bls.n	290c <_usb_d_dev_out_next+0x20c>
    290a:	e743      	b.n	2794 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    290c:	68a3      	ldr	r3, [r4, #8]
    290e:	4453      	add	r3, sl
    2910:	60a3      	str	r3, [r4, #8]
    2912:	e746      	b.n	27a2 <_usb_d_dev_out_next+0xa2>
    2914:	200005b4 	.word	0x200005b4
    2918:	000003ff 	.word	0x000003ff
    291c:	41005100 	.word	0x41005100
    2920:	00004525 	.word	0x00004525
    2924:	41005108 	.word	0x41005108
    2928:	00002381 	.word	0x00002381
    292c:	f0003fff 	.word	0xf0003fff
    2930:	41005109 	.word	0x41005109

00002934 <_usb_d_dev_init>:
{
    2934:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    2936:	4b31      	ldr	r3, [pc, #196]	; (29fc <_usb_d_dev_init+0xc8>)
    2938:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    293a:	07db      	lsls	r3, r3, #31
    293c:	d41f      	bmi.n	297e <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    293e:	492f      	ldr	r1, [pc, #188]	; (29fc <_usb_d_dev_init+0xc8>)
    2940:	2203      	movs	r2, #3
    2942:	788b      	ldrb	r3, [r1, #2]
    2944:	4213      	tst	r3, r2
    2946:	d1fc      	bne.n	2942 <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    2948:	4b2c      	ldr	r3, [pc, #176]	; (29fc <_usb_d_dev_init+0xc8>)
    294a:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    294c:	079b      	lsls	r3, r3, #30
    294e:	d50e      	bpl.n	296e <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    2950:	4a2a      	ldr	r2, [pc, #168]	; (29fc <_usb_d_dev_init+0xc8>)
    2952:	7813      	ldrb	r3, [r2, #0]
    2954:	2102      	movs	r1, #2
    2956:	438b      	bics	r3, r1
    2958:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    295a:	0011      	movs	r1, r2
    295c:	2203      	movs	r2, #3
    295e:	788b      	ldrb	r3, [r1, #2]
    2960:	4213      	tst	r3, r2
    2962:	d1fc      	bne.n	295e <_usb_d_dev_init+0x2a>
    2964:	4925      	ldr	r1, [pc, #148]	; (29fc <_usb_d_dev_init+0xc8>)
    2966:	2202      	movs	r2, #2
    2968:	788b      	ldrb	r3, [r1, #2]
    296a:	4213      	tst	r3, r2
    296c:	d1fc      	bne.n	2968 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    296e:	2201      	movs	r2, #1
    2970:	4b22      	ldr	r3, [pc, #136]	; (29fc <_usb_d_dev_init+0xc8>)
    2972:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2974:	0019      	movs	r1, r3
    2976:	3202      	adds	r2, #2
    2978:	788b      	ldrb	r3, [r1, #2]
    297a:	4213      	tst	r3, r2
    297c:	d1fc      	bne.n	2978 <_usb_d_dev_init+0x44>
    297e:	491f      	ldr	r1, [pc, #124]	; (29fc <_usb_d_dev_init+0xc8>)
    2980:	2201      	movs	r2, #1
    2982:	788b      	ldrb	r3, [r1, #2]
    2984:	4213      	tst	r3, r2
    2986:	d1fc      	bne.n	2982 <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2988:	4b1d      	ldr	r3, [pc, #116]	; (2a00 <_usb_d_dev_init+0xcc>)
    298a:	4a1e      	ldr	r2, [pc, #120]	; (2a04 <_usb_d_dev_init+0xd0>)
    298c:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    298e:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2990:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2992:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2994:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    2996:	4b1c      	ldr	r3, [pc, #112]	; (2a08 <_usb_d_dev_init+0xd4>)
    2998:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    299a:	4b1c      	ldr	r3, [pc, #112]	; (2a0c <_usb_d_dev_init+0xd8>)
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    29a0:	211f      	movs	r1, #31
    29a2:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    29a4:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    29a6:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    29a8:	019b      	lsls	r3, r3, #6
    29aa:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    29ac:	2a1f      	cmp	r2, #31
    29ae:	d01f      	beq.n	29f0 <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    29b0:	291f      	cmp	r1, #31
    29b2:	d01f      	beq.n	29f4 <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    29b4:	2b07      	cmp	r3, #7
    29b6:	d01f      	beq.n	29f8 <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    29b8:	0192      	lsls	r2, r2, #6
    29ba:	430a      	orrs	r2, r1
    29bc:	031b      	lsls	r3, r3, #12
    29be:	4313      	orrs	r3, r2
    29c0:	4a0e      	ldr	r2, [pc, #56]	; (29fc <_usb_d_dev_init+0xc8>)
    29c2:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    29c4:	78d3      	ldrb	r3, [r2, #3]
    29c6:	2103      	movs	r1, #3
    29c8:	430b      	orrs	r3, r1
    29ca:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    29cc:	78d3      	ldrb	r3, [r2, #3]
    29ce:	210c      	movs	r1, #12
    29d0:	430b      	orrs	r3, r1
    29d2:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    29d4:	2304      	movs	r3, #4
    29d6:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    29d8:	0011      	movs	r1, r2
    29da:	2203      	movs	r2, #3
    29dc:	788b      	ldrb	r3, [r1, #2]
    29de:	4213      	tst	r3, r2
    29e0:	d1fc      	bne.n	29dc <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    29e2:	4b06      	ldr	r3, [pc, #24]	; (29fc <_usb_d_dev_init+0xc8>)
    29e4:	4a06      	ldr	r2, [pc, #24]	; (2a00 <_usb_d_dev_init+0xcc>)
    29e6:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    29e8:	2201      	movs	r2, #1
    29ea:	811a      	strh	r2, [r3, #8]
}
    29ec:	2000      	movs	r0, #0
    29ee:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    29f0:	3a1a      	subs	r2, #26
    29f2:	e7dd      	b.n	29b0 <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    29f4:	3902      	subs	r1, #2
    29f6:	e7dd      	b.n	29b4 <_usb_d_dev_init+0x80>
		pad_trim = 5;
    29f8:	3b02      	subs	r3, #2
    29fa:	e7dd      	b.n	29b8 <_usb_d_dev_init+0x84>
    29fc:	41005000 	.word	0x41005000
    2a00:	200005b4 	.word	0x200005b4
    2a04:	000022c1 	.word	0x000022c1
    2a08:	00002515 	.word	0x00002515
    2a0c:	00806024 	.word	0x00806024

00002a10 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    2a10:	4b10      	ldr	r3, [pc, #64]	; (2a54 <_usb_d_dev_enable+0x44>)
    2a12:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    2a14:	079b      	lsls	r3, r3, #30
    2a16:	d11a      	bne.n	2a4e <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2a18:	490e      	ldr	r1, [pc, #56]	; (2a54 <_usb_d_dev_enable+0x44>)
    2a1a:	2203      	movs	r2, #3
    2a1c:	788b      	ldrb	r3, [r1, #2]
    2a1e:	4213      	tst	r3, r2
    2a20:	d1fc      	bne.n	2a1c <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    2a22:	4b0c      	ldr	r3, [pc, #48]	; (2a54 <_usb_d_dev_enable+0x44>)
    2a24:	781b      	ldrb	r3, [r3, #0]
    2a26:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    2a28:	079a      	lsls	r2, r3, #30
    2a2a:	d408      	bmi.n	2a3e <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    2a2c:	2202      	movs	r2, #2
    2a2e:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2a30:	4a08      	ldr	r2, [pc, #32]	; (2a54 <_usb_d_dev_enable+0x44>)
    2a32:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2a34:	0011      	movs	r1, r2
    2a36:	2203      	movs	r2, #3
    2a38:	788b      	ldrb	r3, [r1, #2]
    2a3a:	4213      	tst	r3, r2
    2a3c:	d1fc      	bne.n	2a38 <_usb_d_dev_enable+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a3e:	2280      	movs	r2, #128	; 0x80
    2a40:	4b05      	ldr	r3, [pc, #20]	; (2a58 <_usb_d_dev_enable+0x48>)
    2a42:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2a44:	4a05      	ldr	r2, [pc, #20]	; (2a5c <_usb_d_dev_enable+0x4c>)
    2a46:	4b03      	ldr	r3, [pc, #12]	; (2a54 <_usb_d_dev_enable+0x44>)
    2a48:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    2a4a:	2000      	movs	r0, #0
}
    2a4c:	4770      	bx	lr
		return -USB_ERR_DENIED;
    2a4e:	2011      	movs	r0, #17
    2a50:	4240      	negs	r0, r0
    2a52:	e7fb      	b.n	2a4c <_usb_d_dev_enable+0x3c>
    2a54:	41005000 	.word	0x41005000
    2a58:	e000e100 	.word	0xe000e100
    2a5c:	0000028d 	.word	0x0000028d

00002a60 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2a60:	4a02      	ldr	r2, [pc, #8]	; (2a6c <_usb_d_dev_attach+0xc>)
    2a62:	8913      	ldrh	r3, [r2, #8]
    2a64:	2101      	movs	r1, #1
    2a66:	438b      	bics	r3, r1
    2a68:	8113      	strh	r3, [r2, #8]
}
    2a6a:	4770      	bx	lr
    2a6c:	41005000 	.word	0x41005000

00002a70 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    2a70:	2380      	movs	r3, #128	; 0x80
    2a72:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    2a74:	4b01      	ldr	r3, [pc, #4]	; (2a7c <_usb_d_dev_set_address+0xc>)
    2a76:	7298      	strb	r0, [r3, #10]
}
    2a78:	4770      	bx	lr
    2a7a:	46c0      	nop			; (mov r8, r8)
    2a7c:	41005000 	.word	0x41005000

00002a80 <_usb_d_dev_ep_init>:
{
    2a80:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    2a82:	240f      	movs	r4, #15
    2a84:	4004      	ands	r4, r0
    2a86:	b243      	sxtb	r3, r0
    2a88:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2a8a:	2c00      	cmp	r4, #0
    2a8c:	d054      	beq.n	2b38 <_usb_d_dev_ep_init+0xb8>
    2a8e:	0025      	movs	r5, r4
    2a90:	2b00      	cmp	r3, #0
    2a92:	db07      	blt.n	2aa4 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2a94:	2303      	movs	r3, #3
    2a96:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2a98:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    2a9a:	2c02      	cmp	r4, #2
    2a9c:	d950      	bls.n	2b40 <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    2a9e:	2012      	movs	r0, #18
    2aa0:	4240      	negs	r0, r0
    2aa2:	e025      	b.n	2af0 <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2aa4:	1ca5      	adds	r5, r4, #2
    2aa6:	e7f5      	b.n	2a94 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2aa8:	4663      	mov	r3, ip
    2aaa:	2b00      	cmp	r3, #0
    2aac:	db21      	blt.n	2af2 <_usb_d_dev_ep_init+0x72>
    2aae:	007b      	lsls	r3, r7, #1
    2ab0:	19db      	adds	r3, r3, r7
    2ab2:	009b      	lsls	r3, r3, #2
    2ab4:	4c3b      	ldr	r4, [pc, #236]	; (2ba4 <_usb_d_dev_ep_init+0x124>)
    2ab6:	591b      	ldr	r3, [r3, r4]
    2ab8:	2b00      	cmp	r3, #0
    2aba:	d166      	bne.n	2b8a <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2abc:	007b      	lsls	r3, r7, #1
    2abe:	19df      	adds	r7, r3, r7
    2ac0:	00bf      	lsls	r7, r7, #2
    2ac2:	4b38      	ldr	r3, [pc, #224]	; (2ba4 <_usb_d_dev_ep_init+0x124>)
    2ac4:	58ff      	ldr	r7, [r7, r3]
    2ac6:	4b38      	ldr	r3, [pc, #224]	; (2ba8 <_usb_d_dev_ep_init+0x128>)
    2ac8:	00ae      	lsls	r6, r5, #2
    2aca:	1974      	adds	r4, r6, r5
    2acc:	00a4      	lsls	r4, r4, #2
    2ace:	191c      	adds	r4, r3, r4
    2ad0:	3480      	adds	r4, #128	; 0x80
    2ad2:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    2ad4:	3360      	adds	r3, #96	; 0x60
    2ad6:	1974      	adds	r4, r6, r5
    2ad8:	00a4      	lsls	r4, r4, #2
    2ada:	191c      	adds	r4, r3, r4
    2adc:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    2ade:	3427      	adds	r4, #39	; 0x27
    2ae0:	3101      	adds	r1, #1
    2ae2:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    2ae4:	1975      	adds	r5, r6, r5
    2ae6:	00ad      	lsls	r5, r5, #2
    2ae8:	195b      	adds	r3, r3, r5
    2aea:	3326      	adds	r3, #38	; 0x26
    2aec:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    2aee:	2000      	movs	r0, #0
}
    2af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2af2:	007b      	lsls	r3, r7, #1
    2af4:	19db      	adds	r3, r3, r7
    2af6:	009b      	lsls	r3, r3, #2
    2af8:	4c2a      	ldr	r4, [pc, #168]	; (2ba4 <_usb_d_dev_ep_init+0x124>)
    2afa:	18e3      	adds	r3, r4, r3
    2afc:	685b      	ldr	r3, [r3, #4]
    2afe:	2b00      	cmp	r3, #0
    2b00:	d106      	bne.n	2b10 <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2b02:	007b      	lsls	r3, r7, #1
    2b04:	19df      	adds	r7, r3, r7
    2b06:	00bf      	lsls	r7, r7, #2
    2b08:	4b26      	ldr	r3, [pc, #152]	; (2ba4 <_usb_d_dev_ep_init+0x124>)
    2b0a:	19df      	adds	r7, r3, r7
    2b0c:	687f      	ldr	r7, [r7, #4]
    2b0e:	e7da      	b.n	2ac6 <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2b10:	007b      	lsls	r3, r7, #1
    2b12:	19db      	adds	r3, r3, r7
    2b14:	009b      	lsls	r3, r3, #2
    2b16:	4c23      	ldr	r4, [pc, #140]	; (2ba4 <_usb_d_dev_ep_init+0x124>)
    2b18:	18e3      	adds	r3, r4, r3
    2b1a:	895b      	ldrh	r3, [r3, #10]
    2b1c:	4293      	cmp	r3, r2
    2b1e:	daf0      	bge.n	2b02 <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    2b20:	2013      	movs	r0, #19
    2b22:	4240      	negs	r0, r0
    2b24:	e7e4      	b.n	2af0 <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    2b26:	2014      	movs	r0, #20
    2b28:	4240      	negs	r0, r0
    2b2a:	e7e1      	b.n	2af0 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    2b2c:	2014      	movs	r0, #20
    2b2e:	4240      	negs	r0, r0
    2b30:	e7de      	b.n	2af0 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    2b32:	2013      	movs	r0, #19
    2b34:	4240      	negs	r0, r0
    2b36:	e7db      	b.n	2af0 <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2b38:	2303      	movs	r3, #3
    2b3a:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    2b3c:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2b3e:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    2b40:	00ab      	lsls	r3, r5, #2
    2b42:	195b      	adds	r3, r3, r5
    2b44:	009e      	lsls	r6, r3, #2
    2b46:	4b18      	ldr	r3, [pc, #96]	; (2ba8 <_usb_d_dev_ep_init+0x128>)
    2b48:	199b      	adds	r3, r3, r6
    2b4a:	3386      	adds	r3, #134	; 0x86
    2b4c:	781b      	ldrb	r3, [r3, #0]
    2b4e:	2bff      	cmp	r3, #255	; 0xff
    2b50:	d1e9      	bne.n	2b26 <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    2b52:	2900      	cmp	r1, #0
    2b54:	d1a8      	bne.n	2aa8 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2b56:	2c00      	cmp	r4, #0
    2b58:	d004      	beq.n	2b64 <_usb_d_dev_ep_init+0xe4>
    2b5a:	4663      	mov	r3, ip
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	db01      	blt.n	2b64 <_usb_d_dev_ep_init+0xe4>
    2b60:	3402      	adds	r4, #2
    2b62:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    2b64:	00a3      	lsls	r3, r4, #2
    2b66:	191b      	adds	r3, r3, r4
    2b68:	009b      	lsls	r3, r3, #2
    2b6a:	4c0f      	ldr	r4, [pc, #60]	; (2ba8 <_usb_d_dev_ep_init+0x128>)
    2b6c:	18e4      	adds	r4, r4, r3
    2b6e:	3486      	adds	r4, #134	; 0x86
    2b70:	7823      	ldrb	r3, [r4, #0]
    2b72:	2bff      	cmp	r3, #255	; 0xff
    2b74:	d1da      	bne.n	2b2c <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    2b76:	007b      	lsls	r3, r7, #1
    2b78:	19db      	adds	r3, r3, r7
    2b7a:	009b      	lsls	r3, r3, #2
    2b7c:	4c09      	ldr	r4, [pc, #36]	; (2ba4 <_usb_d_dev_ep_init+0x124>)
    2b7e:	591b      	ldr	r3, [r3, r4]
    2b80:	2b00      	cmp	r3, #0
    2b82:	d0d6      	beq.n	2b32 <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2b84:	4663      	mov	r3, ip
    2b86:	2b00      	cmp	r3, #0
    2b88:	dbb3      	blt.n	2af2 <_usb_d_dev_ep_init+0x72>
    2b8a:	007b      	lsls	r3, r7, #1
    2b8c:	19db      	adds	r3, r3, r7
    2b8e:	009b      	lsls	r3, r3, #2
    2b90:	4c04      	ldr	r4, [pc, #16]	; (2ba4 <_usb_d_dev_ep_init+0x124>)
    2b92:	18e3      	adds	r3, r4, r3
    2b94:	891b      	ldrh	r3, [r3, #8]
    2b96:	4293      	cmp	r3, r2
    2b98:	db00      	blt.n	2b9c <_usb_d_dev_ep_init+0x11c>
    2b9a:	e78f      	b.n	2abc <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    2b9c:	2013      	movs	r0, #19
    2b9e:	4240      	negs	r0, r0
    2ba0:	e7a6      	b.n	2af0 <_usb_d_dev_ep_init+0x70>
    2ba2:	46c0      	nop			; (mov r8, r8)
    2ba4:	0000489c 	.word	0x0000489c
    2ba8:	200005b4 	.word	0x200005b4

00002bac <_usb_d_dev_ep_deinit>:
{
    2bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bae:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    2bb0:	240f      	movs	r4, #15
    2bb2:	4004      	ands	r4, r0
    2bb4:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2bb6:	2c00      	cmp	r4, #0
    2bb8:	d010      	beq.n	2bdc <_usb_d_dev_ep_deinit+0x30>
    2bba:	0020      	movs	r0, r4
    2bbc:	2f00      	cmp	r7, #0
    2bbe:	db02      	blt.n	2bc6 <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2bc0:	2c02      	cmp	r4, #2
    2bc2:	d902      	bls.n	2bca <_usb_d_dev_ep_deinit+0x1e>
}
    2bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2bc6:	1ca0      	adds	r0, r4, #2
    2bc8:	e7fa      	b.n	2bc0 <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    2bca:	0006      	movs	r6, r0
    2bcc:	3001      	adds	r0, #1
    2bce:	0083      	lsls	r3, r0, #2
    2bd0:	1818      	adds	r0, r3, r0
    2bd2:	0080      	lsls	r0, r0, #2
    2bd4:	4b25      	ldr	r3, [pc, #148]	; (2c6c <_usb_d_dev_ep_deinit+0xc0>)
    2bd6:	3360      	adds	r3, #96	; 0x60
    2bd8:	1818      	adds	r0, r3, r0
    2bda:	e002      	b.n	2be2 <_usb_d_dev_ep_deinit+0x36>
    2bdc:	4823      	ldr	r0, [pc, #140]	; (2c6c <_usb_d_dev_ep_deinit+0xc0>)
    2bde:	3074      	adds	r0, #116	; 0x74
    2be0:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2be2:	00b3      	lsls	r3, r6, #2
    2be4:	199b      	adds	r3, r3, r6
    2be6:	009a      	lsls	r2, r3, #2
    2be8:	4b20      	ldr	r3, [pc, #128]	; (2c6c <_usb_d_dev_ep_deinit+0xc0>)
    2bea:	189b      	adds	r3, r3, r2
    2bec:	3386      	adds	r3, #134	; 0x86
    2bee:	781b      	ldrb	r3, [r3, #0]
    2bf0:	2bff      	cmp	r3, #255	; 0xff
    2bf2:	d0e7      	beq.n	2bc4 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    2bf4:	0ff9      	lsrs	r1, r7, #31
    2bf6:	2203      	movs	r2, #3
    2bf8:	4b1d      	ldr	r3, [pc, #116]	; (2c70 <_usb_d_dev_ep_deinit+0xc4>)
    2bfa:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2bfc:	00b3      	lsls	r3, r6, #2
    2bfe:	199b      	adds	r3, r3, r6
    2c00:	009a      	lsls	r2, r3, #2
    2c02:	4b1a      	ldr	r3, [pc, #104]	; (2c6c <_usb_d_dev_ep_deinit+0xc0>)
    2c04:	189b      	adds	r3, r3, r2
    2c06:	3380      	adds	r3, #128	; 0x80
    2c08:	79da      	ldrb	r2, [r3, #7]
    2c0a:	2307      	movs	r3, #7
    2c0c:	4013      	ands	r3, r2
    2c0e:	2b01      	cmp	r3, #1
    2c10:	d01b      	beq.n	2c4a <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    2c12:	2f00      	cmp	r7, #0
    2c14:	db1f      	blt.n	2c56 <_usb_d_dev_ep_deinit+0xaa>
    2c16:	016d      	lsls	r5, r5, #5
    2c18:	4b16      	ldr	r3, [pc, #88]	; (2c74 <_usb_d_dev_ep_deinit+0xc8>)
    2c1a:	469c      	mov	ip, r3
    2c1c:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    2c1e:	2280      	movs	r2, #128	; 0x80
    2c20:	0052      	lsls	r2, r2, #1
    2c22:	5cab      	ldrb	r3, [r5, r2]
    2c24:	2107      	movs	r1, #7
    2c26:	438b      	bics	r3, r1
    2c28:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    2c2a:	4b10      	ldr	r3, [pc, #64]	; (2c6c <_usb_d_dev_ep_deinit+0xc0>)
    2c2c:	3360      	adds	r3, #96	; 0x60
    2c2e:	00b1      	lsls	r1, r6, #2
    2c30:	198a      	adds	r2, r1, r6
    2c32:	0092      	lsls	r2, r2, #2
    2c34:	189a      	adds	r2, r3, r2
    2c36:	3227      	adds	r2, #39	; 0x27
    2c38:	2000      	movs	r0, #0
    2c3a:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    2c3c:	198e      	adds	r6, r1, r6
    2c3e:	00b6      	lsls	r6, r6, #2
    2c40:	199b      	adds	r3, r3, r6
    2c42:	3326      	adds	r3, #38	; 0x26
    2c44:	22ff      	movs	r2, #255	; 0xff
    2c46:	701a      	strb	r2, [r3, #0]
    2c48:	e7bc      	b.n	2bc4 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    2c4a:	3508      	adds	r5, #8
    2c4c:	016d      	lsls	r5, r5, #5
    2c4e:	2200      	movs	r2, #0
    2c50:	4b08      	ldr	r3, [pc, #32]	; (2c74 <_usb_d_dev_ep_deinit+0xc8>)
    2c52:	54ea      	strb	r2, [r5, r3]
    2c54:	e7e9      	b.n	2c2a <_usb_d_dev_ep_deinit+0x7e>
    2c56:	0164      	lsls	r4, r4, #5
    2c58:	4b06      	ldr	r3, [pc, #24]	; (2c74 <_usb_d_dev_ep_deinit+0xc8>)
    2c5a:	469c      	mov	ip, r3
    2c5c:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    2c5e:	2280      	movs	r2, #128	; 0x80
    2c60:	0052      	lsls	r2, r2, #1
    2c62:	5ca3      	ldrb	r3, [r4, r2]
    2c64:	2170      	movs	r1, #112	; 0x70
    2c66:	438b      	bics	r3, r1
    2c68:	54a3      	strb	r3, [r4, r2]
    2c6a:	e7de      	b.n	2c2a <_usb_d_dev_ep_deinit+0x7e>
    2c6c:	200005b4 	.word	0x200005b4
    2c70:	000023a9 	.word	0x000023a9
    2c74:	41005000 	.word	0x41005000

00002c78 <_usb_d_dev_ep_enable>:
{
    2c78:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c7a:	46c6      	mov	lr, r8
    2c7c:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    2c7e:	220f      	movs	r2, #15
    2c80:	4002      	ands	r2, r0
    2c82:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2c84:	2a00      	cmp	r2, #0
    2c86:	d100      	bne.n	2c8a <_usb_d_dev_ep_enable+0x12>
    2c88:	e092      	b.n	2db0 <_usb_d_dev_ep_enable+0x138>
    2c8a:	0013      	movs	r3, r2
    2c8c:	2800      	cmp	r0, #0
    2c8e:	db0b      	blt.n	2ca8 <_usb_d_dev_ep_enable+0x30>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2c90:	0011      	movs	r1, r2
    2c92:	3208      	adds	r2, #8
    2c94:	0152      	lsls	r2, r2, #5
    2c96:	4caa      	ldr	r4, [pc, #680]	; (2f40 <_usb_d_dev_ep_enable+0x2c8>)
    2c98:	5d15      	ldrb	r5, [r2, r4]
    2c9a:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2c9c:	2902      	cmp	r1, #2
    2c9e:	d800      	bhi.n	2ca2 <_usb_d_dev_ep_enable+0x2a>
    2ca0:	e08d      	b.n	2dbe <_usb_d_dev_ep_enable+0x146>
		return -USB_ERR_PARAM;
    2ca2:	2012      	movs	r0, #18
    2ca4:	4240      	negs	r0, r0
    2ca6:	e0e5      	b.n	2e74 <_usb_d_dev_ep_enable+0x1fc>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2ca8:	1c93      	adds	r3, r2, #2
    2caa:	e7f1      	b.n	2c90 <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    2cac:	3276      	adds	r2, #118	; 0x76
    2cae:	422a      	tst	r2, r5
    2cb0:	d175      	bne.n	2d9e <_usb_d_dev_ep_enable+0x126>
    2cb2:	4aa3      	ldr	r2, [pc, #652]	; (2f40 <_usb_d_dev_ep_enable+0x2c8>)
    2cb4:	4690      	mov	r8, r2
    2cb6:	4444      	add	r4, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2cb8:	2011      	movs	r0, #17
    2cba:	2280      	movs	r2, #128	; 0x80
    2cbc:	0052      	lsls	r2, r2, #1
    2cbe:	54a0      	strb	r0, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2cc0:	009a      	lsls	r2, r3, #2
    2cc2:	18d2      	adds	r2, r2, r3
    2cc4:	0095      	lsls	r5, r2, #2
    2cc6:	4a9f      	ldr	r2, [pc, #636]	; (2f44 <_usb_d_dev_ep_enable+0x2cc>)
    2cc8:	3260      	adds	r2, #96	; 0x60
    2cca:	1952      	adds	r2, r2, r5
    2ccc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    2cce:	0395      	lsls	r5, r2, #14
    2cd0:	489d      	ldr	r0, [pc, #628]	; (2f48 <_usb_d_dev_ep_enable+0x2d0>)
    2cd2:	4005      	ands	r5, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2cd4:	2080      	movs	r0, #128	; 0x80
    2cd6:	0080      	lsls	r0, r0, #2
    2cd8:	4282      	cmp	r2, r0
    2cda:	d900      	bls.n	2cde <_usb_d_dev_ep_enable+0x66>
    2cdc:	e0cd      	b.n	2e7a <_usb_d_dev_ep_enable+0x202>
    2cde:	3801      	subs	r0, #1
    2ce0:	38ff      	subs	r0, #255	; 0xff
    2ce2:	4282      	cmp	r2, r0
    2ce4:	d900      	bls.n	2ce8 <_usb_d_dev_ep_enable+0x70>
    2ce6:	e113      	b.n	2f10 <_usb_d_dev_ep_enable+0x298>
    2ce8:	2a80      	cmp	r2, #128	; 0x80
    2cea:	d900      	bls.n	2cee <_usb_d_dev_ep_enable+0x76>
    2cec:	e100      	b.n	2ef0 <_usb_d_dev_ep_enable+0x278>
    2cee:	2a40      	cmp	r2, #64	; 0x40
    2cf0:	d900      	bls.n	2cf4 <_usb_d_dev_ep_enable+0x7c>
    2cf2:	e115      	b.n	2f20 <_usb_d_dev_ep_enable+0x2a8>
    2cf4:	2a20      	cmp	r2, #32
    2cf6:	d900      	bls.n	2cfa <_usb_d_dev_ep_enable+0x82>
    2cf8:	e102      	b.n	2f00 <_usb_d_dev_ep_enable+0x288>
    2cfa:	2a10      	cmp	r2, #16
    2cfc:	d900      	bls.n	2d00 <_usb_d_dev_ep_enable+0x88>
    2cfe:	e117      	b.n	2f30 <_usb_d_dev_ep_enable+0x2b8>
    2d00:	38f8      	subs	r0, #248	; 0xf8
    2d02:	4290      	cmp	r0, r2
    2d04:	4180      	sbcs	r0, r0
    2d06:	4240      	negs	r0, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2d08:	0706      	lsls	r6, r0, #28
    2d0a:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2d0c:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2d0e:	0495      	lsls	r5, r2, #18
    2d10:	0cad      	lsrs	r5, r5, #18
    2d12:	e0b9      	b.n	2e88 <_usb_d_dev_ep_enable+0x210>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2d14:	2270      	movs	r2, #112	; 0x70
    2d16:	422a      	tst	r2, r5
    2d18:	d144      	bne.n	2da4 <_usb_d_dev_ep_enable+0x12c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    2d1a:	488a      	ldr	r0, [pc, #552]	; (2f44 <_usb_d_dev_ep_enable+0x2cc>)
    2d1c:	009e      	lsls	r6, r3, #2
    2d1e:	18f2      	adds	r2, r6, r3
    2d20:	0092      	lsls	r2, r2, #2
    2d22:	1882      	adds	r2, r0, r2
    2d24:	3280      	adds	r2, #128	; 0x80
    2d26:	79d2      	ldrb	r2, [r2, #7]
    2d28:	0752      	lsls	r2, r2, #29
    2d2a:	0e52      	lsrs	r2, r2, #25
    2d2c:	4315      	orrs	r5, r2
    2d2e:	4a84      	ldr	r2, [pc, #528]	; (2f40 <_usb_d_dev_ep_enable+0x2c8>)
    2d30:	4694      	mov	ip, r2
    2d32:	4464      	add	r4, ip
    2d34:	2280      	movs	r2, #128	; 0x80
    2d36:	0052      	lsls	r2, r2, #1
    2d38:	54a5      	strb	r5, [r4, r2]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2d3a:	3060      	adds	r0, #96	; 0x60
    2d3c:	18f6      	adds	r6, r6, r3
    2d3e:	00b6      	lsls	r6, r6, #2
    2d40:	1980      	adds	r0, r0, r6
    2d42:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    2d44:	0485      	lsls	r5, r0, #18
    2d46:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2d48:	3201      	adds	r2, #1
    2d4a:	32ff      	adds	r2, #255	; 0xff
    2d4c:	2307      	movs	r3, #7
    2d4e:	4290      	cmp	r0, r2
    2d50:	d814      	bhi.n	2d7c <_usb_d_dev_ep_enable+0x104>
    2d52:	3a01      	subs	r2, #1
    2d54:	3aff      	subs	r2, #255	; 0xff
    2d56:	3b01      	subs	r3, #1
    2d58:	4290      	cmp	r0, r2
    2d5a:	d80f      	bhi.n	2d7c <_usb_d_dev_ep_enable+0x104>
    2d5c:	3b01      	subs	r3, #1
    2d5e:	2880      	cmp	r0, #128	; 0x80
    2d60:	d80c      	bhi.n	2d7c <_usb_d_dev_ep_enable+0x104>
    2d62:	3b01      	subs	r3, #1
    2d64:	2840      	cmp	r0, #64	; 0x40
    2d66:	d809      	bhi.n	2d7c <_usb_d_dev_ep_enable+0x104>
    2d68:	3b01      	subs	r3, #1
    2d6a:	2820      	cmp	r0, #32
    2d6c:	d806      	bhi.n	2d7c <_usb_d_dev_ep_enable+0x104>
    2d6e:	3b01      	subs	r3, #1
    2d70:	2810      	cmp	r0, #16
    2d72:	d803      	bhi.n	2d7c <_usb_d_dev_ep_enable+0x104>
    2d74:	3af8      	subs	r2, #248	; 0xf8
    2d76:	4282      	cmp	r2, r0
    2d78:	4192      	sbcs	r2, r2
    2d7a:	4253      	negs	r3, r2
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2d7c:	071b      	lsls	r3, r3, #28
    2d7e:	432b      	orrs	r3, r5
    2d80:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2d82:	2280      	movs	r2, #128	; 0x80
    2d84:	2382      	movs	r3, #130	; 0x82
    2d86:	005b      	lsls	r3, r3, #1
    2d88:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    2d8a:	0149      	lsls	r1, r1, #5
    2d8c:	4b6d      	ldr	r3, [pc, #436]	; (2f44 <_usb_d_dev_ep_enable+0x2cc>)
    2d8e:	1859      	adds	r1, r3, r1
    2d90:	2300      	movs	r3, #0
    2d92:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    2d94:	2000      	movs	r0, #0
    2d96:	e06d      	b.n	2e74 <_usb_d_dev_ep_enable+0x1fc>
		return -USB_ERR_PARAM;
    2d98:	2012      	movs	r0, #18
    2d9a:	4240      	negs	r0, r0
    2d9c:	e06a      	b.n	2e74 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    2d9e:	2014      	movs	r0, #20
    2da0:	4240      	negs	r0, r0
    2da2:	e067      	b.n	2e74 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    2da4:	2014      	movs	r0, #20
    2da6:	4240      	negs	r0, r0
    2da8:	e064      	b.n	2e74 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    2daa:	2014      	movs	r0, #20
    2dac:	4240      	negs	r0, r0
    2dae:	e061      	b.n	2e74 <_usb_d_dev_ep_enable+0x1fc>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2db0:	2380      	movs	r3, #128	; 0x80
    2db2:	005b      	lsls	r3, r3, #1
    2db4:	4a62      	ldr	r2, [pc, #392]	; (2f40 <_usb_d_dev_ep_enable+0x2c8>)
    2db6:	5cd5      	ldrb	r5, [r2, r3]
    2db8:	b2ed      	uxtb	r5, r5
    2dba:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    2dbc:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2dbe:	009a      	lsls	r2, r3, #2
    2dc0:	18d2      	adds	r2, r2, r3
    2dc2:	0094      	lsls	r4, r2, #2
    2dc4:	4a5f      	ldr	r2, [pc, #380]	; (2f44 <_usb_d_dev_ep_enable+0x2cc>)
    2dc6:	1912      	adds	r2, r2, r4
    2dc8:	3286      	adds	r2, #134	; 0x86
    2dca:	7812      	ldrb	r2, [r2, #0]
    2dcc:	4694      	mov	ip, r2
    2dce:	2aff      	cmp	r2, #255	; 0xff
    2dd0:	d0e2      	beq.n	2d98 <_usb_d_dev_ep_enable+0x120>
    2dd2:	014c      	lsls	r4, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    2dd4:	4a5b      	ldr	r2, [pc, #364]	; (2f44 <_usb_d_dev_ep_enable+0x2cc>)
    2dd6:	1917      	adds	r7, r2, r4
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2dd8:	009e      	lsls	r6, r3, #2
    2dda:	18f6      	adds	r6, r6, r3
    2ddc:	00b6      	lsls	r6, r6, #2
    2dde:	1992      	adds	r2, r2, r6
    2de0:	3280      	adds	r2, #128	; 0x80
    2de2:	79d6      	ldrb	r6, [r2, #7]
    2de4:	2207      	movs	r2, #7
    2de6:	4032      	ands	r2, r6
    2de8:	2a01      	cmp	r2, #1
    2dea:	d100      	bne.n	2dee <_usb_d_dev_ep_enable+0x176>
    2dec:	e75e      	b.n	2cac <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    2dee:	2800      	cmp	r0, #0
    2df0:	db90      	blt.n	2d14 <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    2df2:	076a      	lsls	r2, r5, #29
    2df4:	d1d9      	bne.n	2daa <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    2df6:	4853      	ldr	r0, [pc, #332]	; (2f44 <_usb_d_dev_ep_enable+0x2cc>)
    2df8:	009e      	lsls	r6, r3, #2
    2dfa:	18f2      	adds	r2, r6, r3
    2dfc:	0092      	lsls	r2, r2, #2
    2dfe:	1882      	adds	r2, r0, r2
    2e00:	3280      	adds	r2, #128	; 0x80
    2e02:	79d2      	ldrb	r2, [r2, #7]
    2e04:	0752      	lsls	r2, r2, #29
    2e06:	0f52      	lsrs	r2, r2, #29
    2e08:	4315      	orrs	r5, r2
    2e0a:	4a4d      	ldr	r2, [pc, #308]	; (2f40 <_usb_d_dev_ep_enable+0x2c8>)
    2e0c:	4694      	mov	ip, r2
    2e0e:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2e10:	2280      	movs	r2, #128	; 0x80
    2e12:	0052      	lsls	r2, r2, #1
    2e14:	54a5      	strb	r5, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2e16:	3060      	adds	r0, #96	; 0x60
    2e18:	18f6      	adds	r6, r6, r3
    2e1a:	00b6      	lsls	r6, r6, #2
    2e1c:	1980      	adds	r0, r0, r6
    2e1e:	8c85      	ldrh	r5, [r0, #36]	; 0x24
    2e20:	03ab      	lsls	r3, r5, #14
    2e22:	4849      	ldr	r0, [pc, #292]	; (2f48 <_usb_d_dev_ep_enable+0x2d0>)
    2e24:	4018      	ands	r0, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2e26:	3201      	adds	r2, #1
    2e28:	32ff      	adds	r2, #255	; 0xff
    2e2a:	2307      	movs	r3, #7
    2e2c:	4295      	cmp	r5, r2
    2e2e:	d814      	bhi.n	2e5a <_usb_d_dev_ep_enable+0x1e2>
    2e30:	3a01      	subs	r2, #1
    2e32:	3aff      	subs	r2, #255	; 0xff
    2e34:	3b01      	subs	r3, #1
    2e36:	4295      	cmp	r5, r2
    2e38:	d80f      	bhi.n	2e5a <_usb_d_dev_ep_enable+0x1e2>
    2e3a:	3b01      	subs	r3, #1
    2e3c:	2d80      	cmp	r5, #128	; 0x80
    2e3e:	d80c      	bhi.n	2e5a <_usb_d_dev_ep_enable+0x1e2>
    2e40:	3b01      	subs	r3, #1
    2e42:	2d40      	cmp	r5, #64	; 0x40
    2e44:	d809      	bhi.n	2e5a <_usb_d_dev_ep_enable+0x1e2>
    2e46:	3b01      	subs	r3, #1
    2e48:	2d20      	cmp	r5, #32
    2e4a:	d806      	bhi.n	2e5a <_usb_d_dev_ep_enable+0x1e2>
    2e4c:	3b01      	subs	r3, #1
    2e4e:	2d10      	cmp	r5, #16
    2e50:	d803      	bhi.n	2e5a <_usb_d_dev_ep_enable+0x1e2>
    2e52:	3af8      	subs	r2, #248	; 0xf8
    2e54:	42aa      	cmp	r2, r5
    2e56:	4192      	sbcs	r2, r2
    2e58:	4253      	negs	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2e5a:	071b      	lsls	r3, r3, #28
    2e5c:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2e5e:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2e60:	2240      	movs	r2, #64	; 0x40
    2e62:	2306      	movs	r3, #6
    2e64:	33ff      	adds	r3, #255	; 0xff
    2e66:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    2e68:	0149      	lsls	r1, r1, #5
    2e6a:	4b36      	ldr	r3, [pc, #216]	; (2f44 <_usb_d_dev_ep_enable+0x2cc>)
    2e6c:	1859      	adds	r1, r3, r1
    2e6e:	2300      	movs	r3, #0
    2e70:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    2e72:	2000      	movs	r0, #0
}
    2e74:	bc04      	pop	{r2}
    2e76:	4690      	mov	r8, r2
    2e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2e7a:	20e0      	movs	r0, #224	; 0xe0
    2e7c:	05c0      	lsls	r0, r0, #23
    2e7e:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2e80:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2e82:	0495      	lsls	r5, r2, #18
    2e84:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2e86:	2007      	movs	r0, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2e88:	0700      	lsls	r0, r0, #28
    2e8a:	4328      	orrs	r0, r5
    2e8c:	6178      	str	r0, [r7, #20]
    2e8e:	2506      	movs	r5, #6
    2e90:	35ff      	adds	r5, #255	; 0xff
    2e92:	2640      	movs	r6, #64	; 0x40
    2e94:	5566      	strb	r6, [r4, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2e96:	2782      	movs	r7, #130	; 0x82
    2e98:	007f      	lsls	r7, r7, #1
    2e9a:	2080      	movs	r0, #128	; 0x80
    2e9c:	55e0      	strb	r0, [r4, r7]
	bank->STATUS_BK.reg     = 0;
    2e9e:	4829      	ldr	r0, [pc, #164]	; (2f44 <_usb_d_dev_ep_enable+0x2cc>)
    2ea0:	0149      	lsls	r1, r1, #5
    2ea2:	1841      	adds	r1, r0, r1
    2ea4:	2400      	movs	r4, #0
    2ea6:	728c      	strb	r4, [r1, #10]
    2ea8:	768c      	strb	r4, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2eaa:	340f      	adds	r4, #15
    2eac:	4661      	mov	r1, ip
    2eae:	400c      	ands	r4, r1
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2eb0:	0099      	lsls	r1, r3, #2
    2eb2:	18c9      	adds	r1, r1, r3
    2eb4:	0089      	lsls	r1, r1, #2
    2eb6:	1841      	adds	r1, r0, r1
    2eb8:	3180      	adds	r1, #128	; 0x80
    2eba:	6809      	ldr	r1, [r1, #0]
	bank->ADDR.reg          = addr;
    2ebc:	0163      	lsls	r3, r4, #5
    2ebe:	5019      	str	r1, [r3, r0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2ec0:	18c0      	adds	r0, r0, r3
    2ec2:	6841      	ldr	r1, [r0, #4]
    2ec4:	0492      	lsls	r2, r2, #18
    2ec6:	0914      	lsrs	r4, r2, #4
    2ec8:	4a20      	ldr	r2, [pc, #128]	; (2f4c <_usb_d_dev_ep_enable+0x2d4>)
    2eca:	400a      	ands	r2, r1
    2ecc:	4322      	orrs	r2, r4
    2ece:	6042      	str	r2, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2ed0:	6842      	ldr	r2, [r0, #4]
    2ed2:	0b92      	lsrs	r2, r2, #14
    2ed4:	0392      	lsls	r2, r2, #14
    2ed6:	6042      	str	r2, [r0, #4]
    2ed8:	4a19      	ldr	r2, [pc, #100]	; (2f40 <_usb_d_dev_ep_enable+0x2c8>)
    2eda:	189a      	adds	r2, r3, r2
    2edc:	21b0      	movs	r1, #176	; 0xb0
    2ede:	55d1      	strb	r1, [r2, r7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2ee0:	5556      	strb	r6, [r2, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2ee2:	4a1b      	ldr	r2, [pc, #108]	; (2f50 <_usb_d_dev_ep_enable+0x2d8>)
    2ee4:	4694      	mov	ip, r2
    2ee6:	4463      	add	r3, ip
    2ee8:	2210      	movs	r2, #16
    2eea:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    2eec:	2000      	movs	r0, #0
    2eee:	e7c1      	b.n	2e74 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2ef0:	20a0      	movs	r0, #160	; 0xa0
    2ef2:	05c0      	lsls	r0, r0, #23
    2ef4:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2ef6:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2ef8:	0495      	lsls	r5, r2, #18
    2efa:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2efc:	2005      	movs	r0, #5
    2efe:	e7c3      	b.n	2e88 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f00:	20c0      	movs	r0, #192	; 0xc0
    2f02:	0580      	lsls	r0, r0, #22
    2f04:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2f06:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f08:	0495      	lsls	r5, r2, #18
    2f0a:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2f0c:	2003      	movs	r0, #3
    2f0e:	e7bb      	b.n	2e88 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f10:	20c0      	movs	r0, #192	; 0xc0
    2f12:	05c0      	lsls	r0, r0, #23
    2f14:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2f16:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f18:	0495      	lsls	r5, r2, #18
    2f1a:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2f1c:	2006      	movs	r0, #6
    2f1e:	e7b3      	b.n	2e88 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f20:	2080      	movs	r0, #128	; 0x80
    2f22:	05c0      	lsls	r0, r0, #23
    2f24:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2f26:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f28:	0495      	lsls	r5, r2, #18
    2f2a:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2f2c:	2004      	movs	r0, #4
    2f2e:	e7ab      	b.n	2e88 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f30:	2080      	movs	r0, #128	; 0x80
    2f32:	0580      	lsls	r0, r0, #22
    2f34:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2f36:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f38:	0495      	lsls	r5, r2, #18
    2f3a:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2f3c:	2002      	movs	r0, #2
    2f3e:	e7a3      	b.n	2e88 <_usb_d_dev_ep_enable+0x210>
    2f40:	41005000 	.word	0x41005000
    2f44:	200005b4 	.word	0x200005b4
    2f48:	0fffc000 	.word	0x0fffc000
    2f4c:	f0003fff 	.word	0xf0003fff
    2f50:	41005109 	.word	0x41005109

00002f54 <_usb_d_dev_ep_stall>:
{
    2f54:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    2f56:	230f      	movs	r3, #15
    2f58:	4003      	ands	r3, r0
    2f5a:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2f5c:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2f5e:	2b00      	cmp	r3, #0
    2f60:	d009      	beq.n	2f76 <_usb_d_dev_ep_stall+0x22>
    2f62:	001a      	movs	r2, r3
    2f64:	2800      	cmp	r0, #0
    2f66:	db04      	blt.n	2f72 <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    2f68:	2b02      	cmp	r3, #2
    2f6a:	d905      	bls.n	2f78 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    2f6c:	2012      	movs	r0, #18
    2f6e:	4240      	negs	r0, r0
    2f70:	e019      	b.n	2fa6 <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2f72:	1c9a      	adds	r2, r3, #2
    2f74:	e7f8      	b.n	2f68 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    2f76:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    2f78:	2901      	cmp	r1, #1
    2f7a:	d015      	beq.n	2fa8 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2f7c:	2900      	cmp	r1, #0
    2f7e:	d036      	beq.n	2fee <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2f80:	0093      	lsls	r3, r2, #2
    2f82:	189b      	adds	r3, r3, r2
    2f84:	009b      	lsls	r3, r3, #2
    2f86:	4a47      	ldr	r2, [pc, #284]	; (30a4 <_usb_d_dev_ep_stall+0x150>)
    2f88:	18d2      	adds	r2, r2, r3
    2f8a:	3286      	adds	r2, #134	; 0x86
    2f8c:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2f8e:	230f      	movs	r3, #15
    2f90:	4013      	ands	r3, r2
    2f92:	015b      	lsls	r3, r3, #5
    2f94:	4a44      	ldr	r2, [pc, #272]	; (30a8 <_usb_d_dev_ep_stall+0x154>)
    2f96:	4694      	mov	ip, r2
    2f98:	4463      	add	r3, ip
    2f9a:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2f9c:	2310      	movs	r3, #16
    2f9e:	40a3      	lsls	r3, r4
    2fa0:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    2fa2:	1e43      	subs	r3, r0, #1
    2fa4:	4198      	sbcs	r0, r3
}
    2fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2fa8:	2510      	movs	r5, #16
    2faa:	40a5      	lsls	r5, r4
    2fac:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2fae:	493d      	ldr	r1, [pc, #244]	; (30a4 <_usb_d_dev_ep_stall+0x150>)
    2fb0:	0090      	lsls	r0, r2, #2
    2fb2:	1883      	adds	r3, r0, r2
    2fb4:	009b      	lsls	r3, r3, #2
    2fb6:	18cb      	adds	r3, r1, r3
    2fb8:	3386      	adds	r3, #134	; 0x86
    2fba:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2fbc:	230f      	movs	r3, #15
    2fbe:	4033      	ands	r3, r6
    2fc0:	015e      	lsls	r6, r3, #5
    2fc2:	4f39      	ldr	r7, [pc, #228]	; (30a8 <_usb_d_dev_ep_stall+0x154>)
    2fc4:	46bc      	mov	ip, r7
    2fc6:	4466      	add	r6, ip
    2fc8:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2fca:	2520      	movs	r5, #32
    2fcc:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    2fce:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2fd0:	015b      	lsls	r3, r3, #5
    2fd2:	4d36      	ldr	r5, [pc, #216]	; (30ac <_usb_d_dev_ep_stall+0x158>)
    2fd4:	46ac      	mov	ip, r5
    2fd6:	4463      	add	r3, ip
    2fd8:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    2fda:	1882      	adds	r2, r0, r2
    2fdc:	0092      	lsls	r2, r2, #2
    2fde:	188a      	adds	r2, r1, r2
    2fe0:	3280      	adds	r2, #128	; 0x80
    2fe2:	79d3      	ldrb	r3, [r2, #7]
    2fe4:	2108      	movs	r1, #8
    2fe6:	430b      	orrs	r3, r1
    2fe8:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    2fea:	2000      	movs	r0, #0
    2fec:	e7db      	b.n	2fa6 <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    2fee:	0093      	lsls	r3, r2, #2
    2ff0:	189b      	adds	r3, r3, r2
    2ff2:	0099      	lsls	r1, r3, #2
    2ff4:	4b2b      	ldr	r3, [pc, #172]	; (30a4 <_usb_d_dev_ep_stall+0x150>)
    2ff6:	185b      	adds	r3, r3, r1
    2ff8:	3386      	adds	r3, #134	; 0x86
    2ffa:	781b      	ldrb	r3, [r3, #0]
    2ffc:	210f      	movs	r1, #15
    2ffe:	400b      	ands	r3, r1
    3000:	015d      	lsls	r5, r3, #5
    3002:	492b      	ldr	r1, [pc, #172]	; (30b0 <_usb_d_dev_ep_stall+0x15c>)
    3004:	468c      	mov	ip, r1
    3006:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3008:	2183      	movs	r1, #131	; 0x83
    300a:	0049      	lsls	r1, r1, #1
    300c:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    300e:	39f6      	subs	r1, #246	; 0xf6
    3010:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3012:	2000      	movs	r0, #0
	if (!is_stalled) {
    3014:	420e      	tst	r6, r1
    3016:	d0c6      	beq.n	2fa6 <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3018:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    301a:	3005      	adds	r0, #5
    301c:	30ff      	adds	r0, #255	; 0xff
    301e:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3020:	2120      	movs	r1, #32
    3022:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    3024:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3026:	015b      	lsls	r3, r3, #5
    3028:	4e22      	ldr	r6, [pc, #136]	; (30b4 <_usb_d_dev_ep_stall+0x160>)
    302a:	46b4      	mov	ip, r6
    302c:	4463      	add	r3, ip
    302e:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3030:	2308      	movs	r3, #8
    3032:	33ff      	adds	r3, #255	; 0xff
    3034:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    3036:	420b      	tst	r3, r1
    3038:	d009      	beq.n	304e <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    303a:	2308      	movs	r3, #8
    303c:	33ff      	adds	r3, #255	; 0xff
    303e:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    3040:	3b07      	subs	r3, #7
    3042:	3bff      	subs	r3, #255	; 0xff
    3044:	40a3      	lsls	r3, r4
    3046:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3048:	2182      	movs	r1, #130	; 0x82
    304a:	0049      	lsls	r1, r1, #1
    304c:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    304e:	0093      	lsls	r3, r2, #2
    3050:	189b      	adds	r3, r3, r2
    3052:	0099      	lsls	r1, r3, #2
    3054:	4b13      	ldr	r3, [pc, #76]	; (30a4 <_usb_d_dev_ep_stall+0x150>)
    3056:	185b      	adds	r3, r3, r1
    3058:	3380      	adds	r3, #128	; 0x80
    305a:	79d9      	ldrb	r1, [r3, #7]
    305c:	2307      	movs	r3, #7
    305e:	400b      	ands	r3, r1
    3060:	2b01      	cmp	r3, #1
    3062:	d00b      	beq.n	307c <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    3064:	0093      	lsls	r3, r2, #2
    3066:	189a      	adds	r2, r3, r2
    3068:	0092      	lsls	r2, r2, #2
    306a:	4b0e      	ldr	r3, [pc, #56]	; (30a4 <_usb_d_dev_ep_stall+0x150>)
    306c:	189b      	adds	r3, r3, r2
    306e:	3380      	adds	r3, #128	; 0x80
    3070:	79da      	ldrb	r2, [r3, #7]
    3072:	2108      	movs	r1, #8
    3074:	438a      	bics	r2, r1
    3076:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3078:	2000      	movs	r0, #0
    307a:	e794      	b.n	2fa6 <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    307c:	3306      	adds	r3, #6
    307e:	33ff      	adds	r3, #255	; 0xff
    3080:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    3082:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3084:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    3086:	4219      	tst	r1, r3
    3088:	d000      	beq.n	308c <_usb_d_dev_ep_stall+0x138>
    308a:	e78c      	b.n	2fa6 <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    308c:	0093      	lsls	r3, r2, #2
    308e:	189a      	adds	r2, r3, r2
    3090:	0092      	lsls	r2, r2, #2
    3092:	4b04      	ldr	r3, [pc, #16]	; (30a4 <_usb_d_dev_ep_stall+0x150>)
    3094:	189b      	adds	r3, r3, r2
    3096:	3380      	adds	r3, #128	; 0x80
    3098:	79da      	ldrb	r2, [r3, #7]
    309a:	2108      	movs	r1, #8
    309c:	438a      	bics	r2, r1
    309e:	71da      	strb	r2, [r3, #7]
    30a0:	e781      	b.n	2fa6 <_usb_d_dev_ep_stall+0x52>
    30a2:	46c0      	nop			; (mov r8, r8)
    30a4:	200005b4 	.word	0x200005b4
    30a8:	41005100 	.word	0x41005100
    30ac:	41005109 	.word	0x41005109
    30b0:	41005000 	.word	0x41005000
    30b4:	41005108 	.word	0x41005108

000030b8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    30b8:	b570      	push	{r4, r5, r6, lr}
    30ba:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    30bc:	230f      	movs	r3, #15
    30be:	4018      	ands	r0, r3
    30c0:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    30c2:	4b16      	ldr	r3, [pc, #88]	; (311c <_usb_d_dev_ep_read_req+0x64>)
    30c4:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    30c6:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    30c8:	685b      	ldr	r3, [r3, #4]
    30ca:	049b      	lsls	r3, r3, #18
    30cc:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    30ce:	2802      	cmp	r0, #2
    30d0:	d81a      	bhi.n	3108 <_usb_d_dev_ep_read_req+0x50>
    30d2:	2d00      	cmp	r5, #0
    30d4:	d01b      	beq.n	310e <_usb_d_dev_ep_read_req+0x56>
    30d6:	4b12      	ldr	r3, [pc, #72]	; (3120 <_usb_d_dev_ep_read_req+0x68>)
    30d8:	469c      	mov	ip, r3
    30da:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    30dc:	2380      	movs	r3, #128	; 0x80
    30de:	005b      	lsls	r3, r3, #1
    30e0:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    30e2:	2b11      	cmp	r3, #17
    30e4:	d116      	bne.n	3114 <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    30e6:	2308      	movs	r3, #8
    30e8:	33ff      	adds	r3, #255	; 0xff
    30ea:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    30ec:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    30ee:	06db      	lsls	r3, r3, #27
    30f0:	d400      	bmi.n	30f4 <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    30f2:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    30f4:	2208      	movs	r2, #8
    30f6:	0028      	movs	r0, r5
    30f8:	4b0a      	ldr	r3, [pc, #40]	; (3124 <_usb_d_dev_ep_read_req+0x6c>)
    30fa:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    30fc:	2210      	movs	r2, #16
    30fe:	2308      	movs	r3, #8
    3100:	33ff      	adds	r3, #255	; 0xff
    3102:	54e2      	strb	r2, [r4, r3]
	return bytes;
    3104:	0030      	movs	r0, r6
    3106:	e7f4      	b.n	30f2 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    3108:	2012      	movs	r0, #18
    310a:	4240      	negs	r0, r0
    310c:	e7f1      	b.n	30f2 <_usb_d_dev_ep_read_req+0x3a>
    310e:	2012      	movs	r0, #18
    3110:	4240      	negs	r0, r0
    3112:	e7ee      	b.n	30f2 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    3114:	2013      	movs	r0, #19
    3116:	4240      	negs	r0, r0
    3118:	e7eb      	b.n	30f2 <_usb_d_dev_ep_read_req+0x3a>
    311a:	46c0      	nop			; (mov r8, r8)
    311c:	200005b4 	.word	0x200005b4
    3120:	41005000 	.word	0x41005000
    3124:	00004525 	.word	0x00004525

00003128 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    3128:	b5f0      	push	{r4, r5, r6, r7, lr}
    312a:	46de      	mov	lr, fp
    312c:	4657      	mov	r7, sl
    312e:	464e      	mov	r6, r9
    3130:	4645      	mov	r5, r8
    3132:	b5e0      	push	{r5, r6, r7, lr}
    3134:	b085      	sub	sp, #20
    3136:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    3138:	7a06      	ldrb	r6, [r0, #8]
    313a:	230f      	movs	r3, #15
    313c:	4033      	ands	r3, r6
    313e:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3140:	2b00      	cmp	r3, #0
    3142:	d100      	bne.n	3146 <_usb_d_dev_ep_trans+0x1e>
    3144:	e0d3      	b.n	32ee <_usb_d_dev_ep_trans+0x1c6>
    3146:	0018      	movs	r0, r3
    3148:	2e00      	cmp	r6, #0
    314a:	db39      	blt.n	31c0 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    314c:	0004      	movs	r4, r0
    314e:	4a73      	ldr	r2, [pc, #460]	; (331c <_usb_d_dev_ep_trans+0x1f4>)
    3150:	3260      	adds	r2, #96	; 0x60
    3152:	1c41      	adds	r1, r0, #1
    3154:	008d      	lsls	r5, r1, #2
    3156:	186d      	adds	r5, r5, r1
    3158:	00ad      	lsls	r5, r5, #2
    315a:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    315c:	0081      	lsls	r1, r0, #2
    315e:	1809      	adds	r1, r1, r0
    3160:	0089      	lsls	r1, r1, #2
    3162:	1852      	adds	r2, r2, r1
    3164:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    3166:	4a6e      	ldr	r2, [pc, #440]	; (3320 <_usb_d_dev_ep_trans+0x1f8>)
    3168:	4291      	cmp	r1, r2
    316a:	d02b      	beq.n	31c4 <_usb_d_dev_ep_trans+0x9c>
    316c:	1e4f      	subs	r7, r1, #1
    316e:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    3170:	4642      	mov	r2, r8
    3172:	6852      	ldr	r2, [r2, #4]
    3174:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    3176:	2b02      	cmp	r3, #2
    3178:	d900      	bls.n	317c <_usb_d_dev_ep_trans+0x54>
    317a:	e0a4      	b.n	32c6 <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    317c:	4643      	mov	r3, r8
    317e:	681b      	ldr	r3, [r3, #0]
    3180:	4868      	ldr	r0, [pc, #416]	; (3324 <_usb_d_dev_ep_trans+0x1fc>)
    3182:	4283      	cmp	r3, r0
    3184:	d920      	bls.n	31c8 <_usb_d_dev_ep_trans+0xa0>
    3186:	1898      	adds	r0, r3, r2
    3188:	9001      	str	r0, [sp, #4]
    318a:	4867      	ldr	r0, [pc, #412]	; (3328 <_usb_d_dev_ep_trans+0x200>)
    318c:	4684      	mov	ip, r0
    318e:	9801      	ldr	r0, [sp, #4]
    3190:	4560      	cmp	r0, ip
    3192:	d819      	bhi.n	31c8 <_usb_d_dev_ep_trans+0xa0>
    3194:	079b      	lsls	r3, r3, #30
    3196:	d117      	bne.n	31c8 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    3198:	2e00      	cmp	r6, #0
    319a:	db32      	blt.n	3202 <_usb_d_dev_ep_trans+0xda>
    319c:	4291      	cmp	r1, r2
    319e:	d900      	bls.n	31a2 <_usb_d_dev_ep_trans+0x7a>
    31a0:	e0af      	b.n	3302 <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    31a2:	2f00      	cmp	r7, #0
    31a4:	d030      	beq.n	3208 <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    31a6:	00a3      	lsls	r3, r4, #2
    31a8:	191b      	adds	r3, r3, r4
    31aa:	009a      	lsls	r2, r3, #2
    31ac:	4b5b      	ldr	r3, [pc, #364]	; (331c <_usb_d_dev_ep_trans+0x1f4>)
    31ae:	189b      	adds	r3, r3, r2
    31b0:	3380      	adds	r3, #128	; 0x80
    31b2:	681b      	ldr	r3, [r3, #0]
    31b4:	2b00      	cmp	r3, #0
    31b6:	d100      	bne.n	31ba <_usb_d_dev_ep_trans+0x92>
    31b8:	e08b      	b.n	32d2 <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    31ba:	2300      	movs	r3, #0
    31bc:	4699      	mov	r9, r3
    31be:	e00f      	b.n	31e0 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    31c0:	1c98      	adds	r0, r3, #2
    31c2:	e7c3      	b.n	314c <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    31c4:	000f      	movs	r7, r1
    31c6:	e7d3      	b.n	3170 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    31c8:	00a3      	lsls	r3, r4, #2
    31ca:	191b      	adds	r3, r3, r4
    31cc:	009a      	lsls	r2, r3, #2
    31ce:	4b53      	ldr	r3, [pc, #332]	; (331c <_usb_d_dev_ep_trans+0x1f4>)
    31d0:	189b      	adds	r3, r3, r2
    31d2:	3380      	adds	r3, #128	; 0x80
    31d4:	681b      	ldr	r3, [r3, #0]
    31d6:	2b00      	cmp	r3, #0
    31d8:	d100      	bne.n	31dc <_usb_d_dev_ep_trans+0xb4>
    31da:	e077      	b.n	32cc <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    31dc:	2301      	movs	r3, #1
    31de:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    31e0:	00a3      	lsls	r3, r4, #2
    31e2:	191b      	adds	r3, r3, r4
    31e4:	009a      	lsls	r2, r3, #2
    31e6:	4b4d      	ldr	r3, [pc, #308]	; (331c <_usb_d_dev_ep_trans+0x1f4>)
    31e8:	189b      	adds	r3, r3, r2
    31ea:	3380      	adds	r3, #128	; 0x80
    31ec:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    31ee:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    31f0:	071b      	lsls	r3, r3, #28
    31f2:	d50c      	bpl.n	320e <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    31f4:	b005      	add	sp, #20
    31f6:	bc3c      	pop	{r2, r3, r4, r5}
    31f8:	4690      	mov	r8, r2
    31fa:	4699      	mov	r9, r3
    31fc:	46a2      	mov	sl, r4
    31fe:	46ab      	mov	fp, r5
    3200:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    3202:	2300      	movs	r3, #0
    3204:	4699      	mov	r9, r3
    3206:	e7eb      	b.n	31e0 <_usb_d_dev_ep_trans+0xb8>
    3208:	2300      	movs	r3, #0
    320a:	4699      	mov	r9, r3
    320c:	e7e8      	b.n	31e0 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    320e:	a803      	add	r0, sp, #12
    3210:	4b46      	ldr	r3, [pc, #280]	; (332c <_usb_d_dev_ep_trans+0x204>)
    3212:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    3214:	00a3      	lsls	r3, r4, #2
    3216:	191b      	adds	r3, r3, r4
    3218:	009a      	lsls	r2, r3, #2
    321a:	4b40      	ldr	r3, [pc, #256]	; (331c <_usb_d_dev_ep_trans+0x1f4>)
    321c:	189b      	adds	r3, r3, r2
    321e:	3380      	adds	r3, #128	; 0x80
    3220:	79db      	ldrb	r3, [r3, #7]
    3222:	065b      	lsls	r3, r3, #25
    3224:	d444      	bmi.n	32b0 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    3226:	00a3      	lsls	r3, r4, #2
    3228:	191b      	adds	r3, r3, r4
    322a:	009b      	lsls	r3, r3, #2
    322c:	4a3b      	ldr	r2, [pc, #236]	; (331c <_usb_d_dev_ep_trans+0x1f4>)
    322e:	4693      	mov	fp, r2
    3230:	449b      	add	fp, r3
    3232:	2380      	movs	r3, #128	; 0x80
    3234:	445b      	add	r3, fp
    3236:	469a      	mov	sl, r3
    3238:	79db      	ldrb	r3, [r3, #7]
    323a:	2240      	movs	r2, #64	; 0x40
    323c:	4313      	orrs	r3, r2
    323e:	4652      	mov	r2, sl
    3240:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    3242:	a803      	add	r0, sp, #12
    3244:	4b3a      	ldr	r3, [pc, #232]	; (3330 <_usb_d_dev_ep_trans+0x208>)
    3246:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    3248:	465b      	mov	r3, fp
    324a:	4642      	mov	r2, r8
    324c:	6812      	ldr	r2, [r2, #0]
    324e:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    3250:	4642      	mov	r2, r8
    3252:	6852      	ldr	r2, [r2, #4]
    3254:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    3256:	2300      	movs	r3, #0
    3258:	465a      	mov	r2, fp
    325a:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    325c:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    325e:	01d2      	lsls	r2, r2, #7
    3260:	4653      	mov	r3, sl
    3262:	79d9      	ldrb	r1, [r3, #7]
    3264:	237f      	movs	r3, #127	; 0x7f
    3266:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    3268:	4649      	mov	r1, r9
    326a:	0149      	lsls	r1, r1, #5
    326c:	4313      	orrs	r3, r2
    326e:	2220      	movs	r2, #32
    3270:	4393      	bics	r3, r2
    3272:	430b      	orrs	r3, r1
    3274:	4652      	mov	r2, sl
    3276:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3278:	4643      	mov	r3, r8
    327a:	7a5b      	ldrb	r3, [r3, #9]
    327c:	2200      	movs	r2, #0
    327e:	2b00      	cmp	r3, #0
    3280:	d002      	beq.n	3288 <_usb_d_dev_ep_trans+0x160>
    3282:	427a      	negs	r2, r7
    3284:	417a      	adcs	r2, r7
    3286:	b2d2      	uxtb	r2, r2
    3288:	00a3      	lsls	r3, r4, #2
    328a:	191c      	adds	r4, r3, r4
    328c:	00a4      	lsls	r4, r4, #2
    328e:	4b23      	ldr	r3, [pc, #140]	; (331c <_usb_d_dev_ep_trans+0x1f4>)
    3290:	191b      	adds	r3, r3, r4
    3292:	3380      	adds	r3, #128	; 0x80
    3294:	0112      	lsls	r2, r2, #4
    3296:	79df      	ldrb	r7, [r3, #7]
    3298:	2110      	movs	r1, #16
    329a:	438f      	bics	r7, r1
    329c:	4317      	orrs	r7, r2
    329e:	71df      	strb	r7, [r3, #7]
	if (dir) {
    32a0:	2e00      	cmp	r6, #0
    32a2:	db0a      	blt.n	32ba <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    32a4:	2100      	movs	r1, #0
    32a6:	0028      	movs	r0, r5
    32a8:	4b22      	ldr	r3, [pc, #136]	; (3334 <_usb_d_dev_ep_trans+0x20c>)
    32aa:	4798      	blx	r3
	return ERR_NONE;
    32ac:	2000      	movs	r0, #0
    32ae:	e7a1      	b.n	31f4 <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    32b0:	a803      	add	r0, sp, #12
    32b2:	4b1f      	ldr	r3, [pc, #124]	; (3330 <_usb_d_dev_ep_trans+0x208>)
    32b4:	4798      	blx	r3
		return USB_BUSY;
    32b6:	2001      	movs	r0, #1
    32b8:	e79c      	b.n	31f4 <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    32ba:	2100      	movs	r1, #0
    32bc:	0028      	movs	r0, r5
    32be:	4b1e      	ldr	r3, [pc, #120]	; (3338 <_usb_d_dev_ep_trans+0x210>)
    32c0:	4798      	blx	r3
	return ERR_NONE;
    32c2:	2000      	movs	r0, #0
    32c4:	e796      	b.n	31f4 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    32c6:	2012      	movs	r0, #18
    32c8:	4240      	negs	r0, r0
    32ca:	e793      	b.n	31f4 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    32cc:	2013      	movs	r0, #19
    32ce:	4240      	negs	r0, r0
    32d0:	e790      	b.n	31f4 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    32d2:	2012      	movs	r0, #18
    32d4:	4240      	negs	r0, r0
    32d6:	e78d      	b.n	31f4 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    32d8:	2013      	movs	r0, #19
    32da:	4240      	negs	r0, r0
    32dc:	e78a      	b.n	31f4 <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    32de:	4643      	mov	r3, r8
    32e0:	685a      	ldr	r2, [r3, #4]
    32e2:	0597      	lsls	r7, r2, #22
    32e4:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    32e6:	4d0d      	ldr	r5, [pc, #52]	; (331c <_usb_d_dev_ep_trans+0x1f4>)
    32e8:	3574      	adds	r5, #116	; 0x74
    32ea:	2400      	movs	r4, #0
    32ec:	e746      	b.n	317c <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    32ee:	4a0b      	ldr	r2, [pc, #44]	; (331c <_usb_d_dev_ep_trans+0x1f4>)
    32f0:	3260      	adds	r2, #96	; 0x60
    32f2:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    32f4:	4a0a      	ldr	r2, [pc, #40]	; (3320 <_usb_d_dev_ep_trans+0x1f8>)
    32f6:	4291      	cmp	r1, r2
    32f8:	d0f1      	beq.n	32de <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    32fa:	4d08      	ldr	r5, [pc, #32]	; (331c <_usb_d_dev_ep_trans+0x1f4>)
    32fc:	3574      	adds	r5, #116	; 0x74
    32fe:	2400      	movs	r4, #0
    3300:	e734      	b.n	316c <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    3302:	00a3      	lsls	r3, r4, #2
    3304:	191b      	adds	r3, r3, r4
    3306:	009a      	lsls	r2, r3, #2
    3308:	4b04      	ldr	r3, [pc, #16]	; (331c <_usb_d_dev_ep_trans+0x1f4>)
    330a:	189b      	adds	r3, r3, r2
    330c:	3380      	adds	r3, #128	; 0x80
    330e:	681b      	ldr	r3, [r3, #0]
    3310:	2b00      	cmp	r3, #0
    3312:	d0e1      	beq.n	32d8 <_usb_d_dev_ep_trans+0x1b0>
    3314:	2301      	movs	r3, #1
    3316:	4699      	mov	r9, r3
    3318:	e762      	b.n	31e0 <_usb_d_dev_ep_trans+0xb8>
    331a:	46c0      	nop			; (mov r8, r8)
    331c:	200005b4 	.word	0x200005b4
    3320:	000003ff 	.word	0x000003ff
    3324:	1fffffff 	.word	0x1fffffff
    3328:	20007fff 	.word	0x20007fff
    332c:	0000360d 	.word	0x0000360d
    3330:	0000361b 	.word	0x0000361b
    3334:	00002701 	.word	0x00002701
    3338:	00002559 	.word	0x00002559

0000333c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    333c:	1e0b      	subs	r3, r1, #0
    333e:	d006      	beq.n	334e <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    3340:	2801      	cmp	r0, #1
    3342:	d006      	beq.n	3352 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    3344:	2800      	cmp	r0, #0
    3346:	d101      	bne.n	334c <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    3348:	4a03      	ldr	r2, [pc, #12]	; (3358 <_usb_d_dev_register_callback+0x1c>)
    334a:	6613      	str	r3, [r2, #96]	; 0x60
	}
}
    334c:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    334e:	4b03      	ldr	r3, [pc, #12]	; (335c <_usb_d_dev_register_callback+0x20>)
    3350:	e7f6      	b.n	3340 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    3352:	4a01      	ldr	r2, [pc, #4]	; (3358 <_usb_d_dev_register_callback+0x1c>)
    3354:	6653      	str	r3, [r2, #100]	; 0x64
    3356:	e7f9      	b.n	334c <_usb_d_dev_register_callback+0x10>
    3358:	200005b4 	.word	0x200005b4
    335c:	000022c1 	.word	0x000022c1

00003360 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3360:	1e0b      	subs	r3, r1, #0
    3362:	d008      	beq.n	3376 <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    3364:	2800      	cmp	r0, #0
    3366:	d008      	beq.n	337a <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    3368:	2801      	cmp	r0, #1
    336a:	d009      	beq.n	3380 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    336c:	2802      	cmp	r0, #2
    336e:	d106      	bne.n	337e <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    3370:	4a05      	ldr	r2, [pc, #20]	; (3388 <_usb_d_dev_register_ep_callback+0x28>)
    3372:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    3374:	e003      	b.n	337e <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3376:	4b05      	ldr	r3, [pc, #20]	; (338c <_usb_d_dev_register_ep_callback+0x2c>)
    3378:	e7f4      	b.n	3364 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    337a:	4a03      	ldr	r2, [pc, #12]	; (3388 <_usb_d_dev_register_ep_callback+0x28>)
    337c:	6693      	str	r3, [r2, #104]	; 0x68
}
    337e:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    3380:	4a01      	ldr	r2, [pc, #4]	; (3388 <_usb_d_dev_register_ep_callback+0x28>)
    3382:	66d3      	str	r3, [r2, #108]	; 0x6c
    3384:	e7fb      	b.n	337e <_usb_d_dev_register_ep_callback+0x1e>
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	200005b4 	.word	0x200005b4
    338c:	000022c1 	.word	0x000022c1

00003390 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    3390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    3392:	4b82      	ldr	r3, [pc, #520]	; (359c <USB_Handler+0x20c>)
    3394:	8c1e      	ldrh	r6, [r3, #32]
    3396:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    3398:	2e00      	cmp	r6, #0
    339a:	d003      	beq.n	33a4 <USB_Handler+0x14>
    339c:	4c80      	ldr	r4, [pc, #512]	; (35a0 <USB_Handler+0x210>)
    339e:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    33a0:	2500      	movs	r5, #0
    33a2:	e0b9      	b.n	3518 <USB_Handler+0x188>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    33a4:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    33a6:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    33a8:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    33aa:	075a      	lsls	r2, r3, #29
    33ac:	d417      	bmi.n	33de <USB_Handler+0x4e>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    33ae:	059a      	lsls	r2, r3, #22
    33b0:	d41c      	bmi.n	33ec <USB_Handler+0x5c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    33b2:	061a      	lsls	r2, r3, #24
    33b4:	d43e      	bmi.n	3434 <USB_Handler+0xa4>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    33b6:	2270      	movs	r2, #112	; 0x70
    33b8:	421a      	tst	r2, r3
    33ba:	d144      	bne.n	3446 <USB_Handler+0xb6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    33bc:	071a      	lsls	r2, r3, #28
    33be:	d45e      	bmi.n	347e <USB_Handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    33c0:	07db      	lsls	r3, r3, #31
    33c2:	d5eb      	bpl.n	339c <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    33c4:	4b75      	ldr	r3, [pc, #468]	; (359c <USB_Handler+0x20c>)
    33c6:	4a77      	ldr	r2, [pc, #476]	; (35a4 <USB_Handler+0x214>)
    33c8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    33ca:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    33cc:	3a92      	subs	r2, #146	; 0x92
    33ce:	3aff      	subs	r2, #255	; 0xff
    33d0:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    33d2:	4b73      	ldr	r3, [pc, #460]	; (35a0 <USB_Handler+0x210>)
    33d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    33d6:	2100      	movs	r1, #0
    33d8:	2004      	movs	r0, #4
    33da:	4798      	blx	r3
    33dc:	e005      	b.n	33ea <USB_Handler+0x5a>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    33de:	2204      	movs	r2, #4
    33e0:	4b6e      	ldr	r3, [pc, #440]	; (359c <USB_Handler+0x20c>)
    33e2:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    33e4:	4b6e      	ldr	r3, [pc, #440]	; (35a0 <USB_Handler+0x210>)
    33e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    33e8:	4798      	blx	r3

	_usb_d_dev_handler();
}
    33ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33ec:	4b6b      	ldr	r3, [pc, #428]	; (359c <USB_Handler+0x20c>)
    33ee:	4a6d      	ldr	r2, [pc, #436]	; (35a4 <USB_Handler+0x214>)
    33f0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    33f2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    33f4:	3a92      	subs	r2, #146	; 0x92
    33f6:	3aff      	subs	r2, #255	; 0xff
    33f8:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    33fa:	4b69      	ldr	r3, [pc, #420]	; (35a0 <USB_Handler+0x210>)
    33fc:	891b      	ldrh	r3, [r3, #8]
    33fe:	071b      	lsls	r3, r3, #28
    3400:	0f1b      	lsrs	r3, r3, #28
    3402:	2b03      	cmp	r3, #3
    3404:	d00c      	beq.n	3420 <USB_Handler+0x90>
    3406:	4b66      	ldr	r3, [pc, #408]	; (35a0 <USB_Handler+0x210>)
    3408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    340a:	071b      	lsls	r3, r3, #28
    340c:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    340e:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3410:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    3412:	2b03      	cmp	r3, #3
    3414:	d005      	beq.n	3422 <USB_Handler+0x92>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    3416:	4b62      	ldr	r3, [pc, #392]	; (35a0 <USB_Handler+0x210>)
    3418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    341a:	2003      	movs	r0, #3
    341c:	4798      	blx	r3
    341e:	e7e4      	b.n	33ea <USB_Handler+0x5a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3420:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    3422:	0152      	lsls	r2, r2, #5
    3424:	4b5e      	ldr	r3, [pc, #376]	; (35a0 <USB_Handler+0x210>)
    3426:	189b      	adds	r3, r3, r2
    3428:	8919      	ldrh	r1, [r3, #8]
    342a:	0449      	lsls	r1, r1, #17
    342c:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    342e:	2200      	movs	r2, #0
    3430:	811a      	strh	r2, [r3, #8]
    3432:	e7f0      	b.n	3416 <USB_Handler+0x86>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3434:	2280      	movs	r2, #128	; 0x80
    3436:	4b59      	ldr	r3, [pc, #356]	; (359c <USB_Handler+0x20c>)
    3438:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    343a:	4b59      	ldr	r3, [pc, #356]	; (35a0 <USB_Handler+0x210>)
    343c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    343e:	2100      	movs	r1, #0
    3440:	2005      	movs	r0, #5
    3442:	4798      	blx	r3
    3444:	e7d1      	b.n	33ea <USB_Handler+0x5a>
    3446:	4b55      	ldr	r3, [pc, #340]	; (359c <USB_Handler+0x20c>)
    3448:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    344a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    344c:	4a55      	ldr	r2, [pc, #340]	; (35a4 <USB_Handler+0x214>)
    344e:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3450:	4b55      	ldr	r3, [pc, #340]	; (35a8 <USB_Handler+0x218>)
    3452:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3454:	069b      	lsls	r3, r3, #26
    3456:	d40c      	bmi.n	3472 <USB_Handler+0xe2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3458:	4953      	ldr	r1, [pc, #332]	; (35a8 <USB_Handler+0x218>)
	tmp &= mask;
    345a:	3a32      	subs	r2, #50	; 0x32
    345c:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    345e:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    3460:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    3462:	2bd0      	cmp	r3, #208	; 0xd0
    3464:	d1fb      	bne.n	345e <USB_Handler+0xce>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    3466:	4b4e      	ldr	r3, [pc, #312]	; (35a0 <USB_Handler+0x210>)
    3468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    346a:	2100      	movs	r1, #0
    346c:	2002      	movs	r0, #2
    346e:	4798      	blx	r3
    3470:	e7bb      	b.n	33ea <USB_Handler+0x5a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3472:	494d      	ldr	r1, [pc, #308]	; (35a8 <USB_Handler+0x218>)
	tmp &= mask;
    3474:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3476:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    3478:	421a      	tst	r2, r3
    347a:	d0fc      	beq.n	3476 <USB_Handler+0xe6>
    347c:	e7f3      	b.n	3466 <USB_Handler+0xd6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    347e:	4b47      	ldr	r3, [pc, #284]	; (359c <USB_Handler+0x20c>)
    3480:	2100      	movs	r1, #0
    3482:	2280      	movs	r2, #128	; 0x80
    3484:	0052      	lsls	r2, r2, #1
    3486:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3488:	3af8      	subs	r2, #248	; 0xf8
    348a:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    348c:	3268      	adds	r2, #104	; 0x68
    348e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3490:	4a44      	ldr	r2, [pc, #272]	; (35a4 <USB_Handler+0x214>)
    3492:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    3494:	4b45      	ldr	r3, [pc, #276]	; (35ac <USB_Handler+0x21c>)
    3496:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    3498:	4b41      	ldr	r3, [pc, #260]	; (35a0 <USB_Handler+0x210>)
    349a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    349c:	2100      	movs	r1, #0
    349e:	2001      	movs	r0, #1
    34a0:	4798      	blx	r3
    34a2:	e7a2      	b.n	33ea <USB_Handler+0x5a>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    34a4:	06cb      	lsls	r3, r1, #27
    34a6:	d407      	bmi.n	34b8 <USB_Handler+0x128>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    34a8:	064b      	lsls	r3, r1, #25
    34aa:	d408      	bmi.n	34be <USB_Handler+0x12e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    34ac:	068b      	lsls	r3, r1, #26
    34ae:	d52e      	bpl.n	350e <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    34b0:	2100      	movs	r1, #0
    34b2:	4b3f      	ldr	r3, [pc, #252]	; (35b0 <USB_Handler+0x220>)
    34b4:	4798      	blx	r3
    34b6:	e02a      	b.n	350e <USB_Handler+0x17e>
		_usb_d_dev_handle_setup(ept);
    34b8:	4b3e      	ldr	r3, [pc, #248]	; (35b4 <USB_Handler+0x224>)
    34ba:	4798      	blx	r3
    34bc:	e027      	b.n	350e <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    34be:	2101      	movs	r1, #1
    34c0:	4b3b      	ldr	r3, [pc, #236]	; (35b0 <USB_Handler+0x220>)
    34c2:	4798      	blx	r3
    34c4:	e023      	b.n	350e <USB_Handler+0x17e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    34c6:	064b      	lsls	r3, r1, #25
    34c8:	d40e      	bmi.n	34e8 <USB_Handler+0x158>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    34ca:	070b      	lsls	r3, r1, #28
    34cc:	d410      	bmi.n	34f0 <USB_Handler+0x160>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    34ce:	078b      	lsls	r3, r1, #30
    34d0:	d412      	bmi.n	34f8 <USB_Handler+0x168>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    34d2:	2307      	movs	r3, #7
    34d4:	401a      	ands	r2, r3
    34d6:	2a01      	cmp	r2, #1
    34d8:	d119      	bne.n	350e <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    34da:	074b      	lsls	r3, r1, #29
    34dc:	d410      	bmi.n	3500 <USB_Handler+0x170>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    34de:	06cb      	lsls	r3, r1, #27
    34e0:	d515      	bpl.n	350e <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    34e2:	4b34      	ldr	r3, [pc, #208]	; (35b4 <USB_Handler+0x224>)
    34e4:	4798      	blx	r3
    34e6:	e012      	b.n	350e <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    34e8:	2101      	movs	r1, #1
    34ea:	4b31      	ldr	r3, [pc, #196]	; (35b0 <USB_Handler+0x220>)
    34ec:	4798      	blx	r3
    34ee:	e00e      	b.n	350e <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 1);
    34f0:	2101      	movs	r1, #1
    34f2:	4b31      	ldr	r3, [pc, #196]	; (35b8 <USB_Handler+0x228>)
    34f4:	4798      	blx	r3
    34f6:	e00a      	b.n	350e <USB_Handler+0x17e>
		_usb_d_dev_in_next(ept, true);
    34f8:	2101      	movs	r1, #1
    34fa:	4b30      	ldr	r3, [pc, #192]	; (35bc <USB_Handler+0x22c>)
    34fc:	4798      	blx	r3
    34fe:	e006      	b.n	350e <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 0);
    3500:	2100      	movs	r1, #0
    3502:	4b2d      	ldr	r3, [pc, #180]	; (35b8 <USB_Handler+0x228>)
    3504:	4798      	blx	r3
    3506:	e002      	b.n	350e <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    3508:	2100      	movs	r1, #0
    350a:	4b29      	ldr	r3, [pc, #164]	; (35b0 <USB_Handler+0x220>)
    350c:	4798      	blx	r3
    350e:	3501      	adds	r5, #1
    3510:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    3512:	2d09      	cmp	r5, #9
    3514:	d100      	bne.n	3518 <USB_Handler+0x188>
    3516:	e768      	b.n	33ea <USB_Handler+0x5a>
    3518:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    351a:	7ca1      	ldrb	r1, [r4, #18]
    351c:	29ff      	cmp	r1, #255	; 0xff
    351e:	d0f6      	beq.n	350e <USB_Handler+0x17e>
	if (!(epint & (1u << epn))) {
    3520:	230f      	movs	r3, #15
    3522:	400b      	ands	r3, r1
    3524:	2101      	movs	r1, #1
    3526:	4099      	lsls	r1, r3
    3528:	420e      	tst	r6, r1
    352a:	d0f0      	beq.n	350e <USB_Handler+0x17e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    352c:	0159      	lsls	r1, r3, #5
    352e:	4f24      	ldr	r7, [pc, #144]	; (35c0 <USB_Handler+0x230>)
    3530:	46bc      	mov	ip, r7
    3532:	4461      	add	r1, ip
    3534:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3536:	015b      	lsls	r3, r3, #5
    3538:	4f22      	ldr	r7, [pc, #136]	; (35c4 <USB_Handler+0x234>)
    353a:	46bc      	mov	ip, r7
    353c:	4463      	add	r3, ip
    353e:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    3540:	4019      	ands	r1, r3
	if (flags) {
    3542:	d0e4      	beq.n	350e <USB_Handler+0x17e>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3544:	00ab      	lsls	r3, r5, #2
    3546:	195a      	adds	r2, r3, r5
    3548:	0092      	lsls	r2, r2, #2
    354a:	4b15      	ldr	r3, [pc, #84]	; (35a0 <USB_Handler+0x210>)
    354c:	469c      	mov	ip, r3
    354e:	4462      	add	r2, ip
    3550:	3270      	adds	r2, #112	; 0x70
    3552:	7dd2      	ldrb	r2, [r2, #23]
    3554:	2347      	movs	r3, #71	; 0x47
    3556:	4013      	ands	r3, r2
    3558:	2b01      	cmp	r3, #1
    355a:	d0a3      	beq.n	34a4 <USB_Handler+0x114>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    355c:	b253      	sxtb	r3, r2
    355e:	2b00      	cmp	r3, #0
    3560:	dbb1      	blt.n	34c6 <USB_Handler+0x136>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3562:	068b      	lsls	r3, r1, #26
    3564:	d4d0      	bmi.n	3508 <USB_Handler+0x178>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3566:	074b      	lsls	r3, r1, #29
    3568:	d40c      	bmi.n	3584 <USB_Handler+0x1f4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    356a:	07cb      	lsls	r3, r1, #31
    356c:	d40e      	bmi.n	358c <USB_Handler+0x1fc>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    356e:	2307      	movs	r3, #7
    3570:	401a      	ands	r2, r3
    3572:	2a01      	cmp	r2, #1
    3574:	d1cb      	bne.n	350e <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3576:	070b      	lsls	r3, r1, #28
    3578:	d40c      	bmi.n	3594 <USB_Handler+0x204>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    357a:	06cb      	lsls	r3, r1, #27
    357c:	d5c7      	bpl.n	350e <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    357e:	4b0d      	ldr	r3, [pc, #52]	; (35b4 <USB_Handler+0x224>)
    3580:	4798      	blx	r3
    3582:	e7c4      	b.n	350e <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 0);
    3584:	2100      	movs	r1, #0
    3586:	4b0c      	ldr	r3, [pc, #48]	; (35b8 <USB_Handler+0x228>)
    3588:	4798      	blx	r3
    358a:	e7c0      	b.n	350e <USB_Handler+0x17e>
		_usb_d_dev_out_next(ept, true);
    358c:	2101      	movs	r1, #1
    358e:	4b0e      	ldr	r3, [pc, #56]	; (35c8 <USB_Handler+0x238>)
    3590:	4798      	blx	r3
    3592:	e7bc      	b.n	350e <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 1);
    3594:	2101      	movs	r1, #1
    3596:	4b08      	ldr	r3, [pc, #32]	; (35b8 <USB_Handler+0x228>)
    3598:	4798      	blx	r3
    359a:	e7b8      	b.n	350e <USB_Handler+0x17e>
    359c:	41005000 	.word	0x41005000
    35a0:	200005b4 	.word	0x200005b4
    35a4:	00000201 	.word	0x00000201
    35a8:	40000800 	.word	0x40000800
    35ac:	00002515 	.word	0x00002515
    35b0:	00002351 	.word	0x00002351
    35b4:	000022c5 	.word	0x000022c5
    35b8:	00002415 	.word	0x00002415
    35bc:	00002559 	.word	0x00002559
    35c0:	41005100 	.word	0x41005100
    35c4:	41005109 	.word	0x41005109
    35c8:	00002701 	.word	0x00002701

000035cc <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    35cc:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    35ce:	4806      	ldr	r0, [pc, #24]	; (35e8 <cdc_device_acm_init+0x1c>)
    35d0:	3040      	adds	r0, #64	; 0x40
    35d2:	4b06      	ldr	r3, [pc, #24]	; (35ec <cdc_device_acm_init+0x20>)
    35d4:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    35d6:	4b06      	ldr	r3, [pc, #24]	; (35f0 <cdc_device_acm_init+0x24>)
    35d8:	4798      	blx	r3

	usbdc_start(single_desc);
    35da:	4806      	ldr	r0, [pc, #24]	; (35f4 <cdc_device_acm_init+0x28>)
    35dc:	4b06      	ldr	r3, [pc, #24]	; (35f8 <cdc_device_acm_init+0x2c>)
    35de:	4798      	blx	r3
	usbdc_attach();
    35e0:	4b06      	ldr	r3, [pc, #24]	; (35fc <cdc_device_acm_init+0x30>)
    35e2:	4798      	blx	r3
}
    35e4:	bd10      	pop	{r4, pc}
    35e6:	46c0      	nop			; (mov r8, r8)
    35e8:	2000079c 	.word	0x2000079c
    35ec:	00003f3d 	.word	0x00003f3d
    35f0:	000038c1 	.word	0x000038c1
    35f4:	20000004 	.word	0x20000004
    35f8:	00003fb5 	.word	0x00003fb5
    35fc:	00003fed 	.word	0x00003fed

00003600 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    3600:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    3602:	4b01      	ldr	r3, [pc, #4]	; (3608 <usb_init+0x8>)
    3604:	4798      	blx	r3
}
    3606:	bd10      	pop	{r4, pc}
    3608:	000035cd 	.word	0x000035cd

0000360c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    360c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    3610:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3612:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3614:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    3618:	4770      	bx	lr

0000361a <atomic_leave_critical>:
    361a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    361e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3620:	f383 8810 	msr	PRIMASK, r3
}
    3624:	4770      	bx	lr
	...

00003628 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3628:	b5f0      	push	{r4, r5, r6, r7, lr}
    362a:	b083      	sub	sp, #12
    362c:	0006      	movs	r6, r0
    362e:	000c      	movs	r4, r1
    3630:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    3632:	780a      	ldrb	r2, [r1, #0]
    3634:	0653      	lsls	r3, r2, #25
    3636:	0f9b      	lsrs	r3, r3, #30
    3638:	2b01      	cmp	r3, #1
    363a:	d000      	beq.n	363e <cdcdf_acm_req+0x16>
    363c:	e06c      	b.n	3718 <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    363e:	7909      	ldrb	r1, [r1, #4]
    3640:	7963      	ldrb	r3, [r4, #5]
    3642:	021b      	lsls	r3, r3, #8
    3644:	430b      	orrs	r3, r1
    3646:	493b      	ldr	r1, [pc, #236]	; (3734 <cdcdf_acm_req+0x10c>)
    3648:	7809      	ldrb	r1, [r1, #0]
    364a:	4299      	cmp	r1, r3
    364c:	d003      	beq.n	3656 <cdcdf_acm_req+0x2e>
    364e:	4939      	ldr	r1, [pc, #228]	; (3734 <cdcdf_acm_req+0x10c>)
    3650:	7849      	ldrb	r1, [r1, #1]
    3652:	4299      	cmp	r1, r3
    3654:	d163      	bne.n	371e <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    3656:	b252      	sxtb	r2, r2
    3658:	2a00      	cmp	r2, #0
    365a:	db0e      	blt.n	367a <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    365c:	79a7      	ldrb	r7, [r4, #6]
    365e:	79e3      	ldrb	r3, [r4, #7]
    3660:	021b      	lsls	r3, r3, #8
    3662:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    3664:	4b34      	ldr	r3, [pc, #208]	; (3738 <cdcdf_acm_req+0x110>)
    3666:	4798      	blx	r3
	switch (req->bRequest) {
    3668:	7863      	ldrb	r3, [r4, #1]
    366a:	2b20      	cmp	r3, #32
    366c:	d018      	beq.n	36a0 <cdcdf_acm_req+0x78>
    366e:	2b22      	cmp	r3, #34	; 0x22
    3670:	d03c      	beq.n	36ec <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    3672:	200d      	movs	r0, #13
    3674:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    3676:	b003      	add	sp, #12
    3678:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    367a:	2d01      	cmp	r5, #1
    367c:	d052      	beq.n	3724 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    367e:	7863      	ldrb	r3, [r4, #1]
    3680:	2b21      	cmp	r3, #33	; 0x21
    3682:	d151      	bne.n	3728 <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    3684:	79a2      	ldrb	r2, [r4, #6]
    3686:	79e3      	ldrb	r3, [r4, #7]
    3688:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    368a:	4313      	orrs	r3, r2
    368c:	2b07      	cmp	r3, #7
    368e:	d14e      	bne.n	372e <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    3690:	2300      	movs	r3, #0
    3692:	2207      	movs	r2, #7
    3694:	4927      	ldr	r1, [pc, #156]	; (3734 <cdcdf_acm_req+0x10c>)
    3696:	3108      	adds	r1, #8
    3698:	0030      	movs	r0, r6
    369a:	4c28      	ldr	r4, [pc, #160]	; (373c <cdcdf_acm_req+0x114>)
    369c:	47a0      	blx	r4
    369e:	e7ea      	b.n	3676 <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    36a0:	2f07      	cmp	r7, #7
    36a2:	d134      	bne.n	370e <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    36a4:	2d00      	cmp	r5, #0
    36a6:	d01a      	beq.n	36de <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    36a8:	2207      	movs	r2, #7
    36aa:	0001      	movs	r1, r0
    36ac:	4668      	mov	r0, sp
    36ae:	4b24      	ldr	r3, [pc, #144]	; (3740 <cdcdf_acm_req+0x118>)
    36b0:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    36b2:	4b20      	ldr	r3, [pc, #128]	; (3734 <cdcdf_acm_req+0x10c>)
    36b4:	691b      	ldr	r3, [r3, #16]
    36b6:	2b00      	cmp	r3, #0
    36b8:	d005      	beq.n	36c6 <cdcdf_acm_req+0x9e>
    36ba:	4668      	mov	r0, sp
    36bc:	4798      	blx	r3
    36be:	0003      	movs	r3, r0
			return ERR_NONE;
    36c0:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    36c2:	2b00      	cmp	r3, #0
    36c4:	d0d7      	beq.n	3676 <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    36c6:	4a1b      	ldr	r2, [pc, #108]	; (3734 <cdcdf_acm_req+0x10c>)
    36c8:	0013      	movs	r3, r2
    36ca:	9900      	ldr	r1, [sp, #0]
    36cc:	6091      	str	r1, [r2, #8]
    36ce:	466a      	mov	r2, sp
    36d0:	8892      	ldrh	r2, [r2, #4]
    36d2:	819a      	strh	r2, [r3, #12]
    36d4:	466a      	mov	r2, sp
    36d6:	7992      	ldrb	r2, [r2, #6]
    36d8:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    36da:	2000      	movs	r0, #0
    36dc:	e7cb      	b.n	3676 <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    36de:	2300      	movs	r3, #0
    36e0:	2207      	movs	r2, #7
    36e2:	0001      	movs	r1, r0
    36e4:	0030      	movs	r0, r6
    36e6:	4c15      	ldr	r4, [pc, #84]	; (373c <cdcdf_acm_req+0x114>)
    36e8:	47a0      	blx	r4
    36ea:	e7c4      	b.n	3676 <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    36ec:	2300      	movs	r3, #0
    36ee:	2200      	movs	r2, #0
    36f0:	2100      	movs	r1, #0
    36f2:	2000      	movs	r0, #0
    36f4:	4d11      	ldr	r5, [pc, #68]	; (373c <cdcdf_acm_req+0x114>)
    36f6:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    36f8:	4b0e      	ldr	r3, [pc, #56]	; (3734 <cdcdf_acm_req+0x10c>)
    36fa:	695b      	ldr	r3, [r3, #20]
    36fc:	2b00      	cmp	r3, #0
    36fe:	d009      	beq.n	3714 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    3700:	78a2      	ldrb	r2, [r4, #2]
    3702:	78e0      	ldrb	r0, [r4, #3]
    3704:	0200      	lsls	r0, r0, #8
    3706:	4310      	orrs	r0, r2
    3708:	4798      	blx	r3
		return ERR_NONE;
    370a:	2000      	movs	r0, #0
    370c:	e7b3      	b.n	3676 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    370e:	2001      	movs	r0, #1
    3710:	4240      	negs	r0, r0
    3712:	e7b0      	b.n	3676 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    3714:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    3716:	e7ae      	b.n	3676 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    3718:	200a      	movs	r0, #10
    371a:	4240      	negs	r0, r0
    371c:	e7ab      	b.n	3676 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    371e:	200a      	movs	r0, #10
    3720:	4240      	negs	r0, r0
    3722:	e7a8      	b.n	3676 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    3724:	2000      	movs	r0, #0
    3726:	e7a6      	b.n	3676 <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    3728:	200d      	movs	r0, #13
    372a:	4240      	negs	r0, r0
    372c:	e7a3      	b.n	3676 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    372e:	2001      	movs	r0, #1
    3730:	4240      	negs	r0, r0
    3732:	e7a0      	b.n	3676 <cdcdf_acm_req+0x4e>
    3734:	2000081c 	.word	0x2000081c
    3738:	00003ff9 	.word	0x00003ff9
    373c:	00003aa9 	.word	0x00003aa9
    3740:	00004525 	.word	0x00004525

00003744 <cdcdf_acm_ctrl>:
{
    3744:	b5f0      	push	{r4, r5, r6, r7, lr}
    3746:	46de      	mov	lr, fp
    3748:	4657      	mov	r7, sl
    374a:	464e      	mov	r6, r9
    374c:	4645      	mov	r5, r8
    374e:	b5e0      	push	{r5, r6, r7, lr}
    3750:	b083      	sub	sp, #12
    3752:	0016      	movs	r6, r2
	switch (ctrl) {
    3754:	2901      	cmp	r1, #1
    3756:	d068      	beq.n	382a <cdcdf_acm_ctrl+0xe6>
    3758:	2900      	cmp	r1, #0
    375a:	d00b      	beq.n	3774 <cdcdf_acm_ctrl+0x30>
    375c:	2902      	cmp	r1, #2
    375e:	d100      	bne.n	3762 <cdcdf_acm_ctrl+0x1e>
    3760:	e093      	b.n	388a <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    3762:	200d      	movs	r0, #13
    3764:	4240      	negs	r0, r0
}
    3766:	b003      	add	sp, #12
    3768:	bc3c      	pop	{r2, r3, r4, r5}
    376a:	4690      	mov	r8, r2
    376c:	4699      	mov	r9, r3
    376e:	46a2      	mov	sl, r4
    3770:	46ab      	mov	fp, r5
    3772:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3774:	6883      	ldr	r3, [r0, #8]
    3776:	4698      	mov	r8, r3
	ifc = desc->sod;
    3778:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    377a:	2800      	cmp	r0, #0
    377c:	d100      	bne.n	3780 <cdcdf_acm_ctrl+0x3c>
    377e:	e087      	b.n	3890 <cdcdf_acm_ctrl+0x14c>
    3780:	9301      	str	r3, [sp, #4]
    3782:	2301      	movs	r3, #1
    3784:	4443      	add	r3, r8
    3786:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3788:	4f47      	ldr	r7, [pc, #284]	; (38a8 <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    378a:	4b48      	ldr	r3, [pc, #288]	; (38ac <cdcdf_acm_ctrl+0x168>)
    378c:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    378e:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    3790:	7943      	ldrb	r3, [r0, #5]
    3792:	2108      	movs	r1, #8
    3794:	438b      	bics	r3, r1
    3796:	2b02      	cmp	r3, #2
    3798:	d002      	beq.n	37a0 <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    379a:	200a      	movs	r0, #10
    379c:	4240      	negs	r0, r0
    379e:	e7e2      	b.n	3766 <cdcdf_acm_ctrl+0x22>
    37a0:	9901      	ldr	r1, [sp, #4]
    37a2:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    37a4:	780b      	ldrb	r3, [r1, #0]
    37a6:	429a      	cmp	r2, r3
    37a8:	d075      	beq.n	3896 <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    37aa:	2bff      	cmp	r3, #255	; 0xff
    37ac:	d176      	bne.n	389c <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    37ae:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    37b0:	2205      	movs	r2, #5
    37b2:	6871      	ldr	r1, [r6, #4]
    37b4:	4b3e      	ldr	r3, [pc, #248]	; (38b0 <cdcdf_acm_ctrl+0x16c>)
    37b6:	4798      	blx	r3
    37b8:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    37ba:	d11e      	bne.n	37fa <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    37bc:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    37be:	7803      	ldrb	r3, [r0, #0]
    37c0:	18c0      	adds	r0, r0, r3
    37c2:	2204      	movs	r2, #4
    37c4:	6871      	ldr	r1, [r6, #4]
    37c6:	4b3a      	ldr	r3, [pc, #232]	; (38b0 <cdcdf_acm_ctrl+0x16c>)
    37c8:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    37ca:	9b01      	ldr	r3, [sp, #4]
    37cc:	455b      	cmp	r3, fp
    37ce:	d027      	beq.n	3820 <cdcdf_acm_ctrl+0xdc>
    37d0:	9b01      	ldr	r3, [sp, #4]
    37d2:	3301      	adds	r3, #1
    37d4:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    37d6:	2800      	cmp	r0, #0
    37d8:	d1d9      	bne.n	378e <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    37da:	200a      	movs	r0, #10
    37dc:	4240      	negs	r0, r0
    37de:	e7c2      	b.n	3766 <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    37e0:	4653      	mov	r3, sl
    37e2:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    37e4:	0028      	movs	r0, r5
    37e6:	4b31      	ldr	r3, [pc, #196]	; (38ac <cdcdf_acm_ctrl+0x168>)
    37e8:	4798      	blx	r3
			desc->sod = ep;
    37ea:	6034      	str	r4, [r6, #0]
    37ec:	7820      	ldrb	r0, [r4, #0]
    37ee:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    37f0:	6871      	ldr	r1, [r6, #4]
    37f2:	4b30      	ldr	r3, [pc, #192]	; (38b4 <cdcdf_acm_ctrl+0x170>)
    37f4:	4798      	blx	r3
    37f6:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    37f8:	d0e0      	beq.n	37bc <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    37fa:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    37fc:	7963      	ldrb	r3, [r4, #5]
    37fe:	021b      	lsls	r3, r3, #8
    3800:	7922      	ldrb	r2, [r4, #4]
    3802:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3804:	b292      	uxth	r2, r2
    3806:	78e1      	ldrb	r1, [r4, #3]
    3808:	0028      	movs	r0, r5
    380a:	47b8      	blx	r7
    380c:	2800      	cmp	r0, #0
    380e:	d148      	bne.n	38a2 <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    3810:	b26b      	sxtb	r3, r5
    3812:	2b00      	cmp	r3, #0
    3814:	dbe4      	blt.n	37e0 <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    3816:	4643      	mov	r3, r8
    3818:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    381a:	0028      	movs	r0, r5
    381c:	47c8      	blx	r9
    381e:	e7e4      	b.n	37ea <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    3820:	2201      	movs	r2, #1
    3822:	4b25      	ldr	r3, [pc, #148]	; (38b8 <cdcdf_acm_ctrl+0x174>)
    3824:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    3826:	2000      	movs	r0, #0
    3828:	e79d      	b.n	3766 <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    382a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    382c:	2a00      	cmp	r2, #0
    382e:	d008      	beq.n	3842 <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    3830:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    3832:	795b      	ldrb	r3, [r3, #5]
    3834:	2208      	movs	r2, #8
    3836:	4393      	bics	r3, r2
    3838:	2b02      	cmp	r3, #2
    383a:	d002      	beq.n	3842 <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    383c:	200a      	movs	r0, #10
    383e:	4240      	negs	r0, r0
    3840:	e791      	b.n	3766 <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    3842:	7823      	ldrb	r3, [r4, #0]
    3844:	2bff      	cmp	r3, #255	; 0xff
    3846:	d008      	beq.n	385a <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    3848:	23ff      	movs	r3, #255	; 0xff
    384a:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    384c:	78a0      	ldrb	r0, [r4, #2]
    384e:	28ff      	cmp	r0, #255	; 0xff
    3850:	d003      	beq.n	385a <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3852:	4b1a      	ldr	r3, [pc, #104]	; (38bc <cdcdf_acm_ctrl+0x178>)
    3854:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3856:	23ff      	movs	r3, #255	; 0xff
    3858:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    385a:	7863      	ldrb	r3, [r4, #1]
    385c:	2bff      	cmp	r3, #255	; 0xff
    385e:	d008      	beq.n	3872 <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    3860:	23ff      	movs	r3, #255	; 0xff
    3862:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    3864:	78e0      	ldrb	r0, [r4, #3]
    3866:	28ff      	cmp	r0, #255	; 0xff
    3868:	d003      	beq.n	3872 <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    386a:	4b14      	ldr	r3, [pc, #80]	; (38bc <cdcdf_acm_ctrl+0x178>)
    386c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    386e:	23ff      	movs	r3, #255	; 0xff
    3870:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    3872:	7920      	ldrb	r0, [r4, #4]
    3874:	28ff      	cmp	r0, #255	; 0xff
    3876:	d003      	beq.n	3880 <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    3878:	4b10      	ldr	r3, [pc, #64]	; (38bc <cdcdf_acm_ctrl+0x178>)
    387a:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    387c:	23ff      	movs	r3, #255	; 0xff
    387e:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    3880:	2200      	movs	r2, #0
    3882:	4b0d      	ldr	r3, [pc, #52]	; (38b8 <cdcdf_acm_ctrl+0x174>)
    3884:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    3886:	2000      	movs	r0, #0
    3888:	e76d      	b.n	3766 <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    388a:	201b      	movs	r0, #27
    388c:	4240      	negs	r0, r0
    388e:	e76a      	b.n	3766 <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    3890:	200a      	movs	r0, #10
    3892:	4240      	negs	r0, r0
    3894:	e767      	b.n	3766 <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    3896:	2012      	movs	r0, #18
    3898:	4240      	negs	r0, r0
    389a:	e764      	b.n	3766 <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    389c:	201c      	movs	r0, #28
    389e:	4240      	negs	r0, r0
    38a0:	e761      	b.n	3766 <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    38a2:	2014      	movs	r0, #20
    38a4:	4240      	negs	r0, r0
    38a6:	e75e      	b.n	3766 <cdcdf_acm_ctrl+0x22>
    38a8:	000016d9 	.word	0x000016d9
    38ac:	0000176d 	.word	0x0000176d
    38b0:	00004015 	.word	0x00004015
    38b4:	0000404b 	.word	0x0000404b
    38b8:	2000081c 	.word	0x2000081c
    38bc:	00001741 	.word	0x00001741

000038c0 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    38c0:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    38c2:	4b0a      	ldr	r3, [pc, #40]	; (38ec <cdcdf_acm_init+0x2c>)
    38c4:	4798      	blx	r3
    38c6:	2801      	cmp	r0, #1
    38c8:	d80c      	bhi.n	38e4 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    38ca:	4809      	ldr	r0, [pc, #36]	; (38f0 <cdcdf_acm_init+0x30>)
    38cc:	4b09      	ldr	r3, [pc, #36]	; (38f4 <cdcdf_acm_init+0x34>)
    38ce:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    38d0:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    38d2:	3018      	adds	r0, #24
    38d4:	4b08      	ldr	r3, [pc, #32]	; (38f8 <cdcdf_acm_init+0x38>)
    38d6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    38d8:	4908      	ldr	r1, [pc, #32]	; (38fc <cdcdf_acm_init+0x3c>)
    38da:	2001      	movs	r0, #1
    38dc:	4b08      	ldr	r3, [pc, #32]	; (3900 <cdcdf_acm_init+0x40>)
    38de:	4798      	blx	r3
	return ERR_NONE;
    38e0:	2000      	movs	r0, #0
}
    38e2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    38e4:	2011      	movs	r0, #17
    38e6:	4240      	negs	r0, r0
    38e8:	e7fb      	b.n	38e2 <cdcdf_acm_init+0x22>
    38ea:	46c0      	nop			; (mov r8, r8)
    38ec:	00004005 	.word	0x00004005
    38f0:	2000081c 	.word	0x2000081c
    38f4:	00003745 	.word	0x00003745
    38f8:	00003f9d 	.word	0x00003f9d
    38fc:	20000064 	.word	0x20000064
    3900:	00003f05 	.word	0x00003f05

00003904 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    3904:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3906:	4b06      	ldr	r3, [pc, #24]	; (3920 <usbdc_unconfig+0x1c>)
    3908:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    390a:	2c00      	cmp	r4, #0
    390c:	d007      	beq.n	391e <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    390e:	2200      	movs	r2, #0
    3910:	2101      	movs	r1, #1
    3912:	0020      	movs	r0, r4
    3914:	6863      	ldr	r3, [r4, #4]
    3916:	4798      	blx	r3
		func = func->next;
    3918:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    391a:	2c00      	cmp	r4, #0
    391c:	d1f7      	bne.n	390e <usbdc_unconfig+0xa>
	}
}
    391e:	bd10      	pop	{r4, pc}
    3920:	20000840 	.word	0x20000840

00003924 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    3924:	b570      	push	{r4, r5, r6, lr}
    3926:	0006      	movs	r6, r0
    3928:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    392a:	4b07      	ldr	r3, [pc, #28]	; (3948 <usbdc_change_notify+0x24>)
    392c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    392e:	2c00      	cmp	r4, #0
    3930:	d103      	bne.n	393a <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    3932:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    3934:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    3936:	2c00      	cmp	r4, #0
    3938:	d0fb      	beq.n	3932 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    393a:	6863      	ldr	r3, [r4, #4]
    393c:	2b00      	cmp	r3, #0
    393e:	d0f9      	beq.n	3934 <usbdc_change_notify+0x10>
			cg->cb(change, value);
    3940:	0029      	movs	r1, r5
    3942:	0030      	movs	r0, r6
    3944:	4798      	blx	r3
    3946:	e7f5      	b.n	3934 <usbdc_change_notify+0x10>
    3948:	20000840 	.word	0x20000840

0000394c <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    394e:	0007      	movs	r7, r0
    3950:	000e      	movs	r6, r1
    3952:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3954:	4b0d      	ldr	r3, [pc, #52]	; (398c <usbdc_request_handler+0x40>)
    3956:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    3958:	2c00      	cmp	r4, #0
    395a:	d104      	bne.n	3966 <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    395c:	2000      	movs	r0, #0
    395e:	e011      	b.n	3984 <usbdc_request_handler+0x38>
		h = h->next;
    3960:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    3962:	2c00      	cmp	r4, #0
    3964:	d00d      	beq.n	3982 <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    3966:	6863      	ldr	r3, [r4, #4]
    3968:	2b00      	cmp	r3, #0
    396a:	d0f9      	beq.n	3960 <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    396c:	002a      	movs	r2, r5
    396e:	0031      	movs	r1, r6
    3970:	0038      	movs	r0, r7
    3972:	4798      	blx	r3
			if (0 == rc) {
    3974:	2800      	cmp	r0, #0
    3976:	d006      	beq.n	3986 <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    3978:	300a      	adds	r0, #10
    397a:	d0f1      	beq.n	3960 <usbdc_request_handler+0x14>
				return -1;
    397c:	2001      	movs	r0, #1
    397e:	4240      	negs	r0, r0
    3980:	e000      	b.n	3984 <usbdc_request_handler+0x38>
	return false;
    3982:	2000      	movs	r0, #0
}
    3984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    3986:	2001      	movs	r0, #1
    3988:	e7fc      	b.n	3984 <usbdc_request_handler+0x38>
    398a:	46c0      	nop			; (mov r8, r8)
    398c:	20000840 	.word	0x20000840

00003990 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    3990:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    3992:	4b06      	ldr	r3, [pc, #24]	; (39ac <usbd_sof_cb+0x1c>)
    3994:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    3996:	2c00      	cmp	r4, #0
    3998:	d103      	bne.n	39a2 <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    399a:	bd10      	pop	{r4, pc}
		sof = sof->next;
    399c:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    399e:	2c00      	cmp	r4, #0
    39a0:	d0fb      	beq.n	399a <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    39a2:	6863      	ldr	r3, [r4, #4]
    39a4:	2b00      	cmp	r3, #0
    39a6:	d0f9      	beq.n	399c <usbd_sof_cb+0xc>
			sof->cb();
    39a8:	4798      	blx	r3
    39aa:	e7f7      	b.n	399c <usbd_sof_cb+0xc>
    39ac:	20000840 	.word	0x20000840

000039b0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    39b0:	b510      	push	{r4, lr}
    39b2:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    39b4:	2900      	cmp	r1, #0
    39b6:	d003      	beq.n	39c0 <usbdc_cb_ctl_done+0x10>
    39b8:	2901      	cmp	r1, #1
    39ba:	d029      	beq.n	3a10 <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    39bc:	2000      	movs	r0, #0
    39be:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    39c0:	7813      	ldrb	r3, [r2, #0]
    39c2:	2b00      	cmp	r3, #0
    39c4:	d1fa      	bne.n	39bc <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    39c6:	7853      	ldrb	r3, [r2, #1]
    39c8:	2b05      	cmp	r3, #5
    39ca:	d011      	beq.n	39f0 <usbdc_cb_ctl_done+0x40>
    39cc:	2b09      	cmp	r3, #9
    39ce:	d1f5      	bne.n	39bc <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    39d0:	7892      	ldrb	r2, [r2, #2]
    39d2:	4b12      	ldr	r3, [pc, #72]	; (3a1c <usbdc_cb_ctl_done+0x6c>)
    39d4:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    39d6:	78a3      	ldrb	r3, [r4, #2]
    39d8:	78e1      	ldrb	r1, [r4, #3]
    39da:	0209      	lsls	r1, r1, #8
    39dc:	4319      	orrs	r1, r3
    39de:	1e4b      	subs	r3, r1, #1
    39e0:	4199      	sbcs	r1, r3
    39e2:	3103      	adds	r1, #3
    39e4:	4b0d      	ldr	r3, [pc, #52]	; (3a1c <usbdc_cb_ctl_done+0x6c>)
    39e6:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    39e8:	2001      	movs	r0, #1
    39ea:	4b0d      	ldr	r3, [pc, #52]	; (3a20 <usbdc_cb_ctl_done+0x70>)
    39ec:	4798      	blx	r3
    39ee:	e7e5      	b.n	39bc <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    39f0:	7890      	ldrb	r0, [r2, #2]
    39f2:	4b0c      	ldr	r3, [pc, #48]	; (3a24 <usbdc_cb_ctl_done+0x74>)
    39f4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    39f6:	78a3      	ldrb	r3, [r4, #2]
    39f8:	78e1      	ldrb	r1, [r4, #3]
    39fa:	0209      	lsls	r1, r1, #8
    39fc:	4319      	orrs	r1, r3
    39fe:	1e4b      	subs	r3, r1, #1
    3a00:	4199      	sbcs	r1, r3
    3a02:	3102      	adds	r1, #2
    3a04:	4b05      	ldr	r3, [pc, #20]	; (3a1c <usbdc_cb_ctl_done+0x6c>)
    3a06:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3a08:	2001      	movs	r0, #1
    3a0a:	4b05      	ldr	r3, [pc, #20]	; (3a20 <usbdc_cb_ctl_done+0x70>)
    3a0c:	4798      	blx	r3
    3a0e:	e7d5      	b.n	39bc <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    3a10:	2201      	movs	r2, #1
    3a12:	0021      	movs	r1, r4
    3a14:	2000      	movs	r0, #0
    3a16:	4b04      	ldr	r3, [pc, #16]	; (3a28 <usbdc_cb_ctl_done+0x78>)
    3a18:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    3a1a:	e7cf      	b.n	39bc <usbdc_cb_ctl_done+0xc>
    3a1c:	20000840 	.word	0x20000840
    3a20:	00003925 	.word	0x00003925
    3a24:	000016cd 	.word	0x000016cd
    3a28:	0000394d 	.word	0x0000394d

00003a2c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    3a2c:	b510      	push	{r4, lr}
	usbdc_unconfig();
    3a2e:	4b0d      	ldr	r3, [pc, #52]	; (3a64 <usbdc_reset+0x38>)
    3a30:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    3a32:	4c0d      	ldr	r4, [pc, #52]	; (3a68 <usbdc_reset+0x3c>)
    3a34:	2302      	movs	r3, #2
    3a36:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    3a38:	2300      	movs	r3, #0
    3a3a:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    3a3c:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    3a3e:	2000      	movs	r0, #0
    3a40:	4b0a      	ldr	r3, [pc, #40]	; (3a6c <usbdc_reset+0x40>)
    3a42:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    3a44:	7f20      	ldrb	r0, [r4, #28]
    3a46:	4b0a      	ldr	r3, [pc, #40]	; (3a70 <usbdc_reset+0x44>)
    3a48:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    3a4a:	4a0a      	ldr	r2, [pc, #40]	; (3a74 <usbdc_reset+0x48>)
    3a4c:	2100      	movs	r1, #0
    3a4e:	2000      	movs	r0, #0
    3a50:	4c09      	ldr	r4, [pc, #36]	; (3a78 <usbdc_reset+0x4c>)
    3a52:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3a54:	4a09      	ldr	r2, [pc, #36]	; (3a7c <usbdc_reset+0x50>)
    3a56:	2102      	movs	r1, #2
    3a58:	2000      	movs	r0, #0
    3a5a:	47a0      	blx	r4
	usb_d_ep_enable(0);
    3a5c:	2000      	movs	r0, #0
    3a5e:	4b08      	ldr	r3, [pc, #32]	; (3a80 <usbdc_reset+0x54>)
    3a60:	4798      	blx	r3
}
    3a62:	bd10      	pop	{r4, pc}
    3a64:	00003905 	.word	0x00003905
    3a68:	20000840 	.word	0x20000840
    3a6c:	00001741 	.word	0x00001741
    3a70:	0000172d 	.word	0x0000172d
    3a74:	00003ac5 	.word	0x00003ac5
    3a78:	00001949 	.word	0x00001949
    3a7c:	000039b1 	.word	0x000039b1
    3a80:	0000176d 	.word	0x0000176d

00003a84 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    3a84:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    3a86:	2800      	cmp	r0, #0
    3a88:	d002      	beq.n	3a90 <usbd_event_cb+0xc>
    3a8a:	2801      	cmp	r0, #1
    3a8c:	d004      	beq.n	3a98 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    3a8e:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    3a90:	2000      	movs	r0, #0
    3a92:	4b03      	ldr	r3, [pc, #12]	; (3aa0 <usbd_event_cb+0x1c>)
    3a94:	4798      	blx	r3
		break;
    3a96:	e7fa      	b.n	3a8e <usbd_event_cb+0xa>
		usbdc_reset();
    3a98:	4b02      	ldr	r3, [pc, #8]	; (3aa4 <usbd_event_cb+0x20>)
    3a9a:	4798      	blx	r3
}
    3a9c:	e7f7      	b.n	3a8e <usbd_event_cb+0xa>
    3a9e:	46c0      	nop			; (mov r8, r8)
    3aa0:	00003925 	.word	0x00003925
    3aa4:	00003a2d 	.word	0x00003a2d

00003aa8 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    3aa8:	b510      	push	{r4, lr}
    3aaa:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    3aac:	ac01      	add	r4, sp, #4
    3aae:	9101      	str	r1, [sp, #4]
    3ab0:	9202      	str	r2, [sp, #8]
    3ab2:	7220      	strb	r0, [r4, #8]
    3ab4:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    3ab6:	0020      	movs	r0, r4
    3ab8:	4b01      	ldr	r3, [pc, #4]	; (3ac0 <usbdc_xfer+0x18>)
    3aba:	4798      	blx	r3
}
    3abc:	b004      	add	sp, #16
    3abe:	bd10      	pop	{r4, pc}
    3ac0:	000017b9 	.word	0x000017b9

00003ac4 <usbdc_cb_ctl_req>:
{
    3ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ac6:	46c6      	mov	lr, r8
    3ac8:	b500      	push	{lr}
    3aca:	b084      	sub	sp, #16
    3acc:	0005      	movs	r5, r0
    3ace:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3ad0:	2200      	movs	r2, #0
    3ad2:	4bb5      	ldr	r3, [pc, #724]	; (3da8 <usbdc_cb_ctl_req+0x2e4>)
    3ad4:	4798      	blx	r3
    3ad6:	1c43      	adds	r3, r0, #1
    3ad8:	d00d      	beq.n	3af6 <usbdc_cb_ctl_req+0x32>
		return true;
    3ada:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3adc:	2801      	cmp	r0, #1
    3ade:	d00b      	beq.n	3af8 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    3ae0:	7822      	ldrb	r2, [r4, #0]
    3ae2:	231f      	movs	r3, #31
    3ae4:	0011      	movs	r1, r2
    3ae6:	4399      	bics	r1, r3
    3ae8:	d00b      	beq.n	3b02 <usbdc_cb_ctl_req+0x3e>
    3aea:	b2cb      	uxtb	r3, r1
    3aec:	2b80      	cmp	r3, #128	; 0x80
    3aee:	d100      	bne.n	3af2 <usbdc_cb_ctl_req+0x2e>
    3af0:	e0f8      	b.n	3ce4 <usbdc_cb_ctl_req+0x220>
		return false;
    3af2:	2300      	movs	r3, #0
    3af4:	e000      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		return false;
    3af6:	2300      	movs	r3, #0
}
    3af8:	0018      	movs	r0, r3
    3afa:	b004      	add	sp, #16
    3afc:	bc04      	pop	{r2}
    3afe:	4690      	mov	r8, r2
    3b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    3b02:	7863      	ldrb	r3, [r4, #1]
    3b04:	2b0b      	cmp	r3, #11
    3b06:	d900      	bls.n	3b0a <usbdc_cb_ctl_req+0x46>
    3b08:	e1e4      	b.n	3ed4 <usbdc_cb_ctl_req+0x410>
    3b0a:	009b      	lsls	r3, r3, #2
    3b0c:	49a7      	ldr	r1, [pc, #668]	; (3dac <usbdc_cb_ctl_req+0x2e8>)
    3b0e:	58cb      	ldr	r3, [r1, r3]
    3b10:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3b12:	2301      	movs	r3, #1
    3b14:	2200      	movs	r2, #0
    3b16:	2100      	movs	r1, #0
    3b18:	0028      	movs	r0, r5
    3b1a:	4ca5      	ldr	r4, [pc, #660]	; (3db0 <usbdc_cb_ctl_req+0x2ec>)
    3b1c:	47a0      	blx	r4
    3b1e:	4243      	negs	r3, r0
    3b20:	4143      	adcs	r3, r0
    3b22:	b2db      	uxtb	r3, r3
    3b24:	e7e8      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    3b26:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    3b28:	2a00      	cmp	r2, #0
    3b2a:	d01a      	beq.n	3b62 <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    3b2c:	4ba1      	ldr	r3, [pc, #644]	; (3db4 <usbdc_cb_ctl_req+0x2f0>)
    3b2e:	681b      	ldr	r3, [r3, #0]
    3b30:	6859      	ldr	r1, [r3, #4]
    3b32:	6818      	ldr	r0, [r3, #0]
    3b34:	4ba0      	ldr	r3, [pc, #640]	; (3db8 <usbdc_cb_ctl_req+0x2f4>)
    3b36:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3b38:	2800      	cmp	r0, #0
    3b3a:	d100      	bne.n	3b3e <usbdc_cb_ctl_req+0x7a>
    3b3c:	e1d4      	b.n	3ee8 <usbdc_cb_ctl_req+0x424>
    3b3e:	78c3      	ldrb	r3, [r0, #3]
    3b40:	021b      	lsls	r3, r3, #8
    3b42:	7881      	ldrb	r1, [r0, #2]
    3b44:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    3b46:	b289      	uxth	r1, r1
    3b48:	1841      	adds	r1, r0, r1
    3b4a:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3b4c:	2204      	movs	r2, #4
    3b4e:	4b9b      	ldr	r3, [pc, #620]	; (3dbc <usbdc_cb_ctl_req+0x2f8>)
    3b50:	4798      	blx	r3
    3b52:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    3b54:	2800      	cmp	r0, #0
    3b56:	d006      	beq.n	3b66 <usbdc_cb_ctl_req+0xa2>
    3b58:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3b5a:	4f96      	ldr	r7, [pc, #600]	; (3db4 <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3b5c:	4b97      	ldr	r3, [pc, #604]	; (3dbc <usbdc_cb_ctl_req+0x2f8>)
    3b5e:	4698      	mov	r8, r3
    3b60:	e01a      	b.n	3b98 <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    3b62:	4b97      	ldr	r3, [pc, #604]	; (3dc0 <usbdc_cb_ctl_req+0x2fc>)
    3b64:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3b66:	2301      	movs	r3, #1
    3b68:	2200      	movs	r2, #0
    3b6a:	2100      	movs	r1, #0
    3b6c:	0028      	movs	r0, r5
    3b6e:	4c90      	ldr	r4, [pc, #576]	; (3db0 <usbdc_cb_ctl_req+0x2ec>)
    3b70:	47a0      	blx	r4
    3b72:	4243      	negs	r3, r0
    3b74:	4143      	adcs	r3, r0
    3b76:	b2db      	uxtb	r3, r3
    3b78:	e7be      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    3b7a:	0034      	movs	r4, r6
    3b7c:	e000      	b.n	3b80 <usbdc_cb_ctl_req+0xbc>
    3b7e:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    3b80:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    3b82:	7803      	ldrb	r3, [r0, #0]
    3b84:	18c0      	adds	r0, r0, r3
    3b86:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3b88:	9b03      	ldr	r3, [sp, #12]
    3b8a:	9301      	str	r3, [sp, #4]
    3b8c:	2204      	movs	r2, #4
    3b8e:	0019      	movs	r1, r3
    3b90:	47c0      	blx	r8
    3b92:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    3b94:	2800      	cmp	r0, #0
    3b96:	d0e6      	beq.n	3b66 <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    3b98:	7886      	ldrb	r6, [r0, #2]
    3b9a:	42a6      	cmp	r6, r4
    3b9c:	d0f0      	beq.n	3b80 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3b9e:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    3ba0:	2c00      	cmp	r4, #0
    3ba2:	d0ea      	beq.n	3b7a <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    3ba4:	aa02      	add	r2, sp, #8
    3ba6:	2100      	movs	r1, #0
    3ba8:	0020      	movs	r0, r4
    3baa:	6863      	ldr	r3, [r4, #4]
    3bac:	4798      	blx	r3
    3bae:	2800      	cmp	r0, #0
    3bb0:	d0e5      	beq.n	3b7e <usbdc_cb_ctl_req+0xba>
					func = func->next;
    3bb2:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    3bb4:	2c00      	cmp	r4, #0
    3bb6:	d1f5      	bne.n	3ba4 <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    3bb8:	0034      	movs	r4, r6
    3bba:	e7e1      	b.n	3b80 <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3bbc:	231f      	movs	r3, #31
    3bbe:	401a      	ands	r2, r3
		return false;
    3bc0:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3bc2:	2a02      	cmp	r2, #2
    3bc4:	d198      	bne.n	3af8 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    3bc6:	79a3      	ldrb	r3, [r4, #6]
    3bc8:	79e2      	ldrb	r2, [r4, #7]
    3bca:	0212      	lsls	r2, r2, #8
    3bcc:	431a      	orrs	r2, r3
			return false;
    3bce:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    3bd0:	2a00      	cmp	r2, #0
    3bd2:	d000      	beq.n	3bd6 <usbdc_cb_ctl_req+0x112>
    3bd4:	e790      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    3bd6:	7920      	ldrb	r0, [r4, #4]
    3bd8:	2100      	movs	r1, #0
    3bda:	4b7a      	ldr	r3, [pc, #488]	; (3dc4 <usbdc_cb_ctl_req+0x300>)
    3bdc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3bde:	2301      	movs	r3, #1
    3be0:	2200      	movs	r2, #0
    3be2:	2100      	movs	r1, #0
    3be4:	0028      	movs	r0, r5
    3be6:	4c72      	ldr	r4, [pc, #456]	; (3db0 <usbdc_cb_ctl_req+0x2ec>)
    3be8:	47a0      	blx	r4
		return true;
    3bea:	2301      	movs	r3, #1
    3bec:	e784      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3bee:	231f      	movs	r3, #31
    3bf0:	401a      	ands	r2, r3
		return false;
    3bf2:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3bf4:	2a02      	cmp	r2, #2
    3bf6:	d000      	beq.n	3bfa <usbdc_cb_ctl_req+0x136>
    3bf8:	e77e      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    3bfa:	79a3      	ldrb	r3, [r4, #6]
    3bfc:	79e2      	ldrb	r2, [r4, #7]
    3bfe:	0212      	lsls	r2, r2, #8
    3c00:	431a      	orrs	r2, r3
			return false;
    3c02:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    3c04:	2a00      	cmp	r2, #0
    3c06:	d000      	beq.n	3c0a <usbdc_cb_ctl_req+0x146>
    3c08:	e776      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    3c0a:	7920      	ldrb	r0, [r4, #4]
    3c0c:	2101      	movs	r1, #1
    3c0e:	4b6d      	ldr	r3, [pc, #436]	; (3dc4 <usbdc_cb_ctl_req+0x300>)
    3c10:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3c12:	2301      	movs	r3, #1
    3c14:	2200      	movs	r2, #0
    3c16:	2100      	movs	r1, #0
    3c18:	0028      	movs	r0, r5
    3c1a:	4c65      	ldr	r4, [pc, #404]	; (3db0 <usbdc_cb_ctl_req+0x2ec>)
    3c1c:	47a0      	blx	r4
		return true;
    3c1e:	2301      	movs	r3, #1
    3c20:	e76a      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    3c22:	78a3      	ldrb	r3, [r4, #2]
    3c24:	78e5      	ldrb	r5, [r4, #3]
    3c26:	022d      	lsls	r5, r5, #8
    3c28:	431d      	orrs	r5, r3
    3c2a:	7923      	ldrb	r3, [r4, #4]
    3c2c:	7964      	ldrb	r4, [r4, #5]
    3c2e:	0224      	lsls	r4, r4, #8
    3c30:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    3c32:	4a60      	ldr	r2, [pc, #384]	; (3db4 <usbdc_cb_ctl_req+0x2f0>)
    3c34:	6813      	ldr	r3, [r2, #0]
    3c36:	7ed2      	ldrb	r2, [r2, #27]
    3c38:	6859      	ldr	r1, [r3, #4]
    3c3a:	6818      	ldr	r0, [r3, #0]
    3c3c:	4b5e      	ldr	r3, [pc, #376]	; (3db8 <usbdc_cb_ctl_req+0x2f4>)
    3c3e:	4798      	blx	r3
	if (NULL == ifc) {
    3c40:	2800      	cmp	r0, #0
    3c42:	d047      	beq.n	3cd4 <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    3c44:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    3c46:	78c3      	ldrb	r3, [r0, #3]
    3c48:	021b      	lsls	r3, r3, #8
    3c4a:	7881      	ldrb	r1, [r0, #2]
    3c4c:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3c4e:	b289      	uxth	r1, r1
    3c50:	1841      	adds	r1, r0, r1
    3c52:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    3c54:	2204      	movs	r2, #4
    3c56:	4b59      	ldr	r3, [pc, #356]	; (3dbc <usbdc_cb_ctl_req+0x2f8>)
    3c58:	4798      	blx	r3
    3c5a:	2800      	cmp	r0, #0
    3c5c:	d03c      	beq.n	3cd8 <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3c5e:	4e57      	ldr	r6, [pc, #348]	; (3dbc <usbdc_cb_ctl_req+0x2f8>)
    3c60:	e008      	b.n	3c74 <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    3c62:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    3c64:	7803      	ldrb	r3, [r0, #0]
    3c66:	18c0      	adds	r0, r0, r3
    3c68:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3c6a:	2204      	movs	r2, #4
    3c6c:	9903      	ldr	r1, [sp, #12]
    3c6e:	47b0      	blx	r6
		if (NULL == ifc) {
    3c70:	2800      	cmp	r0, #0
    3c72:	d033      	beq.n	3cdc <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    3c74:	7883      	ldrb	r3, [r0, #2]
    3c76:	42a3      	cmp	r3, r4
    3c78:	d1f3      	bne.n	3c62 <usbdc_cb_ctl_req+0x19e>
    3c7a:	78c3      	ldrb	r3, [r0, #3]
    3c7c:	42ab      	cmp	r3, r5
    3c7e:	d1f0      	bne.n	3c62 <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    3c80:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    3c82:	4b4c      	ldr	r3, [pc, #304]	; (3db4 <usbdc_cb_ctl_req+0x2f0>)
    3c84:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    3c86:	2e00      	cmp	r6, #0
    3c88:	d02a      	beq.n	3ce0 <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3c8a:	aa02      	add	r2, sp, #8
    3c8c:	2101      	movs	r1, #1
    3c8e:	0030      	movs	r0, r6
    3c90:	6873      	ldr	r3, [r6, #4]
    3c92:	4798      	blx	r3
    3c94:	2800      	cmp	r0, #0
    3c96:	d004      	beq.n	3ca2 <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    3c98:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    3c9a:	2e00      	cmp	r6, #0
    3c9c:	d1f5      	bne.n	3c8a <usbdc_cb_ctl_req+0x1c6>
	return false;
    3c9e:	2300      	movs	r3, #0
    3ca0:	e72a      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    3ca2:	6873      	ldr	r3, [r6, #4]
    3ca4:	aa02      	add	r2, sp, #8
    3ca6:	2100      	movs	r1, #0
    3ca8:	0030      	movs	r0, r6
    3caa:	4798      	blx	r3
			return false;
    3cac:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    3cae:	2800      	cmp	r0, #0
    3cb0:	d000      	beq.n	3cb4 <usbdc_cb_ctl_req+0x1f0>
    3cb2:	e721      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    3cb4:	2d00      	cmp	r5, #0
    3cb6:	d005      	beq.n	3cc4 <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    3cb8:	493e      	ldr	r1, [pc, #248]	; (3db4 <usbdc_cb_ctl_req+0x2f0>)
    3cba:	2201      	movs	r2, #1
    3cbc:	40a2      	lsls	r2, r4
    3cbe:	7f4b      	ldrb	r3, [r1, #29]
    3cc0:	4313      	orrs	r3, r2
    3cc2:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    3cc4:	2300      	movs	r3, #0
    3cc6:	2200      	movs	r2, #0
    3cc8:	2100      	movs	r1, #0
    3cca:	2000      	movs	r0, #0
    3ccc:	4c38      	ldr	r4, [pc, #224]	; (3db0 <usbdc_cb_ctl_req+0x2ec>)
    3cce:	47a0      	blx	r4
			return true;
    3cd0:	2301      	movs	r3, #1
    3cd2:	e711      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		return false;
    3cd4:	2300      	movs	r3, #0
    3cd6:	e70f      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		return false;
    3cd8:	2300      	movs	r3, #0
    3cda:	e70d      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
			return false;
    3cdc:	2300      	movs	r3, #0
    3cde:	e70b      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
	return false;
    3ce0:	2300      	movs	r3, #0
    3ce2:	e709      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    3ce4:	7863      	ldrb	r3, [r4, #1]
    3ce6:	2b06      	cmp	r3, #6
    3ce8:	d033      	beq.n	3d52 <usbdc_cb_ctl_req+0x28e>
    3cea:	b2d9      	uxtb	r1, r3
    3cec:	2906      	cmp	r1, #6
    3cee:	d922      	bls.n	3d36 <usbdc_cb_ctl_req+0x272>
    3cf0:	2b08      	cmp	r3, #8
    3cf2:	d100      	bne.n	3cf6 <usbdc_cb_ctl_req+0x232>
    3cf4:	e0af      	b.n	3e56 <usbdc_cb_ctl_req+0x392>
    3cf6:	2b0a      	cmp	r3, #10
    3cf8:	d000      	beq.n	3cfc <usbdc_cb_ctl_req+0x238>
    3cfa:	e0ed      	b.n	3ed8 <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    3cfc:	4b2d      	ldr	r3, [pc, #180]	; (3db4 <usbdc_cb_ctl_req+0x2f0>)
    3cfe:	7f5a      	ldrb	r2, [r3, #29]
    3d00:	7921      	ldrb	r1, [r4, #4]
    3d02:	7963      	ldrb	r3, [r4, #5]
    3d04:	021b      	lsls	r3, r3, #8
    3d06:	430b      	orrs	r3, r1
    3d08:	411a      	asrs	r2, r3
    3d0a:	07d3      	lsls	r3, r2, #31
    3d0c:	d400      	bmi.n	3d10 <usbdc_cb_ctl_req+0x24c>
    3d0e:	e0ca      	b.n	3ea6 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3d10:	4b28      	ldr	r3, [pc, #160]	; (3db4 <usbdc_cb_ctl_req+0x2f0>)
    3d12:	691d      	ldr	r5, [r3, #16]
	return false;
    3d14:	2300      	movs	r3, #0
	while (NULL != func) {
    3d16:	2d00      	cmp	r5, #0
    3d18:	d100      	bne.n	3d1c <usbdc_cb_ctl_req+0x258>
    3d1a:	e6ed      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    3d1c:	0022      	movs	r2, r4
    3d1e:	2102      	movs	r1, #2
    3d20:	0028      	movs	r0, r5
    3d22:	686b      	ldr	r3, [r5, #4]
    3d24:	4798      	blx	r3
    3d26:	2800      	cmp	r0, #0
    3d28:	db00      	blt.n	3d2c <usbdc_cb_ctl_req+0x268>
    3d2a:	e0c8      	b.n	3ebe <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    3d2c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    3d2e:	2d00      	cmp	r5, #0
    3d30:	d1f4      	bne.n	3d1c <usbdc_cb_ctl_req+0x258>
	return false;
    3d32:	2300      	movs	r3, #0
    3d34:	e6e0      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    3d36:	2b00      	cmp	r3, #0
    3d38:	d000      	beq.n	3d3c <usbdc_cb_ctl_req+0x278>
    3d3a:	e0cd      	b.n	3ed8 <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3d3c:	231f      	movs	r3, #31
    3d3e:	401a      	ands	r2, r3
    3d40:	b2d3      	uxtb	r3, r2
    3d42:	2b01      	cmp	r3, #1
    3d44:	d800      	bhi.n	3d48 <usbdc_cb_ctl_req+0x284>
    3d46:	e092      	b.n	3e6e <usbdc_cb_ctl_req+0x3aa>
    3d48:	2a02      	cmp	r2, #2
    3d4a:	d100      	bne.n	3d4e <usbdc_cb_ctl_req+0x28a>
    3d4c:	e09f      	b.n	3e8e <usbdc_cb_ctl_req+0x3ca>
		return false;
    3d4e:	2300      	movs	r3, #0
    3d50:	e6d2      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    3d52:	78a3      	ldrb	r3, [r4, #2]
    3d54:	78e2      	ldrb	r2, [r4, #3]
    3d56:	0212      	lsls	r2, r2, #8
    3d58:	431a      	orrs	r2, r3
    3d5a:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    3d5c:	2b02      	cmp	r3, #2
    3d5e:	d033      	beq.n	3dc8 <usbdc_cb_ctl_req+0x304>
    3d60:	2b03      	cmp	r3, #3
    3d62:	d056      	beq.n	3e12 <usbdc_cb_ctl_req+0x34e>
    3d64:	2b01      	cmp	r3, #1
    3d66:	d001      	beq.n	3d6c <usbdc_cb_ctl_req+0x2a8>
	return false;
    3d68:	2300      	movs	r3, #0
    3d6a:	e6c5      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    3d6c:	79a2      	ldrb	r2, [r4, #6]
    3d6e:	79e3      	ldrb	r3, [r4, #7]
    3d70:	021b      	lsls	r3, r3, #8
    3d72:	4313      	orrs	r3, r2
    3d74:	1c1a      	adds	r2, r3, #0
    3d76:	2b12      	cmp	r3, #18
    3d78:	d900      	bls.n	3d7c <usbdc_cb_ctl_req+0x2b8>
    3d7a:	2212      	movs	r2, #18
    3d7c:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    3d7e:	4b0d      	ldr	r3, [pc, #52]	; (3db4 <usbdc_cb_ctl_req+0x2f0>)
    3d80:	681b      	ldr	r3, [r3, #0]
    3d82:	6859      	ldr	r1, [r3, #4]
    3d84:	6818      	ldr	r0, [r3, #0]
    3d86:	2201      	movs	r2, #1
    3d88:	4b0c      	ldr	r3, [pc, #48]	; (3dbc <usbdc_cb_ctl_req+0x2f8>)
    3d8a:	4798      	blx	r3
	if (!dev_desc) {
    3d8c:	2800      	cmp	r0, #0
    3d8e:	d100      	bne.n	3d92 <usbdc_cb_ctl_req+0x2ce>
    3d90:	e0a4      	b.n	3edc <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    3d92:	2300      	movs	r3, #0
    3d94:	0022      	movs	r2, r4
    3d96:	0001      	movs	r1, r0
    3d98:	0028      	movs	r0, r5
    3d9a:	4c05      	ldr	r4, [pc, #20]	; (3db0 <usbdc_cb_ctl_req+0x2ec>)
    3d9c:	47a0      	blx	r4
    3d9e:	4243      	negs	r3, r0
    3da0:	4143      	adcs	r3, r0
    3da2:	b2db      	uxtb	r3, r3
    3da4:	e6a8      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
    3da6:	46c0      	nop			; (mov r8, r8)
    3da8:	0000394d 	.word	0x0000394d
    3dac:	000048c0 	.word	0x000048c0
    3db0:	00003aa9 	.word	0x00003aa9
    3db4:	20000840 	.word	0x20000840
    3db8:	00004091 	.word	0x00004091
    3dbc:	00004015 	.word	0x00004015
    3dc0:	00003905 	.word	0x00003905
    3dc4:	000018e1 	.word	0x000018e1
	uint16_t length   = req->wLength;
    3dc8:	79a3      	ldrb	r3, [r4, #6]
    3dca:	79e6      	ldrb	r6, [r4, #7]
    3dcc:	0236      	lsls	r6, r6, #8
    3dce:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3dd0:	4b46      	ldr	r3, [pc, #280]	; (3eec <usbdc_cb_ctl_req+0x428>)
    3dd2:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    3dd4:	681b      	ldr	r3, [r3, #0]
    3dd6:	3201      	adds	r2, #1
    3dd8:	b2d2      	uxtb	r2, r2
    3dda:	6859      	ldr	r1, [r3, #4]
    3ddc:	6818      	ldr	r0, [r3, #0]
    3dde:	4b44      	ldr	r3, [pc, #272]	; (3ef0 <usbdc_cb_ctl_req+0x42c>)
    3de0:	4798      	blx	r3
    3de2:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    3de4:	d07c      	beq.n	3ee0 <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    3de6:	78c3      	ldrb	r3, [r0, #3]
    3de8:	021b      	lsls	r3, r3, #8
    3dea:	7884      	ldrb	r4, [r0, #2]
    3dec:	18e4      	adds	r4, r4, r3
    3dee:	b2a4      	uxth	r4, r4
		need_zlp = false;
    3df0:	2300      	movs	r3, #0
	if (length <= total_len) {
    3df2:	42a6      	cmp	r6, r4
    3df4:	d905      	bls.n	3e02 <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3df6:	3f01      	subs	r7, #1
    3df8:	403e      	ands	r6, r7
    3dfa:	4273      	negs	r3, r6
    3dfc:	4173      	adcs	r3, r6
    3dfe:	b2db      	uxtb	r3, r3
		length = total_len;
    3e00:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    3e02:	0032      	movs	r2, r6
    3e04:	0028      	movs	r0, r5
    3e06:	4c3b      	ldr	r4, [pc, #236]	; (3ef4 <usbdc_cb_ctl_req+0x430>)
    3e08:	47a0      	blx	r4
    3e0a:	4243      	negs	r3, r0
    3e0c:	4143      	adcs	r3, r0
    3e0e:	b2db      	uxtb	r3, r3
    3e10:	e672      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    3e12:	79a3      	ldrb	r3, [r4, #6]
    3e14:	79e1      	ldrb	r1, [r4, #7]
    3e16:	0209      	lsls	r1, r1, #8
    3e18:	4319      	orrs	r1, r3
    3e1a:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3e1c:	4b33      	ldr	r3, [pc, #204]	; (3eec <usbdc_cb_ctl_req+0x428>)
    3e1e:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    3e20:	681b      	ldr	r3, [r3, #0]
    3e22:	b2d2      	uxtb	r2, r2
    3e24:	6859      	ldr	r1, [r3, #4]
    3e26:	6818      	ldr	r0, [r3, #0]
    3e28:	4b33      	ldr	r3, [pc, #204]	; (3ef8 <usbdc_cb_ctl_req+0x434>)
    3e2a:	4798      	blx	r3
    3e2c:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    3e2e:	d059      	beq.n	3ee4 <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    3e30:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    3e32:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    3e34:	4294      	cmp	r4, r2
    3e36:	d906      	bls.n	3e46 <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3e38:	1e73      	subs	r3, r6, #1
    3e3a:	4023      	ands	r3, r4
    3e3c:	0018      	movs	r0, r3
    3e3e:	4243      	negs	r3, r0
    3e40:	4143      	adcs	r3, r0
    3e42:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    3e44:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    3e46:	0022      	movs	r2, r4
    3e48:	0028      	movs	r0, r5
    3e4a:	4c2a      	ldr	r4, [pc, #168]	; (3ef4 <usbdc_cb_ctl_req+0x430>)
    3e4c:	47a0      	blx	r4
    3e4e:	4243      	negs	r3, r0
    3e50:	4143      	adcs	r3, r0
    3e52:	b2db      	uxtb	r3, r3
    3e54:	e650      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    3e56:	4b25      	ldr	r3, [pc, #148]	; (3eec <usbdc_cb_ctl_req+0x428>)
    3e58:	7eda      	ldrb	r2, [r3, #27]
    3e5a:	6959      	ldr	r1, [r3, #20]
    3e5c:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    3e5e:	6959      	ldr	r1, [r3, #20]
    3e60:	2300      	movs	r3, #0
    3e62:	2201      	movs	r2, #1
    3e64:	0028      	movs	r0, r5
    3e66:	4c23      	ldr	r4, [pc, #140]	; (3ef4 <usbdc_cb_ctl_req+0x430>)
    3e68:	47a0      	blx	r4
		return true;
    3e6a:	2301      	movs	r3, #1
    3e6c:	e644      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		st = 0;
    3e6e:	2300      	movs	r3, #0
    3e70:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    3e72:	4c1e      	ldr	r4, [pc, #120]	; (3eec <usbdc_cb_ctl_req+0x428>)
    3e74:	2202      	movs	r2, #2
    3e76:	a902      	add	r1, sp, #8
    3e78:	6960      	ldr	r0, [r4, #20]
    3e7a:	4b20      	ldr	r3, [pc, #128]	; (3efc <usbdc_cb_ctl_req+0x438>)
    3e7c:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    3e7e:	6961      	ldr	r1, [r4, #20]
    3e80:	2300      	movs	r3, #0
    3e82:	2202      	movs	r2, #2
    3e84:	0028      	movs	r0, r5
    3e86:	4c1b      	ldr	r4, [pc, #108]	; (3ef4 <usbdc_cb_ctl_req+0x430>)
    3e88:	47a0      	blx	r4
	return true;
    3e8a:	2301      	movs	r3, #1
    3e8c:	e634      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    3e8e:	7920      	ldrb	r0, [r4, #4]
    3e90:	2102      	movs	r1, #2
    3e92:	4b1b      	ldr	r3, [pc, #108]	; (3f00 <usbdc_cb_ctl_req+0x43c>)
    3e94:	4798      	blx	r3
		if (st < 0) {
    3e96:	2800      	cmp	r0, #0
    3e98:	db03      	blt.n	3ea2 <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    3e9a:	2301      	movs	r3, #1
    3e9c:	4018      	ands	r0, r3
    3e9e:	9002      	str	r0, [sp, #8]
    3ea0:	e7e7      	b.n	3e72 <usbdc_cb_ctl_req+0x3ae>
			return false;
    3ea2:	2300      	movs	r3, #0
    3ea4:	e628      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    3ea6:	4b11      	ldr	r3, [pc, #68]	; (3eec <usbdc_cb_ctl_req+0x428>)
    3ea8:	2200      	movs	r2, #0
    3eaa:	6959      	ldr	r1, [r3, #20]
    3eac:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3eae:	6959      	ldr	r1, [r3, #20]
    3eb0:	2300      	movs	r3, #0
    3eb2:	3201      	adds	r2, #1
    3eb4:	2000      	movs	r0, #0
    3eb6:	4c0f      	ldr	r4, [pc, #60]	; (3ef4 <usbdc_cb_ctl_req+0x430>)
    3eb8:	47a0      	blx	r4
		return true;
    3eba:	2301      	movs	r3, #1
    3ebc:	e61c      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    3ebe:	4b0b      	ldr	r3, [pc, #44]	; (3eec <usbdc_cb_ctl_req+0x428>)
    3ec0:	695a      	ldr	r2, [r3, #20]
    3ec2:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3ec4:	6959      	ldr	r1, [r3, #20]
    3ec6:	2300      	movs	r3, #0
    3ec8:	2201      	movs	r2, #1
    3eca:	2000      	movs	r0, #0
    3ecc:	4c09      	ldr	r4, [pc, #36]	; (3ef4 <usbdc_cb_ctl_req+0x430>)
    3ece:	47a0      	blx	r4
			return true;
    3ed0:	2301      	movs	r3, #1
    3ed2:	e611      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		return false;
    3ed4:	2300      	movs	r3, #0
    3ed6:	e60f      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		return false;
    3ed8:	2300      	movs	r3, #0
    3eda:	e60d      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		return false;
    3edc:	2300      	movs	r3, #0
    3ede:	e60b      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		return false;
    3ee0:	2300      	movs	r3, #0
    3ee2:	e609      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
		return false;
    3ee4:	2300      	movs	r3, #0
    3ee6:	e607      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
			return false;
    3ee8:	2300      	movs	r3, #0
    3eea:	e605      	b.n	3af8 <usbdc_cb_ctl_req+0x34>
    3eec:	20000840 	.word	0x20000840
    3ef0:	00004091 	.word	0x00004091
    3ef4:	00003aa9 	.word	0x00003aa9
    3ef8:	000040f9 	.word	0x000040f9
    3efc:	00004525 	.word	0x00004525
    3f00:	000018e1 	.word	0x000018e1

00003f04 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    3f04:	b510      	push	{r4, lr}
	switch (type) {
    3f06:	2801      	cmp	r0, #1
    3f08:	d009      	beq.n	3f1e <usbdc_register_handler+0x1a>
    3f0a:	2800      	cmp	r0, #0
    3f0c:	d002      	beq.n	3f14 <usbdc_register_handler+0x10>
    3f0e:	2802      	cmp	r0, #2
    3f10:	d00a      	beq.n	3f28 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    3f12:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    3f14:	4807      	ldr	r0, [pc, #28]	; (3f34 <usbdc_register_handler+0x30>)
    3f16:	3004      	adds	r0, #4
    3f18:	4b07      	ldr	r3, [pc, #28]	; (3f38 <usbdc_register_handler+0x34>)
    3f1a:	4798      	blx	r3
		break;
    3f1c:	e7f9      	b.n	3f12 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    3f1e:	4805      	ldr	r0, [pc, #20]	; (3f34 <usbdc_register_handler+0x30>)
    3f20:	3008      	adds	r0, #8
    3f22:	4b05      	ldr	r3, [pc, #20]	; (3f38 <usbdc_register_handler+0x34>)
    3f24:	4798      	blx	r3
		break;
    3f26:	e7f4      	b.n	3f12 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    3f28:	4802      	ldr	r0, [pc, #8]	; (3f34 <usbdc_register_handler+0x30>)
    3f2a:	300c      	adds	r0, #12
    3f2c:	4b02      	ldr	r3, [pc, #8]	; (3f38 <usbdc_register_handler+0x34>)
    3f2e:	4798      	blx	r3
}
    3f30:	e7ef      	b.n	3f12 <usbdc_register_handler+0xe>
    3f32:	46c0      	nop			; (mov r8, r8)
    3f34:	20000840 	.word	0x20000840
    3f38:	00004159 	.word	0x00004159

00003f3c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    3f3c:	b570      	push	{r4, r5, r6, lr}
    3f3e:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    3f40:	1e43      	subs	r3, r0, #1
    3f42:	4198      	sbcs	r0, r3
    3f44:	b2c0      	uxtb	r0, r0
    3f46:	4a0c      	ldr	r2, [pc, #48]	; (3f78 <usbdc_init+0x3c>)
    3f48:	490c      	ldr	r1, [pc, #48]	; (3f7c <usbdc_init+0x40>)
    3f4a:	4b0d      	ldr	r3, [pc, #52]	; (3f80 <usbdc_init+0x44>)
    3f4c:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    3f4e:	4b0d      	ldr	r3, [pc, #52]	; (3f84 <usbdc_init+0x48>)
    3f50:	4798      	blx	r3
	if (rc < 0) {
    3f52:	2800      	cmp	r0, #0
    3f54:	db0e      	blt.n	3f74 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    3f56:	4d0c      	ldr	r5, [pc, #48]	; (3f88 <usbdc_init+0x4c>)
    3f58:	2220      	movs	r2, #32
    3f5a:	2100      	movs	r1, #0
    3f5c:	0028      	movs	r0, r5
    3f5e:	4b0b      	ldr	r3, [pc, #44]	; (3f8c <usbdc_init+0x50>)
    3f60:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    3f62:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    3f64:	490a      	ldr	r1, [pc, #40]	; (3f90 <usbdc_init+0x54>)
    3f66:	2000      	movs	r0, #0
    3f68:	4c0a      	ldr	r4, [pc, #40]	; (3f94 <usbdc_init+0x58>)
    3f6a:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    3f6c:	490a      	ldr	r1, [pc, #40]	; (3f98 <usbdc_init+0x5c>)
    3f6e:	2001      	movs	r0, #1
    3f70:	47a0      	blx	r4

	return 0;
    3f72:	2000      	movs	r0, #0
}
    3f74:	bd70      	pop	{r4, r5, r6, pc}
    3f76:	46c0      	nop			; (mov r8, r8)
    3f78:	00000355 	.word	0x00000355
    3f7c:	000048f0 	.word	0x000048f0
    3f80:	00001999 	.word	0x00001999
    3f84:	00001645 	.word	0x00001645
    3f88:	20000840 	.word	0x20000840
    3f8c:	000045a9 	.word	0x000045a9
    3f90:	00003991 	.word	0x00003991
    3f94:	000016a9 	.word	0x000016a9
    3f98:	00003a85 	.word	0x00003a85

00003f9c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    3f9c:	b510      	push	{r4, lr}
    3f9e:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    3fa0:	4802      	ldr	r0, [pc, #8]	; (3fac <usbdc_register_function+0x10>)
    3fa2:	3010      	adds	r0, #16
    3fa4:	4b02      	ldr	r3, [pc, #8]	; (3fb0 <usbdc_register_function+0x14>)
    3fa6:	4798      	blx	r3
}
    3fa8:	bd10      	pop	{r4, pc}
    3faa:	46c0      	nop			; (mov r8, r8)
    3fac:	20000840 	.word	0x20000840
    3fb0:	00004159 	.word	0x00004159

00003fb4 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    3fb4:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    3fb6:	4b0b      	ldr	r3, [pc, #44]	; (3fe4 <usbdc_start+0x30>)
    3fb8:	7e9b      	ldrb	r3, [r3, #26]
    3fba:	2b00      	cmp	r3, #0
    3fbc:	d10c      	bne.n	3fd8 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    3fbe:	2800      	cmp	r0, #0
    3fc0:	d00d      	beq.n	3fde <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    3fc2:	4b08      	ldr	r3, [pc, #32]	; (3fe4 <usbdc_start+0x30>)
    3fc4:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    3fc6:	6802      	ldr	r2, [r0, #0]
    3fc8:	79d2      	ldrb	r2, [r2, #7]
    3fca:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    3fcc:	2201      	movs	r2, #1
    3fce:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    3fd0:	4b05      	ldr	r3, [pc, #20]	; (3fe8 <usbdc_start+0x34>)
    3fd2:	4798      	blx	r3
	return ERR_NONE;
    3fd4:	2000      	movs	r0, #0
}
    3fd6:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    3fd8:	2004      	movs	r0, #4
    3fda:	4240      	negs	r0, r0
    3fdc:	e7fb      	b.n	3fd6 <usbdc_start+0x22>
		return ERR_BAD_DATA;
    3fde:	2009      	movs	r0, #9
    3fe0:	4240      	negs	r0, r0
    3fe2:	e7f8      	b.n	3fd6 <usbdc_start+0x22>
    3fe4:	20000840 	.word	0x20000840
    3fe8:	000016b5 	.word	0x000016b5

00003fec <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    3fec:	b510      	push	{r4, lr}
	usb_d_attach();
    3fee:	4b01      	ldr	r3, [pc, #4]	; (3ff4 <usbdc_attach+0x8>)
    3ff0:	4798      	blx	r3
}
    3ff2:	bd10      	pop	{r4, pc}
    3ff4:	000016c1 	.word	0x000016c1

00003ff8 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    3ff8:	4b01      	ldr	r3, [pc, #4]	; (4000 <usbdc_get_ctrl_buffer+0x8>)
    3ffa:	6958      	ldr	r0, [r3, #20]
}
    3ffc:	4770      	bx	lr
    3ffe:	46c0      	nop			; (mov r8, r8)
    4000:	20000840 	.word	0x20000840

00004004 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    4004:	4b02      	ldr	r3, [pc, #8]	; (4010 <usbdc_get_state+0xc>)
    4006:	7e98      	ldrb	r0, [r3, #26]
    4008:	06c3      	lsls	r3, r0, #27
    400a:	d500      	bpl.n	400e <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    400c:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    400e:	4770      	bx	lr
    4010:	20000840 	.word	0x20000840

00004014 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    4014:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4016:	4288      	cmp	r0, r1
    4018:	d211      	bcs.n	403e <usb_find_desc+0x2a>
	return desc[0];
    401a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    401c:	2b01      	cmp	r3, #1
    401e:	d910      	bls.n	4042 <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    4020:	7844      	ldrb	r4, [r0, #1]
    4022:	4294      	cmp	r4, r2
    4024:	d00a      	beq.n	403c <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    4026:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    4028:	4281      	cmp	r1, r0
    402a:	d906      	bls.n	403a <usb_find_desc+0x26>
	return desc[0];
    402c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    402e:	2b01      	cmp	r3, #1
    4030:	d909      	bls.n	4046 <usb_find_desc+0x32>
	return desc[1];
    4032:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    4034:	4294      	cmp	r4, r2
    4036:	d1f6      	bne.n	4026 <usb_find_desc+0x12>
    4038:	e000      	b.n	403c <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    403a:	2000      	movs	r0, #0
}
    403c:	bd10      	pop	{r4, pc}
	return NULL;
    403e:	2000      	movs	r0, #0
    4040:	e7fc      	b.n	403c <usb_find_desc+0x28>
		_desc_len_check();
    4042:	2000      	movs	r0, #0
    4044:	e7fa      	b.n	403c <usb_find_desc+0x28>
    4046:	2000      	movs	r0, #0
    4048:	e7f8      	b.n	403c <usb_find_desc+0x28>

0000404a <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    404a:	4288      	cmp	r0, r1
    404c:	d215      	bcs.n	407a <usb_find_ep_desc+0x30>
	return desc[0];
    404e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4050:	2b01      	cmp	r3, #1
    4052:	d914      	bls.n	407e <usb_find_ep_desc+0x34>
	return desc[1];
    4054:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4056:	2a04      	cmp	r2, #4
    4058:	d013      	beq.n	4082 <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    405a:	2a05      	cmp	r2, #5
    405c:	d00c      	beq.n	4078 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    405e:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    4060:	4281      	cmp	r1, r0
    4062:	d908      	bls.n	4076 <usb_find_ep_desc+0x2c>
	return desc[0];
    4064:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4066:	2b01      	cmp	r3, #1
    4068:	d90d      	bls.n	4086 <usb_find_ep_desc+0x3c>
	return desc[1];
    406a:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    406c:	2a04      	cmp	r2, #4
    406e:	d00c      	beq.n	408a <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4070:	2a05      	cmp	r2, #5
    4072:	d1f4      	bne.n	405e <usb_find_ep_desc+0x14>
    4074:	e000      	b.n	4078 <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4076:	2000      	movs	r0, #0
}
    4078:	4770      	bx	lr
	return NULL;
    407a:	2000      	movs	r0, #0
    407c:	e7fc      	b.n	4078 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    407e:	2000      	movs	r0, #0
    4080:	e7fa      	b.n	4078 <usb_find_ep_desc+0x2e>
	return NULL;
    4082:	2000      	movs	r0, #0
    4084:	e7f8      	b.n	4078 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    4086:	2000      	movs	r0, #0
    4088:	e7f6      	b.n	4078 <usb_find_ep_desc+0x2e>
	return NULL;
    408a:	2000      	movs	r0, #0
    408c:	e7f4      	b.n	4078 <usb_find_ep_desc+0x2e>
	...

00004090 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    4090:	b570      	push	{r4, r5, r6, lr}
    4092:	000c      	movs	r4, r1
    4094:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    4096:	2202      	movs	r2, #2
    4098:	4b16      	ldr	r3, [pc, #88]	; (40f4 <usb_find_cfg_desc+0x64>)
    409a:	4798      	blx	r3
	if (!desc) {
    409c:	2800      	cmp	r0, #0
    409e:	d01d      	beq.n	40dc <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    40a0:	4284      	cmp	r4, r0
    40a2:	d91c      	bls.n	40de <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    40a4:	7803      	ldrb	r3, [r0, #0]
    40a6:	2b01      	cmp	r3, #1
    40a8:	d91b      	bls.n	40e2 <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    40aa:	7843      	ldrb	r3, [r0, #1]
    40ac:	2b02      	cmp	r3, #2
    40ae:	d11a      	bne.n	40e6 <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    40b0:	7943      	ldrb	r3, [r0, #5]
    40b2:	42ab      	cmp	r3, r5
    40b4:	d012      	beq.n	40dc <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    40b6:	78c2      	ldrb	r2, [r0, #3]
    40b8:	0212      	lsls	r2, r2, #8
    40ba:	7883      	ldrb	r3, [r0, #2]
    40bc:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    40be:	b29b      	uxth	r3, r3
    40c0:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    40c2:	4284      	cmp	r4, r0
    40c4:	d909      	bls.n	40da <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    40c6:	7803      	ldrb	r3, [r0, #0]
    40c8:	2b01      	cmp	r3, #1
    40ca:	d90e      	bls.n	40ea <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    40cc:	7843      	ldrb	r3, [r0, #1]
    40ce:	2b02      	cmp	r3, #2
    40d0:	d10d      	bne.n	40ee <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    40d2:	7943      	ldrb	r3, [r0, #5]
    40d4:	42ab      	cmp	r3, r5
    40d6:	d1ee      	bne.n	40b6 <usb_find_cfg_desc+0x26>
    40d8:	e000      	b.n	40dc <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    40da:	2000      	movs	r0, #0
}
    40dc:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    40de:	2000      	movs	r0, #0
    40e0:	e7fc      	b.n	40dc <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    40e2:	2000      	movs	r0, #0
    40e4:	e7fa      	b.n	40dc <usb_find_cfg_desc+0x4c>
	return NULL;
    40e6:	2000      	movs	r0, #0
    40e8:	e7f8      	b.n	40dc <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    40ea:	2000      	movs	r0, #0
    40ec:	e7f6      	b.n	40dc <usb_find_cfg_desc+0x4c>
	return NULL;
    40ee:	2000      	movs	r0, #0
    40f0:	e7f4      	b.n	40dc <usb_find_cfg_desc+0x4c>
    40f2:	46c0      	nop			; (mov r8, r8)
    40f4:	00004015 	.word	0x00004015

000040f8 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    40f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40fa:	000d      	movs	r5, r1
    40fc:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    40fe:	4288      	cmp	r0, r1
    4100:	d212      	bcs.n	4128 <usb_find_str_desc+0x30>
    4102:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    4104:	4e0a      	ldr	r6, [pc, #40]	; (4130 <usb_find_str_desc+0x38>)
    4106:	2203      	movs	r2, #3
    4108:	0029      	movs	r1, r5
    410a:	47b0      	blx	r6
		if (desc) {
    410c:	2800      	cmp	r0, #0
    410e:	d00e      	beq.n	412e <usb_find_str_desc+0x36>
	return desc[0];
    4110:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    4112:	2b01      	cmp	r3, #1
    4114:	d90a      	bls.n	412c <usb_find_str_desc+0x34>
			if (i == str_index) {
    4116:	42a7      	cmp	r7, r4
    4118:	d009      	beq.n	412e <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    411a:	3401      	adds	r4, #1
    411c:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    411e:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    4120:	4285      	cmp	r5, r0
    4122:	d8f0      	bhi.n	4106 <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    4124:	2000      	movs	r0, #0
    4126:	e002      	b.n	412e <usb_find_str_desc+0x36>
    4128:	2000      	movs	r0, #0
    412a:	e000      	b.n	412e <usb_find_str_desc+0x36>
			_desc_len_check();
    412c:	2000      	movs	r0, #0
}
    412e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4130:	00004015 	.word	0x00004015

00004134 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    4134:	6803      	ldr	r3, [r0, #0]
    4136:	2b00      	cmp	r3, #0
    4138:	d00a      	beq.n	4150 <is_list_element+0x1c>
		if (it == element) {
    413a:	428b      	cmp	r3, r1
    413c:	d00a      	beq.n	4154 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    413e:	681b      	ldr	r3, [r3, #0]
    4140:	2b00      	cmp	r3, #0
    4142:	d003      	beq.n	414c <is_list_element+0x18>
		if (it == element) {
    4144:	4299      	cmp	r1, r3
    4146:	d1fa      	bne.n	413e <is_list_element+0xa>
			return true;
    4148:	2001      	movs	r0, #1
    414a:	e000      	b.n	414e <is_list_element+0x1a>
		}
	}

	return false;
    414c:	2000      	movs	r0, #0
}
    414e:	4770      	bx	lr
	return false;
    4150:	2000      	movs	r0, #0
    4152:	e7fc      	b.n	414e <is_list_element+0x1a>
			return true;
    4154:	2001      	movs	r0, #1
    4156:	e7fa      	b.n	414e <is_list_element+0x1a>

00004158 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    4158:	b570      	push	{r4, r5, r6, lr}
    415a:	0005      	movs	r5, r0
    415c:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    415e:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    4160:	4b0a      	ldr	r3, [pc, #40]	; (418c <list_insert_at_end+0x34>)
    4162:	4798      	blx	r3
    4164:	2301      	movs	r3, #1
    4166:	4058      	eors	r0, r3
    4168:	b2c0      	uxtb	r0, r0
    416a:	224f      	movs	r2, #79	; 0x4f
    416c:	4908      	ldr	r1, [pc, #32]	; (4190 <list_insert_at_end+0x38>)
    416e:	4b09      	ldr	r3, [pc, #36]	; (4194 <list_insert_at_end+0x3c>)
    4170:	4798      	blx	r3

	if (!list->head) {
    4172:	682b      	ldr	r3, [r5, #0]
    4174:	2b00      	cmp	r3, #0
    4176:	d103      	bne.n	4180 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    4178:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    417a:	6033      	str	r3, [r6, #0]
		return;
    417c:	e005      	b.n	418a <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    417e:	001c      	movs	r4, r3
	while (it->next) {
    4180:	6823      	ldr	r3, [r4, #0]
    4182:	2b00      	cmp	r3, #0
    4184:	d1fb      	bne.n	417e <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    4186:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    4188:	6033      	str	r3, [r6, #0]
}
    418a:	bd70      	pop	{r4, r5, r6, pc}
    418c:	00004135 	.word	0x00004135
    4190:	00004908 	.word	0x00004908
    4194:	00001999 	.word	0x00001999

00004198 <_ZL17complete_cb_SPI_0PK22spi_m_async_descriptor>:
static void complete_cb_SPI_0(const struct spi_m_async_descriptor *const io_descr)
{
	//SPI_Asyn_Class spiHandler;
	//ptrSPIClass=pSPIClass;
	//ptrSPIClass->ready=true;
	asm("nop");
    4198:	46c0      	nop			; (mov r8, r8)
	ptrSPIClass->setSPIReady();
    419a:	4b03      	ldr	r3, [pc, #12]	; (41a8 <_ZL17complete_cb_SPI_0PK22spi_m_async_descriptor+0x10>)
    419c:	681b      	ldr	r3, [r3, #0]
	spi_m_async_disable(&SPI0);
	
}
void  SPI_Asyn_Class::setSPIReady(void)
{
	ready=true;
    419e:	2201      	movs	r2, #1
    41a0:	701a      	strb	r2, [r3, #0]
	ready=true;
    41a2:	701a      	strb	r2, [r3, #0]
	asm("nop");
    41a4:	46c0      	nop			; (mov r8, r8)
}
    41a6:	4770      	bx	lr
    41a8:	20000860 	.word	0x20000860

000041ac <_ZN14SPI_Asyn_ClassD1Ev>:
} //~SPI_Asyn_Class
    41ac:	4770      	bx	lr
	...

000041b0 <_ZN14SPI_Asyn_ClassC1Eh>:
SPI_Asyn_Class::SPI_Asyn_Class(uint8_t p){
    41b0:	b510      	push	{r4, lr}
    41b2:	0004      	movs	r4, r0
	portNumber=p;
    41b4:	2350      	movs	r3, #80	; 0x50
    41b6:	54c1      	strb	r1, [r0, r3]
	SPI0=SPI_0;
    41b8:	3008      	adds	r0, #8
    41ba:	2248      	movs	r2, #72	; 0x48
    41bc:	4903      	ldr	r1, [pc, #12]	; (41cc <_ZN14SPI_Asyn_ClassC1Eh+0x1c>)
    41be:	4b04      	ldr	r3, [pc, #16]	; (41d0 <_ZN14SPI_Asyn_ClassC1Eh+0x20>)
    41c0:	4798      	blx	r3
	ptrSPIClass=this;
    41c2:	4b04      	ldr	r3, [pc, #16]	; (41d4 <_ZN14SPI_Asyn_ClassC1Eh+0x24>)
    41c4:	601c      	str	r4, [r3, #0]
}
    41c6:	0020      	movs	r0, r4
    41c8:	bd10      	pop	{r4, pc}
    41ca:	46c0      	nop			; (mov r8, r8)
    41cc:	20000864 	.word	0x20000864
    41d0:	00004525 	.word	0x00004525
    41d4:	20000860 	.word	0x20000860

000041d8 <_ZN14SPI_Asyn_Class4initEv>:
void SPI_Asyn_Class::init(){
    41d8:	b510      	push	{r4, lr}
    41da:	0004      	movs	r4, r0
	SPI_0_CLOCK_init();
    41dc:	4b07      	ldr	r3, [pc, #28]	; (41fc <_ZN14SPI_Asyn_Class4initEv+0x24>)
    41de:	4798      	blx	r3
	spi_m_async_init(&SPI0, SERCOM0);
    41e0:	0020      	movs	r0, r4
    41e2:	3008      	adds	r0, #8
    41e4:	4906      	ldr	r1, [pc, #24]	; (4200 <_ZN14SPI_Asyn_Class4initEv+0x28>)
    41e6:	4b07      	ldr	r3, [pc, #28]	; (4204 <_ZN14SPI_Asyn_Class4initEv+0x2c>)
    41e8:	4798      	blx	r3
	SPI_0_PORT_init();
    41ea:	4b07      	ldr	r3, [pc, #28]	; (4208 <_ZN14SPI_Asyn_Class4initEv+0x30>)
    41ec:	4798      	blx	r3
	pSPIClass=this;
    41ee:	65a4      	str	r4, [r4, #88]	; 0x58
	ptrSPIClass=pSPIClass;
    41f0:	4b06      	ldr	r3, [pc, #24]	; (420c <_ZN14SPI_Asyn_Class4initEv+0x34>)
    41f2:	601c      	str	r4, [r3, #0]
	ready=true;
    41f4:	2301      	movs	r3, #1
    41f6:	7023      	strb	r3, [r4, #0]
}
    41f8:	bd10      	pop	{r4, pc}
    41fa:	46c0      	nop			; (mov r8, r8)
    41fc:	00000abd 	.word	0x00000abd
    4200:	42000800 	.word	0x42000800
    4204:	0000100d 	.word	0x0000100d
    4208:	00000a01 	.word	0x00000a01
    420c:	20000860 	.word	0x20000860

00004210 <_ZN14SPI_Asyn_Class6enableEv>:
int32_t SPI_Asyn_Class::enable(){
    4210:	b570      	push	{r4, r5, r6, lr}
    4212:	0004      	movs	r4, r0
	spi_m_async_get_io_descriptor(&SPI0, &spio);
    4214:	0005      	movs	r5, r0
    4216:	3508      	adds	r5, #8
    4218:	1d01      	adds	r1, r0, #4
    421a:	0028      	movs	r0, r5
    421c:	4b06      	ldr	r3, [pc, #24]	; (4238 <_ZN14SPI_Asyn_Class6enableEv+0x28>)
    421e:	4798      	blx	r3
	spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(complete_cb_SPI_0));
    4220:	4a06      	ldr	r2, [pc, #24]	; (423c <_ZN14SPI_Asyn_Class6enableEv+0x2c>)
    4222:	2100      	movs	r1, #0
    4224:	0028      	movs	r0, r5
    4226:	4b06      	ldr	r3, [pc, #24]	; (4240 <_ZN14SPI_Asyn_Class6enableEv+0x30>)
    4228:	4798      	blx	r3
	spi_m_async_enable(&SPI0);
    422a:	0028      	movs	r0, r5
    422c:	4b05      	ldr	r3, [pc, #20]	; (4244 <_ZN14SPI_Asyn_Class6enableEv+0x34>)
    422e:	4798      	blx	r3
	ready=true;
    4230:	2301      	movs	r3, #1
    4232:	7023      	strb	r3, [r4, #0]
}
    4234:	2000      	movs	r0, #0
    4236:	bd70      	pop	{r4, r5, r6, pc}
    4238:	00001149 	.word	0x00001149
    423c:	00004199 	.word	0x00004199
    4240:	000010f9 	.word	0x000010f9
    4244:	00001091 	.word	0x00001091

00004248 <_ZN14SPI_Asyn_Class5writeEPKhl>:
int32_t  SPI_Asyn_Class::write(const uint8_t * p, int32_t n){
    4248:	b510      	push	{r4, lr}
		while(!ready){
    424a:	7803      	ldrb	r3, [r0, #0]
    424c:	2b00      	cmp	r3, #0
    424e:	d0fc      	beq.n	424a <_ZN14SPI_Asyn_Class5writeEPKhl+0x2>
	ready=false;
    4250:	2300      	movs	r3, #0
    4252:	7003      	strb	r3, [r0, #0]
	w= io_write(spio,p,(uint16_t)n);
    4254:	b292      	uxth	r2, r2
    4256:	6840      	ldr	r0, [r0, #4]
    4258:	4b01      	ldr	r3, [pc, #4]	; (4260 <_ZN14SPI_Asyn_Class5writeEPKhl+0x18>)
    425a:	4798      	blx	r3
}
    425c:	bd10      	pop	{r4, pc}
    425e:	46c0      	nop			; (mov r8, r8)
    4260:	00004291 	.word	0x00004291

00004264 <_ZN14SPI_Asyn_Class4readEPhl>:
int32_t  SPI_Asyn_Class::read(uint8_t * p, int32_t n){
    4264:	b510      	push	{r4, lr}
		while(!ready){
    4266:	7803      	ldrb	r3, [r0, #0]
    4268:	2b00      	cmp	r3, #0
    426a:	d0fc      	beq.n	4266 <_ZN14SPI_Asyn_Class4readEPhl+0x2>
	ready=false;
    426c:	2300      	movs	r3, #0
    426e:	7003      	strb	r3, [r0, #0]
	r=io_read(spio,p,(uint16_t)n);
    4270:	b292      	uxth	r2, r2
    4272:	6840      	ldr	r0, [r0, #4]
    4274:	4b01      	ldr	r3, [pc, #4]	; (427c <_ZN14SPI_Asyn_Class4readEPhl+0x18>)
    4276:	4798      	blx	r3
}
    4278:	bd10      	pop	{r4, pc}
    427a:	46c0      	nop			; (mov r8, r8)
    427c:	000042c5 	.word	0x000042c5

00004280 <_ZN14SPI_Asyn_Class7disableEv>:
void SPI_Asyn_Class::disable(void){
    4280:	b510      	push	{r4, lr}
	spi_m_async_disable(&SPI0);
    4282:	3008      	adds	r0, #8
    4284:	4b01      	ldr	r3, [pc, #4]	; (428c <_ZN14SPI_Asyn_Class7disableEv+0xc>)
    4286:	4798      	blx	r3
}
    4288:	bd10      	pop	{r4, pc}
    428a:	46c0      	nop			; (mov r8, r8)
    428c:	000010b9 	.word	0x000010b9

00004290 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    4290:	b570      	push	{r4, r5, r6, lr}
    4292:	0006      	movs	r6, r0
    4294:	000c      	movs	r4, r1
    4296:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    4298:	2800      	cmp	r0, #0
    429a:	d00d      	beq.n	42b8 <io_write+0x28>
    429c:	0008      	movs	r0, r1
    429e:	1e43      	subs	r3, r0, #1
    42a0:	4198      	sbcs	r0, r3
    42a2:	b2c0      	uxtb	r0, r0
    42a4:	2234      	movs	r2, #52	; 0x34
    42a6:	4905      	ldr	r1, [pc, #20]	; (42bc <io_write+0x2c>)
    42a8:	4b05      	ldr	r3, [pc, #20]	; (42c0 <io_write+0x30>)
    42aa:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    42ac:	6833      	ldr	r3, [r6, #0]
    42ae:	002a      	movs	r2, r5
    42b0:	0021      	movs	r1, r4
    42b2:	0030      	movs	r0, r6
    42b4:	4798      	blx	r3
}
    42b6:	bd70      	pop	{r4, r5, r6, pc}
    42b8:	2000      	movs	r0, #0
    42ba:	e7f3      	b.n	42a4 <io_write+0x14>
    42bc:	00004928 	.word	0x00004928
    42c0:	00001999 	.word	0x00001999

000042c4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    42c4:	b570      	push	{r4, r5, r6, lr}
    42c6:	0006      	movs	r6, r0
    42c8:	000c      	movs	r4, r1
    42ca:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    42cc:	2800      	cmp	r0, #0
    42ce:	d00d      	beq.n	42ec <io_read+0x28>
    42d0:	0008      	movs	r0, r1
    42d2:	1e43      	subs	r3, r0, #1
    42d4:	4198      	sbcs	r0, r3
    42d6:	b2c0      	uxtb	r0, r0
    42d8:	223d      	movs	r2, #61	; 0x3d
    42da:	4905      	ldr	r1, [pc, #20]	; (42f0 <io_read+0x2c>)
    42dc:	4b05      	ldr	r3, [pc, #20]	; (42f4 <io_read+0x30>)
    42de:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    42e0:	6873      	ldr	r3, [r6, #4]
    42e2:	002a      	movs	r2, r5
    42e4:	0021      	movs	r1, r4
    42e6:	0030      	movs	r0, r6
    42e8:	4798      	blx	r3
}
    42ea:	bd70      	pop	{r4, r5, r6, pc}
    42ec:	2000      	movs	r0, #0
    42ee:	e7f3      	b.n	42d8 <io_read+0x14>
    42f0:	00004928 	.word	0x00004928
    42f4:	00001999 	.word	0x00001999

000042f8 <__aeabi_atexit>:
    42f8:	000b      	movs	r3, r1
    42fa:	b510      	push	{r4, lr}
    42fc:	0001      	movs	r1, r0
    42fe:	0018      	movs	r0, r3
    4300:	f000 f8e4 	bl	44cc <__cxa_atexit>
    4304:	bd10      	pop	{r4, pc}
    4306:	46c0      	nop			; (mov r8, r8)

00004308 <__aeabi_cfrcmple>:
    4308:	4684      	mov	ip, r0
    430a:	1c08      	adds	r0, r1, #0
    430c:	4661      	mov	r1, ip
    430e:	e7ff      	b.n	4310 <__aeabi_cfcmpeq>

00004310 <__aeabi_cfcmpeq>:
    4310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4312:	f000 f899 	bl	4448 <__lesf2>
    4316:	2800      	cmp	r0, #0
    4318:	d401      	bmi.n	431e <__aeabi_cfcmpeq+0xe>
    431a:	2100      	movs	r1, #0
    431c:	42c8      	cmn	r0, r1
    431e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004320 <__aeabi_fcmpeq>:
    4320:	b510      	push	{r4, lr}
    4322:	f000 f82b 	bl	437c <__eqsf2>
    4326:	4240      	negs	r0, r0
    4328:	3001      	adds	r0, #1
    432a:	bd10      	pop	{r4, pc}

0000432c <__aeabi_fcmplt>:
    432c:	b510      	push	{r4, lr}
    432e:	f000 f88b 	bl	4448 <__lesf2>
    4332:	2800      	cmp	r0, #0
    4334:	db01      	blt.n	433a <__aeabi_fcmplt+0xe>
    4336:	2000      	movs	r0, #0
    4338:	bd10      	pop	{r4, pc}
    433a:	2001      	movs	r0, #1
    433c:	bd10      	pop	{r4, pc}
    433e:	46c0      	nop			; (mov r8, r8)

00004340 <__aeabi_fcmple>:
    4340:	b510      	push	{r4, lr}
    4342:	f000 f881 	bl	4448 <__lesf2>
    4346:	2800      	cmp	r0, #0
    4348:	dd01      	ble.n	434e <__aeabi_fcmple+0xe>
    434a:	2000      	movs	r0, #0
    434c:	bd10      	pop	{r4, pc}
    434e:	2001      	movs	r0, #1
    4350:	bd10      	pop	{r4, pc}
    4352:	46c0      	nop			; (mov r8, r8)

00004354 <__aeabi_fcmpgt>:
    4354:	b510      	push	{r4, lr}
    4356:	f000 f837 	bl	43c8 <__gesf2>
    435a:	2800      	cmp	r0, #0
    435c:	dc01      	bgt.n	4362 <__aeabi_fcmpgt+0xe>
    435e:	2000      	movs	r0, #0
    4360:	bd10      	pop	{r4, pc}
    4362:	2001      	movs	r0, #1
    4364:	bd10      	pop	{r4, pc}
    4366:	46c0      	nop			; (mov r8, r8)

00004368 <__aeabi_fcmpge>:
    4368:	b510      	push	{r4, lr}
    436a:	f000 f82d 	bl	43c8 <__gesf2>
    436e:	2800      	cmp	r0, #0
    4370:	da01      	bge.n	4376 <__aeabi_fcmpge+0xe>
    4372:	2000      	movs	r0, #0
    4374:	bd10      	pop	{r4, pc}
    4376:	2001      	movs	r0, #1
    4378:	bd10      	pop	{r4, pc}
    437a:	46c0      	nop			; (mov r8, r8)

0000437c <__eqsf2>:
    437c:	b570      	push	{r4, r5, r6, lr}
    437e:	0042      	lsls	r2, r0, #1
    4380:	0245      	lsls	r5, r0, #9
    4382:	024e      	lsls	r6, r1, #9
    4384:	004c      	lsls	r4, r1, #1
    4386:	0fc3      	lsrs	r3, r0, #31
    4388:	0a6d      	lsrs	r5, r5, #9
    438a:	0e12      	lsrs	r2, r2, #24
    438c:	0a76      	lsrs	r6, r6, #9
    438e:	0e24      	lsrs	r4, r4, #24
    4390:	0fc9      	lsrs	r1, r1, #31
    4392:	2001      	movs	r0, #1
    4394:	2aff      	cmp	r2, #255	; 0xff
    4396:	d006      	beq.n	43a6 <__eqsf2+0x2a>
    4398:	2cff      	cmp	r4, #255	; 0xff
    439a:	d003      	beq.n	43a4 <__eqsf2+0x28>
    439c:	42a2      	cmp	r2, r4
    439e:	d101      	bne.n	43a4 <__eqsf2+0x28>
    43a0:	42b5      	cmp	r5, r6
    43a2:	d006      	beq.n	43b2 <__eqsf2+0x36>
    43a4:	bd70      	pop	{r4, r5, r6, pc}
    43a6:	2d00      	cmp	r5, #0
    43a8:	d1fc      	bne.n	43a4 <__eqsf2+0x28>
    43aa:	2cff      	cmp	r4, #255	; 0xff
    43ac:	d1fa      	bne.n	43a4 <__eqsf2+0x28>
    43ae:	2e00      	cmp	r6, #0
    43b0:	d1f8      	bne.n	43a4 <__eqsf2+0x28>
    43b2:	428b      	cmp	r3, r1
    43b4:	d006      	beq.n	43c4 <__eqsf2+0x48>
    43b6:	2001      	movs	r0, #1
    43b8:	2a00      	cmp	r2, #0
    43ba:	d1f3      	bne.n	43a4 <__eqsf2+0x28>
    43bc:	0028      	movs	r0, r5
    43be:	1e45      	subs	r5, r0, #1
    43c0:	41a8      	sbcs	r0, r5
    43c2:	e7ef      	b.n	43a4 <__eqsf2+0x28>
    43c4:	2000      	movs	r0, #0
    43c6:	e7ed      	b.n	43a4 <__eqsf2+0x28>

000043c8 <__gesf2>:
    43c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    43ca:	0042      	lsls	r2, r0, #1
    43cc:	0245      	lsls	r5, r0, #9
    43ce:	024c      	lsls	r4, r1, #9
    43d0:	0fc3      	lsrs	r3, r0, #31
    43d2:	0048      	lsls	r0, r1, #1
    43d4:	0a6d      	lsrs	r5, r5, #9
    43d6:	0e12      	lsrs	r2, r2, #24
    43d8:	0a64      	lsrs	r4, r4, #9
    43da:	0e00      	lsrs	r0, r0, #24
    43dc:	0fc9      	lsrs	r1, r1, #31
    43de:	2aff      	cmp	r2, #255	; 0xff
    43e0:	d01e      	beq.n	4420 <__gesf2+0x58>
    43e2:	28ff      	cmp	r0, #255	; 0xff
    43e4:	d021      	beq.n	442a <__gesf2+0x62>
    43e6:	2a00      	cmp	r2, #0
    43e8:	d10a      	bne.n	4400 <__gesf2+0x38>
    43ea:	426e      	negs	r6, r5
    43ec:	416e      	adcs	r6, r5
    43ee:	b2f6      	uxtb	r6, r6
    43f0:	2800      	cmp	r0, #0
    43f2:	d10f      	bne.n	4414 <__gesf2+0x4c>
    43f4:	2c00      	cmp	r4, #0
    43f6:	d10d      	bne.n	4414 <__gesf2+0x4c>
    43f8:	2000      	movs	r0, #0
    43fa:	2d00      	cmp	r5, #0
    43fc:	d009      	beq.n	4412 <__gesf2+0x4a>
    43fe:	e005      	b.n	440c <__gesf2+0x44>
    4400:	2800      	cmp	r0, #0
    4402:	d101      	bne.n	4408 <__gesf2+0x40>
    4404:	2c00      	cmp	r4, #0
    4406:	d001      	beq.n	440c <__gesf2+0x44>
    4408:	428b      	cmp	r3, r1
    440a:	d011      	beq.n	4430 <__gesf2+0x68>
    440c:	2101      	movs	r1, #1
    440e:	4258      	negs	r0, r3
    4410:	4308      	orrs	r0, r1
    4412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4414:	2e00      	cmp	r6, #0
    4416:	d0f7      	beq.n	4408 <__gesf2+0x40>
    4418:	2001      	movs	r0, #1
    441a:	3901      	subs	r1, #1
    441c:	4308      	orrs	r0, r1
    441e:	e7f8      	b.n	4412 <__gesf2+0x4a>
    4420:	2d00      	cmp	r5, #0
    4422:	d0de      	beq.n	43e2 <__gesf2+0x1a>
    4424:	2002      	movs	r0, #2
    4426:	4240      	negs	r0, r0
    4428:	e7f3      	b.n	4412 <__gesf2+0x4a>
    442a:	2c00      	cmp	r4, #0
    442c:	d0db      	beq.n	43e6 <__gesf2+0x1e>
    442e:	e7f9      	b.n	4424 <__gesf2+0x5c>
    4430:	4282      	cmp	r2, r0
    4432:	dceb      	bgt.n	440c <__gesf2+0x44>
    4434:	db04      	blt.n	4440 <__gesf2+0x78>
    4436:	42a5      	cmp	r5, r4
    4438:	d8e8      	bhi.n	440c <__gesf2+0x44>
    443a:	2000      	movs	r0, #0
    443c:	42a5      	cmp	r5, r4
    443e:	d2e8      	bcs.n	4412 <__gesf2+0x4a>
    4440:	2101      	movs	r1, #1
    4442:	1e58      	subs	r0, r3, #1
    4444:	4308      	orrs	r0, r1
    4446:	e7e4      	b.n	4412 <__gesf2+0x4a>

00004448 <__lesf2>:
    4448:	b5f0      	push	{r4, r5, r6, r7, lr}
    444a:	0042      	lsls	r2, r0, #1
    444c:	024d      	lsls	r5, r1, #9
    444e:	004c      	lsls	r4, r1, #1
    4450:	0246      	lsls	r6, r0, #9
    4452:	0a76      	lsrs	r6, r6, #9
    4454:	0e12      	lsrs	r2, r2, #24
    4456:	0fc3      	lsrs	r3, r0, #31
    4458:	0a6d      	lsrs	r5, r5, #9
    445a:	0e24      	lsrs	r4, r4, #24
    445c:	0fc9      	lsrs	r1, r1, #31
    445e:	2aff      	cmp	r2, #255	; 0xff
    4460:	d016      	beq.n	4490 <__lesf2+0x48>
    4462:	2cff      	cmp	r4, #255	; 0xff
    4464:	d018      	beq.n	4498 <__lesf2+0x50>
    4466:	2a00      	cmp	r2, #0
    4468:	d10a      	bne.n	4480 <__lesf2+0x38>
    446a:	4270      	negs	r0, r6
    446c:	4170      	adcs	r0, r6
    446e:	b2c0      	uxtb	r0, r0
    4470:	2c00      	cmp	r4, #0
    4472:	d015      	beq.n	44a0 <__lesf2+0x58>
    4474:	2800      	cmp	r0, #0
    4476:	d005      	beq.n	4484 <__lesf2+0x3c>
    4478:	2001      	movs	r0, #1
    447a:	3901      	subs	r1, #1
    447c:	4308      	orrs	r0, r1
    447e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4480:	2c00      	cmp	r4, #0
    4482:	d013      	beq.n	44ac <__lesf2+0x64>
    4484:	4299      	cmp	r1, r3
    4486:	d014      	beq.n	44b2 <__lesf2+0x6a>
    4488:	2001      	movs	r0, #1
    448a:	425b      	negs	r3, r3
    448c:	4318      	orrs	r0, r3
    448e:	e7f6      	b.n	447e <__lesf2+0x36>
    4490:	2002      	movs	r0, #2
    4492:	2e00      	cmp	r6, #0
    4494:	d1f3      	bne.n	447e <__lesf2+0x36>
    4496:	e7e4      	b.n	4462 <__lesf2+0x1a>
    4498:	2002      	movs	r0, #2
    449a:	2d00      	cmp	r5, #0
    449c:	d1ef      	bne.n	447e <__lesf2+0x36>
    449e:	e7e2      	b.n	4466 <__lesf2+0x1e>
    44a0:	2d00      	cmp	r5, #0
    44a2:	d1e7      	bne.n	4474 <__lesf2+0x2c>
    44a4:	2000      	movs	r0, #0
    44a6:	2e00      	cmp	r6, #0
    44a8:	d0e9      	beq.n	447e <__lesf2+0x36>
    44aa:	e7ed      	b.n	4488 <__lesf2+0x40>
    44ac:	2d00      	cmp	r5, #0
    44ae:	d1e9      	bne.n	4484 <__lesf2+0x3c>
    44b0:	e7ea      	b.n	4488 <__lesf2+0x40>
    44b2:	42a2      	cmp	r2, r4
    44b4:	dc06      	bgt.n	44c4 <__lesf2+0x7c>
    44b6:	dbdf      	blt.n	4478 <__lesf2+0x30>
    44b8:	42ae      	cmp	r6, r5
    44ba:	d803      	bhi.n	44c4 <__lesf2+0x7c>
    44bc:	2000      	movs	r0, #0
    44be:	42ae      	cmp	r6, r5
    44c0:	d3da      	bcc.n	4478 <__lesf2+0x30>
    44c2:	e7dc      	b.n	447e <__lesf2+0x36>
    44c4:	2001      	movs	r0, #1
    44c6:	4249      	negs	r1, r1
    44c8:	4308      	orrs	r0, r1
    44ca:	e7d8      	b.n	447e <__lesf2+0x36>

000044cc <__cxa_atexit>:
    44cc:	b510      	push	{r4, lr}
    44ce:	0013      	movs	r3, r2
    44d0:	000a      	movs	r2, r1
    44d2:	0001      	movs	r1, r0
    44d4:	2002      	movs	r0, #2
    44d6:	f000 f8b1 	bl	463c <__register_exitproc>
    44da:	bd10      	pop	{r4, pc}

000044dc <__libc_init_array>:
    44dc:	b570      	push	{r4, r5, r6, lr}
    44de:	4e0d      	ldr	r6, [pc, #52]	; (4514 <__libc_init_array+0x38>)
    44e0:	4d0d      	ldr	r5, [pc, #52]	; (4518 <__libc_init_array+0x3c>)
    44e2:	2400      	movs	r4, #0
    44e4:	1bad      	subs	r5, r5, r6
    44e6:	10ad      	asrs	r5, r5, #2
    44e8:	d005      	beq.n	44f6 <__libc_init_array+0x1a>
    44ea:	00a3      	lsls	r3, r4, #2
    44ec:	58f3      	ldr	r3, [r6, r3]
    44ee:	3401      	adds	r4, #1
    44f0:	4798      	blx	r3
    44f2:	42a5      	cmp	r5, r4
    44f4:	d1f9      	bne.n	44ea <__libc_init_array+0xe>
    44f6:	f000 fa23 	bl	4940 <_init>
    44fa:	4e08      	ldr	r6, [pc, #32]	; (451c <__libc_init_array+0x40>)
    44fc:	4d08      	ldr	r5, [pc, #32]	; (4520 <__libc_init_array+0x44>)
    44fe:	2400      	movs	r4, #0
    4500:	1bad      	subs	r5, r5, r6
    4502:	10ad      	asrs	r5, r5, #2
    4504:	d005      	beq.n	4512 <__libc_init_array+0x36>
    4506:	00a3      	lsls	r3, r4, #2
    4508:	58f3      	ldr	r3, [r6, r3]
    450a:	3401      	adds	r4, #1
    450c:	4798      	blx	r3
    450e:	42a5      	cmp	r5, r4
    4510:	d1f9      	bne.n	4506 <__libc_init_array+0x2a>
    4512:	bd70      	pop	{r4, r5, r6, pc}
    4514:	0000494c 	.word	0x0000494c
    4518:	0000494c 	.word	0x0000494c
    451c:	0000494c 	.word	0x0000494c
    4520:	00004958 	.word	0x00004958

00004524 <memcpy>:
    4524:	b5f0      	push	{r4, r5, r6, r7, lr}
    4526:	0005      	movs	r5, r0
    4528:	2a0f      	cmp	r2, #15
    452a:	d92f      	bls.n	458c <memcpy+0x68>
    452c:	000b      	movs	r3, r1
    452e:	4303      	orrs	r3, r0
    4530:	079b      	lsls	r3, r3, #30
    4532:	d134      	bne.n	459e <memcpy+0x7a>
    4534:	0016      	movs	r6, r2
    4536:	000c      	movs	r4, r1
    4538:	0003      	movs	r3, r0
    453a:	3e10      	subs	r6, #16
    453c:	0935      	lsrs	r5, r6, #4
    453e:	3501      	adds	r5, #1
    4540:	012d      	lsls	r5, r5, #4
    4542:	1945      	adds	r5, r0, r5
    4544:	6827      	ldr	r7, [r4, #0]
    4546:	601f      	str	r7, [r3, #0]
    4548:	6867      	ldr	r7, [r4, #4]
    454a:	605f      	str	r7, [r3, #4]
    454c:	68a7      	ldr	r7, [r4, #8]
    454e:	609f      	str	r7, [r3, #8]
    4550:	68e7      	ldr	r7, [r4, #12]
    4552:	3410      	adds	r4, #16
    4554:	60df      	str	r7, [r3, #12]
    4556:	3310      	adds	r3, #16
    4558:	429d      	cmp	r5, r3
    455a:	d1f3      	bne.n	4544 <memcpy+0x20>
    455c:	230f      	movs	r3, #15
    455e:	439e      	bics	r6, r3
    4560:	3610      	adds	r6, #16
    4562:	1985      	adds	r5, r0, r6
    4564:	1989      	adds	r1, r1, r6
    4566:	4013      	ands	r3, r2
    4568:	2b03      	cmp	r3, #3
    456a:	d91a      	bls.n	45a2 <memcpy+0x7e>
    456c:	1f1e      	subs	r6, r3, #4
    456e:	2300      	movs	r3, #0
    4570:	08b4      	lsrs	r4, r6, #2
    4572:	3401      	adds	r4, #1
    4574:	00a4      	lsls	r4, r4, #2
    4576:	58cf      	ldr	r7, [r1, r3]
    4578:	50ef      	str	r7, [r5, r3]
    457a:	3304      	adds	r3, #4
    457c:	42a3      	cmp	r3, r4
    457e:	d1fa      	bne.n	4576 <memcpy+0x52>
    4580:	2403      	movs	r4, #3
    4582:	43a6      	bics	r6, r4
    4584:	1d33      	adds	r3, r6, #4
    4586:	4022      	ands	r2, r4
    4588:	18c9      	adds	r1, r1, r3
    458a:	18ed      	adds	r5, r5, r3
    458c:	2a00      	cmp	r2, #0
    458e:	d005      	beq.n	459c <memcpy+0x78>
    4590:	2300      	movs	r3, #0
    4592:	5ccc      	ldrb	r4, [r1, r3]
    4594:	54ec      	strb	r4, [r5, r3]
    4596:	3301      	adds	r3, #1
    4598:	4293      	cmp	r3, r2
    459a:	d1fa      	bne.n	4592 <memcpy+0x6e>
    459c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    459e:	0005      	movs	r5, r0
    45a0:	e7f6      	b.n	4590 <memcpy+0x6c>
    45a2:	001a      	movs	r2, r3
    45a4:	e7f2      	b.n	458c <memcpy+0x68>
    45a6:	46c0      	nop			; (mov r8, r8)

000045a8 <memset>:
    45a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    45aa:	0783      	lsls	r3, r0, #30
    45ac:	d043      	beq.n	4636 <memset+0x8e>
    45ae:	1e54      	subs	r4, r2, #1
    45b0:	2a00      	cmp	r2, #0
    45b2:	d03f      	beq.n	4634 <memset+0x8c>
    45b4:	b2ce      	uxtb	r6, r1
    45b6:	0002      	movs	r2, r0
    45b8:	2503      	movs	r5, #3
    45ba:	e002      	b.n	45c2 <memset+0x1a>
    45bc:	001a      	movs	r2, r3
    45be:	3c01      	subs	r4, #1
    45c0:	d338      	bcc.n	4634 <memset+0x8c>
    45c2:	1c53      	adds	r3, r2, #1
    45c4:	7016      	strb	r6, [r2, #0]
    45c6:	422b      	tst	r3, r5
    45c8:	d1f8      	bne.n	45bc <memset+0x14>
    45ca:	2c03      	cmp	r4, #3
    45cc:	d92a      	bls.n	4624 <memset+0x7c>
    45ce:	22ff      	movs	r2, #255	; 0xff
    45d0:	400a      	ands	r2, r1
    45d2:	0215      	lsls	r5, r2, #8
    45d4:	4315      	orrs	r5, r2
    45d6:	042a      	lsls	r2, r5, #16
    45d8:	4315      	orrs	r5, r2
    45da:	2c0f      	cmp	r4, #15
    45dc:	d914      	bls.n	4608 <memset+0x60>
    45de:	0027      	movs	r7, r4
    45e0:	001a      	movs	r2, r3
    45e2:	3f10      	subs	r7, #16
    45e4:	093e      	lsrs	r6, r7, #4
    45e6:	3601      	adds	r6, #1
    45e8:	0136      	lsls	r6, r6, #4
    45ea:	199e      	adds	r6, r3, r6
    45ec:	6015      	str	r5, [r2, #0]
    45ee:	6055      	str	r5, [r2, #4]
    45f0:	6095      	str	r5, [r2, #8]
    45f2:	60d5      	str	r5, [r2, #12]
    45f4:	3210      	adds	r2, #16
    45f6:	4296      	cmp	r6, r2
    45f8:	d1f8      	bne.n	45ec <memset+0x44>
    45fa:	220f      	movs	r2, #15
    45fc:	4397      	bics	r7, r2
    45fe:	3710      	adds	r7, #16
    4600:	19db      	adds	r3, r3, r7
    4602:	4014      	ands	r4, r2
    4604:	2c03      	cmp	r4, #3
    4606:	d90d      	bls.n	4624 <memset+0x7c>
    4608:	001a      	movs	r2, r3
    460a:	1f27      	subs	r7, r4, #4
    460c:	08be      	lsrs	r6, r7, #2
    460e:	3601      	adds	r6, #1
    4610:	00b6      	lsls	r6, r6, #2
    4612:	199e      	adds	r6, r3, r6
    4614:	c220      	stmia	r2!, {r5}
    4616:	42b2      	cmp	r2, r6
    4618:	d1fc      	bne.n	4614 <memset+0x6c>
    461a:	2203      	movs	r2, #3
    461c:	4397      	bics	r7, r2
    461e:	3704      	adds	r7, #4
    4620:	19db      	adds	r3, r3, r7
    4622:	4014      	ands	r4, r2
    4624:	2c00      	cmp	r4, #0
    4626:	d005      	beq.n	4634 <memset+0x8c>
    4628:	b2c9      	uxtb	r1, r1
    462a:	191c      	adds	r4, r3, r4
    462c:	7019      	strb	r1, [r3, #0]
    462e:	3301      	adds	r3, #1
    4630:	429c      	cmp	r4, r3
    4632:	d1fb      	bne.n	462c <memset+0x84>
    4634:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4636:	0014      	movs	r4, r2
    4638:	0003      	movs	r3, r0
    463a:	e7c6      	b.n	45ca <memset+0x22>

0000463c <__register_exitproc>:
    463c:	b5f0      	push	{r4, r5, r6, r7, lr}
    463e:	464e      	mov	r6, r9
    4640:	4645      	mov	r5, r8
    4642:	46de      	mov	lr, fp
    4644:	4657      	mov	r7, sl
    4646:	b5e0      	push	{r5, r6, r7, lr}
    4648:	4d36      	ldr	r5, [pc, #216]	; (4724 <__register_exitproc+0xe8>)
    464a:	b083      	sub	sp, #12
    464c:	0006      	movs	r6, r0
    464e:	6828      	ldr	r0, [r5, #0]
    4650:	4698      	mov	r8, r3
    4652:	000f      	movs	r7, r1
    4654:	4691      	mov	r9, r2
    4656:	f000 f899 	bl	478c <__retarget_lock_acquire_recursive>
    465a:	4b33      	ldr	r3, [pc, #204]	; (4728 <__register_exitproc+0xec>)
    465c:	681c      	ldr	r4, [r3, #0]
    465e:	23a4      	movs	r3, #164	; 0xa4
    4660:	005b      	lsls	r3, r3, #1
    4662:	58e0      	ldr	r0, [r4, r3]
    4664:	2800      	cmp	r0, #0
    4666:	d052      	beq.n	470e <__register_exitproc+0xd2>
    4668:	6843      	ldr	r3, [r0, #4]
    466a:	2b1f      	cmp	r3, #31
    466c:	dc13      	bgt.n	4696 <__register_exitproc+0x5a>
    466e:	1c5a      	adds	r2, r3, #1
    4670:	9201      	str	r2, [sp, #4]
    4672:	2e00      	cmp	r6, #0
    4674:	d128      	bne.n	46c8 <__register_exitproc+0x8c>
    4676:	9a01      	ldr	r2, [sp, #4]
    4678:	3302      	adds	r3, #2
    467a:	009b      	lsls	r3, r3, #2
    467c:	6042      	str	r2, [r0, #4]
    467e:	501f      	str	r7, [r3, r0]
    4680:	6828      	ldr	r0, [r5, #0]
    4682:	f000 f885 	bl	4790 <__retarget_lock_release_recursive>
    4686:	2000      	movs	r0, #0
    4688:	b003      	add	sp, #12
    468a:	bc3c      	pop	{r2, r3, r4, r5}
    468c:	4690      	mov	r8, r2
    468e:	4699      	mov	r9, r3
    4690:	46a2      	mov	sl, r4
    4692:	46ab      	mov	fp, r5
    4694:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4696:	4b25      	ldr	r3, [pc, #148]	; (472c <__register_exitproc+0xf0>)
    4698:	2b00      	cmp	r3, #0
    469a:	d03d      	beq.n	4718 <__register_exitproc+0xdc>
    469c:	20c8      	movs	r0, #200	; 0xc8
    469e:	0040      	lsls	r0, r0, #1
    46a0:	e000      	b.n	46a4 <__register_exitproc+0x68>
    46a2:	bf00      	nop
    46a4:	2800      	cmp	r0, #0
    46a6:	d037      	beq.n	4718 <__register_exitproc+0xdc>
    46a8:	22a4      	movs	r2, #164	; 0xa4
    46aa:	2300      	movs	r3, #0
    46ac:	0052      	lsls	r2, r2, #1
    46ae:	58a1      	ldr	r1, [r4, r2]
    46b0:	6043      	str	r3, [r0, #4]
    46b2:	6001      	str	r1, [r0, #0]
    46b4:	50a0      	str	r0, [r4, r2]
    46b6:	3240      	adds	r2, #64	; 0x40
    46b8:	5083      	str	r3, [r0, r2]
    46ba:	3204      	adds	r2, #4
    46bc:	5083      	str	r3, [r0, r2]
    46be:	3301      	adds	r3, #1
    46c0:	9301      	str	r3, [sp, #4]
    46c2:	2300      	movs	r3, #0
    46c4:	2e00      	cmp	r6, #0
    46c6:	d0d6      	beq.n	4676 <__register_exitproc+0x3a>
    46c8:	009a      	lsls	r2, r3, #2
    46ca:	4692      	mov	sl, r2
    46cc:	4482      	add	sl, r0
    46ce:	464a      	mov	r2, r9
    46d0:	2188      	movs	r1, #136	; 0x88
    46d2:	4654      	mov	r4, sl
    46d4:	5062      	str	r2, [r4, r1]
    46d6:	22c4      	movs	r2, #196	; 0xc4
    46d8:	0052      	lsls	r2, r2, #1
    46da:	4691      	mov	r9, r2
    46dc:	4481      	add	r9, r0
    46de:	464a      	mov	r2, r9
    46e0:	3987      	subs	r1, #135	; 0x87
    46e2:	4099      	lsls	r1, r3
    46e4:	6812      	ldr	r2, [r2, #0]
    46e6:	468b      	mov	fp, r1
    46e8:	430a      	orrs	r2, r1
    46ea:	4694      	mov	ip, r2
    46ec:	464a      	mov	r2, r9
    46ee:	4661      	mov	r1, ip
    46f0:	6011      	str	r1, [r2, #0]
    46f2:	2284      	movs	r2, #132	; 0x84
    46f4:	4641      	mov	r1, r8
    46f6:	0052      	lsls	r2, r2, #1
    46f8:	50a1      	str	r1, [r4, r2]
    46fa:	2e02      	cmp	r6, #2
    46fc:	d1bb      	bne.n	4676 <__register_exitproc+0x3a>
    46fe:	0002      	movs	r2, r0
    4700:	465c      	mov	r4, fp
    4702:	328d      	adds	r2, #141	; 0x8d
    4704:	32ff      	adds	r2, #255	; 0xff
    4706:	6811      	ldr	r1, [r2, #0]
    4708:	430c      	orrs	r4, r1
    470a:	6014      	str	r4, [r2, #0]
    470c:	e7b3      	b.n	4676 <__register_exitproc+0x3a>
    470e:	0020      	movs	r0, r4
    4710:	304d      	adds	r0, #77	; 0x4d
    4712:	30ff      	adds	r0, #255	; 0xff
    4714:	50e0      	str	r0, [r4, r3]
    4716:	e7a7      	b.n	4668 <__register_exitproc+0x2c>
    4718:	6828      	ldr	r0, [r5, #0]
    471a:	f000 f839 	bl	4790 <__retarget_lock_release_recursive>
    471e:	2001      	movs	r0, #1
    4720:	4240      	negs	r0, r0
    4722:	e7b1      	b.n	4688 <__register_exitproc+0x4c>
    4724:	20000498 	.word	0x20000498
    4728:	0000493c 	.word	0x0000493c
    472c:	00000000 	.word	0x00000000

00004730 <register_fini>:
    4730:	4b03      	ldr	r3, [pc, #12]	; (4740 <register_fini+0x10>)
    4732:	b510      	push	{r4, lr}
    4734:	2b00      	cmp	r3, #0
    4736:	d002      	beq.n	473e <register_fini+0xe>
    4738:	4802      	ldr	r0, [pc, #8]	; (4744 <register_fini+0x14>)
    473a:	f000 f805 	bl	4748 <atexit>
    473e:	bd10      	pop	{r4, pc}
    4740:	00000000 	.word	0x00000000
    4744:	00004759 	.word	0x00004759

00004748 <atexit>:
    4748:	b510      	push	{r4, lr}
    474a:	0001      	movs	r1, r0
    474c:	2300      	movs	r3, #0
    474e:	2200      	movs	r2, #0
    4750:	2000      	movs	r0, #0
    4752:	f7ff ff73 	bl	463c <__register_exitproc>
    4756:	bd10      	pop	{r4, pc}

00004758 <__libc_fini_array>:
    4758:	b570      	push	{r4, r5, r6, lr}
    475a:	4b09      	ldr	r3, [pc, #36]	; (4780 <__libc_fini_array+0x28>)
    475c:	4c09      	ldr	r4, [pc, #36]	; (4784 <__libc_fini_array+0x2c>)
    475e:	1ae4      	subs	r4, r4, r3
    4760:	10a4      	asrs	r4, r4, #2
    4762:	d009      	beq.n	4778 <__libc_fini_array+0x20>
    4764:	4a08      	ldr	r2, [pc, #32]	; (4788 <__libc_fini_array+0x30>)
    4766:	18a5      	adds	r5, r4, r2
    4768:	00ad      	lsls	r5, r5, #2
    476a:	18ed      	adds	r5, r5, r3
    476c:	682b      	ldr	r3, [r5, #0]
    476e:	3c01      	subs	r4, #1
    4770:	4798      	blx	r3
    4772:	3d04      	subs	r5, #4
    4774:	2c00      	cmp	r4, #0
    4776:	d1f9      	bne.n	476c <__libc_fini_array+0x14>
    4778:	f000 f8ee 	bl	4958 <_fini>
    477c:	bd70      	pop	{r4, r5, r6, pc}
    477e:	46c0      	nop			; (mov r8, r8)
    4780:	00004964 	.word	0x00004964
    4784:	00004968 	.word	0x00004968
    4788:	3fffffff 	.word	0x3fffffff

0000478c <__retarget_lock_acquire_recursive>:
    478c:	4770      	bx	lr
    478e:	46c0      	nop			; (mov r8, r8)

00004790 <__retarget_lock_release_recursive>:
    4790:	4770      	bx	lr
    4792:	46c0      	nop			; (mov r8, r8)

00004794 <defaultParameters>:
    4794:	02ee 02bc 07d0 02ee 0320 07d0 e000 450d     ........ ......E
    47a4:	de6a 400d 0000 4140 0000 429a 0000 40c0     j..@..@A...B...@
    47b4:	0000 4140 0000 42a4 0000 430c 0000 4302     ..@A...B...C...C
    47c4:	d289 3e7e 8000 4404 8000 4404 0000 41a0     ..~>...D...D...A
    47d4:	0000 41f0 0000 3f80 4000 451c c000 458f     ...A...?.@.E...E
    47e4:	1f40 0000 1f40 0000 1f40 0000 1f40 0000     @...@...@...@...
    47f4:	1388 0000 1388 0000 0064 0000 0064 0000     ........d...d...
    4804:	0000 4100 0000 428c 0000 0000               ...A...B....

00004810 <defaultPreferences>:
    4810:	00fa 0000 0032 0000 2e2e 682f 6c61 732f     ....2...../hal/s
    4820:	6372 682f 6c61 735f 6970 6d5f 615f 7973     rc/hal_spi_m_asy
    4830:	636e 632e 0000 0000 2e2e 682f 6c61 732f     nc.c....../hal/s
    4840:	6372 682f 6c61 755f 6173 7472 615f 7973     rc/hal_usart_asy
    4850:	636e 632e 0000 0000 2e2e 682f 6c61 752f     nc.c....../hal/u
    4860:	6974 736c 732f 6372 752f 6974 736c 725f     tils/src/utils_r
    4870:	6e69 6267 6675 6566 2e72 0063 2e2e 682f     ingbuffer.c.../h
    4880:	6c70 732f 7265 6f63 2f6d 7068 5f6c 6573     pl/sercom/hpl_se
    4890:	6372 6d6f 632e 0000 2000 0000               rcom.c... ..

0000489c <_usb_ep_cfgs>:
    489c:	075c 2000 0000 0000 0040 0000 071c 2000     \.. ....@...... 
    48ac:	0000 0000 0040 0000 06dc 2000 0000 0000     ....@...... ....
    48bc:	0040 0000 3ed4 0000 3bbc 0000 3ed4 0000     @....>...;...>..
    48cc:	3bee 0000 3ed4 0000 3b12 0000 3ed4 0000     .;...>...;...>..
    48dc:	3ed4 0000 3ed4 0000 3b26 0000 3ed4 0000     .>...>..&;...>..
    48ec:	3c22 0000 2e2e 752f 6273 642f 7665 6369     "<..../usb/devic
    48fc:	2f65 7375 6462 2e63 0063 0000 2e2e 682f     e/usbdc.c...../h
    490c:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
    491c:	736c 6c5f 7369 2e74 0063 0000 2e2e 682f     ls_list.c...../h
    492c:	6c61 732f 6372 682f 6c61 695f 2e6f 0063     al/src/hal_io.c.

0000493c <_global_impure_ptr>:
    493c:	0070 2000                                   p.. 

00004940 <_init>:
    4940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4942:	46c0      	nop			; (mov r8, r8)
    4944:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4946:	bc08      	pop	{r3}
    4948:	469e      	mov	lr, r3
    494a:	4770      	bx	lr

0000494c <__init_array_start>:
    494c:	00004731 	.word	0x00004731

00004950 <__frame_dummy_init_array_entry>:
    4950:	000000dd 0000083d                       ....=...

00004958 <_fini>:
    4958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    495a:	46c0      	nop			; (mov r8, r8)
    495c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    495e:	bc08      	pop	{r3}
    4960:	469e      	mov	lr, r3
    4962:	4770      	bx	lr

00004964 <__fini_array_start>:
    4964:	000000b5 	.word	0x000000b5
