
Usart_Asyn_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ea8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004b4  20000000  00003ea8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000434  200004b4  0000435c  000204b4  2**2
                  ALLOC
  3 .stack        00002000  200008e8  00004790  000204b4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204b4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204dc  2**0
                  CONTENTS, READONLY
  6 .debug_info   00034cce  00000000  00000000  00020535  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000431b  00000000  00000000  00055203  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00014fff  00000000  00000000  0005951e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e70  00000000  00000000  0006e51d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000017c0  00000000  00000000  0006f38d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001dbd8  00000000  00000000  00070b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014cc0  00000000  00000000  0008e725  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e918  00000000  00000000  000a33e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000027bc  00000000  00000000  00131d00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 28 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .(. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	9d 2c 00 00 15 01 00 00 29 17 00 00 15 01 00 00     .,......).......
      6c:	79 17 00 00 15 01 00 00 15 01 00 00 15 01 00 00     y...............
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004b4 	.word	0x200004b4
      d4:	00000000 	.word	0x00000000
      d8:	00003ea8 	.word	0x00003ea8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004b8 	.word	0x200004b8
     108:	00003ea8 	.word	0x00003ea8
     10c:	00003ea8 	.word	0x00003ea8
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	00003ea8 	.word	0x00003ea8
     1c8:	20000000 	.word	0x20000000
     1cc:	200004b4 	.word	0x200004b4
     1d0:	20000004 	.word	0x20000004
     1d4:	200004b4 	.word	0x200004b4
     1d8:	200008e8 	.word	0x200008e8
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	00003aa5 	.word	0x00003aa5
     1f8:	000001fd 	.word	0x000001fd

000001fc <main>:
#include "Usart_Asyn_Class.h"

static uint8_t example_USART_0[] = "The parameters are:   \r\n";

int main(void)
{
     1fc:	b570      	push	{r4, r5, r6, lr}
     1fe:	b098      	sub	sp, #96	; 0x60
	atmel_start_init();
     200:	4b0c      	ldr	r3, [pc, #48]	; (234 <main+0x38>)
     202:	4798      	blx	r3
	
	Usart_Asyn_Class	usart0(0);
     204:	2100      	movs	r1, #0
     206:	4668      	mov	r0, sp
     208:	4b0b      	ldr	r3, [pc, #44]	; (238 <main+0x3c>)
     20a:	4798      	blx	r3
	usart0.init();
     20c:	4668      	mov	r0, sp
     20e:	4b0b      	ldr	r3, [pc, #44]	; (23c <main+0x40>)
     210:	4798      	blx	r3

    /* Replace with your application code */
    while (1) 
    {
		usart0.enable();
     212:	4e0b      	ldr	r6, [pc, #44]	; (240 <main+0x44>)
		usart0.write(example_USART_0,sizeof(example_USART_0));
     214:	4d0b      	ldr	r5, [pc, #44]	; (244 <main+0x48>)
     216:	4c0c      	ldr	r4, [pc, #48]	; (248 <main+0x4c>)
		usart0.enable();
     218:	4668      	mov	r0, sp
     21a:	47b0      	blx	r6
		usart0.write(example_USART_0,sizeof(example_USART_0));
     21c:	2219      	movs	r2, #25
     21e:	0029      	movs	r1, r5
     220:	4668      	mov	r0, sp
     222:	47a0      	blx	r4
		delay_ms(500);
     224:	20fa      	movs	r0, #250	; 0xfa
     226:	0040      	lsls	r0, r0, #1
     228:	4b08      	ldr	r3, [pc, #32]	; (24c <main+0x50>)
     22a:	4798      	blx	r3
		usart0.disable();
     22c:	4668      	mov	r0, sp
     22e:	4b08      	ldr	r3, [pc, #32]	; (250 <main+0x54>)
     230:	4798      	blx	r3
     232:	e7f1      	b.n	218 <main+0x1c>
     234:	00000371 	.word	0x00000371
     238:	00000275 	.word	0x00000275
     23c:	00000321 	.word	0x00000321
     240:	0000029d 	.word	0x0000029d
     244:	20000000 	.word	0x20000000
     248:	000002e5 	.word	0x000002e5
     24c:	00000775 	.word	0x00000775
     250:	00000301 	.word	0x00000301

00000254 <_ZL13rx_cb_USART_0PK22usart_async_descriptor>:
{
		ptrUsartClass->setUsartTxReady();
}
static void rx_cb_USART_0(const struct usart_async_descriptor *const io_descr)
{
	ptrUsartClass->setUsartRxReady();
     254:	4b02      	ldr	r3, [pc, #8]	; (260 <_ZL13rx_cb_USART_0PK22usart_async_descriptor+0xc>)
     256:	681b      	ldr	r3, [r3, #0]

}

void  Usart_Asyn_Class::setUsartRxReady(void)
{
	rxReady=true;
     258:	2201      	movs	r2, #1
     25a:	705a      	strb	r2, [r3, #1]
}
     25c:	4770      	bx	lr
     25e:	46c0      	nop			; (mov r8, r8)
     260:	200004d0 	.word	0x200004d0

00000264 <_ZL13tx_cb_USART_0PK22usart_async_descriptor>:
		ptrUsartClass->setUsartTxReady();
     264:	4b02      	ldr	r3, [pc, #8]	; (270 <_ZL13tx_cb_USART_0PK22usart_async_descriptor+0xc>)
     266:	681b      	ldr	r3, [r3, #0]
	txReady=true;
     268:	2201      	movs	r2, #1
     26a:	701a      	strb	r2, [r3, #0]
}
     26c:	4770      	bx	lr
     26e:	46c0      	nop			; (mov r8, r8)
     270:	200004d0 	.word	0x200004d0

00000274 <_ZN16Usart_Asyn_ClassC1Eh>:
Usart_Asyn_Class::Usart_Asyn_Class(uint8_t p)
     274:	b510      	push	{r4, lr}
     276:	0004      	movs	r4, r0
	portNumber=p;
     278:	2358      	movs	r3, #88	; 0x58
     27a:	54c1      	strb	r1, [r0, r3]
	USART0=USART_0;
     27c:	3008      	adds	r0, #8
     27e:	2250      	movs	r2, #80	; 0x50
     280:	4903      	ldr	r1, [pc, #12]	; (290 <_ZN16Usart_Asyn_ClassC1Eh+0x1c>)
     282:	4b04      	ldr	r3, [pc, #16]	; (294 <_ZN16Usart_Asyn_ClassC1Eh+0x20>)
     284:	4798      	blx	r3
	ptrUsartClass=this;
     286:	4b04      	ldr	r3, [pc, #16]	; (298 <_ZN16Usart_Asyn_ClassC1Eh+0x24>)
     288:	601c      	str	r4, [r3, #0]
} //Usart_Asyn_Class
     28a:	0020      	movs	r0, r4
     28c:	bd10      	pop	{r4, pc}
     28e:	46c0      	nop			; (mov r8, r8)
     290:	20000874 	.word	0x20000874
     294:	00003aed 	.word	0x00003aed
     298:	200004d0 	.word	0x200004d0

0000029c <_ZN16Usart_Asyn_Class6enableEv>:
int32_t Usart_Asyn_Class::enable(){
     29c:	b570      	push	{r4, r5, r6, lr}
     29e:	0004      	movs	r4, r0
	usart_async_register_callback(&USART0, USART_ASYNC_TXC_CB, tx_cb_USART_0);
     2a0:	0005      	movs	r5, r0
     2a2:	3508      	adds	r5, #8
     2a4:	4a0a      	ldr	r2, [pc, #40]	; (2d0 <_ZN16Usart_Asyn_Class6enableEv+0x34>)
     2a6:	2101      	movs	r1, #1
     2a8:	0028      	movs	r0, r5
     2aa:	4e0a      	ldr	r6, [pc, #40]	; (2d4 <_ZN16Usart_Asyn_Class6enableEv+0x38>)
     2ac:	47b0      	blx	r6
	usart_async_register_callback(&USART0, USART_ASYNC_RXC_CB, rx_cb_USART_0);
     2ae:	4a0a      	ldr	r2, [pc, #40]	; (2d8 <_ZN16Usart_Asyn_Class6enableEv+0x3c>)
     2b0:	2100      	movs	r1, #0
     2b2:	0028      	movs	r0, r5
     2b4:	47b0      	blx	r6
	usart_async_get_io_descriptor(&USART0, &usartio);
     2b6:	1d21      	adds	r1, r4, #4
     2b8:	0028      	movs	r0, r5
     2ba:	4b08      	ldr	r3, [pc, #32]	; (2dc <_ZN16Usart_Asyn_Class6enableEv+0x40>)
     2bc:	4798      	blx	r3
	usart_async_enable(&USART0);
     2be:	0028      	movs	r0, r5
     2c0:	4b07      	ldr	r3, [pc, #28]	; (2e0 <_ZN16Usart_Asyn_Class6enableEv+0x44>)
     2c2:	4798      	blx	r3
	rxReady=true;
     2c4:	2301      	movs	r3, #1
     2c6:	7063      	strb	r3, [r4, #1]
	txReady=true;
     2c8:	7023      	strb	r3, [r4, #0]
}
     2ca:	2000      	movs	r0, #0
     2cc:	bd70      	pop	{r4, r5, r6, pc}
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	00000265 	.word	0x00000265
     2d4:	00000d29 	.word	0x00000d29
     2d8:	00000255 	.word	0x00000255
     2dc:	00000cfd 	.word	0x00000cfd
     2e0:	00000ca5 	.word	0x00000ca5

000002e4 <_ZN16Usart_Asyn_Class5writeEPKhl>:
int32_t  Usart_Asyn_Class::write(const uint8_t * p, int32_t n){
     2e4:	b510      	push	{r4, lr}
		while(!txReady);
     2e6:	7803      	ldrb	r3, [r0, #0]
     2e8:	2b00      	cmp	r3, #0
     2ea:	d0fc      	beq.n	2e6 <_ZN16Usart_Asyn_Class5writeEPKhl+0x2>
	txReady=false;
     2ec:	2300      	movs	r3, #0
     2ee:	7003      	strb	r3, [r0, #0]
	w= io_write(usartio,p,(uint16_t)n);
     2f0:	b292      	uxth	r2, r2
     2f2:	6840      	ldr	r0, [r0, #4]
     2f4:	4b01      	ldr	r3, [pc, #4]	; (2fc <_ZN16Usart_Asyn_Class5writeEPKhl+0x18>)
     2f6:	4798      	blx	r3
}
     2f8:	bd10      	pop	{r4, pc}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	00000795 	.word	0x00000795

00000300 <_ZN16Usart_Asyn_Class7disableEv>:
void Usart_Asyn_Class::disable(void){
     300:	b510      	push	{r4, lr}
	usart_async_disable(&USART0);
     302:	3008      	adds	r0, #8
     304:	4b01      	ldr	r3, [pc, #4]	; (30c <_ZN16Usart_Asyn_Class7disableEv+0xc>)
     306:	4798      	blx	r3
}
     308:	bd10      	pop	{r4, pc}
     30a:	46c0      	nop			; (mov r8, r8)
     30c:	00000cd1 	.word	0x00000cd1

00000310 <_ZN16Usart_Asyn_Class12isUsartReadyEv>:
}


bool Usart_Asyn_Class::isUsartReady(void){
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&Usart_Asyn_Class::complete_cb_SPI_0));
	if ((txReady==true)&&(rxReady==true))
     310:	7803      	ldrb	r3, [r0, #0]
     312:	b2db      	uxtb	r3, r3
     314:	2b00      	cmp	r3, #0
     316:	d001      	beq.n	31c <_ZN16Usart_Asyn_Class12isUsartReadyEv+0xc>
     318:	7843      	ldrb	r3, [r0, #1]
     31a:	b2db      	uxtb	r3, r3
	{
		return false;
	}

	
}
     31c:	0018      	movs	r0, r3
     31e:	4770      	bx	lr

00000320 <_ZN16Usart_Asyn_Class4initEv>:
void Usart_Asyn_Class::init(){
     320:	b570      	push	{r4, r5, r6, lr}
     322:	b082      	sub	sp, #8
     324:	0004      	movs	r4, r0
	USART_0_CLOCK_init();
     326:	4b0c      	ldr	r3, [pc, #48]	; (358 <_ZN16Usart_Asyn_Class4initEv+0x38>)
     328:	4798      	blx	r3
	usart_async_init(&USART0, SERCOM2, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     32a:	4d0c      	ldr	r5, [pc, #48]	; (35c <_ZN16Usart_Asyn_Class4initEv+0x3c>)
     32c:	1d2a      	adds	r2, r5, #4
     32e:	0020      	movs	r0, r4
     330:	3008      	adds	r0, #8
     332:	2300      	movs	r3, #0
     334:	9300      	str	r3, [sp, #0]
     336:	3310      	adds	r3, #16
     338:	4909      	ldr	r1, [pc, #36]	; (360 <_ZN16Usart_Asyn_Class4initEv+0x40>)
     33a:	4e0a      	ldr	r6, [pc, #40]	; (364 <_ZN16Usart_Asyn_Class4initEv+0x44>)
     33c:	47b0      	blx	r6
	USART_0_PORT_init();
     33e:	4b0a      	ldr	r3, [pc, #40]	; (368 <_ZN16Usart_Asyn_Class4initEv+0x48>)
     340:	4798      	blx	r3
	pUsartClass=this;
     342:	65e4      	str	r4, [r4, #92]	; 0x5c
	ptrUsartClass=pUsartClass;
     344:	602c      	str	r4, [r5, #0]
	rxReady=true;
     346:	2301      	movs	r3, #1
     348:	7063      	strb	r3, [r4, #1]
	txReady=true;
     34a:	7023      	strb	r3, [r4, #0]
	isUsartReady();
     34c:	0020      	movs	r0, r4
     34e:	4b07      	ldr	r3, [pc, #28]	; (36c <_ZN16Usart_Asyn_Class4initEv+0x4c>)
     350:	4798      	blx	r3
}
     352:	b002      	add	sp, #8
     354:	bd70      	pop	{r4, r5, r6, pc}
     356:	46c0      	nop			; (mov r8, r8)
     358:	00000489 	.word	0x00000489
     35c:	200004d0 	.word	0x200004d0
     360:	42001000 	.word	0x42001000
     364:	00000c0d 	.word	0x00000c0d
     368:	000004a9 	.word	0x000004a9
     36c:	00000311 	.word	0x00000311

00000370 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     370:	b510      	push	{r4, lr}
	system_init();
     372:	4b02      	ldr	r3, [pc, #8]	; (37c <atmel_start_init+0xc>)
     374:	4798      	blx	r3
	usb_init();
     376:	4b02      	ldr	r3, [pc, #8]	; (380 <atmel_start_init+0x10>)
     378:	4798      	blx	r3
}
     37a:	bd10      	pop	{r4, pc}
     37c:	00000601 	.word	0x00000601
     380:	00002f0d 	.word	0x00002f0d

00000384 <SPI_0_PORT_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct spi_m_async_descriptor SPI_0;

void SPI_0_PORT_init(void)
{
     384:	b5f0      	push	{r4, r5, r6, r7, lr}
     386:	46ce      	mov	lr, r9
     388:	4647      	mov	r7, r8
     38a:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     38c:	21c0      	movs	r1, #192	; 0xc0
     38e:	05c9      	lsls	r1, r1, #23
     390:	2380      	movs	r3, #128	; 0x80
     392:	009b      	lsls	r3, r3, #2
     394:	604b      	str	r3, [r1, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     396:	4b25      	ldr	r3, [pc, #148]	; (42c <SPI_0_PORT_init+0xa8>)
     398:	4a25      	ldr	r2, [pc, #148]	; (430 <SPI_0_PORT_init+0xac>)
     39a:	629a      	str	r2, [r3, #40]	; 0x28
     39c:	4a25      	ldr	r2, [pc, #148]	; (434 <SPI_0_PORT_init+0xb0>)
     39e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3a0:	2449      	movs	r4, #73	; 0x49
     3a2:	5d1a      	ldrb	r2, [r3, r4]
     3a4:	2004      	movs	r0, #4
     3a6:	4382      	bics	r2, r0
     3a8:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3aa:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ac:	2601      	movs	r6, #1
     3ae:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b0:	2201      	movs	r2, #1
     3b2:	4310      	orrs	r0, r2
     3b4:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b6:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b8:	2734      	movs	r7, #52	; 0x34
     3ba:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3bc:	250f      	movs	r5, #15
     3be:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
     3c0:	2420      	movs	r4, #32
     3c2:	46a1      	mov	r9, r4
     3c4:	464c      	mov	r4, r9
     3c6:	4320      	orrs	r0, r4
     3c8:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ca:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3cc:	2080      	movs	r0, #128	; 0x80
     3ce:	00c0      	lsls	r0, r0, #3
     3d0:	6148      	str	r0, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3d2:	6088      	str	r0, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d4:	4818      	ldr	r0, [pc, #96]	; (438 <SPI_0_PORT_init+0xb4>)
     3d6:	6298      	str	r0, [r3, #40]	; 0x28
     3d8:	20c0      	movs	r0, #192	; 0xc0
     3da:	0600      	lsls	r0, r0, #24
     3dc:	4684      	mov	ip, r0
     3de:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3e0:	3716      	adds	r7, #22
     3e2:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3e4:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e6:	4310      	orrs	r0, r2
     3e8:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ea:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ec:	2035      	movs	r0, #53	; 0x35
     3ee:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3f0:	240f      	movs	r4, #15
     3f2:	43a7      	bics	r7, r4
	tmp |= PORT_PMUX_PMUXE(data);
     3f4:	3c0d      	subs	r4, #13
     3f6:	4327      	orrs	r7, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f8:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3fa:	2780      	movs	r7, #128	; 0x80
     3fc:	013f      	lsls	r7, r7, #4
     3fe:	614f      	str	r7, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     400:	608f      	str	r7, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     402:	490e      	ldr	r1, [pc, #56]	; (43c <SPI_0_PORT_init+0xb8>)
     404:	6299      	str	r1, [r3, #40]	; 0x28
     406:	4661      	mov	r1, ip
     408:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     40a:	274b      	movs	r7, #75	; 0x4b
     40c:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     40e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     410:	4311      	orrs	r1, r2
     412:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     414:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     416:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     418:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
     41a:	4649      	mov	r1, r9
     41c:	430a      	orrs	r2, r1
     41e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     420:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
}
     422:	bc0c      	pop	{r2, r3}
     424:	4690      	mov	r8, r2
     426:	4699      	mov	r9, r3
     428:	bdf0      	pop	{r4, r5, r6, r7, pc}
     42a:	46c0      	nop			; (mov r8, r8)
     42c:	41004400 	.word	0x41004400
     430:	40020200 	.word	0x40020200
     434:	c0020000 	.word	0xc0020000
     438:	40000400 	.word	0x40000400
     43c:	40000800 	.word	0x40000800

00000440 <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     440:	4a04      	ldr	r2, [pc, #16]	; (454 <SPI_0_CLOCK_init+0x14>)
     442:	6a13      	ldr	r3, [r2, #32]
     444:	2104      	movs	r1, #4
     446:	430b      	orrs	r3, r1
     448:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     44a:	4a03      	ldr	r2, [pc, #12]	; (458 <SPI_0_CLOCK_init+0x18>)
     44c:	4b03      	ldr	r3, [pc, #12]	; (45c <SPI_0_CLOCK_init+0x1c>)
     44e:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     450:	4770      	bx	lr
     452:	46c0      	nop			; (mov r8, r8)
     454:	40000400 	.word	0x40000400
     458:	00004014 	.word	0x00004014
     45c:	40000c00 	.word	0x40000c00

00000460 <SPI_0_init>:

void SPI_0_init(void)
{
     460:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     462:	4b04      	ldr	r3, [pc, #16]	; (474 <SPI_0_init+0x14>)
     464:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
     466:	4904      	ldr	r1, [pc, #16]	; (478 <SPI_0_init+0x18>)
     468:	4804      	ldr	r0, [pc, #16]	; (47c <SPI_0_init+0x1c>)
     46a:	4b05      	ldr	r3, [pc, #20]	; (480 <SPI_0_init+0x20>)
     46c:	4798      	blx	r3
	SPI_0_PORT_init();
     46e:	4b05      	ldr	r3, [pc, #20]	; (484 <SPI_0_init+0x24>)
     470:	4798      	blx	r3
}
     472:	bd10      	pop	{r4, pc}
     474:	00000441 	.word	0x00000441
     478:	42000800 	.word	0x42000800
     47c:	2000082c 	.word	0x2000082c
     480:	000009c5 	.word	0x000009c5
     484:	00000385 	.word	0x00000385

00000488 <USART_0_CLOCK_init>:
     488:	4a04      	ldr	r2, [pc, #16]	; (49c <USART_0_CLOCK_init+0x14>)
     48a:	6a13      	ldr	r3, [r2, #32]
     48c:	2110      	movs	r1, #16
     48e:	430b      	orrs	r3, r1
     490:	6213      	str	r3, [r2, #32]
     492:	4a03      	ldr	r2, [pc, #12]	; (4a0 <USART_0_CLOCK_init+0x18>)
     494:	4b03      	ldr	r3, [pc, #12]	; (4a4 <USART_0_CLOCK_init+0x1c>)
     496:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
}
     498:	4770      	bx	lr
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	40000400 	.word	0x40000400
     4a0:	00004016 	.word	0x00004016
     4a4:	40000c00 	.word	0x40000c00

000004a8 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     4a8:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4aa:	4b0e      	ldr	r3, [pc, #56]	; (4e4 <USART_0_PORT_init+0x3c>)
     4ac:	224c      	movs	r2, #76	; 0x4c
     4ae:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4b0:	2501      	movs	r5, #1
     4b2:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4b4:	2401      	movs	r4, #1
     4b6:	4321      	orrs	r1, r4
     4b8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ba:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4bc:	2036      	movs	r0, #54	; 0x36
     4be:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4c0:	3a3d      	subs	r2, #61	; 0x3d
     4c2:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     4c4:	3a0d      	subs	r2, #13
     4c6:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4c8:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ca:	214d      	movs	r1, #77	; 0x4d
     4cc:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ce:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4d0:	4322      	orrs	r2, r4
     4d2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d4:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4d6:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4d8:	393e      	subs	r1, #62	; 0x3e
     4da:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     4dc:	3111      	adds	r1, #17
     4de:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4e0:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);

	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
}
     4e2:	bd30      	pop	{r4, r5, pc}
     4e4:	41004400 	.word	0x41004400

000004e8 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     4e8:	b510      	push	{r4, lr}
     4ea:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     4ec:	4b06      	ldr	r3, [pc, #24]	; (508 <USART_0_init+0x20>)
     4ee:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM2, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     4f0:	2300      	movs	r3, #0
     4f2:	9300      	str	r3, [sp, #0]
     4f4:	3310      	adds	r3, #16
     4f6:	4a05      	ldr	r2, [pc, #20]	; (50c <USART_0_init+0x24>)
     4f8:	4905      	ldr	r1, [pc, #20]	; (510 <USART_0_init+0x28>)
     4fa:	4806      	ldr	r0, [pc, #24]	; (514 <USART_0_init+0x2c>)
     4fc:	4c06      	ldr	r4, [pc, #24]	; (518 <USART_0_init+0x30>)
     4fe:	47a0      	blx	r4
	USART_0_PORT_init();
     500:	4b06      	ldr	r3, [pc, #24]	; (51c <USART_0_init+0x34>)
     502:	4798      	blx	r3
}
     504:	b002      	add	sp, #8
     506:	bd10      	pop	{r4, pc}
     508:	00000489 	.word	0x00000489
     50c:	200004e4 	.word	0x200004e4
     510:	42001000 	.word	0x42001000
     514:	20000874 	.word	0x20000874
     518:	00000c0d 	.word	0x00000c0d
     51c:	000004a9 	.word	0x000004a9

00000520 <delay_driver_init>:

void delay_driver_init(void)
{
     520:	b510      	push	{r4, lr}
	delay_init(SysTick);
     522:	4802      	ldr	r0, [pc, #8]	; (52c <delay_driver_init+0xc>)
     524:	4b02      	ldr	r3, [pc, #8]	; (530 <delay_driver_init+0x10>)
     526:	4798      	blx	r3
}
     528:	bd10      	pop	{r4, pc}
     52a:	46c0      	nop			; (mov r8, r8)
     52c:	e000e010 	.word	0xe000e010
     530:	00000761 	.word	0x00000761

00000534 <USB_0_PORT_init>:

void USB_0_PORT_init(void)
{
     534:	b5f0      	push	{r4, r5, r6, r7, lr}
     536:	46c6      	mov	lr, r8
     538:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     53a:	24c0      	movs	r4, #192	; 0xc0
     53c:	05e4      	lsls	r4, r4, #23
     53e:	2280      	movs	r2, #128	; 0x80
     540:	0452      	lsls	r2, r2, #17
     542:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     544:	4b1a      	ldr	r3, [pc, #104]	; (5b0 <USB_0_PORT_init+0x7c>)
     546:	2780      	movs	r7, #128	; 0x80
     548:	05ff      	lsls	r7, r7, #23
     54a:	629f      	str	r7, [r3, #40]	; 0x28
     54c:	4919      	ldr	r1, [pc, #100]	; (5b4 <USB_0_PORT_init+0x80>)
     54e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     550:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     552:	2058      	movs	r0, #88	; 0x58
     554:	5c19      	ldrb	r1, [r3, r0]
     556:	2204      	movs	r2, #4
     558:	4690      	mov	r8, r2
     55a:	4391      	bics	r1, r2
     55c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     55e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     560:	2601      	movs	r6, #1
     562:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     564:	2501      	movs	r5, #1
     566:	4329      	orrs	r1, r5
     568:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     56a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     56c:	381c      	subs	r0, #28
     56e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     570:	320b      	adds	r2, #11
     572:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     574:	3a09      	subs	r2, #9
     576:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     578:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     57a:	2180      	movs	r1, #128	; 0x80
     57c:	0489      	lsls	r1, r1, #18
     57e:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     580:	629f      	str	r7, [r3, #40]	; 0x28
     582:	4f0d      	ldr	r7, [pc, #52]	; (5b8 <USB_0_PORT_init+0x84>)
     584:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     586:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     588:	2159      	movs	r1, #89	; 0x59
     58a:	5c5c      	ldrb	r4, [r3, r1]
     58c:	4642      	mov	r2, r8
     58e:	4394      	bics	r4, r2
     590:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     592:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     594:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	432a      	orrs	r2, r5
     598:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     59e:	394a      	subs	r1, #74	; 0x4a
     5a0:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     5a2:	3151      	adds	r1, #81	; 0x51
     5a4:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5a6:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     5a8:	bc04      	pop	{r2}
     5aa:	4690      	mov	r8, r2
     5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	41004400 	.word	0x41004400
     5b4:	c0000100 	.word	0xc0000100
     5b8:	c0000200 	.word	0xc0000200

000005bc <USB_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     5bc:	4b06      	ldr	r3, [pc, #24]	; (5d8 <USB_0_CLOCK_init+0x1c>)
     5be:	69da      	ldr	r2, [r3, #28]
     5c0:	2120      	movs	r1, #32
     5c2:	430a      	orrs	r2, r1
     5c4:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     5c6:	695a      	ldr	r2, [r3, #20]
     5c8:	3120      	adds	r1, #32
     5ca:	430a      	orrs	r2, r1
     5cc:	615a      	str	r2, [r3, #20]
     5ce:	4a03      	ldr	r2, [pc, #12]	; (5dc <USB_0_CLOCK_init+0x20>)
     5d0:	4b03      	ldr	r3, [pc, #12]	; (5e0 <USB_0_CLOCK_init+0x24>)
     5d2:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     5d4:	4770      	bx	lr
     5d6:	46c0      	nop			; (mov r8, r8)
     5d8:	40000400 	.word	0x40000400
     5dc:	00004206 	.word	0x00004206
     5e0:	40000c00 	.word	0x40000c00

000005e4 <USB_0_init>:

void USB_0_init(void)
{
     5e4:	b510      	push	{r4, lr}
	USB_0_CLOCK_init();
     5e6:	4b03      	ldr	r3, [pc, #12]	; (5f4 <USB_0_init+0x10>)
     5e8:	4798      	blx	r3
	usb_d_init();
     5ea:	4b03      	ldr	r3, [pc, #12]	; (5f8 <USB_0_init+0x14>)
     5ec:	4798      	blx	r3
	USB_0_PORT_init();
     5ee:	4b03      	ldr	r3, [pc, #12]	; (5fc <USB_0_init+0x18>)
     5f0:	4798      	blx	r3
}
     5f2:	bd10      	pop	{r4, pc}
     5f4:	000005bd 	.word	0x000005bd
     5f8:	00001011 	.word	0x00001011
     5fc:	00000535 	.word	0x00000535

00000600 <system_init>:

void system_init(void)
{
     600:	b5f0      	push	{r4, r5, r6, r7, lr}
     602:	46d6      	mov	lr, sl
     604:	464f      	mov	r7, r9
     606:	4646      	mov	r6, r8
     608:	b5c0      	push	{r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     60a:	4b46      	ldr	r3, [pc, #280]	; (724 <system_init+0x124>)
     60c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     60e:	22c0      	movs	r2, #192	; 0xc0
     610:	05d2      	lsls	r2, r2, #23
     612:	2304      	movs	r3, #4
     614:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     616:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     618:	4b43      	ldr	r3, [pc, #268]	; (728 <system_init+0x128>)
     61a:	4944      	ldr	r1, [pc, #272]	; (72c <system_init+0x12c>)
     61c:	6299      	str	r1, [r3, #40]	; 0x28
     61e:	24c0      	movs	r4, #192	; 0xc0
     620:	0624      	lsls	r4, r4, #24
     622:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     624:	2542      	movs	r5, #66	; 0x42
     626:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     628:	2101      	movs	r1, #1
     62a:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     62c:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     62e:	2008      	movs	r0, #8
     630:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     632:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     634:	483e      	ldr	r0, [pc, #248]	; (730 <system_init+0x130>)
     636:	6298      	str	r0, [r3, #40]	; 0x28
     638:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     63a:	3501      	adds	r5, #1
     63c:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     63e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     640:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     642:	2010      	movs	r0, #16
     644:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     646:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     648:	483a      	ldr	r0, [pc, #232]	; (734 <system_init+0x134>)
     64a:	6298      	str	r0, [r3, #40]	; 0x28
     64c:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     64e:	3501      	adds	r5, #1
     650:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     652:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     654:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     656:	2080      	movs	r0, #128	; 0x80
     658:	0040      	lsls	r0, r0, #1
     65a:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     65c:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     65e:	4836      	ldr	r0, [pc, #216]	; (738 <system_init+0x138>)
     660:	6298      	str	r0, [r3, #40]	; 0x28
     662:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     664:	3504      	adds	r5, #4
     666:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     668:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     66c:	2080      	movs	r0, #128	; 0x80
     66e:	0500      	lsls	r0, r0, #20
     670:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     672:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     674:	2080      	movs	r0, #128	; 0x80
     676:	05c0      	lsls	r0, r0, #23
     678:	6298      	str	r0, [r3, #40]	; 0x28
     67a:	4d30      	ldr	r5, [pc, #192]	; (73c <system_init+0x13c>)
     67c:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     67e:	265b      	movs	r6, #91	; 0x5b
     680:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     682:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     684:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     686:	2580      	movs	r5, #128	; 0x80
     688:	056d      	lsls	r5, r5, #21
     68a:	6195      	str	r5, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     68c:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     68e:	6298      	str	r0, [r3, #40]	; 0x28
     690:	4d2b      	ldr	r5, [pc, #172]	; (740 <system_init+0x140>)
     692:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     694:	3601      	adds	r6, #1
     696:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     698:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     69a:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     69c:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     69e:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6a0:	6298      	str	r0, [r3, #40]	; 0x28
     6a2:	4d28      	ldr	r5, [pc, #160]	; (744 <system_init+0x144>)
     6a4:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6a6:	3602      	adds	r6, #2
     6a8:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6aa:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6ac:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6ae:	2680      	movs	r6, #128	; 0x80
     6b0:	0636      	lsls	r6, r6, #24
     6b2:	6156      	str	r6, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6b4:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6b6:	6298      	str	r0, [r3, #40]	; 0x28
     6b8:	4d23      	ldr	r5, [pc, #140]	; (748 <system_init+0x148>)
     6ba:	46aa      	mov	sl, r5
     6bc:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6be:	255f      	movs	r5, #95	; 0x5f
     6c0:	46ac      	mov	ip, r5
     6c2:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6c4:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c6:	4667      	mov	r7, ip
     6c8:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6ca:	2594      	movs	r5, #148	; 0x94
     6cc:	46a8      	mov	r8, r5
     6ce:	356d      	adds	r5, #109	; 0x6d
     6d0:	35ff      	adds	r5, #255	; 0xff
     6d2:	4647      	mov	r7, r8
     6d4:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6d6:	3f0c      	subs	r7, #12
     6d8:	46bc      	mov	ip, r7
     6da:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6dc:	3d59      	subs	r5, #89	; 0x59
     6de:	3dff      	subs	r5, #255	; 0xff
     6e0:	4f1a      	ldr	r7, [pc, #104]	; (74c <system_init+0x14c>)
     6e2:	515f      	str	r7, [r3, r5]
     6e4:	515c      	str	r4, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6e6:	24c9      	movs	r4, #201	; 0xc9
     6e8:	46a1      	mov	r9, r4
     6ea:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ec:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6ee:	464f      	mov	r7, r9
     6f0:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6f2:	4644      	mov	r4, r8
     6f4:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6f6:	4664      	mov	r4, ip
     6f8:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6fa:	5158      	str	r0, [r3, r5]
     6fc:	4652      	mov	r2, sl
     6fe:	515a      	str	r2, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     700:	20df      	movs	r0, #223	; 0xdf
     702:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     704:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     706:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(pb31, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(pb31, GPIO_PIN_FUNCTION_OFF);

	SPI_0_init();
     708:	4b11      	ldr	r3, [pc, #68]	; (750 <system_init+0x150>)
     70a:	4798      	blx	r3
	USART_0_init();
     70c:	4b11      	ldr	r3, [pc, #68]	; (754 <system_init+0x154>)
     70e:	4798      	blx	r3

	delay_driver_init();
     710:	4b11      	ldr	r3, [pc, #68]	; (758 <system_init+0x158>)
     712:	4798      	blx	r3

	USB_0_init();
     714:	4b11      	ldr	r3, [pc, #68]	; (75c <system_init+0x15c>)
     716:	4798      	blx	r3
}
     718:	bc1c      	pop	{r2, r3, r4}
     71a:	4690      	mov	r8, r2
     71c:	4699      	mov	r9, r3
     71e:	46a2      	mov	sl, r4
     720:	bdf0      	pop	{r4, r5, r6, r7, pc}
     722:	46c0      	nop			; (mov r8, r8)
     724:	00001475 	.word	0x00001475
     728:	41004400 	.word	0x41004400
     72c:	40000004 	.word	0x40000004
     730:	40000008 	.word	0x40000008
     734:	40000010 	.word	0x40000010
     738:	40000100 	.word	0x40000100
     73c:	c0000800 	.word	0xc0000800
     740:	c0001000 	.word	0xc0001000
     744:	c0004000 	.word	0xc0004000
     748:	c0008000 	.word	0xc0008000
     74c:	40000200 	.word	0x40000200
     750:	00000461 	.word	0x00000461
     754:	000004e9 	.word	0x000004e9
     758:	00000521 	.word	0x00000521
     75c:	000005e5 	.word	0x000005e5

00000760 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     760:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     762:	4b02      	ldr	r3, [pc, #8]	; (76c <delay_init+0xc>)
     764:	6018      	str	r0, [r3, #0]
     766:	4b02      	ldr	r3, [pc, #8]	; (770 <delay_init+0x10>)
     768:	4798      	blx	r3
}
     76a:	bd10      	pop	{r4, pc}
     76c:	200004f4 	.word	0x200004f4
     770:	00001b65 	.word	0x00001b65

00000774 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     774:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     776:	4b04      	ldr	r3, [pc, #16]	; (788 <delay_ms+0x14>)
     778:	681c      	ldr	r4, [r3, #0]
     77a:	4b04      	ldr	r3, [pc, #16]	; (78c <delay_ms+0x18>)
     77c:	4798      	blx	r3
     77e:	0001      	movs	r1, r0
     780:	0020      	movs	r0, r4
     782:	4b03      	ldr	r3, [pc, #12]	; (790 <delay_ms+0x1c>)
     784:	4798      	blx	r3
}
     786:	bd10      	pop	{r4, pc}
     788:	200004f4 	.word	0x200004f4
     78c:	0000146d 	.word	0x0000146d
     790:	00001b79 	.word	0x00001b79

00000794 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     794:	b570      	push	{r4, r5, r6, lr}
     796:	0006      	movs	r6, r0
     798:	000c      	movs	r4, r1
     79a:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     79c:	2800      	cmp	r0, #0
     79e:	d00d      	beq.n	7bc <io_write+0x28>
     7a0:	0008      	movs	r0, r1
     7a2:	1e43      	subs	r3, r0, #1
     7a4:	4198      	sbcs	r0, r3
     7a6:	b2c0      	uxtb	r0, r0
     7a8:	2234      	movs	r2, #52	; 0x34
     7aa:	4905      	ldr	r1, [pc, #20]	; (7c0 <io_write+0x2c>)
     7ac:	4b05      	ldr	r3, [pc, #20]	; (7c4 <io_write+0x30>)
     7ae:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     7b0:	6833      	ldr	r3, [r6, #0]
     7b2:	002a      	movs	r2, r5
     7b4:	0021      	movs	r1, r4
     7b6:	0030      	movs	r0, r6
     7b8:	4798      	blx	r3
}
     7ba:	bd70      	pop	{r4, r5, r6, pc}
     7bc:	2000      	movs	r0, #0
     7be:	e7f3      	b.n	7a8 <io_write+0x14>
     7c0:	00003d5c 	.word	0x00003d5c
     7c4:	00001365 	.word	0x00001365

000007c8 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     7c8:	b570      	push	{r4, r5, r6, lr}
     7ca:	0004      	movs	r4, r0
     7cc:	000e      	movs	r6, r1
     7ce:	0015      	movs	r5, r2
	ASSERT(io);
     7d0:	1e43      	subs	r3, r0, #1
     7d2:	4198      	sbcs	r0, r3
     7d4:	b2c0      	uxtb	r0, r0
     7d6:	2228      	movs	r2, #40	; 0x28
     7d8:	32ff      	adds	r2, #255	; 0xff
     7da:	490a      	ldr	r1, [pc, #40]	; (804 <_spi_m_async_io_write+0x3c>)
     7dc:	4b0a      	ldr	r3, [pc, #40]	; (808 <_spi_m_async_io_write+0x40>)
     7de:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
     7e0:	0023      	movs	r3, r4
     7e2:	2200      	movs	r2, #0
     7e4:	61a2      	str	r2, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
     7e6:	6166      	str	r6, [r4, #20]
	spi->xfer.size  = length;
     7e8:	61e5      	str	r5, [r4, #28]
	spi->xfercnt    = 0;
     7ea:	6222      	str	r2, [r4, #32]
	spi->xfer.rxbuf = NULL;
     7ec:	3b24      	subs	r3, #36	; 0x24

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     7ee:	2110      	movs	r1, #16
     7f0:	322c      	adds	r2, #44	; 0x2c
     7f2:	5499      	strb	r1, [r3, r2]
	_spi_m_async_enable_tx(&spi->dev, true);
     7f4:	0020      	movs	r0, r4
     7f6:	3820      	subs	r0, #32
     7f8:	390f      	subs	r1, #15
     7fa:	4b04      	ldr	r3, [pc, #16]	; (80c <_spi_m_async_io_write+0x44>)
     7fc:	4798      	blx	r3

	return ERR_NONE;
}
     7fe:	2000      	movs	r0, #0
     800:	bd70      	pop	{r4, r5, r6, pc}
     802:	46c0      	nop			; (mov r8, r8)
     804:	00003d70 	.word	0x00003d70
     808:	00001365 	.word	0x00001365
     80c:	00001941 	.word	0x00001941

00000810 <_spi_m_async_io_read>:
{
     810:	b570      	push	{r4, r5, r6, lr}
     812:	0004      	movs	r4, r0
     814:	000e      	movs	r6, r1
     816:	0015      	movs	r5, r2
	ASSERT(io);
     818:	1e43      	subs	r3, r0, #1
     81a:	4198      	sbcs	r0, r3
     81c:	b2c0      	uxtb	r0, r0
     81e:	2206      	movs	r2, #6
     820:	32ff      	adds	r2, #255	; 0xff
     822:	490c      	ldr	r1, [pc, #48]	; (854 <_spi_m_async_io_read+0x44>)
     824:	4b0c      	ldr	r3, [pc, #48]	; (858 <_spi_m_async_io_read+0x48>)
     826:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
     828:	0023      	movs	r3, r4
     82a:	61a6      	str	r6, [r4, #24]
	spi->xfer.txbuf = NULL;
     82c:	2200      	movs	r2, #0
     82e:	6162      	str	r2, [r4, #20]
	spi->xfer.size  = length;
     830:	61e5      	str	r5, [r4, #28]
	spi->xfercnt    = 0;
     832:	6222      	str	r2, [r4, #32]
	spi->xfer.rxbuf = buf;
     834:	3b24      	subs	r3, #36	; 0x24
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     836:	2110      	movs	r1, #16
     838:	322c      	adds	r2, #44	; 0x2c
     83a:	5499      	strb	r1, [r3, r2]
	_spi_m_async_enable_rx(&spi->dev, true);
     83c:	3c20      	subs	r4, #32
     83e:	390f      	subs	r1, #15
     840:	0020      	movs	r0, r4
     842:	4b06      	ldr	r3, [pc, #24]	; (85c <_spi_m_async_io_read+0x4c>)
     844:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
     846:	4906      	ldr	r1, [pc, #24]	; (860 <_spi_m_async_io_read+0x50>)
     848:	0020      	movs	r0, r4
     84a:	4b06      	ldr	r3, [pc, #24]	; (864 <_spi_m_async_io_read+0x54>)
     84c:	4798      	blx	r3
}
     84e:	2000      	movs	r0, #0
     850:	bd70      	pop	{r4, r5, r6, pc}
     852:	46c0      	nop			; (mov r8, r8)
     854:	00003d70 	.word	0x00003d70
     858:	00001365 	.word	0x00001365
     85c:	0000197d 	.word	0x0000197d
     860:	000001ff 	.word	0x000001ff
     864:	00001a05 	.word	0x00001a05

00000868 <_spi_dev_error>:
{
     868:	b570      	push	{r4, r5, r6, lr}
     86a:	0004      	movs	r4, r0
     86c:	000e      	movs	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     86e:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
     870:	2100      	movs	r1, #0
     872:	4b0a      	ldr	r3, [pc, #40]	; (89c <_spi_dev_error+0x34>)
     874:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
     876:	2100      	movs	r1, #0
     878:	0020      	movs	r0, r4
     87a:	4b09      	ldr	r3, [pc, #36]	; (8a0 <_spi_dev_error+0x38>)
     87c:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
     87e:	2100      	movs	r1, #0
     880:	0020      	movs	r0, r4
     882:	4b08      	ldr	r3, [pc, #32]	; (8a4 <_spi_dev_error+0x3c>)
     884:	4798      	blx	r3
	spi->stat = 0;
     886:	2200      	movs	r2, #0
     888:	232c      	movs	r3, #44	; 0x2c
     88a:	54ea      	strb	r2, [r5, r3]
	if (spi->callbacks.cb_error) {
     88c:	6b23      	ldr	r3, [r4, #48]	; 0x30
     88e:	2b00      	cmp	r3, #0
     890:	d002      	beq.n	898 <_spi_dev_error+0x30>
		spi->callbacks.cb_error(spi, status);
     892:	0031      	movs	r1, r6
     894:	0028      	movs	r0, r5
     896:	4798      	blx	r3
}
     898:	bd70      	pop	{r4, r5, r6, pc}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	00001941 	.word	0x00001941
     8a0:	0000197d 	.word	0x0000197d
     8a4:	000019c5 	.word	0x000019c5

000008a8 <_spi_dev_complete>:
{
     8a8:	b510      	push	{r4, lr}
     8aa:	0004      	movs	r4, r0
	if (spi->xfercnt >= spi->xfer.size) {
     8ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
     8ae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     8b0:	429a      	cmp	r2, r3
     8b2:	d200      	bcs.n	8b6 <_spi_dev_complete+0xe>
}
     8b4:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx_complete(dev, false);
     8b6:	2100      	movs	r1, #0
     8b8:	4b05      	ldr	r3, [pc, #20]	; (8d0 <_spi_dev_complete+0x28>)
     8ba:	4798      	blx	r3
		spi->stat = 0;
     8bc:	1f23      	subs	r3, r4, #4
     8be:	2100      	movs	r1, #0
     8c0:	222c      	movs	r2, #44	; 0x2c
     8c2:	5499      	strb	r1, [r3, r2]
		if (spi->callbacks.cb_xfer) {
     8c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     8c6:	2b00      	cmp	r3, #0
     8c8:	d0f4      	beq.n	8b4 <_spi_dev_complete+0xc>
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     8ca:	1f20      	subs	r0, r4, #4
			spi->callbacks.cb_xfer(spi);
     8cc:	4798      	blx	r3
}
     8ce:	e7f1      	b.n	8b4 <_spi_dev_complete+0xc>
     8d0:	000019c5 	.word	0x000019c5

000008d4 <_spi_dev_tx>:
{
     8d4:	b510      	push	{r4, lr}
     8d6:	0004      	movs	r4, r0
	if (!(dev->char_size > 1)) {
     8d8:	7903      	ldrb	r3, [r0, #4]
     8da:	2b01      	cmp	r3, #1
     8dc:	d90d      	bls.n	8fa <_spi_dev_tx+0x26>
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
     8de:	6b41      	ldr	r1, [r0, #52]	; 0x34
     8e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
     8e2:	1c58      	adds	r0, r3, #1
     8e4:	6420      	str	r0, [r4, #64]	; 0x40
     8e6:	005b      	lsls	r3, r3, #1
     8e8:	5a59      	ldrh	r1, [r3, r1]
     8ea:	0020      	movs	r0, r4
     8ec:	4b0c      	ldr	r3, [pc, #48]	; (920 <_spi_dev_tx+0x4c>)
     8ee:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
     8f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
     8f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     8f4:	429a      	cmp	r2, r3
     8f6:	d009      	beq.n	90c <_spi_dev_tx+0x38>
}
     8f8:	bd10      	pop	{r4, pc}
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
     8fa:	6b41      	ldr	r1, [r0, #52]	; 0x34
     8fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
     8fe:	1c50      	adds	r0, r2, #1
     900:	6420      	str	r0, [r4, #64]	; 0x40
     902:	5c89      	ldrb	r1, [r1, r2]
     904:	0020      	movs	r0, r4
     906:	4b06      	ldr	r3, [pc, #24]	; (920 <_spi_dev_tx+0x4c>)
     908:	4798      	blx	r3
     90a:	e7f1      	b.n	8f0 <_spi_dev_tx+0x1c>
		_spi_m_async_enable_tx(dev, false);
     90c:	2100      	movs	r1, #0
     90e:	0020      	movs	r0, r4
     910:	4b04      	ldr	r3, [pc, #16]	; (924 <_spi_dev_tx+0x50>)
     912:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
     914:	2101      	movs	r1, #1
     916:	0020      	movs	r0, r4
     918:	4b03      	ldr	r3, [pc, #12]	; (928 <_spi_dev_tx+0x54>)
     91a:	4798      	blx	r3
}
     91c:	e7ec      	b.n	8f8 <_spi_dev_tx+0x24>
     91e:	46c0      	nop			; (mov r8, r8)
     920:	00001a05 	.word	0x00001a05
     924:	00001941 	.word	0x00001941
     928:	000019c5 	.word	0x000019c5

0000092c <_spi_dev_rx>:
{
     92c:	b570      	push	{r4, r5, r6, lr}
     92e:	0004      	movs	r4, r0
	if (spi->xfer.rxbuf) {
     930:	6b83      	ldr	r3, [r0, #56]	; 0x38
     932:	2b00      	cmp	r3, #0
     934:	d022      	beq.n	97c <_spi_dev_rx+0x50>
		if (!(dev->char_size > 1)) {
     936:	7902      	ldrb	r2, [r0, #4]
     938:	2a01      	cmp	r2, #1
     93a:	d917      	bls.n	96c <_spi_dev_rx+0x40>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
     93c:	6c05      	ldr	r5, [r0, #64]	; 0x40
     93e:	1c69      	adds	r1, r5, #1
     940:	6401      	str	r1, [r0, #64]	; 0x40
     942:	006d      	lsls	r5, r5, #1
     944:	195d      	adds	r5, r3, r5
     946:	4b1c      	ldr	r3, [pc, #112]	; (9b8 <_spi_dev_rx+0x8c>)
     948:	4798      	blx	r3
     94a:	8028      	strh	r0, [r5, #0]
	if (spi->xfercnt < spi->xfer.size) {
     94c:	6c23      	ldr	r3, [r4, #64]	; 0x40
     94e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     950:	4293      	cmp	r3, r2
     952:	d223      	bcs.n	99c <_spi_dev_rx+0x70>
		if (spi->xfer.txbuf) {
     954:	6b62      	ldr	r2, [r4, #52]	; 0x34
     956:	2a00      	cmp	r2, #0
     958:	d01b      	beq.n	992 <_spi_dev_rx+0x66>
			if (!(dev->char_size > 1)) {
     95a:	7921      	ldrb	r1, [r4, #4]
     95c:	2901      	cmp	r1, #1
     95e:	d913      	bls.n	988 <_spi_dev_rx+0x5c>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
     960:	005b      	lsls	r3, r3, #1
     962:	5a99      	ldrh	r1, [r3, r2]
     964:	0020      	movs	r0, r4
     966:	4b15      	ldr	r3, [pc, #84]	; (9bc <_spi_dev_rx+0x90>)
     968:	4798      	blx	r3
}
     96a:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
     96c:	6c05      	ldr	r5, [r0, #64]	; 0x40
     96e:	1c69      	adds	r1, r5, #1
     970:	6401      	str	r1, [r0, #64]	; 0x40
     972:	195d      	adds	r5, r3, r5
     974:	4b10      	ldr	r3, [pc, #64]	; (9b8 <_spi_dev_rx+0x8c>)
     976:	4798      	blx	r3
     978:	7028      	strb	r0, [r5, #0]
     97a:	e7e7      	b.n	94c <_spi_dev_rx+0x20>
		_spi_m_async_read_one(dev);
     97c:	4b0e      	ldr	r3, [pc, #56]	; (9b8 <_spi_dev_rx+0x8c>)
     97e:	4798      	blx	r3
		spi->xfercnt++;
     980:	6c23      	ldr	r3, [r4, #64]	; 0x40
     982:	3301      	adds	r3, #1
     984:	6423      	str	r3, [r4, #64]	; 0x40
     986:	e7e1      	b.n	94c <_spi_dev_rx+0x20>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
     988:	5cd1      	ldrb	r1, [r2, r3]
     98a:	0020      	movs	r0, r4
     98c:	4b0b      	ldr	r3, [pc, #44]	; (9bc <_spi_dev_rx+0x90>)
     98e:	4798      	blx	r3
     990:	e7eb      	b.n	96a <_spi_dev_rx+0x3e>
			_spi_m_async_write_one(dev, dev->dummy_byte);
     992:	88e1      	ldrh	r1, [r4, #6]
     994:	0020      	movs	r0, r4
     996:	4b09      	ldr	r3, [pc, #36]	; (9bc <_spi_dev_rx+0x90>)
     998:	4798      	blx	r3
     99a:	e7e6      	b.n	96a <_spi_dev_rx+0x3e>
		_spi_m_async_enable_rx(dev, false);
     99c:	2100      	movs	r1, #0
     99e:	0020      	movs	r0, r4
     9a0:	4b07      	ldr	r3, [pc, #28]	; (9c0 <_spi_dev_rx+0x94>)
     9a2:	4798      	blx	r3
		spi->stat = 0;
     9a4:	1f23      	subs	r3, r4, #4
     9a6:	2100      	movs	r1, #0
     9a8:	222c      	movs	r2, #44	; 0x2c
     9aa:	5499      	strb	r1, [r3, r2]
		if (spi->callbacks.cb_xfer) {
     9ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     9ae:	2b00      	cmp	r3, #0
     9b0:	d0db      	beq.n	96a <_spi_dev_rx+0x3e>
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     9b2:	1f20      	subs	r0, r4, #4
			spi->callbacks.cb_xfer(spi);
     9b4:	4798      	blx	r3
}
     9b6:	e7d8      	b.n	96a <_spi_dev_rx+0x3e>
     9b8:	00001a39 	.word	0x00001a39
     9bc:	00001a05 	.word	0x00001a05
     9c0:	0000197d 	.word	0x0000197d

000009c4 <spi_m_async_init>:
{
     9c4:	b570      	push	{r4, r5, r6, lr}
     9c6:	0004      	movs	r4, r0
     9c8:	000e      	movs	r6, r1
	ASSERT(spi && hw);
     9ca:	2800      	cmp	r0, #0
     9cc:	d026      	beq.n	a1c <spi_m_async_init+0x58>
     9ce:	0008      	movs	r0, r1
     9d0:	1e43      	subs	r3, r0, #1
     9d2:	4198      	sbcs	r0, r3
     9d4:	b2c0      	uxtb	r0, r0
     9d6:	22a5      	movs	r2, #165	; 0xa5
     9d8:	4911      	ldr	r1, [pc, #68]	; (a20 <spi_m_async_init+0x5c>)
     9da:	4b12      	ldr	r3, [pc, #72]	; (a24 <spi_m_async_init+0x60>)
     9dc:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     9de:	6066      	str	r6, [r4, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
     9e0:	1d25      	adds	r5, r4, #4
     9e2:	0031      	movs	r1, r6
     9e4:	0028      	movs	r0, r5
     9e6:	4b10      	ldr	r3, [pc, #64]	; (a28 <spi_m_async_init+0x64>)
     9e8:	4798      	blx	r3
	if (rc >= 0) {
     9ea:	2800      	cmp	r0, #0
     9ec:	db15      	blt.n	a1a <spi_m_async_init+0x56>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
     9ee:	4a0f      	ldr	r2, [pc, #60]	; (a2c <spi_m_async_init+0x68>)
     9f0:	2100      	movs	r1, #0
     9f2:	0028      	movs	r0, r5
     9f4:	4e0e      	ldr	r6, [pc, #56]	; (a30 <spi_m_async_init+0x6c>)
     9f6:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
     9f8:	4a0e      	ldr	r2, [pc, #56]	; (a34 <spi_m_async_init+0x70>)
     9fa:	2101      	movs	r1, #1
     9fc:	0028      	movs	r0, r5
     9fe:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
     a00:	4a0d      	ldr	r2, [pc, #52]	; (a38 <spi_m_async_init+0x74>)
     a02:	2102      	movs	r1, #2
     a04:	0028      	movs	r0, r5
     a06:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
     a08:	4a0c      	ldr	r2, [pc, #48]	; (a3c <spi_m_async_init+0x78>)
     a0a:	2103      	movs	r1, #3
     a0c:	0028      	movs	r0, r5
     a0e:	47b0      	blx	r6
	spi->io.read  = _spi_m_async_io_read;
     a10:	4b0b      	ldr	r3, [pc, #44]	; (a40 <spi_m_async_init+0x7c>)
     a12:	62a3      	str	r3, [r4, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
     a14:	4b0b      	ldr	r3, [pc, #44]	; (a44 <spi_m_async_init+0x80>)
     a16:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
     a18:	2000      	movs	r0, #0
}
     a1a:	bd70      	pop	{r4, r5, r6, pc}
     a1c:	2000      	movs	r0, #0
     a1e:	e7da      	b.n	9d6 <spi_m_async_init+0x12>
     a20:	00003d70 	.word	0x00003d70
     a24:	00001365 	.word	0x00001365
     a28:	000018dd 	.word	0x000018dd
     a2c:	000008d5 	.word	0x000008d5
     a30:	00001a69 	.word	0x00001a69
     a34:	0000092d 	.word	0x0000092d
     a38:	000008a9 	.word	0x000008a9
     a3c:	00000869 	.word	0x00000869
     a40:	00000811 	.word	0x00000811
     a44:	000007c9 	.word	0x000007c9

00000a48 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     a48:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a4a:	3808      	subs	r0, #8

	descr->stat = 0;
     a4c:	2300      	movs	r3, #0
     a4e:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     a50:	6a43      	ldr	r3, [r0, #36]	; 0x24
     a52:	2b00      	cmp	r3, #0
     a54:	d000      	beq.n	a58 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     a56:	4798      	blx	r3
	}
}
     a58:	bd10      	pop	{r4, pc}

00000a5a <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     a5a:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a5c:	3808      	subs	r0, #8

	descr->stat = 0;
     a5e:	2300      	movs	r3, #0
     a60:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     a62:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     a64:	2b00      	cmp	r3, #0
     a66:	d000      	beq.n	a6a <usart_error+0x10>
		descr->usart_cb.error(descr);
     a68:	4798      	blx	r3
	}
}
     a6a:	bd10      	pop	{r4, pc}

00000a6c <usart_fill_rx_buffer>:
{
     a6c:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a6e:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     a70:	302c      	adds	r0, #44	; 0x2c
     a72:	4b04      	ldr	r3, [pc, #16]	; (a84 <usart_fill_rx_buffer+0x18>)
     a74:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     a76:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a78:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     a7a:	2b00      	cmp	r3, #0
     a7c:	d001      	beq.n	a82 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     a7e:	0020      	movs	r0, r4
     a80:	4798      	blx	r3
}
     a82:	bd10      	pop	{r4, pc}
     a84:	00001409 	.word	0x00001409

00000a88 <usart_async_write>:
{
     a88:	b570      	push	{r4, r5, r6, lr}
     a8a:	0004      	movs	r4, r0
     a8c:	000e      	movs	r6, r1
     a8e:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     a90:	2800      	cmp	r0, #0
     a92:	d01d      	beq.n	ad0 <usart_async_write+0x48>
     a94:	2900      	cmp	r1, #0
     a96:	d01d      	beq.n	ad4 <usart_async_write+0x4c>
     a98:	0010      	movs	r0, r2
     a9a:	1e43      	subs	r3, r0, #1
     a9c:	4198      	sbcs	r0, r3
     a9e:	223c      	movs	r2, #60	; 0x3c
     aa0:	32ff      	adds	r2, #255	; 0xff
     aa2:	490f      	ldr	r1, [pc, #60]	; (ae0 <usart_async_write+0x58>)
     aa4:	4b0f      	ldr	r3, [pc, #60]	; (ae4 <usart_async_write+0x5c>)
     aa6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     aa8:	2344      	movs	r3, #68	; 0x44
     aaa:	5ae2      	ldrh	r2, [r4, r3]
     aac:	3308      	adds	r3, #8
     aae:	5ae3      	ldrh	r3, [r4, r3]
     ab0:	429a      	cmp	r2, r3
     ab2:	d111      	bne.n	ad8 <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
     ab4:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     ab6:	234c      	movs	r3, #76	; 0x4c
     ab8:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     aba:	2200      	movs	r2, #0
     abc:	3b08      	subs	r3, #8
     abe:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     ac0:	3b43      	subs	r3, #67	; 0x43
     ac2:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     ac4:	0020      	movs	r0, r4
     ac6:	3008      	adds	r0, #8
     ac8:	4b07      	ldr	r3, [pc, #28]	; (ae8 <usart_async_write+0x60>)
     aca:	4798      	blx	r3
	return (int32_t)length;
     acc:	0028      	movs	r0, r5
}
     ace:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     ad0:	2000      	movs	r0, #0
     ad2:	e7e4      	b.n	a9e <usart_async_write+0x16>
     ad4:	2000      	movs	r0, #0
     ad6:	e7e2      	b.n	a9e <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     ad8:	201c      	movs	r0, #28
     ada:	4240      	negs	r0, r0
     adc:	e7f7      	b.n	ace <usart_async_write+0x46>
     ade:	46c0      	nop			; (mov r8, r8)
     ae0:	00003d90 	.word	0x00003d90
     ae4:	00001365 	.word	0x00001365
     ae8:	000016a5 	.word	0x000016a5

00000aec <usart_process_byte_sent>:
{
     aec:	b570      	push	{r4, r5, r6, lr}
     aee:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     af0:	0001      	movs	r1, r0
     af2:	3908      	subs	r1, #8
     af4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     af6:	224c      	movs	r2, #76	; 0x4c
     af8:	5a8a      	ldrh	r2, [r1, r2]
     afa:	429a      	cmp	r2, r3
     afc:	d00c      	beq.n	b18 <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     afe:	000a      	movs	r2, r1
     b00:	6c89      	ldr	r1, [r1, #72]	; 0x48
     b02:	1c5d      	adds	r5, r3, #1
     b04:	2044      	movs	r0, #68	; 0x44
     b06:	5215      	strh	r5, [r2, r0]
     b08:	5cc9      	ldrb	r1, [r1, r3]
     b0a:	0020      	movs	r0, r4
     b0c:	4b04      	ldr	r3, [pc, #16]	; (b20 <usart_process_byte_sent+0x34>)
     b0e:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     b10:	0020      	movs	r0, r4
     b12:	4b04      	ldr	r3, [pc, #16]	; (b24 <usart_process_byte_sent+0x38>)
     b14:	4798      	blx	r3
}
     b16:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     b18:	4b03      	ldr	r3, [pc, #12]	; (b28 <usart_process_byte_sent+0x3c>)
     b1a:	4798      	blx	r3
}
     b1c:	e7fb      	b.n	b16 <usart_process_byte_sent+0x2a>
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	0000169d 	.word	0x0000169d
     b24:	000016a5 	.word	0x000016a5
     b28:	000016ad 	.word	0x000016ad

00000b2c <usart_async_read>:
{
     b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b2e:	46ce      	mov	lr, r9
     b30:	4647      	mov	r7, r8
     b32:	b580      	push	{r7, lr}
     b34:	b085      	sub	sp, #20
     b36:	0005      	movs	r5, r0
     b38:	000e      	movs	r6, r1
     b3a:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
     b3c:	2800      	cmp	r0, #0
     b3e:	d015      	beq.n	b6c <usart_async_read+0x40>
     b40:	2900      	cmp	r1, #0
     b42:	d013      	beq.n	b6c <usart_async_read+0x40>
     b44:	2a00      	cmp	r2, #0
     b46:	d12a      	bne.n	b9e <usart_async_read+0x72>
     b48:	22ac      	movs	r2, #172	; 0xac
     b4a:	0052      	lsls	r2, r2, #1
     b4c:	4929      	ldr	r1, [pc, #164]	; (bf4 <usart_async_read+0xc8>)
     b4e:	2000      	movs	r0, #0
     b50:	4b29      	ldr	r3, [pc, #164]	; (bf8 <usart_async_read+0xcc>)
     b52:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     b54:	a803      	add	r0, sp, #12
     b56:	4b29      	ldr	r3, [pc, #164]	; (bfc <usart_async_read+0xd0>)
     b58:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     b5a:	0028      	movs	r0, r5
     b5c:	3034      	adds	r0, #52	; 0x34
     b5e:	4b28      	ldr	r3, [pc, #160]	; (c00 <usart_async_read+0xd4>)
     b60:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     b62:	a803      	add	r0, sp, #12
     b64:	4b27      	ldr	r3, [pc, #156]	; (c04 <usart_async_read+0xd8>)
     b66:	4798      	blx	r3
	uint16_t                       was_read = 0;
     b68:	2500      	movs	r5, #0
	return (int32_t)was_read;
     b6a:	e03c      	b.n	be6 <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     b6c:	22ac      	movs	r2, #172	; 0xac
     b6e:	0052      	lsls	r2, r2, #1
     b70:	4920      	ldr	r1, [pc, #128]	; (bf4 <usart_async_read+0xc8>)
     b72:	2000      	movs	r0, #0
     b74:	4b20      	ldr	r3, [pc, #128]	; (bf8 <usart_async_read+0xcc>)
     b76:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     b78:	a803      	add	r0, sp, #12
     b7a:	4b20      	ldr	r3, [pc, #128]	; (bfc <usart_async_read+0xd0>)
     b7c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     b7e:	3534      	adds	r5, #52	; 0x34
     b80:	0028      	movs	r0, r5
     b82:	9501      	str	r5, [sp, #4]
     b84:	4b1e      	ldr	r3, [pc, #120]	; (c00 <usart_async_read+0xd4>)
     b86:	4798      	blx	r3
     b88:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     b8a:	a803      	add	r0, sp, #12
     b8c:	4b1d      	ldr	r3, [pc, #116]	; (c04 <usart_async_read+0xd8>)
     b8e:	4798      	blx	r3
	uint16_t                       was_read = 0;
     b90:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     b92:	4643      	mov	r3, r8
     b94:	2b00      	cmp	r3, #0
     b96:	d026      	beq.n	be6 <usart_async_read+0xba>
     b98:	2f00      	cmp	r7, #0
     b9a:	d116      	bne.n	bca <usart_async_read+0x9e>
     b9c:	e023      	b.n	be6 <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     b9e:	22ac      	movs	r2, #172	; 0xac
     ba0:	0052      	lsls	r2, r2, #1
     ba2:	4914      	ldr	r1, [pc, #80]	; (bf4 <usart_async_read+0xc8>)
     ba4:	2001      	movs	r0, #1
     ba6:	4b14      	ldr	r3, [pc, #80]	; (bf8 <usart_async_read+0xcc>)
     ba8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     baa:	a803      	add	r0, sp, #12
     bac:	4b13      	ldr	r3, [pc, #76]	; (bfc <usart_async_read+0xd0>)
     bae:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     bb0:	3534      	adds	r5, #52	; 0x34
     bb2:	0028      	movs	r0, r5
     bb4:	9501      	str	r5, [sp, #4]
     bb6:	4b12      	ldr	r3, [pc, #72]	; (c00 <usart_async_read+0xd4>)
     bb8:	4798      	blx	r3
     bba:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     bbc:	a803      	add	r0, sp, #12
     bbe:	4b11      	ldr	r3, [pc, #68]	; (c04 <usart_async_read+0xd8>)
     bc0:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     bc2:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
     bc4:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     bc6:	2b00      	cmp	r3, #0
     bc8:	d00d      	beq.n	be6 <usart_async_read+0xba>
{
     bca:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     bcc:	4b0e      	ldr	r3, [pc, #56]	; (c08 <usart_async_read+0xdc>)
     bce:	4699      	mov	r9, r3
     bd0:	1c65      	adds	r5, r4, #1
     bd2:	b2ad      	uxth	r5, r5
     bd4:	1931      	adds	r1, r6, r4
     bd6:	9801      	ldr	r0, [sp, #4]
     bd8:	47c8      	blx	r9
     bda:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     bdc:	4544      	cmp	r4, r8
     bde:	d202      	bcs.n	be6 <usart_async_read+0xba>
     be0:	b2a3      	uxth	r3, r4
     be2:	429f      	cmp	r7, r3
     be4:	d8f4      	bhi.n	bd0 <usart_async_read+0xa4>
}
     be6:	0028      	movs	r0, r5
     be8:	b005      	add	sp, #20
     bea:	bc0c      	pop	{r2, r3}
     bec:	4690      	mov	r8, r2
     bee:	4699      	mov	r9, r3
     bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	00003d90 	.word	0x00003d90
     bf8:	00001365 	.word	0x00001365
     bfc:	00002f19 	.word	0x00002f19
     c00:	00001449 	.word	0x00001449
     c04:	00002f27 	.word	0x00002f27
     c08:	000013c1 	.word	0x000013c1

00000c0c <usart_async_init>:
{
     c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c0e:	0004      	movs	r4, r0
     c10:	000d      	movs	r5, r1
     c12:	0016      	movs	r6, r2
     c14:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     c16:	2800      	cmp	r0, #0
     c18:	d026      	beq.n	c68 <usart_async_init+0x5c>
     c1a:	2900      	cmp	r1, #0
     c1c:	d026      	beq.n	c6c <usart_async_init+0x60>
     c1e:	2a00      	cmp	r2, #0
     c20:	d026      	beq.n	c70 <usart_async_init+0x64>
     c22:	0018      	movs	r0, r3
     c24:	1e43      	subs	r3, r0, #1
     c26:	4198      	sbcs	r0, r3
     c28:	223a      	movs	r2, #58	; 0x3a
     c2a:	4914      	ldr	r1, [pc, #80]	; (c7c <usart_async_init+0x70>)
     c2c:	4b14      	ldr	r3, [pc, #80]	; (c80 <usart_async_init+0x74>)
     c2e:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     c30:	0020      	movs	r0, r4
     c32:	3034      	adds	r0, #52	; 0x34
     c34:	003a      	movs	r2, r7
     c36:	0031      	movs	r1, r6
     c38:	4b12      	ldr	r3, [pc, #72]	; (c84 <usart_async_init+0x78>)
     c3a:	4798      	blx	r3
     c3c:	2800      	cmp	r0, #0
     c3e:	d119      	bne.n	c74 <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
     c40:	0020      	movs	r0, r4
     c42:	3008      	adds	r0, #8
     c44:	0029      	movs	r1, r5
     c46:	4b10      	ldr	r3, [pc, #64]	; (c88 <usart_async_init+0x7c>)
     c48:	4798      	blx	r3
	if (init_status) {
     c4a:	2800      	cmp	r0, #0
     c4c:	d10b      	bne.n	c66 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     c4e:	4b0f      	ldr	r3, [pc, #60]	; (c8c <usart_async_init+0x80>)
     c50:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     c52:	4b0f      	ldr	r3, [pc, #60]	; (c90 <usart_async_init+0x84>)
     c54:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     c56:	4b0f      	ldr	r3, [pc, #60]	; (c94 <usart_async_init+0x88>)
     c58:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     c5a:	4b0f      	ldr	r3, [pc, #60]	; (c98 <usart_async_init+0x8c>)
     c5c:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     c5e:	4b0f      	ldr	r3, [pc, #60]	; (c9c <usart_async_init+0x90>)
     c60:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     c62:	4b0f      	ldr	r3, [pc, #60]	; (ca0 <usart_async_init+0x94>)
     c64:	6163      	str	r3, [r4, #20]
}
     c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     c68:	2000      	movs	r0, #0
     c6a:	e7dd      	b.n	c28 <usart_async_init+0x1c>
     c6c:	2000      	movs	r0, #0
     c6e:	e7db      	b.n	c28 <usart_async_init+0x1c>
     c70:	2000      	movs	r0, #0
     c72:	e7d9      	b.n	c28 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     c74:	200d      	movs	r0, #13
     c76:	4240      	negs	r0, r0
     c78:	e7f5      	b.n	c66 <usart_async_init+0x5a>
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	00003d90 	.word	0x00003d90
     c80:	00001365 	.word	0x00001365
     c84:	0000136d 	.word	0x0000136d
     c88:	00001601 	.word	0x00001601
     c8c:	00000b2d 	.word	0x00000b2d
     c90:	00000a89 	.word	0x00000a89
     c94:	00000aed 	.word	0x00000aed
     c98:	00000a6d 	.word	0x00000a6d
     c9c:	00000a49 	.word	0x00000a49
     ca0:	00000a5b 	.word	0x00000a5b

00000ca4 <usart_async_enable>:
{
     ca4:	b510      	push	{r4, lr}
     ca6:	0004      	movs	r4, r0
	ASSERT(descr);
     ca8:	1e43      	subs	r3, r0, #1
     caa:	4198      	sbcs	r0, r3
     cac:	b2c0      	uxtb	r0, r0
     cae:	2261      	movs	r2, #97	; 0x61
     cb0:	4904      	ldr	r1, [pc, #16]	; (cc4 <usart_async_enable+0x20>)
     cb2:	4b05      	ldr	r3, [pc, #20]	; (cc8 <usart_async_enable+0x24>)
     cb4:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     cb6:	0020      	movs	r0, r4
     cb8:	3008      	adds	r0, #8
     cba:	4b04      	ldr	r3, [pc, #16]	; (ccc <usart_async_enable+0x28>)
     cbc:	4798      	blx	r3
}
     cbe:	2000      	movs	r0, #0
     cc0:	bd10      	pop	{r4, pc}
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	00003d90 	.word	0x00003d90
     cc8:	00001365 	.word	0x00001365
     ccc:	00001675 	.word	0x00001675

00000cd0 <usart_async_disable>:
{
     cd0:	b510      	push	{r4, lr}
     cd2:	0004      	movs	r4, r0
	ASSERT(descr);
     cd4:	1e43      	subs	r3, r0, #1
     cd6:	4198      	sbcs	r0, r3
     cd8:	b2c0      	uxtb	r0, r0
     cda:	226c      	movs	r2, #108	; 0x6c
     cdc:	4904      	ldr	r1, [pc, #16]	; (cf0 <usart_async_disable+0x20>)
     cde:	4b05      	ldr	r3, [pc, #20]	; (cf4 <usart_async_disable+0x24>)
     ce0:	4798      	blx	r3
	_usart_async_disable(&descr->device);
     ce2:	0020      	movs	r0, r4
     ce4:	3008      	adds	r0, #8
     ce6:	4b04      	ldr	r3, [pc, #16]	; (cf8 <usart_async_disable+0x28>)
     ce8:	4798      	blx	r3
}
     cea:	2000      	movs	r0, #0
     cec:	bd10      	pop	{r4, pc}
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	00003d90 	.word	0x00003d90
     cf4:	00001365 	.word	0x00001365
     cf8:	00001689 	.word	0x00001689

00000cfc <usart_async_get_io_descriptor>:
{
     cfc:	b570      	push	{r4, r5, r6, lr}
     cfe:	0004      	movs	r4, r0
     d00:	000d      	movs	r5, r1
	ASSERT(descr && io);
     d02:	2800      	cmp	r0, #0
     d04:	d00a      	beq.n	d1c <usart_async_get_io_descriptor+0x20>
     d06:	0008      	movs	r0, r1
     d08:	1e43      	subs	r3, r0, #1
     d0a:	4198      	sbcs	r0, r3
     d0c:	b2c0      	uxtb	r0, r0
     d0e:	2277      	movs	r2, #119	; 0x77
     d10:	4903      	ldr	r1, [pc, #12]	; (d20 <usart_async_get_io_descriptor+0x24>)
     d12:	4b04      	ldr	r3, [pc, #16]	; (d24 <usart_async_get_io_descriptor+0x28>)
     d14:	4798      	blx	r3
	*io = &descr->io;
     d16:	602c      	str	r4, [r5, #0]
}
     d18:	2000      	movs	r0, #0
     d1a:	bd70      	pop	{r4, r5, r6, pc}
     d1c:	2000      	movs	r0, #0
     d1e:	e7f6      	b.n	d0e <usart_async_get_io_descriptor+0x12>
     d20:	00003d90 	.word	0x00003d90
     d24:	00001365 	.word	0x00001365

00000d28 <usart_async_register_callback>:
{
     d28:	b570      	push	{r4, r5, r6, lr}
     d2a:	0005      	movs	r5, r0
     d2c:	000e      	movs	r6, r1
     d2e:	0014      	movs	r4, r2
	ASSERT(descr);
     d30:	1e43      	subs	r3, r0, #1
     d32:	4198      	sbcs	r0, r3
     d34:	b2c0      	uxtb	r0, r0
     d36:	2283      	movs	r2, #131	; 0x83
     d38:	4916      	ldr	r1, [pc, #88]	; (d94 <usart_async_register_callback+0x6c>)
     d3a:	4b17      	ldr	r3, [pc, #92]	; (d98 <usart_async_register_callback+0x70>)
     d3c:	4798      	blx	r3
	switch (type) {
     d3e:	2e01      	cmp	r6, #1
     d40:	d011      	beq.n	d66 <usart_async_register_callback+0x3e>
     d42:	2e00      	cmp	r6, #0
     d44:	d004      	beq.n	d50 <usart_async_register_callback+0x28>
     d46:	2e02      	cmp	r6, #2
     d48:	d018      	beq.n	d7c <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     d4a:	200d      	movs	r0, #13
     d4c:	4240      	negs	r0, r0
     d4e:	e009      	b.n	d64 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     d50:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     d52:	1e62      	subs	r2, r4, #1
     d54:	4194      	sbcs	r4, r2
     d56:	b2e2      	uxtb	r2, r4
     d58:	0028      	movs	r0, r5
     d5a:	3008      	adds	r0, #8
     d5c:	2101      	movs	r1, #1
     d5e:	4b0f      	ldr	r3, [pc, #60]	; (d9c <usart_async_register_callback+0x74>)
     d60:	4798      	blx	r3
	return ERR_NONE;
     d62:	2000      	movs	r0, #0
}
     d64:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     d66:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     d68:	1e62      	subs	r2, r4, #1
     d6a:	4194      	sbcs	r4, r2
     d6c:	b2e2      	uxtb	r2, r4
     d6e:	0028      	movs	r0, r5
     d70:	3008      	adds	r0, #8
     d72:	2102      	movs	r1, #2
     d74:	4b09      	ldr	r3, [pc, #36]	; (d9c <usart_async_register_callback+0x74>)
     d76:	4798      	blx	r3
	return ERR_NONE;
     d78:	2000      	movs	r0, #0
		break;
     d7a:	e7f3      	b.n	d64 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     d7c:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     d7e:	1e62      	subs	r2, r4, #1
     d80:	4194      	sbcs	r4, r2
     d82:	b2e2      	uxtb	r2, r4
     d84:	0028      	movs	r0, r5
     d86:	3008      	adds	r0, #8
     d88:	2103      	movs	r1, #3
     d8a:	4b04      	ldr	r3, [pc, #16]	; (d9c <usart_async_register_callback+0x74>)
     d8c:	4798      	blx	r3
	return ERR_NONE;
     d8e:	2000      	movs	r0, #0
		break;
     d90:	e7e8      	b.n	d64 <usart_async_register_callback+0x3c>
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	00003d90 	.word	0x00003d90
     d98:	00001365 	.word	0x00001365
     d9c:	000016b5 	.word	0x000016b5

00000da0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     da0:	b5f0      	push	{r4, r5, r6, r7, lr}
     da2:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     da4:	4b0e      	ldr	r3, [pc, #56]	; (de0 <_usb_d_find_ep+0x40>)
     da6:	785a      	ldrb	r2, [r3, #1]
     da8:	4290      	cmp	r0, r2
     daa:	d017      	beq.n	ddc <_usb_d_find_ep+0x3c>
     dac:	2300      	movs	r3, #0
     dae:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     db0:	4f0b      	ldr	r7, [pc, #44]	; (de0 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     db2:	260f      	movs	r6, #15
     db4:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     db6:	003d      	movs	r5, r7
     db8:	e008      	b.n	dcc <_usb_d_find_ep+0x2c>
     dba:	3001      	adds	r0, #1
     dbc:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     dbe:	2804      	cmp	r0, #4
     dc0:	d00a      	beq.n	dd8 <_usb_d_find_ep+0x38>
     dc2:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     dc4:	18ea      	adds	r2, r5, r3
     dc6:	7852      	ldrb	r2, [r2, #1]
     dc8:	42a2      	cmp	r2, r4
     dca:	d006      	beq.n	dda <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     dcc:	5dd9      	ldrb	r1, [r3, r7]
     dce:	2900      	cmp	r1, #0
     dd0:	d1f3      	bne.n	dba <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     dd2:	4296      	cmp	r6, r2
     dd4:	d1f1      	bne.n	dba <_usb_d_find_ep+0x1a>
     dd6:	e000      	b.n	dda <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     dd8:	3805      	subs	r0, #5
}
     dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     ddc:	2000      	movs	r0, #0
     dde:	e7fc      	b.n	dda <_usb_d_find_ep+0x3a>
     de0:	200004f8 	.word	0x200004f8

00000de4 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     de4:	2000      	movs	r0, #0
     de6:	4770      	bx	lr

00000de8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     de8:	b570      	push	{r4, r5, r6, lr}
     dea:	0004      	movs	r4, r0
     dec:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     dee:	4b0a      	ldr	r3, [pc, #40]	; (e18 <usb_d_cb_trans_more+0x30>)
     df0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     df2:	0142      	lsls	r2, r0, #5
     df4:	4b09      	ldr	r3, [pc, #36]	; (e1c <usb_d_cb_trans_more+0x34>)
     df6:	189b      	adds	r3, r3, r2
     df8:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     dfa:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     dfc:	2a03      	cmp	r2, #3
     dfe:	d001      	beq.n	e04 <usb_d_cb_trans_more+0x1c>
}
     e00:	0018      	movs	r0, r3
     e02:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     e04:	0140      	lsls	r0, r0, #5
     e06:	4b05      	ldr	r3, [pc, #20]	; (e1c <usb_d_cb_trans_more+0x34>)
     e08:	1818      	adds	r0, r3, r0
     e0a:	6983      	ldr	r3, [r0, #24]
     e0c:	0029      	movs	r1, r5
     e0e:	0020      	movs	r0, r4
     e10:	4798      	blx	r3
     e12:	0003      	movs	r3, r0
     e14:	e7f4      	b.n	e00 <usb_d_cb_trans_more+0x18>
     e16:	46c0      	nop			; (mov r8, r8)
     e18:	00000da1 	.word	0x00000da1
     e1c:	200004f8 	.word	0x200004f8

00000e20 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     e20:	b5f0      	push	{r4, r5, r6, r7, lr}
     e22:	b085      	sub	sp, #20
     e24:	0005      	movs	r5, r0
     e26:	000f      	movs	r7, r1
     e28:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     e2a:	4b51      	ldr	r3, [pc, #324]	; (f70 <_usb_d_cb_trans_done+0x150>)
     e2c:	4798      	blx	r3
     e2e:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     e30:	2f00      	cmp	r7, #0
     e32:	d162      	bne.n	efa <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     e34:	4b4f      	ldr	r3, [pc, #316]	; (f74 <_usb_d_cb_trans_done+0x154>)
     e36:	0142      	lsls	r2, r0, #5
     e38:	1899      	adds	r1, r3, r2
     e3a:	2000      	movs	r0, #0
     e3c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     e3e:	5cd3      	ldrb	r3, [r2, r3]
     e40:	2b00      	cmp	r3, #0
     e42:	d00e      	beq.n	e62 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     e44:	0162      	lsls	r2, r4, #5
     e46:	4b4b      	ldr	r3, [pc, #300]	; (f74 <_usb_d_cb_trans_done+0x154>)
     e48:	189b      	adds	r3, r3, r2
     e4a:	2201      	movs	r2, #1
     e4c:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     e4e:	0164      	lsls	r4, r4, #5
     e50:	4b48      	ldr	r3, [pc, #288]	; (f74 <_usb_d_cb_trans_done+0x154>)
     e52:	191c      	adds	r4, r3, r4
     e54:	78e1      	ldrb	r1, [r4, #3]
     e56:	69e3      	ldr	r3, [r4, #28]
     e58:	0032      	movs	r2, r6
     e5a:	0028      	movs	r0, r5
     e5c:	4798      	blx	r3
}
     e5e:	b005      	add	sp, #20
     e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     e62:	788b      	ldrb	r3, [r1, #2]
     e64:	2b03      	cmp	r3, #3
     e66:	d00c      	beq.n	e82 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     e68:	4b42      	ldr	r3, [pc, #264]	; (f74 <_usb_d_cb_trans_done+0x154>)
     e6a:	0162      	lsls	r2, r4, #5
     e6c:	320c      	adds	r2, #12
     e6e:	189a      	adds	r2, r3, r2
     e70:	0164      	lsls	r4, r4, #5
     e72:	191c      	adds	r4, r3, r4
     e74:	7860      	ldrb	r0, [r4, #1]
     e76:	2100      	movs	r1, #0
     e78:	69e3      	ldr	r3, [r4, #28]
     e7a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     e7c:	2302      	movs	r3, #2
     e7e:	70a3      	strb	r3, [r4, #2]
     e80:	e7ed      	b.n	e5e <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     e82:	4a3c      	ldr	r2, [pc, #240]	; (f74 <_usb_d_cb_trans_done+0x154>)
     e84:	000b      	movs	r3, r1
     e86:	250c      	movs	r5, #12
     e88:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     e8a:	0161      	lsls	r1, r4, #5
     e8c:	310c      	adds	r1, #12
     e8e:	1852      	adds	r2, r2, r1
     e90:	7858      	ldrb	r0, [r3, #1]
     e92:	69db      	ldr	r3, [r3, #28]
     e94:	2101      	movs	r1, #1
     e96:	4798      	blx	r3
		if (err) {
     e98:	2800      	cmp	r0, #0
     e9a:	d017      	beq.n	ecc <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     e9c:	0162      	lsls	r2, r4, #5
     e9e:	4b35      	ldr	r3, [pc, #212]	; (f74 <_usb_d_cb_trans_done+0x154>)
     ea0:	189b      	adds	r3, r3, r2
     ea2:	2205      	movs	r2, #5
     ea4:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     ea6:	3a03      	subs	r2, #3
     ea8:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     eaa:	2d00      	cmp	r5, #0
     eac:	db09      	blt.n	ec2 <_usb_d_cb_trans_done+0xa2>
     eae:	0164      	lsls	r4, r4, #5
     eb0:	4b30      	ldr	r3, [pc, #192]	; (f74 <_usb_d_cb_trans_done+0x154>)
     eb2:	191c      	adds	r4, r3, r4
     eb4:	7860      	ldrb	r0, [r4, #1]
     eb6:	2380      	movs	r3, #128	; 0x80
     eb8:	4318      	orrs	r0, r3
     eba:	2101      	movs	r1, #1
     ebc:	4b2e      	ldr	r3, [pc, #184]	; (f78 <_usb_d_cb_trans_done+0x158>)
     ebe:	4798      	blx	r3
     ec0:	e7cd      	b.n	e5e <_usb_d_cb_trans_done+0x3e>
     ec2:	0164      	lsls	r4, r4, #5
     ec4:	4b2b      	ldr	r3, [pc, #172]	; (f74 <_usb_d_cb_trans_done+0x154>)
     ec6:	191c      	adds	r4, r3, r4
     ec8:	7860      	ldrb	r0, [r4, #1]
     eca:	e7f6      	b.n	eba <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     ecc:	0164      	lsls	r4, r4, #5
     ece:	4b29      	ldr	r3, [pc, #164]	; (f74 <_usb_d_cb_trans_done+0x154>)
     ed0:	191c      	adds	r4, r3, r4
     ed2:	2304      	movs	r3, #4
     ed4:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     ed6:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     ed8:	2200      	movs	r2, #0
     eda:	9201      	str	r2, [sp, #4]
     edc:	9202      	str	r2, [sp, #8]
     ede:	2d00      	cmp	r5, #0
     ee0:	db08      	blt.n	ef4 <_usb_d_cb_trans_done+0xd4>
     ee2:	3280      	adds	r2, #128	; 0x80
     ee4:	4313      	orrs	r3, r2
     ee6:	a801      	add	r0, sp, #4
     ee8:	7203      	strb	r3, [r0, #8]
     eea:	2301      	movs	r3, #1
     eec:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     eee:	4b23      	ldr	r3, [pc, #140]	; (f7c <_usb_d_cb_trans_done+0x15c>)
     ef0:	4798      	blx	r3
     ef2:	e7b4      	b.n	e5e <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     ef4:	220f      	movs	r2, #15
     ef6:	4013      	ands	r3, r2
     ef8:	e7f5      	b.n	ee6 <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     efa:	2f01      	cmp	r7, #1
     efc:	d00a      	beq.n	f14 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     efe:	2f02      	cmp	r7, #2
     f00:	d01d      	beq.n	f3e <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     f02:	2f03      	cmp	r7, #3
     f04:	d02c      	beq.n	f60 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     f06:	0142      	lsls	r2, r0, #5
     f08:	4b1a      	ldr	r3, [pc, #104]	; (f74 <_usb_d_cb_trans_done+0x154>)
     f0a:	189b      	adds	r3, r3, r2
     f0c:	2206      	movs	r2, #6
     f0e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     f10:	70da      	strb	r2, [r3, #3]
     f12:	e79c      	b.n	e4e <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     f14:	4b17      	ldr	r3, [pc, #92]	; (f74 <_usb_d_cb_trans_done+0x154>)
     f16:	0142      	lsls	r2, r0, #5
     f18:	1899      	adds	r1, r3, r2
     f1a:	2002      	movs	r0, #2
     f1c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     f1e:	5cd3      	ldrb	r3, [r2, r3]
     f20:	2b00      	cmp	r3, #0
     f22:	d005      	beq.n	f30 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     f24:	0162      	lsls	r2, r4, #5
     f26:	4b13      	ldr	r3, [pc, #76]	; (f74 <_usb_d_cb_trans_done+0x154>)
     f28:	189b      	adds	r3, r3, r2
     f2a:	2205      	movs	r2, #5
     f2c:	709a      	strb	r2, [r3, #2]
     f2e:	e78e      	b.n	e4e <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     f30:	2202      	movs	r2, #2
     f32:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     f34:	2100      	movs	r1, #0
     f36:	0028      	movs	r0, r5
     f38:	4b0f      	ldr	r3, [pc, #60]	; (f78 <_usb_d_cb_trans_done+0x158>)
     f3a:	4798      	blx	r3
     f3c:	e787      	b.n	e4e <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     f3e:	4b0d      	ldr	r3, [pc, #52]	; (f74 <_usb_d_cb_trans_done+0x154>)
     f40:	0142      	lsls	r2, r0, #5
     f42:	1899      	adds	r1, r3, r2
     f44:	2004      	movs	r0, #4
     f46:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     f48:	5cd3      	ldrb	r3, [r2, r3]
     f4a:	2b00      	cmp	r3, #0
     f4c:	d005      	beq.n	f5a <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     f4e:	0162      	lsls	r2, r4, #5
     f50:	4b08      	ldr	r3, [pc, #32]	; (f74 <_usb_d_cb_trans_done+0x154>)
     f52:	189b      	adds	r3, r3, r2
     f54:	2201      	movs	r2, #1
     f56:	709a      	strb	r2, [r3, #2]
     f58:	e779      	b.n	e4e <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     f5a:	2302      	movs	r3, #2
     f5c:	708b      	strb	r3, [r1, #2]
			return;
     f5e:	e77e      	b.n	e5e <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     f60:	0142      	lsls	r2, r0, #5
     f62:	4b04      	ldr	r3, [pc, #16]	; (f74 <_usb_d_cb_trans_done+0x154>)
     f64:	189b      	adds	r3, r3, r2
     f66:	2200      	movs	r2, #0
     f68:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     f6a:	3205      	adds	r2, #5
     f6c:	70da      	strb	r2, [r3, #3]
     f6e:	e76e      	b.n	e4e <_usb_d_cb_trans_done+0x2e>
     f70:	00000da1 	.word	0x00000da1
     f74:	200004f8 	.word	0x200004f8
     f78:	00002861 	.word	0x00002861
     f7c:	00002a35 	.word	0x00002a35

00000f80 <usb_d_cb_trans_setup>:
{
     f80:	b5f0      	push	{r4, r5, r6, r7, lr}
     f82:	46c6      	mov	lr, r8
     f84:	b500      	push	{lr}
     f86:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     f88:	4b1d      	ldr	r3, [pc, #116]	; (1000 <usb_d_cb_trans_setup+0x80>)
     f8a:	4798      	blx	r3
     f8c:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     f8e:	0145      	lsls	r5, r0, #5
     f90:	350c      	adds	r5, #12
     f92:	4b1c      	ldr	r3, [pc, #112]	; (1004 <usb_d_cb_trans_setup+0x84>)
     f94:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     f96:	0029      	movs	r1, r5
     f98:	0020      	movs	r0, r4
     f9a:	4b1b      	ldr	r3, [pc, #108]	; (1008 <usb_d_cb_trans_setup+0x88>)
     f9c:	4798      	blx	r3
	if (n != 8) {
     f9e:	b2c0      	uxtb	r0, r0
     fa0:	2808      	cmp	r0, #8
     fa2:	d00a      	beq.n	fba <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     fa4:	2101      	movs	r1, #1
     fa6:	0020      	movs	r0, r4
     fa8:	4d18      	ldr	r5, [pc, #96]	; (100c <usb_d_cb_trans_setup+0x8c>)
     faa:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     fac:	2080      	movs	r0, #128	; 0x80
     fae:	4320      	orrs	r0, r4
     fb0:	2101      	movs	r1, #1
     fb2:	47a8      	blx	r5
}
     fb4:	bc04      	pop	{r2}
     fb6:	4690      	mov	r8, r2
     fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     fba:	2100      	movs	r1, #0
     fbc:	0020      	movs	r0, r4
     fbe:	4b13      	ldr	r3, [pc, #76]	; (100c <usb_d_cb_trans_setup+0x8c>)
     fc0:	4698      	mov	r8, r3
     fc2:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     fc4:	2780      	movs	r7, #128	; 0x80
     fc6:	4327      	orrs	r7, r4
     fc8:	2100      	movs	r1, #0
     fca:	0038      	movs	r0, r7
     fcc:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     fce:	0172      	lsls	r2, r6, #5
     fd0:	4b0c      	ldr	r3, [pc, #48]	; (1004 <usb_d_cb_trans_setup+0x84>)
     fd2:	189b      	adds	r3, r3, r2
     fd4:	2201      	movs	r2, #1
     fd6:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     fd8:	695b      	ldr	r3, [r3, #20]
     fda:	0029      	movs	r1, r5
     fdc:	0020      	movs	r0, r4
     fde:	4798      	blx	r3
     fe0:	2800      	cmp	r0, #0
     fe2:	d1e7      	bne.n	fb4 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     fe4:	0176      	lsls	r6, r6, #5
     fe6:	4b07      	ldr	r3, [pc, #28]	; (1004 <usb_d_cb_trans_setup+0x84>)
     fe8:	199e      	adds	r6, r3, r6
     fea:	2305      	movs	r3, #5
     fec:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     fee:	2101      	movs	r1, #1
     ff0:	0020      	movs	r0, r4
     ff2:	4c06      	ldr	r4, [pc, #24]	; (100c <usb_d_cb_trans_setup+0x8c>)
     ff4:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     ff6:	2101      	movs	r1, #1
     ff8:	0038      	movs	r0, r7
     ffa:	47a0      	blx	r4
     ffc:	e7da      	b.n	fb4 <usb_d_cb_trans_setup+0x34>
     ffe:	46c0      	nop			; (mov r8, r8)
    1000:	00000da1 	.word	0x00000da1
    1004:	200004f8 	.word	0x200004f8
    1008:	000029c5 	.word	0x000029c5
    100c:	00002861 	.word	0x00002861

00001010 <usb_d_init>:

int32_t usb_d_init(void)
{
    1010:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1012:	4b10      	ldr	r3, [pc, #64]	; (1054 <usb_d_init+0x44>)
    1014:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1016:	2800      	cmp	r0, #0
    1018:	db1b      	blt.n	1052 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    101a:	4c0f      	ldr	r4, [pc, #60]	; (1058 <usb_d_init+0x48>)
    101c:	2280      	movs	r2, #128	; 0x80
    101e:	2100      	movs	r1, #0
    1020:	0020      	movs	r0, r4
    1022:	4b0e      	ldr	r3, [pc, #56]	; (105c <usb_d_init+0x4c>)
    1024:	4798      	blx	r3
    1026:	0023      	movs	r3, r4
    1028:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    102a:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    102c:	4a0c      	ldr	r2, [pc, #48]	; (1060 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    102e:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1030:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1032:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1034:	61da      	str	r2, [r3, #28]
    1036:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1038:	42a3      	cmp	r3, r4
    103a:	d1f8      	bne.n	102e <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    103c:	4909      	ldr	r1, [pc, #36]	; (1064 <usb_d_init+0x54>)
    103e:	2000      	movs	r0, #0
    1040:	4c09      	ldr	r4, [pc, #36]	; (1068 <usb_d_init+0x58>)
    1042:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1044:	4909      	ldr	r1, [pc, #36]	; (106c <usb_d_init+0x5c>)
    1046:	2001      	movs	r0, #1
    1048:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    104a:	4909      	ldr	r1, [pc, #36]	; (1070 <usb_d_init+0x60>)
    104c:	2002      	movs	r0, #2
    104e:	47a0      	blx	r4
	return ERR_NONE;
    1050:	2000      	movs	r0, #0
}
    1052:	bd10      	pop	{r4, pc}
    1054:	00002241 	.word	0x00002241
    1058:	200004f8 	.word	0x200004f8
    105c:	00003b71 	.word	0x00003b71
    1060:	00000de5 	.word	0x00000de5
    1064:	00000f81 	.word	0x00000f81
    1068:	00002c6d 	.word	0x00002c6d
    106c:	00000de9 	.word	0x00000de9
    1070:	00000e21 	.word	0x00000e21

00001074 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    1074:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1076:	4b01      	ldr	r3, [pc, #4]	; (107c <usb_d_register_callback+0x8>)
    1078:	4798      	blx	r3
}
    107a:	bd10      	pop	{r4, pc}
    107c:	00002c49 	.word	0x00002c49

00001080 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    1080:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    1082:	4b01      	ldr	r3, [pc, #4]	; (1088 <usb_d_enable+0x8>)
    1084:	4798      	blx	r3
}
    1086:	bd10      	pop	{r4, pc}
    1088:	0000231d 	.word	0x0000231d

0000108c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    108c:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    108e:	4b01      	ldr	r3, [pc, #4]	; (1094 <usb_d_attach+0x8>)
    1090:	4798      	blx	r3
}
    1092:	bd10      	pop	{r4, pc}
    1094:	0000236d 	.word	0x0000236d

00001098 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    1098:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    109a:	4b01      	ldr	r3, [pc, #4]	; (10a0 <usb_d_set_address+0x8>)
    109c:	4798      	blx	r3
}
    109e:	bd10      	pop	{r4, pc}
    10a0:	0000237d 	.word	0x0000237d

000010a4 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    10a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10a6:	0005      	movs	r5, r0
    10a8:	000e      	movs	r6, r1
    10aa:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    10ac:	4b0f      	ldr	r3, [pc, #60]	; (10ec <usb_d_ep_init+0x48>)
    10ae:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    10b0:	2800      	cmp	r0, #0
    10b2:	da14      	bge.n	10de <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    10b4:	20ff      	movs	r0, #255	; 0xff
    10b6:	4b0d      	ldr	r3, [pc, #52]	; (10ec <usb_d_ep_init+0x48>)
    10b8:	4798      	blx	r3
    10ba:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    10bc:	db12      	blt.n	10e4 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    10be:	003a      	movs	r2, r7
    10c0:	0031      	movs	r1, r6
    10c2:	0028      	movs	r0, r5
    10c4:	4b0a      	ldr	r3, [pc, #40]	; (10f0 <usb_d_ep_init+0x4c>)
    10c6:	4798      	blx	r3
	if (rc < 0) {
    10c8:	2800      	cmp	r0, #0
    10ca:	db07      	blt.n	10dc <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    10cc:	4a09      	ldr	r2, [pc, #36]	; (10f4 <usb_d_ep_init+0x50>)
    10ce:	0164      	lsls	r4, r4, #5
    10d0:	1913      	adds	r3, r2, r4
    10d2:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    10d4:	2303      	movs	r3, #3
    10d6:	401e      	ands	r6, r3
    10d8:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    10da:	2000      	movs	r0, #0
}
    10dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    10de:	2014      	movs	r0, #20
    10e0:	4240      	negs	r0, r0
    10e2:	e7fb      	b.n	10dc <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    10e4:	2015      	movs	r0, #21
    10e6:	4240      	negs	r0, r0
    10e8:	e7f8      	b.n	10dc <usb_d_ep_init+0x38>
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	00000da1 	.word	0x00000da1
    10f0:	0000238d 	.word	0x0000238d
    10f4:	200004f8 	.word	0x200004f8

000010f8 <usb_d_ep0_init>:
{
    10f8:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    10fa:	b282      	uxth	r2, r0
    10fc:	2100      	movs	r1, #0
    10fe:	2000      	movs	r0, #0
    1100:	4b01      	ldr	r3, [pc, #4]	; (1108 <usb_d_ep0_init+0x10>)
    1102:	4798      	blx	r3
}
    1104:	bd10      	pop	{r4, pc}
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	000010a5 	.word	0x000010a5

0000110c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    110c:	b570      	push	{r4, r5, r6, lr}
    110e:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1110:	4b06      	ldr	r3, [pc, #24]	; (112c <usb_d_ep_deinit+0x20>)
    1112:	4798      	blx	r3
    1114:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1116:	db07      	blt.n	1128 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1118:	0028      	movs	r0, r5
    111a:	4b05      	ldr	r3, [pc, #20]	; (1130 <usb_d_ep_deinit+0x24>)
    111c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    111e:	0164      	lsls	r4, r4, #5
    1120:	4b04      	ldr	r3, [pc, #16]	; (1134 <usb_d_ep_deinit+0x28>)
    1122:	191c      	adds	r4, r3, r4
    1124:	23ff      	movs	r3, #255	; 0xff
    1126:	7063      	strb	r3, [r4, #1]
}
    1128:	bd70      	pop	{r4, r5, r6, pc}
    112a:	46c0      	nop			; (mov r8, r8)
    112c:	00000da1 	.word	0x00000da1
    1130:	000024b9 	.word	0x000024b9
    1134:	200004f8 	.word	0x200004f8

00001138 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1138:	b570      	push	{r4, r5, r6, lr}
    113a:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    113c:	4b0e      	ldr	r3, [pc, #56]	; (1178 <usb_d_ep_enable+0x40>)
    113e:	4798      	blx	r3
    1140:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1142:	db15      	blt.n	1170 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1144:	0143      	lsls	r3, r0, #5
    1146:	4a0d      	ldr	r2, [pc, #52]	; (117c <usb_d_ep_enable+0x44>)
    1148:	5c9b      	ldrb	r3, [r3, r2]
    114a:	425a      	negs	r2, r3
    114c:	4153      	adcs	r3, r2
    114e:	3301      	adds	r3, #1
    1150:	0141      	lsls	r1, r0, #5
    1152:	4a0a      	ldr	r2, [pc, #40]	; (117c <usb_d_ep_enable+0x44>)
    1154:	1852      	adds	r2, r2, r1
    1156:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1158:	0020      	movs	r0, r4
    115a:	4b09      	ldr	r3, [pc, #36]	; (1180 <usb_d_ep_enable+0x48>)
    115c:	4798      	blx	r3
	if (rc < 0) {
    115e:	2800      	cmp	r0, #0
    1160:	db00      	blt.n	1164 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1162:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1164:	016d      	lsls	r5, r5, #5
    1166:	4b05      	ldr	r3, [pc, #20]	; (117c <usb_d_ep_enable+0x44>)
    1168:	195d      	adds	r5, r3, r5
    116a:	2300      	movs	r3, #0
    116c:	70ab      	strb	r3, [r5, #2]
    116e:	e7f8      	b.n	1162 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    1170:	2012      	movs	r0, #18
    1172:	4240      	negs	r0, r0
    1174:	e7f5      	b.n	1162 <usb_d_ep_enable+0x2a>
    1176:	46c0      	nop			; (mov r8, r8)
    1178:	00000da1 	.word	0x00000da1
    117c:	200004f8 	.word	0x200004f8
    1180:	00002585 	.word	0x00002585

00001184 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1184:	b5f0      	push	{r4, r5, r6, r7, lr}
    1186:	46d6      	mov	lr, sl
    1188:	464f      	mov	r7, r9
    118a:	4646      	mov	r6, r8
    118c:	b5c0      	push	{r6, r7, lr}
    118e:	b086      	sub	sp, #24
    1190:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1192:	7a07      	ldrb	r7, [r0, #8]
    1194:	0038      	movs	r0, r7
    1196:	4b40      	ldr	r3, [pc, #256]	; (1298 <usb_d_ep_transfer+0x114>)
    1198:	4798      	blx	r3
    119a:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    119c:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
    119e:	6863      	ldr	r3, [r4, #4]
    11a0:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    11a2:	2800      	cmp	r0, #0
    11a4:	da00      	bge.n	11a8 <usb_d_ep_transfer+0x24>
    11a6:	e071      	b.n	128c <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    11a8:	a804      	add	r0, sp, #16
    11aa:	4b3c      	ldr	r3, [pc, #240]	; (129c <usb_d_ep_transfer+0x118>)
    11ac:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    11ae:	016a      	lsls	r2, r5, #5
    11b0:	4b3b      	ldr	r3, [pc, #236]	; (12a0 <usb_d_ep_transfer+0x11c>)
    11b2:	189b      	adds	r3, r3, r2
    11b4:	789a      	ldrb	r2, [r3, #2]
    11b6:	2317      	movs	r3, #23
    11b8:	446b      	add	r3, sp
    11ba:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    11bc:	781b      	ldrb	r3, [r3, #0]
    11be:	2b01      	cmp	r3, #1
    11c0:	d010      	beq.n	11e4 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    11c2:	a804      	add	r0, sp, #16
    11c4:	4b37      	ldr	r3, [pc, #220]	; (12a4 <usb_d_ep_transfer+0x120>)
    11c6:	4798      	blx	r3
		switch (state) {
    11c8:	2317      	movs	r3, #23
    11ca:	446b      	add	r3, sp
    11cc:	781b      	ldrb	r3, [r3, #0]
    11ce:	b2db      	uxtb	r3, r3
    11d0:	2b05      	cmp	r3, #5
    11d2:	d05e      	beq.n	1292 <usb_d_ep_transfer+0x10e>
    11d4:	2b06      	cmp	r3, #6
    11d6:	d023      	beq.n	1220 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    11d8:	2001      	movs	r0, #1
		switch (state) {
    11da:	2b00      	cmp	r3, #0
    11dc:	d13c      	bne.n	1258 <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
    11de:	2013      	movs	r0, #19
    11e0:	4240      	negs	r0, r0
    11e2:	e039      	b.n	1258 <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    11e4:	4b2e      	ldr	r3, [pc, #184]	; (12a0 <usb_d_ep_transfer+0x11c>)
    11e6:	4699      	mov	r9, r3
    11e8:	016b      	lsls	r3, r5, #5
    11ea:	469a      	mov	sl, r3
    11ec:	464b      	mov	r3, r9
    11ee:	4453      	add	r3, sl
    11f0:	2203      	movs	r2, #3
    11f2:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    11f4:	a804      	add	r0, sp, #16
    11f6:	4b2b      	ldr	r3, [pc, #172]	; (12a4 <usb_d_ep_transfer+0x120>)
    11f8:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    11fa:	464b      	mov	r3, r9
    11fc:	4652      	mov	r2, sl
    11fe:	5cd3      	ldrb	r3, [r2, r3]
    1200:	2b00      	cmp	r3, #0
    1202:	d010      	beq.n	1226 <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1204:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1206:	1e72      	subs	r2, r6, #1
    1208:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    120a:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
    120c:	6822      	ldr	r2, [r4, #0]
    120e:	9201      	str	r2, [sp, #4]
    1210:	4642      	mov	r2, r8
    1212:	9202      	str	r2, [sp, #8]
    1214:	b27f      	sxtb	r7, r7
    1216:	2f00      	cmp	r7, #0
    1218:	db17      	blt.n	124a <usb_d_ep_transfer+0xc6>
    121a:	220f      	movs	r2, #15
    121c:	4013      	ands	r3, r2
    121e:	e016      	b.n	124e <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
    1220:	2010      	movs	r0, #16
    1222:	4240      	negs	r0, r0
    1224:	e018      	b.n	1258 <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1226:	016b      	lsls	r3, r5, #5
    1228:	4a1d      	ldr	r2, [pc, #116]	; (12a0 <usb_d_ep_transfer+0x11c>)
    122a:	18d2      	adds	r2, r2, r3
    122c:	7cd1      	ldrb	r1, [r2, #19]
    122e:	0209      	lsls	r1, r1, #8
    1230:	7c93      	ldrb	r3, [r2, #18]
    1232:	185b      	adds	r3, r3, r1
    1234:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    1236:	2b00      	cmp	r3, #0
    1238:	d114      	bne.n	1264 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    123a:	2304      	movs	r3, #4
    123c:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    123e:	2200      	movs	r2, #0
			zlp                 = true;
    1240:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1242:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    1244:	6821      	ldr	r1, [r4, #0]
    1246:	9101      	str	r1, [sp, #4]
    1248:	9202      	str	r2, [sp, #8]
    124a:	2280      	movs	r2, #128	; 0x80
    124c:	4313      	orrs	r3, r2
    124e:	a801      	add	r0, sp, #4
    1250:	7203      	strb	r3, [r0, #8]
    1252:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    1254:	4b14      	ldr	r3, [pc, #80]	; (12a8 <usb_d_ep_transfer+0x124>)
    1256:	4798      	blx	r3
	return rc;
}
    1258:	b006      	add	sp, #24
    125a:	bc1c      	pop	{r2, r3, r4}
    125c:	4690      	mov	r8, r2
    125e:	4699      	mov	r9, r3
    1260:	46a2      	mov	sl, r4
    1262:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1264:	4642      	mov	r2, r8
    1266:	429a      	cmp	r2, r3
    1268:	d900      	bls.n	126c <usb_d_ep_transfer+0xe8>
    126a:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    126c:	016d      	lsls	r5, r5, #5
    126e:	490c      	ldr	r1, [pc, #48]	; (12a0 <usb_d_ep_transfer+0x11c>)
    1270:	194d      	adds	r5, r1, r5
			if (dir) {
    1272:	7b29      	ldrb	r1, [r5, #12]
    1274:	297f      	cmp	r1, #127	; 0x7f
    1276:	d805      	bhi.n	1284 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1278:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    127a:	6821      	ldr	r1, [r4, #0]
    127c:	9101      	str	r1, [sp, #4]
    127e:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1280:	2600      	movs	r6, #0
    1282:	e7ca      	b.n	121a <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
    1284:	429a      	cmp	r2, r3
    1286:	41b6      	sbcs	r6, r6
    1288:	4276      	negs	r6, r6
    128a:	e7da      	b.n	1242 <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
    128c:	2012      	movs	r0, #18
    128e:	4240      	negs	r0, r0
    1290:	e7e2      	b.n	1258 <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
    1292:	2002      	movs	r0, #2
    1294:	e7e0      	b.n	1258 <usb_d_ep_transfer+0xd4>
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	00000da1 	.word	0x00000da1
    129c:	00002f19 	.word	0x00002f19
    12a0:	200004f8 	.word	0x200004f8
    12a4:	00002f27 	.word	0x00002f27
    12a8:	00002a35 	.word	0x00002a35

000012ac <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    12ac:	b570      	push	{r4, r5, r6, lr}
    12ae:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    12b0:	2900      	cmp	r1, #0
    12b2:	d005      	beq.n	12c0 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    12b4:	2901      	cmp	r1, #1
    12b6:	d021      	beq.n	12fc <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    12b8:	2102      	movs	r1, #2
    12ba:	4b13      	ldr	r3, [pc, #76]	; (1308 <usb_d_ep_halt+0x5c>)
    12bc:	4798      	blx	r3
	}
}
    12be:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    12c0:	4b12      	ldr	r3, [pc, #72]	; (130c <usb_d_ep_halt+0x60>)
    12c2:	4798      	blx	r3
    12c4:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    12c6:	db1c      	blt.n	1302 <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    12c8:	2102      	movs	r1, #2
    12ca:	0020      	movs	r0, r4
    12cc:	4b0e      	ldr	r3, [pc, #56]	; (1308 <usb_d_ep_halt+0x5c>)
    12ce:	4798      	blx	r3
    12d0:	2800      	cmp	r0, #0
    12d2:	d0f4      	beq.n	12be <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    12d4:	2100      	movs	r1, #0
    12d6:	0020      	movs	r0, r4
    12d8:	4b0b      	ldr	r3, [pc, #44]	; (1308 <usb_d_ep_halt+0x5c>)
    12da:	4798      	blx	r3
		if (rc < 0) {
    12dc:	2800      	cmp	r0, #0
    12de:	dbee      	blt.n	12be <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    12e0:	016d      	lsls	r5, r5, #5
    12e2:	4b0b      	ldr	r3, [pc, #44]	; (1310 <usb_d_ep_halt+0x64>)
    12e4:	195d      	adds	r5, r3, r5
    12e6:	2301      	movs	r3, #1
    12e8:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    12ea:	3302      	adds	r3, #2
    12ec:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    12ee:	69eb      	ldr	r3, [r5, #28]
    12f0:	2200      	movs	r2, #0
    12f2:	2103      	movs	r1, #3
    12f4:	0020      	movs	r0, r4
    12f6:	4798      	blx	r3
	return ERR_NONE;
    12f8:	2000      	movs	r0, #0
    12fa:	e7e0      	b.n	12be <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    12fc:	4b02      	ldr	r3, [pc, #8]	; (1308 <usb_d_ep_halt+0x5c>)
    12fe:	4798      	blx	r3
    1300:	e7dd      	b.n	12be <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    1302:	2012      	movs	r0, #18
    1304:	4240      	negs	r0, r0
    1306:	e7da      	b.n	12be <usb_d_ep_halt+0x12>
    1308:	00002861 	.word	0x00002861
    130c:	00000da1 	.word	0x00000da1
    1310:	200004f8 	.word	0x200004f8

00001314 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1314:	b570      	push	{r4, r5, r6, lr}
    1316:	000d      	movs	r5, r1
    1318:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    131a:	4b0f      	ldr	r3, [pc, #60]	; (1358 <usb_d_ep_register_callback+0x44>)
    131c:	4798      	blx	r3
    131e:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1320:	1e22      	subs	r2, r4, #0
    1322:	d008      	beq.n	1336 <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    1324:	2b00      	cmp	r3, #0
    1326:	db05      	blt.n	1334 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    1328:	2d01      	cmp	r5, #1
    132a:	d00b      	beq.n	1344 <usb_d_ep_register_callback+0x30>
    132c:	2d00      	cmp	r5, #0
    132e:	d004      	beq.n	133a <usb_d_ep_register_callback+0x26>
    1330:	2d02      	cmp	r5, #2
    1332:	d00c      	beq.n	134e <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    1334:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1336:	4a09      	ldr	r2, [pc, #36]	; (135c <usb_d_ep_register_callback+0x48>)
    1338:	e7f4      	b.n	1324 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    133a:	0140      	lsls	r0, r0, #5
    133c:	4b08      	ldr	r3, [pc, #32]	; (1360 <usb_d_ep_register_callback+0x4c>)
    133e:	1818      	adds	r0, r3, r0
    1340:	6142      	str	r2, [r0, #20]
		break;
    1342:	e7f7      	b.n	1334 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1344:	0140      	lsls	r0, r0, #5
    1346:	4b06      	ldr	r3, [pc, #24]	; (1360 <usb_d_ep_register_callback+0x4c>)
    1348:	1818      	adds	r0, r3, r0
    134a:	6182      	str	r2, [r0, #24]
		break;
    134c:	e7f2      	b.n	1334 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    134e:	0140      	lsls	r0, r0, #5
    1350:	4b03      	ldr	r3, [pc, #12]	; (1360 <usb_d_ep_register_callback+0x4c>)
    1352:	1818      	adds	r0, r3, r0
    1354:	61c2      	str	r2, [r0, #28]
		break;
    1356:	e7ed      	b.n	1334 <usb_d_ep_register_callback+0x20>
    1358:	00000da1 	.word	0x00000da1
    135c:	00000de5 	.word	0x00000de5
    1360:	200004f8 	.word	0x200004f8

00001364 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1364:	2800      	cmp	r0, #0
    1366:	d100      	bne.n	136a <assert+0x6>
		__asm("BKPT #0");
    1368:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    136a:	4770      	bx	lr

0000136c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    136c:	b570      	push	{r4, r5, r6, lr}
    136e:	0004      	movs	r4, r0
    1370:	000e      	movs	r6, r1
    1372:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    1374:	2800      	cmp	r0, #0
    1376:	d00b      	beq.n	1390 <ringbuffer_init+0x24>
    1378:	2900      	cmp	r1, #0
    137a:	d018      	beq.n	13ae <ringbuffer_init+0x42>
    137c:	2001      	movs	r0, #1
    137e:	2a00      	cmp	r2, #0
    1380:	d107      	bne.n	1392 <ringbuffer_init+0x26>
    1382:	2228      	movs	r2, #40	; 0x28
    1384:	490c      	ldr	r1, [pc, #48]	; (13b8 <ringbuffer_init+0x4c>)
    1386:	2000      	movs	r0, #0
    1388:	4b0c      	ldr	r3, [pc, #48]	; (13bc <ringbuffer_init+0x50>)
    138a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    138c:	1e6b      	subs	r3, r5, #1
    138e:	e007      	b.n	13a0 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
    1390:	2000      	movs	r0, #0
    1392:	2228      	movs	r2, #40	; 0x28
    1394:	4908      	ldr	r1, [pc, #32]	; (13b8 <ringbuffer_init+0x4c>)
    1396:	4b09      	ldr	r3, [pc, #36]	; (13bc <ringbuffer_init+0x50>)
    1398:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    139a:	1e6b      	subs	r3, r5, #1
    139c:	422b      	tst	r3, r5
    139e:	d108      	bne.n	13b2 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    13a0:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    13a2:	2300      	movs	r3, #0
    13a4:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    13a6:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    13a8:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    13aa:	2000      	movs	r0, #0
}
    13ac:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    13ae:	2000      	movs	r0, #0
    13b0:	e7ef      	b.n	1392 <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
    13b2:	200d      	movs	r0, #13
    13b4:	4240      	negs	r0, r0
    13b6:	e7f9      	b.n	13ac <ringbuffer_init+0x40>
    13b8:	00003db0 	.word	0x00003db0
    13bc:	00001365 	.word	0x00001365

000013c0 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    13c0:	b570      	push	{r4, r5, r6, lr}
    13c2:	0004      	movs	r4, r0
    13c4:	000d      	movs	r5, r1
	ASSERT(rb && data);
    13c6:	2800      	cmp	r0, #0
    13c8:	d015      	beq.n	13f6 <ringbuffer_get+0x36>
    13ca:	0008      	movs	r0, r1
    13cc:	1e43      	subs	r3, r0, #1
    13ce:	4198      	sbcs	r0, r3
    13d0:	b2c0      	uxtb	r0, r0
    13d2:	2240      	movs	r2, #64	; 0x40
    13d4:	490a      	ldr	r1, [pc, #40]	; (1400 <ringbuffer_get+0x40>)
    13d6:	4b0b      	ldr	r3, [pc, #44]	; (1404 <ringbuffer_get+0x44>)
    13d8:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    13da:	68a3      	ldr	r3, [r4, #8]
    13dc:	68e2      	ldr	r2, [r4, #12]
    13de:	429a      	cmp	r2, r3
    13e0:	d00b      	beq.n	13fa <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
    13e2:	6862      	ldr	r2, [r4, #4]
    13e4:	4013      	ands	r3, r2
    13e6:	6822      	ldr	r2, [r4, #0]
    13e8:	5cd3      	ldrb	r3, [r2, r3]
    13ea:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    13ec:	68a3      	ldr	r3, [r4, #8]
    13ee:	3301      	adds	r3, #1
    13f0:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    13f2:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    13f4:	bd70      	pop	{r4, r5, r6, pc}
    13f6:	2000      	movs	r0, #0
    13f8:	e7eb      	b.n	13d2 <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
    13fa:	200a      	movs	r0, #10
    13fc:	4240      	negs	r0, r0
    13fe:	e7f9      	b.n	13f4 <ringbuffer_get+0x34>
    1400:	00003db0 	.word	0x00003db0
    1404:	00001365 	.word	0x00001365

00001408 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1408:	b570      	push	{r4, r5, r6, lr}
    140a:	0004      	movs	r4, r0
    140c:	000d      	movs	r5, r1
	ASSERT(rb);
    140e:	1e43      	subs	r3, r0, #1
    1410:	4198      	sbcs	r0, r3
    1412:	b2c0      	uxtb	r0, r0
    1414:	2251      	movs	r2, #81	; 0x51
    1416:	490a      	ldr	r1, [pc, #40]	; (1440 <ringbuffer_put+0x38>)
    1418:	4b0a      	ldr	r3, [pc, #40]	; (1444 <ringbuffer_put+0x3c>)
    141a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    141c:	6863      	ldr	r3, [r4, #4]
    141e:	68e2      	ldr	r2, [r4, #12]
    1420:	4013      	ands	r3, r2
    1422:	6822      	ldr	r2, [r4, #0]
    1424:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1426:	68e3      	ldr	r3, [r4, #12]
    1428:	6861      	ldr	r1, [r4, #4]
    142a:	68a2      	ldr	r2, [r4, #8]
    142c:	1a9a      	subs	r2, r3, r2
    142e:	428a      	cmp	r2, r1
    1430:	d901      	bls.n	1436 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    1432:	1a59      	subs	r1, r3, r1
    1434:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    1436:	3301      	adds	r3, #1
    1438:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    143a:	2000      	movs	r0, #0
    143c:	bd70      	pop	{r4, r5, r6, pc}
    143e:	46c0      	nop			; (mov r8, r8)
    1440:	00003db0 	.word	0x00003db0
    1444:	00001365 	.word	0x00001365

00001448 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1448:	b510      	push	{r4, lr}
    144a:	0004      	movs	r4, r0
	ASSERT(rb);
    144c:	1e43      	subs	r3, r0, #1
    144e:	4198      	sbcs	r0, r3
    1450:	b2c0      	uxtb	r0, r0
    1452:	2267      	movs	r2, #103	; 0x67
    1454:	4903      	ldr	r1, [pc, #12]	; (1464 <ringbuffer_num+0x1c>)
    1456:	4b04      	ldr	r3, [pc, #16]	; (1468 <ringbuffer_num+0x20>)
    1458:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    145a:	68e0      	ldr	r0, [r4, #12]
    145c:	68a3      	ldr	r3, [r4, #8]
    145e:	1ac0      	subs	r0, r0, r3
}
    1460:	bd10      	pop	{r4, pc}
    1462:	46c0      	nop			; (mov r8, r8)
    1464:	00003db0 	.word	0x00003db0
    1468:	00001365 	.word	0x00001365

0000146c <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
    146c:	23fa      	movs	r3, #250	; 0xfa
    146e:	009b      	lsls	r3, r3, #2
    1470:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1472:	4770      	bx	lr

00001474 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1474:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1476:	4b06      	ldr	r3, [pc, #24]	; (1490 <_init_chip+0x1c>)
    1478:	685a      	ldr	r2, [r3, #4]
    147a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    147c:	4b05      	ldr	r3, [pc, #20]	; (1494 <_init_chip+0x20>)
    147e:	4798      	blx	r3
	_sysctrl_init_sources();
    1480:	4b05      	ldr	r3, [pc, #20]	; (1498 <_init_chip+0x24>)
    1482:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    1484:	4b05      	ldr	r3, [pc, #20]	; (149c <_init_chip+0x28>)
    1486:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1488:	20ff      	movs	r0, #255	; 0xff
    148a:	4b05      	ldr	r3, [pc, #20]	; (14a0 <_init_chip+0x2c>)
    148c:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    148e:	bd10      	pop	{r4, pc}
    1490:	41004000 	.word	0x41004000
    1494:	0000151d 	.word	0x0000151d
    1498:	00001aa5 	.word	0x00001aa5
    149c:	00001aed 	.word	0x00001aed
    14a0:	000014a5 	.word	0x000014a5

000014a4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    14a4:	07c3      	lsls	r3, r0, #31
    14a6:	d509      	bpl.n	14bc <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    14a8:	4b17      	ldr	r3, [pc, #92]	; (1508 <_gclk_init_generators_by_fref+0x64>)
    14aa:	2280      	movs	r2, #128	; 0x80
    14ac:	0052      	lsls	r2, r2, #1
    14ae:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    14b0:	4a16      	ldr	r2, [pc, #88]	; (150c <_gclk_init_generators_by_fref+0x68>)
    14b2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    14b4:	001a      	movs	r2, r3
    14b6:	7853      	ldrb	r3, [r2, #1]
    14b8:	09db      	lsrs	r3, r3, #7
    14ba:	d1fc      	bne.n	14b6 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    14bc:	0783      	lsls	r3, r0, #30
    14be:	d509      	bpl.n	14d4 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    14c0:	4b11      	ldr	r3, [pc, #68]	; (1508 <_gclk_init_generators_by_fref+0x64>)
    14c2:	2202      	movs	r2, #2
    14c4:	32ff      	adds	r2, #255	; 0xff
    14c6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    14c8:	4a11      	ldr	r2, [pc, #68]	; (1510 <_gclk_init_generators_by_fref+0x6c>)
    14ca:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    14cc:	001a      	movs	r2, r3
    14ce:	7853      	ldrb	r3, [r2, #1]
    14d0:	09db      	lsrs	r3, r3, #7
    14d2:	d1fc      	bne.n	14ce <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    14d4:	0743      	lsls	r3, r0, #29
    14d6:	d509      	bpl.n	14ec <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
    14d8:	4b0b      	ldr	r3, [pc, #44]	; (1508 <_gclk_init_generators_by_fref+0x64>)
    14da:	2281      	movs	r2, #129	; 0x81
    14dc:	0052      	lsls	r2, r2, #1
    14de:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    14e0:	4a0c      	ldr	r2, [pc, #48]	; (1514 <_gclk_init_generators_by_fref+0x70>)
    14e2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    14e4:	001a      	movs	r2, r3
    14e6:	7853      	ldrb	r3, [r2, #1]
    14e8:	09db      	lsrs	r3, r3, #7
    14ea:	d1fc      	bne.n	14e6 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    14ec:	0703      	lsls	r3, r0, #28
    14ee:	d509      	bpl.n	1504 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENDIV.reg = data;
    14f0:	4b05      	ldr	r3, [pc, #20]	; (1508 <_gclk_init_generators_by_fref+0x64>)
    14f2:	2204      	movs	r2, #4
    14f4:	32ff      	adds	r2, #255	; 0xff
    14f6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    14f8:	4a07      	ldr	r2, [pc, #28]	; (1518 <_gclk_init_generators_by_fref+0x74>)
    14fa:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    14fc:	001a      	movs	r2, r3
    14fe:	7853      	ldrb	r3, [r2, #1]
    1500:	09db      	lsrs	r3, r3, #7
    1502:	d1fc      	bne.n	14fe <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    1504:	4770      	bx	lr
    1506:	46c0      	nop			; (mov r8, r8)
    1508:	40000c00 	.word	0x40000c00
    150c:	00090600 	.word	0x00090600
    1510:	00010401 	.word	0x00010401
    1514:	00090702 	.word	0x00090702
    1518:	00010303 	.word	0x00010303

0000151c <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    151c:	4b06      	ldr	r3, [pc, #24]	; (1538 <_pm_init+0x1c>)
    151e:	7a1a      	ldrb	r2, [r3, #8]
    1520:	b2d2      	uxtb	r2, r2
    1522:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1524:	7a5a      	ldrb	r2, [r3, #9]
    1526:	b2d2      	uxtb	r2, r2
    1528:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    152a:	7a9a      	ldrb	r2, [r3, #10]
    152c:	b2d2      	uxtb	r2, r2
    152e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1530:	7ada      	ldrb	r2, [r3, #11]
    1532:	b2d2      	uxtb	r2, r2
    1534:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1536:	4770      	bx	lr
    1538:	40000400 	.word	0x40000400

0000153c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    153c:	4b06      	ldr	r3, [pc, #24]	; (1558 <_sercom_init_irq_param+0x1c>)
    153e:	4298      	cmp	r0, r3
    1540:	d003      	beq.n	154a <_sercom_init_irq_param+0xe>
		_sercom0_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM2) {
    1542:	4b06      	ldr	r3, [pc, #24]	; (155c <_sercom_init_irq_param+0x20>)
    1544:	4298      	cmp	r0, r3
    1546:	d003      	beq.n	1550 <_sercom_init_irq_param+0x14>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}
}
    1548:	4770      	bx	lr
		_sercom0_dev = (struct _spi_async_dev *)dev;
    154a:	4b05      	ldr	r3, [pc, #20]	; (1560 <_sercom_init_irq_param+0x24>)
    154c:	6019      	str	r1, [r3, #0]
    154e:	e7fb      	b.n	1548 <_sercom_init_irq_param+0xc>
		_sercom2_dev = (struct _usart_async_device *)dev;
    1550:	4b03      	ldr	r3, [pc, #12]	; (1560 <_sercom_init_irq_param+0x24>)
    1552:	6059      	str	r1, [r3, #4]
}
    1554:	e7f8      	b.n	1548 <_sercom_init_irq_param+0xc>
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	42000800 	.word	0x42000800
    155c:	42001000 	.word	0x42001000
    1560:	20000578 	.word	0x20000578

00001564 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1564:	b510      	push	{r4, lr}
    1566:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1568:	4b20      	ldr	r3, [pc, #128]	; (15ec <_usart_init+0x88>)
    156a:	18c3      	adds	r3, r0, r3
    156c:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    156e:	b2db      	uxtb	r3, r3
    1570:	2b02      	cmp	r3, #2
    1572:	d005      	beq.n	1580 <_usart_init+0x1c>
	ASSERT(false);
    1574:	2298      	movs	r2, #152	; 0x98
    1576:	0092      	lsls	r2, r2, #2
    1578:	491d      	ldr	r1, [pc, #116]	; (15f0 <_usart_init+0x8c>)
    157a:	2000      	movs	r0, #0
    157c:	4b1d      	ldr	r3, [pc, #116]	; (15f4 <_usart_init+0x90>)
    157e:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1580:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1582:	07db      	lsls	r3, r3, #31
    1584:	d418      	bmi.n	15b8 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1586:	2203      	movs	r2, #3
    1588:	69e3      	ldr	r3, [r4, #28]
    158a:	421a      	tst	r2, r3
    158c:	d1fc      	bne.n	1588 <_usart_init+0x24>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    158e:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1590:	079b      	lsls	r3, r3, #30
    1592:	d50b      	bpl.n	15ac <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1594:	6823      	ldr	r3, [r4, #0]
    1596:	2202      	movs	r2, #2
    1598:	4393      	bics	r3, r2
    159a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    159c:	3201      	adds	r2, #1
    159e:	69e3      	ldr	r3, [r4, #28]
    15a0:	421a      	tst	r2, r3
    15a2:	d1fc      	bne.n	159e <_usart_init+0x3a>
    15a4:	2202      	movs	r2, #2
    15a6:	69e3      	ldr	r3, [r4, #28]
    15a8:	421a      	tst	r2, r3
    15aa:	d1fc      	bne.n	15a6 <_usart_init+0x42>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    15ac:	2305      	movs	r3, #5
    15ae:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    15b0:	2203      	movs	r2, #3
    15b2:	69e3      	ldr	r3, [r4, #28]
    15b4:	421a      	tst	r2, r3
    15b6:	d1fc      	bne.n	15b2 <_usart_init+0x4e>
    15b8:	2201      	movs	r2, #1
    15ba:	69e3      	ldr	r3, [r4, #28]
    15bc:	421a      	tst	r2, r3
    15be:	d1fc      	bne.n	15ba <_usart_init+0x56>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    15c0:	4b0d      	ldr	r3, [pc, #52]	; (15f8 <_usart_init+0x94>)
    15c2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    15c4:	2203      	movs	r2, #3
    15c6:	69e3      	ldr	r3, [r4, #28]
    15c8:	421a      	tst	r2, r3
    15ca:	d1fc      	bne.n	15c6 <_usart_init+0x62>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    15cc:	23c0      	movs	r3, #192	; 0xc0
    15ce:	029b      	lsls	r3, r3, #10
    15d0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    15d2:	2207      	movs	r2, #7
    15d4:	69e3      	ldr	r3, [r4, #28]
    15d6:	421a      	tst	r2, r3
    15d8:	d1fc      	bne.n	15d4 <_usart_init+0x70>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    15da:	4b08      	ldr	r3, [pc, #32]	; (15fc <_usart_init+0x98>)
    15dc:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    15de:	2300      	movs	r3, #0
    15e0:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    15e2:	2230      	movs	r2, #48	; 0x30
    15e4:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    15e6:	2000      	movs	r0, #0
    15e8:	bd10      	pop	{r4, pc}
    15ea:	46c0      	nop			; (mov r8, r8)
    15ec:	bdfff800 	.word	0xbdfff800
    15f0:	00003dd4 	.word	0x00003dd4
    15f4:	00001365 	.word	0x00001365
    15f8:	40100004 	.word	0x40100004
    15fc:	ffffd8ad 	.word	0xffffd8ad

00001600 <_usart_async_init>:
{
    1600:	b570      	push	{r4, r5, r6, lr}
    1602:	0006      	movs	r6, r0
    1604:	000c      	movs	r4, r1
	ASSERT(device);
    1606:	1e43      	subs	r3, r0, #1
    1608:	4198      	sbcs	r0, r3
    160a:	b2c0      	uxtb	r0, r0
    160c:	22c6      	movs	r2, #198	; 0xc6
    160e:	4913      	ldr	r1, [pc, #76]	; (165c <_usart_async_init+0x5c>)
    1610:	4b13      	ldr	r3, [pc, #76]	; (1660 <_usart_async_init+0x60>)
    1612:	4798      	blx	r3
	init_status = _usart_init(hw);
    1614:	0020      	movs	r0, r4
    1616:	4b13      	ldr	r3, [pc, #76]	; (1664 <_usart_async_init+0x64>)
    1618:	4798      	blx	r3
    161a:	1e05      	subs	r5, r0, #0
	if (init_status) {
    161c:	d001      	beq.n	1622 <_usart_async_init+0x22>
}
    161e:	0028      	movs	r0, r5
    1620:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    1622:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    1624:	0031      	movs	r1, r6
    1626:	0020      	movs	r0, r4
    1628:	4b0f      	ldr	r3, [pc, #60]	; (1668 <_usart_async_init+0x68>)
    162a:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    162c:	4b0f      	ldr	r3, [pc, #60]	; (166c <_usart_async_init+0x6c>)
    162e:	469c      	mov	ip, r3
    1630:	4464      	add	r4, ip
    1632:	0aa4      	lsrs	r4, r4, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1634:	3409      	adds	r4, #9
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1636:	b2e3      	uxtb	r3, r4
    1638:	0622      	lsls	r2, r4, #24
    163a:	d4f0      	bmi.n	161e <_usart_async_init+0x1e>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    163c:	221f      	movs	r2, #31
    163e:	401a      	ands	r2, r3
    1640:	2301      	movs	r3, #1
    1642:	4093      	lsls	r3, r2
    1644:	4a0a      	ldr	r2, [pc, #40]	; (1670 <_usart_async_init+0x70>)
    1646:	2180      	movs	r1, #128	; 0x80
    1648:	5053      	str	r3, [r2, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    164a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    164e:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1652:	3101      	adds	r1, #1
    1654:	31ff      	adds	r1, #255	; 0xff
    1656:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1658:	6013      	str	r3, [r2, #0]
    165a:	e7e0      	b.n	161e <_usart_async_init+0x1e>
    165c:	00003dd4 	.word	0x00003dd4
    1660:	00001365 	.word	0x00001365
    1664:	00001565 	.word	0x00001565
    1668:	0000153d 	.word	0x0000153d
    166c:	bdfff800 	.word	0xbdfff800
    1670:	e000e100 	.word	0xe000e100

00001674 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1674:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1676:	6813      	ldr	r3, [r2, #0]
    1678:	2102      	movs	r1, #2
    167a:	430b      	orrs	r3, r1
    167c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    167e:	3101      	adds	r1, #1
    1680:	69d3      	ldr	r3, [r2, #28]
    1682:	4219      	tst	r1, r3
    1684:	d1fc      	bne.n	1680 <_usart_async_enable+0xc>
}
    1686:	4770      	bx	lr

00001688 <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    1688:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    168a:	6813      	ldr	r3, [r2, #0]
    168c:	2102      	movs	r1, #2
    168e:	438b      	bics	r3, r1
    1690:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1692:	3101      	adds	r1, #1
    1694:	69d3      	ldr	r3, [r2, #28]
    1696:	4219      	tst	r1, r3
    1698:	d1fc      	bne.n	1694 <_usart_async_disable+0xc>
}
    169a:	4770      	bx	lr

0000169c <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    169c:	6983      	ldr	r3, [r0, #24]
    169e:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    16a0:	8519      	strh	r1, [r3, #40]	; 0x28
}
    16a2:	4770      	bx	lr

000016a4 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    16a4:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    16a6:	2201      	movs	r2, #1
    16a8:	759a      	strb	r2, [r3, #22]
}
    16aa:	4770      	bx	lr

000016ac <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    16ac:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    16ae:	2202      	movs	r2, #2
    16b0:	759a      	strb	r2, [r3, #22]
}
    16b2:	4770      	bx	lr

000016b4 <_usart_async_set_irq_state>:
{
    16b4:	b570      	push	{r4, r5, r6, lr}
    16b6:	0004      	movs	r4, r0
    16b8:	000d      	movs	r5, r1
    16ba:	0016      	movs	r6, r2
	ASSERT(device);
    16bc:	1e43      	subs	r3, r0, #1
    16be:	4198      	sbcs	r0, r3
    16c0:	b2c0      	uxtb	r0, r0
    16c2:	2288      	movs	r2, #136	; 0x88
    16c4:	0092      	lsls	r2, r2, #2
    16c6:	4916      	ldr	r1, [pc, #88]	; (1720 <_usart_async_set_irq_state+0x6c>)
    16c8:	4b16      	ldr	r3, [pc, #88]	; (1724 <_usart_async_set_irq_state+0x70>)
    16ca:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    16cc:	2302      	movs	r3, #2
    16ce:	002a      	movs	r2, r5
    16d0:	439a      	bics	r2, r3
    16d2:	d10e      	bne.n	16f2 <_usart_async_set_irq_state+0x3e>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    16d4:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    16d6:	2e00      	cmp	r6, #0
    16d8:	d105      	bne.n	16e6 <_usart_async_set_irq_state+0x32>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    16da:	2201      	movs	r2, #1
    16dc:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    16de:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    16e0:	3201      	adds	r2, #1
    16e2:	751a      	strb	r2, [r3, #20]
}
    16e4:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    16e6:	2201      	movs	r2, #1
    16e8:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    16ea:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    16ec:	3201      	adds	r2, #1
    16ee:	759a      	strb	r2, [r3, #22]
    16f0:	e7f8      	b.n	16e4 <_usart_async_set_irq_state+0x30>
	} else if (USART_ASYNC_RX_DONE == type) {
    16f2:	2d01      	cmp	r5, #1
    16f4:	d007      	beq.n	1706 <_usart_async_set_irq_state+0x52>
	} else if (USART_ASYNC_ERROR == type) {
    16f6:	2d03      	cmp	r5, #3
    16f8:	d1f4      	bne.n	16e4 <_usart_async_set_irq_state+0x30>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    16fa:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    16fc:	2e00      	cmp	r6, #0
    16fe:	d00b      	beq.n	1718 <_usart_async_set_irq_state+0x64>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    1700:	2280      	movs	r2, #128	; 0x80
    1702:	759a      	strb	r2, [r3, #22]
}
    1704:	e7ee      	b.n	16e4 <_usart_async_set_irq_state+0x30>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1706:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1708:	2e00      	cmp	r6, #0
    170a:	d102      	bne.n	1712 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    170c:	2204      	movs	r2, #4
    170e:	751a      	strb	r2, [r3, #20]
    1710:	e7e8      	b.n	16e4 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    1712:	2204      	movs	r2, #4
    1714:	759a      	strb	r2, [r3, #22]
    1716:	e7e5      	b.n	16e4 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1718:	2280      	movs	r2, #128	; 0x80
    171a:	751a      	strb	r2, [r3, #20]
    171c:	e7e2      	b.n	16e4 <_usart_async_set_irq_state+0x30>
    171e:	46c0      	nop			; (mov r8, r8)
    1720:	00003dd4 	.word	0x00003dd4
    1724:	00001365 	.word	0x00001365

00001728 <SERCOM0_Handler>:
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}

void SERCOM0_Handler(void)
{
    1728:	b510      	push	{r4, lr}
	_spi_handler(_sercom0_dev);
    172a:	4b12      	ldr	r3, [pc, #72]	; (1774 <SERCOM0_Handler+0x4c>)
    172c:	6818      	ldr	r0, [r3, #0]
	void *                      hw = dev->prvt;
    172e:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1730:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    1732:	7d93      	ldrb	r3, [r2, #22]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    1734:	400b      	ands	r3, r1
	if (st & SERCOM_SPI_INTFLAG_DRE) {
    1736:	07d9      	lsls	r1, r3, #31
    1738:	d407      	bmi.n	174a <SERCOM0_Handler+0x22>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    173a:	0759      	lsls	r1, r3, #29
    173c:	d408      	bmi.n	1750 <SERCOM0_Handler+0x28>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    173e:	0799      	lsls	r1, r3, #30
    1740:	d409      	bmi.n	1756 <SERCOM0_Handler+0x2e>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    1742:	b25b      	sxtb	r3, r3
    1744:	2b00      	cmp	r3, #0
    1746:	db0b      	blt.n	1760 <SERCOM0_Handler+0x38>
}
    1748:	bd10      	pop	{r4, pc}
		dev->callbacks.tx(dev);
    174a:	6883      	ldr	r3, [r0, #8]
    174c:	4798      	blx	r3
    174e:	e7fb      	b.n	1748 <SERCOM0_Handler+0x20>
		dev->callbacks.rx(dev);
    1750:	68c3      	ldr	r3, [r0, #12]
    1752:	4798      	blx	r3
    1754:	e7f8      	b.n	1748 <SERCOM0_Handler+0x20>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1756:	2302      	movs	r3, #2
    1758:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    175a:	6903      	ldr	r3, [r0, #16]
    175c:	4798      	blx	r3
    175e:	e7f3      	b.n	1748 <SERCOM0_Handler+0x20>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1760:	2304      	movs	r3, #4
    1762:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1764:	337c      	adds	r3, #124	; 0x7c
    1766:	7613      	strb	r3, [r2, #24]
		dev->callbacks.err(dev, ERR_OVERFLOW);
    1768:	6943      	ldr	r3, [r0, #20]
    176a:	2113      	movs	r1, #19
    176c:	4249      	negs	r1, r1
    176e:	4798      	blx	r3
}
    1770:	e7ea      	b.n	1748 <SERCOM0_Handler+0x20>
    1772:	46c0      	nop			; (mov r8, r8)
    1774:	20000578 	.word	0x20000578

00001778 <SERCOM2_Handler>:

void SERCOM2_Handler(void)
{
    1778:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    177a:	4b19      	ldr	r3, [pc, #100]	; (17e0 <SERCOM2_Handler+0x68>)
    177c:	6858      	ldr	r0, [r3, #4]
	void *hw = device->hw;
    177e:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1780:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1782:	07db      	lsls	r3, r3, #31
    1784:	d502      	bpl.n	178c <SERCOM2_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1786:	7da3      	ldrb	r3, [r4, #22]
    1788:	07db      	lsls	r3, r3, #31
    178a:	d40f      	bmi.n	17ac <SERCOM2_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    178c:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    178e:	079b      	lsls	r3, r3, #30
    1790:	d502      	bpl.n	1798 <SERCOM2_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1792:	7da3      	ldrb	r3, [r4, #22]
    1794:	079b      	lsls	r3, r3, #30
    1796:	d40e      	bmi.n	17b6 <SERCOM2_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1798:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    179a:	075b      	lsls	r3, r3, #29
    179c:	d515      	bpl.n	17ca <SERCOM2_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    179e:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    17a0:	2337      	movs	r3, #55	; 0x37
    17a2:	421a      	tst	r2, r3
    17a4:	d00c      	beq.n	17c0 <SERCOM2_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    17a6:	3308      	adds	r3, #8
    17a8:	8363      	strh	r3, [r4, #26]
}
    17aa:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    17ac:	2301      	movs	r3, #1
    17ae:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    17b0:	6803      	ldr	r3, [r0, #0]
    17b2:	4798      	blx	r3
    17b4:	e7f9      	b.n	17aa <SERCOM2_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    17b6:	2302      	movs	r3, #2
    17b8:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    17ba:	6883      	ldr	r3, [r0, #8]
    17bc:	4798      	blx	r3
    17be:	e7f4      	b.n	17aa <SERCOM2_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
    17c0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    17c2:	b2c9      	uxtb	r1, r1
    17c4:	6843      	ldr	r3, [r0, #4]
    17c6:	4798      	blx	r3
    17c8:	e7ef      	b.n	17aa <SERCOM2_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    17ca:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    17cc:	09db      	lsrs	r3, r3, #7
    17ce:	d0ec      	beq.n	17aa <SERCOM2_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    17d0:	2380      	movs	r3, #128	; 0x80
    17d2:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    17d4:	68c3      	ldr	r3, [r0, #12]
    17d6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    17d8:	8b63      	ldrh	r3, [r4, #26]
    17da:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    17dc:	8363      	strh	r3, [r4, #26]
}
    17de:	e7e4      	b.n	17aa <SERCOM2_Handler+0x32>
    17e0:	20000578 	.word	0x20000578

000017e4 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    17e4:	b570      	push	{r4, r5, r6, lr}
    17e6:	0005      	movs	r5, r0
    17e8:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    17ea:	4b35      	ldr	r3, [pc, #212]	; (18c0 <_spi_m_sync_init+0xdc>)
    17ec:	18cb      	adds	r3, r1, r3
    17ee:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    17f0:	b2db      	uxtb	r3, r3
    17f2:	2b00      	cmp	r3, #0
    17f4:	d00b      	beq.n	180e <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    17f6:	2800      	cmp	r0, #0
    17f8:	d051      	beq.n	189e <_spi_m_sync_init+0xba>
    17fa:	1e60      	subs	r0, r4, #1
    17fc:	4184      	sbcs	r4, r0
    17fe:	b2e0      	uxtb	r0, r4
    1800:	4a30      	ldr	r2, [pc, #192]	; (18c4 <_spi_m_sync_init+0xe0>)
    1802:	4931      	ldr	r1, [pc, #196]	; (18c8 <_spi_m_sync_init+0xe4>)
    1804:	4b31      	ldr	r3, [pc, #196]	; (18cc <_spi_m_sync_init+0xe8>)
    1806:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1808:	200d      	movs	r0, #13
    180a:	4240      	negs	r0, r0
    180c:	e046      	b.n	189c <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    180e:	2800      	cmp	r0, #0
    1810:	d14d      	bne.n	18ae <_spi_m_sync_init+0xca>
    1812:	4a2c      	ldr	r2, [pc, #176]	; (18c4 <_spi_m_sync_init+0xe0>)
    1814:	492c      	ldr	r1, [pc, #176]	; (18c8 <_spi_m_sync_init+0xe4>)
    1816:	2000      	movs	r0, #0
    1818:	4b2c      	ldr	r3, [pc, #176]	; (18cc <_spi_m_sync_init+0xe8>)
    181a:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    181c:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    181e:	07db      	lsls	r3, r3, #31
    1820:	d418      	bmi.n	1854 <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1822:	2203      	movs	r2, #3
    1824:	69e3      	ldr	r3, [r4, #28]
    1826:	421a      	tst	r2, r3
    1828:	d1fc      	bne.n	1824 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    182a:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    182c:	079b      	lsls	r3, r3, #30
    182e:	d50b      	bpl.n	1848 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1830:	6823      	ldr	r3, [r4, #0]
    1832:	2202      	movs	r2, #2
    1834:	4393      	bics	r3, r2
    1836:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1838:	3201      	adds	r2, #1
    183a:	69e3      	ldr	r3, [r4, #28]
    183c:	421a      	tst	r2, r3
    183e:	d1fc      	bne.n	183a <_spi_m_sync_init+0x56>
    1840:	2202      	movs	r2, #2
    1842:	69e3      	ldr	r3, [r4, #28]
    1844:	421a      	tst	r2, r3
    1846:	d1fc      	bne.n	1842 <_spi_m_sync_init+0x5e>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1848:	230d      	movs	r3, #13
    184a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    184c:	2203      	movs	r2, #3
    184e:	69e3      	ldr	r3, [r4, #28]
    1850:	421a      	tst	r2, r3
    1852:	d1fc      	bne.n	184e <_spi_m_sync_init+0x6a>
    1854:	2201      	movs	r2, #1
    1856:	69e3      	ldr	r3, [r4, #28]
    1858:	421a      	tst	r2, r3
    185a:	d1fc      	bne.n	1856 <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    185c:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    185e:	0020      	movs	r0, r4
    1860:	1e43      	subs	r3, r0, #1
    1862:	4198      	sbcs	r0, r3
    1864:	b2c0      	uxtb	r0, r0
    1866:	4a1a      	ldr	r2, [pc, #104]	; (18d0 <_spi_m_sync_init+0xec>)
    1868:	4917      	ldr	r1, [pc, #92]	; (18c8 <_spi_m_sync_init+0xe4>)
    186a:	4b18      	ldr	r3, [pc, #96]	; (18cc <_spi_m_sync_init+0xe8>)
    186c:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    186e:	4b19      	ldr	r3, [pc, #100]	; (18d4 <_spi_m_sync_init+0xf0>)
    1870:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1872:	2203      	movs	r2, #3
    1874:	69e3      	ldr	r3, [r4, #28]
    1876:	421a      	tst	r2, r3
    1878:	d1fc      	bne.n	1874 <_spi_m_sync_init+0x90>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    187a:	2380      	movs	r3, #128	; 0x80
    187c:	029b      	lsls	r3, r3, #10
    187e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1880:	2207      	movs	r2, #7
    1882:	69e3      	ldr	r3, [r4, #28]
    1884:	421a      	tst	r2, r3
    1886:	d1fc      	bne.n	1882 <_spi_m_sync_init+0x9e>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1888:	23ff      	movs	r3, #255	; 0xff
    188a:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    188c:	2200      	movs	r2, #0
    188e:	3bcf      	subs	r3, #207	; 0xcf
    1890:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1892:	3b2f      	subs	r3, #47	; 0x2f
    1894:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1896:	4b10      	ldr	r3, [pc, #64]	; (18d8 <_spi_m_sync_init+0xf4>)
    1898:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    189a:	2000      	movs	r0, #0
}
    189c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    189e:	4a09      	ldr	r2, [pc, #36]	; (18c4 <_spi_m_sync_init+0xe0>)
    18a0:	4909      	ldr	r1, [pc, #36]	; (18c8 <_spi_m_sync_init+0xe4>)
    18a2:	2000      	movs	r0, #0
    18a4:	4b09      	ldr	r3, [pc, #36]	; (18cc <_spi_m_sync_init+0xe8>)
    18a6:	4798      	blx	r3
		return ERR_INVALID_ARG;
    18a8:	200d      	movs	r0, #13
    18aa:	4240      	negs	r0, r0
    18ac:	e7f6      	b.n	189c <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    18ae:	0008      	movs	r0, r1
    18b0:	1e43      	subs	r3, r0, #1
    18b2:	4198      	sbcs	r0, r3
    18b4:	b2c0      	uxtb	r0, r0
    18b6:	4a03      	ldr	r2, [pc, #12]	; (18c4 <_spi_m_sync_init+0xe0>)
    18b8:	4903      	ldr	r1, [pc, #12]	; (18c8 <_spi_m_sync_init+0xe4>)
    18ba:	4b04      	ldr	r3, [pc, #16]	; (18cc <_spi_m_sync_init+0xe8>)
    18bc:	4798      	blx	r3
    18be:	e7ad      	b.n	181c <_spi_m_sync_init+0x38>
    18c0:	bdfff800 	.word	0xbdfff800
    18c4:	0000096d 	.word	0x0000096d
    18c8:	00003dd4 	.word	0x00003dd4
    18cc:	00001365 	.word	0x00001365
    18d0:	00000913 	.word	0x00000913
    18d4:	0011000c 	.word	0x0011000c
    18d8:	000001ff 	.word	0x000001ff

000018dc <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    18dc:	b570      	push	{r4, r5, r6, lr}
    18de:	0005      	movs	r5, r0
    18e0:	000c      	movs	r4, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    18e2:	4b13      	ldr	r3, [pc, #76]	; (1930 <_spi_m_async_init+0x54>)
    18e4:	4798      	blx	r3

	if (rc < 0) {
    18e6:	2800      	cmp	r0, #0
    18e8:	db1e      	blt.n	1928 <_spi_m_async_init+0x4c>
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
    18ea:	0029      	movs	r1, r5
    18ec:	0020      	movs	r0, r4
    18ee:	4b11      	ldr	r3, [pc, #68]	; (1934 <_spi_m_async_init+0x58>)
    18f0:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    18f2:	2300      	movs	r3, #0
    18f4:	612b      	str	r3, [r5, #16]
	spid->callbacks.rx       = NULL;
    18f6:	60eb      	str	r3, [r5, #12]
	spid->callbacks.tx       = NULL;
    18f8:	60ab      	str	r3, [r5, #8]
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    18fa:	4b0f      	ldr	r3, [pc, #60]	; (1938 <_spi_m_async_init+0x5c>)
    18fc:	469c      	mov	ip, r3
    18fe:	4464      	add	r4, ip
    1900:	0aa4      	lsrs	r4, r4, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1902:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    1904:	b2e3      	uxtb	r3, r4
    1906:	0622      	lsls	r2, r4, #24
    1908:	d40f      	bmi.n	192a <_spi_m_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    190a:	221f      	movs	r2, #31
    190c:	401a      	ands	r2, r3
    190e:	2301      	movs	r3, #1
    1910:	4093      	lsls	r3, r2
    1912:	4a0a      	ldr	r2, [pc, #40]	; (193c <_spi_m_async_init+0x60>)
    1914:	2180      	movs	r1, #128	; 0x80
    1916:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1918:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    191c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1920:	3101      	adds	r1, #1
    1922:	31ff      	adds	r1, #255	; 0xff
    1924:	5053      	str	r3, [r2, r1]
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));

	return ERR_NONE;
    1926:	2000      	movs	r0, #0
}
    1928:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    192a:	2000      	movs	r0, #0
    192c:	e7fc      	b.n	1928 <_spi_m_async_init+0x4c>
    192e:	46c0      	nop			; (mov r8, r8)
    1930:	000017e5 	.word	0x000017e5
    1934:	0000153d 	.word	0x0000153d
    1938:	bdfff800 	.word	0xbdfff800
    193c:	e000e100 	.word	0xe000e100

00001940 <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    1940:	b570      	push	{r4, r5, r6, lr}
    1942:	000d      	movs	r5, r1
	void *hw = dev->prvt;
    1944:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    1946:	2800      	cmp	r0, #0
    1948:	d00d      	beq.n	1966 <_spi_m_async_enable_tx+0x26>
    194a:	0020      	movs	r0, r4
    194c:	1e43      	subs	r3, r0, #1
    194e:	4198      	sbcs	r0, r3
    1950:	b2c0      	uxtb	r0, r0
    1952:	4a07      	ldr	r2, [pc, #28]	; (1970 <_spi_m_async_enable_tx+0x30>)
    1954:	4907      	ldr	r1, [pc, #28]	; (1974 <_spi_m_async_enable_tx+0x34>)
    1956:	4b08      	ldr	r3, [pc, #32]	; (1978 <_spi_m_async_enable_tx+0x38>)
    1958:	4798      	blx	r3

	if (state) {
    195a:	2d00      	cmp	r5, #0
    195c:	d105      	bne.n	196a <_spi_m_async_enable_tx+0x2a>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    195e:	2301      	movs	r3, #1
    1960:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    1962:	2000      	movs	r0, #0
    1964:	bd70      	pop	{r4, r5, r6, pc}
    1966:	2000      	movs	r0, #0
    1968:	e7f3      	b.n	1952 <_spi_m_async_enable_tx+0x12>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    196a:	2301      	movs	r3, #1
    196c:	75a3      	strb	r3, [r4, #22]
    196e:	e7f8      	b.n	1962 <_spi_m_async_enable_tx+0x22>
    1970:	00000af9 	.word	0x00000af9
    1974:	00003dd4 	.word	0x00003dd4
    1978:	00001365 	.word	0x00001365

0000197c <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    197c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    197e:	000e      	movs	r6, r1
	void *hw = dev->prvt;
    1980:	6805      	ldr	r5, [r0, #0]

	ASSERT(dev);
    1982:	4c0c      	ldr	r4, [pc, #48]	; (19b4 <_spi_m_async_enable_rx+0x38>)
    1984:	1e43      	subs	r3, r0, #1
    1986:	4198      	sbcs	r0, r3
    1988:	b2c0      	uxtb	r0, r0
    198a:	4a0b      	ldr	r2, [pc, #44]	; (19b8 <_spi_m_async_enable_rx+0x3c>)
    198c:	0021      	movs	r1, r4
    198e:	4f0b      	ldr	r7, [pc, #44]	; (19bc <_spi_m_async_enable_rx+0x40>)
    1990:	47b8      	blx	r7
	ASSERT(hw);
    1992:	0028      	movs	r0, r5
    1994:	1e43      	subs	r3, r0, #1
    1996:	4198      	sbcs	r0, r3
    1998:	b2c0      	uxtb	r0, r0
    199a:	4a09      	ldr	r2, [pc, #36]	; (19c0 <_spi_m_async_enable_rx+0x44>)
    199c:	0021      	movs	r1, r4
    199e:	47b8      	blx	r7

	if (state) {
    19a0:	2e00      	cmp	r6, #0
    19a2:	d103      	bne.n	19ac <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    19a4:	2304      	movs	r3, #4
    19a6:	752b      	strb	r3, [r5, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    19a8:	2000      	movs	r0, #0
    19aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    19ac:	2304      	movs	r3, #4
    19ae:	75ab      	strb	r3, [r5, #22]
    19b0:	e7fa      	b.n	19a8 <_spi_m_async_enable_rx+0x2c>
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	00003dd4 	.word	0x00003dd4
    19b8:	00000b0d 	.word	0x00000b0d
    19bc:	00001365 	.word	0x00001365
    19c0:	00000b0e 	.word	0x00000b0e

000019c4 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    19c4:	b570      	push	{r4, r5, r6, lr}
    19c6:	0004      	movs	r4, r0
    19c8:	000d      	movs	r5, r1
	ASSERT(dev && dev->prvt);
    19ca:	2800      	cmp	r0, #0
    19cc:	d00f      	beq.n	19ee <_spi_m_async_enable_tx_complete+0x2a>
    19ce:	6800      	ldr	r0, [r0, #0]
    19d0:	1e43      	subs	r3, r0, #1
    19d2:	4198      	sbcs	r0, r3
    19d4:	b2c0      	uxtb	r0, r0
    19d6:	22b2      	movs	r2, #178	; 0xb2
    19d8:	0112      	lsls	r2, r2, #4
    19da:	4908      	ldr	r1, [pc, #32]	; (19fc <_spi_m_async_enable_tx_complete+0x38>)
    19dc:	4b08      	ldr	r3, [pc, #32]	; (1a00 <_spi_m_async_enable_tx_complete+0x3c>)
    19de:	4798      	blx	r3

	if (state) {
    19e0:	2d00      	cmp	r5, #0
    19e2:	d106      	bne.n	19f2 <_spi_m_async_enable_tx_complete+0x2e>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    19e4:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    19e6:	2202      	movs	r2, #2
    19e8:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    19ea:	2000      	movs	r0, #0
    19ec:	bd70      	pop	{r4, r5, r6, pc}
    19ee:	2000      	movs	r0, #0
    19f0:	e7f1      	b.n	19d6 <_spi_m_async_enable_tx_complete+0x12>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    19f2:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    19f4:	2202      	movs	r2, #2
    19f6:	759a      	strb	r2, [r3, #22]
    19f8:	e7f7      	b.n	19ea <_spi_m_async_enable_tx_complete+0x26>
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	00003dd4 	.word	0x00003dd4
    1a00:	00001365 	.word	0x00001365

00001a04 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    1a04:	b570      	push	{r4, r5, r6, lr}
    1a06:	0004      	movs	r4, r0
    1a08:	000d      	movs	r5, r1
	ASSERT(dev && dev->prvt);
    1a0a:	2800      	cmp	r0, #0
    1a0c:	d00b      	beq.n	1a26 <_spi_m_async_write_one+0x22>
    1a0e:	6800      	ldr	r0, [r0, #0]
    1a10:	1e43      	subs	r3, r0, #1
    1a12:	4198      	sbcs	r0, r3
    1a14:	b2c0      	uxtb	r0, r0
    1a16:	4a05      	ldr	r2, [pc, #20]	; (1a2c <_spi_m_async_write_one+0x28>)
    1a18:	4905      	ldr	r1, [pc, #20]	; (1a30 <_spi_m_async_write_one+0x2c>)
    1a1a:	4b06      	ldr	r3, [pc, #24]	; (1a34 <_spi_m_async_write_one+0x30>)
    1a1c:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    1a1e:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1a20:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    1a22:	2000      	movs	r0, #0
    1a24:	bd70      	pop	{r4, r5, r6, pc}
    1a26:	2000      	movs	r0, #0
    1a28:	e7f5      	b.n	1a16 <_spi_m_async_write_one+0x12>
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	00000b32 	.word	0x00000b32
    1a30:	00003dd4 	.word	0x00003dd4
    1a34:	00001365 	.word	0x00001365

00001a38 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    1a38:	b510      	push	{r4, lr}
    1a3a:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    1a3c:	d00b      	beq.n	1a56 <_spi_m_async_read_one+0x1e>
    1a3e:	6800      	ldr	r0, [r0, #0]
    1a40:	1e43      	subs	r3, r0, #1
    1a42:	4198      	sbcs	r0, r3
    1a44:	b2c0      	uxtb	r0, r0
    1a46:	4a05      	ldr	r2, [pc, #20]	; (1a5c <_spi_m_async_read_one+0x24>)
    1a48:	4905      	ldr	r1, [pc, #20]	; (1a60 <_spi_m_async_read_one+0x28>)
    1a4a:	4b06      	ldr	r3, [pc, #24]	; (1a64 <_spi_m_async_read_one+0x2c>)
    1a4c:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    1a4e:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    1a50:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1a52:	b280      	uxth	r0, r0
}
    1a54:	bd10      	pop	{r4, pc}
    1a56:	2000      	movs	r0, #0
    1a58:	e7f5      	b.n	1a46 <_spi_m_async_read_one+0xe>
    1a5a:	46c0      	nop			; (mov r8, r8)
    1a5c:	00000b4d 	.word	0x00000b4d
    1a60:	00003dd4 	.word	0x00003dd4
    1a64:	00001365 	.word	0x00001365

00001a68 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    1a68:	b570      	push	{r4, r5, r6, lr}
    1a6a:	0004      	movs	r4, r0
    1a6c:	000d      	movs	r5, r1
    1a6e:	0016      	movs	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    1a70:	2800      	cmp	r0, #0
    1a72:	d00f      	beq.n	1a94 <_spi_m_async_register_callback+0x2c>
    1a74:	2000      	movs	r0, #0
    1a76:	2303      	movs	r3, #3
    1a78:	428b      	cmp	r3, r1
    1a7a:	4140      	adcs	r0, r0
    1a7c:	b2c0      	uxtb	r0, r0
    1a7e:	2301      	movs	r3, #1
    1a80:	4018      	ands	r0, r3
    1a82:	4a05      	ldr	r2, [pc, #20]	; (1a98 <_spi_m_async_register_callback+0x30>)
    1a84:	4905      	ldr	r1, [pc, #20]	; (1a9c <_spi_m_async_register_callback+0x34>)
    1a86:	4b06      	ldr	r3, [pc, #24]	; (1aa0 <_spi_m_async_register_callback+0x38>)
    1a88:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    1a8a:	00ad      	lsls	r5, r5, #2
    1a8c:	1964      	adds	r4, r4, r5
    1a8e:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    1a90:	2000      	movs	r0, #0
    1a92:	bd70      	pop	{r4, r5, r6, pc}
    1a94:	2000      	movs	r0, #0
    1a96:	e7f2      	b.n	1a7e <_spi_m_async_register_callback+0x16>
    1a98:	00000b66 	.word	0x00000b66
    1a9c:	00003dd4 	.word	0x00003dd4
    1aa0:	00001365 	.word	0x00001365

00001aa4 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1aa4:	4b0e      	ldr	r3, [pc, #56]	; (1ae0 <_sysctrl_init_sources+0x3c>)
    1aa6:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1aa8:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1aaa:	480e      	ldr	r0, [pc, #56]	; (1ae4 <_sysctrl_init_sources+0x40>)
    1aac:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1aae:	0f89      	lsrs	r1, r1, #30
    1ab0:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    1ab2:	480d      	ldr	r0, [pc, #52]	; (1ae8 <_sysctrl_init_sources+0x44>)
    1ab4:	4301      	orrs	r1, r0
    1ab6:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1ab8:	621a      	str	r2, [r3, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    1aba:	699a      	ldr	r2, [r3, #24]
	((Sysctrl *)hw)->OSC32K.reg = data;
    1abc:	220a      	movs	r2, #10
    1abe:	619a      	str	r2, [r3, #24]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    1ac0:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    1ac2:	3a06      	subs	r2, #6
    1ac4:	68cb      	ldr	r3, [r1, #12]
    1ac6:	421a      	tst	r2, r3
    1ac8:	d0fc      	beq.n	1ac4 <_sysctrl_init_sources+0x20>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1aca:	4905      	ldr	r1, [pc, #20]	; (1ae0 <_sysctrl_init_sources+0x3c>)
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1acc:	2208      	movs	r2, #8
    1ace:	68cb      	ldr	r3, [r1, #12]
    1ad0:	421a      	tst	r2, r3
    1ad2:	d0fc      	beq.n	1ace <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1ad4:	4a02      	ldr	r2, [pc, #8]	; (1ae0 <_sysctrl_init_sources+0x3c>)
    1ad6:	6a13      	ldr	r3, [r2, #32]
    1ad8:	2180      	movs	r1, #128	; 0x80
    1ada:	430b      	orrs	r3, r1
    1adc:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1ade:	4770      	bx	lr
    1ae0:	40000800 	.word	0x40000800
    1ae4:	0fff0000 	.word	0x0fff0000
    1ae8:	00000302 	.word	0x00000302

00001aec <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1aec:	2202      	movs	r2, #2
    1aee:	4b19      	ldr	r3, [pc, #100]	; (1b54 <_sysctrl_init_referenced_generators+0x68>)
    1af0:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1af2:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1af4:	320e      	adds	r2, #14
    1af6:	68cb      	ldr	r3, [r1, #12]
    1af8:	421a      	tst	r2, r3
    1afa:	d0fc      	beq.n	1af6 <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1afc:	4a16      	ldr	r2, [pc, #88]	; (1b58 <_sysctrl_init_referenced_generators+0x6c>)
    1afe:	4b15      	ldr	r3, [pc, #84]	; (1b54 <_sysctrl_init_referenced_generators+0x68>)
    1b00:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1b02:	4b16      	ldr	r3, [pc, #88]	; (1b5c <_sysctrl_init_referenced_generators+0x70>)
    1b04:	681b      	ldr	r3, [r3, #0]
    1b06:	0e9b      	lsrs	r3, r3, #26
    1b08:	2b3f      	cmp	r3, #63	; 0x3f
    1b0a:	d01a      	beq.n	1b42 <_sysctrl_init_referenced_generators+0x56>
    1b0c:	029b      	lsls	r3, r3, #10
    1b0e:	2280      	movs	r2, #128	; 0x80
    1b10:	0092      	lsls	r2, r2, #2
    1b12:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1b14:	4a0f      	ldr	r2, [pc, #60]	; (1b54 <_sysctrl_init_referenced_generators+0x68>)
    1b16:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1b18:	2393      	movs	r3, #147	; 0x93
    1b1a:	005b      	lsls	r3, r3, #1
    1b1c:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1b1e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1b20:	075b      	lsls	r3, r3, #29
    1b22:	d511      	bpl.n	1b48 <_sysctrl_init_referenced_generators+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1b24:	0011      	movs	r1, r2
	tmp &= mask;
    1b26:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1b28:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    1b2a:	421a      	tst	r2, r3
    1b2c:	d0fc      	beq.n	1b28 <_sysctrl_init_referenced_generators+0x3c>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    1b2e:	4a09      	ldr	r2, [pc, #36]	; (1b54 <_sysctrl_init_referenced_generators+0x68>)
    1b30:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1b32:	2180      	movs	r1, #128	; 0x80
    1b34:	430b      	orrs	r3, r1
    1b36:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    1b38:	4a09      	ldr	r2, [pc, #36]	; (1b60 <_sysctrl_init_referenced_generators+0x74>)
    1b3a:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    1b3c:	09db      	lsrs	r3, r3, #7
    1b3e:	d1fc      	bne.n	1b3a <_sysctrl_init_referenced_generators+0x4e>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1b40:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1b42:	23fc      	movs	r3, #252	; 0xfc
    1b44:	01db      	lsls	r3, r3, #7
    1b46:	e7e5      	b.n	1b14 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1b48:	4902      	ldr	r1, [pc, #8]	; (1b54 <_sysctrl_init_referenced_generators+0x68>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1b4a:	2210      	movs	r2, #16
    1b4c:	68cb      	ldr	r3, [r1, #12]
    1b4e:	421a      	tst	r2, r3
    1b50:	d0fc      	beq.n	1b4c <_sysctrl_init_referenced_generators+0x60>
    1b52:	e7ec      	b.n	1b2e <_sysctrl_init_referenced_generators+0x42>
    1b54:	40000800 	.word	0x40000800
    1b58:	0401bb80 	.word	0x0401bb80
    1b5c:	00806024 	.word	0x00806024
    1b60:	40000c00 	.word	0x40000c00

00001b64 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1b64:	4b02      	ldr	r3, [pc, #8]	; (1b70 <_delay_init+0xc>)
    1b66:	4a03      	ldr	r2, [pc, #12]	; (1b74 <_delay_init+0x10>)
    1b68:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1b6a:	2205      	movs	r2, #5
    1b6c:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    1b6e:	4770      	bx	lr
    1b70:	e000e010 	.word	0xe000e010
    1b74:	00ffffff 	.word	0x00ffffff

00001b78 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    1b78:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
    1b7a:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1b7c:	1e5e      	subs	r6, r3, #1
    1b7e:	b2f6      	uxtb	r6, r6
    1b80:	2b00      	cmp	r3, #0
    1b82:	d013      	beq.n	1bac <_delay_cycles+0x34>
    1b84:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
    1b86:	4a0e      	ldr	r2, [pc, #56]	; (1bc0 <_delay_cycles+0x48>)
    1b88:	4d0e      	ldr	r5, [pc, #56]	; (1bc4 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1b8a:	2080      	movs	r0, #128	; 0x80
    1b8c:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
    1b8e:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1b90:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1b92:	6813      	ldr	r3, [r2, #0]
    1b94:	4203      	tst	r3, r0
    1b96:	d0fc      	beq.n	1b92 <_delay_cycles+0x1a>
	while (n--) {
    1b98:	3c01      	subs	r4, #1
    1b9a:	b2e4      	uxtb	r4, r4
    1b9c:	2cff      	cmp	r4, #255	; 0xff
    1b9e:	d1f6      	bne.n	1b8e <_delay_cycles+0x16>
    1ba0:	0633      	lsls	r3, r6, #24
    1ba2:	1af6      	subs	r6, r6, r3
    1ba4:	4b08      	ldr	r3, [pc, #32]	; (1bc8 <_delay_cycles+0x50>)
    1ba6:	469c      	mov	ip, r3
    1ba8:	4461      	add	r1, ip
    1baa:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1bac:	4b04      	ldr	r3, [pc, #16]	; (1bc0 <_delay_cycles+0x48>)
    1bae:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1bb0:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1bb2:	0019      	movs	r1, r3
    1bb4:	2280      	movs	r2, #128	; 0x80
    1bb6:	0252      	lsls	r2, r2, #9
    1bb8:	680b      	ldr	r3, [r1, #0]
    1bba:	4213      	tst	r3, r2
    1bbc:	d0fc      	beq.n	1bb8 <_delay_cycles+0x40>
		;
}
    1bbe:	bd70      	pop	{r4, r5, r6, pc}
    1bc0:	e000e010 	.word	0xe000e010
    1bc4:	00ffffff 	.word	0x00ffffff
    1bc8:	ff000001 	.word	0xff000001

00001bcc <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1bcc:	2000      	movs	r0, #0
    1bce:	4770      	bx	lr

00001bd0 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1bd0:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1bd2:	7c83      	ldrb	r3, [r0, #18]
    1bd4:	220f      	movs	r2, #15
    1bd6:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1bd8:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    1bda:	3a08      	subs	r2, #8
    1bdc:	400a      	ands	r2, r1
    1bde:	2a01      	cmp	r2, #1
    1be0:	d00b      	beq.n	1bfa <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1be2:	015a      	lsls	r2, r3, #5
    1be4:	4919      	ldr	r1, [pc, #100]	; (1c4c <_usb_d_dev_handle_setup+0x7c>)
    1be6:	468c      	mov	ip, r1
    1be8:	4462      	add	r2, ip
    1bea:	2110      	movs	r1, #16
    1bec:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1bee:	015b      	lsls	r3, r3, #5
    1bf0:	4a17      	ldr	r2, [pc, #92]	; (1c50 <_usb_d_dev_handle_setup+0x80>)
    1bf2:	4694      	mov	ip, r2
    1bf4:	4463      	add	r3, ip
    1bf6:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    1bf8:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    1bfa:	064a      	lsls	r2, r1, #25
    1bfc:	d50e      	bpl.n	1c1c <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    1bfe:	7cc2      	ldrb	r2, [r0, #19]
    1c00:	2140      	movs	r1, #64	; 0x40
    1c02:	438a      	bics	r2, r1
    1c04:	74c2      	strb	r2, [r0, #19]
    1c06:	015a      	lsls	r2, r3, #5
    1c08:	4c12      	ldr	r4, [pc, #72]	; (1c54 <_usb_d_dev_handle_setup+0x84>)
    1c0a:	46a4      	mov	ip, r4
    1c0c:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1c0e:	2580      	movs	r5, #128	; 0x80
    1c10:	2482      	movs	r4, #130	; 0x82
    1c12:	0064      	lsls	r4, r4, #1
    1c14:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1c16:	2406      	movs	r4, #6
    1c18:	34ff      	adds	r4, #255	; 0xff
    1c1a:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    1c1c:	7cc2      	ldrb	r2, [r0, #19]
    1c1e:	2108      	movs	r1, #8
    1c20:	438a      	bics	r2, r1
    1c22:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1c24:	490c      	ldr	r1, [pc, #48]	; (1c58 <_usb_d_dev_handle_setup+0x88>)
    1c26:	015a      	lsls	r2, r3, #5
    1c28:	188c      	adds	r4, r1, r2
    1c2a:	2500      	movs	r5, #0
    1c2c:	72a5      	strb	r5, [r4, #10]
    1c2e:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1c30:	0013      	movs	r3, r2
    1c32:	4c06      	ldr	r4, [pc, #24]	; (1c4c <_usb_d_dev_handle_setup+0x7c>)
    1c34:	46a4      	mov	ip, r4
    1c36:	4463      	add	r3, ip
    1c38:	246f      	movs	r4, #111	; 0x6f
    1c3a:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1c3c:	4b04      	ldr	r3, [pc, #16]	; (1c50 <_usb_d_dev_handle_setup+0x80>)
    1c3e:	469c      	mov	ip, r3
    1c40:	4462      	add	r2, ip
    1c42:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    1c44:	7c80      	ldrb	r0, [r0, #18]
    1c46:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    1c48:	4798      	blx	r3
    1c4a:	e7d5      	b.n	1bf8 <_usb_d_dev_handle_setup+0x28>
    1c4c:	41005100 	.word	0x41005100
    1c50:	41005108 	.word	0x41005108
    1c54:	41005000 	.word	0x41005000
    1c58:	20000580 	.word	0x20000580

00001c5c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    1c5c:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    1c5e:	2220      	movs	r2, #32
    1c60:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1c62:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1c64:	7c81      	ldrb	r1, [r0, #18]
    1c66:	230f      	movs	r3, #15
    1c68:	400b      	ands	r3, r1
    1c6a:	015b      	lsls	r3, r3, #5
    1c6c:	4905      	ldr	r1, [pc, #20]	; (1c84 <_usb_d_dev_handle_stall+0x28>)
    1c6e:	468c      	mov	ip, r1
    1c70:	4463      	add	r3, ip
    1c72:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1c74:	6882      	ldr	r2, [r0, #8]
    1c76:	7c80      	ldrb	r0, [r0, #18]
    1c78:	4b03      	ldr	r3, [pc, #12]	; (1c88 <_usb_d_dev_handle_stall+0x2c>)
    1c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1c7c:	2101      	movs	r1, #1
    1c7e:	4798      	blx	r3
}
    1c80:	bd10      	pop	{r4, pc}
    1c82:	46c0      	nop			; (mov r8, r8)
    1c84:	41005108 	.word	0x41005108
    1c88:	20000580 	.word	0x20000580

00001c8c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1c8c:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1c8e:	7c83      	ldrb	r3, [r0, #18]
    1c90:	2bff      	cmp	r3, #255	; 0xff
    1c92:	d002      	beq.n	1c9a <_usb_d_dev_trans_done+0xe>
    1c94:	7cc2      	ldrb	r2, [r0, #19]
    1c96:	0652      	lsls	r2, r2, #25
    1c98:	d400      	bmi.n	1c9c <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    1c9a:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    1c9c:	7cc2      	ldrb	r2, [r0, #19]
    1c9e:	2440      	movs	r4, #64	; 0x40
    1ca0:	43a2      	bics	r2, r4
    1ca2:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1ca4:	6882      	ldr	r2, [r0, #8]
    1ca6:	4802      	ldr	r0, [pc, #8]	; (1cb0 <_usb_d_dev_trans_done+0x24>)
    1ca8:	6f04      	ldr	r4, [r0, #112]	; 0x70
    1caa:	0018      	movs	r0, r3
    1cac:	47a0      	blx	r4
    1cae:	e7f4      	b.n	1c9a <_usb_d_dev_trans_done+0xe>
    1cb0:	20000580 	.word	0x20000580

00001cb4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1cb4:	b530      	push	{r4, r5, lr}
    1cb6:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1cb8:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1cba:	ac01      	add	r4, sp, #4
    1cbc:	2525      	movs	r5, #37	; 0x25
    1cbe:	7025      	strb	r5, [r4, #0]
    1cc0:	3525      	adds	r5, #37	; 0x25
    1cc2:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1cc4:	2bff      	cmp	r3, #255	; 0xff
    1cc6:	d01b      	beq.n	1d00 <_usb_d_dev_trans_stop+0x4c>
    1cc8:	7cc4      	ldrb	r4, [r0, #19]
    1cca:	0664      	lsls	r4, r4, #25
    1ccc:	d518      	bpl.n	1d00 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1cce:	240f      	movs	r4, #15
    1cd0:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    1cd2:	2900      	cmp	r1, #0
    1cd4:	d016      	beq.n	1d04 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1cd6:	015c      	lsls	r4, r3, #5
    1cd8:	4d0e      	ldr	r5, [pc, #56]	; (1d14 <_usb_d_dev_trans_stop+0x60>)
    1cda:	46ac      	mov	ip, r5
    1cdc:	4464      	add	r4, ip
    1cde:	2580      	movs	r5, #128	; 0x80
    1ce0:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1ce2:	ac01      	add	r4, sp, #4
    1ce4:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1ce6:	0159      	lsls	r1, r3, #5
    1ce8:	4d0a      	ldr	r5, [pc, #40]	; (1d14 <_usb_d_dev_trans_stop+0x60>)
    1cea:	46ac      	mov	ip, r5
    1cec:	4461      	add	r1, ip
    1cee:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1cf0:	015b      	lsls	r3, r3, #5
    1cf2:	4909      	ldr	r1, [pc, #36]	; (1d18 <_usb_d_dev_trans_stop+0x64>)
    1cf4:	468c      	mov	ip, r1
    1cf6:	4463      	add	r3, ip
    1cf8:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1cfa:	0011      	movs	r1, r2
    1cfc:	4b07      	ldr	r3, [pc, #28]	; (1d1c <_usb_d_dev_trans_stop+0x68>)
    1cfe:	4798      	blx	r3
}
    1d00:	b003      	add	sp, #12
    1d02:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1d04:	015c      	lsls	r4, r3, #5
    1d06:	4d03      	ldr	r5, [pc, #12]	; (1d14 <_usb_d_dev_trans_stop+0x60>)
    1d08:	46ac      	mov	ip, r5
    1d0a:	4464      	add	r4, ip
    1d0c:	2540      	movs	r5, #64	; 0x40
    1d0e:	7165      	strb	r5, [r4, #5]
    1d10:	e7e7      	b.n	1ce2 <_usb_d_dev_trans_stop+0x2e>
    1d12:	46c0      	nop			; (mov r8, r8)
    1d14:	41005100 	.word	0x41005100
    1d18:	41005108 	.word	0x41005108
    1d1c:	00001c8d 	.word	0x00001c8d

00001d20 <_usb_d_dev_handle_trfail>:
{
    1d20:	b570      	push	{r4, r5, r6, lr}
    1d22:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1d24:	7c83      	ldrb	r3, [r0, #18]
    1d26:	220f      	movs	r2, #15
    1d28:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1d2a:	aa01      	add	r2, sp, #4
    1d2c:	2404      	movs	r4, #4
    1d2e:	7014      	strb	r4, [r2, #0]
    1d30:	3404      	adds	r4, #4
    1d32:	7054      	strb	r4, [r2, #1]
    1d34:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    1d36:	2900      	cmp	r1, #0
    1d38:	d031      	beq.n	1d9e <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1d3a:	001a      	movs	r2, r3
    1d3c:	3208      	adds	r2, #8
    1d3e:	0152      	lsls	r2, r2, #5
    1d40:	4c32      	ldr	r4, [pc, #200]	; (1e0c <_usb_d_dev_handle_trfail+0xec>)
    1d42:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1d44:	0664      	lsls	r4, r4, #25
    1d46:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    1d48:	010a      	lsls	r2, r1, #4
    1d4a:	1952      	adds	r2, r2, r5
    1d4c:	4d30      	ldr	r5, [pc, #192]	; (1e10 <_usb_d_dev_handle_trfail+0xf0>)
    1d4e:	18aa      	adds	r2, r5, r2
    1d50:	7a95      	ldrb	r5, [r2, #10]
    1d52:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1d54:	2c02      	cmp	r4, #2
    1d56:	d02a      	beq.n	1dae <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    1d58:	07ac      	lsls	r4, r5, #30
    1d5a:	d541      	bpl.n	1de0 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1d5c:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1d5e:	7a94      	ldrb	r4, [r2, #10]
    1d60:	2602      	movs	r6, #2
    1d62:	43b4      	bics	r4, r6
    1d64:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1d66:	aa01      	add	r2, sp, #4
    1d68:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1d6a:	015a      	lsls	r2, r3, #5
    1d6c:	4e29      	ldr	r6, [pc, #164]	; (1e14 <_usb_d_dev_handle_trfail+0xf4>)
    1d6e:	46b4      	mov	ip, r6
    1d70:	4462      	add	r2, ip
    1d72:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1d74:	015b      	lsls	r3, r3, #5
    1d76:	4a28      	ldr	r2, [pc, #160]	; (1e18 <_usb_d_dev_handle_trfail+0xf8>)
    1d78:	4694      	mov	ip, r2
    1d7a:	4463      	add	r3, ip
    1d7c:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1d7e:	2307      	movs	r3, #7
    1d80:	402b      	ands	r3, r5
    1d82:	2b01      	cmp	r3, #1
    1d84:	d13f      	bne.n	1e06 <_usb_d_dev_handle_trfail+0xe6>
    1d86:	7cc3      	ldrb	r3, [r0, #19]
    1d88:	065b      	lsls	r3, r3, #25
    1d8a:	d53c      	bpl.n	1e06 <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1d8c:	7cc3      	ldrb	r3, [r0, #19]
    1d8e:	09db      	lsrs	r3, r3, #7
    1d90:	4299      	cmp	r1, r3
    1d92:	d038      	beq.n	1e06 <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1d94:	2200      	movs	r2, #0
    1d96:	0019      	movs	r1, r3
    1d98:	4b20      	ldr	r3, [pc, #128]	; (1e1c <_usb_d_dev_handle_trfail+0xfc>)
    1d9a:	4798      	blx	r3
    1d9c:	e033      	b.n	1e06 <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1d9e:	001a      	movs	r2, r3
    1da0:	3208      	adds	r2, #8
    1da2:	0152      	lsls	r2, r2, #5
    1da4:	4c19      	ldr	r4, [pc, #100]	; (1e0c <_usb_d_dev_handle_trfail+0xec>)
    1da6:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1da8:	2207      	movs	r2, #7
    1daa:	4014      	ands	r4, r2
    1dac:	e7cc      	b.n	1d48 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1dae:	07ec      	lsls	r4, r5, #31
    1db0:	d5d2      	bpl.n	1d58 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1db2:	7a94      	ldrb	r4, [r2, #10]
    1db4:	2501      	movs	r5, #1
    1db6:	43ac      	bics	r4, r5
    1db8:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1dba:	aa01      	add	r2, sp, #4
    1dbc:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1dbe:	015a      	lsls	r2, r3, #5
    1dc0:	4d14      	ldr	r5, [pc, #80]	; (1e14 <_usb_d_dev_handle_trfail+0xf4>)
    1dc2:	46ac      	mov	ip, r5
    1dc4:	4462      	add	r2, ip
    1dc6:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1dc8:	015b      	lsls	r3, r3, #5
    1dca:	4a13      	ldr	r2, [pc, #76]	; (1e18 <_usb_d_dev_handle_trfail+0xf8>)
    1dcc:	4694      	mov	ip, r2
    1dce:	4463      	add	r3, ip
    1dd0:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1dd2:	1e4b      	subs	r3, r1, #1
    1dd4:	4199      	sbcs	r1, r3
    1dd6:	b2c9      	uxtb	r1, r1
    1dd8:	2204      	movs	r2, #4
    1dda:	4b10      	ldr	r3, [pc, #64]	; (1e1c <_usb_d_dev_handle_trfail+0xfc>)
    1ddc:	4798      	blx	r3
    1dde:	e012      	b.n	1e06 <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    1de0:	005a      	lsls	r2, r3, #1
    1de2:	1852      	adds	r2, r2, r1
    1de4:	0112      	lsls	r2, r2, #4
    1de6:	480a      	ldr	r0, [pc, #40]	; (1e10 <_usb_d_dev_handle_trfail+0xf0>)
    1de8:	1882      	adds	r2, r0, r2
    1dea:	2000      	movs	r0, #0
    1dec:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1dee:	aa01      	add	r2, sp, #4
    1df0:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1df2:	015a      	lsls	r2, r3, #5
    1df4:	4807      	ldr	r0, [pc, #28]	; (1e14 <_usb_d_dev_handle_trfail+0xf4>)
    1df6:	4684      	mov	ip, r0
    1df8:	4462      	add	r2, ip
    1dfa:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1dfc:	015b      	lsls	r3, r3, #5
    1dfe:	4a06      	ldr	r2, [pc, #24]	; (1e18 <_usb_d_dev_handle_trfail+0xf8>)
    1e00:	4694      	mov	ip, r2
    1e02:	4463      	add	r3, ip
    1e04:	7019      	strb	r1, [r3, #0]
}
    1e06:	b002      	add	sp, #8
    1e08:	bd70      	pop	{r4, r5, r6, pc}
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	41005000 	.word	0x41005000
    1e10:	20000580 	.word	0x20000580
    1e14:	41005100 	.word	0x41005100
    1e18:	41005108 	.word	0x41005108
    1e1c:	00001cb5 	.word	0x00001cb5

00001e20 <_usb_d_dev_reset_epts>:
{
    1e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e22:	46c6      	mov	lr, r8
    1e24:	b500      	push	{lr}
    1e26:	4d0c      	ldr	r5, [pc, #48]	; (1e58 <_usb_d_dev_reset_epts+0x38>)
    1e28:	002c      	movs	r4, r5
    1e2a:	3474      	adds	r4, #116	; 0x74
    1e2c:	3529      	adds	r5, #41	; 0x29
    1e2e:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1e30:	4b0a      	ldr	r3, [pc, #40]	; (1e5c <_usb_d_dev_reset_epts+0x3c>)
    1e32:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    1e34:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    1e36:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1e38:	2103      	movs	r1, #3
    1e3a:	0020      	movs	r0, r4
    1e3c:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    1e3e:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1e40:	74e6      	strb	r6, [r4, #19]
    1e42:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1e44:	42ac      	cmp	r4, r5
    1e46:	d1f7      	bne.n	1e38 <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1e48:	2260      	movs	r2, #96	; 0x60
    1e4a:	2100      	movs	r1, #0
    1e4c:	4802      	ldr	r0, [pc, #8]	; (1e58 <_usb_d_dev_reset_epts+0x38>)
    1e4e:	4b04      	ldr	r3, [pc, #16]	; (1e60 <_usb_d_dev_reset_epts+0x40>)
    1e50:	4798      	blx	r3
}
    1e52:	bc04      	pop	{r2}
    1e54:	4690      	mov	r8, r2
    1e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e58:	20000580 	.word	0x20000580
    1e5c:	00001c8d 	.word	0x00001c8d
    1e60:	00003b71 	.word	0x00003b71

00001e64 <_usb_d_dev_in_next>:
{
    1e64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e66:	46c6      	mov	lr, r8
    1e68:	b500      	push	{lr}
    1e6a:	0004      	movs	r4, r0
    1e6c:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1e6e:	7c83      	ldrb	r3, [r0, #18]
    1e70:	250f      	movs	r5, #15
    1e72:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1e74:	2900      	cmp	r1, #0
    1e76:	d100      	bne.n	1e7a <_usb_d_dev_in_next+0x16>
    1e78:	e0aa      	b.n	1fd0 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1e7a:	016a      	lsls	r2, r5, #5
    1e7c:	4b5a      	ldr	r3, [pc, #360]	; (1fe8 <_usb_d_dev_in_next+0x184>)
    1e7e:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1e80:	6958      	ldr	r0, [r3, #20]
    1e82:	0480      	lsls	r0, r0, #18
    1e84:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1e86:	8a23      	ldrh	r3, [r4, #16]
    1e88:	4a58      	ldr	r2, [pc, #352]	; (1fec <_usb_d_dev_in_next+0x188>)
    1e8a:	4293      	cmp	r3, r2
    1e8c:	d100      	bne.n	1e90 <_usb_d_dev_in_next+0x2c>
    1e8e:	e09a      	b.n	1fc6 <_usb_d_dev_in_next+0x162>
    1e90:	3b01      	subs	r3, #1
    1e92:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1e94:	7ce3      	ldrb	r3, [r4, #19]
    1e96:	2707      	movs	r7, #7
    1e98:	401f      	ands	r7, r3
	if (isr) {
    1e9a:	2e00      	cmp	r6, #0
    1e9c:	d005      	beq.n	1eaa <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1e9e:	016b      	lsls	r3, r5, #5
    1ea0:	4953      	ldr	r1, [pc, #332]	; (1ff0 <_usb_d_dev_in_next+0x18c>)
    1ea2:	468c      	mov	ip, r1
    1ea4:	4463      	add	r3, ip
    1ea6:	2102      	movs	r1, #2
    1ea8:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    1eaa:	68a3      	ldr	r3, [r4, #8]
    1eac:	18c1      	adds	r1, r0, r3
    1eae:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    1eb0:	6863      	ldr	r3, [r4, #4]
    1eb2:	4299      	cmp	r1, r3
    1eb4:	d24a      	bcs.n	1f4c <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    1eb6:	1a5b      	subs	r3, r3, r1
    1eb8:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    1eba:	7ce2      	ldrb	r2, [r4, #19]
    1ebc:	0692      	lsls	r2, r2, #26
    1ebe:	d535      	bpl.n	1f2c <_usb_d_dev_in_next+0xc8>
    1ec0:	8a22      	ldrh	r2, [r4, #16]
    1ec2:	1c10      	adds	r0, r2, #0
    1ec4:	b292      	uxth	r2, r2
    1ec6:	429a      	cmp	r2, r3
    1ec8:	d900      	bls.n	1ecc <_usb_d_dev_in_next+0x68>
    1eca:	1c18      	adds	r0, r3, #0
    1ecc:	b283      	uxth	r3, r0
    1ece:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1ed0:	6823      	ldr	r3, [r4, #0]
    1ed2:	469c      	mov	ip, r3
    1ed4:	4461      	add	r1, ip
    1ed6:	4642      	mov	r2, r8
    1ed8:	68e0      	ldr	r0, [r4, #12]
    1eda:	4b46      	ldr	r3, [pc, #280]	; (1ff4 <_usb_d_dev_in_next+0x190>)
    1edc:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1ede:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    1ee0:	016a      	lsls	r2, r5, #5
    1ee2:	4b41      	ldr	r3, [pc, #260]	; (1fe8 <_usb_d_dev_in_next+0x184>)
    1ee4:	189b      	adds	r3, r3, r2
    1ee6:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1ee8:	016a      	lsls	r2, r5, #5
    1eea:	4b3f      	ldr	r3, [pc, #252]	; (1fe8 <_usb_d_dev_in_next+0x184>)
    1eec:	189b      	adds	r3, r3, r2
    1eee:	695a      	ldr	r2, [r3, #20]
    1ef0:	4641      	mov	r1, r8
    1ef2:	0489      	lsls	r1, r1, #18
    1ef4:	0c89      	lsrs	r1, r1, #18
    1ef6:	0b92      	lsrs	r2, r2, #14
    1ef8:	0392      	lsls	r2, r2, #14
    1efa:	430a      	orrs	r2, r1
    1efc:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1efe:	695a      	ldr	r2, [r3, #20]
    1f00:	493d      	ldr	r1, [pc, #244]	; (1ff8 <_usb_d_dev_in_next+0x194>)
    1f02:	400a      	ands	r2, r1
    1f04:	615a      	str	r2, [r3, #20]
	if (!isr) {
    1f06:	2e00      	cmp	r6, #0
    1f08:	d107      	bne.n	1f1a <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    1f0a:	2f01      	cmp	r7, #1
    1f0c:	d059      	beq.n	1fc2 <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    1f0e:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1f10:	016b      	lsls	r3, r5, #5
    1f12:	493a      	ldr	r1, [pc, #232]	; (1ffc <_usb_d_dev_in_next+0x198>)
    1f14:	468c      	mov	ip, r1
    1f16:	4463      	add	r3, ip
    1f18:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1f1a:	016d      	lsls	r5, r5, #5
    1f1c:	4b34      	ldr	r3, [pc, #208]	; (1ff0 <_usb_d_dev_in_next+0x18c>)
    1f1e:	469c      	mov	ip, r3
    1f20:	4465      	add	r5, ip
    1f22:	2380      	movs	r3, #128	; 0x80
    1f24:	716b      	strb	r3, [r5, #5]
}
    1f26:	bc04      	pop	{r2}
    1f28:	4690      	mov	r8, r2
    1f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f2c:	1c1a      	adds	r2, r3, #0
    1f2e:	2080      	movs	r0, #128	; 0x80
    1f30:	0180      	lsls	r0, r0, #6
    1f32:	4283      	cmp	r3, r0
    1f34:	d901      	bls.n	1f3a <_usb_d_dev_in_next+0xd6>
    1f36:	4b32      	ldr	r3, [pc, #200]	; (2000 <STACK_SIZE>)
    1f38:	881a      	ldrh	r2, [r3, #0]
    1f3a:	b293      	uxth	r3, r2
    1f3c:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1f3e:	6823      	ldr	r3, [r4, #0]
    1f40:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    1f42:	016a      	lsls	r2, r5, #5
    1f44:	4b28      	ldr	r3, [pc, #160]	; (1fe8 <_usb_d_dev_in_next+0x184>)
    1f46:	189b      	adds	r3, r3, r2
    1f48:	6119      	str	r1, [r3, #16]
    1f4a:	e7cd      	b.n	1ee8 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    1f4c:	7ce3      	ldrb	r3, [r4, #19]
    1f4e:	06db      	lsls	r3, r3, #27
    1f50:	d50f      	bpl.n	1f72 <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    1f52:	7ce3      	ldrb	r3, [r4, #19]
    1f54:	2210      	movs	r2, #16
    1f56:	4393      	bics	r3, r2
    1f58:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1f5a:	016a      	lsls	r2, r5, #5
    1f5c:	4b22      	ldr	r3, [pc, #136]	; (1fe8 <_usb_d_dev_in_next+0x184>)
    1f5e:	189b      	adds	r3, r3, r2
    1f60:	695a      	ldr	r2, [r3, #20]
    1f62:	0b92      	lsrs	r2, r2, #14
    1f64:	0392      	lsls	r2, r2, #14
    1f66:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1f68:	695a      	ldr	r2, [r3, #20]
    1f6a:	4923      	ldr	r1, [pc, #140]	; (1ff8 <_usb_d_dev_in_next+0x194>)
    1f6c:	400a      	ands	r2, r1
    1f6e:	615a      	str	r2, [r3, #20]
    1f70:	e7c9      	b.n	1f06 <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    1f72:	2f01      	cmp	r7, #1
    1f74:	d00e      	beq.n	1f94 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1f76:	016d      	lsls	r5, r5, #5
    1f78:	4b22      	ldr	r3, [pc, #136]	; (2004 <STACK_SIZE+0x4>)
    1f7a:	469c      	mov	ip, r3
    1f7c:	4465      	add	r5, ip
    1f7e:	234a      	movs	r3, #74	; 0x4a
    1f80:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    1f82:	8a21      	ldrh	r1, [r4, #16]
    1f84:	4002      	ands	r2, r0
    1f86:	4291      	cmp	r1, r2
    1f88:	d00b      	beq.n	1fa2 <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1f8a:	2100      	movs	r1, #0
    1f8c:	0020      	movs	r0, r4
    1f8e:	4b1e      	ldr	r3, [pc, #120]	; (2008 <STACK_SIZE+0x8>)
    1f90:	4798      	blx	r3
	return;
    1f92:	e7c8      	b.n	1f26 <_usb_d_dev_in_next+0xc2>
    1f94:	016d      	lsls	r5, r5, #5
    1f96:	4b1b      	ldr	r3, [pc, #108]	; (2004 <STACK_SIZE+0x4>)
    1f98:	469c      	mov	ip, r3
    1f9a:	4465      	add	r5, ip
    1f9c:	234b      	movs	r3, #75	; 0x4b
    1f9e:	702b      	strb	r3, [r5, #0]
    1fa0:	e7ef      	b.n	1f82 <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    1fa2:	7ce3      	ldrb	r3, [r4, #19]
    1fa4:	2240      	movs	r2, #64	; 0x40
    1fa6:	4393      	bics	r3, r2
    1fa8:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1faa:	7ca0      	ldrb	r0, [r4, #18]
    1fac:	4b0e      	ldr	r3, [pc, #56]	; (1fe8 <_usb_d_dev_in_next+0x184>)
    1fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1fb0:	68a1      	ldr	r1, [r4, #8]
    1fb2:	4798      	blx	r3
    1fb4:	2800      	cmp	r0, #0
    1fb6:	d1b6      	bne.n	1f26 <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    1fb8:	7ce3      	ldrb	r3, [r4, #19]
    1fba:	2240      	movs	r2, #64	; 0x40
    1fbc:	4313      	orrs	r3, r2
    1fbe:	74e3      	strb	r3, [r4, #19]
    1fc0:	e7e3      	b.n	1f8a <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1fc2:	224e      	movs	r2, #78	; 0x4e
    1fc4:	e7a4      	b.n	1f10 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1fc6:	7ce7      	ldrb	r7, [r4, #19]
    1fc8:	2307      	movs	r3, #7
    1fca:	401f      	ands	r7, r3
    1fcc:	4a07      	ldr	r2, [pc, #28]	; (1fec <_usb_d_dev_in_next+0x188>)
    1fce:	e766      	b.n	1e9e <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1fd0:	8a03      	ldrh	r3, [r0, #16]
    1fd2:	4a06      	ldr	r2, [pc, #24]	; (1fec <_usb_d_dev_in_next+0x188>)
    1fd4:	2000      	movs	r0, #0
    1fd6:	4293      	cmp	r3, r2
    1fd8:	d000      	beq.n	1fdc <_usb_d_dev_in_next+0x178>
    1fda:	e759      	b.n	1e90 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1fdc:	7ce3      	ldrb	r3, [r4, #19]
    1fde:	2707      	movs	r7, #7
    1fe0:	401f      	ands	r7, r3
    1fe2:	2000      	movs	r0, #0
    1fe4:	4a01      	ldr	r2, [pc, #4]	; (1fec <_usb_d_dev_in_next+0x188>)
    1fe6:	e760      	b.n	1eaa <_usb_d_dev_in_next+0x46>
    1fe8:	20000580 	.word	0x20000580
    1fec:	000003ff 	.word	0x000003ff
    1ff0:	41005100 	.word	0x41005100
    1ff4:	00003aed 	.word	0x00003aed
    1ff8:	f0003fff 	.word	0xf0003fff
    1ffc:	41005109 	.word	0x41005109
    2000:	00003df0 	.word	0x00003df0
    2004:	41005108 	.word	0x41005108
    2008:	00001c8d 	.word	0x00001c8d

0000200c <_usb_d_dev_out_next>:
{
    200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    200e:	46de      	mov	lr, fp
    2010:	4657      	mov	r7, sl
    2012:	464e      	mov	r6, r9
    2014:	4645      	mov	r5, r8
    2016:	b5e0      	push	{r5, r6, r7, lr}
    2018:	0004      	movs	r4, r0
    201a:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    201c:	7c83      	ldrb	r3, [r0, #18]
    201e:	250f      	movs	r5, #15
    2020:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    2022:	2900      	cmp	r1, #0
    2024:	d057      	beq.n	20d6 <_usb_d_dev_out_next+0xca>
    2026:	016a      	lsls	r2, r5, #5
    2028:	4b7d      	ldr	r3, [pc, #500]	; (2220 <_usb_d_dev_out_next+0x214>)
    202a:	189b      	adds	r3, r3, r2
    202c:	685a      	ldr	r2, [r3, #4]
    202e:	0112      	lsls	r2, r2, #4
    2030:	0c92      	lsrs	r2, r2, #18
    2032:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    2034:	685f      	ldr	r7, [r3, #4]
    2036:	04bf      	lsls	r7, r7, #18
    2038:	0cbf      	lsrs	r7, r7, #18
    203a:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    203c:	8a06      	ldrh	r6, [r0, #16]
    203e:	4b79      	ldr	r3, [pc, #484]	; (2224 <_usb_d_dev_out_next+0x218>)
    2040:	429e      	cmp	r6, r3
    2042:	d100      	bne.n	2046 <_usb_d_dev_out_next+0x3a>
    2044:	e0cd      	b.n	21e2 <_usb_d_dev_out_next+0x1d6>
    2046:	3e01      	subs	r6, #1
    2048:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    204a:	465f      	mov	r7, fp
    204c:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    204e:	7ce3      	ldrb	r3, [r4, #19]
    2050:	2207      	movs	r2, #7
    2052:	401a      	ands	r2, r3
    2054:	4691      	mov	r9, r2
	if (isr) {
    2056:	4643      	mov	r3, r8
    2058:	2b00      	cmp	r3, #0
    205a:	d005      	beq.n	2068 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    205c:	016b      	lsls	r3, r5, #5
    205e:	4a72      	ldr	r2, [pc, #456]	; (2228 <_usb_d_dev_out_next+0x21c>)
    2060:	4694      	mov	ip, r2
    2062:	4463      	add	r3, ip
    2064:	2201      	movs	r2, #1
    2066:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    2068:	7ce3      	ldrb	r3, [r4, #19]
    206a:	069b      	lsls	r3, r3, #26
    206c:	d50f      	bpl.n	208e <_usb_d_dev_out_next+0x82>
    206e:	6863      	ldr	r3, [r4, #4]
    2070:	2b00      	cmp	r3, #0
    2072:	d039      	beq.n	20e8 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    2074:	68a0      	ldr	r0, [r4, #8]
    2076:	1a1b      	subs	r3, r3, r0
    2078:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    207a:	6822      	ldr	r2, [r4, #0]
    207c:	4694      	mov	ip, r2
    207e:	4460      	add	r0, ip
    2080:	68e1      	ldr	r1, [r4, #12]
    2082:	001a      	movs	r2, r3
    2084:	42bb      	cmp	r3, r7
    2086:	d900      	bls.n	208a <_usb_d_dev_out_next+0x7e>
    2088:	003a      	movs	r2, r7
    208a:	4b68      	ldr	r3, [pc, #416]	; (222c <_usb_d_dev_out_next+0x220>)
    208c:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    208e:	6863      	ldr	r3, [r4, #4]
    2090:	2b00      	cmp	r3, #0
    2092:	d029      	beq.n	20e8 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    2094:	4642      	mov	r2, r8
    2096:	2a00      	cmp	r2, #0
    2098:	d042      	beq.n	2120 <_usb_d_dev_out_next+0x114>
    209a:	8a22      	ldrh	r2, [r4, #16]
    209c:	42ba      	cmp	r2, r7
    209e:	d93f      	bls.n	2120 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    20a0:	7ce3      	ldrb	r3, [r4, #19]
    20a2:	2210      	movs	r2, #16
    20a4:	4393      	bics	r3, r2
    20a6:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    20a8:	68a3      	ldr	r3, [r4, #8]
    20aa:	445b      	add	r3, fp
    20ac:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    20ae:	464b      	mov	r3, r9
    20b0:	2b01      	cmp	r3, #1
    20b2:	d100      	bne.n	20b6 <_usb_d_dev_out_next+0xaa>
    20b4:	e087      	b.n	21c6 <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    20b6:	016b      	lsls	r3, r5, #5
    20b8:	4a5d      	ldr	r2, [pc, #372]	; (2230 <_usb_d_dev_out_next+0x224>)
    20ba:	4694      	mov	ip, r2
    20bc:	4463      	add	r3, ip
    20be:	2225      	movs	r2, #37	; 0x25
    20c0:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    20c2:	2d00      	cmp	r5, #0
    20c4:	d102      	bne.n	20cc <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    20c6:	4b56      	ldr	r3, [pc, #344]	; (2220 <_usb_d_dev_out_next+0x214>)
    20c8:	68e2      	ldr	r2, [r4, #12]
    20ca:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    20cc:	2100      	movs	r1, #0
    20ce:	0020      	movs	r0, r4
    20d0:	4b58      	ldr	r3, [pc, #352]	; (2234 <_usb_d_dev_out_next+0x228>)
    20d2:	4798      	blx	r3
	return;
    20d4:	e059      	b.n	218a <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    20d6:	8a06      	ldrh	r6, [r0, #16]
    20d8:	4b52      	ldr	r3, [pc, #328]	; (2224 <_usb_d_dev_out_next+0x218>)
    20da:	429e      	cmp	r6, r3
    20dc:	d100      	bne.n	20e0 <_usb_d_dev_out_next+0xd4>
    20de:	e08e      	b.n	21fe <_usb_d_dev_out_next+0x1f2>
    20e0:	2300      	movs	r3, #0
    20e2:	469b      	mov	fp, r3
    20e4:	469a      	mov	sl, r3
    20e6:	e7ae      	b.n	2046 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    20e8:	7ce3      	ldrb	r3, [r4, #19]
    20ea:	06db      	lsls	r3, r3, #27
    20ec:	d400      	bmi.n	20f0 <_usb_d_dev_out_next+0xe4>
    20ee:	e07f      	b.n	21f0 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    20f0:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    20f2:	2210      	movs	r2, #16
    20f4:	4393      	bics	r3, r2
    20f6:	2220      	movs	r2, #32
    20f8:	4313      	orrs	r3, r2
    20fa:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    20fc:	4a48      	ldr	r2, [pc, #288]	; (2220 <_usb_d_dev_out_next+0x214>)
    20fe:	016b      	lsls	r3, r5, #5
    2100:	68e1      	ldr	r1, [r4, #12]
    2102:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2104:	8a21      	ldrh	r1, [r4, #16]
    2106:	18d3      	adds	r3, r2, r3
    2108:	685a      	ldr	r2, [r3, #4]
    210a:	0489      	lsls	r1, r1, #18
    210c:	0909      	lsrs	r1, r1, #4
    210e:	484a      	ldr	r0, [pc, #296]	; (2238 <_usb_d_dev_out_next+0x22c>)
    2110:	4002      	ands	r2, r0
    2112:	430a      	orrs	r2, r1
    2114:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2116:	685a      	ldr	r2, [r3, #4]
    2118:	0b92      	lsrs	r2, r2, #14
    211a:	0392      	lsls	r2, r2, #14
    211c:	605a      	str	r2, [r3, #4]
    211e:	e022      	b.n	2166 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    2120:	68a2      	ldr	r2, [r4, #8]
    2122:	4452      	add	r2, sl
    2124:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    2126:	4293      	cmp	r3, r2
    2128:	d9c1      	bls.n	20ae <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    212a:	1a9b      	subs	r3, r3, r2
    212c:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    212e:	7ce1      	ldrb	r1, [r4, #19]
    2130:	0689      	lsls	r1, r1, #26
    2132:	d530      	bpl.n	2196 <_usb_d_dev_out_next+0x18a>
    2134:	8a22      	ldrh	r2, [r4, #16]
    2136:	1c11      	adds	r1, r2, #0
    2138:	b292      	uxth	r2, r2
    213a:	429a      	cmp	r2, r3
    213c:	d900      	bls.n	2140 <_usb_d_dev_out_next+0x134>
    213e:	1c19      	adds	r1, r3, #0
    2140:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2142:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2144:	016a      	lsls	r2, r5, #5
    2146:	4936      	ldr	r1, [pc, #216]	; (2220 <_usb_d_dev_out_next+0x214>)
    2148:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    214a:	016a      	lsls	r2, r5, #5
    214c:	4934      	ldr	r1, [pc, #208]	; (2220 <_usb_d_dev_out_next+0x214>)
    214e:	1889      	adds	r1, r1, r2
    2150:	684a      	ldr	r2, [r1, #4]
    2152:	049b      	lsls	r3, r3, #18
    2154:	091b      	lsrs	r3, r3, #4
    2156:	4838      	ldr	r0, [pc, #224]	; (2238 <_usb_d_dev_out_next+0x22c>)
    2158:	4002      	ands	r2, r0
    215a:	4313      	orrs	r3, r2
    215c:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    215e:	684b      	ldr	r3, [r1, #4]
    2160:	0b9b      	lsrs	r3, r3, #14
    2162:	039b      	lsls	r3, r3, #14
    2164:	604b      	str	r3, [r1, #4]
	if (!isr) {
    2166:	4643      	mov	r3, r8
    2168:	2b00      	cmp	r3, #0
    216a:	d108      	bne.n	217e <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    216c:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    216e:	464b      	mov	r3, r9
    2170:	2b01      	cmp	r3, #1
    2172:	d02f      	beq.n	21d4 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2174:	016b      	lsls	r3, r5, #5
    2176:	4931      	ldr	r1, [pc, #196]	; (223c <_usb_d_dev_out_next+0x230>)
    2178:	468c      	mov	ip, r1
    217a:	4463      	add	r3, ip
    217c:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    217e:	016d      	lsls	r5, r5, #5
    2180:	4b29      	ldr	r3, [pc, #164]	; (2228 <_usb_d_dev_out_next+0x21c>)
    2182:	469c      	mov	ip, r3
    2184:	4465      	add	r5, ip
    2186:	2340      	movs	r3, #64	; 0x40
    2188:	712b      	strb	r3, [r5, #4]
}
    218a:	bc3c      	pop	{r2, r3, r4, r5}
    218c:	4690      	mov	r8, r2
    218e:	4699      	mov	r9, r3
    2190:	46a2      	mov	sl, r4
    2192:	46ab      	mov	fp, r5
    2194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    2196:	8a21      	ldrh	r1, [r4, #16]
    2198:	428b      	cmp	r3, r1
    219a:	d90a      	bls.n	21b2 <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    219c:	2180      	movs	r1, #128	; 0x80
    219e:	0189      	lsls	r1, r1, #6
    21a0:	428b      	cmp	r3, r1
    21a2:	d80d      	bhi.n	21c0 <_usb_d_dev_out_next+0x1b4>
    21a4:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    21a6:	6821      	ldr	r1, [r4, #0]
    21a8:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    21aa:	0169      	lsls	r1, r5, #5
    21ac:	481c      	ldr	r0, [pc, #112]	; (2220 <_usb_d_dev_out_next+0x214>)
    21ae:	500a      	str	r2, [r1, r0]
    21b0:	e7cb      	b.n	214a <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    21b2:	428b      	cmp	r3, r1
    21b4:	d2f7      	bcs.n	21a6 <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    21b6:	7ce1      	ldrb	r1, [r4, #19]
    21b8:	2020      	movs	r0, #32
    21ba:	4301      	orrs	r1, r0
    21bc:	74e1      	strb	r1, [r4, #19]
    21be:	e7f2      	b.n	21a6 <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    21c0:	2380      	movs	r3, #128	; 0x80
    21c2:	019b      	lsls	r3, r3, #6
    21c4:	e7ef      	b.n	21a6 <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    21c6:	016b      	lsls	r3, r5, #5
    21c8:	4a19      	ldr	r2, [pc, #100]	; (2230 <_usb_d_dev_out_next+0x224>)
    21ca:	4694      	mov	ip, r2
    21cc:	4463      	add	r3, ip
    21ce:	222d      	movs	r2, #45	; 0x2d
    21d0:	701a      	strb	r2, [r3, #0]
    21d2:	e776      	b.n	20c2 <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    21d4:	016a      	lsls	r2, r5, #5
    21d6:	4b12      	ldr	r3, [pc, #72]	; (2220 <_usb_d_dev_out_next+0x214>)
    21d8:	189b      	adds	r3, r3, r2
    21da:	2200      	movs	r2, #0
    21dc:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    21de:	322d      	adds	r2, #45	; 0x2d
    21e0:	e7c8      	b.n	2174 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    21e2:	05bf      	lsls	r7, r7, #22
    21e4:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    21e6:	7cc3      	ldrb	r3, [r0, #19]
    21e8:	2207      	movs	r2, #7
    21ea:	401a      	ands	r2, r3
    21ec:	4691      	mov	r9, r2
    21ee:	e735      	b.n	205c <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    21f0:	4643      	mov	r3, r8
    21f2:	2b00      	cmp	r3, #0
    21f4:	d10c      	bne.n	2210 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    21f6:	68a3      	ldr	r3, [r4, #8]
    21f8:	4453      	add	r3, sl
    21fa:	60a3      	str	r3, [r4, #8]
    21fc:	e757      	b.n	20ae <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    21fe:	7cc3      	ldrb	r3, [r0, #19]
    2200:	2207      	movs	r2, #7
    2202:	401a      	ands	r2, r3
    2204:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    2206:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2208:	2300      	movs	r3, #0
    220a:	469b      	mov	fp, r3
    220c:	469a      	mov	sl, r3
    220e:	e72b      	b.n	2068 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    2210:	8a23      	ldrh	r3, [r4, #16]
    2212:	42bb      	cmp	r3, r7
    2214:	d900      	bls.n	2218 <_usb_d_dev_out_next+0x20c>
    2216:	e743      	b.n	20a0 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    2218:	68a3      	ldr	r3, [r4, #8]
    221a:	4453      	add	r3, sl
    221c:	60a3      	str	r3, [r4, #8]
    221e:	e746      	b.n	20ae <_usb_d_dev_out_next+0xa2>
    2220:	20000580 	.word	0x20000580
    2224:	000003ff 	.word	0x000003ff
    2228:	41005100 	.word	0x41005100
    222c:	00003aed 	.word	0x00003aed
    2230:	41005108 	.word	0x41005108
    2234:	00001c8d 	.word	0x00001c8d
    2238:	f0003fff 	.word	0xf0003fff
    223c:	41005109 	.word	0x41005109

00002240 <_usb_d_dev_init>:
{
    2240:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    2242:	4b31      	ldr	r3, [pc, #196]	; (2308 <_usb_d_dev_init+0xc8>)
    2244:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    2246:	07db      	lsls	r3, r3, #31
    2248:	d41f      	bmi.n	228a <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    224a:	492f      	ldr	r1, [pc, #188]	; (2308 <_usb_d_dev_init+0xc8>)
    224c:	2203      	movs	r2, #3
    224e:	788b      	ldrb	r3, [r1, #2]
    2250:	4213      	tst	r3, r2
    2252:	d1fc      	bne.n	224e <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    2254:	4b2c      	ldr	r3, [pc, #176]	; (2308 <_usb_d_dev_init+0xc8>)
    2256:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    2258:	079b      	lsls	r3, r3, #30
    225a:	d50e      	bpl.n	227a <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    225c:	4a2a      	ldr	r2, [pc, #168]	; (2308 <_usb_d_dev_init+0xc8>)
    225e:	7813      	ldrb	r3, [r2, #0]
    2260:	2102      	movs	r1, #2
    2262:	438b      	bics	r3, r1
    2264:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2266:	0011      	movs	r1, r2
    2268:	2203      	movs	r2, #3
    226a:	788b      	ldrb	r3, [r1, #2]
    226c:	4213      	tst	r3, r2
    226e:	d1fc      	bne.n	226a <_usb_d_dev_init+0x2a>
    2270:	4925      	ldr	r1, [pc, #148]	; (2308 <_usb_d_dev_init+0xc8>)
    2272:	2202      	movs	r2, #2
    2274:	788b      	ldrb	r3, [r1, #2]
    2276:	4213      	tst	r3, r2
    2278:	d1fc      	bne.n	2274 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    227a:	2201      	movs	r2, #1
    227c:	4b22      	ldr	r3, [pc, #136]	; (2308 <_usb_d_dev_init+0xc8>)
    227e:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2280:	0019      	movs	r1, r3
    2282:	3202      	adds	r2, #2
    2284:	788b      	ldrb	r3, [r1, #2]
    2286:	4213      	tst	r3, r2
    2288:	d1fc      	bne.n	2284 <_usb_d_dev_init+0x44>
    228a:	491f      	ldr	r1, [pc, #124]	; (2308 <_usb_d_dev_init+0xc8>)
    228c:	2201      	movs	r2, #1
    228e:	788b      	ldrb	r3, [r1, #2]
    2290:	4213      	tst	r3, r2
    2292:	d1fc      	bne.n	228e <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2294:	4b1d      	ldr	r3, [pc, #116]	; (230c <_usb_d_dev_init+0xcc>)
    2296:	4a1e      	ldr	r2, [pc, #120]	; (2310 <_usb_d_dev_init+0xd0>)
    2298:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    229a:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    229c:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    229e:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    22a0:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    22a2:	4b1c      	ldr	r3, [pc, #112]	; (2314 <_usb_d_dev_init+0xd4>)
    22a4:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    22a6:	4b1c      	ldr	r3, [pc, #112]	; (2318 <_usb_d_dev_init+0xd8>)
    22a8:	681b      	ldr	r3, [r3, #0]
    22aa:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    22ac:	211f      	movs	r1, #31
    22ae:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    22b0:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    22b2:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    22b4:	019b      	lsls	r3, r3, #6
    22b6:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    22b8:	2a1f      	cmp	r2, #31
    22ba:	d01f      	beq.n	22fc <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    22bc:	291f      	cmp	r1, #31
    22be:	d01f      	beq.n	2300 <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    22c0:	2b07      	cmp	r3, #7
    22c2:	d01f      	beq.n	2304 <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    22c4:	0192      	lsls	r2, r2, #6
    22c6:	430a      	orrs	r2, r1
    22c8:	031b      	lsls	r3, r3, #12
    22ca:	4313      	orrs	r3, r2
    22cc:	4a0e      	ldr	r2, [pc, #56]	; (2308 <_usb_d_dev_init+0xc8>)
    22ce:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    22d0:	78d3      	ldrb	r3, [r2, #3]
    22d2:	2103      	movs	r1, #3
    22d4:	430b      	orrs	r3, r1
    22d6:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    22d8:	78d3      	ldrb	r3, [r2, #3]
    22da:	210c      	movs	r1, #12
    22dc:	430b      	orrs	r3, r1
    22de:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    22e0:	2304      	movs	r3, #4
    22e2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    22e4:	0011      	movs	r1, r2
    22e6:	2203      	movs	r2, #3
    22e8:	788b      	ldrb	r3, [r1, #2]
    22ea:	4213      	tst	r3, r2
    22ec:	d1fc      	bne.n	22e8 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    22ee:	4b06      	ldr	r3, [pc, #24]	; (2308 <_usb_d_dev_init+0xc8>)
    22f0:	4a06      	ldr	r2, [pc, #24]	; (230c <_usb_d_dev_init+0xcc>)
    22f2:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    22f4:	2201      	movs	r2, #1
    22f6:	811a      	strh	r2, [r3, #8]
}
    22f8:	2000      	movs	r0, #0
    22fa:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    22fc:	3a1a      	subs	r2, #26
    22fe:	e7dd      	b.n	22bc <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    2300:	3902      	subs	r1, #2
    2302:	e7dd      	b.n	22c0 <_usb_d_dev_init+0x80>
		pad_trim = 5;
    2304:	3b02      	subs	r3, #2
    2306:	e7dd      	b.n	22c4 <_usb_d_dev_init+0x84>
    2308:	41005000 	.word	0x41005000
    230c:	20000580 	.word	0x20000580
    2310:	00001bcd 	.word	0x00001bcd
    2314:	00001e21 	.word	0x00001e21
    2318:	00806024 	.word	0x00806024

0000231c <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    231c:	4b10      	ldr	r3, [pc, #64]	; (2360 <_usb_d_dev_enable+0x44>)
    231e:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    2320:	079b      	lsls	r3, r3, #30
    2322:	d11a      	bne.n	235a <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2324:	490e      	ldr	r1, [pc, #56]	; (2360 <_usb_d_dev_enable+0x44>)
    2326:	2203      	movs	r2, #3
    2328:	788b      	ldrb	r3, [r1, #2]
    232a:	4213      	tst	r3, r2
    232c:	d1fc      	bne.n	2328 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    232e:	4b0c      	ldr	r3, [pc, #48]	; (2360 <_usb_d_dev_enable+0x44>)
    2330:	781b      	ldrb	r3, [r3, #0]
    2332:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    2334:	079a      	lsls	r2, r3, #30
    2336:	d408      	bmi.n	234a <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    2338:	2202      	movs	r2, #2
    233a:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    233c:	4a08      	ldr	r2, [pc, #32]	; (2360 <_usb_d_dev_enable+0x44>)
    233e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2340:	0011      	movs	r1, r2
    2342:	2203      	movs	r2, #3
    2344:	788b      	ldrb	r3, [r1, #2]
    2346:	4213      	tst	r3, r2
    2348:	d1fc      	bne.n	2344 <_usb_d_dev_enable+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    234a:	2280      	movs	r2, #128	; 0x80
    234c:	4b05      	ldr	r3, [pc, #20]	; (2364 <_usb_d_dev_enable+0x48>)
    234e:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2350:	4a05      	ldr	r2, [pc, #20]	; (2368 <_usb_d_dev_enable+0x4c>)
    2352:	4b03      	ldr	r3, [pc, #12]	; (2360 <_usb_d_dev_enable+0x44>)
    2354:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    2356:	2000      	movs	r0, #0
}
    2358:	4770      	bx	lr
		return -USB_ERR_DENIED;
    235a:	2011      	movs	r0, #17
    235c:	4240      	negs	r0, r0
    235e:	e7fb      	b.n	2358 <_usb_d_dev_enable+0x3c>
    2360:	41005000 	.word	0x41005000
    2364:	e000e100 	.word	0xe000e100
    2368:	0000028d 	.word	0x0000028d

0000236c <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    236c:	4a02      	ldr	r2, [pc, #8]	; (2378 <_usb_d_dev_attach+0xc>)
    236e:	8913      	ldrh	r3, [r2, #8]
    2370:	2101      	movs	r1, #1
    2372:	438b      	bics	r3, r1
    2374:	8113      	strh	r3, [r2, #8]
}
    2376:	4770      	bx	lr
    2378:	41005000 	.word	0x41005000

0000237c <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    237c:	2380      	movs	r3, #128	; 0x80
    237e:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    2380:	4b01      	ldr	r3, [pc, #4]	; (2388 <_usb_d_dev_set_address+0xc>)
    2382:	7298      	strb	r0, [r3, #10]
}
    2384:	4770      	bx	lr
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	41005000 	.word	0x41005000

0000238c <_usb_d_dev_ep_init>:
{
    238c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    238e:	240f      	movs	r4, #15
    2390:	4004      	ands	r4, r0
    2392:	b243      	sxtb	r3, r0
    2394:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2396:	2c00      	cmp	r4, #0
    2398:	d054      	beq.n	2444 <_usb_d_dev_ep_init+0xb8>
    239a:	0025      	movs	r5, r4
    239c:	2b00      	cmp	r3, #0
    239e:	db07      	blt.n	23b0 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    23a0:	2303      	movs	r3, #3
    23a2:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    23a4:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    23a6:	2c02      	cmp	r4, #2
    23a8:	d950      	bls.n	244c <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    23aa:	2012      	movs	r0, #18
    23ac:	4240      	negs	r0, r0
    23ae:	e025      	b.n	23fc <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    23b0:	1ca5      	adds	r5, r4, #2
    23b2:	e7f5      	b.n	23a0 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    23b4:	4663      	mov	r3, ip
    23b6:	2b00      	cmp	r3, #0
    23b8:	db21      	blt.n	23fe <_usb_d_dev_ep_init+0x72>
    23ba:	007b      	lsls	r3, r7, #1
    23bc:	19db      	adds	r3, r3, r7
    23be:	009b      	lsls	r3, r3, #2
    23c0:	4c3b      	ldr	r4, [pc, #236]	; (24b0 <_usb_d_dev_ep_init+0x124>)
    23c2:	591b      	ldr	r3, [r3, r4]
    23c4:	2b00      	cmp	r3, #0
    23c6:	d166      	bne.n	2496 <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    23c8:	007b      	lsls	r3, r7, #1
    23ca:	19df      	adds	r7, r3, r7
    23cc:	00bf      	lsls	r7, r7, #2
    23ce:	4b38      	ldr	r3, [pc, #224]	; (24b0 <_usb_d_dev_ep_init+0x124>)
    23d0:	58ff      	ldr	r7, [r7, r3]
    23d2:	4b38      	ldr	r3, [pc, #224]	; (24b4 <_usb_d_dev_ep_init+0x128>)
    23d4:	00ae      	lsls	r6, r5, #2
    23d6:	1974      	adds	r4, r6, r5
    23d8:	00a4      	lsls	r4, r4, #2
    23da:	191c      	adds	r4, r3, r4
    23dc:	3480      	adds	r4, #128	; 0x80
    23de:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    23e0:	3360      	adds	r3, #96	; 0x60
    23e2:	1974      	adds	r4, r6, r5
    23e4:	00a4      	lsls	r4, r4, #2
    23e6:	191c      	adds	r4, r3, r4
    23e8:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    23ea:	3427      	adds	r4, #39	; 0x27
    23ec:	3101      	adds	r1, #1
    23ee:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    23f0:	1975      	adds	r5, r6, r5
    23f2:	00ad      	lsls	r5, r5, #2
    23f4:	195b      	adds	r3, r3, r5
    23f6:	3326      	adds	r3, #38	; 0x26
    23f8:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    23fa:	2000      	movs	r0, #0
}
    23fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    23fe:	007b      	lsls	r3, r7, #1
    2400:	19db      	adds	r3, r3, r7
    2402:	009b      	lsls	r3, r3, #2
    2404:	4c2a      	ldr	r4, [pc, #168]	; (24b0 <_usb_d_dev_ep_init+0x124>)
    2406:	18e3      	adds	r3, r4, r3
    2408:	685b      	ldr	r3, [r3, #4]
    240a:	2b00      	cmp	r3, #0
    240c:	d106      	bne.n	241c <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    240e:	007b      	lsls	r3, r7, #1
    2410:	19df      	adds	r7, r3, r7
    2412:	00bf      	lsls	r7, r7, #2
    2414:	4b26      	ldr	r3, [pc, #152]	; (24b0 <_usb_d_dev_ep_init+0x124>)
    2416:	19df      	adds	r7, r3, r7
    2418:	687f      	ldr	r7, [r7, #4]
    241a:	e7da      	b.n	23d2 <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    241c:	007b      	lsls	r3, r7, #1
    241e:	19db      	adds	r3, r3, r7
    2420:	009b      	lsls	r3, r3, #2
    2422:	4c23      	ldr	r4, [pc, #140]	; (24b0 <_usb_d_dev_ep_init+0x124>)
    2424:	18e3      	adds	r3, r4, r3
    2426:	895b      	ldrh	r3, [r3, #10]
    2428:	4293      	cmp	r3, r2
    242a:	daf0      	bge.n	240e <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    242c:	2013      	movs	r0, #19
    242e:	4240      	negs	r0, r0
    2430:	e7e4      	b.n	23fc <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    2432:	2014      	movs	r0, #20
    2434:	4240      	negs	r0, r0
    2436:	e7e1      	b.n	23fc <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    2438:	2014      	movs	r0, #20
    243a:	4240      	negs	r0, r0
    243c:	e7de      	b.n	23fc <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    243e:	2013      	movs	r0, #19
    2440:	4240      	negs	r0, r0
    2442:	e7db      	b.n	23fc <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2444:	2303      	movs	r3, #3
    2446:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    2448:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    244a:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    244c:	00ab      	lsls	r3, r5, #2
    244e:	195b      	adds	r3, r3, r5
    2450:	009e      	lsls	r6, r3, #2
    2452:	4b18      	ldr	r3, [pc, #96]	; (24b4 <_usb_d_dev_ep_init+0x128>)
    2454:	199b      	adds	r3, r3, r6
    2456:	3386      	adds	r3, #134	; 0x86
    2458:	781b      	ldrb	r3, [r3, #0]
    245a:	2bff      	cmp	r3, #255	; 0xff
    245c:	d1e9      	bne.n	2432 <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    245e:	2900      	cmp	r1, #0
    2460:	d1a8      	bne.n	23b4 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2462:	2c00      	cmp	r4, #0
    2464:	d004      	beq.n	2470 <_usb_d_dev_ep_init+0xe4>
    2466:	4663      	mov	r3, ip
    2468:	2b00      	cmp	r3, #0
    246a:	db01      	blt.n	2470 <_usb_d_dev_ep_init+0xe4>
    246c:	3402      	adds	r4, #2
    246e:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    2470:	00a3      	lsls	r3, r4, #2
    2472:	191b      	adds	r3, r3, r4
    2474:	009b      	lsls	r3, r3, #2
    2476:	4c0f      	ldr	r4, [pc, #60]	; (24b4 <_usb_d_dev_ep_init+0x128>)
    2478:	18e4      	adds	r4, r4, r3
    247a:	3486      	adds	r4, #134	; 0x86
    247c:	7823      	ldrb	r3, [r4, #0]
    247e:	2bff      	cmp	r3, #255	; 0xff
    2480:	d1da      	bne.n	2438 <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    2482:	007b      	lsls	r3, r7, #1
    2484:	19db      	adds	r3, r3, r7
    2486:	009b      	lsls	r3, r3, #2
    2488:	4c09      	ldr	r4, [pc, #36]	; (24b0 <_usb_d_dev_ep_init+0x124>)
    248a:	591b      	ldr	r3, [r3, r4]
    248c:	2b00      	cmp	r3, #0
    248e:	d0d6      	beq.n	243e <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2490:	4663      	mov	r3, ip
    2492:	2b00      	cmp	r3, #0
    2494:	dbb3      	blt.n	23fe <_usb_d_dev_ep_init+0x72>
    2496:	007b      	lsls	r3, r7, #1
    2498:	19db      	adds	r3, r3, r7
    249a:	009b      	lsls	r3, r3, #2
    249c:	4c04      	ldr	r4, [pc, #16]	; (24b0 <_usb_d_dev_ep_init+0x124>)
    249e:	18e3      	adds	r3, r4, r3
    24a0:	891b      	ldrh	r3, [r3, #8]
    24a2:	4293      	cmp	r3, r2
    24a4:	db00      	blt.n	24a8 <_usb_d_dev_ep_init+0x11c>
    24a6:	e78f      	b.n	23c8 <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    24a8:	2013      	movs	r0, #19
    24aa:	4240      	negs	r0, r0
    24ac:	e7a6      	b.n	23fc <_usb_d_dev_ep_init+0x70>
    24ae:	46c0      	nop			; (mov r8, r8)
    24b0:	00003df4 	.word	0x00003df4
    24b4:	20000580 	.word	0x20000580

000024b8 <_usb_d_dev_ep_deinit>:
{
    24b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24ba:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    24bc:	240f      	movs	r4, #15
    24be:	4004      	ands	r4, r0
    24c0:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    24c2:	2c00      	cmp	r4, #0
    24c4:	d010      	beq.n	24e8 <_usb_d_dev_ep_deinit+0x30>
    24c6:	0020      	movs	r0, r4
    24c8:	2f00      	cmp	r7, #0
    24ca:	db02      	blt.n	24d2 <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    24cc:	2c02      	cmp	r4, #2
    24ce:	d902      	bls.n	24d6 <_usb_d_dev_ep_deinit+0x1e>
}
    24d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    24d2:	1ca0      	adds	r0, r4, #2
    24d4:	e7fa      	b.n	24cc <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    24d6:	0006      	movs	r6, r0
    24d8:	3001      	adds	r0, #1
    24da:	0083      	lsls	r3, r0, #2
    24dc:	1818      	adds	r0, r3, r0
    24de:	0080      	lsls	r0, r0, #2
    24e0:	4b25      	ldr	r3, [pc, #148]	; (2578 <_usb_d_dev_ep_deinit+0xc0>)
    24e2:	3360      	adds	r3, #96	; 0x60
    24e4:	1818      	adds	r0, r3, r0
    24e6:	e002      	b.n	24ee <_usb_d_dev_ep_deinit+0x36>
    24e8:	4823      	ldr	r0, [pc, #140]	; (2578 <_usb_d_dev_ep_deinit+0xc0>)
    24ea:	3074      	adds	r0, #116	; 0x74
    24ec:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    24ee:	00b3      	lsls	r3, r6, #2
    24f0:	199b      	adds	r3, r3, r6
    24f2:	009a      	lsls	r2, r3, #2
    24f4:	4b20      	ldr	r3, [pc, #128]	; (2578 <_usb_d_dev_ep_deinit+0xc0>)
    24f6:	189b      	adds	r3, r3, r2
    24f8:	3386      	adds	r3, #134	; 0x86
    24fa:	781b      	ldrb	r3, [r3, #0]
    24fc:	2bff      	cmp	r3, #255	; 0xff
    24fe:	d0e7      	beq.n	24d0 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    2500:	0ff9      	lsrs	r1, r7, #31
    2502:	2203      	movs	r2, #3
    2504:	4b1d      	ldr	r3, [pc, #116]	; (257c <_usb_d_dev_ep_deinit+0xc4>)
    2506:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2508:	00b3      	lsls	r3, r6, #2
    250a:	199b      	adds	r3, r3, r6
    250c:	009a      	lsls	r2, r3, #2
    250e:	4b1a      	ldr	r3, [pc, #104]	; (2578 <_usb_d_dev_ep_deinit+0xc0>)
    2510:	189b      	adds	r3, r3, r2
    2512:	3380      	adds	r3, #128	; 0x80
    2514:	79da      	ldrb	r2, [r3, #7]
    2516:	2307      	movs	r3, #7
    2518:	4013      	ands	r3, r2
    251a:	2b01      	cmp	r3, #1
    251c:	d01b      	beq.n	2556 <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    251e:	2f00      	cmp	r7, #0
    2520:	db1f      	blt.n	2562 <_usb_d_dev_ep_deinit+0xaa>
    2522:	016d      	lsls	r5, r5, #5
    2524:	4b16      	ldr	r3, [pc, #88]	; (2580 <_usb_d_dev_ep_deinit+0xc8>)
    2526:	469c      	mov	ip, r3
    2528:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    252a:	2280      	movs	r2, #128	; 0x80
    252c:	0052      	lsls	r2, r2, #1
    252e:	5cab      	ldrb	r3, [r5, r2]
    2530:	2107      	movs	r1, #7
    2532:	438b      	bics	r3, r1
    2534:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    2536:	4b10      	ldr	r3, [pc, #64]	; (2578 <_usb_d_dev_ep_deinit+0xc0>)
    2538:	3360      	adds	r3, #96	; 0x60
    253a:	00b1      	lsls	r1, r6, #2
    253c:	198a      	adds	r2, r1, r6
    253e:	0092      	lsls	r2, r2, #2
    2540:	189a      	adds	r2, r3, r2
    2542:	3227      	adds	r2, #39	; 0x27
    2544:	2000      	movs	r0, #0
    2546:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    2548:	198e      	adds	r6, r1, r6
    254a:	00b6      	lsls	r6, r6, #2
    254c:	199b      	adds	r3, r3, r6
    254e:	3326      	adds	r3, #38	; 0x26
    2550:	22ff      	movs	r2, #255	; 0xff
    2552:	701a      	strb	r2, [r3, #0]
    2554:	e7bc      	b.n	24d0 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    2556:	3508      	adds	r5, #8
    2558:	016d      	lsls	r5, r5, #5
    255a:	2200      	movs	r2, #0
    255c:	4b08      	ldr	r3, [pc, #32]	; (2580 <_usb_d_dev_ep_deinit+0xc8>)
    255e:	54ea      	strb	r2, [r5, r3]
    2560:	e7e9      	b.n	2536 <_usb_d_dev_ep_deinit+0x7e>
    2562:	0164      	lsls	r4, r4, #5
    2564:	4b06      	ldr	r3, [pc, #24]	; (2580 <_usb_d_dev_ep_deinit+0xc8>)
    2566:	469c      	mov	ip, r3
    2568:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    256a:	2280      	movs	r2, #128	; 0x80
    256c:	0052      	lsls	r2, r2, #1
    256e:	5ca3      	ldrb	r3, [r4, r2]
    2570:	2170      	movs	r1, #112	; 0x70
    2572:	438b      	bics	r3, r1
    2574:	54a3      	strb	r3, [r4, r2]
    2576:	e7de      	b.n	2536 <_usb_d_dev_ep_deinit+0x7e>
    2578:	20000580 	.word	0x20000580
    257c:	00001cb5 	.word	0x00001cb5
    2580:	41005000 	.word	0x41005000

00002584 <_usb_d_dev_ep_enable>:
{
    2584:	b5f0      	push	{r4, r5, r6, r7, lr}
    2586:	46c6      	mov	lr, r8
    2588:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    258a:	220f      	movs	r2, #15
    258c:	4002      	ands	r2, r0
    258e:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2590:	2a00      	cmp	r2, #0
    2592:	d100      	bne.n	2596 <_usb_d_dev_ep_enable+0x12>
    2594:	e092      	b.n	26bc <_usb_d_dev_ep_enable+0x138>
    2596:	0013      	movs	r3, r2
    2598:	2800      	cmp	r0, #0
    259a:	db0b      	blt.n	25b4 <_usb_d_dev_ep_enable+0x30>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    259c:	0011      	movs	r1, r2
    259e:	3208      	adds	r2, #8
    25a0:	0152      	lsls	r2, r2, #5
    25a2:	4caa      	ldr	r4, [pc, #680]	; (284c <_usb_d_dev_ep_enable+0x2c8>)
    25a4:	5d15      	ldrb	r5, [r2, r4]
    25a6:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    25a8:	2902      	cmp	r1, #2
    25aa:	d800      	bhi.n	25ae <_usb_d_dev_ep_enable+0x2a>
    25ac:	e08d      	b.n	26ca <_usb_d_dev_ep_enable+0x146>
		return -USB_ERR_PARAM;
    25ae:	2012      	movs	r0, #18
    25b0:	4240      	negs	r0, r0
    25b2:	e0e5      	b.n	2780 <_usb_d_dev_ep_enable+0x1fc>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    25b4:	1c93      	adds	r3, r2, #2
    25b6:	e7f1      	b.n	259c <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    25b8:	3276      	adds	r2, #118	; 0x76
    25ba:	422a      	tst	r2, r5
    25bc:	d175      	bne.n	26aa <_usb_d_dev_ep_enable+0x126>
    25be:	4aa3      	ldr	r2, [pc, #652]	; (284c <_usb_d_dev_ep_enable+0x2c8>)
    25c0:	4690      	mov	r8, r2
    25c2:	4444      	add	r4, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    25c4:	2011      	movs	r0, #17
    25c6:	2280      	movs	r2, #128	; 0x80
    25c8:	0052      	lsls	r2, r2, #1
    25ca:	54a0      	strb	r0, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    25cc:	009a      	lsls	r2, r3, #2
    25ce:	18d2      	adds	r2, r2, r3
    25d0:	0095      	lsls	r5, r2, #2
    25d2:	4a9f      	ldr	r2, [pc, #636]	; (2850 <_usb_d_dev_ep_enable+0x2cc>)
    25d4:	3260      	adds	r2, #96	; 0x60
    25d6:	1952      	adds	r2, r2, r5
    25d8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    25da:	0395      	lsls	r5, r2, #14
    25dc:	489d      	ldr	r0, [pc, #628]	; (2854 <_usb_d_dev_ep_enable+0x2d0>)
    25de:	4005      	ands	r5, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    25e0:	2080      	movs	r0, #128	; 0x80
    25e2:	0080      	lsls	r0, r0, #2
    25e4:	4282      	cmp	r2, r0
    25e6:	d900      	bls.n	25ea <_usb_d_dev_ep_enable+0x66>
    25e8:	e0cd      	b.n	2786 <_usb_d_dev_ep_enable+0x202>
    25ea:	3801      	subs	r0, #1
    25ec:	38ff      	subs	r0, #255	; 0xff
    25ee:	4282      	cmp	r2, r0
    25f0:	d900      	bls.n	25f4 <_usb_d_dev_ep_enable+0x70>
    25f2:	e113      	b.n	281c <_usb_d_dev_ep_enable+0x298>
    25f4:	2a80      	cmp	r2, #128	; 0x80
    25f6:	d900      	bls.n	25fa <_usb_d_dev_ep_enable+0x76>
    25f8:	e100      	b.n	27fc <_usb_d_dev_ep_enable+0x278>
    25fa:	2a40      	cmp	r2, #64	; 0x40
    25fc:	d900      	bls.n	2600 <_usb_d_dev_ep_enable+0x7c>
    25fe:	e115      	b.n	282c <_usb_d_dev_ep_enable+0x2a8>
    2600:	2a20      	cmp	r2, #32
    2602:	d900      	bls.n	2606 <_usb_d_dev_ep_enable+0x82>
    2604:	e102      	b.n	280c <_usb_d_dev_ep_enable+0x288>
    2606:	2a10      	cmp	r2, #16
    2608:	d900      	bls.n	260c <_usb_d_dev_ep_enable+0x88>
    260a:	e117      	b.n	283c <_usb_d_dev_ep_enable+0x2b8>
    260c:	38f8      	subs	r0, #248	; 0xf8
    260e:	4290      	cmp	r0, r2
    2610:	4180      	sbcs	r0, r0
    2612:	4240      	negs	r0, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2614:	0706      	lsls	r6, r0, #28
    2616:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2618:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    261a:	0495      	lsls	r5, r2, #18
    261c:	0cad      	lsrs	r5, r5, #18
    261e:	e0b9      	b.n	2794 <_usb_d_dev_ep_enable+0x210>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2620:	2270      	movs	r2, #112	; 0x70
    2622:	422a      	tst	r2, r5
    2624:	d144      	bne.n	26b0 <_usb_d_dev_ep_enable+0x12c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    2626:	488a      	ldr	r0, [pc, #552]	; (2850 <_usb_d_dev_ep_enable+0x2cc>)
    2628:	009e      	lsls	r6, r3, #2
    262a:	18f2      	adds	r2, r6, r3
    262c:	0092      	lsls	r2, r2, #2
    262e:	1882      	adds	r2, r0, r2
    2630:	3280      	adds	r2, #128	; 0x80
    2632:	79d2      	ldrb	r2, [r2, #7]
    2634:	0752      	lsls	r2, r2, #29
    2636:	0e52      	lsrs	r2, r2, #25
    2638:	4315      	orrs	r5, r2
    263a:	4a84      	ldr	r2, [pc, #528]	; (284c <_usb_d_dev_ep_enable+0x2c8>)
    263c:	4694      	mov	ip, r2
    263e:	4464      	add	r4, ip
    2640:	2280      	movs	r2, #128	; 0x80
    2642:	0052      	lsls	r2, r2, #1
    2644:	54a5      	strb	r5, [r4, r2]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2646:	3060      	adds	r0, #96	; 0x60
    2648:	18f6      	adds	r6, r6, r3
    264a:	00b6      	lsls	r6, r6, #2
    264c:	1980      	adds	r0, r0, r6
    264e:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    2650:	0485      	lsls	r5, r0, #18
    2652:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2654:	3201      	adds	r2, #1
    2656:	32ff      	adds	r2, #255	; 0xff
    2658:	2307      	movs	r3, #7
    265a:	4290      	cmp	r0, r2
    265c:	d814      	bhi.n	2688 <_usb_d_dev_ep_enable+0x104>
    265e:	3a01      	subs	r2, #1
    2660:	3aff      	subs	r2, #255	; 0xff
    2662:	3b01      	subs	r3, #1
    2664:	4290      	cmp	r0, r2
    2666:	d80f      	bhi.n	2688 <_usb_d_dev_ep_enable+0x104>
    2668:	3b01      	subs	r3, #1
    266a:	2880      	cmp	r0, #128	; 0x80
    266c:	d80c      	bhi.n	2688 <_usb_d_dev_ep_enable+0x104>
    266e:	3b01      	subs	r3, #1
    2670:	2840      	cmp	r0, #64	; 0x40
    2672:	d809      	bhi.n	2688 <_usb_d_dev_ep_enable+0x104>
    2674:	3b01      	subs	r3, #1
    2676:	2820      	cmp	r0, #32
    2678:	d806      	bhi.n	2688 <_usb_d_dev_ep_enable+0x104>
    267a:	3b01      	subs	r3, #1
    267c:	2810      	cmp	r0, #16
    267e:	d803      	bhi.n	2688 <_usb_d_dev_ep_enable+0x104>
    2680:	3af8      	subs	r2, #248	; 0xf8
    2682:	4282      	cmp	r2, r0
    2684:	4192      	sbcs	r2, r2
    2686:	4253      	negs	r3, r2
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2688:	071b      	lsls	r3, r3, #28
    268a:	432b      	orrs	r3, r5
    268c:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    268e:	2280      	movs	r2, #128	; 0x80
    2690:	2382      	movs	r3, #130	; 0x82
    2692:	005b      	lsls	r3, r3, #1
    2694:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    2696:	0149      	lsls	r1, r1, #5
    2698:	4b6d      	ldr	r3, [pc, #436]	; (2850 <_usb_d_dev_ep_enable+0x2cc>)
    269a:	1859      	adds	r1, r3, r1
    269c:	2300      	movs	r3, #0
    269e:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    26a0:	2000      	movs	r0, #0
    26a2:	e06d      	b.n	2780 <_usb_d_dev_ep_enable+0x1fc>
		return -USB_ERR_PARAM;
    26a4:	2012      	movs	r0, #18
    26a6:	4240      	negs	r0, r0
    26a8:	e06a      	b.n	2780 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    26aa:	2014      	movs	r0, #20
    26ac:	4240      	negs	r0, r0
    26ae:	e067      	b.n	2780 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    26b0:	2014      	movs	r0, #20
    26b2:	4240      	negs	r0, r0
    26b4:	e064      	b.n	2780 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    26b6:	2014      	movs	r0, #20
    26b8:	4240      	negs	r0, r0
    26ba:	e061      	b.n	2780 <_usb_d_dev_ep_enable+0x1fc>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    26bc:	2380      	movs	r3, #128	; 0x80
    26be:	005b      	lsls	r3, r3, #1
    26c0:	4a62      	ldr	r2, [pc, #392]	; (284c <_usb_d_dev_ep_enable+0x2c8>)
    26c2:	5cd5      	ldrb	r5, [r2, r3]
    26c4:	b2ed      	uxtb	r5, r5
    26c6:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    26c8:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    26ca:	009a      	lsls	r2, r3, #2
    26cc:	18d2      	adds	r2, r2, r3
    26ce:	0094      	lsls	r4, r2, #2
    26d0:	4a5f      	ldr	r2, [pc, #380]	; (2850 <_usb_d_dev_ep_enable+0x2cc>)
    26d2:	1912      	adds	r2, r2, r4
    26d4:	3286      	adds	r2, #134	; 0x86
    26d6:	7812      	ldrb	r2, [r2, #0]
    26d8:	4694      	mov	ip, r2
    26da:	2aff      	cmp	r2, #255	; 0xff
    26dc:	d0e2      	beq.n	26a4 <_usb_d_dev_ep_enable+0x120>
    26de:	014c      	lsls	r4, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    26e0:	4a5b      	ldr	r2, [pc, #364]	; (2850 <_usb_d_dev_ep_enable+0x2cc>)
    26e2:	1917      	adds	r7, r2, r4
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    26e4:	009e      	lsls	r6, r3, #2
    26e6:	18f6      	adds	r6, r6, r3
    26e8:	00b6      	lsls	r6, r6, #2
    26ea:	1992      	adds	r2, r2, r6
    26ec:	3280      	adds	r2, #128	; 0x80
    26ee:	79d6      	ldrb	r6, [r2, #7]
    26f0:	2207      	movs	r2, #7
    26f2:	4032      	ands	r2, r6
    26f4:	2a01      	cmp	r2, #1
    26f6:	d100      	bne.n	26fa <_usb_d_dev_ep_enable+0x176>
    26f8:	e75e      	b.n	25b8 <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    26fa:	2800      	cmp	r0, #0
    26fc:	db90      	blt.n	2620 <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    26fe:	076a      	lsls	r2, r5, #29
    2700:	d1d9      	bne.n	26b6 <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    2702:	4853      	ldr	r0, [pc, #332]	; (2850 <_usb_d_dev_ep_enable+0x2cc>)
    2704:	009e      	lsls	r6, r3, #2
    2706:	18f2      	adds	r2, r6, r3
    2708:	0092      	lsls	r2, r2, #2
    270a:	1882      	adds	r2, r0, r2
    270c:	3280      	adds	r2, #128	; 0x80
    270e:	79d2      	ldrb	r2, [r2, #7]
    2710:	0752      	lsls	r2, r2, #29
    2712:	0f52      	lsrs	r2, r2, #29
    2714:	4315      	orrs	r5, r2
    2716:	4a4d      	ldr	r2, [pc, #308]	; (284c <_usb_d_dev_ep_enable+0x2c8>)
    2718:	4694      	mov	ip, r2
    271a:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    271c:	2280      	movs	r2, #128	; 0x80
    271e:	0052      	lsls	r2, r2, #1
    2720:	54a5      	strb	r5, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2722:	3060      	adds	r0, #96	; 0x60
    2724:	18f6      	adds	r6, r6, r3
    2726:	00b6      	lsls	r6, r6, #2
    2728:	1980      	adds	r0, r0, r6
    272a:	8c85      	ldrh	r5, [r0, #36]	; 0x24
    272c:	03ab      	lsls	r3, r5, #14
    272e:	4849      	ldr	r0, [pc, #292]	; (2854 <_usb_d_dev_ep_enable+0x2d0>)
    2730:	4018      	ands	r0, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2732:	3201      	adds	r2, #1
    2734:	32ff      	adds	r2, #255	; 0xff
    2736:	2307      	movs	r3, #7
    2738:	4295      	cmp	r5, r2
    273a:	d814      	bhi.n	2766 <_usb_d_dev_ep_enable+0x1e2>
    273c:	3a01      	subs	r2, #1
    273e:	3aff      	subs	r2, #255	; 0xff
    2740:	3b01      	subs	r3, #1
    2742:	4295      	cmp	r5, r2
    2744:	d80f      	bhi.n	2766 <_usb_d_dev_ep_enable+0x1e2>
    2746:	3b01      	subs	r3, #1
    2748:	2d80      	cmp	r5, #128	; 0x80
    274a:	d80c      	bhi.n	2766 <_usb_d_dev_ep_enable+0x1e2>
    274c:	3b01      	subs	r3, #1
    274e:	2d40      	cmp	r5, #64	; 0x40
    2750:	d809      	bhi.n	2766 <_usb_d_dev_ep_enable+0x1e2>
    2752:	3b01      	subs	r3, #1
    2754:	2d20      	cmp	r5, #32
    2756:	d806      	bhi.n	2766 <_usb_d_dev_ep_enable+0x1e2>
    2758:	3b01      	subs	r3, #1
    275a:	2d10      	cmp	r5, #16
    275c:	d803      	bhi.n	2766 <_usb_d_dev_ep_enable+0x1e2>
    275e:	3af8      	subs	r2, #248	; 0xf8
    2760:	42aa      	cmp	r2, r5
    2762:	4192      	sbcs	r2, r2
    2764:	4253      	negs	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2766:	071b      	lsls	r3, r3, #28
    2768:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    276a:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    276c:	2240      	movs	r2, #64	; 0x40
    276e:	2306      	movs	r3, #6
    2770:	33ff      	adds	r3, #255	; 0xff
    2772:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    2774:	0149      	lsls	r1, r1, #5
    2776:	4b36      	ldr	r3, [pc, #216]	; (2850 <_usb_d_dev_ep_enable+0x2cc>)
    2778:	1859      	adds	r1, r3, r1
    277a:	2300      	movs	r3, #0
    277c:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    277e:	2000      	movs	r0, #0
}
    2780:	bc04      	pop	{r2}
    2782:	4690      	mov	r8, r2
    2784:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2786:	20e0      	movs	r0, #224	; 0xe0
    2788:	05c0      	lsls	r0, r0, #23
    278a:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    278c:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    278e:	0495      	lsls	r5, r2, #18
    2790:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2792:	2007      	movs	r0, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2794:	0700      	lsls	r0, r0, #28
    2796:	4328      	orrs	r0, r5
    2798:	6178      	str	r0, [r7, #20]
    279a:	2506      	movs	r5, #6
    279c:	35ff      	adds	r5, #255	; 0xff
    279e:	2640      	movs	r6, #64	; 0x40
    27a0:	5566      	strb	r6, [r4, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    27a2:	2782      	movs	r7, #130	; 0x82
    27a4:	007f      	lsls	r7, r7, #1
    27a6:	2080      	movs	r0, #128	; 0x80
    27a8:	55e0      	strb	r0, [r4, r7]
	bank->STATUS_BK.reg     = 0;
    27aa:	4829      	ldr	r0, [pc, #164]	; (2850 <_usb_d_dev_ep_enable+0x2cc>)
    27ac:	0149      	lsls	r1, r1, #5
    27ae:	1841      	adds	r1, r0, r1
    27b0:	2400      	movs	r4, #0
    27b2:	728c      	strb	r4, [r1, #10]
    27b4:	768c      	strb	r4, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    27b6:	340f      	adds	r4, #15
    27b8:	4661      	mov	r1, ip
    27ba:	400c      	ands	r4, r1
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    27bc:	0099      	lsls	r1, r3, #2
    27be:	18c9      	adds	r1, r1, r3
    27c0:	0089      	lsls	r1, r1, #2
    27c2:	1841      	adds	r1, r0, r1
    27c4:	3180      	adds	r1, #128	; 0x80
    27c6:	6809      	ldr	r1, [r1, #0]
	bank->ADDR.reg          = addr;
    27c8:	0163      	lsls	r3, r4, #5
    27ca:	5019      	str	r1, [r3, r0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    27cc:	18c0      	adds	r0, r0, r3
    27ce:	6841      	ldr	r1, [r0, #4]
    27d0:	0492      	lsls	r2, r2, #18
    27d2:	0914      	lsrs	r4, r2, #4
    27d4:	4a20      	ldr	r2, [pc, #128]	; (2858 <_usb_d_dev_ep_enable+0x2d4>)
    27d6:	400a      	ands	r2, r1
    27d8:	4322      	orrs	r2, r4
    27da:	6042      	str	r2, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    27dc:	6842      	ldr	r2, [r0, #4]
    27de:	0b92      	lsrs	r2, r2, #14
    27e0:	0392      	lsls	r2, r2, #14
    27e2:	6042      	str	r2, [r0, #4]
    27e4:	4a19      	ldr	r2, [pc, #100]	; (284c <_usb_d_dev_ep_enable+0x2c8>)
    27e6:	189a      	adds	r2, r3, r2
    27e8:	21b0      	movs	r1, #176	; 0xb0
    27ea:	55d1      	strb	r1, [r2, r7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    27ec:	5556      	strb	r6, [r2, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    27ee:	4a1b      	ldr	r2, [pc, #108]	; (285c <_usb_d_dev_ep_enable+0x2d8>)
    27f0:	4694      	mov	ip, r2
    27f2:	4463      	add	r3, ip
    27f4:	2210      	movs	r2, #16
    27f6:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    27f8:	2000      	movs	r0, #0
    27fa:	e7c1      	b.n	2780 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    27fc:	20a0      	movs	r0, #160	; 0xa0
    27fe:	05c0      	lsls	r0, r0, #23
    2800:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2802:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2804:	0495      	lsls	r5, r2, #18
    2806:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2808:	2005      	movs	r0, #5
    280a:	e7c3      	b.n	2794 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    280c:	20c0      	movs	r0, #192	; 0xc0
    280e:	0580      	lsls	r0, r0, #22
    2810:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2812:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2814:	0495      	lsls	r5, r2, #18
    2816:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2818:	2003      	movs	r0, #3
    281a:	e7bb      	b.n	2794 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    281c:	20c0      	movs	r0, #192	; 0xc0
    281e:	05c0      	lsls	r0, r0, #23
    2820:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2822:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2824:	0495      	lsls	r5, r2, #18
    2826:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2828:	2006      	movs	r0, #6
    282a:	e7b3      	b.n	2794 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    282c:	2080      	movs	r0, #128	; 0x80
    282e:	05c0      	lsls	r0, r0, #23
    2830:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2832:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2834:	0495      	lsls	r5, r2, #18
    2836:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2838:	2004      	movs	r0, #4
    283a:	e7ab      	b.n	2794 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    283c:	2080      	movs	r0, #128	; 0x80
    283e:	0580      	lsls	r0, r0, #22
    2840:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2842:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2844:	0495      	lsls	r5, r2, #18
    2846:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2848:	2002      	movs	r0, #2
    284a:	e7a3      	b.n	2794 <_usb_d_dev_ep_enable+0x210>
    284c:	41005000 	.word	0x41005000
    2850:	20000580 	.word	0x20000580
    2854:	0fffc000 	.word	0x0fffc000
    2858:	f0003fff 	.word	0xf0003fff
    285c:	41005109 	.word	0x41005109

00002860 <_usb_d_dev_ep_stall>:
{
    2860:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    2862:	230f      	movs	r3, #15
    2864:	4003      	ands	r3, r0
    2866:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2868:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    286a:	2b00      	cmp	r3, #0
    286c:	d009      	beq.n	2882 <_usb_d_dev_ep_stall+0x22>
    286e:	001a      	movs	r2, r3
    2870:	2800      	cmp	r0, #0
    2872:	db04      	blt.n	287e <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    2874:	2b02      	cmp	r3, #2
    2876:	d905      	bls.n	2884 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    2878:	2012      	movs	r0, #18
    287a:	4240      	negs	r0, r0
    287c:	e019      	b.n	28b2 <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    287e:	1c9a      	adds	r2, r3, #2
    2880:	e7f8      	b.n	2874 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    2882:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    2884:	2901      	cmp	r1, #1
    2886:	d015      	beq.n	28b4 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2888:	2900      	cmp	r1, #0
    288a:	d036      	beq.n	28fa <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    288c:	0093      	lsls	r3, r2, #2
    288e:	189b      	adds	r3, r3, r2
    2890:	009b      	lsls	r3, r3, #2
    2892:	4a47      	ldr	r2, [pc, #284]	; (29b0 <_usb_d_dev_ep_stall+0x150>)
    2894:	18d2      	adds	r2, r2, r3
    2896:	3286      	adds	r2, #134	; 0x86
    2898:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    289a:	230f      	movs	r3, #15
    289c:	4013      	ands	r3, r2
    289e:	015b      	lsls	r3, r3, #5
    28a0:	4a44      	ldr	r2, [pc, #272]	; (29b4 <_usb_d_dev_ep_stall+0x154>)
    28a2:	4694      	mov	ip, r2
    28a4:	4463      	add	r3, ip
    28a6:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    28a8:	2310      	movs	r3, #16
    28aa:	40a3      	lsls	r3, r4
    28ac:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    28ae:	1e43      	subs	r3, r0, #1
    28b0:	4198      	sbcs	r0, r3
}
    28b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    28b4:	2510      	movs	r5, #16
    28b6:	40a5      	lsls	r5, r4
    28b8:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    28ba:	493d      	ldr	r1, [pc, #244]	; (29b0 <_usb_d_dev_ep_stall+0x150>)
    28bc:	0090      	lsls	r0, r2, #2
    28be:	1883      	adds	r3, r0, r2
    28c0:	009b      	lsls	r3, r3, #2
    28c2:	18cb      	adds	r3, r1, r3
    28c4:	3386      	adds	r3, #134	; 0x86
    28c6:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    28c8:	230f      	movs	r3, #15
    28ca:	4033      	ands	r3, r6
    28cc:	015e      	lsls	r6, r3, #5
    28ce:	4f39      	ldr	r7, [pc, #228]	; (29b4 <_usb_d_dev_ep_stall+0x154>)
    28d0:	46bc      	mov	ip, r7
    28d2:	4466      	add	r6, ip
    28d4:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    28d6:	2520      	movs	r5, #32
    28d8:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    28da:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    28dc:	015b      	lsls	r3, r3, #5
    28de:	4d36      	ldr	r5, [pc, #216]	; (29b8 <_usb_d_dev_ep_stall+0x158>)
    28e0:	46ac      	mov	ip, r5
    28e2:	4463      	add	r3, ip
    28e4:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    28e6:	1882      	adds	r2, r0, r2
    28e8:	0092      	lsls	r2, r2, #2
    28ea:	188a      	adds	r2, r1, r2
    28ec:	3280      	adds	r2, #128	; 0x80
    28ee:	79d3      	ldrb	r3, [r2, #7]
    28f0:	2108      	movs	r1, #8
    28f2:	430b      	orrs	r3, r1
    28f4:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    28f6:	2000      	movs	r0, #0
    28f8:	e7db      	b.n	28b2 <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    28fa:	0093      	lsls	r3, r2, #2
    28fc:	189b      	adds	r3, r3, r2
    28fe:	0099      	lsls	r1, r3, #2
    2900:	4b2b      	ldr	r3, [pc, #172]	; (29b0 <_usb_d_dev_ep_stall+0x150>)
    2902:	185b      	adds	r3, r3, r1
    2904:	3386      	adds	r3, #134	; 0x86
    2906:	781b      	ldrb	r3, [r3, #0]
    2908:	210f      	movs	r1, #15
    290a:	400b      	ands	r3, r1
    290c:	015d      	lsls	r5, r3, #5
    290e:	492b      	ldr	r1, [pc, #172]	; (29bc <_usb_d_dev_ep_stall+0x15c>)
    2910:	468c      	mov	ip, r1
    2912:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2914:	2183      	movs	r1, #131	; 0x83
    2916:	0049      	lsls	r1, r1, #1
    2918:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    291a:	39f6      	subs	r1, #246	; 0xf6
    291c:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    291e:	2000      	movs	r0, #0
	if (!is_stalled) {
    2920:	420e      	tst	r6, r1
    2922:	d0c6      	beq.n	28b2 <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2924:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2926:	3005      	adds	r0, #5
    2928:	30ff      	adds	r0, #255	; 0xff
    292a:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    292c:	2120      	movs	r1, #32
    292e:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2930:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2932:	015b      	lsls	r3, r3, #5
    2934:	4e22      	ldr	r6, [pc, #136]	; (29c0 <_usb_d_dev_ep_stall+0x160>)
    2936:	46b4      	mov	ip, r6
    2938:	4463      	add	r3, ip
    293a:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    293c:	2308      	movs	r3, #8
    293e:	33ff      	adds	r3, #255	; 0xff
    2940:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    2942:	420b      	tst	r3, r1
    2944:	d009      	beq.n	295a <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2946:	2308      	movs	r3, #8
    2948:	33ff      	adds	r3, #255	; 0xff
    294a:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    294c:	3b07      	subs	r3, #7
    294e:	3bff      	subs	r3, #255	; 0xff
    2950:	40a3      	lsls	r3, r4
    2952:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2954:	2182      	movs	r1, #130	; 0x82
    2956:	0049      	lsls	r1, r1, #1
    2958:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    295a:	0093      	lsls	r3, r2, #2
    295c:	189b      	adds	r3, r3, r2
    295e:	0099      	lsls	r1, r3, #2
    2960:	4b13      	ldr	r3, [pc, #76]	; (29b0 <_usb_d_dev_ep_stall+0x150>)
    2962:	185b      	adds	r3, r3, r1
    2964:	3380      	adds	r3, #128	; 0x80
    2966:	79d9      	ldrb	r1, [r3, #7]
    2968:	2307      	movs	r3, #7
    296a:	400b      	ands	r3, r1
    296c:	2b01      	cmp	r3, #1
    296e:	d00b      	beq.n	2988 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    2970:	0093      	lsls	r3, r2, #2
    2972:	189a      	adds	r2, r3, r2
    2974:	0092      	lsls	r2, r2, #2
    2976:	4b0e      	ldr	r3, [pc, #56]	; (29b0 <_usb_d_dev_ep_stall+0x150>)
    2978:	189b      	adds	r3, r3, r2
    297a:	3380      	adds	r3, #128	; 0x80
    297c:	79da      	ldrb	r2, [r3, #7]
    297e:	2108      	movs	r1, #8
    2980:	438a      	bics	r2, r1
    2982:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2984:	2000      	movs	r0, #0
    2986:	e794      	b.n	28b2 <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2988:	3306      	adds	r3, #6
    298a:	33ff      	adds	r3, #255	; 0xff
    298c:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    298e:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2990:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2992:	4219      	tst	r1, r3
    2994:	d000      	beq.n	2998 <_usb_d_dev_ep_stall+0x138>
    2996:	e78c      	b.n	28b2 <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    2998:	0093      	lsls	r3, r2, #2
    299a:	189a      	adds	r2, r3, r2
    299c:	0092      	lsls	r2, r2, #2
    299e:	4b04      	ldr	r3, [pc, #16]	; (29b0 <_usb_d_dev_ep_stall+0x150>)
    29a0:	189b      	adds	r3, r3, r2
    29a2:	3380      	adds	r3, #128	; 0x80
    29a4:	79da      	ldrb	r2, [r3, #7]
    29a6:	2108      	movs	r1, #8
    29a8:	438a      	bics	r2, r1
    29aa:	71da      	strb	r2, [r3, #7]
    29ac:	e781      	b.n	28b2 <_usb_d_dev_ep_stall+0x52>
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	20000580 	.word	0x20000580
    29b4:	41005100 	.word	0x41005100
    29b8:	41005109 	.word	0x41005109
    29bc:	41005000 	.word	0x41005000
    29c0:	41005108 	.word	0x41005108

000029c4 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    29c4:	b570      	push	{r4, r5, r6, lr}
    29c6:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    29c8:	230f      	movs	r3, #15
    29ca:	4018      	ands	r0, r3
    29cc:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    29ce:	4b16      	ldr	r3, [pc, #88]	; (2a28 <_usb_d_dev_ep_read_req+0x64>)
    29d0:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    29d2:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    29d4:	685b      	ldr	r3, [r3, #4]
    29d6:	049b      	lsls	r3, r3, #18
    29d8:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    29da:	2802      	cmp	r0, #2
    29dc:	d81a      	bhi.n	2a14 <_usb_d_dev_ep_read_req+0x50>
    29de:	2d00      	cmp	r5, #0
    29e0:	d01b      	beq.n	2a1a <_usb_d_dev_ep_read_req+0x56>
    29e2:	4b12      	ldr	r3, [pc, #72]	; (2a2c <_usb_d_dev_ep_read_req+0x68>)
    29e4:	469c      	mov	ip, r3
    29e6:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    29e8:	2380      	movs	r3, #128	; 0x80
    29ea:	005b      	lsls	r3, r3, #1
    29ec:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    29ee:	2b11      	cmp	r3, #17
    29f0:	d116      	bne.n	2a20 <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    29f2:	2308      	movs	r3, #8
    29f4:	33ff      	adds	r3, #255	; 0xff
    29f6:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    29f8:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    29fa:	06db      	lsls	r3, r3, #27
    29fc:	d400      	bmi.n	2a00 <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    29fe:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    2a00:	2208      	movs	r2, #8
    2a02:	0028      	movs	r0, r5
    2a04:	4b0a      	ldr	r3, [pc, #40]	; (2a30 <_usb_d_dev_ep_read_req+0x6c>)
    2a06:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2a08:	2210      	movs	r2, #16
    2a0a:	2308      	movs	r3, #8
    2a0c:	33ff      	adds	r3, #255	; 0xff
    2a0e:	54e2      	strb	r2, [r4, r3]
	return bytes;
    2a10:	0030      	movs	r0, r6
    2a12:	e7f4      	b.n	29fe <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    2a14:	2012      	movs	r0, #18
    2a16:	4240      	negs	r0, r0
    2a18:	e7f1      	b.n	29fe <_usb_d_dev_ep_read_req+0x3a>
    2a1a:	2012      	movs	r0, #18
    2a1c:	4240      	negs	r0, r0
    2a1e:	e7ee      	b.n	29fe <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    2a20:	2013      	movs	r0, #19
    2a22:	4240      	negs	r0, r0
    2a24:	e7eb      	b.n	29fe <_usb_d_dev_ep_read_req+0x3a>
    2a26:	46c0      	nop			; (mov r8, r8)
    2a28:	20000580 	.word	0x20000580
    2a2c:	41005000 	.word	0x41005000
    2a30:	00003aed 	.word	0x00003aed

00002a34 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    2a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a36:	46de      	mov	lr, fp
    2a38:	4657      	mov	r7, sl
    2a3a:	464e      	mov	r6, r9
    2a3c:	4645      	mov	r5, r8
    2a3e:	b5e0      	push	{r5, r6, r7, lr}
    2a40:	b085      	sub	sp, #20
    2a42:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    2a44:	7a06      	ldrb	r6, [r0, #8]
    2a46:	230f      	movs	r3, #15
    2a48:	4033      	ands	r3, r6
    2a4a:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2a4c:	2b00      	cmp	r3, #0
    2a4e:	d100      	bne.n	2a52 <_usb_d_dev_ep_trans+0x1e>
    2a50:	e0d3      	b.n	2bfa <_usb_d_dev_ep_trans+0x1c6>
    2a52:	0018      	movs	r0, r3
    2a54:	2e00      	cmp	r6, #0
    2a56:	db39      	blt.n	2acc <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    2a58:	0004      	movs	r4, r0
    2a5a:	4a73      	ldr	r2, [pc, #460]	; (2c28 <_usb_d_dev_ep_trans+0x1f4>)
    2a5c:	3260      	adds	r2, #96	; 0x60
    2a5e:	1c41      	adds	r1, r0, #1
    2a60:	008d      	lsls	r5, r1, #2
    2a62:	186d      	adds	r5, r5, r1
    2a64:	00ad      	lsls	r5, r5, #2
    2a66:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2a68:	0081      	lsls	r1, r0, #2
    2a6a:	1809      	adds	r1, r1, r0
    2a6c:	0089      	lsls	r1, r1, #2
    2a6e:	1852      	adds	r2, r2, r1
    2a70:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    2a72:	4a6e      	ldr	r2, [pc, #440]	; (2c2c <_usb_d_dev_ep_trans+0x1f8>)
    2a74:	4291      	cmp	r1, r2
    2a76:	d02b      	beq.n	2ad0 <_usb_d_dev_ep_trans+0x9c>
    2a78:	1e4f      	subs	r7, r1, #1
    2a7a:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    2a7c:	4642      	mov	r2, r8
    2a7e:	6852      	ldr	r2, [r2, #4]
    2a80:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    2a82:	2b02      	cmp	r3, #2
    2a84:	d900      	bls.n	2a88 <_usb_d_dev_ep_trans+0x54>
    2a86:	e0a4      	b.n	2bd2 <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    2a88:	4643      	mov	r3, r8
    2a8a:	681b      	ldr	r3, [r3, #0]
    2a8c:	4868      	ldr	r0, [pc, #416]	; (2c30 <_usb_d_dev_ep_trans+0x1fc>)
    2a8e:	4283      	cmp	r3, r0
    2a90:	d920      	bls.n	2ad4 <_usb_d_dev_ep_trans+0xa0>
    2a92:	1898      	adds	r0, r3, r2
    2a94:	9001      	str	r0, [sp, #4]
    2a96:	4867      	ldr	r0, [pc, #412]	; (2c34 <_usb_d_dev_ep_trans+0x200>)
    2a98:	4684      	mov	ip, r0
    2a9a:	9801      	ldr	r0, [sp, #4]
    2a9c:	4560      	cmp	r0, ip
    2a9e:	d819      	bhi.n	2ad4 <_usb_d_dev_ep_trans+0xa0>
    2aa0:	079b      	lsls	r3, r3, #30
    2aa2:	d117      	bne.n	2ad4 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    2aa4:	2e00      	cmp	r6, #0
    2aa6:	db32      	blt.n	2b0e <_usb_d_dev_ep_trans+0xda>
    2aa8:	4291      	cmp	r1, r2
    2aaa:	d900      	bls.n	2aae <_usb_d_dev_ep_trans+0x7a>
    2aac:	e0af      	b.n	2c0e <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    2aae:	2f00      	cmp	r7, #0
    2ab0:	d030      	beq.n	2b14 <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    2ab2:	00a3      	lsls	r3, r4, #2
    2ab4:	191b      	adds	r3, r3, r4
    2ab6:	009a      	lsls	r2, r3, #2
    2ab8:	4b5b      	ldr	r3, [pc, #364]	; (2c28 <_usb_d_dev_ep_trans+0x1f4>)
    2aba:	189b      	adds	r3, r3, r2
    2abc:	3380      	adds	r3, #128	; 0x80
    2abe:	681b      	ldr	r3, [r3, #0]
    2ac0:	2b00      	cmp	r3, #0
    2ac2:	d100      	bne.n	2ac6 <_usb_d_dev_ep_trans+0x92>
    2ac4:	e08b      	b.n	2bde <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    2ac6:	2300      	movs	r3, #0
    2ac8:	4699      	mov	r9, r3
    2aca:	e00f      	b.n	2aec <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2acc:	1c98      	adds	r0, r3, #2
    2ace:	e7c3      	b.n	2a58 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2ad0:	000f      	movs	r7, r1
    2ad2:	e7d3      	b.n	2a7c <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    2ad4:	00a3      	lsls	r3, r4, #2
    2ad6:	191b      	adds	r3, r3, r4
    2ad8:	009a      	lsls	r2, r3, #2
    2ada:	4b53      	ldr	r3, [pc, #332]	; (2c28 <_usb_d_dev_ep_trans+0x1f4>)
    2adc:	189b      	adds	r3, r3, r2
    2ade:	3380      	adds	r3, #128	; 0x80
    2ae0:	681b      	ldr	r3, [r3, #0]
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	d100      	bne.n	2ae8 <_usb_d_dev_ep_trans+0xb4>
    2ae6:	e077      	b.n	2bd8 <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    2ae8:	2301      	movs	r3, #1
    2aea:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    2aec:	00a3      	lsls	r3, r4, #2
    2aee:	191b      	adds	r3, r3, r4
    2af0:	009a      	lsls	r2, r3, #2
    2af2:	4b4d      	ldr	r3, [pc, #308]	; (2c28 <_usb_d_dev_ep_trans+0x1f4>)
    2af4:	189b      	adds	r3, r3, r2
    2af6:	3380      	adds	r3, #128	; 0x80
    2af8:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    2afa:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    2afc:	071b      	lsls	r3, r3, #28
    2afe:	d50c      	bpl.n	2b1a <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2b00:	b005      	add	sp, #20
    2b02:	bc3c      	pop	{r2, r3, r4, r5}
    2b04:	4690      	mov	r8, r2
    2b06:	4699      	mov	r9, r3
    2b08:	46a2      	mov	sl, r4
    2b0a:	46ab      	mov	fp, r5
    2b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    2b0e:	2300      	movs	r3, #0
    2b10:	4699      	mov	r9, r3
    2b12:	e7eb      	b.n	2aec <_usb_d_dev_ep_trans+0xb8>
    2b14:	2300      	movs	r3, #0
    2b16:	4699      	mov	r9, r3
    2b18:	e7e8      	b.n	2aec <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    2b1a:	a803      	add	r0, sp, #12
    2b1c:	4b46      	ldr	r3, [pc, #280]	; (2c38 <_usb_d_dev_ep_trans+0x204>)
    2b1e:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    2b20:	00a3      	lsls	r3, r4, #2
    2b22:	191b      	adds	r3, r3, r4
    2b24:	009a      	lsls	r2, r3, #2
    2b26:	4b40      	ldr	r3, [pc, #256]	; (2c28 <_usb_d_dev_ep_trans+0x1f4>)
    2b28:	189b      	adds	r3, r3, r2
    2b2a:	3380      	adds	r3, #128	; 0x80
    2b2c:	79db      	ldrb	r3, [r3, #7]
    2b2e:	065b      	lsls	r3, r3, #25
    2b30:	d444      	bmi.n	2bbc <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    2b32:	00a3      	lsls	r3, r4, #2
    2b34:	191b      	adds	r3, r3, r4
    2b36:	009b      	lsls	r3, r3, #2
    2b38:	4a3b      	ldr	r2, [pc, #236]	; (2c28 <_usb_d_dev_ep_trans+0x1f4>)
    2b3a:	4693      	mov	fp, r2
    2b3c:	449b      	add	fp, r3
    2b3e:	2380      	movs	r3, #128	; 0x80
    2b40:	445b      	add	r3, fp
    2b42:	469a      	mov	sl, r3
    2b44:	79db      	ldrb	r3, [r3, #7]
    2b46:	2240      	movs	r2, #64	; 0x40
    2b48:	4313      	orrs	r3, r2
    2b4a:	4652      	mov	r2, sl
    2b4c:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    2b4e:	a803      	add	r0, sp, #12
    2b50:	4b3a      	ldr	r3, [pc, #232]	; (2c3c <_usb_d_dev_ep_trans+0x208>)
    2b52:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    2b54:	465b      	mov	r3, fp
    2b56:	4642      	mov	r2, r8
    2b58:	6812      	ldr	r2, [r2, #0]
    2b5a:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    2b5c:	4642      	mov	r2, r8
    2b5e:	6852      	ldr	r2, [r2, #4]
    2b60:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    2b62:	2300      	movs	r3, #0
    2b64:	465a      	mov	r2, fp
    2b66:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    2b68:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    2b6a:	01d2      	lsls	r2, r2, #7
    2b6c:	4653      	mov	r3, sl
    2b6e:	79d9      	ldrb	r1, [r3, #7]
    2b70:	237f      	movs	r3, #127	; 0x7f
    2b72:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    2b74:	4649      	mov	r1, r9
    2b76:	0149      	lsls	r1, r1, #5
    2b78:	4313      	orrs	r3, r2
    2b7a:	2220      	movs	r2, #32
    2b7c:	4393      	bics	r3, r2
    2b7e:	430b      	orrs	r3, r1
    2b80:	4652      	mov	r2, sl
    2b82:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2b84:	4643      	mov	r3, r8
    2b86:	7a5b      	ldrb	r3, [r3, #9]
    2b88:	2200      	movs	r2, #0
    2b8a:	2b00      	cmp	r3, #0
    2b8c:	d002      	beq.n	2b94 <_usb_d_dev_ep_trans+0x160>
    2b8e:	427a      	negs	r2, r7
    2b90:	417a      	adcs	r2, r7
    2b92:	b2d2      	uxtb	r2, r2
    2b94:	00a3      	lsls	r3, r4, #2
    2b96:	191c      	adds	r4, r3, r4
    2b98:	00a4      	lsls	r4, r4, #2
    2b9a:	4b23      	ldr	r3, [pc, #140]	; (2c28 <_usb_d_dev_ep_trans+0x1f4>)
    2b9c:	191b      	adds	r3, r3, r4
    2b9e:	3380      	adds	r3, #128	; 0x80
    2ba0:	0112      	lsls	r2, r2, #4
    2ba2:	79df      	ldrb	r7, [r3, #7]
    2ba4:	2110      	movs	r1, #16
    2ba6:	438f      	bics	r7, r1
    2ba8:	4317      	orrs	r7, r2
    2baa:	71df      	strb	r7, [r3, #7]
	if (dir) {
    2bac:	2e00      	cmp	r6, #0
    2bae:	db0a      	blt.n	2bc6 <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    2bb0:	2100      	movs	r1, #0
    2bb2:	0028      	movs	r0, r5
    2bb4:	4b22      	ldr	r3, [pc, #136]	; (2c40 <_usb_d_dev_ep_trans+0x20c>)
    2bb6:	4798      	blx	r3
	return ERR_NONE;
    2bb8:	2000      	movs	r0, #0
    2bba:	e7a1      	b.n	2b00 <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    2bbc:	a803      	add	r0, sp, #12
    2bbe:	4b1f      	ldr	r3, [pc, #124]	; (2c3c <_usb_d_dev_ep_trans+0x208>)
    2bc0:	4798      	blx	r3
		return USB_BUSY;
    2bc2:	2001      	movs	r0, #1
    2bc4:	e79c      	b.n	2b00 <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    2bc6:	2100      	movs	r1, #0
    2bc8:	0028      	movs	r0, r5
    2bca:	4b1e      	ldr	r3, [pc, #120]	; (2c44 <_usb_d_dev_ep_trans+0x210>)
    2bcc:	4798      	blx	r3
	return ERR_NONE;
    2bce:	2000      	movs	r0, #0
    2bd0:	e796      	b.n	2b00 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    2bd2:	2012      	movs	r0, #18
    2bd4:	4240      	negs	r0, r0
    2bd6:	e793      	b.n	2b00 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    2bd8:	2013      	movs	r0, #19
    2bda:	4240      	negs	r0, r0
    2bdc:	e790      	b.n	2b00 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    2bde:	2012      	movs	r0, #18
    2be0:	4240      	negs	r0, r0
    2be2:	e78d      	b.n	2b00 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    2be4:	2013      	movs	r0, #19
    2be6:	4240      	negs	r0, r0
    2be8:	e78a      	b.n	2b00 <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    2bea:	4643      	mov	r3, r8
    2bec:	685a      	ldr	r2, [r3, #4]
    2bee:	0597      	lsls	r7, r2, #22
    2bf0:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    2bf2:	4d0d      	ldr	r5, [pc, #52]	; (2c28 <_usb_d_dev_ep_trans+0x1f4>)
    2bf4:	3574      	adds	r5, #116	; 0x74
    2bf6:	2400      	movs	r4, #0
    2bf8:	e746      	b.n	2a88 <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2bfa:	4a0b      	ldr	r2, [pc, #44]	; (2c28 <_usb_d_dev_ep_trans+0x1f4>)
    2bfc:	3260      	adds	r2, #96	; 0x60
    2bfe:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    2c00:	4a0a      	ldr	r2, [pc, #40]	; (2c2c <_usb_d_dev_ep_trans+0x1f8>)
    2c02:	4291      	cmp	r1, r2
    2c04:	d0f1      	beq.n	2bea <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    2c06:	4d08      	ldr	r5, [pc, #32]	; (2c28 <_usb_d_dev_ep_trans+0x1f4>)
    2c08:	3574      	adds	r5, #116	; 0x74
    2c0a:	2400      	movs	r4, #0
    2c0c:	e734      	b.n	2a78 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    2c0e:	00a3      	lsls	r3, r4, #2
    2c10:	191b      	adds	r3, r3, r4
    2c12:	009a      	lsls	r2, r3, #2
    2c14:	4b04      	ldr	r3, [pc, #16]	; (2c28 <_usb_d_dev_ep_trans+0x1f4>)
    2c16:	189b      	adds	r3, r3, r2
    2c18:	3380      	adds	r3, #128	; 0x80
    2c1a:	681b      	ldr	r3, [r3, #0]
    2c1c:	2b00      	cmp	r3, #0
    2c1e:	d0e1      	beq.n	2be4 <_usb_d_dev_ep_trans+0x1b0>
    2c20:	2301      	movs	r3, #1
    2c22:	4699      	mov	r9, r3
    2c24:	e762      	b.n	2aec <_usb_d_dev_ep_trans+0xb8>
    2c26:	46c0      	nop			; (mov r8, r8)
    2c28:	20000580 	.word	0x20000580
    2c2c:	000003ff 	.word	0x000003ff
    2c30:	1fffffff 	.word	0x1fffffff
    2c34:	20007fff 	.word	0x20007fff
    2c38:	00002f19 	.word	0x00002f19
    2c3c:	00002f27 	.word	0x00002f27
    2c40:	0000200d 	.word	0x0000200d
    2c44:	00001e65 	.word	0x00001e65

00002c48 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2c48:	1e0b      	subs	r3, r1, #0
    2c4a:	d006      	beq.n	2c5a <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    2c4c:	2801      	cmp	r0, #1
    2c4e:	d006      	beq.n	2c5e <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2c50:	2800      	cmp	r0, #0
    2c52:	d101      	bne.n	2c58 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2c54:	4a03      	ldr	r2, [pc, #12]	; (2c64 <_usb_d_dev_register_callback+0x1c>)
    2c56:	6613      	str	r3, [r2, #96]	; 0x60
	}
}
    2c58:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2c5a:	4b03      	ldr	r3, [pc, #12]	; (2c68 <_usb_d_dev_register_callback+0x20>)
    2c5c:	e7f6      	b.n	2c4c <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    2c5e:	4a01      	ldr	r2, [pc, #4]	; (2c64 <_usb_d_dev_register_callback+0x1c>)
    2c60:	6653      	str	r3, [r2, #100]	; 0x64
    2c62:	e7f9      	b.n	2c58 <_usb_d_dev_register_callback+0x10>
    2c64:	20000580 	.word	0x20000580
    2c68:	00001bcd 	.word	0x00001bcd

00002c6c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2c6c:	1e0b      	subs	r3, r1, #0
    2c6e:	d008      	beq.n	2c82 <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2c70:	2800      	cmp	r0, #0
    2c72:	d008      	beq.n	2c86 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2c74:	2801      	cmp	r0, #1
    2c76:	d009      	beq.n	2c8c <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2c78:	2802      	cmp	r0, #2
    2c7a:	d106      	bne.n	2c8a <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2c7c:	4a05      	ldr	r2, [pc, #20]	; (2c94 <_usb_d_dev_register_ep_callback+0x28>)
    2c7e:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    2c80:	e003      	b.n	2c8a <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2c82:	4b05      	ldr	r3, [pc, #20]	; (2c98 <_usb_d_dev_register_ep_callback+0x2c>)
    2c84:	e7f4      	b.n	2c70 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2c86:	4a03      	ldr	r2, [pc, #12]	; (2c94 <_usb_d_dev_register_ep_callback+0x28>)
    2c88:	6693      	str	r3, [r2, #104]	; 0x68
}
    2c8a:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2c8c:	4a01      	ldr	r2, [pc, #4]	; (2c94 <_usb_d_dev_register_ep_callback+0x28>)
    2c8e:	66d3      	str	r3, [r2, #108]	; 0x6c
    2c90:	e7fb      	b.n	2c8a <_usb_d_dev_register_ep_callback+0x1e>
    2c92:	46c0      	nop			; (mov r8, r8)
    2c94:	20000580 	.word	0x20000580
    2c98:	00001bcd 	.word	0x00001bcd

00002c9c <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    2c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    2c9e:	4b82      	ldr	r3, [pc, #520]	; (2ea8 <USB_Handler+0x20c>)
    2ca0:	8c1e      	ldrh	r6, [r3, #32]
    2ca2:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2ca4:	2e00      	cmp	r6, #0
    2ca6:	d003      	beq.n	2cb0 <USB_Handler+0x14>
    2ca8:	4c80      	ldr	r4, [pc, #512]	; (2eac <USB_Handler+0x210>)
    2caa:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    2cac:	2500      	movs	r5, #0
    2cae:	e0b9      	b.n	2e24 <USB_Handler+0x188>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2cb0:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    2cb2:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    2cb4:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    2cb6:	075a      	lsls	r2, r3, #29
    2cb8:	d417      	bmi.n	2cea <USB_Handler+0x4e>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    2cba:	059a      	lsls	r2, r3, #22
    2cbc:	d41c      	bmi.n	2cf8 <USB_Handler+0x5c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2cbe:	061a      	lsls	r2, r3, #24
    2cc0:	d43e      	bmi.n	2d40 <USB_Handler+0xa4>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    2cc2:	2270      	movs	r2, #112	; 0x70
    2cc4:	421a      	tst	r2, r3
    2cc6:	d144      	bne.n	2d52 <USB_Handler+0xb6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    2cc8:	071a      	lsls	r2, r3, #28
    2cca:	d45e      	bmi.n	2d8a <USB_Handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    2ccc:	07db      	lsls	r3, r3, #31
    2cce:	d5eb      	bpl.n	2ca8 <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2cd0:	4b75      	ldr	r3, [pc, #468]	; (2ea8 <USB_Handler+0x20c>)
    2cd2:	4a77      	ldr	r2, [pc, #476]	; (2eb0 <USB_Handler+0x214>)
    2cd4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2cd6:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2cd8:	3a92      	subs	r2, #146	; 0x92
    2cda:	3aff      	subs	r2, #255	; 0xff
    2cdc:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2cde:	4b73      	ldr	r3, [pc, #460]	; (2eac <USB_Handler+0x210>)
    2ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2ce2:	2100      	movs	r1, #0
    2ce4:	2004      	movs	r0, #4
    2ce6:	4798      	blx	r3
    2ce8:	e005      	b.n	2cf6 <USB_Handler+0x5a>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2cea:	2204      	movs	r2, #4
    2cec:	4b6e      	ldr	r3, [pc, #440]	; (2ea8 <USB_Handler+0x20c>)
    2cee:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    2cf0:	4b6e      	ldr	r3, [pc, #440]	; (2eac <USB_Handler+0x210>)
    2cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2cf4:	4798      	blx	r3

	_usb_d_dev_handler();
}
    2cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cf8:	4b6b      	ldr	r3, [pc, #428]	; (2ea8 <USB_Handler+0x20c>)
    2cfa:	4a6d      	ldr	r2, [pc, #436]	; (2eb0 <USB_Handler+0x214>)
    2cfc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2cfe:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2d00:	3a92      	subs	r2, #146	; 0x92
    2d02:	3aff      	subs	r2, #255	; 0xff
    2d04:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2d06:	4b69      	ldr	r3, [pc, #420]	; (2eac <USB_Handler+0x210>)
    2d08:	891b      	ldrh	r3, [r3, #8]
    2d0a:	071b      	lsls	r3, r3, #28
    2d0c:	0f1b      	lsrs	r3, r3, #28
    2d0e:	2b03      	cmp	r3, #3
    2d10:	d00c      	beq.n	2d2c <USB_Handler+0x90>
    2d12:	4b66      	ldr	r3, [pc, #408]	; (2eac <USB_Handler+0x210>)
    2d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2d16:	071b      	lsls	r3, r3, #28
    2d18:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    2d1a:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2d1c:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2d1e:	2b03      	cmp	r3, #3
    2d20:	d005      	beq.n	2d2e <USB_Handler+0x92>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2d22:	4b62      	ldr	r3, [pc, #392]	; (2eac <USB_Handler+0x210>)
    2d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2d26:	2003      	movs	r0, #3
    2d28:	4798      	blx	r3
    2d2a:	e7e4      	b.n	2cf6 <USB_Handler+0x5a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2d2c:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2d2e:	0152      	lsls	r2, r2, #5
    2d30:	4b5e      	ldr	r3, [pc, #376]	; (2eac <USB_Handler+0x210>)
    2d32:	189b      	adds	r3, r3, r2
    2d34:	8919      	ldrh	r1, [r3, #8]
    2d36:	0449      	lsls	r1, r1, #17
    2d38:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    2d3a:	2200      	movs	r2, #0
    2d3c:	811a      	strh	r2, [r3, #8]
    2d3e:	e7f0      	b.n	2d22 <USB_Handler+0x86>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2d40:	2280      	movs	r2, #128	; 0x80
    2d42:	4b59      	ldr	r3, [pc, #356]	; (2ea8 <USB_Handler+0x20c>)
    2d44:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    2d46:	4b59      	ldr	r3, [pc, #356]	; (2eac <USB_Handler+0x210>)
    2d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2d4a:	2100      	movs	r1, #0
    2d4c:	2005      	movs	r0, #5
    2d4e:	4798      	blx	r3
    2d50:	e7d1      	b.n	2cf6 <USB_Handler+0x5a>
    2d52:	4b55      	ldr	r3, [pc, #340]	; (2ea8 <USB_Handler+0x20c>)
    2d54:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2d56:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2d58:	4a55      	ldr	r2, [pc, #340]	; (2eb0 <USB_Handler+0x214>)
    2d5a:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2d5c:	4b55      	ldr	r3, [pc, #340]	; (2eb4 <USB_Handler+0x218>)
    2d5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2d60:	069b      	lsls	r3, r3, #26
    2d62:	d40c      	bmi.n	2d7e <USB_Handler+0xe2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2d64:	4953      	ldr	r1, [pc, #332]	; (2eb4 <USB_Handler+0x218>)
	tmp &= mask;
    2d66:	3a32      	subs	r2, #50	; 0x32
    2d68:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2d6a:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    2d6c:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    2d6e:	2bd0      	cmp	r3, #208	; 0xd0
    2d70:	d1fb      	bne.n	2d6a <USB_Handler+0xce>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    2d72:	4b4e      	ldr	r3, [pc, #312]	; (2eac <USB_Handler+0x210>)
    2d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2d76:	2100      	movs	r1, #0
    2d78:	2002      	movs	r0, #2
    2d7a:	4798      	blx	r3
    2d7c:	e7bb      	b.n	2cf6 <USB_Handler+0x5a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2d7e:	494d      	ldr	r1, [pc, #308]	; (2eb4 <USB_Handler+0x218>)
	tmp &= mask;
    2d80:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2d82:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    2d84:	421a      	tst	r2, r3
    2d86:	d0fc      	beq.n	2d82 <USB_Handler+0xe6>
    2d88:	e7f3      	b.n	2d72 <USB_Handler+0xd6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2d8a:	4b47      	ldr	r3, [pc, #284]	; (2ea8 <USB_Handler+0x20c>)
    2d8c:	2100      	movs	r1, #0
    2d8e:	2280      	movs	r2, #128	; 0x80
    2d90:	0052      	lsls	r2, r2, #1
    2d92:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2d94:	3af8      	subs	r2, #248	; 0xf8
    2d96:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2d98:	3268      	adds	r2, #104	; 0x68
    2d9a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2d9c:	4a44      	ldr	r2, [pc, #272]	; (2eb0 <USB_Handler+0x214>)
    2d9e:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    2da0:	4b45      	ldr	r3, [pc, #276]	; (2eb8 <USB_Handler+0x21c>)
    2da2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    2da4:	4b41      	ldr	r3, [pc, #260]	; (2eac <USB_Handler+0x210>)
    2da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2da8:	2100      	movs	r1, #0
    2daa:	2001      	movs	r0, #1
    2dac:	4798      	blx	r3
    2dae:	e7a2      	b.n	2cf6 <USB_Handler+0x5a>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2db0:	06cb      	lsls	r3, r1, #27
    2db2:	d407      	bmi.n	2dc4 <USB_Handler+0x128>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2db4:	064b      	lsls	r3, r1, #25
    2db6:	d408      	bmi.n	2dca <USB_Handler+0x12e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2db8:	068b      	lsls	r3, r1, #26
    2dba:	d52e      	bpl.n	2e1a <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    2dbc:	2100      	movs	r1, #0
    2dbe:	4b3f      	ldr	r3, [pc, #252]	; (2ebc <USB_Handler+0x220>)
    2dc0:	4798      	blx	r3
    2dc2:	e02a      	b.n	2e1a <USB_Handler+0x17e>
		_usb_d_dev_handle_setup(ept);
    2dc4:	4b3e      	ldr	r3, [pc, #248]	; (2ec0 <USB_Handler+0x224>)
    2dc6:	4798      	blx	r3
    2dc8:	e027      	b.n	2e1a <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    2dca:	2101      	movs	r1, #1
    2dcc:	4b3b      	ldr	r3, [pc, #236]	; (2ebc <USB_Handler+0x220>)
    2dce:	4798      	blx	r3
    2dd0:	e023      	b.n	2e1a <USB_Handler+0x17e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2dd2:	064b      	lsls	r3, r1, #25
    2dd4:	d40e      	bmi.n	2df4 <USB_Handler+0x158>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2dd6:	070b      	lsls	r3, r1, #28
    2dd8:	d410      	bmi.n	2dfc <USB_Handler+0x160>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2dda:	078b      	lsls	r3, r1, #30
    2ddc:	d412      	bmi.n	2e04 <USB_Handler+0x168>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2dde:	2307      	movs	r3, #7
    2de0:	401a      	ands	r2, r3
    2de2:	2a01      	cmp	r2, #1
    2de4:	d119      	bne.n	2e1a <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2de6:	074b      	lsls	r3, r1, #29
    2de8:	d410      	bmi.n	2e0c <USB_Handler+0x170>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2dea:	06cb      	lsls	r3, r1, #27
    2dec:	d515      	bpl.n	2e1a <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    2dee:	4b34      	ldr	r3, [pc, #208]	; (2ec0 <USB_Handler+0x224>)
    2df0:	4798      	blx	r3
    2df2:	e012      	b.n	2e1a <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    2df4:	2101      	movs	r1, #1
    2df6:	4b31      	ldr	r3, [pc, #196]	; (2ebc <USB_Handler+0x220>)
    2df8:	4798      	blx	r3
    2dfa:	e00e      	b.n	2e1a <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 1);
    2dfc:	2101      	movs	r1, #1
    2dfe:	4b31      	ldr	r3, [pc, #196]	; (2ec4 <USB_Handler+0x228>)
    2e00:	4798      	blx	r3
    2e02:	e00a      	b.n	2e1a <USB_Handler+0x17e>
		_usb_d_dev_in_next(ept, true);
    2e04:	2101      	movs	r1, #1
    2e06:	4b30      	ldr	r3, [pc, #192]	; (2ec8 <USB_Handler+0x22c>)
    2e08:	4798      	blx	r3
    2e0a:	e006      	b.n	2e1a <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 0);
    2e0c:	2100      	movs	r1, #0
    2e0e:	4b2d      	ldr	r3, [pc, #180]	; (2ec4 <USB_Handler+0x228>)
    2e10:	4798      	blx	r3
    2e12:	e002      	b.n	2e1a <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    2e14:	2100      	movs	r1, #0
    2e16:	4b29      	ldr	r3, [pc, #164]	; (2ebc <USB_Handler+0x220>)
    2e18:	4798      	blx	r3
    2e1a:	3501      	adds	r5, #1
    2e1c:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2e1e:	2d09      	cmp	r5, #9
    2e20:	d100      	bne.n	2e24 <USB_Handler+0x188>
    2e22:	e768      	b.n	2cf6 <USB_Handler+0x5a>
    2e24:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    2e26:	7ca1      	ldrb	r1, [r4, #18]
    2e28:	29ff      	cmp	r1, #255	; 0xff
    2e2a:	d0f6      	beq.n	2e1a <USB_Handler+0x17e>
	if (!(epint & (1u << epn))) {
    2e2c:	230f      	movs	r3, #15
    2e2e:	400b      	ands	r3, r1
    2e30:	2101      	movs	r1, #1
    2e32:	4099      	lsls	r1, r3
    2e34:	420e      	tst	r6, r1
    2e36:	d0f0      	beq.n	2e1a <USB_Handler+0x17e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2e38:	0159      	lsls	r1, r3, #5
    2e3a:	4f24      	ldr	r7, [pc, #144]	; (2ecc <USB_Handler+0x230>)
    2e3c:	46bc      	mov	ip, r7
    2e3e:	4461      	add	r1, ip
    2e40:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2e42:	015b      	lsls	r3, r3, #5
    2e44:	4f22      	ldr	r7, [pc, #136]	; (2ed0 <USB_Handler+0x234>)
    2e46:	46bc      	mov	ip, r7
    2e48:	4463      	add	r3, ip
    2e4a:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    2e4c:	4019      	ands	r1, r3
	if (flags) {
    2e4e:	d0e4      	beq.n	2e1a <USB_Handler+0x17e>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2e50:	00ab      	lsls	r3, r5, #2
    2e52:	195a      	adds	r2, r3, r5
    2e54:	0092      	lsls	r2, r2, #2
    2e56:	4b15      	ldr	r3, [pc, #84]	; (2eac <USB_Handler+0x210>)
    2e58:	469c      	mov	ip, r3
    2e5a:	4462      	add	r2, ip
    2e5c:	3270      	adds	r2, #112	; 0x70
    2e5e:	7dd2      	ldrb	r2, [r2, #23]
    2e60:	2347      	movs	r3, #71	; 0x47
    2e62:	4013      	ands	r3, r2
    2e64:	2b01      	cmp	r3, #1
    2e66:	d0a3      	beq.n	2db0 <USB_Handler+0x114>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2e68:	b253      	sxtb	r3, r2
    2e6a:	2b00      	cmp	r3, #0
    2e6c:	dbb1      	blt.n	2dd2 <USB_Handler+0x136>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2e6e:	068b      	lsls	r3, r1, #26
    2e70:	d4d0      	bmi.n	2e14 <USB_Handler+0x178>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2e72:	074b      	lsls	r3, r1, #29
    2e74:	d40c      	bmi.n	2e90 <USB_Handler+0x1f4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2e76:	07cb      	lsls	r3, r1, #31
    2e78:	d40e      	bmi.n	2e98 <USB_Handler+0x1fc>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2e7a:	2307      	movs	r3, #7
    2e7c:	401a      	ands	r2, r3
    2e7e:	2a01      	cmp	r2, #1
    2e80:	d1cb      	bne.n	2e1a <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2e82:	070b      	lsls	r3, r1, #28
    2e84:	d40c      	bmi.n	2ea0 <USB_Handler+0x204>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2e86:	06cb      	lsls	r3, r1, #27
    2e88:	d5c7      	bpl.n	2e1a <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    2e8a:	4b0d      	ldr	r3, [pc, #52]	; (2ec0 <USB_Handler+0x224>)
    2e8c:	4798      	blx	r3
    2e8e:	e7c4      	b.n	2e1a <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 0);
    2e90:	2100      	movs	r1, #0
    2e92:	4b0c      	ldr	r3, [pc, #48]	; (2ec4 <USB_Handler+0x228>)
    2e94:	4798      	blx	r3
    2e96:	e7c0      	b.n	2e1a <USB_Handler+0x17e>
		_usb_d_dev_out_next(ept, true);
    2e98:	2101      	movs	r1, #1
    2e9a:	4b0e      	ldr	r3, [pc, #56]	; (2ed4 <USB_Handler+0x238>)
    2e9c:	4798      	blx	r3
    2e9e:	e7bc      	b.n	2e1a <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 1);
    2ea0:	2101      	movs	r1, #1
    2ea2:	4b08      	ldr	r3, [pc, #32]	; (2ec4 <USB_Handler+0x228>)
    2ea4:	4798      	blx	r3
    2ea6:	e7b8      	b.n	2e1a <USB_Handler+0x17e>
    2ea8:	41005000 	.word	0x41005000
    2eac:	20000580 	.word	0x20000580
    2eb0:	00000201 	.word	0x00000201
    2eb4:	40000800 	.word	0x40000800
    2eb8:	00001e21 	.word	0x00001e21
    2ebc:	00001c5d 	.word	0x00001c5d
    2ec0:	00001bd1 	.word	0x00001bd1
    2ec4:	00001d21 	.word	0x00001d21
    2ec8:	00001e65 	.word	0x00001e65
    2ecc:	41005100 	.word	0x41005100
    2ed0:	41005109 	.word	0x41005109
    2ed4:	0000200d 	.word	0x0000200d

00002ed8 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    2ed8:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2eda:	4806      	ldr	r0, [pc, #24]	; (2ef4 <cdc_device_acm_init+0x1c>)
    2edc:	3040      	adds	r0, #64	; 0x40
    2ede:	4b06      	ldr	r3, [pc, #24]	; (2ef8 <cdc_device_acm_init+0x20>)
    2ee0:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    2ee2:	4b06      	ldr	r3, [pc, #24]	; (2efc <cdc_device_acm_init+0x24>)
    2ee4:	4798      	blx	r3

	usbdc_start(single_desc);
    2ee6:	4806      	ldr	r0, [pc, #24]	; (2f00 <cdc_device_acm_init+0x28>)
    2ee8:	4b06      	ldr	r3, [pc, #24]	; (2f04 <cdc_device_acm_init+0x2c>)
    2eea:	4798      	blx	r3
	usbdc_attach();
    2eec:	4b06      	ldr	r3, [pc, #24]	; (2f08 <cdc_device_acm_init+0x30>)
    2eee:	4798      	blx	r3
}
    2ef0:	bd10      	pop	{r4, pc}
    2ef2:	46c0      	nop			; (mov r8, r8)
    2ef4:	20000768 	.word	0x20000768
    2ef8:	00003849 	.word	0x00003849
    2efc:	000031cd 	.word	0x000031cd
    2f00:	2000001c 	.word	0x2000001c
    2f04:	000038c1 	.word	0x000038c1
    2f08:	000038f9 	.word	0x000038f9

00002f0c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    2f0c:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    2f0e:	4b01      	ldr	r3, [pc, #4]	; (2f14 <usb_init+0x8>)
    2f10:	4798      	blx	r3
}
    2f12:	bd10      	pop	{r4, pc}
    2f14:	00002ed9 	.word	0x00002ed9

00002f18 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2f18:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    2f1c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2f1e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2f20:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    2f24:	4770      	bx	lr

00002f26 <atomic_leave_critical>:
    2f26:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    2f2a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2f2c:	f383 8810 	msr	PRIMASK, r3
}
    2f30:	4770      	bx	lr
	...

00002f34 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2f34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f36:	b083      	sub	sp, #12
    2f38:	0006      	movs	r6, r0
    2f3a:	000c      	movs	r4, r1
    2f3c:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    2f3e:	780a      	ldrb	r2, [r1, #0]
    2f40:	0653      	lsls	r3, r2, #25
    2f42:	0f9b      	lsrs	r3, r3, #30
    2f44:	2b01      	cmp	r3, #1
    2f46:	d000      	beq.n	2f4a <cdcdf_acm_req+0x16>
    2f48:	e06c      	b.n	3024 <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2f4a:	7909      	ldrb	r1, [r1, #4]
    2f4c:	7963      	ldrb	r3, [r4, #5]
    2f4e:	021b      	lsls	r3, r3, #8
    2f50:	430b      	orrs	r3, r1
    2f52:	493b      	ldr	r1, [pc, #236]	; (3040 <cdcdf_acm_req+0x10c>)
    2f54:	7809      	ldrb	r1, [r1, #0]
    2f56:	4299      	cmp	r1, r3
    2f58:	d003      	beq.n	2f62 <cdcdf_acm_req+0x2e>
    2f5a:	4939      	ldr	r1, [pc, #228]	; (3040 <cdcdf_acm_req+0x10c>)
    2f5c:	7849      	ldrb	r1, [r1, #1]
    2f5e:	4299      	cmp	r1, r3
    2f60:	d163      	bne.n	302a <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    2f62:	b252      	sxtb	r2, r2
    2f64:	2a00      	cmp	r2, #0
    2f66:	db0e      	blt.n	2f86 <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    2f68:	79a7      	ldrb	r7, [r4, #6]
    2f6a:	79e3      	ldrb	r3, [r4, #7]
    2f6c:	021b      	lsls	r3, r3, #8
    2f6e:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    2f70:	4b34      	ldr	r3, [pc, #208]	; (3044 <cdcdf_acm_req+0x110>)
    2f72:	4798      	blx	r3
	switch (req->bRequest) {
    2f74:	7863      	ldrb	r3, [r4, #1]
    2f76:	2b20      	cmp	r3, #32
    2f78:	d018      	beq.n	2fac <cdcdf_acm_req+0x78>
    2f7a:	2b22      	cmp	r3, #34	; 0x22
    2f7c:	d03c      	beq.n	2ff8 <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    2f7e:	200d      	movs	r0, #13
    2f80:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    2f82:	b003      	add	sp, #12
    2f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    2f86:	2d01      	cmp	r5, #1
    2f88:	d052      	beq.n	3030 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    2f8a:	7863      	ldrb	r3, [r4, #1]
    2f8c:	2b21      	cmp	r3, #33	; 0x21
    2f8e:	d151      	bne.n	3034 <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    2f90:	79a2      	ldrb	r2, [r4, #6]
    2f92:	79e3      	ldrb	r3, [r4, #7]
    2f94:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2f96:	4313      	orrs	r3, r2
    2f98:	2b07      	cmp	r3, #7
    2f9a:	d14e      	bne.n	303a <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2f9c:	2300      	movs	r3, #0
    2f9e:	2207      	movs	r2, #7
    2fa0:	4927      	ldr	r1, [pc, #156]	; (3040 <cdcdf_acm_req+0x10c>)
    2fa2:	3108      	adds	r1, #8
    2fa4:	0030      	movs	r0, r6
    2fa6:	4c28      	ldr	r4, [pc, #160]	; (3048 <cdcdf_acm_req+0x114>)
    2fa8:	47a0      	blx	r4
    2faa:	e7ea      	b.n	2f82 <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2fac:	2f07      	cmp	r7, #7
    2fae:	d134      	bne.n	301a <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    2fb0:	2d00      	cmp	r5, #0
    2fb2:	d01a      	beq.n	2fea <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2fb4:	2207      	movs	r2, #7
    2fb6:	0001      	movs	r1, r0
    2fb8:	4668      	mov	r0, sp
    2fba:	4b24      	ldr	r3, [pc, #144]	; (304c <cdcdf_acm_req+0x118>)
    2fbc:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2fbe:	4b20      	ldr	r3, [pc, #128]	; (3040 <cdcdf_acm_req+0x10c>)
    2fc0:	691b      	ldr	r3, [r3, #16]
    2fc2:	2b00      	cmp	r3, #0
    2fc4:	d005      	beq.n	2fd2 <cdcdf_acm_req+0x9e>
    2fc6:	4668      	mov	r0, sp
    2fc8:	4798      	blx	r3
    2fca:	0003      	movs	r3, r0
			return ERR_NONE;
    2fcc:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2fce:	2b00      	cmp	r3, #0
    2fd0:	d0d7      	beq.n	2f82 <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    2fd2:	4a1b      	ldr	r2, [pc, #108]	; (3040 <cdcdf_acm_req+0x10c>)
    2fd4:	0013      	movs	r3, r2
    2fd6:	9900      	ldr	r1, [sp, #0]
    2fd8:	6091      	str	r1, [r2, #8]
    2fda:	466a      	mov	r2, sp
    2fdc:	8892      	ldrh	r2, [r2, #4]
    2fde:	819a      	strh	r2, [r3, #12]
    2fe0:	466a      	mov	r2, sp
    2fe2:	7992      	ldrb	r2, [r2, #6]
    2fe4:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    2fe6:	2000      	movs	r0, #0
    2fe8:	e7cb      	b.n	2f82 <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2fea:	2300      	movs	r3, #0
    2fec:	2207      	movs	r2, #7
    2fee:	0001      	movs	r1, r0
    2ff0:	0030      	movs	r0, r6
    2ff2:	4c15      	ldr	r4, [pc, #84]	; (3048 <cdcdf_acm_req+0x114>)
    2ff4:	47a0      	blx	r4
    2ff6:	e7c4      	b.n	2f82 <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    2ff8:	2300      	movs	r3, #0
    2ffa:	2200      	movs	r2, #0
    2ffc:	2100      	movs	r1, #0
    2ffe:	2000      	movs	r0, #0
    3000:	4d11      	ldr	r5, [pc, #68]	; (3048 <cdcdf_acm_req+0x114>)
    3002:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    3004:	4b0e      	ldr	r3, [pc, #56]	; (3040 <cdcdf_acm_req+0x10c>)
    3006:	695b      	ldr	r3, [r3, #20]
    3008:	2b00      	cmp	r3, #0
    300a:	d009      	beq.n	3020 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    300c:	78a2      	ldrb	r2, [r4, #2]
    300e:	78e0      	ldrb	r0, [r4, #3]
    3010:	0200      	lsls	r0, r0, #8
    3012:	4310      	orrs	r0, r2
    3014:	4798      	blx	r3
		return ERR_NONE;
    3016:	2000      	movs	r0, #0
    3018:	e7b3      	b.n	2f82 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    301a:	2001      	movs	r0, #1
    301c:	4240      	negs	r0, r0
    301e:	e7b0      	b.n	2f82 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    3020:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    3022:	e7ae      	b.n	2f82 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    3024:	200a      	movs	r0, #10
    3026:	4240      	negs	r0, r0
    3028:	e7ab      	b.n	2f82 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    302a:	200a      	movs	r0, #10
    302c:	4240      	negs	r0, r0
    302e:	e7a8      	b.n	2f82 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    3030:	2000      	movs	r0, #0
    3032:	e7a6      	b.n	2f82 <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    3034:	200d      	movs	r0, #13
    3036:	4240      	negs	r0, r0
    3038:	e7a3      	b.n	2f82 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    303a:	2001      	movs	r0, #1
    303c:	4240      	negs	r0, r0
    303e:	e7a0      	b.n	2f82 <cdcdf_acm_req+0x4e>
    3040:	200007e8 	.word	0x200007e8
    3044:	00003905 	.word	0x00003905
    3048:	000033b5 	.word	0x000033b5
    304c:	00003aed 	.word	0x00003aed

00003050 <cdcdf_acm_ctrl>:
{
    3050:	b5f0      	push	{r4, r5, r6, r7, lr}
    3052:	46de      	mov	lr, fp
    3054:	4657      	mov	r7, sl
    3056:	464e      	mov	r6, r9
    3058:	4645      	mov	r5, r8
    305a:	b5e0      	push	{r5, r6, r7, lr}
    305c:	b083      	sub	sp, #12
    305e:	0016      	movs	r6, r2
	switch (ctrl) {
    3060:	2901      	cmp	r1, #1
    3062:	d068      	beq.n	3136 <cdcdf_acm_ctrl+0xe6>
    3064:	2900      	cmp	r1, #0
    3066:	d00b      	beq.n	3080 <cdcdf_acm_ctrl+0x30>
    3068:	2902      	cmp	r1, #2
    306a:	d100      	bne.n	306e <cdcdf_acm_ctrl+0x1e>
    306c:	e093      	b.n	3196 <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    306e:	200d      	movs	r0, #13
    3070:	4240      	negs	r0, r0
}
    3072:	b003      	add	sp, #12
    3074:	bc3c      	pop	{r2, r3, r4, r5}
    3076:	4690      	mov	r8, r2
    3078:	4699      	mov	r9, r3
    307a:	46a2      	mov	sl, r4
    307c:	46ab      	mov	fp, r5
    307e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3080:	6883      	ldr	r3, [r0, #8]
    3082:	4698      	mov	r8, r3
	ifc = desc->sod;
    3084:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    3086:	2800      	cmp	r0, #0
    3088:	d100      	bne.n	308c <cdcdf_acm_ctrl+0x3c>
    308a:	e087      	b.n	319c <cdcdf_acm_ctrl+0x14c>
    308c:	9301      	str	r3, [sp, #4]
    308e:	2301      	movs	r3, #1
    3090:	4443      	add	r3, r8
    3092:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3094:	4f47      	ldr	r7, [pc, #284]	; (31b4 <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    3096:	4b48      	ldr	r3, [pc, #288]	; (31b8 <cdcdf_acm_ctrl+0x168>)
    3098:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    309a:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    309c:	7943      	ldrb	r3, [r0, #5]
    309e:	2108      	movs	r1, #8
    30a0:	438b      	bics	r3, r1
    30a2:	2b02      	cmp	r3, #2
    30a4:	d002      	beq.n	30ac <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    30a6:	200a      	movs	r0, #10
    30a8:	4240      	negs	r0, r0
    30aa:	e7e2      	b.n	3072 <cdcdf_acm_ctrl+0x22>
    30ac:	9901      	ldr	r1, [sp, #4]
    30ae:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    30b0:	780b      	ldrb	r3, [r1, #0]
    30b2:	429a      	cmp	r2, r3
    30b4:	d075      	beq.n	31a2 <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    30b6:	2bff      	cmp	r3, #255	; 0xff
    30b8:	d176      	bne.n	31a8 <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    30ba:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    30bc:	2205      	movs	r2, #5
    30be:	6871      	ldr	r1, [r6, #4]
    30c0:	4b3e      	ldr	r3, [pc, #248]	; (31bc <cdcdf_acm_ctrl+0x16c>)
    30c2:	4798      	blx	r3
    30c4:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    30c6:	d11e      	bne.n	3106 <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    30c8:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    30ca:	7803      	ldrb	r3, [r0, #0]
    30cc:	18c0      	adds	r0, r0, r3
    30ce:	2204      	movs	r2, #4
    30d0:	6871      	ldr	r1, [r6, #4]
    30d2:	4b3a      	ldr	r3, [pc, #232]	; (31bc <cdcdf_acm_ctrl+0x16c>)
    30d4:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    30d6:	9b01      	ldr	r3, [sp, #4]
    30d8:	455b      	cmp	r3, fp
    30da:	d027      	beq.n	312c <cdcdf_acm_ctrl+0xdc>
    30dc:	9b01      	ldr	r3, [sp, #4]
    30de:	3301      	adds	r3, #1
    30e0:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    30e2:	2800      	cmp	r0, #0
    30e4:	d1d9      	bne.n	309a <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    30e6:	200a      	movs	r0, #10
    30e8:	4240      	negs	r0, r0
    30ea:	e7c2      	b.n	3072 <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    30ec:	4653      	mov	r3, sl
    30ee:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    30f0:	0028      	movs	r0, r5
    30f2:	4b31      	ldr	r3, [pc, #196]	; (31b8 <cdcdf_acm_ctrl+0x168>)
    30f4:	4798      	blx	r3
			desc->sod = ep;
    30f6:	6034      	str	r4, [r6, #0]
    30f8:	7820      	ldrb	r0, [r4, #0]
    30fa:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    30fc:	6871      	ldr	r1, [r6, #4]
    30fe:	4b30      	ldr	r3, [pc, #192]	; (31c0 <cdcdf_acm_ctrl+0x170>)
    3100:	4798      	blx	r3
    3102:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    3104:	d0e0      	beq.n	30c8 <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    3106:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    3108:	7963      	ldrb	r3, [r4, #5]
    310a:	021b      	lsls	r3, r3, #8
    310c:	7922      	ldrb	r2, [r4, #4]
    310e:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3110:	b292      	uxth	r2, r2
    3112:	78e1      	ldrb	r1, [r4, #3]
    3114:	0028      	movs	r0, r5
    3116:	47b8      	blx	r7
    3118:	2800      	cmp	r0, #0
    311a:	d148      	bne.n	31ae <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    311c:	b26b      	sxtb	r3, r5
    311e:	2b00      	cmp	r3, #0
    3120:	dbe4      	blt.n	30ec <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    3122:	4643      	mov	r3, r8
    3124:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    3126:	0028      	movs	r0, r5
    3128:	47c8      	blx	r9
    312a:	e7e4      	b.n	30f6 <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    312c:	2201      	movs	r2, #1
    312e:	4b25      	ldr	r3, [pc, #148]	; (31c4 <cdcdf_acm_ctrl+0x174>)
    3130:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    3132:	2000      	movs	r0, #0
    3134:	e79d      	b.n	3072 <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3136:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    3138:	2a00      	cmp	r2, #0
    313a:	d008      	beq.n	314e <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    313c:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    313e:	795b      	ldrb	r3, [r3, #5]
    3140:	2208      	movs	r2, #8
    3142:	4393      	bics	r3, r2
    3144:	2b02      	cmp	r3, #2
    3146:	d002      	beq.n	314e <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    3148:	200a      	movs	r0, #10
    314a:	4240      	negs	r0, r0
    314c:	e791      	b.n	3072 <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    314e:	7823      	ldrb	r3, [r4, #0]
    3150:	2bff      	cmp	r3, #255	; 0xff
    3152:	d008      	beq.n	3166 <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    3154:	23ff      	movs	r3, #255	; 0xff
    3156:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    3158:	78a0      	ldrb	r0, [r4, #2]
    315a:	28ff      	cmp	r0, #255	; 0xff
    315c:	d003      	beq.n	3166 <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    315e:	4b1a      	ldr	r3, [pc, #104]	; (31c8 <cdcdf_acm_ctrl+0x178>)
    3160:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3162:	23ff      	movs	r3, #255	; 0xff
    3164:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    3166:	7863      	ldrb	r3, [r4, #1]
    3168:	2bff      	cmp	r3, #255	; 0xff
    316a:	d008      	beq.n	317e <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    316c:	23ff      	movs	r3, #255	; 0xff
    316e:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    3170:	78e0      	ldrb	r0, [r4, #3]
    3172:	28ff      	cmp	r0, #255	; 0xff
    3174:	d003      	beq.n	317e <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3176:	4b14      	ldr	r3, [pc, #80]	; (31c8 <cdcdf_acm_ctrl+0x178>)
    3178:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    317a:	23ff      	movs	r3, #255	; 0xff
    317c:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    317e:	7920      	ldrb	r0, [r4, #4]
    3180:	28ff      	cmp	r0, #255	; 0xff
    3182:	d003      	beq.n	318c <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    3184:	4b10      	ldr	r3, [pc, #64]	; (31c8 <cdcdf_acm_ctrl+0x178>)
    3186:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    3188:	23ff      	movs	r3, #255	; 0xff
    318a:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    318c:	2200      	movs	r2, #0
    318e:	4b0d      	ldr	r3, [pc, #52]	; (31c4 <cdcdf_acm_ctrl+0x174>)
    3190:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    3192:	2000      	movs	r0, #0
    3194:	e76d      	b.n	3072 <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    3196:	201b      	movs	r0, #27
    3198:	4240      	negs	r0, r0
    319a:	e76a      	b.n	3072 <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    319c:	200a      	movs	r0, #10
    319e:	4240      	negs	r0, r0
    31a0:	e767      	b.n	3072 <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    31a2:	2012      	movs	r0, #18
    31a4:	4240      	negs	r0, r0
    31a6:	e764      	b.n	3072 <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    31a8:	201c      	movs	r0, #28
    31aa:	4240      	negs	r0, r0
    31ac:	e761      	b.n	3072 <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    31ae:	2014      	movs	r0, #20
    31b0:	4240      	negs	r0, r0
    31b2:	e75e      	b.n	3072 <cdcdf_acm_ctrl+0x22>
    31b4:	000010a5 	.word	0x000010a5
    31b8:	00001139 	.word	0x00001139
    31bc:	00003921 	.word	0x00003921
    31c0:	00003957 	.word	0x00003957
    31c4:	200007e8 	.word	0x200007e8
    31c8:	0000110d 	.word	0x0000110d

000031cc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    31cc:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    31ce:	4b0a      	ldr	r3, [pc, #40]	; (31f8 <cdcdf_acm_init+0x2c>)
    31d0:	4798      	blx	r3
    31d2:	2801      	cmp	r0, #1
    31d4:	d80c      	bhi.n	31f0 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    31d6:	4809      	ldr	r0, [pc, #36]	; (31fc <cdcdf_acm_init+0x30>)
    31d8:	4b09      	ldr	r3, [pc, #36]	; (3200 <cdcdf_acm_init+0x34>)
    31da:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    31dc:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    31de:	3018      	adds	r0, #24
    31e0:	4b08      	ldr	r3, [pc, #32]	; (3204 <cdcdf_acm_init+0x38>)
    31e2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    31e4:	4908      	ldr	r1, [pc, #32]	; (3208 <cdcdf_acm_init+0x3c>)
    31e6:	2001      	movs	r0, #1
    31e8:	4b08      	ldr	r3, [pc, #32]	; (320c <cdcdf_acm_init+0x40>)
    31ea:	4798      	blx	r3
	return ERR_NONE;
    31ec:	2000      	movs	r0, #0
}
    31ee:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    31f0:	2011      	movs	r0, #17
    31f2:	4240      	negs	r0, r0
    31f4:	e7fb      	b.n	31ee <cdcdf_acm_init+0x22>
    31f6:	46c0      	nop			; (mov r8, r8)
    31f8:	00003911 	.word	0x00003911
    31fc:	200007e8 	.word	0x200007e8
    3200:	00003051 	.word	0x00003051
    3204:	000038a9 	.word	0x000038a9
    3208:	2000007c 	.word	0x2000007c
    320c:	00003811 	.word	0x00003811

00003210 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    3210:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3212:	4b06      	ldr	r3, [pc, #24]	; (322c <usbdc_unconfig+0x1c>)
    3214:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    3216:	2c00      	cmp	r4, #0
    3218:	d007      	beq.n	322a <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    321a:	2200      	movs	r2, #0
    321c:	2101      	movs	r1, #1
    321e:	0020      	movs	r0, r4
    3220:	6863      	ldr	r3, [r4, #4]
    3222:	4798      	blx	r3
		func = func->next;
    3224:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    3226:	2c00      	cmp	r4, #0
    3228:	d1f7      	bne.n	321a <usbdc_unconfig+0xa>
	}
}
    322a:	bd10      	pop	{r4, pc}
    322c:	2000080c 	.word	0x2000080c

00003230 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    3230:	b570      	push	{r4, r5, r6, lr}
    3232:	0006      	movs	r6, r0
    3234:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    3236:	4b07      	ldr	r3, [pc, #28]	; (3254 <usbdc_change_notify+0x24>)
    3238:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    323a:	2c00      	cmp	r4, #0
    323c:	d103      	bne.n	3246 <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    323e:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    3240:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    3242:	2c00      	cmp	r4, #0
    3244:	d0fb      	beq.n	323e <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    3246:	6863      	ldr	r3, [r4, #4]
    3248:	2b00      	cmp	r3, #0
    324a:	d0f9      	beq.n	3240 <usbdc_change_notify+0x10>
			cg->cb(change, value);
    324c:	0029      	movs	r1, r5
    324e:	0030      	movs	r0, r6
    3250:	4798      	blx	r3
    3252:	e7f5      	b.n	3240 <usbdc_change_notify+0x10>
    3254:	2000080c 	.word	0x2000080c

00003258 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    325a:	0007      	movs	r7, r0
    325c:	000e      	movs	r6, r1
    325e:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3260:	4b0d      	ldr	r3, [pc, #52]	; (3298 <usbdc_request_handler+0x40>)
    3262:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    3264:	2c00      	cmp	r4, #0
    3266:	d104      	bne.n	3272 <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    3268:	2000      	movs	r0, #0
    326a:	e011      	b.n	3290 <usbdc_request_handler+0x38>
		h = h->next;
    326c:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    326e:	2c00      	cmp	r4, #0
    3270:	d00d      	beq.n	328e <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    3272:	6863      	ldr	r3, [r4, #4]
    3274:	2b00      	cmp	r3, #0
    3276:	d0f9      	beq.n	326c <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    3278:	002a      	movs	r2, r5
    327a:	0031      	movs	r1, r6
    327c:	0038      	movs	r0, r7
    327e:	4798      	blx	r3
			if (0 == rc) {
    3280:	2800      	cmp	r0, #0
    3282:	d006      	beq.n	3292 <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    3284:	300a      	adds	r0, #10
    3286:	d0f1      	beq.n	326c <usbdc_request_handler+0x14>
				return -1;
    3288:	2001      	movs	r0, #1
    328a:	4240      	negs	r0, r0
    328c:	e000      	b.n	3290 <usbdc_request_handler+0x38>
	return false;
    328e:	2000      	movs	r0, #0
}
    3290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    3292:	2001      	movs	r0, #1
    3294:	e7fc      	b.n	3290 <usbdc_request_handler+0x38>
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	2000080c 	.word	0x2000080c

0000329c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    329c:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    329e:	4b06      	ldr	r3, [pc, #24]	; (32b8 <usbd_sof_cb+0x1c>)
    32a0:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    32a2:	2c00      	cmp	r4, #0
    32a4:	d103      	bne.n	32ae <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    32a6:	bd10      	pop	{r4, pc}
		sof = sof->next;
    32a8:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    32aa:	2c00      	cmp	r4, #0
    32ac:	d0fb      	beq.n	32a6 <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    32ae:	6863      	ldr	r3, [r4, #4]
    32b0:	2b00      	cmp	r3, #0
    32b2:	d0f9      	beq.n	32a8 <usbd_sof_cb+0xc>
			sof->cb();
    32b4:	4798      	blx	r3
    32b6:	e7f7      	b.n	32a8 <usbd_sof_cb+0xc>
    32b8:	2000080c 	.word	0x2000080c

000032bc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    32bc:	b510      	push	{r4, lr}
    32be:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    32c0:	2900      	cmp	r1, #0
    32c2:	d003      	beq.n	32cc <usbdc_cb_ctl_done+0x10>
    32c4:	2901      	cmp	r1, #1
    32c6:	d029      	beq.n	331c <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    32c8:	2000      	movs	r0, #0
    32ca:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    32cc:	7813      	ldrb	r3, [r2, #0]
    32ce:	2b00      	cmp	r3, #0
    32d0:	d1fa      	bne.n	32c8 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    32d2:	7853      	ldrb	r3, [r2, #1]
    32d4:	2b05      	cmp	r3, #5
    32d6:	d011      	beq.n	32fc <usbdc_cb_ctl_done+0x40>
    32d8:	2b09      	cmp	r3, #9
    32da:	d1f5      	bne.n	32c8 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    32dc:	7892      	ldrb	r2, [r2, #2]
    32de:	4b12      	ldr	r3, [pc, #72]	; (3328 <usbdc_cb_ctl_done+0x6c>)
    32e0:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    32e2:	78a3      	ldrb	r3, [r4, #2]
    32e4:	78e1      	ldrb	r1, [r4, #3]
    32e6:	0209      	lsls	r1, r1, #8
    32e8:	4319      	orrs	r1, r3
    32ea:	1e4b      	subs	r3, r1, #1
    32ec:	4199      	sbcs	r1, r3
    32ee:	3103      	adds	r1, #3
    32f0:	4b0d      	ldr	r3, [pc, #52]	; (3328 <usbdc_cb_ctl_done+0x6c>)
    32f2:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    32f4:	2001      	movs	r0, #1
    32f6:	4b0d      	ldr	r3, [pc, #52]	; (332c <usbdc_cb_ctl_done+0x70>)
    32f8:	4798      	blx	r3
    32fa:	e7e5      	b.n	32c8 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    32fc:	7890      	ldrb	r0, [r2, #2]
    32fe:	4b0c      	ldr	r3, [pc, #48]	; (3330 <usbdc_cb_ctl_done+0x74>)
    3300:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    3302:	78a3      	ldrb	r3, [r4, #2]
    3304:	78e1      	ldrb	r1, [r4, #3]
    3306:	0209      	lsls	r1, r1, #8
    3308:	4319      	orrs	r1, r3
    330a:	1e4b      	subs	r3, r1, #1
    330c:	4199      	sbcs	r1, r3
    330e:	3102      	adds	r1, #2
    3310:	4b05      	ldr	r3, [pc, #20]	; (3328 <usbdc_cb_ctl_done+0x6c>)
    3312:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3314:	2001      	movs	r0, #1
    3316:	4b05      	ldr	r3, [pc, #20]	; (332c <usbdc_cb_ctl_done+0x70>)
    3318:	4798      	blx	r3
    331a:	e7d5      	b.n	32c8 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    331c:	2201      	movs	r2, #1
    331e:	0021      	movs	r1, r4
    3320:	2000      	movs	r0, #0
    3322:	4b04      	ldr	r3, [pc, #16]	; (3334 <usbdc_cb_ctl_done+0x78>)
    3324:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    3326:	e7cf      	b.n	32c8 <usbdc_cb_ctl_done+0xc>
    3328:	2000080c 	.word	0x2000080c
    332c:	00003231 	.word	0x00003231
    3330:	00001099 	.word	0x00001099
    3334:	00003259 	.word	0x00003259

00003338 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    3338:	b510      	push	{r4, lr}
	usbdc_unconfig();
    333a:	4b0d      	ldr	r3, [pc, #52]	; (3370 <usbdc_reset+0x38>)
    333c:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    333e:	4c0d      	ldr	r4, [pc, #52]	; (3374 <usbdc_reset+0x3c>)
    3340:	2302      	movs	r3, #2
    3342:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    3344:	2300      	movs	r3, #0
    3346:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    3348:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    334a:	2000      	movs	r0, #0
    334c:	4b0a      	ldr	r3, [pc, #40]	; (3378 <usbdc_reset+0x40>)
    334e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    3350:	7f20      	ldrb	r0, [r4, #28]
    3352:	4b0a      	ldr	r3, [pc, #40]	; (337c <usbdc_reset+0x44>)
    3354:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    3356:	4a0a      	ldr	r2, [pc, #40]	; (3380 <usbdc_reset+0x48>)
    3358:	2100      	movs	r1, #0
    335a:	2000      	movs	r0, #0
    335c:	4c09      	ldr	r4, [pc, #36]	; (3384 <usbdc_reset+0x4c>)
    335e:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3360:	4a09      	ldr	r2, [pc, #36]	; (3388 <usbdc_reset+0x50>)
    3362:	2102      	movs	r1, #2
    3364:	2000      	movs	r0, #0
    3366:	47a0      	blx	r4
	usb_d_ep_enable(0);
    3368:	2000      	movs	r0, #0
    336a:	4b08      	ldr	r3, [pc, #32]	; (338c <usbdc_reset+0x54>)
    336c:	4798      	blx	r3
}
    336e:	bd10      	pop	{r4, pc}
    3370:	00003211 	.word	0x00003211
    3374:	2000080c 	.word	0x2000080c
    3378:	0000110d 	.word	0x0000110d
    337c:	000010f9 	.word	0x000010f9
    3380:	000033d1 	.word	0x000033d1
    3384:	00001315 	.word	0x00001315
    3388:	000032bd 	.word	0x000032bd
    338c:	00001139 	.word	0x00001139

00003390 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    3390:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    3392:	2800      	cmp	r0, #0
    3394:	d002      	beq.n	339c <usbd_event_cb+0xc>
    3396:	2801      	cmp	r0, #1
    3398:	d004      	beq.n	33a4 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    339a:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    339c:	2000      	movs	r0, #0
    339e:	4b03      	ldr	r3, [pc, #12]	; (33ac <usbd_event_cb+0x1c>)
    33a0:	4798      	blx	r3
		break;
    33a2:	e7fa      	b.n	339a <usbd_event_cb+0xa>
		usbdc_reset();
    33a4:	4b02      	ldr	r3, [pc, #8]	; (33b0 <usbd_event_cb+0x20>)
    33a6:	4798      	blx	r3
}
    33a8:	e7f7      	b.n	339a <usbd_event_cb+0xa>
    33aa:	46c0      	nop			; (mov r8, r8)
    33ac:	00003231 	.word	0x00003231
    33b0:	00003339 	.word	0x00003339

000033b4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    33b4:	b510      	push	{r4, lr}
    33b6:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    33b8:	ac01      	add	r4, sp, #4
    33ba:	9101      	str	r1, [sp, #4]
    33bc:	9202      	str	r2, [sp, #8]
    33be:	7220      	strb	r0, [r4, #8]
    33c0:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    33c2:	0020      	movs	r0, r4
    33c4:	4b01      	ldr	r3, [pc, #4]	; (33cc <usbdc_xfer+0x18>)
    33c6:	4798      	blx	r3
}
    33c8:	b004      	add	sp, #16
    33ca:	bd10      	pop	{r4, pc}
    33cc:	00001185 	.word	0x00001185

000033d0 <usbdc_cb_ctl_req>:
{
    33d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    33d2:	46c6      	mov	lr, r8
    33d4:	b500      	push	{lr}
    33d6:	b084      	sub	sp, #16
    33d8:	0005      	movs	r5, r0
    33da:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    33dc:	2200      	movs	r2, #0
    33de:	4bb5      	ldr	r3, [pc, #724]	; (36b4 <usbdc_cb_ctl_req+0x2e4>)
    33e0:	4798      	blx	r3
    33e2:	1c43      	adds	r3, r0, #1
    33e4:	d00d      	beq.n	3402 <usbdc_cb_ctl_req+0x32>
		return true;
    33e6:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    33e8:	2801      	cmp	r0, #1
    33ea:	d00b      	beq.n	3404 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    33ec:	7822      	ldrb	r2, [r4, #0]
    33ee:	231f      	movs	r3, #31
    33f0:	0011      	movs	r1, r2
    33f2:	4399      	bics	r1, r3
    33f4:	d00b      	beq.n	340e <usbdc_cb_ctl_req+0x3e>
    33f6:	b2cb      	uxtb	r3, r1
    33f8:	2b80      	cmp	r3, #128	; 0x80
    33fa:	d100      	bne.n	33fe <usbdc_cb_ctl_req+0x2e>
    33fc:	e0f8      	b.n	35f0 <usbdc_cb_ctl_req+0x220>
		return false;
    33fe:	2300      	movs	r3, #0
    3400:	e000      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		return false;
    3402:	2300      	movs	r3, #0
}
    3404:	0018      	movs	r0, r3
    3406:	b004      	add	sp, #16
    3408:	bc04      	pop	{r2}
    340a:	4690      	mov	r8, r2
    340c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    340e:	7863      	ldrb	r3, [r4, #1]
    3410:	2b0b      	cmp	r3, #11
    3412:	d900      	bls.n	3416 <usbdc_cb_ctl_req+0x46>
    3414:	e1e4      	b.n	37e0 <usbdc_cb_ctl_req+0x410>
    3416:	009b      	lsls	r3, r3, #2
    3418:	49a7      	ldr	r1, [pc, #668]	; (36b8 <usbdc_cb_ctl_req+0x2e8>)
    341a:	58cb      	ldr	r3, [r1, r3]
    341c:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    341e:	2301      	movs	r3, #1
    3420:	2200      	movs	r2, #0
    3422:	2100      	movs	r1, #0
    3424:	0028      	movs	r0, r5
    3426:	4ca5      	ldr	r4, [pc, #660]	; (36bc <usbdc_cb_ctl_req+0x2ec>)
    3428:	47a0      	blx	r4
    342a:	4243      	negs	r3, r0
    342c:	4143      	adcs	r3, r0
    342e:	b2db      	uxtb	r3, r3
    3430:	e7e8      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    3432:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    3434:	2a00      	cmp	r2, #0
    3436:	d01a      	beq.n	346e <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    3438:	4ba1      	ldr	r3, [pc, #644]	; (36c0 <usbdc_cb_ctl_req+0x2f0>)
    343a:	681b      	ldr	r3, [r3, #0]
    343c:	6859      	ldr	r1, [r3, #4]
    343e:	6818      	ldr	r0, [r3, #0]
    3440:	4ba0      	ldr	r3, [pc, #640]	; (36c4 <usbdc_cb_ctl_req+0x2f4>)
    3442:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3444:	2800      	cmp	r0, #0
    3446:	d100      	bne.n	344a <usbdc_cb_ctl_req+0x7a>
    3448:	e1d4      	b.n	37f4 <usbdc_cb_ctl_req+0x424>
    344a:	78c3      	ldrb	r3, [r0, #3]
    344c:	021b      	lsls	r3, r3, #8
    344e:	7881      	ldrb	r1, [r0, #2]
    3450:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    3452:	b289      	uxth	r1, r1
    3454:	1841      	adds	r1, r0, r1
    3456:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3458:	2204      	movs	r2, #4
    345a:	4b9b      	ldr	r3, [pc, #620]	; (36c8 <usbdc_cb_ctl_req+0x2f8>)
    345c:	4798      	blx	r3
    345e:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    3460:	2800      	cmp	r0, #0
    3462:	d006      	beq.n	3472 <usbdc_cb_ctl_req+0xa2>
    3464:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3466:	4f96      	ldr	r7, [pc, #600]	; (36c0 <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3468:	4b97      	ldr	r3, [pc, #604]	; (36c8 <usbdc_cb_ctl_req+0x2f8>)
    346a:	4698      	mov	r8, r3
    346c:	e01a      	b.n	34a4 <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    346e:	4b97      	ldr	r3, [pc, #604]	; (36cc <usbdc_cb_ctl_req+0x2fc>)
    3470:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3472:	2301      	movs	r3, #1
    3474:	2200      	movs	r2, #0
    3476:	2100      	movs	r1, #0
    3478:	0028      	movs	r0, r5
    347a:	4c90      	ldr	r4, [pc, #576]	; (36bc <usbdc_cb_ctl_req+0x2ec>)
    347c:	47a0      	blx	r4
    347e:	4243      	negs	r3, r0
    3480:	4143      	adcs	r3, r0
    3482:	b2db      	uxtb	r3, r3
    3484:	e7be      	b.n	3404 <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    3486:	0034      	movs	r4, r6
    3488:	e000      	b.n	348c <usbdc_cb_ctl_req+0xbc>
    348a:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    348c:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    348e:	7803      	ldrb	r3, [r0, #0]
    3490:	18c0      	adds	r0, r0, r3
    3492:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3494:	9b03      	ldr	r3, [sp, #12]
    3496:	9301      	str	r3, [sp, #4]
    3498:	2204      	movs	r2, #4
    349a:	0019      	movs	r1, r3
    349c:	47c0      	blx	r8
    349e:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    34a0:	2800      	cmp	r0, #0
    34a2:	d0e6      	beq.n	3472 <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    34a4:	7886      	ldrb	r6, [r0, #2]
    34a6:	42a6      	cmp	r6, r4
    34a8:	d0f0      	beq.n	348c <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    34aa:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    34ac:	2c00      	cmp	r4, #0
    34ae:	d0ea      	beq.n	3486 <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    34b0:	aa02      	add	r2, sp, #8
    34b2:	2100      	movs	r1, #0
    34b4:	0020      	movs	r0, r4
    34b6:	6863      	ldr	r3, [r4, #4]
    34b8:	4798      	blx	r3
    34ba:	2800      	cmp	r0, #0
    34bc:	d0e5      	beq.n	348a <usbdc_cb_ctl_req+0xba>
					func = func->next;
    34be:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    34c0:	2c00      	cmp	r4, #0
    34c2:	d1f5      	bne.n	34b0 <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    34c4:	0034      	movs	r4, r6
    34c6:	e7e1      	b.n	348c <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    34c8:	231f      	movs	r3, #31
    34ca:	401a      	ands	r2, r3
		return false;
    34cc:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    34ce:	2a02      	cmp	r2, #2
    34d0:	d198      	bne.n	3404 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    34d2:	79a3      	ldrb	r3, [r4, #6]
    34d4:	79e2      	ldrb	r2, [r4, #7]
    34d6:	0212      	lsls	r2, r2, #8
    34d8:	431a      	orrs	r2, r3
			return false;
    34da:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    34dc:	2a00      	cmp	r2, #0
    34de:	d000      	beq.n	34e2 <usbdc_cb_ctl_req+0x112>
    34e0:	e790      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    34e2:	7920      	ldrb	r0, [r4, #4]
    34e4:	2100      	movs	r1, #0
    34e6:	4b7a      	ldr	r3, [pc, #488]	; (36d0 <usbdc_cb_ctl_req+0x300>)
    34e8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    34ea:	2301      	movs	r3, #1
    34ec:	2200      	movs	r2, #0
    34ee:	2100      	movs	r1, #0
    34f0:	0028      	movs	r0, r5
    34f2:	4c72      	ldr	r4, [pc, #456]	; (36bc <usbdc_cb_ctl_req+0x2ec>)
    34f4:	47a0      	blx	r4
		return true;
    34f6:	2301      	movs	r3, #1
    34f8:	e784      	b.n	3404 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    34fa:	231f      	movs	r3, #31
    34fc:	401a      	ands	r2, r3
		return false;
    34fe:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3500:	2a02      	cmp	r2, #2
    3502:	d000      	beq.n	3506 <usbdc_cb_ctl_req+0x136>
    3504:	e77e      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    3506:	79a3      	ldrb	r3, [r4, #6]
    3508:	79e2      	ldrb	r2, [r4, #7]
    350a:	0212      	lsls	r2, r2, #8
    350c:	431a      	orrs	r2, r3
			return false;
    350e:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    3510:	2a00      	cmp	r2, #0
    3512:	d000      	beq.n	3516 <usbdc_cb_ctl_req+0x146>
    3514:	e776      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    3516:	7920      	ldrb	r0, [r4, #4]
    3518:	2101      	movs	r1, #1
    351a:	4b6d      	ldr	r3, [pc, #436]	; (36d0 <usbdc_cb_ctl_req+0x300>)
    351c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    351e:	2301      	movs	r3, #1
    3520:	2200      	movs	r2, #0
    3522:	2100      	movs	r1, #0
    3524:	0028      	movs	r0, r5
    3526:	4c65      	ldr	r4, [pc, #404]	; (36bc <usbdc_cb_ctl_req+0x2ec>)
    3528:	47a0      	blx	r4
		return true;
    352a:	2301      	movs	r3, #1
    352c:	e76a      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    352e:	78a3      	ldrb	r3, [r4, #2]
    3530:	78e5      	ldrb	r5, [r4, #3]
    3532:	022d      	lsls	r5, r5, #8
    3534:	431d      	orrs	r5, r3
    3536:	7923      	ldrb	r3, [r4, #4]
    3538:	7964      	ldrb	r4, [r4, #5]
    353a:	0224      	lsls	r4, r4, #8
    353c:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    353e:	4a60      	ldr	r2, [pc, #384]	; (36c0 <usbdc_cb_ctl_req+0x2f0>)
    3540:	6813      	ldr	r3, [r2, #0]
    3542:	7ed2      	ldrb	r2, [r2, #27]
    3544:	6859      	ldr	r1, [r3, #4]
    3546:	6818      	ldr	r0, [r3, #0]
    3548:	4b5e      	ldr	r3, [pc, #376]	; (36c4 <usbdc_cb_ctl_req+0x2f4>)
    354a:	4798      	blx	r3
	if (NULL == ifc) {
    354c:	2800      	cmp	r0, #0
    354e:	d047      	beq.n	35e0 <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    3550:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    3552:	78c3      	ldrb	r3, [r0, #3]
    3554:	021b      	lsls	r3, r3, #8
    3556:	7881      	ldrb	r1, [r0, #2]
    3558:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    355a:	b289      	uxth	r1, r1
    355c:	1841      	adds	r1, r0, r1
    355e:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    3560:	2204      	movs	r2, #4
    3562:	4b59      	ldr	r3, [pc, #356]	; (36c8 <usbdc_cb_ctl_req+0x2f8>)
    3564:	4798      	blx	r3
    3566:	2800      	cmp	r0, #0
    3568:	d03c      	beq.n	35e4 <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    356a:	4e57      	ldr	r6, [pc, #348]	; (36c8 <usbdc_cb_ctl_req+0x2f8>)
    356c:	e008      	b.n	3580 <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    356e:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    3570:	7803      	ldrb	r3, [r0, #0]
    3572:	18c0      	adds	r0, r0, r3
    3574:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3576:	2204      	movs	r2, #4
    3578:	9903      	ldr	r1, [sp, #12]
    357a:	47b0      	blx	r6
		if (NULL == ifc) {
    357c:	2800      	cmp	r0, #0
    357e:	d033      	beq.n	35e8 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    3580:	7883      	ldrb	r3, [r0, #2]
    3582:	42a3      	cmp	r3, r4
    3584:	d1f3      	bne.n	356e <usbdc_cb_ctl_req+0x19e>
    3586:	78c3      	ldrb	r3, [r0, #3]
    3588:	42ab      	cmp	r3, r5
    358a:	d1f0      	bne.n	356e <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    358c:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    358e:	4b4c      	ldr	r3, [pc, #304]	; (36c0 <usbdc_cb_ctl_req+0x2f0>)
    3590:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    3592:	2e00      	cmp	r6, #0
    3594:	d02a      	beq.n	35ec <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3596:	aa02      	add	r2, sp, #8
    3598:	2101      	movs	r1, #1
    359a:	0030      	movs	r0, r6
    359c:	6873      	ldr	r3, [r6, #4]
    359e:	4798      	blx	r3
    35a0:	2800      	cmp	r0, #0
    35a2:	d004      	beq.n	35ae <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    35a4:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    35a6:	2e00      	cmp	r6, #0
    35a8:	d1f5      	bne.n	3596 <usbdc_cb_ctl_req+0x1c6>
	return false;
    35aa:	2300      	movs	r3, #0
    35ac:	e72a      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    35ae:	6873      	ldr	r3, [r6, #4]
    35b0:	aa02      	add	r2, sp, #8
    35b2:	2100      	movs	r1, #0
    35b4:	0030      	movs	r0, r6
    35b6:	4798      	blx	r3
			return false;
    35b8:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    35ba:	2800      	cmp	r0, #0
    35bc:	d000      	beq.n	35c0 <usbdc_cb_ctl_req+0x1f0>
    35be:	e721      	b.n	3404 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    35c0:	2d00      	cmp	r5, #0
    35c2:	d005      	beq.n	35d0 <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    35c4:	493e      	ldr	r1, [pc, #248]	; (36c0 <usbdc_cb_ctl_req+0x2f0>)
    35c6:	2201      	movs	r2, #1
    35c8:	40a2      	lsls	r2, r4
    35ca:	7f4b      	ldrb	r3, [r1, #29]
    35cc:	4313      	orrs	r3, r2
    35ce:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    35d0:	2300      	movs	r3, #0
    35d2:	2200      	movs	r2, #0
    35d4:	2100      	movs	r1, #0
    35d6:	2000      	movs	r0, #0
    35d8:	4c38      	ldr	r4, [pc, #224]	; (36bc <usbdc_cb_ctl_req+0x2ec>)
    35da:	47a0      	blx	r4
			return true;
    35dc:	2301      	movs	r3, #1
    35de:	e711      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		return false;
    35e0:	2300      	movs	r3, #0
    35e2:	e70f      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		return false;
    35e4:	2300      	movs	r3, #0
    35e6:	e70d      	b.n	3404 <usbdc_cb_ctl_req+0x34>
			return false;
    35e8:	2300      	movs	r3, #0
    35ea:	e70b      	b.n	3404 <usbdc_cb_ctl_req+0x34>
	return false;
    35ec:	2300      	movs	r3, #0
    35ee:	e709      	b.n	3404 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    35f0:	7863      	ldrb	r3, [r4, #1]
    35f2:	2b06      	cmp	r3, #6
    35f4:	d033      	beq.n	365e <usbdc_cb_ctl_req+0x28e>
    35f6:	b2d9      	uxtb	r1, r3
    35f8:	2906      	cmp	r1, #6
    35fa:	d922      	bls.n	3642 <usbdc_cb_ctl_req+0x272>
    35fc:	2b08      	cmp	r3, #8
    35fe:	d100      	bne.n	3602 <usbdc_cb_ctl_req+0x232>
    3600:	e0af      	b.n	3762 <usbdc_cb_ctl_req+0x392>
    3602:	2b0a      	cmp	r3, #10
    3604:	d000      	beq.n	3608 <usbdc_cb_ctl_req+0x238>
    3606:	e0ed      	b.n	37e4 <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    3608:	4b2d      	ldr	r3, [pc, #180]	; (36c0 <usbdc_cb_ctl_req+0x2f0>)
    360a:	7f5a      	ldrb	r2, [r3, #29]
    360c:	7921      	ldrb	r1, [r4, #4]
    360e:	7963      	ldrb	r3, [r4, #5]
    3610:	021b      	lsls	r3, r3, #8
    3612:	430b      	orrs	r3, r1
    3614:	411a      	asrs	r2, r3
    3616:	07d3      	lsls	r3, r2, #31
    3618:	d400      	bmi.n	361c <usbdc_cb_ctl_req+0x24c>
    361a:	e0ca      	b.n	37b2 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    361c:	4b28      	ldr	r3, [pc, #160]	; (36c0 <usbdc_cb_ctl_req+0x2f0>)
    361e:	691d      	ldr	r5, [r3, #16]
	return false;
    3620:	2300      	movs	r3, #0
	while (NULL != func) {
    3622:	2d00      	cmp	r5, #0
    3624:	d100      	bne.n	3628 <usbdc_cb_ctl_req+0x258>
    3626:	e6ed      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    3628:	0022      	movs	r2, r4
    362a:	2102      	movs	r1, #2
    362c:	0028      	movs	r0, r5
    362e:	686b      	ldr	r3, [r5, #4]
    3630:	4798      	blx	r3
    3632:	2800      	cmp	r0, #0
    3634:	db00      	blt.n	3638 <usbdc_cb_ctl_req+0x268>
    3636:	e0c8      	b.n	37ca <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    3638:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    363a:	2d00      	cmp	r5, #0
    363c:	d1f4      	bne.n	3628 <usbdc_cb_ctl_req+0x258>
	return false;
    363e:	2300      	movs	r3, #0
    3640:	e6e0      	b.n	3404 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    3642:	2b00      	cmp	r3, #0
    3644:	d000      	beq.n	3648 <usbdc_cb_ctl_req+0x278>
    3646:	e0cd      	b.n	37e4 <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3648:	231f      	movs	r3, #31
    364a:	401a      	ands	r2, r3
    364c:	b2d3      	uxtb	r3, r2
    364e:	2b01      	cmp	r3, #1
    3650:	d800      	bhi.n	3654 <usbdc_cb_ctl_req+0x284>
    3652:	e092      	b.n	377a <usbdc_cb_ctl_req+0x3aa>
    3654:	2a02      	cmp	r2, #2
    3656:	d100      	bne.n	365a <usbdc_cb_ctl_req+0x28a>
    3658:	e09f      	b.n	379a <usbdc_cb_ctl_req+0x3ca>
		return false;
    365a:	2300      	movs	r3, #0
    365c:	e6d2      	b.n	3404 <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    365e:	78a3      	ldrb	r3, [r4, #2]
    3660:	78e2      	ldrb	r2, [r4, #3]
    3662:	0212      	lsls	r2, r2, #8
    3664:	431a      	orrs	r2, r3
    3666:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    3668:	2b02      	cmp	r3, #2
    366a:	d033      	beq.n	36d4 <usbdc_cb_ctl_req+0x304>
    366c:	2b03      	cmp	r3, #3
    366e:	d056      	beq.n	371e <usbdc_cb_ctl_req+0x34e>
    3670:	2b01      	cmp	r3, #1
    3672:	d001      	beq.n	3678 <usbdc_cb_ctl_req+0x2a8>
	return false;
    3674:	2300      	movs	r3, #0
    3676:	e6c5      	b.n	3404 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    3678:	79a2      	ldrb	r2, [r4, #6]
    367a:	79e3      	ldrb	r3, [r4, #7]
    367c:	021b      	lsls	r3, r3, #8
    367e:	4313      	orrs	r3, r2
    3680:	1c1a      	adds	r2, r3, #0
    3682:	2b12      	cmp	r3, #18
    3684:	d900      	bls.n	3688 <usbdc_cb_ctl_req+0x2b8>
    3686:	2212      	movs	r2, #18
    3688:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    368a:	4b0d      	ldr	r3, [pc, #52]	; (36c0 <usbdc_cb_ctl_req+0x2f0>)
    368c:	681b      	ldr	r3, [r3, #0]
    368e:	6859      	ldr	r1, [r3, #4]
    3690:	6818      	ldr	r0, [r3, #0]
    3692:	2201      	movs	r2, #1
    3694:	4b0c      	ldr	r3, [pc, #48]	; (36c8 <usbdc_cb_ctl_req+0x2f8>)
    3696:	4798      	blx	r3
	if (!dev_desc) {
    3698:	2800      	cmp	r0, #0
    369a:	d100      	bne.n	369e <usbdc_cb_ctl_req+0x2ce>
    369c:	e0a4      	b.n	37e8 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    369e:	2300      	movs	r3, #0
    36a0:	0022      	movs	r2, r4
    36a2:	0001      	movs	r1, r0
    36a4:	0028      	movs	r0, r5
    36a6:	4c05      	ldr	r4, [pc, #20]	; (36bc <usbdc_cb_ctl_req+0x2ec>)
    36a8:	47a0      	blx	r4
    36aa:	4243      	negs	r3, r0
    36ac:	4143      	adcs	r3, r0
    36ae:	b2db      	uxtb	r3, r3
    36b0:	e6a8      	b.n	3404 <usbdc_cb_ctl_req+0x34>
    36b2:	46c0      	nop			; (mov r8, r8)
    36b4:	00003259 	.word	0x00003259
    36b8:	00003e18 	.word	0x00003e18
    36bc:	000033b5 	.word	0x000033b5
    36c0:	2000080c 	.word	0x2000080c
    36c4:	0000399d 	.word	0x0000399d
    36c8:	00003921 	.word	0x00003921
    36cc:	00003211 	.word	0x00003211
    36d0:	000012ad 	.word	0x000012ad
	uint16_t length   = req->wLength;
    36d4:	79a3      	ldrb	r3, [r4, #6]
    36d6:	79e6      	ldrb	r6, [r4, #7]
    36d8:	0236      	lsls	r6, r6, #8
    36da:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    36dc:	4b46      	ldr	r3, [pc, #280]	; (37f8 <usbdc_cb_ctl_req+0x428>)
    36de:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    36e0:	681b      	ldr	r3, [r3, #0]
    36e2:	3201      	adds	r2, #1
    36e4:	b2d2      	uxtb	r2, r2
    36e6:	6859      	ldr	r1, [r3, #4]
    36e8:	6818      	ldr	r0, [r3, #0]
    36ea:	4b44      	ldr	r3, [pc, #272]	; (37fc <usbdc_cb_ctl_req+0x42c>)
    36ec:	4798      	blx	r3
    36ee:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    36f0:	d07c      	beq.n	37ec <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    36f2:	78c3      	ldrb	r3, [r0, #3]
    36f4:	021b      	lsls	r3, r3, #8
    36f6:	7884      	ldrb	r4, [r0, #2]
    36f8:	18e4      	adds	r4, r4, r3
    36fa:	b2a4      	uxth	r4, r4
		need_zlp = false;
    36fc:	2300      	movs	r3, #0
	if (length <= total_len) {
    36fe:	42a6      	cmp	r6, r4
    3700:	d905      	bls.n	370e <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3702:	3f01      	subs	r7, #1
    3704:	403e      	ands	r6, r7
    3706:	4273      	negs	r3, r6
    3708:	4173      	adcs	r3, r6
    370a:	b2db      	uxtb	r3, r3
		length = total_len;
    370c:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    370e:	0032      	movs	r2, r6
    3710:	0028      	movs	r0, r5
    3712:	4c3b      	ldr	r4, [pc, #236]	; (3800 <usbdc_cb_ctl_req+0x430>)
    3714:	47a0      	blx	r4
    3716:	4243      	negs	r3, r0
    3718:	4143      	adcs	r3, r0
    371a:	b2db      	uxtb	r3, r3
    371c:	e672      	b.n	3404 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    371e:	79a3      	ldrb	r3, [r4, #6]
    3720:	79e1      	ldrb	r1, [r4, #7]
    3722:	0209      	lsls	r1, r1, #8
    3724:	4319      	orrs	r1, r3
    3726:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3728:	4b33      	ldr	r3, [pc, #204]	; (37f8 <usbdc_cb_ctl_req+0x428>)
    372a:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    372c:	681b      	ldr	r3, [r3, #0]
    372e:	b2d2      	uxtb	r2, r2
    3730:	6859      	ldr	r1, [r3, #4]
    3732:	6818      	ldr	r0, [r3, #0]
    3734:	4b33      	ldr	r3, [pc, #204]	; (3804 <usbdc_cb_ctl_req+0x434>)
    3736:	4798      	blx	r3
    3738:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    373a:	d059      	beq.n	37f0 <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    373c:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    373e:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    3740:	4294      	cmp	r4, r2
    3742:	d906      	bls.n	3752 <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3744:	1e73      	subs	r3, r6, #1
    3746:	4023      	ands	r3, r4
    3748:	0018      	movs	r0, r3
    374a:	4243      	negs	r3, r0
    374c:	4143      	adcs	r3, r0
    374e:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    3750:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    3752:	0022      	movs	r2, r4
    3754:	0028      	movs	r0, r5
    3756:	4c2a      	ldr	r4, [pc, #168]	; (3800 <usbdc_cb_ctl_req+0x430>)
    3758:	47a0      	blx	r4
    375a:	4243      	negs	r3, r0
    375c:	4143      	adcs	r3, r0
    375e:	b2db      	uxtb	r3, r3
    3760:	e650      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    3762:	4b25      	ldr	r3, [pc, #148]	; (37f8 <usbdc_cb_ctl_req+0x428>)
    3764:	7eda      	ldrb	r2, [r3, #27]
    3766:	6959      	ldr	r1, [r3, #20]
    3768:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    376a:	6959      	ldr	r1, [r3, #20]
    376c:	2300      	movs	r3, #0
    376e:	2201      	movs	r2, #1
    3770:	0028      	movs	r0, r5
    3772:	4c23      	ldr	r4, [pc, #140]	; (3800 <usbdc_cb_ctl_req+0x430>)
    3774:	47a0      	blx	r4
		return true;
    3776:	2301      	movs	r3, #1
    3778:	e644      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		st = 0;
    377a:	2300      	movs	r3, #0
    377c:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    377e:	4c1e      	ldr	r4, [pc, #120]	; (37f8 <usbdc_cb_ctl_req+0x428>)
    3780:	2202      	movs	r2, #2
    3782:	a902      	add	r1, sp, #8
    3784:	6960      	ldr	r0, [r4, #20]
    3786:	4b20      	ldr	r3, [pc, #128]	; (3808 <usbdc_cb_ctl_req+0x438>)
    3788:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    378a:	6961      	ldr	r1, [r4, #20]
    378c:	2300      	movs	r3, #0
    378e:	2202      	movs	r2, #2
    3790:	0028      	movs	r0, r5
    3792:	4c1b      	ldr	r4, [pc, #108]	; (3800 <usbdc_cb_ctl_req+0x430>)
    3794:	47a0      	blx	r4
	return true;
    3796:	2301      	movs	r3, #1
    3798:	e634      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    379a:	7920      	ldrb	r0, [r4, #4]
    379c:	2102      	movs	r1, #2
    379e:	4b1b      	ldr	r3, [pc, #108]	; (380c <usbdc_cb_ctl_req+0x43c>)
    37a0:	4798      	blx	r3
		if (st < 0) {
    37a2:	2800      	cmp	r0, #0
    37a4:	db03      	blt.n	37ae <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    37a6:	2301      	movs	r3, #1
    37a8:	4018      	ands	r0, r3
    37aa:	9002      	str	r0, [sp, #8]
    37ac:	e7e7      	b.n	377e <usbdc_cb_ctl_req+0x3ae>
			return false;
    37ae:	2300      	movs	r3, #0
    37b0:	e628      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    37b2:	4b11      	ldr	r3, [pc, #68]	; (37f8 <usbdc_cb_ctl_req+0x428>)
    37b4:	2200      	movs	r2, #0
    37b6:	6959      	ldr	r1, [r3, #20]
    37b8:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    37ba:	6959      	ldr	r1, [r3, #20]
    37bc:	2300      	movs	r3, #0
    37be:	3201      	adds	r2, #1
    37c0:	2000      	movs	r0, #0
    37c2:	4c0f      	ldr	r4, [pc, #60]	; (3800 <usbdc_cb_ctl_req+0x430>)
    37c4:	47a0      	blx	r4
		return true;
    37c6:	2301      	movs	r3, #1
    37c8:	e61c      	b.n	3404 <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    37ca:	4b0b      	ldr	r3, [pc, #44]	; (37f8 <usbdc_cb_ctl_req+0x428>)
    37cc:	695a      	ldr	r2, [r3, #20]
    37ce:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    37d0:	6959      	ldr	r1, [r3, #20]
    37d2:	2300      	movs	r3, #0
    37d4:	2201      	movs	r2, #1
    37d6:	2000      	movs	r0, #0
    37d8:	4c09      	ldr	r4, [pc, #36]	; (3800 <usbdc_cb_ctl_req+0x430>)
    37da:	47a0      	blx	r4
			return true;
    37dc:	2301      	movs	r3, #1
    37de:	e611      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		return false;
    37e0:	2300      	movs	r3, #0
    37e2:	e60f      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		return false;
    37e4:	2300      	movs	r3, #0
    37e6:	e60d      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		return false;
    37e8:	2300      	movs	r3, #0
    37ea:	e60b      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		return false;
    37ec:	2300      	movs	r3, #0
    37ee:	e609      	b.n	3404 <usbdc_cb_ctl_req+0x34>
		return false;
    37f0:	2300      	movs	r3, #0
    37f2:	e607      	b.n	3404 <usbdc_cb_ctl_req+0x34>
			return false;
    37f4:	2300      	movs	r3, #0
    37f6:	e605      	b.n	3404 <usbdc_cb_ctl_req+0x34>
    37f8:	2000080c 	.word	0x2000080c
    37fc:	0000399d 	.word	0x0000399d
    3800:	000033b5 	.word	0x000033b5
    3804:	00003a05 	.word	0x00003a05
    3808:	00003aed 	.word	0x00003aed
    380c:	000012ad 	.word	0x000012ad

00003810 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    3810:	b510      	push	{r4, lr}
	switch (type) {
    3812:	2801      	cmp	r0, #1
    3814:	d009      	beq.n	382a <usbdc_register_handler+0x1a>
    3816:	2800      	cmp	r0, #0
    3818:	d002      	beq.n	3820 <usbdc_register_handler+0x10>
    381a:	2802      	cmp	r0, #2
    381c:	d00a      	beq.n	3834 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    381e:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    3820:	4807      	ldr	r0, [pc, #28]	; (3840 <usbdc_register_handler+0x30>)
    3822:	3004      	adds	r0, #4
    3824:	4b07      	ldr	r3, [pc, #28]	; (3844 <usbdc_register_handler+0x34>)
    3826:	4798      	blx	r3
		break;
    3828:	e7f9      	b.n	381e <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    382a:	4805      	ldr	r0, [pc, #20]	; (3840 <usbdc_register_handler+0x30>)
    382c:	3008      	adds	r0, #8
    382e:	4b05      	ldr	r3, [pc, #20]	; (3844 <usbdc_register_handler+0x34>)
    3830:	4798      	blx	r3
		break;
    3832:	e7f4      	b.n	381e <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    3834:	4802      	ldr	r0, [pc, #8]	; (3840 <usbdc_register_handler+0x30>)
    3836:	300c      	adds	r0, #12
    3838:	4b02      	ldr	r3, [pc, #8]	; (3844 <usbdc_register_handler+0x34>)
    383a:	4798      	blx	r3
}
    383c:	e7ef      	b.n	381e <usbdc_register_handler+0xe>
    383e:	46c0      	nop			; (mov r8, r8)
    3840:	2000080c 	.word	0x2000080c
    3844:	00003a65 	.word	0x00003a65

00003848 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    3848:	b570      	push	{r4, r5, r6, lr}
    384a:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    384c:	1e43      	subs	r3, r0, #1
    384e:	4198      	sbcs	r0, r3
    3850:	b2c0      	uxtb	r0, r0
    3852:	4a0c      	ldr	r2, [pc, #48]	; (3884 <usbdc_init+0x3c>)
    3854:	490c      	ldr	r1, [pc, #48]	; (3888 <usbdc_init+0x40>)
    3856:	4b0d      	ldr	r3, [pc, #52]	; (388c <usbdc_init+0x44>)
    3858:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    385a:	4b0d      	ldr	r3, [pc, #52]	; (3890 <usbdc_init+0x48>)
    385c:	4798      	blx	r3
	if (rc < 0) {
    385e:	2800      	cmp	r0, #0
    3860:	db0e      	blt.n	3880 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    3862:	4d0c      	ldr	r5, [pc, #48]	; (3894 <usbdc_init+0x4c>)
    3864:	2220      	movs	r2, #32
    3866:	2100      	movs	r1, #0
    3868:	0028      	movs	r0, r5
    386a:	4b0b      	ldr	r3, [pc, #44]	; (3898 <usbdc_init+0x50>)
    386c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    386e:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    3870:	490a      	ldr	r1, [pc, #40]	; (389c <usbdc_init+0x54>)
    3872:	2000      	movs	r0, #0
    3874:	4c0a      	ldr	r4, [pc, #40]	; (38a0 <usbdc_init+0x58>)
    3876:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    3878:	490a      	ldr	r1, [pc, #40]	; (38a4 <usbdc_init+0x5c>)
    387a:	2001      	movs	r0, #1
    387c:	47a0      	blx	r4

	return 0;
    387e:	2000      	movs	r0, #0
}
    3880:	bd70      	pop	{r4, r5, r6, pc}
    3882:	46c0      	nop			; (mov r8, r8)
    3884:	00000355 	.word	0x00000355
    3888:	00003e48 	.word	0x00003e48
    388c:	00001365 	.word	0x00001365
    3890:	00001011 	.word	0x00001011
    3894:	2000080c 	.word	0x2000080c
    3898:	00003b71 	.word	0x00003b71
    389c:	0000329d 	.word	0x0000329d
    38a0:	00001075 	.word	0x00001075
    38a4:	00003391 	.word	0x00003391

000038a8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    38a8:	b510      	push	{r4, lr}
    38aa:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    38ac:	4802      	ldr	r0, [pc, #8]	; (38b8 <usbdc_register_function+0x10>)
    38ae:	3010      	adds	r0, #16
    38b0:	4b02      	ldr	r3, [pc, #8]	; (38bc <usbdc_register_function+0x14>)
    38b2:	4798      	blx	r3
}
    38b4:	bd10      	pop	{r4, pc}
    38b6:	46c0      	nop			; (mov r8, r8)
    38b8:	2000080c 	.word	0x2000080c
    38bc:	00003a65 	.word	0x00003a65

000038c0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    38c0:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    38c2:	4b0b      	ldr	r3, [pc, #44]	; (38f0 <usbdc_start+0x30>)
    38c4:	7e9b      	ldrb	r3, [r3, #26]
    38c6:	2b00      	cmp	r3, #0
    38c8:	d10c      	bne.n	38e4 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    38ca:	2800      	cmp	r0, #0
    38cc:	d00d      	beq.n	38ea <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    38ce:	4b08      	ldr	r3, [pc, #32]	; (38f0 <usbdc_start+0x30>)
    38d0:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    38d2:	6802      	ldr	r2, [r0, #0]
    38d4:	79d2      	ldrb	r2, [r2, #7]
    38d6:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    38d8:	2201      	movs	r2, #1
    38da:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    38dc:	4b05      	ldr	r3, [pc, #20]	; (38f4 <usbdc_start+0x34>)
    38de:	4798      	blx	r3
	return ERR_NONE;
    38e0:	2000      	movs	r0, #0
}
    38e2:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    38e4:	2004      	movs	r0, #4
    38e6:	4240      	negs	r0, r0
    38e8:	e7fb      	b.n	38e2 <usbdc_start+0x22>
		return ERR_BAD_DATA;
    38ea:	2009      	movs	r0, #9
    38ec:	4240      	negs	r0, r0
    38ee:	e7f8      	b.n	38e2 <usbdc_start+0x22>
    38f0:	2000080c 	.word	0x2000080c
    38f4:	00001081 	.word	0x00001081

000038f8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    38f8:	b510      	push	{r4, lr}
	usb_d_attach();
    38fa:	4b01      	ldr	r3, [pc, #4]	; (3900 <usbdc_attach+0x8>)
    38fc:	4798      	blx	r3
}
    38fe:	bd10      	pop	{r4, pc}
    3900:	0000108d 	.word	0x0000108d

00003904 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    3904:	4b01      	ldr	r3, [pc, #4]	; (390c <usbdc_get_ctrl_buffer+0x8>)
    3906:	6958      	ldr	r0, [r3, #20]
}
    3908:	4770      	bx	lr
    390a:	46c0      	nop			; (mov r8, r8)
    390c:	2000080c 	.word	0x2000080c

00003910 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    3910:	4b02      	ldr	r3, [pc, #8]	; (391c <usbdc_get_state+0xc>)
    3912:	7e98      	ldrb	r0, [r3, #26]
    3914:	06c3      	lsls	r3, r0, #27
    3916:	d500      	bpl.n	391a <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    3918:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    391a:	4770      	bx	lr
    391c:	2000080c 	.word	0x2000080c

00003920 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    3920:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3922:	4288      	cmp	r0, r1
    3924:	d211      	bcs.n	394a <usb_find_desc+0x2a>
	return desc[0];
    3926:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3928:	2b01      	cmp	r3, #1
    392a:	d910      	bls.n	394e <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    392c:	7844      	ldrb	r4, [r0, #1]
    392e:	4294      	cmp	r4, r2
    3930:	d00a      	beq.n	3948 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    3932:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    3934:	4281      	cmp	r1, r0
    3936:	d906      	bls.n	3946 <usb_find_desc+0x26>
	return desc[0];
    3938:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    393a:	2b01      	cmp	r3, #1
    393c:	d909      	bls.n	3952 <usb_find_desc+0x32>
	return desc[1];
    393e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    3940:	4294      	cmp	r4, r2
    3942:	d1f6      	bne.n	3932 <usb_find_desc+0x12>
    3944:	e000      	b.n	3948 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3946:	2000      	movs	r0, #0
}
    3948:	bd10      	pop	{r4, pc}
	return NULL;
    394a:	2000      	movs	r0, #0
    394c:	e7fc      	b.n	3948 <usb_find_desc+0x28>
		_desc_len_check();
    394e:	2000      	movs	r0, #0
    3950:	e7fa      	b.n	3948 <usb_find_desc+0x28>
    3952:	2000      	movs	r0, #0
    3954:	e7f8      	b.n	3948 <usb_find_desc+0x28>

00003956 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3956:	4288      	cmp	r0, r1
    3958:	d215      	bcs.n	3986 <usb_find_ep_desc+0x30>
	return desc[0];
    395a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    395c:	2b01      	cmp	r3, #1
    395e:	d914      	bls.n	398a <usb_find_ep_desc+0x34>
	return desc[1];
    3960:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3962:	2a04      	cmp	r2, #4
    3964:	d013      	beq.n	398e <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3966:	2a05      	cmp	r2, #5
    3968:	d00c      	beq.n	3984 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    396a:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    396c:	4281      	cmp	r1, r0
    396e:	d908      	bls.n	3982 <usb_find_ep_desc+0x2c>
	return desc[0];
    3970:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3972:	2b01      	cmp	r3, #1
    3974:	d90d      	bls.n	3992 <usb_find_ep_desc+0x3c>
	return desc[1];
    3976:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3978:	2a04      	cmp	r2, #4
    397a:	d00c      	beq.n	3996 <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    397c:	2a05      	cmp	r2, #5
    397e:	d1f4      	bne.n	396a <usb_find_ep_desc+0x14>
    3980:	e000      	b.n	3984 <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3982:	2000      	movs	r0, #0
}
    3984:	4770      	bx	lr
	return NULL;
    3986:	2000      	movs	r0, #0
    3988:	e7fc      	b.n	3984 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    398a:	2000      	movs	r0, #0
    398c:	e7fa      	b.n	3984 <usb_find_ep_desc+0x2e>
	return NULL;
    398e:	2000      	movs	r0, #0
    3990:	e7f8      	b.n	3984 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    3992:	2000      	movs	r0, #0
    3994:	e7f6      	b.n	3984 <usb_find_ep_desc+0x2e>
	return NULL;
    3996:	2000      	movs	r0, #0
    3998:	e7f4      	b.n	3984 <usb_find_ep_desc+0x2e>
	...

0000399c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    399c:	b570      	push	{r4, r5, r6, lr}
    399e:	000c      	movs	r4, r1
    39a0:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    39a2:	2202      	movs	r2, #2
    39a4:	4b16      	ldr	r3, [pc, #88]	; (3a00 <usb_find_cfg_desc+0x64>)
    39a6:	4798      	blx	r3
	if (!desc) {
    39a8:	2800      	cmp	r0, #0
    39aa:	d01d      	beq.n	39e8 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    39ac:	4284      	cmp	r4, r0
    39ae:	d91c      	bls.n	39ea <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    39b0:	7803      	ldrb	r3, [r0, #0]
    39b2:	2b01      	cmp	r3, #1
    39b4:	d91b      	bls.n	39ee <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    39b6:	7843      	ldrb	r3, [r0, #1]
    39b8:	2b02      	cmp	r3, #2
    39ba:	d11a      	bne.n	39f2 <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    39bc:	7943      	ldrb	r3, [r0, #5]
    39be:	42ab      	cmp	r3, r5
    39c0:	d012      	beq.n	39e8 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    39c2:	78c2      	ldrb	r2, [r0, #3]
    39c4:	0212      	lsls	r2, r2, #8
    39c6:	7883      	ldrb	r3, [r0, #2]
    39c8:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    39ca:	b29b      	uxth	r3, r3
    39cc:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    39ce:	4284      	cmp	r4, r0
    39d0:	d909      	bls.n	39e6 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    39d2:	7803      	ldrb	r3, [r0, #0]
    39d4:	2b01      	cmp	r3, #1
    39d6:	d90e      	bls.n	39f6 <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    39d8:	7843      	ldrb	r3, [r0, #1]
    39da:	2b02      	cmp	r3, #2
    39dc:	d10d      	bne.n	39fa <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    39de:	7943      	ldrb	r3, [r0, #5]
    39e0:	42ab      	cmp	r3, r5
    39e2:	d1ee      	bne.n	39c2 <usb_find_cfg_desc+0x26>
    39e4:	e000      	b.n	39e8 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    39e6:	2000      	movs	r0, #0
}
    39e8:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    39ea:	2000      	movs	r0, #0
    39ec:	e7fc      	b.n	39e8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    39ee:	2000      	movs	r0, #0
    39f0:	e7fa      	b.n	39e8 <usb_find_cfg_desc+0x4c>
	return NULL;
    39f2:	2000      	movs	r0, #0
    39f4:	e7f8      	b.n	39e8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    39f6:	2000      	movs	r0, #0
    39f8:	e7f6      	b.n	39e8 <usb_find_cfg_desc+0x4c>
	return NULL;
    39fa:	2000      	movs	r0, #0
    39fc:	e7f4      	b.n	39e8 <usb_find_cfg_desc+0x4c>
    39fe:	46c0      	nop			; (mov r8, r8)
    3a00:	00003921 	.word	0x00003921

00003a04 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    3a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a06:	000d      	movs	r5, r1
    3a08:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    3a0a:	4288      	cmp	r0, r1
    3a0c:	d212      	bcs.n	3a34 <usb_find_str_desc+0x30>
    3a0e:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    3a10:	4e0a      	ldr	r6, [pc, #40]	; (3a3c <usb_find_str_desc+0x38>)
    3a12:	2203      	movs	r2, #3
    3a14:	0029      	movs	r1, r5
    3a16:	47b0      	blx	r6
		if (desc) {
    3a18:	2800      	cmp	r0, #0
    3a1a:	d00e      	beq.n	3a3a <usb_find_str_desc+0x36>
	return desc[0];
    3a1c:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    3a1e:	2b01      	cmp	r3, #1
    3a20:	d90a      	bls.n	3a38 <usb_find_str_desc+0x34>
			if (i == str_index) {
    3a22:	42a7      	cmp	r7, r4
    3a24:	d009      	beq.n	3a3a <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    3a26:	3401      	adds	r4, #1
    3a28:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    3a2a:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    3a2c:	4285      	cmp	r5, r0
    3a2e:	d8f0      	bhi.n	3a12 <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    3a30:	2000      	movs	r0, #0
    3a32:	e002      	b.n	3a3a <usb_find_str_desc+0x36>
    3a34:	2000      	movs	r0, #0
    3a36:	e000      	b.n	3a3a <usb_find_str_desc+0x36>
			_desc_len_check();
    3a38:	2000      	movs	r0, #0
}
    3a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a3c:	00003921 	.word	0x00003921

00003a40 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3a40:	6803      	ldr	r3, [r0, #0]
    3a42:	2b00      	cmp	r3, #0
    3a44:	d00a      	beq.n	3a5c <is_list_element+0x1c>
		if (it == element) {
    3a46:	428b      	cmp	r3, r1
    3a48:	d00a      	beq.n	3a60 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    3a4a:	681b      	ldr	r3, [r3, #0]
    3a4c:	2b00      	cmp	r3, #0
    3a4e:	d003      	beq.n	3a58 <is_list_element+0x18>
		if (it == element) {
    3a50:	4299      	cmp	r1, r3
    3a52:	d1fa      	bne.n	3a4a <is_list_element+0xa>
			return true;
    3a54:	2001      	movs	r0, #1
    3a56:	e000      	b.n	3a5a <is_list_element+0x1a>
		}
	}

	return false;
    3a58:	2000      	movs	r0, #0
}
    3a5a:	4770      	bx	lr
	return false;
    3a5c:	2000      	movs	r0, #0
    3a5e:	e7fc      	b.n	3a5a <is_list_element+0x1a>
			return true;
    3a60:	2001      	movs	r0, #1
    3a62:	e7fa      	b.n	3a5a <is_list_element+0x1a>

00003a64 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3a64:	b570      	push	{r4, r5, r6, lr}
    3a66:	0005      	movs	r5, r0
    3a68:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    3a6a:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    3a6c:	4b0a      	ldr	r3, [pc, #40]	; (3a98 <list_insert_at_end+0x34>)
    3a6e:	4798      	blx	r3
    3a70:	2301      	movs	r3, #1
    3a72:	4058      	eors	r0, r3
    3a74:	b2c0      	uxtb	r0, r0
    3a76:	224f      	movs	r2, #79	; 0x4f
    3a78:	4908      	ldr	r1, [pc, #32]	; (3a9c <list_insert_at_end+0x38>)
    3a7a:	4b09      	ldr	r3, [pc, #36]	; (3aa0 <list_insert_at_end+0x3c>)
    3a7c:	4798      	blx	r3

	if (!list->head) {
    3a7e:	682b      	ldr	r3, [r5, #0]
    3a80:	2b00      	cmp	r3, #0
    3a82:	d103      	bne.n	3a8c <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    3a84:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    3a86:	6033      	str	r3, [r6, #0]
		return;
    3a88:	e005      	b.n	3a96 <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    3a8a:	001c      	movs	r4, r3
	while (it->next) {
    3a8c:	6823      	ldr	r3, [r4, #0]
    3a8e:	2b00      	cmp	r3, #0
    3a90:	d1fb      	bne.n	3a8a <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    3a92:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    3a94:	6033      	str	r3, [r6, #0]
}
    3a96:	bd70      	pop	{r4, r5, r6, pc}
    3a98:	00003a41 	.word	0x00003a41
    3a9c:	00003e60 	.word	0x00003e60
    3aa0:	00001365 	.word	0x00001365

00003aa4 <__libc_init_array>:
    3aa4:	b570      	push	{r4, r5, r6, lr}
    3aa6:	4e0d      	ldr	r6, [pc, #52]	; (3adc <__libc_init_array+0x38>)
    3aa8:	4d0d      	ldr	r5, [pc, #52]	; (3ae0 <__libc_init_array+0x3c>)
    3aaa:	2400      	movs	r4, #0
    3aac:	1bad      	subs	r5, r5, r6
    3aae:	10ad      	asrs	r5, r5, #2
    3ab0:	d005      	beq.n	3abe <__libc_init_array+0x1a>
    3ab2:	00a3      	lsls	r3, r4, #2
    3ab4:	58f3      	ldr	r3, [r6, r3]
    3ab6:	3401      	adds	r4, #1
    3ab8:	4798      	blx	r3
    3aba:	42a5      	cmp	r5, r4
    3abc:	d1f9      	bne.n	3ab2 <__libc_init_array+0xe>
    3abe:	f000 f9e1 	bl	3e84 <_init>
    3ac2:	4e08      	ldr	r6, [pc, #32]	; (3ae4 <__libc_init_array+0x40>)
    3ac4:	4d08      	ldr	r5, [pc, #32]	; (3ae8 <__libc_init_array+0x44>)
    3ac6:	2400      	movs	r4, #0
    3ac8:	1bad      	subs	r5, r5, r6
    3aca:	10ad      	asrs	r5, r5, #2
    3acc:	d005      	beq.n	3ada <__libc_init_array+0x36>
    3ace:	00a3      	lsls	r3, r4, #2
    3ad0:	58f3      	ldr	r3, [r6, r3]
    3ad2:	3401      	adds	r4, #1
    3ad4:	4798      	blx	r3
    3ad6:	42a5      	cmp	r5, r4
    3ad8:	d1f9      	bne.n	3ace <__libc_init_array+0x2a>
    3ada:	bd70      	pop	{r4, r5, r6, pc}
    3adc:	00003e90 	.word	0x00003e90
    3ae0:	00003e90 	.word	0x00003e90
    3ae4:	00003e90 	.word	0x00003e90
    3ae8:	00003e98 	.word	0x00003e98

00003aec <memcpy>:
    3aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aee:	0005      	movs	r5, r0
    3af0:	2a0f      	cmp	r2, #15
    3af2:	d92f      	bls.n	3b54 <memcpy+0x68>
    3af4:	000b      	movs	r3, r1
    3af6:	4303      	orrs	r3, r0
    3af8:	079b      	lsls	r3, r3, #30
    3afa:	d134      	bne.n	3b66 <memcpy+0x7a>
    3afc:	0016      	movs	r6, r2
    3afe:	000c      	movs	r4, r1
    3b00:	0003      	movs	r3, r0
    3b02:	3e10      	subs	r6, #16
    3b04:	0935      	lsrs	r5, r6, #4
    3b06:	3501      	adds	r5, #1
    3b08:	012d      	lsls	r5, r5, #4
    3b0a:	1945      	adds	r5, r0, r5
    3b0c:	6827      	ldr	r7, [r4, #0]
    3b0e:	601f      	str	r7, [r3, #0]
    3b10:	6867      	ldr	r7, [r4, #4]
    3b12:	605f      	str	r7, [r3, #4]
    3b14:	68a7      	ldr	r7, [r4, #8]
    3b16:	609f      	str	r7, [r3, #8]
    3b18:	68e7      	ldr	r7, [r4, #12]
    3b1a:	3410      	adds	r4, #16
    3b1c:	60df      	str	r7, [r3, #12]
    3b1e:	3310      	adds	r3, #16
    3b20:	429d      	cmp	r5, r3
    3b22:	d1f3      	bne.n	3b0c <memcpy+0x20>
    3b24:	230f      	movs	r3, #15
    3b26:	439e      	bics	r6, r3
    3b28:	3610      	adds	r6, #16
    3b2a:	1985      	adds	r5, r0, r6
    3b2c:	1989      	adds	r1, r1, r6
    3b2e:	4013      	ands	r3, r2
    3b30:	2b03      	cmp	r3, #3
    3b32:	d91a      	bls.n	3b6a <memcpy+0x7e>
    3b34:	1f1e      	subs	r6, r3, #4
    3b36:	2300      	movs	r3, #0
    3b38:	08b4      	lsrs	r4, r6, #2
    3b3a:	3401      	adds	r4, #1
    3b3c:	00a4      	lsls	r4, r4, #2
    3b3e:	58cf      	ldr	r7, [r1, r3]
    3b40:	50ef      	str	r7, [r5, r3]
    3b42:	3304      	adds	r3, #4
    3b44:	42a3      	cmp	r3, r4
    3b46:	d1fa      	bne.n	3b3e <memcpy+0x52>
    3b48:	2403      	movs	r4, #3
    3b4a:	43a6      	bics	r6, r4
    3b4c:	1d33      	adds	r3, r6, #4
    3b4e:	4022      	ands	r2, r4
    3b50:	18c9      	adds	r1, r1, r3
    3b52:	18ed      	adds	r5, r5, r3
    3b54:	2a00      	cmp	r2, #0
    3b56:	d005      	beq.n	3b64 <memcpy+0x78>
    3b58:	2300      	movs	r3, #0
    3b5a:	5ccc      	ldrb	r4, [r1, r3]
    3b5c:	54ec      	strb	r4, [r5, r3]
    3b5e:	3301      	adds	r3, #1
    3b60:	4293      	cmp	r3, r2
    3b62:	d1fa      	bne.n	3b5a <memcpy+0x6e>
    3b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b66:	0005      	movs	r5, r0
    3b68:	e7f6      	b.n	3b58 <memcpy+0x6c>
    3b6a:	001a      	movs	r2, r3
    3b6c:	e7f2      	b.n	3b54 <memcpy+0x68>
    3b6e:	46c0      	nop			; (mov r8, r8)

00003b70 <memset>:
    3b70:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b72:	0783      	lsls	r3, r0, #30
    3b74:	d043      	beq.n	3bfe <memset+0x8e>
    3b76:	1e54      	subs	r4, r2, #1
    3b78:	2a00      	cmp	r2, #0
    3b7a:	d03f      	beq.n	3bfc <memset+0x8c>
    3b7c:	b2ce      	uxtb	r6, r1
    3b7e:	0002      	movs	r2, r0
    3b80:	2503      	movs	r5, #3
    3b82:	e002      	b.n	3b8a <memset+0x1a>
    3b84:	001a      	movs	r2, r3
    3b86:	3c01      	subs	r4, #1
    3b88:	d338      	bcc.n	3bfc <memset+0x8c>
    3b8a:	1c53      	adds	r3, r2, #1
    3b8c:	7016      	strb	r6, [r2, #0]
    3b8e:	422b      	tst	r3, r5
    3b90:	d1f8      	bne.n	3b84 <memset+0x14>
    3b92:	2c03      	cmp	r4, #3
    3b94:	d92a      	bls.n	3bec <memset+0x7c>
    3b96:	22ff      	movs	r2, #255	; 0xff
    3b98:	400a      	ands	r2, r1
    3b9a:	0215      	lsls	r5, r2, #8
    3b9c:	4315      	orrs	r5, r2
    3b9e:	042a      	lsls	r2, r5, #16
    3ba0:	4315      	orrs	r5, r2
    3ba2:	2c0f      	cmp	r4, #15
    3ba4:	d914      	bls.n	3bd0 <memset+0x60>
    3ba6:	0027      	movs	r7, r4
    3ba8:	001a      	movs	r2, r3
    3baa:	3f10      	subs	r7, #16
    3bac:	093e      	lsrs	r6, r7, #4
    3bae:	3601      	adds	r6, #1
    3bb0:	0136      	lsls	r6, r6, #4
    3bb2:	199e      	adds	r6, r3, r6
    3bb4:	6015      	str	r5, [r2, #0]
    3bb6:	6055      	str	r5, [r2, #4]
    3bb8:	6095      	str	r5, [r2, #8]
    3bba:	60d5      	str	r5, [r2, #12]
    3bbc:	3210      	adds	r2, #16
    3bbe:	4296      	cmp	r6, r2
    3bc0:	d1f8      	bne.n	3bb4 <memset+0x44>
    3bc2:	220f      	movs	r2, #15
    3bc4:	4397      	bics	r7, r2
    3bc6:	3710      	adds	r7, #16
    3bc8:	19db      	adds	r3, r3, r7
    3bca:	4014      	ands	r4, r2
    3bcc:	2c03      	cmp	r4, #3
    3bce:	d90d      	bls.n	3bec <memset+0x7c>
    3bd0:	001a      	movs	r2, r3
    3bd2:	1f27      	subs	r7, r4, #4
    3bd4:	08be      	lsrs	r6, r7, #2
    3bd6:	3601      	adds	r6, #1
    3bd8:	00b6      	lsls	r6, r6, #2
    3bda:	199e      	adds	r6, r3, r6
    3bdc:	c220      	stmia	r2!, {r5}
    3bde:	42b2      	cmp	r2, r6
    3be0:	d1fc      	bne.n	3bdc <memset+0x6c>
    3be2:	2203      	movs	r2, #3
    3be4:	4397      	bics	r7, r2
    3be6:	3704      	adds	r7, #4
    3be8:	19db      	adds	r3, r3, r7
    3bea:	4014      	ands	r4, r2
    3bec:	2c00      	cmp	r4, #0
    3bee:	d005      	beq.n	3bfc <memset+0x8c>
    3bf0:	b2c9      	uxtb	r1, r1
    3bf2:	191c      	adds	r4, r3, r4
    3bf4:	7019      	strb	r1, [r3, #0]
    3bf6:	3301      	adds	r3, #1
    3bf8:	429c      	cmp	r4, r3
    3bfa:	d1fb      	bne.n	3bf4 <memset+0x84>
    3bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bfe:	0014      	movs	r4, r2
    3c00:	0003      	movs	r3, r0
    3c02:	e7c6      	b.n	3b92 <memset+0x22>

00003c04 <register_fini>:
    3c04:	4b03      	ldr	r3, [pc, #12]	; (3c14 <register_fini+0x10>)
    3c06:	b510      	push	{r4, lr}
    3c08:	2b00      	cmp	r3, #0
    3c0a:	d002      	beq.n	3c12 <register_fini+0xe>
    3c0c:	4802      	ldr	r0, [pc, #8]	; (3c18 <register_fini+0x14>)
    3c0e:	f000 f805 	bl	3c1c <atexit>
    3c12:	bd10      	pop	{r4, pc}
    3c14:	00000000 	.word	0x00000000
    3c18:	00003c2d 	.word	0x00003c2d

00003c1c <atexit>:
    3c1c:	b510      	push	{r4, lr}
    3c1e:	0001      	movs	r1, r0
    3c20:	2300      	movs	r3, #0
    3c22:	2200      	movs	r2, #0
    3c24:	2000      	movs	r0, #0
    3c26:	f000 f81f 	bl	3c68 <__register_exitproc>
    3c2a:	bd10      	pop	{r4, pc}

00003c2c <__libc_fini_array>:
    3c2c:	b570      	push	{r4, r5, r6, lr}
    3c2e:	4b09      	ldr	r3, [pc, #36]	; (3c54 <__libc_fini_array+0x28>)
    3c30:	4c09      	ldr	r4, [pc, #36]	; (3c58 <__libc_fini_array+0x2c>)
    3c32:	1ae4      	subs	r4, r4, r3
    3c34:	10a4      	asrs	r4, r4, #2
    3c36:	d009      	beq.n	3c4c <__libc_fini_array+0x20>
    3c38:	4a08      	ldr	r2, [pc, #32]	; (3c5c <__libc_fini_array+0x30>)
    3c3a:	18a5      	adds	r5, r4, r2
    3c3c:	00ad      	lsls	r5, r5, #2
    3c3e:	18ed      	adds	r5, r5, r3
    3c40:	682b      	ldr	r3, [r5, #0]
    3c42:	3c01      	subs	r4, #1
    3c44:	4798      	blx	r3
    3c46:	3d04      	subs	r5, #4
    3c48:	2c00      	cmp	r4, #0
    3c4a:	d1f9      	bne.n	3c40 <__libc_fini_array+0x14>
    3c4c:	f000 f924 	bl	3e98 <_fini>
    3c50:	bd70      	pop	{r4, r5, r6, pc}
    3c52:	46c0      	nop			; (mov r8, r8)
    3c54:	00003ea4 	.word	0x00003ea4
    3c58:	00003ea8 	.word	0x00003ea8
    3c5c:	3fffffff 	.word	0x3fffffff

00003c60 <__retarget_lock_acquire_recursive>:
    3c60:	4770      	bx	lr
    3c62:	46c0      	nop			; (mov r8, r8)

00003c64 <__retarget_lock_release_recursive>:
    3c64:	4770      	bx	lr
    3c66:	46c0      	nop			; (mov r8, r8)

00003c68 <__register_exitproc>:
    3c68:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c6a:	464e      	mov	r6, r9
    3c6c:	4645      	mov	r5, r8
    3c6e:	46de      	mov	lr, fp
    3c70:	4657      	mov	r7, sl
    3c72:	b5e0      	push	{r5, r6, r7, lr}
    3c74:	4d36      	ldr	r5, [pc, #216]	; (3d50 <__register_exitproc+0xe8>)
    3c76:	b083      	sub	sp, #12
    3c78:	0006      	movs	r6, r0
    3c7a:	6828      	ldr	r0, [r5, #0]
    3c7c:	4698      	mov	r8, r3
    3c7e:	000f      	movs	r7, r1
    3c80:	4691      	mov	r9, r2
    3c82:	f7ff ffed 	bl	3c60 <__retarget_lock_acquire_recursive>
    3c86:	4b33      	ldr	r3, [pc, #204]	; (3d54 <__register_exitproc+0xec>)
    3c88:	681c      	ldr	r4, [r3, #0]
    3c8a:	23a4      	movs	r3, #164	; 0xa4
    3c8c:	005b      	lsls	r3, r3, #1
    3c8e:	58e0      	ldr	r0, [r4, r3]
    3c90:	2800      	cmp	r0, #0
    3c92:	d052      	beq.n	3d3a <__register_exitproc+0xd2>
    3c94:	6843      	ldr	r3, [r0, #4]
    3c96:	2b1f      	cmp	r3, #31
    3c98:	dc13      	bgt.n	3cc2 <__register_exitproc+0x5a>
    3c9a:	1c5a      	adds	r2, r3, #1
    3c9c:	9201      	str	r2, [sp, #4]
    3c9e:	2e00      	cmp	r6, #0
    3ca0:	d128      	bne.n	3cf4 <__register_exitproc+0x8c>
    3ca2:	9a01      	ldr	r2, [sp, #4]
    3ca4:	3302      	adds	r3, #2
    3ca6:	009b      	lsls	r3, r3, #2
    3ca8:	6042      	str	r2, [r0, #4]
    3caa:	501f      	str	r7, [r3, r0]
    3cac:	6828      	ldr	r0, [r5, #0]
    3cae:	f7ff ffd9 	bl	3c64 <__retarget_lock_release_recursive>
    3cb2:	2000      	movs	r0, #0
    3cb4:	b003      	add	sp, #12
    3cb6:	bc3c      	pop	{r2, r3, r4, r5}
    3cb8:	4690      	mov	r8, r2
    3cba:	4699      	mov	r9, r3
    3cbc:	46a2      	mov	sl, r4
    3cbe:	46ab      	mov	fp, r5
    3cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cc2:	4b25      	ldr	r3, [pc, #148]	; (3d58 <__register_exitproc+0xf0>)
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d03d      	beq.n	3d44 <__register_exitproc+0xdc>
    3cc8:	20c8      	movs	r0, #200	; 0xc8
    3cca:	0040      	lsls	r0, r0, #1
    3ccc:	e000      	b.n	3cd0 <__register_exitproc+0x68>
    3cce:	bf00      	nop
    3cd0:	2800      	cmp	r0, #0
    3cd2:	d037      	beq.n	3d44 <__register_exitproc+0xdc>
    3cd4:	22a4      	movs	r2, #164	; 0xa4
    3cd6:	2300      	movs	r3, #0
    3cd8:	0052      	lsls	r2, r2, #1
    3cda:	58a1      	ldr	r1, [r4, r2]
    3cdc:	6043      	str	r3, [r0, #4]
    3cde:	6001      	str	r1, [r0, #0]
    3ce0:	50a0      	str	r0, [r4, r2]
    3ce2:	3240      	adds	r2, #64	; 0x40
    3ce4:	5083      	str	r3, [r0, r2]
    3ce6:	3204      	adds	r2, #4
    3ce8:	5083      	str	r3, [r0, r2]
    3cea:	3301      	adds	r3, #1
    3cec:	9301      	str	r3, [sp, #4]
    3cee:	2300      	movs	r3, #0
    3cf0:	2e00      	cmp	r6, #0
    3cf2:	d0d6      	beq.n	3ca2 <__register_exitproc+0x3a>
    3cf4:	009a      	lsls	r2, r3, #2
    3cf6:	4692      	mov	sl, r2
    3cf8:	4482      	add	sl, r0
    3cfa:	464a      	mov	r2, r9
    3cfc:	2188      	movs	r1, #136	; 0x88
    3cfe:	4654      	mov	r4, sl
    3d00:	5062      	str	r2, [r4, r1]
    3d02:	22c4      	movs	r2, #196	; 0xc4
    3d04:	0052      	lsls	r2, r2, #1
    3d06:	4691      	mov	r9, r2
    3d08:	4481      	add	r9, r0
    3d0a:	464a      	mov	r2, r9
    3d0c:	3987      	subs	r1, #135	; 0x87
    3d0e:	4099      	lsls	r1, r3
    3d10:	6812      	ldr	r2, [r2, #0]
    3d12:	468b      	mov	fp, r1
    3d14:	430a      	orrs	r2, r1
    3d16:	4694      	mov	ip, r2
    3d18:	464a      	mov	r2, r9
    3d1a:	4661      	mov	r1, ip
    3d1c:	6011      	str	r1, [r2, #0]
    3d1e:	2284      	movs	r2, #132	; 0x84
    3d20:	4641      	mov	r1, r8
    3d22:	0052      	lsls	r2, r2, #1
    3d24:	50a1      	str	r1, [r4, r2]
    3d26:	2e02      	cmp	r6, #2
    3d28:	d1bb      	bne.n	3ca2 <__register_exitproc+0x3a>
    3d2a:	0002      	movs	r2, r0
    3d2c:	465c      	mov	r4, fp
    3d2e:	328d      	adds	r2, #141	; 0x8d
    3d30:	32ff      	adds	r2, #255	; 0xff
    3d32:	6811      	ldr	r1, [r2, #0]
    3d34:	430c      	orrs	r4, r1
    3d36:	6014      	str	r4, [r2, #0]
    3d38:	e7b3      	b.n	3ca2 <__register_exitproc+0x3a>
    3d3a:	0020      	movs	r0, r4
    3d3c:	304d      	adds	r0, #77	; 0x4d
    3d3e:	30ff      	adds	r0, #255	; 0xff
    3d40:	50e0      	str	r0, [r4, r3]
    3d42:	e7a7      	b.n	3c94 <__register_exitproc+0x2c>
    3d44:	6828      	ldr	r0, [r5, #0]
    3d46:	f7ff ff8d 	bl	3c64 <__retarget_lock_release_recursive>
    3d4a:	2001      	movs	r0, #1
    3d4c:	4240      	negs	r0, r0
    3d4e:	e7b1      	b.n	3cb4 <__register_exitproc+0x4c>
    3d50:	200004b0 	.word	0x200004b0
    3d54:	00003e80 	.word	0x00003e80
    3d58:	00000000 	.word	0x00000000
    3d5c:	682f2e2e 	.word	0x682f2e2e
    3d60:	732f6c61 	.word	0x732f6c61
    3d64:	682f6372 	.word	0x682f6372
    3d68:	695f6c61 	.word	0x695f6c61
    3d6c:	00632e6f 	.word	0x00632e6f
    3d70:	682f2e2e 	.word	0x682f2e2e
    3d74:	732f6c61 	.word	0x732f6c61
    3d78:	682f6372 	.word	0x682f6372
    3d7c:	735f6c61 	.word	0x735f6c61
    3d80:	6d5f6970 	.word	0x6d5f6970
    3d84:	7973615f 	.word	0x7973615f
    3d88:	632e636e 	.word	0x632e636e
    3d8c:	00000000 	.word	0x00000000
    3d90:	682f2e2e 	.word	0x682f2e2e
    3d94:	732f6c61 	.word	0x732f6c61
    3d98:	682f6372 	.word	0x682f6372
    3d9c:	755f6c61 	.word	0x755f6c61
    3da0:	74726173 	.word	0x74726173
    3da4:	7973615f 	.word	0x7973615f
    3da8:	632e636e 	.word	0x632e636e
    3dac:	00000000 	.word	0x00000000
    3db0:	682f2e2e 	.word	0x682f2e2e
    3db4:	752f6c61 	.word	0x752f6c61
    3db8:	736c6974 	.word	0x736c6974
    3dbc:	6372732f 	.word	0x6372732f
    3dc0:	6974752f 	.word	0x6974752f
    3dc4:	725f736c 	.word	0x725f736c
    3dc8:	62676e69 	.word	0x62676e69
    3dcc:	65666675 	.word	0x65666675
    3dd0:	00632e72 	.word	0x00632e72
    3dd4:	682f2e2e 	.word	0x682f2e2e
    3dd8:	732f6c70 	.word	0x732f6c70
    3ddc:	6f637265 	.word	0x6f637265
    3de0:	70682f6d 	.word	0x70682f6d
    3de4:	65735f6c 	.word	0x65735f6c
    3de8:	6d6f6372 	.word	0x6d6f6372
    3dec:	0000632e 	.word	0x0000632e
    3df0:	00002000 	.word	0x00002000

00003df4 <_usb_ep_cfgs>:
    3df4:	20000728 00000000 00000040 200006e8     (.. ....@...... 
    3e04:	00000000 00000040 200006a8 00000000     ....@...... ....
    3e14:	00000040 000037e0 000034c8 000037e0     @....7...4...7..
    3e24:	000034fa 000037e0 0000341e 000037e0     .4...7...4...7..
    3e34:	000037e0 000037e0 00003432 000037e0     .7...7..24...7..
    3e44:	0000352e 752f2e2e 642f6273 63697665     .5..../usb/devic
    3e54:	73752f65 2e636462 00000063 682f2e2e     e/usbdc.c...../h
    3e64:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
    3e74:	6c5f736c 2e747369 00000063              ls_list.c...

00003e80 <_global_impure_ptr>:
    3e80:	20000088                                ... 

00003e84 <_init>:
    3e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e86:	46c0      	nop			; (mov r8, r8)
    3e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3e8a:	bc08      	pop	{r3}
    3e8c:	469e      	mov	lr, r3
    3e8e:	4770      	bx	lr

00003e90 <__init_array_start>:
    3e90:	00003c05 	.word	0x00003c05

00003e94 <__frame_dummy_init_array_entry>:
    3e94:	000000dd                                ....

00003e98 <_fini>:
    3e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e9a:	46c0      	nop			; (mov r8, r8)
    3e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3e9e:	bc08      	pop	{r3}
    3ea0:	469e      	mov	lr, r3
    3ea2:	4770      	bx	lr

00003ea4 <__fini_array_start>:
    3ea4:	000000b5 	.word	0x000000b5
