
EEPROM_24LC024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005688  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005688  00005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000004fc  20000000  00005690  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  000204fc  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  000204fc  2**0
                  CONTENTS
  5 .bss          0000052c  200004fc  00005b8c  000204fc  2**2
                  ALLOC
  6 .stack        00010000  20000a28  000060b8  000204fc  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  000204fc  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002052a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0004021f  00000000  00000000  00020583  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005af0  00000000  00000000  000607a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00017bf8  00000000  00000000  00066292  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001200  00000000  00000000  0007de8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001a08  00000000  00000000  0007f08a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003f585  00000000  00000000  00080a92  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00020591  00000000  00000000  000c0017  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012a874  00000000  00000000  000e05a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000032a4  00000000  00000000  0020ae1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 0a 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     (.. ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	d9 1d 00 00 81 1a 00 00 d1 02 00 00 d1 02 00 00     ................
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d9 24 00 00 ed 24 00 00 01 25 00 00     .....$...$...%..
     114:	15 25 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .%..............
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 29 25 00 00 3d 25 00 00 51 25 00 00     ....)%..=%..Q%..
     154:	65 25 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     e%..............
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 d1 02 00 00 b5 3a 00 00     .............:..
     184:	c1 3a 00 00 cd 3a 00 00 d9 3a 00 00 d1 02 00 00     .:...:...:......
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200004fc 	.word	0x200004fc
     280:	00000000 	.word	0x00000000
     284:	00005690 	.word	0x00005690

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00005690 	.word	0x00005690
     2c4:	20000500 	.word	0x20000500
     2c8:	00005690 	.word	0x00005690
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	00005690 	.word	0x00005690
     33c:	200004fc 	.word	0x200004fc
     340:	20000a28 	.word	0x20000a28
     344:	200004fc 	.word	0x200004fc
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00004bfd 	.word	0x00004bfd
     354:	0000071d 	.word	0x0000071d

00000358 <_ZN20EEPROM_24LC024_ClassC1EP16i2c_m_async_desc>:
{
	I2C_A=I2C_EEPROM;
	ptrEEPROM=this;
} //EEPROM_24LC024_Class

EEPROM_24LC024_Class::EEPROM_24LC024_Class(i2c_m_async_desc *i2c_a)
     358:	b570      	push	{r4, r5, r6, lr}
     35a:	4606      	mov	r6, r0
     35c:	460c      	mov	r4, r1
     35e:	3060      	adds	r0, #96	; 0x60
     360:	4b08      	ldr	r3, [pc, #32]	; (384 <_ZN20EEPROM_24LC024_ClassC1EP16i2c_m_async_desc+0x2c>)
     362:	4798      	blx	r3
{
	I2C_A=*i2c_a;
     364:	f106 0520 	add.w	r5, r6, #32
     368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     36a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     36c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     36e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     374:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     378:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	ptrEEPROM=this;
     37c:	4b02      	ldr	r3, [pc, #8]	; (388 <_ZN20EEPROM_24LC024_ClassC1EP16i2c_m_async_desc+0x30>)
     37e:	601e      	str	r6, [r3, #0]
} //I2C_Asyn_Class
     380:	4630      	mov	r0, r6
     382:	bd70      	pop	{r4, r5, r6, pc}
     384:	000048dd 	.word	0x000048dd
     388:	20000518 	.word	0x20000518

0000038c <_ZN20EEPROM_24LC024_Class4initEv>:
EEPROM_24LC024_Class::~EEPROM_24LC024_Class()
{
	i2c.disable();
} //~EEPROM_24LC024_Class

void	EEPROM_24LC024_Class::init(){
     38c:	b538      	push	{r3, r4, r5, lr}
     38e:	4605      	mov	r5, r0
	i2c.set_descriptor(&I2C_A);
     390:	4c08      	ldr	r4, [pc, #32]	; (3b4 <_ZN20EEPROM_24LC024_Class4initEv+0x28>)
     392:	f100 0120 	add.w	r1, r0, #32
     396:	4620      	mov	r0, r4
     398:	4b07      	ldr	r3, [pc, #28]	; (3b8 <_ZN20EEPROM_24LC024_Class4initEv+0x2c>)
     39a:	4798      	blx	r3
	i2c.init();
     39c:	4620      	mov	r0, r4
     39e:	4b07      	ldr	r3, [pc, #28]	; (3bc <_ZN20EEPROM_24LC024_Class4initEv+0x30>)
     3a0:	4798      	blx	r3
	i2c.set_slaveaddr(EEPROM_I2C_ADDRESS_SHIFT);
     3a2:	2150      	movs	r1, #80	; 0x50
     3a4:	4620      	mov	r0, r4
     3a6:	4b06      	ldr	r3, [pc, #24]	; (3c0 <_ZN20EEPROM_24LC024_Class4initEv+0x34>)
     3a8:	4798      	blx	r3
	usb.init();
     3aa:	f105 0060 	add.w	r0, r5, #96	; 0x60
     3ae:	4b05      	ldr	r3, [pc, #20]	; (3c4 <_ZN20EEPROM_24LC024_Class4initEv+0x38>)
     3b0:	4798      	blx	r3
     3b2:	bd38      	pop	{r3, r4, r5, pc}
     3b4:	2000051c 	.word	0x2000051c
     3b8:	000046e3 	.word	0x000046e3
     3bc:	00004705 	.word	0x00004705
     3c0:	00004775 	.word	0x00004775
     3c4:	00004915 	.word	0x00004915

000003c8 <_ZN20EEPROM_24LC024_Class11eeprom_pollEh>:
	}
	else
	return(0);
}
int8_t EEPROM_24LC024_Class::eeprom_poll(uint8_t i2c_address)
{
     3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     3cc:	b082      	sub	sp, #8
     3ce:	460d      	mov	r5, r1
	uint8_t timer_count;
	int8_t ack;
	//i2c.enable();
	uint8_t		byte=i2c_address>>0;                           // I2C start
     3d0:	a902      	add	r1, sp, #8
     3d2:	f801 5d01 	strb.w	r5, [r1, #-1]!
	byte|=I2C_WRITE_BIT;    
	ack =(int8_t)i2c.write(&byte,1);     // I2C address + !write
     3d6:	4e14      	ldr	r6, [pc, #80]	; (428 <_ZN20EEPROM_24LC024_Class11eeprom_pollEh+0x60>)
     3d8:	2201      	movs	r2, #1
     3da:	4630      	mov	r0, r6
     3dc:	4b13      	ldr	r3, [pc, #76]	; (42c <_ZN20EEPROM_24LC024_Class11eeprom_pollEh+0x64>)
     3de:	4798      	blx	r3
     3e0:	b244      	sxtb	r4, r0
	i2c.send_stop();
     3e2:	4630      	mov	r0, r6
     3e4:	4b12      	ldr	r3, [pc, #72]	; (430 <_ZN20EEPROM_24LC024_Class11eeprom_pollEh+0x68>)
     3e6:	4798      	blx	r3
	if (ack==I2C_NACK)
     3e8:	f114 0f02 	cmn.w	r4, #2
     3ec:	d003      	beq.n	3f6 <_ZN20EEPROM_24LC024_Class11eeprom_pollEh+0x2e>
			delay_ms(1);
		}
		if (ack) i2c.disable();  ;                    // Generate a stop if no acknowledge
	}
	return(ack);
}
     3ee:	4620      	mov	r0, r4
     3f0:	b002      	add	sp, #8
     3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ack =(int8_t)i2c.write_ack(&byte,1);     // I2C address + !write
     3f6:	4637      	mov	r7, r6
     3f8:	4e0e      	ldr	r6, [pc, #56]	; (434 <_ZN20EEPROM_24LC024_Class11eeprom_pollEh+0x6c>)
			delay_ms(1);
     3fa:	f8df 8040 	ldr.w	r8, [pc, #64]	; 43c <_ZN20EEPROM_24LC024_Class11eeprom_pollEh+0x74>
			byte=i2c_address | I2C_WRITE_BIT;
     3fe:	a902      	add	r1, sp, #8
     400:	f801 5d01 	strb.w	r5, [r1, #-1]!
			ack =(int8_t)i2c.write_ack(&byte,1);     // I2C address + !write
     404:	2201      	movs	r2, #1
     406:	4638      	mov	r0, r7
     408:	47b0      	blx	r6
     40a:	b244      	sxtb	r4, r0
			if (ack == 1)
     40c:	2c01      	cmp	r4, #1
     40e:	d006      	beq.n	41e <_ZN20EEPROM_24LC024_Class11eeprom_pollEh+0x56>
			delay_ms(1);
     410:	2001      	movs	r0, #1
     412:	47c0      	blx	r8
		while (ack==I2C_NACK)
     414:	f114 0f02 	cmn.w	r4, #2
     418:	d0f1      	beq.n	3fe <_ZN20EEPROM_24LC024_Class11eeprom_pollEh+0x36>
		if (ack) i2c.disable();  ;                    // Generate a stop if no acknowledge
     41a:	2c00      	cmp	r4, #0
     41c:	d0e7      	beq.n	3ee <_ZN20EEPROM_24LC024_Class11eeprom_pollEh+0x26>
     41e:	4802      	ldr	r0, [pc, #8]	; (428 <_ZN20EEPROM_24LC024_Class11eeprom_pollEh+0x60>)
     420:	4b05      	ldr	r3, [pc, #20]	; (438 <_ZN20EEPROM_24LC024_Class11eeprom_pollEh+0x70>)
     422:	4798      	blx	r3
     424:	e7e3      	b.n	3ee <_ZN20EEPROM_24LC024_Class11eeprom_pollEh+0x26>
     426:	bf00      	nop
     428:	2000051c 	.word	0x2000051c
     42c:	000047e5 	.word	0x000047e5
     430:	00004815 	.word	0x00004815
     434:	00004799 	.word	0x00004799
     438:	00004789 	.word	0x00004789
     43c:	00000e85 	.word	0x00000e85

00000440 <_ZN20EEPROM_24LC024_Class27read_buffer_with_terminatorEhPctch>:
{
     440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     444:	b08a      	sub	sp, #40	; 0x28
     446:	4686      	mov	lr, r0
     448:	460f      	mov	r7, r1
     44a:	4616      	mov	r6, r2
     44c:	4698      	mov	r8, r3
	uint8_t	test[]="por que no funciona!";
     44e:	ac04      	add	r4, sp, #16
     450:	4d2c      	ldr	r5, [pc, #176]	; (504 <_ZN20EEPROM_24LC024_Class27read_buffer_with_terminatorEhPctch+0xc4>)
     452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     456:	e895 0003 	ldmia.w	r5, {r0, r1}
     45a:	f844 0b04 	str.w	r0, [r4], #4
     45e:	7021      	strb	r1, [r4, #0]
	*buffer='\0';  
     460:	2300      	movs	r3, #0
     462:	7033      	strb	r3, [r6, #0]
	if (eeprom_poll(i2c_address) == 1)      // Check if the EEPROM is ready
     464:	4639      	mov	r1, r7
     466:	4670      	mov	r0, lr
     468:	4b27      	ldr	r3, [pc, #156]	; (508 <_ZN20EEPROM_24LC024_Class27read_buffer_with_terminatorEhPctch+0xc8>)
     46a:	4798      	blx	r3
     46c:	2801      	cmp	r0, #1
     46e:	d003      	beq.n	478 <_ZN20EEPROM_24LC024_Class27read_buffer_with_terminatorEhPctch+0x38>
	return(0);
     470:	2000      	movs	r0, #0
}
     472:	b00a      	add	sp, #40	; 0x28
     474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		byte=i2c_address | I2C_WRITE_BIT;
     478:	ad0a      	add	r5, sp, #40	; 0x28
     47a:	f805 7d01 	strb.w	r7, [r5, #-1]!
			i2c.write(&byte,1); 
     47e:	4c23      	ldr	r4, [pc, #140]	; (50c <_ZN20EEPROM_24LC024_Class27read_buffer_with_terminatorEhPctch+0xcc>)
     480:	2201      	movs	r2, #1
     482:	4629      	mov	r1, r5
     484:	4620      	mov	r0, r4
     486:	f8df 9094 	ldr.w	r9, [pc, #148]	; 51c <_ZN20EEPROM_24LC024_Class27read_buffer_with_terminatorEhPctch+0xdc>
     48a:	47c8      	blx	r9
			i2c.write(&test[0],16);
     48c:	2210      	movs	r2, #16
     48e:	eb0d 0102 	add.w	r1, sp, r2
     492:	4620      	mov	r0, r4
     494:	47c8      	blx	r9
		i2c.send_stop();
     496:	4620      	mov	r0, r4
     498:	4b1d      	ldr	r3, [pc, #116]	; (510 <_ZN20EEPROM_24LC024_Class27read_buffer_with_terminatorEhPctch+0xd0>)
     49a:	4798      	blx	r3
		byte=i2c_address | I2C_WRITE_BIT;
     49c:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
		ack=i2c.write_ack(&byte,1);
     4a0:	2201      	movs	r2, #1
     4a2:	4629      	mov	r1, r5
     4a4:	4620      	mov	r0, r4
     4a6:	f8df a078 	ldr.w	sl, [pc, #120]	; 520 <_ZN20EEPROM_24LC024_Class27read_buffer_with_terminatorEhPctch+0xe0>
     4aa:	47d0      	blx	sl
		byte=address_data;
     4ac:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
		i2c.write_ack(&byte,1);      // I2C address + read
     4b0:	2201      	movs	r2, #1
     4b2:	4629      	mov	r1, r5
     4b4:	4620      	mov	r0, r4
     4b6:	47d0      	blx	sl
		byte=i2c_address>>1;
     4b8:	107f      	asrs	r7, r7, #1
		byte |= I2C_READ_BIT;
     4ba:	f047 0701 	orr.w	r7, r7, #1
     4be:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
		i2c.write(&byte,1);      // I2C address + read
     4c2:	2201      	movs	r2, #1
     4c4:	4629      	mov	r1, r5
     4c6:	4620      	mov	r0, r4
     4c8:	47c8      	blx	r9
     4ca:	f106 090f 	add.w	r9, r6, #15
     4ce:	4634      	mov	r4, r6
			i2c.read(&read_test[0],4);                 // Receive 1 EEPROM data byte with ACK
     4d0:	f8df 8038 	ldr.w	r8, [pc, #56]	; 50c <_ZN20EEPROM_24LC024_Class27read_buffer_with_terminatorEhPctch+0xcc>
     4d4:	4f0f      	ldr	r7, [pc, #60]	; (514 <_ZN20EEPROM_24LC024_Class27read_buffer_with_terminatorEhPctch+0xd4>)
     4d6:	1ba3      	subs	r3, r4, r6
     4d8:	b2dd      	uxtb	r5, r3
     4da:	2204      	movs	r2, #4
     4dc:	4669      	mov	r1, sp
     4de:	4640      	mov	r0, r8
     4e0:	47b8      	blx	r7
			*buffer++=data;                   // Place data byte in buffer and increment pointer
     4e2:	2300      	movs	r3, #0
     4e4:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < 16-1; i++)           // Read count-1 bytes with ACK
     4e8:	454c      	cmp	r4, r9
     4ea:	d1f4      	bne.n	4d6 <_ZN20EEPROM_24LC024_Class27read_buffer_with_terminatorEhPctch+0x96>
		i2c.send_stop();                   // Read one more byte from EEPROM with NACK
     4ec:	4e07      	ldr	r6, [pc, #28]	; (50c <_ZN20EEPROM_24LC024_Class27read_buffer_with_terminatorEhPctch+0xcc>)
     4ee:	4630      	mov	r0, r6
     4f0:	4b07      	ldr	r3, [pc, #28]	; (510 <_ZN20EEPROM_24LC024_Class27read_buffer_with_terminatorEhPctch+0xd0>)
     4f2:	4798      	blx	r3
		i2c.disable();                         // I2C stop
     4f4:	4630      	mov	r0, r6
     4f6:	4b08      	ldr	r3, [pc, #32]	; (518 <_ZN20EEPROM_24LC024_Class27read_buffer_with_terminatorEhPctch+0xd8>)
     4f8:	4798      	blx	r3
		*buffer = 0;                          // Place null terminator at end of buffer
     4fa:	2300      	movs	r3, #0
     4fc:	7023      	strb	r3, [r4, #0]
		return(i+1);
     4fe:	1cab      	adds	r3, r5, #2
     500:	b2d8      	uxtb	r0, r3
     502:	e7b6      	b.n	472 <_ZN20EEPROM_24LC024_Class27read_buffer_with_terminatorEhPctch+0x32>
     504:	000052fc 	.word	0x000052fc
     508:	000003c9 	.word	0x000003c9
     50c:	2000051c 	.word	0x2000051c
     510:	00004815 	.word	0x00004815
     514:	000047fd 	.word	0x000047fd
     518:	00004789 	.word	0x00004789
     51c:	000047e5 	.word	0x000047e5
     520:	00004799 	.word	0x00004799

00000524 <_ZN20EEPROM_24LC024_Class14read_id_stringEPc>:
uint8_t EEPROM_24LC024_Class::read_id_string(char *buffer){
     524:	b5f0      	push	{r4, r5, r6, r7, lr}
     526:	b085      	sub	sp, #20
     528:	4604      	mov	r4, r0
     52a:	460d      	mov	r5, r1
	uint8_t comma_position[8] = {0};  // Contains the position of the commas in the buffer
     52c:	2300      	movs	r3, #0
     52e:	9302      	str	r3, [sp, #8]
     530:	9303      	str	r3, [sp, #12]
	buffer_count = read_buffer_with_terminator(EEPROM_I2C_ADDRESS, buffer, 0, QUIKEVAL_ID_TERMINATOR, QUIKEVAL_ID_SIZE+2);
     532:	2234      	movs	r2, #52	; 0x34
     534:	9201      	str	r2, [sp, #4]
     536:	220a      	movs	r2, #10
     538:	9200      	str	r2, [sp, #0]
     53a:	460a      	mov	r2, r1
     53c:	21a0      	movs	r1, #160	; 0xa0
     53e:	4f3b      	ldr	r7, [pc, #236]	; (62c <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0x108>)
     540:	47b8      	blx	r7
	if (buffer_count == 0) return(0);   // quit if no data read
     542:	4607      	mov	r7, r0
     544:	2800      	cmp	r0, #0
     546:	d06d      	beq.n	624 <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0x100>
	for (i = 0; i < buffer_count; i++)
     548:	2800      	cmp	r0, #0
     54a:	dd11      	ble.n	570 <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0x4c>
     54c:	2100      	movs	r1, #0
     54e:	460b      	mov	r3, r1
     550:	e003      	b.n	55a <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0x36>
     552:	3301      	adds	r3, #1
     554:	b2db      	uxtb	r3, r3
     556:	4283      	cmp	r3, r0
     558:	da0a      	bge.n	570 <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0x4c>
		if (buffer[i] == ',') comma_position[comma_count++]=i;
     55a:	5cea      	ldrb	r2, [r5, r3]
     55c:	2a2c      	cmp	r2, #44	; 0x2c
     55e:	d1f8      	bne.n	552 <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0x2e>
     560:	1c4a      	adds	r2, r1, #1
     562:	f10d 0e10 	add.w	lr, sp, #16
     566:	4471      	add	r1, lr
     568:	f801 3c08 	strb.w	r3, [r1, #-8]
     56c:	b2d1      	uxtb	r1, r2
     56e:	e7f0      	b.n	552 <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0x2e>
	if (comma_position[6] < comma_position[5])// comma_position[6]=strlen(buffer);  // some demo boards are missing the last comma
     570:	f89d 200d 	ldrb.w	r2, [sp, #13]
     574:	4610      	mov	r0, r2
     576:	f89d 300e 	ldrb.w	r3, [sp, #14]
     57a:	4293      	cmp	r3, r2
     57c:	da10      	bge.n	5a0 <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0x7c>
		for (i = buffer_count - 2; i > comma_position[5]; i--)
     57e:	1ebb      	subs	r3, r7, #2
     580:	b2db      	uxtb	r3, r3
     582:	429a      	cmp	r2, r3
     584:	da0c      	bge.n	5a0 <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0x7c>
			if (buffer[i] != '-')
     586:	5ce9      	ldrb	r1, [r5, r3]
     588:	292d      	cmp	r1, #45	; 0x2d
     58a:	d106      	bne.n	59a <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0x76>
		for (i = buffer_count - 2; i > comma_position[5]; i--)
     58c:	3b01      	subs	r3, #1
     58e:	b2db      	uxtb	r3, r3
     590:	4298      	cmp	r0, r3
     592:	da05      	bge.n	5a0 <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0x7c>
			if (buffer[i] != '-')
     594:	5ce9      	ldrb	r1, [r5, r3]
     596:	292d      	cmp	r1, #45	; 0x2d
     598:	d0f8      	beq.n	58c <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0x68>
				comma_position[6] = i+1;
     59a:	3301      	adds	r3, #1
     59c:	f88d 300e 	strb.w	r3, [sp, #14]
	for (i = 0; i < comma_position[0]; i++)
     5a0:	f89d e008 	ldrb.w	lr, [sp, #8]
     5a4:	f1be 0f00 	cmp.w	lr, #0
     5a8:	d02f      	beq.n	60a <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0xe6>
     5aa:	2100      	movs	r1, #0
     5ac:	460b      	mov	r3, r1
		exprimental_board.product_name[i]=buffer[i];
     5ae:	5ce8      	ldrb	r0, [r5, r3]
     5b0:	5460      	strb	r0, [r4, r1]
	for (i = 0; i < comma_position[0]; i++)
     5b2:	3301      	adds	r3, #1
     5b4:	b2db      	uxtb	r3, r3
     5b6:	4619      	mov	r1, r3
     5b8:	4573      	cmp	r3, lr
     5ba:	dbf8      	blt.n	5ae <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0x8a>
	exprimental_board.product_name[i]='\0';  // add terminator
     5bc:	2300      	movs	r3, #0
     5be:	5463      	strb	r3, [r4, r1]
	for (i = comma_position[5]+1; i < comma_position[6]; i++)
     5c0:	1c53      	adds	r3, r2, #1
     5c2:	b2db      	uxtb	r3, r3
     5c4:	f89d e00e 	ldrb.w	lr, [sp, #14]
     5c8:	4573      	cmp	r3, lr
     5ca:	da20      	bge.n	60e <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0xea>
     5cc:	2200      	movs	r2, #0
		exprimental_board.name[j++]=buffer[i];
     5ce:	1c51      	adds	r1, r2, #1
     5d0:	b2c9      	uxtb	r1, r1
     5d2:	5ce8      	ldrb	r0, [r5, r3]
     5d4:	4422      	add	r2, r4
     5d6:	73d0      	strb	r0, [r2, #15]
	for (i = comma_position[5]+1; i < comma_position[6]; i++)
     5d8:	3301      	adds	r3, #1
     5da:	b2db      	uxtb	r3, r3
		exprimental_board.name[j++]=buffer[i];
     5dc:	460a      	mov	r2, r1
	for (i = comma_position[5]+1; i < comma_position[6]; i++)
     5de:	4573      	cmp	r3, lr
     5e0:	dbf5      	blt.n	5ce <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0xaa>
	exprimental_board.name[j]='\0';  // add terminator
     5e2:	4421      	add	r1, r4
     5e4:	2500      	movs	r5, #0
     5e6:	73cd      	strb	r5, [r1, #15]
	for (i = 0; i < strlen(exprimental_board.name); i++)
     5e8:	f104 000f 	add.w	r0, r4, #15
     5ec:	4b10      	ldr	r3, [pc, #64]	; (630 <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0x10c>)
     5ee:	4798      	blx	r3
     5f0:	462b      	mov	r3, r5
     5f2:	b2da      	uxtb	r2, r3
     5f4:	4290      	cmp	r0, r2
     5f6:	d90c      	bls.n	612 <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0xee>
		if (exprimental_board.name[i] == '-') option = exprimental_board.name[i+1];
     5f8:	18a1      	adds	r1, r4, r2
     5fa:	7bc9      	ldrb	r1, [r1, #15]
     5fc:	292d      	cmp	r1, #45	; 0x2d
     5fe:	bf04      	itt	eq
     600:	1912      	addeq	r2, r2, r4
     602:	f992 6010 	ldrsbeq.w	r6, [r2, #16]
     606:	3301      	adds	r3, #1
	for (i = 0; i < strlen(exprimental_board.name); i++)
     608:	e7f3      	b.n	5f2 <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0xce>
	for (i = 0; i < comma_position[0]; i++)
     60a:	2100      	movs	r1, #0
     60c:	e7d6      	b.n	5bc <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0x98>
	j = 0;
     60e:	2100      	movs	r1, #0
     610:	e7e7      	b.n	5e2 <_ZN20EEPROM_24LC024_Class14read_id_stringEPc+0xbe>
	if ((option >= 0x41) && (option <= 0x5A)) exprimental_board.option = option;
     612:	b2f6      	uxtb	r6, r6
     614:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
     618:	b2db      	uxtb	r3, r3
     61a:	2b19      	cmp	r3, #25
     61c:	bf98      	it	ls
     61e:	77a6      	strbls	r6, [r4, #30]
	exprimental_board.name[6]='\0';
     620:	2300      	movs	r3, #0
     622:	7563      	strb	r3, [r4, #21]
}
     624:	4638      	mov	r0, r7
     626:	b005      	add	sp, #20
     628:	bdf0      	pop	{r4, r5, r6, r7, pc}
     62a:	bf00      	nop
     62c:	00000441 	.word	0x00000441
     630:	00005101 	.word	0x00005101

00000634 <_ZN20EEPROM_24LC024_Class13discover_demoEPc>:
int8_t  EEPROM_24LC024_Class::discover_demo(char *demo_name)
{
     634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     638:	4604      	mov	r4, r0
     63a:	460f      	mov	r7, r1
	int8_t connected;
	connected = 1;
	// read the ID from the serial EEPROM on the board
	// reuse the buffer declared in UserInterface
	if (read_id_string(&ui_buffer[0]) == 0) connected = 0;
     63c:	f100 01c8 	add.w	r1, r0, #200	; 0xc8
     640:	4b21      	ldr	r3, [pc, #132]	; (6c8 <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0x94>)
     642:	4798      	blx	r3
     644:	4606      	mov	r6, r0
	// make sure it is the correct demo board
	if (strcmp(exprimental_board.name, demo_name) != 0) connected = 0;
     646:	f104 050f 	add.w	r5, r4, #15
     64a:	4639      	mov	r1, r7
     64c:	4628      	mov	r0, r5
     64e:	4b1f      	ldr	r3, [pc, #124]	; (6cc <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0x98>)
     650:	4798      	blx	r3
     652:	bb08      	cbnz	r0, 698 <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0x64>
	if (read_id_string(&ui_buffer[0]) == 0) connected = 0;
     654:	2e00      	cmp	r6, #0
	connected = 1;
     656:	bf14      	ite	ne
     658:	2601      	movne	r6, #1
     65a:	2600      	moveq	r6, #0
	if (connected != 0)
     65c:	d01d      	beq.n	69a <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0x66>
	{
		usb.xprint("Demo Board Name: ");
     65e:	f104 0660 	add.w	r6, r4, #96	; 0x60
     662:	491b      	ldr	r1, [pc, #108]	; (6d0 <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0x9c>)
     664:	4630      	mov	r0, r6
     666:	4f1b      	ldr	r7, [pc, #108]	; (6d4 <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0xa0>)
     668:	47b8      	blx	r7
		usb.xprint(exprimental_board.name);
     66a:	4629      	mov	r1, r5
     66c:	4630      	mov	r0, r6
     66e:	4d1a      	ldr	r5, [pc, #104]	; (6d8 <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0xa4>)
     670:	47a8      	blx	r5
		usb.xprint("\r\nProduct Name: ");
     672:	491a      	ldr	r1, [pc, #104]	; (6dc <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0xa8>)
     674:	4630      	mov	r0, r6
     676:	47b8      	blx	r7
		usb.xprint(exprimental_board.product_name);
     678:	4621      	mov	r1, r4
     67a:	4630      	mov	r0, r6
     67c:	47a8      	blx	r5
		if (exprimental_board.option)
     67e:	7fa3      	ldrb	r3, [r4, #30]
     680:	b90b      	cbnz	r3, 686 <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0x52>
     682:	2601      	movs	r6, #1
     684:	e01c      	b.n	6c0 <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0x8c>
		{
			usb.xprint("\r\nDemo Board Option: ");
     686:	4916      	ldr	r1, [pc, #88]	; (6e0 <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0xac>)
     688:	4630      	mov	r0, r6
     68a:	47b8      	blx	r7
			usb.xprint(&exprimental_board.option);
     68c:	f104 011e 	add.w	r1, r4, #30
     690:	4630      	mov	r0, r6
     692:	47a8      	blx	r5
     694:	2601      	movs	r6, #1
     696:	e013      	b.n	6c0 <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0x8c>
	if (strcmp(exprimental_board.name, demo_name) != 0) connected = 0;
     698:	2600      	movs	r6, #0
		}
	}
	else
	{
		usb.xprint("Demo board ");
     69a:	3460      	adds	r4, #96	; 0x60
     69c:	4911      	ldr	r1, [pc, #68]	; (6e4 <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0xb0>)
     69e:	4620      	mov	r0, r4
     6a0:	f8df 8030 	ldr.w	r8, [pc, #48]	; 6d4 <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0xa0>
     6a4:	47c0      	blx	r8
		usb.xprint(demo_name);
     6a6:	4639      	mov	r1, r7
     6a8:	4620      	mov	r0, r4
     6aa:	4f0b      	ldr	r7, [pc, #44]	; (6d8 <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0xa4>)
     6ac:	47b8      	blx	r7
		usb.xprint(" \r\nnot found, \nfound \r\n");
     6ae:	490e      	ldr	r1, [pc, #56]	; (6e8 <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0xb4>)
     6b0:	4620      	mov	r0, r4
     6b2:	47c0      	blx	r8
		usb.xprint(exprimental_board.name);
     6b4:	4629      	mov	r1, r5
     6b6:	4620      	mov	r0, r4
     6b8:	47b8      	blx	r7
		usb.xprint(" \r\ninstead. \nConnect the correct demo board, then press the reset button.");
     6ba:	490c      	ldr	r1, [pc, #48]	; (6ec <_ZN20EEPROM_24LC024_Class13discover_demoEPc+0xb8>)
     6bc:	4620      	mov	r0, r4
     6be:	47c0      	blx	r8
	}
	return(connected);
}
     6c0:	4630      	mov	r0, r6
     6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     6c6:	bf00      	nop
     6c8:	00000525 	.word	0x00000525
     6cc:	00004e29 	.word	0x00004e29
     6d0:	00005314 	.word	0x00005314
     6d4:	00004a7d 	.word	0x00004a7d
     6d8:	00004b01 	.word	0x00004b01
     6dc:	00005328 	.word	0x00005328
     6e0:	0000533c 	.word	0x0000533c
     6e4:	00005354 	.word	0x00005354
     6e8:	00005360 	.word	0x00005360
     6ec:	00005378 	.word	0x00005378

000006f0 <_GLOBAL__sub_I_ptrEEPROM>:
     6f0:	b510      	push	{r4, lr}
I2C_Asyn_Class EEPROM_24LC024_Class::i2c;
     6f2:	4c05      	ldr	r4, [pc, #20]	; (708 <_GLOBAL__sub_I_ptrEEPROM+0x18>)
     6f4:	4620      	mov	r0, r4
     6f6:	4b05      	ldr	r3, [pc, #20]	; (70c <_GLOBAL__sub_I_ptrEEPROM+0x1c>)
     6f8:	4798      	blx	r3
     6fa:	4a05      	ldr	r2, [pc, #20]	; (710 <_GLOBAL__sub_I_ptrEEPROM+0x20>)
     6fc:	4905      	ldr	r1, [pc, #20]	; (714 <_GLOBAL__sub_I_ptrEEPROM+0x24>)
     6fe:	4620      	mov	r0, r4
     700:	4b05      	ldr	r3, [pc, #20]	; (718 <_GLOBAL__sub_I_ptrEEPROM+0x28>)
     702:	4798      	blx	r3
     704:	bd10      	pop	{r4, pc}
     706:	bf00      	nop
     708:	2000051c 	.word	0x2000051c
     70c:	000046b1 	.word	0x000046b1
     710:	20000000 	.word	0x20000000
     714:	000046e1 	.word	0x000046e1
     718:	00004be5 	.word	0x00004be5

0000071c <main>:

 


int main(void)
{
     71c:	b500      	push	{lr}
     71e:	b0c5      	sub	sp, #276	; 0x114
	
	atmel_start_init();
     720:	4b0b      	ldr	r3, [pc, #44]	; (750 <main+0x34>)
     722:	4798      	blx	r3
	EEPROM_24LC024_Class	eeprom(&I2C_EEPROM);
     724:	490b      	ldr	r1, [pc, #44]	; (754 <main+0x38>)
     726:	a802      	add	r0, sp, #8
     728:	4b0b      	ldr	r3, [pc, #44]	; (758 <main+0x3c>)
     72a:	4798      	blx	r3
	eeprom.init();
     72c:	a802      	add	r0, sp, #8
     72e:	4b0b      	ldr	r3, [pc, #44]	; (75c <main+0x40>)
     730:	4798      	blx	r3
	char demo_name[]="DC2209";
     732:	4b0b      	ldr	r3, [pc, #44]	; (760 <main+0x44>)
     734:	e893 0003 	ldmia.w	r3, {r0, r1}
     738:	9000      	str	r0, [sp, #0]
     73a:	f8ad 1004 	strh.w	r1, [sp, #4]
     73e:	0c09      	lsrs	r1, r1, #16
     740:	f88d 1006 	strb.w	r1, [sp, #6]
    /* Replace with your application code */
    while (1) 
    {
		eeprom.discover_demo(demo_name);
     744:	4c07      	ldr	r4, [pc, #28]	; (764 <main+0x48>)
     746:	4669      	mov	r1, sp
     748:	a802      	add	r0, sp, #8
     74a:	47a0      	blx	r4
     74c:	e7fb      	b.n	746 <main+0x2a>
     74e:	bf00      	nop
     750:	00000769 	.word	0x00000769
     754:	200009a8 	.word	0x200009a8
     758:	00000359 	.word	0x00000359
     75c:	0000038d 	.word	0x0000038d
     760:	000053c4 	.word	0x000053c4
     764:	00000635 	.word	0x00000635

00000768 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     768:	b508      	push	{r3, lr}
	system_init();
     76a:	4b02      	ldr	r3, [pc, #8]	; (774 <atmel_start_init+0xc>)
     76c:	4798      	blx	r3
	usb_init();
     76e:	4b02      	ldr	r3, [pc, #8]	; (778 <atmel_start_init+0x10>)
     770:	4798      	blx	r3
     772:	bd08      	pop	{r3, pc}
     774:	00000c51 	.word	0x00000c51
     778:	00003b15 	.word	0x00003b15

0000077c <EXTERNAL_IRQ_0_init>:
struct i2c_m_async_desc I2C_1;

struct i2c_m_async_desc I2C_EEPROM;

void EXTERNAL_IRQ_0_init(void)
{
     77c:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     77e:	2240      	movs	r2, #64	; 0x40
     780:	4b15      	ldr	r3, [pc, #84]	; (7d8 <EXTERNAL_IRQ_0_init+0x5c>)
     782:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     786:	4a15      	ldr	r2, [pc, #84]	; (7dc <EXTERNAL_IRQ_0_init+0x60>)
     788:	6953      	ldr	r3, [r2, #20]
     78a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     78e:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     790:	4b13      	ldr	r3, [pc, #76]	; (7e0 <EXTERNAL_IRQ_0_init+0x64>)
     792:	2201      	movs	r2, #1
     794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     798:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     79c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     7a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     7a4:	4a0f      	ldr	r2, [pc, #60]	; (7e4 <EXTERNAL_IRQ_0_init+0x68>)
     7a6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7aa:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
     7ae:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7b2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7b6:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7c2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7c6:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7ca:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7ce:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB00, PINMUX_PB00A_EIC_EXTINT0);

	ext_irq_init();
     7d2:	4b05      	ldr	r3, [pc, #20]	; (7e8 <EXTERNAL_IRQ_0_init+0x6c>)
     7d4:	4798      	blx	r3
     7d6:	bd08      	pop	{r3, pc}
     7d8:	40001c00 	.word	0x40001c00
     7dc:	40000800 	.word	0x40000800
     7e0:	41008000 	.word	0x41008000
     7e4:	c0020000 	.word	0xc0020000
     7e8:	00000ee9 	.word	0x00000ee9

000007ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     7ec:	b508      	push	{r3, lr}
     7ee:	2240      	movs	r2, #64	; 0x40
     7f0:	4b05      	ldr	r3, [pc, #20]	; (808 <EVENT_SYSTEM_0_init+0x1c>)
     7f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     7f6:	4a05      	ldr	r2, [pc, #20]	; (80c <EVENT_SYSTEM_0_init+0x20>)
     7f8:	6993      	ldr	r3, [r2, #24]
     7fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     7fe:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     800:	4b03      	ldr	r3, [pc, #12]	; (810 <EVENT_SYSTEM_0_init+0x24>)
     802:	4798      	blx	r3
     804:	bd08      	pop	{r3, pc}
     806:	bf00      	nop
     808:	40001c00 	.word	0x40001c00
     80c:	40000800 	.word	0x40000800
     810:	00000ea5 	.word	0x00000ea5

00000814 <SPI_LTC2983_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     814:	4b28      	ldr	r3, [pc, #160]	; (8b8 <SPI_LTC2983_PORT_init+0xa4>)
     816:	2210      	movs	r2, #16
     818:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     81a:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     81c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     820:	629a      	str	r2, [r3, #40]	; 0x28
     822:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     826:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     828:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     82c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     830:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     838:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     83c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     840:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     844:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     848:	2220      	movs	r2, #32
     84a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     84c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     84e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     852:	629a      	str	r2, [r3, #40]	; 0x28
     854:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     856:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     85a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     85e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     866:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     86a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     86e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     872:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     876:	2240      	movs	r2, #64	; 0x40
     878:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     87a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     87e:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     882:	629a      	str	r2, [r3, #40]	; 0x28
     884:	4a0d      	ldr	r2, [pc, #52]	; (8bc <SPI_LTC2983_PORT_init+0xa8>)
     886:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     888:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     88c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     894:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     89c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8a4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8a8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8ac:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8b0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop
     8b8:	41008000 	.word	0x41008000
     8bc:	c0020000 	.word	0xc0020000

000008c0 <SPI_LTC2983_CLOCK_init>:
     8c0:	4b06      	ldr	r3, [pc, #24]	; (8dc <SPI_LTC2983_CLOCK_init+0x1c>)
     8c2:	2240      	movs	r2, #64	; 0x40
     8c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     8c8:	2243      	movs	r2, #67	; 0x43
     8ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     8ce:	4a04      	ldr	r2, [pc, #16]	; (8e0 <SPI_LTC2983_CLOCK_init+0x20>)
     8d0:	6953      	ldr	r3, [r2, #20]
     8d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     8d6:	6153      	str	r3, [r2, #20]
     8d8:	4770      	bx	lr
     8da:	bf00      	nop
     8dc:	40001c00 	.word	0x40001c00
     8e0:	40000800 	.word	0x40000800

000008e4 <SPI_LTC2983_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_LTC2983_init(void)
{
     8e4:	b508      	push	{r3, lr}
	SPI_LTC2983_CLOCK_init();
     8e6:	4b04      	ldr	r3, [pc, #16]	; (8f8 <SPI_LTC2983_init+0x14>)
     8e8:	4798      	blx	r3
	spi_m_sync_init(&SPI_LTC2983, SERCOM0);
     8ea:	4904      	ldr	r1, [pc, #16]	; (8fc <SPI_LTC2983_init+0x18>)
     8ec:	4804      	ldr	r0, [pc, #16]	; (900 <SPI_LTC2983_init+0x1c>)
     8ee:	4b05      	ldr	r3, [pc, #20]	; (904 <SPI_LTC2983_init+0x20>)
     8f0:	4798      	blx	r3
	SPI_LTC2983_PORT_init();
     8f2:	4b05      	ldr	r3, [pc, #20]	; (908 <SPI_LTC2983_init+0x24>)
     8f4:	4798      	blx	r3
     8f6:	bd08      	pop	{r3, pc}
     8f8:	000008c1 	.word	0x000008c1
     8fc:	40003000 	.word	0x40003000
     900:	20000978 	.word	0x20000978
     904:	000010f1 	.word	0x000010f1
     908:	00000815 	.word	0x00000815

0000090c <I2C_1_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     90c:	4b16      	ldr	r3, [pc, #88]	; (968 <I2C_1_PORT_init+0x5c>)
     90e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     912:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     91e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     922:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     92e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     932:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     936:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     93a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     93e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     946:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     94a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     94e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     956:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     95a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     95e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     966:	4770      	bx	lr
     968:	41008000 	.word	0x41008000

0000096c <I2C_1_CLOCK_init>:
     96c:	4b06      	ldr	r3, [pc, #24]	; (988 <I2C_1_CLOCK_init+0x1c>)
     96e:	2240      	movs	r2, #64	; 0x40
     970:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     974:	2243      	movs	r2, #67	; 0x43
     976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     97a:	4a04      	ldr	r2, [pc, #16]	; (98c <I2C_1_CLOCK_init+0x20>)
     97c:	6953      	ldr	r3, [r2, #20]
     97e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     982:	6153      	str	r3, [r2, #20]
     984:	4770      	bx	lr
     986:	bf00      	nop
     988:	40001c00 	.word	0x40001c00
     98c:	40000800 	.word	0x40000800

00000990 <I2C_1_init>:

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
}

void I2C_1_init(void)
{
     990:	b508      	push	{r3, lr}
	I2C_1_CLOCK_init();
     992:	4b04      	ldr	r3, [pc, #16]	; (9a4 <I2C_1_init+0x14>)
     994:	4798      	blx	r3
	i2c_m_async_init(&I2C_1, SERCOM1);
     996:	4904      	ldr	r1, [pc, #16]	; (9a8 <I2C_1_init+0x18>)
     998:	4804      	ldr	r0, [pc, #16]	; (9ac <I2C_1_init+0x1c>)
     99a:	4b05      	ldr	r3, [pc, #20]	; (9b0 <I2C_1_init+0x20>)
     99c:	4798      	blx	r3
	I2C_1_PORT_init();
     99e:	4b05      	ldr	r3, [pc, #20]	; (9b4 <I2C_1_init+0x24>)
     9a0:	4798      	blx	r3
     9a2:	bd08      	pop	{r3, pc}
     9a4:	0000096d 	.word	0x0000096d
     9a8:	40003400 	.word	0x40003400
     9ac:	20000938 	.word	0x20000938
     9b0:	00000fa5 	.word	0x00000fa5
     9b4:	0000090d 	.word	0x0000090d

000009b8 <SPI_Holt_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9b8:	4b2d      	ldr	r3, [pc, #180]	; (a70 <SPI_Holt_PORT_init+0xb8>)
     9ba:	f44f 7280 	mov.w	r2, #256	; 0x100
     9be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9c6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     9ca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     9ce:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     9d2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9d6:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     9da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9e6:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9f2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9f6:	f44f 7200 	mov.w	r2, #512	; 0x200
     9fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a02:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     a06:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a0a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a0e:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     a12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a16:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a1a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a1e:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a22:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a26:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a2a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a36:	4a0f      	ldr	r2, [pc, #60]	; (a74 <SPI_Holt_PORT_init+0xbc>)
     a38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a3c:	4a0e      	ldr	r2, [pc, #56]	; (a78 <SPI_Holt_PORT_init+0xc0>)
     a3e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a42:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
     a46:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     a4a:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a4e:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     a52:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a56:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5a:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a5e:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a62:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a66:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6a:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
     a6e:	4770      	bx	lr
     a70:	41008000 	.word	0x41008000
     a74:	40024000 	.word	0x40024000
     a78:	c0020000 	.word	0xc0020000

00000a7c <SPI_Holt_CLOCK_init>:
     a7c:	4b06      	ldr	r3, [pc, #24]	; (a98 <SPI_Holt_CLOCK_init+0x1c>)
     a7e:	2240      	movs	r2, #64	; 0x40
     a80:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     a84:	2243      	movs	r2, #67	; 0x43
     a86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     a8a:	4a04      	ldr	r2, [pc, #16]	; (a9c <SPI_Holt_CLOCK_init+0x20>)
     a8c:	6a13      	ldr	r3, [r2, #32]
     a8e:	f043 0301 	orr.w	r3, r3, #1
     a92:	6213      	str	r3, [r2, #32]
     a94:	4770      	bx	lr
     a96:	bf00      	nop
     a98:	40001c00 	.word	0x40001c00
     a9c:	40000800 	.word	0x40000800

00000aa0 <SPI_Holt_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void SPI_Holt_init(void)
{
     aa0:	b508      	push	{r3, lr}
	SPI_Holt_CLOCK_init();
     aa2:	4b05      	ldr	r3, [pc, #20]	; (ab8 <SPI_Holt_init+0x18>)
     aa4:	4798      	blx	r3
	spi_m_sync_init(&SPI_Holt, SERCOM4);
     aa6:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     aaa:	4804      	ldr	r0, [pc, #16]	; (abc <SPI_Holt_init+0x1c>)
     aac:	4b04      	ldr	r3, [pc, #16]	; (ac0 <SPI_Holt_init+0x20>)
     aae:	4798      	blx	r3
	SPI_Holt_PORT_init();
     ab0:	4b04      	ldr	r3, [pc, #16]	; (ac4 <SPI_Holt_init+0x24>)
     ab2:	4798      	blx	r3
     ab4:	bd08      	pop	{r3, pc}
     ab6:	bf00      	nop
     ab8:	00000a7d 	.word	0x00000a7d
     abc:	20000990 	.word	0x20000990
     ac0:	000010f1 	.word	0x000010f1
     ac4:	000009b9 	.word	0x000009b9

00000ac8 <I2C_EEPROM_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ac8:	4b16      	ldr	r3, [pc, #88]	; (b24 <I2C_EEPROM_PORT_init+0x5c>)
     aca:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     ace:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ad2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ad6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     ada:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ade:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ae2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ae6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     aea:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     aee:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     af2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     af6:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     afa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     afe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b02:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     b06:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b0a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b0e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b12:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b16:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b1a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b1e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     b22:	4770      	bx	lr
     b24:	41008000 	.word	0x41008000

00000b28 <I2C_EEPROM_CLOCK_init>:
     b28:	4b06      	ldr	r3, [pc, #24]	; (b44 <I2C_EEPROM_CLOCK_init+0x1c>)
     b2a:	2240      	movs	r2, #64	; 0x40
     b2c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     b30:	2243      	movs	r2, #67	; 0x43
     b32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b36:	4a04      	ldr	r2, [pc, #16]	; (b48 <I2C_EEPROM_CLOCK_init+0x20>)
     b38:	6a13      	ldr	r3, [r2, #32]
     b3a:	f043 0302 	orr.w	r3, r3, #2
     b3e:	6213      	str	r3, [r2, #32]
     b40:	4770      	bx	lr
     b42:	bf00      	nop
     b44:	40001c00 	.word	0x40001c00
     b48:	40000800 	.word	0x40000800

00000b4c <I2C_EEPROM_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void I2C_EEPROM_init(void)
{
     b4c:	b508      	push	{r3, lr}
	I2C_EEPROM_CLOCK_init();
     b4e:	4b04      	ldr	r3, [pc, #16]	; (b60 <I2C_EEPROM_init+0x14>)
     b50:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM5);
     b52:	4904      	ldr	r1, [pc, #16]	; (b64 <I2C_EEPROM_init+0x18>)
     b54:	4804      	ldr	r0, [pc, #16]	; (b68 <I2C_EEPROM_init+0x1c>)
     b56:	4b05      	ldr	r3, [pc, #20]	; (b6c <I2C_EEPROM_init+0x20>)
     b58:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
     b5a:	4b05      	ldr	r3, [pc, #20]	; (b70 <I2C_EEPROM_init+0x24>)
     b5c:	4798      	blx	r3
     b5e:	bd08      	pop	{r3, pc}
     b60:	00000b29 	.word	0x00000b29
     b64:	43000400 	.word	0x43000400
     b68:	200009a8 	.word	0x200009a8
     b6c:	00000fa5 	.word	0x00000fa5
     b70:	00000ac9 	.word	0x00000ac9

00000b74 <delay_driver_init>:
}

void delay_driver_init(void)
{
     b74:	b508      	push	{r3, lr}
	delay_init(SysTick);
     b76:	4802      	ldr	r0, [pc, #8]	; (b80 <delay_driver_init+0xc>)
     b78:	4b02      	ldr	r3, [pc, #8]	; (b84 <delay_driver_init+0x10>)
     b7a:	4798      	blx	r3
     b7c:	bd08      	pop	{r3, pc}
     b7e:	bf00      	nop
     b80:	e000e010 	.word	0xe000e010
     b84:	00000e71 	.word	0x00000e71

00000b88 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b88:	4b1e      	ldr	r3, [pc, #120]	; (c04 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     b8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     b8e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     b94:	6299      	str	r1, [r3, #40]	; 0x28
     b96:	481c      	ldr	r0, [pc, #112]	; (c08 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     b98:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b9a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b9c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     ba0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ba4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     bac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bb0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bbc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bc0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     bcc:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bce:	6299      	str	r1, [r3, #40]	; 0x28
     bd0:	490e      	ldr	r1, [pc, #56]	; (c0c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     bd2:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bd4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bd6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     bda:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     bde:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     be2:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     be6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bea:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bf2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bf6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bfa:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     c02:	4770      	bx	lr
     c04:	41008000 	.word	0x41008000
     c08:	c0000100 	.word	0xc0000100
     c0c:	c0000200 	.word	0xc0000200

00000c10 <USB_DEVICE_INSTANCE_CLOCK_init>:
     c10:	2244      	movs	r2, #68	; 0x44
     c12:	4b07      	ldr	r3, [pc, #28]	; (c30 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     c14:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     c18:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     c1c:	691a      	ldr	r2, [r3, #16]
     c1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     c22:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     c24:	699a      	ldr	r2, [r3, #24]
     c26:	f042 0201 	orr.w	r2, r2, #1
     c2a:	619a      	str	r2, [r3, #24]
     c2c:	4770      	bx	lr
     c2e:	bf00      	nop
     c30:	40001c00 	.word	0x40001c00

00000c34 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     c34:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     c36:	4b03      	ldr	r3, [pc, #12]	; (c44 <USB_DEVICE_INSTANCE_init+0x10>)
     c38:	4798      	blx	r3
	usb_d_init();
     c3a:	4b03      	ldr	r3, [pc, #12]	; (c48 <USB_DEVICE_INSTANCE_init+0x14>)
     c3c:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     c3e:	4b03      	ldr	r3, [pc, #12]	; (c4c <USB_DEVICE_INSTANCE_init+0x18>)
     c40:	4798      	blx	r3
     c42:	bd08      	pop	{r3, pc}
     c44:	00000c11 	.word	0x00000c11
     c48:	00001561 	.word	0x00001561
     c4c:	00000b89 	.word	0x00000b89

00000c50 <system_init>:
}

void system_init(void)
{
     c50:	b538      	push	{r3, r4, r5, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     c52:	4b70      	ldr	r3, [pc, #448]	; (e14 <system_init+0x1c4>)
     c54:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c56:	4b70      	ldr	r3, [pc, #448]	; (e18 <system_init+0x1c8>)
     c58:	2280      	movs	r2, #128	; 0x80
     c5a:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c5e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     c62:	629a      	str	r2, [r3, #40]	; 0x28
     c64:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     c68:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c6a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     c6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     c7a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c86:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c8a:	4864      	ldr	r0, [pc, #400]	; (e1c <system_init+0x1cc>)
     c8c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c90:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
     c94:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c98:	f883 00dc 	strb.w	r0, [r3, #220]	; 0xdc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c9c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
     ca0:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ca4:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ca8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     cac:	485c      	ldr	r0, [pc, #368]	; (e20 <system_init+0x1d0>)
     cae:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cb2:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
	tmp &= ~PORT_PINCFG_PMUXEN;
     cb6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cba:	f883 00dd 	strb.w	r0, [r3, #221]	; 0xdd
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cbe:	2004      	movs	r0, #4
     cc0:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cc4:	4c57      	ldr	r4, [pc, #348]	; (e24 <system_init+0x1d4>)
     cc6:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
     cca:	4d57      	ldr	r5, [pc, #348]	; (e28 <system_init+0x1d8>)
     ccc:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cd0:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     cd4:	f893 4142 	ldrb.w	r4, [r3, #322]	; 0x142
     cd8:	4304      	orrs	r4, r0
     cda:	f883 4142 	strb.w	r4, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cde:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ce2:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     ce6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cea:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cee:	2008      	movs	r0, #8
     cf0:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cf4:	4c4d      	ldr	r4, [pc, #308]	; (e2c <system_init+0x1dc>)
     cf6:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
     cfa:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cfe:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     d02:	f893 4143 	ldrb.w	r4, [r3, #323]	; 0x143
     d06:	f044 0404 	orr.w	r4, r4, #4
     d0a:	f883 4143 	strb.w	r4, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d0e:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d12:	f893 0143 	ldrb.w	r0, [r3, #323]	; 0x143
	tmp &= ~PORT_PINCFG_PMUXEN;
     d16:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d1a:	f883 0143 	strb.w	r0, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d1e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     d22:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d26:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d2a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     d2e:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     d32:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d36:	f893 014f 	ldrb.w	r0, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
     d3a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d3e:	f883 014f 	strb.w	r0, [r3, #335]	; 0x14f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d42:	f44f 2080 	mov.w	r0, #262144	; 0x40000
     d46:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d4a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d4e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d52:	4837      	ldr	r0, [pc, #220]	; (e30 <system_init+0x1e0>)
     d54:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d58:	f893 0152 	ldrb.w	r0, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     d5c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d60:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d64:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d68:	4832      	ldr	r0, [pc, #200]	; (e34 <system_init+0x1e4>)
     d6a:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     d6e:	4832      	ldr	r0, [pc, #200]	; (e38 <system_init+0x1e8>)
     d70:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d74:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     d78:	f893 015e 	ldrb.w	r0, [r3, #350]	; 0x15e
     d7c:	f040 0004 	orr.w	r0, r0, #4
     d80:	f883 015e 	strb.w	r0, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d84:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d88:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
	tmp &= ~PORT_PINCFG_PMUXEN;
     d8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d90:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
     d98:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d9c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     da0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     da4:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     da8:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dac:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
	tmp &= ~PORT_PINCFG_PMUXEN;
     db0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     db4:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
     dbc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dc0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dc4:	4c1d      	ldr	r4, [pc, #116]	; (e3c <system_init+0x1ec>)
     dc6:	f8c3 41a8 	str.w	r4, [r3, #424]	; 0x1a8
     dca:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dce:	f893 21cb 	ldrb.w	r2, [r3, #459]	; 0x1cb
	tmp &= ~PORT_PINCFG_PMUXEN;
     dd2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dd6:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
	// Set pin direction to output
	gpio_set_pin_direction(OLED_LED3, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(OLED_LED3, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     dda:	4b19      	ldr	r3, [pc, #100]	; (e40 <system_init+0x1f0>)
     ddc:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     dde:	4b19      	ldr	r3, [pc, #100]	; (e44 <system_init+0x1f4>)
     de0:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     de2:	6963      	ldr	r3, [r4, #20]
     de4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     de8:	6163      	str	r3, [r4, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     dea:	4b17      	ldr	r3, [pc, #92]	; (e48 <system_init+0x1f8>)
     dec:	4798      	blx	r3
     dee:	4602      	mov	r2, r0
     df0:	4916      	ldr	r1, [pc, #88]	; (e4c <system_init+0x1fc>)
     df2:	4817      	ldr	r0, [pc, #92]	; (e50 <system_init+0x200>)
     df4:	4b17      	ldr	r3, [pc, #92]	; (e54 <system_init+0x204>)
     df6:	4798      	blx	r3

	TIMER_0_init();

	SPI_LTC2983_init();
     df8:	4b17      	ldr	r3, [pc, #92]	; (e58 <system_init+0x208>)
     dfa:	4798      	blx	r3

	I2C_1_init();
     dfc:	4b17      	ldr	r3, [pc, #92]	; (e5c <system_init+0x20c>)
     dfe:	4798      	blx	r3

	SPI_Holt_init();
     e00:	4b17      	ldr	r3, [pc, #92]	; (e60 <system_init+0x210>)
     e02:	4798      	blx	r3

	I2C_EEPROM_init();
     e04:	4b17      	ldr	r3, [pc, #92]	; (e64 <system_init+0x214>)
     e06:	4798      	blx	r3

	delay_driver_init();
     e08:	4b17      	ldr	r3, [pc, #92]	; (e68 <system_init+0x218>)
     e0a:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
     e0c:	4b17      	ldr	r3, [pc, #92]	; (e6c <system_init+0x21c>)
     e0e:	4798      	blx	r3
     e10:	bd38      	pop	{r3, r4, r5, pc}
     e12:	bf00      	nop
     e14:	00001961 	.word	0x00001961
     e18:	41008000 	.word	0x41008000
     e1c:	c0001000 	.word	0xc0001000
     e20:	c0002000 	.word	0xc0002000
     e24:	40020004 	.word	0x40020004
     e28:	c0020000 	.word	0xc0020000
     e2c:	40020008 	.word	0x40020008
     e30:	c0000004 	.word	0xc0000004
     e34:	40020000 	.word	0x40020000
     e38:	c0024000 	.word	0xc0024000
     e3c:	40000800 	.word	0x40000800
     e40:	0000077d 	.word	0x0000077d
     e44:	000007ed 	.word	0x000007ed
     e48:	00001dd5 	.word	0x00001dd5
     e4c:	40002400 	.word	0x40002400
     e50:	200009e8 	.word	0x200009e8
     e54:	000012d1 	.word	0x000012d1
     e58:	000008e5 	.word	0x000008e5
     e5c:	00000991 	.word	0x00000991
     e60:	00000aa1 	.word	0x00000aa1
     e64:	00000b4d 	.word	0x00000b4d
     e68:	00000b75 	.word	0x00000b75
     e6c:	00000c35 	.word	0x00000c35

00000e70 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     e70:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     e72:	4b02      	ldr	r3, [pc, #8]	; (e7c <delay_init+0xc>)
     e74:	6018      	str	r0, [r3, #0]
     e76:	4b02      	ldr	r3, [pc, #8]	; (e80 <delay_init+0x10>)
     e78:	4798      	blx	r3
     e7a:	bd08      	pop	{r3, pc}
     e7c:	20000568 	.word	0x20000568
     e80:	000027e9 	.word	0x000027e9

00000e84 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     e84:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     e86:	4b04      	ldr	r3, [pc, #16]	; (e98 <delay_ms+0x14>)
     e88:	681c      	ldr	r4, [r3, #0]
     e8a:	4b04      	ldr	r3, [pc, #16]	; (e9c <delay_ms+0x18>)
     e8c:	4798      	blx	r3
     e8e:	4601      	mov	r1, r0
     e90:	4620      	mov	r0, r4
     e92:	4b03      	ldr	r3, [pc, #12]	; (ea0 <delay_ms+0x1c>)
     e94:	4798      	blx	r3
     e96:	bd10      	pop	{r4, pc}
     e98:	20000568 	.word	0x20000568
     e9c:	00001955 	.word	0x00001955
     ea0:	000027fd 	.word	0x000027fd

00000ea4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     ea4:	b508      	push	{r3, lr}
	return _event_system_init();
     ea6:	4b01      	ldr	r3, [pc, #4]	; (eac <event_system_init+0x8>)
     ea8:	4798      	blx	r3
}
     eaa:	bd08      	pop	{r3, pc}
     eac:	00001b5d 	.word	0x00001b5d

00000eb0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     eb0:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     eb2:	4b0c      	ldr	r3, [pc, #48]	; (ee4 <process_ext_irq+0x34>)
     eb4:	685c      	ldr	r4, [r3, #4]
     eb6:	42a0      	cmp	r0, r4
     eb8:	d00e      	beq.n	ed8 <process_ext_irq+0x28>
     eba:	2301      	movs	r3, #1
     ebc:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     ebe:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
     ec0:	25ff      	movs	r5, #255	; 0xff
     ec2:	e003      	b.n	ecc <process_ext_irq+0x1c>
     ec4:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
     ec6:	185a      	adds	r2, r3, r1
     ec8:	0852      	lsrs	r2, r2, #1
     eca:	d104      	bne.n	ed6 <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
     ecc:	42a0      	cmp	r0, r4
     ece:	d9f9      	bls.n	ec4 <process_ext_irq+0x14>
	while (upper >= lower) {
     ed0:	b13b      	cbz	r3, ee2 <process_ext_irq+0x32>
			lower = middle + 1;
     ed2:	4631      	mov	r1, r6
     ed4:	e7f7      	b.n	ec6 <process_ext_irq+0x16>
     ed6:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
     ed8:	4b02      	ldr	r3, [pc, #8]	; (ee4 <process_ext_irq+0x34>)
     eda:	681b      	ldr	r3, [r3, #0]
     edc:	b10b      	cbz	r3, ee2 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     ede:	4798      	blx	r3
     ee0:	bd70      	pop	{r4, r5, r6, pc}
     ee2:	bd70      	pop	{r4, r5, r6, pc}
     ee4:	2000056c 	.word	0x2000056c

00000ee8 <ext_irq_init>:
{
     ee8:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     eea:	4b05      	ldr	r3, [pc, #20]	; (f00 <ext_irq_init+0x18>)
     eec:	f04f 32ff 	mov.w	r2, #4294967295
     ef0:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     ef2:	2200      	movs	r2, #0
     ef4:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     ef6:	4803      	ldr	r0, [pc, #12]	; (f04 <ext_irq_init+0x1c>)
     ef8:	4b03      	ldr	r3, [pc, #12]	; (f08 <ext_irq_init+0x20>)
     efa:	4798      	blx	r3
}
     efc:	bd08      	pop	{r3, pc}
     efe:	bf00      	nop
     f00:	2000056c 	.word	0x2000056c
     f04:	00000eb1 	.word	0x00000eb1
     f08:	000019c5 	.word	0x000019c5

00000f0c <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
     f0c:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     f0e:	8843      	ldrh	r3, [r0, #2]
     f10:	f413 7f80 	tst.w	r3, #256	; 0x100
     f14:	d102      	bne.n	f1c <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
     f16:	6b43      	ldr	r3, [r0, #52]	; 0x34
     f18:	b103      	cbz	r3, f1c <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
     f1a:	4798      	blx	r3
     f1c:	bd08      	pop	{r3, pc}

00000f1e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
     f1e:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     f20:	8843      	ldrh	r3, [r0, #2]
     f22:	f413 7f80 	tst.w	r3, #256	; 0x100
     f26:	d102      	bne.n	f2e <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
     f28:	6b83      	ldr	r3, [r0, #56]	; 0x38
     f2a:	b103      	cbz	r3, f2e <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
     f2c:	4798      	blx	r3
     f2e:	bd08      	pop	{r3, pc}

00000f30 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
     f30:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     f32:	8843      	ldrh	r3, [r0, #2]
     f34:	f413 7f80 	tst.w	r3, #256	; 0x100
     f38:	d102      	bne.n	f40 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
     f3a:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f3c:	b103      	cbz	r3, f40 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
     f3e:	4798      	blx	r3
     f40:	bd08      	pop	{r3, pc}
	...

00000f44 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
     f44:	b510      	push	{r4, lr}
     f46:	b084      	sub	sp, #16
     f48:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
     f4a:	8a83      	ldrh	r3, [r0, #20]
     f4c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     f50:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     f56:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     f5a:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
     f5c:	a901      	add	r1, sp, #4
     f5e:	3828      	subs	r0, #40	; 0x28
     f60:	4b03      	ldr	r3, [pc, #12]	; (f70 <i2c_m_async_write+0x2c>)
     f62:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
     f64:	2800      	cmp	r0, #0
     f66:	bf08      	it	eq
     f68:	4620      	moveq	r0, r4
     f6a:	b004      	add	sp, #16
     f6c:	bd10      	pop	{r4, pc}
     f6e:	bf00      	nop
     f70:	00002341 	.word	0x00002341

00000f74 <i2c_m_async_read>:
{
     f74:	b510      	push	{r4, lr}
     f76:	b084      	sub	sp, #16
     f78:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
     f7a:	8a83      	ldrh	r3, [r0, #20]
     f7c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     f80:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     f82:	f248 0301 	movw	r3, #32769	; 0x8001
     f86:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
     f8a:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
     f8c:	a901      	add	r1, sp, #4
     f8e:	3828      	subs	r0, #40	; 0x28
     f90:	4b03      	ldr	r3, [pc, #12]	; (fa0 <i2c_m_async_read+0x2c>)
     f92:	4798      	blx	r3
}
     f94:	2800      	cmp	r0, #0
     f96:	bf08      	it	eq
     f98:	4620      	moveq	r0, r4
     f9a:	b004      	add	sp, #16
     f9c:	bd10      	pop	{r4, pc}
     f9e:	bf00      	nop
     fa0:	00002341 	.word	0x00002341

00000fa4 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
     fa4:	b570      	push	{r4, r5, r6, lr}
     fa6:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     fa8:	4604      	mov	r4, r0
     faa:	2289      	movs	r2, #137	; 0x89
     fac:	490f      	ldr	r1, [pc, #60]	; (fec <i2c_m_async_init+0x48>)
     fae:	3000      	adds	r0, #0
     fb0:	bf18      	it	ne
     fb2:	2001      	movne	r0, #1
     fb4:	4b0e      	ldr	r3, [pc, #56]	; (ff0 <i2c_m_async_init+0x4c>)
     fb6:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
     fb8:	4629      	mov	r1, r5
     fba:	4620      	mov	r0, r4
     fbc:	4b0d      	ldr	r3, [pc, #52]	; (ff4 <i2c_m_async_init+0x50>)
     fbe:	4798      	blx	r3
	if (init_status) {
     fc0:	4605      	mov	r5, r0
     fc2:	b108      	cbz	r0, fc8 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
     fc4:	4628      	mov	r0, r5
     fc6:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
     fc8:	4b0b      	ldr	r3, [pc, #44]	; (ff8 <i2c_m_async_init+0x54>)
     fca:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
     fcc:	4b0b      	ldr	r3, [pc, #44]	; (ffc <i2c_m_async_init+0x58>)
     fce:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
     fd0:	4a0b      	ldr	r2, [pc, #44]	; (1000 <i2c_m_async_init+0x5c>)
     fd2:	2101      	movs	r1, #1
     fd4:	4620      	mov	r0, r4
     fd6:	4e0b      	ldr	r6, [pc, #44]	; (1004 <i2c_m_async_init+0x60>)
     fd8:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
     fda:	4a0b      	ldr	r2, [pc, #44]	; (1008 <i2c_m_async_init+0x64>)
     fdc:	2102      	movs	r1, #2
     fde:	4620      	mov	r0, r4
     fe0:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
     fe2:	4a0a      	ldr	r2, [pc, #40]	; (100c <i2c_m_async_init+0x68>)
     fe4:	2100      	movs	r1, #0
     fe6:	4620      	mov	r0, r4
     fe8:	47b0      	blx	r6
	return ERR_NONE;
     fea:	e7eb      	b.n	fc4 <i2c_m_async_init+0x20>
     fec:	000053cc 	.word	0x000053cc
     ff0:	000018ad 	.word	0x000018ad
     ff4:	000022c1 	.word	0x000022c1
     ff8:	00000f75 	.word	0x00000f75
     ffc:	00000f45 	.word	0x00000f45
    1000:	00000f0d 	.word	0x00000f0d
    1004:	00002471 	.word	0x00002471
    1008:	00000f1f 	.word	0x00000f1f
    100c:	00000f31 	.word	0x00000f31

00001010 <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    1010:	b570      	push	{r4, r5, r6, lr}
	int32_t rc;

	ASSERT(i2c);
    1012:	4604      	mov	r4, r0
    1014:	22b9      	movs	r2, #185	; 0xb9
    1016:	490d      	ldr	r1, [pc, #52]	; (104c <i2c_m_async_enable+0x3c>)
    1018:	3000      	adds	r0, #0
    101a:	bf18      	it	ne
    101c:	2001      	movne	r0, #1
    101e:	4b0c      	ldr	r3, [pc, #48]	; (1050 <i2c_m_async_enable+0x40>)
    1020:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    1022:	4620      	mov	r0, r4
    1024:	4b0b      	ldr	r3, [pc, #44]	; (1054 <i2c_m_async_enable+0x44>)
    1026:	4798      	blx	r3
	if (rc == ERR_NONE) {
    1028:	4605      	mov	r5, r0
    102a:	b108      	cbz	r0, 1030 <i2c_m_async_enable+0x20>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
	}
	return rc;
}
    102c:	4628      	mov	r0, r5
    102e:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    1030:	2201      	movs	r2, #1
    1032:	4611      	mov	r1, r2
    1034:	4620      	mov	r0, r4
    1036:	4e08      	ldr	r6, [pc, #32]	; (1058 <i2c_m_async_enable+0x48>)
    1038:	47b0      	blx	r6
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    103a:	2201      	movs	r2, #1
    103c:	2102      	movs	r1, #2
    103e:	4620      	mov	r0, r4
    1040:	47b0      	blx	r6
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    1042:	2201      	movs	r2, #1
    1044:	2100      	movs	r1, #0
    1046:	4620      	mov	r0, r4
    1048:	47b0      	blx	r6
	return rc;
    104a:	e7ef      	b.n	102c <i2c_m_async_enable+0x1c>
    104c:	000053cc 	.word	0x000053cc
    1050:	000018ad 	.word	0x000018ad
    1054:	000021d9 	.word	0x000021d9
    1058:	000024a1 	.word	0x000024a1

0000105c <i2c_m_async_disable>:

/**
 * \brief Async version of i2c disable
 */
int32_t i2c_m_async_disable(struct i2c_m_async_desc *const i2c)
{
    105c:	b570      	push	{r4, r5, r6, lr}
	int32_t rc;

	ASSERT(i2c);
    105e:	4604      	mov	r4, r0
    1060:	22cb      	movs	r2, #203	; 0xcb
    1062:	490d      	ldr	r1, [pc, #52]	; (1098 <i2c_m_async_disable+0x3c>)
    1064:	3000      	adds	r0, #0
    1066:	bf18      	it	ne
    1068:	2001      	movne	r0, #1
    106a:	4b0c      	ldr	r3, [pc, #48]	; (109c <i2c_m_async_disable+0x40>)
    106c:	4798      	blx	r3

	rc = _i2c_m_async_disable(&i2c->device);
    106e:	4620      	mov	r0, r4
    1070:	4b0b      	ldr	r3, [pc, #44]	; (10a0 <i2c_m_async_disable+0x44>)
    1072:	4798      	blx	r3
	if (rc == ERR_NONE) {
    1074:	4605      	mov	r5, r0
    1076:	b108      	cbz	r0, 107c <i2c_m_async_disable+0x20>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, false);
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, false);
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, false);
	}
	return rc;
}
    1078:	4628      	mov	r0, r5
    107a:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, false);
    107c:	2200      	movs	r2, #0
    107e:	2101      	movs	r1, #1
    1080:	4620      	mov	r0, r4
    1082:	4e08      	ldr	r6, [pc, #32]	; (10a4 <i2c_m_async_disable+0x48>)
    1084:	47b0      	blx	r6
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, false);
    1086:	2200      	movs	r2, #0
    1088:	2102      	movs	r1, #2
    108a:	4620      	mov	r0, r4
    108c:	47b0      	blx	r6
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, false);
    108e:	2200      	movs	r2, #0
    1090:	4611      	mov	r1, r2
    1092:	4620      	mov	r0, r4
    1094:	47b0      	blx	r6
	return rc;
    1096:	e7ef      	b.n	1078 <i2c_m_async_disable+0x1c>
    1098:	000053cc 	.word	0x000053cc
    109c:	000018ad 	.word	0x000018ad
    10a0:	00002251 	.word	0x00002251
    10a4:	000024a1 	.word	0x000024a1

000010a8 <i2c_m_async_set_slaveaddr>:
/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    10a8:	f3c1 0109 	ubfx	r1, r1, #0, #10
    10ac:	f402 6280 	and.w	r2, r2, #1024	; 0x400
    10b0:	430a      	orrs	r2, r1
    10b2:	8782      	strh	r2, [r0, #60]	; 0x3c
}
    10b4:	4610      	mov	r0, r2
    10b6:	4770      	bx	lr

000010b8 <i2c_m_async_register_callback>:
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
	switch (type) {
    10b8:	2901      	cmp	r1, #1
    10ba:	d008      	beq.n	10ce <i2c_m_async_register_callback+0x16>
    10bc:	b121      	cbz	r1, 10c8 <i2c_m_async_register_callback+0x10>
    10be:	2902      	cmp	r1, #2
    10c0:	d008      	beq.n	10d4 <i2c_m_async_register_callback+0x1c>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		return ERR_INVALID_ARG;
    10c2:	f06f 000c 	mvn.w	r0, #12
	}
	return I2C_OK;
}
    10c6:	4770      	bx	lr
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    10c8:	6302      	str	r2, [r0, #48]	; 0x30
	return I2C_OK;
    10ca:	2000      	movs	r0, #0
		break;
    10cc:	4770      	bx	lr
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    10ce:	6342      	str	r2, [r0, #52]	; 0x34
	return I2C_OK;
    10d0:	2000      	movs	r0, #0
		break;
    10d2:	4770      	bx	lr
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    10d4:	6382      	str	r2, [r0, #56]	; 0x38
	return I2C_OK;
    10d6:	2000      	movs	r0, #0
		break;
    10d8:	4770      	bx	lr
	...

000010dc <i2c_m_async_send_stop>:

/**
 * \brief Send stop condition
 */
int32_t i2c_m_async_send_stop(struct i2c_m_async_desc *const i2c)
{
    10dc:	b508      	push	{r3, lr}
	return _i2c_m_async_send_stop(&i2c->device);
    10de:	4b01      	ldr	r3, [pc, #4]	; (10e4 <i2c_m_async_send_stop+0x8>)
    10e0:	4798      	blx	r3
}
    10e2:	bd08      	pop	{r3, pc}
    10e4:	0000248b 	.word	0x0000248b

000010e8 <i2c_m_async_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
    10e8:	3028      	adds	r0, #40	; 0x28
    10ea:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
    10ec:	2000      	movs	r0, #0
    10ee:	4770      	bx	lr

000010f0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    10f0:	b538      	push	{r3, r4, r5, lr}
    10f2:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    10f4:	4604      	mov	r4, r0
    10f6:	b1b8      	cbz	r0, 1128 <spi_m_sync_init+0x38>
    10f8:	1c08      	adds	r0, r1, #0
    10fa:	bf18      	it	ne
    10fc:	2001      	movne	r0, #1
    10fe:	2240      	movs	r2, #64	; 0x40
    1100:	490a      	ldr	r1, [pc, #40]	; (112c <spi_m_sync_init+0x3c>)
    1102:	4b0b      	ldr	r3, [pc, #44]	; (1130 <spi_m_sync_init+0x40>)
    1104:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1106:	4620      	mov	r0, r4
    1108:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    110c:	4629      	mov	r1, r5
    110e:	4b09      	ldr	r3, [pc, #36]	; (1134 <spi_m_sync_init+0x44>)
    1110:	4798      	blx	r3

	if (rc < 0) {
    1112:	2800      	cmp	r0, #0
    1114:	db07      	blt.n	1126 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    1116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    111a:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    111c:	4b06      	ldr	r3, [pc, #24]	; (1138 <spi_m_sync_init+0x48>)
    111e:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    1120:	4b06      	ldr	r3, [pc, #24]	; (113c <spi_m_sync_init+0x4c>)
    1122:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    1124:	2000      	movs	r0, #0
}
    1126:	bd38      	pop	{r3, r4, r5, pc}
    1128:	2000      	movs	r0, #0
    112a:	e7e8      	b.n	10fe <spi_m_sync_init+0xe>
    112c:	000053ec 	.word	0x000053ec
    1130:	000018ad 	.word	0x000018ad
    1134:	00002579 	.word	0x00002579
    1138:	000011bd 	.word	0x000011bd
    113c:	00001181 	.word	0x00001181

00001140 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1140:	b530      	push	{r4, r5, lr}
    1142:	b085      	sub	sp, #20
    1144:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1146:	4605      	mov	r5, r0
    1148:	b190      	cbz	r0, 1170 <spi_m_sync_transfer+0x30>
    114a:	1c08      	adds	r0, r1, #0
    114c:	bf18      	it	ne
    114e:	2001      	movne	r0, #1
    1150:	22b3      	movs	r2, #179	; 0xb3
    1152:	4908      	ldr	r1, [pc, #32]	; (1174 <spi_m_sync_transfer+0x34>)
    1154:	4b08      	ldr	r3, [pc, #32]	; (1178 <spi_m_sync_transfer+0x38>)
    1156:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1158:	6823      	ldr	r3, [r4, #0]
    115a:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    115c:	6863      	ldr	r3, [r4, #4]
    115e:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    1160:	68a3      	ldr	r3, [r4, #8]
    1162:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1164:	a901      	add	r1, sp, #4
    1166:	1d28      	adds	r0, r5, #4
    1168:	4b04      	ldr	r3, [pc, #16]	; (117c <spi_m_sync_transfer+0x3c>)
    116a:	4798      	blx	r3
}
    116c:	b005      	add	sp, #20
    116e:	bd30      	pop	{r4, r5, pc}
    1170:	2000      	movs	r0, #0
    1172:	e7ed      	b.n	1150 <spi_m_sync_transfer+0x10>
    1174:	000053ec 	.word	0x000053ec
    1178:	000018ad 	.word	0x000018ad
    117c:	00002709 	.word	0x00002709

00001180 <_spi_m_sync_io_write>:
{
    1180:	b570      	push	{r4, r5, r6, lr}
    1182:	b084      	sub	sp, #16
    1184:	460e      	mov	r6, r1
    1186:	4615      	mov	r5, r2
	ASSERT(io);
    1188:	4604      	mov	r4, r0
    118a:	22a3      	movs	r2, #163	; 0xa3
    118c:	4908      	ldr	r1, [pc, #32]	; (11b0 <_spi_m_sync_io_write+0x30>)
    118e:	3000      	adds	r0, #0
    1190:	bf18      	it	ne
    1192:	2001      	movne	r0, #1
    1194:	4b07      	ldr	r3, [pc, #28]	; (11b4 <_spi_m_sync_io_write+0x34>)
    1196:	4798      	blx	r3
	xfer.rxbuf = 0;
    1198:	2300      	movs	r3, #0
    119a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    119c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    119e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    11a0:	a901      	add	r1, sp, #4
    11a2:	f1a4 000c 	sub.w	r0, r4, #12
    11a6:	4b04      	ldr	r3, [pc, #16]	; (11b8 <_spi_m_sync_io_write+0x38>)
    11a8:	4798      	blx	r3
}
    11aa:	b004      	add	sp, #16
    11ac:	bd70      	pop	{r4, r5, r6, pc}
    11ae:	bf00      	nop
    11b0:	000053ec 	.word	0x000053ec
    11b4:	000018ad 	.word	0x000018ad
    11b8:	00001141 	.word	0x00001141

000011bc <_spi_m_sync_io_read>:
{
    11bc:	b570      	push	{r4, r5, r6, lr}
    11be:	b084      	sub	sp, #16
    11c0:	460e      	mov	r6, r1
    11c2:	4615      	mov	r5, r2
	ASSERT(io);
    11c4:	4604      	mov	r4, r0
    11c6:	2287      	movs	r2, #135	; 0x87
    11c8:	4908      	ldr	r1, [pc, #32]	; (11ec <_spi_m_sync_io_read+0x30>)
    11ca:	3000      	adds	r0, #0
    11cc:	bf18      	it	ne
    11ce:	2001      	movne	r0, #1
    11d0:	4b07      	ldr	r3, [pc, #28]	; (11f0 <_spi_m_sync_io_read+0x34>)
    11d2:	4798      	blx	r3
	xfer.rxbuf = buf;
    11d4:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    11d6:	2300      	movs	r3, #0
    11d8:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    11da:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    11dc:	a901      	add	r1, sp, #4
    11de:	f1a4 000c 	sub.w	r0, r4, #12
    11e2:	4b04      	ldr	r3, [pc, #16]	; (11f4 <_spi_m_sync_io_read+0x38>)
    11e4:	4798      	blx	r3
}
    11e6:	b004      	add	sp, #16
    11e8:	bd70      	pop	{r4, r5, r6, pc}
    11ea:	bf00      	nop
    11ec:	000053ec 	.word	0x000053ec
    11f0:	000018ad 	.word	0x000018ad
    11f4:	00001141 	.word	0x00001141

000011f8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    11f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11fa:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    11fc:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    11fe:	b12f      	cbz	r7, 120c <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1200:	688d      	ldr	r5, [r1, #8]
    1202:	463c      	mov	r4, r7
    1204:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1206:	f1c2 0e01 	rsb	lr, r2, #1
    120a:	e00b      	b.n	1224 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    120c:	4b0e      	ldr	r3, [pc, #56]	; (1248 <timer_add_timer_task+0x50>)
    120e:	4798      	blx	r3
		return;
    1210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1212:	4473      	add	r3, lr
    1214:	68a0      	ldr	r0, [r4, #8]
    1216:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1218:	42ab      	cmp	r3, r5
    121a:	d20a      	bcs.n	1232 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    121c:	6823      	ldr	r3, [r4, #0]
    121e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1220:	b153      	cbz	r3, 1238 <timer_add_timer_task+0x40>
    1222:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1224:	6863      	ldr	r3, [r4, #4]
    1226:	4293      	cmp	r3, r2
    1228:	d8f3      	bhi.n	1212 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    122a:	68a0      	ldr	r0, [r4, #8]
    122c:	4403      	add	r3, r0
    122e:	1a9b      	subs	r3, r3, r2
    1230:	e7f2      	b.n	1218 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1232:	42a7      	cmp	r7, r4
    1234:	d004      	beq.n	1240 <timer_add_timer_task+0x48>
    1236:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1238:	4620      	mov	r0, r4
    123a:	4b04      	ldr	r3, [pc, #16]	; (124c <timer_add_timer_task+0x54>)
    123c:	4798      	blx	r3
    123e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1240:	4660      	mov	r0, ip
    1242:	4b01      	ldr	r3, [pc, #4]	; (1248 <timer_add_timer_task+0x50>)
    1244:	4798      	blx	r3
    1246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1248:	000018d5 	.word	0x000018d5
    124c:	00001901 	.word	0x00001901

00001250 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1254:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1256:	6907      	ldr	r7, [r0, #16]
    1258:	3701      	adds	r7, #1
    125a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    125c:	7e03      	ldrb	r3, [r0, #24]
    125e:	f013 0f01 	tst.w	r3, #1
    1262:	d113      	bne.n	128c <timer_process_counted+0x3c>
    1264:	7e03      	ldrb	r3, [r0, #24]
    1266:	f013 0f02 	tst.w	r3, #2
    126a:	d10f      	bne.n	128c <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    126c:	b354      	cbz	r4, 12c4 <timer_process_counted+0x74>
    126e:	6863      	ldr	r3, [r4, #4]
    1270:	1afb      	subs	r3, r7, r3
    1272:	68a2      	ldr	r2, [r4, #8]
    1274:	4293      	cmp	r3, r2
    1276:	d307      	bcc.n	1288 <timer_process_counted+0x38>
    1278:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    127a:	f100 0814 	add.w	r8, r0, #20
    127e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 12c8 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1282:	f8df a048 	ldr.w	sl, [pc, #72]	; 12cc <timer_process_counted+0x7c>
    1286:	e012      	b.n	12ae <timer_process_counted+0x5e>
    1288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    128c:	7e03      	ldrb	r3, [r0, #24]
    128e:	f043 0302 	orr.w	r3, r3, #2
    1292:	7603      	strb	r3, [r0, #24]
		return;
    1294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1298:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    129a:	68e3      	ldr	r3, [r4, #12]
    129c:	4620      	mov	r0, r4
    129e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    12a0:	b185      	cbz	r5, 12c4 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    12a2:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    12a4:	686b      	ldr	r3, [r5, #4]
    12a6:	1afb      	subs	r3, r7, r3
    12a8:	68aa      	ldr	r2, [r5, #8]
    12aa:	4293      	cmp	r3, r2
    12ac:	d30a      	bcc.n	12c4 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    12ae:	4640      	mov	r0, r8
    12b0:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    12b2:	7c23      	ldrb	r3, [r4, #16]
    12b4:	2b01      	cmp	r3, #1
    12b6:	d1ef      	bne.n	1298 <timer_process_counted+0x48>
			tmp->time_label = time;
    12b8:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    12ba:	463a      	mov	r2, r7
    12bc:	4621      	mov	r1, r4
    12be:	4640      	mov	r0, r8
    12c0:	47d0      	blx	sl
    12c2:	e7e9      	b.n	1298 <timer_process_counted+0x48>
    12c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12c8:	00001949 	.word	0x00001949
    12cc:	000011f9 	.word	0x000011f9

000012d0 <timer_init>:
{
    12d0:	b538      	push	{r3, r4, r5, lr}
    12d2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    12d4:	4604      	mov	r4, r0
    12d6:	b178      	cbz	r0, 12f8 <timer_init+0x28>
    12d8:	1c08      	adds	r0, r1, #0
    12da:	bf18      	it	ne
    12dc:	2001      	movne	r0, #1
    12de:	223b      	movs	r2, #59	; 0x3b
    12e0:	4906      	ldr	r1, [pc, #24]	; (12fc <timer_init+0x2c>)
    12e2:	4b07      	ldr	r3, [pc, #28]	; (1300 <timer_init+0x30>)
    12e4:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    12e6:	4629      	mov	r1, r5
    12e8:	4620      	mov	r0, r4
    12ea:	4b06      	ldr	r3, [pc, #24]	; (1304 <timer_init+0x34>)
    12ec:	4798      	blx	r3
	descr->time                           = 0;
    12ee:	2000      	movs	r0, #0
    12f0:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    12f2:	4b05      	ldr	r3, [pc, #20]	; (1308 <timer_init+0x38>)
    12f4:	6023      	str	r3, [r4, #0]
}
    12f6:	bd38      	pop	{r3, r4, r5, pc}
    12f8:	2000      	movs	r0, #0
    12fa:	e7f0      	b.n	12de <timer_init+0xe>
    12fc:	00005408 	.word	0x00005408
    1300:	000018ad 	.word	0x000018ad
    1304:	00001d61 	.word	0x00001d61
    1308:	00001251 	.word	0x00001251

0000130c <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    130c:	4b0f      	ldr	r3, [pc, #60]	; (134c <_usb_d_find_ep+0x40>)
    130e:	7859      	ldrb	r1, [r3, #1]
    1310:	4288      	cmp	r0, r1
    1312:	d018      	beq.n	1346 <_usb_d_find_ep+0x3a>
{
    1314:	b430      	push	{r4, r5}
    1316:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1318:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    131a:	f000 050f 	and.w	r5, r0, #15
    131e:	e007      	b.n	1330 <_usb_d_find_ep+0x24>
    1320:	3301      	adds	r3, #1
    1322:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1324:	2b04      	cmp	r3, #4
    1326:	d009      	beq.n	133c <_usb_d_find_ep+0x30>
    1328:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    132a:	7851      	ldrb	r1, [r2, #1]
    132c:	4281      	cmp	r1, r0
    132e:	d007      	beq.n	1340 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1330:	7814      	ldrb	r4, [r2, #0]
    1332:	2c00      	cmp	r4, #0
    1334:	d1f4      	bne.n	1320 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1336:	428d      	cmp	r5, r1
    1338:	d1f2      	bne.n	1320 <_usb_d_find_ep+0x14>
    133a:	e001      	b.n	1340 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    133c:	f04f 33ff 	mov.w	r3, #4294967295
}
    1340:	4618      	mov	r0, r3
    1342:	bc30      	pop	{r4, r5}
    1344:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1346:	2300      	movs	r3, #0
}
    1348:	4618      	mov	r0, r3
    134a:	4770      	bx	lr
    134c:	20000574 	.word	0x20000574

00001350 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1350:	2000      	movs	r0, #0
    1352:	4770      	bx	lr

00001354 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1354:	b538      	push	{r3, r4, r5, lr}
    1356:	4604      	mov	r4, r0
    1358:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    135a:	4b09      	ldr	r3, [pc, #36]	; (1380 <usb_d_cb_trans_more+0x2c>)
    135c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    135e:	4b09      	ldr	r3, [pc, #36]	; (1384 <usb_d_cb_trans_more+0x30>)
    1360:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1364:	789b      	ldrb	r3, [r3, #2]
    1366:	2b03      	cmp	r3, #3
    1368:	d001      	beq.n	136e <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    136a:	2000      	movs	r0, #0
}
    136c:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    136e:	4b05      	ldr	r3, [pc, #20]	; (1384 <usb_d_cb_trans_more+0x30>)
    1370:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1374:	6983      	ldr	r3, [r0, #24]
    1376:	4629      	mov	r1, r5
    1378:	4620      	mov	r0, r4
    137a:	4798      	blx	r3
    137c:	bd38      	pop	{r3, r4, r5, pc}
    137e:	bf00      	nop
    1380:	0000130d 	.word	0x0000130d
    1384:	20000574 	.word	0x20000574

00001388 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1388:	b5f0      	push	{r4, r5, r6, r7, lr}
    138a:	b085      	sub	sp, #20
    138c:	4606      	mov	r6, r0
    138e:	460d      	mov	r5, r1
    1390:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1392:	4b4d      	ldr	r3, [pc, #308]	; (14c8 <_usb_d_cb_trans_done+0x140>)
    1394:	4798      	blx	r3
    1396:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1398:	2d00      	cmp	r5, #0
    139a:	d15b      	bne.n	1454 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    139c:	4a4b      	ldr	r2, [pc, #300]	; (14cc <_usb_d_cb_trans_done+0x144>)
    139e:	0143      	lsls	r3, r0, #5
    13a0:	18d1      	adds	r1, r2, r3
    13a2:	2000      	movs	r0, #0
    13a4:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    13a6:	5cd3      	ldrb	r3, [r2, r3]
    13a8:	b173      	cbz	r3, 13c8 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    13aa:	4b48      	ldr	r3, [pc, #288]	; (14cc <_usb_d_cb_trans_done+0x144>)
    13ac:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    13b0:	2201      	movs	r2, #1
    13b2:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    13b4:	4845      	ldr	r0, [pc, #276]	; (14cc <_usb_d_cb_trans_done+0x144>)
    13b6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    13ba:	69c3      	ldr	r3, [r0, #28]
    13bc:	463a      	mov	r2, r7
    13be:	78c1      	ldrb	r1, [r0, #3]
    13c0:	4630      	mov	r0, r6
    13c2:	4798      	blx	r3
}
    13c4:	b005      	add	sp, #20
    13c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    13c8:	788b      	ldrb	r3, [r1, #2]
    13ca:	2b03      	cmp	r3, #3
    13cc:	d00b      	beq.n	13e6 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    13ce:	483f      	ldr	r0, [pc, #252]	; (14cc <_usb_d_cb_trans_done+0x144>)
    13d0:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    13d4:	4614      	mov	r4, r2
    13d6:	69d3      	ldr	r3, [r2, #28]
    13d8:	320c      	adds	r2, #12
    13da:	2100      	movs	r1, #0
    13dc:	7860      	ldrb	r0, [r4, #1]
    13de:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    13e0:	2302      	movs	r3, #2
    13e2:	70a3      	strb	r3, [r4, #2]
    13e4:	e7ee      	b.n	13c4 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    13e6:	460b      	mov	r3, r1
    13e8:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    13ec:	460a      	mov	r2, r1
    13ee:	69ce      	ldr	r6, [r1, #28]
    13f0:	320c      	adds	r2, #12
    13f2:	2101      	movs	r1, #1
    13f4:	7858      	ldrb	r0, [r3, #1]
    13f6:	47b0      	blx	r6
		if (err) {
    13f8:	b1a0      	cbz	r0, 1424 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    13fa:	4b34      	ldr	r3, [pc, #208]	; (14cc <_usb_d_cb_trans_done+0x144>)
    13fc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1400:	2205      	movs	r2, #5
    1402:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1404:	2202      	movs	r2, #2
    1406:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1408:	2d00      	cmp	r5, #0
    140a:	db09      	blt.n	1420 <_usb_d_cb_trans_done+0x98>
    140c:	482f      	ldr	r0, [pc, #188]	; (14cc <_usb_d_cb_trans_done+0x144>)
    140e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1412:	7840      	ldrb	r0, [r0, #1]
    1414:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    1418:	2101      	movs	r1, #1
    141a:	4b2d      	ldr	r3, [pc, #180]	; (14d0 <_usb_d_cb_trans_done+0x148>)
    141c:	4798      	blx	r3
    141e:	e7d1      	b.n	13c4 <_usb_d_cb_trans_done+0x3c>
    1420:	7858      	ldrb	r0, [r3, #1]
    1422:	e7f9      	b.n	1418 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1424:	4829      	ldr	r0, [pc, #164]	; (14cc <_usb_d_cb_trans_done+0x144>)
    1426:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    142a:	2304      	movs	r3, #4
    142c:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    142e:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    1430:	2200      	movs	r2, #0
    1432:	9201      	str	r2, [sp, #4]
    1434:	9202      	str	r2, [sp, #8]
    1436:	4295      	cmp	r5, r2
    1438:	bfac      	ite	ge
    143a:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    143e:	f003 030f 	andlt.w	r3, r3, #15
    1442:	f88d 300c 	strb.w	r3, [sp, #12]
    1446:	2301      	movs	r3, #1
    1448:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    144c:	a801      	add	r0, sp, #4
    144e:	4b21      	ldr	r3, [pc, #132]	; (14d4 <_usb_d_cb_trans_done+0x14c>)
    1450:	4798      	blx	r3
    1452:	e7b7      	b.n	13c4 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    1454:	2d01      	cmp	r5, #1
    1456:	d00a      	beq.n	146e <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    1458:	2d02      	cmp	r5, #2
    145a:	d01c      	beq.n	1496 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    145c:	2d03      	cmp	r5, #3
    145e:	d02a      	beq.n	14b6 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1460:	4b1a      	ldr	r3, [pc, #104]	; (14cc <_usb_d_cb_trans_done+0x144>)
    1462:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1466:	2206      	movs	r2, #6
    1468:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    146a:	70da      	strb	r2, [r3, #3]
    146c:	e7a2      	b.n	13b4 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    146e:	4a17      	ldr	r2, [pc, #92]	; (14cc <_usb_d_cb_trans_done+0x144>)
    1470:	0143      	lsls	r3, r0, #5
    1472:	18d1      	adds	r1, r2, r3
    1474:	2002      	movs	r0, #2
    1476:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1478:	5cd3      	ldrb	r3, [r2, r3]
    147a:	b12b      	cbz	r3, 1488 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    147c:	4b13      	ldr	r3, [pc, #76]	; (14cc <_usb_d_cb_trans_done+0x144>)
    147e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1482:	2205      	movs	r2, #5
    1484:	709a      	strb	r2, [r3, #2]
    1486:	e795      	b.n	13b4 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1488:	460b      	mov	r3, r1
    148a:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    148c:	2100      	movs	r1, #0
    148e:	4630      	mov	r0, r6
    1490:	4b0f      	ldr	r3, [pc, #60]	; (14d0 <_usb_d_cb_trans_done+0x148>)
    1492:	4798      	blx	r3
    1494:	e78e      	b.n	13b4 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1496:	4a0d      	ldr	r2, [pc, #52]	; (14cc <_usb_d_cb_trans_done+0x144>)
    1498:	0143      	lsls	r3, r0, #5
    149a:	18d1      	adds	r1, r2, r3
    149c:	2004      	movs	r0, #4
    149e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    14a0:	5cd3      	ldrb	r3, [r2, r3]
    14a2:	b12b      	cbz	r3, 14b0 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    14a4:	4b09      	ldr	r3, [pc, #36]	; (14cc <_usb_d_cb_trans_done+0x144>)
    14a6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    14aa:	2201      	movs	r2, #1
    14ac:	709a      	strb	r2, [r3, #2]
    14ae:	e781      	b.n	13b4 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    14b0:	2302      	movs	r3, #2
    14b2:	708b      	strb	r3, [r1, #2]
			return;
    14b4:	e786      	b.n	13c4 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    14b6:	4b05      	ldr	r3, [pc, #20]	; (14cc <_usb_d_cb_trans_done+0x144>)
    14b8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    14bc:	2200      	movs	r2, #0
    14be:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    14c0:	2205      	movs	r2, #5
    14c2:	70da      	strb	r2, [r3, #3]
    14c4:	e776      	b.n	13b4 <_usb_d_cb_trans_done+0x2c>
    14c6:	bf00      	nop
    14c8:	0000130d 	.word	0x0000130d
    14cc:	20000574 	.word	0x20000574
    14d0:	000036d9 	.word	0x000036d9
    14d4:	00003881 	.word	0x00003881

000014d8 <usb_d_cb_trans_setup>:
{
    14d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14dc:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    14de:	4b1c      	ldr	r3, [pc, #112]	; (1550 <usb_d_cb_trans_setup+0x78>)
    14e0:	4798      	blx	r3
    14e2:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    14e4:	4c1b      	ldr	r4, [pc, #108]	; (1554 <usb_d_cb_trans_setup+0x7c>)
    14e6:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    14ea:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    14ec:	4621      	mov	r1, r4
    14ee:	4628      	mov	r0, r5
    14f0:	4b19      	ldr	r3, [pc, #100]	; (1558 <usb_d_cb_trans_setup+0x80>)
    14f2:	4798      	blx	r3
	if (n != 8) {
    14f4:	b2c0      	uxtb	r0, r0
    14f6:	2808      	cmp	r0, #8
    14f8:	d009      	beq.n	150e <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    14fa:	2101      	movs	r1, #1
    14fc:	4628      	mov	r0, r5
    14fe:	4c17      	ldr	r4, [pc, #92]	; (155c <usb_d_cb_trans_setup+0x84>)
    1500:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1502:	2101      	movs	r1, #1
    1504:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    1508:	47a0      	blx	r4
		return;
    150a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    150e:	2100      	movs	r1, #0
    1510:	4628      	mov	r0, r5
    1512:	4f12      	ldr	r7, [pc, #72]	; (155c <usb_d_cb_trans_setup+0x84>)
    1514:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1516:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    151a:	2100      	movs	r1, #0
    151c:	4640      	mov	r0, r8
    151e:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1520:	4b0c      	ldr	r3, [pc, #48]	; (1554 <usb_d_cb_trans_setup+0x7c>)
    1522:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1526:	2201      	movs	r2, #1
    1528:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    152a:	695b      	ldr	r3, [r3, #20]
    152c:	4621      	mov	r1, r4
    152e:	4628      	mov	r0, r5
    1530:	4798      	blx	r3
    1532:	b108      	cbz	r0, 1538 <usb_d_cb_trans_setup+0x60>
    1534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1538:	4b06      	ldr	r3, [pc, #24]	; (1554 <usb_d_cb_trans_setup+0x7c>)
    153a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    153e:	2305      	movs	r3, #5
    1540:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1542:	2101      	movs	r1, #1
    1544:	4628      	mov	r0, r5
    1546:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1548:	2101      	movs	r1, #1
    154a:	4640      	mov	r0, r8
    154c:	47b8      	blx	r7
    154e:	e7f1      	b.n	1534 <usb_d_cb_trans_setup+0x5c>
    1550:	0000130d 	.word	0x0000130d
    1554:	20000574 	.word	0x20000574
    1558:	00003821 	.word	0x00003821
    155c:	000036d9 	.word	0x000036d9

00001560 <usb_d_init>:

int32_t usb_d_init(void)
{
    1560:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1562:	4b11      	ldr	r3, [pc, #68]	; (15a8 <usb_d_init+0x48>)
    1564:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1566:	2800      	cmp	r0, #0
    1568:	db1c      	blt.n	15a4 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    156a:	4c10      	ldr	r4, [pc, #64]	; (15ac <usb_d_init+0x4c>)
    156c:	2280      	movs	r2, #128	; 0x80
    156e:	2100      	movs	r1, #0
    1570:	4620      	mov	r0, r4
    1572:	4b0f      	ldr	r3, [pc, #60]	; (15b0 <usb_d_init+0x50>)
    1574:	4798      	blx	r3
    1576:	4623      	mov	r3, r4
    1578:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    157c:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    157e:	4a0d      	ldr	r2, [pc, #52]	; (15b4 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1580:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1582:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1584:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1586:	61da      	str	r2, [r3, #28]
    1588:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    158a:	4283      	cmp	r3, r0
    158c:	d1f8      	bne.n	1580 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    158e:	490a      	ldr	r1, [pc, #40]	; (15b8 <usb_d_init+0x58>)
    1590:	2000      	movs	r0, #0
    1592:	4c0a      	ldr	r4, [pc, #40]	; (15bc <usb_d_init+0x5c>)
    1594:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1596:	490a      	ldr	r1, [pc, #40]	; (15c0 <usb_d_init+0x60>)
    1598:	2001      	movs	r0, #1
    159a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    159c:	4909      	ldr	r1, [pc, #36]	; (15c4 <usb_d_init+0x64>)
    159e:	2002      	movs	r0, #2
    15a0:	47a0      	blx	r4
	return ERR_NONE;
    15a2:	2000      	movs	r0, #0
}
    15a4:	bd10      	pop	{r4, pc}
    15a6:	bf00      	nop
    15a8:	000030cd 	.word	0x000030cd
    15ac:	20000574 	.word	0x20000574
    15b0:	00004d81 	.word	0x00004d81
    15b4:	00001351 	.word	0x00001351
    15b8:	000014d9 	.word	0x000014d9
    15bc:	00003a85 	.word	0x00003a85
    15c0:	00001355 	.word	0x00001355
    15c4:	00001389 	.word	0x00001389

000015c8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    15c8:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    15ca:	4b01      	ldr	r3, [pc, #4]	; (15d0 <usb_d_register_callback+0x8>)
    15cc:	4798      	blx	r3
    15ce:	bd08      	pop	{r3, pc}
    15d0:	00003a61 	.word	0x00003a61

000015d4 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    15d4:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    15d6:	4b01      	ldr	r3, [pc, #4]	; (15dc <usb_d_enable+0x8>)
    15d8:	4798      	blx	r3
}
    15da:	bd08      	pop	{r3, pc}
    15dc:	000031c9 	.word	0x000031c9

000015e0 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    15e0:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    15e2:	4b01      	ldr	r3, [pc, #4]	; (15e8 <usb_d_attach+0x8>)
    15e4:	4798      	blx	r3
    15e6:	bd08      	pop	{r3, pc}
    15e8:	00003235 	.word	0x00003235

000015ec <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    15ec:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    15ee:	4b01      	ldr	r3, [pc, #4]	; (15f4 <usb_d_set_address+0x8>)
    15f0:	4798      	blx	r3
    15f2:	bd08      	pop	{r3, pc}
    15f4:	00003247 	.word	0x00003247

000015f8 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    15f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15fa:	4606      	mov	r6, r0
    15fc:	460c      	mov	r4, r1
    15fe:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1600:	4b0f      	ldr	r3, [pc, #60]	; (1640 <usb_d_ep_init+0x48>)
    1602:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1604:	2800      	cmp	r0, #0
    1606:	da14      	bge.n	1632 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1608:	20ff      	movs	r0, #255	; 0xff
    160a:	4b0d      	ldr	r3, [pc, #52]	; (1640 <usb_d_ep_init+0x48>)
    160c:	4798      	blx	r3
		if (ep_index < 0) {
    160e:	1e05      	subs	r5, r0, #0
    1610:	db12      	blt.n	1638 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1612:	463a      	mov	r2, r7
    1614:	4621      	mov	r1, r4
    1616:	4630      	mov	r0, r6
    1618:	4b0a      	ldr	r3, [pc, #40]	; (1644 <usb_d_ep_init+0x4c>)
    161a:	4798      	blx	r3
	if (rc < 0) {
    161c:	2800      	cmp	r0, #0
    161e:	db0d      	blt.n	163c <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1620:	4b09      	ldr	r3, [pc, #36]	; (1648 <usb_d_ep_init+0x50>)
    1622:	0168      	lsls	r0, r5, #5
    1624:	181a      	adds	r2, r3, r0
    1626:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1628:	f004 0403 	and.w	r4, r4, #3
    162c:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    162e:	2000      	movs	r0, #0
    1630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1632:	f06f 0013 	mvn.w	r0, #19
    1636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    1638:	f06f 0014 	mvn.w	r0, #20
}
    163c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    163e:	bf00      	nop
    1640:	0000130d 	.word	0x0000130d
    1644:	00003255 	.word	0x00003255
    1648:	20000574 	.word	0x20000574

0000164c <usb_d_ep0_init>:
{
    164c:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    164e:	4602      	mov	r2, r0
    1650:	2100      	movs	r1, #0
    1652:	4608      	mov	r0, r1
    1654:	4b01      	ldr	r3, [pc, #4]	; (165c <usb_d_ep0_init+0x10>)
    1656:	4798      	blx	r3
}
    1658:	bd08      	pop	{r3, pc}
    165a:	bf00      	nop
    165c:	000015f9 	.word	0x000015f9

00001660 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1660:	b538      	push	{r3, r4, r5, lr}
    1662:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1664:	4b06      	ldr	r3, [pc, #24]	; (1680 <usb_d_ep_deinit+0x20>)
    1666:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1668:	1e04      	subs	r4, r0, #0
    166a:	db07      	blt.n	167c <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    166c:	4628      	mov	r0, r5
    166e:	4b05      	ldr	r3, [pc, #20]	; (1684 <usb_d_ep_deinit+0x24>)
    1670:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1672:	4805      	ldr	r0, [pc, #20]	; (1688 <usb_d_ep_deinit+0x28>)
    1674:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1678:	23ff      	movs	r3, #255	; 0xff
    167a:	7043      	strb	r3, [r0, #1]
    167c:	bd38      	pop	{r3, r4, r5, pc}
    167e:	bf00      	nop
    1680:	0000130d 	.word	0x0000130d
    1684:	0000336d 	.word	0x0000336d
    1688:	20000574 	.word	0x20000574

0000168c <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    168c:	b538      	push	{r3, r4, r5, lr}
    168e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1690:	4b0e      	ldr	r3, [pc, #56]	; (16cc <usb_d_ep_enable+0x40>)
    1692:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1694:	1e04      	subs	r4, r0, #0
    1696:	db16      	blt.n	16c6 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1698:	0163      	lsls	r3, r4, #5
    169a:	4a0d      	ldr	r2, [pc, #52]	; (16d0 <usb_d_ep_enable+0x44>)
    169c:	5cd3      	ldrb	r3, [r2, r3]
    169e:	2b00      	cmp	r3, #0
    16a0:	bf0c      	ite	eq
    16a2:	2202      	moveq	r2, #2
    16a4:	2201      	movne	r2, #1
    16a6:	4b0a      	ldr	r3, [pc, #40]	; (16d0 <usb_d_ep_enable+0x44>)
    16a8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    16ac:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    16ae:	4628      	mov	r0, r5
    16b0:	4b08      	ldr	r3, [pc, #32]	; (16d4 <usb_d_ep_enable+0x48>)
    16b2:	4798      	blx	r3
	if (rc < 0) {
    16b4:	2800      	cmp	r0, #0
    16b6:	db00      	blt.n	16ba <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    16b8:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    16ba:	4b05      	ldr	r3, [pc, #20]	; (16d0 <usb_d_ep_enable+0x44>)
    16bc:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    16c0:	2300      	movs	r3, #0
    16c2:	70a3      	strb	r3, [r4, #2]
    16c4:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    16c6:	f06f 0011 	mvn.w	r0, #17
    16ca:	e7f5      	b.n	16b8 <usb_d_ep_enable+0x2c>
    16cc:	0000130d 	.word	0x0000130d
    16d0:	20000574 	.word	0x20000574
    16d4:	00003431 	.word	0x00003431

000016d8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    16d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    16dc:	b086      	sub	sp, #24
    16de:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    16e0:	7a07      	ldrb	r7, [r0, #8]
    16e2:	4638      	mov	r0, r7
    16e4:	4b3f      	ldr	r3, [pc, #252]	; (17e4 <usb_d_ep_transfer+0x10c>)
    16e6:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    16e8:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    16ea:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    16ee:	1e06      	subs	r6, r0, #0
    16f0:	db72      	blt.n	17d8 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    16f2:	a804      	add	r0, sp, #16
    16f4:	4b3c      	ldr	r3, [pc, #240]	; (17e8 <usb_d_ep_transfer+0x110>)
    16f6:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    16f8:	4b3c      	ldr	r3, [pc, #240]	; (17ec <usb_d_ep_transfer+0x114>)
    16fa:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    16fe:	789b      	ldrb	r3, [r3, #2]
    1700:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    1704:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1708:	b2db      	uxtb	r3, r3
    170a:	2b01      	cmp	r3, #1
    170c:	d011      	beq.n	1732 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    170e:	a804      	add	r0, sp, #16
    1710:	4b37      	ldr	r3, [pc, #220]	; (17f0 <usb_d_ep_transfer+0x118>)
    1712:	4798      	blx	r3
		switch (state) {
    1714:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1718:	b2db      	uxtb	r3, r3
    171a:	2b05      	cmp	r3, #5
    171c:	d05f      	beq.n	17de <usb_d_ep_transfer+0x106>
    171e:	2b06      	cmp	r3, #6
    1720:	d023      	beq.n	176a <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    1722:	2b00      	cmp	r3, #0
    1724:	bf0c      	ite	eq
    1726:	f06f 0012 	mvneq.w	r0, #18
    172a:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    172c:	b006      	add	sp, #24
    172e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1732:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 17ec <usb_d_ep_transfer+0x114>
    1736:	ea4f 1946 	mov.w	r9, r6, lsl #5
    173a:	eb0a 0309 	add.w	r3, sl, r9
    173e:	2203      	movs	r2, #3
    1740:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1742:	a804      	add	r0, sp, #16
    1744:	4b2a      	ldr	r3, [pc, #168]	; (17f0 <usb_d_ep_transfer+0x118>)
    1746:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1748:	f81a 3009 	ldrb.w	r3, [sl, r9]
    174c:	b183      	cbz	r3, 1770 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    174e:	7a22      	ldrb	r2, [r4, #8]
    1750:	3500      	adds	r5, #0
    1752:	bf18      	it	ne
    1754:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    1756:	6823      	ldr	r3, [r4, #0]
    1758:	9301      	str	r3, [sp, #4]
    175a:	f8cd 8008 	str.w	r8, [sp, #8]
    175e:	f017 0f80 	tst.w	r7, #128	; 0x80
    1762:	d119      	bne.n	1798 <usb_d_ep_transfer+0xc0>
    1764:	f002 030f 	and.w	r3, r2, #15
    1768:	e018      	b.n	179c <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    176a:	f06f 000f 	mvn.w	r0, #15
    176e:	e7dd      	b.n	172c <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1770:	4b1e      	ldr	r3, [pc, #120]	; (17ec <usb_d_ep_transfer+0x114>)
    1772:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1776:	7cda      	ldrb	r2, [r3, #19]
    1778:	7c9d      	ldrb	r5, [r3, #18]
    177a:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    177e:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    1780:	b9a5      	cbnz	r5, 17ac <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1782:	4b1a      	ldr	r3, [pc, #104]	; (17ec <usb_d_ep_transfer+0x114>)
    1784:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1788:	2304      	movs	r3, #4
    178a:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    178c:	2300      	movs	r3, #0
			zlp                 = true;
    178e:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1790:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1792:	6821      	ldr	r1, [r4, #0]
    1794:	9101      	str	r1, [sp, #4]
    1796:	9302      	str	r3, [sp, #8]
    1798:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    179c:	f88d 300c 	strb.w	r3, [sp, #12]
    17a0:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    17a4:	a801      	add	r0, sp, #4
    17a6:	4b13      	ldr	r3, [pc, #76]	; (17f4 <usb_d_ep_transfer+0x11c>)
    17a8:	4798      	blx	r3
	return rc;
    17aa:	e7bf      	b.n	172c <usb_d_ep_transfer+0x54>
    17ac:	4643      	mov	r3, r8
    17ae:	45a8      	cmp	r8, r5
    17b0:	bf28      	it	cs
    17b2:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    17b4:	4a0d      	ldr	r2, [pc, #52]	; (17ec <usb_d_ep_transfer+0x114>)
    17b6:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    17ba:	f996 200c 	ldrsb.w	r2, [r6, #12]
    17be:	2a00      	cmp	r2, #0
    17c0:	db05      	blt.n	17ce <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    17c2:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    17c4:	6821      	ldr	r1, [r4, #0]
    17c6:	9101      	str	r1, [sp, #4]
    17c8:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    17ca:	2500      	movs	r5, #0
    17cc:	e7ca      	b.n	1764 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    17ce:	429d      	cmp	r5, r3
    17d0:	bf94      	ite	ls
    17d2:	2500      	movls	r5, #0
    17d4:	2501      	movhi	r5, #1
    17d6:	e7db      	b.n	1790 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    17d8:	f06f 0011 	mvn.w	r0, #17
    17dc:	e7a6      	b.n	172c <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    17de:	2002      	movs	r0, #2
    17e0:	e7a4      	b.n	172c <usb_d_ep_transfer+0x54>
    17e2:	bf00      	nop
    17e4:	0000130d 	.word	0x0000130d
    17e8:	00003b21 	.word	0x00003b21
    17ec:	20000574 	.word	0x20000574
    17f0:	00003b2f 	.word	0x00003b2f
    17f4:	00003881 	.word	0x00003881

000017f8 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    17f8:	b538      	push	{r3, r4, r5, lr}
    17fa:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    17fc:	b141      	cbz	r1, 1810 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    17fe:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1800:	bf0c      	ite	eq
    1802:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1804:	2102      	movne	r1, #2
    1806:	4b13      	ldr	r3, [pc, #76]	; (1854 <usb_d_ep_halt+0x5c>)
    1808:	4798      	blx	r3
    180a:	4603      	mov	r3, r0
	}
}
    180c:	4618      	mov	r0, r3
    180e:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1810:	4b11      	ldr	r3, [pc, #68]	; (1858 <usb_d_ep_halt+0x60>)
    1812:	4798      	blx	r3
	if (ep_index < 0) {
    1814:	1e05      	subs	r5, r0, #0
    1816:	db19      	blt.n	184c <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1818:	2102      	movs	r1, #2
    181a:	4620      	mov	r0, r4
    181c:	4b0d      	ldr	r3, [pc, #52]	; (1854 <usb_d_ep_halt+0x5c>)
    181e:	4798      	blx	r3
    1820:	4603      	mov	r3, r0
    1822:	2800      	cmp	r0, #0
    1824:	d0f2      	beq.n	180c <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1826:	2100      	movs	r1, #0
    1828:	4620      	mov	r0, r4
    182a:	4b0a      	ldr	r3, [pc, #40]	; (1854 <usb_d_ep_halt+0x5c>)
    182c:	4798      	blx	r3
		if (rc < 0) {
    182e:	1e03      	subs	r3, r0, #0
    1830:	dbec      	blt.n	180c <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1832:	4b0a      	ldr	r3, [pc, #40]	; (185c <usb_d_ep_halt+0x64>)
    1834:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1838:	2201      	movs	r2, #1
    183a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    183c:	2103      	movs	r1, #3
    183e:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1840:	69db      	ldr	r3, [r3, #28]
    1842:	2200      	movs	r2, #0
    1844:	4620      	mov	r0, r4
    1846:	4798      	blx	r3
	return ERR_NONE;
    1848:	2300      	movs	r3, #0
    184a:	e7df      	b.n	180c <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    184c:	f06f 0311 	mvn.w	r3, #17
    1850:	e7dc      	b.n	180c <usb_d_ep_halt+0x14>
    1852:	bf00      	nop
    1854:	000036d9 	.word	0x000036d9
    1858:	0000130d 	.word	0x0000130d
    185c:	20000574 	.word	0x20000574

00001860 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1860:	b538      	push	{r3, r4, r5, lr}
    1862:	460d      	mov	r5, r1
    1864:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1866:	4b0e      	ldr	r3, [pc, #56]	; (18a0 <usb_d_ep_register_callback+0x40>)
    1868:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    186a:	4b0e      	ldr	r3, [pc, #56]	; (18a4 <usb_d_ep_register_callback+0x44>)
    186c:	2c00      	cmp	r4, #0
    186e:	bf08      	it	eq
    1870:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    1872:	2800      	cmp	r0, #0
    1874:	db13      	blt.n	189e <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    1876:	2d01      	cmp	r5, #1
    1878:	d008      	beq.n	188c <usb_d_ep_register_callback+0x2c>
    187a:	b115      	cbz	r5, 1882 <usb_d_ep_register_callback+0x22>
    187c:	2d02      	cmp	r5, #2
    187e:	d00a      	beq.n	1896 <usb_d_ep_register_callback+0x36>
    1880:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    1882:	4b09      	ldr	r3, [pc, #36]	; (18a8 <usb_d_ep_register_callback+0x48>)
    1884:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1888:	6144      	str	r4, [r0, #20]
		break;
    188a:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    188c:	4b06      	ldr	r3, [pc, #24]	; (18a8 <usb_d_ep_register_callback+0x48>)
    188e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1892:	6184      	str	r4, [r0, #24]
		break;
    1894:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1896:	4b04      	ldr	r3, [pc, #16]	; (18a8 <usb_d_ep_register_callback+0x48>)
    1898:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    189c:	61c4      	str	r4, [r0, #28]
    189e:	bd38      	pop	{r3, r4, r5, pc}
    18a0:	0000130d 	.word	0x0000130d
    18a4:	00001351 	.word	0x00001351
    18a8:	20000574 	.word	0x20000574

000018ac <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    18ac:	b900      	cbnz	r0, 18b0 <assert+0x4>
		__asm("BKPT #0");
    18ae:	be00      	bkpt	0x0000
    18b0:	4770      	bx	lr

000018b2 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    18b2:	6803      	ldr	r3, [r0, #0]
    18b4:	b14b      	cbz	r3, 18ca <is_list_element+0x18>
		if (it == element) {
    18b6:	428b      	cmp	r3, r1
    18b8:	d009      	beq.n	18ce <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    18ba:	681b      	ldr	r3, [r3, #0]
    18bc:	b11b      	cbz	r3, 18c6 <is_list_element+0x14>
		if (it == element) {
    18be:	4299      	cmp	r1, r3
    18c0:	d1fb      	bne.n	18ba <is_list_element+0x8>
			return true;
    18c2:	2001      	movs	r0, #1
		}
	}

	return false;
}
    18c4:	4770      	bx	lr
	return false;
    18c6:	2000      	movs	r0, #0
    18c8:	4770      	bx	lr
    18ca:	2000      	movs	r0, #0
    18cc:	4770      	bx	lr
			return true;
    18ce:	2001      	movs	r0, #1
    18d0:	4770      	bx	lr
	...

000018d4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    18d4:	b538      	push	{r3, r4, r5, lr}
    18d6:	4604      	mov	r4, r0
    18d8:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    18da:	4b06      	ldr	r3, [pc, #24]	; (18f4 <list_insert_as_head+0x20>)
    18dc:	4798      	blx	r3
    18de:	f080 0001 	eor.w	r0, r0, #1
    18e2:	2239      	movs	r2, #57	; 0x39
    18e4:	4904      	ldr	r1, [pc, #16]	; (18f8 <list_insert_as_head+0x24>)
    18e6:	b2c0      	uxtb	r0, r0
    18e8:	4b04      	ldr	r3, [pc, #16]	; (18fc <list_insert_as_head+0x28>)
    18ea:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    18ec:	6823      	ldr	r3, [r4, #0]
    18ee:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    18f0:	6025      	str	r5, [r4, #0]
    18f2:	bd38      	pop	{r3, r4, r5, pc}
    18f4:	000018b3 	.word	0x000018b3
    18f8:	00005420 	.word	0x00005420
    18fc:	000018ad 	.word	0x000018ad

00001900 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1900:	6803      	ldr	r3, [r0, #0]
    1902:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1904:	6001      	str	r1, [r0, #0]
    1906:	4770      	bx	lr

00001908 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    1908:	b570      	push	{r4, r5, r6, lr}
    190a:	4605      	mov	r5, r0
    190c:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    190e:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1910:	4b0a      	ldr	r3, [pc, #40]	; (193c <list_insert_at_end+0x34>)
    1912:	4798      	blx	r3
    1914:	f080 0001 	eor.w	r0, r0, #1
    1918:	224f      	movs	r2, #79	; 0x4f
    191a:	4909      	ldr	r1, [pc, #36]	; (1940 <list_insert_at_end+0x38>)
    191c:	b2c0      	uxtb	r0, r0
    191e:	4b09      	ldr	r3, [pc, #36]	; (1944 <list_insert_at_end+0x3c>)
    1920:	4798      	blx	r3

	if (!list->head) {
    1922:	682b      	ldr	r3, [r5, #0]
    1924:	b91b      	cbnz	r3, 192e <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    1926:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    1928:	6033      	str	r3, [r6, #0]
		return;
    192a:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    192c:	461c      	mov	r4, r3
	while (it->next) {
    192e:	6823      	ldr	r3, [r4, #0]
    1930:	2b00      	cmp	r3, #0
    1932:	d1fb      	bne.n	192c <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    1934:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1936:	6033      	str	r3, [r6, #0]
    1938:	bd70      	pop	{r4, r5, r6, pc}
    193a:	bf00      	nop
    193c:	000018b3 	.word	0x000018b3
    1940:	00005420 	.word	0x00005420
    1944:	000018ad 	.word	0x000018ad

00001948 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1948:	6803      	ldr	r3, [r0, #0]
    194a:	b10b      	cbz	r3, 1950 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    194c:	681a      	ldr	r2, [r3, #0]
    194e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1950:	4618      	mov	r0, r3
    1952:	4770      	bx	lr

00001954 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1954:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    1958:	fb03 f000 	mul.w	r0, r3, r0
    195c:	4770      	bx	lr
	...

00001960 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1960:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1962:	4a11      	ldr	r2, [pc, #68]	; (19a8 <_init_chip+0x48>)
    1964:	8813      	ldrh	r3, [r2, #0]
    1966:	b29b      	uxth	r3, r3
    1968:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    196a:	4b10      	ldr	r3, [pc, #64]	; (19ac <_init_chip+0x4c>)
    196c:	4798      	blx	r3
	_oscctrl_init_sources();
    196e:	4b10      	ldr	r3, [pc, #64]	; (19b0 <_init_chip+0x50>)
    1970:	4798      	blx	r3
	_mclk_init();
    1972:	4b10      	ldr	r3, [pc, #64]	; (19b4 <_init_chip+0x54>)
    1974:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1976:	4b10      	ldr	r3, [pc, #64]	; (19b8 <_init_chip+0x58>)
    1978:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    197a:	f640 70ff 	movw	r0, #4095	; 0xfff
    197e:	4b0f      	ldr	r3, [pc, #60]	; (19bc <_init_chip+0x5c>)
    1980:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    1982:	4b0f      	ldr	r3, [pc, #60]	; (19c0 <_init_chip+0x60>)
    1984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1986:	62da      	str	r2, [r3, #44]	; 0x2c
    1988:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    198c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    1990:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    1994:	f042 02ef 	orr.w	r2, r2, #239	; 0xef
    1998:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    199c:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    19a0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    19a4:	bd08      	pop	{r3, pc}
    19a6:	bf00      	nop
    19a8:	41004000 	.word	0x41004000
    19ac:	00001c3d 	.word	0x00001c3d
    19b0:	00001c5d 	.word	0x00001c5d
    19b4:	00001c31 	.word	0x00001c31
    19b8:	00001c79 	.word	0x00001c79
    19bc:	00001bb9 	.word	0x00001bb9
    19c0:	41008000 	.word	0x41008000

000019c4 <_ext_irq_init>:
	};
}

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    19c4:	4b2b      	ldr	r3, [pc, #172]	; (1a74 <_ext_irq_init+0xb0>)
    19c6:	685b      	ldr	r3, [r3, #4]
/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    19c8:	f013 0f01 	tst.w	r3, #1
    19cc:	d11f      	bne.n	1a0e <_ext_irq_init+0x4a>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    19ce:	4a29      	ldr	r2, [pc, #164]	; (1a74 <_ext_irq_init+0xb0>)
    19d0:	6853      	ldr	r3, [r2, #4]
    19d2:	f013 0f03 	tst.w	r3, #3
    19d6:	d1fb      	bne.n	19d0 <_ext_irq_init+0xc>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    19d8:	4b26      	ldr	r3, [pc, #152]	; (1a74 <_ext_irq_init+0xb0>)
    19da:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    19dc:	f013 0f02 	tst.w	r3, #2
    19e0:	d00d      	beq.n	19fe <_ext_irq_init+0x3a>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    19e2:	4a24      	ldr	r2, [pc, #144]	; (1a74 <_ext_irq_init+0xb0>)
    19e4:	7813      	ldrb	r3, [r2, #0]
    19e6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    19ea:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    19ec:	6853      	ldr	r3, [r2, #4]
    19ee:	f013 0f03 	tst.w	r3, #3
    19f2:	d1fb      	bne.n	19ec <_ext_irq_init+0x28>
    19f4:	4a1f      	ldr	r2, [pc, #124]	; (1a74 <_ext_irq_init+0xb0>)
    19f6:	6853      	ldr	r3, [r2, #4]
    19f8:	f013 0f02 	tst.w	r3, #2
    19fc:	d1fb      	bne.n	19f6 <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    19fe:	2201      	movs	r2, #1
    1a00:	4b1c      	ldr	r3, [pc, #112]	; (1a74 <_ext_irq_init+0xb0>)
    1a02:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1a04:	461a      	mov	r2, r3
    1a06:	6853      	ldr	r3, [r2, #4]
    1a08:	f013 0f03 	tst.w	r3, #3
    1a0c:	d1fb      	bne.n	1a06 <_ext_irq_init+0x42>
    1a0e:	4a19      	ldr	r2, [pc, #100]	; (1a74 <_ext_irq_init+0xb0>)
    1a10:	6853      	ldr	r3, [r2, #4]
    1a12:	f013 0f01 	tst.w	r3, #1
    1a16:	d1fb      	bne.n	1a10 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    1a18:	4a16      	ldr	r2, [pc, #88]	; (1a74 <_ext_irq_init+0xb0>)
    1a1a:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1a1c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    1a20:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1a22:	6853      	ldr	r3, [r2, #4]
    1a24:	f013 0f03 	tst.w	r3, #3
    1a28:	d1fb      	bne.n	1a22 <_ext_irq_init+0x5e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1a2a:	4b12      	ldr	r3, [pc, #72]	; (1a74 <_ext_irq_init+0xb0>)
    1a2c:	2200      	movs	r2, #0
    1a2e:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1a30:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1a32:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1a34:	2101      	movs	r1, #1
    1a36:	6319      	str	r1, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1a38:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1a3a:	2109      	movs	r1, #9
    1a3c:	61d9      	str	r1, [r3, #28]
    1a3e:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1a40:	781a      	ldrb	r2, [r3, #0]
    1a42:	f042 0202 	orr.w	r2, r2, #2
    1a46:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1a48:	461a      	mov	r2, r3
    1a4a:	6853      	ldr	r3, [r2, #4]
    1a4c:	f013 0f03 	tst.w	r3, #3
    1a50:	d1fb      	bne.n	1a4a <_ext_irq_init+0x86>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a52:	4b09      	ldr	r3, [pc, #36]	; (1a78 <_ext_irq_init+0xb4>)
    1a54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1a5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a60:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a64:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a68:	601a      	str	r2, [r3, #0]
	hri_eic_set_CTRLA_ENABLE_bit(EIC);
	NVIC_DisableIRQ(EIC_0_IRQn);
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
	NVIC_EnableIRQ(EIC_0_IRQn);

	callback = cb;
    1a6a:	4b04      	ldr	r3, [pc, #16]	; (1a7c <_ext_irq_init+0xb8>)
    1a6c:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    1a6e:	2000      	movs	r0, #0
    1a70:	4770      	bx	lr
    1a72:	bf00      	nop
    1a74:	40002800 	.word	0x40002800
    1a78:	e000e100 	.word	0xe000e100
    1a7c:	200005f4 	.word	0x200005f4

00001a80 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    1a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a84:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
    1a86:	4b30      	ldr	r3, [pc, #192]	; (1b48 <EIC_0_Handler+0xc8>)
    1a88:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    1a8a:	9201      	str	r2, [sp, #4]
	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1a8c:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1a8e:	615a      	str	r2, [r3, #20]
	ASSERT(callback);
    1a90:	4b2e      	ldr	r3, [pc, #184]	; (1b4c <EIC_0_Handler+0xcc>)
    1a92:	6818      	ldr	r0, [r3, #0]
    1a94:	22e8      	movs	r2, #232	; 0xe8
    1a96:	492e      	ldr	r1, [pc, #184]	; (1b50 <EIC_0_Handler+0xd0>)
    1a98:	3000      	adds	r0, #0
    1a9a:	bf18      	it	ne
    1a9c:	2001      	movne	r0, #1
    1a9e:	4b2d      	ldr	r3, [pc, #180]	; (1b54 <EIC_0_Handler+0xd4>)
    1aa0:	4798      	blx	r3
	while (flags) {
    1aa2:	9b01      	ldr	r3, [sp, #4]
    1aa4:	2b00      	cmp	r3, #0
    1aa6:	d04b      	beq.n	1b40 <EIC_0_Handler+0xc0>
    1aa8:	f04f 36ff 	mov.w	r6, #4294967295
				callback(pin);
    1aac:	4f27      	ldr	r7, [pc, #156]	; (1b4c <EIC_0_Handler+0xcc>)
				if (_map[middle].extint == pos) {
    1aae:	4d2a      	ldr	r5, [pc, #168]	; (1b58 <EIC_0_Handler+0xd8>)
	return ((Eic *)hw)->INTFLAG.reg;
    1ab0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1b48 <EIC_0_Handler+0xc8>
    1ab4:	e039      	b.n	1b2a <EIC_0_Handler+0xaa>
			if (INVALID_PIN_NUMBER != pin) {
    1ab6:	f1b6 3fff 	cmp.w	r6, #4294967295
    1aba:	d004      	beq.n	1ac6 <EIC_0_Handler+0x46>
    1abc:	e000      	b.n	1ac0 <EIC_0_Handler+0x40>
				if (_map[middle].extint == pos) {
    1abe:	2620      	movs	r6, #32
				callback(pin);
    1ac0:	4630      	mov	r0, r6
    1ac2:	683b      	ldr	r3, [r7, #0]
    1ac4:	4798      	blx	r3
			flags &= ~(1ul << pos);
    1ac6:	9b01      	ldr	r3, [sp, #4]
    1ac8:	2201      	movs	r2, #1
    1aca:	fa02 f404 	lsl.w	r4, r2, r4
    1ace:	ea23 0404 	bic.w	r4, r3, r4
    1ad2:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    1ad4:	9a01      	ldr	r2, [sp, #4]
    1ad6:	fa92 f3a2 	rbit	r3, r2
    1ada:	fab3 f383 	clz	r3, r3
    1ade:	2a00      	cmp	r2, #0
		while (-1 != pos) {
    1ae0:	bf08      	it	eq
    1ae2:	f04f 33ff 	moveq.w	r3, #4294967295
    1ae6:	d018      	beq.n	1b1a <EIC_0_Handler+0x9a>
				if (_map[middle].extint == pos) {
    1ae8:	461c      	mov	r4, r3
    1aea:	2b00      	cmp	r3, #0
    1aec:	d0e7      	beq.n	1abe <EIC_0_Handler+0x3e>
    1aee:	2200      	movs	r2, #0
    1af0:	4613      	mov	r3, r2
    1af2:	4610      	mov	r0, r2
    1af4:	2101      	movs	r1, #1
				if (_map[middle].extint < pos) {
    1af6:	4294      	cmp	r4, r2
					lower = middle + 1;
    1af8:	bfc7      	ittee	gt
    1afa:	3301      	addgt	r3, #1
    1afc:	b2d8      	uxtbgt	r0, r3
					upper = middle - 1;
    1afe:	f103 33ff 	addle.w	r3, r3, #4294967295
    1b02:	b2d9      	uxtble	r1, r3
			while (upper >= lower) {
    1b04:	4288      	cmp	r0, r1
    1b06:	d8d6      	bhi.n	1ab6 <EIC_0_Handler+0x36>
				middle = (upper + lower) >> 1;
    1b08:	180b      	adds	r3, r1, r0
    1b0a:	f3c3 0347 	ubfx	r3, r3, #1, #8
				if (_map[middle].extint == pos) {
    1b0e:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    1b12:	42a2      	cmp	r2, r4
    1b14:	d1ef      	bne.n	1af6 <EIC_0_Handler+0x76>
    1b16:	2620      	movs	r6, #32
    1b18:	e7d2      	b.n	1ac0 <EIC_0_Handler+0x40>
    1b1a:	f8d8 3014 	ldr.w	r3, [r8, #20]
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1b1e:	9301      	str	r3, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1b20:	9b01      	ldr	r3, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1b22:	f8c8 3014 	str.w	r3, [r8, #20]
	while (flags) {
    1b26:	9b01      	ldr	r3, [sp, #4]
    1b28:	b153      	cbz	r3, 1b40 <EIC_0_Handler+0xc0>
		pos = ffs(flags) - 1;
    1b2a:	9a01      	ldr	r2, [sp, #4]
    1b2c:	fa92 f3a2 	rbit	r3, r2
    1b30:	fab3 f383 	clz	r3, r3
    1b34:	2a00      	cmp	r2, #0
		while (-1 != pos) {
    1b36:	bf08      	it	eq
    1b38:	f04f 33ff 	moveq.w	r3, #4294967295
    1b3c:	d1d4      	bne.n	1ae8 <EIC_0_Handler+0x68>
    1b3e:	e7ec      	b.n	1b1a <EIC_0_Handler+0x9a>
	_ext_irq_handler();
}
    1b40:	b002      	add	sp, #8
    1b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b46:	bf00      	nop
    1b48:	40002800 	.word	0x40002800
    1b4c:	200005f4 	.word	0x200005f4
    1b50:	00005448 	.word	0x00005448
    1b54:	000018ad 	.word	0x000018ad
    1b58:	00005440 	.word	0x00005440

00001b5c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1b5c:	b430      	push	{r4, r5}
    1b5e:	4814      	ldr	r0, [pc, #80]	; (1bb0 <_event_system_init+0x54>)
    1b60:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1b64:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1b66:	4c13      	ldr	r4, [pc, #76]	; (1bb4 <_event_system_init+0x58>)
    1b68:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    1b6a:	f813 1b01 	ldrb.w	r1, [r3], #1
    1b6e:	3248      	adds	r2, #72	; 0x48
    1b70:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1b74:	42ab      	cmp	r3, r5
    1b76:	d1f7      	bne.n	1b68 <_event_system_init+0xc>
    1b78:	480d      	ldr	r0, [pc, #52]	; (1bb0 <_event_system_init+0x54>)
    1b7a:	f100 0442 	add.w	r4, r0, #66	; 0x42
    1b7e:	3080      	adds	r0, #128	; 0x80
    1b80:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1b82:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    1b86:	00ca      	lsls	r2, r1, #3
    1b88:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1b8c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1b90:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1b92:	f850 3f04 	ldr.w	r3, [r0, #4]!
    1b96:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1b98:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1b9c:	43db      	mvns	r3, r3
    1b9e:	b2db      	uxtb	r3, r3
    1ba0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    1ba4:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1ba6:	2920      	cmp	r1, #32
    1ba8:	d1eb      	bne.n	1b82 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    1baa:	2000      	movs	r0, #0
    1bac:	bc30      	pop	{r4, r5}
    1bae:	4770      	bx	lr
    1bb0:	00005460 	.word	0x00005460
    1bb4:	4100e000 	.word	0x4100e000

00001bb8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1bb8:	f010 0f01 	tst.w	r0, #1
    1bbc:	d008      	beq.n	1bd0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1bbe:	4a17      	ldr	r2, [pc, #92]	; (1c1c <_gclk_init_generators_by_fref+0x64>)
    1bc0:	4b17      	ldr	r3, [pc, #92]	; (1c20 <_gclk_init_generators_by_fref+0x68>)
    1bc2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bc4:	4619      	mov	r1, r3
    1bc6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1bca:	684b      	ldr	r3, [r1, #4]
    1bcc:	4213      	tst	r3, r2
    1bce:	d1fc      	bne.n	1bca <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1bd0:	f010 0f08 	tst.w	r0, #8
    1bd4:	d008      	beq.n	1be8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1bd6:	4a13      	ldr	r2, [pc, #76]	; (1c24 <_gclk_init_generators_by_fref+0x6c>)
    1bd8:	4b11      	ldr	r3, [pc, #68]	; (1c20 <_gclk_init_generators_by_fref+0x68>)
    1bda:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bdc:	4619      	mov	r1, r3
    1bde:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1be2:	684b      	ldr	r3, [r1, #4]
    1be4:	4213      	tst	r3, r2
    1be6:	d1fc      	bne.n	1be2 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    1be8:	f010 0f10 	tst.w	r0, #16
    1bec:	d008      	beq.n	1c00 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1bee:	4a0e      	ldr	r2, [pc, #56]	; (1c28 <_gclk_init_generators_by_fref+0x70>)
    1bf0:	4b0b      	ldr	r3, [pc, #44]	; (1c20 <_gclk_init_generators_by_fref+0x68>)
    1bf2:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bf4:	4619      	mov	r1, r3
    1bf6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1bfa:	684b      	ldr	r3, [r1, #4]
    1bfc:	4213      	tst	r3, r2
    1bfe:	d1fc      	bne.n	1bfa <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    1c00:	f410 6f00 	tst.w	r0, #2048	; 0x800
    1c04:	d008      	beq.n	1c18 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1c06:	4a09      	ldr	r2, [pc, #36]	; (1c2c <_gclk_init_generators_by_fref+0x74>)
    1c08:	4b05      	ldr	r3, [pc, #20]	; (1c20 <_gclk_init_generators_by_fref+0x68>)
    1c0a:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c0c:	4619      	mov	r1, r3
    1c0e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1c12:	684b      	ldr	r3, [r1, #4]
    1c14:	4213      	tst	r3, r2
    1c16:	d1fc      	bne.n	1c12 <_gclk_init_generators_by_fref+0x5a>
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop
    1c1c:	00010101 	.word	0x00010101
    1c20:	40001c00 	.word	0x40001c00
    1c24:	00010105 	.word	0x00010105
    1c28:	00010106 	.word	0x00010106
    1c2c:	00041104 	.word	0x00041104

00001c30 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1c30:	2201      	movs	r2, #1
    1c32:	4b01      	ldr	r3, [pc, #4]	; (1c38 <_mclk_init+0x8>)
    1c34:	715a      	strb	r2, [r3, #5]
    1c36:	4770      	bx	lr
    1c38:	40000800 	.word	0x40000800

00001c3c <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1c3c:	4b06      	ldr	r3, [pc, #24]	; (1c58 <_osc32kctrl_init_sources+0x1c>)
    1c3e:	f242 028e 	movw	r2, #8334	; 0x208e
    1c42:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1c44:	2200      	movs	r2, #0
    1c46:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1c48:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1c4a:	69d9      	ldr	r1, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1c4c:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1c50:	61d9      	str	r1, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1c52:	741a      	strb	r2, [r3, #16]
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop
    1c58:	40001400 	.word	0x40001400

00001c5c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1c5c:	4a04      	ldr	r2, [pc, #16]	; (1c70 <_oscctrl_init_sources+0x14>)
    1c5e:	4b05      	ldr	r3, [pc, #20]	; (1c74 <_oscctrl_init_sources+0x18>)
    1c60:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1c62:	461a      	mov	r2, r3
    1c64:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1c66:	f013 0f02 	tst.w	r3, #2
    1c6a:	d0fb      	beq.n	1c64 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1c6c:	4770      	bx	lr
    1c6e:	bf00      	nop
    1c70:	03002606 	.word	0x03002606
    1c74:	40001000 	.word	0x40001000

00001c78 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1c78:	4a36      	ldr	r2, [pc, #216]	; (1d54 <_oscctrl_init_referenced_generators+0xdc>)
    1c7a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1c7c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1c80:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1c84:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c86:	4611      	mov	r1, r2
    1c88:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1c8c:	684b      	ldr	r3, [r1, #4]
    1c8e:	4213      	tst	r3, r2
    1c90:	d1fc      	bne.n	1c8c <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1c92:	4a30      	ldr	r2, [pc, #192]	; (1d54 <_oscctrl_init_referenced_generators+0xdc>)
    1c94:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1c96:	f013 0f04 	tst.w	r3, #4
    1c9a:	d1fb      	bne.n	1c94 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1c9c:	4b2e      	ldr	r3, [pc, #184]	; (1d58 <_oscctrl_init_referenced_generators+0xe0>)
    1c9e:	2200      	movs	r2, #0
    1ca0:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1ca2:	4a2e      	ldr	r2, [pc, #184]	; (1d5c <_oscctrl_init_referenced_generators+0xe4>)
    1ca4:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1ca6:	461a      	mov	r2, r3
    1ca8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1cac:	f013 0f10 	tst.w	r3, #16
    1cb0:	d1fa      	bne.n	1ca8 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1cb2:	2200      	movs	r2, #0
    1cb4:	4b28      	ldr	r3, [pc, #160]	; (1d58 <_oscctrl_init_referenced_generators+0xe0>)
    1cb6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1cba:	461a      	mov	r2, r3
    1cbc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1cc0:	f013 0f04 	tst.w	r3, #4
    1cc4:	d1fa      	bne.n	1cbc <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1cc6:	2202      	movs	r2, #2
    1cc8:	4b23      	ldr	r3, [pc, #140]	; (1d58 <_oscctrl_init_referenced_generators+0xe0>)
    1cca:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1ccc:	461a      	mov	r2, r3
    1cce:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1cd2:	f013 0f02 	tst.w	r3, #2
    1cd6:	d1fa      	bne.n	1cce <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1cd8:	4b1f      	ldr	r3, [pc, #124]	; (1d58 <_oscctrl_init_referenced_generators+0xe0>)
    1cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1cdc:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1cde:	461a      	mov	r2, r3
    1ce0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1ce4:	f013 0f08 	tst.w	r3, #8
    1ce8:	d1fa      	bne.n	1ce0 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1cea:	2219      	movs	r2, #25
    1cec:	4b1a      	ldr	r3, [pc, #104]	; (1d58 <_oscctrl_init_referenced_generators+0xe0>)
    1cee:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1cf2:	461a      	mov	r2, r3
    1cf4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1cf8:	f013 0f04 	tst.w	r3, #4
    1cfc:	d1fa      	bne.n	1cf4 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1cfe:	4b16      	ldr	r3, [pc, #88]	; (1d58 <_oscctrl_init_referenced_generators+0xe0>)
    1d00:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1d04:	f013 0f01 	tst.w	r3, #1
    1d08:	d01d      	beq.n	1d46 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1d0a:	4a13      	ldr	r2, [pc, #76]	; (1d58 <_oscctrl_init_referenced_generators+0xe0>)
    1d0c:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1d0e:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1d12:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1d16:	d1f9      	bne.n	1d0c <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1d18:	4a0e      	ldr	r2, [pc, #56]	; (1d54 <_oscctrl_init_referenced_generators+0xdc>)
    1d1a:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1d1c:	2b00      	cmp	r3, #0
    1d1e:	d1fc      	bne.n	1d1a <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1d20:	4a0c      	ldr	r2, [pc, #48]	; (1d54 <_oscctrl_init_referenced_generators+0xdc>)
    1d22:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1d24:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1d28:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1d2c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1d2e:	4611      	mov	r1, r2
    1d30:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1d34:	684b      	ldr	r3, [r1, #4]
    1d36:	4213      	tst	r3, r2
    1d38:	d1fc      	bne.n	1d34 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1d3a:	4a06      	ldr	r2, [pc, #24]	; (1d54 <_oscctrl_init_referenced_generators+0xdc>)
    1d3c:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1d3e:	f013 0f04 	tst.w	r3, #4
    1d42:	d1fb      	bne.n	1d3c <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    1d44:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1d46:	4a04      	ldr	r2, [pc, #16]	; (1d58 <_oscctrl_init_referenced_generators+0xe0>)
    1d48:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1d4a:	f413 7f80 	tst.w	r3, #256	; 0x100
    1d4e:	d0fb      	beq.n	1d48 <_oscctrl_init_referenced_generators+0xd0>
    1d50:	e7e2      	b.n	1d18 <_oscctrl_init_referenced_generators+0xa0>
    1d52:	bf00      	nop
    1d54:	40001c00 	.word	0x40001c00
    1d58:	40001000 	.word	0x40001000
    1d5c:	0401bb80 	.word	0x0401bb80

00001d60 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    1d60:	b538      	push	{r3, r4, r5, lr}
    1d62:	460c      	mov	r4, r1
	ASSERT(dev);
    1d64:	4605      	mov	r5, r0
    1d66:	2230      	movs	r2, #48	; 0x30
    1d68:	4917      	ldr	r1, [pc, #92]	; (1dc8 <_timer_init+0x68>)
    1d6a:	3000      	adds	r0, #0
    1d6c:	bf18      	it	ne
    1d6e:	2001      	movne	r0, #1
    1d70:	4b16      	ldr	r3, [pc, #88]	; (1dcc <_timer_init+0x6c>)
    1d72:	4798      	blx	r3

	dev->hw = hw;
    1d74:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1d76:	2301      	movs	r3, #1
    1d78:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1d7a:	f248 0203 	movw	r2, #32771	; 0x8003
    1d7e:	6923      	ldr	r3, [r4, #16]
    1d80:	4213      	tst	r3, r2
    1d82:	d1fc      	bne.n	1d7e <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    1d84:	68ea      	ldr	r2, [r5, #12]
    1d86:	6913      	ldr	r3, [r2, #16]
    1d88:	f013 0f01 	tst.w	r3, #1
    1d8c:	d1fb      	bne.n	1d86 <_timer_init+0x26>
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    1d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
    1d92:	6053      	str	r3, [r2, #4]
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    1d94:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1d96:	f248 0380 	movw	r3, #32896	; 0x8080
    1d9a:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1d9c:	f248 0103 	movw	r1, #32771	; 0x8003
    1da0:	6913      	ldr	r3, [r2, #16]
    1da2:	420b      	tst	r3, r1
    1da4:	d1fc      	bne.n	1da0 <_timer_init+0x40>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    1da6:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1dac:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1dae:	6913      	ldr	r3, [r2, #16]
    1db0:	f013 0f60 	tst.w	r3, #96	; 0x60
    1db4:	d1fb      	bne.n	1dae <_timer_init+0x4e>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    1db6:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1db8:	f44f 7280 	mov.w	r2, #256	; 0x100
    1dbc:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    1dbe:	4b04      	ldr	r3, [pc, #16]	; (1dd0 <_timer_init+0x70>)
    1dc0:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    1dc2:	2000      	movs	r0, #0
    1dc4:	bd38      	pop	{r3, r4, r5, pc}
    1dc6:	bf00      	nop
    1dc8:	00005564 	.word	0x00005564
    1dcc:	000018ad 	.word	0x000018ad
    1dd0:	200005f8 	.word	0x200005f8

00001dd4 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    1dd4:	2000      	movs	r0, #0
    1dd6:	4770      	bx	lr

00001dd8 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1dd8:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    1dda:	4b08      	ldr	r3, [pc, #32]	; (1dfc <RTC_Handler+0x24>)
    1ddc:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    1dde:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1de0:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    1de2:	f413 7f80 	tst.w	r3, #256	; 0x100
    1de6:	d007      	beq.n	1df8 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    1de8:	6823      	ldr	r3, [r4, #0]
    1dea:	b10b      	cbz	r3, 1df0 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    1dec:	4620      	mov	r0, r4
    1dee:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1df0:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1df2:	f44f 7280 	mov.w	r2, #256	; 0x100
    1df6:	819a      	strh	r2, [r3, #12]
    1df8:	bd10      	pop	{r4, pc}
    1dfa:	bf00      	nop
    1dfc:	200005f8 	.word	0x200005f8

00001e00 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1e00:	b470      	push	{r4, r5, r6}
    1e02:	b089      	sub	sp, #36	; 0x24
    1e04:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1e06:	466c      	mov	r4, sp
    1e08:	4d0d      	ldr	r5, [pc, #52]	; (1e40 <_sercom_get_hardware_index+0x40>)
    1e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1e0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1e12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1e16:	9b00      	ldr	r3, [sp, #0]
    1e18:	42b3      	cmp	r3, r6
    1e1a:	d00d      	beq.n	1e38 <_sercom_get_hardware_index+0x38>
    1e1c:	4631      	mov	r1, r6
    1e1e:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e20:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1e22:	f853 2b04 	ldr.w	r2, [r3], #4
    1e26:	428a      	cmp	r2, r1
    1e28:	d007      	beq.n	1e3a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e2a:	3001      	adds	r0, #1
    1e2c:	2808      	cmp	r0, #8
    1e2e:	d1f8      	bne.n	1e22 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1e30:	2000      	movs	r0, #0
}
    1e32:	b009      	add	sp, #36	; 0x24
    1e34:	bc70      	pop	{r4, r5, r6}
    1e36:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e38:	2000      	movs	r0, #0
			return i;
    1e3a:	b2c0      	uxtb	r0, r0
    1e3c:	e7f9      	b.n	1e32 <_sercom_get_hardware_index+0x32>
    1e3e:	bf00      	nop
    1e40:	0000557c 	.word	0x0000557c

00001e44 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM1) {
    1e44:	4b05      	ldr	r3, [pc, #20]	; (1e5c <_sercom_init_irq_param+0x18>)
    1e46:	4298      	cmp	r0, r3
    1e48:	d005      	beq.n	1e56 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM5) {
    1e4a:	4b05      	ldr	r3, [pc, #20]	; (1e60 <_sercom_init_irq_param+0x1c>)
    1e4c:	4298      	cmp	r0, r3
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    1e4e:	bf04      	itt	eq
    1e50:	4b04      	ldreq	r3, [pc, #16]	; (1e64 <_sercom_init_irq_param+0x20>)
    1e52:	6059      	streq	r1, [r3, #4]
    1e54:	4770      	bx	lr
		_sercom1_dev = (struct _i2c_m_async_device *)dev;
    1e56:	4b03      	ldr	r3, [pc, #12]	; (1e64 <_sercom_init_irq_param+0x20>)
    1e58:	6019      	str	r1, [r3, #0]
    1e5a:	4770      	bx	lr
    1e5c:	40003400 	.word	0x40003400
    1e60:	43000400 	.word	0x43000400
    1e64:	200005fc 	.word	0x200005fc

00001e68 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1e68:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1e6a:	4b03      	ldr	r3, [pc, #12]	; (1e78 <_sercom_get_irq_num+0x10>)
    1e6c:	4798      	blx	r3
    1e6e:	0080      	lsls	r0, r0, #2
    1e70:	302e      	adds	r0, #46	; 0x2e
}
    1e72:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1e76:	bd08      	pop	{r3, pc}
    1e78:	00001e01 	.word	0x00001e01

00001e7c <_get_i2cm_index>:
{
    1e7c:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1e7e:	4b0a      	ldr	r3, [pc, #40]	; (1ea8 <_get_i2cm_index+0x2c>)
    1e80:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    1e82:	2801      	cmp	r0, #1
    1e84:	d00c      	beq.n	1ea0 <_get_i2cm_index+0x24>
    1e86:	2805      	cmp	r0, #5
    1e88:	bf08      	it	eq
    1e8a:	2001      	moveq	r0, #1
    1e8c:	d009      	beq.n	1ea2 <_get_i2cm_index+0x26>
	ASSERT(false);
    1e8e:	f240 32b2 	movw	r2, #946	; 0x3b2
    1e92:	4906      	ldr	r1, [pc, #24]	; (1eac <_get_i2cm_index+0x30>)
    1e94:	2000      	movs	r0, #0
    1e96:	4b06      	ldr	r3, [pc, #24]	; (1eb0 <_get_i2cm_index+0x34>)
    1e98:	4798      	blx	r3
	return -1;
    1e9a:	f04f 30ff 	mov.w	r0, #4294967295
}
    1e9e:	bd08      	pop	{r3, pc}
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1ea0:	2000      	movs	r0, #0
			return i;
    1ea2:	b240      	sxtb	r0, r0
    1ea4:	bd08      	pop	{r3, pc}
    1ea6:	bf00      	nop
    1ea8:	00001e01 	.word	0x00001e01
    1eac:	000055f0 	.word	0x000055f0
    1eb0:	000018ad 	.word	0x000018ad

00001eb4 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    1eb4:	b538      	push	{r3, r4, r5, lr}
    1eb6:	4605      	mov	r5, r0
    1eb8:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1eba:	4608      	mov	r0, r1
    1ebc:	4b32      	ldr	r3, [pc, #200]	; (1f88 <_i2c_m_sync_init_impl+0xd4>)
    1ebe:	4798      	blx	r3
    1ec0:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1ec2:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1ec4:	f013 0f01 	tst.w	r3, #1
    1ec8:	d122      	bne.n	1f10 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1eca:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1ece:	4a2f      	ldr	r2, [pc, #188]	; (1f8c <_i2c_m_sync_init_impl+0xd8>)
    1ed0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1ed6:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1eda:	69e3      	ldr	r3, [r4, #28]
    1edc:	f013 0f03 	tst.w	r3, #3
    1ee0:	d1fb      	bne.n	1eda <_i2c_m_sync_init_impl+0x26>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1ee2:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1ee4:	f013 0f02 	tst.w	r3, #2
    1ee8:	d00b      	beq.n	1f02 <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1eea:	6823      	ldr	r3, [r4, #0]
    1eec:	f023 0302 	bic.w	r3, r3, #2
    1ef0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ef2:	69e3      	ldr	r3, [r4, #28]
    1ef4:	f013 0f03 	tst.w	r3, #3
    1ef8:	d1fb      	bne.n	1ef2 <_i2c_m_sync_init_impl+0x3e>
    1efa:	69e3      	ldr	r3, [r4, #28]
    1efc:	f013 0f02 	tst.w	r3, #2
    1f00:	d1fb      	bne.n	1efa <_i2c_m_sync_init_impl+0x46>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    1f02:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1f06:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f08:	69e3      	ldr	r3, [r4, #28]
    1f0a:	f013 0f03 	tst.w	r3, #3
    1f0e:	d1fb      	bne.n	1f08 <_i2c_m_sync_init_impl+0x54>
    1f10:	69e3      	ldr	r3, [r4, #28]
    1f12:	f013 0f01 	tst.w	r3, #1
    1f16:	d1fb      	bne.n	1f10 <_i2c_m_sync_init_impl+0x5c>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1f18:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1f1c:	4a1b      	ldr	r2, [pc, #108]	; (1f8c <_i2c_m_sync_init_impl+0xd8>)
    1f1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1f24:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f26:	69e3      	ldr	r3, [r4, #28]
    1f28:	f013 0f03 	tst.w	r3, #3
    1f2c:	d1fb      	bne.n	1f26 <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    1f2e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1f32:	4916      	ldr	r1, [pc, #88]	; (1f8c <_i2c_m_sync_init_impl+0xd8>)
    1f34:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1f3a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f3c:	69e3      	ldr	r3, [r4, #28]
    1f3e:	f013 0f04 	tst.w	r3, #4
    1f42:	d1fb      	bne.n	1f3c <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1f44:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1f48:	4910      	ldr	r1, [pc, #64]	; (1f8c <_i2c_m_sync_init_impl+0xd8>)
    1f4a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1f50:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1f52:	f3c2 6301 	ubfx	r3, r2, #24, #2
    1f56:	81ab      	strh	r3, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1f58:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1f5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    1f5e:	2b01      	cmp	r3, #1
    1f60:	bf94      	ite	ls
    1f62:	2300      	movls	r3, #0
    1f64:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1f66:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    1f6a:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f6c:	69e3      	ldr	r3, [r4, #28]
    1f6e:	f013 0f04 	tst.w	r3, #4
    1f72:	d1fb      	bne.n	1f6c <_i2c_m_sync_init_impl+0xb8>

	service->trise = _i2cms[i].trise;
    1f74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1f78:	4b04      	ldr	r3, [pc, #16]	; (1f8c <_i2c_m_sync_init_impl+0xd8>)
    1f7a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    1f7e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1f80:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    1f82:	2000      	movs	r0, #0
    1f84:	bd38      	pop	{r3, r4, r5, pc}
    1f86:	bf00      	nop
    1f88:	00001e7d 	.word	0x00001e7d
    1f8c:	0000557c 	.word	0x0000557c

00001f90 <_sercom_i2c_m_irq_handler>:
{
    1f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f94:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    1f96:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1f98:	7e26      	ldrb	r6, [r4, #24]
    1f9a:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    1f9c:	f8df 8234 	ldr.w	r8, [pc, #564]	; 21d4 <_sercom_i2c_m_irq_handler+0x244>
    1fa0:	f240 4224 	movw	r2, #1060	; 0x424
    1fa4:	4641      	mov	r1, r8
    1fa6:	3000      	adds	r0, #0
    1fa8:	bf18      	it	ne
    1faa:	2001      	movne	r0, #1
    1fac:	4f88      	ldr	r7, [pc, #544]	; (21d0 <_sercom_i2c_m_irq_handler+0x240>)
    1fae:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    1fb0:	6928      	ldr	r0, [r5, #16]
    1fb2:	f240 4225 	movw	r2, #1061	; 0x425
    1fb6:	4641      	mov	r1, r8
    1fb8:	3000      	adds	r0, #0
    1fba:	bf18      	it	ne
    1fbc:	2001      	movne	r0, #1
    1fbe:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    1fc0:	f016 0f80 	tst.w	r6, #128	; 0x80
    1fc4:	f040 80f6 	bne.w	21b4 <_sercom_i2c_m_irq_handler+0x224>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1fc8:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fca:	69e3      	ldr	r3, [r4, #28]
    1fcc:	f013 0f04 	tst.w	r3, #4
    1fd0:	d1fb      	bne.n	1fca <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1fd2:	8b63      	ldrh	r3, [r4, #26]
    1fd4:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    1fd6:	f016 0f01 	tst.w	r6, #1
    1fda:	f000 8092 	beq.w	2102 <_sercom_i2c_m_irq_handler+0x172>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1fde:	f013 0f02 	tst.w	r3, #2
    1fe2:	d024      	beq.n	202e <_sercom_i2c_m_irq_handler+0x9e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1fe4:	2201      	movs	r2, #1
    1fe6:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    1fe8:	886a      	ldrh	r2, [r5, #2]
    1fea:	b292      	uxth	r2, r2
    1fec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    1ff0:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1ff2:	886a      	ldrh	r2, [r5, #2]
    1ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1ff8:	0412      	lsls	r2, r2, #16
    1ffa:	0c12      	lsrs	r2, r2, #16
    1ffc:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1ffe:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    2002:	2b00      	cmp	r3, #0
    2004:	bf14      	ite	ne
    2006:	f06f 0104 	mvnne.w	r1, #4
    200a:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    200e:	886b      	ldrh	r3, [r5, #2]
    2010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2014:	041b      	lsls	r3, r3, #16
    2016:	0c1b      	lsrs	r3, r3, #16
    2018:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    201a:	696b      	ldr	r3, [r5, #20]
    201c:	2b00      	cmp	r3, #0
    201e:	f000 80c7 	beq.w	21b0 <_sercom_i2c_m_irq_handler+0x220>
			i2c_dev->cb.error(i2c_dev, ret);
    2022:	4628      	mov	r0, r5
    2024:	4798      	blx	r3
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    2026:	2380      	movs	r3, #128	; 0x80
    2028:	7623      	strb	r3, [r4, #24]
    202a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    202e:	f013 0f04 	tst.w	r3, #4
    2032:	d124      	bne.n	207e <_sercom_i2c_m_irq_handler+0xee>
			if (msg->flags & I2C_M_TEN) {
    2034:	886b      	ldrh	r3, [r5, #2]
    2036:	f413 6f80 	tst.w	r3, #1024	; 0x400
    203a:	d03e      	beq.n	20ba <_sercom_i2c_m_irq_handler+0x12a>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    203c:	882b      	ldrh	r3, [r5, #0]
    203e:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2040:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2044:	69e3      	ldr	r3, [r4, #28]
    2046:	f013 0f04 	tst.w	r3, #4
    204a:	d1fb      	bne.n	2044 <_sercom_i2c_m_irq_handler+0xb4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    204c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    204e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    2052:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    2056:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2058:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    205a:	69e3      	ldr	r3, [r4, #28]
    205c:	f013 0f04 	tst.w	r3, #4
    2060:	d1fb      	bne.n	205a <_sercom_i2c_m_irq_handler+0xca>
				msg->flags &= ~I2C_M_TEN;
    2062:	886b      	ldrh	r3, [r5, #2]
    2064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2068:	041b      	lsls	r3, r3, #16
    206a:	0c1b      	lsrs	r3, r3, #16
    206c:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    206e:	69ab      	ldr	r3, [r5, #24]
    2070:	2b00      	cmp	r3, #0
    2072:	f000 8088 	beq.w	2186 <_sercom_i2c_m_irq_handler+0x1f6>
			i2c_dev->cb.tx_complete(i2c_dev);
    2076:	4628      	mov	r0, r5
    2078:	4798      	blx	r3
    207a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    207e:	686b      	ldr	r3, [r5, #4]
    2080:	2b00      	cmp	r3, #0
    2082:	dd04      	ble.n	208e <_sercom_i2c_m_irq_handler+0xfe>
					msg->flags |= I2C_M_FAIL;
    2084:	886b      	ldrh	r3, [r5, #2]
    2086:	b29b      	uxth	r3, r3
    2088:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    208c:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    208e:	886b      	ldrh	r3, [r5, #2]
    2090:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2094:	d108      	bne.n	20a8 <_sercom_i2c_m_irq_handler+0x118>
				msg->flags &= ~I2C_M_BUSY;
    2096:	886b      	ldrh	r3, [r5, #2]
    2098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    209c:	041b      	lsls	r3, r3, #16
    209e:	0c1b      	lsrs	r3, r3, #16
    20a0:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    20a2:	f06f 0101 	mvn.w	r1, #1
    20a6:	e7b2      	b.n	200e <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    20a8:	6863      	ldr	r3, [r4, #4]
    20aa:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    20ae:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    20b0:	69e3      	ldr	r3, [r4, #28]
    20b2:	f013 0f04 	tst.w	r3, #4
    20b6:	d1fb      	bne.n	20b0 <_sercom_i2c_m_irq_handler+0x120>
    20b8:	e7ed      	b.n	2096 <_sercom_i2c_m_irq_handler+0x106>
			if (msg->len == 0) {
    20ba:	686b      	ldr	r3, [r5, #4]
    20bc:	b99b      	cbnz	r3, 20e6 <_sercom_i2c_m_irq_handler+0x156>
				if (msg->flags & I2C_M_STOP) {
    20be:	886b      	ldrh	r3, [r5, #2]
    20c0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    20c4:	d106      	bne.n	20d4 <_sercom_i2c_m_irq_handler+0x144>
				msg->flags &= ~I2C_M_BUSY;
    20c6:	886b      	ldrh	r3, [r5, #2]
    20c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    20cc:	041b      	lsls	r3, r3, #16
    20ce:	0c1b      	lsrs	r3, r3, #16
    20d0:	806b      	strh	r3, [r5, #2]
    20d2:	e7cc      	b.n	206e <_sercom_i2c_m_irq_handler+0xde>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    20d4:	6863      	ldr	r3, [r4, #4]
    20d6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    20da:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    20dc:	69e3      	ldr	r3, [r4, #28]
    20de:	f013 0f04 	tst.w	r3, #4
    20e2:	d1fb      	bne.n	20dc <_sercom_i2c_m_irq_handler+0x14c>
    20e4:	e7ef      	b.n	20c6 <_sercom_i2c_m_irq_handler+0x136>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    20e6:	68ab      	ldr	r3, [r5, #8]
    20e8:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    20ea:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    20ec:	69e3      	ldr	r3, [r4, #28]
    20ee:	f013 0f04 	tst.w	r3, #4
    20f2:	d1fb      	bne.n	20ec <_sercom_i2c_m_irq_handler+0x15c>
				msg->buffer++;
    20f4:	68ab      	ldr	r3, [r5, #8]
    20f6:	3301      	adds	r3, #1
    20f8:	60ab      	str	r3, [r5, #8]
				msg->len--;
    20fa:	686b      	ldr	r3, [r5, #4]
    20fc:	3b01      	subs	r3, #1
    20fe:	606b      	str	r3, [r5, #4]
    2100:	e7b5      	b.n	206e <_sercom_i2c_m_irq_handler+0xde>
	} else if (flags & SB_FLAG) {
    2102:	f016 0f02 	tst.w	r6, #2
    2106:	d041      	beq.n	218c <_sercom_i2c_m_irq_handler+0x1fc>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    2108:	686a      	ldr	r2, [r5, #4]
    210a:	2a00      	cmp	r2, #0
    210c:	d036      	beq.n	217c <_sercom_i2c_m_irq_handler+0x1ec>
    210e:	f013 0f04 	tst.w	r3, #4
    2112:	d133      	bne.n	217c <_sercom_i2c_m_irq_handler+0x1ec>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2114:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    2118:	3a01      	subs	r2, #1
    211a:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    211c:	2a00      	cmp	r2, #0
    211e:	d137      	bne.n	2190 <_sercom_i2c_m_irq_handler+0x200>
    2120:	2900      	cmp	r1, #0
    2122:	d039      	beq.n	2198 <_sercom_i2c_m_irq_handler+0x208>
				if (msg->flags & I2C_M_STOP) {
    2124:	886b      	ldrh	r3, [r5, #2]
    2126:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    212a:	d116      	bne.n	215a <_sercom_i2c_m_irq_handler+0x1ca>
				msg->flags &= ~I2C_M_BUSY;
    212c:	886b      	ldrh	r3, [r5, #2]
    212e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2132:	041b      	lsls	r3, r3, #16
    2134:	0c1b      	lsrs	r3, r3, #16
    2136:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    2138:	68aa      	ldr	r2, [r5, #8]
    213a:	1c53      	adds	r3, r2, #1
    213c:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    213e:	69e3      	ldr	r3, [r4, #28]
    2140:	f013 0f04 	tst.w	r3, #4
    2144:	d1fb      	bne.n	213e <_sercom_i2c_m_irq_handler+0x1ae>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    2146:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2148:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    214a:	2302      	movs	r3, #2
    214c:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    214e:	69eb      	ldr	r3, [r5, #28]
    2150:	b1e3      	cbz	r3, 218c <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.rx_complete(i2c_dev);
    2152:	4628      	mov	r0, r5
    2154:	4798      	blx	r3
    2156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    215a:	6863      	ldr	r3, [r4, #4]
    215c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2160:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2162:	69e3      	ldr	r3, [r4, #28]
    2164:	f013 0f04 	tst.w	r3, #4
    2168:	d1fb      	bne.n	2162 <_sercom_i2c_m_irq_handler+0x1d2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    216a:	6863      	ldr	r3, [r4, #4]
    216c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2170:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2172:	69e3      	ldr	r3, [r4, #28]
    2174:	f013 0f04 	tst.w	r3, #4
    2178:	d1fb      	bne.n	2172 <_sercom_i2c_m_irq_handler+0x1e2>
    217a:	e7d7      	b.n	212c <_sercom_i2c_m_irq_handler+0x19c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    217c:	2302      	movs	r3, #2
    217e:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    2180:	f06f 0101 	mvn.w	r1, #1
    2184:	e743      	b.n	200e <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    2186:	f016 0f02 	tst.w	r6, #2
    218a:	d1e0      	bne.n	214e <_sercom_i2c_m_irq_handler+0x1be>
    218c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2190:	2a01      	cmp	r2, #1
    2192:	d1d1      	bne.n	2138 <_sercom_i2c_m_irq_handler+0x1a8>
    2194:	2900      	cmp	r1, #0
    2196:	d0cf      	beq.n	2138 <_sercom_i2c_m_irq_handler+0x1a8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2198:	6863      	ldr	r3, [r4, #4]
    219a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    219e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21a0:	69e3      	ldr	r3, [r4, #28]
    21a2:	f013 0f04 	tst.w	r3, #4
    21a6:	d1fb      	bne.n	21a0 <_sercom_i2c_m_irq_handler+0x210>
			if (msg->len == 0) {
    21a8:	686b      	ldr	r3, [r5, #4]
    21aa:	2b00      	cmp	r3, #0
    21ac:	d0ba      	beq.n	2124 <_sercom_i2c_m_irq_handler+0x194>
    21ae:	e7c3      	b.n	2138 <_sercom_i2c_m_irq_handler+0x1a8>
    21b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    21b4:	886b      	ldrh	r3, [r5, #2]
    21b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    21ba:	041b      	lsls	r3, r3, #16
    21bc:	0c1b      	lsrs	r3, r3, #16
    21be:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    21c0:	696b      	ldr	r3, [r5, #20]
    21c2:	2b00      	cmp	r3, #0
    21c4:	d0e2      	beq.n	218c <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    21c6:	f06f 0104 	mvn.w	r1, #4
    21ca:	4628      	mov	r0, r5
    21cc:	4798      	blx	r3
    21ce:	e72a      	b.n	2026 <_sercom_i2c_m_irq_handler+0x96>
    21d0:	000018ad 	.word	0x000018ad
    21d4:	000055f0 	.word	0x000055f0

000021d8 <_i2c_m_async_enable>:
{
    21d8:	b570      	push	{r4, r5, r6, lr}
	ASSERT(i2c_dev);
    21da:	4e1b      	ldr	r6, [pc, #108]	; (2248 <_i2c_m_async_enable+0x70>)
    21dc:	4604      	mov	r4, r0
    21de:	f240 424a 	movw	r2, #1098	; 0x44a
    21e2:	4631      	mov	r1, r6
    21e4:	3000      	adds	r0, #0
    21e6:	bf18      	it	ne
    21e8:	2001      	movne	r0, #1
    21ea:	4d18      	ldr	r5, [pc, #96]	; (224c <_i2c_m_async_enable+0x74>)
    21ec:	47a8      	blx	r5
	return _i2c_m_enable_implementation(i2c_dev->hw);
    21ee:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    21f0:	f240 623b 	movw	r2, #1595	; 0x63b
    21f4:	4631      	mov	r1, r6
    21f6:	1c20      	adds	r0, r4, #0
    21f8:	bf18      	it	ne
    21fa:	2001      	movne	r0, #1
    21fc:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    21fe:	6823      	ldr	r3, [r4, #0]
    2200:	f043 0302 	orr.w	r3, r3, #2
    2204:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2206:	69e3      	ldr	r3, [r4, #28]
    2208:	f013 0f03 	tst.w	r3, #3
    220c:	d1fb      	bne.n	2206 <_i2c_m_async_enable+0x2e>
    220e:	2104      	movs	r1, #4
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    2210:	2010      	movs	r0, #16
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2212:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2216:	69e3      	ldr	r3, [r4, #28]
    2218:	f013 0f04 	tst.w	r3, #4
    221c:	d1fb      	bne.n	2216 <_i2c_m_async_enable+0x3e>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    221e:	8b63      	ldrh	r3, [r4, #26]
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    2220:	f3c3 1301 	ubfx	r3, r3, #4, #2
    2224:	2b01      	cmp	r3, #1
    2226:	d009      	beq.n	223c <_i2c_m_async_enable+0x64>
		if (timeout <= 0) {
    2228:	3a01      	subs	r2, #1
    222a:	d1f4      	bne.n	2216 <_i2c_m_async_enable+0x3e>
			if (--timeout_attempt)
    222c:	3901      	subs	r1, #1
    222e:	d007      	beq.n	2240 <_i2c_m_async_enable+0x68>
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    2230:	8360      	strh	r0, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2232:	69e3      	ldr	r3, [r4, #28]
    2234:	f013 0f04 	tst.w	r3, #4
    2238:	d1fb      	bne.n	2232 <_i2c_m_async_enable+0x5a>
    223a:	e7ea      	b.n	2212 <_i2c_m_async_enable+0x3a>
	return ERR_NONE;
    223c:	2000      	movs	r0, #0
    223e:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    2240:	f06f 0005 	mvn.w	r0, #5
}
    2244:	bd70      	pop	{r4, r5, r6, pc}
    2246:	bf00      	nop
    2248:	000055f0 	.word	0x000055f0
    224c:	000018ad 	.word	0x000018ad

00002250 <_i2c_m_async_disable>:
{
    2250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2252:	4605      	mov	r5, r0
	void *hw = i2c_dev->hw;
    2254:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    2256:	4f16      	ldr	r7, [pc, #88]	; (22b0 <_i2c_m_async_disable+0x60>)
    2258:	f44f 628b 	mov.w	r2, #1112	; 0x458
    225c:	4639      	mov	r1, r7
    225e:	3000      	adds	r0, #0
    2260:	bf18      	it	ne
    2262:	2001      	movne	r0, #1
    2264:	4e13      	ldr	r6, [pc, #76]	; (22b4 <_i2c_m_async_disable+0x64>)
    2266:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    2268:	6928      	ldr	r0, [r5, #16]
    226a:	f240 4259 	movw	r2, #1113	; 0x459
    226e:	4639      	mov	r1, r7
    2270:	3000      	adds	r0, #0
    2272:	bf18      	it	ne
    2274:	2001      	movne	r0, #1
    2276:	47b0      	blx	r6
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    2278:	4620      	mov	r0, r4
    227a:	4b0f      	ldr	r3, [pc, #60]	; (22b8 <_i2c_m_async_disable+0x68>)
    227c:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    227e:	0943      	lsrs	r3, r0, #5
    2280:	f000 001f 	and.w	r0, r0, #31
    2284:	2201      	movs	r2, #1
    2286:	fa02 f000 	lsl.w	r0, r2, r0
    228a:	3320      	adds	r3, #32
    228c:	4a0b      	ldr	r2, [pc, #44]	; (22bc <_i2c_m_async_disable+0x6c>)
    228e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2292:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2296:	f3bf 8f6f 	isb	sy
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    229a:	6823      	ldr	r3, [r4, #0]
    229c:	f023 0302 	bic.w	r3, r3, #2
    22a0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22a2:	69e3      	ldr	r3, [r4, #28]
    22a4:	f013 0f03 	tst.w	r3, #3
    22a8:	d1fb      	bne.n	22a2 <_i2c_m_async_disable+0x52>
}
    22aa:	2000      	movs	r0, #0
    22ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22ae:	bf00      	nop
    22b0:	000055f0 	.word	0x000055f0
    22b4:	000018ad 	.word	0x000018ad
    22b8:	00001e69 	.word	0x00001e69
    22bc:	e000e100 	.word	0xe000e100

000022c0 <_i2c_m_async_init>:
{
    22c0:	b570      	push	{r4, r5, r6, lr}
    22c2:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    22c4:	4606      	mov	r6, r0
    22c6:	f44f 6293 	mov.w	r2, #1176	; 0x498
    22ca:	4918      	ldr	r1, [pc, #96]	; (232c <_i2c_m_async_init+0x6c>)
    22cc:	3000      	adds	r0, #0
    22ce:	bf18      	it	ne
    22d0:	2001      	movne	r0, #1
    22d2:	4b17      	ldr	r3, [pc, #92]	; (2330 <_i2c_m_async_init+0x70>)
    22d4:	4798      	blx	r3
	i2c_dev->hw = hw;
    22d6:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    22d8:	4629      	mov	r1, r5
    22da:	4630      	mov	r0, r6
    22dc:	4b15      	ldr	r3, [pc, #84]	; (2334 <_i2c_m_async_init+0x74>)
    22de:	4798      	blx	r3
	if (init_status) {
    22e0:	4604      	mov	r4, r0
    22e2:	b108      	cbz	r0, 22e8 <_i2c_m_async_init+0x28>
}
    22e4:	4620      	mov	r0, r4
    22e6:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    22e8:	4631      	mov	r1, r6
    22ea:	4628      	mov	r0, r5
    22ec:	4b12      	ldr	r3, [pc, #72]	; (2338 <_i2c_m_async_init+0x78>)
    22ee:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    22f0:	4628      	mov	r0, r5
    22f2:	4b12      	ldr	r3, [pc, #72]	; (233c <_i2c_m_async_init+0x7c>)
    22f4:	4798      	blx	r3
    22f6:	1d01      	adds	r1, r0, #4
    22f8:	b2c9      	uxtb	r1, r1
    22fa:	2501      	movs	r5, #1
    22fc:	f000 021f 	and.w	r2, r0, #31
    2300:	fa05 f202 	lsl.w	r2, r5, r2
    2304:	0943      	lsrs	r3, r0, #5
    2306:	009b      	lsls	r3, r3, #2
    2308:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    230c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2314:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2318:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    231c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2320:	601a      	str	r2, [r3, #0]
		irq++;
    2322:	3001      	adds	r0, #1
    2324:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2326:	4281      	cmp	r1, r0
    2328:	d1e8      	bne.n	22fc <_i2c_m_async_init+0x3c>
    232a:	e7db      	b.n	22e4 <_i2c_m_async_init+0x24>
    232c:	000055f0 	.word	0x000055f0
    2330:	000018ad 	.word	0x000018ad
    2334:	00001eb5 	.word	0x00001eb5
    2338:	00001e45 	.word	0x00001e45
    233c:	00001e69 	.word	0x00001e69

00002340 <_i2c_m_async_transfer>:
{
    2340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2344:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    2346:	4605      	mov	r5, r0
    2348:	f110 0800 	adds.w	r8, r0, #0
    234c:	bf18      	it	ne
    234e:	f04f 0801 	movne.w	r8, #1
    2352:	4f45      	ldr	r7, [pc, #276]	; (2468 <_i2c_m_async_transfer+0x128>)
    2354:	f240 42ee 	movw	r2, #1262	; 0x4ee
    2358:	4639      	mov	r1, r7
    235a:	4640      	mov	r0, r8
    235c:	4e43      	ldr	r6, [pc, #268]	; (246c <_i2c_m_async_transfer+0x12c>)
    235e:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    2360:	6928      	ldr	r0, [r5, #16]
    2362:	f240 42ef 	movw	r2, #1263	; 0x4ef
    2366:	4639      	mov	r1, r7
    2368:	3000      	adds	r0, #0
    236a:	bf18      	it	ne
    236c:	2001      	movne	r0, #1
    236e:	47b0      	blx	r6
	ASSERT(msg);
    2370:	f44f 629e 	mov.w	r2, #1264	; 0x4f0
    2374:	4639      	mov	r1, r7
    2376:	1c20      	adds	r0, r4, #0
    2378:	bf18      	it	ne
    237a:	2001      	movne	r0, #1
    237c:	47b0      	blx	r6
	if (msg->len == 0) {
    237e:	6860      	ldr	r0, [r4, #4]
    2380:	2800      	cmp	r0, #0
    2382:	d06f      	beq.n	2464 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2384:	886b      	ldrh	r3, [r5, #2]
    2386:	f413 7f80 	tst.w	r3, #256	; 0x100
    238a:	d169      	bne.n	2460 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    238c:	8863      	ldrh	r3, [r4, #2]
    238e:	b29b      	uxth	r3, r3
    2390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2394:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    2396:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    239a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    239e:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    23a0:	6853      	ldr	r3, [r2, #4]
    23a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    23a6:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23a8:	69d3      	ldr	r3, [r2, #28]
    23aa:	f013 0f04 	tst.w	r3, #4
    23ae:	d1fb      	bne.n	23a8 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    23b0:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    23b2:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    23b4:	f240 42c6 	movw	r2, #1222	; 0x4c6
    23b8:	492b      	ldr	r1, [pc, #172]	; (2468 <_i2c_m_async_transfer+0x128>)
    23ba:	4640      	mov	r0, r8
    23bc:	4b2b      	ldr	r3, [pc, #172]	; (246c <_i2c_m_async_transfer+0x12c>)
    23be:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    23c0:	686b      	ldr	r3, [r5, #4]
    23c2:	2b01      	cmp	r3, #1
    23c4:	d02a      	beq.n	241c <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    23c6:	6863      	ldr	r3, [r4, #4]
    23c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    23cc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23ce:	69e3      	ldr	r3, [r4, #28]
    23d0:	f013 0f04 	tst.w	r3, #4
    23d4:	d1fb      	bne.n	23ce <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    23d6:	882b      	ldrh	r3, [r5, #0]
    23d8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    23dc:	d02a      	beq.n	2434 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    23de:	886a      	ldrh	r2, [r5, #2]
    23e0:	f012 0f01 	tst.w	r2, #1
    23e4:	d004      	beq.n	23f0 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    23e6:	886a      	ldrh	r2, [r5, #2]
    23e8:	b292      	uxth	r2, r2
    23ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    23ee:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    23f0:	f240 72fe 	movw	r2, #2046	; 0x7fe
    23f4:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    23f8:	69e3      	ldr	r3, [r4, #28]
    23fa:	f013 0f04 	tst.w	r3, #4
    23fe:	d1fb      	bne.n	23f8 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2400:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    2406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    240a:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    240c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    240e:	69e3      	ldr	r3, [r4, #28]
    2410:	f013 0f04 	tst.w	r3, #4
    2414:	d1fb      	bne.n	240e <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    2416:	2000      	movs	r0, #0
    2418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    241c:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    2420:	d0d1      	beq.n	23c6 <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2422:	6863      	ldr	r3, [r4, #4]
    2424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2428:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    242a:	69e3      	ldr	r3, [r4, #28]
    242c:	f013 0f04 	tst.w	r3, #4
    2430:	d1fb      	bne.n	242a <_i2c_m_async_transfer+0xea>
    2432:	e7d0      	b.n	23d6 <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    2434:	8869      	ldrh	r1, [r5, #2]
    2436:	005a      	lsls	r2, r3, #1
    2438:	b2d2      	uxtb	r2, r2
    243a:	f001 0301 	and.w	r3, r1, #1
    243e:	431a      	orrs	r2, r3
    2440:	69e3      	ldr	r3, [r4, #28]
    2442:	f013 0f04 	tst.w	r3, #4
    2446:	d1fb      	bne.n	2440 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2448:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    244a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    244e:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2450:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2452:	69e3      	ldr	r3, [r4, #28]
    2454:	f013 0f04 	tst.w	r3, #4
    2458:	d1fb      	bne.n	2452 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    245a:	2000      	movs	r0, #0
    245c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    2460:	f06f 0003 	mvn.w	r0, #3
}
    2464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2468:	000055f0 	.word	0x000055f0
    246c:	000018ad 	.word	0x000018ad

00002470 <_i2c_m_async_register_callback>:
	switch (type) {
    2470:	2901      	cmp	r1, #1
    2472:	d006      	beq.n	2482 <_i2c_m_async_register_callback+0x12>
    2474:	b119      	cbz	r1, 247e <_i2c_m_async_register_callback+0xe>
    2476:	2902      	cmp	r1, #2
    2478:	d005      	beq.n	2486 <_i2c_m_async_register_callback+0x16>
}
    247a:	2000      	movs	r0, #0
    247c:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    247e:	6142      	str	r2, [r0, #20]
		break;
    2480:	e7fb      	b.n	247a <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    2482:	6182      	str	r2, [r0, #24]
		break;
    2484:	e7f9      	b.n	247a <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    2486:	61c2      	str	r2, [r0, #28]
		break;
    2488:	e7f7      	b.n	247a <_i2c_m_async_register_callback+0xa>

0000248a <_i2c_m_async_send_stop>:
	void *hw = i2c_dev->hw;
    248a:	6902      	ldr	r2, [r0, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    248c:	6853      	ldr	r3, [r2, #4]
    248e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2492:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2494:	69d3      	ldr	r3, [r2, #28]
    2496:	f013 0f04 	tst.w	r3, #4
    249a:	d1fb      	bne.n	2494 <_i2c_m_async_send_stop+0xa>
}
    249c:	2000      	movs	r0, #0
    249e:	4770      	bx	lr

000024a0 <_i2c_m_async_set_irq_state>:
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    24a0:	1e4b      	subs	r3, r1, #1
    24a2:	b2db      	uxtb	r3, r3
    24a4:	2b01      	cmp	r3, #1
    24a6:	d905      	bls.n	24b4 <_i2c_m_async_set_irq_state+0x14>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    24a8:	b919      	cbnz	r1, 24b2 <_i2c_m_async_set_irq_state+0x12>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    24aa:	6903      	ldr	r3, [r0, #16]
	if (value == 0x0) {
    24ac:	b182      	cbz	r2, 24d0 <_i2c_m_async_set_irq_state+0x30>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    24ae:	2280      	movs	r2, #128	; 0x80
    24b0:	759a      	strb	r2, [r3, #22]
    24b2:	4770      	bx	lr
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    24b4:	6903      	ldr	r3, [r0, #16]
	if (value == 0x0) {
    24b6:	b92a      	cbnz	r2, 24c4 <_i2c_m_async_set_irq_state+0x24>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    24b8:	2202      	movs	r2, #2
    24ba:	751a      	strb	r2, [r3, #20]
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    24bc:	6903      	ldr	r3, [r0, #16]
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    24be:	2201      	movs	r2, #1
    24c0:	751a      	strb	r2, [r3, #20]
    24c2:	4770      	bx	lr
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    24c4:	2202      	movs	r2, #2
    24c6:	759a      	strb	r2, [r3, #22]
    24c8:	6903      	ldr	r3, [r0, #16]
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    24ca:	2201      	movs	r2, #1
    24cc:	759a      	strb	r2, [r3, #22]
    24ce:	4770      	bx	lr
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    24d0:	2280      	movs	r2, #128	; 0x80
    24d2:	751a      	strb	r2, [r3, #20]
    24d4:	4770      	bx	lr
	...

000024d8 <SERCOM1_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_0_Handler(void)
{
    24d8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    24da:	4b02      	ldr	r3, [pc, #8]	; (24e4 <SERCOM1_0_Handler+0xc>)
    24dc:	6818      	ldr	r0, [r3, #0]
    24de:	4b02      	ldr	r3, [pc, #8]	; (24e8 <SERCOM1_0_Handler+0x10>)
    24e0:	4798      	blx	r3
    24e2:	bd08      	pop	{r3, pc}
    24e4:	200005fc 	.word	0x200005fc
    24e8:	00001f91 	.word	0x00001f91

000024ec <SERCOM1_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_1_Handler(void)
{
    24ec:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    24ee:	4b02      	ldr	r3, [pc, #8]	; (24f8 <SERCOM1_1_Handler+0xc>)
    24f0:	6818      	ldr	r0, [r3, #0]
    24f2:	4b02      	ldr	r3, [pc, #8]	; (24fc <SERCOM1_1_Handler+0x10>)
    24f4:	4798      	blx	r3
    24f6:	bd08      	pop	{r3, pc}
    24f8:	200005fc 	.word	0x200005fc
    24fc:	00001f91 	.word	0x00001f91

00002500 <SERCOM1_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_2_Handler(void)
{
    2500:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    2502:	4b02      	ldr	r3, [pc, #8]	; (250c <SERCOM1_2_Handler+0xc>)
    2504:	6818      	ldr	r0, [r3, #0]
    2506:	4b02      	ldr	r3, [pc, #8]	; (2510 <SERCOM1_2_Handler+0x10>)
    2508:	4798      	blx	r3
    250a:	bd08      	pop	{r3, pc}
    250c:	200005fc 	.word	0x200005fc
    2510:	00001f91 	.word	0x00001f91

00002514 <SERCOM1_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_3_Handler(void)
{
    2514:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    2516:	4b02      	ldr	r3, [pc, #8]	; (2520 <SERCOM1_3_Handler+0xc>)
    2518:	6818      	ldr	r0, [r3, #0]
    251a:	4b02      	ldr	r3, [pc, #8]	; (2524 <SERCOM1_3_Handler+0x10>)
    251c:	4798      	blx	r3
    251e:	bd08      	pop	{r3, pc}
    2520:	200005fc 	.word	0x200005fc
    2524:	00001f91 	.word	0x00001f91

00002528 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    2528:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    252a:	4b02      	ldr	r3, [pc, #8]	; (2534 <SERCOM5_0_Handler+0xc>)
    252c:	6858      	ldr	r0, [r3, #4]
    252e:	4b02      	ldr	r3, [pc, #8]	; (2538 <SERCOM5_0_Handler+0x10>)
    2530:	4798      	blx	r3
    2532:	bd08      	pop	{r3, pc}
    2534:	200005fc 	.word	0x200005fc
    2538:	00001f91 	.word	0x00001f91

0000253c <SERCOM5_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    253c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    253e:	4b02      	ldr	r3, [pc, #8]	; (2548 <SERCOM5_1_Handler+0xc>)
    2540:	6858      	ldr	r0, [r3, #4]
    2542:	4b02      	ldr	r3, [pc, #8]	; (254c <SERCOM5_1_Handler+0x10>)
    2544:	4798      	blx	r3
    2546:	bd08      	pop	{r3, pc}
    2548:	200005fc 	.word	0x200005fc
    254c:	00001f91 	.word	0x00001f91

00002550 <SERCOM5_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    2550:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2552:	4b02      	ldr	r3, [pc, #8]	; (255c <SERCOM5_2_Handler+0xc>)
    2554:	6858      	ldr	r0, [r3, #4]
    2556:	4b02      	ldr	r3, [pc, #8]	; (2560 <SERCOM5_2_Handler+0x10>)
    2558:	4798      	blx	r3
    255a:	bd08      	pop	{r3, pc}
    255c:	200005fc 	.word	0x200005fc
    2560:	00001f91 	.word	0x00001f91

00002564 <SERCOM5_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    2564:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2566:	4b02      	ldr	r3, [pc, #8]	; (2570 <SERCOM5_3_Handler+0xc>)
    2568:	6858      	ldr	r0, [r3, #4]
    256a:	4b02      	ldr	r3, [pc, #8]	; (2574 <SERCOM5_3_Handler+0x10>)
    256c:	4798      	blx	r3
    256e:	bd08      	pop	{r3, pc}
    2570:	200005fc 	.word	0x200005fc
    2574:	00001f91 	.word	0x00001f91

00002578 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    2578:	b570      	push	{r4, r5, r6, lr}
    257a:	4606      	mov	r6, r0
    257c:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    257e:	4608      	mov	r0, r1
    2580:	4b5d      	ldr	r3, [pc, #372]	; (26f8 <_spi_m_sync_init+0x180>)
    2582:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    2584:	b168      	cbz	r0, 25a2 <_spi_m_sync_init+0x2a>
    2586:	4603      	mov	r3, r0
    2588:	2804      	cmp	r0, #4
    258a:	bf08      	it	eq
    258c:	2301      	moveq	r3, #1
    258e:	d009      	beq.n	25a4 <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2590:	2e00      	cmp	r6, #0
    2592:	f000 809f 	beq.w	26d4 <_spi_m_sync_init+0x15c>
    2596:	2c00      	cmp	r4, #0
    2598:	f040 80a5 	bne.w	26e6 <_spi_m_sync_init+0x16e>
	return NULL;
    259c:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    259e:	2000      	movs	r0, #0
    25a0:	e009      	b.n	25b6 <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    25a2:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    25a4:	4d55      	ldr	r5, [pc, #340]	; (26fc <_spi_m_sync_init+0x184>)
    25a6:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    25aa:	441d      	add	r5, r3
	ASSERT(dev && hw);
    25ac:	2e00      	cmp	r6, #0
    25ae:	d0f6      	beq.n	259e <_spi_m_sync_init+0x26>
    25b0:	2001      	movs	r0, #1
    25b2:	2c00      	cmp	r4, #0
    25b4:	d0f3      	beq.n	259e <_spi_m_sync_init+0x26>
    25b6:	f640 12ac 	movw	r2, #2476	; 0x9ac
    25ba:	4951      	ldr	r1, [pc, #324]	; (2700 <_spi_m_sync_init+0x188>)
    25bc:	4b51      	ldr	r3, [pc, #324]	; (2704 <_spi_m_sync_init+0x18c>)
    25be:	4798      	blx	r3

	if (regs == NULL) {
    25c0:	2d00      	cmp	r5, #0
    25c2:	f000 8084 	beq.w	26ce <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    25c6:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    25c8:	f013 0f01 	tst.w	r3, #1
    25cc:	d11d      	bne.n	260a <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    25ce:	682b      	ldr	r3, [r5, #0]
    25d0:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    25d4:	69e3      	ldr	r3, [r4, #28]
    25d6:	f013 0f03 	tst.w	r3, #3
    25da:	d1fb      	bne.n	25d4 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    25dc:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    25de:	f013 0f02 	tst.w	r3, #2
    25e2:	d00b      	beq.n	25fc <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    25e4:	6823      	ldr	r3, [r4, #0]
    25e6:	f023 0302 	bic.w	r3, r3, #2
    25ea:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    25ec:	69e3      	ldr	r3, [r4, #28]
    25ee:	f013 0f03 	tst.w	r3, #3
    25f2:	d1fb      	bne.n	25ec <_spi_m_sync_init+0x74>
    25f4:	69e3      	ldr	r3, [r4, #28]
    25f6:	f013 0f02 	tst.w	r3, #2
    25fa:	d1fb      	bne.n	25f4 <_spi_m_sync_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    25fc:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2600:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2602:	69e3      	ldr	r3, [r4, #28]
    2604:	f013 0f03 	tst.w	r3, #3
    2608:	d1fb      	bne.n	2602 <_spi_m_sync_init+0x8a>
    260a:	69e3      	ldr	r3, [r4, #28]
    260c:	f013 0f01 	tst.w	r3, #1
    2610:	d1fb      	bne.n	260a <_spi_m_sync_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    2612:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    2614:	682b      	ldr	r3, [r5, #0]
    2616:	f003 031c 	and.w	r3, r3, #28
    261a:	2b08      	cmp	r3, #8
    261c:	d02e      	beq.n	267c <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    261e:	f640 123c 	movw	r2, #2364	; 0x93c
    2622:	4937      	ldr	r1, [pc, #220]	; (2700 <_spi_m_sync_init+0x188>)
    2624:	1c20      	adds	r0, r4, #0
    2626:	bf18      	it	ne
    2628:	2001      	movne	r0, #1
    262a:	4b36      	ldr	r3, [pc, #216]	; (2704 <_spi_m_sync_init+0x18c>)
    262c:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    262e:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    2630:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    2634:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2638:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    263a:	69e3      	ldr	r3, [r4, #28]
    263c:	f013 0f03 	tst.w	r3, #3
    2640:	d1fb      	bne.n	263a <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    2642:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    2644:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    2648:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    264c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2650:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2652:	69e3      	ldr	r3, [r4, #28]
    2654:	f013 0f17 	tst.w	r3, #23
    2658:	d1fb      	bne.n	2652 <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    265a:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    265c:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    265e:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2660:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2664:	686b      	ldr	r3, [r5, #4]
    2666:	f003 0307 	and.w	r3, r3, #7
    266a:	2b00      	cmp	r3, #0
    266c:	bf0c      	ite	eq
    266e:	2301      	moveq	r3, #1
    2670:	2302      	movne	r3, #2
    2672:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    2674:	89eb      	ldrh	r3, [r5, #14]
    2676:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    2678:	2000      	movs	r0, #0
    267a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    267c:	f44f 6215 	mov.w	r2, #2384	; 0x950
    2680:	491f      	ldr	r1, [pc, #124]	; (2700 <_spi_m_sync_init+0x188>)
    2682:	1c20      	adds	r0, r4, #0
    2684:	bf18      	it	ne
    2686:	2001      	movne	r0, #1
    2688:	4b1e      	ldr	r3, [pc, #120]	; (2704 <_spi_m_sync_init+0x18c>)
    268a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    268c:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    268e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    2692:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2696:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2698:	69e3      	ldr	r3, [r4, #28]
    269a:	f013 0f03 	tst.w	r3, #3
    269e:	d1fb      	bne.n	2698 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    26a0:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    26a2:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    26a6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    26aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    26ae:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    26b2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    26b4:	69e3      	ldr	r3, [r4, #28]
    26b6:	f013 0f17 	tst.w	r3, #23
    26ba:	d1fb      	bne.n	26b4 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    26bc:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    26be:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    26c0:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    26c2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    26c6:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    26c8:	2b00      	cmp	r3, #0
    26ca:	d1fc      	bne.n	26c6 <_spi_m_sync_init+0x14e>
    26cc:	e7ca      	b.n	2664 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    26ce:	f06f 000c 	mvn.w	r0, #12
    26d2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    26d4:	f640 12ac 	movw	r2, #2476	; 0x9ac
    26d8:	4909      	ldr	r1, [pc, #36]	; (2700 <_spi_m_sync_init+0x188>)
    26da:	2000      	movs	r0, #0
    26dc:	4b09      	ldr	r3, [pc, #36]	; (2704 <_spi_m_sync_init+0x18c>)
    26de:	4798      	blx	r3
		return ERR_INVALID_ARG;
    26e0:	f06f 000c 	mvn.w	r0, #12
    26e4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    26e6:	f640 12ac 	movw	r2, #2476	; 0x9ac
    26ea:	4905      	ldr	r1, [pc, #20]	; (2700 <_spi_m_sync_init+0x188>)
    26ec:	2001      	movs	r0, #1
    26ee:	4b05      	ldr	r3, [pc, #20]	; (2704 <_spi_m_sync_init+0x18c>)
    26f0:	4798      	blx	r3
		return ERR_INVALID_ARG;
    26f2:	f06f 000c 	mvn.w	r0, #12
    26f6:	bd70      	pop	{r4, r5, r6, pc}
    26f8:	00001e01 	.word	0x00001e01
    26fc:	000055cc 	.word	0x000055cc
    2700:	000055f0 	.word	0x000055f0
    2704:	000018ad 	.word	0x000018ad

00002708 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    270c:	4681      	mov	r9, r0
    270e:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    2710:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2712:	f8d1 8000 	ldr.w	r8, [r1]
    2716:	684d      	ldr	r5, [r1, #4]
    2718:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    271a:	b1a8      	cbz	r0, 2748 <_spi_m_sync_trans+0x40>
    271c:	1c20      	adds	r0, r4, #0
    271e:	bf18      	it	ne
    2720:	2001      	movne	r0, #1
    2722:	f44f 6231 	mov.w	r2, #2832	; 0xb10
    2726:	492e      	ldr	r1, [pc, #184]	; (27e0 <_spi_m_sync_trans+0xd8>)
    2728:	4b2e      	ldr	r3, [pc, #184]	; (27e4 <_spi_m_sync_trans+0xdc>)
    272a:	4798      	blx	r3
    272c:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    272e:	f013 0f07 	tst.w	r3, #7
    2732:	d134      	bne.n	279e <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2734:	69e0      	ldr	r0, [r4, #28]
    2736:	f010 0003 	ands.w	r0, r0, #3
    273a:	d1fb      	bne.n	2734 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    273c:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    273e:	f013 0f02 	tst.w	r3, #2
    2742:	d030      	beq.n	27a6 <_spi_m_sync_trans+0x9e>
    2744:	4602      	mov	r2, r0
    2746:	e008      	b.n	275a <_spi_m_sync_trans+0x52>
    2748:	2000      	movs	r0, #0
    274a:	e7ea      	b.n	2722 <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    274c:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    274e:	f013 0f80 	tst.w	r3, #128	; 0x80
    2752:	d112      	bne.n	277a <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2754:	68b3      	ldr	r3, [r6, #8]
    2756:	4283      	cmp	r3, r0
    2758:	d91e      	bls.n	2798 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    275a:	7e23      	ldrb	r3, [r4, #24]
    275c:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    275e:	f013 0f04 	tst.w	r3, #4
    2762:	d024      	beq.n	27ae <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    2764:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    2766:	2d00      	cmp	r5, #0
    2768:	d0f0      	beq.n	274c <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    276a:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    276c:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    276e:	bf91      	iteee	ls
    2770:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    2772:	0a09      	lsrhi	r1, r1, #8
    2774:	7069      	strbhi	r1, [r5, #1]
    2776:	3502      	addhi	r5, #2
    2778:	e7e8      	b.n	274c <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    277a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    277e:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2780:	2380      	movs	r3, #128	; 0x80
    2782:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    2784:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    2788:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    278a:	f013 0f03 	tst.w	r3, #3
    278e:	d0fb      	beq.n	2788 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2790:	2303      	movs	r3, #3
    2792:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    2794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2798:	4293      	cmp	r3, r2
    279a:	d8de      	bhi.n	275a <_spi_m_sync_trans+0x52>
    279c:	e7f4      	b.n	2788 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    279e:	f06f 0003 	mvn.w	r0, #3
    27a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    27a6:	f06f 0013 	mvn.w	r0, #19
    27aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    27ae:	4290      	cmp	r0, r2
    27b0:	d8cd      	bhi.n	274e <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    27b2:	f013 0f01 	tst.w	r3, #1
    27b6:	d0ca      	beq.n	274e <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    27b8:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    27bc:	f1b8 0f00 	cmp.w	r8, #0
    27c0:	d00b      	beq.n	27da <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    27c2:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    27c6:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    27c8:	bf91      	iteee	ls
    27ca:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    27ce:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    27d2:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    27d6:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    27da:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    27dc:	62a1      	str	r1, [r4, #40]	; 0x28
    27de:	e7b6      	b.n	274e <_spi_m_sync_trans+0x46>
    27e0:	000055f0 	.word	0x000055f0
    27e4:	000018ad 	.word	0x000018ad

000027e8 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    27e8:	4b03      	ldr	r3, [pc, #12]	; (27f8 <_delay_init+0x10>)
    27ea:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    27ee:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    27f0:	2205      	movs	r2, #5
    27f2:	601a      	str	r2, [r3, #0]
    27f4:	4770      	bx	lr
    27f6:	bf00      	nop
    27f8:	e000e010 	.word	0xe000e010

000027fc <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    27fc:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    27fe:	b303      	cbz	r3, 2842 <_delay_cycles+0x46>
{
    2800:	b430      	push	{r4, r5}
    2802:	1e5d      	subs	r5, r3, #1
    2804:	b2ed      	uxtb	r5, r5
	while (n--) {
    2806:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    2808:	4a12      	ldr	r2, [pc, #72]	; (2854 <_delay_cycles+0x58>)
    280a:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    280e:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    2810:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2812:	6813      	ldr	r3, [r2, #0]
    2814:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2818:	d0fb      	beq.n	2812 <_delay_cycles+0x16>
	while (n--) {
    281a:	3801      	subs	r0, #1
    281c:	b2c0      	uxtb	r0, r0
    281e:	28ff      	cmp	r0, #255	; 0xff
    2820:	d1f5      	bne.n	280e <_delay_cycles+0x12>
    2822:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    2826:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    282a:	3101      	adds	r1, #1
    282c:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    282e:	4b09      	ldr	r3, [pc, #36]	; (2854 <_delay_cycles+0x58>)
    2830:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2832:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2834:	461a      	mov	r2, r3
    2836:	6813      	ldr	r3, [r2, #0]
    2838:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    283c:	d0fb      	beq.n	2836 <_delay_cycles+0x3a>
		;
}
    283e:	bc30      	pop	{r4, r5}
    2840:	4770      	bx	lr
	SysTick->LOAD = buf;
    2842:	4b04      	ldr	r3, [pc, #16]	; (2854 <_delay_cycles+0x58>)
    2844:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2846:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2848:	461a      	mov	r2, r3
    284a:	6813      	ldr	r3, [r2, #0]
    284c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2850:	d0fb      	beq.n	284a <_delay_cycles+0x4e>
    2852:	4770      	bx	lr
    2854:	e000e010 	.word	0xe000e010

00002858 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    2858:	2000      	movs	r0, #0
    285a:	4770      	bx	lr

0000285c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    285c:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    285e:	7c83      	ldrb	r3, [r0, #18]
    2860:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2864:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    2866:	f002 0107 	and.w	r1, r2, #7
    286a:	2901      	cmp	r1, #1
    286c:	d00b      	beq.n	2886 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    286e:	015a      	lsls	r2, r3, #5
    2870:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2874:	2110      	movs	r1, #16
    2876:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    287a:	015b      	lsls	r3, r3, #5
    287c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2880:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    2884:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    2886:	f012 0f40 	tst.w	r2, #64	; 0x40
    288a:	d00c      	beq.n	28a6 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    288c:	7cc2      	ldrb	r2, [r0, #19]
    288e:	f36f 1286 	bfc	r2, #6, #1
    2892:	74c2      	strb	r2, [r0, #19]
    2894:	015a      	lsls	r2, r3, #5
    2896:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    289a:	2180      	movs	r1, #128	; 0x80
    289c:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    28a0:	2140      	movs	r1, #64	; 0x40
    28a2:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    28a6:	7cc2      	ldrb	r2, [r0, #19]
    28a8:	f36f 02c3 	bfc	r2, #3, #1
    28ac:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    28ae:	4909      	ldr	r1, [pc, #36]	; (28d4 <_usb_d_dev_handle_setup+0x78>)
    28b0:	015a      	lsls	r2, r3, #5
    28b2:	188c      	adds	r4, r1, r2
    28b4:	2500      	movs	r5, #0
    28b6:	72a5      	strb	r5, [r4, #10]
    28b8:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    28ba:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    28be:	246f      	movs	r4, #111	; 0x6f
    28c0:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    28c4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    28c8:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    28cc:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    28ce:	7c80      	ldrb	r0, [r0, #18]
    28d0:	4798      	blx	r3
    28d2:	bd38      	pop	{r3, r4, r5, pc}
    28d4:	20000604 	.word	0x20000604

000028d8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    28d8:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    28da:	2320      	movs	r3, #32
    28dc:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    28e0:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    28e2:	7c83      	ldrb	r3, [r0, #18]
    28e4:	f003 030f 	and.w	r3, r3, #15
    28e8:	015b      	lsls	r3, r3, #5
    28ea:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    28ee:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    28f2:	4b03      	ldr	r3, [pc, #12]	; (2900 <_usb_d_dev_handle_stall+0x28>)
    28f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    28f6:	6882      	ldr	r2, [r0, #8]
    28f8:	2101      	movs	r1, #1
    28fa:	7c80      	ldrb	r0, [r0, #18]
    28fc:	4798      	blx	r3
    28fe:	bd08      	pop	{r3, pc}
    2900:	20000604 	.word	0x20000604

00002904 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    2904:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2906:	7c84      	ldrb	r4, [r0, #18]
    2908:	2cff      	cmp	r4, #255	; 0xff
    290a:	d003      	beq.n	2914 <_usb_d_dev_trans_done+0x10>
    290c:	7cc3      	ldrb	r3, [r0, #19]
    290e:	f013 0f40 	tst.w	r3, #64	; 0x40
    2912:	d100      	bne.n	2916 <_usb_d_dev_trans_done+0x12>
    2914:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    2916:	7cc2      	ldrb	r2, [r0, #19]
    2918:	f36f 1286 	bfc	r2, #6, #1
    291c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    291e:	4a03      	ldr	r2, [pc, #12]	; (292c <_usb_d_dev_trans_done+0x28>)
    2920:	6f15      	ldr	r5, [r2, #112]	; 0x70
    2922:	6882      	ldr	r2, [r0, #8]
    2924:	4620      	mov	r0, r4
    2926:	47a8      	blx	r5
    2928:	e7f4      	b.n	2914 <_usb_d_dev_trans_done+0x10>
    292a:	bf00      	nop
    292c:	20000604 	.word	0x20000604

00002930 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    2930:	b530      	push	{r4, r5, lr}
    2932:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2934:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    2936:	2425      	movs	r4, #37	; 0x25
    2938:	f88d 4004 	strb.w	r4, [sp, #4]
    293c:	244a      	movs	r4, #74	; 0x4a
    293e:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2942:	2bff      	cmp	r3, #255	; 0xff
    2944:	d01e      	beq.n	2984 <_usb_d_dev_trans_stop+0x54>
    2946:	7cc4      	ldrb	r4, [r0, #19]
    2948:	f014 0f40 	tst.w	r4, #64	; 0x40
    294c:	d01a      	beq.n	2984 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    294e:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    2952:	b1c9      	cbz	r1, 2988 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2954:	0163      	lsls	r3, r4, #5
    2956:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    295a:	2580      	movs	r5, #128	; 0x80
    295c:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    2960:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    2962:	a902      	add	r1, sp, #8
    2964:	440b      	add	r3, r1
    2966:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    296a:	0163      	lsls	r3, r4, #5
    296c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2970:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2974:	0163      	lsls	r3, r4, #5
    2976:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    297a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    297e:	4611      	mov	r1, r2
    2980:	4b05      	ldr	r3, [pc, #20]	; (2998 <_usb_d_dev_trans_stop+0x68>)
    2982:	4798      	blx	r3
}
    2984:	b003      	add	sp, #12
    2986:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2988:	0163      	lsls	r3, r4, #5
    298a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    298e:	2540      	movs	r5, #64	; 0x40
    2990:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    2994:	e7e4      	b.n	2960 <_usb_d_dev_trans_stop+0x30>
    2996:	bf00      	nop
    2998:	00002905 	.word	0x00002905

0000299c <_usb_d_dev_handle_trfail>:
{
    299c:	b530      	push	{r4, r5, lr}
    299e:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    29a0:	7c83      	ldrb	r3, [r0, #18]
    29a2:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    29a6:	2204      	movs	r2, #4
    29a8:	f88d 2004 	strb.w	r2, [sp, #4]
    29ac:	2208      	movs	r2, #8
    29ae:	f88d 2005 	strb.w	r2, [sp, #5]
    29b2:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    29b4:	460c      	mov	r4, r1
    29b6:	b391      	cbz	r1, 2a1e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    29b8:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    29bc:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    29c0:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    29c4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    29c8:	4a32      	ldr	r2, [pc, #200]	; (2a94 <_usb_d_dev_handle_trfail+0xf8>)
    29ca:	440a      	add	r2, r1
    29cc:	7a91      	ldrb	r1, [r2, #10]
    29ce:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    29d0:	2d02      	cmp	r5, #2
    29d2:	d02c      	beq.n	2a2e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    29d4:	f011 0f02 	tst.w	r1, #2
    29d8:	d045      	beq.n	2a66 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    29da:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    29dc:	7a91      	ldrb	r1, [r2, #10]
    29de:	f36f 0141 	bfc	r1, #1, #1
    29e2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    29e4:	aa02      	add	r2, sp, #8
    29e6:	4422      	add	r2, r4
    29e8:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    29ec:	015a      	lsls	r2, r3, #5
    29ee:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    29f2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    29f6:	015b      	lsls	r3, r3, #5
    29f8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    29fc:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    2a00:	f005 0307 	and.w	r3, r5, #7
    2a04:	2b01      	cmp	r3, #1
    2a06:	d143      	bne.n	2a90 <_usb_d_dev_handle_trfail+0xf4>
    2a08:	7cc3      	ldrb	r3, [r0, #19]
    2a0a:	f013 0f40 	tst.w	r3, #64	; 0x40
    2a0e:	d03f      	beq.n	2a90 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2a10:	09d9      	lsrs	r1, r3, #7
    2a12:	428c      	cmp	r4, r1
    2a14:	d03c      	beq.n	2a90 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    2a16:	2200      	movs	r2, #0
    2a18:	4b1f      	ldr	r3, [pc, #124]	; (2a98 <_usb_d_dev_handle_trfail+0xfc>)
    2a1a:	4798      	blx	r3
    2a1c:	e038      	b.n	2a90 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2a1e:	0159      	lsls	r1, r3, #5
    2a20:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2a24:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    2a28:	f005 0507 	and.w	r5, r5, #7
    2a2c:	e7ca      	b.n	29c4 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2a2e:	f011 0f01 	tst.w	r1, #1
    2a32:	d0cf      	beq.n	29d4 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    2a34:	7a91      	ldrb	r1, [r2, #10]
    2a36:	f36f 0100 	bfc	r1, #0, #1
    2a3a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2a3c:	aa02      	add	r2, sp, #8
    2a3e:	4422      	add	r2, r4
    2a40:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2a44:	015a      	lsls	r2, r3, #5
    2a46:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2a4a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2a4e:	015b      	lsls	r3, r3, #5
    2a50:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2a54:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    2a58:	2204      	movs	r2, #4
    2a5a:	1c21      	adds	r1, r4, #0
    2a5c:	bf18      	it	ne
    2a5e:	2101      	movne	r1, #1
    2a60:	4b0d      	ldr	r3, [pc, #52]	; (2a98 <_usb_d_dev_handle_trfail+0xfc>)
    2a62:	4798      	blx	r3
    2a64:	e014      	b.n	2a90 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    2a66:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    2a6a:	4a0a      	ldr	r2, [pc, #40]	; (2a94 <_usb_d_dev_handle_trfail+0xf8>)
    2a6c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    2a70:	2100      	movs	r1, #0
    2a72:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2a74:	aa02      	add	r2, sp, #8
    2a76:	4414      	add	r4, r2
    2a78:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2a7c:	015a      	lsls	r2, r3, #5
    2a7e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2a82:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2a86:	015b      	lsls	r3, r3, #5
    2a88:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2a8c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    2a90:	b003      	add	sp, #12
    2a92:	bd30      	pop	{r4, r5, pc}
    2a94:	20000604 	.word	0x20000604
    2a98:	00002931 	.word	0x00002931

00002a9c <_usb_d_dev_reset_epts>:
{
    2a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2aa0:	4d0c      	ldr	r5, [pc, #48]	; (2ad4 <_usb_d_dev_reset_epts+0x38>)
    2aa2:	f105 0474 	add.w	r4, r5, #116	; 0x74
    2aa6:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2aaa:	f04f 0803 	mov.w	r8, #3
    2aae:	4f0a      	ldr	r7, [pc, #40]	; (2ad8 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    2ab0:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2ab2:	4641      	mov	r1, r8
    2ab4:	4620      	mov	r0, r4
    2ab6:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    2ab8:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    2aba:	2300      	movs	r3, #0
    2abc:	74e3      	strb	r3, [r4, #19]
    2abe:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2ac0:	42ac      	cmp	r4, r5
    2ac2:	d1f6      	bne.n	2ab2 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    2ac4:	2260      	movs	r2, #96	; 0x60
    2ac6:	4619      	mov	r1, r3
    2ac8:	4802      	ldr	r0, [pc, #8]	; (2ad4 <_usb_d_dev_reset_epts+0x38>)
    2aca:	4b04      	ldr	r3, [pc, #16]	; (2adc <_usb_d_dev_reset_epts+0x40>)
    2acc:	4798      	blx	r3
    2ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ad2:	bf00      	nop
    2ad4:	20000604 	.word	0x20000604
    2ad8:	00002905 	.word	0x00002905
    2adc:	00004d81 	.word	0x00004d81

00002ae0 <_usb_d_dev_in_next>:
{
    2ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ae4:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    2ae6:	7c84      	ldrb	r4, [r0, #18]
    2ae8:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2aec:	4688      	mov	r8, r1
    2aee:	2900      	cmp	r1, #0
    2af0:	f000 809f 	beq.w	2c32 <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    2af4:	4b58      	ldr	r3, [pc, #352]	; (2c58 <_usb_d_dev_in_next+0x178>)
    2af6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2afa:	6958      	ldr	r0, [r3, #20]
    2afc:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2b00:	8a2b      	ldrh	r3, [r5, #16]
    2b02:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2b06:	4293      	cmp	r3, r2
    2b08:	f000 808d 	beq.w	2c26 <_usb_d_dev_in_next+0x146>
    2b0c:	3b01      	subs	r3, #1
    2b0e:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2b10:	7cef      	ldrb	r7, [r5, #19]
    2b12:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    2b16:	f1b8 0f00 	cmp.w	r8, #0
    2b1a:	d005      	beq.n	2b28 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2b1c:	0162      	lsls	r2, r4, #5
    2b1e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2b22:	2302      	movs	r3, #2
    2b24:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    2b28:	68a9      	ldr	r1, [r5, #8]
    2b2a:	eb0e 0301 	add.w	r3, lr, r1
    2b2e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    2b30:	686e      	ldr	r6, [r5, #4]
    2b32:	42b3      	cmp	r3, r6
    2b34:	d23f      	bcs.n	2bb6 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    2b36:	1af6      	subs	r6, r6, r3
    2b38:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    2b3a:	7cea      	ldrb	r2, [r5, #19]
    2b3c:	f012 0f20 	tst.w	r2, #32
    2b40:	d02d      	beq.n	2b9e <_usb_d_dev_in_next+0xbe>
    2b42:	8a2a      	ldrh	r2, [r5, #16]
    2b44:	4296      	cmp	r6, r2
    2b46:	bf28      	it	cs
    2b48:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    2b4a:	6829      	ldr	r1, [r5, #0]
    2b4c:	4632      	mov	r2, r6
    2b4e:	4419      	add	r1, r3
    2b50:	68e8      	ldr	r0, [r5, #12]
    2b52:	4b42      	ldr	r3, [pc, #264]	; (2c5c <_usb_d_dev_in_next+0x17c>)
    2b54:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    2b56:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    2b58:	4b3f      	ldr	r3, [pc, #252]	; (2c58 <_usb_d_dev_in_next+0x178>)
    2b5a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2b5e:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2b60:	4b3d      	ldr	r3, [pc, #244]	; (2c58 <_usb_d_dev_in_next+0x178>)
    2b62:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2b66:	695a      	ldr	r2, [r3, #20]
    2b68:	f366 020d 	bfi	r2, r6, #0, #14
    2b6c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2b6e:	695a      	ldr	r2, [r3, #20]
    2b70:	f36f 329b 	bfc	r2, #14, #14
    2b74:	615a      	str	r2, [r3, #20]
	if (!isr) {
    2b76:	f1b8 0f00 	cmp.w	r8, #0
    2b7a:	d108      	bne.n	2b8e <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    2b7c:	2f01      	cmp	r7, #1
    2b7e:	bf0c      	ite	eq
    2b80:	224e      	moveq	r2, #78	; 0x4e
    2b82:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2b84:	0163      	lsls	r3, r4, #5
    2b86:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2b8a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2b8e:	0164      	lsls	r4, r4, #5
    2b90:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2b94:	2380      	movs	r3, #128	; 0x80
    2b96:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    2b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b9e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    2ba2:	bf28      	it	cs
    2ba4:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2ba8:	6829      	ldr	r1, [r5, #0]
    2baa:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    2bac:	4a2a      	ldr	r2, [pc, #168]	; (2c58 <_usb_d_dev_in_next+0x178>)
    2bae:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    2bb2:	6113      	str	r3, [r2, #16]
    2bb4:	e7d4      	b.n	2b60 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    2bb6:	7ceb      	ldrb	r3, [r5, #19]
    2bb8:	f013 0f10 	tst.w	r3, #16
    2bbc:	d00f      	beq.n	2bde <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    2bbe:	7ceb      	ldrb	r3, [r5, #19]
    2bc0:	f36f 1304 	bfc	r3, #4, #1
    2bc4:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2bc6:	4b24      	ldr	r3, [pc, #144]	; (2c58 <_usb_d_dev_in_next+0x178>)
    2bc8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2bcc:	695a      	ldr	r2, [r3, #20]
    2bce:	f36f 020d 	bfc	r2, #0, #14
    2bd2:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2bd4:	695a      	ldr	r2, [r3, #20]
    2bd6:	f36f 329b 	bfc	r2, #14, #14
    2bda:	615a      	str	r2, [r3, #20]
    2bdc:	e7cb      	b.n	2b76 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    2bde:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2be0:	ea4f 1444 	mov.w	r4, r4, lsl #5
    2be4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2be8:	bf0c      	ite	eq
    2bea:	234b      	moveq	r3, #75	; 0x4b
    2bec:	234a      	movne	r3, #74	; 0x4a
    2bee:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    2bf2:	8a2a      	ldrh	r2, [r5, #16]
    2bf4:	ea00 030e 	and.w	r3, r0, lr
    2bf8:	429a      	cmp	r2, r3
    2bfa:	d005      	beq.n	2c08 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2bfc:	2100      	movs	r1, #0
    2bfe:	4628      	mov	r0, r5
    2c00:	4b17      	ldr	r3, [pc, #92]	; (2c60 <_usb_d_dev_in_next+0x180>)
    2c02:	4798      	blx	r3
	return;
    2c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    2c08:	7ceb      	ldrb	r3, [r5, #19]
    2c0a:	f36f 1386 	bfc	r3, #6, #1
    2c0e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2c10:	4b11      	ldr	r3, [pc, #68]	; (2c58 <_usb_d_dev_in_next+0x178>)
    2c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    2c14:	68a9      	ldr	r1, [r5, #8]
    2c16:	7ca8      	ldrb	r0, [r5, #18]
    2c18:	4798      	blx	r3
    2c1a:	b9d0      	cbnz	r0, 2c52 <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    2c1c:	7ceb      	ldrb	r3, [r5, #19]
    2c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2c22:	74eb      	strb	r3, [r5, #19]
    2c24:	e7ea      	b.n	2bfc <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2c26:	7cef      	ldrb	r7, [r5, #19]
    2c28:	f007 0707 	and.w	r7, r7, #7
    2c2c:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2c30:	e774      	b.n	2b1c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2c32:	8a03      	ldrh	r3, [r0, #16]
    2c34:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2c38:	4293      	cmp	r3, r2
    2c3a:	d107      	bne.n	2c4c <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2c3c:	7cef      	ldrb	r7, [r5, #19]
    2c3e:	f007 0707 	and.w	r7, r7, #7
    2c42:	f04f 0e00 	mov.w	lr, #0
    2c46:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2c4a:	e76d      	b.n	2b28 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2c4c:	f04f 0e00 	mov.w	lr, #0
    2c50:	e75c      	b.n	2b0c <_usb_d_dev_in_next+0x2c>
    2c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c56:	bf00      	nop
    2c58:	20000604 	.word	0x20000604
    2c5c:	00004c4d 	.word	0x00004c4d
    2c60:	00002905 	.word	0x00002905

00002c64 <_usb_d_dev_out_next>:
{
    2c64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c68:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    2c6a:	7c85      	ldrb	r5, [r0, #18]
    2c6c:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    2c70:	4689      	mov	r9, r1
    2c72:	2900      	cmp	r1, #0
    2c74:	d056      	beq.n	2d24 <_usb_d_dev_out_next+0xc0>
    2c76:	4b74      	ldr	r3, [pc, #464]	; (2e48 <_usb_d_dev_out_next+0x1e4>)
    2c78:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2c7c:	685a      	ldr	r2, [r3, #4]
    2c7e:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    2c82:	685f      	ldr	r7, [r3, #4]
    2c84:	f3c7 070d 	ubfx	r7, r7, #0, #14
    2c88:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2c8a:	8a06      	ldrh	r6, [r0, #16]
    2c8c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2c90:	429e      	cmp	r6, r3
    2c92:	f000 80ba 	beq.w	2e0a <_usb_d_dev_out_next+0x1a6>
    2c96:	3e01      	subs	r6, #1
    2c98:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    2c9a:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2c9e:	f894 8013 	ldrb.w	r8, [r4, #19]
    2ca2:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    2ca6:	f1b9 0f00 	cmp.w	r9, #0
    2caa:	d005      	beq.n	2cb8 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2cac:	016b      	lsls	r3, r5, #5
    2cae:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2cb2:	2201      	movs	r2, #1
    2cb4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    2cb8:	7ce3      	ldrb	r3, [r4, #19]
    2cba:	f013 0f20 	tst.w	r3, #32
    2cbe:	d00d      	beq.n	2cdc <_usb_d_dev_out_next+0x78>
    2cc0:	6862      	ldr	r2, [r4, #4]
    2cc2:	2a00      	cmp	r2, #0
    2cc4:	d037      	beq.n	2d36 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    2cc6:	68a0      	ldr	r0, [r4, #8]
    2cc8:	1a12      	subs	r2, r2, r0
    2cca:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    2ccc:	6823      	ldr	r3, [r4, #0]
    2cce:	42ba      	cmp	r2, r7
    2cd0:	bf28      	it	cs
    2cd2:	463a      	movcs	r2, r7
    2cd4:	68e1      	ldr	r1, [r4, #12]
    2cd6:	4418      	add	r0, r3
    2cd8:	4b5c      	ldr	r3, [pc, #368]	; (2e4c <_usb_d_dev_out_next+0x1e8>)
    2cda:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2cdc:	6863      	ldr	r3, [r4, #4]
    2cde:	b353      	cbz	r3, 2d36 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    2ce0:	f1b9 0f00 	cmp.w	r9, #0
    2ce4:	d040      	beq.n	2d68 <_usb_d_dev_out_next+0x104>
    2ce6:	8a22      	ldrh	r2, [r4, #16]
    2ce8:	42ba      	cmp	r2, r7
    2cea:	d93d      	bls.n	2d68 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    2cec:	7ce3      	ldrb	r3, [r4, #19]
    2cee:	f36f 1304 	bfc	r3, #4, #1
    2cf2:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2cf4:	68a3      	ldr	r3, [r4, #8]
    2cf6:	445b      	add	r3, fp
    2cf8:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    2cfa:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2cfe:	ea4f 1345 	mov.w	r3, r5, lsl #5
    2d02:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2d06:	bf0c      	ite	eq
    2d08:	222d      	moveq	r2, #45	; 0x2d
    2d0a:	2225      	movne	r2, #37	; 0x25
    2d0c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    2d10:	b915      	cbnz	r5, 2d18 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2d12:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    2d14:	4b4c      	ldr	r3, [pc, #304]	; (2e48 <_usb_d_dev_out_next+0x1e4>)
    2d16:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2d18:	2100      	movs	r1, #0
    2d1a:	4620      	mov	r0, r4
    2d1c:	4b4c      	ldr	r3, [pc, #304]	; (2e50 <_usb_d_dev_out_next+0x1ec>)
    2d1e:	4798      	blx	r3
	return;
    2d20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2d24:	8a06      	ldrh	r6, [r0, #16]
    2d26:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2d2a:	429e      	cmp	r6, r3
    2d2c:	d07b      	beq.n	2e26 <_usb_d_dev_out_next+0x1c2>
    2d2e:	f04f 0b00 	mov.w	fp, #0
    2d32:	46da      	mov	sl, fp
    2d34:	e7af      	b.n	2c96 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2d36:	7ce3      	ldrb	r3, [r4, #19]
    2d38:	f013 0f10 	tst.w	r3, #16
    2d3c:	d06c      	beq.n	2e18 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    2d3e:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    2d40:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2d44:	f043 0320 	orr.w	r3, r3, #32
    2d48:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2d4a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2d4c:	493e      	ldr	r1, [pc, #248]	; (2e48 <_usb_d_dev_out_next+0x1e4>)
    2d4e:	016a      	lsls	r2, r5, #5
    2d50:	188b      	adds	r3, r1, r2
    2d52:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2d54:	8a21      	ldrh	r1, [r4, #16]
    2d56:	685a      	ldr	r2, [r3, #4]
    2d58:	f361 329b 	bfi	r2, r1, #14, #14
    2d5c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2d5e:	685a      	ldr	r2, [r3, #4]
    2d60:	f36f 020d 	bfc	r2, #0, #14
    2d64:	605a      	str	r2, [r3, #4]
    2d66:	e01d      	b.n	2da4 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    2d68:	68a2      	ldr	r2, [r4, #8]
    2d6a:	4452      	add	r2, sl
    2d6c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    2d6e:	4293      	cmp	r3, r2
    2d70:	d9c3      	bls.n	2cfa <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    2d72:	1a9b      	subs	r3, r3, r2
    2d74:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    2d76:	7ce1      	ldrb	r1, [r4, #19]
    2d78:	f011 0f20 	tst.w	r1, #32
    2d7c:	d026      	beq.n	2dcc <_usb_d_dev_out_next+0x168>
    2d7e:	8a22      	ldrh	r2, [r4, #16]
    2d80:	4293      	cmp	r3, r2
    2d82:	bf28      	it	cs
    2d84:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2d86:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2d88:	016a      	lsls	r2, r5, #5
    2d8a:	492f      	ldr	r1, [pc, #188]	; (2e48 <_usb_d_dev_out_next+0x1e4>)
    2d8c:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2d8e:	4a2e      	ldr	r2, [pc, #184]	; (2e48 <_usb_d_dev_out_next+0x1e4>)
    2d90:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    2d94:	6851      	ldr	r1, [r2, #4]
    2d96:	f363 319b 	bfi	r1, r3, #14, #14
    2d9a:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2d9c:	6853      	ldr	r3, [r2, #4]
    2d9e:	f36f 030d 	bfc	r3, #0, #14
    2da2:	6053      	str	r3, [r2, #4]
	if (!isr) {
    2da4:	f1b9 0f00 	cmp.w	r9, #0
    2da8:	d108      	bne.n	2dbc <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    2daa:	f1b8 0f01 	cmp.w	r8, #1
    2dae:	d025      	beq.n	2dfc <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    2db0:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2db2:	016b      	lsls	r3, r5, #5
    2db4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2db8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2dbc:	016d      	lsls	r5, r5, #5
    2dbe:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    2dc2:	2340      	movs	r3, #64	; 0x40
    2dc4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    2dc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    2dcc:	8a21      	ldrh	r1, [r4, #16]
    2dce:	428b      	cmp	r3, r1
    2dd0:	d90a      	bls.n	2de8 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    2dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    2dd6:	d80e      	bhi.n	2df6 <_usb_d_dev_out_next+0x192>
    2dd8:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2ddc:	6821      	ldr	r1, [r4, #0]
    2dde:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    2de0:	0169      	lsls	r1, r5, #5
    2de2:	4819      	ldr	r0, [pc, #100]	; (2e48 <_usb_d_dev_out_next+0x1e4>)
    2de4:	5042      	str	r2, [r0, r1]
    2de6:	e7d2      	b.n	2d8e <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    2de8:	428b      	cmp	r3, r1
    2dea:	d2f7      	bcs.n	2ddc <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    2dec:	7ce1      	ldrb	r1, [r4, #19]
    2dee:	f041 0120 	orr.w	r1, r1, #32
    2df2:	74e1      	strb	r1, [r4, #19]
    2df4:	e7f2      	b.n	2ddc <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    2df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2dfa:	e7ef      	b.n	2ddc <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    2dfc:	4b12      	ldr	r3, [pc, #72]	; (2e48 <_usb_d_dev_out_next+0x1e4>)
    2dfe:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2e02:	2200      	movs	r2, #0
    2e04:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    2e06:	222d      	movs	r2, #45	; 0x2d
    2e08:	e7d3      	b.n	2db2 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    2e0a:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2e0e:	f890 8013 	ldrb.w	r8, [r0, #19]
    2e12:	f008 0807 	and.w	r8, r8, #7
    2e16:	e749      	b.n	2cac <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    2e18:	f1b9 0f00 	cmp.w	r9, #0
    2e1c:	d10b      	bne.n	2e36 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    2e1e:	68a3      	ldr	r3, [r4, #8]
    2e20:	4453      	add	r3, sl
    2e22:	60a3      	str	r3, [r4, #8]
    2e24:	e769      	b.n	2cfa <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2e26:	f890 8013 	ldrb.w	r8, [r0, #19]
    2e2a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    2e2e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2e30:	46bb      	mov	fp, r7
    2e32:	46ba      	mov	sl, r7
    2e34:	e740      	b.n	2cb8 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    2e36:	8a23      	ldrh	r3, [r4, #16]
    2e38:	42bb      	cmp	r3, r7
    2e3a:	f63f af57 	bhi.w	2cec <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    2e3e:	68a3      	ldr	r3, [r4, #8]
    2e40:	4453      	add	r3, sl
    2e42:	60a3      	str	r3, [r4, #8]
    2e44:	e759      	b.n	2cfa <_usb_d_dev_out_next+0x96>
    2e46:	bf00      	nop
    2e48:	20000604 	.word	0x20000604
    2e4c:	00004c4d 	.word	0x00004c4d
    2e50:	00002905 	.word	0x00002905

00002e54 <_usb_d_dev_handler>:
{
    2e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    2e58:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2e5c:	8c1e      	ldrh	r6, [r3, #32]
    2e5e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2e60:	b146      	cbz	r6, 2e74 <_usb_d_dev_handler+0x20>
    2e62:	4d91      	ldr	r5, [pc, #580]	; (30a8 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    2e64:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2e66:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    2e6a:	f8df 9258 	ldr.w	r9, [pc, #600]	; 30c4 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    2e6e:	f8df 8258 	ldr.w	r8, [pc, #600]	; 30c8 <_usb_d_dev_handler+0x274>
    2e72:	e0d3      	b.n	301c <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2e74:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    2e76:	8b1b      	ldrh	r3, [r3, #24]
    2e78:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    2e7a:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    2e7c:	f013 0f04 	tst.w	r3, #4
    2e80:	d11d      	bne.n	2ebe <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    2e82:	f413 7f00 	tst.w	r3, #512	; 0x200
    2e86:	d123      	bne.n	2ed0 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2e88:	f013 0f80 	tst.w	r3, #128	; 0x80
    2e8c:	d147      	bne.n	2f1e <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    2e8e:	f013 0f70 	tst.w	r3, #112	; 0x70
    2e92:	d14f      	bne.n	2f34 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    2e94:	f013 0f08 	tst.w	r3, #8
    2e98:	d16e      	bne.n	2f78 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    2e9a:	f013 0f01 	tst.w	r3, #1
    2e9e:	d0e0      	beq.n	2e62 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2ea0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2ea4:	f240 2201 	movw	r2, #513	; 0x201
    2ea8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2eaa:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2eac:	2270      	movs	r2, #112	; 0x70
    2eae:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2eb0:	4b7e      	ldr	r3, [pc, #504]	; (30ac <_usb_d_dev_handler+0x258>)
    2eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2eb4:	2100      	movs	r1, #0
    2eb6:	2004      	movs	r0, #4
    2eb8:	4798      	blx	r3
    2eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2ebe:	2204      	movs	r2, #4
    2ec0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2ec4:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    2ec6:	4b79      	ldr	r3, [pc, #484]	; (30ac <_usb_d_dev_handler+0x258>)
    2ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2eca:	4798      	blx	r3
    2ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ed0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2ed4:	f240 2201 	movw	r2, #513	; 0x201
    2ed8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2eda:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2edc:	2270      	movs	r2, #112	; 0x70
    2ede:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2ee0:	4b72      	ldr	r3, [pc, #456]	; (30ac <_usb_d_dev_handler+0x258>)
    2ee2:	891b      	ldrh	r3, [r3, #8]
    2ee4:	f003 030f 	and.w	r3, r3, #15
    2ee8:	2b03      	cmp	r3, #3
    2eea:	d00e      	beq.n	2f0a <_usb_d_dev_handler+0xb6>
    2eec:	4b6f      	ldr	r3, [pc, #444]	; (30ac <_usb_d_dev_handler+0x258>)
    2eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2ef0:	f003 030f 	and.w	r3, r3, #15
    2ef4:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2ef6:	bf08      	it	eq
    2ef8:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2efa:	d007      	beq.n	2f0c <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    2efc:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2efe:	4b6b      	ldr	r3, [pc, #428]	; (30ac <_usb_d_dev_handler+0x258>)
    2f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2f02:	2003      	movs	r0, #3
    2f04:	4798      	blx	r3
    2f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2f0a:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2f0c:	4b67      	ldr	r3, [pc, #412]	; (30ac <_usb_d_dev_handler+0x258>)
    2f0e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    2f12:	8919      	ldrh	r1, [r3, #8]
    2f14:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    2f18:	2200      	movs	r2, #0
    2f1a:	811a      	strh	r2, [r3, #8]
    2f1c:	e7ef      	b.n	2efe <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2f1e:	2280      	movs	r2, #128	; 0x80
    2f20:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2f24:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    2f26:	4b61      	ldr	r3, [pc, #388]	; (30ac <_usb_d_dev_handler+0x258>)
    2f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2f2a:	2100      	movs	r1, #0
    2f2c:	2005      	movs	r0, #5
    2f2e:	4798      	blx	r3
    2f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f34:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2f38:	2270      	movs	r2, #112	; 0x70
    2f3a:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2f3c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2f3e:	f240 2201 	movw	r2, #513	; 0x201
    2f42:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2f44:	4b5a      	ldr	r3, [pc, #360]	; (30b0 <_usb_d_dev_handler+0x25c>)
    2f46:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    2f4a:	f013 0f01 	tst.w	r3, #1
    2f4e:	d00d      	beq.n	2f6c <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2f50:	4a57      	ldr	r2, [pc, #348]	; (30b0 <_usb_d_dev_handler+0x25c>)
    2f52:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2f54:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    2f58:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2f5c:	d1f9      	bne.n	2f52 <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    2f5e:	4b53      	ldr	r3, [pc, #332]	; (30ac <_usb_d_dev_handler+0x258>)
    2f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2f62:	2100      	movs	r1, #0
    2f64:	2002      	movs	r0, #2
    2f66:	4798      	blx	r3
    2f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2f6c:	4a50      	ldr	r2, [pc, #320]	; (30b0 <_usb_d_dev_handler+0x25c>)
    2f6e:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    2f70:	f413 7f80 	tst.w	r3, #256	; 0x100
    2f74:	d0fb      	beq.n	2f6e <_usb_d_dev_handler+0x11a>
    2f76:	e7f2      	b.n	2f5e <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2f78:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2f7c:	2400      	movs	r4, #0
    2f7e:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2f82:	2208      	movs	r2, #8
    2f84:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2f86:	2270      	movs	r2, #112	; 0x70
    2f88:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2f8a:	f240 2201 	movw	r2, #513	; 0x201
    2f8e:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    2f90:	4b48      	ldr	r3, [pc, #288]	; (30b4 <_usb_d_dev_handler+0x260>)
    2f92:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    2f94:	4b45      	ldr	r3, [pc, #276]	; (30ac <_usb_d_dev_handler+0x258>)
    2f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2f98:	4621      	mov	r1, r4
    2f9a:	2001      	movs	r0, #1
    2f9c:	4798      	blx	r3
    2f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2fa2:	f011 0f10 	tst.w	r1, #16
    2fa6:	d109      	bne.n	2fbc <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2fa8:	f011 0f40 	tst.w	r1, #64	; 0x40
    2fac:	d108      	bne.n	2fc0 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2fae:	f011 0f20 	tst.w	r1, #32
    2fb2:	d02f      	beq.n	3014 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    2fb4:	2100      	movs	r1, #0
    2fb6:	4b40      	ldr	r3, [pc, #256]	; (30b8 <_usb_d_dev_handler+0x264>)
    2fb8:	4798      	blx	r3
    2fba:	e02b      	b.n	3014 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    2fbc:	47c8      	blx	r9
    2fbe:	e029      	b.n	3014 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    2fc0:	2101      	movs	r1, #1
    2fc2:	4b3d      	ldr	r3, [pc, #244]	; (30b8 <_usb_d_dev_handler+0x264>)
    2fc4:	4798      	blx	r3
    2fc6:	e025      	b.n	3014 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2fc8:	f011 0f40 	tst.w	r1, #64	; 0x40
    2fcc:	d111      	bne.n	2ff2 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2fce:	f011 0f08 	tst.w	r1, #8
    2fd2:	d112      	bne.n	2ffa <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2fd4:	f011 0f02 	tst.w	r1, #2
    2fd8:	d112      	bne.n	3000 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2fda:	f003 0307 	and.w	r3, r3, #7
    2fde:	2b01      	cmp	r3, #1
    2fe0:	d118      	bne.n	3014 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2fe2:	f011 0f04 	tst.w	r1, #4
    2fe6:	d10f      	bne.n	3008 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2fe8:	f011 0f10 	tst.w	r1, #16
    2fec:	d012      	beq.n	3014 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    2fee:	47c8      	blx	r9
    2ff0:	e010      	b.n	3014 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    2ff2:	2101      	movs	r1, #1
    2ff4:	4b30      	ldr	r3, [pc, #192]	; (30b8 <_usb_d_dev_handler+0x264>)
    2ff6:	4798      	blx	r3
    2ff8:	e00c      	b.n	3014 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    2ffa:	2101      	movs	r1, #1
    2ffc:	47c0      	blx	r8
    2ffe:	e009      	b.n	3014 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    3000:	2101      	movs	r1, #1
    3002:	4b2e      	ldr	r3, [pc, #184]	; (30bc <_usb_d_dev_handler+0x268>)
    3004:	4798      	blx	r3
    3006:	e005      	b.n	3014 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    3008:	2100      	movs	r1, #0
    300a:	47c0      	blx	r8
    300c:	e002      	b.n	3014 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    300e:	2100      	movs	r1, #0
    3010:	4b29      	ldr	r3, [pc, #164]	; (30b8 <_usb_d_dev_handler+0x264>)
    3012:	4798      	blx	r3
    3014:	3401      	adds	r4, #1
    3016:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    3018:	2c09      	cmp	r4, #9
    301a:	d042      	beq.n	30a2 <_usb_d_dev_handler+0x24e>
    301c:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    301e:	7cab      	ldrb	r3, [r5, #18]
    3020:	2bff      	cmp	r3, #255	; 0xff
    3022:	d0f7      	beq.n	3014 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    3024:	f003 030f 	and.w	r3, r3, #15
    3028:	2101      	movs	r1, #1
    302a:	4099      	lsls	r1, r3
    302c:	4231      	tst	r1, r6
    302e:	d0f1      	beq.n	3014 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3030:	0159      	lsls	r1, r3, #5
    3032:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    3036:	f501 7180 	add.w	r1, r1, #256	; 0x100
    303a:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    303c:	015b      	lsls	r3, r3, #5
    303e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3042:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    3046:	4019      	ands	r1, r3
    3048:	d0e4      	beq.n	3014 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    304a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    304e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    3052:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    3056:	f003 0247 	and.w	r2, r3, #71	; 0x47
    305a:	2a01      	cmp	r2, #1
    305c:	d0a1      	beq.n	2fa2 <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    305e:	f013 0f80 	tst.w	r3, #128	; 0x80
    3062:	d1b1      	bne.n	2fc8 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3064:	f011 0f20 	tst.w	r1, #32
    3068:	d1d1      	bne.n	300e <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    306a:	f011 0f04 	tst.w	r1, #4
    306e:	d10e      	bne.n	308e <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3070:	f011 0f01 	tst.w	r1, #1
    3074:	d10e      	bne.n	3094 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3076:	f003 0307 	and.w	r3, r3, #7
    307a:	2b01      	cmp	r3, #1
    307c:	d1ca      	bne.n	3014 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    307e:	f011 0f08 	tst.w	r1, #8
    3082:	d10b      	bne.n	309c <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3084:	f011 0f10 	tst.w	r1, #16
    3088:	d0c4      	beq.n	3014 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    308a:	47c8      	blx	r9
    308c:	e7c2      	b.n	3014 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    308e:	2100      	movs	r1, #0
    3090:	47c0      	blx	r8
    3092:	e7bf      	b.n	3014 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    3094:	2101      	movs	r1, #1
    3096:	4b0a      	ldr	r3, [pc, #40]	; (30c0 <_usb_d_dev_handler+0x26c>)
    3098:	4798      	blx	r3
    309a:	e7bb      	b.n	3014 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    309c:	2101      	movs	r1, #1
    309e:	47c0      	blx	r8
    30a0:	e7b8      	b.n	3014 <_usb_d_dev_handler+0x1c0>
    30a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    30a6:	bf00      	nop
    30a8:	20000678 	.word	0x20000678
    30ac:	20000604 	.word	0x20000604
    30b0:	40001000 	.word	0x40001000
    30b4:	00002a9d 	.word	0x00002a9d
    30b8:	000028d9 	.word	0x000028d9
    30bc:	00002ae1 	.word	0x00002ae1
    30c0:	00002c65 	.word	0x00002c65
    30c4:	0000285d 	.word	0x0000285d
    30c8:	0000299d 	.word	0x0000299d

000030cc <_usb_d_dev_init>:
{
    30cc:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    30ce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    30d2:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    30d4:	f013 0f01 	tst.w	r3, #1
    30d8:	d124      	bne.n	3124 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    30da:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    30de:	7893      	ldrb	r3, [r2, #2]
    30e0:	f013 0f03 	tst.w	r3, #3
    30e4:	d1fb      	bne.n	30de <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    30e6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    30ea:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    30ec:	f013 0f02 	tst.w	r3, #2
    30f0:	d00f      	beq.n	3112 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    30f2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    30f6:	7813      	ldrb	r3, [r2, #0]
    30f8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    30fc:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    30fe:	7893      	ldrb	r3, [r2, #2]
    3100:	f013 0f03 	tst.w	r3, #3
    3104:	d1fb      	bne.n	30fe <_usb_d_dev_init+0x32>
    3106:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    310a:	7893      	ldrb	r3, [r2, #2]
    310c:	f013 0f02 	tst.w	r3, #2
    3110:	d1fb      	bne.n	310a <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3112:	2201      	movs	r2, #1
    3114:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3118:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    311a:	461a      	mov	r2, r3
    311c:	7893      	ldrb	r3, [r2, #2]
    311e:	f013 0f03 	tst.w	r3, #3
    3122:	d1fb      	bne.n	311c <_usb_d_dev_init+0x50>
    3124:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3128:	7893      	ldrb	r3, [r2, #2]
    312a:	f013 0f01 	tst.w	r3, #1
    312e:	d1fb      	bne.n	3128 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    3130:	4b21      	ldr	r3, [pc, #132]	; (31b8 <_usb_d_dev_init+0xec>)
    3132:	4a22      	ldr	r2, [pc, #136]	; (31bc <_usb_d_dev_init+0xf0>)
    3134:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    3136:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    3138:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    313a:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    313c:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    313e:	4b20      	ldr	r3, [pc, #128]	; (31c0 <_usb_d_dev_init+0xf4>)
    3140:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    3142:	4b20      	ldr	r3, [pc, #128]	; (31c4 <_usb_d_dev_init+0xf8>)
    3144:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    3146:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    314a:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    314e:	f011 011f 	ands.w	r1, r1, #31
    3152:	d02b      	beq.n	31ac <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    3154:	291f      	cmp	r1, #31
    3156:	bf08      	it	eq
    3158:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    315a:	b34b      	cbz	r3, 31b0 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    315c:	2b1f      	cmp	r3, #31
    315e:	bf08      	it	eq
    3160:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    3162:	b33a      	cbz	r2, 31b4 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    3164:	2a07      	cmp	r2, #7
    3166:	bf08      	it	eq
    3168:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    316a:	f003 031f 	and.w	r3, r3, #31
    316e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    3172:	0312      	lsls	r2, r2, #12
    3174:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    3178:	4313      	orrs	r3, r2
    317a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    317e:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    3180:	78d3      	ldrb	r3, [r2, #3]
    3182:	f043 0303 	orr.w	r3, r3, #3
    3186:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    3188:	78d3      	ldrb	r3, [r2, #3]
    318a:	f043 030c 	orr.w	r3, r3, #12
    318e:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3190:	2304      	movs	r3, #4
    3192:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3194:	7893      	ldrb	r3, [r2, #2]
    3196:	f013 0f03 	tst.w	r3, #3
    319a:	d1fb      	bne.n	3194 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    319c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    31a0:	4a05      	ldr	r2, [pc, #20]	; (31b8 <_usb_d_dev_init+0xec>)
    31a2:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    31a4:	2201      	movs	r2, #1
    31a6:	811a      	strh	r2, [r3, #8]
}
    31a8:	2000      	movs	r0, #0
    31aa:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    31ac:	2109      	movs	r1, #9
    31ae:	e7d4      	b.n	315a <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    31b0:	2319      	movs	r3, #25
    31b2:	e7d6      	b.n	3162 <_usb_d_dev_init+0x96>
		pad_trim = 6;
    31b4:	2206      	movs	r2, #6
    31b6:	e7d8      	b.n	316a <_usb_d_dev_init+0x9e>
    31b8:	20000604 	.word	0x20000604
    31bc:	00002859 	.word	0x00002859
    31c0:	00002a9d 	.word	0x00002a9d
    31c4:	00800084 	.word	0x00800084

000031c8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    31c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    31cc:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    31ce:	f013 0f03 	tst.w	r3, #3
    31d2:	d129      	bne.n	3228 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    31d4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    31d8:	7893      	ldrb	r3, [r2, #2]
    31da:	f013 0f03 	tst.w	r3, #3
    31de:	d1fb      	bne.n	31d8 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    31e0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    31e4:	781b      	ldrb	r3, [r3, #0]
    31e6:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    31e8:	f013 0f02 	tst.w	r3, #2
    31ec:	d108      	bne.n	3200 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    31ee:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    31f2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    31f6:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    31f8:	7893      	ldrb	r3, [r2, #2]
    31fa:	f013 0f03 	tst.w	r3, #3
    31fe:	d1fb      	bne.n	31f8 <_usb_d_dev_enable+0x30>
    3200:	4b0b      	ldr	r3, [pc, #44]	; (3230 <_usb_d_dev_enable+0x68>)
    3202:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3206:	609a      	str	r2, [r3, #8]
    3208:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    320c:	609a      	str	r2, [r3, #8]
    320e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    3212:	609a      	str	r2, [r3, #8]
    3214:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3218:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    321a:	f240 228d 	movw	r2, #653	; 0x28d
    321e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3222:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    3224:	2000      	movs	r0, #0
    3226:	4770      	bx	lr
		return -USB_ERR_DENIED;
    3228:	f06f 0010 	mvn.w	r0, #16
}
    322c:	4770      	bx	lr
    322e:	bf00      	nop
    3230:	e000e100 	.word	0xe000e100

00003234 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3234:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3238:	8913      	ldrh	r3, [r2, #8]
    323a:	f023 0301 	bic.w	r3, r3, #1
    323e:	041b      	lsls	r3, r3, #16
    3240:	0c1b      	lsrs	r3, r3, #16
    3242:	8113      	strh	r3, [r2, #8]
    3244:	4770      	bx	lr

00003246 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    3246:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    324a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    324e:	7298      	strb	r0, [r3, #10]
    3250:	4770      	bx	lr
	...

00003254 <_usb_d_dev_ep_init>:
{
    3254:	b5f0      	push	{r4, r5, r6, r7, lr}
    3256:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    325a:	f010 050f 	ands.w	r5, r0, #15
    325e:	d04d      	beq.n	32fc <_usb_d_dev_ep_init+0xa8>
    3260:	f1be 0f00 	cmp.w	lr, #0
    3264:	bfb4      	ite	lt
    3266:	1cac      	addlt	r4, r5, #2
    3268:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    326a:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    326e:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    3270:	2d02      	cmp	r5, #2
    3272:	d947      	bls.n	3304 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    3274:	f06f 0011 	mvn.w	r0, #17
    3278:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    327a:	f1be 0f00 	cmp.w	lr, #0
    327e:	db1b      	blt.n	32b8 <_usb_d_dev_ep_init+0x64>
    3280:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3284:	4e37      	ldr	r6, [pc, #220]	; (3364 <_usb_d_dev_ep_init+0x110>)
    3286:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    328a:	2d00      	cmp	r5, #0
    328c:	d15e      	bne.n	334c <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    328e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3292:	4d34      	ldr	r5, [pc, #208]	; (3364 <_usb_d_dev_ep_init+0x110>)
    3294:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    3298:	4d33      	ldr	r5, [pc, #204]	; (3368 <_usb_d_dev_ep_init+0x114>)
    329a:	00a6      	lsls	r6, r4, #2
    329c:	1933      	adds	r3, r6, r4
    329e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    32a2:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    32a6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    32aa:	3101      	adds	r1, #1
    32ac:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    32b0:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    32b4:	2000      	movs	r0, #0
    32b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    32b8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    32bc:	4e29      	ldr	r6, [pc, #164]	; (3364 <_usb_d_dev_ep_init+0x110>)
    32be:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    32c2:	686d      	ldr	r5, [r5, #4]
    32c4:	b935      	cbnz	r5, 32d4 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    32c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    32ca:	4d26      	ldr	r5, [pc, #152]	; (3364 <_usb_d_dev_ep_init+0x110>)
    32cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    32d0:	685f      	ldr	r7, [r3, #4]
    32d2:	e7e1      	b.n	3298 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    32d4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    32d8:	4e22      	ldr	r6, [pc, #136]	; (3364 <_usb_d_dev_ep_init+0x110>)
    32da:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    32de:	896d      	ldrh	r5, [r5, #10]
    32e0:	4295      	cmp	r5, r2
    32e2:	daf0      	bge.n	32c6 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    32e4:	f06f 0012 	mvn.w	r0, #18
    32e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    32ea:	f06f 0013 	mvn.w	r0, #19
    32ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    32f0:	f06f 0013 	mvn.w	r0, #19
    32f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    32f6:	f06f 0012 	mvn.w	r0, #18
    32fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    32fc:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    3300:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    3302:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    3304:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    3308:	4f17      	ldr	r7, [pc, #92]	; (3368 <_usb_d_dev_ep_init+0x114>)
    330a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    330e:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    3312:	2eff      	cmp	r6, #255	; 0xff
    3314:	d1e9      	bne.n	32ea <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    3316:	2900      	cmp	r1, #0
    3318:	d1af      	bne.n	327a <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    331a:	b125      	cbz	r5, 3326 <_usb_d_dev_ep_init+0xd2>
    331c:	f1be 0f00 	cmp.w	lr, #0
    3320:	bfa4      	itt	ge
    3322:	3502      	addge	r5, #2
    3324:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    3326:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    332a:	4e0f      	ldr	r6, [pc, #60]	; (3368 <_usb_d_dev_ep_init+0x114>)
    332c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3330:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    3334:	2dff      	cmp	r5, #255	; 0xff
    3336:	d1db      	bne.n	32f0 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    3338:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    333c:	4e09      	ldr	r6, [pc, #36]	; (3364 <_usb_d_dev_ep_init+0x110>)
    333e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    3342:	2d00      	cmp	r5, #0
    3344:	d0d7      	beq.n	32f6 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3346:	f1be 0f00 	cmp.w	lr, #0
    334a:	dbb5      	blt.n	32b8 <_usb_d_dev_ep_init+0x64>
    334c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3350:	4e04      	ldr	r6, [pc, #16]	; (3364 <_usb_d_dev_ep_init+0x110>)
    3352:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3356:	892d      	ldrh	r5, [r5, #8]
    3358:	4295      	cmp	r5, r2
    335a:	da98      	bge.n	328e <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    335c:	f06f 0012 	mvn.w	r0, #18
    3360:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3362:	bf00      	nop
    3364:	0000560c 	.word	0x0000560c
    3368:	20000604 	.word	0x20000604

0000336c <_usb_d_dev_ep_deinit>:
{
    336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    336e:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3370:	f010 060f 	ands.w	r6, r0, #15
    3374:	d00e      	beq.n	3394 <_usb_d_dev_ep_deinit+0x28>
    3376:	2f00      	cmp	r7, #0
    3378:	bfb4      	ite	lt
    337a:	1cb3      	addlt	r3, r6, #2
    337c:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    337e:	2e02      	cmp	r6, #2
    3380:	d900      	bls.n	3384 <_usb_d_dev_ep_deinit+0x18>
    3382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    3384:	461d      	mov	r5, r3
    3386:	3301      	adds	r3, #1
    3388:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    338c:	4a24      	ldr	r2, [pc, #144]	; (3420 <_usb_d_dev_ep_deinit+0xb4>)
    338e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    3392:	e002      	b.n	339a <_usb_d_dev_ep_deinit+0x2e>
    3394:	f8df e094 	ldr.w	lr, [pc, #148]	; 342c <_usb_d_dev_ep_deinit+0xc0>
    3398:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    339a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    339e:	4a21      	ldr	r2, [pc, #132]	; (3424 <_usb_d_dev_ep_deinit+0xb8>)
    33a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    33a4:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    33a8:	2aff      	cmp	r2, #255	; 0xff
    33aa:	d0ea      	beq.n	3382 <_usb_d_dev_ep_deinit+0x16>
    33ac:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    33ae:	2203      	movs	r2, #3
    33b0:	0ff9      	lsrs	r1, r7, #31
    33b2:	4670      	mov	r0, lr
    33b4:	4b1c      	ldr	r3, [pc, #112]	; (3428 <_usb_d_dev_ep_deinit+0xbc>)
    33b6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    33b8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    33bc:	4a19      	ldr	r2, [pc, #100]	; (3424 <_usb_d_dev_ep_deinit+0xb8>)
    33be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    33c2:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    33c6:	f003 0307 	and.w	r3, r3, #7
    33ca:	2b01      	cmp	r3, #1
    33cc:	d016      	beq.n	33fc <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    33ce:	2f00      	cmp	r7, #0
    33d0:	db1b      	blt.n	340a <_usb_d_dev_ep_deinit+0x9e>
    33d2:	0160      	lsls	r0, r4, #5
    33d4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    33d8:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    33dc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    33e0:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    33e4:	4b0f      	ldr	r3, [pc, #60]	; (3424 <_usb_d_dev_ep_deinit+0xb8>)
    33e6:	00aa      	lsls	r2, r5, #2
    33e8:	1951      	adds	r1, r2, r5
    33ea:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    33ee:	2000      	movs	r0, #0
    33f0:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    33f4:	22ff      	movs	r2, #255	; 0xff
    33f6:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    33fa:	e7c2      	b.n	3382 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    33fc:	0160      	lsls	r0, r4, #5
    33fe:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    3402:	2300      	movs	r3, #0
    3404:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    3408:	e7ec      	b.n	33e4 <_usb_d_dev_ep_deinit+0x78>
    340a:	0176      	lsls	r6, r6, #5
    340c:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    3410:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    3414:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    3418:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    341c:	e7e2      	b.n	33e4 <_usb_d_dev_ep_deinit+0x78>
    341e:	bf00      	nop
    3420:	20000664 	.word	0x20000664
    3424:	20000604 	.word	0x20000604
    3428:	00002931 	.word	0x00002931
    342c:	20000678 	.word	0x20000678

00003430 <_usb_d_dev_ep_enable>:
{
    3430:	b5f0      	push	{r4, r5, r6, r7, lr}
    3432:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3434:	f010 000f 	ands.w	r0, r0, #15
    3438:	f000 80a6 	beq.w	3588 <_usb_d_dev_ep_enable+0x158>
    343c:	2f00      	cmp	r7, #0
    343e:	bfb4      	ite	lt
    3440:	1c83      	addlt	r3, r0, #2
    3442:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3444:	4606      	mov	r6, r0
    3446:	0142      	lsls	r2, r0, #5
    3448:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    344c:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    3450:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3452:	2802      	cmp	r0, #2
    3454:	f240 809f 	bls.w	3596 <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    3458:	f06f 0011 	mvn.w	r0, #17
    345c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    345e:	f014 0f77 	tst.w	r4, #119	; 0x77
    3462:	f040 8088 	bne.w	3576 <_usb_d_dev_ep_enable+0x146>
    3466:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    346a:	2111      	movs	r1, #17
    346c:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3470:	4c97      	ldr	r4, [pc, #604]	; (36d0 <_usb_d_dev_ep_enable+0x2a0>)
    3472:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    3476:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    347a:	4996      	ldr	r1, [pc, #600]	; (36d4 <_usb_d_dev_ep_enable+0x2a4>)
    347c:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3480:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    3484:	f200 80cc 	bhi.w	3620 <_usb_d_dev_ep_enable+0x1f0>
    3488:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    348c:	f200 810a 	bhi.w	36a4 <_usb_d_dev_ep_enable+0x274>
    3490:	2c80      	cmp	r4, #128	; 0x80
    3492:	f200 80f9 	bhi.w	3688 <_usb_d_dev_ep_enable+0x258>
    3496:	2c40      	cmp	r4, #64	; 0x40
    3498:	f200 810b 	bhi.w	36b2 <_usb_d_dev_ep_enable+0x282>
    349c:	2c20      	cmp	r4, #32
    349e:	f200 80fa 	bhi.w	3696 <_usb_d_dev_ep_enable+0x266>
    34a2:	2c10      	cmp	r4, #16
    34a4:	f200 810c 	bhi.w	36c0 <_usb_d_dev_ep_enable+0x290>
    34a8:	2c08      	cmp	r4, #8
    34aa:	bf94      	ite	ls
    34ac:	2700      	movls	r7, #0
    34ae:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    34b0:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    34b4:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    34b6:	f3c4 010d 	ubfx	r1, r4, #0, #14
    34ba:	e0b7      	b.n	362c <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    34bc:	f014 0f70 	tst.w	r4, #112	; 0x70
    34c0:	d15c      	bne.n	357c <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    34c2:	4d83      	ldr	r5, [pc, #524]	; (36d0 <_usb_d_dev_ep_enable+0x2a0>)
    34c4:	009f      	lsls	r7, r3, #2
    34c6:	18f9      	adds	r1, r7, r3
    34c8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    34cc:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    34d0:	0109      	lsls	r1, r1, #4
    34d2:	f001 0170 	and.w	r1, r1, #112	; 0x70
    34d6:	430c      	orrs	r4, r1
    34d8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    34dc:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    34e0:	443b      	add	r3, r7
    34e2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    34e6:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    34ea:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    34ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    34f2:	d80f      	bhi.n	3514 <_usb_d_dev_ep_enable+0xe4>
    34f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    34f8:	d819      	bhi.n	352e <_usb_d_dev_ep_enable+0xfe>
    34fa:	2b80      	cmp	r3, #128	; 0x80
    34fc:	d819      	bhi.n	3532 <_usb_d_dev_ep_enable+0x102>
    34fe:	2b40      	cmp	r3, #64	; 0x40
    3500:	d819      	bhi.n	3536 <_usb_d_dev_ep_enable+0x106>
    3502:	2b20      	cmp	r3, #32
    3504:	d819      	bhi.n	353a <_usb_d_dev_ep_enable+0x10a>
    3506:	2b10      	cmp	r3, #16
    3508:	d819      	bhi.n	353e <_usb_d_dev_ep_enable+0x10e>
    350a:	2b08      	cmp	r3, #8
    350c:	bf94      	ite	ls
    350e:	2300      	movls	r3, #0
    3510:	2301      	movhi	r3, #1
    3512:	e000      	b.n	3516 <_usb_d_dev_ep_enable+0xe6>
    3514:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3516:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    351a:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    351c:	2380      	movs	r3, #128	; 0x80
    351e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    3522:	4b6b      	ldr	r3, [pc, #428]	; (36d0 <_usb_d_dev_ep_enable+0x2a0>)
    3524:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    3528:	2000      	movs	r0, #0
    352a:	76b0      	strb	r0, [r6, #26]
    352c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    352e:	2306      	movs	r3, #6
    3530:	e7f1      	b.n	3516 <_usb_d_dev_ep_enable+0xe6>
    3532:	2305      	movs	r3, #5
    3534:	e7ef      	b.n	3516 <_usb_d_dev_ep_enable+0xe6>
    3536:	2304      	movs	r3, #4
    3538:	e7ed      	b.n	3516 <_usb_d_dev_ep_enable+0xe6>
    353a:	2303      	movs	r3, #3
    353c:	e7eb      	b.n	3516 <_usb_d_dev_ep_enable+0xe6>
    353e:	2302      	movs	r3, #2
    3540:	e7e9      	b.n	3516 <_usb_d_dev_ep_enable+0xe6>
    3542:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3544:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3548:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    354a:	2340      	movs	r3, #64	; 0x40
    354c:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    3550:	4b5f      	ldr	r3, [pc, #380]	; (36d0 <_usb_d_dev_ep_enable+0x2a0>)
    3552:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    3556:	2000      	movs	r0, #0
    3558:	72b0      	strb	r0, [r6, #10]
    355a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    355c:	2106      	movs	r1, #6
    355e:	e7f1      	b.n	3544 <_usb_d_dev_ep_enable+0x114>
    3560:	2105      	movs	r1, #5
    3562:	e7ef      	b.n	3544 <_usb_d_dev_ep_enable+0x114>
    3564:	2104      	movs	r1, #4
    3566:	e7ed      	b.n	3544 <_usb_d_dev_ep_enable+0x114>
    3568:	2103      	movs	r1, #3
    356a:	e7eb      	b.n	3544 <_usb_d_dev_ep_enable+0x114>
    356c:	2102      	movs	r1, #2
    356e:	e7e9      	b.n	3544 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    3570:	f06f 0011 	mvn.w	r0, #17
    3574:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3576:	f06f 0013 	mvn.w	r0, #19
    357a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    357c:	f06f 0013 	mvn.w	r0, #19
    3580:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3582:	f06f 0013 	mvn.w	r0, #19
    3586:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3588:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    358c:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    3590:	b2e4      	uxtb	r4, r4
    3592:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    3594:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3596:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    359a:	494d      	ldr	r1, [pc, #308]	; (36d0 <_usb_d_dev_ep_enable+0x2a0>)
    359c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    35a0:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    35a4:	2dff      	cmp	r5, #255	; 0xff
    35a6:	d0e3      	beq.n	3570 <_usb_d_dev_ep_enable+0x140>
    35a8:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    35aa:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    35ac:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    35b0:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    35b4:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    35b8:	f001 0107 	and.w	r1, r1, #7
    35bc:	2901      	cmp	r1, #1
    35be:	f43f af4e 	beq.w	345e <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    35c2:	2f00      	cmp	r7, #0
    35c4:	f6ff af7a 	blt.w	34bc <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    35c8:	f014 0f07 	tst.w	r4, #7
    35cc:	d1d9      	bne.n	3582 <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    35ce:	4d40      	ldr	r5, [pc, #256]	; (36d0 <_usb_d_dev_ep_enable+0x2a0>)
    35d0:	009f      	lsls	r7, r3, #2
    35d2:	18f9      	adds	r1, r7, r3
    35d4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    35d8:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    35dc:	f001 0107 	and.w	r1, r1, #7
    35e0:	430c      	orrs	r4, r1
    35e2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    35e6:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    35ea:	443b      	add	r3, r7
    35ec:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    35f0:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    35f4:	4b37      	ldr	r3, [pc, #220]	; (36d4 <_usb_d_dev_ep_enable+0x2a4>)
    35f6:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    35fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    35fe:	d8a0      	bhi.n	3542 <_usb_d_dev_ep_enable+0x112>
    3600:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    3604:	d8aa      	bhi.n	355c <_usb_d_dev_ep_enable+0x12c>
    3606:	2980      	cmp	r1, #128	; 0x80
    3608:	d8aa      	bhi.n	3560 <_usb_d_dev_ep_enable+0x130>
    360a:	2940      	cmp	r1, #64	; 0x40
    360c:	d8aa      	bhi.n	3564 <_usb_d_dev_ep_enable+0x134>
    360e:	2920      	cmp	r1, #32
    3610:	d8aa      	bhi.n	3568 <_usb_d_dev_ep_enable+0x138>
    3612:	2910      	cmp	r1, #16
    3614:	d8aa      	bhi.n	356c <_usb_d_dev_ep_enable+0x13c>
    3616:	2908      	cmp	r1, #8
    3618:	bf94      	ite	ls
    361a:	2100      	movls	r1, #0
    361c:	2101      	movhi	r1, #1
    361e:	e791      	b.n	3544 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3620:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3624:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3626:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    362a:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    362c:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    3630:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3632:	2140      	movs	r1, #64	; 0x40
    3634:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3638:	2080      	movs	r0, #128	; 0x80
    363a:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    363e:	4a24      	ldr	r2, [pc, #144]	; (36d0 <_usb_d_dev_ep_enable+0x2a0>)
    3640:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    3644:	2000      	movs	r0, #0
    3646:	72b0      	strb	r0, [r6, #10]
    3648:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    364a:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    364e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3652:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3656:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    365a:	016d      	lsls	r5, r5, #5
    365c:	1953      	adds	r3, r2, r5
    365e:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3660:	685a      	ldr	r2, [r3, #4]
    3662:	f364 329b 	bfi	r2, r4, #14, #14
    3666:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3668:	685a      	ldr	r2, [r3, #4]
    366a:	f360 020d 	bfi	r2, r0, #0, #14
    366e:	605a      	str	r2, [r3, #4]
    3670:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    3674:	22b0      	movs	r2, #176	; 0xb0
    3676:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    367a:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    367e:	461d      	mov	r5, r3
    3680:	2310      	movs	r3, #16
    3682:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    3686:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3688:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    368c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    368e:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3692:	2705      	movs	r7, #5
    3694:	e7ca      	b.n	362c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3696:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    369a:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    369c:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    36a0:	2703      	movs	r7, #3
    36a2:	e7c3      	b.n	362c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    36a4:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    36a8:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    36aa:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    36ae:	2706      	movs	r7, #6
    36b0:	e7bc      	b.n	362c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    36b2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    36b6:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    36b8:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    36bc:	2704      	movs	r7, #4
    36be:	e7b5      	b.n	362c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    36c0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    36c4:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    36c6:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    36ca:	2702      	movs	r7, #2
    36cc:	e7ae      	b.n	362c <_usb_d_dev_ep_enable+0x1fc>
    36ce:	bf00      	nop
    36d0:	20000604 	.word	0x20000604
    36d4:	0fffc000 	.word	0x0fffc000

000036d8 <_usb_d_dev_ep_stall>:
{
    36d8:	b470      	push	{r4, r5, r6}
    36da:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    36dc:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    36de:	f010 000f 	ands.w	r0, r0, #15
    36e2:	d008      	beq.n	36f6 <_usb_d_dev_ep_stall+0x1e>
    36e4:	2b00      	cmp	r3, #0
    36e6:	bfb4      	ite	lt
    36e8:	1c83      	addlt	r3, r0, #2
    36ea:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    36ec:	2802      	cmp	r0, #2
    36ee:	d903      	bls.n	36f8 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    36f0:	f06f 0011 	mvn.w	r0, #17
    36f4:	e018      	b.n	3728 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    36f6:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    36f8:	2901      	cmp	r1, #1
    36fa:	d017      	beq.n	372c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    36fc:	2900      	cmp	r1, #0
    36fe:	d03a      	beq.n	3776 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3700:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3704:	4a45      	ldr	r2, [pc, #276]	; (381c <_usb_d_dev_ep_stall+0x144>)
    3706:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    370a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    370e:	f003 030f 	and.w	r3, r3, #15
    3712:	015b      	lsls	r3, r3, #5
    3714:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3718:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    371c:	2310      	movs	r3, #16
    371e:	40a3      	lsls	r3, r4
    3720:	421a      	tst	r2, r3
    3722:	bf14      	ite	ne
    3724:	2001      	movne	r0, #1
    3726:	2000      	moveq	r0, #0
}
    3728:	bc70      	pop	{r4, r5, r6}
    372a:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    372c:	2510      	movs	r5, #16
    372e:	40a5      	lsls	r5, r4
    3730:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3732:	493a      	ldr	r1, [pc, #232]	; (381c <_usb_d_dev_ep_stall+0x144>)
    3734:	009e      	lsls	r6, r3, #2
    3736:	18f2      	adds	r2, r6, r3
    3738:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    373c:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3740:	f002 020f 	and.w	r2, r2, #15
    3744:	0150      	lsls	r0, r2, #5
    3746:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    374a:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    374e:	2020      	movs	r0, #32
    3750:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    3754:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3756:	0152      	lsls	r2, r2, #5
    3758:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    375c:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    3760:	4433      	add	r3, r6
    3762:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    3766:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    376a:	f042 0208 	orr.w	r2, r2, #8
    376e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    3772:	2000      	movs	r0, #0
    3774:	e7d8      	b.n	3728 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    3776:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    377a:	4928      	ldr	r1, [pc, #160]	; (381c <_usb_d_dev_ep_stall+0x144>)
    377c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3780:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    3784:	f002 020f 	and.w	r2, r2, #15
    3788:	0151      	lsls	r1, r2, #5
    378a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    378e:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3792:	2010      	movs	r0, #16
    3794:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    3796:	4205      	tst	r5, r0
    3798:	d03c      	beq.n	3814 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    379a:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    379c:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    37a0:	2020      	movs	r0, #32
    37a2:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    37a4:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    37a6:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    37aa:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    37ae:	4202      	tst	r2, r0
    37b0:	d007      	beq.n	37c2 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    37b2:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    37b6:	2201      	movs	r2, #1
    37b8:	fa02 f404 	lsl.w	r4, r2, r4
    37bc:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    37be:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    37c2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    37c6:	4815      	ldr	r0, [pc, #84]	; (381c <_usb_d_dev_ep_stall+0x144>)
    37c8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    37cc:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    37d0:	f002 0207 	and.w	r2, r2, #7
    37d4:	2a01      	cmp	r2, #1
    37d6:	d00c      	beq.n	37f2 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    37d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    37dc:	4a0f      	ldr	r2, [pc, #60]	; (381c <_usb_d_dev_ep_stall+0x144>)
    37de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    37e2:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    37e6:	f36f 02c3 	bfc	r2, #3, #1
    37ea:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    37ee:	2000      	movs	r0, #0
    37f0:	e79a      	b.n	3728 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    37f2:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    37f6:	f012 0f30 	tst.w	r2, #48	; 0x30
    37fa:	d10d      	bne.n	3818 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    37fc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3800:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    3804:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    3808:	f36f 02c3 	bfc	r2, #3, #1
    380c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3810:	2000      	movs	r0, #0
    3812:	e789      	b.n	3728 <_usb_d_dev_ep_stall+0x50>
    3814:	2000      	movs	r0, #0
    3816:	e787      	b.n	3728 <_usb_d_dev_ep_stall+0x50>
    3818:	2000      	movs	r0, #0
    381a:	e785      	b.n	3728 <_usb_d_dev_ep_stall+0x50>
    381c:	20000604 	.word	0x20000604

00003820 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    3820:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    3822:	f000 040f 	and.w	r4, r0, #15
    3826:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    3828:	4a14      	ldr	r2, [pc, #80]	; (387c <_usb_d_dev_ep_read_req+0x5c>)
    382a:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    382c:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    382e:	6840      	ldr	r0, [r0, #4]
    3830:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    3834:	2c02      	cmp	r4, #2
    3836:	d817      	bhi.n	3868 <_usb_d_dev_ep_read_req+0x48>
    3838:	b1c9      	cbz	r1, 386e <_usb_d_dev_ep_read_req+0x4e>
    383a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    383e:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    3842:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    3844:	2a11      	cmp	r2, #17
    3846:	d115      	bne.n	3874 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3848:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    384c:	f012 0f10 	tst.w	r2, #16
    3850:	d102      	bne.n	3858 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    3852:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    3854:	bc30      	pop	{r4, r5}
    3856:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    3858:	682c      	ldr	r4, [r5, #0]
    385a:	686a      	ldr	r2, [r5, #4]
    385c:	600c      	str	r4, [r1, #0]
    385e:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3860:	2210      	movs	r2, #16
    3862:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    3866:	e7f5      	b.n	3854 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    3868:	f06f 0011 	mvn.w	r0, #17
    386c:	e7f2      	b.n	3854 <_usb_d_dev_ep_read_req+0x34>
    386e:	f06f 0011 	mvn.w	r0, #17
    3872:	e7ef      	b.n	3854 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    3874:	f06f 0012 	mvn.w	r0, #18
    3878:	e7ec      	b.n	3854 <_usb_d_dev_ep_read_req+0x34>
    387a:	bf00      	nop
    387c:	20000604 	.word	0x20000604

00003880 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    3880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3884:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    3886:	7a03      	ldrb	r3, [r0, #8]
    3888:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    388a:	f013 030f 	ands.w	r3, r3, #15
    388e:	f000 80c2 	beq.w	3a16 <_usb_d_dev_ep_trans+0x196>
    3892:	2e00      	cmp	r6, #0
    3894:	bfb4      	ite	lt
    3896:	1c9a      	addlt	r2, r3, #2
    3898:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    389a:	4614      	mov	r4, r2
    389c:	4969      	ldr	r1, [pc, #420]	; (3a44 <_usb_d_dev_ep_trans+0x1c4>)
    389e:	f101 0760 	add.w	r7, r1, #96	; 0x60
    38a2:	1c55      	adds	r5, r2, #1
    38a4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    38a8:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    38ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    38b0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    38b4:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    38b8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    38bc:	428a      	cmp	r2, r1
    38be:	d025      	beq.n	390c <_usb_d_dev_ep_trans+0x8c>
    38c0:	1e55      	subs	r5, r2, #1
    38c2:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    38c4:	6841      	ldr	r1, [r0, #4]
    38c6:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    38c8:	2b02      	cmp	r3, #2
    38ca:	f200 8092 	bhi.w	39f2 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    38ce:	6803      	ldr	r3, [r0, #0]
    38d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    38d4:	d31c      	bcc.n	3910 <_usb_d_dev_ep_trans+0x90>
    38d6:	eb03 0c01 	add.w	ip, r3, r1
    38da:	f8df e180 	ldr.w	lr, [pc, #384]	; 3a5c <_usb_d_dev_ep_trans+0x1dc>
    38de:	45f4      	cmp	ip, lr
    38e0:	d816      	bhi.n	3910 <_usb_d_dev_ep_trans+0x90>
    38e2:	f013 0f03 	tst.w	r3, #3
    38e6:	d113      	bne.n	3910 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    38e8:	2e00      	cmp	r6, #0
    38ea:	db2a      	blt.n	3942 <_usb_d_dev_ep_trans+0xc2>
    38ec:	428a      	cmp	r2, r1
    38ee:	f200 809c 	bhi.w	3a2a <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    38f2:	b34d      	cbz	r5, 3948 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    38f4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    38f8:	4a52      	ldr	r2, [pc, #328]	; (3a44 <_usb_d_dev_ep_trans+0x1c4>)
    38fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    38fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3902:	2b00      	cmp	r3, #0
    3904:	d07b      	beq.n	39fe <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    3906:	f04f 0800 	mov.w	r8, #0
    390a:	e00c      	b.n	3926 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    390c:	4615      	mov	r5, r2
    390e:	e7d9      	b.n	38c4 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    3910:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3914:	4a4b      	ldr	r2, [pc, #300]	; (3a44 <_usb_d_dev_ep_trans+0x1c4>)
    3916:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    391a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    391e:	2b00      	cmp	r3, #0
    3920:	d06a      	beq.n	39f8 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    3922:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    3926:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    392a:	4a46      	ldr	r2, [pc, #280]	; (3a44 <_usb_d_dev_ep_trans+0x1c4>)
    392c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3930:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3934:	f013 0f08 	tst.w	r3, #8
    3938:	d009      	beq.n	394e <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    393a:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    393c:	b003      	add	sp, #12
    393e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    3942:	f04f 0800 	mov.w	r8, #0
    3946:	e7ee      	b.n	3926 <_usb_d_dev_ep_trans+0xa6>
    3948:	f04f 0800 	mov.w	r8, #0
    394c:	e7eb      	b.n	3926 <_usb_d_dev_ep_trans+0xa6>
    394e:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    3950:	a801      	add	r0, sp, #4
    3952:	4b3d      	ldr	r3, [pc, #244]	; (3a48 <_usb_d_dev_ep_trans+0x1c8>)
    3954:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    3956:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    395a:	4a3a      	ldr	r2, [pc, #232]	; (3a44 <_usb_d_dev_ep_trans+0x1c4>)
    395c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3960:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3964:	f013 0f40 	tst.w	r3, #64	; 0x40
    3968:	d13c      	bne.n	39e4 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    396a:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    396e:	4b35      	ldr	r3, [pc, #212]	; (3a44 <_usb_d_dev_ep_trans+0x1c4>)
    3970:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    3974:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    3978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    397c:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    3980:	a801      	add	r0, sp, #4
    3982:	4b32      	ldr	r3, [pc, #200]	; (3a4c <_usb_d_dev_ep_trans+0x1cc>)
    3984:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    3986:	f8da 3000 	ldr.w	r3, [sl]
    398a:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    398e:	f8da 3004 	ldr.w	r3, [sl, #4]
    3992:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    3996:	2300      	movs	r3, #0
    3998:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    399c:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    399e:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    39a2:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    39a6:	f368 1345 	bfi	r3, r8, #5, #1
    39aa:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    39ae:	f89a 3009 	ldrb.w	r3, [sl, #9]
    39b2:	b1e3      	cbz	r3, 39ee <_usb_d_dev_ep_trans+0x16e>
    39b4:	fab5 f585 	clz	r5, r5
    39b8:	096d      	lsrs	r5, r5, #5
    39ba:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    39be:	4b21      	ldr	r3, [pc, #132]	; (3a44 <_usb_d_dev_ep_trans+0x1c4>)
    39c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    39c4:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    39c8:	f365 1304 	bfi	r3, r5, #4, #1
    39cc:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    39d0:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    39d2:	f04f 0100 	mov.w	r1, #0
    39d6:	4638      	mov	r0, r7
    39d8:	bfb4      	ite	lt
    39da:	4b1d      	ldrlt	r3, [pc, #116]	; (3a50 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    39dc:	4b1d      	ldrge	r3, [pc, #116]	; (3a54 <_usb_d_dev_ep_trans+0x1d4>)
    39de:	4798      	blx	r3
	return ERR_NONE;
    39e0:	2000      	movs	r0, #0
    39e2:	e7ab      	b.n	393c <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    39e4:	a801      	add	r0, sp, #4
    39e6:	4b19      	ldr	r3, [pc, #100]	; (3a4c <_usb_d_dev_ep_trans+0x1cc>)
    39e8:	4798      	blx	r3
		return USB_BUSY;
    39ea:	2001      	movs	r0, #1
    39ec:	e7a6      	b.n	393c <_usb_d_dev_ep_trans+0xbc>
    39ee:	2500      	movs	r5, #0
    39f0:	e7e3      	b.n	39ba <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    39f2:	f06f 0011 	mvn.w	r0, #17
    39f6:	e7a1      	b.n	393c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    39f8:	f06f 0012 	mvn.w	r0, #18
    39fc:	e79e      	b.n	393c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    39fe:	f06f 0011 	mvn.w	r0, #17
    3a02:	e79b      	b.n	393c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    3a04:	f06f 0012 	mvn.w	r0, #18
    3a08:	e798      	b.n	393c <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    3a0a:	6841      	ldr	r1, [r0, #4]
    3a0c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    3a10:	4f11      	ldr	r7, [pc, #68]	; (3a58 <_usb_d_dev_ep_trans+0x1d8>)
    3a12:	2400      	movs	r4, #0
    3a14:	e75b      	b.n	38ce <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3a16:	4a0b      	ldr	r2, [pc, #44]	; (3a44 <_usb_d_dev_ep_trans+0x1c4>)
    3a18:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    3a1c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3a20:	428a      	cmp	r2, r1
    3a22:	d0f2      	beq.n	3a0a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    3a24:	4f0c      	ldr	r7, [pc, #48]	; (3a58 <_usb_d_dev_ep_trans+0x1d8>)
    3a26:	2400      	movs	r4, #0
    3a28:	e74a      	b.n	38c0 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    3a2a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3a2e:	4a05      	ldr	r2, [pc, #20]	; (3a44 <_usb_d_dev_ep_trans+0x1c4>)
    3a30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3a38:	2b00      	cmp	r3, #0
    3a3a:	d0e3      	beq.n	3a04 <_usb_d_dev_ep_trans+0x184>
    3a3c:	f04f 0801 	mov.w	r8, #1
    3a40:	e771      	b.n	3926 <_usb_d_dev_ep_trans+0xa6>
    3a42:	bf00      	nop
    3a44:	20000604 	.word	0x20000604
    3a48:	00003b21 	.word	0x00003b21
    3a4c:	00003b2f 	.word	0x00003b2f
    3a50:	00002ae1 	.word	0x00002ae1
    3a54:	00002c65 	.word	0x00002c65
    3a58:	20000678 	.word	0x20000678
    3a5c:	20041fff 	.word	0x20041fff

00003a60 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3a60:	4b06      	ldr	r3, [pc, #24]	; (3a7c <_usb_d_dev_register_callback+0x1c>)
    3a62:	2900      	cmp	r1, #0
    3a64:	bf08      	it	eq
    3a66:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    3a68:	2801      	cmp	r0, #1
    3a6a:	d003      	beq.n	3a74 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    3a6c:	b908      	cbnz	r0, 3a72 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    3a6e:	4b04      	ldr	r3, [pc, #16]	; (3a80 <_usb_d_dev_register_callback+0x20>)
    3a70:	6619      	str	r1, [r3, #96]	; 0x60
    3a72:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    3a74:	4b02      	ldr	r3, [pc, #8]	; (3a80 <_usb_d_dev_register_callback+0x20>)
    3a76:	6659      	str	r1, [r3, #100]	; 0x64
    3a78:	4770      	bx	lr
    3a7a:	bf00      	nop
    3a7c:	00002859 	.word	0x00002859
    3a80:	20000604 	.word	0x20000604

00003a84 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3a84:	4b09      	ldr	r3, [pc, #36]	; (3aac <_usb_d_dev_register_ep_callback+0x28>)
    3a86:	2900      	cmp	r1, #0
    3a88:	bf08      	it	eq
    3a8a:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    3a8c:	4603      	mov	r3, r0
    3a8e:	b130      	cbz	r0, 3a9e <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    3a90:	2801      	cmp	r0, #1
    3a92:	d007      	beq.n	3aa4 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    3a94:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    3a96:	bf04      	itt	eq
    3a98:	4b05      	ldreq	r3, [pc, #20]	; (3ab0 <_usb_d_dev_register_ep_callback+0x2c>)
    3a9a:	6719      	streq	r1, [r3, #112]	; 0x70
    3a9c:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    3a9e:	4b04      	ldr	r3, [pc, #16]	; (3ab0 <_usb_d_dev_register_ep_callback+0x2c>)
    3aa0:	6699      	str	r1, [r3, #104]	; 0x68
    3aa2:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    3aa4:	4b02      	ldr	r3, [pc, #8]	; (3ab0 <_usb_d_dev_register_ep_callback+0x2c>)
    3aa6:	66d9      	str	r1, [r3, #108]	; 0x6c
    3aa8:	4770      	bx	lr
    3aaa:	bf00      	nop
    3aac:	00002859 	.word	0x00002859
    3ab0:	20000604 	.word	0x20000604

00003ab4 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    3ab4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3ab6:	4b01      	ldr	r3, [pc, #4]	; (3abc <USB_0_Handler+0x8>)
    3ab8:	4798      	blx	r3
    3aba:	bd08      	pop	{r3, pc}
    3abc:	00002e55 	.word	0x00002e55

00003ac0 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    3ac0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3ac2:	4b01      	ldr	r3, [pc, #4]	; (3ac8 <USB_1_Handler+0x8>)
    3ac4:	4798      	blx	r3
    3ac6:	bd08      	pop	{r3, pc}
    3ac8:	00002e55 	.word	0x00002e55

00003acc <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    3acc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3ace:	4b01      	ldr	r3, [pc, #4]	; (3ad4 <USB_2_Handler+0x8>)
    3ad0:	4798      	blx	r3
    3ad2:	bd08      	pop	{r3, pc}
    3ad4:	00002e55 	.word	0x00002e55

00003ad8 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    3ad8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3ada:	4b01      	ldr	r3, [pc, #4]	; (3ae0 <USB_3_Handler+0x8>)
    3adc:	4798      	blx	r3
    3ade:	bd08      	pop	{r3, pc}
    3ae0:	00002e55 	.word	0x00002e55

00003ae4 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    3ae4:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    3ae6:	4805      	ldr	r0, [pc, #20]	; (3afc <cdc_device_acm_init+0x18>)
    3ae8:	4b05      	ldr	r3, [pc, #20]	; (3b00 <cdc_device_acm_init+0x1c>)
    3aea:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    3aec:	4b05      	ldr	r3, [pc, #20]	; (3b04 <cdc_device_acm_init+0x20>)
    3aee:	4798      	blx	r3

	usbdc_start(single_desc);
    3af0:	4805      	ldr	r0, [pc, #20]	; (3b08 <cdc_device_acm_init+0x24>)
    3af2:	4b06      	ldr	r3, [pc, #24]	; (3b0c <cdc_device_acm_init+0x28>)
    3af4:	4798      	blx	r3
	usbdc_attach();
    3af6:	4b06      	ldr	r3, [pc, #24]	; (3b10 <cdc_device_acm_init+0x2c>)
    3af8:	4798      	blx	r3
    3afa:	bd08      	pop	{r3, pc}
    3afc:	2000082c 	.word	0x2000082c
    3b00:	0000446d 	.word	0x0000446d
    3b04:	00003d9d 	.word	0x00003d9d
    3b08:	20000004 	.word	0x20000004
    3b0c:	000044dd 	.word	0x000044dd
    3b10:	00004511 	.word	0x00004511

00003b14 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    3b14:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    3b16:	4b01      	ldr	r3, [pc, #4]	; (3b1c <usb_init+0x8>)
    3b18:	4798      	blx	r3
    3b1a:	bd08      	pop	{r3, pc}
    3b1c:	00003ae5 	.word	0x00003ae5

00003b20 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3b20:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    3b24:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3b26:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3b28:	f3bf 8f5f 	dmb	sy
    3b2c:	4770      	bx	lr

00003b2e <atomic_leave_critical>:
    3b2e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    3b32:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3b34:	f383 8810 	msr	PRIMASK, r3
    3b38:	4770      	bx	lr
	...

00003b3c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b3e:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    3b40:	780b      	ldrb	r3, [r1, #0]
    3b42:	f3c3 1441 	ubfx	r4, r3, #5, #2
    3b46:	2c01      	cmp	r4, #1
    3b48:	d15e      	bne.n	3c08 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    3b4a:	888c      	ldrh	r4, [r1, #4]
    3b4c:	4d35      	ldr	r5, [pc, #212]	; (3c24 <cdcdf_acm_req+0xe8>)
    3b4e:	782d      	ldrb	r5, [r5, #0]
    3b50:	42a5      	cmp	r5, r4
    3b52:	d003      	beq.n	3b5c <cdcdf_acm_req+0x20>
    3b54:	4d33      	ldr	r5, [pc, #204]	; (3c24 <cdcdf_acm_req+0xe8>)
    3b56:	786d      	ldrb	r5, [r5, #1]
    3b58:	42a5      	cmp	r5, r4
    3b5a:	d158      	bne.n	3c0e <cdcdf_acm_req+0xd2>
    3b5c:	4616      	mov	r6, r2
    3b5e:	460c      	mov	r4, r1
    3b60:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    3b62:	f013 0f80 	tst.w	r3, #128	; 0x80
    3b66:	d10c      	bne.n	3b82 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    3b68:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    3b6a:	4b2f      	ldr	r3, [pc, #188]	; (3c28 <cdcdf_acm_req+0xec>)
    3b6c:	4798      	blx	r3
    3b6e:	4601      	mov	r1, r0
	switch (req->bRequest) {
    3b70:	7863      	ldrb	r3, [r4, #1]
    3b72:	2b20      	cmp	r3, #32
    3b74:	d013      	beq.n	3b9e <cdcdf_acm_req+0x62>
    3b76:	2b22      	cmp	r3, #34	; 0x22
    3b78:	d032      	beq.n	3be0 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    3b7a:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    3b7e:	b003      	add	sp, #12
    3b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    3b82:	2a01      	cmp	r2, #1
    3b84:	d046      	beq.n	3c14 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    3b86:	784b      	ldrb	r3, [r1, #1]
    3b88:	2b21      	cmp	r3, #33	; 0x21
    3b8a:	d145      	bne.n	3c18 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3b8c:	88cb      	ldrh	r3, [r1, #6]
    3b8e:	2b07      	cmp	r3, #7
    3b90:	d145      	bne.n	3c1e <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    3b92:	2300      	movs	r3, #0
    3b94:	2207      	movs	r2, #7
    3b96:	4925      	ldr	r1, [pc, #148]	; (3c2c <cdcdf_acm_req+0xf0>)
    3b98:	4c25      	ldr	r4, [pc, #148]	; (3c30 <cdcdf_acm_req+0xf4>)
    3b9a:	47a0      	blx	r4
    3b9c:	e7ef      	b.n	3b7e <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3b9e:	2f07      	cmp	r7, #7
    3ba0:	d12b      	bne.n	3bfa <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    3ba2:	b1be      	cbz	r6, 3bd4 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    3ba4:	6800      	ldr	r0, [r0, #0]
    3ba6:	9000      	str	r0, [sp, #0]
    3ba8:	888a      	ldrh	r2, [r1, #4]
    3baa:	798b      	ldrb	r3, [r1, #6]
    3bac:	f8ad 2004 	strh.w	r2, [sp, #4]
    3bb0:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    3bb4:	4b1b      	ldr	r3, [pc, #108]	; (3c24 <cdcdf_acm_req+0xe8>)
    3bb6:	691b      	ldr	r3, [r3, #16]
    3bb8:	b113      	cbz	r3, 3bc0 <cdcdf_acm_req+0x84>
    3bba:	4668      	mov	r0, sp
    3bbc:	4798      	blx	r3
    3bbe:	b1f8      	cbz	r0, 3c00 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    3bc0:	4b18      	ldr	r3, [pc, #96]	; (3c24 <cdcdf_acm_req+0xe8>)
    3bc2:	aa02      	add	r2, sp, #8
    3bc4:	e912 0003 	ldmdb	r2, {r0, r1}
    3bc8:	6098      	str	r0, [r3, #8]
    3bca:	8199      	strh	r1, [r3, #12]
    3bcc:	0c09      	lsrs	r1, r1, #16
    3bce:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    3bd0:	2000      	movs	r0, #0
    3bd2:	e7d4      	b.n	3b7e <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    3bd4:	2300      	movs	r3, #0
    3bd6:	2207      	movs	r2, #7
    3bd8:	4628      	mov	r0, r5
    3bda:	4c15      	ldr	r4, [pc, #84]	; (3c30 <cdcdf_acm_req+0xf4>)
    3bdc:	47a0      	blx	r4
    3bde:	e7ce      	b.n	3b7e <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    3be0:	2300      	movs	r3, #0
    3be2:	461a      	mov	r2, r3
    3be4:	4619      	mov	r1, r3
    3be6:	4618      	mov	r0, r3
    3be8:	4d11      	ldr	r5, [pc, #68]	; (3c30 <cdcdf_acm_req+0xf4>)
    3bea:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    3bec:	4b0d      	ldr	r3, [pc, #52]	; (3c24 <cdcdf_acm_req+0xe8>)
    3bee:	695b      	ldr	r3, [r3, #20]
    3bf0:	b143      	cbz	r3, 3c04 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    3bf2:	8860      	ldrh	r0, [r4, #2]
    3bf4:	4798      	blx	r3
		return ERR_NONE;
    3bf6:	2000      	movs	r0, #0
    3bf8:	e7c1      	b.n	3b7e <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    3bfa:	f04f 30ff 	mov.w	r0, #4294967295
    3bfe:	e7be      	b.n	3b7e <cdcdf_acm_req+0x42>
			return ERR_NONE;
    3c00:	2000      	movs	r0, #0
    3c02:	e7bc      	b.n	3b7e <cdcdf_acm_req+0x42>
		return ERR_NONE;
    3c04:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    3c06:	e7ba      	b.n	3b7e <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    3c08:	f06f 0009 	mvn.w	r0, #9
    3c0c:	e7b7      	b.n	3b7e <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    3c0e:	f06f 0009 	mvn.w	r0, #9
    3c12:	e7b4      	b.n	3b7e <cdcdf_acm_req+0x42>
		return ERR_NONE;
    3c14:	2000      	movs	r0, #0
    3c16:	e7b2      	b.n	3b7e <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    3c18:	f06f 000c 	mvn.w	r0, #12
    3c1c:	e7af      	b.n	3b7e <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    3c1e:	f04f 30ff 	mov.w	r0, #4294967295
    3c22:	e7ac      	b.n	3b7e <cdcdf_acm_req+0x42>
    3c24:	2000086c 	.word	0x2000086c
    3c28:	0000451d 	.word	0x0000451d
    3c2c:	20000874 	.word	0x20000874
    3c30:	00003ff9 	.word	0x00003ff9

00003c34 <cdcdf_acm_ctrl>:
{
    3c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c38:	b083      	sub	sp, #12
    3c3a:	4616      	mov	r6, r2
	switch (ctrl) {
    3c3c:	2901      	cmp	r1, #1
    3c3e:	d066      	beq.n	3d0e <cdcdf_acm_ctrl+0xda>
    3c40:	b141      	cbz	r1, 3c54 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    3c42:	2902      	cmp	r1, #2
    3c44:	bf0c      	ite	eq
    3c46:	f06f 001a 	mvneq.w	r0, #26
    3c4a:	f06f 000c 	mvnne.w	r0, #12
}
    3c4e:	b003      	add	sp, #12
    3c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3c54:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    3c58:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    3c5a:	2800      	cmp	r0, #0
    3c5c:	f000 8085 	beq.w	3d6a <cdcdf_acm_ctrl+0x136>
    3c60:	f10a 3bff 	add.w	fp, sl, #4294967295
    3c64:	f10a 0301 	add.w	r3, sl, #1
    3c68:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3c6a:	4f46      	ldr	r7, [pc, #280]	; (3d84 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    3c6c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 3d94 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3c70:	f8df 8124 	ldr.w	r8, [pc, #292]	; 3d98 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    3c74:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    3c76:	7943      	ldrb	r3, [r0, #5]
    3c78:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    3c7c:	2b02      	cmp	r3, #2
    3c7e:	d002      	beq.n	3c86 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    3c80:	f06f 0009 	mvn.w	r0, #9
    3c84:	e7e3      	b.n	3c4e <cdcdf_acm_ctrl+0x1a>
    3c86:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    3c8a:	f89b 3000 	ldrb.w	r3, [fp]
    3c8e:	429a      	cmp	r2, r3
    3c90:	d06e      	beq.n	3d70 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    3c92:	2bff      	cmp	r3, #255	; 0xff
    3c94:	d16f      	bne.n	3d76 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    3c96:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    3c9a:	2205      	movs	r2, #5
    3c9c:	6871      	ldr	r1, [r6, #4]
    3c9e:	4b3a      	ldr	r3, [pc, #232]	; (3d88 <cdcdf_acm_ctrl+0x154>)
    3ca0:	4798      	blx	r3
		while (NULL != ep) {
    3ca2:	4604      	mov	r4, r0
    3ca4:	b1f8      	cbz	r0, 3ce6 <cdcdf_acm_ctrl+0xb2>
    3ca6:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    3caa:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    3cac:	7963      	ldrb	r3, [r4, #5]
    3cae:	7922      	ldrb	r2, [r4, #4]
    3cb0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3cb4:	b292      	uxth	r2, r2
    3cb6:	78e1      	ldrb	r1, [r4, #3]
    3cb8:	4628      	mov	r0, r5
    3cba:	47b8      	blx	r7
    3cbc:	2800      	cmp	r0, #0
    3cbe:	d15d      	bne.n	3d7c <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    3cc0:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    3cc4:	bf14      	ite	ne
    3cc6:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    3cca:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    3cce:	4628      	mov	r0, r5
    3cd0:	47c8      	blx	r9
			desc->sod = ep;
    3cd2:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    3cd4:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3cd6:	6871      	ldr	r1, [r6, #4]
    3cd8:	4420      	add	r0, r4
    3cda:	47c0      	blx	r8
		while (NULL != ep) {
    3cdc:	4604      	mov	r4, r0
    3cde:	2800      	cmp	r0, #0
    3ce0:	d1e3      	bne.n	3caa <cdcdf_acm_ctrl+0x76>
    3ce2:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    3ce6:	6833      	ldr	r3, [r6, #0]
    3ce8:	7818      	ldrb	r0, [r3, #0]
    3cea:	2204      	movs	r2, #4
    3cec:	6871      	ldr	r1, [r6, #4]
    3cee:	4418      	add	r0, r3
    3cf0:	4b25      	ldr	r3, [pc, #148]	; (3d88 <cdcdf_acm_ctrl+0x154>)
    3cf2:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    3cf4:	9b00      	ldr	r3, [sp, #0]
    3cf6:	459b      	cmp	fp, r3
    3cf8:	d004      	beq.n	3d04 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    3cfa:	2800      	cmp	r0, #0
    3cfc:	d1ba      	bne.n	3c74 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    3cfe:	f06f 0009 	mvn.w	r0, #9
    3d02:	e7a4      	b.n	3c4e <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    3d04:	2201      	movs	r2, #1
    3d06:	4b21      	ldr	r3, [pc, #132]	; (3d8c <cdcdf_acm_ctrl+0x158>)
    3d08:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    3d0a:	2000      	movs	r0, #0
    3d0c:	e79f      	b.n	3c4e <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3d0e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    3d10:	b142      	cbz	r2, 3d24 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    3d12:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    3d14:	795b      	ldrb	r3, [r3, #5]
    3d16:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    3d1a:	2b02      	cmp	r3, #2
    3d1c:	d002      	beq.n	3d24 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    3d1e:	f06f 0009 	mvn.w	r0, #9
    3d22:	e794      	b.n	3c4e <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    3d24:	7823      	ldrb	r3, [r4, #0]
    3d26:	2bff      	cmp	r3, #255	; 0xff
    3d28:	d008      	beq.n	3d3c <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    3d2a:	23ff      	movs	r3, #255	; 0xff
    3d2c:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    3d2e:	78a0      	ldrb	r0, [r4, #2]
    3d30:	4298      	cmp	r0, r3
    3d32:	d003      	beq.n	3d3c <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3d34:	4b16      	ldr	r3, [pc, #88]	; (3d90 <cdcdf_acm_ctrl+0x15c>)
    3d36:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3d38:	23ff      	movs	r3, #255	; 0xff
    3d3a:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    3d3c:	7863      	ldrb	r3, [r4, #1]
    3d3e:	2bff      	cmp	r3, #255	; 0xff
    3d40:	d008      	beq.n	3d54 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    3d42:	23ff      	movs	r3, #255	; 0xff
    3d44:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    3d46:	78e0      	ldrb	r0, [r4, #3]
    3d48:	4298      	cmp	r0, r3
    3d4a:	d003      	beq.n	3d54 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3d4c:	4b10      	ldr	r3, [pc, #64]	; (3d90 <cdcdf_acm_ctrl+0x15c>)
    3d4e:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3d50:	23ff      	movs	r3, #255	; 0xff
    3d52:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    3d54:	7920      	ldrb	r0, [r4, #4]
    3d56:	28ff      	cmp	r0, #255	; 0xff
    3d58:	d003      	beq.n	3d62 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    3d5a:	4b0d      	ldr	r3, [pc, #52]	; (3d90 <cdcdf_acm_ctrl+0x15c>)
    3d5c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    3d5e:	23ff      	movs	r3, #255	; 0xff
    3d60:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    3d62:	2000      	movs	r0, #0
    3d64:	4b09      	ldr	r3, [pc, #36]	; (3d8c <cdcdf_acm_ctrl+0x158>)
    3d66:	7158      	strb	r0, [r3, #5]
    3d68:	e771      	b.n	3c4e <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    3d6a:	f06f 0009 	mvn.w	r0, #9
    3d6e:	e76e      	b.n	3c4e <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    3d70:	f06f 0011 	mvn.w	r0, #17
    3d74:	e76b      	b.n	3c4e <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    3d76:	f06f 001b 	mvn.w	r0, #27
    3d7a:	e768      	b.n	3c4e <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    3d7c:	f06f 0013 	mvn.w	r0, #19
    3d80:	e765      	b.n	3c4e <cdcdf_acm_ctrl+0x1a>
    3d82:	bf00      	nop
    3d84:	000015f9 	.word	0x000015f9
    3d88:	0000453d 	.word	0x0000453d
    3d8c:	2000086c 	.word	0x2000086c
    3d90:	00001661 	.word	0x00001661
    3d94:	0000168d 	.word	0x0000168d
    3d98:	00004577 	.word	0x00004577

00003d9c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    3d9c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    3d9e:	4b0a      	ldr	r3, [pc, #40]	; (3dc8 <cdcdf_acm_init+0x2c>)
    3da0:	4798      	blx	r3
    3da2:	2801      	cmp	r0, #1
    3da4:	d80c      	bhi.n	3dc0 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    3da6:	4809      	ldr	r0, [pc, #36]	; (3dcc <cdcdf_acm_init+0x30>)
    3da8:	4b09      	ldr	r3, [pc, #36]	; (3dd0 <cdcdf_acm_init+0x34>)
    3daa:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    3dac:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    3dae:	3018      	adds	r0, #24
    3db0:	4b08      	ldr	r3, [pc, #32]	; (3dd4 <cdcdf_acm_init+0x38>)
    3db2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    3db4:	4908      	ldr	r1, [pc, #32]	; (3dd8 <cdcdf_acm_init+0x3c>)
    3db6:	2001      	movs	r0, #1
    3db8:	4b08      	ldr	r3, [pc, #32]	; (3ddc <cdcdf_acm_init+0x40>)
    3dba:	4798      	blx	r3
	return ERR_NONE;
    3dbc:	2000      	movs	r0, #0
    3dbe:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    3dc0:	f06f 0010 	mvn.w	r0, #16
}
    3dc4:	bd08      	pop	{r3, pc}
    3dc6:	bf00      	nop
    3dc8:	00004529 	.word	0x00004529
    3dcc:	2000086c 	.word	0x2000086c
    3dd0:	00003c35 	.word	0x00003c35
    3dd4:	000044c9 	.word	0x000044c9
    3dd8:	20000064 	.word	0x20000064
    3ddc:	00004435 	.word	0x00004435

00003de0 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    3de0:	4b07      	ldr	r3, [pc, #28]	; (3e00 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    3de2:	795b      	ldrb	r3, [r3, #5]
    3de4:	b143      	cbz	r3, 3df8 <cdcdf_acm_write+0x18>
{
    3de6:	b510      	push	{r4, lr}
    3de8:	460a      	mov	r2, r1
    3dea:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    3dec:	2301      	movs	r3, #1
    3dee:	4804      	ldr	r0, [pc, #16]	; (3e00 <cdcdf_acm_write+0x20>)
    3df0:	78c0      	ldrb	r0, [r0, #3]
    3df2:	4c04      	ldr	r4, [pc, #16]	; (3e04 <cdcdf_acm_write+0x24>)
    3df4:	47a0      	blx	r4
    3df6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3df8:	f06f 0010 	mvn.w	r0, #16
    3dfc:	4770      	bx	lr
    3dfe:	bf00      	nop
    3e00:	2000086c 	.word	0x2000086c
    3e04:	00003ff9 	.word	0x00003ff9

00003e08 <cdcdf_acm_register_callback>:
{
    3e08:	b508      	push	{r3, lr}
	switch (cb_type) {
    3e0a:	2803      	cmp	r0, #3
    3e0c:	d81b      	bhi.n	3e46 <cdcdf_acm_register_callback+0x3e>
    3e0e:	e8df f000 	tbb	[pc, r0]
    3e12:	0a02      	.short	0x0a02
    3e14:	1612      	.short	0x1612
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    3e16:	460a      	mov	r2, r1
    3e18:	2102      	movs	r1, #2
    3e1a:	4b0c      	ldr	r3, [pc, #48]	; (3e4c <cdcdf_acm_register_callback+0x44>)
    3e1c:	7918      	ldrb	r0, [r3, #4]
    3e1e:	4b0c      	ldr	r3, [pc, #48]	; (3e50 <cdcdf_acm_register_callback+0x48>)
    3e20:	4798      	blx	r3
	return ERR_NONE;
    3e22:	2000      	movs	r0, #0
		break;
    3e24:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    3e26:	460a      	mov	r2, r1
    3e28:	2102      	movs	r1, #2
    3e2a:	4b08      	ldr	r3, [pc, #32]	; (3e4c <cdcdf_acm_register_callback+0x44>)
    3e2c:	78d8      	ldrb	r0, [r3, #3]
    3e2e:	4b08      	ldr	r3, [pc, #32]	; (3e50 <cdcdf_acm_register_callback+0x48>)
    3e30:	4798      	blx	r3
	return ERR_NONE;
    3e32:	2000      	movs	r0, #0
		break;
    3e34:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    3e36:	4b05      	ldr	r3, [pc, #20]	; (3e4c <cdcdf_acm_register_callback+0x44>)
    3e38:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    3e3a:	2000      	movs	r0, #0
		break;
    3e3c:	bd08      	pop	{r3, pc}
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    3e3e:	4b03      	ldr	r3, [pc, #12]	; (3e4c <cdcdf_acm_register_callback+0x44>)
    3e40:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    3e42:	2000      	movs	r0, #0
		break;
    3e44:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    3e46:	f06f 000c 	mvn.w	r0, #12
}
    3e4a:	bd08      	pop	{r3, pc}
    3e4c:	2000086c 	.word	0x2000086c
    3e50:	00001861 	.word	0x00001861

00003e54 <cdcdf_acm_is_enabled>:
}
    3e54:	4b01      	ldr	r3, [pc, #4]	; (3e5c <cdcdf_acm_is_enabled+0x8>)
    3e56:	7958      	ldrb	r0, [r3, #5]
    3e58:	4770      	bx	lr
    3e5a:	bf00      	nop
    3e5c:	2000086c 	.word	0x2000086c

00003e60 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    3e60:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3e62:	4b07      	ldr	r3, [pc, #28]	; (3e80 <usbdc_unconfig+0x20>)
    3e64:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    3e66:	b14c      	cbz	r4, 3e7c <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    3e68:	2600      	movs	r6, #0
    3e6a:	2501      	movs	r5, #1
    3e6c:	6863      	ldr	r3, [r4, #4]
    3e6e:	4632      	mov	r2, r6
    3e70:	4629      	mov	r1, r5
    3e72:	4620      	mov	r0, r4
    3e74:	4798      	blx	r3
		func = func->next;
    3e76:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    3e78:	2c00      	cmp	r4, #0
    3e7a:	d1f7      	bne.n	3e6c <usbdc_unconfig+0xc>
    3e7c:	bd70      	pop	{r4, r5, r6, pc}
    3e7e:	bf00      	nop
    3e80:	20000890 	.word	0x20000890

00003e84 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    3e84:	b570      	push	{r4, r5, r6, lr}
    3e86:	4606      	mov	r6, r0
    3e88:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    3e8a:	4b07      	ldr	r3, [pc, #28]	; (3ea8 <usbdc_change_notify+0x24>)
    3e8c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    3e8e:	b91c      	cbnz	r4, 3e98 <usbdc_change_notify+0x14>
    3e90:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    3e92:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    3e94:	2c00      	cmp	r4, #0
    3e96:	d0fb      	beq.n	3e90 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    3e98:	6863      	ldr	r3, [r4, #4]
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	d0f9      	beq.n	3e92 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    3e9e:	4629      	mov	r1, r5
    3ea0:	4630      	mov	r0, r6
    3ea2:	4798      	blx	r3
    3ea4:	e7f5      	b.n	3e92 <usbdc_change_notify+0xe>
    3ea6:	bf00      	nop
    3ea8:	20000890 	.word	0x20000890

00003eac <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3eae:	4607      	mov	r7, r0
    3eb0:	460e      	mov	r6, r1
    3eb2:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3eb4:	4b0c      	ldr	r3, [pc, #48]	; (3ee8 <usbdc_request_handler+0x3c>)
    3eb6:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    3eb8:	b91c      	cbnz	r4, 3ec2 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    3eba:	2000      	movs	r0, #0
    3ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    3ebe:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    3ec0:	b16c      	cbz	r4, 3ede <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    3ec2:	6863      	ldr	r3, [r4, #4]
    3ec4:	2b00      	cmp	r3, #0
    3ec6:	d0fa      	beq.n	3ebe <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    3ec8:	462a      	mov	r2, r5
    3eca:	4631      	mov	r1, r6
    3ecc:	4638      	mov	r0, r7
    3ece:	4798      	blx	r3
			if (0 == rc) {
    3ed0:	b138      	cbz	r0, 3ee2 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    3ed2:	f110 0f0a 	cmn.w	r0, #10
    3ed6:	d0f2      	beq.n	3ebe <usbdc_request_handler+0x12>
				return -1;
    3ed8:	f04f 30ff 	mov.w	r0, #4294967295
}
    3edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    3ede:	2000      	movs	r0, #0
    3ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    3ee2:	2001      	movs	r0, #1
    3ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ee6:	bf00      	nop
    3ee8:	20000890 	.word	0x20000890

00003eec <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    3eec:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    3eee:	4b06      	ldr	r3, [pc, #24]	; (3f08 <usbd_sof_cb+0x1c>)
    3ef0:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    3ef2:	b91c      	cbnz	r4, 3efc <usbd_sof_cb+0x10>
    3ef4:	bd10      	pop	{r4, pc}
		sof = sof->next;
    3ef6:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    3ef8:	2c00      	cmp	r4, #0
    3efa:	d0fb      	beq.n	3ef4 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    3efc:	6863      	ldr	r3, [r4, #4]
    3efe:	2b00      	cmp	r3, #0
    3f00:	d0f9      	beq.n	3ef6 <usbd_sof_cb+0xa>
			sof->cb();
    3f02:	4798      	blx	r3
    3f04:	e7f7      	b.n	3ef6 <usbd_sof_cb+0xa>
    3f06:	bf00      	nop
    3f08:	20000890 	.word	0x20000890

00003f0c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    3f0c:	b510      	push	{r4, lr}
    3f0e:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    3f10:	b119      	cbz	r1, 3f1a <usbdc_cb_ctl_done+0xe>
    3f12:	2901      	cmp	r1, #1
    3f14:	d026      	beq.n	3f64 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    3f16:	2000      	movs	r0, #0
    3f18:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    3f1a:	7813      	ldrb	r3, [r2, #0]
    3f1c:	2b00      	cmp	r3, #0
    3f1e:	d1fa      	bne.n	3f16 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    3f20:	7853      	ldrb	r3, [r2, #1]
    3f22:	2b05      	cmp	r3, #5
    3f24:	d00f      	beq.n	3f46 <usbdc_cb_ctl_done+0x3a>
    3f26:	2b09      	cmp	r3, #9
    3f28:	d1f5      	bne.n	3f16 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    3f2a:	8852      	ldrh	r2, [r2, #2]
    3f2c:	4b10      	ldr	r3, [pc, #64]	; (3f70 <usbdc_cb_ctl_done+0x64>)
    3f2e:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    3f30:	8863      	ldrh	r3, [r4, #2]
    3f32:	2b00      	cmp	r3, #0
    3f34:	bf14      	ite	ne
    3f36:	2104      	movne	r1, #4
    3f38:	2103      	moveq	r1, #3
    3f3a:	4b0d      	ldr	r3, [pc, #52]	; (3f70 <usbdc_cb_ctl_done+0x64>)
    3f3c:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3f3e:	2001      	movs	r0, #1
    3f40:	4b0c      	ldr	r3, [pc, #48]	; (3f74 <usbdc_cb_ctl_done+0x68>)
    3f42:	4798      	blx	r3
    3f44:	e7e7      	b.n	3f16 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    3f46:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    3f48:	b2c0      	uxtb	r0, r0
    3f4a:	4b0b      	ldr	r3, [pc, #44]	; (3f78 <usbdc_cb_ctl_done+0x6c>)
    3f4c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    3f4e:	8863      	ldrh	r3, [r4, #2]
    3f50:	2b00      	cmp	r3, #0
    3f52:	bf14      	ite	ne
    3f54:	2103      	movne	r1, #3
    3f56:	2102      	moveq	r1, #2
    3f58:	4b05      	ldr	r3, [pc, #20]	; (3f70 <usbdc_cb_ctl_done+0x64>)
    3f5a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3f5c:	2001      	movs	r0, #1
    3f5e:	4b05      	ldr	r3, [pc, #20]	; (3f74 <usbdc_cb_ctl_done+0x68>)
    3f60:	4798      	blx	r3
    3f62:	e7d8      	b.n	3f16 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    3f64:	2201      	movs	r2, #1
    3f66:	4621      	mov	r1, r4
    3f68:	2000      	movs	r0, #0
    3f6a:	4b04      	ldr	r3, [pc, #16]	; (3f7c <usbdc_cb_ctl_done+0x70>)
    3f6c:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    3f6e:	e7d2      	b.n	3f16 <usbdc_cb_ctl_done+0xa>
    3f70:	20000890 	.word	0x20000890
    3f74:	00003e85 	.word	0x00003e85
    3f78:	000015ed 	.word	0x000015ed
    3f7c:	00003ead 	.word	0x00003ead

00003f80 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    3f80:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    3f82:	4b0d      	ldr	r3, [pc, #52]	; (3fb8 <usbdc_reset+0x38>)
    3f84:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    3f86:	4d0d      	ldr	r5, [pc, #52]	; (3fbc <usbdc_reset+0x3c>)
    3f88:	2602      	movs	r6, #2
    3f8a:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    3f8c:	2400      	movs	r4, #0
    3f8e:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    3f90:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    3f92:	4620      	mov	r0, r4
    3f94:	4b0a      	ldr	r3, [pc, #40]	; (3fc0 <usbdc_reset+0x40>)
    3f96:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    3f98:	7f28      	ldrb	r0, [r5, #28]
    3f9a:	4b0a      	ldr	r3, [pc, #40]	; (3fc4 <usbdc_reset+0x44>)
    3f9c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    3f9e:	4a0a      	ldr	r2, [pc, #40]	; (3fc8 <usbdc_reset+0x48>)
    3fa0:	4621      	mov	r1, r4
    3fa2:	4620      	mov	r0, r4
    3fa4:	4d09      	ldr	r5, [pc, #36]	; (3fcc <usbdc_reset+0x4c>)
    3fa6:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3fa8:	4a09      	ldr	r2, [pc, #36]	; (3fd0 <usbdc_reset+0x50>)
    3faa:	4631      	mov	r1, r6
    3fac:	4620      	mov	r0, r4
    3fae:	47a8      	blx	r5
	usb_d_ep_enable(0);
    3fb0:	4620      	mov	r0, r4
    3fb2:	4b08      	ldr	r3, [pc, #32]	; (3fd4 <usbdc_reset+0x54>)
    3fb4:	4798      	blx	r3
    3fb6:	bd70      	pop	{r4, r5, r6, pc}
    3fb8:	00003e61 	.word	0x00003e61
    3fbc:	20000890 	.word	0x20000890
    3fc0:	00001661 	.word	0x00001661
    3fc4:	0000164d 	.word	0x0000164d
    3fc8:	00004019 	.word	0x00004019
    3fcc:	00001861 	.word	0x00001861
    3fd0:	00003f0d 	.word	0x00003f0d
    3fd4:	0000168d 	.word	0x0000168d

00003fd8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    3fd8:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    3fda:	b110      	cbz	r0, 3fe2 <usbd_event_cb+0xa>
    3fdc:	2801      	cmp	r0, #1
    3fde:	d004      	beq.n	3fea <usbd_event_cb+0x12>
    3fe0:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    3fe2:	2000      	movs	r0, #0
    3fe4:	4b02      	ldr	r3, [pc, #8]	; (3ff0 <usbd_event_cb+0x18>)
    3fe6:	4798      	blx	r3
		break;
    3fe8:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    3fea:	4b02      	ldr	r3, [pc, #8]	; (3ff4 <usbd_event_cb+0x1c>)
    3fec:	4798      	blx	r3
    3fee:	bd08      	pop	{r3, pc}
    3ff0:	00003e85 	.word	0x00003e85
    3ff4:	00003f81 	.word	0x00003f81

00003ff8 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    3ff8:	b500      	push	{lr}
    3ffa:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    3ffc:	9101      	str	r1, [sp, #4]
    3ffe:	9202      	str	r2, [sp, #8]
    4000:	f88d 000c 	strb.w	r0, [sp, #12]
    4004:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    4008:	a801      	add	r0, sp, #4
    400a:	4b02      	ldr	r3, [pc, #8]	; (4014 <usbdc_xfer+0x1c>)
    400c:	4798      	blx	r3
}
    400e:	b005      	add	sp, #20
    4010:	f85d fb04 	ldr.w	pc, [sp], #4
    4014:	000016d9 	.word	0x000016d9

00004018 <usbdc_cb_ctl_req>:
{
    4018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    401c:	b083      	sub	sp, #12
    401e:	4605      	mov	r5, r0
    4020:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    4022:	2200      	movs	r2, #0
    4024:	4b9b      	ldr	r3, [pc, #620]	; (4294 <usbdc_cb_ctl_req+0x27c>)
    4026:	4798      	blx	r3
    4028:	f1b0 3fff 	cmp.w	r0, #4294967295
    402c:	d00b      	beq.n	4046 <usbdc_cb_ctl_req+0x2e>
    402e:	2801      	cmp	r0, #1
    4030:	f000 81e3 	beq.w	43fa <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    4034:	7823      	ldrb	r3, [r4, #0]
    4036:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    403a:	d008      	beq.n	404e <usbdc_cb_ctl_req+0x36>
    403c:	2a80      	cmp	r2, #128	; 0x80
    403e:	f000 80f4 	beq.w	422a <usbdc_cb_ctl_req+0x212>
		return false;
    4042:	2000      	movs	r0, #0
    4044:	e000      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		return false;
    4046:	2000      	movs	r0, #0
}
    4048:	b003      	add	sp, #12
    404a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    404e:	7862      	ldrb	r2, [r4, #1]
    4050:	3a01      	subs	r2, #1
    4052:	2a0a      	cmp	r2, #10
    4054:	f200 81d3 	bhi.w	43fe <usbdc_cb_ctl_req+0x3e6>
    4058:	e8df f012 	tbh	[pc, r2, lsl #1]
    405c:	01d10060 	.word	0x01d10060
    4060:	01d10076 	.word	0x01d10076
    4064:	01d1000b 	.word	0x01d1000b
    4068:	01d101d1 	.word	0x01d101d1
    406c:	01d10015 	.word	0x01d10015
    4070:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    4072:	2301      	movs	r3, #1
    4074:	2200      	movs	r2, #0
    4076:	4611      	mov	r1, r2
    4078:	4628      	mov	r0, r5
    407a:	4c87      	ldr	r4, [pc, #540]	; (4298 <usbdc_cb_ctl_req+0x280>)
    407c:	47a0      	blx	r4
    407e:	fab0 f080 	clz	r0, r0
    4082:	0940      	lsrs	r0, r0, #5
    4084:	e7e0      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    4086:	8862      	ldrh	r2, [r4, #2]
    4088:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    408a:	b1ca      	cbz	r2, 40c0 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    408c:	4b83      	ldr	r3, [pc, #524]	; (429c <usbdc_cb_ctl_req+0x284>)
    408e:	681b      	ldr	r3, [r3, #0]
    4090:	6859      	ldr	r1, [r3, #4]
    4092:	6818      	ldr	r0, [r3, #0]
    4094:	4b82      	ldr	r3, [pc, #520]	; (42a0 <usbdc_cb_ctl_req+0x288>)
    4096:	4798      	blx	r3
	if (NULL == cfg_desc) {
    4098:	2800      	cmp	r0, #0
    409a:	f000 81be 	beq.w	441a <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    409e:	78c2      	ldrb	r2, [r0, #3]
    40a0:	7881      	ldrb	r1, [r0, #2]
    40a2:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    40a6:	fa10 f181 	uxtah	r1, r0, r1
    40aa:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    40ac:	2204      	movs	r2, #4
    40ae:	4b7d      	ldr	r3, [pc, #500]	; (42a4 <usbdc_cb_ctl_req+0x28c>)
    40b0:	4798      	blx	r3
    40b2:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    40b4:	b130      	cbz	r0, 40c4 <usbdc_cb_ctl_req+0xac>
    40b6:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    40b8:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 429c <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    40bc:	4f79      	ldr	r7, [pc, #484]	; (42a4 <usbdc_cb_ctl_req+0x28c>)
    40be:	e018      	b.n	40f2 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    40c0:	4b79      	ldr	r3, [pc, #484]	; (42a8 <usbdc_cb_ctl_req+0x290>)
    40c2:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    40c4:	2301      	movs	r3, #1
    40c6:	2200      	movs	r2, #0
    40c8:	4611      	mov	r1, r2
    40ca:	4628      	mov	r0, r5
    40cc:	4c72      	ldr	r4, [pc, #456]	; (4298 <usbdc_cb_ctl_req+0x280>)
    40ce:	47a0      	blx	r4
    40d0:	fab0 f080 	clz	r0, r0
    40d4:	0940      	lsrs	r0, r0, #5
    40d6:	e7b7      	b.n	4048 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    40d8:	464c      	mov	r4, r9
    40da:	e000      	b.n	40de <usbdc_cb_ctl_req+0xc6>
    40dc:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    40de:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    40e0:	7803      	ldrb	r3, [r0, #0]
    40e2:	4418      	add	r0, r3
    40e4:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    40e6:	2204      	movs	r2, #4
    40e8:	9901      	ldr	r1, [sp, #4]
    40ea:	47b8      	blx	r7
    40ec:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    40ee:	2800      	cmp	r0, #0
    40f0:	d0e8      	beq.n	40c4 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    40f2:	f890 9002 	ldrb.w	r9, [r0, #2]
    40f6:	45a1      	cmp	r9, r4
    40f8:	d0f1      	beq.n	40de <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    40fa:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    40fe:	2c00      	cmp	r4, #0
    4100:	d0ea      	beq.n	40d8 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    4102:	2600      	movs	r6, #0
    4104:	6863      	ldr	r3, [r4, #4]
    4106:	466a      	mov	r2, sp
    4108:	4631      	mov	r1, r6
    410a:	4620      	mov	r0, r4
    410c:	4798      	blx	r3
    410e:	2800      	cmp	r0, #0
    4110:	d0e4      	beq.n	40dc <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    4112:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    4114:	2c00      	cmp	r4, #0
    4116:	d1f5      	bne.n	4104 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    4118:	464c      	mov	r4, r9
    411a:	e7e0      	b.n	40de <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    411c:	f003 031f 	and.w	r3, r3, #31
    4120:	2b02      	cmp	r3, #2
    4122:	f040 816e 	bne.w	4402 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    4126:	88e3      	ldrh	r3, [r4, #6]
    4128:	b10b      	cbz	r3, 412e <usbdc_cb_ctl_req+0x116>
			return false;
    412a:	2000      	movs	r0, #0
    412c:	e78c      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    412e:	88a0      	ldrh	r0, [r4, #4]
    4130:	2100      	movs	r1, #0
    4132:	b2c0      	uxtb	r0, r0
    4134:	4b5d      	ldr	r3, [pc, #372]	; (42ac <usbdc_cb_ctl_req+0x294>)
    4136:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    4138:	2301      	movs	r3, #1
    413a:	2200      	movs	r2, #0
    413c:	4611      	mov	r1, r2
    413e:	4628      	mov	r0, r5
    4140:	4c55      	ldr	r4, [pc, #340]	; (4298 <usbdc_cb_ctl_req+0x280>)
    4142:	47a0      	blx	r4
		return true;
    4144:	2001      	movs	r0, #1
    4146:	e77f      	b.n	4048 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4148:	f003 031f 	and.w	r3, r3, #31
    414c:	2b02      	cmp	r3, #2
    414e:	f040 815a 	bne.w	4406 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    4152:	88e3      	ldrh	r3, [r4, #6]
    4154:	b10b      	cbz	r3, 415a <usbdc_cb_ctl_req+0x142>
			return false;
    4156:	2000      	movs	r0, #0
    4158:	e776      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    415a:	88a0      	ldrh	r0, [r4, #4]
    415c:	2101      	movs	r1, #1
    415e:	b2c0      	uxtb	r0, r0
    4160:	4b52      	ldr	r3, [pc, #328]	; (42ac <usbdc_cb_ctl_req+0x294>)
    4162:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    4164:	2301      	movs	r3, #1
    4166:	2200      	movs	r2, #0
    4168:	4611      	mov	r1, r2
    416a:	4628      	mov	r0, r5
    416c:	4c4a      	ldr	r4, [pc, #296]	; (4298 <usbdc_cb_ctl_req+0x280>)
    416e:	47a0      	blx	r4
		return true;
    4170:	2001      	movs	r0, #1
    4172:	e769      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    4174:	8866      	ldrh	r6, [r4, #2]
    4176:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    4178:	4a48      	ldr	r2, [pc, #288]	; (429c <usbdc_cb_ctl_req+0x284>)
    417a:	6813      	ldr	r3, [r2, #0]
    417c:	7ed2      	ldrb	r2, [r2, #27]
    417e:	6859      	ldr	r1, [r3, #4]
    4180:	6818      	ldr	r0, [r3, #0]
    4182:	4b47      	ldr	r3, [pc, #284]	; (42a0 <usbdc_cb_ctl_req+0x288>)
    4184:	4798      	blx	r3
	if (NULL == ifc) {
    4186:	2800      	cmp	r0, #0
    4188:	d045      	beq.n	4216 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    418a:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    418c:	78c2      	ldrb	r2, [r0, #3]
    418e:	7881      	ldrb	r1, [r0, #2]
    4190:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    4194:	fa10 f181 	uxtah	r1, r0, r1
    4198:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    419a:	2204      	movs	r2, #4
    419c:	4b41      	ldr	r3, [pc, #260]	; (42a4 <usbdc_cb_ctl_req+0x28c>)
    419e:	4798      	blx	r3
    41a0:	4603      	mov	r3, r0
    41a2:	2800      	cmp	r0, #0
    41a4:	d039      	beq.n	421a <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    41a6:	2704      	movs	r7, #4
    41a8:	4d3e      	ldr	r5, [pc, #248]	; (42a4 <usbdc_cb_ctl_req+0x28c>)
    41aa:	e008      	b.n	41be <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    41ac:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    41ae:	7803      	ldrb	r3, [r0, #0]
    41b0:	4418      	add	r0, r3
    41b2:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    41b4:	463a      	mov	r2, r7
    41b6:	9901      	ldr	r1, [sp, #4]
    41b8:	47a8      	blx	r5
		if (NULL == ifc) {
    41ba:	4603      	mov	r3, r0
    41bc:	b378      	cbz	r0, 421e <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    41be:	789a      	ldrb	r2, [r3, #2]
    41c0:	42a2      	cmp	r2, r4
    41c2:	d1f3      	bne.n	41ac <usbdc_cb_ctl_req+0x194>
    41c4:	78da      	ldrb	r2, [r3, #3]
    41c6:	42b2      	cmp	r2, r6
    41c8:	d1f0      	bne.n	41ac <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    41ca:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    41cc:	4b33      	ldr	r3, [pc, #204]	; (429c <usbdc_cb_ctl_req+0x284>)
    41ce:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    41d0:	b33d      	cbz	r5, 4222 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    41d2:	2701      	movs	r7, #1
    41d4:	686b      	ldr	r3, [r5, #4]
    41d6:	466a      	mov	r2, sp
    41d8:	4639      	mov	r1, r7
    41da:	4628      	mov	r0, r5
    41dc:	4798      	blx	r3
    41de:	b120      	cbz	r0, 41ea <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    41e0:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    41e2:	2d00      	cmp	r5, #0
    41e4:	d1f6      	bne.n	41d4 <usbdc_cb_ctl_req+0x1bc>
	return false;
    41e6:	2000      	movs	r0, #0
    41e8:	e72e      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    41ea:	686b      	ldr	r3, [r5, #4]
    41ec:	466a      	mov	r2, sp
    41ee:	2100      	movs	r1, #0
    41f0:	4628      	mov	r0, r5
    41f2:	4798      	blx	r3
    41f4:	b9b8      	cbnz	r0, 4226 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    41f6:	b136      	cbz	r6, 4206 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    41f8:	4a28      	ldr	r2, [pc, #160]	; (429c <usbdc_cb_ctl_req+0x284>)
    41fa:	2301      	movs	r3, #1
    41fc:	fa03 f404 	lsl.w	r4, r3, r4
    4200:	7f53      	ldrb	r3, [r2, #29]
    4202:	4323      	orrs	r3, r4
    4204:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    4206:	2300      	movs	r3, #0
    4208:	461a      	mov	r2, r3
    420a:	4619      	mov	r1, r3
    420c:	4618      	mov	r0, r3
    420e:	4c22      	ldr	r4, [pc, #136]	; (4298 <usbdc_cb_ctl_req+0x280>)
    4210:	47a0      	blx	r4
			return true;
    4212:	2001      	movs	r0, #1
    4214:	e718      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		return false;
    4216:	2000      	movs	r0, #0
    4218:	e716      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		return false;
    421a:	2000      	movs	r0, #0
    421c:	e714      	b.n	4048 <usbdc_cb_ctl_req+0x30>
			return false;
    421e:	2000      	movs	r0, #0
    4220:	e712      	b.n	4048 <usbdc_cb_ctl_req+0x30>
	return false;
    4222:	2000      	movs	r0, #0
    4224:	e710      	b.n	4048 <usbdc_cb_ctl_req+0x30>
			return false;
    4226:	2000      	movs	r0, #0
    4228:	e70e      	b.n	4048 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    422a:	7862      	ldrb	r2, [r4, #1]
    422c:	2a0a      	cmp	r2, #10
    422e:	f200 80ec 	bhi.w	440a <usbdc_cb_ctl_req+0x3f2>
    4232:	e8df f012 	tbh	[pc, r2, lsl #1]
    4236:	008e      	.short	0x008e
    4238:	00ea00ea 	.word	0x00ea00ea
    423c:	00ea00ea 	.word	0x00ea00ea
    4240:	000b00ea 	.word	0x000b00ea
    4244:	008200ea 	.word	0x008200ea
    4248:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    424c:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    424e:	0a13      	lsrs	r3, r2, #8
    4250:	2b02      	cmp	r3, #2
    4252:	d02d      	beq.n	42b0 <usbdc_cb_ctl_req+0x298>
    4254:	2b03      	cmp	r3, #3
    4256:	d050      	beq.n	42fa <usbdc_cb_ctl_req+0x2e2>
    4258:	2b01      	cmp	r3, #1
    425a:	d001      	beq.n	4260 <usbdc_cb_ctl_req+0x248>
	return false;
    425c:	2000      	movs	r0, #0
    425e:	e6f3      	b.n	4048 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    4260:	88e2      	ldrh	r2, [r4, #6]
    4262:	2a12      	cmp	r2, #18
    4264:	bf28      	it	cs
    4266:	2212      	movcs	r2, #18
    4268:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    426a:	4b0c      	ldr	r3, [pc, #48]	; (429c <usbdc_cb_ctl_req+0x284>)
    426c:	681b      	ldr	r3, [r3, #0]
    426e:	2201      	movs	r2, #1
    4270:	6859      	ldr	r1, [r3, #4]
    4272:	6818      	ldr	r0, [r3, #0]
    4274:	4b0b      	ldr	r3, [pc, #44]	; (42a4 <usbdc_cb_ctl_req+0x28c>)
    4276:	4798      	blx	r3
	if (!dev_desc) {
    4278:	4601      	mov	r1, r0
    427a:	2800      	cmp	r0, #0
    427c:	f000 80c7 	beq.w	440e <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    4280:	2300      	movs	r3, #0
    4282:	4622      	mov	r2, r4
    4284:	4628      	mov	r0, r5
    4286:	4c04      	ldr	r4, [pc, #16]	; (4298 <usbdc_cb_ctl_req+0x280>)
    4288:	47a0      	blx	r4
    428a:	fab0 f080 	clz	r0, r0
    428e:	0940      	lsrs	r0, r0, #5
    4290:	e6da      	b.n	4048 <usbdc_cb_ctl_req+0x30>
    4292:	bf00      	nop
    4294:	00003ead 	.word	0x00003ead
    4298:	00003ff9 	.word	0x00003ff9
    429c:	20000890 	.word	0x20000890
    42a0:	000045bd 	.word	0x000045bd
    42a4:	0000453d 	.word	0x0000453d
    42a8:	00003e61 	.word	0x00003e61
    42ac:	000017f9 	.word	0x000017f9
	uint16_t length   = req->wLength;
    42b0:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    42b2:	4b5b      	ldr	r3, [pc, #364]	; (4420 <usbdc_cb_ctl_req+0x408>)
    42b4:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    42b6:	681b      	ldr	r3, [r3, #0]
    42b8:	3201      	adds	r2, #1
    42ba:	b2d2      	uxtb	r2, r2
    42bc:	6859      	ldr	r1, [r3, #4]
    42be:	6818      	ldr	r0, [r3, #0]
    42c0:	4b58      	ldr	r3, [pc, #352]	; (4424 <usbdc_cb_ctl_req+0x40c>)
    42c2:	4798      	blx	r3
	if (NULL == cfg_desc) {
    42c4:	4601      	mov	r1, r0
    42c6:	2800      	cmp	r0, #0
    42c8:	f000 80a3 	beq.w	4412 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    42cc:	78c3      	ldrb	r3, [r0, #3]
    42ce:	7882      	ldrb	r2, [r0, #2]
    42d0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    42d4:	b292      	uxth	r2, r2
	if (length <= total_len) {
    42d6:	4294      	cmp	r4, r2
    42d8:	d90d      	bls.n	42f6 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    42da:	3e01      	subs	r6, #1
    42dc:	4226      	tst	r6, r4
    42de:	bf0c      	ite	eq
    42e0:	2301      	moveq	r3, #1
    42e2:	2300      	movne	r3, #0
		length = total_len;
    42e4:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    42e6:	4622      	mov	r2, r4
    42e8:	4628      	mov	r0, r5
    42ea:	4c4f      	ldr	r4, [pc, #316]	; (4428 <usbdc_cb_ctl_req+0x410>)
    42ec:	47a0      	blx	r4
    42ee:	fab0 f080 	clz	r0, r0
    42f2:	0940      	lsrs	r0, r0, #5
    42f4:	e6a8      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    42f6:	2300      	movs	r3, #0
    42f8:	e7f5      	b.n	42e6 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    42fa:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    42fc:	4b48      	ldr	r3, [pc, #288]	; (4420 <usbdc_cb_ctl_req+0x408>)
    42fe:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    4300:	681b      	ldr	r3, [r3, #0]
    4302:	b2d2      	uxtb	r2, r2
    4304:	6859      	ldr	r1, [r3, #4]
    4306:	6818      	ldr	r0, [r3, #0]
    4308:	4b48      	ldr	r3, [pc, #288]	; (442c <usbdc_cb_ctl_req+0x414>)
    430a:	4798      	blx	r3
	if (NULL == str_desc) {
    430c:	4601      	mov	r1, r0
    430e:	2800      	cmp	r0, #0
    4310:	f000 8081 	beq.w	4416 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    4314:	7802      	ldrb	r2, [r0, #0]
    4316:	4294      	cmp	r4, r2
    4318:	d90d      	bls.n	4336 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    431a:	3e01      	subs	r6, #1
    431c:	4226      	tst	r6, r4
    431e:	bf0c      	ite	eq
    4320:	2301      	moveq	r3, #1
    4322:	2300      	movne	r3, #0
		length = str_desc[0];
    4324:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    4326:	4622      	mov	r2, r4
    4328:	4628      	mov	r0, r5
    432a:	4c3f      	ldr	r4, [pc, #252]	; (4428 <usbdc_cb_ctl_req+0x410>)
    432c:	47a0      	blx	r4
    432e:	fab0 f080 	clz	r0, r0
    4332:	0940      	lsrs	r0, r0, #5
    4334:	e688      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    4336:	2300      	movs	r3, #0
    4338:	e7f5      	b.n	4326 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    433a:	4939      	ldr	r1, [pc, #228]	; (4420 <usbdc_cb_ctl_req+0x408>)
    433c:	694b      	ldr	r3, [r1, #20]
    433e:	7eca      	ldrb	r2, [r1, #27]
    4340:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    4342:	2300      	movs	r3, #0
    4344:	2201      	movs	r2, #1
    4346:	6949      	ldr	r1, [r1, #20]
    4348:	4628      	mov	r0, r5
    434a:	4c37      	ldr	r4, [pc, #220]	; (4428 <usbdc_cb_ctl_req+0x410>)
    434c:	47a0      	blx	r4
		return true;
    434e:	2001      	movs	r0, #1
    4350:	e67a      	b.n	4048 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4352:	f003 031f 	and.w	r3, r3, #31
    4356:	2b01      	cmp	r3, #1
    4358:	d903      	bls.n	4362 <usbdc_cb_ctl_req+0x34a>
    435a:	2b02      	cmp	r3, #2
    435c:	d010      	beq.n	4380 <usbdc_cb_ctl_req+0x368>
		return false;
    435e:	2000      	movs	r0, #0
    4360:	e672      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		st = 0;
    4362:	2300      	movs	r3, #0
    4364:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    4366:	492e      	ldr	r1, [pc, #184]	; (4420 <usbdc_cb_ctl_req+0x408>)
    4368:	694b      	ldr	r3, [r1, #20]
    436a:	f8bd 2000 	ldrh.w	r2, [sp]
    436e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    4370:	2300      	movs	r3, #0
    4372:	2202      	movs	r2, #2
    4374:	6949      	ldr	r1, [r1, #20]
    4376:	4628      	mov	r0, r5
    4378:	4c2b      	ldr	r4, [pc, #172]	; (4428 <usbdc_cb_ctl_req+0x410>)
    437a:	47a0      	blx	r4
	return true;
    437c:	2001      	movs	r0, #1
    437e:	e663      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    4380:	88a0      	ldrh	r0, [r4, #4]
    4382:	2102      	movs	r1, #2
    4384:	b2c0      	uxtb	r0, r0
    4386:	4b2a      	ldr	r3, [pc, #168]	; (4430 <usbdc_cb_ctl_req+0x418>)
    4388:	4798      	blx	r3
		if (st < 0) {
    438a:	2800      	cmp	r0, #0
    438c:	db03      	blt.n	4396 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    438e:	f000 0001 	and.w	r0, r0, #1
    4392:	9000      	str	r0, [sp, #0]
    4394:	e7e7      	b.n	4366 <usbdc_cb_ctl_req+0x34e>
			return false;
    4396:	2000      	movs	r0, #0
    4398:	e656      	b.n	4048 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    439a:	4b21      	ldr	r3, [pc, #132]	; (4420 <usbdc_cb_ctl_req+0x408>)
    439c:	7f5b      	ldrb	r3, [r3, #29]
    439e:	88a2      	ldrh	r2, [r4, #4]
    43a0:	4113      	asrs	r3, r2
    43a2:	f013 0f01 	tst.w	r3, #1
    43a6:	d012      	beq.n	43ce <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    43a8:	4b1d      	ldr	r3, [pc, #116]	; (4420 <usbdc_cb_ctl_req+0x408>)
    43aa:	691d      	ldr	r5, [r3, #16]
	return false;
    43ac:	2000      	movs	r0, #0
	while (NULL != func) {
    43ae:	2d00      	cmp	r5, #0
    43b0:	f43f ae4a 	beq.w	4048 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    43b4:	2602      	movs	r6, #2
    43b6:	686b      	ldr	r3, [r5, #4]
    43b8:	4622      	mov	r2, r4
    43ba:	4631      	mov	r1, r6
    43bc:	4628      	mov	r0, r5
    43be:	4798      	blx	r3
    43c0:	2800      	cmp	r0, #0
    43c2:	da0f      	bge.n	43e4 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    43c4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    43c6:	2d00      	cmp	r5, #0
    43c8:	d1f5      	bne.n	43b6 <usbdc_cb_ctl_req+0x39e>
	return false;
    43ca:	2000      	movs	r0, #0
    43cc:	e63c      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    43ce:	4914      	ldr	r1, [pc, #80]	; (4420 <usbdc_cb_ctl_req+0x408>)
    43d0:	694b      	ldr	r3, [r1, #20]
    43d2:	2000      	movs	r0, #0
    43d4:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    43d6:	4603      	mov	r3, r0
    43d8:	2201      	movs	r2, #1
    43da:	6949      	ldr	r1, [r1, #20]
    43dc:	4c12      	ldr	r4, [pc, #72]	; (4428 <usbdc_cb_ctl_req+0x410>)
    43de:	47a0      	blx	r4
		return true;
    43e0:	2001      	movs	r0, #1
    43e2:	e631      	b.n	4048 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    43e4:	490e      	ldr	r1, [pc, #56]	; (4420 <usbdc_cb_ctl_req+0x408>)
    43e6:	694b      	ldr	r3, [r1, #20]
    43e8:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    43ea:	2300      	movs	r3, #0
    43ec:	2201      	movs	r2, #1
    43ee:	6949      	ldr	r1, [r1, #20]
    43f0:	4618      	mov	r0, r3
    43f2:	4c0d      	ldr	r4, [pc, #52]	; (4428 <usbdc_cb_ctl_req+0x410>)
    43f4:	47a0      	blx	r4
			return true;
    43f6:	2001      	movs	r0, #1
    43f8:	e626      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		return true;
    43fa:	2001      	movs	r0, #1
    43fc:	e624      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		return false;
    43fe:	2000      	movs	r0, #0
    4400:	e622      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		return false;
    4402:	2000      	movs	r0, #0
    4404:	e620      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		return false;
    4406:	2000      	movs	r0, #0
    4408:	e61e      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		return false;
    440a:	2000      	movs	r0, #0
    440c:	e61c      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		return false;
    440e:	2000      	movs	r0, #0
    4410:	e61a      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		return false;
    4412:	2000      	movs	r0, #0
    4414:	e618      	b.n	4048 <usbdc_cb_ctl_req+0x30>
		return false;
    4416:	2000      	movs	r0, #0
    4418:	e616      	b.n	4048 <usbdc_cb_ctl_req+0x30>
			return false;
    441a:	2000      	movs	r0, #0
    441c:	e614      	b.n	4048 <usbdc_cb_ctl_req+0x30>
    441e:	bf00      	nop
    4420:	20000890 	.word	0x20000890
    4424:	000045bd 	.word	0x000045bd
    4428:	00003ff9 	.word	0x00003ff9
    442c:	00004625 	.word	0x00004625
    4430:	000017f9 	.word	0x000017f9

00004434 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    4434:	b508      	push	{r3, lr}
	switch (type) {
    4436:	2801      	cmp	r0, #1
    4438:	d007      	beq.n	444a <usbdc_register_handler+0x16>
    443a:	b110      	cbz	r0, 4442 <usbdc_register_handler+0xe>
    443c:	2802      	cmp	r0, #2
    443e:	d008      	beq.n	4452 <usbdc_register_handler+0x1e>
    4440:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    4442:	4806      	ldr	r0, [pc, #24]	; (445c <usbdc_register_handler+0x28>)
    4444:	4b06      	ldr	r3, [pc, #24]	; (4460 <usbdc_register_handler+0x2c>)
    4446:	4798      	blx	r3
		break;
    4448:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    444a:	4806      	ldr	r0, [pc, #24]	; (4464 <usbdc_register_handler+0x30>)
    444c:	4b04      	ldr	r3, [pc, #16]	; (4460 <usbdc_register_handler+0x2c>)
    444e:	4798      	blx	r3
		break;
    4450:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    4452:	4805      	ldr	r0, [pc, #20]	; (4468 <usbdc_register_handler+0x34>)
    4454:	4b02      	ldr	r3, [pc, #8]	; (4460 <usbdc_register_handler+0x2c>)
    4456:	4798      	blx	r3
    4458:	bd08      	pop	{r3, pc}
    445a:	bf00      	nop
    445c:	20000894 	.word	0x20000894
    4460:	00001909 	.word	0x00001909
    4464:	20000898 	.word	0x20000898
    4468:	2000089c 	.word	0x2000089c

0000446c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    446c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    446e:	4605      	mov	r5, r0
    4470:	f240 3255 	movw	r2, #853	; 0x355
    4474:	490c      	ldr	r1, [pc, #48]	; (44a8 <usbdc_init+0x3c>)
    4476:	3000      	adds	r0, #0
    4478:	bf18      	it	ne
    447a:	2001      	movne	r0, #1
    447c:	4b0b      	ldr	r3, [pc, #44]	; (44ac <usbdc_init+0x40>)
    447e:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    4480:	4b0b      	ldr	r3, [pc, #44]	; (44b0 <usbdc_init+0x44>)
    4482:	4798      	blx	r3
	if (rc < 0) {
    4484:	2800      	cmp	r0, #0
    4486:	db0e      	blt.n	44a6 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    4488:	4c0a      	ldr	r4, [pc, #40]	; (44b4 <usbdc_init+0x48>)
    448a:	2220      	movs	r2, #32
    448c:	2100      	movs	r1, #0
    448e:	4620      	mov	r0, r4
    4490:	4b09      	ldr	r3, [pc, #36]	; (44b8 <usbdc_init+0x4c>)
    4492:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    4494:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    4496:	4909      	ldr	r1, [pc, #36]	; (44bc <usbdc_init+0x50>)
    4498:	2000      	movs	r0, #0
    449a:	4c09      	ldr	r4, [pc, #36]	; (44c0 <usbdc_init+0x54>)
    449c:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    449e:	4909      	ldr	r1, [pc, #36]	; (44c4 <usbdc_init+0x58>)
    44a0:	2001      	movs	r0, #1
    44a2:	47a0      	blx	r4

	return 0;
    44a4:	2000      	movs	r0, #0
}
    44a6:	bd38      	pop	{r3, r4, r5, pc}
    44a8:	00005630 	.word	0x00005630
    44ac:	000018ad 	.word	0x000018ad
    44b0:	00001561 	.word	0x00001561
    44b4:	20000890 	.word	0x20000890
    44b8:	00004d81 	.word	0x00004d81
    44bc:	00003eed 	.word	0x00003eed
    44c0:	000015c9 	.word	0x000015c9
    44c4:	00003fd9 	.word	0x00003fd9

000044c8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    44c8:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    44ca:	4601      	mov	r1, r0
    44cc:	4801      	ldr	r0, [pc, #4]	; (44d4 <usbdc_register_function+0xc>)
    44ce:	4b02      	ldr	r3, [pc, #8]	; (44d8 <usbdc_register_function+0x10>)
    44d0:	4798      	blx	r3
    44d2:	bd08      	pop	{r3, pc}
    44d4:	200008a0 	.word	0x200008a0
    44d8:	00001909 	.word	0x00001909

000044dc <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    44dc:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    44de:	4b0a      	ldr	r3, [pc, #40]	; (4508 <usbdc_start+0x2c>)
    44e0:	7e9b      	ldrb	r3, [r3, #26]
    44e2:	b95b      	cbnz	r3, 44fc <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    44e4:	b168      	cbz	r0, 4502 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    44e6:	4b08      	ldr	r3, [pc, #32]	; (4508 <usbdc_start+0x2c>)
    44e8:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    44ea:	6802      	ldr	r2, [r0, #0]
    44ec:	79d2      	ldrb	r2, [r2, #7]
    44ee:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    44f0:	2201      	movs	r2, #1
    44f2:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    44f4:	4b05      	ldr	r3, [pc, #20]	; (450c <usbdc_start+0x30>)
    44f6:	4798      	blx	r3
	return ERR_NONE;
    44f8:	2000      	movs	r0, #0
    44fa:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    44fc:	f06f 0003 	mvn.w	r0, #3
    4500:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    4502:	f06f 0008 	mvn.w	r0, #8
}
    4506:	bd08      	pop	{r3, pc}
    4508:	20000890 	.word	0x20000890
    450c:	000015d5 	.word	0x000015d5

00004510 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    4510:	b508      	push	{r3, lr}
	usb_d_attach();
    4512:	4b01      	ldr	r3, [pc, #4]	; (4518 <usbdc_attach+0x8>)
    4514:	4798      	blx	r3
    4516:	bd08      	pop	{r3, pc}
    4518:	000015e1 	.word	0x000015e1

0000451c <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    451c:	4b01      	ldr	r3, [pc, #4]	; (4524 <usbdc_get_ctrl_buffer+0x8>)
    451e:	6958      	ldr	r0, [r3, #20]
    4520:	4770      	bx	lr
    4522:	bf00      	nop
    4524:	20000890 	.word	0x20000890

00004528 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    4528:	4b03      	ldr	r3, [pc, #12]	; (4538 <usbdc_get_state+0x10>)
    452a:	7e98      	ldrb	r0, [r3, #26]
    452c:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    4530:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    4532:	bf18      	it	ne
    4534:	2010      	movne	r0, #16
    4536:	4770      	bx	lr
    4538:	20000890 	.word	0x20000890

0000453c <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    453c:	4288      	cmp	r0, r1
    453e:	d214      	bcs.n	456a <usb_find_desc+0x2e>
	return desc[0];
    4540:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4542:	2b01      	cmp	r3, #1
    4544:	d913      	bls.n	456e <usb_find_desc+0x32>
{
    4546:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    4548:	7844      	ldrb	r4, [r0, #1]
    454a:	4294      	cmp	r4, r2
    454c:	d00a      	beq.n	4564 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    454e:	4418      	add	r0, r3
	while (desc < eof) {
    4550:	4281      	cmp	r1, r0
    4552:	d906      	bls.n	4562 <usb_find_desc+0x26>
	return desc[0];
    4554:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4556:	2b01      	cmp	r3, #1
    4558:	d90b      	bls.n	4572 <usb_find_desc+0x36>
	return desc[1];
    455a:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    455c:	4294      	cmp	r4, r2
    455e:	d1f6      	bne.n	454e <usb_find_desc+0x12>
    4560:	e000      	b.n	4564 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4562:	2000      	movs	r0, #0
}
    4564:	f85d 4b04 	ldr.w	r4, [sp], #4
    4568:	4770      	bx	lr
	return NULL;
    456a:	2000      	movs	r0, #0
    456c:	4770      	bx	lr
		_desc_len_check();
    456e:	2000      	movs	r0, #0
    4570:	4770      	bx	lr
    4572:	2000      	movs	r0, #0
    4574:	e7f6      	b.n	4564 <usb_find_desc+0x28>

00004576 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4576:	4288      	cmp	r0, r1
    4578:	d216      	bcs.n	45a8 <usb_find_ep_desc+0x32>
	return desc[0];
    457a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    457c:	2b01      	cmp	r3, #1
    457e:	d915      	bls.n	45ac <usb_find_ep_desc+0x36>
	return desc[1];
    4580:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4582:	2a04      	cmp	r2, #4
    4584:	d014      	beq.n	45b0 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4586:	2a05      	cmp	r2, #5
    4588:	d00b      	beq.n	45a2 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    458a:	4418      	add	r0, r3
	while (desc < eof) {
    458c:	4281      	cmp	r1, r0
    458e:	d909      	bls.n	45a4 <usb_find_ep_desc+0x2e>
	return desc[0];
    4590:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4592:	2b01      	cmp	r3, #1
    4594:	d90e      	bls.n	45b4 <usb_find_ep_desc+0x3e>
	return desc[1];
    4596:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4598:	2a04      	cmp	r2, #4
    459a:	d00d      	beq.n	45b8 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    459c:	2a05      	cmp	r2, #5
    459e:	d1f4      	bne.n	458a <usb_find_ep_desc+0x14>
    45a0:	e00b      	b.n	45ba <usb_find_ep_desc+0x44>
    45a2:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    45a4:	2000      	movs	r0, #0
    45a6:	4770      	bx	lr
    45a8:	2000      	movs	r0, #0
    45aa:	4770      	bx	lr
		_desc_len_check();
    45ac:	2000      	movs	r0, #0
    45ae:	4770      	bx	lr
	return NULL;
    45b0:	2000      	movs	r0, #0
    45b2:	4770      	bx	lr
		_desc_len_check();
    45b4:	2000      	movs	r0, #0
    45b6:	4770      	bx	lr
	return NULL;
    45b8:	2000      	movs	r0, #0
}
    45ba:	4770      	bx	lr

000045bc <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    45bc:	b538      	push	{r3, r4, r5, lr}
    45be:	460c      	mov	r4, r1
    45c0:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    45c2:	2202      	movs	r2, #2
    45c4:	4b16      	ldr	r3, [pc, #88]	; (4620 <usb_find_cfg_desc+0x64>)
    45c6:	4798      	blx	r3
	if (!desc) {
    45c8:	4603      	mov	r3, r0
    45ca:	b1e8      	cbz	r0, 4608 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    45cc:	4284      	cmp	r4, r0
    45ce:	d91d      	bls.n	460c <usb_find_cfg_desc+0x50>
		_desc_len_check();
    45d0:	7802      	ldrb	r2, [r0, #0]
    45d2:	2a01      	cmp	r2, #1
    45d4:	d91c      	bls.n	4610 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    45d6:	7842      	ldrb	r2, [r0, #1]
    45d8:	2a02      	cmp	r2, #2
    45da:	d11b      	bne.n	4614 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    45dc:	7942      	ldrb	r2, [r0, #5]
    45de:	42aa      	cmp	r2, r5
    45e0:	d012      	beq.n	4608 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    45e2:	78d9      	ldrb	r1, [r3, #3]
    45e4:	789a      	ldrb	r2, [r3, #2]
    45e6:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    45ea:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    45ee:	429c      	cmp	r4, r3
    45f0:	d909      	bls.n	4606 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    45f2:	781a      	ldrb	r2, [r3, #0]
    45f4:	2a01      	cmp	r2, #1
    45f6:	d90f      	bls.n	4618 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    45f8:	785a      	ldrb	r2, [r3, #1]
    45fa:	2a02      	cmp	r2, #2
    45fc:	d10e      	bne.n	461c <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    45fe:	795a      	ldrb	r2, [r3, #5]
    4600:	42aa      	cmp	r2, r5
    4602:	d1ee      	bne.n	45e2 <usb_find_cfg_desc+0x26>
    4604:	e000      	b.n	4608 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    4606:	2300      	movs	r3, #0
}
    4608:	4618      	mov	r0, r3
    460a:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    460c:	2300      	movs	r3, #0
    460e:	e7fb      	b.n	4608 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    4610:	2300      	movs	r3, #0
    4612:	e7f9      	b.n	4608 <usb_find_cfg_desc+0x4c>
	return NULL;
    4614:	2300      	movs	r3, #0
    4616:	e7f7      	b.n	4608 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    4618:	2300      	movs	r3, #0
    461a:	e7f5      	b.n	4608 <usb_find_cfg_desc+0x4c>
	return NULL;
    461c:	2300      	movs	r3, #0
    461e:	e7f3      	b.n	4608 <usb_find_cfg_desc+0x4c>
    4620:	0000453d 	.word	0x0000453d

00004624 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    4624:	4288      	cmp	r0, r1
    4626:	d217      	bcs.n	4658 <usb_find_str_desc+0x34>
{
    4628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    462c:	460d      	mov	r5, r1
    462e:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    4630:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    4632:	f04f 0803 	mov.w	r8, #3
    4636:	4f0c      	ldr	r7, [pc, #48]	; (4668 <usb_find_str_desc+0x44>)
    4638:	4642      	mov	r2, r8
    463a:	4629      	mov	r1, r5
    463c:	47b8      	blx	r7
		if (desc) {
    463e:	4603      	mov	r3, r0
    4640:	b170      	cbz	r0, 4660 <usb_find_str_desc+0x3c>
	return desc[0];
    4642:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    4644:	2801      	cmp	r0, #1
    4646:	d90a      	bls.n	465e <usb_find_str_desc+0x3a>
			if (i == str_index) {
    4648:	42a6      	cmp	r6, r4
    464a:	d009      	beq.n	4660 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    464c:	4418      	add	r0, r3
    464e:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    4650:	4285      	cmp	r5, r0
    4652:	d8f1      	bhi.n	4638 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    4654:	2300      	movs	r3, #0
    4656:	e003      	b.n	4660 <usb_find_str_desc+0x3c>
    4658:	2300      	movs	r3, #0
}
    465a:	4618      	mov	r0, r3
    465c:	4770      	bx	lr
			_desc_len_check();
    465e:	2300      	movs	r3, #0
}
    4660:	4618      	mov	r0, r3
    4662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4666:	bf00      	nop
    4668:	0000453d 	.word	0x0000453d

0000466c <_ZL18I2C_error_transferP16i2c_m_async_desc>:
	ptrI2C_Asyn_Class->set_rx_ready();
}
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
	// ptrI2C_Asyn_Class->send_stop();
		ptrI2C_Asyn_Class->clear_ack();
    466c:	4905      	ldr	r1, [pc, #20]	; (4684 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x18>)
    466e:	680b      	ldr	r3, [r1, #0]
    while(!txReady);
	//txReady=false;
	return i2c_m_async_send_stop(&I2C_A);
}
 volatile bool I2C_Asyn_Class::clear_ack(void){
	 ack=false;
    4670:	2200      	movs	r2, #0
    4672:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	 return ack;
    4676:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
		ptrI2C_Asyn_Class->txReady=true;
    467a:	2201      	movs	r2, #1
    467c:	701a      	strb	r2, [r3, #0]
		ptrI2C_Asyn_Class->rxReady=true;
    467e:	680b      	ldr	r3, [r1, #0]
    4680:	705a      	strb	r2, [r3, #1]
    4682:	4770      	bx	lr
    4684:	200008b0 	.word	0x200008b0

00004688 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
	ptrI2C_Asyn_Class->set_rx_ready();
    4688:	4b03      	ldr	r3, [pc, #12]	; (4698 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x10>)
    468a:	681b      	ldr	r3, [r3, #0]
	rxReady=true;
    468c:	2201      	movs	r2, #1
    468e:	705a      	strb	r2, [r3, #1]
		 ack=true;
    4690:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	return rxReady;
    4694:	785b      	ldrb	r3, [r3, #1]
    4696:	4770      	bx	lr
    4698:	200008b0 	.word	0x200008b0

0000469c <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
	ptrI2C_Asyn_Class->set_tx_ready();
    469c:	4b03      	ldr	r3, [pc, #12]	; (46ac <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x10>)
    469e:	681b      	ldr	r3, [r3, #0]
	txReady=true;
    46a0:	2201      	movs	r2, #1
    46a2:	701a      	strb	r2, [r3, #0]
	 ack=true;
    46a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	return txReady;
    46a8:	781b      	ldrb	r3, [r3, #0]
    46aa:	4770      	bx	lr
    46ac:	200008b0 	.word	0x200008b0

000046b0 <_ZN14I2C_Asyn_ClassC1Ev>:
I2C_Asyn_Class::I2C_Asyn_Class()
    46b0:	b470      	push	{r4, r5, r6}
    46b2:	4606      	mov	r6, r0
	I2C_A=I2C_EEPROM;
    46b4:	f100 0408 	add.w	r4, r0, #8
    46b8:	4d07      	ldr	r5, [pc, #28]	; (46d8 <_ZN14I2C_Asyn_ClassC1Ev+0x28>)
    46ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    46bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    46be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    46c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    46c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    46c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    46c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    46ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ptrI2C_Asyn_Class=this;
    46ce:	4b03      	ldr	r3, [pc, #12]	; (46dc <_ZN14I2C_Asyn_ClassC1Ev+0x2c>)
    46d0:	601e      	str	r6, [r3, #0]
} //I2C_Asyn_Class
    46d2:	4630      	mov	r0, r6
    46d4:	bc70      	pop	{r4, r5, r6}
    46d6:	4770      	bx	lr
    46d8:	200009a8 	.word	0x200009a8
    46dc:	200008b0 	.word	0x200008b0

000046e0 <_ZN14I2C_Asyn_ClassD1Ev>:
} //~I2C_Asyn_Class
    46e0:	4770      	bx	lr

000046e2 <_ZN14I2C_Asyn_Class14set_descriptorEP16i2c_m_async_desc>:
void	I2C_Asyn_Class::set_descriptor(i2c_m_async_desc * i2c_a){
    46e2:	b430      	push	{r4, r5}
	I2C_A=*i2c_a;
    46e4:	f100 0408 	add.w	r4, r0, #8
    46e8:	460d      	mov	r5, r1
    46ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    46ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    46ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    46f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    46f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    46f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    46f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    46fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    46fe:	bc30      	pop	{r4, r5}
    4700:	4770      	bx	lr
	...

00004704 <_ZN14I2C_Asyn_Class4initEv>:
void	I2C_Asyn_Class::init(void){
    4704:	b570      	push	{r4, r5, r6, lr}
    4706:	4605      	mov	r5, r0
		I2C_EEPROM_CLOCK_init();
    4708:	4b10      	ldr	r3, [pc, #64]	; (474c <_ZN14I2C_Asyn_Class4initEv+0x48>)
    470a:	4798      	blx	r3
		i2c_m_async_init(&I2C_A, SERCOM5);
    470c:	f105 0408 	add.w	r4, r5, #8
    4710:	490f      	ldr	r1, [pc, #60]	; (4750 <_ZN14I2C_Asyn_Class4initEv+0x4c>)
    4712:	4620      	mov	r0, r4
    4714:	4b0f      	ldr	r3, [pc, #60]	; (4754 <_ZN14I2C_Asyn_Class4initEv+0x50>)
    4716:	4798      	blx	r3
		I2C_EEPROM_PORT_init();
    4718:	4b0f      	ldr	r3, [pc, #60]	; (4758 <_ZN14I2C_Asyn_Class4initEv+0x54>)
    471a:	4798      	blx	r3
	i2c_m_async_get_io_descriptor(&I2C_A, &I2C_io);
    471c:	1d29      	adds	r1, r5, #4
    471e:	4620      	mov	r0, r4
    4720:	4b0e      	ldr	r3, [pc, #56]	; (475c <_ZN14I2C_Asyn_Class4initEv+0x58>)
    4722:	4798      	blx	r3
	i2c_m_async_enable(&I2C_A);
    4724:	4620      	mov	r0, r4
    4726:	4b0e      	ldr	r3, [pc, #56]	; (4760 <_ZN14I2C_Asyn_Class4initEv+0x5c>)
    4728:	4798      	blx	r3
	i2c_m_async_register_callback(&I2C_A, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
    472a:	4a0e      	ldr	r2, [pc, #56]	; (4764 <_ZN14I2C_Asyn_Class4initEv+0x60>)
    472c:	2101      	movs	r1, #1
    472e:	4620      	mov	r0, r4
    4730:	4e0d      	ldr	r6, [pc, #52]	; (4768 <_ZN14I2C_Asyn_Class4initEv+0x64>)
    4732:	47b0      	blx	r6
	i2c_m_async_register_callback(&I2C_A, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
    4734:	4a0d      	ldr	r2, [pc, #52]	; (476c <_ZN14I2C_Asyn_Class4initEv+0x68>)
    4736:	2102      	movs	r1, #2
    4738:	4620      	mov	r0, r4
    473a:	47b0      	blx	r6
	i2c_m_async_register_callback(&I2C_A, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
    473c:	4a0c      	ldr	r2, [pc, #48]	; (4770 <_ZN14I2C_Asyn_Class4initEv+0x6c>)
    473e:	2100      	movs	r1, #0
    4740:	4620      	mov	r0, r4
    4742:	47b0      	blx	r6
	txReady=true;
    4744:	2301      	movs	r3, #1
    4746:	702b      	strb	r3, [r5, #0]
	rxReady=true;
    4748:	706b      	strb	r3, [r5, #1]
    474a:	bd70      	pop	{r4, r5, r6, pc}
    474c:	00000b29 	.word	0x00000b29
    4750:	43000400 	.word	0x43000400
    4754:	00000fa5 	.word	0x00000fa5
    4758:	00000ac9 	.word	0x00000ac9
    475c:	000010e9 	.word	0x000010e9
    4760:	00001011 	.word	0x00001011
    4764:	0000469d 	.word	0x0000469d
    4768:	000010b9 	.word	0x000010b9
    476c:	00004689 	.word	0x00004689
    4770:	0000466d 	.word	0x0000466d

00004774 <_ZN14I2C_Asyn_Class13set_slaveaddrEh>:
int32_t	I2C_Asyn_Class::set_slaveaddr(uint8_t add){
    4774:	b508      	push	{r3, lr}
	return i2c_m_async_set_slaveaddr(&I2C_A,(int16_t)add, I2C_M_SEVEN);
    4776:	f44f 6200 	mov.w	r2, #2048	; 0x800
    477a:	3008      	adds	r0, #8
    477c:	4b01      	ldr	r3, [pc, #4]	; (4784 <_ZN14I2C_Asyn_Class13set_slaveaddrEh+0x10>)
    477e:	4798      	blx	r3
}
    4780:	bd08      	pop	{r3, pc}
    4782:	bf00      	nop
    4784:	000010a9 	.word	0x000010a9

00004788 <_ZN14I2C_Asyn_Class7disableEv>:
int32_t	I2C_Asyn_Class::disable(void){
    4788:	b508      	push	{r3, lr}
	return	i2c_m_async_disable(&I2C_A);
    478a:	3008      	adds	r0, #8
    478c:	4b01      	ldr	r3, [pc, #4]	; (4794 <_ZN14I2C_Asyn_Class7disableEv+0xc>)
    478e:	4798      	blx	r3
}
    4790:	bd08      	pop	{r3, pc}
    4792:	bf00      	nop
    4794:	0000105d 	.word	0x0000105d

00004798 <_ZN14I2C_Asyn_Class9write_ackEPht>:
int32_t I2C_Asyn_Class::write_ack(uint8_t* buffer, uint16_t lenght){
    4798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    479c:	4604      	mov	r4, r0
    479e:	4689      	mov	r9, r1
    47a0:	4690      	mov	r8, r2
	ack=false;
    47a2:	2300      	movs	r3, #0
    47a4:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    47a8:	f44f 6580 	mov.w	r5, #1024	; 0x400
		txReady=false;
    47ac:	461f      	mov	r7, r3
		w=io_write(I2C_io, buffer, lenght);
    47ae:	4e0b      	ldr	r6, [pc, #44]	; (47dc <_ZN14I2C_Asyn_Class9write_ackEPht+0x44>)
		delay_ms(1);
    47b0:	f8df a02c 	ldr.w	sl, [pc, #44]	; 47e0 <_ZN14I2C_Asyn_Class9write_ackEPht+0x48>
		while(!txReady);
    47b4:	7823      	ldrb	r3, [r4, #0]
    47b6:	2b00      	cmp	r3, #0
    47b8:	d0fc      	beq.n	47b4 <_ZN14I2C_Asyn_Class9write_ackEPht+0x1c>
		txReady=false;
    47ba:	7027      	strb	r7, [r4, #0]
		w=io_write(I2C_io, buffer, lenght);
    47bc:	4642      	mov	r2, r8
    47be:	4649      	mov	r1, r9
    47c0:	6860      	ldr	r0, [r4, #4]
    47c2:	47b0      	blx	r6
    47c4:	4683      	mov	fp, r0
		if (ack) break;	
    47c6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    47ca:	b91b      	cbnz	r3, 47d4 <_ZN14I2C_Asyn_Class9write_ackEPht+0x3c>
		delay_ms(1);
    47cc:	2001      	movs	r0, #1
    47ce:	47d0      	blx	sl
	for(int i=0;i<1024;i++){
    47d0:	3d01      	subs	r5, #1
    47d2:	d1ef      	bne.n	47b4 <_ZN14I2C_Asyn_Class9write_ackEPht+0x1c>
}
    47d4:	4658      	mov	r0, fp
    47d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    47da:	bf00      	nop
    47dc:	00004b85 	.word	0x00004b85
    47e0:	00000e85 	.word	0x00000e85

000047e4 <_ZN14I2C_Asyn_Class5writeEPht>:
int32_t I2C_Asyn_Class::write(uint8_t* buffer, uint16_t lenght){
    47e4:	b508      	push	{r3, lr}
	while(!txReady);
    47e6:	7803      	ldrb	r3, [r0, #0]
    47e8:	2b00      	cmp	r3, #0
    47ea:	d0fc      	beq.n	47e6 <_ZN14I2C_Asyn_Class5writeEPht+0x2>
	txReady=false;
    47ec:	2300      	movs	r3, #0
    47ee:	7003      	strb	r3, [r0, #0]
	return io_write(I2C_io, buffer, lenght);
    47f0:	6840      	ldr	r0, [r0, #4]
    47f2:	4b01      	ldr	r3, [pc, #4]	; (47f8 <_ZN14I2C_Asyn_Class5writeEPht+0x14>)
    47f4:	4798      	blx	r3
}
    47f6:	bd08      	pop	{r3, pc}
    47f8:	00004b85 	.word	0x00004b85

000047fc <_ZN14I2C_Asyn_Class4readEPht>:
int32_t I2C_Asyn_Class::read(uint8_t* buffer, uint16_t lenght){
    47fc:	b508      	push	{r3, lr}
		while(!rxReady);
    47fe:	7843      	ldrb	r3, [r0, #1]
    4800:	2b00      	cmp	r3, #0
    4802:	d0fc      	beq.n	47fe <_ZN14I2C_Asyn_Class4readEPht+0x2>
		rxReady=false;
    4804:	2300      	movs	r3, #0
    4806:	7043      	strb	r3, [r0, #1]
		return io_read(I2C_io, buffer, lenght);
    4808:	6840      	ldr	r0, [r0, #4]
    480a:	4b01      	ldr	r3, [pc, #4]	; (4810 <_ZN14I2C_Asyn_Class4readEPht+0x14>)
    480c:	4798      	blx	r3
}
    480e:	bd08      	pop	{r3, pc}
    4810:	00004bb5 	.word	0x00004bb5

00004814 <_ZN14I2C_Asyn_Class9send_stopEv>:
int32_t I2C_Asyn_Class::send_stop(void){
    4814:	b508      	push	{r3, lr}
    while(!txReady);
    4816:	7803      	ldrb	r3, [r0, #0]
    4818:	2b00      	cmp	r3, #0
    481a:	d0fc      	beq.n	4816 <_ZN14I2C_Asyn_Class9send_stopEv+0x2>
	return i2c_m_async_send_stop(&I2C_A);
    481c:	3008      	adds	r0, #8
    481e:	4b01      	ldr	r3, [pc, #4]	; (4824 <_ZN14I2C_Asyn_Class9send_stopEv+0x10>)
    4820:	4798      	blx	r3
}
    4822:	bd08      	pop	{r3, pc}
    4824:	000010dd 	.word	0x000010dd

00004828 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    4828:	b580      	push	{r7, lr}
    482a:	b082      	sub	sp, #8
    482c:	af00      	add	r7, sp, #0
    482e:	4603      	mov	r3, r0
    4830:	603a      	str	r2, [r7, #0]
    4832:	71fb      	strb	r3, [r7, #7]
    4834:	460b      	mov	r3, r1
    4836:	71bb      	strb	r3, [r7, #6]
	//cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
	//ptrUSBClass->write_buffer(count);
	//ptrUSBClass->GetLastChar();
	//bool done=true;
	ptrUSBClass->setLastChar();
    4838:	4b07      	ldr	r3, [pc, #28]	; (4858 <_ZL12cb_bulk_readh13usb_xfer_codem+0x30>)
    483a:	681b      	ldr	r3, [r3, #0]
    483c:	4618      	mov	r0, r3
    483e:	4b07      	ldr	r3, [pc, #28]	; (485c <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    4840:	4798      	blx	r3
	ptrUSBClass->setRxDone();
    4842:	4b05      	ldr	r3, [pc, #20]	; (4858 <_ZL12cb_bulk_readh13usb_xfer_codem+0x30>)
    4844:	681b      	ldr	r3, [r3, #0]
    4846:	4618      	mov	r0, r3
    4848:	4b05      	ldr	r3, [pc, #20]	; (4860 <_ZL12cb_bulk_readh13usb_xfer_codem+0x38>)
    484a:	4798      	blx	r3
	//ptrUSBClass->rxDone=done;
	/* No error. */
	return false;
    484c:	2300      	movs	r3, #0
}
    484e:	4618      	mov	r0, r3
    4850:	3708      	adds	r7, #8
    4852:	46bd      	mov	sp, r7
    4854:	bd80      	pop	{r7, pc}
    4856:	bf00      	nop
    4858:	20000934 	.word	0x20000934
    485c:	00004a5d 	.word	0x00004a5d
    4860:	00004a35 	.word	0x00004a35

00004864 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    4864:	b580      	push	{r7, lr}
    4866:	b082      	sub	sp, #8
    4868:	af00      	add	r7, sp, #0
    486a:	4603      	mov	r3, r0
    486c:	603a      	str	r2, [r7, #0]
    486e:	71fb      	strb	r3, [r7, #7]
    4870:	460b      	mov	r3, r1
    4872:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	//cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
	//volatile bool *done=ptrUSBClass->pTx;
	//*done=true;
	
	ptrUSBClass->setTxDone();
    4874:	4b04      	ldr	r3, [pc, #16]	; (4888 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x24>)
    4876:	681b      	ldr	r3, [r3, #0]
    4878:	4618      	mov	r0, r3
    487a:	4b04      	ldr	r3, [pc, #16]	; (488c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x28>)
    487c:	4798      	blx	r3
	//ptrUSBClass->GetLastChar();
	//ptrUSBClass->txDone=done;
	

	/* No error. */
	return false;
    487e:	2300      	movs	r3, #0
}
    4880:	4618      	mov	r0, r3
    4882:	3708      	adds	r7, #8
    4884:	46bd      	mov	sp, r7
    4886:	bd80      	pop	{r7, pc}
    4888:	20000934 	.word	0x20000934
    488c:	00004a0d 	.word	0x00004a0d

00004890 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    4890:	b580      	push	{r7, lr}
    4892:	b082      	sub	sp, #8
    4894:	af00      	add	r7, sp, #0
    4896:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    4898:	793b      	ldrb	r3, [r7, #4]
    489a:	f003 0301 	and.w	r3, r3, #1
    489e:	b2db      	uxtb	r3, r3
    48a0:	2b00      	cmp	r3, #0
    48a2:	d00c      	beq.n	48be <_ZL10cb_state_c22usb_cdc_control_signal+0x2e>
		/* Callbacks must be registered after endpoint allocation */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    48a4:	4908      	ldr	r1, [pc, #32]	; (48c8 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
    48a6:	2000      	movs	r0, #0
    48a8:	4b08      	ldr	r3, [pc, #32]	; (48cc <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
    48aa:	4798      	blx	r3
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    48ac:	4908      	ldr	r1, [pc, #32]	; (48d0 <_ZL10cb_state_c22usb_cdc_control_signal+0x40>)
    48ae:	2001      	movs	r0, #1
    48b0:	4b06      	ldr	r3, [pc, #24]	; (48cc <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
    48b2:	4798      	blx	r3
		/* Start Rx */
		//ptrUSBClass->read_char(1);
		ptrUSBClass->setTxDone();
    48b4:	4b07      	ldr	r3, [pc, #28]	; (48d4 <_ZL10cb_state_c22usb_cdc_control_signal+0x44>)
    48b6:	681b      	ldr	r3, [r3, #0]
    48b8:	4618      	mov	r0, r3
    48ba:	4b07      	ldr	r3, [pc, #28]	; (48d8 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    48bc:	4798      	blx	r3
		//ptrUSBClass->setTxDone();
		//ptrUSBClass->txDone=done;
	}

	/* No error. */
	return false;
    48be:	2300      	movs	r3, #0
}
    48c0:	4618      	mov	r0, r3
    48c2:	3708      	adds	r7, #8
    48c4:	46bd      	mov	sp, r7
    48c6:	bd80      	pop	{r7, pc}
    48c8:	00004829 	.word	0x00004829
    48cc:	00003e09 	.word	0x00003e09
    48d0:	00004865 	.word	0x00004865
    48d4:	20000934 	.word	0x20000934
    48d8:	00004a0d 	.word	0x00004a0d

000048dc <_ZN13USB_CDC_ClassC1Ev>:

// default constructor
USB_CDC_Class::USB_CDC_Class()
    48dc:	b480      	push	{r7}
    48de:	b083      	sub	sp, #12
    48e0:	af00      	add	r7, sp, #0
    48e2:	6078      	str	r0, [r7, #4]
{
	descUSB=desc;
    48e4:	687b      	ldr	r3, [r7, #4]
    48e6:	4a08      	ldr	r2, [pc, #32]	; (4908 <_ZN13USB_CDC_ClassC1Ev+0x2c>)
    48e8:	605a      	str	r2, [r3, #4]
	ptr_cdc_buffer=usbd_cdc_buffer;
    48ea:	687b      	ldr	r3, [r7, #4]
    48ec:	4a07      	ldr	r2, [pc, #28]	; (490c <_ZN13USB_CDC_ClassC1Ev+0x30>)
    48ee:	609a      	str	r2, [r3, #8]
	ptrUSBClass=this;
    48f0:	4a07      	ldr	r2, [pc, #28]	; (4910 <_ZN13USB_CDC_ClassC1Ev+0x34>)
    48f2:	687b      	ldr	r3, [r7, #4]
    48f4:	6013      	str	r3, [r2, #0]
	pUSBClass=this;
    48f6:	687b      	ldr	r3, [r7, #4]
    48f8:	687a      	ldr	r2, [r7, #4]
    48fa:	665a      	str	r2, [r3, #100]	; 0x64



} //USB_CDC_Class
    48fc:	687b      	ldr	r3, [r7, #4]
    48fe:	4618      	mov	r0, r3
    4900:	370c      	adds	r7, #12
    4902:	46bd      	mov	sp, r7
    4904:	bc80      	pop	{r7}
    4906:	4770      	bx	lr
    4908:	200000c4 	.word	0x200000c4
    490c:	200008b4 	.word	0x200008b4
    4910:	20000934 	.word	0x20000934

00004914 <_ZN13USB_CDC_Class4initEv>:
} //USB_CDC_Class

// default destructor


void USB_CDC_Class::init(){
    4914:	b580      	push	{r7, lr}
    4916:	b082      	sub	sp, #8
    4918:	af00      	add	r7, sp, #0
    491a:	6078      	str	r0, [r7, #4]
	usbdc_init(usb_ctrl_buffer);
    491c:	4815      	ldr	r0, [pc, #84]	; (4974 <_ZN13USB_CDC_Class4initEv+0x60>)
    491e:	4b16      	ldr	r3, [pc, #88]	; (4978 <_ZN13USB_CDC_Class4initEv+0x64>)
    4920:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    4922:	4b16      	ldr	r3, [pc, #88]	; (497c <_ZN13USB_CDC_Class4initEv+0x68>)
    4924:	4798      	blx	r3

	usbdc_start(desc);
    4926:	4816      	ldr	r0, [pc, #88]	; (4980 <_ZN13USB_CDC_Class4initEv+0x6c>)
    4928:	4b16      	ldr	r3, [pc, #88]	; (4984 <_ZN13USB_CDC_Class4initEv+0x70>)
    492a:	4798      	blx	r3
	usbdc_attach();
    492c:	4b16      	ldr	r3, [pc, #88]	; (4988 <_ZN13USB_CDC_Class4initEv+0x74>)
    492e:	4798      	blx	r3
	while (!isUSBEnabled()){};
    4930:	6878      	ldr	r0, [r7, #4]
    4932:	4b16      	ldr	r3, [pc, #88]	; (498c <_ZN13USB_CDC_Class4initEv+0x78>)
    4934:	4798      	blx	r3
    4936:	4603      	mov	r3, r0
    4938:	f083 0301 	eor.w	r3, r3, #1
    493c:	b2db      	uxtb	r3, r3
    493e:	2b00      	cmp	r3, #0
    4940:	d000      	beq.n	4944 <_ZN13USB_CDC_Class4initEv+0x30>
    4942:	e7f5      	b.n	4930 <_ZN13USB_CDC_Class4initEv+0x1c>
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    4944:	4912      	ldr	r1, [pc, #72]	; (4990 <_ZN13USB_CDC_Class4initEv+0x7c>)
    4946:	2003      	movs	r0, #3
    4948:	4b12      	ldr	r3, [pc, #72]	; (4994 <_ZN13USB_CDC_Class4initEv+0x80>)
    494a:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    494c:	4912      	ldr	r1, [pc, #72]	; (4998 <_ZN13USB_CDC_Class4initEv+0x84>)
    494e:	2000      	movs	r0, #0
    4950:	4b10      	ldr	r3, [pc, #64]	; (4994 <_ZN13USB_CDC_Class4initEv+0x80>)
    4952:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    4954:	4911      	ldr	r1, [pc, #68]	; (499c <_ZN13USB_CDC_Class4initEv+0x88>)
    4956:	2001      	movs	r0, #1
    4958:	4b0e      	ldr	r3, [pc, #56]	; (4994 <_ZN13USB_CDC_Class4initEv+0x80>)
    495a:	4798      	blx	r3
	txDone=true;
    495c:	687b      	ldr	r3, [r7, #4]
    495e:	2201      	movs	r2, #1
    4960:	f883 2020 	strb.w	r2, [r3, #32]
	rxDone=true;
    4964:	687b      	ldr	r3, [r7, #4]
    4966:	2201      	movs	r2, #1
    4968:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	
	
}
    496c:	bf00      	nop
    496e:	3708      	adds	r7, #8
    4970:	46bd      	mov	sp, r7
    4972:	bd80      	pop	{r7, pc}
    4974:	200008f4 	.word	0x200008f4
    4978:	0000446d 	.word	0x0000446d
    497c:	00003d9d 	.word	0x00003d9d
    4980:	200000c4 	.word	0x200000c4
    4984:	000044dd 	.word	0x000044dd
    4988:	00004511 	.word	0x00004511
    498c:	000049f1 	.word	0x000049f1
    4990:	00004891 	.word	0x00004891
    4994:	00003e09 	.word	0x00003e09
    4998:	00004829 	.word	0x00004829
    499c:	00004865 	.word	0x00004865

000049a0 <_ZN13USB_CDC_Class5writeEPhm>:
int32_t USB_CDC_Class::enable(){
	cdcdf_acm_init();
	return 0;
}

int32_t  USB_CDC_Class::write( uint8_t *p, uint32_t n){
    49a0:	b580      	push	{r7, lr}
    49a2:	b086      	sub	sp, #24
    49a4:	af00      	add	r7, sp, #0
    49a6:	60f8      	str	r0, [r7, #12]
    49a8:	60b9      	str	r1, [r7, #8]
    49aa:	607a      	str	r2, [r7, #4]
	int32_t w;

	while(!isUSBEnabled());
    49ac:	68f8      	ldr	r0, [r7, #12]
    49ae:	4b0e      	ldr	r3, [pc, #56]	; (49e8 <_ZN13USB_CDC_Class5writeEPhm+0x48>)
    49b0:	4798      	blx	r3
    49b2:	4603      	mov	r3, r0
    49b4:	f083 0301 	eor.w	r3, r3, #1
    49b8:	b2db      	uxtb	r3, r3
    49ba:	2b00      	cmp	r3, #0
    49bc:	d000      	beq.n	49c0 <_ZN13USB_CDC_Class5writeEPhm+0x20>
    49be:	e7f5      	b.n	49ac <_ZN13USB_CDC_Class5writeEPhm+0xc>
	while(!txDone);
    49c0:	68fb      	ldr	r3, [r7, #12]
    49c2:	f893 3020 	ldrb.w	r3, [r3, #32]
    49c6:	2b00      	cmp	r3, #0
    49c8:	d100      	bne.n	49cc <_ZN13USB_CDC_Class5writeEPhm+0x2c>
    49ca:	e7f9      	b.n	49c0 <_ZN13USB_CDC_Class5writeEPhm+0x20>
	txDone=false;
    49cc:	68fb      	ldr	r3, [r7, #12]
    49ce:	2200      	movs	r2, #0
    49d0:	f883 2020 	strb.w	r2, [r3, #32]
	w=cdcdf_acm_write(p,n);
    49d4:	6879      	ldr	r1, [r7, #4]
    49d6:	68b8      	ldr	r0, [r7, #8]
    49d8:	4b04      	ldr	r3, [pc, #16]	; (49ec <_ZN13USB_CDC_Class5writeEPhm+0x4c>)
    49da:	4798      	blx	r3
    49dc:	6178      	str	r0, [r7, #20]
	
	return w;
    49de:	697b      	ldr	r3, [r7, #20]
	
}
    49e0:	4618      	mov	r0, r3
    49e2:	3718      	adds	r7, #24
    49e4:	46bd      	mov	sp, r7
    49e6:	bd80      	pop	{r7, pc}
    49e8:	000049f1 	.word	0x000049f1
    49ec:	00003de1 	.word	0x00003de1

000049f0 <_ZN13USB_CDC_Class12isUSBEnabledEv>:
}
void USB_CDC_Class::disable(void){
cdcdf_acm_deinit();
	
}
bool USB_CDC_Class::isUSBEnabled(void){
    49f0:	b580      	push	{r7, lr}
    49f2:	b082      	sub	sp, #8
    49f4:	af00      	add	r7, sp, #0
    49f6:	6078      	str	r0, [r7, #4]
	

	return cdcdf_acm_is_enabled();
    49f8:	4b03      	ldr	r3, [pc, #12]	; (4a08 <_ZN13USB_CDC_Class12isUSBEnabledEv+0x18>)
    49fa:	4798      	blx	r3
    49fc:	4603      	mov	r3, r0
	
}
    49fe:	4618      	mov	r0, r3
    4a00:	3708      	adds	r7, #8
    4a02:	46bd      	mov	sp, r7
    4a04:	bd80      	pop	{r7, pc}
    4a06:	bf00      	nop
    4a08:	00003e55 	.word	0x00003e55

00004a0c <_ZN13USB_CDC_Class9setTxDoneEv>:
bool  USB_CDC_Class::setTxDone(void){
    4a0c:	b480      	push	{r7}
    4a0e:	b083      	sub	sp, #12
    4a10:	af00      	add	r7, sp, #0
    4a12:	6078      	str	r0, [r7, #4]
	txDone=true;
    4a14:	687b      	ldr	r3, [r7, #4]
    4a16:	2201      	movs	r2, #1
    4a18:	f883 2020 	strb.w	r2, [r3, #32]
	txDone=true;
    4a1c:	687b      	ldr	r3, [r7, #4]
    4a1e:	2201      	movs	r2, #1
    4a20:	f883 2020 	strb.w	r2, [r3, #32]
	return txDone;
    4a24:	687b      	ldr	r3, [r7, #4]
    4a26:	f893 3020 	ldrb.w	r3, [r3, #32]
}
    4a2a:	4618      	mov	r0, r3
    4a2c:	370c      	adds	r7, #12
    4a2e:	46bd      	mov	sp, r7
    4a30:	bc80      	pop	{r7}
    4a32:	4770      	bx	lr

00004a34 <_ZN13USB_CDC_Class9setRxDoneEv>:
bool  USB_CDC_Class::setRxDone(void){
    4a34:	b480      	push	{r7}
    4a36:	b083      	sub	sp, #12
    4a38:	af00      	add	r7, sp, #0
    4a3a:	6078      	str	r0, [r7, #4]
	rxDone=true;
    4a3c:	687b      	ldr	r3, [r7, #4]
    4a3e:	2201      	movs	r2, #1
    4a40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	rxDone=true;
    4a44:	687b      	ldr	r3, [r7, #4]
    4a46:	2201      	movs	r2, #1
    4a48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return rxDone;
    4a4c:	687b      	ldr	r3, [r7, #4]
    4a4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
    4a52:	4618      	mov	r0, r3
    4a54:	370c      	adds	r7, #12
    4a56:	46bd      	mov	sp, r7
    4a58:	bc80      	pop	{r7}
    4a5a:	4770      	bx	lr

00004a5c <_ZN13USB_CDC_Class11setLastCharEv>:
char USB_CDC_Class::getLastChar(){
	
	return (char)byte;
	
}
uint8_t USB_CDC_Class::setLastChar(){
    4a5c:	b480      	push	{r7}
    4a5e:	b083      	sub	sp, #12
    4a60:	af00      	add	r7, sp, #0
    4a62:	6078      	str	r0, [r7, #4]
	byte=*char_buffer;
    4a64:	687b      	ldr	r3, [r7, #4]
    4a66:	68db      	ldr	r3, [r3, #12]
    4a68:	781a      	ldrb	r2, [r3, #0]
    4a6a:	687b      	ldr	r3, [r7, #4]
    4a6c:	741a      	strb	r2, [r3, #16]

	return byte;
    4a6e:	687b      	ldr	r3, [r7, #4]
    4a70:	7c1b      	ldrb	r3, [r3, #16]
	
}
    4a72:	4618      	mov	r0, r3
    4a74:	370c      	adds	r7, #12
    4a76:	46bd      	mov	sp, r7
    4a78:	bc80      	pop	{r7}
    4a7a:	4770      	bx	lr

00004a7c <_ZN13USB_CDC_Class6xprintEPKc>:
// default destructor
USB_CDC_Class::~USB_CDC_Class()
{
	cdcdf_acm_deinit();
} //~USB_CDC_Class
void USB_CDC_Class::xprint(const char *message){
    4a7c:	b580      	push	{r7, lr}
    4a7e:	b0c6      	sub	sp, #280	; 0x118
    4a80:	af00      	add	r7, sp, #0
    4a82:	1d3b      	adds	r3, r7, #4
    4a84:	6018      	str	r0, [r3, #0]
    4a86:	463b      	mov	r3, r7
    4a88:	6019      	str	r1, [r3, #0]

	uint32_t s;
	char *p=(char *)message;
    4a8a:	463b      	mov	r3, r7
    4a8c:	681b      	ldr	r3, [r3, #0]
    4a8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	s=strlen(p);
    4a92:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
    4a96:	4b18      	ldr	r3, [pc, #96]	; (4af8 <_ZN13USB_CDC_Class6xprintEPKc+0x7c>)
    4a98:	4798      	blx	r3
    4a9a:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	uint8_t	chain[256];

	
	for (uint8_t i=0;i<s;i++){
    4a9e:	2300      	movs	r3, #0
    4aa0:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
    4aa4:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
    4aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    4aac:	429a      	cmp	r2, r3
    4aae:	d212      	bcs.n	4ad6 <_ZN13USB_CDC_Class6xprintEPKc+0x5a>
		chain[i]=*p;
    4ab0:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
    4ab4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
    4ab8:	7811      	ldrb	r1, [r2, #0]
    4aba:	f107 0208 	add.w	r2, r7, #8
    4abe:	54d1      	strb	r1, [r2, r3]
		p++;
    4ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    4ac4:	3301      	adds	r3, #1
    4ac6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	for (uint8_t i=0;i<s;i++){
    4aca:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
    4ace:	3301      	adds	r3, #1
    4ad0:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
    4ad4:	e7e6      	b.n	4aa4 <_ZN13USB_CDC_Class6xprintEPKc+0x28>
	}

	//uint8_t	pArray[s]=*string;
	uint8_t *ptr=(uint8_t*)chain;
    4ad6:	f107 0308 	add.w	r3, r7, #8
    4ada:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	
	write(ptr,s);
    4ade:	1d3b      	adds	r3, r7, #4
    4ae0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    4ae4:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
    4ae8:	6818      	ldr	r0, [r3, #0]
    4aea:	4b04      	ldr	r3, [pc, #16]	; (4afc <_ZN13USB_CDC_Class6xprintEPKc+0x80>)
    4aec:	4798      	blx	r3
}
    4aee:	bf00      	nop
    4af0:	f507 778c 	add.w	r7, r7, #280	; 0x118
    4af4:	46bd      	mov	sp, r7
    4af6:	bd80      	pop	{r7, pc}
    4af8:	00005101 	.word	0x00005101
    4afc:	000049a1 	.word	0x000049a1

00004b00 <_ZN13USB_CDC_Class6xprintEPc>:
void USB_CDC_Class::xprint(char *message){
    4b00:	b580      	push	{r7, lr}
    4b02:	b0c6      	sub	sp, #280	; 0x118
    4b04:	af00      	add	r7, sp, #0
    4b06:	1d3b      	adds	r3, r7, #4
    4b08:	6018      	str	r0, [r3, #0]
    4b0a:	463b      	mov	r3, r7
    4b0c:	6019      	str	r1, [r3, #0]

	uint32_t s;
	char *p=(char *)message;
    4b0e:	463b      	mov	r3, r7
    4b10:	681b      	ldr	r3, [r3, #0]
    4b12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	s=strlen(p);
    4b16:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
    4b1a:	4b18      	ldr	r3, [pc, #96]	; (4b7c <_ZN13USB_CDC_Class6xprintEPc+0x7c>)
    4b1c:	4798      	blx	r3
    4b1e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	uint8_t	chain[256];

	
	for (uint8_t i=0;i<s;i++){
    4b22:	2300      	movs	r3, #0
    4b24:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
    4b28:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
    4b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    4b30:	429a      	cmp	r2, r3
    4b32:	d212      	bcs.n	4b5a <_ZN13USB_CDC_Class6xprintEPc+0x5a>
		chain[i]=*p;
    4b34:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
    4b38:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
    4b3c:	7811      	ldrb	r1, [r2, #0]
    4b3e:	f107 0208 	add.w	r2, r7, #8
    4b42:	54d1      	strb	r1, [r2, r3]
		p++;
    4b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    4b48:	3301      	adds	r3, #1
    4b4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	for (uint8_t i=0;i<s;i++){
    4b4e:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
    4b52:	3301      	adds	r3, #1
    4b54:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
    4b58:	e7e6      	b.n	4b28 <_ZN13USB_CDC_Class6xprintEPc+0x28>
	}

	//uint8_t	pArray[s]=*string;
	uint8_t *ptr=(uint8_t*)chain;
    4b5a:	f107 0308 	add.w	r3, r7, #8
    4b5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	
	write(ptr,s);
    4b62:	1d3b      	adds	r3, r7, #4
    4b64:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    4b68:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
    4b6c:	6818      	ldr	r0, [r3, #0]
    4b6e:	4b04      	ldr	r3, [pc, #16]	; (4b80 <_ZN13USB_CDC_Class6xprintEPc+0x80>)
    4b70:	4798      	blx	r3
    4b72:	bf00      	nop
    4b74:	f507 778c 	add.w	r7, r7, #280	; 0x118
    4b78:	46bd      	mov	sp, r7
    4b7a:	bd80      	pop	{r7, pc}
    4b7c:	00005101 	.word	0x00005101
    4b80:	000049a1 	.word	0x000049a1

00004b84 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    4b84:	b570      	push	{r4, r5, r6, lr}
    4b86:	460d      	mov	r5, r1
    4b88:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    4b8a:	4604      	mov	r4, r0
    4b8c:	b160      	cbz	r0, 4ba8 <io_write+0x24>
    4b8e:	1c08      	adds	r0, r1, #0
    4b90:	bf18      	it	ne
    4b92:	2001      	movne	r0, #1
    4b94:	2234      	movs	r2, #52	; 0x34
    4b96:	4905      	ldr	r1, [pc, #20]	; (4bac <io_write+0x28>)
    4b98:	4b05      	ldr	r3, [pc, #20]	; (4bb0 <io_write+0x2c>)
    4b9a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    4b9c:	6823      	ldr	r3, [r4, #0]
    4b9e:	4632      	mov	r2, r6
    4ba0:	4629      	mov	r1, r5
    4ba2:	4620      	mov	r0, r4
    4ba4:	4798      	blx	r3
}
    4ba6:	bd70      	pop	{r4, r5, r6, pc}
    4ba8:	2000      	movs	r0, #0
    4baa:	e7f3      	b.n	4b94 <io_write+0x10>
    4bac:	00005648 	.word	0x00005648
    4bb0:	000018ad 	.word	0x000018ad

00004bb4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    4bb4:	b570      	push	{r4, r5, r6, lr}
    4bb6:	460d      	mov	r5, r1
    4bb8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    4bba:	4604      	mov	r4, r0
    4bbc:	b160      	cbz	r0, 4bd8 <io_read+0x24>
    4bbe:	1c08      	adds	r0, r1, #0
    4bc0:	bf18      	it	ne
    4bc2:	2001      	movne	r0, #1
    4bc4:	223d      	movs	r2, #61	; 0x3d
    4bc6:	4905      	ldr	r1, [pc, #20]	; (4bdc <io_read+0x28>)
    4bc8:	4b05      	ldr	r3, [pc, #20]	; (4be0 <io_read+0x2c>)
    4bca:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    4bcc:	6863      	ldr	r3, [r4, #4]
    4bce:	4632      	mov	r2, r6
    4bd0:	4629      	mov	r1, r5
    4bd2:	4620      	mov	r0, r4
    4bd4:	4798      	blx	r3
}
    4bd6:	bd70      	pop	{r4, r5, r6, pc}
    4bd8:	2000      	movs	r0, #0
    4bda:	e7f3      	b.n	4bc4 <io_read+0x10>
    4bdc:	00005648 	.word	0x00005648
    4be0:	000018ad 	.word	0x000018ad

00004be4 <__aeabi_atexit>:
    4be4:	460b      	mov	r3, r1
    4be6:	4601      	mov	r1, r0
    4be8:	4618      	mov	r0, r3
    4bea:	f000 b801 	b.w	4bf0 <__cxa_atexit>
    4bee:	bf00      	nop

00004bf0 <__cxa_atexit>:
    4bf0:	4613      	mov	r3, r2
    4bf2:	460a      	mov	r2, r1
    4bf4:	4601      	mov	r1, r0
    4bf6:	2002      	movs	r0, #2
    4bf8:	f000 baf0 	b.w	51dc <__register_exitproc>

00004bfc <__libc_init_array>:
    4bfc:	b570      	push	{r4, r5, r6, lr}
    4bfe:	4e0f      	ldr	r6, [pc, #60]	; (4c3c <__libc_init_array+0x40>)
    4c00:	4d0f      	ldr	r5, [pc, #60]	; (4c40 <__libc_init_array+0x44>)
    4c02:	1b76      	subs	r6, r6, r5
    4c04:	10b6      	asrs	r6, r6, #2
    4c06:	bf18      	it	ne
    4c08:	2400      	movne	r4, #0
    4c0a:	d005      	beq.n	4c18 <__libc_init_array+0x1c>
    4c0c:	3401      	adds	r4, #1
    4c0e:	f855 3b04 	ldr.w	r3, [r5], #4
    4c12:	4798      	blx	r3
    4c14:	42a6      	cmp	r6, r4
    4c16:	d1f9      	bne.n	4c0c <__libc_init_array+0x10>
    4c18:	4e0a      	ldr	r6, [pc, #40]	; (4c44 <__libc_init_array+0x48>)
    4c1a:	4d0b      	ldr	r5, [pc, #44]	; (4c48 <__libc_init_array+0x4c>)
    4c1c:	1b76      	subs	r6, r6, r5
    4c1e:	f000 fd1f 	bl	5660 <_init>
    4c22:	10b6      	asrs	r6, r6, #2
    4c24:	bf18      	it	ne
    4c26:	2400      	movne	r4, #0
    4c28:	d006      	beq.n	4c38 <__libc_init_array+0x3c>
    4c2a:	3401      	adds	r4, #1
    4c2c:	f855 3b04 	ldr.w	r3, [r5], #4
    4c30:	4798      	blx	r3
    4c32:	42a6      	cmp	r6, r4
    4c34:	d1f9      	bne.n	4c2a <__libc_init_array+0x2e>
    4c36:	bd70      	pop	{r4, r5, r6, pc}
    4c38:	bd70      	pop	{r4, r5, r6, pc}
    4c3a:	bf00      	nop
    4c3c:	0000566c 	.word	0x0000566c
    4c40:	0000566c 	.word	0x0000566c
    4c44:	00005678 	.word	0x00005678
    4c48:	0000566c 	.word	0x0000566c

00004c4c <memcpy>:
    4c4c:	4684      	mov	ip, r0
    4c4e:	ea41 0300 	orr.w	r3, r1, r0
    4c52:	f013 0303 	ands.w	r3, r3, #3
    4c56:	d16d      	bne.n	4d34 <memcpy+0xe8>
    4c58:	3a40      	subs	r2, #64	; 0x40
    4c5a:	d341      	bcc.n	4ce0 <memcpy+0x94>
    4c5c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c60:	f840 3b04 	str.w	r3, [r0], #4
    4c64:	f851 3b04 	ldr.w	r3, [r1], #4
    4c68:	f840 3b04 	str.w	r3, [r0], #4
    4c6c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c70:	f840 3b04 	str.w	r3, [r0], #4
    4c74:	f851 3b04 	ldr.w	r3, [r1], #4
    4c78:	f840 3b04 	str.w	r3, [r0], #4
    4c7c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c80:	f840 3b04 	str.w	r3, [r0], #4
    4c84:	f851 3b04 	ldr.w	r3, [r1], #4
    4c88:	f840 3b04 	str.w	r3, [r0], #4
    4c8c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c90:	f840 3b04 	str.w	r3, [r0], #4
    4c94:	f851 3b04 	ldr.w	r3, [r1], #4
    4c98:	f840 3b04 	str.w	r3, [r0], #4
    4c9c:	f851 3b04 	ldr.w	r3, [r1], #4
    4ca0:	f840 3b04 	str.w	r3, [r0], #4
    4ca4:	f851 3b04 	ldr.w	r3, [r1], #4
    4ca8:	f840 3b04 	str.w	r3, [r0], #4
    4cac:	f851 3b04 	ldr.w	r3, [r1], #4
    4cb0:	f840 3b04 	str.w	r3, [r0], #4
    4cb4:	f851 3b04 	ldr.w	r3, [r1], #4
    4cb8:	f840 3b04 	str.w	r3, [r0], #4
    4cbc:	f851 3b04 	ldr.w	r3, [r1], #4
    4cc0:	f840 3b04 	str.w	r3, [r0], #4
    4cc4:	f851 3b04 	ldr.w	r3, [r1], #4
    4cc8:	f840 3b04 	str.w	r3, [r0], #4
    4ccc:	f851 3b04 	ldr.w	r3, [r1], #4
    4cd0:	f840 3b04 	str.w	r3, [r0], #4
    4cd4:	f851 3b04 	ldr.w	r3, [r1], #4
    4cd8:	f840 3b04 	str.w	r3, [r0], #4
    4cdc:	3a40      	subs	r2, #64	; 0x40
    4cde:	d2bd      	bcs.n	4c5c <memcpy+0x10>
    4ce0:	3230      	adds	r2, #48	; 0x30
    4ce2:	d311      	bcc.n	4d08 <memcpy+0xbc>
    4ce4:	f851 3b04 	ldr.w	r3, [r1], #4
    4ce8:	f840 3b04 	str.w	r3, [r0], #4
    4cec:	f851 3b04 	ldr.w	r3, [r1], #4
    4cf0:	f840 3b04 	str.w	r3, [r0], #4
    4cf4:	f851 3b04 	ldr.w	r3, [r1], #4
    4cf8:	f840 3b04 	str.w	r3, [r0], #4
    4cfc:	f851 3b04 	ldr.w	r3, [r1], #4
    4d00:	f840 3b04 	str.w	r3, [r0], #4
    4d04:	3a10      	subs	r2, #16
    4d06:	d2ed      	bcs.n	4ce4 <memcpy+0x98>
    4d08:	320c      	adds	r2, #12
    4d0a:	d305      	bcc.n	4d18 <memcpy+0xcc>
    4d0c:	f851 3b04 	ldr.w	r3, [r1], #4
    4d10:	f840 3b04 	str.w	r3, [r0], #4
    4d14:	3a04      	subs	r2, #4
    4d16:	d2f9      	bcs.n	4d0c <memcpy+0xc0>
    4d18:	3204      	adds	r2, #4
    4d1a:	d008      	beq.n	4d2e <memcpy+0xe2>
    4d1c:	07d2      	lsls	r2, r2, #31
    4d1e:	bf1c      	itt	ne
    4d20:	f811 3b01 	ldrbne.w	r3, [r1], #1
    4d24:	f800 3b01 	strbne.w	r3, [r0], #1
    4d28:	d301      	bcc.n	4d2e <memcpy+0xe2>
    4d2a:	880b      	ldrh	r3, [r1, #0]
    4d2c:	8003      	strh	r3, [r0, #0]
    4d2e:	4660      	mov	r0, ip
    4d30:	4770      	bx	lr
    4d32:	bf00      	nop
    4d34:	2a08      	cmp	r2, #8
    4d36:	d313      	bcc.n	4d60 <memcpy+0x114>
    4d38:	078b      	lsls	r3, r1, #30
    4d3a:	d08d      	beq.n	4c58 <memcpy+0xc>
    4d3c:	f010 0303 	ands.w	r3, r0, #3
    4d40:	d08a      	beq.n	4c58 <memcpy+0xc>
    4d42:	f1c3 0304 	rsb	r3, r3, #4
    4d46:	1ad2      	subs	r2, r2, r3
    4d48:	07db      	lsls	r3, r3, #31
    4d4a:	bf1c      	itt	ne
    4d4c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    4d50:	f800 3b01 	strbne.w	r3, [r0], #1
    4d54:	d380      	bcc.n	4c58 <memcpy+0xc>
    4d56:	f831 3b02 	ldrh.w	r3, [r1], #2
    4d5a:	f820 3b02 	strh.w	r3, [r0], #2
    4d5e:	e77b      	b.n	4c58 <memcpy+0xc>
    4d60:	3a04      	subs	r2, #4
    4d62:	d3d9      	bcc.n	4d18 <memcpy+0xcc>
    4d64:	3a01      	subs	r2, #1
    4d66:	f811 3b01 	ldrb.w	r3, [r1], #1
    4d6a:	f800 3b01 	strb.w	r3, [r0], #1
    4d6e:	d2f9      	bcs.n	4d64 <memcpy+0x118>
    4d70:	780b      	ldrb	r3, [r1, #0]
    4d72:	7003      	strb	r3, [r0, #0]
    4d74:	784b      	ldrb	r3, [r1, #1]
    4d76:	7043      	strb	r3, [r0, #1]
    4d78:	788b      	ldrb	r3, [r1, #2]
    4d7a:	7083      	strb	r3, [r0, #2]
    4d7c:	4660      	mov	r0, ip
    4d7e:	4770      	bx	lr

00004d80 <memset>:
    4d80:	b470      	push	{r4, r5, r6}
    4d82:	0786      	lsls	r6, r0, #30
    4d84:	d046      	beq.n	4e14 <memset+0x94>
    4d86:	1e54      	subs	r4, r2, #1
    4d88:	2a00      	cmp	r2, #0
    4d8a:	d041      	beq.n	4e10 <memset+0x90>
    4d8c:	b2ca      	uxtb	r2, r1
    4d8e:	4603      	mov	r3, r0
    4d90:	e002      	b.n	4d98 <memset+0x18>
    4d92:	f114 34ff 	adds.w	r4, r4, #4294967295
    4d96:	d33b      	bcc.n	4e10 <memset+0x90>
    4d98:	f803 2b01 	strb.w	r2, [r3], #1
    4d9c:	079d      	lsls	r5, r3, #30
    4d9e:	d1f8      	bne.n	4d92 <memset+0x12>
    4da0:	2c03      	cmp	r4, #3
    4da2:	d92e      	bls.n	4e02 <memset+0x82>
    4da4:	b2cd      	uxtb	r5, r1
    4da6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    4daa:	2c0f      	cmp	r4, #15
    4dac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4db0:	d919      	bls.n	4de6 <memset+0x66>
    4db2:	f103 0210 	add.w	r2, r3, #16
    4db6:	4626      	mov	r6, r4
    4db8:	3e10      	subs	r6, #16
    4dba:	2e0f      	cmp	r6, #15
    4dbc:	f842 5c10 	str.w	r5, [r2, #-16]
    4dc0:	f842 5c0c 	str.w	r5, [r2, #-12]
    4dc4:	f842 5c08 	str.w	r5, [r2, #-8]
    4dc8:	f842 5c04 	str.w	r5, [r2, #-4]
    4dcc:	f102 0210 	add.w	r2, r2, #16
    4dd0:	d8f2      	bhi.n	4db8 <memset+0x38>
    4dd2:	f1a4 0210 	sub.w	r2, r4, #16
    4dd6:	f022 020f 	bic.w	r2, r2, #15
    4dda:	f004 040f 	and.w	r4, r4, #15
    4dde:	3210      	adds	r2, #16
    4de0:	2c03      	cmp	r4, #3
    4de2:	4413      	add	r3, r2
    4de4:	d90d      	bls.n	4e02 <memset+0x82>
    4de6:	461e      	mov	r6, r3
    4de8:	4622      	mov	r2, r4
    4dea:	3a04      	subs	r2, #4
    4dec:	2a03      	cmp	r2, #3
    4dee:	f846 5b04 	str.w	r5, [r6], #4
    4df2:	d8fa      	bhi.n	4dea <memset+0x6a>
    4df4:	1f22      	subs	r2, r4, #4
    4df6:	f022 0203 	bic.w	r2, r2, #3
    4dfa:	3204      	adds	r2, #4
    4dfc:	4413      	add	r3, r2
    4dfe:	f004 0403 	and.w	r4, r4, #3
    4e02:	b12c      	cbz	r4, 4e10 <memset+0x90>
    4e04:	b2c9      	uxtb	r1, r1
    4e06:	441c      	add	r4, r3
    4e08:	f803 1b01 	strb.w	r1, [r3], #1
    4e0c:	429c      	cmp	r4, r3
    4e0e:	d1fb      	bne.n	4e08 <memset+0x88>
    4e10:	bc70      	pop	{r4, r5, r6}
    4e12:	4770      	bx	lr
    4e14:	4614      	mov	r4, r2
    4e16:	4603      	mov	r3, r0
    4e18:	e7c2      	b.n	4da0 <memset+0x20>
    4e1a:	bf00      	nop
    4e1c:	0000      	movs	r0, r0
    4e1e:	0000      	movs	r0, r0
    4e20:	eba2 0003 	sub.w	r0, r2, r3
    4e24:	4770      	bx	lr
    4e26:	bf00      	nop

00004e28 <strcmp>:
    4e28:	7802      	ldrb	r2, [r0, #0]
    4e2a:	780b      	ldrb	r3, [r1, #0]
    4e2c:	2a01      	cmp	r2, #1
    4e2e:	bf28      	it	cs
    4e30:	429a      	cmpcs	r2, r3
    4e32:	d1f5      	bne.n	4e20 <memset+0xa0>
    4e34:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    4e38:	ea40 0401 	orr.w	r4, r0, r1
    4e3c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    4e40:	f06f 0c00 	mvn.w	ip, #0
    4e44:	ea4f 7244 	mov.w	r2, r4, lsl #29
    4e48:	b312      	cbz	r2, 4e90 <strcmp+0x68>
    4e4a:	ea80 0401 	eor.w	r4, r0, r1
    4e4e:	f014 0f07 	tst.w	r4, #7
    4e52:	d16a      	bne.n	4f2a <strcmp+0x102>
    4e54:	f000 0407 	and.w	r4, r0, #7
    4e58:	f020 0007 	bic.w	r0, r0, #7
    4e5c:	f004 0503 	and.w	r5, r4, #3
    4e60:	f021 0107 	bic.w	r1, r1, #7
    4e64:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    4e68:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    4e6c:	f014 0f04 	tst.w	r4, #4
    4e70:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    4e74:	fa0c f405 	lsl.w	r4, ip, r5
    4e78:	ea62 0204 	orn	r2, r2, r4
    4e7c:	ea66 0604 	orn	r6, r6, r4
    4e80:	d00a      	beq.n	4e98 <strcmp+0x70>
    4e82:	ea63 0304 	orn	r3, r3, r4
    4e86:	4662      	mov	r2, ip
    4e88:	ea67 0704 	orn	r7, r7, r4
    4e8c:	4666      	mov	r6, ip
    4e8e:	e003      	b.n	4e98 <strcmp+0x70>
    4e90:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    4e94:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    4e98:	fa82 f54c 	uadd8	r5, r2, ip
    4e9c:	ea82 0406 	eor.w	r4, r2, r6
    4ea0:	faa4 f48c 	sel	r4, r4, ip
    4ea4:	bb6c      	cbnz	r4, 4f02 <strcmp+0xda>
    4ea6:	fa83 f54c 	uadd8	r5, r3, ip
    4eaa:	ea83 0507 	eor.w	r5, r3, r7
    4eae:	faa5 f58c 	sel	r5, r5, ip
    4eb2:	b995      	cbnz	r5, 4eda <strcmp+0xb2>
    4eb4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    4eb8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    4ebc:	fa82 f54c 	uadd8	r5, r2, ip
    4ec0:	ea82 0406 	eor.w	r4, r2, r6
    4ec4:	faa4 f48c 	sel	r4, r4, ip
    4ec8:	fa83 f54c 	uadd8	r5, r3, ip
    4ecc:	ea83 0507 	eor.w	r5, r3, r7
    4ed0:	faa5 f58c 	sel	r5, r5, ip
    4ed4:	4325      	orrs	r5, r4
    4ed6:	d0db      	beq.n	4e90 <strcmp+0x68>
    4ed8:	b99c      	cbnz	r4, 4f02 <strcmp+0xda>
    4eda:	ba2d      	rev	r5, r5
    4edc:	fab5 f485 	clz	r4, r5
    4ee0:	f024 0407 	bic.w	r4, r4, #7
    4ee4:	fa27 f104 	lsr.w	r1, r7, r4
    4ee8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    4eec:	fa23 f304 	lsr.w	r3, r3, r4
    4ef0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    4ef4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    4ef8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    4efc:	eba0 0001 	sub.w	r0, r0, r1
    4f00:	4770      	bx	lr
    4f02:	ba24      	rev	r4, r4
    4f04:	fab4 f484 	clz	r4, r4
    4f08:	f024 0407 	bic.w	r4, r4, #7
    4f0c:	fa26 f104 	lsr.w	r1, r6, r4
    4f10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    4f14:	fa22 f204 	lsr.w	r2, r2, r4
    4f18:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    4f1c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    4f20:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    4f24:	eba0 0001 	sub.w	r0, r0, r1
    4f28:	4770      	bx	lr
    4f2a:	f014 0f03 	tst.w	r4, #3
    4f2e:	d13c      	bne.n	4faa <strcmp+0x182>
    4f30:	f010 0403 	ands.w	r4, r0, #3
    4f34:	d128      	bne.n	4f88 <strcmp+0x160>
    4f36:	f850 2b08 	ldr.w	r2, [r0], #8
    4f3a:	f851 3b08 	ldr.w	r3, [r1], #8
    4f3e:	fa82 f54c 	uadd8	r5, r2, ip
    4f42:	ea82 0503 	eor.w	r5, r2, r3
    4f46:	faa5 f58c 	sel	r5, r5, ip
    4f4a:	b95d      	cbnz	r5, 4f64 <strcmp+0x13c>
    4f4c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    4f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4f54:	fa82 f54c 	uadd8	r5, r2, ip
    4f58:	ea82 0503 	eor.w	r5, r2, r3
    4f5c:	faa5 f58c 	sel	r5, r5, ip
    4f60:	2d00      	cmp	r5, #0
    4f62:	d0e8      	beq.n	4f36 <strcmp+0x10e>
    4f64:	ba2d      	rev	r5, r5
    4f66:	fab5 f485 	clz	r4, r5
    4f6a:	f024 0407 	bic.w	r4, r4, #7
    4f6e:	fa23 f104 	lsr.w	r1, r3, r4
    4f72:	fa22 f204 	lsr.w	r2, r2, r4
    4f76:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    4f7a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    4f7e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    4f82:	eba0 0001 	sub.w	r0, r0, r1
    4f86:	4770      	bx	lr
    4f88:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    4f8c:	f020 0003 	bic.w	r0, r0, #3
    4f90:	f850 2b08 	ldr.w	r2, [r0], #8
    4f94:	f021 0103 	bic.w	r1, r1, #3
    4f98:	f851 3b08 	ldr.w	r3, [r1], #8
    4f9c:	fa0c f404 	lsl.w	r4, ip, r4
    4fa0:	ea62 0204 	orn	r2, r2, r4
    4fa4:	ea63 0304 	orn	r3, r3, r4
    4fa8:	e7c9      	b.n	4f3e <strcmp+0x116>
    4faa:	f010 0403 	ands.w	r4, r0, #3
    4fae:	d01a      	beq.n	4fe6 <strcmp+0x1be>
    4fb0:	eba1 0104 	sub.w	r1, r1, r4
    4fb4:	f020 0003 	bic.w	r0, r0, #3
    4fb8:	07e4      	lsls	r4, r4, #31
    4fba:	f850 2b04 	ldr.w	r2, [r0], #4
    4fbe:	d006      	beq.n	4fce <strcmp+0x1a6>
    4fc0:	d20f      	bcs.n	4fe2 <strcmp+0x1ba>
    4fc2:	788b      	ldrb	r3, [r1, #2]
    4fc4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    4fc8:	1ae4      	subs	r4, r4, r3
    4fca:	d106      	bne.n	4fda <strcmp+0x1b2>
    4fcc:	b12b      	cbz	r3, 4fda <strcmp+0x1b2>
    4fce:	78cb      	ldrb	r3, [r1, #3]
    4fd0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    4fd4:	1ae4      	subs	r4, r4, r3
    4fd6:	d100      	bne.n	4fda <strcmp+0x1b2>
    4fd8:	b91b      	cbnz	r3, 4fe2 <strcmp+0x1ba>
    4fda:	4620      	mov	r0, r4
    4fdc:	f85d 4b10 	ldr.w	r4, [sp], #16
    4fe0:	4770      	bx	lr
    4fe2:	f101 0104 	add.w	r1, r1, #4
    4fe6:	f850 2b04 	ldr.w	r2, [r0], #4
    4fea:	07cc      	lsls	r4, r1, #31
    4fec:	f021 0103 	bic.w	r1, r1, #3
    4ff0:	f851 3b04 	ldr.w	r3, [r1], #4
    4ff4:	d848      	bhi.n	5088 <strcmp+0x260>
    4ff6:	d224      	bcs.n	5042 <strcmp+0x21a>
    4ff8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    4ffc:	fa82 f54c 	uadd8	r5, r2, ip
    5000:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    5004:	faa5 f58c 	sel	r5, r5, ip
    5008:	d10a      	bne.n	5020 <strcmp+0x1f8>
    500a:	b965      	cbnz	r5, 5026 <strcmp+0x1fe>
    500c:	f851 3b04 	ldr.w	r3, [r1], #4
    5010:	ea84 0402 	eor.w	r4, r4, r2
    5014:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    5018:	d10e      	bne.n	5038 <strcmp+0x210>
    501a:	f850 2b04 	ldr.w	r2, [r0], #4
    501e:	e7eb      	b.n	4ff8 <strcmp+0x1d0>
    5020:	ea4f 2313 	mov.w	r3, r3, lsr #8
    5024:	e055      	b.n	50d2 <strcmp+0x2aa>
    5026:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    502a:	d14d      	bne.n	50c8 <strcmp+0x2a0>
    502c:	7808      	ldrb	r0, [r1, #0]
    502e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    5032:	f1c0 0000 	rsb	r0, r0, #0
    5036:	4770      	bx	lr
    5038:	ea4f 6212 	mov.w	r2, r2, lsr #24
    503c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    5040:	e047      	b.n	50d2 <strcmp+0x2aa>
    5042:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    5046:	fa82 f54c 	uadd8	r5, r2, ip
    504a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    504e:	faa5 f58c 	sel	r5, r5, ip
    5052:	d10a      	bne.n	506a <strcmp+0x242>
    5054:	b965      	cbnz	r5, 5070 <strcmp+0x248>
    5056:	f851 3b04 	ldr.w	r3, [r1], #4
    505a:	ea84 0402 	eor.w	r4, r4, r2
    505e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    5062:	d10c      	bne.n	507e <strcmp+0x256>
    5064:	f850 2b04 	ldr.w	r2, [r0], #4
    5068:	e7eb      	b.n	5042 <strcmp+0x21a>
    506a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    506e:	e030      	b.n	50d2 <strcmp+0x2aa>
    5070:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    5074:	d128      	bne.n	50c8 <strcmp+0x2a0>
    5076:	880b      	ldrh	r3, [r1, #0]
    5078:	ea4f 4212 	mov.w	r2, r2, lsr #16
    507c:	e029      	b.n	50d2 <strcmp+0x2aa>
    507e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    5082:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    5086:	e024      	b.n	50d2 <strcmp+0x2aa>
    5088:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    508c:	fa82 f54c 	uadd8	r5, r2, ip
    5090:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    5094:	faa5 f58c 	sel	r5, r5, ip
    5098:	d10a      	bne.n	50b0 <strcmp+0x288>
    509a:	b965      	cbnz	r5, 50b6 <strcmp+0x28e>
    509c:	f851 3b04 	ldr.w	r3, [r1], #4
    50a0:	ea84 0402 	eor.w	r4, r4, r2
    50a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    50a8:	d109      	bne.n	50be <strcmp+0x296>
    50aa:	f850 2b04 	ldr.w	r2, [r0], #4
    50ae:	e7eb      	b.n	5088 <strcmp+0x260>
    50b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    50b4:	e00d      	b.n	50d2 <strcmp+0x2aa>
    50b6:	f015 0fff 	tst.w	r5, #255	; 0xff
    50ba:	d105      	bne.n	50c8 <strcmp+0x2a0>
    50bc:	680b      	ldr	r3, [r1, #0]
    50be:	ea4f 2212 	mov.w	r2, r2, lsr #8
    50c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    50c6:	e004      	b.n	50d2 <strcmp+0x2aa>
    50c8:	f04f 0000 	mov.w	r0, #0
    50cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    50d0:	4770      	bx	lr
    50d2:	ba12      	rev	r2, r2
    50d4:	ba1b      	rev	r3, r3
    50d6:	fa82 f44c 	uadd8	r4, r2, ip
    50da:	ea82 0403 	eor.w	r4, r2, r3
    50de:	faa4 f58c 	sel	r5, r4, ip
    50e2:	fab5 f485 	clz	r4, r5
    50e6:	fa02 f204 	lsl.w	r2, r2, r4
    50ea:	fa03 f304 	lsl.w	r3, r3, r4
    50ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
    50f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    50f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    50fa:	4770      	bx	lr
    50fc:	0000      	movs	r0, r0
	...

00005100 <strlen>:
    5100:	f890 f000 	pld	[r0]
    5104:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    5108:	f020 0107 	bic.w	r1, r0, #7
    510c:	f06f 0c00 	mvn.w	ip, #0
    5110:	f010 0407 	ands.w	r4, r0, #7
    5114:	f891 f020 	pld	[r1, #32]
    5118:	f040 8049 	bne.w	51ae <strlen+0xae>
    511c:	f04f 0400 	mov.w	r4, #0
    5120:	f06f 0007 	mvn.w	r0, #7
    5124:	e9d1 2300 	ldrd	r2, r3, [r1]
    5128:	f891 f040 	pld	[r1, #64]	; 0x40
    512c:	f100 0008 	add.w	r0, r0, #8
    5130:	fa82 f24c 	uadd8	r2, r2, ip
    5134:	faa4 f28c 	sel	r2, r4, ip
    5138:	fa83 f34c 	uadd8	r3, r3, ip
    513c:	faa2 f38c 	sel	r3, r2, ip
    5140:	bb4b      	cbnz	r3, 5196 <strlen+0x96>
    5142:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    5146:	fa82 f24c 	uadd8	r2, r2, ip
    514a:	f100 0008 	add.w	r0, r0, #8
    514e:	faa4 f28c 	sel	r2, r4, ip
    5152:	fa83 f34c 	uadd8	r3, r3, ip
    5156:	faa2 f38c 	sel	r3, r2, ip
    515a:	b9e3      	cbnz	r3, 5196 <strlen+0x96>
    515c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    5160:	fa82 f24c 	uadd8	r2, r2, ip
    5164:	f100 0008 	add.w	r0, r0, #8
    5168:	faa4 f28c 	sel	r2, r4, ip
    516c:	fa83 f34c 	uadd8	r3, r3, ip
    5170:	faa2 f38c 	sel	r3, r2, ip
    5174:	b97b      	cbnz	r3, 5196 <strlen+0x96>
    5176:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    517a:	f101 0120 	add.w	r1, r1, #32
    517e:	fa82 f24c 	uadd8	r2, r2, ip
    5182:	f100 0008 	add.w	r0, r0, #8
    5186:	faa4 f28c 	sel	r2, r4, ip
    518a:	fa83 f34c 	uadd8	r3, r3, ip
    518e:	faa2 f38c 	sel	r3, r2, ip
    5192:	2b00      	cmp	r3, #0
    5194:	d0c6      	beq.n	5124 <strlen+0x24>
    5196:	2a00      	cmp	r2, #0
    5198:	bf04      	itt	eq
    519a:	3004      	addeq	r0, #4
    519c:	461a      	moveq	r2, r3
    519e:	ba12      	rev	r2, r2
    51a0:	fab2 f282 	clz	r2, r2
    51a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    51a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    51ac:	4770      	bx	lr
    51ae:	e9d1 2300 	ldrd	r2, r3, [r1]
    51b2:	f004 0503 	and.w	r5, r4, #3
    51b6:	f1c4 0000 	rsb	r0, r4, #0
    51ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    51be:	f014 0f04 	tst.w	r4, #4
    51c2:	f891 f040 	pld	[r1, #64]	; 0x40
    51c6:	fa0c f505 	lsl.w	r5, ip, r5
    51ca:	ea62 0205 	orn	r2, r2, r5
    51ce:	bf1c      	itt	ne
    51d0:	ea63 0305 	ornne	r3, r3, r5
    51d4:	4662      	movne	r2, ip
    51d6:	f04f 0400 	mov.w	r4, #0
    51da:	e7a9      	b.n	5130 <strlen+0x30>

000051dc <__register_exitproc>:
    51dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    51e0:	4d2c      	ldr	r5, [pc, #176]	; (5294 <__register_exitproc+0xb8>)
    51e2:	4606      	mov	r6, r0
    51e4:	6828      	ldr	r0, [r5, #0]
    51e6:	4698      	mov	r8, r3
    51e8:	460f      	mov	r7, r1
    51ea:	4691      	mov	r9, r2
    51ec:	f000 f882 	bl	52f4 <__retarget_lock_acquire_recursive>
    51f0:	4b29      	ldr	r3, [pc, #164]	; (5298 <__register_exitproc+0xbc>)
    51f2:	681c      	ldr	r4, [r3, #0]
    51f4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    51f8:	2b00      	cmp	r3, #0
    51fa:	d03e      	beq.n	527a <__register_exitproc+0x9e>
    51fc:	685a      	ldr	r2, [r3, #4]
    51fe:	2a1f      	cmp	r2, #31
    5200:	dc1c      	bgt.n	523c <__register_exitproc+0x60>
    5202:	f102 0e01 	add.w	lr, r2, #1
    5206:	b176      	cbz	r6, 5226 <__register_exitproc+0x4a>
    5208:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    520c:	2401      	movs	r4, #1
    520e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    5212:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    5216:	4094      	lsls	r4, r2
    5218:	4320      	orrs	r0, r4
    521a:	2e02      	cmp	r6, #2
    521c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    5220:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    5224:	d023      	beq.n	526e <__register_exitproc+0x92>
    5226:	3202      	adds	r2, #2
    5228:	f8c3 e004 	str.w	lr, [r3, #4]
    522c:	6828      	ldr	r0, [r5, #0]
    522e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    5232:	f000 f861 	bl	52f8 <__retarget_lock_release_recursive>
    5236:	2000      	movs	r0, #0
    5238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    523c:	4b17      	ldr	r3, [pc, #92]	; (529c <__register_exitproc+0xc0>)
    523e:	b30b      	cbz	r3, 5284 <__register_exitproc+0xa8>
    5240:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5244:	f3af 8000 	nop.w
    5248:	4603      	mov	r3, r0
    524a:	b1d8      	cbz	r0, 5284 <__register_exitproc+0xa8>
    524c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    5250:	6002      	str	r2, [r0, #0]
    5252:	2100      	movs	r1, #0
    5254:	6041      	str	r1, [r0, #4]
    5256:	460a      	mov	r2, r1
    5258:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    525c:	f04f 0e01 	mov.w	lr, #1
    5260:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    5264:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    5268:	2e00      	cmp	r6, #0
    526a:	d0dc      	beq.n	5226 <__register_exitproc+0x4a>
    526c:	e7cc      	b.n	5208 <__register_exitproc+0x2c>
    526e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    5272:	430c      	orrs	r4, r1
    5274:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    5278:	e7d5      	b.n	5226 <__register_exitproc+0x4a>
    527a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    527e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    5282:	e7bb      	b.n	51fc <__register_exitproc+0x20>
    5284:	6828      	ldr	r0, [r5, #0]
    5286:	f000 f837 	bl	52f8 <__retarget_lock_release_recursive>
    528a:	f04f 30ff 	mov.w	r0, #4294967295
    528e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5292:	bf00      	nop
    5294:	200004f8 	.word	0x200004f8
    5298:	0000565c 	.word	0x0000565c
    529c:	00000000 	.word	0x00000000

000052a0 <register_fini>:
    52a0:	4b02      	ldr	r3, [pc, #8]	; (52ac <register_fini+0xc>)
    52a2:	b113      	cbz	r3, 52aa <register_fini+0xa>
    52a4:	4802      	ldr	r0, [pc, #8]	; (52b0 <register_fini+0x10>)
    52a6:	f000 b805 	b.w	52b4 <atexit>
    52aa:	4770      	bx	lr
    52ac:	00000000 	.word	0x00000000
    52b0:	000052c1 	.word	0x000052c1

000052b4 <atexit>:
    52b4:	2300      	movs	r3, #0
    52b6:	4601      	mov	r1, r0
    52b8:	461a      	mov	r2, r3
    52ba:	4618      	mov	r0, r3
    52bc:	f7ff bf8e 	b.w	51dc <__register_exitproc>

000052c0 <__libc_fini_array>:
    52c0:	b538      	push	{r3, r4, r5, lr}
    52c2:	4c0a      	ldr	r4, [pc, #40]	; (52ec <__libc_fini_array+0x2c>)
    52c4:	4d0a      	ldr	r5, [pc, #40]	; (52f0 <__libc_fini_array+0x30>)
    52c6:	1b64      	subs	r4, r4, r5
    52c8:	10a4      	asrs	r4, r4, #2
    52ca:	d00a      	beq.n	52e2 <__libc_fini_array+0x22>
    52cc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    52d0:	3b01      	subs	r3, #1
    52d2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    52d6:	3c01      	subs	r4, #1
    52d8:	f855 3904 	ldr.w	r3, [r5], #-4
    52dc:	4798      	blx	r3
    52de:	2c00      	cmp	r4, #0
    52e0:	d1f9      	bne.n	52d6 <__libc_fini_array+0x16>
    52e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    52e6:	f000 b9c7 	b.w	5678 <_fini>
    52ea:	bf00      	nop
    52ec:	00005688 	.word	0x00005688
    52f0:	00005684 	.word	0x00005684

000052f4 <__retarget_lock_acquire_recursive>:
    52f4:	4770      	bx	lr
    52f6:	bf00      	nop

000052f8 <__retarget_lock_release_recursive>:
    52f8:	4770      	bx	lr
    52fa:	bf00      	nop
    52fc:	20726f70 	.word	0x20726f70
    5300:	20657571 	.word	0x20657571
    5304:	66206f6e 	.word	0x66206f6e
    5308:	69636e75 	.word	0x69636e75
    530c:	21616e6f 	.word	0x21616e6f
    5310:	00000000 	.word	0x00000000
    5314:	6f6d6544 	.word	0x6f6d6544
    5318:	616f4220 	.word	0x616f4220
    531c:	4e206472 	.word	0x4e206472
    5320:	3a656d61 	.word	0x3a656d61
    5324:	00000020 	.word	0x00000020
    5328:	72500a0d 	.word	0x72500a0d
    532c:	6375646f 	.word	0x6375646f
    5330:	614e2074 	.word	0x614e2074
    5334:	203a656d 	.word	0x203a656d
    5338:	00000000 	.word	0x00000000
    533c:	65440a0d 	.word	0x65440a0d
    5340:	42206f6d 	.word	0x42206f6d
    5344:	6472616f 	.word	0x6472616f
    5348:	74704f20 	.word	0x74704f20
    534c:	3a6e6f69 	.word	0x3a6e6f69
    5350:	00000020 	.word	0x00000020
    5354:	6f6d6544 	.word	0x6f6d6544
    5358:	616f6220 	.word	0x616f6220
    535c:	00206472 	.word	0x00206472
    5360:	6e0a0d20 	.word	0x6e0a0d20
    5364:	6620746f 	.word	0x6620746f
    5368:	646e756f 	.word	0x646e756f
    536c:	660a202c 	.word	0x660a202c
    5370:	646e756f 	.word	0x646e756f
    5374:	000a0d20 	.word	0x000a0d20
    5378:	690a0d20 	.word	0x690a0d20
    537c:	6574736e 	.word	0x6574736e
    5380:	202e6461 	.word	0x202e6461
    5384:	6e6f430a 	.word	0x6e6f430a
    5388:	7463656e 	.word	0x7463656e
    538c:	65687420 	.word	0x65687420
    5390:	726f6320 	.word	0x726f6320
    5394:	74636572 	.word	0x74636572
    5398:	6d656420 	.word	0x6d656420
    539c:	6f62206f 	.word	0x6f62206f
    53a0:	2c647261 	.word	0x2c647261
    53a4:	65687420 	.word	0x65687420
    53a8:	7270206e 	.word	0x7270206e
    53ac:	20737365 	.word	0x20737365
    53b0:	20656874 	.word	0x20656874
    53b4:	65736572 	.word	0x65736572
    53b8:	75622074 	.word	0x75622074
    53bc:	6e6f7474 	.word	0x6e6f7474
    53c0:	0000002e 	.word	0x0000002e
    53c4:	32324344 	.word	0x32324344
    53c8:	00003930 	.word	0x00003930
    53cc:	682f2e2e 	.word	0x682f2e2e
    53d0:	732f6c61 	.word	0x732f6c61
    53d4:	682f6372 	.word	0x682f6372
    53d8:	695f6c61 	.word	0x695f6c61
    53dc:	6d5f6332 	.word	0x6d5f6332
    53e0:	7973615f 	.word	0x7973615f
    53e4:	632e636e 	.word	0x632e636e
    53e8:	00000000 	.word	0x00000000
    53ec:	682f2e2e 	.word	0x682f2e2e
    53f0:	732f6c61 	.word	0x732f6c61
    53f4:	682f6372 	.word	0x682f6372
    53f8:	735f6c61 	.word	0x735f6c61
    53fc:	6d5f6970 	.word	0x6d5f6970
    5400:	6e79735f 	.word	0x6e79735f
    5404:	00632e63 	.word	0x00632e63
    5408:	682f2e2e 	.word	0x682f2e2e
    540c:	732f6c61 	.word	0x732f6c61
    5410:	682f6372 	.word	0x682f6372
    5414:	745f6c61 	.word	0x745f6c61
    5418:	72656d69 	.word	0x72656d69
    541c:	0000632e 	.word	0x0000632e
    5420:	682f2e2e 	.word	0x682f2e2e
    5424:	752f6c61 	.word	0x752f6c61
    5428:	736c6974 	.word	0x736c6974
    542c:	6372732f 	.word	0x6372732f
    5430:	6974752f 	.word	0x6974752f
    5434:	6c5f736c 	.word	0x6c5f736c
    5438:	2e747369 	.word	0x2e747369
    543c:	00000063 	.word	0x00000063

00005440 <_map>:
    5440:	00000000 00000020 682f2e2e 652f6c70     .... ...../hpl/e
    5450:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00005460 <user_mux_confs>:
    5460:	00000100 00000000 00000000 00000000     ................
	...

000054a4 <channel_confs>:
    54a4:	0000060c 00000000 00000000 00000000     ................
	...

000054e4 <interrupt_cfg>:
	...
    5564:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    5574:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    5584:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    5594:	43000800 43000c00                       ...C...C

0000559c <_i2cms>:
    559c:	00000001 00200014 00000100 00003635     ...... .....56..
    55ac:	00d70000 00b71b00 00000005 00200014     .............. .
    55bc:	00000100 00003635 00d70000 00b71b00     ....56..........

000055cc <sercomspi_regs>:
    55cc:	0020000c 00020000 00000000 01ff0077     .. .........w...
    55dc:	20000c00 02000000 00000000 ff007700     ... .........w..
    55ec:	00000401 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    55fc:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

0000560c <_usb_ep_cfgs>:
    560c:	200007ac 00000000 00000040 2000076c     ... ....@...l.. 
    561c:	00000000 00000040 2000072c 00000000     ....@...,.. ....
    562c:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    563c:	73752f65 2e636462 00000063 682f2e2e     e/usbdc.c...../h
    564c:	732f6c61 682f6372 695f6c61 00632e6f     al/src/hal_io.c.

0000565c <_global_impure_ptr>:
    565c:	200000d0                                ... 

00005660 <_init>:
    5660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5662:	bf00      	nop
    5664:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5666:	bc08      	pop	{r3}
    5668:	469e      	mov	lr, r3
    566a:	4770      	bx	lr

0000566c <__init_array_start>:
    566c:	000052a1 	.word	0x000052a1

00005670 <__frame_dummy_init_array_entry>:
    5670:	00000289 000006f1                       ........

00005678 <_fini>:
    5678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    567a:	bf00      	nop
    567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    567e:	bc08      	pop	{r3}
    5680:	469e      	mov	lr, r3
    5682:	4770      	bx	lr

00005684 <__fini_array_start>:
    5684:	00000265 	.word	0x00000265
