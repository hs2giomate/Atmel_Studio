
Internal_Temperature_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ca4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000494  20000000  00003ca4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020494  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020494  2**0
                  CONTENTS
  4 .bss          000003c0  20000494  00004138  00020494  2**2
                  ALLOC
  5 .stack        00010004  20000854  000044f8  00020494  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020494  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000204c2  2**0
                  CONTENTS, READONLY
  8 .debug_info   00030d53  00000000  00000000  0002051b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004562  00000000  00000000  0005126e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000142dc  00000000  00000000  000557d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000fc8  00000000  00000000  00069aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001780  00000000  00000000  0006aa74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039d2c  00000000  00000000  0006c1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00018f8a  00000000  00000000  000a5f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00125bf8  00000000  00000000  000beeaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002b78  00000000  00000000  001e4aa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 08 01 20 89 05 00 00 0d 06 00 00 0d 06 00 00     X.. ............
      10:	0d 06 00 00 0d 06 00 00 0d 06 00 00 00 00 00 00     ................
	...
      2c:	0d 06 00 00 0d 06 00 00 00 00 00 00 0d 06 00 00     ................
      3c:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      4c:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      5c:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      6c:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      7c:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      8c:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      9c:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      ac:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      bc:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      cc:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      dc:	0d 06 00 00 0d 06 00 00 0d 06 00 00 00 00 00 00     ................
	...
      f4:	0d 06 00 00 cd 16 00 00 e1 16 00 00 f5 16 00 00     ................
     104:	09 17 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     114:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     124:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     134:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     144:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     154:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     164:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     174:	0d 06 00 00 0d 06 00 00 0d 06 00 00 89 2c 00 00     .............,..
     184:	95 2c 00 00 a1 2c 00 00 ad 2c 00 00 0d 06 00 00     .,...,...,......
     194:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     1a4:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     1b4:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     1c4:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     1d4:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     1e4:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     1f4:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     204:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     214:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     224:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     234:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     244:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     254:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000494 	.word	0x20000494
     280:	00000000 	.word	0x00000000
     284:	00003ca4 	.word	0x00003ca4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00003ca4 	.word	0x00003ca4
     2c4:	20000498 	.word	0x20000498
     2c8:	00003ca4 	.word	0x00003ca4
     2cc:	00000000 	.word	0x00000000

000002d0 <hri_supc_set_VREF_TSEN_bit>:
{
	return ((Supc *)hw)->VREG.reg;
}

static inline void hri_supc_set_VREF_TSEN_bit(const void *const hw)
{
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
	SUPC_CRITICAL_SECTION_ENTER();
	((Supc *)hw)->VREF.reg |= SUPC_VREF_TSEN;
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	69db      	ldr	r3, [r3, #28]
     2dc:	f043 0202 	orr.w	r2, r3, #2
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	61da      	str	r2, [r3, #28]
	SUPC_CRITICAL_SECTION_LEAVE();
}
     2e4:	bf00      	nop
     2e6:	370c      	adds	r7, #12
     2e8:	46bd      	mov	sp, r7
     2ea:	bc80      	pop	{r7}
     2ec:	4770      	bx	lr

000002ee <hri_supc_clear_VREF_VREFOE_bit>:
	((Supc *)hw)->VREF.reg = tmp;
	SUPC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_supc_clear_VREF_VREFOE_bit(const void *const hw)
{
     2ee:	b480      	push	{r7}
     2f0:	b083      	sub	sp, #12
     2f2:	af00      	add	r7, sp, #0
     2f4:	6078      	str	r0, [r7, #4]
	SUPC_CRITICAL_SECTION_ENTER();
	((Supc *)hw)->VREF.reg &= ~SUPC_VREF_VREFOE;
     2f6:	687b      	ldr	r3, [r7, #4]
     2f8:	69db      	ldr	r3, [r3, #28]
     2fa:	f023 0204 	bic.w	r2, r3, #4
     2fe:	687b      	ldr	r3, [r7, #4]
     300:	61da      	str	r2, [r3, #28]
	SUPC_CRITICAL_SECTION_LEAVE();
}
     302:	bf00      	nop
     304:	370c      	adds	r7, #12
     306:	46bd      	mov	sp, r7
     308:	bc80      	pop	{r7}
     30a:	4770      	bx	lr

0000030c <hri_supc_set_VREF_ONDEMAND_bit>:
	((Supc *)hw)->VREF.reg ^= SUPC_VREF_RUNSTDBY;
	SUPC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_supc_set_VREF_ONDEMAND_bit(const void *const hw)
{
     30c:	b480      	push	{r7}
     30e:	b083      	sub	sp, #12
     310:	af00      	add	r7, sp, #0
     312:	6078      	str	r0, [r7, #4]
	SUPC_CRITICAL_SECTION_ENTER();
	((Supc *)hw)->VREF.reg |= SUPC_VREF_ONDEMAND;
     314:	687b      	ldr	r3, [r7, #4]
     316:	69db      	ldr	r3, [r3, #28]
     318:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	61da      	str	r2, [r3, #28]
	SUPC_CRITICAL_SECTION_LEAVE();
}
     320:	bf00      	nop
     322:	370c      	adds	r7, #12
     324:	46bd      	mov	sp, r7
     326:	bc80      	pop	{r7}
     328:	4770      	bx	lr

0000032a <_ZN21CPU_Temperature_ClassC1Ev>:

#include "CPU_Temperature_Class.h"


// default constructor
CPU_Temperature_Class::CPU_Temperature_Class()
     32a:	b480      	push	{r7}
     32c:	b083      	sub	sp, #12
     32e:	af00      	add	r7, sp, #0
     330:	6078      	str	r0, [r7, #4]
{
} //CPU_Temperature_Class
     332:	687b      	ldr	r3, [r7, #4]
     334:	4618      	mov	r0, r3
     336:	370c      	adds	r7, #12
     338:	46bd      	mov	sp, r7
     33a:	bc80      	pop	{r7}
     33c:	4770      	bx	lr
	...

00000340 <_ZN21CPU_Temperature_Class4InitEv>:

// default destructor
CPU_Temperature_Class::~CPU_Temperature_Class()
{
} //~CPU_Temperature_Class
void CPU_Temperature_Class::Init(void){
     340:	b580      	push	{r7, lr}
     342:	b082      	sub	sp, #8
     344:	af00      	add	r7, sp, #0
     346:	6078      	str	r0, [r7, #4]
	//pClass=this;
	ADC_Init();
     348:	6878      	ldr	r0, [r7, #4]
     34a:	4b03      	ldr	r3, [pc, #12]	; (358 <_ZN21CPU_Temperature_Class4InitEv+0x18>)
     34c:	4798      	blx	r3
}
     34e:	bf00      	nop
     350:	3708      	adds	r7, #8
     352:	46bd      	mov	sp, r7
     354:	bd80      	pop	{r7, pc}
     356:	bf00      	nop
     358:	0000035d 	.word	0x0000035d

0000035c <_ZN21CPU_Temperature_Class8ADC_InitEv>:


void CPU_Temperature_Class::ADC_Init(void){
     35c:	b580      	push	{r7, lr}
     35e:	b084      	sub	sp, #16
     360:	af00      	add	r7, sp, #0
     362:	6078      	str	r0, [r7, #4]
	
	int8_t temp_cal_tli, temp_cal_thi, temp_cal_tld, temp_cal_thd;

	temp_cal_vpl = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_VPL_POS / 32)) >> (NVM_TEMP_CAL_VPL_POS % 32))
     364:	4b2e      	ldr	r3, [pc, #184]	; (420 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xc4>)
     366:	681b      	ldr	r3, [r3, #0]
     368:	0a1b      	lsrs	r3, r3, #8
	& ((1 << NVM_TEMP_CAL_VPL_SIZE) - 1);
     36a:	b21b      	sxth	r3, r3
     36c:	f3c3 030b 	ubfx	r3, r3, #0, #12
     370:	b21a      	sxth	r2, r3
	temp_cal_vpl = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_VPL_POS / 32)) >> (NVM_TEMP_CAL_VPL_POS % 32))
     372:	687b      	ldr	r3, [r7, #4]
     374:	809a      	strh	r2, [r3, #4]
	temp_cal_vph = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_VPH_POS / 32)) >> (NVM_TEMP_CAL_VPH_POS % 32))
     376:	4b2a      	ldr	r3, [pc, #168]	; (420 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xc4>)
     378:	681b      	ldr	r3, [r3, #0]
     37a:	0d1b      	lsrs	r3, r3, #20
	& ((1 << NVM_TEMP_CAL_VPH_SIZE) - 1);
     37c:	b21a      	sxth	r2, r3
	temp_cal_vph = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_VPH_POS / 32)) >> (NVM_TEMP_CAL_VPH_POS % 32))
     37e:	687b      	ldr	r3, [r7, #4]
     380:	80da      	strh	r2, [r3, #6]
	temp_cal_vcl = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_VCL_POS / 32)) >> (NVM_TEMP_CAL_VCL_POS % 32))
     382:	4b28      	ldr	r3, [pc, #160]	; (424 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xc8>)
     384:	681b      	ldr	r3, [r3, #0]
	& ((1 << NVM_TEMP_CAL_VCL_SIZE) - 1);
     386:	b21b      	sxth	r3, r3
     388:	f3c3 030b 	ubfx	r3, r3, #0, #12
     38c:	b21a      	sxth	r2, r3
	temp_cal_vcl = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_VCL_POS / 32)) >> (NVM_TEMP_CAL_VCL_POS % 32))
     38e:	687b      	ldr	r3, [r7, #4]
     390:	811a      	strh	r2, [r3, #8]
	temp_cal_vch = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_VCH_POS / 32)) >> (NVM_TEMP_CAL_VCH_POS % 32))
     392:	4b24      	ldr	r3, [pc, #144]	; (424 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xc8>)
     394:	681b      	ldr	r3, [r3, #0]
     396:	0b1b      	lsrs	r3, r3, #12
	& ((1 << NVM_TEMP_CAL_VCH_SIZE) - 1);
     398:	b21b      	sxth	r3, r3
     39a:	f3c3 030b 	ubfx	r3, r3, #0, #12
     39e:	b21a      	sxth	r2, r3
	temp_cal_vch = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_VCH_POS / 32)) >> (NVM_TEMP_CAL_VCH_POS % 32))
     3a0:	687b      	ldr	r3, [r7, #4]
     3a2:	815a      	strh	r2, [r3, #10]

	temp_cal_tli = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_TLI_POS / 32)) >> (NVM_TEMP_CAL_TLI_POS % 32))
     3a4:	4b20      	ldr	r3, [pc, #128]	; (428 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xcc>)
     3a6:	681b      	ldr	r3, [r3, #0]
     3a8:	73fb      	strb	r3, [r7, #15]
	& ((1 << NVM_TEMP_CAL_TLI_SIZE) - 1);
	temp_cal_tld = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_TLD_POS / 32)) >> (NVM_TEMP_CAL_TLD_POS % 32))
     3aa:	4b1f      	ldr	r3, [pc, #124]	; (428 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xcc>)
     3ac:	681b      	ldr	r3, [r3, #0]
     3ae:	0a1b      	lsrs	r3, r3, #8
	& ((1 << NVM_TEMP_CAL_TLD_SIZE) - 1);
     3b0:	b25b      	sxtb	r3, r3
	temp_cal_tld = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_TLD_POS / 32)) >> (NVM_TEMP_CAL_TLD_POS % 32))
     3b2:	f003 030f 	and.w	r3, r3, #15
     3b6:	73bb      	strb	r3, [r7, #14]

	temp_cal_tl = ((uint16_t)temp_cal_tli) << 4 | ((uint16_t)temp_cal_tld);
     3b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
     3bc:	b29b      	uxth	r3, r3
     3be:	011b      	lsls	r3, r3, #4
     3c0:	b21a      	sxth	r2, r3
     3c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
     3c6:	b21b      	sxth	r3, r3
     3c8:	4313      	orrs	r3, r2
     3ca:	b21a      	sxth	r2, r3
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	801a      	strh	r2, [r3, #0]

	temp_cal_thi = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_THI_POS / 32)) >> (NVM_TEMP_CAL_THI_POS % 32))
     3d0:	4b15      	ldr	r3, [pc, #84]	; (428 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xcc>)
     3d2:	681b      	ldr	r3, [r3, #0]
     3d4:	0b1b      	lsrs	r3, r3, #12
     3d6:	737b      	strb	r3, [r7, #13]
	& ((1 << NVM_TEMP_CAL_THI_SIZE) - 1);
	temp_cal_thd = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_THD_POS / 32)) >> (NVM_TEMP_CAL_THD_POS % 32))
     3d8:	4b13      	ldr	r3, [pc, #76]	; (428 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xcc>)
     3da:	681b      	ldr	r3, [r3, #0]
     3dc:	0d1b      	lsrs	r3, r3, #20
	& ((1 << NVM_TEMP_CAL_THD_SIZE) - 1);
     3de:	b25b      	sxtb	r3, r3
	temp_cal_thd = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_THD_POS / 32)) >> (NVM_TEMP_CAL_THD_POS % 32))
     3e0:	f003 030f 	and.w	r3, r3, #15
     3e4:	733b      	strb	r3, [r7, #12]

	temp_cal_th = ((uint16_t)temp_cal_thi) << 4 | ((uint16_t)temp_cal_thd);
     3e6:	f997 300d 	ldrsb.w	r3, [r7, #13]
     3ea:	b29b      	uxth	r3, r3
     3ec:	011b      	lsls	r3, r3, #4
     3ee:	b21a      	sxth	r2, r3
     3f0:	f997 300c 	ldrsb.w	r3, [r7, #12]
     3f4:	b21b      	sxth	r3, r3
     3f6:	4313      	orrs	r3, r2
     3f8:	b21a      	sxth	r2, r3
     3fa:	687b      	ldr	r3, [r7, #4]
     3fc:	805a      	strh	r2, [r3, #2]

	hri_supc_set_VREF_ONDEMAND_bit(SUPC);
     3fe:	480b      	ldr	r0, [pc, #44]	; (42c <_ZN21CPU_Temperature_Class8ADC_InitEv+0xd0>)
     400:	4b0b      	ldr	r3, [pc, #44]	; (430 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xd4>)
     402:	4798      	blx	r3
	hri_supc_set_VREF_TSEN_bit(SUPC);
     404:	4809      	ldr	r0, [pc, #36]	; (42c <_ZN21CPU_Temperature_Class8ADC_InitEv+0xd0>)
     406:	4b0b      	ldr	r3, [pc, #44]	; (434 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xd8>)
     408:	4798      	blx	r3
	hri_supc_clear_VREF_VREFOE_bit(SUPC);
     40a:	4808      	ldr	r0, [pc, #32]	; (42c <_ZN21CPU_Temperature_Class8ADC_InitEv+0xd0>)
     40c:	4b0a      	ldr	r3, [pc, #40]	; (438 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xdc>)
     40e:	4798      	blx	r3
	adc_sync_enable_channel(&ADC_0, CONF_ADC_CHANNEL);
     410:	2100      	movs	r1, #0
     412:	480a      	ldr	r0, [pc, #40]	; (43c <_ZN21CPU_Temperature_Class8ADC_InitEv+0xe0>)
     414:	4b0a      	ldr	r3, [pc, #40]	; (440 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xe4>)
     416:	4798      	blx	r3
}
     418:	bf00      	nop
     41a:	3710      	adds	r7, #16
     41c:	46bd      	mov	sp, r7
     41e:	bd80      	pop	{r7, pc}
     420:	00800104 	.word	0x00800104
     424:	00800108 	.word	0x00800108
     428:	00800100 	.word	0x00800100
     42c:	40001800 	.word	0x40001800
     430:	0000030d 	.word	0x0000030d
     434:	000002d1 	.word	0x000002d1
     438:	000002ef 	.word	0x000002ef
     43c:	200007e4 	.word	0x200007e4
     440:	0000090d 	.word	0x0000090d

00000444 <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv>:

int32_t CPU_Temperature_Class::GetTemperatureCPU(void){
     444:	b590      	push	{r4, r7, lr}
     446:	b085      	sub	sp, #20
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];
	adc_sync_set_inputs(&ADC_0, ADC_INPUTCTRL_MUXPOS_CTAT_Val, ADC_INPUTCTRL_MUXNEG_GND_Val, CONF_ADC_CHANNEL);
     44c:	2300      	movs	r3, #0
     44e:	2218      	movs	r2, #24
     450:	211d      	movs	r1, #29
     452:	484a      	ldr	r0, [pc, #296]	; (57c <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv+0x138>)
     454:	4c4a      	ldr	r4, [pc, #296]	; (580 <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv+0x13c>)
     456:	47a0      	blx	r4
	adc_sync_read_channel(&ADC_0, CONF_ADC_CHANNEL, buffer, 2);
     458:	f107 020c 	add.w	r2, r7, #12
     45c:	2302      	movs	r3, #2
     45e:	2100      	movs	r1, #0
     460:	4846      	ldr	r0, [pc, #280]	; (57c <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv+0x138>)
     462:	4c48      	ldr	r4, [pc, #288]	; (584 <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv+0x140>)
     464:	47a0      	blx	r4
	tc_result = ((uint16_t)buffer[1]) << 8 | ((uint16_t)buffer[0]);
     466:	7b7b      	ldrb	r3, [r7, #13]
     468:	021b      	lsls	r3, r3, #8
     46a:	b21a      	sxth	r2, r3
     46c:	7b3b      	ldrb	r3, [r7, #12]
     46e:	b21b      	sxth	r3, r3
     470:	4313      	orrs	r3, r2
     472:	b21a      	sxth	r2, r3
     474:	687b      	ldr	r3, [r7, #4]
     476:	81da      	strh	r2, [r3, #14]

	adc_sync_set_inputs(&ADC_0, ADC_INPUTCTRL_MUXPOS_PTAT_Val, ADC_INPUTCTRL_MUXNEG_GND_Val, CONF_ADC_CHANNEL);
     478:	2300      	movs	r3, #0
     47a:	2218      	movs	r2, #24
     47c:	211c      	movs	r1, #28
     47e:	483f      	ldr	r0, [pc, #252]	; (57c <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv+0x138>)
     480:	4c3f      	ldr	r4, [pc, #252]	; (580 <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv+0x13c>)
     482:	47a0      	blx	r4
	adc_sync_read_channel(&ADC_0, CONF_ADC_CHANNEL, buffer, 2);
     484:	f107 020c 	add.w	r2, r7, #12
     488:	2302      	movs	r3, #2
     48a:	2100      	movs	r1, #0
     48c:	483b      	ldr	r0, [pc, #236]	; (57c <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv+0x138>)
     48e:	4c3d      	ldr	r4, [pc, #244]	; (584 <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv+0x140>)
     490:	47a0      	blx	r4
	tp_result = ((uint16_t)buffer[1]) << 8 | ((uint16_t)buffer[0]);
     492:	7b7b      	ldrb	r3, [r7, #13]
     494:	021b      	lsls	r3, r3, #8
     496:	b21a      	sxth	r2, r3
     498:	7b3b      	ldrb	r3, [r7, #12]
     49a:	b21b      	sxth	r3, r3
     49c:	4313      	orrs	r3, r2
     49e:	b21a      	sxth	r2, r3
     4a0:	687b      	ldr	r3, [r7, #4]
     4a2:	819a      	strh	r2, [r3, #12]

	result = (int64_t)(temp_cal_tl * temp_cal_vph * tc_result - (int64_t)temp_cal_vpl * temp_cal_th * tc_result
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	f9b3 3000 	ldrsh.w	r3, [r3]
     4aa:	461a      	mov	r2, r3
     4ac:	687b      	ldr	r3, [r7, #4]
     4ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
     4b2:	fb03 f302 	mul.w	r3, r3, r2
     4b6:	687a      	ldr	r2, [r7, #4]
     4b8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
     4bc:	fb02 f303 	mul.w	r3, r2, r3
     4c0:	4619      	mov	r1, r3
     4c2:	687b      	ldr	r3, [r7, #4]
     4c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
     4c8:	461a      	mov	r2, r3
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
     4d0:	fb03 f302 	mul.w	r3, r3, r2
     4d4:	687a      	ldr	r2, [r7, #4]
     4d6:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
     4da:	fb02 f303 	mul.w	r3, r2, r3
     4de:	1aca      	subs	r2, r1, r3
	- (int64_t)temp_cal_tl * temp_cal_vch * tp_result
	+ (int64_t)temp_cal_th * temp_cal_vcl * tp_result);
     4e0:	687b      	ldr	r3, [r7, #4]
     4e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
     4e6:	4619      	mov	r1, r3
     4e8:	687b      	ldr	r3, [r7, #4]
     4ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
     4ee:	fb03 f101 	mul.w	r1, r3, r1
	- (int64_t)temp_cal_tl * temp_cal_vch * tp_result
     4f2:	687b      	ldr	r3, [r7, #4]
     4f4:	f9b3 3000 	ldrsh.w	r3, [r3]
	+ (int64_t)temp_cal_th * temp_cal_vcl * tp_result);
     4f8:	4618      	mov	r0, r3
	- (int64_t)temp_cal_tl * temp_cal_vch * tp_result
     4fa:	687b      	ldr	r3, [r7, #4]
     4fc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
	+ (int64_t)temp_cal_th * temp_cal_vcl * tp_result);
     500:	fb03 f300 	mul.w	r3, r3, r0
     504:	1acb      	subs	r3, r1, r3
     506:	6879      	ldr	r1, [r7, #4]
     508:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
     50c:	fb01 f303 	mul.w	r3, r1, r3
     510:	4413      	add	r3, r2
     512:	461a      	mov	r2, r3
	result = (int64_t)(temp_cal_tl * temp_cal_vph * tc_result - (int64_t)temp_cal_vpl * temp_cal_th * tc_result
     514:	687b      	ldr	r3, [r7, #4]
     516:	611a      	str	r2, [r3, #16]
	result /= ((int32_t)temp_cal_vcl * tp_result - (int32_t)temp_cal_vch * tp_result
	- (int32_t)temp_cal_vpl * tc_result + (int32_t)temp_cal_vph * tc_result);
     518:	687b      	ldr	r3, [r7, #4]
     51a:	691a      	ldr	r2, [r3, #16]
	result /= ((int32_t)temp_cal_vcl * tp_result - (int32_t)temp_cal_vch * tp_result
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
     522:	4619      	mov	r1, r3
     524:	687b      	ldr	r3, [r7, #4]
     526:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
     52a:	1acb      	subs	r3, r1, r3
     52c:	6879      	ldr	r1, [r7, #4]
     52e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
     532:	fb01 f103 	mul.w	r1, r1, r3
	- (int32_t)temp_cal_vpl * tc_result + (int32_t)temp_cal_vph * tc_result);
     536:	687b      	ldr	r3, [r7, #4]
     538:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
     53c:	4618      	mov	r0, r3
     53e:	687b      	ldr	r3, [r7, #4]
     540:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
     544:	fb03 f300 	mul.w	r3, r3, r0
     548:	1ac9      	subs	r1, r1, r3
     54a:	687b      	ldr	r3, [r7, #4]
     54c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
     550:	4618      	mov	r0, r3
     552:	687b      	ldr	r3, [r7, #4]
     554:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
     558:	fb03 f300 	mul.w	r3, r3, r0
     55c:	440b      	add	r3, r1
     55e:	fb92 f2f3 	sdiv	r2, r2, r3
	result /= ((int32_t)temp_cal_vcl * tp_result - (int32_t)temp_cal_vch * tp_result
     562:	687b      	ldr	r3, [r7, #4]
     564:	611a      	str	r2, [r3, #16]
	result >>= 4;
     566:	687b      	ldr	r3, [r7, #4]
     568:	691b      	ldr	r3, [r3, #16]
     56a:	111a      	asrs	r2, r3, #4
     56c:	687b      	ldr	r3, [r7, #4]
     56e:	611a      	str	r2, [r3, #16]
	return result;
     570:	687b      	ldr	r3, [r7, #4]
     572:	691b      	ldr	r3, [r3, #16]
}
     574:	4618      	mov	r0, r3
     576:	3714      	adds	r7, #20
     578:	46bd      	mov	sp, r7
     57a:	bd90      	pop	{r4, r7, pc}
     57c:	200007e4 	.word	0x200007e4
     580:	000009d9 	.word	0x000009d9
     584:	00000939 	.word	0x00000939

00000588 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     588:	b580      	push	{r7, lr}
     58a:	b082      	sub	sp, #8
     58c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     58e:	4b16      	ldr	r3, [pc, #88]	; (5e8 <Reset_Handler+0x60>)
     590:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     592:	4b16      	ldr	r3, [pc, #88]	; (5ec <Reset_Handler+0x64>)
     594:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     596:	687a      	ldr	r2, [r7, #4]
     598:	683b      	ldr	r3, [r7, #0]
     59a:	429a      	cmp	r2, r3
     59c:	d00c      	beq.n	5b8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     59e:	e007      	b.n	5b0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     5a0:	683b      	ldr	r3, [r7, #0]
     5a2:	1d1a      	adds	r2, r3, #4
     5a4:	603a      	str	r2, [r7, #0]
     5a6:	687a      	ldr	r2, [r7, #4]
     5a8:	1d11      	adds	r1, r2, #4
     5aa:	6079      	str	r1, [r7, #4]
     5ac:	6812      	ldr	r2, [r2, #0]
     5ae:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     5b0:	683b      	ldr	r3, [r7, #0]
     5b2:	4a0f      	ldr	r2, [pc, #60]	; (5f0 <Reset_Handler+0x68>)
     5b4:	4293      	cmp	r3, r2
     5b6:	d3f3      	bcc.n	5a0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     5b8:	4b0e      	ldr	r3, [pc, #56]	; (5f4 <Reset_Handler+0x6c>)
     5ba:	603b      	str	r3, [r7, #0]
     5bc:	e004      	b.n	5c8 <Reset_Handler+0x40>
                *pDest++ = 0;
     5be:	683b      	ldr	r3, [r7, #0]
     5c0:	1d1a      	adds	r2, r3, #4
     5c2:	603a      	str	r2, [r7, #0]
     5c4:	2200      	movs	r2, #0
     5c6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     5c8:	683b      	ldr	r3, [r7, #0]
     5ca:	4a0b      	ldr	r2, [pc, #44]	; (5f8 <Reset_Handler+0x70>)
     5cc:	4293      	cmp	r3, r2
     5ce:	d3f6      	bcc.n	5be <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     5d0:	4b0a      	ldr	r3, [pc, #40]	; (5fc <Reset_Handler+0x74>)
     5d2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     5d4:	4a0a      	ldr	r2, [pc, #40]	; (600 <Reset_Handler+0x78>)
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     5dc:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     5de:	4b09      	ldr	r3, [pc, #36]	; (604 <Reset_Handler+0x7c>)
     5e0:	4798      	blx	r3

        /* Branch to main function */
        main();
     5e2:	4b09      	ldr	r3, [pc, #36]	; (608 <Reset_Handler+0x80>)
     5e4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     5e6:	e7fe      	b.n	5e6 <Reset_Handler+0x5e>
     5e8:	00003ca4 	.word	0x00003ca4
     5ec:	20000000 	.word	0x20000000
     5f0:	20000494 	.word	0x20000494
     5f4:	20000494 	.word	0x20000494
     5f8:	20000854 	.word	0x20000854
     5fc:	00000000 	.word	0x00000000
     600:	e000ed00 	.word	0xe000ed00
     604:	00003821 	.word	0x00003821
     608:	00000615 	.word	0x00000615

0000060c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     60c:	b480      	push	{r7}
     60e:	af00      	add	r7, sp, #0
        while (1) {
     610:	e7fe      	b.n	610 <Dummy_Handler+0x4>
	...

00000614 <main>:


#include "CPU_Temperature_Class.h"

int main(void)
{
     614:	b580      	push	{r7, lr}
     616:	b086      	sub	sp, #24
     618:	af00      	add	r7, sp, #0
		atmel_start_init();
     61a:	4b0a      	ldr	r3, [pc, #40]	; (644 <main+0x30>)
     61c:	4798      	blx	r3
		CPU_Temperature_Class tCPU;
     61e:	463b      	mov	r3, r7
     620:	4618      	mov	r0, r3
     622:	4b09      	ldr	r3, [pc, #36]	; (648 <main+0x34>)
     624:	4798      	blx	r3
		tCPU.Init();
     626:	463b      	mov	r3, r7
     628:	4618      	mov	r0, r3
     62a:	4b08      	ldr	r3, [pc, #32]	; (64c <main+0x38>)
     62c:	4798      	blx	r3
		int32_t t;
    /* Replace with your application code */
    while (1) 
    {
		t=tCPU.GetTemperatureCPU();
     62e:	463b      	mov	r3, r7
     630:	4618      	mov	r0, r3
     632:	4b07      	ldr	r3, [pc, #28]	; (650 <main+0x3c>)
     634:	4798      	blx	r3
     636:	6178      	str	r0, [r7, #20]
		delay_ms(1000);
     638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     63c:	4b05      	ldr	r3, [pc, #20]	; (654 <main+0x40>)
     63e:	4798      	blx	r3
		t=tCPU.GetTemperatureCPU();
     640:	e7f5      	b.n	62e <main+0x1a>
     642:	bf00      	nop
     644:	00000659 	.word	0x00000659
     648:	0000032b 	.word	0x0000032b
     64c:	00000341 	.word	0x00000341
     650:	00000445 	.word	0x00000445
     654:	00000a21 	.word	0x00000a21

00000658 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     658:	b508      	push	{r3, lr}
	system_init();
     65a:	4b02      	ldr	r3, [pc, #8]	; (664 <atmel_start_init+0xc>)
     65c:	4798      	blx	r3
	usb_init();
     65e:	4b02      	ldr	r3, [pc, #8]	; (668 <atmel_start_init+0x10>)
     660:	4798      	blx	r3
     662:	bd08      	pop	{r3, pc}
     664:	00000881 	.word	0x00000881
     668:	00002ce9 	.word	0x00002ce9

0000066c <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     66c:	4a04      	ldr	r2, [pc, #16]	; (680 <ADC_0_CLOCK_init+0x14>)
     66e:	6a13      	ldr	r3, [r2, #32]
     670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     674:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     676:	2240      	movs	r2, #64	; 0x40
     678:	4b02      	ldr	r3, [pc, #8]	; (684 <ADC_0_CLOCK_init+0x18>)
     67a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     67e:	4770      	bx	lr
     680:	40000800 	.word	0x40000800
     684:	40001c00 	.word	0x40001c00

00000688 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     688:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     68a:	4b04      	ldr	r3, [pc, #16]	; (69c <ADC_0_init+0x14>)
     68c:	4798      	blx	r3
	ADC_0_PORT_init();
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     68e:	2200      	movs	r2, #0
     690:	4903      	ldr	r1, [pc, #12]	; (6a0 <ADC_0_init+0x18>)
     692:	4804      	ldr	r0, [pc, #16]	; (6a4 <ADC_0_init+0x1c>)
     694:	4b04      	ldr	r3, [pc, #16]	; (6a8 <ADC_0_init+0x20>)
     696:	4798      	blx	r3
     698:	bd08      	pop	{r3, pc}
     69a:	bf00      	nop
     69c:	0000066d 	.word	0x0000066d
     6a0:	43001c00 	.word	0x43001c00
     6a4:	200007e4 	.word	0x200007e4
     6a8:	000008dd 	.word	0x000008dd

000006ac <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6ac:	4b28      	ldr	r3, [pc, #160]	; (750 <SPI_0_PORT_init+0xa4>)
     6ae:	2210      	movs	r2, #16
     6b0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6b2:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6b4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     6b8:	629a      	str	r2, [r3, #40]	; 0x28
     6ba:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     6be:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6c0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     6c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6c8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6d0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6d8:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6dc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6e0:	2220      	movs	r2, #32
     6e2:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6e4:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6e6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     6ea:	629a      	str	r2, [r3, #40]	; 0x28
     6ec:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6ee:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     6f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6fe:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     702:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     706:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     70a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     70e:	2240      	movs	r2, #64	; 0x40
     710:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     712:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     716:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     71a:	629a      	str	r2, [r3, #40]	; 0x28
     71c:	4a0d      	ldr	r2, [pc, #52]	; (754 <SPI_0_PORT_init+0xa8>)
     71e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     720:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     724:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     72c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     734:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     73c:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     740:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     744:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     748:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     74c:	4770      	bx	lr
     74e:	bf00      	nop
     750:	41008000 	.word	0x41008000
     754:	c0020000 	.word	0xc0020000

00000758 <SPI_0_CLOCK_init>:
     758:	4b06      	ldr	r3, [pc, #24]	; (774 <SPI_0_CLOCK_init+0x1c>)
     75a:	2240      	movs	r2, #64	; 0x40
     75c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     760:	2243      	movs	r2, #67	; 0x43
     762:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     766:	4a04      	ldr	r2, [pc, #16]	; (778 <SPI_0_CLOCK_init+0x20>)
     768:	6953      	ldr	r3, [r2, #20]
     76a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     76e:	6153      	str	r3, [r2, #20]
     770:	4770      	bx	lr
     772:	bf00      	nop
     774:	40001c00 	.word	0x40001c00
     778:	40000800 	.word	0x40000800

0000077c <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     77c:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     77e:	4b04      	ldr	r3, [pc, #16]	; (790 <SPI_0_init+0x14>)
     780:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
     782:	4904      	ldr	r1, [pc, #16]	; (794 <SPI_0_init+0x18>)
     784:	4804      	ldr	r0, [pc, #16]	; (798 <SPI_0_init+0x1c>)
     786:	4b05      	ldr	r3, [pc, #20]	; (79c <SPI_0_init+0x20>)
     788:	4798      	blx	r3
	SPI_0_PORT_init();
     78a:	4b05      	ldr	r3, [pc, #20]	; (7a0 <SPI_0_init+0x24>)
     78c:	4798      	blx	r3
     78e:	bd08      	pop	{r3, pc}
     790:	00000759 	.word	0x00000759
     794:	40003000 	.word	0x40003000
     798:	200007e8 	.word	0x200007e8
     79c:	00000c01 	.word	0x00000c01
     7a0:	000006ad 	.word	0x000006ad

000007a4 <delay_driver_init>:
}

void delay_driver_init(void)
{
     7a4:	b508      	push	{r3, lr}
	delay_init(SysTick);
     7a6:	4802      	ldr	r0, [pc, #8]	; (7b0 <delay_driver_init+0xc>)
     7a8:	4b02      	ldr	r3, [pc, #8]	; (7b4 <delay_driver_init+0x10>)
     7aa:	4798      	blx	r3
     7ac:	bd08      	pop	{r3, pc}
     7ae:	bf00      	nop
     7b0:	e000e010 	.word	0xe000e010
     7b4:	00000a0d 	.word	0x00000a0d

000007b8 <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7b8:	4b1e      	ldr	r3, [pc, #120]	; (834 <USB_0_PORT_init+0x7c>)
     7ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     7be:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     7c4:	6299      	str	r1, [r3, #40]	; 0x28
     7c6:	481c      	ldr	r0, [pc, #112]	; (838 <USB_0_PORT_init+0x80>)
     7c8:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7ca:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7cc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     7d0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7d8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     7dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7e8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7ec:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7f0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     7fc:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7fe:	6299      	str	r1, [r3, #40]	; 0x28
     800:	490e      	ldr	r1, [pc, #56]	; (83c <USB_0_PORT_init+0x84>)
     802:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     804:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     806:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     80a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     80e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     812:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     816:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     81a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     81e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     822:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     826:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     82a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     82e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     832:	4770      	bx	lr
     834:	41008000 	.word	0x41008000
     838:	c0000100 	.word	0xc0000100
     83c:	c0000200 	.word	0xc0000200

00000840 <USB_0_CLOCK_init>:
     840:	2244      	movs	r2, #68	; 0x44
     842:	4b07      	ldr	r3, [pc, #28]	; (860 <USB_0_CLOCK_init+0x20>)
     844:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     848:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     84c:	691a      	ldr	r2, [r3, #16]
     84e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     852:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     854:	699a      	ldr	r2, [r3, #24]
     856:	f042 0201 	orr.w	r2, r2, #1
     85a:	619a      	str	r2, [r3, #24]
     85c:	4770      	bx	lr
     85e:	bf00      	nop
     860:	40001c00 	.word	0x40001c00

00000864 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     864:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     866:	4b03      	ldr	r3, [pc, #12]	; (874 <USB_0_init+0x10>)
     868:	4798      	blx	r3
	usb_d_init();
     86a:	4b03      	ldr	r3, [pc, #12]	; (878 <USB_0_init+0x14>)
     86c:	4798      	blx	r3
	USB_0_PORT_init();
     86e:	4b03      	ldr	r3, [pc, #12]	; (87c <USB_0_init+0x18>)
     870:	4798      	blx	r3
     872:	bd08      	pop	{r3, pc}
     874:	00000841 	.word	0x00000841
     878:	00000ed9 	.word	0x00000ed9
     87c:	000007b9 	.word	0x000007b9

00000880 <system_init>:
}

void system_init(void)
{
     880:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     882:	4b0f      	ldr	r3, [pc, #60]	; (8c0 <system_init+0x40>)
     884:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     886:	4b0f      	ldr	r3, [pc, #60]	; (8c4 <system_init+0x44>)
     888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     88c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     894:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     898:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     89c:	4a0a      	ldr	r2, [pc, #40]	; (8c8 <system_init+0x48>)
     89e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8a2:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
     8a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8aa:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	// Set pin direction to output
	gpio_set_pin_direction(SPI0_CS, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(SPI0_CS, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     8ae:	4b07      	ldr	r3, [pc, #28]	; (8cc <system_init+0x4c>)
     8b0:	4798      	blx	r3

	SPI_0_init();
     8b2:	4b07      	ldr	r3, [pc, #28]	; (8d0 <system_init+0x50>)
     8b4:	4798      	blx	r3

	delay_driver_init();
     8b6:	4b07      	ldr	r3, [pc, #28]	; (8d4 <system_init+0x54>)
     8b8:	4798      	blx	r3

	USB_0_init();
     8ba:	4b07      	ldr	r3, [pc, #28]	; (8d8 <system_init+0x58>)
     8bc:	4798      	blx	r3
     8be:	bd08      	pop	{r3, pc}
     8c0:	00001461 	.word	0x00001461
     8c4:	41008000 	.word	0x41008000
     8c8:	c0001000 	.word	0xc0001000
     8cc:	00000689 	.word	0x00000689
     8d0:	0000077d 	.word	0x0000077d
     8d4:	000007a5 	.word	0x000007a5
     8d8:	00000865 	.word	0x00000865

000008dc <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     8dc:	b538      	push	{r3, r4, r5, lr}
     8de:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     8e0:	4605      	mov	r5, r0
     8e2:	b158      	cbz	r0, 8fc <adc_sync_init+0x20>
     8e4:	1c08      	adds	r0, r1, #0
     8e6:	bf18      	it	ne
     8e8:	2001      	movne	r0, #1
     8ea:	2239      	movs	r2, #57	; 0x39
     8ec:	4904      	ldr	r1, [pc, #16]	; (900 <adc_sync_init+0x24>)
     8ee:	4b05      	ldr	r3, [pc, #20]	; (904 <adc_sync_init+0x28>)
     8f0:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     8f2:	4621      	mov	r1, r4
     8f4:	4628      	mov	r0, r5
     8f6:	4b04      	ldr	r3, [pc, #16]	; (908 <adc_sync_init+0x2c>)
     8f8:	4798      	blx	r3
}
     8fa:	bd38      	pop	{r3, r4, r5, pc}
     8fc:	2000      	movs	r0, #0
     8fe:	e7f4      	b.n	8ea <adc_sync_init+0xe>
     900:	00003b60 	.word	0x00003b60
     904:	00001225 	.word	0x00001225
     908:	00001385 	.word	0x00001385

0000090c <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     90c:	b538      	push	{r3, r4, r5, lr}
     90e:	460d      	mov	r5, r1
	ASSERT(descr);
     910:	4604      	mov	r4, r0
     912:	224e      	movs	r2, #78	; 0x4e
     914:	4905      	ldr	r1, [pc, #20]	; (92c <adc_sync_enable_channel+0x20>)
     916:	3000      	adds	r0, #0
     918:	bf18      	it	ne
     91a:	2001      	movne	r0, #1
     91c:	4b04      	ldr	r3, [pc, #16]	; (930 <adc_sync_enable_channel+0x24>)
     91e:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     920:	4629      	mov	r1, r5
     922:	4620      	mov	r0, r4
     924:	4b03      	ldr	r3, [pc, #12]	; (934 <adc_sync_enable_channel+0x28>)
     926:	4798      	blx	r3

	return ERR_NONE;
}
     928:	2000      	movs	r0, #0
     92a:	bd38      	pop	{r3, r4, r5, pc}
     92c:	00003b60 	.word	0x00003b60
     930:	00001225 	.word	0x00001225
     934:	000013bd 	.word	0x000013bd

00000938 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     93c:	460d      	mov	r5, r1
     93e:	4691      	mov	r9, r2
     940:	469a      	mov	sl, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
     942:	4680      	mov	r8, r0
     944:	b1e0      	cbz	r0, 980 <adc_sync_read_channel+0x48>
     946:	b1ea      	cbz	r2, 984 <adc_sync_read_channel+0x4c>
     948:	1c18      	adds	r0, r3, #0
     94a:	bf18      	it	ne
     94c:	2001      	movne	r0, #1
     94e:	4f1c      	ldr	r7, [pc, #112]	; (9c0 <adc_sync_read_channel+0x88>)
     950:	2267      	movs	r2, #103	; 0x67
     952:	4639      	mov	r1, r7
     954:	4e1b      	ldr	r6, [pc, #108]	; (9c4 <adc_sync_read_channel+0x8c>)
     956:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
     958:	4644      	mov	r4, r8
     95a:	4640      	mov	r0, r8
     95c:	4b1a      	ldr	r3, [pc, #104]	; (9c8 <adc_sync_read_channel+0x90>)
     95e:	4798      	blx	r3
     960:	4680      	mov	r8, r0
	ASSERT(!(length % data_size));
     962:	fb9a f0f0 	sdiv	r0, sl, r0
     966:	fb08 a010 	mls	r0, r8, r0, sl
     96a:	2269      	movs	r2, #105	; 0x69
     96c:	4639      	mov	r1, r7
     96e:	fab0 f080 	clz	r0, r0
     972:	0940      	lsrs	r0, r0, #5
     974:	47b0      	blx	r6
	uint16_t offset = 0;
     976:	2700      	movs	r7, #0

	do {
		uint16_t result;
		_adc_sync_convert(&descr->device);
     978:	f8df b058 	ldr.w	fp, [pc, #88]	; 9d4 <adc_sync_read_channel+0x9c>

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     97c:	4e13      	ldr	r6, [pc, #76]	; (9cc <adc_sync_read_channel+0x94>)
     97e:	e007      	b.n	990 <adc_sync_read_channel+0x58>
	ASSERT(descr && buffer && length);
     980:	2000      	movs	r0, #0
     982:	e7e4      	b.n	94e <adc_sync_read_channel+0x16>
     984:	2000      	movs	r0, #0
     986:	e7e2      	b.n	94e <adc_sync_read_channel+0x16>
     988:	4447      	add	r7, r8
     98a:	b2bf      	uxth	r7, r7
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
	} while (offset < length);
     98c:	45ba      	cmp	sl, r7
     98e:	d914      	bls.n	9ba <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
     990:	4620      	mov	r0, r4
     992:	47d8      	blx	fp
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     994:	4629      	mov	r1, r5
     996:	4620      	mov	r0, r4
     998:	47b0      	blx	r6
     99a:	2800      	cmp	r0, #0
     99c:	d0fa      	beq.n	994 <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
     99e:	4629      	mov	r1, r5
     9a0:	4620      	mov	r0, r4
     9a2:	4b0b      	ldr	r3, [pc, #44]	; (9d0 <adc_sync_read_channel+0x98>)
     9a4:	4798      	blx	r3
		buffer[offset] = result;
     9a6:	f809 0007 	strb.w	r0, [r9, r7]
		if (1 < data_size) {
     9aa:	f1b8 0f01 	cmp.w	r8, #1
     9ae:	d9eb      	bls.n	988 <adc_sync_read_channel+0x50>
			buffer[offset + 1] = result >> 8;
     9b0:	eb09 0307 	add.w	r3, r9, r7
     9b4:	0a00      	lsrs	r0, r0, #8
     9b6:	7058      	strb	r0, [r3, #1]
     9b8:	e7e6      	b.n	988 <adc_sync_read_channel+0x50>

	return offset;
}
     9ba:	4638      	mov	r0, r7
     9bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     9c0:	00003b60 	.word	0x00003b60
     9c4:	00001225 	.word	0x00001225
     9c8:	000013d3 	.word	0x000013d3
     9cc:	000013e5 	.word	0x000013e5
     9d0:	00001407 	.word	0x00001407
     9d4:	000013f1 	.word	0x000013f1

000009d8 <adc_sync_set_inputs>:
/**
 * \brief Set ADC input source of a channel
 */
int32_t adc_sync_set_inputs(struct adc_sync_descriptor *const descr, const adc_pos_input_t pos_input,
                            const adc_neg_input_t neg_input, const uint8_t channel)
{
     9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9da:	460d      	mov	r5, r1
     9dc:	4616      	mov	r6, r2
     9de:	461f      	mov	r7, r3
	ASSERT(descr);
     9e0:	4604      	mov	r4, r0
     9e2:	2299      	movs	r2, #153	; 0x99
     9e4:	4906      	ldr	r1, [pc, #24]	; (a00 <adc_sync_set_inputs+0x28>)
     9e6:	3000      	adds	r0, #0
     9e8:	bf18      	it	ne
     9ea:	2001      	movne	r0, #1
     9ec:	4b05      	ldr	r3, [pc, #20]	; (a04 <adc_sync_set_inputs+0x2c>)
     9ee:	4798      	blx	r3
	_adc_sync_set_inputs(&descr->device, pos_input, neg_input, channel);
     9f0:	463b      	mov	r3, r7
     9f2:	4632      	mov	r2, r6
     9f4:	4629      	mov	r1, r5
     9f6:	4620      	mov	r0, r4
     9f8:	4c03      	ldr	r4, [pc, #12]	; (a08 <adc_sync_set_inputs+0x30>)
     9fa:	47a0      	blx	r4

	return ERR_NONE;
}
     9fc:	2000      	movs	r0, #0
     9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a00:	00003b60 	.word	0x00003b60
     a04:	00001225 	.word	0x00001225
     a08:	00001411 	.word	0x00001411

00000a0c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     a0c:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     a0e:	4b02      	ldr	r3, [pc, #8]	; (a18 <delay_init+0xc>)
     a10:	6018      	str	r0, [r3, #0]
     a12:	4b02      	ldr	r3, [pc, #8]	; (a1c <delay_init+0x10>)
     a14:	4798      	blx	r3
     a16:	bd08      	pop	{r3, pc}
     a18:	200004b0 	.word	0x200004b0
     a1c:	000019bd 	.word	0x000019bd

00000a20 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     a20:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     a22:	4b04      	ldr	r3, [pc, #16]	; (a34 <delay_ms+0x14>)
     a24:	681c      	ldr	r4, [r3, #0]
     a26:	4b04      	ldr	r3, [pc, #16]	; (a38 <delay_ms+0x18>)
     a28:	4798      	blx	r3
     a2a:	4601      	mov	r1, r0
     a2c:	4620      	mov	r0, r4
     a2e:	4b03      	ldr	r3, [pc, #12]	; (a3c <delay_ms+0x1c>)
     a30:	4798      	blx	r3
     a32:	bd10      	pop	{r4, pc}
     a34:	200004b0 	.word	0x200004b0
     a38:	00001455 	.word	0x00001455
     a3c:	000019d1 	.word	0x000019d1

00000a40 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a42:	460f      	mov	r7, r1
     a44:	4616      	mov	r6, r2
	ASSERT(io);
     a46:	4604      	mov	r4, r0
     a48:	f240 1227 	movw	r2, #295	; 0x127
     a4c:	4909      	ldr	r1, [pc, #36]	; (a74 <_spi_m_async_io_write+0x34>)
     a4e:	3000      	adds	r0, #0
     a50:	bf18      	it	ne
     a52:	2001      	movne	r0, #1
     a54:	4b08      	ldr	r3, [pc, #32]	; (a78 <_spi_m_async_io_write+0x38>)
     a56:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
     a58:	2500      	movs	r5, #0
     a5a:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
     a5c:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
     a5e:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     a60:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     a62:	2310      	movs	r3, #16
     a64:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
     a66:	2101      	movs	r1, #1
     a68:	f1a4 0020 	sub.w	r0, r4, #32
     a6c:	4b03      	ldr	r3, [pc, #12]	; (a7c <_spi_m_async_io_write+0x3c>)
     a6e:	4798      	blx	r3

	return ERR_NONE;
}
     a70:	4628      	mov	r0, r5
     a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a74:	00003b7c 	.word	0x00003b7c
     a78:	00001225 	.word	0x00001225
     a7c:	0000187d 	.word	0x0000187d

00000a80 <_spi_m_async_io_read>:
{
     a80:	b570      	push	{r4, r5, r6, lr}
     a82:	460d      	mov	r5, r1
     a84:	4616      	mov	r6, r2
	ASSERT(io);
     a86:	4604      	mov	r4, r0
     a88:	f240 1205 	movw	r2, #261	; 0x105
     a8c:	490c      	ldr	r1, [pc, #48]	; (ac0 <_spi_m_async_io_read+0x40>)
     a8e:	3000      	adds	r0, #0
     a90:	bf18      	it	ne
     a92:	2001      	movne	r0, #1
     a94:	4b0b      	ldr	r3, [pc, #44]	; (ac4 <_spi_m_async_io_read+0x44>)
     a96:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
     a98:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
     a9a:	2500      	movs	r5, #0
     a9c:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
     a9e:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     aa0:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     aa2:	2310      	movs	r3, #16
     aa4:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
     aa6:	3c20      	subs	r4, #32
     aa8:	2101      	movs	r1, #1
     aaa:	4620      	mov	r0, r4
     aac:	4b06      	ldr	r3, [pc, #24]	; (ac8 <_spi_m_async_io_read+0x48>)
     aae:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
     ab0:	f240 11ff 	movw	r1, #511	; 0x1ff
     ab4:	4620      	mov	r0, r4
     ab6:	4b05      	ldr	r3, [pc, #20]	; (acc <_spi_m_async_io_read+0x4c>)
     ab8:	4798      	blx	r3
}
     aba:	4628      	mov	r0, r5
     abc:	bd70      	pop	{r4, r5, r6, pc}
     abe:	bf00      	nop
     ac0:	00003b7c 	.word	0x00003b7c
     ac4:	00001225 	.word	0x00001225
     ac8:	000018b1 	.word	0x000018b1
     acc:	0000192d 	.word	0x0000192d

00000ad0 <_spi_dev_error>:
{
     ad0:	b570      	push	{r4, r5, r6, lr}
     ad2:	4604      	mov	r4, r0
     ad4:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     ad6:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
     ad8:	2100      	movs	r1, #0
     ada:	4b09      	ldr	r3, [pc, #36]	; (b00 <_spi_dev_error+0x30>)
     adc:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
     ade:	2100      	movs	r1, #0
     ae0:	4620      	mov	r0, r4
     ae2:	4b08      	ldr	r3, [pc, #32]	; (b04 <_spi_dev_error+0x34>)
     ae4:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
     ae6:	2100      	movs	r1, #0
     ae8:	4620      	mov	r0, r4
     aea:	4b07      	ldr	r3, [pc, #28]	; (b08 <_spi_dev_error+0x38>)
     aec:	4798      	blx	r3
	spi->stat = 0;
     aee:	2300      	movs	r3, #0
     af0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
     af4:	6b23      	ldr	r3, [r4, #48]	; 0x30
     af6:	b113      	cbz	r3, afe <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
     af8:	4631      	mov	r1, r6
     afa:	4628      	mov	r0, r5
     afc:	4798      	blx	r3
     afe:	bd70      	pop	{r4, r5, r6, pc}
     b00:	0000187d 	.word	0x0000187d
     b04:	000018b1 	.word	0x000018b1
     b08:	000018f1 	.word	0x000018f1

00000b0c <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
     b0c:	6c02      	ldr	r2, [r0, #64]	; 0x40
     b0e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     b10:	429a      	cmp	r2, r3
     b12:	d200      	bcs.n	b16 <_spi_dev_complete+0xa>
     b14:	4770      	bx	lr
{
     b16:	b510      	push	{r4, lr}
     b18:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
     b1a:	2100      	movs	r1, #0
     b1c:	4b04      	ldr	r3, [pc, #16]	; (b30 <_spi_dev_complete+0x24>)
     b1e:	4798      	blx	r3
		spi->stat = 0;
     b20:	2300      	movs	r3, #0
     b22:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     b26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b28:	b10b      	cbz	r3, b2e <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
     b2a:	1f20      	subs	r0, r4, #4
     b2c:	4798      	blx	r3
     b2e:	bd10      	pop	{r4, pc}
     b30:	000018f1 	.word	0x000018f1

00000b34 <_spi_dev_tx>:
{
     b34:	b510      	push	{r4, lr}
     b36:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
     b38:	7903      	ldrb	r3, [r0, #4]
     b3a:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
     b3c:	6b42      	ldr	r2, [r0, #52]	; 0x34
     b3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
     b40:	f103 0101 	add.w	r1, r3, #1
     b44:	6401      	str	r1, [r0, #64]	; 0x40
     b46:	bf94      	ite	ls
     b48:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
     b4a:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     b4e:	4b08      	ldr	r3, [pc, #32]	; (b70 <_spi_dev_tx+0x3c>)
     b50:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
     b52:	6c22      	ldr	r2, [r4, #64]	; 0x40
     b54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     b56:	429a      	cmp	r2, r3
     b58:	d000      	beq.n	b5c <_spi_dev_tx+0x28>
     b5a:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
     b5c:	2100      	movs	r1, #0
     b5e:	4620      	mov	r0, r4
     b60:	4b04      	ldr	r3, [pc, #16]	; (b74 <_spi_dev_tx+0x40>)
     b62:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
     b64:	2101      	movs	r1, #1
     b66:	4620      	mov	r0, r4
     b68:	4b03      	ldr	r3, [pc, #12]	; (b78 <_spi_dev_tx+0x44>)
     b6a:	4798      	blx	r3
}
     b6c:	e7f5      	b.n	b5a <_spi_dev_tx+0x26>
     b6e:	bf00      	nop
     b70:	0000192d 	.word	0x0000192d
     b74:	0000187d 	.word	0x0000187d
     b78:	000018f1 	.word	0x000018f1

00000b7c <_spi_dev_rx>:
{
     b7c:	b570      	push	{r4, r5, r6, lr}
     b7e:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
     b80:	6b85      	ldr	r5, [r0, #56]	; 0x38
     b82:	b305      	cbz	r5, bc6 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
     b84:	7903      	ldrb	r3, [r0, #4]
     b86:	2b01      	cmp	r3, #1
     b88:	d916      	bls.n	bb8 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
     b8a:	6c06      	ldr	r6, [r0, #64]	; 0x40
     b8c:	1c73      	adds	r3, r6, #1
     b8e:	6403      	str	r3, [r0, #64]	; 0x40
     b90:	4b18      	ldr	r3, [pc, #96]	; (bf4 <_spi_dev_rx+0x78>)
     b92:	4798      	blx	r3
     b94:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
     b98:	6c23      	ldr	r3, [r4, #64]	; 0x40
     b9a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     b9c:	4293      	cmp	r3, r2
     b9e:	d21d      	bcs.n	bdc <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
     ba0:	6b62      	ldr	r2, [r4, #52]	; 0x34
     ba2:	b1b2      	cbz	r2, bd2 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
     ba4:	7921      	ldrb	r1, [r4, #4]
     ba6:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
     ba8:	bf94      	ite	ls
     baa:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
     bac:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     bb0:	4620      	mov	r0, r4
     bb2:	4b11      	ldr	r3, [pc, #68]	; (bf8 <_spi_dev_rx+0x7c>)
     bb4:	4798      	blx	r3
     bb6:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
     bb8:	6c06      	ldr	r6, [r0, #64]	; 0x40
     bba:	1c73      	adds	r3, r6, #1
     bbc:	6403      	str	r3, [r0, #64]	; 0x40
     bbe:	4b0d      	ldr	r3, [pc, #52]	; (bf4 <_spi_dev_rx+0x78>)
     bc0:	4798      	blx	r3
     bc2:	55a8      	strb	r0, [r5, r6]
     bc4:	e7e8      	b.n	b98 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
     bc6:	4b0b      	ldr	r3, [pc, #44]	; (bf4 <_spi_dev_rx+0x78>)
     bc8:	4798      	blx	r3
		spi->xfercnt++;
     bca:	6c23      	ldr	r3, [r4, #64]	; 0x40
     bcc:	3301      	adds	r3, #1
     bce:	6423      	str	r3, [r4, #64]	; 0x40
     bd0:	e7e2      	b.n	b98 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
     bd2:	88e1      	ldrh	r1, [r4, #6]
     bd4:	4620      	mov	r0, r4
     bd6:	4b08      	ldr	r3, [pc, #32]	; (bf8 <_spi_dev_rx+0x7c>)
     bd8:	4798      	blx	r3
     bda:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
     bdc:	2100      	movs	r1, #0
     bde:	4620      	mov	r0, r4
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <_spi_dev_rx+0x80>)
     be2:	4798      	blx	r3
		spi->stat = 0;
     be4:	2300      	movs	r3, #0
     be6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     bea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     bec:	b10b      	cbz	r3, bf2 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
     bee:	1f20      	subs	r0, r4, #4
     bf0:	4798      	blx	r3
     bf2:	bd70      	pop	{r4, r5, r6, pc}
     bf4:	0000195d 	.word	0x0000195d
     bf8:	0000192d 	.word	0x0000192d
     bfc:	000018b1 	.word	0x000018b1

00000c00 <spi_m_async_init>:
{
     c00:	b570      	push	{r4, r5, r6, lr}
     c02:	460d      	mov	r5, r1
	ASSERT(spi && hw);
     c04:	4606      	mov	r6, r0
     c06:	b330      	cbz	r0, c56 <spi_m_async_init+0x56>
     c08:	1c08      	adds	r0, r1, #0
     c0a:	bf18      	it	ne
     c0c:	2001      	movne	r0, #1
     c0e:	22a5      	movs	r2, #165	; 0xa5
     c10:	4912      	ldr	r1, [pc, #72]	; (c5c <spi_m_async_init+0x5c>)
     c12:	4b13      	ldr	r3, [pc, #76]	; (c60 <spi_m_async_init+0x60>)
     c14:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     c16:	4634      	mov	r4, r6
     c18:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
     c1c:	4629      	mov	r1, r5
     c1e:	4620      	mov	r0, r4
     c20:	4b10      	ldr	r3, [pc, #64]	; (c64 <spi_m_async_init+0x64>)
     c22:	4798      	blx	r3
	if (rc >= 0) {
     c24:	2800      	cmp	r0, #0
     c26:	db15      	blt.n	c54 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
     c28:	4a0f      	ldr	r2, [pc, #60]	; (c68 <spi_m_async_init+0x68>)
     c2a:	2100      	movs	r1, #0
     c2c:	4620      	mov	r0, r4
     c2e:	4d0f      	ldr	r5, [pc, #60]	; (c6c <spi_m_async_init+0x6c>)
     c30:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
     c32:	4a0f      	ldr	r2, [pc, #60]	; (c70 <spi_m_async_init+0x70>)
     c34:	2101      	movs	r1, #1
     c36:	4620      	mov	r0, r4
     c38:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
     c3a:	4a0e      	ldr	r2, [pc, #56]	; (c74 <spi_m_async_init+0x74>)
     c3c:	2102      	movs	r1, #2
     c3e:	4620      	mov	r0, r4
     c40:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
     c42:	4a0d      	ldr	r2, [pc, #52]	; (c78 <spi_m_async_init+0x78>)
     c44:	2103      	movs	r1, #3
     c46:	4620      	mov	r0, r4
     c48:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
     c4a:	4b0c      	ldr	r3, [pc, #48]	; (c7c <spi_m_async_init+0x7c>)
     c4c:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
     c4e:	4b0c      	ldr	r3, [pc, #48]	; (c80 <spi_m_async_init+0x80>)
     c50:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
     c52:	2000      	movs	r0, #0
}
     c54:	bd70      	pop	{r4, r5, r6, pc}
     c56:	2000      	movs	r0, #0
     c58:	e7d9      	b.n	c0e <spi_m_async_init+0xe>
     c5a:	bf00      	nop
     c5c:	00003b7c 	.word	0x00003b7c
     c60:	00001225 	.word	0x00001225
     c64:	00001811 	.word	0x00001811
     c68:	00000b35 	.word	0x00000b35
     c6c:	00001989 	.word	0x00001989
     c70:	00000b7d 	.word	0x00000b7d
     c74:	00000b0d 	.word	0x00000b0d
     c78:	00000ad1 	.word	0x00000ad1
     c7c:	00000a81 	.word	0x00000a81
     c80:	00000a41 	.word	0x00000a41

00000c84 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     c84:	4b0f      	ldr	r3, [pc, #60]	; (cc4 <_usb_d_find_ep+0x40>)
     c86:	7859      	ldrb	r1, [r3, #1]
     c88:	4288      	cmp	r0, r1
     c8a:	d018      	beq.n	cbe <_usb_d_find_ep+0x3a>
{
     c8c:	b430      	push	{r4, r5}
     c8e:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     c90:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     c92:	f000 050f 	and.w	r5, r0, #15
     c96:	e007      	b.n	ca8 <_usb_d_find_ep+0x24>
     c98:	3301      	adds	r3, #1
     c9a:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     c9c:	2b04      	cmp	r3, #4
     c9e:	d009      	beq.n	cb4 <_usb_d_find_ep+0x30>
     ca0:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     ca2:	7851      	ldrb	r1, [r2, #1]
     ca4:	4281      	cmp	r1, r0
     ca6:	d007      	beq.n	cb8 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     ca8:	7814      	ldrb	r4, [r2, #0]
     caa:	2c00      	cmp	r4, #0
     cac:	d1f4      	bne.n	c98 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     cae:	428d      	cmp	r5, r1
     cb0:	d1f2      	bne.n	c98 <_usb_d_find_ep+0x14>
     cb2:	e001      	b.n	cb8 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
     cb8:	4618      	mov	r0, r3
     cba:	bc30      	pop	{r4, r5}
     cbc:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     cbe:	2300      	movs	r3, #0
}
     cc0:	4618      	mov	r0, r3
     cc2:	4770      	bx	lr
     cc4:	200004b4 	.word	0x200004b4

00000cc8 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     cc8:	2000      	movs	r0, #0
     cca:	4770      	bx	lr

00000ccc <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     ccc:	b538      	push	{r3, r4, r5, lr}
     cce:	4604      	mov	r4, r0
     cd0:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     cd2:	4b09      	ldr	r3, [pc, #36]	; (cf8 <usb_d_cb_trans_more+0x2c>)
     cd4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     cd6:	4b09      	ldr	r3, [pc, #36]	; (cfc <usb_d_cb_trans_more+0x30>)
     cd8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     cdc:	789b      	ldrb	r3, [r3, #2]
     cde:	2b03      	cmp	r3, #3
     ce0:	d001      	beq.n	ce6 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     ce2:	2000      	movs	r0, #0
}
     ce4:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <usb_d_cb_trans_more+0x30>)
     ce8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     cec:	6983      	ldr	r3, [r0, #24]
     cee:	4629      	mov	r1, r5
     cf0:	4620      	mov	r0, r4
     cf2:	4798      	blx	r3
     cf4:	bd38      	pop	{r3, r4, r5, pc}
     cf6:	bf00      	nop
     cf8:	00000c85 	.word	0x00000c85
     cfc:	200004b4 	.word	0x200004b4

00000d00 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     d00:	b5f0      	push	{r4, r5, r6, r7, lr}
     d02:	b085      	sub	sp, #20
     d04:	4606      	mov	r6, r0
     d06:	460d      	mov	r5, r1
     d08:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     d0a:	4b4d      	ldr	r3, [pc, #308]	; (e40 <_usb_d_cb_trans_done+0x140>)
     d0c:	4798      	blx	r3
     d0e:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     d10:	2d00      	cmp	r5, #0
     d12:	d15b      	bne.n	dcc <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
     d14:	4a4b      	ldr	r2, [pc, #300]	; (e44 <_usb_d_cb_trans_done+0x144>)
     d16:	0143      	lsls	r3, r0, #5
     d18:	18d1      	adds	r1, r2, r3
     d1a:	2000      	movs	r0, #0
     d1c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     d1e:	5cd3      	ldrb	r3, [r2, r3]
     d20:	b173      	cbz	r3, d40 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     d22:	4b48      	ldr	r3, [pc, #288]	; (e44 <_usb_d_cb_trans_done+0x144>)
     d24:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     d28:	2201      	movs	r2, #1
     d2a:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     d2c:	4845      	ldr	r0, [pc, #276]	; (e44 <_usb_d_cb_trans_done+0x144>)
     d2e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     d32:	69c3      	ldr	r3, [r0, #28]
     d34:	463a      	mov	r2, r7
     d36:	78c1      	ldrb	r1, [r0, #3]
     d38:	4630      	mov	r0, r6
     d3a:	4798      	blx	r3
}
     d3c:	b005      	add	sp, #20
     d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     d40:	788b      	ldrb	r3, [r1, #2]
     d42:	2b03      	cmp	r3, #3
     d44:	d00b      	beq.n	d5e <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     d46:	483f      	ldr	r0, [pc, #252]	; (e44 <_usb_d_cb_trans_done+0x144>)
     d48:	eb00 1244 	add.w	r2, r0, r4, lsl #5
     d4c:	4614      	mov	r4, r2
     d4e:	69d3      	ldr	r3, [r2, #28]
     d50:	320c      	adds	r2, #12
     d52:	2100      	movs	r1, #0
     d54:	7860      	ldrb	r0, [r4, #1]
     d56:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     d58:	2302      	movs	r3, #2
     d5a:	70a3      	strb	r3, [r4, #2]
     d5c:	e7ee      	b.n	d3c <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     d5e:	460b      	mov	r3, r1
     d60:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     d64:	460a      	mov	r2, r1
     d66:	69ce      	ldr	r6, [r1, #28]
     d68:	320c      	adds	r2, #12
     d6a:	2101      	movs	r1, #1
     d6c:	7858      	ldrb	r0, [r3, #1]
     d6e:	47b0      	blx	r6
		if (err) {
     d70:	b1a0      	cbz	r0, d9c <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     d72:	4b34      	ldr	r3, [pc, #208]	; (e44 <_usb_d_cb_trans_done+0x144>)
     d74:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     d78:	2205      	movs	r2, #5
     d7a:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     d7c:	2202      	movs	r2, #2
     d7e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     d80:	2d00      	cmp	r5, #0
     d82:	db09      	blt.n	d98 <_usb_d_cb_trans_done+0x98>
     d84:	482f      	ldr	r0, [pc, #188]	; (e44 <_usb_d_cb_trans_done+0x144>)
     d86:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     d8a:	7840      	ldrb	r0, [r0, #1]
     d8c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     d90:	2101      	movs	r1, #1
     d92:	4b2d      	ldr	r3, [pc, #180]	; (e48 <_usb_d_cb_trans_done+0x148>)
     d94:	4798      	blx	r3
     d96:	e7d1      	b.n	d3c <_usb_d_cb_trans_done+0x3c>
     d98:	7858      	ldrb	r0, [r3, #1]
     d9a:	e7f9      	b.n	d90 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     d9c:	4829      	ldr	r0, [pc, #164]	; (e44 <_usb_d_cb_trans_done+0x144>)
     d9e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     da2:	2304      	movs	r3, #4
     da4:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     da6:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
     da8:	2200      	movs	r2, #0
     daa:	9201      	str	r2, [sp, #4]
     dac:	9202      	str	r2, [sp, #8]
     dae:	4295      	cmp	r5, r2
     db0:	bfac      	ite	ge
     db2:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
     db6:	f003 030f 	andlt.w	r3, r3, #15
     dba:	f88d 300c 	strb.w	r3, [sp, #12]
     dbe:	2301      	movs	r3, #1
     dc0:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     dc4:	a801      	add	r0, sp, #4
     dc6:	4b21      	ldr	r3, [pc, #132]	; (e4c <_usb_d_cb_trans_done+0x14c>)
     dc8:	4798      	blx	r3
     dca:	e7b7      	b.n	d3c <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
     dcc:	2d01      	cmp	r5, #1
     dce:	d00a      	beq.n	de6 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
     dd0:	2d02      	cmp	r5, #2
     dd2:	d01c      	beq.n	e0e <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
     dd4:	2d03      	cmp	r5, #3
     dd6:	d02a      	beq.n	e2e <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     dd8:	4b1a      	ldr	r3, [pc, #104]	; (e44 <_usb_d_cb_trans_done+0x144>)
     dda:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     dde:	2206      	movs	r2, #6
     de0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     de2:	70da      	strb	r2, [r3, #3]
     de4:	e7a2      	b.n	d2c <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
     de6:	4a17      	ldr	r2, [pc, #92]	; (e44 <_usb_d_cb_trans_done+0x144>)
     de8:	0143      	lsls	r3, r0, #5
     dea:	18d1      	adds	r1, r2, r3
     dec:	2002      	movs	r0, #2
     dee:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     df0:	5cd3      	ldrb	r3, [r2, r3]
     df2:	b12b      	cbz	r3, e00 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     df4:	4b13      	ldr	r3, [pc, #76]	; (e44 <_usb_d_cb_trans_done+0x144>)
     df6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     dfa:	2205      	movs	r2, #5
     dfc:	709a      	strb	r2, [r3, #2]
     dfe:	e795      	b.n	d2c <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     e00:	460b      	mov	r3, r1
     e02:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     e04:	2100      	movs	r1, #0
     e06:	4630      	mov	r0, r6
     e08:	4b0f      	ldr	r3, [pc, #60]	; (e48 <_usb_d_cb_trans_done+0x148>)
     e0a:	4798      	blx	r3
     e0c:	e78e      	b.n	d2c <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     e0e:	4a0d      	ldr	r2, [pc, #52]	; (e44 <_usb_d_cb_trans_done+0x144>)
     e10:	0143      	lsls	r3, r0, #5
     e12:	18d1      	adds	r1, r2, r3
     e14:	2004      	movs	r0, #4
     e16:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     e18:	5cd3      	ldrb	r3, [r2, r3]
     e1a:	b12b      	cbz	r3, e28 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     e1c:	4b09      	ldr	r3, [pc, #36]	; (e44 <_usb_d_cb_trans_done+0x144>)
     e1e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     e22:	2201      	movs	r2, #1
     e24:	709a      	strb	r2, [r3, #2]
     e26:	e781      	b.n	d2c <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     e28:	2302      	movs	r3, #2
     e2a:	708b      	strb	r3, [r1, #2]
			return;
     e2c:	e786      	b.n	d3c <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     e2e:	4b05      	ldr	r3, [pc, #20]	; (e44 <_usb_d_cb_trans_done+0x144>)
     e30:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     e34:	2200      	movs	r2, #0
     e36:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     e38:	2205      	movs	r2, #5
     e3a:	70da      	strb	r2, [r3, #3]
     e3c:	e776      	b.n	d2c <_usb_d_cb_trans_done+0x2c>
     e3e:	bf00      	nop
     e40:	00000c85 	.word	0x00000c85
     e44:	200004b4 	.word	0x200004b4
     e48:	000028ad 	.word	0x000028ad
     e4c:	00002a55 	.word	0x00002a55

00000e50 <usb_d_cb_trans_setup>:
{
     e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e54:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     e56:	4b1c      	ldr	r3, [pc, #112]	; (ec8 <usb_d_cb_trans_setup+0x78>)
     e58:	4798      	blx	r3
     e5a:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
     e5c:	4c1b      	ldr	r4, [pc, #108]	; (ecc <usb_d_cb_trans_setup+0x7c>)
     e5e:	eb04 1440 	add.w	r4, r4, r0, lsl #5
     e62:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     e64:	4621      	mov	r1, r4
     e66:	4628      	mov	r0, r5
     e68:	4b19      	ldr	r3, [pc, #100]	; (ed0 <usb_d_cb_trans_setup+0x80>)
     e6a:	4798      	blx	r3
	if (n != 8) {
     e6c:	b2c0      	uxtb	r0, r0
     e6e:	2808      	cmp	r0, #8
     e70:	d009      	beq.n	e86 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     e72:	2101      	movs	r1, #1
     e74:	4628      	mov	r0, r5
     e76:	4c17      	ldr	r4, [pc, #92]	; (ed4 <usb_d_cb_trans_setup+0x84>)
     e78:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     e7a:	2101      	movs	r1, #1
     e7c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
     e80:	47a0      	blx	r4
		return;
     e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     e86:	2100      	movs	r1, #0
     e88:	4628      	mov	r0, r5
     e8a:	4f12      	ldr	r7, [pc, #72]	; (ed4 <usb_d_cb_trans_setup+0x84>)
     e8c:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     e8e:	f045 0880 	orr.w	r8, r5, #128	; 0x80
     e92:	2100      	movs	r1, #0
     e94:	4640      	mov	r0, r8
     e96:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     e98:	4b0c      	ldr	r3, [pc, #48]	; (ecc <usb_d_cb_trans_setup+0x7c>)
     e9a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     e9e:	2201      	movs	r2, #1
     ea0:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     ea2:	695b      	ldr	r3, [r3, #20]
     ea4:	4621      	mov	r1, r4
     ea6:	4628      	mov	r0, r5
     ea8:	4798      	blx	r3
     eaa:	b108      	cbz	r0, eb0 <usb_d_cb_trans_setup+0x60>
     eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     eb0:	4b06      	ldr	r3, [pc, #24]	; (ecc <usb_d_cb_trans_setup+0x7c>)
     eb2:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     eb6:	2305      	movs	r3, #5
     eb8:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     eba:	2101      	movs	r1, #1
     ebc:	4628      	mov	r0, r5
     ebe:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     ec0:	2101      	movs	r1, #1
     ec2:	4640      	mov	r0, r8
     ec4:	47b8      	blx	r7
     ec6:	e7f1      	b.n	eac <usb_d_cb_trans_setup+0x5c>
     ec8:	00000c85 	.word	0x00000c85
     ecc:	200004b4 	.word	0x200004b4
     ed0:	000029f5 	.word	0x000029f5
     ed4:	000028ad 	.word	0x000028ad

00000ed8 <usb_d_init>:

int32_t usb_d_init(void)
{
     ed8:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     eda:	4b11      	ldr	r3, [pc, #68]	; (f20 <usb_d_init+0x48>)
     edc:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     ede:	2800      	cmp	r0, #0
     ee0:	db1c      	blt.n	f1c <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     ee2:	4c10      	ldr	r4, [pc, #64]	; (f24 <usb_d_init+0x4c>)
     ee4:	2280      	movs	r2, #128	; 0x80
     ee6:	2100      	movs	r1, #0
     ee8:	4620      	mov	r0, r4
     eea:	4b0f      	ldr	r3, [pc, #60]	; (f28 <usb_d_init+0x50>)
     eec:	4798      	blx	r3
     eee:	4623      	mov	r3, r4
     ef0:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     ef4:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     ef6:	4a0d      	ldr	r2, [pc, #52]	; (f2c <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     ef8:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     efa:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     efc:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     efe:	61da      	str	r2, [r3, #28]
     f00:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     f02:	4283      	cmp	r3, r0
     f04:	d1f8      	bne.n	ef8 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     f06:	490a      	ldr	r1, [pc, #40]	; (f30 <usb_d_init+0x58>)
     f08:	2000      	movs	r0, #0
     f0a:	4c0a      	ldr	r4, [pc, #40]	; (f34 <usb_d_init+0x5c>)
     f0c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     f0e:	490a      	ldr	r1, [pc, #40]	; (f38 <usb_d_init+0x60>)
     f10:	2001      	movs	r0, #1
     f12:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     f14:	4909      	ldr	r1, [pc, #36]	; (f3c <usb_d_init+0x64>)
     f16:	2002      	movs	r0, #2
     f18:	47a0      	blx	r4
	return ERR_NONE;
     f1a:	2000      	movs	r0, #0
}
     f1c:	bd10      	pop	{r4, pc}
     f1e:	bf00      	nop
     f20:	000022a1 	.word	0x000022a1
     f24:	200004b4 	.word	0x200004b4
     f28:	000039a5 	.word	0x000039a5
     f2c:	00000cc9 	.word	0x00000cc9
     f30:	00000e51 	.word	0x00000e51
     f34:	00002c59 	.word	0x00002c59
     f38:	00000ccd 	.word	0x00000ccd
     f3c:	00000d01 	.word	0x00000d01

00000f40 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     f40:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     f42:	4b01      	ldr	r3, [pc, #4]	; (f48 <usb_d_register_callback+0x8>)
     f44:	4798      	blx	r3
     f46:	bd08      	pop	{r3, pc}
     f48:	00002c35 	.word	0x00002c35

00000f4c <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
     f4c:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
     f4e:	4b01      	ldr	r3, [pc, #4]	; (f54 <usb_d_enable+0x8>)
     f50:	4798      	blx	r3
}
     f52:	bd08      	pop	{r3, pc}
     f54:	0000239d 	.word	0x0000239d

00000f58 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     f58:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
     f5a:	4b01      	ldr	r3, [pc, #4]	; (f60 <usb_d_attach+0x8>)
     f5c:	4798      	blx	r3
     f5e:	bd08      	pop	{r3, pc}
     f60:	00002409 	.word	0x00002409

00000f64 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     f64:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
     f66:	4b01      	ldr	r3, [pc, #4]	; (f6c <usb_d_set_address+0x8>)
     f68:	4798      	blx	r3
     f6a:	bd08      	pop	{r3, pc}
     f6c:	0000241b 	.word	0x0000241b

00000f70 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f72:	4606      	mov	r6, r0
     f74:	460c      	mov	r4, r1
     f76:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     f78:	4b0f      	ldr	r3, [pc, #60]	; (fb8 <usb_d_ep_init+0x48>)
     f7a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     f7c:	2800      	cmp	r0, #0
     f7e:	da14      	bge.n	faa <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     f80:	20ff      	movs	r0, #255	; 0xff
     f82:	4b0d      	ldr	r3, [pc, #52]	; (fb8 <usb_d_ep_init+0x48>)
     f84:	4798      	blx	r3
		if (ep_index < 0) {
     f86:	1e05      	subs	r5, r0, #0
     f88:	db12      	blt.n	fb0 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     f8a:	463a      	mov	r2, r7
     f8c:	4621      	mov	r1, r4
     f8e:	4630      	mov	r0, r6
     f90:	4b0a      	ldr	r3, [pc, #40]	; (fbc <usb_d_ep_init+0x4c>)
     f92:	4798      	blx	r3
	if (rc < 0) {
     f94:	2800      	cmp	r0, #0
     f96:	db0d      	blt.n	fb4 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     f98:	4b09      	ldr	r3, [pc, #36]	; (fc0 <usb_d_ep_init+0x50>)
     f9a:	0168      	lsls	r0, r5, #5
     f9c:	181a      	adds	r2, r3, r0
     f9e:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     fa0:	f004 0403 	and.w	r4, r4, #3
     fa4:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
     fa6:	2000      	movs	r0, #0
     fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     faa:	f06f 0013 	mvn.w	r0, #19
     fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
     fb0:	f06f 0014 	mvn.w	r0, #20
}
     fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fb6:	bf00      	nop
     fb8:	00000c85 	.word	0x00000c85
     fbc:	00002429 	.word	0x00002429
     fc0:	200004b4 	.word	0x200004b4

00000fc4 <usb_d_ep0_init>:
{
     fc4:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     fc6:	4602      	mov	r2, r0
     fc8:	2100      	movs	r1, #0
     fca:	4608      	mov	r0, r1
     fcc:	4b01      	ldr	r3, [pc, #4]	; (fd4 <usb_d_ep0_init+0x10>)
     fce:	4798      	blx	r3
}
     fd0:	bd08      	pop	{r3, pc}
     fd2:	bf00      	nop
     fd4:	00000f71 	.word	0x00000f71

00000fd8 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     fd8:	b538      	push	{r3, r4, r5, lr}
     fda:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     fdc:	4b06      	ldr	r3, [pc, #24]	; (ff8 <usb_d_ep_deinit+0x20>)
     fde:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     fe0:	1e04      	subs	r4, r0, #0
     fe2:	db07      	blt.n	ff4 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     fe4:	4628      	mov	r0, r5
     fe6:	4b05      	ldr	r3, [pc, #20]	; (ffc <usb_d_ep_deinit+0x24>)
     fe8:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     fea:	4805      	ldr	r0, [pc, #20]	; (1000 <usb_d_ep_deinit+0x28>)
     fec:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     ff0:	23ff      	movs	r3, #255	; 0xff
     ff2:	7043      	strb	r3, [r0, #1]
     ff4:	bd38      	pop	{r3, r4, r5, pc}
     ff6:	bf00      	nop
     ff8:	00000c85 	.word	0x00000c85
     ffc:	00002541 	.word	0x00002541
    1000:	200004b4 	.word	0x200004b4

00001004 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1004:	b538      	push	{r3, r4, r5, lr}
    1006:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1008:	4b0e      	ldr	r3, [pc, #56]	; (1044 <usb_d_ep_enable+0x40>)
    100a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    100c:	1e04      	subs	r4, r0, #0
    100e:	db16      	blt.n	103e <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1010:	0163      	lsls	r3, r4, #5
    1012:	4a0d      	ldr	r2, [pc, #52]	; (1048 <usb_d_ep_enable+0x44>)
    1014:	5cd3      	ldrb	r3, [r2, r3]
    1016:	2b00      	cmp	r3, #0
    1018:	bf0c      	ite	eq
    101a:	2202      	moveq	r2, #2
    101c:	2201      	movne	r2, #1
    101e:	4b0a      	ldr	r3, [pc, #40]	; (1048 <usb_d_ep_enable+0x44>)
    1020:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1024:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1026:	4628      	mov	r0, r5
    1028:	4b08      	ldr	r3, [pc, #32]	; (104c <usb_d_ep_enable+0x48>)
    102a:	4798      	blx	r3
	if (rc < 0) {
    102c:	2800      	cmp	r0, #0
    102e:	db00      	blt.n	1032 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1030:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1032:	4b05      	ldr	r3, [pc, #20]	; (1048 <usb_d_ep_enable+0x44>)
    1034:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    1038:	2300      	movs	r3, #0
    103a:	70a3      	strb	r3, [r4, #2]
    103c:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    103e:	f06f 0011 	mvn.w	r0, #17
    1042:	e7f5      	b.n	1030 <usb_d_ep_enable+0x2c>
    1044:	00000c85 	.word	0x00000c85
    1048:	200004b4 	.word	0x200004b4
    104c:	00002605 	.word	0x00002605

00001050 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1054:	b086      	sub	sp, #24
    1056:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1058:	7a07      	ldrb	r7, [r0, #8]
    105a:	4638      	mov	r0, r7
    105c:	4b3f      	ldr	r3, [pc, #252]	; (115c <usb_d_ep_transfer+0x10c>)
    105e:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1060:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    1062:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1066:	1e06      	subs	r6, r0, #0
    1068:	db72      	blt.n	1150 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    106a:	a804      	add	r0, sp, #16
    106c:	4b3c      	ldr	r3, [pc, #240]	; (1160 <usb_d_ep_transfer+0x110>)
    106e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1070:	4b3c      	ldr	r3, [pc, #240]	; (1164 <usb_d_ep_transfer+0x114>)
    1072:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1076:	789b      	ldrb	r3, [r3, #2]
    1078:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    107c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1080:	b2db      	uxtb	r3, r3
    1082:	2b01      	cmp	r3, #1
    1084:	d011      	beq.n	10aa <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1086:	a804      	add	r0, sp, #16
    1088:	4b37      	ldr	r3, [pc, #220]	; (1168 <usb_d_ep_transfer+0x118>)
    108a:	4798      	blx	r3
		switch (state) {
    108c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1090:	b2db      	uxtb	r3, r3
    1092:	2b05      	cmp	r3, #5
    1094:	d05f      	beq.n	1156 <usb_d_ep_transfer+0x106>
    1096:	2b06      	cmp	r3, #6
    1098:	d023      	beq.n	10e2 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    109a:	2b00      	cmp	r3, #0
    109c:	bf0c      	ite	eq
    109e:	f06f 0012 	mvneq.w	r0, #18
    10a2:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    10a4:	b006      	add	sp, #24
    10a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    10aa:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1164 <usb_d_ep_transfer+0x114>
    10ae:	ea4f 1946 	mov.w	r9, r6, lsl #5
    10b2:	eb0a 0309 	add.w	r3, sl, r9
    10b6:	2203      	movs	r2, #3
    10b8:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    10ba:	a804      	add	r0, sp, #16
    10bc:	4b2a      	ldr	r3, [pc, #168]	; (1168 <usb_d_ep_transfer+0x118>)
    10be:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    10c0:	f81a 3009 	ldrb.w	r3, [sl, r9]
    10c4:	b183      	cbz	r3, 10e8 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    10c6:	7a22      	ldrb	r2, [r4, #8]
    10c8:	3500      	adds	r5, #0
    10ca:	bf18      	it	ne
    10cc:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    10ce:	6823      	ldr	r3, [r4, #0]
    10d0:	9301      	str	r3, [sp, #4]
    10d2:	f8cd 8008 	str.w	r8, [sp, #8]
    10d6:	f017 0f80 	tst.w	r7, #128	; 0x80
    10da:	d119      	bne.n	1110 <usb_d_ep_transfer+0xc0>
    10dc:	f002 030f 	and.w	r3, r2, #15
    10e0:	e018      	b.n	1114 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    10e2:	f06f 000f 	mvn.w	r0, #15
    10e6:	e7dd      	b.n	10a4 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    10e8:	4b1e      	ldr	r3, [pc, #120]	; (1164 <usb_d_ep_transfer+0x114>)
    10ea:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    10ee:	7cda      	ldrb	r2, [r3, #19]
    10f0:	7c9d      	ldrb	r5, [r3, #18]
    10f2:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    10f6:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    10f8:	b9a5      	cbnz	r5, 1124 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    10fa:	4b1a      	ldr	r3, [pc, #104]	; (1164 <usb_d_ep_transfer+0x114>)
    10fc:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1100:	2304      	movs	r3, #4
    1102:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    1104:	2300      	movs	r3, #0
			zlp                 = true;
    1106:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1108:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    110a:	6821      	ldr	r1, [r4, #0]
    110c:	9101      	str	r1, [sp, #4]
    110e:	9302      	str	r3, [sp, #8]
    1110:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    1114:	f88d 300c 	strb.w	r3, [sp, #12]
    1118:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    111c:	a801      	add	r0, sp, #4
    111e:	4b13      	ldr	r3, [pc, #76]	; (116c <usb_d_ep_transfer+0x11c>)
    1120:	4798      	blx	r3
	return rc;
    1122:	e7bf      	b.n	10a4 <usb_d_ep_transfer+0x54>
    1124:	4643      	mov	r3, r8
    1126:	45a8      	cmp	r8, r5
    1128:	bf28      	it	cs
    112a:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    112c:	4a0d      	ldr	r2, [pc, #52]	; (1164 <usb_d_ep_transfer+0x114>)
    112e:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    1132:	f996 200c 	ldrsb.w	r2, [r6, #12]
    1136:	2a00      	cmp	r2, #0
    1138:	db05      	blt.n	1146 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    113a:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    113c:	6821      	ldr	r1, [r4, #0]
    113e:	9101      	str	r1, [sp, #4]
    1140:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1142:	2500      	movs	r5, #0
    1144:	e7ca      	b.n	10dc <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    1146:	429d      	cmp	r5, r3
    1148:	bf94      	ite	ls
    114a:	2500      	movls	r5, #0
    114c:	2501      	movhi	r5, #1
    114e:	e7db      	b.n	1108 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    1150:	f06f 0011 	mvn.w	r0, #17
    1154:	e7a6      	b.n	10a4 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    1156:	2002      	movs	r0, #2
    1158:	e7a4      	b.n	10a4 <usb_d_ep_transfer+0x54>
    115a:	bf00      	nop
    115c:	00000c85 	.word	0x00000c85
    1160:	00002cf5 	.word	0x00002cf5
    1164:	200004b4 	.word	0x200004b4
    1168:	00002d03 	.word	0x00002d03
    116c:	00002a55 	.word	0x00002a55

00001170 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1170:	b538      	push	{r3, r4, r5, lr}
    1172:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1174:	b141      	cbz	r1, 1188 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1176:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1178:	bf0c      	ite	eq
    117a:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    117c:	2102      	movne	r1, #2
    117e:	4b13      	ldr	r3, [pc, #76]	; (11cc <usb_d_ep_halt+0x5c>)
    1180:	4798      	blx	r3
    1182:	4603      	mov	r3, r0
	}
}
    1184:	4618      	mov	r0, r3
    1186:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1188:	4b11      	ldr	r3, [pc, #68]	; (11d0 <usb_d_ep_halt+0x60>)
    118a:	4798      	blx	r3
	if (ep_index < 0) {
    118c:	1e05      	subs	r5, r0, #0
    118e:	db19      	blt.n	11c4 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1190:	2102      	movs	r1, #2
    1192:	4620      	mov	r0, r4
    1194:	4b0d      	ldr	r3, [pc, #52]	; (11cc <usb_d_ep_halt+0x5c>)
    1196:	4798      	blx	r3
    1198:	4603      	mov	r3, r0
    119a:	2800      	cmp	r0, #0
    119c:	d0f2      	beq.n	1184 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    119e:	2100      	movs	r1, #0
    11a0:	4620      	mov	r0, r4
    11a2:	4b0a      	ldr	r3, [pc, #40]	; (11cc <usb_d_ep_halt+0x5c>)
    11a4:	4798      	blx	r3
		if (rc < 0) {
    11a6:	1e03      	subs	r3, r0, #0
    11a8:	dbec      	blt.n	1184 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    11aa:	4b0a      	ldr	r3, [pc, #40]	; (11d4 <usb_d_ep_halt+0x64>)
    11ac:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    11b0:	2201      	movs	r2, #1
    11b2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    11b4:	2103      	movs	r1, #3
    11b6:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    11b8:	69db      	ldr	r3, [r3, #28]
    11ba:	2200      	movs	r2, #0
    11bc:	4620      	mov	r0, r4
    11be:	4798      	blx	r3
	return ERR_NONE;
    11c0:	2300      	movs	r3, #0
    11c2:	e7df      	b.n	1184 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    11c4:	f06f 0311 	mvn.w	r3, #17
    11c8:	e7dc      	b.n	1184 <usb_d_ep_halt+0x14>
    11ca:	bf00      	nop
    11cc:	000028ad 	.word	0x000028ad
    11d0:	00000c85 	.word	0x00000c85
    11d4:	200004b4 	.word	0x200004b4

000011d8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    11d8:	b538      	push	{r3, r4, r5, lr}
    11da:	460d      	mov	r5, r1
    11dc:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    11de:	4b0e      	ldr	r3, [pc, #56]	; (1218 <usb_d_ep_register_callback+0x40>)
    11e0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    11e2:	4b0e      	ldr	r3, [pc, #56]	; (121c <usb_d_ep_register_callback+0x44>)
    11e4:	2c00      	cmp	r4, #0
    11e6:	bf08      	it	eq
    11e8:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    11ea:	2800      	cmp	r0, #0
    11ec:	db13      	blt.n	1216 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    11ee:	2d01      	cmp	r5, #1
    11f0:	d008      	beq.n	1204 <usb_d_ep_register_callback+0x2c>
    11f2:	b115      	cbz	r5, 11fa <usb_d_ep_register_callback+0x22>
    11f4:	2d02      	cmp	r5, #2
    11f6:	d00a      	beq.n	120e <usb_d_ep_register_callback+0x36>
    11f8:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    11fa:	4b09      	ldr	r3, [pc, #36]	; (1220 <usb_d_ep_register_callback+0x48>)
    11fc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1200:	6144      	str	r4, [r0, #20]
		break;
    1202:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1204:	4b06      	ldr	r3, [pc, #24]	; (1220 <usb_d_ep_register_callback+0x48>)
    1206:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    120a:	6184      	str	r4, [r0, #24]
		break;
    120c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    120e:	4b04      	ldr	r3, [pc, #16]	; (1220 <usb_d_ep_register_callback+0x48>)
    1210:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1214:	61c4      	str	r4, [r0, #28]
    1216:	bd38      	pop	{r3, r4, r5, pc}
    1218:	00000c85 	.word	0x00000c85
    121c:	00000cc9 	.word	0x00000cc9
    1220:	200004b4 	.word	0x200004b4

00001224 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1224:	b900      	cbnz	r0, 1228 <assert+0x4>
		__asm("BKPT #0");
    1226:	be00      	bkpt	0x0000
    1228:	4770      	bx	lr
	...

0000122c <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    122c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    122e:	f013 0f01 	tst.w	r3, #1
    1232:	d11b      	bne.n	126c <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1234:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1236:	f013 0f03 	tst.w	r3, #3
    123a:	d1fb      	bne.n	1234 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    123c:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    123e:	f013 0f02 	tst.w	r3, #2
    1242:	d00d      	beq.n	1260 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    1244:	8803      	ldrh	r3, [r0, #0]
    1246:	f023 0302 	bic.w	r3, r3, #2
    124a:	041b      	lsls	r3, r3, #16
    124c:	0c1b      	lsrs	r3, r3, #16
    124e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1250:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1252:	f013 0f03 	tst.w	r3, #3
    1256:	d1fb      	bne.n	1250 <_adc_init+0x24>
    1258:	6b03      	ldr	r3, [r0, #48]	; 0x30
    125a:	f013 0f02 	tst.w	r3, #2
    125e:	d1fb      	bne.n	1258 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1260:	2301      	movs	r3, #1
    1262:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1264:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1266:	f013 0f03 	tst.w	r3, #3
    126a:	d1fb      	bne.n	1264 <_adc_init+0x38>
    126c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    126e:	f013 0f01 	tst.w	r3, #1
    1272:	d1fb      	bne.n	126c <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1274:	2316      	movs	r3, #22
    1276:	4a37      	ldr	r2, [pc, #220]	; (1354 <_adc_init+0x128>)
    1278:	fb03 2301 	mla	r3, r3, r1, r2
    127c:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    127e:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1280:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1282:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1286:	2b00      	cmp	r3, #0
    1288:	d1fa      	bne.n	1280 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    128a:	2316      	movs	r3, #22
    128c:	4a31      	ldr	r2, [pc, #196]	; (1354 <_adc_init+0x128>)
    128e:	fb03 2301 	mla	r3, r3, r1, r2
    1292:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1294:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1296:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1298:	f3c3 030b 	ubfx	r3, r3, #0, #12
    129c:	2b00      	cmp	r3, #0
    129e:	d1fa      	bne.n	1296 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    12a0:	2316      	movs	r3, #22
    12a2:	4a2c      	ldr	r2, [pc, #176]	; (1354 <_adc_init+0x128>)
    12a4:	fb03 2301 	mla	r3, r3, r1, r2
    12a8:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    12aa:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    12ac:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    12ae:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    12b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    12b6:	2b00      	cmp	r3, #0
    12b8:	d1fa      	bne.n	12b0 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    12ba:	2316      	movs	r3, #22
    12bc:	4a25      	ldr	r2, [pc, #148]	; (1354 <_adc_init+0x128>)
    12be:	fb03 2301 	mla	r3, r3, r1, r2
    12c2:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    12c4:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    12c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    12cc:	2b00      	cmp	r3, #0
    12ce:	d1fa      	bne.n	12c6 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    12d0:	2316      	movs	r3, #22
    12d2:	4a20      	ldr	r2, [pc, #128]	; (1354 <_adc_init+0x128>)
    12d4:	fb03 2301 	mla	r3, r3, r1, r2
    12d8:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    12da:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    12de:	f3c3 030b 	ubfx	r3, r3, #0, #12
    12e2:	2b00      	cmp	r3, #0
    12e4:	d1fa      	bne.n	12dc <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    12e6:	2316      	movs	r3, #22
    12e8:	4a1a      	ldr	r2, [pc, #104]	; (1354 <_adc_init+0x128>)
    12ea:	fb03 2301 	mla	r3, r3, r1, r2
    12ee:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    12f0:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    12f4:	f013 0f80 	tst.w	r3, #128	; 0x80
    12f8:	d1fb      	bne.n	12f2 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    12fa:	2316      	movs	r3, #22
    12fc:	4a15      	ldr	r2, [pc, #84]	; (1354 <_adc_init+0x128>)
    12fe:	fb03 2301 	mla	r3, r3, r1, r2
    1302:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1304:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1306:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1308:	f413 7f80 	tst.w	r3, #256	; 0x100
    130c:	d1fb      	bne.n	1306 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    130e:	2316      	movs	r3, #22
    1310:	4a10      	ldr	r2, [pc, #64]	; (1354 <_adc_init+0x128>)
    1312:	fb03 2301 	mla	r3, r3, r1, r2
    1316:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1318:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    131a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    131c:	f413 7f00 	tst.w	r3, #512	; 0x200
    1320:	d1fb      	bne.n	131a <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1322:	2316      	movs	r3, #22
    1324:	4a0b      	ldr	r2, [pc, #44]	; (1354 <_adc_init+0x128>)
    1326:	fb03 2301 	mla	r3, r3, r1, r2
    132a:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    132c:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    132e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1330:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1334:	d1fb      	bne.n	132e <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1336:	2216      	movs	r2, #22
    1338:	4b06      	ldr	r3, [pc, #24]	; (1354 <_adc_init+0x128>)
    133a:	fb02 3101 	mla	r1, r2, r1, r3
    133e:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1340:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1342:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1344:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1346:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1348:	f013 0f03 	tst.w	r3, #3
    134c:	d1fb      	bne.n	1346 <_adc_init+0x11a>

	return ERR_NONE;
}
    134e:	2000      	movs	r0, #0
    1350:	4770      	bx	lr
    1352:	bf00      	nop
    1354:	00003b9c 	.word	0x00003b9c

00001358 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1358:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    135c:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
		if (_adcs[i].number == n) {
    1360:	f3c0 2087 	ubfx	r0, r0, #10, #8
    1364:	b138      	cbz	r0, 1376 <_adc_get_regs+0x1e>
{
    1366:	b508      	push	{r3, lr}
	ASSERT(false);
    1368:	2288      	movs	r2, #136	; 0x88
    136a:	4904      	ldr	r1, [pc, #16]	; (137c <_adc_get_regs+0x24>)
    136c:	2000      	movs	r0, #0
    136e:	4b04      	ldr	r3, [pc, #16]	; (1380 <_adc_get_regs+0x28>)
    1370:	4798      	blx	r3
}
    1372:	2000      	movs	r0, #0
    1374:	bd08      	pop	{r3, pc}
    1376:	2000      	movs	r0, #0
    1378:	4770      	bx	lr
    137a:	bf00      	nop
    137c:	00003bb4 	.word	0x00003bb4
    1380:	00001225 	.word	0x00001225

00001384 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1384:	b538      	push	{r3, r4, r5, lr}
    1386:	460c      	mov	r4, r1
	ASSERT(device);
    1388:	4605      	mov	r5, r0
    138a:	22ce      	movs	r2, #206	; 0xce
    138c:	4907      	ldr	r1, [pc, #28]	; (13ac <_adc_sync_init+0x28>)
    138e:	3000      	adds	r0, #0
    1390:	bf18      	it	ne
    1392:	2001      	movne	r0, #1
    1394:	4b06      	ldr	r3, [pc, #24]	; (13b0 <_adc_sync_init+0x2c>)
    1396:	4798      	blx	r3

	device->hw = hw;
    1398:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    139a:	4620      	mov	r0, r4
    139c:	4b05      	ldr	r3, [pc, #20]	; (13b4 <_adc_sync_init+0x30>)
    139e:	4798      	blx	r3
    13a0:	4601      	mov	r1, r0
    13a2:	4620      	mov	r0, r4
    13a4:	4b04      	ldr	r3, [pc, #16]	; (13b8 <_adc_sync_init+0x34>)
    13a6:	4798      	blx	r3
}
    13a8:	bd38      	pop	{r3, r4, r5, pc}
    13aa:	bf00      	nop
    13ac:	00003bb4 	.word	0x00003bb4
    13b0:	00001225 	.word	0x00001225
    13b4:	00001359 	.word	0x00001359
    13b8:	0000122d 	.word	0x0000122d

000013bc <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    13bc:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    13be:	8813      	ldrh	r3, [r2, #0]
    13c0:	b29b      	uxth	r3, r3
    13c2:	f043 0302 	orr.w	r3, r3, #2
    13c6:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    13ca:	f013 0f03 	tst.w	r3, #3
    13ce:	d1fb      	bne.n	13c8 <_adc_sync_enable_channel+0xc>
}
    13d0:	4770      	bx	lr

000013d2 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    13d2:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    13d4:	88db      	ldrh	r3, [r3, #6]
    13d6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    13da:	2b03      	cmp	r3, #3
}
    13dc:	bf0c      	ite	eq
    13de:	2001      	moveq	r0, #1
    13e0:	2002      	movne	r0, #2
    13e2:	4770      	bx	lr

000013e4 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    13e4:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    13e6:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    13ea:	f000 0001 	and.w	r0, r0, #1
    13ee:	4770      	bx	lr

000013f0 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    13f0:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    13f2:	7d13      	ldrb	r3, [r2, #20]
    13f4:	f043 0302 	orr.w	r3, r3, #2
    13f8:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
    13fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1400:	2b00      	cmp	r3, #0
    1402:	d1fa      	bne.n	13fa <_adc_sync_convert+0xa>
}
    1404:	4770      	bx	lr

00001406 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    1406:	6803      	ldr	r3, [r0, #0]
	return ((Adc *)hw)->RESULT.reg;
    1408:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    140c:	b280      	uxth	r0, r0
    140e:	4770      	bx	lr

00001410 <_adc_sync_set_inputs>:
/**
 * \brief Set channels input sources
 */
void _adc_sync_set_inputs(struct _adc_sync_device *const device, const adc_pos_input_t pos_input,
                          const adc_neg_input_t neg_input, const uint8_t channel)
{
    1410:	b430      	push	{r4, r5}
	(void)channel;

	hri_adc_write_INPUTCTRL_MUXPOS_bf(device->hw, pos_input);
    1412:	6804      	ldr	r4, [r0, #0]
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    1414:	88a5      	ldrh	r5, [r4, #4]
	tmp &= ~ADC_INPUTCTRL_MUXPOS_Msk;
    1416:	f025 051f 	bic.w	r5, r5, #31
    141a:	042d      	lsls	r5, r5, #16
    141c:	0c2d      	lsrs	r5, r5, #16
	tmp |= ADC_INPUTCTRL_MUXPOS(data);
    141e:	f001 011f 	and.w	r1, r1, #31
    1422:	430d      	orrs	r5, r1
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    1424:	80a5      	strh	r5, [r4, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1426:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1428:	f3c3 030b 	ubfx	r3, r3, #0, #12
    142c:	2b00      	cmp	r3, #0
    142e:	d1fa      	bne.n	1426 <_adc_sync_set_inputs+0x16>
	hri_adc_write_INPUTCTRL_MUXNEG_bf(device->hw, neg_input);
    1430:	6801      	ldr	r1, [r0, #0]
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    1432:	888b      	ldrh	r3, [r1, #4]
	tmp &= ~ADC_INPUTCTRL_MUXNEG_Msk;
    1434:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    1438:	041b      	lsls	r3, r3, #16
    143a:	0c1b      	lsrs	r3, r3, #16
	tmp |= ADC_INPUTCTRL_MUXNEG(data);
    143c:	0212      	lsls	r2, r2, #8
    143e:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
    1442:	4313      	orrs	r3, r2
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    1444:	808b      	strh	r3, [r1, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1446:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1448:	f3c3 030b 	ubfx	r3, r3, #0, #12
    144c:	2b00      	cmp	r3, #0
    144e:	d1fa      	bne.n	1446 <_adc_sync_set_inputs+0x36>
}
    1450:	bc30      	pop	{r4, r5}
    1452:	4770      	bx	lr

00001454 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1454:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    1458:	fb03 f000 	mul.w	r0, r3, r0
    145c:	4770      	bx	lr
	...

00001460 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1460:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1462:	4a08      	ldr	r2, [pc, #32]	; (1484 <_init_chip+0x24>)
    1464:	8813      	ldrh	r3, [r2, #0]
    1466:	b29b      	uxth	r3, r3
    1468:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    146a:	4b07      	ldr	r3, [pc, #28]	; (1488 <_init_chip+0x28>)
    146c:	4798      	blx	r3
	_oscctrl_init_sources();
    146e:	4b07      	ldr	r3, [pc, #28]	; (148c <_init_chip+0x2c>)
    1470:	4798      	blx	r3
	_mclk_init();
    1472:	4b07      	ldr	r3, [pc, #28]	; (1490 <_init_chip+0x30>)
    1474:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1476:	4b07      	ldr	r3, [pc, #28]	; (1494 <_init_chip+0x34>)
    1478:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    147a:	f640 70ff 	movw	r0, #4095	; 0xfff
    147e:	4b06      	ldr	r3, [pc, #24]	; (1498 <_init_chip+0x38>)
    1480:	4798      	blx	r3
    1482:	bd08      	pop	{r3, pc}
    1484:	41004000 	.word	0x41004000
    1488:	00001505 	.word	0x00001505
    148c:	00001525 	.word	0x00001525
    1490:	000014f9 	.word	0x000014f9
    1494:	00001541 	.word	0x00001541
    1498:	0000149d 	.word	0x0000149d

0000149c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    149c:	f010 0f01 	tst.w	r0, #1
    14a0:	d008      	beq.n	14b4 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    14a2:	4a11      	ldr	r2, [pc, #68]	; (14e8 <_gclk_init_generators_by_fref+0x4c>)
    14a4:	4b11      	ldr	r3, [pc, #68]	; (14ec <_gclk_init_generators_by_fref+0x50>)
    14a6:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    14a8:	4619      	mov	r1, r3
    14aa:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    14ae:	684b      	ldr	r3, [r1, #4]
    14b0:	4213      	tst	r3, r2
    14b2:	d1fc      	bne.n	14ae <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    14b4:	f010 0f08 	tst.w	r0, #8
    14b8:	d008      	beq.n	14cc <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    14ba:	4a0d      	ldr	r2, [pc, #52]	; (14f0 <_gclk_init_generators_by_fref+0x54>)
    14bc:	4b0b      	ldr	r3, [pc, #44]	; (14ec <_gclk_init_generators_by_fref+0x50>)
    14be:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    14c0:	4619      	mov	r1, r3
    14c2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    14c6:	684b      	ldr	r3, [r1, #4]
    14c8:	4213      	tst	r3, r2
    14ca:	d1fc      	bne.n	14c6 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    14cc:	f010 0f10 	tst.w	r0, #16
    14d0:	d008      	beq.n	14e4 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    14d2:	4a08      	ldr	r2, [pc, #32]	; (14f4 <_gclk_init_generators_by_fref+0x58>)
    14d4:	4b05      	ldr	r3, [pc, #20]	; (14ec <_gclk_init_generators_by_fref+0x50>)
    14d6:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    14d8:	4619      	mov	r1, r3
    14da:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    14de:	684b      	ldr	r3, [r1, #4]
    14e0:	4213      	tst	r3, r2
    14e2:	d1fc      	bne.n	14de <_gclk_init_generators_by_fref+0x42>
    14e4:	4770      	bx	lr
    14e6:	bf00      	nop
    14e8:	00010101 	.word	0x00010101
    14ec:	40001c00 	.word	0x40001c00
    14f0:	00010105 	.word	0x00010105
    14f4:	00010106 	.word	0x00010106

000014f8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    14f8:	2201      	movs	r2, #1
    14fa:	4b01      	ldr	r3, [pc, #4]	; (1500 <_mclk_init+0x8>)
    14fc:	715a      	strb	r2, [r3, #5]
    14fe:	4770      	bx	lr
    1500:	40000800 	.word	0x40000800

00001504 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1504:	4b06      	ldr	r3, [pc, #24]	; (1520 <_osc32kctrl_init_sources+0x1c>)
    1506:	f242 028e 	movw	r2, #8334	; 0x208e
    150a:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    150c:	2200      	movs	r2, #0
    150e:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1510:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1512:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1514:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1518:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    151a:	2201      	movs	r2, #1
    151c:	741a      	strb	r2, [r3, #16]
    151e:	4770      	bx	lr
    1520:	40001400 	.word	0x40001400

00001524 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1524:	4a04      	ldr	r2, [pc, #16]	; (1538 <_oscctrl_init_sources+0x14>)
    1526:	4b05      	ldr	r3, [pc, #20]	; (153c <_oscctrl_init_sources+0x18>)
    1528:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    152a:	461a      	mov	r2, r3
    152c:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    152e:	f013 0f02 	tst.w	r3, #2
    1532:	d0fb      	beq.n	152c <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1534:	4770      	bx	lr
    1536:	bf00      	nop
    1538:	03002606 	.word	0x03002606
    153c:	40001000 	.word	0x40001000

00001540 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1540:	4a36      	ldr	r2, [pc, #216]	; (161c <_oscctrl_init_referenced_generators+0xdc>)
    1542:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1544:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1548:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    154c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    154e:	4611      	mov	r1, r2
    1550:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1554:	684b      	ldr	r3, [r1, #4]
    1556:	4213      	tst	r3, r2
    1558:	d1fc      	bne.n	1554 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    155a:	4a30      	ldr	r2, [pc, #192]	; (161c <_oscctrl_init_referenced_generators+0xdc>)
    155c:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    155e:	f013 0f04 	tst.w	r3, #4
    1562:	d1fb      	bne.n	155c <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1564:	4b2e      	ldr	r3, [pc, #184]	; (1620 <_oscctrl_init_referenced_generators+0xe0>)
    1566:	2200      	movs	r2, #0
    1568:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    156a:	4a2e      	ldr	r2, [pc, #184]	; (1624 <_oscctrl_init_referenced_generators+0xe4>)
    156c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    156e:	461a      	mov	r2, r3
    1570:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1574:	f013 0f10 	tst.w	r3, #16
    1578:	d1fa      	bne.n	1570 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    157a:	2200      	movs	r2, #0
    157c:	4b28      	ldr	r3, [pc, #160]	; (1620 <_oscctrl_init_referenced_generators+0xe0>)
    157e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1582:	461a      	mov	r2, r3
    1584:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1588:	f013 0f04 	tst.w	r3, #4
    158c:	d1fa      	bne.n	1584 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    158e:	2202      	movs	r2, #2
    1590:	4b23      	ldr	r3, [pc, #140]	; (1620 <_oscctrl_init_referenced_generators+0xe0>)
    1592:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1594:	461a      	mov	r2, r3
    1596:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    159a:	f013 0f02 	tst.w	r3, #2
    159e:	d1fa      	bne.n	1596 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    15a0:	4b1f      	ldr	r3, [pc, #124]	; (1620 <_oscctrl_init_referenced_generators+0xe0>)
    15a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    15a4:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    15a6:	461a      	mov	r2, r3
    15a8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    15ac:	f013 0f08 	tst.w	r3, #8
    15b0:	d1fa      	bne.n	15a8 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    15b2:	2219      	movs	r2, #25
    15b4:	4b1a      	ldr	r3, [pc, #104]	; (1620 <_oscctrl_init_referenced_generators+0xe0>)
    15b6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    15ba:	461a      	mov	r2, r3
    15bc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    15c0:	f013 0f04 	tst.w	r3, #4
    15c4:	d1fa      	bne.n	15bc <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    15c6:	4b16      	ldr	r3, [pc, #88]	; (1620 <_oscctrl_init_referenced_generators+0xe0>)
    15c8:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    15cc:	f013 0f01 	tst.w	r3, #1
    15d0:	d01d      	beq.n	160e <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    15d2:	4a13      	ldr	r2, [pc, #76]	; (1620 <_oscctrl_init_referenced_generators+0xe0>)
    15d4:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    15d6:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    15da:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    15de:	d1f9      	bne.n	15d4 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    15e0:	4a0e      	ldr	r2, [pc, #56]	; (161c <_oscctrl_init_referenced_generators+0xdc>)
    15e2:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    15e4:	2b00      	cmp	r3, #0
    15e6:	d1fc      	bne.n	15e2 <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    15e8:	4a0c      	ldr	r2, [pc, #48]	; (161c <_oscctrl_init_referenced_generators+0xdc>)
    15ea:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    15ec:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    15f0:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    15f4:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15f6:	4611      	mov	r1, r2
    15f8:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    15fc:	684b      	ldr	r3, [r1, #4]
    15fe:	4213      	tst	r3, r2
    1600:	d1fc      	bne.n	15fc <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1602:	4a06      	ldr	r2, [pc, #24]	; (161c <_oscctrl_init_referenced_generators+0xdc>)
    1604:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1606:	f013 0f04 	tst.w	r3, #4
    160a:	d1fb      	bne.n	1604 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    160c:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    160e:	4a04      	ldr	r2, [pc, #16]	; (1620 <_oscctrl_init_referenced_generators+0xe0>)
    1610:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1612:	f413 7f80 	tst.w	r3, #256	; 0x100
    1616:	d0fb      	beq.n	1610 <_oscctrl_init_referenced_generators+0xd0>
    1618:	e7e2      	b.n	15e0 <_oscctrl_init_referenced_generators+0xa0>
    161a:	bf00      	nop
    161c:	40001c00 	.word	0x40001c00
    1620:	40001000 	.word	0x40001000
    1624:	0401bb80 	.word	0x0401bb80

00001628 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1628:	b470      	push	{r4, r5, r6}
    162a:	b089      	sub	sp, #36	; 0x24
    162c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    162e:	466c      	mov	r4, sp
    1630:	4d0d      	ldr	r5, [pc, #52]	; (1668 <_sercom_get_hardware_index+0x40>)
    1632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1636:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    163a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    163e:	9b00      	ldr	r3, [sp, #0]
    1640:	42b3      	cmp	r3, r6
    1642:	d00d      	beq.n	1660 <_sercom_get_hardware_index+0x38>
    1644:	4631      	mov	r1, r6
    1646:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1648:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    164a:	f853 2b04 	ldr.w	r2, [r3], #4
    164e:	428a      	cmp	r2, r1
    1650:	d007      	beq.n	1662 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1652:	3001      	adds	r0, #1
    1654:	2808      	cmp	r0, #8
    1656:	d1f8      	bne.n	164a <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1658:	2000      	movs	r0, #0
}
    165a:	b009      	add	sp, #36	; 0x24
    165c:	bc70      	pop	{r4, r5, r6}
    165e:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1660:	2000      	movs	r0, #0
			return i;
    1662:	b2c0      	uxtb	r0, r0
    1664:	e7f9      	b.n	165a <_sercom_get_hardware_index+0x32>
    1666:	bf00      	nop
    1668:	00003bcc 	.word	0x00003bcc

0000166c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    166c:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    166e:	4b03      	ldr	r3, [pc, #12]	; (167c <_sercom_get_irq_num+0x10>)
    1670:	4798      	blx	r3
    1672:	0080      	lsls	r0, r0, #2
    1674:	302e      	adds	r0, #46	; 0x2e
}
    1676:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    167a:	bd08      	pop	{r3, pc}
    167c:	00001629 	.word	0x00001629

00001680 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    1680:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    1682:	6802      	ldr	r2, [r0, #0]
	return tmp;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1684:	7e11      	ldrb	r1, [r2, #24]
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    1686:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    1688:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    168a:	f013 0f01 	tst.w	r3, #1
    168e:	d109      	bne.n	16a4 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    1690:	f013 0f04 	tst.w	r3, #4
    1694:	d109      	bne.n	16aa <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    1696:	f013 0f02 	tst.w	r3, #2
    169a:	d109      	bne.n	16b0 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    169c:	f013 0f80 	tst.w	r3, #128	; 0x80
    16a0:	d10b      	bne.n	16ba <_spi_handler+0x3a>
    16a2:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    16a4:	6883      	ldr	r3, [r0, #8]
    16a6:	4798      	blx	r3
    16a8:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    16aa:	68c3      	ldr	r3, [r0, #12]
    16ac:	4798      	blx	r3
    16ae:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    16b0:	2302      	movs	r3, #2
    16b2:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    16b4:	6903      	ldr	r3, [r0, #16]
    16b6:	4798      	blx	r3
    16b8:	bd08      	pop	{r3, pc}
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    16ba:	2304      	movs	r3, #4
    16bc:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    16be:	2380      	movs	r3, #128	; 0x80
    16c0:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    16c2:	6943      	ldr	r3, [r0, #20]
    16c4:	f06f 0112 	mvn.w	r1, #18
    16c8:	4798      	blx	r3
	}
}
    16ca:	e7ea      	b.n	16a2 <_spi_handler+0x22>

000016cc <SERCOM0_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_0_Handler(void)
{
    16cc:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    16ce:	4b02      	ldr	r3, [pc, #8]	; (16d8 <SERCOM0_0_Handler+0xc>)
    16d0:	6818      	ldr	r0, [r3, #0]
    16d2:	4b02      	ldr	r3, [pc, #8]	; (16dc <SERCOM0_0_Handler+0x10>)
    16d4:	4798      	blx	r3
    16d6:	bd08      	pop	{r3, pc}
    16d8:	20000534 	.word	0x20000534
    16dc:	00001681 	.word	0x00001681

000016e0 <SERCOM0_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_1_Handler(void)
{
    16e0:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    16e2:	4b02      	ldr	r3, [pc, #8]	; (16ec <SERCOM0_1_Handler+0xc>)
    16e4:	6818      	ldr	r0, [r3, #0]
    16e6:	4b02      	ldr	r3, [pc, #8]	; (16f0 <SERCOM0_1_Handler+0x10>)
    16e8:	4798      	blx	r3
    16ea:	bd08      	pop	{r3, pc}
    16ec:	20000534 	.word	0x20000534
    16f0:	00001681 	.word	0x00001681

000016f4 <SERCOM0_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_2_Handler(void)
{
    16f4:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    16f6:	4b02      	ldr	r3, [pc, #8]	; (1700 <SERCOM0_2_Handler+0xc>)
    16f8:	6818      	ldr	r0, [r3, #0]
    16fa:	4b02      	ldr	r3, [pc, #8]	; (1704 <SERCOM0_2_Handler+0x10>)
    16fc:	4798      	blx	r3
    16fe:	bd08      	pop	{r3, pc}
    1700:	20000534 	.word	0x20000534
    1704:	00001681 	.word	0x00001681

00001708 <SERCOM0_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
    1708:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    170a:	4b02      	ldr	r3, [pc, #8]	; (1714 <SERCOM0_3_Handler+0xc>)
    170c:	6818      	ldr	r0, [r3, #0]
    170e:	4b02      	ldr	r3, [pc, #8]	; (1718 <SERCOM0_3_Handler+0x10>)
    1710:	4798      	blx	r3
    1712:	bd08      	pop	{r3, pc}
    1714:	20000534 	.word	0x20000534
    1718:	00001681 	.word	0x00001681

0000171c <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    171c:	b538      	push	{r3, r4, r5, lr}
    171e:	4605      	mov	r5, r0
    1720:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1722:	4608      	mov	r0, r1
    1724:	4b36      	ldr	r3, [pc, #216]	; (1800 <_spi_m_sync_init+0xe4>)
    1726:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    1728:	b160      	cbz	r0, 1744 <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    172a:	2d00      	cmp	r5, #0
    172c:	d055      	beq.n	17da <_spi_m_sync_init+0xbe>
    172e:	f640 1273 	movw	r2, #2419	; 0x973
    1732:	4934      	ldr	r1, [pc, #208]	; (1804 <_spi_m_sync_init+0xe8>)
    1734:	1c20      	adds	r0, r4, #0
    1736:	bf18      	it	ne
    1738:	2001      	movne	r0, #1
    173a:	4b33      	ldr	r3, [pc, #204]	; (1808 <_spi_m_sync_init+0xec>)
    173c:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    173e:	f06f 000c 	mvn.w	r0, #12
    1742:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1744:	2d00      	cmp	r5, #0
    1746:	d151      	bne.n	17ec <_spi_m_sync_init+0xd0>
    1748:	f640 1273 	movw	r2, #2419	; 0x973
    174c:	492d      	ldr	r1, [pc, #180]	; (1804 <_spi_m_sync_init+0xe8>)
    174e:	2000      	movs	r0, #0
    1750:	4b2d      	ldr	r3, [pc, #180]	; (1808 <_spi_m_sync_init+0xec>)
    1752:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1754:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1756:	f013 0f01 	tst.w	r3, #1
    175a:	d119      	bne.n	1790 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    175c:	69e3      	ldr	r3, [r4, #28]
    175e:	f013 0f03 	tst.w	r3, #3
    1762:	d1fb      	bne.n	175c <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1764:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1766:	f013 0f02 	tst.w	r3, #2
    176a:	d00b      	beq.n	1784 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    176c:	6823      	ldr	r3, [r4, #0]
    176e:	f023 0302 	bic.w	r3, r3, #2
    1772:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1774:	69e3      	ldr	r3, [r4, #28]
    1776:	f013 0f03 	tst.w	r3, #3
    177a:	d1fb      	bne.n	1774 <_spi_m_sync_init+0x58>
    177c:	69e3      	ldr	r3, [r4, #28]
    177e:	f013 0f02 	tst.w	r3, #2
    1782:	d1fb      	bne.n	177c <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1784:	230d      	movs	r3, #13
    1786:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1788:	69e3      	ldr	r3, [r4, #28]
    178a:	f013 0f03 	tst.w	r3, #3
    178e:	d1fb      	bne.n	1788 <_spi_m_sync_init+0x6c>
    1790:	69e3      	ldr	r3, [r4, #28]
    1792:	f013 0f01 	tst.w	r3, #1
    1796:	d1fb      	bne.n	1790 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1798:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    179a:	f640 1206 	movw	r2, #2310	; 0x906
    179e:	4919      	ldr	r1, [pc, #100]	; (1804 <_spi_m_sync_init+0xe8>)
    17a0:	1c20      	adds	r0, r4, #0
    17a2:	bf18      	it	ne
    17a4:	2001      	movne	r0, #1
    17a6:	4b18      	ldr	r3, [pc, #96]	; (1808 <_spi_m_sync_init+0xec>)
    17a8:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    17aa:	4b18      	ldr	r3, [pc, #96]	; (180c <_spi_m_sync_init+0xf0>)
    17ac:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    17ae:	69e3      	ldr	r3, [r4, #28]
    17b0:	f013 0f03 	tst.w	r3, #3
    17b4:	d1fb      	bne.n	17ae <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    17b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    17ba:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    17bc:	69e3      	ldr	r3, [r4, #28]
    17be:	f013 0f17 	tst.w	r3, #23
    17c2:	d1fb      	bne.n	17bc <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    17c4:	2377      	movs	r3, #119	; 0x77
    17c6:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    17c8:	2000      	movs	r0, #0
    17ca:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    17ce:	2301      	movs	r3, #1
    17d0:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    17d2:	f240 13ff 	movw	r3, #511	; 0x1ff
    17d6:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    17d8:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    17da:	f640 1273 	movw	r2, #2419	; 0x973
    17de:	4909      	ldr	r1, [pc, #36]	; (1804 <_spi_m_sync_init+0xe8>)
    17e0:	2000      	movs	r0, #0
    17e2:	4b09      	ldr	r3, [pc, #36]	; (1808 <_spi_m_sync_init+0xec>)
    17e4:	4798      	blx	r3
		return ERR_INVALID_ARG;
    17e6:	f06f 000c 	mvn.w	r0, #12
    17ea:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    17ec:	f640 1273 	movw	r2, #2419	; 0x973
    17f0:	4904      	ldr	r1, [pc, #16]	; (1804 <_spi_m_sync_init+0xe8>)
    17f2:	1c20      	adds	r0, r4, #0
    17f4:	bf18      	it	ne
    17f6:	2001      	movne	r0, #1
    17f8:	4b03      	ldr	r3, [pc, #12]	; (1808 <_spi_m_sync_init+0xec>)
    17fa:	4798      	blx	r3
    17fc:	e7aa      	b.n	1754 <_spi_m_sync_init+0x38>
    17fe:	bf00      	nop
    1800:	00001629 	.word	0x00001629
    1804:	00003c04 	.word	0x00003c04
    1808:	00001225 	.word	0x00001225
    180c:	0020000c 	.word	0x0020000c

00001810 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    1810:	b538      	push	{r3, r4, r5, lr}
    1812:	4604      	mov	r4, r0
    1814:	460d      	mov	r5, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    1816:	4b15      	ldr	r3, [pc, #84]	; (186c <_spi_m_async_init+0x5c>)
    1818:	4798      	blx	r3

	if (rc < 0) {
    181a:	2800      	cmp	r0, #0
    181c:	db25      	blt.n	186a <_spi_m_async_init+0x5a>
	if (hw == SERCOM0) {
    181e:	4b14      	ldr	r3, [pc, #80]	; (1870 <_spi_m_async_init+0x60>)
    1820:	429d      	cmp	r5, r3
		_sercom0_dev = (struct _spi_async_dev *)dev;
    1822:	bf04      	itt	eq
    1824:	4b13      	ldreq	r3, [pc, #76]	; (1874 <_spi_m_async_init+0x64>)
    1826:	601c      	streq	r4, [r3, #0]
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    1828:	2300      	movs	r3, #0
    182a:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    182c:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    182e:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    1830:	4628      	mov	r0, r5
    1832:	4b11      	ldr	r3, [pc, #68]	; (1878 <_spi_m_async_init+0x68>)
    1834:	4798      	blx	r3
    1836:	1d01      	adds	r1, r0, #4
    1838:	b2c9      	uxtb	r1, r1
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    183a:	2401      	movs	r4, #1
    183c:	f000 021f 	and.w	r2, r0, #31
    1840:	fa04 f202 	lsl.w	r2, r4, r2
    1844:	0943      	lsrs	r3, r0, #5
    1846:	009b      	lsls	r3, r3, #2
    1848:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    184c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1854:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1858:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    185c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq);
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
		irq++;
    1860:	3001      	adds	r0, #1
    1862:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    1864:	4281      	cmp	r1, r0
    1866:	d1e9      	bne.n	183c <_spi_m_async_init+0x2c>
	}

	return ERR_NONE;
    1868:	2000      	movs	r0, #0
}
    186a:	bd38      	pop	{r3, r4, r5, pc}
    186c:	0000171d 	.word	0x0000171d
    1870:	40003000 	.word	0x40003000
    1874:	20000534 	.word	0x20000534
    1878:	0000166d 	.word	0x0000166d

0000187c <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    187c:	b538      	push	{r3, r4, r5, lr}
    187e:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    1880:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    1882:	b160      	cbz	r0, 189e <_spi_m_async_enable_tx+0x22>
    1884:	1c20      	adds	r0, r4, #0
    1886:	bf18      	it	ne
    1888:	2001      	movne	r0, #1
    188a:	f640 3203 	movw	r2, #2819	; 0xb03
    188e:	4906      	ldr	r1, [pc, #24]	; (18a8 <_spi_m_async_enable_tx+0x2c>)
    1890:	4b06      	ldr	r3, [pc, #24]	; (18ac <_spi_m_async_enable_tx+0x30>)
    1892:	4798      	blx	r3

	if (state) {
    1894:	b92d      	cbnz	r5, 18a2 <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    1896:	2301      	movs	r3, #1
    1898:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    189a:	2000      	movs	r0, #0
    189c:	bd38      	pop	{r3, r4, r5, pc}
    189e:	2000      	movs	r0, #0
    18a0:	e7f3      	b.n	188a <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    18a2:	2301      	movs	r3, #1
    18a4:	75a3      	strb	r3, [r4, #22]
    18a6:	e7f8      	b.n	189a <_spi_m_async_enable_tx+0x1e>
    18a8:	00003c04 	.word	0x00003c04
    18ac:	00001225 	.word	0x00001225

000018b0 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    18b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18b2:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    18b4:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
    18b6:	4e0c      	ldr	r6, [pc, #48]	; (18e8 <_spi_m_async_enable_rx+0x38>)
    18b8:	f640 3217 	movw	r2, #2839	; 0xb17
    18bc:	4631      	mov	r1, r6
    18be:	3000      	adds	r0, #0
    18c0:	bf18      	it	ne
    18c2:	2001      	movne	r0, #1
    18c4:	4d09      	ldr	r5, [pc, #36]	; (18ec <_spi_m_async_enable_rx+0x3c>)
    18c6:	47a8      	blx	r5
	ASSERT(hw);
    18c8:	f640 3218 	movw	r2, #2840	; 0xb18
    18cc:	4631      	mov	r1, r6
    18ce:	1c20      	adds	r0, r4, #0
    18d0:	bf18      	it	ne
    18d2:	2001      	movne	r0, #1
    18d4:	47a8      	blx	r5

	if (state) {
    18d6:	b91f      	cbnz	r7, 18e0 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    18d8:	2304      	movs	r3, #4
    18da:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    18dc:	2000      	movs	r0, #0
    18de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    18e0:	2304      	movs	r3, #4
    18e2:	75a3      	strb	r3, [r4, #22]
    18e4:	e7fa      	b.n	18dc <_spi_m_async_enable_rx+0x2c>
    18e6:	bf00      	nop
    18e8:	00003c04 	.word	0x00003c04
    18ec:	00001225 	.word	0x00001225

000018f0 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    18f0:	b538      	push	{r3, r4, r5, lr}
    18f2:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    18f4:	4604      	mov	r4, r0
    18f6:	b170      	cbz	r0, 1916 <_spi_m_async_enable_tx_complete+0x26>
    18f8:	6800      	ldr	r0, [r0, #0]
    18fa:	3000      	adds	r0, #0
    18fc:	bf18      	it	ne
    18fe:	2001      	movne	r0, #1
    1900:	f640 322a 	movw	r2, #2858	; 0xb2a
    1904:	4907      	ldr	r1, [pc, #28]	; (1924 <_spi_m_async_enable_tx_complete+0x34>)
    1906:	4b08      	ldr	r3, [pc, #32]	; (1928 <_spi_m_async_enable_tx_complete+0x38>)
    1908:	4798      	blx	r3

	if (state) {
    190a:	b935      	cbnz	r5, 191a <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    190c:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    190e:	2202      	movs	r2, #2
    1910:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    1912:	2000      	movs	r0, #0
    1914:	bd38      	pop	{r3, r4, r5, pc}
    1916:	2000      	movs	r0, #0
    1918:	e7f2      	b.n	1900 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    191a:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    191c:	2202      	movs	r2, #2
    191e:	759a      	strb	r2, [r3, #22]
    1920:	e7f7      	b.n	1912 <_spi_m_async_enable_tx_complete+0x22>
    1922:	bf00      	nop
    1924:	00003c04 	.word	0x00003c04
    1928:	00001225 	.word	0x00001225

0000192c <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    192c:	b538      	push	{r3, r4, r5, lr}
    192e:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    1930:	4604      	mov	r4, r0
    1932:	b160      	cbz	r0, 194e <_spi_m_async_write_one+0x22>
    1934:	6800      	ldr	r0, [r0, #0]
    1936:	3000      	adds	r0, #0
    1938:	bf18      	it	ne
    193a:	2001      	movne	r0, #1
    193c:	f640 323c 	movw	r2, #2876	; 0xb3c
    1940:	4904      	ldr	r1, [pc, #16]	; (1954 <_spi_m_async_write_one+0x28>)
    1942:	4b05      	ldr	r3, [pc, #20]	; (1958 <_spi_m_async_write_one+0x2c>)
    1944:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    1946:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1948:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    194a:	2000      	movs	r0, #0
    194c:	bd38      	pop	{r3, r4, r5, pc}
    194e:	2000      	movs	r0, #0
    1950:	e7f4      	b.n	193c <_spi_m_async_write_one+0x10>
    1952:	bf00      	nop
    1954:	00003c04 	.word	0x00003c04
    1958:	00001225 	.word	0x00001225

0000195c <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    195c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    195e:	4604      	mov	r4, r0
    1960:	b160      	cbz	r0, 197c <_spi_m_async_read_one+0x20>
    1962:	6800      	ldr	r0, [r0, #0]
    1964:	3000      	adds	r0, #0
    1966:	bf18      	it	ne
    1968:	2001      	movne	r0, #1
    196a:	f640 3257 	movw	r2, #2903	; 0xb57
    196e:	4904      	ldr	r1, [pc, #16]	; (1980 <_spi_m_async_read_one+0x24>)
    1970:	4b04      	ldr	r3, [pc, #16]	; (1984 <_spi_m_async_read_one+0x28>)
    1972:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    1974:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    1976:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1978:	b280      	uxth	r0, r0
    197a:	bd10      	pop	{r4, pc}
    197c:	2000      	movs	r0, #0
    197e:	e7f4      	b.n	196a <_spi_m_async_read_one+0xe>
    1980:	00003c04 	.word	0x00003c04
    1984:	00001225 	.word	0x00001225

00001988 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    1988:	b570      	push	{r4, r5, r6, lr}
    198a:	460d      	mov	r5, r1
    198c:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    198e:	4604      	mov	r4, r0
    1990:	b168      	cbz	r0, 19ae <_spi_m_async_register_callback+0x26>
    1992:	2903      	cmp	r1, #3
    1994:	bf8c      	ite	hi
    1996:	2000      	movhi	r0, #0
    1998:	2001      	movls	r0, #1
    199a:	f44f 6237 	mov.w	r2, #2928	; 0xb70
    199e:	4905      	ldr	r1, [pc, #20]	; (19b4 <_spi_m_async_register_callback+0x2c>)
    19a0:	4b05      	ldr	r3, [pc, #20]	; (19b8 <_spi_m_async_register_callback+0x30>)
    19a2:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    19a4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    19a8:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    19aa:	2000      	movs	r0, #0
    19ac:	bd70      	pop	{r4, r5, r6, pc}
    19ae:	2000      	movs	r0, #0
    19b0:	e7f3      	b.n	199a <_spi_m_async_register_callback+0x12>
    19b2:	bf00      	nop
    19b4:	00003c04 	.word	0x00003c04
    19b8:	00001225 	.word	0x00001225

000019bc <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    19bc:	4b03      	ldr	r3, [pc, #12]	; (19cc <_delay_init+0x10>)
    19be:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    19c2:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    19c4:	2205      	movs	r2, #5
    19c6:	601a      	str	r2, [r3, #0]
    19c8:	4770      	bx	lr
    19ca:	bf00      	nop
    19cc:	e000e010 	.word	0xe000e010

000019d0 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    19d0:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    19d2:	b303      	cbz	r3, 1a16 <_delay_cycles+0x46>
{
    19d4:	b430      	push	{r4, r5}
    19d6:	1e5d      	subs	r5, r3, #1
    19d8:	b2ed      	uxtb	r5, r5
	while (n--) {
    19da:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    19dc:	4a12      	ldr	r2, [pc, #72]	; (1a28 <_delay_cycles+0x58>)
    19de:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    19e2:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    19e4:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    19e6:	6813      	ldr	r3, [r2, #0]
    19e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    19ec:	d0fb      	beq.n	19e6 <_delay_cycles+0x16>
	while (n--) {
    19ee:	3801      	subs	r0, #1
    19f0:	b2c0      	uxtb	r0, r0
    19f2:	28ff      	cmp	r0, #255	; 0xff
    19f4:	d1f5      	bne.n	19e2 <_delay_cycles+0x12>
    19f6:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    19fa:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    19fe:	3101      	adds	r1, #1
    1a00:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1a02:	4b09      	ldr	r3, [pc, #36]	; (1a28 <_delay_cycles+0x58>)
    1a04:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1a06:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1a08:	461a      	mov	r2, r3
    1a0a:	6813      	ldr	r3, [r2, #0]
    1a0c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1a10:	d0fb      	beq.n	1a0a <_delay_cycles+0x3a>
		;
}
    1a12:	bc30      	pop	{r4, r5}
    1a14:	4770      	bx	lr
	SysTick->LOAD = buf;
    1a16:	4b04      	ldr	r3, [pc, #16]	; (1a28 <_delay_cycles+0x58>)
    1a18:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1a1a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1a1c:	461a      	mov	r2, r3
    1a1e:	6813      	ldr	r3, [r2, #0]
    1a20:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1a24:	d0fb      	beq.n	1a1e <_delay_cycles+0x4e>
    1a26:	4770      	bx	lr
    1a28:	e000e010 	.word	0xe000e010

00001a2c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1a2c:	2000      	movs	r0, #0
    1a2e:	4770      	bx	lr

00001a30 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1a30:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1a32:	7c83      	ldrb	r3, [r0, #18]
    1a34:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1a38:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    1a3a:	f002 0107 	and.w	r1, r2, #7
    1a3e:	2901      	cmp	r1, #1
    1a40:	d00b      	beq.n	1a5a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1a42:	015a      	lsls	r2, r3, #5
    1a44:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1a48:	2110      	movs	r1, #16
    1a4a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1a4e:	015b      	lsls	r3, r3, #5
    1a50:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1a54:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    1a58:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    1a5a:	f012 0f40 	tst.w	r2, #64	; 0x40
    1a5e:	d00c      	beq.n	1a7a <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    1a60:	7cc2      	ldrb	r2, [r0, #19]
    1a62:	f36f 1286 	bfc	r2, #6, #1
    1a66:	74c2      	strb	r2, [r0, #19]
    1a68:	015a      	lsls	r2, r3, #5
    1a6a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1a6e:	2180      	movs	r1, #128	; 0x80
    1a70:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1a74:	2140      	movs	r1, #64	; 0x40
    1a76:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    1a7a:	7cc2      	ldrb	r2, [r0, #19]
    1a7c:	f36f 02c3 	bfc	r2, #3, #1
    1a80:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1a82:	4909      	ldr	r1, [pc, #36]	; (1aa8 <_usb_d_dev_handle_setup+0x78>)
    1a84:	015a      	lsls	r2, r3, #5
    1a86:	188c      	adds	r4, r1, r2
    1a88:	2500      	movs	r5, #0
    1a8a:	72a5      	strb	r5, [r4, #10]
    1a8c:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1a8e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    1a92:	246f      	movs	r4, #111	; 0x6f
    1a94:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1a98:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1a9c:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    1aa0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    1aa2:	7c80      	ldrb	r0, [r0, #18]
    1aa4:	4798      	blx	r3
    1aa6:	bd38      	pop	{r3, r4, r5, pc}
    1aa8:	20000538 	.word	0x20000538

00001aac <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    1aac:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    1aae:	2320      	movs	r3, #32
    1ab0:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1ab4:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1ab6:	7c83      	ldrb	r3, [r0, #18]
    1ab8:	f003 030f 	and.w	r3, r3, #15
    1abc:	015b      	lsls	r3, r3, #5
    1abe:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1ac2:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1ac6:	4b03      	ldr	r3, [pc, #12]	; (1ad4 <_usb_d_dev_handle_stall+0x28>)
    1ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1aca:	6882      	ldr	r2, [r0, #8]
    1acc:	2101      	movs	r1, #1
    1ace:	7c80      	ldrb	r0, [r0, #18]
    1ad0:	4798      	blx	r3
    1ad2:	bd08      	pop	{r3, pc}
    1ad4:	20000538 	.word	0x20000538

00001ad8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1ad8:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1ada:	7c84      	ldrb	r4, [r0, #18]
    1adc:	2cff      	cmp	r4, #255	; 0xff
    1ade:	d003      	beq.n	1ae8 <_usb_d_dev_trans_done+0x10>
    1ae0:	7cc3      	ldrb	r3, [r0, #19]
    1ae2:	f013 0f40 	tst.w	r3, #64	; 0x40
    1ae6:	d100      	bne.n	1aea <_usb_d_dev_trans_done+0x12>
    1ae8:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    1aea:	7cc2      	ldrb	r2, [r0, #19]
    1aec:	f36f 1286 	bfc	r2, #6, #1
    1af0:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1af2:	4a03      	ldr	r2, [pc, #12]	; (1b00 <_usb_d_dev_trans_done+0x28>)
    1af4:	6f15      	ldr	r5, [r2, #112]	; 0x70
    1af6:	6882      	ldr	r2, [r0, #8]
    1af8:	4620      	mov	r0, r4
    1afa:	47a8      	blx	r5
    1afc:	e7f4      	b.n	1ae8 <_usb_d_dev_trans_done+0x10>
    1afe:	bf00      	nop
    1b00:	20000538 	.word	0x20000538

00001b04 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1b04:	b530      	push	{r4, r5, lr}
    1b06:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1b08:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1b0a:	2425      	movs	r4, #37	; 0x25
    1b0c:	f88d 4004 	strb.w	r4, [sp, #4]
    1b10:	244a      	movs	r4, #74	; 0x4a
    1b12:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1b16:	2bff      	cmp	r3, #255	; 0xff
    1b18:	d01e      	beq.n	1b58 <_usb_d_dev_trans_stop+0x54>
    1b1a:	7cc4      	ldrb	r4, [r0, #19]
    1b1c:	f014 0f40 	tst.w	r4, #64	; 0x40
    1b20:	d01a      	beq.n	1b58 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1b22:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    1b26:	b1c9      	cbz	r1, 1b5c <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1b28:	0163      	lsls	r3, r4, #5
    1b2a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1b2e:	2580      	movs	r5, #128	; 0x80
    1b30:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    1b34:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1b36:	a902      	add	r1, sp, #8
    1b38:	440b      	add	r3, r1
    1b3a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1b3e:	0163      	lsls	r3, r4, #5
    1b40:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1b44:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1b48:	0163      	lsls	r3, r4, #5
    1b4a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1b4e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1b52:	4611      	mov	r1, r2
    1b54:	4b05      	ldr	r3, [pc, #20]	; (1b6c <_usb_d_dev_trans_stop+0x68>)
    1b56:	4798      	blx	r3
}
    1b58:	b003      	add	sp, #12
    1b5a:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1b5c:	0163      	lsls	r3, r4, #5
    1b5e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1b62:	2540      	movs	r5, #64	; 0x40
    1b64:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    1b68:	e7e4      	b.n	1b34 <_usb_d_dev_trans_stop+0x30>
    1b6a:	bf00      	nop
    1b6c:	00001ad9 	.word	0x00001ad9

00001b70 <_usb_d_dev_handle_trfail>:
{
    1b70:	b530      	push	{r4, r5, lr}
    1b72:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1b74:	7c83      	ldrb	r3, [r0, #18]
    1b76:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1b7a:	2204      	movs	r2, #4
    1b7c:	f88d 2004 	strb.w	r2, [sp, #4]
    1b80:	2208      	movs	r2, #8
    1b82:	f88d 2005 	strb.w	r2, [sp, #5]
    1b86:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    1b88:	460c      	mov	r4, r1
    1b8a:	b391      	cbz	r1, 1bf2 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1b8c:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    1b90:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1b94:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    1b98:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    1b9c:	4a32      	ldr	r2, [pc, #200]	; (1c68 <_usb_d_dev_handle_trfail+0xf8>)
    1b9e:	440a      	add	r2, r1
    1ba0:	7a91      	ldrb	r1, [r2, #10]
    1ba2:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1ba4:	2d02      	cmp	r5, #2
    1ba6:	d02c      	beq.n	1c02 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    1ba8:	f011 0f02 	tst.w	r1, #2
    1bac:	d045      	beq.n	1c3a <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1bae:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1bb0:	7a91      	ldrb	r1, [r2, #10]
    1bb2:	f36f 0141 	bfc	r1, #1, #1
    1bb6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1bb8:	aa02      	add	r2, sp, #8
    1bba:	4422      	add	r2, r4
    1bbc:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1bc0:	015a      	lsls	r2, r3, #5
    1bc2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1bc6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1bca:	015b      	lsls	r3, r3, #5
    1bcc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1bd0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1bd4:	f005 0307 	and.w	r3, r5, #7
    1bd8:	2b01      	cmp	r3, #1
    1bda:	d143      	bne.n	1c64 <_usb_d_dev_handle_trfail+0xf4>
    1bdc:	7cc3      	ldrb	r3, [r0, #19]
    1bde:	f013 0f40 	tst.w	r3, #64	; 0x40
    1be2:	d03f      	beq.n	1c64 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1be4:	09d9      	lsrs	r1, r3, #7
    1be6:	428c      	cmp	r4, r1
    1be8:	d03c      	beq.n	1c64 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1bea:	2200      	movs	r2, #0
    1bec:	4b1f      	ldr	r3, [pc, #124]	; (1c6c <_usb_d_dev_handle_trfail+0xfc>)
    1bee:	4798      	blx	r3
    1bf0:	e038      	b.n	1c64 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1bf2:	0159      	lsls	r1, r3, #5
    1bf4:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    1bf8:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1bfc:	f005 0507 	and.w	r5, r5, #7
    1c00:	e7ca      	b.n	1b98 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1c02:	f011 0f01 	tst.w	r1, #1
    1c06:	d0cf      	beq.n	1ba8 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1c08:	7a91      	ldrb	r1, [r2, #10]
    1c0a:	f36f 0100 	bfc	r1, #0, #1
    1c0e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1c10:	aa02      	add	r2, sp, #8
    1c12:	4422      	add	r2, r4
    1c14:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1c18:	015a      	lsls	r2, r3, #5
    1c1a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1c1e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1c22:	015b      	lsls	r3, r3, #5
    1c24:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1c28:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1c2c:	2204      	movs	r2, #4
    1c2e:	1c21      	adds	r1, r4, #0
    1c30:	bf18      	it	ne
    1c32:	2101      	movne	r1, #1
    1c34:	4b0d      	ldr	r3, [pc, #52]	; (1c6c <_usb_d_dev_handle_trfail+0xfc>)
    1c36:	4798      	blx	r3
    1c38:	e014      	b.n	1c64 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    1c3a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    1c3e:	4a0a      	ldr	r2, [pc, #40]	; (1c68 <_usb_d_dev_handle_trfail+0xf8>)
    1c40:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    1c44:	2100      	movs	r1, #0
    1c46:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1c48:	aa02      	add	r2, sp, #8
    1c4a:	4414      	add	r4, r2
    1c4c:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1c50:	015a      	lsls	r2, r3, #5
    1c52:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1c56:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1c5a:	015b      	lsls	r3, r3, #5
    1c5c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1c60:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    1c64:	b003      	add	sp, #12
    1c66:	bd30      	pop	{r4, r5, pc}
    1c68:	20000538 	.word	0x20000538
    1c6c:	00001b05 	.word	0x00001b05

00001c70 <_usb_d_dev_reset_epts>:
{
    1c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c74:	4d0c      	ldr	r5, [pc, #48]	; (1ca8 <_usb_d_dev_reset_epts+0x38>)
    1c76:	f105 0474 	add.w	r4, r5, #116	; 0x74
    1c7a:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1c7e:	f04f 0803 	mov.w	r8, #3
    1c82:	4f0a      	ldr	r7, [pc, #40]	; (1cac <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    1c84:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1c86:	4641      	mov	r1, r8
    1c88:	4620      	mov	r0, r4
    1c8a:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    1c8c:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1c8e:	2300      	movs	r3, #0
    1c90:	74e3      	strb	r3, [r4, #19]
    1c92:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1c94:	42ac      	cmp	r4, r5
    1c96:	d1f6      	bne.n	1c86 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1c98:	2260      	movs	r2, #96	; 0x60
    1c9a:	4619      	mov	r1, r3
    1c9c:	4802      	ldr	r0, [pc, #8]	; (1ca8 <_usb_d_dev_reset_epts+0x38>)
    1c9e:	4b04      	ldr	r3, [pc, #16]	; (1cb0 <_usb_d_dev_reset_epts+0x40>)
    1ca0:	4798      	blx	r3
    1ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1ca6:	bf00      	nop
    1ca8:	20000538 	.word	0x20000538
    1cac:	00001ad9 	.word	0x00001ad9
    1cb0:	000039a5 	.word	0x000039a5

00001cb4 <_usb_d_dev_in_next>:
{
    1cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1cb8:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1cba:	7c84      	ldrb	r4, [r0, #18]
    1cbc:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1cc0:	4688      	mov	r8, r1
    1cc2:	2900      	cmp	r1, #0
    1cc4:	f000 809f 	beq.w	1e06 <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1cc8:	4b58      	ldr	r3, [pc, #352]	; (1e2c <_usb_d_dev_in_next+0x178>)
    1cca:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1cce:	6958      	ldr	r0, [r3, #20]
    1cd0:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1cd4:	8a2b      	ldrh	r3, [r5, #16]
    1cd6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    1cda:	4293      	cmp	r3, r2
    1cdc:	f000 808d 	beq.w	1dfa <_usb_d_dev_in_next+0x146>
    1ce0:	3b01      	subs	r3, #1
    1ce2:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1ce4:	7cef      	ldrb	r7, [r5, #19]
    1ce6:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    1cea:	f1b8 0f00 	cmp.w	r8, #0
    1cee:	d005      	beq.n	1cfc <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1cf0:	0162      	lsls	r2, r4, #5
    1cf2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1cf6:	2302      	movs	r3, #2
    1cf8:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    1cfc:	68a9      	ldr	r1, [r5, #8]
    1cfe:	eb0e 0301 	add.w	r3, lr, r1
    1d02:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    1d04:	686e      	ldr	r6, [r5, #4]
    1d06:	42b3      	cmp	r3, r6
    1d08:	d23f      	bcs.n	1d8a <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    1d0a:	1af6      	subs	r6, r6, r3
    1d0c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    1d0e:	7cea      	ldrb	r2, [r5, #19]
    1d10:	f012 0f20 	tst.w	r2, #32
    1d14:	d02d      	beq.n	1d72 <_usb_d_dev_in_next+0xbe>
    1d16:	8a2a      	ldrh	r2, [r5, #16]
    1d18:	4296      	cmp	r6, r2
    1d1a:	bf28      	it	cs
    1d1c:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1d1e:	6829      	ldr	r1, [r5, #0]
    1d20:	4632      	mov	r2, r6
    1d22:	4419      	add	r1, r3
    1d24:	68e8      	ldr	r0, [r5, #12]
    1d26:	4b42      	ldr	r3, [pc, #264]	; (1e30 <_usb_d_dev_in_next+0x17c>)
    1d28:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1d2a:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    1d2c:	4b3f      	ldr	r3, [pc, #252]	; (1e2c <_usb_d_dev_in_next+0x178>)
    1d2e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1d32:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1d34:	4b3d      	ldr	r3, [pc, #244]	; (1e2c <_usb_d_dev_in_next+0x178>)
    1d36:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1d3a:	695a      	ldr	r2, [r3, #20]
    1d3c:	f366 020d 	bfi	r2, r6, #0, #14
    1d40:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1d42:	695a      	ldr	r2, [r3, #20]
    1d44:	f36f 329b 	bfc	r2, #14, #14
    1d48:	615a      	str	r2, [r3, #20]
	if (!isr) {
    1d4a:	f1b8 0f00 	cmp.w	r8, #0
    1d4e:	d108      	bne.n	1d62 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    1d50:	2f01      	cmp	r7, #1
    1d52:	bf0c      	ite	eq
    1d54:	224e      	moveq	r2, #78	; 0x4e
    1d56:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1d58:	0163      	lsls	r3, r4, #5
    1d5a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1d5e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1d62:	0164      	lsls	r4, r4, #5
    1d64:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    1d68:	2380      	movs	r3, #128	; 0x80
    1d6a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    1d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d72:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    1d76:	bf28      	it	cs
    1d78:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1d7c:	6829      	ldr	r1, [r5, #0]
    1d7e:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    1d80:	4a2a      	ldr	r2, [pc, #168]	; (1e2c <_usb_d_dev_in_next+0x178>)
    1d82:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    1d86:	6113      	str	r3, [r2, #16]
    1d88:	e7d4      	b.n	1d34 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    1d8a:	7ceb      	ldrb	r3, [r5, #19]
    1d8c:	f013 0f10 	tst.w	r3, #16
    1d90:	d00f      	beq.n	1db2 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    1d92:	7ceb      	ldrb	r3, [r5, #19]
    1d94:	f36f 1304 	bfc	r3, #4, #1
    1d98:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1d9a:	4b24      	ldr	r3, [pc, #144]	; (1e2c <_usb_d_dev_in_next+0x178>)
    1d9c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1da0:	695a      	ldr	r2, [r3, #20]
    1da2:	f36f 020d 	bfc	r2, #0, #14
    1da6:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1da8:	695a      	ldr	r2, [r3, #20]
    1daa:	f36f 329b 	bfc	r2, #14, #14
    1dae:	615a      	str	r2, [r3, #20]
    1db0:	e7cb      	b.n	1d4a <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    1db2:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1db4:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1db8:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    1dbc:	bf0c      	ite	eq
    1dbe:	234b      	moveq	r3, #75	; 0x4b
    1dc0:	234a      	movne	r3, #74	; 0x4a
    1dc2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    1dc6:	8a2a      	ldrh	r2, [r5, #16]
    1dc8:	ea00 030e 	and.w	r3, r0, lr
    1dcc:	429a      	cmp	r2, r3
    1dce:	d005      	beq.n	1ddc <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1dd0:	2100      	movs	r1, #0
    1dd2:	4628      	mov	r0, r5
    1dd4:	4b17      	ldr	r3, [pc, #92]	; (1e34 <_usb_d_dev_in_next+0x180>)
    1dd6:	4798      	blx	r3
	return;
    1dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    1ddc:	7ceb      	ldrb	r3, [r5, #19]
    1dde:	f36f 1386 	bfc	r3, #6, #1
    1de2:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1de4:	4b11      	ldr	r3, [pc, #68]	; (1e2c <_usb_d_dev_in_next+0x178>)
    1de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1de8:	68a9      	ldr	r1, [r5, #8]
    1dea:	7ca8      	ldrb	r0, [r5, #18]
    1dec:	4798      	blx	r3
    1dee:	b9d0      	cbnz	r0, 1e26 <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    1df0:	7ceb      	ldrb	r3, [r5, #19]
    1df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1df6:	74eb      	strb	r3, [r5, #19]
    1df8:	e7ea      	b.n	1dd0 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1dfa:	7cef      	ldrb	r7, [r5, #19]
    1dfc:	f007 0707 	and.w	r7, r7, #7
    1e00:	f240 30ff 	movw	r0, #1023	; 0x3ff
    1e04:	e774      	b.n	1cf0 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1e06:	8a03      	ldrh	r3, [r0, #16]
    1e08:	f240 32ff 	movw	r2, #1023	; 0x3ff
    1e0c:	4293      	cmp	r3, r2
    1e0e:	d107      	bne.n	1e20 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1e10:	7cef      	ldrb	r7, [r5, #19]
    1e12:	f007 0707 	and.w	r7, r7, #7
    1e16:	f04f 0e00 	mov.w	lr, #0
    1e1a:	f240 30ff 	movw	r0, #1023	; 0x3ff
    1e1e:	e76d      	b.n	1cfc <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1e20:	f04f 0e00 	mov.w	lr, #0
    1e24:	e75c      	b.n	1ce0 <_usb_d_dev_in_next+0x2c>
    1e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e2a:	bf00      	nop
    1e2c:	20000538 	.word	0x20000538
    1e30:	00003871 	.word	0x00003871
    1e34:	00001ad9 	.word	0x00001ad9

00001e38 <_usb_d_dev_out_next>:
{
    1e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e3c:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1e3e:	7c85      	ldrb	r5, [r0, #18]
    1e40:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1e44:	4689      	mov	r9, r1
    1e46:	2900      	cmp	r1, #0
    1e48:	d056      	beq.n	1ef8 <_usb_d_dev_out_next+0xc0>
    1e4a:	4b74      	ldr	r3, [pc, #464]	; (201c <_usb_d_dev_out_next+0x1e4>)
    1e4c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1e50:	685a      	ldr	r2, [r3, #4]
    1e52:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1e56:	685f      	ldr	r7, [r3, #4]
    1e58:	f3c7 070d 	ubfx	r7, r7, #0, #14
    1e5c:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1e5e:	8a06      	ldrh	r6, [r0, #16]
    1e60:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1e64:	429e      	cmp	r6, r3
    1e66:	f000 80ba 	beq.w	1fde <_usb_d_dev_out_next+0x1a6>
    1e6a:	3e01      	subs	r6, #1
    1e6c:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    1e6e:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1e72:	f894 8013 	ldrb.w	r8, [r4, #19]
    1e76:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    1e7a:	f1b9 0f00 	cmp.w	r9, #0
    1e7e:	d005      	beq.n	1e8c <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1e80:	016b      	lsls	r3, r5, #5
    1e82:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1e86:	2201      	movs	r2, #1
    1e88:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1e8c:	7ce3      	ldrb	r3, [r4, #19]
    1e8e:	f013 0f20 	tst.w	r3, #32
    1e92:	d00d      	beq.n	1eb0 <_usb_d_dev_out_next+0x78>
    1e94:	6862      	ldr	r2, [r4, #4]
    1e96:	2a00      	cmp	r2, #0
    1e98:	d037      	beq.n	1f0a <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1e9a:	68a0      	ldr	r0, [r4, #8]
    1e9c:	1a12      	subs	r2, r2, r0
    1e9e:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1ea0:	6823      	ldr	r3, [r4, #0]
    1ea2:	42ba      	cmp	r2, r7
    1ea4:	bf28      	it	cs
    1ea6:	463a      	movcs	r2, r7
    1ea8:	68e1      	ldr	r1, [r4, #12]
    1eaa:	4418      	add	r0, r3
    1eac:	4b5c      	ldr	r3, [pc, #368]	; (2020 <_usb_d_dev_out_next+0x1e8>)
    1eae:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1eb0:	6863      	ldr	r3, [r4, #4]
    1eb2:	b353      	cbz	r3, 1f0a <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    1eb4:	f1b9 0f00 	cmp.w	r9, #0
    1eb8:	d040      	beq.n	1f3c <_usb_d_dev_out_next+0x104>
    1eba:	8a22      	ldrh	r2, [r4, #16]
    1ebc:	42ba      	cmp	r2, r7
    1ebe:	d93d      	bls.n	1f3c <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    1ec0:	7ce3      	ldrb	r3, [r4, #19]
    1ec2:	f36f 1304 	bfc	r3, #4, #1
    1ec6:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1ec8:	68a3      	ldr	r3, [r4, #8]
    1eca:	445b      	add	r3, fp
    1ecc:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    1ece:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1ed2:	ea4f 1345 	mov.w	r3, r5, lsl #5
    1ed6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1eda:	bf0c      	ite	eq
    1edc:	222d      	moveq	r2, #45	; 0x2d
    1ede:	2225      	movne	r2, #37	; 0x25
    1ee0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    1ee4:	b915      	cbnz	r5, 1eec <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1ee6:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    1ee8:	4b4c      	ldr	r3, [pc, #304]	; (201c <_usb_d_dev_out_next+0x1e4>)
    1eea:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1eec:	2100      	movs	r1, #0
    1eee:	4620      	mov	r0, r4
    1ef0:	4b4c      	ldr	r3, [pc, #304]	; (2024 <_usb_d_dev_out_next+0x1ec>)
    1ef2:	4798      	blx	r3
	return;
    1ef4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1ef8:	8a06      	ldrh	r6, [r0, #16]
    1efa:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1efe:	429e      	cmp	r6, r3
    1f00:	d07b      	beq.n	1ffa <_usb_d_dev_out_next+0x1c2>
    1f02:	f04f 0b00 	mov.w	fp, #0
    1f06:	46da      	mov	sl, fp
    1f08:	e7af      	b.n	1e6a <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1f0a:	7ce3      	ldrb	r3, [r4, #19]
    1f0c:	f013 0f10 	tst.w	r3, #16
    1f10:	d06c      	beq.n	1fec <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    1f12:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1f14:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1f18:	f043 0320 	orr.w	r3, r3, #32
    1f1c:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1f1e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1f20:	493e      	ldr	r1, [pc, #248]	; (201c <_usb_d_dev_out_next+0x1e4>)
    1f22:	016a      	lsls	r2, r5, #5
    1f24:	188b      	adds	r3, r1, r2
    1f26:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1f28:	8a21      	ldrh	r1, [r4, #16]
    1f2a:	685a      	ldr	r2, [r3, #4]
    1f2c:	f361 329b 	bfi	r2, r1, #14, #14
    1f30:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1f32:	685a      	ldr	r2, [r3, #4]
    1f34:	f36f 020d 	bfc	r2, #0, #14
    1f38:	605a      	str	r2, [r3, #4]
    1f3a:	e01d      	b.n	1f78 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    1f3c:	68a2      	ldr	r2, [r4, #8]
    1f3e:	4452      	add	r2, sl
    1f40:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1f42:	4293      	cmp	r3, r2
    1f44:	d9c3      	bls.n	1ece <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    1f46:	1a9b      	subs	r3, r3, r2
    1f48:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1f4a:	7ce1      	ldrb	r1, [r4, #19]
    1f4c:	f011 0f20 	tst.w	r1, #32
    1f50:	d026      	beq.n	1fa0 <_usb_d_dev_out_next+0x168>
    1f52:	8a22      	ldrh	r2, [r4, #16]
    1f54:	4293      	cmp	r3, r2
    1f56:	bf28      	it	cs
    1f58:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1f5a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1f5c:	016a      	lsls	r2, r5, #5
    1f5e:	492f      	ldr	r1, [pc, #188]	; (201c <_usb_d_dev_out_next+0x1e4>)
    1f60:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1f62:	4a2e      	ldr	r2, [pc, #184]	; (201c <_usb_d_dev_out_next+0x1e4>)
    1f64:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    1f68:	6851      	ldr	r1, [r2, #4]
    1f6a:	f363 319b 	bfi	r1, r3, #14, #14
    1f6e:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1f70:	6853      	ldr	r3, [r2, #4]
    1f72:	f36f 030d 	bfc	r3, #0, #14
    1f76:	6053      	str	r3, [r2, #4]
	if (!isr) {
    1f78:	f1b9 0f00 	cmp.w	r9, #0
    1f7c:	d108      	bne.n	1f90 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    1f7e:	f1b8 0f01 	cmp.w	r8, #1
    1f82:	d025      	beq.n	1fd0 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    1f84:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1f86:	016b      	lsls	r3, r5, #5
    1f88:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1f8c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1f90:	016d      	lsls	r5, r5, #5
    1f92:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    1f96:	2340      	movs	r3, #64	; 0x40
    1f98:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    1f9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    1fa0:	8a21      	ldrh	r1, [r4, #16]
    1fa2:	428b      	cmp	r3, r1
    1fa4:	d90a      	bls.n	1fbc <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    1faa:	d80e      	bhi.n	1fca <_usb_d_dev_out_next+0x192>
    1fac:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1fb0:	6821      	ldr	r1, [r4, #0]
    1fb2:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    1fb4:	0169      	lsls	r1, r5, #5
    1fb6:	4819      	ldr	r0, [pc, #100]	; (201c <_usb_d_dev_out_next+0x1e4>)
    1fb8:	5042      	str	r2, [r0, r1]
    1fba:	e7d2      	b.n	1f62 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    1fbc:	428b      	cmp	r3, r1
    1fbe:	d2f7      	bcs.n	1fb0 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    1fc0:	7ce1      	ldrb	r1, [r4, #19]
    1fc2:	f041 0120 	orr.w	r1, r1, #32
    1fc6:	74e1      	strb	r1, [r4, #19]
    1fc8:	e7f2      	b.n	1fb0 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    1fca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1fce:	e7ef      	b.n	1fb0 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    1fd0:	4b12      	ldr	r3, [pc, #72]	; (201c <_usb_d_dev_out_next+0x1e4>)
    1fd2:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1fd6:	2200      	movs	r2, #0
    1fd8:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1fda:	222d      	movs	r2, #45	; 0x2d
    1fdc:	e7d3      	b.n	1f86 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    1fde:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1fe2:	f890 8013 	ldrb.w	r8, [r0, #19]
    1fe6:	f008 0807 	and.w	r8, r8, #7
    1fea:	e749      	b.n	1e80 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    1fec:	f1b9 0f00 	cmp.w	r9, #0
    1ff0:	d10b      	bne.n	200a <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    1ff2:	68a3      	ldr	r3, [r4, #8]
    1ff4:	4453      	add	r3, sl
    1ff6:	60a3      	str	r3, [r4, #8]
    1ff8:	e769      	b.n	1ece <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1ffa:	f890 8013 	ldrb.w	r8, [r0, #19]
    1ffe:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    2002:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2004:	46bb      	mov	fp, r7
    2006:	46ba      	mov	sl, r7
    2008:	e740      	b.n	1e8c <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    200a:	8a23      	ldrh	r3, [r4, #16]
    200c:	42bb      	cmp	r3, r7
    200e:	f63f af57 	bhi.w	1ec0 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    2012:	68a3      	ldr	r3, [r4, #8]
    2014:	4453      	add	r3, sl
    2016:	60a3      	str	r3, [r4, #8]
    2018:	e759      	b.n	1ece <_usb_d_dev_out_next+0x96>
    201a:	bf00      	nop
    201c:	20000538 	.word	0x20000538
    2020:	00003871 	.word	0x00003871
    2024:	00001ad9 	.word	0x00001ad9

00002028 <_usb_d_dev_handler>:
{
    2028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    202c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2030:	8c1e      	ldrh	r6, [r3, #32]
    2032:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2034:	b146      	cbz	r6, 2048 <_usb_d_dev_handler+0x20>
    2036:	4d91      	ldr	r5, [pc, #580]	; (227c <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    2038:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    203a:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    203e:	f8df 9258 	ldr.w	r9, [pc, #600]	; 2298 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    2042:	f8df 8258 	ldr.w	r8, [pc, #600]	; 229c <_usb_d_dev_handler+0x274>
    2046:	e0d3      	b.n	21f0 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2048:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    204a:	8b1b      	ldrh	r3, [r3, #24]
    204c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    204e:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    2050:	f013 0f04 	tst.w	r3, #4
    2054:	d11d      	bne.n	2092 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    2056:	f413 7f00 	tst.w	r3, #512	; 0x200
    205a:	d123      	bne.n	20a4 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    205c:	f013 0f80 	tst.w	r3, #128	; 0x80
    2060:	d147      	bne.n	20f2 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    2062:	f013 0f70 	tst.w	r3, #112	; 0x70
    2066:	d14f      	bne.n	2108 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    2068:	f013 0f08 	tst.w	r3, #8
    206c:	d16e      	bne.n	214c <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    206e:	f013 0f01 	tst.w	r3, #1
    2072:	d0e0      	beq.n	2036 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2074:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2078:	f240 2201 	movw	r2, #513	; 0x201
    207c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    207e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2080:	2270      	movs	r2, #112	; 0x70
    2082:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2084:	4b7e      	ldr	r3, [pc, #504]	; (2280 <_usb_d_dev_handler+0x258>)
    2086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2088:	2100      	movs	r1, #0
    208a:	2004      	movs	r0, #4
    208c:	4798      	blx	r3
    208e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2092:	2204      	movs	r2, #4
    2094:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2098:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    209a:	4b79      	ldr	r3, [pc, #484]	; (2280 <_usb_d_dev_handler+0x258>)
    209c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    209e:	4798      	blx	r3
    20a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    20a4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    20a8:	f240 2201 	movw	r2, #513	; 0x201
    20ac:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    20ae:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    20b0:	2270      	movs	r2, #112	; 0x70
    20b2:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    20b4:	4b72      	ldr	r3, [pc, #456]	; (2280 <_usb_d_dev_handler+0x258>)
    20b6:	891b      	ldrh	r3, [r3, #8]
    20b8:	f003 030f 	and.w	r3, r3, #15
    20bc:	2b03      	cmp	r3, #3
    20be:	d00e      	beq.n	20de <_usb_d_dev_handler+0xb6>
    20c0:	4b6f      	ldr	r3, [pc, #444]	; (2280 <_usb_d_dev_handler+0x258>)
    20c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    20c4:	f003 030f 	and.w	r3, r3, #15
    20c8:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    20ca:	bf08      	it	eq
    20cc:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    20ce:	d007      	beq.n	20e0 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    20d0:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    20d2:	4b6b      	ldr	r3, [pc, #428]	; (2280 <_usb_d_dev_handler+0x258>)
    20d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    20d6:	2003      	movs	r0, #3
    20d8:	4798      	blx	r3
    20da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    20de:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    20e0:	4b67      	ldr	r3, [pc, #412]	; (2280 <_usb_d_dev_handler+0x258>)
    20e2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    20e6:	8919      	ldrh	r1, [r3, #8]
    20e8:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    20ec:	2200      	movs	r2, #0
    20ee:	811a      	strh	r2, [r3, #8]
    20f0:	e7ef      	b.n	20d2 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    20f2:	2280      	movs	r2, #128	; 0x80
    20f4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    20f8:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    20fa:	4b61      	ldr	r3, [pc, #388]	; (2280 <_usb_d_dev_handler+0x258>)
    20fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    20fe:	2100      	movs	r1, #0
    2100:	2005      	movs	r0, #5
    2102:	4798      	blx	r3
    2104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2108:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    210c:	2270      	movs	r2, #112	; 0x70
    210e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2110:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2112:	f240 2201 	movw	r2, #513	; 0x201
    2116:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2118:	4b5a      	ldr	r3, [pc, #360]	; (2284 <_usb_d_dev_handler+0x25c>)
    211a:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    211e:	f013 0f01 	tst.w	r3, #1
    2122:	d00d      	beq.n	2140 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2124:	4a57      	ldr	r2, [pc, #348]	; (2284 <_usb_d_dev_handler+0x25c>)
    2126:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2128:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    212c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2130:	d1f9      	bne.n	2126 <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    2132:	4b53      	ldr	r3, [pc, #332]	; (2280 <_usb_d_dev_handler+0x258>)
    2134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2136:	2100      	movs	r1, #0
    2138:	2002      	movs	r0, #2
    213a:	4798      	blx	r3
    213c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2140:	4a50      	ldr	r2, [pc, #320]	; (2284 <_usb_d_dev_handler+0x25c>)
    2142:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    2144:	f413 7f80 	tst.w	r3, #256	; 0x100
    2148:	d0fb      	beq.n	2142 <_usb_d_dev_handler+0x11a>
    214a:	e7f2      	b.n	2132 <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    214c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2150:	2400      	movs	r4, #0
    2152:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2156:	2208      	movs	r2, #8
    2158:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    215a:	2270      	movs	r2, #112	; 0x70
    215c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    215e:	f240 2201 	movw	r2, #513	; 0x201
    2162:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    2164:	4b48      	ldr	r3, [pc, #288]	; (2288 <_usb_d_dev_handler+0x260>)
    2166:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    2168:	4b45      	ldr	r3, [pc, #276]	; (2280 <_usb_d_dev_handler+0x258>)
    216a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    216c:	4621      	mov	r1, r4
    216e:	2001      	movs	r0, #1
    2170:	4798      	blx	r3
    2172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2176:	f011 0f10 	tst.w	r1, #16
    217a:	d109      	bne.n	2190 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    217c:	f011 0f40 	tst.w	r1, #64	; 0x40
    2180:	d108      	bne.n	2194 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2182:	f011 0f20 	tst.w	r1, #32
    2186:	d02f      	beq.n	21e8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    2188:	2100      	movs	r1, #0
    218a:	4b40      	ldr	r3, [pc, #256]	; (228c <_usb_d_dev_handler+0x264>)
    218c:	4798      	blx	r3
    218e:	e02b      	b.n	21e8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    2190:	47c8      	blx	r9
    2192:	e029      	b.n	21e8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    2194:	2101      	movs	r1, #1
    2196:	4b3d      	ldr	r3, [pc, #244]	; (228c <_usb_d_dev_handler+0x264>)
    2198:	4798      	blx	r3
    219a:	e025      	b.n	21e8 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    219c:	f011 0f40 	tst.w	r1, #64	; 0x40
    21a0:	d111      	bne.n	21c6 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    21a2:	f011 0f08 	tst.w	r1, #8
    21a6:	d112      	bne.n	21ce <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    21a8:	f011 0f02 	tst.w	r1, #2
    21ac:	d112      	bne.n	21d4 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    21ae:	f003 0307 	and.w	r3, r3, #7
    21b2:	2b01      	cmp	r3, #1
    21b4:	d118      	bne.n	21e8 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    21b6:	f011 0f04 	tst.w	r1, #4
    21ba:	d10f      	bne.n	21dc <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    21bc:	f011 0f10 	tst.w	r1, #16
    21c0:	d012      	beq.n	21e8 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    21c2:	47c8      	blx	r9
    21c4:	e010      	b.n	21e8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    21c6:	2101      	movs	r1, #1
    21c8:	4b30      	ldr	r3, [pc, #192]	; (228c <_usb_d_dev_handler+0x264>)
    21ca:	4798      	blx	r3
    21cc:	e00c      	b.n	21e8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    21ce:	2101      	movs	r1, #1
    21d0:	47c0      	blx	r8
    21d2:	e009      	b.n	21e8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    21d4:	2101      	movs	r1, #1
    21d6:	4b2e      	ldr	r3, [pc, #184]	; (2290 <_usb_d_dev_handler+0x268>)
    21d8:	4798      	blx	r3
    21da:	e005      	b.n	21e8 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    21dc:	2100      	movs	r1, #0
    21de:	47c0      	blx	r8
    21e0:	e002      	b.n	21e8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    21e2:	2100      	movs	r1, #0
    21e4:	4b29      	ldr	r3, [pc, #164]	; (228c <_usb_d_dev_handler+0x264>)
    21e6:	4798      	blx	r3
    21e8:	3401      	adds	r4, #1
    21ea:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    21ec:	2c09      	cmp	r4, #9
    21ee:	d042      	beq.n	2276 <_usb_d_dev_handler+0x24e>
    21f0:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    21f2:	7cab      	ldrb	r3, [r5, #18]
    21f4:	2bff      	cmp	r3, #255	; 0xff
    21f6:	d0f7      	beq.n	21e8 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    21f8:	f003 030f 	and.w	r3, r3, #15
    21fc:	2101      	movs	r1, #1
    21fe:	4099      	lsls	r1, r3
    2200:	4231      	tst	r1, r6
    2202:	d0f1      	beq.n	21e8 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2204:	0159      	lsls	r1, r3, #5
    2206:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    220a:	f501 7180 	add.w	r1, r1, #256	; 0x100
    220e:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2210:	015b      	lsls	r3, r3, #5
    2212:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2216:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    221a:	4019      	ands	r1, r3
    221c:	d0e4      	beq.n	21e8 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    221e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    2222:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    2226:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    222a:	f003 0247 	and.w	r2, r3, #71	; 0x47
    222e:	2a01      	cmp	r2, #1
    2230:	d0a1      	beq.n	2176 <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2232:	f013 0f80 	tst.w	r3, #128	; 0x80
    2236:	d1b1      	bne.n	219c <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2238:	f011 0f20 	tst.w	r1, #32
    223c:	d1d1      	bne.n	21e2 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    223e:	f011 0f04 	tst.w	r1, #4
    2242:	d10e      	bne.n	2262 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2244:	f011 0f01 	tst.w	r1, #1
    2248:	d10e      	bne.n	2268 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    224a:	f003 0307 	and.w	r3, r3, #7
    224e:	2b01      	cmp	r3, #1
    2250:	d1ca      	bne.n	21e8 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2252:	f011 0f08 	tst.w	r1, #8
    2256:	d10b      	bne.n	2270 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2258:	f011 0f10 	tst.w	r1, #16
    225c:	d0c4      	beq.n	21e8 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    225e:	47c8      	blx	r9
    2260:	e7c2      	b.n	21e8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    2262:	2100      	movs	r1, #0
    2264:	47c0      	blx	r8
    2266:	e7bf      	b.n	21e8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    2268:	2101      	movs	r1, #1
    226a:	4b0a      	ldr	r3, [pc, #40]	; (2294 <_usb_d_dev_handler+0x26c>)
    226c:	4798      	blx	r3
    226e:	e7bb      	b.n	21e8 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    2270:	2101      	movs	r1, #1
    2272:	47c0      	blx	r8
    2274:	e7b8      	b.n	21e8 <_usb_d_dev_handler+0x1c0>
    2276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    227a:	bf00      	nop
    227c:	200005ac 	.word	0x200005ac
    2280:	20000538 	.word	0x20000538
    2284:	40001000 	.word	0x40001000
    2288:	00001c71 	.word	0x00001c71
    228c:	00001aad 	.word	0x00001aad
    2290:	00001cb5 	.word	0x00001cb5
    2294:	00001e39 	.word	0x00001e39
    2298:	00001a31 	.word	0x00001a31
    229c:	00001b71 	.word	0x00001b71

000022a0 <_usb_d_dev_init>:
{
    22a0:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    22a2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    22a6:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    22a8:	f013 0f01 	tst.w	r3, #1
    22ac:	d124      	bne.n	22f8 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    22ae:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    22b2:	7893      	ldrb	r3, [r2, #2]
    22b4:	f013 0f03 	tst.w	r3, #3
    22b8:	d1fb      	bne.n	22b2 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    22ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    22be:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    22c0:	f013 0f02 	tst.w	r3, #2
    22c4:	d00f      	beq.n	22e6 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    22c6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    22ca:	7813      	ldrb	r3, [r2, #0]
    22cc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    22d0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    22d2:	7893      	ldrb	r3, [r2, #2]
    22d4:	f013 0f03 	tst.w	r3, #3
    22d8:	d1fb      	bne.n	22d2 <_usb_d_dev_init+0x32>
    22da:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    22de:	7893      	ldrb	r3, [r2, #2]
    22e0:	f013 0f02 	tst.w	r3, #2
    22e4:	d1fb      	bne.n	22de <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    22e6:	2201      	movs	r2, #1
    22e8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    22ec:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    22ee:	461a      	mov	r2, r3
    22f0:	7893      	ldrb	r3, [r2, #2]
    22f2:	f013 0f03 	tst.w	r3, #3
    22f6:	d1fb      	bne.n	22f0 <_usb_d_dev_init+0x50>
    22f8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    22fc:	7893      	ldrb	r3, [r2, #2]
    22fe:	f013 0f01 	tst.w	r3, #1
    2302:	d1fb      	bne.n	22fc <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2304:	4b21      	ldr	r3, [pc, #132]	; (238c <_usb_d_dev_init+0xec>)
    2306:	4a22      	ldr	r2, [pc, #136]	; (2390 <_usb_d_dev_init+0xf0>)
    2308:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    230a:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    230c:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    230e:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2310:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    2312:	4b20      	ldr	r3, [pc, #128]	; (2394 <_usb_d_dev_init+0xf4>)
    2314:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    2316:	4b20      	ldr	r3, [pc, #128]	; (2398 <_usb_d_dev_init+0xf8>)
    2318:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    231a:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    231e:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    2322:	f011 011f 	ands.w	r1, r1, #31
    2326:	d02b      	beq.n	2380 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    2328:	291f      	cmp	r1, #31
    232a:	bf08      	it	eq
    232c:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    232e:	b34b      	cbz	r3, 2384 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    2330:	2b1f      	cmp	r3, #31
    2332:	bf08      	it	eq
    2334:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    2336:	b33a      	cbz	r2, 2388 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    2338:	2a07      	cmp	r2, #7
    233a:	bf08      	it	eq
    233c:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    233e:	f003 031f 	and.w	r3, r3, #31
    2342:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    2346:	0312      	lsls	r2, r2, #12
    2348:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    234c:	4313      	orrs	r3, r2
    234e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2352:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    2354:	78d3      	ldrb	r3, [r2, #3]
    2356:	f043 0303 	orr.w	r3, r3, #3
    235a:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    235c:	78d3      	ldrb	r3, [r2, #3]
    235e:	f043 030c 	orr.w	r3, r3, #12
    2362:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2364:	2304      	movs	r3, #4
    2366:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2368:	7893      	ldrb	r3, [r2, #2]
    236a:	f013 0f03 	tst.w	r3, #3
    236e:	d1fb      	bne.n	2368 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    2370:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2374:	4a05      	ldr	r2, [pc, #20]	; (238c <_usb_d_dev_init+0xec>)
    2376:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    2378:	2201      	movs	r2, #1
    237a:	811a      	strh	r2, [r3, #8]
}
    237c:	2000      	movs	r0, #0
    237e:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    2380:	2109      	movs	r1, #9
    2382:	e7d4      	b.n	232e <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    2384:	2319      	movs	r3, #25
    2386:	e7d6      	b.n	2336 <_usb_d_dev_init+0x96>
		pad_trim = 6;
    2388:	2206      	movs	r2, #6
    238a:	e7d8      	b.n	233e <_usb_d_dev_init+0x9e>
    238c:	20000538 	.word	0x20000538
    2390:	00001a2d 	.word	0x00001a2d
    2394:	00001c71 	.word	0x00001c71
    2398:	00800084 	.word	0x00800084

0000239c <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    239c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    23a0:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    23a2:	f013 0f03 	tst.w	r3, #3
    23a6:	d129      	bne.n	23fc <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    23a8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    23ac:	7893      	ldrb	r3, [r2, #2]
    23ae:	f013 0f03 	tst.w	r3, #3
    23b2:	d1fb      	bne.n	23ac <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    23b4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    23b8:	781b      	ldrb	r3, [r3, #0]
    23ba:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    23bc:	f013 0f02 	tst.w	r3, #2
    23c0:	d108      	bne.n	23d4 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    23c2:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    23c6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    23ca:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    23cc:	7893      	ldrb	r3, [r2, #2]
    23ce:	f013 0f03 	tst.w	r3, #3
    23d2:	d1fb      	bne.n	23cc <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    23d4:	4b0b      	ldr	r3, [pc, #44]	; (2404 <_usb_d_dev_enable+0x68>)
    23d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    23da:	609a      	str	r2, [r3, #8]
    23dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    23e0:	609a      	str	r2, [r3, #8]
    23e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    23e6:	609a      	str	r2, [r3, #8]
    23e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    23ec:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    23ee:	f240 228d 	movw	r2, #653	; 0x28d
    23f2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    23f6:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    23f8:	2000      	movs	r0, #0
    23fa:	4770      	bx	lr
		return -USB_ERR_DENIED;
    23fc:	f06f 0010 	mvn.w	r0, #16
}
    2400:	4770      	bx	lr
    2402:	bf00      	nop
    2404:	e000e100 	.word	0xe000e100

00002408 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2408:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    240c:	8913      	ldrh	r3, [r2, #8]
    240e:	f023 0301 	bic.w	r3, r3, #1
    2412:	041b      	lsls	r3, r3, #16
    2414:	0c1b      	lsrs	r3, r3, #16
    2416:	8113      	strh	r3, [r2, #8]
    2418:	4770      	bx	lr

0000241a <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    241a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    241e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2422:	7298      	strb	r0, [r3, #10]
    2424:	4770      	bx	lr
	...

00002428 <_usb_d_dev_ep_init>:
{
    2428:	b5f0      	push	{r4, r5, r6, r7, lr}
    242a:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    242e:	f010 050f 	ands.w	r5, r0, #15
    2432:	d04d      	beq.n	24d0 <_usb_d_dev_ep_init+0xa8>
    2434:	f1be 0f00 	cmp.w	lr, #0
    2438:	bfb4      	ite	lt
    243a:	1cac      	addlt	r4, r5, #2
    243c:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    243e:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2442:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    2444:	2d02      	cmp	r5, #2
    2446:	d947      	bls.n	24d8 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    2448:	f06f 0011 	mvn.w	r0, #17
    244c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    244e:	f1be 0f00 	cmp.w	lr, #0
    2452:	db1b      	blt.n	248c <_usb_d_dev_ep_init+0x64>
    2454:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2458:	4e37      	ldr	r6, [pc, #220]	; (2538 <_usb_d_dev_ep_init+0x110>)
    245a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    245e:	2d00      	cmp	r5, #0
    2460:	d15e      	bne.n	2520 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2462:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2466:	4d34      	ldr	r5, [pc, #208]	; (2538 <_usb_d_dev_ep_init+0x110>)
    2468:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    246c:	4d33      	ldr	r5, [pc, #204]	; (253c <_usb_d_dev_ep_init+0x114>)
    246e:	00a6      	lsls	r6, r4, #2
    2470:	1933      	adds	r3, r6, r4
    2472:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    2476:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    247a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    247e:	3101      	adds	r1, #1
    2480:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    2484:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    2488:	2000      	movs	r0, #0
    248a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    248c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2490:	4e29      	ldr	r6, [pc, #164]	; (2538 <_usb_d_dev_ep_init+0x110>)
    2492:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2496:	686d      	ldr	r5, [r5, #4]
    2498:	b935      	cbnz	r5, 24a8 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    249a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    249e:	4d26      	ldr	r5, [pc, #152]	; (2538 <_usb_d_dev_ep_init+0x110>)
    24a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    24a4:	685f      	ldr	r7, [r3, #4]
    24a6:	e7e1      	b.n	246c <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    24a8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    24ac:	4e22      	ldr	r6, [pc, #136]	; (2538 <_usb_d_dev_ep_init+0x110>)
    24ae:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    24b2:	896d      	ldrh	r5, [r5, #10]
    24b4:	4295      	cmp	r5, r2
    24b6:	daf0      	bge.n	249a <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    24b8:	f06f 0012 	mvn.w	r0, #18
    24bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    24be:	f06f 0013 	mvn.w	r0, #19
    24c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    24c4:	f06f 0013 	mvn.w	r0, #19
    24c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    24ca:	f06f 0012 	mvn.w	r0, #18
    24ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    24d0:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    24d4:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    24d6:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    24d8:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    24dc:	4f17      	ldr	r7, [pc, #92]	; (253c <_usb_d_dev_ep_init+0x114>)
    24de:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    24e2:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    24e6:	2eff      	cmp	r6, #255	; 0xff
    24e8:	d1e9      	bne.n	24be <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    24ea:	2900      	cmp	r1, #0
    24ec:	d1af      	bne.n	244e <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    24ee:	b125      	cbz	r5, 24fa <_usb_d_dev_ep_init+0xd2>
    24f0:	f1be 0f00 	cmp.w	lr, #0
    24f4:	bfa4      	itt	ge
    24f6:	3502      	addge	r5, #2
    24f8:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    24fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    24fe:	4e0f      	ldr	r6, [pc, #60]	; (253c <_usb_d_dev_ep_init+0x114>)
    2500:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2504:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    2508:	2dff      	cmp	r5, #255	; 0xff
    250a:	d1db      	bne.n	24c4 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    250c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2510:	4e09      	ldr	r6, [pc, #36]	; (2538 <_usb_d_dev_ep_init+0x110>)
    2512:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    2516:	2d00      	cmp	r5, #0
    2518:	d0d7      	beq.n	24ca <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    251a:	f1be 0f00 	cmp.w	lr, #0
    251e:	dbb5      	blt.n	248c <_usb_d_dev_ep_init+0x64>
    2520:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2524:	4e04      	ldr	r6, [pc, #16]	; (2538 <_usb_d_dev_ep_init+0x110>)
    2526:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    252a:	892d      	ldrh	r5, [r5, #8]
    252c:	4295      	cmp	r5, r2
    252e:	da98      	bge.n	2462 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    2530:	f06f 0012 	mvn.w	r0, #18
    2534:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2536:	bf00      	nop
    2538:	00003c20 	.word	0x00003c20
    253c:	20000538 	.word	0x20000538

00002540 <_usb_d_dev_ep_deinit>:
{
    2540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2542:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2544:	f010 060f 	ands.w	r6, r0, #15
    2548:	d00e      	beq.n	2568 <_usb_d_dev_ep_deinit+0x28>
    254a:	2f00      	cmp	r7, #0
    254c:	bfb4      	ite	lt
    254e:	1cb3      	addlt	r3, r6, #2
    2550:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2552:	2e02      	cmp	r6, #2
    2554:	d900      	bls.n	2558 <_usb_d_dev_ep_deinit+0x18>
    2556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    2558:	461d      	mov	r5, r3
    255a:	3301      	adds	r3, #1
    255c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2560:	4a24      	ldr	r2, [pc, #144]	; (25f4 <_usb_d_dev_ep_deinit+0xb4>)
    2562:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    2566:	e002      	b.n	256e <_usb_d_dev_ep_deinit+0x2e>
    2568:	f8df e094 	ldr.w	lr, [pc, #148]	; 2600 <_usb_d_dev_ep_deinit+0xc0>
    256c:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    256e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2572:	4a21      	ldr	r2, [pc, #132]	; (25f8 <_usb_d_dev_ep_deinit+0xb8>)
    2574:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2578:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    257c:	2aff      	cmp	r2, #255	; 0xff
    257e:	d0ea      	beq.n	2556 <_usb_d_dev_ep_deinit+0x16>
    2580:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    2582:	2203      	movs	r2, #3
    2584:	0ff9      	lsrs	r1, r7, #31
    2586:	4670      	mov	r0, lr
    2588:	4b1c      	ldr	r3, [pc, #112]	; (25fc <_usb_d_dev_ep_deinit+0xbc>)
    258a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    258c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2590:	4a19      	ldr	r2, [pc, #100]	; (25f8 <_usb_d_dev_ep_deinit+0xb8>)
    2592:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2596:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    259a:	f003 0307 	and.w	r3, r3, #7
    259e:	2b01      	cmp	r3, #1
    25a0:	d016      	beq.n	25d0 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    25a2:	2f00      	cmp	r7, #0
    25a4:	db1b      	blt.n	25de <_usb_d_dev_ep_deinit+0x9e>
    25a6:	0160      	lsls	r0, r4, #5
    25a8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    25ac:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    25b0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    25b4:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    25b8:	4b0f      	ldr	r3, [pc, #60]	; (25f8 <_usb_d_dev_ep_deinit+0xb8>)
    25ba:	00aa      	lsls	r2, r5, #2
    25bc:	1951      	adds	r1, r2, r5
    25be:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    25c2:	2000      	movs	r0, #0
    25c4:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    25c8:	22ff      	movs	r2, #255	; 0xff
    25ca:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    25ce:	e7c2      	b.n	2556 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    25d0:	0160      	lsls	r0, r4, #5
    25d2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    25d6:	2300      	movs	r3, #0
    25d8:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    25dc:	e7ec      	b.n	25b8 <_usb_d_dev_ep_deinit+0x78>
    25de:	0176      	lsls	r6, r6, #5
    25e0:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    25e4:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    25e8:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    25ec:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    25f0:	e7e2      	b.n	25b8 <_usb_d_dev_ep_deinit+0x78>
    25f2:	bf00      	nop
    25f4:	20000598 	.word	0x20000598
    25f8:	20000538 	.word	0x20000538
    25fc:	00001b05 	.word	0x00001b05
    2600:	200005ac 	.word	0x200005ac

00002604 <_usb_d_dev_ep_enable>:
{
    2604:	b5f0      	push	{r4, r5, r6, r7, lr}
    2606:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2608:	f010 000f 	ands.w	r0, r0, #15
    260c:	f000 80a6 	beq.w	275c <_usb_d_dev_ep_enable+0x158>
    2610:	2f00      	cmp	r7, #0
    2612:	bfb4      	ite	lt
    2614:	1c83      	addlt	r3, r0, #2
    2616:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2618:	4606      	mov	r6, r0
    261a:	0142      	lsls	r2, r0, #5
    261c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2620:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    2624:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2626:	2802      	cmp	r0, #2
    2628:	f240 809f 	bls.w	276a <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    262c:	f06f 0011 	mvn.w	r0, #17
    2630:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    2632:	f014 0f77 	tst.w	r4, #119	; 0x77
    2636:	f040 8088 	bne.w	274a <_usb_d_dev_ep_enable+0x146>
    263a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    263e:	2111      	movs	r1, #17
    2640:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2644:	4c97      	ldr	r4, [pc, #604]	; (28a4 <_usb_d_dev_ep_enable+0x2a0>)
    2646:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    264a:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    264e:	4996      	ldr	r1, [pc, #600]	; (28a8 <_usb_d_dev_ep_enable+0x2a4>)
    2650:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2654:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    2658:	f200 80cc 	bhi.w	27f4 <_usb_d_dev_ep_enable+0x1f0>
    265c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    2660:	f200 810a 	bhi.w	2878 <_usb_d_dev_ep_enable+0x274>
    2664:	2c80      	cmp	r4, #128	; 0x80
    2666:	f200 80f9 	bhi.w	285c <_usb_d_dev_ep_enable+0x258>
    266a:	2c40      	cmp	r4, #64	; 0x40
    266c:	f200 810b 	bhi.w	2886 <_usb_d_dev_ep_enable+0x282>
    2670:	2c20      	cmp	r4, #32
    2672:	f200 80fa 	bhi.w	286a <_usb_d_dev_ep_enable+0x266>
    2676:	2c10      	cmp	r4, #16
    2678:	f200 810c 	bhi.w	2894 <_usb_d_dev_ep_enable+0x290>
    267c:	2c08      	cmp	r4, #8
    267e:	bf94      	ite	ls
    2680:	2700      	movls	r7, #0
    2682:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2684:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2688:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    268a:	f3c4 010d 	ubfx	r1, r4, #0, #14
    268e:	e0b7      	b.n	2800 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2690:	f014 0f70 	tst.w	r4, #112	; 0x70
    2694:	d15c      	bne.n	2750 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    2696:	4d83      	ldr	r5, [pc, #524]	; (28a4 <_usb_d_dev_ep_enable+0x2a0>)
    2698:	009f      	lsls	r7, r3, #2
    269a:	18f9      	adds	r1, r7, r3
    269c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    26a0:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    26a4:	0109      	lsls	r1, r1, #4
    26a6:	f001 0170 	and.w	r1, r1, #112	; 0x70
    26aa:	430c      	orrs	r4, r1
    26ac:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    26b0:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    26b4:	443b      	add	r3, r7
    26b6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    26ba:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    26be:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    26c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    26c6:	d80f      	bhi.n	26e8 <_usb_d_dev_ep_enable+0xe4>
    26c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    26cc:	d819      	bhi.n	2702 <_usb_d_dev_ep_enable+0xfe>
    26ce:	2b80      	cmp	r3, #128	; 0x80
    26d0:	d819      	bhi.n	2706 <_usb_d_dev_ep_enable+0x102>
    26d2:	2b40      	cmp	r3, #64	; 0x40
    26d4:	d819      	bhi.n	270a <_usb_d_dev_ep_enable+0x106>
    26d6:	2b20      	cmp	r3, #32
    26d8:	d819      	bhi.n	270e <_usb_d_dev_ep_enable+0x10a>
    26da:	2b10      	cmp	r3, #16
    26dc:	d819      	bhi.n	2712 <_usb_d_dev_ep_enable+0x10e>
    26de:	2b08      	cmp	r3, #8
    26e0:	bf94      	ite	ls
    26e2:	2300      	movls	r3, #0
    26e4:	2301      	movhi	r3, #1
    26e6:	e000      	b.n	26ea <_usb_d_dev_ep_enable+0xe6>
    26e8:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    26ea:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    26ee:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    26f0:	2380      	movs	r3, #128	; 0x80
    26f2:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    26f6:	4b6b      	ldr	r3, [pc, #428]	; (28a4 <_usb_d_dev_ep_enable+0x2a0>)
    26f8:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    26fc:	2000      	movs	r0, #0
    26fe:	76b0      	strb	r0, [r6, #26]
    2700:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2702:	2306      	movs	r3, #6
    2704:	e7f1      	b.n	26ea <_usb_d_dev_ep_enable+0xe6>
    2706:	2305      	movs	r3, #5
    2708:	e7ef      	b.n	26ea <_usb_d_dev_ep_enable+0xe6>
    270a:	2304      	movs	r3, #4
    270c:	e7ed      	b.n	26ea <_usb_d_dev_ep_enable+0xe6>
    270e:	2303      	movs	r3, #3
    2710:	e7eb      	b.n	26ea <_usb_d_dev_ep_enable+0xe6>
    2712:	2302      	movs	r3, #2
    2714:	e7e9      	b.n	26ea <_usb_d_dev_ep_enable+0xe6>
    2716:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2718:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    271c:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    271e:	2340      	movs	r3, #64	; 0x40
    2720:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    2724:	4b5f      	ldr	r3, [pc, #380]	; (28a4 <_usb_d_dev_ep_enable+0x2a0>)
    2726:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    272a:	2000      	movs	r0, #0
    272c:	72b0      	strb	r0, [r6, #10]
    272e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2730:	2106      	movs	r1, #6
    2732:	e7f1      	b.n	2718 <_usb_d_dev_ep_enable+0x114>
    2734:	2105      	movs	r1, #5
    2736:	e7ef      	b.n	2718 <_usb_d_dev_ep_enable+0x114>
    2738:	2104      	movs	r1, #4
    273a:	e7ed      	b.n	2718 <_usb_d_dev_ep_enable+0x114>
    273c:	2103      	movs	r1, #3
    273e:	e7eb      	b.n	2718 <_usb_d_dev_ep_enable+0x114>
    2740:	2102      	movs	r1, #2
    2742:	e7e9      	b.n	2718 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    2744:	f06f 0011 	mvn.w	r0, #17
    2748:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    274a:	f06f 0013 	mvn.w	r0, #19
    274e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2750:	f06f 0013 	mvn.w	r0, #19
    2754:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2756:	f06f 0013 	mvn.w	r0, #19
    275a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    275c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2760:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    2764:	b2e4      	uxtb	r4, r4
    2766:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    2768:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    276a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    276e:	494d      	ldr	r1, [pc, #308]	; (28a4 <_usb_d_dev_ep_enable+0x2a0>)
    2770:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2774:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    2778:	2dff      	cmp	r5, #255	; 0xff
    277a:	d0e3      	beq.n	2744 <_usb_d_dev_ep_enable+0x140>
    277c:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    277e:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2780:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    2784:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    2788:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    278c:	f001 0107 	and.w	r1, r1, #7
    2790:	2901      	cmp	r1, #1
    2792:	f43f af4e 	beq.w	2632 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    2796:	2f00      	cmp	r7, #0
    2798:	f6ff af7a 	blt.w	2690 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    279c:	f014 0f07 	tst.w	r4, #7
    27a0:	d1d9      	bne.n	2756 <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    27a2:	4d40      	ldr	r5, [pc, #256]	; (28a4 <_usb_d_dev_ep_enable+0x2a0>)
    27a4:	009f      	lsls	r7, r3, #2
    27a6:	18f9      	adds	r1, r7, r3
    27a8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    27ac:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    27b0:	f001 0107 	and.w	r1, r1, #7
    27b4:	430c      	orrs	r4, r1
    27b6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    27ba:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    27be:	443b      	add	r3, r7
    27c0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    27c4:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    27c8:	4b37      	ldr	r3, [pc, #220]	; (28a8 <_usb_d_dev_ep_enable+0x2a4>)
    27ca:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    27ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    27d2:	d8a0      	bhi.n	2716 <_usb_d_dev_ep_enable+0x112>
    27d4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    27d8:	d8aa      	bhi.n	2730 <_usb_d_dev_ep_enable+0x12c>
    27da:	2980      	cmp	r1, #128	; 0x80
    27dc:	d8aa      	bhi.n	2734 <_usb_d_dev_ep_enable+0x130>
    27de:	2940      	cmp	r1, #64	; 0x40
    27e0:	d8aa      	bhi.n	2738 <_usb_d_dev_ep_enable+0x134>
    27e2:	2920      	cmp	r1, #32
    27e4:	d8aa      	bhi.n	273c <_usb_d_dev_ep_enable+0x138>
    27e6:	2910      	cmp	r1, #16
    27e8:	d8aa      	bhi.n	2740 <_usb_d_dev_ep_enable+0x13c>
    27ea:	2908      	cmp	r1, #8
    27ec:	bf94      	ite	ls
    27ee:	2100      	movls	r1, #0
    27f0:	2101      	movhi	r1, #1
    27f2:	e791      	b.n	2718 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    27f4:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    27f8:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    27fa:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    27fe:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2800:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    2804:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2806:	2140      	movs	r1, #64	; 0x40
    2808:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    280c:	2080      	movs	r0, #128	; 0x80
    280e:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    2812:	4a24      	ldr	r2, [pc, #144]	; (28a4 <_usb_d_dev_ep_enable+0x2a0>)
    2814:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    2818:	2000      	movs	r0, #0
    281a:	72b0      	strb	r0, [r6, #10]
    281c:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    281e:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2822:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2826:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    282a:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    282e:	016d      	lsls	r5, r5, #5
    2830:	1953      	adds	r3, r2, r5
    2832:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2834:	685a      	ldr	r2, [r3, #4]
    2836:	f364 329b 	bfi	r2, r4, #14, #14
    283a:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    283c:	685a      	ldr	r2, [r3, #4]
    283e:	f360 020d 	bfi	r2, r0, #0, #14
    2842:	605a      	str	r2, [r3, #4]
    2844:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    2848:	22b0      	movs	r2, #176	; 0xb0
    284a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    284e:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2852:	461d      	mov	r5, r3
    2854:	2310      	movs	r3, #16
    2856:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    285a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    285c:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2860:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2862:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2866:	2705      	movs	r7, #5
    2868:	e7ca      	b.n	2800 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    286a:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    286e:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2870:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2874:	2703      	movs	r7, #3
    2876:	e7c3      	b.n	2800 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2878:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    287c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    287e:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2882:	2706      	movs	r7, #6
    2884:	e7bc      	b.n	2800 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2886:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    288a:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    288c:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2890:	2704      	movs	r7, #4
    2892:	e7b5      	b.n	2800 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2894:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2898:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    289a:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    289e:	2702      	movs	r7, #2
    28a0:	e7ae      	b.n	2800 <_usb_d_dev_ep_enable+0x1fc>
    28a2:	bf00      	nop
    28a4:	20000538 	.word	0x20000538
    28a8:	0fffc000 	.word	0x0fffc000

000028ac <_usb_d_dev_ep_stall>:
{
    28ac:	b470      	push	{r4, r5, r6}
    28ae:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    28b0:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    28b2:	f010 000f 	ands.w	r0, r0, #15
    28b6:	d008      	beq.n	28ca <_usb_d_dev_ep_stall+0x1e>
    28b8:	2b00      	cmp	r3, #0
    28ba:	bfb4      	ite	lt
    28bc:	1c83      	addlt	r3, r0, #2
    28be:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    28c0:	2802      	cmp	r0, #2
    28c2:	d903      	bls.n	28cc <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    28c4:	f06f 0011 	mvn.w	r0, #17
    28c8:	e018      	b.n	28fc <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    28ca:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    28cc:	2901      	cmp	r1, #1
    28ce:	d017      	beq.n	2900 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    28d0:	2900      	cmp	r1, #0
    28d2:	d03a      	beq.n	294a <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    28d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    28d8:	4a45      	ldr	r2, [pc, #276]	; (29f0 <_usb_d_dev_ep_stall+0x144>)
    28da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    28de:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    28e2:	f003 030f 	and.w	r3, r3, #15
    28e6:	015b      	lsls	r3, r3, #5
    28e8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    28ec:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    28f0:	2310      	movs	r3, #16
    28f2:	40a3      	lsls	r3, r4
    28f4:	421a      	tst	r2, r3
    28f6:	bf14      	ite	ne
    28f8:	2001      	movne	r0, #1
    28fa:	2000      	moveq	r0, #0
}
    28fc:	bc70      	pop	{r4, r5, r6}
    28fe:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2900:	2510      	movs	r5, #16
    2902:	40a5      	lsls	r5, r4
    2904:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2906:	493a      	ldr	r1, [pc, #232]	; (29f0 <_usb_d_dev_ep_stall+0x144>)
    2908:	009e      	lsls	r6, r3, #2
    290a:	18f2      	adds	r2, r6, r3
    290c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2910:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2914:	f002 020f 	and.w	r2, r2, #15
    2918:	0150      	lsls	r0, r2, #5
    291a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    291e:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2922:	2020      	movs	r0, #32
    2924:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    2928:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    292a:	0152      	lsls	r2, r2, #5
    292c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2930:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    2934:	4433      	add	r3, r6
    2936:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    293a:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    293e:	f042 0208 	orr.w	r2, r2, #8
    2942:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    2946:	2000      	movs	r0, #0
    2948:	e7d8      	b.n	28fc <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    294a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    294e:	4928      	ldr	r1, [pc, #160]	; (29f0 <_usb_d_dev_ep_stall+0x144>)
    2950:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2954:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    2958:	f002 020f 	and.w	r2, r2, #15
    295c:	0151      	lsls	r1, r2, #5
    295e:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2962:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2966:	2010      	movs	r0, #16
    2968:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    296a:	4205      	tst	r5, r0
    296c:	d03c      	beq.n	29e8 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    296e:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2970:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2974:	2020      	movs	r0, #32
    2976:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2978:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    297a:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    297e:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    2982:	4202      	tst	r2, r0
    2984:	d007      	beq.n	2996 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2986:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    298a:	2201      	movs	r2, #1
    298c:	fa02 f404 	lsl.w	r4, r2, r4
    2990:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2992:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2996:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    299a:	4815      	ldr	r0, [pc, #84]	; (29f0 <_usb_d_dev_ep_stall+0x144>)
    299c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    29a0:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    29a4:	f002 0207 	and.w	r2, r2, #7
    29a8:	2a01      	cmp	r2, #1
    29aa:	d00c      	beq.n	29c6 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    29ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    29b0:	4a0f      	ldr	r2, [pc, #60]	; (29f0 <_usb_d_dev_ep_stall+0x144>)
    29b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    29b6:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    29ba:	f36f 02c3 	bfc	r2, #3, #1
    29be:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    29c2:	2000      	movs	r0, #0
    29c4:	e79a      	b.n	28fc <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    29c6:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    29ca:	f012 0f30 	tst.w	r2, #48	; 0x30
    29ce:	d10d      	bne.n	29ec <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    29d0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    29d4:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    29d8:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    29dc:	f36f 02c3 	bfc	r2, #3, #1
    29e0:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    29e4:	2000      	movs	r0, #0
    29e6:	e789      	b.n	28fc <_usb_d_dev_ep_stall+0x50>
    29e8:	2000      	movs	r0, #0
    29ea:	e787      	b.n	28fc <_usb_d_dev_ep_stall+0x50>
    29ec:	2000      	movs	r0, #0
    29ee:	e785      	b.n	28fc <_usb_d_dev_ep_stall+0x50>
    29f0:	20000538 	.word	0x20000538

000029f4 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    29f4:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    29f6:	f000 040f 	and.w	r4, r0, #15
    29fa:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    29fc:	4a14      	ldr	r2, [pc, #80]	; (2a50 <_usb_d_dev_ep_read_req+0x5c>)
    29fe:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    2a00:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    2a02:	6840      	ldr	r0, [r0, #4]
    2a04:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    2a08:	2c02      	cmp	r4, #2
    2a0a:	d817      	bhi.n	2a3c <_usb_d_dev_ep_read_req+0x48>
    2a0c:	b1c9      	cbz	r1, 2a42 <_usb_d_dev_ep_read_req+0x4e>
    2a0e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2a12:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    2a16:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    2a18:	2a11      	cmp	r2, #17
    2a1a:	d115      	bne.n	2a48 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2a1c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    2a20:	f012 0f10 	tst.w	r2, #16
    2a24:	d102      	bne.n	2a2c <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    2a26:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    2a28:	bc30      	pop	{r4, r5}
    2a2a:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    2a2c:	682c      	ldr	r4, [r5, #0]
    2a2e:	686a      	ldr	r2, [r5, #4]
    2a30:	600c      	str	r4, [r1, #0]
    2a32:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2a34:	2210      	movs	r2, #16
    2a36:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    2a3a:	e7f5      	b.n	2a28 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    2a3c:	f06f 0011 	mvn.w	r0, #17
    2a40:	e7f2      	b.n	2a28 <_usb_d_dev_ep_read_req+0x34>
    2a42:	f06f 0011 	mvn.w	r0, #17
    2a46:	e7ef      	b.n	2a28 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    2a48:	f06f 0012 	mvn.w	r0, #18
    2a4c:	e7ec      	b.n	2a28 <_usb_d_dev_ep_read_req+0x34>
    2a4e:	bf00      	nop
    2a50:	20000538 	.word	0x20000538

00002a54 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    2a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a58:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    2a5a:	7a03      	ldrb	r3, [r0, #8]
    2a5c:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2a5e:	f013 030f 	ands.w	r3, r3, #15
    2a62:	f000 80c2 	beq.w	2bea <_usb_d_dev_ep_trans+0x196>
    2a66:	2e00      	cmp	r6, #0
    2a68:	bfb4      	ite	lt
    2a6a:	1c9a      	addlt	r2, r3, #2
    2a6c:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    2a6e:	4614      	mov	r4, r2
    2a70:	4969      	ldr	r1, [pc, #420]	; (2c18 <_usb_d_dev_ep_trans+0x1c4>)
    2a72:	f101 0760 	add.w	r7, r1, #96	; 0x60
    2a76:	1c55      	adds	r5, r2, #1
    2a78:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2a7c:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2a80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2a84:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2a88:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    2a8c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2a90:	428a      	cmp	r2, r1
    2a92:	d025      	beq.n	2ae0 <_usb_d_dev_ep_trans+0x8c>
    2a94:	1e55      	subs	r5, r2, #1
    2a96:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    2a98:	6841      	ldr	r1, [r0, #4]
    2a9a:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    2a9c:	2b02      	cmp	r3, #2
    2a9e:	f200 8092 	bhi.w	2bc6 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    2aa2:	6803      	ldr	r3, [r0, #0]
    2aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2aa8:	d31c      	bcc.n	2ae4 <_usb_d_dev_ep_trans+0x90>
    2aaa:	eb03 0c01 	add.w	ip, r3, r1
    2aae:	f8df e180 	ldr.w	lr, [pc, #384]	; 2c30 <_usb_d_dev_ep_trans+0x1dc>
    2ab2:	45f4      	cmp	ip, lr
    2ab4:	d816      	bhi.n	2ae4 <_usb_d_dev_ep_trans+0x90>
    2ab6:	f013 0f03 	tst.w	r3, #3
    2aba:	d113      	bne.n	2ae4 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    2abc:	2e00      	cmp	r6, #0
    2abe:	db2a      	blt.n	2b16 <_usb_d_dev_ep_trans+0xc2>
    2ac0:	428a      	cmp	r2, r1
    2ac2:	f200 809c 	bhi.w	2bfe <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    2ac6:	b34d      	cbz	r5, 2b1c <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    2ac8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2acc:	4a52      	ldr	r2, [pc, #328]	; (2c18 <_usb_d_dev_ep_trans+0x1c4>)
    2ace:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2ad6:	2b00      	cmp	r3, #0
    2ad8:	d07b      	beq.n	2bd2 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    2ada:	f04f 0800 	mov.w	r8, #0
    2ade:	e00c      	b.n	2afa <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2ae0:	4615      	mov	r5, r2
    2ae2:	e7d9      	b.n	2a98 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    2ae4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2ae8:	4a4b      	ldr	r2, [pc, #300]	; (2c18 <_usb_d_dev_ep_trans+0x1c4>)
    2aea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2af2:	2b00      	cmp	r3, #0
    2af4:	d06a      	beq.n	2bcc <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    2af6:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    2afa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2afe:	4a46      	ldr	r2, [pc, #280]	; (2c18 <_usb_d_dev_ep_trans+0x1c4>)
    2b00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b04:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2b08:	f013 0f08 	tst.w	r3, #8
    2b0c:	d009      	beq.n	2b22 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    2b0e:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2b10:	b003      	add	sp, #12
    2b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    2b16:	f04f 0800 	mov.w	r8, #0
    2b1a:	e7ee      	b.n	2afa <_usb_d_dev_ep_trans+0xa6>
    2b1c:	f04f 0800 	mov.w	r8, #0
    2b20:	e7eb      	b.n	2afa <_usb_d_dev_ep_trans+0xa6>
    2b22:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    2b24:	a801      	add	r0, sp, #4
    2b26:	4b3d      	ldr	r3, [pc, #244]	; (2c1c <_usb_d_dev_ep_trans+0x1c8>)
    2b28:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    2b2a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2b2e:	4a3a      	ldr	r2, [pc, #232]	; (2c18 <_usb_d_dev_ep_trans+0x1c4>)
    2b30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b34:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2b38:	f013 0f40 	tst.w	r3, #64	; 0x40
    2b3c:	d13c      	bne.n	2bb8 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    2b3e:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    2b42:	4b35      	ldr	r3, [pc, #212]	; (2c18 <_usb_d_dev_ep_trans+0x1c4>)
    2b44:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    2b48:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2b50:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    2b54:	a801      	add	r0, sp, #4
    2b56:	4b32      	ldr	r3, [pc, #200]	; (2c20 <_usb_d_dev_ep_trans+0x1cc>)
    2b58:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    2b5a:	f8da 3000 	ldr.w	r3, [sl]
    2b5e:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    2b62:	f8da 3004 	ldr.w	r3, [sl, #4]
    2b66:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    2b6a:	2300      	movs	r3, #0
    2b6c:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    2b70:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    2b72:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2b76:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    2b7a:	f368 1345 	bfi	r3, r8, #5, #1
    2b7e:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2b82:	f89a 3009 	ldrb.w	r3, [sl, #9]
    2b86:	b1e3      	cbz	r3, 2bc2 <_usb_d_dev_ep_trans+0x16e>
    2b88:	fab5 f585 	clz	r5, r5
    2b8c:	096d      	lsrs	r5, r5, #5
    2b8e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2b92:	4b21      	ldr	r3, [pc, #132]	; (2c18 <_usb_d_dev_ep_trans+0x1c4>)
    2b94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2b98:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    2b9c:	f365 1304 	bfi	r3, r5, #4, #1
    2ba0:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    2ba4:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    2ba6:	f04f 0100 	mov.w	r1, #0
    2baa:	4638      	mov	r0, r7
    2bac:	bfb4      	ite	lt
    2bae:	4b1d      	ldrlt	r3, [pc, #116]	; (2c24 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    2bb0:	4b1d      	ldrge	r3, [pc, #116]	; (2c28 <_usb_d_dev_ep_trans+0x1d4>)
    2bb2:	4798      	blx	r3
	return ERR_NONE;
    2bb4:	2000      	movs	r0, #0
    2bb6:	e7ab      	b.n	2b10 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    2bb8:	a801      	add	r0, sp, #4
    2bba:	4b19      	ldr	r3, [pc, #100]	; (2c20 <_usb_d_dev_ep_trans+0x1cc>)
    2bbc:	4798      	blx	r3
		return USB_BUSY;
    2bbe:	2001      	movs	r0, #1
    2bc0:	e7a6      	b.n	2b10 <_usb_d_dev_ep_trans+0xbc>
    2bc2:	2500      	movs	r5, #0
    2bc4:	e7e3      	b.n	2b8e <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    2bc6:	f06f 0011 	mvn.w	r0, #17
    2bca:	e7a1      	b.n	2b10 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    2bcc:	f06f 0012 	mvn.w	r0, #18
    2bd0:	e79e      	b.n	2b10 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    2bd2:	f06f 0011 	mvn.w	r0, #17
    2bd6:	e79b      	b.n	2b10 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    2bd8:	f06f 0012 	mvn.w	r0, #18
    2bdc:	e798      	b.n	2b10 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    2bde:	6841      	ldr	r1, [r0, #4]
    2be0:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    2be4:	4f11      	ldr	r7, [pc, #68]	; (2c2c <_usb_d_dev_ep_trans+0x1d8>)
    2be6:	2400      	movs	r4, #0
    2be8:	e75b      	b.n	2aa2 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2bea:	4a0b      	ldr	r2, [pc, #44]	; (2c18 <_usb_d_dev_ep_trans+0x1c4>)
    2bec:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    2bf0:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2bf4:	428a      	cmp	r2, r1
    2bf6:	d0f2      	beq.n	2bde <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    2bf8:	4f0c      	ldr	r7, [pc, #48]	; (2c2c <_usb_d_dev_ep_trans+0x1d8>)
    2bfa:	2400      	movs	r4, #0
    2bfc:	e74a      	b.n	2a94 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    2bfe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2c02:	4a05      	ldr	r2, [pc, #20]	; (2c18 <_usb_d_dev_ep_trans+0x1c4>)
    2c04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2c0c:	2b00      	cmp	r3, #0
    2c0e:	d0e3      	beq.n	2bd8 <_usb_d_dev_ep_trans+0x184>
    2c10:	f04f 0801 	mov.w	r8, #1
    2c14:	e771      	b.n	2afa <_usb_d_dev_ep_trans+0xa6>
    2c16:	bf00      	nop
    2c18:	20000538 	.word	0x20000538
    2c1c:	00002cf5 	.word	0x00002cf5
    2c20:	00002d03 	.word	0x00002d03
    2c24:	00001cb5 	.word	0x00001cb5
    2c28:	00001e39 	.word	0x00001e39
    2c2c:	200005ac 	.word	0x200005ac
    2c30:	20041fff 	.word	0x20041fff

00002c34 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2c34:	4b06      	ldr	r3, [pc, #24]	; (2c50 <_usb_d_dev_register_callback+0x1c>)
    2c36:	2900      	cmp	r1, #0
    2c38:	bf08      	it	eq
    2c3a:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    2c3c:	2801      	cmp	r0, #1
    2c3e:	d003      	beq.n	2c48 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2c40:	b908      	cbnz	r0, 2c46 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2c42:	4b04      	ldr	r3, [pc, #16]	; (2c54 <_usb_d_dev_register_callback+0x20>)
    2c44:	6619      	str	r1, [r3, #96]	; 0x60
    2c46:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    2c48:	4b02      	ldr	r3, [pc, #8]	; (2c54 <_usb_d_dev_register_callback+0x20>)
    2c4a:	6659      	str	r1, [r3, #100]	; 0x64
    2c4c:	4770      	bx	lr
    2c4e:	bf00      	nop
    2c50:	00001a2d 	.word	0x00001a2d
    2c54:	20000538 	.word	0x20000538

00002c58 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2c58:	4b09      	ldr	r3, [pc, #36]	; (2c80 <_usb_d_dev_register_ep_callback+0x28>)
    2c5a:	2900      	cmp	r1, #0
    2c5c:	bf08      	it	eq
    2c5e:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2c60:	4603      	mov	r3, r0
    2c62:	b130      	cbz	r0, 2c72 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2c64:	2801      	cmp	r0, #1
    2c66:	d007      	beq.n	2c78 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2c68:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2c6a:	bf04      	itt	eq
    2c6c:	4b05      	ldreq	r3, [pc, #20]	; (2c84 <_usb_d_dev_register_ep_callback+0x2c>)
    2c6e:	6719      	streq	r1, [r3, #112]	; 0x70
    2c70:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2c72:	4b04      	ldr	r3, [pc, #16]	; (2c84 <_usb_d_dev_register_ep_callback+0x2c>)
    2c74:	6699      	str	r1, [r3, #104]	; 0x68
    2c76:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2c78:	4b02      	ldr	r3, [pc, #8]	; (2c84 <_usb_d_dev_register_ep_callback+0x2c>)
    2c7a:	66d9      	str	r1, [r3, #108]	; 0x6c
    2c7c:	4770      	bx	lr
    2c7e:	bf00      	nop
    2c80:	00001a2d 	.word	0x00001a2d
    2c84:	20000538 	.word	0x20000538

00002c88 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    2c88:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2c8a:	4b01      	ldr	r3, [pc, #4]	; (2c90 <USB_0_Handler+0x8>)
    2c8c:	4798      	blx	r3
    2c8e:	bd08      	pop	{r3, pc}
    2c90:	00002029 	.word	0x00002029

00002c94 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    2c94:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2c96:	4b01      	ldr	r3, [pc, #4]	; (2c9c <USB_1_Handler+0x8>)
    2c98:	4798      	blx	r3
    2c9a:	bd08      	pop	{r3, pc}
    2c9c:	00002029 	.word	0x00002029

00002ca0 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    2ca0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2ca2:	4b01      	ldr	r3, [pc, #4]	; (2ca8 <USB_2_Handler+0x8>)
    2ca4:	4798      	blx	r3
    2ca6:	bd08      	pop	{r3, pc}
    2ca8:	00002029 	.word	0x00002029

00002cac <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    2cac:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2cae:	4b01      	ldr	r3, [pc, #4]	; (2cb4 <USB_3_Handler+0x8>)
    2cb0:	4798      	blx	r3
    2cb2:	bd08      	pop	{r3, pc}
    2cb4:	00002029 	.word	0x00002029

00002cb8 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    2cb8:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2cba:	4805      	ldr	r0, [pc, #20]	; (2cd0 <cdc_device_acm_init+0x18>)
    2cbc:	4b05      	ldr	r3, [pc, #20]	; (2cd4 <cdc_device_acm_init+0x1c>)
    2cbe:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    2cc0:	4b05      	ldr	r3, [pc, #20]	; (2cd8 <cdc_device_acm_init+0x20>)
    2cc2:	4798      	blx	r3

	usbdc_start(single_desc);
    2cc4:	4805      	ldr	r0, [pc, #20]	; (2cdc <cdc_device_acm_init+0x24>)
    2cc6:	4b06      	ldr	r3, [pc, #24]	; (2ce0 <cdc_device_acm_init+0x28>)
    2cc8:	4798      	blx	r3
	usbdc_attach();
    2cca:	4b06      	ldr	r3, [pc, #24]	; (2ce4 <cdc_device_acm_init+0x2c>)
    2ccc:	4798      	blx	r3
    2cce:	bd08      	pop	{r3, pc}
    2cd0:	20000760 	.word	0x20000760
    2cd4:	000035c1 	.word	0x000035c1
    2cd8:	00002f71 	.word	0x00002f71
    2cdc:	20000000 	.word	0x20000000
    2ce0:	00003631 	.word	0x00003631
    2ce4:	00003665 	.word	0x00003665

00002ce8 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    2ce8:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    2cea:	4b01      	ldr	r3, [pc, #4]	; (2cf0 <usb_init+0x8>)
    2cec:	4798      	blx	r3
    2cee:	bd08      	pop	{r3, pc}
    2cf0:	00002cb9 	.word	0x00002cb9

00002cf4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2cf4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    2cf8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2cfa:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2cfc:	f3bf 8f5f 	dmb	sy
    2d00:	4770      	bx	lr

00002d02 <atomic_leave_critical>:
    2d02:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    2d06:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2d08:	f383 8810 	msr	PRIMASK, r3
    2d0c:	4770      	bx	lr
	...

00002d10 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2d10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d12:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    2d14:	780b      	ldrb	r3, [r1, #0]
    2d16:	f3c3 1441 	ubfx	r4, r3, #5, #2
    2d1a:	2c01      	cmp	r4, #1
    2d1c:	d15e      	bne.n	2ddc <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2d1e:	888c      	ldrh	r4, [r1, #4]
    2d20:	4d35      	ldr	r5, [pc, #212]	; (2df8 <cdcdf_acm_req+0xe8>)
    2d22:	782d      	ldrb	r5, [r5, #0]
    2d24:	42a5      	cmp	r5, r4
    2d26:	d003      	beq.n	2d30 <cdcdf_acm_req+0x20>
    2d28:	4d33      	ldr	r5, [pc, #204]	; (2df8 <cdcdf_acm_req+0xe8>)
    2d2a:	786d      	ldrb	r5, [r5, #1]
    2d2c:	42a5      	cmp	r5, r4
    2d2e:	d158      	bne.n	2de2 <cdcdf_acm_req+0xd2>
    2d30:	4616      	mov	r6, r2
    2d32:	460c      	mov	r4, r1
    2d34:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    2d36:	f013 0f80 	tst.w	r3, #128	; 0x80
    2d3a:	d10c      	bne.n	2d56 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    2d3c:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    2d3e:	4b2f      	ldr	r3, [pc, #188]	; (2dfc <cdcdf_acm_req+0xec>)
    2d40:	4798      	blx	r3
    2d42:	4601      	mov	r1, r0
	switch (req->bRequest) {
    2d44:	7863      	ldrb	r3, [r4, #1]
    2d46:	2b20      	cmp	r3, #32
    2d48:	d013      	beq.n	2d72 <cdcdf_acm_req+0x62>
    2d4a:	2b22      	cmp	r3, #34	; 0x22
    2d4c:	d032      	beq.n	2db4 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    2d4e:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    2d52:	b003      	add	sp, #12
    2d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    2d56:	2a01      	cmp	r2, #1
    2d58:	d046      	beq.n	2de8 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    2d5a:	784b      	ldrb	r3, [r1, #1]
    2d5c:	2b21      	cmp	r3, #33	; 0x21
    2d5e:	d145      	bne.n	2dec <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2d60:	88cb      	ldrh	r3, [r1, #6]
    2d62:	2b07      	cmp	r3, #7
    2d64:	d145      	bne.n	2df2 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2d66:	2300      	movs	r3, #0
    2d68:	2207      	movs	r2, #7
    2d6a:	4925      	ldr	r1, [pc, #148]	; (2e00 <cdcdf_acm_req+0xf0>)
    2d6c:	4c25      	ldr	r4, [pc, #148]	; (2e04 <cdcdf_acm_req+0xf4>)
    2d6e:	47a0      	blx	r4
    2d70:	e7ef      	b.n	2d52 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2d72:	2f07      	cmp	r7, #7
    2d74:	d12b      	bne.n	2dce <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    2d76:	b1be      	cbz	r6, 2da8 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2d78:	6800      	ldr	r0, [r0, #0]
    2d7a:	9000      	str	r0, [sp, #0]
    2d7c:	888a      	ldrh	r2, [r1, #4]
    2d7e:	798b      	ldrb	r3, [r1, #6]
    2d80:	f8ad 2004 	strh.w	r2, [sp, #4]
    2d84:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2d88:	4b1b      	ldr	r3, [pc, #108]	; (2df8 <cdcdf_acm_req+0xe8>)
    2d8a:	691b      	ldr	r3, [r3, #16]
    2d8c:	b113      	cbz	r3, 2d94 <cdcdf_acm_req+0x84>
    2d8e:	4668      	mov	r0, sp
    2d90:	4798      	blx	r3
    2d92:	b1f8      	cbz	r0, 2dd4 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    2d94:	4b18      	ldr	r3, [pc, #96]	; (2df8 <cdcdf_acm_req+0xe8>)
    2d96:	aa02      	add	r2, sp, #8
    2d98:	e912 0003 	ldmdb	r2, {r0, r1}
    2d9c:	6098      	str	r0, [r3, #8]
    2d9e:	8199      	strh	r1, [r3, #12]
    2da0:	0c09      	lsrs	r1, r1, #16
    2da2:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    2da4:	2000      	movs	r0, #0
    2da6:	e7d4      	b.n	2d52 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2da8:	2300      	movs	r3, #0
    2daa:	2207      	movs	r2, #7
    2dac:	4628      	mov	r0, r5
    2dae:	4c15      	ldr	r4, [pc, #84]	; (2e04 <cdcdf_acm_req+0xf4>)
    2db0:	47a0      	blx	r4
    2db2:	e7ce      	b.n	2d52 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    2db4:	2300      	movs	r3, #0
    2db6:	461a      	mov	r2, r3
    2db8:	4619      	mov	r1, r3
    2dba:	4618      	mov	r0, r3
    2dbc:	4d11      	ldr	r5, [pc, #68]	; (2e04 <cdcdf_acm_req+0xf4>)
    2dbe:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    2dc0:	4b0d      	ldr	r3, [pc, #52]	; (2df8 <cdcdf_acm_req+0xe8>)
    2dc2:	695b      	ldr	r3, [r3, #20]
    2dc4:	b143      	cbz	r3, 2dd8 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    2dc6:	8860      	ldrh	r0, [r4, #2]
    2dc8:	4798      	blx	r3
		return ERR_NONE;
    2dca:	2000      	movs	r0, #0
    2dcc:	e7c1      	b.n	2d52 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    2dce:	f04f 30ff 	mov.w	r0, #4294967295
    2dd2:	e7be      	b.n	2d52 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    2dd4:	2000      	movs	r0, #0
    2dd6:	e7bc      	b.n	2d52 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    2dd8:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    2dda:	e7ba      	b.n	2d52 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    2ddc:	f06f 0009 	mvn.w	r0, #9
    2de0:	e7b7      	b.n	2d52 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    2de2:	f06f 0009 	mvn.w	r0, #9
    2de6:	e7b4      	b.n	2d52 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    2de8:	2000      	movs	r0, #0
    2dea:	e7b2      	b.n	2d52 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    2dec:	f06f 000c 	mvn.w	r0, #12
    2df0:	e7af      	b.n	2d52 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    2df2:	f04f 30ff 	mov.w	r0, #4294967295
    2df6:	e7ac      	b.n	2d52 <cdcdf_acm_req+0x42>
    2df8:	200007a0 	.word	0x200007a0
    2dfc:	00003671 	.word	0x00003671
    2e00:	200007a8 	.word	0x200007a8
    2e04:	0000314d 	.word	0x0000314d

00002e08 <cdcdf_acm_ctrl>:
{
    2e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e0c:	b083      	sub	sp, #12
    2e0e:	4616      	mov	r6, r2
	switch (ctrl) {
    2e10:	2901      	cmp	r1, #1
    2e12:	d066      	beq.n	2ee2 <cdcdf_acm_ctrl+0xda>
    2e14:	b141      	cbz	r1, 2e28 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    2e16:	2902      	cmp	r1, #2
    2e18:	bf0c      	ite	eq
    2e1a:	f06f 001a 	mvneq.w	r0, #26
    2e1e:	f06f 000c 	mvnne.w	r0, #12
}
    2e22:	b003      	add	sp, #12
    2e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2e28:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    2e2c:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    2e2e:	2800      	cmp	r0, #0
    2e30:	f000 8085 	beq.w	2f3e <cdcdf_acm_ctrl+0x136>
    2e34:	f10a 3bff 	add.w	fp, sl, #4294967295
    2e38:	f10a 0301 	add.w	r3, sl, #1
    2e3c:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2e3e:	4f46      	ldr	r7, [pc, #280]	; (2f58 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    2e40:	f8df 9124 	ldr.w	r9, [pc, #292]	; 2f68 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2e44:	f8df 8124 	ldr.w	r8, [pc, #292]	; 2f6c <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    2e48:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    2e4a:	7943      	ldrb	r3, [r0, #5]
    2e4c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    2e50:	2b02      	cmp	r3, #2
    2e52:	d002      	beq.n	2e5a <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    2e54:	f06f 0009 	mvn.w	r0, #9
    2e58:	e7e3      	b.n	2e22 <cdcdf_acm_ctrl+0x1a>
    2e5a:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    2e5e:	f89b 3000 	ldrb.w	r3, [fp]
    2e62:	429a      	cmp	r2, r3
    2e64:	d06e      	beq.n	2f44 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    2e66:	2bff      	cmp	r3, #255	; 0xff
    2e68:	d16f      	bne.n	2f4a <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    2e6a:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    2e6e:	2205      	movs	r2, #5
    2e70:	6871      	ldr	r1, [r6, #4]
    2e72:	4b3a      	ldr	r3, [pc, #232]	; (2f5c <cdcdf_acm_ctrl+0x154>)
    2e74:	4798      	blx	r3
		while (NULL != ep) {
    2e76:	4604      	mov	r4, r0
    2e78:	b1f8      	cbz	r0, 2eba <cdcdf_acm_ctrl+0xb2>
    2e7a:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    2e7e:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    2e80:	7963      	ldrb	r3, [r4, #5]
    2e82:	7922      	ldrb	r2, [r4, #4]
    2e84:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2e88:	b292      	uxth	r2, r2
    2e8a:	78e1      	ldrb	r1, [r4, #3]
    2e8c:	4628      	mov	r0, r5
    2e8e:	47b8      	blx	r7
    2e90:	2800      	cmp	r0, #0
    2e92:	d15d      	bne.n	2f50 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2e94:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    2e98:	bf14      	ite	ne
    2e9a:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    2e9e:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    2ea2:	4628      	mov	r0, r5
    2ea4:	47c8      	blx	r9
			desc->sod = ep;
    2ea6:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2ea8:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2eaa:	6871      	ldr	r1, [r6, #4]
    2eac:	4420      	add	r0, r4
    2eae:	47c0      	blx	r8
		while (NULL != ep) {
    2eb0:	4604      	mov	r4, r0
    2eb2:	2800      	cmp	r0, #0
    2eb4:	d1e3      	bne.n	2e7e <cdcdf_acm_ctrl+0x76>
    2eb6:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    2eba:	6833      	ldr	r3, [r6, #0]
    2ebc:	7818      	ldrb	r0, [r3, #0]
    2ebe:	2204      	movs	r2, #4
    2ec0:	6871      	ldr	r1, [r6, #4]
    2ec2:	4418      	add	r0, r3
    2ec4:	4b25      	ldr	r3, [pc, #148]	; (2f5c <cdcdf_acm_ctrl+0x154>)
    2ec6:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    2ec8:	9b00      	ldr	r3, [sp, #0]
    2eca:	459b      	cmp	fp, r3
    2ecc:	d004      	beq.n	2ed8 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    2ece:	2800      	cmp	r0, #0
    2ed0:	d1ba      	bne.n	2e48 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    2ed2:	f06f 0009 	mvn.w	r0, #9
    2ed6:	e7a4      	b.n	2e22 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    2ed8:	2201      	movs	r2, #1
    2eda:	4b21      	ldr	r3, [pc, #132]	; (2f60 <cdcdf_acm_ctrl+0x158>)
    2edc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    2ede:	2000      	movs	r0, #0
    2ee0:	e79f      	b.n	2e22 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2ee2:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    2ee4:	b142      	cbz	r2, 2ef8 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    2ee6:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2ee8:	795b      	ldrb	r3, [r3, #5]
    2eea:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    2eee:	2b02      	cmp	r3, #2
    2ef0:	d002      	beq.n	2ef8 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    2ef2:	f06f 0009 	mvn.w	r0, #9
    2ef6:	e794      	b.n	2e22 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    2ef8:	7823      	ldrb	r3, [r4, #0]
    2efa:	2bff      	cmp	r3, #255	; 0xff
    2efc:	d008      	beq.n	2f10 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    2efe:	23ff      	movs	r3, #255	; 0xff
    2f00:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    2f02:	78a0      	ldrb	r0, [r4, #2]
    2f04:	4298      	cmp	r0, r3
    2f06:	d003      	beq.n	2f10 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2f08:	4b16      	ldr	r3, [pc, #88]	; (2f64 <cdcdf_acm_ctrl+0x15c>)
    2f0a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2f0c:	23ff      	movs	r3, #255	; 0xff
    2f0e:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    2f10:	7863      	ldrb	r3, [r4, #1]
    2f12:	2bff      	cmp	r3, #255	; 0xff
    2f14:	d008      	beq.n	2f28 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    2f16:	23ff      	movs	r3, #255	; 0xff
    2f18:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    2f1a:	78e0      	ldrb	r0, [r4, #3]
    2f1c:	4298      	cmp	r0, r3
    2f1e:	d003      	beq.n	2f28 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2f20:	4b10      	ldr	r3, [pc, #64]	; (2f64 <cdcdf_acm_ctrl+0x15c>)
    2f22:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2f24:	23ff      	movs	r3, #255	; 0xff
    2f26:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    2f28:	7920      	ldrb	r0, [r4, #4]
    2f2a:	28ff      	cmp	r0, #255	; 0xff
    2f2c:	d003      	beq.n	2f36 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    2f2e:	4b0d      	ldr	r3, [pc, #52]	; (2f64 <cdcdf_acm_ctrl+0x15c>)
    2f30:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    2f32:	23ff      	movs	r3, #255	; 0xff
    2f34:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    2f36:	2000      	movs	r0, #0
    2f38:	4b09      	ldr	r3, [pc, #36]	; (2f60 <cdcdf_acm_ctrl+0x158>)
    2f3a:	7158      	strb	r0, [r3, #5]
    2f3c:	e771      	b.n	2e22 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    2f3e:	f06f 0009 	mvn.w	r0, #9
    2f42:	e76e      	b.n	2e22 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    2f44:	f06f 0011 	mvn.w	r0, #17
    2f48:	e76b      	b.n	2e22 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    2f4a:	f06f 001b 	mvn.w	r0, #27
    2f4e:	e768      	b.n	2e22 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    2f50:	f06f 0013 	mvn.w	r0, #19
    2f54:	e765      	b.n	2e22 <cdcdf_acm_ctrl+0x1a>
    2f56:	bf00      	nop
    2f58:	00000f71 	.word	0x00000f71
    2f5c:	00003691 	.word	0x00003691
    2f60:	200007a0 	.word	0x200007a0
    2f64:	00000fd9 	.word	0x00000fd9
    2f68:	00001005 	.word	0x00001005
    2f6c:	000036cb 	.word	0x000036cb

00002f70 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2f70:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    2f72:	4b0a      	ldr	r3, [pc, #40]	; (2f9c <cdcdf_acm_init+0x2c>)
    2f74:	4798      	blx	r3
    2f76:	2801      	cmp	r0, #1
    2f78:	d80c      	bhi.n	2f94 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    2f7a:	4809      	ldr	r0, [pc, #36]	; (2fa0 <cdcdf_acm_init+0x30>)
    2f7c:	4b09      	ldr	r3, [pc, #36]	; (2fa4 <cdcdf_acm_init+0x34>)
    2f7e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2f80:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    2f82:	3018      	adds	r0, #24
    2f84:	4b08      	ldr	r3, [pc, #32]	; (2fa8 <cdcdf_acm_init+0x38>)
    2f86:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2f88:	4908      	ldr	r1, [pc, #32]	; (2fac <cdcdf_acm_init+0x3c>)
    2f8a:	2001      	movs	r0, #1
    2f8c:	4b08      	ldr	r3, [pc, #32]	; (2fb0 <cdcdf_acm_init+0x40>)
    2f8e:	4798      	blx	r3
	return ERR_NONE;
    2f90:	2000      	movs	r0, #0
    2f92:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    2f94:	f06f 0010 	mvn.w	r0, #16
}
    2f98:	bd08      	pop	{r3, pc}
    2f9a:	bf00      	nop
    2f9c:	0000367d 	.word	0x0000367d
    2fa0:	200007a0 	.word	0x200007a0
    2fa4:	00002e09 	.word	0x00002e09
    2fa8:	0000361d 	.word	0x0000361d
    2fac:	20000060 	.word	0x20000060
    2fb0:	00003589 	.word	0x00003589

00002fb4 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    2fb4:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2fb6:	4b07      	ldr	r3, [pc, #28]	; (2fd4 <usbdc_unconfig+0x20>)
    2fb8:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    2fba:	b14c      	cbz	r4, 2fd0 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    2fbc:	2600      	movs	r6, #0
    2fbe:	2501      	movs	r5, #1
    2fc0:	6863      	ldr	r3, [r4, #4]
    2fc2:	4632      	mov	r2, r6
    2fc4:	4629      	mov	r1, r5
    2fc6:	4620      	mov	r0, r4
    2fc8:	4798      	blx	r3
		func = func->next;
    2fca:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    2fcc:	2c00      	cmp	r4, #0
    2fce:	d1f7      	bne.n	2fc0 <usbdc_unconfig+0xc>
    2fd0:	bd70      	pop	{r4, r5, r6, pc}
    2fd2:	bf00      	nop
    2fd4:	200007c4 	.word	0x200007c4

00002fd8 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    2fd8:	b570      	push	{r4, r5, r6, lr}
    2fda:	4606      	mov	r6, r0
    2fdc:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    2fde:	4b07      	ldr	r3, [pc, #28]	; (2ffc <usbdc_change_notify+0x24>)
    2fe0:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    2fe2:	b91c      	cbnz	r4, 2fec <usbdc_change_notify+0x14>
    2fe4:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    2fe6:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    2fe8:	2c00      	cmp	r4, #0
    2fea:	d0fb      	beq.n	2fe4 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    2fec:	6863      	ldr	r3, [r4, #4]
    2fee:	2b00      	cmp	r3, #0
    2ff0:	d0f9      	beq.n	2fe6 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    2ff2:	4629      	mov	r1, r5
    2ff4:	4630      	mov	r0, r6
    2ff6:	4798      	blx	r3
    2ff8:	e7f5      	b.n	2fe6 <usbdc_change_notify+0xe>
    2ffa:	bf00      	nop
    2ffc:	200007c4 	.word	0x200007c4

00003000 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3002:	4607      	mov	r7, r0
    3004:	460e      	mov	r6, r1
    3006:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3008:	4b0c      	ldr	r3, [pc, #48]	; (303c <usbdc_request_handler+0x3c>)
    300a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    300c:	b91c      	cbnz	r4, 3016 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    300e:	2000      	movs	r0, #0
    3010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    3012:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    3014:	b16c      	cbz	r4, 3032 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    3016:	6863      	ldr	r3, [r4, #4]
    3018:	2b00      	cmp	r3, #0
    301a:	d0fa      	beq.n	3012 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    301c:	462a      	mov	r2, r5
    301e:	4631      	mov	r1, r6
    3020:	4638      	mov	r0, r7
    3022:	4798      	blx	r3
			if (0 == rc) {
    3024:	b138      	cbz	r0, 3036 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    3026:	f110 0f0a 	cmn.w	r0, #10
    302a:	d0f2      	beq.n	3012 <usbdc_request_handler+0x12>
				return -1;
    302c:	f04f 30ff 	mov.w	r0, #4294967295
}
    3030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    3032:	2000      	movs	r0, #0
    3034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    3036:	2001      	movs	r0, #1
    3038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    303a:	bf00      	nop
    303c:	200007c4 	.word	0x200007c4

00003040 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    3040:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    3042:	4b06      	ldr	r3, [pc, #24]	; (305c <usbd_sof_cb+0x1c>)
    3044:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    3046:	b91c      	cbnz	r4, 3050 <usbd_sof_cb+0x10>
    3048:	bd10      	pop	{r4, pc}
		sof = sof->next;
    304a:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    304c:	2c00      	cmp	r4, #0
    304e:	d0fb      	beq.n	3048 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    3050:	6863      	ldr	r3, [r4, #4]
    3052:	2b00      	cmp	r3, #0
    3054:	d0f9      	beq.n	304a <usbd_sof_cb+0xa>
			sof->cb();
    3056:	4798      	blx	r3
    3058:	e7f7      	b.n	304a <usbd_sof_cb+0xa>
    305a:	bf00      	nop
    305c:	200007c4 	.word	0x200007c4

00003060 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    3060:	b510      	push	{r4, lr}
    3062:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    3064:	b119      	cbz	r1, 306e <usbdc_cb_ctl_done+0xe>
    3066:	2901      	cmp	r1, #1
    3068:	d026      	beq.n	30b8 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    306a:	2000      	movs	r0, #0
    306c:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    306e:	7813      	ldrb	r3, [r2, #0]
    3070:	2b00      	cmp	r3, #0
    3072:	d1fa      	bne.n	306a <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    3074:	7853      	ldrb	r3, [r2, #1]
    3076:	2b05      	cmp	r3, #5
    3078:	d00f      	beq.n	309a <usbdc_cb_ctl_done+0x3a>
    307a:	2b09      	cmp	r3, #9
    307c:	d1f5      	bne.n	306a <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    307e:	8852      	ldrh	r2, [r2, #2]
    3080:	4b10      	ldr	r3, [pc, #64]	; (30c4 <usbdc_cb_ctl_done+0x64>)
    3082:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    3084:	8863      	ldrh	r3, [r4, #2]
    3086:	2b00      	cmp	r3, #0
    3088:	bf14      	ite	ne
    308a:	2104      	movne	r1, #4
    308c:	2103      	moveq	r1, #3
    308e:	4b0d      	ldr	r3, [pc, #52]	; (30c4 <usbdc_cb_ctl_done+0x64>)
    3090:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3092:	2001      	movs	r0, #1
    3094:	4b0c      	ldr	r3, [pc, #48]	; (30c8 <usbdc_cb_ctl_done+0x68>)
    3096:	4798      	blx	r3
    3098:	e7e7      	b.n	306a <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    309a:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    309c:	b2c0      	uxtb	r0, r0
    309e:	4b0b      	ldr	r3, [pc, #44]	; (30cc <usbdc_cb_ctl_done+0x6c>)
    30a0:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    30a2:	8863      	ldrh	r3, [r4, #2]
    30a4:	2b00      	cmp	r3, #0
    30a6:	bf14      	ite	ne
    30a8:	2103      	movne	r1, #3
    30aa:	2102      	moveq	r1, #2
    30ac:	4b05      	ldr	r3, [pc, #20]	; (30c4 <usbdc_cb_ctl_done+0x64>)
    30ae:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    30b0:	2001      	movs	r0, #1
    30b2:	4b05      	ldr	r3, [pc, #20]	; (30c8 <usbdc_cb_ctl_done+0x68>)
    30b4:	4798      	blx	r3
    30b6:	e7d8      	b.n	306a <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    30b8:	2201      	movs	r2, #1
    30ba:	4621      	mov	r1, r4
    30bc:	2000      	movs	r0, #0
    30be:	4b04      	ldr	r3, [pc, #16]	; (30d0 <usbdc_cb_ctl_done+0x70>)
    30c0:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    30c2:	e7d2      	b.n	306a <usbdc_cb_ctl_done+0xa>
    30c4:	200007c4 	.word	0x200007c4
    30c8:	00002fd9 	.word	0x00002fd9
    30cc:	00000f65 	.word	0x00000f65
    30d0:	00003001 	.word	0x00003001

000030d4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    30d4:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    30d6:	4b0d      	ldr	r3, [pc, #52]	; (310c <usbdc_reset+0x38>)
    30d8:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    30da:	4d0d      	ldr	r5, [pc, #52]	; (3110 <usbdc_reset+0x3c>)
    30dc:	2602      	movs	r6, #2
    30de:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    30e0:	2400      	movs	r4, #0
    30e2:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    30e4:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    30e6:	4620      	mov	r0, r4
    30e8:	4b0a      	ldr	r3, [pc, #40]	; (3114 <usbdc_reset+0x40>)
    30ea:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    30ec:	7f28      	ldrb	r0, [r5, #28]
    30ee:	4b0a      	ldr	r3, [pc, #40]	; (3118 <usbdc_reset+0x44>)
    30f0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    30f2:	4a0a      	ldr	r2, [pc, #40]	; (311c <usbdc_reset+0x48>)
    30f4:	4621      	mov	r1, r4
    30f6:	4620      	mov	r0, r4
    30f8:	4d09      	ldr	r5, [pc, #36]	; (3120 <usbdc_reset+0x4c>)
    30fa:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    30fc:	4a09      	ldr	r2, [pc, #36]	; (3124 <usbdc_reset+0x50>)
    30fe:	4631      	mov	r1, r6
    3100:	4620      	mov	r0, r4
    3102:	47a8      	blx	r5
	usb_d_ep_enable(0);
    3104:	4620      	mov	r0, r4
    3106:	4b08      	ldr	r3, [pc, #32]	; (3128 <usbdc_reset+0x54>)
    3108:	4798      	blx	r3
    310a:	bd70      	pop	{r4, r5, r6, pc}
    310c:	00002fb5 	.word	0x00002fb5
    3110:	200007c4 	.word	0x200007c4
    3114:	00000fd9 	.word	0x00000fd9
    3118:	00000fc5 	.word	0x00000fc5
    311c:	0000316d 	.word	0x0000316d
    3120:	000011d9 	.word	0x000011d9
    3124:	00003061 	.word	0x00003061
    3128:	00001005 	.word	0x00001005

0000312c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    312c:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    312e:	b110      	cbz	r0, 3136 <usbd_event_cb+0xa>
    3130:	2801      	cmp	r0, #1
    3132:	d004      	beq.n	313e <usbd_event_cb+0x12>
    3134:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    3136:	2000      	movs	r0, #0
    3138:	4b02      	ldr	r3, [pc, #8]	; (3144 <usbd_event_cb+0x18>)
    313a:	4798      	blx	r3
		break;
    313c:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    313e:	4b02      	ldr	r3, [pc, #8]	; (3148 <usbd_event_cb+0x1c>)
    3140:	4798      	blx	r3
    3142:	bd08      	pop	{r3, pc}
    3144:	00002fd9 	.word	0x00002fd9
    3148:	000030d5 	.word	0x000030d5

0000314c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    314c:	b500      	push	{lr}
    314e:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    3150:	9101      	str	r1, [sp, #4]
    3152:	9202      	str	r2, [sp, #8]
    3154:	f88d 000c 	strb.w	r0, [sp, #12]
    3158:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    315c:	a801      	add	r0, sp, #4
    315e:	4b02      	ldr	r3, [pc, #8]	; (3168 <usbdc_xfer+0x1c>)
    3160:	4798      	blx	r3
}
    3162:	b005      	add	sp, #20
    3164:	f85d fb04 	ldr.w	pc, [sp], #4
    3168:	00001051 	.word	0x00001051

0000316c <usbdc_cb_ctl_req>:
{
    316c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3170:	b083      	sub	sp, #12
    3172:	4605      	mov	r5, r0
    3174:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3176:	2200      	movs	r2, #0
    3178:	4b9b      	ldr	r3, [pc, #620]	; (33e8 <usbdc_cb_ctl_req+0x27c>)
    317a:	4798      	blx	r3
    317c:	f1b0 3fff 	cmp.w	r0, #4294967295
    3180:	d00b      	beq.n	319a <usbdc_cb_ctl_req+0x2e>
    3182:	2801      	cmp	r0, #1
    3184:	f000 81e3 	beq.w	354e <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    3188:	7823      	ldrb	r3, [r4, #0]
    318a:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    318e:	d008      	beq.n	31a2 <usbdc_cb_ctl_req+0x36>
    3190:	2a80      	cmp	r2, #128	; 0x80
    3192:	f000 80f4 	beq.w	337e <usbdc_cb_ctl_req+0x212>
		return false;
    3196:	2000      	movs	r0, #0
    3198:	e000      	b.n	319c <usbdc_cb_ctl_req+0x30>
		return false;
    319a:	2000      	movs	r0, #0
}
    319c:	b003      	add	sp, #12
    319e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    31a2:	7862      	ldrb	r2, [r4, #1]
    31a4:	3a01      	subs	r2, #1
    31a6:	2a0a      	cmp	r2, #10
    31a8:	f200 81d3 	bhi.w	3552 <usbdc_cb_ctl_req+0x3e6>
    31ac:	e8df f012 	tbh	[pc, r2, lsl #1]
    31b0:	01d10060 	.word	0x01d10060
    31b4:	01d10076 	.word	0x01d10076
    31b8:	01d1000b 	.word	0x01d1000b
    31bc:	01d101d1 	.word	0x01d101d1
    31c0:	01d10015 	.word	0x01d10015
    31c4:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    31c6:	2301      	movs	r3, #1
    31c8:	2200      	movs	r2, #0
    31ca:	4611      	mov	r1, r2
    31cc:	4628      	mov	r0, r5
    31ce:	4c87      	ldr	r4, [pc, #540]	; (33ec <usbdc_cb_ctl_req+0x280>)
    31d0:	47a0      	blx	r4
    31d2:	fab0 f080 	clz	r0, r0
    31d6:	0940      	lsrs	r0, r0, #5
    31d8:	e7e0      	b.n	319c <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    31da:	8862      	ldrh	r2, [r4, #2]
    31dc:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    31de:	b1ca      	cbz	r2, 3214 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    31e0:	4b83      	ldr	r3, [pc, #524]	; (33f0 <usbdc_cb_ctl_req+0x284>)
    31e2:	681b      	ldr	r3, [r3, #0]
    31e4:	6859      	ldr	r1, [r3, #4]
    31e6:	6818      	ldr	r0, [r3, #0]
    31e8:	4b82      	ldr	r3, [pc, #520]	; (33f4 <usbdc_cb_ctl_req+0x288>)
    31ea:	4798      	blx	r3
	if (NULL == cfg_desc) {
    31ec:	2800      	cmp	r0, #0
    31ee:	f000 81be 	beq.w	356e <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    31f2:	78c2      	ldrb	r2, [r0, #3]
    31f4:	7881      	ldrb	r1, [r0, #2]
    31f6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    31fa:	fa10 f181 	uxtah	r1, r0, r1
    31fe:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3200:	2204      	movs	r2, #4
    3202:	4b7d      	ldr	r3, [pc, #500]	; (33f8 <usbdc_cb_ctl_req+0x28c>)
    3204:	4798      	blx	r3
    3206:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    3208:	b130      	cbz	r0, 3218 <usbdc_cb_ctl_req+0xac>
    320a:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    320c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 33f0 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3210:	4f79      	ldr	r7, [pc, #484]	; (33f8 <usbdc_cb_ctl_req+0x28c>)
    3212:	e018      	b.n	3246 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    3214:	4b79      	ldr	r3, [pc, #484]	; (33fc <usbdc_cb_ctl_req+0x290>)
    3216:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3218:	2301      	movs	r3, #1
    321a:	2200      	movs	r2, #0
    321c:	4611      	mov	r1, r2
    321e:	4628      	mov	r0, r5
    3220:	4c72      	ldr	r4, [pc, #456]	; (33ec <usbdc_cb_ctl_req+0x280>)
    3222:	47a0      	blx	r4
    3224:	fab0 f080 	clz	r0, r0
    3228:	0940      	lsrs	r0, r0, #5
    322a:	e7b7      	b.n	319c <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    322c:	464c      	mov	r4, r9
    322e:	e000      	b.n	3232 <usbdc_cb_ctl_req+0xc6>
    3230:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    3232:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    3234:	7803      	ldrb	r3, [r0, #0]
    3236:	4418      	add	r0, r3
    3238:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    323a:	2204      	movs	r2, #4
    323c:	9901      	ldr	r1, [sp, #4]
    323e:	47b8      	blx	r7
    3240:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    3242:	2800      	cmp	r0, #0
    3244:	d0e8      	beq.n	3218 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    3246:	f890 9002 	ldrb.w	r9, [r0, #2]
    324a:	45a1      	cmp	r9, r4
    324c:	d0f1      	beq.n	3232 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    324e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    3252:	2c00      	cmp	r4, #0
    3254:	d0ea      	beq.n	322c <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    3256:	2600      	movs	r6, #0
    3258:	6863      	ldr	r3, [r4, #4]
    325a:	466a      	mov	r2, sp
    325c:	4631      	mov	r1, r6
    325e:	4620      	mov	r0, r4
    3260:	4798      	blx	r3
    3262:	2800      	cmp	r0, #0
    3264:	d0e4      	beq.n	3230 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    3266:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    3268:	2c00      	cmp	r4, #0
    326a:	d1f5      	bne.n	3258 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    326c:	464c      	mov	r4, r9
    326e:	e7e0      	b.n	3232 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3270:	f003 031f 	and.w	r3, r3, #31
    3274:	2b02      	cmp	r3, #2
    3276:	f040 816e 	bne.w	3556 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    327a:	88e3      	ldrh	r3, [r4, #6]
    327c:	b10b      	cbz	r3, 3282 <usbdc_cb_ctl_req+0x116>
			return false;
    327e:	2000      	movs	r0, #0
    3280:	e78c      	b.n	319c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    3282:	88a0      	ldrh	r0, [r4, #4]
    3284:	2100      	movs	r1, #0
    3286:	b2c0      	uxtb	r0, r0
    3288:	4b5d      	ldr	r3, [pc, #372]	; (3400 <usbdc_cb_ctl_req+0x294>)
    328a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    328c:	2301      	movs	r3, #1
    328e:	2200      	movs	r2, #0
    3290:	4611      	mov	r1, r2
    3292:	4628      	mov	r0, r5
    3294:	4c55      	ldr	r4, [pc, #340]	; (33ec <usbdc_cb_ctl_req+0x280>)
    3296:	47a0      	blx	r4
		return true;
    3298:	2001      	movs	r0, #1
    329a:	e77f      	b.n	319c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    329c:	f003 031f 	and.w	r3, r3, #31
    32a0:	2b02      	cmp	r3, #2
    32a2:	f040 815a 	bne.w	355a <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    32a6:	88e3      	ldrh	r3, [r4, #6]
    32a8:	b10b      	cbz	r3, 32ae <usbdc_cb_ctl_req+0x142>
			return false;
    32aa:	2000      	movs	r0, #0
    32ac:	e776      	b.n	319c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    32ae:	88a0      	ldrh	r0, [r4, #4]
    32b0:	2101      	movs	r1, #1
    32b2:	b2c0      	uxtb	r0, r0
    32b4:	4b52      	ldr	r3, [pc, #328]	; (3400 <usbdc_cb_ctl_req+0x294>)
    32b6:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    32b8:	2301      	movs	r3, #1
    32ba:	2200      	movs	r2, #0
    32bc:	4611      	mov	r1, r2
    32be:	4628      	mov	r0, r5
    32c0:	4c4a      	ldr	r4, [pc, #296]	; (33ec <usbdc_cb_ctl_req+0x280>)
    32c2:	47a0      	blx	r4
		return true;
    32c4:	2001      	movs	r0, #1
    32c6:	e769      	b.n	319c <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    32c8:	8866      	ldrh	r6, [r4, #2]
    32ca:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    32cc:	4a48      	ldr	r2, [pc, #288]	; (33f0 <usbdc_cb_ctl_req+0x284>)
    32ce:	6813      	ldr	r3, [r2, #0]
    32d0:	7ed2      	ldrb	r2, [r2, #27]
    32d2:	6859      	ldr	r1, [r3, #4]
    32d4:	6818      	ldr	r0, [r3, #0]
    32d6:	4b47      	ldr	r3, [pc, #284]	; (33f4 <usbdc_cb_ctl_req+0x288>)
    32d8:	4798      	blx	r3
	if (NULL == ifc) {
    32da:	2800      	cmp	r0, #0
    32dc:	d045      	beq.n	336a <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    32de:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    32e0:	78c2      	ldrb	r2, [r0, #3]
    32e2:	7881      	ldrb	r1, [r0, #2]
    32e4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    32e8:	fa10 f181 	uxtah	r1, r0, r1
    32ec:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    32ee:	2204      	movs	r2, #4
    32f0:	4b41      	ldr	r3, [pc, #260]	; (33f8 <usbdc_cb_ctl_req+0x28c>)
    32f2:	4798      	blx	r3
    32f4:	4603      	mov	r3, r0
    32f6:	2800      	cmp	r0, #0
    32f8:	d039      	beq.n	336e <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    32fa:	2704      	movs	r7, #4
    32fc:	4d3e      	ldr	r5, [pc, #248]	; (33f8 <usbdc_cb_ctl_req+0x28c>)
    32fe:	e008      	b.n	3312 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    3300:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    3302:	7803      	ldrb	r3, [r0, #0]
    3304:	4418      	add	r0, r3
    3306:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3308:	463a      	mov	r2, r7
    330a:	9901      	ldr	r1, [sp, #4]
    330c:	47a8      	blx	r5
		if (NULL == ifc) {
    330e:	4603      	mov	r3, r0
    3310:	b378      	cbz	r0, 3372 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    3312:	789a      	ldrb	r2, [r3, #2]
    3314:	42a2      	cmp	r2, r4
    3316:	d1f3      	bne.n	3300 <usbdc_cb_ctl_req+0x194>
    3318:	78da      	ldrb	r2, [r3, #3]
    331a:	42b2      	cmp	r2, r6
    331c:	d1f0      	bne.n	3300 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    331e:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    3320:	4b33      	ldr	r3, [pc, #204]	; (33f0 <usbdc_cb_ctl_req+0x284>)
    3322:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    3324:	b33d      	cbz	r5, 3376 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3326:	2701      	movs	r7, #1
    3328:	686b      	ldr	r3, [r5, #4]
    332a:	466a      	mov	r2, sp
    332c:	4639      	mov	r1, r7
    332e:	4628      	mov	r0, r5
    3330:	4798      	blx	r3
    3332:	b120      	cbz	r0, 333e <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    3334:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    3336:	2d00      	cmp	r5, #0
    3338:	d1f6      	bne.n	3328 <usbdc_cb_ctl_req+0x1bc>
	return false;
    333a:	2000      	movs	r0, #0
    333c:	e72e      	b.n	319c <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    333e:	686b      	ldr	r3, [r5, #4]
    3340:	466a      	mov	r2, sp
    3342:	2100      	movs	r1, #0
    3344:	4628      	mov	r0, r5
    3346:	4798      	blx	r3
    3348:	b9b8      	cbnz	r0, 337a <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    334a:	b136      	cbz	r6, 335a <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    334c:	4a28      	ldr	r2, [pc, #160]	; (33f0 <usbdc_cb_ctl_req+0x284>)
    334e:	2301      	movs	r3, #1
    3350:	fa03 f404 	lsl.w	r4, r3, r4
    3354:	7f53      	ldrb	r3, [r2, #29]
    3356:	4323      	orrs	r3, r4
    3358:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    335a:	2300      	movs	r3, #0
    335c:	461a      	mov	r2, r3
    335e:	4619      	mov	r1, r3
    3360:	4618      	mov	r0, r3
    3362:	4c22      	ldr	r4, [pc, #136]	; (33ec <usbdc_cb_ctl_req+0x280>)
    3364:	47a0      	blx	r4
			return true;
    3366:	2001      	movs	r0, #1
    3368:	e718      	b.n	319c <usbdc_cb_ctl_req+0x30>
		return false;
    336a:	2000      	movs	r0, #0
    336c:	e716      	b.n	319c <usbdc_cb_ctl_req+0x30>
		return false;
    336e:	2000      	movs	r0, #0
    3370:	e714      	b.n	319c <usbdc_cb_ctl_req+0x30>
			return false;
    3372:	2000      	movs	r0, #0
    3374:	e712      	b.n	319c <usbdc_cb_ctl_req+0x30>
	return false;
    3376:	2000      	movs	r0, #0
    3378:	e710      	b.n	319c <usbdc_cb_ctl_req+0x30>
			return false;
    337a:	2000      	movs	r0, #0
    337c:	e70e      	b.n	319c <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    337e:	7862      	ldrb	r2, [r4, #1]
    3380:	2a0a      	cmp	r2, #10
    3382:	f200 80ec 	bhi.w	355e <usbdc_cb_ctl_req+0x3f2>
    3386:	e8df f012 	tbh	[pc, r2, lsl #1]
    338a:	008e      	.short	0x008e
    338c:	00ea00ea 	.word	0x00ea00ea
    3390:	00ea00ea 	.word	0x00ea00ea
    3394:	000b00ea 	.word	0x000b00ea
    3398:	008200ea 	.word	0x008200ea
    339c:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    33a0:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    33a2:	0a13      	lsrs	r3, r2, #8
    33a4:	2b02      	cmp	r3, #2
    33a6:	d02d      	beq.n	3404 <usbdc_cb_ctl_req+0x298>
    33a8:	2b03      	cmp	r3, #3
    33aa:	d050      	beq.n	344e <usbdc_cb_ctl_req+0x2e2>
    33ac:	2b01      	cmp	r3, #1
    33ae:	d001      	beq.n	33b4 <usbdc_cb_ctl_req+0x248>
	return false;
    33b0:	2000      	movs	r0, #0
    33b2:	e6f3      	b.n	319c <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    33b4:	88e2      	ldrh	r2, [r4, #6]
    33b6:	2a12      	cmp	r2, #18
    33b8:	bf28      	it	cs
    33ba:	2212      	movcs	r2, #18
    33bc:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    33be:	4b0c      	ldr	r3, [pc, #48]	; (33f0 <usbdc_cb_ctl_req+0x284>)
    33c0:	681b      	ldr	r3, [r3, #0]
    33c2:	2201      	movs	r2, #1
    33c4:	6859      	ldr	r1, [r3, #4]
    33c6:	6818      	ldr	r0, [r3, #0]
    33c8:	4b0b      	ldr	r3, [pc, #44]	; (33f8 <usbdc_cb_ctl_req+0x28c>)
    33ca:	4798      	blx	r3
	if (!dev_desc) {
    33cc:	4601      	mov	r1, r0
    33ce:	2800      	cmp	r0, #0
    33d0:	f000 80c7 	beq.w	3562 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    33d4:	2300      	movs	r3, #0
    33d6:	4622      	mov	r2, r4
    33d8:	4628      	mov	r0, r5
    33da:	4c04      	ldr	r4, [pc, #16]	; (33ec <usbdc_cb_ctl_req+0x280>)
    33dc:	47a0      	blx	r4
    33de:	fab0 f080 	clz	r0, r0
    33e2:	0940      	lsrs	r0, r0, #5
    33e4:	e6da      	b.n	319c <usbdc_cb_ctl_req+0x30>
    33e6:	bf00      	nop
    33e8:	00003001 	.word	0x00003001
    33ec:	0000314d 	.word	0x0000314d
    33f0:	200007c4 	.word	0x200007c4
    33f4:	00003711 	.word	0x00003711
    33f8:	00003691 	.word	0x00003691
    33fc:	00002fb5 	.word	0x00002fb5
    3400:	00001171 	.word	0x00001171
	uint16_t length   = req->wLength;
    3404:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3406:	4b5b      	ldr	r3, [pc, #364]	; (3574 <usbdc_cb_ctl_req+0x408>)
    3408:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    340a:	681b      	ldr	r3, [r3, #0]
    340c:	3201      	adds	r2, #1
    340e:	b2d2      	uxtb	r2, r2
    3410:	6859      	ldr	r1, [r3, #4]
    3412:	6818      	ldr	r0, [r3, #0]
    3414:	4b58      	ldr	r3, [pc, #352]	; (3578 <usbdc_cb_ctl_req+0x40c>)
    3416:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3418:	4601      	mov	r1, r0
    341a:	2800      	cmp	r0, #0
    341c:	f000 80a3 	beq.w	3566 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    3420:	78c3      	ldrb	r3, [r0, #3]
    3422:	7882      	ldrb	r2, [r0, #2]
    3424:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    3428:	b292      	uxth	r2, r2
	if (length <= total_len) {
    342a:	4294      	cmp	r4, r2
    342c:	d90d      	bls.n	344a <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    342e:	3e01      	subs	r6, #1
    3430:	4226      	tst	r6, r4
    3432:	bf0c      	ite	eq
    3434:	2301      	moveq	r3, #1
    3436:	2300      	movne	r3, #0
		length = total_len;
    3438:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    343a:	4622      	mov	r2, r4
    343c:	4628      	mov	r0, r5
    343e:	4c4f      	ldr	r4, [pc, #316]	; (357c <usbdc_cb_ctl_req+0x410>)
    3440:	47a0      	blx	r4
    3442:	fab0 f080 	clz	r0, r0
    3446:	0940      	lsrs	r0, r0, #5
    3448:	e6a8      	b.n	319c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    344a:	2300      	movs	r3, #0
    344c:	e7f5      	b.n	343a <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    344e:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3450:	4b48      	ldr	r3, [pc, #288]	; (3574 <usbdc_cb_ctl_req+0x408>)
    3452:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    3454:	681b      	ldr	r3, [r3, #0]
    3456:	b2d2      	uxtb	r2, r2
    3458:	6859      	ldr	r1, [r3, #4]
    345a:	6818      	ldr	r0, [r3, #0]
    345c:	4b48      	ldr	r3, [pc, #288]	; (3580 <usbdc_cb_ctl_req+0x414>)
    345e:	4798      	blx	r3
	if (NULL == str_desc) {
    3460:	4601      	mov	r1, r0
    3462:	2800      	cmp	r0, #0
    3464:	f000 8081 	beq.w	356a <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    3468:	7802      	ldrb	r2, [r0, #0]
    346a:	4294      	cmp	r4, r2
    346c:	d90d      	bls.n	348a <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    346e:	3e01      	subs	r6, #1
    3470:	4226      	tst	r6, r4
    3472:	bf0c      	ite	eq
    3474:	2301      	moveq	r3, #1
    3476:	2300      	movne	r3, #0
		length = str_desc[0];
    3478:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    347a:	4622      	mov	r2, r4
    347c:	4628      	mov	r0, r5
    347e:	4c3f      	ldr	r4, [pc, #252]	; (357c <usbdc_cb_ctl_req+0x410>)
    3480:	47a0      	blx	r4
    3482:	fab0 f080 	clz	r0, r0
    3486:	0940      	lsrs	r0, r0, #5
    3488:	e688      	b.n	319c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    348a:	2300      	movs	r3, #0
    348c:	e7f5      	b.n	347a <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    348e:	4939      	ldr	r1, [pc, #228]	; (3574 <usbdc_cb_ctl_req+0x408>)
    3490:	694b      	ldr	r3, [r1, #20]
    3492:	7eca      	ldrb	r2, [r1, #27]
    3494:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    3496:	2300      	movs	r3, #0
    3498:	2201      	movs	r2, #1
    349a:	6949      	ldr	r1, [r1, #20]
    349c:	4628      	mov	r0, r5
    349e:	4c37      	ldr	r4, [pc, #220]	; (357c <usbdc_cb_ctl_req+0x410>)
    34a0:	47a0      	blx	r4
		return true;
    34a2:	2001      	movs	r0, #1
    34a4:	e67a      	b.n	319c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    34a6:	f003 031f 	and.w	r3, r3, #31
    34aa:	2b01      	cmp	r3, #1
    34ac:	d903      	bls.n	34b6 <usbdc_cb_ctl_req+0x34a>
    34ae:	2b02      	cmp	r3, #2
    34b0:	d010      	beq.n	34d4 <usbdc_cb_ctl_req+0x368>
		return false;
    34b2:	2000      	movs	r0, #0
    34b4:	e672      	b.n	319c <usbdc_cb_ctl_req+0x30>
		st = 0;
    34b6:	2300      	movs	r3, #0
    34b8:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    34ba:	492e      	ldr	r1, [pc, #184]	; (3574 <usbdc_cb_ctl_req+0x408>)
    34bc:	694b      	ldr	r3, [r1, #20]
    34be:	f8bd 2000 	ldrh.w	r2, [sp]
    34c2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    34c4:	2300      	movs	r3, #0
    34c6:	2202      	movs	r2, #2
    34c8:	6949      	ldr	r1, [r1, #20]
    34ca:	4628      	mov	r0, r5
    34cc:	4c2b      	ldr	r4, [pc, #172]	; (357c <usbdc_cb_ctl_req+0x410>)
    34ce:	47a0      	blx	r4
	return true;
    34d0:	2001      	movs	r0, #1
    34d2:	e663      	b.n	319c <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    34d4:	88a0      	ldrh	r0, [r4, #4]
    34d6:	2102      	movs	r1, #2
    34d8:	b2c0      	uxtb	r0, r0
    34da:	4b2a      	ldr	r3, [pc, #168]	; (3584 <usbdc_cb_ctl_req+0x418>)
    34dc:	4798      	blx	r3
		if (st < 0) {
    34de:	2800      	cmp	r0, #0
    34e0:	db03      	blt.n	34ea <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    34e2:	f000 0001 	and.w	r0, r0, #1
    34e6:	9000      	str	r0, [sp, #0]
    34e8:	e7e7      	b.n	34ba <usbdc_cb_ctl_req+0x34e>
			return false;
    34ea:	2000      	movs	r0, #0
    34ec:	e656      	b.n	319c <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    34ee:	4b21      	ldr	r3, [pc, #132]	; (3574 <usbdc_cb_ctl_req+0x408>)
    34f0:	7f5b      	ldrb	r3, [r3, #29]
    34f2:	88a2      	ldrh	r2, [r4, #4]
    34f4:	4113      	asrs	r3, r2
    34f6:	f013 0f01 	tst.w	r3, #1
    34fa:	d012      	beq.n	3522 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    34fc:	4b1d      	ldr	r3, [pc, #116]	; (3574 <usbdc_cb_ctl_req+0x408>)
    34fe:	691d      	ldr	r5, [r3, #16]
	return false;
    3500:	2000      	movs	r0, #0
	while (NULL != func) {
    3502:	2d00      	cmp	r5, #0
    3504:	f43f ae4a 	beq.w	319c <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    3508:	2602      	movs	r6, #2
    350a:	686b      	ldr	r3, [r5, #4]
    350c:	4622      	mov	r2, r4
    350e:	4631      	mov	r1, r6
    3510:	4628      	mov	r0, r5
    3512:	4798      	blx	r3
    3514:	2800      	cmp	r0, #0
    3516:	da0f      	bge.n	3538 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    3518:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    351a:	2d00      	cmp	r5, #0
    351c:	d1f5      	bne.n	350a <usbdc_cb_ctl_req+0x39e>
	return false;
    351e:	2000      	movs	r0, #0
    3520:	e63c      	b.n	319c <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    3522:	4914      	ldr	r1, [pc, #80]	; (3574 <usbdc_cb_ctl_req+0x408>)
    3524:	694b      	ldr	r3, [r1, #20]
    3526:	2000      	movs	r0, #0
    3528:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    352a:	4603      	mov	r3, r0
    352c:	2201      	movs	r2, #1
    352e:	6949      	ldr	r1, [r1, #20]
    3530:	4c12      	ldr	r4, [pc, #72]	; (357c <usbdc_cb_ctl_req+0x410>)
    3532:	47a0      	blx	r4
		return true;
    3534:	2001      	movs	r0, #1
    3536:	e631      	b.n	319c <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    3538:	490e      	ldr	r1, [pc, #56]	; (3574 <usbdc_cb_ctl_req+0x408>)
    353a:	694b      	ldr	r3, [r1, #20]
    353c:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    353e:	2300      	movs	r3, #0
    3540:	2201      	movs	r2, #1
    3542:	6949      	ldr	r1, [r1, #20]
    3544:	4618      	mov	r0, r3
    3546:	4c0d      	ldr	r4, [pc, #52]	; (357c <usbdc_cb_ctl_req+0x410>)
    3548:	47a0      	blx	r4
			return true;
    354a:	2001      	movs	r0, #1
    354c:	e626      	b.n	319c <usbdc_cb_ctl_req+0x30>
		return true;
    354e:	2001      	movs	r0, #1
    3550:	e624      	b.n	319c <usbdc_cb_ctl_req+0x30>
		return false;
    3552:	2000      	movs	r0, #0
    3554:	e622      	b.n	319c <usbdc_cb_ctl_req+0x30>
		return false;
    3556:	2000      	movs	r0, #0
    3558:	e620      	b.n	319c <usbdc_cb_ctl_req+0x30>
		return false;
    355a:	2000      	movs	r0, #0
    355c:	e61e      	b.n	319c <usbdc_cb_ctl_req+0x30>
		return false;
    355e:	2000      	movs	r0, #0
    3560:	e61c      	b.n	319c <usbdc_cb_ctl_req+0x30>
		return false;
    3562:	2000      	movs	r0, #0
    3564:	e61a      	b.n	319c <usbdc_cb_ctl_req+0x30>
		return false;
    3566:	2000      	movs	r0, #0
    3568:	e618      	b.n	319c <usbdc_cb_ctl_req+0x30>
		return false;
    356a:	2000      	movs	r0, #0
    356c:	e616      	b.n	319c <usbdc_cb_ctl_req+0x30>
			return false;
    356e:	2000      	movs	r0, #0
    3570:	e614      	b.n	319c <usbdc_cb_ctl_req+0x30>
    3572:	bf00      	nop
    3574:	200007c4 	.word	0x200007c4
    3578:	00003711 	.word	0x00003711
    357c:	0000314d 	.word	0x0000314d
    3580:	00003779 	.word	0x00003779
    3584:	00001171 	.word	0x00001171

00003588 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    3588:	b508      	push	{r3, lr}
	switch (type) {
    358a:	2801      	cmp	r0, #1
    358c:	d007      	beq.n	359e <usbdc_register_handler+0x16>
    358e:	b110      	cbz	r0, 3596 <usbdc_register_handler+0xe>
    3590:	2802      	cmp	r0, #2
    3592:	d008      	beq.n	35a6 <usbdc_register_handler+0x1e>
    3594:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    3596:	4806      	ldr	r0, [pc, #24]	; (35b0 <usbdc_register_handler+0x28>)
    3598:	4b06      	ldr	r3, [pc, #24]	; (35b4 <usbdc_register_handler+0x2c>)
    359a:	4798      	blx	r3
		break;
    359c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    359e:	4806      	ldr	r0, [pc, #24]	; (35b8 <usbdc_register_handler+0x30>)
    35a0:	4b04      	ldr	r3, [pc, #16]	; (35b4 <usbdc_register_handler+0x2c>)
    35a2:	4798      	blx	r3
		break;
    35a4:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    35a6:	4805      	ldr	r0, [pc, #20]	; (35bc <usbdc_register_handler+0x34>)
    35a8:	4b02      	ldr	r3, [pc, #8]	; (35b4 <usbdc_register_handler+0x2c>)
    35aa:	4798      	blx	r3
    35ac:	bd08      	pop	{r3, pc}
    35ae:	bf00      	nop
    35b0:	200007c8 	.word	0x200007c8
    35b4:	000037e1 	.word	0x000037e1
    35b8:	200007cc 	.word	0x200007cc
    35bc:	200007d0 	.word	0x200007d0

000035c0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    35c0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    35c2:	4605      	mov	r5, r0
    35c4:	f240 3255 	movw	r2, #853	; 0x355
    35c8:	490c      	ldr	r1, [pc, #48]	; (35fc <usbdc_init+0x3c>)
    35ca:	3000      	adds	r0, #0
    35cc:	bf18      	it	ne
    35ce:	2001      	movne	r0, #1
    35d0:	4b0b      	ldr	r3, [pc, #44]	; (3600 <usbdc_init+0x40>)
    35d2:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    35d4:	4b0b      	ldr	r3, [pc, #44]	; (3604 <usbdc_init+0x44>)
    35d6:	4798      	blx	r3
	if (rc < 0) {
    35d8:	2800      	cmp	r0, #0
    35da:	db0e      	blt.n	35fa <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    35dc:	4c0a      	ldr	r4, [pc, #40]	; (3608 <usbdc_init+0x48>)
    35de:	2220      	movs	r2, #32
    35e0:	2100      	movs	r1, #0
    35e2:	4620      	mov	r0, r4
    35e4:	4b09      	ldr	r3, [pc, #36]	; (360c <usbdc_init+0x4c>)
    35e6:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    35e8:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    35ea:	4909      	ldr	r1, [pc, #36]	; (3610 <usbdc_init+0x50>)
    35ec:	2000      	movs	r0, #0
    35ee:	4c09      	ldr	r4, [pc, #36]	; (3614 <usbdc_init+0x54>)
    35f0:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    35f2:	4909      	ldr	r1, [pc, #36]	; (3618 <usbdc_init+0x58>)
    35f4:	2001      	movs	r0, #1
    35f6:	47a0      	blx	r4

	return 0;
    35f8:	2000      	movs	r0, #0
}
    35fa:	bd38      	pop	{r3, r4, r5, pc}
    35fc:	00003c44 	.word	0x00003c44
    3600:	00001225 	.word	0x00001225
    3604:	00000ed9 	.word	0x00000ed9
    3608:	200007c4 	.word	0x200007c4
    360c:	000039a5 	.word	0x000039a5
    3610:	00003041 	.word	0x00003041
    3614:	00000f41 	.word	0x00000f41
    3618:	0000312d 	.word	0x0000312d

0000361c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    361c:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    361e:	4601      	mov	r1, r0
    3620:	4801      	ldr	r0, [pc, #4]	; (3628 <usbdc_register_function+0xc>)
    3622:	4b02      	ldr	r3, [pc, #8]	; (362c <usbdc_register_function+0x10>)
    3624:	4798      	blx	r3
    3626:	bd08      	pop	{r3, pc}
    3628:	200007d4 	.word	0x200007d4
    362c:	000037e1 	.word	0x000037e1

00003630 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    3630:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    3632:	4b0a      	ldr	r3, [pc, #40]	; (365c <usbdc_start+0x2c>)
    3634:	7e9b      	ldrb	r3, [r3, #26]
    3636:	b95b      	cbnz	r3, 3650 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    3638:	b168      	cbz	r0, 3656 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    363a:	4b08      	ldr	r3, [pc, #32]	; (365c <usbdc_start+0x2c>)
    363c:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    363e:	6802      	ldr	r2, [r0, #0]
    3640:	79d2      	ldrb	r2, [r2, #7]
    3642:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    3644:	2201      	movs	r2, #1
    3646:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    3648:	4b05      	ldr	r3, [pc, #20]	; (3660 <usbdc_start+0x30>)
    364a:	4798      	blx	r3
	return ERR_NONE;
    364c:	2000      	movs	r0, #0
    364e:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    3650:	f06f 0003 	mvn.w	r0, #3
    3654:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    3656:	f06f 0008 	mvn.w	r0, #8
}
    365a:	bd08      	pop	{r3, pc}
    365c:	200007c4 	.word	0x200007c4
    3660:	00000f4d 	.word	0x00000f4d

00003664 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    3664:	b508      	push	{r3, lr}
	usb_d_attach();
    3666:	4b01      	ldr	r3, [pc, #4]	; (366c <usbdc_attach+0x8>)
    3668:	4798      	blx	r3
    366a:	bd08      	pop	{r3, pc}
    366c:	00000f59 	.word	0x00000f59

00003670 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    3670:	4b01      	ldr	r3, [pc, #4]	; (3678 <usbdc_get_ctrl_buffer+0x8>)
    3672:	6958      	ldr	r0, [r3, #20]
    3674:	4770      	bx	lr
    3676:	bf00      	nop
    3678:	200007c4 	.word	0x200007c4

0000367c <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    367c:	4b03      	ldr	r3, [pc, #12]	; (368c <usbdc_get_state+0x10>)
    367e:	7e98      	ldrb	r0, [r3, #26]
    3680:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    3684:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    3686:	bf18      	it	ne
    3688:	2010      	movne	r0, #16
    368a:	4770      	bx	lr
    368c:	200007c4 	.word	0x200007c4

00003690 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3690:	4288      	cmp	r0, r1
    3692:	d214      	bcs.n	36be <usb_find_desc+0x2e>
	return desc[0];
    3694:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3696:	2b01      	cmp	r3, #1
    3698:	d913      	bls.n	36c2 <usb_find_desc+0x32>
{
    369a:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    369c:	7844      	ldrb	r4, [r0, #1]
    369e:	4294      	cmp	r4, r2
    36a0:	d00a      	beq.n	36b8 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    36a2:	4418      	add	r0, r3
	while (desc < eof) {
    36a4:	4281      	cmp	r1, r0
    36a6:	d906      	bls.n	36b6 <usb_find_desc+0x26>
	return desc[0];
    36a8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    36aa:	2b01      	cmp	r3, #1
    36ac:	d90b      	bls.n	36c6 <usb_find_desc+0x36>
	return desc[1];
    36ae:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    36b0:	4294      	cmp	r4, r2
    36b2:	d1f6      	bne.n	36a2 <usb_find_desc+0x12>
    36b4:	e000      	b.n	36b8 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    36b6:	2000      	movs	r0, #0
}
    36b8:	f85d 4b04 	ldr.w	r4, [sp], #4
    36bc:	4770      	bx	lr
	return NULL;
    36be:	2000      	movs	r0, #0
    36c0:	4770      	bx	lr
		_desc_len_check();
    36c2:	2000      	movs	r0, #0
    36c4:	4770      	bx	lr
    36c6:	2000      	movs	r0, #0
    36c8:	e7f6      	b.n	36b8 <usb_find_desc+0x28>

000036ca <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    36ca:	4288      	cmp	r0, r1
    36cc:	d216      	bcs.n	36fc <usb_find_ep_desc+0x32>
	return desc[0];
    36ce:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    36d0:	2b01      	cmp	r3, #1
    36d2:	d915      	bls.n	3700 <usb_find_ep_desc+0x36>
	return desc[1];
    36d4:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    36d6:	2a04      	cmp	r2, #4
    36d8:	d014      	beq.n	3704 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    36da:	2a05      	cmp	r2, #5
    36dc:	d00b      	beq.n	36f6 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    36de:	4418      	add	r0, r3
	while (desc < eof) {
    36e0:	4281      	cmp	r1, r0
    36e2:	d909      	bls.n	36f8 <usb_find_ep_desc+0x2e>
	return desc[0];
    36e4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    36e6:	2b01      	cmp	r3, #1
    36e8:	d90e      	bls.n	3708 <usb_find_ep_desc+0x3e>
	return desc[1];
    36ea:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    36ec:	2a04      	cmp	r2, #4
    36ee:	d00d      	beq.n	370c <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    36f0:	2a05      	cmp	r2, #5
    36f2:	d1f4      	bne.n	36de <usb_find_ep_desc+0x14>
    36f4:	e00b      	b.n	370e <usb_find_ep_desc+0x44>
    36f6:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    36f8:	2000      	movs	r0, #0
    36fa:	4770      	bx	lr
    36fc:	2000      	movs	r0, #0
    36fe:	4770      	bx	lr
		_desc_len_check();
    3700:	2000      	movs	r0, #0
    3702:	4770      	bx	lr
	return NULL;
    3704:	2000      	movs	r0, #0
    3706:	4770      	bx	lr
		_desc_len_check();
    3708:	2000      	movs	r0, #0
    370a:	4770      	bx	lr
	return NULL;
    370c:	2000      	movs	r0, #0
}
    370e:	4770      	bx	lr

00003710 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    3710:	b538      	push	{r3, r4, r5, lr}
    3712:	460c      	mov	r4, r1
    3714:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    3716:	2202      	movs	r2, #2
    3718:	4b16      	ldr	r3, [pc, #88]	; (3774 <usb_find_cfg_desc+0x64>)
    371a:	4798      	blx	r3
	if (!desc) {
    371c:	4603      	mov	r3, r0
    371e:	b1e8      	cbz	r0, 375c <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    3720:	4284      	cmp	r4, r0
    3722:	d91d      	bls.n	3760 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    3724:	7802      	ldrb	r2, [r0, #0]
    3726:	2a01      	cmp	r2, #1
    3728:	d91c      	bls.n	3764 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    372a:	7842      	ldrb	r2, [r0, #1]
    372c:	2a02      	cmp	r2, #2
    372e:	d11b      	bne.n	3768 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    3730:	7942      	ldrb	r2, [r0, #5]
    3732:	42aa      	cmp	r2, r5
    3734:	d012      	beq.n	375c <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    3736:	78d9      	ldrb	r1, [r3, #3]
    3738:	789a      	ldrb	r2, [r3, #2]
    373a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    373e:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    3742:	429c      	cmp	r4, r3
    3744:	d909      	bls.n	375a <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    3746:	781a      	ldrb	r2, [r3, #0]
    3748:	2a01      	cmp	r2, #1
    374a:	d90f      	bls.n	376c <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    374c:	785a      	ldrb	r2, [r3, #1]
    374e:	2a02      	cmp	r2, #2
    3750:	d10e      	bne.n	3770 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    3752:	795a      	ldrb	r2, [r3, #5]
    3754:	42aa      	cmp	r2, r5
    3756:	d1ee      	bne.n	3736 <usb_find_cfg_desc+0x26>
    3758:	e000      	b.n	375c <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    375a:	2300      	movs	r3, #0
}
    375c:	4618      	mov	r0, r3
    375e:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    3760:	2300      	movs	r3, #0
    3762:	e7fb      	b.n	375c <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3764:	2300      	movs	r3, #0
    3766:	e7f9      	b.n	375c <usb_find_cfg_desc+0x4c>
	return NULL;
    3768:	2300      	movs	r3, #0
    376a:	e7f7      	b.n	375c <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    376c:	2300      	movs	r3, #0
    376e:	e7f5      	b.n	375c <usb_find_cfg_desc+0x4c>
	return NULL;
    3770:	2300      	movs	r3, #0
    3772:	e7f3      	b.n	375c <usb_find_cfg_desc+0x4c>
    3774:	00003691 	.word	0x00003691

00003778 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    3778:	4288      	cmp	r0, r1
    377a:	d217      	bcs.n	37ac <usb_find_str_desc+0x34>
{
    377c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3780:	460d      	mov	r5, r1
    3782:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    3784:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    3786:	f04f 0803 	mov.w	r8, #3
    378a:	4f0c      	ldr	r7, [pc, #48]	; (37bc <usb_find_str_desc+0x44>)
    378c:	4642      	mov	r2, r8
    378e:	4629      	mov	r1, r5
    3790:	47b8      	blx	r7
		if (desc) {
    3792:	4603      	mov	r3, r0
    3794:	b170      	cbz	r0, 37b4 <usb_find_str_desc+0x3c>
	return desc[0];
    3796:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    3798:	2801      	cmp	r0, #1
    379a:	d90a      	bls.n	37b2 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    379c:	42a6      	cmp	r6, r4
    379e:	d009      	beq.n	37b4 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    37a0:	4418      	add	r0, r3
    37a2:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    37a4:	4285      	cmp	r5, r0
    37a6:	d8f1      	bhi.n	378c <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    37a8:	2300      	movs	r3, #0
    37aa:	e003      	b.n	37b4 <usb_find_str_desc+0x3c>
    37ac:	2300      	movs	r3, #0
}
    37ae:	4618      	mov	r0, r3
    37b0:	4770      	bx	lr
			_desc_len_check();
    37b2:	2300      	movs	r3, #0
}
    37b4:	4618      	mov	r0, r3
    37b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37ba:	bf00      	nop
    37bc:	00003691 	.word	0x00003691

000037c0 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    37c0:	6803      	ldr	r3, [r0, #0]
    37c2:	b14b      	cbz	r3, 37d8 <is_list_element+0x18>
		if (it == element) {
    37c4:	428b      	cmp	r3, r1
    37c6:	d009      	beq.n	37dc <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    37c8:	681b      	ldr	r3, [r3, #0]
    37ca:	b11b      	cbz	r3, 37d4 <is_list_element+0x14>
		if (it == element) {
    37cc:	4299      	cmp	r1, r3
    37ce:	d1fb      	bne.n	37c8 <is_list_element+0x8>
			return true;
    37d0:	2001      	movs	r0, #1
		}
	}

	return false;
}
    37d2:	4770      	bx	lr
	return false;
    37d4:	2000      	movs	r0, #0
    37d6:	4770      	bx	lr
    37d8:	2000      	movs	r0, #0
    37da:	4770      	bx	lr
			return true;
    37dc:	2001      	movs	r0, #1
    37de:	4770      	bx	lr

000037e0 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    37e0:	b570      	push	{r4, r5, r6, lr}
    37e2:	4605      	mov	r5, r0
    37e4:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    37e6:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    37e8:	4b0a      	ldr	r3, [pc, #40]	; (3814 <list_insert_at_end+0x34>)
    37ea:	4798      	blx	r3
    37ec:	f080 0001 	eor.w	r0, r0, #1
    37f0:	224f      	movs	r2, #79	; 0x4f
    37f2:	4909      	ldr	r1, [pc, #36]	; (3818 <list_insert_at_end+0x38>)
    37f4:	b2c0      	uxtb	r0, r0
    37f6:	4b09      	ldr	r3, [pc, #36]	; (381c <list_insert_at_end+0x3c>)
    37f8:	4798      	blx	r3

	if (!list->head) {
    37fa:	682b      	ldr	r3, [r5, #0]
    37fc:	b91b      	cbnz	r3, 3806 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    37fe:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    3800:	6033      	str	r3, [r6, #0]
		return;
    3802:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    3804:	461c      	mov	r4, r3
	while (it->next) {
    3806:	6823      	ldr	r3, [r4, #0]
    3808:	2b00      	cmp	r3, #0
    380a:	d1fb      	bne.n	3804 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    380c:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    380e:	6033      	str	r3, [r6, #0]
    3810:	bd70      	pop	{r4, r5, r6, pc}
    3812:	bf00      	nop
    3814:	000037c1 	.word	0x000037c1
    3818:	00003c5c 	.word	0x00003c5c
    381c:	00001225 	.word	0x00001225

00003820 <__libc_init_array>:
    3820:	b570      	push	{r4, r5, r6, lr}
    3822:	4e0f      	ldr	r6, [pc, #60]	; (3860 <__libc_init_array+0x40>)
    3824:	4d0f      	ldr	r5, [pc, #60]	; (3864 <__libc_init_array+0x44>)
    3826:	1b76      	subs	r6, r6, r5
    3828:	10b6      	asrs	r6, r6, #2
    382a:	bf18      	it	ne
    382c:	2400      	movne	r4, #0
    382e:	d005      	beq.n	383c <__libc_init_array+0x1c>
    3830:	3401      	adds	r4, #1
    3832:	f855 3b04 	ldr.w	r3, [r5], #4
    3836:	4798      	blx	r3
    3838:	42a6      	cmp	r6, r4
    383a:	d1f9      	bne.n	3830 <__libc_init_array+0x10>
    383c:	4e0a      	ldr	r6, [pc, #40]	; (3868 <__libc_init_array+0x48>)
    383e:	4d0b      	ldr	r5, [pc, #44]	; (386c <__libc_init_array+0x4c>)
    3840:	1b76      	subs	r6, r6, r5
    3842:	f000 fa1d 	bl	3c80 <_init>
    3846:	10b6      	asrs	r6, r6, #2
    3848:	bf18      	it	ne
    384a:	2400      	movne	r4, #0
    384c:	d006      	beq.n	385c <__libc_init_array+0x3c>
    384e:	3401      	adds	r4, #1
    3850:	f855 3b04 	ldr.w	r3, [r5], #4
    3854:	4798      	blx	r3
    3856:	42a6      	cmp	r6, r4
    3858:	d1f9      	bne.n	384e <__libc_init_array+0x2e>
    385a:	bd70      	pop	{r4, r5, r6, pc}
    385c:	bd70      	pop	{r4, r5, r6, pc}
    385e:	bf00      	nop
    3860:	00003c8c 	.word	0x00003c8c
    3864:	00003c8c 	.word	0x00003c8c
    3868:	00003c94 	.word	0x00003c94
    386c:	00003c8c 	.word	0x00003c8c

00003870 <memcpy>:
    3870:	4684      	mov	ip, r0
    3872:	ea41 0300 	orr.w	r3, r1, r0
    3876:	f013 0303 	ands.w	r3, r3, #3
    387a:	d16d      	bne.n	3958 <memcpy+0xe8>
    387c:	3a40      	subs	r2, #64	; 0x40
    387e:	d341      	bcc.n	3904 <memcpy+0x94>
    3880:	f851 3b04 	ldr.w	r3, [r1], #4
    3884:	f840 3b04 	str.w	r3, [r0], #4
    3888:	f851 3b04 	ldr.w	r3, [r1], #4
    388c:	f840 3b04 	str.w	r3, [r0], #4
    3890:	f851 3b04 	ldr.w	r3, [r1], #4
    3894:	f840 3b04 	str.w	r3, [r0], #4
    3898:	f851 3b04 	ldr.w	r3, [r1], #4
    389c:	f840 3b04 	str.w	r3, [r0], #4
    38a0:	f851 3b04 	ldr.w	r3, [r1], #4
    38a4:	f840 3b04 	str.w	r3, [r0], #4
    38a8:	f851 3b04 	ldr.w	r3, [r1], #4
    38ac:	f840 3b04 	str.w	r3, [r0], #4
    38b0:	f851 3b04 	ldr.w	r3, [r1], #4
    38b4:	f840 3b04 	str.w	r3, [r0], #4
    38b8:	f851 3b04 	ldr.w	r3, [r1], #4
    38bc:	f840 3b04 	str.w	r3, [r0], #4
    38c0:	f851 3b04 	ldr.w	r3, [r1], #4
    38c4:	f840 3b04 	str.w	r3, [r0], #4
    38c8:	f851 3b04 	ldr.w	r3, [r1], #4
    38cc:	f840 3b04 	str.w	r3, [r0], #4
    38d0:	f851 3b04 	ldr.w	r3, [r1], #4
    38d4:	f840 3b04 	str.w	r3, [r0], #4
    38d8:	f851 3b04 	ldr.w	r3, [r1], #4
    38dc:	f840 3b04 	str.w	r3, [r0], #4
    38e0:	f851 3b04 	ldr.w	r3, [r1], #4
    38e4:	f840 3b04 	str.w	r3, [r0], #4
    38e8:	f851 3b04 	ldr.w	r3, [r1], #4
    38ec:	f840 3b04 	str.w	r3, [r0], #4
    38f0:	f851 3b04 	ldr.w	r3, [r1], #4
    38f4:	f840 3b04 	str.w	r3, [r0], #4
    38f8:	f851 3b04 	ldr.w	r3, [r1], #4
    38fc:	f840 3b04 	str.w	r3, [r0], #4
    3900:	3a40      	subs	r2, #64	; 0x40
    3902:	d2bd      	bcs.n	3880 <memcpy+0x10>
    3904:	3230      	adds	r2, #48	; 0x30
    3906:	d311      	bcc.n	392c <memcpy+0xbc>
    3908:	f851 3b04 	ldr.w	r3, [r1], #4
    390c:	f840 3b04 	str.w	r3, [r0], #4
    3910:	f851 3b04 	ldr.w	r3, [r1], #4
    3914:	f840 3b04 	str.w	r3, [r0], #4
    3918:	f851 3b04 	ldr.w	r3, [r1], #4
    391c:	f840 3b04 	str.w	r3, [r0], #4
    3920:	f851 3b04 	ldr.w	r3, [r1], #4
    3924:	f840 3b04 	str.w	r3, [r0], #4
    3928:	3a10      	subs	r2, #16
    392a:	d2ed      	bcs.n	3908 <memcpy+0x98>
    392c:	320c      	adds	r2, #12
    392e:	d305      	bcc.n	393c <memcpy+0xcc>
    3930:	f851 3b04 	ldr.w	r3, [r1], #4
    3934:	f840 3b04 	str.w	r3, [r0], #4
    3938:	3a04      	subs	r2, #4
    393a:	d2f9      	bcs.n	3930 <memcpy+0xc0>
    393c:	3204      	adds	r2, #4
    393e:	d008      	beq.n	3952 <memcpy+0xe2>
    3940:	07d2      	lsls	r2, r2, #31
    3942:	bf1c      	itt	ne
    3944:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3948:	f800 3b01 	strbne.w	r3, [r0], #1
    394c:	d301      	bcc.n	3952 <memcpy+0xe2>
    394e:	880b      	ldrh	r3, [r1, #0]
    3950:	8003      	strh	r3, [r0, #0]
    3952:	4660      	mov	r0, ip
    3954:	4770      	bx	lr
    3956:	bf00      	nop
    3958:	2a08      	cmp	r2, #8
    395a:	d313      	bcc.n	3984 <memcpy+0x114>
    395c:	078b      	lsls	r3, r1, #30
    395e:	d08d      	beq.n	387c <memcpy+0xc>
    3960:	f010 0303 	ands.w	r3, r0, #3
    3964:	d08a      	beq.n	387c <memcpy+0xc>
    3966:	f1c3 0304 	rsb	r3, r3, #4
    396a:	1ad2      	subs	r2, r2, r3
    396c:	07db      	lsls	r3, r3, #31
    396e:	bf1c      	itt	ne
    3970:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3974:	f800 3b01 	strbne.w	r3, [r0], #1
    3978:	d380      	bcc.n	387c <memcpy+0xc>
    397a:	f831 3b02 	ldrh.w	r3, [r1], #2
    397e:	f820 3b02 	strh.w	r3, [r0], #2
    3982:	e77b      	b.n	387c <memcpy+0xc>
    3984:	3a04      	subs	r2, #4
    3986:	d3d9      	bcc.n	393c <memcpy+0xcc>
    3988:	3a01      	subs	r2, #1
    398a:	f811 3b01 	ldrb.w	r3, [r1], #1
    398e:	f800 3b01 	strb.w	r3, [r0], #1
    3992:	d2f9      	bcs.n	3988 <memcpy+0x118>
    3994:	780b      	ldrb	r3, [r1, #0]
    3996:	7003      	strb	r3, [r0, #0]
    3998:	784b      	ldrb	r3, [r1, #1]
    399a:	7043      	strb	r3, [r0, #1]
    399c:	788b      	ldrb	r3, [r1, #2]
    399e:	7083      	strb	r3, [r0, #2]
    39a0:	4660      	mov	r0, ip
    39a2:	4770      	bx	lr

000039a4 <memset>:
    39a4:	b470      	push	{r4, r5, r6}
    39a6:	0786      	lsls	r6, r0, #30
    39a8:	d046      	beq.n	3a38 <memset+0x94>
    39aa:	1e54      	subs	r4, r2, #1
    39ac:	2a00      	cmp	r2, #0
    39ae:	d041      	beq.n	3a34 <memset+0x90>
    39b0:	b2ca      	uxtb	r2, r1
    39b2:	4603      	mov	r3, r0
    39b4:	e002      	b.n	39bc <memset+0x18>
    39b6:	f114 34ff 	adds.w	r4, r4, #4294967295
    39ba:	d33b      	bcc.n	3a34 <memset+0x90>
    39bc:	f803 2b01 	strb.w	r2, [r3], #1
    39c0:	079d      	lsls	r5, r3, #30
    39c2:	d1f8      	bne.n	39b6 <memset+0x12>
    39c4:	2c03      	cmp	r4, #3
    39c6:	d92e      	bls.n	3a26 <memset+0x82>
    39c8:	b2cd      	uxtb	r5, r1
    39ca:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    39ce:	2c0f      	cmp	r4, #15
    39d0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    39d4:	d919      	bls.n	3a0a <memset+0x66>
    39d6:	f103 0210 	add.w	r2, r3, #16
    39da:	4626      	mov	r6, r4
    39dc:	3e10      	subs	r6, #16
    39de:	2e0f      	cmp	r6, #15
    39e0:	f842 5c10 	str.w	r5, [r2, #-16]
    39e4:	f842 5c0c 	str.w	r5, [r2, #-12]
    39e8:	f842 5c08 	str.w	r5, [r2, #-8]
    39ec:	f842 5c04 	str.w	r5, [r2, #-4]
    39f0:	f102 0210 	add.w	r2, r2, #16
    39f4:	d8f2      	bhi.n	39dc <memset+0x38>
    39f6:	f1a4 0210 	sub.w	r2, r4, #16
    39fa:	f022 020f 	bic.w	r2, r2, #15
    39fe:	f004 040f 	and.w	r4, r4, #15
    3a02:	3210      	adds	r2, #16
    3a04:	2c03      	cmp	r4, #3
    3a06:	4413      	add	r3, r2
    3a08:	d90d      	bls.n	3a26 <memset+0x82>
    3a0a:	461e      	mov	r6, r3
    3a0c:	4622      	mov	r2, r4
    3a0e:	3a04      	subs	r2, #4
    3a10:	2a03      	cmp	r2, #3
    3a12:	f846 5b04 	str.w	r5, [r6], #4
    3a16:	d8fa      	bhi.n	3a0e <memset+0x6a>
    3a18:	1f22      	subs	r2, r4, #4
    3a1a:	f022 0203 	bic.w	r2, r2, #3
    3a1e:	3204      	adds	r2, #4
    3a20:	4413      	add	r3, r2
    3a22:	f004 0403 	and.w	r4, r4, #3
    3a26:	b12c      	cbz	r4, 3a34 <memset+0x90>
    3a28:	b2c9      	uxtb	r1, r1
    3a2a:	441c      	add	r4, r3
    3a2c:	f803 1b01 	strb.w	r1, [r3], #1
    3a30:	429c      	cmp	r4, r3
    3a32:	d1fb      	bne.n	3a2c <memset+0x88>
    3a34:	bc70      	pop	{r4, r5, r6}
    3a36:	4770      	bx	lr
    3a38:	4614      	mov	r4, r2
    3a3a:	4603      	mov	r3, r0
    3a3c:	e7c2      	b.n	39c4 <memset+0x20>
    3a3e:	bf00      	nop

00003a40 <register_fini>:
    3a40:	4b02      	ldr	r3, [pc, #8]	; (3a4c <register_fini+0xc>)
    3a42:	b113      	cbz	r3, 3a4a <register_fini+0xa>
    3a44:	4802      	ldr	r0, [pc, #8]	; (3a50 <register_fini+0x10>)
    3a46:	f000 b805 	b.w	3a54 <atexit>
    3a4a:	4770      	bx	lr
    3a4c:	00000000 	.word	0x00000000
    3a50:	00003a61 	.word	0x00003a61

00003a54 <atexit>:
    3a54:	2300      	movs	r3, #0
    3a56:	4601      	mov	r1, r0
    3a58:	461a      	mov	r2, r3
    3a5a:	4618      	mov	r0, r3
    3a5c:	f000 b81e 	b.w	3a9c <__register_exitproc>

00003a60 <__libc_fini_array>:
    3a60:	b538      	push	{r3, r4, r5, lr}
    3a62:	4c0a      	ldr	r4, [pc, #40]	; (3a8c <__libc_fini_array+0x2c>)
    3a64:	4d0a      	ldr	r5, [pc, #40]	; (3a90 <__libc_fini_array+0x30>)
    3a66:	1b64      	subs	r4, r4, r5
    3a68:	10a4      	asrs	r4, r4, #2
    3a6a:	d00a      	beq.n	3a82 <__libc_fini_array+0x22>
    3a6c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    3a70:	3b01      	subs	r3, #1
    3a72:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3a76:	3c01      	subs	r4, #1
    3a78:	f855 3904 	ldr.w	r3, [r5], #-4
    3a7c:	4798      	blx	r3
    3a7e:	2c00      	cmp	r4, #0
    3a80:	d1f9      	bne.n	3a76 <__libc_fini_array+0x16>
    3a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3a86:	f000 b905 	b.w	3c94 <_fini>
    3a8a:	bf00      	nop
    3a8c:	00003ca4 	.word	0x00003ca4
    3a90:	00003ca0 	.word	0x00003ca0

00003a94 <__retarget_lock_acquire_recursive>:
    3a94:	4770      	bx	lr
    3a96:	bf00      	nop

00003a98 <__retarget_lock_release_recursive>:
    3a98:	4770      	bx	lr
    3a9a:	bf00      	nop

00003a9c <__register_exitproc>:
    3a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3aa0:	4d2c      	ldr	r5, [pc, #176]	; (3b54 <__register_exitproc+0xb8>)
    3aa2:	4606      	mov	r6, r0
    3aa4:	6828      	ldr	r0, [r5, #0]
    3aa6:	4698      	mov	r8, r3
    3aa8:	460f      	mov	r7, r1
    3aaa:	4691      	mov	r9, r2
    3aac:	f7ff fff2 	bl	3a94 <__retarget_lock_acquire_recursive>
    3ab0:	4b29      	ldr	r3, [pc, #164]	; (3b58 <__register_exitproc+0xbc>)
    3ab2:	681c      	ldr	r4, [r3, #0]
    3ab4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    3ab8:	2b00      	cmp	r3, #0
    3aba:	d03e      	beq.n	3b3a <__register_exitproc+0x9e>
    3abc:	685a      	ldr	r2, [r3, #4]
    3abe:	2a1f      	cmp	r2, #31
    3ac0:	dc1c      	bgt.n	3afc <__register_exitproc+0x60>
    3ac2:	f102 0e01 	add.w	lr, r2, #1
    3ac6:	b176      	cbz	r6, 3ae6 <__register_exitproc+0x4a>
    3ac8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    3acc:	2401      	movs	r4, #1
    3ace:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    3ad2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    3ad6:	4094      	lsls	r4, r2
    3ad8:	4320      	orrs	r0, r4
    3ada:	2e02      	cmp	r6, #2
    3adc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    3ae0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    3ae4:	d023      	beq.n	3b2e <__register_exitproc+0x92>
    3ae6:	3202      	adds	r2, #2
    3ae8:	f8c3 e004 	str.w	lr, [r3, #4]
    3aec:	6828      	ldr	r0, [r5, #0]
    3aee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    3af2:	f7ff ffd1 	bl	3a98 <__retarget_lock_release_recursive>
    3af6:	2000      	movs	r0, #0
    3af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3afc:	4b17      	ldr	r3, [pc, #92]	; (3b5c <__register_exitproc+0xc0>)
    3afe:	b30b      	cbz	r3, 3b44 <__register_exitproc+0xa8>
    3b00:	f44f 70c8 	mov.w	r0, #400	; 0x190
    3b04:	f3af 8000 	nop.w
    3b08:	4603      	mov	r3, r0
    3b0a:	b1d8      	cbz	r0, 3b44 <__register_exitproc+0xa8>
    3b0c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    3b10:	6002      	str	r2, [r0, #0]
    3b12:	2100      	movs	r1, #0
    3b14:	6041      	str	r1, [r0, #4]
    3b16:	460a      	mov	r2, r1
    3b18:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    3b1c:	f04f 0e01 	mov.w	lr, #1
    3b20:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    3b24:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    3b28:	2e00      	cmp	r6, #0
    3b2a:	d0dc      	beq.n	3ae6 <__register_exitproc+0x4a>
    3b2c:	e7cc      	b.n	3ac8 <__register_exitproc+0x2c>
    3b2e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    3b32:	430c      	orrs	r4, r1
    3b34:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    3b38:	e7d5      	b.n	3ae6 <__register_exitproc+0x4a>
    3b3a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    3b3e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    3b42:	e7bb      	b.n	3abc <__register_exitproc+0x20>
    3b44:	6828      	ldr	r0, [r5, #0]
    3b46:	f7ff ffa7 	bl	3a98 <__retarget_lock_release_recursive>
    3b4a:	f04f 30ff 	mov.w	r0, #4294967295
    3b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b52:	bf00      	nop
    3b54:	20000490 	.word	0x20000490
    3b58:	00003c7c 	.word	0x00003c7c
    3b5c:	00000000 	.word	0x00000000
    3b60:	682f2e2e 	.word	0x682f2e2e
    3b64:	732f6c61 	.word	0x732f6c61
    3b68:	682f6372 	.word	0x682f6372
    3b6c:	615f6c61 	.word	0x615f6c61
    3b70:	735f6364 	.word	0x735f6364
    3b74:	2e636e79 	.word	0x2e636e79
    3b78:	00000063 	.word	0x00000063
    3b7c:	682f2e2e 	.word	0x682f2e2e
    3b80:	732f6c61 	.word	0x732f6c61
    3b84:	682f6372 	.word	0x682f6372
    3b88:	735f6c61 	.word	0x735f6c61
    3b8c:	6d5f6970 	.word	0x6d5f6970
    3b90:	7973615f 	.word	0x7973615f
    3b94:	632e636e 	.word	0x632e636e
    3b98:	00000000 	.word	0x00000000

00003b9c <_adcs>:
    3b9c:	01000000 00800000 0000181d 00000000     ................
	...
    3bb4:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    3bc4:	632e6364 00000000 40003000 40003400     dc.c.....0.@.4.@
    3bd4:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    3be4:	43000800 43000c00                       ...C...C

00003bec <_i2cms>:
	...
    3c04:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    3c14:	65735f6c 6d6f6372 0000632e              l_sercom.c..

00003c20 <_usb_ep_cfgs>:
    3c20:	200006e0 00000000 00000040 200006a0     ... ....@...... 
    3c30:	00000000 00000040 20000660 00000000     ....@...`.. ....
    3c40:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    3c50:	73752f65 2e636462 00000063 682f2e2e     e/usbdc.c...../h
    3c60:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
    3c70:	6c5f736c 2e747369 00000063              ls_list.c...

00003c7c <_global_impure_ptr>:
    3c7c:	20000068                                h.. 

00003c80 <_init>:
    3c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c82:	bf00      	nop
    3c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c86:	bc08      	pop	{r3}
    3c88:	469e      	mov	lr, r3
    3c8a:	4770      	bx	lr

00003c8c <__init_array_start>:
    3c8c:	00003a41 	.word	0x00003a41

00003c90 <__frame_dummy_init_array_entry>:
    3c90:	00000289                                ....

00003c94 <_fini>:
    3c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c96:	bf00      	nop
    3c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c9a:	bc08      	pop	{r3}
    3c9c:	469e      	mov	lr, r3
    3c9e:	4770      	bx	lr

00003ca0 <__fini_array_start>:
    3ca0:	00000265 	.word	0x00000265
