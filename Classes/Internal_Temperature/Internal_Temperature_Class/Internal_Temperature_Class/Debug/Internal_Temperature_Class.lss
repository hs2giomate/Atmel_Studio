
Internal_Temperature_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000465c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000494  20000000  0000465c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020494  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020494  2**0
                  CONTENTS
  4 .bss          000003f8  20000494  00004af0  00020494  2**2
                  ALLOC
  5 .stack        00010004  2000088c  00004ee8  00020494  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020494  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000204c2  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003c5d6  00000000  00000000  0002051b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000514e  00000000  00000000  0005caf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001772a  00000000  00000000  00061c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000011d0  00000000  00000000  00079369  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000019b8  00000000  00000000  0007a539  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003ccd9  00000000  00000000  0007bef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001d646  00000000  00000000  000b8bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00129f43  00000000  00000000  000d6210  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003094  00000000  00000000  00200154  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 08 01 20 89 05 00 00 0d 06 00 00 0d 06 00 00     ... ............
      10:	0d 06 00 00 0d 06 00 00 0d 06 00 00 00 00 00 00     ................
	...
      2c:	0d 06 00 00 0d 06 00 00 00 00 00 00 0d 06 00 00     ................
      3c:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      4c:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      5c:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      6c:	29 1d 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     )...............
      7c:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      8c:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      9c:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      ac:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      bc:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      cc:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
      dc:	0d 06 00 00 0d 06 00 00 0d 06 00 00 00 00 00 00     ................
	...
      f4:	0d 06 00 00 f5 1d 00 00 09 1e 00 00 1d 1e 00 00     ................
     104:	31 1e 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     1...............
     114:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     124:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     134:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     144:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     154:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     164:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     174:	0d 06 00 00 0d 06 00 00 0d 06 00 00 2d 35 00 00     ............-5..
     184:	39 35 00 00 45 35 00 00 51 35 00 00 0d 06 00 00     95..E5..Q5......
     194:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     1a4:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     1b4:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     1c4:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     1d4:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     1e4:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     1f4:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     204:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     214:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     224:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     234:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     244:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................
     254:	0d 06 00 00 0d 06 00 00 0d 06 00 00 0d 06 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000494 	.word	0x20000494
     280:	00000000 	.word	0x00000000
     284:	0000465c 	.word	0x0000465c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000465c 	.word	0x0000465c
     2c4:	20000498 	.word	0x20000498
     2c8:	0000465c 	.word	0x0000465c
     2cc:	00000000 	.word	0x00000000

000002d0 <hri_supc_set_VREF_TSEN_bit>:
{
	return ((Supc *)hw)->VREG.reg;
}

static inline void hri_supc_set_VREF_TSEN_bit(const void *const hw)
{
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
	SUPC_CRITICAL_SECTION_ENTER();
	((Supc *)hw)->VREF.reg |= SUPC_VREF_TSEN;
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	69db      	ldr	r3, [r3, #28]
     2dc:	f043 0202 	orr.w	r2, r3, #2
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	61da      	str	r2, [r3, #28]
	SUPC_CRITICAL_SECTION_LEAVE();
}
     2e4:	bf00      	nop
     2e6:	370c      	adds	r7, #12
     2e8:	46bd      	mov	sp, r7
     2ea:	bc80      	pop	{r7}
     2ec:	4770      	bx	lr

000002ee <hri_supc_clear_VREF_VREFOE_bit>:
	((Supc *)hw)->VREF.reg = tmp;
	SUPC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_supc_clear_VREF_VREFOE_bit(const void *const hw)
{
     2ee:	b480      	push	{r7}
     2f0:	b083      	sub	sp, #12
     2f2:	af00      	add	r7, sp, #0
     2f4:	6078      	str	r0, [r7, #4]
	SUPC_CRITICAL_SECTION_ENTER();
	((Supc *)hw)->VREF.reg &= ~SUPC_VREF_VREFOE;
     2f6:	687b      	ldr	r3, [r7, #4]
     2f8:	69db      	ldr	r3, [r3, #28]
     2fa:	f023 0204 	bic.w	r2, r3, #4
     2fe:	687b      	ldr	r3, [r7, #4]
     300:	61da      	str	r2, [r3, #28]
	SUPC_CRITICAL_SECTION_LEAVE();
}
     302:	bf00      	nop
     304:	370c      	adds	r7, #12
     306:	46bd      	mov	sp, r7
     308:	bc80      	pop	{r7}
     30a:	4770      	bx	lr

0000030c <hri_supc_set_VREF_ONDEMAND_bit>:
	((Supc *)hw)->VREF.reg ^= SUPC_VREF_RUNSTDBY;
	SUPC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_supc_set_VREF_ONDEMAND_bit(const void *const hw)
{
     30c:	b480      	push	{r7}
     30e:	b083      	sub	sp, #12
     310:	af00      	add	r7, sp, #0
     312:	6078      	str	r0, [r7, #4]
	SUPC_CRITICAL_SECTION_ENTER();
	((Supc *)hw)->VREF.reg |= SUPC_VREF_ONDEMAND;
     314:	687b      	ldr	r3, [r7, #4]
     316:	69db      	ldr	r3, [r3, #28]
     318:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	61da      	str	r2, [r3, #28]
	SUPC_CRITICAL_SECTION_LEAVE();
}
     320:	bf00      	nop
     322:	370c      	adds	r7, #12
     324:	46bd      	mov	sp, r7
     326:	bc80      	pop	{r7}
     328:	4770      	bx	lr

0000032a <_ZN21CPU_Temperature_ClassC1Ev>:

#include "CPU_Temperature_Class.h"


// default constructor
CPU_Temperature_Class::CPU_Temperature_Class()
     32a:	b480      	push	{r7}
     32c:	b083      	sub	sp, #12
     32e:	af00      	add	r7, sp, #0
     330:	6078      	str	r0, [r7, #4]
{
} //CPU_Temperature_Class
     332:	687b      	ldr	r3, [r7, #4]
     334:	4618      	mov	r0, r3
     336:	370c      	adds	r7, #12
     338:	46bd      	mov	sp, r7
     33a:	bc80      	pop	{r7}
     33c:	4770      	bx	lr
	...

00000340 <_ZN21CPU_Temperature_Class4InitEv>:

// default destructor
CPU_Temperature_Class::~CPU_Temperature_Class()
{
} //~CPU_Temperature_Class
void CPU_Temperature_Class::Init(void){
     340:	b580      	push	{r7, lr}
     342:	b082      	sub	sp, #8
     344:	af00      	add	r7, sp, #0
     346:	6078      	str	r0, [r7, #4]
	//pClass=this;
	ADC_Init();
     348:	6878      	ldr	r0, [r7, #4]
     34a:	4b03      	ldr	r3, [pc, #12]	; (358 <_ZN21CPU_Temperature_Class4InitEv+0x18>)
     34c:	4798      	blx	r3
}
     34e:	bf00      	nop
     350:	3708      	adds	r7, #8
     352:	46bd      	mov	sp, r7
     354:	bd80      	pop	{r7, pc}
     356:	bf00      	nop
     358:	0000035d 	.word	0x0000035d

0000035c <_ZN21CPU_Temperature_Class8ADC_InitEv>:


void CPU_Temperature_Class::ADC_Init(void){
     35c:	b580      	push	{r7, lr}
     35e:	b084      	sub	sp, #16
     360:	af00      	add	r7, sp, #0
     362:	6078      	str	r0, [r7, #4]
	
	int8_t temp_cal_tli, temp_cal_thi, temp_cal_tld, temp_cal_thd;

	temp_cal_vpl = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_VPL_POS / 32)) >> (NVM_TEMP_CAL_VPL_POS % 32))
     364:	4b2e      	ldr	r3, [pc, #184]	; (420 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xc4>)
     366:	681b      	ldr	r3, [r3, #0]
     368:	0a1b      	lsrs	r3, r3, #8
	& ((1 << NVM_TEMP_CAL_VPL_SIZE) - 1);
     36a:	b21b      	sxth	r3, r3
     36c:	f3c3 030b 	ubfx	r3, r3, #0, #12
     370:	b21a      	sxth	r2, r3
	temp_cal_vpl = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_VPL_POS / 32)) >> (NVM_TEMP_CAL_VPL_POS % 32))
     372:	687b      	ldr	r3, [r7, #4]
     374:	809a      	strh	r2, [r3, #4]
	temp_cal_vph = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_VPH_POS / 32)) >> (NVM_TEMP_CAL_VPH_POS % 32))
     376:	4b2a      	ldr	r3, [pc, #168]	; (420 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xc4>)
     378:	681b      	ldr	r3, [r3, #0]
     37a:	0d1b      	lsrs	r3, r3, #20
	& ((1 << NVM_TEMP_CAL_VPH_SIZE) - 1);
     37c:	b21a      	sxth	r2, r3
	temp_cal_vph = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_VPH_POS / 32)) >> (NVM_TEMP_CAL_VPH_POS % 32))
     37e:	687b      	ldr	r3, [r7, #4]
     380:	80da      	strh	r2, [r3, #6]
	temp_cal_vcl = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_VCL_POS / 32)) >> (NVM_TEMP_CAL_VCL_POS % 32))
     382:	4b28      	ldr	r3, [pc, #160]	; (424 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xc8>)
     384:	681b      	ldr	r3, [r3, #0]
	& ((1 << NVM_TEMP_CAL_VCL_SIZE) - 1);
     386:	b21b      	sxth	r3, r3
     388:	f3c3 030b 	ubfx	r3, r3, #0, #12
     38c:	b21a      	sxth	r2, r3
	temp_cal_vcl = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_VCL_POS / 32)) >> (NVM_TEMP_CAL_VCL_POS % 32))
     38e:	687b      	ldr	r3, [r7, #4]
     390:	811a      	strh	r2, [r3, #8]
	temp_cal_vch = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_VCH_POS / 32)) >> (NVM_TEMP_CAL_VCH_POS % 32))
     392:	4b24      	ldr	r3, [pc, #144]	; (424 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xc8>)
     394:	681b      	ldr	r3, [r3, #0]
     396:	0b1b      	lsrs	r3, r3, #12
	& ((1 << NVM_TEMP_CAL_VCH_SIZE) - 1);
     398:	b21b      	sxth	r3, r3
     39a:	f3c3 030b 	ubfx	r3, r3, #0, #12
     39e:	b21a      	sxth	r2, r3
	temp_cal_vch = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_VCH_POS / 32)) >> (NVM_TEMP_CAL_VCH_POS % 32))
     3a0:	687b      	ldr	r3, [r7, #4]
     3a2:	815a      	strh	r2, [r3, #10]

	temp_cal_tli = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_TLI_POS / 32)) >> (NVM_TEMP_CAL_TLI_POS % 32))
     3a4:	4b20      	ldr	r3, [pc, #128]	; (428 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xcc>)
     3a6:	681b      	ldr	r3, [r3, #0]
     3a8:	73fb      	strb	r3, [r7, #15]
	& ((1 << NVM_TEMP_CAL_TLI_SIZE) - 1);
	temp_cal_tld = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_TLD_POS / 32)) >> (NVM_TEMP_CAL_TLD_POS % 32))
     3aa:	4b1f      	ldr	r3, [pc, #124]	; (428 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xcc>)
     3ac:	681b      	ldr	r3, [r3, #0]
     3ae:	0a1b      	lsrs	r3, r3, #8
	& ((1 << NVM_TEMP_CAL_TLD_SIZE) - 1);
     3b0:	b25b      	sxtb	r3, r3
	temp_cal_tld = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_TLD_POS / 32)) >> (NVM_TEMP_CAL_TLD_POS % 32))
     3b2:	f003 030f 	and.w	r3, r3, #15
     3b6:	73bb      	strb	r3, [r7, #14]

	temp_cal_tl = ((uint16_t)temp_cal_tli) << 4 | ((uint16_t)temp_cal_tld);
     3b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
     3bc:	b29b      	uxth	r3, r3
     3be:	011b      	lsls	r3, r3, #4
     3c0:	b21a      	sxth	r2, r3
     3c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
     3c6:	b21b      	sxth	r3, r3
     3c8:	4313      	orrs	r3, r2
     3ca:	b21a      	sxth	r2, r3
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	801a      	strh	r2, [r3, #0]

	temp_cal_thi = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_THI_POS / 32)) >> (NVM_TEMP_CAL_THI_POS % 32))
     3d0:	4b15      	ldr	r3, [pc, #84]	; (428 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xcc>)
     3d2:	681b      	ldr	r3, [r3, #0]
     3d4:	0b1b      	lsrs	r3, r3, #12
     3d6:	737b      	strb	r3, [r7, #13]
	& ((1 << NVM_TEMP_CAL_THI_SIZE) - 1);
	temp_cal_thd = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_THD_POS / 32)) >> (NVM_TEMP_CAL_THD_POS % 32))
     3d8:	4b13      	ldr	r3, [pc, #76]	; (428 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xcc>)
     3da:	681b      	ldr	r3, [r3, #0]
     3dc:	0d1b      	lsrs	r3, r3, #20
	& ((1 << NVM_TEMP_CAL_THD_SIZE) - 1);
     3de:	b25b      	sxtb	r3, r3
	temp_cal_thd = (*((uint32_t *)(NVMCTRL_TEMP_LOG) + (NVM_TEMP_CAL_THD_POS / 32)) >> (NVM_TEMP_CAL_THD_POS % 32))
     3e0:	f003 030f 	and.w	r3, r3, #15
     3e4:	733b      	strb	r3, [r7, #12]

	temp_cal_th = ((uint16_t)temp_cal_thi) << 4 | ((uint16_t)temp_cal_thd);
     3e6:	f997 300d 	ldrsb.w	r3, [r7, #13]
     3ea:	b29b      	uxth	r3, r3
     3ec:	011b      	lsls	r3, r3, #4
     3ee:	b21a      	sxth	r2, r3
     3f0:	f997 300c 	ldrsb.w	r3, [r7, #12]
     3f4:	b21b      	sxth	r3, r3
     3f6:	4313      	orrs	r3, r2
     3f8:	b21a      	sxth	r2, r3
     3fa:	687b      	ldr	r3, [r7, #4]
     3fc:	805a      	strh	r2, [r3, #2]

	hri_supc_set_VREF_ONDEMAND_bit(SUPC);
     3fe:	480b      	ldr	r0, [pc, #44]	; (42c <_ZN21CPU_Temperature_Class8ADC_InitEv+0xd0>)
     400:	4b0b      	ldr	r3, [pc, #44]	; (430 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xd4>)
     402:	4798      	blx	r3
	hri_supc_set_VREF_TSEN_bit(SUPC);
     404:	4809      	ldr	r0, [pc, #36]	; (42c <_ZN21CPU_Temperature_Class8ADC_InitEv+0xd0>)
     406:	4b0b      	ldr	r3, [pc, #44]	; (434 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xd8>)
     408:	4798      	blx	r3
	hri_supc_clear_VREF_VREFOE_bit(SUPC);
     40a:	4808      	ldr	r0, [pc, #32]	; (42c <_ZN21CPU_Temperature_Class8ADC_InitEv+0xd0>)
     40c:	4b0a      	ldr	r3, [pc, #40]	; (438 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xdc>)
     40e:	4798      	blx	r3
	adc_sync_enable_channel(&ADC_0, CONF_ADC_CHANNEL);
     410:	2100      	movs	r1, #0
     412:	480a      	ldr	r0, [pc, #40]	; (43c <_ZN21CPU_Temperature_Class8ADC_InitEv+0xe0>)
     414:	4b0a      	ldr	r3, [pc, #40]	; (440 <_ZN21CPU_Temperature_Class8ADC_InitEv+0xe4>)
     416:	4798      	blx	r3
}
     418:	bf00      	nop
     41a:	3710      	adds	r7, #16
     41c:	46bd      	mov	sp, r7
     41e:	bd80      	pop	{r7, pc}
     420:	00800104 	.word	0x00800104
     424:	00800108 	.word	0x00800108
     428:	00800100 	.word	0x00800100
     42c:	40001800 	.word	0x40001800
     430:	0000030d 	.word	0x0000030d
     434:	000002d1 	.word	0x000002d1
     438:	000002ef 	.word	0x000002ef
     43c:	20000800 	.word	0x20000800
     440:	00000c31 	.word	0x00000c31

00000444 <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv>:

int32_t CPU_Temperature_Class::GetTemperatureCPU(void){
     444:	b590      	push	{r4, r7, lr}
     446:	b085      	sub	sp, #20
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];
	adc_sync_set_inputs(&ADC_0, ADC_INPUTCTRL_MUXPOS_CTAT_Val, ADC_INPUTCTRL_MUXNEG_GND_Val, CONF_ADC_CHANNEL);
     44c:	2300      	movs	r3, #0
     44e:	2218      	movs	r2, #24
     450:	211d      	movs	r1, #29
     452:	484a      	ldr	r0, [pc, #296]	; (57c <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv+0x138>)
     454:	4c4a      	ldr	r4, [pc, #296]	; (580 <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv+0x13c>)
     456:	47a0      	blx	r4
	adc_sync_read_channel(&ADC_0, CONF_ADC_CHANNEL, buffer, 2);
     458:	f107 020c 	add.w	r2, r7, #12
     45c:	2302      	movs	r3, #2
     45e:	2100      	movs	r1, #0
     460:	4846      	ldr	r0, [pc, #280]	; (57c <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv+0x138>)
     462:	4c48      	ldr	r4, [pc, #288]	; (584 <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv+0x140>)
     464:	47a0      	blx	r4
	tc_result = ((uint16_t)buffer[1]) << 8 | ((uint16_t)buffer[0]);
     466:	7b7b      	ldrb	r3, [r7, #13]
     468:	021b      	lsls	r3, r3, #8
     46a:	b21a      	sxth	r2, r3
     46c:	7b3b      	ldrb	r3, [r7, #12]
     46e:	b21b      	sxth	r3, r3
     470:	4313      	orrs	r3, r2
     472:	b21a      	sxth	r2, r3
     474:	687b      	ldr	r3, [r7, #4]
     476:	81da      	strh	r2, [r3, #14]

	adc_sync_set_inputs(&ADC_0, ADC_INPUTCTRL_MUXPOS_PTAT_Val, ADC_INPUTCTRL_MUXNEG_GND_Val, CONF_ADC_CHANNEL);
     478:	2300      	movs	r3, #0
     47a:	2218      	movs	r2, #24
     47c:	211c      	movs	r1, #28
     47e:	483f      	ldr	r0, [pc, #252]	; (57c <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv+0x138>)
     480:	4c3f      	ldr	r4, [pc, #252]	; (580 <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv+0x13c>)
     482:	47a0      	blx	r4
	adc_sync_read_channel(&ADC_0, CONF_ADC_CHANNEL, buffer, 2);
     484:	f107 020c 	add.w	r2, r7, #12
     488:	2302      	movs	r3, #2
     48a:	2100      	movs	r1, #0
     48c:	483b      	ldr	r0, [pc, #236]	; (57c <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv+0x138>)
     48e:	4c3d      	ldr	r4, [pc, #244]	; (584 <_ZN21CPU_Temperature_Class17GetTemperatureCPUEv+0x140>)
     490:	47a0      	blx	r4
	tp_result = ((uint16_t)buffer[1]) << 8 | ((uint16_t)buffer[0]);
     492:	7b7b      	ldrb	r3, [r7, #13]
     494:	021b      	lsls	r3, r3, #8
     496:	b21a      	sxth	r2, r3
     498:	7b3b      	ldrb	r3, [r7, #12]
     49a:	b21b      	sxth	r3, r3
     49c:	4313      	orrs	r3, r2
     49e:	b21a      	sxth	r2, r3
     4a0:	687b      	ldr	r3, [r7, #4]
     4a2:	819a      	strh	r2, [r3, #12]

	result = (int64_t)(temp_cal_tl * temp_cal_vph * tc_result - (int64_t)temp_cal_vpl * temp_cal_th * tc_result
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	f9b3 3000 	ldrsh.w	r3, [r3]
     4aa:	461a      	mov	r2, r3
     4ac:	687b      	ldr	r3, [r7, #4]
     4ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
     4b2:	fb03 f302 	mul.w	r3, r3, r2
     4b6:	687a      	ldr	r2, [r7, #4]
     4b8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
     4bc:	fb02 f303 	mul.w	r3, r2, r3
     4c0:	4619      	mov	r1, r3
     4c2:	687b      	ldr	r3, [r7, #4]
     4c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
     4c8:	461a      	mov	r2, r3
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
     4d0:	fb03 f302 	mul.w	r3, r3, r2
     4d4:	687a      	ldr	r2, [r7, #4]
     4d6:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
     4da:	fb02 f303 	mul.w	r3, r2, r3
     4de:	1aca      	subs	r2, r1, r3
	- (int64_t)temp_cal_tl * temp_cal_vch * tp_result
	+ (int64_t)temp_cal_th * temp_cal_vcl * tp_result);
     4e0:	687b      	ldr	r3, [r7, #4]
     4e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
     4e6:	4619      	mov	r1, r3
     4e8:	687b      	ldr	r3, [r7, #4]
     4ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
     4ee:	fb03 f101 	mul.w	r1, r3, r1
	- (int64_t)temp_cal_tl * temp_cal_vch * tp_result
     4f2:	687b      	ldr	r3, [r7, #4]
     4f4:	f9b3 3000 	ldrsh.w	r3, [r3]
	+ (int64_t)temp_cal_th * temp_cal_vcl * tp_result);
     4f8:	4618      	mov	r0, r3
	- (int64_t)temp_cal_tl * temp_cal_vch * tp_result
     4fa:	687b      	ldr	r3, [r7, #4]
     4fc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
	+ (int64_t)temp_cal_th * temp_cal_vcl * tp_result);
     500:	fb03 f300 	mul.w	r3, r3, r0
     504:	1acb      	subs	r3, r1, r3
     506:	6879      	ldr	r1, [r7, #4]
     508:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
     50c:	fb01 f303 	mul.w	r3, r1, r3
     510:	4413      	add	r3, r2
     512:	461a      	mov	r2, r3
	result = (int64_t)(temp_cal_tl * temp_cal_vph * tc_result - (int64_t)temp_cal_vpl * temp_cal_th * tc_result
     514:	687b      	ldr	r3, [r7, #4]
     516:	611a      	str	r2, [r3, #16]
	result /= ((int32_t)temp_cal_vcl * tp_result - (int32_t)temp_cal_vch * tp_result
	- (int32_t)temp_cal_vpl * tc_result + (int32_t)temp_cal_vph * tc_result);
     518:	687b      	ldr	r3, [r7, #4]
     51a:	691a      	ldr	r2, [r3, #16]
	result /= ((int32_t)temp_cal_vcl * tp_result - (int32_t)temp_cal_vch * tp_result
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
     522:	4619      	mov	r1, r3
     524:	687b      	ldr	r3, [r7, #4]
     526:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
     52a:	1acb      	subs	r3, r1, r3
     52c:	6879      	ldr	r1, [r7, #4]
     52e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
     532:	fb01 f103 	mul.w	r1, r1, r3
	- (int32_t)temp_cal_vpl * tc_result + (int32_t)temp_cal_vph * tc_result);
     536:	687b      	ldr	r3, [r7, #4]
     538:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
     53c:	4618      	mov	r0, r3
     53e:	687b      	ldr	r3, [r7, #4]
     540:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
     544:	fb03 f300 	mul.w	r3, r3, r0
     548:	1ac9      	subs	r1, r1, r3
     54a:	687b      	ldr	r3, [r7, #4]
     54c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
     550:	4618      	mov	r0, r3
     552:	687b      	ldr	r3, [r7, #4]
     554:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
     558:	fb03 f300 	mul.w	r3, r3, r0
     55c:	440b      	add	r3, r1
     55e:	fb92 f2f3 	sdiv	r2, r2, r3
	result /= ((int32_t)temp_cal_vcl * tp_result - (int32_t)temp_cal_vch * tp_result
     562:	687b      	ldr	r3, [r7, #4]
     564:	611a      	str	r2, [r3, #16]
	result >>= 4;
     566:	687b      	ldr	r3, [r7, #4]
     568:	691b      	ldr	r3, [r3, #16]
     56a:	111a      	asrs	r2, r3, #4
     56c:	687b      	ldr	r3, [r7, #4]
     56e:	611a      	str	r2, [r3, #16]
	return result;
     570:	687b      	ldr	r3, [r7, #4]
     572:	691b      	ldr	r3, [r3, #16]
}
     574:	4618      	mov	r0, r3
     576:	3714      	adds	r7, #20
     578:	46bd      	mov	sp, r7
     57a:	bd90      	pop	{r4, r7, pc}
     57c:	20000800 	.word	0x20000800
     580:	00000cfd 	.word	0x00000cfd
     584:	00000c5d 	.word	0x00000c5d

00000588 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     588:	b580      	push	{r7, lr}
     58a:	b082      	sub	sp, #8
     58c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     58e:	4b16      	ldr	r3, [pc, #88]	; (5e8 <Reset_Handler+0x60>)
     590:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     592:	4b16      	ldr	r3, [pc, #88]	; (5ec <Reset_Handler+0x64>)
     594:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     596:	687a      	ldr	r2, [r7, #4]
     598:	683b      	ldr	r3, [r7, #0]
     59a:	429a      	cmp	r2, r3
     59c:	d00c      	beq.n	5b8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     59e:	e007      	b.n	5b0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     5a0:	683b      	ldr	r3, [r7, #0]
     5a2:	1d1a      	adds	r2, r3, #4
     5a4:	603a      	str	r2, [r7, #0]
     5a6:	687a      	ldr	r2, [r7, #4]
     5a8:	1d11      	adds	r1, r2, #4
     5aa:	6079      	str	r1, [r7, #4]
     5ac:	6812      	ldr	r2, [r2, #0]
     5ae:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     5b0:	683b      	ldr	r3, [r7, #0]
     5b2:	4a0f      	ldr	r2, [pc, #60]	; (5f0 <Reset_Handler+0x68>)
     5b4:	4293      	cmp	r3, r2
     5b6:	d3f3      	bcc.n	5a0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     5b8:	4b0e      	ldr	r3, [pc, #56]	; (5f4 <Reset_Handler+0x6c>)
     5ba:	603b      	str	r3, [r7, #0]
     5bc:	e004      	b.n	5c8 <Reset_Handler+0x40>
                *pDest++ = 0;
     5be:	683b      	ldr	r3, [r7, #0]
     5c0:	1d1a      	adds	r2, r3, #4
     5c2:	603a      	str	r2, [r7, #0]
     5c4:	2200      	movs	r2, #0
     5c6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     5c8:	683b      	ldr	r3, [r7, #0]
     5ca:	4a0b      	ldr	r2, [pc, #44]	; (5f8 <Reset_Handler+0x70>)
     5cc:	4293      	cmp	r3, r2
     5ce:	d3f6      	bcc.n	5be <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     5d0:	4b0a      	ldr	r3, [pc, #40]	; (5fc <Reset_Handler+0x74>)
     5d2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     5d4:	4a0a      	ldr	r2, [pc, #40]	; (600 <Reset_Handler+0x78>)
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     5dc:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     5de:	4b09      	ldr	r3, [pc, #36]	; (604 <Reset_Handler+0x7c>)
     5e0:	4798      	blx	r3

        /* Branch to main function */
        main();
     5e2:	4b09      	ldr	r3, [pc, #36]	; (608 <Reset_Handler+0x80>)
     5e4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     5e6:	e7fe      	b.n	5e6 <Reset_Handler+0x5e>
     5e8:	0000465c 	.word	0x0000465c
     5ec:	20000000 	.word	0x20000000
     5f0:	20000494 	.word	0x20000494
     5f4:	20000494 	.word	0x20000494
     5f8:	2000088c 	.word	0x2000088c
     5fc:	00000000 	.word	0x00000000
     600:	e000ed00 	.word	0xe000ed00
     604:	00004065 	.word	0x00004065
     608:	00000615 	.word	0x00000615

0000060c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     60c:	b480      	push	{r7}
     60e:	af00      	add	r7, sp, #0
        while (1) {
     610:	e7fe      	b.n	610 <Dummy_Handler+0x4>
	...

00000614 <main>:


#include "CPU_Temperature_Class.h"

int main(void)
{
     614:	b580      	push	{r7, lr}
     616:	b086      	sub	sp, #24
     618:	af00      	add	r7, sp, #0
		atmel_start_init();
     61a:	4b0a      	ldr	r3, [pc, #40]	; (644 <main+0x30>)
     61c:	4798      	blx	r3
		CPU_Temperature_Class tCPU;
     61e:	463b      	mov	r3, r7
     620:	4618      	mov	r0, r3
     622:	4b09      	ldr	r3, [pc, #36]	; (648 <main+0x34>)
     624:	4798      	blx	r3
		tCPU.Init();
     626:	463b      	mov	r3, r7
     628:	4618      	mov	r0, r3
     62a:	4b08      	ldr	r3, [pc, #32]	; (64c <main+0x38>)
     62c:	4798      	blx	r3
		int32_t t;
    /* Replace with your application code */
    while (1) 
    {
		t=tCPU.GetTemperatureCPU();
     62e:	463b      	mov	r3, r7
     630:	4618      	mov	r0, r3
     632:	4b07      	ldr	r3, [pc, #28]	; (650 <main+0x3c>)
     634:	4798      	blx	r3
     636:	6178      	str	r0, [r7, #20]
		delay_ms(1000);
     638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     63c:	4b05      	ldr	r3, [pc, #20]	; (654 <main+0x40>)
     63e:	4798      	blx	r3
		t=tCPU.GetTemperatureCPU();
     640:	e7f5      	b.n	62e <main+0x1a>
     642:	bf00      	nop
     644:	00000659 	.word	0x00000659
     648:	0000032b 	.word	0x0000032b
     64c:	00000341 	.word	0x00000341
     650:	00000445 	.word	0x00000445
     654:	00000d45 	.word	0x00000d45

00000658 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     658:	b508      	push	{r3, lr}
	system_init();
     65a:	4b02      	ldr	r3, [pc, #8]	; (664 <atmel_start_init+0xc>)
     65c:	4798      	blx	r3
	usb_init();
     65e:	4b02      	ldr	r3, [pc, #8]	; (668 <atmel_start_init+0x10>)
     660:	4798      	blx	r3
     662:	bd08      	pop	{r3, pc}
     664:	000009bd 	.word	0x000009bd
     668:	0000358d 	.word	0x0000358d

0000066c <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     66c:	4a04      	ldr	r2, [pc, #16]	; (680 <ADC_0_CLOCK_init+0x14>)
     66e:	6a13      	ldr	r3, [r2, #32]
     670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     674:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     676:	2240      	movs	r2, #64	; 0x40
     678:	4b02      	ldr	r3, [pc, #8]	; (684 <ADC_0_CLOCK_init+0x18>)
     67a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     67e:	4770      	bx	lr
     680:	40000800 	.word	0x40000800
     684:	40001c00 	.word	0x40001c00

00000688 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     688:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     68a:	4b04      	ldr	r3, [pc, #16]	; (69c <ADC_0_init+0x14>)
     68c:	4798      	blx	r3
	ADC_0_PORT_init();
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     68e:	2200      	movs	r2, #0
     690:	4903      	ldr	r1, [pc, #12]	; (6a0 <ADC_0_init+0x18>)
     692:	4804      	ldr	r0, [pc, #16]	; (6a4 <ADC_0_init+0x1c>)
     694:	4b04      	ldr	r3, [pc, #16]	; (6a8 <ADC_0_init+0x20>)
     696:	4798      	blx	r3
     698:	bd08      	pop	{r3, pc}
     69a:	bf00      	nop
     69c:	0000066d 	.word	0x0000066d
     6a0:	43001c00 	.word	0x43001c00
     6a4:	20000800 	.word	0x20000800
     6a8:	00000c01 	.word	0x00000c01

000006ac <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     6ac:	b508      	push	{r3, lr}
     6ae:	4b07      	ldr	r3, [pc, #28]	; (6cc <EVENT_SYSTEM_0_init+0x20>)
     6b0:	2240      	movs	r2, #64	; 0x40
     6b2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     6b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     6ba:	4a05      	ldr	r2, [pc, #20]	; (6d0 <EVENT_SYSTEM_0_init+0x24>)
     6bc:	6993      	ldr	r3, [r2, #24]
     6be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     6c2:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     6c4:	4b03      	ldr	r3, [pc, #12]	; (6d4 <EVENT_SYSTEM_0_init+0x28>)
     6c6:	4798      	blx	r3
     6c8:	bd08      	pop	{r3, pc}
     6ca:	bf00      	nop
     6cc:	40001c00 	.word	0x40001c00
     6d0:	40000800 	.word	0x40000800
     6d4:	00000d65 	.word	0x00000d65

000006d8 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6d8:	4b28      	ldr	r3, [pc, #160]	; (77c <SPI_0_PORT_init+0xa4>)
     6da:	2210      	movs	r2, #16
     6dc:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6de:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6e0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     6e4:	629a      	str	r2, [r3, #40]	; 0x28
     6e6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     6ea:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6ec:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     6f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6f4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6fc:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     700:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     704:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     708:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     70c:	2220      	movs	r2, #32
     70e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     710:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     712:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     716:	629a      	str	r2, [r3, #40]	; 0x28
     718:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     71a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     71e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     722:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     72a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     72e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     732:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     736:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     73a:	2240      	movs	r2, #64	; 0x40
     73c:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     73e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     742:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     746:	629a      	str	r2, [r3, #40]	; 0x28
     748:	4a0d      	ldr	r2, [pc, #52]	; (780 <SPI_0_PORT_init+0xa8>)
     74a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     74c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     750:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     758:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     75c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     760:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     768:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     76c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     770:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     774:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     778:	4770      	bx	lr
     77a:	bf00      	nop
     77c:	41008000 	.word	0x41008000
     780:	c0020000 	.word	0xc0020000

00000784 <SPI_0_CLOCK_init>:
     784:	4b06      	ldr	r3, [pc, #24]	; (7a0 <SPI_0_CLOCK_init+0x1c>)
     786:	2241      	movs	r2, #65	; 0x41
     788:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     78c:	2243      	movs	r2, #67	; 0x43
     78e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     792:	4a04      	ldr	r2, [pc, #16]	; (7a4 <SPI_0_CLOCK_init+0x20>)
     794:	6953      	ldr	r3, [r2, #20]
     796:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     79a:	6153      	str	r3, [r2, #20]
     79c:	4770      	bx	lr
     79e:	bf00      	nop
     7a0:	40001c00 	.word	0x40001c00
     7a4:	40000800 	.word	0x40000800

000007a8 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     7a8:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     7aa:	4b04      	ldr	r3, [pc, #16]	; (7bc <SPI_0_init+0x14>)
     7ac:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
     7ae:	4904      	ldr	r1, [pc, #16]	; (7c0 <SPI_0_init+0x18>)
     7b0:	4804      	ldr	r0, [pc, #16]	; (7c4 <SPI_0_init+0x1c>)
     7b2:	4b05      	ldr	r3, [pc, #20]	; (7c8 <SPI_0_init+0x20>)
     7b4:	4798      	blx	r3
	SPI_0_PORT_init();
     7b6:	4b05      	ldr	r3, [pc, #20]	; (7cc <SPI_0_init+0x24>)
     7b8:	4798      	blx	r3
     7ba:	bd08      	pop	{r3, pc}
     7bc:	00000785 	.word	0x00000785
     7c0:	40003000 	.word	0x40003000
     7c4:	20000804 	.word	0x20000804
     7c8:	00000f31 	.word	0x00000f31
     7cc:	000006d9 	.word	0x000006d9

000007d0 <SPI_1_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7d0:	4b2d      	ldr	r3, [pc, #180]	; (888 <SPI_1_PORT_init+0xb8>)
     7d2:	f44f 7280 	mov.w	r2, #256	; 0x100
     7d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     7e2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     7e6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     7ea:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ee:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     7f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7fa:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7fe:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     802:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     806:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     80a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     80e:	f44f 7200 	mov.w	r2, #512	; 0x200
     812:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     81a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     81e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     822:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     826:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     82a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     82e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     832:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     836:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     83a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     83e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     842:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     846:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     84a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     84e:	4a0f      	ldr	r2, [pc, #60]	; (88c <SPI_1_PORT_init+0xbc>)
     850:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     854:	4a0e      	ldr	r2, [pc, #56]	; (890 <SPI_1_PORT_init+0xc0>)
     856:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     85a:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
     85e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     862:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     866:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     86a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     86e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     872:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     876:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     87a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     87e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     882:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
     886:	4770      	bx	lr
     888:	41008000 	.word	0x41008000
     88c:	40024000 	.word	0x40024000
     890:	c0020000 	.word	0xc0020000

00000894 <SPI_1_CLOCK_init>:
     894:	4b06      	ldr	r3, [pc, #24]	; (8b0 <SPI_1_CLOCK_init+0x1c>)
     896:	2240      	movs	r2, #64	; 0x40
     898:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     89c:	2243      	movs	r2, #67	; 0x43
     89e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     8a2:	4a04      	ldr	r2, [pc, #16]	; (8b4 <SPI_1_CLOCK_init+0x20>)
     8a4:	6a13      	ldr	r3, [r2, #32]
     8a6:	f043 0301 	orr.w	r3, r3, #1
     8aa:	6213      	str	r3, [r2, #32]
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop
     8b0:	40001c00 	.word	0x40001c00
     8b4:	40000800 	.word	0x40000800

000008b8 <SPI_1_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void SPI_1_init(void)
{
     8b8:	b508      	push	{r3, lr}
	SPI_1_CLOCK_init();
     8ba:	4b05      	ldr	r3, [pc, #20]	; (8d0 <SPI_1_init+0x18>)
     8bc:	4798      	blx	r3
	spi_m_sync_init(&SPI_1, SERCOM4);
     8be:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     8c2:	4804      	ldr	r0, [pc, #16]	; (8d4 <SPI_1_init+0x1c>)
     8c4:	4b04      	ldr	r3, [pc, #16]	; (8d8 <SPI_1_init+0x20>)
     8c6:	4798      	blx	r3
	SPI_1_PORT_init();
     8c8:	4b04      	ldr	r3, [pc, #16]	; (8dc <SPI_1_init+0x24>)
     8ca:	4798      	blx	r3
     8cc:	bd08      	pop	{r3, pc}
     8ce:	bf00      	nop
     8d0:	00000895 	.word	0x00000895
     8d4:	200007e8 	.word	0x200007e8
     8d8:	00000fb5 	.word	0x00000fb5
     8dc:	000007d1 	.word	0x000007d1

000008e0 <delay_driver_init>:
}

void delay_driver_init(void)
{
     8e0:	b508      	push	{r3, lr}
	delay_init(SysTick);
     8e2:	4802      	ldr	r0, [pc, #8]	; (8ec <delay_driver_init+0xc>)
     8e4:	4b02      	ldr	r3, [pc, #8]	; (8f0 <delay_driver_init+0x10>)
     8e6:	4798      	blx	r3
     8e8:	bd08      	pop	{r3, pc}
     8ea:	bf00      	nop
     8ec:	e000e010 	.word	0xe000e010
     8f0:	00000d31 	.word	0x00000d31

000008f4 <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8f4:	4b1e      	ldr	r3, [pc, #120]	; (970 <USB_0_PORT_init+0x7c>)
     8f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     8fa:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     900:	6299      	str	r1, [r3, #40]	; 0x28
     902:	481c      	ldr	r0, [pc, #112]	; (974 <USB_0_PORT_init+0x80>)
     904:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     906:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     908:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     90c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     910:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     914:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     918:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     91c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     920:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     924:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     928:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     92c:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     934:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     938:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     93a:	6299      	str	r1, [r3, #40]	; 0x28
     93c:	490e      	ldr	r1, [pc, #56]	; (978 <USB_0_PORT_init+0x84>)
     93e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     940:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     942:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     946:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     94a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     94e:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     952:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     956:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     95a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     95e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     962:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     966:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     96a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     96e:	4770      	bx	lr
     970:	41008000 	.word	0x41008000
     974:	c0000100 	.word	0xc0000100
     978:	c0000200 	.word	0xc0000200

0000097c <USB_0_CLOCK_init>:
     97c:	2244      	movs	r2, #68	; 0x44
     97e:	4b07      	ldr	r3, [pc, #28]	; (99c <USB_0_CLOCK_init+0x20>)
     980:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     984:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     988:	691a      	ldr	r2, [r3, #16]
     98a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     98e:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     990:	699a      	ldr	r2, [r3, #24]
     992:	f042 0201 	orr.w	r2, r2, #1
     996:	619a      	str	r2, [r3, #24]
     998:	4770      	bx	lr
     99a:	bf00      	nop
     99c:	40001c00 	.word	0x40001c00

000009a0 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     9a0:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     9a2:	4b03      	ldr	r3, [pc, #12]	; (9b0 <USB_0_init+0x10>)
     9a4:	4798      	blx	r3
	usb_d_init();
     9a6:	4b03      	ldr	r3, [pc, #12]	; (9b4 <USB_0_init+0x14>)
     9a8:	4798      	blx	r3
	USB_0_PORT_init();
     9aa:	4b03      	ldr	r3, [pc, #12]	; (9b8 <USB_0_init+0x18>)
     9ac:	4798      	blx	r3
     9ae:	bd08      	pop	{r3, pc}
     9b0:	0000097d 	.word	0x0000097d
     9b4:	00001425 	.word	0x00001425
     9b8:	000008f5 	.word	0x000008f5

000009bc <system_init>:
}

void system_init(void)
{
     9bc:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     9be:	4b7b      	ldr	r3, [pc, #492]	; (bac <system_init+0x1f0>)
     9c0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9c2:	4b7b      	ldr	r3, [pc, #492]	; (bb0 <system_init+0x1f4>)
     9c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     9c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     9d4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     9d8:	4976      	ldr	r1, [pc, #472]	; (bb4 <system_init+0x1f8>)
     9da:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9de:	f893 10dc 	ldrb.w	r1, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
     9e2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e6:	f883 10dc 	strb.w	r1, [r3, #220]	; 0xdc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9ea:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     9ee:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9f2:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9f6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     9fa:	496f      	ldr	r1, [pc, #444]	; (bb8 <system_init+0x1fc>)
     9fc:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a00:	f893 10dd 	ldrb.w	r1, [r3, #221]	; 0xdd
	tmp &= ~PORT_PINCFG_PMUXEN;
     a04:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a08:	f883 10dd 	strb.w	r1, [r3, #221]	; 0xdd
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a10:	4d6a      	ldr	r5, [pc, #424]	; (bbc <system_init+0x200>)
     a12:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     a16:	4c6a      	ldr	r4, [pc, #424]	; (bc0 <system_init+0x204>)
     a18:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     a20:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
     a24:	f041 0104 	orr.w	r1, r1, #4
     a28:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a2c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a30:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     a34:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a38:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a3c:	2104      	movs	r1, #4
     a3e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a42:	4860      	ldr	r0, [pc, #384]	; (bc4 <system_init+0x208>)
     a44:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     a48:	4e5f      	ldr	r6, [pc, #380]	; (bc8 <system_init+0x20c>)
     a4a:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a4e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     a52:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
     a56:	4308      	orrs	r0, r1
     a58:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a5c:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a60:	f893 1142 	ldrb.w	r1, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     a64:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a68:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a6c:	2108      	movs	r1, #8
     a6e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a72:	4856      	ldr	r0, [pc, #344]	; (bcc <system_init+0x210>)
     a74:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     a78:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a7c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     a80:	f893 0143 	ldrb.w	r0, [r3, #323]	; 0x143
     a84:	f040 0004 	orr.w	r0, r0, #4
     a88:	f883 0143 	strb.w	r0, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a8c:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a90:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
	tmp &= ~PORT_PINCFG_PMUXEN;
     a94:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a98:	f883 1143 	strb.w	r1, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     aa0:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     aa4:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aa8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     aac:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     ab0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     ab4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ab8:	f893 014f 	ldrb.w	r0, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
     abc:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ac0:	f883 014f 	strb.w	r0, [r3, #335]	; 0x14f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ac4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
     ac8:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     acc:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ad0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     ad4:	483e      	ldr	r0, [pc, #248]	; (bd0 <system_init+0x214>)
     ad6:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ada:	f893 0152 	ldrb.w	r0, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     ade:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ae2:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ae6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aea:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
     aee:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     af2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     af6:	f893 015e 	ldrb.w	r0, [r3, #350]	; 0x15e
     afa:	f040 0004 	orr.w	r0, r0, #4
     afe:	f883 015e 	strb.w	r0, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b02:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b06:	f893 015e 	ldrb.w	r0, [r3, #350]	; 0x15e
	tmp &= ~PORT_PINCFG_PMUXEN;
     b0a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b0e:	f883 015e 	strb.w	r0, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b12:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
     b16:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b1a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b1e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     b22:	f102 2280 	add.w	r2, r2, #2147516416	; 0x80008000
     b26:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b2a:	f893 215f 	ldrb.w	r2, [r3, #351]	; 0x15f
	tmp &= ~PORT_PINCFG_PMUXEN;
     b2e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b32:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
     b3a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b3e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b42:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b46:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     b4a:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b4e:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
	tmp &= ~PORT_PINCFG_PMUXEN;
     b52:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b56:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
     b5e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b62:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b66:	4c1b      	ldr	r4, [pc, #108]	; (bd4 <system_init+0x218>)
     b68:	f8c3 41a8 	str.w	r4, [r3, #424]	; 0x1a8
     b6c:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b70:	f893 21cb 	ldrb.w	r2, [r3, #459]	; 0x1cb
	tmp &= ~PORT_PINCFG_PMUXEN;
     b74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b78:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
	// Set pin direction to output
	gpio_set_pin_direction(OLED_LED3, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(OLED_LED3, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     b7c:	4b16      	ldr	r3, [pc, #88]	; (bd8 <system_init+0x21c>)
     b7e:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     b80:	4b16      	ldr	r3, [pc, #88]	; (bdc <system_init+0x220>)
     b82:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     b84:	6963      	ldr	r3, [r4, #20]
     b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     b8a:	6163      	str	r3, [r4, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     b8c:	4b14      	ldr	r3, [pc, #80]	; (be0 <system_init+0x224>)
     b8e:	4798      	blx	r3
     b90:	4602      	mov	r2, r0
     b92:	4914      	ldr	r1, [pc, #80]	; (be4 <system_init+0x228>)
     b94:	4814      	ldr	r0, [pc, #80]	; (be8 <system_init+0x22c>)
     b96:	4b15      	ldr	r3, [pc, #84]	; (bec <system_init+0x230>)
     b98:	4798      	blx	r3

	TIMER_0_init();

	SPI_0_init();
     b9a:	4b15      	ldr	r3, [pc, #84]	; (bf0 <system_init+0x234>)
     b9c:	4798      	blx	r3

	SPI_1_init();
     b9e:	4b15      	ldr	r3, [pc, #84]	; (bf4 <system_init+0x238>)
     ba0:	4798      	blx	r3

	delay_driver_init();
     ba2:	4b15      	ldr	r3, [pc, #84]	; (bf8 <system_init+0x23c>)
     ba4:	4798      	blx	r3

	USB_0_init();
     ba6:	4b15      	ldr	r3, [pc, #84]	; (bfc <system_init+0x240>)
     ba8:	4798      	blx	r3
     baa:	bd70      	pop	{r4, r5, r6, pc}
     bac:	00001a4d 	.word	0x00001a4d
     bb0:	41008000 	.word	0x41008000
     bb4:	c0001000 	.word	0xc0001000
     bb8:	c0002000 	.word	0xc0002000
     bbc:	40020000 	.word	0x40020000
     bc0:	c0024000 	.word	0xc0024000
     bc4:	40020004 	.word	0x40020004
     bc8:	c0020000 	.word	0xc0020000
     bcc:	40020008 	.word	0x40020008
     bd0:	c0000004 	.word	0xc0000004
     bd4:	40000800 	.word	0x40000800
     bd8:	00000689 	.word	0x00000689
     bdc:	000006ad 	.word	0x000006ad
     be0:	00001d25 	.word	0x00001d25
     be4:	40002400 	.word	0x40002400
     be8:	2000084c 	.word	0x2000084c
     bec:	00001195 	.word	0x00001195
     bf0:	000007a9 	.word	0x000007a9
     bf4:	000008b9 	.word	0x000008b9
     bf8:	000008e1 	.word	0x000008e1
     bfc:	000009a1 	.word	0x000009a1

00000c00 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     c00:	b538      	push	{r3, r4, r5, lr}
     c02:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     c04:	4605      	mov	r5, r0
     c06:	b158      	cbz	r0, c20 <adc_sync_init+0x20>
     c08:	1c08      	adds	r0, r1, #0
     c0a:	bf18      	it	ne
     c0c:	2001      	movne	r0, #1
     c0e:	2239      	movs	r2, #57	; 0x39
     c10:	4904      	ldr	r1, [pc, #16]	; (c24 <adc_sync_init+0x24>)
     c12:	4b05      	ldr	r3, [pc, #20]	; (c28 <adc_sync_init+0x28>)
     c14:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     c16:	4621      	mov	r1, r4
     c18:	4628      	mov	r0, r5
     c1a:	4b04      	ldr	r3, [pc, #16]	; (c2c <adc_sync_init+0x2c>)
     c1c:	4798      	blx	r3
}
     c1e:	bd38      	pop	{r3, r4, r5, pc}
     c20:	2000      	movs	r0, #0
     c22:	e7f4      	b.n	c0e <adc_sync_init+0xe>
     c24:	000043a4 	.word	0x000043a4
     c28:	00001771 	.word	0x00001771
     c2c:	00001971 	.word	0x00001971

00000c30 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     c30:	b538      	push	{r3, r4, r5, lr}
     c32:	460d      	mov	r5, r1
	ASSERT(descr);
     c34:	4604      	mov	r4, r0
     c36:	224e      	movs	r2, #78	; 0x4e
     c38:	4905      	ldr	r1, [pc, #20]	; (c50 <adc_sync_enable_channel+0x20>)
     c3a:	3000      	adds	r0, #0
     c3c:	bf18      	it	ne
     c3e:	2001      	movne	r0, #1
     c40:	4b04      	ldr	r3, [pc, #16]	; (c54 <adc_sync_enable_channel+0x24>)
     c42:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     c44:	4629      	mov	r1, r5
     c46:	4620      	mov	r0, r4
     c48:	4b03      	ldr	r3, [pc, #12]	; (c58 <adc_sync_enable_channel+0x28>)
     c4a:	4798      	blx	r3

	return ERR_NONE;
}
     c4c:	2000      	movs	r0, #0
     c4e:	bd38      	pop	{r3, r4, r5, pc}
     c50:	000043a4 	.word	0x000043a4
     c54:	00001771 	.word	0x00001771
     c58:	000019a9 	.word	0x000019a9

00000c5c <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     c5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c60:	460d      	mov	r5, r1
     c62:	4691      	mov	r9, r2
     c64:	469a      	mov	sl, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
     c66:	4680      	mov	r8, r0
     c68:	b1e0      	cbz	r0, ca4 <adc_sync_read_channel+0x48>
     c6a:	b1ea      	cbz	r2, ca8 <adc_sync_read_channel+0x4c>
     c6c:	1c18      	adds	r0, r3, #0
     c6e:	bf18      	it	ne
     c70:	2001      	movne	r0, #1
     c72:	4f1c      	ldr	r7, [pc, #112]	; (ce4 <adc_sync_read_channel+0x88>)
     c74:	2267      	movs	r2, #103	; 0x67
     c76:	4639      	mov	r1, r7
     c78:	4e1b      	ldr	r6, [pc, #108]	; (ce8 <adc_sync_read_channel+0x8c>)
     c7a:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
     c7c:	4644      	mov	r4, r8
     c7e:	4640      	mov	r0, r8
     c80:	4b1a      	ldr	r3, [pc, #104]	; (cec <adc_sync_read_channel+0x90>)
     c82:	4798      	blx	r3
     c84:	4680      	mov	r8, r0
	ASSERT(!(length % data_size));
     c86:	fb9a f0f0 	sdiv	r0, sl, r0
     c8a:	fb08 a010 	mls	r0, r8, r0, sl
     c8e:	2269      	movs	r2, #105	; 0x69
     c90:	4639      	mov	r1, r7
     c92:	fab0 f080 	clz	r0, r0
     c96:	0940      	lsrs	r0, r0, #5
     c98:	47b0      	blx	r6
	uint16_t offset = 0;
     c9a:	2700      	movs	r7, #0

	do {
		uint16_t result;
		_adc_sync_convert(&descr->device);
     c9c:	f8df b058 	ldr.w	fp, [pc, #88]	; cf8 <adc_sync_read_channel+0x9c>

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     ca0:	4e13      	ldr	r6, [pc, #76]	; (cf0 <adc_sync_read_channel+0x94>)
     ca2:	e007      	b.n	cb4 <adc_sync_read_channel+0x58>
	ASSERT(descr && buffer && length);
     ca4:	2000      	movs	r0, #0
     ca6:	e7e4      	b.n	c72 <adc_sync_read_channel+0x16>
     ca8:	2000      	movs	r0, #0
     caa:	e7e2      	b.n	c72 <adc_sync_read_channel+0x16>
     cac:	4447      	add	r7, r8
     cae:	b2bf      	uxth	r7, r7
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
	} while (offset < length);
     cb0:	45ba      	cmp	sl, r7
     cb2:	d914      	bls.n	cde <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
     cb4:	4620      	mov	r0, r4
     cb6:	47d8      	blx	fp
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     cb8:	4629      	mov	r1, r5
     cba:	4620      	mov	r0, r4
     cbc:	47b0      	blx	r6
     cbe:	2800      	cmp	r0, #0
     cc0:	d0fa      	beq.n	cb8 <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
     cc2:	4629      	mov	r1, r5
     cc4:	4620      	mov	r0, r4
     cc6:	4b0b      	ldr	r3, [pc, #44]	; (cf4 <adc_sync_read_channel+0x98>)
     cc8:	4798      	blx	r3
		buffer[offset] = result;
     cca:	f809 0007 	strb.w	r0, [r9, r7]
		if (1 < data_size) {
     cce:	f1b8 0f01 	cmp.w	r8, #1
     cd2:	d9eb      	bls.n	cac <adc_sync_read_channel+0x50>
			buffer[offset + 1] = result >> 8;
     cd4:	eb09 0307 	add.w	r3, r9, r7
     cd8:	0a00      	lsrs	r0, r0, #8
     cda:	7058      	strb	r0, [r3, #1]
     cdc:	e7e6      	b.n	cac <adc_sync_read_channel+0x50>

	return offset;
}
     cde:	4638      	mov	r0, r7
     ce0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ce4:	000043a4 	.word	0x000043a4
     ce8:	00001771 	.word	0x00001771
     cec:	000019bf 	.word	0x000019bf
     cf0:	000019d1 	.word	0x000019d1
     cf4:	000019f3 	.word	0x000019f3
     cf8:	000019dd 	.word	0x000019dd

00000cfc <adc_sync_set_inputs>:
/**
 * \brief Set ADC input source of a channel
 */
int32_t adc_sync_set_inputs(struct adc_sync_descriptor *const descr, const adc_pos_input_t pos_input,
                            const adc_neg_input_t neg_input, const uint8_t channel)
{
     cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cfe:	460d      	mov	r5, r1
     d00:	4616      	mov	r6, r2
     d02:	461f      	mov	r7, r3
	ASSERT(descr);
     d04:	4604      	mov	r4, r0
     d06:	2299      	movs	r2, #153	; 0x99
     d08:	4906      	ldr	r1, [pc, #24]	; (d24 <adc_sync_set_inputs+0x28>)
     d0a:	3000      	adds	r0, #0
     d0c:	bf18      	it	ne
     d0e:	2001      	movne	r0, #1
     d10:	4b05      	ldr	r3, [pc, #20]	; (d28 <adc_sync_set_inputs+0x2c>)
     d12:	4798      	blx	r3
	_adc_sync_set_inputs(&descr->device, pos_input, neg_input, channel);
     d14:	463b      	mov	r3, r7
     d16:	4632      	mov	r2, r6
     d18:	4629      	mov	r1, r5
     d1a:	4620      	mov	r0, r4
     d1c:	4c03      	ldr	r4, [pc, #12]	; (d2c <adc_sync_set_inputs+0x30>)
     d1e:	47a0      	blx	r4

	return ERR_NONE;
}
     d20:	2000      	movs	r0, #0
     d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d24:	000043a4 	.word	0x000043a4
     d28:	00001771 	.word	0x00001771
     d2c:	000019fd 	.word	0x000019fd

00000d30 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     d30:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     d32:	4b02      	ldr	r3, [pc, #8]	; (d3c <delay_init+0xc>)
     d34:	6018      	str	r0, [r3, #0]
     d36:	4b02      	ldr	r3, [pc, #8]	; (d40 <delay_init+0x10>)
     d38:	4798      	blx	r3
     d3a:	bd08      	pop	{r3, pc}
     d3c:	200004b0 	.word	0x200004b0
     d40:	00002261 	.word	0x00002261

00000d44 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     d44:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     d46:	4b04      	ldr	r3, [pc, #16]	; (d58 <delay_ms+0x14>)
     d48:	681c      	ldr	r4, [r3, #0]
     d4a:	4b04      	ldr	r3, [pc, #16]	; (d5c <delay_ms+0x18>)
     d4c:	4798      	blx	r3
     d4e:	4601      	mov	r1, r0
     d50:	4620      	mov	r0, r4
     d52:	4b03      	ldr	r3, [pc, #12]	; (d60 <delay_ms+0x1c>)
     d54:	4798      	blx	r3
     d56:	bd10      	pop	{r4, pc}
     d58:	200004b0 	.word	0x200004b0
     d5c:	00001a41 	.word	0x00001a41
     d60:	00002275 	.word	0x00002275

00000d64 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     d64:	b508      	push	{r3, lr}
	return _event_system_init();
     d66:	4b01      	ldr	r3, [pc, #4]	; (d6c <event_system_init+0x8>)
     d68:	4798      	blx	r3
}
     d6a:	bd08      	pop	{r3, pc}
     d6c:	00001ab1 	.word	0x00001ab1

00000d70 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d72:	460f      	mov	r7, r1
     d74:	4616      	mov	r6, r2
	ASSERT(io);
     d76:	4604      	mov	r4, r0
     d78:	f240 1227 	movw	r2, #295	; 0x127
     d7c:	4909      	ldr	r1, [pc, #36]	; (da4 <_spi_m_async_io_write+0x34>)
     d7e:	3000      	adds	r0, #0
     d80:	bf18      	it	ne
     d82:	2001      	movne	r0, #1
     d84:	4b08      	ldr	r3, [pc, #32]	; (da8 <_spi_m_async_io_write+0x38>)
     d86:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
     d88:	2500      	movs	r5, #0
     d8a:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
     d8c:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
     d8e:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     d90:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     d92:	2310      	movs	r3, #16
     d94:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
     d96:	2101      	movs	r1, #1
     d98:	f1a4 0020 	sub.w	r0, r4, #32
     d9c:	4b03      	ldr	r3, [pc, #12]	; (dac <_spi_m_async_io_write+0x3c>)
     d9e:	4798      	blx	r3

	return ERR_NONE;
}
     da0:	4628      	mov	r0, r5
     da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     da4:	000043c0 	.word	0x000043c0
     da8:	00001771 	.word	0x00001771
     dac:	00002121 	.word	0x00002121

00000db0 <_spi_m_async_io_read>:
{
     db0:	b570      	push	{r4, r5, r6, lr}
     db2:	460d      	mov	r5, r1
     db4:	4616      	mov	r6, r2
	ASSERT(io);
     db6:	4604      	mov	r4, r0
     db8:	f240 1205 	movw	r2, #261	; 0x105
     dbc:	490c      	ldr	r1, [pc, #48]	; (df0 <_spi_m_async_io_read+0x40>)
     dbe:	3000      	adds	r0, #0
     dc0:	bf18      	it	ne
     dc2:	2001      	movne	r0, #1
     dc4:	4b0b      	ldr	r3, [pc, #44]	; (df4 <_spi_m_async_io_read+0x44>)
     dc6:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
     dc8:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
     dca:	2500      	movs	r5, #0
     dcc:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
     dce:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     dd0:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     dd2:	2310      	movs	r3, #16
     dd4:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
     dd6:	3c20      	subs	r4, #32
     dd8:	2101      	movs	r1, #1
     dda:	4620      	mov	r0, r4
     ddc:	4b06      	ldr	r3, [pc, #24]	; (df8 <_spi_m_async_io_read+0x48>)
     dde:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
     de0:	f240 11ff 	movw	r1, #511	; 0x1ff
     de4:	4620      	mov	r0, r4
     de6:	4b05      	ldr	r3, [pc, #20]	; (dfc <_spi_m_async_io_read+0x4c>)
     de8:	4798      	blx	r3
}
     dea:	4628      	mov	r0, r5
     dec:	bd70      	pop	{r4, r5, r6, pc}
     dee:	bf00      	nop
     df0:	000043c0 	.word	0x000043c0
     df4:	00001771 	.word	0x00001771
     df8:	00002155 	.word	0x00002155
     dfc:	000021d1 	.word	0x000021d1

00000e00 <_spi_dev_error>:
{
     e00:	b570      	push	{r4, r5, r6, lr}
     e02:	4604      	mov	r4, r0
     e04:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     e06:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
     e08:	2100      	movs	r1, #0
     e0a:	4b09      	ldr	r3, [pc, #36]	; (e30 <_spi_dev_error+0x30>)
     e0c:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
     e0e:	2100      	movs	r1, #0
     e10:	4620      	mov	r0, r4
     e12:	4b08      	ldr	r3, [pc, #32]	; (e34 <_spi_dev_error+0x34>)
     e14:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
     e16:	2100      	movs	r1, #0
     e18:	4620      	mov	r0, r4
     e1a:	4b07      	ldr	r3, [pc, #28]	; (e38 <_spi_dev_error+0x38>)
     e1c:	4798      	blx	r3
	spi->stat = 0;
     e1e:	2300      	movs	r3, #0
     e20:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
     e24:	6b23      	ldr	r3, [r4, #48]	; 0x30
     e26:	b113      	cbz	r3, e2e <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
     e28:	4631      	mov	r1, r6
     e2a:	4628      	mov	r0, r5
     e2c:	4798      	blx	r3
     e2e:	bd70      	pop	{r4, r5, r6, pc}
     e30:	00002121 	.word	0x00002121
     e34:	00002155 	.word	0x00002155
     e38:	00002195 	.word	0x00002195

00000e3c <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
     e3c:	6c02      	ldr	r2, [r0, #64]	; 0x40
     e3e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     e40:	429a      	cmp	r2, r3
     e42:	d200      	bcs.n	e46 <_spi_dev_complete+0xa>
     e44:	4770      	bx	lr
{
     e46:	b510      	push	{r4, lr}
     e48:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
     e4a:	2100      	movs	r1, #0
     e4c:	4b04      	ldr	r3, [pc, #16]	; (e60 <_spi_dev_complete+0x24>)
     e4e:	4798      	blx	r3
		spi->stat = 0;
     e50:	2300      	movs	r3, #0
     e52:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     e56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     e58:	b10b      	cbz	r3, e5e <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
     e5a:	1f20      	subs	r0, r4, #4
     e5c:	4798      	blx	r3
     e5e:	bd10      	pop	{r4, pc}
     e60:	00002195 	.word	0x00002195

00000e64 <_spi_dev_tx>:
{
     e64:	b510      	push	{r4, lr}
     e66:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
     e68:	7903      	ldrb	r3, [r0, #4]
     e6a:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
     e6c:	6b42      	ldr	r2, [r0, #52]	; 0x34
     e6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
     e70:	f103 0101 	add.w	r1, r3, #1
     e74:	6401      	str	r1, [r0, #64]	; 0x40
     e76:	bf94      	ite	ls
     e78:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
     e7a:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     e7e:	4b08      	ldr	r3, [pc, #32]	; (ea0 <_spi_dev_tx+0x3c>)
     e80:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
     e82:	6c22      	ldr	r2, [r4, #64]	; 0x40
     e84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     e86:	429a      	cmp	r2, r3
     e88:	d000      	beq.n	e8c <_spi_dev_tx+0x28>
     e8a:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
     e8c:	2100      	movs	r1, #0
     e8e:	4620      	mov	r0, r4
     e90:	4b04      	ldr	r3, [pc, #16]	; (ea4 <_spi_dev_tx+0x40>)
     e92:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
     e94:	2101      	movs	r1, #1
     e96:	4620      	mov	r0, r4
     e98:	4b03      	ldr	r3, [pc, #12]	; (ea8 <_spi_dev_tx+0x44>)
     e9a:	4798      	blx	r3
}
     e9c:	e7f5      	b.n	e8a <_spi_dev_tx+0x26>
     e9e:	bf00      	nop
     ea0:	000021d1 	.word	0x000021d1
     ea4:	00002121 	.word	0x00002121
     ea8:	00002195 	.word	0x00002195

00000eac <_spi_dev_rx>:
{
     eac:	b570      	push	{r4, r5, r6, lr}
     eae:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
     eb0:	6b85      	ldr	r5, [r0, #56]	; 0x38
     eb2:	b305      	cbz	r5, ef6 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
     eb4:	7903      	ldrb	r3, [r0, #4]
     eb6:	2b01      	cmp	r3, #1
     eb8:	d916      	bls.n	ee8 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
     eba:	6c06      	ldr	r6, [r0, #64]	; 0x40
     ebc:	1c73      	adds	r3, r6, #1
     ebe:	6403      	str	r3, [r0, #64]	; 0x40
     ec0:	4b18      	ldr	r3, [pc, #96]	; (f24 <_spi_dev_rx+0x78>)
     ec2:	4798      	blx	r3
     ec4:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
     ec8:	6c23      	ldr	r3, [r4, #64]	; 0x40
     eca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     ecc:	4293      	cmp	r3, r2
     ece:	d21d      	bcs.n	f0c <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
     ed0:	6b62      	ldr	r2, [r4, #52]	; 0x34
     ed2:	b1b2      	cbz	r2, f02 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
     ed4:	7921      	ldrb	r1, [r4, #4]
     ed6:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
     ed8:	bf94      	ite	ls
     eda:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
     edc:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     ee0:	4620      	mov	r0, r4
     ee2:	4b11      	ldr	r3, [pc, #68]	; (f28 <_spi_dev_rx+0x7c>)
     ee4:	4798      	blx	r3
     ee6:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
     ee8:	6c06      	ldr	r6, [r0, #64]	; 0x40
     eea:	1c73      	adds	r3, r6, #1
     eec:	6403      	str	r3, [r0, #64]	; 0x40
     eee:	4b0d      	ldr	r3, [pc, #52]	; (f24 <_spi_dev_rx+0x78>)
     ef0:	4798      	blx	r3
     ef2:	55a8      	strb	r0, [r5, r6]
     ef4:	e7e8      	b.n	ec8 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
     ef6:	4b0b      	ldr	r3, [pc, #44]	; (f24 <_spi_dev_rx+0x78>)
     ef8:	4798      	blx	r3
		spi->xfercnt++;
     efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
     efc:	3301      	adds	r3, #1
     efe:	6423      	str	r3, [r4, #64]	; 0x40
     f00:	e7e2      	b.n	ec8 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
     f02:	88e1      	ldrh	r1, [r4, #6]
     f04:	4620      	mov	r0, r4
     f06:	4b08      	ldr	r3, [pc, #32]	; (f28 <_spi_dev_rx+0x7c>)
     f08:	4798      	blx	r3
     f0a:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
     f0c:	2100      	movs	r1, #0
     f0e:	4620      	mov	r0, r4
     f10:	4b06      	ldr	r3, [pc, #24]	; (f2c <_spi_dev_rx+0x80>)
     f12:	4798      	blx	r3
		spi->stat = 0;
     f14:	2300      	movs	r3, #0
     f16:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     f1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     f1c:	b10b      	cbz	r3, f22 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
     f1e:	1f20      	subs	r0, r4, #4
     f20:	4798      	blx	r3
     f22:	bd70      	pop	{r4, r5, r6, pc}
     f24:	00002201 	.word	0x00002201
     f28:	000021d1 	.word	0x000021d1
     f2c:	00002155 	.word	0x00002155

00000f30 <spi_m_async_init>:
{
     f30:	b570      	push	{r4, r5, r6, lr}
     f32:	460d      	mov	r5, r1
	ASSERT(spi && hw);
     f34:	4606      	mov	r6, r0
     f36:	b330      	cbz	r0, f86 <spi_m_async_init+0x56>
     f38:	1c08      	adds	r0, r1, #0
     f3a:	bf18      	it	ne
     f3c:	2001      	movne	r0, #1
     f3e:	22a5      	movs	r2, #165	; 0xa5
     f40:	4912      	ldr	r1, [pc, #72]	; (f8c <spi_m_async_init+0x5c>)
     f42:	4b13      	ldr	r3, [pc, #76]	; (f90 <spi_m_async_init+0x60>)
     f44:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     f46:	4634      	mov	r4, r6
     f48:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
     f4c:	4629      	mov	r1, r5
     f4e:	4620      	mov	r0, r4
     f50:	4b10      	ldr	r3, [pc, #64]	; (f94 <spi_m_async_init+0x64>)
     f52:	4798      	blx	r3
	if (rc >= 0) {
     f54:	2800      	cmp	r0, #0
     f56:	db15      	blt.n	f84 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
     f58:	4a0f      	ldr	r2, [pc, #60]	; (f98 <spi_m_async_init+0x68>)
     f5a:	2100      	movs	r1, #0
     f5c:	4620      	mov	r0, r4
     f5e:	4d0f      	ldr	r5, [pc, #60]	; (f9c <spi_m_async_init+0x6c>)
     f60:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
     f62:	4a0f      	ldr	r2, [pc, #60]	; (fa0 <spi_m_async_init+0x70>)
     f64:	2101      	movs	r1, #1
     f66:	4620      	mov	r0, r4
     f68:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
     f6a:	4a0e      	ldr	r2, [pc, #56]	; (fa4 <spi_m_async_init+0x74>)
     f6c:	2102      	movs	r1, #2
     f6e:	4620      	mov	r0, r4
     f70:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
     f72:	4a0d      	ldr	r2, [pc, #52]	; (fa8 <spi_m_async_init+0x78>)
     f74:	2103      	movs	r1, #3
     f76:	4620      	mov	r0, r4
     f78:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
     f7a:	4b0c      	ldr	r3, [pc, #48]	; (fac <spi_m_async_init+0x7c>)
     f7c:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
     f7e:	4b0c      	ldr	r3, [pc, #48]	; (fb0 <spi_m_async_init+0x80>)
     f80:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
     f82:	2000      	movs	r0, #0
}
     f84:	bd70      	pop	{r4, r5, r6, pc}
     f86:	2000      	movs	r0, #0
     f88:	e7d9      	b.n	f3e <spi_m_async_init+0xe>
     f8a:	bf00      	nop
     f8c:	000043c0 	.word	0x000043c0
     f90:	00001771 	.word	0x00001771
     f94:	00001fd5 	.word	0x00001fd5
     f98:	00000e65 	.word	0x00000e65
     f9c:	0000222d 	.word	0x0000222d
     fa0:	00000ead 	.word	0x00000ead
     fa4:	00000e3d 	.word	0x00000e3d
     fa8:	00000e01 	.word	0x00000e01
     fac:	00000db1 	.word	0x00000db1
     fb0:	00000d71 	.word	0x00000d71

00000fb4 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     fb4:	b538      	push	{r3, r4, r5, lr}
     fb6:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     fb8:	4604      	mov	r4, r0
     fba:	b1b8      	cbz	r0, fec <spi_m_sync_init+0x38>
     fbc:	1c08      	adds	r0, r1, #0
     fbe:	bf18      	it	ne
     fc0:	2001      	movne	r0, #1
     fc2:	2240      	movs	r2, #64	; 0x40
     fc4:	490a      	ldr	r1, [pc, #40]	; (ff0 <spi_m_sync_init+0x3c>)
     fc6:	4b0b      	ldr	r3, [pc, #44]	; (ff4 <spi_m_sync_init+0x40>)
     fc8:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     fca:	4620      	mov	r0, r4
     fcc:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
     fd0:	4629      	mov	r1, r5
     fd2:	4b09      	ldr	r3, [pc, #36]	; (ff8 <spi_m_sync_init+0x44>)
     fd4:	4798      	blx	r3

	if (rc < 0) {
     fd6:	2800      	cmp	r0, #0
     fd8:	db07      	blt.n	fea <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     fde:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     fe0:	4b06      	ldr	r3, [pc, #24]	; (ffc <spi_m_sync_init+0x48>)
     fe2:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     fe4:	4b06      	ldr	r3, [pc, #24]	; (1000 <spi_m_sync_init+0x4c>)
     fe6:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     fe8:	2000      	movs	r0, #0
}
     fea:	bd38      	pop	{r3, r4, r5, pc}
     fec:	2000      	movs	r0, #0
     fee:	e7e8      	b.n	fc2 <spi_m_sync_init+0xe>
     ff0:	000043e0 	.word	0x000043e0
     ff4:	00001771 	.word	0x00001771
     ff8:	00001e45 	.word	0x00001e45
     ffc:	00001081 	.word	0x00001081
    1000:	00001045 	.word	0x00001045

00001004 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1004:	b530      	push	{r4, r5, lr}
    1006:	b085      	sub	sp, #20
    1008:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    100a:	4605      	mov	r5, r0
    100c:	b190      	cbz	r0, 1034 <spi_m_sync_transfer+0x30>
    100e:	1c08      	adds	r0, r1, #0
    1010:	bf18      	it	ne
    1012:	2001      	movne	r0, #1
    1014:	22b3      	movs	r2, #179	; 0xb3
    1016:	4908      	ldr	r1, [pc, #32]	; (1038 <spi_m_sync_transfer+0x34>)
    1018:	4b08      	ldr	r3, [pc, #32]	; (103c <spi_m_sync_transfer+0x38>)
    101a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    101c:	6823      	ldr	r3, [r4, #0]
    101e:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    1020:	6863      	ldr	r3, [r4, #4]
    1022:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    1024:	68a3      	ldr	r3, [r4, #8]
    1026:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1028:	a901      	add	r1, sp, #4
    102a:	1d28      	adds	r0, r5, #4
    102c:	4b04      	ldr	r3, [pc, #16]	; (1040 <spi_m_sync_transfer+0x3c>)
    102e:	4798      	blx	r3
}
    1030:	b005      	add	sp, #20
    1032:	bd30      	pop	{r4, r5, pc}
    1034:	2000      	movs	r0, #0
    1036:	e7ed      	b.n	1014 <spi_m_sync_transfer+0x10>
    1038:	000043e0 	.word	0x000043e0
    103c:	00001771 	.word	0x00001771
    1040:	00002041 	.word	0x00002041

00001044 <_spi_m_sync_io_write>:
{
    1044:	b570      	push	{r4, r5, r6, lr}
    1046:	b084      	sub	sp, #16
    1048:	460e      	mov	r6, r1
    104a:	4615      	mov	r5, r2
	ASSERT(io);
    104c:	4604      	mov	r4, r0
    104e:	22a3      	movs	r2, #163	; 0xa3
    1050:	4908      	ldr	r1, [pc, #32]	; (1074 <_spi_m_sync_io_write+0x30>)
    1052:	3000      	adds	r0, #0
    1054:	bf18      	it	ne
    1056:	2001      	movne	r0, #1
    1058:	4b07      	ldr	r3, [pc, #28]	; (1078 <_spi_m_sync_io_write+0x34>)
    105a:	4798      	blx	r3
	xfer.rxbuf = 0;
    105c:	2300      	movs	r3, #0
    105e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1060:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1062:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1064:	a901      	add	r1, sp, #4
    1066:	f1a4 000c 	sub.w	r0, r4, #12
    106a:	4b04      	ldr	r3, [pc, #16]	; (107c <_spi_m_sync_io_write+0x38>)
    106c:	4798      	blx	r3
}
    106e:	b004      	add	sp, #16
    1070:	bd70      	pop	{r4, r5, r6, pc}
    1072:	bf00      	nop
    1074:	000043e0 	.word	0x000043e0
    1078:	00001771 	.word	0x00001771
    107c:	00001005 	.word	0x00001005

00001080 <_spi_m_sync_io_read>:
{
    1080:	b570      	push	{r4, r5, r6, lr}
    1082:	b084      	sub	sp, #16
    1084:	460e      	mov	r6, r1
    1086:	4615      	mov	r5, r2
	ASSERT(io);
    1088:	4604      	mov	r4, r0
    108a:	2287      	movs	r2, #135	; 0x87
    108c:	4908      	ldr	r1, [pc, #32]	; (10b0 <_spi_m_sync_io_read+0x30>)
    108e:	3000      	adds	r0, #0
    1090:	bf18      	it	ne
    1092:	2001      	movne	r0, #1
    1094:	4b07      	ldr	r3, [pc, #28]	; (10b4 <_spi_m_sync_io_read+0x34>)
    1096:	4798      	blx	r3
	xfer.rxbuf = buf;
    1098:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    109a:	2300      	movs	r3, #0
    109c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    109e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    10a0:	a901      	add	r1, sp, #4
    10a2:	f1a4 000c 	sub.w	r0, r4, #12
    10a6:	4b04      	ldr	r3, [pc, #16]	; (10b8 <_spi_m_sync_io_read+0x38>)
    10a8:	4798      	blx	r3
}
    10aa:	b004      	add	sp, #16
    10ac:	bd70      	pop	{r4, r5, r6, pc}
    10ae:	bf00      	nop
    10b0:	000043e0 	.word	0x000043e0
    10b4:	00001771 	.word	0x00001771
    10b8:	00001005 	.word	0x00001005

000010bc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    10bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10be:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    10c0:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    10c2:	b12f      	cbz	r7, 10d0 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    10c4:	688d      	ldr	r5, [r1, #8]
    10c6:	463c      	mov	r4, r7
    10c8:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    10ca:	f1c2 0e01 	rsb	lr, r2, #1
    10ce:	e00b      	b.n	10e8 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    10d0:	4b0e      	ldr	r3, [pc, #56]	; (110c <timer_add_timer_task+0x50>)
    10d2:	4798      	blx	r3
		return;
    10d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    10d6:	4473      	add	r3, lr
    10d8:	68a0      	ldr	r0, [r4, #8]
    10da:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    10dc:	42ab      	cmp	r3, r5
    10de:	d20a      	bcs.n	10f6 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    10e0:	6823      	ldr	r3, [r4, #0]
    10e2:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    10e4:	b153      	cbz	r3, 10fc <timer_add_timer_task+0x40>
    10e6:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    10e8:	6863      	ldr	r3, [r4, #4]
    10ea:	4293      	cmp	r3, r2
    10ec:	d8f3      	bhi.n	10d6 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    10ee:	68a0      	ldr	r0, [r4, #8]
    10f0:	4403      	add	r3, r0
    10f2:	1a9b      	subs	r3, r3, r2
    10f4:	e7f2      	b.n	10dc <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    10f6:	42a7      	cmp	r7, r4
    10f8:	d004      	beq.n	1104 <timer_add_timer_task+0x48>
    10fa:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    10fc:	4620      	mov	r0, r4
    10fe:	4b04      	ldr	r3, [pc, #16]	; (1110 <timer_add_timer_task+0x54>)
    1100:	4798      	blx	r3
    1102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1104:	4660      	mov	r0, ip
    1106:	4b01      	ldr	r3, [pc, #4]	; (110c <timer_add_timer_task+0x50>)
    1108:	4798      	blx	r3
    110a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    110c:	00001799 	.word	0x00001799
    1110:	000017c5 	.word	0x000017c5

00001114 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1118:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    111a:	6907      	ldr	r7, [r0, #16]
    111c:	3701      	adds	r7, #1
    111e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1120:	7e03      	ldrb	r3, [r0, #24]
    1122:	f013 0f01 	tst.w	r3, #1
    1126:	d113      	bne.n	1150 <timer_process_counted+0x3c>
    1128:	7e03      	ldrb	r3, [r0, #24]
    112a:	f013 0f02 	tst.w	r3, #2
    112e:	d10f      	bne.n	1150 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1130:	b354      	cbz	r4, 1188 <timer_process_counted+0x74>
    1132:	6863      	ldr	r3, [r4, #4]
    1134:	1afb      	subs	r3, r7, r3
    1136:	68a2      	ldr	r2, [r4, #8]
    1138:	4293      	cmp	r3, r2
    113a:	d307      	bcc.n	114c <timer_process_counted+0x38>
    113c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    113e:	f100 0814 	add.w	r8, r0, #20
    1142:	f8df 9048 	ldr.w	r9, [pc, #72]	; 118c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1146:	f8df a048 	ldr.w	sl, [pc, #72]	; 1190 <timer_process_counted+0x7c>
    114a:	e012      	b.n	1172 <timer_process_counted+0x5e>
    114c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1150:	7e03      	ldrb	r3, [r0, #24]
    1152:	f043 0302 	orr.w	r3, r3, #2
    1156:	7603      	strb	r3, [r0, #24]
		return;
    1158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    115c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    115e:	68e3      	ldr	r3, [r4, #12]
    1160:	4620      	mov	r0, r4
    1162:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1164:	b185      	cbz	r5, 1188 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1166:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1168:	686b      	ldr	r3, [r5, #4]
    116a:	1afb      	subs	r3, r7, r3
    116c:	68aa      	ldr	r2, [r5, #8]
    116e:	4293      	cmp	r3, r2
    1170:	d30a      	bcc.n	1188 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1172:	4640      	mov	r0, r8
    1174:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1176:	7c23      	ldrb	r3, [r4, #16]
    1178:	2b01      	cmp	r3, #1
    117a:	d1ef      	bne.n	115c <timer_process_counted+0x48>
			tmp->time_label = time;
    117c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    117e:	463a      	mov	r2, r7
    1180:	4621      	mov	r1, r4
    1182:	4640      	mov	r0, r8
    1184:	47d0      	blx	sl
    1186:	e7e9      	b.n	115c <timer_process_counted+0x48>
    1188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    118c:	0000180d 	.word	0x0000180d
    1190:	000010bd 	.word	0x000010bd

00001194 <timer_init>:
{
    1194:	b538      	push	{r3, r4, r5, lr}
    1196:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1198:	4604      	mov	r4, r0
    119a:	b178      	cbz	r0, 11bc <timer_init+0x28>
    119c:	1c08      	adds	r0, r1, #0
    119e:	bf18      	it	ne
    11a0:	2001      	movne	r0, #1
    11a2:	223b      	movs	r2, #59	; 0x3b
    11a4:	4906      	ldr	r1, [pc, #24]	; (11c0 <timer_init+0x2c>)
    11a6:	4b07      	ldr	r3, [pc, #28]	; (11c4 <timer_init+0x30>)
    11a8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    11aa:	4629      	mov	r1, r5
    11ac:	4620      	mov	r0, r4
    11ae:	4b06      	ldr	r3, [pc, #24]	; (11c8 <timer_init+0x34>)
    11b0:	4798      	blx	r3
	descr->time                           = 0;
    11b2:	2000      	movs	r0, #0
    11b4:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    11b6:	4b05      	ldr	r3, [pc, #20]	; (11cc <timer_init+0x38>)
    11b8:	6023      	str	r3, [r4, #0]
}
    11ba:	bd38      	pop	{r3, r4, r5, pc}
    11bc:	2000      	movs	r0, #0
    11be:	e7f0      	b.n	11a2 <timer_init+0xe>
    11c0:	000043fc 	.word	0x000043fc
    11c4:	00001771 	.word	0x00001771
    11c8:	00001cb5 	.word	0x00001cb5
    11cc:	00001115 	.word	0x00001115

000011d0 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    11d0:	4b0f      	ldr	r3, [pc, #60]	; (1210 <_usb_d_find_ep+0x40>)
    11d2:	7859      	ldrb	r1, [r3, #1]
    11d4:	4288      	cmp	r0, r1
    11d6:	d018      	beq.n	120a <_usb_d_find_ep+0x3a>
{
    11d8:	b430      	push	{r4, r5}
    11da:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    11dc:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    11de:	f000 050f 	and.w	r5, r0, #15
    11e2:	e007      	b.n	11f4 <_usb_d_find_ep+0x24>
    11e4:	3301      	adds	r3, #1
    11e6:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    11e8:	2b04      	cmp	r3, #4
    11ea:	d009      	beq.n	1200 <_usb_d_find_ep+0x30>
    11ec:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    11ee:	7851      	ldrb	r1, [r2, #1]
    11f0:	4281      	cmp	r1, r0
    11f2:	d007      	beq.n	1204 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    11f4:	7814      	ldrb	r4, [r2, #0]
    11f6:	2c00      	cmp	r4, #0
    11f8:	d1f4      	bne.n	11e4 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    11fa:	428d      	cmp	r5, r1
    11fc:	d1f2      	bne.n	11e4 <_usb_d_find_ep+0x14>
    11fe:	e001      	b.n	1204 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    1200:	f04f 33ff 	mov.w	r3, #4294967295
}
    1204:	4618      	mov	r0, r3
    1206:	bc30      	pop	{r4, r5}
    1208:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    120a:	2300      	movs	r3, #0
}
    120c:	4618      	mov	r0, r3
    120e:	4770      	bx	lr
    1210:	200004b4 	.word	0x200004b4

00001214 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1214:	2000      	movs	r0, #0
    1216:	4770      	bx	lr

00001218 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1218:	b538      	push	{r3, r4, r5, lr}
    121a:	4604      	mov	r4, r0
    121c:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    121e:	4b09      	ldr	r3, [pc, #36]	; (1244 <usb_d_cb_trans_more+0x2c>)
    1220:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1222:	4b09      	ldr	r3, [pc, #36]	; (1248 <usb_d_cb_trans_more+0x30>)
    1224:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1228:	789b      	ldrb	r3, [r3, #2]
    122a:	2b03      	cmp	r3, #3
    122c:	d001      	beq.n	1232 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    122e:	2000      	movs	r0, #0
}
    1230:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    1232:	4b05      	ldr	r3, [pc, #20]	; (1248 <usb_d_cb_trans_more+0x30>)
    1234:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1238:	6983      	ldr	r3, [r0, #24]
    123a:	4629      	mov	r1, r5
    123c:	4620      	mov	r0, r4
    123e:	4798      	blx	r3
    1240:	bd38      	pop	{r3, r4, r5, pc}
    1242:	bf00      	nop
    1244:	000011d1 	.word	0x000011d1
    1248:	200004b4 	.word	0x200004b4

0000124c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    124c:	b5f0      	push	{r4, r5, r6, r7, lr}
    124e:	b085      	sub	sp, #20
    1250:	4606      	mov	r6, r0
    1252:	460d      	mov	r5, r1
    1254:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1256:	4b4d      	ldr	r3, [pc, #308]	; (138c <_usb_d_cb_trans_done+0x140>)
    1258:	4798      	blx	r3
    125a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    125c:	2d00      	cmp	r5, #0
    125e:	d15b      	bne.n	1318 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1260:	4a4b      	ldr	r2, [pc, #300]	; (1390 <_usb_d_cb_trans_done+0x144>)
    1262:	0143      	lsls	r3, r0, #5
    1264:	18d1      	adds	r1, r2, r3
    1266:	2000      	movs	r0, #0
    1268:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    126a:	5cd3      	ldrb	r3, [r2, r3]
    126c:	b173      	cbz	r3, 128c <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    126e:	4b48      	ldr	r3, [pc, #288]	; (1390 <_usb_d_cb_trans_done+0x144>)
    1270:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1274:	2201      	movs	r2, #1
    1276:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1278:	4845      	ldr	r0, [pc, #276]	; (1390 <_usb_d_cb_trans_done+0x144>)
    127a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    127e:	69c3      	ldr	r3, [r0, #28]
    1280:	463a      	mov	r2, r7
    1282:	78c1      	ldrb	r1, [r0, #3]
    1284:	4630      	mov	r0, r6
    1286:	4798      	blx	r3
}
    1288:	b005      	add	sp, #20
    128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    128c:	788b      	ldrb	r3, [r1, #2]
    128e:	2b03      	cmp	r3, #3
    1290:	d00b      	beq.n	12aa <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1292:	483f      	ldr	r0, [pc, #252]	; (1390 <_usb_d_cb_trans_done+0x144>)
    1294:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    1298:	4614      	mov	r4, r2
    129a:	69d3      	ldr	r3, [r2, #28]
    129c:	320c      	adds	r2, #12
    129e:	2100      	movs	r1, #0
    12a0:	7860      	ldrb	r0, [r4, #1]
    12a2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    12a4:	2302      	movs	r3, #2
    12a6:	70a3      	strb	r3, [r4, #2]
    12a8:	e7ee      	b.n	1288 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    12aa:	460b      	mov	r3, r1
    12ac:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    12b0:	460a      	mov	r2, r1
    12b2:	69ce      	ldr	r6, [r1, #28]
    12b4:	320c      	adds	r2, #12
    12b6:	2101      	movs	r1, #1
    12b8:	7858      	ldrb	r0, [r3, #1]
    12ba:	47b0      	blx	r6
		if (err) {
    12bc:	b1a0      	cbz	r0, 12e8 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    12be:	4b34      	ldr	r3, [pc, #208]	; (1390 <_usb_d_cb_trans_done+0x144>)
    12c0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    12c4:	2205      	movs	r2, #5
    12c6:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    12c8:	2202      	movs	r2, #2
    12ca:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    12cc:	2d00      	cmp	r5, #0
    12ce:	db09      	blt.n	12e4 <_usb_d_cb_trans_done+0x98>
    12d0:	482f      	ldr	r0, [pc, #188]	; (1390 <_usb_d_cb_trans_done+0x144>)
    12d2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    12d6:	7840      	ldrb	r0, [r0, #1]
    12d8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    12dc:	2101      	movs	r1, #1
    12de:	4b2d      	ldr	r3, [pc, #180]	; (1394 <_usb_d_cb_trans_done+0x148>)
    12e0:	4798      	blx	r3
    12e2:	e7d1      	b.n	1288 <_usb_d_cb_trans_done+0x3c>
    12e4:	7858      	ldrb	r0, [r3, #1]
    12e6:	e7f9      	b.n	12dc <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    12e8:	4829      	ldr	r0, [pc, #164]	; (1390 <_usb_d_cb_trans_done+0x144>)
    12ea:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    12ee:	2304      	movs	r3, #4
    12f0:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    12f2:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    12f4:	2200      	movs	r2, #0
    12f6:	9201      	str	r2, [sp, #4]
    12f8:	9202      	str	r2, [sp, #8]
    12fa:	4295      	cmp	r5, r2
    12fc:	bfac      	ite	ge
    12fe:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    1302:	f003 030f 	andlt.w	r3, r3, #15
    1306:	f88d 300c 	strb.w	r3, [sp, #12]
    130a:	2301      	movs	r3, #1
    130c:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1310:	a801      	add	r0, sp, #4
    1312:	4b21      	ldr	r3, [pc, #132]	; (1398 <_usb_d_cb_trans_done+0x14c>)
    1314:	4798      	blx	r3
    1316:	e7b7      	b.n	1288 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    1318:	2d01      	cmp	r5, #1
    131a:	d00a      	beq.n	1332 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    131c:	2d02      	cmp	r5, #2
    131e:	d01c      	beq.n	135a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    1320:	2d03      	cmp	r5, #3
    1322:	d02a      	beq.n	137a <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1324:	4b1a      	ldr	r3, [pc, #104]	; (1390 <_usb_d_cb_trans_done+0x144>)
    1326:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    132a:	2206      	movs	r2, #6
    132c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    132e:	70da      	strb	r2, [r3, #3]
    1330:	e7a2      	b.n	1278 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    1332:	4a17      	ldr	r2, [pc, #92]	; (1390 <_usb_d_cb_trans_done+0x144>)
    1334:	0143      	lsls	r3, r0, #5
    1336:	18d1      	adds	r1, r2, r3
    1338:	2002      	movs	r0, #2
    133a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    133c:	5cd3      	ldrb	r3, [r2, r3]
    133e:	b12b      	cbz	r3, 134c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1340:	4b13      	ldr	r3, [pc, #76]	; (1390 <_usb_d_cb_trans_done+0x144>)
    1342:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1346:	2205      	movs	r2, #5
    1348:	709a      	strb	r2, [r3, #2]
    134a:	e795      	b.n	1278 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    134c:	460b      	mov	r3, r1
    134e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1350:	2100      	movs	r1, #0
    1352:	4630      	mov	r0, r6
    1354:	4b0f      	ldr	r3, [pc, #60]	; (1394 <_usb_d_cb_trans_done+0x148>)
    1356:	4798      	blx	r3
    1358:	e78e      	b.n	1278 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    135a:	4a0d      	ldr	r2, [pc, #52]	; (1390 <_usb_d_cb_trans_done+0x144>)
    135c:	0143      	lsls	r3, r0, #5
    135e:	18d1      	adds	r1, r2, r3
    1360:	2004      	movs	r0, #4
    1362:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1364:	5cd3      	ldrb	r3, [r2, r3]
    1366:	b12b      	cbz	r3, 1374 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1368:	4b09      	ldr	r3, [pc, #36]	; (1390 <_usb_d_cb_trans_done+0x144>)
    136a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    136e:	2201      	movs	r2, #1
    1370:	709a      	strb	r2, [r3, #2]
    1372:	e781      	b.n	1278 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1374:	2302      	movs	r3, #2
    1376:	708b      	strb	r3, [r1, #2]
			return;
    1378:	e786      	b.n	1288 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    137a:	4b05      	ldr	r3, [pc, #20]	; (1390 <_usb_d_cb_trans_done+0x144>)
    137c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1380:	2200      	movs	r2, #0
    1382:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1384:	2205      	movs	r2, #5
    1386:	70da      	strb	r2, [r3, #3]
    1388:	e776      	b.n	1278 <_usb_d_cb_trans_done+0x2c>
    138a:	bf00      	nop
    138c:	000011d1 	.word	0x000011d1
    1390:	200004b4 	.word	0x200004b4
    1394:	00003151 	.word	0x00003151
    1398:	000032f9 	.word	0x000032f9

0000139c <usb_d_cb_trans_setup>:
{
    139c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13a0:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    13a2:	4b1c      	ldr	r3, [pc, #112]	; (1414 <usb_d_cb_trans_setup+0x78>)
    13a4:	4798      	blx	r3
    13a6:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    13a8:	4c1b      	ldr	r4, [pc, #108]	; (1418 <usb_d_cb_trans_setup+0x7c>)
    13aa:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    13ae:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    13b0:	4621      	mov	r1, r4
    13b2:	4628      	mov	r0, r5
    13b4:	4b19      	ldr	r3, [pc, #100]	; (141c <usb_d_cb_trans_setup+0x80>)
    13b6:	4798      	blx	r3
	if (n != 8) {
    13b8:	b2c0      	uxtb	r0, r0
    13ba:	2808      	cmp	r0, #8
    13bc:	d009      	beq.n	13d2 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    13be:	2101      	movs	r1, #1
    13c0:	4628      	mov	r0, r5
    13c2:	4c17      	ldr	r4, [pc, #92]	; (1420 <usb_d_cb_trans_setup+0x84>)
    13c4:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    13c6:	2101      	movs	r1, #1
    13c8:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    13cc:	47a0      	blx	r4
		return;
    13ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    13d2:	2100      	movs	r1, #0
    13d4:	4628      	mov	r0, r5
    13d6:	4f12      	ldr	r7, [pc, #72]	; (1420 <usb_d_cb_trans_setup+0x84>)
    13d8:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    13da:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    13de:	2100      	movs	r1, #0
    13e0:	4640      	mov	r0, r8
    13e2:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    13e4:	4b0c      	ldr	r3, [pc, #48]	; (1418 <usb_d_cb_trans_setup+0x7c>)
    13e6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    13ea:	2201      	movs	r2, #1
    13ec:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    13ee:	695b      	ldr	r3, [r3, #20]
    13f0:	4621      	mov	r1, r4
    13f2:	4628      	mov	r0, r5
    13f4:	4798      	blx	r3
    13f6:	b108      	cbz	r0, 13fc <usb_d_cb_trans_setup+0x60>
    13f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    13fc:	4b06      	ldr	r3, [pc, #24]	; (1418 <usb_d_cb_trans_setup+0x7c>)
    13fe:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1402:	2305      	movs	r3, #5
    1404:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1406:	2101      	movs	r1, #1
    1408:	4628      	mov	r0, r5
    140a:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    140c:	2101      	movs	r1, #1
    140e:	4640      	mov	r0, r8
    1410:	47b8      	blx	r7
    1412:	e7f1      	b.n	13f8 <usb_d_cb_trans_setup+0x5c>
    1414:	000011d1 	.word	0x000011d1
    1418:	200004b4 	.word	0x200004b4
    141c:	00003299 	.word	0x00003299
    1420:	00003151 	.word	0x00003151

00001424 <usb_d_init>:

int32_t usb_d_init(void)
{
    1424:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1426:	4b11      	ldr	r3, [pc, #68]	; (146c <usb_d_init+0x48>)
    1428:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    142a:	2800      	cmp	r0, #0
    142c:	db1c      	blt.n	1468 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    142e:	4c10      	ldr	r4, [pc, #64]	; (1470 <usb_d_init+0x4c>)
    1430:	2280      	movs	r2, #128	; 0x80
    1432:	2100      	movs	r1, #0
    1434:	4620      	mov	r0, r4
    1436:	4b0f      	ldr	r3, [pc, #60]	; (1474 <usb_d_init+0x50>)
    1438:	4798      	blx	r3
    143a:	4623      	mov	r3, r4
    143c:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1440:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1442:	4a0d      	ldr	r2, [pc, #52]	; (1478 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1444:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1446:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1448:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    144a:	61da      	str	r2, [r3, #28]
    144c:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    144e:	4283      	cmp	r3, r0
    1450:	d1f8      	bne.n	1444 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1452:	490a      	ldr	r1, [pc, #40]	; (147c <usb_d_init+0x58>)
    1454:	2000      	movs	r0, #0
    1456:	4c0a      	ldr	r4, [pc, #40]	; (1480 <usb_d_init+0x5c>)
    1458:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    145a:	490a      	ldr	r1, [pc, #40]	; (1484 <usb_d_init+0x60>)
    145c:	2001      	movs	r0, #1
    145e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1460:	4909      	ldr	r1, [pc, #36]	; (1488 <usb_d_init+0x64>)
    1462:	2002      	movs	r0, #2
    1464:	47a0      	blx	r4
	return ERR_NONE;
    1466:	2000      	movs	r0, #0
}
    1468:	bd10      	pop	{r4, pc}
    146a:	bf00      	nop
    146c:	00002b45 	.word	0x00002b45
    1470:	200004b4 	.word	0x200004b4
    1474:	000041e9 	.word	0x000041e9
    1478:	00001215 	.word	0x00001215
    147c:	0000139d 	.word	0x0000139d
    1480:	000034fd 	.word	0x000034fd
    1484:	00001219 	.word	0x00001219
    1488:	0000124d 	.word	0x0000124d

0000148c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    148c:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    148e:	4b01      	ldr	r3, [pc, #4]	; (1494 <usb_d_register_callback+0x8>)
    1490:	4798      	blx	r3
    1492:	bd08      	pop	{r3, pc}
    1494:	000034d9 	.word	0x000034d9

00001498 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    1498:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    149a:	4b01      	ldr	r3, [pc, #4]	; (14a0 <usb_d_enable+0x8>)
    149c:	4798      	blx	r3
}
    149e:	bd08      	pop	{r3, pc}
    14a0:	00002c41 	.word	0x00002c41

000014a4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    14a4:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    14a6:	4b01      	ldr	r3, [pc, #4]	; (14ac <usb_d_attach+0x8>)
    14a8:	4798      	blx	r3
    14aa:	bd08      	pop	{r3, pc}
    14ac:	00002cad 	.word	0x00002cad

000014b0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    14b0:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    14b2:	4b01      	ldr	r3, [pc, #4]	; (14b8 <usb_d_set_address+0x8>)
    14b4:	4798      	blx	r3
    14b6:	bd08      	pop	{r3, pc}
    14b8:	00002cbf 	.word	0x00002cbf

000014bc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    14bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14be:	4606      	mov	r6, r0
    14c0:	460c      	mov	r4, r1
    14c2:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    14c4:	4b0f      	ldr	r3, [pc, #60]	; (1504 <usb_d_ep_init+0x48>)
    14c6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    14c8:	2800      	cmp	r0, #0
    14ca:	da14      	bge.n	14f6 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    14cc:	20ff      	movs	r0, #255	; 0xff
    14ce:	4b0d      	ldr	r3, [pc, #52]	; (1504 <usb_d_ep_init+0x48>)
    14d0:	4798      	blx	r3
		if (ep_index < 0) {
    14d2:	1e05      	subs	r5, r0, #0
    14d4:	db12      	blt.n	14fc <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    14d6:	463a      	mov	r2, r7
    14d8:	4621      	mov	r1, r4
    14da:	4630      	mov	r0, r6
    14dc:	4b0a      	ldr	r3, [pc, #40]	; (1508 <usb_d_ep_init+0x4c>)
    14de:	4798      	blx	r3
	if (rc < 0) {
    14e0:	2800      	cmp	r0, #0
    14e2:	db0d      	blt.n	1500 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    14e4:	4b09      	ldr	r3, [pc, #36]	; (150c <usb_d_ep_init+0x50>)
    14e6:	0168      	lsls	r0, r5, #5
    14e8:	181a      	adds	r2, r3, r0
    14ea:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    14ec:	f004 0403 	and.w	r4, r4, #3
    14f0:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    14f2:	2000      	movs	r0, #0
    14f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    14f6:	f06f 0013 	mvn.w	r0, #19
    14fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    14fc:	f06f 0014 	mvn.w	r0, #20
}
    1500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1502:	bf00      	nop
    1504:	000011d1 	.word	0x000011d1
    1508:	00002ccd 	.word	0x00002ccd
    150c:	200004b4 	.word	0x200004b4

00001510 <usb_d_ep0_init>:
{
    1510:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1512:	4602      	mov	r2, r0
    1514:	2100      	movs	r1, #0
    1516:	4608      	mov	r0, r1
    1518:	4b01      	ldr	r3, [pc, #4]	; (1520 <usb_d_ep0_init+0x10>)
    151a:	4798      	blx	r3
}
    151c:	bd08      	pop	{r3, pc}
    151e:	bf00      	nop
    1520:	000014bd 	.word	0x000014bd

00001524 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1524:	b538      	push	{r3, r4, r5, lr}
    1526:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1528:	4b06      	ldr	r3, [pc, #24]	; (1544 <usb_d_ep_deinit+0x20>)
    152a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    152c:	1e04      	subs	r4, r0, #0
    152e:	db07      	blt.n	1540 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1530:	4628      	mov	r0, r5
    1532:	4b05      	ldr	r3, [pc, #20]	; (1548 <usb_d_ep_deinit+0x24>)
    1534:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1536:	4805      	ldr	r0, [pc, #20]	; (154c <usb_d_ep_deinit+0x28>)
    1538:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    153c:	23ff      	movs	r3, #255	; 0xff
    153e:	7043      	strb	r3, [r0, #1]
    1540:	bd38      	pop	{r3, r4, r5, pc}
    1542:	bf00      	nop
    1544:	000011d1 	.word	0x000011d1
    1548:	00002de5 	.word	0x00002de5
    154c:	200004b4 	.word	0x200004b4

00001550 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1550:	b538      	push	{r3, r4, r5, lr}
    1552:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1554:	4b0e      	ldr	r3, [pc, #56]	; (1590 <usb_d_ep_enable+0x40>)
    1556:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1558:	1e04      	subs	r4, r0, #0
    155a:	db16      	blt.n	158a <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    155c:	0163      	lsls	r3, r4, #5
    155e:	4a0d      	ldr	r2, [pc, #52]	; (1594 <usb_d_ep_enable+0x44>)
    1560:	5cd3      	ldrb	r3, [r2, r3]
    1562:	2b00      	cmp	r3, #0
    1564:	bf0c      	ite	eq
    1566:	2202      	moveq	r2, #2
    1568:	2201      	movne	r2, #1
    156a:	4b0a      	ldr	r3, [pc, #40]	; (1594 <usb_d_ep_enable+0x44>)
    156c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1570:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1572:	4628      	mov	r0, r5
    1574:	4b08      	ldr	r3, [pc, #32]	; (1598 <usb_d_ep_enable+0x48>)
    1576:	4798      	blx	r3
	if (rc < 0) {
    1578:	2800      	cmp	r0, #0
    157a:	db00      	blt.n	157e <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    157c:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    157e:	4b05      	ldr	r3, [pc, #20]	; (1594 <usb_d_ep_enable+0x44>)
    1580:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    1584:	2300      	movs	r3, #0
    1586:	70a3      	strb	r3, [r4, #2]
    1588:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    158a:	f06f 0011 	mvn.w	r0, #17
    158e:	e7f5      	b.n	157c <usb_d_ep_enable+0x2c>
    1590:	000011d1 	.word	0x000011d1
    1594:	200004b4 	.word	0x200004b4
    1598:	00002ea9 	.word	0x00002ea9

0000159c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    159c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    15a0:	b086      	sub	sp, #24
    15a2:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    15a4:	7a07      	ldrb	r7, [r0, #8]
    15a6:	4638      	mov	r0, r7
    15a8:	4b3f      	ldr	r3, [pc, #252]	; (16a8 <usb_d_ep_transfer+0x10c>)
    15aa:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    15ac:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    15ae:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    15b2:	1e06      	subs	r6, r0, #0
    15b4:	db72      	blt.n	169c <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    15b6:	a804      	add	r0, sp, #16
    15b8:	4b3c      	ldr	r3, [pc, #240]	; (16ac <usb_d_ep_transfer+0x110>)
    15ba:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    15bc:	4b3c      	ldr	r3, [pc, #240]	; (16b0 <usb_d_ep_transfer+0x114>)
    15be:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    15c2:	789b      	ldrb	r3, [r3, #2]
    15c4:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    15c8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    15cc:	b2db      	uxtb	r3, r3
    15ce:	2b01      	cmp	r3, #1
    15d0:	d011      	beq.n	15f6 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    15d2:	a804      	add	r0, sp, #16
    15d4:	4b37      	ldr	r3, [pc, #220]	; (16b4 <usb_d_ep_transfer+0x118>)
    15d6:	4798      	blx	r3
		switch (state) {
    15d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    15dc:	b2db      	uxtb	r3, r3
    15de:	2b05      	cmp	r3, #5
    15e0:	d05f      	beq.n	16a2 <usb_d_ep_transfer+0x106>
    15e2:	2b06      	cmp	r3, #6
    15e4:	d023      	beq.n	162e <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    15e6:	2b00      	cmp	r3, #0
    15e8:	bf0c      	ite	eq
    15ea:	f06f 0012 	mvneq.w	r0, #18
    15ee:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    15f0:	b006      	add	sp, #24
    15f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    15f6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 16b0 <usb_d_ep_transfer+0x114>
    15fa:	ea4f 1946 	mov.w	r9, r6, lsl #5
    15fe:	eb0a 0309 	add.w	r3, sl, r9
    1602:	2203      	movs	r2, #3
    1604:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1606:	a804      	add	r0, sp, #16
    1608:	4b2a      	ldr	r3, [pc, #168]	; (16b4 <usb_d_ep_transfer+0x118>)
    160a:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    160c:	f81a 3009 	ldrb.w	r3, [sl, r9]
    1610:	b183      	cbz	r3, 1634 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1612:	7a22      	ldrb	r2, [r4, #8]
    1614:	3500      	adds	r5, #0
    1616:	bf18      	it	ne
    1618:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    161a:	6823      	ldr	r3, [r4, #0]
    161c:	9301      	str	r3, [sp, #4]
    161e:	f8cd 8008 	str.w	r8, [sp, #8]
    1622:	f017 0f80 	tst.w	r7, #128	; 0x80
    1626:	d119      	bne.n	165c <usb_d_ep_transfer+0xc0>
    1628:	f002 030f 	and.w	r3, r2, #15
    162c:	e018      	b.n	1660 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    162e:	f06f 000f 	mvn.w	r0, #15
    1632:	e7dd      	b.n	15f0 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1634:	4b1e      	ldr	r3, [pc, #120]	; (16b0 <usb_d_ep_transfer+0x114>)
    1636:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    163a:	7cda      	ldrb	r2, [r3, #19]
    163c:	7c9d      	ldrb	r5, [r3, #18]
    163e:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    1642:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    1644:	b9a5      	cbnz	r5, 1670 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1646:	4b1a      	ldr	r3, [pc, #104]	; (16b0 <usb_d_ep_transfer+0x114>)
    1648:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    164c:	2304      	movs	r3, #4
    164e:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    1650:	2300      	movs	r3, #0
			zlp                 = true;
    1652:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1654:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1656:	6821      	ldr	r1, [r4, #0]
    1658:	9101      	str	r1, [sp, #4]
    165a:	9302      	str	r3, [sp, #8]
    165c:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    1660:	f88d 300c 	strb.w	r3, [sp, #12]
    1664:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1668:	a801      	add	r0, sp, #4
    166a:	4b13      	ldr	r3, [pc, #76]	; (16b8 <usb_d_ep_transfer+0x11c>)
    166c:	4798      	blx	r3
	return rc;
    166e:	e7bf      	b.n	15f0 <usb_d_ep_transfer+0x54>
    1670:	4643      	mov	r3, r8
    1672:	45a8      	cmp	r8, r5
    1674:	bf28      	it	cs
    1676:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1678:	4a0d      	ldr	r2, [pc, #52]	; (16b0 <usb_d_ep_transfer+0x114>)
    167a:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    167e:	f996 200c 	ldrsb.w	r2, [r6, #12]
    1682:	2a00      	cmp	r2, #0
    1684:	db05      	blt.n	1692 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1686:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1688:	6821      	ldr	r1, [r4, #0]
    168a:	9101      	str	r1, [sp, #4]
    168c:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    168e:	2500      	movs	r5, #0
    1690:	e7ca      	b.n	1628 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    1692:	429d      	cmp	r5, r3
    1694:	bf94      	ite	ls
    1696:	2500      	movls	r5, #0
    1698:	2501      	movhi	r5, #1
    169a:	e7db      	b.n	1654 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    169c:	f06f 0011 	mvn.w	r0, #17
    16a0:	e7a6      	b.n	15f0 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    16a2:	2002      	movs	r0, #2
    16a4:	e7a4      	b.n	15f0 <usb_d_ep_transfer+0x54>
    16a6:	bf00      	nop
    16a8:	000011d1 	.word	0x000011d1
    16ac:	00003599 	.word	0x00003599
    16b0:	200004b4 	.word	0x200004b4
    16b4:	000035a7 	.word	0x000035a7
    16b8:	000032f9 	.word	0x000032f9

000016bc <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    16bc:	b538      	push	{r3, r4, r5, lr}
    16be:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    16c0:	b141      	cbz	r1, 16d4 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    16c2:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    16c4:	bf0c      	ite	eq
    16c6:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    16c8:	2102      	movne	r1, #2
    16ca:	4b13      	ldr	r3, [pc, #76]	; (1718 <usb_d_ep_halt+0x5c>)
    16cc:	4798      	blx	r3
    16ce:	4603      	mov	r3, r0
	}
}
    16d0:	4618      	mov	r0, r3
    16d2:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    16d4:	4b11      	ldr	r3, [pc, #68]	; (171c <usb_d_ep_halt+0x60>)
    16d6:	4798      	blx	r3
	if (ep_index < 0) {
    16d8:	1e05      	subs	r5, r0, #0
    16da:	db19      	blt.n	1710 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    16dc:	2102      	movs	r1, #2
    16de:	4620      	mov	r0, r4
    16e0:	4b0d      	ldr	r3, [pc, #52]	; (1718 <usb_d_ep_halt+0x5c>)
    16e2:	4798      	blx	r3
    16e4:	4603      	mov	r3, r0
    16e6:	2800      	cmp	r0, #0
    16e8:	d0f2      	beq.n	16d0 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    16ea:	2100      	movs	r1, #0
    16ec:	4620      	mov	r0, r4
    16ee:	4b0a      	ldr	r3, [pc, #40]	; (1718 <usb_d_ep_halt+0x5c>)
    16f0:	4798      	blx	r3
		if (rc < 0) {
    16f2:	1e03      	subs	r3, r0, #0
    16f4:	dbec      	blt.n	16d0 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    16f6:	4b0a      	ldr	r3, [pc, #40]	; (1720 <usb_d_ep_halt+0x64>)
    16f8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    16fc:	2201      	movs	r2, #1
    16fe:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1700:	2103      	movs	r1, #3
    1702:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1704:	69db      	ldr	r3, [r3, #28]
    1706:	2200      	movs	r2, #0
    1708:	4620      	mov	r0, r4
    170a:	4798      	blx	r3
	return ERR_NONE;
    170c:	2300      	movs	r3, #0
    170e:	e7df      	b.n	16d0 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    1710:	f06f 0311 	mvn.w	r3, #17
    1714:	e7dc      	b.n	16d0 <usb_d_ep_halt+0x14>
    1716:	bf00      	nop
    1718:	00003151 	.word	0x00003151
    171c:	000011d1 	.word	0x000011d1
    1720:	200004b4 	.word	0x200004b4

00001724 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1724:	b538      	push	{r3, r4, r5, lr}
    1726:	460d      	mov	r5, r1
    1728:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    172a:	4b0e      	ldr	r3, [pc, #56]	; (1764 <usb_d_ep_register_callback+0x40>)
    172c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    172e:	4b0e      	ldr	r3, [pc, #56]	; (1768 <usb_d_ep_register_callback+0x44>)
    1730:	2c00      	cmp	r4, #0
    1732:	bf08      	it	eq
    1734:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    1736:	2800      	cmp	r0, #0
    1738:	db13      	blt.n	1762 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    173a:	2d01      	cmp	r5, #1
    173c:	d008      	beq.n	1750 <usb_d_ep_register_callback+0x2c>
    173e:	b115      	cbz	r5, 1746 <usb_d_ep_register_callback+0x22>
    1740:	2d02      	cmp	r5, #2
    1742:	d00a      	beq.n	175a <usb_d_ep_register_callback+0x36>
    1744:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    1746:	4b09      	ldr	r3, [pc, #36]	; (176c <usb_d_ep_register_callback+0x48>)
    1748:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    174c:	6144      	str	r4, [r0, #20]
		break;
    174e:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1750:	4b06      	ldr	r3, [pc, #24]	; (176c <usb_d_ep_register_callback+0x48>)
    1752:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1756:	6184      	str	r4, [r0, #24]
		break;
    1758:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    175a:	4b04      	ldr	r3, [pc, #16]	; (176c <usb_d_ep_register_callback+0x48>)
    175c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1760:	61c4      	str	r4, [r0, #28]
    1762:	bd38      	pop	{r3, r4, r5, pc}
    1764:	000011d1 	.word	0x000011d1
    1768:	00001215 	.word	0x00001215
    176c:	200004b4 	.word	0x200004b4

00001770 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1770:	b900      	cbnz	r0, 1774 <assert+0x4>
		__asm("BKPT #0");
    1772:	be00      	bkpt	0x0000
    1774:	4770      	bx	lr

00001776 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1776:	6803      	ldr	r3, [r0, #0]
    1778:	b14b      	cbz	r3, 178e <is_list_element+0x18>
		if (it == element) {
    177a:	428b      	cmp	r3, r1
    177c:	d009      	beq.n	1792 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    177e:	681b      	ldr	r3, [r3, #0]
    1780:	b11b      	cbz	r3, 178a <is_list_element+0x14>
		if (it == element) {
    1782:	4299      	cmp	r1, r3
    1784:	d1fb      	bne.n	177e <is_list_element+0x8>
			return true;
    1786:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1788:	4770      	bx	lr
	return false;
    178a:	2000      	movs	r0, #0
    178c:	4770      	bx	lr
    178e:	2000      	movs	r0, #0
    1790:	4770      	bx	lr
			return true;
    1792:	2001      	movs	r0, #1
    1794:	4770      	bx	lr
	...

00001798 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1798:	b538      	push	{r3, r4, r5, lr}
    179a:	4604      	mov	r4, r0
    179c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    179e:	4b06      	ldr	r3, [pc, #24]	; (17b8 <list_insert_as_head+0x20>)
    17a0:	4798      	blx	r3
    17a2:	f080 0001 	eor.w	r0, r0, #1
    17a6:	2239      	movs	r2, #57	; 0x39
    17a8:	4904      	ldr	r1, [pc, #16]	; (17bc <list_insert_as_head+0x24>)
    17aa:	b2c0      	uxtb	r0, r0
    17ac:	4b04      	ldr	r3, [pc, #16]	; (17c0 <list_insert_as_head+0x28>)
    17ae:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    17b0:	6823      	ldr	r3, [r4, #0]
    17b2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    17b4:	6025      	str	r5, [r4, #0]
    17b6:	bd38      	pop	{r3, r4, r5, pc}
    17b8:	00001777 	.word	0x00001777
    17bc:	00004414 	.word	0x00004414
    17c0:	00001771 	.word	0x00001771

000017c4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    17c4:	6803      	ldr	r3, [r0, #0]
    17c6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    17c8:	6001      	str	r1, [r0, #0]
    17ca:	4770      	bx	lr

000017cc <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    17cc:	b570      	push	{r4, r5, r6, lr}
    17ce:	4605      	mov	r5, r0
    17d0:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    17d2:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    17d4:	4b0a      	ldr	r3, [pc, #40]	; (1800 <list_insert_at_end+0x34>)
    17d6:	4798      	blx	r3
    17d8:	f080 0001 	eor.w	r0, r0, #1
    17dc:	224f      	movs	r2, #79	; 0x4f
    17de:	4909      	ldr	r1, [pc, #36]	; (1804 <list_insert_at_end+0x38>)
    17e0:	b2c0      	uxtb	r0, r0
    17e2:	4b09      	ldr	r3, [pc, #36]	; (1808 <list_insert_at_end+0x3c>)
    17e4:	4798      	blx	r3

	if (!list->head) {
    17e6:	682b      	ldr	r3, [r5, #0]
    17e8:	b91b      	cbnz	r3, 17f2 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    17ea:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    17ec:	6033      	str	r3, [r6, #0]
		return;
    17ee:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    17f0:	461c      	mov	r4, r3
	while (it->next) {
    17f2:	6823      	ldr	r3, [r4, #0]
    17f4:	2b00      	cmp	r3, #0
    17f6:	d1fb      	bne.n	17f0 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    17f8:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    17fa:	6033      	str	r3, [r6, #0]
    17fc:	bd70      	pop	{r4, r5, r6, pc}
    17fe:	bf00      	nop
    1800:	00001777 	.word	0x00001777
    1804:	00004414 	.word	0x00004414
    1808:	00001771 	.word	0x00001771

0000180c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    180c:	6803      	ldr	r3, [r0, #0]
    180e:	b10b      	cbz	r3, 1814 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1810:	681a      	ldr	r2, [r3, #0]
    1812:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1814:	4618      	mov	r0, r3
    1816:	4770      	bx	lr

00001818 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    1818:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    181a:	f013 0f01 	tst.w	r3, #1
    181e:	d11b      	bne.n	1858 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1820:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1822:	f013 0f03 	tst.w	r3, #3
    1826:	d1fb      	bne.n	1820 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1828:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    182a:	f013 0f02 	tst.w	r3, #2
    182e:	d00d      	beq.n	184c <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    1830:	8803      	ldrh	r3, [r0, #0]
    1832:	f023 0302 	bic.w	r3, r3, #2
    1836:	041b      	lsls	r3, r3, #16
    1838:	0c1b      	lsrs	r3, r3, #16
    183a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    183c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    183e:	f013 0f03 	tst.w	r3, #3
    1842:	d1fb      	bne.n	183c <_adc_init+0x24>
    1844:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1846:	f013 0f02 	tst.w	r3, #2
    184a:	d1fb      	bne.n	1844 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    184c:	2301      	movs	r3, #1
    184e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1850:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1852:	f013 0f03 	tst.w	r3, #3
    1856:	d1fb      	bne.n	1850 <_adc_init+0x38>
    1858:	6b03      	ldr	r3, [r0, #48]	; 0x30
    185a:	f013 0f01 	tst.w	r3, #1
    185e:	d1fb      	bne.n	1858 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1860:	2316      	movs	r3, #22
    1862:	4a37      	ldr	r2, [pc, #220]	; (1940 <_adc_init+0x128>)
    1864:	fb03 2301 	mla	r3, r3, r1, r2
    1868:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    186a:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    186c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    186e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1872:	2b00      	cmp	r3, #0
    1874:	d1fa      	bne.n	186c <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1876:	2316      	movs	r3, #22
    1878:	4a31      	ldr	r2, [pc, #196]	; (1940 <_adc_init+0x128>)
    187a:	fb03 2301 	mla	r3, r3, r1, r2
    187e:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1880:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1882:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1884:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1888:	2b00      	cmp	r3, #0
    188a:	d1fa      	bne.n	1882 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    188c:	2316      	movs	r3, #22
    188e:	4a2c      	ldr	r2, [pc, #176]	; (1940 <_adc_init+0x128>)
    1890:	fb03 2301 	mla	r3, r3, r1, r2
    1894:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1896:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1898:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    189a:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    189c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    189e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    18a2:	2b00      	cmp	r3, #0
    18a4:	d1fa      	bne.n	189c <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    18a6:	2316      	movs	r3, #22
    18a8:	4a25      	ldr	r2, [pc, #148]	; (1940 <_adc_init+0x128>)
    18aa:	fb03 2301 	mla	r3, r3, r1, r2
    18ae:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    18b0:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    18b8:	2b00      	cmp	r3, #0
    18ba:	d1fa      	bne.n	18b2 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    18bc:	2316      	movs	r3, #22
    18be:	4a20      	ldr	r2, [pc, #128]	; (1940 <_adc_init+0x128>)
    18c0:	fb03 2301 	mla	r3, r3, r1, r2
    18c4:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    18c6:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
    18ce:	2b00      	cmp	r3, #0
    18d0:	d1fa      	bne.n	18c8 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    18d2:	2316      	movs	r3, #22
    18d4:	4a1a      	ldr	r2, [pc, #104]	; (1940 <_adc_init+0x128>)
    18d6:	fb03 2301 	mla	r3, r3, r1, r2
    18da:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    18dc:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18de:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18e0:	f013 0f80 	tst.w	r3, #128	; 0x80
    18e4:	d1fb      	bne.n	18de <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    18e6:	2316      	movs	r3, #22
    18e8:	4a15      	ldr	r2, [pc, #84]	; (1940 <_adc_init+0x128>)
    18ea:	fb03 2301 	mla	r3, r3, r1, r2
    18ee:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    18f0:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18f4:	f413 7f80 	tst.w	r3, #256	; 0x100
    18f8:	d1fb      	bne.n	18f2 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    18fa:	2316      	movs	r3, #22
    18fc:	4a10      	ldr	r2, [pc, #64]	; (1940 <_adc_init+0x128>)
    18fe:	fb03 2301 	mla	r3, r3, r1, r2
    1902:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1904:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1906:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1908:	f413 7f00 	tst.w	r3, #512	; 0x200
    190c:	d1fb      	bne.n	1906 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    190e:	2316      	movs	r3, #22
    1910:	4a0b      	ldr	r2, [pc, #44]	; (1940 <_adc_init+0x128>)
    1912:	fb03 2301 	mla	r3, r3, r1, r2
    1916:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1918:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    191a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    191c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1920:	d1fb      	bne.n	191a <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1922:	2216      	movs	r2, #22
    1924:	4b06      	ldr	r3, [pc, #24]	; (1940 <_adc_init+0x128>)
    1926:	fb02 3101 	mla	r1, r2, r1, r3
    192a:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    192c:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    192e:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1930:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1932:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1934:	f013 0f03 	tst.w	r3, #3
    1938:	d1fb      	bne.n	1932 <_adc_init+0x11a>

	return ERR_NONE;
}
    193a:	2000      	movs	r0, #0
    193c:	4770      	bx	lr
    193e:	bf00      	nop
    1940:	00004434 	.word	0x00004434

00001944 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1944:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1948:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
		if (_adcs[i].number == n) {
    194c:	f3c0 2087 	ubfx	r0, r0, #10, #8
    1950:	b138      	cbz	r0, 1962 <_adc_get_regs+0x1e>
{
    1952:	b508      	push	{r3, lr}
	ASSERT(false);
    1954:	2288      	movs	r2, #136	; 0x88
    1956:	4904      	ldr	r1, [pc, #16]	; (1968 <_adc_get_regs+0x24>)
    1958:	2000      	movs	r0, #0
    195a:	4b04      	ldr	r3, [pc, #16]	; (196c <_adc_get_regs+0x28>)
    195c:	4798      	blx	r3
}
    195e:	2000      	movs	r0, #0
    1960:	bd08      	pop	{r3, pc}
    1962:	2000      	movs	r0, #0
    1964:	4770      	bx	lr
    1966:	bf00      	nop
    1968:	0000444c 	.word	0x0000444c
    196c:	00001771 	.word	0x00001771

00001970 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1970:	b538      	push	{r3, r4, r5, lr}
    1972:	460c      	mov	r4, r1
	ASSERT(device);
    1974:	4605      	mov	r5, r0
    1976:	22ce      	movs	r2, #206	; 0xce
    1978:	4907      	ldr	r1, [pc, #28]	; (1998 <_adc_sync_init+0x28>)
    197a:	3000      	adds	r0, #0
    197c:	bf18      	it	ne
    197e:	2001      	movne	r0, #1
    1980:	4b06      	ldr	r3, [pc, #24]	; (199c <_adc_sync_init+0x2c>)
    1982:	4798      	blx	r3

	device->hw = hw;
    1984:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1986:	4620      	mov	r0, r4
    1988:	4b05      	ldr	r3, [pc, #20]	; (19a0 <_adc_sync_init+0x30>)
    198a:	4798      	blx	r3
    198c:	4601      	mov	r1, r0
    198e:	4620      	mov	r0, r4
    1990:	4b04      	ldr	r3, [pc, #16]	; (19a4 <_adc_sync_init+0x34>)
    1992:	4798      	blx	r3
}
    1994:	bd38      	pop	{r3, r4, r5, pc}
    1996:	bf00      	nop
    1998:	0000444c 	.word	0x0000444c
    199c:	00001771 	.word	0x00001771
    19a0:	00001945 	.word	0x00001945
    19a4:	00001819 	.word	0x00001819

000019a8 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    19a8:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    19aa:	8813      	ldrh	r3, [r2, #0]
    19ac:	b29b      	uxth	r3, r3
    19ae:	f043 0302 	orr.w	r3, r3, #2
    19b2:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    19b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    19b6:	f013 0f03 	tst.w	r3, #3
    19ba:	d1fb      	bne.n	19b4 <_adc_sync_enable_channel+0xc>
}
    19bc:	4770      	bx	lr

000019be <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    19be:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    19c0:	88db      	ldrh	r3, [r3, #6]
    19c2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    19c6:	2b03      	cmp	r3, #3
}
    19c8:	bf0c      	ite	eq
    19ca:	2001      	moveq	r0, #1
    19cc:	2002      	movne	r0, #2
    19ce:	4770      	bx	lr

000019d0 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    19d0:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    19d2:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    19d6:	f000 0001 	and.w	r0, r0, #1
    19da:	4770      	bx	lr

000019dc <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    19dc:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    19de:	7d13      	ldrb	r3, [r2, #20]
    19e0:	f043 0302 	orr.w	r3, r3, #2
    19e4:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    19e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    19e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    19ec:	2b00      	cmp	r3, #0
    19ee:	d1fa      	bne.n	19e6 <_adc_sync_convert+0xa>
}
    19f0:	4770      	bx	lr

000019f2 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    19f2:	6803      	ldr	r3, [r0, #0]
	return ((Adc *)hw)->RESULT.reg;
    19f4:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    19f8:	b280      	uxth	r0, r0
    19fa:	4770      	bx	lr

000019fc <_adc_sync_set_inputs>:
/**
 * \brief Set channels input sources
 */
void _adc_sync_set_inputs(struct _adc_sync_device *const device, const adc_pos_input_t pos_input,
                          const adc_neg_input_t neg_input, const uint8_t channel)
{
    19fc:	b430      	push	{r4, r5}
	(void)channel;

	hri_adc_write_INPUTCTRL_MUXPOS_bf(device->hw, pos_input);
    19fe:	6804      	ldr	r4, [r0, #0]
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    1a00:	88a5      	ldrh	r5, [r4, #4]
	tmp &= ~ADC_INPUTCTRL_MUXPOS_Msk;
    1a02:	f025 051f 	bic.w	r5, r5, #31
    1a06:	042d      	lsls	r5, r5, #16
    1a08:	0c2d      	lsrs	r5, r5, #16
	tmp |= ADC_INPUTCTRL_MUXPOS(data);
    1a0a:	f001 011f 	and.w	r1, r1, #31
    1a0e:	430d      	orrs	r5, r1
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    1a10:	80a5      	strh	r5, [r4, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1a12:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d1fa      	bne.n	1a12 <_adc_sync_set_inputs+0x16>
	hri_adc_write_INPUTCTRL_MUXNEG_bf(device->hw, neg_input);
    1a1c:	6801      	ldr	r1, [r0, #0]
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    1a1e:	888b      	ldrh	r3, [r1, #4]
	tmp &= ~ADC_INPUTCTRL_MUXNEG_Msk;
    1a20:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    1a24:	041b      	lsls	r3, r3, #16
    1a26:	0c1b      	lsrs	r3, r3, #16
	tmp |= ADC_INPUTCTRL_MUXNEG(data);
    1a28:	0212      	lsls	r2, r2, #8
    1a2a:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
    1a2e:	4313      	orrs	r3, r2
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    1a30:	808b      	strh	r3, [r1, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1a32:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1a38:	2b00      	cmp	r3, #0
    1a3a:	d1fa      	bne.n	1a32 <_adc_sync_set_inputs+0x36>
}
    1a3c:	bc30      	pop	{r4, r5}
    1a3e:	4770      	bx	lr

00001a40 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1a40:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    1a44:	fb03 f000 	mul.w	r0, r3, r0
    1a48:	4770      	bx	lr
	...

00001a4c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1a4c:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1a4e:	4a11      	ldr	r2, [pc, #68]	; (1a94 <_init_chip+0x48>)
    1a50:	8813      	ldrh	r3, [r2, #0]
    1a52:	b29b      	uxth	r3, r3
    1a54:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1a56:	4b10      	ldr	r3, [pc, #64]	; (1a98 <_init_chip+0x4c>)
    1a58:	4798      	blx	r3
	_oscctrl_init_sources();
    1a5a:	4b10      	ldr	r3, [pc, #64]	; (1a9c <_init_chip+0x50>)
    1a5c:	4798      	blx	r3
	_mclk_init();
    1a5e:	4b10      	ldr	r3, [pc, #64]	; (1aa0 <_init_chip+0x54>)
    1a60:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1a62:	4b10      	ldr	r3, [pc, #64]	; (1aa4 <_init_chip+0x58>)
    1a64:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1a66:	f640 70ff 	movw	r0, #4095	; 0xfff
    1a6a:	4b0f      	ldr	r3, [pc, #60]	; (1aa8 <_init_chip+0x5c>)
    1a6c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    1a6e:	4b0f      	ldr	r3, [pc, #60]	; (1aac <_init_chip+0x60>)
    1a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1a72:	62da      	str	r2, [r3, #44]	; 0x2c
    1a74:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    1a78:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    1a7c:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    1a80:	f042 02ef 	orr.w	r2, r2, #239	; 0xef
    1a84:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    1a88:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    1a8c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    1a90:	bd08      	pop	{r3, pc}
    1a92:	bf00      	nop
    1a94:	41004000 	.word	0x41004000
    1a98:	00001b91 	.word	0x00001b91
    1a9c:	00001bb1 	.word	0x00001bb1
    1aa0:	00001b85 	.word	0x00001b85
    1aa4:	00001bcd 	.word	0x00001bcd
    1aa8:	00001b0d 	.word	0x00001b0d
    1aac:	41008000 	.word	0x41008000

00001ab0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1ab0:	b430      	push	{r4, r5}
    1ab2:	4814      	ldr	r0, [pc, #80]	; (1b04 <_event_system_init+0x54>)
    1ab4:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1ab8:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1aba:	4c13      	ldr	r4, [pc, #76]	; (1b08 <_event_system_init+0x58>)
    1abc:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    1abe:	f813 1b01 	ldrb.w	r1, [r3], #1
    1ac2:	3248      	adds	r2, #72	; 0x48
    1ac4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1ac8:	42ab      	cmp	r3, r5
    1aca:	d1f7      	bne.n	1abc <_event_system_init+0xc>
    1acc:	480d      	ldr	r0, [pc, #52]	; (1b04 <_event_system_init+0x54>)
    1ace:	f100 0442 	add.w	r4, r0, #66	; 0x42
    1ad2:	3080      	adds	r0, #128	; 0x80
    1ad4:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1ad6:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    1ada:	00ca      	lsls	r2, r1, #3
    1adc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1ae0:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1ae4:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1ae6:	f850 3f04 	ldr.w	r3, [r0, #4]!
    1aea:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1aec:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1af0:	43db      	mvns	r3, r3
    1af2:	b2db      	uxtb	r3, r3
    1af4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    1af8:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1afa:	2920      	cmp	r1, #32
    1afc:	d1eb      	bne.n	1ad6 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    1afe:	2000      	movs	r0, #0
    1b00:	bc30      	pop	{r4, r5}
    1b02:	4770      	bx	lr
    1b04:	00004464 	.word	0x00004464
    1b08:	4100e000 	.word	0x4100e000

00001b0c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1b0c:	f010 0f01 	tst.w	r0, #1
    1b10:	d008      	beq.n	1b24 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1b12:	4a17      	ldr	r2, [pc, #92]	; (1b70 <_gclk_init_generators_by_fref+0x64>)
    1b14:	4b17      	ldr	r3, [pc, #92]	; (1b74 <_gclk_init_generators_by_fref+0x68>)
    1b16:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b18:	4619      	mov	r1, r3
    1b1a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1b1e:	684b      	ldr	r3, [r1, #4]
    1b20:	4213      	tst	r3, r2
    1b22:	d1fc      	bne.n	1b1e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1b24:	f010 0f02 	tst.w	r0, #2
    1b28:	d008      	beq.n	1b3c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1b2a:	4a13      	ldr	r2, [pc, #76]	; (1b78 <_gclk_init_generators_by_fref+0x6c>)
    1b2c:	4b11      	ldr	r3, [pc, #68]	; (1b74 <_gclk_init_generators_by_fref+0x68>)
    1b2e:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b30:	4619      	mov	r1, r3
    1b32:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1b36:	684b      	ldr	r3, [r1, #4]
    1b38:	4213      	tst	r3, r2
    1b3a:	d1fc      	bne.n	1b36 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1b3c:	f010 0f08 	tst.w	r0, #8
    1b40:	d008      	beq.n	1b54 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1b42:	4a0e      	ldr	r2, [pc, #56]	; (1b7c <_gclk_init_generators_by_fref+0x70>)
    1b44:	4b0b      	ldr	r3, [pc, #44]	; (1b74 <_gclk_init_generators_by_fref+0x68>)
    1b46:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b48:	4619      	mov	r1, r3
    1b4a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1b4e:	684b      	ldr	r3, [r1, #4]
    1b50:	4213      	tst	r3, r2
    1b52:	d1fc      	bne.n	1b4e <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    1b54:	f010 0f10 	tst.w	r0, #16
    1b58:	d008      	beq.n	1b6c <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1b5a:	4a09      	ldr	r2, [pc, #36]	; (1b80 <_gclk_init_generators_by_fref+0x74>)
    1b5c:	4b05      	ldr	r3, [pc, #20]	; (1b74 <_gclk_init_generators_by_fref+0x68>)
    1b5e:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b60:	4619      	mov	r1, r3
    1b62:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1b66:	684b      	ldr	r3, [r1, #4]
    1b68:	4213      	tst	r3, r2
    1b6a:	d1fc      	bne.n	1b66 <_gclk_init_generators_by_fref+0x5a>
    1b6c:	4770      	bx	lr
    1b6e:	bf00      	nop
    1b70:	00010101 	.word	0x00010101
    1b74:	40001c00 	.word	0x40001c00
    1b78:	00040101 	.word	0x00040101
    1b7c:	00010105 	.word	0x00010105
    1b80:	00010106 	.word	0x00010106

00001b84 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1b84:	2201      	movs	r2, #1
    1b86:	4b01      	ldr	r3, [pc, #4]	; (1b8c <_mclk_init+0x8>)
    1b88:	715a      	strb	r2, [r3, #5]
    1b8a:	4770      	bx	lr
    1b8c:	40000800 	.word	0x40000800

00001b90 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1b90:	4b06      	ldr	r3, [pc, #24]	; (1bac <_osc32kctrl_init_sources+0x1c>)
    1b92:	f242 028e 	movw	r2, #8334	; 0x208e
    1b96:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1b98:	2200      	movs	r2, #0
    1b9a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1b9c:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1b9e:	69d9      	ldr	r1, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1ba0:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1ba4:	61d9      	str	r1, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1ba6:	741a      	strb	r2, [r3, #16]
    1ba8:	4770      	bx	lr
    1baa:	bf00      	nop
    1bac:	40001400 	.word	0x40001400

00001bb0 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1bb0:	4a04      	ldr	r2, [pc, #16]	; (1bc4 <_oscctrl_init_sources+0x14>)
    1bb2:	4b05      	ldr	r3, [pc, #20]	; (1bc8 <_oscctrl_init_sources+0x18>)
    1bb4:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1bb6:	461a      	mov	r2, r3
    1bb8:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1bba:	f013 0f02 	tst.w	r3, #2
    1bbe:	d0fb      	beq.n	1bb8 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1bc0:	4770      	bx	lr
    1bc2:	bf00      	nop
    1bc4:	03002606 	.word	0x03002606
    1bc8:	40001000 	.word	0x40001000

00001bcc <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1bcc:	4a36      	ldr	r2, [pc, #216]	; (1ca8 <_oscctrl_init_referenced_generators+0xdc>)
    1bce:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1bd0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1bd4:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1bd8:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bda:	4611      	mov	r1, r2
    1bdc:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1be0:	684b      	ldr	r3, [r1, #4]
    1be2:	4213      	tst	r3, r2
    1be4:	d1fc      	bne.n	1be0 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1be6:	4a30      	ldr	r2, [pc, #192]	; (1ca8 <_oscctrl_init_referenced_generators+0xdc>)
    1be8:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1bea:	f013 0f04 	tst.w	r3, #4
    1bee:	d1fb      	bne.n	1be8 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1bf0:	4b2e      	ldr	r3, [pc, #184]	; (1cac <_oscctrl_init_referenced_generators+0xe0>)
    1bf2:	2200      	movs	r2, #0
    1bf4:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1bf6:	4a2e      	ldr	r2, [pc, #184]	; (1cb0 <_oscctrl_init_referenced_generators+0xe4>)
    1bf8:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1bfa:	461a      	mov	r2, r3
    1bfc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1c00:	f013 0f10 	tst.w	r3, #16
    1c04:	d1fa      	bne.n	1bfc <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1c06:	2200      	movs	r2, #0
    1c08:	4b28      	ldr	r3, [pc, #160]	; (1cac <_oscctrl_init_referenced_generators+0xe0>)
    1c0a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c0e:	461a      	mov	r2, r3
    1c10:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1c14:	f013 0f04 	tst.w	r3, #4
    1c18:	d1fa      	bne.n	1c10 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1c1a:	2202      	movs	r2, #2
    1c1c:	4b23      	ldr	r3, [pc, #140]	; (1cac <_oscctrl_init_referenced_generators+0xe0>)
    1c1e:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c20:	461a      	mov	r2, r3
    1c22:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1c26:	f013 0f02 	tst.w	r3, #2
    1c2a:	d1fa      	bne.n	1c22 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1c2c:	4b1f      	ldr	r3, [pc, #124]	; (1cac <_oscctrl_init_referenced_generators+0xe0>)
    1c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1c30:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c32:	461a      	mov	r2, r3
    1c34:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1c38:	f013 0f08 	tst.w	r3, #8
    1c3c:	d1fa      	bne.n	1c34 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1c3e:	2219      	movs	r2, #25
    1c40:	4b1a      	ldr	r3, [pc, #104]	; (1cac <_oscctrl_init_referenced_generators+0xe0>)
    1c42:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c46:	461a      	mov	r2, r3
    1c48:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1c4c:	f013 0f04 	tst.w	r3, #4
    1c50:	d1fa      	bne.n	1c48 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1c52:	4b16      	ldr	r3, [pc, #88]	; (1cac <_oscctrl_init_referenced_generators+0xe0>)
    1c54:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1c58:	f013 0f01 	tst.w	r3, #1
    1c5c:	d01d      	beq.n	1c9a <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1c5e:	4a13      	ldr	r2, [pc, #76]	; (1cac <_oscctrl_init_referenced_generators+0xe0>)
    1c60:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1c62:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1c66:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1c6a:	d1f9      	bne.n	1c60 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1c6c:	4a0e      	ldr	r2, [pc, #56]	; (1ca8 <_oscctrl_init_referenced_generators+0xdc>)
    1c6e:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1c70:	2b00      	cmp	r3, #0
    1c72:	d1fc      	bne.n	1c6e <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1c74:	4a0c      	ldr	r2, [pc, #48]	; (1ca8 <_oscctrl_init_referenced_generators+0xdc>)
    1c76:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1c78:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1c7c:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1c80:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c82:	4611      	mov	r1, r2
    1c84:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1c88:	684b      	ldr	r3, [r1, #4]
    1c8a:	4213      	tst	r3, r2
    1c8c:	d1fc      	bne.n	1c88 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1c8e:	4a06      	ldr	r2, [pc, #24]	; (1ca8 <_oscctrl_init_referenced_generators+0xdc>)
    1c90:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1c92:	f013 0f04 	tst.w	r3, #4
    1c96:	d1fb      	bne.n	1c90 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    1c98:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1c9a:	4a04      	ldr	r2, [pc, #16]	; (1cac <_oscctrl_init_referenced_generators+0xe0>)
    1c9c:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1c9e:	f413 7f80 	tst.w	r3, #256	; 0x100
    1ca2:	d0fb      	beq.n	1c9c <_oscctrl_init_referenced_generators+0xd0>
    1ca4:	e7e2      	b.n	1c6c <_oscctrl_init_referenced_generators+0xa0>
    1ca6:	bf00      	nop
    1ca8:	40001c00 	.word	0x40001c00
    1cac:	40001000 	.word	0x40001000
    1cb0:	0401bb80 	.word	0x0401bb80

00001cb4 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    1cb4:	b538      	push	{r3, r4, r5, lr}
    1cb6:	460c      	mov	r4, r1
	ASSERT(dev);
    1cb8:	4605      	mov	r5, r0
    1cba:	2230      	movs	r2, #48	; 0x30
    1cbc:	4916      	ldr	r1, [pc, #88]	; (1d18 <_timer_init+0x64>)
    1cbe:	3000      	adds	r0, #0
    1cc0:	bf18      	it	ne
    1cc2:	2001      	movne	r0, #1
    1cc4:	4b15      	ldr	r3, [pc, #84]	; (1d1c <_timer_init+0x68>)
    1cc6:	4798      	blx	r3

	dev->hw = hw;
    1cc8:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1cca:	2301      	movs	r3, #1
    1ccc:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1cce:	f248 0203 	movw	r2, #32771	; 0x8003
    1cd2:	6923      	ldr	r3, [r4, #16]
    1cd4:	4213      	tst	r3, r2
    1cd6:	d1fc      	bne.n	1cd2 <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    1cd8:	68ea      	ldr	r2, [r5, #12]
    1cda:	6913      	ldr	r3, [r2, #16]
    1cdc:	f013 0f01 	tst.w	r3, #1
    1ce0:	d1fb      	bne.n	1cda <_timer_init+0x26>
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    1ce2:	2380      	movs	r3, #128	; 0x80
    1ce4:	6053      	str	r3, [r2, #4]
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    1ce6:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1ce8:	f248 1380 	movw	r3, #33152	; 0x8180
    1cec:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1cee:	f248 0103 	movw	r1, #32771	; 0x8003
    1cf2:	6913      	ldr	r3, [r2, #16]
    1cf4:	420b      	tst	r3, r1
    1cf6:	d1fc      	bne.n	1cf2 <_timer_init+0x3e>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    1cf8:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1cfe:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1d00:	6913      	ldr	r3, [r2, #16]
    1d02:	f013 0f60 	tst.w	r3, #96	; 0x60
    1d06:	d1fb      	bne.n	1d00 <_timer_init+0x4c>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    1d08:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
    1d0e:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    1d10:	4b03      	ldr	r3, [pc, #12]	; (1d20 <_timer_init+0x6c>)
    1d12:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    1d14:	2000      	movs	r0, #0
    1d16:	bd38      	pop	{r3, r4, r5, pc}
    1d18:	00004568 	.word	0x00004568
    1d1c:	00001771 	.word	0x00001771
    1d20:	20000534 	.word	0x20000534

00001d24 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    1d24:	2000      	movs	r0, #0
    1d26:	4770      	bx	lr

00001d28 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1d28:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    1d2a:	4b08      	ldr	r3, [pc, #32]	; (1d4c <RTC_Handler+0x24>)
    1d2c:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    1d2e:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1d30:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    1d32:	f413 7f80 	tst.w	r3, #256	; 0x100
    1d36:	d007      	beq.n	1d48 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    1d38:	6823      	ldr	r3, [r4, #0]
    1d3a:	b10b      	cbz	r3, 1d40 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    1d3c:	4620      	mov	r0, r4
    1d3e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1d40:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1d42:	f44f 7280 	mov.w	r2, #256	; 0x100
    1d46:	819a      	strh	r2, [r3, #12]
    1d48:	bd10      	pop	{r4, pc}
    1d4a:	bf00      	nop
    1d4c:	20000534 	.word	0x20000534

00001d50 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1d50:	b470      	push	{r4, r5, r6}
    1d52:	b089      	sub	sp, #36	; 0x24
    1d54:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1d56:	466c      	mov	r4, sp
    1d58:	4d0d      	ldr	r5, [pc, #52]	; (1d90 <_sercom_get_hardware_index+0x40>)
    1d5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1d5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1d5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1d66:	9b00      	ldr	r3, [sp, #0]
    1d68:	42b3      	cmp	r3, r6
    1d6a:	d00d      	beq.n	1d88 <_sercom_get_hardware_index+0x38>
    1d6c:	4631      	mov	r1, r6
    1d6e:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d70:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1d72:	f853 2b04 	ldr.w	r2, [r3], #4
    1d76:	428a      	cmp	r2, r1
    1d78:	d007      	beq.n	1d8a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d7a:	3001      	adds	r0, #1
    1d7c:	2808      	cmp	r0, #8
    1d7e:	d1f8      	bne.n	1d72 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1d80:	2000      	movs	r0, #0
}
    1d82:	b009      	add	sp, #36	; 0x24
    1d84:	bc70      	pop	{r4, r5, r6}
    1d86:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d88:	2000      	movs	r0, #0
			return i;
    1d8a:	b2c0      	uxtb	r0, r0
    1d8c:	e7f9      	b.n	1d82 <_sercom_get_hardware_index+0x32>
    1d8e:	bf00      	nop
    1d90:	00004580 	.word	0x00004580

00001d94 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1d94:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1d96:	4b03      	ldr	r3, [pc, #12]	; (1da4 <_sercom_get_irq_num+0x10>)
    1d98:	4798      	blx	r3
    1d9a:	0080      	lsls	r0, r0, #2
    1d9c:	302e      	adds	r0, #46	; 0x2e
}
    1d9e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1da2:	bd08      	pop	{r3, pc}
    1da4:	00001d51 	.word	0x00001d51

00001da8 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    1da8:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    1daa:	6802      	ldr	r2, [r0, #0]
	return tmp;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1dac:	7e11      	ldrb	r1, [r2, #24]
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    1dae:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    1db0:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    1db2:	f013 0f01 	tst.w	r3, #1
    1db6:	d109      	bne.n	1dcc <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    1db8:	f013 0f04 	tst.w	r3, #4
    1dbc:	d109      	bne.n	1dd2 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    1dbe:	f013 0f02 	tst.w	r3, #2
    1dc2:	d109      	bne.n	1dd8 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    1dc4:	f013 0f80 	tst.w	r3, #128	; 0x80
    1dc8:	d10b      	bne.n	1de2 <_spi_handler+0x3a>
    1dca:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    1dcc:	6883      	ldr	r3, [r0, #8]
    1dce:	4798      	blx	r3
    1dd0:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    1dd2:	68c3      	ldr	r3, [r0, #12]
    1dd4:	4798      	blx	r3
    1dd6:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1dd8:	2302      	movs	r3, #2
    1dda:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    1ddc:	6903      	ldr	r3, [r0, #16]
    1dde:	4798      	blx	r3
    1de0:	bd08      	pop	{r3, pc}
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1de2:	2304      	movs	r3, #4
    1de4:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1de6:	2380      	movs	r3, #128	; 0x80
    1de8:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    1dea:	6943      	ldr	r3, [r0, #20]
    1dec:	f06f 0112 	mvn.w	r1, #18
    1df0:	4798      	blx	r3
	}
}
    1df2:	e7ea      	b.n	1dca <_spi_handler+0x22>

00001df4 <SERCOM0_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_0_Handler(void)
{
    1df4:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    1df6:	4b02      	ldr	r3, [pc, #8]	; (1e00 <SERCOM0_0_Handler+0xc>)
    1df8:	6818      	ldr	r0, [r3, #0]
    1dfa:	4b02      	ldr	r3, [pc, #8]	; (1e04 <SERCOM0_0_Handler+0x10>)
    1dfc:	4798      	blx	r3
    1dfe:	bd08      	pop	{r3, pc}
    1e00:	20000538 	.word	0x20000538
    1e04:	00001da9 	.word	0x00001da9

00001e08 <SERCOM0_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_1_Handler(void)
{
    1e08:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    1e0a:	4b02      	ldr	r3, [pc, #8]	; (1e14 <SERCOM0_1_Handler+0xc>)
    1e0c:	6818      	ldr	r0, [r3, #0]
    1e0e:	4b02      	ldr	r3, [pc, #8]	; (1e18 <SERCOM0_1_Handler+0x10>)
    1e10:	4798      	blx	r3
    1e12:	bd08      	pop	{r3, pc}
    1e14:	20000538 	.word	0x20000538
    1e18:	00001da9 	.word	0x00001da9

00001e1c <SERCOM0_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_2_Handler(void)
{
    1e1c:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    1e1e:	4b02      	ldr	r3, [pc, #8]	; (1e28 <SERCOM0_2_Handler+0xc>)
    1e20:	6818      	ldr	r0, [r3, #0]
    1e22:	4b02      	ldr	r3, [pc, #8]	; (1e2c <SERCOM0_2_Handler+0x10>)
    1e24:	4798      	blx	r3
    1e26:	bd08      	pop	{r3, pc}
    1e28:	20000538 	.word	0x20000538
    1e2c:	00001da9 	.word	0x00001da9

00001e30 <SERCOM0_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
    1e30:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    1e32:	4b02      	ldr	r3, [pc, #8]	; (1e3c <SERCOM0_3_Handler+0xc>)
    1e34:	6818      	ldr	r0, [r3, #0]
    1e36:	4b02      	ldr	r3, [pc, #8]	; (1e40 <SERCOM0_3_Handler+0x10>)
    1e38:	4798      	blx	r3
    1e3a:	bd08      	pop	{r3, pc}
    1e3c:	20000538 	.word	0x20000538
    1e40:	00001da9 	.word	0x00001da9

00001e44 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1e44:	b570      	push	{r4, r5, r6, lr}
    1e46:	4606      	mov	r6, r0
    1e48:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1e4a:	4608      	mov	r0, r1
    1e4c:	4b5d      	ldr	r3, [pc, #372]	; (1fc4 <_spi_m_sync_init+0x180>)
    1e4e:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    1e50:	b168      	cbz	r0, 1e6e <_spi_m_sync_init+0x2a>
    1e52:	4603      	mov	r3, r0
    1e54:	2804      	cmp	r0, #4
    1e56:	bf08      	it	eq
    1e58:	2301      	moveq	r3, #1
    1e5a:	d009      	beq.n	1e70 <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1e5c:	2e00      	cmp	r6, #0
    1e5e:	f000 809f 	beq.w	1fa0 <_spi_m_sync_init+0x15c>
    1e62:	2c00      	cmp	r4, #0
    1e64:	f040 80a5 	bne.w	1fb2 <_spi_m_sync_init+0x16e>
	return NULL;
    1e68:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    1e6a:	2000      	movs	r0, #0
    1e6c:	e009      	b.n	1e82 <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    1e6e:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    1e70:	4d55      	ldr	r5, [pc, #340]	; (1fc8 <_spi_m_sync_init+0x184>)
    1e72:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    1e76:	441d      	add	r5, r3
	ASSERT(dev && hw);
    1e78:	2e00      	cmp	r6, #0
    1e7a:	d0f6      	beq.n	1e6a <_spi_m_sync_init+0x26>
    1e7c:	2001      	movs	r0, #1
    1e7e:	2c00      	cmp	r4, #0
    1e80:	d0f3      	beq.n	1e6a <_spi_m_sync_init+0x26>
    1e82:	f640 1279 	movw	r2, #2425	; 0x979
    1e86:	4951      	ldr	r1, [pc, #324]	; (1fcc <_spi_m_sync_init+0x188>)
    1e88:	4b51      	ldr	r3, [pc, #324]	; (1fd0 <_spi_m_sync_init+0x18c>)
    1e8a:	4798      	blx	r3

	if (regs == NULL) {
    1e8c:	2d00      	cmp	r5, #0
    1e8e:	f000 8084 	beq.w	1f9a <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1e92:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1e94:	f013 0f01 	tst.w	r3, #1
    1e98:	d11d      	bne.n	1ed6 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    1e9a:	682b      	ldr	r3, [r5, #0]
    1e9c:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ea0:	69e3      	ldr	r3, [r4, #28]
    1ea2:	f013 0f03 	tst.w	r3, #3
    1ea6:	d1fb      	bne.n	1ea0 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1ea8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1eaa:	f013 0f02 	tst.w	r3, #2
    1eae:	d00b      	beq.n	1ec8 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1eb0:	6823      	ldr	r3, [r4, #0]
    1eb2:	f023 0302 	bic.w	r3, r3, #2
    1eb6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1eb8:	69e3      	ldr	r3, [r4, #28]
    1eba:	f013 0f03 	tst.w	r3, #3
    1ebe:	d1fb      	bne.n	1eb8 <_spi_m_sync_init+0x74>
    1ec0:	69e3      	ldr	r3, [r4, #28]
    1ec2:	f013 0f02 	tst.w	r3, #2
    1ec6:	d1fb      	bne.n	1ec0 <_spi_m_sync_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    1ec8:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1ecc:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ece:	69e3      	ldr	r3, [r4, #28]
    1ed0:	f013 0f03 	tst.w	r3, #3
    1ed4:	d1fb      	bne.n	1ece <_spi_m_sync_init+0x8a>
    1ed6:	69e3      	ldr	r3, [r4, #28]
    1ed8:	f013 0f01 	tst.w	r3, #1
    1edc:	d1fb      	bne.n	1ed6 <_spi_m_sync_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1ede:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1ee0:	682b      	ldr	r3, [r5, #0]
    1ee2:	f003 031c 	and.w	r3, r3, #28
    1ee6:	2b08      	cmp	r3, #8
    1ee8:	d02e      	beq.n	1f48 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    1eea:	f640 120c 	movw	r2, #2316	; 0x90c
    1eee:	4937      	ldr	r1, [pc, #220]	; (1fcc <_spi_m_sync_init+0x188>)
    1ef0:	1c20      	adds	r0, r4, #0
    1ef2:	bf18      	it	ne
    1ef4:	2001      	movne	r0, #1
    1ef6:	4b36      	ldr	r3, [pc, #216]	; (1fd0 <_spi_m_sync_init+0x18c>)
    1ef8:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1efa:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    1efc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1f00:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1f04:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1f06:	69e3      	ldr	r3, [r4, #28]
    1f08:	f013 0f03 	tst.w	r3, #3
    1f0c:	d1fb      	bne.n	1f06 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    1f0e:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    1f10:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    1f14:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    1f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1f1c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1f1e:	69e3      	ldr	r3, [r4, #28]
    1f20:	f013 0f17 	tst.w	r3, #23
    1f24:	d1fb      	bne.n	1f1e <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1f26:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1f28:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1f2a:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1f2c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1f30:	686b      	ldr	r3, [r5, #4]
    1f32:	f003 0307 	and.w	r3, r3, #7
    1f36:	2b00      	cmp	r3, #0
    1f38:	bf0c      	ite	eq
    1f3a:	2301      	moveq	r3, #1
    1f3c:	2302      	movne	r3, #2
    1f3e:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    1f40:	89eb      	ldrh	r3, [r5, #14]
    1f42:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    1f44:	2000      	movs	r0, #0
    1f46:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    1f48:	f44f 6212 	mov.w	r2, #2336	; 0x920
    1f4c:	491f      	ldr	r1, [pc, #124]	; (1fcc <_spi_m_sync_init+0x188>)
    1f4e:	1c20      	adds	r0, r4, #0
    1f50:	bf18      	it	ne
    1f52:	2001      	movne	r0, #1
    1f54:	4b1e      	ldr	r3, [pc, #120]	; (1fd0 <_spi_m_sync_init+0x18c>)
    1f56:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1f58:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    1f5a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1f5e:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1f62:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1f64:	69e3      	ldr	r3, [r4, #28]
    1f66:	f013 0f03 	tst.w	r3, #3
    1f6a:	d1fb      	bne.n	1f64 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    1f6c:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    1f6e:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    1f72:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    1f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1f7a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1f7e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1f80:	69e3      	ldr	r3, [r4, #28]
    1f82:	f013 0f17 	tst.w	r3, #23
    1f86:	d1fb      	bne.n	1f80 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1f88:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1f8a:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1f8c:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1f8e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1f92:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    1f94:	2b00      	cmp	r3, #0
    1f96:	d1fc      	bne.n	1f92 <_spi_m_sync_init+0x14e>
    1f98:	e7ca      	b.n	1f30 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    1f9a:	f06f 000c 	mvn.w	r0, #12
    1f9e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    1fa0:	f640 1279 	movw	r2, #2425	; 0x979
    1fa4:	4909      	ldr	r1, [pc, #36]	; (1fcc <_spi_m_sync_init+0x188>)
    1fa6:	2000      	movs	r0, #0
    1fa8:	4b09      	ldr	r3, [pc, #36]	; (1fd0 <_spi_m_sync_init+0x18c>)
    1faa:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1fac:	f06f 000c 	mvn.w	r0, #12
    1fb0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    1fb2:	f640 1279 	movw	r2, #2425	; 0x979
    1fb6:	4905      	ldr	r1, [pc, #20]	; (1fcc <_spi_m_sync_init+0x188>)
    1fb8:	2001      	movs	r0, #1
    1fba:	4b05      	ldr	r3, [pc, #20]	; (1fd0 <_spi_m_sync_init+0x18c>)
    1fbc:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1fbe:	f06f 000c 	mvn.w	r0, #12
    1fc2:	bd70      	pop	{r4, r5, r6, pc}
    1fc4:	00001d51 	.word	0x00001d51
    1fc8:	000045b8 	.word	0x000045b8
    1fcc:	000045dc 	.word	0x000045dc
    1fd0:	00001771 	.word	0x00001771

00001fd4 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    1fd4:	b538      	push	{r3, r4, r5, lr}
    1fd6:	4604      	mov	r4, r0
    1fd8:	460d      	mov	r5, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    1fda:	4b15      	ldr	r3, [pc, #84]	; (2030 <_spi_m_async_init+0x5c>)
    1fdc:	4798      	blx	r3

	if (rc < 0) {
    1fde:	2800      	cmp	r0, #0
    1fe0:	db25      	blt.n	202e <_spi_m_async_init+0x5a>
	if (hw == SERCOM0) {
    1fe2:	4b14      	ldr	r3, [pc, #80]	; (2034 <_spi_m_async_init+0x60>)
    1fe4:	429d      	cmp	r5, r3
		_sercom0_dev = (struct _spi_async_dev *)dev;
    1fe6:	bf04      	itt	eq
    1fe8:	4b13      	ldreq	r3, [pc, #76]	; (2038 <_spi_m_async_init+0x64>)
    1fea:	601c      	streq	r4, [r3, #0]
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    1fec:	2300      	movs	r3, #0
    1fee:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    1ff0:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    1ff2:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    1ff4:	4628      	mov	r0, r5
    1ff6:	4b11      	ldr	r3, [pc, #68]	; (203c <_spi_m_async_init+0x68>)
    1ff8:	4798      	blx	r3
    1ffa:	1d01      	adds	r1, r0, #4
    1ffc:	b2c9      	uxtb	r1, r1
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ffe:	2401      	movs	r4, #1
    2000:	f000 021f 	and.w	r2, r0, #31
    2004:	fa04 f202 	lsl.w	r2, r4, r2
    2008:	0943      	lsrs	r3, r0, #5
    200a:	009b      	lsls	r3, r3, #2
    200c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2010:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2018:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    201c:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2020:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq);
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
		irq++;
    2024:	3001      	adds	r0, #1
    2026:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2028:	4281      	cmp	r1, r0
    202a:	d1e9      	bne.n	2000 <_spi_m_async_init+0x2c>
	}

	return ERR_NONE;
    202c:	2000      	movs	r0, #0
}
    202e:	bd38      	pop	{r3, r4, r5, pc}
    2030:	00001e45 	.word	0x00001e45
    2034:	40003000 	.word	0x40003000
    2038:	20000538 	.word	0x20000538
    203c:	00001d95 	.word	0x00001d95

00002040 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2044:	4681      	mov	r9, r0
    2046:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    2048:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    204a:	f8d1 8000 	ldr.w	r8, [r1]
    204e:	684d      	ldr	r5, [r1, #4]
    2050:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    2052:	b1a8      	cbz	r0, 2080 <_spi_m_sync_trans+0x40>
    2054:	1c20      	adds	r0, r4, #0
    2056:	bf18      	it	ne
    2058:	2001      	movne	r0, #1
    205a:	f640 22dd 	movw	r2, #2781	; 0xadd
    205e:	492e      	ldr	r1, [pc, #184]	; (2118 <_spi_m_sync_trans+0xd8>)
    2060:	4b2e      	ldr	r3, [pc, #184]	; (211c <_spi_m_sync_trans+0xdc>)
    2062:	4798      	blx	r3
    2064:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    2066:	f013 0f07 	tst.w	r3, #7
    206a:	d134      	bne.n	20d6 <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    206c:	69e0      	ldr	r0, [r4, #28]
    206e:	f010 0003 	ands.w	r0, r0, #3
    2072:	d1fb      	bne.n	206c <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2074:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    2076:	f013 0f02 	tst.w	r3, #2
    207a:	d030      	beq.n	20de <_spi_m_sync_trans+0x9e>
    207c:	4602      	mov	r2, r0
    207e:	e008      	b.n	2092 <_spi_m_sync_trans+0x52>
    2080:	2000      	movs	r0, #0
    2082:	e7ea      	b.n	205a <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    2084:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    2086:	f013 0f80 	tst.w	r3, #128	; 0x80
    208a:	d112      	bne.n	20b2 <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    208c:	68b3      	ldr	r3, [r6, #8]
    208e:	4283      	cmp	r3, r0
    2090:	d91e      	bls.n	20d0 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2092:	7e23      	ldrb	r3, [r4, #24]
    2094:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    2096:	f013 0f04 	tst.w	r3, #4
    209a:	d024      	beq.n	20e6 <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    209c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    209e:	2d00      	cmp	r5, #0
    20a0:	d0f0      	beq.n	2084 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    20a2:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    20a4:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    20a6:	bf91      	iteee	ls
    20a8:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    20aa:	0a09      	lsrhi	r1, r1, #8
    20ac:	7069      	strbhi	r1, [r5, #1]
    20ae:	3502      	addhi	r5, #2
    20b0:	e7e8      	b.n	2084 <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    20b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    20b6:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    20b8:	2380      	movs	r3, #128	; 0x80
    20ba:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    20bc:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    20c0:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    20c2:	f013 0f03 	tst.w	r3, #3
    20c6:	d0fb      	beq.n	20c0 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    20c8:	2303      	movs	r3, #3
    20ca:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    20cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    20d0:	4293      	cmp	r3, r2
    20d2:	d8de      	bhi.n	2092 <_spi_m_sync_trans+0x52>
    20d4:	e7f4      	b.n	20c0 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    20d6:	f06f 0003 	mvn.w	r0, #3
    20da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    20de:	f06f 0013 	mvn.w	r0, #19
    20e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    20e6:	4290      	cmp	r0, r2
    20e8:	d8cd      	bhi.n	2086 <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    20ea:	f013 0f01 	tst.w	r3, #1
    20ee:	d0ca      	beq.n	2086 <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    20f0:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    20f4:	f1b8 0f00 	cmp.w	r8, #0
    20f8:	d00b      	beq.n	2112 <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    20fa:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    20fe:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    2100:	bf91      	iteee	ls
    2102:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    2106:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    210a:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    210e:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    2112:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    2114:	62a1      	str	r1, [r4, #40]	; 0x28
    2116:	e7b6      	b.n	2086 <_spi_m_sync_trans+0x46>
    2118:	000045dc 	.word	0x000045dc
    211c:	00001771 	.word	0x00001771

00002120 <_spi_m_async_enable_tx>:
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    2120:	b538      	push	{r3, r4, r5, lr}
    2122:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    2124:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    2126:	b160      	cbz	r0, 2142 <_spi_m_async_enable_tx+0x22>
    2128:	1c20      	adds	r0, r4, #0
    212a:	bf18      	it	ne
    212c:	2001      	movne	r0, #1
    212e:	f640 3209 	movw	r2, #2825	; 0xb09
    2132:	4906      	ldr	r1, [pc, #24]	; (214c <_spi_m_async_enable_tx+0x2c>)
    2134:	4b06      	ldr	r3, [pc, #24]	; (2150 <_spi_m_async_enable_tx+0x30>)
    2136:	4798      	blx	r3

	if (state) {
    2138:	b92d      	cbnz	r5, 2146 <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    213a:	2301      	movs	r3, #1
    213c:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    213e:	2000      	movs	r0, #0
    2140:	bd38      	pop	{r3, r4, r5, pc}
    2142:	2000      	movs	r0, #0
    2144:	e7f3      	b.n	212e <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    2146:	2301      	movs	r3, #1
    2148:	75a3      	strb	r3, [r4, #22]
    214a:	e7f8      	b.n	213e <_spi_m_async_enable_tx+0x1e>
    214c:	000045dc 	.word	0x000045dc
    2150:	00001771 	.word	0x00001771

00002154 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    2154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2156:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    2158:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
    215a:	4e0c      	ldr	r6, [pc, #48]	; (218c <_spi_m_async_enable_rx+0x38>)
    215c:	f640 321d 	movw	r2, #2845	; 0xb1d
    2160:	4631      	mov	r1, r6
    2162:	3000      	adds	r0, #0
    2164:	bf18      	it	ne
    2166:	2001      	movne	r0, #1
    2168:	4d09      	ldr	r5, [pc, #36]	; (2190 <_spi_m_async_enable_rx+0x3c>)
    216a:	47a8      	blx	r5
	ASSERT(hw);
    216c:	f640 321e 	movw	r2, #2846	; 0xb1e
    2170:	4631      	mov	r1, r6
    2172:	1c20      	adds	r0, r4, #0
    2174:	bf18      	it	ne
    2176:	2001      	movne	r0, #1
    2178:	47a8      	blx	r5

	if (state) {
    217a:	b91f      	cbnz	r7, 2184 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    217c:	2304      	movs	r3, #4
    217e:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    2180:	2000      	movs	r0, #0
    2182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    2184:	2304      	movs	r3, #4
    2186:	75a3      	strb	r3, [r4, #22]
    2188:	e7fa      	b.n	2180 <_spi_m_async_enable_rx+0x2c>
    218a:	bf00      	nop
    218c:	000045dc 	.word	0x000045dc
    2190:	00001771 	.word	0x00001771

00002194 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    2194:	b538      	push	{r3, r4, r5, lr}
    2196:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    2198:	4604      	mov	r4, r0
    219a:	b170      	cbz	r0, 21ba <_spi_m_async_enable_tx_complete+0x26>
    219c:	6800      	ldr	r0, [r0, #0]
    219e:	3000      	adds	r0, #0
    21a0:	bf18      	it	ne
    21a2:	2001      	movne	r0, #1
    21a4:	f44f 6233 	mov.w	r2, #2864	; 0xb30
    21a8:	4907      	ldr	r1, [pc, #28]	; (21c8 <_spi_m_async_enable_tx_complete+0x34>)
    21aa:	4b08      	ldr	r3, [pc, #32]	; (21cc <_spi_m_async_enable_tx_complete+0x38>)
    21ac:	4798      	blx	r3

	if (state) {
    21ae:	b935      	cbnz	r5, 21be <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    21b0:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    21b2:	2202      	movs	r2, #2
    21b4:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    21b6:	2000      	movs	r0, #0
    21b8:	bd38      	pop	{r3, r4, r5, pc}
    21ba:	2000      	movs	r0, #0
    21bc:	e7f2      	b.n	21a4 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    21be:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    21c0:	2202      	movs	r2, #2
    21c2:	759a      	strb	r2, [r3, #22]
    21c4:	e7f7      	b.n	21b6 <_spi_m_async_enable_tx_complete+0x22>
    21c6:	bf00      	nop
    21c8:	000045dc 	.word	0x000045dc
    21cc:	00001771 	.word	0x00001771

000021d0 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    21d0:	b538      	push	{r3, r4, r5, lr}
    21d2:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    21d4:	4604      	mov	r4, r0
    21d6:	b160      	cbz	r0, 21f2 <_spi_m_async_write_one+0x22>
    21d8:	6800      	ldr	r0, [r0, #0]
    21da:	3000      	adds	r0, #0
    21dc:	bf18      	it	ne
    21de:	2001      	movne	r0, #1
    21e0:	f640 3242 	movw	r2, #2882	; 0xb42
    21e4:	4904      	ldr	r1, [pc, #16]	; (21f8 <_spi_m_async_write_one+0x28>)
    21e6:	4b05      	ldr	r3, [pc, #20]	; (21fc <_spi_m_async_write_one+0x2c>)
    21e8:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    21ea:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    21ec:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    21ee:	2000      	movs	r0, #0
    21f0:	bd38      	pop	{r3, r4, r5, pc}
    21f2:	2000      	movs	r0, #0
    21f4:	e7f4      	b.n	21e0 <_spi_m_async_write_one+0x10>
    21f6:	bf00      	nop
    21f8:	000045dc 	.word	0x000045dc
    21fc:	00001771 	.word	0x00001771

00002200 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    2200:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    2202:	4604      	mov	r4, r0
    2204:	b160      	cbz	r0, 2220 <_spi_m_async_read_one+0x20>
    2206:	6800      	ldr	r0, [r0, #0]
    2208:	3000      	adds	r0, #0
    220a:	bf18      	it	ne
    220c:	2001      	movne	r0, #1
    220e:	f640 325d 	movw	r2, #2909	; 0xb5d
    2212:	4904      	ldr	r1, [pc, #16]	; (2224 <_spi_m_async_read_one+0x24>)
    2214:	4b04      	ldr	r3, [pc, #16]	; (2228 <_spi_m_async_read_one+0x28>)
    2216:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    2218:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    221a:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    221c:	b280      	uxth	r0, r0
    221e:	bd10      	pop	{r4, pc}
    2220:	2000      	movs	r0, #0
    2222:	e7f4      	b.n	220e <_spi_m_async_read_one+0xe>
    2224:	000045dc 	.word	0x000045dc
    2228:	00001771 	.word	0x00001771

0000222c <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    222c:	b570      	push	{r4, r5, r6, lr}
    222e:	460d      	mov	r5, r1
    2230:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    2232:	4604      	mov	r4, r0
    2234:	b168      	cbz	r0, 2252 <_spi_m_async_register_callback+0x26>
    2236:	2903      	cmp	r1, #3
    2238:	bf8c      	ite	hi
    223a:	2000      	movhi	r0, #0
    223c:	2001      	movls	r0, #1
    223e:	f640 3276 	movw	r2, #2934	; 0xb76
    2242:	4905      	ldr	r1, [pc, #20]	; (2258 <_spi_m_async_register_callback+0x2c>)
    2244:	4b05      	ldr	r3, [pc, #20]	; (225c <_spi_m_async_register_callback+0x30>)
    2246:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    2248:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    224c:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    224e:	2000      	movs	r0, #0
    2250:	bd70      	pop	{r4, r5, r6, pc}
    2252:	2000      	movs	r0, #0
    2254:	e7f3      	b.n	223e <_spi_m_async_register_callback+0x12>
    2256:	bf00      	nop
    2258:	000045dc 	.word	0x000045dc
    225c:	00001771 	.word	0x00001771

00002260 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2260:	4b03      	ldr	r3, [pc, #12]	; (2270 <_delay_init+0x10>)
    2262:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2266:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2268:	2205      	movs	r2, #5
    226a:	601a      	str	r2, [r3, #0]
    226c:	4770      	bx	lr
    226e:	bf00      	nop
    2270:	e000e010 	.word	0xe000e010

00002274 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2274:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2276:	b303      	cbz	r3, 22ba <_delay_cycles+0x46>
{
    2278:	b430      	push	{r4, r5}
    227a:	1e5d      	subs	r5, r3, #1
    227c:	b2ed      	uxtb	r5, r5
	while (n--) {
    227e:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    2280:	4a12      	ldr	r2, [pc, #72]	; (22cc <_delay_cycles+0x58>)
    2282:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    2286:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    2288:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    228a:	6813      	ldr	r3, [r2, #0]
    228c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2290:	d0fb      	beq.n	228a <_delay_cycles+0x16>
	while (n--) {
    2292:	3801      	subs	r0, #1
    2294:	b2c0      	uxtb	r0, r0
    2296:	28ff      	cmp	r0, #255	; 0xff
    2298:	d1f5      	bne.n	2286 <_delay_cycles+0x12>
    229a:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    229e:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    22a2:	3101      	adds	r1, #1
    22a4:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    22a6:	4b09      	ldr	r3, [pc, #36]	; (22cc <_delay_cycles+0x58>)
    22a8:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    22aa:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    22ac:	461a      	mov	r2, r3
    22ae:	6813      	ldr	r3, [r2, #0]
    22b0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    22b4:	d0fb      	beq.n	22ae <_delay_cycles+0x3a>
		;
}
    22b6:	bc30      	pop	{r4, r5}
    22b8:	4770      	bx	lr
	SysTick->LOAD = buf;
    22ba:	4b04      	ldr	r3, [pc, #16]	; (22cc <_delay_cycles+0x58>)
    22bc:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    22be:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    22c0:	461a      	mov	r2, r3
    22c2:	6813      	ldr	r3, [r2, #0]
    22c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    22c8:	d0fb      	beq.n	22c2 <_delay_cycles+0x4e>
    22ca:	4770      	bx	lr
    22cc:	e000e010 	.word	0xe000e010

000022d0 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    22d0:	2000      	movs	r0, #0
    22d2:	4770      	bx	lr

000022d4 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    22d4:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    22d6:	7c83      	ldrb	r3, [r0, #18]
    22d8:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    22dc:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    22de:	f002 0107 	and.w	r1, r2, #7
    22e2:	2901      	cmp	r1, #1
    22e4:	d00b      	beq.n	22fe <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    22e6:	015a      	lsls	r2, r3, #5
    22e8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    22ec:	2110      	movs	r1, #16
    22ee:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    22f2:	015b      	lsls	r3, r3, #5
    22f4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    22f8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    22fc:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    22fe:	f012 0f40 	tst.w	r2, #64	; 0x40
    2302:	d00c      	beq.n	231e <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    2304:	7cc2      	ldrb	r2, [r0, #19]
    2306:	f36f 1286 	bfc	r2, #6, #1
    230a:	74c2      	strb	r2, [r0, #19]
    230c:	015a      	lsls	r2, r3, #5
    230e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2312:	2180      	movs	r1, #128	; 0x80
    2314:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2318:	2140      	movs	r1, #64	; 0x40
    231a:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    231e:	7cc2      	ldrb	r2, [r0, #19]
    2320:	f36f 02c3 	bfc	r2, #3, #1
    2324:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    2326:	4909      	ldr	r1, [pc, #36]	; (234c <_usb_d_dev_handle_setup+0x78>)
    2328:	015a      	lsls	r2, r3, #5
    232a:	188c      	adds	r4, r1, r2
    232c:	2500      	movs	r5, #0
    232e:	72a5      	strb	r5, [r4, #10]
    2330:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2332:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    2336:	246f      	movs	r4, #111	; 0x6f
    2338:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    233c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2340:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    2344:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    2346:	7c80      	ldrb	r0, [r0, #18]
    2348:	4798      	blx	r3
    234a:	bd38      	pop	{r3, r4, r5, pc}
    234c:	2000053c 	.word	0x2000053c

00002350 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    2350:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    2352:	2320      	movs	r3, #32
    2354:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2358:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    235a:	7c83      	ldrb	r3, [r0, #18]
    235c:	f003 030f 	and.w	r3, r3, #15
    2360:	015b      	lsls	r3, r3, #5
    2362:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2366:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    236a:	4b03      	ldr	r3, [pc, #12]	; (2378 <_usb_d_dev_handle_stall+0x28>)
    236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    236e:	6882      	ldr	r2, [r0, #8]
    2370:	2101      	movs	r1, #1
    2372:	7c80      	ldrb	r0, [r0, #18]
    2374:	4798      	blx	r3
    2376:	bd08      	pop	{r3, pc}
    2378:	2000053c 	.word	0x2000053c

0000237c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    237c:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    237e:	7c84      	ldrb	r4, [r0, #18]
    2380:	2cff      	cmp	r4, #255	; 0xff
    2382:	d003      	beq.n	238c <_usb_d_dev_trans_done+0x10>
    2384:	7cc3      	ldrb	r3, [r0, #19]
    2386:	f013 0f40 	tst.w	r3, #64	; 0x40
    238a:	d100      	bne.n	238e <_usb_d_dev_trans_done+0x12>
    238c:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    238e:	7cc2      	ldrb	r2, [r0, #19]
    2390:	f36f 1286 	bfc	r2, #6, #1
    2394:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    2396:	4a03      	ldr	r2, [pc, #12]	; (23a4 <_usb_d_dev_trans_done+0x28>)
    2398:	6f15      	ldr	r5, [r2, #112]	; 0x70
    239a:	6882      	ldr	r2, [r0, #8]
    239c:	4620      	mov	r0, r4
    239e:	47a8      	blx	r5
    23a0:	e7f4      	b.n	238c <_usb_d_dev_trans_done+0x10>
    23a2:	bf00      	nop
    23a4:	2000053c 	.word	0x2000053c

000023a8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    23a8:	b530      	push	{r4, r5, lr}
    23aa:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    23ac:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    23ae:	2425      	movs	r4, #37	; 0x25
    23b0:	f88d 4004 	strb.w	r4, [sp, #4]
    23b4:	244a      	movs	r4, #74	; 0x4a
    23b6:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    23ba:	2bff      	cmp	r3, #255	; 0xff
    23bc:	d01e      	beq.n	23fc <_usb_d_dev_trans_stop+0x54>
    23be:	7cc4      	ldrb	r4, [r0, #19]
    23c0:	f014 0f40 	tst.w	r4, #64	; 0x40
    23c4:	d01a      	beq.n	23fc <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    23c6:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    23ca:	b1c9      	cbz	r1, 2400 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    23cc:	0163      	lsls	r3, r4, #5
    23ce:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    23d2:	2580      	movs	r5, #128	; 0x80
    23d4:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    23d8:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    23da:	a902      	add	r1, sp, #8
    23dc:	440b      	add	r3, r1
    23de:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    23e2:	0163      	lsls	r3, r4, #5
    23e4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    23e8:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    23ec:	0163      	lsls	r3, r4, #5
    23ee:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    23f2:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    23f6:	4611      	mov	r1, r2
    23f8:	4b05      	ldr	r3, [pc, #20]	; (2410 <_usb_d_dev_trans_stop+0x68>)
    23fa:	4798      	blx	r3
}
    23fc:	b003      	add	sp, #12
    23fe:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2400:	0163      	lsls	r3, r4, #5
    2402:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2406:	2540      	movs	r5, #64	; 0x40
    2408:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    240c:	e7e4      	b.n	23d8 <_usb_d_dev_trans_stop+0x30>
    240e:	bf00      	nop
    2410:	0000237d 	.word	0x0000237d

00002414 <_usb_d_dev_handle_trfail>:
{
    2414:	b530      	push	{r4, r5, lr}
    2416:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    2418:	7c83      	ldrb	r3, [r0, #18]
    241a:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    241e:	2204      	movs	r2, #4
    2420:	f88d 2004 	strb.w	r2, [sp, #4]
    2424:	2208      	movs	r2, #8
    2426:	f88d 2005 	strb.w	r2, [sp, #5]
    242a:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    242c:	460c      	mov	r4, r1
    242e:	b391      	cbz	r1, 2496 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2430:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    2434:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    2438:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    243c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2440:	4a32      	ldr	r2, [pc, #200]	; (250c <_usb_d_dev_handle_trfail+0xf8>)
    2442:	440a      	add	r2, r1
    2444:	7a91      	ldrb	r1, [r2, #10]
    2446:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2448:	2d02      	cmp	r5, #2
    244a:	d02c      	beq.n	24a6 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    244c:	f011 0f02 	tst.w	r1, #2
    2450:	d045      	beq.n	24de <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2452:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    2454:	7a91      	ldrb	r1, [r2, #10]
    2456:	f36f 0141 	bfc	r1, #1, #1
    245a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    245c:	aa02      	add	r2, sp, #8
    245e:	4422      	add	r2, r4
    2460:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2464:	015a      	lsls	r2, r3, #5
    2466:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    246a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    246e:	015b      	lsls	r3, r3, #5
    2470:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2474:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    2478:	f005 0307 	and.w	r3, r5, #7
    247c:	2b01      	cmp	r3, #1
    247e:	d143      	bne.n	2508 <_usb_d_dev_handle_trfail+0xf4>
    2480:	7cc3      	ldrb	r3, [r0, #19]
    2482:	f013 0f40 	tst.w	r3, #64	; 0x40
    2486:	d03f      	beq.n	2508 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2488:	09d9      	lsrs	r1, r3, #7
    248a:	428c      	cmp	r4, r1
    248c:	d03c      	beq.n	2508 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    248e:	2200      	movs	r2, #0
    2490:	4b1f      	ldr	r3, [pc, #124]	; (2510 <_usb_d_dev_handle_trfail+0xfc>)
    2492:	4798      	blx	r3
    2494:	e038      	b.n	2508 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2496:	0159      	lsls	r1, r3, #5
    2498:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    249c:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    24a0:	f005 0507 	and.w	r5, r5, #7
    24a4:	e7ca      	b.n	243c <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    24a6:	f011 0f01 	tst.w	r1, #1
    24aa:	d0cf      	beq.n	244c <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    24ac:	7a91      	ldrb	r1, [r2, #10]
    24ae:	f36f 0100 	bfc	r1, #0, #1
    24b2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    24b4:	aa02      	add	r2, sp, #8
    24b6:	4422      	add	r2, r4
    24b8:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    24bc:	015a      	lsls	r2, r3, #5
    24be:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    24c2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    24c6:	015b      	lsls	r3, r3, #5
    24c8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    24cc:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    24d0:	2204      	movs	r2, #4
    24d2:	1c21      	adds	r1, r4, #0
    24d4:	bf18      	it	ne
    24d6:	2101      	movne	r1, #1
    24d8:	4b0d      	ldr	r3, [pc, #52]	; (2510 <_usb_d_dev_handle_trfail+0xfc>)
    24da:	4798      	blx	r3
    24dc:	e014      	b.n	2508 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    24de:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    24e2:	4a0a      	ldr	r2, [pc, #40]	; (250c <_usb_d_dev_handle_trfail+0xf8>)
    24e4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    24e8:	2100      	movs	r1, #0
    24ea:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    24ec:	aa02      	add	r2, sp, #8
    24ee:	4414      	add	r4, r2
    24f0:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    24f4:	015a      	lsls	r2, r3, #5
    24f6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    24fa:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    24fe:	015b      	lsls	r3, r3, #5
    2500:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2504:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    2508:	b003      	add	sp, #12
    250a:	bd30      	pop	{r4, r5, pc}
    250c:	2000053c 	.word	0x2000053c
    2510:	000023a9 	.word	0x000023a9

00002514 <_usb_d_dev_reset_epts>:
{
    2514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2518:	4d0c      	ldr	r5, [pc, #48]	; (254c <_usb_d_dev_reset_epts+0x38>)
    251a:	f105 0474 	add.w	r4, r5, #116	; 0x74
    251e:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2522:	f04f 0803 	mov.w	r8, #3
    2526:	4f0a      	ldr	r7, [pc, #40]	; (2550 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    2528:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    252a:	4641      	mov	r1, r8
    252c:	4620      	mov	r0, r4
    252e:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    2530:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    2532:	2300      	movs	r3, #0
    2534:	74e3      	strb	r3, [r4, #19]
    2536:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2538:	42ac      	cmp	r4, r5
    253a:	d1f6      	bne.n	252a <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    253c:	2260      	movs	r2, #96	; 0x60
    253e:	4619      	mov	r1, r3
    2540:	4802      	ldr	r0, [pc, #8]	; (254c <_usb_d_dev_reset_epts+0x38>)
    2542:	4b04      	ldr	r3, [pc, #16]	; (2554 <_usb_d_dev_reset_epts+0x40>)
    2544:	4798      	blx	r3
    2546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    254a:	bf00      	nop
    254c:	2000053c 	.word	0x2000053c
    2550:	0000237d 	.word	0x0000237d
    2554:	000041e9 	.word	0x000041e9

00002558 <_usb_d_dev_in_next>:
{
    2558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    255c:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    255e:	7c84      	ldrb	r4, [r0, #18]
    2560:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2564:	4688      	mov	r8, r1
    2566:	2900      	cmp	r1, #0
    2568:	f000 809f 	beq.w	26aa <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    256c:	4b58      	ldr	r3, [pc, #352]	; (26d0 <_usb_d_dev_in_next+0x178>)
    256e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2572:	6958      	ldr	r0, [r3, #20]
    2574:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2578:	8a2b      	ldrh	r3, [r5, #16]
    257a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    257e:	4293      	cmp	r3, r2
    2580:	f000 808d 	beq.w	269e <_usb_d_dev_in_next+0x146>
    2584:	3b01      	subs	r3, #1
    2586:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2588:	7cef      	ldrb	r7, [r5, #19]
    258a:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    258e:	f1b8 0f00 	cmp.w	r8, #0
    2592:	d005      	beq.n	25a0 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2594:	0162      	lsls	r2, r4, #5
    2596:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    259a:	2302      	movs	r3, #2
    259c:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    25a0:	68a9      	ldr	r1, [r5, #8]
    25a2:	eb0e 0301 	add.w	r3, lr, r1
    25a6:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    25a8:	686e      	ldr	r6, [r5, #4]
    25aa:	42b3      	cmp	r3, r6
    25ac:	d23f      	bcs.n	262e <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    25ae:	1af6      	subs	r6, r6, r3
    25b0:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    25b2:	7cea      	ldrb	r2, [r5, #19]
    25b4:	f012 0f20 	tst.w	r2, #32
    25b8:	d02d      	beq.n	2616 <_usb_d_dev_in_next+0xbe>
    25ba:	8a2a      	ldrh	r2, [r5, #16]
    25bc:	4296      	cmp	r6, r2
    25be:	bf28      	it	cs
    25c0:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    25c2:	6829      	ldr	r1, [r5, #0]
    25c4:	4632      	mov	r2, r6
    25c6:	4419      	add	r1, r3
    25c8:	68e8      	ldr	r0, [r5, #12]
    25ca:	4b42      	ldr	r3, [pc, #264]	; (26d4 <_usb_d_dev_in_next+0x17c>)
    25cc:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    25ce:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    25d0:	4b3f      	ldr	r3, [pc, #252]	; (26d0 <_usb_d_dev_in_next+0x178>)
    25d2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    25d6:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    25d8:	4b3d      	ldr	r3, [pc, #244]	; (26d0 <_usb_d_dev_in_next+0x178>)
    25da:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    25de:	695a      	ldr	r2, [r3, #20]
    25e0:	f366 020d 	bfi	r2, r6, #0, #14
    25e4:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    25e6:	695a      	ldr	r2, [r3, #20]
    25e8:	f36f 329b 	bfc	r2, #14, #14
    25ec:	615a      	str	r2, [r3, #20]
	if (!isr) {
    25ee:	f1b8 0f00 	cmp.w	r8, #0
    25f2:	d108      	bne.n	2606 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    25f4:	2f01      	cmp	r7, #1
    25f6:	bf0c      	ite	eq
    25f8:	224e      	moveq	r2, #78	; 0x4e
    25fa:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    25fc:	0163      	lsls	r3, r4, #5
    25fe:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2602:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2606:	0164      	lsls	r4, r4, #5
    2608:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    260c:	2380      	movs	r3, #128	; 0x80
    260e:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    2612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2616:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    261a:	bf28      	it	cs
    261c:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2620:	6829      	ldr	r1, [r5, #0]
    2622:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    2624:	4a2a      	ldr	r2, [pc, #168]	; (26d0 <_usb_d_dev_in_next+0x178>)
    2626:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    262a:	6113      	str	r3, [r2, #16]
    262c:	e7d4      	b.n	25d8 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    262e:	7ceb      	ldrb	r3, [r5, #19]
    2630:	f013 0f10 	tst.w	r3, #16
    2634:	d00f      	beq.n	2656 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    2636:	7ceb      	ldrb	r3, [r5, #19]
    2638:	f36f 1304 	bfc	r3, #4, #1
    263c:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    263e:	4b24      	ldr	r3, [pc, #144]	; (26d0 <_usb_d_dev_in_next+0x178>)
    2640:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2644:	695a      	ldr	r2, [r3, #20]
    2646:	f36f 020d 	bfc	r2, #0, #14
    264a:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    264c:	695a      	ldr	r2, [r3, #20]
    264e:	f36f 329b 	bfc	r2, #14, #14
    2652:	615a      	str	r2, [r3, #20]
    2654:	e7cb      	b.n	25ee <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    2656:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2658:	ea4f 1444 	mov.w	r4, r4, lsl #5
    265c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2660:	bf0c      	ite	eq
    2662:	234b      	moveq	r3, #75	; 0x4b
    2664:	234a      	movne	r3, #74	; 0x4a
    2666:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    266a:	8a2a      	ldrh	r2, [r5, #16]
    266c:	ea00 030e 	and.w	r3, r0, lr
    2670:	429a      	cmp	r2, r3
    2672:	d005      	beq.n	2680 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2674:	2100      	movs	r1, #0
    2676:	4628      	mov	r0, r5
    2678:	4b17      	ldr	r3, [pc, #92]	; (26d8 <_usb_d_dev_in_next+0x180>)
    267a:	4798      	blx	r3
	return;
    267c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    2680:	7ceb      	ldrb	r3, [r5, #19]
    2682:	f36f 1386 	bfc	r3, #6, #1
    2686:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2688:	4b11      	ldr	r3, [pc, #68]	; (26d0 <_usb_d_dev_in_next+0x178>)
    268a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    268c:	68a9      	ldr	r1, [r5, #8]
    268e:	7ca8      	ldrb	r0, [r5, #18]
    2690:	4798      	blx	r3
    2692:	b9d0      	cbnz	r0, 26ca <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    2694:	7ceb      	ldrb	r3, [r5, #19]
    2696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    269a:	74eb      	strb	r3, [r5, #19]
    269c:	e7ea      	b.n	2674 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    269e:	7cef      	ldrb	r7, [r5, #19]
    26a0:	f007 0707 	and.w	r7, r7, #7
    26a4:	f240 30ff 	movw	r0, #1023	; 0x3ff
    26a8:	e774      	b.n	2594 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    26aa:	8a03      	ldrh	r3, [r0, #16]
    26ac:	f240 32ff 	movw	r2, #1023	; 0x3ff
    26b0:	4293      	cmp	r3, r2
    26b2:	d107      	bne.n	26c4 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    26b4:	7cef      	ldrb	r7, [r5, #19]
    26b6:	f007 0707 	and.w	r7, r7, #7
    26ba:	f04f 0e00 	mov.w	lr, #0
    26be:	f240 30ff 	movw	r0, #1023	; 0x3ff
    26c2:	e76d      	b.n	25a0 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    26c4:	f04f 0e00 	mov.w	lr, #0
    26c8:	e75c      	b.n	2584 <_usb_d_dev_in_next+0x2c>
    26ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26ce:	bf00      	nop
    26d0:	2000053c 	.word	0x2000053c
    26d4:	000040b5 	.word	0x000040b5
    26d8:	0000237d 	.word	0x0000237d

000026dc <_usb_d_dev_out_next>:
{
    26dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26e0:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    26e2:	7c85      	ldrb	r5, [r0, #18]
    26e4:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    26e8:	4689      	mov	r9, r1
    26ea:	2900      	cmp	r1, #0
    26ec:	d056      	beq.n	279c <_usb_d_dev_out_next+0xc0>
    26ee:	4b74      	ldr	r3, [pc, #464]	; (28c0 <_usb_d_dev_out_next+0x1e4>)
    26f0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    26f4:	685a      	ldr	r2, [r3, #4]
    26f6:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    26fa:	685f      	ldr	r7, [r3, #4]
    26fc:	f3c7 070d 	ubfx	r7, r7, #0, #14
    2700:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2702:	8a06      	ldrh	r6, [r0, #16]
    2704:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2708:	429e      	cmp	r6, r3
    270a:	f000 80ba 	beq.w	2882 <_usb_d_dev_out_next+0x1a6>
    270e:	3e01      	subs	r6, #1
    2710:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    2712:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2716:	f894 8013 	ldrb.w	r8, [r4, #19]
    271a:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    271e:	f1b9 0f00 	cmp.w	r9, #0
    2722:	d005      	beq.n	2730 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2724:	016b      	lsls	r3, r5, #5
    2726:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    272a:	2201      	movs	r2, #1
    272c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    2730:	7ce3      	ldrb	r3, [r4, #19]
    2732:	f013 0f20 	tst.w	r3, #32
    2736:	d00d      	beq.n	2754 <_usb_d_dev_out_next+0x78>
    2738:	6862      	ldr	r2, [r4, #4]
    273a:	2a00      	cmp	r2, #0
    273c:	d037      	beq.n	27ae <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    273e:	68a0      	ldr	r0, [r4, #8]
    2740:	1a12      	subs	r2, r2, r0
    2742:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    2744:	6823      	ldr	r3, [r4, #0]
    2746:	42ba      	cmp	r2, r7
    2748:	bf28      	it	cs
    274a:	463a      	movcs	r2, r7
    274c:	68e1      	ldr	r1, [r4, #12]
    274e:	4418      	add	r0, r3
    2750:	4b5c      	ldr	r3, [pc, #368]	; (28c4 <_usb_d_dev_out_next+0x1e8>)
    2752:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2754:	6863      	ldr	r3, [r4, #4]
    2756:	b353      	cbz	r3, 27ae <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    2758:	f1b9 0f00 	cmp.w	r9, #0
    275c:	d040      	beq.n	27e0 <_usb_d_dev_out_next+0x104>
    275e:	8a22      	ldrh	r2, [r4, #16]
    2760:	42ba      	cmp	r2, r7
    2762:	d93d      	bls.n	27e0 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    2764:	7ce3      	ldrb	r3, [r4, #19]
    2766:	f36f 1304 	bfc	r3, #4, #1
    276a:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    276c:	68a3      	ldr	r3, [r4, #8]
    276e:	445b      	add	r3, fp
    2770:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    2772:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2776:	ea4f 1345 	mov.w	r3, r5, lsl #5
    277a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    277e:	bf0c      	ite	eq
    2780:	222d      	moveq	r2, #45	; 0x2d
    2782:	2225      	movne	r2, #37	; 0x25
    2784:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    2788:	b915      	cbnz	r5, 2790 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    278a:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    278c:	4b4c      	ldr	r3, [pc, #304]	; (28c0 <_usb_d_dev_out_next+0x1e4>)
    278e:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2790:	2100      	movs	r1, #0
    2792:	4620      	mov	r0, r4
    2794:	4b4c      	ldr	r3, [pc, #304]	; (28c8 <_usb_d_dev_out_next+0x1ec>)
    2796:	4798      	blx	r3
	return;
    2798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    279c:	8a06      	ldrh	r6, [r0, #16]
    279e:	f240 33ff 	movw	r3, #1023	; 0x3ff
    27a2:	429e      	cmp	r6, r3
    27a4:	d07b      	beq.n	289e <_usb_d_dev_out_next+0x1c2>
    27a6:	f04f 0b00 	mov.w	fp, #0
    27aa:	46da      	mov	sl, fp
    27ac:	e7af      	b.n	270e <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    27ae:	7ce3      	ldrb	r3, [r4, #19]
    27b0:	f013 0f10 	tst.w	r3, #16
    27b4:	d06c      	beq.n	2890 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    27b6:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    27b8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    27bc:	f043 0320 	orr.w	r3, r3, #32
    27c0:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    27c2:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    27c4:	493e      	ldr	r1, [pc, #248]	; (28c0 <_usb_d_dev_out_next+0x1e4>)
    27c6:	016a      	lsls	r2, r5, #5
    27c8:	188b      	adds	r3, r1, r2
    27ca:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    27cc:	8a21      	ldrh	r1, [r4, #16]
    27ce:	685a      	ldr	r2, [r3, #4]
    27d0:	f361 329b 	bfi	r2, r1, #14, #14
    27d4:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	f36f 020d 	bfc	r2, #0, #14
    27dc:	605a      	str	r2, [r3, #4]
    27de:	e01d      	b.n	281c <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    27e0:	68a2      	ldr	r2, [r4, #8]
    27e2:	4452      	add	r2, sl
    27e4:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    27e6:	4293      	cmp	r3, r2
    27e8:	d9c3      	bls.n	2772 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    27ea:	1a9b      	subs	r3, r3, r2
    27ec:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    27ee:	7ce1      	ldrb	r1, [r4, #19]
    27f0:	f011 0f20 	tst.w	r1, #32
    27f4:	d026      	beq.n	2844 <_usb_d_dev_out_next+0x168>
    27f6:	8a22      	ldrh	r2, [r4, #16]
    27f8:	4293      	cmp	r3, r2
    27fa:	bf28      	it	cs
    27fc:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    27fe:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2800:	016a      	lsls	r2, r5, #5
    2802:	492f      	ldr	r1, [pc, #188]	; (28c0 <_usb_d_dev_out_next+0x1e4>)
    2804:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2806:	4a2e      	ldr	r2, [pc, #184]	; (28c0 <_usb_d_dev_out_next+0x1e4>)
    2808:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    280c:	6851      	ldr	r1, [r2, #4]
    280e:	f363 319b 	bfi	r1, r3, #14, #14
    2812:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2814:	6853      	ldr	r3, [r2, #4]
    2816:	f36f 030d 	bfc	r3, #0, #14
    281a:	6053      	str	r3, [r2, #4]
	if (!isr) {
    281c:	f1b9 0f00 	cmp.w	r9, #0
    2820:	d108      	bne.n	2834 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    2822:	f1b8 0f01 	cmp.w	r8, #1
    2826:	d025      	beq.n	2874 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    2828:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    282a:	016b      	lsls	r3, r5, #5
    282c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2830:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2834:	016d      	lsls	r5, r5, #5
    2836:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    283a:	2340      	movs	r3, #64	; 0x40
    283c:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    2840:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    2844:	8a21      	ldrh	r1, [r4, #16]
    2846:	428b      	cmp	r3, r1
    2848:	d90a      	bls.n	2860 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    284a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    284e:	d80e      	bhi.n	286e <_usb_d_dev_out_next+0x192>
    2850:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2854:	6821      	ldr	r1, [r4, #0]
    2856:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    2858:	0169      	lsls	r1, r5, #5
    285a:	4819      	ldr	r0, [pc, #100]	; (28c0 <_usb_d_dev_out_next+0x1e4>)
    285c:	5042      	str	r2, [r0, r1]
    285e:	e7d2      	b.n	2806 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    2860:	428b      	cmp	r3, r1
    2862:	d2f7      	bcs.n	2854 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    2864:	7ce1      	ldrb	r1, [r4, #19]
    2866:	f041 0120 	orr.w	r1, r1, #32
    286a:	74e1      	strb	r1, [r4, #19]
    286c:	e7f2      	b.n	2854 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    286e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2872:	e7ef      	b.n	2854 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    2874:	4b12      	ldr	r3, [pc, #72]	; (28c0 <_usb_d_dev_out_next+0x1e4>)
    2876:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    287a:	2200      	movs	r2, #0
    287c:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    287e:	222d      	movs	r2, #45	; 0x2d
    2880:	e7d3      	b.n	282a <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    2882:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2886:	f890 8013 	ldrb.w	r8, [r0, #19]
    288a:	f008 0807 	and.w	r8, r8, #7
    288e:	e749      	b.n	2724 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    2890:	f1b9 0f00 	cmp.w	r9, #0
    2894:	d10b      	bne.n	28ae <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    2896:	68a3      	ldr	r3, [r4, #8]
    2898:	4453      	add	r3, sl
    289a:	60a3      	str	r3, [r4, #8]
    289c:	e769      	b.n	2772 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    289e:	f890 8013 	ldrb.w	r8, [r0, #19]
    28a2:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    28a6:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    28a8:	46bb      	mov	fp, r7
    28aa:	46ba      	mov	sl, r7
    28ac:	e740      	b.n	2730 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    28ae:	8a23      	ldrh	r3, [r4, #16]
    28b0:	42bb      	cmp	r3, r7
    28b2:	f63f af57 	bhi.w	2764 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    28b6:	68a3      	ldr	r3, [r4, #8]
    28b8:	4453      	add	r3, sl
    28ba:	60a3      	str	r3, [r4, #8]
    28bc:	e759      	b.n	2772 <_usb_d_dev_out_next+0x96>
    28be:	bf00      	nop
    28c0:	2000053c 	.word	0x2000053c
    28c4:	000040b5 	.word	0x000040b5
    28c8:	0000237d 	.word	0x0000237d

000028cc <_usb_d_dev_handler>:
{
    28cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    28d0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    28d4:	8c1e      	ldrh	r6, [r3, #32]
    28d6:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    28d8:	b146      	cbz	r6, 28ec <_usb_d_dev_handler+0x20>
    28da:	4d91      	ldr	r5, [pc, #580]	; (2b20 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    28dc:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    28de:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    28e2:	f8df 9258 	ldr.w	r9, [pc, #600]	; 2b3c <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    28e6:	f8df 8258 	ldr.w	r8, [pc, #600]	; 2b40 <_usb_d_dev_handler+0x274>
    28ea:	e0d3      	b.n	2a94 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    28ec:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    28ee:	8b1b      	ldrh	r3, [r3, #24]
    28f0:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    28f2:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    28f4:	f013 0f04 	tst.w	r3, #4
    28f8:	d11d      	bne.n	2936 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    28fa:	f413 7f00 	tst.w	r3, #512	; 0x200
    28fe:	d123      	bne.n	2948 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2900:	f013 0f80 	tst.w	r3, #128	; 0x80
    2904:	d147      	bne.n	2996 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    2906:	f013 0f70 	tst.w	r3, #112	; 0x70
    290a:	d14f      	bne.n	29ac <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    290c:	f013 0f08 	tst.w	r3, #8
    2910:	d16e      	bne.n	29f0 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    2912:	f013 0f01 	tst.w	r3, #1
    2916:	d0e0      	beq.n	28da <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2918:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    291c:	f240 2201 	movw	r2, #513	; 0x201
    2920:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2922:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2924:	2270      	movs	r2, #112	; 0x70
    2926:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2928:	4b7e      	ldr	r3, [pc, #504]	; (2b24 <_usb_d_dev_handler+0x258>)
    292a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    292c:	2100      	movs	r1, #0
    292e:	2004      	movs	r0, #4
    2930:	4798      	blx	r3
    2932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2936:	2204      	movs	r2, #4
    2938:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    293c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    293e:	4b79      	ldr	r3, [pc, #484]	; (2b24 <_usb_d_dev_handler+0x258>)
    2940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2942:	4798      	blx	r3
    2944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2948:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    294c:	f240 2201 	movw	r2, #513	; 0x201
    2950:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2952:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2954:	2270      	movs	r2, #112	; 0x70
    2956:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2958:	4b72      	ldr	r3, [pc, #456]	; (2b24 <_usb_d_dev_handler+0x258>)
    295a:	891b      	ldrh	r3, [r3, #8]
    295c:	f003 030f 	and.w	r3, r3, #15
    2960:	2b03      	cmp	r3, #3
    2962:	d00e      	beq.n	2982 <_usb_d_dev_handler+0xb6>
    2964:	4b6f      	ldr	r3, [pc, #444]	; (2b24 <_usb_d_dev_handler+0x258>)
    2966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2968:	f003 030f 	and.w	r3, r3, #15
    296c:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    296e:	bf08      	it	eq
    2970:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2972:	d007      	beq.n	2984 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    2974:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2976:	4b6b      	ldr	r3, [pc, #428]	; (2b24 <_usb_d_dev_handler+0x258>)
    2978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    297a:	2003      	movs	r0, #3
    297c:	4798      	blx	r3
    297e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2982:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2984:	4b67      	ldr	r3, [pc, #412]	; (2b24 <_usb_d_dev_handler+0x258>)
    2986:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    298a:	8919      	ldrh	r1, [r3, #8]
    298c:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    2990:	2200      	movs	r2, #0
    2992:	811a      	strh	r2, [r3, #8]
    2994:	e7ef      	b.n	2976 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2996:	2280      	movs	r2, #128	; 0x80
    2998:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    299c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    299e:	4b61      	ldr	r3, [pc, #388]	; (2b24 <_usb_d_dev_handler+0x258>)
    29a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    29a2:	2100      	movs	r1, #0
    29a4:	2005      	movs	r0, #5
    29a6:	4798      	blx	r3
    29a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    29ac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    29b0:	2270      	movs	r2, #112	; 0x70
    29b2:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    29b4:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    29b6:	f240 2201 	movw	r2, #513	; 0x201
    29ba:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    29bc:	4b5a      	ldr	r3, [pc, #360]	; (2b28 <_usb_d_dev_handler+0x25c>)
    29be:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    29c2:	f013 0f01 	tst.w	r3, #1
    29c6:	d00d      	beq.n	29e4 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    29c8:	4a57      	ldr	r2, [pc, #348]	; (2b28 <_usb_d_dev_handler+0x25c>)
    29ca:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    29cc:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    29d0:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    29d4:	d1f9      	bne.n	29ca <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    29d6:	4b53      	ldr	r3, [pc, #332]	; (2b24 <_usb_d_dev_handler+0x258>)
    29d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    29da:	2100      	movs	r1, #0
    29dc:	2002      	movs	r0, #2
    29de:	4798      	blx	r3
    29e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    29e4:	4a50      	ldr	r2, [pc, #320]	; (2b28 <_usb_d_dev_handler+0x25c>)
    29e6:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    29e8:	f413 7f80 	tst.w	r3, #256	; 0x100
    29ec:	d0fb      	beq.n	29e6 <_usb_d_dev_handler+0x11a>
    29ee:	e7f2      	b.n	29d6 <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    29f0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    29f4:	2400      	movs	r4, #0
    29f6:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    29fa:	2208      	movs	r2, #8
    29fc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    29fe:	2270      	movs	r2, #112	; 0x70
    2a00:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2a02:	f240 2201 	movw	r2, #513	; 0x201
    2a06:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    2a08:	4b48      	ldr	r3, [pc, #288]	; (2b2c <_usb_d_dev_handler+0x260>)
    2a0a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    2a0c:	4b45      	ldr	r3, [pc, #276]	; (2b24 <_usb_d_dev_handler+0x258>)
    2a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2a10:	4621      	mov	r1, r4
    2a12:	2001      	movs	r0, #1
    2a14:	4798      	blx	r3
    2a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2a1a:	f011 0f10 	tst.w	r1, #16
    2a1e:	d109      	bne.n	2a34 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2a20:	f011 0f40 	tst.w	r1, #64	; 0x40
    2a24:	d108      	bne.n	2a38 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2a26:	f011 0f20 	tst.w	r1, #32
    2a2a:	d02f      	beq.n	2a8c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    2a2c:	2100      	movs	r1, #0
    2a2e:	4b40      	ldr	r3, [pc, #256]	; (2b30 <_usb_d_dev_handler+0x264>)
    2a30:	4798      	blx	r3
    2a32:	e02b      	b.n	2a8c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    2a34:	47c8      	blx	r9
    2a36:	e029      	b.n	2a8c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    2a38:	2101      	movs	r1, #1
    2a3a:	4b3d      	ldr	r3, [pc, #244]	; (2b30 <_usb_d_dev_handler+0x264>)
    2a3c:	4798      	blx	r3
    2a3e:	e025      	b.n	2a8c <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2a40:	f011 0f40 	tst.w	r1, #64	; 0x40
    2a44:	d111      	bne.n	2a6a <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2a46:	f011 0f08 	tst.w	r1, #8
    2a4a:	d112      	bne.n	2a72 <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2a4c:	f011 0f02 	tst.w	r1, #2
    2a50:	d112      	bne.n	2a78 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2a52:	f003 0307 	and.w	r3, r3, #7
    2a56:	2b01      	cmp	r3, #1
    2a58:	d118      	bne.n	2a8c <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2a5a:	f011 0f04 	tst.w	r1, #4
    2a5e:	d10f      	bne.n	2a80 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2a60:	f011 0f10 	tst.w	r1, #16
    2a64:	d012      	beq.n	2a8c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    2a66:	47c8      	blx	r9
    2a68:	e010      	b.n	2a8c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    2a6a:	2101      	movs	r1, #1
    2a6c:	4b30      	ldr	r3, [pc, #192]	; (2b30 <_usb_d_dev_handler+0x264>)
    2a6e:	4798      	blx	r3
    2a70:	e00c      	b.n	2a8c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    2a72:	2101      	movs	r1, #1
    2a74:	47c0      	blx	r8
    2a76:	e009      	b.n	2a8c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    2a78:	2101      	movs	r1, #1
    2a7a:	4b2e      	ldr	r3, [pc, #184]	; (2b34 <_usb_d_dev_handler+0x268>)
    2a7c:	4798      	blx	r3
    2a7e:	e005      	b.n	2a8c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    2a80:	2100      	movs	r1, #0
    2a82:	47c0      	blx	r8
    2a84:	e002      	b.n	2a8c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    2a86:	2100      	movs	r1, #0
    2a88:	4b29      	ldr	r3, [pc, #164]	; (2b30 <_usb_d_dev_handler+0x264>)
    2a8a:	4798      	blx	r3
    2a8c:	3401      	adds	r4, #1
    2a8e:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2a90:	2c09      	cmp	r4, #9
    2a92:	d042      	beq.n	2b1a <_usb_d_dev_handler+0x24e>
    2a94:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    2a96:	7cab      	ldrb	r3, [r5, #18]
    2a98:	2bff      	cmp	r3, #255	; 0xff
    2a9a:	d0f7      	beq.n	2a8c <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    2a9c:	f003 030f 	and.w	r3, r3, #15
    2aa0:	2101      	movs	r1, #1
    2aa2:	4099      	lsls	r1, r3
    2aa4:	4231      	tst	r1, r6
    2aa6:	d0f1      	beq.n	2a8c <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2aa8:	0159      	lsls	r1, r3, #5
    2aaa:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2aae:	f501 7180 	add.w	r1, r1, #256	; 0x100
    2ab2:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2ab4:	015b      	lsls	r3, r3, #5
    2ab6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2aba:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    2abe:	4019      	ands	r1, r3
    2ac0:	d0e4      	beq.n	2a8c <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2ac2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    2ac6:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    2aca:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    2ace:	f003 0247 	and.w	r2, r3, #71	; 0x47
    2ad2:	2a01      	cmp	r2, #1
    2ad4:	d0a1      	beq.n	2a1a <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2ad6:	f013 0f80 	tst.w	r3, #128	; 0x80
    2ada:	d1b1      	bne.n	2a40 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2adc:	f011 0f20 	tst.w	r1, #32
    2ae0:	d1d1      	bne.n	2a86 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2ae2:	f011 0f04 	tst.w	r1, #4
    2ae6:	d10e      	bne.n	2b06 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2ae8:	f011 0f01 	tst.w	r1, #1
    2aec:	d10e      	bne.n	2b0c <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2aee:	f003 0307 	and.w	r3, r3, #7
    2af2:	2b01      	cmp	r3, #1
    2af4:	d1ca      	bne.n	2a8c <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2af6:	f011 0f08 	tst.w	r1, #8
    2afa:	d10b      	bne.n	2b14 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2afc:	f011 0f10 	tst.w	r1, #16
    2b00:	d0c4      	beq.n	2a8c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    2b02:	47c8      	blx	r9
    2b04:	e7c2      	b.n	2a8c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    2b06:	2100      	movs	r1, #0
    2b08:	47c0      	blx	r8
    2b0a:	e7bf      	b.n	2a8c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    2b0c:	2101      	movs	r1, #1
    2b0e:	4b0a      	ldr	r3, [pc, #40]	; (2b38 <_usb_d_dev_handler+0x26c>)
    2b10:	4798      	blx	r3
    2b12:	e7bb      	b.n	2a8c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    2b14:	2101      	movs	r1, #1
    2b16:	47c0      	blx	r8
    2b18:	e7b8      	b.n	2a8c <_usb_d_dev_handler+0x1c0>
    2b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2b1e:	bf00      	nop
    2b20:	200005b0 	.word	0x200005b0
    2b24:	2000053c 	.word	0x2000053c
    2b28:	40001000 	.word	0x40001000
    2b2c:	00002515 	.word	0x00002515
    2b30:	00002351 	.word	0x00002351
    2b34:	00002559 	.word	0x00002559
    2b38:	000026dd 	.word	0x000026dd
    2b3c:	000022d5 	.word	0x000022d5
    2b40:	00002415 	.word	0x00002415

00002b44 <_usb_d_dev_init>:
{
    2b44:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    2b46:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2b4a:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    2b4c:	f013 0f01 	tst.w	r3, #1
    2b50:	d124      	bne.n	2b9c <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2b52:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2b56:	7893      	ldrb	r3, [r2, #2]
    2b58:	f013 0f03 	tst.w	r3, #3
    2b5c:	d1fb      	bne.n	2b56 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    2b5e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2b62:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    2b64:	f013 0f02 	tst.w	r3, #2
    2b68:	d00f      	beq.n	2b8a <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    2b6a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2b6e:	7813      	ldrb	r3, [r2, #0]
    2b70:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2b74:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2b76:	7893      	ldrb	r3, [r2, #2]
    2b78:	f013 0f03 	tst.w	r3, #3
    2b7c:	d1fb      	bne.n	2b76 <_usb_d_dev_init+0x32>
    2b7e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2b82:	7893      	ldrb	r3, [r2, #2]
    2b84:	f013 0f02 	tst.w	r3, #2
    2b88:	d1fb      	bne.n	2b82 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2b8a:	2201      	movs	r2, #1
    2b8c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2b90:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2b92:	461a      	mov	r2, r3
    2b94:	7893      	ldrb	r3, [r2, #2]
    2b96:	f013 0f03 	tst.w	r3, #3
    2b9a:	d1fb      	bne.n	2b94 <_usb_d_dev_init+0x50>
    2b9c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2ba0:	7893      	ldrb	r3, [r2, #2]
    2ba2:	f013 0f01 	tst.w	r3, #1
    2ba6:	d1fb      	bne.n	2ba0 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2ba8:	4b21      	ldr	r3, [pc, #132]	; (2c30 <_usb_d_dev_init+0xec>)
    2baa:	4a22      	ldr	r2, [pc, #136]	; (2c34 <_usb_d_dev_init+0xf0>)
    2bac:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    2bae:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2bb0:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2bb2:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2bb4:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    2bb6:	4b20      	ldr	r3, [pc, #128]	; (2c38 <_usb_d_dev_init+0xf4>)
    2bb8:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    2bba:	4b20      	ldr	r3, [pc, #128]	; (2c3c <_usb_d_dev_init+0xf8>)
    2bbc:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    2bbe:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    2bc2:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    2bc6:	f011 011f 	ands.w	r1, r1, #31
    2bca:	d02b      	beq.n	2c24 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    2bcc:	291f      	cmp	r1, #31
    2bce:	bf08      	it	eq
    2bd0:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    2bd2:	b34b      	cbz	r3, 2c28 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    2bd4:	2b1f      	cmp	r3, #31
    2bd6:	bf08      	it	eq
    2bd8:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    2bda:	b33a      	cbz	r2, 2c2c <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    2bdc:	2a07      	cmp	r2, #7
    2bde:	bf08      	it	eq
    2be0:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    2be2:	f003 031f 	and.w	r3, r3, #31
    2be6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    2bea:	0312      	lsls	r2, r2, #12
    2bec:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    2bf0:	4313      	orrs	r3, r2
    2bf2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2bf6:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    2bf8:	78d3      	ldrb	r3, [r2, #3]
    2bfa:	f043 0303 	orr.w	r3, r3, #3
    2bfe:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    2c00:	78d3      	ldrb	r3, [r2, #3]
    2c02:	f043 030c 	orr.w	r3, r3, #12
    2c06:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2c08:	2304      	movs	r3, #4
    2c0a:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2c0c:	7893      	ldrb	r3, [r2, #2]
    2c0e:	f013 0f03 	tst.w	r3, #3
    2c12:	d1fb      	bne.n	2c0c <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    2c14:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2c18:	4a05      	ldr	r2, [pc, #20]	; (2c30 <_usb_d_dev_init+0xec>)
    2c1a:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    2c1c:	2201      	movs	r2, #1
    2c1e:	811a      	strh	r2, [r3, #8]
}
    2c20:	2000      	movs	r0, #0
    2c22:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    2c24:	2109      	movs	r1, #9
    2c26:	e7d4      	b.n	2bd2 <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    2c28:	2319      	movs	r3, #25
    2c2a:	e7d6      	b.n	2bda <_usb_d_dev_init+0x96>
		pad_trim = 6;
    2c2c:	2206      	movs	r2, #6
    2c2e:	e7d8      	b.n	2be2 <_usb_d_dev_init+0x9e>
    2c30:	2000053c 	.word	0x2000053c
    2c34:	000022d1 	.word	0x000022d1
    2c38:	00002515 	.word	0x00002515
    2c3c:	00800084 	.word	0x00800084

00002c40 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    2c40:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2c44:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    2c46:	f013 0f03 	tst.w	r3, #3
    2c4a:	d129      	bne.n	2ca0 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2c4c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2c50:	7893      	ldrb	r3, [r2, #2]
    2c52:	f013 0f03 	tst.w	r3, #3
    2c56:	d1fb      	bne.n	2c50 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    2c58:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2c5c:	781b      	ldrb	r3, [r3, #0]
    2c5e:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    2c60:	f013 0f02 	tst.w	r3, #2
    2c64:	d108      	bne.n	2c78 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    2c66:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2c6a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2c6e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2c70:	7893      	ldrb	r3, [r2, #2]
    2c72:	f013 0f03 	tst.w	r3, #3
    2c76:	d1fb      	bne.n	2c70 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c78:	4b0b      	ldr	r3, [pc, #44]	; (2ca8 <_usb_d_dev_enable+0x68>)
    2c7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2c7e:	609a      	str	r2, [r3, #8]
    2c80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2c84:	609a      	str	r2, [r3, #8]
    2c86:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    2c8a:	609a      	str	r2, [r3, #8]
    2c8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2c90:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2c92:	f240 228d 	movw	r2, #653	; 0x28d
    2c96:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2c9a:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    2c9c:	2000      	movs	r0, #0
    2c9e:	4770      	bx	lr
		return -USB_ERR_DENIED;
    2ca0:	f06f 0010 	mvn.w	r0, #16
}
    2ca4:	4770      	bx	lr
    2ca6:	bf00      	nop
    2ca8:	e000e100 	.word	0xe000e100

00002cac <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2cac:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2cb0:	8913      	ldrh	r3, [r2, #8]
    2cb2:	f023 0301 	bic.w	r3, r3, #1
    2cb6:	041b      	lsls	r3, r3, #16
    2cb8:	0c1b      	lsrs	r3, r3, #16
    2cba:	8113      	strh	r3, [r2, #8]
    2cbc:	4770      	bx	lr

00002cbe <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    2cbe:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    2cc2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2cc6:	7298      	strb	r0, [r3, #10]
    2cc8:	4770      	bx	lr
	...

00002ccc <_usb_d_dev_ep_init>:
{
    2ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cce:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2cd2:	f010 050f 	ands.w	r5, r0, #15
    2cd6:	d04d      	beq.n	2d74 <_usb_d_dev_ep_init+0xa8>
    2cd8:	f1be 0f00 	cmp.w	lr, #0
    2cdc:	bfb4      	ite	lt
    2cde:	1cac      	addlt	r4, r5, #2
    2ce0:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2ce2:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2ce6:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    2ce8:	2d02      	cmp	r5, #2
    2cea:	d947      	bls.n	2d7c <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    2cec:	f06f 0011 	mvn.w	r0, #17
    2cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2cf2:	f1be 0f00 	cmp.w	lr, #0
    2cf6:	db1b      	blt.n	2d30 <_usb_d_dev_ep_init+0x64>
    2cf8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2cfc:	4e37      	ldr	r6, [pc, #220]	; (2ddc <_usb_d_dev_ep_init+0x110>)
    2cfe:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    2d02:	2d00      	cmp	r5, #0
    2d04:	d15e      	bne.n	2dc4 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2d06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2d0a:	4d34      	ldr	r5, [pc, #208]	; (2ddc <_usb_d_dev_ep_init+0x110>)
    2d0c:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    2d10:	4d33      	ldr	r5, [pc, #204]	; (2de0 <_usb_d_dev_ep_init+0x114>)
    2d12:	00a6      	lsls	r6, r4, #2
    2d14:	1933      	adds	r3, r6, r4
    2d16:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    2d1a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    2d1e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    2d22:	3101      	adds	r1, #1
    2d24:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    2d28:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    2d2c:	2000      	movs	r0, #0
    2d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2d30:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2d34:	4e29      	ldr	r6, [pc, #164]	; (2ddc <_usb_d_dev_ep_init+0x110>)
    2d36:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2d3a:	686d      	ldr	r5, [r5, #4]
    2d3c:	b935      	cbnz	r5, 2d4c <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2d3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2d42:	4d26      	ldr	r5, [pc, #152]	; (2ddc <_usb_d_dev_ep_init+0x110>)
    2d44:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    2d48:	685f      	ldr	r7, [r3, #4]
    2d4a:	e7e1      	b.n	2d10 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2d4c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2d50:	4e22      	ldr	r6, [pc, #136]	; (2ddc <_usb_d_dev_ep_init+0x110>)
    2d52:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2d56:	896d      	ldrh	r5, [r5, #10]
    2d58:	4295      	cmp	r5, r2
    2d5a:	daf0      	bge.n	2d3e <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    2d5c:	f06f 0012 	mvn.w	r0, #18
    2d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    2d62:	f06f 0013 	mvn.w	r0, #19
    2d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2d68:	f06f 0013 	mvn.w	r0, #19
    2d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    2d6e:	f06f 0012 	mvn.w	r0, #18
    2d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2d74:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    2d78:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2d7a:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    2d7c:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    2d80:	4f17      	ldr	r7, [pc, #92]	; (2de0 <_usb_d_dev_ep_init+0x114>)
    2d82:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    2d86:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    2d8a:	2eff      	cmp	r6, #255	; 0xff
    2d8c:	d1e9      	bne.n	2d62 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    2d8e:	2900      	cmp	r1, #0
    2d90:	d1af      	bne.n	2cf2 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2d92:	b125      	cbz	r5, 2d9e <_usb_d_dev_ep_init+0xd2>
    2d94:	f1be 0f00 	cmp.w	lr, #0
    2d98:	bfa4      	itt	ge
    2d9a:	3502      	addge	r5, #2
    2d9c:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    2d9e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2da2:	4e0f      	ldr	r6, [pc, #60]	; (2de0 <_usb_d_dev_ep_init+0x114>)
    2da4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2da8:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    2dac:	2dff      	cmp	r5, #255	; 0xff
    2dae:	d1db      	bne.n	2d68 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    2db0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2db4:	4e09      	ldr	r6, [pc, #36]	; (2ddc <_usb_d_dev_ep_init+0x110>)
    2db6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    2dba:	2d00      	cmp	r5, #0
    2dbc:	d0d7      	beq.n	2d6e <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2dbe:	f1be 0f00 	cmp.w	lr, #0
    2dc2:	dbb5      	blt.n	2d30 <_usb_d_dev_ep_init+0x64>
    2dc4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2dc8:	4e04      	ldr	r6, [pc, #16]	; (2ddc <_usb_d_dev_ep_init+0x110>)
    2dca:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2dce:	892d      	ldrh	r5, [r5, #8]
    2dd0:	4295      	cmp	r5, r2
    2dd2:	da98      	bge.n	2d06 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    2dd4:	f06f 0012 	mvn.w	r0, #18
    2dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dda:	bf00      	nop
    2ddc:	000045f8 	.word	0x000045f8
    2de0:	2000053c 	.word	0x2000053c

00002de4 <_usb_d_dev_ep_deinit>:
{
    2de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2de6:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2de8:	f010 060f 	ands.w	r6, r0, #15
    2dec:	d00e      	beq.n	2e0c <_usb_d_dev_ep_deinit+0x28>
    2dee:	2f00      	cmp	r7, #0
    2df0:	bfb4      	ite	lt
    2df2:	1cb3      	addlt	r3, r6, #2
    2df4:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2df6:	2e02      	cmp	r6, #2
    2df8:	d900      	bls.n	2dfc <_usb_d_dev_ep_deinit+0x18>
    2dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    2dfc:	461d      	mov	r5, r3
    2dfe:	3301      	adds	r3, #1
    2e00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2e04:	4a24      	ldr	r2, [pc, #144]	; (2e98 <_usb_d_dev_ep_deinit+0xb4>)
    2e06:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    2e0a:	e002      	b.n	2e12 <_usb_d_dev_ep_deinit+0x2e>
    2e0c:	f8df e094 	ldr.w	lr, [pc, #148]	; 2ea4 <_usb_d_dev_ep_deinit+0xc0>
    2e10:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2e12:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e16:	4a21      	ldr	r2, [pc, #132]	; (2e9c <_usb_d_dev_ep_deinit+0xb8>)
    2e18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e1c:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    2e20:	2aff      	cmp	r2, #255	; 0xff
    2e22:	d0ea      	beq.n	2dfa <_usb_d_dev_ep_deinit+0x16>
    2e24:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    2e26:	2203      	movs	r2, #3
    2e28:	0ff9      	lsrs	r1, r7, #31
    2e2a:	4670      	mov	r0, lr
    2e2c:	4b1c      	ldr	r3, [pc, #112]	; (2ea0 <_usb_d_dev_ep_deinit+0xbc>)
    2e2e:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2e30:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e34:	4a19      	ldr	r2, [pc, #100]	; (2e9c <_usb_d_dev_ep_deinit+0xb8>)
    2e36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e3a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2e3e:	f003 0307 	and.w	r3, r3, #7
    2e42:	2b01      	cmp	r3, #1
    2e44:	d016      	beq.n	2e74 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    2e46:	2f00      	cmp	r7, #0
    2e48:	db1b      	blt.n	2e82 <_usb_d_dev_ep_deinit+0x9e>
    2e4a:	0160      	lsls	r0, r4, #5
    2e4c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    2e50:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    2e54:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    2e58:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    2e5c:	4b0f      	ldr	r3, [pc, #60]	; (2e9c <_usb_d_dev_ep_deinit+0xb8>)
    2e5e:	00aa      	lsls	r2, r5, #2
    2e60:	1951      	adds	r1, r2, r5
    2e62:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2e66:	2000      	movs	r0, #0
    2e68:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    2e6c:	22ff      	movs	r2, #255	; 0xff
    2e6e:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    2e72:	e7c2      	b.n	2dfa <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    2e74:	0160      	lsls	r0, r4, #5
    2e76:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2e7a:	2300      	movs	r3, #0
    2e7c:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    2e80:	e7ec      	b.n	2e5c <_usb_d_dev_ep_deinit+0x78>
    2e82:	0176      	lsls	r6, r6, #5
    2e84:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    2e88:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    2e8c:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    2e90:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    2e94:	e7e2      	b.n	2e5c <_usb_d_dev_ep_deinit+0x78>
    2e96:	bf00      	nop
    2e98:	2000059c 	.word	0x2000059c
    2e9c:	2000053c 	.word	0x2000053c
    2ea0:	000023a9 	.word	0x000023a9
    2ea4:	200005b0 	.word	0x200005b0

00002ea8 <_usb_d_dev_ep_enable>:
{
    2ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eaa:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2eac:	f010 000f 	ands.w	r0, r0, #15
    2eb0:	f000 80a6 	beq.w	3000 <_usb_d_dev_ep_enable+0x158>
    2eb4:	2f00      	cmp	r7, #0
    2eb6:	bfb4      	ite	lt
    2eb8:	1c83      	addlt	r3, r0, #2
    2eba:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2ebc:	4606      	mov	r6, r0
    2ebe:	0142      	lsls	r2, r0, #5
    2ec0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2ec4:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    2ec8:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2eca:	2802      	cmp	r0, #2
    2ecc:	f240 809f 	bls.w	300e <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    2ed0:	f06f 0011 	mvn.w	r0, #17
    2ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    2ed6:	f014 0f77 	tst.w	r4, #119	; 0x77
    2eda:	f040 8088 	bne.w	2fee <_usb_d_dev_ep_enable+0x146>
    2ede:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2ee2:	2111      	movs	r1, #17
    2ee4:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2ee8:	4c97      	ldr	r4, [pc, #604]	; (3148 <_usb_d_dev_ep_enable+0x2a0>)
    2eea:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    2eee:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    2ef2:	4996      	ldr	r1, [pc, #600]	; (314c <_usb_d_dev_ep_enable+0x2a4>)
    2ef4:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2ef8:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    2efc:	f200 80cc 	bhi.w	3098 <_usb_d_dev_ep_enable+0x1f0>
    2f00:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    2f04:	f200 810a 	bhi.w	311c <_usb_d_dev_ep_enable+0x274>
    2f08:	2c80      	cmp	r4, #128	; 0x80
    2f0a:	f200 80f9 	bhi.w	3100 <_usb_d_dev_ep_enable+0x258>
    2f0e:	2c40      	cmp	r4, #64	; 0x40
    2f10:	f200 810b 	bhi.w	312a <_usb_d_dev_ep_enable+0x282>
    2f14:	2c20      	cmp	r4, #32
    2f16:	f200 80fa 	bhi.w	310e <_usb_d_dev_ep_enable+0x266>
    2f1a:	2c10      	cmp	r4, #16
    2f1c:	f200 810c 	bhi.w	3138 <_usb_d_dev_ep_enable+0x290>
    2f20:	2c08      	cmp	r4, #8
    2f22:	bf94      	ite	ls
    2f24:	2700      	movls	r7, #0
    2f26:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f28:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2f2c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f2e:	f3c4 010d 	ubfx	r1, r4, #0, #14
    2f32:	e0b7      	b.n	30a4 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2f34:	f014 0f70 	tst.w	r4, #112	; 0x70
    2f38:	d15c      	bne.n	2ff4 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    2f3a:	4d83      	ldr	r5, [pc, #524]	; (3148 <_usb_d_dev_ep_enable+0x2a0>)
    2f3c:	009f      	lsls	r7, r3, #2
    2f3e:	18f9      	adds	r1, r7, r3
    2f40:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    2f44:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    2f48:	0109      	lsls	r1, r1, #4
    2f4a:	f001 0170 	and.w	r1, r1, #112	; 0x70
    2f4e:	430c      	orrs	r4, r1
    2f50:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2f54:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f58:	443b      	add	r3, r7
    2f5a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2f5e:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    2f62:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2f6a:	d80f      	bhi.n	2f8c <_usb_d_dev_ep_enable+0xe4>
    2f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2f70:	d819      	bhi.n	2fa6 <_usb_d_dev_ep_enable+0xfe>
    2f72:	2b80      	cmp	r3, #128	; 0x80
    2f74:	d819      	bhi.n	2faa <_usb_d_dev_ep_enable+0x102>
    2f76:	2b40      	cmp	r3, #64	; 0x40
    2f78:	d819      	bhi.n	2fae <_usb_d_dev_ep_enable+0x106>
    2f7a:	2b20      	cmp	r3, #32
    2f7c:	d819      	bhi.n	2fb2 <_usb_d_dev_ep_enable+0x10a>
    2f7e:	2b10      	cmp	r3, #16
    2f80:	d819      	bhi.n	2fb6 <_usb_d_dev_ep_enable+0x10e>
    2f82:	2b08      	cmp	r3, #8
    2f84:	bf94      	ite	ls
    2f86:	2300      	movls	r3, #0
    2f88:	2301      	movhi	r3, #1
    2f8a:	e000      	b.n	2f8e <_usb_d_dev_ep_enable+0xe6>
    2f8c:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f8e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    2f92:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2f94:	2380      	movs	r3, #128	; 0x80
    2f96:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    2f9a:	4b6b      	ldr	r3, [pc, #428]	; (3148 <_usb_d_dev_ep_enable+0x2a0>)
    2f9c:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2fa0:	2000      	movs	r0, #0
    2fa2:	76b0      	strb	r0, [r6, #26]
    2fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2fa6:	2306      	movs	r3, #6
    2fa8:	e7f1      	b.n	2f8e <_usb_d_dev_ep_enable+0xe6>
    2faa:	2305      	movs	r3, #5
    2fac:	e7ef      	b.n	2f8e <_usb_d_dev_ep_enable+0xe6>
    2fae:	2304      	movs	r3, #4
    2fb0:	e7ed      	b.n	2f8e <_usb_d_dev_ep_enable+0xe6>
    2fb2:	2303      	movs	r3, #3
    2fb4:	e7eb      	b.n	2f8e <_usb_d_dev_ep_enable+0xe6>
    2fb6:	2302      	movs	r3, #2
    2fb8:	e7e9      	b.n	2f8e <_usb_d_dev_ep_enable+0xe6>
    2fba:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2fbc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2fc0:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2fc2:	2340      	movs	r3, #64	; 0x40
    2fc4:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    2fc8:	4b5f      	ldr	r3, [pc, #380]	; (3148 <_usb_d_dev_ep_enable+0x2a0>)
    2fca:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2fce:	2000      	movs	r0, #0
    2fd0:	72b0      	strb	r0, [r6, #10]
    2fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2fd4:	2106      	movs	r1, #6
    2fd6:	e7f1      	b.n	2fbc <_usb_d_dev_ep_enable+0x114>
    2fd8:	2105      	movs	r1, #5
    2fda:	e7ef      	b.n	2fbc <_usb_d_dev_ep_enable+0x114>
    2fdc:	2104      	movs	r1, #4
    2fde:	e7ed      	b.n	2fbc <_usb_d_dev_ep_enable+0x114>
    2fe0:	2103      	movs	r1, #3
    2fe2:	e7eb      	b.n	2fbc <_usb_d_dev_ep_enable+0x114>
    2fe4:	2102      	movs	r1, #2
    2fe6:	e7e9      	b.n	2fbc <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    2fe8:	f06f 0011 	mvn.w	r0, #17
    2fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2fee:	f06f 0013 	mvn.w	r0, #19
    2ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2ff4:	f06f 0013 	mvn.w	r0, #19
    2ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2ffa:	f06f 0013 	mvn.w	r0, #19
    2ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3000:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3004:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    3008:	b2e4      	uxtb	r4, r4
    300a:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    300c:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    300e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3012:	494d      	ldr	r1, [pc, #308]	; (3148 <_usb_d_dev_ep_enable+0x2a0>)
    3014:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3018:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    301c:	2dff      	cmp	r5, #255	; 0xff
    301e:	d0e3      	beq.n	2fe8 <_usb_d_dev_ep_enable+0x140>
    3020:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    3022:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    3024:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    3028:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    302c:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    3030:	f001 0107 	and.w	r1, r1, #7
    3034:	2901      	cmp	r1, #1
    3036:	f43f af4e 	beq.w	2ed6 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    303a:	2f00      	cmp	r7, #0
    303c:	f6ff af7a 	blt.w	2f34 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    3040:	f014 0f07 	tst.w	r4, #7
    3044:	d1d9      	bne.n	2ffa <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    3046:	4d40      	ldr	r5, [pc, #256]	; (3148 <_usb_d_dev_ep_enable+0x2a0>)
    3048:	009f      	lsls	r7, r3, #2
    304a:	18f9      	adds	r1, r7, r3
    304c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    3050:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    3054:	f001 0107 	and.w	r1, r1, #7
    3058:	430c      	orrs	r4, r1
    305a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    305e:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3062:	443b      	add	r3, r7
    3064:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3068:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    306c:	4b37      	ldr	r3, [pc, #220]	; (314c <_usb_d_dev_ep_enable+0x2a4>)
    306e:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3072:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3076:	d8a0      	bhi.n	2fba <_usb_d_dev_ep_enable+0x112>
    3078:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    307c:	d8aa      	bhi.n	2fd4 <_usb_d_dev_ep_enable+0x12c>
    307e:	2980      	cmp	r1, #128	; 0x80
    3080:	d8aa      	bhi.n	2fd8 <_usb_d_dev_ep_enable+0x130>
    3082:	2940      	cmp	r1, #64	; 0x40
    3084:	d8aa      	bhi.n	2fdc <_usb_d_dev_ep_enable+0x134>
    3086:	2920      	cmp	r1, #32
    3088:	d8aa      	bhi.n	2fe0 <_usb_d_dev_ep_enable+0x138>
    308a:	2910      	cmp	r1, #16
    308c:	d8aa      	bhi.n	2fe4 <_usb_d_dev_ep_enable+0x13c>
    308e:	2908      	cmp	r1, #8
    3090:	bf94      	ite	ls
    3092:	2100      	movls	r1, #0
    3094:	2101      	movhi	r1, #1
    3096:	e791      	b.n	2fbc <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3098:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    309c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    309e:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    30a2:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    30a4:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    30a8:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    30aa:	2140      	movs	r1, #64	; 0x40
    30ac:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    30b0:	2080      	movs	r0, #128	; 0x80
    30b2:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    30b6:	4a24      	ldr	r2, [pc, #144]	; (3148 <_usb_d_dev_ep_enable+0x2a0>)
    30b8:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    30bc:	2000      	movs	r0, #0
    30be:	72b0      	strb	r0, [r6, #10]
    30c0:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    30c2:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    30c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    30ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    30ce:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    30d2:	016d      	lsls	r5, r5, #5
    30d4:	1953      	adds	r3, r2, r5
    30d6:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    30d8:	685a      	ldr	r2, [r3, #4]
    30da:	f364 329b 	bfi	r2, r4, #14, #14
    30de:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    30e0:	685a      	ldr	r2, [r3, #4]
    30e2:	f360 020d 	bfi	r2, r0, #0, #14
    30e6:	605a      	str	r2, [r3, #4]
    30e8:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    30ec:	22b0      	movs	r2, #176	; 0xb0
    30ee:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    30f2:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    30f6:	461d      	mov	r5, r3
    30f8:	2310      	movs	r3, #16
    30fa:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    30fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3100:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3104:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3106:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    310a:	2705      	movs	r7, #5
    310c:	e7ca      	b.n	30a4 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    310e:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3112:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3114:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3118:	2703      	movs	r7, #3
    311a:	e7c3      	b.n	30a4 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    311c:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3120:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3122:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3126:	2706      	movs	r7, #6
    3128:	e7bc      	b.n	30a4 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    312a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    312e:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3130:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3134:	2704      	movs	r7, #4
    3136:	e7b5      	b.n	30a4 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3138:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    313c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    313e:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3142:	2702      	movs	r7, #2
    3144:	e7ae      	b.n	30a4 <_usb_d_dev_ep_enable+0x1fc>
    3146:	bf00      	nop
    3148:	2000053c 	.word	0x2000053c
    314c:	0fffc000 	.word	0x0fffc000

00003150 <_usb_d_dev_ep_stall>:
{
    3150:	b470      	push	{r4, r5, r6}
    3152:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    3154:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3156:	f010 000f 	ands.w	r0, r0, #15
    315a:	d008      	beq.n	316e <_usb_d_dev_ep_stall+0x1e>
    315c:	2b00      	cmp	r3, #0
    315e:	bfb4      	ite	lt
    3160:	1c83      	addlt	r3, r0, #2
    3162:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    3164:	2802      	cmp	r0, #2
    3166:	d903      	bls.n	3170 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    3168:	f06f 0011 	mvn.w	r0, #17
    316c:	e018      	b.n	31a0 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    316e:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    3170:	2901      	cmp	r1, #1
    3172:	d017      	beq.n	31a4 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    3174:	2900      	cmp	r1, #0
    3176:	d03a      	beq.n	31ee <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3178:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    317c:	4a45      	ldr	r2, [pc, #276]	; (3294 <_usb_d_dev_ep_stall+0x144>)
    317e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3182:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3186:	f003 030f 	and.w	r3, r3, #15
    318a:	015b      	lsls	r3, r3, #5
    318c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3190:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3194:	2310      	movs	r3, #16
    3196:	40a3      	lsls	r3, r4
    3198:	421a      	tst	r2, r3
    319a:	bf14      	ite	ne
    319c:	2001      	movne	r0, #1
    319e:	2000      	moveq	r0, #0
}
    31a0:	bc70      	pop	{r4, r5, r6}
    31a2:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    31a4:	2510      	movs	r5, #16
    31a6:	40a5      	lsls	r5, r4
    31a8:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    31aa:	493a      	ldr	r1, [pc, #232]	; (3294 <_usb_d_dev_ep_stall+0x144>)
    31ac:	009e      	lsls	r6, r3, #2
    31ae:	18f2      	adds	r2, r6, r3
    31b0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    31b4:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    31b8:	f002 020f 	and.w	r2, r2, #15
    31bc:	0150      	lsls	r0, r2, #5
    31be:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    31c2:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    31c6:	2020      	movs	r0, #32
    31c8:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    31cc:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    31ce:	0152      	lsls	r2, r2, #5
    31d0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    31d4:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    31d8:	4433      	add	r3, r6
    31da:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    31de:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    31e2:	f042 0208 	orr.w	r2, r2, #8
    31e6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    31ea:	2000      	movs	r0, #0
    31ec:	e7d8      	b.n	31a0 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    31ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    31f2:	4928      	ldr	r1, [pc, #160]	; (3294 <_usb_d_dev_ep_stall+0x144>)
    31f4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    31f8:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    31fc:	f002 020f 	and.w	r2, r2, #15
    3200:	0151      	lsls	r1, r2, #5
    3202:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3206:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    320a:	2010      	movs	r0, #16
    320c:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    320e:	4205      	tst	r5, r0
    3210:	d03c      	beq.n	328c <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3212:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3214:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3218:	2020      	movs	r0, #32
    321a:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    321c:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    321e:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3222:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    3226:	4202      	tst	r2, r0
    3228:	d007      	beq.n	323a <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    322a:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    322e:	2201      	movs	r2, #1
    3230:	fa02 f404 	lsl.w	r4, r2, r4
    3234:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3236:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    323a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    323e:	4815      	ldr	r0, [pc, #84]	; (3294 <_usb_d_dev_ep_stall+0x144>)
    3240:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3244:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    3248:	f002 0207 	and.w	r2, r2, #7
    324c:	2a01      	cmp	r2, #1
    324e:	d00c      	beq.n	326a <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    3250:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3254:	4a0f      	ldr	r2, [pc, #60]	; (3294 <_usb_d_dev_ep_stall+0x144>)
    3256:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    325a:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    325e:	f36f 02c3 	bfc	r2, #3, #1
    3262:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3266:	2000      	movs	r0, #0
    3268:	e79a      	b.n	31a0 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    326a:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    326e:	f012 0f30 	tst.w	r2, #48	; 0x30
    3272:	d10d      	bne.n	3290 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    3274:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3278:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    327c:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    3280:	f36f 02c3 	bfc	r2, #3, #1
    3284:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3288:	2000      	movs	r0, #0
    328a:	e789      	b.n	31a0 <_usb_d_dev_ep_stall+0x50>
    328c:	2000      	movs	r0, #0
    328e:	e787      	b.n	31a0 <_usb_d_dev_ep_stall+0x50>
    3290:	2000      	movs	r0, #0
    3292:	e785      	b.n	31a0 <_usb_d_dev_ep_stall+0x50>
    3294:	2000053c 	.word	0x2000053c

00003298 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    3298:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    329a:	f000 040f 	and.w	r4, r0, #15
    329e:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    32a0:	4a14      	ldr	r2, [pc, #80]	; (32f4 <_usb_d_dev_ep_read_req+0x5c>)
    32a2:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    32a4:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    32a6:	6840      	ldr	r0, [r0, #4]
    32a8:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    32ac:	2c02      	cmp	r4, #2
    32ae:	d817      	bhi.n	32e0 <_usb_d_dev_ep_read_req+0x48>
    32b0:	b1c9      	cbz	r1, 32e6 <_usb_d_dev_ep_read_req+0x4e>
    32b2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    32b6:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    32ba:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    32bc:	2a11      	cmp	r2, #17
    32be:	d115      	bne.n	32ec <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    32c0:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    32c4:	f012 0f10 	tst.w	r2, #16
    32c8:	d102      	bne.n	32d0 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    32ca:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    32cc:	bc30      	pop	{r4, r5}
    32ce:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    32d0:	682c      	ldr	r4, [r5, #0]
    32d2:	686a      	ldr	r2, [r5, #4]
    32d4:	600c      	str	r4, [r1, #0]
    32d6:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    32d8:	2210      	movs	r2, #16
    32da:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    32de:	e7f5      	b.n	32cc <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    32e0:	f06f 0011 	mvn.w	r0, #17
    32e4:	e7f2      	b.n	32cc <_usb_d_dev_ep_read_req+0x34>
    32e6:	f06f 0011 	mvn.w	r0, #17
    32ea:	e7ef      	b.n	32cc <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    32ec:	f06f 0012 	mvn.w	r0, #18
    32f0:	e7ec      	b.n	32cc <_usb_d_dev_ep_read_req+0x34>
    32f2:	bf00      	nop
    32f4:	2000053c 	.word	0x2000053c

000032f8 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    32f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32fc:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    32fe:	7a03      	ldrb	r3, [r0, #8]
    3300:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3302:	f013 030f 	ands.w	r3, r3, #15
    3306:	f000 80c2 	beq.w	348e <_usb_d_dev_ep_trans+0x196>
    330a:	2e00      	cmp	r6, #0
    330c:	bfb4      	ite	lt
    330e:	1c9a      	addlt	r2, r3, #2
    3310:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    3312:	4614      	mov	r4, r2
    3314:	4969      	ldr	r1, [pc, #420]	; (34bc <_usb_d_dev_ep_trans+0x1c4>)
    3316:	f101 0760 	add.w	r7, r1, #96	; 0x60
    331a:	1c55      	adds	r5, r2, #1
    331c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3320:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3324:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3328:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    332c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    3330:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3334:	428a      	cmp	r2, r1
    3336:	d025      	beq.n	3384 <_usb_d_dev_ep_trans+0x8c>
    3338:	1e55      	subs	r5, r2, #1
    333a:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    333c:	6841      	ldr	r1, [r0, #4]
    333e:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    3340:	2b02      	cmp	r3, #2
    3342:	f200 8092 	bhi.w	346a <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    3346:	6803      	ldr	r3, [r0, #0]
    3348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    334c:	d31c      	bcc.n	3388 <_usb_d_dev_ep_trans+0x90>
    334e:	eb03 0c01 	add.w	ip, r3, r1
    3352:	f8df e180 	ldr.w	lr, [pc, #384]	; 34d4 <_usb_d_dev_ep_trans+0x1dc>
    3356:	45f4      	cmp	ip, lr
    3358:	d816      	bhi.n	3388 <_usb_d_dev_ep_trans+0x90>
    335a:	f013 0f03 	tst.w	r3, #3
    335e:	d113      	bne.n	3388 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    3360:	2e00      	cmp	r6, #0
    3362:	db2a      	blt.n	33ba <_usb_d_dev_ep_trans+0xc2>
    3364:	428a      	cmp	r2, r1
    3366:	f200 809c 	bhi.w	34a2 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    336a:	b34d      	cbz	r5, 33c0 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    336c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3370:	4a52      	ldr	r2, [pc, #328]	; (34bc <_usb_d_dev_ep_trans+0x1c4>)
    3372:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    337a:	2b00      	cmp	r3, #0
    337c:	d07b      	beq.n	3476 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    337e:	f04f 0800 	mov.w	r8, #0
    3382:	e00c      	b.n	339e <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3384:	4615      	mov	r5, r2
    3386:	e7d9      	b.n	333c <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    3388:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    338c:	4a4b      	ldr	r2, [pc, #300]	; (34bc <_usb_d_dev_ep_trans+0x1c4>)
    338e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3396:	2b00      	cmp	r3, #0
    3398:	d06a      	beq.n	3470 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    339a:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    339e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    33a2:	4a46      	ldr	r2, [pc, #280]	; (34bc <_usb_d_dev_ep_trans+0x1c4>)
    33a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    33a8:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    33ac:	f013 0f08 	tst.w	r3, #8
    33b0:	d009      	beq.n	33c6 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    33b2:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    33b4:	b003      	add	sp, #12
    33b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    33ba:	f04f 0800 	mov.w	r8, #0
    33be:	e7ee      	b.n	339e <_usb_d_dev_ep_trans+0xa6>
    33c0:	f04f 0800 	mov.w	r8, #0
    33c4:	e7eb      	b.n	339e <_usb_d_dev_ep_trans+0xa6>
    33c6:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    33c8:	a801      	add	r0, sp, #4
    33ca:	4b3d      	ldr	r3, [pc, #244]	; (34c0 <_usb_d_dev_ep_trans+0x1c8>)
    33cc:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    33ce:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    33d2:	4a3a      	ldr	r2, [pc, #232]	; (34bc <_usb_d_dev_ep_trans+0x1c4>)
    33d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    33d8:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    33dc:	f013 0f40 	tst.w	r3, #64	; 0x40
    33e0:	d13c      	bne.n	345c <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    33e2:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    33e6:	4b35      	ldr	r3, [pc, #212]	; (34bc <_usb_d_dev_ep_trans+0x1c4>)
    33e8:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    33ec:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    33f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    33f4:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    33f8:	a801      	add	r0, sp, #4
    33fa:	4b32      	ldr	r3, [pc, #200]	; (34c4 <_usb_d_dev_ep_trans+0x1cc>)
    33fc:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    33fe:	f8da 3000 	ldr.w	r3, [sl]
    3402:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    3406:	f8da 3004 	ldr.w	r3, [sl, #4]
    340a:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    340e:	2300      	movs	r3, #0
    3410:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    3414:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    3416:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    341a:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    341e:	f368 1345 	bfi	r3, r8, #5, #1
    3422:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3426:	f89a 3009 	ldrb.w	r3, [sl, #9]
    342a:	b1e3      	cbz	r3, 3466 <_usb_d_dev_ep_trans+0x16e>
    342c:	fab5 f585 	clz	r5, r5
    3430:	096d      	lsrs	r5, r5, #5
    3432:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3436:	4b21      	ldr	r3, [pc, #132]	; (34bc <_usb_d_dev_ep_trans+0x1c4>)
    3438:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    343c:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    3440:	f365 1304 	bfi	r3, r5, #4, #1
    3444:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    3448:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    344a:	f04f 0100 	mov.w	r1, #0
    344e:	4638      	mov	r0, r7
    3450:	bfb4      	ite	lt
    3452:	4b1d      	ldrlt	r3, [pc, #116]	; (34c8 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    3454:	4b1d      	ldrge	r3, [pc, #116]	; (34cc <_usb_d_dev_ep_trans+0x1d4>)
    3456:	4798      	blx	r3
	return ERR_NONE;
    3458:	2000      	movs	r0, #0
    345a:	e7ab      	b.n	33b4 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    345c:	a801      	add	r0, sp, #4
    345e:	4b19      	ldr	r3, [pc, #100]	; (34c4 <_usb_d_dev_ep_trans+0x1cc>)
    3460:	4798      	blx	r3
		return USB_BUSY;
    3462:	2001      	movs	r0, #1
    3464:	e7a6      	b.n	33b4 <_usb_d_dev_ep_trans+0xbc>
    3466:	2500      	movs	r5, #0
    3468:	e7e3      	b.n	3432 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    346a:	f06f 0011 	mvn.w	r0, #17
    346e:	e7a1      	b.n	33b4 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    3470:	f06f 0012 	mvn.w	r0, #18
    3474:	e79e      	b.n	33b4 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    3476:	f06f 0011 	mvn.w	r0, #17
    347a:	e79b      	b.n	33b4 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    347c:	f06f 0012 	mvn.w	r0, #18
    3480:	e798      	b.n	33b4 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    3482:	6841      	ldr	r1, [r0, #4]
    3484:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    3488:	4f11      	ldr	r7, [pc, #68]	; (34d0 <_usb_d_dev_ep_trans+0x1d8>)
    348a:	2400      	movs	r4, #0
    348c:	e75b      	b.n	3346 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    348e:	4a0b      	ldr	r2, [pc, #44]	; (34bc <_usb_d_dev_ep_trans+0x1c4>)
    3490:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    3494:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3498:	428a      	cmp	r2, r1
    349a:	d0f2      	beq.n	3482 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    349c:	4f0c      	ldr	r7, [pc, #48]	; (34d0 <_usb_d_dev_ep_trans+0x1d8>)
    349e:	2400      	movs	r4, #0
    34a0:	e74a      	b.n	3338 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    34a2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    34a6:	4a05      	ldr	r2, [pc, #20]	; (34bc <_usb_d_dev_ep_trans+0x1c4>)
    34a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    34ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    34b0:	2b00      	cmp	r3, #0
    34b2:	d0e3      	beq.n	347c <_usb_d_dev_ep_trans+0x184>
    34b4:	f04f 0801 	mov.w	r8, #1
    34b8:	e771      	b.n	339e <_usb_d_dev_ep_trans+0xa6>
    34ba:	bf00      	nop
    34bc:	2000053c 	.word	0x2000053c
    34c0:	00003599 	.word	0x00003599
    34c4:	000035a7 	.word	0x000035a7
    34c8:	00002559 	.word	0x00002559
    34cc:	000026dd 	.word	0x000026dd
    34d0:	200005b0 	.word	0x200005b0
    34d4:	20041fff 	.word	0x20041fff

000034d8 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    34d8:	4b06      	ldr	r3, [pc, #24]	; (34f4 <_usb_d_dev_register_callback+0x1c>)
    34da:	2900      	cmp	r1, #0
    34dc:	bf08      	it	eq
    34de:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    34e0:	2801      	cmp	r0, #1
    34e2:	d003      	beq.n	34ec <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    34e4:	b908      	cbnz	r0, 34ea <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    34e6:	4b04      	ldr	r3, [pc, #16]	; (34f8 <_usb_d_dev_register_callback+0x20>)
    34e8:	6619      	str	r1, [r3, #96]	; 0x60
    34ea:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    34ec:	4b02      	ldr	r3, [pc, #8]	; (34f8 <_usb_d_dev_register_callback+0x20>)
    34ee:	6659      	str	r1, [r3, #100]	; 0x64
    34f0:	4770      	bx	lr
    34f2:	bf00      	nop
    34f4:	000022d1 	.word	0x000022d1
    34f8:	2000053c 	.word	0x2000053c

000034fc <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    34fc:	4b09      	ldr	r3, [pc, #36]	; (3524 <_usb_d_dev_register_ep_callback+0x28>)
    34fe:	2900      	cmp	r1, #0
    3500:	bf08      	it	eq
    3502:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    3504:	4603      	mov	r3, r0
    3506:	b130      	cbz	r0, 3516 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    3508:	2801      	cmp	r0, #1
    350a:	d007      	beq.n	351c <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    350c:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    350e:	bf04      	itt	eq
    3510:	4b05      	ldreq	r3, [pc, #20]	; (3528 <_usb_d_dev_register_ep_callback+0x2c>)
    3512:	6719      	streq	r1, [r3, #112]	; 0x70
    3514:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    3516:	4b04      	ldr	r3, [pc, #16]	; (3528 <_usb_d_dev_register_ep_callback+0x2c>)
    3518:	6699      	str	r1, [r3, #104]	; 0x68
    351a:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    351c:	4b02      	ldr	r3, [pc, #8]	; (3528 <_usb_d_dev_register_ep_callback+0x2c>)
    351e:	66d9      	str	r1, [r3, #108]	; 0x6c
    3520:	4770      	bx	lr
    3522:	bf00      	nop
    3524:	000022d1 	.word	0x000022d1
    3528:	2000053c 	.word	0x2000053c

0000352c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    352c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    352e:	4b01      	ldr	r3, [pc, #4]	; (3534 <USB_0_Handler+0x8>)
    3530:	4798      	blx	r3
    3532:	bd08      	pop	{r3, pc}
    3534:	000028cd 	.word	0x000028cd

00003538 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    3538:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    353a:	4b01      	ldr	r3, [pc, #4]	; (3540 <USB_1_Handler+0x8>)
    353c:	4798      	blx	r3
    353e:	bd08      	pop	{r3, pc}
    3540:	000028cd 	.word	0x000028cd

00003544 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    3544:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3546:	4b01      	ldr	r3, [pc, #4]	; (354c <USB_2_Handler+0x8>)
    3548:	4798      	blx	r3
    354a:	bd08      	pop	{r3, pc}
    354c:	000028cd 	.word	0x000028cd

00003550 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    3550:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3552:	4b01      	ldr	r3, [pc, #4]	; (3558 <USB_3_Handler+0x8>)
    3554:	4798      	blx	r3
    3556:	bd08      	pop	{r3, pc}
    3558:	000028cd 	.word	0x000028cd

0000355c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    355c:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    355e:	4805      	ldr	r0, [pc, #20]	; (3574 <cdc_device_acm_init+0x18>)
    3560:	4b05      	ldr	r3, [pc, #20]	; (3578 <cdc_device_acm_init+0x1c>)
    3562:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    3564:	4b05      	ldr	r3, [pc, #20]	; (357c <cdc_device_acm_init+0x20>)
    3566:	4798      	blx	r3

	usbdc_start(single_desc);
    3568:	4805      	ldr	r0, [pc, #20]	; (3580 <cdc_device_acm_init+0x24>)
    356a:	4b06      	ldr	r3, [pc, #24]	; (3584 <cdc_device_acm_init+0x28>)
    356c:	4798      	blx	r3
	usbdc_attach();
    356e:	4b06      	ldr	r3, [pc, #24]	; (3588 <cdc_device_acm_init+0x2c>)
    3570:	4798      	blx	r3
    3572:	bd08      	pop	{r3, pc}
    3574:	20000764 	.word	0x20000764
    3578:	00003e65 	.word	0x00003e65
    357c:	00003815 	.word	0x00003815
    3580:	20000000 	.word	0x20000000
    3584:	00003ed5 	.word	0x00003ed5
    3588:	00003f09 	.word	0x00003f09

0000358c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    358c:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    358e:	4b01      	ldr	r3, [pc, #4]	; (3594 <usb_init+0x8>)
    3590:	4798      	blx	r3
    3592:	bd08      	pop	{r3, pc}
    3594:	0000355d 	.word	0x0000355d

00003598 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3598:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    359c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    359e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    35a0:	f3bf 8f5f 	dmb	sy
    35a4:	4770      	bx	lr

000035a6 <atomic_leave_critical>:
    35a6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    35aa:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    35ac:	f383 8810 	msr	PRIMASK, r3
    35b0:	4770      	bx	lr
	...

000035b4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    35b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    35b6:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    35b8:	780b      	ldrb	r3, [r1, #0]
    35ba:	f3c3 1441 	ubfx	r4, r3, #5, #2
    35be:	2c01      	cmp	r4, #1
    35c0:	d15e      	bne.n	3680 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    35c2:	888c      	ldrh	r4, [r1, #4]
    35c4:	4d35      	ldr	r5, [pc, #212]	; (369c <cdcdf_acm_req+0xe8>)
    35c6:	782d      	ldrb	r5, [r5, #0]
    35c8:	42a5      	cmp	r5, r4
    35ca:	d003      	beq.n	35d4 <cdcdf_acm_req+0x20>
    35cc:	4d33      	ldr	r5, [pc, #204]	; (369c <cdcdf_acm_req+0xe8>)
    35ce:	786d      	ldrb	r5, [r5, #1]
    35d0:	42a5      	cmp	r5, r4
    35d2:	d158      	bne.n	3686 <cdcdf_acm_req+0xd2>
    35d4:	4616      	mov	r6, r2
    35d6:	460c      	mov	r4, r1
    35d8:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    35da:	f013 0f80 	tst.w	r3, #128	; 0x80
    35de:	d10c      	bne.n	35fa <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    35e0:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    35e2:	4b2f      	ldr	r3, [pc, #188]	; (36a0 <cdcdf_acm_req+0xec>)
    35e4:	4798      	blx	r3
    35e6:	4601      	mov	r1, r0
	switch (req->bRequest) {
    35e8:	7863      	ldrb	r3, [r4, #1]
    35ea:	2b20      	cmp	r3, #32
    35ec:	d013      	beq.n	3616 <cdcdf_acm_req+0x62>
    35ee:	2b22      	cmp	r3, #34	; 0x22
    35f0:	d032      	beq.n	3658 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    35f2:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    35f6:	b003      	add	sp, #12
    35f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    35fa:	2a01      	cmp	r2, #1
    35fc:	d046      	beq.n	368c <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    35fe:	784b      	ldrb	r3, [r1, #1]
    3600:	2b21      	cmp	r3, #33	; 0x21
    3602:	d145      	bne.n	3690 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3604:	88cb      	ldrh	r3, [r1, #6]
    3606:	2b07      	cmp	r3, #7
    3608:	d145      	bne.n	3696 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    360a:	2300      	movs	r3, #0
    360c:	2207      	movs	r2, #7
    360e:	4925      	ldr	r1, [pc, #148]	; (36a4 <cdcdf_acm_req+0xf0>)
    3610:	4c25      	ldr	r4, [pc, #148]	; (36a8 <cdcdf_acm_req+0xf4>)
    3612:	47a0      	blx	r4
    3614:	e7ef      	b.n	35f6 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3616:	2f07      	cmp	r7, #7
    3618:	d12b      	bne.n	3672 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    361a:	b1be      	cbz	r6, 364c <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    361c:	6800      	ldr	r0, [r0, #0]
    361e:	9000      	str	r0, [sp, #0]
    3620:	888a      	ldrh	r2, [r1, #4]
    3622:	798b      	ldrb	r3, [r1, #6]
    3624:	f8ad 2004 	strh.w	r2, [sp, #4]
    3628:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    362c:	4b1b      	ldr	r3, [pc, #108]	; (369c <cdcdf_acm_req+0xe8>)
    362e:	691b      	ldr	r3, [r3, #16]
    3630:	b113      	cbz	r3, 3638 <cdcdf_acm_req+0x84>
    3632:	4668      	mov	r0, sp
    3634:	4798      	blx	r3
    3636:	b1f8      	cbz	r0, 3678 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    3638:	4b18      	ldr	r3, [pc, #96]	; (369c <cdcdf_acm_req+0xe8>)
    363a:	aa02      	add	r2, sp, #8
    363c:	e912 0003 	ldmdb	r2, {r0, r1}
    3640:	6098      	str	r0, [r3, #8]
    3642:	8199      	strh	r1, [r3, #12]
    3644:	0c09      	lsrs	r1, r1, #16
    3646:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    3648:	2000      	movs	r0, #0
    364a:	e7d4      	b.n	35f6 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    364c:	2300      	movs	r3, #0
    364e:	2207      	movs	r2, #7
    3650:	4628      	mov	r0, r5
    3652:	4c15      	ldr	r4, [pc, #84]	; (36a8 <cdcdf_acm_req+0xf4>)
    3654:	47a0      	blx	r4
    3656:	e7ce      	b.n	35f6 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    3658:	2300      	movs	r3, #0
    365a:	461a      	mov	r2, r3
    365c:	4619      	mov	r1, r3
    365e:	4618      	mov	r0, r3
    3660:	4d11      	ldr	r5, [pc, #68]	; (36a8 <cdcdf_acm_req+0xf4>)
    3662:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    3664:	4b0d      	ldr	r3, [pc, #52]	; (369c <cdcdf_acm_req+0xe8>)
    3666:	695b      	ldr	r3, [r3, #20]
    3668:	b143      	cbz	r3, 367c <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    366a:	8860      	ldrh	r0, [r4, #2]
    366c:	4798      	blx	r3
		return ERR_NONE;
    366e:	2000      	movs	r0, #0
    3670:	e7c1      	b.n	35f6 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    3672:	f04f 30ff 	mov.w	r0, #4294967295
    3676:	e7be      	b.n	35f6 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    3678:	2000      	movs	r0, #0
    367a:	e7bc      	b.n	35f6 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    367c:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    367e:	e7ba      	b.n	35f6 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    3680:	f06f 0009 	mvn.w	r0, #9
    3684:	e7b7      	b.n	35f6 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    3686:	f06f 0009 	mvn.w	r0, #9
    368a:	e7b4      	b.n	35f6 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    368c:	2000      	movs	r0, #0
    368e:	e7b2      	b.n	35f6 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    3690:	f06f 000c 	mvn.w	r0, #12
    3694:	e7af      	b.n	35f6 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    3696:	f04f 30ff 	mov.w	r0, #4294967295
    369a:	e7ac      	b.n	35f6 <cdcdf_acm_req+0x42>
    369c:	200007a4 	.word	0x200007a4
    36a0:	00003f15 	.word	0x00003f15
    36a4:	200007ac 	.word	0x200007ac
    36a8:	000039f1 	.word	0x000039f1

000036ac <cdcdf_acm_ctrl>:
{
    36ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36b0:	b083      	sub	sp, #12
    36b2:	4616      	mov	r6, r2
	switch (ctrl) {
    36b4:	2901      	cmp	r1, #1
    36b6:	d066      	beq.n	3786 <cdcdf_acm_ctrl+0xda>
    36b8:	b141      	cbz	r1, 36cc <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    36ba:	2902      	cmp	r1, #2
    36bc:	bf0c      	ite	eq
    36be:	f06f 001a 	mvneq.w	r0, #26
    36c2:	f06f 000c 	mvnne.w	r0, #12
}
    36c6:	b003      	add	sp, #12
    36c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    36cc:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    36d0:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    36d2:	2800      	cmp	r0, #0
    36d4:	f000 8085 	beq.w	37e2 <cdcdf_acm_ctrl+0x136>
    36d8:	f10a 3bff 	add.w	fp, sl, #4294967295
    36dc:	f10a 0301 	add.w	r3, sl, #1
    36e0:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    36e2:	4f46      	ldr	r7, [pc, #280]	; (37fc <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    36e4:	f8df 9124 	ldr.w	r9, [pc, #292]	; 380c <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    36e8:	f8df 8124 	ldr.w	r8, [pc, #292]	; 3810 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    36ec:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    36ee:	7943      	ldrb	r3, [r0, #5]
    36f0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    36f4:	2b02      	cmp	r3, #2
    36f6:	d002      	beq.n	36fe <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    36f8:	f06f 0009 	mvn.w	r0, #9
    36fc:	e7e3      	b.n	36c6 <cdcdf_acm_ctrl+0x1a>
    36fe:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    3702:	f89b 3000 	ldrb.w	r3, [fp]
    3706:	429a      	cmp	r2, r3
    3708:	d06e      	beq.n	37e8 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    370a:	2bff      	cmp	r3, #255	; 0xff
    370c:	d16f      	bne.n	37ee <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    370e:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    3712:	2205      	movs	r2, #5
    3714:	6871      	ldr	r1, [r6, #4]
    3716:	4b3a      	ldr	r3, [pc, #232]	; (3800 <cdcdf_acm_ctrl+0x154>)
    3718:	4798      	blx	r3
		while (NULL != ep) {
    371a:	4604      	mov	r4, r0
    371c:	b1f8      	cbz	r0, 375e <cdcdf_acm_ctrl+0xb2>
    371e:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    3722:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    3724:	7963      	ldrb	r3, [r4, #5]
    3726:	7922      	ldrb	r2, [r4, #4]
    3728:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    372c:	b292      	uxth	r2, r2
    372e:	78e1      	ldrb	r1, [r4, #3]
    3730:	4628      	mov	r0, r5
    3732:	47b8      	blx	r7
    3734:	2800      	cmp	r0, #0
    3736:	d15d      	bne.n	37f4 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    3738:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    373c:	bf14      	ite	ne
    373e:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    3742:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    3746:	4628      	mov	r0, r5
    3748:	47c8      	blx	r9
			desc->sod = ep;
    374a:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    374c:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    374e:	6871      	ldr	r1, [r6, #4]
    3750:	4420      	add	r0, r4
    3752:	47c0      	blx	r8
		while (NULL != ep) {
    3754:	4604      	mov	r4, r0
    3756:	2800      	cmp	r0, #0
    3758:	d1e3      	bne.n	3722 <cdcdf_acm_ctrl+0x76>
    375a:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    375e:	6833      	ldr	r3, [r6, #0]
    3760:	7818      	ldrb	r0, [r3, #0]
    3762:	2204      	movs	r2, #4
    3764:	6871      	ldr	r1, [r6, #4]
    3766:	4418      	add	r0, r3
    3768:	4b25      	ldr	r3, [pc, #148]	; (3800 <cdcdf_acm_ctrl+0x154>)
    376a:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    376c:	9b00      	ldr	r3, [sp, #0]
    376e:	459b      	cmp	fp, r3
    3770:	d004      	beq.n	377c <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    3772:	2800      	cmp	r0, #0
    3774:	d1ba      	bne.n	36ec <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    3776:	f06f 0009 	mvn.w	r0, #9
    377a:	e7a4      	b.n	36c6 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    377c:	2201      	movs	r2, #1
    377e:	4b21      	ldr	r3, [pc, #132]	; (3804 <cdcdf_acm_ctrl+0x158>)
    3780:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    3782:	2000      	movs	r0, #0
    3784:	e79f      	b.n	36c6 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3786:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    3788:	b142      	cbz	r2, 379c <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    378a:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    378c:	795b      	ldrb	r3, [r3, #5]
    378e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    3792:	2b02      	cmp	r3, #2
    3794:	d002      	beq.n	379c <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    3796:	f06f 0009 	mvn.w	r0, #9
    379a:	e794      	b.n	36c6 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    379c:	7823      	ldrb	r3, [r4, #0]
    379e:	2bff      	cmp	r3, #255	; 0xff
    37a0:	d008      	beq.n	37b4 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    37a2:	23ff      	movs	r3, #255	; 0xff
    37a4:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    37a6:	78a0      	ldrb	r0, [r4, #2]
    37a8:	4298      	cmp	r0, r3
    37aa:	d003      	beq.n	37b4 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    37ac:	4b16      	ldr	r3, [pc, #88]	; (3808 <cdcdf_acm_ctrl+0x15c>)
    37ae:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    37b0:	23ff      	movs	r3, #255	; 0xff
    37b2:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    37b4:	7863      	ldrb	r3, [r4, #1]
    37b6:	2bff      	cmp	r3, #255	; 0xff
    37b8:	d008      	beq.n	37cc <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    37ba:	23ff      	movs	r3, #255	; 0xff
    37bc:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    37be:	78e0      	ldrb	r0, [r4, #3]
    37c0:	4298      	cmp	r0, r3
    37c2:	d003      	beq.n	37cc <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    37c4:	4b10      	ldr	r3, [pc, #64]	; (3808 <cdcdf_acm_ctrl+0x15c>)
    37c6:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    37c8:	23ff      	movs	r3, #255	; 0xff
    37ca:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    37cc:	7920      	ldrb	r0, [r4, #4]
    37ce:	28ff      	cmp	r0, #255	; 0xff
    37d0:	d003      	beq.n	37da <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    37d2:	4b0d      	ldr	r3, [pc, #52]	; (3808 <cdcdf_acm_ctrl+0x15c>)
    37d4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    37d6:	23ff      	movs	r3, #255	; 0xff
    37d8:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    37da:	2000      	movs	r0, #0
    37dc:	4b09      	ldr	r3, [pc, #36]	; (3804 <cdcdf_acm_ctrl+0x158>)
    37de:	7158      	strb	r0, [r3, #5]
    37e0:	e771      	b.n	36c6 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    37e2:	f06f 0009 	mvn.w	r0, #9
    37e6:	e76e      	b.n	36c6 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    37e8:	f06f 0011 	mvn.w	r0, #17
    37ec:	e76b      	b.n	36c6 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    37ee:	f06f 001b 	mvn.w	r0, #27
    37f2:	e768      	b.n	36c6 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    37f4:	f06f 0013 	mvn.w	r0, #19
    37f8:	e765      	b.n	36c6 <cdcdf_acm_ctrl+0x1a>
    37fa:	bf00      	nop
    37fc:	000014bd 	.word	0x000014bd
    3800:	00003f35 	.word	0x00003f35
    3804:	200007a4 	.word	0x200007a4
    3808:	00001525 	.word	0x00001525
    380c:	00001551 	.word	0x00001551
    3810:	00003f6f 	.word	0x00003f6f

00003814 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    3814:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    3816:	4b0a      	ldr	r3, [pc, #40]	; (3840 <cdcdf_acm_init+0x2c>)
    3818:	4798      	blx	r3
    381a:	2801      	cmp	r0, #1
    381c:	d80c      	bhi.n	3838 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    381e:	4809      	ldr	r0, [pc, #36]	; (3844 <cdcdf_acm_init+0x30>)
    3820:	4b09      	ldr	r3, [pc, #36]	; (3848 <cdcdf_acm_init+0x34>)
    3822:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    3824:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    3826:	3018      	adds	r0, #24
    3828:	4b08      	ldr	r3, [pc, #32]	; (384c <cdcdf_acm_init+0x38>)
    382a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    382c:	4908      	ldr	r1, [pc, #32]	; (3850 <cdcdf_acm_init+0x3c>)
    382e:	2001      	movs	r0, #1
    3830:	4b08      	ldr	r3, [pc, #32]	; (3854 <cdcdf_acm_init+0x40>)
    3832:	4798      	blx	r3
	return ERR_NONE;
    3834:	2000      	movs	r0, #0
    3836:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    3838:	f06f 0010 	mvn.w	r0, #16
}
    383c:	bd08      	pop	{r3, pc}
    383e:	bf00      	nop
    3840:	00003f21 	.word	0x00003f21
    3844:	200007a4 	.word	0x200007a4
    3848:	000036ad 	.word	0x000036ad
    384c:	00003ec1 	.word	0x00003ec1
    3850:	20000060 	.word	0x20000060
    3854:	00003e2d 	.word	0x00003e2d

00003858 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    3858:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    385a:	4b07      	ldr	r3, [pc, #28]	; (3878 <usbdc_unconfig+0x20>)
    385c:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    385e:	b14c      	cbz	r4, 3874 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    3860:	2600      	movs	r6, #0
    3862:	2501      	movs	r5, #1
    3864:	6863      	ldr	r3, [r4, #4]
    3866:	4632      	mov	r2, r6
    3868:	4629      	mov	r1, r5
    386a:	4620      	mov	r0, r4
    386c:	4798      	blx	r3
		func = func->next;
    386e:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    3870:	2c00      	cmp	r4, #0
    3872:	d1f7      	bne.n	3864 <usbdc_unconfig+0xc>
    3874:	bd70      	pop	{r4, r5, r6, pc}
    3876:	bf00      	nop
    3878:	200007c8 	.word	0x200007c8

0000387c <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    387c:	b570      	push	{r4, r5, r6, lr}
    387e:	4606      	mov	r6, r0
    3880:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    3882:	4b07      	ldr	r3, [pc, #28]	; (38a0 <usbdc_change_notify+0x24>)
    3884:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    3886:	b91c      	cbnz	r4, 3890 <usbdc_change_notify+0x14>
    3888:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    388a:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    388c:	2c00      	cmp	r4, #0
    388e:	d0fb      	beq.n	3888 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    3890:	6863      	ldr	r3, [r4, #4]
    3892:	2b00      	cmp	r3, #0
    3894:	d0f9      	beq.n	388a <usbdc_change_notify+0xe>
			cg->cb(change, value);
    3896:	4629      	mov	r1, r5
    3898:	4630      	mov	r0, r6
    389a:	4798      	blx	r3
    389c:	e7f5      	b.n	388a <usbdc_change_notify+0xe>
    389e:	bf00      	nop
    38a0:	200007c8 	.word	0x200007c8

000038a4 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    38a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38a6:	4607      	mov	r7, r0
    38a8:	460e      	mov	r6, r1
    38aa:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    38ac:	4b0c      	ldr	r3, [pc, #48]	; (38e0 <usbdc_request_handler+0x3c>)
    38ae:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    38b0:	b91c      	cbnz	r4, 38ba <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    38b2:	2000      	movs	r0, #0
    38b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    38b6:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    38b8:	b16c      	cbz	r4, 38d6 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    38ba:	6863      	ldr	r3, [r4, #4]
    38bc:	2b00      	cmp	r3, #0
    38be:	d0fa      	beq.n	38b6 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    38c0:	462a      	mov	r2, r5
    38c2:	4631      	mov	r1, r6
    38c4:	4638      	mov	r0, r7
    38c6:	4798      	blx	r3
			if (0 == rc) {
    38c8:	b138      	cbz	r0, 38da <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    38ca:	f110 0f0a 	cmn.w	r0, #10
    38ce:	d0f2      	beq.n	38b6 <usbdc_request_handler+0x12>
				return -1;
    38d0:	f04f 30ff 	mov.w	r0, #4294967295
}
    38d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    38d6:	2000      	movs	r0, #0
    38d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    38da:	2001      	movs	r0, #1
    38dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38de:	bf00      	nop
    38e0:	200007c8 	.word	0x200007c8

000038e4 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    38e4:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    38e6:	4b06      	ldr	r3, [pc, #24]	; (3900 <usbd_sof_cb+0x1c>)
    38e8:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    38ea:	b91c      	cbnz	r4, 38f4 <usbd_sof_cb+0x10>
    38ec:	bd10      	pop	{r4, pc}
		sof = sof->next;
    38ee:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    38f0:	2c00      	cmp	r4, #0
    38f2:	d0fb      	beq.n	38ec <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    38f4:	6863      	ldr	r3, [r4, #4]
    38f6:	2b00      	cmp	r3, #0
    38f8:	d0f9      	beq.n	38ee <usbd_sof_cb+0xa>
			sof->cb();
    38fa:	4798      	blx	r3
    38fc:	e7f7      	b.n	38ee <usbd_sof_cb+0xa>
    38fe:	bf00      	nop
    3900:	200007c8 	.word	0x200007c8

00003904 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    3904:	b510      	push	{r4, lr}
    3906:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    3908:	b119      	cbz	r1, 3912 <usbdc_cb_ctl_done+0xe>
    390a:	2901      	cmp	r1, #1
    390c:	d026      	beq.n	395c <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    390e:	2000      	movs	r0, #0
    3910:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    3912:	7813      	ldrb	r3, [r2, #0]
    3914:	2b00      	cmp	r3, #0
    3916:	d1fa      	bne.n	390e <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    3918:	7853      	ldrb	r3, [r2, #1]
    391a:	2b05      	cmp	r3, #5
    391c:	d00f      	beq.n	393e <usbdc_cb_ctl_done+0x3a>
    391e:	2b09      	cmp	r3, #9
    3920:	d1f5      	bne.n	390e <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    3922:	8852      	ldrh	r2, [r2, #2]
    3924:	4b10      	ldr	r3, [pc, #64]	; (3968 <usbdc_cb_ctl_done+0x64>)
    3926:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    3928:	8863      	ldrh	r3, [r4, #2]
    392a:	2b00      	cmp	r3, #0
    392c:	bf14      	ite	ne
    392e:	2104      	movne	r1, #4
    3930:	2103      	moveq	r1, #3
    3932:	4b0d      	ldr	r3, [pc, #52]	; (3968 <usbdc_cb_ctl_done+0x64>)
    3934:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3936:	2001      	movs	r0, #1
    3938:	4b0c      	ldr	r3, [pc, #48]	; (396c <usbdc_cb_ctl_done+0x68>)
    393a:	4798      	blx	r3
    393c:	e7e7      	b.n	390e <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    393e:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    3940:	b2c0      	uxtb	r0, r0
    3942:	4b0b      	ldr	r3, [pc, #44]	; (3970 <usbdc_cb_ctl_done+0x6c>)
    3944:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    3946:	8863      	ldrh	r3, [r4, #2]
    3948:	2b00      	cmp	r3, #0
    394a:	bf14      	ite	ne
    394c:	2103      	movne	r1, #3
    394e:	2102      	moveq	r1, #2
    3950:	4b05      	ldr	r3, [pc, #20]	; (3968 <usbdc_cb_ctl_done+0x64>)
    3952:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3954:	2001      	movs	r0, #1
    3956:	4b05      	ldr	r3, [pc, #20]	; (396c <usbdc_cb_ctl_done+0x68>)
    3958:	4798      	blx	r3
    395a:	e7d8      	b.n	390e <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    395c:	2201      	movs	r2, #1
    395e:	4621      	mov	r1, r4
    3960:	2000      	movs	r0, #0
    3962:	4b04      	ldr	r3, [pc, #16]	; (3974 <usbdc_cb_ctl_done+0x70>)
    3964:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    3966:	e7d2      	b.n	390e <usbdc_cb_ctl_done+0xa>
    3968:	200007c8 	.word	0x200007c8
    396c:	0000387d 	.word	0x0000387d
    3970:	000014b1 	.word	0x000014b1
    3974:	000038a5 	.word	0x000038a5

00003978 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    3978:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    397a:	4b0d      	ldr	r3, [pc, #52]	; (39b0 <usbdc_reset+0x38>)
    397c:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    397e:	4d0d      	ldr	r5, [pc, #52]	; (39b4 <usbdc_reset+0x3c>)
    3980:	2602      	movs	r6, #2
    3982:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    3984:	2400      	movs	r4, #0
    3986:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    3988:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    398a:	4620      	mov	r0, r4
    398c:	4b0a      	ldr	r3, [pc, #40]	; (39b8 <usbdc_reset+0x40>)
    398e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    3990:	7f28      	ldrb	r0, [r5, #28]
    3992:	4b0a      	ldr	r3, [pc, #40]	; (39bc <usbdc_reset+0x44>)
    3994:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    3996:	4a0a      	ldr	r2, [pc, #40]	; (39c0 <usbdc_reset+0x48>)
    3998:	4621      	mov	r1, r4
    399a:	4620      	mov	r0, r4
    399c:	4d09      	ldr	r5, [pc, #36]	; (39c4 <usbdc_reset+0x4c>)
    399e:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    39a0:	4a09      	ldr	r2, [pc, #36]	; (39c8 <usbdc_reset+0x50>)
    39a2:	4631      	mov	r1, r6
    39a4:	4620      	mov	r0, r4
    39a6:	47a8      	blx	r5
	usb_d_ep_enable(0);
    39a8:	4620      	mov	r0, r4
    39aa:	4b08      	ldr	r3, [pc, #32]	; (39cc <usbdc_reset+0x54>)
    39ac:	4798      	blx	r3
    39ae:	bd70      	pop	{r4, r5, r6, pc}
    39b0:	00003859 	.word	0x00003859
    39b4:	200007c8 	.word	0x200007c8
    39b8:	00001525 	.word	0x00001525
    39bc:	00001511 	.word	0x00001511
    39c0:	00003a11 	.word	0x00003a11
    39c4:	00001725 	.word	0x00001725
    39c8:	00003905 	.word	0x00003905
    39cc:	00001551 	.word	0x00001551

000039d0 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    39d0:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    39d2:	b110      	cbz	r0, 39da <usbd_event_cb+0xa>
    39d4:	2801      	cmp	r0, #1
    39d6:	d004      	beq.n	39e2 <usbd_event_cb+0x12>
    39d8:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    39da:	2000      	movs	r0, #0
    39dc:	4b02      	ldr	r3, [pc, #8]	; (39e8 <usbd_event_cb+0x18>)
    39de:	4798      	blx	r3
		break;
    39e0:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    39e2:	4b02      	ldr	r3, [pc, #8]	; (39ec <usbd_event_cb+0x1c>)
    39e4:	4798      	blx	r3
    39e6:	bd08      	pop	{r3, pc}
    39e8:	0000387d 	.word	0x0000387d
    39ec:	00003979 	.word	0x00003979

000039f0 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    39f0:	b500      	push	{lr}
    39f2:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    39f4:	9101      	str	r1, [sp, #4]
    39f6:	9202      	str	r2, [sp, #8]
    39f8:	f88d 000c 	strb.w	r0, [sp, #12]
    39fc:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    3a00:	a801      	add	r0, sp, #4
    3a02:	4b02      	ldr	r3, [pc, #8]	; (3a0c <usbdc_xfer+0x1c>)
    3a04:	4798      	blx	r3
}
    3a06:	b005      	add	sp, #20
    3a08:	f85d fb04 	ldr.w	pc, [sp], #4
    3a0c:	0000159d 	.word	0x0000159d

00003a10 <usbdc_cb_ctl_req>:
{
    3a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3a14:	b083      	sub	sp, #12
    3a16:	4605      	mov	r5, r0
    3a18:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3a1a:	2200      	movs	r2, #0
    3a1c:	4b9b      	ldr	r3, [pc, #620]	; (3c8c <usbdc_cb_ctl_req+0x27c>)
    3a1e:	4798      	blx	r3
    3a20:	f1b0 3fff 	cmp.w	r0, #4294967295
    3a24:	d00b      	beq.n	3a3e <usbdc_cb_ctl_req+0x2e>
    3a26:	2801      	cmp	r0, #1
    3a28:	f000 81e3 	beq.w	3df2 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    3a2c:	7823      	ldrb	r3, [r4, #0]
    3a2e:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    3a32:	d008      	beq.n	3a46 <usbdc_cb_ctl_req+0x36>
    3a34:	2a80      	cmp	r2, #128	; 0x80
    3a36:	f000 80f4 	beq.w	3c22 <usbdc_cb_ctl_req+0x212>
		return false;
    3a3a:	2000      	movs	r0, #0
    3a3c:	e000      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		return false;
    3a3e:	2000      	movs	r0, #0
}
    3a40:	b003      	add	sp, #12
    3a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    3a46:	7862      	ldrb	r2, [r4, #1]
    3a48:	3a01      	subs	r2, #1
    3a4a:	2a0a      	cmp	r2, #10
    3a4c:	f200 81d3 	bhi.w	3df6 <usbdc_cb_ctl_req+0x3e6>
    3a50:	e8df f012 	tbh	[pc, r2, lsl #1]
    3a54:	01d10060 	.word	0x01d10060
    3a58:	01d10076 	.word	0x01d10076
    3a5c:	01d1000b 	.word	0x01d1000b
    3a60:	01d101d1 	.word	0x01d101d1
    3a64:	01d10015 	.word	0x01d10015
    3a68:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3a6a:	2301      	movs	r3, #1
    3a6c:	2200      	movs	r2, #0
    3a6e:	4611      	mov	r1, r2
    3a70:	4628      	mov	r0, r5
    3a72:	4c87      	ldr	r4, [pc, #540]	; (3c90 <usbdc_cb_ctl_req+0x280>)
    3a74:	47a0      	blx	r4
    3a76:	fab0 f080 	clz	r0, r0
    3a7a:	0940      	lsrs	r0, r0, #5
    3a7c:	e7e0      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    3a7e:	8862      	ldrh	r2, [r4, #2]
    3a80:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    3a82:	b1ca      	cbz	r2, 3ab8 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    3a84:	4b83      	ldr	r3, [pc, #524]	; (3c94 <usbdc_cb_ctl_req+0x284>)
    3a86:	681b      	ldr	r3, [r3, #0]
    3a88:	6859      	ldr	r1, [r3, #4]
    3a8a:	6818      	ldr	r0, [r3, #0]
    3a8c:	4b82      	ldr	r3, [pc, #520]	; (3c98 <usbdc_cb_ctl_req+0x288>)
    3a8e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3a90:	2800      	cmp	r0, #0
    3a92:	f000 81be 	beq.w	3e12 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    3a96:	78c2      	ldrb	r2, [r0, #3]
    3a98:	7881      	ldrb	r1, [r0, #2]
    3a9a:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    3a9e:	fa10 f181 	uxtah	r1, r0, r1
    3aa2:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3aa4:	2204      	movs	r2, #4
    3aa6:	4b7d      	ldr	r3, [pc, #500]	; (3c9c <usbdc_cb_ctl_req+0x28c>)
    3aa8:	4798      	blx	r3
    3aaa:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    3aac:	b130      	cbz	r0, 3abc <usbdc_cb_ctl_req+0xac>
    3aae:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3ab0:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 3c94 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3ab4:	4f79      	ldr	r7, [pc, #484]	; (3c9c <usbdc_cb_ctl_req+0x28c>)
    3ab6:	e018      	b.n	3aea <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    3ab8:	4b79      	ldr	r3, [pc, #484]	; (3ca0 <usbdc_cb_ctl_req+0x290>)
    3aba:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3abc:	2301      	movs	r3, #1
    3abe:	2200      	movs	r2, #0
    3ac0:	4611      	mov	r1, r2
    3ac2:	4628      	mov	r0, r5
    3ac4:	4c72      	ldr	r4, [pc, #456]	; (3c90 <usbdc_cb_ctl_req+0x280>)
    3ac6:	47a0      	blx	r4
    3ac8:	fab0 f080 	clz	r0, r0
    3acc:	0940      	lsrs	r0, r0, #5
    3ace:	e7b7      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    3ad0:	464c      	mov	r4, r9
    3ad2:	e000      	b.n	3ad6 <usbdc_cb_ctl_req+0xc6>
    3ad4:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    3ad6:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    3ad8:	7803      	ldrb	r3, [r0, #0]
    3ada:	4418      	add	r0, r3
    3adc:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3ade:	2204      	movs	r2, #4
    3ae0:	9901      	ldr	r1, [sp, #4]
    3ae2:	47b8      	blx	r7
    3ae4:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    3ae6:	2800      	cmp	r0, #0
    3ae8:	d0e8      	beq.n	3abc <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    3aea:	f890 9002 	ldrb.w	r9, [r0, #2]
    3aee:	45a1      	cmp	r9, r4
    3af0:	d0f1      	beq.n	3ad6 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3af2:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    3af6:	2c00      	cmp	r4, #0
    3af8:	d0ea      	beq.n	3ad0 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    3afa:	2600      	movs	r6, #0
    3afc:	6863      	ldr	r3, [r4, #4]
    3afe:	466a      	mov	r2, sp
    3b00:	4631      	mov	r1, r6
    3b02:	4620      	mov	r0, r4
    3b04:	4798      	blx	r3
    3b06:	2800      	cmp	r0, #0
    3b08:	d0e4      	beq.n	3ad4 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    3b0a:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    3b0c:	2c00      	cmp	r4, #0
    3b0e:	d1f5      	bne.n	3afc <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    3b10:	464c      	mov	r4, r9
    3b12:	e7e0      	b.n	3ad6 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3b14:	f003 031f 	and.w	r3, r3, #31
    3b18:	2b02      	cmp	r3, #2
    3b1a:	f040 816e 	bne.w	3dfa <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    3b1e:	88e3      	ldrh	r3, [r4, #6]
    3b20:	b10b      	cbz	r3, 3b26 <usbdc_cb_ctl_req+0x116>
			return false;
    3b22:	2000      	movs	r0, #0
    3b24:	e78c      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    3b26:	88a0      	ldrh	r0, [r4, #4]
    3b28:	2100      	movs	r1, #0
    3b2a:	b2c0      	uxtb	r0, r0
    3b2c:	4b5d      	ldr	r3, [pc, #372]	; (3ca4 <usbdc_cb_ctl_req+0x294>)
    3b2e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3b30:	2301      	movs	r3, #1
    3b32:	2200      	movs	r2, #0
    3b34:	4611      	mov	r1, r2
    3b36:	4628      	mov	r0, r5
    3b38:	4c55      	ldr	r4, [pc, #340]	; (3c90 <usbdc_cb_ctl_req+0x280>)
    3b3a:	47a0      	blx	r4
		return true;
    3b3c:	2001      	movs	r0, #1
    3b3e:	e77f      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3b40:	f003 031f 	and.w	r3, r3, #31
    3b44:	2b02      	cmp	r3, #2
    3b46:	f040 815a 	bne.w	3dfe <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    3b4a:	88e3      	ldrh	r3, [r4, #6]
    3b4c:	b10b      	cbz	r3, 3b52 <usbdc_cb_ctl_req+0x142>
			return false;
    3b4e:	2000      	movs	r0, #0
    3b50:	e776      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    3b52:	88a0      	ldrh	r0, [r4, #4]
    3b54:	2101      	movs	r1, #1
    3b56:	b2c0      	uxtb	r0, r0
    3b58:	4b52      	ldr	r3, [pc, #328]	; (3ca4 <usbdc_cb_ctl_req+0x294>)
    3b5a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3b5c:	2301      	movs	r3, #1
    3b5e:	2200      	movs	r2, #0
    3b60:	4611      	mov	r1, r2
    3b62:	4628      	mov	r0, r5
    3b64:	4c4a      	ldr	r4, [pc, #296]	; (3c90 <usbdc_cb_ctl_req+0x280>)
    3b66:	47a0      	blx	r4
		return true;
    3b68:	2001      	movs	r0, #1
    3b6a:	e769      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    3b6c:	8866      	ldrh	r6, [r4, #2]
    3b6e:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    3b70:	4a48      	ldr	r2, [pc, #288]	; (3c94 <usbdc_cb_ctl_req+0x284>)
    3b72:	6813      	ldr	r3, [r2, #0]
    3b74:	7ed2      	ldrb	r2, [r2, #27]
    3b76:	6859      	ldr	r1, [r3, #4]
    3b78:	6818      	ldr	r0, [r3, #0]
    3b7a:	4b47      	ldr	r3, [pc, #284]	; (3c98 <usbdc_cb_ctl_req+0x288>)
    3b7c:	4798      	blx	r3
	if (NULL == ifc) {
    3b7e:	2800      	cmp	r0, #0
    3b80:	d045      	beq.n	3c0e <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    3b82:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    3b84:	78c2      	ldrb	r2, [r0, #3]
    3b86:	7881      	ldrb	r1, [r0, #2]
    3b88:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3b8c:	fa10 f181 	uxtah	r1, r0, r1
    3b90:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    3b92:	2204      	movs	r2, #4
    3b94:	4b41      	ldr	r3, [pc, #260]	; (3c9c <usbdc_cb_ctl_req+0x28c>)
    3b96:	4798      	blx	r3
    3b98:	4603      	mov	r3, r0
    3b9a:	2800      	cmp	r0, #0
    3b9c:	d039      	beq.n	3c12 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3b9e:	2704      	movs	r7, #4
    3ba0:	4d3e      	ldr	r5, [pc, #248]	; (3c9c <usbdc_cb_ctl_req+0x28c>)
    3ba2:	e008      	b.n	3bb6 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    3ba4:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    3ba6:	7803      	ldrb	r3, [r0, #0]
    3ba8:	4418      	add	r0, r3
    3baa:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3bac:	463a      	mov	r2, r7
    3bae:	9901      	ldr	r1, [sp, #4]
    3bb0:	47a8      	blx	r5
		if (NULL == ifc) {
    3bb2:	4603      	mov	r3, r0
    3bb4:	b378      	cbz	r0, 3c16 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    3bb6:	789a      	ldrb	r2, [r3, #2]
    3bb8:	42a2      	cmp	r2, r4
    3bba:	d1f3      	bne.n	3ba4 <usbdc_cb_ctl_req+0x194>
    3bbc:	78da      	ldrb	r2, [r3, #3]
    3bbe:	42b2      	cmp	r2, r6
    3bc0:	d1f0      	bne.n	3ba4 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    3bc2:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    3bc4:	4b33      	ldr	r3, [pc, #204]	; (3c94 <usbdc_cb_ctl_req+0x284>)
    3bc6:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    3bc8:	b33d      	cbz	r5, 3c1a <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3bca:	2701      	movs	r7, #1
    3bcc:	686b      	ldr	r3, [r5, #4]
    3bce:	466a      	mov	r2, sp
    3bd0:	4639      	mov	r1, r7
    3bd2:	4628      	mov	r0, r5
    3bd4:	4798      	blx	r3
    3bd6:	b120      	cbz	r0, 3be2 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    3bd8:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    3bda:	2d00      	cmp	r5, #0
    3bdc:	d1f6      	bne.n	3bcc <usbdc_cb_ctl_req+0x1bc>
	return false;
    3bde:	2000      	movs	r0, #0
    3be0:	e72e      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    3be2:	686b      	ldr	r3, [r5, #4]
    3be4:	466a      	mov	r2, sp
    3be6:	2100      	movs	r1, #0
    3be8:	4628      	mov	r0, r5
    3bea:	4798      	blx	r3
    3bec:	b9b8      	cbnz	r0, 3c1e <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    3bee:	b136      	cbz	r6, 3bfe <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    3bf0:	4a28      	ldr	r2, [pc, #160]	; (3c94 <usbdc_cb_ctl_req+0x284>)
    3bf2:	2301      	movs	r3, #1
    3bf4:	fa03 f404 	lsl.w	r4, r3, r4
    3bf8:	7f53      	ldrb	r3, [r2, #29]
    3bfa:	4323      	orrs	r3, r4
    3bfc:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    3bfe:	2300      	movs	r3, #0
    3c00:	461a      	mov	r2, r3
    3c02:	4619      	mov	r1, r3
    3c04:	4618      	mov	r0, r3
    3c06:	4c22      	ldr	r4, [pc, #136]	; (3c90 <usbdc_cb_ctl_req+0x280>)
    3c08:	47a0      	blx	r4
			return true;
    3c0a:	2001      	movs	r0, #1
    3c0c:	e718      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		return false;
    3c0e:	2000      	movs	r0, #0
    3c10:	e716      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		return false;
    3c12:	2000      	movs	r0, #0
    3c14:	e714      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
			return false;
    3c16:	2000      	movs	r0, #0
    3c18:	e712      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
	return false;
    3c1a:	2000      	movs	r0, #0
    3c1c:	e710      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
			return false;
    3c1e:	2000      	movs	r0, #0
    3c20:	e70e      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    3c22:	7862      	ldrb	r2, [r4, #1]
    3c24:	2a0a      	cmp	r2, #10
    3c26:	f200 80ec 	bhi.w	3e02 <usbdc_cb_ctl_req+0x3f2>
    3c2a:	e8df f012 	tbh	[pc, r2, lsl #1]
    3c2e:	008e      	.short	0x008e
    3c30:	00ea00ea 	.word	0x00ea00ea
    3c34:	00ea00ea 	.word	0x00ea00ea
    3c38:	000b00ea 	.word	0x000b00ea
    3c3c:	008200ea 	.word	0x008200ea
    3c40:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    3c44:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    3c46:	0a13      	lsrs	r3, r2, #8
    3c48:	2b02      	cmp	r3, #2
    3c4a:	d02d      	beq.n	3ca8 <usbdc_cb_ctl_req+0x298>
    3c4c:	2b03      	cmp	r3, #3
    3c4e:	d050      	beq.n	3cf2 <usbdc_cb_ctl_req+0x2e2>
    3c50:	2b01      	cmp	r3, #1
    3c52:	d001      	beq.n	3c58 <usbdc_cb_ctl_req+0x248>
	return false;
    3c54:	2000      	movs	r0, #0
    3c56:	e6f3      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    3c58:	88e2      	ldrh	r2, [r4, #6]
    3c5a:	2a12      	cmp	r2, #18
    3c5c:	bf28      	it	cs
    3c5e:	2212      	movcs	r2, #18
    3c60:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    3c62:	4b0c      	ldr	r3, [pc, #48]	; (3c94 <usbdc_cb_ctl_req+0x284>)
    3c64:	681b      	ldr	r3, [r3, #0]
    3c66:	2201      	movs	r2, #1
    3c68:	6859      	ldr	r1, [r3, #4]
    3c6a:	6818      	ldr	r0, [r3, #0]
    3c6c:	4b0b      	ldr	r3, [pc, #44]	; (3c9c <usbdc_cb_ctl_req+0x28c>)
    3c6e:	4798      	blx	r3
	if (!dev_desc) {
    3c70:	4601      	mov	r1, r0
    3c72:	2800      	cmp	r0, #0
    3c74:	f000 80c7 	beq.w	3e06 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    3c78:	2300      	movs	r3, #0
    3c7a:	4622      	mov	r2, r4
    3c7c:	4628      	mov	r0, r5
    3c7e:	4c04      	ldr	r4, [pc, #16]	; (3c90 <usbdc_cb_ctl_req+0x280>)
    3c80:	47a0      	blx	r4
    3c82:	fab0 f080 	clz	r0, r0
    3c86:	0940      	lsrs	r0, r0, #5
    3c88:	e6da      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
    3c8a:	bf00      	nop
    3c8c:	000038a5 	.word	0x000038a5
    3c90:	000039f1 	.word	0x000039f1
    3c94:	200007c8 	.word	0x200007c8
    3c98:	00003fb5 	.word	0x00003fb5
    3c9c:	00003f35 	.word	0x00003f35
    3ca0:	00003859 	.word	0x00003859
    3ca4:	000016bd 	.word	0x000016bd
	uint16_t length   = req->wLength;
    3ca8:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3caa:	4b5b      	ldr	r3, [pc, #364]	; (3e18 <usbdc_cb_ctl_req+0x408>)
    3cac:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    3cae:	681b      	ldr	r3, [r3, #0]
    3cb0:	3201      	adds	r2, #1
    3cb2:	b2d2      	uxtb	r2, r2
    3cb4:	6859      	ldr	r1, [r3, #4]
    3cb6:	6818      	ldr	r0, [r3, #0]
    3cb8:	4b58      	ldr	r3, [pc, #352]	; (3e1c <usbdc_cb_ctl_req+0x40c>)
    3cba:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3cbc:	4601      	mov	r1, r0
    3cbe:	2800      	cmp	r0, #0
    3cc0:	f000 80a3 	beq.w	3e0a <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    3cc4:	78c3      	ldrb	r3, [r0, #3]
    3cc6:	7882      	ldrb	r2, [r0, #2]
    3cc8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    3ccc:	b292      	uxth	r2, r2
	if (length <= total_len) {
    3cce:	4294      	cmp	r4, r2
    3cd0:	d90d      	bls.n	3cee <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3cd2:	3e01      	subs	r6, #1
    3cd4:	4226      	tst	r6, r4
    3cd6:	bf0c      	ite	eq
    3cd8:	2301      	moveq	r3, #1
    3cda:	2300      	movne	r3, #0
		length = total_len;
    3cdc:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    3cde:	4622      	mov	r2, r4
    3ce0:	4628      	mov	r0, r5
    3ce2:	4c4f      	ldr	r4, [pc, #316]	; (3e20 <usbdc_cb_ctl_req+0x410>)
    3ce4:	47a0      	blx	r4
    3ce6:	fab0 f080 	clz	r0, r0
    3cea:	0940      	lsrs	r0, r0, #5
    3cec:	e6a8      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    3cee:	2300      	movs	r3, #0
    3cf0:	e7f5      	b.n	3cde <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    3cf2:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3cf4:	4b48      	ldr	r3, [pc, #288]	; (3e18 <usbdc_cb_ctl_req+0x408>)
    3cf6:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    3cf8:	681b      	ldr	r3, [r3, #0]
    3cfa:	b2d2      	uxtb	r2, r2
    3cfc:	6859      	ldr	r1, [r3, #4]
    3cfe:	6818      	ldr	r0, [r3, #0]
    3d00:	4b48      	ldr	r3, [pc, #288]	; (3e24 <usbdc_cb_ctl_req+0x414>)
    3d02:	4798      	blx	r3
	if (NULL == str_desc) {
    3d04:	4601      	mov	r1, r0
    3d06:	2800      	cmp	r0, #0
    3d08:	f000 8081 	beq.w	3e0e <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    3d0c:	7802      	ldrb	r2, [r0, #0]
    3d0e:	4294      	cmp	r4, r2
    3d10:	d90d      	bls.n	3d2e <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3d12:	3e01      	subs	r6, #1
    3d14:	4226      	tst	r6, r4
    3d16:	bf0c      	ite	eq
    3d18:	2301      	moveq	r3, #1
    3d1a:	2300      	movne	r3, #0
		length = str_desc[0];
    3d1c:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    3d1e:	4622      	mov	r2, r4
    3d20:	4628      	mov	r0, r5
    3d22:	4c3f      	ldr	r4, [pc, #252]	; (3e20 <usbdc_cb_ctl_req+0x410>)
    3d24:	47a0      	blx	r4
    3d26:	fab0 f080 	clz	r0, r0
    3d2a:	0940      	lsrs	r0, r0, #5
    3d2c:	e688      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    3d2e:	2300      	movs	r3, #0
    3d30:	e7f5      	b.n	3d1e <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    3d32:	4939      	ldr	r1, [pc, #228]	; (3e18 <usbdc_cb_ctl_req+0x408>)
    3d34:	694b      	ldr	r3, [r1, #20]
    3d36:	7eca      	ldrb	r2, [r1, #27]
    3d38:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    3d3a:	2300      	movs	r3, #0
    3d3c:	2201      	movs	r2, #1
    3d3e:	6949      	ldr	r1, [r1, #20]
    3d40:	4628      	mov	r0, r5
    3d42:	4c37      	ldr	r4, [pc, #220]	; (3e20 <usbdc_cb_ctl_req+0x410>)
    3d44:	47a0      	blx	r4
		return true;
    3d46:	2001      	movs	r0, #1
    3d48:	e67a      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3d4a:	f003 031f 	and.w	r3, r3, #31
    3d4e:	2b01      	cmp	r3, #1
    3d50:	d903      	bls.n	3d5a <usbdc_cb_ctl_req+0x34a>
    3d52:	2b02      	cmp	r3, #2
    3d54:	d010      	beq.n	3d78 <usbdc_cb_ctl_req+0x368>
		return false;
    3d56:	2000      	movs	r0, #0
    3d58:	e672      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		st = 0;
    3d5a:	2300      	movs	r3, #0
    3d5c:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    3d5e:	492e      	ldr	r1, [pc, #184]	; (3e18 <usbdc_cb_ctl_req+0x408>)
    3d60:	694b      	ldr	r3, [r1, #20]
    3d62:	f8bd 2000 	ldrh.w	r2, [sp]
    3d66:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    3d68:	2300      	movs	r3, #0
    3d6a:	2202      	movs	r2, #2
    3d6c:	6949      	ldr	r1, [r1, #20]
    3d6e:	4628      	mov	r0, r5
    3d70:	4c2b      	ldr	r4, [pc, #172]	; (3e20 <usbdc_cb_ctl_req+0x410>)
    3d72:	47a0      	blx	r4
	return true;
    3d74:	2001      	movs	r0, #1
    3d76:	e663      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    3d78:	88a0      	ldrh	r0, [r4, #4]
    3d7a:	2102      	movs	r1, #2
    3d7c:	b2c0      	uxtb	r0, r0
    3d7e:	4b2a      	ldr	r3, [pc, #168]	; (3e28 <usbdc_cb_ctl_req+0x418>)
    3d80:	4798      	blx	r3
		if (st < 0) {
    3d82:	2800      	cmp	r0, #0
    3d84:	db03      	blt.n	3d8e <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    3d86:	f000 0001 	and.w	r0, r0, #1
    3d8a:	9000      	str	r0, [sp, #0]
    3d8c:	e7e7      	b.n	3d5e <usbdc_cb_ctl_req+0x34e>
			return false;
    3d8e:	2000      	movs	r0, #0
    3d90:	e656      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    3d92:	4b21      	ldr	r3, [pc, #132]	; (3e18 <usbdc_cb_ctl_req+0x408>)
    3d94:	7f5b      	ldrb	r3, [r3, #29]
    3d96:	88a2      	ldrh	r2, [r4, #4]
    3d98:	4113      	asrs	r3, r2
    3d9a:	f013 0f01 	tst.w	r3, #1
    3d9e:	d012      	beq.n	3dc6 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3da0:	4b1d      	ldr	r3, [pc, #116]	; (3e18 <usbdc_cb_ctl_req+0x408>)
    3da2:	691d      	ldr	r5, [r3, #16]
	return false;
    3da4:	2000      	movs	r0, #0
	while (NULL != func) {
    3da6:	2d00      	cmp	r5, #0
    3da8:	f43f ae4a 	beq.w	3a40 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    3dac:	2602      	movs	r6, #2
    3dae:	686b      	ldr	r3, [r5, #4]
    3db0:	4622      	mov	r2, r4
    3db2:	4631      	mov	r1, r6
    3db4:	4628      	mov	r0, r5
    3db6:	4798      	blx	r3
    3db8:	2800      	cmp	r0, #0
    3dba:	da0f      	bge.n	3ddc <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    3dbc:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    3dbe:	2d00      	cmp	r5, #0
    3dc0:	d1f5      	bne.n	3dae <usbdc_cb_ctl_req+0x39e>
	return false;
    3dc2:	2000      	movs	r0, #0
    3dc4:	e63c      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    3dc6:	4914      	ldr	r1, [pc, #80]	; (3e18 <usbdc_cb_ctl_req+0x408>)
    3dc8:	694b      	ldr	r3, [r1, #20]
    3dca:	2000      	movs	r0, #0
    3dcc:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3dce:	4603      	mov	r3, r0
    3dd0:	2201      	movs	r2, #1
    3dd2:	6949      	ldr	r1, [r1, #20]
    3dd4:	4c12      	ldr	r4, [pc, #72]	; (3e20 <usbdc_cb_ctl_req+0x410>)
    3dd6:	47a0      	blx	r4
		return true;
    3dd8:	2001      	movs	r0, #1
    3dda:	e631      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    3ddc:	490e      	ldr	r1, [pc, #56]	; (3e18 <usbdc_cb_ctl_req+0x408>)
    3dde:	694b      	ldr	r3, [r1, #20]
    3de0:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3de2:	2300      	movs	r3, #0
    3de4:	2201      	movs	r2, #1
    3de6:	6949      	ldr	r1, [r1, #20]
    3de8:	4618      	mov	r0, r3
    3dea:	4c0d      	ldr	r4, [pc, #52]	; (3e20 <usbdc_cb_ctl_req+0x410>)
    3dec:	47a0      	blx	r4
			return true;
    3dee:	2001      	movs	r0, #1
    3df0:	e626      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		return true;
    3df2:	2001      	movs	r0, #1
    3df4:	e624      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		return false;
    3df6:	2000      	movs	r0, #0
    3df8:	e622      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		return false;
    3dfa:	2000      	movs	r0, #0
    3dfc:	e620      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		return false;
    3dfe:	2000      	movs	r0, #0
    3e00:	e61e      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		return false;
    3e02:	2000      	movs	r0, #0
    3e04:	e61c      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		return false;
    3e06:	2000      	movs	r0, #0
    3e08:	e61a      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		return false;
    3e0a:	2000      	movs	r0, #0
    3e0c:	e618      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
		return false;
    3e0e:	2000      	movs	r0, #0
    3e10:	e616      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
			return false;
    3e12:	2000      	movs	r0, #0
    3e14:	e614      	b.n	3a40 <usbdc_cb_ctl_req+0x30>
    3e16:	bf00      	nop
    3e18:	200007c8 	.word	0x200007c8
    3e1c:	00003fb5 	.word	0x00003fb5
    3e20:	000039f1 	.word	0x000039f1
    3e24:	0000401d 	.word	0x0000401d
    3e28:	000016bd 	.word	0x000016bd

00003e2c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    3e2c:	b508      	push	{r3, lr}
	switch (type) {
    3e2e:	2801      	cmp	r0, #1
    3e30:	d007      	beq.n	3e42 <usbdc_register_handler+0x16>
    3e32:	b110      	cbz	r0, 3e3a <usbdc_register_handler+0xe>
    3e34:	2802      	cmp	r0, #2
    3e36:	d008      	beq.n	3e4a <usbdc_register_handler+0x1e>
    3e38:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    3e3a:	4806      	ldr	r0, [pc, #24]	; (3e54 <usbdc_register_handler+0x28>)
    3e3c:	4b06      	ldr	r3, [pc, #24]	; (3e58 <usbdc_register_handler+0x2c>)
    3e3e:	4798      	blx	r3
		break;
    3e40:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    3e42:	4806      	ldr	r0, [pc, #24]	; (3e5c <usbdc_register_handler+0x30>)
    3e44:	4b04      	ldr	r3, [pc, #16]	; (3e58 <usbdc_register_handler+0x2c>)
    3e46:	4798      	blx	r3
		break;
    3e48:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    3e4a:	4805      	ldr	r0, [pc, #20]	; (3e60 <usbdc_register_handler+0x34>)
    3e4c:	4b02      	ldr	r3, [pc, #8]	; (3e58 <usbdc_register_handler+0x2c>)
    3e4e:	4798      	blx	r3
    3e50:	bd08      	pop	{r3, pc}
    3e52:	bf00      	nop
    3e54:	200007cc 	.word	0x200007cc
    3e58:	000017cd 	.word	0x000017cd
    3e5c:	200007d0 	.word	0x200007d0
    3e60:	200007d4 	.word	0x200007d4

00003e64 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    3e64:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    3e66:	4605      	mov	r5, r0
    3e68:	f240 3255 	movw	r2, #853	; 0x355
    3e6c:	490c      	ldr	r1, [pc, #48]	; (3ea0 <usbdc_init+0x3c>)
    3e6e:	3000      	adds	r0, #0
    3e70:	bf18      	it	ne
    3e72:	2001      	movne	r0, #1
    3e74:	4b0b      	ldr	r3, [pc, #44]	; (3ea4 <usbdc_init+0x40>)
    3e76:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    3e78:	4b0b      	ldr	r3, [pc, #44]	; (3ea8 <usbdc_init+0x44>)
    3e7a:	4798      	blx	r3
	if (rc < 0) {
    3e7c:	2800      	cmp	r0, #0
    3e7e:	db0e      	blt.n	3e9e <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    3e80:	4c0a      	ldr	r4, [pc, #40]	; (3eac <usbdc_init+0x48>)
    3e82:	2220      	movs	r2, #32
    3e84:	2100      	movs	r1, #0
    3e86:	4620      	mov	r0, r4
    3e88:	4b09      	ldr	r3, [pc, #36]	; (3eb0 <usbdc_init+0x4c>)
    3e8a:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    3e8c:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    3e8e:	4909      	ldr	r1, [pc, #36]	; (3eb4 <usbdc_init+0x50>)
    3e90:	2000      	movs	r0, #0
    3e92:	4c09      	ldr	r4, [pc, #36]	; (3eb8 <usbdc_init+0x54>)
    3e94:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    3e96:	4909      	ldr	r1, [pc, #36]	; (3ebc <usbdc_init+0x58>)
    3e98:	2001      	movs	r0, #1
    3e9a:	47a0      	blx	r4

	return 0;
    3e9c:	2000      	movs	r0, #0
}
    3e9e:	bd38      	pop	{r3, r4, r5, pc}
    3ea0:	0000461c 	.word	0x0000461c
    3ea4:	00001771 	.word	0x00001771
    3ea8:	00001425 	.word	0x00001425
    3eac:	200007c8 	.word	0x200007c8
    3eb0:	000041e9 	.word	0x000041e9
    3eb4:	000038e5 	.word	0x000038e5
    3eb8:	0000148d 	.word	0x0000148d
    3ebc:	000039d1 	.word	0x000039d1

00003ec0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    3ec0:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    3ec2:	4601      	mov	r1, r0
    3ec4:	4801      	ldr	r0, [pc, #4]	; (3ecc <usbdc_register_function+0xc>)
    3ec6:	4b02      	ldr	r3, [pc, #8]	; (3ed0 <usbdc_register_function+0x10>)
    3ec8:	4798      	blx	r3
    3eca:	bd08      	pop	{r3, pc}
    3ecc:	200007d8 	.word	0x200007d8
    3ed0:	000017cd 	.word	0x000017cd

00003ed4 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    3ed4:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    3ed6:	4b0a      	ldr	r3, [pc, #40]	; (3f00 <usbdc_start+0x2c>)
    3ed8:	7e9b      	ldrb	r3, [r3, #26]
    3eda:	b95b      	cbnz	r3, 3ef4 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    3edc:	b168      	cbz	r0, 3efa <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    3ede:	4b08      	ldr	r3, [pc, #32]	; (3f00 <usbdc_start+0x2c>)
    3ee0:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    3ee2:	6802      	ldr	r2, [r0, #0]
    3ee4:	79d2      	ldrb	r2, [r2, #7]
    3ee6:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    3ee8:	2201      	movs	r2, #1
    3eea:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    3eec:	4b05      	ldr	r3, [pc, #20]	; (3f04 <usbdc_start+0x30>)
    3eee:	4798      	blx	r3
	return ERR_NONE;
    3ef0:	2000      	movs	r0, #0
    3ef2:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    3ef4:	f06f 0003 	mvn.w	r0, #3
    3ef8:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    3efa:	f06f 0008 	mvn.w	r0, #8
}
    3efe:	bd08      	pop	{r3, pc}
    3f00:	200007c8 	.word	0x200007c8
    3f04:	00001499 	.word	0x00001499

00003f08 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    3f08:	b508      	push	{r3, lr}
	usb_d_attach();
    3f0a:	4b01      	ldr	r3, [pc, #4]	; (3f10 <usbdc_attach+0x8>)
    3f0c:	4798      	blx	r3
    3f0e:	bd08      	pop	{r3, pc}
    3f10:	000014a5 	.word	0x000014a5

00003f14 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    3f14:	4b01      	ldr	r3, [pc, #4]	; (3f1c <usbdc_get_ctrl_buffer+0x8>)
    3f16:	6958      	ldr	r0, [r3, #20]
    3f18:	4770      	bx	lr
    3f1a:	bf00      	nop
    3f1c:	200007c8 	.word	0x200007c8

00003f20 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    3f20:	4b03      	ldr	r3, [pc, #12]	; (3f30 <usbdc_get_state+0x10>)
    3f22:	7e98      	ldrb	r0, [r3, #26]
    3f24:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    3f28:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    3f2a:	bf18      	it	ne
    3f2c:	2010      	movne	r0, #16
    3f2e:	4770      	bx	lr
    3f30:	200007c8 	.word	0x200007c8

00003f34 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3f34:	4288      	cmp	r0, r1
    3f36:	d214      	bcs.n	3f62 <usb_find_desc+0x2e>
	return desc[0];
    3f38:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3f3a:	2b01      	cmp	r3, #1
    3f3c:	d913      	bls.n	3f66 <usb_find_desc+0x32>
{
    3f3e:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    3f40:	7844      	ldrb	r4, [r0, #1]
    3f42:	4294      	cmp	r4, r2
    3f44:	d00a      	beq.n	3f5c <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    3f46:	4418      	add	r0, r3
	while (desc < eof) {
    3f48:	4281      	cmp	r1, r0
    3f4a:	d906      	bls.n	3f5a <usb_find_desc+0x26>
	return desc[0];
    3f4c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3f4e:	2b01      	cmp	r3, #1
    3f50:	d90b      	bls.n	3f6a <usb_find_desc+0x36>
	return desc[1];
    3f52:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    3f54:	4294      	cmp	r4, r2
    3f56:	d1f6      	bne.n	3f46 <usb_find_desc+0x12>
    3f58:	e000      	b.n	3f5c <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3f5a:	2000      	movs	r0, #0
}
    3f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    3f60:	4770      	bx	lr
	return NULL;
    3f62:	2000      	movs	r0, #0
    3f64:	4770      	bx	lr
		_desc_len_check();
    3f66:	2000      	movs	r0, #0
    3f68:	4770      	bx	lr
    3f6a:	2000      	movs	r0, #0
    3f6c:	e7f6      	b.n	3f5c <usb_find_desc+0x28>

00003f6e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3f6e:	4288      	cmp	r0, r1
    3f70:	d216      	bcs.n	3fa0 <usb_find_ep_desc+0x32>
	return desc[0];
    3f72:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3f74:	2b01      	cmp	r3, #1
    3f76:	d915      	bls.n	3fa4 <usb_find_ep_desc+0x36>
	return desc[1];
    3f78:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3f7a:	2a04      	cmp	r2, #4
    3f7c:	d014      	beq.n	3fa8 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3f7e:	2a05      	cmp	r2, #5
    3f80:	d00b      	beq.n	3f9a <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    3f82:	4418      	add	r0, r3
	while (desc < eof) {
    3f84:	4281      	cmp	r1, r0
    3f86:	d909      	bls.n	3f9c <usb_find_ep_desc+0x2e>
	return desc[0];
    3f88:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3f8a:	2b01      	cmp	r3, #1
    3f8c:	d90e      	bls.n	3fac <usb_find_ep_desc+0x3e>
	return desc[1];
    3f8e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3f90:	2a04      	cmp	r2, #4
    3f92:	d00d      	beq.n	3fb0 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3f94:	2a05      	cmp	r2, #5
    3f96:	d1f4      	bne.n	3f82 <usb_find_ep_desc+0x14>
    3f98:	e00b      	b.n	3fb2 <usb_find_ep_desc+0x44>
    3f9a:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3f9c:	2000      	movs	r0, #0
    3f9e:	4770      	bx	lr
    3fa0:	2000      	movs	r0, #0
    3fa2:	4770      	bx	lr
		_desc_len_check();
    3fa4:	2000      	movs	r0, #0
    3fa6:	4770      	bx	lr
	return NULL;
    3fa8:	2000      	movs	r0, #0
    3faa:	4770      	bx	lr
		_desc_len_check();
    3fac:	2000      	movs	r0, #0
    3fae:	4770      	bx	lr
	return NULL;
    3fb0:	2000      	movs	r0, #0
}
    3fb2:	4770      	bx	lr

00003fb4 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    3fb4:	b538      	push	{r3, r4, r5, lr}
    3fb6:	460c      	mov	r4, r1
    3fb8:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    3fba:	2202      	movs	r2, #2
    3fbc:	4b16      	ldr	r3, [pc, #88]	; (4018 <usb_find_cfg_desc+0x64>)
    3fbe:	4798      	blx	r3
	if (!desc) {
    3fc0:	4603      	mov	r3, r0
    3fc2:	b1e8      	cbz	r0, 4000 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    3fc4:	4284      	cmp	r4, r0
    3fc6:	d91d      	bls.n	4004 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    3fc8:	7802      	ldrb	r2, [r0, #0]
    3fca:	2a01      	cmp	r2, #1
    3fcc:	d91c      	bls.n	4008 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    3fce:	7842      	ldrb	r2, [r0, #1]
    3fd0:	2a02      	cmp	r2, #2
    3fd2:	d11b      	bne.n	400c <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    3fd4:	7942      	ldrb	r2, [r0, #5]
    3fd6:	42aa      	cmp	r2, r5
    3fd8:	d012      	beq.n	4000 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    3fda:	78d9      	ldrb	r1, [r3, #3]
    3fdc:	789a      	ldrb	r2, [r3, #2]
    3fde:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    3fe2:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    3fe6:	429c      	cmp	r4, r3
    3fe8:	d909      	bls.n	3ffe <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    3fea:	781a      	ldrb	r2, [r3, #0]
    3fec:	2a01      	cmp	r2, #1
    3fee:	d90f      	bls.n	4010 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    3ff0:	785a      	ldrb	r2, [r3, #1]
    3ff2:	2a02      	cmp	r2, #2
    3ff4:	d10e      	bne.n	4014 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    3ff6:	795a      	ldrb	r2, [r3, #5]
    3ff8:	42aa      	cmp	r2, r5
    3ffa:	d1ee      	bne.n	3fda <usb_find_cfg_desc+0x26>
    3ffc:	e000      	b.n	4000 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    3ffe:	2300      	movs	r3, #0
}
    4000:	4618      	mov	r0, r3
    4002:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    4004:	2300      	movs	r3, #0
    4006:	e7fb      	b.n	4000 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    4008:	2300      	movs	r3, #0
    400a:	e7f9      	b.n	4000 <usb_find_cfg_desc+0x4c>
	return NULL;
    400c:	2300      	movs	r3, #0
    400e:	e7f7      	b.n	4000 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    4010:	2300      	movs	r3, #0
    4012:	e7f5      	b.n	4000 <usb_find_cfg_desc+0x4c>
	return NULL;
    4014:	2300      	movs	r3, #0
    4016:	e7f3      	b.n	4000 <usb_find_cfg_desc+0x4c>
    4018:	00003f35 	.word	0x00003f35

0000401c <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    401c:	4288      	cmp	r0, r1
    401e:	d217      	bcs.n	4050 <usb_find_str_desc+0x34>
{
    4020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4024:	460d      	mov	r5, r1
    4026:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    4028:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    402a:	f04f 0803 	mov.w	r8, #3
    402e:	4f0c      	ldr	r7, [pc, #48]	; (4060 <usb_find_str_desc+0x44>)
    4030:	4642      	mov	r2, r8
    4032:	4629      	mov	r1, r5
    4034:	47b8      	blx	r7
		if (desc) {
    4036:	4603      	mov	r3, r0
    4038:	b170      	cbz	r0, 4058 <usb_find_str_desc+0x3c>
	return desc[0];
    403a:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    403c:	2801      	cmp	r0, #1
    403e:	d90a      	bls.n	4056 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    4040:	42a6      	cmp	r6, r4
    4042:	d009      	beq.n	4058 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    4044:	4418      	add	r0, r3
    4046:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    4048:	4285      	cmp	r5, r0
    404a:	d8f1      	bhi.n	4030 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    404c:	2300      	movs	r3, #0
    404e:	e003      	b.n	4058 <usb_find_str_desc+0x3c>
    4050:	2300      	movs	r3, #0
}
    4052:	4618      	mov	r0, r3
    4054:	4770      	bx	lr
			_desc_len_check();
    4056:	2300      	movs	r3, #0
}
    4058:	4618      	mov	r0, r3
    405a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    405e:	bf00      	nop
    4060:	00003f35 	.word	0x00003f35

00004064 <__libc_init_array>:
    4064:	b570      	push	{r4, r5, r6, lr}
    4066:	4e0f      	ldr	r6, [pc, #60]	; (40a4 <__libc_init_array+0x40>)
    4068:	4d0f      	ldr	r5, [pc, #60]	; (40a8 <__libc_init_array+0x44>)
    406a:	1b76      	subs	r6, r6, r5
    406c:	10b6      	asrs	r6, r6, #2
    406e:	bf18      	it	ne
    4070:	2400      	movne	r4, #0
    4072:	d005      	beq.n	4080 <__libc_init_array+0x1c>
    4074:	3401      	adds	r4, #1
    4076:	f855 3b04 	ldr.w	r3, [r5], #4
    407a:	4798      	blx	r3
    407c:	42a6      	cmp	r6, r4
    407e:	d1f9      	bne.n	4074 <__libc_init_array+0x10>
    4080:	4e0a      	ldr	r6, [pc, #40]	; (40ac <__libc_init_array+0x48>)
    4082:	4d0b      	ldr	r5, [pc, #44]	; (40b0 <__libc_init_array+0x4c>)
    4084:	1b76      	subs	r6, r6, r5
    4086:	f000 fad7 	bl	4638 <_init>
    408a:	10b6      	asrs	r6, r6, #2
    408c:	bf18      	it	ne
    408e:	2400      	movne	r4, #0
    4090:	d006      	beq.n	40a0 <__libc_init_array+0x3c>
    4092:	3401      	adds	r4, #1
    4094:	f855 3b04 	ldr.w	r3, [r5], #4
    4098:	4798      	blx	r3
    409a:	42a6      	cmp	r6, r4
    409c:	d1f9      	bne.n	4092 <__libc_init_array+0x2e>
    409e:	bd70      	pop	{r4, r5, r6, pc}
    40a0:	bd70      	pop	{r4, r5, r6, pc}
    40a2:	bf00      	nop
    40a4:	00004644 	.word	0x00004644
    40a8:	00004644 	.word	0x00004644
    40ac:	0000464c 	.word	0x0000464c
    40b0:	00004644 	.word	0x00004644

000040b4 <memcpy>:
    40b4:	4684      	mov	ip, r0
    40b6:	ea41 0300 	orr.w	r3, r1, r0
    40ba:	f013 0303 	ands.w	r3, r3, #3
    40be:	d16d      	bne.n	419c <memcpy+0xe8>
    40c0:	3a40      	subs	r2, #64	; 0x40
    40c2:	d341      	bcc.n	4148 <memcpy+0x94>
    40c4:	f851 3b04 	ldr.w	r3, [r1], #4
    40c8:	f840 3b04 	str.w	r3, [r0], #4
    40cc:	f851 3b04 	ldr.w	r3, [r1], #4
    40d0:	f840 3b04 	str.w	r3, [r0], #4
    40d4:	f851 3b04 	ldr.w	r3, [r1], #4
    40d8:	f840 3b04 	str.w	r3, [r0], #4
    40dc:	f851 3b04 	ldr.w	r3, [r1], #4
    40e0:	f840 3b04 	str.w	r3, [r0], #4
    40e4:	f851 3b04 	ldr.w	r3, [r1], #4
    40e8:	f840 3b04 	str.w	r3, [r0], #4
    40ec:	f851 3b04 	ldr.w	r3, [r1], #4
    40f0:	f840 3b04 	str.w	r3, [r0], #4
    40f4:	f851 3b04 	ldr.w	r3, [r1], #4
    40f8:	f840 3b04 	str.w	r3, [r0], #4
    40fc:	f851 3b04 	ldr.w	r3, [r1], #4
    4100:	f840 3b04 	str.w	r3, [r0], #4
    4104:	f851 3b04 	ldr.w	r3, [r1], #4
    4108:	f840 3b04 	str.w	r3, [r0], #4
    410c:	f851 3b04 	ldr.w	r3, [r1], #4
    4110:	f840 3b04 	str.w	r3, [r0], #4
    4114:	f851 3b04 	ldr.w	r3, [r1], #4
    4118:	f840 3b04 	str.w	r3, [r0], #4
    411c:	f851 3b04 	ldr.w	r3, [r1], #4
    4120:	f840 3b04 	str.w	r3, [r0], #4
    4124:	f851 3b04 	ldr.w	r3, [r1], #4
    4128:	f840 3b04 	str.w	r3, [r0], #4
    412c:	f851 3b04 	ldr.w	r3, [r1], #4
    4130:	f840 3b04 	str.w	r3, [r0], #4
    4134:	f851 3b04 	ldr.w	r3, [r1], #4
    4138:	f840 3b04 	str.w	r3, [r0], #4
    413c:	f851 3b04 	ldr.w	r3, [r1], #4
    4140:	f840 3b04 	str.w	r3, [r0], #4
    4144:	3a40      	subs	r2, #64	; 0x40
    4146:	d2bd      	bcs.n	40c4 <memcpy+0x10>
    4148:	3230      	adds	r2, #48	; 0x30
    414a:	d311      	bcc.n	4170 <memcpy+0xbc>
    414c:	f851 3b04 	ldr.w	r3, [r1], #4
    4150:	f840 3b04 	str.w	r3, [r0], #4
    4154:	f851 3b04 	ldr.w	r3, [r1], #4
    4158:	f840 3b04 	str.w	r3, [r0], #4
    415c:	f851 3b04 	ldr.w	r3, [r1], #4
    4160:	f840 3b04 	str.w	r3, [r0], #4
    4164:	f851 3b04 	ldr.w	r3, [r1], #4
    4168:	f840 3b04 	str.w	r3, [r0], #4
    416c:	3a10      	subs	r2, #16
    416e:	d2ed      	bcs.n	414c <memcpy+0x98>
    4170:	320c      	adds	r2, #12
    4172:	d305      	bcc.n	4180 <memcpy+0xcc>
    4174:	f851 3b04 	ldr.w	r3, [r1], #4
    4178:	f840 3b04 	str.w	r3, [r0], #4
    417c:	3a04      	subs	r2, #4
    417e:	d2f9      	bcs.n	4174 <memcpy+0xc0>
    4180:	3204      	adds	r2, #4
    4182:	d008      	beq.n	4196 <memcpy+0xe2>
    4184:	07d2      	lsls	r2, r2, #31
    4186:	bf1c      	itt	ne
    4188:	f811 3b01 	ldrbne.w	r3, [r1], #1
    418c:	f800 3b01 	strbne.w	r3, [r0], #1
    4190:	d301      	bcc.n	4196 <memcpy+0xe2>
    4192:	880b      	ldrh	r3, [r1, #0]
    4194:	8003      	strh	r3, [r0, #0]
    4196:	4660      	mov	r0, ip
    4198:	4770      	bx	lr
    419a:	bf00      	nop
    419c:	2a08      	cmp	r2, #8
    419e:	d313      	bcc.n	41c8 <memcpy+0x114>
    41a0:	078b      	lsls	r3, r1, #30
    41a2:	d08d      	beq.n	40c0 <memcpy+0xc>
    41a4:	f010 0303 	ands.w	r3, r0, #3
    41a8:	d08a      	beq.n	40c0 <memcpy+0xc>
    41aa:	f1c3 0304 	rsb	r3, r3, #4
    41ae:	1ad2      	subs	r2, r2, r3
    41b0:	07db      	lsls	r3, r3, #31
    41b2:	bf1c      	itt	ne
    41b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    41b8:	f800 3b01 	strbne.w	r3, [r0], #1
    41bc:	d380      	bcc.n	40c0 <memcpy+0xc>
    41be:	f831 3b02 	ldrh.w	r3, [r1], #2
    41c2:	f820 3b02 	strh.w	r3, [r0], #2
    41c6:	e77b      	b.n	40c0 <memcpy+0xc>
    41c8:	3a04      	subs	r2, #4
    41ca:	d3d9      	bcc.n	4180 <memcpy+0xcc>
    41cc:	3a01      	subs	r2, #1
    41ce:	f811 3b01 	ldrb.w	r3, [r1], #1
    41d2:	f800 3b01 	strb.w	r3, [r0], #1
    41d6:	d2f9      	bcs.n	41cc <memcpy+0x118>
    41d8:	780b      	ldrb	r3, [r1, #0]
    41da:	7003      	strb	r3, [r0, #0]
    41dc:	784b      	ldrb	r3, [r1, #1]
    41de:	7043      	strb	r3, [r0, #1]
    41e0:	788b      	ldrb	r3, [r1, #2]
    41e2:	7083      	strb	r3, [r0, #2]
    41e4:	4660      	mov	r0, ip
    41e6:	4770      	bx	lr

000041e8 <memset>:
    41e8:	b470      	push	{r4, r5, r6}
    41ea:	0786      	lsls	r6, r0, #30
    41ec:	d046      	beq.n	427c <memset+0x94>
    41ee:	1e54      	subs	r4, r2, #1
    41f0:	2a00      	cmp	r2, #0
    41f2:	d041      	beq.n	4278 <memset+0x90>
    41f4:	b2ca      	uxtb	r2, r1
    41f6:	4603      	mov	r3, r0
    41f8:	e002      	b.n	4200 <memset+0x18>
    41fa:	f114 34ff 	adds.w	r4, r4, #4294967295
    41fe:	d33b      	bcc.n	4278 <memset+0x90>
    4200:	f803 2b01 	strb.w	r2, [r3], #1
    4204:	079d      	lsls	r5, r3, #30
    4206:	d1f8      	bne.n	41fa <memset+0x12>
    4208:	2c03      	cmp	r4, #3
    420a:	d92e      	bls.n	426a <memset+0x82>
    420c:	b2cd      	uxtb	r5, r1
    420e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    4212:	2c0f      	cmp	r4, #15
    4214:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4218:	d919      	bls.n	424e <memset+0x66>
    421a:	f103 0210 	add.w	r2, r3, #16
    421e:	4626      	mov	r6, r4
    4220:	3e10      	subs	r6, #16
    4222:	2e0f      	cmp	r6, #15
    4224:	f842 5c10 	str.w	r5, [r2, #-16]
    4228:	f842 5c0c 	str.w	r5, [r2, #-12]
    422c:	f842 5c08 	str.w	r5, [r2, #-8]
    4230:	f842 5c04 	str.w	r5, [r2, #-4]
    4234:	f102 0210 	add.w	r2, r2, #16
    4238:	d8f2      	bhi.n	4220 <memset+0x38>
    423a:	f1a4 0210 	sub.w	r2, r4, #16
    423e:	f022 020f 	bic.w	r2, r2, #15
    4242:	f004 040f 	and.w	r4, r4, #15
    4246:	3210      	adds	r2, #16
    4248:	2c03      	cmp	r4, #3
    424a:	4413      	add	r3, r2
    424c:	d90d      	bls.n	426a <memset+0x82>
    424e:	461e      	mov	r6, r3
    4250:	4622      	mov	r2, r4
    4252:	3a04      	subs	r2, #4
    4254:	2a03      	cmp	r2, #3
    4256:	f846 5b04 	str.w	r5, [r6], #4
    425a:	d8fa      	bhi.n	4252 <memset+0x6a>
    425c:	1f22      	subs	r2, r4, #4
    425e:	f022 0203 	bic.w	r2, r2, #3
    4262:	3204      	adds	r2, #4
    4264:	4413      	add	r3, r2
    4266:	f004 0403 	and.w	r4, r4, #3
    426a:	b12c      	cbz	r4, 4278 <memset+0x90>
    426c:	b2c9      	uxtb	r1, r1
    426e:	441c      	add	r4, r3
    4270:	f803 1b01 	strb.w	r1, [r3], #1
    4274:	429c      	cmp	r4, r3
    4276:	d1fb      	bne.n	4270 <memset+0x88>
    4278:	bc70      	pop	{r4, r5, r6}
    427a:	4770      	bx	lr
    427c:	4614      	mov	r4, r2
    427e:	4603      	mov	r3, r0
    4280:	e7c2      	b.n	4208 <memset+0x20>
    4282:	bf00      	nop

00004284 <register_fini>:
    4284:	4b02      	ldr	r3, [pc, #8]	; (4290 <register_fini+0xc>)
    4286:	b113      	cbz	r3, 428e <register_fini+0xa>
    4288:	4802      	ldr	r0, [pc, #8]	; (4294 <register_fini+0x10>)
    428a:	f000 b805 	b.w	4298 <atexit>
    428e:	4770      	bx	lr
    4290:	00000000 	.word	0x00000000
    4294:	000042a5 	.word	0x000042a5

00004298 <atexit>:
    4298:	2300      	movs	r3, #0
    429a:	4601      	mov	r1, r0
    429c:	461a      	mov	r2, r3
    429e:	4618      	mov	r0, r3
    42a0:	f000 b81e 	b.w	42e0 <__register_exitproc>

000042a4 <__libc_fini_array>:
    42a4:	b538      	push	{r3, r4, r5, lr}
    42a6:	4c0a      	ldr	r4, [pc, #40]	; (42d0 <__libc_fini_array+0x2c>)
    42a8:	4d0a      	ldr	r5, [pc, #40]	; (42d4 <__libc_fini_array+0x30>)
    42aa:	1b64      	subs	r4, r4, r5
    42ac:	10a4      	asrs	r4, r4, #2
    42ae:	d00a      	beq.n	42c6 <__libc_fini_array+0x22>
    42b0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    42b4:	3b01      	subs	r3, #1
    42b6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    42ba:	3c01      	subs	r4, #1
    42bc:	f855 3904 	ldr.w	r3, [r5], #-4
    42c0:	4798      	blx	r3
    42c2:	2c00      	cmp	r4, #0
    42c4:	d1f9      	bne.n	42ba <__libc_fini_array+0x16>
    42c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    42ca:	f000 b9bf 	b.w	464c <_fini>
    42ce:	bf00      	nop
    42d0:	0000465c 	.word	0x0000465c
    42d4:	00004658 	.word	0x00004658

000042d8 <__retarget_lock_acquire_recursive>:
    42d8:	4770      	bx	lr
    42da:	bf00      	nop

000042dc <__retarget_lock_release_recursive>:
    42dc:	4770      	bx	lr
    42de:	bf00      	nop

000042e0 <__register_exitproc>:
    42e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    42e4:	4d2c      	ldr	r5, [pc, #176]	; (4398 <__register_exitproc+0xb8>)
    42e6:	4606      	mov	r6, r0
    42e8:	6828      	ldr	r0, [r5, #0]
    42ea:	4698      	mov	r8, r3
    42ec:	460f      	mov	r7, r1
    42ee:	4691      	mov	r9, r2
    42f0:	f7ff fff2 	bl	42d8 <__retarget_lock_acquire_recursive>
    42f4:	4b29      	ldr	r3, [pc, #164]	; (439c <__register_exitproc+0xbc>)
    42f6:	681c      	ldr	r4, [r3, #0]
    42f8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    42fc:	2b00      	cmp	r3, #0
    42fe:	d03e      	beq.n	437e <__register_exitproc+0x9e>
    4300:	685a      	ldr	r2, [r3, #4]
    4302:	2a1f      	cmp	r2, #31
    4304:	dc1c      	bgt.n	4340 <__register_exitproc+0x60>
    4306:	f102 0e01 	add.w	lr, r2, #1
    430a:	b176      	cbz	r6, 432a <__register_exitproc+0x4a>
    430c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    4310:	2401      	movs	r4, #1
    4312:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    4316:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    431a:	4094      	lsls	r4, r2
    431c:	4320      	orrs	r0, r4
    431e:	2e02      	cmp	r6, #2
    4320:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    4324:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    4328:	d023      	beq.n	4372 <__register_exitproc+0x92>
    432a:	3202      	adds	r2, #2
    432c:	f8c3 e004 	str.w	lr, [r3, #4]
    4330:	6828      	ldr	r0, [r5, #0]
    4332:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    4336:	f7ff ffd1 	bl	42dc <__retarget_lock_release_recursive>
    433a:	2000      	movs	r0, #0
    433c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4340:	4b17      	ldr	r3, [pc, #92]	; (43a0 <__register_exitproc+0xc0>)
    4342:	b30b      	cbz	r3, 4388 <__register_exitproc+0xa8>
    4344:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4348:	f3af 8000 	nop.w
    434c:	4603      	mov	r3, r0
    434e:	b1d8      	cbz	r0, 4388 <__register_exitproc+0xa8>
    4350:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    4354:	6002      	str	r2, [r0, #0]
    4356:	2100      	movs	r1, #0
    4358:	6041      	str	r1, [r0, #4]
    435a:	460a      	mov	r2, r1
    435c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    4360:	f04f 0e01 	mov.w	lr, #1
    4364:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    4368:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    436c:	2e00      	cmp	r6, #0
    436e:	d0dc      	beq.n	432a <__register_exitproc+0x4a>
    4370:	e7cc      	b.n	430c <__register_exitproc+0x2c>
    4372:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    4376:	430c      	orrs	r4, r1
    4378:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    437c:	e7d5      	b.n	432a <__register_exitproc+0x4a>
    437e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    4382:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    4386:	e7bb      	b.n	4300 <__register_exitproc+0x20>
    4388:	6828      	ldr	r0, [r5, #0]
    438a:	f7ff ffa7 	bl	42dc <__retarget_lock_release_recursive>
    438e:	f04f 30ff 	mov.w	r0, #4294967295
    4392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4396:	bf00      	nop
    4398:	20000490 	.word	0x20000490
    439c:	00004634 	.word	0x00004634
    43a0:	00000000 	.word	0x00000000
    43a4:	682f2e2e 	.word	0x682f2e2e
    43a8:	732f6c61 	.word	0x732f6c61
    43ac:	682f6372 	.word	0x682f6372
    43b0:	615f6c61 	.word	0x615f6c61
    43b4:	735f6364 	.word	0x735f6364
    43b8:	2e636e79 	.word	0x2e636e79
    43bc:	00000063 	.word	0x00000063
    43c0:	682f2e2e 	.word	0x682f2e2e
    43c4:	732f6c61 	.word	0x732f6c61
    43c8:	682f6372 	.word	0x682f6372
    43cc:	735f6c61 	.word	0x735f6c61
    43d0:	6d5f6970 	.word	0x6d5f6970
    43d4:	7973615f 	.word	0x7973615f
    43d8:	632e636e 	.word	0x632e636e
    43dc:	00000000 	.word	0x00000000
    43e0:	682f2e2e 	.word	0x682f2e2e
    43e4:	732f6c61 	.word	0x732f6c61
    43e8:	682f6372 	.word	0x682f6372
    43ec:	735f6c61 	.word	0x735f6c61
    43f0:	6d5f6970 	.word	0x6d5f6970
    43f4:	6e79735f 	.word	0x6e79735f
    43f8:	00632e63 	.word	0x00632e63
    43fc:	682f2e2e 	.word	0x682f2e2e
    4400:	732f6c61 	.word	0x732f6c61
    4404:	682f6372 	.word	0x682f6372
    4408:	745f6c61 	.word	0x745f6c61
    440c:	72656d69 	.word	0x72656d69
    4410:	0000632e 	.word	0x0000632e
    4414:	682f2e2e 	.word	0x682f2e2e
    4418:	752f6c61 	.word	0x752f6c61
    441c:	736c6974 	.word	0x736c6974
    4420:	6372732f 	.word	0x6372732f
    4424:	6974752f 	.word	0x6974752f
    4428:	6c5f736c 	.word	0x6c5f736c
    442c:	2e747369 	.word	0x2e747369
    4430:	00000063 	.word	0x00000063

00004434 <_adcs>:
    4434:	01000000 00800000 0000181d 00000000     ................
	...
    444c:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    445c:	632e6364 00000000                       dc.c....

00004464 <user_mux_confs>:
    4464:	00000100 00000000 00000000 00000000     ................
	...

000044a8 <channel_confs>:
    44a8:	060c060c 00000000 00000000 00000000     ................
	...

000044e8 <interrupt_cfg>:
	...
    4568:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    4578:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    4588:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    4598:	43000800 43000c00                       ...C...C

000045a0 <_i2cms>:
	...

000045b8 <sercomspi_regs>:
    45b8:	0020000c 00020000 00000000 01ff00fe     .. .............
    45c8:	20000c00 02000000 00000000 ff007700     ... .........w..
    45d8:	00000401 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    45e8:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

000045f8 <_usb_ep_cfgs>:
    45f8:	200006e4 00000000 00000040 200006a4     ... ....@...... 
    4608:	00000000 00000040 20000664 00000000     ....@...d.. ....
    4618:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    4628:	73752f65 2e636462 00000063              e/usbdc.c...

00004634 <_global_impure_ptr>:
    4634:	20000068                                h.. 

00004638 <_init>:
    4638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    463a:	bf00      	nop
    463c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    463e:	bc08      	pop	{r3}
    4640:	469e      	mov	lr, r3
    4642:	4770      	bx	lr

00004644 <__init_array_start>:
    4644:	00004285 	.word	0x00004285

00004648 <__frame_dummy_init_array_entry>:
    4648:	00000289                                ....

0000464c <_fini>:
    464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    464e:	bf00      	nop
    4650:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4652:	bc08      	pop	{r3}
    4654:	469e      	mov	lr, r3
    4656:	4770      	bx	lr

00004658 <__fini_array_start>:
    4658:	00000265 	.word	0x00000265
