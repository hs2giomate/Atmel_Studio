
TimerClass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004040  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004d4  20000000  00004040  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000204d4  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000204d4  2**0
                  CONTENTS
  4 .bss          00000440  200004d4  00004514  000204d4  2**2
                  ALLOC
  5 .stack        00010004  20000914  00004954  000204d4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020502  2**0
                  CONTENTS, READONLY
  8 .debug_info   000313bd  00000000  00000000  0002055b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000055d0  00000000  00000000  00051918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ccac  00000000  00000000  00056ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000bf0  00000000  00000000  00063b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f40  00000000  00000000  00064784  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d87f  00000000  00000000  000656c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019c18  00000000  00000000  000a2f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012a94f  00000000  00000000  000bcb5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000023b0  00000000  00000000  001e74ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 09 01 20 b9 04 00 00 3d 05 00 00 3d 05 00 00     ... ....=...=...
      10:	3d 05 00 00 3d 05 00 00 3d 05 00 00 00 00 00 00     =...=...=.......
	...
      2c:	3d 05 00 00 3d 05 00 00 00 00 00 00 3d 05 00 00     =...=.......=...
      3c:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
      4c:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
      5c:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
      6c:	7d 18 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     }...=...=...=...
      7c:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
      8c:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
      9c:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
      ac:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
      bc:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
      cc:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
      dc:	3d 05 00 00 3d 05 00 00 3d 05 00 00 00 00 00 00     =...=...=.......
	...
      f4:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     104:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     114:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     124:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     134:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     144:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     154:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     164:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     174:	3d 05 00 00 3d 05 00 00 3d 05 00 00 09 2f 00 00     =...=...=..../..
     184:	15 2f 00 00 21 2f 00 00 2d 2f 00 00 3d 05 00 00     ./..!/..-/..=...
     194:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     1a4:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     1b4:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     1c4:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     1d4:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     1e4:	3d 05 00 00 3d 05 00 00 51 1c 00 00 3d 05 00 00     =...=...Q...=...
     1f4:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     204:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     214:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     224:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     234:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     244:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
     254:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200004d4 	.word	0x200004d4
     280:	00000000 	.word	0x00000000
     284:	00004040 	.word	0x00004040

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00004040 	.word	0x00004040
     2c4:	200004d8 	.word	0x200004d8
     2c8:	00004040 	.word	0x00004040
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
     2d8:	4a05      	ldr	r2, [pc, #20]	; (2f0 <_ZN5PrintC1Ev+0x20>)
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	601a      	str	r2, [r3, #0]
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	2200      	movs	r2, #0
     2e2:	605a      	str	r2, [r3, #4]
     2e4:	687b      	ldr	r3, [r7, #4]
     2e6:	4618      	mov	r0, r3
     2e8:	370c      	adds	r7, #12
     2ea:	46bd      	mov	sp, r7
     2ec:	bc80      	pop	{r7}
     2ee:	4770      	bx	lr
     2f0:	00003e30 	.word	0x00003e30

000002f4 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     2f4:	b480      	push	{r7}
     2f6:	b083      	sub	sp, #12
     2f8:	af00      	add	r7, sp, #0
     2fa:	6078      	str	r0, [r7, #4]
     2fc:	2300      	movs	r3, #0
     2fe:	4618      	mov	r0, r3
     300:	370c      	adds	r7, #12
     302:	46bd      	mov	sp, r7
     304:	bc80      	pop	{r7}
     306:	4770      	bx	lr

00000308 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     308:	b480      	push	{r7}
     30a:	b083      	sub	sp, #12
     30c:	af00      	add	r7, sp, #0
     30e:	6078      	str	r0, [r7, #4]
     310:	bf00      	nop
     312:	370c      	adds	r7, #12
     314:	46bd      	mov	sp, r7
     316:	bc80      	pop	{r7}
     318:	4770      	bx	lr
	...

0000031c <_ZN6StreamC1Ev>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
     31c:	b580      	push	{r7, lr}
     31e:	b082      	sub	sp, #8
     320:	af00      	add	r7, sp, #0
     322:	6078      	str	r0, [r7, #4]
     324:	687b      	ldr	r3, [r7, #4]
     326:	4618      	mov	r0, r3
     328:	4b06      	ldr	r3, [pc, #24]	; (344 <_ZN6StreamC1Ev+0x28>)
     32a:	4798      	blx	r3
     32c:	4a06      	ldr	r2, [pc, #24]	; (348 <_ZN6StreamC1Ev+0x2c>)
     32e:	687b      	ldr	r3, [r7, #4]
     330:	601a      	str	r2, [r3, #0]
     332:	687b      	ldr	r3, [r7, #4]
     334:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     338:	609a      	str	r2, [r3, #8]
     33a:	687b      	ldr	r3, [r7, #4]
     33c:	4618      	mov	r0, r3
     33e:	3708      	adds	r7, #8
     340:	46bd      	mov	sp, r7
     342:	bd80      	pop	{r7, pc}
     344:	000002d1 	.word	0x000002d1
     348:	00003dfc 	.word	0x00003dfc

0000034c <_ZN9CDC_ClassC1Ev>:
	/* No error. */
	return false;
}

// default constructor
CDC_Class::CDC_Class()
     34c:	b580      	push	{r7, lr}
     34e:	b082      	sub	sp, #8
     350:	af00      	add	r7, sp, #0
     352:	6078      	str	r0, [r7, #4]
     354:	687b      	ldr	r3, [r7, #4]
     356:	4618      	mov	r0, r3
     358:	4b06      	ldr	r3, [pc, #24]	; (374 <_ZN9CDC_ClassC1Ev+0x28>)
     35a:	4798      	blx	r3
     35c:	4a06      	ldr	r2, [pc, #24]	; (378 <_ZN9CDC_ClassC1Ev+0x2c>)
     35e:	687b      	ldr	r3, [r7, #4]
     360:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
     362:	687b      	ldr	r3, [r7, #4]
     364:	f04f 32ff 	mov.w	r2, #4294967295
     368:	615a      	str	r2, [r3, #20]
} //CDC_Class
     36a:	687b      	ldr	r3, [r7, #4]
     36c:	4618      	mov	r0, r3
     36e:	3708      	adds	r7, #8
     370:	46bd      	mov	sp, r7
     372:	bd80      	pop	{r7, pc}
     374:	0000031d 	.word	0x0000031d
     378:	00003dd4 	.word	0x00003dd4

0000037c <_ZN9CDC_Class4peekEv>:
	return cdcdf_acm_is_enabled();
	
}

int CDC_Class::peek(void)
{
     37c:	b580      	push	{r7, lr}
     37e:	b082      	sub	sp, #8
     380:	af00      	add	r7, sp, #0
     382:	6078      	str	r0, [r7, #4]
	if (_serialPeek != -1)
     384:	687b      	ldr	r3, [r7, #4]
     386:	695b      	ldr	r3, [r3, #20]
     388:	f1b3 3fff 	cmp.w	r3, #4294967295
     38c:	bf14      	ite	ne
     38e:	2301      	movne	r3, #1
     390:	2300      	moveq	r3, #0
     392:	b2db      	uxtb	r3, r3
     394:	2b00      	cmp	r3, #0
     396:	d002      	beq.n	39e <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
     398:	687b      	ldr	r3, [r7, #4]
     39a:	695b      	ldr	r3, [r3, #20]
     39c:	e00a      	b.n	3b4 <_ZN9CDC_Class4peekEv+0x38>
	_serialPeek = read();
     39e:	687b      	ldr	r3, [r7, #4]
     3a0:	681b      	ldr	r3, [r3, #0]
     3a2:	3314      	adds	r3, #20
     3a4:	681b      	ldr	r3, [r3, #0]
     3a6:	6878      	ldr	r0, [r7, #4]
     3a8:	4798      	blx	r3
     3aa:	4602      	mov	r2, r0
     3ac:	687b      	ldr	r3, [r7, #4]
     3ae:	615a      	str	r2, [r3, #20]
	return _serialPeek;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	695b      	ldr	r3, [r3, #20]
}
     3b4:	4618      	mov	r0, r3
     3b6:	3708      	adds	r7, #8
     3b8:	46bd      	mov	sp, r7
     3ba:	bd80      	pop	{r7, pc}

000003bc <_ZN9CDC_Class4readEv>:

int CDC_Class::read(void)
{
     3bc:	b580      	push	{r7, lr}
     3be:	b084      	sub	sp, #16
     3c0:	af00      	add	r7, sp, #0
     3c2:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	rxReady=false;
     3c4:	687b      	ldr	r3, [r7, #4]
     3c6:	2200      	movs	r2, #0
     3c8:	745a      	strb	r2, [r3, #17]
	cdcdf_acm_read(&r, 1);
     3ca:	f107 030f 	add.w	r3, r7, #15
     3ce:	2101      	movs	r1, #1
     3d0:	4618      	mov	r0, r3
     3d2:	4b08      	ldr	r3, [pc, #32]	; (3f4 <_ZN9CDC_Class4readEv+0x38>)
     3d4:	4798      	blx	r3
	while(!rxReady);
     3d6:	687b      	ldr	r3, [r7, #4]
     3d8:	7c5b      	ldrb	r3, [r3, #17]
     3da:	b2db      	uxtb	r3, r3
     3dc:	f083 0301 	eor.w	r3, r3, #1
     3e0:	b2db      	uxtb	r3, r3
     3e2:	2b00      	cmp	r3, #0
     3e4:	d000      	beq.n	3e8 <_ZN9CDC_Class4readEv+0x2c>
     3e6:	e7f6      	b.n	3d6 <_ZN9CDC_Class4readEv+0x1a>
	return (int)r;
     3e8:	7bfb      	ldrb	r3, [r7, #15]
}
     3ea:	4618      	mov	r0, r3
     3ec:	3710      	adds	r7, #16
     3ee:	46bd      	mov	sp, r7
     3f0:	bd80      	pop	{r7, pc}
     3f2:	bf00      	nop
     3f4:	000031dd 	.word	0x000031dd

000003f8 <_ZN9CDC_Class5flushEv>:

void	CDC_Class::flush(void){
     3f8:	b580      	push	{r7, lr}
     3fa:	b082      	sub	sp, #8
     3fc:	af00      	add	r7, sp, #0
     3fe:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
     400:	2140      	movs	r1, #64	; 0x40
     402:	4803      	ldr	r0, [pc, #12]	; (410 <_ZN9CDC_Class5flushEv+0x18>)
     404:	4b03      	ldr	r3, [pc, #12]	; (414 <_ZN9CDC_Class5flushEv+0x1c>)
     406:	4798      	blx	r3
}
     408:	bf00      	nop
     40a:	3708      	adds	r7, #8
     40c:	46bd      	mov	sp, r7
     40e:	bd80      	pop	{r7, pc}
     410:	200004f0 	.word	0x200004f0
     414:	00003205 	.word	0x00003205

00000418 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
     418:	b580      	push	{r7, lr}
     41a:	b082      	sub	sp, #8
     41c:	af00      	add	r7, sp, #0
     41e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
     420:	4b02      	ldr	r3, [pc, #8]	; (42c <_ZN9CDC_Class5clearEv+0x14>)
     422:	4798      	blx	r3
}
     424:	bf00      	nop
     426:	3708      	adds	r7, #8
     428:	46bd      	mov	sp, r7
     42a:	bd80      	pop	{r7, pc}
     42c:	0000322d 	.word	0x0000322d

00000430 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
     430:	b580      	push	{r7, lr}
     432:	b082      	sub	sp, #8
     434:	af00      	add	r7, sp, #0
     436:	6078      	str	r0, [r7, #4]
     438:	460b      	mov	r3, r1
     43a:	70fb      	strb	r3, [r7, #3]
	return write(&c, 1);
     43c:	687b      	ldr	r3, [r7, #4]
     43e:	681b      	ldr	r3, [r3, #0]
     440:	3304      	adds	r3, #4
     442:	681b      	ldr	r3, [r3, #0]
     444:	1cf9      	adds	r1, r7, #3
     446:	2201      	movs	r2, #1
     448:	6878      	ldr	r0, [r7, #4]
     44a:	4798      	blx	r3
     44c:	4603      	mov	r3, r0
}
     44e:	4618      	mov	r0, r3
     450:	3708      	adds	r7, #8
     452:	46bd      	mov	sp, r7
     454:	bd80      	pop	{r7, pc}
	...

00000458 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
     458:	b580      	push	{r7, lr}
     45a:	b086      	sub	sp, #24
     45c:	af00      	add	r7, sp, #0
     45e:	60f8      	str	r0, [r7, #12]
     460:	60b9      	str	r1, [r7, #8]
     462:	607a      	str	r2, [r7, #4]
	uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
     464:	6879      	ldr	r1, [r7, #4]
     466:	68b8      	ldr	r0, [r7, #8]
     468:	4b04      	ldr	r3, [pc, #16]	; (47c <_ZN9CDC_Class5writeEPKhj+0x24>)
     46a:	4798      	blx	r3
     46c:	4603      	mov	r3, r0
     46e:	617b      	str	r3, [r7, #20]

	
		return r;
     470:	697b      	ldr	r3, [r7, #20]

}
     472:	4618      	mov	r0, r3
     474:	3718      	adds	r7, #24
     476:	46bd      	mov	sp, r7
     478:	bd80      	pop	{r7, pc}
     47a:	bf00      	nop
     47c:	00003205 	.word	0x00003205

00000480 <_ZN9CDC_Class9availableEv>:

int	CDC_Class::available(void){
     480:	b480      	push	{r7}
     482:	b083      	sub	sp, #12
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
     488:	687b      	ldr	r3, [r7, #4]
     48a:	7c5b      	ldrb	r3, [r3, #17]
     48c:	b2db      	uxtb	r3, r3
     48e:	2b00      	cmp	r3, #0
     490:	d006      	beq.n	4a0 <_ZN9CDC_Class9availableEv+0x20>
     492:	687b      	ldr	r3, [r7, #4]
     494:	7c1b      	ldrb	r3, [r3, #16]
     496:	b2db      	uxtb	r3, r3
     498:	2b00      	cmp	r3, #0
     49a:	d001      	beq.n	4a0 <_ZN9CDC_Class9availableEv+0x20>
     49c:	2301      	movs	r3, #1
     49e:	e000      	b.n	4a2 <_ZN9CDC_Class9availableEv+0x22>
     4a0:	2300      	movs	r3, #0
     4a2:	2b00      	cmp	r3, #0
     4a4:	d001      	beq.n	4aa <_ZN9CDC_Class9availableEv+0x2a>
	{
		return 1;
     4a6:	2301      	movs	r3, #1
     4a8:	e000      	b.n	4ac <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return 0;
     4aa:	2300      	movs	r3, #0
	}
	
}
     4ac:	4618      	mov	r0, r3
     4ae:	370c      	adds	r7, #12
     4b0:	46bd      	mov	sp, r7
     4b2:	bc80      	pop	{r7}
     4b4:	4770      	bx	lr
	...

000004b8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     4b8:	b580      	push	{r7, lr}
     4ba:	b082      	sub	sp, #8
     4bc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     4be:	4b16      	ldr	r3, [pc, #88]	; (518 <Reset_Handler+0x60>)
     4c0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     4c2:	4b16      	ldr	r3, [pc, #88]	; (51c <Reset_Handler+0x64>)
     4c4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     4c6:	687a      	ldr	r2, [r7, #4]
     4c8:	683b      	ldr	r3, [r7, #0]
     4ca:	429a      	cmp	r2, r3
     4cc:	d00c      	beq.n	4e8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     4ce:	e007      	b.n	4e0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     4d0:	683b      	ldr	r3, [r7, #0]
     4d2:	1d1a      	adds	r2, r3, #4
     4d4:	603a      	str	r2, [r7, #0]
     4d6:	687a      	ldr	r2, [r7, #4]
     4d8:	1d11      	adds	r1, r2, #4
     4da:	6079      	str	r1, [r7, #4]
     4dc:	6812      	ldr	r2, [r2, #0]
     4de:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     4e0:	683b      	ldr	r3, [r7, #0]
     4e2:	4a0f      	ldr	r2, [pc, #60]	; (520 <Reset_Handler+0x68>)
     4e4:	4293      	cmp	r3, r2
     4e6:	d3f3      	bcc.n	4d0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     4e8:	4b0e      	ldr	r3, [pc, #56]	; (524 <Reset_Handler+0x6c>)
     4ea:	603b      	str	r3, [r7, #0]
     4ec:	e004      	b.n	4f8 <Reset_Handler+0x40>
                *pDest++ = 0;
     4ee:	683b      	ldr	r3, [r7, #0]
     4f0:	1d1a      	adds	r2, r3, #4
     4f2:	603a      	str	r2, [r7, #0]
     4f4:	2200      	movs	r2, #0
     4f6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     4f8:	683b      	ldr	r3, [r7, #0]
     4fa:	4a0b      	ldr	r2, [pc, #44]	; (528 <Reset_Handler+0x70>)
     4fc:	4293      	cmp	r3, r2
     4fe:	d3f6      	bcc.n	4ee <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     500:	4b0a      	ldr	r3, [pc, #40]	; (52c <Reset_Handler+0x74>)
     502:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     504:	4a0a      	ldr	r2, [pc, #40]	; (530 <Reset_Handler+0x78>)
     506:	687b      	ldr	r3, [r7, #4]
     508:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     50c:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     50e:	4b09      	ldr	r3, [pc, #36]	; (534 <Reset_Handler+0x7c>)
     510:	4798      	blx	r3

        /* Branch to main function */
        main();
     512:	4b09      	ldr	r3, [pc, #36]	; (538 <Reset_Handler+0x80>)
     514:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     516:	e7fe      	b.n	516 <Reset_Handler+0x5e>
     518:	00004040 	.word	0x00004040
     51c:	20000000 	.word	0x20000000
     520:	200004d4 	.word	0x200004d4
     524:	200004d4 	.word	0x200004d4
     528:	20000914 	.word	0x20000914
     52c:	00000000 	.word	0x00000000
     530:	e000ed00 	.word	0xe000ed00
     534:	00003a8d 	.word	0x00003a8d
     538:	0000070d 	.word	0x0000070d

0000053c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     53c:	b480      	push	{r7}
     53e:	af00      	add	r7, sp, #0
        while (1) {
     540:	e7fe      	b.n	540 <Dummy_Handler+0x4>

00000542 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
     542:	b480      	push	{r7}
     544:	b083      	sub	sp, #12
     546:	af00      	add	r7, sp, #0
     548:	6078      	str	r0, [r7, #4]
    return (void *)0;
     54a:	2300      	movs	r3, #0
	}
     54c:	4618      	mov	r0, r3
     54e:	370c      	adds	r7, #12
     550:	46bd      	mov	sp, r7
     552:	bc80      	pop	{r7}
     554:	4770      	bx	lr

00000556 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
     556:	b480      	push	{r7}
     558:	af00      	add	r7, sp, #0
		}
     55a:	bf00      	nop
     55c:	46bd      	mov	sp, r7
     55e:	bc80      	pop	{r7}
     560:	4770      	bx	lr

00000562 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
     562:	b480      	push	{r7}
     564:	b083      	sub	sp, #12
     566:	af00      	add	r7, sp, #0
     568:	6078      	str	r0, [r7, #4]
     56a:	460b      	mov	r3, r1
     56c:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     56e:	78fb      	ldrb	r3, [r7, #3]
     570:	687a      	ldr	r2, [r7, #4]
     572:	01db      	lsls	r3, r3, #7
     574:	4413      	add	r3, r2
     576:	681b      	ldr	r3, [r3, #0]
}
     578:	4618      	mov	r0, r3
     57a:	370c      	adds	r7, #12
     57c:	46bd      	mov	sp, r7
     57e:	bc80      	pop	{r7}
     580:	4770      	bx	lr

00000582 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
     582:	b480      	push	{r7}
     584:	b083      	sub	sp, #12
     586:	af00      	add	r7, sp, #0
     588:	6078      	str	r0, [r7, #4]
     58a:	460b      	mov	r3, r1
     58c:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     58e:	78fb      	ldrb	r3, [r7, #3]
     590:	687a      	ldr	r2, [r7, #4]
     592:	01db      	lsls	r3, r3, #7
     594:	4413      	add	r3, r2
     596:	3310      	adds	r3, #16
     598:	681b      	ldr	r3, [r3, #0]
}
     59a:	4618      	mov	r0, r3
     59c:	370c      	adds	r7, #12
     59e:	46bd      	mov	sp, r7
     5a0:	bc80      	pop	{r7}
     5a2:	4770      	bx	lr

000005a4 <hri_port_toggle_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     5a4:	b480      	push	{r7}
     5a6:	b085      	sub	sp, #20
     5a8:	af00      	add	r7, sp, #0
     5aa:	60f8      	str	r0, [r7, #12]
     5ac:	460b      	mov	r3, r1
     5ae:	607a      	str	r2, [r7, #4]
     5b0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     5b2:	7afb      	ldrb	r3, [r7, #11]
     5b4:	68fa      	ldr	r2, [r7, #12]
     5b6:	01db      	lsls	r3, r3, #7
     5b8:	4413      	add	r3, r2
     5ba:	331c      	adds	r3, #28
     5bc:	687a      	ldr	r2, [r7, #4]
     5be:	601a      	str	r2, [r3, #0]
}
     5c0:	bf00      	nop
     5c2:	3714      	adds	r7, #20
     5c4:	46bd      	mov	sp, r7
     5c6:	bc80      	pop	{r7}
     5c8:	4770      	bx	lr

000005ca <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
     5ca:	b480      	push	{r7}
     5cc:	b083      	sub	sp, #12
     5ce:	af00      	add	r7, sp, #0
     5d0:	6078      	str	r0, [r7, #4]
     5d2:	460b      	mov	r3, r1
     5d4:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     5d6:	78fb      	ldrb	r3, [r7, #3]
     5d8:	687a      	ldr	r2, [r7, #4]
     5da:	01db      	lsls	r3, r3, #7
     5dc:	4413      	add	r3, r2
     5de:	3320      	adds	r3, #32
     5e0:	681b      	ldr	r3, [r3, #0]
}
     5e2:	4618      	mov	r0, r3
     5e4:	370c      	adds	r7, #12
     5e6:	46bd      	mov	sp, r7
     5e8:	bc80      	pop	{r7}
     5ea:	4770      	bx	lr

000005ec <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
     5ec:	b580      	push	{r7, lr}
     5ee:	b082      	sub	sp, #8
     5f0:	af00      	add	r7, sp, #0
     5f2:	4603      	mov	r3, r0
     5f4:	6039      	str	r1, [r7, #0]
     5f6:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
     5f8:	79fb      	ldrb	r3, [r7, #7]
     5fa:	683a      	ldr	r2, [r7, #0]
     5fc:	4619      	mov	r1, r3
     5fe:	4803      	ldr	r0, [pc, #12]	; (60c <_gpio_toggle_level+0x20>)
     600:	4b03      	ldr	r3, [pc, #12]	; (610 <_gpio_toggle_level+0x24>)
     602:	4798      	blx	r3
}
     604:	bf00      	nop
     606:	3708      	adds	r7, #8
     608:	46bd      	mov	sp, r7
     60a:	bd80      	pop	{r7, pc}
     60c:	41008000 	.word	0x41008000
     610:	000005a5 	.word	0x000005a5

00000614 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
     614:	b580      	push	{r7, lr}
     616:	b086      	sub	sp, #24
     618:	af00      	add	r7, sp, #0
     61a:	4603      	mov	r3, r0
     61c:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     61e:	f107 030c 	add.w	r3, r7, #12
     622:	4618      	mov	r0, r3
     624:	4b13      	ldr	r3, [pc, #76]	; (674 <_gpio_get_level+0x60>)
     626:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
     628:	79fb      	ldrb	r3, [r7, #7]
     62a:	4619      	mov	r1, r3
     62c:	4812      	ldr	r0, [pc, #72]	; (678 <_gpio_get_level+0x64>)
     62e:	4b13      	ldr	r3, [pc, #76]	; (67c <_gpio_get_level+0x68>)
     630:	4798      	blx	r3
     632:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
     634:	79fb      	ldrb	r3, [r7, #7]
     636:	4619      	mov	r1, r3
     638:	480f      	ldr	r0, [pc, #60]	; (678 <_gpio_get_level+0x64>)
     63a:	4b11      	ldr	r3, [pc, #68]	; (680 <_gpio_get_level+0x6c>)
     63c:	4798      	blx	r3
     63e:	4602      	mov	r2, r0
     640:	697b      	ldr	r3, [r7, #20]
     642:	43db      	mvns	r3, r3
     644:	4013      	ands	r3, r2
     646:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     648:	79fb      	ldrb	r3, [r7, #7]
     64a:	4619      	mov	r1, r3
     64c:	480a      	ldr	r0, [pc, #40]	; (678 <_gpio_get_level+0x64>)
     64e:	4b0d      	ldr	r3, [pc, #52]	; (684 <_gpio_get_level+0x70>)
     650:	4798      	blx	r3
     652:	4602      	mov	r2, r0
     654:	697b      	ldr	r3, [r7, #20]
     656:	4013      	ands	r3, r2
     658:	693a      	ldr	r2, [r7, #16]
     65a:	4313      	orrs	r3, r2
     65c:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
     65e:	f107 030c 	add.w	r3, r7, #12
     662:	4618      	mov	r0, r3
     664:	4b08      	ldr	r3, [pc, #32]	; (688 <_gpio_get_level+0x74>)
     666:	4798      	blx	r3

	return tmp;
     668:	693b      	ldr	r3, [r7, #16]
}
     66a:	4618      	mov	r0, r3
     66c:	3718      	adds	r7, #24
     66e:	46bd      	mov	sp, r7
     670:	bd80      	pop	{r7, pc}
     672:	bf00      	nop
     674:	00000b8d 	.word	0x00000b8d
     678:	41008000 	.word	0x41008000
     67c:	00000563 	.word	0x00000563
     680:	000005cb 	.word	0x000005cb
     684:	00000583 	.word	0x00000583
     688:	00000b9b 	.word	0x00000b9b

0000068c <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
     68c:	b580      	push	{r7, lr}
     68e:	b082      	sub	sp, #8
     690:	af00      	add	r7, sp, #0
     692:	4603      	mov	r3, r0
     694:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
     696:	79fb      	ldrb	r3, [r7, #7]
     698:	115b      	asrs	r3, r3, #5
     69a:	b2d8      	uxtb	r0, r3
     69c:	79fb      	ldrb	r3, [r7, #7]
     69e:	f003 031f 	and.w	r3, r3, #31
     6a2:	2201      	movs	r2, #1
     6a4:	fa02 f303 	lsl.w	r3, r2, r3
     6a8:	4619      	mov	r1, r3
     6aa:	4b03      	ldr	r3, [pc, #12]	; (6b8 <gpio_toggle_pin_level+0x2c>)
     6ac:	4798      	blx	r3
}
     6ae:	bf00      	nop
     6b0:	3708      	adds	r7, #8
     6b2:	46bd      	mov	sp, r7
     6b4:	bd80      	pop	{r7, pc}
     6b6:	bf00      	nop
     6b8:	000005ed 	.word	0x000005ed

000006bc <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
     6bc:	b580      	push	{r7, lr}
     6be:	b082      	sub	sp, #8
     6c0:	af00      	add	r7, sp, #0
     6c2:	4603      	mov	r3, r0
     6c4:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     6c6:	79fb      	ldrb	r3, [r7, #7]
     6c8:	115b      	asrs	r3, r3, #5
     6ca:	b2db      	uxtb	r3, r3
     6cc:	4618      	mov	r0, r3
     6ce:	4b09      	ldr	r3, [pc, #36]	; (6f4 <gpio_get_pin_level+0x38>)
     6d0:	4798      	blx	r3
     6d2:	4601      	mov	r1, r0
     6d4:	79fb      	ldrb	r3, [r7, #7]
     6d6:	f003 031f 	and.w	r3, r3, #31
     6da:	2201      	movs	r2, #1
     6dc:	fa02 f303 	lsl.w	r3, r2, r3
     6e0:	400b      	ands	r3, r1
     6e2:	2b00      	cmp	r3, #0
     6e4:	bf14      	ite	ne
     6e6:	2301      	movne	r3, #1
     6e8:	2300      	moveq	r3, #0
     6ea:	b2db      	uxtb	r3, r3
}
     6ec:	4618      	mov	r0, r3
     6ee:	3708      	adds	r7, #8
     6f0:	46bd      	mov	sp, r7
     6f2:	bd80      	pop	{r7, pc}
     6f4:	00000615 	.word	0x00000615

000006f8 <_Z10blink_LED0v>:

#include <atmel_start.h>

#include "Timer_Class.h"
#include "CDC_Class.h"
void blink_LED0(void){
     6f8:	b580      	push	{r7, lr}
     6fa:	af00      	add	r7, sp, #0
	gpio_toggle_pin_level(LED0);
     6fc:	2052      	movs	r0, #82	; 0x52
     6fe:	4b02      	ldr	r3, [pc, #8]	; (708 <_Z10blink_LED0v+0x10>)
     700:	4798      	blx	r3
}
     702:	bf00      	nop
     704:	bd80      	pop	{r7, pc}
     706:	bf00      	nop
     708:	0000068d 	.word	0x0000068d

0000070c <main>:

int main(void)
{
     70c:	b580      	push	{r7, lr}
     70e:	b092      	sub	sp, #72	; 0x48
     710:	af00      	add	r7, sp, #0
    /* Initialize the SAM system */
    atmel_start_init();
     712:	4b22      	ldr	r3, [pc, #136]	; (79c <main+0x90>)
     714:	4798      	blx	r3
	timer_start(&TIMER_0);
     716:	4822      	ldr	r0, [pc, #136]	; (7a0 <main+0x94>)
     718:	4b22      	ldr	r3, [pc, #136]	; (7a4 <main+0x98>)
     71a:	4798      	blx	r3
	CDC_Class	usb0;
     71c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
     720:	4618      	mov	r0, r3
     722:	4b21      	ldr	r3, [pc, #132]	; (7a8 <main+0x9c>)
     724:	4798      	blx	r3
	Timer_Class			timer1(&TIMER_1);
     726:	463b      	mov	r3, r7
     728:	4920      	ldr	r1, [pc, #128]	; (7ac <main+0xa0>)
     72a:	4618      	mov	r0, r3
     72c:	4b20      	ldr	r3, [pc, #128]	; (7b0 <main+0xa4>)
     72e:	4798      	blx	r3
	timer1.Init();
     730:	463b      	mov	r3, r7
     732:	4618      	mov	r0, r3
     734:	4b1f      	ldr	r3, [pc, #124]	; (7b4 <main+0xa8>)
     736:	4798      	blx	r3
	timer1.add_task((FUNC_PTR)blink_LED0,1000);
     738:	463b      	mov	r3, r7
     73a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     73e:	491e      	ldr	r1, [pc, #120]	; (7b8 <main+0xac>)
     740:	4618      	mov	r0, r3
     742:	4b1e      	ldr	r3, [pc, #120]	; (7bc <main+0xb0>)
     744:	4798      	blx	r3
	
    /* Replace with your application code */
    while (1) 
    {
		while (gpio_get_pin_level(SW0_Button));
     746:	203f      	movs	r0, #63	; 0x3f
     748:	4b1d      	ldr	r3, [pc, #116]	; (7c0 <main+0xb4>)
     74a:	4798      	blx	r3
     74c:	4603      	mov	r3, r0
     74e:	2b00      	cmp	r3, #0
     750:	d000      	beq.n	754 <main+0x48>
     752:	e7f8      	b.n	746 <main+0x3a>
		while (!gpio_get_pin_level(SW0_Button));
     754:	203f      	movs	r0, #63	; 0x3f
     756:	4b1a      	ldr	r3, [pc, #104]	; (7c0 <main+0xb4>)
     758:	4798      	blx	r3
     75a:	4603      	mov	r3, r0
     75c:	f083 0301 	eor.w	r3, r3, #1
     760:	b2db      	uxtb	r3, r3
     762:	2b00      	cmp	r3, #0
     764:	d000      	beq.n	768 <main+0x5c>
     766:	e7f5      	b.n	754 <main+0x48>
		
		timer1.start();
     768:	463b      	mov	r3, r7
     76a:	4618      	mov	r0, r3
     76c:	4b15      	ldr	r3, [pc, #84]	; (7c4 <main+0xb8>)
     76e:	4798      	blx	r3
		while (gpio_get_pin_level(SW0_Button));
     770:	203f      	movs	r0, #63	; 0x3f
     772:	4b13      	ldr	r3, [pc, #76]	; (7c0 <main+0xb4>)
     774:	4798      	blx	r3
     776:	4603      	mov	r3, r0
     778:	2b00      	cmp	r3, #0
     77a:	d000      	beq.n	77e <main+0x72>
     77c:	e7f8      	b.n	770 <main+0x64>
		while (!gpio_get_pin_level(SW0_Button));
     77e:	203f      	movs	r0, #63	; 0x3f
     780:	4b0f      	ldr	r3, [pc, #60]	; (7c0 <main+0xb4>)
     782:	4798      	blx	r3
     784:	4603      	mov	r3, r0
     786:	f083 0301 	eor.w	r3, r3, #1
     78a:	b2db      	uxtb	r3, r3
     78c:	2b00      	cmp	r3, #0
     78e:	d000      	beq.n	792 <main+0x86>
     790:	e7f5      	b.n	77e <main+0x72>
		timer1.stop();
     792:	463b      	mov	r3, r7
     794:	4618      	mov	r0, r3
     796:	4b0c      	ldr	r3, [pc, #48]	; (7c8 <main+0xbc>)
     798:	4798      	blx	r3
    while (1) 
     79a:	e7d4      	b.n	746 <main+0x3a>
     79c:	00000965 	.word	0x00000965
     7a0:	200008d0 	.word	0x200008d0
     7a4:	00000ce5 	.word	0x00000ce5
     7a8:	0000034d 	.word	0x0000034d
     7ac:	200008b0 	.word	0x200008b0
     7b0:	00000869 	.word	0x00000869
     7b4:	000008a1 	.word	0x000008a1
     7b8:	000006f9 	.word	0x000006f9
     7bc:	0000091d 	.word	0x0000091d
     7c0:	000006bd 	.word	0x000006bd
     7c4:	000008b9 	.word	0x000008b9
     7c8:	000008dd 	.word	0x000008dd

000007cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     7cc:	b580      	push	{r7, lr}
     7ce:	b086      	sub	sp, #24
     7d0:	af00      	add	r7, sp, #0
     7d2:	60f8      	str	r0, [r7, #12]
     7d4:	60b9      	str	r1, [r7, #8]
     7d6:	607a      	str	r2, [r7, #4]
  size_t n = 0;
     7d8:	2300      	movs	r3, #0
     7da:	617b      	str	r3, [r7, #20]
  while (size--) {
     7dc:	687b      	ldr	r3, [r7, #4]
     7de:	1e5a      	subs	r2, r3, #1
     7e0:	607a      	str	r2, [r7, #4]
     7e2:	2b00      	cmp	r3, #0
     7e4:	bf14      	ite	ne
     7e6:	2301      	movne	r3, #1
     7e8:	2300      	moveq	r3, #0
     7ea:	b2db      	uxtb	r3, r3
     7ec:	2b00      	cmp	r3, #0
     7ee:	d016      	beq.n	81e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
     7f0:	68fb      	ldr	r3, [r7, #12]
     7f2:	681b      	ldr	r3, [r3, #0]
     7f4:	681a      	ldr	r2, [r3, #0]
     7f6:	68bb      	ldr	r3, [r7, #8]
     7f8:	1c59      	adds	r1, r3, #1
     7fa:	60b9      	str	r1, [r7, #8]
     7fc:	781b      	ldrb	r3, [r3, #0]
     7fe:	4619      	mov	r1, r3
     800:	68f8      	ldr	r0, [r7, #12]
     802:	4790      	blx	r2
     804:	4603      	mov	r3, r0
     806:	2b00      	cmp	r3, #0
     808:	bf14      	ite	ne
     80a:	2301      	movne	r3, #1
     80c:	2300      	moveq	r3, #0
     80e:	b2db      	uxtb	r3, r3
     810:	2b00      	cmp	r3, #0
     812:	d003      	beq.n	81c <_ZN5Print5writeEPKhj+0x50>
     814:	697b      	ldr	r3, [r7, #20]
     816:	3301      	adds	r3, #1
     818:	617b      	str	r3, [r7, #20]
  while (size--) {
     81a:	e7df      	b.n	7dc <_ZN5Print5writeEPKhj+0x10>
    else break;
     81c:	bf00      	nop
  }
  return n;
     81e:	697b      	ldr	r3, [r7, #20]
}
     820:	4618      	mov	r0, r3
     822:	3718      	adds	r7, #24
     824:	46bd      	mov	sp, r7
     826:	bd80      	pop	{r7, pc}

00000828 <_ZL14extern_task_cbPK10timer_task>:

#include "Timer_Class.h"

Timer_Class*	ptrTimerClass;
static void extern_task_cb(const struct timer_task *const timer_task)
{
     828:	b580      	push	{r7, lr}
     82a:	b082      	sub	sp, #8
     82c:	af00      	add	r7, sp, #0
     82e:	6078      	str	r0, [r7, #4]
	ptrTimerClass->handler();
     830:	4b03      	ldr	r3, [pc, #12]	; (840 <_ZL14extern_task_cbPK10timer_task+0x18>)
     832:	681b      	ldr	r3, [r3, #0]
     834:	69db      	ldr	r3, [r3, #28]
     836:	4798      	blx	r3
}
     838:	bf00      	nop
     83a:	3708      	adds	r7, #8
     83c:	46bd      	mov	sp, r7
     83e:	bd80      	pop	{r7, pc}
     840:	20000574 	.word	0x20000574

00000844 <_ZL7task_cbPK10timer_task>:
static void task_cb(const struct timer_task *const timer_task)
{
     844:	b580      	push	{r7, lr}
     846:	b082      	sub	sp, #8
     848:	af00      	add	r7, sp, #0
     84a:	6078      	str	r0, [r7, #4]
	ptrTimerClass->setTimeout();
     84c:	4b04      	ldr	r3, [pc, #16]	; (860 <_ZL7task_cbPK10timer_task+0x1c>)
     84e:	681b      	ldr	r3, [r3, #0]
     850:	4618      	mov	r0, r3
     852:	4b04      	ldr	r3, [pc, #16]	; (864 <_ZL7task_cbPK10timer_task+0x20>)
     854:	4798      	blx	r3
}
     856:	bf00      	nop
     858:	3708      	adds	r7, #8
     85a:	46bd      	mov	sp, r7
     85c:	bd80      	pop	{r7, pc}
     85e:	bf00      	nop
     860:	20000574 	.word	0x20000574
     864:	00000905 	.word	0x00000905

00000868 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task.cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor *const descr)
     868:	b480      	push	{r7}
     86a:	b083      	sub	sp, #12
     86c:	af00      	add	r7, sp, #0
     86e:	6078      	str	r0, [r7, #4]
     870:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
     872:	687b      	ldr	r3, [r7, #4]
     874:	683a      	ldr	r2, [r7, #0]
     876:	605a      	str	r2, [r3, #4]
	ptrTimerClass=this;
     878:	4a07      	ldr	r2, [pc, #28]	; (898 <_ZN11Timer_ClassC1EP16timer_descriptor+0x30>)
     87a:	687b      	ldr	r3, [r7, #4]
     87c:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
     87e:	687b      	ldr	r3, [r7, #4]
     880:	f44f 6280 	mov.w	r2, #1024	; 0x400
     884:	629a      	str	r2, [r3, #40]	; 0x28
	task.cb=task_cb;
     886:	687b      	ldr	r3, [r7, #4]
     888:	4a04      	ldr	r2, [pc, #16]	; (89c <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
     88a:	615a      	str	r2, [r3, #20]
} //Timer_Class
     88c:	687b      	ldr	r3, [r7, #4]
     88e:	4618      	mov	r0, r3
     890:	370c      	adds	r7, #12
     892:	46bd      	mov	sp, r7
     894:	bc80      	pop	{r7}
     896:	4770      	bx	lr
     898:	20000574 	.word	0x20000574
     89c:	00000845 	.word	0x00000845

000008a0 <_ZN11Timer_Class4InitEv>:
	timeout=0;
} //~Timer_Class



void Timer_Class::Init(void){
     8a0:	b480      	push	{r7}
     8a2:	b083      	sub	sp, #12
     8a4:	af00      	add	r7, sp, #0
     8a6:	6078      	str	r0, [r7, #4]
	ticks=0;
     8a8:	687b      	ldr	r3, [r7, #4]
     8aa:	2200      	movs	r2, #0
     8ac:	621a      	str	r2, [r3, #32]
}
     8ae:	bf00      	nop
     8b0:	370c      	adds	r7, #12
     8b2:	46bd      	mov	sp, r7
     8b4:	bc80      	pop	{r7}
     8b6:	4770      	bx	lr

000008b8 <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
     8b8:	b580      	push	{r7, lr}
     8ba:	b084      	sub	sp, #16
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	685b      	ldr	r3, [r3, #4]
     8c4:	4618      	mov	r0, r3
     8c6:	4b04      	ldr	r3, [pc, #16]	; (8d8 <_ZN11Timer_Class5startEv+0x20>)
     8c8:	4798      	blx	r3
     8ca:	60f8      	str	r0, [r7, #12]
	return status;
     8cc:	68fb      	ldr	r3, [r7, #12]
	
}
     8ce:	4618      	mov	r0, r3
     8d0:	3710      	adds	r7, #16
     8d2:	46bd      	mov	sp, r7
     8d4:	bd80      	pop	{r7, pc}
     8d6:	bf00      	nop
     8d8:	00000ce5 	.word	0x00000ce5

000008dc <_ZN11Timer_Class4stopEv>:

int32_t Timer_Class::stop( void){
     8dc:	b580      	push	{r7, lr}
     8de:	b084      	sub	sp, #16
     8e0:	af00      	add	r7, sp, #0
     8e2:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
     8e4:	687b      	ldr	r3, [r7, #4]
     8e6:	685b      	ldr	r3, [r3, #4]
     8e8:	4618      	mov	r0, r3
     8ea:	4b05      	ldr	r3, [pc, #20]	; (900 <_ZN11Timer_Class4stopEv+0x24>)
     8ec:	4798      	blx	r3
     8ee:	60f8      	str	r0, [r7, #12]
	timeout=0;
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	2200      	movs	r2, #0
     8f4:	705a      	strb	r2, [r3, #1]
	return status;
     8f6:	68fb      	ldr	r3, [r7, #12]
}
     8f8:	4618      	mov	r0, r3
     8fa:	3710      	adds	r7, #16
     8fc:	46bd      	mov	sp, r7
     8fe:	bd80      	pop	{r7, pc}
     900:	00000d25 	.word	0x00000d25

00000904 <_ZN11Timer_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void Timer_Class::setTimeout(){
     904:	b480      	push	{r7}
     906:	b083      	sub	sp, #12
     908:	af00      	add	r7, sp, #0
     90a:	6078      	str	r0, [r7, #4]
	timeout=1;
     90c:	687b      	ldr	r3, [r7, #4]
     90e:	2201      	movs	r2, #1
     910:	705a      	strb	r2, [r3, #1]
}
     912:	bf00      	nop
     914:	370c      	adds	r7, #12
     916:	46bd      	mov	sp, r7
     918:	bc80      	pop	{r7}
     91a:	4770      	bx	lr

0000091c <_ZN11Timer_Class8add_taskEPFvvEm>:
void	Timer_Class::deinit(){
	timer_deinit(timer_descr);
}

int32_t Timer_Class::add_task(FUNC_PTR func,uint32_t interval){
     91c:	b580      	push	{r7, lr}
     91e:	b086      	sub	sp, #24
     920:	af00      	add	r7, sp, #0
     922:	60f8      	str	r0, [r7, #12]
     924:	60b9      	str	r1, [r7, #8]
     926:	607a      	str	r2, [r7, #4]
	int32_t	status;

	handler=func;
     928:	68fb      	ldr	r3, [r7, #12]
     92a:	68ba      	ldr	r2, [r7, #8]
     92c:	61da      	str	r2, [r3, #28]
	task.interval = interval;
     92e:	68fb      	ldr	r3, [r7, #12]
     930:	687a      	ldr	r2, [r7, #4]
     932:	611a      	str	r2, [r3, #16]
	task.cb       = extern_task_cb;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	4a09      	ldr	r2, [pc, #36]	; (95c <_ZN11Timer_Class8add_taskEPFvvEm+0x40>)
     938:	615a      	str	r2, [r3, #20]
	task.mode     = TIMER_TASK_REPEAT;
     93a:	68fb      	ldr	r3, [r7, #12]
     93c:	2201      	movs	r2, #1
     93e:	761a      	strb	r2, [r3, #24]
	status=timer_add_task(timer_descr, &task);
     940:	68fb      	ldr	r3, [r7, #12]
     942:	685a      	ldr	r2, [r3, #4]
     944:	68fb      	ldr	r3, [r7, #12]
     946:	3308      	adds	r3, #8
     948:	4619      	mov	r1, r3
     94a:	4610      	mov	r0, r2
     94c:	4b04      	ldr	r3, [pc, #16]	; (960 <_ZN11Timer_Class8add_taskEPFvvEm+0x44>)
     94e:	4798      	blx	r3
     950:	6178      	str	r0, [r7, #20]
	
	return status;
     952:	697b      	ldr	r3, [r7, #20]
}
     954:	4618      	mov	r0, r3
     956:	3718      	adds	r7, #24
     958:	46bd      	mov	sp, r7
     95a:	bd80      	pop	{r7, pc}
     95c:	00000829 	.word	0x00000829
     960:	00000d65 	.word	0x00000d65

00000964 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     964:	b508      	push	{r3, lr}
	system_init();
     966:	4b02      	ldr	r3, [pc, #8]	; (970 <atmel_start_init+0xc>)
     968:	4798      	blx	r3
	usb_init();
     96a:	4b02      	ldr	r3, [pc, #8]	; (974 <atmel_start_init+0x10>)
     96c:	4798      	blx	r3
     96e:	bd08      	pop	{r3, pc}
     970:	00000a7d 	.word	0x00000a7d
     974:	00003a81 	.word	0x00003a81

00000978 <EVENT_SYSTEM_0_init>:

struct timer_descriptor TIMER_0;
struct timer_descriptor TIMER_1;

void EVENT_SYSTEM_0_init(void)
{
     978:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     97a:	2240      	movs	r2, #64	; 0x40
     97c:	4b05      	ldr	r3, [pc, #20]	; (994 <EVENT_SYSTEM_0_init+0x1c>)
     97e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     982:	4a05      	ldr	r2, [pc, #20]	; (998 <EVENT_SYSTEM_0_init+0x20>)
     984:	6993      	ldr	r3, [r2, #24]
     986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     98a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     98c:	4b03      	ldr	r3, [pc, #12]	; (99c <EVENT_SYSTEM_0_init+0x24>)
     98e:	4798      	blx	r3
     990:	bd08      	pop	{r3, pc}
     992:	bf00      	nop
     994:	40001c00 	.word	0x40001c00
     998:	40000800 	.word	0x40000800
     99c:	00000bbd 	.word	0x00000bbd

000009a0 <delay_driver_init>:
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
}

void delay_driver_init(void)
{
     9a0:	b508      	push	{r3, lr}
	delay_init(SysTick);
     9a2:	4802      	ldr	r0, [pc, #8]	; (9ac <delay_driver_init+0xc>)
     9a4:	4b02      	ldr	r3, [pc, #8]	; (9b0 <delay_driver_init+0x10>)
     9a6:	4798      	blx	r3
     9a8:	bd08      	pop	{r3, pc}
     9aa:	bf00      	nop
     9ac:	e000e010 	.word	0xe000e010
     9b0:	00000ba9 	.word	0x00000ba9

000009b4 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9b4:	4b1e      	ldr	r3, [pc, #120]	; (a30 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     9b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     9ba:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     9c0:	6299      	str	r1, [r3, #40]	; 0x28
     9c2:	481c      	ldr	r0, [pc, #112]	; (a34 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     9c4:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9c6:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     9c8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     9cc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     9d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9d4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     9d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9dc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9e4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9e8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9ec:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     9f8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9fa:	6299      	str	r1, [r3, #40]	; 0x28
     9fc:	490e      	ldr	r1, [pc, #56]	; (a38 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     9fe:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a00:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a02:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     a06:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     a0a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a0e:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     a12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a16:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a1e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a22:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a26:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     a2e:	4770      	bx	lr
     a30:	41008000 	.word	0x41008000
     a34:	c0000100 	.word	0xc0000100
     a38:	c0000200 	.word	0xc0000200

00000a3c <USB_DEVICE_INSTANCE_CLOCK_init>:
     a3c:	2241      	movs	r2, #65	; 0x41
     a3e:	4b07      	ldr	r3, [pc, #28]	; (a5c <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     a40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     a44:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     a48:	691a      	ldr	r2, [r3, #16]
     a4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     a4e:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     a50:	699a      	ldr	r2, [r3, #24]
     a52:	f042 0201 	orr.w	r2, r2, #1
     a56:	619a      	str	r2, [r3, #24]
     a58:	4770      	bx	lr
     a5a:	bf00      	nop
     a5c:	40001c00 	.word	0x40001c00

00000a60 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     a60:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     a62:	4b03      	ldr	r3, [pc, #12]	; (a70 <USB_DEVICE_INSTANCE_init+0x10>)
     a64:	4798      	blx	r3
	usb_d_init();
     a66:	4b03      	ldr	r3, [pc, #12]	; (a74 <USB_DEVICE_INSTANCE_init+0x14>)
     a68:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     a6a:	4b03      	ldr	r3, [pc, #12]	; (a78 <USB_DEVICE_INSTANCE_init+0x18>)
     a6c:	4798      	blx	r3
     a6e:	bd08      	pop	{r3, pc}
     a70:	00000a3d 	.word	0x00000a3d
     a74:	00001069 	.word	0x00001069
     a78:	000009b5 	.word	0x000009b5

00000a7c <system_init>:
}

void system_init(void)
{
     a7c:	b538      	push	{r3, r4, r5, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     a7e:	4b33      	ldr	r3, [pc, #204]	; (b4c <system_init+0xd0>)
     a80:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a82:	4b33      	ldr	r3, [pc, #204]	; (b50 <system_init+0xd4>)
     a84:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
     a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a8c:	4931      	ldr	r1, [pc, #196]	; (b54 <system_init+0xd8>)
     a8e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     a92:	f101 2180 	add.w	r1, r1, #2147516416	; 0x80008000
     a96:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     a9e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
     aa2:	f041 0104 	orr.w	r1, r1, #4
     aa6:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     aaa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aae:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     ab2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ab6:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     abe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ac2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ac6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     aca:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     ace:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     ad2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ad6:	f893 214f 	ldrb.w	r2, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
     ada:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ade:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ae2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     ae6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     aea:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     af2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     af6:	4a18      	ldr	r2, [pc, #96]	; (b58 <system_init+0xdc>)
     af8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     afc:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     b00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b04:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	EVENT_SYSTEM_0_init();
     b08:	4b14      	ldr	r3, [pc, #80]	; (b5c <system_init+0xe0>)
     b0a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     b0c:	4c14      	ldr	r4, [pc, #80]	; (b60 <system_init+0xe4>)
     b0e:	6963      	ldr	r3, [r4, #20]
     b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     b14:	6163      	str	r3, [r4, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     b16:	4b13      	ldr	r3, [pc, #76]	; (b64 <system_init+0xe8>)
     b18:	4798      	blx	r3
     b1a:	4602      	mov	r2, r0
     b1c:	4912      	ldr	r1, [pc, #72]	; (b68 <system_init+0xec>)
     b1e:	4813      	ldr	r0, [pc, #76]	; (b6c <system_init+0xf0>)
     b20:	4d13      	ldr	r5, [pc, #76]	; (b70 <system_init+0xf4>)
     b22:	47a8      	blx	r5

	TIMER_0_init();

	delay_driver_init();
     b24:	4b13      	ldr	r3, [pc, #76]	; (b74 <system_init+0xf8>)
     b26:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     b28:	6963      	ldr	r3, [r4, #20]
     b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     b2e:	6163      	str	r3, [r4, #20]
     b30:	224b      	movs	r2, #75	; 0x4b
     b32:	4b11      	ldr	r3, [pc, #68]	; (b78 <system_init+0xfc>)
     b34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	timer_init(&TIMER_1, TC0, _tc_get_timer());
     b38:	4b10      	ldr	r3, [pc, #64]	; (b7c <system_init+0x100>)
     b3a:	4798      	blx	r3
     b3c:	4602      	mov	r2, r0
     b3e:	4910      	ldr	r1, [pc, #64]	; (b80 <system_init+0x104>)
     b40:	4810      	ldr	r0, [pc, #64]	; (b84 <system_init+0x108>)
     b42:	47a8      	blx	r5

	TIMER_1_init();
	USB_DEVICE_INSTANCE_init();
     b44:	4b10      	ldr	r3, [pc, #64]	; (b88 <system_init+0x10c>)
     b46:	4798      	blx	r3
     b48:	bd38      	pop	{r3, r4, r5, pc}
     b4a:	bf00      	nop
     b4c:	000014a9 	.word	0x000014a9
     b50:	41008000 	.word	0x41008000
     b54:	40020000 	.word	0x40020000
     b58:	c0000004 	.word	0xc0000004
     b5c:	00000979 	.word	0x00000979
     b60:	40000800 	.word	0x40000800
     b64:	00001875 	.word	0x00001875
     b68:	40002400 	.word	0x40002400
     b6c:	200008d0 	.word	0x200008d0
     b70:	00000ca1 	.word	0x00000ca1
     b74:	000009a1 	.word	0x000009a1
     b78:	40001c00 	.word	0x40001c00
     b7c:	00001c49 	.word	0x00001c49
     b80:	40003800 	.word	0x40003800
     b84:	200008b0 	.word	0x200008b0
     b88:	00000a61 	.word	0x00000a61

00000b8c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     b8c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     b90:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     b92:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     b94:	f3bf 8f5f 	dmb	sy
     b98:	4770      	bx	lr

00000b9a <atomic_leave_critical>:
     b9a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     b9e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     ba0:	f383 8810 	msr	PRIMASK, r3
     ba4:	4770      	bx	lr
	...

00000ba8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     ba8:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     baa:	4b02      	ldr	r3, [pc, #8]	; (bb4 <delay_init+0xc>)
     bac:	6018      	str	r0, [r3, #0]
     bae:	4b02      	ldr	r3, [pc, #8]	; (bb8 <delay_init+0x10>)
     bb0:	4798      	blx	r3
     bb2:	bd08      	pop	{r3, pc}
     bb4:	20000578 	.word	0x20000578
     bb8:	000018a5 	.word	0x000018a5

00000bbc <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     bbc:	b508      	push	{r3, lr}
	return _event_system_init();
     bbe:	4b01      	ldr	r3, [pc, #4]	; (bc4 <event_system_init+0x8>)
     bc0:	4798      	blx	r3
}
     bc2:	bd08      	pop	{r3, pc}
     bc4:	0000150d 	.word	0x0000150d

00000bc8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bca:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     bcc:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     bce:	b12f      	cbz	r7, bdc <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     bd0:	688d      	ldr	r5, [r1, #8]
     bd2:	463c      	mov	r4, r7
     bd4:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     bd6:	f1c2 0e01 	rsb	lr, r2, #1
     bda:	e00b      	b.n	bf4 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     bdc:	4b0e      	ldr	r3, [pc, #56]	; (c18 <timer_add_timer_task+0x50>)
     bde:	4798      	blx	r3
		return;
     be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     be2:	4473      	add	r3, lr
     be4:	68a0      	ldr	r0, [r4, #8]
     be6:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     be8:	42ab      	cmp	r3, r5
     bea:	d20a      	bcs.n	c02 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     bec:	6823      	ldr	r3, [r4, #0]
     bee:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     bf0:	b153      	cbz	r3, c08 <timer_add_timer_task+0x40>
     bf2:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     bf4:	6863      	ldr	r3, [r4, #4]
     bf6:	4293      	cmp	r3, r2
     bf8:	d8f3      	bhi.n	be2 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     bfa:	68a0      	ldr	r0, [r4, #8]
     bfc:	4403      	add	r3, r0
     bfe:	1a9b      	subs	r3, r3, r2
     c00:	e7f2      	b.n	be8 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     c02:	42a7      	cmp	r7, r4
     c04:	d004      	beq.n	c10 <timer_add_timer_task+0x48>
     c06:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     c08:	4620      	mov	r0, r4
     c0a:	4b04      	ldr	r3, [pc, #16]	; (c1c <timer_add_timer_task+0x54>)
     c0c:	4798      	blx	r3
     c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     c10:	4660      	mov	r0, ip
     c12:	4b01      	ldr	r3, [pc, #4]	; (c18 <timer_add_timer_task+0x50>)
     c14:	4798      	blx	r3
     c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c18:	0000140d 	.word	0x0000140d
     c1c:	00001439 	.word	0x00001439

00000c20 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     c24:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     c26:	6907      	ldr	r7, [r0, #16]
     c28:	3701      	adds	r7, #1
     c2a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     c2c:	7e03      	ldrb	r3, [r0, #24]
     c2e:	f013 0f01 	tst.w	r3, #1
     c32:	d113      	bne.n	c5c <timer_process_counted+0x3c>
     c34:	7e03      	ldrb	r3, [r0, #24]
     c36:	f013 0f02 	tst.w	r3, #2
     c3a:	d10f      	bne.n	c5c <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     c3c:	b354      	cbz	r4, c94 <timer_process_counted+0x74>
     c3e:	6863      	ldr	r3, [r4, #4]
     c40:	1afb      	subs	r3, r7, r3
     c42:	68a2      	ldr	r2, [r4, #8]
     c44:	4293      	cmp	r3, r2
     c46:	d307      	bcc.n	c58 <timer_process_counted+0x38>
     c48:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     c4a:	f100 0814 	add.w	r8, r0, #20
     c4e:	f8df 9048 	ldr.w	r9, [pc, #72]	; c98 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     c52:	f8df a048 	ldr.w	sl, [pc, #72]	; c9c <timer_process_counted+0x7c>
     c56:	e012      	b.n	c7e <timer_process_counted+0x5e>
     c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     c5c:	7e03      	ldrb	r3, [r0, #24]
     c5e:	f043 0302 	orr.w	r3, r3, #2
     c62:	7603      	strb	r3, [r0, #24]
		return;
     c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c68:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     c6a:	68e3      	ldr	r3, [r4, #12]
     c6c:	4620      	mov	r0, r4
     c6e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     c70:	b185      	cbz	r5, c94 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     c72:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     c74:	686b      	ldr	r3, [r5, #4]
     c76:	1afb      	subs	r3, r7, r3
     c78:	68aa      	ldr	r2, [r5, #8]
     c7a:	4293      	cmp	r3, r2
     c7c:	d30a      	bcc.n	c94 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     c7e:	4640      	mov	r0, r8
     c80:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     c82:	7c23      	ldrb	r3, [r4, #16]
     c84:	2b01      	cmp	r3, #1
     c86:	d1ef      	bne.n	c68 <timer_process_counted+0x48>
			tmp->time_label = time;
     c88:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     c8a:	463a      	mov	r2, r7
     c8c:	4621      	mov	r1, r4
     c8e:	4640      	mov	r0, r8
     c90:	47d0      	blx	sl
     c92:	e7e9      	b.n	c68 <timer_process_counted+0x48>
     c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c98:	00001481 	.word	0x00001481
     c9c:	00000bc9 	.word	0x00000bc9

00000ca0 <timer_init>:
{
     ca0:	b570      	push	{r4, r5, r6, lr}
     ca2:	460e      	mov	r6, r1
     ca4:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
     ca6:	4604      	mov	r4, r0
     ca8:	b190      	cbz	r0, cd0 <timer_init+0x30>
     caa:	b199      	cbz	r1, cd4 <timer_init+0x34>
     cac:	1c10      	adds	r0, r2, #0
     cae:	bf18      	it	ne
     cb0:	2001      	movne	r0, #1
     cb2:	223b      	movs	r2, #59	; 0x3b
     cb4:	4908      	ldr	r1, [pc, #32]	; (cd8 <timer_init+0x38>)
     cb6:	4b09      	ldr	r3, [pc, #36]	; (cdc <timer_init+0x3c>)
     cb8:	4798      	blx	r3
	descr->func = func;
     cba:	4620      	mov	r0, r4
     cbc:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
     cc0:	682b      	ldr	r3, [r5, #0]
     cc2:	4631      	mov	r1, r6
     cc4:	4798      	blx	r3
	descr->time                           = 0;
     cc6:	2000      	movs	r0, #0
     cc8:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
     cca:	4b05      	ldr	r3, [pc, #20]	; (ce0 <timer_init+0x40>)
     ccc:	6063      	str	r3, [r4, #4]
}
     cce:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
     cd0:	2000      	movs	r0, #0
     cd2:	e7ee      	b.n	cb2 <timer_init+0x12>
     cd4:	2000      	movs	r0, #0
     cd6:	e7ec      	b.n	cb2 <timer_init+0x12>
     cd8:	00003e40 	.word	0x00003e40
     cdc:	000013e5 	.word	0x000013e5
     ce0:	00000c21 	.word	0x00000c21

00000ce4 <timer_start>:
{
     ce4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
     ce6:	4604      	mov	r4, r0
     ce8:	b198      	cbz	r0, d12 <timer_start+0x2e>
     cea:	6800      	ldr	r0, [r0, #0]
     cec:	3000      	adds	r0, #0
     cee:	bf18      	it	ne
     cf0:	2001      	movne	r0, #1
     cf2:	2254      	movs	r2, #84	; 0x54
     cf4:	4909      	ldr	r1, [pc, #36]	; (d1c <timer_start+0x38>)
     cf6:	4b0a      	ldr	r3, [pc, #40]	; (d20 <timer_start+0x3c>)
     cf8:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
     cfa:	1d25      	adds	r5, r4, #4
     cfc:	6823      	ldr	r3, [r4, #0]
     cfe:	699b      	ldr	r3, [r3, #24]
     d00:	4628      	mov	r0, r5
     d02:	4798      	blx	r3
     d04:	b938      	cbnz	r0, d16 <timer_start+0x32>
	descr->func->start_timer(&descr->device);
     d06:	6823      	ldr	r3, [r4, #0]
     d08:	689b      	ldr	r3, [r3, #8]
     d0a:	4628      	mov	r0, r5
     d0c:	4798      	blx	r3
	return ERR_NONE;
     d0e:	2000      	movs	r0, #0
     d10:	bd38      	pop	{r3, r4, r5, pc}
     d12:	2000      	movs	r0, #0
     d14:	e7ed      	b.n	cf2 <timer_start+0xe>
		return ERR_DENIED;
     d16:	f06f 0010 	mvn.w	r0, #16
}
     d1a:	bd38      	pop	{r3, r4, r5, pc}
     d1c:	00003e40 	.word	0x00003e40
     d20:	000013e5 	.word	0x000013e5

00000d24 <timer_stop>:
{
     d24:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
     d26:	4604      	mov	r4, r0
     d28:	b198      	cbz	r0, d52 <timer_stop+0x2e>
     d2a:	6800      	ldr	r0, [r0, #0]
     d2c:	3000      	adds	r0, #0
     d2e:	bf18      	it	ne
     d30:	2001      	movne	r0, #1
     d32:	2262      	movs	r2, #98	; 0x62
     d34:	4909      	ldr	r1, [pc, #36]	; (d5c <timer_stop+0x38>)
     d36:	4b0a      	ldr	r3, [pc, #40]	; (d60 <timer_stop+0x3c>)
     d38:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
     d3a:	1d25      	adds	r5, r4, #4
     d3c:	6823      	ldr	r3, [r4, #0]
     d3e:	699b      	ldr	r3, [r3, #24]
     d40:	4628      	mov	r0, r5
     d42:	4798      	blx	r3
     d44:	b138      	cbz	r0, d56 <timer_stop+0x32>
	descr->func->stop_timer(&descr->device);
     d46:	6823      	ldr	r3, [r4, #0]
     d48:	68db      	ldr	r3, [r3, #12]
     d4a:	4628      	mov	r0, r5
     d4c:	4798      	blx	r3
	return ERR_NONE;
     d4e:	2000      	movs	r0, #0
     d50:	bd38      	pop	{r3, r4, r5, pc}
     d52:	2000      	movs	r0, #0
     d54:	e7ed      	b.n	d32 <timer_stop+0xe>
		return ERR_DENIED;
     d56:	f06f 0010 	mvn.w	r0, #16
}
     d5a:	bd38      	pop	{r3, r4, r5, pc}
     d5c:	00003e40 	.word	0x00003e40
     d60:	000013e5 	.word	0x000013e5

00000d64 <timer_add_task>:
{
     d64:	b570      	push	{r4, r5, r6, lr}
     d66:	b082      	sub	sp, #8
     d68:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
     d6a:	4604      	mov	r4, r0
     d6c:	b328      	cbz	r0, dba <timer_add_task+0x56>
     d6e:	b331      	cbz	r1, dbe <timer_add_task+0x5a>
     d70:	6800      	ldr	r0, [r0, #0]
     d72:	3000      	adds	r0, #0
     d74:	bf18      	it	ne
     d76:	2001      	movne	r0, #1
     d78:	227b      	movs	r2, #123	; 0x7b
     d7a:	4920      	ldr	r1, [pc, #128]	; (dfc <timer_add_task+0x98>)
     d7c:	4b20      	ldr	r3, [pc, #128]	; (e00 <timer_add_task+0x9c>)
     d7e:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     d80:	7f23      	ldrb	r3, [r4, #28]
     d82:	f043 0301 	orr.w	r3, r3, #1
     d86:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
     d88:	f104 0618 	add.w	r6, r4, #24
     d8c:	4629      	mov	r1, r5
     d8e:	4630      	mov	r0, r6
     d90:	4b1c      	ldr	r3, [pc, #112]	; (e04 <timer_add_task+0xa0>)
     d92:	4798      	blx	r3
     d94:	b9a8      	cbnz	r0, dc2 <timer_add_task+0x5e>
	task->time_label = descr->time;
     d96:	6963      	ldr	r3, [r4, #20]
     d98:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     d9a:	6962      	ldr	r2, [r4, #20]
     d9c:	4629      	mov	r1, r5
     d9e:	4630      	mov	r0, r6
     da0:	4b19      	ldr	r3, [pc, #100]	; (e08 <timer_add_task+0xa4>)
     da2:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     da4:	7f23      	ldrb	r3, [r4, #28]
     da6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     daa:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     dac:	7f23      	ldrb	r3, [r4, #28]
     dae:	f013 0f02 	tst.w	r3, #2
     db2:	d112      	bne.n	dda <timer_add_task+0x76>
	return ERR_NONE;
     db4:	2000      	movs	r0, #0
}
     db6:	b002      	add	sp, #8
     db8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
     dba:	2000      	movs	r0, #0
     dbc:	e7dc      	b.n	d78 <timer_add_task+0x14>
     dbe:	2000      	movs	r0, #0
     dc0:	e7da      	b.n	d78 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     dc2:	7f23      	ldrb	r3, [r4, #28]
     dc4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     dc8:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
     dca:	2280      	movs	r2, #128	; 0x80
     dcc:	490b      	ldr	r1, [pc, #44]	; (dfc <timer_add_task+0x98>)
     dce:	2000      	movs	r0, #0
     dd0:	4b0b      	ldr	r3, [pc, #44]	; (e00 <timer_add_task+0x9c>)
     dd2:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     dd4:	f06f 0011 	mvn.w	r0, #17
     dd8:	e7ed      	b.n	db6 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     dda:	a801      	add	r0, sp, #4
     ddc:	4b0b      	ldr	r3, [pc, #44]	; (e0c <timer_add_task+0xa8>)
     dde:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     de0:	7f23      	ldrb	r3, [r4, #28]
     de2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     de6:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
     de8:	6823      	ldr	r3, [r4, #0]
     dea:	69db      	ldr	r3, [r3, #28]
     dec:	1d20      	adds	r0, r4, #4
     dee:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     df0:	a801      	add	r0, sp, #4
     df2:	4b07      	ldr	r3, [pc, #28]	; (e10 <timer_add_task+0xac>)
     df4:	4798      	blx	r3
	return ERR_NONE;
     df6:	2000      	movs	r0, #0
     df8:	e7dd      	b.n	db6 <timer_add_task+0x52>
     dfa:	bf00      	nop
     dfc:	00003e40 	.word	0x00003e40
     e00:	000013e5 	.word	0x000013e5
     e04:	000013eb 	.word	0x000013eb
     e08:	00000bc9 	.word	0x00000bc9
     e0c:	00000b8d 	.word	0x00000b8d
     e10:	00000b9b 	.word	0x00000b9b

00000e14 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     e14:	4b0f      	ldr	r3, [pc, #60]	; (e54 <_usb_d_find_ep+0x40>)
     e16:	7859      	ldrb	r1, [r3, #1]
     e18:	4288      	cmp	r0, r1
     e1a:	d018      	beq.n	e4e <_usb_d_find_ep+0x3a>
{
     e1c:	b430      	push	{r4, r5}
     e1e:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     e20:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     e22:	f000 050f 	and.w	r5, r0, #15
     e26:	e007      	b.n	e38 <_usb_d_find_ep+0x24>
     e28:	3301      	adds	r3, #1
     e2a:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     e2c:	2b04      	cmp	r3, #4
     e2e:	d009      	beq.n	e44 <_usb_d_find_ep+0x30>
     e30:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     e32:	7851      	ldrb	r1, [r2, #1]
     e34:	4281      	cmp	r1, r0
     e36:	d007      	beq.n	e48 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     e38:	7814      	ldrb	r4, [r2, #0]
     e3a:	2c00      	cmp	r4, #0
     e3c:	d1f4      	bne.n	e28 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     e3e:	428d      	cmp	r5, r1
     e40:	d1f2      	bne.n	e28 <_usb_d_find_ep+0x14>
     e42:	e001      	b.n	e48 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     e44:	f04f 33ff 	mov.w	r3, #4294967295
}
     e48:	4618      	mov	r0, r3
     e4a:	bc30      	pop	{r4, r5}
     e4c:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     e4e:	2300      	movs	r3, #0
}
     e50:	4618      	mov	r0, r3
     e52:	4770      	bx	lr
     e54:	2000057c 	.word	0x2000057c

00000e58 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     e58:	2000      	movs	r0, #0
     e5a:	4770      	bx	lr

00000e5c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     e5c:	b538      	push	{r3, r4, r5, lr}
     e5e:	4604      	mov	r4, r0
     e60:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     e62:	4b09      	ldr	r3, [pc, #36]	; (e88 <usb_d_cb_trans_more+0x2c>)
     e64:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     e66:	4b09      	ldr	r3, [pc, #36]	; (e8c <usb_d_cb_trans_more+0x30>)
     e68:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     e6c:	789b      	ldrb	r3, [r3, #2]
     e6e:	2b03      	cmp	r3, #3
     e70:	d001      	beq.n	e76 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     e72:	2000      	movs	r0, #0
}
     e74:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
     e76:	4b05      	ldr	r3, [pc, #20]	; (e8c <usb_d_cb_trans_more+0x30>)
     e78:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     e7c:	6983      	ldr	r3, [r0, #24]
     e7e:	4629      	mov	r1, r5
     e80:	4620      	mov	r0, r4
     e82:	4798      	blx	r3
     e84:	bd38      	pop	{r3, r4, r5, pc}
     e86:	bf00      	nop
     e88:	00000e15 	.word	0x00000e15
     e8c:	2000057c 	.word	0x2000057c

00000e90 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     e90:	b5f0      	push	{r4, r5, r6, r7, lr}
     e92:	b085      	sub	sp, #20
     e94:	4606      	mov	r6, r0
     e96:	460d      	mov	r5, r1
     e98:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     e9a:	4b4d      	ldr	r3, [pc, #308]	; (fd0 <_usb_d_cb_trans_done+0x140>)
     e9c:	4798      	blx	r3
     e9e:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     ea0:	2d00      	cmp	r5, #0
     ea2:	d15b      	bne.n	f5c <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
     ea4:	4a4b      	ldr	r2, [pc, #300]	; (fd4 <_usb_d_cb_trans_done+0x144>)
     ea6:	0143      	lsls	r3, r0, #5
     ea8:	18d1      	adds	r1, r2, r3
     eaa:	2000      	movs	r0, #0
     eac:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     eae:	5cd3      	ldrb	r3, [r2, r3]
     eb0:	b173      	cbz	r3, ed0 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     eb2:	4b48      	ldr	r3, [pc, #288]	; (fd4 <_usb_d_cb_trans_done+0x144>)
     eb4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     eb8:	2201      	movs	r2, #1
     eba:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     ebc:	4845      	ldr	r0, [pc, #276]	; (fd4 <_usb_d_cb_trans_done+0x144>)
     ebe:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     ec2:	69c3      	ldr	r3, [r0, #28]
     ec4:	463a      	mov	r2, r7
     ec6:	78c1      	ldrb	r1, [r0, #3]
     ec8:	4630      	mov	r0, r6
     eca:	4798      	blx	r3
}
     ecc:	b005      	add	sp, #20
     ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     ed0:	788b      	ldrb	r3, [r1, #2]
     ed2:	2b03      	cmp	r3, #3
     ed4:	d00b      	beq.n	eee <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     ed6:	483f      	ldr	r0, [pc, #252]	; (fd4 <_usb_d_cb_trans_done+0x144>)
     ed8:	eb00 1244 	add.w	r2, r0, r4, lsl #5
     edc:	4614      	mov	r4, r2
     ede:	69d3      	ldr	r3, [r2, #28]
     ee0:	320c      	adds	r2, #12
     ee2:	2100      	movs	r1, #0
     ee4:	7860      	ldrb	r0, [r4, #1]
     ee6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     ee8:	2302      	movs	r3, #2
     eea:	70a3      	strb	r3, [r4, #2]
     eec:	e7ee      	b.n	ecc <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     eee:	460b      	mov	r3, r1
     ef0:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     ef4:	460a      	mov	r2, r1
     ef6:	69ce      	ldr	r6, [r1, #28]
     ef8:	320c      	adds	r2, #12
     efa:	2101      	movs	r1, #1
     efc:	7858      	ldrb	r0, [r3, #1]
     efe:	47b0      	blx	r6
		if (err) {
     f00:	b1a0      	cbz	r0, f2c <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     f02:	4b34      	ldr	r3, [pc, #208]	; (fd4 <_usb_d_cb_trans_done+0x144>)
     f04:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     f08:	2205      	movs	r2, #5
     f0a:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     f0c:	2202      	movs	r2, #2
     f0e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     f10:	2d00      	cmp	r5, #0
     f12:	db09      	blt.n	f28 <_usb_d_cb_trans_done+0x98>
     f14:	482f      	ldr	r0, [pc, #188]	; (fd4 <_usb_d_cb_trans_done+0x144>)
     f16:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     f1a:	7840      	ldrb	r0, [r0, #1]
     f1c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     f20:	2101      	movs	r1, #1
     f22:	4b2d      	ldr	r3, [pc, #180]	; (fd8 <_usb_d_cb_trans_done+0x148>)
     f24:	4798      	blx	r3
     f26:	e7d1      	b.n	ecc <_usb_d_cb_trans_done+0x3c>
     f28:	7858      	ldrb	r0, [r3, #1]
     f2a:	e7f9      	b.n	f20 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     f2c:	4829      	ldr	r0, [pc, #164]	; (fd4 <_usb_d_cb_trans_done+0x144>)
     f2e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     f32:	2304      	movs	r3, #4
     f34:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     f36:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
     f38:	2200      	movs	r2, #0
     f3a:	9201      	str	r2, [sp, #4]
     f3c:	9202      	str	r2, [sp, #8]
     f3e:	4295      	cmp	r5, r2
     f40:	bfac      	ite	ge
     f42:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
     f46:	f003 030f 	andlt.w	r3, r3, #15
     f4a:	f88d 300c 	strb.w	r3, [sp, #12]
     f4e:	2301      	movs	r3, #1
     f50:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     f54:	a801      	add	r0, sp, #4
     f56:	4b21      	ldr	r3, [pc, #132]	; (fdc <_usb_d_cb_trans_done+0x14c>)
     f58:	4798      	blx	r3
     f5a:	e7b7      	b.n	ecc <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
     f5c:	2d01      	cmp	r5, #1
     f5e:	d00a      	beq.n	f76 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
     f60:	2d02      	cmp	r5, #2
     f62:	d01c      	beq.n	f9e <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
     f64:	2d03      	cmp	r5, #3
     f66:	d02a      	beq.n	fbe <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     f68:	4b1a      	ldr	r3, [pc, #104]	; (fd4 <_usb_d_cb_trans_done+0x144>)
     f6a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     f6e:	2206      	movs	r2, #6
     f70:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     f72:	70da      	strb	r2, [r3, #3]
     f74:	e7a2      	b.n	ebc <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
     f76:	4a17      	ldr	r2, [pc, #92]	; (fd4 <_usb_d_cb_trans_done+0x144>)
     f78:	0143      	lsls	r3, r0, #5
     f7a:	18d1      	adds	r1, r2, r3
     f7c:	2002      	movs	r0, #2
     f7e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     f80:	5cd3      	ldrb	r3, [r2, r3]
     f82:	b12b      	cbz	r3, f90 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     f84:	4b13      	ldr	r3, [pc, #76]	; (fd4 <_usb_d_cb_trans_done+0x144>)
     f86:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     f8a:	2205      	movs	r2, #5
     f8c:	709a      	strb	r2, [r3, #2]
     f8e:	e795      	b.n	ebc <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     f90:	460b      	mov	r3, r1
     f92:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     f94:	2100      	movs	r1, #0
     f96:	4630      	mov	r0, r6
     f98:	4b0f      	ldr	r3, [pc, #60]	; (fd8 <_usb_d_cb_trans_done+0x148>)
     f9a:	4798      	blx	r3
     f9c:	e78e      	b.n	ebc <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     f9e:	4a0d      	ldr	r2, [pc, #52]	; (fd4 <_usb_d_cb_trans_done+0x144>)
     fa0:	0143      	lsls	r3, r0, #5
     fa2:	18d1      	adds	r1, r2, r3
     fa4:	2004      	movs	r0, #4
     fa6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     fa8:	5cd3      	ldrb	r3, [r2, r3]
     faa:	b12b      	cbz	r3, fb8 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     fac:	4b09      	ldr	r3, [pc, #36]	; (fd4 <_usb_d_cb_trans_done+0x144>)
     fae:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     fb2:	2201      	movs	r2, #1
     fb4:	709a      	strb	r2, [r3, #2]
     fb6:	e781      	b.n	ebc <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     fb8:	2302      	movs	r3, #2
     fba:	708b      	strb	r3, [r1, #2]
			return;
     fbc:	e786      	b.n	ecc <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     fbe:	4b05      	ldr	r3, [pc, #20]	; (fd4 <_usb_d_cb_trans_done+0x144>)
     fc0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     fc4:	2200      	movs	r2, #0
     fc6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     fc8:	2205      	movs	r2, #5
     fca:	70da      	strb	r2, [r3, #3]
     fcc:	e776      	b.n	ebc <_usb_d_cb_trans_done+0x2c>
     fce:	bf00      	nop
     fd0:	00000e15 	.word	0x00000e15
     fd4:	2000057c 	.word	0x2000057c
     fd8:	00002af1 	.word	0x00002af1
     fdc:	00002c99 	.word	0x00002c99

00000fe0 <usb_d_cb_trans_setup>:
{
     fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     fe4:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     fe6:	4b1c      	ldr	r3, [pc, #112]	; (1058 <usb_d_cb_trans_setup+0x78>)
     fe8:	4798      	blx	r3
     fea:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
     fec:	4c1b      	ldr	r4, [pc, #108]	; (105c <usb_d_cb_trans_setup+0x7c>)
     fee:	eb04 1440 	add.w	r4, r4, r0, lsl #5
     ff2:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     ff4:	4621      	mov	r1, r4
     ff6:	4628      	mov	r0, r5
     ff8:	4b19      	ldr	r3, [pc, #100]	; (1060 <usb_d_cb_trans_setup+0x80>)
     ffa:	4798      	blx	r3
	if (n != 8) {
     ffc:	b2c0      	uxtb	r0, r0
     ffe:	2808      	cmp	r0, #8
    1000:	d009      	beq.n	1016 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1002:	2101      	movs	r1, #1
    1004:	4628      	mov	r0, r5
    1006:	4c17      	ldr	r4, [pc, #92]	; (1064 <usb_d_cb_trans_setup+0x84>)
    1008:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    100a:	2101      	movs	r1, #1
    100c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    1010:	47a0      	blx	r4
		return;
    1012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1016:	2100      	movs	r1, #0
    1018:	4628      	mov	r0, r5
    101a:	4f12      	ldr	r7, [pc, #72]	; (1064 <usb_d_cb_trans_setup+0x84>)
    101c:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    101e:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    1022:	2100      	movs	r1, #0
    1024:	4640      	mov	r0, r8
    1026:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1028:	4b0c      	ldr	r3, [pc, #48]	; (105c <usb_d_cb_trans_setup+0x7c>)
    102a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    102e:	2201      	movs	r2, #1
    1030:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    1032:	695b      	ldr	r3, [r3, #20]
    1034:	4621      	mov	r1, r4
    1036:	4628      	mov	r0, r5
    1038:	4798      	blx	r3
    103a:	b108      	cbz	r0, 1040 <usb_d_cb_trans_setup+0x60>
    103c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1040:	4b06      	ldr	r3, [pc, #24]	; (105c <usb_d_cb_trans_setup+0x7c>)
    1042:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1046:	2305      	movs	r3, #5
    1048:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    104a:	2101      	movs	r1, #1
    104c:	4628      	mov	r0, r5
    104e:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1050:	2101      	movs	r1, #1
    1052:	4640      	mov	r0, r8
    1054:	47b8      	blx	r7
    1056:	e7f1      	b.n	103c <usb_d_cb_trans_setup+0x5c>
    1058:	00000e15 	.word	0x00000e15
    105c:	2000057c 	.word	0x2000057c
    1060:	00002c39 	.word	0x00002c39
    1064:	00002af1 	.word	0x00002af1

00001068 <usb_d_init>:

int32_t usb_d_init(void)
{
    1068:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    106a:	4b11      	ldr	r3, [pc, #68]	; (10b0 <usb_d_init+0x48>)
    106c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    106e:	2800      	cmp	r0, #0
    1070:	db1c      	blt.n	10ac <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    1072:	4c10      	ldr	r4, [pc, #64]	; (10b4 <usb_d_init+0x4c>)
    1074:	2280      	movs	r2, #128	; 0x80
    1076:	2100      	movs	r1, #0
    1078:	4620      	mov	r0, r4
    107a:	4b0f      	ldr	r3, [pc, #60]	; (10b8 <usb_d_init+0x50>)
    107c:	4798      	blx	r3
    107e:	4623      	mov	r3, r4
    1080:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1084:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1086:	4a0d      	ldr	r2, [pc, #52]	; (10bc <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1088:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    108a:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    108c:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    108e:	61da      	str	r2, [r3, #28]
    1090:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1092:	4283      	cmp	r3, r0
    1094:	d1f8      	bne.n	1088 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1096:	490a      	ldr	r1, [pc, #40]	; (10c0 <usb_d_init+0x58>)
    1098:	2000      	movs	r0, #0
    109a:	4c0a      	ldr	r4, [pc, #40]	; (10c4 <usb_d_init+0x5c>)
    109c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    109e:	490a      	ldr	r1, [pc, #40]	; (10c8 <usb_d_init+0x60>)
    10a0:	2001      	movs	r0, #1
    10a2:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    10a4:	4909      	ldr	r1, [pc, #36]	; (10cc <usb_d_init+0x64>)
    10a6:	2002      	movs	r0, #2
    10a8:	47a0      	blx	r4
	return ERR_NONE;
    10aa:	2000      	movs	r0, #0
}
    10ac:	bd10      	pop	{r4, pc}
    10ae:	bf00      	nop
    10b0:	000024e5 	.word	0x000024e5
    10b4:	2000057c 	.word	0x2000057c
    10b8:	00003c11 	.word	0x00003c11
    10bc:	00000e59 	.word	0x00000e59
    10c0:	00000fe1 	.word	0x00000fe1
    10c4:	00002ed9 	.word	0x00002ed9
    10c8:	00000e5d 	.word	0x00000e5d
    10cc:	00000e91 	.word	0x00000e91

000010d0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    10d0:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    10d2:	4b01      	ldr	r3, [pc, #4]	; (10d8 <usb_d_register_callback+0x8>)
    10d4:	4798      	blx	r3
    10d6:	bd08      	pop	{r3, pc}
    10d8:	00002eb5 	.word	0x00002eb5

000010dc <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    10dc:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    10de:	4b01      	ldr	r3, [pc, #4]	; (10e4 <usb_d_enable+0x8>)
    10e0:	4798      	blx	r3
}
    10e2:	bd08      	pop	{r3, pc}
    10e4:	000025e1 	.word	0x000025e1

000010e8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    10e8:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    10ea:	4b01      	ldr	r3, [pc, #4]	; (10f0 <usb_d_attach+0x8>)
    10ec:	4798      	blx	r3
    10ee:	bd08      	pop	{r3, pc}
    10f0:	0000264d 	.word	0x0000264d

000010f4 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    10f4:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    10f6:	4b01      	ldr	r3, [pc, #4]	; (10fc <usb_d_set_address+0x8>)
    10f8:	4798      	blx	r3
    10fa:	bd08      	pop	{r3, pc}
    10fc:	0000265f 	.word	0x0000265f

00001100 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1102:	4606      	mov	r6, r0
    1104:	460c      	mov	r4, r1
    1106:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1108:	4b0f      	ldr	r3, [pc, #60]	; (1148 <usb_d_ep_init+0x48>)
    110a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    110c:	2800      	cmp	r0, #0
    110e:	da14      	bge.n	113a <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1110:	20ff      	movs	r0, #255	; 0xff
    1112:	4b0d      	ldr	r3, [pc, #52]	; (1148 <usb_d_ep_init+0x48>)
    1114:	4798      	blx	r3
		if (ep_index < 0) {
    1116:	1e05      	subs	r5, r0, #0
    1118:	db12      	blt.n	1140 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    111a:	463a      	mov	r2, r7
    111c:	4621      	mov	r1, r4
    111e:	4630      	mov	r0, r6
    1120:	4b0a      	ldr	r3, [pc, #40]	; (114c <usb_d_ep_init+0x4c>)
    1122:	4798      	blx	r3
	if (rc < 0) {
    1124:	2800      	cmp	r0, #0
    1126:	db0d      	blt.n	1144 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1128:	4b09      	ldr	r3, [pc, #36]	; (1150 <usb_d_ep_init+0x50>)
    112a:	0168      	lsls	r0, r5, #5
    112c:	181a      	adds	r2, r3, r0
    112e:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1130:	f004 0403 	and.w	r4, r4, #3
    1134:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    1136:	2000      	movs	r0, #0
    1138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    113a:	f06f 0013 	mvn.w	r0, #19
    113e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    1140:	f06f 0014 	mvn.w	r0, #20
}
    1144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1146:	bf00      	nop
    1148:	00000e15 	.word	0x00000e15
    114c:	0000266d 	.word	0x0000266d
    1150:	2000057c 	.word	0x2000057c

00001154 <usb_d_ep0_init>:
{
    1154:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1156:	4602      	mov	r2, r0
    1158:	2100      	movs	r1, #0
    115a:	4608      	mov	r0, r1
    115c:	4b01      	ldr	r3, [pc, #4]	; (1164 <usb_d_ep0_init+0x10>)
    115e:	4798      	blx	r3
}
    1160:	bd08      	pop	{r3, pc}
    1162:	bf00      	nop
    1164:	00001101 	.word	0x00001101

00001168 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1168:	b538      	push	{r3, r4, r5, lr}
    116a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    116c:	4b06      	ldr	r3, [pc, #24]	; (1188 <usb_d_ep_deinit+0x20>)
    116e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1170:	1e04      	subs	r4, r0, #0
    1172:	db07      	blt.n	1184 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1174:	4628      	mov	r0, r5
    1176:	4b05      	ldr	r3, [pc, #20]	; (118c <usb_d_ep_deinit+0x24>)
    1178:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    117a:	4805      	ldr	r0, [pc, #20]	; (1190 <usb_d_ep_deinit+0x28>)
    117c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1180:	23ff      	movs	r3, #255	; 0xff
    1182:	7043      	strb	r3, [r0, #1]
    1184:	bd38      	pop	{r3, r4, r5, pc}
    1186:	bf00      	nop
    1188:	00000e15 	.word	0x00000e15
    118c:	00002785 	.word	0x00002785
    1190:	2000057c 	.word	0x2000057c

00001194 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1194:	b538      	push	{r3, r4, r5, lr}
    1196:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1198:	4b0e      	ldr	r3, [pc, #56]	; (11d4 <usb_d_ep_enable+0x40>)
    119a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    119c:	1e04      	subs	r4, r0, #0
    119e:	db16      	blt.n	11ce <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    11a0:	0163      	lsls	r3, r4, #5
    11a2:	4a0d      	ldr	r2, [pc, #52]	; (11d8 <usb_d_ep_enable+0x44>)
    11a4:	5cd3      	ldrb	r3, [r2, r3]
    11a6:	2b00      	cmp	r3, #0
    11a8:	bf0c      	ite	eq
    11aa:	2202      	moveq	r2, #2
    11ac:	2201      	movne	r2, #1
    11ae:	4b0a      	ldr	r3, [pc, #40]	; (11d8 <usb_d_ep_enable+0x44>)
    11b0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    11b4:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    11b6:	4628      	mov	r0, r5
    11b8:	4b08      	ldr	r3, [pc, #32]	; (11dc <usb_d_ep_enable+0x48>)
    11ba:	4798      	blx	r3
	if (rc < 0) {
    11bc:	2800      	cmp	r0, #0
    11be:	db00      	blt.n	11c2 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    11c0:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    11c2:	4b05      	ldr	r3, [pc, #20]	; (11d8 <usb_d_ep_enable+0x44>)
    11c4:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    11c8:	2300      	movs	r3, #0
    11ca:	70a3      	strb	r3, [r4, #2]
    11cc:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    11ce:	f06f 0011 	mvn.w	r0, #17
    11d2:	e7f5      	b.n	11c0 <usb_d_ep_enable+0x2c>
    11d4:	00000e15 	.word	0x00000e15
    11d8:	2000057c 	.word	0x2000057c
    11dc:	00002849 	.word	0x00002849

000011e0 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    11e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    11e4:	b086      	sub	sp, #24
    11e6:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    11e8:	7a07      	ldrb	r7, [r0, #8]
    11ea:	4638      	mov	r0, r7
    11ec:	4b3f      	ldr	r3, [pc, #252]	; (12ec <usb_d_ep_transfer+0x10c>)
    11ee:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    11f0:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    11f2:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    11f6:	1e06      	subs	r6, r0, #0
    11f8:	db72      	blt.n	12e0 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    11fa:	a804      	add	r0, sp, #16
    11fc:	4b3c      	ldr	r3, [pc, #240]	; (12f0 <usb_d_ep_transfer+0x110>)
    11fe:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1200:	4b3c      	ldr	r3, [pc, #240]	; (12f4 <usb_d_ep_transfer+0x114>)
    1202:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1206:	789b      	ldrb	r3, [r3, #2]
    1208:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    120c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1210:	b2db      	uxtb	r3, r3
    1212:	2b01      	cmp	r3, #1
    1214:	d011      	beq.n	123a <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1216:	a804      	add	r0, sp, #16
    1218:	4b37      	ldr	r3, [pc, #220]	; (12f8 <usb_d_ep_transfer+0x118>)
    121a:	4798      	blx	r3
		switch (state) {
    121c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1220:	b2db      	uxtb	r3, r3
    1222:	2b05      	cmp	r3, #5
    1224:	d05f      	beq.n	12e6 <usb_d_ep_transfer+0x106>
    1226:	2b06      	cmp	r3, #6
    1228:	d023      	beq.n	1272 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    122a:	2b00      	cmp	r3, #0
    122c:	bf0c      	ite	eq
    122e:	f06f 0012 	mvneq.w	r0, #18
    1232:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    1234:	b006      	add	sp, #24
    1236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    123a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 12f4 <usb_d_ep_transfer+0x114>
    123e:	ea4f 1946 	mov.w	r9, r6, lsl #5
    1242:	eb0a 0309 	add.w	r3, sl, r9
    1246:	2203      	movs	r2, #3
    1248:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    124a:	a804      	add	r0, sp, #16
    124c:	4b2a      	ldr	r3, [pc, #168]	; (12f8 <usb_d_ep_transfer+0x118>)
    124e:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1250:	f81a 3009 	ldrb.w	r3, [sl, r9]
    1254:	b183      	cbz	r3, 1278 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1256:	7a22      	ldrb	r2, [r4, #8]
    1258:	3500      	adds	r5, #0
    125a:	bf18      	it	ne
    125c:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    125e:	6823      	ldr	r3, [r4, #0]
    1260:	9301      	str	r3, [sp, #4]
    1262:	f8cd 8008 	str.w	r8, [sp, #8]
    1266:	f017 0f80 	tst.w	r7, #128	; 0x80
    126a:	d119      	bne.n	12a0 <usb_d_ep_transfer+0xc0>
    126c:	f002 030f 	and.w	r3, r2, #15
    1270:	e018      	b.n	12a4 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    1272:	f06f 000f 	mvn.w	r0, #15
    1276:	e7dd      	b.n	1234 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1278:	4b1e      	ldr	r3, [pc, #120]	; (12f4 <usb_d_ep_transfer+0x114>)
    127a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    127e:	7cda      	ldrb	r2, [r3, #19]
    1280:	7c9d      	ldrb	r5, [r3, #18]
    1282:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    1286:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    1288:	b9a5      	cbnz	r5, 12b4 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    128a:	4b1a      	ldr	r3, [pc, #104]	; (12f4 <usb_d_ep_transfer+0x114>)
    128c:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1290:	2304      	movs	r3, #4
    1292:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    1294:	2300      	movs	r3, #0
			zlp                 = true;
    1296:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1298:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    129a:	6821      	ldr	r1, [r4, #0]
    129c:	9101      	str	r1, [sp, #4]
    129e:	9302      	str	r3, [sp, #8]
    12a0:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    12a4:	f88d 300c 	strb.w	r3, [sp, #12]
    12a8:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    12ac:	a801      	add	r0, sp, #4
    12ae:	4b13      	ldr	r3, [pc, #76]	; (12fc <usb_d_ep_transfer+0x11c>)
    12b0:	4798      	blx	r3
	return rc;
    12b2:	e7bf      	b.n	1234 <usb_d_ep_transfer+0x54>
    12b4:	4643      	mov	r3, r8
    12b6:	45a8      	cmp	r8, r5
    12b8:	bf28      	it	cs
    12ba:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    12bc:	4a0d      	ldr	r2, [pc, #52]	; (12f4 <usb_d_ep_transfer+0x114>)
    12be:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    12c2:	f996 200c 	ldrsb.w	r2, [r6, #12]
    12c6:	2a00      	cmp	r2, #0
    12c8:	db05      	blt.n	12d6 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    12ca:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    12cc:	6821      	ldr	r1, [r4, #0]
    12ce:	9101      	str	r1, [sp, #4]
    12d0:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    12d2:	2500      	movs	r5, #0
    12d4:	e7ca      	b.n	126c <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    12d6:	429d      	cmp	r5, r3
    12d8:	bf94      	ite	ls
    12da:	2500      	movls	r5, #0
    12dc:	2501      	movhi	r5, #1
    12de:	e7db      	b.n	1298 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    12e0:	f06f 0011 	mvn.w	r0, #17
    12e4:	e7a6      	b.n	1234 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    12e6:	2002      	movs	r0, #2
    12e8:	e7a4      	b.n	1234 <usb_d_ep_transfer+0x54>
    12ea:	bf00      	nop
    12ec:	00000e15 	.word	0x00000e15
    12f0:	00000b8d 	.word	0x00000b8d
    12f4:	2000057c 	.word	0x2000057c
    12f8:	00000b9b 	.word	0x00000b9b
    12fc:	00002c99 	.word	0x00002c99

00001300 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    1300:	b538      	push	{r3, r4, r5, lr}
    1302:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1304:	4b07      	ldr	r3, [pc, #28]	; (1324 <usb_d_ep_abort+0x24>)
    1306:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1308:	1e04      	subs	r4, r0, #0
    130a:	db09      	blt.n	1320 <usb_d_ep_abort+0x20>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    130c:	4628      	mov	r0, r5
    130e:	4b06      	ldr	r3, [pc, #24]	; (1328 <usb_d_ep_abort+0x28>)
    1310:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1312:	4806      	ldr	r0, [pc, #24]	; (132c <usb_d_ep_abort+0x2c>)
    1314:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1318:	2301      	movs	r3, #1
    131a:	7083      	strb	r3, [r0, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    131c:	2304      	movs	r3, #4
    131e:	70c3      	strb	r3, [r0, #3]
    1320:	bd38      	pop	{r3, r4, r5, pc}
    1322:	bf00      	nop
    1324:	00000e15 	.word	0x00000e15
    1328:	00002e79 	.word	0x00002e79
    132c:	2000057c 	.word	0x2000057c

00001330 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1330:	b538      	push	{r3, r4, r5, lr}
    1332:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1334:	b141      	cbz	r1, 1348 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1336:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1338:	bf0c      	ite	eq
    133a:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    133c:	2102      	movne	r1, #2
    133e:	4b13      	ldr	r3, [pc, #76]	; (138c <usb_d_ep_halt+0x5c>)
    1340:	4798      	blx	r3
    1342:	4603      	mov	r3, r0
	}
}
    1344:	4618      	mov	r0, r3
    1346:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1348:	4b11      	ldr	r3, [pc, #68]	; (1390 <usb_d_ep_halt+0x60>)
    134a:	4798      	blx	r3
	if (ep_index < 0) {
    134c:	1e05      	subs	r5, r0, #0
    134e:	db19      	blt.n	1384 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1350:	2102      	movs	r1, #2
    1352:	4620      	mov	r0, r4
    1354:	4b0d      	ldr	r3, [pc, #52]	; (138c <usb_d_ep_halt+0x5c>)
    1356:	4798      	blx	r3
    1358:	4603      	mov	r3, r0
    135a:	2800      	cmp	r0, #0
    135c:	d0f2      	beq.n	1344 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    135e:	2100      	movs	r1, #0
    1360:	4620      	mov	r0, r4
    1362:	4b0a      	ldr	r3, [pc, #40]	; (138c <usb_d_ep_halt+0x5c>)
    1364:	4798      	blx	r3
		if (rc < 0) {
    1366:	1e03      	subs	r3, r0, #0
    1368:	dbec      	blt.n	1344 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    136a:	4b0a      	ldr	r3, [pc, #40]	; (1394 <usb_d_ep_halt+0x64>)
    136c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1370:	2201      	movs	r2, #1
    1372:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1374:	2103      	movs	r1, #3
    1376:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1378:	69db      	ldr	r3, [r3, #28]
    137a:	2200      	movs	r2, #0
    137c:	4620      	mov	r0, r4
    137e:	4798      	blx	r3
	return ERR_NONE;
    1380:	2300      	movs	r3, #0
    1382:	e7df      	b.n	1344 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    1384:	f06f 0311 	mvn.w	r3, #17
    1388:	e7dc      	b.n	1344 <usb_d_ep_halt+0x14>
    138a:	bf00      	nop
    138c:	00002af1 	.word	0x00002af1
    1390:	00000e15 	.word	0x00000e15
    1394:	2000057c 	.word	0x2000057c

00001398 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1398:	b538      	push	{r3, r4, r5, lr}
    139a:	460d      	mov	r5, r1
    139c:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    139e:	4b0e      	ldr	r3, [pc, #56]	; (13d8 <usb_d_ep_register_callback+0x40>)
    13a0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    13a2:	4b0e      	ldr	r3, [pc, #56]	; (13dc <usb_d_ep_register_callback+0x44>)
    13a4:	2c00      	cmp	r4, #0
    13a6:	bf08      	it	eq
    13a8:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    13aa:	2800      	cmp	r0, #0
    13ac:	db13      	blt.n	13d6 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    13ae:	2d01      	cmp	r5, #1
    13b0:	d008      	beq.n	13c4 <usb_d_ep_register_callback+0x2c>
    13b2:	b115      	cbz	r5, 13ba <usb_d_ep_register_callback+0x22>
    13b4:	2d02      	cmp	r5, #2
    13b6:	d00a      	beq.n	13ce <usb_d_ep_register_callback+0x36>
    13b8:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    13ba:	4b09      	ldr	r3, [pc, #36]	; (13e0 <usb_d_ep_register_callback+0x48>)
    13bc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    13c0:	6144      	str	r4, [r0, #20]
		break;
    13c2:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    13c4:	4b06      	ldr	r3, [pc, #24]	; (13e0 <usb_d_ep_register_callback+0x48>)
    13c6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    13ca:	6184      	str	r4, [r0, #24]
		break;
    13cc:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    13ce:	4b04      	ldr	r3, [pc, #16]	; (13e0 <usb_d_ep_register_callback+0x48>)
    13d0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    13d4:	61c4      	str	r4, [r0, #28]
    13d6:	bd38      	pop	{r3, r4, r5, pc}
    13d8:	00000e15 	.word	0x00000e15
    13dc:	00000e59 	.word	0x00000e59
    13e0:	2000057c 	.word	0x2000057c

000013e4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    13e4:	b900      	cbnz	r0, 13e8 <assert+0x4>
		__asm("BKPT #0");
    13e6:	be00      	bkpt	0x0000
    13e8:	4770      	bx	lr

000013ea <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    13ea:	6803      	ldr	r3, [r0, #0]
    13ec:	b14b      	cbz	r3, 1402 <is_list_element+0x18>
		if (it == element) {
    13ee:	428b      	cmp	r3, r1
    13f0:	d009      	beq.n	1406 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    13f2:	681b      	ldr	r3, [r3, #0]
    13f4:	b11b      	cbz	r3, 13fe <is_list_element+0x14>
		if (it == element) {
    13f6:	4299      	cmp	r1, r3
    13f8:	d1fb      	bne.n	13f2 <is_list_element+0x8>
			return true;
    13fa:	2001      	movs	r0, #1
		}
	}

	return false;
}
    13fc:	4770      	bx	lr
	return false;
    13fe:	2000      	movs	r0, #0
    1400:	4770      	bx	lr
    1402:	2000      	movs	r0, #0
    1404:	4770      	bx	lr
			return true;
    1406:	2001      	movs	r0, #1
    1408:	4770      	bx	lr
	...

0000140c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    140c:	b538      	push	{r3, r4, r5, lr}
    140e:	4604      	mov	r4, r0
    1410:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1412:	4b06      	ldr	r3, [pc, #24]	; (142c <list_insert_as_head+0x20>)
    1414:	4798      	blx	r3
    1416:	f080 0001 	eor.w	r0, r0, #1
    141a:	2239      	movs	r2, #57	; 0x39
    141c:	4904      	ldr	r1, [pc, #16]	; (1430 <list_insert_as_head+0x24>)
    141e:	b2c0      	uxtb	r0, r0
    1420:	4b04      	ldr	r3, [pc, #16]	; (1434 <list_insert_as_head+0x28>)
    1422:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1424:	6823      	ldr	r3, [r4, #0]
    1426:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1428:	6025      	str	r5, [r4, #0]
    142a:	bd38      	pop	{r3, r4, r5, pc}
    142c:	000013eb 	.word	0x000013eb
    1430:	00003e58 	.word	0x00003e58
    1434:	000013e5 	.word	0x000013e5

00001438 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1438:	6803      	ldr	r3, [r0, #0]
    143a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    143c:	6001      	str	r1, [r0, #0]
    143e:	4770      	bx	lr

00001440 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    1440:	b570      	push	{r4, r5, r6, lr}
    1442:	4605      	mov	r5, r0
    1444:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    1446:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1448:	4b0a      	ldr	r3, [pc, #40]	; (1474 <list_insert_at_end+0x34>)
    144a:	4798      	blx	r3
    144c:	f080 0001 	eor.w	r0, r0, #1
    1450:	224f      	movs	r2, #79	; 0x4f
    1452:	4909      	ldr	r1, [pc, #36]	; (1478 <list_insert_at_end+0x38>)
    1454:	b2c0      	uxtb	r0, r0
    1456:	4b09      	ldr	r3, [pc, #36]	; (147c <list_insert_at_end+0x3c>)
    1458:	4798      	blx	r3

	if (!list->head) {
    145a:	682b      	ldr	r3, [r5, #0]
    145c:	b91b      	cbnz	r3, 1466 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    145e:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    1460:	6033      	str	r3, [r6, #0]
		return;
    1462:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    1464:	461c      	mov	r4, r3
	while (it->next) {
    1466:	6823      	ldr	r3, [r4, #0]
    1468:	2b00      	cmp	r3, #0
    146a:	d1fb      	bne.n	1464 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    146c:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    146e:	6033      	str	r3, [r6, #0]
    1470:	bd70      	pop	{r4, r5, r6, pc}
    1472:	bf00      	nop
    1474:	000013eb 	.word	0x000013eb
    1478:	00003e58 	.word	0x00003e58
    147c:	000013e5 	.word	0x000013e5

00001480 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1480:	6803      	ldr	r3, [r0, #0]
    1482:	b10b      	cbz	r3, 1488 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1484:	681a      	ldr	r2, [r3, #0]
    1486:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1488:	4618      	mov	r0, r3
    148a:	4770      	bx	lr

0000148c <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    148c:	0943      	lsrs	r3, r0, #5
    148e:	f000 001f 	and.w	r0, r0, #31
    1492:	2201      	movs	r2, #1
    1494:	fa02 f000 	lsl.w	r0, r2, r0
    1498:	3340      	adds	r3, #64	; 0x40
    149a:	4a02      	ldr	r2, [pc, #8]	; (14a4 <_irq_set+0x18>)
    149c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    14a0:	4770      	bx	lr
    14a2:	bf00      	nop
    14a4:	e000e100 	.word	0xe000e100

000014a8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    14a8:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    14aa:	4a11      	ldr	r2, [pc, #68]	; (14f0 <_init_chip+0x48>)
    14ac:	8813      	ldrh	r3, [r2, #0]
    14ae:	b29b      	uxth	r3, r3
    14b0:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    14b2:	4b10      	ldr	r3, [pc, #64]	; (14f4 <_init_chip+0x4c>)
    14b4:	4798      	blx	r3
	_oscctrl_init_sources();
    14b6:	4b10      	ldr	r3, [pc, #64]	; (14f8 <_init_chip+0x50>)
    14b8:	4798      	blx	r3
	_mclk_init();
    14ba:	4b10      	ldr	r3, [pc, #64]	; (14fc <_init_chip+0x54>)
    14bc:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    14be:	4b10      	ldr	r3, [pc, #64]	; (1500 <_init_chip+0x58>)
    14c0:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    14c2:	f640 70ff 	movw	r0, #4095	; 0xfff
    14c6:	4b0f      	ldr	r3, [pc, #60]	; (1504 <_init_chip+0x5c>)
    14c8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    14ca:	4b0f      	ldr	r3, [pc, #60]	; (1508 <_init_chip+0x60>)
    14cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    14ce:	62da      	str	r2, [r3, #44]	; 0x2c
    14d0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    14d4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    14d8:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    14dc:	f042 02ef 	orr.w	r2, r2, #239	; 0xef
    14e0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    14e4:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    14e8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    14ec:	bd08      	pop	{r3, pc}
    14ee:	bf00      	nop
    14f0:	41004000 	.word	0x41004000
    14f4:	000015d1 	.word	0x000015d1
    14f8:	000015e5 	.word	0x000015e5
    14fc:	000015c5 	.word	0x000015c5
    1500:	00001601 	.word	0x00001601
    1504:	00001569 	.word	0x00001569
    1508:	41008000 	.word	0x41008000

0000150c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    150c:	b430      	push	{r4, r5}
    150e:	4814      	ldr	r0, [pc, #80]	; (1560 <_event_system_init+0x54>)
    1510:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1514:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1516:	4c13      	ldr	r4, [pc, #76]	; (1564 <_event_system_init+0x58>)
    1518:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    151a:	f813 1b01 	ldrb.w	r1, [r3], #1
    151e:	3248      	adds	r2, #72	; 0x48
    1520:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1524:	42ab      	cmp	r3, r5
    1526:	d1f7      	bne.n	1518 <_event_system_init+0xc>
    1528:	480d      	ldr	r0, [pc, #52]	; (1560 <_event_system_init+0x54>)
    152a:	f100 0442 	add.w	r4, r0, #66	; 0x42
    152e:	3080      	adds	r0, #128	; 0x80
    1530:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1532:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    1536:	00ca      	lsls	r2, r1, #3
    1538:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    153c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1540:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1542:	f850 3f04 	ldr.w	r3, [r0, #4]!
    1546:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1548:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    154c:	43db      	mvns	r3, r3
    154e:	b2db      	uxtb	r3, r3
    1550:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    1554:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1556:	2920      	cmp	r1, #32
    1558:	d1eb      	bne.n	1532 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    155a:	2000      	movs	r0, #0
    155c:	bc30      	pop	{r4, r5}
    155e:	4770      	bx	lr
    1560:	00003e78 	.word	0x00003e78
    1564:	4100e000 	.word	0x4100e000

00001568 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1568:	f010 0f01 	tst.w	r0, #1
    156c:	d008      	beq.n	1580 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    156e:	4a11      	ldr	r2, [pc, #68]	; (15b4 <_gclk_init_generators_by_fref+0x4c>)
    1570:	4b11      	ldr	r3, [pc, #68]	; (15b8 <_gclk_init_generators_by_fref+0x50>)
    1572:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1574:	4619      	mov	r1, r3
    1576:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    157a:	684b      	ldr	r3, [r1, #4]
    157c:	4213      	tst	r3, r2
    157e:	d1fc      	bne.n	157a <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1580:	f010 0f02 	tst.w	r0, #2
    1584:	d008      	beq.n	1598 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1586:	4a0d      	ldr	r2, [pc, #52]	; (15bc <_gclk_init_generators_by_fref+0x54>)
    1588:	4b0b      	ldr	r3, [pc, #44]	; (15b8 <_gclk_init_generators_by_fref+0x50>)
    158a:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    158c:	4619      	mov	r1, r3
    158e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1592:	684b      	ldr	r3, [r1, #4]
    1594:	4213      	tst	r3, r2
    1596:	d1fc      	bne.n	1592 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    1598:	f410 6f00 	tst.w	r0, #2048	; 0x800
    159c:	d008      	beq.n	15b0 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    159e:	4a08      	ldr	r2, [pc, #32]	; (15c0 <_gclk_init_generators_by_fref+0x58>)
    15a0:	4b05      	ldr	r3, [pc, #20]	; (15b8 <_gclk_init_generators_by_fref+0x50>)
    15a2:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15a4:	4619      	mov	r1, r3
    15a6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    15aa:	684b      	ldr	r3, [r1, #4]
    15ac:	4213      	tst	r3, r2
    15ae:	d1fc      	bne.n	15aa <_gclk_init_generators_by_fref+0x42>
    15b0:	4770      	bx	lr
    15b2:	bf00      	nop
    15b4:	00010101 	.word	0x00010101
    15b8:	40001c00 	.word	0x40001c00
    15bc:	00010906 	.word	0x00010906
    15c0:	00010904 	.word	0x00010904

000015c4 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    15c4:	2201      	movs	r2, #1
    15c6:	4b01      	ldr	r3, [pc, #4]	; (15cc <_mclk_init+0x8>)
    15c8:	715a      	strb	r2, [r3, #5]
    15ca:	4770      	bx	lr
    15cc:	40000800 	.word	0x40000800

000015d0 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    15d0:	4b03      	ldr	r3, [pc, #12]	; (15e0 <_osc32kctrl_init_sources+0x10>)
    15d2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    15d4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    15d8:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    15da:	2200      	movs	r2, #0
    15dc:	741a      	strb	r2, [r3, #16]
    15de:	4770      	bx	lr
    15e0:	40001400 	.word	0x40001400

000015e4 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    15e4:	4a04      	ldr	r2, [pc, #16]	; (15f8 <_oscctrl_init_sources+0x14>)
    15e6:	4b05      	ldr	r3, [pc, #20]	; (15fc <_oscctrl_init_sources+0x18>)
    15e8:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    15ea:	461a      	mov	r2, r3
    15ec:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    15ee:	f013 0f02 	tst.w	r3, #2
    15f2:	d0fb      	beq.n	15ec <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    15f4:	4770      	bx	lr
    15f6:	bf00      	nop
    15f8:	03002606 	.word	0x03002606
    15fc:	40001000 	.word	0x40001000

00001600 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1600:	4a36      	ldr	r2, [pc, #216]	; (16dc <_oscctrl_init_referenced_generators+0xdc>)
    1602:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1604:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1608:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    160c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    160e:	4611      	mov	r1, r2
    1610:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1614:	684b      	ldr	r3, [r1, #4]
    1616:	4213      	tst	r3, r2
    1618:	d1fc      	bne.n	1614 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    161a:	4a30      	ldr	r2, [pc, #192]	; (16dc <_oscctrl_init_referenced_generators+0xdc>)
    161c:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    161e:	f013 0f04 	tst.w	r3, #4
    1622:	d1fb      	bne.n	161c <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1624:	4b2e      	ldr	r3, [pc, #184]	; (16e0 <_oscctrl_init_referenced_generators+0xe0>)
    1626:	2200      	movs	r2, #0
    1628:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    162a:	4a2e      	ldr	r2, [pc, #184]	; (16e4 <_oscctrl_init_referenced_generators+0xe4>)
    162c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    162e:	461a      	mov	r2, r3
    1630:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1634:	f013 0f10 	tst.w	r3, #16
    1638:	d1fa      	bne.n	1630 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    163a:	2200      	movs	r2, #0
    163c:	4b28      	ldr	r3, [pc, #160]	; (16e0 <_oscctrl_init_referenced_generators+0xe0>)
    163e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1642:	461a      	mov	r2, r3
    1644:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1648:	f013 0f04 	tst.w	r3, #4
    164c:	d1fa      	bne.n	1644 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    164e:	2202      	movs	r2, #2
    1650:	4b23      	ldr	r3, [pc, #140]	; (16e0 <_oscctrl_init_referenced_generators+0xe0>)
    1652:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1654:	461a      	mov	r2, r3
    1656:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    165a:	f013 0f02 	tst.w	r3, #2
    165e:	d1fa      	bne.n	1656 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1660:	4b1f      	ldr	r3, [pc, #124]	; (16e0 <_oscctrl_init_referenced_generators+0xe0>)
    1662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1664:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1666:	461a      	mov	r2, r3
    1668:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    166c:	f013 0f08 	tst.w	r3, #8
    1670:	d1fa      	bne.n	1668 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1672:	2219      	movs	r2, #25
    1674:	4b1a      	ldr	r3, [pc, #104]	; (16e0 <_oscctrl_init_referenced_generators+0xe0>)
    1676:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    167a:	461a      	mov	r2, r3
    167c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1680:	f013 0f04 	tst.w	r3, #4
    1684:	d1fa      	bne.n	167c <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1686:	4b16      	ldr	r3, [pc, #88]	; (16e0 <_oscctrl_init_referenced_generators+0xe0>)
    1688:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    168c:	f013 0f01 	tst.w	r3, #1
    1690:	d01d      	beq.n	16ce <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1692:	4a13      	ldr	r2, [pc, #76]	; (16e0 <_oscctrl_init_referenced_generators+0xe0>)
    1694:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1696:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    169a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    169e:	d1f9      	bne.n	1694 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    16a0:	4a0e      	ldr	r2, [pc, #56]	; (16dc <_oscctrl_init_referenced_generators+0xdc>)
    16a2:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    16a4:	2b00      	cmp	r3, #0
    16a6:	d1fc      	bne.n	16a2 <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    16a8:	4a0c      	ldr	r2, [pc, #48]	; (16dc <_oscctrl_init_referenced_generators+0xdc>)
    16aa:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    16ac:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    16b0:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    16b4:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    16b6:	4611      	mov	r1, r2
    16b8:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    16bc:	684b      	ldr	r3, [r1, #4]
    16be:	4213      	tst	r3, r2
    16c0:	d1fc      	bne.n	16bc <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    16c2:	4a06      	ldr	r2, [pc, #24]	; (16dc <_oscctrl_init_referenced_generators+0xdc>)
    16c4:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    16c6:	f013 0f04 	tst.w	r3, #4
    16ca:	d1fb      	bne.n	16c4 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    16cc:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    16ce:	4a04      	ldr	r2, [pc, #16]	; (16e0 <_oscctrl_init_referenced_generators+0xe0>)
    16d0:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    16d2:	f413 7f80 	tst.w	r3, #256	; 0x100
    16d6:	d0fb      	beq.n	16d0 <_oscctrl_init_referenced_generators+0xd0>
    16d8:	e7e2      	b.n	16a0 <_oscctrl_init_referenced_generators+0xa0>
    16da:	bf00      	nop
    16dc:	40001c00 	.word	0x40001c00
    16e0:	40001000 	.word	0x40001000
    16e4:	0401bb80 	.word	0x0401bb80

000016e8 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    16e8:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    16ea:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    16ec:	6913      	ldr	r3, [r2, #16]
    16ee:	f013 0f60 	tst.w	r3, #96	; 0x60
    16f2:	d1fb      	bne.n	16ec <_rtc_timer_set_period+0x4>
}
    16f4:	4770      	bx	lr

000016f6 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    16f6:	68c2      	ldr	r2, [r0, #12]
    16f8:	6913      	ldr	r3, [r2, #16]
    16fa:	f013 0f60 	tst.w	r3, #96	; 0x60
    16fe:	d1fb      	bne.n	16f8 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    1700:	6a10      	ldr	r0, [r2, #32]
}
    1702:	4770      	bx	lr

00001704 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    1704:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1706:	f248 0103 	movw	r1, #32771	; 0x8003
    170a:	6913      	ldr	r3, [r2, #16]
    170c:	420b      	tst	r3, r1
    170e:	d1fc      	bne.n	170a <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    1710:	8810      	ldrh	r0, [r2, #0]
}
    1712:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1716:	4770      	bx	lr

00001718 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    1718:	4770      	bx	lr
	...

0000171c <_rtc_timer_init>:
{
    171c:	b538      	push	{r3, r4, r5, lr}
    171e:	460c      	mov	r4, r1
	ASSERT(dev);
    1720:	4605      	mov	r5, r0
    1722:	2230      	movs	r2, #48	; 0x30
    1724:	4917      	ldr	r1, [pc, #92]	; (1784 <_rtc_timer_init+0x68>)
    1726:	3000      	adds	r0, #0
    1728:	bf18      	it	ne
    172a:	2001      	movne	r0, #1
    172c:	4b16      	ldr	r3, [pc, #88]	; (1788 <_rtc_timer_init+0x6c>)
    172e:	4798      	blx	r3
	dev->hw = hw;
    1730:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1732:	2301      	movs	r3, #1
    1734:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1736:	f248 0203 	movw	r2, #32771	; 0x8003
    173a:	6923      	ldr	r3, [r4, #16]
    173c:	4213      	tst	r3, r2
    173e:	d1fc      	bne.n	173a <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    1740:	68ea      	ldr	r2, [r5, #12]
    1742:	6913      	ldr	r3, [r2, #16]
    1744:	f013 0f01 	tst.w	r3, #1
    1748:	d1fb      	bne.n	1742 <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    174a:	f44f 7380 	mov.w	r3, #256	; 0x100
    174e:	6053      	str	r3, [r2, #4]
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    1750:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1752:	f248 0380 	movw	r3, #32896	; 0x8080
    1756:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1758:	f248 0103 	movw	r1, #32771	; 0x8003
    175c:	6913      	ldr	r3, [r2, #16]
    175e:	420b      	tst	r3, r1
    1760:	d1fc      	bne.n	175c <_rtc_timer_init+0x40>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    1762:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1764:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1768:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    176a:	6913      	ldr	r3, [r2, #16]
    176c:	f013 0f60 	tst.w	r3, #96	; 0x60
    1770:	d1fb      	bne.n	176a <_rtc_timer_init+0x4e>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    1772:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1774:	f44f 7280 	mov.w	r2, #256	; 0x100
    1778:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    177a:	4b04      	ldr	r3, [pc, #16]	; (178c <_rtc_timer_init+0x70>)
    177c:	601d      	str	r5, [r3, #0]
}
    177e:	2000      	movs	r0, #0
    1780:	bd38      	pop	{r3, r4, r5, pc}
    1782:	bf00      	nop
    1784:	00003f7c 	.word	0x00003f7c
    1788:	000013e5 	.word	0x000013e5
    178c:	200005fc 	.word	0x200005fc

00001790 <_rtc_timer_deinit>:
{
    1790:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    1792:	4604      	mov	r4, r0
    1794:	b1c8      	cbz	r0, 17ca <_rtc_timer_deinit+0x3a>
    1796:	68c0      	ldr	r0, [r0, #12]
    1798:	3000      	adds	r0, #0
    179a:	bf18      	it	ne
    179c:	2001      	movne	r0, #1
    179e:	2252      	movs	r2, #82	; 0x52
    17a0:	490b      	ldr	r1, [pc, #44]	; (17d0 <_rtc_timer_deinit+0x40>)
    17a2:	4b0c      	ldr	r3, [pc, #48]	; (17d4 <_rtc_timer_deinit+0x44>)
    17a4:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    17aa:	4b0b      	ldr	r3, [pc, #44]	; (17d8 <_rtc_timer_deinit+0x48>)
    17ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    17b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17b4:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    17b8:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    17ba:	2301      	movs	r3, #1
    17bc:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    17be:	f248 0103 	movw	r1, #32771	; 0x8003
    17c2:	6913      	ldr	r3, [r2, #16]
    17c4:	420b      	tst	r3, r1
    17c6:	d1fc      	bne.n	17c2 <_rtc_timer_deinit+0x32>
}
    17c8:	bd10      	pop	{r4, pc}
    17ca:	2000      	movs	r0, #0
    17cc:	e7e7      	b.n	179e <_rtc_timer_deinit+0xe>
    17ce:	bf00      	nop
    17d0:	00003f7c 	.word	0x00003f7c
    17d4:	000013e5 	.word	0x000013e5
    17d8:	e000e100 	.word	0xe000e100

000017dc <_rtc_timer_start>:
{
    17dc:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    17de:	4604      	mov	r4, r0
    17e0:	b310      	cbz	r0, 1828 <_rtc_timer_start+0x4c>
    17e2:	68c0      	ldr	r0, [r0, #12]
    17e4:	3000      	adds	r0, #0
    17e6:	bf18      	it	ne
    17e8:	2001      	movne	r0, #1
    17ea:	225e      	movs	r2, #94	; 0x5e
    17ec:	490f      	ldr	r1, [pc, #60]	; (182c <_rtc_timer_start+0x50>)
    17ee:	4b10      	ldr	r3, [pc, #64]	; (1830 <_rtc_timer_start+0x54>)
    17f0:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    17f6:	4b0f      	ldr	r3, [pc, #60]	; (1834 <_rtc_timer_start+0x58>)
    17f8:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    17fa:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    17fc:	2300      	movs	r3, #0
    17fe:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1800:	6913      	ldr	r3, [r2, #16]
    1802:	f013 0f08 	tst.w	r3, #8
    1806:	d1fb      	bne.n	1800 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    1808:	68e3      	ldr	r3, [r4, #12]
    180a:	691a      	ldr	r2, [r3, #16]
    180c:	f012 0f08 	tst.w	r2, #8
    1810:	d1fb      	bne.n	180a <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    1812:	881a      	ldrh	r2, [r3, #0]
    1814:	b292      	uxth	r2, r2
    1816:	f042 0202 	orr.w	r2, r2, #2
    181a:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    181c:	f248 0103 	movw	r1, #32771	; 0x8003
    1820:	691a      	ldr	r2, [r3, #16]
    1822:	420a      	tst	r2, r1
    1824:	d1fc      	bne.n	1820 <_rtc_timer_start+0x44>
}
    1826:	bd10      	pop	{r4, pc}
    1828:	2000      	movs	r0, #0
    182a:	e7de      	b.n	17ea <_rtc_timer_start+0xe>
    182c:	00003f7c 	.word	0x00003f7c
    1830:	000013e5 	.word	0x000013e5
    1834:	e000e100 	.word	0xe000e100

00001838 <_rtc_timer_stop>:
{
    1838:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    183a:	4604      	mov	r4, r0
    183c:	b1a0      	cbz	r0, 1868 <_rtc_timer_stop+0x30>
    183e:	68c0      	ldr	r0, [r0, #12]
    1840:	3000      	adds	r0, #0
    1842:	bf18      	it	ne
    1844:	2001      	movne	r0, #1
    1846:	226b      	movs	r2, #107	; 0x6b
    1848:	4908      	ldr	r1, [pc, #32]	; (186c <_rtc_timer_stop+0x34>)
    184a:	4b09      	ldr	r3, [pc, #36]	; (1870 <_rtc_timer_stop+0x38>)
    184c:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    184e:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    1850:	8813      	ldrh	r3, [r2, #0]
    1852:	f023 0302 	bic.w	r3, r3, #2
    1856:	041b      	lsls	r3, r3, #16
    1858:	0c1b      	lsrs	r3, r3, #16
    185a:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    185c:	f248 0103 	movw	r1, #32771	; 0x8003
    1860:	6913      	ldr	r3, [r2, #16]
    1862:	420b      	tst	r3, r1
    1864:	d1fc      	bne.n	1860 <_rtc_timer_stop+0x28>
}
    1866:	bd10      	pop	{r4, pc}
    1868:	2000      	movs	r0, #0
    186a:	e7ec      	b.n	1846 <_rtc_timer_stop+0xe>
    186c:	00003f7c 	.word	0x00003f7c
    1870:	000013e5 	.word	0x000013e5

00001874 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    1874:	4800      	ldr	r0, [pc, #0]	; (1878 <_rtc_get_timer+0x4>)
    1876:	4770      	bx	lr
    1878:	20000000 	.word	0x20000000

0000187c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    187c:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    187e:	4b08      	ldr	r3, [pc, #32]	; (18a0 <RTC_Handler+0x24>)
    1880:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    1882:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1884:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    1886:	f413 7f80 	tst.w	r3, #256	; 0x100
    188a:	d007      	beq.n	189c <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    188c:	6823      	ldr	r3, [r4, #0]
    188e:	b10b      	cbz	r3, 1894 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    1890:	4620      	mov	r0, r4
    1892:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1894:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1896:	f44f 7280 	mov.w	r2, #256	; 0x100
    189a:	819a      	strh	r2, [r3, #12]
    189c:	bd10      	pop	{r4, pc}
    189e:	bf00      	nop
    18a0:	200005fc 	.word	0x200005fc

000018a4 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    18a4:	4b03      	ldr	r3, [pc, #12]	; (18b4 <_delay_init+0x10>)
    18a6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    18aa:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    18ac:	2205      	movs	r2, #5
    18ae:	601a      	str	r2, [r3, #0]
    18b0:	4770      	bx	lr
    18b2:	bf00      	nop
    18b4:	e000e010 	.word	0xe000e010

000018b8 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    18b8:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    18ba:	6813      	ldr	r3, [r2, #0]
    18bc:	f043 0302 	orr.w	r3, r3, #2
    18c0:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    18c2:	6913      	ldr	r3, [r2, #16]
    18c4:	f013 0f03 	tst.w	r3, #3
    18c8:	d1fb      	bne.n	18c2 <_tc_timer_start+0xa>
}
    18ca:	4770      	bx	lr

000018cc <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    18cc:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    18ce:	6813      	ldr	r3, [r2, #0]
    18d0:	f023 0302 	bic.w	r3, r3, #2
    18d4:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    18d6:	6913      	ldr	r3, [r2, #16]
    18d8:	f013 0f03 	tst.w	r3, #3
    18dc:	d1fb      	bne.n	18d6 <_tc_timer_stop+0xa>
}
    18de:	4770      	bx	lr

000018e0 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    18e0:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    18e2:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    18e4:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    18e8:	2a02      	cmp	r2, #2
    18ea:	d00a      	beq.n	1902 <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    18ec:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    18ee:	f012 0f0c 	tst.w	r2, #12
    18f2:	d10c      	bne.n	190e <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    18f4:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    18f6:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    18f8:	691a      	ldr	r2, [r3, #16]
    18fa:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    18fe:	d1fb      	bne.n	18f8 <_tc_timer_set_period+0x18>
    1900:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1902:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1904:	691a      	ldr	r2, [r3, #16]
    1906:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    190a:	d1fb      	bne.n	1904 <_tc_timer_set_period+0x24>
    190c:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    190e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1910:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1914:	2a01      	cmp	r2, #1
    1916:	d000      	beq.n	191a <_tc_timer_set_period+0x3a>
    1918:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    191a:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    191c:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    191e:	691a      	ldr	r2, [r3, #16]
    1920:	f012 0f20 	tst.w	r2, #32
    1924:	d1fb      	bne.n	191e <_tc_timer_set_period+0x3e>
    1926:	e7f7      	b.n	1918 <_tc_timer_set_period+0x38>

00001928 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    1928:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    192a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    192c:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1930:	2a02      	cmp	r2, #2
    1932:	d00a      	beq.n	194a <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1934:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1936:	f012 0f0c 	tst.w	r2, #12
    193a:	d10c      	bne.n	1956 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    193c:	691a      	ldr	r2, [r3, #16]
    193e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    1942:	d1fb      	bne.n	193c <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    1944:	8b98      	ldrh	r0, [r3, #28]
    1946:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    1948:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    194a:	691a      	ldr	r2, [r3, #16]
    194c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    1950:	d1fb      	bne.n	194a <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    1952:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    1954:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1956:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1958:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    195c:	2a01      	cmp	r2, #1
    195e:	d001      	beq.n	1964 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    1960:	2000      	movs	r0, #0
}
    1962:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1964:	691a      	ldr	r2, [r3, #16]
    1966:	f012 0f20 	tst.w	r2, #32
    196a:	d1fb      	bne.n	1964 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    196c:	7ed8      	ldrb	r0, [r3, #27]
    196e:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    1970:	4770      	bx	lr

00001972 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1972:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1974:	6913      	ldr	r3, [r2, #16]
    1976:	f013 0f03 	tst.w	r3, #3
    197a:	d1fb      	bne.n	1974 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    197c:	6810      	ldr	r0, [r2, #0]
}
    197e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1982:	4770      	bx	lr

00001984 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    1984:	b570      	push	{r4, r5, r6, lr}
    1986:	b088      	sub	sp, #32
    1988:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    198a:	466c      	mov	r4, sp
    198c:	4d12      	ldr	r5, [pc, #72]	; (19d8 <get_tc_index+0x54>)
    198e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1992:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1996:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    199a:	9b00      	ldr	r3, [sp, #0]
    199c:	42b3      	cmp	r3, r6
    199e:	d00b      	beq.n	19b8 <get_tc_index+0x34>
    19a0:	4630      	mov	r0, r6
    19a2:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    19a4:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    19a6:	f852 1b04 	ldr.w	r1, [r2], #4
    19aa:	4281      	cmp	r1, r0
    19ac:	d005      	beq.n	19ba <get_tc_index+0x36>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    19ae:	3301      	adds	r3, #1
    19b0:	2b08      	cmp	r3, #8
    19b2:	d1f8      	bne.n	19a6 <get_tc_index+0x22>
			return i;
    19b4:	2000      	movs	r0, #0
    19b6:	e00b      	b.n	19d0 <get_tc_index+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    19b8:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    19ba:	f013 0fff 	tst.w	r3, #255	; 0xff
    19be:	d009      	beq.n	19d4 <get_tc_index+0x50>
	ASSERT(false);
    19c0:	f240 1249 	movw	r2, #329	; 0x149
    19c4:	4905      	ldr	r1, [pc, #20]	; (19dc <get_tc_index+0x58>)
    19c6:	2000      	movs	r0, #0
    19c8:	4b05      	ldr	r3, [pc, #20]	; (19e0 <get_tc_index+0x5c>)
    19ca:	4798      	blx	r3
	return -1;
    19cc:	f04f 30ff 	mov.w	r0, #4294967295
}
    19d0:	b008      	add	sp, #32
    19d2:	bd70      	pop	{r4, r5, r6, pc}
			return i;
    19d4:	2000      	movs	r0, #0
    19d6:	e7fb      	b.n	19d0 <get_tc_index+0x4c>
    19d8:	00003f94 	.word	0x00003f94
    19dc:	00003fc8 	.word	0x00003fc8
    19e0:	000013e5 	.word	0x000013e5

000019e4 <_tc_timer_init>:
{
    19e4:	b570      	push	{r4, r5, r6, lr}
    19e6:	4606      	mov	r6, r0
    19e8:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    19ea:	4608      	mov	r0, r1
    19ec:	4b60      	ldr	r3, [pc, #384]	; (1b70 <_tc_timer_init+0x18c>)
    19ee:	4798      	blx	r3
    19f0:	4605      	mov	r5, r0
	device->hw = hw;
    19f2:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    19f4:	229a      	movs	r2, #154	; 0x9a
    19f6:	495f      	ldr	r1, [pc, #380]	; (1b74 <_tc_timer_init+0x190>)
    19f8:	2001      	movs	r0, #1
    19fa:	4b5f      	ldr	r3, [pc, #380]	; (1b78 <_tc_timer_init+0x194>)
    19fc:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    19fe:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    1a00:	f013 0f01 	tst.w	r3, #1
    1a04:	d119      	bne.n	1a3a <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1a06:	6923      	ldr	r3, [r4, #16]
    1a08:	f013 0f03 	tst.w	r3, #3
    1a0c:	d1fb      	bne.n	1a06 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1a0e:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1a10:	f013 0f02 	tst.w	r3, #2
    1a14:	d00b      	beq.n	1a2e <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1a16:	6823      	ldr	r3, [r4, #0]
    1a18:	f023 0302 	bic.w	r3, r3, #2
    1a1c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1a1e:	6923      	ldr	r3, [r4, #16]
    1a20:	f013 0f03 	tst.w	r3, #3
    1a24:	d1fb      	bne.n	1a1e <_tc_timer_init+0x3a>
    1a26:	6923      	ldr	r3, [r4, #16]
    1a28:	f013 0f02 	tst.w	r3, #2
    1a2c:	d1fb      	bne.n	1a26 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1a2e:	2301      	movs	r3, #1
    1a30:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1a32:	6923      	ldr	r3, [r4, #16]
    1a34:	f013 0f03 	tst.w	r3, #3
    1a38:	d1fb      	bne.n	1a32 <_tc_timer_init+0x4e>
    1a3a:	6923      	ldr	r3, [r4, #16]
    1a3c:	f013 0f01 	tst.w	r3, #1
    1a40:	d1fb      	bne.n	1a3a <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1a42:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1a46:	4a4d      	ldr	r2, [pc, #308]	; (1b7c <_tc_timer_init+0x198>)
    1a48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1a4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1a4e:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1a50:	6923      	ldr	r3, [r4, #16]
    1a52:	f013 0f03 	tst.w	r3, #3
    1a56:	d1fb      	bne.n	1a50 <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1a58:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1a5c:	4947      	ldr	r1, [pc, #284]	; (1b7c <_tc_timer_init+0x198>)
    1a5e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    1a62:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1a66:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1a6a:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1a6c:	2301      	movs	r3, #1
    1a6e:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1a70:	f002 020c 	and.w	r2, r2, #12
    1a74:	2a08      	cmp	r2, #8
    1a76:	d048      	beq.n	1b0a <_tc_timer_init+0x126>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1a78:	2a00      	cmp	r2, #0
    1a7a:	d158      	bne.n	1b2e <_tc_timer_init+0x14a>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    1a7c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1a80:	4a3e      	ldr	r2, [pc, #248]	; (1b7c <_tc_timer_init+0x198>)
    1a82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1a86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1a88:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1a8a:	6923      	ldr	r3, [r4, #16]
    1a8c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1a90:	d1fb      	bne.n	1a8a <_tc_timer_init+0xa6>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1a92:	2300      	movs	r3, #0
    1a94:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1a96:	6923      	ldr	r3, [r4, #16]
    1a98:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1a9c:	d1fb      	bne.n	1a96 <_tc_timer_init+0xb2>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1a9e:	2301      	movs	r3, #1
    1aa0:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    1aa2:	4b37      	ldr	r3, [pc, #220]	; (1b80 <_tc_timer_init+0x19c>)
    1aa4:	429c      	cmp	r4, r3
		_tc0_dev = (struct _timer_device *)dev;
    1aa6:	bf04      	itt	eq
    1aa8:	4b36      	ldreq	r3, [pc, #216]	; (1b84 <_tc_timer_init+0x1a0>)
    1aaa:	601e      	streq	r6, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
    1aac:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1ab0:	4a32      	ldr	r2, [pc, #200]	; (1b7c <_tc_timer_init+0x198>)
    1ab2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1ab6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    1aba:	2b00      	cmp	r3, #0
    1abc:	db23      	blt.n	1b06 <_tc_timer_init+0x122>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1abe:	095a      	lsrs	r2, r3, #5
    1ac0:	f003 031f 	and.w	r3, r3, #31
    1ac4:	2101      	movs	r1, #1
    1ac6:	fa01 f303 	lsl.w	r3, r1, r3
    1aca:	3220      	adds	r2, #32
    1acc:	492e      	ldr	r1, [pc, #184]	; (1b88 <_tc_timer_init+0x1a4>)
    1ace:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1ad2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ad6:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    1ada:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1ade:	4b27      	ldr	r3, [pc, #156]	; (1b7c <_tc_timer_init+0x198>)
    1ae0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    1ae4:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1ae8:	2b00      	cmp	r3, #0
    1aea:	db0c      	blt.n	1b06 <_tc_timer_init+0x122>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1aec:	0959      	lsrs	r1, r3, #5
    1aee:	f003 031f 	and.w	r3, r3, #31
    1af2:	2201      	movs	r2, #1
    1af4:	fa02 f303 	lsl.w	r3, r2, r3
    1af8:	4a23      	ldr	r2, [pc, #140]	; (1b88 <_tc_timer_init+0x1a4>)
    1afa:	f101 0060 	add.w	r0, r1, #96	; 0x60
    1afe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b02:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1b06:	2000      	movs	r0, #0
    1b08:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1b0a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1b0e:	4a1b      	ldr	r2, [pc, #108]	; (1b7c <_tc_timer_init+0x198>)
    1b10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1b16:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b18:	6923      	ldr	r3, [r4, #16]
    1b1a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1b1e:	d1fb      	bne.n	1b18 <_tc_timer_init+0x134>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1b20:	2300      	movs	r3, #0
    1b22:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b24:	6923      	ldr	r3, [r4, #16]
    1b26:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1b2a:	d1fb      	bne.n	1b24 <_tc_timer_init+0x140>
    1b2c:	e7b7      	b.n	1a9e <_tc_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    1b2e:	2a04      	cmp	r2, #4
    1b30:	d1b5      	bne.n	1a9e <_tc_timer_init+0xba>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    1b32:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1b36:	4a11      	ldr	r2, [pc, #68]	; (1b7c <_tc_timer_init+0x198>)
    1b38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1b3c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1b40:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b42:	6923      	ldr	r3, [r4, #16]
    1b44:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1b48:	d1fb      	bne.n	1b42 <_tc_timer_init+0x15e>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1b4a:	2300      	movs	r3, #0
    1b4c:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b4e:	6923      	ldr	r3, [r4, #16]
    1b50:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1b54:	d1fb      	bne.n	1b4e <_tc_timer_init+0x16a>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1b56:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1b5a:	4a08      	ldr	r2, [pc, #32]	; (1b7c <_tc_timer_init+0x198>)
    1b5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1b60:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    1b64:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b66:	6923      	ldr	r3, [r4, #16]
    1b68:	f013 0f20 	tst.w	r3, #32
    1b6c:	d1fb      	bne.n	1b66 <_tc_timer_init+0x182>
    1b6e:	e796      	b.n	1a9e <_tc_timer_init+0xba>
    1b70:	00001985 	.word	0x00001985
    1b74:	00003fc8 	.word	0x00003fc8
    1b78:	000013e5 	.word	0x000013e5
    1b7c:	00003f94 	.word	0x00003f94
    1b80:	40003800 	.word	0x40003800
    1b84:	20000600 	.word	0x20000600
    1b88:	e000e100 	.word	0xe000e100

00001b8c <_tc_timer_deinit>:
{
    1b8c:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    1b8e:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    1b90:	4620      	mov	r0, r4
    1b92:	4b18      	ldr	r3, [pc, #96]	; (1bf4 <_tc_timer_deinit+0x68>)
    1b94:	4798      	blx	r3
    1b96:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    1b98:	22c7      	movs	r2, #199	; 0xc7
    1b9a:	4917      	ldr	r1, [pc, #92]	; (1bf8 <_tc_timer_deinit+0x6c>)
    1b9c:	2001      	movs	r0, #1
    1b9e:	4b17      	ldr	r3, [pc, #92]	; (1bfc <_tc_timer_deinit+0x70>)
    1ba0:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    1ba2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1ba6:	4b16      	ldr	r3, [pc, #88]	; (1c00 <_tc_timer_deinit+0x74>)
    1ba8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    1bac:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	db0d      	blt.n	1bd0 <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bb4:	095a      	lsrs	r2, r3, #5
    1bb6:	f003 031f 	and.w	r3, r3, #31
    1bba:	2101      	movs	r1, #1
    1bbc:	fa01 f303 	lsl.w	r3, r1, r3
    1bc0:	3220      	adds	r2, #32
    1bc2:	4910      	ldr	r1, [pc, #64]	; (1c04 <_tc_timer_deinit+0x78>)
    1bc4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1bc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bcc:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1bd0:	6823      	ldr	r3, [r4, #0]
    1bd2:	f023 0302 	bic.w	r3, r3, #2
    1bd6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1bd8:	6923      	ldr	r3, [r4, #16]
    1bda:	f013 0f03 	tst.w	r3, #3
    1bde:	d1fb      	bne.n	1bd8 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    1be0:	6823      	ldr	r3, [r4, #0]
    1be2:	f043 0301 	orr.w	r3, r3, #1
    1be6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1be8:	6923      	ldr	r3, [r4, #16]
    1bea:	f013 0f01 	tst.w	r3, #1
    1bee:	d1fb      	bne.n	1be8 <_tc_timer_deinit+0x5c>
}
    1bf0:	bd38      	pop	{r3, r4, r5, pc}
    1bf2:	bf00      	nop
    1bf4:	00001985 	.word	0x00001985
    1bf8:	00003fc8 	.word	0x00003fc8
    1bfc:	000013e5 	.word	0x000013e5
    1c00:	00003f94 	.word	0x00003f94
    1c04:	e000e100 	.word	0xe000e100

00001c08 <_tc_timer_set_irq>:
{
    1c08:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    1c0a:	68c0      	ldr	r0, [r0, #12]
    1c0c:	4b09      	ldr	r3, [pc, #36]	; (1c34 <_tc_timer_set_irq+0x2c>)
    1c0e:	4798      	blx	r3
    1c10:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    1c12:	f44f 728e 	mov.w	r2, #284	; 0x11c
    1c16:	4908      	ldr	r1, [pc, #32]	; (1c38 <_tc_timer_set_irq+0x30>)
    1c18:	2001      	movs	r0, #1
    1c1a:	4b08      	ldr	r3, [pc, #32]	; (1c3c <_tc_timer_set_irq+0x34>)
    1c1c:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    1c1e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    1c22:	4b07      	ldr	r3, [pc, #28]	; (1c40 <_tc_timer_set_irq+0x38>)
    1c24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1c28:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    1c2c:	4b05      	ldr	r3, [pc, #20]	; (1c44 <_tc_timer_set_irq+0x3c>)
    1c2e:	4798      	blx	r3
    1c30:	bd10      	pop	{r4, pc}
    1c32:	bf00      	nop
    1c34:	00001985 	.word	0x00001985
    1c38:	00003fc8 	.word	0x00003fc8
    1c3c:	000013e5 	.word	0x000013e5
    1c40:	00003f94 	.word	0x00003f94
    1c44:	0000148d 	.word	0x0000148d

00001c48 <_tc_get_timer>:
}
    1c48:	4800      	ldr	r0, [pc, #0]	; (1c4c <_tc_get_timer+0x4>)
    1c4a:	4770      	bx	lr
    1c4c:	20000020 	.word	0x20000020

00001c50 <TC0_Handler>:
{
    1c50:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    1c52:	4b06      	ldr	r3, [pc, #24]	; (1c6c <TC0_Handler+0x1c>)
    1c54:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    1c56:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1c58:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1c5a:	f012 0f01 	tst.w	r2, #1
    1c5e:	d100      	bne.n	1c62 <TC0_Handler+0x12>
    1c60:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1c62:	2201      	movs	r2, #1
    1c64:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    1c66:	6803      	ldr	r3, [r0, #0]
    1c68:	4798      	blx	r3
}
    1c6a:	e7f9      	b.n	1c60 <TC0_Handler+0x10>
    1c6c:	20000600 	.word	0x20000600

00001c70 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1c70:	2000      	movs	r0, #0
    1c72:	4770      	bx	lr

00001c74 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1c74:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1c76:	7c83      	ldrb	r3, [r0, #18]
    1c78:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1c7c:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    1c7e:	f002 0107 	and.w	r1, r2, #7
    1c82:	2901      	cmp	r1, #1
    1c84:	d00b      	beq.n	1c9e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1c86:	015a      	lsls	r2, r3, #5
    1c88:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1c8c:	2110      	movs	r1, #16
    1c8e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1c92:	015b      	lsls	r3, r3, #5
    1c94:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1c98:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    1c9c:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    1c9e:	f012 0f40 	tst.w	r2, #64	; 0x40
    1ca2:	d00c      	beq.n	1cbe <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    1ca4:	7cc2      	ldrb	r2, [r0, #19]
    1ca6:	f36f 1286 	bfc	r2, #6, #1
    1caa:	74c2      	strb	r2, [r0, #19]
    1cac:	015a      	lsls	r2, r3, #5
    1cae:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1cb2:	2180      	movs	r1, #128	; 0x80
    1cb4:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1cb8:	2140      	movs	r1, #64	; 0x40
    1cba:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    1cbe:	7cc2      	ldrb	r2, [r0, #19]
    1cc0:	f36f 02c3 	bfc	r2, #3, #1
    1cc4:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1cc6:	4909      	ldr	r1, [pc, #36]	; (1cec <_usb_d_dev_handle_setup+0x78>)
    1cc8:	015a      	lsls	r2, r3, #5
    1cca:	188c      	adds	r4, r1, r2
    1ccc:	2500      	movs	r5, #0
    1cce:	72a5      	strb	r5, [r4, #10]
    1cd0:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1cd2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    1cd6:	246f      	movs	r4, #111	; 0x6f
    1cd8:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1cdc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1ce0:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    1ce4:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    1ce6:	7c80      	ldrb	r0, [r0, #18]
    1ce8:	4798      	blx	r3
    1cea:	bd38      	pop	{r3, r4, r5, pc}
    1cec:	20000604 	.word	0x20000604

00001cf0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    1cf0:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    1cf2:	2320      	movs	r3, #32
    1cf4:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1cf8:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1cfa:	7c83      	ldrb	r3, [r0, #18]
    1cfc:	f003 030f 	and.w	r3, r3, #15
    1d00:	015b      	lsls	r3, r3, #5
    1d02:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1d06:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1d0a:	4b03      	ldr	r3, [pc, #12]	; (1d18 <_usb_d_dev_handle_stall+0x28>)
    1d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1d0e:	6882      	ldr	r2, [r0, #8]
    1d10:	2101      	movs	r1, #1
    1d12:	7c80      	ldrb	r0, [r0, #18]
    1d14:	4798      	blx	r3
    1d16:	bd08      	pop	{r3, pc}
    1d18:	20000604 	.word	0x20000604

00001d1c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1d1c:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1d1e:	7c84      	ldrb	r4, [r0, #18]
    1d20:	2cff      	cmp	r4, #255	; 0xff
    1d22:	d003      	beq.n	1d2c <_usb_d_dev_trans_done+0x10>
    1d24:	7cc3      	ldrb	r3, [r0, #19]
    1d26:	f013 0f40 	tst.w	r3, #64	; 0x40
    1d2a:	d100      	bne.n	1d2e <_usb_d_dev_trans_done+0x12>
    1d2c:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    1d2e:	7cc2      	ldrb	r2, [r0, #19]
    1d30:	f36f 1286 	bfc	r2, #6, #1
    1d34:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1d36:	4a03      	ldr	r2, [pc, #12]	; (1d44 <_usb_d_dev_trans_done+0x28>)
    1d38:	6f15      	ldr	r5, [r2, #112]	; 0x70
    1d3a:	6882      	ldr	r2, [r0, #8]
    1d3c:	4620      	mov	r0, r4
    1d3e:	47a8      	blx	r5
    1d40:	e7f4      	b.n	1d2c <_usb_d_dev_trans_done+0x10>
    1d42:	bf00      	nop
    1d44:	20000604 	.word	0x20000604

00001d48 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1d48:	b530      	push	{r4, r5, lr}
    1d4a:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1d4c:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1d4e:	2425      	movs	r4, #37	; 0x25
    1d50:	f88d 4004 	strb.w	r4, [sp, #4]
    1d54:	244a      	movs	r4, #74	; 0x4a
    1d56:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1d5a:	2bff      	cmp	r3, #255	; 0xff
    1d5c:	d01e      	beq.n	1d9c <_usb_d_dev_trans_stop+0x54>
    1d5e:	7cc4      	ldrb	r4, [r0, #19]
    1d60:	f014 0f40 	tst.w	r4, #64	; 0x40
    1d64:	d01a      	beq.n	1d9c <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1d66:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    1d6a:	b1c9      	cbz	r1, 1da0 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1d6c:	0163      	lsls	r3, r4, #5
    1d6e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1d72:	2580      	movs	r5, #128	; 0x80
    1d74:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    1d78:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1d7a:	a902      	add	r1, sp, #8
    1d7c:	440b      	add	r3, r1
    1d7e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1d82:	0163      	lsls	r3, r4, #5
    1d84:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1d88:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1d8c:	0163      	lsls	r3, r4, #5
    1d8e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1d92:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1d96:	4611      	mov	r1, r2
    1d98:	4b05      	ldr	r3, [pc, #20]	; (1db0 <_usb_d_dev_trans_stop+0x68>)
    1d9a:	4798      	blx	r3
}
    1d9c:	b003      	add	sp, #12
    1d9e:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1da0:	0163      	lsls	r3, r4, #5
    1da2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1da6:	2540      	movs	r5, #64	; 0x40
    1da8:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    1dac:	e7e4      	b.n	1d78 <_usb_d_dev_trans_stop+0x30>
    1dae:	bf00      	nop
    1db0:	00001d1d 	.word	0x00001d1d

00001db4 <_usb_d_dev_handle_trfail>:
{
    1db4:	b530      	push	{r4, r5, lr}
    1db6:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1db8:	7c83      	ldrb	r3, [r0, #18]
    1dba:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1dbe:	2204      	movs	r2, #4
    1dc0:	f88d 2004 	strb.w	r2, [sp, #4]
    1dc4:	2208      	movs	r2, #8
    1dc6:	f88d 2005 	strb.w	r2, [sp, #5]
    1dca:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    1dcc:	460c      	mov	r4, r1
    1dce:	b391      	cbz	r1, 1e36 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1dd0:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    1dd4:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1dd8:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    1ddc:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    1de0:	4a32      	ldr	r2, [pc, #200]	; (1eac <_usb_d_dev_handle_trfail+0xf8>)
    1de2:	440a      	add	r2, r1
    1de4:	7a91      	ldrb	r1, [r2, #10]
    1de6:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1de8:	2d02      	cmp	r5, #2
    1dea:	d02c      	beq.n	1e46 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    1dec:	f011 0f02 	tst.w	r1, #2
    1df0:	d045      	beq.n	1e7e <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1df2:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1df4:	7a91      	ldrb	r1, [r2, #10]
    1df6:	f36f 0141 	bfc	r1, #1, #1
    1dfa:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1dfc:	aa02      	add	r2, sp, #8
    1dfe:	4422      	add	r2, r4
    1e00:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1e04:	015a      	lsls	r2, r3, #5
    1e06:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1e0a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1e0e:	015b      	lsls	r3, r3, #5
    1e10:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1e14:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1e18:	f005 0307 	and.w	r3, r5, #7
    1e1c:	2b01      	cmp	r3, #1
    1e1e:	d143      	bne.n	1ea8 <_usb_d_dev_handle_trfail+0xf4>
    1e20:	7cc3      	ldrb	r3, [r0, #19]
    1e22:	f013 0f40 	tst.w	r3, #64	; 0x40
    1e26:	d03f      	beq.n	1ea8 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1e28:	09d9      	lsrs	r1, r3, #7
    1e2a:	428c      	cmp	r4, r1
    1e2c:	d03c      	beq.n	1ea8 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1e2e:	2200      	movs	r2, #0
    1e30:	4b1f      	ldr	r3, [pc, #124]	; (1eb0 <_usb_d_dev_handle_trfail+0xfc>)
    1e32:	4798      	blx	r3
    1e34:	e038      	b.n	1ea8 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1e36:	0159      	lsls	r1, r3, #5
    1e38:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    1e3c:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1e40:	f005 0507 	and.w	r5, r5, #7
    1e44:	e7ca      	b.n	1ddc <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1e46:	f011 0f01 	tst.w	r1, #1
    1e4a:	d0cf      	beq.n	1dec <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1e4c:	7a91      	ldrb	r1, [r2, #10]
    1e4e:	f36f 0100 	bfc	r1, #0, #1
    1e52:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1e54:	aa02      	add	r2, sp, #8
    1e56:	4422      	add	r2, r4
    1e58:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1e5c:	015a      	lsls	r2, r3, #5
    1e5e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1e62:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1e66:	015b      	lsls	r3, r3, #5
    1e68:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1e6c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1e70:	2204      	movs	r2, #4
    1e72:	1c21      	adds	r1, r4, #0
    1e74:	bf18      	it	ne
    1e76:	2101      	movne	r1, #1
    1e78:	4b0d      	ldr	r3, [pc, #52]	; (1eb0 <_usb_d_dev_handle_trfail+0xfc>)
    1e7a:	4798      	blx	r3
    1e7c:	e014      	b.n	1ea8 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    1e7e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    1e82:	4a0a      	ldr	r2, [pc, #40]	; (1eac <_usb_d_dev_handle_trfail+0xf8>)
    1e84:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    1e88:	2100      	movs	r1, #0
    1e8a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1e8c:	aa02      	add	r2, sp, #8
    1e8e:	4414      	add	r4, r2
    1e90:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1e94:	015a      	lsls	r2, r3, #5
    1e96:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1e9a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1e9e:	015b      	lsls	r3, r3, #5
    1ea0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1ea4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    1ea8:	b003      	add	sp, #12
    1eaa:	bd30      	pop	{r4, r5, pc}
    1eac:	20000604 	.word	0x20000604
    1eb0:	00001d49 	.word	0x00001d49

00001eb4 <_usb_d_dev_reset_epts>:
{
    1eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1eb8:	4d0c      	ldr	r5, [pc, #48]	; (1eec <_usb_d_dev_reset_epts+0x38>)
    1eba:	f105 0474 	add.w	r4, r5, #116	; 0x74
    1ebe:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1ec2:	f04f 0803 	mov.w	r8, #3
    1ec6:	4f0a      	ldr	r7, [pc, #40]	; (1ef0 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    1ec8:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1eca:	4641      	mov	r1, r8
    1ecc:	4620      	mov	r0, r4
    1ece:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    1ed0:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1ed2:	2300      	movs	r3, #0
    1ed4:	74e3      	strb	r3, [r4, #19]
    1ed6:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1ed8:	42ac      	cmp	r4, r5
    1eda:	d1f6      	bne.n	1eca <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1edc:	2260      	movs	r2, #96	; 0x60
    1ede:	4619      	mov	r1, r3
    1ee0:	4802      	ldr	r0, [pc, #8]	; (1eec <_usb_d_dev_reset_epts+0x38>)
    1ee2:	4b04      	ldr	r3, [pc, #16]	; (1ef4 <_usb_d_dev_reset_epts+0x40>)
    1ee4:	4798      	blx	r3
    1ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1eea:	bf00      	nop
    1eec:	20000604 	.word	0x20000604
    1ef0:	00001d1d 	.word	0x00001d1d
    1ef4:	00003c11 	.word	0x00003c11

00001ef8 <_usb_d_dev_in_next>:
{
    1ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1efc:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1efe:	7c84      	ldrb	r4, [r0, #18]
    1f00:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1f04:	4688      	mov	r8, r1
    1f06:	2900      	cmp	r1, #0
    1f08:	f000 809f 	beq.w	204a <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1f0c:	4b58      	ldr	r3, [pc, #352]	; (2070 <_usb_d_dev_in_next+0x178>)
    1f0e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1f12:	6958      	ldr	r0, [r3, #20]
    1f14:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1f18:	8a2b      	ldrh	r3, [r5, #16]
    1f1a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    1f1e:	4293      	cmp	r3, r2
    1f20:	f000 808d 	beq.w	203e <_usb_d_dev_in_next+0x146>
    1f24:	3b01      	subs	r3, #1
    1f26:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1f28:	7cef      	ldrb	r7, [r5, #19]
    1f2a:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    1f2e:	f1b8 0f00 	cmp.w	r8, #0
    1f32:	d005      	beq.n	1f40 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1f34:	0162      	lsls	r2, r4, #5
    1f36:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1f3a:	2302      	movs	r3, #2
    1f3c:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    1f40:	68a9      	ldr	r1, [r5, #8]
    1f42:	eb0e 0301 	add.w	r3, lr, r1
    1f46:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    1f48:	686e      	ldr	r6, [r5, #4]
    1f4a:	42b3      	cmp	r3, r6
    1f4c:	d23f      	bcs.n	1fce <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    1f4e:	1af6      	subs	r6, r6, r3
    1f50:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    1f52:	7cea      	ldrb	r2, [r5, #19]
    1f54:	f012 0f20 	tst.w	r2, #32
    1f58:	d02d      	beq.n	1fb6 <_usb_d_dev_in_next+0xbe>
    1f5a:	8a2a      	ldrh	r2, [r5, #16]
    1f5c:	4296      	cmp	r6, r2
    1f5e:	bf28      	it	cs
    1f60:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1f62:	6829      	ldr	r1, [r5, #0]
    1f64:	4632      	mov	r2, r6
    1f66:	4419      	add	r1, r3
    1f68:	68e8      	ldr	r0, [r5, #12]
    1f6a:	4b42      	ldr	r3, [pc, #264]	; (2074 <_usb_d_dev_in_next+0x17c>)
    1f6c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1f6e:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    1f70:	4b3f      	ldr	r3, [pc, #252]	; (2070 <_usb_d_dev_in_next+0x178>)
    1f72:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1f76:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1f78:	4b3d      	ldr	r3, [pc, #244]	; (2070 <_usb_d_dev_in_next+0x178>)
    1f7a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1f7e:	695a      	ldr	r2, [r3, #20]
    1f80:	f366 020d 	bfi	r2, r6, #0, #14
    1f84:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1f86:	695a      	ldr	r2, [r3, #20]
    1f88:	f36f 329b 	bfc	r2, #14, #14
    1f8c:	615a      	str	r2, [r3, #20]
	if (!isr) {
    1f8e:	f1b8 0f00 	cmp.w	r8, #0
    1f92:	d108      	bne.n	1fa6 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    1f94:	2f01      	cmp	r7, #1
    1f96:	bf0c      	ite	eq
    1f98:	224e      	moveq	r2, #78	; 0x4e
    1f9a:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1f9c:	0163      	lsls	r3, r4, #5
    1f9e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1fa2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1fa6:	0164      	lsls	r4, r4, #5
    1fa8:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    1fac:	2380      	movs	r3, #128	; 0x80
    1fae:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    1fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fb6:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    1fba:	bf28      	it	cs
    1fbc:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1fc0:	6829      	ldr	r1, [r5, #0]
    1fc2:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    1fc4:	4a2a      	ldr	r2, [pc, #168]	; (2070 <_usb_d_dev_in_next+0x178>)
    1fc6:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    1fca:	6113      	str	r3, [r2, #16]
    1fcc:	e7d4      	b.n	1f78 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    1fce:	7ceb      	ldrb	r3, [r5, #19]
    1fd0:	f013 0f10 	tst.w	r3, #16
    1fd4:	d00f      	beq.n	1ff6 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    1fd6:	7ceb      	ldrb	r3, [r5, #19]
    1fd8:	f36f 1304 	bfc	r3, #4, #1
    1fdc:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1fde:	4b24      	ldr	r3, [pc, #144]	; (2070 <_usb_d_dev_in_next+0x178>)
    1fe0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1fe4:	695a      	ldr	r2, [r3, #20]
    1fe6:	f36f 020d 	bfc	r2, #0, #14
    1fea:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1fec:	695a      	ldr	r2, [r3, #20]
    1fee:	f36f 329b 	bfc	r2, #14, #14
    1ff2:	615a      	str	r2, [r3, #20]
    1ff4:	e7cb      	b.n	1f8e <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    1ff6:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1ff8:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1ffc:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2000:	bf0c      	ite	eq
    2002:	234b      	moveq	r3, #75	; 0x4b
    2004:	234a      	movne	r3, #74	; 0x4a
    2006:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    200a:	8a2a      	ldrh	r2, [r5, #16]
    200c:	ea00 030e 	and.w	r3, r0, lr
    2010:	429a      	cmp	r2, r3
    2012:	d005      	beq.n	2020 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2014:	2100      	movs	r1, #0
    2016:	4628      	mov	r0, r5
    2018:	4b17      	ldr	r3, [pc, #92]	; (2078 <_usb_d_dev_in_next+0x180>)
    201a:	4798      	blx	r3
	return;
    201c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    2020:	7ceb      	ldrb	r3, [r5, #19]
    2022:	f36f 1386 	bfc	r3, #6, #1
    2026:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2028:	4b11      	ldr	r3, [pc, #68]	; (2070 <_usb_d_dev_in_next+0x178>)
    202a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    202c:	68a9      	ldr	r1, [r5, #8]
    202e:	7ca8      	ldrb	r0, [r5, #18]
    2030:	4798      	blx	r3
    2032:	b9d0      	cbnz	r0, 206a <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    2034:	7ceb      	ldrb	r3, [r5, #19]
    2036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    203a:	74eb      	strb	r3, [r5, #19]
    203c:	e7ea      	b.n	2014 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    203e:	7cef      	ldrb	r7, [r5, #19]
    2040:	f007 0707 	and.w	r7, r7, #7
    2044:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2048:	e774      	b.n	1f34 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    204a:	8a03      	ldrh	r3, [r0, #16]
    204c:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2050:	4293      	cmp	r3, r2
    2052:	d107      	bne.n	2064 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2054:	7cef      	ldrb	r7, [r5, #19]
    2056:	f007 0707 	and.w	r7, r7, #7
    205a:	f04f 0e00 	mov.w	lr, #0
    205e:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2062:	e76d      	b.n	1f40 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2064:	f04f 0e00 	mov.w	lr, #0
    2068:	e75c      	b.n	1f24 <_usb_d_dev_in_next+0x2c>
    206a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    206e:	bf00      	nop
    2070:	20000604 	.word	0x20000604
    2074:	00003add 	.word	0x00003add
    2078:	00001d1d 	.word	0x00001d1d

0000207c <_usb_d_dev_out_next>:
{
    207c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2080:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    2082:	7c85      	ldrb	r5, [r0, #18]
    2084:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    2088:	4689      	mov	r9, r1
    208a:	2900      	cmp	r1, #0
    208c:	d056      	beq.n	213c <_usb_d_dev_out_next+0xc0>
    208e:	4b74      	ldr	r3, [pc, #464]	; (2260 <_usb_d_dev_out_next+0x1e4>)
    2090:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2094:	685a      	ldr	r2, [r3, #4]
    2096:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    209a:	685f      	ldr	r7, [r3, #4]
    209c:	f3c7 070d 	ubfx	r7, r7, #0, #14
    20a0:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    20a2:	8a06      	ldrh	r6, [r0, #16]
    20a4:	f240 33ff 	movw	r3, #1023	; 0x3ff
    20a8:	429e      	cmp	r6, r3
    20aa:	f000 80ba 	beq.w	2222 <_usb_d_dev_out_next+0x1a6>
    20ae:	3e01      	subs	r6, #1
    20b0:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    20b2:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    20b6:	f894 8013 	ldrb.w	r8, [r4, #19]
    20ba:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    20be:	f1b9 0f00 	cmp.w	r9, #0
    20c2:	d005      	beq.n	20d0 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    20c4:	016b      	lsls	r3, r5, #5
    20c6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    20ca:	2201      	movs	r2, #1
    20cc:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    20d0:	7ce3      	ldrb	r3, [r4, #19]
    20d2:	f013 0f20 	tst.w	r3, #32
    20d6:	d00d      	beq.n	20f4 <_usb_d_dev_out_next+0x78>
    20d8:	6862      	ldr	r2, [r4, #4]
    20da:	2a00      	cmp	r2, #0
    20dc:	d037      	beq.n	214e <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    20de:	68a0      	ldr	r0, [r4, #8]
    20e0:	1a12      	subs	r2, r2, r0
    20e2:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    20e4:	6823      	ldr	r3, [r4, #0]
    20e6:	42ba      	cmp	r2, r7
    20e8:	bf28      	it	cs
    20ea:	463a      	movcs	r2, r7
    20ec:	68e1      	ldr	r1, [r4, #12]
    20ee:	4418      	add	r0, r3
    20f0:	4b5c      	ldr	r3, [pc, #368]	; (2264 <_usb_d_dev_out_next+0x1e8>)
    20f2:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    20f4:	6863      	ldr	r3, [r4, #4]
    20f6:	b353      	cbz	r3, 214e <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    20f8:	f1b9 0f00 	cmp.w	r9, #0
    20fc:	d040      	beq.n	2180 <_usb_d_dev_out_next+0x104>
    20fe:	8a22      	ldrh	r2, [r4, #16]
    2100:	42ba      	cmp	r2, r7
    2102:	d93d      	bls.n	2180 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    2104:	7ce3      	ldrb	r3, [r4, #19]
    2106:	f36f 1304 	bfc	r3, #4, #1
    210a:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    210c:	68a3      	ldr	r3, [r4, #8]
    210e:	445b      	add	r3, fp
    2110:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    2112:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2116:	ea4f 1345 	mov.w	r3, r5, lsl #5
    211a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    211e:	bf0c      	ite	eq
    2120:	222d      	moveq	r2, #45	; 0x2d
    2122:	2225      	movne	r2, #37	; 0x25
    2124:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    2128:	b915      	cbnz	r5, 2130 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    212a:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    212c:	4b4c      	ldr	r3, [pc, #304]	; (2260 <_usb_d_dev_out_next+0x1e4>)
    212e:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2130:	2100      	movs	r1, #0
    2132:	4620      	mov	r0, r4
    2134:	4b4c      	ldr	r3, [pc, #304]	; (2268 <_usb_d_dev_out_next+0x1ec>)
    2136:	4798      	blx	r3
	return;
    2138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    213c:	8a06      	ldrh	r6, [r0, #16]
    213e:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2142:	429e      	cmp	r6, r3
    2144:	d07b      	beq.n	223e <_usb_d_dev_out_next+0x1c2>
    2146:	f04f 0b00 	mov.w	fp, #0
    214a:	46da      	mov	sl, fp
    214c:	e7af      	b.n	20ae <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    214e:	7ce3      	ldrb	r3, [r4, #19]
    2150:	f013 0f10 	tst.w	r3, #16
    2154:	d06c      	beq.n	2230 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    2156:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    2158:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    215c:	f043 0320 	orr.w	r3, r3, #32
    2160:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2162:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2164:	493e      	ldr	r1, [pc, #248]	; (2260 <_usb_d_dev_out_next+0x1e4>)
    2166:	016a      	lsls	r2, r5, #5
    2168:	188b      	adds	r3, r1, r2
    216a:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    216c:	8a21      	ldrh	r1, [r4, #16]
    216e:	685a      	ldr	r2, [r3, #4]
    2170:	f361 329b 	bfi	r2, r1, #14, #14
    2174:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2176:	685a      	ldr	r2, [r3, #4]
    2178:	f36f 020d 	bfc	r2, #0, #14
    217c:	605a      	str	r2, [r3, #4]
    217e:	e01d      	b.n	21bc <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    2180:	68a2      	ldr	r2, [r4, #8]
    2182:	4452      	add	r2, sl
    2184:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    2186:	4293      	cmp	r3, r2
    2188:	d9c3      	bls.n	2112 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    218a:	1a9b      	subs	r3, r3, r2
    218c:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    218e:	7ce1      	ldrb	r1, [r4, #19]
    2190:	f011 0f20 	tst.w	r1, #32
    2194:	d026      	beq.n	21e4 <_usb_d_dev_out_next+0x168>
    2196:	8a22      	ldrh	r2, [r4, #16]
    2198:	4293      	cmp	r3, r2
    219a:	bf28      	it	cs
    219c:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    219e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    21a0:	016a      	lsls	r2, r5, #5
    21a2:	492f      	ldr	r1, [pc, #188]	; (2260 <_usb_d_dev_out_next+0x1e4>)
    21a4:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    21a6:	4a2e      	ldr	r2, [pc, #184]	; (2260 <_usb_d_dev_out_next+0x1e4>)
    21a8:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    21ac:	6851      	ldr	r1, [r2, #4]
    21ae:	f363 319b 	bfi	r1, r3, #14, #14
    21b2:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    21b4:	6853      	ldr	r3, [r2, #4]
    21b6:	f36f 030d 	bfc	r3, #0, #14
    21ba:	6053      	str	r3, [r2, #4]
	if (!isr) {
    21bc:	f1b9 0f00 	cmp.w	r9, #0
    21c0:	d108      	bne.n	21d4 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    21c2:	f1b8 0f01 	cmp.w	r8, #1
    21c6:	d025      	beq.n	2214 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    21c8:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    21ca:	016b      	lsls	r3, r5, #5
    21cc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    21d0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    21d4:	016d      	lsls	r5, r5, #5
    21d6:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    21da:	2340      	movs	r3, #64	; 0x40
    21dc:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    21e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    21e4:	8a21      	ldrh	r1, [r4, #16]
    21e6:	428b      	cmp	r3, r1
    21e8:	d90a      	bls.n	2200 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    21ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    21ee:	d80e      	bhi.n	220e <_usb_d_dev_out_next+0x192>
    21f0:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    21f4:	6821      	ldr	r1, [r4, #0]
    21f6:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    21f8:	0169      	lsls	r1, r5, #5
    21fa:	4819      	ldr	r0, [pc, #100]	; (2260 <_usb_d_dev_out_next+0x1e4>)
    21fc:	5042      	str	r2, [r0, r1]
    21fe:	e7d2      	b.n	21a6 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    2200:	428b      	cmp	r3, r1
    2202:	d2f7      	bcs.n	21f4 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    2204:	7ce1      	ldrb	r1, [r4, #19]
    2206:	f041 0120 	orr.w	r1, r1, #32
    220a:	74e1      	strb	r1, [r4, #19]
    220c:	e7f2      	b.n	21f4 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    220e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2212:	e7ef      	b.n	21f4 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    2214:	4b12      	ldr	r3, [pc, #72]	; (2260 <_usb_d_dev_out_next+0x1e4>)
    2216:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    221a:	2200      	movs	r2, #0
    221c:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    221e:	222d      	movs	r2, #45	; 0x2d
    2220:	e7d3      	b.n	21ca <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    2222:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2226:	f890 8013 	ldrb.w	r8, [r0, #19]
    222a:	f008 0807 	and.w	r8, r8, #7
    222e:	e749      	b.n	20c4 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    2230:	f1b9 0f00 	cmp.w	r9, #0
    2234:	d10b      	bne.n	224e <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    2236:	68a3      	ldr	r3, [r4, #8]
    2238:	4453      	add	r3, sl
    223a:	60a3      	str	r3, [r4, #8]
    223c:	e769      	b.n	2112 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    223e:	f890 8013 	ldrb.w	r8, [r0, #19]
    2242:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    2246:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2248:	46bb      	mov	fp, r7
    224a:	46ba      	mov	sl, r7
    224c:	e740      	b.n	20d0 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    224e:	8a23      	ldrh	r3, [r4, #16]
    2250:	42bb      	cmp	r3, r7
    2252:	f63f af57 	bhi.w	2104 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    2256:	68a3      	ldr	r3, [r4, #8]
    2258:	4453      	add	r3, sl
    225a:	60a3      	str	r3, [r4, #8]
    225c:	e759      	b.n	2112 <_usb_d_dev_out_next+0x96>
    225e:	bf00      	nop
    2260:	20000604 	.word	0x20000604
    2264:	00003add 	.word	0x00003add
    2268:	00001d1d 	.word	0x00001d1d

0000226c <_usb_d_dev_handler>:
{
    226c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    2270:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2274:	8c1e      	ldrh	r6, [r3, #32]
    2276:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2278:	b146      	cbz	r6, 228c <_usb_d_dev_handler+0x20>
    227a:	4d91      	ldr	r5, [pc, #580]	; (24c0 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    227c:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    227e:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    2282:	f8df 9258 	ldr.w	r9, [pc, #600]	; 24dc <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    2286:	f8df 8258 	ldr.w	r8, [pc, #600]	; 24e0 <_usb_d_dev_handler+0x274>
    228a:	e0d3      	b.n	2434 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    228c:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    228e:	8b1b      	ldrh	r3, [r3, #24]
    2290:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    2292:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    2294:	f013 0f04 	tst.w	r3, #4
    2298:	d11d      	bne.n	22d6 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    229a:	f413 7f00 	tst.w	r3, #512	; 0x200
    229e:	d123      	bne.n	22e8 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    22a0:	f013 0f80 	tst.w	r3, #128	; 0x80
    22a4:	d147      	bne.n	2336 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    22a6:	f013 0f70 	tst.w	r3, #112	; 0x70
    22aa:	d14f      	bne.n	234c <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    22ac:	f013 0f08 	tst.w	r3, #8
    22b0:	d16e      	bne.n	2390 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    22b2:	f013 0f01 	tst.w	r3, #1
    22b6:	d0e0      	beq.n	227a <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    22b8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    22bc:	f240 2201 	movw	r2, #513	; 0x201
    22c0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    22c2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    22c4:	2270      	movs	r2, #112	; 0x70
    22c6:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    22c8:	4b7e      	ldr	r3, [pc, #504]	; (24c4 <_usb_d_dev_handler+0x258>)
    22ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    22cc:	2100      	movs	r1, #0
    22ce:	2004      	movs	r0, #4
    22d0:	4798      	blx	r3
    22d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    22d6:	2204      	movs	r2, #4
    22d8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    22dc:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    22de:	4b79      	ldr	r3, [pc, #484]	; (24c4 <_usb_d_dev_handler+0x258>)
    22e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    22e2:	4798      	blx	r3
    22e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    22e8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    22ec:	f240 2201 	movw	r2, #513	; 0x201
    22f0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    22f2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    22f4:	2270      	movs	r2, #112	; 0x70
    22f6:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    22f8:	4b72      	ldr	r3, [pc, #456]	; (24c4 <_usb_d_dev_handler+0x258>)
    22fa:	891b      	ldrh	r3, [r3, #8]
    22fc:	f003 030f 	and.w	r3, r3, #15
    2300:	2b03      	cmp	r3, #3
    2302:	d00e      	beq.n	2322 <_usb_d_dev_handler+0xb6>
    2304:	4b6f      	ldr	r3, [pc, #444]	; (24c4 <_usb_d_dev_handler+0x258>)
    2306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2308:	f003 030f 	and.w	r3, r3, #15
    230c:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    230e:	bf08      	it	eq
    2310:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2312:	d007      	beq.n	2324 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    2314:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2316:	4b6b      	ldr	r3, [pc, #428]	; (24c4 <_usb_d_dev_handler+0x258>)
    2318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    231a:	2003      	movs	r0, #3
    231c:	4798      	blx	r3
    231e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2322:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2324:	4b67      	ldr	r3, [pc, #412]	; (24c4 <_usb_d_dev_handler+0x258>)
    2326:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    232a:	8919      	ldrh	r1, [r3, #8]
    232c:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    2330:	2200      	movs	r2, #0
    2332:	811a      	strh	r2, [r3, #8]
    2334:	e7ef      	b.n	2316 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2336:	2280      	movs	r2, #128	; 0x80
    2338:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    233c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    233e:	4b61      	ldr	r3, [pc, #388]	; (24c4 <_usb_d_dev_handler+0x258>)
    2340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2342:	2100      	movs	r1, #0
    2344:	2005      	movs	r0, #5
    2346:	4798      	blx	r3
    2348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    234c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2350:	2270      	movs	r2, #112	; 0x70
    2352:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2354:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2356:	f240 2201 	movw	r2, #513	; 0x201
    235a:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    235c:	4b5a      	ldr	r3, [pc, #360]	; (24c8 <_usb_d_dev_handler+0x25c>)
    235e:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    2362:	f013 0f01 	tst.w	r3, #1
    2366:	d00d      	beq.n	2384 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2368:	4a57      	ldr	r2, [pc, #348]	; (24c8 <_usb_d_dev_handler+0x25c>)
    236a:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    236c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    2370:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2374:	d1f9      	bne.n	236a <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    2376:	4b53      	ldr	r3, [pc, #332]	; (24c4 <_usb_d_dev_handler+0x258>)
    2378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    237a:	2100      	movs	r1, #0
    237c:	2002      	movs	r0, #2
    237e:	4798      	blx	r3
    2380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2384:	4a50      	ldr	r2, [pc, #320]	; (24c8 <_usb_d_dev_handler+0x25c>)
    2386:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    2388:	f413 7f80 	tst.w	r3, #256	; 0x100
    238c:	d0fb      	beq.n	2386 <_usb_d_dev_handler+0x11a>
    238e:	e7f2      	b.n	2376 <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2390:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2394:	2400      	movs	r4, #0
    2396:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    239a:	2208      	movs	r2, #8
    239c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    239e:	2270      	movs	r2, #112	; 0x70
    23a0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    23a2:	f240 2201 	movw	r2, #513	; 0x201
    23a6:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    23a8:	4b48      	ldr	r3, [pc, #288]	; (24cc <_usb_d_dev_handler+0x260>)
    23aa:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    23ac:	4b45      	ldr	r3, [pc, #276]	; (24c4 <_usb_d_dev_handler+0x258>)
    23ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    23b0:	4621      	mov	r1, r4
    23b2:	2001      	movs	r0, #1
    23b4:	4798      	blx	r3
    23b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    23ba:	f011 0f10 	tst.w	r1, #16
    23be:	d109      	bne.n	23d4 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    23c0:	f011 0f40 	tst.w	r1, #64	; 0x40
    23c4:	d108      	bne.n	23d8 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    23c6:	f011 0f20 	tst.w	r1, #32
    23ca:	d02f      	beq.n	242c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    23cc:	2100      	movs	r1, #0
    23ce:	4b40      	ldr	r3, [pc, #256]	; (24d0 <_usb_d_dev_handler+0x264>)
    23d0:	4798      	blx	r3
    23d2:	e02b      	b.n	242c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    23d4:	47c8      	blx	r9
    23d6:	e029      	b.n	242c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    23d8:	2101      	movs	r1, #1
    23da:	4b3d      	ldr	r3, [pc, #244]	; (24d0 <_usb_d_dev_handler+0x264>)
    23dc:	4798      	blx	r3
    23de:	e025      	b.n	242c <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    23e0:	f011 0f40 	tst.w	r1, #64	; 0x40
    23e4:	d111      	bne.n	240a <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    23e6:	f011 0f08 	tst.w	r1, #8
    23ea:	d112      	bne.n	2412 <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    23ec:	f011 0f02 	tst.w	r1, #2
    23f0:	d112      	bne.n	2418 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    23f2:	f003 0307 	and.w	r3, r3, #7
    23f6:	2b01      	cmp	r3, #1
    23f8:	d118      	bne.n	242c <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    23fa:	f011 0f04 	tst.w	r1, #4
    23fe:	d10f      	bne.n	2420 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2400:	f011 0f10 	tst.w	r1, #16
    2404:	d012      	beq.n	242c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    2406:	47c8      	blx	r9
    2408:	e010      	b.n	242c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    240a:	2101      	movs	r1, #1
    240c:	4b30      	ldr	r3, [pc, #192]	; (24d0 <_usb_d_dev_handler+0x264>)
    240e:	4798      	blx	r3
    2410:	e00c      	b.n	242c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    2412:	2101      	movs	r1, #1
    2414:	47c0      	blx	r8
    2416:	e009      	b.n	242c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    2418:	2101      	movs	r1, #1
    241a:	4b2e      	ldr	r3, [pc, #184]	; (24d4 <_usb_d_dev_handler+0x268>)
    241c:	4798      	blx	r3
    241e:	e005      	b.n	242c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    2420:	2100      	movs	r1, #0
    2422:	47c0      	blx	r8
    2424:	e002      	b.n	242c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    2426:	2100      	movs	r1, #0
    2428:	4b29      	ldr	r3, [pc, #164]	; (24d0 <_usb_d_dev_handler+0x264>)
    242a:	4798      	blx	r3
    242c:	3401      	adds	r4, #1
    242e:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2430:	2c09      	cmp	r4, #9
    2432:	d042      	beq.n	24ba <_usb_d_dev_handler+0x24e>
    2434:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    2436:	7cab      	ldrb	r3, [r5, #18]
    2438:	2bff      	cmp	r3, #255	; 0xff
    243a:	d0f7      	beq.n	242c <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    243c:	f003 030f 	and.w	r3, r3, #15
    2440:	2101      	movs	r1, #1
    2442:	4099      	lsls	r1, r3
    2444:	4231      	tst	r1, r6
    2446:	d0f1      	beq.n	242c <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2448:	0159      	lsls	r1, r3, #5
    244a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    244e:	f501 7180 	add.w	r1, r1, #256	; 0x100
    2452:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2454:	015b      	lsls	r3, r3, #5
    2456:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    245a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    245e:	4019      	ands	r1, r3
    2460:	d0e4      	beq.n	242c <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2462:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    2466:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    246a:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    246e:	f003 0247 	and.w	r2, r3, #71	; 0x47
    2472:	2a01      	cmp	r2, #1
    2474:	d0a1      	beq.n	23ba <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2476:	f013 0f80 	tst.w	r3, #128	; 0x80
    247a:	d1b1      	bne.n	23e0 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    247c:	f011 0f20 	tst.w	r1, #32
    2480:	d1d1      	bne.n	2426 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2482:	f011 0f04 	tst.w	r1, #4
    2486:	d10e      	bne.n	24a6 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2488:	f011 0f01 	tst.w	r1, #1
    248c:	d10e      	bne.n	24ac <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    248e:	f003 0307 	and.w	r3, r3, #7
    2492:	2b01      	cmp	r3, #1
    2494:	d1ca      	bne.n	242c <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2496:	f011 0f08 	tst.w	r1, #8
    249a:	d10b      	bne.n	24b4 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    249c:	f011 0f10 	tst.w	r1, #16
    24a0:	d0c4      	beq.n	242c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    24a2:	47c8      	blx	r9
    24a4:	e7c2      	b.n	242c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    24a6:	2100      	movs	r1, #0
    24a8:	47c0      	blx	r8
    24aa:	e7bf      	b.n	242c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    24ac:	2101      	movs	r1, #1
    24ae:	4b0a      	ldr	r3, [pc, #40]	; (24d8 <_usb_d_dev_handler+0x26c>)
    24b0:	4798      	blx	r3
    24b2:	e7bb      	b.n	242c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    24b4:	2101      	movs	r1, #1
    24b6:	47c0      	blx	r8
    24b8:	e7b8      	b.n	242c <_usb_d_dev_handler+0x1c0>
    24ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    24be:	bf00      	nop
    24c0:	20000678 	.word	0x20000678
    24c4:	20000604 	.word	0x20000604
    24c8:	40001000 	.word	0x40001000
    24cc:	00001eb5 	.word	0x00001eb5
    24d0:	00001cf1 	.word	0x00001cf1
    24d4:	00001ef9 	.word	0x00001ef9
    24d8:	0000207d 	.word	0x0000207d
    24dc:	00001c75 	.word	0x00001c75
    24e0:	00001db5 	.word	0x00001db5

000024e4 <_usb_d_dev_init>:
{
    24e4:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    24e6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    24ea:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    24ec:	f013 0f01 	tst.w	r3, #1
    24f0:	d124      	bne.n	253c <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    24f2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    24f6:	7893      	ldrb	r3, [r2, #2]
    24f8:	f013 0f03 	tst.w	r3, #3
    24fc:	d1fb      	bne.n	24f6 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    24fe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2502:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    2504:	f013 0f02 	tst.w	r3, #2
    2508:	d00f      	beq.n	252a <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    250a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    250e:	7813      	ldrb	r3, [r2, #0]
    2510:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2514:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2516:	7893      	ldrb	r3, [r2, #2]
    2518:	f013 0f03 	tst.w	r3, #3
    251c:	d1fb      	bne.n	2516 <_usb_d_dev_init+0x32>
    251e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2522:	7893      	ldrb	r3, [r2, #2]
    2524:	f013 0f02 	tst.w	r3, #2
    2528:	d1fb      	bne.n	2522 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    252a:	2201      	movs	r2, #1
    252c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2530:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2532:	461a      	mov	r2, r3
    2534:	7893      	ldrb	r3, [r2, #2]
    2536:	f013 0f03 	tst.w	r3, #3
    253a:	d1fb      	bne.n	2534 <_usb_d_dev_init+0x50>
    253c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2540:	7893      	ldrb	r3, [r2, #2]
    2542:	f013 0f01 	tst.w	r3, #1
    2546:	d1fb      	bne.n	2540 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2548:	4b21      	ldr	r3, [pc, #132]	; (25d0 <_usb_d_dev_init+0xec>)
    254a:	4a22      	ldr	r2, [pc, #136]	; (25d4 <_usb_d_dev_init+0xf0>)
    254c:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    254e:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2550:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2552:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2554:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    2556:	4b20      	ldr	r3, [pc, #128]	; (25d8 <_usb_d_dev_init+0xf4>)
    2558:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    255a:	4b20      	ldr	r3, [pc, #128]	; (25dc <_usb_d_dev_init+0xf8>)
    255c:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    255e:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    2562:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    2566:	f011 011f 	ands.w	r1, r1, #31
    256a:	d02b      	beq.n	25c4 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    256c:	291f      	cmp	r1, #31
    256e:	bf08      	it	eq
    2570:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    2572:	b34b      	cbz	r3, 25c8 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    2574:	2b1f      	cmp	r3, #31
    2576:	bf08      	it	eq
    2578:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    257a:	b33a      	cbz	r2, 25cc <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    257c:	2a07      	cmp	r2, #7
    257e:	bf08      	it	eq
    2580:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    2582:	f003 031f 	and.w	r3, r3, #31
    2586:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    258a:	0312      	lsls	r2, r2, #12
    258c:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    2590:	4313      	orrs	r3, r2
    2592:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2596:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    2598:	78d3      	ldrb	r3, [r2, #3]
    259a:	f043 0303 	orr.w	r3, r3, #3
    259e:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    25a0:	78d3      	ldrb	r3, [r2, #3]
    25a2:	f043 030c 	orr.w	r3, r3, #12
    25a6:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    25a8:	2304      	movs	r3, #4
    25aa:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    25ac:	7893      	ldrb	r3, [r2, #2]
    25ae:	f013 0f03 	tst.w	r3, #3
    25b2:	d1fb      	bne.n	25ac <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    25b4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    25b8:	4a05      	ldr	r2, [pc, #20]	; (25d0 <_usb_d_dev_init+0xec>)
    25ba:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    25bc:	2201      	movs	r2, #1
    25be:	811a      	strh	r2, [r3, #8]
}
    25c0:	2000      	movs	r0, #0
    25c2:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    25c4:	2109      	movs	r1, #9
    25c6:	e7d4      	b.n	2572 <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    25c8:	2319      	movs	r3, #25
    25ca:	e7d6      	b.n	257a <_usb_d_dev_init+0x96>
		pad_trim = 6;
    25cc:	2206      	movs	r2, #6
    25ce:	e7d8      	b.n	2582 <_usb_d_dev_init+0x9e>
    25d0:	20000604 	.word	0x20000604
    25d4:	00001c71 	.word	0x00001c71
    25d8:	00001eb5 	.word	0x00001eb5
    25dc:	00800084 	.word	0x00800084

000025e0 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    25e0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    25e4:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    25e6:	f013 0f03 	tst.w	r3, #3
    25ea:	d129      	bne.n	2640 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    25ec:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    25f0:	7893      	ldrb	r3, [r2, #2]
    25f2:	f013 0f03 	tst.w	r3, #3
    25f6:	d1fb      	bne.n	25f0 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    25f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    25fc:	781b      	ldrb	r3, [r3, #0]
    25fe:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    2600:	f013 0f02 	tst.w	r3, #2
    2604:	d108      	bne.n	2618 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    2606:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    260a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    260e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2610:	7893      	ldrb	r3, [r2, #2]
    2612:	f013 0f03 	tst.w	r3, #3
    2616:	d1fb      	bne.n	2610 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2618:	4b0b      	ldr	r3, [pc, #44]	; (2648 <_usb_d_dev_enable+0x68>)
    261a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    261e:	609a      	str	r2, [r3, #8]
    2620:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2624:	609a      	str	r2, [r3, #8]
    2626:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    262a:	609a      	str	r2, [r3, #8]
    262c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2630:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2632:	f240 228d 	movw	r2, #653	; 0x28d
    2636:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    263a:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    263c:	2000      	movs	r0, #0
    263e:	4770      	bx	lr
		return -USB_ERR_DENIED;
    2640:	f06f 0010 	mvn.w	r0, #16
}
    2644:	4770      	bx	lr
    2646:	bf00      	nop
    2648:	e000e100 	.word	0xe000e100

0000264c <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    264c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2650:	8913      	ldrh	r3, [r2, #8]
    2652:	f023 0301 	bic.w	r3, r3, #1
    2656:	041b      	lsls	r3, r3, #16
    2658:	0c1b      	lsrs	r3, r3, #16
    265a:	8113      	strh	r3, [r2, #8]
    265c:	4770      	bx	lr

0000265e <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    265e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    2662:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2666:	7298      	strb	r0, [r3, #10]
    2668:	4770      	bx	lr
	...

0000266c <_usb_d_dev_ep_init>:
{
    266c:	b5f0      	push	{r4, r5, r6, r7, lr}
    266e:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2672:	f010 050f 	ands.w	r5, r0, #15
    2676:	d04d      	beq.n	2714 <_usb_d_dev_ep_init+0xa8>
    2678:	f1be 0f00 	cmp.w	lr, #0
    267c:	bfb4      	ite	lt
    267e:	1cac      	addlt	r4, r5, #2
    2680:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2682:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2686:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    2688:	2d02      	cmp	r5, #2
    268a:	d947      	bls.n	271c <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    268c:	f06f 0011 	mvn.w	r0, #17
    2690:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2692:	f1be 0f00 	cmp.w	lr, #0
    2696:	db1b      	blt.n	26d0 <_usb_d_dev_ep_init+0x64>
    2698:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    269c:	4e37      	ldr	r6, [pc, #220]	; (277c <_usb_d_dev_ep_init+0x110>)
    269e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    26a2:	2d00      	cmp	r5, #0
    26a4:	d15e      	bne.n	2764 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    26a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    26aa:	4d34      	ldr	r5, [pc, #208]	; (277c <_usb_d_dev_ep_init+0x110>)
    26ac:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    26b0:	4d33      	ldr	r5, [pc, #204]	; (2780 <_usb_d_dev_ep_init+0x114>)
    26b2:	00a6      	lsls	r6, r4, #2
    26b4:	1933      	adds	r3, r6, r4
    26b6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    26ba:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    26be:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    26c2:	3101      	adds	r1, #1
    26c4:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    26c8:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    26cc:	2000      	movs	r0, #0
    26ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    26d0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    26d4:	4e29      	ldr	r6, [pc, #164]	; (277c <_usb_d_dev_ep_init+0x110>)
    26d6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    26da:	686d      	ldr	r5, [r5, #4]
    26dc:	b935      	cbnz	r5, 26ec <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    26de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    26e2:	4d26      	ldr	r5, [pc, #152]	; (277c <_usb_d_dev_ep_init+0x110>)
    26e4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    26e8:	685f      	ldr	r7, [r3, #4]
    26ea:	e7e1      	b.n	26b0 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    26ec:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    26f0:	4e22      	ldr	r6, [pc, #136]	; (277c <_usb_d_dev_ep_init+0x110>)
    26f2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    26f6:	896d      	ldrh	r5, [r5, #10]
    26f8:	4295      	cmp	r5, r2
    26fa:	daf0      	bge.n	26de <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    26fc:	f06f 0012 	mvn.w	r0, #18
    2700:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    2702:	f06f 0013 	mvn.w	r0, #19
    2706:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2708:	f06f 0013 	mvn.w	r0, #19
    270c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    270e:	f06f 0012 	mvn.w	r0, #18
    2712:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2714:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    2718:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    271a:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    271c:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    2720:	4f17      	ldr	r7, [pc, #92]	; (2780 <_usb_d_dev_ep_init+0x114>)
    2722:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    2726:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    272a:	2eff      	cmp	r6, #255	; 0xff
    272c:	d1e9      	bne.n	2702 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    272e:	2900      	cmp	r1, #0
    2730:	d1af      	bne.n	2692 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2732:	b125      	cbz	r5, 273e <_usb_d_dev_ep_init+0xd2>
    2734:	f1be 0f00 	cmp.w	lr, #0
    2738:	bfa4      	itt	ge
    273a:	3502      	addge	r5, #2
    273c:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    273e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2742:	4e0f      	ldr	r6, [pc, #60]	; (2780 <_usb_d_dev_ep_init+0x114>)
    2744:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2748:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    274c:	2dff      	cmp	r5, #255	; 0xff
    274e:	d1db      	bne.n	2708 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    2750:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2754:	4e09      	ldr	r6, [pc, #36]	; (277c <_usb_d_dev_ep_init+0x110>)
    2756:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    275a:	2d00      	cmp	r5, #0
    275c:	d0d7      	beq.n	270e <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    275e:	f1be 0f00 	cmp.w	lr, #0
    2762:	dbb5      	blt.n	26d0 <_usb_d_dev_ep_init+0x64>
    2764:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2768:	4e04      	ldr	r6, [pc, #16]	; (277c <_usb_d_dev_ep_init+0x110>)
    276a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    276e:	892d      	ldrh	r5, [r5, #8]
    2770:	4295      	cmp	r5, r2
    2772:	da98      	bge.n	26a6 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    2774:	f06f 0012 	mvn.w	r0, #18
    2778:	bdf0      	pop	{r4, r5, r6, r7, pc}
    277a:	bf00      	nop
    277c:	00003fdc 	.word	0x00003fdc
    2780:	20000604 	.word	0x20000604

00002784 <_usb_d_dev_ep_deinit>:
{
    2784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2786:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2788:	f010 060f 	ands.w	r6, r0, #15
    278c:	d00e      	beq.n	27ac <_usb_d_dev_ep_deinit+0x28>
    278e:	2f00      	cmp	r7, #0
    2790:	bfb4      	ite	lt
    2792:	1cb3      	addlt	r3, r6, #2
    2794:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2796:	2e02      	cmp	r6, #2
    2798:	d900      	bls.n	279c <_usb_d_dev_ep_deinit+0x18>
    279a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    279c:	461d      	mov	r5, r3
    279e:	3301      	adds	r3, #1
    27a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    27a4:	4a24      	ldr	r2, [pc, #144]	; (2838 <_usb_d_dev_ep_deinit+0xb4>)
    27a6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    27aa:	e002      	b.n	27b2 <_usb_d_dev_ep_deinit+0x2e>
    27ac:	f8df e094 	ldr.w	lr, [pc, #148]	; 2844 <_usb_d_dev_ep_deinit+0xc0>
    27b0:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    27b2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    27b6:	4a21      	ldr	r2, [pc, #132]	; (283c <_usb_d_dev_ep_deinit+0xb8>)
    27b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27bc:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    27c0:	2aff      	cmp	r2, #255	; 0xff
    27c2:	d0ea      	beq.n	279a <_usb_d_dev_ep_deinit+0x16>
    27c4:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    27c6:	2203      	movs	r2, #3
    27c8:	0ff9      	lsrs	r1, r7, #31
    27ca:	4670      	mov	r0, lr
    27cc:	4b1c      	ldr	r3, [pc, #112]	; (2840 <_usb_d_dev_ep_deinit+0xbc>)
    27ce:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    27d0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    27d4:	4a19      	ldr	r2, [pc, #100]	; (283c <_usb_d_dev_ep_deinit+0xb8>)
    27d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27da:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    27de:	f003 0307 	and.w	r3, r3, #7
    27e2:	2b01      	cmp	r3, #1
    27e4:	d016      	beq.n	2814 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    27e6:	2f00      	cmp	r7, #0
    27e8:	db1b      	blt.n	2822 <_usb_d_dev_ep_deinit+0x9e>
    27ea:	0160      	lsls	r0, r4, #5
    27ec:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    27f0:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    27f4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    27f8:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    27fc:	4b0f      	ldr	r3, [pc, #60]	; (283c <_usb_d_dev_ep_deinit+0xb8>)
    27fe:	00aa      	lsls	r2, r5, #2
    2800:	1951      	adds	r1, r2, r5
    2802:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2806:	2000      	movs	r0, #0
    2808:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    280c:	22ff      	movs	r2, #255	; 0xff
    280e:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    2812:	e7c2      	b.n	279a <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    2814:	0160      	lsls	r0, r4, #5
    2816:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    281a:	2300      	movs	r3, #0
    281c:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    2820:	e7ec      	b.n	27fc <_usb_d_dev_ep_deinit+0x78>
    2822:	0176      	lsls	r6, r6, #5
    2824:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    2828:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    282c:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    2830:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    2834:	e7e2      	b.n	27fc <_usb_d_dev_ep_deinit+0x78>
    2836:	bf00      	nop
    2838:	20000664 	.word	0x20000664
    283c:	20000604 	.word	0x20000604
    2840:	00001d49 	.word	0x00001d49
    2844:	20000678 	.word	0x20000678

00002848 <_usb_d_dev_ep_enable>:
{
    2848:	b5f0      	push	{r4, r5, r6, r7, lr}
    284a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    284c:	f010 000f 	ands.w	r0, r0, #15
    2850:	f000 80a6 	beq.w	29a0 <_usb_d_dev_ep_enable+0x158>
    2854:	2f00      	cmp	r7, #0
    2856:	bfb4      	ite	lt
    2858:	1c83      	addlt	r3, r0, #2
    285a:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    285c:	4606      	mov	r6, r0
    285e:	0142      	lsls	r2, r0, #5
    2860:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2864:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    2868:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    286a:	2802      	cmp	r0, #2
    286c:	f240 809f 	bls.w	29ae <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    2870:	f06f 0011 	mvn.w	r0, #17
    2874:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    2876:	f014 0f77 	tst.w	r4, #119	; 0x77
    287a:	f040 8088 	bne.w	298e <_usb_d_dev_ep_enable+0x146>
    287e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2882:	2111      	movs	r1, #17
    2884:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2888:	4c97      	ldr	r4, [pc, #604]	; (2ae8 <_usb_d_dev_ep_enable+0x2a0>)
    288a:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    288e:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    2892:	4996      	ldr	r1, [pc, #600]	; (2aec <_usb_d_dev_ep_enable+0x2a4>)
    2894:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2898:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    289c:	f200 80cc 	bhi.w	2a38 <_usb_d_dev_ep_enable+0x1f0>
    28a0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    28a4:	f200 810a 	bhi.w	2abc <_usb_d_dev_ep_enable+0x274>
    28a8:	2c80      	cmp	r4, #128	; 0x80
    28aa:	f200 80f9 	bhi.w	2aa0 <_usb_d_dev_ep_enable+0x258>
    28ae:	2c40      	cmp	r4, #64	; 0x40
    28b0:	f200 810b 	bhi.w	2aca <_usb_d_dev_ep_enable+0x282>
    28b4:	2c20      	cmp	r4, #32
    28b6:	f200 80fa 	bhi.w	2aae <_usb_d_dev_ep_enable+0x266>
    28ba:	2c10      	cmp	r4, #16
    28bc:	f200 810c 	bhi.w	2ad8 <_usb_d_dev_ep_enable+0x290>
    28c0:	2c08      	cmp	r4, #8
    28c2:	bf94      	ite	ls
    28c4:	2700      	movls	r7, #0
    28c6:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    28c8:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    28cc:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    28ce:	f3c4 010d 	ubfx	r1, r4, #0, #14
    28d2:	e0b7      	b.n	2a44 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    28d4:	f014 0f70 	tst.w	r4, #112	; 0x70
    28d8:	d15c      	bne.n	2994 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    28da:	4d83      	ldr	r5, [pc, #524]	; (2ae8 <_usb_d_dev_ep_enable+0x2a0>)
    28dc:	009f      	lsls	r7, r3, #2
    28de:	18f9      	adds	r1, r7, r3
    28e0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    28e4:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    28e8:	0109      	lsls	r1, r1, #4
    28ea:	f001 0170 	and.w	r1, r1, #112	; 0x70
    28ee:	430c      	orrs	r4, r1
    28f0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    28f4:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    28f8:	443b      	add	r3, r7
    28fa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    28fe:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    2902:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    290a:	d80f      	bhi.n	292c <_usb_d_dev_ep_enable+0xe4>
    290c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2910:	d819      	bhi.n	2946 <_usb_d_dev_ep_enable+0xfe>
    2912:	2b80      	cmp	r3, #128	; 0x80
    2914:	d819      	bhi.n	294a <_usb_d_dev_ep_enable+0x102>
    2916:	2b40      	cmp	r3, #64	; 0x40
    2918:	d819      	bhi.n	294e <_usb_d_dev_ep_enable+0x106>
    291a:	2b20      	cmp	r3, #32
    291c:	d819      	bhi.n	2952 <_usb_d_dev_ep_enable+0x10a>
    291e:	2b10      	cmp	r3, #16
    2920:	d819      	bhi.n	2956 <_usb_d_dev_ep_enable+0x10e>
    2922:	2b08      	cmp	r3, #8
    2924:	bf94      	ite	ls
    2926:	2300      	movls	r3, #0
    2928:	2301      	movhi	r3, #1
    292a:	e000      	b.n	292e <_usb_d_dev_ep_enable+0xe6>
    292c:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    292e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    2932:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2934:	2380      	movs	r3, #128	; 0x80
    2936:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    293a:	4b6b      	ldr	r3, [pc, #428]	; (2ae8 <_usb_d_dev_ep_enable+0x2a0>)
    293c:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2940:	2000      	movs	r0, #0
    2942:	76b0      	strb	r0, [r6, #26]
    2944:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2946:	2306      	movs	r3, #6
    2948:	e7f1      	b.n	292e <_usb_d_dev_ep_enable+0xe6>
    294a:	2305      	movs	r3, #5
    294c:	e7ef      	b.n	292e <_usb_d_dev_ep_enable+0xe6>
    294e:	2304      	movs	r3, #4
    2950:	e7ed      	b.n	292e <_usb_d_dev_ep_enable+0xe6>
    2952:	2303      	movs	r3, #3
    2954:	e7eb      	b.n	292e <_usb_d_dev_ep_enable+0xe6>
    2956:	2302      	movs	r3, #2
    2958:	e7e9      	b.n	292e <_usb_d_dev_ep_enable+0xe6>
    295a:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    295c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2960:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2962:	2340      	movs	r3, #64	; 0x40
    2964:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    2968:	4b5f      	ldr	r3, [pc, #380]	; (2ae8 <_usb_d_dev_ep_enable+0x2a0>)
    296a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    296e:	2000      	movs	r0, #0
    2970:	72b0      	strb	r0, [r6, #10]
    2972:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2974:	2106      	movs	r1, #6
    2976:	e7f1      	b.n	295c <_usb_d_dev_ep_enable+0x114>
    2978:	2105      	movs	r1, #5
    297a:	e7ef      	b.n	295c <_usb_d_dev_ep_enable+0x114>
    297c:	2104      	movs	r1, #4
    297e:	e7ed      	b.n	295c <_usb_d_dev_ep_enable+0x114>
    2980:	2103      	movs	r1, #3
    2982:	e7eb      	b.n	295c <_usb_d_dev_ep_enable+0x114>
    2984:	2102      	movs	r1, #2
    2986:	e7e9      	b.n	295c <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    2988:	f06f 0011 	mvn.w	r0, #17
    298c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    298e:	f06f 0013 	mvn.w	r0, #19
    2992:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2994:	f06f 0013 	mvn.w	r0, #19
    2998:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    299a:	f06f 0013 	mvn.w	r0, #19
    299e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    29a0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    29a4:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    29a8:	b2e4      	uxtb	r4, r4
    29aa:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    29ac:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    29ae:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    29b2:	494d      	ldr	r1, [pc, #308]	; (2ae8 <_usb_d_dev_ep_enable+0x2a0>)
    29b4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    29b8:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    29bc:	2dff      	cmp	r5, #255	; 0xff
    29be:	d0e3      	beq.n	2988 <_usb_d_dev_ep_enable+0x140>
    29c0:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    29c2:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    29c4:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    29c8:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    29cc:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    29d0:	f001 0107 	and.w	r1, r1, #7
    29d4:	2901      	cmp	r1, #1
    29d6:	f43f af4e 	beq.w	2876 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    29da:	2f00      	cmp	r7, #0
    29dc:	f6ff af7a 	blt.w	28d4 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    29e0:	f014 0f07 	tst.w	r4, #7
    29e4:	d1d9      	bne.n	299a <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    29e6:	4d40      	ldr	r5, [pc, #256]	; (2ae8 <_usb_d_dev_ep_enable+0x2a0>)
    29e8:	009f      	lsls	r7, r3, #2
    29ea:	18f9      	adds	r1, r7, r3
    29ec:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    29f0:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    29f4:	f001 0107 	and.w	r1, r1, #7
    29f8:	430c      	orrs	r4, r1
    29fa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    29fe:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2a02:	443b      	add	r3, r7
    2a04:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2a08:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    2a0c:	4b37      	ldr	r3, [pc, #220]	; (2aec <_usb_d_dev_ep_enable+0x2a4>)
    2a0e:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2a12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    2a16:	d8a0      	bhi.n	295a <_usb_d_dev_ep_enable+0x112>
    2a18:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    2a1c:	d8aa      	bhi.n	2974 <_usb_d_dev_ep_enable+0x12c>
    2a1e:	2980      	cmp	r1, #128	; 0x80
    2a20:	d8aa      	bhi.n	2978 <_usb_d_dev_ep_enable+0x130>
    2a22:	2940      	cmp	r1, #64	; 0x40
    2a24:	d8aa      	bhi.n	297c <_usb_d_dev_ep_enable+0x134>
    2a26:	2920      	cmp	r1, #32
    2a28:	d8aa      	bhi.n	2980 <_usb_d_dev_ep_enable+0x138>
    2a2a:	2910      	cmp	r1, #16
    2a2c:	d8aa      	bhi.n	2984 <_usb_d_dev_ep_enable+0x13c>
    2a2e:	2908      	cmp	r1, #8
    2a30:	bf94      	ite	ls
    2a32:	2100      	movls	r1, #0
    2a34:	2101      	movhi	r1, #1
    2a36:	e791      	b.n	295c <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a38:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2a3c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a3e:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2a42:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a44:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    2a48:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2a4a:	2140      	movs	r1, #64	; 0x40
    2a4c:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2a50:	2080      	movs	r0, #128	; 0x80
    2a52:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    2a56:	4a24      	ldr	r2, [pc, #144]	; (2ae8 <_usb_d_dev_ep_enable+0x2a0>)
    2a58:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    2a5c:	2000      	movs	r0, #0
    2a5e:	72b0      	strb	r0, [r6, #10]
    2a60:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2a62:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2a66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2a6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2a6e:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    2a72:	016d      	lsls	r5, r5, #5
    2a74:	1953      	adds	r3, r2, r5
    2a76:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2a78:	685a      	ldr	r2, [r3, #4]
    2a7a:	f364 329b 	bfi	r2, r4, #14, #14
    2a7e:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2a80:	685a      	ldr	r2, [r3, #4]
    2a82:	f360 020d 	bfi	r2, r0, #0, #14
    2a86:	605a      	str	r2, [r3, #4]
    2a88:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    2a8c:	22b0      	movs	r2, #176	; 0xb0
    2a8e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2a92:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2a96:	461d      	mov	r5, r3
    2a98:	2310      	movs	r3, #16
    2a9a:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    2a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2aa0:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2aa4:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2aa6:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2aaa:	2705      	movs	r7, #5
    2aac:	e7ca      	b.n	2a44 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2aae:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2ab2:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2ab4:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2ab8:	2703      	movs	r7, #3
    2aba:	e7c3      	b.n	2a44 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2abc:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2ac0:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2ac2:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2ac6:	2706      	movs	r7, #6
    2ac8:	e7bc      	b.n	2a44 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2aca:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2ace:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2ad0:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2ad4:	2704      	movs	r7, #4
    2ad6:	e7b5      	b.n	2a44 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2ad8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2adc:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2ade:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2ae2:	2702      	movs	r7, #2
    2ae4:	e7ae      	b.n	2a44 <_usb_d_dev_ep_enable+0x1fc>
    2ae6:	bf00      	nop
    2ae8:	20000604 	.word	0x20000604
    2aec:	0fffc000 	.word	0x0fffc000

00002af0 <_usb_d_dev_ep_stall>:
{
    2af0:	b470      	push	{r4, r5, r6}
    2af2:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2af4:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2af6:	f010 000f 	ands.w	r0, r0, #15
    2afa:	d008      	beq.n	2b0e <_usb_d_dev_ep_stall+0x1e>
    2afc:	2b00      	cmp	r3, #0
    2afe:	bfb4      	ite	lt
    2b00:	1c83      	addlt	r3, r0, #2
    2b02:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    2b04:	2802      	cmp	r0, #2
    2b06:	d903      	bls.n	2b10 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    2b08:	f06f 0011 	mvn.w	r0, #17
    2b0c:	e018      	b.n	2b40 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    2b0e:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    2b10:	2901      	cmp	r1, #1
    2b12:	d017      	beq.n	2b44 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2b14:	2900      	cmp	r1, #0
    2b16:	d03a      	beq.n	2b8e <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2b18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2b1c:	4a45      	ldr	r2, [pc, #276]	; (2c34 <_usb_d_dev_ep_stall+0x144>)
    2b1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b22:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2b26:	f003 030f 	and.w	r3, r3, #15
    2b2a:	015b      	lsls	r3, r3, #5
    2b2c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2b30:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2b34:	2310      	movs	r3, #16
    2b36:	40a3      	lsls	r3, r4
    2b38:	421a      	tst	r2, r3
    2b3a:	bf14      	ite	ne
    2b3c:	2001      	movne	r0, #1
    2b3e:	2000      	moveq	r0, #0
}
    2b40:	bc70      	pop	{r4, r5, r6}
    2b42:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2b44:	2510      	movs	r5, #16
    2b46:	40a5      	lsls	r5, r4
    2b48:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2b4a:	493a      	ldr	r1, [pc, #232]	; (2c34 <_usb_d_dev_ep_stall+0x144>)
    2b4c:	009e      	lsls	r6, r3, #2
    2b4e:	18f2      	adds	r2, r6, r3
    2b50:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2b54:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2b58:	f002 020f 	and.w	r2, r2, #15
    2b5c:	0150      	lsls	r0, r2, #5
    2b5e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2b62:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2b66:	2020      	movs	r0, #32
    2b68:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    2b6c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2b6e:	0152      	lsls	r2, r2, #5
    2b70:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2b74:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    2b78:	4433      	add	r3, r6
    2b7a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    2b7e:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2b82:	f042 0208 	orr.w	r2, r2, #8
    2b86:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    2b8a:	2000      	movs	r0, #0
    2b8c:	e7d8      	b.n	2b40 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    2b8e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2b92:	4928      	ldr	r1, [pc, #160]	; (2c34 <_usb_d_dev_ep_stall+0x144>)
    2b94:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2b98:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    2b9c:	f002 020f 	and.w	r2, r2, #15
    2ba0:	0151      	lsls	r1, r2, #5
    2ba2:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2ba6:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2baa:	2010      	movs	r0, #16
    2bac:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    2bae:	4205      	tst	r5, r0
    2bb0:	d03c      	beq.n	2c2c <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2bb2:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2bb4:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2bb8:	2020      	movs	r0, #32
    2bba:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2bbc:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2bbe:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2bc2:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    2bc6:	4202      	tst	r2, r0
    2bc8:	d007      	beq.n	2bda <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2bca:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    2bce:	2201      	movs	r2, #1
    2bd0:	fa02 f404 	lsl.w	r4, r2, r4
    2bd4:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2bd6:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2bda:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2bde:	4815      	ldr	r0, [pc, #84]	; (2c34 <_usb_d_dev_ep_stall+0x144>)
    2be0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2be4:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    2be8:	f002 0207 	and.w	r2, r2, #7
    2bec:	2a01      	cmp	r2, #1
    2bee:	d00c      	beq.n	2c0a <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    2bf0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2bf4:	4a0f      	ldr	r2, [pc, #60]	; (2c34 <_usb_d_dev_ep_stall+0x144>)
    2bf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2bfa:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2bfe:	f36f 02c3 	bfc	r2, #3, #1
    2c02:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2c06:	2000      	movs	r0, #0
    2c08:	e79a      	b.n	2b40 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2c0a:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2c0e:	f012 0f30 	tst.w	r2, #48	; 0x30
    2c12:	d10d      	bne.n	2c30 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    2c14:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2c18:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    2c1c:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2c20:	f36f 02c3 	bfc	r2, #3, #1
    2c24:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2c28:	2000      	movs	r0, #0
    2c2a:	e789      	b.n	2b40 <_usb_d_dev_ep_stall+0x50>
    2c2c:	2000      	movs	r0, #0
    2c2e:	e787      	b.n	2b40 <_usb_d_dev_ep_stall+0x50>
    2c30:	2000      	movs	r0, #0
    2c32:	e785      	b.n	2b40 <_usb_d_dev_ep_stall+0x50>
    2c34:	20000604 	.word	0x20000604

00002c38 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    2c38:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    2c3a:	f000 040f 	and.w	r4, r0, #15
    2c3e:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    2c40:	4a14      	ldr	r2, [pc, #80]	; (2c94 <_usb_d_dev_ep_read_req+0x5c>)
    2c42:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    2c44:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    2c46:	6840      	ldr	r0, [r0, #4]
    2c48:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    2c4c:	2c02      	cmp	r4, #2
    2c4e:	d817      	bhi.n	2c80 <_usb_d_dev_ep_read_req+0x48>
    2c50:	b1c9      	cbz	r1, 2c86 <_usb_d_dev_ep_read_req+0x4e>
    2c52:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2c56:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    2c5a:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    2c5c:	2a11      	cmp	r2, #17
    2c5e:	d115      	bne.n	2c8c <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2c60:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    2c64:	f012 0f10 	tst.w	r2, #16
    2c68:	d102      	bne.n	2c70 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    2c6a:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    2c6c:	bc30      	pop	{r4, r5}
    2c6e:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    2c70:	682c      	ldr	r4, [r5, #0]
    2c72:	686a      	ldr	r2, [r5, #4]
    2c74:	600c      	str	r4, [r1, #0]
    2c76:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2c78:	2210      	movs	r2, #16
    2c7a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    2c7e:	e7f5      	b.n	2c6c <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    2c80:	f06f 0011 	mvn.w	r0, #17
    2c84:	e7f2      	b.n	2c6c <_usb_d_dev_ep_read_req+0x34>
    2c86:	f06f 0011 	mvn.w	r0, #17
    2c8a:	e7ef      	b.n	2c6c <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    2c8c:	f06f 0012 	mvn.w	r0, #18
    2c90:	e7ec      	b.n	2c6c <_usb_d_dev_ep_read_req+0x34>
    2c92:	bf00      	nop
    2c94:	20000604 	.word	0x20000604

00002c98 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    2c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c9c:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    2c9e:	7a03      	ldrb	r3, [r0, #8]
    2ca0:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2ca2:	f013 030f 	ands.w	r3, r3, #15
    2ca6:	f000 80c2 	beq.w	2e2e <_usb_d_dev_ep_trans+0x196>
    2caa:	2e00      	cmp	r6, #0
    2cac:	bfb4      	ite	lt
    2cae:	1c9a      	addlt	r2, r3, #2
    2cb0:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    2cb2:	4614      	mov	r4, r2
    2cb4:	4969      	ldr	r1, [pc, #420]	; (2e5c <_usb_d_dev_ep_trans+0x1c4>)
    2cb6:	f101 0760 	add.w	r7, r1, #96	; 0x60
    2cba:	1c55      	adds	r5, r2, #1
    2cbc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2cc0:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2cc4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2cc8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2ccc:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    2cd0:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2cd4:	428a      	cmp	r2, r1
    2cd6:	d025      	beq.n	2d24 <_usb_d_dev_ep_trans+0x8c>
    2cd8:	1e55      	subs	r5, r2, #1
    2cda:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    2cdc:	6841      	ldr	r1, [r0, #4]
    2cde:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    2ce0:	2b02      	cmp	r3, #2
    2ce2:	f200 8092 	bhi.w	2e0a <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    2ce6:	6803      	ldr	r3, [r0, #0]
    2ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2cec:	d31c      	bcc.n	2d28 <_usb_d_dev_ep_trans+0x90>
    2cee:	eb03 0c01 	add.w	ip, r3, r1
    2cf2:	f8df e180 	ldr.w	lr, [pc, #384]	; 2e74 <_usb_d_dev_ep_trans+0x1dc>
    2cf6:	45f4      	cmp	ip, lr
    2cf8:	d816      	bhi.n	2d28 <_usb_d_dev_ep_trans+0x90>
    2cfa:	f013 0f03 	tst.w	r3, #3
    2cfe:	d113      	bne.n	2d28 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    2d00:	2e00      	cmp	r6, #0
    2d02:	db2a      	blt.n	2d5a <_usb_d_dev_ep_trans+0xc2>
    2d04:	428a      	cmp	r2, r1
    2d06:	f200 809c 	bhi.w	2e42 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    2d0a:	b34d      	cbz	r5, 2d60 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    2d0c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2d10:	4a52      	ldr	r2, [pc, #328]	; (2e5c <_usb_d_dev_ep_trans+0x1c4>)
    2d12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2d1a:	2b00      	cmp	r3, #0
    2d1c:	d07b      	beq.n	2e16 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    2d1e:	f04f 0800 	mov.w	r8, #0
    2d22:	e00c      	b.n	2d3e <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2d24:	4615      	mov	r5, r2
    2d26:	e7d9      	b.n	2cdc <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    2d28:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2d2c:	4a4b      	ldr	r2, [pc, #300]	; (2e5c <_usb_d_dev_ep_trans+0x1c4>)
    2d2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2d36:	2b00      	cmp	r3, #0
    2d38:	d06a      	beq.n	2e10 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    2d3a:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    2d3e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2d42:	4a46      	ldr	r2, [pc, #280]	; (2e5c <_usb_d_dev_ep_trans+0x1c4>)
    2d44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2d48:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2d4c:	f013 0f08 	tst.w	r3, #8
    2d50:	d009      	beq.n	2d66 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    2d52:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2d54:	b003      	add	sp, #12
    2d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    2d5a:	f04f 0800 	mov.w	r8, #0
    2d5e:	e7ee      	b.n	2d3e <_usb_d_dev_ep_trans+0xa6>
    2d60:	f04f 0800 	mov.w	r8, #0
    2d64:	e7eb      	b.n	2d3e <_usb_d_dev_ep_trans+0xa6>
    2d66:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    2d68:	a801      	add	r0, sp, #4
    2d6a:	4b3d      	ldr	r3, [pc, #244]	; (2e60 <_usb_d_dev_ep_trans+0x1c8>)
    2d6c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    2d6e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2d72:	4a3a      	ldr	r2, [pc, #232]	; (2e5c <_usb_d_dev_ep_trans+0x1c4>)
    2d74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2d78:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2d7c:	f013 0f40 	tst.w	r3, #64	; 0x40
    2d80:	d13c      	bne.n	2dfc <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    2d82:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    2d86:	4b35      	ldr	r3, [pc, #212]	; (2e5c <_usb_d_dev_ep_trans+0x1c4>)
    2d88:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    2d8c:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2d94:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    2d98:	a801      	add	r0, sp, #4
    2d9a:	4b32      	ldr	r3, [pc, #200]	; (2e64 <_usb_d_dev_ep_trans+0x1cc>)
    2d9c:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    2d9e:	f8da 3000 	ldr.w	r3, [sl]
    2da2:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    2da6:	f8da 3004 	ldr.w	r3, [sl, #4]
    2daa:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    2dae:	2300      	movs	r3, #0
    2db0:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    2db4:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    2db6:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2dba:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    2dbe:	f368 1345 	bfi	r3, r8, #5, #1
    2dc2:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2dc6:	f89a 3009 	ldrb.w	r3, [sl, #9]
    2dca:	b1e3      	cbz	r3, 2e06 <_usb_d_dev_ep_trans+0x16e>
    2dcc:	fab5 f585 	clz	r5, r5
    2dd0:	096d      	lsrs	r5, r5, #5
    2dd2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2dd6:	4b21      	ldr	r3, [pc, #132]	; (2e5c <_usb_d_dev_ep_trans+0x1c4>)
    2dd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2ddc:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    2de0:	f365 1304 	bfi	r3, r5, #4, #1
    2de4:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    2de8:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    2dea:	f04f 0100 	mov.w	r1, #0
    2dee:	4638      	mov	r0, r7
    2df0:	bfb4      	ite	lt
    2df2:	4b1d      	ldrlt	r3, [pc, #116]	; (2e68 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    2df4:	4b1d      	ldrge	r3, [pc, #116]	; (2e6c <_usb_d_dev_ep_trans+0x1d4>)
    2df6:	4798      	blx	r3
	return ERR_NONE;
    2df8:	2000      	movs	r0, #0
    2dfa:	e7ab      	b.n	2d54 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    2dfc:	a801      	add	r0, sp, #4
    2dfe:	4b19      	ldr	r3, [pc, #100]	; (2e64 <_usb_d_dev_ep_trans+0x1cc>)
    2e00:	4798      	blx	r3
		return USB_BUSY;
    2e02:	2001      	movs	r0, #1
    2e04:	e7a6      	b.n	2d54 <_usb_d_dev_ep_trans+0xbc>
    2e06:	2500      	movs	r5, #0
    2e08:	e7e3      	b.n	2dd2 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    2e0a:	f06f 0011 	mvn.w	r0, #17
    2e0e:	e7a1      	b.n	2d54 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    2e10:	f06f 0012 	mvn.w	r0, #18
    2e14:	e79e      	b.n	2d54 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    2e16:	f06f 0011 	mvn.w	r0, #17
    2e1a:	e79b      	b.n	2d54 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    2e1c:	f06f 0012 	mvn.w	r0, #18
    2e20:	e798      	b.n	2d54 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    2e22:	6841      	ldr	r1, [r0, #4]
    2e24:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    2e28:	4f11      	ldr	r7, [pc, #68]	; (2e70 <_usb_d_dev_ep_trans+0x1d8>)
    2e2a:	2400      	movs	r4, #0
    2e2c:	e75b      	b.n	2ce6 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2e2e:	4a0b      	ldr	r2, [pc, #44]	; (2e5c <_usb_d_dev_ep_trans+0x1c4>)
    2e30:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    2e34:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2e38:	428a      	cmp	r2, r1
    2e3a:	d0f2      	beq.n	2e22 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    2e3c:	4f0c      	ldr	r7, [pc, #48]	; (2e70 <_usb_d_dev_ep_trans+0x1d8>)
    2e3e:	2400      	movs	r4, #0
    2e40:	e74a      	b.n	2cd8 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    2e42:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2e46:	4a05      	ldr	r2, [pc, #20]	; (2e5c <_usb_d_dev_ep_trans+0x1c4>)
    2e48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2e50:	2b00      	cmp	r3, #0
    2e52:	d0e3      	beq.n	2e1c <_usb_d_dev_ep_trans+0x184>
    2e54:	f04f 0801 	mov.w	r8, #1
    2e58:	e771      	b.n	2d3e <_usb_d_dev_ep_trans+0xa6>
    2e5a:	bf00      	nop
    2e5c:	20000604 	.word	0x20000604
    2e60:	00000b8d 	.word	0x00000b8d
    2e64:	00000b9b 	.word	0x00000b9b
    2e68:	00001ef9 	.word	0x00001ef9
    2e6c:	0000207d 	.word	0x0000207d
    2e70:	20000678 	.word	0x20000678
    2e74:	20041fff 	.word	0x20041fff

00002e78 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    2e78:	b508      	push	{r3, lr}
    2e7a:	b241      	sxtb	r1, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2e7c:	f010 000f 	ands.w	r0, r0, #15
    2e80:	d00c      	beq.n	2e9c <_usb_d_dev_ep_abort+0x24>
    2e82:	2900      	cmp	r1, #0
    2e84:	bfb4      	ite	lt
    2e86:	1c83      	addlt	r3, r0, #2
    2e88:	4603      	movge	r3, r0
	uint8_t               epn = USB_EP_GET_N(ep);
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
    2e8a:	2802      	cmp	r0, #2
    2e8c:	d900      	bls.n	2e90 <_usb_d_dev_ep_abort+0x18>
    2e8e:	bd08      	pop	{r3, pc}
	return &dev_inst.ep[ep_index];
    2e90:	2014      	movs	r0, #20
    2e92:	fb03 0300 	mla	r3, r3, r0, r0
    2e96:	4804      	ldr	r0, [pc, #16]	; (2ea8 <_usb_d_dev_ep_abort+0x30>)
    2e98:	4418      	add	r0, r3
    2e9a:	e000      	b.n	2e9e <_usb_d_dev_ep_abort+0x26>
    2e9c:	4803      	ldr	r0, [pc, #12]	; (2eac <_usb_d_dev_ep_abort+0x34>)
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    2e9e:	2202      	movs	r2, #2
    2ea0:	0fc9      	lsrs	r1, r1, #31
    2ea2:	4b03      	ldr	r3, [pc, #12]	; (2eb0 <_usb_d_dev_ep_abort+0x38>)
    2ea4:	4798      	blx	r3
    2ea6:	e7f2      	b.n	2e8e <_usb_d_dev_ep_abort+0x16>
    2ea8:	20000664 	.word	0x20000664
    2eac:	20000678 	.word	0x20000678
    2eb0:	00001d49 	.word	0x00001d49

00002eb4 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2eb4:	4b06      	ldr	r3, [pc, #24]	; (2ed0 <_usb_d_dev_register_callback+0x1c>)
    2eb6:	2900      	cmp	r1, #0
    2eb8:	bf08      	it	eq
    2eba:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    2ebc:	2801      	cmp	r0, #1
    2ebe:	d003      	beq.n	2ec8 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2ec0:	b908      	cbnz	r0, 2ec6 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2ec2:	4b04      	ldr	r3, [pc, #16]	; (2ed4 <_usb_d_dev_register_callback+0x20>)
    2ec4:	6619      	str	r1, [r3, #96]	; 0x60
    2ec6:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    2ec8:	4b02      	ldr	r3, [pc, #8]	; (2ed4 <_usb_d_dev_register_callback+0x20>)
    2eca:	6659      	str	r1, [r3, #100]	; 0x64
    2ecc:	4770      	bx	lr
    2ece:	bf00      	nop
    2ed0:	00001c71 	.word	0x00001c71
    2ed4:	20000604 	.word	0x20000604

00002ed8 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2ed8:	4b09      	ldr	r3, [pc, #36]	; (2f00 <_usb_d_dev_register_ep_callback+0x28>)
    2eda:	2900      	cmp	r1, #0
    2edc:	bf08      	it	eq
    2ede:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2ee0:	4603      	mov	r3, r0
    2ee2:	b130      	cbz	r0, 2ef2 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2ee4:	2801      	cmp	r0, #1
    2ee6:	d007      	beq.n	2ef8 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2ee8:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2eea:	bf04      	itt	eq
    2eec:	4b05      	ldreq	r3, [pc, #20]	; (2f04 <_usb_d_dev_register_ep_callback+0x2c>)
    2eee:	6719      	streq	r1, [r3, #112]	; 0x70
    2ef0:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2ef2:	4b04      	ldr	r3, [pc, #16]	; (2f04 <_usb_d_dev_register_ep_callback+0x2c>)
    2ef4:	6699      	str	r1, [r3, #104]	; 0x68
    2ef6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2ef8:	4b02      	ldr	r3, [pc, #8]	; (2f04 <_usb_d_dev_register_ep_callback+0x2c>)
    2efa:	66d9      	str	r1, [r3, #108]	; 0x6c
    2efc:	4770      	bx	lr
    2efe:	bf00      	nop
    2f00:	00001c71 	.word	0x00001c71
    2f04:	20000604 	.word	0x20000604

00002f08 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    2f08:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2f0a:	4b01      	ldr	r3, [pc, #4]	; (2f10 <USB_0_Handler+0x8>)
    2f0c:	4798      	blx	r3
    2f0e:	bd08      	pop	{r3, pc}
    2f10:	0000226d 	.word	0x0000226d

00002f14 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    2f14:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2f16:	4b01      	ldr	r3, [pc, #4]	; (2f1c <USB_1_Handler+0x8>)
    2f18:	4798      	blx	r3
    2f1a:	bd08      	pop	{r3, pc}
    2f1c:	0000226d 	.word	0x0000226d

00002f20 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    2f20:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2f22:	4b01      	ldr	r3, [pc, #4]	; (2f28 <USB_2_Handler+0x8>)
    2f24:	4798      	blx	r3
    2f26:	bd08      	pop	{r3, pc}
    2f28:	0000226d 	.word	0x0000226d

00002f2c <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    2f2c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2f2e:	4b01      	ldr	r3, [pc, #4]	; (2f34 <USB_3_Handler+0x8>)
    2f30:	4798      	blx	r3
    2f32:	bd08      	pop	{r3, pc}
    2f34:	0000226d 	.word	0x0000226d

00002f38 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2f38:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f3a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    2f3c:	780b      	ldrb	r3, [r1, #0]
    2f3e:	f3c3 1441 	ubfx	r4, r3, #5, #2
    2f42:	2c01      	cmp	r4, #1
    2f44:	d15e      	bne.n	3004 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2f46:	888c      	ldrh	r4, [r1, #4]
    2f48:	4d35      	ldr	r5, [pc, #212]	; (3020 <cdcdf_acm_req+0xe8>)
    2f4a:	782d      	ldrb	r5, [r5, #0]
    2f4c:	42a5      	cmp	r5, r4
    2f4e:	d003      	beq.n	2f58 <cdcdf_acm_req+0x20>
    2f50:	4d33      	ldr	r5, [pc, #204]	; (3020 <cdcdf_acm_req+0xe8>)
    2f52:	786d      	ldrb	r5, [r5, #1]
    2f54:	42a5      	cmp	r5, r4
    2f56:	d158      	bne.n	300a <cdcdf_acm_req+0xd2>
    2f58:	4616      	mov	r6, r2
    2f5a:	460c      	mov	r4, r1
    2f5c:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    2f5e:	f013 0f80 	tst.w	r3, #128	; 0x80
    2f62:	d10c      	bne.n	2f7e <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    2f64:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    2f66:	4b2f      	ldr	r3, [pc, #188]	; (3024 <cdcdf_acm_req+0xec>)
    2f68:	4798      	blx	r3
    2f6a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    2f6c:	7863      	ldrb	r3, [r4, #1]
    2f6e:	2b20      	cmp	r3, #32
    2f70:	d013      	beq.n	2f9a <cdcdf_acm_req+0x62>
    2f72:	2b22      	cmp	r3, #34	; 0x22
    2f74:	d032      	beq.n	2fdc <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    2f76:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    2f7a:	b003      	add	sp, #12
    2f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    2f7e:	2a01      	cmp	r2, #1
    2f80:	d046      	beq.n	3010 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    2f82:	784b      	ldrb	r3, [r1, #1]
    2f84:	2b21      	cmp	r3, #33	; 0x21
    2f86:	d145      	bne.n	3014 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2f88:	88cb      	ldrh	r3, [r1, #6]
    2f8a:	2b07      	cmp	r3, #7
    2f8c:	d145      	bne.n	301a <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2f8e:	2300      	movs	r3, #0
    2f90:	2207      	movs	r2, #7
    2f92:	4925      	ldr	r1, [pc, #148]	; (3028 <cdcdf_acm_req+0xf0>)
    2f94:	4c25      	ldr	r4, [pc, #148]	; (302c <cdcdf_acm_req+0xf4>)
    2f96:	47a0      	blx	r4
    2f98:	e7ef      	b.n	2f7a <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2f9a:	2f07      	cmp	r7, #7
    2f9c:	d12b      	bne.n	2ff6 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    2f9e:	b1be      	cbz	r6, 2fd0 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2fa0:	6800      	ldr	r0, [r0, #0]
    2fa2:	9000      	str	r0, [sp, #0]
    2fa4:	888a      	ldrh	r2, [r1, #4]
    2fa6:	798b      	ldrb	r3, [r1, #6]
    2fa8:	f8ad 2004 	strh.w	r2, [sp, #4]
    2fac:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2fb0:	4b1b      	ldr	r3, [pc, #108]	; (3020 <cdcdf_acm_req+0xe8>)
    2fb2:	691b      	ldr	r3, [r3, #16]
    2fb4:	b113      	cbz	r3, 2fbc <cdcdf_acm_req+0x84>
    2fb6:	4668      	mov	r0, sp
    2fb8:	4798      	blx	r3
    2fba:	b1f8      	cbz	r0, 2ffc <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    2fbc:	4b18      	ldr	r3, [pc, #96]	; (3020 <cdcdf_acm_req+0xe8>)
    2fbe:	aa02      	add	r2, sp, #8
    2fc0:	e912 0003 	ldmdb	r2, {r0, r1}
    2fc4:	6098      	str	r0, [r3, #8]
    2fc6:	8199      	strh	r1, [r3, #12]
    2fc8:	0c09      	lsrs	r1, r1, #16
    2fca:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    2fcc:	2000      	movs	r0, #0
    2fce:	e7d4      	b.n	2f7a <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2fd0:	2300      	movs	r3, #0
    2fd2:	2207      	movs	r2, #7
    2fd4:	4628      	mov	r0, r5
    2fd6:	4c15      	ldr	r4, [pc, #84]	; (302c <cdcdf_acm_req+0xf4>)
    2fd8:	47a0      	blx	r4
    2fda:	e7ce      	b.n	2f7a <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    2fdc:	2300      	movs	r3, #0
    2fde:	461a      	mov	r2, r3
    2fe0:	4619      	mov	r1, r3
    2fe2:	4618      	mov	r0, r3
    2fe4:	4d11      	ldr	r5, [pc, #68]	; (302c <cdcdf_acm_req+0xf4>)
    2fe6:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    2fe8:	4b0d      	ldr	r3, [pc, #52]	; (3020 <cdcdf_acm_req+0xe8>)
    2fea:	695b      	ldr	r3, [r3, #20]
    2fec:	b143      	cbz	r3, 3000 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    2fee:	8860      	ldrh	r0, [r4, #2]
    2ff0:	4798      	blx	r3
		return ERR_NONE;
    2ff2:	2000      	movs	r0, #0
    2ff4:	e7c1      	b.n	2f7a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    2ff6:	f04f 30ff 	mov.w	r0, #4294967295
    2ffa:	e7be      	b.n	2f7a <cdcdf_acm_req+0x42>
			return ERR_NONE;
    2ffc:	2000      	movs	r0, #0
    2ffe:	e7bc      	b.n	2f7a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    3000:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    3002:	e7ba      	b.n	2f7a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    3004:	f06f 0009 	mvn.w	r0, #9
    3008:	e7b7      	b.n	2f7a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    300a:	f06f 0009 	mvn.w	r0, #9
    300e:	e7b4      	b.n	2f7a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    3010:	2000      	movs	r0, #0
    3012:	e7b2      	b.n	2f7a <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    3014:	f06f 000c 	mvn.w	r0, #12
    3018:	e7af      	b.n	2f7a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    301a:	f04f 30ff 	mov.w	r0, #4294967295
    301e:	e7ac      	b.n	2f7a <cdcdf_acm_req+0x42>
    3020:	200007ec 	.word	0x200007ec
    3024:	00003901 	.word	0x00003901
    3028:	200007f4 	.word	0x200007f4
    302c:	000033dd 	.word	0x000033dd

00003030 <cdcdf_acm_ctrl>:
{
    3030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3034:	b083      	sub	sp, #12
    3036:	4616      	mov	r6, r2
	switch (ctrl) {
    3038:	2901      	cmp	r1, #1
    303a:	d066      	beq.n	310a <cdcdf_acm_ctrl+0xda>
    303c:	b141      	cbz	r1, 3050 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    303e:	2902      	cmp	r1, #2
    3040:	bf0c      	ite	eq
    3042:	f06f 001a 	mvneq.w	r0, #26
    3046:	f06f 000c 	mvnne.w	r0, #12
}
    304a:	b003      	add	sp, #12
    304c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3050:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    3054:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    3056:	2800      	cmp	r0, #0
    3058:	f000 8085 	beq.w	3166 <cdcdf_acm_ctrl+0x136>
    305c:	f10a 3bff 	add.w	fp, sl, #4294967295
    3060:	f10a 0301 	add.w	r3, sl, #1
    3064:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3066:	4f46      	ldr	r7, [pc, #280]	; (3180 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    3068:	f8df 9124 	ldr.w	r9, [pc, #292]	; 3190 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    306c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 3194 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    3070:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    3072:	7943      	ldrb	r3, [r0, #5]
    3074:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    3078:	2b02      	cmp	r3, #2
    307a:	d002      	beq.n	3082 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    307c:	f06f 0009 	mvn.w	r0, #9
    3080:	e7e3      	b.n	304a <cdcdf_acm_ctrl+0x1a>
    3082:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    3086:	f89b 3000 	ldrb.w	r3, [fp]
    308a:	429a      	cmp	r2, r3
    308c:	d06e      	beq.n	316c <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    308e:	2bff      	cmp	r3, #255	; 0xff
    3090:	d16f      	bne.n	3172 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    3092:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    3096:	2205      	movs	r2, #5
    3098:	6871      	ldr	r1, [r6, #4]
    309a:	4b3a      	ldr	r3, [pc, #232]	; (3184 <cdcdf_acm_ctrl+0x154>)
    309c:	4798      	blx	r3
		while (NULL != ep) {
    309e:	4604      	mov	r4, r0
    30a0:	b1f8      	cbz	r0, 30e2 <cdcdf_acm_ctrl+0xb2>
    30a2:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    30a6:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    30a8:	7963      	ldrb	r3, [r4, #5]
    30aa:	7922      	ldrb	r2, [r4, #4]
    30ac:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    30b0:	b292      	uxth	r2, r2
    30b2:	78e1      	ldrb	r1, [r4, #3]
    30b4:	4628      	mov	r0, r5
    30b6:	47b8      	blx	r7
    30b8:	2800      	cmp	r0, #0
    30ba:	d15d      	bne.n	3178 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    30bc:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    30c0:	bf14      	ite	ne
    30c2:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    30c6:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    30ca:	4628      	mov	r0, r5
    30cc:	47c8      	blx	r9
			desc->sod = ep;
    30ce:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    30d0:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    30d2:	6871      	ldr	r1, [r6, #4]
    30d4:	4420      	add	r0, r4
    30d6:	47c0      	blx	r8
		while (NULL != ep) {
    30d8:	4604      	mov	r4, r0
    30da:	2800      	cmp	r0, #0
    30dc:	d1e3      	bne.n	30a6 <cdcdf_acm_ctrl+0x76>
    30de:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    30e2:	6833      	ldr	r3, [r6, #0]
    30e4:	7818      	ldrb	r0, [r3, #0]
    30e6:	2204      	movs	r2, #4
    30e8:	6871      	ldr	r1, [r6, #4]
    30ea:	4418      	add	r0, r3
    30ec:	4b25      	ldr	r3, [pc, #148]	; (3184 <cdcdf_acm_ctrl+0x154>)
    30ee:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    30f0:	9b00      	ldr	r3, [sp, #0]
    30f2:	459b      	cmp	fp, r3
    30f4:	d004      	beq.n	3100 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    30f6:	2800      	cmp	r0, #0
    30f8:	d1ba      	bne.n	3070 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    30fa:	f06f 0009 	mvn.w	r0, #9
    30fe:	e7a4      	b.n	304a <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    3100:	2201      	movs	r2, #1
    3102:	4b21      	ldr	r3, [pc, #132]	; (3188 <cdcdf_acm_ctrl+0x158>)
    3104:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    3106:	2000      	movs	r0, #0
    3108:	e79f      	b.n	304a <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    310a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    310c:	b142      	cbz	r2, 3120 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    310e:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    3110:	795b      	ldrb	r3, [r3, #5]
    3112:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    3116:	2b02      	cmp	r3, #2
    3118:	d002      	beq.n	3120 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    311a:	f06f 0009 	mvn.w	r0, #9
    311e:	e794      	b.n	304a <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    3120:	7823      	ldrb	r3, [r4, #0]
    3122:	2bff      	cmp	r3, #255	; 0xff
    3124:	d008      	beq.n	3138 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    3126:	23ff      	movs	r3, #255	; 0xff
    3128:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    312a:	78a0      	ldrb	r0, [r4, #2]
    312c:	4298      	cmp	r0, r3
    312e:	d003      	beq.n	3138 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3130:	4b16      	ldr	r3, [pc, #88]	; (318c <cdcdf_acm_ctrl+0x15c>)
    3132:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3134:	23ff      	movs	r3, #255	; 0xff
    3136:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    3138:	7863      	ldrb	r3, [r4, #1]
    313a:	2bff      	cmp	r3, #255	; 0xff
    313c:	d008      	beq.n	3150 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    313e:	23ff      	movs	r3, #255	; 0xff
    3140:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    3142:	78e0      	ldrb	r0, [r4, #3]
    3144:	4298      	cmp	r0, r3
    3146:	d003      	beq.n	3150 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3148:	4b10      	ldr	r3, [pc, #64]	; (318c <cdcdf_acm_ctrl+0x15c>)
    314a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    314c:	23ff      	movs	r3, #255	; 0xff
    314e:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    3150:	7920      	ldrb	r0, [r4, #4]
    3152:	28ff      	cmp	r0, #255	; 0xff
    3154:	d003      	beq.n	315e <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    3156:	4b0d      	ldr	r3, [pc, #52]	; (318c <cdcdf_acm_ctrl+0x15c>)
    3158:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    315a:	23ff      	movs	r3, #255	; 0xff
    315c:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    315e:	2000      	movs	r0, #0
    3160:	4b09      	ldr	r3, [pc, #36]	; (3188 <cdcdf_acm_ctrl+0x158>)
    3162:	7158      	strb	r0, [r3, #5]
    3164:	e771      	b.n	304a <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    3166:	f06f 0009 	mvn.w	r0, #9
    316a:	e76e      	b.n	304a <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    316c:	f06f 0011 	mvn.w	r0, #17
    3170:	e76b      	b.n	304a <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    3172:	f06f 001b 	mvn.w	r0, #27
    3176:	e768      	b.n	304a <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    3178:	f06f 0013 	mvn.w	r0, #19
    317c:	e765      	b.n	304a <cdcdf_acm_ctrl+0x1a>
    317e:	bf00      	nop
    3180:	00001101 	.word	0x00001101
    3184:	00003921 	.word	0x00003921
    3188:	200007ec 	.word	0x200007ec
    318c:	00001169 	.word	0x00001169
    3190:	00001195 	.word	0x00001195
    3194:	0000395b 	.word	0x0000395b

00003198 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    3198:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    319a:	4b0a      	ldr	r3, [pc, #40]	; (31c4 <cdcdf_acm_init+0x2c>)
    319c:	4798      	blx	r3
    319e:	2801      	cmp	r0, #1
    31a0:	d80c      	bhi.n	31bc <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    31a2:	4809      	ldr	r0, [pc, #36]	; (31c8 <cdcdf_acm_init+0x30>)
    31a4:	4b09      	ldr	r3, [pc, #36]	; (31cc <cdcdf_acm_init+0x34>)
    31a6:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    31a8:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    31aa:	3018      	adds	r0, #24
    31ac:	4b08      	ldr	r3, [pc, #32]	; (31d0 <cdcdf_acm_init+0x38>)
    31ae:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    31b0:	4908      	ldr	r1, [pc, #32]	; (31d4 <cdcdf_acm_init+0x3c>)
    31b2:	2001      	movs	r0, #1
    31b4:	4b08      	ldr	r3, [pc, #32]	; (31d8 <cdcdf_acm_init+0x40>)
    31b6:	4798      	blx	r3
	return ERR_NONE;
    31b8:	2000      	movs	r0, #0
    31ba:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    31bc:	f06f 0010 	mvn.w	r0, #16
}
    31c0:	bd08      	pop	{r3, pc}
    31c2:	bf00      	nop
    31c4:	0000390d 	.word	0x0000390d
    31c8:	200007ec 	.word	0x200007ec
    31cc:	00003031 	.word	0x00003031
    31d0:	000038ad 	.word	0x000038ad
    31d4:	20000040 	.word	0x20000040
    31d8:	00003819 	.word	0x00003819

000031dc <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    31dc:	4b07      	ldr	r3, [pc, #28]	; (31fc <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    31de:	795b      	ldrb	r3, [r3, #5]
    31e0:	b143      	cbz	r3, 31f4 <cdcdf_acm_read+0x18>
{
    31e2:	b510      	push	{r4, lr}
    31e4:	460a      	mov	r2, r1
    31e6:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    31e8:	2300      	movs	r3, #0
    31ea:	4804      	ldr	r0, [pc, #16]	; (31fc <cdcdf_acm_read+0x20>)
    31ec:	7900      	ldrb	r0, [r0, #4]
    31ee:	4c04      	ldr	r4, [pc, #16]	; (3200 <cdcdf_acm_read+0x24>)
    31f0:	47a0      	blx	r4
    31f2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    31f4:	f06f 0010 	mvn.w	r0, #16
    31f8:	4770      	bx	lr
    31fa:	bf00      	nop
    31fc:	200007ec 	.word	0x200007ec
    3200:	000033dd 	.word	0x000033dd

00003204 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    3204:	4b07      	ldr	r3, [pc, #28]	; (3224 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    3206:	795b      	ldrb	r3, [r3, #5]
    3208:	b143      	cbz	r3, 321c <cdcdf_acm_write+0x18>
{
    320a:	b510      	push	{r4, lr}
    320c:	460a      	mov	r2, r1
    320e:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    3210:	2301      	movs	r3, #1
    3212:	4804      	ldr	r0, [pc, #16]	; (3224 <cdcdf_acm_write+0x20>)
    3214:	78c0      	ldrb	r0, [r0, #3]
    3216:	4c04      	ldr	r4, [pc, #16]	; (3228 <cdcdf_acm_write+0x24>)
    3218:	47a0      	blx	r4
    321a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    321c:	f06f 0010 	mvn.w	r0, #16
    3220:	4770      	bx	lr
    3222:	bf00      	nop
    3224:	200007ec 	.word	0x200007ec
    3228:	000033dd 	.word	0x000033dd

0000322c <cdcdf_acm_stop_xfer>:
{
    322c:	b538      	push	{r3, r4, r5, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    322e:	4d03      	ldr	r5, [pc, #12]	; (323c <cdcdf_acm_stop_xfer+0x10>)
    3230:	78e8      	ldrb	r0, [r5, #3]
    3232:	4c03      	ldr	r4, [pc, #12]	; (3240 <cdcdf_acm_stop_xfer+0x14>)
    3234:	47a0      	blx	r4
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    3236:	7928      	ldrb	r0, [r5, #4]
    3238:	47a0      	blx	r4
    323a:	bd38      	pop	{r3, r4, r5, pc}
    323c:	200007ec 	.word	0x200007ec
    3240:	00001301 	.word	0x00001301

00003244 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    3244:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3246:	4b07      	ldr	r3, [pc, #28]	; (3264 <usbdc_unconfig+0x20>)
    3248:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    324a:	b14c      	cbz	r4, 3260 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    324c:	2600      	movs	r6, #0
    324e:	2501      	movs	r5, #1
    3250:	6863      	ldr	r3, [r4, #4]
    3252:	4632      	mov	r2, r6
    3254:	4629      	mov	r1, r5
    3256:	4620      	mov	r0, r4
    3258:	4798      	blx	r3
		func = func->next;
    325a:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    325c:	2c00      	cmp	r4, #0
    325e:	d1f7      	bne.n	3250 <usbdc_unconfig+0xc>
    3260:	bd70      	pop	{r4, r5, r6, pc}
    3262:	bf00      	nop
    3264:	20000810 	.word	0x20000810

00003268 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    3268:	b570      	push	{r4, r5, r6, lr}
    326a:	4606      	mov	r6, r0
    326c:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    326e:	4b07      	ldr	r3, [pc, #28]	; (328c <usbdc_change_notify+0x24>)
    3270:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    3272:	b91c      	cbnz	r4, 327c <usbdc_change_notify+0x14>
    3274:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    3276:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    3278:	2c00      	cmp	r4, #0
    327a:	d0fb      	beq.n	3274 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    327c:	6863      	ldr	r3, [r4, #4]
    327e:	2b00      	cmp	r3, #0
    3280:	d0f9      	beq.n	3276 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    3282:	4629      	mov	r1, r5
    3284:	4630      	mov	r0, r6
    3286:	4798      	blx	r3
    3288:	e7f5      	b.n	3276 <usbdc_change_notify+0xe>
    328a:	bf00      	nop
    328c:	20000810 	.word	0x20000810

00003290 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3292:	4607      	mov	r7, r0
    3294:	460e      	mov	r6, r1
    3296:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3298:	4b0c      	ldr	r3, [pc, #48]	; (32cc <usbdc_request_handler+0x3c>)
    329a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    329c:	b91c      	cbnz	r4, 32a6 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    329e:	2000      	movs	r0, #0
    32a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    32a2:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    32a4:	b16c      	cbz	r4, 32c2 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    32a6:	6863      	ldr	r3, [r4, #4]
    32a8:	2b00      	cmp	r3, #0
    32aa:	d0fa      	beq.n	32a2 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    32ac:	462a      	mov	r2, r5
    32ae:	4631      	mov	r1, r6
    32b0:	4638      	mov	r0, r7
    32b2:	4798      	blx	r3
			if (0 == rc) {
    32b4:	b138      	cbz	r0, 32c6 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    32b6:	f110 0f0a 	cmn.w	r0, #10
    32ba:	d0f2      	beq.n	32a2 <usbdc_request_handler+0x12>
				return -1;
    32bc:	f04f 30ff 	mov.w	r0, #4294967295
}
    32c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    32c2:	2000      	movs	r0, #0
    32c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    32c6:	2001      	movs	r0, #1
    32c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32ca:	bf00      	nop
    32cc:	20000810 	.word	0x20000810

000032d0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    32d0:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    32d2:	4b06      	ldr	r3, [pc, #24]	; (32ec <usbd_sof_cb+0x1c>)
    32d4:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    32d6:	b91c      	cbnz	r4, 32e0 <usbd_sof_cb+0x10>
    32d8:	bd10      	pop	{r4, pc}
		sof = sof->next;
    32da:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    32dc:	2c00      	cmp	r4, #0
    32de:	d0fb      	beq.n	32d8 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    32e0:	6863      	ldr	r3, [r4, #4]
    32e2:	2b00      	cmp	r3, #0
    32e4:	d0f9      	beq.n	32da <usbd_sof_cb+0xa>
			sof->cb();
    32e6:	4798      	blx	r3
    32e8:	e7f7      	b.n	32da <usbd_sof_cb+0xa>
    32ea:	bf00      	nop
    32ec:	20000810 	.word	0x20000810

000032f0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    32f0:	b510      	push	{r4, lr}
    32f2:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    32f4:	b119      	cbz	r1, 32fe <usbdc_cb_ctl_done+0xe>
    32f6:	2901      	cmp	r1, #1
    32f8:	d026      	beq.n	3348 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    32fa:	2000      	movs	r0, #0
    32fc:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    32fe:	7813      	ldrb	r3, [r2, #0]
    3300:	2b00      	cmp	r3, #0
    3302:	d1fa      	bne.n	32fa <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    3304:	7853      	ldrb	r3, [r2, #1]
    3306:	2b05      	cmp	r3, #5
    3308:	d00f      	beq.n	332a <usbdc_cb_ctl_done+0x3a>
    330a:	2b09      	cmp	r3, #9
    330c:	d1f5      	bne.n	32fa <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    330e:	8852      	ldrh	r2, [r2, #2]
    3310:	4b10      	ldr	r3, [pc, #64]	; (3354 <usbdc_cb_ctl_done+0x64>)
    3312:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    3314:	8863      	ldrh	r3, [r4, #2]
    3316:	2b00      	cmp	r3, #0
    3318:	bf14      	ite	ne
    331a:	2104      	movne	r1, #4
    331c:	2103      	moveq	r1, #3
    331e:	4b0d      	ldr	r3, [pc, #52]	; (3354 <usbdc_cb_ctl_done+0x64>)
    3320:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3322:	2001      	movs	r0, #1
    3324:	4b0c      	ldr	r3, [pc, #48]	; (3358 <usbdc_cb_ctl_done+0x68>)
    3326:	4798      	blx	r3
    3328:	e7e7      	b.n	32fa <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    332a:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    332c:	b2c0      	uxtb	r0, r0
    332e:	4b0b      	ldr	r3, [pc, #44]	; (335c <usbdc_cb_ctl_done+0x6c>)
    3330:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    3332:	8863      	ldrh	r3, [r4, #2]
    3334:	2b00      	cmp	r3, #0
    3336:	bf14      	ite	ne
    3338:	2103      	movne	r1, #3
    333a:	2102      	moveq	r1, #2
    333c:	4b05      	ldr	r3, [pc, #20]	; (3354 <usbdc_cb_ctl_done+0x64>)
    333e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3340:	2001      	movs	r0, #1
    3342:	4b05      	ldr	r3, [pc, #20]	; (3358 <usbdc_cb_ctl_done+0x68>)
    3344:	4798      	blx	r3
    3346:	e7d8      	b.n	32fa <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    3348:	2201      	movs	r2, #1
    334a:	4621      	mov	r1, r4
    334c:	2000      	movs	r0, #0
    334e:	4b04      	ldr	r3, [pc, #16]	; (3360 <usbdc_cb_ctl_done+0x70>)
    3350:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    3352:	e7d2      	b.n	32fa <usbdc_cb_ctl_done+0xa>
    3354:	20000810 	.word	0x20000810
    3358:	00003269 	.word	0x00003269
    335c:	000010f5 	.word	0x000010f5
    3360:	00003291 	.word	0x00003291

00003364 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    3364:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    3366:	4b0d      	ldr	r3, [pc, #52]	; (339c <usbdc_reset+0x38>)
    3368:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    336a:	4d0d      	ldr	r5, [pc, #52]	; (33a0 <usbdc_reset+0x3c>)
    336c:	2602      	movs	r6, #2
    336e:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    3370:	2400      	movs	r4, #0
    3372:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    3374:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    3376:	4620      	mov	r0, r4
    3378:	4b0a      	ldr	r3, [pc, #40]	; (33a4 <usbdc_reset+0x40>)
    337a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    337c:	7f28      	ldrb	r0, [r5, #28]
    337e:	4b0a      	ldr	r3, [pc, #40]	; (33a8 <usbdc_reset+0x44>)
    3380:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    3382:	4a0a      	ldr	r2, [pc, #40]	; (33ac <usbdc_reset+0x48>)
    3384:	4621      	mov	r1, r4
    3386:	4620      	mov	r0, r4
    3388:	4d09      	ldr	r5, [pc, #36]	; (33b0 <usbdc_reset+0x4c>)
    338a:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    338c:	4a09      	ldr	r2, [pc, #36]	; (33b4 <usbdc_reset+0x50>)
    338e:	4631      	mov	r1, r6
    3390:	4620      	mov	r0, r4
    3392:	47a8      	blx	r5
	usb_d_ep_enable(0);
    3394:	4620      	mov	r0, r4
    3396:	4b08      	ldr	r3, [pc, #32]	; (33b8 <usbdc_reset+0x54>)
    3398:	4798      	blx	r3
    339a:	bd70      	pop	{r4, r5, r6, pc}
    339c:	00003245 	.word	0x00003245
    33a0:	20000810 	.word	0x20000810
    33a4:	00001169 	.word	0x00001169
    33a8:	00001155 	.word	0x00001155
    33ac:	000033fd 	.word	0x000033fd
    33b0:	00001399 	.word	0x00001399
    33b4:	000032f1 	.word	0x000032f1
    33b8:	00001195 	.word	0x00001195

000033bc <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    33bc:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    33be:	b110      	cbz	r0, 33c6 <usbd_event_cb+0xa>
    33c0:	2801      	cmp	r0, #1
    33c2:	d004      	beq.n	33ce <usbd_event_cb+0x12>
    33c4:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    33c6:	2000      	movs	r0, #0
    33c8:	4b02      	ldr	r3, [pc, #8]	; (33d4 <usbd_event_cb+0x18>)
    33ca:	4798      	blx	r3
		break;
    33cc:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    33ce:	4b02      	ldr	r3, [pc, #8]	; (33d8 <usbd_event_cb+0x1c>)
    33d0:	4798      	blx	r3
    33d2:	bd08      	pop	{r3, pc}
    33d4:	00003269 	.word	0x00003269
    33d8:	00003365 	.word	0x00003365

000033dc <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    33dc:	b500      	push	{lr}
    33de:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    33e0:	9101      	str	r1, [sp, #4]
    33e2:	9202      	str	r2, [sp, #8]
    33e4:	f88d 000c 	strb.w	r0, [sp, #12]
    33e8:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    33ec:	a801      	add	r0, sp, #4
    33ee:	4b02      	ldr	r3, [pc, #8]	; (33f8 <usbdc_xfer+0x1c>)
    33f0:	4798      	blx	r3
}
    33f2:	b005      	add	sp, #20
    33f4:	f85d fb04 	ldr.w	pc, [sp], #4
    33f8:	000011e1 	.word	0x000011e1

000033fc <usbdc_cb_ctl_req>:
{
    33fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3400:	b083      	sub	sp, #12
    3402:	4605      	mov	r5, r0
    3404:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3406:	2200      	movs	r2, #0
    3408:	4b9b      	ldr	r3, [pc, #620]	; (3678 <usbdc_cb_ctl_req+0x27c>)
    340a:	4798      	blx	r3
    340c:	f1b0 3fff 	cmp.w	r0, #4294967295
    3410:	d00b      	beq.n	342a <usbdc_cb_ctl_req+0x2e>
    3412:	2801      	cmp	r0, #1
    3414:	f000 81e3 	beq.w	37de <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    3418:	7823      	ldrb	r3, [r4, #0]
    341a:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    341e:	d008      	beq.n	3432 <usbdc_cb_ctl_req+0x36>
    3420:	2a80      	cmp	r2, #128	; 0x80
    3422:	f000 80f4 	beq.w	360e <usbdc_cb_ctl_req+0x212>
		return false;
    3426:	2000      	movs	r0, #0
    3428:	e000      	b.n	342c <usbdc_cb_ctl_req+0x30>
		return false;
    342a:	2000      	movs	r0, #0
}
    342c:	b003      	add	sp, #12
    342e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    3432:	7862      	ldrb	r2, [r4, #1]
    3434:	3a01      	subs	r2, #1
    3436:	2a0a      	cmp	r2, #10
    3438:	f200 81d3 	bhi.w	37e2 <usbdc_cb_ctl_req+0x3e6>
    343c:	e8df f012 	tbh	[pc, r2, lsl #1]
    3440:	01d10060 	.word	0x01d10060
    3444:	01d10076 	.word	0x01d10076
    3448:	01d1000b 	.word	0x01d1000b
    344c:	01d101d1 	.word	0x01d101d1
    3450:	01d10015 	.word	0x01d10015
    3454:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3456:	2301      	movs	r3, #1
    3458:	2200      	movs	r2, #0
    345a:	4611      	mov	r1, r2
    345c:	4628      	mov	r0, r5
    345e:	4c87      	ldr	r4, [pc, #540]	; (367c <usbdc_cb_ctl_req+0x280>)
    3460:	47a0      	blx	r4
    3462:	fab0 f080 	clz	r0, r0
    3466:	0940      	lsrs	r0, r0, #5
    3468:	e7e0      	b.n	342c <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    346a:	8862      	ldrh	r2, [r4, #2]
    346c:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    346e:	b1ca      	cbz	r2, 34a4 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    3470:	4b83      	ldr	r3, [pc, #524]	; (3680 <usbdc_cb_ctl_req+0x284>)
    3472:	681b      	ldr	r3, [r3, #0]
    3474:	6859      	ldr	r1, [r3, #4]
    3476:	6818      	ldr	r0, [r3, #0]
    3478:	4b82      	ldr	r3, [pc, #520]	; (3684 <usbdc_cb_ctl_req+0x288>)
    347a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    347c:	2800      	cmp	r0, #0
    347e:	f000 81be 	beq.w	37fe <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    3482:	78c2      	ldrb	r2, [r0, #3]
    3484:	7881      	ldrb	r1, [r0, #2]
    3486:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    348a:	fa10 f181 	uxtah	r1, r0, r1
    348e:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3490:	2204      	movs	r2, #4
    3492:	4b7d      	ldr	r3, [pc, #500]	; (3688 <usbdc_cb_ctl_req+0x28c>)
    3494:	4798      	blx	r3
    3496:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    3498:	b130      	cbz	r0, 34a8 <usbdc_cb_ctl_req+0xac>
    349a:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    349c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 3680 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    34a0:	4f79      	ldr	r7, [pc, #484]	; (3688 <usbdc_cb_ctl_req+0x28c>)
    34a2:	e018      	b.n	34d6 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    34a4:	4b79      	ldr	r3, [pc, #484]	; (368c <usbdc_cb_ctl_req+0x290>)
    34a6:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    34a8:	2301      	movs	r3, #1
    34aa:	2200      	movs	r2, #0
    34ac:	4611      	mov	r1, r2
    34ae:	4628      	mov	r0, r5
    34b0:	4c72      	ldr	r4, [pc, #456]	; (367c <usbdc_cb_ctl_req+0x280>)
    34b2:	47a0      	blx	r4
    34b4:	fab0 f080 	clz	r0, r0
    34b8:	0940      	lsrs	r0, r0, #5
    34ba:	e7b7      	b.n	342c <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    34bc:	464c      	mov	r4, r9
    34be:	e000      	b.n	34c2 <usbdc_cb_ctl_req+0xc6>
    34c0:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    34c2:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    34c4:	7803      	ldrb	r3, [r0, #0]
    34c6:	4418      	add	r0, r3
    34c8:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    34ca:	2204      	movs	r2, #4
    34cc:	9901      	ldr	r1, [sp, #4]
    34ce:	47b8      	blx	r7
    34d0:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    34d2:	2800      	cmp	r0, #0
    34d4:	d0e8      	beq.n	34a8 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    34d6:	f890 9002 	ldrb.w	r9, [r0, #2]
    34da:	45a1      	cmp	r9, r4
    34dc:	d0f1      	beq.n	34c2 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    34de:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    34e2:	2c00      	cmp	r4, #0
    34e4:	d0ea      	beq.n	34bc <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    34e6:	2600      	movs	r6, #0
    34e8:	6863      	ldr	r3, [r4, #4]
    34ea:	466a      	mov	r2, sp
    34ec:	4631      	mov	r1, r6
    34ee:	4620      	mov	r0, r4
    34f0:	4798      	blx	r3
    34f2:	2800      	cmp	r0, #0
    34f4:	d0e4      	beq.n	34c0 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    34f6:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    34f8:	2c00      	cmp	r4, #0
    34fa:	d1f5      	bne.n	34e8 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    34fc:	464c      	mov	r4, r9
    34fe:	e7e0      	b.n	34c2 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3500:	f003 031f 	and.w	r3, r3, #31
    3504:	2b02      	cmp	r3, #2
    3506:	f040 816e 	bne.w	37e6 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    350a:	88e3      	ldrh	r3, [r4, #6]
    350c:	b10b      	cbz	r3, 3512 <usbdc_cb_ctl_req+0x116>
			return false;
    350e:	2000      	movs	r0, #0
    3510:	e78c      	b.n	342c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    3512:	88a0      	ldrh	r0, [r4, #4]
    3514:	2100      	movs	r1, #0
    3516:	b2c0      	uxtb	r0, r0
    3518:	4b5d      	ldr	r3, [pc, #372]	; (3690 <usbdc_cb_ctl_req+0x294>)
    351a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    351c:	2301      	movs	r3, #1
    351e:	2200      	movs	r2, #0
    3520:	4611      	mov	r1, r2
    3522:	4628      	mov	r0, r5
    3524:	4c55      	ldr	r4, [pc, #340]	; (367c <usbdc_cb_ctl_req+0x280>)
    3526:	47a0      	blx	r4
		return true;
    3528:	2001      	movs	r0, #1
    352a:	e77f      	b.n	342c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    352c:	f003 031f 	and.w	r3, r3, #31
    3530:	2b02      	cmp	r3, #2
    3532:	f040 815a 	bne.w	37ea <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    3536:	88e3      	ldrh	r3, [r4, #6]
    3538:	b10b      	cbz	r3, 353e <usbdc_cb_ctl_req+0x142>
			return false;
    353a:	2000      	movs	r0, #0
    353c:	e776      	b.n	342c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    353e:	88a0      	ldrh	r0, [r4, #4]
    3540:	2101      	movs	r1, #1
    3542:	b2c0      	uxtb	r0, r0
    3544:	4b52      	ldr	r3, [pc, #328]	; (3690 <usbdc_cb_ctl_req+0x294>)
    3546:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3548:	2301      	movs	r3, #1
    354a:	2200      	movs	r2, #0
    354c:	4611      	mov	r1, r2
    354e:	4628      	mov	r0, r5
    3550:	4c4a      	ldr	r4, [pc, #296]	; (367c <usbdc_cb_ctl_req+0x280>)
    3552:	47a0      	blx	r4
		return true;
    3554:	2001      	movs	r0, #1
    3556:	e769      	b.n	342c <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    3558:	8866      	ldrh	r6, [r4, #2]
    355a:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    355c:	4a48      	ldr	r2, [pc, #288]	; (3680 <usbdc_cb_ctl_req+0x284>)
    355e:	6813      	ldr	r3, [r2, #0]
    3560:	7ed2      	ldrb	r2, [r2, #27]
    3562:	6859      	ldr	r1, [r3, #4]
    3564:	6818      	ldr	r0, [r3, #0]
    3566:	4b47      	ldr	r3, [pc, #284]	; (3684 <usbdc_cb_ctl_req+0x288>)
    3568:	4798      	blx	r3
	if (NULL == ifc) {
    356a:	2800      	cmp	r0, #0
    356c:	d045      	beq.n	35fa <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    356e:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    3570:	78c2      	ldrb	r2, [r0, #3]
    3572:	7881      	ldrb	r1, [r0, #2]
    3574:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3578:	fa10 f181 	uxtah	r1, r0, r1
    357c:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    357e:	2204      	movs	r2, #4
    3580:	4b41      	ldr	r3, [pc, #260]	; (3688 <usbdc_cb_ctl_req+0x28c>)
    3582:	4798      	blx	r3
    3584:	4603      	mov	r3, r0
    3586:	2800      	cmp	r0, #0
    3588:	d039      	beq.n	35fe <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    358a:	2704      	movs	r7, #4
    358c:	4d3e      	ldr	r5, [pc, #248]	; (3688 <usbdc_cb_ctl_req+0x28c>)
    358e:	e008      	b.n	35a2 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    3590:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    3592:	7803      	ldrb	r3, [r0, #0]
    3594:	4418      	add	r0, r3
    3596:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3598:	463a      	mov	r2, r7
    359a:	9901      	ldr	r1, [sp, #4]
    359c:	47a8      	blx	r5
		if (NULL == ifc) {
    359e:	4603      	mov	r3, r0
    35a0:	b378      	cbz	r0, 3602 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    35a2:	789a      	ldrb	r2, [r3, #2]
    35a4:	42a2      	cmp	r2, r4
    35a6:	d1f3      	bne.n	3590 <usbdc_cb_ctl_req+0x194>
    35a8:	78da      	ldrb	r2, [r3, #3]
    35aa:	42b2      	cmp	r2, r6
    35ac:	d1f0      	bne.n	3590 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    35ae:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    35b0:	4b33      	ldr	r3, [pc, #204]	; (3680 <usbdc_cb_ctl_req+0x284>)
    35b2:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    35b4:	b33d      	cbz	r5, 3606 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    35b6:	2701      	movs	r7, #1
    35b8:	686b      	ldr	r3, [r5, #4]
    35ba:	466a      	mov	r2, sp
    35bc:	4639      	mov	r1, r7
    35be:	4628      	mov	r0, r5
    35c0:	4798      	blx	r3
    35c2:	b120      	cbz	r0, 35ce <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    35c4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    35c6:	2d00      	cmp	r5, #0
    35c8:	d1f6      	bne.n	35b8 <usbdc_cb_ctl_req+0x1bc>
	return false;
    35ca:	2000      	movs	r0, #0
    35cc:	e72e      	b.n	342c <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    35ce:	686b      	ldr	r3, [r5, #4]
    35d0:	466a      	mov	r2, sp
    35d2:	2100      	movs	r1, #0
    35d4:	4628      	mov	r0, r5
    35d6:	4798      	blx	r3
    35d8:	b9b8      	cbnz	r0, 360a <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    35da:	b136      	cbz	r6, 35ea <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    35dc:	4a28      	ldr	r2, [pc, #160]	; (3680 <usbdc_cb_ctl_req+0x284>)
    35de:	2301      	movs	r3, #1
    35e0:	fa03 f404 	lsl.w	r4, r3, r4
    35e4:	7f53      	ldrb	r3, [r2, #29]
    35e6:	4323      	orrs	r3, r4
    35e8:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    35ea:	2300      	movs	r3, #0
    35ec:	461a      	mov	r2, r3
    35ee:	4619      	mov	r1, r3
    35f0:	4618      	mov	r0, r3
    35f2:	4c22      	ldr	r4, [pc, #136]	; (367c <usbdc_cb_ctl_req+0x280>)
    35f4:	47a0      	blx	r4
			return true;
    35f6:	2001      	movs	r0, #1
    35f8:	e718      	b.n	342c <usbdc_cb_ctl_req+0x30>
		return false;
    35fa:	2000      	movs	r0, #0
    35fc:	e716      	b.n	342c <usbdc_cb_ctl_req+0x30>
		return false;
    35fe:	2000      	movs	r0, #0
    3600:	e714      	b.n	342c <usbdc_cb_ctl_req+0x30>
			return false;
    3602:	2000      	movs	r0, #0
    3604:	e712      	b.n	342c <usbdc_cb_ctl_req+0x30>
	return false;
    3606:	2000      	movs	r0, #0
    3608:	e710      	b.n	342c <usbdc_cb_ctl_req+0x30>
			return false;
    360a:	2000      	movs	r0, #0
    360c:	e70e      	b.n	342c <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    360e:	7862      	ldrb	r2, [r4, #1]
    3610:	2a0a      	cmp	r2, #10
    3612:	f200 80ec 	bhi.w	37ee <usbdc_cb_ctl_req+0x3f2>
    3616:	e8df f012 	tbh	[pc, r2, lsl #1]
    361a:	008e      	.short	0x008e
    361c:	00ea00ea 	.word	0x00ea00ea
    3620:	00ea00ea 	.word	0x00ea00ea
    3624:	000b00ea 	.word	0x000b00ea
    3628:	008200ea 	.word	0x008200ea
    362c:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    3630:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    3632:	0a13      	lsrs	r3, r2, #8
    3634:	2b02      	cmp	r3, #2
    3636:	d02d      	beq.n	3694 <usbdc_cb_ctl_req+0x298>
    3638:	2b03      	cmp	r3, #3
    363a:	d050      	beq.n	36de <usbdc_cb_ctl_req+0x2e2>
    363c:	2b01      	cmp	r3, #1
    363e:	d001      	beq.n	3644 <usbdc_cb_ctl_req+0x248>
	return false;
    3640:	2000      	movs	r0, #0
    3642:	e6f3      	b.n	342c <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    3644:	88e2      	ldrh	r2, [r4, #6]
    3646:	2a12      	cmp	r2, #18
    3648:	bf28      	it	cs
    364a:	2212      	movcs	r2, #18
    364c:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    364e:	4b0c      	ldr	r3, [pc, #48]	; (3680 <usbdc_cb_ctl_req+0x284>)
    3650:	681b      	ldr	r3, [r3, #0]
    3652:	2201      	movs	r2, #1
    3654:	6859      	ldr	r1, [r3, #4]
    3656:	6818      	ldr	r0, [r3, #0]
    3658:	4b0b      	ldr	r3, [pc, #44]	; (3688 <usbdc_cb_ctl_req+0x28c>)
    365a:	4798      	blx	r3
	if (!dev_desc) {
    365c:	4601      	mov	r1, r0
    365e:	2800      	cmp	r0, #0
    3660:	f000 80c7 	beq.w	37f2 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    3664:	2300      	movs	r3, #0
    3666:	4622      	mov	r2, r4
    3668:	4628      	mov	r0, r5
    366a:	4c04      	ldr	r4, [pc, #16]	; (367c <usbdc_cb_ctl_req+0x280>)
    366c:	47a0      	blx	r4
    366e:	fab0 f080 	clz	r0, r0
    3672:	0940      	lsrs	r0, r0, #5
    3674:	e6da      	b.n	342c <usbdc_cb_ctl_req+0x30>
    3676:	bf00      	nop
    3678:	00003291 	.word	0x00003291
    367c:	000033dd 	.word	0x000033dd
    3680:	20000810 	.word	0x20000810
    3684:	000039a1 	.word	0x000039a1
    3688:	00003921 	.word	0x00003921
    368c:	00003245 	.word	0x00003245
    3690:	00001331 	.word	0x00001331
	uint16_t length   = req->wLength;
    3694:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3696:	4b5b      	ldr	r3, [pc, #364]	; (3804 <usbdc_cb_ctl_req+0x408>)
    3698:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    369a:	681b      	ldr	r3, [r3, #0]
    369c:	3201      	adds	r2, #1
    369e:	b2d2      	uxtb	r2, r2
    36a0:	6859      	ldr	r1, [r3, #4]
    36a2:	6818      	ldr	r0, [r3, #0]
    36a4:	4b58      	ldr	r3, [pc, #352]	; (3808 <usbdc_cb_ctl_req+0x40c>)
    36a6:	4798      	blx	r3
	if (NULL == cfg_desc) {
    36a8:	4601      	mov	r1, r0
    36aa:	2800      	cmp	r0, #0
    36ac:	f000 80a3 	beq.w	37f6 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    36b0:	78c3      	ldrb	r3, [r0, #3]
    36b2:	7882      	ldrb	r2, [r0, #2]
    36b4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    36b8:	b292      	uxth	r2, r2
	if (length <= total_len) {
    36ba:	4294      	cmp	r4, r2
    36bc:	d90d      	bls.n	36da <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    36be:	3e01      	subs	r6, #1
    36c0:	4226      	tst	r6, r4
    36c2:	bf0c      	ite	eq
    36c4:	2301      	moveq	r3, #1
    36c6:	2300      	movne	r3, #0
		length = total_len;
    36c8:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    36ca:	4622      	mov	r2, r4
    36cc:	4628      	mov	r0, r5
    36ce:	4c4f      	ldr	r4, [pc, #316]	; (380c <usbdc_cb_ctl_req+0x410>)
    36d0:	47a0      	blx	r4
    36d2:	fab0 f080 	clz	r0, r0
    36d6:	0940      	lsrs	r0, r0, #5
    36d8:	e6a8      	b.n	342c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    36da:	2300      	movs	r3, #0
    36dc:	e7f5      	b.n	36ca <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    36de:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    36e0:	4b48      	ldr	r3, [pc, #288]	; (3804 <usbdc_cb_ctl_req+0x408>)
    36e2:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    36e4:	681b      	ldr	r3, [r3, #0]
    36e6:	b2d2      	uxtb	r2, r2
    36e8:	6859      	ldr	r1, [r3, #4]
    36ea:	6818      	ldr	r0, [r3, #0]
    36ec:	4b48      	ldr	r3, [pc, #288]	; (3810 <usbdc_cb_ctl_req+0x414>)
    36ee:	4798      	blx	r3
	if (NULL == str_desc) {
    36f0:	4601      	mov	r1, r0
    36f2:	2800      	cmp	r0, #0
    36f4:	f000 8081 	beq.w	37fa <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    36f8:	7802      	ldrb	r2, [r0, #0]
    36fa:	4294      	cmp	r4, r2
    36fc:	d90d      	bls.n	371a <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    36fe:	3e01      	subs	r6, #1
    3700:	4226      	tst	r6, r4
    3702:	bf0c      	ite	eq
    3704:	2301      	moveq	r3, #1
    3706:	2300      	movne	r3, #0
		length = str_desc[0];
    3708:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    370a:	4622      	mov	r2, r4
    370c:	4628      	mov	r0, r5
    370e:	4c3f      	ldr	r4, [pc, #252]	; (380c <usbdc_cb_ctl_req+0x410>)
    3710:	47a0      	blx	r4
    3712:	fab0 f080 	clz	r0, r0
    3716:	0940      	lsrs	r0, r0, #5
    3718:	e688      	b.n	342c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    371a:	2300      	movs	r3, #0
    371c:	e7f5      	b.n	370a <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    371e:	4939      	ldr	r1, [pc, #228]	; (3804 <usbdc_cb_ctl_req+0x408>)
    3720:	694b      	ldr	r3, [r1, #20]
    3722:	7eca      	ldrb	r2, [r1, #27]
    3724:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    3726:	2300      	movs	r3, #0
    3728:	2201      	movs	r2, #1
    372a:	6949      	ldr	r1, [r1, #20]
    372c:	4628      	mov	r0, r5
    372e:	4c37      	ldr	r4, [pc, #220]	; (380c <usbdc_cb_ctl_req+0x410>)
    3730:	47a0      	blx	r4
		return true;
    3732:	2001      	movs	r0, #1
    3734:	e67a      	b.n	342c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3736:	f003 031f 	and.w	r3, r3, #31
    373a:	2b01      	cmp	r3, #1
    373c:	d903      	bls.n	3746 <usbdc_cb_ctl_req+0x34a>
    373e:	2b02      	cmp	r3, #2
    3740:	d010      	beq.n	3764 <usbdc_cb_ctl_req+0x368>
		return false;
    3742:	2000      	movs	r0, #0
    3744:	e672      	b.n	342c <usbdc_cb_ctl_req+0x30>
		st = 0;
    3746:	2300      	movs	r3, #0
    3748:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    374a:	492e      	ldr	r1, [pc, #184]	; (3804 <usbdc_cb_ctl_req+0x408>)
    374c:	694b      	ldr	r3, [r1, #20]
    374e:	f8bd 2000 	ldrh.w	r2, [sp]
    3752:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    3754:	2300      	movs	r3, #0
    3756:	2202      	movs	r2, #2
    3758:	6949      	ldr	r1, [r1, #20]
    375a:	4628      	mov	r0, r5
    375c:	4c2b      	ldr	r4, [pc, #172]	; (380c <usbdc_cb_ctl_req+0x410>)
    375e:	47a0      	blx	r4
	return true;
    3760:	2001      	movs	r0, #1
    3762:	e663      	b.n	342c <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    3764:	88a0      	ldrh	r0, [r4, #4]
    3766:	2102      	movs	r1, #2
    3768:	b2c0      	uxtb	r0, r0
    376a:	4b2a      	ldr	r3, [pc, #168]	; (3814 <usbdc_cb_ctl_req+0x418>)
    376c:	4798      	blx	r3
		if (st < 0) {
    376e:	2800      	cmp	r0, #0
    3770:	db03      	blt.n	377a <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    3772:	f000 0001 	and.w	r0, r0, #1
    3776:	9000      	str	r0, [sp, #0]
    3778:	e7e7      	b.n	374a <usbdc_cb_ctl_req+0x34e>
			return false;
    377a:	2000      	movs	r0, #0
    377c:	e656      	b.n	342c <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    377e:	4b21      	ldr	r3, [pc, #132]	; (3804 <usbdc_cb_ctl_req+0x408>)
    3780:	7f5b      	ldrb	r3, [r3, #29]
    3782:	88a2      	ldrh	r2, [r4, #4]
    3784:	4113      	asrs	r3, r2
    3786:	f013 0f01 	tst.w	r3, #1
    378a:	d012      	beq.n	37b2 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    378c:	4b1d      	ldr	r3, [pc, #116]	; (3804 <usbdc_cb_ctl_req+0x408>)
    378e:	691d      	ldr	r5, [r3, #16]
	return false;
    3790:	2000      	movs	r0, #0
	while (NULL != func) {
    3792:	2d00      	cmp	r5, #0
    3794:	f43f ae4a 	beq.w	342c <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    3798:	2602      	movs	r6, #2
    379a:	686b      	ldr	r3, [r5, #4]
    379c:	4622      	mov	r2, r4
    379e:	4631      	mov	r1, r6
    37a0:	4628      	mov	r0, r5
    37a2:	4798      	blx	r3
    37a4:	2800      	cmp	r0, #0
    37a6:	da0f      	bge.n	37c8 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    37a8:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    37aa:	2d00      	cmp	r5, #0
    37ac:	d1f5      	bne.n	379a <usbdc_cb_ctl_req+0x39e>
	return false;
    37ae:	2000      	movs	r0, #0
    37b0:	e63c      	b.n	342c <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    37b2:	4914      	ldr	r1, [pc, #80]	; (3804 <usbdc_cb_ctl_req+0x408>)
    37b4:	694b      	ldr	r3, [r1, #20]
    37b6:	2000      	movs	r0, #0
    37b8:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    37ba:	4603      	mov	r3, r0
    37bc:	2201      	movs	r2, #1
    37be:	6949      	ldr	r1, [r1, #20]
    37c0:	4c12      	ldr	r4, [pc, #72]	; (380c <usbdc_cb_ctl_req+0x410>)
    37c2:	47a0      	blx	r4
		return true;
    37c4:	2001      	movs	r0, #1
    37c6:	e631      	b.n	342c <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    37c8:	490e      	ldr	r1, [pc, #56]	; (3804 <usbdc_cb_ctl_req+0x408>)
    37ca:	694b      	ldr	r3, [r1, #20]
    37cc:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    37ce:	2300      	movs	r3, #0
    37d0:	2201      	movs	r2, #1
    37d2:	6949      	ldr	r1, [r1, #20]
    37d4:	4618      	mov	r0, r3
    37d6:	4c0d      	ldr	r4, [pc, #52]	; (380c <usbdc_cb_ctl_req+0x410>)
    37d8:	47a0      	blx	r4
			return true;
    37da:	2001      	movs	r0, #1
    37dc:	e626      	b.n	342c <usbdc_cb_ctl_req+0x30>
		return true;
    37de:	2001      	movs	r0, #1
    37e0:	e624      	b.n	342c <usbdc_cb_ctl_req+0x30>
		return false;
    37e2:	2000      	movs	r0, #0
    37e4:	e622      	b.n	342c <usbdc_cb_ctl_req+0x30>
		return false;
    37e6:	2000      	movs	r0, #0
    37e8:	e620      	b.n	342c <usbdc_cb_ctl_req+0x30>
		return false;
    37ea:	2000      	movs	r0, #0
    37ec:	e61e      	b.n	342c <usbdc_cb_ctl_req+0x30>
		return false;
    37ee:	2000      	movs	r0, #0
    37f0:	e61c      	b.n	342c <usbdc_cb_ctl_req+0x30>
		return false;
    37f2:	2000      	movs	r0, #0
    37f4:	e61a      	b.n	342c <usbdc_cb_ctl_req+0x30>
		return false;
    37f6:	2000      	movs	r0, #0
    37f8:	e618      	b.n	342c <usbdc_cb_ctl_req+0x30>
		return false;
    37fa:	2000      	movs	r0, #0
    37fc:	e616      	b.n	342c <usbdc_cb_ctl_req+0x30>
			return false;
    37fe:	2000      	movs	r0, #0
    3800:	e614      	b.n	342c <usbdc_cb_ctl_req+0x30>
    3802:	bf00      	nop
    3804:	20000810 	.word	0x20000810
    3808:	000039a1 	.word	0x000039a1
    380c:	000033dd 	.word	0x000033dd
    3810:	00003a09 	.word	0x00003a09
    3814:	00001331 	.word	0x00001331

00003818 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    3818:	b508      	push	{r3, lr}
	switch (type) {
    381a:	2801      	cmp	r0, #1
    381c:	d007      	beq.n	382e <usbdc_register_handler+0x16>
    381e:	b110      	cbz	r0, 3826 <usbdc_register_handler+0xe>
    3820:	2802      	cmp	r0, #2
    3822:	d008      	beq.n	3836 <usbdc_register_handler+0x1e>
    3824:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    3826:	4806      	ldr	r0, [pc, #24]	; (3840 <usbdc_register_handler+0x28>)
    3828:	4b06      	ldr	r3, [pc, #24]	; (3844 <usbdc_register_handler+0x2c>)
    382a:	4798      	blx	r3
		break;
    382c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    382e:	4806      	ldr	r0, [pc, #24]	; (3848 <usbdc_register_handler+0x30>)
    3830:	4b04      	ldr	r3, [pc, #16]	; (3844 <usbdc_register_handler+0x2c>)
    3832:	4798      	blx	r3
		break;
    3834:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    3836:	4805      	ldr	r0, [pc, #20]	; (384c <usbdc_register_handler+0x34>)
    3838:	4b02      	ldr	r3, [pc, #8]	; (3844 <usbdc_register_handler+0x2c>)
    383a:	4798      	blx	r3
    383c:	bd08      	pop	{r3, pc}
    383e:	bf00      	nop
    3840:	20000814 	.word	0x20000814
    3844:	00001441 	.word	0x00001441
    3848:	20000818 	.word	0x20000818
    384c:	2000081c 	.word	0x2000081c

00003850 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    3850:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    3852:	4605      	mov	r5, r0
    3854:	f240 3255 	movw	r2, #853	; 0x355
    3858:	490c      	ldr	r1, [pc, #48]	; (388c <usbdc_init+0x3c>)
    385a:	3000      	adds	r0, #0
    385c:	bf18      	it	ne
    385e:	2001      	movne	r0, #1
    3860:	4b0b      	ldr	r3, [pc, #44]	; (3890 <usbdc_init+0x40>)
    3862:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    3864:	4b0b      	ldr	r3, [pc, #44]	; (3894 <usbdc_init+0x44>)
    3866:	4798      	blx	r3
	if (rc < 0) {
    3868:	2800      	cmp	r0, #0
    386a:	db0e      	blt.n	388a <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    386c:	4c0a      	ldr	r4, [pc, #40]	; (3898 <usbdc_init+0x48>)
    386e:	2220      	movs	r2, #32
    3870:	2100      	movs	r1, #0
    3872:	4620      	mov	r0, r4
    3874:	4b09      	ldr	r3, [pc, #36]	; (389c <usbdc_init+0x4c>)
    3876:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    3878:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    387a:	4909      	ldr	r1, [pc, #36]	; (38a0 <usbdc_init+0x50>)
    387c:	2000      	movs	r0, #0
    387e:	4c09      	ldr	r4, [pc, #36]	; (38a4 <usbdc_init+0x54>)
    3880:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    3882:	4909      	ldr	r1, [pc, #36]	; (38a8 <usbdc_init+0x58>)
    3884:	2001      	movs	r0, #1
    3886:	47a0      	blx	r4

	return 0;
    3888:	2000      	movs	r0, #0
}
    388a:	bd38      	pop	{r3, r4, r5, pc}
    388c:	00004000 	.word	0x00004000
    3890:	000013e5 	.word	0x000013e5
    3894:	00001069 	.word	0x00001069
    3898:	20000810 	.word	0x20000810
    389c:	00003c11 	.word	0x00003c11
    38a0:	000032d1 	.word	0x000032d1
    38a4:	000010d1 	.word	0x000010d1
    38a8:	000033bd 	.word	0x000033bd

000038ac <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    38ac:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    38ae:	4601      	mov	r1, r0
    38b0:	4801      	ldr	r0, [pc, #4]	; (38b8 <usbdc_register_function+0xc>)
    38b2:	4b02      	ldr	r3, [pc, #8]	; (38bc <usbdc_register_function+0x10>)
    38b4:	4798      	blx	r3
    38b6:	bd08      	pop	{r3, pc}
    38b8:	20000820 	.word	0x20000820
    38bc:	00001441 	.word	0x00001441

000038c0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    38c0:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    38c2:	4b0a      	ldr	r3, [pc, #40]	; (38ec <usbdc_start+0x2c>)
    38c4:	7e9b      	ldrb	r3, [r3, #26]
    38c6:	b95b      	cbnz	r3, 38e0 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    38c8:	b168      	cbz	r0, 38e6 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    38ca:	4b08      	ldr	r3, [pc, #32]	; (38ec <usbdc_start+0x2c>)
    38cc:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    38ce:	6802      	ldr	r2, [r0, #0]
    38d0:	79d2      	ldrb	r2, [r2, #7]
    38d2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    38d4:	2201      	movs	r2, #1
    38d6:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    38d8:	4b05      	ldr	r3, [pc, #20]	; (38f0 <usbdc_start+0x30>)
    38da:	4798      	blx	r3
	return ERR_NONE;
    38dc:	2000      	movs	r0, #0
    38de:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    38e0:	f06f 0003 	mvn.w	r0, #3
    38e4:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    38e6:	f06f 0008 	mvn.w	r0, #8
}
    38ea:	bd08      	pop	{r3, pc}
    38ec:	20000810 	.word	0x20000810
    38f0:	000010dd 	.word	0x000010dd

000038f4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    38f4:	b508      	push	{r3, lr}
	usb_d_attach();
    38f6:	4b01      	ldr	r3, [pc, #4]	; (38fc <usbdc_attach+0x8>)
    38f8:	4798      	blx	r3
    38fa:	bd08      	pop	{r3, pc}
    38fc:	000010e9 	.word	0x000010e9

00003900 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    3900:	4b01      	ldr	r3, [pc, #4]	; (3908 <usbdc_get_ctrl_buffer+0x8>)
    3902:	6958      	ldr	r0, [r3, #20]
    3904:	4770      	bx	lr
    3906:	bf00      	nop
    3908:	20000810 	.word	0x20000810

0000390c <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    390c:	4b03      	ldr	r3, [pc, #12]	; (391c <usbdc_get_state+0x10>)
    390e:	7e98      	ldrb	r0, [r3, #26]
    3910:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    3914:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    3916:	bf18      	it	ne
    3918:	2010      	movne	r0, #16
    391a:	4770      	bx	lr
    391c:	20000810 	.word	0x20000810

00003920 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3920:	4288      	cmp	r0, r1
    3922:	d214      	bcs.n	394e <usb_find_desc+0x2e>
	return desc[0];
    3924:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3926:	2b01      	cmp	r3, #1
    3928:	d913      	bls.n	3952 <usb_find_desc+0x32>
{
    392a:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    392c:	7844      	ldrb	r4, [r0, #1]
    392e:	4294      	cmp	r4, r2
    3930:	d00a      	beq.n	3948 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    3932:	4418      	add	r0, r3
	while (desc < eof) {
    3934:	4281      	cmp	r1, r0
    3936:	d906      	bls.n	3946 <usb_find_desc+0x26>
	return desc[0];
    3938:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    393a:	2b01      	cmp	r3, #1
    393c:	d90b      	bls.n	3956 <usb_find_desc+0x36>
	return desc[1];
    393e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    3940:	4294      	cmp	r4, r2
    3942:	d1f6      	bne.n	3932 <usb_find_desc+0x12>
    3944:	e000      	b.n	3948 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3946:	2000      	movs	r0, #0
}
    3948:	f85d 4b04 	ldr.w	r4, [sp], #4
    394c:	4770      	bx	lr
	return NULL;
    394e:	2000      	movs	r0, #0
    3950:	4770      	bx	lr
		_desc_len_check();
    3952:	2000      	movs	r0, #0
    3954:	4770      	bx	lr
    3956:	2000      	movs	r0, #0
    3958:	e7f6      	b.n	3948 <usb_find_desc+0x28>

0000395a <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    395a:	4288      	cmp	r0, r1
    395c:	d216      	bcs.n	398c <usb_find_ep_desc+0x32>
	return desc[0];
    395e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3960:	2b01      	cmp	r3, #1
    3962:	d915      	bls.n	3990 <usb_find_ep_desc+0x36>
	return desc[1];
    3964:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3966:	2a04      	cmp	r2, #4
    3968:	d014      	beq.n	3994 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    396a:	2a05      	cmp	r2, #5
    396c:	d00b      	beq.n	3986 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    396e:	4418      	add	r0, r3
	while (desc < eof) {
    3970:	4281      	cmp	r1, r0
    3972:	d909      	bls.n	3988 <usb_find_ep_desc+0x2e>
	return desc[0];
    3974:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3976:	2b01      	cmp	r3, #1
    3978:	d90e      	bls.n	3998 <usb_find_ep_desc+0x3e>
	return desc[1];
    397a:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    397c:	2a04      	cmp	r2, #4
    397e:	d00d      	beq.n	399c <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3980:	2a05      	cmp	r2, #5
    3982:	d1f4      	bne.n	396e <usb_find_ep_desc+0x14>
    3984:	e00b      	b.n	399e <usb_find_ep_desc+0x44>
    3986:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3988:	2000      	movs	r0, #0
    398a:	4770      	bx	lr
    398c:	2000      	movs	r0, #0
    398e:	4770      	bx	lr
		_desc_len_check();
    3990:	2000      	movs	r0, #0
    3992:	4770      	bx	lr
	return NULL;
    3994:	2000      	movs	r0, #0
    3996:	4770      	bx	lr
		_desc_len_check();
    3998:	2000      	movs	r0, #0
    399a:	4770      	bx	lr
	return NULL;
    399c:	2000      	movs	r0, #0
}
    399e:	4770      	bx	lr

000039a0 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    39a0:	b538      	push	{r3, r4, r5, lr}
    39a2:	460c      	mov	r4, r1
    39a4:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    39a6:	2202      	movs	r2, #2
    39a8:	4b16      	ldr	r3, [pc, #88]	; (3a04 <usb_find_cfg_desc+0x64>)
    39aa:	4798      	blx	r3
	if (!desc) {
    39ac:	4603      	mov	r3, r0
    39ae:	b1e8      	cbz	r0, 39ec <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    39b0:	4284      	cmp	r4, r0
    39b2:	d91d      	bls.n	39f0 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    39b4:	7802      	ldrb	r2, [r0, #0]
    39b6:	2a01      	cmp	r2, #1
    39b8:	d91c      	bls.n	39f4 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    39ba:	7842      	ldrb	r2, [r0, #1]
    39bc:	2a02      	cmp	r2, #2
    39be:	d11b      	bne.n	39f8 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    39c0:	7942      	ldrb	r2, [r0, #5]
    39c2:	42aa      	cmp	r2, r5
    39c4:	d012      	beq.n	39ec <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    39c6:	78d9      	ldrb	r1, [r3, #3]
    39c8:	789a      	ldrb	r2, [r3, #2]
    39ca:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    39ce:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    39d2:	429c      	cmp	r4, r3
    39d4:	d909      	bls.n	39ea <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    39d6:	781a      	ldrb	r2, [r3, #0]
    39d8:	2a01      	cmp	r2, #1
    39da:	d90f      	bls.n	39fc <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    39dc:	785a      	ldrb	r2, [r3, #1]
    39de:	2a02      	cmp	r2, #2
    39e0:	d10e      	bne.n	3a00 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    39e2:	795a      	ldrb	r2, [r3, #5]
    39e4:	42aa      	cmp	r2, r5
    39e6:	d1ee      	bne.n	39c6 <usb_find_cfg_desc+0x26>
    39e8:	e000      	b.n	39ec <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    39ea:	2300      	movs	r3, #0
}
    39ec:	4618      	mov	r0, r3
    39ee:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    39f0:	2300      	movs	r3, #0
    39f2:	e7fb      	b.n	39ec <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    39f4:	2300      	movs	r3, #0
    39f6:	e7f9      	b.n	39ec <usb_find_cfg_desc+0x4c>
	return NULL;
    39f8:	2300      	movs	r3, #0
    39fa:	e7f7      	b.n	39ec <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    39fc:	2300      	movs	r3, #0
    39fe:	e7f5      	b.n	39ec <usb_find_cfg_desc+0x4c>
	return NULL;
    3a00:	2300      	movs	r3, #0
    3a02:	e7f3      	b.n	39ec <usb_find_cfg_desc+0x4c>
    3a04:	00003921 	.word	0x00003921

00003a08 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    3a08:	4288      	cmp	r0, r1
    3a0a:	d217      	bcs.n	3a3c <usb_find_str_desc+0x34>
{
    3a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a10:	460d      	mov	r5, r1
    3a12:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    3a14:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    3a16:	f04f 0803 	mov.w	r8, #3
    3a1a:	4f0c      	ldr	r7, [pc, #48]	; (3a4c <usb_find_str_desc+0x44>)
    3a1c:	4642      	mov	r2, r8
    3a1e:	4629      	mov	r1, r5
    3a20:	47b8      	blx	r7
		if (desc) {
    3a22:	4603      	mov	r3, r0
    3a24:	b170      	cbz	r0, 3a44 <usb_find_str_desc+0x3c>
	return desc[0];
    3a26:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    3a28:	2801      	cmp	r0, #1
    3a2a:	d90a      	bls.n	3a42 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    3a2c:	42a6      	cmp	r6, r4
    3a2e:	d009      	beq.n	3a44 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    3a30:	4418      	add	r0, r3
    3a32:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    3a34:	4285      	cmp	r5, r0
    3a36:	d8f1      	bhi.n	3a1c <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    3a38:	2300      	movs	r3, #0
    3a3a:	e003      	b.n	3a44 <usb_find_str_desc+0x3c>
    3a3c:	2300      	movs	r3, #0
}
    3a3e:	4618      	mov	r0, r3
    3a40:	4770      	bx	lr
			_desc_len_check();
    3a42:	2300      	movs	r3, #0
}
    3a44:	4618      	mov	r0, r3
    3a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a4a:	bf00      	nop
    3a4c:	00003921 	.word	0x00003921

00003a50 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    3a50:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    3a52:	4805      	ldr	r0, [pc, #20]	; (3a68 <cdc_device_acm_init+0x18>)
    3a54:	4b05      	ldr	r3, [pc, #20]	; (3a6c <cdc_device_acm_init+0x1c>)
    3a56:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    3a58:	4b05      	ldr	r3, [pc, #20]	; (3a70 <cdc_device_acm_init+0x20>)
    3a5a:	4798      	blx	r3

	usbdc_start(single_desc);
    3a5c:	4805      	ldr	r0, [pc, #20]	; (3a74 <cdc_device_acm_init+0x24>)
    3a5e:	4b06      	ldr	r3, [pc, #24]	; (3a78 <cdc_device_acm_init+0x28>)
    3a60:	4798      	blx	r3
	usbdc_attach();
    3a62:	4b06      	ldr	r3, [pc, #24]	; (3a7c <cdc_device_acm_init+0x2c>)
    3a64:	4798      	blx	r3
    3a66:	bd08      	pop	{r3, pc}
    3a68:	20000870 	.word	0x20000870
    3a6c:	00003851 	.word	0x00003851
    3a70:	00003199 	.word	0x00003199
    3a74:	20000048 	.word	0x20000048
    3a78:	000038c1 	.word	0x000038c1
    3a7c:	000038f5 	.word	0x000038f5

00003a80 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    3a80:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    3a82:	4b01      	ldr	r3, [pc, #4]	; (3a88 <usb_init+0x8>)
    3a84:	4798      	blx	r3
    3a86:	bd08      	pop	{r3, pc}
    3a88:	00003a51 	.word	0x00003a51

00003a8c <__libc_init_array>:
    3a8c:	b570      	push	{r4, r5, r6, lr}
    3a8e:	4e0f      	ldr	r6, [pc, #60]	; (3acc <__libc_init_array+0x40>)
    3a90:	4d0f      	ldr	r5, [pc, #60]	; (3ad0 <__libc_init_array+0x44>)
    3a92:	1b76      	subs	r6, r6, r5
    3a94:	10b6      	asrs	r6, r6, #2
    3a96:	bf18      	it	ne
    3a98:	2400      	movne	r4, #0
    3a9a:	d005      	beq.n	3aa8 <__libc_init_array+0x1c>
    3a9c:	3401      	adds	r4, #1
    3a9e:	f855 3b04 	ldr.w	r3, [r5], #4
    3aa2:	4798      	blx	r3
    3aa4:	42a6      	cmp	r6, r4
    3aa6:	d1f9      	bne.n	3a9c <__libc_init_array+0x10>
    3aa8:	4e0a      	ldr	r6, [pc, #40]	; (3ad4 <__libc_init_array+0x48>)
    3aaa:	4d0b      	ldr	r5, [pc, #44]	; (3ad8 <__libc_init_array+0x4c>)
    3aac:	1b76      	subs	r6, r6, r5
    3aae:	f000 fab5 	bl	401c <_init>
    3ab2:	10b6      	asrs	r6, r6, #2
    3ab4:	bf18      	it	ne
    3ab6:	2400      	movne	r4, #0
    3ab8:	d006      	beq.n	3ac8 <__libc_init_array+0x3c>
    3aba:	3401      	adds	r4, #1
    3abc:	f855 3b04 	ldr.w	r3, [r5], #4
    3ac0:	4798      	blx	r3
    3ac2:	42a6      	cmp	r6, r4
    3ac4:	d1f9      	bne.n	3aba <__libc_init_array+0x2e>
    3ac6:	bd70      	pop	{r4, r5, r6, pc}
    3ac8:	bd70      	pop	{r4, r5, r6, pc}
    3aca:	bf00      	nop
    3acc:	00004028 	.word	0x00004028
    3ad0:	00004028 	.word	0x00004028
    3ad4:	00004030 	.word	0x00004030
    3ad8:	00004028 	.word	0x00004028

00003adc <memcpy>:
    3adc:	4684      	mov	ip, r0
    3ade:	ea41 0300 	orr.w	r3, r1, r0
    3ae2:	f013 0303 	ands.w	r3, r3, #3
    3ae6:	d16d      	bne.n	3bc4 <memcpy+0xe8>
    3ae8:	3a40      	subs	r2, #64	; 0x40
    3aea:	d341      	bcc.n	3b70 <memcpy+0x94>
    3aec:	f851 3b04 	ldr.w	r3, [r1], #4
    3af0:	f840 3b04 	str.w	r3, [r0], #4
    3af4:	f851 3b04 	ldr.w	r3, [r1], #4
    3af8:	f840 3b04 	str.w	r3, [r0], #4
    3afc:	f851 3b04 	ldr.w	r3, [r1], #4
    3b00:	f840 3b04 	str.w	r3, [r0], #4
    3b04:	f851 3b04 	ldr.w	r3, [r1], #4
    3b08:	f840 3b04 	str.w	r3, [r0], #4
    3b0c:	f851 3b04 	ldr.w	r3, [r1], #4
    3b10:	f840 3b04 	str.w	r3, [r0], #4
    3b14:	f851 3b04 	ldr.w	r3, [r1], #4
    3b18:	f840 3b04 	str.w	r3, [r0], #4
    3b1c:	f851 3b04 	ldr.w	r3, [r1], #4
    3b20:	f840 3b04 	str.w	r3, [r0], #4
    3b24:	f851 3b04 	ldr.w	r3, [r1], #4
    3b28:	f840 3b04 	str.w	r3, [r0], #4
    3b2c:	f851 3b04 	ldr.w	r3, [r1], #4
    3b30:	f840 3b04 	str.w	r3, [r0], #4
    3b34:	f851 3b04 	ldr.w	r3, [r1], #4
    3b38:	f840 3b04 	str.w	r3, [r0], #4
    3b3c:	f851 3b04 	ldr.w	r3, [r1], #4
    3b40:	f840 3b04 	str.w	r3, [r0], #4
    3b44:	f851 3b04 	ldr.w	r3, [r1], #4
    3b48:	f840 3b04 	str.w	r3, [r0], #4
    3b4c:	f851 3b04 	ldr.w	r3, [r1], #4
    3b50:	f840 3b04 	str.w	r3, [r0], #4
    3b54:	f851 3b04 	ldr.w	r3, [r1], #4
    3b58:	f840 3b04 	str.w	r3, [r0], #4
    3b5c:	f851 3b04 	ldr.w	r3, [r1], #4
    3b60:	f840 3b04 	str.w	r3, [r0], #4
    3b64:	f851 3b04 	ldr.w	r3, [r1], #4
    3b68:	f840 3b04 	str.w	r3, [r0], #4
    3b6c:	3a40      	subs	r2, #64	; 0x40
    3b6e:	d2bd      	bcs.n	3aec <memcpy+0x10>
    3b70:	3230      	adds	r2, #48	; 0x30
    3b72:	d311      	bcc.n	3b98 <memcpy+0xbc>
    3b74:	f851 3b04 	ldr.w	r3, [r1], #4
    3b78:	f840 3b04 	str.w	r3, [r0], #4
    3b7c:	f851 3b04 	ldr.w	r3, [r1], #4
    3b80:	f840 3b04 	str.w	r3, [r0], #4
    3b84:	f851 3b04 	ldr.w	r3, [r1], #4
    3b88:	f840 3b04 	str.w	r3, [r0], #4
    3b8c:	f851 3b04 	ldr.w	r3, [r1], #4
    3b90:	f840 3b04 	str.w	r3, [r0], #4
    3b94:	3a10      	subs	r2, #16
    3b96:	d2ed      	bcs.n	3b74 <memcpy+0x98>
    3b98:	320c      	adds	r2, #12
    3b9a:	d305      	bcc.n	3ba8 <memcpy+0xcc>
    3b9c:	f851 3b04 	ldr.w	r3, [r1], #4
    3ba0:	f840 3b04 	str.w	r3, [r0], #4
    3ba4:	3a04      	subs	r2, #4
    3ba6:	d2f9      	bcs.n	3b9c <memcpy+0xc0>
    3ba8:	3204      	adds	r2, #4
    3baa:	d008      	beq.n	3bbe <memcpy+0xe2>
    3bac:	07d2      	lsls	r2, r2, #31
    3bae:	bf1c      	itt	ne
    3bb0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3bb4:	f800 3b01 	strbne.w	r3, [r0], #1
    3bb8:	d301      	bcc.n	3bbe <memcpy+0xe2>
    3bba:	880b      	ldrh	r3, [r1, #0]
    3bbc:	8003      	strh	r3, [r0, #0]
    3bbe:	4660      	mov	r0, ip
    3bc0:	4770      	bx	lr
    3bc2:	bf00      	nop
    3bc4:	2a08      	cmp	r2, #8
    3bc6:	d313      	bcc.n	3bf0 <memcpy+0x114>
    3bc8:	078b      	lsls	r3, r1, #30
    3bca:	d08d      	beq.n	3ae8 <memcpy+0xc>
    3bcc:	f010 0303 	ands.w	r3, r0, #3
    3bd0:	d08a      	beq.n	3ae8 <memcpy+0xc>
    3bd2:	f1c3 0304 	rsb	r3, r3, #4
    3bd6:	1ad2      	subs	r2, r2, r3
    3bd8:	07db      	lsls	r3, r3, #31
    3bda:	bf1c      	itt	ne
    3bdc:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3be0:	f800 3b01 	strbne.w	r3, [r0], #1
    3be4:	d380      	bcc.n	3ae8 <memcpy+0xc>
    3be6:	f831 3b02 	ldrh.w	r3, [r1], #2
    3bea:	f820 3b02 	strh.w	r3, [r0], #2
    3bee:	e77b      	b.n	3ae8 <memcpy+0xc>
    3bf0:	3a04      	subs	r2, #4
    3bf2:	d3d9      	bcc.n	3ba8 <memcpy+0xcc>
    3bf4:	3a01      	subs	r2, #1
    3bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
    3bfa:	f800 3b01 	strb.w	r3, [r0], #1
    3bfe:	d2f9      	bcs.n	3bf4 <memcpy+0x118>
    3c00:	780b      	ldrb	r3, [r1, #0]
    3c02:	7003      	strb	r3, [r0, #0]
    3c04:	784b      	ldrb	r3, [r1, #1]
    3c06:	7043      	strb	r3, [r0, #1]
    3c08:	788b      	ldrb	r3, [r1, #2]
    3c0a:	7083      	strb	r3, [r0, #2]
    3c0c:	4660      	mov	r0, ip
    3c0e:	4770      	bx	lr

00003c10 <memset>:
    3c10:	b470      	push	{r4, r5, r6}
    3c12:	0786      	lsls	r6, r0, #30
    3c14:	d046      	beq.n	3ca4 <memset+0x94>
    3c16:	1e54      	subs	r4, r2, #1
    3c18:	2a00      	cmp	r2, #0
    3c1a:	d041      	beq.n	3ca0 <memset+0x90>
    3c1c:	b2ca      	uxtb	r2, r1
    3c1e:	4603      	mov	r3, r0
    3c20:	e002      	b.n	3c28 <memset+0x18>
    3c22:	f114 34ff 	adds.w	r4, r4, #4294967295
    3c26:	d33b      	bcc.n	3ca0 <memset+0x90>
    3c28:	f803 2b01 	strb.w	r2, [r3], #1
    3c2c:	079d      	lsls	r5, r3, #30
    3c2e:	d1f8      	bne.n	3c22 <memset+0x12>
    3c30:	2c03      	cmp	r4, #3
    3c32:	d92e      	bls.n	3c92 <memset+0x82>
    3c34:	b2cd      	uxtb	r5, r1
    3c36:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    3c3a:	2c0f      	cmp	r4, #15
    3c3c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    3c40:	d919      	bls.n	3c76 <memset+0x66>
    3c42:	f103 0210 	add.w	r2, r3, #16
    3c46:	4626      	mov	r6, r4
    3c48:	3e10      	subs	r6, #16
    3c4a:	2e0f      	cmp	r6, #15
    3c4c:	f842 5c10 	str.w	r5, [r2, #-16]
    3c50:	f842 5c0c 	str.w	r5, [r2, #-12]
    3c54:	f842 5c08 	str.w	r5, [r2, #-8]
    3c58:	f842 5c04 	str.w	r5, [r2, #-4]
    3c5c:	f102 0210 	add.w	r2, r2, #16
    3c60:	d8f2      	bhi.n	3c48 <memset+0x38>
    3c62:	f1a4 0210 	sub.w	r2, r4, #16
    3c66:	f022 020f 	bic.w	r2, r2, #15
    3c6a:	f004 040f 	and.w	r4, r4, #15
    3c6e:	3210      	adds	r2, #16
    3c70:	2c03      	cmp	r4, #3
    3c72:	4413      	add	r3, r2
    3c74:	d90d      	bls.n	3c92 <memset+0x82>
    3c76:	461e      	mov	r6, r3
    3c78:	4622      	mov	r2, r4
    3c7a:	3a04      	subs	r2, #4
    3c7c:	2a03      	cmp	r2, #3
    3c7e:	f846 5b04 	str.w	r5, [r6], #4
    3c82:	d8fa      	bhi.n	3c7a <memset+0x6a>
    3c84:	1f22      	subs	r2, r4, #4
    3c86:	f022 0203 	bic.w	r2, r2, #3
    3c8a:	3204      	adds	r2, #4
    3c8c:	4413      	add	r3, r2
    3c8e:	f004 0403 	and.w	r4, r4, #3
    3c92:	b12c      	cbz	r4, 3ca0 <memset+0x90>
    3c94:	b2c9      	uxtb	r1, r1
    3c96:	441c      	add	r4, r3
    3c98:	f803 1b01 	strb.w	r1, [r3], #1
    3c9c:	429c      	cmp	r4, r3
    3c9e:	d1fb      	bne.n	3c98 <memset+0x88>
    3ca0:	bc70      	pop	{r4, r5, r6}
    3ca2:	4770      	bx	lr
    3ca4:	4614      	mov	r4, r2
    3ca6:	4603      	mov	r3, r0
    3ca8:	e7c2      	b.n	3c30 <memset+0x20>
    3caa:	bf00      	nop

00003cac <register_fini>:
    3cac:	4b02      	ldr	r3, [pc, #8]	; (3cb8 <register_fini+0xc>)
    3cae:	b113      	cbz	r3, 3cb6 <register_fini+0xa>
    3cb0:	4802      	ldr	r0, [pc, #8]	; (3cbc <register_fini+0x10>)
    3cb2:	f000 b805 	b.w	3cc0 <atexit>
    3cb6:	4770      	bx	lr
    3cb8:	00000000 	.word	0x00000000
    3cbc:	00003ccd 	.word	0x00003ccd

00003cc0 <atexit>:
    3cc0:	2300      	movs	r3, #0
    3cc2:	4601      	mov	r1, r0
    3cc4:	461a      	mov	r2, r3
    3cc6:	4618      	mov	r0, r3
    3cc8:	f000 b81e 	b.w	3d08 <__register_exitproc>

00003ccc <__libc_fini_array>:
    3ccc:	b538      	push	{r3, r4, r5, lr}
    3cce:	4c0a      	ldr	r4, [pc, #40]	; (3cf8 <__libc_fini_array+0x2c>)
    3cd0:	4d0a      	ldr	r5, [pc, #40]	; (3cfc <__libc_fini_array+0x30>)
    3cd2:	1b64      	subs	r4, r4, r5
    3cd4:	10a4      	asrs	r4, r4, #2
    3cd6:	d00a      	beq.n	3cee <__libc_fini_array+0x22>
    3cd8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    3cdc:	3b01      	subs	r3, #1
    3cde:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3ce2:	3c01      	subs	r4, #1
    3ce4:	f855 3904 	ldr.w	r3, [r5], #-4
    3ce8:	4798      	blx	r3
    3cea:	2c00      	cmp	r4, #0
    3cec:	d1f9      	bne.n	3ce2 <__libc_fini_array+0x16>
    3cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3cf2:	f000 b99d 	b.w	4030 <_fini>
    3cf6:	bf00      	nop
    3cf8:	00004040 	.word	0x00004040
    3cfc:	0000403c 	.word	0x0000403c

00003d00 <__retarget_lock_acquire_recursive>:
    3d00:	4770      	bx	lr
    3d02:	bf00      	nop

00003d04 <__retarget_lock_release_recursive>:
    3d04:	4770      	bx	lr
    3d06:	bf00      	nop

00003d08 <__register_exitproc>:
    3d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3d0c:	4d2c      	ldr	r5, [pc, #176]	; (3dc0 <__register_exitproc+0xb8>)
    3d0e:	4606      	mov	r6, r0
    3d10:	6828      	ldr	r0, [r5, #0]
    3d12:	4698      	mov	r8, r3
    3d14:	460f      	mov	r7, r1
    3d16:	4691      	mov	r9, r2
    3d18:	f7ff fff2 	bl	3d00 <__retarget_lock_acquire_recursive>
    3d1c:	4b29      	ldr	r3, [pc, #164]	; (3dc4 <__register_exitproc+0xbc>)
    3d1e:	681c      	ldr	r4, [r3, #0]
    3d20:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    3d24:	2b00      	cmp	r3, #0
    3d26:	d03e      	beq.n	3da6 <__register_exitproc+0x9e>
    3d28:	685a      	ldr	r2, [r3, #4]
    3d2a:	2a1f      	cmp	r2, #31
    3d2c:	dc1c      	bgt.n	3d68 <__register_exitproc+0x60>
    3d2e:	f102 0e01 	add.w	lr, r2, #1
    3d32:	b176      	cbz	r6, 3d52 <__register_exitproc+0x4a>
    3d34:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    3d38:	2401      	movs	r4, #1
    3d3a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    3d3e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    3d42:	4094      	lsls	r4, r2
    3d44:	4320      	orrs	r0, r4
    3d46:	2e02      	cmp	r6, #2
    3d48:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    3d4c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    3d50:	d023      	beq.n	3d9a <__register_exitproc+0x92>
    3d52:	3202      	adds	r2, #2
    3d54:	f8c3 e004 	str.w	lr, [r3, #4]
    3d58:	6828      	ldr	r0, [r5, #0]
    3d5a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    3d5e:	f7ff ffd1 	bl	3d04 <__retarget_lock_release_recursive>
    3d62:	2000      	movs	r0, #0
    3d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3d68:	4b17      	ldr	r3, [pc, #92]	; (3dc8 <__register_exitproc+0xc0>)
    3d6a:	b30b      	cbz	r3, 3db0 <__register_exitproc+0xa8>
    3d6c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    3d70:	f7fc fbe7 	bl	542 <malloc>
    3d74:	4603      	mov	r3, r0
    3d76:	b1d8      	cbz	r0, 3db0 <__register_exitproc+0xa8>
    3d78:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    3d7c:	6002      	str	r2, [r0, #0]
    3d7e:	2100      	movs	r1, #0
    3d80:	6041      	str	r1, [r0, #4]
    3d82:	460a      	mov	r2, r1
    3d84:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    3d88:	f04f 0e01 	mov.w	lr, #1
    3d8c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    3d90:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    3d94:	2e00      	cmp	r6, #0
    3d96:	d0dc      	beq.n	3d52 <__register_exitproc+0x4a>
    3d98:	e7cc      	b.n	3d34 <__register_exitproc+0x2c>
    3d9a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    3d9e:	430c      	orrs	r4, r1
    3da0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    3da4:	e7d5      	b.n	3d52 <__register_exitproc+0x4a>
    3da6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    3daa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    3dae:	e7bb      	b.n	3d28 <__register_exitproc+0x20>
    3db0:	6828      	ldr	r0, [r5, #0]
    3db2:	f7ff ffa7 	bl	3d04 <__retarget_lock_release_recursive>
    3db6:	f04f 30ff 	mov.w	r0, #4294967295
    3dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3dbe:	bf00      	nop
    3dc0:	200004d0 	.word	0x200004d0
    3dc4:	00004018 	.word	0x00004018
    3dc8:	00000543 	.word	0x00000543

00003dcc <_ZTV9CDC_Class>:
	...
    3dd4:	00000431 00000459 000002f5 000003f9     1...Y...........
    3de4:	00000481 000003bd 0000037d 00000419     ........}.......

00003df4 <_ZTV6Stream>:
	...
    3dfc:	00000557 000007cd 000002f5 00000309     W...............
    3e0c:	00000557 00000557 00000557 00000a0d     W...W...W.......
    3e1c:	006e616e 00666e69 0066766f              nan.inf.ovf.

00003e28 <_ZTV5Print>:
	...
    3e30:	00000557 000007cd 000002f5 00000309     W...............
    3e40:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
    3e50:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
    3e60:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
    3e70:	2e747369 00000063                       ist.c...

00003e78 <user_mux_confs>:
    3e78:	00000100 00000000 00000000 00000000     ................
	...

00003ebc <channel_confs>:
    3ebc:	0000060c 00000000 00000000 00000000     ................
	...

00003efc <interrupt_cfg>:
	...
    3f7c:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    3f8c:	632e6374 00000000 40003800 40003c00     tc.c.....8.@.<.@
    3f9c:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    3fac:	43001400 43001800                       ...C...C

00003fb4 <_tcs>:
    3fb4:	006b0000 00000008 00000000 00000020     ..k......... ...
    3fc4:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    3fd4:	63745f6c 0000632e                       l_tc.c..

00003fdc <_usb_ep_cfgs>:
    3fdc:	200007ac 00000000 00000040 2000076c     ... ....@...l.. 
    3fec:	00000000 00000040 2000072c 00000000     ....@...,.. ....
    3ffc:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    400c:	73752f65 2e636462 00000063              e/usbdc.c...

00004018 <_global_impure_ptr>:
    4018:	200000a8                                ... 

0000401c <_init>:
    401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    401e:	bf00      	nop
    4020:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4022:	bc08      	pop	{r3}
    4024:	469e      	mov	lr, r3
    4026:	4770      	bx	lr

00004028 <__init_array_start>:
    4028:	00003cad 	.word	0x00003cad

0000402c <__frame_dummy_init_array_entry>:
    402c:	00000289                                ....

00004030 <_fini>:
    4030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4032:	bf00      	nop
    4034:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4036:	bc08      	pop	{r3}
    4038:	469e      	mov	lr, r3
    403a:	4770      	bx	lr

0000403c <__fini_array_start>:
    403c:	00000265 	.word	0x00000265
