
TimerClass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040c8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000494  20000000  000040c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020494  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020494  2**0
                  CONTENTS
  4 .bss          000003e4  20000494  0000455c  00020494  2**2
                  ALLOC
  5 .stack        00010000  20000878  00004940  00020494  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020494  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000204c2  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003c9ad  00000000  00000000  0002051b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004e80  00000000  00000000  0005cec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00015aaf  00000000  00000000  00061d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010f0  00000000  00000000  000777f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000018d8  00000000  00000000  000788e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003bd1f  00000000  00000000  0007a1bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001b9ce  00000000  00000000  000b5ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012957c  00000000  00000000  000d18ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002ed0  00000000  00000000  001fae28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 08 01 20 d1 02 00 00 55 03 00 00 55 03 00 00     x.. ....U...U...
      10:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      2c:	55 03 00 00 55 03 00 00 00 00 00 00 55 03 00 00     U...U.......U...
      3c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      4c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      5c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      6c:	ad 19 00 00 55 03 00 00 55 03 00 00 55 03 00 00     ....U...U...U...
      7c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      8c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      9c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      ac:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      bc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      cc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      dc:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      f4:	55 03 00 00 79 1a 00 00 8d 1a 00 00 a1 1a 00 00     U...y...........
     104:	b5 1a 00 00 55 03 00 00 55 03 00 00 55 03 00 00     ....U...U...U...
     114:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     124:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     134:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     144:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     154:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     164:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     174:	55 03 00 00 55 03 00 00 55 03 00 00 d9 2f 00 00     U...U...U..../..
     184:	e5 2f 00 00 f1 2f 00 00 fd 2f 00 00 55 03 00 00     ./.../.../..U...
     194:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1a4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1b4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1c4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1d4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1e4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1f4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     204:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     214:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     224:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     234:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     244:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     254:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000494 	.word	0x20000494
     280:	00000000 	.word	0x00000000
     284:	000040c8 	.word	0x000040c8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000040c8 	.word	0x000040c8
     2c4:	20000498 	.word	0x20000498
     2c8:	000040c8 	.word	0x000040c8
     2cc:	00000000 	.word	0x00000000

000002d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2d6:	4b16      	ldr	r3, [pc, #88]	; (330 <Reset_Handler+0x60>)
     2d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2da:	4b16      	ldr	r3, [pc, #88]	; (334 <Reset_Handler+0x64>)
     2dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2de:	687a      	ldr	r2, [r7, #4]
     2e0:	683b      	ldr	r3, [r7, #0]
     2e2:	429a      	cmp	r2, r3
     2e4:	d00c      	beq.n	300 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2e6:	e007      	b.n	2f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	1d1a      	adds	r2, r3, #4
     2ec:	603a      	str	r2, [r7, #0]
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	1d11      	adds	r1, r2, #4
     2f2:	6079      	str	r1, [r7, #4]
     2f4:	6812      	ldr	r2, [r2, #0]
     2f6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4a0f      	ldr	r2, [pc, #60]	; (338 <Reset_Handler+0x68>)
     2fc:	4293      	cmp	r3, r2
     2fe:	d3f3      	bcc.n	2e8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0e      	ldr	r3, [pc, #56]	; (33c <Reset_Handler+0x6c>)
     302:	603b      	str	r3, [r7, #0]
     304:	e004      	b.n	310 <Reset_Handler+0x40>
                *pDest++ = 0;
     306:	683b      	ldr	r3, [r7, #0]
     308:	1d1a      	adds	r2, r3, #4
     30a:	603a      	str	r2, [r7, #0]
     30c:	2200      	movs	r2, #0
     30e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	683b      	ldr	r3, [r7, #0]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <Reset_Handler+0x70>)
     314:	4293      	cmp	r3, r2
     316:	d3f6      	bcc.n	306 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     318:	4b0a      	ldr	r3, [pc, #40]	; (344 <Reset_Handler+0x74>)
     31a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31c:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x78>)
     31e:	687b      	ldr	r3, [r7, #4]
     320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     324:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     326:	4b09      	ldr	r3, [pc, #36]	; (34c <Reset_Handler+0x7c>)
     328:	4798      	blx	r3

        /* Branch to main function */
        main();
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x80>)
     32c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     32e:	e7fe      	b.n	32e <Reset_Handler+0x5e>
     330:	000040c8 	.word	0x000040c8
     334:	20000000 	.word	0x20000000
     338:	20000494 	.word	0x20000494
     33c:	20000494 	.word	0x20000494
     340:	20000878 	.word	0x20000878
     344:	00000000 	.word	0x00000000
     348:	e000ed00 	.word	0xe000ed00
     34c:	00003b11 	.word	0x00003b11
     350:	000003d9 	.word	0x000003d9

00000354 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     354:	b480      	push	{r7}
     356:	af00      	add	r7, sp, #0
        while (1) {
     358:	e7fe      	b.n	358 <Dummy_Handler+0x4>

0000035a <hri_port_toggle_OUT_reg>:
     35a:	b480      	push	{r7}
     35c:	b085      	sub	sp, #20
     35e:	af00      	add	r7, sp, #0
     360:	60f8      	str	r0, [r7, #12]
     362:	460b      	mov	r3, r1
     364:	607a      	str	r2, [r7, #4]
     366:	72fb      	strb	r3, [r7, #11]
     368:	7afb      	ldrb	r3, [r7, #11]
     36a:	68fa      	ldr	r2, [r7, #12]
     36c:	01db      	lsls	r3, r3, #7
     36e:	4413      	add	r3, r2
     370:	331c      	adds	r3, #28
     372:	687a      	ldr	r2, [r7, #4]
     374:	601a      	str	r2, [r3, #0]
     376:	bf00      	nop
     378:	3714      	adds	r7, #20
     37a:	46bd      	mov	sp, r7
     37c:	bc80      	pop	{r7}
     37e:	4770      	bx	lr

00000380 <_gpio_toggle_level>:
     380:	b580      	push	{r7, lr}
     382:	b082      	sub	sp, #8
     384:	af00      	add	r7, sp, #0
     386:	4603      	mov	r3, r0
     388:	6039      	str	r1, [r7, #0]
     38a:	71fb      	strb	r3, [r7, #7]
     38c:	79fb      	ldrb	r3, [r7, #7]
     38e:	683a      	ldr	r2, [r7, #0]
     390:	4619      	mov	r1, r3
     392:	4803      	ldr	r0, [pc, #12]	; (3a0 <_gpio_toggle_level+0x20>)
     394:	4b03      	ldr	r3, [pc, #12]	; (3a4 <_gpio_toggle_level+0x24>)
     396:	4798      	blx	r3
     398:	bf00      	nop
     39a:	3708      	adds	r7, #8
     39c:	46bd      	mov	sp, r7
     39e:	bd80      	pop	{r7, pc}
     3a0:	41008000 	.word	0x41008000
     3a4:	0000035b 	.word	0x0000035b

000003a8 <gpio_toggle_pin_level>:
     3a8:	b580      	push	{r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	4603      	mov	r3, r0
     3b0:	71fb      	strb	r3, [r7, #7]
     3b2:	79fb      	ldrb	r3, [r7, #7]
     3b4:	115b      	asrs	r3, r3, #5
     3b6:	b2d8      	uxtb	r0, r3
     3b8:	79fb      	ldrb	r3, [r7, #7]
     3ba:	f003 031f 	and.w	r3, r3, #31
     3be:	2201      	movs	r2, #1
     3c0:	fa02 f303 	lsl.w	r3, r2, r3
     3c4:	4619      	mov	r1, r3
     3c6:	4b03      	ldr	r3, [pc, #12]	; (3d4 <gpio_toggle_pin_level+0x2c>)
     3c8:	4798      	blx	r3
     3ca:	bf00      	nop
     3cc:	3708      	adds	r7, #8
     3ce:	46bd      	mov	sp, r7
     3d0:	bd80      	pop	{r7, pc}
     3d2:	bf00      	nop
     3d4:	00000381 	.word	0x00000381

000003d8 <main>:
     3d8:	b580      	push	{r7, lr}
     3da:	b090      	sub	sp, #64	; 0x40
     3dc:	af00      	add	r7, sp, #0
     3de:	4b11      	ldr	r3, [pc, #68]	; (424 <main+0x4c>)
     3e0:	4798      	blx	r3
     3e2:	463b      	mov	r3, r7
     3e4:	4618      	mov	r0, r3
     3e6:	4b10      	ldr	r3, [pc, #64]	; (428 <main+0x50>)
     3e8:	4798      	blx	r3
     3ea:	463b      	mov	r3, r7
     3ec:	4618      	mov	r0, r3
     3ee:	4b0f      	ldr	r3, [pc, #60]	; (42c <main+0x54>)
     3f0:	4798      	blx	r3
     3f2:	463b      	mov	r3, r7
     3f4:	2101      	movs	r1, #1
     3f6:	4618      	mov	r0, r3
     3f8:	4b0d      	ldr	r3, [pc, #52]	; (430 <main+0x58>)
     3fa:	4798      	blx	r3
     3fc:	787b      	ldrb	r3, [r7, #1]
     3fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
     402:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
     406:	2b00      	cmp	r3, #0
     408:	d0f8      	beq.n	3fc <main+0x24>
     40a:	463b      	mov	r3, r7
     40c:	4618      	mov	r0, r3
     40e:	4b09      	ldr	r3, [pc, #36]	; (434 <main+0x5c>)
     410:	4798      	blx	r3
     412:	2052      	movs	r0, #82	; 0x52
     414:	4b08      	ldr	r3, [pc, #32]	; (438 <main+0x60>)
     416:	4798      	blx	r3
     418:	463b      	mov	r3, r7
     41a:	210a      	movs	r1, #10
     41c:	4618      	mov	r0, r3
     41e:	4b04      	ldr	r3, [pc, #16]	; (430 <main+0x58>)
     420:	4798      	blx	r3
     422:	e7eb      	b.n	3fc <main+0x24>
     424:	000005f5 	.word	0x000005f5
     428:	00000481 	.word	0x00000481
     42c:	000004c5 	.word	0x000004c5
     430:	0000053d 	.word	0x0000053d
     434:	00000575 	.word	0x00000575
     438:	000003a9 	.word	0x000003a9

0000043c <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     43c:	b480      	push	{r7}
     43e:	b083      	sub	sp, #12
     440:	af00      	add	r7, sp, #0
     442:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     444:	687b      	ldr	r3, [r7, #4]
     446:	695b      	ldr	r3, [r3, #20]
     448:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     44c:	687b      	ldr	r3, [r7, #4]
     44e:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     450:	bf00      	nop
     452:	370c      	adds	r7, #12
     454:	46bd      	mov	sp, r7
     456:	bc80      	pop	{r7}
     458:	4770      	bx	lr
	...

0000045c <_ZL7task_cbPK10timer_task>:

#include "Timer_Class.h"

Timer_Class*	ptrTimerClass;
static void task_cb(const struct timer_task *const timer_task)
{
     45c:	b580      	push	{r7, lr}
     45e:	b082      	sub	sp, #8
     460:	af00      	add	r7, sp, #0
     462:	6078      	str	r0, [r7, #4]
	ptrTimerClass->setTimeout();
     464:	4b04      	ldr	r3, [pc, #16]	; (478 <_ZL7task_cbPK10timer_task+0x1c>)
     466:	681b      	ldr	r3, [r3, #0]
     468:	4618      	mov	r0, r3
     46a:	4b04      	ldr	r3, [pc, #16]	; (47c <_ZL7task_cbPK10timer_task+0x20>)
     46c:	4798      	blx	r3
}
     46e:	bf00      	nop
     470:	3708      	adds	r7, #8
     472:	46bd      	mov	sp, r7
     474:	bd80      	pop	{r7, pc}
     476:	bf00      	nop
     478:	200004b0 	.word	0x200004b0
     47c:	000005dd 	.word	0x000005dd

00000480 <_ZN11Timer_ClassC1Ev>:
// default constructor
Timer_Class::Timer_Class()
     480:	b4b0      	push	{r4, r5, r7}
     482:	b083      	sub	sp, #12
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
{
	TIMER0=TIMER_0;
     488:	687b      	ldr	r3, [r7, #4]
     48a:	4a0c      	ldr	r2, [pc, #48]	; (4bc <_ZN11Timer_ClassC1Ev+0x3c>)
     48c:	1d1c      	adds	r4, r3, #4
     48e:	4615      	mov	r5, r2
     490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     494:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
     498:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	prtTimer=this;
     49c:	687b      	ldr	r3, [r7, #4]
     49e:	687a      	ldr	r2, [r7, #4]
     4a0:	635a      	str	r2, [r3, #52]	; 0x34
	ptrTimerClass=this;
     4a2:	4a07      	ldr	r2, [pc, #28]	; (4c0 <_ZN11Timer_ClassC1Ev+0x40>)
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
     4a8:	687b      	ldr	r3, [r7, #4]
     4aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
     4ae:	639a      	str	r2, [r3, #56]	; 0x38
} //Timer_Class
     4b0:	687b      	ldr	r3, [r7, #4]
     4b2:	4618      	mov	r0, r3
     4b4:	370c      	adds	r7, #12
     4b6:	46bd      	mov	sp, r7
     4b8:	bcb0      	pop	{r4, r5, r7}
     4ba:	4770      	bx	lr
     4bc:	20000838 	.word	0x20000838
     4c0:	200004b0 	.word	0x200004b0

000004c4 <_ZN11Timer_Class4InitEv>:
	timeout=0;
} //~Timer_Class



void Timer_Class::Init(void){
     4c4:	b590      	push	{r4, r7, lr}
     4c6:	b083      	sub	sp, #12
     4c8:	af00      	add	r7, sp, #0
     4ca:	6078      	str	r0, [r7, #4]
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     4cc:	480b      	ldr	r0, [pc, #44]	; (4fc <_ZN11Timer_Class4InitEv+0x38>)
     4ce:	4b0c      	ldr	r3, [pc, #48]	; (500 <_ZN11Timer_Class4InitEv+0x3c>)
     4d0:	4798      	blx	r3
	timer_init(&TIMER0, RTC, _rtc_get_timer());
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	1d1c      	adds	r4, r3, #4
     4d6:	4b0b      	ldr	r3, [pc, #44]	; (504 <_ZN11Timer_Class4InitEv+0x40>)
     4d8:	4798      	blx	r3
     4da:	4603      	mov	r3, r0
     4dc:	461a      	mov	r2, r3
     4de:	490a      	ldr	r1, [pc, #40]	; (508 <_ZN11Timer_Class4InitEv+0x44>)
     4e0:	4620      	mov	r0, r4
     4e2:	4b0a      	ldr	r3, [pc, #40]	; (50c <_ZN11Timer_Class4InitEv+0x48>)
     4e4:	4798      	blx	r3
	set_clock_cycles_per_tick(clockCycles);
     4e6:	687b      	ldr	r3, [r7, #4]
     4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     4ea:	4619      	mov	r1, r3
     4ec:	6878      	ldr	r0, [r7, #4]
     4ee:	4b08      	ldr	r3, [pc, #32]	; (510 <_ZN11Timer_Class4InitEv+0x4c>)
     4f0:	4798      	blx	r3
}
     4f2:	bf00      	nop
     4f4:	370c      	adds	r7, #12
     4f6:	46bd      	mov	sp, r7
     4f8:	bd90      	pop	{r4, r7, pc}
     4fa:	bf00      	nop
     4fc:	40000800 	.word	0x40000800
     500:	0000043d 	.word	0x0000043d
     504:	000019a9 	.word	0x000019a9
     508:	40002400 	.word	0x40002400
     50c:	00000ccd 	.word	0x00000ccd
     510:	00000515 	.word	0x00000515

00000514 <_ZN11Timer_Class25set_clock_cycles_per_tickEm>:
int32_t Timer_Class::set_clock_cycles_per_tick(uint32_t clock_cycles){
     514:	b580      	push	{r7, lr}
     516:	b084      	sub	sp, #16
     518:	af00      	add	r7, sp, #0
     51a:	6078      	str	r0, [r7, #4]
     51c:	6039      	str	r1, [r7, #0]
	int32_t	status;
	status=timer_set_clock_cycles_per_tick(&TIMER0,clock_cycles);
     51e:	687b      	ldr	r3, [r7, #4]
     520:	3304      	adds	r3, #4
     522:	6839      	ldr	r1, [r7, #0]
     524:	4618      	mov	r0, r3
     526:	4b04      	ldr	r3, [pc, #16]	; (538 <_ZN11Timer_Class25set_clock_cycles_per_tickEm+0x24>)
     528:	4798      	blx	r3
     52a:	60f8      	str	r0, [r7, #12]
	return status;
     52c:	68fb      	ldr	r3, [r7, #12]
}
     52e:	4618      	mov	r0, r3
     530:	3710      	adds	r7, #16
     532:	46bd      	mov	sp, r7
     534:	bd80      	pop	{r7, pc}
     536:	bf00      	nop
     538:	00000d81 	.word	0x00000d81

0000053c <_ZN11Timer_Class5startEm>:

int32_t Timer_Class::start(uint32_t timeoutsec){
     53c:	b580      	push	{r7, lr}
     53e:	b084      	sub	sp, #16
     540:	af00      	add	r7, sp, #0
     542:	6078      	str	r0, [r7, #4]
     544:	6039      	str	r1, [r7, #0]
	int32_t	status;
	timeout=0;
     546:	687b      	ldr	r3, [r7, #4]
     548:	2200      	movs	r2, #0
     54a:	705a      	strb	r2, [r3, #1]
	//set_clock_cycles_per_tick(timeoutsec/10);
	setOneShotTimer(timeoutsec);
     54c:	6839      	ldr	r1, [r7, #0]
     54e:	6878      	ldr	r0, [r7, #4]
     550:	4b06      	ldr	r3, [pc, #24]	; (56c <_ZN11Timer_Class5startEm+0x30>)
     552:	4798      	blx	r3
	status=timer_start(&TIMER0);
     554:	687b      	ldr	r3, [r7, #4]
     556:	3304      	adds	r3, #4
     558:	4618      	mov	r0, r3
     55a:	4b05      	ldr	r3, [pc, #20]	; (570 <_ZN11Timer_Class5startEm+0x34>)
     55c:	4798      	blx	r3
     55e:	60f8      	str	r0, [r7, #12]
	return status;
     560:	68fb      	ldr	r3, [r7, #12]
	
}
     562:	4618      	mov	r0, r3
     564:	3710      	adds	r7, #16
     566:	46bd      	mov	sp, r7
     568:	bd80      	pop	{r7, pc}
     56a:	bf00      	nop
     56c:	0000059d 	.word	0x0000059d
     570:	00000d09 	.word	0x00000d09

00000574 <_ZN11Timer_Class4stopEv>:

int32_t Timer_Class::stop( void){
     574:	b580      	push	{r7, lr}
     576:	b084      	sub	sp, #16
     578:	af00      	add	r7, sp, #0
     57a:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(&TIMER0);
     57c:	687b      	ldr	r3, [r7, #4]
     57e:	3304      	adds	r3, #4
     580:	4618      	mov	r0, r3
     582:	4b05      	ldr	r3, [pc, #20]	; (598 <_ZN11Timer_Class4stopEv+0x24>)
     584:	4798      	blx	r3
     586:	60f8      	str	r0, [r7, #12]
	timeout=0;
     588:	687b      	ldr	r3, [r7, #4]
     58a:	2200      	movs	r2, #0
     58c:	705a      	strb	r2, [r3, #1]
	return status;
     58e:	68fb      	ldr	r3, [r7, #12]
}
     590:	4618      	mov	r0, r3
     592:	3710      	adds	r7, #16
     594:	46bd      	mov	sp, r7
     596:	bd80      	pop	{r7, pc}
     598:	00000d45 	.word	0x00000d45

0000059c <_ZN11Timer_Class15setOneShotTimerEm>:



void	Timer_Class::setOneShotTimer(uint32_t interval){
     59c:	b580      	push	{r7, lr}
     59e:	b082      	sub	sp, #8
     5a0:	af00      	add	r7, sp, #0
     5a2:	6078      	str	r0, [r7, #4]
     5a4:	6039      	str	r1, [r7, #0]
	task.interval=interval;
     5a6:	687b      	ldr	r3, [r7, #4]
     5a8:	683a      	ldr	r2, [r7, #0]
     5aa:	629a      	str	r2, [r3, #40]	; 0x28
	task.cb=task_cb;
     5ac:	687b      	ldr	r3, [r7, #4]
     5ae:	4a09      	ldr	r2, [pc, #36]	; (5d4 <_ZN11Timer_Class15setOneShotTimerEm+0x38>)
     5b0:	62da      	str	r2, [r3, #44]	; 0x2c
	task.mode=TIMER_TASK_ONE_SHOT;
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	2200      	movs	r2, #0
     5b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	timer_add_task(&TIMER0, &task);
     5ba:	687b      	ldr	r3, [r7, #4]
     5bc:	1d1a      	adds	r2, r3, #4
     5be:	687b      	ldr	r3, [r7, #4]
     5c0:	3320      	adds	r3, #32
     5c2:	4619      	mov	r1, r3
     5c4:	4610      	mov	r0, r2
     5c6:	4b04      	ldr	r3, [pc, #16]	; (5d8 <_ZN11Timer_Class15setOneShotTimerEm+0x3c>)
     5c8:	4798      	blx	r3
}
     5ca:	bf00      	nop
     5cc:	3708      	adds	r7, #8
     5ce:	46bd      	mov	sp, r7
     5d0:	bd80      	pop	{r7, pc}
     5d2:	bf00      	nop
     5d4:	0000045d 	.word	0x0000045d
     5d8:	00000dad 	.word	0x00000dad

000005dc <_ZN11Timer_Class10setTimeoutEv>:

void Timer_Class::setTimeout(){
     5dc:	b480      	push	{r7}
     5de:	b083      	sub	sp, #12
     5e0:	af00      	add	r7, sp, #0
     5e2:	6078      	str	r0, [r7, #4]
	timeout=1;
     5e4:	687b      	ldr	r3, [r7, #4]
     5e6:	2201      	movs	r2, #1
     5e8:	705a      	strb	r2, [r3, #1]
}
     5ea:	bf00      	nop
     5ec:	370c      	adds	r7, #12
     5ee:	46bd      	mov	sp, r7
     5f0:	bc80      	pop	{r7}
     5f2:	4770      	bx	lr

000005f4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     5f4:	b508      	push	{r3, lr}
	system_init();
     5f6:	4b02      	ldr	r3, [pc, #8]	; (600 <atmel_start_init+0xc>)
     5f8:	4798      	blx	r3
	usb_init();
     5fa:	4b02      	ldr	r3, [pc, #8]	; (604 <atmel_start_init+0x10>)
     5fc:	4798      	blx	r3
     5fe:	bd08      	pop	{r3, pc}
     600:	00000849 	.word	0x00000849
     604:	00003039 	.word	0x00003039

00000608 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     608:	4a04      	ldr	r2, [pc, #16]	; (61c <ADC_0_CLOCK_init+0x14>)
     60a:	6a13      	ldr	r3, [r2, #32]
     60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     610:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     612:	2240      	movs	r2, #64	; 0x40
     614:	4b02      	ldr	r3, [pc, #8]	; (620 <ADC_0_CLOCK_init+0x18>)
     616:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     61a:	4770      	bx	lr
     61c:	40000800 	.word	0x40000800
     620:	40001c00 	.word	0x40001c00

00000624 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     624:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     626:	4b04      	ldr	r3, [pc, #16]	; (638 <ADC_0_init+0x14>)
     628:	4798      	blx	r3
	ADC_0_PORT_init();
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     62a:	2200      	movs	r2, #0
     62c:	4903      	ldr	r1, [pc, #12]	; (63c <ADC_0_init+0x18>)
     62e:	4804      	ldr	r0, [pc, #16]	; (640 <ADC_0_init+0x1c>)
     630:	4b04      	ldr	r3, [pc, #16]	; (644 <ADC_0_init+0x20>)
     632:	4798      	blx	r3
     634:	bd08      	pop	{r3, pc}
     636:	bf00      	nop
     638:	00000609 	.word	0x00000609
     63c:	43001c00 	.word	0x43001c00
     640:	200007ec 	.word	0x200007ec
     644:	00000961 	.word	0x00000961

00000648 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     648:	b508      	push	{r3, lr}
     64a:	4b07      	ldr	r3, [pc, #28]	; (668 <EVENT_SYSTEM_0_init+0x20>)
     64c:	2240      	movs	r2, #64	; 0x40
     64e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     652:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     656:	4a05      	ldr	r2, [pc, #20]	; (66c <EVENT_SYSTEM_0_init+0x24>)
     658:	6993      	ldr	r3, [r2, #24]
     65a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     65e:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     660:	4b03      	ldr	r3, [pc, #12]	; (670 <EVENT_SYSTEM_0_init+0x28>)
     662:	4798      	blx	r3
     664:	bd08      	pop	{r3, pc}
     666:	bf00      	nop
     668:	40001c00 	.word	0x40001c00
     66c:	40000800 	.word	0x40000800
     670:	000009a5 	.word	0x000009a5

00000674 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     674:	4b28      	ldr	r3, [pc, #160]	; (718 <SPI_0_PORT_init+0xa4>)
     676:	2210      	movs	r2, #16
     678:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     67a:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     67c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     680:	629a      	str	r2, [r3, #40]	; 0x28
     682:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     686:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     688:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     68c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     690:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     698:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     69c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6a0:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6a8:	2220      	movs	r2, #32
     6aa:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6ac:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6ae:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     6b2:	629a      	str	r2, [r3, #40]	; 0x28
     6b4:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6d6:	2240      	movs	r2, #64	; 0x40
     6d8:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6da:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     6de:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     6e2:	629a      	str	r2, [r3, #40]	; 0x28
     6e4:	4a0d      	ldr	r2, [pc, #52]	; (71c <SPI_0_PORT_init+0xa8>)
     6e6:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6e8:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     6ec:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6f4:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     6f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6fc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     704:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     708:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     70c:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     710:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     714:	4770      	bx	lr
     716:	bf00      	nop
     718:	41008000 	.word	0x41008000
     71c:	c0020000 	.word	0xc0020000

00000720 <SPI_0_CLOCK_init>:
     720:	4b06      	ldr	r3, [pc, #24]	; (73c <SPI_0_CLOCK_init+0x1c>)
     722:	2240      	movs	r2, #64	; 0x40
     724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     728:	2243      	movs	r2, #67	; 0x43
     72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     72e:	4a04      	ldr	r2, [pc, #16]	; (740 <SPI_0_CLOCK_init+0x20>)
     730:	6953      	ldr	r3, [r2, #20]
     732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     736:	6153      	str	r3, [r2, #20]
     738:	4770      	bx	lr
     73a:	bf00      	nop
     73c:	40001c00 	.word	0x40001c00
     740:	40000800 	.word	0x40000800

00000744 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     744:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     746:	4b04      	ldr	r3, [pc, #16]	; (758 <SPI_0_init+0x14>)
     748:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
     74a:	4904      	ldr	r1, [pc, #16]	; (75c <SPI_0_init+0x18>)
     74c:	4804      	ldr	r0, [pc, #16]	; (760 <SPI_0_init+0x1c>)
     74e:	4b05      	ldr	r3, [pc, #20]	; (764 <SPI_0_init+0x20>)
     750:	4798      	blx	r3
	SPI_0_PORT_init();
     752:	4b05      	ldr	r3, [pc, #20]	; (768 <SPI_0_init+0x24>)
     754:	4798      	blx	r3
     756:	bd08      	pop	{r3, pc}
     758:	00000721 	.word	0x00000721
     75c:	40003000 	.word	0x40003000
     760:	200007f0 	.word	0x200007f0
     764:	00000b71 	.word	0x00000b71
     768:	00000675 	.word	0x00000675

0000076c <delay_driver_init>:
}

void delay_driver_init(void)
{
     76c:	b508      	push	{r3, lr}
	delay_init(SysTick);
     76e:	4802      	ldr	r0, [pc, #8]	; (778 <delay_driver_init+0xc>)
     770:	4b02      	ldr	r3, [pc, #8]	; (77c <delay_driver_init+0x10>)
     772:	4798      	blx	r3
     774:	bd08      	pop	{r3, pc}
     776:	bf00      	nop
     778:	e000e010 	.word	0xe000e010
     77c:	00000991 	.word	0x00000991

00000780 <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     780:	4b1e      	ldr	r3, [pc, #120]	; (7fc <USB_0_PORT_init+0x7c>)
     782:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     786:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     788:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     78c:	6299      	str	r1, [r3, #40]	; 0x28
     78e:	481c      	ldr	r0, [pc, #112]	; (800 <USB_0_PORT_init+0x80>)
     790:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     792:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     794:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     798:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     79c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7a0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     7a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7a8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7b0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7b4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7b8:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     7c4:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7c6:	6299      	str	r1, [r3, #40]	; 0x28
     7c8:	490e      	ldr	r1, [pc, #56]	; (804 <USB_0_PORT_init+0x84>)
     7ca:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7cc:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7ce:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     7d2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7da:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     7de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ea:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7ee:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7f2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     7fa:	4770      	bx	lr
     7fc:	41008000 	.word	0x41008000
     800:	c0000100 	.word	0xc0000100
     804:	c0000200 	.word	0xc0000200

00000808 <USB_0_CLOCK_init>:
     808:	2244      	movs	r2, #68	; 0x44
     80a:	4b07      	ldr	r3, [pc, #28]	; (828 <USB_0_CLOCK_init+0x20>)
     80c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     810:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     814:	691a      	ldr	r2, [r3, #16]
     816:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     81a:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     81c:	699a      	ldr	r2, [r3, #24]
     81e:	f042 0201 	orr.w	r2, r2, #1
     822:	619a      	str	r2, [r3, #24]
     824:	4770      	bx	lr
     826:	bf00      	nop
     828:	40001c00 	.word	0x40001c00

0000082c <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     82c:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     82e:	4b03      	ldr	r3, [pc, #12]	; (83c <USB_0_init+0x10>)
     830:	4798      	blx	r3
	usb_d_init();
     832:	4b03      	ldr	r3, [pc, #12]	; (840 <USB_0_init+0x14>)
     834:	4798      	blx	r3
	USB_0_PORT_init();
     836:	4b03      	ldr	r3, [pc, #12]	; (844 <USB_0_init+0x18>)
     838:	4798      	blx	r3
     83a:	bd08      	pop	{r3, pc}
     83c:	00000809 	.word	0x00000809
     840:	000010a9 	.word	0x000010a9
     844:	00000781 	.word	0x00000781

00000848 <system_init>:
}

void system_init(void)
{
     848:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     84a:	4b35      	ldr	r3, [pc, #212]	; (920 <system_init+0xd8>)
     84c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     84e:	4b35      	ldr	r3, [pc, #212]	; (924 <system_init+0xdc>)
     850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     854:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     85c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     860:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     864:	4930      	ldr	r1, [pc, #192]	; (928 <system_init+0xe0>)
     866:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     86a:	f893 10dc 	ldrb.w	r1, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     872:	f883 10dc 	strb.w	r1, [r3, #220]	; 0xdc
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     87a:	492c      	ldr	r1, [pc, #176]	; (92c <system_init+0xe4>)
     87c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     880:	492b      	ldr	r1, [pc, #172]	; (930 <system_init+0xe8>)
     882:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     88a:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
     88e:	f041 0104 	orr.w	r1, r1, #4
     892:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     896:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     89a:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     89e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8a2:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     8aa:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8ae:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8b2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     8b6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     8ba:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     8be:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8c2:	f893 114f 	ldrb.w	r1, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
     8c6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8ca:	f883 114f 	strb.w	r1, [r3, #335]	; 0x14f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8ce:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     8d2:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8d6:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8da:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     8de:	4a15      	ldr	r2, [pc, #84]	; (934 <system_init+0xec>)
     8e0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8e4:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     8e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8ec:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     8f0:	4b11      	ldr	r3, [pc, #68]	; (938 <system_init+0xf0>)
     8f2:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     8f4:	4b11      	ldr	r3, [pc, #68]	; (93c <system_init+0xf4>)
     8f6:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     8f8:	4a11      	ldr	r2, [pc, #68]	; (940 <system_init+0xf8>)
     8fa:	6953      	ldr	r3, [r2, #20]
     8fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     900:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     902:	4b10      	ldr	r3, [pc, #64]	; (944 <system_init+0xfc>)
     904:	4798      	blx	r3
     906:	4602      	mov	r2, r0
     908:	490f      	ldr	r1, [pc, #60]	; (948 <system_init+0x100>)
     90a:	4810      	ldr	r0, [pc, #64]	; (94c <system_init+0x104>)
     90c:	4b10      	ldr	r3, [pc, #64]	; (950 <system_init+0x108>)
     90e:	4798      	blx	r3

	TIMER_0_init();

	SPI_0_init();
     910:	4b10      	ldr	r3, [pc, #64]	; (954 <system_init+0x10c>)
     912:	4798      	blx	r3

	delay_driver_init();
     914:	4b10      	ldr	r3, [pc, #64]	; (958 <system_init+0x110>)
     916:	4798      	blx	r3

	USB_0_init();
     918:	4b10      	ldr	r3, [pc, #64]	; (95c <system_init+0x114>)
     91a:	4798      	blx	r3
     91c:	bd08      	pop	{r3, pc}
     91e:	bf00      	nop
     920:	0000162d 	.word	0x0000162d
     924:	41008000 	.word	0x41008000
     928:	c0001000 	.word	0xc0001000
     92c:	40020000 	.word	0x40020000
     930:	c0024000 	.word	0xc0024000
     934:	c0000004 	.word	0xc0000004
     938:	00000625 	.word	0x00000625
     93c:	00000649 	.word	0x00000649
     940:	40000800 	.word	0x40000800
     944:	000019a9 	.word	0x000019a9
     948:	40002400 	.word	0x40002400
     94c:	20000838 	.word	0x20000838
     950:	00000ccd 	.word	0x00000ccd
     954:	00000745 	.word	0x00000745
     958:	0000076d 	.word	0x0000076d
     95c:	0000082d 	.word	0x0000082d

00000960 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     960:	b538      	push	{r3, r4, r5, lr}
     962:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     964:	4605      	mov	r5, r0
     966:	b158      	cbz	r0, 980 <adc_sync_init+0x20>
     968:	1c08      	adds	r0, r1, #0
     96a:	bf18      	it	ne
     96c:	2001      	movne	r0, #1
     96e:	2239      	movs	r2, #57	; 0x39
     970:	4904      	ldr	r1, [pc, #16]	; (984 <adc_sync_init+0x24>)
     972:	4b05      	ldr	r3, [pc, #20]	; (988 <adc_sync_init+0x28>)
     974:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     976:	4621      	mov	r1, r4
     978:	4628      	mov	r0, r5
     97a:	4b04      	ldr	r3, [pc, #16]	; (98c <adc_sync_init+0x2c>)
     97c:	4798      	blx	r3
}
     97e:	bd38      	pop	{r3, r4, r5, pc}
     980:	2000      	movs	r0, #0
     982:	e7f4      	b.n	96e <adc_sync_init+0xe>
     984:	00003e50 	.word	0x00003e50
     988:	000013f5 	.word	0x000013f5
     98c:	000015f5 	.word	0x000015f5

00000990 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     990:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     992:	4b02      	ldr	r3, [pc, #8]	; (99c <delay_init+0xc>)
     994:	6018      	str	r0, [r3, #0]
     996:	4b02      	ldr	r3, [pc, #8]	; (9a0 <delay_init+0x10>)
     998:	4798      	blx	r3
     99a:	bd08      	pop	{r3, pc}
     99c:	200004b4 	.word	0x200004b4
     9a0:	00001d69 	.word	0x00001d69

000009a4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     9a4:	b508      	push	{r3, lr}
	return _event_system_init();
     9a6:	4b01      	ldr	r3, [pc, #4]	; (9ac <event_system_init+0x8>)
     9a8:	4798      	blx	r3
}
     9aa:	bd08      	pop	{r3, pc}
     9ac:	00001691 	.word	0x00001691

000009b0 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9b2:	460f      	mov	r7, r1
     9b4:	4616      	mov	r6, r2
	ASSERT(io);
     9b6:	4604      	mov	r4, r0
     9b8:	f240 1227 	movw	r2, #295	; 0x127
     9bc:	4909      	ldr	r1, [pc, #36]	; (9e4 <_spi_m_async_io_write+0x34>)
     9be:	3000      	adds	r0, #0
     9c0:	bf18      	it	ne
     9c2:	2001      	movne	r0, #1
     9c4:	4b08      	ldr	r3, [pc, #32]	; (9e8 <_spi_m_async_io_write+0x38>)
     9c6:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
     9c8:	2500      	movs	r5, #0
     9ca:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
     9cc:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
     9ce:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     9d0:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     9d2:	2310      	movs	r3, #16
     9d4:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
     9d6:	2101      	movs	r1, #1
     9d8:	f1a4 0020 	sub.w	r0, r4, #32
     9dc:	4b03      	ldr	r3, [pc, #12]	; (9ec <_spi_m_async_io_write+0x3c>)
     9de:	4798      	blx	r3

	return ERR_NONE;
}
     9e0:	4628      	mov	r0, r5
     9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9e4:	00003e6c 	.word	0x00003e6c
     9e8:	000013f5 	.word	0x000013f5
     9ec:	00001c29 	.word	0x00001c29

000009f0 <_spi_m_async_io_read>:
{
     9f0:	b570      	push	{r4, r5, r6, lr}
     9f2:	460d      	mov	r5, r1
     9f4:	4616      	mov	r6, r2
	ASSERT(io);
     9f6:	4604      	mov	r4, r0
     9f8:	f240 1205 	movw	r2, #261	; 0x105
     9fc:	490c      	ldr	r1, [pc, #48]	; (a30 <_spi_m_async_io_read+0x40>)
     9fe:	3000      	adds	r0, #0
     a00:	bf18      	it	ne
     a02:	2001      	movne	r0, #1
     a04:	4b0b      	ldr	r3, [pc, #44]	; (a34 <_spi_m_async_io_read+0x44>)
     a06:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
     a08:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
     a0a:	2500      	movs	r5, #0
     a0c:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
     a0e:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     a10:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     a12:	2310      	movs	r3, #16
     a14:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
     a16:	3c20      	subs	r4, #32
     a18:	2101      	movs	r1, #1
     a1a:	4620      	mov	r0, r4
     a1c:	4b06      	ldr	r3, [pc, #24]	; (a38 <_spi_m_async_io_read+0x48>)
     a1e:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
     a20:	f240 11ff 	movw	r1, #511	; 0x1ff
     a24:	4620      	mov	r0, r4
     a26:	4b05      	ldr	r3, [pc, #20]	; (a3c <_spi_m_async_io_read+0x4c>)
     a28:	4798      	blx	r3
}
     a2a:	4628      	mov	r0, r5
     a2c:	bd70      	pop	{r4, r5, r6, pc}
     a2e:	bf00      	nop
     a30:	00003e6c 	.word	0x00003e6c
     a34:	000013f5 	.word	0x000013f5
     a38:	00001c5d 	.word	0x00001c5d
     a3c:	00001cd9 	.word	0x00001cd9

00000a40 <_spi_dev_error>:
{
     a40:	b570      	push	{r4, r5, r6, lr}
     a42:	4604      	mov	r4, r0
     a44:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     a46:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
     a48:	2100      	movs	r1, #0
     a4a:	4b09      	ldr	r3, [pc, #36]	; (a70 <_spi_dev_error+0x30>)
     a4c:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
     a4e:	2100      	movs	r1, #0
     a50:	4620      	mov	r0, r4
     a52:	4b08      	ldr	r3, [pc, #32]	; (a74 <_spi_dev_error+0x34>)
     a54:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
     a56:	2100      	movs	r1, #0
     a58:	4620      	mov	r0, r4
     a5a:	4b07      	ldr	r3, [pc, #28]	; (a78 <_spi_dev_error+0x38>)
     a5c:	4798      	blx	r3
	spi->stat = 0;
     a5e:	2300      	movs	r3, #0
     a60:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
     a64:	6b23      	ldr	r3, [r4, #48]	; 0x30
     a66:	b113      	cbz	r3, a6e <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
     a68:	4631      	mov	r1, r6
     a6a:	4628      	mov	r0, r5
     a6c:	4798      	blx	r3
     a6e:	bd70      	pop	{r4, r5, r6, pc}
     a70:	00001c29 	.word	0x00001c29
     a74:	00001c5d 	.word	0x00001c5d
     a78:	00001c9d 	.word	0x00001c9d

00000a7c <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
     a7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
     a7e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     a80:	429a      	cmp	r2, r3
     a82:	d200      	bcs.n	a86 <_spi_dev_complete+0xa>
     a84:	4770      	bx	lr
{
     a86:	b510      	push	{r4, lr}
     a88:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
     a8a:	2100      	movs	r1, #0
     a8c:	4b04      	ldr	r3, [pc, #16]	; (aa0 <_spi_dev_complete+0x24>)
     a8e:	4798      	blx	r3
		spi->stat = 0;
     a90:	2300      	movs	r3, #0
     a92:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     a96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a98:	b10b      	cbz	r3, a9e <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
     a9a:	1f20      	subs	r0, r4, #4
     a9c:	4798      	blx	r3
     a9e:	bd10      	pop	{r4, pc}
     aa0:	00001c9d 	.word	0x00001c9d

00000aa4 <_spi_dev_tx>:
{
     aa4:	b510      	push	{r4, lr}
     aa6:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
     aa8:	7903      	ldrb	r3, [r0, #4]
     aaa:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
     aac:	6b42      	ldr	r2, [r0, #52]	; 0x34
     aae:	6c03      	ldr	r3, [r0, #64]	; 0x40
     ab0:	f103 0101 	add.w	r1, r3, #1
     ab4:	6401      	str	r1, [r0, #64]	; 0x40
     ab6:	bf94      	ite	ls
     ab8:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
     aba:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     abe:	4b08      	ldr	r3, [pc, #32]	; (ae0 <_spi_dev_tx+0x3c>)
     ac0:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
     ac2:	6c22      	ldr	r2, [r4, #64]	; 0x40
     ac4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     ac6:	429a      	cmp	r2, r3
     ac8:	d000      	beq.n	acc <_spi_dev_tx+0x28>
     aca:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
     acc:	2100      	movs	r1, #0
     ace:	4620      	mov	r0, r4
     ad0:	4b04      	ldr	r3, [pc, #16]	; (ae4 <_spi_dev_tx+0x40>)
     ad2:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
     ad4:	2101      	movs	r1, #1
     ad6:	4620      	mov	r0, r4
     ad8:	4b03      	ldr	r3, [pc, #12]	; (ae8 <_spi_dev_tx+0x44>)
     ada:	4798      	blx	r3
}
     adc:	e7f5      	b.n	aca <_spi_dev_tx+0x26>
     ade:	bf00      	nop
     ae0:	00001cd9 	.word	0x00001cd9
     ae4:	00001c29 	.word	0x00001c29
     ae8:	00001c9d 	.word	0x00001c9d

00000aec <_spi_dev_rx>:
{
     aec:	b570      	push	{r4, r5, r6, lr}
     aee:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
     af0:	6b85      	ldr	r5, [r0, #56]	; 0x38
     af2:	b305      	cbz	r5, b36 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
     af4:	7903      	ldrb	r3, [r0, #4]
     af6:	2b01      	cmp	r3, #1
     af8:	d916      	bls.n	b28 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
     afa:	6c06      	ldr	r6, [r0, #64]	; 0x40
     afc:	1c73      	adds	r3, r6, #1
     afe:	6403      	str	r3, [r0, #64]	; 0x40
     b00:	4b18      	ldr	r3, [pc, #96]	; (b64 <_spi_dev_rx+0x78>)
     b02:	4798      	blx	r3
     b04:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
     b08:	6c23      	ldr	r3, [r4, #64]	; 0x40
     b0a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     b0c:	4293      	cmp	r3, r2
     b0e:	d21d      	bcs.n	b4c <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
     b10:	6b62      	ldr	r2, [r4, #52]	; 0x34
     b12:	b1b2      	cbz	r2, b42 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
     b14:	7921      	ldrb	r1, [r4, #4]
     b16:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
     b18:	bf94      	ite	ls
     b1a:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
     b1c:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     b20:	4620      	mov	r0, r4
     b22:	4b11      	ldr	r3, [pc, #68]	; (b68 <_spi_dev_rx+0x7c>)
     b24:	4798      	blx	r3
     b26:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
     b28:	6c06      	ldr	r6, [r0, #64]	; 0x40
     b2a:	1c73      	adds	r3, r6, #1
     b2c:	6403      	str	r3, [r0, #64]	; 0x40
     b2e:	4b0d      	ldr	r3, [pc, #52]	; (b64 <_spi_dev_rx+0x78>)
     b30:	4798      	blx	r3
     b32:	55a8      	strb	r0, [r5, r6]
     b34:	e7e8      	b.n	b08 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
     b36:	4b0b      	ldr	r3, [pc, #44]	; (b64 <_spi_dev_rx+0x78>)
     b38:	4798      	blx	r3
		spi->xfercnt++;
     b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
     b3c:	3301      	adds	r3, #1
     b3e:	6423      	str	r3, [r4, #64]	; 0x40
     b40:	e7e2      	b.n	b08 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
     b42:	88e1      	ldrh	r1, [r4, #6]
     b44:	4620      	mov	r0, r4
     b46:	4b08      	ldr	r3, [pc, #32]	; (b68 <_spi_dev_rx+0x7c>)
     b48:	4798      	blx	r3
     b4a:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
     b4c:	2100      	movs	r1, #0
     b4e:	4620      	mov	r0, r4
     b50:	4b06      	ldr	r3, [pc, #24]	; (b6c <_spi_dev_rx+0x80>)
     b52:	4798      	blx	r3
		spi->stat = 0;
     b54:	2300      	movs	r3, #0
     b56:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     b5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b5c:	b10b      	cbz	r3, b62 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
     b5e:	1f20      	subs	r0, r4, #4
     b60:	4798      	blx	r3
     b62:	bd70      	pop	{r4, r5, r6, pc}
     b64:	00001d09 	.word	0x00001d09
     b68:	00001cd9 	.word	0x00001cd9
     b6c:	00001c5d 	.word	0x00001c5d

00000b70 <spi_m_async_init>:
{
     b70:	b570      	push	{r4, r5, r6, lr}
     b72:	460d      	mov	r5, r1
	ASSERT(spi && hw);
     b74:	4606      	mov	r6, r0
     b76:	b330      	cbz	r0, bc6 <spi_m_async_init+0x56>
     b78:	1c08      	adds	r0, r1, #0
     b7a:	bf18      	it	ne
     b7c:	2001      	movne	r0, #1
     b7e:	22a5      	movs	r2, #165	; 0xa5
     b80:	4912      	ldr	r1, [pc, #72]	; (bcc <spi_m_async_init+0x5c>)
     b82:	4b13      	ldr	r3, [pc, #76]	; (bd0 <spi_m_async_init+0x60>)
     b84:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     b86:	4634      	mov	r4, r6
     b88:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
     b8c:	4629      	mov	r1, r5
     b8e:	4620      	mov	r0, r4
     b90:	4b10      	ldr	r3, [pc, #64]	; (bd4 <spi_m_async_init+0x64>)
     b92:	4798      	blx	r3
	if (rc >= 0) {
     b94:	2800      	cmp	r0, #0
     b96:	db15      	blt.n	bc4 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
     b98:	4a0f      	ldr	r2, [pc, #60]	; (bd8 <spi_m_async_init+0x68>)
     b9a:	2100      	movs	r1, #0
     b9c:	4620      	mov	r0, r4
     b9e:	4d0f      	ldr	r5, [pc, #60]	; (bdc <spi_m_async_init+0x6c>)
     ba0:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
     ba2:	4a0f      	ldr	r2, [pc, #60]	; (be0 <spi_m_async_init+0x70>)
     ba4:	2101      	movs	r1, #1
     ba6:	4620      	mov	r0, r4
     ba8:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
     baa:	4a0e      	ldr	r2, [pc, #56]	; (be4 <spi_m_async_init+0x74>)
     bac:	2102      	movs	r1, #2
     bae:	4620      	mov	r0, r4
     bb0:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
     bb2:	4a0d      	ldr	r2, [pc, #52]	; (be8 <spi_m_async_init+0x78>)
     bb4:	2103      	movs	r1, #3
     bb6:	4620      	mov	r0, r4
     bb8:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
     bba:	4b0c      	ldr	r3, [pc, #48]	; (bec <spi_m_async_init+0x7c>)
     bbc:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
     bbe:	4b0c      	ldr	r3, [pc, #48]	; (bf0 <spi_m_async_init+0x80>)
     bc0:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
     bc2:	2000      	movs	r0, #0
}
     bc4:	bd70      	pop	{r4, r5, r6, pc}
     bc6:	2000      	movs	r0, #0
     bc8:	e7d9      	b.n	b7e <spi_m_async_init+0xe>
     bca:	bf00      	nop
     bcc:	00003e6c 	.word	0x00003e6c
     bd0:	000013f5 	.word	0x000013f5
     bd4:	00001bbd 	.word	0x00001bbd
     bd8:	00000aa5 	.word	0x00000aa5
     bdc:	00001d35 	.word	0x00001d35
     be0:	00000aed 	.word	0x00000aed
     be4:	00000a7d 	.word	0x00000a7d
     be8:	00000a41 	.word	0x00000a41
     bec:	000009f1 	.word	0x000009f1
     bf0:	000009b1 	.word	0x000009b1

00000bf4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bf6:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     bf8:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     bfa:	b12f      	cbz	r7, c08 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     bfc:	688d      	ldr	r5, [r1, #8]
     bfe:	463c      	mov	r4, r7
     c00:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     c02:	f1c2 0e01 	rsb	lr, r2, #1
     c06:	e00b      	b.n	c20 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     c08:	4b0e      	ldr	r3, [pc, #56]	; (c44 <timer_add_timer_task+0x50>)
     c0a:	4798      	blx	r3
		return;
     c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     c0e:	4473      	add	r3, lr
     c10:	68a0      	ldr	r0, [r4, #8]
     c12:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     c14:	42ab      	cmp	r3, r5
     c16:	d20a      	bcs.n	c2e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     c18:	6823      	ldr	r3, [r4, #0]
     c1a:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     c1c:	b153      	cbz	r3, c34 <timer_add_timer_task+0x40>
     c1e:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     c20:	6863      	ldr	r3, [r4, #4]
     c22:	4293      	cmp	r3, r2
     c24:	d8f3      	bhi.n	c0e <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     c26:	68a0      	ldr	r0, [r4, #8]
     c28:	4403      	add	r3, r0
     c2a:	1a9b      	subs	r3, r3, r2
     c2c:	e7f2      	b.n	c14 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     c2e:	42a7      	cmp	r7, r4
     c30:	d004      	beq.n	c3c <timer_add_timer_task+0x48>
     c32:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     c34:	4620      	mov	r0, r4
     c36:	4b04      	ldr	r3, [pc, #16]	; (c48 <timer_add_timer_task+0x54>)
     c38:	4798      	blx	r3
     c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     c3c:	4660      	mov	r0, ip
     c3e:	4b01      	ldr	r3, [pc, #4]	; (c44 <timer_add_timer_task+0x50>)
     c40:	4798      	blx	r3
     c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c44:	0000141d 	.word	0x0000141d
     c48:	00001449 	.word	0x00001449

00000c4c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     c50:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     c52:	6907      	ldr	r7, [r0, #16]
     c54:	3701      	adds	r7, #1
     c56:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     c58:	7e03      	ldrb	r3, [r0, #24]
     c5a:	f013 0f01 	tst.w	r3, #1
     c5e:	d113      	bne.n	c88 <timer_process_counted+0x3c>
     c60:	7e03      	ldrb	r3, [r0, #24]
     c62:	f013 0f02 	tst.w	r3, #2
     c66:	d10f      	bne.n	c88 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     c68:	b354      	cbz	r4, cc0 <timer_process_counted+0x74>
     c6a:	6863      	ldr	r3, [r4, #4]
     c6c:	1afb      	subs	r3, r7, r3
     c6e:	68a2      	ldr	r2, [r4, #8]
     c70:	4293      	cmp	r3, r2
     c72:	d307      	bcc.n	c84 <timer_process_counted+0x38>
     c74:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     c76:	f100 0814 	add.w	r8, r0, #20
     c7a:	f8df 9048 	ldr.w	r9, [pc, #72]	; cc4 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     c7e:	f8df a048 	ldr.w	sl, [pc, #72]	; cc8 <timer_process_counted+0x7c>
     c82:	e012      	b.n	caa <timer_process_counted+0x5e>
     c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     c88:	7e03      	ldrb	r3, [r0, #24]
     c8a:	f043 0302 	orr.w	r3, r3, #2
     c8e:	7603      	strb	r3, [r0, #24]
		return;
     c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c94:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     c96:	68e3      	ldr	r3, [r4, #12]
     c98:	4620      	mov	r0, r4
     c9a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     c9c:	b185      	cbz	r5, cc0 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     c9e:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     ca0:	686b      	ldr	r3, [r5, #4]
     ca2:	1afb      	subs	r3, r7, r3
     ca4:	68aa      	ldr	r2, [r5, #8]
     ca6:	4293      	cmp	r3, r2
     ca8:	d30a      	bcc.n	cc0 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     caa:	4640      	mov	r0, r8
     cac:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     cae:	7c23      	ldrb	r3, [r4, #16]
     cb0:	2b01      	cmp	r3, #1
     cb2:	d1ef      	bne.n	c94 <timer_process_counted+0x48>
			tmp->time_label = time;
     cb4:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     cb6:	463a      	mov	r2, r7
     cb8:	4621      	mov	r1, r4
     cba:	4640      	mov	r0, r8
     cbc:	47d0      	blx	sl
     cbe:	e7e9      	b.n	c94 <timer_process_counted+0x48>
     cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     cc4:	00001491 	.word	0x00001491
     cc8:	00000bf5 	.word	0x00000bf5

00000ccc <timer_init>:
{
     ccc:	b538      	push	{r3, r4, r5, lr}
     cce:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     cd0:	4604      	mov	r4, r0
     cd2:	b178      	cbz	r0, cf4 <timer_init+0x28>
     cd4:	1c08      	adds	r0, r1, #0
     cd6:	bf18      	it	ne
     cd8:	2001      	movne	r0, #1
     cda:	223b      	movs	r2, #59	; 0x3b
     cdc:	4906      	ldr	r1, [pc, #24]	; (cf8 <timer_init+0x2c>)
     cde:	4b07      	ldr	r3, [pc, #28]	; (cfc <timer_init+0x30>)
     ce0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     ce2:	4629      	mov	r1, r5
     ce4:	4620      	mov	r0, r4
     ce6:	4b06      	ldr	r3, [pc, #24]	; (d00 <timer_init+0x34>)
     ce8:	4798      	blx	r3
	descr->time                           = 0;
     cea:	2000      	movs	r0, #0
     cec:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     cee:	4b05      	ldr	r3, [pc, #20]	; (d04 <timer_init+0x38>)
     cf0:	6023      	str	r3, [r4, #0]
}
     cf2:	bd38      	pop	{r3, r4, r5, pc}
     cf4:	2000      	movs	r0, #0
     cf6:	e7f0      	b.n	cda <timer_init+0xe>
     cf8:	00003e8c 	.word	0x00003e8c
     cfc:	000013f5 	.word	0x000013f5
     d00:	00001879 	.word	0x00001879
     d04:	00000c4d 	.word	0x00000c4d

00000d08 <timer_start>:
{
     d08:	b510      	push	{r4, lr}
	ASSERT(descr);
     d0a:	4604      	mov	r4, r0
     d0c:	2253      	movs	r2, #83	; 0x53
     d0e:	4909      	ldr	r1, [pc, #36]	; (d34 <timer_start+0x2c>)
     d10:	3000      	adds	r0, #0
     d12:	bf18      	it	ne
     d14:	2001      	movne	r0, #1
     d16:	4b08      	ldr	r3, [pc, #32]	; (d38 <timer_start+0x30>)
     d18:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     d1a:	4620      	mov	r0, r4
     d1c:	4b07      	ldr	r3, [pc, #28]	; (d3c <timer_start+0x34>)
     d1e:	4798      	blx	r3
     d20:	b920      	cbnz	r0, d2c <timer_start+0x24>
	_timer_start(&descr->device);
     d22:	4620      	mov	r0, r4
     d24:	4b06      	ldr	r3, [pc, #24]	; (d40 <timer_start+0x38>)
     d26:	4798      	blx	r3
	return ERR_NONE;
     d28:	2000      	movs	r0, #0
     d2a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     d2c:	f06f 0010 	mvn.w	r0, #16
}
     d30:	bd10      	pop	{r4, pc}
     d32:	bf00      	nop
     d34:	00003e8c 	.word	0x00003e8c
     d38:	000013f5 	.word	0x000013f5
     d3c:	00001993 	.word	0x00001993
     d40:	000018ed 	.word	0x000018ed

00000d44 <timer_stop>:
{
     d44:	b510      	push	{r4, lr}
	ASSERT(descr);
     d46:	4604      	mov	r4, r0
     d48:	2261      	movs	r2, #97	; 0x61
     d4a:	4909      	ldr	r1, [pc, #36]	; (d70 <timer_stop+0x2c>)
     d4c:	3000      	adds	r0, #0
     d4e:	bf18      	it	ne
     d50:	2001      	movne	r0, #1
     d52:	4b08      	ldr	r3, [pc, #32]	; (d74 <timer_stop+0x30>)
     d54:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
     d56:	4620      	mov	r0, r4
     d58:	4b07      	ldr	r3, [pc, #28]	; (d78 <timer_stop+0x34>)
     d5a:	4798      	blx	r3
     d5c:	b120      	cbz	r0, d68 <timer_stop+0x24>
	_timer_stop(&descr->device);
     d5e:	4620      	mov	r0, r4
     d60:	4b06      	ldr	r3, [pc, #24]	; (d7c <timer_stop+0x38>)
     d62:	4798      	blx	r3
	return ERR_NONE;
     d64:	2000      	movs	r0, #0
     d66:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     d68:	f06f 0010 	mvn.w	r0, #16
}
     d6c:	bd10      	pop	{r4, pc}
     d6e:	bf00      	nop
     d70:	00003e8c 	.word	0x00003e8c
     d74:	000013f5 	.word	0x000013f5
     d78:	00001993 	.word	0x00001993
     d7c:	00001949 	.word	0x00001949

00000d80 <timer_set_clock_cycles_per_tick>:
{
     d80:	b538      	push	{r3, r4, r5, lr}
     d82:	460d      	mov	r5, r1
	ASSERT(descr);
     d84:	4604      	mov	r4, r0
     d86:	226f      	movs	r2, #111	; 0x6f
     d88:	4905      	ldr	r1, [pc, #20]	; (da0 <timer_set_clock_cycles_per_tick+0x20>)
     d8a:	3000      	adds	r0, #0
     d8c:	bf18      	it	ne
     d8e:	2001      	movne	r0, #1
     d90:	4b04      	ldr	r3, [pc, #16]	; (da4 <timer_set_clock_cycles_per_tick+0x24>)
     d92:	4798      	blx	r3
	_timer_set_period(&descr->device, clock_cycles);
     d94:	4629      	mov	r1, r5
     d96:	4620      	mov	r0, r4
     d98:	4b03      	ldr	r3, [pc, #12]	; (da8 <timer_set_clock_cycles_per_tick+0x28>)
     d9a:	4798      	blx	r3
}
     d9c:	2000      	movs	r0, #0
     d9e:	bd38      	pop	{r3, r4, r5, pc}
     da0:	00003e8c 	.word	0x00003e8c
     da4:	000013f5 	.word	0x000013f5
     da8:	00001985 	.word	0x00001985

00000dac <timer_add_task>:
{
     dac:	b570      	push	{r4, r5, r6, lr}
     dae:	b082      	sub	sp, #8
     db0:	460d      	mov	r5, r1
	ASSERT(descr && task);
     db2:	4604      	mov	r4, r0
     db4:	b318      	cbz	r0, dfe <timer_add_task+0x52>
     db6:	1c08      	adds	r0, r1, #0
     db8:	bf18      	it	ne
     dba:	2001      	movne	r0, #1
     dbc:	227a      	movs	r2, #122	; 0x7a
     dbe:	491e      	ldr	r1, [pc, #120]	; (e38 <timer_add_task+0x8c>)
     dc0:	4b1e      	ldr	r3, [pc, #120]	; (e3c <timer_add_task+0x90>)
     dc2:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     dc4:	7e23      	ldrb	r3, [r4, #24]
     dc6:	f043 0301 	orr.w	r3, r3, #1
     dca:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     dcc:	f104 0614 	add.w	r6, r4, #20
     dd0:	4629      	mov	r1, r5
     dd2:	4630      	mov	r0, r6
     dd4:	4b1a      	ldr	r3, [pc, #104]	; (e40 <timer_add_task+0x94>)
     dd6:	4798      	blx	r3
     dd8:	b998      	cbnz	r0, e02 <timer_add_task+0x56>
	task->time_label = descr->time;
     dda:	6923      	ldr	r3, [r4, #16]
     ddc:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     dde:	6922      	ldr	r2, [r4, #16]
     de0:	4629      	mov	r1, r5
     de2:	4630      	mov	r0, r6
     de4:	4b17      	ldr	r3, [pc, #92]	; (e44 <timer_add_task+0x98>)
     de6:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     de8:	7e23      	ldrb	r3, [r4, #24]
     dea:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     dee:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     df0:	7e23      	ldrb	r3, [r4, #24]
     df2:	f013 0f02 	tst.w	r3, #2
     df6:	d110      	bne.n	e1a <timer_add_task+0x6e>
	return ERR_NONE;
     df8:	2000      	movs	r0, #0
}
     dfa:	b002      	add	sp, #8
     dfc:	bd70      	pop	{r4, r5, r6, pc}
     dfe:	2000      	movs	r0, #0
     e00:	e7dc      	b.n	dbc <timer_add_task+0x10>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     e02:	7e23      	ldrb	r3, [r4, #24]
     e04:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     e08:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     e0a:	227f      	movs	r2, #127	; 0x7f
     e0c:	490a      	ldr	r1, [pc, #40]	; (e38 <timer_add_task+0x8c>)
     e0e:	2000      	movs	r0, #0
     e10:	4b0a      	ldr	r3, [pc, #40]	; (e3c <timer_add_task+0x90>)
     e12:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     e14:	f06f 0011 	mvn.w	r0, #17
     e18:	e7ef      	b.n	dfa <timer_add_task+0x4e>
		CRITICAL_SECTION_ENTER()
     e1a:	a801      	add	r0, sp, #4
     e1c:	4b0a      	ldr	r3, [pc, #40]	; (e48 <timer_add_task+0x9c>)
     e1e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     e20:	7e23      	ldrb	r3, [r4, #24]
     e22:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     e26:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     e28:	4620      	mov	r0, r4
     e2a:	4b08      	ldr	r3, [pc, #32]	; (e4c <timer_add_task+0xa0>)
     e2c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     e2e:	a801      	add	r0, sp, #4
     e30:	4b07      	ldr	r3, [pc, #28]	; (e50 <timer_add_task+0xa4>)
     e32:	4798      	blx	r3
	return ERR_NONE;
     e34:	2000      	movs	r0, #0
     e36:	e7e0      	b.n	dfa <timer_add_task+0x4e>
     e38:	00003e8c 	.word	0x00003e8c
     e3c:	000013f5 	.word	0x000013f5
     e40:	000013fb 	.word	0x000013fb
     e44:	00000bf5 	.word	0x00000bf5
     e48:	00003045 	.word	0x00003045
     e4c:	000019a7 	.word	0x000019a7
     e50:	00003053 	.word	0x00003053

00000e54 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     e54:	4b0f      	ldr	r3, [pc, #60]	; (e94 <_usb_d_find_ep+0x40>)
     e56:	7859      	ldrb	r1, [r3, #1]
     e58:	4288      	cmp	r0, r1
     e5a:	d018      	beq.n	e8e <_usb_d_find_ep+0x3a>
{
     e5c:	b430      	push	{r4, r5}
     e5e:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     e60:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     e62:	f000 050f 	and.w	r5, r0, #15
     e66:	e007      	b.n	e78 <_usb_d_find_ep+0x24>
     e68:	3301      	adds	r3, #1
     e6a:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     e6c:	2b04      	cmp	r3, #4
     e6e:	d009      	beq.n	e84 <_usb_d_find_ep+0x30>
     e70:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     e72:	7851      	ldrb	r1, [r2, #1]
     e74:	4281      	cmp	r1, r0
     e76:	d007      	beq.n	e88 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     e78:	7814      	ldrb	r4, [r2, #0]
     e7a:	2c00      	cmp	r4, #0
     e7c:	d1f4      	bne.n	e68 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     e7e:	428d      	cmp	r5, r1
     e80:	d1f2      	bne.n	e68 <_usb_d_find_ep+0x14>
     e82:	e001      	b.n	e88 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     e84:	f04f 33ff 	mov.w	r3, #4294967295
}
     e88:	4618      	mov	r0, r3
     e8a:	bc30      	pop	{r4, r5}
     e8c:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     e8e:	2300      	movs	r3, #0
}
     e90:	4618      	mov	r0, r3
     e92:	4770      	bx	lr
     e94:	200004b8 	.word	0x200004b8

00000e98 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     e98:	2000      	movs	r0, #0
     e9a:	4770      	bx	lr

00000e9c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     e9c:	b538      	push	{r3, r4, r5, lr}
     e9e:	4604      	mov	r4, r0
     ea0:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     ea2:	4b09      	ldr	r3, [pc, #36]	; (ec8 <usb_d_cb_trans_more+0x2c>)
     ea4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     ea6:	4b09      	ldr	r3, [pc, #36]	; (ecc <usb_d_cb_trans_more+0x30>)
     ea8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     eac:	789b      	ldrb	r3, [r3, #2]
     eae:	2b03      	cmp	r3, #3
     eb0:	d001      	beq.n	eb6 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     eb2:	2000      	movs	r0, #0
}
     eb4:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
     eb6:	4b05      	ldr	r3, [pc, #20]	; (ecc <usb_d_cb_trans_more+0x30>)
     eb8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     ebc:	6983      	ldr	r3, [r0, #24]
     ebe:	4629      	mov	r1, r5
     ec0:	4620      	mov	r0, r4
     ec2:	4798      	blx	r3
     ec4:	bd38      	pop	{r3, r4, r5, pc}
     ec6:	bf00      	nop
     ec8:	00000e55 	.word	0x00000e55
     ecc:	200004b8 	.word	0x200004b8

00000ed0 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ed2:	b085      	sub	sp, #20
     ed4:	4606      	mov	r6, r0
     ed6:	460d      	mov	r5, r1
     ed8:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     eda:	4b4d      	ldr	r3, [pc, #308]	; (1010 <_usb_d_cb_trans_done+0x140>)
     edc:	4798      	blx	r3
     ede:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     ee0:	2d00      	cmp	r5, #0
     ee2:	d15b      	bne.n	f9c <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
     ee4:	4a4b      	ldr	r2, [pc, #300]	; (1014 <_usb_d_cb_trans_done+0x144>)
     ee6:	0143      	lsls	r3, r0, #5
     ee8:	18d1      	adds	r1, r2, r3
     eea:	2000      	movs	r0, #0
     eec:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     eee:	5cd3      	ldrb	r3, [r2, r3]
     ef0:	b173      	cbz	r3, f10 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     ef2:	4b48      	ldr	r3, [pc, #288]	; (1014 <_usb_d_cb_trans_done+0x144>)
     ef4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     ef8:	2201      	movs	r2, #1
     efa:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     efc:	4845      	ldr	r0, [pc, #276]	; (1014 <_usb_d_cb_trans_done+0x144>)
     efe:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     f02:	69c3      	ldr	r3, [r0, #28]
     f04:	463a      	mov	r2, r7
     f06:	78c1      	ldrb	r1, [r0, #3]
     f08:	4630      	mov	r0, r6
     f0a:	4798      	blx	r3
}
     f0c:	b005      	add	sp, #20
     f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     f10:	788b      	ldrb	r3, [r1, #2]
     f12:	2b03      	cmp	r3, #3
     f14:	d00b      	beq.n	f2e <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     f16:	483f      	ldr	r0, [pc, #252]	; (1014 <_usb_d_cb_trans_done+0x144>)
     f18:	eb00 1244 	add.w	r2, r0, r4, lsl #5
     f1c:	4614      	mov	r4, r2
     f1e:	69d3      	ldr	r3, [r2, #28]
     f20:	320c      	adds	r2, #12
     f22:	2100      	movs	r1, #0
     f24:	7860      	ldrb	r0, [r4, #1]
     f26:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     f28:	2302      	movs	r3, #2
     f2a:	70a3      	strb	r3, [r4, #2]
     f2c:	e7ee      	b.n	f0c <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     f2e:	460b      	mov	r3, r1
     f30:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     f34:	460a      	mov	r2, r1
     f36:	69ce      	ldr	r6, [r1, #28]
     f38:	320c      	adds	r2, #12
     f3a:	2101      	movs	r1, #1
     f3c:	7858      	ldrb	r0, [r3, #1]
     f3e:	47b0      	blx	r6
		if (err) {
     f40:	b1a0      	cbz	r0, f6c <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     f42:	4b34      	ldr	r3, [pc, #208]	; (1014 <_usb_d_cb_trans_done+0x144>)
     f44:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     f48:	2205      	movs	r2, #5
     f4a:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     f4c:	2202      	movs	r2, #2
     f4e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     f50:	2d00      	cmp	r5, #0
     f52:	db09      	blt.n	f68 <_usb_d_cb_trans_done+0x98>
     f54:	482f      	ldr	r0, [pc, #188]	; (1014 <_usb_d_cb_trans_done+0x144>)
     f56:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     f5a:	7840      	ldrb	r0, [r0, #1]
     f5c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     f60:	2101      	movs	r1, #1
     f62:	4b2d      	ldr	r3, [pc, #180]	; (1018 <_usb_d_cb_trans_done+0x148>)
     f64:	4798      	blx	r3
     f66:	e7d1      	b.n	f0c <_usb_d_cb_trans_done+0x3c>
     f68:	7858      	ldrb	r0, [r3, #1]
     f6a:	e7f9      	b.n	f60 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     f6c:	4829      	ldr	r0, [pc, #164]	; (1014 <_usb_d_cb_trans_done+0x144>)
     f6e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     f72:	2304      	movs	r3, #4
     f74:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     f76:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
     f78:	2200      	movs	r2, #0
     f7a:	9201      	str	r2, [sp, #4]
     f7c:	9202      	str	r2, [sp, #8]
     f7e:	4295      	cmp	r5, r2
     f80:	bfac      	ite	ge
     f82:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
     f86:	f003 030f 	andlt.w	r3, r3, #15
     f8a:	f88d 300c 	strb.w	r3, [sp, #12]
     f8e:	2301      	movs	r3, #1
     f90:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     f94:	a801      	add	r0, sp, #4
     f96:	4b21      	ldr	r3, [pc, #132]	; (101c <_usb_d_cb_trans_done+0x14c>)
     f98:	4798      	blx	r3
     f9a:	e7b7      	b.n	f0c <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
     f9c:	2d01      	cmp	r5, #1
     f9e:	d00a      	beq.n	fb6 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
     fa0:	2d02      	cmp	r5, #2
     fa2:	d01c      	beq.n	fde <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
     fa4:	2d03      	cmp	r5, #3
     fa6:	d02a      	beq.n	ffe <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     fa8:	4b1a      	ldr	r3, [pc, #104]	; (1014 <_usb_d_cb_trans_done+0x144>)
     faa:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     fae:	2206      	movs	r2, #6
     fb0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     fb2:	70da      	strb	r2, [r3, #3]
     fb4:	e7a2      	b.n	efc <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
     fb6:	4a17      	ldr	r2, [pc, #92]	; (1014 <_usb_d_cb_trans_done+0x144>)
     fb8:	0143      	lsls	r3, r0, #5
     fba:	18d1      	adds	r1, r2, r3
     fbc:	2002      	movs	r0, #2
     fbe:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     fc0:	5cd3      	ldrb	r3, [r2, r3]
     fc2:	b12b      	cbz	r3, fd0 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     fc4:	4b13      	ldr	r3, [pc, #76]	; (1014 <_usb_d_cb_trans_done+0x144>)
     fc6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     fca:	2205      	movs	r2, #5
     fcc:	709a      	strb	r2, [r3, #2]
     fce:	e795      	b.n	efc <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     fd0:	460b      	mov	r3, r1
     fd2:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     fd4:	2100      	movs	r1, #0
     fd6:	4630      	mov	r0, r6
     fd8:	4b0f      	ldr	r3, [pc, #60]	; (1018 <_usb_d_cb_trans_done+0x148>)
     fda:	4798      	blx	r3
     fdc:	e78e      	b.n	efc <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     fde:	4a0d      	ldr	r2, [pc, #52]	; (1014 <_usb_d_cb_trans_done+0x144>)
     fe0:	0143      	lsls	r3, r0, #5
     fe2:	18d1      	adds	r1, r2, r3
     fe4:	2004      	movs	r0, #4
     fe6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     fe8:	5cd3      	ldrb	r3, [r2, r3]
     fea:	b12b      	cbz	r3, ff8 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     fec:	4b09      	ldr	r3, [pc, #36]	; (1014 <_usb_d_cb_trans_done+0x144>)
     fee:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     ff2:	2201      	movs	r2, #1
     ff4:	709a      	strb	r2, [r3, #2]
     ff6:	e781      	b.n	efc <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     ff8:	2302      	movs	r3, #2
     ffa:	708b      	strb	r3, [r1, #2]
			return;
     ffc:	e786      	b.n	f0c <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     ffe:	4b05      	ldr	r3, [pc, #20]	; (1014 <_usb_d_cb_trans_done+0x144>)
    1000:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1004:	2200      	movs	r2, #0
    1006:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1008:	2205      	movs	r2, #5
    100a:	70da      	strb	r2, [r3, #3]
    100c:	e776      	b.n	efc <_usb_d_cb_trans_done+0x2c>
    100e:	bf00      	nop
    1010:	00000e55 	.word	0x00000e55
    1014:	200004b8 	.word	0x200004b8
    1018:	00002bfd 	.word	0x00002bfd
    101c:	00002da5 	.word	0x00002da5

00001020 <usb_d_cb_trans_setup>:
{
    1020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1024:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1026:	4b1c      	ldr	r3, [pc, #112]	; (1098 <usb_d_cb_trans_setup+0x78>)
    1028:	4798      	blx	r3
    102a:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    102c:	4c1b      	ldr	r4, [pc, #108]	; (109c <usb_d_cb_trans_setup+0x7c>)
    102e:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    1032:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1034:	4621      	mov	r1, r4
    1036:	4628      	mov	r0, r5
    1038:	4b19      	ldr	r3, [pc, #100]	; (10a0 <usb_d_cb_trans_setup+0x80>)
    103a:	4798      	blx	r3
	if (n != 8) {
    103c:	b2c0      	uxtb	r0, r0
    103e:	2808      	cmp	r0, #8
    1040:	d009      	beq.n	1056 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1042:	2101      	movs	r1, #1
    1044:	4628      	mov	r0, r5
    1046:	4c17      	ldr	r4, [pc, #92]	; (10a4 <usb_d_cb_trans_setup+0x84>)
    1048:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    104a:	2101      	movs	r1, #1
    104c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    1050:	47a0      	blx	r4
		return;
    1052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1056:	2100      	movs	r1, #0
    1058:	4628      	mov	r0, r5
    105a:	4f12      	ldr	r7, [pc, #72]	; (10a4 <usb_d_cb_trans_setup+0x84>)
    105c:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    105e:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    1062:	2100      	movs	r1, #0
    1064:	4640      	mov	r0, r8
    1066:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1068:	4b0c      	ldr	r3, [pc, #48]	; (109c <usb_d_cb_trans_setup+0x7c>)
    106a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    106e:	2201      	movs	r2, #1
    1070:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    1072:	695b      	ldr	r3, [r3, #20]
    1074:	4621      	mov	r1, r4
    1076:	4628      	mov	r0, r5
    1078:	4798      	blx	r3
    107a:	b108      	cbz	r0, 1080 <usb_d_cb_trans_setup+0x60>
    107c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1080:	4b06      	ldr	r3, [pc, #24]	; (109c <usb_d_cb_trans_setup+0x7c>)
    1082:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1086:	2305      	movs	r3, #5
    1088:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    108a:	2101      	movs	r1, #1
    108c:	4628      	mov	r0, r5
    108e:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1090:	2101      	movs	r1, #1
    1092:	4640      	mov	r0, r8
    1094:	47b8      	blx	r7
    1096:	e7f1      	b.n	107c <usb_d_cb_trans_setup+0x5c>
    1098:	00000e55 	.word	0x00000e55
    109c:	200004b8 	.word	0x200004b8
    10a0:	00002d45 	.word	0x00002d45
    10a4:	00002bfd 	.word	0x00002bfd

000010a8 <usb_d_init>:

int32_t usb_d_init(void)
{
    10a8:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    10aa:	4b11      	ldr	r3, [pc, #68]	; (10f0 <usb_d_init+0x48>)
    10ac:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    10ae:	2800      	cmp	r0, #0
    10b0:	db1c      	blt.n	10ec <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    10b2:	4c10      	ldr	r4, [pc, #64]	; (10f4 <usb_d_init+0x4c>)
    10b4:	2280      	movs	r2, #128	; 0x80
    10b6:	2100      	movs	r1, #0
    10b8:	4620      	mov	r0, r4
    10ba:	4b0f      	ldr	r3, [pc, #60]	; (10f8 <usb_d_init+0x50>)
    10bc:	4798      	blx	r3
    10be:	4623      	mov	r3, r4
    10c0:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    10c4:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    10c6:	4a0d      	ldr	r2, [pc, #52]	; (10fc <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    10c8:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    10ca:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    10cc:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    10ce:	61da      	str	r2, [r3, #28]
    10d0:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    10d2:	4283      	cmp	r3, r0
    10d4:	d1f8      	bne.n	10c8 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    10d6:	490a      	ldr	r1, [pc, #40]	; (1100 <usb_d_init+0x58>)
    10d8:	2000      	movs	r0, #0
    10da:	4c0a      	ldr	r4, [pc, #40]	; (1104 <usb_d_init+0x5c>)
    10dc:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    10de:	490a      	ldr	r1, [pc, #40]	; (1108 <usb_d_init+0x60>)
    10e0:	2001      	movs	r0, #1
    10e2:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    10e4:	4909      	ldr	r1, [pc, #36]	; (110c <usb_d_init+0x64>)
    10e6:	2002      	movs	r0, #2
    10e8:	47a0      	blx	r4
	return ERR_NONE;
    10ea:	2000      	movs	r0, #0
}
    10ec:	bd10      	pop	{r4, pc}
    10ee:	bf00      	nop
    10f0:	000025f1 	.word	0x000025f1
    10f4:	200004b8 	.word	0x200004b8
    10f8:	00003c95 	.word	0x00003c95
    10fc:	00000e99 	.word	0x00000e99
    1100:	00001021 	.word	0x00001021
    1104:	00002fa9 	.word	0x00002fa9
    1108:	00000e9d 	.word	0x00000e9d
    110c:	00000ed1 	.word	0x00000ed1

00001110 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    1110:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1112:	4b01      	ldr	r3, [pc, #4]	; (1118 <usb_d_register_callback+0x8>)
    1114:	4798      	blx	r3
    1116:	bd08      	pop	{r3, pc}
    1118:	00002f85 	.word	0x00002f85

0000111c <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    111c:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    111e:	4b01      	ldr	r3, [pc, #4]	; (1124 <usb_d_enable+0x8>)
    1120:	4798      	blx	r3
}
    1122:	bd08      	pop	{r3, pc}
    1124:	000026ed 	.word	0x000026ed

00001128 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    1128:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    112a:	4b01      	ldr	r3, [pc, #4]	; (1130 <usb_d_attach+0x8>)
    112c:	4798      	blx	r3
    112e:	bd08      	pop	{r3, pc}
    1130:	00002759 	.word	0x00002759

00001134 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    1134:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    1136:	4b01      	ldr	r3, [pc, #4]	; (113c <usb_d_set_address+0x8>)
    1138:	4798      	blx	r3
    113a:	bd08      	pop	{r3, pc}
    113c:	0000276b 	.word	0x0000276b

00001140 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1142:	4606      	mov	r6, r0
    1144:	460c      	mov	r4, r1
    1146:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1148:	4b0f      	ldr	r3, [pc, #60]	; (1188 <usb_d_ep_init+0x48>)
    114a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    114c:	2800      	cmp	r0, #0
    114e:	da14      	bge.n	117a <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1150:	20ff      	movs	r0, #255	; 0xff
    1152:	4b0d      	ldr	r3, [pc, #52]	; (1188 <usb_d_ep_init+0x48>)
    1154:	4798      	blx	r3
		if (ep_index < 0) {
    1156:	1e05      	subs	r5, r0, #0
    1158:	db12      	blt.n	1180 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    115a:	463a      	mov	r2, r7
    115c:	4621      	mov	r1, r4
    115e:	4630      	mov	r0, r6
    1160:	4b0a      	ldr	r3, [pc, #40]	; (118c <usb_d_ep_init+0x4c>)
    1162:	4798      	blx	r3
	if (rc < 0) {
    1164:	2800      	cmp	r0, #0
    1166:	db0d      	blt.n	1184 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1168:	4b09      	ldr	r3, [pc, #36]	; (1190 <usb_d_ep_init+0x50>)
    116a:	0168      	lsls	r0, r5, #5
    116c:	181a      	adds	r2, r3, r0
    116e:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1170:	f004 0403 	and.w	r4, r4, #3
    1174:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    1176:	2000      	movs	r0, #0
    1178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    117a:	f06f 0013 	mvn.w	r0, #19
    117e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    1180:	f06f 0014 	mvn.w	r0, #20
}
    1184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1186:	bf00      	nop
    1188:	00000e55 	.word	0x00000e55
    118c:	00002779 	.word	0x00002779
    1190:	200004b8 	.word	0x200004b8

00001194 <usb_d_ep0_init>:
{
    1194:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1196:	4602      	mov	r2, r0
    1198:	2100      	movs	r1, #0
    119a:	4608      	mov	r0, r1
    119c:	4b01      	ldr	r3, [pc, #4]	; (11a4 <usb_d_ep0_init+0x10>)
    119e:	4798      	blx	r3
}
    11a0:	bd08      	pop	{r3, pc}
    11a2:	bf00      	nop
    11a4:	00001141 	.word	0x00001141

000011a8 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    11a8:	b538      	push	{r3, r4, r5, lr}
    11aa:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    11ac:	4b06      	ldr	r3, [pc, #24]	; (11c8 <usb_d_ep_deinit+0x20>)
    11ae:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    11b0:	1e04      	subs	r4, r0, #0
    11b2:	db07      	blt.n	11c4 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    11b4:	4628      	mov	r0, r5
    11b6:	4b05      	ldr	r3, [pc, #20]	; (11cc <usb_d_ep_deinit+0x24>)
    11b8:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    11ba:	4805      	ldr	r0, [pc, #20]	; (11d0 <usb_d_ep_deinit+0x28>)
    11bc:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    11c0:	23ff      	movs	r3, #255	; 0xff
    11c2:	7043      	strb	r3, [r0, #1]
    11c4:	bd38      	pop	{r3, r4, r5, pc}
    11c6:	bf00      	nop
    11c8:	00000e55 	.word	0x00000e55
    11cc:	00002891 	.word	0x00002891
    11d0:	200004b8 	.word	0x200004b8

000011d4 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    11d4:	b538      	push	{r3, r4, r5, lr}
    11d6:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    11d8:	4b0e      	ldr	r3, [pc, #56]	; (1214 <usb_d_ep_enable+0x40>)
    11da:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    11dc:	1e04      	subs	r4, r0, #0
    11de:	db16      	blt.n	120e <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    11e0:	0163      	lsls	r3, r4, #5
    11e2:	4a0d      	ldr	r2, [pc, #52]	; (1218 <usb_d_ep_enable+0x44>)
    11e4:	5cd3      	ldrb	r3, [r2, r3]
    11e6:	2b00      	cmp	r3, #0
    11e8:	bf0c      	ite	eq
    11ea:	2202      	moveq	r2, #2
    11ec:	2201      	movne	r2, #1
    11ee:	4b0a      	ldr	r3, [pc, #40]	; (1218 <usb_d_ep_enable+0x44>)
    11f0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    11f4:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    11f6:	4628      	mov	r0, r5
    11f8:	4b08      	ldr	r3, [pc, #32]	; (121c <usb_d_ep_enable+0x48>)
    11fa:	4798      	blx	r3
	if (rc < 0) {
    11fc:	2800      	cmp	r0, #0
    11fe:	db00      	blt.n	1202 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1200:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1202:	4b05      	ldr	r3, [pc, #20]	; (1218 <usb_d_ep_enable+0x44>)
    1204:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    1208:	2300      	movs	r3, #0
    120a:	70a3      	strb	r3, [r4, #2]
    120c:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    120e:	f06f 0011 	mvn.w	r0, #17
    1212:	e7f5      	b.n	1200 <usb_d_ep_enable+0x2c>
    1214:	00000e55 	.word	0x00000e55
    1218:	200004b8 	.word	0x200004b8
    121c:	00002955 	.word	0x00002955

00001220 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1224:	b086      	sub	sp, #24
    1226:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1228:	7a07      	ldrb	r7, [r0, #8]
    122a:	4638      	mov	r0, r7
    122c:	4b3f      	ldr	r3, [pc, #252]	; (132c <usb_d_ep_transfer+0x10c>)
    122e:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1230:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    1232:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1236:	1e06      	subs	r6, r0, #0
    1238:	db72      	blt.n	1320 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    123a:	a804      	add	r0, sp, #16
    123c:	4b3c      	ldr	r3, [pc, #240]	; (1330 <usb_d_ep_transfer+0x110>)
    123e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1240:	4b3c      	ldr	r3, [pc, #240]	; (1334 <usb_d_ep_transfer+0x114>)
    1242:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1246:	789b      	ldrb	r3, [r3, #2]
    1248:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    124c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1250:	b2db      	uxtb	r3, r3
    1252:	2b01      	cmp	r3, #1
    1254:	d011      	beq.n	127a <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1256:	a804      	add	r0, sp, #16
    1258:	4b37      	ldr	r3, [pc, #220]	; (1338 <usb_d_ep_transfer+0x118>)
    125a:	4798      	blx	r3
		switch (state) {
    125c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1260:	b2db      	uxtb	r3, r3
    1262:	2b05      	cmp	r3, #5
    1264:	d05f      	beq.n	1326 <usb_d_ep_transfer+0x106>
    1266:	2b06      	cmp	r3, #6
    1268:	d023      	beq.n	12b2 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    126a:	2b00      	cmp	r3, #0
    126c:	bf0c      	ite	eq
    126e:	f06f 0012 	mvneq.w	r0, #18
    1272:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    1274:	b006      	add	sp, #24
    1276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    127a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1334 <usb_d_ep_transfer+0x114>
    127e:	ea4f 1946 	mov.w	r9, r6, lsl #5
    1282:	eb0a 0309 	add.w	r3, sl, r9
    1286:	2203      	movs	r2, #3
    1288:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    128a:	a804      	add	r0, sp, #16
    128c:	4b2a      	ldr	r3, [pc, #168]	; (1338 <usb_d_ep_transfer+0x118>)
    128e:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1290:	f81a 3009 	ldrb.w	r3, [sl, r9]
    1294:	b183      	cbz	r3, 12b8 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1296:	7a22      	ldrb	r2, [r4, #8]
    1298:	3500      	adds	r5, #0
    129a:	bf18      	it	ne
    129c:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    129e:	6823      	ldr	r3, [r4, #0]
    12a0:	9301      	str	r3, [sp, #4]
    12a2:	f8cd 8008 	str.w	r8, [sp, #8]
    12a6:	f017 0f80 	tst.w	r7, #128	; 0x80
    12aa:	d119      	bne.n	12e0 <usb_d_ep_transfer+0xc0>
    12ac:	f002 030f 	and.w	r3, r2, #15
    12b0:	e018      	b.n	12e4 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    12b2:	f06f 000f 	mvn.w	r0, #15
    12b6:	e7dd      	b.n	1274 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    12b8:	4b1e      	ldr	r3, [pc, #120]	; (1334 <usb_d_ep_transfer+0x114>)
    12ba:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    12be:	7cda      	ldrb	r2, [r3, #19]
    12c0:	7c9d      	ldrb	r5, [r3, #18]
    12c2:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    12c6:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    12c8:	b9a5      	cbnz	r5, 12f4 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    12ca:	4b1a      	ldr	r3, [pc, #104]	; (1334 <usb_d_ep_transfer+0x114>)
    12cc:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    12d0:	2304      	movs	r3, #4
    12d2:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    12d4:	2300      	movs	r3, #0
			zlp                 = true;
    12d6:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    12d8:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    12da:	6821      	ldr	r1, [r4, #0]
    12dc:	9101      	str	r1, [sp, #4]
    12de:	9302      	str	r3, [sp, #8]
    12e0:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    12e4:	f88d 300c 	strb.w	r3, [sp, #12]
    12e8:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    12ec:	a801      	add	r0, sp, #4
    12ee:	4b13      	ldr	r3, [pc, #76]	; (133c <usb_d_ep_transfer+0x11c>)
    12f0:	4798      	blx	r3
	return rc;
    12f2:	e7bf      	b.n	1274 <usb_d_ep_transfer+0x54>
    12f4:	4643      	mov	r3, r8
    12f6:	45a8      	cmp	r8, r5
    12f8:	bf28      	it	cs
    12fa:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    12fc:	4a0d      	ldr	r2, [pc, #52]	; (1334 <usb_d_ep_transfer+0x114>)
    12fe:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    1302:	f996 200c 	ldrsb.w	r2, [r6, #12]
    1306:	2a00      	cmp	r2, #0
    1308:	db05      	blt.n	1316 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    130a:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    130c:	6821      	ldr	r1, [r4, #0]
    130e:	9101      	str	r1, [sp, #4]
    1310:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1312:	2500      	movs	r5, #0
    1314:	e7ca      	b.n	12ac <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    1316:	429d      	cmp	r5, r3
    1318:	bf94      	ite	ls
    131a:	2500      	movls	r5, #0
    131c:	2501      	movhi	r5, #1
    131e:	e7db      	b.n	12d8 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    1320:	f06f 0011 	mvn.w	r0, #17
    1324:	e7a6      	b.n	1274 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    1326:	2002      	movs	r0, #2
    1328:	e7a4      	b.n	1274 <usb_d_ep_transfer+0x54>
    132a:	bf00      	nop
    132c:	00000e55 	.word	0x00000e55
    1330:	00003045 	.word	0x00003045
    1334:	200004b8 	.word	0x200004b8
    1338:	00003053 	.word	0x00003053
    133c:	00002da5 	.word	0x00002da5

00001340 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1340:	b538      	push	{r3, r4, r5, lr}
    1342:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1344:	b141      	cbz	r1, 1358 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1346:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1348:	bf0c      	ite	eq
    134a:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    134c:	2102      	movne	r1, #2
    134e:	4b13      	ldr	r3, [pc, #76]	; (139c <usb_d_ep_halt+0x5c>)
    1350:	4798      	blx	r3
    1352:	4603      	mov	r3, r0
	}
}
    1354:	4618      	mov	r0, r3
    1356:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1358:	4b11      	ldr	r3, [pc, #68]	; (13a0 <usb_d_ep_halt+0x60>)
    135a:	4798      	blx	r3
	if (ep_index < 0) {
    135c:	1e05      	subs	r5, r0, #0
    135e:	db19      	blt.n	1394 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1360:	2102      	movs	r1, #2
    1362:	4620      	mov	r0, r4
    1364:	4b0d      	ldr	r3, [pc, #52]	; (139c <usb_d_ep_halt+0x5c>)
    1366:	4798      	blx	r3
    1368:	4603      	mov	r3, r0
    136a:	2800      	cmp	r0, #0
    136c:	d0f2      	beq.n	1354 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    136e:	2100      	movs	r1, #0
    1370:	4620      	mov	r0, r4
    1372:	4b0a      	ldr	r3, [pc, #40]	; (139c <usb_d_ep_halt+0x5c>)
    1374:	4798      	blx	r3
		if (rc < 0) {
    1376:	1e03      	subs	r3, r0, #0
    1378:	dbec      	blt.n	1354 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    137a:	4b0a      	ldr	r3, [pc, #40]	; (13a4 <usb_d_ep_halt+0x64>)
    137c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1380:	2201      	movs	r2, #1
    1382:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1384:	2103      	movs	r1, #3
    1386:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1388:	69db      	ldr	r3, [r3, #28]
    138a:	2200      	movs	r2, #0
    138c:	4620      	mov	r0, r4
    138e:	4798      	blx	r3
	return ERR_NONE;
    1390:	2300      	movs	r3, #0
    1392:	e7df      	b.n	1354 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    1394:	f06f 0311 	mvn.w	r3, #17
    1398:	e7dc      	b.n	1354 <usb_d_ep_halt+0x14>
    139a:	bf00      	nop
    139c:	00002bfd 	.word	0x00002bfd
    13a0:	00000e55 	.word	0x00000e55
    13a4:	200004b8 	.word	0x200004b8

000013a8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    13a8:	b538      	push	{r3, r4, r5, lr}
    13aa:	460d      	mov	r5, r1
    13ac:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    13ae:	4b0e      	ldr	r3, [pc, #56]	; (13e8 <usb_d_ep_register_callback+0x40>)
    13b0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    13b2:	4b0e      	ldr	r3, [pc, #56]	; (13ec <usb_d_ep_register_callback+0x44>)
    13b4:	2c00      	cmp	r4, #0
    13b6:	bf08      	it	eq
    13b8:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    13ba:	2800      	cmp	r0, #0
    13bc:	db13      	blt.n	13e6 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    13be:	2d01      	cmp	r5, #1
    13c0:	d008      	beq.n	13d4 <usb_d_ep_register_callback+0x2c>
    13c2:	b115      	cbz	r5, 13ca <usb_d_ep_register_callback+0x22>
    13c4:	2d02      	cmp	r5, #2
    13c6:	d00a      	beq.n	13de <usb_d_ep_register_callback+0x36>
    13c8:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    13ca:	4b09      	ldr	r3, [pc, #36]	; (13f0 <usb_d_ep_register_callback+0x48>)
    13cc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    13d0:	6144      	str	r4, [r0, #20]
		break;
    13d2:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    13d4:	4b06      	ldr	r3, [pc, #24]	; (13f0 <usb_d_ep_register_callback+0x48>)
    13d6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    13da:	6184      	str	r4, [r0, #24]
		break;
    13dc:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    13de:	4b04      	ldr	r3, [pc, #16]	; (13f0 <usb_d_ep_register_callback+0x48>)
    13e0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    13e4:	61c4      	str	r4, [r0, #28]
    13e6:	bd38      	pop	{r3, r4, r5, pc}
    13e8:	00000e55 	.word	0x00000e55
    13ec:	00000e99 	.word	0x00000e99
    13f0:	200004b8 	.word	0x200004b8

000013f4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    13f4:	b900      	cbnz	r0, 13f8 <assert+0x4>
		__asm("BKPT #0");
    13f6:	be00      	bkpt	0x0000
    13f8:	4770      	bx	lr

000013fa <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    13fa:	6803      	ldr	r3, [r0, #0]
    13fc:	b14b      	cbz	r3, 1412 <is_list_element+0x18>
		if (it == element) {
    13fe:	428b      	cmp	r3, r1
    1400:	d009      	beq.n	1416 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1402:	681b      	ldr	r3, [r3, #0]
    1404:	b11b      	cbz	r3, 140e <is_list_element+0x14>
		if (it == element) {
    1406:	4299      	cmp	r1, r3
    1408:	d1fb      	bne.n	1402 <is_list_element+0x8>
			return true;
    140a:	2001      	movs	r0, #1
		}
	}

	return false;
}
    140c:	4770      	bx	lr
	return false;
    140e:	2000      	movs	r0, #0
    1410:	4770      	bx	lr
    1412:	2000      	movs	r0, #0
    1414:	4770      	bx	lr
			return true;
    1416:	2001      	movs	r0, #1
    1418:	4770      	bx	lr
	...

0000141c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    141c:	b538      	push	{r3, r4, r5, lr}
    141e:	4604      	mov	r4, r0
    1420:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1422:	4b06      	ldr	r3, [pc, #24]	; (143c <list_insert_as_head+0x20>)
    1424:	4798      	blx	r3
    1426:	f080 0001 	eor.w	r0, r0, #1
    142a:	2239      	movs	r2, #57	; 0x39
    142c:	4904      	ldr	r1, [pc, #16]	; (1440 <list_insert_as_head+0x24>)
    142e:	b2c0      	uxtb	r0, r0
    1430:	4b04      	ldr	r3, [pc, #16]	; (1444 <list_insert_as_head+0x28>)
    1432:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1434:	6823      	ldr	r3, [r4, #0]
    1436:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1438:	6025      	str	r5, [r4, #0]
    143a:	bd38      	pop	{r3, r4, r5, pc}
    143c:	000013fb 	.word	0x000013fb
    1440:	00003ea4 	.word	0x00003ea4
    1444:	000013f5 	.word	0x000013f5

00001448 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1448:	6803      	ldr	r3, [r0, #0]
    144a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    144c:	6001      	str	r1, [r0, #0]
    144e:	4770      	bx	lr

00001450 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    1450:	b570      	push	{r4, r5, r6, lr}
    1452:	4605      	mov	r5, r0
    1454:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    1456:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1458:	4b0a      	ldr	r3, [pc, #40]	; (1484 <list_insert_at_end+0x34>)
    145a:	4798      	blx	r3
    145c:	f080 0001 	eor.w	r0, r0, #1
    1460:	224f      	movs	r2, #79	; 0x4f
    1462:	4909      	ldr	r1, [pc, #36]	; (1488 <list_insert_at_end+0x38>)
    1464:	b2c0      	uxtb	r0, r0
    1466:	4b09      	ldr	r3, [pc, #36]	; (148c <list_insert_at_end+0x3c>)
    1468:	4798      	blx	r3

	if (!list->head) {
    146a:	682b      	ldr	r3, [r5, #0]
    146c:	b91b      	cbnz	r3, 1476 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    146e:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    1470:	6033      	str	r3, [r6, #0]
		return;
    1472:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    1474:	461c      	mov	r4, r3
	while (it->next) {
    1476:	6823      	ldr	r3, [r4, #0]
    1478:	2b00      	cmp	r3, #0
    147a:	d1fb      	bne.n	1474 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    147c:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    147e:	6033      	str	r3, [r6, #0]
    1480:	bd70      	pop	{r4, r5, r6, pc}
    1482:	bf00      	nop
    1484:	000013fb 	.word	0x000013fb
    1488:	00003ea4 	.word	0x00003ea4
    148c:	000013f5 	.word	0x000013f5

00001490 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1490:	6803      	ldr	r3, [r0, #0]
    1492:	b10b      	cbz	r3, 1498 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1494:	681a      	ldr	r2, [r3, #0]
    1496:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1498:	4618      	mov	r0, r3
    149a:	4770      	bx	lr

0000149c <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    149c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    149e:	f013 0f01 	tst.w	r3, #1
    14a2:	d11b      	bne.n	14dc <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    14a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    14a6:	f013 0f03 	tst.w	r3, #3
    14aa:	d1fb      	bne.n	14a4 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    14ac:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    14ae:	f013 0f02 	tst.w	r3, #2
    14b2:	d00d      	beq.n	14d0 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    14b4:	8803      	ldrh	r3, [r0, #0]
    14b6:	f023 0302 	bic.w	r3, r3, #2
    14ba:	041b      	lsls	r3, r3, #16
    14bc:	0c1b      	lsrs	r3, r3, #16
    14be:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    14c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    14c2:	f013 0f03 	tst.w	r3, #3
    14c6:	d1fb      	bne.n	14c0 <_adc_init+0x24>
    14c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    14ca:	f013 0f02 	tst.w	r3, #2
    14ce:	d1fb      	bne.n	14c8 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    14d0:	2301      	movs	r3, #1
    14d2:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    14d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    14d6:	f013 0f03 	tst.w	r3, #3
    14da:	d1fb      	bne.n	14d4 <_adc_init+0x38>
    14dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    14de:	f013 0f01 	tst.w	r3, #1
    14e2:	d1fb      	bne.n	14dc <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    14e4:	2316      	movs	r3, #22
    14e6:	4a37      	ldr	r2, [pc, #220]	; (15c4 <_adc_init+0x128>)
    14e8:	fb03 2301 	mla	r3, r3, r1, r2
    14ec:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    14ee:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    14f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    14f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    14f6:	2b00      	cmp	r3, #0
    14f8:	d1fa      	bne.n	14f0 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    14fa:	2316      	movs	r3, #22
    14fc:	4a31      	ldr	r2, [pc, #196]	; (15c4 <_adc_init+0x128>)
    14fe:	fb03 2301 	mla	r3, r3, r1, r2
    1502:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1504:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1506:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1508:	f3c3 030b 	ubfx	r3, r3, #0, #12
    150c:	2b00      	cmp	r3, #0
    150e:	d1fa      	bne.n	1506 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1510:	2316      	movs	r3, #22
    1512:	4a2c      	ldr	r2, [pc, #176]	; (15c4 <_adc_init+0x128>)
    1514:	fb03 2301 	mla	r3, r3, r1, r2
    1518:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    151a:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    151c:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    151e:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1520:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1522:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1526:	2b00      	cmp	r3, #0
    1528:	d1fa      	bne.n	1520 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    152a:	2316      	movs	r3, #22
    152c:	4a25      	ldr	r2, [pc, #148]	; (15c4 <_adc_init+0x128>)
    152e:	fb03 2301 	mla	r3, r3, r1, r2
    1532:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1534:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1536:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1538:	f3c3 030b 	ubfx	r3, r3, #0, #12
    153c:	2b00      	cmp	r3, #0
    153e:	d1fa      	bne.n	1536 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1540:	2316      	movs	r3, #22
    1542:	4a20      	ldr	r2, [pc, #128]	; (15c4 <_adc_init+0x128>)
    1544:	fb03 2301 	mla	r3, r3, r1, r2
    1548:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    154a:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    154c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    154e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1552:	2b00      	cmp	r3, #0
    1554:	d1fa      	bne.n	154c <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1556:	2316      	movs	r3, #22
    1558:	4a1a      	ldr	r2, [pc, #104]	; (15c4 <_adc_init+0x128>)
    155a:	fb03 2301 	mla	r3, r3, r1, r2
    155e:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    1560:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1562:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1564:	f013 0f80 	tst.w	r3, #128	; 0x80
    1568:	d1fb      	bne.n	1562 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    156a:	2316      	movs	r3, #22
    156c:	4a15      	ldr	r2, [pc, #84]	; (15c4 <_adc_init+0x128>)
    156e:	fb03 2301 	mla	r3, r3, r1, r2
    1572:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1574:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1576:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1578:	f413 7f80 	tst.w	r3, #256	; 0x100
    157c:	d1fb      	bne.n	1576 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    157e:	2316      	movs	r3, #22
    1580:	4a10      	ldr	r2, [pc, #64]	; (15c4 <_adc_init+0x128>)
    1582:	fb03 2301 	mla	r3, r3, r1, r2
    1586:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1588:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    158a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    158c:	f413 7f00 	tst.w	r3, #512	; 0x200
    1590:	d1fb      	bne.n	158a <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1592:	2316      	movs	r3, #22
    1594:	4a0b      	ldr	r2, [pc, #44]	; (15c4 <_adc_init+0x128>)
    1596:	fb03 2301 	mla	r3, r3, r1, r2
    159a:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    159c:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    159e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    15a0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    15a4:	d1fb      	bne.n	159e <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    15a6:	2216      	movs	r2, #22
    15a8:	4b06      	ldr	r3, [pc, #24]	; (15c4 <_adc_init+0x128>)
    15aa:	fb02 3101 	mla	r1, r2, r1, r3
    15ae:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    15b0:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    15b2:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    15b4:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    15b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    15b8:	f013 0f03 	tst.w	r3, #3
    15bc:	d1fb      	bne.n	15b6 <_adc_init+0x11a>

	return ERR_NONE;
}
    15be:	2000      	movs	r0, #0
    15c0:	4770      	bx	lr
    15c2:	bf00      	nop
    15c4:	00003ec4 	.word	0x00003ec4

000015c8 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    15c8:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    15cc:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
		if (_adcs[i].number == n) {
    15d0:	f3c0 2087 	ubfx	r0, r0, #10, #8
    15d4:	b138      	cbz	r0, 15e6 <_adc_get_regs+0x1e>
{
    15d6:	b508      	push	{r3, lr}
	ASSERT(false);
    15d8:	2288      	movs	r2, #136	; 0x88
    15da:	4904      	ldr	r1, [pc, #16]	; (15ec <_adc_get_regs+0x24>)
    15dc:	2000      	movs	r0, #0
    15de:	4b04      	ldr	r3, [pc, #16]	; (15f0 <_adc_get_regs+0x28>)
    15e0:	4798      	blx	r3
}
    15e2:	2000      	movs	r0, #0
    15e4:	bd08      	pop	{r3, pc}
    15e6:	2000      	movs	r0, #0
    15e8:	4770      	bx	lr
    15ea:	bf00      	nop
    15ec:	00003edc 	.word	0x00003edc
    15f0:	000013f5 	.word	0x000013f5

000015f4 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    15f4:	b538      	push	{r3, r4, r5, lr}
    15f6:	460c      	mov	r4, r1
	ASSERT(device);
    15f8:	4605      	mov	r5, r0
    15fa:	22ce      	movs	r2, #206	; 0xce
    15fc:	4907      	ldr	r1, [pc, #28]	; (161c <_adc_sync_init+0x28>)
    15fe:	3000      	adds	r0, #0
    1600:	bf18      	it	ne
    1602:	2001      	movne	r0, #1
    1604:	4b06      	ldr	r3, [pc, #24]	; (1620 <_adc_sync_init+0x2c>)
    1606:	4798      	blx	r3

	device->hw = hw;
    1608:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    160a:	4620      	mov	r0, r4
    160c:	4b05      	ldr	r3, [pc, #20]	; (1624 <_adc_sync_init+0x30>)
    160e:	4798      	blx	r3
    1610:	4601      	mov	r1, r0
    1612:	4620      	mov	r0, r4
    1614:	4b04      	ldr	r3, [pc, #16]	; (1628 <_adc_sync_init+0x34>)
    1616:	4798      	blx	r3
}
    1618:	bd38      	pop	{r3, r4, r5, pc}
    161a:	bf00      	nop
    161c:	00003edc 	.word	0x00003edc
    1620:	000013f5 	.word	0x000013f5
    1624:	000015c9 	.word	0x000015c9
    1628:	0000149d 	.word	0x0000149d

0000162c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    162c:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    162e:	4a11      	ldr	r2, [pc, #68]	; (1674 <_init_chip+0x48>)
    1630:	8813      	ldrh	r3, [r2, #0]
    1632:	b29b      	uxth	r3, r3
    1634:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1636:	4b10      	ldr	r3, [pc, #64]	; (1678 <_init_chip+0x4c>)
    1638:	4798      	blx	r3
	_oscctrl_init_sources();
    163a:	4b10      	ldr	r3, [pc, #64]	; (167c <_init_chip+0x50>)
    163c:	4798      	blx	r3
	_mclk_init();
    163e:	4b10      	ldr	r3, [pc, #64]	; (1680 <_init_chip+0x54>)
    1640:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1642:	4b10      	ldr	r3, [pc, #64]	; (1684 <_init_chip+0x58>)
    1644:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1646:	f640 70ff 	movw	r0, #4095	; 0xfff
    164a:	4b0f      	ldr	r3, [pc, #60]	; (1688 <_init_chip+0x5c>)
    164c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    164e:	4b0f      	ldr	r3, [pc, #60]	; (168c <_init_chip+0x60>)
    1650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1652:	62da      	str	r2, [r3, #44]	; 0x2c
    1654:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    1658:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    165c:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    1660:	f042 02ef 	orr.w	r2, r2, #239	; 0xef
    1664:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    1668:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    166c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    1670:	bd08      	pop	{r3, pc}
    1672:	bf00      	nop
    1674:	41004000 	.word	0x41004000
    1678:	00001755 	.word	0x00001755
    167c:	00001775 	.word	0x00001775
    1680:	00001749 	.word	0x00001749
    1684:	00001791 	.word	0x00001791
    1688:	000016ed 	.word	0x000016ed
    168c:	41008000 	.word	0x41008000

00001690 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1690:	b430      	push	{r4, r5}
    1692:	4814      	ldr	r0, [pc, #80]	; (16e4 <_event_system_init+0x54>)
    1694:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1698:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    169a:	4c13      	ldr	r4, [pc, #76]	; (16e8 <_event_system_init+0x58>)
    169c:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    169e:	f813 1b01 	ldrb.w	r1, [r3], #1
    16a2:	3248      	adds	r2, #72	; 0x48
    16a4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    16a8:	42ab      	cmp	r3, r5
    16aa:	d1f7      	bne.n	169c <_event_system_init+0xc>
    16ac:	480d      	ldr	r0, [pc, #52]	; (16e4 <_event_system_init+0x54>)
    16ae:	f100 0442 	add.w	r4, r0, #66	; 0x42
    16b2:	3080      	adds	r0, #128	; 0x80
    16b4:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    16b6:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    16ba:	00ca      	lsls	r2, r1, #3
    16bc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    16c0:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    16c4:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    16c6:	f850 3f04 	ldr.w	r3, [r0, #4]!
    16ca:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    16cc:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    16d0:	43db      	mvns	r3, r3
    16d2:	b2db      	uxtb	r3, r3
    16d4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    16d8:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    16da:	2920      	cmp	r1, #32
    16dc:	d1eb      	bne.n	16b6 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    16de:	2000      	movs	r0, #0
    16e0:	bc30      	pop	{r4, r5}
    16e2:	4770      	bx	lr
    16e4:	00003ef4 	.word	0x00003ef4
    16e8:	4100e000 	.word	0x4100e000

000016ec <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    16ec:	f010 0f01 	tst.w	r0, #1
    16f0:	d008      	beq.n	1704 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    16f2:	4a11      	ldr	r2, [pc, #68]	; (1738 <_gclk_init_generators_by_fref+0x4c>)
    16f4:	4b11      	ldr	r3, [pc, #68]	; (173c <_gclk_init_generators_by_fref+0x50>)
    16f6:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    16f8:	4619      	mov	r1, r3
    16fa:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    16fe:	684b      	ldr	r3, [r1, #4]
    1700:	4213      	tst	r3, r2
    1702:	d1fc      	bne.n	16fe <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1704:	f010 0f08 	tst.w	r0, #8
    1708:	d008      	beq.n	171c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    170a:	4a0d      	ldr	r2, [pc, #52]	; (1740 <_gclk_init_generators_by_fref+0x54>)
    170c:	4b0b      	ldr	r3, [pc, #44]	; (173c <_gclk_init_generators_by_fref+0x50>)
    170e:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1710:	4619      	mov	r1, r3
    1712:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1716:	684b      	ldr	r3, [r1, #4]
    1718:	4213      	tst	r3, r2
    171a:	d1fc      	bne.n	1716 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    171c:	f010 0f10 	tst.w	r0, #16
    1720:	d008      	beq.n	1734 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1722:	4a08      	ldr	r2, [pc, #32]	; (1744 <_gclk_init_generators_by_fref+0x58>)
    1724:	4b05      	ldr	r3, [pc, #20]	; (173c <_gclk_init_generators_by_fref+0x50>)
    1726:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1728:	4619      	mov	r1, r3
    172a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    172e:	684b      	ldr	r3, [r1, #4]
    1730:	4213      	tst	r3, r2
    1732:	d1fc      	bne.n	172e <_gclk_init_generators_by_fref+0x42>
    1734:	4770      	bx	lr
    1736:	bf00      	nop
    1738:	00010101 	.word	0x00010101
    173c:	40001c00 	.word	0x40001c00
    1740:	00010105 	.word	0x00010105
    1744:	00010106 	.word	0x00010106

00001748 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1748:	2201      	movs	r2, #1
    174a:	4b01      	ldr	r3, [pc, #4]	; (1750 <_mclk_init+0x8>)
    174c:	715a      	strb	r2, [r3, #5]
    174e:	4770      	bx	lr
    1750:	40000800 	.word	0x40000800

00001754 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1754:	4b06      	ldr	r3, [pc, #24]	; (1770 <_osc32kctrl_init_sources+0x1c>)
    1756:	f242 028e 	movw	r2, #8334	; 0x208e
    175a:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    175c:	2200      	movs	r2, #0
    175e:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1760:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1762:	69d9      	ldr	r1, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1764:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1768:	61d9      	str	r1, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    176a:	741a      	strb	r2, [r3, #16]
    176c:	4770      	bx	lr
    176e:	bf00      	nop
    1770:	40001400 	.word	0x40001400

00001774 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1774:	4a04      	ldr	r2, [pc, #16]	; (1788 <_oscctrl_init_sources+0x14>)
    1776:	4b05      	ldr	r3, [pc, #20]	; (178c <_oscctrl_init_sources+0x18>)
    1778:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    177a:	461a      	mov	r2, r3
    177c:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    177e:	f013 0f02 	tst.w	r3, #2
    1782:	d0fb      	beq.n	177c <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1784:	4770      	bx	lr
    1786:	bf00      	nop
    1788:	03002606 	.word	0x03002606
    178c:	40001000 	.word	0x40001000

00001790 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1790:	4a36      	ldr	r2, [pc, #216]	; (186c <_oscctrl_init_referenced_generators+0xdc>)
    1792:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1794:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1798:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    179c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    179e:	4611      	mov	r1, r2
    17a0:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    17a4:	684b      	ldr	r3, [r1, #4]
    17a6:	4213      	tst	r3, r2
    17a8:	d1fc      	bne.n	17a4 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    17aa:	4a30      	ldr	r2, [pc, #192]	; (186c <_oscctrl_init_referenced_generators+0xdc>)
    17ac:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    17ae:	f013 0f04 	tst.w	r3, #4
    17b2:	d1fb      	bne.n	17ac <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    17b4:	4b2e      	ldr	r3, [pc, #184]	; (1870 <_oscctrl_init_referenced_generators+0xe0>)
    17b6:	2200      	movs	r2, #0
    17b8:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    17ba:	4a2e      	ldr	r2, [pc, #184]	; (1874 <_oscctrl_init_referenced_generators+0xe4>)
    17bc:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    17be:	461a      	mov	r2, r3
    17c0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    17c4:	f013 0f10 	tst.w	r3, #16
    17c8:	d1fa      	bne.n	17c0 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    17ca:	2200      	movs	r2, #0
    17cc:	4b28      	ldr	r3, [pc, #160]	; (1870 <_oscctrl_init_referenced_generators+0xe0>)
    17ce:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    17d2:	461a      	mov	r2, r3
    17d4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    17d8:	f013 0f04 	tst.w	r3, #4
    17dc:	d1fa      	bne.n	17d4 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    17de:	2202      	movs	r2, #2
    17e0:	4b23      	ldr	r3, [pc, #140]	; (1870 <_oscctrl_init_referenced_generators+0xe0>)
    17e2:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    17e4:	461a      	mov	r2, r3
    17e6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    17ea:	f013 0f02 	tst.w	r3, #2
    17ee:	d1fa      	bne.n	17e6 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    17f0:	4b1f      	ldr	r3, [pc, #124]	; (1870 <_oscctrl_init_referenced_generators+0xe0>)
    17f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    17f4:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    17f6:	461a      	mov	r2, r3
    17f8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    17fc:	f013 0f08 	tst.w	r3, #8
    1800:	d1fa      	bne.n	17f8 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1802:	2219      	movs	r2, #25
    1804:	4b1a      	ldr	r3, [pc, #104]	; (1870 <_oscctrl_init_referenced_generators+0xe0>)
    1806:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    180a:	461a      	mov	r2, r3
    180c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1810:	f013 0f04 	tst.w	r3, #4
    1814:	d1fa      	bne.n	180c <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1816:	4b16      	ldr	r3, [pc, #88]	; (1870 <_oscctrl_init_referenced_generators+0xe0>)
    1818:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    181c:	f013 0f01 	tst.w	r3, #1
    1820:	d01d      	beq.n	185e <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1822:	4a13      	ldr	r2, [pc, #76]	; (1870 <_oscctrl_init_referenced_generators+0xe0>)
    1824:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1826:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    182a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    182e:	d1f9      	bne.n	1824 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1830:	4a0e      	ldr	r2, [pc, #56]	; (186c <_oscctrl_init_referenced_generators+0xdc>)
    1832:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1834:	2b00      	cmp	r3, #0
    1836:	d1fc      	bne.n	1832 <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1838:	4a0c      	ldr	r2, [pc, #48]	; (186c <_oscctrl_init_referenced_generators+0xdc>)
    183a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    183c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1840:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1844:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1846:	4611      	mov	r1, r2
    1848:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    184c:	684b      	ldr	r3, [r1, #4]
    184e:	4213      	tst	r3, r2
    1850:	d1fc      	bne.n	184c <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1852:	4a06      	ldr	r2, [pc, #24]	; (186c <_oscctrl_init_referenced_generators+0xdc>)
    1854:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1856:	f013 0f04 	tst.w	r3, #4
    185a:	d1fb      	bne.n	1854 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    185c:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    185e:	4a04      	ldr	r2, [pc, #16]	; (1870 <_oscctrl_init_referenced_generators+0xe0>)
    1860:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1862:	f413 7f80 	tst.w	r3, #256	; 0x100
    1866:	d0fb      	beq.n	1860 <_oscctrl_init_referenced_generators+0xd0>
    1868:	e7e2      	b.n	1830 <_oscctrl_init_referenced_generators+0xa0>
    186a:	bf00      	nop
    186c:	40001c00 	.word	0x40001c00
    1870:	40001000 	.word	0x40001000
    1874:	0401bb80 	.word	0x0401bb80

00001878 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    1878:	b538      	push	{r3, r4, r5, lr}
    187a:	460c      	mov	r4, r1
	ASSERT(dev);
    187c:	4605      	mov	r5, r0
    187e:	2230      	movs	r2, #48	; 0x30
    1880:	4917      	ldr	r1, [pc, #92]	; (18e0 <_timer_init+0x68>)
    1882:	3000      	adds	r0, #0
    1884:	bf18      	it	ne
    1886:	2001      	movne	r0, #1
    1888:	4b16      	ldr	r3, [pc, #88]	; (18e4 <_timer_init+0x6c>)
    188a:	4798      	blx	r3

	dev->hw = hw;
    188c:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    188e:	2301      	movs	r3, #1
    1890:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1892:	f248 0203 	movw	r2, #32771	; 0x8003
    1896:	6923      	ldr	r3, [r4, #16]
    1898:	4213      	tst	r3, r2
    189a:	d1fc      	bne.n	1896 <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    189c:	68ea      	ldr	r2, [r5, #12]
    189e:	6913      	ldr	r3, [r2, #16]
    18a0:	f013 0f01 	tst.w	r3, #1
    18a4:	d1fb      	bne.n	189e <_timer_init+0x26>
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    18a6:	f44f 7380 	mov.w	r3, #256	; 0x100
    18aa:	6053      	str	r3, [r2, #4]
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    18ac:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    18ae:	f248 1380 	movw	r3, #33152	; 0x8180
    18b2:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    18b4:	f248 0103 	movw	r1, #32771	; 0x8003
    18b8:	6913      	ldr	r3, [r2, #16]
    18ba:	420b      	tst	r3, r1
    18bc:	d1fc      	bne.n	18b8 <_timer_init+0x40>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    18be:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    18c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    18c4:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    18c6:	6913      	ldr	r3, [r2, #16]
    18c8:	f013 0f60 	tst.w	r3, #96	; 0x60
    18cc:	d1fb      	bne.n	18c6 <_timer_init+0x4e>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    18ce:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    18d0:	f44f 7280 	mov.w	r2, #256	; 0x100
    18d4:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    18d6:	4b04      	ldr	r3, [pc, #16]	; (18e8 <_timer_init+0x70>)
    18d8:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    18da:	2000      	movs	r0, #0
    18dc:	bd38      	pop	{r3, r4, r5, pc}
    18de:	bf00      	nop
    18e0:	00003ff8 	.word	0x00003ff8
    18e4:	000013f5 	.word	0x000013f5
    18e8:	20000538 	.word	0x20000538

000018ec <_timer_start>:

/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const dev)
{
    18ec:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    18ee:	4604      	mov	r4, r0
    18f0:	b310      	cbz	r0, 1938 <_timer_start+0x4c>
    18f2:	68c0      	ldr	r0, [r0, #12]
    18f4:	3000      	adds	r0, #0
    18f6:	bf18      	it	ne
    18f8:	2001      	movne	r0, #1
    18fa:	225e      	movs	r2, #94	; 0x5e
    18fc:	490f      	ldr	r1, [pc, #60]	; (193c <_timer_start+0x50>)
    18fe:	4b10      	ldr	r3, [pc, #64]	; (1940 <_timer_start+0x54>)
    1900:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1902:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1906:	4b0f      	ldr	r3, [pc, #60]	; (1944 <_timer_start+0x58>)
    1908:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(RTC_IRQn);
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    190a:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    190c:	2300      	movs	r3, #0
    190e:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1910:	6913      	ldr	r3, [r2, #16]
    1912:	f013 0f08 	tst.w	r3, #8
    1916:	d1fb      	bne.n	1910 <_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    1918:	68e3      	ldr	r3, [r4, #12]
    191a:	691a      	ldr	r2, [r3, #16]
    191c:	f012 0f08 	tst.w	r2, #8
    1920:	d1fb      	bne.n	191a <_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    1922:	881a      	ldrh	r2, [r3, #0]
    1924:	b292      	uxth	r2, r2
    1926:	f042 0202 	orr.w	r2, r2, #2
    192a:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    192c:	f248 0103 	movw	r1, #32771	; 0x8003
    1930:	691a      	ldr	r2, [r3, #16]
    1932:	420a      	tst	r2, r1
    1934:	d1fc      	bne.n	1930 <_timer_start+0x44>
	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
}
    1936:	bd10      	pop	{r4, pc}
    1938:	2000      	movs	r0, #0
    193a:	e7de      	b.n	18fa <_timer_start+0xe>
    193c:	00003ff8 	.word	0x00003ff8
    1940:	000013f5 	.word	0x000013f5
    1944:	e000e100 	.word	0xe000e100

00001948 <_timer_stop>:

/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const dev)
{
    1948:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    194a:	4604      	mov	r4, r0
    194c:	b1a0      	cbz	r0, 1978 <_timer_stop+0x30>
    194e:	68c0      	ldr	r0, [r0, #12]
    1950:	3000      	adds	r0, #0
    1952:	bf18      	it	ne
    1954:	2001      	movne	r0, #1
    1956:	226b      	movs	r2, #107	; 0x6b
    1958:	4908      	ldr	r1, [pc, #32]	; (197c <_timer_stop+0x34>)
    195a:	4b09      	ldr	r3, [pc, #36]	; (1980 <_timer_stop+0x38>)
    195c:	4798      	blx	r3

	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    195e:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    1960:	8813      	ldrh	r3, [r2, #0]
    1962:	f023 0302 	bic.w	r3, r3, #2
    1966:	041b      	lsls	r3, r3, #16
    1968:	0c1b      	lsrs	r3, r3, #16
    196a:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    196c:	f248 0103 	movw	r1, #32771	; 0x8003
    1970:	6913      	ldr	r3, [r2, #16]
    1972:	420b      	tst	r3, r1
    1974:	d1fc      	bne.n	1970 <_timer_stop+0x28>
}
    1976:	bd10      	pop	{r4, pc}
    1978:	2000      	movs	r0, #0
    197a:	e7ec      	b.n	1956 <_timer_stop+0xe>
    197c:	00003ff8 	.word	0x00003ff8
    1980:	000013f5 	.word	0x000013f5

00001984 <_timer_set_period>:
/**
 * \brief Set timer period
 */
void _timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    1984:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1986:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1988:	6913      	ldr	r3, [r2, #16]
    198a:	f013 0f60 	tst.w	r3, #96	; 0x60
    198e:	d1fb      	bne.n	1988 <_timer_set_period+0x4>
}
    1990:	4770      	bx	lr

00001992 <_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    1992:	68c2      	ldr	r2, [r0, #12]
    1994:	f248 0103 	movw	r1, #32771	; 0x8003
    1998:	6913      	ldr	r3, [r2, #16]
    199a:	420b      	tst	r3, r1
    199c:	d1fc      	bne.n	1998 <_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    199e:	8810      	ldrh	r0, [r2, #0]
}
    19a0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    19a4:	4770      	bx	lr

000019a6 <_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _timer_set_irq(struct _timer_device *const dev)
{
    19a6:	4770      	bx	lr

000019a8 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    19a8:	2000      	movs	r0, #0
    19aa:	4770      	bx	lr

000019ac <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    19ac:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    19ae:	4b08      	ldr	r3, [pc, #32]	; (19d0 <RTC_Handler+0x24>)
    19b0:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    19b2:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    19b4:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    19b6:	f413 7f80 	tst.w	r3, #256	; 0x100
    19ba:	d007      	beq.n	19cc <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    19bc:	6823      	ldr	r3, [r4, #0]
    19be:	b10b      	cbz	r3, 19c4 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    19c0:	4620      	mov	r0, r4
    19c2:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    19c4:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    19c6:	f44f 7280 	mov.w	r2, #256	; 0x100
    19ca:	819a      	strh	r2, [r3, #12]
    19cc:	bd10      	pop	{r4, pc}
    19ce:	bf00      	nop
    19d0:	20000538 	.word	0x20000538

000019d4 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    19d4:	b470      	push	{r4, r5, r6}
    19d6:	b089      	sub	sp, #36	; 0x24
    19d8:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    19da:	466c      	mov	r4, sp
    19dc:	4d0d      	ldr	r5, [pc, #52]	; (1a14 <_sercom_get_hardware_index+0x40>)
    19de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    19e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    19e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    19e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    19ea:	9b00      	ldr	r3, [sp, #0]
    19ec:	42b3      	cmp	r3, r6
    19ee:	d00d      	beq.n	1a0c <_sercom_get_hardware_index+0x38>
    19f0:	4631      	mov	r1, r6
    19f2:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19f4:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    19f6:	f853 2b04 	ldr.w	r2, [r3], #4
    19fa:	428a      	cmp	r2, r1
    19fc:	d007      	beq.n	1a0e <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19fe:	3001      	adds	r0, #1
    1a00:	2808      	cmp	r0, #8
    1a02:	d1f8      	bne.n	19f6 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1a04:	2000      	movs	r0, #0
}
    1a06:	b009      	add	sp, #36	; 0x24
    1a08:	bc70      	pop	{r4, r5, r6}
    1a0a:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a0c:	2000      	movs	r0, #0
			return i;
    1a0e:	b2c0      	uxtb	r0, r0
    1a10:	e7f9      	b.n	1a06 <_sercom_get_hardware_index+0x32>
    1a12:	bf00      	nop
    1a14:	00004010 	.word	0x00004010

00001a18 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1a18:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1a1a:	4b03      	ldr	r3, [pc, #12]	; (1a28 <_sercom_get_irq_num+0x10>)
    1a1c:	4798      	blx	r3
    1a1e:	0080      	lsls	r0, r0, #2
    1a20:	302e      	adds	r0, #46	; 0x2e
}
    1a22:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1a26:	bd08      	pop	{r3, pc}
    1a28:	000019d5 	.word	0x000019d5

00001a2c <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    1a2c:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    1a2e:	6802      	ldr	r2, [r0, #0]
	return tmp;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1a30:	7e11      	ldrb	r1, [r2, #24]
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    1a32:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    1a34:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    1a36:	f013 0f01 	tst.w	r3, #1
    1a3a:	d109      	bne.n	1a50 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    1a3c:	f013 0f04 	tst.w	r3, #4
    1a40:	d109      	bne.n	1a56 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    1a42:	f013 0f02 	tst.w	r3, #2
    1a46:	d109      	bne.n	1a5c <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    1a48:	f013 0f80 	tst.w	r3, #128	; 0x80
    1a4c:	d10b      	bne.n	1a66 <_spi_handler+0x3a>
    1a4e:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    1a50:	6883      	ldr	r3, [r0, #8]
    1a52:	4798      	blx	r3
    1a54:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    1a56:	68c3      	ldr	r3, [r0, #12]
    1a58:	4798      	blx	r3
    1a5a:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1a5c:	2302      	movs	r3, #2
    1a5e:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    1a60:	6903      	ldr	r3, [r0, #16]
    1a62:	4798      	blx	r3
    1a64:	bd08      	pop	{r3, pc}
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1a66:	2304      	movs	r3, #4
    1a68:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1a6a:	2380      	movs	r3, #128	; 0x80
    1a6c:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    1a6e:	6943      	ldr	r3, [r0, #20]
    1a70:	f06f 0112 	mvn.w	r1, #18
    1a74:	4798      	blx	r3
	}
}
    1a76:	e7ea      	b.n	1a4e <_spi_handler+0x22>

00001a78 <SERCOM0_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_0_Handler(void)
{
    1a78:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    1a7a:	4b02      	ldr	r3, [pc, #8]	; (1a84 <SERCOM0_0_Handler+0xc>)
    1a7c:	6818      	ldr	r0, [r3, #0]
    1a7e:	4b02      	ldr	r3, [pc, #8]	; (1a88 <SERCOM0_0_Handler+0x10>)
    1a80:	4798      	blx	r3
    1a82:	bd08      	pop	{r3, pc}
    1a84:	2000053c 	.word	0x2000053c
    1a88:	00001a2d 	.word	0x00001a2d

00001a8c <SERCOM0_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_1_Handler(void)
{
    1a8c:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    1a8e:	4b02      	ldr	r3, [pc, #8]	; (1a98 <SERCOM0_1_Handler+0xc>)
    1a90:	6818      	ldr	r0, [r3, #0]
    1a92:	4b02      	ldr	r3, [pc, #8]	; (1a9c <SERCOM0_1_Handler+0x10>)
    1a94:	4798      	blx	r3
    1a96:	bd08      	pop	{r3, pc}
    1a98:	2000053c 	.word	0x2000053c
    1a9c:	00001a2d 	.word	0x00001a2d

00001aa0 <SERCOM0_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_2_Handler(void)
{
    1aa0:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    1aa2:	4b02      	ldr	r3, [pc, #8]	; (1aac <SERCOM0_2_Handler+0xc>)
    1aa4:	6818      	ldr	r0, [r3, #0]
    1aa6:	4b02      	ldr	r3, [pc, #8]	; (1ab0 <SERCOM0_2_Handler+0x10>)
    1aa8:	4798      	blx	r3
    1aaa:	bd08      	pop	{r3, pc}
    1aac:	2000053c 	.word	0x2000053c
    1ab0:	00001a2d 	.word	0x00001a2d

00001ab4 <SERCOM0_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
    1ab4:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    1ab6:	4b02      	ldr	r3, [pc, #8]	; (1ac0 <SERCOM0_3_Handler+0xc>)
    1ab8:	6818      	ldr	r0, [r3, #0]
    1aba:	4b02      	ldr	r3, [pc, #8]	; (1ac4 <SERCOM0_3_Handler+0x10>)
    1abc:	4798      	blx	r3
    1abe:	bd08      	pop	{r3, pc}
    1ac0:	2000053c 	.word	0x2000053c
    1ac4:	00001a2d 	.word	0x00001a2d

00001ac8 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1ac8:	b538      	push	{r3, r4, r5, lr}
    1aca:	4605      	mov	r5, r0
    1acc:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1ace:	4608      	mov	r0, r1
    1ad0:	4b36      	ldr	r3, [pc, #216]	; (1bac <_spi_m_sync_init+0xe4>)
    1ad2:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    1ad4:	b160      	cbz	r0, 1af0 <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1ad6:	2d00      	cmp	r5, #0
    1ad8:	d055      	beq.n	1b86 <_spi_m_sync_init+0xbe>
    1ada:	f640 1273 	movw	r2, #2419	; 0x973
    1ade:	4934      	ldr	r1, [pc, #208]	; (1bb0 <_spi_m_sync_init+0xe8>)
    1ae0:	1c20      	adds	r0, r4, #0
    1ae2:	bf18      	it	ne
    1ae4:	2001      	movne	r0, #1
    1ae6:	4b33      	ldr	r3, [pc, #204]	; (1bb4 <_spi_m_sync_init+0xec>)
    1ae8:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1aea:	f06f 000c 	mvn.w	r0, #12
    1aee:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1af0:	2d00      	cmp	r5, #0
    1af2:	d151      	bne.n	1b98 <_spi_m_sync_init+0xd0>
    1af4:	f640 1273 	movw	r2, #2419	; 0x973
    1af8:	492d      	ldr	r1, [pc, #180]	; (1bb0 <_spi_m_sync_init+0xe8>)
    1afa:	2000      	movs	r0, #0
    1afc:	4b2d      	ldr	r3, [pc, #180]	; (1bb4 <_spi_m_sync_init+0xec>)
    1afe:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1b00:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1b02:	f013 0f01 	tst.w	r3, #1
    1b06:	d119      	bne.n	1b3c <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b08:	69e3      	ldr	r3, [r4, #28]
    1b0a:	f013 0f03 	tst.w	r3, #3
    1b0e:	d1fb      	bne.n	1b08 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1b10:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1b12:	f013 0f02 	tst.w	r3, #2
    1b16:	d00b      	beq.n	1b30 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1b18:	6823      	ldr	r3, [r4, #0]
    1b1a:	f023 0302 	bic.w	r3, r3, #2
    1b1e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b20:	69e3      	ldr	r3, [r4, #28]
    1b22:	f013 0f03 	tst.w	r3, #3
    1b26:	d1fb      	bne.n	1b20 <_spi_m_sync_init+0x58>
    1b28:	69e3      	ldr	r3, [r4, #28]
    1b2a:	f013 0f02 	tst.w	r3, #2
    1b2e:	d1fb      	bne.n	1b28 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1b30:	230d      	movs	r3, #13
    1b32:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b34:	69e3      	ldr	r3, [r4, #28]
    1b36:	f013 0f03 	tst.w	r3, #3
    1b3a:	d1fb      	bne.n	1b34 <_spi_m_sync_init+0x6c>
    1b3c:	69e3      	ldr	r3, [r4, #28]
    1b3e:	f013 0f01 	tst.w	r3, #1
    1b42:	d1fb      	bne.n	1b3c <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1b44:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1b46:	f640 1206 	movw	r2, #2310	; 0x906
    1b4a:	4919      	ldr	r1, [pc, #100]	; (1bb0 <_spi_m_sync_init+0xe8>)
    1b4c:	1c20      	adds	r0, r4, #0
    1b4e:	bf18      	it	ne
    1b50:	2001      	movne	r0, #1
    1b52:	4b18      	ldr	r3, [pc, #96]	; (1bb4 <_spi_m_sync_init+0xec>)
    1b54:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1b56:	4b18      	ldr	r3, [pc, #96]	; (1bb8 <_spi_m_sync_init+0xf0>)
    1b58:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b5a:	69e3      	ldr	r3, [r4, #28]
    1b5c:	f013 0f03 	tst.w	r3, #3
    1b60:	d1fb      	bne.n	1b5a <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1b62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1b66:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b68:	69e3      	ldr	r3, [r4, #28]
    1b6a:	f013 0f17 	tst.w	r3, #23
    1b6e:	d1fb      	bne.n	1b68 <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1b70:	2377      	movs	r3, #119	; 0x77
    1b72:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1b74:	2000      	movs	r0, #0
    1b76:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1b7a:	2301      	movs	r3, #1
    1b7c:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1b7e:	f240 13ff 	movw	r3, #511	; 0x1ff
    1b82:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    1b84:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1b86:	f640 1273 	movw	r2, #2419	; 0x973
    1b8a:	4909      	ldr	r1, [pc, #36]	; (1bb0 <_spi_m_sync_init+0xe8>)
    1b8c:	2000      	movs	r0, #0
    1b8e:	4b09      	ldr	r3, [pc, #36]	; (1bb4 <_spi_m_sync_init+0xec>)
    1b90:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1b92:	f06f 000c 	mvn.w	r0, #12
    1b96:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1b98:	f640 1273 	movw	r2, #2419	; 0x973
    1b9c:	4904      	ldr	r1, [pc, #16]	; (1bb0 <_spi_m_sync_init+0xe8>)
    1b9e:	1c20      	adds	r0, r4, #0
    1ba0:	bf18      	it	ne
    1ba2:	2001      	movne	r0, #1
    1ba4:	4b03      	ldr	r3, [pc, #12]	; (1bb4 <_spi_m_sync_init+0xec>)
    1ba6:	4798      	blx	r3
    1ba8:	e7aa      	b.n	1b00 <_spi_m_sync_init+0x38>
    1baa:	bf00      	nop
    1bac:	000019d5 	.word	0x000019d5
    1bb0:	00004048 	.word	0x00004048
    1bb4:	000013f5 	.word	0x000013f5
    1bb8:	0020000c 	.word	0x0020000c

00001bbc <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    1bbc:	b538      	push	{r3, r4, r5, lr}
    1bbe:	4604      	mov	r4, r0
    1bc0:	460d      	mov	r5, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    1bc2:	4b15      	ldr	r3, [pc, #84]	; (1c18 <_spi_m_async_init+0x5c>)
    1bc4:	4798      	blx	r3

	if (rc < 0) {
    1bc6:	2800      	cmp	r0, #0
    1bc8:	db25      	blt.n	1c16 <_spi_m_async_init+0x5a>
	if (hw == SERCOM0) {
    1bca:	4b14      	ldr	r3, [pc, #80]	; (1c1c <_spi_m_async_init+0x60>)
    1bcc:	429d      	cmp	r5, r3
		_sercom0_dev = (struct _spi_async_dev *)dev;
    1bce:	bf04      	itt	eq
    1bd0:	4b13      	ldreq	r3, [pc, #76]	; (1c20 <_spi_m_async_init+0x64>)
    1bd2:	601c      	streq	r4, [r3, #0]
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    1bd4:	2300      	movs	r3, #0
    1bd6:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    1bd8:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    1bda:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    1bdc:	4628      	mov	r0, r5
    1bde:	4b11      	ldr	r3, [pc, #68]	; (1c24 <_spi_m_async_init+0x68>)
    1be0:	4798      	blx	r3
    1be2:	1d01      	adds	r1, r0, #4
    1be4:	b2c9      	uxtb	r1, r1
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1be6:	2401      	movs	r4, #1
    1be8:	f000 021f 	and.w	r2, r0, #31
    1bec:	fa04 f202 	lsl.w	r2, r4, r2
    1bf0:	0943      	lsrs	r3, r0, #5
    1bf2:	009b      	lsls	r3, r3, #2
    1bf4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1bf8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1c00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c04:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c08:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq);
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
		irq++;
    1c0c:	3001      	adds	r0, #1
    1c0e:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    1c10:	4281      	cmp	r1, r0
    1c12:	d1e9      	bne.n	1be8 <_spi_m_async_init+0x2c>
	}

	return ERR_NONE;
    1c14:	2000      	movs	r0, #0
}
    1c16:	bd38      	pop	{r3, r4, r5, pc}
    1c18:	00001ac9 	.word	0x00001ac9
    1c1c:	40003000 	.word	0x40003000
    1c20:	2000053c 	.word	0x2000053c
    1c24:	00001a19 	.word	0x00001a19

00001c28 <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    1c28:	b538      	push	{r3, r4, r5, lr}
    1c2a:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    1c2c:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    1c2e:	b160      	cbz	r0, 1c4a <_spi_m_async_enable_tx+0x22>
    1c30:	1c20      	adds	r0, r4, #0
    1c32:	bf18      	it	ne
    1c34:	2001      	movne	r0, #1
    1c36:	f640 3203 	movw	r2, #2819	; 0xb03
    1c3a:	4906      	ldr	r1, [pc, #24]	; (1c54 <_spi_m_async_enable_tx+0x2c>)
    1c3c:	4b06      	ldr	r3, [pc, #24]	; (1c58 <_spi_m_async_enable_tx+0x30>)
    1c3e:	4798      	blx	r3

	if (state) {
    1c40:	b92d      	cbnz	r5, 1c4e <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    1c42:	2301      	movs	r3, #1
    1c44:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    1c46:	2000      	movs	r0, #0
    1c48:	bd38      	pop	{r3, r4, r5, pc}
    1c4a:	2000      	movs	r0, #0
    1c4c:	e7f3      	b.n	1c36 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    1c4e:	2301      	movs	r3, #1
    1c50:	75a3      	strb	r3, [r4, #22]
    1c52:	e7f8      	b.n	1c46 <_spi_m_async_enable_tx+0x1e>
    1c54:	00004048 	.word	0x00004048
    1c58:	000013f5 	.word	0x000013f5

00001c5c <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    1c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c5e:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    1c60:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
    1c62:	4e0c      	ldr	r6, [pc, #48]	; (1c94 <_spi_m_async_enable_rx+0x38>)
    1c64:	f640 3217 	movw	r2, #2839	; 0xb17
    1c68:	4631      	mov	r1, r6
    1c6a:	3000      	adds	r0, #0
    1c6c:	bf18      	it	ne
    1c6e:	2001      	movne	r0, #1
    1c70:	4d09      	ldr	r5, [pc, #36]	; (1c98 <_spi_m_async_enable_rx+0x3c>)
    1c72:	47a8      	blx	r5
	ASSERT(hw);
    1c74:	f640 3218 	movw	r2, #2840	; 0xb18
    1c78:	4631      	mov	r1, r6
    1c7a:	1c20      	adds	r0, r4, #0
    1c7c:	bf18      	it	ne
    1c7e:	2001      	movne	r0, #1
    1c80:	47a8      	blx	r5

	if (state) {
    1c82:	b91f      	cbnz	r7, 1c8c <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    1c84:	2304      	movs	r3, #4
    1c86:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    1c88:	2000      	movs	r0, #0
    1c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    1c8c:	2304      	movs	r3, #4
    1c8e:	75a3      	strb	r3, [r4, #22]
    1c90:	e7fa      	b.n	1c88 <_spi_m_async_enable_rx+0x2c>
    1c92:	bf00      	nop
    1c94:	00004048 	.word	0x00004048
    1c98:	000013f5 	.word	0x000013f5

00001c9c <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    1c9c:	b538      	push	{r3, r4, r5, lr}
    1c9e:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    1ca0:	4604      	mov	r4, r0
    1ca2:	b170      	cbz	r0, 1cc2 <_spi_m_async_enable_tx_complete+0x26>
    1ca4:	6800      	ldr	r0, [r0, #0]
    1ca6:	3000      	adds	r0, #0
    1ca8:	bf18      	it	ne
    1caa:	2001      	movne	r0, #1
    1cac:	f640 322a 	movw	r2, #2858	; 0xb2a
    1cb0:	4907      	ldr	r1, [pc, #28]	; (1cd0 <_spi_m_async_enable_tx_complete+0x34>)
    1cb2:	4b08      	ldr	r3, [pc, #32]	; (1cd4 <_spi_m_async_enable_tx_complete+0x38>)
    1cb4:	4798      	blx	r3

	if (state) {
    1cb6:	b935      	cbnz	r5, 1cc6 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    1cb8:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    1cba:	2202      	movs	r2, #2
    1cbc:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    1cbe:	2000      	movs	r0, #0
    1cc0:	bd38      	pop	{r3, r4, r5, pc}
    1cc2:	2000      	movs	r0, #0
    1cc4:	e7f2      	b.n	1cac <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    1cc6:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    1cc8:	2202      	movs	r2, #2
    1cca:	759a      	strb	r2, [r3, #22]
    1ccc:	e7f7      	b.n	1cbe <_spi_m_async_enable_tx_complete+0x22>
    1cce:	bf00      	nop
    1cd0:	00004048 	.word	0x00004048
    1cd4:	000013f5 	.word	0x000013f5

00001cd8 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    1cd8:	b538      	push	{r3, r4, r5, lr}
    1cda:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    1cdc:	4604      	mov	r4, r0
    1cde:	b160      	cbz	r0, 1cfa <_spi_m_async_write_one+0x22>
    1ce0:	6800      	ldr	r0, [r0, #0]
    1ce2:	3000      	adds	r0, #0
    1ce4:	bf18      	it	ne
    1ce6:	2001      	movne	r0, #1
    1ce8:	f640 323c 	movw	r2, #2876	; 0xb3c
    1cec:	4904      	ldr	r1, [pc, #16]	; (1d00 <_spi_m_async_write_one+0x28>)
    1cee:	4b05      	ldr	r3, [pc, #20]	; (1d04 <_spi_m_async_write_one+0x2c>)
    1cf0:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    1cf2:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1cf4:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    1cf6:	2000      	movs	r0, #0
    1cf8:	bd38      	pop	{r3, r4, r5, pc}
    1cfa:	2000      	movs	r0, #0
    1cfc:	e7f4      	b.n	1ce8 <_spi_m_async_write_one+0x10>
    1cfe:	bf00      	nop
    1d00:	00004048 	.word	0x00004048
    1d04:	000013f5 	.word	0x000013f5

00001d08 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    1d08:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1d0a:	4604      	mov	r4, r0
    1d0c:	b160      	cbz	r0, 1d28 <_spi_m_async_read_one+0x20>
    1d0e:	6800      	ldr	r0, [r0, #0]
    1d10:	3000      	adds	r0, #0
    1d12:	bf18      	it	ne
    1d14:	2001      	movne	r0, #1
    1d16:	f640 3257 	movw	r2, #2903	; 0xb57
    1d1a:	4904      	ldr	r1, [pc, #16]	; (1d2c <_spi_m_async_read_one+0x24>)
    1d1c:	4b04      	ldr	r3, [pc, #16]	; (1d30 <_spi_m_async_read_one+0x28>)
    1d1e:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    1d20:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    1d22:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1d24:	b280      	uxth	r0, r0
    1d26:	bd10      	pop	{r4, pc}
    1d28:	2000      	movs	r0, #0
    1d2a:	e7f4      	b.n	1d16 <_spi_m_async_read_one+0xe>
    1d2c:	00004048 	.word	0x00004048
    1d30:	000013f5 	.word	0x000013f5

00001d34 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    1d34:	b570      	push	{r4, r5, r6, lr}
    1d36:	460d      	mov	r5, r1
    1d38:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    1d3a:	4604      	mov	r4, r0
    1d3c:	b168      	cbz	r0, 1d5a <_spi_m_async_register_callback+0x26>
    1d3e:	2903      	cmp	r1, #3
    1d40:	bf8c      	ite	hi
    1d42:	2000      	movhi	r0, #0
    1d44:	2001      	movls	r0, #1
    1d46:	f44f 6237 	mov.w	r2, #2928	; 0xb70
    1d4a:	4905      	ldr	r1, [pc, #20]	; (1d60 <_spi_m_async_register_callback+0x2c>)
    1d4c:	4b05      	ldr	r3, [pc, #20]	; (1d64 <_spi_m_async_register_callback+0x30>)
    1d4e:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    1d50:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    1d54:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    1d56:	2000      	movs	r0, #0
    1d58:	bd70      	pop	{r4, r5, r6, pc}
    1d5a:	2000      	movs	r0, #0
    1d5c:	e7f3      	b.n	1d46 <_spi_m_async_register_callback+0x12>
    1d5e:	bf00      	nop
    1d60:	00004048 	.word	0x00004048
    1d64:	000013f5 	.word	0x000013f5

00001d68 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1d68:	4b03      	ldr	r3, [pc, #12]	; (1d78 <_delay_init+0x10>)
    1d6a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1d6e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1d70:	2205      	movs	r2, #5
    1d72:	601a      	str	r2, [r3, #0]
    1d74:	4770      	bx	lr
    1d76:	bf00      	nop
    1d78:	e000e010 	.word	0xe000e010

00001d7c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1d7c:	2000      	movs	r0, #0
    1d7e:	4770      	bx	lr

00001d80 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1d80:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1d82:	7c83      	ldrb	r3, [r0, #18]
    1d84:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1d88:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    1d8a:	f002 0107 	and.w	r1, r2, #7
    1d8e:	2901      	cmp	r1, #1
    1d90:	d00b      	beq.n	1daa <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1d92:	015a      	lsls	r2, r3, #5
    1d94:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1d98:	2110      	movs	r1, #16
    1d9a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1d9e:	015b      	lsls	r3, r3, #5
    1da0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1da4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    1da8:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    1daa:	f012 0f40 	tst.w	r2, #64	; 0x40
    1dae:	d00c      	beq.n	1dca <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    1db0:	7cc2      	ldrb	r2, [r0, #19]
    1db2:	f36f 1286 	bfc	r2, #6, #1
    1db6:	74c2      	strb	r2, [r0, #19]
    1db8:	015a      	lsls	r2, r3, #5
    1dba:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1dbe:	2180      	movs	r1, #128	; 0x80
    1dc0:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1dc4:	2140      	movs	r1, #64	; 0x40
    1dc6:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    1dca:	7cc2      	ldrb	r2, [r0, #19]
    1dcc:	f36f 02c3 	bfc	r2, #3, #1
    1dd0:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1dd2:	4909      	ldr	r1, [pc, #36]	; (1df8 <_usb_d_dev_handle_setup+0x78>)
    1dd4:	015a      	lsls	r2, r3, #5
    1dd6:	188c      	adds	r4, r1, r2
    1dd8:	2500      	movs	r5, #0
    1dda:	72a5      	strb	r5, [r4, #10]
    1ddc:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1dde:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    1de2:	246f      	movs	r4, #111	; 0x6f
    1de4:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1de8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1dec:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    1df0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    1df2:	7c80      	ldrb	r0, [r0, #18]
    1df4:	4798      	blx	r3
    1df6:	bd38      	pop	{r3, r4, r5, pc}
    1df8:	20000540 	.word	0x20000540

00001dfc <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    1dfc:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    1dfe:	2320      	movs	r3, #32
    1e00:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1e04:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1e06:	7c83      	ldrb	r3, [r0, #18]
    1e08:	f003 030f 	and.w	r3, r3, #15
    1e0c:	015b      	lsls	r3, r3, #5
    1e0e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1e12:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1e16:	4b03      	ldr	r3, [pc, #12]	; (1e24 <_usb_d_dev_handle_stall+0x28>)
    1e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1e1a:	6882      	ldr	r2, [r0, #8]
    1e1c:	2101      	movs	r1, #1
    1e1e:	7c80      	ldrb	r0, [r0, #18]
    1e20:	4798      	blx	r3
    1e22:	bd08      	pop	{r3, pc}
    1e24:	20000540 	.word	0x20000540

00001e28 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1e28:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1e2a:	7c84      	ldrb	r4, [r0, #18]
    1e2c:	2cff      	cmp	r4, #255	; 0xff
    1e2e:	d003      	beq.n	1e38 <_usb_d_dev_trans_done+0x10>
    1e30:	7cc3      	ldrb	r3, [r0, #19]
    1e32:	f013 0f40 	tst.w	r3, #64	; 0x40
    1e36:	d100      	bne.n	1e3a <_usb_d_dev_trans_done+0x12>
    1e38:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    1e3a:	7cc2      	ldrb	r2, [r0, #19]
    1e3c:	f36f 1286 	bfc	r2, #6, #1
    1e40:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1e42:	4a03      	ldr	r2, [pc, #12]	; (1e50 <_usb_d_dev_trans_done+0x28>)
    1e44:	6f15      	ldr	r5, [r2, #112]	; 0x70
    1e46:	6882      	ldr	r2, [r0, #8]
    1e48:	4620      	mov	r0, r4
    1e4a:	47a8      	blx	r5
    1e4c:	e7f4      	b.n	1e38 <_usb_d_dev_trans_done+0x10>
    1e4e:	bf00      	nop
    1e50:	20000540 	.word	0x20000540

00001e54 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1e54:	b530      	push	{r4, r5, lr}
    1e56:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1e58:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1e5a:	2425      	movs	r4, #37	; 0x25
    1e5c:	f88d 4004 	strb.w	r4, [sp, #4]
    1e60:	244a      	movs	r4, #74	; 0x4a
    1e62:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1e66:	2bff      	cmp	r3, #255	; 0xff
    1e68:	d01e      	beq.n	1ea8 <_usb_d_dev_trans_stop+0x54>
    1e6a:	7cc4      	ldrb	r4, [r0, #19]
    1e6c:	f014 0f40 	tst.w	r4, #64	; 0x40
    1e70:	d01a      	beq.n	1ea8 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1e72:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    1e76:	b1c9      	cbz	r1, 1eac <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1e78:	0163      	lsls	r3, r4, #5
    1e7a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1e7e:	2580      	movs	r5, #128	; 0x80
    1e80:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    1e84:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1e86:	a902      	add	r1, sp, #8
    1e88:	440b      	add	r3, r1
    1e8a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1e8e:	0163      	lsls	r3, r4, #5
    1e90:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1e94:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1e98:	0163      	lsls	r3, r4, #5
    1e9a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1e9e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1ea2:	4611      	mov	r1, r2
    1ea4:	4b05      	ldr	r3, [pc, #20]	; (1ebc <_usb_d_dev_trans_stop+0x68>)
    1ea6:	4798      	blx	r3
}
    1ea8:	b003      	add	sp, #12
    1eaa:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1eac:	0163      	lsls	r3, r4, #5
    1eae:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1eb2:	2540      	movs	r5, #64	; 0x40
    1eb4:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    1eb8:	e7e4      	b.n	1e84 <_usb_d_dev_trans_stop+0x30>
    1eba:	bf00      	nop
    1ebc:	00001e29 	.word	0x00001e29

00001ec0 <_usb_d_dev_handle_trfail>:
{
    1ec0:	b530      	push	{r4, r5, lr}
    1ec2:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1ec4:	7c83      	ldrb	r3, [r0, #18]
    1ec6:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1eca:	2204      	movs	r2, #4
    1ecc:	f88d 2004 	strb.w	r2, [sp, #4]
    1ed0:	2208      	movs	r2, #8
    1ed2:	f88d 2005 	strb.w	r2, [sp, #5]
    1ed6:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    1ed8:	460c      	mov	r4, r1
    1eda:	b391      	cbz	r1, 1f42 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1edc:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    1ee0:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1ee4:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    1ee8:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    1eec:	4a32      	ldr	r2, [pc, #200]	; (1fb8 <_usb_d_dev_handle_trfail+0xf8>)
    1eee:	440a      	add	r2, r1
    1ef0:	7a91      	ldrb	r1, [r2, #10]
    1ef2:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1ef4:	2d02      	cmp	r5, #2
    1ef6:	d02c      	beq.n	1f52 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    1ef8:	f011 0f02 	tst.w	r1, #2
    1efc:	d045      	beq.n	1f8a <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1efe:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1f00:	7a91      	ldrb	r1, [r2, #10]
    1f02:	f36f 0141 	bfc	r1, #1, #1
    1f06:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1f08:	aa02      	add	r2, sp, #8
    1f0a:	4422      	add	r2, r4
    1f0c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1f10:	015a      	lsls	r2, r3, #5
    1f12:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1f16:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1f1a:	015b      	lsls	r3, r3, #5
    1f1c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1f20:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1f24:	f005 0307 	and.w	r3, r5, #7
    1f28:	2b01      	cmp	r3, #1
    1f2a:	d143      	bne.n	1fb4 <_usb_d_dev_handle_trfail+0xf4>
    1f2c:	7cc3      	ldrb	r3, [r0, #19]
    1f2e:	f013 0f40 	tst.w	r3, #64	; 0x40
    1f32:	d03f      	beq.n	1fb4 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1f34:	09d9      	lsrs	r1, r3, #7
    1f36:	428c      	cmp	r4, r1
    1f38:	d03c      	beq.n	1fb4 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1f3a:	2200      	movs	r2, #0
    1f3c:	4b1f      	ldr	r3, [pc, #124]	; (1fbc <_usb_d_dev_handle_trfail+0xfc>)
    1f3e:	4798      	blx	r3
    1f40:	e038      	b.n	1fb4 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1f42:	0159      	lsls	r1, r3, #5
    1f44:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    1f48:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1f4c:	f005 0507 	and.w	r5, r5, #7
    1f50:	e7ca      	b.n	1ee8 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1f52:	f011 0f01 	tst.w	r1, #1
    1f56:	d0cf      	beq.n	1ef8 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1f58:	7a91      	ldrb	r1, [r2, #10]
    1f5a:	f36f 0100 	bfc	r1, #0, #1
    1f5e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1f60:	aa02      	add	r2, sp, #8
    1f62:	4422      	add	r2, r4
    1f64:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1f68:	015a      	lsls	r2, r3, #5
    1f6a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1f6e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1f72:	015b      	lsls	r3, r3, #5
    1f74:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1f78:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1f7c:	2204      	movs	r2, #4
    1f7e:	1c21      	adds	r1, r4, #0
    1f80:	bf18      	it	ne
    1f82:	2101      	movne	r1, #1
    1f84:	4b0d      	ldr	r3, [pc, #52]	; (1fbc <_usb_d_dev_handle_trfail+0xfc>)
    1f86:	4798      	blx	r3
    1f88:	e014      	b.n	1fb4 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    1f8a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    1f8e:	4a0a      	ldr	r2, [pc, #40]	; (1fb8 <_usb_d_dev_handle_trfail+0xf8>)
    1f90:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    1f94:	2100      	movs	r1, #0
    1f96:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1f98:	aa02      	add	r2, sp, #8
    1f9a:	4414      	add	r4, r2
    1f9c:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1fa0:	015a      	lsls	r2, r3, #5
    1fa2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1fa6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1faa:	015b      	lsls	r3, r3, #5
    1fac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1fb0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    1fb4:	b003      	add	sp, #12
    1fb6:	bd30      	pop	{r4, r5, pc}
    1fb8:	20000540 	.word	0x20000540
    1fbc:	00001e55 	.word	0x00001e55

00001fc0 <_usb_d_dev_reset_epts>:
{
    1fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fc4:	4d0c      	ldr	r5, [pc, #48]	; (1ff8 <_usb_d_dev_reset_epts+0x38>)
    1fc6:	f105 0474 	add.w	r4, r5, #116	; 0x74
    1fca:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1fce:	f04f 0803 	mov.w	r8, #3
    1fd2:	4f0a      	ldr	r7, [pc, #40]	; (1ffc <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    1fd4:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1fd6:	4641      	mov	r1, r8
    1fd8:	4620      	mov	r0, r4
    1fda:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    1fdc:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1fde:	2300      	movs	r3, #0
    1fe0:	74e3      	strb	r3, [r4, #19]
    1fe2:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1fe4:	42ac      	cmp	r4, r5
    1fe6:	d1f6      	bne.n	1fd6 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1fe8:	2260      	movs	r2, #96	; 0x60
    1fea:	4619      	mov	r1, r3
    1fec:	4802      	ldr	r0, [pc, #8]	; (1ff8 <_usb_d_dev_reset_epts+0x38>)
    1fee:	4b04      	ldr	r3, [pc, #16]	; (2000 <_usb_d_dev_reset_epts+0x40>)
    1ff0:	4798      	blx	r3
    1ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1ff6:	bf00      	nop
    1ff8:	20000540 	.word	0x20000540
    1ffc:	00001e29 	.word	0x00001e29
    2000:	00003c95 	.word	0x00003c95

00002004 <_usb_d_dev_in_next>:
{
    2004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2008:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    200a:	7c84      	ldrb	r4, [r0, #18]
    200c:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2010:	4688      	mov	r8, r1
    2012:	2900      	cmp	r1, #0
    2014:	f000 809f 	beq.w	2156 <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    2018:	4b58      	ldr	r3, [pc, #352]	; (217c <_usb_d_dev_in_next+0x178>)
    201a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    201e:	6958      	ldr	r0, [r3, #20]
    2020:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2024:	8a2b      	ldrh	r3, [r5, #16]
    2026:	f240 32ff 	movw	r2, #1023	; 0x3ff
    202a:	4293      	cmp	r3, r2
    202c:	f000 808d 	beq.w	214a <_usb_d_dev_in_next+0x146>
    2030:	3b01      	subs	r3, #1
    2032:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2034:	7cef      	ldrb	r7, [r5, #19]
    2036:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    203a:	f1b8 0f00 	cmp.w	r8, #0
    203e:	d005      	beq.n	204c <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2040:	0162      	lsls	r2, r4, #5
    2042:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2046:	2302      	movs	r3, #2
    2048:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    204c:	68a9      	ldr	r1, [r5, #8]
    204e:	eb0e 0301 	add.w	r3, lr, r1
    2052:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    2054:	686e      	ldr	r6, [r5, #4]
    2056:	42b3      	cmp	r3, r6
    2058:	d23f      	bcs.n	20da <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    205a:	1af6      	subs	r6, r6, r3
    205c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    205e:	7cea      	ldrb	r2, [r5, #19]
    2060:	f012 0f20 	tst.w	r2, #32
    2064:	d02d      	beq.n	20c2 <_usb_d_dev_in_next+0xbe>
    2066:	8a2a      	ldrh	r2, [r5, #16]
    2068:	4296      	cmp	r6, r2
    206a:	bf28      	it	cs
    206c:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    206e:	6829      	ldr	r1, [r5, #0]
    2070:	4632      	mov	r2, r6
    2072:	4419      	add	r1, r3
    2074:	68e8      	ldr	r0, [r5, #12]
    2076:	4b42      	ldr	r3, [pc, #264]	; (2180 <_usb_d_dev_in_next+0x17c>)
    2078:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    207a:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    207c:	4b3f      	ldr	r3, [pc, #252]	; (217c <_usb_d_dev_in_next+0x178>)
    207e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2082:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2084:	4b3d      	ldr	r3, [pc, #244]	; (217c <_usb_d_dev_in_next+0x178>)
    2086:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    208a:	695a      	ldr	r2, [r3, #20]
    208c:	f366 020d 	bfi	r2, r6, #0, #14
    2090:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2092:	695a      	ldr	r2, [r3, #20]
    2094:	f36f 329b 	bfc	r2, #14, #14
    2098:	615a      	str	r2, [r3, #20]
	if (!isr) {
    209a:	f1b8 0f00 	cmp.w	r8, #0
    209e:	d108      	bne.n	20b2 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    20a0:	2f01      	cmp	r7, #1
    20a2:	bf0c      	ite	eq
    20a4:	224e      	moveq	r2, #78	; 0x4e
    20a6:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    20a8:	0163      	lsls	r3, r4, #5
    20aa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    20ae:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    20b2:	0164      	lsls	r4, r4, #5
    20b4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    20b8:	2380      	movs	r3, #128	; 0x80
    20ba:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    20be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    20c2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    20c6:	bf28      	it	cs
    20c8:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    20cc:	6829      	ldr	r1, [r5, #0]
    20ce:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    20d0:	4a2a      	ldr	r2, [pc, #168]	; (217c <_usb_d_dev_in_next+0x178>)
    20d2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    20d6:	6113      	str	r3, [r2, #16]
    20d8:	e7d4      	b.n	2084 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    20da:	7ceb      	ldrb	r3, [r5, #19]
    20dc:	f013 0f10 	tst.w	r3, #16
    20e0:	d00f      	beq.n	2102 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    20e2:	7ceb      	ldrb	r3, [r5, #19]
    20e4:	f36f 1304 	bfc	r3, #4, #1
    20e8:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    20ea:	4b24      	ldr	r3, [pc, #144]	; (217c <_usb_d_dev_in_next+0x178>)
    20ec:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    20f0:	695a      	ldr	r2, [r3, #20]
    20f2:	f36f 020d 	bfc	r2, #0, #14
    20f6:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    20f8:	695a      	ldr	r2, [r3, #20]
    20fa:	f36f 329b 	bfc	r2, #14, #14
    20fe:	615a      	str	r2, [r3, #20]
    2100:	e7cb      	b.n	209a <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    2102:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2104:	ea4f 1444 	mov.w	r4, r4, lsl #5
    2108:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    210c:	bf0c      	ite	eq
    210e:	234b      	moveq	r3, #75	; 0x4b
    2110:	234a      	movne	r3, #74	; 0x4a
    2112:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    2116:	8a2a      	ldrh	r2, [r5, #16]
    2118:	ea00 030e 	and.w	r3, r0, lr
    211c:	429a      	cmp	r2, r3
    211e:	d005      	beq.n	212c <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2120:	2100      	movs	r1, #0
    2122:	4628      	mov	r0, r5
    2124:	4b17      	ldr	r3, [pc, #92]	; (2184 <_usb_d_dev_in_next+0x180>)
    2126:	4798      	blx	r3
	return;
    2128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    212c:	7ceb      	ldrb	r3, [r5, #19]
    212e:	f36f 1386 	bfc	r3, #6, #1
    2132:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2134:	4b11      	ldr	r3, [pc, #68]	; (217c <_usb_d_dev_in_next+0x178>)
    2136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    2138:	68a9      	ldr	r1, [r5, #8]
    213a:	7ca8      	ldrb	r0, [r5, #18]
    213c:	4798      	blx	r3
    213e:	b9d0      	cbnz	r0, 2176 <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    2140:	7ceb      	ldrb	r3, [r5, #19]
    2142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2146:	74eb      	strb	r3, [r5, #19]
    2148:	e7ea      	b.n	2120 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    214a:	7cef      	ldrb	r7, [r5, #19]
    214c:	f007 0707 	and.w	r7, r7, #7
    2150:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2154:	e774      	b.n	2040 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2156:	8a03      	ldrh	r3, [r0, #16]
    2158:	f240 32ff 	movw	r2, #1023	; 0x3ff
    215c:	4293      	cmp	r3, r2
    215e:	d107      	bne.n	2170 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2160:	7cef      	ldrb	r7, [r5, #19]
    2162:	f007 0707 	and.w	r7, r7, #7
    2166:	f04f 0e00 	mov.w	lr, #0
    216a:	f240 30ff 	movw	r0, #1023	; 0x3ff
    216e:	e76d      	b.n	204c <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2170:	f04f 0e00 	mov.w	lr, #0
    2174:	e75c      	b.n	2030 <_usb_d_dev_in_next+0x2c>
    2176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    217a:	bf00      	nop
    217c:	20000540 	.word	0x20000540
    2180:	00003b61 	.word	0x00003b61
    2184:	00001e29 	.word	0x00001e29

00002188 <_usb_d_dev_out_next>:
{
    2188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    218c:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    218e:	7c85      	ldrb	r5, [r0, #18]
    2190:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    2194:	4689      	mov	r9, r1
    2196:	2900      	cmp	r1, #0
    2198:	d056      	beq.n	2248 <_usb_d_dev_out_next+0xc0>
    219a:	4b74      	ldr	r3, [pc, #464]	; (236c <_usb_d_dev_out_next+0x1e4>)
    219c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    21a0:	685a      	ldr	r2, [r3, #4]
    21a2:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    21a6:	685f      	ldr	r7, [r3, #4]
    21a8:	f3c7 070d 	ubfx	r7, r7, #0, #14
    21ac:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    21ae:	8a06      	ldrh	r6, [r0, #16]
    21b0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    21b4:	429e      	cmp	r6, r3
    21b6:	f000 80ba 	beq.w	232e <_usb_d_dev_out_next+0x1a6>
    21ba:	3e01      	subs	r6, #1
    21bc:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    21be:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    21c2:	f894 8013 	ldrb.w	r8, [r4, #19]
    21c6:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    21ca:	f1b9 0f00 	cmp.w	r9, #0
    21ce:	d005      	beq.n	21dc <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    21d0:	016b      	lsls	r3, r5, #5
    21d2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    21d6:	2201      	movs	r2, #1
    21d8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    21dc:	7ce3      	ldrb	r3, [r4, #19]
    21de:	f013 0f20 	tst.w	r3, #32
    21e2:	d00d      	beq.n	2200 <_usb_d_dev_out_next+0x78>
    21e4:	6862      	ldr	r2, [r4, #4]
    21e6:	2a00      	cmp	r2, #0
    21e8:	d037      	beq.n	225a <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    21ea:	68a0      	ldr	r0, [r4, #8]
    21ec:	1a12      	subs	r2, r2, r0
    21ee:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    21f0:	6823      	ldr	r3, [r4, #0]
    21f2:	42ba      	cmp	r2, r7
    21f4:	bf28      	it	cs
    21f6:	463a      	movcs	r2, r7
    21f8:	68e1      	ldr	r1, [r4, #12]
    21fa:	4418      	add	r0, r3
    21fc:	4b5c      	ldr	r3, [pc, #368]	; (2370 <_usb_d_dev_out_next+0x1e8>)
    21fe:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2200:	6863      	ldr	r3, [r4, #4]
    2202:	b353      	cbz	r3, 225a <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    2204:	f1b9 0f00 	cmp.w	r9, #0
    2208:	d040      	beq.n	228c <_usb_d_dev_out_next+0x104>
    220a:	8a22      	ldrh	r2, [r4, #16]
    220c:	42ba      	cmp	r2, r7
    220e:	d93d      	bls.n	228c <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    2210:	7ce3      	ldrb	r3, [r4, #19]
    2212:	f36f 1304 	bfc	r3, #4, #1
    2216:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2218:	68a3      	ldr	r3, [r4, #8]
    221a:	445b      	add	r3, fp
    221c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    221e:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2222:	ea4f 1345 	mov.w	r3, r5, lsl #5
    2226:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    222a:	bf0c      	ite	eq
    222c:	222d      	moveq	r2, #45	; 0x2d
    222e:	2225      	movne	r2, #37	; 0x25
    2230:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    2234:	b915      	cbnz	r5, 223c <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2236:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    2238:	4b4c      	ldr	r3, [pc, #304]	; (236c <_usb_d_dev_out_next+0x1e4>)
    223a:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    223c:	2100      	movs	r1, #0
    223e:	4620      	mov	r0, r4
    2240:	4b4c      	ldr	r3, [pc, #304]	; (2374 <_usb_d_dev_out_next+0x1ec>)
    2242:	4798      	blx	r3
	return;
    2244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2248:	8a06      	ldrh	r6, [r0, #16]
    224a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    224e:	429e      	cmp	r6, r3
    2250:	d07b      	beq.n	234a <_usb_d_dev_out_next+0x1c2>
    2252:	f04f 0b00 	mov.w	fp, #0
    2256:	46da      	mov	sl, fp
    2258:	e7af      	b.n	21ba <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    225a:	7ce3      	ldrb	r3, [r4, #19]
    225c:	f013 0f10 	tst.w	r3, #16
    2260:	d06c      	beq.n	233c <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    2262:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    2264:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2268:	f043 0320 	orr.w	r3, r3, #32
    226c:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    226e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2270:	493e      	ldr	r1, [pc, #248]	; (236c <_usb_d_dev_out_next+0x1e4>)
    2272:	016a      	lsls	r2, r5, #5
    2274:	188b      	adds	r3, r1, r2
    2276:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2278:	8a21      	ldrh	r1, [r4, #16]
    227a:	685a      	ldr	r2, [r3, #4]
    227c:	f361 329b 	bfi	r2, r1, #14, #14
    2280:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2282:	685a      	ldr	r2, [r3, #4]
    2284:	f36f 020d 	bfc	r2, #0, #14
    2288:	605a      	str	r2, [r3, #4]
    228a:	e01d      	b.n	22c8 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    228c:	68a2      	ldr	r2, [r4, #8]
    228e:	4452      	add	r2, sl
    2290:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    2292:	4293      	cmp	r3, r2
    2294:	d9c3      	bls.n	221e <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    2296:	1a9b      	subs	r3, r3, r2
    2298:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    229a:	7ce1      	ldrb	r1, [r4, #19]
    229c:	f011 0f20 	tst.w	r1, #32
    22a0:	d026      	beq.n	22f0 <_usb_d_dev_out_next+0x168>
    22a2:	8a22      	ldrh	r2, [r4, #16]
    22a4:	4293      	cmp	r3, r2
    22a6:	bf28      	it	cs
    22a8:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    22aa:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    22ac:	016a      	lsls	r2, r5, #5
    22ae:	492f      	ldr	r1, [pc, #188]	; (236c <_usb_d_dev_out_next+0x1e4>)
    22b0:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    22b2:	4a2e      	ldr	r2, [pc, #184]	; (236c <_usb_d_dev_out_next+0x1e4>)
    22b4:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    22b8:	6851      	ldr	r1, [r2, #4]
    22ba:	f363 319b 	bfi	r1, r3, #14, #14
    22be:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    22c0:	6853      	ldr	r3, [r2, #4]
    22c2:	f36f 030d 	bfc	r3, #0, #14
    22c6:	6053      	str	r3, [r2, #4]
	if (!isr) {
    22c8:	f1b9 0f00 	cmp.w	r9, #0
    22cc:	d108      	bne.n	22e0 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    22ce:	f1b8 0f01 	cmp.w	r8, #1
    22d2:	d025      	beq.n	2320 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    22d4:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    22d6:	016b      	lsls	r3, r5, #5
    22d8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    22dc:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    22e0:	016d      	lsls	r5, r5, #5
    22e2:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    22e6:	2340      	movs	r3, #64	; 0x40
    22e8:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    22ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    22f0:	8a21      	ldrh	r1, [r4, #16]
    22f2:	428b      	cmp	r3, r1
    22f4:	d90a      	bls.n	230c <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    22f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    22fa:	d80e      	bhi.n	231a <_usb_d_dev_out_next+0x192>
    22fc:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2300:	6821      	ldr	r1, [r4, #0]
    2302:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    2304:	0169      	lsls	r1, r5, #5
    2306:	4819      	ldr	r0, [pc, #100]	; (236c <_usb_d_dev_out_next+0x1e4>)
    2308:	5042      	str	r2, [r0, r1]
    230a:	e7d2      	b.n	22b2 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    230c:	428b      	cmp	r3, r1
    230e:	d2f7      	bcs.n	2300 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    2310:	7ce1      	ldrb	r1, [r4, #19]
    2312:	f041 0120 	orr.w	r1, r1, #32
    2316:	74e1      	strb	r1, [r4, #19]
    2318:	e7f2      	b.n	2300 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    231a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    231e:	e7ef      	b.n	2300 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    2320:	4b12      	ldr	r3, [pc, #72]	; (236c <_usb_d_dev_out_next+0x1e4>)
    2322:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2326:	2200      	movs	r2, #0
    2328:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    232a:	222d      	movs	r2, #45	; 0x2d
    232c:	e7d3      	b.n	22d6 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    232e:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2332:	f890 8013 	ldrb.w	r8, [r0, #19]
    2336:	f008 0807 	and.w	r8, r8, #7
    233a:	e749      	b.n	21d0 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    233c:	f1b9 0f00 	cmp.w	r9, #0
    2340:	d10b      	bne.n	235a <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    2342:	68a3      	ldr	r3, [r4, #8]
    2344:	4453      	add	r3, sl
    2346:	60a3      	str	r3, [r4, #8]
    2348:	e769      	b.n	221e <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    234a:	f890 8013 	ldrb.w	r8, [r0, #19]
    234e:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    2352:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2354:	46bb      	mov	fp, r7
    2356:	46ba      	mov	sl, r7
    2358:	e740      	b.n	21dc <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    235a:	8a23      	ldrh	r3, [r4, #16]
    235c:	42bb      	cmp	r3, r7
    235e:	f63f af57 	bhi.w	2210 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    2362:	68a3      	ldr	r3, [r4, #8]
    2364:	4453      	add	r3, sl
    2366:	60a3      	str	r3, [r4, #8]
    2368:	e759      	b.n	221e <_usb_d_dev_out_next+0x96>
    236a:	bf00      	nop
    236c:	20000540 	.word	0x20000540
    2370:	00003b61 	.word	0x00003b61
    2374:	00001e29 	.word	0x00001e29

00002378 <_usb_d_dev_handler>:
{
    2378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    237c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2380:	8c1e      	ldrh	r6, [r3, #32]
    2382:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2384:	b146      	cbz	r6, 2398 <_usb_d_dev_handler+0x20>
    2386:	4d91      	ldr	r5, [pc, #580]	; (25cc <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    2388:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    238a:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    238e:	f8df 9258 	ldr.w	r9, [pc, #600]	; 25e8 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    2392:	f8df 8258 	ldr.w	r8, [pc, #600]	; 25ec <_usb_d_dev_handler+0x274>
    2396:	e0d3      	b.n	2540 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2398:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    239a:	8b1b      	ldrh	r3, [r3, #24]
    239c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    239e:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    23a0:	f013 0f04 	tst.w	r3, #4
    23a4:	d11d      	bne.n	23e2 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    23a6:	f413 7f00 	tst.w	r3, #512	; 0x200
    23aa:	d123      	bne.n	23f4 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    23ac:	f013 0f80 	tst.w	r3, #128	; 0x80
    23b0:	d147      	bne.n	2442 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    23b2:	f013 0f70 	tst.w	r3, #112	; 0x70
    23b6:	d14f      	bne.n	2458 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    23b8:	f013 0f08 	tst.w	r3, #8
    23bc:	d16e      	bne.n	249c <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    23be:	f013 0f01 	tst.w	r3, #1
    23c2:	d0e0      	beq.n	2386 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    23c4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    23c8:	f240 2201 	movw	r2, #513	; 0x201
    23cc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    23ce:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    23d0:	2270      	movs	r2, #112	; 0x70
    23d2:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    23d4:	4b7e      	ldr	r3, [pc, #504]	; (25d0 <_usb_d_dev_handler+0x258>)
    23d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    23d8:	2100      	movs	r1, #0
    23da:	2004      	movs	r0, #4
    23dc:	4798      	blx	r3
    23de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    23e2:	2204      	movs	r2, #4
    23e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    23e8:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    23ea:	4b79      	ldr	r3, [pc, #484]	; (25d0 <_usb_d_dev_handler+0x258>)
    23ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    23ee:	4798      	blx	r3
    23f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    23f4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    23f8:	f240 2201 	movw	r2, #513	; 0x201
    23fc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    23fe:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2400:	2270      	movs	r2, #112	; 0x70
    2402:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2404:	4b72      	ldr	r3, [pc, #456]	; (25d0 <_usb_d_dev_handler+0x258>)
    2406:	891b      	ldrh	r3, [r3, #8]
    2408:	f003 030f 	and.w	r3, r3, #15
    240c:	2b03      	cmp	r3, #3
    240e:	d00e      	beq.n	242e <_usb_d_dev_handler+0xb6>
    2410:	4b6f      	ldr	r3, [pc, #444]	; (25d0 <_usb_d_dev_handler+0x258>)
    2412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2414:	f003 030f 	and.w	r3, r3, #15
    2418:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    241a:	bf08      	it	eq
    241c:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    241e:	d007      	beq.n	2430 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    2420:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2422:	4b6b      	ldr	r3, [pc, #428]	; (25d0 <_usb_d_dev_handler+0x258>)
    2424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2426:	2003      	movs	r0, #3
    2428:	4798      	blx	r3
    242a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    242e:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2430:	4b67      	ldr	r3, [pc, #412]	; (25d0 <_usb_d_dev_handler+0x258>)
    2432:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    2436:	8919      	ldrh	r1, [r3, #8]
    2438:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    243c:	2200      	movs	r2, #0
    243e:	811a      	strh	r2, [r3, #8]
    2440:	e7ef      	b.n	2422 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2442:	2280      	movs	r2, #128	; 0x80
    2444:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2448:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    244a:	4b61      	ldr	r3, [pc, #388]	; (25d0 <_usb_d_dev_handler+0x258>)
    244c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    244e:	2100      	movs	r1, #0
    2450:	2005      	movs	r0, #5
    2452:	4798      	blx	r3
    2454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2458:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    245c:	2270      	movs	r2, #112	; 0x70
    245e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2460:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2462:	f240 2201 	movw	r2, #513	; 0x201
    2466:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2468:	4b5a      	ldr	r3, [pc, #360]	; (25d4 <_usb_d_dev_handler+0x25c>)
    246a:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    246e:	f013 0f01 	tst.w	r3, #1
    2472:	d00d      	beq.n	2490 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2474:	4a57      	ldr	r2, [pc, #348]	; (25d4 <_usb_d_dev_handler+0x25c>)
    2476:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2478:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    247c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2480:	d1f9      	bne.n	2476 <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    2482:	4b53      	ldr	r3, [pc, #332]	; (25d0 <_usb_d_dev_handler+0x258>)
    2484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2486:	2100      	movs	r1, #0
    2488:	2002      	movs	r0, #2
    248a:	4798      	blx	r3
    248c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2490:	4a50      	ldr	r2, [pc, #320]	; (25d4 <_usb_d_dev_handler+0x25c>)
    2492:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    2494:	f413 7f80 	tst.w	r3, #256	; 0x100
    2498:	d0fb      	beq.n	2492 <_usb_d_dev_handler+0x11a>
    249a:	e7f2      	b.n	2482 <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    249c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    24a0:	2400      	movs	r4, #0
    24a2:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    24a6:	2208      	movs	r2, #8
    24a8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    24aa:	2270      	movs	r2, #112	; 0x70
    24ac:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    24ae:	f240 2201 	movw	r2, #513	; 0x201
    24b2:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    24b4:	4b48      	ldr	r3, [pc, #288]	; (25d8 <_usb_d_dev_handler+0x260>)
    24b6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    24b8:	4b45      	ldr	r3, [pc, #276]	; (25d0 <_usb_d_dev_handler+0x258>)
    24ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    24bc:	4621      	mov	r1, r4
    24be:	2001      	movs	r0, #1
    24c0:	4798      	blx	r3
    24c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    24c6:	f011 0f10 	tst.w	r1, #16
    24ca:	d109      	bne.n	24e0 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    24cc:	f011 0f40 	tst.w	r1, #64	; 0x40
    24d0:	d108      	bne.n	24e4 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    24d2:	f011 0f20 	tst.w	r1, #32
    24d6:	d02f      	beq.n	2538 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    24d8:	2100      	movs	r1, #0
    24da:	4b40      	ldr	r3, [pc, #256]	; (25dc <_usb_d_dev_handler+0x264>)
    24dc:	4798      	blx	r3
    24de:	e02b      	b.n	2538 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    24e0:	47c8      	blx	r9
    24e2:	e029      	b.n	2538 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    24e4:	2101      	movs	r1, #1
    24e6:	4b3d      	ldr	r3, [pc, #244]	; (25dc <_usb_d_dev_handler+0x264>)
    24e8:	4798      	blx	r3
    24ea:	e025      	b.n	2538 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    24ec:	f011 0f40 	tst.w	r1, #64	; 0x40
    24f0:	d111      	bne.n	2516 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    24f2:	f011 0f08 	tst.w	r1, #8
    24f6:	d112      	bne.n	251e <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    24f8:	f011 0f02 	tst.w	r1, #2
    24fc:	d112      	bne.n	2524 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    24fe:	f003 0307 	and.w	r3, r3, #7
    2502:	2b01      	cmp	r3, #1
    2504:	d118      	bne.n	2538 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2506:	f011 0f04 	tst.w	r1, #4
    250a:	d10f      	bne.n	252c <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    250c:	f011 0f10 	tst.w	r1, #16
    2510:	d012      	beq.n	2538 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    2512:	47c8      	blx	r9
    2514:	e010      	b.n	2538 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    2516:	2101      	movs	r1, #1
    2518:	4b30      	ldr	r3, [pc, #192]	; (25dc <_usb_d_dev_handler+0x264>)
    251a:	4798      	blx	r3
    251c:	e00c      	b.n	2538 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    251e:	2101      	movs	r1, #1
    2520:	47c0      	blx	r8
    2522:	e009      	b.n	2538 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    2524:	2101      	movs	r1, #1
    2526:	4b2e      	ldr	r3, [pc, #184]	; (25e0 <_usb_d_dev_handler+0x268>)
    2528:	4798      	blx	r3
    252a:	e005      	b.n	2538 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    252c:	2100      	movs	r1, #0
    252e:	47c0      	blx	r8
    2530:	e002      	b.n	2538 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    2532:	2100      	movs	r1, #0
    2534:	4b29      	ldr	r3, [pc, #164]	; (25dc <_usb_d_dev_handler+0x264>)
    2536:	4798      	blx	r3
    2538:	3401      	adds	r4, #1
    253a:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    253c:	2c09      	cmp	r4, #9
    253e:	d042      	beq.n	25c6 <_usb_d_dev_handler+0x24e>
    2540:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    2542:	7cab      	ldrb	r3, [r5, #18]
    2544:	2bff      	cmp	r3, #255	; 0xff
    2546:	d0f7      	beq.n	2538 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    2548:	f003 030f 	and.w	r3, r3, #15
    254c:	2101      	movs	r1, #1
    254e:	4099      	lsls	r1, r3
    2550:	4231      	tst	r1, r6
    2552:	d0f1      	beq.n	2538 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2554:	0159      	lsls	r1, r3, #5
    2556:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    255a:	f501 7180 	add.w	r1, r1, #256	; 0x100
    255e:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2560:	015b      	lsls	r3, r3, #5
    2562:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2566:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    256a:	4019      	ands	r1, r3
    256c:	d0e4      	beq.n	2538 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    256e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    2572:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    2576:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    257a:	f003 0247 	and.w	r2, r3, #71	; 0x47
    257e:	2a01      	cmp	r2, #1
    2580:	d0a1      	beq.n	24c6 <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2582:	f013 0f80 	tst.w	r3, #128	; 0x80
    2586:	d1b1      	bne.n	24ec <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2588:	f011 0f20 	tst.w	r1, #32
    258c:	d1d1      	bne.n	2532 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    258e:	f011 0f04 	tst.w	r1, #4
    2592:	d10e      	bne.n	25b2 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2594:	f011 0f01 	tst.w	r1, #1
    2598:	d10e      	bne.n	25b8 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    259a:	f003 0307 	and.w	r3, r3, #7
    259e:	2b01      	cmp	r3, #1
    25a0:	d1ca      	bne.n	2538 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    25a2:	f011 0f08 	tst.w	r1, #8
    25a6:	d10b      	bne.n	25c0 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    25a8:	f011 0f10 	tst.w	r1, #16
    25ac:	d0c4      	beq.n	2538 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    25ae:	47c8      	blx	r9
    25b0:	e7c2      	b.n	2538 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    25b2:	2100      	movs	r1, #0
    25b4:	47c0      	blx	r8
    25b6:	e7bf      	b.n	2538 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    25b8:	2101      	movs	r1, #1
    25ba:	4b0a      	ldr	r3, [pc, #40]	; (25e4 <_usb_d_dev_handler+0x26c>)
    25bc:	4798      	blx	r3
    25be:	e7bb      	b.n	2538 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    25c0:	2101      	movs	r1, #1
    25c2:	47c0      	blx	r8
    25c4:	e7b8      	b.n	2538 <_usb_d_dev_handler+0x1c0>
    25c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    25ca:	bf00      	nop
    25cc:	200005b4 	.word	0x200005b4
    25d0:	20000540 	.word	0x20000540
    25d4:	40001000 	.word	0x40001000
    25d8:	00001fc1 	.word	0x00001fc1
    25dc:	00001dfd 	.word	0x00001dfd
    25e0:	00002005 	.word	0x00002005
    25e4:	00002189 	.word	0x00002189
    25e8:	00001d81 	.word	0x00001d81
    25ec:	00001ec1 	.word	0x00001ec1

000025f0 <_usb_d_dev_init>:
{
    25f0:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    25f2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    25f6:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    25f8:	f013 0f01 	tst.w	r3, #1
    25fc:	d124      	bne.n	2648 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    25fe:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2602:	7893      	ldrb	r3, [r2, #2]
    2604:	f013 0f03 	tst.w	r3, #3
    2608:	d1fb      	bne.n	2602 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    260a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    260e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    2610:	f013 0f02 	tst.w	r3, #2
    2614:	d00f      	beq.n	2636 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    2616:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    261a:	7813      	ldrb	r3, [r2, #0]
    261c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2620:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2622:	7893      	ldrb	r3, [r2, #2]
    2624:	f013 0f03 	tst.w	r3, #3
    2628:	d1fb      	bne.n	2622 <_usb_d_dev_init+0x32>
    262a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    262e:	7893      	ldrb	r3, [r2, #2]
    2630:	f013 0f02 	tst.w	r3, #2
    2634:	d1fb      	bne.n	262e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2636:	2201      	movs	r2, #1
    2638:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    263c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    263e:	461a      	mov	r2, r3
    2640:	7893      	ldrb	r3, [r2, #2]
    2642:	f013 0f03 	tst.w	r3, #3
    2646:	d1fb      	bne.n	2640 <_usb_d_dev_init+0x50>
    2648:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    264c:	7893      	ldrb	r3, [r2, #2]
    264e:	f013 0f01 	tst.w	r3, #1
    2652:	d1fb      	bne.n	264c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2654:	4b21      	ldr	r3, [pc, #132]	; (26dc <_usb_d_dev_init+0xec>)
    2656:	4a22      	ldr	r2, [pc, #136]	; (26e0 <_usb_d_dev_init+0xf0>)
    2658:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    265a:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    265c:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    265e:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2660:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    2662:	4b20      	ldr	r3, [pc, #128]	; (26e4 <_usb_d_dev_init+0xf4>)
    2664:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    2666:	4b20      	ldr	r3, [pc, #128]	; (26e8 <_usb_d_dev_init+0xf8>)
    2668:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    266a:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    266e:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    2672:	f011 011f 	ands.w	r1, r1, #31
    2676:	d02b      	beq.n	26d0 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    2678:	291f      	cmp	r1, #31
    267a:	bf08      	it	eq
    267c:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    267e:	b34b      	cbz	r3, 26d4 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    2680:	2b1f      	cmp	r3, #31
    2682:	bf08      	it	eq
    2684:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    2686:	b33a      	cbz	r2, 26d8 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    2688:	2a07      	cmp	r2, #7
    268a:	bf08      	it	eq
    268c:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    268e:	f003 031f 	and.w	r3, r3, #31
    2692:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    2696:	0312      	lsls	r2, r2, #12
    2698:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    269c:	4313      	orrs	r3, r2
    269e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    26a2:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    26a4:	78d3      	ldrb	r3, [r2, #3]
    26a6:	f043 0303 	orr.w	r3, r3, #3
    26aa:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    26ac:	78d3      	ldrb	r3, [r2, #3]
    26ae:	f043 030c 	orr.w	r3, r3, #12
    26b2:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    26b4:	2304      	movs	r3, #4
    26b6:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    26b8:	7893      	ldrb	r3, [r2, #2]
    26ba:	f013 0f03 	tst.w	r3, #3
    26be:	d1fb      	bne.n	26b8 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    26c0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    26c4:	4a05      	ldr	r2, [pc, #20]	; (26dc <_usb_d_dev_init+0xec>)
    26c6:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    26c8:	2201      	movs	r2, #1
    26ca:	811a      	strh	r2, [r3, #8]
}
    26cc:	2000      	movs	r0, #0
    26ce:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    26d0:	2109      	movs	r1, #9
    26d2:	e7d4      	b.n	267e <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    26d4:	2319      	movs	r3, #25
    26d6:	e7d6      	b.n	2686 <_usb_d_dev_init+0x96>
		pad_trim = 6;
    26d8:	2206      	movs	r2, #6
    26da:	e7d8      	b.n	268e <_usb_d_dev_init+0x9e>
    26dc:	20000540 	.word	0x20000540
    26e0:	00001d7d 	.word	0x00001d7d
    26e4:	00001fc1 	.word	0x00001fc1
    26e8:	00800084 	.word	0x00800084

000026ec <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    26ec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    26f0:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    26f2:	f013 0f03 	tst.w	r3, #3
    26f6:	d129      	bne.n	274c <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    26f8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    26fc:	7893      	ldrb	r3, [r2, #2]
    26fe:	f013 0f03 	tst.w	r3, #3
    2702:	d1fb      	bne.n	26fc <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    2704:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2708:	781b      	ldrb	r3, [r3, #0]
    270a:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    270c:	f013 0f02 	tst.w	r3, #2
    2710:	d108      	bne.n	2724 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    2712:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2716:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    271a:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    271c:	7893      	ldrb	r3, [r2, #2]
    271e:	f013 0f03 	tst.w	r3, #3
    2722:	d1fb      	bne.n	271c <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2724:	4b0b      	ldr	r3, [pc, #44]	; (2754 <_usb_d_dev_enable+0x68>)
    2726:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    272a:	609a      	str	r2, [r3, #8]
    272c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2730:	609a      	str	r2, [r3, #8]
    2732:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    2736:	609a      	str	r2, [r3, #8]
    2738:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    273c:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    273e:	f240 228d 	movw	r2, #653	; 0x28d
    2742:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2746:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    2748:	2000      	movs	r0, #0
    274a:	4770      	bx	lr
		return -USB_ERR_DENIED;
    274c:	f06f 0010 	mvn.w	r0, #16
}
    2750:	4770      	bx	lr
    2752:	bf00      	nop
    2754:	e000e100 	.word	0xe000e100

00002758 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2758:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    275c:	8913      	ldrh	r3, [r2, #8]
    275e:	f023 0301 	bic.w	r3, r3, #1
    2762:	041b      	lsls	r3, r3, #16
    2764:	0c1b      	lsrs	r3, r3, #16
    2766:	8113      	strh	r3, [r2, #8]
    2768:	4770      	bx	lr

0000276a <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    276a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    276e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2772:	7298      	strb	r0, [r3, #10]
    2774:	4770      	bx	lr
	...

00002778 <_usb_d_dev_ep_init>:
{
    2778:	b5f0      	push	{r4, r5, r6, r7, lr}
    277a:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    277e:	f010 050f 	ands.w	r5, r0, #15
    2782:	d04d      	beq.n	2820 <_usb_d_dev_ep_init+0xa8>
    2784:	f1be 0f00 	cmp.w	lr, #0
    2788:	bfb4      	ite	lt
    278a:	1cac      	addlt	r4, r5, #2
    278c:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    278e:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2792:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    2794:	2d02      	cmp	r5, #2
    2796:	d947      	bls.n	2828 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    2798:	f06f 0011 	mvn.w	r0, #17
    279c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    279e:	f1be 0f00 	cmp.w	lr, #0
    27a2:	db1b      	blt.n	27dc <_usb_d_dev_ep_init+0x64>
    27a4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    27a8:	4e37      	ldr	r6, [pc, #220]	; (2888 <_usb_d_dev_ep_init+0x110>)
    27aa:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    27ae:	2d00      	cmp	r5, #0
    27b0:	d15e      	bne.n	2870 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    27b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    27b6:	4d34      	ldr	r5, [pc, #208]	; (2888 <_usb_d_dev_ep_init+0x110>)
    27b8:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    27bc:	4d33      	ldr	r5, [pc, #204]	; (288c <_usb_d_dev_ep_init+0x114>)
    27be:	00a6      	lsls	r6, r4, #2
    27c0:	1933      	adds	r3, r6, r4
    27c2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    27c6:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    27ca:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    27ce:	3101      	adds	r1, #1
    27d0:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    27d4:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    27d8:	2000      	movs	r0, #0
    27da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    27dc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    27e0:	4e29      	ldr	r6, [pc, #164]	; (2888 <_usb_d_dev_ep_init+0x110>)
    27e2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    27e6:	686d      	ldr	r5, [r5, #4]
    27e8:	b935      	cbnz	r5, 27f8 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    27ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    27ee:	4d26      	ldr	r5, [pc, #152]	; (2888 <_usb_d_dev_ep_init+0x110>)
    27f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    27f4:	685f      	ldr	r7, [r3, #4]
    27f6:	e7e1      	b.n	27bc <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    27f8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    27fc:	4e22      	ldr	r6, [pc, #136]	; (2888 <_usb_d_dev_ep_init+0x110>)
    27fe:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2802:	896d      	ldrh	r5, [r5, #10]
    2804:	4295      	cmp	r5, r2
    2806:	daf0      	bge.n	27ea <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    2808:	f06f 0012 	mvn.w	r0, #18
    280c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    280e:	f06f 0013 	mvn.w	r0, #19
    2812:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2814:	f06f 0013 	mvn.w	r0, #19
    2818:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    281a:	f06f 0012 	mvn.w	r0, #18
    281e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2820:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    2824:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2826:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    2828:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    282c:	4f17      	ldr	r7, [pc, #92]	; (288c <_usb_d_dev_ep_init+0x114>)
    282e:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    2832:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    2836:	2eff      	cmp	r6, #255	; 0xff
    2838:	d1e9      	bne.n	280e <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    283a:	2900      	cmp	r1, #0
    283c:	d1af      	bne.n	279e <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    283e:	b125      	cbz	r5, 284a <_usb_d_dev_ep_init+0xd2>
    2840:	f1be 0f00 	cmp.w	lr, #0
    2844:	bfa4      	itt	ge
    2846:	3502      	addge	r5, #2
    2848:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    284a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    284e:	4e0f      	ldr	r6, [pc, #60]	; (288c <_usb_d_dev_ep_init+0x114>)
    2850:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2854:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    2858:	2dff      	cmp	r5, #255	; 0xff
    285a:	d1db      	bne.n	2814 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    285c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2860:	4e09      	ldr	r6, [pc, #36]	; (2888 <_usb_d_dev_ep_init+0x110>)
    2862:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    2866:	2d00      	cmp	r5, #0
    2868:	d0d7      	beq.n	281a <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    286a:	f1be 0f00 	cmp.w	lr, #0
    286e:	dbb5      	blt.n	27dc <_usb_d_dev_ep_init+0x64>
    2870:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2874:	4e04      	ldr	r6, [pc, #16]	; (2888 <_usb_d_dev_ep_init+0x110>)
    2876:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    287a:	892d      	ldrh	r5, [r5, #8]
    287c:	4295      	cmp	r5, r2
    287e:	da98      	bge.n	27b2 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    2880:	f06f 0012 	mvn.w	r0, #18
    2884:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2886:	bf00      	nop
    2888:	00004064 	.word	0x00004064
    288c:	20000540 	.word	0x20000540

00002890 <_usb_d_dev_ep_deinit>:
{
    2890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2892:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2894:	f010 060f 	ands.w	r6, r0, #15
    2898:	d00e      	beq.n	28b8 <_usb_d_dev_ep_deinit+0x28>
    289a:	2f00      	cmp	r7, #0
    289c:	bfb4      	ite	lt
    289e:	1cb3      	addlt	r3, r6, #2
    28a0:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    28a2:	2e02      	cmp	r6, #2
    28a4:	d900      	bls.n	28a8 <_usb_d_dev_ep_deinit+0x18>
    28a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    28a8:	461d      	mov	r5, r3
    28aa:	3301      	adds	r3, #1
    28ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    28b0:	4a24      	ldr	r2, [pc, #144]	; (2944 <_usb_d_dev_ep_deinit+0xb4>)
    28b2:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    28b6:	e002      	b.n	28be <_usb_d_dev_ep_deinit+0x2e>
    28b8:	f8df e094 	ldr.w	lr, [pc, #148]	; 2950 <_usb_d_dev_ep_deinit+0xc0>
    28bc:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    28be:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    28c2:	4a21      	ldr	r2, [pc, #132]	; (2948 <_usb_d_dev_ep_deinit+0xb8>)
    28c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    28c8:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    28cc:	2aff      	cmp	r2, #255	; 0xff
    28ce:	d0ea      	beq.n	28a6 <_usb_d_dev_ep_deinit+0x16>
    28d0:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    28d2:	2203      	movs	r2, #3
    28d4:	0ff9      	lsrs	r1, r7, #31
    28d6:	4670      	mov	r0, lr
    28d8:	4b1c      	ldr	r3, [pc, #112]	; (294c <_usb_d_dev_ep_deinit+0xbc>)
    28da:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    28dc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    28e0:	4a19      	ldr	r2, [pc, #100]	; (2948 <_usb_d_dev_ep_deinit+0xb8>)
    28e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    28e6:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    28ea:	f003 0307 	and.w	r3, r3, #7
    28ee:	2b01      	cmp	r3, #1
    28f0:	d016      	beq.n	2920 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    28f2:	2f00      	cmp	r7, #0
    28f4:	db1b      	blt.n	292e <_usb_d_dev_ep_deinit+0x9e>
    28f6:	0160      	lsls	r0, r4, #5
    28f8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    28fc:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    2900:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    2904:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    2908:	4b0f      	ldr	r3, [pc, #60]	; (2948 <_usb_d_dev_ep_deinit+0xb8>)
    290a:	00aa      	lsls	r2, r5, #2
    290c:	1951      	adds	r1, r2, r5
    290e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2912:	2000      	movs	r0, #0
    2914:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    2918:	22ff      	movs	r2, #255	; 0xff
    291a:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    291e:	e7c2      	b.n	28a6 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    2920:	0160      	lsls	r0, r4, #5
    2922:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2926:	2300      	movs	r3, #0
    2928:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    292c:	e7ec      	b.n	2908 <_usb_d_dev_ep_deinit+0x78>
    292e:	0176      	lsls	r6, r6, #5
    2930:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    2934:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    2938:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    293c:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    2940:	e7e2      	b.n	2908 <_usb_d_dev_ep_deinit+0x78>
    2942:	bf00      	nop
    2944:	200005a0 	.word	0x200005a0
    2948:	20000540 	.word	0x20000540
    294c:	00001e55 	.word	0x00001e55
    2950:	200005b4 	.word	0x200005b4

00002954 <_usb_d_dev_ep_enable>:
{
    2954:	b5f0      	push	{r4, r5, r6, r7, lr}
    2956:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2958:	f010 000f 	ands.w	r0, r0, #15
    295c:	f000 80a6 	beq.w	2aac <_usb_d_dev_ep_enable+0x158>
    2960:	2f00      	cmp	r7, #0
    2962:	bfb4      	ite	lt
    2964:	1c83      	addlt	r3, r0, #2
    2966:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2968:	4606      	mov	r6, r0
    296a:	0142      	lsls	r2, r0, #5
    296c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2970:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    2974:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2976:	2802      	cmp	r0, #2
    2978:	f240 809f 	bls.w	2aba <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    297c:	f06f 0011 	mvn.w	r0, #17
    2980:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    2982:	f014 0f77 	tst.w	r4, #119	; 0x77
    2986:	f040 8088 	bne.w	2a9a <_usb_d_dev_ep_enable+0x146>
    298a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    298e:	2111      	movs	r1, #17
    2990:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2994:	4c97      	ldr	r4, [pc, #604]	; (2bf4 <_usb_d_dev_ep_enable+0x2a0>)
    2996:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    299a:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    299e:	4996      	ldr	r1, [pc, #600]	; (2bf8 <_usb_d_dev_ep_enable+0x2a4>)
    29a0:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    29a4:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    29a8:	f200 80cc 	bhi.w	2b44 <_usb_d_dev_ep_enable+0x1f0>
    29ac:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    29b0:	f200 810a 	bhi.w	2bc8 <_usb_d_dev_ep_enable+0x274>
    29b4:	2c80      	cmp	r4, #128	; 0x80
    29b6:	f200 80f9 	bhi.w	2bac <_usb_d_dev_ep_enable+0x258>
    29ba:	2c40      	cmp	r4, #64	; 0x40
    29bc:	f200 810b 	bhi.w	2bd6 <_usb_d_dev_ep_enable+0x282>
    29c0:	2c20      	cmp	r4, #32
    29c2:	f200 80fa 	bhi.w	2bba <_usb_d_dev_ep_enable+0x266>
    29c6:	2c10      	cmp	r4, #16
    29c8:	f200 810c 	bhi.w	2be4 <_usb_d_dev_ep_enable+0x290>
    29cc:	2c08      	cmp	r4, #8
    29ce:	bf94      	ite	ls
    29d0:	2700      	movls	r7, #0
    29d2:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    29d4:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    29d8:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    29da:	f3c4 010d 	ubfx	r1, r4, #0, #14
    29de:	e0b7      	b.n	2b50 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    29e0:	f014 0f70 	tst.w	r4, #112	; 0x70
    29e4:	d15c      	bne.n	2aa0 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    29e6:	4d83      	ldr	r5, [pc, #524]	; (2bf4 <_usb_d_dev_ep_enable+0x2a0>)
    29e8:	009f      	lsls	r7, r3, #2
    29ea:	18f9      	adds	r1, r7, r3
    29ec:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    29f0:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    29f4:	0109      	lsls	r1, r1, #4
    29f6:	f001 0170 	and.w	r1, r1, #112	; 0x70
    29fa:	430c      	orrs	r4, r1
    29fc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2a00:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a04:	443b      	add	r3, r7
    2a06:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2a0a:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    2a0e:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2a16:	d80f      	bhi.n	2a38 <_usb_d_dev_ep_enable+0xe4>
    2a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2a1c:	d819      	bhi.n	2a52 <_usb_d_dev_ep_enable+0xfe>
    2a1e:	2b80      	cmp	r3, #128	; 0x80
    2a20:	d819      	bhi.n	2a56 <_usb_d_dev_ep_enable+0x102>
    2a22:	2b40      	cmp	r3, #64	; 0x40
    2a24:	d819      	bhi.n	2a5a <_usb_d_dev_ep_enable+0x106>
    2a26:	2b20      	cmp	r3, #32
    2a28:	d819      	bhi.n	2a5e <_usb_d_dev_ep_enable+0x10a>
    2a2a:	2b10      	cmp	r3, #16
    2a2c:	d819      	bhi.n	2a62 <_usb_d_dev_ep_enable+0x10e>
    2a2e:	2b08      	cmp	r3, #8
    2a30:	bf94      	ite	ls
    2a32:	2300      	movls	r3, #0
    2a34:	2301      	movhi	r3, #1
    2a36:	e000      	b.n	2a3a <_usb_d_dev_ep_enable+0xe6>
    2a38:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a3a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    2a3e:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2a40:	2380      	movs	r3, #128	; 0x80
    2a42:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    2a46:	4b6b      	ldr	r3, [pc, #428]	; (2bf4 <_usb_d_dev_ep_enable+0x2a0>)
    2a48:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2a4c:	2000      	movs	r0, #0
    2a4e:	76b0      	strb	r0, [r6, #26]
    2a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2a52:	2306      	movs	r3, #6
    2a54:	e7f1      	b.n	2a3a <_usb_d_dev_ep_enable+0xe6>
    2a56:	2305      	movs	r3, #5
    2a58:	e7ef      	b.n	2a3a <_usb_d_dev_ep_enable+0xe6>
    2a5a:	2304      	movs	r3, #4
    2a5c:	e7ed      	b.n	2a3a <_usb_d_dev_ep_enable+0xe6>
    2a5e:	2303      	movs	r3, #3
    2a60:	e7eb      	b.n	2a3a <_usb_d_dev_ep_enable+0xe6>
    2a62:	2302      	movs	r3, #2
    2a64:	e7e9      	b.n	2a3a <_usb_d_dev_ep_enable+0xe6>
    2a66:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a68:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2a6c:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2a6e:	2340      	movs	r3, #64	; 0x40
    2a70:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    2a74:	4b5f      	ldr	r3, [pc, #380]	; (2bf4 <_usb_d_dev_ep_enable+0x2a0>)
    2a76:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2a7a:	2000      	movs	r0, #0
    2a7c:	72b0      	strb	r0, [r6, #10]
    2a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2a80:	2106      	movs	r1, #6
    2a82:	e7f1      	b.n	2a68 <_usb_d_dev_ep_enable+0x114>
    2a84:	2105      	movs	r1, #5
    2a86:	e7ef      	b.n	2a68 <_usb_d_dev_ep_enable+0x114>
    2a88:	2104      	movs	r1, #4
    2a8a:	e7ed      	b.n	2a68 <_usb_d_dev_ep_enable+0x114>
    2a8c:	2103      	movs	r1, #3
    2a8e:	e7eb      	b.n	2a68 <_usb_d_dev_ep_enable+0x114>
    2a90:	2102      	movs	r1, #2
    2a92:	e7e9      	b.n	2a68 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    2a94:	f06f 0011 	mvn.w	r0, #17
    2a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2a9a:	f06f 0013 	mvn.w	r0, #19
    2a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2aa0:	f06f 0013 	mvn.w	r0, #19
    2aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2aa6:	f06f 0013 	mvn.w	r0, #19
    2aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2aac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2ab0:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    2ab4:	b2e4      	uxtb	r4, r4
    2ab6:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    2ab8:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2aba:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2abe:	494d      	ldr	r1, [pc, #308]	; (2bf4 <_usb_d_dev_ep_enable+0x2a0>)
    2ac0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2ac4:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    2ac8:	2dff      	cmp	r5, #255	; 0xff
    2aca:	d0e3      	beq.n	2a94 <_usb_d_dev_ep_enable+0x140>
    2acc:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    2ace:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2ad0:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    2ad4:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    2ad8:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    2adc:	f001 0107 	and.w	r1, r1, #7
    2ae0:	2901      	cmp	r1, #1
    2ae2:	f43f af4e 	beq.w	2982 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    2ae6:	2f00      	cmp	r7, #0
    2ae8:	f6ff af7a 	blt.w	29e0 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    2aec:	f014 0f07 	tst.w	r4, #7
    2af0:	d1d9      	bne.n	2aa6 <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    2af2:	4d40      	ldr	r5, [pc, #256]	; (2bf4 <_usb_d_dev_ep_enable+0x2a0>)
    2af4:	009f      	lsls	r7, r3, #2
    2af6:	18f9      	adds	r1, r7, r3
    2af8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    2afc:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    2b00:	f001 0107 	and.w	r1, r1, #7
    2b04:	430c      	orrs	r4, r1
    2b06:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2b0a:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2b0e:	443b      	add	r3, r7
    2b10:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2b14:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    2b18:	4b37      	ldr	r3, [pc, #220]	; (2bf8 <_usb_d_dev_ep_enable+0x2a4>)
    2b1a:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2b1e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    2b22:	d8a0      	bhi.n	2a66 <_usb_d_dev_ep_enable+0x112>
    2b24:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    2b28:	d8aa      	bhi.n	2a80 <_usb_d_dev_ep_enable+0x12c>
    2b2a:	2980      	cmp	r1, #128	; 0x80
    2b2c:	d8aa      	bhi.n	2a84 <_usb_d_dev_ep_enable+0x130>
    2b2e:	2940      	cmp	r1, #64	; 0x40
    2b30:	d8aa      	bhi.n	2a88 <_usb_d_dev_ep_enable+0x134>
    2b32:	2920      	cmp	r1, #32
    2b34:	d8aa      	bhi.n	2a8c <_usb_d_dev_ep_enable+0x138>
    2b36:	2910      	cmp	r1, #16
    2b38:	d8aa      	bhi.n	2a90 <_usb_d_dev_ep_enable+0x13c>
    2b3a:	2908      	cmp	r1, #8
    2b3c:	bf94      	ite	ls
    2b3e:	2100      	movls	r1, #0
    2b40:	2101      	movhi	r1, #1
    2b42:	e791      	b.n	2a68 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2b44:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2b48:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2b4a:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2b4e:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2b50:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    2b54:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2b56:	2140      	movs	r1, #64	; 0x40
    2b58:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2b5c:	2080      	movs	r0, #128	; 0x80
    2b5e:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    2b62:	4a24      	ldr	r2, [pc, #144]	; (2bf4 <_usb_d_dev_ep_enable+0x2a0>)
    2b64:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    2b68:	2000      	movs	r0, #0
    2b6a:	72b0      	strb	r0, [r6, #10]
    2b6c:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2b6e:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2b72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2b76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b7a:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    2b7e:	016d      	lsls	r5, r5, #5
    2b80:	1953      	adds	r3, r2, r5
    2b82:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2b84:	685a      	ldr	r2, [r3, #4]
    2b86:	f364 329b 	bfi	r2, r4, #14, #14
    2b8a:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2b8c:	685a      	ldr	r2, [r3, #4]
    2b8e:	f360 020d 	bfi	r2, r0, #0, #14
    2b92:	605a      	str	r2, [r3, #4]
    2b94:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    2b98:	22b0      	movs	r2, #176	; 0xb0
    2b9a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2b9e:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2ba2:	461d      	mov	r5, r3
    2ba4:	2310      	movs	r3, #16
    2ba6:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    2baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2bac:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2bb0:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2bb2:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2bb6:	2705      	movs	r7, #5
    2bb8:	e7ca      	b.n	2b50 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2bba:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2bbe:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2bc0:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2bc4:	2703      	movs	r7, #3
    2bc6:	e7c3      	b.n	2b50 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2bc8:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2bcc:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2bce:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2bd2:	2706      	movs	r7, #6
    2bd4:	e7bc      	b.n	2b50 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2bd6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2bda:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2bdc:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2be0:	2704      	movs	r7, #4
    2be2:	e7b5      	b.n	2b50 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2be4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2be8:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2bea:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2bee:	2702      	movs	r7, #2
    2bf0:	e7ae      	b.n	2b50 <_usb_d_dev_ep_enable+0x1fc>
    2bf2:	bf00      	nop
    2bf4:	20000540 	.word	0x20000540
    2bf8:	0fffc000 	.word	0x0fffc000

00002bfc <_usb_d_dev_ep_stall>:
{
    2bfc:	b470      	push	{r4, r5, r6}
    2bfe:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2c00:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2c02:	f010 000f 	ands.w	r0, r0, #15
    2c06:	d008      	beq.n	2c1a <_usb_d_dev_ep_stall+0x1e>
    2c08:	2b00      	cmp	r3, #0
    2c0a:	bfb4      	ite	lt
    2c0c:	1c83      	addlt	r3, r0, #2
    2c0e:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    2c10:	2802      	cmp	r0, #2
    2c12:	d903      	bls.n	2c1c <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    2c14:	f06f 0011 	mvn.w	r0, #17
    2c18:	e018      	b.n	2c4c <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    2c1a:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    2c1c:	2901      	cmp	r1, #1
    2c1e:	d017      	beq.n	2c50 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2c20:	2900      	cmp	r1, #0
    2c22:	d03a      	beq.n	2c9a <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2c24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2c28:	4a45      	ldr	r2, [pc, #276]	; (2d40 <_usb_d_dev_ep_stall+0x144>)
    2c2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2c2e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2c32:	f003 030f 	and.w	r3, r3, #15
    2c36:	015b      	lsls	r3, r3, #5
    2c38:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2c3c:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2c40:	2310      	movs	r3, #16
    2c42:	40a3      	lsls	r3, r4
    2c44:	421a      	tst	r2, r3
    2c46:	bf14      	ite	ne
    2c48:	2001      	movne	r0, #1
    2c4a:	2000      	moveq	r0, #0
}
    2c4c:	bc70      	pop	{r4, r5, r6}
    2c4e:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2c50:	2510      	movs	r5, #16
    2c52:	40a5      	lsls	r5, r4
    2c54:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2c56:	493a      	ldr	r1, [pc, #232]	; (2d40 <_usb_d_dev_ep_stall+0x144>)
    2c58:	009e      	lsls	r6, r3, #2
    2c5a:	18f2      	adds	r2, r6, r3
    2c5c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2c60:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2c64:	f002 020f 	and.w	r2, r2, #15
    2c68:	0150      	lsls	r0, r2, #5
    2c6a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2c6e:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2c72:	2020      	movs	r0, #32
    2c74:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    2c78:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2c7a:	0152      	lsls	r2, r2, #5
    2c7c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2c80:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    2c84:	4433      	add	r3, r6
    2c86:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    2c8a:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2c8e:	f042 0208 	orr.w	r2, r2, #8
    2c92:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    2c96:	2000      	movs	r0, #0
    2c98:	e7d8      	b.n	2c4c <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    2c9a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2c9e:	4928      	ldr	r1, [pc, #160]	; (2d40 <_usb_d_dev_ep_stall+0x144>)
    2ca0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2ca4:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    2ca8:	f002 020f 	and.w	r2, r2, #15
    2cac:	0151      	lsls	r1, r2, #5
    2cae:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2cb2:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2cb6:	2010      	movs	r0, #16
    2cb8:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    2cba:	4205      	tst	r5, r0
    2cbc:	d03c      	beq.n	2d38 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2cbe:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2cc0:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2cc4:	2020      	movs	r0, #32
    2cc6:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2cc8:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2cca:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2cce:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    2cd2:	4202      	tst	r2, r0
    2cd4:	d007      	beq.n	2ce6 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2cd6:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    2cda:	2201      	movs	r2, #1
    2cdc:	fa02 f404 	lsl.w	r4, r2, r4
    2ce0:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2ce2:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2ce6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2cea:	4815      	ldr	r0, [pc, #84]	; (2d40 <_usb_d_dev_ep_stall+0x144>)
    2cec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2cf0:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    2cf4:	f002 0207 	and.w	r2, r2, #7
    2cf8:	2a01      	cmp	r2, #1
    2cfa:	d00c      	beq.n	2d16 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    2cfc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2d00:	4a0f      	ldr	r2, [pc, #60]	; (2d40 <_usb_d_dev_ep_stall+0x144>)
    2d02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2d06:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2d0a:	f36f 02c3 	bfc	r2, #3, #1
    2d0e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2d12:	2000      	movs	r0, #0
    2d14:	e79a      	b.n	2c4c <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2d16:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2d1a:	f012 0f30 	tst.w	r2, #48	; 0x30
    2d1e:	d10d      	bne.n	2d3c <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    2d20:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2d24:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    2d28:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2d2c:	f36f 02c3 	bfc	r2, #3, #1
    2d30:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2d34:	2000      	movs	r0, #0
    2d36:	e789      	b.n	2c4c <_usb_d_dev_ep_stall+0x50>
    2d38:	2000      	movs	r0, #0
    2d3a:	e787      	b.n	2c4c <_usb_d_dev_ep_stall+0x50>
    2d3c:	2000      	movs	r0, #0
    2d3e:	e785      	b.n	2c4c <_usb_d_dev_ep_stall+0x50>
    2d40:	20000540 	.word	0x20000540

00002d44 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    2d44:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    2d46:	f000 040f 	and.w	r4, r0, #15
    2d4a:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    2d4c:	4a14      	ldr	r2, [pc, #80]	; (2da0 <_usb_d_dev_ep_read_req+0x5c>)
    2d4e:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    2d50:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    2d52:	6840      	ldr	r0, [r0, #4]
    2d54:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    2d58:	2c02      	cmp	r4, #2
    2d5a:	d817      	bhi.n	2d8c <_usb_d_dev_ep_read_req+0x48>
    2d5c:	b1c9      	cbz	r1, 2d92 <_usb_d_dev_ep_read_req+0x4e>
    2d5e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2d62:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    2d66:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    2d68:	2a11      	cmp	r2, #17
    2d6a:	d115      	bne.n	2d98 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2d6c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    2d70:	f012 0f10 	tst.w	r2, #16
    2d74:	d102      	bne.n	2d7c <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    2d76:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    2d78:	bc30      	pop	{r4, r5}
    2d7a:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    2d7c:	682c      	ldr	r4, [r5, #0]
    2d7e:	686a      	ldr	r2, [r5, #4]
    2d80:	600c      	str	r4, [r1, #0]
    2d82:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2d84:	2210      	movs	r2, #16
    2d86:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    2d8a:	e7f5      	b.n	2d78 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    2d8c:	f06f 0011 	mvn.w	r0, #17
    2d90:	e7f2      	b.n	2d78 <_usb_d_dev_ep_read_req+0x34>
    2d92:	f06f 0011 	mvn.w	r0, #17
    2d96:	e7ef      	b.n	2d78 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    2d98:	f06f 0012 	mvn.w	r0, #18
    2d9c:	e7ec      	b.n	2d78 <_usb_d_dev_ep_read_req+0x34>
    2d9e:	bf00      	nop
    2da0:	20000540 	.word	0x20000540

00002da4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    2da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2da8:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    2daa:	7a03      	ldrb	r3, [r0, #8]
    2dac:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2dae:	f013 030f 	ands.w	r3, r3, #15
    2db2:	f000 80c2 	beq.w	2f3a <_usb_d_dev_ep_trans+0x196>
    2db6:	2e00      	cmp	r6, #0
    2db8:	bfb4      	ite	lt
    2dba:	1c9a      	addlt	r2, r3, #2
    2dbc:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    2dbe:	4614      	mov	r4, r2
    2dc0:	4969      	ldr	r1, [pc, #420]	; (2f68 <_usb_d_dev_ep_trans+0x1c4>)
    2dc2:	f101 0760 	add.w	r7, r1, #96	; 0x60
    2dc6:	1c55      	adds	r5, r2, #1
    2dc8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2dcc:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2dd0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2dd4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2dd8:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    2ddc:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2de0:	428a      	cmp	r2, r1
    2de2:	d025      	beq.n	2e30 <_usb_d_dev_ep_trans+0x8c>
    2de4:	1e55      	subs	r5, r2, #1
    2de6:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    2de8:	6841      	ldr	r1, [r0, #4]
    2dea:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    2dec:	2b02      	cmp	r3, #2
    2dee:	f200 8092 	bhi.w	2f16 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    2df2:	6803      	ldr	r3, [r0, #0]
    2df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2df8:	d31c      	bcc.n	2e34 <_usb_d_dev_ep_trans+0x90>
    2dfa:	eb03 0c01 	add.w	ip, r3, r1
    2dfe:	f8df e180 	ldr.w	lr, [pc, #384]	; 2f80 <_usb_d_dev_ep_trans+0x1dc>
    2e02:	45f4      	cmp	ip, lr
    2e04:	d816      	bhi.n	2e34 <_usb_d_dev_ep_trans+0x90>
    2e06:	f013 0f03 	tst.w	r3, #3
    2e0a:	d113      	bne.n	2e34 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    2e0c:	2e00      	cmp	r6, #0
    2e0e:	db2a      	blt.n	2e66 <_usb_d_dev_ep_trans+0xc2>
    2e10:	428a      	cmp	r2, r1
    2e12:	f200 809c 	bhi.w	2f4e <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    2e16:	b34d      	cbz	r5, 2e6c <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    2e18:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2e1c:	4a52      	ldr	r2, [pc, #328]	; (2f68 <_usb_d_dev_ep_trans+0x1c4>)
    2e1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2e26:	2b00      	cmp	r3, #0
    2e28:	d07b      	beq.n	2f22 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    2e2a:	f04f 0800 	mov.w	r8, #0
    2e2e:	e00c      	b.n	2e4a <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2e30:	4615      	mov	r5, r2
    2e32:	e7d9      	b.n	2de8 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    2e34:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2e38:	4a4b      	ldr	r2, [pc, #300]	; (2f68 <_usb_d_dev_ep_trans+0x1c4>)
    2e3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2e42:	2b00      	cmp	r3, #0
    2e44:	d06a      	beq.n	2f1c <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    2e46:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    2e4a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2e4e:	4a46      	ldr	r2, [pc, #280]	; (2f68 <_usb_d_dev_ep_trans+0x1c4>)
    2e50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e54:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2e58:	f013 0f08 	tst.w	r3, #8
    2e5c:	d009      	beq.n	2e72 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    2e5e:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2e60:	b003      	add	sp, #12
    2e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    2e66:	f04f 0800 	mov.w	r8, #0
    2e6a:	e7ee      	b.n	2e4a <_usb_d_dev_ep_trans+0xa6>
    2e6c:	f04f 0800 	mov.w	r8, #0
    2e70:	e7eb      	b.n	2e4a <_usb_d_dev_ep_trans+0xa6>
    2e72:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    2e74:	a801      	add	r0, sp, #4
    2e76:	4b3d      	ldr	r3, [pc, #244]	; (2f6c <_usb_d_dev_ep_trans+0x1c8>)
    2e78:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    2e7a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2e7e:	4a3a      	ldr	r2, [pc, #232]	; (2f68 <_usb_d_dev_ep_trans+0x1c4>)
    2e80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e84:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2e88:	f013 0f40 	tst.w	r3, #64	; 0x40
    2e8c:	d13c      	bne.n	2f08 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    2e8e:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    2e92:	4b35      	ldr	r3, [pc, #212]	; (2f68 <_usb_d_dev_ep_trans+0x1c4>)
    2e94:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    2e98:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2ea0:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    2ea4:	a801      	add	r0, sp, #4
    2ea6:	4b32      	ldr	r3, [pc, #200]	; (2f70 <_usb_d_dev_ep_trans+0x1cc>)
    2ea8:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    2eaa:	f8da 3000 	ldr.w	r3, [sl]
    2eae:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    2eb2:	f8da 3004 	ldr.w	r3, [sl, #4]
    2eb6:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    2eba:	2300      	movs	r3, #0
    2ebc:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    2ec0:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    2ec2:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2ec6:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    2eca:	f368 1345 	bfi	r3, r8, #5, #1
    2ece:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2ed2:	f89a 3009 	ldrb.w	r3, [sl, #9]
    2ed6:	b1e3      	cbz	r3, 2f12 <_usb_d_dev_ep_trans+0x16e>
    2ed8:	fab5 f585 	clz	r5, r5
    2edc:	096d      	lsrs	r5, r5, #5
    2ede:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2ee2:	4b21      	ldr	r3, [pc, #132]	; (2f68 <_usb_d_dev_ep_trans+0x1c4>)
    2ee4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2ee8:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    2eec:	f365 1304 	bfi	r3, r5, #4, #1
    2ef0:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    2ef4:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    2ef6:	f04f 0100 	mov.w	r1, #0
    2efa:	4638      	mov	r0, r7
    2efc:	bfb4      	ite	lt
    2efe:	4b1d      	ldrlt	r3, [pc, #116]	; (2f74 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    2f00:	4b1d      	ldrge	r3, [pc, #116]	; (2f78 <_usb_d_dev_ep_trans+0x1d4>)
    2f02:	4798      	blx	r3
	return ERR_NONE;
    2f04:	2000      	movs	r0, #0
    2f06:	e7ab      	b.n	2e60 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    2f08:	a801      	add	r0, sp, #4
    2f0a:	4b19      	ldr	r3, [pc, #100]	; (2f70 <_usb_d_dev_ep_trans+0x1cc>)
    2f0c:	4798      	blx	r3
		return USB_BUSY;
    2f0e:	2001      	movs	r0, #1
    2f10:	e7a6      	b.n	2e60 <_usb_d_dev_ep_trans+0xbc>
    2f12:	2500      	movs	r5, #0
    2f14:	e7e3      	b.n	2ede <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    2f16:	f06f 0011 	mvn.w	r0, #17
    2f1a:	e7a1      	b.n	2e60 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    2f1c:	f06f 0012 	mvn.w	r0, #18
    2f20:	e79e      	b.n	2e60 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    2f22:	f06f 0011 	mvn.w	r0, #17
    2f26:	e79b      	b.n	2e60 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    2f28:	f06f 0012 	mvn.w	r0, #18
    2f2c:	e798      	b.n	2e60 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    2f2e:	6841      	ldr	r1, [r0, #4]
    2f30:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    2f34:	4f11      	ldr	r7, [pc, #68]	; (2f7c <_usb_d_dev_ep_trans+0x1d8>)
    2f36:	2400      	movs	r4, #0
    2f38:	e75b      	b.n	2df2 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2f3a:	4a0b      	ldr	r2, [pc, #44]	; (2f68 <_usb_d_dev_ep_trans+0x1c4>)
    2f3c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    2f40:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2f44:	428a      	cmp	r2, r1
    2f46:	d0f2      	beq.n	2f2e <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    2f48:	4f0c      	ldr	r7, [pc, #48]	; (2f7c <_usb_d_dev_ep_trans+0x1d8>)
    2f4a:	2400      	movs	r4, #0
    2f4c:	e74a      	b.n	2de4 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    2f4e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2f52:	4a05      	ldr	r2, [pc, #20]	; (2f68 <_usb_d_dev_ep_trans+0x1c4>)
    2f54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	d0e3      	beq.n	2f28 <_usb_d_dev_ep_trans+0x184>
    2f60:	f04f 0801 	mov.w	r8, #1
    2f64:	e771      	b.n	2e4a <_usb_d_dev_ep_trans+0xa6>
    2f66:	bf00      	nop
    2f68:	20000540 	.word	0x20000540
    2f6c:	00003045 	.word	0x00003045
    2f70:	00003053 	.word	0x00003053
    2f74:	00002005 	.word	0x00002005
    2f78:	00002189 	.word	0x00002189
    2f7c:	200005b4 	.word	0x200005b4
    2f80:	20041fff 	.word	0x20041fff

00002f84 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2f84:	4b06      	ldr	r3, [pc, #24]	; (2fa0 <_usb_d_dev_register_callback+0x1c>)
    2f86:	2900      	cmp	r1, #0
    2f88:	bf08      	it	eq
    2f8a:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    2f8c:	2801      	cmp	r0, #1
    2f8e:	d003      	beq.n	2f98 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2f90:	b908      	cbnz	r0, 2f96 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2f92:	4b04      	ldr	r3, [pc, #16]	; (2fa4 <_usb_d_dev_register_callback+0x20>)
    2f94:	6619      	str	r1, [r3, #96]	; 0x60
    2f96:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    2f98:	4b02      	ldr	r3, [pc, #8]	; (2fa4 <_usb_d_dev_register_callback+0x20>)
    2f9a:	6659      	str	r1, [r3, #100]	; 0x64
    2f9c:	4770      	bx	lr
    2f9e:	bf00      	nop
    2fa0:	00001d7d 	.word	0x00001d7d
    2fa4:	20000540 	.word	0x20000540

00002fa8 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2fa8:	4b09      	ldr	r3, [pc, #36]	; (2fd0 <_usb_d_dev_register_ep_callback+0x28>)
    2faa:	2900      	cmp	r1, #0
    2fac:	bf08      	it	eq
    2fae:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2fb0:	4603      	mov	r3, r0
    2fb2:	b130      	cbz	r0, 2fc2 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2fb4:	2801      	cmp	r0, #1
    2fb6:	d007      	beq.n	2fc8 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2fb8:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2fba:	bf04      	itt	eq
    2fbc:	4b05      	ldreq	r3, [pc, #20]	; (2fd4 <_usb_d_dev_register_ep_callback+0x2c>)
    2fbe:	6719      	streq	r1, [r3, #112]	; 0x70
    2fc0:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2fc2:	4b04      	ldr	r3, [pc, #16]	; (2fd4 <_usb_d_dev_register_ep_callback+0x2c>)
    2fc4:	6699      	str	r1, [r3, #104]	; 0x68
    2fc6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2fc8:	4b02      	ldr	r3, [pc, #8]	; (2fd4 <_usb_d_dev_register_ep_callback+0x2c>)
    2fca:	66d9      	str	r1, [r3, #108]	; 0x6c
    2fcc:	4770      	bx	lr
    2fce:	bf00      	nop
    2fd0:	00001d7d 	.word	0x00001d7d
    2fd4:	20000540 	.word	0x20000540

00002fd8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    2fd8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2fda:	4b01      	ldr	r3, [pc, #4]	; (2fe0 <USB_0_Handler+0x8>)
    2fdc:	4798      	blx	r3
    2fde:	bd08      	pop	{r3, pc}
    2fe0:	00002379 	.word	0x00002379

00002fe4 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    2fe4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2fe6:	4b01      	ldr	r3, [pc, #4]	; (2fec <USB_1_Handler+0x8>)
    2fe8:	4798      	blx	r3
    2fea:	bd08      	pop	{r3, pc}
    2fec:	00002379 	.word	0x00002379

00002ff0 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    2ff0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2ff2:	4b01      	ldr	r3, [pc, #4]	; (2ff8 <USB_2_Handler+0x8>)
    2ff4:	4798      	blx	r3
    2ff6:	bd08      	pop	{r3, pc}
    2ff8:	00002379 	.word	0x00002379

00002ffc <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    2ffc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2ffe:	4b01      	ldr	r3, [pc, #4]	; (3004 <USB_3_Handler+0x8>)
    3000:	4798      	blx	r3
    3002:	bd08      	pop	{r3, pc}
    3004:	00002379 	.word	0x00002379

00003008 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    3008:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    300a:	4805      	ldr	r0, [pc, #20]	; (3020 <cdc_device_acm_init+0x18>)
    300c:	4b05      	ldr	r3, [pc, #20]	; (3024 <cdc_device_acm_init+0x1c>)
    300e:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    3010:	4b05      	ldr	r3, [pc, #20]	; (3028 <cdc_device_acm_init+0x20>)
    3012:	4798      	blx	r3

	usbdc_start(single_desc);
    3014:	4805      	ldr	r0, [pc, #20]	; (302c <cdc_device_acm_init+0x24>)
    3016:	4b06      	ldr	r3, [pc, #24]	; (3030 <cdc_device_acm_init+0x28>)
    3018:	4798      	blx	r3
	usbdc_attach();
    301a:	4b06      	ldr	r3, [pc, #24]	; (3034 <cdc_device_acm_init+0x2c>)
    301c:	4798      	blx	r3
    301e:	bd08      	pop	{r3, pc}
    3020:	20000768 	.word	0x20000768
    3024:	00003911 	.word	0x00003911
    3028:	000032c1 	.word	0x000032c1
    302c:	20000000 	.word	0x20000000
    3030:	00003981 	.word	0x00003981
    3034:	000039b5 	.word	0x000039b5

00003038 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    3038:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    303a:	4b01      	ldr	r3, [pc, #4]	; (3040 <usb_init+0x8>)
    303c:	4798      	blx	r3
    303e:	bd08      	pop	{r3, pc}
    3040:	00003009 	.word	0x00003009

00003044 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3044:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    3048:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    304a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    304c:	f3bf 8f5f 	dmb	sy
    3050:	4770      	bx	lr

00003052 <atomic_leave_critical>:
    3052:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    3056:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3058:	f383 8810 	msr	PRIMASK, r3
    305c:	4770      	bx	lr
	...

00003060 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3060:	b5f0      	push	{r4, r5, r6, r7, lr}
    3062:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    3064:	780b      	ldrb	r3, [r1, #0]
    3066:	f3c3 1441 	ubfx	r4, r3, #5, #2
    306a:	2c01      	cmp	r4, #1
    306c:	d15e      	bne.n	312c <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    306e:	888c      	ldrh	r4, [r1, #4]
    3070:	4d35      	ldr	r5, [pc, #212]	; (3148 <cdcdf_acm_req+0xe8>)
    3072:	782d      	ldrb	r5, [r5, #0]
    3074:	42a5      	cmp	r5, r4
    3076:	d003      	beq.n	3080 <cdcdf_acm_req+0x20>
    3078:	4d33      	ldr	r5, [pc, #204]	; (3148 <cdcdf_acm_req+0xe8>)
    307a:	786d      	ldrb	r5, [r5, #1]
    307c:	42a5      	cmp	r5, r4
    307e:	d158      	bne.n	3132 <cdcdf_acm_req+0xd2>
    3080:	4616      	mov	r6, r2
    3082:	460c      	mov	r4, r1
    3084:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    3086:	f013 0f80 	tst.w	r3, #128	; 0x80
    308a:	d10c      	bne.n	30a6 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    308c:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    308e:	4b2f      	ldr	r3, [pc, #188]	; (314c <cdcdf_acm_req+0xec>)
    3090:	4798      	blx	r3
    3092:	4601      	mov	r1, r0
	switch (req->bRequest) {
    3094:	7863      	ldrb	r3, [r4, #1]
    3096:	2b20      	cmp	r3, #32
    3098:	d013      	beq.n	30c2 <cdcdf_acm_req+0x62>
    309a:	2b22      	cmp	r3, #34	; 0x22
    309c:	d032      	beq.n	3104 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    309e:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    30a2:	b003      	add	sp, #12
    30a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    30a6:	2a01      	cmp	r2, #1
    30a8:	d046      	beq.n	3138 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    30aa:	784b      	ldrb	r3, [r1, #1]
    30ac:	2b21      	cmp	r3, #33	; 0x21
    30ae:	d145      	bne.n	313c <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    30b0:	88cb      	ldrh	r3, [r1, #6]
    30b2:	2b07      	cmp	r3, #7
    30b4:	d145      	bne.n	3142 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    30b6:	2300      	movs	r3, #0
    30b8:	2207      	movs	r2, #7
    30ba:	4925      	ldr	r1, [pc, #148]	; (3150 <cdcdf_acm_req+0xf0>)
    30bc:	4c25      	ldr	r4, [pc, #148]	; (3154 <cdcdf_acm_req+0xf4>)
    30be:	47a0      	blx	r4
    30c0:	e7ef      	b.n	30a2 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    30c2:	2f07      	cmp	r7, #7
    30c4:	d12b      	bne.n	311e <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    30c6:	b1be      	cbz	r6, 30f8 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    30c8:	6800      	ldr	r0, [r0, #0]
    30ca:	9000      	str	r0, [sp, #0]
    30cc:	888a      	ldrh	r2, [r1, #4]
    30ce:	798b      	ldrb	r3, [r1, #6]
    30d0:	f8ad 2004 	strh.w	r2, [sp, #4]
    30d4:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    30d8:	4b1b      	ldr	r3, [pc, #108]	; (3148 <cdcdf_acm_req+0xe8>)
    30da:	691b      	ldr	r3, [r3, #16]
    30dc:	b113      	cbz	r3, 30e4 <cdcdf_acm_req+0x84>
    30de:	4668      	mov	r0, sp
    30e0:	4798      	blx	r3
    30e2:	b1f8      	cbz	r0, 3124 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    30e4:	4b18      	ldr	r3, [pc, #96]	; (3148 <cdcdf_acm_req+0xe8>)
    30e6:	aa02      	add	r2, sp, #8
    30e8:	e912 0003 	ldmdb	r2, {r0, r1}
    30ec:	6098      	str	r0, [r3, #8]
    30ee:	8199      	strh	r1, [r3, #12]
    30f0:	0c09      	lsrs	r1, r1, #16
    30f2:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    30f4:	2000      	movs	r0, #0
    30f6:	e7d4      	b.n	30a2 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    30f8:	2300      	movs	r3, #0
    30fa:	2207      	movs	r2, #7
    30fc:	4628      	mov	r0, r5
    30fe:	4c15      	ldr	r4, [pc, #84]	; (3154 <cdcdf_acm_req+0xf4>)
    3100:	47a0      	blx	r4
    3102:	e7ce      	b.n	30a2 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    3104:	2300      	movs	r3, #0
    3106:	461a      	mov	r2, r3
    3108:	4619      	mov	r1, r3
    310a:	4618      	mov	r0, r3
    310c:	4d11      	ldr	r5, [pc, #68]	; (3154 <cdcdf_acm_req+0xf4>)
    310e:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    3110:	4b0d      	ldr	r3, [pc, #52]	; (3148 <cdcdf_acm_req+0xe8>)
    3112:	695b      	ldr	r3, [r3, #20]
    3114:	b143      	cbz	r3, 3128 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    3116:	8860      	ldrh	r0, [r4, #2]
    3118:	4798      	blx	r3
		return ERR_NONE;
    311a:	2000      	movs	r0, #0
    311c:	e7c1      	b.n	30a2 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    311e:	f04f 30ff 	mov.w	r0, #4294967295
    3122:	e7be      	b.n	30a2 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    3124:	2000      	movs	r0, #0
    3126:	e7bc      	b.n	30a2 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    3128:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    312a:	e7ba      	b.n	30a2 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    312c:	f06f 0009 	mvn.w	r0, #9
    3130:	e7b7      	b.n	30a2 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    3132:	f06f 0009 	mvn.w	r0, #9
    3136:	e7b4      	b.n	30a2 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    3138:	2000      	movs	r0, #0
    313a:	e7b2      	b.n	30a2 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    313c:	f06f 000c 	mvn.w	r0, #12
    3140:	e7af      	b.n	30a2 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    3142:	f04f 30ff 	mov.w	r0, #4294967295
    3146:	e7ac      	b.n	30a2 <cdcdf_acm_req+0x42>
    3148:	200007a8 	.word	0x200007a8
    314c:	000039c1 	.word	0x000039c1
    3150:	200007b0 	.word	0x200007b0
    3154:	0000349d 	.word	0x0000349d

00003158 <cdcdf_acm_ctrl>:
{
    3158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    315c:	b083      	sub	sp, #12
    315e:	4616      	mov	r6, r2
	switch (ctrl) {
    3160:	2901      	cmp	r1, #1
    3162:	d066      	beq.n	3232 <cdcdf_acm_ctrl+0xda>
    3164:	b141      	cbz	r1, 3178 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    3166:	2902      	cmp	r1, #2
    3168:	bf0c      	ite	eq
    316a:	f06f 001a 	mvneq.w	r0, #26
    316e:	f06f 000c 	mvnne.w	r0, #12
}
    3172:	b003      	add	sp, #12
    3174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3178:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    317c:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    317e:	2800      	cmp	r0, #0
    3180:	f000 8085 	beq.w	328e <cdcdf_acm_ctrl+0x136>
    3184:	f10a 3bff 	add.w	fp, sl, #4294967295
    3188:	f10a 0301 	add.w	r3, sl, #1
    318c:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    318e:	4f46      	ldr	r7, [pc, #280]	; (32a8 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    3190:	f8df 9124 	ldr.w	r9, [pc, #292]	; 32b8 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3194:	f8df 8124 	ldr.w	r8, [pc, #292]	; 32bc <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    3198:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    319a:	7943      	ldrb	r3, [r0, #5]
    319c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    31a0:	2b02      	cmp	r3, #2
    31a2:	d002      	beq.n	31aa <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    31a4:	f06f 0009 	mvn.w	r0, #9
    31a8:	e7e3      	b.n	3172 <cdcdf_acm_ctrl+0x1a>
    31aa:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    31ae:	f89b 3000 	ldrb.w	r3, [fp]
    31b2:	429a      	cmp	r2, r3
    31b4:	d06e      	beq.n	3294 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    31b6:	2bff      	cmp	r3, #255	; 0xff
    31b8:	d16f      	bne.n	329a <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    31ba:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    31be:	2205      	movs	r2, #5
    31c0:	6871      	ldr	r1, [r6, #4]
    31c2:	4b3a      	ldr	r3, [pc, #232]	; (32ac <cdcdf_acm_ctrl+0x154>)
    31c4:	4798      	blx	r3
		while (NULL != ep) {
    31c6:	4604      	mov	r4, r0
    31c8:	b1f8      	cbz	r0, 320a <cdcdf_acm_ctrl+0xb2>
    31ca:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    31ce:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    31d0:	7963      	ldrb	r3, [r4, #5]
    31d2:	7922      	ldrb	r2, [r4, #4]
    31d4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    31d8:	b292      	uxth	r2, r2
    31da:	78e1      	ldrb	r1, [r4, #3]
    31dc:	4628      	mov	r0, r5
    31de:	47b8      	blx	r7
    31e0:	2800      	cmp	r0, #0
    31e2:	d15d      	bne.n	32a0 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    31e4:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    31e8:	bf14      	ite	ne
    31ea:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    31ee:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    31f2:	4628      	mov	r0, r5
    31f4:	47c8      	blx	r9
			desc->sod = ep;
    31f6:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    31f8:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    31fa:	6871      	ldr	r1, [r6, #4]
    31fc:	4420      	add	r0, r4
    31fe:	47c0      	blx	r8
		while (NULL != ep) {
    3200:	4604      	mov	r4, r0
    3202:	2800      	cmp	r0, #0
    3204:	d1e3      	bne.n	31ce <cdcdf_acm_ctrl+0x76>
    3206:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    320a:	6833      	ldr	r3, [r6, #0]
    320c:	7818      	ldrb	r0, [r3, #0]
    320e:	2204      	movs	r2, #4
    3210:	6871      	ldr	r1, [r6, #4]
    3212:	4418      	add	r0, r3
    3214:	4b25      	ldr	r3, [pc, #148]	; (32ac <cdcdf_acm_ctrl+0x154>)
    3216:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    3218:	9b00      	ldr	r3, [sp, #0]
    321a:	459b      	cmp	fp, r3
    321c:	d004      	beq.n	3228 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    321e:	2800      	cmp	r0, #0
    3220:	d1ba      	bne.n	3198 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    3222:	f06f 0009 	mvn.w	r0, #9
    3226:	e7a4      	b.n	3172 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    3228:	2201      	movs	r2, #1
    322a:	4b21      	ldr	r3, [pc, #132]	; (32b0 <cdcdf_acm_ctrl+0x158>)
    322c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    322e:	2000      	movs	r0, #0
    3230:	e79f      	b.n	3172 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3232:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    3234:	b142      	cbz	r2, 3248 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    3236:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    3238:	795b      	ldrb	r3, [r3, #5]
    323a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    323e:	2b02      	cmp	r3, #2
    3240:	d002      	beq.n	3248 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    3242:	f06f 0009 	mvn.w	r0, #9
    3246:	e794      	b.n	3172 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    3248:	7823      	ldrb	r3, [r4, #0]
    324a:	2bff      	cmp	r3, #255	; 0xff
    324c:	d008      	beq.n	3260 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    324e:	23ff      	movs	r3, #255	; 0xff
    3250:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    3252:	78a0      	ldrb	r0, [r4, #2]
    3254:	4298      	cmp	r0, r3
    3256:	d003      	beq.n	3260 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3258:	4b16      	ldr	r3, [pc, #88]	; (32b4 <cdcdf_acm_ctrl+0x15c>)
    325a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    325c:	23ff      	movs	r3, #255	; 0xff
    325e:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    3260:	7863      	ldrb	r3, [r4, #1]
    3262:	2bff      	cmp	r3, #255	; 0xff
    3264:	d008      	beq.n	3278 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    3266:	23ff      	movs	r3, #255	; 0xff
    3268:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    326a:	78e0      	ldrb	r0, [r4, #3]
    326c:	4298      	cmp	r0, r3
    326e:	d003      	beq.n	3278 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3270:	4b10      	ldr	r3, [pc, #64]	; (32b4 <cdcdf_acm_ctrl+0x15c>)
    3272:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3274:	23ff      	movs	r3, #255	; 0xff
    3276:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    3278:	7920      	ldrb	r0, [r4, #4]
    327a:	28ff      	cmp	r0, #255	; 0xff
    327c:	d003      	beq.n	3286 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    327e:	4b0d      	ldr	r3, [pc, #52]	; (32b4 <cdcdf_acm_ctrl+0x15c>)
    3280:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    3282:	23ff      	movs	r3, #255	; 0xff
    3284:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    3286:	2000      	movs	r0, #0
    3288:	4b09      	ldr	r3, [pc, #36]	; (32b0 <cdcdf_acm_ctrl+0x158>)
    328a:	7158      	strb	r0, [r3, #5]
    328c:	e771      	b.n	3172 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    328e:	f06f 0009 	mvn.w	r0, #9
    3292:	e76e      	b.n	3172 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    3294:	f06f 0011 	mvn.w	r0, #17
    3298:	e76b      	b.n	3172 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    329a:	f06f 001b 	mvn.w	r0, #27
    329e:	e768      	b.n	3172 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    32a0:	f06f 0013 	mvn.w	r0, #19
    32a4:	e765      	b.n	3172 <cdcdf_acm_ctrl+0x1a>
    32a6:	bf00      	nop
    32a8:	00001141 	.word	0x00001141
    32ac:	000039e1 	.word	0x000039e1
    32b0:	200007a8 	.word	0x200007a8
    32b4:	000011a9 	.word	0x000011a9
    32b8:	000011d5 	.word	0x000011d5
    32bc:	00003a1b 	.word	0x00003a1b

000032c0 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    32c0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    32c2:	4b0a      	ldr	r3, [pc, #40]	; (32ec <cdcdf_acm_init+0x2c>)
    32c4:	4798      	blx	r3
    32c6:	2801      	cmp	r0, #1
    32c8:	d80c      	bhi.n	32e4 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    32ca:	4809      	ldr	r0, [pc, #36]	; (32f0 <cdcdf_acm_init+0x30>)
    32cc:	4b09      	ldr	r3, [pc, #36]	; (32f4 <cdcdf_acm_init+0x34>)
    32ce:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    32d0:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    32d2:	3018      	adds	r0, #24
    32d4:	4b08      	ldr	r3, [pc, #32]	; (32f8 <cdcdf_acm_init+0x38>)
    32d6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    32d8:	4908      	ldr	r1, [pc, #32]	; (32fc <cdcdf_acm_init+0x3c>)
    32da:	2001      	movs	r0, #1
    32dc:	4b08      	ldr	r3, [pc, #32]	; (3300 <cdcdf_acm_init+0x40>)
    32de:	4798      	blx	r3
	return ERR_NONE;
    32e0:	2000      	movs	r0, #0
    32e2:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    32e4:	f06f 0010 	mvn.w	r0, #16
}
    32e8:	bd08      	pop	{r3, pc}
    32ea:	bf00      	nop
    32ec:	000039cd 	.word	0x000039cd
    32f0:	200007a8 	.word	0x200007a8
    32f4:	00003159 	.word	0x00003159
    32f8:	0000396d 	.word	0x0000396d
    32fc:	20000060 	.word	0x20000060
    3300:	000038d9 	.word	0x000038d9

00003304 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    3304:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3306:	4b07      	ldr	r3, [pc, #28]	; (3324 <usbdc_unconfig+0x20>)
    3308:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    330a:	b14c      	cbz	r4, 3320 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    330c:	2600      	movs	r6, #0
    330e:	2501      	movs	r5, #1
    3310:	6863      	ldr	r3, [r4, #4]
    3312:	4632      	mov	r2, r6
    3314:	4629      	mov	r1, r5
    3316:	4620      	mov	r0, r4
    3318:	4798      	blx	r3
		func = func->next;
    331a:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    331c:	2c00      	cmp	r4, #0
    331e:	d1f7      	bne.n	3310 <usbdc_unconfig+0xc>
    3320:	bd70      	pop	{r4, r5, r6, pc}
    3322:	bf00      	nop
    3324:	200007cc 	.word	0x200007cc

00003328 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    3328:	b570      	push	{r4, r5, r6, lr}
    332a:	4606      	mov	r6, r0
    332c:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    332e:	4b07      	ldr	r3, [pc, #28]	; (334c <usbdc_change_notify+0x24>)
    3330:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    3332:	b91c      	cbnz	r4, 333c <usbdc_change_notify+0x14>
    3334:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    3336:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    3338:	2c00      	cmp	r4, #0
    333a:	d0fb      	beq.n	3334 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    333c:	6863      	ldr	r3, [r4, #4]
    333e:	2b00      	cmp	r3, #0
    3340:	d0f9      	beq.n	3336 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    3342:	4629      	mov	r1, r5
    3344:	4630      	mov	r0, r6
    3346:	4798      	blx	r3
    3348:	e7f5      	b.n	3336 <usbdc_change_notify+0xe>
    334a:	bf00      	nop
    334c:	200007cc 	.word	0x200007cc

00003350 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3352:	4607      	mov	r7, r0
    3354:	460e      	mov	r6, r1
    3356:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3358:	4b0c      	ldr	r3, [pc, #48]	; (338c <usbdc_request_handler+0x3c>)
    335a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    335c:	b91c      	cbnz	r4, 3366 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    335e:	2000      	movs	r0, #0
    3360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    3362:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    3364:	b16c      	cbz	r4, 3382 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    3366:	6863      	ldr	r3, [r4, #4]
    3368:	2b00      	cmp	r3, #0
    336a:	d0fa      	beq.n	3362 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    336c:	462a      	mov	r2, r5
    336e:	4631      	mov	r1, r6
    3370:	4638      	mov	r0, r7
    3372:	4798      	blx	r3
			if (0 == rc) {
    3374:	b138      	cbz	r0, 3386 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    3376:	f110 0f0a 	cmn.w	r0, #10
    337a:	d0f2      	beq.n	3362 <usbdc_request_handler+0x12>
				return -1;
    337c:	f04f 30ff 	mov.w	r0, #4294967295
}
    3380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    3382:	2000      	movs	r0, #0
    3384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    3386:	2001      	movs	r0, #1
    3388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    338a:	bf00      	nop
    338c:	200007cc 	.word	0x200007cc

00003390 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    3390:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    3392:	4b06      	ldr	r3, [pc, #24]	; (33ac <usbd_sof_cb+0x1c>)
    3394:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    3396:	b91c      	cbnz	r4, 33a0 <usbd_sof_cb+0x10>
    3398:	bd10      	pop	{r4, pc}
		sof = sof->next;
    339a:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    339c:	2c00      	cmp	r4, #0
    339e:	d0fb      	beq.n	3398 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    33a0:	6863      	ldr	r3, [r4, #4]
    33a2:	2b00      	cmp	r3, #0
    33a4:	d0f9      	beq.n	339a <usbd_sof_cb+0xa>
			sof->cb();
    33a6:	4798      	blx	r3
    33a8:	e7f7      	b.n	339a <usbd_sof_cb+0xa>
    33aa:	bf00      	nop
    33ac:	200007cc 	.word	0x200007cc

000033b0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    33b0:	b510      	push	{r4, lr}
    33b2:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    33b4:	b119      	cbz	r1, 33be <usbdc_cb_ctl_done+0xe>
    33b6:	2901      	cmp	r1, #1
    33b8:	d026      	beq.n	3408 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    33ba:	2000      	movs	r0, #0
    33bc:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    33be:	7813      	ldrb	r3, [r2, #0]
    33c0:	2b00      	cmp	r3, #0
    33c2:	d1fa      	bne.n	33ba <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    33c4:	7853      	ldrb	r3, [r2, #1]
    33c6:	2b05      	cmp	r3, #5
    33c8:	d00f      	beq.n	33ea <usbdc_cb_ctl_done+0x3a>
    33ca:	2b09      	cmp	r3, #9
    33cc:	d1f5      	bne.n	33ba <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    33ce:	8852      	ldrh	r2, [r2, #2]
    33d0:	4b10      	ldr	r3, [pc, #64]	; (3414 <usbdc_cb_ctl_done+0x64>)
    33d2:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    33d4:	8863      	ldrh	r3, [r4, #2]
    33d6:	2b00      	cmp	r3, #0
    33d8:	bf14      	ite	ne
    33da:	2104      	movne	r1, #4
    33dc:	2103      	moveq	r1, #3
    33de:	4b0d      	ldr	r3, [pc, #52]	; (3414 <usbdc_cb_ctl_done+0x64>)
    33e0:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    33e2:	2001      	movs	r0, #1
    33e4:	4b0c      	ldr	r3, [pc, #48]	; (3418 <usbdc_cb_ctl_done+0x68>)
    33e6:	4798      	blx	r3
    33e8:	e7e7      	b.n	33ba <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    33ea:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    33ec:	b2c0      	uxtb	r0, r0
    33ee:	4b0b      	ldr	r3, [pc, #44]	; (341c <usbdc_cb_ctl_done+0x6c>)
    33f0:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    33f2:	8863      	ldrh	r3, [r4, #2]
    33f4:	2b00      	cmp	r3, #0
    33f6:	bf14      	ite	ne
    33f8:	2103      	movne	r1, #3
    33fa:	2102      	moveq	r1, #2
    33fc:	4b05      	ldr	r3, [pc, #20]	; (3414 <usbdc_cb_ctl_done+0x64>)
    33fe:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3400:	2001      	movs	r0, #1
    3402:	4b05      	ldr	r3, [pc, #20]	; (3418 <usbdc_cb_ctl_done+0x68>)
    3404:	4798      	blx	r3
    3406:	e7d8      	b.n	33ba <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    3408:	2201      	movs	r2, #1
    340a:	4621      	mov	r1, r4
    340c:	2000      	movs	r0, #0
    340e:	4b04      	ldr	r3, [pc, #16]	; (3420 <usbdc_cb_ctl_done+0x70>)
    3410:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    3412:	e7d2      	b.n	33ba <usbdc_cb_ctl_done+0xa>
    3414:	200007cc 	.word	0x200007cc
    3418:	00003329 	.word	0x00003329
    341c:	00001135 	.word	0x00001135
    3420:	00003351 	.word	0x00003351

00003424 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    3424:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    3426:	4b0d      	ldr	r3, [pc, #52]	; (345c <usbdc_reset+0x38>)
    3428:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    342a:	4d0d      	ldr	r5, [pc, #52]	; (3460 <usbdc_reset+0x3c>)
    342c:	2602      	movs	r6, #2
    342e:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    3430:	2400      	movs	r4, #0
    3432:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    3434:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    3436:	4620      	mov	r0, r4
    3438:	4b0a      	ldr	r3, [pc, #40]	; (3464 <usbdc_reset+0x40>)
    343a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    343c:	7f28      	ldrb	r0, [r5, #28]
    343e:	4b0a      	ldr	r3, [pc, #40]	; (3468 <usbdc_reset+0x44>)
    3440:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    3442:	4a0a      	ldr	r2, [pc, #40]	; (346c <usbdc_reset+0x48>)
    3444:	4621      	mov	r1, r4
    3446:	4620      	mov	r0, r4
    3448:	4d09      	ldr	r5, [pc, #36]	; (3470 <usbdc_reset+0x4c>)
    344a:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    344c:	4a09      	ldr	r2, [pc, #36]	; (3474 <usbdc_reset+0x50>)
    344e:	4631      	mov	r1, r6
    3450:	4620      	mov	r0, r4
    3452:	47a8      	blx	r5
	usb_d_ep_enable(0);
    3454:	4620      	mov	r0, r4
    3456:	4b08      	ldr	r3, [pc, #32]	; (3478 <usbdc_reset+0x54>)
    3458:	4798      	blx	r3
    345a:	bd70      	pop	{r4, r5, r6, pc}
    345c:	00003305 	.word	0x00003305
    3460:	200007cc 	.word	0x200007cc
    3464:	000011a9 	.word	0x000011a9
    3468:	00001195 	.word	0x00001195
    346c:	000034bd 	.word	0x000034bd
    3470:	000013a9 	.word	0x000013a9
    3474:	000033b1 	.word	0x000033b1
    3478:	000011d5 	.word	0x000011d5

0000347c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    347c:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    347e:	b110      	cbz	r0, 3486 <usbd_event_cb+0xa>
    3480:	2801      	cmp	r0, #1
    3482:	d004      	beq.n	348e <usbd_event_cb+0x12>
    3484:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    3486:	2000      	movs	r0, #0
    3488:	4b02      	ldr	r3, [pc, #8]	; (3494 <usbd_event_cb+0x18>)
    348a:	4798      	blx	r3
		break;
    348c:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    348e:	4b02      	ldr	r3, [pc, #8]	; (3498 <usbd_event_cb+0x1c>)
    3490:	4798      	blx	r3
    3492:	bd08      	pop	{r3, pc}
    3494:	00003329 	.word	0x00003329
    3498:	00003425 	.word	0x00003425

0000349c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    349c:	b500      	push	{lr}
    349e:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    34a0:	9101      	str	r1, [sp, #4]
    34a2:	9202      	str	r2, [sp, #8]
    34a4:	f88d 000c 	strb.w	r0, [sp, #12]
    34a8:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    34ac:	a801      	add	r0, sp, #4
    34ae:	4b02      	ldr	r3, [pc, #8]	; (34b8 <usbdc_xfer+0x1c>)
    34b0:	4798      	blx	r3
}
    34b2:	b005      	add	sp, #20
    34b4:	f85d fb04 	ldr.w	pc, [sp], #4
    34b8:	00001221 	.word	0x00001221

000034bc <usbdc_cb_ctl_req>:
{
    34bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    34c0:	b083      	sub	sp, #12
    34c2:	4605      	mov	r5, r0
    34c4:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    34c6:	2200      	movs	r2, #0
    34c8:	4b9b      	ldr	r3, [pc, #620]	; (3738 <usbdc_cb_ctl_req+0x27c>)
    34ca:	4798      	blx	r3
    34cc:	f1b0 3fff 	cmp.w	r0, #4294967295
    34d0:	d00b      	beq.n	34ea <usbdc_cb_ctl_req+0x2e>
    34d2:	2801      	cmp	r0, #1
    34d4:	f000 81e3 	beq.w	389e <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    34d8:	7823      	ldrb	r3, [r4, #0]
    34da:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    34de:	d008      	beq.n	34f2 <usbdc_cb_ctl_req+0x36>
    34e0:	2a80      	cmp	r2, #128	; 0x80
    34e2:	f000 80f4 	beq.w	36ce <usbdc_cb_ctl_req+0x212>
		return false;
    34e6:	2000      	movs	r0, #0
    34e8:	e000      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		return false;
    34ea:	2000      	movs	r0, #0
}
    34ec:	b003      	add	sp, #12
    34ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    34f2:	7862      	ldrb	r2, [r4, #1]
    34f4:	3a01      	subs	r2, #1
    34f6:	2a0a      	cmp	r2, #10
    34f8:	f200 81d3 	bhi.w	38a2 <usbdc_cb_ctl_req+0x3e6>
    34fc:	e8df f012 	tbh	[pc, r2, lsl #1]
    3500:	01d10060 	.word	0x01d10060
    3504:	01d10076 	.word	0x01d10076
    3508:	01d1000b 	.word	0x01d1000b
    350c:	01d101d1 	.word	0x01d101d1
    3510:	01d10015 	.word	0x01d10015
    3514:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3516:	2301      	movs	r3, #1
    3518:	2200      	movs	r2, #0
    351a:	4611      	mov	r1, r2
    351c:	4628      	mov	r0, r5
    351e:	4c87      	ldr	r4, [pc, #540]	; (373c <usbdc_cb_ctl_req+0x280>)
    3520:	47a0      	blx	r4
    3522:	fab0 f080 	clz	r0, r0
    3526:	0940      	lsrs	r0, r0, #5
    3528:	e7e0      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    352a:	8862      	ldrh	r2, [r4, #2]
    352c:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    352e:	b1ca      	cbz	r2, 3564 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    3530:	4b83      	ldr	r3, [pc, #524]	; (3740 <usbdc_cb_ctl_req+0x284>)
    3532:	681b      	ldr	r3, [r3, #0]
    3534:	6859      	ldr	r1, [r3, #4]
    3536:	6818      	ldr	r0, [r3, #0]
    3538:	4b82      	ldr	r3, [pc, #520]	; (3744 <usbdc_cb_ctl_req+0x288>)
    353a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    353c:	2800      	cmp	r0, #0
    353e:	f000 81be 	beq.w	38be <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    3542:	78c2      	ldrb	r2, [r0, #3]
    3544:	7881      	ldrb	r1, [r0, #2]
    3546:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    354a:	fa10 f181 	uxtah	r1, r0, r1
    354e:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3550:	2204      	movs	r2, #4
    3552:	4b7d      	ldr	r3, [pc, #500]	; (3748 <usbdc_cb_ctl_req+0x28c>)
    3554:	4798      	blx	r3
    3556:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    3558:	b130      	cbz	r0, 3568 <usbdc_cb_ctl_req+0xac>
    355a:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    355c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 3740 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3560:	4f79      	ldr	r7, [pc, #484]	; (3748 <usbdc_cb_ctl_req+0x28c>)
    3562:	e018      	b.n	3596 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    3564:	4b79      	ldr	r3, [pc, #484]	; (374c <usbdc_cb_ctl_req+0x290>)
    3566:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3568:	2301      	movs	r3, #1
    356a:	2200      	movs	r2, #0
    356c:	4611      	mov	r1, r2
    356e:	4628      	mov	r0, r5
    3570:	4c72      	ldr	r4, [pc, #456]	; (373c <usbdc_cb_ctl_req+0x280>)
    3572:	47a0      	blx	r4
    3574:	fab0 f080 	clz	r0, r0
    3578:	0940      	lsrs	r0, r0, #5
    357a:	e7b7      	b.n	34ec <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    357c:	464c      	mov	r4, r9
    357e:	e000      	b.n	3582 <usbdc_cb_ctl_req+0xc6>
    3580:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    3582:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    3584:	7803      	ldrb	r3, [r0, #0]
    3586:	4418      	add	r0, r3
    3588:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    358a:	2204      	movs	r2, #4
    358c:	9901      	ldr	r1, [sp, #4]
    358e:	47b8      	blx	r7
    3590:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    3592:	2800      	cmp	r0, #0
    3594:	d0e8      	beq.n	3568 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    3596:	f890 9002 	ldrb.w	r9, [r0, #2]
    359a:	45a1      	cmp	r9, r4
    359c:	d0f1      	beq.n	3582 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    359e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    35a2:	2c00      	cmp	r4, #0
    35a4:	d0ea      	beq.n	357c <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    35a6:	2600      	movs	r6, #0
    35a8:	6863      	ldr	r3, [r4, #4]
    35aa:	466a      	mov	r2, sp
    35ac:	4631      	mov	r1, r6
    35ae:	4620      	mov	r0, r4
    35b0:	4798      	blx	r3
    35b2:	2800      	cmp	r0, #0
    35b4:	d0e4      	beq.n	3580 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    35b6:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    35b8:	2c00      	cmp	r4, #0
    35ba:	d1f5      	bne.n	35a8 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    35bc:	464c      	mov	r4, r9
    35be:	e7e0      	b.n	3582 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    35c0:	f003 031f 	and.w	r3, r3, #31
    35c4:	2b02      	cmp	r3, #2
    35c6:	f040 816e 	bne.w	38a6 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    35ca:	88e3      	ldrh	r3, [r4, #6]
    35cc:	b10b      	cbz	r3, 35d2 <usbdc_cb_ctl_req+0x116>
			return false;
    35ce:	2000      	movs	r0, #0
    35d0:	e78c      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    35d2:	88a0      	ldrh	r0, [r4, #4]
    35d4:	2100      	movs	r1, #0
    35d6:	b2c0      	uxtb	r0, r0
    35d8:	4b5d      	ldr	r3, [pc, #372]	; (3750 <usbdc_cb_ctl_req+0x294>)
    35da:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    35dc:	2301      	movs	r3, #1
    35de:	2200      	movs	r2, #0
    35e0:	4611      	mov	r1, r2
    35e2:	4628      	mov	r0, r5
    35e4:	4c55      	ldr	r4, [pc, #340]	; (373c <usbdc_cb_ctl_req+0x280>)
    35e6:	47a0      	blx	r4
		return true;
    35e8:	2001      	movs	r0, #1
    35ea:	e77f      	b.n	34ec <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    35ec:	f003 031f 	and.w	r3, r3, #31
    35f0:	2b02      	cmp	r3, #2
    35f2:	f040 815a 	bne.w	38aa <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    35f6:	88e3      	ldrh	r3, [r4, #6]
    35f8:	b10b      	cbz	r3, 35fe <usbdc_cb_ctl_req+0x142>
			return false;
    35fa:	2000      	movs	r0, #0
    35fc:	e776      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    35fe:	88a0      	ldrh	r0, [r4, #4]
    3600:	2101      	movs	r1, #1
    3602:	b2c0      	uxtb	r0, r0
    3604:	4b52      	ldr	r3, [pc, #328]	; (3750 <usbdc_cb_ctl_req+0x294>)
    3606:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3608:	2301      	movs	r3, #1
    360a:	2200      	movs	r2, #0
    360c:	4611      	mov	r1, r2
    360e:	4628      	mov	r0, r5
    3610:	4c4a      	ldr	r4, [pc, #296]	; (373c <usbdc_cb_ctl_req+0x280>)
    3612:	47a0      	blx	r4
		return true;
    3614:	2001      	movs	r0, #1
    3616:	e769      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    3618:	8866      	ldrh	r6, [r4, #2]
    361a:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    361c:	4a48      	ldr	r2, [pc, #288]	; (3740 <usbdc_cb_ctl_req+0x284>)
    361e:	6813      	ldr	r3, [r2, #0]
    3620:	7ed2      	ldrb	r2, [r2, #27]
    3622:	6859      	ldr	r1, [r3, #4]
    3624:	6818      	ldr	r0, [r3, #0]
    3626:	4b47      	ldr	r3, [pc, #284]	; (3744 <usbdc_cb_ctl_req+0x288>)
    3628:	4798      	blx	r3
	if (NULL == ifc) {
    362a:	2800      	cmp	r0, #0
    362c:	d045      	beq.n	36ba <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    362e:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    3630:	78c2      	ldrb	r2, [r0, #3]
    3632:	7881      	ldrb	r1, [r0, #2]
    3634:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3638:	fa10 f181 	uxtah	r1, r0, r1
    363c:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    363e:	2204      	movs	r2, #4
    3640:	4b41      	ldr	r3, [pc, #260]	; (3748 <usbdc_cb_ctl_req+0x28c>)
    3642:	4798      	blx	r3
    3644:	4603      	mov	r3, r0
    3646:	2800      	cmp	r0, #0
    3648:	d039      	beq.n	36be <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    364a:	2704      	movs	r7, #4
    364c:	4d3e      	ldr	r5, [pc, #248]	; (3748 <usbdc_cb_ctl_req+0x28c>)
    364e:	e008      	b.n	3662 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    3650:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    3652:	7803      	ldrb	r3, [r0, #0]
    3654:	4418      	add	r0, r3
    3656:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3658:	463a      	mov	r2, r7
    365a:	9901      	ldr	r1, [sp, #4]
    365c:	47a8      	blx	r5
		if (NULL == ifc) {
    365e:	4603      	mov	r3, r0
    3660:	b378      	cbz	r0, 36c2 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    3662:	789a      	ldrb	r2, [r3, #2]
    3664:	42a2      	cmp	r2, r4
    3666:	d1f3      	bne.n	3650 <usbdc_cb_ctl_req+0x194>
    3668:	78da      	ldrb	r2, [r3, #3]
    366a:	42b2      	cmp	r2, r6
    366c:	d1f0      	bne.n	3650 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    366e:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    3670:	4b33      	ldr	r3, [pc, #204]	; (3740 <usbdc_cb_ctl_req+0x284>)
    3672:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    3674:	b33d      	cbz	r5, 36c6 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3676:	2701      	movs	r7, #1
    3678:	686b      	ldr	r3, [r5, #4]
    367a:	466a      	mov	r2, sp
    367c:	4639      	mov	r1, r7
    367e:	4628      	mov	r0, r5
    3680:	4798      	blx	r3
    3682:	b120      	cbz	r0, 368e <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    3684:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    3686:	2d00      	cmp	r5, #0
    3688:	d1f6      	bne.n	3678 <usbdc_cb_ctl_req+0x1bc>
	return false;
    368a:	2000      	movs	r0, #0
    368c:	e72e      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    368e:	686b      	ldr	r3, [r5, #4]
    3690:	466a      	mov	r2, sp
    3692:	2100      	movs	r1, #0
    3694:	4628      	mov	r0, r5
    3696:	4798      	blx	r3
    3698:	b9b8      	cbnz	r0, 36ca <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    369a:	b136      	cbz	r6, 36aa <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    369c:	4a28      	ldr	r2, [pc, #160]	; (3740 <usbdc_cb_ctl_req+0x284>)
    369e:	2301      	movs	r3, #1
    36a0:	fa03 f404 	lsl.w	r4, r3, r4
    36a4:	7f53      	ldrb	r3, [r2, #29]
    36a6:	4323      	orrs	r3, r4
    36a8:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    36aa:	2300      	movs	r3, #0
    36ac:	461a      	mov	r2, r3
    36ae:	4619      	mov	r1, r3
    36b0:	4618      	mov	r0, r3
    36b2:	4c22      	ldr	r4, [pc, #136]	; (373c <usbdc_cb_ctl_req+0x280>)
    36b4:	47a0      	blx	r4
			return true;
    36b6:	2001      	movs	r0, #1
    36b8:	e718      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		return false;
    36ba:	2000      	movs	r0, #0
    36bc:	e716      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		return false;
    36be:	2000      	movs	r0, #0
    36c0:	e714      	b.n	34ec <usbdc_cb_ctl_req+0x30>
			return false;
    36c2:	2000      	movs	r0, #0
    36c4:	e712      	b.n	34ec <usbdc_cb_ctl_req+0x30>
	return false;
    36c6:	2000      	movs	r0, #0
    36c8:	e710      	b.n	34ec <usbdc_cb_ctl_req+0x30>
			return false;
    36ca:	2000      	movs	r0, #0
    36cc:	e70e      	b.n	34ec <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    36ce:	7862      	ldrb	r2, [r4, #1]
    36d0:	2a0a      	cmp	r2, #10
    36d2:	f200 80ec 	bhi.w	38ae <usbdc_cb_ctl_req+0x3f2>
    36d6:	e8df f012 	tbh	[pc, r2, lsl #1]
    36da:	008e      	.short	0x008e
    36dc:	00ea00ea 	.word	0x00ea00ea
    36e0:	00ea00ea 	.word	0x00ea00ea
    36e4:	000b00ea 	.word	0x000b00ea
    36e8:	008200ea 	.word	0x008200ea
    36ec:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    36f0:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    36f2:	0a13      	lsrs	r3, r2, #8
    36f4:	2b02      	cmp	r3, #2
    36f6:	d02d      	beq.n	3754 <usbdc_cb_ctl_req+0x298>
    36f8:	2b03      	cmp	r3, #3
    36fa:	d050      	beq.n	379e <usbdc_cb_ctl_req+0x2e2>
    36fc:	2b01      	cmp	r3, #1
    36fe:	d001      	beq.n	3704 <usbdc_cb_ctl_req+0x248>
	return false;
    3700:	2000      	movs	r0, #0
    3702:	e6f3      	b.n	34ec <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    3704:	88e2      	ldrh	r2, [r4, #6]
    3706:	2a12      	cmp	r2, #18
    3708:	bf28      	it	cs
    370a:	2212      	movcs	r2, #18
    370c:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    370e:	4b0c      	ldr	r3, [pc, #48]	; (3740 <usbdc_cb_ctl_req+0x284>)
    3710:	681b      	ldr	r3, [r3, #0]
    3712:	2201      	movs	r2, #1
    3714:	6859      	ldr	r1, [r3, #4]
    3716:	6818      	ldr	r0, [r3, #0]
    3718:	4b0b      	ldr	r3, [pc, #44]	; (3748 <usbdc_cb_ctl_req+0x28c>)
    371a:	4798      	blx	r3
	if (!dev_desc) {
    371c:	4601      	mov	r1, r0
    371e:	2800      	cmp	r0, #0
    3720:	f000 80c7 	beq.w	38b2 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    3724:	2300      	movs	r3, #0
    3726:	4622      	mov	r2, r4
    3728:	4628      	mov	r0, r5
    372a:	4c04      	ldr	r4, [pc, #16]	; (373c <usbdc_cb_ctl_req+0x280>)
    372c:	47a0      	blx	r4
    372e:	fab0 f080 	clz	r0, r0
    3732:	0940      	lsrs	r0, r0, #5
    3734:	e6da      	b.n	34ec <usbdc_cb_ctl_req+0x30>
    3736:	bf00      	nop
    3738:	00003351 	.word	0x00003351
    373c:	0000349d 	.word	0x0000349d
    3740:	200007cc 	.word	0x200007cc
    3744:	00003a61 	.word	0x00003a61
    3748:	000039e1 	.word	0x000039e1
    374c:	00003305 	.word	0x00003305
    3750:	00001341 	.word	0x00001341
	uint16_t length   = req->wLength;
    3754:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3756:	4b5b      	ldr	r3, [pc, #364]	; (38c4 <usbdc_cb_ctl_req+0x408>)
    3758:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    375a:	681b      	ldr	r3, [r3, #0]
    375c:	3201      	adds	r2, #1
    375e:	b2d2      	uxtb	r2, r2
    3760:	6859      	ldr	r1, [r3, #4]
    3762:	6818      	ldr	r0, [r3, #0]
    3764:	4b58      	ldr	r3, [pc, #352]	; (38c8 <usbdc_cb_ctl_req+0x40c>)
    3766:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3768:	4601      	mov	r1, r0
    376a:	2800      	cmp	r0, #0
    376c:	f000 80a3 	beq.w	38b6 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    3770:	78c3      	ldrb	r3, [r0, #3]
    3772:	7882      	ldrb	r2, [r0, #2]
    3774:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    3778:	b292      	uxth	r2, r2
	if (length <= total_len) {
    377a:	4294      	cmp	r4, r2
    377c:	d90d      	bls.n	379a <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    377e:	3e01      	subs	r6, #1
    3780:	4226      	tst	r6, r4
    3782:	bf0c      	ite	eq
    3784:	2301      	moveq	r3, #1
    3786:	2300      	movne	r3, #0
		length = total_len;
    3788:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    378a:	4622      	mov	r2, r4
    378c:	4628      	mov	r0, r5
    378e:	4c4f      	ldr	r4, [pc, #316]	; (38cc <usbdc_cb_ctl_req+0x410>)
    3790:	47a0      	blx	r4
    3792:	fab0 f080 	clz	r0, r0
    3796:	0940      	lsrs	r0, r0, #5
    3798:	e6a8      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    379a:	2300      	movs	r3, #0
    379c:	e7f5      	b.n	378a <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    379e:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    37a0:	4b48      	ldr	r3, [pc, #288]	; (38c4 <usbdc_cb_ctl_req+0x408>)
    37a2:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    37a4:	681b      	ldr	r3, [r3, #0]
    37a6:	b2d2      	uxtb	r2, r2
    37a8:	6859      	ldr	r1, [r3, #4]
    37aa:	6818      	ldr	r0, [r3, #0]
    37ac:	4b48      	ldr	r3, [pc, #288]	; (38d0 <usbdc_cb_ctl_req+0x414>)
    37ae:	4798      	blx	r3
	if (NULL == str_desc) {
    37b0:	4601      	mov	r1, r0
    37b2:	2800      	cmp	r0, #0
    37b4:	f000 8081 	beq.w	38ba <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    37b8:	7802      	ldrb	r2, [r0, #0]
    37ba:	4294      	cmp	r4, r2
    37bc:	d90d      	bls.n	37da <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    37be:	3e01      	subs	r6, #1
    37c0:	4226      	tst	r6, r4
    37c2:	bf0c      	ite	eq
    37c4:	2301      	moveq	r3, #1
    37c6:	2300      	movne	r3, #0
		length = str_desc[0];
    37c8:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    37ca:	4622      	mov	r2, r4
    37cc:	4628      	mov	r0, r5
    37ce:	4c3f      	ldr	r4, [pc, #252]	; (38cc <usbdc_cb_ctl_req+0x410>)
    37d0:	47a0      	blx	r4
    37d2:	fab0 f080 	clz	r0, r0
    37d6:	0940      	lsrs	r0, r0, #5
    37d8:	e688      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    37da:	2300      	movs	r3, #0
    37dc:	e7f5      	b.n	37ca <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    37de:	4939      	ldr	r1, [pc, #228]	; (38c4 <usbdc_cb_ctl_req+0x408>)
    37e0:	694b      	ldr	r3, [r1, #20]
    37e2:	7eca      	ldrb	r2, [r1, #27]
    37e4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    37e6:	2300      	movs	r3, #0
    37e8:	2201      	movs	r2, #1
    37ea:	6949      	ldr	r1, [r1, #20]
    37ec:	4628      	mov	r0, r5
    37ee:	4c37      	ldr	r4, [pc, #220]	; (38cc <usbdc_cb_ctl_req+0x410>)
    37f0:	47a0      	blx	r4
		return true;
    37f2:	2001      	movs	r0, #1
    37f4:	e67a      	b.n	34ec <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    37f6:	f003 031f 	and.w	r3, r3, #31
    37fa:	2b01      	cmp	r3, #1
    37fc:	d903      	bls.n	3806 <usbdc_cb_ctl_req+0x34a>
    37fe:	2b02      	cmp	r3, #2
    3800:	d010      	beq.n	3824 <usbdc_cb_ctl_req+0x368>
		return false;
    3802:	2000      	movs	r0, #0
    3804:	e672      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		st = 0;
    3806:	2300      	movs	r3, #0
    3808:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    380a:	492e      	ldr	r1, [pc, #184]	; (38c4 <usbdc_cb_ctl_req+0x408>)
    380c:	694b      	ldr	r3, [r1, #20]
    380e:	f8bd 2000 	ldrh.w	r2, [sp]
    3812:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    3814:	2300      	movs	r3, #0
    3816:	2202      	movs	r2, #2
    3818:	6949      	ldr	r1, [r1, #20]
    381a:	4628      	mov	r0, r5
    381c:	4c2b      	ldr	r4, [pc, #172]	; (38cc <usbdc_cb_ctl_req+0x410>)
    381e:	47a0      	blx	r4
	return true;
    3820:	2001      	movs	r0, #1
    3822:	e663      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    3824:	88a0      	ldrh	r0, [r4, #4]
    3826:	2102      	movs	r1, #2
    3828:	b2c0      	uxtb	r0, r0
    382a:	4b2a      	ldr	r3, [pc, #168]	; (38d4 <usbdc_cb_ctl_req+0x418>)
    382c:	4798      	blx	r3
		if (st < 0) {
    382e:	2800      	cmp	r0, #0
    3830:	db03      	blt.n	383a <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    3832:	f000 0001 	and.w	r0, r0, #1
    3836:	9000      	str	r0, [sp, #0]
    3838:	e7e7      	b.n	380a <usbdc_cb_ctl_req+0x34e>
			return false;
    383a:	2000      	movs	r0, #0
    383c:	e656      	b.n	34ec <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    383e:	4b21      	ldr	r3, [pc, #132]	; (38c4 <usbdc_cb_ctl_req+0x408>)
    3840:	7f5b      	ldrb	r3, [r3, #29]
    3842:	88a2      	ldrh	r2, [r4, #4]
    3844:	4113      	asrs	r3, r2
    3846:	f013 0f01 	tst.w	r3, #1
    384a:	d012      	beq.n	3872 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    384c:	4b1d      	ldr	r3, [pc, #116]	; (38c4 <usbdc_cb_ctl_req+0x408>)
    384e:	691d      	ldr	r5, [r3, #16]
	return false;
    3850:	2000      	movs	r0, #0
	while (NULL != func) {
    3852:	2d00      	cmp	r5, #0
    3854:	f43f ae4a 	beq.w	34ec <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    3858:	2602      	movs	r6, #2
    385a:	686b      	ldr	r3, [r5, #4]
    385c:	4622      	mov	r2, r4
    385e:	4631      	mov	r1, r6
    3860:	4628      	mov	r0, r5
    3862:	4798      	blx	r3
    3864:	2800      	cmp	r0, #0
    3866:	da0f      	bge.n	3888 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    3868:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    386a:	2d00      	cmp	r5, #0
    386c:	d1f5      	bne.n	385a <usbdc_cb_ctl_req+0x39e>
	return false;
    386e:	2000      	movs	r0, #0
    3870:	e63c      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    3872:	4914      	ldr	r1, [pc, #80]	; (38c4 <usbdc_cb_ctl_req+0x408>)
    3874:	694b      	ldr	r3, [r1, #20]
    3876:	2000      	movs	r0, #0
    3878:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    387a:	4603      	mov	r3, r0
    387c:	2201      	movs	r2, #1
    387e:	6949      	ldr	r1, [r1, #20]
    3880:	4c12      	ldr	r4, [pc, #72]	; (38cc <usbdc_cb_ctl_req+0x410>)
    3882:	47a0      	blx	r4
		return true;
    3884:	2001      	movs	r0, #1
    3886:	e631      	b.n	34ec <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    3888:	490e      	ldr	r1, [pc, #56]	; (38c4 <usbdc_cb_ctl_req+0x408>)
    388a:	694b      	ldr	r3, [r1, #20]
    388c:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    388e:	2300      	movs	r3, #0
    3890:	2201      	movs	r2, #1
    3892:	6949      	ldr	r1, [r1, #20]
    3894:	4618      	mov	r0, r3
    3896:	4c0d      	ldr	r4, [pc, #52]	; (38cc <usbdc_cb_ctl_req+0x410>)
    3898:	47a0      	blx	r4
			return true;
    389a:	2001      	movs	r0, #1
    389c:	e626      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		return true;
    389e:	2001      	movs	r0, #1
    38a0:	e624      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		return false;
    38a2:	2000      	movs	r0, #0
    38a4:	e622      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		return false;
    38a6:	2000      	movs	r0, #0
    38a8:	e620      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		return false;
    38aa:	2000      	movs	r0, #0
    38ac:	e61e      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		return false;
    38ae:	2000      	movs	r0, #0
    38b0:	e61c      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		return false;
    38b2:	2000      	movs	r0, #0
    38b4:	e61a      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		return false;
    38b6:	2000      	movs	r0, #0
    38b8:	e618      	b.n	34ec <usbdc_cb_ctl_req+0x30>
		return false;
    38ba:	2000      	movs	r0, #0
    38bc:	e616      	b.n	34ec <usbdc_cb_ctl_req+0x30>
			return false;
    38be:	2000      	movs	r0, #0
    38c0:	e614      	b.n	34ec <usbdc_cb_ctl_req+0x30>
    38c2:	bf00      	nop
    38c4:	200007cc 	.word	0x200007cc
    38c8:	00003a61 	.word	0x00003a61
    38cc:	0000349d 	.word	0x0000349d
    38d0:	00003ac9 	.word	0x00003ac9
    38d4:	00001341 	.word	0x00001341

000038d8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    38d8:	b508      	push	{r3, lr}
	switch (type) {
    38da:	2801      	cmp	r0, #1
    38dc:	d007      	beq.n	38ee <usbdc_register_handler+0x16>
    38de:	b110      	cbz	r0, 38e6 <usbdc_register_handler+0xe>
    38e0:	2802      	cmp	r0, #2
    38e2:	d008      	beq.n	38f6 <usbdc_register_handler+0x1e>
    38e4:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    38e6:	4806      	ldr	r0, [pc, #24]	; (3900 <usbdc_register_handler+0x28>)
    38e8:	4b06      	ldr	r3, [pc, #24]	; (3904 <usbdc_register_handler+0x2c>)
    38ea:	4798      	blx	r3
		break;
    38ec:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    38ee:	4806      	ldr	r0, [pc, #24]	; (3908 <usbdc_register_handler+0x30>)
    38f0:	4b04      	ldr	r3, [pc, #16]	; (3904 <usbdc_register_handler+0x2c>)
    38f2:	4798      	blx	r3
		break;
    38f4:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    38f6:	4805      	ldr	r0, [pc, #20]	; (390c <usbdc_register_handler+0x34>)
    38f8:	4b02      	ldr	r3, [pc, #8]	; (3904 <usbdc_register_handler+0x2c>)
    38fa:	4798      	blx	r3
    38fc:	bd08      	pop	{r3, pc}
    38fe:	bf00      	nop
    3900:	200007d0 	.word	0x200007d0
    3904:	00001451 	.word	0x00001451
    3908:	200007d4 	.word	0x200007d4
    390c:	200007d8 	.word	0x200007d8

00003910 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    3910:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    3912:	4605      	mov	r5, r0
    3914:	f240 3255 	movw	r2, #853	; 0x355
    3918:	490c      	ldr	r1, [pc, #48]	; (394c <usbdc_init+0x3c>)
    391a:	3000      	adds	r0, #0
    391c:	bf18      	it	ne
    391e:	2001      	movne	r0, #1
    3920:	4b0b      	ldr	r3, [pc, #44]	; (3950 <usbdc_init+0x40>)
    3922:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    3924:	4b0b      	ldr	r3, [pc, #44]	; (3954 <usbdc_init+0x44>)
    3926:	4798      	blx	r3
	if (rc < 0) {
    3928:	2800      	cmp	r0, #0
    392a:	db0e      	blt.n	394a <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    392c:	4c0a      	ldr	r4, [pc, #40]	; (3958 <usbdc_init+0x48>)
    392e:	2220      	movs	r2, #32
    3930:	2100      	movs	r1, #0
    3932:	4620      	mov	r0, r4
    3934:	4b09      	ldr	r3, [pc, #36]	; (395c <usbdc_init+0x4c>)
    3936:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    3938:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    393a:	4909      	ldr	r1, [pc, #36]	; (3960 <usbdc_init+0x50>)
    393c:	2000      	movs	r0, #0
    393e:	4c09      	ldr	r4, [pc, #36]	; (3964 <usbdc_init+0x54>)
    3940:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    3942:	4909      	ldr	r1, [pc, #36]	; (3968 <usbdc_init+0x58>)
    3944:	2001      	movs	r0, #1
    3946:	47a0      	blx	r4

	return 0;
    3948:	2000      	movs	r0, #0
}
    394a:	bd38      	pop	{r3, r4, r5, pc}
    394c:	00004088 	.word	0x00004088
    3950:	000013f5 	.word	0x000013f5
    3954:	000010a9 	.word	0x000010a9
    3958:	200007cc 	.word	0x200007cc
    395c:	00003c95 	.word	0x00003c95
    3960:	00003391 	.word	0x00003391
    3964:	00001111 	.word	0x00001111
    3968:	0000347d 	.word	0x0000347d

0000396c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    396c:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    396e:	4601      	mov	r1, r0
    3970:	4801      	ldr	r0, [pc, #4]	; (3978 <usbdc_register_function+0xc>)
    3972:	4b02      	ldr	r3, [pc, #8]	; (397c <usbdc_register_function+0x10>)
    3974:	4798      	blx	r3
    3976:	bd08      	pop	{r3, pc}
    3978:	200007dc 	.word	0x200007dc
    397c:	00001451 	.word	0x00001451

00003980 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    3980:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    3982:	4b0a      	ldr	r3, [pc, #40]	; (39ac <usbdc_start+0x2c>)
    3984:	7e9b      	ldrb	r3, [r3, #26]
    3986:	b95b      	cbnz	r3, 39a0 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    3988:	b168      	cbz	r0, 39a6 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    398a:	4b08      	ldr	r3, [pc, #32]	; (39ac <usbdc_start+0x2c>)
    398c:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    398e:	6802      	ldr	r2, [r0, #0]
    3990:	79d2      	ldrb	r2, [r2, #7]
    3992:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    3994:	2201      	movs	r2, #1
    3996:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    3998:	4b05      	ldr	r3, [pc, #20]	; (39b0 <usbdc_start+0x30>)
    399a:	4798      	blx	r3
	return ERR_NONE;
    399c:	2000      	movs	r0, #0
    399e:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    39a0:	f06f 0003 	mvn.w	r0, #3
    39a4:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    39a6:	f06f 0008 	mvn.w	r0, #8
}
    39aa:	bd08      	pop	{r3, pc}
    39ac:	200007cc 	.word	0x200007cc
    39b0:	0000111d 	.word	0x0000111d

000039b4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    39b4:	b508      	push	{r3, lr}
	usb_d_attach();
    39b6:	4b01      	ldr	r3, [pc, #4]	; (39bc <usbdc_attach+0x8>)
    39b8:	4798      	blx	r3
    39ba:	bd08      	pop	{r3, pc}
    39bc:	00001129 	.word	0x00001129

000039c0 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    39c0:	4b01      	ldr	r3, [pc, #4]	; (39c8 <usbdc_get_ctrl_buffer+0x8>)
    39c2:	6958      	ldr	r0, [r3, #20]
    39c4:	4770      	bx	lr
    39c6:	bf00      	nop
    39c8:	200007cc 	.word	0x200007cc

000039cc <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    39cc:	4b03      	ldr	r3, [pc, #12]	; (39dc <usbdc_get_state+0x10>)
    39ce:	7e98      	ldrb	r0, [r3, #26]
    39d0:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    39d4:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    39d6:	bf18      	it	ne
    39d8:	2010      	movne	r0, #16
    39da:	4770      	bx	lr
    39dc:	200007cc 	.word	0x200007cc

000039e0 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    39e0:	4288      	cmp	r0, r1
    39e2:	d214      	bcs.n	3a0e <usb_find_desc+0x2e>
	return desc[0];
    39e4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    39e6:	2b01      	cmp	r3, #1
    39e8:	d913      	bls.n	3a12 <usb_find_desc+0x32>
{
    39ea:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    39ec:	7844      	ldrb	r4, [r0, #1]
    39ee:	4294      	cmp	r4, r2
    39f0:	d00a      	beq.n	3a08 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    39f2:	4418      	add	r0, r3
	while (desc < eof) {
    39f4:	4281      	cmp	r1, r0
    39f6:	d906      	bls.n	3a06 <usb_find_desc+0x26>
	return desc[0];
    39f8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    39fa:	2b01      	cmp	r3, #1
    39fc:	d90b      	bls.n	3a16 <usb_find_desc+0x36>
	return desc[1];
    39fe:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    3a00:	4294      	cmp	r4, r2
    3a02:	d1f6      	bne.n	39f2 <usb_find_desc+0x12>
    3a04:	e000      	b.n	3a08 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3a06:	2000      	movs	r0, #0
}
    3a08:	f85d 4b04 	ldr.w	r4, [sp], #4
    3a0c:	4770      	bx	lr
	return NULL;
    3a0e:	2000      	movs	r0, #0
    3a10:	4770      	bx	lr
		_desc_len_check();
    3a12:	2000      	movs	r0, #0
    3a14:	4770      	bx	lr
    3a16:	2000      	movs	r0, #0
    3a18:	e7f6      	b.n	3a08 <usb_find_desc+0x28>

00003a1a <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3a1a:	4288      	cmp	r0, r1
    3a1c:	d216      	bcs.n	3a4c <usb_find_ep_desc+0x32>
	return desc[0];
    3a1e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3a20:	2b01      	cmp	r3, #1
    3a22:	d915      	bls.n	3a50 <usb_find_ep_desc+0x36>
	return desc[1];
    3a24:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3a26:	2a04      	cmp	r2, #4
    3a28:	d014      	beq.n	3a54 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3a2a:	2a05      	cmp	r2, #5
    3a2c:	d00b      	beq.n	3a46 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    3a2e:	4418      	add	r0, r3
	while (desc < eof) {
    3a30:	4281      	cmp	r1, r0
    3a32:	d909      	bls.n	3a48 <usb_find_ep_desc+0x2e>
	return desc[0];
    3a34:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3a36:	2b01      	cmp	r3, #1
    3a38:	d90e      	bls.n	3a58 <usb_find_ep_desc+0x3e>
	return desc[1];
    3a3a:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3a3c:	2a04      	cmp	r2, #4
    3a3e:	d00d      	beq.n	3a5c <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3a40:	2a05      	cmp	r2, #5
    3a42:	d1f4      	bne.n	3a2e <usb_find_ep_desc+0x14>
    3a44:	e00b      	b.n	3a5e <usb_find_ep_desc+0x44>
    3a46:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3a48:	2000      	movs	r0, #0
    3a4a:	4770      	bx	lr
    3a4c:	2000      	movs	r0, #0
    3a4e:	4770      	bx	lr
		_desc_len_check();
    3a50:	2000      	movs	r0, #0
    3a52:	4770      	bx	lr
	return NULL;
    3a54:	2000      	movs	r0, #0
    3a56:	4770      	bx	lr
		_desc_len_check();
    3a58:	2000      	movs	r0, #0
    3a5a:	4770      	bx	lr
	return NULL;
    3a5c:	2000      	movs	r0, #0
}
    3a5e:	4770      	bx	lr

00003a60 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    3a60:	b538      	push	{r3, r4, r5, lr}
    3a62:	460c      	mov	r4, r1
    3a64:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    3a66:	2202      	movs	r2, #2
    3a68:	4b16      	ldr	r3, [pc, #88]	; (3ac4 <usb_find_cfg_desc+0x64>)
    3a6a:	4798      	blx	r3
	if (!desc) {
    3a6c:	4603      	mov	r3, r0
    3a6e:	b1e8      	cbz	r0, 3aac <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    3a70:	4284      	cmp	r4, r0
    3a72:	d91d      	bls.n	3ab0 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    3a74:	7802      	ldrb	r2, [r0, #0]
    3a76:	2a01      	cmp	r2, #1
    3a78:	d91c      	bls.n	3ab4 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    3a7a:	7842      	ldrb	r2, [r0, #1]
    3a7c:	2a02      	cmp	r2, #2
    3a7e:	d11b      	bne.n	3ab8 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    3a80:	7942      	ldrb	r2, [r0, #5]
    3a82:	42aa      	cmp	r2, r5
    3a84:	d012      	beq.n	3aac <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    3a86:	78d9      	ldrb	r1, [r3, #3]
    3a88:	789a      	ldrb	r2, [r3, #2]
    3a8a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    3a8e:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    3a92:	429c      	cmp	r4, r3
    3a94:	d909      	bls.n	3aaa <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    3a96:	781a      	ldrb	r2, [r3, #0]
    3a98:	2a01      	cmp	r2, #1
    3a9a:	d90f      	bls.n	3abc <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    3a9c:	785a      	ldrb	r2, [r3, #1]
    3a9e:	2a02      	cmp	r2, #2
    3aa0:	d10e      	bne.n	3ac0 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    3aa2:	795a      	ldrb	r2, [r3, #5]
    3aa4:	42aa      	cmp	r2, r5
    3aa6:	d1ee      	bne.n	3a86 <usb_find_cfg_desc+0x26>
    3aa8:	e000      	b.n	3aac <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    3aaa:	2300      	movs	r3, #0
}
    3aac:	4618      	mov	r0, r3
    3aae:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    3ab0:	2300      	movs	r3, #0
    3ab2:	e7fb      	b.n	3aac <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3ab4:	2300      	movs	r3, #0
    3ab6:	e7f9      	b.n	3aac <usb_find_cfg_desc+0x4c>
	return NULL;
    3ab8:	2300      	movs	r3, #0
    3aba:	e7f7      	b.n	3aac <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3abc:	2300      	movs	r3, #0
    3abe:	e7f5      	b.n	3aac <usb_find_cfg_desc+0x4c>
	return NULL;
    3ac0:	2300      	movs	r3, #0
    3ac2:	e7f3      	b.n	3aac <usb_find_cfg_desc+0x4c>
    3ac4:	000039e1 	.word	0x000039e1

00003ac8 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    3ac8:	4288      	cmp	r0, r1
    3aca:	d217      	bcs.n	3afc <usb_find_str_desc+0x34>
{
    3acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ad0:	460d      	mov	r5, r1
    3ad2:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    3ad4:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    3ad6:	f04f 0803 	mov.w	r8, #3
    3ada:	4f0c      	ldr	r7, [pc, #48]	; (3b0c <usb_find_str_desc+0x44>)
    3adc:	4642      	mov	r2, r8
    3ade:	4629      	mov	r1, r5
    3ae0:	47b8      	blx	r7
		if (desc) {
    3ae2:	4603      	mov	r3, r0
    3ae4:	b170      	cbz	r0, 3b04 <usb_find_str_desc+0x3c>
	return desc[0];
    3ae6:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    3ae8:	2801      	cmp	r0, #1
    3aea:	d90a      	bls.n	3b02 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    3aec:	42a6      	cmp	r6, r4
    3aee:	d009      	beq.n	3b04 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    3af0:	4418      	add	r0, r3
    3af2:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    3af4:	4285      	cmp	r5, r0
    3af6:	d8f1      	bhi.n	3adc <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    3af8:	2300      	movs	r3, #0
    3afa:	e003      	b.n	3b04 <usb_find_str_desc+0x3c>
    3afc:	2300      	movs	r3, #0
}
    3afe:	4618      	mov	r0, r3
    3b00:	4770      	bx	lr
			_desc_len_check();
    3b02:	2300      	movs	r3, #0
}
    3b04:	4618      	mov	r0, r3
    3b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b0a:	bf00      	nop
    3b0c:	000039e1 	.word	0x000039e1

00003b10 <__libc_init_array>:
    3b10:	b570      	push	{r4, r5, r6, lr}
    3b12:	4e0f      	ldr	r6, [pc, #60]	; (3b50 <__libc_init_array+0x40>)
    3b14:	4d0f      	ldr	r5, [pc, #60]	; (3b54 <__libc_init_array+0x44>)
    3b16:	1b76      	subs	r6, r6, r5
    3b18:	10b6      	asrs	r6, r6, #2
    3b1a:	bf18      	it	ne
    3b1c:	2400      	movne	r4, #0
    3b1e:	d005      	beq.n	3b2c <__libc_init_array+0x1c>
    3b20:	3401      	adds	r4, #1
    3b22:	f855 3b04 	ldr.w	r3, [r5], #4
    3b26:	4798      	blx	r3
    3b28:	42a6      	cmp	r6, r4
    3b2a:	d1f9      	bne.n	3b20 <__libc_init_array+0x10>
    3b2c:	4e0a      	ldr	r6, [pc, #40]	; (3b58 <__libc_init_array+0x48>)
    3b2e:	4d0b      	ldr	r5, [pc, #44]	; (3b5c <__libc_init_array+0x4c>)
    3b30:	1b76      	subs	r6, r6, r5
    3b32:	f000 fab7 	bl	40a4 <_init>
    3b36:	10b6      	asrs	r6, r6, #2
    3b38:	bf18      	it	ne
    3b3a:	2400      	movne	r4, #0
    3b3c:	d006      	beq.n	3b4c <__libc_init_array+0x3c>
    3b3e:	3401      	adds	r4, #1
    3b40:	f855 3b04 	ldr.w	r3, [r5], #4
    3b44:	4798      	blx	r3
    3b46:	42a6      	cmp	r6, r4
    3b48:	d1f9      	bne.n	3b3e <__libc_init_array+0x2e>
    3b4a:	bd70      	pop	{r4, r5, r6, pc}
    3b4c:	bd70      	pop	{r4, r5, r6, pc}
    3b4e:	bf00      	nop
    3b50:	000040b0 	.word	0x000040b0
    3b54:	000040b0 	.word	0x000040b0
    3b58:	000040b8 	.word	0x000040b8
    3b5c:	000040b0 	.word	0x000040b0

00003b60 <memcpy>:
    3b60:	4684      	mov	ip, r0
    3b62:	ea41 0300 	orr.w	r3, r1, r0
    3b66:	f013 0303 	ands.w	r3, r3, #3
    3b6a:	d16d      	bne.n	3c48 <memcpy+0xe8>
    3b6c:	3a40      	subs	r2, #64	; 0x40
    3b6e:	d341      	bcc.n	3bf4 <memcpy+0x94>
    3b70:	f851 3b04 	ldr.w	r3, [r1], #4
    3b74:	f840 3b04 	str.w	r3, [r0], #4
    3b78:	f851 3b04 	ldr.w	r3, [r1], #4
    3b7c:	f840 3b04 	str.w	r3, [r0], #4
    3b80:	f851 3b04 	ldr.w	r3, [r1], #4
    3b84:	f840 3b04 	str.w	r3, [r0], #4
    3b88:	f851 3b04 	ldr.w	r3, [r1], #4
    3b8c:	f840 3b04 	str.w	r3, [r0], #4
    3b90:	f851 3b04 	ldr.w	r3, [r1], #4
    3b94:	f840 3b04 	str.w	r3, [r0], #4
    3b98:	f851 3b04 	ldr.w	r3, [r1], #4
    3b9c:	f840 3b04 	str.w	r3, [r0], #4
    3ba0:	f851 3b04 	ldr.w	r3, [r1], #4
    3ba4:	f840 3b04 	str.w	r3, [r0], #4
    3ba8:	f851 3b04 	ldr.w	r3, [r1], #4
    3bac:	f840 3b04 	str.w	r3, [r0], #4
    3bb0:	f851 3b04 	ldr.w	r3, [r1], #4
    3bb4:	f840 3b04 	str.w	r3, [r0], #4
    3bb8:	f851 3b04 	ldr.w	r3, [r1], #4
    3bbc:	f840 3b04 	str.w	r3, [r0], #4
    3bc0:	f851 3b04 	ldr.w	r3, [r1], #4
    3bc4:	f840 3b04 	str.w	r3, [r0], #4
    3bc8:	f851 3b04 	ldr.w	r3, [r1], #4
    3bcc:	f840 3b04 	str.w	r3, [r0], #4
    3bd0:	f851 3b04 	ldr.w	r3, [r1], #4
    3bd4:	f840 3b04 	str.w	r3, [r0], #4
    3bd8:	f851 3b04 	ldr.w	r3, [r1], #4
    3bdc:	f840 3b04 	str.w	r3, [r0], #4
    3be0:	f851 3b04 	ldr.w	r3, [r1], #4
    3be4:	f840 3b04 	str.w	r3, [r0], #4
    3be8:	f851 3b04 	ldr.w	r3, [r1], #4
    3bec:	f840 3b04 	str.w	r3, [r0], #4
    3bf0:	3a40      	subs	r2, #64	; 0x40
    3bf2:	d2bd      	bcs.n	3b70 <memcpy+0x10>
    3bf4:	3230      	adds	r2, #48	; 0x30
    3bf6:	d311      	bcc.n	3c1c <memcpy+0xbc>
    3bf8:	f851 3b04 	ldr.w	r3, [r1], #4
    3bfc:	f840 3b04 	str.w	r3, [r0], #4
    3c00:	f851 3b04 	ldr.w	r3, [r1], #4
    3c04:	f840 3b04 	str.w	r3, [r0], #4
    3c08:	f851 3b04 	ldr.w	r3, [r1], #4
    3c0c:	f840 3b04 	str.w	r3, [r0], #4
    3c10:	f851 3b04 	ldr.w	r3, [r1], #4
    3c14:	f840 3b04 	str.w	r3, [r0], #4
    3c18:	3a10      	subs	r2, #16
    3c1a:	d2ed      	bcs.n	3bf8 <memcpy+0x98>
    3c1c:	320c      	adds	r2, #12
    3c1e:	d305      	bcc.n	3c2c <memcpy+0xcc>
    3c20:	f851 3b04 	ldr.w	r3, [r1], #4
    3c24:	f840 3b04 	str.w	r3, [r0], #4
    3c28:	3a04      	subs	r2, #4
    3c2a:	d2f9      	bcs.n	3c20 <memcpy+0xc0>
    3c2c:	3204      	adds	r2, #4
    3c2e:	d008      	beq.n	3c42 <memcpy+0xe2>
    3c30:	07d2      	lsls	r2, r2, #31
    3c32:	bf1c      	itt	ne
    3c34:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3c38:	f800 3b01 	strbne.w	r3, [r0], #1
    3c3c:	d301      	bcc.n	3c42 <memcpy+0xe2>
    3c3e:	880b      	ldrh	r3, [r1, #0]
    3c40:	8003      	strh	r3, [r0, #0]
    3c42:	4660      	mov	r0, ip
    3c44:	4770      	bx	lr
    3c46:	bf00      	nop
    3c48:	2a08      	cmp	r2, #8
    3c4a:	d313      	bcc.n	3c74 <memcpy+0x114>
    3c4c:	078b      	lsls	r3, r1, #30
    3c4e:	d08d      	beq.n	3b6c <memcpy+0xc>
    3c50:	f010 0303 	ands.w	r3, r0, #3
    3c54:	d08a      	beq.n	3b6c <memcpy+0xc>
    3c56:	f1c3 0304 	rsb	r3, r3, #4
    3c5a:	1ad2      	subs	r2, r2, r3
    3c5c:	07db      	lsls	r3, r3, #31
    3c5e:	bf1c      	itt	ne
    3c60:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3c64:	f800 3b01 	strbne.w	r3, [r0], #1
    3c68:	d380      	bcc.n	3b6c <memcpy+0xc>
    3c6a:	f831 3b02 	ldrh.w	r3, [r1], #2
    3c6e:	f820 3b02 	strh.w	r3, [r0], #2
    3c72:	e77b      	b.n	3b6c <memcpy+0xc>
    3c74:	3a04      	subs	r2, #4
    3c76:	d3d9      	bcc.n	3c2c <memcpy+0xcc>
    3c78:	3a01      	subs	r2, #1
    3c7a:	f811 3b01 	ldrb.w	r3, [r1], #1
    3c7e:	f800 3b01 	strb.w	r3, [r0], #1
    3c82:	d2f9      	bcs.n	3c78 <memcpy+0x118>
    3c84:	780b      	ldrb	r3, [r1, #0]
    3c86:	7003      	strb	r3, [r0, #0]
    3c88:	784b      	ldrb	r3, [r1, #1]
    3c8a:	7043      	strb	r3, [r0, #1]
    3c8c:	788b      	ldrb	r3, [r1, #2]
    3c8e:	7083      	strb	r3, [r0, #2]
    3c90:	4660      	mov	r0, ip
    3c92:	4770      	bx	lr

00003c94 <memset>:
    3c94:	b470      	push	{r4, r5, r6}
    3c96:	0786      	lsls	r6, r0, #30
    3c98:	d046      	beq.n	3d28 <memset+0x94>
    3c9a:	1e54      	subs	r4, r2, #1
    3c9c:	2a00      	cmp	r2, #0
    3c9e:	d041      	beq.n	3d24 <memset+0x90>
    3ca0:	b2ca      	uxtb	r2, r1
    3ca2:	4603      	mov	r3, r0
    3ca4:	e002      	b.n	3cac <memset+0x18>
    3ca6:	f114 34ff 	adds.w	r4, r4, #4294967295
    3caa:	d33b      	bcc.n	3d24 <memset+0x90>
    3cac:	f803 2b01 	strb.w	r2, [r3], #1
    3cb0:	079d      	lsls	r5, r3, #30
    3cb2:	d1f8      	bne.n	3ca6 <memset+0x12>
    3cb4:	2c03      	cmp	r4, #3
    3cb6:	d92e      	bls.n	3d16 <memset+0x82>
    3cb8:	b2cd      	uxtb	r5, r1
    3cba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    3cbe:	2c0f      	cmp	r4, #15
    3cc0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    3cc4:	d919      	bls.n	3cfa <memset+0x66>
    3cc6:	f103 0210 	add.w	r2, r3, #16
    3cca:	4626      	mov	r6, r4
    3ccc:	3e10      	subs	r6, #16
    3cce:	2e0f      	cmp	r6, #15
    3cd0:	f842 5c10 	str.w	r5, [r2, #-16]
    3cd4:	f842 5c0c 	str.w	r5, [r2, #-12]
    3cd8:	f842 5c08 	str.w	r5, [r2, #-8]
    3cdc:	f842 5c04 	str.w	r5, [r2, #-4]
    3ce0:	f102 0210 	add.w	r2, r2, #16
    3ce4:	d8f2      	bhi.n	3ccc <memset+0x38>
    3ce6:	f1a4 0210 	sub.w	r2, r4, #16
    3cea:	f022 020f 	bic.w	r2, r2, #15
    3cee:	f004 040f 	and.w	r4, r4, #15
    3cf2:	3210      	adds	r2, #16
    3cf4:	2c03      	cmp	r4, #3
    3cf6:	4413      	add	r3, r2
    3cf8:	d90d      	bls.n	3d16 <memset+0x82>
    3cfa:	461e      	mov	r6, r3
    3cfc:	4622      	mov	r2, r4
    3cfe:	3a04      	subs	r2, #4
    3d00:	2a03      	cmp	r2, #3
    3d02:	f846 5b04 	str.w	r5, [r6], #4
    3d06:	d8fa      	bhi.n	3cfe <memset+0x6a>
    3d08:	1f22      	subs	r2, r4, #4
    3d0a:	f022 0203 	bic.w	r2, r2, #3
    3d0e:	3204      	adds	r2, #4
    3d10:	4413      	add	r3, r2
    3d12:	f004 0403 	and.w	r4, r4, #3
    3d16:	b12c      	cbz	r4, 3d24 <memset+0x90>
    3d18:	b2c9      	uxtb	r1, r1
    3d1a:	441c      	add	r4, r3
    3d1c:	f803 1b01 	strb.w	r1, [r3], #1
    3d20:	429c      	cmp	r4, r3
    3d22:	d1fb      	bne.n	3d1c <memset+0x88>
    3d24:	bc70      	pop	{r4, r5, r6}
    3d26:	4770      	bx	lr
    3d28:	4614      	mov	r4, r2
    3d2a:	4603      	mov	r3, r0
    3d2c:	e7c2      	b.n	3cb4 <memset+0x20>
    3d2e:	bf00      	nop

00003d30 <register_fini>:
    3d30:	4b02      	ldr	r3, [pc, #8]	; (3d3c <register_fini+0xc>)
    3d32:	b113      	cbz	r3, 3d3a <register_fini+0xa>
    3d34:	4802      	ldr	r0, [pc, #8]	; (3d40 <register_fini+0x10>)
    3d36:	f000 b805 	b.w	3d44 <atexit>
    3d3a:	4770      	bx	lr
    3d3c:	00000000 	.word	0x00000000
    3d40:	00003d51 	.word	0x00003d51

00003d44 <atexit>:
    3d44:	2300      	movs	r3, #0
    3d46:	4601      	mov	r1, r0
    3d48:	461a      	mov	r2, r3
    3d4a:	4618      	mov	r0, r3
    3d4c:	f000 b81e 	b.w	3d8c <__register_exitproc>

00003d50 <__libc_fini_array>:
    3d50:	b538      	push	{r3, r4, r5, lr}
    3d52:	4c0a      	ldr	r4, [pc, #40]	; (3d7c <__libc_fini_array+0x2c>)
    3d54:	4d0a      	ldr	r5, [pc, #40]	; (3d80 <__libc_fini_array+0x30>)
    3d56:	1b64      	subs	r4, r4, r5
    3d58:	10a4      	asrs	r4, r4, #2
    3d5a:	d00a      	beq.n	3d72 <__libc_fini_array+0x22>
    3d5c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    3d60:	3b01      	subs	r3, #1
    3d62:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3d66:	3c01      	subs	r4, #1
    3d68:	f855 3904 	ldr.w	r3, [r5], #-4
    3d6c:	4798      	blx	r3
    3d6e:	2c00      	cmp	r4, #0
    3d70:	d1f9      	bne.n	3d66 <__libc_fini_array+0x16>
    3d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3d76:	f000 b99f 	b.w	40b8 <_fini>
    3d7a:	bf00      	nop
    3d7c:	000040c8 	.word	0x000040c8
    3d80:	000040c4 	.word	0x000040c4

00003d84 <__retarget_lock_acquire_recursive>:
    3d84:	4770      	bx	lr
    3d86:	bf00      	nop

00003d88 <__retarget_lock_release_recursive>:
    3d88:	4770      	bx	lr
    3d8a:	bf00      	nop

00003d8c <__register_exitproc>:
    3d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3d90:	4d2c      	ldr	r5, [pc, #176]	; (3e44 <__register_exitproc+0xb8>)
    3d92:	4606      	mov	r6, r0
    3d94:	6828      	ldr	r0, [r5, #0]
    3d96:	4698      	mov	r8, r3
    3d98:	460f      	mov	r7, r1
    3d9a:	4691      	mov	r9, r2
    3d9c:	f7ff fff2 	bl	3d84 <__retarget_lock_acquire_recursive>
    3da0:	4b29      	ldr	r3, [pc, #164]	; (3e48 <__register_exitproc+0xbc>)
    3da2:	681c      	ldr	r4, [r3, #0]
    3da4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    3da8:	2b00      	cmp	r3, #0
    3daa:	d03e      	beq.n	3e2a <__register_exitproc+0x9e>
    3dac:	685a      	ldr	r2, [r3, #4]
    3dae:	2a1f      	cmp	r2, #31
    3db0:	dc1c      	bgt.n	3dec <__register_exitproc+0x60>
    3db2:	f102 0e01 	add.w	lr, r2, #1
    3db6:	b176      	cbz	r6, 3dd6 <__register_exitproc+0x4a>
    3db8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    3dbc:	2401      	movs	r4, #1
    3dbe:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    3dc2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    3dc6:	4094      	lsls	r4, r2
    3dc8:	4320      	orrs	r0, r4
    3dca:	2e02      	cmp	r6, #2
    3dcc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    3dd0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    3dd4:	d023      	beq.n	3e1e <__register_exitproc+0x92>
    3dd6:	3202      	adds	r2, #2
    3dd8:	f8c3 e004 	str.w	lr, [r3, #4]
    3ddc:	6828      	ldr	r0, [r5, #0]
    3dde:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    3de2:	f7ff ffd1 	bl	3d88 <__retarget_lock_release_recursive>
    3de6:	2000      	movs	r0, #0
    3de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3dec:	4b17      	ldr	r3, [pc, #92]	; (3e4c <__register_exitproc+0xc0>)
    3dee:	b30b      	cbz	r3, 3e34 <__register_exitproc+0xa8>
    3df0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    3df4:	f3af 8000 	nop.w
    3df8:	4603      	mov	r3, r0
    3dfa:	b1d8      	cbz	r0, 3e34 <__register_exitproc+0xa8>
    3dfc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    3e00:	6002      	str	r2, [r0, #0]
    3e02:	2100      	movs	r1, #0
    3e04:	6041      	str	r1, [r0, #4]
    3e06:	460a      	mov	r2, r1
    3e08:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    3e0c:	f04f 0e01 	mov.w	lr, #1
    3e10:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    3e14:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    3e18:	2e00      	cmp	r6, #0
    3e1a:	d0dc      	beq.n	3dd6 <__register_exitproc+0x4a>
    3e1c:	e7cc      	b.n	3db8 <__register_exitproc+0x2c>
    3e1e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    3e22:	430c      	orrs	r4, r1
    3e24:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    3e28:	e7d5      	b.n	3dd6 <__register_exitproc+0x4a>
    3e2a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    3e2e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    3e32:	e7bb      	b.n	3dac <__register_exitproc+0x20>
    3e34:	6828      	ldr	r0, [r5, #0]
    3e36:	f7ff ffa7 	bl	3d88 <__retarget_lock_release_recursive>
    3e3a:	f04f 30ff 	mov.w	r0, #4294967295
    3e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3e42:	bf00      	nop
    3e44:	20000490 	.word	0x20000490
    3e48:	000040a0 	.word	0x000040a0
    3e4c:	00000000 	.word	0x00000000
    3e50:	682f2e2e 	.word	0x682f2e2e
    3e54:	732f6c61 	.word	0x732f6c61
    3e58:	682f6372 	.word	0x682f6372
    3e5c:	615f6c61 	.word	0x615f6c61
    3e60:	735f6364 	.word	0x735f6364
    3e64:	2e636e79 	.word	0x2e636e79
    3e68:	00000063 	.word	0x00000063
    3e6c:	682f2e2e 	.word	0x682f2e2e
    3e70:	732f6c61 	.word	0x732f6c61
    3e74:	682f6372 	.word	0x682f6372
    3e78:	735f6c61 	.word	0x735f6c61
    3e7c:	6d5f6970 	.word	0x6d5f6970
    3e80:	7973615f 	.word	0x7973615f
    3e84:	632e636e 	.word	0x632e636e
    3e88:	00000000 	.word	0x00000000
    3e8c:	682f2e2e 	.word	0x682f2e2e
    3e90:	732f6c61 	.word	0x732f6c61
    3e94:	682f6372 	.word	0x682f6372
    3e98:	745f6c61 	.word	0x745f6c61
    3e9c:	72656d69 	.word	0x72656d69
    3ea0:	0000632e 	.word	0x0000632e
    3ea4:	682f2e2e 	.word	0x682f2e2e
    3ea8:	752f6c61 	.word	0x752f6c61
    3eac:	736c6974 	.word	0x736c6974
    3eb0:	6372732f 	.word	0x6372732f
    3eb4:	6974752f 	.word	0x6974752f
    3eb8:	6c5f736c 	.word	0x6c5f736c
    3ebc:	2e747369 	.word	0x2e747369
    3ec0:	00000063 	.word	0x00000063

00003ec4 <_adcs>:
    3ec4:	01000000 00800000 0000181d 00000000     ................
	...
    3edc:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    3eec:	632e6364 00000000                       dc.c....

00003ef4 <user_mux_confs>:
    3ef4:	00000100 00000000 00000000 00000000     ................
	...

00003f38 <channel_confs>:
    3f38:	060c060c 00000000 00000000 00000000     ................
	...

00003f78 <interrupt_cfg>:
	...
    3ff8:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    4008:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    4018:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    4028:	43000800 43000c00                       ...C...C

00004030 <_i2cms>:
	...
    4048:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    4058:	65735f6c 6d6f6372 0000632e              l_sercom.c..

00004064 <_usb_ep_cfgs>:
    4064:	200006e8 00000000 00000040 200006a8     ... ....@...... 
    4074:	00000000 00000040 20000668 00000000     ....@...h.. ....
    4084:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    4094:	73752f65 2e636462 00000063              e/usbdc.c...

000040a0 <_global_impure_ptr>:
    40a0:	20000068                                h.. 

000040a4 <_init>:
    40a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40a6:	bf00      	nop
    40a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    40aa:	bc08      	pop	{r3}
    40ac:	469e      	mov	lr, r3
    40ae:	4770      	bx	lr

000040b0 <__init_array_start>:
    40b0:	00003d31 	.word	0x00003d31

000040b4 <__frame_dummy_init_array_entry>:
    40b4:	00000289                                ....

000040b8 <_fini>:
    40b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40ba:	bf00      	nop
    40bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    40be:	bc08      	pop	{r3}
    40c0:	469e      	mov	lr, r3
    40c2:	4770      	bx	lr

000040c4 <__fini_array_start>:
    40c4:	00000265 	.word	0x00000265
