
SPI_Asyn_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fe8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  00003fe8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000204a4  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000204a4  2**0
                  CONTENTS
  4 .bss          000003e4  200004a4  0000448c  000204a4  2**2
                  ALLOC
  5 .stack        00010000  20000888  00004870  000204a4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000204d2  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003cb8e  00000000  00000000  0002052b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000520b  00000000  00000000  0005d0b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001641b  00000000  00000000  000622c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001180  00000000  00000000  000786df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001948  00000000  00000000  0007985f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003ca80  00000000  00000000  0007b1a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001d23b  00000000  00000000  000b7c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001296d2  00000000  00000000  000d4e62  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002ec8  00000000  00000000  001fe534  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 08 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	91 17 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 c1 18 00 00 d5 18 00 00 e9 18 00 00     ................
     104:	fd 18 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 d1 02 00 00 e5 2e 00 00     ................
     184:	f1 2e 00 00 fd 2e 00 00 09 2f 00 00 d1 02 00 00     ........./......
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200004a4 	.word	0x200004a4
     280:	00000000 	.word	0x00000000
     284:	00003fe8 	.word	0x00003fe8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00003fe8 	.word	0x00003fe8
     2c4:	200004a8 	.word	0x200004a8
     2c8:	00003fe8 	.word	0x00003fe8
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	00003fe8 	.word	0x00003fe8
     33c:	200004a4 	.word	0x200004a4
     340:	20000888 	.word	0x20000888
     344:	200004a4 	.word	0x200004a4
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00003a1d 	.word	0x00003a1d
     354:	0000035d 	.word	0x0000035d

00000358 <_ZL17complete_cb_SPI_1PK22spi_m_async_descriptor>:

#include "SPI_Asyn_Class.h"
static uint8_t example_SPI_0[] = "Hello World!";

static void complete_cb_SPI_1(const struct spi_m_async_descriptor *const io_descr)
{
     358:	4770      	bx	lr
	...

0000035c <main>:
	/* Transfer completed */
}

int main(void)
{
     35c:	b500      	push	{lr}
     35e:	b099      	sub	sp, #100	; 0x64
		atmel_start_init();
     360:	4b10      	ldr	r3, [pc, #64]	; (3a4 <main+0x48>)
     362:	4798      	blx	r3
		SPI_Asyn_Class	spi0(0);
     364:	2100      	movs	r1, #0
     366:	a801      	add	r0, sp, #4
     368:	4b0f      	ldr	r3, [pc, #60]	; (3a8 <main+0x4c>)
     36a:	4798      	blx	r3
		spi0.init();
     36c:	a801      	add	r0, sp, #4
     36e:	4b0f      	ldr	r3, [pc, #60]	; (3ac <main+0x50>)
     370:	4798      	blx	r3
    /* Replace with your application code */
    while (1) 
    {
		struct io_descriptor *io;
		spi_m_async_get_io_descriptor(&SPI_0, &io);
     372:	4c0f      	ldr	r4, [pc, #60]	; (3b0 <main+0x54>)
     374:	4e0f      	ldr	r6, [pc, #60]	; (3b4 <main+0x58>)

		spi_m_async_register_callback(&SPI_0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)complete_cb_SPI_1);
     376:	4d10      	ldr	r5, [pc, #64]	; (3b8 <main+0x5c>)
		spi_m_async_get_io_descriptor(&SPI_0, &io);
     378:	4669      	mov	r1, sp
     37a:	4620      	mov	r0, r4
     37c:	47b0      	blx	r6
		spi_m_async_register_callback(&SPI_0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)complete_cb_SPI_1);
     37e:	462a      	mov	r2, r5
     380:	2100      	movs	r1, #0
     382:	4620      	mov	r0, r4
     384:	4b0d      	ldr	r3, [pc, #52]	; (3bc <main+0x60>)
     386:	4798      	blx	r3
		spi_m_async_enable(&SPI_0);
     388:	4620      	mov	r0, r4
     38a:	4b0d      	ldr	r3, [pc, #52]	; (3c0 <main+0x64>)
     38c:	4798      	blx	r3
		io_write(io, example_SPI_0, 12);
     38e:	220c      	movs	r2, #12
     390:	490c      	ldr	r1, [pc, #48]	; (3c4 <main+0x68>)
     392:	9800      	ldr	r0, [sp, #0]
     394:	4b0c      	ldr	r3, [pc, #48]	; (3c8 <main+0x6c>)
     396:	4798      	blx	r3
		delay_ms(500);
     398:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     39c:	4b0b      	ldr	r3, [pc, #44]	; (3cc <main+0x70>)
     39e:	4798      	blx	r3
     3a0:	e7ea      	b.n	378 <main+0x1c>
     3a2:	bf00      	nop
     3a4:	00000431 	.word	0x00000431
     3a8:	000003d1 	.word	0x000003d1
     3ac:	000003f9 	.word	0x000003f9
     3b0:	20000800 	.word	0x20000800
     3b4:	00000ba9 	.word	0x00000ba9
     3b8:	00000359 	.word	0x00000359
     3bc:	00000b65 	.word	0x00000b65
     3c0:	00000b3d 	.word	0x00000b3d
     3c4:	20000000 	.word	0x20000000
     3c8:	000008c9 	.word	0x000008c9
     3cc:	0000089d 	.word	0x0000089d

000003d0 <_ZN14SPI_Asyn_ClassC1Eh>:
// default destructor
SPI_Asyn_Class::~SPI_Asyn_Class()
{
} //~SPI_Asyn_Class

SPI_Asyn_Class::SPI_Asyn_Class(uint8_t p){
     3d0:	b510      	push	{r4, lr}
     3d2:	4604      	mov	r4, r0
	portNumber=p;
     3d4:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
	SPI0=SPI_0;
     3d8:	2248      	movs	r2, #72	; 0x48
     3da:	4904      	ldr	r1, [pc, #16]	; (3ec <_ZN14SPI_Asyn_ClassC1Eh+0x1c>)
     3dc:	3008      	adds	r0, #8
     3de:	4b04      	ldr	r3, [pc, #16]	; (3f0 <_ZN14SPI_Asyn_ClassC1Eh+0x20>)
     3e0:	4798      	blx	r3
	ptrSPIClass=this;
     3e2:	4b04      	ldr	r3, [pc, #16]	; (3f4 <_ZN14SPI_Asyn_ClassC1Eh+0x24>)
     3e4:	601c      	str	r4, [r3, #0]
}
     3e6:	4620      	mov	r0, r4
     3e8:	bd10      	pop	{r4, pc}
     3ea:	bf00      	nop
     3ec:	20000800 	.word	0x20000800
     3f0:	00003a6d 	.word	0x00003a6d
     3f4:	200004c0 	.word	0x200004c0

000003f8 <_ZN14SPI_Asyn_Class4initEv>:
/*
SPI_Asyn_Class::pSPIClass-{
		ptrSPIClass=pSPIClass;
}
*/
void SPI_Asyn_Class::init(){
     3f8:	b510      	push	{r4, lr}
     3fa:	4604      	mov	r4, r0
	SPI_0_CLOCK_init();
     3fc:	4b07      	ldr	r3, [pc, #28]	; (41c <_ZN14SPI_Asyn_Class4initEv+0x24>)
     3fe:	4798      	blx	r3
	spi_m_async_init(&SPI0, SERCOM0);
     400:	4907      	ldr	r1, [pc, #28]	; (420 <_ZN14SPI_Asyn_Class4initEv+0x28>)
     402:	f104 0008 	add.w	r0, r4, #8
     406:	4b07      	ldr	r3, [pc, #28]	; (424 <_ZN14SPI_Asyn_Class4initEv+0x2c>)
     408:	4798      	blx	r3
	SPI_0_PORT_init();
     40a:	4b07      	ldr	r3, [pc, #28]	; (428 <_ZN14SPI_Asyn_Class4initEv+0x30>)
     40c:	4798      	blx	r3
	pSPIClass=this;
     40e:	65a4      	str	r4, [r4, #88]	; 0x58
	ptrSPIClass=pSPIClass;
     410:	4b06      	ldr	r3, [pc, #24]	; (42c <_ZN14SPI_Asyn_Class4initEv+0x34>)
     412:	601c      	str	r4, [r3, #0]
	ready=true;
     414:	2301      	movs	r3, #1
     416:	7023      	strb	r3, [r4, #0]
     418:	bd10      	pop	{r4, pc}
     41a:	bf00      	nop
     41c:	0000055d 	.word	0x0000055d
     420:	40003000 	.word	0x40003000
     424:	00000ab9 	.word	0x00000ab9
     428:	000004b1 	.word	0x000004b1
     42c:	200004c0 	.word	0x200004c0

00000430 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     430:	b508      	push	{r3, lr}
	system_init();
     432:	4b02      	ldr	r3, [pc, #8]	; (43c <atmel_start_init+0xc>)
     434:	4798      	blx	r3
	usb_init();
     436:	4b02      	ldr	r3, [pc, #8]	; (440 <atmel_start_init+0x10>)
     438:	4798      	blx	r3
     43a:	bd08      	pop	{r3, pc}
     43c:	00000685 	.word	0x00000685
     440:	00002f45 	.word	0x00002f45

00000444 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     444:	4a04      	ldr	r2, [pc, #16]	; (458 <ADC_0_CLOCK_init+0x14>)
     446:	6a13      	ldr	r3, [r2, #32]
     448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     44c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     44e:	2240      	movs	r2, #64	; 0x40
     450:	4b02      	ldr	r3, [pc, #8]	; (45c <ADC_0_CLOCK_init+0x18>)
     452:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     456:	4770      	bx	lr
     458:	40000800 	.word	0x40000800
     45c:	40001c00 	.word	0x40001c00

00000460 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     460:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     462:	4b04      	ldr	r3, [pc, #16]	; (474 <ADC_0_init+0x14>)
     464:	4798      	blx	r3
	ADC_0_PORT_init();
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     466:	2200      	movs	r2, #0
     468:	4903      	ldr	r1, [pc, #12]	; (478 <ADC_0_init+0x18>)
     46a:	4804      	ldr	r0, [pc, #16]	; (47c <ADC_0_init+0x1c>)
     46c:	4b04      	ldr	r3, [pc, #16]	; (480 <ADC_0_init+0x20>)
     46e:	4798      	blx	r3
     470:	bd08      	pop	{r3, pc}
     472:	bf00      	nop
     474:	00000445 	.word	0x00000445
     478:	43001c00 	.word	0x43001c00
     47c:	200007fc 	.word	0x200007fc
     480:	00000859 	.word	0x00000859

00000484 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     484:	b508      	push	{r3, lr}
     486:	4b07      	ldr	r3, [pc, #28]	; (4a4 <EVENT_SYSTEM_0_init+0x20>)
     488:	2240      	movs	r2, #64	; 0x40
     48a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     48e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     492:	4a05      	ldr	r2, [pc, #20]	; (4a8 <EVENT_SYSTEM_0_init+0x24>)
     494:	6993      	ldr	r3, [r2, #24]
     496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     49a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     49c:	4b03      	ldr	r3, [pc, #12]	; (4ac <EVENT_SYSTEM_0_init+0x28>)
     49e:	4798      	blx	r3
     4a0:	bd08      	pop	{r3, pc}
     4a2:	bf00      	nop
     4a4:	40001c00 	.word	0x40001c00
     4a8:	40000800 	.word	0x40000800
     4ac:	000008bd 	.word	0x000008bd

000004b0 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4b0:	4b28      	ldr	r3, [pc, #160]	; (554 <SPI_0_PORT_init+0xa4>)
     4b2:	2210      	movs	r2, #16
     4b4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4b6:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4b8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     4bc:	629a      	str	r2, [r3, #40]	; 0x28
     4be:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     4c2:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     4c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4cc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4d4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4d8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4dc:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4e0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4e4:	2220      	movs	r2, #32
     4e6:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4e8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4ea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     4ee:	629a      	str	r2, [r3, #40]	; 0x28
     4f0:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4f2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     4f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     502:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     506:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     50a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     50e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     512:	2240      	movs	r2, #64	; 0x40
     514:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     516:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     51a:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     51e:	629a      	str	r2, [r3, #40]	; 0x28
     520:	4a0d      	ldr	r2, [pc, #52]	; (558 <SPI_0_PORT_init+0xa8>)
     522:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     524:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     528:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     52c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     530:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     534:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     538:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     53c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     540:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     544:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     548:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     54c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     550:	4770      	bx	lr
     552:	bf00      	nop
     554:	41008000 	.word	0x41008000
     558:	c0020000 	.word	0xc0020000

0000055c <SPI_0_CLOCK_init>:
     55c:	4b06      	ldr	r3, [pc, #24]	; (578 <SPI_0_CLOCK_init+0x1c>)
     55e:	2240      	movs	r2, #64	; 0x40
     560:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     564:	2243      	movs	r2, #67	; 0x43
     566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     56a:	4a04      	ldr	r2, [pc, #16]	; (57c <SPI_0_CLOCK_init+0x20>)
     56c:	6953      	ldr	r3, [r2, #20]
     56e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     572:	6153      	str	r3, [r2, #20]
     574:	4770      	bx	lr
     576:	bf00      	nop
     578:	40001c00 	.word	0x40001c00
     57c:	40000800 	.word	0x40000800

00000580 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     580:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     582:	4b04      	ldr	r3, [pc, #16]	; (594 <SPI_0_init+0x14>)
     584:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
     586:	4904      	ldr	r1, [pc, #16]	; (598 <SPI_0_init+0x18>)
     588:	4804      	ldr	r0, [pc, #16]	; (59c <SPI_0_init+0x1c>)
     58a:	4b05      	ldr	r3, [pc, #20]	; (5a0 <SPI_0_init+0x20>)
     58c:	4798      	blx	r3
	SPI_0_PORT_init();
     58e:	4b05      	ldr	r3, [pc, #20]	; (5a4 <SPI_0_init+0x24>)
     590:	4798      	blx	r3
     592:	bd08      	pop	{r3, pc}
     594:	0000055d 	.word	0x0000055d
     598:	40003000 	.word	0x40003000
     59c:	20000800 	.word	0x20000800
     5a0:	00000ab9 	.word	0x00000ab9
     5a4:	000004b1 	.word	0x000004b1

000005a8 <delay_driver_init>:
}

void delay_driver_init(void)
{
     5a8:	b508      	push	{r3, lr}
	delay_init(SysTick);
     5aa:	4802      	ldr	r0, [pc, #8]	; (5b4 <delay_driver_init+0xc>)
     5ac:	4b02      	ldr	r3, [pc, #8]	; (5b8 <delay_driver_init+0x10>)
     5ae:	4798      	blx	r3
     5b0:	bd08      	pop	{r3, pc}
     5b2:	bf00      	nop
     5b4:	e000e010 	.word	0xe000e010
     5b8:	00000889 	.word	0x00000889

000005bc <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5bc:	4b1e      	ldr	r3, [pc, #120]	; (638 <USB_0_PORT_init+0x7c>)
     5be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     5c2:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     5c8:	6299      	str	r1, [r3, #40]	; 0x28
     5ca:	481c      	ldr	r0, [pc, #112]	; (63c <USB_0_PORT_init+0x80>)
     5cc:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5ce:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5d0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     5d4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5dc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     5e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5e4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5ec:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5f0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5f4:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     600:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     602:	6299      	str	r1, [r3, #40]	; 0x28
     604:	490e      	ldr	r1, [pc, #56]	; (640 <USB_0_PORT_init+0x84>)
     606:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     608:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     60a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     60e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     612:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     616:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     61a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     622:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     626:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     62a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     62e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     636:	4770      	bx	lr
     638:	41008000 	.word	0x41008000
     63c:	c0000100 	.word	0xc0000100
     640:	c0000200 	.word	0xc0000200

00000644 <USB_0_CLOCK_init>:
     644:	2244      	movs	r2, #68	; 0x44
     646:	4b07      	ldr	r3, [pc, #28]	; (664 <USB_0_CLOCK_init+0x20>)
     648:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     64c:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     650:	691a      	ldr	r2, [r3, #16]
     652:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     656:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     658:	699a      	ldr	r2, [r3, #24]
     65a:	f042 0201 	orr.w	r2, r2, #1
     65e:	619a      	str	r2, [r3, #24]
     660:	4770      	bx	lr
     662:	bf00      	nop
     664:	40001c00 	.word	0x40001c00

00000668 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     668:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     66a:	4b03      	ldr	r3, [pc, #12]	; (678 <USB_0_init+0x10>)
     66c:	4798      	blx	r3
	usb_d_init();
     66e:	4b03      	ldr	r3, [pc, #12]	; (67c <USB_0_init+0x14>)
     670:	4798      	blx	r3
	USB_0_PORT_init();
     672:	4b03      	ldr	r3, [pc, #12]	; (680 <USB_0_init+0x18>)
     674:	4798      	blx	r3
     676:	bd08      	pop	{r3, pc}
     678:	00000645 	.word	0x00000645
     67c:	00000f3d 	.word	0x00000f3d
     680:	000005bd 	.word	0x000005bd

00000684 <system_init>:
}

void system_init(void)
{
     684:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     686:	4b61      	ldr	r3, [pc, #388]	; (80c <system_init+0x188>)
     688:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     68a:	4b61      	ldr	r3, [pc, #388]	; (810 <system_init+0x18c>)
     68c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     690:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     69c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     6a0:	495c      	ldr	r1, [pc, #368]	; (814 <system_init+0x190>)
     6a2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6a6:	f893 10dc 	ldrb.w	r1, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
     6aa:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6ae:	f883 10dc 	strb.w	r1, [r3, #220]	; 0xdc
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6b6:	4d58      	ldr	r5, [pc, #352]	; (818 <system_init+0x194>)
     6b8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     6bc:	4c57      	ldr	r4, [pc, #348]	; (81c <system_init+0x198>)
     6be:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     6c6:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
     6ca:	f041 0104 	orr.w	r1, r1, #4
     6ce:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6d2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6d6:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     6da:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6de:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6e2:	2104      	movs	r1, #4
     6e4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6e8:	484d      	ldr	r0, [pc, #308]	; (820 <system_init+0x19c>)
     6ea:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     6ee:	4e4d      	ldr	r6, [pc, #308]	; (824 <system_init+0x1a0>)
     6f0:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6f4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     6f8:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
     6fc:	4308      	orrs	r0, r1
     6fe:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     702:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     706:	f893 1142 	ldrb.w	r1, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     70a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     70e:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     712:	2108      	movs	r1, #8
     714:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     718:	4843      	ldr	r0, [pc, #268]	; (828 <system_init+0x1a4>)
     71a:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     71e:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     722:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     726:	f893 0143 	ldrb.w	r0, [r3, #323]	; 0x143
     72a:	f040 0004 	orr.w	r0, r0, #4
     72e:	f883 0143 	strb.w	r0, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     732:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     736:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
	tmp &= ~PORT_PINCFG_PMUXEN;
     73a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     73e:	f883 1143 	strb.w	r1, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     746:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     74a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     74e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     752:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     756:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
     75a:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     75e:	f893 114f 	ldrb.w	r1, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
     762:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     766:	f883 114f 	strb.w	r1, [r3, #335]	; 0x14f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     76a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     76e:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     772:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     776:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     77a:	492c      	ldr	r1, [pc, #176]	; (82c <system_init+0x1a8>)
     77c:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     780:	f893 1152 	ldrb.w	r1, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     784:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     788:	f883 1152 	strb.w	r1, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     78c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     790:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
     794:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     798:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     79c:	f893 115e 	ldrb.w	r1, [r3, #350]	; 0x15e
     7a0:	f041 0104 	orr.w	r1, r1, #4
     7a4:	f883 115e 	strb.w	r1, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7a8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ac:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
	tmp &= ~PORT_PINCFG_PMUXEN;
     7b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7b4:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
     7bc:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7c0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     7c8:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     7cc:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7d0:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
	tmp &= ~PORT_PINCFG_PMUXEN;
     7d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7d8:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	// Set pin direction to output
	gpio_set_pin_direction(OLED_LED1, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(OLED_LED1, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     7dc:	4b14      	ldr	r3, [pc, #80]	; (830 <system_init+0x1ac>)
     7de:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     7e0:	4b14      	ldr	r3, [pc, #80]	; (834 <system_init+0x1b0>)
     7e2:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     7e4:	4a14      	ldr	r2, [pc, #80]	; (838 <system_init+0x1b4>)
     7e6:	6953      	ldr	r3, [r2, #20]
     7e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     7ec:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     7ee:	4b13      	ldr	r3, [pc, #76]	; (83c <system_init+0x1b8>)
     7f0:	4798      	blx	r3
     7f2:	4602      	mov	r2, r0
     7f4:	4912      	ldr	r1, [pc, #72]	; (840 <system_init+0x1bc>)
     7f6:	4813      	ldr	r0, [pc, #76]	; (844 <system_init+0x1c0>)
     7f8:	4b13      	ldr	r3, [pc, #76]	; (848 <system_init+0x1c4>)
     7fa:	4798      	blx	r3

	TIMER_0_init();

	SPI_0_init();
     7fc:	4b13      	ldr	r3, [pc, #76]	; (84c <system_init+0x1c8>)
     7fe:	4798      	blx	r3

	delay_driver_init();
     800:	4b13      	ldr	r3, [pc, #76]	; (850 <system_init+0x1cc>)
     802:	4798      	blx	r3

	USB_0_init();
     804:	4b13      	ldr	r3, [pc, #76]	; (854 <system_init+0x1d0>)
     806:	4798      	blx	r3
     808:	bd70      	pop	{r4, r5, r6, pc}
     80a:	bf00      	nop
     80c:	000014cd 	.word	0x000014cd
     810:	41008000 	.word	0x41008000
     814:	c0001000 	.word	0xc0001000
     818:	40020000 	.word	0x40020000
     81c:	c0024000 	.word	0xc0024000
     820:	40020004 	.word	0x40020004
     824:	c0020000 	.word	0xc0020000
     828:	40020008 	.word	0x40020008
     82c:	c0000004 	.word	0xc0000004
     830:	00000461 	.word	0x00000461
     834:	00000485 	.word	0x00000485
     838:	40000800 	.word	0x40000800
     83c:	0000178d 	.word	0x0000178d
     840:	40002400 	.word	0x40002400
     844:	20000848 	.word	0x20000848
     848:	00000cad 	.word	0x00000cad
     84c:	00000581 	.word	0x00000581
     850:	000005a9 	.word	0x000005a9
     854:	00000669 	.word	0x00000669

00000858 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     858:	b538      	push	{r3, r4, r5, lr}
     85a:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     85c:	4605      	mov	r5, r0
     85e:	b158      	cbz	r0, 878 <adc_sync_init+0x20>
     860:	1c08      	adds	r0, r1, #0
     862:	bf18      	it	ne
     864:	2001      	movne	r0, #1
     866:	2239      	movs	r2, #57	; 0x39
     868:	4904      	ldr	r1, [pc, #16]	; (87c <adc_sync_init+0x24>)
     86a:	4b05      	ldr	r3, [pc, #20]	; (880 <adc_sync_init+0x28>)
     86c:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     86e:	4621      	mov	r1, r4
     870:	4628      	mov	r0, r5
     872:	4b04      	ldr	r3, [pc, #16]	; (884 <adc_sync_init+0x2c>)
     874:	4798      	blx	r3
}
     876:	bd38      	pop	{r3, r4, r5, pc}
     878:	2000      	movs	r0, #0
     87a:	e7f4      	b.n	866 <adc_sync_init+0xe>
     87c:	00003d5c 	.word	0x00003d5c
     880:	00001289 	.word	0x00001289
     884:	00001489 	.word	0x00001489

00000888 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     888:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     88a:	4b02      	ldr	r3, [pc, #8]	; (894 <delay_init+0xc>)
     88c:	6018      	str	r0, [r3, #0]
     88e:	4b02      	ldr	r3, [pc, #8]	; (898 <delay_init+0x10>)
     890:	4798      	blx	r3
     892:	bd08      	pop	{r3, pc}
     894:	200004c4 	.word	0x200004c4
     898:	00001c19 	.word	0x00001c19

0000089c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     89c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     89e:	4b04      	ldr	r3, [pc, #16]	; (8b0 <delay_ms+0x14>)
     8a0:	681c      	ldr	r4, [r3, #0]
     8a2:	4b04      	ldr	r3, [pc, #16]	; (8b4 <delay_ms+0x18>)
     8a4:	4798      	blx	r3
     8a6:	4601      	mov	r1, r0
     8a8:	4620      	mov	r0, r4
     8aa:	4b03      	ldr	r3, [pc, #12]	; (8b8 <delay_ms+0x1c>)
     8ac:	4798      	blx	r3
     8ae:	bd10      	pop	{r4, pc}
     8b0:	200004c4 	.word	0x200004c4
     8b4:	000014c1 	.word	0x000014c1
     8b8:	00001c2d 	.word	0x00001c2d

000008bc <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     8bc:	b508      	push	{r3, lr}
	return _event_system_init();
     8be:	4b01      	ldr	r3, [pc, #4]	; (8c4 <event_system_init+0x8>)
     8c0:	4798      	blx	r3
}
     8c2:	bd08      	pop	{r3, pc}
     8c4:	00001531 	.word	0x00001531

000008c8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     8c8:	b570      	push	{r4, r5, r6, lr}
     8ca:	460d      	mov	r5, r1
     8cc:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     8ce:	4604      	mov	r4, r0
     8d0:	b160      	cbz	r0, 8ec <io_write+0x24>
     8d2:	1c08      	adds	r0, r1, #0
     8d4:	bf18      	it	ne
     8d6:	2001      	movne	r0, #1
     8d8:	2234      	movs	r2, #52	; 0x34
     8da:	4905      	ldr	r1, [pc, #20]	; (8f0 <io_write+0x28>)
     8dc:	4b05      	ldr	r3, [pc, #20]	; (8f4 <io_write+0x2c>)
     8de:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     8e0:	6823      	ldr	r3, [r4, #0]
     8e2:	4632      	mov	r2, r6
     8e4:	4629      	mov	r1, r5
     8e6:	4620      	mov	r0, r4
     8e8:	4798      	blx	r3
}
     8ea:	bd70      	pop	{r4, r5, r6, pc}
     8ec:	2000      	movs	r0, #0
     8ee:	e7f3      	b.n	8d8 <io_write+0x10>
     8f0:	00003d78 	.word	0x00003d78
     8f4:	00001289 	.word	0x00001289

000008f8 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8fa:	460f      	mov	r7, r1
     8fc:	4616      	mov	r6, r2
	ASSERT(io);
     8fe:	4604      	mov	r4, r0
     900:	f240 1227 	movw	r2, #295	; 0x127
     904:	4909      	ldr	r1, [pc, #36]	; (92c <_spi_m_async_io_write+0x34>)
     906:	3000      	adds	r0, #0
     908:	bf18      	it	ne
     90a:	2001      	movne	r0, #1
     90c:	4b08      	ldr	r3, [pc, #32]	; (930 <_spi_m_async_io_write+0x38>)
     90e:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
     910:	2500      	movs	r5, #0
     912:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
     914:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
     916:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     918:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     91a:	2310      	movs	r3, #16
     91c:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
     91e:	2101      	movs	r1, #1
     920:	f1a4 0020 	sub.w	r0, r4, #32
     924:	4b03      	ldr	r3, [pc, #12]	; (934 <_spi_m_async_io_write+0x3c>)
     926:	4798      	blx	r3

	return ERR_NONE;
}
     928:	4628      	mov	r0, r5
     92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     92c:	00003d8c 	.word	0x00003d8c
     930:	00001289 	.word	0x00001289
     934:	00001aa1 	.word	0x00001aa1

00000938 <_spi_m_async_io_read>:
{
     938:	b570      	push	{r4, r5, r6, lr}
     93a:	460d      	mov	r5, r1
     93c:	4616      	mov	r6, r2
	ASSERT(io);
     93e:	4604      	mov	r4, r0
     940:	f240 1205 	movw	r2, #261	; 0x105
     944:	490c      	ldr	r1, [pc, #48]	; (978 <_spi_m_async_io_read+0x40>)
     946:	3000      	adds	r0, #0
     948:	bf18      	it	ne
     94a:	2001      	movne	r0, #1
     94c:	4b0b      	ldr	r3, [pc, #44]	; (97c <_spi_m_async_io_read+0x44>)
     94e:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
     950:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
     952:	2500      	movs	r5, #0
     954:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
     956:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     958:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     95a:	2310      	movs	r3, #16
     95c:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
     95e:	3c20      	subs	r4, #32
     960:	2101      	movs	r1, #1
     962:	4620      	mov	r0, r4
     964:	4b06      	ldr	r3, [pc, #24]	; (980 <_spi_m_async_io_read+0x48>)
     966:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
     968:	f240 11ff 	movw	r1, #511	; 0x1ff
     96c:	4620      	mov	r0, r4
     96e:	4b05      	ldr	r3, [pc, #20]	; (984 <_spi_m_async_io_read+0x4c>)
     970:	4798      	blx	r3
}
     972:	4628      	mov	r0, r5
     974:	bd70      	pop	{r4, r5, r6, pc}
     976:	bf00      	nop
     978:	00003d8c 	.word	0x00003d8c
     97c:	00001289 	.word	0x00001289
     980:	00001ad5 	.word	0x00001ad5
     984:	00001b51 	.word	0x00001b51

00000988 <_spi_dev_error>:
{
     988:	b570      	push	{r4, r5, r6, lr}
     98a:	4604      	mov	r4, r0
     98c:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     98e:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
     990:	2100      	movs	r1, #0
     992:	4b09      	ldr	r3, [pc, #36]	; (9b8 <_spi_dev_error+0x30>)
     994:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
     996:	2100      	movs	r1, #0
     998:	4620      	mov	r0, r4
     99a:	4b08      	ldr	r3, [pc, #32]	; (9bc <_spi_dev_error+0x34>)
     99c:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
     99e:	2100      	movs	r1, #0
     9a0:	4620      	mov	r0, r4
     9a2:	4b07      	ldr	r3, [pc, #28]	; (9c0 <_spi_dev_error+0x38>)
     9a4:	4798      	blx	r3
	spi->stat = 0;
     9a6:	2300      	movs	r3, #0
     9a8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
     9ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
     9ae:	b113      	cbz	r3, 9b6 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
     9b0:	4631      	mov	r1, r6
     9b2:	4628      	mov	r0, r5
     9b4:	4798      	blx	r3
     9b6:	bd70      	pop	{r4, r5, r6, pc}
     9b8:	00001aa1 	.word	0x00001aa1
     9bc:	00001ad5 	.word	0x00001ad5
     9c0:	00001b15 	.word	0x00001b15

000009c4 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
     9c4:	6c02      	ldr	r2, [r0, #64]	; 0x40
     9c6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     9c8:	429a      	cmp	r2, r3
     9ca:	d200      	bcs.n	9ce <_spi_dev_complete+0xa>
     9cc:	4770      	bx	lr
{
     9ce:	b510      	push	{r4, lr}
     9d0:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
     9d2:	2100      	movs	r1, #0
     9d4:	4b04      	ldr	r3, [pc, #16]	; (9e8 <_spi_dev_complete+0x24>)
     9d6:	4798      	blx	r3
		spi->stat = 0;
     9d8:	2300      	movs	r3, #0
     9da:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     9de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     9e0:	b10b      	cbz	r3, 9e6 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
     9e2:	1f20      	subs	r0, r4, #4
     9e4:	4798      	blx	r3
     9e6:	bd10      	pop	{r4, pc}
     9e8:	00001b15 	.word	0x00001b15

000009ec <_spi_dev_tx>:
{
     9ec:	b510      	push	{r4, lr}
     9ee:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
     9f0:	7903      	ldrb	r3, [r0, #4]
     9f2:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
     9f4:	6b42      	ldr	r2, [r0, #52]	; 0x34
     9f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
     9f8:	f103 0101 	add.w	r1, r3, #1
     9fc:	6401      	str	r1, [r0, #64]	; 0x40
     9fe:	bf94      	ite	ls
     a00:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
     a02:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     a06:	4b08      	ldr	r3, [pc, #32]	; (a28 <_spi_dev_tx+0x3c>)
     a08:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
     a0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
     a0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     a0e:	429a      	cmp	r2, r3
     a10:	d000      	beq.n	a14 <_spi_dev_tx+0x28>
     a12:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
     a14:	2100      	movs	r1, #0
     a16:	4620      	mov	r0, r4
     a18:	4b04      	ldr	r3, [pc, #16]	; (a2c <_spi_dev_tx+0x40>)
     a1a:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
     a1c:	2101      	movs	r1, #1
     a1e:	4620      	mov	r0, r4
     a20:	4b03      	ldr	r3, [pc, #12]	; (a30 <_spi_dev_tx+0x44>)
     a22:	4798      	blx	r3
}
     a24:	e7f5      	b.n	a12 <_spi_dev_tx+0x26>
     a26:	bf00      	nop
     a28:	00001b51 	.word	0x00001b51
     a2c:	00001aa1 	.word	0x00001aa1
     a30:	00001b15 	.word	0x00001b15

00000a34 <_spi_dev_rx>:
{
     a34:	b570      	push	{r4, r5, r6, lr}
     a36:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
     a38:	6b85      	ldr	r5, [r0, #56]	; 0x38
     a3a:	b305      	cbz	r5, a7e <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
     a3c:	7903      	ldrb	r3, [r0, #4]
     a3e:	2b01      	cmp	r3, #1
     a40:	d916      	bls.n	a70 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
     a42:	6c06      	ldr	r6, [r0, #64]	; 0x40
     a44:	1c73      	adds	r3, r6, #1
     a46:	6403      	str	r3, [r0, #64]	; 0x40
     a48:	4b18      	ldr	r3, [pc, #96]	; (aac <_spi_dev_rx+0x78>)
     a4a:	4798      	blx	r3
     a4c:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
     a50:	6c23      	ldr	r3, [r4, #64]	; 0x40
     a52:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     a54:	4293      	cmp	r3, r2
     a56:	d21d      	bcs.n	a94 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
     a58:	6b62      	ldr	r2, [r4, #52]	; 0x34
     a5a:	b1b2      	cbz	r2, a8a <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
     a5c:	7921      	ldrb	r1, [r4, #4]
     a5e:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
     a60:	bf94      	ite	ls
     a62:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
     a64:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     a68:	4620      	mov	r0, r4
     a6a:	4b11      	ldr	r3, [pc, #68]	; (ab0 <_spi_dev_rx+0x7c>)
     a6c:	4798      	blx	r3
     a6e:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
     a70:	6c06      	ldr	r6, [r0, #64]	; 0x40
     a72:	1c73      	adds	r3, r6, #1
     a74:	6403      	str	r3, [r0, #64]	; 0x40
     a76:	4b0d      	ldr	r3, [pc, #52]	; (aac <_spi_dev_rx+0x78>)
     a78:	4798      	blx	r3
     a7a:	55a8      	strb	r0, [r5, r6]
     a7c:	e7e8      	b.n	a50 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
     a7e:	4b0b      	ldr	r3, [pc, #44]	; (aac <_spi_dev_rx+0x78>)
     a80:	4798      	blx	r3
		spi->xfercnt++;
     a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
     a84:	3301      	adds	r3, #1
     a86:	6423      	str	r3, [r4, #64]	; 0x40
     a88:	e7e2      	b.n	a50 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
     a8a:	88e1      	ldrh	r1, [r4, #6]
     a8c:	4620      	mov	r0, r4
     a8e:	4b08      	ldr	r3, [pc, #32]	; (ab0 <_spi_dev_rx+0x7c>)
     a90:	4798      	blx	r3
     a92:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
     a94:	2100      	movs	r1, #0
     a96:	4620      	mov	r0, r4
     a98:	4b06      	ldr	r3, [pc, #24]	; (ab4 <_spi_dev_rx+0x80>)
     a9a:	4798      	blx	r3
		spi->stat = 0;
     a9c:	2300      	movs	r3, #0
     a9e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     aa2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     aa4:	b10b      	cbz	r3, aaa <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
     aa6:	1f20      	subs	r0, r4, #4
     aa8:	4798      	blx	r3
     aaa:	bd70      	pop	{r4, r5, r6, pc}
     aac:	00001b81 	.word	0x00001b81
     ab0:	00001b51 	.word	0x00001b51
     ab4:	00001ad5 	.word	0x00001ad5

00000ab8 <spi_m_async_init>:
{
     ab8:	b570      	push	{r4, r5, r6, lr}
     aba:	460d      	mov	r5, r1
	ASSERT(spi && hw);
     abc:	4606      	mov	r6, r0
     abe:	b330      	cbz	r0, b0e <spi_m_async_init+0x56>
     ac0:	1c08      	adds	r0, r1, #0
     ac2:	bf18      	it	ne
     ac4:	2001      	movne	r0, #1
     ac6:	22a5      	movs	r2, #165	; 0xa5
     ac8:	4912      	ldr	r1, [pc, #72]	; (b14 <spi_m_async_init+0x5c>)
     aca:	4b13      	ldr	r3, [pc, #76]	; (b18 <spi_m_async_init+0x60>)
     acc:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     ace:	4634      	mov	r4, r6
     ad0:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
     ad4:	4629      	mov	r1, r5
     ad6:	4620      	mov	r0, r4
     ad8:	4b10      	ldr	r3, [pc, #64]	; (b1c <spi_m_async_init+0x64>)
     ada:	4798      	blx	r3
	if (rc >= 0) {
     adc:	2800      	cmp	r0, #0
     ade:	db15      	blt.n	b0c <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
     ae0:	4a0f      	ldr	r2, [pc, #60]	; (b20 <spi_m_async_init+0x68>)
     ae2:	2100      	movs	r1, #0
     ae4:	4620      	mov	r0, r4
     ae6:	4d0f      	ldr	r5, [pc, #60]	; (b24 <spi_m_async_init+0x6c>)
     ae8:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
     aea:	4a0f      	ldr	r2, [pc, #60]	; (b28 <spi_m_async_init+0x70>)
     aec:	2101      	movs	r1, #1
     aee:	4620      	mov	r0, r4
     af0:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
     af2:	4a0e      	ldr	r2, [pc, #56]	; (b2c <spi_m_async_init+0x74>)
     af4:	2102      	movs	r1, #2
     af6:	4620      	mov	r0, r4
     af8:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
     afa:	4a0d      	ldr	r2, [pc, #52]	; (b30 <spi_m_async_init+0x78>)
     afc:	2103      	movs	r1, #3
     afe:	4620      	mov	r0, r4
     b00:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
     b02:	4b0c      	ldr	r3, [pc, #48]	; (b34 <spi_m_async_init+0x7c>)
     b04:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
     b06:	4b0c      	ldr	r3, [pc, #48]	; (b38 <spi_m_async_init+0x80>)
     b08:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
     b0a:	2000      	movs	r0, #0
}
     b0c:	bd70      	pop	{r4, r5, r6, pc}
     b0e:	2000      	movs	r0, #0
     b10:	e7d9      	b.n	ac6 <spi_m_async_init+0xe>
     b12:	bf00      	nop
     b14:	00003d8c 	.word	0x00003d8c
     b18:	00001289 	.word	0x00001289
     b1c:	00001a05 	.word	0x00001a05
     b20:	000009ed 	.word	0x000009ed
     b24:	00001bad 	.word	0x00001bad
     b28:	00000a35 	.word	0x00000a35
     b2c:	000009c5 	.word	0x000009c5
     b30:	00000989 	.word	0x00000989
     b34:	00000939 	.word	0x00000939
     b38:	000008f9 	.word	0x000008f9

00000b3c <spi_m_async_enable>:
{
     b3c:	b510      	push	{r4, lr}
	ASSERT(spi);
     b3e:	4604      	mov	r4, r0
     b40:	22c1      	movs	r2, #193	; 0xc1
     b42:	4905      	ldr	r1, [pc, #20]	; (b58 <spi_m_async_enable+0x1c>)
     b44:	3000      	adds	r0, #0
     b46:	bf18      	it	ne
     b48:	2001      	movne	r0, #1
     b4a:	4b04      	ldr	r3, [pc, #16]	; (b5c <spi_m_async_enable+0x20>)
     b4c:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
     b4e:	1d20      	adds	r0, r4, #4
     b50:	4b03      	ldr	r3, [pc, #12]	; (b60 <spi_m_async_enable+0x24>)
     b52:	4798      	blx	r3
     b54:	bd10      	pop	{r4, pc}
     b56:	bf00      	nop
     b58:	00003d8c 	.word	0x00003d8c
     b5c:	00001289 	.word	0x00001289
     b60:	00001a71 	.word	0x00001a71

00000b64 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
     b64:	b570      	push	{r4, r5, r6, lr}
     b66:	460c      	mov	r4, r1
     b68:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
     b6a:	4605      	mov	r5, r0
     b6c:	b158      	cbz	r0, b86 <spi_m_async_register_callback+0x22>
     b6e:	2901      	cmp	r1, #1
     b70:	bf8c      	ite	hi
     b72:	2000      	movhi	r0, #0
     b74:	2001      	movls	r0, #1
     b76:	f240 1263 	movw	r2, #355	; 0x163
     b7a:	4908      	ldr	r1, [pc, #32]	; (b9c <spi_m_async_register_callback+0x38>)
     b7c:	4b08      	ldr	r3, [pc, #32]	; (ba0 <spi_m_async_register_callback+0x3c>)
     b7e:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
     b80:	b91c      	cbnz	r4, b8a <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
     b82:	632e      	str	r6, [r5, #48]	; 0x30
     b84:	bd70      	pop	{r4, r5, r6, pc}
     b86:	2000      	movs	r0, #0
     b88:	e7f5      	b.n	b76 <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
     b8a:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
     b8c:	1c32      	adds	r2, r6, #0
     b8e:	bf18      	it	ne
     b90:	2201      	movne	r2, #1
     b92:	2103      	movs	r1, #3
     b94:	1d28      	adds	r0, r5, #4
     b96:	4b03      	ldr	r3, [pc, #12]	; (ba4 <spi_m_async_register_callback+0x40>)
     b98:	4798      	blx	r3
     b9a:	bd70      	pop	{r4, r5, r6, pc}
     b9c:	00003d8c 	.word	0x00003d8c
     ba0:	00001289 	.word	0x00001289
     ba4:	00001be1 	.word	0x00001be1

00000ba8 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
     ba8:	b538      	push	{r3, r4, r5, lr}
     baa:	460d      	mov	r5, r1
	ASSERT(spi && io);
     bac:	4604      	mov	r4, r0
     bae:	b158      	cbz	r0, bc8 <spi_m_async_get_io_descriptor+0x20>
     bb0:	1c08      	adds	r0, r1, #0
     bb2:	bf18      	it	ne
     bb4:	2001      	movne	r0, #1
     bb6:	f240 126f 	movw	r2, #367	; 0x16f
     bba:	4904      	ldr	r1, [pc, #16]	; (bcc <spi_m_async_get_io_descriptor+0x24>)
     bbc:	4b04      	ldr	r3, [pc, #16]	; (bd0 <spi_m_async_get_io_descriptor+0x28>)
     bbe:	4798      	blx	r3
	*io = &spi->io;
     bc0:	3424      	adds	r4, #36	; 0x24
     bc2:	602c      	str	r4, [r5, #0]
	return 0;
}
     bc4:	2000      	movs	r0, #0
     bc6:	bd38      	pop	{r3, r4, r5, pc}
     bc8:	2000      	movs	r0, #0
     bca:	e7f4      	b.n	bb6 <spi_m_async_get_io_descriptor+0xe>
     bcc:	00003d8c 	.word	0x00003d8c
     bd0:	00001289 	.word	0x00001289

00000bd4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bd6:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     bd8:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     bda:	b12f      	cbz	r7, be8 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     bdc:	688d      	ldr	r5, [r1, #8]
     bde:	463c      	mov	r4, r7
     be0:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     be2:	f1c2 0e01 	rsb	lr, r2, #1
     be6:	e00b      	b.n	c00 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     be8:	4b0e      	ldr	r3, [pc, #56]	; (c24 <timer_add_timer_task+0x50>)
     bea:	4798      	blx	r3
		return;
     bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     bee:	4473      	add	r3, lr
     bf0:	68a0      	ldr	r0, [r4, #8]
     bf2:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     bf4:	42ab      	cmp	r3, r5
     bf6:	d20a      	bcs.n	c0e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     bf8:	6823      	ldr	r3, [r4, #0]
     bfa:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     bfc:	b153      	cbz	r3, c14 <timer_add_timer_task+0x40>
     bfe:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     c00:	6863      	ldr	r3, [r4, #4]
     c02:	4293      	cmp	r3, r2
     c04:	d8f3      	bhi.n	bee <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     c06:	68a0      	ldr	r0, [r4, #8]
     c08:	4403      	add	r3, r0
     c0a:	1a9b      	subs	r3, r3, r2
     c0c:	e7f2      	b.n	bf4 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     c0e:	42a7      	cmp	r7, r4
     c10:	d004      	beq.n	c1c <timer_add_timer_task+0x48>
     c12:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     c14:	4620      	mov	r0, r4
     c16:	4b04      	ldr	r3, [pc, #16]	; (c28 <timer_add_timer_task+0x54>)
     c18:	4798      	blx	r3
     c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     c1c:	4660      	mov	r0, ip
     c1e:	4b01      	ldr	r3, [pc, #4]	; (c24 <timer_add_timer_task+0x50>)
     c20:	4798      	blx	r3
     c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c24:	000012b1 	.word	0x000012b1
     c28:	000012dd 	.word	0x000012dd

00000c2c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     c30:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     c32:	6907      	ldr	r7, [r0, #16]
     c34:	3701      	adds	r7, #1
     c36:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     c38:	7e03      	ldrb	r3, [r0, #24]
     c3a:	f013 0f01 	tst.w	r3, #1
     c3e:	d113      	bne.n	c68 <timer_process_counted+0x3c>
     c40:	7e03      	ldrb	r3, [r0, #24]
     c42:	f013 0f02 	tst.w	r3, #2
     c46:	d10f      	bne.n	c68 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     c48:	b354      	cbz	r4, ca0 <timer_process_counted+0x74>
     c4a:	6863      	ldr	r3, [r4, #4]
     c4c:	1afb      	subs	r3, r7, r3
     c4e:	68a2      	ldr	r2, [r4, #8]
     c50:	4293      	cmp	r3, r2
     c52:	d307      	bcc.n	c64 <timer_process_counted+0x38>
     c54:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     c56:	f100 0814 	add.w	r8, r0, #20
     c5a:	f8df 9048 	ldr.w	r9, [pc, #72]	; ca4 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     c5e:	f8df a048 	ldr.w	sl, [pc, #72]	; ca8 <timer_process_counted+0x7c>
     c62:	e012      	b.n	c8a <timer_process_counted+0x5e>
     c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     c68:	7e03      	ldrb	r3, [r0, #24]
     c6a:	f043 0302 	orr.w	r3, r3, #2
     c6e:	7603      	strb	r3, [r0, #24]
		return;
     c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c74:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     c76:	68e3      	ldr	r3, [r4, #12]
     c78:	4620      	mov	r0, r4
     c7a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     c7c:	b185      	cbz	r5, ca0 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     c7e:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     c80:	686b      	ldr	r3, [r5, #4]
     c82:	1afb      	subs	r3, r7, r3
     c84:	68aa      	ldr	r2, [r5, #8]
     c86:	4293      	cmp	r3, r2
     c88:	d30a      	bcc.n	ca0 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     c8a:	4640      	mov	r0, r8
     c8c:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     c8e:	7c23      	ldrb	r3, [r4, #16]
     c90:	2b01      	cmp	r3, #1
     c92:	d1ef      	bne.n	c74 <timer_process_counted+0x48>
			tmp->time_label = time;
     c94:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     c96:	463a      	mov	r2, r7
     c98:	4621      	mov	r1, r4
     c9a:	4640      	mov	r0, r8
     c9c:	47d0      	blx	sl
     c9e:	e7e9      	b.n	c74 <timer_process_counted+0x48>
     ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ca4:	00001325 	.word	0x00001325
     ca8:	00000bd5 	.word	0x00000bd5

00000cac <timer_init>:
{
     cac:	b538      	push	{r3, r4, r5, lr}
     cae:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     cb0:	4604      	mov	r4, r0
     cb2:	b178      	cbz	r0, cd4 <timer_init+0x28>
     cb4:	1c08      	adds	r0, r1, #0
     cb6:	bf18      	it	ne
     cb8:	2001      	movne	r0, #1
     cba:	223b      	movs	r2, #59	; 0x3b
     cbc:	4906      	ldr	r1, [pc, #24]	; (cd8 <timer_init+0x2c>)
     cbe:	4b07      	ldr	r3, [pc, #28]	; (cdc <timer_init+0x30>)
     cc0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     cc2:	4629      	mov	r1, r5
     cc4:	4620      	mov	r0, r4
     cc6:	4b06      	ldr	r3, [pc, #24]	; (ce0 <timer_init+0x34>)
     cc8:	4798      	blx	r3
	descr->time                           = 0;
     cca:	2000      	movs	r0, #0
     ccc:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     cce:	4b05      	ldr	r3, [pc, #20]	; (ce4 <timer_init+0x38>)
     cd0:	6023      	str	r3, [r4, #0]
}
     cd2:	bd38      	pop	{r3, r4, r5, pc}
     cd4:	2000      	movs	r0, #0
     cd6:	e7f0      	b.n	cba <timer_init+0xe>
     cd8:	00003dac 	.word	0x00003dac
     cdc:	00001289 	.word	0x00001289
     ce0:	00001719 	.word	0x00001719
     ce4:	00000c2d 	.word	0x00000c2d

00000ce8 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     ce8:	4b0f      	ldr	r3, [pc, #60]	; (d28 <_usb_d_find_ep+0x40>)
     cea:	7859      	ldrb	r1, [r3, #1]
     cec:	4288      	cmp	r0, r1
     cee:	d018      	beq.n	d22 <_usb_d_find_ep+0x3a>
{
     cf0:	b430      	push	{r4, r5}
     cf2:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     cf4:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     cf6:	f000 050f 	and.w	r5, r0, #15
     cfa:	e007      	b.n	d0c <_usb_d_find_ep+0x24>
     cfc:	3301      	adds	r3, #1
     cfe:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     d00:	2b04      	cmp	r3, #4
     d02:	d009      	beq.n	d18 <_usb_d_find_ep+0x30>
     d04:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     d06:	7851      	ldrb	r1, [r2, #1]
     d08:	4281      	cmp	r1, r0
     d0a:	d007      	beq.n	d1c <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     d0c:	7814      	ldrb	r4, [r2, #0]
     d0e:	2c00      	cmp	r4, #0
     d10:	d1f4      	bne.n	cfc <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     d12:	428d      	cmp	r5, r1
     d14:	d1f2      	bne.n	cfc <_usb_d_find_ep+0x14>
     d16:	e001      	b.n	d1c <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     d18:	f04f 33ff 	mov.w	r3, #4294967295
}
     d1c:	4618      	mov	r0, r3
     d1e:	bc30      	pop	{r4, r5}
     d20:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     d22:	2300      	movs	r3, #0
}
     d24:	4618      	mov	r0, r3
     d26:	4770      	bx	lr
     d28:	200004c8 	.word	0x200004c8

00000d2c <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     d2c:	2000      	movs	r0, #0
     d2e:	4770      	bx	lr

00000d30 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     d30:	b538      	push	{r3, r4, r5, lr}
     d32:	4604      	mov	r4, r0
     d34:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     d36:	4b09      	ldr	r3, [pc, #36]	; (d5c <usb_d_cb_trans_more+0x2c>)
     d38:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     d3a:	4b09      	ldr	r3, [pc, #36]	; (d60 <usb_d_cb_trans_more+0x30>)
     d3c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     d40:	789b      	ldrb	r3, [r3, #2]
     d42:	2b03      	cmp	r3, #3
     d44:	d001      	beq.n	d4a <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     d46:	2000      	movs	r0, #0
}
     d48:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
     d4a:	4b05      	ldr	r3, [pc, #20]	; (d60 <usb_d_cb_trans_more+0x30>)
     d4c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     d50:	6983      	ldr	r3, [r0, #24]
     d52:	4629      	mov	r1, r5
     d54:	4620      	mov	r0, r4
     d56:	4798      	blx	r3
     d58:	bd38      	pop	{r3, r4, r5, pc}
     d5a:	bf00      	nop
     d5c:	00000ce9 	.word	0x00000ce9
     d60:	200004c8 	.word	0x200004c8

00000d64 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     d64:	b5f0      	push	{r4, r5, r6, r7, lr}
     d66:	b085      	sub	sp, #20
     d68:	4606      	mov	r6, r0
     d6a:	460d      	mov	r5, r1
     d6c:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     d6e:	4b4d      	ldr	r3, [pc, #308]	; (ea4 <_usb_d_cb_trans_done+0x140>)
     d70:	4798      	blx	r3
     d72:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     d74:	2d00      	cmp	r5, #0
     d76:	d15b      	bne.n	e30 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
     d78:	4a4b      	ldr	r2, [pc, #300]	; (ea8 <_usb_d_cb_trans_done+0x144>)
     d7a:	0143      	lsls	r3, r0, #5
     d7c:	18d1      	adds	r1, r2, r3
     d7e:	2000      	movs	r0, #0
     d80:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     d82:	5cd3      	ldrb	r3, [r2, r3]
     d84:	b173      	cbz	r3, da4 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     d86:	4b48      	ldr	r3, [pc, #288]	; (ea8 <_usb_d_cb_trans_done+0x144>)
     d88:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     d8c:	2201      	movs	r2, #1
     d8e:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     d90:	4845      	ldr	r0, [pc, #276]	; (ea8 <_usb_d_cb_trans_done+0x144>)
     d92:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     d96:	69c3      	ldr	r3, [r0, #28]
     d98:	463a      	mov	r2, r7
     d9a:	78c1      	ldrb	r1, [r0, #3]
     d9c:	4630      	mov	r0, r6
     d9e:	4798      	blx	r3
}
     da0:	b005      	add	sp, #20
     da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     da4:	788b      	ldrb	r3, [r1, #2]
     da6:	2b03      	cmp	r3, #3
     da8:	d00b      	beq.n	dc2 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     daa:	483f      	ldr	r0, [pc, #252]	; (ea8 <_usb_d_cb_trans_done+0x144>)
     dac:	eb00 1244 	add.w	r2, r0, r4, lsl #5
     db0:	4614      	mov	r4, r2
     db2:	69d3      	ldr	r3, [r2, #28]
     db4:	320c      	adds	r2, #12
     db6:	2100      	movs	r1, #0
     db8:	7860      	ldrb	r0, [r4, #1]
     dba:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     dbc:	2302      	movs	r3, #2
     dbe:	70a3      	strb	r3, [r4, #2]
     dc0:	e7ee      	b.n	da0 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     dc2:	460b      	mov	r3, r1
     dc4:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     dc8:	460a      	mov	r2, r1
     dca:	69ce      	ldr	r6, [r1, #28]
     dcc:	320c      	adds	r2, #12
     dce:	2101      	movs	r1, #1
     dd0:	7858      	ldrb	r0, [r3, #1]
     dd2:	47b0      	blx	r6
		if (err) {
     dd4:	b1a0      	cbz	r0, e00 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     dd6:	4b34      	ldr	r3, [pc, #208]	; (ea8 <_usb_d_cb_trans_done+0x144>)
     dd8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     ddc:	2205      	movs	r2, #5
     dde:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     de0:	2202      	movs	r2, #2
     de2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     de4:	2d00      	cmp	r5, #0
     de6:	db09      	blt.n	dfc <_usb_d_cb_trans_done+0x98>
     de8:	482f      	ldr	r0, [pc, #188]	; (ea8 <_usb_d_cb_trans_done+0x144>)
     dea:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     dee:	7840      	ldrb	r0, [r0, #1]
     df0:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     df4:	2101      	movs	r1, #1
     df6:	4b2d      	ldr	r3, [pc, #180]	; (eac <_usb_d_cb_trans_done+0x148>)
     df8:	4798      	blx	r3
     dfa:	e7d1      	b.n	da0 <_usb_d_cb_trans_done+0x3c>
     dfc:	7858      	ldrb	r0, [r3, #1]
     dfe:	e7f9      	b.n	df4 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     e00:	4829      	ldr	r0, [pc, #164]	; (ea8 <_usb_d_cb_trans_done+0x144>)
     e02:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     e06:	2304      	movs	r3, #4
     e08:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     e0a:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
     e0c:	2200      	movs	r2, #0
     e0e:	9201      	str	r2, [sp, #4]
     e10:	9202      	str	r2, [sp, #8]
     e12:	4295      	cmp	r5, r2
     e14:	bfac      	ite	ge
     e16:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
     e1a:	f003 030f 	andlt.w	r3, r3, #15
     e1e:	f88d 300c 	strb.w	r3, [sp, #12]
     e22:	2301      	movs	r3, #1
     e24:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     e28:	a801      	add	r0, sp, #4
     e2a:	4b21      	ldr	r3, [pc, #132]	; (eb0 <_usb_d_cb_trans_done+0x14c>)
     e2c:	4798      	blx	r3
     e2e:	e7b7      	b.n	da0 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
     e30:	2d01      	cmp	r5, #1
     e32:	d00a      	beq.n	e4a <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
     e34:	2d02      	cmp	r5, #2
     e36:	d01c      	beq.n	e72 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
     e38:	2d03      	cmp	r5, #3
     e3a:	d02a      	beq.n	e92 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     e3c:	4b1a      	ldr	r3, [pc, #104]	; (ea8 <_usb_d_cb_trans_done+0x144>)
     e3e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     e42:	2206      	movs	r2, #6
     e44:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     e46:	70da      	strb	r2, [r3, #3]
     e48:	e7a2      	b.n	d90 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
     e4a:	4a17      	ldr	r2, [pc, #92]	; (ea8 <_usb_d_cb_trans_done+0x144>)
     e4c:	0143      	lsls	r3, r0, #5
     e4e:	18d1      	adds	r1, r2, r3
     e50:	2002      	movs	r0, #2
     e52:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     e54:	5cd3      	ldrb	r3, [r2, r3]
     e56:	b12b      	cbz	r3, e64 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     e58:	4b13      	ldr	r3, [pc, #76]	; (ea8 <_usb_d_cb_trans_done+0x144>)
     e5a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     e5e:	2205      	movs	r2, #5
     e60:	709a      	strb	r2, [r3, #2]
     e62:	e795      	b.n	d90 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     e64:	460b      	mov	r3, r1
     e66:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     e68:	2100      	movs	r1, #0
     e6a:	4630      	mov	r0, r6
     e6c:	4b0f      	ldr	r3, [pc, #60]	; (eac <_usb_d_cb_trans_done+0x148>)
     e6e:	4798      	blx	r3
     e70:	e78e      	b.n	d90 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     e72:	4a0d      	ldr	r2, [pc, #52]	; (ea8 <_usb_d_cb_trans_done+0x144>)
     e74:	0143      	lsls	r3, r0, #5
     e76:	18d1      	adds	r1, r2, r3
     e78:	2004      	movs	r0, #4
     e7a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     e7c:	5cd3      	ldrb	r3, [r2, r3]
     e7e:	b12b      	cbz	r3, e8c <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     e80:	4b09      	ldr	r3, [pc, #36]	; (ea8 <_usb_d_cb_trans_done+0x144>)
     e82:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     e86:	2201      	movs	r2, #1
     e88:	709a      	strb	r2, [r3, #2]
     e8a:	e781      	b.n	d90 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     e8c:	2302      	movs	r3, #2
     e8e:	708b      	strb	r3, [r1, #2]
			return;
     e90:	e786      	b.n	da0 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     e92:	4b05      	ldr	r3, [pc, #20]	; (ea8 <_usb_d_cb_trans_done+0x144>)
     e94:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     e98:	2200      	movs	r2, #0
     e9a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     e9c:	2205      	movs	r2, #5
     e9e:	70da      	strb	r2, [r3, #3]
     ea0:	e776      	b.n	d90 <_usb_d_cb_trans_done+0x2c>
     ea2:	bf00      	nop
     ea4:	00000ce9 	.word	0x00000ce9
     ea8:	200004c8 	.word	0x200004c8
     eac:	00002b09 	.word	0x00002b09
     eb0:	00002cb1 	.word	0x00002cb1

00000eb4 <usb_d_cb_trans_setup>:
{
     eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     eb8:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     eba:	4b1c      	ldr	r3, [pc, #112]	; (f2c <usb_d_cb_trans_setup+0x78>)
     ebc:	4798      	blx	r3
     ebe:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
     ec0:	4c1b      	ldr	r4, [pc, #108]	; (f30 <usb_d_cb_trans_setup+0x7c>)
     ec2:	eb04 1440 	add.w	r4, r4, r0, lsl #5
     ec6:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     ec8:	4621      	mov	r1, r4
     eca:	4628      	mov	r0, r5
     ecc:	4b19      	ldr	r3, [pc, #100]	; (f34 <usb_d_cb_trans_setup+0x80>)
     ece:	4798      	blx	r3
	if (n != 8) {
     ed0:	b2c0      	uxtb	r0, r0
     ed2:	2808      	cmp	r0, #8
     ed4:	d009      	beq.n	eea <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     ed6:	2101      	movs	r1, #1
     ed8:	4628      	mov	r0, r5
     eda:	4c17      	ldr	r4, [pc, #92]	; (f38 <usb_d_cb_trans_setup+0x84>)
     edc:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     ede:	2101      	movs	r1, #1
     ee0:	f045 0080 	orr.w	r0, r5, #128	; 0x80
     ee4:	47a0      	blx	r4
		return;
     ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     eea:	2100      	movs	r1, #0
     eec:	4628      	mov	r0, r5
     eee:	4f12      	ldr	r7, [pc, #72]	; (f38 <usb_d_cb_trans_setup+0x84>)
     ef0:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     ef2:	f045 0880 	orr.w	r8, r5, #128	; 0x80
     ef6:	2100      	movs	r1, #0
     ef8:	4640      	mov	r0, r8
     efa:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     efc:	4b0c      	ldr	r3, [pc, #48]	; (f30 <usb_d_cb_trans_setup+0x7c>)
     efe:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     f02:	2201      	movs	r2, #1
     f04:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     f06:	695b      	ldr	r3, [r3, #20]
     f08:	4621      	mov	r1, r4
     f0a:	4628      	mov	r0, r5
     f0c:	4798      	blx	r3
     f0e:	b108      	cbz	r0, f14 <usb_d_cb_trans_setup+0x60>
     f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     f14:	4b06      	ldr	r3, [pc, #24]	; (f30 <usb_d_cb_trans_setup+0x7c>)
     f16:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     f1a:	2305      	movs	r3, #5
     f1c:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     f1e:	2101      	movs	r1, #1
     f20:	4628      	mov	r0, r5
     f22:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     f24:	2101      	movs	r1, #1
     f26:	4640      	mov	r0, r8
     f28:	47b8      	blx	r7
     f2a:	e7f1      	b.n	f10 <usb_d_cb_trans_setup+0x5c>
     f2c:	00000ce9 	.word	0x00000ce9
     f30:	200004c8 	.word	0x200004c8
     f34:	00002c51 	.word	0x00002c51
     f38:	00002b09 	.word	0x00002b09

00000f3c <usb_d_init>:

int32_t usb_d_init(void)
{
     f3c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     f3e:	4b11      	ldr	r3, [pc, #68]	; (f84 <usb_d_init+0x48>)
     f40:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     f42:	2800      	cmp	r0, #0
     f44:	db1c      	blt.n	f80 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     f46:	4c10      	ldr	r4, [pc, #64]	; (f88 <usb_d_init+0x4c>)
     f48:	2280      	movs	r2, #128	; 0x80
     f4a:	2100      	movs	r1, #0
     f4c:	4620      	mov	r0, r4
     f4e:	4b0f      	ldr	r3, [pc, #60]	; (f8c <usb_d_init+0x50>)
     f50:	4798      	blx	r3
     f52:	4623      	mov	r3, r4
     f54:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     f58:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     f5a:	4a0d      	ldr	r2, [pc, #52]	; (f90 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     f5c:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     f5e:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     f60:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     f62:	61da      	str	r2, [r3, #28]
     f64:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     f66:	4283      	cmp	r3, r0
     f68:	d1f8      	bne.n	f5c <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     f6a:	490a      	ldr	r1, [pc, #40]	; (f94 <usb_d_init+0x58>)
     f6c:	2000      	movs	r0, #0
     f6e:	4c0a      	ldr	r4, [pc, #40]	; (f98 <usb_d_init+0x5c>)
     f70:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     f72:	490a      	ldr	r1, [pc, #40]	; (f9c <usb_d_init+0x60>)
     f74:	2001      	movs	r0, #1
     f76:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     f78:	4909      	ldr	r1, [pc, #36]	; (fa0 <usb_d_init+0x64>)
     f7a:	2002      	movs	r0, #2
     f7c:	47a0      	blx	r4
	return ERR_NONE;
     f7e:	2000      	movs	r0, #0
}
     f80:	bd10      	pop	{r4, pc}
     f82:	bf00      	nop
     f84:	000024fd 	.word	0x000024fd
     f88:	200004c8 	.word	0x200004c8
     f8c:	00003ba1 	.word	0x00003ba1
     f90:	00000d2d 	.word	0x00000d2d
     f94:	00000eb5 	.word	0x00000eb5
     f98:	00002eb5 	.word	0x00002eb5
     f9c:	00000d31 	.word	0x00000d31
     fa0:	00000d65 	.word	0x00000d65

00000fa4 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     fa4:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     fa6:	4b01      	ldr	r3, [pc, #4]	; (fac <usb_d_register_callback+0x8>)
     fa8:	4798      	blx	r3
     faa:	bd08      	pop	{r3, pc}
     fac:	00002e91 	.word	0x00002e91

00000fb0 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
     fb0:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
     fb2:	4b01      	ldr	r3, [pc, #4]	; (fb8 <usb_d_enable+0x8>)
     fb4:	4798      	blx	r3
}
     fb6:	bd08      	pop	{r3, pc}
     fb8:	000025f9 	.word	0x000025f9

00000fbc <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     fbc:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
     fbe:	4b01      	ldr	r3, [pc, #4]	; (fc4 <usb_d_attach+0x8>)
     fc0:	4798      	blx	r3
     fc2:	bd08      	pop	{r3, pc}
     fc4:	00002665 	.word	0x00002665

00000fc8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     fc8:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
     fca:	4b01      	ldr	r3, [pc, #4]	; (fd0 <usb_d_set_address+0x8>)
     fcc:	4798      	blx	r3
     fce:	bd08      	pop	{r3, pc}
     fd0:	00002677 	.word	0x00002677

00000fd4 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fd6:	4606      	mov	r6, r0
     fd8:	460c      	mov	r4, r1
     fda:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     fdc:	4b0f      	ldr	r3, [pc, #60]	; (101c <usb_d_ep_init+0x48>)
     fde:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     fe0:	2800      	cmp	r0, #0
     fe2:	da14      	bge.n	100e <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     fe4:	20ff      	movs	r0, #255	; 0xff
     fe6:	4b0d      	ldr	r3, [pc, #52]	; (101c <usb_d_ep_init+0x48>)
     fe8:	4798      	blx	r3
		if (ep_index < 0) {
     fea:	1e05      	subs	r5, r0, #0
     fec:	db12      	blt.n	1014 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     fee:	463a      	mov	r2, r7
     ff0:	4621      	mov	r1, r4
     ff2:	4630      	mov	r0, r6
     ff4:	4b0a      	ldr	r3, [pc, #40]	; (1020 <usb_d_ep_init+0x4c>)
     ff6:	4798      	blx	r3
	if (rc < 0) {
     ff8:	2800      	cmp	r0, #0
     ffa:	db0d      	blt.n	1018 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     ffc:	4b09      	ldr	r3, [pc, #36]	; (1024 <usb_d_ep_init+0x50>)
     ffe:	0168      	lsls	r0, r5, #5
    1000:	181a      	adds	r2, r3, r0
    1002:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1004:	f004 0403 	and.w	r4, r4, #3
    1008:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    100a:	2000      	movs	r0, #0
    100c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    100e:	f06f 0013 	mvn.w	r0, #19
    1012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    1014:	f06f 0014 	mvn.w	r0, #20
}
    1018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    101a:	bf00      	nop
    101c:	00000ce9 	.word	0x00000ce9
    1020:	00002685 	.word	0x00002685
    1024:	200004c8 	.word	0x200004c8

00001028 <usb_d_ep0_init>:
{
    1028:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    102a:	4602      	mov	r2, r0
    102c:	2100      	movs	r1, #0
    102e:	4608      	mov	r0, r1
    1030:	4b01      	ldr	r3, [pc, #4]	; (1038 <usb_d_ep0_init+0x10>)
    1032:	4798      	blx	r3
}
    1034:	bd08      	pop	{r3, pc}
    1036:	bf00      	nop
    1038:	00000fd5 	.word	0x00000fd5

0000103c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    103c:	b538      	push	{r3, r4, r5, lr}
    103e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1040:	4b06      	ldr	r3, [pc, #24]	; (105c <usb_d_ep_deinit+0x20>)
    1042:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1044:	1e04      	subs	r4, r0, #0
    1046:	db07      	blt.n	1058 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1048:	4628      	mov	r0, r5
    104a:	4b05      	ldr	r3, [pc, #20]	; (1060 <usb_d_ep_deinit+0x24>)
    104c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    104e:	4805      	ldr	r0, [pc, #20]	; (1064 <usb_d_ep_deinit+0x28>)
    1050:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1054:	23ff      	movs	r3, #255	; 0xff
    1056:	7043      	strb	r3, [r0, #1]
    1058:	bd38      	pop	{r3, r4, r5, pc}
    105a:	bf00      	nop
    105c:	00000ce9 	.word	0x00000ce9
    1060:	0000279d 	.word	0x0000279d
    1064:	200004c8 	.word	0x200004c8

00001068 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1068:	b538      	push	{r3, r4, r5, lr}
    106a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    106c:	4b0e      	ldr	r3, [pc, #56]	; (10a8 <usb_d_ep_enable+0x40>)
    106e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1070:	1e04      	subs	r4, r0, #0
    1072:	db16      	blt.n	10a2 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1074:	0163      	lsls	r3, r4, #5
    1076:	4a0d      	ldr	r2, [pc, #52]	; (10ac <usb_d_ep_enable+0x44>)
    1078:	5cd3      	ldrb	r3, [r2, r3]
    107a:	2b00      	cmp	r3, #0
    107c:	bf0c      	ite	eq
    107e:	2202      	moveq	r2, #2
    1080:	2201      	movne	r2, #1
    1082:	4b0a      	ldr	r3, [pc, #40]	; (10ac <usb_d_ep_enable+0x44>)
    1084:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1088:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    108a:	4628      	mov	r0, r5
    108c:	4b08      	ldr	r3, [pc, #32]	; (10b0 <usb_d_ep_enable+0x48>)
    108e:	4798      	blx	r3
	if (rc < 0) {
    1090:	2800      	cmp	r0, #0
    1092:	db00      	blt.n	1096 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1094:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1096:	4b05      	ldr	r3, [pc, #20]	; (10ac <usb_d_ep_enable+0x44>)
    1098:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    109c:	2300      	movs	r3, #0
    109e:	70a3      	strb	r3, [r4, #2]
    10a0:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    10a2:	f06f 0011 	mvn.w	r0, #17
    10a6:	e7f5      	b.n	1094 <usb_d_ep_enable+0x2c>
    10a8:	00000ce9 	.word	0x00000ce9
    10ac:	200004c8 	.word	0x200004c8
    10b0:	00002861 	.word	0x00002861

000010b4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    10b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    10b8:	b086      	sub	sp, #24
    10ba:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    10bc:	7a07      	ldrb	r7, [r0, #8]
    10be:	4638      	mov	r0, r7
    10c0:	4b3f      	ldr	r3, [pc, #252]	; (11c0 <usb_d_ep_transfer+0x10c>)
    10c2:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    10c4:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    10c6:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    10ca:	1e06      	subs	r6, r0, #0
    10cc:	db72      	blt.n	11b4 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    10ce:	a804      	add	r0, sp, #16
    10d0:	4b3c      	ldr	r3, [pc, #240]	; (11c4 <usb_d_ep_transfer+0x110>)
    10d2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    10d4:	4b3c      	ldr	r3, [pc, #240]	; (11c8 <usb_d_ep_transfer+0x114>)
    10d6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    10da:	789b      	ldrb	r3, [r3, #2]
    10dc:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    10e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    10e4:	b2db      	uxtb	r3, r3
    10e6:	2b01      	cmp	r3, #1
    10e8:	d011      	beq.n	110e <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    10ea:	a804      	add	r0, sp, #16
    10ec:	4b37      	ldr	r3, [pc, #220]	; (11cc <usb_d_ep_transfer+0x118>)
    10ee:	4798      	blx	r3
		switch (state) {
    10f0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    10f4:	b2db      	uxtb	r3, r3
    10f6:	2b05      	cmp	r3, #5
    10f8:	d05f      	beq.n	11ba <usb_d_ep_transfer+0x106>
    10fa:	2b06      	cmp	r3, #6
    10fc:	d023      	beq.n	1146 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    10fe:	2b00      	cmp	r3, #0
    1100:	bf0c      	ite	eq
    1102:	f06f 0012 	mvneq.w	r0, #18
    1106:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    1108:	b006      	add	sp, #24
    110a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    110e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 11c8 <usb_d_ep_transfer+0x114>
    1112:	ea4f 1946 	mov.w	r9, r6, lsl #5
    1116:	eb0a 0309 	add.w	r3, sl, r9
    111a:	2203      	movs	r2, #3
    111c:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    111e:	a804      	add	r0, sp, #16
    1120:	4b2a      	ldr	r3, [pc, #168]	; (11cc <usb_d_ep_transfer+0x118>)
    1122:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1124:	f81a 3009 	ldrb.w	r3, [sl, r9]
    1128:	b183      	cbz	r3, 114c <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    112a:	7a22      	ldrb	r2, [r4, #8]
    112c:	3500      	adds	r5, #0
    112e:	bf18      	it	ne
    1130:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    1132:	6823      	ldr	r3, [r4, #0]
    1134:	9301      	str	r3, [sp, #4]
    1136:	f8cd 8008 	str.w	r8, [sp, #8]
    113a:	f017 0f80 	tst.w	r7, #128	; 0x80
    113e:	d119      	bne.n	1174 <usb_d_ep_transfer+0xc0>
    1140:	f002 030f 	and.w	r3, r2, #15
    1144:	e018      	b.n	1178 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    1146:	f06f 000f 	mvn.w	r0, #15
    114a:	e7dd      	b.n	1108 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    114c:	4b1e      	ldr	r3, [pc, #120]	; (11c8 <usb_d_ep_transfer+0x114>)
    114e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1152:	7cda      	ldrb	r2, [r3, #19]
    1154:	7c9d      	ldrb	r5, [r3, #18]
    1156:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    115a:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    115c:	b9a5      	cbnz	r5, 1188 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    115e:	4b1a      	ldr	r3, [pc, #104]	; (11c8 <usb_d_ep_transfer+0x114>)
    1160:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1164:	2304      	movs	r3, #4
    1166:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    1168:	2300      	movs	r3, #0
			zlp                 = true;
    116a:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    116c:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    116e:	6821      	ldr	r1, [r4, #0]
    1170:	9101      	str	r1, [sp, #4]
    1172:	9302      	str	r3, [sp, #8]
    1174:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    1178:	f88d 300c 	strb.w	r3, [sp, #12]
    117c:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1180:	a801      	add	r0, sp, #4
    1182:	4b13      	ldr	r3, [pc, #76]	; (11d0 <usb_d_ep_transfer+0x11c>)
    1184:	4798      	blx	r3
	return rc;
    1186:	e7bf      	b.n	1108 <usb_d_ep_transfer+0x54>
    1188:	4643      	mov	r3, r8
    118a:	45a8      	cmp	r8, r5
    118c:	bf28      	it	cs
    118e:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1190:	4a0d      	ldr	r2, [pc, #52]	; (11c8 <usb_d_ep_transfer+0x114>)
    1192:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    1196:	f996 200c 	ldrsb.w	r2, [r6, #12]
    119a:	2a00      	cmp	r2, #0
    119c:	db05      	blt.n	11aa <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    119e:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    11a0:	6821      	ldr	r1, [r4, #0]
    11a2:	9101      	str	r1, [sp, #4]
    11a4:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    11a6:	2500      	movs	r5, #0
    11a8:	e7ca      	b.n	1140 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    11aa:	429d      	cmp	r5, r3
    11ac:	bf94      	ite	ls
    11ae:	2500      	movls	r5, #0
    11b0:	2501      	movhi	r5, #1
    11b2:	e7db      	b.n	116c <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    11b4:	f06f 0011 	mvn.w	r0, #17
    11b8:	e7a6      	b.n	1108 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    11ba:	2002      	movs	r0, #2
    11bc:	e7a4      	b.n	1108 <usb_d_ep_transfer+0x54>
    11be:	bf00      	nop
    11c0:	00000ce9 	.word	0x00000ce9
    11c4:	00002f51 	.word	0x00002f51
    11c8:	200004c8 	.word	0x200004c8
    11cc:	00002f5f 	.word	0x00002f5f
    11d0:	00002cb1 	.word	0x00002cb1

000011d4 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    11d4:	b538      	push	{r3, r4, r5, lr}
    11d6:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    11d8:	b141      	cbz	r1, 11ec <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    11da:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    11dc:	bf0c      	ite	eq
    11de:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    11e0:	2102      	movne	r1, #2
    11e2:	4b13      	ldr	r3, [pc, #76]	; (1230 <usb_d_ep_halt+0x5c>)
    11e4:	4798      	blx	r3
    11e6:	4603      	mov	r3, r0
	}
}
    11e8:	4618      	mov	r0, r3
    11ea:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    11ec:	4b11      	ldr	r3, [pc, #68]	; (1234 <usb_d_ep_halt+0x60>)
    11ee:	4798      	blx	r3
	if (ep_index < 0) {
    11f0:	1e05      	subs	r5, r0, #0
    11f2:	db19      	blt.n	1228 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    11f4:	2102      	movs	r1, #2
    11f6:	4620      	mov	r0, r4
    11f8:	4b0d      	ldr	r3, [pc, #52]	; (1230 <usb_d_ep_halt+0x5c>)
    11fa:	4798      	blx	r3
    11fc:	4603      	mov	r3, r0
    11fe:	2800      	cmp	r0, #0
    1200:	d0f2      	beq.n	11e8 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1202:	2100      	movs	r1, #0
    1204:	4620      	mov	r0, r4
    1206:	4b0a      	ldr	r3, [pc, #40]	; (1230 <usb_d_ep_halt+0x5c>)
    1208:	4798      	blx	r3
		if (rc < 0) {
    120a:	1e03      	subs	r3, r0, #0
    120c:	dbec      	blt.n	11e8 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    120e:	4b0a      	ldr	r3, [pc, #40]	; (1238 <usb_d_ep_halt+0x64>)
    1210:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1214:	2201      	movs	r2, #1
    1216:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1218:	2103      	movs	r1, #3
    121a:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    121c:	69db      	ldr	r3, [r3, #28]
    121e:	2200      	movs	r2, #0
    1220:	4620      	mov	r0, r4
    1222:	4798      	blx	r3
	return ERR_NONE;
    1224:	2300      	movs	r3, #0
    1226:	e7df      	b.n	11e8 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    1228:	f06f 0311 	mvn.w	r3, #17
    122c:	e7dc      	b.n	11e8 <usb_d_ep_halt+0x14>
    122e:	bf00      	nop
    1230:	00002b09 	.word	0x00002b09
    1234:	00000ce9 	.word	0x00000ce9
    1238:	200004c8 	.word	0x200004c8

0000123c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    123c:	b538      	push	{r3, r4, r5, lr}
    123e:	460d      	mov	r5, r1
    1240:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1242:	4b0e      	ldr	r3, [pc, #56]	; (127c <usb_d_ep_register_callback+0x40>)
    1244:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1246:	4b0e      	ldr	r3, [pc, #56]	; (1280 <usb_d_ep_register_callback+0x44>)
    1248:	2c00      	cmp	r4, #0
    124a:	bf08      	it	eq
    124c:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    124e:	2800      	cmp	r0, #0
    1250:	db13      	blt.n	127a <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    1252:	2d01      	cmp	r5, #1
    1254:	d008      	beq.n	1268 <usb_d_ep_register_callback+0x2c>
    1256:	b115      	cbz	r5, 125e <usb_d_ep_register_callback+0x22>
    1258:	2d02      	cmp	r5, #2
    125a:	d00a      	beq.n	1272 <usb_d_ep_register_callback+0x36>
    125c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    125e:	4b09      	ldr	r3, [pc, #36]	; (1284 <usb_d_ep_register_callback+0x48>)
    1260:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1264:	6144      	str	r4, [r0, #20]
		break;
    1266:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1268:	4b06      	ldr	r3, [pc, #24]	; (1284 <usb_d_ep_register_callback+0x48>)
    126a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    126e:	6184      	str	r4, [r0, #24]
		break;
    1270:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1272:	4b04      	ldr	r3, [pc, #16]	; (1284 <usb_d_ep_register_callback+0x48>)
    1274:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1278:	61c4      	str	r4, [r0, #28]
    127a:	bd38      	pop	{r3, r4, r5, pc}
    127c:	00000ce9 	.word	0x00000ce9
    1280:	00000d2d 	.word	0x00000d2d
    1284:	200004c8 	.word	0x200004c8

00001288 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1288:	b900      	cbnz	r0, 128c <assert+0x4>
		__asm("BKPT #0");
    128a:	be00      	bkpt	0x0000
    128c:	4770      	bx	lr

0000128e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    128e:	6803      	ldr	r3, [r0, #0]
    1290:	b14b      	cbz	r3, 12a6 <is_list_element+0x18>
		if (it == element) {
    1292:	428b      	cmp	r3, r1
    1294:	d009      	beq.n	12aa <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1296:	681b      	ldr	r3, [r3, #0]
    1298:	b11b      	cbz	r3, 12a2 <is_list_element+0x14>
		if (it == element) {
    129a:	4299      	cmp	r1, r3
    129c:	d1fb      	bne.n	1296 <is_list_element+0x8>
			return true;
    129e:	2001      	movs	r0, #1
		}
	}

	return false;
}
    12a0:	4770      	bx	lr
	return false;
    12a2:	2000      	movs	r0, #0
    12a4:	4770      	bx	lr
    12a6:	2000      	movs	r0, #0
    12a8:	4770      	bx	lr
			return true;
    12aa:	2001      	movs	r0, #1
    12ac:	4770      	bx	lr
	...

000012b0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    12b0:	b538      	push	{r3, r4, r5, lr}
    12b2:	4604      	mov	r4, r0
    12b4:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    12b6:	4b06      	ldr	r3, [pc, #24]	; (12d0 <list_insert_as_head+0x20>)
    12b8:	4798      	blx	r3
    12ba:	f080 0001 	eor.w	r0, r0, #1
    12be:	2239      	movs	r2, #57	; 0x39
    12c0:	4904      	ldr	r1, [pc, #16]	; (12d4 <list_insert_as_head+0x24>)
    12c2:	b2c0      	uxtb	r0, r0
    12c4:	4b04      	ldr	r3, [pc, #16]	; (12d8 <list_insert_as_head+0x28>)
    12c6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    12c8:	6823      	ldr	r3, [r4, #0]
    12ca:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    12cc:	6025      	str	r5, [r4, #0]
    12ce:	bd38      	pop	{r3, r4, r5, pc}
    12d0:	0000128f 	.word	0x0000128f
    12d4:	00003dc4 	.word	0x00003dc4
    12d8:	00001289 	.word	0x00001289

000012dc <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    12dc:	6803      	ldr	r3, [r0, #0]
    12de:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    12e0:	6001      	str	r1, [r0, #0]
    12e2:	4770      	bx	lr

000012e4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    12e4:	b570      	push	{r4, r5, r6, lr}
    12e6:	4605      	mov	r5, r0
    12e8:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    12ea:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    12ec:	4b0a      	ldr	r3, [pc, #40]	; (1318 <list_insert_at_end+0x34>)
    12ee:	4798      	blx	r3
    12f0:	f080 0001 	eor.w	r0, r0, #1
    12f4:	224f      	movs	r2, #79	; 0x4f
    12f6:	4909      	ldr	r1, [pc, #36]	; (131c <list_insert_at_end+0x38>)
    12f8:	b2c0      	uxtb	r0, r0
    12fa:	4b09      	ldr	r3, [pc, #36]	; (1320 <list_insert_at_end+0x3c>)
    12fc:	4798      	blx	r3

	if (!list->head) {
    12fe:	682b      	ldr	r3, [r5, #0]
    1300:	b91b      	cbnz	r3, 130a <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    1302:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    1304:	6033      	str	r3, [r6, #0]
		return;
    1306:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    1308:	461c      	mov	r4, r3
	while (it->next) {
    130a:	6823      	ldr	r3, [r4, #0]
    130c:	2b00      	cmp	r3, #0
    130e:	d1fb      	bne.n	1308 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    1310:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1312:	6033      	str	r3, [r6, #0]
    1314:	bd70      	pop	{r4, r5, r6, pc}
    1316:	bf00      	nop
    1318:	0000128f 	.word	0x0000128f
    131c:	00003dc4 	.word	0x00003dc4
    1320:	00001289 	.word	0x00001289

00001324 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1324:	6803      	ldr	r3, [r0, #0]
    1326:	b10b      	cbz	r3, 132c <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1328:	681a      	ldr	r2, [r3, #0]
    132a:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    132c:	4618      	mov	r0, r3
    132e:	4770      	bx	lr

00001330 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    1330:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    1332:	f013 0f01 	tst.w	r3, #1
    1336:	d11b      	bne.n	1370 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1338:	6b03      	ldr	r3, [r0, #48]	; 0x30
    133a:	f013 0f03 	tst.w	r3, #3
    133e:	d1fb      	bne.n	1338 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1340:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    1342:	f013 0f02 	tst.w	r3, #2
    1346:	d00d      	beq.n	1364 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    1348:	8803      	ldrh	r3, [r0, #0]
    134a:	f023 0302 	bic.w	r3, r3, #2
    134e:	041b      	lsls	r3, r3, #16
    1350:	0c1b      	lsrs	r3, r3, #16
    1352:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1354:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1356:	f013 0f03 	tst.w	r3, #3
    135a:	d1fb      	bne.n	1354 <_adc_init+0x24>
    135c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    135e:	f013 0f02 	tst.w	r3, #2
    1362:	d1fb      	bne.n	135c <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1364:	2301      	movs	r3, #1
    1366:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1368:	6b03      	ldr	r3, [r0, #48]	; 0x30
    136a:	f013 0f03 	tst.w	r3, #3
    136e:	d1fb      	bne.n	1368 <_adc_init+0x38>
    1370:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1372:	f013 0f01 	tst.w	r3, #1
    1376:	d1fb      	bne.n	1370 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1378:	2316      	movs	r3, #22
    137a:	4a37      	ldr	r2, [pc, #220]	; (1458 <_adc_init+0x128>)
    137c:	fb03 2301 	mla	r3, r3, r1, r2
    1380:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1382:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1384:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1386:	f3c3 030b 	ubfx	r3, r3, #0, #12
    138a:	2b00      	cmp	r3, #0
    138c:	d1fa      	bne.n	1384 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    138e:	2316      	movs	r3, #22
    1390:	4a31      	ldr	r2, [pc, #196]	; (1458 <_adc_init+0x128>)
    1392:	fb03 2301 	mla	r3, r3, r1, r2
    1396:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1398:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    139a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    139c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    13a0:	2b00      	cmp	r3, #0
    13a2:	d1fa      	bne.n	139a <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    13a4:	2316      	movs	r3, #22
    13a6:	4a2c      	ldr	r2, [pc, #176]	; (1458 <_adc_init+0x128>)
    13a8:	fb03 2301 	mla	r3, r3, r1, r2
    13ac:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    13ae:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    13b0:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    13b2:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    13ba:	2b00      	cmp	r3, #0
    13bc:	d1fa      	bne.n	13b4 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    13be:	2316      	movs	r3, #22
    13c0:	4a25      	ldr	r2, [pc, #148]	; (1458 <_adc_init+0x128>)
    13c2:	fb03 2301 	mla	r3, r3, r1, r2
    13c6:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    13c8:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    13d0:	2b00      	cmp	r3, #0
    13d2:	d1fa      	bne.n	13ca <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    13d4:	2316      	movs	r3, #22
    13d6:	4a20      	ldr	r2, [pc, #128]	; (1458 <_adc_init+0x128>)
    13d8:	fb03 2301 	mla	r3, r3, r1, r2
    13dc:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    13de:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    13e6:	2b00      	cmp	r3, #0
    13e8:	d1fa      	bne.n	13e0 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    13ea:	2316      	movs	r3, #22
    13ec:	4a1a      	ldr	r2, [pc, #104]	; (1458 <_adc_init+0x128>)
    13ee:	fb03 2301 	mla	r3, r3, r1, r2
    13f2:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    13f4:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13f8:	f013 0f80 	tst.w	r3, #128	; 0x80
    13fc:	d1fb      	bne.n	13f6 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    13fe:	2316      	movs	r3, #22
    1400:	4a15      	ldr	r2, [pc, #84]	; (1458 <_adc_init+0x128>)
    1402:	fb03 2301 	mla	r3, r3, r1, r2
    1406:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1408:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    140a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    140c:	f413 7f80 	tst.w	r3, #256	; 0x100
    1410:	d1fb      	bne.n	140a <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1412:	2316      	movs	r3, #22
    1414:	4a10      	ldr	r2, [pc, #64]	; (1458 <_adc_init+0x128>)
    1416:	fb03 2301 	mla	r3, r3, r1, r2
    141a:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    141c:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    141e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1420:	f413 7f00 	tst.w	r3, #512	; 0x200
    1424:	d1fb      	bne.n	141e <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1426:	2316      	movs	r3, #22
    1428:	4a0b      	ldr	r2, [pc, #44]	; (1458 <_adc_init+0x128>)
    142a:	fb03 2301 	mla	r3, r3, r1, r2
    142e:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1430:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1432:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1434:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1438:	d1fb      	bne.n	1432 <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    143a:	2216      	movs	r2, #22
    143c:	4b06      	ldr	r3, [pc, #24]	; (1458 <_adc_init+0x128>)
    143e:	fb02 3101 	mla	r1, r2, r1, r3
    1442:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1444:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1446:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1448:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    144a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    144c:	f013 0f03 	tst.w	r3, #3
    1450:	d1fb      	bne.n	144a <_adc_init+0x11a>

	return ERR_NONE;
}
    1452:	2000      	movs	r0, #0
    1454:	4770      	bx	lr
    1456:	bf00      	nop
    1458:	00003de4 	.word	0x00003de4

0000145c <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    145c:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1460:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
		if (_adcs[i].number == n) {
    1464:	f3c0 2087 	ubfx	r0, r0, #10, #8
    1468:	b138      	cbz	r0, 147a <_adc_get_regs+0x1e>
{
    146a:	b508      	push	{r3, lr}
	ASSERT(false);
    146c:	2288      	movs	r2, #136	; 0x88
    146e:	4904      	ldr	r1, [pc, #16]	; (1480 <_adc_get_regs+0x24>)
    1470:	2000      	movs	r0, #0
    1472:	4b04      	ldr	r3, [pc, #16]	; (1484 <_adc_get_regs+0x28>)
    1474:	4798      	blx	r3
}
    1476:	2000      	movs	r0, #0
    1478:	bd08      	pop	{r3, pc}
    147a:	2000      	movs	r0, #0
    147c:	4770      	bx	lr
    147e:	bf00      	nop
    1480:	00003dfc 	.word	0x00003dfc
    1484:	00001289 	.word	0x00001289

00001488 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1488:	b538      	push	{r3, r4, r5, lr}
    148a:	460c      	mov	r4, r1
	ASSERT(device);
    148c:	4605      	mov	r5, r0
    148e:	22ce      	movs	r2, #206	; 0xce
    1490:	4907      	ldr	r1, [pc, #28]	; (14b0 <_adc_sync_init+0x28>)
    1492:	3000      	adds	r0, #0
    1494:	bf18      	it	ne
    1496:	2001      	movne	r0, #1
    1498:	4b06      	ldr	r3, [pc, #24]	; (14b4 <_adc_sync_init+0x2c>)
    149a:	4798      	blx	r3

	device->hw = hw;
    149c:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    149e:	4620      	mov	r0, r4
    14a0:	4b05      	ldr	r3, [pc, #20]	; (14b8 <_adc_sync_init+0x30>)
    14a2:	4798      	blx	r3
    14a4:	4601      	mov	r1, r0
    14a6:	4620      	mov	r0, r4
    14a8:	4b04      	ldr	r3, [pc, #16]	; (14bc <_adc_sync_init+0x34>)
    14aa:	4798      	blx	r3
}
    14ac:	bd38      	pop	{r3, r4, r5, pc}
    14ae:	bf00      	nop
    14b0:	00003dfc 	.word	0x00003dfc
    14b4:	00001289 	.word	0x00001289
    14b8:	0000145d 	.word	0x0000145d
    14bc:	00001331 	.word	0x00001331

000014c0 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    14c0:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    14c4:	fb03 f000 	mul.w	r0, r3, r0
    14c8:	4770      	bx	lr
	...

000014cc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    14cc:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    14ce:	4a11      	ldr	r2, [pc, #68]	; (1514 <_init_chip+0x48>)
    14d0:	8813      	ldrh	r3, [r2, #0]
    14d2:	b29b      	uxth	r3, r3
    14d4:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    14d6:	4b10      	ldr	r3, [pc, #64]	; (1518 <_init_chip+0x4c>)
    14d8:	4798      	blx	r3
	_oscctrl_init_sources();
    14da:	4b10      	ldr	r3, [pc, #64]	; (151c <_init_chip+0x50>)
    14dc:	4798      	blx	r3
	_mclk_init();
    14de:	4b10      	ldr	r3, [pc, #64]	; (1520 <_init_chip+0x54>)
    14e0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    14e2:	4b10      	ldr	r3, [pc, #64]	; (1524 <_init_chip+0x58>)
    14e4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    14e6:	f640 70ff 	movw	r0, #4095	; 0xfff
    14ea:	4b0f      	ldr	r3, [pc, #60]	; (1528 <_init_chip+0x5c>)
    14ec:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    14ee:	4b0f      	ldr	r3, [pc, #60]	; (152c <_init_chip+0x60>)
    14f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    14f2:	62da      	str	r2, [r3, #44]	; 0x2c
    14f4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    14f8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    14fc:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    1500:	f042 02ef 	orr.w	r2, r2, #239	; 0xef
    1504:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    1508:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    150c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    1510:	bd08      	pop	{r3, pc}
    1512:	bf00      	nop
    1514:	41004000 	.word	0x41004000
    1518:	000015f5 	.word	0x000015f5
    151c:	00001615 	.word	0x00001615
    1520:	000015e9 	.word	0x000015e9
    1524:	00001631 	.word	0x00001631
    1528:	0000158d 	.word	0x0000158d
    152c:	41008000 	.word	0x41008000

00001530 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1530:	b430      	push	{r4, r5}
    1532:	4814      	ldr	r0, [pc, #80]	; (1584 <_event_system_init+0x54>)
    1534:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1538:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    153a:	4c13      	ldr	r4, [pc, #76]	; (1588 <_event_system_init+0x58>)
    153c:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    153e:	f813 1b01 	ldrb.w	r1, [r3], #1
    1542:	3248      	adds	r2, #72	; 0x48
    1544:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1548:	42ab      	cmp	r3, r5
    154a:	d1f7      	bne.n	153c <_event_system_init+0xc>
    154c:	480d      	ldr	r0, [pc, #52]	; (1584 <_event_system_init+0x54>)
    154e:	f100 0442 	add.w	r4, r0, #66	; 0x42
    1552:	3080      	adds	r0, #128	; 0x80
    1554:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1556:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    155a:	00ca      	lsls	r2, r1, #3
    155c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1560:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1564:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1566:	f850 3f04 	ldr.w	r3, [r0, #4]!
    156a:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    156c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1570:	43db      	mvns	r3, r3
    1572:	b2db      	uxtb	r3, r3
    1574:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    1578:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    157a:	2920      	cmp	r1, #32
    157c:	d1eb      	bne.n	1556 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    157e:	2000      	movs	r0, #0
    1580:	bc30      	pop	{r4, r5}
    1582:	4770      	bx	lr
    1584:	00003e14 	.word	0x00003e14
    1588:	4100e000 	.word	0x4100e000

0000158c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    158c:	f010 0f01 	tst.w	r0, #1
    1590:	d008      	beq.n	15a4 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1592:	4a11      	ldr	r2, [pc, #68]	; (15d8 <_gclk_init_generators_by_fref+0x4c>)
    1594:	4b11      	ldr	r3, [pc, #68]	; (15dc <_gclk_init_generators_by_fref+0x50>)
    1596:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1598:	4619      	mov	r1, r3
    159a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    159e:	684b      	ldr	r3, [r1, #4]
    15a0:	4213      	tst	r3, r2
    15a2:	d1fc      	bne.n	159e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    15a4:	f010 0f08 	tst.w	r0, #8
    15a8:	d008      	beq.n	15bc <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    15aa:	4a0d      	ldr	r2, [pc, #52]	; (15e0 <_gclk_init_generators_by_fref+0x54>)
    15ac:	4b0b      	ldr	r3, [pc, #44]	; (15dc <_gclk_init_generators_by_fref+0x50>)
    15ae:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15b0:	4619      	mov	r1, r3
    15b2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    15b6:	684b      	ldr	r3, [r1, #4]
    15b8:	4213      	tst	r3, r2
    15ba:	d1fc      	bne.n	15b6 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    15bc:	f010 0f10 	tst.w	r0, #16
    15c0:	d008      	beq.n	15d4 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    15c2:	4a08      	ldr	r2, [pc, #32]	; (15e4 <_gclk_init_generators_by_fref+0x58>)
    15c4:	4b05      	ldr	r3, [pc, #20]	; (15dc <_gclk_init_generators_by_fref+0x50>)
    15c6:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15c8:	4619      	mov	r1, r3
    15ca:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    15ce:	684b      	ldr	r3, [r1, #4]
    15d0:	4213      	tst	r3, r2
    15d2:	d1fc      	bne.n	15ce <_gclk_init_generators_by_fref+0x42>
    15d4:	4770      	bx	lr
    15d6:	bf00      	nop
    15d8:	00010101 	.word	0x00010101
    15dc:	40001c00 	.word	0x40001c00
    15e0:	00010105 	.word	0x00010105
    15e4:	00010106 	.word	0x00010106

000015e8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    15e8:	2201      	movs	r2, #1
    15ea:	4b01      	ldr	r3, [pc, #4]	; (15f0 <_mclk_init+0x8>)
    15ec:	715a      	strb	r2, [r3, #5]
    15ee:	4770      	bx	lr
    15f0:	40000800 	.word	0x40000800

000015f4 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    15f4:	4b06      	ldr	r3, [pc, #24]	; (1610 <_osc32kctrl_init_sources+0x1c>)
    15f6:	f242 028e 	movw	r2, #8334	; 0x208e
    15fa:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    15fc:	2200      	movs	r2, #0
    15fe:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1600:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1602:	69d9      	ldr	r1, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1604:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1608:	61d9      	str	r1, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    160a:	741a      	strb	r2, [r3, #16]
    160c:	4770      	bx	lr
    160e:	bf00      	nop
    1610:	40001400 	.word	0x40001400

00001614 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1614:	4a04      	ldr	r2, [pc, #16]	; (1628 <_oscctrl_init_sources+0x14>)
    1616:	4b05      	ldr	r3, [pc, #20]	; (162c <_oscctrl_init_sources+0x18>)
    1618:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    161a:	461a      	mov	r2, r3
    161c:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    161e:	f013 0f02 	tst.w	r3, #2
    1622:	d0fb      	beq.n	161c <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1624:	4770      	bx	lr
    1626:	bf00      	nop
    1628:	03002606 	.word	0x03002606
    162c:	40001000 	.word	0x40001000

00001630 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1630:	4a36      	ldr	r2, [pc, #216]	; (170c <_oscctrl_init_referenced_generators+0xdc>)
    1632:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1634:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1638:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    163c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    163e:	4611      	mov	r1, r2
    1640:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1644:	684b      	ldr	r3, [r1, #4]
    1646:	4213      	tst	r3, r2
    1648:	d1fc      	bne.n	1644 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    164a:	4a30      	ldr	r2, [pc, #192]	; (170c <_oscctrl_init_referenced_generators+0xdc>)
    164c:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    164e:	f013 0f04 	tst.w	r3, #4
    1652:	d1fb      	bne.n	164c <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1654:	4b2e      	ldr	r3, [pc, #184]	; (1710 <_oscctrl_init_referenced_generators+0xe0>)
    1656:	2200      	movs	r2, #0
    1658:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    165a:	4a2e      	ldr	r2, [pc, #184]	; (1714 <_oscctrl_init_referenced_generators+0xe4>)
    165c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    165e:	461a      	mov	r2, r3
    1660:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1664:	f013 0f10 	tst.w	r3, #16
    1668:	d1fa      	bne.n	1660 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    166a:	2200      	movs	r2, #0
    166c:	4b28      	ldr	r3, [pc, #160]	; (1710 <_oscctrl_init_referenced_generators+0xe0>)
    166e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1672:	461a      	mov	r2, r3
    1674:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1678:	f013 0f04 	tst.w	r3, #4
    167c:	d1fa      	bne.n	1674 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    167e:	2202      	movs	r2, #2
    1680:	4b23      	ldr	r3, [pc, #140]	; (1710 <_oscctrl_init_referenced_generators+0xe0>)
    1682:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1684:	461a      	mov	r2, r3
    1686:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    168a:	f013 0f02 	tst.w	r3, #2
    168e:	d1fa      	bne.n	1686 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1690:	4b1f      	ldr	r3, [pc, #124]	; (1710 <_oscctrl_init_referenced_generators+0xe0>)
    1692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1694:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1696:	461a      	mov	r2, r3
    1698:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    169c:	f013 0f08 	tst.w	r3, #8
    16a0:	d1fa      	bne.n	1698 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    16a2:	2219      	movs	r2, #25
    16a4:	4b1a      	ldr	r3, [pc, #104]	; (1710 <_oscctrl_init_referenced_generators+0xe0>)
    16a6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    16aa:	461a      	mov	r2, r3
    16ac:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    16b0:	f013 0f04 	tst.w	r3, #4
    16b4:	d1fa      	bne.n	16ac <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    16b6:	4b16      	ldr	r3, [pc, #88]	; (1710 <_oscctrl_init_referenced_generators+0xe0>)
    16b8:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    16bc:	f013 0f01 	tst.w	r3, #1
    16c0:	d01d      	beq.n	16fe <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    16c2:	4a13      	ldr	r2, [pc, #76]	; (1710 <_oscctrl_init_referenced_generators+0xe0>)
    16c4:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    16c6:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    16ca:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    16ce:	d1f9      	bne.n	16c4 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    16d0:	4a0e      	ldr	r2, [pc, #56]	; (170c <_oscctrl_init_referenced_generators+0xdc>)
    16d2:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    16d4:	2b00      	cmp	r3, #0
    16d6:	d1fc      	bne.n	16d2 <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    16d8:	4a0c      	ldr	r2, [pc, #48]	; (170c <_oscctrl_init_referenced_generators+0xdc>)
    16da:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    16dc:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    16e0:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    16e4:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    16e6:	4611      	mov	r1, r2
    16e8:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    16ec:	684b      	ldr	r3, [r1, #4]
    16ee:	4213      	tst	r3, r2
    16f0:	d1fc      	bne.n	16ec <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    16f2:	4a06      	ldr	r2, [pc, #24]	; (170c <_oscctrl_init_referenced_generators+0xdc>)
    16f4:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    16f6:	f013 0f04 	tst.w	r3, #4
    16fa:	d1fb      	bne.n	16f4 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    16fc:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    16fe:	4a04      	ldr	r2, [pc, #16]	; (1710 <_oscctrl_init_referenced_generators+0xe0>)
    1700:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1702:	f413 7f80 	tst.w	r3, #256	; 0x100
    1706:	d0fb      	beq.n	1700 <_oscctrl_init_referenced_generators+0xd0>
    1708:	e7e2      	b.n	16d0 <_oscctrl_init_referenced_generators+0xa0>
    170a:	bf00      	nop
    170c:	40001c00 	.word	0x40001c00
    1710:	40001000 	.word	0x40001000
    1714:	0401bb80 	.word	0x0401bb80

00001718 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    1718:	b538      	push	{r3, r4, r5, lr}
    171a:	460c      	mov	r4, r1
	ASSERT(dev);
    171c:	4605      	mov	r5, r0
    171e:	2230      	movs	r2, #48	; 0x30
    1720:	4917      	ldr	r1, [pc, #92]	; (1780 <_timer_init+0x68>)
    1722:	3000      	adds	r0, #0
    1724:	bf18      	it	ne
    1726:	2001      	movne	r0, #1
    1728:	4b16      	ldr	r3, [pc, #88]	; (1784 <_timer_init+0x6c>)
    172a:	4798      	blx	r3

	dev->hw = hw;
    172c:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    172e:	2301      	movs	r3, #1
    1730:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1732:	f248 0203 	movw	r2, #32771	; 0x8003
    1736:	6923      	ldr	r3, [r4, #16]
    1738:	4213      	tst	r3, r2
    173a:	d1fc      	bne.n	1736 <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    173c:	68ea      	ldr	r2, [r5, #12]
    173e:	6913      	ldr	r3, [r2, #16]
    1740:	f013 0f01 	tst.w	r3, #1
    1744:	d1fb      	bne.n	173e <_timer_init+0x26>
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    1746:	f44f 7380 	mov.w	r3, #256	; 0x100
    174a:	6053      	str	r3, [r2, #4]
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    174c:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    174e:	f248 1380 	movw	r3, #33152	; 0x8180
    1752:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1754:	f248 0103 	movw	r1, #32771	; 0x8003
    1758:	6913      	ldr	r3, [r2, #16]
    175a:	420b      	tst	r3, r1
    175c:	d1fc      	bne.n	1758 <_timer_init+0x40>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    175e:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1760:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1764:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1766:	6913      	ldr	r3, [r2, #16]
    1768:	f013 0f60 	tst.w	r3, #96	; 0x60
    176c:	d1fb      	bne.n	1766 <_timer_init+0x4e>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    176e:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1770:	f44f 7280 	mov.w	r2, #256	; 0x100
    1774:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    1776:	4b04      	ldr	r3, [pc, #16]	; (1788 <_timer_init+0x70>)
    1778:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    177a:	2000      	movs	r0, #0
    177c:	bd38      	pop	{r3, r4, r5, pc}
    177e:	bf00      	nop
    1780:	00003f18 	.word	0x00003f18
    1784:	00001289 	.word	0x00001289
    1788:	20000548 	.word	0x20000548

0000178c <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    178c:	2000      	movs	r0, #0
    178e:	4770      	bx	lr

00001790 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1790:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    1792:	4b08      	ldr	r3, [pc, #32]	; (17b4 <RTC_Handler+0x24>)
    1794:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    1796:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1798:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    179a:	f413 7f80 	tst.w	r3, #256	; 0x100
    179e:	d007      	beq.n	17b0 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    17a0:	6823      	ldr	r3, [r4, #0]
    17a2:	b10b      	cbz	r3, 17a8 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    17a4:	4620      	mov	r0, r4
    17a6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    17a8:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    17aa:	f44f 7280 	mov.w	r2, #256	; 0x100
    17ae:	819a      	strh	r2, [r3, #12]
    17b0:	bd10      	pop	{r4, pc}
    17b2:	bf00      	nop
    17b4:	20000548 	.word	0x20000548

000017b8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    17b8:	b470      	push	{r4, r5, r6}
    17ba:	b089      	sub	sp, #36	; 0x24
    17bc:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    17be:	466c      	mov	r4, sp
    17c0:	4d0d      	ldr	r5, [pc, #52]	; (17f8 <_sercom_get_hardware_index+0x40>)
    17c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    17c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    17c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    17ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    17ce:	9b00      	ldr	r3, [sp, #0]
    17d0:	42b3      	cmp	r3, r6
    17d2:	d00d      	beq.n	17f0 <_sercom_get_hardware_index+0x38>
    17d4:	4631      	mov	r1, r6
    17d6:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    17d8:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    17da:	f853 2b04 	ldr.w	r2, [r3], #4
    17de:	428a      	cmp	r2, r1
    17e0:	d007      	beq.n	17f2 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    17e2:	3001      	adds	r0, #1
    17e4:	2808      	cmp	r0, #8
    17e6:	d1f8      	bne.n	17da <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    17e8:	2000      	movs	r0, #0
}
    17ea:	b009      	add	sp, #36	; 0x24
    17ec:	bc70      	pop	{r4, r5, r6}
    17ee:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    17f0:	2000      	movs	r0, #0
			return i;
    17f2:	b2c0      	uxtb	r0, r0
    17f4:	e7f9      	b.n	17ea <_sercom_get_hardware_index+0x32>
    17f6:	bf00      	nop
    17f8:	00003f30 	.word	0x00003f30

000017fc <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    17fc:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    17fe:	4b03      	ldr	r3, [pc, #12]	; (180c <_sercom_get_irq_num+0x10>)
    1800:	4798      	blx	r3
    1802:	0080      	lsls	r0, r0, #2
    1804:	302e      	adds	r0, #46	; 0x2e
}
    1806:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    180a:	bd08      	pop	{r3, pc}
    180c:	000017b9 	.word	0x000017b9

00001810 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1810:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1812:	f013 0f01 	tst.w	r3, #1
    1816:	d109      	bne.n	182c <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1818:	6803      	ldr	r3, [r0, #0]
    181a:	f043 0302 	orr.w	r3, r3, #2
    181e:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1820:	69c3      	ldr	r3, [r0, #28]
    1822:	f013 0f03 	tst.w	r3, #3
    1826:	d1fb      	bne.n	1820 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1828:	2000      	movs	r0, #0
    182a:	4770      	bx	lr
		return ERR_BUSY;
    182c:	f06f 0003 	mvn.w	r0, #3
}
    1830:	4770      	bx	lr
	...

00001834 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    1834:	b538      	push	{r3, r4, r5, lr}
    1836:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    1838:	4b0b      	ldr	r3, [pc, #44]	; (1868 <_spi_async_enable+0x34>)
    183a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    183c:	4620      	mov	r0, r4
    183e:	4b0b      	ldr	r3, [pc, #44]	; (186c <_spi_async_enable+0x38>)
    1840:	4798      	blx	r3
    1842:	1d01      	adds	r1, r0, #4
    1844:	b2c9      	uxtb	r1, r1
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1846:	2501      	movs	r5, #1
    1848:	4c09      	ldr	r4, [pc, #36]	; (1870 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    184a:	1c43      	adds	r3, r0, #1
    184c:	b2db      	uxtb	r3, r3
    184e:	0942      	lsrs	r2, r0, #5
    1850:	f000 001f 	and.w	r0, r0, #31
    1854:	fa05 f000 	lsl.w	r0, r5, r0
    1858:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    185c:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    185e:	4299      	cmp	r1, r3
    1860:	d1f3      	bne.n	184a <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    1862:	2000      	movs	r0, #0
    1864:	bd38      	pop	{r3, r4, r5, pc}
    1866:	bf00      	nop
    1868:	00001811 	.word	0x00001811
    186c:	000017fd 	.word	0x000017fd
    1870:	e000e100 	.word	0xe000e100

00001874 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    1874:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    1876:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1878:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    187a:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    187c:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    187e:	f013 0f01 	tst.w	r3, #1
    1882:	d109      	bne.n	1898 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    1884:	f013 0f04 	tst.w	r3, #4
    1888:	d109      	bne.n	189e <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    188a:	f013 0f02 	tst.w	r3, #2
    188e:	d109      	bne.n	18a4 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    1890:	f013 0f80 	tst.w	r3, #128	; 0x80
    1894:	d10b      	bne.n	18ae <_spi_handler+0x3a>
    1896:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    1898:	6883      	ldr	r3, [r0, #8]
    189a:	4798      	blx	r3
    189c:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    189e:	68c3      	ldr	r3, [r0, #12]
    18a0:	4798      	blx	r3
    18a2:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    18a4:	2302      	movs	r3, #2
    18a6:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    18a8:	6903      	ldr	r3, [r0, #16]
    18aa:	4798      	blx	r3
    18ac:	bd08      	pop	{r3, pc}
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    18ae:	2304      	movs	r3, #4
    18b0:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    18b2:	2380      	movs	r3, #128	; 0x80
    18b4:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    18b6:	6943      	ldr	r3, [r0, #20]
    18b8:	f06f 0112 	mvn.w	r1, #18
    18bc:	4798      	blx	r3
	}
}
    18be:	e7ea      	b.n	1896 <_spi_handler+0x22>

000018c0 <SERCOM0_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_0_Handler(void)
{
    18c0:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    18c2:	4b02      	ldr	r3, [pc, #8]	; (18cc <SERCOM0_0_Handler+0xc>)
    18c4:	6818      	ldr	r0, [r3, #0]
    18c6:	4b02      	ldr	r3, [pc, #8]	; (18d0 <SERCOM0_0_Handler+0x10>)
    18c8:	4798      	blx	r3
    18ca:	bd08      	pop	{r3, pc}
    18cc:	2000054c 	.word	0x2000054c
    18d0:	00001875 	.word	0x00001875

000018d4 <SERCOM0_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_1_Handler(void)
{
    18d4:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    18d6:	4b02      	ldr	r3, [pc, #8]	; (18e0 <SERCOM0_1_Handler+0xc>)
    18d8:	6818      	ldr	r0, [r3, #0]
    18da:	4b02      	ldr	r3, [pc, #8]	; (18e4 <SERCOM0_1_Handler+0x10>)
    18dc:	4798      	blx	r3
    18de:	bd08      	pop	{r3, pc}
    18e0:	2000054c 	.word	0x2000054c
    18e4:	00001875 	.word	0x00001875

000018e8 <SERCOM0_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_2_Handler(void)
{
    18e8:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    18ea:	4b02      	ldr	r3, [pc, #8]	; (18f4 <SERCOM0_2_Handler+0xc>)
    18ec:	6818      	ldr	r0, [r3, #0]
    18ee:	4b02      	ldr	r3, [pc, #8]	; (18f8 <SERCOM0_2_Handler+0x10>)
    18f0:	4798      	blx	r3
    18f2:	bd08      	pop	{r3, pc}
    18f4:	2000054c 	.word	0x2000054c
    18f8:	00001875 	.word	0x00001875

000018fc <SERCOM0_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
    18fc:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    18fe:	4b02      	ldr	r3, [pc, #8]	; (1908 <SERCOM0_3_Handler+0xc>)
    1900:	6818      	ldr	r0, [r3, #0]
    1902:	4b02      	ldr	r3, [pc, #8]	; (190c <SERCOM0_3_Handler+0x10>)
    1904:	4798      	blx	r3
    1906:	bd08      	pop	{r3, pc}
    1908:	2000054c 	.word	0x2000054c
    190c:	00001875 	.word	0x00001875

00001910 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1910:	b538      	push	{r3, r4, r5, lr}
    1912:	4605      	mov	r5, r0
    1914:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1916:	4608      	mov	r0, r1
    1918:	4b36      	ldr	r3, [pc, #216]	; (19f4 <_spi_m_sync_init+0xe4>)
    191a:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    191c:	b160      	cbz	r0, 1938 <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    191e:	2d00      	cmp	r5, #0
    1920:	d055      	beq.n	19ce <_spi_m_sync_init+0xbe>
    1922:	f640 1273 	movw	r2, #2419	; 0x973
    1926:	4934      	ldr	r1, [pc, #208]	; (19f8 <_spi_m_sync_init+0xe8>)
    1928:	1c20      	adds	r0, r4, #0
    192a:	bf18      	it	ne
    192c:	2001      	movne	r0, #1
    192e:	4b33      	ldr	r3, [pc, #204]	; (19fc <_spi_m_sync_init+0xec>)
    1930:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1932:	f06f 000c 	mvn.w	r0, #12
    1936:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1938:	2d00      	cmp	r5, #0
    193a:	d151      	bne.n	19e0 <_spi_m_sync_init+0xd0>
    193c:	f640 1273 	movw	r2, #2419	; 0x973
    1940:	492d      	ldr	r1, [pc, #180]	; (19f8 <_spi_m_sync_init+0xe8>)
    1942:	2000      	movs	r0, #0
    1944:	4b2d      	ldr	r3, [pc, #180]	; (19fc <_spi_m_sync_init+0xec>)
    1946:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1948:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    194a:	f013 0f01 	tst.w	r3, #1
    194e:	d119      	bne.n	1984 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1950:	69e3      	ldr	r3, [r4, #28]
    1952:	f013 0f03 	tst.w	r3, #3
    1956:	d1fb      	bne.n	1950 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1958:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    195a:	f013 0f02 	tst.w	r3, #2
    195e:	d00b      	beq.n	1978 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1960:	6823      	ldr	r3, [r4, #0]
    1962:	f023 0302 	bic.w	r3, r3, #2
    1966:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1968:	69e3      	ldr	r3, [r4, #28]
    196a:	f013 0f03 	tst.w	r3, #3
    196e:	d1fb      	bne.n	1968 <_spi_m_sync_init+0x58>
    1970:	69e3      	ldr	r3, [r4, #28]
    1972:	f013 0f02 	tst.w	r3, #2
    1976:	d1fb      	bne.n	1970 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1978:	230d      	movs	r3, #13
    197a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    197c:	69e3      	ldr	r3, [r4, #28]
    197e:	f013 0f03 	tst.w	r3, #3
    1982:	d1fb      	bne.n	197c <_spi_m_sync_init+0x6c>
    1984:	69e3      	ldr	r3, [r4, #28]
    1986:	f013 0f01 	tst.w	r3, #1
    198a:	d1fb      	bne.n	1984 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    198c:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    198e:	f640 1206 	movw	r2, #2310	; 0x906
    1992:	4919      	ldr	r1, [pc, #100]	; (19f8 <_spi_m_sync_init+0xe8>)
    1994:	1c20      	adds	r0, r4, #0
    1996:	bf18      	it	ne
    1998:	2001      	movne	r0, #1
    199a:	4b18      	ldr	r3, [pc, #96]	; (19fc <_spi_m_sync_init+0xec>)
    199c:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    199e:	4b18      	ldr	r3, [pc, #96]	; (1a00 <_spi_m_sync_init+0xf0>)
    19a0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19a2:	69e3      	ldr	r3, [r4, #28]
    19a4:	f013 0f03 	tst.w	r3, #3
    19a8:	d1fb      	bne.n	19a2 <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    19aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    19ae:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19b0:	69e3      	ldr	r3, [r4, #28]
    19b2:	f013 0f17 	tst.w	r3, #23
    19b6:	d1fb      	bne.n	19b0 <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    19b8:	2377      	movs	r3, #119	; 0x77
    19ba:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    19bc:	2000      	movs	r0, #0
    19be:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    19c2:	2301      	movs	r3, #1
    19c4:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    19c6:	f240 13ff 	movw	r3, #511	; 0x1ff
    19ca:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    19cc:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    19ce:	f640 1273 	movw	r2, #2419	; 0x973
    19d2:	4909      	ldr	r1, [pc, #36]	; (19f8 <_spi_m_sync_init+0xe8>)
    19d4:	2000      	movs	r0, #0
    19d6:	4b09      	ldr	r3, [pc, #36]	; (19fc <_spi_m_sync_init+0xec>)
    19d8:	4798      	blx	r3
		return ERR_INVALID_ARG;
    19da:	f06f 000c 	mvn.w	r0, #12
    19de:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    19e0:	f640 1273 	movw	r2, #2419	; 0x973
    19e4:	4904      	ldr	r1, [pc, #16]	; (19f8 <_spi_m_sync_init+0xe8>)
    19e6:	1c20      	adds	r0, r4, #0
    19e8:	bf18      	it	ne
    19ea:	2001      	movne	r0, #1
    19ec:	4b03      	ldr	r3, [pc, #12]	; (19fc <_spi_m_sync_init+0xec>)
    19ee:	4798      	blx	r3
    19f0:	e7aa      	b.n	1948 <_spi_m_sync_init+0x38>
    19f2:	bf00      	nop
    19f4:	000017b9 	.word	0x000017b9
    19f8:	00003f68 	.word	0x00003f68
    19fc:	00001289 	.word	0x00001289
    1a00:	0020000c 	.word	0x0020000c

00001a04 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    1a04:	b538      	push	{r3, r4, r5, lr}
    1a06:	4604      	mov	r4, r0
    1a08:	460d      	mov	r5, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    1a0a:	4b15      	ldr	r3, [pc, #84]	; (1a60 <_spi_m_async_init+0x5c>)
    1a0c:	4798      	blx	r3

	if (rc < 0) {
    1a0e:	2800      	cmp	r0, #0
    1a10:	db25      	blt.n	1a5e <_spi_m_async_init+0x5a>
	if (hw == SERCOM0) {
    1a12:	4b14      	ldr	r3, [pc, #80]	; (1a64 <_spi_m_async_init+0x60>)
    1a14:	429d      	cmp	r5, r3
		_sercom0_dev = (struct _spi_async_dev *)dev;
    1a16:	bf04      	itt	eq
    1a18:	4b13      	ldreq	r3, [pc, #76]	; (1a68 <_spi_m_async_init+0x64>)
    1a1a:	601c      	streq	r4, [r3, #0]
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    1a1c:	2300      	movs	r3, #0
    1a1e:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    1a20:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    1a22:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    1a24:	4628      	mov	r0, r5
    1a26:	4b11      	ldr	r3, [pc, #68]	; (1a6c <_spi_m_async_init+0x68>)
    1a28:	4798      	blx	r3
    1a2a:	1d01      	adds	r1, r0, #4
    1a2c:	b2c9      	uxtb	r1, r1
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a2e:	2401      	movs	r4, #1
    1a30:	f000 021f 	and.w	r2, r0, #31
    1a34:	fa04 f202 	lsl.w	r2, r4, r2
    1a38:	0943      	lsrs	r3, r0, #5
    1a3a:	009b      	lsls	r3, r3, #2
    1a3c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1a40:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1a48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a4c:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a50:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq);
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
		irq++;
    1a54:	3001      	adds	r0, #1
    1a56:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    1a58:	4281      	cmp	r1, r0
    1a5a:	d1e9      	bne.n	1a30 <_spi_m_async_init+0x2c>
	}

	return ERR_NONE;
    1a5c:	2000      	movs	r0, #0
}
    1a5e:	bd38      	pop	{r3, r4, r5, pc}
    1a60:	00001911 	.word	0x00001911
    1a64:	40003000 	.word	0x40003000
    1a68:	2000054c 	.word	0x2000054c
    1a6c:	000017fd 	.word	0x000017fd

00001a70 <_spi_m_async_enable>:

	return _spi_sync_enable(dev->prvt);
}

int32_t _spi_m_async_enable(struct _spi_async_dev *dev)
{
    1a70:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1a72:	4604      	mov	r4, r0
    1a74:	b160      	cbz	r0, 1a90 <_spi_m_async_enable+0x20>
    1a76:	6800      	ldr	r0, [r0, #0]
    1a78:	3000      	adds	r0, #0
    1a7a:	bf18      	it	ne
    1a7c:	2001      	movne	r0, #1
    1a7e:	f44f 621e 	mov.w	r2, #2528	; 0x9e0
    1a82:	4904      	ldr	r1, [pc, #16]	; (1a94 <_spi_m_async_enable+0x24>)
    1a84:	4b04      	ldr	r3, [pc, #16]	; (1a98 <_spi_m_async_enable+0x28>)
    1a86:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
    1a88:	6820      	ldr	r0, [r4, #0]
    1a8a:	4b04      	ldr	r3, [pc, #16]	; (1a9c <_spi_m_async_enable+0x2c>)
    1a8c:	4798      	blx	r3
}
    1a8e:	bd10      	pop	{r4, pc}
    1a90:	2000      	movs	r0, #0
    1a92:	e7f4      	b.n	1a7e <_spi_m_async_enable+0xe>
    1a94:	00003f68 	.word	0x00003f68
    1a98:	00001289 	.word	0x00001289
    1a9c:	00001835 	.word	0x00001835

00001aa0 <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    1aa0:	b538      	push	{r3, r4, r5, lr}
    1aa2:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    1aa4:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    1aa6:	b160      	cbz	r0, 1ac2 <_spi_m_async_enable_tx+0x22>
    1aa8:	1c20      	adds	r0, r4, #0
    1aaa:	bf18      	it	ne
    1aac:	2001      	movne	r0, #1
    1aae:	f640 3203 	movw	r2, #2819	; 0xb03
    1ab2:	4906      	ldr	r1, [pc, #24]	; (1acc <_spi_m_async_enable_tx+0x2c>)
    1ab4:	4b06      	ldr	r3, [pc, #24]	; (1ad0 <_spi_m_async_enable_tx+0x30>)
    1ab6:	4798      	blx	r3

	if (state) {
    1ab8:	b92d      	cbnz	r5, 1ac6 <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    1aba:	2301      	movs	r3, #1
    1abc:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    1abe:	2000      	movs	r0, #0
    1ac0:	bd38      	pop	{r3, r4, r5, pc}
    1ac2:	2000      	movs	r0, #0
    1ac4:	e7f3      	b.n	1aae <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    1ac6:	2301      	movs	r3, #1
    1ac8:	75a3      	strb	r3, [r4, #22]
    1aca:	e7f8      	b.n	1abe <_spi_m_async_enable_tx+0x1e>
    1acc:	00003f68 	.word	0x00003f68
    1ad0:	00001289 	.word	0x00001289

00001ad4 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    1ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ad6:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    1ad8:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
    1ada:	4e0c      	ldr	r6, [pc, #48]	; (1b0c <_spi_m_async_enable_rx+0x38>)
    1adc:	f640 3217 	movw	r2, #2839	; 0xb17
    1ae0:	4631      	mov	r1, r6
    1ae2:	3000      	adds	r0, #0
    1ae4:	bf18      	it	ne
    1ae6:	2001      	movne	r0, #1
    1ae8:	4d09      	ldr	r5, [pc, #36]	; (1b10 <_spi_m_async_enable_rx+0x3c>)
    1aea:	47a8      	blx	r5
	ASSERT(hw);
    1aec:	f640 3218 	movw	r2, #2840	; 0xb18
    1af0:	4631      	mov	r1, r6
    1af2:	1c20      	adds	r0, r4, #0
    1af4:	bf18      	it	ne
    1af6:	2001      	movne	r0, #1
    1af8:	47a8      	blx	r5

	if (state) {
    1afa:	b91f      	cbnz	r7, 1b04 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    1afc:	2304      	movs	r3, #4
    1afe:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    1b00:	2000      	movs	r0, #0
    1b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    1b04:	2304      	movs	r3, #4
    1b06:	75a3      	strb	r3, [r4, #22]
    1b08:	e7fa      	b.n	1b00 <_spi_m_async_enable_rx+0x2c>
    1b0a:	bf00      	nop
    1b0c:	00003f68 	.word	0x00003f68
    1b10:	00001289 	.word	0x00001289

00001b14 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    1b14:	b538      	push	{r3, r4, r5, lr}
    1b16:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    1b18:	4604      	mov	r4, r0
    1b1a:	b170      	cbz	r0, 1b3a <_spi_m_async_enable_tx_complete+0x26>
    1b1c:	6800      	ldr	r0, [r0, #0]
    1b1e:	3000      	adds	r0, #0
    1b20:	bf18      	it	ne
    1b22:	2001      	movne	r0, #1
    1b24:	f640 322a 	movw	r2, #2858	; 0xb2a
    1b28:	4907      	ldr	r1, [pc, #28]	; (1b48 <_spi_m_async_enable_tx_complete+0x34>)
    1b2a:	4b08      	ldr	r3, [pc, #32]	; (1b4c <_spi_m_async_enable_tx_complete+0x38>)
    1b2c:	4798      	blx	r3

	if (state) {
    1b2e:	b935      	cbnz	r5, 1b3e <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    1b30:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    1b32:	2202      	movs	r2, #2
    1b34:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    1b36:	2000      	movs	r0, #0
    1b38:	bd38      	pop	{r3, r4, r5, pc}
    1b3a:	2000      	movs	r0, #0
    1b3c:	e7f2      	b.n	1b24 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    1b3e:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    1b40:	2202      	movs	r2, #2
    1b42:	759a      	strb	r2, [r3, #22]
    1b44:	e7f7      	b.n	1b36 <_spi_m_async_enable_tx_complete+0x22>
    1b46:	bf00      	nop
    1b48:	00003f68 	.word	0x00003f68
    1b4c:	00001289 	.word	0x00001289

00001b50 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    1b50:	b538      	push	{r3, r4, r5, lr}
    1b52:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    1b54:	4604      	mov	r4, r0
    1b56:	b160      	cbz	r0, 1b72 <_spi_m_async_write_one+0x22>
    1b58:	6800      	ldr	r0, [r0, #0]
    1b5a:	3000      	adds	r0, #0
    1b5c:	bf18      	it	ne
    1b5e:	2001      	movne	r0, #1
    1b60:	f640 323c 	movw	r2, #2876	; 0xb3c
    1b64:	4904      	ldr	r1, [pc, #16]	; (1b78 <_spi_m_async_write_one+0x28>)
    1b66:	4b05      	ldr	r3, [pc, #20]	; (1b7c <_spi_m_async_write_one+0x2c>)
    1b68:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    1b6a:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1b6c:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    1b6e:	2000      	movs	r0, #0
    1b70:	bd38      	pop	{r3, r4, r5, pc}
    1b72:	2000      	movs	r0, #0
    1b74:	e7f4      	b.n	1b60 <_spi_m_async_write_one+0x10>
    1b76:	bf00      	nop
    1b78:	00003f68 	.word	0x00003f68
    1b7c:	00001289 	.word	0x00001289

00001b80 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    1b80:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1b82:	4604      	mov	r4, r0
    1b84:	b160      	cbz	r0, 1ba0 <_spi_m_async_read_one+0x20>
    1b86:	6800      	ldr	r0, [r0, #0]
    1b88:	3000      	adds	r0, #0
    1b8a:	bf18      	it	ne
    1b8c:	2001      	movne	r0, #1
    1b8e:	f640 3257 	movw	r2, #2903	; 0xb57
    1b92:	4904      	ldr	r1, [pc, #16]	; (1ba4 <_spi_m_async_read_one+0x24>)
    1b94:	4b04      	ldr	r3, [pc, #16]	; (1ba8 <_spi_m_async_read_one+0x28>)
    1b96:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    1b98:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    1b9a:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1b9c:	b280      	uxth	r0, r0
    1b9e:	bd10      	pop	{r4, pc}
    1ba0:	2000      	movs	r0, #0
    1ba2:	e7f4      	b.n	1b8e <_spi_m_async_read_one+0xe>
    1ba4:	00003f68 	.word	0x00003f68
    1ba8:	00001289 	.word	0x00001289

00001bac <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    1bac:	b570      	push	{r4, r5, r6, lr}
    1bae:	460d      	mov	r5, r1
    1bb0:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    1bb2:	4604      	mov	r4, r0
    1bb4:	b168      	cbz	r0, 1bd2 <_spi_m_async_register_callback+0x26>
    1bb6:	2903      	cmp	r1, #3
    1bb8:	bf8c      	ite	hi
    1bba:	2000      	movhi	r0, #0
    1bbc:	2001      	movls	r0, #1
    1bbe:	f44f 6237 	mov.w	r2, #2928	; 0xb70
    1bc2:	4905      	ldr	r1, [pc, #20]	; (1bd8 <_spi_m_async_register_callback+0x2c>)
    1bc4:	4b05      	ldr	r3, [pc, #20]	; (1bdc <_spi_m_async_register_callback+0x30>)
    1bc6:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    1bc8:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    1bcc:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    1bce:	2000      	movs	r0, #0
    1bd0:	bd70      	pop	{r4, r5, r6, pc}
    1bd2:	2000      	movs	r0, #0
    1bd4:	e7f3      	b.n	1bbe <_spi_m_async_register_callback+0x12>
    1bd6:	bf00      	nop
    1bd8:	00003f68 	.word	0x00003f68
    1bdc:	00001289 	.word	0x00001289

00001be0 <_spi_m_async_set_irq_state>:
 * param[in] type The type of interrupt to disable/enable if applicable
 * param[in] state Enable or disable
 */
void _spi_m_async_set_irq_state(struct _spi_async_dev *const device, const enum _spi_async_dev_cb_type type,
                                const bool state)
{
    1be0:	b570      	push	{r4, r5, r6, lr}
    1be2:	460c      	mov	r4, r1
    1be4:	4615      	mov	r5, r2
	ASSERT(device);
    1be6:	4606      	mov	r6, r0
    1be8:	f640 32b1 	movw	r2, #2993	; 0xbb1
    1bec:	4908      	ldr	r1, [pc, #32]	; (1c10 <_spi_m_async_set_irq_state+0x30>)
    1bee:	3000      	adds	r0, #0
    1bf0:	bf18      	it	ne
    1bf2:	2001      	movne	r0, #1
    1bf4:	4b07      	ldr	r3, [pc, #28]	; (1c14 <_spi_m_async_set_irq_state+0x34>)
    1bf6:	4798      	blx	r3

	if (SPI_DEV_CB_ERROR == type) {
    1bf8:	2c03      	cmp	r4, #3
    1bfa:	d000      	beq.n	1bfe <_spi_m_async_set_irq_state+0x1e>
    1bfc:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    1bfe:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    1c00:	b115      	cbz	r5, 1c08 <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    1c02:	2280      	movs	r2, #128	; 0x80
    1c04:	759a      	strb	r2, [r3, #22]
	}
}
    1c06:	e7f9      	b.n	1bfc <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    1c08:	2280      	movs	r2, #128	; 0x80
    1c0a:	751a      	strb	r2, [r3, #20]
    1c0c:	bd70      	pop	{r4, r5, r6, pc}
    1c0e:	bf00      	nop
    1c10:	00003f68 	.word	0x00003f68
    1c14:	00001289 	.word	0x00001289

00001c18 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1c18:	4b03      	ldr	r3, [pc, #12]	; (1c28 <_delay_init+0x10>)
    1c1a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1c1e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1c20:	2205      	movs	r2, #5
    1c22:	601a      	str	r2, [r3, #0]
    1c24:	4770      	bx	lr
    1c26:	bf00      	nop
    1c28:	e000e010 	.word	0xe000e010

00001c2c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    1c2c:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1c2e:	b303      	cbz	r3, 1c72 <_delay_cycles+0x46>
{
    1c30:	b430      	push	{r4, r5}
    1c32:	1e5d      	subs	r5, r3, #1
    1c34:	b2ed      	uxtb	r5, r5
	while (n--) {
    1c36:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    1c38:	4a12      	ldr	r2, [pc, #72]	; (1c84 <_delay_cycles+0x58>)
    1c3a:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    1c3e:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1c40:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1c42:	6813      	ldr	r3, [r2, #0]
    1c44:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1c48:	d0fb      	beq.n	1c42 <_delay_cycles+0x16>
	while (n--) {
    1c4a:	3801      	subs	r0, #1
    1c4c:	b2c0      	uxtb	r0, r0
    1c4e:	28ff      	cmp	r0, #255	; 0xff
    1c50:	d1f5      	bne.n	1c3e <_delay_cycles+0x12>
    1c52:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    1c56:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    1c5a:	3101      	adds	r1, #1
    1c5c:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1c5e:	4b09      	ldr	r3, [pc, #36]	; (1c84 <_delay_cycles+0x58>)
    1c60:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1c62:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1c64:	461a      	mov	r2, r3
    1c66:	6813      	ldr	r3, [r2, #0]
    1c68:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1c6c:	d0fb      	beq.n	1c66 <_delay_cycles+0x3a>
		;
}
    1c6e:	bc30      	pop	{r4, r5}
    1c70:	4770      	bx	lr
	SysTick->LOAD = buf;
    1c72:	4b04      	ldr	r3, [pc, #16]	; (1c84 <_delay_cycles+0x58>)
    1c74:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1c76:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1c78:	461a      	mov	r2, r3
    1c7a:	6813      	ldr	r3, [r2, #0]
    1c7c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1c80:	d0fb      	beq.n	1c7a <_delay_cycles+0x4e>
    1c82:	4770      	bx	lr
    1c84:	e000e010 	.word	0xe000e010

00001c88 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1c88:	2000      	movs	r0, #0
    1c8a:	4770      	bx	lr

00001c8c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1c8c:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1c8e:	7c83      	ldrb	r3, [r0, #18]
    1c90:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1c94:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    1c96:	f002 0107 	and.w	r1, r2, #7
    1c9a:	2901      	cmp	r1, #1
    1c9c:	d00b      	beq.n	1cb6 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1c9e:	015a      	lsls	r2, r3, #5
    1ca0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1ca4:	2110      	movs	r1, #16
    1ca6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1caa:	015b      	lsls	r3, r3, #5
    1cac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1cb0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    1cb4:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    1cb6:	f012 0f40 	tst.w	r2, #64	; 0x40
    1cba:	d00c      	beq.n	1cd6 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    1cbc:	7cc2      	ldrb	r2, [r0, #19]
    1cbe:	f36f 1286 	bfc	r2, #6, #1
    1cc2:	74c2      	strb	r2, [r0, #19]
    1cc4:	015a      	lsls	r2, r3, #5
    1cc6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1cca:	2180      	movs	r1, #128	; 0x80
    1ccc:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1cd0:	2140      	movs	r1, #64	; 0x40
    1cd2:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    1cd6:	7cc2      	ldrb	r2, [r0, #19]
    1cd8:	f36f 02c3 	bfc	r2, #3, #1
    1cdc:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1cde:	4909      	ldr	r1, [pc, #36]	; (1d04 <_usb_d_dev_handle_setup+0x78>)
    1ce0:	015a      	lsls	r2, r3, #5
    1ce2:	188c      	adds	r4, r1, r2
    1ce4:	2500      	movs	r5, #0
    1ce6:	72a5      	strb	r5, [r4, #10]
    1ce8:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1cea:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    1cee:	246f      	movs	r4, #111	; 0x6f
    1cf0:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1cf4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1cf8:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    1cfc:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    1cfe:	7c80      	ldrb	r0, [r0, #18]
    1d00:	4798      	blx	r3
    1d02:	bd38      	pop	{r3, r4, r5, pc}
    1d04:	20000550 	.word	0x20000550

00001d08 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    1d08:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    1d0a:	2320      	movs	r3, #32
    1d0c:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1d10:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1d12:	7c83      	ldrb	r3, [r0, #18]
    1d14:	f003 030f 	and.w	r3, r3, #15
    1d18:	015b      	lsls	r3, r3, #5
    1d1a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1d1e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1d22:	4b03      	ldr	r3, [pc, #12]	; (1d30 <_usb_d_dev_handle_stall+0x28>)
    1d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1d26:	6882      	ldr	r2, [r0, #8]
    1d28:	2101      	movs	r1, #1
    1d2a:	7c80      	ldrb	r0, [r0, #18]
    1d2c:	4798      	blx	r3
    1d2e:	bd08      	pop	{r3, pc}
    1d30:	20000550 	.word	0x20000550

00001d34 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1d34:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1d36:	7c84      	ldrb	r4, [r0, #18]
    1d38:	2cff      	cmp	r4, #255	; 0xff
    1d3a:	d003      	beq.n	1d44 <_usb_d_dev_trans_done+0x10>
    1d3c:	7cc3      	ldrb	r3, [r0, #19]
    1d3e:	f013 0f40 	tst.w	r3, #64	; 0x40
    1d42:	d100      	bne.n	1d46 <_usb_d_dev_trans_done+0x12>
    1d44:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    1d46:	7cc2      	ldrb	r2, [r0, #19]
    1d48:	f36f 1286 	bfc	r2, #6, #1
    1d4c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1d4e:	4a03      	ldr	r2, [pc, #12]	; (1d5c <_usb_d_dev_trans_done+0x28>)
    1d50:	6f15      	ldr	r5, [r2, #112]	; 0x70
    1d52:	6882      	ldr	r2, [r0, #8]
    1d54:	4620      	mov	r0, r4
    1d56:	47a8      	blx	r5
    1d58:	e7f4      	b.n	1d44 <_usb_d_dev_trans_done+0x10>
    1d5a:	bf00      	nop
    1d5c:	20000550 	.word	0x20000550

00001d60 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1d60:	b530      	push	{r4, r5, lr}
    1d62:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1d64:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1d66:	2425      	movs	r4, #37	; 0x25
    1d68:	f88d 4004 	strb.w	r4, [sp, #4]
    1d6c:	244a      	movs	r4, #74	; 0x4a
    1d6e:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1d72:	2bff      	cmp	r3, #255	; 0xff
    1d74:	d01e      	beq.n	1db4 <_usb_d_dev_trans_stop+0x54>
    1d76:	7cc4      	ldrb	r4, [r0, #19]
    1d78:	f014 0f40 	tst.w	r4, #64	; 0x40
    1d7c:	d01a      	beq.n	1db4 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1d7e:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    1d82:	b1c9      	cbz	r1, 1db8 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1d84:	0163      	lsls	r3, r4, #5
    1d86:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1d8a:	2580      	movs	r5, #128	; 0x80
    1d8c:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    1d90:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1d92:	a902      	add	r1, sp, #8
    1d94:	440b      	add	r3, r1
    1d96:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1d9a:	0163      	lsls	r3, r4, #5
    1d9c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1da0:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1da4:	0163      	lsls	r3, r4, #5
    1da6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1daa:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1dae:	4611      	mov	r1, r2
    1db0:	4b05      	ldr	r3, [pc, #20]	; (1dc8 <_usb_d_dev_trans_stop+0x68>)
    1db2:	4798      	blx	r3
}
    1db4:	b003      	add	sp, #12
    1db6:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1db8:	0163      	lsls	r3, r4, #5
    1dba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1dbe:	2540      	movs	r5, #64	; 0x40
    1dc0:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    1dc4:	e7e4      	b.n	1d90 <_usb_d_dev_trans_stop+0x30>
    1dc6:	bf00      	nop
    1dc8:	00001d35 	.word	0x00001d35

00001dcc <_usb_d_dev_handle_trfail>:
{
    1dcc:	b530      	push	{r4, r5, lr}
    1dce:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1dd0:	7c83      	ldrb	r3, [r0, #18]
    1dd2:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1dd6:	2204      	movs	r2, #4
    1dd8:	f88d 2004 	strb.w	r2, [sp, #4]
    1ddc:	2208      	movs	r2, #8
    1dde:	f88d 2005 	strb.w	r2, [sp, #5]
    1de2:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    1de4:	460c      	mov	r4, r1
    1de6:	b391      	cbz	r1, 1e4e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1de8:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    1dec:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1df0:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    1df4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    1df8:	4a32      	ldr	r2, [pc, #200]	; (1ec4 <_usb_d_dev_handle_trfail+0xf8>)
    1dfa:	440a      	add	r2, r1
    1dfc:	7a91      	ldrb	r1, [r2, #10]
    1dfe:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1e00:	2d02      	cmp	r5, #2
    1e02:	d02c      	beq.n	1e5e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    1e04:	f011 0f02 	tst.w	r1, #2
    1e08:	d045      	beq.n	1e96 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1e0a:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1e0c:	7a91      	ldrb	r1, [r2, #10]
    1e0e:	f36f 0141 	bfc	r1, #1, #1
    1e12:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1e14:	aa02      	add	r2, sp, #8
    1e16:	4422      	add	r2, r4
    1e18:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1e1c:	015a      	lsls	r2, r3, #5
    1e1e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1e22:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1e26:	015b      	lsls	r3, r3, #5
    1e28:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1e2c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1e30:	f005 0307 	and.w	r3, r5, #7
    1e34:	2b01      	cmp	r3, #1
    1e36:	d143      	bne.n	1ec0 <_usb_d_dev_handle_trfail+0xf4>
    1e38:	7cc3      	ldrb	r3, [r0, #19]
    1e3a:	f013 0f40 	tst.w	r3, #64	; 0x40
    1e3e:	d03f      	beq.n	1ec0 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1e40:	09d9      	lsrs	r1, r3, #7
    1e42:	428c      	cmp	r4, r1
    1e44:	d03c      	beq.n	1ec0 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1e46:	2200      	movs	r2, #0
    1e48:	4b1f      	ldr	r3, [pc, #124]	; (1ec8 <_usb_d_dev_handle_trfail+0xfc>)
    1e4a:	4798      	blx	r3
    1e4c:	e038      	b.n	1ec0 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1e4e:	0159      	lsls	r1, r3, #5
    1e50:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    1e54:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1e58:	f005 0507 	and.w	r5, r5, #7
    1e5c:	e7ca      	b.n	1df4 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1e5e:	f011 0f01 	tst.w	r1, #1
    1e62:	d0cf      	beq.n	1e04 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1e64:	7a91      	ldrb	r1, [r2, #10]
    1e66:	f36f 0100 	bfc	r1, #0, #1
    1e6a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1e6c:	aa02      	add	r2, sp, #8
    1e6e:	4422      	add	r2, r4
    1e70:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1e74:	015a      	lsls	r2, r3, #5
    1e76:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1e7a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1e7e:	015b      	lsls	r3, r3, #5
    1e80:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1e84:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1e88:	2204      	movs	r2, #4
    1e8a:	1c21      	adds	r1, r4, #0
    1e8c:	bf18      	it	ne
    1e8e:	2101      	movne	r1, #1
    1e90:	4b0d      	ldr	r3, [pc, #52]	; (1ec8 <_usb_d_dev_handle_trfail+0xfc>)
    1e92:	4798      	blx	r3
    1e94:	e014      	b.n	1ec0 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    1e96:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    1e9a:	4a0a      	ldr	r2, [pc, #40]	; (1ec4 <_usb_d_dev_handle_trfail+0xf8>)
    1e9c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    1ea0:	2100      	movs	r1, #0
    1ea2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1ea4:	aa02      	add	r2, sp, #8
    1ea6:	4414      	add	r4, r2
    1ea8:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1eac:	015a      	lsls	r2, r3, #5
    1eae:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1eb2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1eb6:	015b      	lsls	r3, r3, #5
    1eb8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1ebc:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    1ec0:	b003      	add	sp, #12
    1ec2:	bd30      	pop	{r4, r5, pc}
    1ec4:	20000550 	.word	0x20000550
    1ec8:	00001d61 	.word	0x00001d61

00001ecc <_usb_d_dev_reset_epts>:
{
    1ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ed0:	4d0c      	ldr	r5, [pc, #48]	; (1f04 <_usb_d_dev_reset_epts+0x38>)
    1ed2:	f105 0474 	add.w	r4, r5, #116	; 0x74
    1ed6:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1eda:	f04f 0803 	mov.w	r8, #3
    1ede:	4f0a      	ldr	r7, [pc, #40]	; (1f08 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    1ee0:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1ee2:	4641      	mov	r1, r8
    1ee4:	4620      	mov	r0, r4
    1ee6:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    1ee8:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1eea:	2300      	movs	r3, #0
    1eec:	74e3      	strb	r3, [r4, #19]
    1eee:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1ef0:	42ac      	cmp	r4, r5
    1ef2:	d1f6      	bne.n	1ee2 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1ef4:	2260      	movs	r2, #96	; 0x60
    1ef6:	4619      	mov	r1, r3
    1ef8:	4802      	ldr	r0, [pc, #8]	; (1f04 <_usb_d_dev_reset_epts+0x38>)
    1efa:	4b04      	ldr	r3, [pc, #16]	; (1f0c <_usb_d_dev_reset_epts+0x40>)
    1efc:	4798      	blx	r3
    1efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f02:	bf00      	nop
    1f04:	20000550 	.word	0x20000550
    1f08:	00001d35 	.word	0x00001d35
    1f0c:	00003ba1 	.word	0x00003ba1

00001f10 <_usb_d_dev_in_next>:
{
    1f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f14:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1f16:	7c84      	ldrb	r4, [r0, #18]
    1f18:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1f1c:	4688      	mov	r8, r1
    1f1e:	2900      	cmp	r1, #0
    1f20:	f000 809f 	beq.w	2062 <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1f24:	4b58      	ldr	r3, [pc, #352]	; (2088 <_usb_d_dev_in_next+0x178>)
    1f26:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1f2a:	6958      	ldr	r0, [r3, #20]
    1f2c:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1f30:	8a2b      	ldrh	r3, [r5, #16]
    1f32:	f240 32ff 	movw	r2, #1023	; 0x3ff
    1f36:	4293      	cmp	r3, r2
    1f38:	f000 808d 	beq.w	2056 <_usb_d_dev_in_next+0x146>
    1f3c:	3b01      	subs	r3, #1
    1f3e:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1f40:	7cef      	ldrb	r7, [r5, #19]
    1f42:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    1f46:	f1b8 0f00 	cmp.w	r8, #0
    1f4a:	d005      	beq.n	1f58 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1f4c:	0162      	lsls	r2, r4, #5
    1f4e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1f52:	2302      	movs	r3, #2
    1f54:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    1f58:	68a9      	ldr	r1, [r5, #8]
    1f5a:	eb0e 0301 	add.w	r3, lr, r1
    1f5e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    1f60:	686e      	ldr	r6, [r5, #4]
    1f62:	42b3      	cmp	r3, r6
    1f64:	d23f      	bcs.n	1fe6 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    1f66:	1af6      	subs	r6, r6, r3
    1f68:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    1f6a:	7cea      	ldrb	r2, [r5, #19]
    1f6c:	f012 0f20 	tst.w	r2, #32
    1f70:	d02d      	beq.n	1fce <_usb_d_dev_in_next+0xbe>
    1f72:	8a2a      	ldrh	r2, [r5, #16]
    1f74:	4296      	cmp	r6, r2
    1f76:	bf28      	it	cs
    1f78:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1f7a:	6829      	ldr	r1, [r5, #0]
    1f7c:	4632      	mov	r2, r6
    1f7e:	4419      	add	r1, r3
    1f80:	68e8      	ldr	r0, [r5, #12]
    1f82:	4b42      	ldr	r3, [pc, #264]	; (208c <_usb_d_dev_in_next+0x17c>)
    1f84:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1f86:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    1f88:	4b3f      	ldr	r3, [pc, #252]	; (2088 <_usb_d_dev_in_next+0x178>)
    1f8a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1f8e:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1f90:	4b3d      	ldr	r3, [pc, #244]	; (2088 <_usb_d_dev_in_next+0x178>)
    1f92:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1f96:	695a      	ldr	r2, [r3, #20]
    1f98:	f366 020d 	bfi	r2, r6, #0, #14
    1f9c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1f9e:	695a      	ldr	r2, [r3, #20]
    1fa0:	f36f 329b 	bfc	r2, #14, #14
    1fa4:	615a      	str	r2, [r3, #20]
	if (!isr) {
    1fa6:	f1b8 0f00 	cmp.w	r8, #0
    1faa:	d108      	bne.n	1fbe <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    1fac:	2f01      	cmp	r7, #1
    1fae:	bf0c      	ite	eq
    1fb0:	224e      	moveq	r2, #78	; 0x4e
    1fb2:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1fb4:	0163      	lsls	r3, r4, #5
    1fb6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1fba:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1fbe:	0164      	lsls	r4, r4, #5
    1fc0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    1fc4:	2380      	movs	r3, #128	; 0x80
    1fc6:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    1fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fce:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    1fd2:	bf28      	it	cs
    1fd4:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1fd8:	6829      	ldr	r1, [r5, #0]
    1fda:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    1fdc:	4a2a      	ldr	r2, [pc, #168]	; (2088 <_usb_d_dev_in_next+0x178>)
    1fde:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    1fe2:	6113      	str	r3, [r2, #16]
    1fe4:	e7d4      	b.n	1f90 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    1fe6:	7ceb      	ldrb	r3, [r5, #19]
    1fe8:	f013 0f10 	tst.w	r3, #16
    1fec:	d00f      	beq.n	200e <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    1fee:	7ceb      	ldrb	r3, [r5, #19]
    1ff0:	f36f 1304 	bfc	r3, #4, #1
    1ff4:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1ff6:	4b24      	ldr	r3, [pc, #144]	; (2088 <_usb_d_dev_in_next+0x178>)
    1ff8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1ffc:	695a      	ldr	r2, [r3, #20]
    1ffe:	f36f 020d 	bfc	r2, #0, #14
    2002:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2004:	695a      	ldr	r2, [r3, #20]
    2006:	f36f 329b 	bfc	r2, #14, #14
    200a:	615a      	str	r2, [r3, #20]
    200c:	e7cb      	b.n	1fa6 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    200e:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2010:	ea4f 1444 	mov.w	r4, r4, lsl #5
    2014:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2018:	bf0c      	ite	eq
    201a:	234b      	moveq	r3, #75	; 0x4b
    201c:	234a      	movne	r3, #74	; 0x4a
    201e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    2022:	8a2a      	ldrh	r2, [r5, #16]
    2024:	ea00 030e 	and.w	r3, r0, lr
    2028:	429a      	cmp	r2, r3
    202a:	d005      	beq.n	2038 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    202c:	2100      	movs	r1, #0
    202e:	4628      	mov	r0, r5
    2030:	4b17      	ldr	r3, [pc, #92]	; (2090 <_usb_d_dev_in_next+0x180>)
    2032:	4798      	blx	r3
	return;
    2034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    2038:	7ceb      	ldrb	r3, [r5, #19]
    203a:	f36f 1386 	bfc	r3, #6, #1
    203e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2040:	4b11      	ldr	r3, [pc, #68]	; (2088 <_usb_d_dev_in_next+0x178>)
    2042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    2044:	68a9      	ldr	r1, [r5, #8]
    2046:	7ca8      	ldrb	r0, [r5, #18]
    2048:	4798      	blx	r3
    204a:	b9d0      	cbnz	r0, 2082 <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    204c:	7ceb      	ldrb	r3, [r5, #19]
    204e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2052:	74eb      	strb	r3, [r5, #19]
    2054:	e7ea      	b.n	202c <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2056:	7cef      	ldrb	r7, [r5, #19]
    2058:	f007 0707 	and.w	r7, r7, #7
    205c:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2060:	e774      	b.n	1f4c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2062:	8a03      	ldrh	r3, [r0, #16]
    2064:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2068:	4293      	cmp	r3, r2
    206a:	d107      	bne.n	207c <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    206c:	7cef      	ldrb	r7, [r5, #19]
    206e:	f007 0707 	and.w	r7, r7, #7
    2072:	f04f 0e00 	mov.w	lr, #0
    2076:	f240 30ff 	movw	r0, #1023	; 0x3ff
    207a:	e76d      	b.n	1f58 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    207c:	f04f 0e00 	mov.w	lr, #0
    2080:	e75c      	b.n	1f3c <_usb_d_dev_in_next+0x2c>
    2082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2086:	bf00      	nop
    2088:	20000550 	.word	0x20000550
    208c:	00003a6d 	.word	0x00003a6d
    2090:	00001d35 	.word	0x00001d35

00002094 <_usb_d_dev_out_next>:
{
    2094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2098:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    209a:	7c85      	ldrb	r5, [r0, #18]
    209c:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    20a0:	4689      	mov	r9, r1
    20a2:	2900      	cmp	r1, #0
    20a4:	d056      	beq.n	2154 <_usb_d_dev_out_next+0xc0>
    20a6:	4b74      	ldr	r3, [pc, #464]	; (2278 <_usb_d_dev_out_next+0x1e4>)
    20a8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    20ac:	685a      	ldr	r2, [r3, #4]
    20ae:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    20b2:	685f      	ldr	r7, [r3, #4]
    20b4:	f3c7 070d 	ubfx	r7, r7, #0, #14
    20b8:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    20ba:	8a06      	ldrh	r6, [r0, #16]
    20bc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    20c0:	429e      	cmp	r6, r3
    20c2:	f000 80ba 	beq.w	223a <_usb_d_dev_out_next+0x1a6>
    20c6:	3e01      	subs	r6, #1
    20c8:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    20ca:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    20ce:	f894 8013 	ldrb.w	r8, [r4, #19]
    20d2:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    20d6:	f1b9 0f00 	cmp.w	r9, #0
    20da:	d005      	beq.n	20e8 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    20dc:	016b      	lsls	r3, r5, #5
    20de:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    20e2:	2201      	movs	r2, #1
    20e4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    20e8:	7ce3      	ldrb	r3, [r4, #19]
    20ea:	f013 0f20 	tst.w	r3, #32
    20ee:	d00d      	beq.n	210c <_usb_d_dev_out_next+0x78>
    20f0:	6862      	ldr	r2, [r4, #4]
    20f2:	2a00      	cmp	r2, #0
    20f4:	d037      	beq.n	2166 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    20f6:	68a0      	ldr	r0, [r4, #8]
    20f8:	1a12      	subs	r2, r2, r0
    20fa:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    20fc:	6823      	ldr	r3, [r4, #0]
    20fe:	42ba      	cmp	r2, r7
    2100:	bf28      	it	cs
    2102:	463a      	movcs	r2, r7
    2104:	68e1      	ldr	r1, [r4, #12]
    2106:	4418      	add	r0, r3
    2108:	4b5c      	ldr	r3, [pc, #368]	; (227c <_usb_d_dev_out_next+0x1e8>)
    210a:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    210c:	6863      	ldr	r3, [r4, #4]
    210e:	b353      	cbz	r3, 2166 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    2110:	f1b9 0f00 	cmp.w	r9, #0
    2114:	d040      	beq.n	2198 <_usb_d_dev_out_next+0x104>
    2116:	8a22      	ldrh	r2, [r4, #16]
    2118:	42ba      	cmp	r2, r7
    211a:	d93d      	bls.n	2198 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    211c:	7ce3      	ldrb	r3, [r4, #19]
    211e:	f36f 1304 	bfc	r3, #4, #1
    2122:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2124:	68a3      	ldr	r3, [r4, #8]
    2126:	445b      	add	r3, fp
    2128:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    212a:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    212e:	ea4f 1345 	mov.w	r3, r5, lsl #5
    2132:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2136:	bf0c      	ite	eq
    2138:	222d      	moveq	r2, #45	; 0x2d
    213a:	2225      	movne	r2, #37	; 0x25
    213c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    2140:	b915      	cbnz	r5, 2148 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2142:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    2144:	4b4c      	ldr	r3, [pc, #304]	; (2278 <_usb_d_dev_out_next+0x1e4>)
    2146:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2148:	2100      	movs	r1, #0
    214a:	4620      	mov	r0, r4
    214c:	4b4c      	ldr	r3, [pc, #304]	; (2280 <_usb_d_dev_out_next+0x1ec>)
    214e:	4798      	blx	r3
	return;
    2150:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2154:	8a06      	ldrh	r6, [r0, #16]
    2156:	f240 33ff 	movw	r3, #1023	; 0x3ff
    215a:	429e      	cmp	r6, r3
    215c:	d07b      	beq.n	2256 <_usb_d_dev_out_next+0x1c2>
    215e:	f04f 0b00 	mov.w	fp, #0
    2162:	46da      	mov	sl, fp
    2164:	e7af      	b.n	20c6 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2166:	7ce3      	ldrb	r3, [r4, #19]
    2168:	f013 0f10 	tst.w	r3, #16
    216c:	d06c      	beq.n	2248 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    216e:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    2170:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2174:	f043 0320 	orr.w	r3, r3, #32
    2178:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    217a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    217c:	493e      	ldr	r1, [pc, #248]	; (2278 <_usb_d_dev_out_next+0x1e4>)
    217e:	016a      	lsls	r2, r5, #5
    2180:	188b      	adds	r3, r1, r2
    2182:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2184:	8a21      	ldrh	r1, [r4, #16]
    2186:	685a      	ldr	r2, [r3, #4]
    2188:	f361 329b 	bfi	r2, r1, #14, #14
    218c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    218e:	685a      	ldr	r2, [r3, #4]
    2190:	f36f 020d 	bfc	r2, #0, #14
    2194:	605a      	str	r2, [r3, #4]
    2196:	e01d      	b.n	21d4 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    2198:	68a2      	ldr	r2, [r4, #8]
    219a:	4452      	add	r2, sl
    219c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    219e:	4293      	cmp	r3, r2
    21a0:	d9c3      	bls.n	212a <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    21a2:	1a9b      	subs	r3, r3, r2
    21a4:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    21a6:	7ce1      	ldrb	r1, [r4, #19]
    21a8:	f011 0f20 	tst.w	r1, #32
    21ac:	d026      	beq.n	21fc <_usb_d_dev_out_next+0x168>
    21ae:	8a22      	ldrh	r2, [r4, #16]
    21b0:	4293      	cmp	r3, r2
    21b2:	bf28      	it	cs
    21b4:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    21b6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    21b8:	016a      	lsls	r2, r5, #5
    21ba:	492f      	ldr	r1, [pc, #188]	; (2278 <_usb_d_dev_out_next+0x1e4>)
    21bc:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    21be:	4a2e      	ldr	r2, [pc, #184]	; (2278 <_usb_d_dev_out_next+0x1e4>)
    21c0:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    21c4:	6851      	ldr	r1, [r2, #4]
    21c6:	f363 319b 	bfi	r1, r3, #14, #14
    21ca:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    21cc:	6853      	ldr	r3, [r2, #4]
    21ce:	f36f 030d 	bfc	r3, #0, #14
    21d2:	6053      	str	r3, [r2, #4]
	if (!isr) {
    21d4:	f1b9 0f00 	cmp.w	r9, #0
    21d8:	d108      	bne.n	21ec <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    21da:	f1b8 0f01 	cmp.w	r8, #1
    21de:	d025      	beq.n	222c <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    21e0:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    21e2:	016b      	lsls	r3, r5, #5
    21e4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    21e8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    21ec:	016d      	lsls	r5, r5, #5
    21ee:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    21f2:	2340      	movs	r3, #64	; 0x40
    21f4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    21f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    21fc:	8a21      	ldrh	r1, [r4, #16]
    21fe:	428b      	cmp	r3, r1
    2200:	d90a      	bls.n	2218 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    2202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    2206:	d80e      	bhi.n	2226 <_usb_d_dev_out_next+0x192>
    2208:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    220c:	6821      	ldr	r1, [r4, #0]
    220e:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    2210:	0169      	lsls	r1, r5, #5
    2212:	4819      	ldr	r0, [pc, #100]	; (2278 <_usb_d_dev_out_next+0x1e4>)
    2214:	5042      	str	r2, [r0, r1]
    2216:	e7d2      	b.n	21be <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    2218:	428b      	cmp	r3, r1
    221a:	d2f7      	bcs.n	220c <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    221c:	7ce1      	ldrb	r1, [r4, #19]
    221e:	f041 0120 	orr.w	r1, r1, #32
    2222:	74e1      	strb	r1, [r4, #19]
    2224:	e7f2      	b.n	220c <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    2226:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    222a:	e7ef      	b.n	220c <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    222c:	4b12      	ldr	r3, [pc, #72]	; (2278 <_usb_d_dev_out_next+0x1e4>)
    222e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2232:	2200      	movs	r2, #0
    2234:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    2236:	222d      	movs	r2, #45	; 0x2d
    2238:	e7d3      	b.n	21e2 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    223a:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    223e:	f890 8013 	ldrb.w	r8, [r0, #19]
    2242:	f008 0807 	and.w	r8, r8, #7
    2246:	e749      	b.n	20dc <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    2248:	f1b9 0f00 	cmp.w	r9, #0
    224c:	d10b      	bne.n	2266 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    224e:	68a3      	ldr	r3, [r4, #8]
    2250:	4453      	add	r3, sl
    2252:	60a3      	str	r3, [r4, #8]
    2254:	e769      	b.n	212a <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2256:	f890 8013 	ldrb.w	r8, [r0, #19]
    225a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    225e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2260:	46bb      	mov	fp, r7
    2262:	46ba      	mov	sl, r7
    2264:	e740      	b.n	20e8 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    2266:	8a23      	ldrh	r3, [r4, #16]
    2268:	42bb      	cmp	r3, r7
    226a:	f63f af57 	bhi.w	211c <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    226e:	68a3      	ldr	r3, [r4, #8]
    2270:	4453      	add	r3, sl
    2272:	60a3      	str	r3, [r4, #8]
    2274:	e759      	b.n	212a <_usb_d_dev_out_next+0x96>
    2276:	bf00      	nop
    2278:	20000550 	.word	0x20000550
    227c:	00003a6d 	.word	0x00003a6d
    2280:	00001d35 	.word	0x00001d35

00002284 <_usb_d_dev_handler>:
{
    2284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    2288:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    228c:	8c1e      	ldrh	r6, [r3, #32]
    228e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2290:	b146      	cbz	r6, 22a4 <_usb_d_dev_handler+0x20>
    2292:	4d91      	ldr	r5, [pc, #580]	; (24d8 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    2294:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2296:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    229a:	f8df 9258 	ldr.w	r9, [pc, #600]	; 24f4 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    229e:	f8df 8258 	ldr.w	r8, [pc, #600]	; 24f8 <_usb_d_dev_handler+0x274>
    22a2:	e0d3      	b.n	244c <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    22a4:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    22a6:	8b1b      	ldrh	r3, [r3, #24]
    22a8:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    22aa:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    22ac:	f013 0f04 	tst.w	r3, #4
    22b0:	d11d      	bne.n	22ee <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    22b2:	f413 7f00 	tst.w	r3, #512	; 0x200
    22b6:	d123      	bne.n	2300 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    22b8:	f013 0f80 	tst.w	r3, #128	; 0x80
    22bc:	d147      	bne.n	234e <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    22be:	f013 0f70 	tst.w	r3, #112	; 0x70
    22c2:	d14f      	bne.n	2364 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    22c4:	f013 0f08 	tst.w	r3, #8
    22c8:	d16e      	bne.n	23a8 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    22ca:	f013 0f01 	tst.w	r3, #1
    22ce:	d0e0      	beq.n	2292 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    22d0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    22d4:	f240 2201 	movw	r2, #513	; 0x201
    22d8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    22da:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    22dc:	2270      	movs	r2, #112	; 0x70
    22de:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    22e0:	4b7e      	ldr	r3, [pc, #504]	; (24dc <_usb_d_dev_handler+0x258>)
    22e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    22e4:	2100      	movs	r1, #0
    22e6:	2004      	movs	r0, #4
    22e8:	4798      	blx	r3
    22ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    22ee:	2204      	movs	r2, #4
    22f0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    22f4:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    22f6:	4b79      	ldr	r3, [pc, #484]	; (24dc <_usb_d_dev_handler+0x258>)
    22f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    22fa:	4798      	blx	r3
    22fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2300:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2304:	f240 2201 	movw	r2, #513	; 0x201
    2308:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    230a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    230c:	2270      	movs	r2, #112	; 0x70
    230e:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2310:	4b72      	ldr	r3, [pc, #456]	; (24dc <_usb_d_dev_handler+0x258>)
    2312:	891b      	ldrh	r3, [r3, #8]
    2314:	f003 030f 	and.w	r3, r3, #15
    2318:	2b03      	cmp	r3, #3
    231a:	d00e      	beq.n	233a <_usb_d_dev_handler+0xb6>
    231c:	4b6f      	ldr	r3, [pc, #444]	; (24dc <_usb_d_dev_handler+0x258>)
    231e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2320:	f003 030f 	and.w	r3, r3, #15
    2324:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2326:	bf08      	it	eq
    2328:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    232a:	d007      	beq.n	233c <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    232c:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    232e:	4b6b      	ldr	r3, [pc, #428]	; (24dc <_usb_d_dev_handler+0x258>)
    2330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2332:	2003      	movs	r0, #3
    2334:	4798      	blx	r3
    2336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    233a:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    233c:	4b67      	ldr	r3, [pc, #412]	; (24dc <_usb_d_dev_handler+0x258>)
    233e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    2342:	8919      	ldrh	r1, [r3, #8]
    2344:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    2348:	2200      	movs	r2, #0
    234a:	811a      	strh	r2, [r3, #8]
    234c:	e7ef      	b.n	232e <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    234e:	2280      	movs	r2, #128	; 0x80
    2350:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2354:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    2356:	4b61      	ldr	r3, [pc, #388]	; (24dc <_usb_d_dev_handler+0x258>)
    2358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    235a:	2100      	movs	r1, #0
    235c:	2005      	movs	r0, #5
    235e:	4798      	blx	r3
    2360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2364:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2368:	2270      	movs	r2, #112	; 0x70
    236a:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    236c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    236e:	f240 2201 	movw	r2, #513	; 0x201
    2372:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2374:	4b5a      	ldr	r3, [pc, #360]	; (24e0 <_usb_d_dev_handler+0x25c>)
    2376:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    237a:	f013 0f01 	tst.w	r3, #1
    237e:	d00d      	beq.n	239c <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2380:	4a57      	ldr	r2, [pc, #348]	; (24e0 <_usb_d_dev_handler+0x25c>)
    2382:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2384:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    2388:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    238c:	d1f9      	bne.n	2382 <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    238e:	4b53      	ldr	r3, [pc, #332]	; (24dc <_usb_d_dev_handler+0x258>)
    2390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2392:	2100      	movs	r1, #0
    2394:	2002      	movs	r0, #2
    2396:	4798      	blx	r3
    2398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    239c:	4a50      	ldr	r2, [pc, #320]	; (24e0 <_usb_d_dev_handler+0x25c>)
    239e:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    23a0:	f413 7f80 	tst.w	r3, #256	; 0x100
    23a4:	d0fb      	beq.n	239e <_usb_d_dev_handler+0x11a>
    23a6:	e7f2      	b.n	238e <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    23a8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    23ac:	2400      	movs	r4, #0
    23ae:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    23b2:	2208      	movs	r2, #8
    23b4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    23b6:	2270      	movs	r2, #112	; 0x70
    23b8:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    23ba:	f240 2201 	movw	r2, #513	; 0x201
    23be:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    23c0:	4b48      	ldr	r3, [pc, #288]	; (24e4 <_usb_d_dev_handler+0x260>)
    23c2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    23c4:	4b45      	ldr	r3, [pc, #276]	; (24dc <_usb_d_dev_handler+0x258>)
    23c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    23c8:	4621      	mov	r1, r4
    23ca:	2001      	movs	r0, #1
    23cc:	4798      	blx	r3
    23ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    23d2:	f011 0f10 	tst.w	r1, #16
    23d6:	d109      	bne.n	23ec <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    23d8:	f011 0f40 	tst.w	r1, #64	; 0x40
    23dc:	d108      	bne.n	23f0 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    23de:	f011 0f20 	tst.w	r1, #32
    23e2:	d02f      	beq.n	2444 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    23e4:	2100      	movs	r1, #0
    23e6:	4b40      	ldr	r3, [pc, #256]	; (24e8 <_usb_d_dev_handler+0x264>)
    23e8:	4798      	blx	r3
    23ea:	e02b      	b.n	2444 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    23ec:	47c8      	blx	r9
    23ee:	e029      	b.n	2444 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    23f0:	2101      	movs	r1, #1
    23f2:	4b3d      	ldr	r3, [pc, #244]	; (24e8 <_usb_d_dev_handler+0x264>)
    23f4:	4798      	blx	r3
    23f6:	e025      	b.n	2444 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    23f8:	f011 0f40 	tst.w	r1, #64	; 0x40
    23fc:	d111      	bne.n	2422 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    23fe:	f011 0f08 	tst.w	r1, #8
    2402:	d112      	bne.n	242a <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2404:	f011 0f02 	tst.w	r1, #2
    2408:	d112      	bne.n	2430 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    240a:	f003 0307 	and.w	r3, r3, #7
    240e:	2b01      	cmp	r3, #1
    2410:	d118      	bne.n	2444 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2412:	f011 0f04 	tst.w	r1, #4
    2416:	d10f      	bne.n	2438 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2418:	f011 0f10 	tst.w	r1, #16
    241c:	d012      	beq.n	2444 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    241e:	47c8      	blx	r9
    2420:	e010      	b.n	2444 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    2422:	2101      	movs	r1, #1
    2424:	4b30      	ldr	r3, [pc, #192]	; (24e8 <_usb_d_dev_handler+0x264>)
    2426:	4798      	blx	r3
    2428:	e00c      	b.n	2444 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    242a:	2101      	movs	r1, #1
    242c:	47c0      	blx	r8
    242e:	e009      	b.n	2444 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    2430:	2101      	movs	r1, #1
    2432:	4b2e      	ldr	r3, [pc, #184]	; (24ec <_usb_d_dev_handler+0x268>)
    2434:	4798      	blx	r3
    2436:	e005      	b.n	2444 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    2438:	2100      	movs	r1, #0
    243a:	47c0      	blx	r8
    243c:	e002      	b.n	2444 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    243e:	2100      	movs	r1, #0
    2440:	4b29      	ldr	r3, [pc, #164]	; (24e8 <_usb_d_dev_handler+0x264>)
    2442:	4798      	blx	r3
    2444:	3401      	adds	r4, #1
    2446:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2448:	2c09      	cmp	r4, #9
    244a:	d042      	beq.n	24d2 <_usb_d_dev_handler+0x24e>
    244c:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    244e:	7cab      	ldrb	r3, [r5, #18]
    2450:	2bff      	cmp	r3, #255	; 0xff
    2452:	d0f7      	beq.n	2444 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    2454:	f003 030f 	and.w	r3, r3, #15
    2458:	2101      	movs	r1, #1
    245a:	4099      	lsls	r1, r3
    245c:	4231      	tst	r1, r6
    245e:	d0f1      	beq.n	2444 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2460:	0159      	lsls	r1, r3, #5
    2462:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2466:	f501 7180 	add.w	r1, r1, #256	; 0x100
    246a:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    246c:	015b      	lsls	r3, r3, #5
    246e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2472:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    2476:	4019      	ands	r1, r3
    2478:	d0e4      	beq.n	2444 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    247a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    247e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    2482:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    2486:	f003 0247 	and.w	r2, r3, #71	; 0x47
    248a:	2a01      	cmp	r2, #1
    248c:	d0a1      	beq.n	23d2 <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    248e:	f013 0f80 	tst.w	r3, #128	; 0x80
    2492:	d1b1      	bne.n	23f8 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2494:	f011 0f20 	tst.w	r1, #32
    2498:	d1d1      	bne.n	243e <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    249a:	f011 0f04 	tst.w	r1, #4
    249e:	d10e      	bne.n	24be <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    24a0:	f011 0f01 	tst.w	r1, #1
    24a4:	d10e      	bne.n	24c4 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    24a6:	f003 0307 	and.w	r3, r3, #7
    24aa:	2b01      	cmp	r3, #1
    24ac:	d1ca      	bne.n	2444 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    24ae:	f011 0f08 	tst.w	r1, #8
    24b2:	d10b      	bne.n	24cc <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    24b4:	f011 0f10 	tst.w	r1, #16
    24b8:	d0c4      	beq.n	2444 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    24ba:	47c8      	blx	r9
    24bc:	e7c2      	b.n	2444 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    24be:	2100      	movs	r1, #0
    24c0:	47c0      	blx	r8
    24c2:	e7bf      	b.n	2444 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    24c4:	2101      	movs	r1, #1
    24c6:	4b0a      	ldr	r3, [pc, #40]	; (24f0 <_usb_d_dev_handler+0x26c>)
    24c8:	4798      	blx	r3
    24ca:	e7bb      	b.n	2444 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    24cc:	2101      	movs	r1, #1
    24ce:	47c0      	blx	r8
    24d0:	e7b8      	b.n	2444 <_usb_d_dev_handler+0x1c0>
    24d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    24d6:	bf00      	nop
    24d8:	200005c4 	.word	0x200005c4
    24dc:	20000550 	.word	0x20000550
    24e0:	40001000 	.word	0x40001000
    24e4:	00001ecd 	.word	0x00001ecd
    24e8:	00001d09 	.word	0x00001d09
    24ec:	00001f11 	.word	0x00001f11
    24f0:	00002095 	.word	0x00002095
    24f4:	00001c8d 	.word	0x00001c8d
    24f8:	00001dcd 	.word	0x00001dcd

000024fc <_usb_d_dev_init>:
{
    24fc:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    24fe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2502:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    2504:	f013 0f01 	tst.w	r3, #1
    2508:	d124      	bne.n	2554 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    250a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    250e:	7893      	ldrb	r3, [r2, #2]
    2510:	f013 0f03 	tst.w	r3, #3
    2514:	d1fb      	bne.n	250e <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    2516:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    251a:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    251c:	f013 0f02 	tst.w	r3, #2
    2520:	d00f      	beq.n	2542 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    2522:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2526:	7813      	ldrb	r3, [r2, #0]
    2528:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    252c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    252e:	7893      	ldrb	r3, [r2, #2]
    2530:	f013 0f03 	tst.w	r3, #3
    2534:	d1fb      	bne.n	252e <_usb_d_dev_init+0x32>
    2536:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    253a:	7893      	ldrb	r3, [r2, #2]
    253c:	f013 0f02 	tst.w	r3, #2
    2540:	d1fb      	bne.n	253a <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2542:	2201      	movs	r2, #1
    2544:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2548:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    254a:	461a      	mov	r2, r3
    254c:	7893      	ldrb	r3, [r2, #2]
    254e:	f013 0f03 	tst.w	r3, #3
    2552:	d1fb      	bne.n	254c <_usb_d_dev_init+0x50>
    2554:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2558:	7893      	ldrb	r3, [r2, #2]
    255a:	f013 0f01 	tst.w	r3, #1
    255e:	d1fb      	bne.n	2558 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2560:	4b21      	ldr	r3, [pc, #132]	; (25e8 <_usb_d_dev_init+0xec>)
    2562:	4a22      	ldr	r2, [pc, #136]	; (25ec <_usb_d_dev_init+0xf0>)
    2564:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    2566:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2568:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    256a:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    256c:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    256e:	4b20      	ldr	r3, [pc, #128]	; (25f0 <_usb_d_dev_init+0xf4>)
    2570:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    2572:	4b20      	ldr	r3, [pc, #128]	; (25f4 <_usb_d_dev_init+0xf8>)
    2574:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    2576:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    257a:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    257e:	f011 011f 	ands.w	r1, r1, #31
    2582:	d02b      	beq.n	25dc <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    2584:	291f      	cmp	r1, #31
    2586:	bf08      	it	eq
    2588:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    258a:	b34b      	cbz	r3, 25e0 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    258c:	2b1f      	cmp	r3, #31
    258e:	bf08      	it	eq
    2590:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    2592:	b33a      	cbz	r2, 25e4 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    2594:	2a07      	cmp	r2, #7
    2596:	bf08      	it	eq
    2598:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    259a:	f003 031f 	and.w	r3, r3, #31
    259e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    25a2:	0312      	lsls	r2, r2, #12
    25a4:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    25a8:	4313      	orrs	r3, r2
    25aa:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    25ae:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    25b0:	78d3      	ldrb	r3, [r2, #3]
    25b2:	f043 0303 	orr.w	r3, r3, #3
    25b6:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    25b8:	78d3      	ldrb	r3, [r2, #3]
    25ba:	f043 030c 	orr.w	r3, r3, #12
    25be:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    25c0:	2304      	movs	r3, #4
    25c2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    25c4:	7893      	ldrb	r3, [r2, #2]
    25c6:	f013 0f03 	tst.w	r3, #3
    25ca:	d1fb      	bne.n	25c4 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    25cc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    25d0:	4a05      	ldr	r2, [pc, #20]	; (25e8 <_usb_d_dev_init+0xec>)
    25d2:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    25d4:	2201      	movs	r2, #1
    25d6:	811a      	strh	r2, [r3, #8]
}
    25d8:	2000      	movs	r0, #0
    25da:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    25dc:	2109      	movs	r1, #9
    25de:	e7d4      	b.n	258a <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    25e0:	2319      	movs	r3, #25
    25e2:	e7d6      	b.n	2592 <_usb_d_dev_init+0x96>
		pad_trim = 6;
    25e4:	2206      	movs	r2, #6
    25e6:	e7d8      	b.n	259a <_usb_d_dev_init+0x9e>
    25e8:	20000550 	.word	0x20000550
    25ec:	00001c89 	.word	0x00001c89
    25f0:	00001ecd 	.word	0x00001ecd
    25f4:	00800084 	.word	0x00800084

000025f8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    25f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    25fc:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    25fe:	f013 0f03 	tst.w	r3, #3
    2602:	d129      	bne.n	2658 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2604:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2608:	7893      	ldrb	r3, [r2, #2]
    260a:	f013 0f03 	tst.w	r3, #3
    260e:	d1fb      	bne.n	2608 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    2610:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2614:	781b      	ldrb	r3, [r3, #0]
    2616:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    2618:	f013 0f02 	tst.w	r3, #2
    261c:	d108      	bne.n	2630 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    261e:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2622:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2626:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2628:	7893      	ldrb	r3, [r2, #2]
    262a:	f013 0f03 	tst.w	r3, #3
    262e:	d1fb      	bne.n	2628 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2630:	4b0b      	ldr	r3, [pc, #44]	; (2660 <_usb_d_dev_enable+0x68>)
    2632:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2636:	609a      	str	r2, [r3, #8]
    2638:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    263c:	609a      	str	r2, [r3, #8]
    263e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    2642:	609a      	str	r2, [r3, #8]
    2644:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2648:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    264a:	f240 228d 	movw	r2, #653	; 0x28d
    264e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2652:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    2654:	2000      	movs	r0, #0
    2656:	4770      	bx	lr
		return -USB_ERR_DENIED;
    2658:	f06f 0010 	mvn.w	r0, #16
}
    265c:	4770      	bx	lr
    265e:	bf00      	nop
    2660:	e000e100 	.word	0xe000e100

00002664 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2664:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2668:	8913      	ldrh	r3, [r2, #8]
    266a:	f023 0301 	bic.w	r3, r3, #1
    266e:	041b      	lsls	r3, r3, #16
    2670:	0c1b      	lsrs	r3, r3, #16
    2672:	8113      	strh	r3, [r2, #8]
    2674:	4770      	bx	lr

00002676 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    2676:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    267a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    267e:	7298      	strb	r0, [r3, #10]
    2680:	4770      	bx	lr
	...

00002684 <_usb_d_dev_ep_init>:
{
    2684:	b5f0      	push	{r4, r5, r6, r7, lr}
    2686:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    268a:	f010 050f 	ands.w	r5, r0, #15
    268e:	d04d      	beq.n	272c <_usb_d_dev_ep_init+0xa8>
    2690:	f1be 0f00 	cmp.w	lr, #0
    2694:	bfb4      	ite	lt
    2696:	1cac      	addlt	r4, r5, #2
    2698:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    269a:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    269e:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    26a0:	2d02      	cmp	r5, #2
    26a2:	d947      	bls.n	2734 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    26a4:	f06f 0011 	mvn.w	r0, #17
    26a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    26aa:	f1be 0f00 	cmp.w	lr, #0
    26ae:	db1b      	blt.n	26e8 <_usb_d_dev_ep_init+0x64>
    26b0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    26b4:	4e37      	ldr	r6, [pc, #220]	; (2794 <_usb_d_dev_ep_init+0x110>)
    26b6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    26ba:	2d00      	cmp	r5, #0
    26bc:	d15e      	bne.n	277c <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    26be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    26c2:	4d34      	ldr	r5, [pc, #208]	; (2794 <_usb_d_dev_ep_init+0x110>)
    26c4:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    26c8:	4d33      	ldr	r5, [pc, #204]	; (2798 <_usb_d_dev_ep_init+0x114>)
    26ca:	00a6      	lsls	r6, r4, #2
    26cc:	1933      	adds	r3, r6, r4
    26ce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    26d2:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    26d6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    26da:	3101      	adds	r1, #1
    26dc:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    26e0:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    26e4:	2000      	movs	r0, #0
    26e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    26e8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    26ec:	4e29      	ldr	r6, [pc, #164]	; (2794 <_usb_d_dev_ep_init+0x110>)
    26ee:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    26f2:	686d      	ldr	r5, [r5, #4]
    26f4:	b935      	cbnz	r5, 2704 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    26f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    26fa:	4d26      	ldr	r5, [pc, #152]	; (2794 <_usb_d_dev_ep_init+0x110>)
    26fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    2700:	685f      	ldr	r7, [r3, #4]
    2702:	e7e1      	b.n	26c8 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2704:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2708:	4e22      	ldr	r6, [pc, #136]	; (2794 <_usb_d_dev_ep_init+0x110>)
    270a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    270e:	896d      	ldrh	r5, [r5, #10]
    2710:	4295      	cmp	r5, r2
    2712:	daf0      	bge.n	26f6 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    2714:	f06f 0012 	mvn.w	r0, #18
    2718:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    271a:	f06f 0013 	mvn.w	r0, #19
    271e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2720:	f06f 0013 	mvn.w	r0, #19
    2724:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    2726:	f06f 0012 	mvn.w	r0, #18
    272a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    272c:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    2730:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2732:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    2734:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    2738:	4f17      	ldr	r7, [pc, #92]	; (2798 <_usb_d_dev_ep_init+0x114>)
    273a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    273e:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    2742:	2eff      	cmp	r6, #255	; 0xff
    2744:	d1e9      	bne.n	271a <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    2746:	2900      	cmp	r1, #0
    2748:	d1af      	bne.n	26aa <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    274a:	b125      	cbz	r5, 2756 <_usb_d_dev_ep_init+0xd2>
    274c:	f1be 0f00 	cmp.w	lr, #0
    2750:	bfa4      	itt	ge
    2752:	3502      	addge	r5, #2
    2754:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    2756:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    275a:	4e0f      	ldr	r6, [pc, #60]	; (2798 <_usb_d_dev_ep_init+0x114>)
    275c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2760:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    2764:	2dff      	cmp	r5, #255	; 0xff
    2766:	d1db      	bne.n	2720 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    2768:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    276c:	4e09      	ldr	r6, [pc, #36]	; (2794 <_usb_d_dev_ep_init+0x110>)
    276e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    2772:	2d00      	cmp	r5, #0
    2774:	d0d7      	beq.n	2726 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2776:	f1be 0f00 	cmp.w	lr, #0
    277a:	dbb5      	blt.n	26e8 <_usb_d_dev_ep_init+0x64>
    277c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2780:	4e04      	ldr	r6, [pc, #16]	; (2794 <_usb_d_dev_ep_init+0x110>)
    2782:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2786:	892d      	ldrh	r5, [r5, #8]
    2788:	4295      	cmp	r5, r2
    278a:	da98      	bge.n	26be <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    278c:	f06f 0012 	mvn.w	r0, #18
    2790:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2792:	bf00      	nop
    2794:	00003f84 	.word	0x00003f84
    2798:	20000550 	.word	0x20000550

0000279c <_usb_d_dev_ep_deinit>:
{
    279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    279e:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    27a0:	f010 060f 	ands.w	r6, r0, #15
    27a4:	d00e      	beq.n	27c4 <_usb_d_dev_ep_deinit+0x28>
    27a6:	2f00      	cmp	r7, #0
    27a8:	bfb4      	ite	lt
    27aa:	1cb3      	addlt	r3, r6, #2
    27ac:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    27ae:	2e02      	cmp	r6, #2
    27b0:	d900      	bls.n	27b4 <_usb_d_dev_ep_deinit+0x18>
    27b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    27b4:	461d      	mov	r5, r3
    27b6:	3301      	adds	r3, #1
    27b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    27bc:	4a24      	ldr	r2, [pc, #144]	; (2850 <_usb_d_dev_ep_deinit+0xb4>)
    27be:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    27c2:	e002      	b.n	27ca <_usb_d_dev_ep_deinit+0x2e>
    27c4:	f8df e094 	ldr.w	lr, [pc, #148]	; 285c <_usb_d_dev_ep_deinit+0xc0>
    27c8:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    27ca:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    27ce:	4a21      	ldr	r2, [pc, #132]	; (2854 <_usb_d_dev_ep_deinit+0xb8>)
    27d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27d4:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    27d8:	2aff      	cmp	r2, #255	; 0xff
    27da:	d0ea      	beq.n	27b2 <_usb_d_dev_ep_deinit+0x16>
    27dc:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    27de:	2203      	movs	r2, #3
    27e0:	0ff9      	lsrs	r1, r7, #31
    27e2:	4670      	mov	r0, lr
    27e4:	4b1c      	ldr	r3, [pc, #112]	; (2858 <_usb_d_dev_ep_deinit+0xbc>)
    27e6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    27e8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    27ec:	4a19      	ldr	r2, [pc, #100]	; (2854 <_usb_d_dev_ep_deinit+0xb8>)
    27ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27f2:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    27f6:	f003 0307 	and.w	r3, r3, #7
    27fa:	2b01      	cmp	r3, #1
    27fc:	d016      	beq.n	282c <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    27fe:	2f00      	cmp	r7, #0
    2800:	db1b      	blt.n	283a <_usb_d_dev_ep_deinit+0x9e>
    2802:	0160      	lsls	r0, r4, #5
    2804:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    2808:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    280c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    2810:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    2814:	4b0f      	ldr	r3, [pc, #60]	; (2854 <_usb_d_dev_ep_deinit+0xb8>)
    2816:	00aa      	lsls	r2, r5, #2
    2818:	1951      	adds	r1, r2, r5
    281a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    281e:	2000      	movs	r0, #0
    2820:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    2824:	22ff      	movs	r2, #255	; 0xff
    2826:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    282a:	e7c2      	b.n	27b2 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    282c:	0160      	lsls	r0, r4, #5
    282e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2832:	2300      	movs	r3, #0
    2834:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    2838:	e7ec      	b.n	2814 <_usb_d_dev_ep_deinit+0x78>
    283a:	0176      	lsls	r6, r6, #5
    283c:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    2840:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    2844:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    2848:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    284c:	e7e2      	b.n	2814 <_usb_d_dev_ep_deinit+0x78>
    284e:	bf00      	nop
    2850:	200005b0 	.word	0x200005b0
    2854:	20000550 	.word	0x20000550
    2858:	00001d61 	.word	0x00001d61
    285c:	200005c4 	.word	0x200005c4

00002860 <_usb_d_dev_ep_enable>:
{
    2860:	b5f0      	push	{r4, r5, r6, r7, lr}
    2862:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2864:	f010 000f 	ands.w	r0, r0, #15
    2868:	f000 80a6 	beq.w	29b8 <_usb_d_dev_ep_enable+0x158>
    286c:	2f00      	cmp	r7, #0
    286e:	bfb4      	ite	lt
    2870:	1c83      	addlt	r3, r0, #2
    2872:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2874:	4606      	mov	r6, r0
    2876:	0142      	lsls	r2, r0, #5
    2878:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    287c:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    2880:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2882:	2802      	cmp	r0, #2
    2884:	f240 809f 	bls.w	29c6 <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    2888:	f06f 0011 	mvn.w	r0, #17
    288c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    288e:	f014 0f77 	tst.w	r4, #119	; 0x77
    2892:	f040 8088 	bne.w	29a6 <_usb_d_dev_ep_enable+0x146>
    2896:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    289a:	2111      	movs	r1, #17
    289c:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    28a0:	4c97      	ldr	r4, [pc, #604]	; (2b00 <_usb_d_dev_ep_enable+0x2a0>)
    28a2:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    28a6:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    28aa:	4996      	ldr	r1, [pc, #600]	; (2b04 <_usb_d_dev_ep_enable+0x2a4>)
    28ac:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    28b0:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    28b4:	f200 80cc 	bhi.w	2a50 <_usb_d_dev_ep_enable+0x1f0>
    28b8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    28bc:	f200 810a 	bhi.w	2ad4 <_usb_d_dev_ep_enable+0x274>
    28c0:	2c80      	cmp	r4, #128	; 0x80
    28c2:	f200 80f9 	bhi.w	2ab8 <_usb_d_dev_ep_enable+0x258>
    28c6:	2c40      	cmp	r4, #64	; 0x40
    28c8:	f200 810b 	bhi.w	2ae2 <_usb_d_dev_ep_enable+0x282>
    28cc:	2c20      	cmp	r4, #32
    28ce:	f200 80fa 	bhi.w	2ac6 <_usb_d_dev_ep_enable+0x266>
    28d2:	2c10      	cmp	r4, #16
    28d4:	f200 810c 	bhi.w	2af0 <_usb_d_dev_ep_enable+0x290>
    28d8:	2c08      	cmp	r4, #8
    28da:	bf94      	ite	ls
    28dc:	2700      	movls	r7, #0
    28de:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    28e0:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    28e4:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    28e6:	f3c4 010d 	ubfx	r1, r4, #0, #14
    28ea:	e0b7      	b.n	2a5c <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    28ec:	f014 0f70 	tst.w	r4, #112	; 0x70
    28f0:	d15c      	bne.n	29ac <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    28f2:	4d83      	ldr	r5, [pc, #524]	; (2b00 <_usb_d_dev_ep_enable+0x2a0>)
    28f4:	009f      	lsls	r7, r3, #2
    28f6:	18f9      	adds	r1, r7, r3
    28f8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    28fc:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    2900:	0109      	lsls	r1, r1, #4
    2902:	f001 0170 	and.w	r1, r1, #112	; 0x70
    2906:	430c      	orrs	r4, r1
    2908:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    290c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2910:	443b      	add	r3, r7
    2912:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2916:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    291a:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    291e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2922:	d80f      	bhi.n	2944 <_usb_d_dev_ep_enable+0xe4>
    2924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2928:	d819      	bhi.n	295e <_usb_d_dev_ep_enable+0xfe>
    292a:	2b80      	cmp	r3, #128	; 0x80
    292c:	d819      	bhi.n	2962 <_usb_d_dev_ep_enable+0x102>
    292e:	2b40      	cmp	r3, #64	; 0x40
    2930:	d819      	bhi.n	2966 <_usb_d_dev_ep_enable+0x106>
    2932:	2b20      	cmp	r3, #32
    2934:	d819      	bhi.n	296a <_usb_d_dev_ep_enable+0x10a>
    2936:	2b10      	cmp	r3, #16
    2938:	d819      	bhi.n	296e <_usb_d_dev_ep_enable+0x10e>
    293a:	2b08      	cmp	r3, #8
    293c:	bf94      	ite	ls
    293e:	2300      	movls	r3, #0
    2940:	2301      	movhi	r3, #1
    2942:	e000      	b.n	2946 <_usb_d_dev_ep_enable+0xe6>
    2944:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2946:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    294a:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    294c:	2380      	movs	r3, #128	; 0x80
    294e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    2952:	4b6b      	ldr	r3, [pc, #428]	; (2b00 <_usb_d_dev_ep_enable+0x2a0>)
    2954:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2958:	2000      	movs	r0, #0
    295a:	76b0      	strb	r0, [r6, #26]
    295c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    295e:	2306      	movs	r3, #6
    2960:	e7f1      	b.n	2946 <_usb_d_dev_ep_enable+0xe6>
    2962:	2305      	movs	r3, #5
    2964:	e7ef      	b.n	2946 <_usb_d_dev_ep_enable+0xe6>
    2966:	2304      	movs	r3, #4
    2968:	e7ed      	b.n	2946 <_usb_d_dev_ep_enable+0xe6>
    296a:	2303      	movs	r3, #3
    296c:	e7eb      	b.n	2946 <_usb_d_dev_ep_enable+0xe6>
    296e:	2302      	movs	r3, #2
    2970:	e7e9      	b.n	2946 <_usb_d_dev_ep_enable+0xe6>
    2972:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2974:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2978:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    297a:	2340      	movs	r3, #64	; 0x40
    297c:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    2980:	4b5f      	ldr	r3, [pc, #380]	; (2b00 <_usb_d_dev_ep_enable+0x2a0>)
    2982:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2986:	2000      	movs	r0, #0
    2988:	72b0      	strb	r0, [r6, #10]
    298a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    298c:	2106      	movs	r1, #6
    298e:	e7f1      	b.n	2974 <_usb_d_dev_ep_enable+0x114>
    2990:	2105      	movs	r1, #5
    2992:	e7ef      	b.n	2974 <_usb_d_dev_ep_enable+0x114>
    2994:	2104      	movs	r1, #4
    2996:	e7ed      	b.n	2974 <_usb_d_dev_ep_enable+0x114>
    2998:	2103      	movs	r1, #3
    299a:	e7eb      	b.n	2974 <_usb_d_dev_ep_enable+0x114>
    299c:	2102      	movs	r1, #2
    299e:	e7e9      	b.n	2974 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    29a0:	f06f 0011 	mvn.w	r0, #17
    29a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    29a6:	f06f 0013 	mvn.w	r0, #19
    29aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    29ac:	f06f 0013 	mvn.w	r0, #19
    29b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    29b2:	f06f 0013 	mvn.w	r0, #19
    29b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    29b8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    29bc:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    29c0:	b2e4      	uxtb	r4, r4
    29c2:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    29c4:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    29c6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    29ca:	494d      	ldr	r1, [pc, #308]	; (2b00 <_usb_d_dev_ep_enable+0x2a0>)
    29cc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    29d0:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    29d4:	2dff      	cmp	r5, #255	; 0xff
    29d6:	d0e3      	beq.n	29a0 <_usb_d_dev_ep_enable+0x140>
    29d8:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    29da:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    29dc:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    29e0:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    29e4:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    29e8:	f001 0107 	and.w	r1, r1, #7
    29ec:	2901      	cmp	r1, #1
    29ee:	f43f af4e 	beq.w	288e <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    29f2:	2f00      	cmp	r7, #0
    29f4:	f6ff af7a 	blt.w	28ec <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    29f8:	f014 0f07 	tst.w	r4, #7
    29fc:	d1d9      	bne.n	29b2 <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    29fe:	4d40      	ldr	r5, [pc, #256]	; (2b00 <_usb_d_dev_ep_enable+0x2a0>)
    2a00:	009f      	lsls	r7, r3, #2
    2a02:	18f9      	adds	r1, r7, r3
    2a04:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    2a08:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    2a0c:	f001 0107 	and.w	r1, r1, #7
    2a10:	430c      	orrs	r4, r1
    2a12:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2a16:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2a1a:	443b      	add	r3, r7
    2a1c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2a20:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    2a24:	4b37      	ldr	r3, [pc, #220]	; (2b04 <_usb_d_dev_ep_enable+0x2a4>)
    2a26:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2a2a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    2a2e:	d8a0      	bhi.n	2972 <_usb_d_dev_ep_enable+0x112>
    2a30:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    2a34:	d8aa      	bhi.n	298c <_usb_d_dev_ep_enable+0x12c>
    2a36:	2980      	cmp	r1, #128	; 0x80
    2a38:	d8aa      	bhi.n	2990 <_usb_d_dev_ep_enable+0x130>
    2a3a:	2940      	cmp	r1, #64	; 0x40
    2a3c:	d8aa      	bhi.n	2994 <_usb_d_dev_ep_enable+0x134>
    2a3e:	2920      	cmp	r1, #32
    2a40:	d8aa      	bhi.n	2998 <_usb_d_dev_ep_enable+0x138>
    2a42:	2910      	cmp	r1, #16
    2a44:	d8aa      	bhi.n	299c <_usb_d_dev_ep_enable+0x13c>
    2a46:	2908      	cmp	r1, #8
    2a48:	bf94      	ite	ls
    2a4a:	2100      	movls	r1, #0
    2a4c:	2101      	movhi	r1, #1
    2a4e:	e791      	b.n	2974 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a50:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2a54:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a56:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2a5a:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a5c:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    2a60:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2a62:	2140      	movs	r1, #64	; 0x40
    2a64:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2a68:	2080      	movs	r0, #128	; 0x80
    2a6a:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    2a6e:	4a24      	ldr	r2, [pc, #144]	; (2b00 <_usb_d_dev_ep_enable+0x2a0>)
    2a70:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    2a74:	2000      	movs	r0, #0
    2a76:	72b0      	strb	r0, [r6, #10]
    2a78:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2a7a:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2a7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2a82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2a86:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    2a8a:	016d      	lsls	r5, r5, #5
    2a8c:	1953      	adds	r3, r2, r5
    2a8e:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2a90:	685a      	ldr	r2, [r3, #4]
    2a92:	f364 329b 	bfi	r2, r4, #14, #14
    2a96:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2a98:	685a      	ldr	r2, [r3, #4]
    2a9a:	f360 020d 	bfi	r2, r0, #0, #14
    2a9e:	605a      	str	r2, [r3, #4]
    2aa0:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    2aa4:	22b0      	movs	r2, #176	; 0xb0
    2aa6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2aaa:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2aae:	461d      	mov	r5, r3
    2ab0:	2310      	movs	r3, #16
    2ab2:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    2ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2ab8:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2abc:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2abe:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2ac2:	2705      	movs	r7, #5
    2ac4:	e7ca      	b.n	2a5c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2ac6:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2aca:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2acc:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2ad0:	2703      	movs	r7, #3
    2ad2:	e7c3      	b.n	2a5c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2ad4:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2ad8:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2ada:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2ade:	2706      	movs	r7, #6
    2ae0:	e7bc      	b.n	2a5c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2ae2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2ae6:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2ae8:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2aec:	2704      	movs	r7, #4
    2aee:	e7b5      	b.n	2a5c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2af0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2af4:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2af6:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2afa:	2702      	movs	r7, #2
    2afc:	e7ae      	b.n	2a5c <_usb_d_dev_ep_enable+0x1fc>
    2afe:	bf00      	nop
    2b00:	20000550 	.word	0x20000550
    2b04:	0fffc000 	.word	0x0fffc000

00002b08 <_usb_d_dev_ep_stall>:
{
    2b08:	b470      	push	{r4, r5, r6}
    2b0a:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2b0c:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2b0e:	f010 000f 	ands.w	r0, r0, #15
    2b12:	d008      	beq.n	2b26 <_usb_d_dev_ep_stall+0x1e>
    2b14:	2b00      	cmp	r3, #0
    2b16:	bfb4      	ite	lt
    2b18:	1c83      	addlt	r3, r0, #2
    2b1a:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    2b1c:	2802      	cmp	r0, #2
    2b1e:	d903      	bls.n	2b28 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    2b20:	f06f 0011 	mvn.w	r0, #17
    2b24:	e018      	b.n	2b58 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    2b26:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    2b28:	2901      	cmp	r1, #1
    2b2a:	d017      	beq.n	2b5c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2b2c:	2900      	cmp	r1, #0
    2b2e:	d03a      	beq.n	2ba6 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2b30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2b34:	4a45      	ldr	r2, [pc, #276]	; (2c4c <_usb_d_dev_ep_stall+0x144>)
    2b36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b3a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2b3e:	f003 030f 	and.w	r3, r3, #15
    2b42:	015b      	lsls	r3, r3, #5
    2b44:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2b48:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2b4c:	2310      	movs	r3, #16
    2b4e:	40a3      	lsls	r3, r4
    2b50:	421a      	tst	r2, r3
    2b52:	bf14      	ite	ne
    2b54:	2001      	movne	r0, #1
    2b56:	2000      	moveq	r0, #0
}
    2b58:	bc70      	pop	{r4, r5, r6}
    2b5a:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2b5c:	2510      	movs	r5, #16
    2b5e:	40a5      	lsls	r5, r4
    2b60:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2b62:	493a      	ldr	r1, [pc, #232]	; (2c4c <_usb_d_dev_ep_stall+0x144>)
    2b64:	009e      	lsls	r6, r3, #2
    2b66:	18f2      	adds	r2, r6, r3
    2b68:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2b6c:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2b70:	f002 020f 	and.w	r2, r2, #15
    2b74:	0150      	lsls	r0, r2, #5
    2b76:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2b7a:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2b7e:	2020      	movs	r0, #32
    2b80:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    2b84:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2b86:	0152      	lsls	r2, r2, #5
    2b88:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2b8c:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    2b90:	4433      	add	r3, r6
    2b92:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    2b96:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2b9a:	f042 0208 	orr.w	r2, r2, #8
    2b9e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    2ba2:	2000      	movs	r0, #0
    2ba4:	e7d8      	b.n	2b58 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    2ba6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2baa:	4928      	ldr	r1, [pc, #160]	; (2c4c <_usb_d_dev_ep_stall+0x144>)
    2bac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2bb0:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    2bb4:	f002 020f 	and.w	r2, r2, #15
    2bb8:	0151      	lsls	r1, r2, #5
    2bba:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2bbe:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2bc2:	2010      	movs	r0, #16
    2bc4:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    2bc6:	4205      	tst	r5, r0
    2bc8:	d03c      	beq.n	2c44 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2bca:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2bcc:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2bd0:	2020      	movs	r0, #32
    2bd2:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2bd4:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2bd6:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2bda:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    2bde:	4202      	tst	r2, r0
    2be0:	d007      	beq.n	2bf2 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2be2:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    2be6:	2201      	movs	r2, #1
    2be8:	fa02 f404 	lsl.w	r4, r2, r4
    2bec:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2bee:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2bf2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2bf6:	4815      	ldr	r0, [pc, #84]	; (2c4c <_usb_d_dev_ep_stall+0x144>)
    2bf8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2bfc:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    2c00:	f002 0207 	and.w	r2, r2, #7
    2c04:	2a01      	cmp	r2, #1
    2c06:	d00c      	beq.n	2c22 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    2c08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2c0c:	4a0f      	ldr	r2, [pc, #60]	; (2c4c <_usb_d_dev_ep_stall+0x144>)
    2c0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2c12:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2c16:	f36f 02c3 	bfc	r2, #3, #1
    2c1a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2c1e:	2000      	movs	r0, #0
    2c20:	e79a      	b.n	2b58 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2c22:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2c26:	f012 0f30 	tst.w	r2, #48	; 0x30
    2c2a:	d10d      	bne.n	2c48 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    2c2c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2c30:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    2c34:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2c38:	f36f 02c3 	bfc	r2, #3, #1
    2c3c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2c40:	2000      	movs	r0, #0
    2c42:	e789      	b.n	2b58 <_usb_d_dev_ep_stall+0x50>
    2c44:	2000      	movs	r0, #0
    2c46:	e787      	b.n	2b58 <_usb_d_dev_ep_stall+0x50>
    2c48:	2000      	movs	r0, #0
    2c4a:	e785      	b.n	2b58 <_usb_d_dev_ep_stall+0x50>
    2c4c:	20000550 	.word	0x20000550

00002c50 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    2c50:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    2c52:	f000 040f 	and.w	r4, r0, #15
    2c56:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    2c58:	4a14      	ldr	r2, [pc, #80]	; (2cac <_usb_d_dev_ep_read_req+0x5c>)
    2c5a:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    2c5c:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    2c5e:	6840      	ldr	r0, [r0, #4]
    2c60:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    2c64:	2c02      	cmp	r4, #2
    2c66:	d817      	bhi.n	2c98 <_usb_d_dev_ep_read_req+0x48>
    2c68:	b1c9      	cbz	r1, 2c9e <_usb_d_dev_ep_read_req+0x4e>
    2c6a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2c6e:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    2c72:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    2c74:	2a11      	cmp	r2, #17
    2c76:	d115      	bne.n	2ca4 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2c78:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    2c7c:	f012 0f10 	tst.w	r2, #16
    2c80:	d102      	bne.n	2c88 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    2c82:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    2c84:	bc30      	pop	{r4, r5}
    2c86:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    2c88:	682c      	ldr	r4, [r5, #0]
    2c8a:	686a      	ldr	r2, [r5, #4]
    2c8c:	600c      	str	r4, [r1, #0]
    2c8e:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2c90:	2210      	movs	r2, #16
    2c92:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    2c96:	e7f5      	b.n	2c84 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    2c98:	f06f 0011 	mvn.w	r0, #17
    2c9c:	e7f2      	b.n	2c84 <_usb_d_dev_ep_read_req+0x34>
    2c9e:	f06f 0011 	mvn.w	r0, #17
    2ca2:	e7ef      	b.n	2c84 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    2ca4:	f06f 0012 	mvn.w	r0, #18
    2ca8:	e7ec      	b.n	2c84 <_usb_d_dev_ep_read_req+0x34>
    2caa:	bf00      	nop
    2cac:	20000550 	.word	0x20000550

00002cb0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    2cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cb4:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    2cb6:	7a03      	ldrb	r3, [r0, #8]
    2cb8:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2cba:	f013 030f 	ands.w	r3, r3, #15
    2cbe:	f000 80c2 	beq.w	2e46 <_usb_d_dev_ep_trans+0x196>
    2cc2:	2e00      	cmp	r6, #0
    2cc4:	bfb4      	ite	lt
    2cc6:	1c9a      	addlt	r2, r3, #2
    2cc8:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    2cca:	4614      	mov	r4, r2
    2ccc:	4969      	ldr	r1, [pc, #420]	; (2e74 <_usb_d_dev_ep_trans+0x1c4>)
    2cce:	f101 0760 	add.w	r7, r1, #96	; 0x60
    2cd2:	1c55      	adds	r5, r2, #1
    2cd4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2cd8:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2cdc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2ce0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2ce4:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    2ce8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2cec:	428a      	cmp	r2, r1
    2cee:	d025      	beq.n	2d3c <_usb_d_dev_ep_trans+0x8c>
    2cf0:	1e55      	subs	r5, r2, #1
    2cf2:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    2cf4:	6841      	ldr	r1, [r0, #4]
    2cf6:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    2cf8:	2b02      	cmp	r3, #2
    2cfa:	f200 8092 	bhi.w	2e22 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    2cfe:	6803      	ldr	r3, [r0, #0]
    2d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2d04:	d31c      	bcc.n	2d40 <_usb_d_dev_ep_trans+0x90>
    2d06:	eb03 0c01 	add.w	ip, r3, r1
    2d0a:	f8df e180 	ldr.w	lr, [pc, #384]	; 2e8c <_usb_d_dev_ep_trans+0x1dc>
    2d0e:	45f4      	cmp	ip, lr
    2d10:	d816      	bhi.n	2d40 <_usb_d_dev_ep_trans+0x90>
    2d12:	f013 0f03 	tst.w	r3, #3
    2d16:	d113      	bne.n	2d40 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    2d18:	2e00      	cmp	r6, #0
    2d1a:	db2a      	blt.n	2d72 <_usb_d_dev_ep_trans+0xc2>
    2d1c:	428a      	cmp	r2, r1
    2d1e:	f200 809c 	bhi.w	2e5a <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    2d22:	b34d      	cbz	r5, 2d78 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    2d24:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2d28:	4a52      	ldr	r2, [pc, #328]	; (2e74 <_usb_d_dev_ep_trans+0x1c4>)
    2d2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2d32:	2b00      	cmp	r3, #0
    2d34:	d07b      	beq.n	2e2e <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    2d36:	f04f 0800 	mov.w	r8, #0
    2d3a:	e00c      	b.n	2d56 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2d3c:	4615      	mov	r5, r2
    2d3e:	e7d9      	b.n	2cf4 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    2d40:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2d44:	4a4b      	ldr	r2, [pc, #300]	; (2e74 <_usb_d_dev_ep_trans+0x1c4>)
    2d46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d06a      	beq.n	2e28 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    2d52:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    2d56:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2d5a:	4a46      	ldr	r2, [pc, #280]	; (2e74 <_usb_d_dev_ep_trans+0x1c4>)
    2d5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2d60:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2d64:	f013 0f08 	tst.w	r3, #8
    2d68:	d009      	beq.n	2d7e <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    2d6a:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2d6c:	b003      	add	sp, #12
    2d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    2d72:	f04f 0800 	mov.w	r8, #0
    2d76:	e7ee      	b.n	2d56 <_usb_d_dev_ep_trans+0xa6>
    2d78:	f04f 0800 	mov.w	r8, #0
    2d7c:	e7eb      	b.n	2d56 <_usb_d_dev_ep_trans+0xa6>
    2d7e:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    2d80:	a801      	add	r0, sp, #4
    2d82:	4b3d      	ldr	r3, [pc, #244]	; (2e78 <_usb_d_dev_ep_trans+0x1c8>)
    2d84:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    2d86:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2d8a:	4a3a      	ldr	r2, [pc, #232]	; (2e74 <_usb_d_dev_ep_trans+0x1c4>)
    2d8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2d90:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2d94:	f013 0f40 	tst.w	r3, #64	; 0x40
    2d98:	d13c      	bne.n	2e14 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    2d9a:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    2d9e:	4b35      	ldr	r3, [pc, #212]	; (2e74 <_usb_d_dev_ep_trans+0x1c4>)
    2da0:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    2da4:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2dac:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    2db0:	a801      	add	r0, sp, #4
    2db2:	4b32      	ldr	r3, [pc, #200]	; (2e7c <_usb_d_dev_ep_trans+0x1cc>)
    2db4:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    2db6:	f8da 3000 	ldr.w	r3, [sl]
    2dba:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    2dbe:	f8da 3004 	ldr.w	r3, [sl, #4]
    2dc2:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    2dc6:	2300      	movs	r3, #0
    2dc8:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    2dcc:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    2dce:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2dd2:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    2dd6:	f368 1345 	bfi	r3, r8, #5, #1
    2dda:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2dde:	f89a 3009 	ldrb.w	r3, [sl, #9]
    2de2:	b1e3      	cbz	r3, 2e1e <_usb_d_dev_ep_trans+0x16e>
    2de4:	fab5 f585 	clz	r5, r5
    2de8:	096d      	lsrs	r5, r5, #5
    2dea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2dee:	4b21      	ldr	r3, [pc, #132]	; (2e74 <_usb_d_dev_ep_trans+0x1c4>)
    2df0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2df4:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    2df8:	f365 1304 	bfi	r3, r5, #4, #1
    2dfc:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    2e00:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    2e02:	f04f 0100 	mov.w	r1, #0
    2e06:	4638      	mov	r0, r7
    2e08:	bfb4      	ite	lt
    2e0a:	4b1d      	ldrlt	r3, [pc, #116]	; (2e80 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    2e0c:	4b1d      	ldrge	r3, [pc, #116]	; (2e84 <_usb_d_dev_ep_trans+0x1d4>)
    2e0e:	4798      	blx	r3
	return ERR_NONE;
    2e10:	2000      	movs	r0, #0
    2e12:	e7ab      	b.n	2d6c <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    2e14:	a801      	add	r0, sp, #4
    2e16:	4b19      	ldr	r3, [pc, #100]	; (2e7c <_usb_d_dev_ep_trans+0x1cc>)
    2e18:	4798      	blx	r3
		return USB_BUSY;
    2e1a:	2001      	movs	r0, #1
    2e1c:	e7a6      	b.n	2d6c <_usb_d_dev_ep_trans+0xbc>
    2e1e:	2500      	movs	r5, #0
    2e20:	e7e3      	b.n	2dea <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    2e22:	f06f 0011 	mvn.w	r0, #17
    2e26:	e7a1      	b.n	2d6c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    2e28:	f06f 0012 	mvn.w	r0, #18
    2e2c:	e79e      	b.n	2d6c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    2e2e:	f06f 0011 	mvn.w	r0, #17
    2e32:	e79b      	b.n	2d6c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    2e34:	f06f 0012 	mvn.w	r0, #18
    2e38:	e798      	b.n	2d6c <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    2e3a:	6841      	ldr	r1, [r0, #4]
    2e3c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    2e40:	4f11      	ldr	r7, [pc, #68]	; (2e88 <_usb_d_dev_ep_trans+0x1d8>)
    2e42:	2400      	movs	r4, #0
    2e44:	e75b      	b.n	2cfe <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2e46:	4a0b      	ldr	r2, [pc, #44]	; (2e74 <_usb_d_dev_ep_trans+0x1c4>)
    2e48:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    2e4c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2e50:	428a      	cmp	r2, r1
    2e52:	d0f2      	beq.n	2e3a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    2e54:	4f0c      	ldr	r7, [pc, #48]	; (2e88 <_usb_d_dev_ep_trans+0x1d8>)
    2e56:	2400      	movs	r4, #0
    2e58:	e74a      	b.n	2cf0 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    2e5a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2e5e:	4a05      	ldr	r2, [pc, #20]	; (2e74 <_usb_d_dev_ep_trans+0x1c4>)
    2e60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2e68:	2b00      	cmp	r3, #0
    2e6a:	d0e3      	beq.n	2e34 <_usb_d_dev_ep_trans+0x184>
    2e6c:	f04f 0801 	mov.w	r8, #1
    2e70:	e771      	b.n	2d56 <_usb_d_dev_ep_trans+0xa6>
    2e72:	bf00      	nop
    2e74:	20000550 	.word	0x20000550
    2e78:	00002f51 	.word	0x00002f51
    2e7c:	00002f5f 	.word	0x00002f5f
    2e80:	00001f11 	.word	0x00001f11
    2e84:	00002095 	.word	0x00002095
    2e88:	200005c4 	.word	0x200005c4
    2e8c:	20041fff 	.word	0x20041fff

00002e90 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2e90:	4b06      	ldr	r3, [pc, #24]	; (2eac <_usb_d_dev_register_callback+0x1c>)
    2e92:	2900      	cmp	r1, #0
    2e94:	bf08      	it	eq
    2e96:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    2e98:	2801      	cmp	r0, #1
    2e9a:	d003      	beq.n	2ea4 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2e9c:	b908      	cbnz	r0, 2ea2 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2e9e:	4b04      	ldr	r3, [pc, #16]	; (2eb0 <_usb_d_dev_register_callback+0x20>)
    2ea0:	6619      	str	r1, [r3, #96]	; 0x60
    2ea2:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    2ea4:	4b02      	ldr	r3, [pc, #8]	; (2eb0 <_usb_d_dev_register_callback+0x20>)
    2ea6:	6659      	str	r1, [r3, #100]	; 0x64
    2ea8:	4770      	bx	lr
    2eaa:	bf00      	nop
    2eac:	00001c89 	.word	0x00001c89
    2eb0:	20000550 	.word	0x20000550

00002eb4 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2eb4:	4b09      	ldr	r3, [pc, #36]	; (2edc <_usb_d_dev_register_ep_callback+0x28>)
    2eb6:	2900      	cmp	r1, #0
    2eb8:	bf08      	it	eq
    2eba:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2ebc:	4603      	mov	r3, r0
    2ebe:	b130      	cbz	r0, 2ece <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2ec0:	2801      	cmp	r0, #1
    2ec2:	d007      	beq.n	2ed4 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2ec4:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2ec6:	bf04      	itt	eq
    2ec8:	4b05      	ldreq	r3, [pc, #20]	; (2ee0 <_usb_d_dev_register_ep_callback+0x2c>)
    2eca:	6719      	streq	r1, [r3, #112]	; 0x70
    2ecc:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2ece:	4b04      	ldr	r3, [pc, #16]	; (2ee0 <_usb_d_dev_register_ep_callback+0x2c>)
    2ed0:	6699      	str	r1, [r3, #104]	; 0x68
    2ed2:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2ed4:	4b02      	ldr	r3, [pc, #8]	; (2ee0 <_usb_d_dev_register_ep_callback+0x2c>)
    2ed6:	66d9      	str	r1, [r3, #108]	; 0x6c
    2ed8:	4770      	bx	lr
    2eda:	bf00      	nop
    2edc:	00001c89 	.word	0x00001c89
    2ee0:	20000550 	.word	0x20000550

00002ee4 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    2ee4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2ee6:	4b01      	ldr	r3, [pc, #4]	; (2eec <USB_0_Handler+0x8>)
    2ee8:	4798      	blx	r3
    2eea:	bd08      	pop	{r3, pc}
    2eec:	00002285 	.word	0x00002285

00002ef0 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    2ef0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2ef2:	4b01      	ldr	r3, [pc, #4]	; (2ef8 <USB_1_Handler+0x8>)
    2ef4:	4798      	blx	r3
    2ef6:	bd08      	pop	{r3, pc}
    2ef8:	00002285 	.word	0x00002285

00002efc <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    2efc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2efe:	4b01      	ldr	r3, [pc, #4]	; (2f04 <USB_2_Handler+0x8>)
    2f00:	4798      	blx	r3
    2f02:	bd08      	pop	{r3, pc}
    2f04:	00002285 	.word	0x00002285

00002f08 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    2f08:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2f0a:	4b01      	ldr	r3, [pc, #4]	; (2f10 <USB_3_Handler+0x8>)
    2f0c:	4798      	blx	r3
    2f0e:	bd08      	pop	{r3, pc}
    2f10:	00002285 	.word	0x00002285

00002f14 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    2f14:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2f16:	4805      	ldr	r0, [pc, #20]	; (2f2c <cdc_device_acm_init+0x18>)
    2f18:	4b05      	ldr	r3, [pc, #20]	; (2f30 <cdc_device_acm_init+0x1c>)
    2f1a:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    2f1c:	4b05      	ldr	r3, [pc, #20]	; (2f34 <cdc_device_acm_init+0x20>)
    2f1e:	4798      	blx	r3

	usbdc_start(single_desc);
    2f20:	4805      	ldr	r0, [pc, #20]	; (2f38 <cdc_device_acm_init+0x24>)
    2f22:	4b06      	ldr	r3, [pc, #24]	; (2f3c <cdc_device_acm_init+0x28>)
    2f24:	4798      	blx	r3
	usbdc_attach();
    2f26:	4b06      	ldr	r3, [pc, #24]	; (2f40 <cdc_device_acm_init+0x2c>)
    2f28:	4798      	blx	r3
    2f2a:	bd08      	pop	{r3, pc}
    2f2c:	20000778 	.word	0x20000778
    2f30:	0000381d 	.word	0x0000381d
    2f34:	000031cd 	.word	0x000031cd
    2f38:	20000010 	.word	0x20000010
    2f3c:	0000388d 	.word	0x0000388d
    2f40:	000038c1 	.word	0x000038c1

00002f44 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    2f44:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    2f46:	4b01      	ldr	r3, [pc, #4]	; (2f4c <usb_init+0x8>)
    2f48:	4798      	blx	r3
    2f4a:	bd08      	pop	{r3, pc}
    2f4c:	00002f15 	.word	0x00002f15

00002f50 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2f50:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    2f54:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2f56:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2f58:	f3bf 8f5f 	dmb	sy
    2f5c:	4770      	bx	lr

00002f5e <atomic_leave_critical>:
    2f5e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    2f62:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2f64:	f383 8810 	msr	PRIMASK, r3
    2f68:	4770      	bx	lr
	...

00002f6c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f6e:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    2f70:	780b      	ldrb	r3, [r1, #0]
    2f72:	f3c3 1441 	ubfx	r4, r3, #5, #2
    2f76:	2c01      	cmp	r4, #1
    2f78:	d15e      	bne.n	3038 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2f7a:	888c      	ldrh	r4, [r1, #4]
    2f7c:	4d35      	ldr	r5, [pc, #212]	; (3054 <cdcdf_acm_req+0xe8>)
    2f7e:	782d      	ldrb	r5, [r5, #0]
    2f80:	42a5      	cmp	r5, r4
    2f82:	d003      	beq.n	2f8c <cdcdf_acm_req+0x20>
    2f84:	4d33      	ldr	r5, [pc, #204]	; (3054 <cdcdf_acm_req+0xe8>)
    2f86:	786d      	ldrb	r5, [r5, #1]
    2f88:	42a5      	cmp	r5, r4
    2f8a:	d158      	bne.n	303e <cdcdf_acm_req+0xd2>
    2f8c:	4616      	mov	r6, r2
    2f8e:	460c      	mov	r4, r1
    2f90:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    2f92:	f013 0f80 	tst.w	r3, #128	; 0x80
    2f96:	d10c      	bne.n	2fb2 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    2f98:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    2f9a:	4b2f      	ldr	r3, [pc, #188]	; (3058 <cdcdf_acm_req+0xec>)
    2f9c:	4798      	blx	r3
    2f9e:	4601      	mov	r1, r0
	switch (req->bRequest) {
    2fa0:	7863      	ldrb	r3, [r4, #1]
    2fa2:	2b20      	cmp	r3, #32
    2fa4:	d013      	beq.n	2fce <cdcdf_acm_req+0x62>
    2fa6:	2b22      	cmp	r3, #34	; 0x22
    2fa8:	d032      	beq.n	3010 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    2faa:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    2fae:	b003      	add	sp, #12
    2fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    2fb2:	2a01      	cmp	r2, #1
    2fb4:	d046      	beq.n	3044 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    2fb6:	784b      	ldrb	r3, [r1, #1]
    2fb8:	2b21      	cmp	r3, #33	; 0x21
    2fba:	d145      	bne.n	3048 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2fbc:	88cb      	ldrh	r3, [r1, #6]
    2fbe:	2b07      	cmp	r3, #7
    2fc0:	d145      	bne.n	304e <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2fc2:	2300      	movs	r3, #0
    2fc4:	2207      	movs	r2, #7
    2fc6:	4925      	ldr	r1, [pc, #148]	; (305c <cdcdf_acm_req+0xf0>)
    2fc8:	4c25      	ldr	r4, [pc, #148]	; (3060 <cdcdf_acm_req+0xf4>)
    2fca:	47a0      	blx	r4
    2fcc:	e7ef      	b.n	2fae <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2fce:	2f07      	cmp	r7, #7
    2fd0:	d12b      	bne.n	302a <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    2fd2:	b1be      	cbz	r6, 3004 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2fd4:	6800      	ldr	r0, [r0, #0]
    2fd6:	9000      	str	r0, [sp, #0]
    2fd8:	888a      	ldrh	r2, [r1, #4]
    2fda:	798b      	ldrb	r3, [r1, #6]
    2fdc:	f8ad 2004 	strh.w	r2, [sp, #4]
    2fe0:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2fe4:	4b1b      	ldr	r3, [pc, #108]	; (3054 <cdcdf_acm_req+0xe8>)
    2fe6:	691b      	ldr	r3, [r3, #16]
    2fe8:	b113      	cbz	r3, 2ff0 <cdcdf_acm_req+0x84>
    2fea:	4668      	mov	r0, sp
    2fec:	4798      	blx	r3
    2fee:	b1f8      	cbz	r0, 3030 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    2ff0:	4b18      	ldr	r3, [pc, #96]	; (3054 <cdcdf_acm_req+0xe8>)
    2ff2:	aa02      	add	r2, sp, #8
    2ff4:	e912 0003 	ldmdb	r2, {r0, r1}
    2ff8:	6098      	str	r0, [r3, #8]
    2ffa:	8199      	strh	r1, [r3, #12]
    2ffc:	0c09      	lsrs	r1, r1, #16
    2ffe:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    3000:	2000      	movs	r0, #0
    3002:	e7d4      	b.n	2fae <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    3004:	2300      	movs	r3, #0
    3006:	2207      	movs	r2, #7
    3008:	4628      	mov	r0, r5
    300a:	4c15      	ldr	r4, [pc, #84]	; (3060 <cdcdf_acm_req+0xf4>)
    300c:	47a0      	blx	r4
    300e:	e7ce      	b.n	2fae <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    3010:	2300      	movs	r3, #0
    3012:	461a      	mov	r2, r3
    3014:	4619      	mov	r1, r3
    3016:	4618      	mov	r0, r3
    3018:	4d11      	ldr	r5, [pc, #68]	; (3060 <cdcdf_acm_req+0xf4>)
    301a:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    301c:	4b0d      	ldr	r3, [pc, #52]	; (3054 <cdcdf_acm_req+0xe8>)
    301e:	695b      	ldr	r3, [r3, #20]
    3020:	b143      	cbz	r3, 3034 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    3022:	8860      	ldrh	r0, [r4, #2]
    3024:	4798      	blx	r3
		return ERR_NONE;
    3026:	2000      	movs	r0, #0
    3028:	e7c1      	b.n	2fae <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    302a:	f04f 30ff 	mov.w	r0, #4294967295
    302e:	e7be      	b.n	2fae <cdcdf_acm_req+0x42>
			return ERR_NONE;
    3030:	2000      	movs	r0, #0
    3032:	e7bc      	b.n	2fae <cdcdf_acm_req+0x42>
		return ERR_NONE;
    3034:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    3036:	e7ba      	b.n	2fae <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    3038:	f06f 0009 	mvn.w	r0, #9
    303c:	e7b7      	b.n	2fae <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    303e:	f06f 0009 	mvn.w	r0, #9
    3042:	e7b4      	b.n	2fae <cdcdf_acm_req+0x42>
		return ERR_NONE;
    3044:	2000      	movs	r0, #0
    3046:	e7b2      	b.n	2fae <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    3048:	f06f 000c 	mvn.w	r0, #12
    304c:	e7af      	b.n	2fae <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    304e:	f04f 30ff 	mov.w	r0, #4294967295
    3052:	e7ac      	b.n	2fae <cdcdf_acm_req+0x42>
    3054:	200007b8 	.word	0x200007b8
    3058:	000038cd 	.word	0x000038cd
    305c:	200007c0 	.word	0x200007c0
    3060:	000033a9 	.word	0x000033a9

00003064 <cdcdf_acm_ctrl>:
{
    3064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3068:	b083      	sub	sp, #12
    306a:	4616      	mov	r6, r2
	switch (ctrl) {
    306c:	2901      	cmp	r1, #1
    306e:	d066      	beq.n	313e <cdcdf_acm_ctrl+0xda>
    3070:	b141      	cbz	r1, 3084 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    3072:	2902      	cmp	r1, #2
    3074:	bf0c      	ite	eq
    3076:	f06f 001a 	mvneq.w	r0, #26
    307a:	f06f 000c 	mvnne.w	r0, #12
}
    307e:	b003      	add	sp, #12
    3080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3084:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    3088:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    308a:	2800      	cmp	r0, #0
    308c:	f000 8085 	beq.w	319a <cdcdf_acm_ctrl+0x136>
    3090:	f10a 3bff 	add.w	fp, sl, #4294967295
    3094:	f10a 0301 	add.w	r3, sl, #1
    3098:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    309a:	4f46      	ldr	r7, [pc, #280]	; (31b4 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    309c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 31c4 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    30a0:	f8df 8124 	ldr.w	r8, [pc, #292]	; 31c8 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    30a4:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    30a6:	7943      	ldrb	r3, [r0, #5]
    30a8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    30ac:	2b02      	cmp	r3, #2
    30ae:	d002      	beq.n	30b6 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    30b0:	f06f 0009 	mvn.w	r0, #9
    30b4:	e7e3      	b.n	307e <cdcdf_acm_ctrl+0x1a>
    30b6:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    30ba:	f89b 3000 	ldrb.w	r3, [fp]
    30be:	429a      	cmp	r2, r3
    30c0:	d06e      	beq.n	31a0 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    30c2:	2bff      	cmp	r3, #255	; 0xff
    30c4:	d16f      	bne.n	31a6 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    30c6:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    30ca:	2205      	movs	r2, #5
    30cc:	6871      	ldr	r1, [r6, #4]
    30ce:	4b3a      	ldr	r3, [pc, #232]	; (31b8 <cdcdf_acm_ctrl+0x154>)
    30d0:	4798      	blx	r3
		while (NULL != ep) {
    30d2:	4604      	mov	r4, r0
    30d4:	b1f8      	cbz	r0, 3116 <cdcdf_acm_ctrl+0xb2>
    30d6:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    30da:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    30dc:	7963      	ldrb	r3, [r4, #5]
    30de:	7922      	ldrb	r2, [r4, #4]
    30e0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    30e4:	b292      	uxth	r2, r2
    30e6:	78e1      	ldrb	r1, [r4, #3]
    30e8:	4628      	mov	r0, r5
    30ea:	47b8      	blx	r7
    30ec:	2800      	cmp	r0, #0
    30ee:	d15d      	bne.n	31ac <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    30f0:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    30f4:	bf14      	ite	ne
    30f6:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    30fa:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    30fe:	4628      	mov	r0, r5
    3100:	47c8      	blx	r9
			desc->sod = ep;
    3102:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    3104:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3106:	6871      	ldr	r1, [r6, #4]
    3108:	4420      	add	r0, r4
    310a:	47c0      	blx	r8
		while (NULL != ep) {
    310c:	4604      	mov	r4, r0
    310e:	2800      	cmp	r0, #0
    3110:	d1e3      	bne.n	30da <cdcdf_acm_ctrl+0x76>
    3112:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    3116:	6833      	ldr	r3, [r6, #0]
    3118:	7818      	ldrb	r0, [r3, #0]
    311a:	2204      	movs	r2, #4
    311c:	6871      	ldr	r1, [r6, #4]
    311e:	4418      	add	r0, r3
    3120:	4b25      	ldr	r3, [pc, #148]	; (31b8 <cdcdf_acm_ctrl+0x154>)
    3122:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    3124:	9b00      	ldr	r3, [sp, #0]
    3126:	459b      	cmp	fp, r3
    3128:	d004      	beq.n	3134 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    312a:	2800      	cmp	r0, #0
    312c:	d1ba      	bne.n	30a4 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    312e:	f06f 0009 	mvn.w	r0, #9
    3132:	e7a4      	b.n	307e <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    3134:	2201      	movs	r2, #1
    3136:	4b21      	ldr	r3, [pc, #132]	; (31bc <cdcdf_acm_ctrl+0x158>)
    3138:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    313a:	2000      	movs	r0, #0
    313c:	e79f      	b.n	307e <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    313e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    3140:	b142      	cbz	r2, 3154 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    3142:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    3144:	795b      	ldrb	r3, [r3, #5]
    3146:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    314a:	2b02      	cmp	r3, #2
    314c:	d002      	beq.n	3154 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    314e:	f06f 0009 	mvn.w	r0, #9
    3152:	e794      	b.n	307e <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    3154:	7823      	ldrb	r3, [r4, #0]
    3156:	2bff      	cmp	r3, #255	; 0xff
    3158:	d008      	beq.n	316c <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    315a:	23ff      	movs	r3, #255	; 0xff
    315c:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    315e:	78a0      	ldrb	r0, [r4, #2]
    3160:	4298      	cmp	r0, r3
    3162:	d003      	beq.n	316c <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3164:	4b16      	ldr	r3, [pc, #88]	; (31c0 <cdcdf_acm_ctrl+0x15c>)
    3166:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3168:	23ff      	movs	r3, #255	; 0xff
    316a:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    316c:	7863      	ldrb	r3, [r4, #1]
    316e:	2bff      	cmp	r3, #255	; 0xff
    3170:	d008      	beq.n	3184 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    3172:	23ff      	movs	r3, #255	; 0xff
    3174:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    3176:	78e0      	ldrb	r0, [r4, #3]
    3178:	4298      	cmp	r0, r3
    317a:	d003      	beq.n	3184 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    317c:	4b10      	ldr	r3, [pc, #64]	; (31c0 <cdcdf_acm_ctrl+0x15c>)
    317e:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3180:	23ff      	movs	r3, #255	; 0xff
    3182:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    3184:	7920      	ldrb	r0, [r4, #4]
    3186:	28ff      	cmp	r0, #255	; 0xff
    3188:	d003      	beq.n	3192 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    318a:	4b0d      	ldr	r3, [pc, #52]	; (31c0 <cdcdf_acm_ctrl+0x15c>)
    318c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    318e:	23ff      	movs	r3, #255	; 0xff
    3190:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    3192:	2000      	movs	r0, #0
    3194:	4b09      	ldr	r3, [pc, #36]	; (31bc <cdcdf_acm_ctrl+0x158>)
    3196:	7158      	strb	r0, [r3, #5]
    3198:	e771      	b.n	307e <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    319a:	f06f 0009 	mvn.w	r0, #9
    319e:	e76e      	b.n	307e <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    31a0:	f06f 0011 	mvn.w	r0, #17
    31a4:	e76b      	b.n	307e <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    31a6:	f06f 001b 	mvn.w	r0, #27
    31aa:	e768      	b.n	307e <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    31ac:	f06f 0013 	mvn.w	r0, #19
    31b0:	e765      	b.n	307e <cdcdf_acm_ctrl+0x1a>
    31b2:	bf00      	nop
    31b4:	00000fd5 	.word	0x00000fd5
    31b8:	000038ed 	.word	0x000038ed
    31bc:	200007b8 	.word	0x200007b8
    31c0:	0000103d 	.word	0x0000103d
    31c4:	00001069 	.word	0x00001069
    31c8:	00003927 	.word	0x00003927

000031cc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    31cc:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    31ce:	4b0a      	ldr	r3, [pc, #40]	; (31f8 <cdcdf_acm_init+0x2c>)
    31d0:	4798      	blx	r3
    31d2:	2801      	cmp	r0, #1
    31d4:	d80c      	bhi.n	31f0 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    31d6:	4809      	ldr	r0, [pc, #36]	; (31fc <cdcdf_acm_init+0x30>)
    31d8:	4b09      	ldr	r3, [pc, #36]	; (3200 <cdcdf_acm_init+0x34>)
    31da:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    31dc:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    31de:	3018      	adds	r0, #24
    31e0:	4b08      	ldr	r3, [pc, #32]	; (3204 <cdcdf_acm_init+0x38>)
    31e2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    31e4:	4908      	ldr	r1, [pc, #32]	; (3208 <cdcdf_acm_init+0x3c>)
    31e6:	2001      	movs	r0, #1
    31e8:	4b08      	ldr	r3, [pc, #32]	; (320c <cdcdf_acm_init+0x40>)
    31ea:	4798      	blx	r3
	return ERR_NONE;
    31ec:	2000      	movs	r0, #0
    31ee:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    31f0:	f06f 0010 	mvn.w	r0, #16
}
    31f4:	bd08      	pop	{r3, pc}
    31f6:	bf00      	nop
    31f8:	000038d9 	.word	0x000038d9
    31fc:	200007b8 	.word	0x200007b8
    3200:	00003065 	.word	0x00003065
    3204:	00003879 	.word	0x00003879
    3208:	20000070 	.word	0x20000070
    320c:	000037e5 	.word	0x000037e5

00003210 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    3210:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3212:	4b07      	ldr	r3, [pc, #28]	; (3230 <usbdc_unconfig+0x20>)
    3214:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    3216:	b14c      	cbz	r4, 322c <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    3218:	2600      	movs	r6, #0
    321a:	2501      	movs	r5, #1
    321c:	6863      	ldr	r3, [r4, #4]
    321e:	4632      	mov	r2, r6
    3220:	4629      	mov	r1, r5
    3222:	4620      	mov	r0, r4
    3224:	4798      	blx	r3
		func = func->next;
    3226:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    3228:	2c00      	cmp	r4, #0
    322a:	d1f7      	bne.n	321c <usbdc_unconfig+0xc>
    322c:	bd70      	pop	{r4, r5, r6, pc}
    322e:	bf00      	nop
    3230:	200007dc 	.word	0x200007dc

00003234 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    3234:	b570      	push	{r4, r5, r6, lr}
    3236:	4606      	mov	r6, r0
    3238:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    323a:	4b07      	ldr	r3, [pc, #28]	; (3258 <usbdc_change_notify+0x24>)
    323c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    323e:	b91c      	cbnz	r4, 3248 <usbdc_change_notify+0x14>
    3240:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    3242:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    3244:	2c00      	cmp	r4, #0
    3246:	d0fb      	beq.n	3240 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    3248:	6863      	ldr	r3, [r4, #4]
    324a:	2b00      	cmp	r3, #0
    324c:	d0f9      	beq.n	3242 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    324e:	4629      	mov	r1, r5
    3250:	4630      	mov	r0, r6
    3252:	4798      	blx	r3
    3254:	e7f5      	b.n	3242 <usbdc_change_notify+0xe>
    3256:	bf00      	nop
    3258:	200007dc 	.word	0x200007dc

0000325c <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    325e:	4607      	mov	r7, r0
    3260:	460e      	mov	r6, r1
    3262:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3264:	4b0c      	ldr	r3, [pc, #48]	; (3298 <usbdc_request_handler+0x3c>)
    3266:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    3268:	b91c      	cbnz	r4, 3272 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    326a:	2000      	movs	r0, #0
    326c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    326e:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    3270:	b16c      	cbz	r4, 328e <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    3272:	6863      	ldr	r3, [r4, #4]
    3274:	2b00      	cmp	r3, #0
    3276:	d0fa      	beq.n	326e <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    3278:	462a      	mov	r2, r5
    327a:	4631      	mov	r1, r6
    327c:	4638      	mov	r0, r7
    327e:	4798      	blx	r3
			if (0 == rc) {
    3280:	b138      	cbz	r0, 3292 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    3282:	f110 0f0a 	cmn.w	r0, #10
    3286:	d0f2      	beq.n	326e <usbdc_request_handler+0x12>
				return -1;
    3288:	f04f 30ff 	mov.w	r0, #4294967295
}
    328c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    328e:	2000      	movs	r0, #0
    3290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    3292:	2001      	movs	r0, #1
    3294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3296:	bf00      	nop
    3298:	200007dc 	.word	0x200007dc

0000329c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    329c:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    329e:	4b06      	ldr	r3, [pc, #24]	; (32b8 <usbd_sof_cb+0x1c>)
    32a0:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    32a2:	b91c      	cbnz	r4, 32ac <usbd_sof_cb+0x10>
    32a4:	bd10      	pop	{r4, pc}
		sof = sof->next;
    32a6:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    32a8:	2c00      	cmp	r4, #0
    32aa:	d0fb      	beq.n	32a4 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    32ac:	6863      	ldr	r3, [r4, #4]
    32ae:	2b00      	cmp	r3, #0
    32b0:	d0f9      	beq.n	32a6 <usbd_sof_cb+0xa>
			sof->cb();
    32b2:	4798      	blx	r3
    32b4:	e7f7      	b.n	32a6 <usbd_sof_cb+0xa>
    32b6:	bf00      	nop
    32b8:	200007dc 	.word	0x200007dc

000032bc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    32bc:	b510      	push	{r4, lr}
    32be:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    32c0:	b119      	cbz	r1, 32ca <usbdc_cb_ctl_done+0xe>
    32c2:	2901      	cmp	r1, #1
    32c4:	d026      	beq.n	3314 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    32c6:	2000      	movs	r0, #0
    32c8:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    32ca:	7813      	ldrb	r3, [r2, #0]
    32cc:	2b00      	cmp	r3, #0
    32ce:	d1fa      	bne.n	32c6 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    32d0:	7853      	ldrb	r3, [r2, #1]
    32d2:	2b05      	cmp	r3, #5
    32d4:	d00f      	beq.n	32f6 <usbdc_cb_ctl_done+0x3a>
    32d6:	2b09      	cmp	r3, #9
    32d8:	d1f5      	bne.n	32c6 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    32da:	8852      	ldrh	r2, [r2, #2]
    32dc:	4b10      	ldr	r3, [pc, #64]	; (3320 <usbdc_cb_ctl_done+0x64>)
    32de:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    32e0:	8863      	ldrh	r3, [r4, #2]
    32e2:	2b00      	cmp	r3, #0
    32e4:	bf14      	ite	ne
    32e6:	2104      	movne	r1, #4
    32e8:	2103      	moveq	r1, #3
    32ea:	4b0d      	ldr	r3, [pc, #52]	; (3320 <usbdc_cb_ctl_done+0x64>)
    32ec:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    32ee:	2001      	movs	r0, #1
    32f0:	4b0c      	ldr	r3, [pc, #48]	; (3324 <usbdc_cb_ctl_done+0x68>)
    32f2:	4798      	blx	r3
    32f4:	e7e7      	b.n	32c6 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    32f6:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    32f8:	b2c0      	uxtb	r0, r0
    32fa:	4b0b      	ldr	r3, [pc, #44]	; (3328 <usbdc_cb_ctl_done+0x6c>)
    32fc:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    32fe:	8863      	ldrh	r3, [r4, #2]
    3300:	2b00      	cmp	r3, #0
    3302:	bf14      	ite	ne
    3304:	2103      	movne	r1, #3
    3306:	2102      	moveq	r1, #2
    3308:	4b05      	ldr	r3, [pc, #20]	; (3320 <usbdc_cb_ctl_done+0x64>)
    330a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    330c:	2001      	movs	r0, #1
    330e:	4b05      	ldr	r3, [pc, #20]	; (3324 <usbdc_cb_ctl_done+0x68>)
    3310:	4798      	blx	r3
    3312:	e7d8      	b.n	32c6 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    3314:	2201      	movs	r2, #1
    3316:	4621      	mov	r1, r4
    3318:	2000      	movs	r0, #0
    331a:	4b04      	ldr	r3, [pc, #16]	; (332c <usbdc_cb_ctl_done+0x70>)
    331c:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    331e:	e7d2      	b.n	32c6 <usbdc_cb_ctl_done+0xa>
    3320:	200007dc 	.word	0x200007dc
    3324:	00003235 	.word	0x00003235
    3328:	00000fc9 	.word	0x00000fc9
    332c:	0000325d 	.word	0x0000325d

00003330 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    3330:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    3332:	4b0d      	ldr	r3, [pc, #52]	; (3368 <usbdc_reset+0x38>)
    3334:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    3336:	4d0d      	ldr	r5, [pc, #52]	; (336c <usbdc_reset+0x3c>)
    3338:	2602      	movs	r6, #2
    333a:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    333c:	2400      	movs	r4, #0
    333e:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    3340:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    3342:	4620      	mov	r0, r4
    3344:	4b0a      	ldr	r3, [pc, #40]	; (3370 <usbdc_reset+0x40>)
    3346:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    3348:	7f28      	ldrb	r0, [r5, #28]
    334a:	4b0a      	ldr	r3, [pc, #40]	; (3374 <usbdc_reset+0x44>)
    334c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    334e:	4a0a      	ldr	r2, [pc, #40]	; (3378 <usbdc_reset+0x48>)
    3350:	4621      	mov	r1, r4
    3352:	4620      	mov	r0, r4
    3354:	4d09      	ldr	r5, [pc, #36]	; (337c <usbdc_reset+0x4c>)
    3356:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3358:	4a09      	ldr	r2, [pc, #36]	; (3380 <usbdc_reset+0x50>)
    335a:	4631      	mov	r1, r6
    335c:	4620      	mov	r0, r4
    335e:	47a8      	blx	r5
	usb_d_ep_enable(0);
    3360:	4620      	mov	r0, r4
    3362:	4b08      	ldr	r3, [pc, #32]	; (3384 <usbdc_reset+0x54>)
    3364:	4798      	blx	r3
    3366:	bd70      	pop	{r4, r5, r6, pc}
    3368:	00003211 	.word	0x00003211
    336c:	200007dc 	.word	0x200007dc
    3370:	0000103d 	.word	0x0000103d
    3374:	00001029 	.word	0x00001029
    3378:	000033c9 	.word	0x000033c9
    337c:	0000123d 	.word	0x0000123d
    3380:	000032bd 	.word	0x000032bd
    3384:	00001069 	.word	0x00001069

00003388 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    3388:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    338a:	b110      	cbz	r0, 3392 <usbd_event_cb+0xa>
    338c:	2801      	cmp	r0, #1
    338e:	d004      	beq.n	339a <usbd_event_cb+0x12>
    3390:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    3392:	2000      	movs	r0, #0
    3394:	4b02      	ldr	r3, [pc, #8]	; (33a0 <usbd_event_cb+0x18>)
    3396:	4798      	blx	r3
		break;
    3398:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    339a:	4b02      	ldr	r3, [pc, #8]	; (33a4 <usbd_event_cb+0x1c>)
    339c:	4798      	blx	r3
    339e:	bd08      	pop	{r3, pc}
    33a0:	00003235 	.word	0x00003235
    33a4:	00003331 	.word	0x00003331

000033a8 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    33a8:	b500      	push	{lr}
    33aa:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    33ac:	9101      	str	r1, [sp, #4]
    33ae:	9202      	str	r2, [sp, #8]
    33b0:	f88d 000c 	strb.w	r0, [sp, #12]
    33b4:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    33b8:	a801      	add	r0, sp, #4
    33ba:	4b02      	ldr	r3, [pc, #8]	; (33c4 <usbdc_xfer+0x1c>)
    33bc:	4798      	blx	r3
}
    33be:	b005      	add	sp, #20
    33c0:	f85d fb04 	ldr.w	pc, [sp], #4
    33c4:	000010b5 	.word	0x000010b5

000033c8 <usbdc_cb_ctl_req>:
{
    33c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    33cc:	b083      	sub	sp, #12
    33ce:	4605      	mov	r5, r0
    33d0:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    33d2:	2200      	movs	r2, #0
    33d4:	4b9b      	ldr	r3, [pc, #620]	; (3644 <usbdc_cb_ctl_req+0x27c>)
    33d6:	4798      	blx	r3
    33d8:	f1b0 3fff 	cmp.w	r0, #4294967295
    33dc:	d00b      	beq.n	33f6 <usbdc_cb_ctl_req+0x2e>
    33de:	2801      	cmp	r0, #1
    33e0:	f000 81e3 	beq.w	37aa <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    33e4:	7823      	ldrb	r3, [r4, #0]
    33e6:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    33ea:	d008      	beq.n	33fe <usbdc_cb_ctl_req+0x36>
    33ec:	2a80      	cmp	r2, #128	; 0x80
    33ee:	f000 80f4 	beq.w	35da <usbdc_cb_ctl_req+0x212>
		return false;
    33f2:	2000      	movs	r0, #0
    33f4:	e000      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		return false;
    33f6:	2000      	movs	r0, #0
}
    33f8:	b003      	add	sp, #12
    33fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    33fe:	7862      	ldrb	r2, [r4, #1]
    3400:	3a01      	subs	r2, #1
    3402:	2a0a      	cmp	r2, #10
    3404:	f200 81d3 	bhi.w	37ae <usbdc_cb_ctl_req+0x3e6>
    3408:	e8df f012 	tbh	[pc, r2, lsl #1]
    340c:	01d10060 	.word	0x01d10060
    3410:	01d10076 	.word	0x01d10076
    3414:	01d1000b 	.word	0x01d1000b
    3418:	01d101d1 	.word	0x01d101d1
    341c:	01d10015 	.word	0x01d10015
    3420:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3422:	2301      	movs	r3, #1
    3424:	2200      	movs	r2, #0
    3426:	4611      	mov	r1, r2
    3428:	4628      	mov	r0, r5
    342a:	4c87      	ldr	r4, [pc, #540]	; (3648 <usbdc_cb_ctl_req+0x280>)
    342c:	47a0      	blx	r4
    342e:	fab0 f080 	clz	r0, r0
    3432:	0940      	lsrs	r0, r0, #5
    3434:	e7e0      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    3436:	8862      	ldrh	r2, [r4, #2]
    3438:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    343a:	b1ca      	cbz	r2, 3470 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    343c:	4b83      	ldr	r3, [pc, #524]	; (364c <usbdc_cb_ctl_req+0x284>)
    343e:	681b      	ldr	r3, [r3, #0]
    3440:	6859      	ldr	r1, [r3, #4]
    3442:	6818      	ldr	r0, [r3, #0]
    3444:	4b82      	ldr	r3, [pc, #520]	; (3650 <usbdc_cb_ctl_req+0x288>)
    3446:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3448:	2800      	cmp	r0, #0
    344a:	f000 81be 	beq.w	37ca <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    344e:	78c2      	ldrb	r2, [r0, #3]
    3450:	7881      	ldrb	r1, [r0, #2]
    3452:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    3456:	fa10 f181 	uxtah	r1, r0, r1
    345a:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    345c:	2204      	movs	r2, #4
    345e:	4b7d      	ldr	r3, [pc, #500]	; (3654 <usbdc_cb_ctl_req+0x28c>)
    3460:	4798      	blx	r3
    3462:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    3464:	b130      	cbz	r0, 3474 <usbdc_cb_ctl_req+0xac>
    3466:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3468:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 364c <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    346c:	4f79      	ldr	r7, [pc, #484]	; (3654 <usbdc_cb_ctl_req+0x28c>)
    346e:	e018      	b.n	34a2 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    3470:	4b79      	ldr	r3, [pc, #484]	; (3658 <usbdc_cb_ctl_req+0x290>)
    3472:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3474:	2301      	movs	r3, #1
    3476:	2200      	movs	r2, #0
    3478:	4611      	mov	r1, r2
    347a:	4628      	mov	r0, r5
    347c:	4c72      	ldr	r4, [pc, #456]	; (3648 <usbdc_cb_ctl_req+0x280>)
    347e:	47a0      	blx	r4
    3480:	fab0 f080 	clz	r0, r0
    3484:	0940      	lsrs	r0, r0, #5
    3486:	e7b7      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    3488:	464c      	mov	r4, r9
    348a:	e000      	b.n	348e <usbdc_cb_ctl_req+0xc6>
    348c:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    348e:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    3490:	7803      	ldrb	r3, [r0, #0]
    3492:	4418      	add	r0, r3
    3494:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3496:	2204      	movs	r2, #4
    3498:	9901      	ldr	r1, [sp, #4]
    349a:	47b8      	blx	r7
    349c:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    349e:	2800      	cmp	r0, #0
    34a0:	d0e8      	beq.n	3474 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    34a2:	f890 9002 	ldrb.w	r9, [r0, #2]
    34a6:	45a1      	cmp	r9, r4
    34a8:	d0f1      	beq.n	348e <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    34aa:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    34ae:	2c00      	cmp	r4, #0
    34b0:	d0ea      	beq.n	3488 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    34b2:	2600      	movs	r6, #0
    34b4:	6863      	ldr	r3, [r4, #4]
    34b6:	466a      	mov	r2, sp
    34b8:	4631      	mov	r1, r6
    34ba:	4620      	mov	r0, r4
    34bc:	4798      	blx	r3
    34be:	2800      	cmp	r0, #0
    34c0:	d0e4      	beq.n	348c <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    34c2:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    34c4:	2c00      	cmp	r4, #0
    34c6:	d1f5      	bne.n	34b4 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    34c8:	464c      	mov	r4, r9
    34ca:	e7e0      	b.n	348e <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    34cc:	f003 031f 	and.w	r3, r3, #31
    34d0:	2b02      	cmp	r3, #2
    34d2:	f040 816e 	bne.w	37b2 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    34d6:	88e3      	ldrh	r3, [r4, #6]
    34d8:	b10b      	cbz	r3, 34de <usbdc_cb_ctl_req+0x116>
			return false;
    34da:	2000      	movs	r0, #0
    34dc:	e78c      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    34de:	88a0      	ldrh	r0, [r4, #4]
    34e0:	2100      	movs	r1, #0
    34e2:	b2c0      	uxtb	r0, r0
    34e4:	4b5d      	ldr	r3, [pc, #372]	; (365c <usbdc_cb_ctl_req+0x294>)
    34e6:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    34e8:	2301      	movs	r3, #1
    34ea:	2200      	movs	r2, #0
    34ec:	4611      	mov	r1, r2
    34ee:	4628      	mov	r0, r5
    34f0:	4c55      	ldr	r4, [pc, #340]	; (3648 <usbdc_cb_ctl_req+0x280>)
    34f2:	47a0      	blx	r4
		return true;
    34f4:	2001      	movs	r0, #1
    34f6:	e77f      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    34f8:	f003 031f 	and.w	r3, r3, #31
    34fc:	2b02      	cmp	r3, #2
    34fe:	f040 815a 	bne.w	37b6 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    3502:	88e3      	ldrh	r3, [r4, #6]
    3504:	b10b      	cbz	r3, 350a <usbdc_cb_ctl_req+0x142>
			return false;
    3506:	2000      	movs	r0, #0
    3508:	e776      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    350a:	88a0      	ldrh	r0, [r4, #4]
    350c:	2101      	movs	r1, #1
    350e:	b2c0      	uxtb	r0, r0
    3510:	4b52      	ldr	r3, [pc, #328]	; (365c <usbdc_cb_ctl_req+0x294>)
    3512:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3514:	2301      	movs	r3, #1
    3516:	2200      	movs	r2, #0
    3518:	4611      	mov	r1, r2
    351a:	4628      	mov	r0, r5
    351c:	4c4a      	ldr	r4, [pc, #296]	; (3648 <usbdc_cb_ctl_req+0x280>)
    351e:	47a0      	blx	r4
		return true;
    3520:	2001      	movs	r0, #1
    3522:	e769      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    3524:	8866      	ldrh	r6, [r4, #2]
    3526:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    3528:	4a48      	ldr	r2, [pc, #288]	; (364c <usbdc_cb_ctl_req+0x284>)
    352a:	6813      	ldr	r3, [r2, #0]
    352c:	7ed2      	ldrb	r2, [r2, #27]
    352e:	6859      	ldr	r1, [r3, #4]
    3530:	6818      	ldr	r0, [r3, #0]
    3532:	4b47      	ldr	r3, [pc, #284]	; (3650 <usbdc_cb_ctl_req+0x288>)
    3534:	4798      	blx	r3
	if (NULL == ifc) {
    3536:	2800      	cmp	r0, #0
    3538:	d045      	beq.n	35c6 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    353a:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    353c:	78c2      	ldrb	r2, [r0, #3]
    353e:	7881      	ldrb	r1, [r0, #2]
    3540:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3544:	fa10 f181 	uxtah	r1, r0, r1
    3548:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    354a:	2204      	movs	r2, #4
    354c:	4b41      	ldr	r3, [pc, #260]	; (3654 <usbdc_cb_ctl_req+0x28c>)
    354e:	4798      	blx	r3
    3550:	4603      	mov	r3, r0
    3552:	2800      	cmp	r0, #0
    3554:	d039      	beq.n	35ca <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3556:	2704      	movs	r7, #4
    3558:	4d3e      	ldr	r5, [pc, #248]	; (3654 <usbdc_cb_ctl_req+0x28c>)
    355a:	e008      	b.n	356e <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    355c:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    355e:	7803      	ldrb	r3, [r0, #0]
    3560:	4418      	add	r0, r3
    3562:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3564:	463a      	mov	r2, r7
    3566:	9901      	ldr	r1, [sp, #4]
    3568:	47a8      	blx	r5
		if (NULL == ifc) {
    356a:	4603      	mov	r3, r0
    356c:	b378      	cbz	r0, 35ce <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    356e:	789a      	ldrb	r2, [r3, #2]
    3570:	42a2      	cmp	r2, r4
    3572:	d1f3      	bne.n	355c <usbdc_cb_ctl_req+0x194>
    3574:	78da      	ldrb	r2, [r3, #3]
    3576:	42b2      	cmp	r2, r6
    3578:	d1f0      	bne.n	355c <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    357a:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    357c:	4b33      	ldr	r3, [pc, #204]	; (364c <usbdc_cb_ctl_req+0x284>)
    357e:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    3580:	b33d      	cbz	r5, 35d2 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3582:	2701      	movs	r7, #1
    3584:	686b      	ldr	r3, [r5, #4]
    3586:	466a      	mov	r2, sp
    3588:	4639      	mov	r1, r7
    358a:	4628      	mov	r0, r5
    358c:	4798      	blx	r3
    358e:	b120      	cbz	r0, 359a <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    3590:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    3592:	2d00      	cmp	r5, #0
    3594:	d1f6      	bne.n	3584 <usbdc_cb_ctl_req+0x1bc>
	return false;
    3596:	2000      	movs	r0, #0
    3598:	e72e      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    359a:	686b      	ldr	r3, [r5, #4]
    359c:	466a      	mov	r2, sp
    359e:	2100      	movs	r1, #0
    35a0:	4628      	mov	r0, r5
    35a2:	4798      	blx	r3
    35a4:	b9b8      	cbnz	r0, 35d6 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    35a6:	b136      	cbz	r6, 35b6 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    35a8:	4a28      	ldr	r2, [pc, #160]	; (364c <usbdc_cb_ctl_req+0x284>)
    35aa:	2301      	movs	r3, #1
    35ac:	fa03 f404 	lsl.w	r4, r3, r4
    35b0:	7f53      	ldrb	r3, [r2, #29]
    35b2:	4323      	orrs	r3, r4
    35b4:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    35b6:	2300      	movs	r3, #0
    35b8:	461a      	mov	r2, r3
    35ba:	4619      	mov	r1, r3
    35bc:	4618      	mov	r0, r3
    35be:	4c22      	ldr	r4, [pc, #136]	; (3648 <usbdc_cb_ctl_req+0x280>)
    35c0:	47a0      	blx	r4
			return true;
    35c2:	2001      	movs	r0, #1
    35c4:	e718      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		return false;
    35c6:	2000      	movs	r0, #0
    35c8:	e716      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		return false;
    35ca:	2000      	movs	r0, #0
    35cc:	e714      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
			return false;
    35ce:	2000      	movs	r0, #0
    35d0:	e712      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
	return false;
    35d2:	2000      	movs	r0, #0
    35d4:	e710      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
			return false;
    35d6:	2000      	movs	r0, #0
    35d8:	e70e      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    35da:	7862      	ldrb	r2, [r4, #1]
    35dc:	2a0a      	cmp	r2, #10
    35de:	f200 80ec 	bhi.w	37ba <usbdc_cb_ctl_req+0x3f2>
    35e2:	e8df f012 	tbh	[pc, r2, lsl #1]
    35e6:	008e      	.short	0x008e
    35e8:	00ea00ea 	.word	0x00ea00ea
    35ec:	00ea00ea 	.word	0x00ea00ea
    35f0:	000b00ea 	.word	0x000b00ea
    35f4:	008200ea 	.word	0x008200ea
    35f8:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    35fc:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    35fe:	0a13      	lsrs	r3, r2, #8
    3600:	2b02      	cmp	r3, #2
    3602:	d02d      	beq.n	3660 <usbdc_cb_ctl_req+0x298>
    3604:	2b03      	cmp	r3, #3
    3606:	d050      	beq.n	36aa <usbdc_cb_ctl_req+0x2e2>
    3608:	2b01      	cmp	r3, #1
    360a:	d001      	beq.n	3610 <usbdc_cb_ctl_req+0x248>
	return false;
    360c:	2000      	movs	r0, #0
    360e:	e6f3      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    3610:	88e2      	ldrh	r2, [r4, #6]
    3612:	2a12      	cmp	r2, #18
    3614:	bf28      	it	cs
    3616:	2212      	movcs	r2, #18
    3618:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    361a:	4b0c      	ldr	r3, [pc, #48]	; (364c <usbdc_cb_ctl_req+0x284>)
    361c:	681b      	ldr	r3, [r3, #0]
    361e:	2201      	movs	r2, #1
    3620:	6859      	ldr	r1, [r3, #4]
    3622:	6818      	ldr	r0, [r3, #0]
    3624:	4b0b      	ldr	r3, [pc, #44]	; (3654 <usbdc_cb_ctl_req+0x28c>)
    3626:	4798      	blx	r3
	if (!dev_desc) {
    3628:	4601      	mov	r1, r0
    362a:	2800      	cmp	r0, #0
    362c:	f000 80c7 	beq.w	37be <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    3630:	2300      	movs	r3, #0
    3632:	4622      	mov	r2, r4
    3634:	4628      	mov	r0, r5
    3636:	4c04      	ldr	r4, [pc, #16]	; (3648 <usbdc_cb_ctl_req+0x280>)
    3638:	47a0      	blx	r4
    363a:	fab0 f080 	clz	r0, r0
    363e:	0940      	lsrs	r0, r0, #5
    3640:	e6da      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
    3642:	bf00      	nop
    3644:	0000325d 	.word	0x0000325d
    3648:	000033a9 	.word	0x000033a9
    364c:	200007dc 	.word	0x200007dc
    3650:	0000396d 	.word	0x0000396d
    3654:	000038ed 	.word	0x000038ed
    3658:	00003211 	.word	0x00003211
    365c:	000011d5 	.word	0x000011d5
	uint16_t length   = req->wLength;
    3660:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3662:	4b5b      	ldr	r3, [pc, #364]	; (37d0 <usbdc_cb_ctl_req+0x408>)
    3664:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    3666:	681b      	ldr	r3, [r3, #0]
    3668:	3201      	adds	r2, #1
    366a:	b2d2      	uxtb	r2, r2
    366c:	6859      	ldr	r1, [r3, #4]
    366e:	6818      	ldr	r0, [r3, #0]
    3670:	4b58      	ldr	r3, [pc, #352]	; (37d4 <usbdc_cb_ctl_req+0x40c>)
    3672:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3674:	4601      	mov	r1, r0
    3676:	2800      	cmp	r0, #0
    3678:	f000 80a3 	beq.w	37c2 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    367c:	78c3      	ldrb	r3, [r0, #3]
    367e:	7882      	ldrb	r2, [r0, #2]
    3680:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    3684:	b292      	uxth	r2, r2
	if (length <= total_len) {
    3686:	4294      	cmp	r4, r2
    3688:	d90d      	bls.n	36a6 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    368a:	3e01      	subs	r6, #1
    368c:	4226      	tst	r6, r4
    368e:	bf0c      	ite	eq
    3690:	2301      	moveq	r3, #1
    3692:	2300      	movne	r3, #0
		length = total_len;
    3694:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    3696:	4622      	mov	r2, r4
    3698:	4628      	mov	r0, r5
    369a:	4c4f      	ldr	r4, [pc, #316]	; (37d8 <usbdc_cb_ctl_req+0x410>)
    369c:	47a0      	blx	r4
    369e:	fab0 f080 	clz	r0, r0
    36a2:	0940      	lsrs	r0, r0, #5
    36a4:	e6a8      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    36a6:	2300      	movs	r3, #0
    36a8:	e7f5      	b.n	3696 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    36aa:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    36ac:	4b48      	ldr	r3, [pc, #288]	; (37d0 <usbdc_cb_ctl_req+0x408>)
    36ae:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    36b0:	681b      	ldr	r3, [r3, #0]
    36b2:	b2d2      	uxtb	r2, r2
    36b4:	6859      	ldr	r1, [r3, #4]
    36b6:	6818      	ldr	r0, [r3, #0]
    36b8:	4b48      	ldr	r3, [pc, #288]	; (37dc <usbdc_cb_ctl_req+0x414>)
    36ba:	4798      	blx	r3
	if (NULL == str_desc) {
    36bc:	4601      	mov	r1, r0
    36be:	2800      	cmp	r0, #0
    36c0:	f000 8081 	beq.w	37c6 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    36c4:	7802      	ldrb	r2, [r0, #0]
    36c6:	4294      	cmp	r4, r2
    36c8:	d90d      	bls.n	36e6 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    36ca:	3e01      	subs	r6, #1
    36cc:	4226      	tst	r6, r4
    36ce:	bf0c      	ite	eq
    36d0:	2301      	moveq	r3, #1
    36d2:	2300      	movne	r3, #0
		length = str_desc[0];
    36d4:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    36d6:	4622      	mov	r2, r4
    36d8:	4628      	mov	r0, r5
    36da:	4c3f      	ldr	r4, [pc, #252]	; (37d8 <usbdc_cb_ctl_req+0x410>)
    36dc:	47a0      	blx	r4
    36de:	fab0 f080 	clz	r0, r0
    36e2:	0940      	lsrs	r0, r0, #5
    36e4:	e688      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    36e6:	2300      	movs	r3, #0
    36e8:	e7f5      	b.n	36d6 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    36ea:	4939      	ldr	r1, [pc, #228]	; (37d0 <usbdc_cb_ctl_req+0x408>)
    36ec:	694b      	ldr	r3, [r1, #20]
    36ee:	7eca      	ldrb	r2, [r1, #27]
    36f0:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    36f2:	2300      	movs	r3, #0
    36f4:	2201      	movs	r2, #1
    36f6:	6949      	ldr	r1, [r1, #20]
    36f8:	4628      	mov	r0, r5
    36fa:	4c37      	ldr	r4, [pc, #220]	; (37d8 <usbdc_cb_ctl_req+0x410>)
    36fc:	47a0      	blx	r4
		return true;
    36fe:	2001      	movs	r0, #1
    3700:	e67a      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3702:	f003 031f 	and.w	r3, r3, #31
    3706:	2b01      	cmp	r3, #1
    3708:	d903      	bls.n	3712 <usbdc_cb_ctl_req+0x34a>
    370a:	2b02      	cmp	r3, #2
    370c:	d010      	beq.n	3730 <usbdc_cb_ctl_req+0x368>
		return false;
    370e:	2000      	movs	r0, #0
    3710:	e672      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		st = 0;
    3712:	2300      	movs	r3, #0
    3714:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    3716:	492e      	ldr	r1, [pc, #184]	; (37d0 <usbdc_cb_ctl_req+0x408>)
    3718:	694b      	ldr	r3, [r1, #20]
    371a:	f8bd 2000 	ldrh.w	r2, [sp]
    371e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    3720:	2300      	movs	r3, #0
    3722:	2202      	movs	r2, #2
    3724:	6949      	ldr	r1, [r1, #20]
    3726:	4628      	mov	r0, r5
    3728:	4c2b      	ldr	r4, [pc, #172]	; (37d8 <usbdc_cb_ctl_req+0x410>)
    372a:	47a0      	blx	r4
	return true;
    372c:	2001      	movs	r0, #1
    372e:	e663      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    3730:	88a0      	ldrh	r0, [r4, #4]
    3732:	2102      	movs	r1, #2
    3734:	b2c0      	uxtb	r0, r0
    3736:	4b2a      	ldr	r3, [pc, #168]	; (37e0 <usbdc_cb_ctl_req+0x418>)
    3738:	4798      	blx	r3
		if (st < 0) {
    373a:	2800      	cmp	r0, #0
    373c:	db03      	blt.n	3746 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    373e:	f000 0001 	and.w	r0, r0, #1
    3742:	9000      	str	r0, [sp, #0]
    3744:	e7e7      	b.n	3716 <usbdc_cb_ctl_req+0x34e>
			return false;
    3746:	2000      	movs	r0, #0
    3748:	e656      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    374a:	4b21      	ldr	r3, [pc, #132]	; (37d0 <usbdc_cb_ctl_req+0x408>)
    374c:	7f5b      	ldrb	r3, [r3, #29]
    374e:	88a2      	ldrh	r2, [r4, #4]
    3750:	4113      	asrs	r3, r2
    3752:	f013 0f01 	tst.w	r3, #1
    3756:	d012      	beq.n	377e <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3758:	4b1d      	ldr	r3, [pc, #116]	; (37d0 <usbdc_cb_ctl_req+0x408>)
    375a:	691d      	ldr	r5, [r3, #16]
	return false;
    375c:	2000      	movs	r0, #0
	while (NULL != func) {
    375e:	2d00      	cmp	r5, #0
    3760:	f43f ae4a 	beq.w	33f8 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    3764:	2602      	movs	r6, #2
    3766:	686b      	ldr	r3, [r5, #4]
    3768:	4622      	mov	r2, r4
    376a:	4631      	mov	r1, r6
    376c:	4628      	mov	r0, r5
    376e:	4798      	blx	r3
    3770:	2800      	cmp	r0, #0
    3772:	da0f      	bge.n	3794 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    3774:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    3776:	2d00      	cmp	r5, #0
    3778:	d1f5      	bne.n	3766 <usbdc_cb_ctl_req+0x39e>
	return false;
    377a:	2000      	movs	r0, #0
    377c:	e63c      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    377e:	4914      	ldr	r1, [pc, #80]	; (37d0 <usbdc_cb_ctl_req+0x408>)
    3780:	694b      	ldr	r3, [r1, #20]
    3782:	2000      	movs	r0, #0
    3784:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3786:	4603      	mov	r3, r0
    3788:	2201      	movs	r2, #1
    378a:	6949      	ldr	r1, [r1, #20]
    378c:	4c12      	ldr	r4, [pc, #72]	; (37d8 <usbdc_cb_ctl_req+0x410>)
    378e:	47a0      	blx	r4
		return true;
    3790:	2001      	movs	r0, #1
    3792:	e631      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    3794:	490e      	ldr	r1, [pc, #56]	; (37d0 <usbdc_cb_ctl_req+0x408>)
    3796:	694b      	ldr	r3, [r1, #20]
    3798:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    379a:	2300      	movs	r3, #0
    379c:	2201      	movs	r2, #1
    379e:	6949      	ldr	r1, [r1, #20]
    37a0:	4618      	mov	r0, r3
    37a2:	4c0d      	ldr	r4, [pc, #52]	; (37d8 <usbdc_cb_ctl_req+0x410>)
    37a4:	47a0      	blx	r4
			return true;
    37a6:	2001      	movs	r0, #1
    37a8:	e626      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		return true;
    37aa:	2001      	movs	r0, #1
    37ac:	e624      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		return false;
    37ae:	2000      	movs	r0, #0
    37b0:	e622      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		return false;
    37b2:	2000      	movs	r0, #0
    37b4:	e620      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		return false;
    37b6:	2000      	movs	r0, #0
    37b8:	e61e      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		return false;
    37ba:	2000      	movs	r0, #0
    37bc:	e61c      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		return false;
    37be:	2000      	movs	r0, #0
    37c0:	e61a      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		return false;
    37c2:	2000      	movs	r0, #0
    37c4:	e618      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
		return false;
    37c6:	2000      	movs	r0, #0
    37c8:	e616      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
			return false;
    37ca:	2000      	movs	r0, #0
    37cc:	e614      	b.n	33f8 <usbdc_cb_ctl_req+0x30>
    37ce:	bf00      	nop
    37d0:	200007dc 	.word	0x200007dc
    37d4:	0000396d 	.word	0x0000396d
    37d8:	000033a9 	.word	0x000033a9
    37dc:	000039d5 	.word	0x000039d5
    37e0:	000011d5 	.word	0x000011d5

000037e4 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    37e4:	b508      	push	{r3, lr}
	switch (type) {
    37e6:	2801      	cmp	r0, #1
    37e8:	d007      	beq.n	37fa <usbdc_register_handler+0x16>
    37ea:	b110      	cbz	r0, 37f2 <usbdc_register_handler+0xe>
    37ec:	2802      	cmp	r0, #2
    37ee:	d008      	beq.n	3802 <usbdc_register_handler+0x1e>
    37f0:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    37f2:	4806      	ldr	r0, [pc, #24]	; (380c <usbdc_register_handler+0x28>)
    37f4:	4b06      	ldr	r3, [pc, #24]	; (3810 <usbdc_register_handler+0x2c>)
    37f6:	4798      	blx	r3
		break;
    37f8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    37fa:	4806      	ldr	r0, [pc, #24]	; (3814 <usbdc_register_handler+0x30>)
    37fc:	4b04      	ldr	r3, [pc, #16]	; (3810 <usbdc_register_handler+0x2c>)
    37fe:	4798      	blx	r3
		break;
    3800:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    3802:	4805      	ldr	r0, [pc, #20]	; (3818 <usbdc_register_handler+0x34>)
    3804:	4b02      	ldr	r3, [pc, #8]	; (3810 <usbdc_register_handler+0x2c>)
    3806:	4798      	blx	r3
    3808:	bd08      	pop	{r3, pc}
    380a:	bf00      	nop
    380c:	200007e0 	.word	0x200007e0
    3810:	000012e5 	.word	0x000012e5
    3814:	200007e4 	.word	0x200007e4
    3818:	200007e8 	.word	0x200007e8

0000381c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    381c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    381e:	4605      	mov	r5, r0
    3820:	f240 3255 	movw	r2, #853	; 0x355
    3824:	490c      	ldr	r1, [pc, #48]	; (3858 <usbdc_init+0x3c>)
    3826:	3000      	adds	r0, #0
    3828:	bf18      	it	ne
    382a:	2001      	movne	r0, #1
    382c:	4b0b      	ldr	r3, [pc, #44]	; (385c <usbdc_init+0x40>)
    382e:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    3830:	4b0b      	ldr	r3, [pc, #44]	; (3860 <usbdc_init+0x44>)
    3832:	4798      	blx	r3
	if (rc < 0) {
    3834:	2800      	cmp	r0, #0
    3836:	db0e      	blt.n	3856 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    3838:	4c0a      	ldr	r4, [pc, #40]	; (3864 <usbdc_init+0x48>)
    383a:	2220      	movs	r2, #32
    383c:	2100      	movs	r1, #0
    383e:	4620      	mov	r0, r4
    3840:	4b09      	ldr	r3, [pc, #36]	; (3868 <usbdc_init+0x4c>)
    3842:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    3844:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    3846:	4909      	ldr	r1, [pc, #36]	; (386c <usbdc_init+0x50>)
    3848:	2000      	movs	r0, #0
    384a:	4c09      	ldr	r4, [pc, #36]	; (3870 <usbdc_init+0x54>)
    384c:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    384e:	4909      	ldr	r1, [pc, #36]	; (3874 <usbdc_init+0x58>)
    3850:	2001      	movs	r0, #1
    3852:	47a0      	blx	r4

	return 0;
    3854:	2000      	movs	r0, #0
}
    3856:	bd38      	pop	{r3, r4, r5, pc}
    3858:	00003fa8 	.word	0x00003fa8
    385c:	00001289 	.word	0x00001289
    3860:	00000f3d 	.word	0x00000f3d
    3864:	200007dc 	.word	0x200007dc
    3868:	00003ba1 	.word	0x00003ba1
    386c:	0000329d 	.word	0x0000329d
    3870:	00000fa5 	.word	0x00000fa5
    3874:	00003389 	.word	0x00003389

00003878 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    3878:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    387a:	4601      	mov	r1, r0
    387c:	4801      	ldr	r0, [pc, #4]	; (3884 <usbdc_register_function+0xc>)
    387e:	4b02      	ldr	r3, [pc, #8]	; (3888 <usbdc_register_function+0x10>)
    3880:	4798      	blx	r3
    3882:	bd08      	pop	{r3, pc}
    3884:	200007ec 	.word	0x200007ec
    3888:	000012e5 	.word	0x000012e5

0000388c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    388c:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    388e:	4b0a      	ldr	r3, [pc, #40]	; (38b8 <usbdc_start+0x2c>)
    3890:	7e9b      	ldrb	r3, [r3, #26]
    3892:	b95b      	cbnz	r3, 38ac <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    3894:	b168      	cbz	r0, 38b2 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    3896:	4b08      	ldr	r3, [pc, #32]	; (38b8 <usbdc_start+0x2c>)
    3898:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    389a:	6802      	ldr	r2, [r0, #0]
    389c:	79d2      	ldrb	r2, [r2, #7]
    389e:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    38a0:	2201      	movs	r2, #1
    38a2:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    38a4:	4b05      	ldr	r3, [pc, #20]	; (38bc <usbdc_start+0x30>)
    38a6:	4798      	blx	r3
	return ERR_NONE;
    38a8:	2000      	movs	r0, #0
    38aa:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    38ac:	f06f 0003 	mvn.w	r0, #3
    38b0:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    38b2:	f06f 0008 	mvn.w	r0, #8
}
    38b6:	bd08      	pop	{r3, pc}
    38b8:	200007dc 	.word	0x200007dc
    38bc:	00000fb1 	.word	0x00000fb1

000038c0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    38c0:	b508      	push	{r3, lr}
	usb_d_attach();
    38c2:	4b01      	ldr	r3, [pc, #4]	; (38c8 <usbdc_attach+0x8>)
    38c4:	4798      	blx	r3
    38c6:	bd08      	pop	{r3, pc}
    38c8:	00000fbd 	.word	0x00000fbd

000038cc <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    38cc:	4b01      	ldr	r3, [pc, #4]	; (38d4 <usbdc_get_ctrl_buffer+0x8>)
    38ce:	6958      	ldr	r0, [r3, #20]
    38d0:	4770      	bx	lr
    38d2:	bf00      	nop
    38d4:	200007dc 	.word	0x200007dc

000038d8 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    38d8:	4b03      	ldr	r3, [pc, #12]	; (38e8 <usbdc_get_state+0x10>)
    38da:	7e98      	ldrb	r0, [r3, #26]
    38dc:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    38e0:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    38e2:	bf18      	it	ne
    38e4:	2010      	movne	r0, #16
    38e6:	4770      	bx	lr
    38e8:	200007dc 	.word	0x200007dc

000038ec <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    38ec:	4288      	cmp	r0, r1
    38ee:	d214      	bcs.n	391a <usb_find_desc+0x2e>
	return desc[0];
    38f0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    38f2:	2b01      	cmp	r3, #1
    38f4:	d913      	bls.n	391e <usb_find_desc+0x32>
{
    38f6:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    38f8:	7844      	ldrb	r4, [r0, #1]
    38fa:	4294      	cmp	r4, r2
    38fc:	d00a      	beq.n	3914 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    38fe:	4418      	add	r0, r3
	while (desc < eof) {
    3900:	4281      	cmp	r1, r0
    3902:	d906      	bls.n	3912 <usb_find_desc+0x26>
	return desc[0];
    3904:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3906:	2b01      	cmp	r3, #1
    3908:	d90b      	bls.n	3922 <usb_find_desc+0x36>
	return desc[1];
    390a:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    390c:	4294      	cmp	r4, r2
    390e:	d1f6      	bne.n	38fe <usb_find_desc+0x12>
    3910:	e000      	b.n	3914 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3912:	2000      	movs	r0, #0
}
    3914:	f85d 4b04 	ldr.w	r4, [sp], #4
    3918:	4770      	bx	lr
	return NULL;
    391a:	2000      	movs	r0, #0
    391c:	4770      	bx	lr
		_desc_len_check();
    391e:	2000      	movs	r0, #0
    3920:	4770      	bx	lr
    3922:	2000      	movs	r0, #0
    3924:	e7f6      	b.n	3914 <usb_find_desc+0x28>

00003926 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3926:	4288      	cmp	r0, r1
    3928:	d216      	bcs.n	3958 <usb_find_ep_desc+0x32>
	return desc[0];
    392a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    392c:	2b01      	cmp	r3, #1
    392e:	d915      	bls.n	395c <usb_find_ep_desc+0x36>
	return desc[1];
    3930:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3932:	2a04      	cmp	r2, #4
    3934:	d014      	beq.n	3960 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3936:	2a05      	cmp	r2, #5
    3938:	d00b      	beq.n	3952 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    393a:	4418      	add	r0, r3
	while (desc < eof) {
    393c:	4281      	cmp	r1, r0
    393e:	d909      	bls.n	3954 <usb_find_ep_desc+0x2e>
	return desc[0];
    3940:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3942:	2b01      	cmp	r3, #1
    3944:	d90e      	bls.n	3964 <usb_find_ep_desc+0x3e>
	return desc[1];
    3946:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3948:	2a04      	cmp	r2, #4
    394a:	d00d      	beq.n	3968 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    394c:	2a05      	cmp	r2, #5
    394e:	d1f4      	bne.n	393a <usb_find_ep_desc+0x14>
    3950:	e00b      	b.n	396a <usb_find_ep_desc+0x44>
    3952:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3954:	2000      	movs	r0, #0
    3956:	4770      	bx	lr
    3958:	2000      	movs	r0, #0
    395a:	4770      	bx	lr
		_desc_len_check();
    395c:	2000      	movs	r0, #0
    395e:	4770      	bx	lr
	return NULL;
    3960:	2000      	movs	r0, #0
    3962:	4770      	bx	lr
		_desc_len_check();
    3964:	2000      	movs	r0, #0
    3966:	4770      	bx	lr
	return NULL;
    3968:	2000      	movs	r0, #0
}
    396a:	4770      	bx	lr

0000396c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    396c:	b538      	push	{r3, r4, r5, lr}
    396e:	460c      	mov	r4, r1
    3970:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    3972:	2202      	movs	r2, #2
    3974:	4b16      	ldr	r3, [pc, #88]	; (39d0 <usb_find_cfg_desc+0x64>)
    3976:	4798      	blx	r3
	if (!desc) {
    3978:	4603      	mov	r3, r0
    397a:	b1e8      	cbz	r0, 39b8 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    397c:	4284      	cmp	r4, r0
    397e:	d91d      	bls.n	39bc <usb_find_cfg_desc+0x50>
		_desc_len_check();
    3980:	7802      	ldrb	r2, [r0, #0]
    3982:	2a01      	cmp	r2, #1
    3984:	d91c      	bls.n	39c0 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    3986:	7842      	ldrb	r2, [r0, #1]
    3988:	2a02      	cmp	r2, #2
    398a:	d11b      	bne.n	39c4 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    398c:	7942      	ldrb	r2, [r0, #5]
    398e:	42aa      	cmp	r2, r5
    3990:	d012      	beq.n	39b8 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    3992:	78d9      	ldrb	r1, [r3, #3]
    3994:	789a      	ldrb	r2, [r3, #2]
    3996:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    399a:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    399e:	429c      	cmp	r4, r3
    39a0:	d909      	bls.n	39b6 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    39a2:	781a      	ldrb	r2, [r3, #0]
    39a4:	2a01      	cmp	r2, #1
    39a6:	d90f      	bls.n	39c8 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    39a8:	785a      	ldrb	r2, [r3, #1]
    39aa:	2a02      	cmp	r2, #2
    39ac:	d10e      	bne.n	39cc <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    39ae:	795a      	ldrb	r2, [r3, #5]
    39b0:	42aa      	cmp	r2, r5
    39b2:	d1ee      	bne.n	3992 <usb_find_cfg_desc+0x26>
    39b4:	e000      	b.n	39b8 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    39b6:	2300      	movs	r3, #0
}
    39b8:	4618      	mov	r0, r3
    39ba:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    39bc:	2300      	movs	r3, #0
    39be:	e7fb      	b.n	39b8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    39c0:	2300      	movs	r3, #0
    39c2:	e7f9      	b.n	39b8 <usb_find_cfg_desc+0x4c>
	return NULL;
    39c4:	2300      	movs	r3, #0
    39c6:	e7f7      	b.n	39b8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    39c8:	2300      	movs	r3, #0
    39ca:	e7f5      	b.n	39b8 <usb_find_cfg_desc+0x4c>
	return NULL;
    39cc:	2300      	movs	r3, #0
    39ce:	e7f3      	b.n	39b8 <usb_find_cfg_desc+0x4c>
    39d0:	000038ed 	.word	0x000038ed

000039d4 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    39d4:	4288      	cmp	r0, r1
    39d6:	d217      	bcs.n	3a08 <usb_find_str_desc+0x34>
{
    39d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39dc:	460d      	mov	r5, r1
    39de:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    39e0:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    39e2:	f04f 0803 	mov.w	r8, #3
    39e6:	4f0c      	ldr	r7, [pc, #48]	; (3a18 <usb_find_str_desc+0x44>)
    39e8:	4642      	mov	r2, r8
    39ea:	4629      	mov	r1, r5
    39ec:	47b8      	blx	r7
		if (desc) {
    39ee:	4603      	mov	r3, r0
    39f0:	b170      	cbz	r0, 3a10 <usb_find_str_desc+0x3c>
	return desc[0];
    39f2:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    39f4:	2801      	cmp	r0, #1
    39f6:	d90a      	bls.n	3a0e <usb_find_str_desc+0x3a>
			if (i == str_index) {
    39f8:	42a6      	cmp	r6, r4
    39fa:	d009      	beq.n	3a10 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    39fc:	4418      	add	r0, r3
    39fe:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    3a00:	4285      	cmp	r5, r0
    3a02:	d8f1      	bhi.n	39e8 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    3a04:	2300      	movs	r3, #0
    3a06:	e003      	b.n	3a10 <usb_find_str_desc+0x3c>
    3a08:	2300      	movs	r3, #0
}
    3a0a:	4618      	mov	r0, r3
    3a0c:	4770      	bx	lr
			_desc_len_check();
    3a0e:	2300      	movs	r3, #0
}
    3a10:	4618      	mov	r0, r3
    3a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a16:	bf00      	nop
    3a18:	000038ed 	.word	0x000038ed

00003a1c <__libc_init_array>:
    3a1c:	b570      	push	{r4, r5, r6, lr}
    3a1e:	4e0f      	ldr	r6, [pc, #60]	; (3a5c <__libc_init_array+0x40>)
    3a20:	4d0f      	ldr	r5, [pc, #60]	; (3a60 <__libc_init_array+0x44>)
    3a22:	1b76      	subs	r6, r6, r5
    3a24:	10b6      	asrs	r6, r6, #2
    3a26:	bf18      	it	ne
    3a28:	2400      	movne	r4, #0
    3a2a:	d005      	beq.n	3a38 <__libc_init_array+0x1c>
    3a2c:	3401      	adds	r4, #1
    3a2e:	f855 3b04 	ldr.w	r3, [r5], #4
    3a32:	4798      	blx	r3
    3a34:	42a6      	cmp	r6, r4
    3a36:	d1f9      	bne.n	3a2c <__libc_init_array+0x10>
    3a38:	4e0a      	ldr	r6, [pc, #40]	; (3a64 <__libc_init_array+0x48>)
    3a3a:	4d0b      	ldr	r5, [pc, #44]	; (3a68 <__libc_init_array+0x4c>)
    3a3c:	1b76      	subs	r6, r6, r5
    3a3e:	f000 fac1 	bl	3fc4 <_init>
    3a42:	10b6      	asrs	r6, r6, #2
    3a44:	bf18      	it	ne
    3a46:	2400      	movne	r4, #0
    3a48:	d006      	beq.n	3a58 <__libc_init_array+0x3c>
    3a4a:	3401      	adds	r4, #1
    3a4c:	f855 3b04 	ldr.w	r3, [r5], #4
    3a50:	4798      	blx	r3
    3a52:	42a6      	cmp	r6, r4
    3a54:	d1f9      	bne.n	3a4a <__libc_init_array+0x2e>
    3a56:	bd70      	pop	{r4, r5, r6, pc}
    3a58:	bd70      	pop	{r4, r5, r6, pc}
    3a5a:	bf00      	nop
    3a5c:	00003fd0 	.word	0x00003fd0
    3a60:	00003fd0 	.word	0x00003fd0
    3a64:	00003fd8 	.word	0x00003fd8
    3a68:	00003fd0 	.word	0x00003fd0

00003a6c <memcpy>:
    3a6c:	4684      	mov	ip, r0
    3a6e:	ea41 0300 	orr.w	r3, r1, r0
    3a72:	f013 0303 	ands.w	r3, r3, #3
    3a76:	d16d      	bne.n	3b54 <memcpy+0xe8>
    3a78:	3a40      	subs	r2, #64	; 0x40
    3a7a:	d341      	bcc.n	3b00 <memcpy+0x94>
    3a7c:	f851 3b04 	ldr.w	r3, [r1], #4
    3a80:	f840 3b04 	str.w	r3, [r0], #4
    3a84:	f851 3b04 	ldr.w	r3, [r1], #4
    3a88:	f840 3b04 	str.w	r3, [r0], #4
    3a8c:	f851 3b04 	ldr.w	r3, [r1], #4
    3a90:	f840 3b04 	str.w	r3, [r0], #4
    3a94:	f851 3b04 	ldr.w	r3, [r1], #4
    3a98:	f840 3b04 	str.w	r3, [r0], #4
    3a9c:	f851 3b04 	ldr.w	r3, [r1], #4
    3aa0:	f840 3b04 	str.w	r3, [r0], #4
    3aa4:	f851 3b04 	ldr.w	r3, [r1], #4
    3aa8:	f840 3b04 	str.w	r3, [r0], #4
    3aac:	f851 3b04 	ldr.w	r3, [r1], #4
    3ab0:	f840 3b04 	str.w	r3, [r0], #4
    3ab4:	f851 3b04 	ldr.w	r3, [r1], #4
    3ab8:	f840 3b04 	str.w	r3, [r0], #4
    3abc:	f851 3b04 	ldr.w	r3, [r1], #4
    3ac0:	f840 3b04 	str.w	r3, [r0], #4
    3ac4:	f851 3b04 	ldr.w	r3, [r1], #4
    3ac8:	f840 3b04 	str.w	r3, [r0], #4
    3acc:	f851 3b04 	ldr.w	r3, [r1], #4
    3ad0:	f840 3b04 	str.w	r3, [r0], #4
    3ad4:	f851 3b04 	ldr.w	r3, [r1], #4
    3ad8:	f840 3b04 	str.w	r3, [r0], #4
    3adc:	f851 3b04 	ldr.w	r3, [r1], #4
    3ae0:	f840 3b04 	str.w	r3, [r0], #4
    3ae4:	f851 3b04 	ldr.w	r3, [r1], #4
    3ae8:	f840 3b04 	str.w	r3, [r0], #4
    3aec:	f851 3b04 	ldr.w	r3, [r1], #4
    3af0:	f840 3b04 	str.w	r3, [r0], #4
    3af4:	f851 3b04 	ldr.w	r3, [r1], #4
    3af8:	f840 3b04 	str.w	r3, [r0], #4
    3afc:	3a40      	subs	r2, #64	; 0x40
    3afe:	d2bd      	bcs.n	3a7c <memcpy+0x10>
    3b00:	3230      	adds	r2, #48	; 0x30
    3b02:	d311      	bcc.n	3b28 <memcpy+0xbc>
    3b04:	f851 3b04 	ldr.w	r3, [r1], #4
    3b08:	f840 3b04 	str.w	r3, [r0], #4
    3b0c:	f851 3b04 	ldr.w	r3, [r1], #4
    3b10:	f840 3b04 	str.w	r3, [r0], #4
    3b14:	f851 3b04 	ldr.w	r3, [r1], #4
    3b18:	f840 3b04 	str.w	r3, [r0], #4
    3b1c:	f851 3b04 	ldr.w	r3, [r1], #4
    3b20:	f840 3b04 	str.w	r3, [r0], #4
    3b24:	3a10      	subs	r2, #16
    3b26:	d2ed      	bcs.n	3b04 <memcpy+0x98>
    3b28:	320c      	adds	r2, #12
    3b2a:	d305      	bcc.n	3b38 <memcpy+0xcc>
    3b2c:	f851 3b04 	ldr.w	r3, [r1], #4
    3b30:	f840 3b04 	str.w	r3, [r0], #4
    3b34:	3a04      	subs	r2, #4
    3b36:	d2f9      	bcs.n	3b2c <memcpy+0xc0>
    3b38:	3204      	adds	r2, #4
    3b3a:	d008      	beq.n	3b4e <memcpy+0xe2>
    3b3c:	07d2      	lsls	r2, r2, #31
    3b3e:	bf1c      	itt	ne
    3b40:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3b44:	f800 3b01 	strbne.w	r3, [r0], #1
    3b48:	d301      	bcc.n	3b4e <memcpy+0xe2>
    3b4a:	880b      	ldrh	r3, [r1, #0]
    3b4c:	8003      	strh	r3, [r0, #0]
    3b4e:	4660      	mov	r0, ip
    3b50:	4770      	bx	lr
    3b52:	bf00      	nop
    3b54:	2a08      	cmp	r2, #8
    3b56:	d313      	bcc.n	3b80 <memcpy+0x114>
    3b58:	078b      	lsls	r3, r1, #30
    3b5a:	d08d      	beq.n	3a78 <memcpy+0xc>
    3b5c:	f010 0303 	ands.w	r3, r0, #3
    3b60:	d08a      	beq.n	3a78 <memcpy+0xc>
    3b62:	f1c3 0304 	rsb	r3, r3, #4
    3b66:	1ad2      	subs	r2, r2, r3
    3b68:	07db      	lsls	r3, r3, #31
    3b6a:	bf1c      	itt	ne
    3b6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3b70:	f800 3b01 	strbne.w	r3, [r0], #1
    3b74:	d380      	bcc.n	3a78 <memcpy+0xc>
    3b76:	f831 3b02 	ldrh.w	r3, [r1], #2
    3b7a:	f820 3b02 	strh.w	r3, [r0], #2
    3b7e:	e77b      	b.n	3a78 <memcpy+0xc>
    3b80:	3a04      	subs	r2, #4
    3b82:	d3d9      	bcc.n	3b38 <memcpy+0xcc>
    3b84:	3a01      	subs	r2, #1
    3b86:	f811 3b01 	ldrb.w	r3, [r1], #1
    3b8a:	f800 3b01 	strb.w	r3, [r0], #1
    3b8e:	d2f9      	bcs.n	3b84 <memcpy+0x118>
    3b90:	780b      	ldrb	r3, [r1, #0]
    3b92:	7003      	strb	r3, [r0, #0]
    3b94:	784b      	ldrb	r3, [r1, #1]
    3b96:	7043      	strb	r3, [r0, #1]
    3b98:	788b      	ldrb	r3, [r1, #2]
    3b9a:	7083      	strb	r3, [r0, #2]
    3b9c:	4660      	mov	r0, ip
    3b9e:	4770      	bx	lr

00003ba0 <memset>:
    3ba0:	b470      	push	{r4, r5, r6}
    3ba2:	0786      	lsls	r6, r0, #30
    3ba4:	d046      	beq.n	3c34 <memset+0x94>
    3ba6:	1e54      	subs	r4, r2, #1
    3ba8:	2a00      	cmp	r2, #0
    3baa:	d041      	beq.n	3c30 <memset+0x90>
    3bac:	b2ca      	uxtb	r2, r1
    3bae:	4603      	mov	r3, r0
    3bb0:	e002      	b.n	3bb8 <memset+0x18>
    3bb2:	f114 34ff 	adds.w	r4, r4, #4294967295
    3bb6:	d33b      	bcc.n	3c30 <memset+0x90>
    3bb8:	f803 2b01 	strb.w	r2, [r3], #1
    3bbc:	079d      	lsls	r5, r3, #30
    3bbe:	d1f8      	bne.n	3bb2 <memset+0x12>
    3bc0:	2c03      	cmp	r4, #3
    3bc2:	d92e      	bls.n	3c22 <memset+0x82>
    3bc4:	b2cd      	uxtb	r5, r1
    3bc6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    3bca:	2c0f      	cmp	r4, #15
    3bcc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    3bd0:	d919      	bls.n	3c06 <memset+0x66>
    3bd2:	f103 0210 	add.w	r2, r3, #16
    3bd6:	4626      	mov	r6, r4
    3bd8:	3e10      	subs	r6, #16
    3bda:	2e0f      	cmp	r6, #15
    3bdc:	f842 5c10 	str.w	r5, [r2, #-16]
    3be0:	f842 5c0c 	str.w	r5, [r2, #-12]
    3be4:	f842 5c08 	str.w	r5, [r2, #-8]
    3be8:	f842 5c04 	str.w	r5, [r2, #-4]
    3bec:	f102 0210 	add.w	r2, r2, #16
    3bf0:	d8f2      	bhi.n	3bd8 <memset+0x38>
    3bf2:	f1a4 0210 	sub.w	r2, r4, #16
    3bf6:	f022 020f 	bic.w	r2, r2, #15
    3bfa:	f004 040f 	and.w	r4, r4, #15
    3bfe:	3210      	adds	r2, #16
    3c00:	2c03      	cmp	r4, #3
    3c02:	4413      	add	r3, r2
    3c04:	d90d      	bls.n	3c22 <memset+0x82>
    3c06:	461e      	mov	r6, r3
    3c08:	4622      	mov	r2, r4
    3c0a:	3a04      	subs	r2, #4
    3c0c:	2a03      	cmp	r2, #3
    3c0e:	f846 5b04 	str.w	r5, [r6], #4
    3c12:	d8fa      	bhi.n	3c0a <memset+0x6a>
    3c14:	1f22      	subs	r2, r4, #4
    3c16:	f022 0203 	bic.w	r2, r2, #3
    3c1a:	3204      	adds	r2, #4
    3c1c:	4413      	add	r3, r2
    3c1e:	f004 0403 	and.w	r4, r4, #3
    3c22:	b12c      	cbz	r4, 3c30 <memset+0x90>
    3c24:	b2c9      	uxtb	r1, r1
    3c26:	441c      	add	r4, r3
    3c28:	f803 1b01 	strb.w	r1, [r3], #1
    3c2c:	429c      	cmp	r4, r3
    3c2e:	d1fb      	bne.n	3c28 <memset+0x88>
    3c30:	bc70      	pop	{r4, r5, r6}
    3c32:	4770      	bx	lr
    3c34:	4614      	mov	r4, r2
    3c36:	4603      	mov	r3, r0
    3c38:	e7c2      	b.n	3bc0 <memset+0x20>
    3c3a:	bf00      	nop

00003c3c <register_fini>:
    3c3c:	4b02      	ldr	r3, [pc, #8]	; (3c48 <register_fini+0xc>)
    3c3e:	b113      	cbz	r3, 3c46 <register_fini+0xa>
    3c40:	4802      	ldr	r0, [pc, #8]	; (3c4c <register_fini+0x10>)
    3c42:	f000 b805 	b.w	3c50 <atexit>
    3c46:	4770      	bx	lr
    3c48:	00000000 	.word	0x00000000
    3c4c:	00003c5d 	.word	0x00003c5d

00003c50 <atexit>:
    3c50:	2300      	movs	r3, #0
    3c52:	4601      	mov	r1, r0
    3c54:	461a      	mov	r2, r3
    3c56:	4618      	mov	r0, r3
    3c58:	f000 b81e 	b.w	3c98 <__register_exitproc>

00003c5c <__libc_fini_array>:
    3c5c:	b538      	push	{r3, r4, r5, lr}
    3c5e:	4c0a      	ldr	r4, [pc, #40]	; (3c88 <__libc_fini_array+0x2c>)
    3c60:	4d0a      	ldr	r5, [pc, #40]	; (3c8c <__libc_fini_array+0x30>)
    3c62:	1b64      	subs	r4, r4, r5
    3c64:	10a4      	asrs	r4, r4, #2
    3c66:	d00a      	beq.n	3c7e <__libc_fini_array+0x22>
    3c68:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    3c6c:	3b01      	subs	r3, #1
    3c6e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3c72:	3c01      	subs	r4, #1
    3c74:	f855 3904 	ldr.w	r3, [r5], #-4
    3c78:	4798      	blx	r3
    3c7a:	2c00      	cmp	r4, #0
    3c7c:	d1f9      	bne.n	3c72 <__libc_fini_array+0x16>
    3c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3c82:	f000 b9a9 	b.w	3fd8 <_fini>
    3c86:	bf00      	nop
    3c88:	00003fe8 	.word	0x00003fe8
    3c8c:	00003fe4 	.word	0x00003fe4

00003c90 <__retarget_lock_acquire_recursive>:
    3c90:	4770      	bx	lr
    3c92:	bf00      	nop

00003c94 <__retarget_lock_release_recursive>:
    3c94:	4770      	bx	lr
    3c96:	bf00      	nop

00003c98 <__register_exitproc>:
    3c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3c9c:	4d2c      	ldr	r5, [pc, #176]	; (3d50 <__register_exitproc+0xb8>)
    3c9e:	4606      	mov	r6, r0
    3ca0:	6828      	ldr	r0, [r5, #0]
    3ca2:	4698      	mov	r8, r3
    3ca4:	460f      	mov	r7, r1
    3ca6:	4691      	mov	r9, r2
    3ca8:	f7ff fff2 	bl	3c90 <__retarget_lock_acquire_recursive>
    3cac:	4b29      	ldr	r3, [pc, #164]	; (3d54 <__register_exitproc+0xbc>)
    3cae:	681c      	ldr	r4, [r3, #0]
    3cb0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	d03e      	beq.n	3d36 <__register_exitproc+0x9e>
    3cb8:	685a      	ldr	r2, [r3, #4]
    3cba:	2a1f      	cmp	r2, #31
    3cbc:	dc1c      	bgt.n	3cf8 <__register_exitproc+0x60>
    3cbe:	f102 0e01 	add.w	lr, r2, #1
    3cc2:	b176      	cbz	r6, 3ce2 <__register_exitproc+0x4a>
    3cc4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    3cc8:	2401      	movs	r4, #1
    3cca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    3cce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    3cd2:	4094      	lsls	r4, r2
    3cd4:	4320      	orrs	r0, r4
    3cd6:	2e02      	cmp	r6, #2
    3cd8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    3cdc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    3ce0:	d023      	beq.n	3d2a <__register_exitproc+0x92>
    3ce2:	3202      	adds	r2, #2
    3ce4:	f8c3 e004 	str.w	lr, [r3, #4]
    3ce8:	6828      	ldr	r0, [r5, #0]
    3cea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    3cee:	f7ff ffd1 	bl	3c94 <__retarget_lock_release_recursive>
    3cf2:	2000      	movs	r0, #0
    3cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3cf8:	4b17      	ldr	r3, [pc, #92]	; (3d58 <__register_exitproc+0xc0>)
    3cfa:	b30b      	cbz	r3, 3d40 <__register_exitproc+0xa8>
    3cfc:	f44f 70c8 	mov.w	r0, #400	; 0x190
    3d00:	f3af 8000 	nop.w
    3d04:	4603      	mov	r3, r0
    3d06:	b1d8      	cbz	r0, 3d40 <__register_exitproc+0xa8>
    3d08:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    3d0c:	6002      	str	r2, [r0, #0]
    3d0e:	2100      	movs	r1, #0
    3d10:	6041      	str	r1, [r0, #4]
    3d12:	460a      	mov	r2, r1
    3d14:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    3d18:	f04f 0e01 	mov.w	lr, #1
    3d1c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    3d20:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    3d24:	2e00      	cmp	r6, #0
    3d26:	d0dc      	beq.n	3ce2 <__register_exitproc+0x4a>
    3d28:	e7cc      	b.n	3cc4 <__register_exitproc+0x2c>
    3d2a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    3d2e:	430c      	orrs	r4, r1
    3d30:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    3d34:	e7d5      	b.n	3ce2 <__register_exitproc+0x4a>
    3d36:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    3d3a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    3d3e:	e7bb      	b.n	3cb8 <__register_exitproc+0x20>
    3d40:	6828      	ldr	r0, [r5, #0]
    3d42:	f7ff ffa7 	bl	3c94 <__retarget_lock_release_recursive>
    3d46:	f04f 30ff 	mov.w	r0, #4294967295
    3d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3d4e:	bf00      	nop
    3d50:	200004a0 	.word	0x200004a0
    3d54:	00003fc0 	.word	0x00003fc0
    3d58:	00000000 	.word	0x00000000
    3d5c:	682f2e2e 	.word	0x682f2e2e
    3d60:	732f6c61 	.word	0x732f6c61
    3d64:	682f6372 	.word	0x682f6372
    3d68:	615f6c61 	.word	0x615f6c61
    3d6c:	735f6364 	.word	0x735f6364
    3d70:	2e636e79 	.word	0x2e636e79
    3d74:	00000063 	.word	0x00000063
    3d78:	682f2e2e 	.word	0x682f2e2e
    3d7c:	732f6c61 	.word	0x732f6c61
    3d80:	682f6372 	.word	0x682f6372
    3d84:	695f6c61 	.word	0x695f6c61
    3d88:	00632e6f 	.word	0x00632e6f
    3d8c:	682f2e2e 	.word	0x682f2e2e
    3d90:	732f6c61 	.word	0x732f6c61
    3d94:	682f6372 	.word	0x682f6372
    3d98:	735f6c61 	.word	0x735f6c61
    3d9c:	6d5f6970 	.word	0x6d5f6970
    3da0:	7973615f 	.word	0x7973615f
    3da4:	632e636e 	.word	0x632e636e
    3da8:	00000000 	.word	0x00000000
    3dac:	682f2e2e 	.word	0x682f2e2e
    3db0:	732f6c61 	.word	0x732f6c61
    3db4:	682f6372 	.word	0x682f6372
    3db8:	745f6c61 	.word	0x745f6c61
    3dbc:	72656d69 	.word	0x72656d69
    3dc0:	0000632e 	.word	0x0000632e
    3dc4:	682f2e2e 	.word	0x682f2e2e
    3dc8:	752f6c61 	.word	0x752f6c61
    3dcc:	736c6974 	.word	0x736c6974
    3dd0:	6372732f 	.word	0x6372732f
    3dd4:	6974752f 	.word	0x6974752f
    3dd8:	6c5f736c 	.word	0x6c5f736c
    3ddc:	2e747369 	.word	0x2e747369
    3de0:	00000063 	.word	0x00000063

00003de4 <_adcs>:
    3de4:	01000000 00800000 0000181d 00000000     ................
	...
    3dfc:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    3e0c:	632e6364 00000000                       dc.c....

00003e14 <user_mux_confs>:
    3e14:	00000100 00000000 00000000 00000000     ................
	...

00003e58 <channel_confs>:
    3e58:	060c060c 00000000 00000000 00000000     ................
	...

00003e98 <interrupt_cfg>:
	...
    3f18:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    3f28:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    3f38:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    3f48:	43000800 43000c00                       ...C...C

00003f50 <_i2cms>:
	...
    3f68:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    3f78:	65735f6c 6d6f6372 0000632e              l_sercom.c..

00003f84 <_usb_ep_cfgs>:
    3f84:	200006f8 00000000 00000040 200006b8     ... ....@...... 
    3f94:	00000000 00000040 20000678 00000000     ....@...x.. ....
    3fa4:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    3fb4:	73752f65 2e636462 00000063              e/usbdc.c...

00003fc0 <_global_impure_ptr>:
    3fc0:	20000078                                x.. 

00003fc4 <_init>:
    3fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fc6:	bf00      	nop
    3fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3fca:	bc08      	pop	{r3}
    3fcc:	469e      	mov	lr, r3
    3fce:	4770      	bx	lr

00003fd0 <__init_array_start>:
    3fd0:	00003c3d 	.word	0x00003c3d

00003fd4 <__frame_dummy_init_array_entry>:
    3fd4:	00000289                                ....

00003fd8 <_fini>:
    3fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fda:	bf00      	nop
    3fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3fde:	bc08      	pop	{r3}
    3fe0:	469e      	mov	lr, r3
    3fe2:	4770      	bx	lr

00003fe4 <__fini_array_start>:
    3fe4:	00000265 	.word	0x00000265
