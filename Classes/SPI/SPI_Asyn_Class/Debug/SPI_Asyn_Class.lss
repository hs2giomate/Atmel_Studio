
SPI_Asyn_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a18  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000494  20000000  00004a18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020494  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020494  2**0
                  CONTENTS
  4 .bss          00000400  20000494  00004eac  00020494  2**2
                  ALLOC
  5 .stack        00010004  20000894  000052ac  00020494  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020494  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000204c2  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003ef14  00000000  00000000  0002051b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000545e  00000000  00000000  0005f42f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000178c4  00000000  00000000  0006488d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001258  00000000  00000000  0007c151  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001a30  00000000  00000000  0007d3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d300  00000000  00000000  0007edd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001e2d4  00000000  00000000  000bc0d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00129ce1  00000000  00000000  000da3ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000326c  00000000  00000000  00204090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 08 01 20 d1 02 00 00 55 03 00 00 55 03 00 00     ... ....U...U...
      10:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      2c:	55 03 00 00 55 03 00 00 00 00 00 00 55 03 00 00     U...U.......U...
      3c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      4c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      5c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      6c:	5d 1e 00 00 55 03 00 00 55 03 00 00 55 03 00 00     ]...U...U...U...
      7c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      8c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      9c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      ac:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      bc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      cc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      dc:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      f4:	55 03 00 00 fd 1f 00 00 11 20 00 00 25 20 00 00     U........ ..% ..
     104:	39 20 00 00 55 03 00 00 55 03 00 00 55 03 00 00     9 ..U...U...U...
     114:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     124:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     134:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     144:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     154:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     164:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     174:	55 03 00 00 55 03 00 00 55 03 00 00 cd 37 00 00     U...U...U....7..
     184:	d9 37 00 00 e5 37 00 00 f1 37 00 00 55 03 00 00     .7...7...7..U...
     194:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1a4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1b4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1c4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1d4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1e4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1f4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     204:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     214:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     224:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     234:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     244:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     254:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000494 	.word	0x20000494
     280:	00000000 	.word	0x00000000
     284:	00004a18 	.word	0x00004a18

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00004a18 	.word	0x00004a18
     2c4:	20000498 	.word	0x20000498
     2c8:	00004a18 	.word	0x00004a18
     2cc:	00000000 	.word	0x00000000

000002d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2d6:	4b16      	ldr	r3, [pc, #88]	; (330 <Reset_Handler+0x60>)
     2d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2da:	4b16      	ldr	r3, [pc, #88]	; (334 <Reset_Handler+0x64>)
     2dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2de:	687a      	ldr	r2, [r7, #4]
     2e0:	683b      	ldr	r3, [r7, #0]
     2e2:	429a      	cmp	r2, r3
     2e4:	d00c      	beq.n	300 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2e6:	e007      	b.n	2f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	1d1a      	adds	r2, r3, #4
     2ec:	603a      	str	r2, [r7, #0]
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	1d11      	adds	r1, r2, #4
     2f2:	6079      	str	r1, [r7, #4]
     2f4:	6812      	ldr	r2, [r2, #0]
     2f6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4a0f      	ldr	r2, [pc, #60]	; (338 <Reset_Handler+0x68>)
     2fc:	4293      	cmp	r3, r2
     2fe:	d3f3      	bcc.n	2e8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0e      	ldr	r3, [pc, #56]	; (33c <Reset_Handler+0x6c>)
     302:	603b      	str	r3, [r7, #0]
     304:	e004      	b.n	310 <Reset_Handler+0x40>
                *pDest++ = 0;
     306:	683b      	ldr	r3, [r7, #0]
     308:	1d1a      	adds	r2, r3, #4
     30a:	603a      	str	r2, [r7, #0]
     30c:	2200      	movs	r2, #0
     30e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	683b      	ldr	r3, [r7, #0]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <Reset_Handler+0x70>)
     314:	4293      	cmp	r3, r2
     316:	d3f6      	bcc.n	306 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     318:	4b0a      	ldr	r3, [pc, #40]	; (344 <Reset_Handler+0x74>)
     31a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31c:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x78>)
     31e:	687b      	ldr	r3, [r7, #4]
     320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     324:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     326:	4b09      	ldr	r3, [pc, #36]	; (34c <Reset_Handler+0x7c>)
     328:	4798      	blx	r3

        /* Branch to main function */
        main();
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x80>)
     32c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     32e:	e7fe      	b.n	32e <Reset_Handler+0x5e>
     330:	00004a18 	.word	0x00004a18
     334:	20000000 	.word	0x20000000
     338:	20000494 	.word	0x20000494
     33c:	20000494 	.word	0x20000494
     340:	20000894 	.word	0x20000894
     344:	00000000 	.word	0x00000000
     348:	e000ed00 	.word	0xe000ed00
     34c:	0000440d 	.word	0x0000440d
     350:	00000425 	.word	0x00000425

00000354 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     354:	b480      	push	{r7}
     356:	af00      	add	r7, sp, #0
        while (1) {
     358:	e7fe      	b.n	358 <Dummy_Handler+0x4>

0000035a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     35a:	b480      	push	{r7}
     35c:	b085      	sub	sp, #20
     35e:	af00      	add	r7, sp, #0
     360:	60f8      	str	r0, [r7, #12]
     362:	460b      	mov	r3, r1
     364:	607a      	str	r2, [r7, #4]
     366:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     368:	7afb      	ldrb	r3, [r7, #11]
     36a:	68fa      	ldr	r2, [r7, #12]
     36c:	01db      	lsls	r3, r3, #7
     36e:	4413      	add	r3, r2
     370:	3318      	adds	r3, #24
     372:	687a      	ldr	r2, [r7, #4]
     374:	601a      	str	r2, [r3, #0]
}
     376:	bf00      	nop
     378:	3714      	adds	r7, #20
     37a:	46bd      	mov	sp, r7
     37c:	bc80      	pop	{r7}
     37e:	4770      	bx	lr

00000380 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     380:	b480      	push	{r7}
     382:	b085      	sub	sp, #20
     384:	af00      	add	r7, sp, #0
     386:	60f8      	str	r0, [r7, #12]
     388:	460b      	mov	r3, r1
     38a:	607a      	str	r2, [r7, #4]
     38c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     38e:	7afb      	ldrb	r3, [r7, #11]
     390:	68fa      	ldr	r2, [r7, #12]
     392:	01db      	lsls	r3, r3, #7
     394:	4413      	add	r3, r2
     396:	3314      	adds	r3, #20
     398:	687a      	ldr	r2, [r7, #4]
     39a:	601a      	str	r2, [r3, #0]
}
     39c:	bf00      	nop
     39e:	3714      	adds	r7, #20
     3a0:	46bd      	mov	sp, r7
     3a2:	bc80      	pop	{r7}
     3a4:	4770      	bx	lr
	...

000003a8 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	4603      	mov	r3, r0
     3b0:	6039      	str	r1, [r7, #0]
     3b2:	71fb      	strb	r3, [r7, #7]
     3b4:	4613      	mov	r3, r2
     3b6:	71bb      	strb	r3, [r7, #6]
	if (level) {
     3b8:	79bb      	ldrb	r3, [r7, #6]
     3ba:	2b00      	cmp	r3, #0
     3bc:	d006      	beq.n	3cc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     3be:	79fb      	ldrb	r3, [r7, #7]
     3c0:	683a      	ldr	r2, [r7, #0]
     3c2:	4619      	mov	r1, r3
     3c4:	4806      	ldr	r0, [pc, #24]	; (3e0 <_gpio_set_level+0x38>)
     3c6:	4b07      	ldr	r3, [pc, #28]	; (3e4 <_gpio_set_level+0x3c>)
     3c8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     3ca:	e005      	b.n	3d8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     3cc:	79fb      	ldrb	r3, [r7, #7]
     3ce:	683a      	ldr	r2, [r7, #0]
     3d0:	4619      	mov	r1, r3
     3d2:	4803      	ldr	r0, [pc, #12]	; (3e0 <_gpio_set_level+0x38>)
     3d4:	4b04      	ldr	r3, [pc, #16]	; (3e8 <_gpio_set_level+0x40>)
     3d6:	4798      	blx	r3
}
     3d8:	bf00      	nop
     3da:	3708      	adds	r7, #8
     3dc:	46bd      	mov	sp, r7
     3de:	bd80      	pop	{r7, pc}
     3e0:	41008000 	.word	0x41008000
     3e4:	0000035b 	.word	0x0000035b
     3e8:	00000381 	.word	0x00000381

000003ec <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     3ec:	b580      	push	{r7, lr}
     3ee:	b082      	sub	sp, #8
     3f0:	af00      	add	r7, sp, #0
     3f2:	4603      	mov	r3, r0
     3f4:	460a      	mov	r2, r1
     3f6:	71fb      	strb	r3, [r7, #7]
     3f8:	4613      	mov	r3, r2
     3fa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     3fc:	79fb      	ldrb	r3, [r7, #7]
     3fe:	115b      	asrs	r3, r3, #5
     400:	b2d8      	uxtb	r0, r3
     402:	79fb      	ldrb	r3, [r7, #7]
     404:	f003 031f 	and.w	r3, r3, #31
     408:	2201      	movs	r2, #1
     40a:	fa02 f303 	lsl.w	r3, r2, r3
     40e:	79ba      	ldrb	r2, [r7, #6]
     410:	4619      	mov	r1, r3
     412:	4b03      	ldr	r3, [pc, #12]	; (420 <gpio_set_pin_level+0x34>)
     414:	4798      	blx	r3
}
     416:	bf00      	nop
     418:	3708      	adds	r7, #8
     41a:	46bd      	mov	sp, r7
     41c:	bd80      	pop	{r7, pc}
     41e:	bf00      	nop
     420:	000003a9 	.word	0x000003a9

00000424 <main>:
#define HI 1
#define LO 0
void HW_RESET(void);
static  uint8_t byte2;
int main(void)
{
     424:	b580      	push	{r7, lr}
     426:	b0a0      	sub	sp, #128	; 0x80
     428:	af00      	add	r7, sp, #0
	
		atmel_start_init();
     42a:	4b82      	ldr	r3, [pc, #520]	; (634 <main+0x210>)
     42c:	4798      	blx	r3
		
		SPI_Asyn_Class	spi0(0);
     42e:	f107 030c 	add.w	r3, r7, #12
     432:	2100      	movs	r1, #0
     434:	4618      	mov	r0, r3
     436:	4b80      	ldr	r3, [pc, #512]	; (638 <main+0x214>)
     438:	4798      	blx	r3
		spi0.init();
     43a:	f107 030c 	add.w	r3, r7, #12
     43e:	4618      	mov	r0, r3
     440:	4b7e      	ldr	r3, [pc, #504]	; (63c <main+0x218>)
     442:	4798      	blx	r3
		uint8_t array[4];
;		uint8_t	clock=0x04;
     444:	2304      	movs	r3, #4
     446:	71fb      	strb	r3, [r7, #7]
		uint8_t	wACLK=0x38;
     448:	2338      	movs	r3, #56	; 0x38
     44a:	71bb      	strb	r3, [r7, #6]
		uint8_t	rACLK=0xD4;
     44c:	23d4      	movs	r3, #212	; 0xd4
     44e:	717b      	strb	r3, [r7, #5]
		uint8_t	rTSR=0x80;
     450:	2380      	movs	r3, #128	; 0x80
     452:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		uint8_t	*byte=&byte2;
     456:	4b7a      	ldr	r3, [pc, #488]	; (640 <main+0x21c>)
     458:	677b      	str	r3, [r7, #116]	; 0x74
		HW_RESET();
     45a:	4b7a      	ldr	r3, [pc, #488]	; (644 <main+0x220>)
     45c:	4798      	blx	r3
		spi0.enable();
     45e:	f107 030c 	add.w	r3, r7, #12
     462:	4618      	mov	r0, r3
     464:	4b78      	ldr	r3, [pc, #480]	; (648 <main+0x224>)
     466:	4798      	blx	r3
		gpio_set_pin_level(SPI0_CS,	false);
     468:	2100      	movs	r1, #0
     46a:	203c      	movs	r0, #60	; 0x3c
     46c:	4b77      	ldr	r3, [pc, #476]	; (64c <main+0x228>)
     46e:	4798      	blx	r3
		while (spi0.isBusy());
     470:	f107 030c 	add.w	r3, r7, #12
     474:	4618      	mov	r0, r3
     476:	4b76      	ldr	r3, [pc, #472]	; (650 <main+0x22c>)
     478:	4798      	blx	r3
     47a:	4603      	mov	r3, r0
     47c:	2b00      	cmp	r3, #0
     47e:	d000      	beq.n	482 <main+0x5e>
     480:	e7f6      	b.n	470 <main+0x4c>
		spi0.write(&clock,1);
     482:	1df9      	adds	r1, r7, #7
     484:	f107 030c 	add.w	r3, r7, #12
     488:	2201      	movs	r2, #1
     48a:	4618      	mov	r0, r3
     48c:	4b71      	ldr	r3, [pc, #452]	; (654 <main+0x230>)
     48e:	4798      	blx	r3
		while (!spi0.isSPIReady());
     490:	f107 030c 	add.w	r3, r7, #12
     494:	4618      	mov	r0, r3
     496:	4b70      	ldr	r3, [pc, #448]	; (658 <main+0x234>)
     498:	4798      	blx	r3
     49a:	4603      	mov	r3, r0
     49c:	f083 0301 	eor.w	r3, r3, #1
     4a0:	b2db      	uxtb	r3, r3
     4a2:	2b00      	cmp	r3, #0
     4a4:	d000      	beq.n	4a8 <main+0x84>
     4a6:	e7f3      	b.n	490 <main+0x6c>
		gpio_set_pin_level(SPI0_CS,true);
     4a8:	2101      	movs	r1, #1
     4aa:	203c      	movs	r0, #60	; 0x3c
     4ac:	4b67      	ldr	r3, [pc, #412]	; (64c <main+0x228>)
     4ae:	4798      	blx	r3
		spi0.disable();
     4b0:	f107 030c 	add.w	r3, r7, #12
     4b4:	4618      	mov	r0, r3
     4b6:	4b69      	ldr	r3, [pc, #420]	; (65c <main+0x238>)
     4b8:	4798      	blx	r3
    /* Replace with your application code */
    while (1) 
    {
	
		spi0.enable();
     4ba:	f107 030c 	add.w	r3, r7, #12
     4be:	4618      	mov	r0, r3
     4c0:	4b61      	ldr	r3, [pc, #388]	; (648 <main+0x224>)
     4c2:	4798      	blx	r3
		gpio_set_pin_level(SPI0_CS,	false);
     4c4:	2100      	movs	r1, #0
     4c6:	203c      	movs	r0, #60	; 0x3c
     4c8:	4b60      	ldr	r3, [pc, #384]	; (64c <main+0x228>)
     4ca:	4798      	blx	r3
		while (spi0.isBusy());
     4cc:	f107 030c 	add.w	r3, r7, #12
     4d0:	4618      	mov	r0, r3
     4d2:	4b5f      	ldr	r3, [pc, #380]	; (650 <main+0x22c>)
     4d4:	4798      	blx	r3
     4d6:	4603      	mov	r3, r0
     4d8:	2b00      	cmp	r3, #0
     4da:	d000      	beq.n	4de <main+0xba>
     4dc:	e7f6      	b.n	4cc <main+0xa8>
		spi0.write(&wACLK,1);
     4de:	1db9      	adds	r1, r7, #6
     4e0:	f107 030c 	add.w	r3, r7, #12
     4e4:	2201      	movs	r2, #1
     4e6:	4618      	mov	r0, r3
     4e8:	4b5a      	ldr	r3, [pc, #360]	; (654 <main+0x230>)
     4ea:	4798      	blx	r3
		while (!spi0.isSPIReady());
     4ec:	f107 030c 	add.w	r3, r7, #12
     4f0:	4618      	mov	r0, r3
     4f2:	4b59      	ldr	r3, [pc, #356]	; (658 <main+0x234>)
     4f4:	4798      	blx	r3
     4f6:	4603      	mov	r3, r0
     4f8:	f083 0301 	eor.w	r3, r3, #1
     4fc:	b2db      	uxtb	r3, r3
     4fe:	2b00      	cmp	r3, #0
     500:	d000      	beq.n	504 <main+0xe0>
     502:	e7f3      	b.n	4ec <main+0xc8>
		spi0.write(&clock,1);
     504:	1df9      	adds	r1, r7, #7
     506:	f107 030c 	add.w	r3, r7, #12
     50a:	2201      	movs	r2, #1
     50c:	4618      	mov	r0, r3
     50e:	4b51      	ldr	r3, [pc, #324]	; (654 <main+0x230>)
     510:	4798      	blx	r3
		while (!spi0.isSPIReady());
     512:	f107 030c 	add.w	r3, r7, #12
     516:	4618      	mov	r0, r3
     518:	4b4f      	ldr	r3, [pc, #316]	; (658 <main+0x234>)
     51a:	4798      	blx	r3
     51c:	4603      	mov	r3, r0
     51e:	f083 0301 	eor.w	r3, r3, #1
     522:	b2db      	uxtb	r3, r3
     524:	2b00      	cmp	r3, #0
     526:	d000      	beq.n	52a <main+0x106>
     528:	e7f3      	b.n	512 <main+0xee>
		gpio_set_pin_level(SPI0_CS,true);
     52a:	2101      	movs	r1, #1
     52c:	203c      	movs	r0, #60	; 0x3c
     52e:	4b47      	ldr	r3, [pc, #284]	; (64c <main+0x228>)
     530:	4798      	blx	r3
		delay_ms(500);
     532:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     536:	4b4a      	ldr	r3, [pc, #296]	; (660 <main+0x23c>)
     538:	4798      	blx	r3
		gpio_set_pin_level(SPI0_CS,	false);
     53a:	2100      	movs	r1, #0
     53c:	203c      	movs	r0, #60	; 0x3c
     53e:	4b43      	ldr	r3, [pc, #268]	; (64c <main+0x228>)
     540:	4798      	blx	r3
		while (spi0.isBusy());
     542:	f107 030c 	add.w	r3, r7, #12
     546:	4618      	mov	r0, r3
     548:	4b41      	ldr	r3, [pc, #260]	; (650 <main+0x22c>)
     54a:	4798      	blx	r3
     54c:	4603      	mov	r3, r0
     54e:	2b00      	cmp	r3, #0
     550:	d000      	beq.n	554 <main+0x130>
     552:	e7f6      	b.n	542 <main+0x11e>
		spi0.write(&rACLK,1);
     554:	1d79      	adds	r1, r7, #5
     556:	f107 030c 	add.w	r3, r7, #12
     55a:	2201      	movs	r2, #1
     55c:	4618      	mov	r0, r3
     55e:	4b3d      	ldr	r3, [pc, #244]	; (654 <main+0x230>)
     560:	4798      	blx	r3

		while (!spi0.isSPIReady());
     562:	f107 030c 	add.w	r3, r7, #12
     566:	4618      	mov	r0, r3
     568:	4b3b      	ldr	r3, [pc, #236]	; (658 <main+0x234>)
     56a:	4798      	blx	r3
     56c:	4603      	mov	r3, r0
     56e:	f083 0301 	eor.w	r3, r3, #1
     572:	b2db      	uxtb	r3, r3
     574:	2b00      	cmp	r3, #0
     576:	d000      	beq.n	57a <main+0x156>
     578:	e7f3      	b.n	562 <main+0x13e>
	
		for (int i=0;i<4;i++)
     57a:	2300      	movs	r3, #0
     57c:	67fb      	str	r3, [r7, #124]	; 0x7c
     57e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     580:	2b03      	cmp	r3, #3
     582:	dc2a      	bgt.n	5da <main+0x1b6>
		{	
			while (!spi0.isSPIReady());
     584:	f107 030c 	add.w	r3, r7, #12
     588:	4618      	mov	r0, r3
     58a:	4b33      	ldr	r3, [pc, #204]	; (658 <main+0x234>)
     58c:	4798      	blx	r3
     58e:	4603      	mov	r3, r0
     590:	f083 0301 	eor.w	r3, r3, #1
     594:	b2db      	uxtb	r3, r3
     596:	2b00      	cmp	r3, #0
     598:	d000      	beq.n	59c <main+0x178>
     59a:	e7f3      	b.n	584 <main+0x160>
			spi0.read(byte,1);
     59c:	f107 030c 	add.w	r3, r7, #12
     5a0:	2201      	movs	r2, #1
     5a2:	6f79      	ldr	r1, [r7, #116]	; 0x74
     5a4:	4618      	mov	r0, r3
     5a6:	4b2f      	ldr	r3, [pc, #188]	; (664 <main+0x240>)
     5a8:	4798      	blx	r3
		
			while (!spi0.isSPIReady());
     5aa:	f107 030c 	add.w	r3, r7, #12
     5ae:	4618      	mov	r0, r3
     5b0:	4b29      	ldr	r3, [pc, #164]	; (658 <main+0x234>)
     5b2:	4798      	blx	r3
     5b4:	4603      	mov	r3, r0
     5b6:	f083 0301 	eor.w	r3, r3, #1
     5ba:	b2db      	uxtb	r3, r3
     5bc:	2b00      	cmp	r3, #0
     5be:	d000      	beq.n	5c2 <main+0x19e>
     5c0:	e7f3      	b.n	5aa <main+0x186>
			array[i]=*byte;
     5c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     5c4:	7819      	ldrb	r1, [r3, #0]
     5c6:	f107 0208 	add.w	r2, r7, #8
     5ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     5cc:	4413      	add	r3, r2
     5ce:	460a      	mov	r2, r1
     5d0:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<4;i++)
     5d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     5d4:	3301      	adds	r3, #1
     5d6:	67fb      	str	r3, [r7, #124]	; 0x7c
     5d8:	e7d1      	b.n	57e <main+0x15a>
		}

		while (!spi0.isSPIReady());
     5da:	f107 030c 	add.w	r3, r7, #12
     5de:	4618      	mov	r0, r3
     5e0:	4b1d      	ldr	r3, [pc, #116]	; (658 <main+0x234>)
     5e2:	4798      	blx	r3
     5e4:	4603      	mov	r3, r0
     5e6:	f083 0301 	eor.w	r3, r3, #1
     5ea:	b2db      	uxtb	r3, r3
     5ec:	2b00      	cmp	r3, #0
     5ee:	d000      	beq.n	5f2 <main+0x1ce>
     5f0:	e7f3      	b.n	5da <main+0x1b6>
	//	delay_us(300);
		gpio_set_pin_level(SPI0_CS,true);
     5f2:	2101      	movs	r1, #1
     5f4:	203c      	movs	r0, #60	; 0x3c
     5f6:	4b15      	ldr	r3, [pc, #84]	; (64c <main+0x228>)
     5f8:	4798      	blx	r3
		spi0.disable();
     5fa:	f107 030c 	add.w	r3, r7, #12
     5fe:	4618      	mov	r0, r3
     600:	4b16      	ldr	r3, [pc, #88]	; (65c <main+0x238>)
     602:	4798      	blx	r3
		if (byte&&clock){
     604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     606:	2b00      	cmp	r3, #0
     608:	d007      	beq.n	61a <main+0x1f6>
     60a:	79fb      	ldrb	r3, [r7, #7]
     60c:	2b00      	cmp	r3, #0
     60e:	d004      	beq.n	61a <main+0x1f6>
			gpio_set_pin_level(LED0,false);
     610:	2100      	movs	r1, #0
     612:	2052      	movs	r0, #82	; 0x52
     614:	4b0d      	ldr	r3, [pc, #52]	; (64c <main+0x228>)
     616:	4798      	blx	r3
     618:	e003      	b.n	622 <main+0x1fe>
		}else{
			gpio_set_pin_level(LED0,true);
     61a:	2101      	movs	r1, #1
     61c:	2052      	movs	r0, #82	; 0x52
     61e:	4b0b      	ldr	r3, [pc, #44]	; (64c <main+0x228>)
     620:	4798      	blx	r3
		}
		delay_ms(1000);
     622:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     626:	4b0e      	ldr	r3, [pc, #56]	; (660 <main+0x23c>)
     628:	4798      	blx	r3
		gpio_set_pin_level(LED0,true);
     62a:	2101      	movs	r1, #1
     62c:	2052      	movs	r0, #82	; 0x52
     62e:	4b07      	ldr	r3, [pc, #28]	; (64c <main+0x228>)
     630:	4798      	blx	r3
    }
     632:	e742      	b.n	4ba <main+0x96>
     634:	000008d5 	.word	0x000008d5
     638:	000006b5 	.word	0x000006b5
     63c:	000006f5 	.word	0x000006f5
     640:	200004b0 	.word	0x200004b0
     644:	00000669 	.word	0x00000669
     648:	00000741 	.word	0x00000741
     64c:	000003ed 	.word	0x000003ed
     650:	000008a1 	.word	0x000008a1
     654:	00000795 	.word	0x00000795
     658:	0000087f 	.word	0x0000087f
     65c:	0000083d 	.word	0x0000083d
     660:	00000e9d 	.word	0x00000e9d
     664:	000007e1 	.word	0x000007e1

00000668 <_Z8HW_RESETv>:
}

void HW_RESET(void){
     668:	b580      	push	{r7, lr}
     66a:	af00      	add	r7, sp, #0
	
	
	gpio_set_pin_level(MR,true);
     66c:	2101      	movs	r1, #1
     66e:	203d      	movs	r0, #61	; 0x3d
     670:	4b05      	ldr	r3, [pc, #20]	; (688 <_Z8HW_RESETv+0x20>)
     672:	4798      	blx	r3
	delay_us(2);
     674:	2002      	movs	r0, #2
     676:	4b05      	ldr	r3, [pc, #20]	; (68c <_Z8HW_RESETv+0x24>)
     678:	4798      	blx	r3
	gpio_set_pin_level(MR,false);
     67a:	2100      	movs	r1, #0
     67c:	203d      	movs	r0, #61	; 0x3d
     67e:	4b02      	ldr	r3, [pc, #8]	; (688 <_Z8HW_RESETv+0x20>)
     680:	4798      	blx	r3
     682:	bf00      	nop
     684:	bd80      	pop	{r7, pc}
     686:	bf00      	nop
     688:	000003ed 	.word	0x000003ed
     68c:	00000e7d 	.word	0x00000e7d

00000690 <_ZL17complete_cb_SPI_0PK22spi_m_async_descriptor>:

#include "SPI_Asyn_Class.h"

 SPI_Asyn_Class* ptrSPIClass;
static void complete_cb_SPI_0(const struct spi_m_async_descriptor *const io_descr)
{
     690:	b580      	push	{r7, lr}
     692:	b082      	sub	sp, #8
     694:	af00      	add	r7, sp, #0
     696:	6078      	str	r0, [r7, #4]
	//SPI_Asyn_Class spiHandler;
	//ptrSPIClass=pSPIClass;
	//ptrSPIClass->ready=true;
	//asm("nop");
	ptrSPIClass->setSPIReady();
     698:	4b04      	ldr	r3, [pc, #16]	; (6ac <_ZL17complete_cb_SPI_0PK22spi_m_async_descriptor+0x1c>)
     69a:	681b      	ldr	r3, [r3, #0]
     69c:	4618      	mov	r0, r3
     69e:	4b04      	ldr	r3, [pc, #16]	; (6b0 <_ZL17complete_cb_SPI_0PK22spi_m_async_descriptor+0x20>)
     6a0:	4798      	blx	r3
	//asm("nop");
}
     6a2:	bf00      	nop
     6a4:	3708      	adds	r7, #8
     6a6:	46bd      	mov	sp, r7
     6a8:	bd80      	pop	{r7, pc}
     6aa:	bf00      	nop
     6ac:	200004b4 	.word	0x200004b4
     6b0:	0000085d 	.word	0x0000085d

000006b4 <_ZN14SPI_Asyn_ClassC1Eh>:
// default destructor
SPI_Asyn_Class::~SPI_Asyn_Class()
{
} //~SPI_Asyn_Class

SPI_Asyn_Class::SPI_Asyn_Class(uint8_t p){
     6b4:	b580      	push	{r7, lr}
     6b6:	b082      	sub	sp, #8
     6b8:	af00      	add	r7, sp, #0
     6ba:	6078      	str	r0, [r7, #4]
     6bc:	460b      	mov	r3, r1
     6be:	70fb      	strb	r3, [r7, #3]
	portNumber=p;
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	78fa      	ldrb	r2, [r7, #3]
     6c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	SPI0=SPI_0;
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	4a07      	ldr	r2, [pc, #28]	; (6e8 <_ZN14SPI_Asyn_ClassC1Eh+0x34>)
     6cc:	3310      	adds	r3, #16
     6ce:	4611      	mov	r1, r2
     6d0:	2248      	movs	r2, #72	; 0x48
     6d2:	4618      	mov	r0, r3
     6d4:	4b05      	ldr	r3, [pc, #20]	; (6ec <_ZN14SPI_Asyn_ClassC1Eh+0x38>)
     6d6:	4798      	blx	r3
	ptrSPIClass=this;
     6d8:	4a05      	ldr	r2, [pc, #20]	; (6f0 <_ZN14SPI_Asyn_ClassC1Eh+0x3c>)
     6da:	687b      	ldr	r3, [r7, #4]
     6dc:	6013      	str	r3, [r2, #0]
}
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	4618      	mov	r0, r3
     6e2:	3708      	adds	r7, #8
     6e4:	46bd      	mov	sp, r7
     6e6:	bd80      	pop	{r7, pc}
     6e8:	2000080c 	.word	0x2000080c
     6ec:	0000445d 	.word	0x0000445d
     6f0:	200004b4 	.word	0x200004b4

000006f4 <_ZN14SPI_Asyn_Class4initEv>:

void SPI_Asyn_Class::init(){
     6f4:	b580      	push	{r7, lr}
     6f6:	b082      	sub	sp, #8
     6f8:	af00      	add	r7, sp, #0
     6fa:	6078      	str	r0, [r7, #4]
	SPI_0_CLOCK_init();
     6fc:	4b0b      	ldr	r3, [pc, #44]	; (72c <_ZN14SPI_Asyn_Class4initEv+0x38>)
     6fe:	4798      	blx	r3
	spi_m_async_init(&SPI0, SERCOM0);
     700:	687b      	ldr	r3, [r7, #4]
     702:	3310      	adds	r3, #16
     704:	490a      	ldr	r1, [pc, #40]	; (730 <_ZN14SPI_Asyn_Class4initEv+0x3c>)
     706:	4618      	mov	r0, r3
     708:	4b0a      	ldr	r3, [pc, #40]	; (734 <_ZN14SPI_Asyn_Class4initEv+0x40>)
     70a:	4798      	blx	r3
	SPI_0_PORT_init();
     70c:	4b0a      	ldr	r3, [pc, #40]	; (738 <_ZN14SPI_Asyn_Class4initEv+0x44>)
     70e:	4798      	blx	r3
	pSPIClass=this;
     710:	687b      	ldr	r3, [r7, #4]
     712:	687a      	ldr	r2, [r7, #4]
     714:	661a      	str	r2, [r3, #96]	; 0x60
	ptrSPIClass=pSPIClass;
     716:	687b      	ldr	r3, [r7, #4]
     718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     71a:	4a08      	ldr	r2, [pc, #32]	; (73c <_ZN14SPI_Asyn_Class4initEv+0x48>)
     71c:	6013      	str	r3, [r2, #0]
	ready=true;
     71e:	687b      	ldr	r3, [r7, #4]
     720:	2201      	movs	r2, #1
     722:	701a      	strb	r2, [r3, #0]
	
}
     724:	bf00      	nop
     726:	3708      	adds	r7, #8
     728:	46bd      	mov	sp, r7
     72a:	bd80      	pop	{r7, pc}
     72c:	00000a01 	.word	0x00000a01
     730:	40003000 	.word	0x40003000
     734:	000010e9 	.word	0x000010e9
     738:	00000955 	.word	0x00000955
     73c:	200004b4 	.word	0x200004b4

00000740 <_ZN14SPI_Asyn_Class6enableEv>:

int32_t SPI_Asyn_Class::enable(){
     740:	b580      	push	{r7, lr}
     742:	b082      	sub	sp, #8
     744:	af00      	add	r7, sp, #0
     746:	6078      	str	r0, [r7, #4]
	spi_m_async_get_io_descriptor(&SPI0, &spio);
     748:	687b      	ldr	r3, [r7, #4]
     74a:	f103 0210 	add.w	r2, r3, #16
     74e:	687b      	ldr	r3, [r7, #4]
     750:	3304      	adds	r3, #4
     752:	4619      	mov	r1, r3
     754:	4610      	mov	r0, r2
     756:	4b0b      	ldr	r3, [pc, #44]	; (784 <_ZN14SPI_Asyn_Class6enableEv+0x44>)
     758:	4798      	blx	r3
	spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(complete_cb_SPI_0));
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	3310      	adds	r3, #16
     75e:	4a0a      	ldr	r2, [pc, #40]	; (788 <_ZN14SPI_Asyn_Class6enableEv+0x48>)
     760:	2100      	movs	r1, #0
     762:	4618      	mov	r0, r3
     764:	4b09      	ldr	r3, [pc, #36]	; (78c <_ZN14SPI_Asyn_Class6enableEv+0x4c>)
     766:	4798      	blx	r3
	spi_m_async_enable(&SPI0);
     768:	687b      	ldr	r3, [r7, #4]
     76a:	3310      	adds	r3, #16
     76c:	4618      	mov	r0, r3
     76e:	4b08      	ldr	r3, [pc, #32]	; (790 <_ZN14SPI_Asyn_Class6enableEv+0x50>)
     770:	4798      	blx	r3
	ready=true;
     772:	687b      	ldr	r3, [r7, #4]
     774:	2201      	movs	r2, #1
     776:	701a      	strb	r2, [r3, #0]
	return 0;
     778:	2300      	movs	r3, #0
}
     77a:	4618      	mov	r0, r3
     77c:	3708      	adds	r7, #8
     77e:	46bd      	mov	sp, r7
     780:	bd80      	pop	{r7, pc}
     782:	bf00      	nop
     784:	00001241 	.word	0x00001241
     788:	00000691 	.word	0x00000691
     78c:	000011fd 	.word	0x000011fd
     790:	0000116d 	.word	0x0000116d

00000794 <_ZN14SPI_Asyn_Class5writeEPKhl>:

int32_t  SPI_Asyn_Class::write(const uint8_t * p, int32_t n){
     794:	b580      	push	{r7, lr}
     796:	b086      	sub	sp, #24
     798:	af00      	add	r7, sp, #0
     79a:	60f8      	str	r0, [r7, #12]
     79c:	60b9      	str	r1, [r7, #8]
     79e:	607a      	str	r2, [r7, #4]
	int32_t w;
		while(!ready){
     7a0:	68fb      	ldr	r3, [r7, #12]
     7a2:	781b      	ldrb	r3, [r3, #0]
     7a4:	b2db      	uxtb	r3, r3
     7a6:	f083 0301 	eor.w	r3, r3, #1
     7aa:	b2db      	uxtb	r3, r3
     7ac:	2b00      	cmp	r3, #0
     7ae:	d000      	beq.n	7b2 <_ZN14SPI_Asyn_Class5writeEPKhl+0x1e>
     7b0:	e7f6      	b.n	7a0 <_ZN14SPI_Asyn_Class5writeEPKhl+0xc>
			//ready=isSPIReady();
		}
	ready=false;
     7b2:	68fb      	ldr	r3, [r7, #12]
     7b4:	2200      	movs	r2, #0
     7b6:	701a      	strb	r2, [r3, #0]
	callbackCounter=0;
     7b8:	68fb      	ldr	r3, [r7, #12]
     7ba:	2200      	movs	r2, #0
     7bc:	665a      	str	r2, [r3, #100]	; 0x64
	w= io_write(spio,p,(uint16_t)n);
     7be:	68fb      	ldr	r3, [r7, #12]
     7c0:	685b      	ldr	r3, [r3, #4]
     7c2:	687a      	ldr	r2, [r7, #4]
     7c4:	b292      	uxth	r2, r2
     7c6:	68b9      	ldr	r1, [r7, #8]
     7c8:	4618      	mov	r0, r3
     7ca:	4b04      	ldr	r3, [pc, #16]	; (7dc <_ZN14SPI_Asyn_Class5writeEPKhl+0x48>)
     7cc:	4798      	blx	r3
     7ce:	6178      	str	r0, [r7, #20]

	 return w;
     7d0:	697b      	ldr	r3, [r7, #20]
	
}
     7d2:	4618      	mov	r0, r3
     7d4:	3718      	adds	r7, #24
     7d6:	46bd      	mov	sp, r7
     7d8:	bd80      	pop	{r7, pc}
     7da:	bf00      	nop
     7dc:	00000ec9 	.word	0x00000ec9

000007e0 <_ZN14SPI_Asyn_Class4readEPhl>:
int32_t  SPI_Asyn_Class::read(uint8_t * p, int32_t n){
     7e0:	b580      	push	{r7, lr}
     7e2:	b086      	sub	sp, #24
     7e4:	af00      	add	r7, sp, #0
     7e6:	60f8      	str	r0, [r7, #12]
     7e8:	60b9      	str	r1, [r7, #8]
     7ea:	607a      	str	r2, [r7, #4]
	int32_t r;
		while(!ready){
     7ec:	68fb      	ldr	r3, [r7, #12]
     7ee:	781b      	ldrb	r3, [r3, #0]
     7f0:	b2db      	uxtb	r3, r3
     7f2:	f083 0301 	eor.w	r3, r3, #1
     7f6:	b2db      	uxtb	r3, r3
     7f8:	2b00      	cmp	r3, #0
     7fa:	d000      	beq.n	7fe <_ZN14SPI_Asyn_Class4readEPhl+0x1e>
     7fc:	e7f6      	b.n	7ec <_ZN14SPI_Asyn_Class4readEPhl+0xc>
			//ready=isSPIReady();
		}
	ready=false;
     7fe:	68fb      	ldr	r3, [r7, #12]
     800:	2200      	movs	r2, #0
     802:	701a      	strb	r2, [r3, #0]
	callbackCounter=0;
     804:	68fb      	ldr	r3, [r7, #12]
     806:	2200      	movs	r2, #0
     808:	665a      	str	r2, [r3, #100]	; 0x64
	r=io_read(spio,p,(uint16_t)n);
     80a:	68fb      	ldr	r3, [r7, #12]
     80c:	685b      	ldr	r3, [r3, #4]
     80e:	687a      	ldr	r2, [r7, #4]
     810:	b292      	uxth	r2, r2
     812:	68b9      	ldr	r1, [r7, #8]
     814:	4618      	mov	r0, r3
     816:	4b08      	ldr	r3, [pc, #32]	; (838 <_ZN14SPI_Asyn_Class4readEPhl+0x58>)
     818:	4798      	blx	r3
     81a:	6178      	str	r0, [r7, #20]
	while(!ready);
     81c:	68fb      	ldr	r3, [r7, #12]
     81e:	781b      	ldrb	r3, [r3, #0]
     820:	b2db      	uxtb	r3, r3
     822:	f083 0301 	eor.w	r3, r3, #1
     826:	b2db      	uxtb	r3, r3
     828:	2b00      	cmp	r3, #0
     82a:	d000      	beq.n	82e <_ZN14SPI_Asyn_Class4readEPhl+0x4e>
     82c:	e7f6      	b.n	81c <_ZN14SPI_Asyn_Class4readEPhl+0x3c>
	return  r;
     82e:	697b      	ldr	r3, [r7, #20]
}
     830:	4618      	mov	r0, r3
     832:	3718      	adds	r7, #24
     834:	46bd      	mov	sp, r7
     836:	bd80      	pop	{r7, pc}
     838:	00000ef9 	.word	0x00000ef9

0000083c <_ZN14SPI_Asyn_Class7disableEv>:
void SPI_Asyn_Class::disable(void){
     83c:	b580      	push	{r7, lr}
     83e:	b082      	sub	sp, #8
     840:	af00      	add	r7, sp, #0
     842:	6078      	str	r0, [r7, #4]
	spi_m_async_disable(&SPI0);
     844:	687b      	ldr	r3, [r7, #4]
     846:	3310      	adds	r3, #16
     848:	4618      	mov	r0, r3
     84a:	4b03      	ldr	r3, [pc, #12]	; (858 <_ZN14SPI_Asyn_Class7disableEv+0x1c>)
     84c:	4798      	blx	r3
	
}
     84e:	bf00      	nop
     850:	3708      	adds	r7, #8
     852:	46bd      	mov	sp, r7
     854:	bd80      	pop	{r7, pc}
     856:	bf00      	nop
     858:	00001195 	.word	0x00001195

0000085c <_ZN14SPI_Asyn_Class11setSPIReadyEv>:
void  SPI_Asyn_Class::setSPIReady(void)
{
     85c:	b480      	push	{r7}
     85e:	b083      	sub	sp, #12
     860:	af00      	add	r7, sp, #0
     862:	6078      	str	r0, [r7, #4]
	ready=true;
     864:	687b      	ldr	r3, [r7, #4]
     866:	2201      	movs	r2, #1
     868:	701a      	strb	r2, [r3, #0]
	callbackCounter++;
     86a:	687b      	ldr	r3, [r7, #4]
     86c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     86e:	1c5a      	adds	r2, r3, #1
     870:	687b      	ldr	r3, [r7, #4]
     872:	665a      	str	r2, [r3, #100]	; 0x64
}
     874:	bf00      	nop
     876:	370c      	adds	r7, #12
     878:	46bd      	mov	sp, r7
     87a:	bc80      	pop	{r7}
     87c:	4770      	bx	lr

0000087e <_ZN14SPI_Asyn_Class10isSPIReadyEv>:
/*
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Asyn_Class::isSPIReady(void){
     87e:	b480      	push	{r7}
     880:	b083      	sub	sp, #12
     882:	af00      	add	r7, sp, #0
     884:	6078      	str	r0, [r7, #4]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready==true)
     886:	687b      	ldr	r3, [r7, #4]
     888:	781b      	ldrb	r3, [r3, #0]
     88a:	b2db      	uxtb	r3, r3
     88c:	2b00      	cmp	r3, #0
     88e:	d001      	beq.n	894 <_ZN14SPI_Asyn_Class10isSPIReadyEv+0x16>
	{
		
		return true;
     890:	2301      	movs	r3, #1
     892:	e000      	b.n	896 <_ZN14SPI_Asyn_Class10isSPIReadyEv+0x18>
	} 
	else
	{
		return false;
     894:	2300      	movs	r3, #0
	}
	return ready;
	
}
     896:	4618      	mov	r0, r3
     898:	370c      	adds	r7, #12
     89a:	46bd      	mov	sp, r7
     89c:	bc80      	pop	{r7}
     89e:	4770      	bx	lr

000008a0 <_ZN14SPI_Asyn_Class6isBusyEv>:
	{
		return false;
	}
}

bool	SPI_Asyn_Class::isBusy(){
     8a0:	b580      	push	{r7, lr}
     8a2:	b082      	sub	sp, #8
     8a4:	af00      	add	r7, sp, #0
     8a6:	6078      	str	r0, [r7, #4]
	spi_m_async_get_status(&SPI0,&stat);
     8a8:	687b      	ldr	r3, [r7, #4]
     8aa:	f103 0210 	add.w	r2, r3, #16
     8ae:	687b      	ldr	r3, [r7, #4]
     8b0:	3308      	adds	r3, #8
     8b2:	4619      	mov	r1, r3
     8b4:	4610      	mov	r0, r2
     8b6:	4b06      	ldr	r3, [pc, #24]	; (8d0 <_ZN14SPI_Asyn_Class6isBusyEv+0x30>)
     8b8:	4798      	blx	r3
	if (stat.flags==SPI_M_ASYNC_STATUS_BUSY)
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	689b      	ldr	r3, [r3, #8]
     8be:	2b10      	cmp	r3, #16
     8c0:	d101      	bne.n	8c6 <_ZN14SPI_Asyn_Class6isBusyEv+0x26>
	{
		return true;
     8c2:	2301      	movs	r3, #1
     8c4:	e000      	b.n	8c8 <_ZN14SPI_Asyn_Class6isBusyEv+0x28>
	}
	else
	{
		return false;
     8c6:	2300      	movs	r3, #0
	}
}
     8c8:	4618      	mov	r0, r3
     8ca:	3708      	adds	r7, #8
     8cc:	46bd      	mov	sp, r7
     8ce:	bd80      	pop	{r7, pc}
     8d0:	000011d5 	.word	0x000011d5

000008d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     8d4:	b508      	push	{r3, lr}
	system_init();
     8d6:	4b02      	ldr	r3, [pc, #8]	; (8e0 <atmel_start_init+0xc>)
     8d8:	4798      	blx	r3
	usb_init();
     8da:	4b02      	ldr	r3, [pc, #8]	; (8e4 <atmel_start_init+0x10>)
     8dc:	4798      	blx	r3
     8de:	bd08      	pop	{r3, pc}
     8e0:	00000c39 	.word	0x00000c39
     8e4:	0000382d 	.word	0x0000382d

000008e8 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     8e8:	4a04      	ldr	r2, [pc, #16]	; (8fc <ADC_0_CLOCK_init+0x14>)
     8ea:	6a13      	ldr	r3, [r2, #32]
     8ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     8f0:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     8f2:	2240      	movs	r2, #64	; 0x40
     8f4:	4b02      	ldr	r3, [pc, #8]	; (900 <ADC_0_CLOCK_init+0x18>)
     8f6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     8fa:	4770      	bx	lr
     8fc:	40000800 	.word	0x40000800
     900:	40001c00 	.word	0x40001c00

00000904 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     904:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     906:	4b04      	ldr	r3, [pc, #16]	; (918 <ADC_0_init+0x14>)
     908:	4798      	blx	r3
	ADC_0_PORT_init();
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     90a:	2200      	movs	r2, #0
     90c:	4903      	ldr	r1, [pc, #12]	; (91c <ADC_0_init+0x18>)
     90e:	4804      	ldr	r0, [pc, #16]	; (920 <ADC_0_init+0x1c>)
     910:	4b04      	ldr	r3, [pc, #16]	; (924 <ADC_0_init+0x20>)
     912:	4798      	blx	r3
     914:	bd08      	pop	{r3, pc}
     916:	bf00      	nop
     918:	000008e9 	.word	0x000008e9
     91c:	43001c00 	.word	0x43001c00
     920:	20000808 	.word	0x20000808
     924:	00000e39 	.word	0x00000e39

00000928 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     928:	b508      	push	{r3, lr}
     92a:	4b07      	ldr	r3, [pc, #28]	; (948 <EVENT_SYSTEM_0_init+0x20>)
     92c:	2240      	movs	r2, #64	; 0x40
     92e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     932:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     936:	4a05      	ldr	r2, [pc, #20]	; (94c <EVENT_SYSTEM_0_init+0x24>)
     938:	6993      	ldr	r3, [r2, #24]
     93a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     93e:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     940:	4b03      	ldr	r3, [pc, #12]	; (950 <EVENT_SYSTEM_0_init+0x28>)
     942:	4798      	blx	r3
     944:	bd08      	pop	{r3, pc}
     946:	bf00      	nop
     948:	40001c00 	.word	0x40001c00
     94c:	40000800 	.word	0x40000800
     950:	00000ebd 	.word	0x00000ebd

00000954 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     954:	4b28      	ldr	r3, [pc, #160]	; (9f8 <SPI_0_PORT_init+0xa4>)
     956:	2210      	movs	r2, #16
     958:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     95a:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     95c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     960:	629a      	str	r2, [r3, #40]	; 0x28
     962:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     966:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     968:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     96c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     970:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     978:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     97c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     980:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     984:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     988:	2220      	movs	r2, #32
     98a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     98c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     98e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     992:	629a      	str	r2, [r3, #40]	; 0x28
     994:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     996:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     99a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     99e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9a6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     9ae:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9b6:	2240      	movs	r2, #64	; 0x40
     9b8:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9ba:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     9be:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     9c2:	629a      	str	r2, [r3, #40]	; 0x28
     9c4:	4a0d      	ldr	r2, [pc, #52]	; (9fc <SPI_0_PORT_init+0xa8>)
     9c6:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     9c8:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     9cc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     9d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9d4:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     9d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9dc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9e4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9e8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9ec:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9f0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     9f4:	4770      	bx	lr
     9f6:	bf00      	nop
     9f8:	41008000 	.word	0x41008000
     9fc:	c0020000 	.word	0xc0020000

00000a00 <SPI_0_CLOCK_init>:
     a00:	4b06      	ldr	r3, [pc, #24]	; (a1c <SPI_0_CLOCK_init+0x1c>)
     a02:	2241      	movs	r2, #65	; 0x41
     a04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     a08:	2243      	movs	r2, #67	; 0x43
     a0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     a0e:	4a04      	ldr	r2, [pc, #16]	; (a20 <SPI_0_CLOCK_init+0x20>)
     a10:	6953      	ldr	r3, [r2, #20]
     a12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     a16:	6153      	str	r3, [r2, #20]
     a18:	4770      	bx	lr
     a1a:	bf00      	nop
     a1c:	40001c00 	.word	0x40001c00
     a20:	40000800 	.word	0x40000800

00000a24 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     a24:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     a26:	4b04      	ldr	r3, [pc, #16]	; (a38 <SPI_0_init+0x14>)
     a28:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
     a2a:	4904      	ldr	r1, [pc, #16]	; (a3c <SPI_0_init+0x18>)
     a2c:	4804      	ldr	r0, [pc, #16]	; (a40 <SPI_0_init+0x1c>)
     a2e:	4b05      	ldr	r3, [pc, #20]	; (a44 <SPI_0_init+0x20>)
     a30:	4798      	blx	r3
	SPI_0_PORT_init();
     a32:	4b05      	ldr	r3, [pc, #20]	; (a48 <SPI_0_init+0x24>)
     a34:	4798      	blx	r3
     a36:	bd08      	pop	{r3, pc}
     a38:	00000a01 	.word	0x00000a01
     a3c:	40003000 	.word	0x40003000
     a40:	2000080c 	.word	0x2000080c
     a44:	000010e9 	.word	0x000010e9
     a48:	00000955 	.word	0x00000955

00000a4c <SPI_1_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a4c:	4b2d      	ldr	r3, [pc, #180]	; (b04 <SPI_1_PORT_init+0xb8>)
     a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
     a52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a5a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     a5e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a62:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     a66:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a6a:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     a6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a72:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a76:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a7a:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a7e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a82:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a86:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
     a8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a96:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     a9a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a9e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aa2:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     aa6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     aaa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aae:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ab2:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ab6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     aba:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     abe:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ac2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aca:	4a0f      	ldr	r2, [pc, #60]	; (b08 <SPI_1_PORT_init+0xbc>)
     acc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     ad0:	4a0e      	ldr	r2, [pc, #56]	; (b0c <SPI_1_PORT_init+0xc0>)
     ad2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ad6:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
     ada:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ade:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ae2:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     ae6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     aea:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aee:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     af2:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     af6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     afa:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     afe:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
     b02:	4770      	bx	lr
     b04:	41008000 	.word	0x41008000
     b08:	40024000 	.word	0x40024000
     b0c:	c0020000 	.word	0xc0020000

00000b10 <SPI_1_CLOCK_init>:
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <SPI_1_CLOCK_init+0x1c>)
     b12:	2241      	movs	r2, #65	; 0x41
     b14:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     b18:	2243      	movs	r2, #67	; 0x43
     b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     b1e:	4a04      	ldr	r2, [pc, #16]	; (b30 <SPI_1_CLOCK_init+0x20>)
     b20:	6a13      	ldr	r3, [r2, #32]
     b22:	f043 0301 	orr.w	r3, r3, #1
     b26:	6213      	str	r3, [r2, #32]
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	40001c00 	.word	0x40001c00
     b30:	40000800 	.word	0x40000800

00000b34 <SPI_1_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void SPI_1_init(void)
{
     b34:	b508      	push	{r3, lr}
	SPI_1_CLOCK_init();
     b36:	4b05      	ldr	r3, [pc, #20]	; (b4c <SPI_1_init+0x18>)
     b38:	4798      	blx	r3
	spi_m_sync_init(&SPI_1, SERCOM4);
     b3a:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     b3e:	4804      	ldr	r0, [pc, #16]	; (b50 <SPI_1_init+0x1c>)
     b40:	4b04      	ldr	r3, [pc, #16]	; (b54 <SPI_1_init+0x20>)
     b42:	4798      	blx	r3
	SPI_1_PORT_init();
     b44:	4b04      	ldr	r3, [pc, #16]	; (b58 <SPI_1_init+0x24>)
     b46:	4798      	blx	r3
     b48:	bd08      	pop	{r3, pc}
     b4a:	bf00      	nop
     b4c:	00000b11 	.word	0x00000b11
     b50:	200007f0 	.word	0x200007f0
     b54:	00003839 	.word	0x00003839
     b58:	00000a4d 	.word	0x00000a4d

00000b5c <delay_driver_init>:
}

void delay_driver_init(void)
{
     b5c:	b508      	push	{r3, lr}
	delay_init(SysTick);
     b5e:	4802      	ldr	r0, [pc, #8]	; (b68 <delay_driver_init+0xc>)
     b60:	4b02      	ldr	r3, [pc, #8]	; (b6c <delay_driver_init+0x10>)
     b62:	4798      	blx	r3
     b64:	bd08      	pop	{r3, pc}
     b66:	bf00      	nop
     b68:	e000e010 	.word	0xe000e010
     b6c:	00000e69 	.word	0x00000e69

00000b70 <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b70:	4b1e      	ldr	r3, [pc, #120]	; (bec <USB_0_PORT_init+0x7c>)
     b72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     b76:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     b7c:	6299      	str	r1, [r3, #40]	; 0x28
     b7e:	481c      	ldr	r0, [pc, #112]	; (bf0 <USB_0_PORT_init+0x80>)
     b80:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b82:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b84:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     b88:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b90:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b98:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ba0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ba4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ba8:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     bb4:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bb6:	6299      	str	r1, [r3, #40]	; 0x28
     bb8:	490e      	ldr	r1, [pc, #56]	; (bf4 <USB_0_PORT_init+0x84>)
     bba:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bbc:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bbe:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     bc2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     bc6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bca:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     bce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bd2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bd6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bda:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bde:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     be2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     bea:	4770      	bx	lr
     bec:	41008000 	.word	0x41008000
     bf0:	c0000100 	.word	0xc0000100
     bf4:	c0000200 	.word	0xc0000200

00000bf8 <USB_0_CLOCK_init>:
     bf8:	2244      	movs	r2, #68	; 0x44
     bfa:	4b07      	ldr	r3, [pc, #28]	; (c18 <USB_0_CLOCK_init+0x20>)
     bfc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     c00:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     c04:	691a      	ldr	r2, [r3, #16]
     c06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     c0a:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     c0c:	699a      	ldr	r2, [r3, #24]
     c0e:	f042 0201 	orr.w	r2, r2, #1
     c12:	619a      	str	r2, [r3, #24]
     c14:	4770      	bx	lr
     c16:	bf00      	nop
     c18:	40001c00 	.word	0x40001c00

00000c1c <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     c1c:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     c1e:	4b03      	ldr	r3, [pc, #12]	; (c2c <USB_0_init+0x10>)
     c20:	4798      	blx	r3
	usb_d_init();
     c22:	4b03      	ldr	r3, [pc, #12]	; (c30 <USB_0_init+0x14>)
     c24:	4798      	blx	r3
	USB_0_PORT_init();
     c26:	4b03      	ldr	r3, [pc, #12]	; (c34 <USB_0_init+0x18>)
     c28:	4798      	blx	r3
     c2a:	bd08      	pop	{r3, pc}
     c2c:	00000bf9 	.word	0x00000bf9
     c30:	000015d5 	.word	0x000015d5
     c34:	00000b71 	.word	0x00000b71

00000c38 <system_init>:
}

void system_init(void)
{
     c38:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     c3a:	4b6a      	ldr	r3, [pc, #424]	; (de4 <system_init+0x1ac>)
     c3c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c3e:	4b6a      	ldr	r3, [pc, #424]	; (de8 <system_init+0x1b0>)
     c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     c44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c50:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c54:	4965      	ldr	r1, [pc, #404]	; (dec <system_init+0x1b4>)
     c56:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c5a:	f893 10dc 	ldrb.w	r1, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
     c5e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c62:	f883 10dc 	strb.w	r1, [r3, #220]	; 0xdc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c66:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     c6a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c6e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c72:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c76:	495e      	ldr	r1, [pc, #376]	; (df0 <system_init+0x1b8>)
     c78:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c7c:	f893 10dd 	ldrb.w	r1, [r3, #221]	; 0xdd
	tmp &= ~PORT_PINCFG_PMUXEN;
     c80:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c84:	f883 10dd 	strb.w	r1, [r3, #221]	; 0xdd
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c8c:	4d59      	ldr	r5, [pc, #356]	; (df4 <system_init+0x1bc>)
     c8e:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     c92:	4c59      	ldr	r4, [pc, #356]	; (df8 <system_init+0x1c0>)
     c94:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     c9c:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
     ca0:	f041 0104 	orr.w	r1, r1, #4
     ca4:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ca8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cac:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     cb0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cb4:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cb8:	2104      	movs	r1, #4
     cba:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cbe:	484f      	ldr	r0, [pc, #316]	; (dfc <system_init+0x1c4>)
     cc0:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     cc4:	4e4e      	ldr	r6, [pc, #312]	; (e00 <system_init+0x1c8>)
     cc6:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cca:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     cce:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
     cd2:	4308      	orrs	r0, r1
     cd4:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cd8:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cdc:	f893 1142 	ldrb.w	r1, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     ce0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ce4:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ce8:	2108      	movs	r1, #8
     cea:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cee:	4845      	ldr	r0, [pc, #276]	; (e04 <system_init+0x1cc>)
     cf0:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     cf4:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cf8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     cfc:	f893 0143 	ldrb.w	r0, [r3, #323]	; 0x143
     d00:	f040 0004 	orr.w	r0, r0, #4
     d04:	f883 0143 	strb.w	r0, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d08:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d0c:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
	tmp &= ~PORT_PINCFG_PMUXEN;
     d10:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d14:	f883 1143 	strb.w	r1, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     d1c:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d20:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d24:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     d28:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     d2c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
     d30:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d34:	f893 114f 	ldrb.w	r1, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
     d38:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d3c:	f883 114f 	strb.w	r1, [r3, #335]	; 0x14f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d40:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     d44:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d48:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d4c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d50:	492d      	ldr	r1, [pc, #180]	; (e08 <system_init+0x1d0>)
     d52:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d56:	f893 1152 	ldrb.w	r1, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     d5a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d5e:	f883 1152 	strb.w	r1, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d62:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d66:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
     d6a:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d6e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     d72:	f893 115e 	ldrb.w	r1, [r3, #350]	; 0x15e
     d76:	f041 0104 	orr.w	r1, r1, #4
     d7a:	f883 115e 	strb.w	r1, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d7e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d82:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
	tmp &= ~PORT_PINCFG_PMUXEN;
     d86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d8a:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     d92:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d96:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d9a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     d9e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     da2:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     da6:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
	tmp &= ~PORT_PINCFG_PMUXEN;
     daa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dae:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	// Set pin direction to output
	gpio_set_pin_direction(OLED_LED1, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(OLED_LED1, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     db2:	4b16      	ldr	r3, [pc, #88]	; (e0c <system_init+0x1d4>)
     db4:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     db6:	4b16      	ldr	r3, [pc, #88]	; (e10 <system_init+0x1d8>)
     db8:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     dba:	4a16      	ldr	r2, [pc, #88]	; (e14 <system_init+0x1dc>)
     dbc:	6953      	ldr	r3, [r2, #20]
     dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     dc2:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     dc4:	4b14      	ldr	r3, [pc, #80]	; (e18 <system_init+0x1e0>)
     dc6:	4798      	blx	r3
     dc8:	4602      	mov	r2, r0
     dca:	4914      	ldr	r1, [pc, #80]	; (e1c <system_init+0x1e4>)
     dcc:	4814      	ldr	r0, [pc, #80]	; (e20 <system_init+0x1e8>)
     dce:	4b15      	ldr	r3, [pc, #84]	; (e24 <system_init+0x1ec>)
     dd0:	4798      	blx	r3

	TIMER_0_init();

	SPI_0_init();
     dd2:	4b15      	ldr	r3, [pc, #84]	; (e28 <system_init+0x1f0>)
     dd4:	4798      	blx	r3

	SPI_1_init();
     dd6:	4b15      	ldr	r3, [pc, #84]	; (e2c <system_init+0x1f4>)
     dd8:	4798      	blx	r3

	delay_driver_init();
     dda:	4b15      	ldr	r3, [pc, #84]	; (e30 <system_init+0x1f8>)
     ddc:	4798      	blx	r3

	USB_0_init();
     dde:	4b15      	ldr	r3, [pc, #84]	; (e34 <system_init+0x1fc>)
     de0:	4798      	blx	r3
     de2:	bd70      	pop	{r4, r5, r6, pc}
     de4:	00001b7d 	.word	0x00001b7d
     de8:	41008000 	.word	0x41008000
     dec:	c0001000 	.word	0xc0001000
     df0:	c0002000 	.word	0xc0002000
     df4:	40020000 	.word	0x40020000
     df8:	c0024000 	.word	0xc0024000
     dfc:	40020004 	.word	0x40020004
     e00:	c0020000 	.word	0xc0020000
     e04:	40020008 	.word	0x40020008
     e08:	c0000004 	.word	0xc0000004
     e0c:	00000905 	.word	0x00000905
     e10:	00000929 	.word	0x00000929
     e14:	40000800 	.word	0x40000800
     e18:	00001e59 	.word	0x00001e59
     e1c:	40002400 	.word	0x40002400
     e20:	20000854 	.word	0x20000854
     e24:	00001345 	.word	0x00001345
     e28:	00000a25 	.word	0x00000a25
     e2c:	00000b35 	.word	0x00000b35
     e30:	00000b5d 	.word	0x00000b5d
     e34:	00000c1d 	.word	0x00000c1d

00000e38 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     e38:	b538      	push	{r3, r4, r5, lr}
     e3a:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     e3c:	4605      	mov	r5, r0
     e3e:	b158      	cbz	r0, e58 <adc_sync_init+0x20>
     e40:	1c08      	adds	r0, r1, #0
     e42:	bf18      	it	ne
     e44:	2001      	movne	r0, #1
     e46:	2239      	movs	r2, #57	; 0x39
     e48:	4904      	ldr	r1, [pc, #16]	; (e5c <adc_sync_init+0x24>)
     e4a:	4b05      	ldr	r3, [pc, #20]	; (e60 <adc_sync_init+0x28>)
     e4c:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     e4e:	4621      	mov	r1, r4
     e50:	4628      	mov	r0, r5
     e52:	4b04      	ldr	r3, [pc, #16]	; (e64 <adc_sync_init+0x2c>)
     e54:	4798      	blx	r3
}
     e56:	bd38      	pop	{r3, r4, r5, pc}
     e58:	2000      	movs	r0, #0
     e5a:	e7f4      	b.n	e46 <adc_sync_init+0xe>
     e5c:	0000474c 	.word	0x0000474c
     e60:	00001921 	.word	0x00001921
     e64:	00001b21 	.word	0x00001b21

00000e68 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     e68:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     e6a:	4b02      	ldr	r3, [pc, #8]	; (e74 <delay_init+0xc>)
     e6c:	6018      	str	r0, [r3, #0]
     e6e:	4b02      	ldr	r3, [pc, #8]	; (e78 <delay_init+0x10>)
     e70:	4798      	blx	r3
     e72:	bd08      	pop	{r3, pc}
     e74:	200004b8 	.word	0x200004b8
     e78:	00002501 	.word	0x00002501

00000e7c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     e7c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     e7e:	4b04      	ldr	r3, [pc, #16]	; (e90 <delay_us+0x14>)
     e80:	681c      	ldr	r4, [r3, #0]
     e82:	4b04      	ldr	r3, [pc, #16]	; (e94 <delay_us+0x18>)
     e84:	4798      	blx	r3
     e86:	4601      	mov	r1, r0
     e88:	4620      	mov	r0, r4
     e8a:	4b03      	ldr	r3, [pc, #12]	; (e98 <delay_us+0x1c>)
     e8c:	4798      	blx	r3
     e8e:	bd10      	pop	{r4, pc}
     e90:	200004b8 	.word	0x200004b8
     e94:	00001b59 	.word	0x00001b59
     e98:	00002515 	.word	0x00002515

00000e9c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     e9c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     e9e:	4b04      	ldr	r3, [pc, #16]	; (eb0 <delay_ms+0x14>)
     ea0:	681c      	ldr	r4, [r3, #0]
     ea2:	4b04      	ldr	r3, [pc, #16]	; (eb4 <delay_ms+0x18>)
     ea4:	4798      	blx	r3
     ea6:	4601      	mov	r1, r0
     ea8:	4620      	mov	r0, r4
     eaa:	4b03      	ldr	r3, [pc, #12]	; (eb8 <delay_ms+0x1c>)
     eac:	4798      	blx	r3
     eae:	bd10      	pop	{r4, pc}
     eb0:	200004b8 	.word	0x200004b8
     eb4:	00001b71 	.word	0x00001b71
     eb8:	00002515 	.word	0x00002515

00000ebc <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     ebc:	b508      	push	{r3, lr}
	return _event_system_init();
     ebe:	4b01      	ldr	r3, [pc, #4]	; (ec4 <event_system_init+0x8>)
     ec0:	4798      	blx	r3
}
     ec2:	bd08      	pop	{r3, pc}
     ec4:	00001be1 	.word	0x00001be1

00000ec8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     ec8:	b570      	push	{r4, r5, r6, lr}
     eca:	460d      	mov	r5, r1
     ecc:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     ece:	4604      	mov	r4, r0
     ed0:	b160      	cbz	r0, eec <io_write+0x24>
     ed2:	1c08      	adds	r0, r1, #0
     ed4:	bf18      	it	ne
     ed6:	2001      	movne	r0, #1
     ed8:	2234      	movs	r2, #52	; 0x34
     eda:	4905      	ldr	r1, [pc, #20]	; (ef0 <io_write+0x28>)
     edc:	4b05      	ldr	r3, [pc, #20]	; (ef4 <io_write+0x2c>)
     ede:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     ee0:	6823      	ldr	r3, [r4, #0]
     ee2:	4632      	mov	r2, r6
     ee4:	4629      	mov	r1, r5
     ee6:	4620      	mov	r0, r4
     ee8:	4798      	blx	r3
}
     eea:	bd70      	pop	{r4, r5, r6, pc}
     eec:	2000      	movs	r0, #0
     eee:	e7f3      	b.n	ed8 <io_write+0x10>
     ef0:	00004768 	.word	0x00004768
     ef4:	00001921 	.word	0x00001921

00000ef8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     ef8:	b570      	push	{r4, r5, r6, lr}
     efa:	460d      	mov	r5, r1
     efc:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     efe:	4604      	mov	r4, r0
     f00:	b160      	cbz	r0, f1c <io_read+0x24>
     f02:	1c08      	adds	r0, r1, #0
     f04:	bf18      	it	ne
     f06:	2001      	movne	r0, #1
     f08:	223d      	movs	r2, #61	; 0x3d
     f0a:	4905      	ldr	r1, [pc, #20]	; (f20 <io_read+0x28>)
     f0c:	4b05      	ldr	r3, [pc, #20]	; (f24 <io_read+0x2c>)
     f0e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     f10:	6863      	ldr	r3, [r4, #4]
     f12:	4632      	mov	r2, r6
     f14:	4629      	mov	r1, r5
     f16:	4620      	mov	r0, r4
     f18:	4798      	blx	r3
}
     f1a:	bd70      	pop	{r4, r5, r6, pc}
     f1c:	2000      	movs	r0, #0
     f1e:	e7f3      	b.n	f08 <io_read+0x10>
     f20:	00004768 	.word	0x00004768
     f24:	00001921 	.word	0x00001921

00000f28 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f2a:	460f      	mov	r7, r1
     f2c:	4616      	mov	r6, r2
	ASSERT(io);
     f2e:	4604      	mov	r4, r0
     f30:	f240 1227 	movw	r2, #295	; 0x127
     f34:	4909      	ldr	r1, [pc, #36]	; (f5c <_spi_m_async_io_write+0x34>)
     f36:	3000      	adds	r0, #0
     f38:	bf18      	it	ne
     f3a:	2001      	movne	r0, #1
     f3c:	4b08      	ldr	r3, [pc, #32]	; (f60 <_spi_m_async_io_write+0x38>)
     f3e:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
     f40:	2500      	movs	r5, #0
     f42:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
     f44:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
     f46:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     f48:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     f4a:	2310      	movs	r3, #16
     f4c:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
     f4e:	2101      	movs	r1, #1
     f50:	f1a4 0020 	sub.w	r0, r4, #32
     f54:	4b03      	ldr	r3, [pc, #12]	; (f64 <_spi_m_async_io_write+0x3c>)
     f56:	4798      	blx	r3

	return ERR_NONE;
}
     f58:	4628      	mov	r0, r5
     f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f5c:	0000477c 	.word	0x0000477c
     f60:	00001921 	.word	0x00001921
     f64:	00002389 	.word	0x00002389

00000f68 <_spi_m_async_io_read>:
{
     f68:	b570      	push	{r4, r5, r6, lr}
     f6a:	460d      	mov	r5, r1
     f6c:	4616      	mov	r6, r2
	ASSERT(io);
     f6e:	4604      	mov	r4, r0
     f70:	f240 1205 	movw	r2, #261	; 0x105
     f74:	490c      	ldr	r1, [pc, #48]	; (fa8 <_spi_m_async_io_read+0x40>)
     f76:	3000      	adds	r0, #0
     f78:	bf18      	it	ne
     f7a:	2001      	movne	r0, #1
     f7c:	4b0b      	ldr	r3, [pc, #44]	; (fac <_spi_m_async_io_read+0x44>)
     f7e:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
     f80:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
     f82:	2500      	movs	r5, #0
     f84:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
     f86:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     f88:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     f8a:	2310      	movs	r3, #16
     f8c:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
     f8e:	3c20      	subs	r4, #32
     f90:	2101      	movs	r1, #1
     f92:	4620      	mov	r0, r4
     f94:	4b06      	ldr	r3, [pc, #24]	; (fb0 <_spi_m_async_io_read+0x48>)
     f96:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
     f98:	f240 11ff 	movw	r1, #511	; 0x1ff
     f9c:	4620      	mov	r0, r4
     f9e:	4b05      	ldr	r3, [pc, #20]	; (fb4 <_spi_m_async_io_read+0x4c>)
     fa0:	4798      	blx	r3
}
     fa2:	4628      	mov	r0, r5
     fa4:	bd70      	pop	{r4, r5, r6, pc}
     fa6:	bf00      	nop
     fa8:	0000477c 	.word	0x0000477c
     fac:	00001921 	.word	0x00001921
     fb0:	000023bd 	.word	0x000023bd
     fb4:	00002439 	.word	0x00002439

00000fb8 <_spi_dev_error>:
{
     fb8:	b570      	push	{r4, r5, r6, lr}
     fba:	4604      	mov	r4, r0
     fbc:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     fbe:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
     fc0:	2100      	movs	r1, #0
     fc2:	4b09      	ldr	r3, [pc, #36]	; (fe8 <_spi_dev_error+0x30>)
     fc4:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
     fc6:	2100      	movs	r1, #0
     fc8:	4620      	mov	r0, r4
     fca:	4b08      	ldr	r3, [pc, #32]	; (fec <_spi_dev_error+0x34>)
     fcc:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
     fce:	2100      	movs	r1, #0
     fd0:	4620      	mov	r0, r4
     fd2:	4b07      	ldr	r3, [pc, #28]	; (ff0 <_spi_dev_error+0x38>)
     fd4:	4798      	blx	r3
	spi->stat = 0;
     fd6:	2300      	movs	r3, #0
     fd8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
     fdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
     fde:	b113      	cbz	r3, fe6 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
     fe0:	4631      	mov	r1, r6
     fe2:	4628      	mov	r0, r5
     fe4:	4798      	blx	r3
     fe6:	bd70      	pop	{r4, r5, r6, pc}
     fe8:	00002389 	.word	0x00002389
     fec:	000023bd 	.word	0x000023bd
     ff0:	000023fd 	.word	0x000023fd

00000ff4 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
     ff4:	6c02      	ldr	r2, [r0, #64]	; 0x40
     ff6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     ff8:	429a      	cmp	r2, r3
     ffa:	d200      	bcs.n	ffe <_spi_dev_complete+0xa>
     ffc:	4770      	bx	lr
{
     ffe:	b510      	push	{r4, lr}
    1000:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    1002:	2100      	movs	r1, #0
    1004:	4b04      	ldr	r3, [pc, #16]	; (1018 <_spi_dev_complete+0x24>)
    1006:	4798      	blx	r3
		spi->stat = 0;
    1008:	2300      	movs	r3, #0
    100a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    100e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1010:	b10b      	cbz	r3, 1016 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    1012:	1f20      	subs	r0, r4, #4
    1014:	4798      	blx	r3
    1016:	bd10      	pop	{r4, pc}
    1018:	000023fd 	.word	0x000023fd

0000101c <_spi_dev_tx>:
{
    101c:	b510      	push	{r4, lr}
    101e:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    1020:	7903      	ldrb	r3, [r0, #4]
    1022:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    1024:	6b42      	ldr	r2, [r0, #52]	; 0x34
    1026:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1028:	f103 0101 	add.w	r1, r3, #1
    102c:	6401      	str	r1, [r0, #64]	; 0x40
    102e:	bf94      	ite	ls
    1030:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    1032:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    1036:	4b08      	ldr	r3, [pc, #32]	; (1058 <_spi_dev_tx+0x3c>)
    1038:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    103a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    103c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    103e:	429a      	cmp	r2, r3
    1040:	d000      	beq.n	1044 <_spi_dev_tx+0x28>
    1042:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    1044:	2100      	movs	r1, #0
    1046:	4620      	mov	r0, r4
    1048:	4b04      	ldr	r3, [pc, #16]	; (105c <_spi_dev_tx+0x40>)
    104a:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    104c:	2101      	movs	r1, #1
    104e:	4620      	mov	r0, r4
    1050:	4b03      	ldr	r3, [pc, #12]	; (1060 <_spi_dev_tx+0x44>)
    1052:	4798      	blx	r3
}
    1054:	e7f5      	b.n	1042 <_spi_dev_tx+0x26>
    1056:	bf00      	nop
    1058:	00002439 	.word	0x00002439
    105c:	00002389 	.word	0x00002389
    1060:	000023fd 	.word	0x000023fd

00001064 <_spi_dev_rx>:
{
    1064:	b570      	push	{r4, r5, r6, lr}
    1066:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    1068:	6b85      	ldr	r5, [r0, #56]	; 0x38
    106a:	b305      	cbz	r5, 10ae <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    106c:	7903      	ldrb	r3, [r0, #4]
    106e:	2b01      	cmp	r3, #1
    1070:	d916      	bls.n	10a0 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    1072:	6c06      	ldr	r6, [r0, #64]	; 0x40
    1074:	1c73      	adds	r3, r6, #1
    1076:	6403      	str	r3, [r0, #64]	; 0x40
    1078:	4b18      	ldr	r3, [pc, #96]	; (10dc <_spi_dev_rx+0x78>)
    107a:	4798      	blx	r3
    107c:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    1080:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1082:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1084:	4293      	cmp	r3, r2
    1086:	d21d      	bcs.n	10c4 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    1088:	6b62      	ldr	r2, [r4, #52]	; 0x34
    108a:	b1b2      	cbz	r2, 10ba <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    108c:	7921      	ldrb	r1, [r4, #4]
    108e:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    1090:	bf94      	ite	ls
    1092:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    1094:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    1098:	4620      	mov	r0, r4
    109a:	4b11      	ldr	r3, [pc, #68]	; (10e0 <_spi_dev_rx+0x7c>)
    109c:	4798      	blx	r3
    109e:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    10a0:	6c06      	ldr	r6, [r0, #64]	; 0x40
    10a2:	1c73      	adds	r3, r6, #1
    10a4:	6403      	str	r3, [r0, #64]	; 0x40
    10a6:	4b0d      	ldr	r3, [pc, #52]	; (10dc <_spi_dev_rx+0x78>)
    10a8:	4798      	blx	r3
    10aa:	55a8      	strb	r0, [r5, r6]
    10ac:	e7e8      	b.n	1080 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    10ae:	4b0b      	ldr	r3, [pc, #44]	; (10dc <_spi_dev_rx+0x78>)
    10b0:	4798      	blx	r3
		spi->xfercnt++;
    10b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    10b4:	3301      	adds	r3, #1
    10b6:	6423      	str	r3, [r4, #64]	; 0x40
    10b8:	e7e2      	b.n	1080 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    10ba:	88e1      	ldrh	r1, [r4, #6]
    10bc:	4620      	mov	r0, r4
    10be:	4b08      	ldr	r3, [pc, #32]	; (10e0 <_spi_dev_rx+0x7c>)
    10c0:	4798      	blx	r3
    10c2:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    10c4:	2100      	movs	r1, #0
    10c6:	4620      	mov	r0, r4
    10c8:	4b06      	ldr	r3, [pc, #24]	; (10e4 <_spi_dev_rx+0x80>)
    10ca:	4798      	blx	r3
		spi->stat = 0;
    10cc:	2300      	movs	r3, #0
    10ce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    10d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    10d4:	b10b      	cbz	r3, 10da <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    10d6:	1f20      	subs	r0, r4, #4
    10d8:	4798      	blx	r3
    10da:	bd70      	pop	{r4, r5, r6, pc}
    10dc:	00002469 	.word	0x00002469
    10e0:	00002439 	.word	0x00002439
    10e4:	000023bd 	.word	0x000023bd

000010e8 <spi_m_async_init>:
{
    10e8:	b570      	push	{r4, r5, r6, lr}
    10ea:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    10ec:	4606      	mov	r6, r0
    10ee:	b330      	cbz	r0, 113e <spi_m_async_init+0x56>
    10f0:	1c08      	adds	r0, r1, #0
    10f2:	bf18      	it	ne
    10f4:	2001      	movne	r0, #1
    10f6:	22a5      	movs	r2, #165	; 0xa5
    10f8:	4912      	ldr	r1, [pc, #72]	; (1144 <spi_m_async_init+0x5c>)
    10fa:	4b13      	ldr	r3, [pc, #76]	; (1148 <spi_m_async_init+0x60>)
    10fc:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    10fe:	4634      	mov	r4, r6
    1100:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    1104:	4629      	mov	r1, r5
    1106:	4620      	mov	r0, r4
    1108:	4b10      	ldr	r3, [pc, #64]	; (114c <spi_m_async_init+0x64>)
    110a:	4798      	blx	r3
	if (rc >= 0) {
    110c:	2800      	cmp	r0, #0
    110e:	db15      	blt.n	113c <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    1110:	4a0f      	ldr	r2, [pc, #60]	; (1150 <spi_m_async_init+0x68>)
    1112:	2100      	movs	r1, #0
    1114:	4620      	mov	r0, r4
    1116:	4d0f      	ldr	r5, [pc, #60]	; (1154 <spi_m_async_init+0x6c>)
    1118:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    111a:	4a0f      	ldr	r2, [pc, #60]	; (1158 <spi_m_async_init+0x70>)
    111c:	2101      	movs	r1, #1
    111e:	4620      	mov	r0, r4
    1120:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    1122:	4a0e      	ldr	r2, [pc, #56]	; (115c <spi_m_async_init+0x74>)
    1124:	2102      	movs	r1, #2
    1126:	4620      	mov	r0, r4
    1128:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    112a:	4a0d      	ldr	r2, [pc, #52]	; (1160 <spi_m_async_init+0x78>)
    112c:	2103      	movs	r1, #3
    112e:	4620      	mov	r0, r4
    1130:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    1132:	4b0c      	ldr	r3, [pc, #48]	; (1164 <spi_m_async_init+0x7c>)
    1134:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    1136:	4b0c      	ldr	r3, [pc, #48]	; (1168 <spi_m_async_init+0x80>)
    1138:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    113a:	2000      	movs	r0, #0
}
    113c:	bd70      	pop	{r4, r5, r6, pc}
    113e:	2000      	movs	r0, #0
    1140:	e7d9      	b.n	10f6 <spi_m_async_init+0xe>
    1142:	bf00      	nop
    1144:	0000477c 	.word	0x0000477c
    1148:	00001921 	.word	0x00001921
    114c:	000021dd 	.word	0x000021dd
    1150:	0000101d 	.word	0x0000101d
    1154:	00002495 	.word	0x00002495
    1158:	00001065 	.word	0x00001065
    115c:	00000ff5 	.word	0x00000ff5
    1160:	00000fb9 	.word	0x00000fb9
    1164:	00000f69 	.word	0x00000f69
    1168:	00000f29 	.word	0x00000f29

0000116c <spi_m_async_enable>:
{
    116c:	b510      	push	{r4, lr}
	ASSERT(spi);
    116e:	4604      	mov	r4, r0
    1170:	22c1      	movs	r2, #193	; 0xc1
    1172:	4905      	ldr	r1, [pc, #20]	; (1188 <spi_m_async_enable+0x1c>)
    1174:	3000      	adds	r0, #0
    1176:	bf18      	it	ne
    1178:	2001      	movne	r0, #1
    117a:	4b04      	ldr	r3, [pc, #16]	; (118c <spi_m_async_enable+0x20>)
    117c:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    117e:	1d20      	adds	r0, r4, #4
    1180:	4b03      	ldr	r3, [pc, #12]	; (1190 <spi_m_async_enable+0x24>)
    1182:	4798      	blx	r3
    1184:	bd10      	pop	{r4, pc}
    1186:	bf00      	nop
    1188:	0000477c 	.word	0x0000477c
    118c:	00001921 	.word	0x00001921
    1190:	00002249 	.word	0x00002249

00001194 <spi_m_async_disable>:
{
    1194:	b510      	push	{r4, lr}
	ASSERT(spi);
    1196:	4604      	mov	r4, r0
    1198:	22c7      	movs	r2, #199	; 0xc7
    119a:	4909      	ldr	r1, [pc, #36]	; (11c0 <spi_m_async_disable+0x2c>)
    119c:	3000      	adds	r0, #0
    119e:	bf18      	it	ne
    11a0:	2001      	movne	r0, #1
    11a2:	4b08      	ldr	r3, [pc, #32]	; (11c4 <spi_m_async_disable+0x30>)
    11a4:	4798      	blx	r3
	_spi_m_async_enable_tx(&spi->dev, false);
    11a6:	3404      	adds	r4, #4
    11a8:	2100      	movs	r1, #0
    11aa:	4620      	mov	r0, r4
    11ac:	4b06      	ldr	r3, [pc, #24]	; (11c8 <spi_m_async_disable+0x34>)
    11ae:	4798      	blx	r3
	_spi_m_async_enable_rx(&spi->dev, false);
    11b0:	2100      	movs	r1, #0
    11b2:	4620      	mov	r0, r4
    11b4:	4b05      	ldr	r3, [pc, #20]	; (11cc <spi_m_async_disable+0x38>)
    11b6:	4798      	blx	r3
	_spi_m_async_disable(&spi->dev);
    11b8:	4620      	mov	r0, r4
    11ba:	4b05      	ldr	r3, [pc, #20]	; (11d0 <spi_m_async_disable+0x3c>)
    11bc:	4798      	blx	r3
    11be:	bd10      	pop	{r4, pc}
    11c0:	0000477c 	.word	0x0000477c
    11c4:	00001921 	.word	0x00001921
    11c8:	00002389 	.word	0x00002389
    11cc:	000023bd 	.word	0x000023bd
    11d0:	00002279 	.word	0x00002279

000011d4 <spi_m_async_get_status>:

	return ERR_NONE;
}

int32_t spi_m_async_get_status(struct spi_m_async_descriptor *spi, struct spi_m_async_status *p_stat)
{
    11d4:	b082      	sub	sp, #8
	/* Get a copy of status to avoid critical issue */
	volatile uint32_t stat = spi->stat;
    11d6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    11da:	9301      	str	r3, [sp, #4]

	if (p_stat) {
    11dc:	b119      	cbz	r1, 11e6 <spi_m_async_get_status+0x12>
		p_stat->flags   = stat;
    11de:	9a01      	ldr	r2, [sp, #4]
    11e0:	600a      	str	r2, [r1, #0]
		p_stat->xfercnt = spi->xfercnt;
    11e2:	6c42      	ldr	r2, [r0, #68]	; 0x44
    11e4:	604a      	str	r2, [r1, #4]
	}

	if (stat & SPI_M_ASYNC_STATUS_BUSY) {
    11e6:	9b01      	ldr	r3, [sp, #4]
    11e8:	f003 0310 	and.w	r3, r3, #16
		return ERR_BUSY;
	}

	return ERR_NONE;
    11ec:	2b00      	cmp	r3, #0
}
    11ee:	bf14      	ite	ne
    11f0:	f06f 0003 	mvnne.w	r0, #3
    11f4:	2000      	moveq	r0, #0
    11f6:	b002      	add	sp, #8
    11f8:	4770      	bx	lr
	...

000011fc <spi_m_async_register_callback>:

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    11fc:	b570      	push	{r4, r5, r6, lr}
    11fe:	460c      	mov	r4, r1
    1200:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    1202:	4605      	mov	r5, r0
    1204:	b158      	cbz	r0, 121e <spi_m_async_register_callback+0x22>
    1206:	2901      	cmp	r1, #1
    1208:	bf8c      	ite	hi
    120a:	2000      	movhi	r0, #0
    120c:	2001      	movls	r0, #1
    120e:	f240 1263 	movw	r2, #355	; 0x163
    1212:	4908      	ldr	r1, [pc, #32]	; (1234 <spi_m_async_register_callback+0x38>)
    1214:	4b08      	ldr	r3, [pc, #32]	; (1238 <spi_m_async_register_callback+0x3c>)
    1216:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    1218:	b91c      	cbnz	r4, 1222 <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    121a:	632e      	str	r6, [r5, #48]	; 0x30
    121c:	bd70      	pop	{r4, r5, r6, pc}
    121e:	2000      	movs	r0, #0
    1220:	e7f5      	b.n	120e <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    1222:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    1224:	1c32      	adds	r2, r6, #0
    1226:	bf18      	it	ne
    1228:	2201      	movne	r2, #1
    122a:	2103      	movs	r1, #3
    122c:	1d28      	adds	r0, r5, #4
    122e:	4b03      	ldr	r3, [pc, #12]	; (123c <spi_m_async_register_callback+0x40>)
    1230:	4798      	blx	r3
    1232:	bd70      	pop	{r4, r5, r6, pc}
    1234:	0000477c 	.word	0x0000477c
    1238:	00001921 	.word	0x00001921
    123c:	000024c9 	.word	0x000024c9

00001240 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    1240:	b538      	push	{r3, r4, r5, lr}
    1242:	460d      	mov	r5, r1
	ASSERT(spi && io);
    1244:	4604      	mov	r4, r0
    1246:	b158      	cbz	r0, 1260 <spi_m_async_get_io_descriptor+0x20>
    1248:	1c08      	adds	r0, r1, #0
    124a:	bf18      	it	ne
    124c:	2001      	movne	r0, #1
    124e:	f240 126f 	movw	r2, #367	; 0x16f
    1252:	4904      	ldr	r1, [pc, #16]	; (1264 <spi_m_async_get_io_descriptor+0x24>)
    1254:	4b04      	ldr	r3, [pc, #16]	; (1268 <spi_m_async_get_io_descriptor+0x28>)
    1256:	4798      	blx	r3
	*io = &spi->io;
    1258:	3424      	adds	r4, #36	; 0x24
    125a:	602c      	str	r4, [r5, #0]
	return 0;
}
    125c:	2000      	movs	r0, #0
    125e:	bd38      	pop	{r3, r4, r5, pc}
    1260:	2000      	movs	r0, #0
    1262:	e7f4      	b.n	124e <spi_m_async_get_io_descriptor+0xe>
    1264:	0000477c 	.word	0x0000477c
    1268:	00001921 	.word	0x00001921

0000126c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    126e:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1270:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1272:	b12f      	cbz	r7, 1280 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1274:	688d      	ldr	r5, [r1, #8]
    1276:	463c      	mov	r4, r7
    1278:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    127a:	f1c2 0e01 	rsb	lr, r2, #1
    127e:	e00b      	b.n	1298 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1280:	4b0e      	ldr	r3, [pc, #56]	; (12bc <timer_add_timer_task+0x50>)
    1282:	4798      	blx	r3
		return;
    1284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1286:	4473      	add	r3, lr
    1288:	68a0      	ldr	r0, [r4, #8]
    128a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    128c:	42ab      	cmp	r3, r5
    128e:	d20a      	bcs.n	12a6 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1290:	6823      	ldr	r3, [r4, #0]
    1292:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1294:	b153      	cbz	r3, 12ac <timer_add_timer_task+0x40>
    1296:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1298:	6863      	ldr	r3, [r4, #4]
    129a:	4293      	cmp	r3, r2
    129c:	d8f3      	bhi.n	1286 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    129e:	68a0      	ldr	r0, [r4, #8]
    12a0:	4403      	add	r3, r0
    12a2:	1a9b      	subs	r3, r3, r2
    12a4:	e7f2      	b.n	128c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    12a6:	42a7      	cmp	r7, r4
    12a8:	d004      	beq.n	12b4 <timer_add_timer_task+0x48>
    12aa:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    12ac:	4620      	mov	r0, r4
    12ae:	4b04      	ldr	r3, [pc, #16]	; (12c0 <timer_add_timer_task+0x54>)
    12b0:	4798      	blx	r3
    12b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    12b4:	4660      	mov	r0, ip
    12b6:	4b01      	ldr	r3, [pc, #4]	; (12bc <timer_add_timer_task+0x50>)
    12b8:	4798      	blx	r3
    12ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12bc:	00001949 	.word	0x00001949
    12c0:	00001975 	.word	0x00001975

000012c4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    12c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    12c8:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    12ca:	6907      	ldr	r7, [r0, #16]
    12cc:	3701      	adds	r7, #1
    12ce:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    12d0:	7e03      	ldrb	r3, [r0, #24]
    12d2:	f013 0f01 	tst.w	r3, #1
    12d6:	d113      	bne.n	1300 <timer_process_counted+0x3c>
    12d8:	7e03      	ldrb	r3, [r0, #24]
    12da:	f013 0f02 	tst.w	r3, #2
    12de:	d10f      	bne.n	1300 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    12e0:	b354      	cbz	r4, 1338 <timer_process_counted+0x74>
    12e2:	6863      	ldr	r3, [r4, #4]
    12e4:	1afb      	subs	r3, r7, r3
    12e6:	68a2      	ldr	r2, [r4, #8]
    12e8:	4293      	cmp	r3, r2
    12ea:	d307      	bcc.n	12fc <timer_process_counted+0x38>
    12ec:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    12ee:	f100 0814 	add.w	r8, r0, #20
    12f2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 133c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    12f6:	f8df a048 	ldr.w	sl, [pc, #72]	; 1340 <timer_process_counted+0x7c>
    12fa:	e012      	b.n	1322 <timer_process_counted+0x5e>
    12fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1300:	7e03      	ldrb	r3, [r0, #24]
    1302:	f043 0302 	orr.w	r3, r3, #2
    1306:	7603      	strb	r3, [r0, #24]
		return;
    1308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    130c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    130e:	68e3      	ldr	r3, [r4, #12]
    1310:	4620      	mov	r0, r4
    1312:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1314:	b185      	cbz	r5, 1338 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1316:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1318:	686b      	ldr	r3, [r5, #4]
    131a:	1afb      	subs	r3, r7, r3
    131c:	68aa      	ldr	r2, [r5, #8]
    131e:	4293      	cmp	r3, r2
    1320:	d30a      	bcc.n	1338 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1322:	4640      	mov	r0, r8
    1324:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1326:	7c23      	ldrb	r3, [r4, #16]
    1328:	2b01      	cmp	r3, #1
    132a:	d1ef      	bne.n	130c <timer_process_counted+0x48>
			tmp->time_label = time;
    132c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    132e:	463a      	mov	r2, r7
    1330:	4621      	mov	r1, r4
    1332:	4640      	mov	r0, r8
    1334:	47d0      	blx	sl
    1336:	e7e9      	b.n	130c <timer_process_counted+0x48>
    1338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    133c:	000019bd 	.word	0x000019bd
    1340:	0000126d 	.word	0x0000126d

00001344 <timer_init>:
{
    1344:	b538      	push	{r3, r4, r5, lr}
    1346:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1348:	4604      	mov	r4, r0
    134a:	b178      	cbz	r0, 136c <timer_init+0x28>
    134c:	1c08      	adds	r0, r1, #0
    134e:	bf18      	it	ne
    1350:	2001      	movne	r0, #1
    1352:	223b      	movs	r2, #59	; 0x3b
    1354:	4906      	ldr	r1, [pc, #24]	; (1370 <timer_init+0x2c>)
    1356:	4b07      	ldr	r3, [pc, #28]	; (1374 <timer_init+0x30>)
    1358:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    135a:	4629      	mov	r1, r5
    135c:	4620      	mov	r0, r4
    135e:	4b06      	ldr	r3, [pc, #24]	; (1378 <timer_init+0x34>)
    1360:	4798      	blx	r3
	descr->time                           = 0;
    1362:	2000      	movs	r0, #0
    1364:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1366:	4b05      	ldr	r3, [pc, #20]	; (137c <timer_init+0x38>)
    1368:	6023      	str	r3, [r4, #0]
}
    136a:	bd38      	pop	{r3, r4, r5, pc}
    136c:	2000      	movs	r0, #0
    136e:	e7f0      	b.n	1352 <timer_init+0xe>
    1370:	0000479c 	.word	0x0000479c
    1374:	00001921 	.word	0x00001921
    1378:	00001de5 	.word	0x00001de5
    137c:	000012c5 	.word	0x000012c5

00001380 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1380:	4b0f      	ldr	r3, [pc, #60]	; (13c0 <_usb_d_find_ep+0x40>)
    1382:	7859      	ldrb	r1, [r3, #1]
    1384:	4288      	cmp	r0, r1
    1386:	d018      	beq.n	13ba <_usb_d_find_ep+0x3a>
{
    1388:	b430      	push	{r4, r5}
    138a:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    138c:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    138e:	f000 050f 	and.w	r5, r0, #15
    1392:	e007      	b.n	13a4 <_usb_d_find_ep+0x24>
    1394:	3301      	adds	r3, #1
    1396:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1398:	2b04      	cmp	r3, #4
    139a:	d009      	beq.n	13b0 <_usb_d_find_ep+0x30>
    139c:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    139e:	7851      	ldrb	r1, [r2, #1]
    13a0:	4281      	cmp	r1, r0
    13a2:	d007      	beq.n	13b4 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    13a4:	7814      	ldrb	r4, [r2, #0]
    13a6:	2c00      	cmp	r4, #0
    13a8:	d1f4      	bne.n	1394 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    13aa:	428d      	cmp	r5, r1
    13ac:	d1f2      	bne.n	1394 <_usb_d_find_ep+0x14>
    13ae:	e001      	b.n	13b4 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    13b0:	f04f 33ff 	mov.w	r3, #4294967295
}
    13b4:	4618      	mov	r0, r3
    13b6:	bc30      	pop	{r4, r5}
    13b8:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    13ba:	2300      	movs	r3, #0
}
    13bc:	4618      	mov	r0, r3
    13be:	4770      	bx	lr
    13c0:	200004bc 	.word	0x200004bc

000013c4 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    13c4:	2000      	movs	r0, #0
    13c6:	4770      	bx	lr

000013c8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    13c8:	b538      	push	{r3, r4, r5, lr}
    13ca:	4604      	mov	r4, r0
    13cc:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    13ce:	4b09      	ldr	r3, [pc, #36]	; (13f4 <usb_d_cb_trans_more+0x2c>)
    13d0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    13d2:	4b09      	ldr	r3, [pc, #36]	; (13f8 <usb_d_cb_trans_more+0x30>)
    13d4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    13d8:	789b      	ldrb	r3, [r3, #2]
    13da:	2b03      	cmp	r3, #3
    13dc:	d001      	beq.n	13e2 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    13de:	2000      	movs	r0, #0
}
    13e0:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    13e2:	4b05      	ldr	r3, [pc, #20]	; (13f8 <usb_d_cb_trans_more+0x30>)
    13e4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    13e8:	6983      	ldr	r3, [r0, #24]
    13ea:	4629      	mov	r1, r5
    13ec:	4620      	mov	r0, r4
    13ee:	4798      	blx	r3
    13f0:	bd38      	pop	{r3, r4, r5, pc}
    13f2:	bf00      	nop
    13f4:	00001381 	.word	0x00001381
    13f8:	200004bc 	.word	0x200004bc

000013fc <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    13fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    13fe:	b085      	sub	sp, #20
    1400:	4606      	mov	r6, r0
    1402:	460d      	mov	r5, r1
    1404:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1406:	4b4d      	ldr	r3, [pc, #308]	; (153c <_usb_d_cb_trans_done+0x140>)
    1408:	4798      	blx	r3
    140a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    140c:	2d00      	cmp	r5, #0
    140e:	d15b      	bne.n	14c8 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1410:	4a4b      	ldr	r2, [pc, #300]	; (1540 <_usb_d_cb_trans_done+0x144>)
    1412:	0143      	lsls	r3, r0, #5
    1414:	18d1      	adds	r1, r2, r3
    1416:	2000      	movs	r0, #0
    1418:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    141a:	5cd3      	ldrb	r3, [r2, r3]
    141c:	b173      	cbz	r3, 143c <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    141e:	4b48      	ldr	r3, [pc, #288]	; (1540 <_usb_d_cb_trans_done+0x144>)
    1420:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1424:	2201      	movs	r2, #1
    1426:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1428:	4845      	ldr	r0, [pc, #276]	; (1540 <_usb_d_cb_trans_done+0x144>)
    142a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    142e:	69c3      	ldr	r3, [r0, #28]
    1430:	463a      	mov	r2, r7
    1432:	78c1      	ldrb	r1, [r0, #3]
    1434:	4630      	mov	r0, r6
    1436:	4798      	blx	r3
}
    1438:	b005      	add	sp, #20
    143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    143c:	788b      	ldrb	r3, [r1, #2]
    143e:	2b03      	cmp	r3, #3
    1440:	d00b      	beq.n	145a <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1442:	483f      	ldr	r0, [pc, #252]	; (1540 <_usb_d_cb_trans_done+0x144>)
    1444:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    1448:	4614      	mov	r4, r2
    144a:	69d3      	ldr	r3, [r2, #28]
    144c:	320c      	adds	r2, #12
    144e:	2100      	movs	r1, #0
    1450:	7860      	ldrb	r0, [r4, #1]
    1452:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1454:	2302      	movs	r3, #2
    1456:	70a3      	strb	r3, [r4, #2]
    1458:	e7ee      	b.n	1438 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    145a:	460b      	mov	r3, r1
    145c:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1460:	460a      	mov	r2, r1
    1462:	69ce      	ldr	r6, [r1, #28]
    1464:	320c      	adds	r2, #12
    1466:	2101      	movs	r1, #1
    1468:	7858      	ldrb	r0, [r3, #1]
    146a:	47b0      	blx	r6
		if (err) {
    146c:	b1a0      	cbz	r0, 1498 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    146e:	4b34      	ldr	r3, [pc, #208]	; (1540 <_usb_d_cb_trans_done+0x144>)
    1470:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1474:	2205      	movs	r2, #5
    1476:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1478:	2202      	movs	r2, #2
    147a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    147c:	2d00      	cmp	r5, #0
    147e:	db09      	blt.n	1494 <_usb_d_cb_trans_done+0x98>
    1480:	482f      	ldr	r0, [pc, #188]	; (1540 <_usb_d_cb_trans_done+0x144>)
    1482:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1486:	7840      	ldrb	r0, [r0, #1]
    1488:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    148c:	2101      	movs	r1, #1
    148e:	4b2d      	ldr	r3, [pc, #180]	; (1544 <_usb_d_cb_trans_done+0x148>)
    1490:	4798      	blx	r3
    1492:	e7d1      	b.n	1438 <_usb_d_cb_trans_done+0x3c>
    1494:	7858      	ldrb	r0, [r3, #1]
    1496:	e7f9      	b.n	148c <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1498:	4829      	ldr	r0, [pc, #164]	; (1540 <_usb_d_cb_trans_done+0x144>)
    149a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    149e:	2304      	movs	r3, #4
    14a0:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    14a2:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    14a4:	2200      	movs	r2, #0
    14a6:	9201      	str	r2, [sp, #4]
    14a8:	9202      	str	r2, [sp, #8]
    14aa:	4295      	cmp	r5, r2
    14ac:	bfac      	ite	ge
    14ae:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    14b2:	f003 030f 	andlt.w	r3, r3, #15
    14b6:	f88d 300c 	strb.w	r3, [sp, #12]
    14ba:	2301      	movs	r3, #1
    14bc:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    14c0:	a801      	add	r0, sp, #4
    14c2:	4b21      	ldr	r3, [pc, #132]	; (1548 <_usb_d_cb_trans_done+0x14c>)
    14c4:	4798      	blx	r3
    14c6:	e7b7      	b.n	1438 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    14c8:	2d01      	cmp	r5, #1
    14ca:	d00a      	beq.n	14e2 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    14cc:	2d02      	cmp	r5, #2
    14ce:	d01c      	beq.n	150a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    14d0:	2d03      	cmp	r5, #3
    14d2:	d02a      	beq.n	152a <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    14d4:	4b1a      	ldr	r3, [pc, #104]	; (1540 <_usb_d_cb_trans_done+0x144>)
    14d6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    14da:	2206      	movs	r2, #6
    14dc:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    14de:	70da      	strb	r2, [r3, #3]
    14e0:	e7a2      	b.n	1428 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    14e2:	4a17      	ldr	r2, [pc, #92]	; (1540 <_usb_d_cb_trans_done+0x144>)
    14e4:	0143      	lsls	r3, r0, #5
    14e6:	18d1      	adds	r1, r2, r3
    14e8:	2002      	movs	r0, #2
    14ea:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    14ec:	5cd3      	ldrb	r3, [r2, r3]
    14ee:	b12b      	cbz	r3, 14fc <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    14f0:	4b13      	ldr	r3, [pc, #76]	; (1540 <_usb_d_cb_trans_done+0x144>)
    14f2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    14f6:	2205      	movs	r2, #5
    14f8:	709a      	strb	r2, [r3, #2]
    14fa:	e795      	b.n	1428 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    14fc:	460b      	mov	r3, r1
    14fe:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1500:	2100      	movs	r1, #0
    1502:	4630      	mov	r0, r6
    1504:	4b0f      	ldr	r3, [pc, #60]	; (1544 <_usb_d_cb_trans_done+0x148>)
    1506:	4798      	blx	r3
    1508:	e78e      	b.n	1428 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    150a:	4a0d      	ldr	r2, [pc, #52]	; (1540 <_usb_d_cb_trans_done+0x144>)
    150c:	0143      	lsls	r3, r0, #5
    150e:	18d1      	adds	r1, r2, r3
    1510:	2004      	movs	r0, #4
    1512:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1514:	5cd3      	ldrb	r3, [r2, r3]
    1516:	b12b      	cbz	r3, 1524 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1518:	4b09      	ldr	r3, [pc, #36]	; (1540 <_usb_d_cb_trans_done+0x144>)
    151a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    151e:	2201      	movs	r2, #1
    1520:	709a      	strb	r2, [r3, #2]
    1522:	e781      	b.n	1428 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1524:	2302      	movs	r3, #2
    1526:	708b      	strb	r3, [r1, #2]
			return;
    1528:	e786      	b.n	1438 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    152a:	4b05      	ldr	r3, [pc, #20]	; (1540 <_usb_d_cb_trans_done+0x144>)
    152c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1530:	2200      	movs	r2, #0
    1532:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1534:	2205      	movs	r2, #5
    1536:	70da      	strb	r2, [r3, #3]
    1538:	e776      	b.n	1428 <_usb_d_cb_trans_done+0x2c>
    153a:	bf00      	nop
    153c:	00001381 	.word	0x00001381
    1540:	200004bc 	.word	0x200004bc
    1544:	000033f1 	.word	0x000033f1
    1548:	00003599 	.word	0x00003599

0000154c <usb_d_cb_trans_setup>:
{
    154c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1550:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1552:	4b1c      	ldr	r3, [pc, #112]	; (15c4 <usb_d_cb_trans_setup+0x78>)
    1554:	4798      	blx	r3
    1556:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    1558:	4c1b      	ldr	r4, [pc, #108]	; (15c8 <usb_d_cb_trans_setup+0x7c>)
    155a:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    155e:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1560:	4621      	mov	r1, r4
    1562:	4628      	mov	r0, r5
    1564:	4b19      	ldr	r3, [pc, #100]	; (15cc <usb_d_cb_trans_setup+0x80>)
    1566:	4798      	blx	r3
	if (n != 8) {
    1568:	b2c0      	uxtb	r0, r0
    156a:	2808      	cmp	r0, #8
    156c:	d009      	beq.n	1582 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    156e:	2101      	movs	r1, #1
    1570:	4628      	mov	r0, r5
    1572:	4c17      	ldr	r4, [pc, #92]	; (15d0 <usb_d_cb_trans_setup+0x84>)
    1574:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1576:	2101      	movs	r1, #1
    1578:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    157c:	47a0      	blx	r4
		return;
    157e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1582:	2100      	movs	r1, #0
    1584:	4628      	mov	r0, r5
    1586:	4f12      	ldr	r7, [pc, #72]	; (15d0 <usb_d_cb_trans_setup+0x84>)
    1588:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    158a:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    158e:	2100      	movs	r1, #0
    1590:	4640      	mov	r0, r8
    1592:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1594:	4b0c      	ldr	r3, [pc, #48]	; (15c8 <usb_d_cb_trans_setup+0x7c>)
    1596:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    159a:	2201      	movs	r2, #1
    159c:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    159e:	695b      	ldr	r3, [r3, #20]
    15a0:	4621      	mov	r1, r4
    15a2:	4628      	mov	r0, r5
    15a4:	4798      	blx	r3
    15a6:	b108      	cbz	r0, 15ac <usb_d_cb_trans_setup+0x60>
    15a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    15ac:	4b06      	ldr	r3, [pc, #24]	; (15c8 <usb_d_cb_trans_setup+0x7c>)
    15ae:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    15b2:	2305      	movs	r3, #5
    15b4:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    15b6:	2101      	movs	r1, #1
    15b8:	4628      	mov	r0, r5
    15ba:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    15bc:	2101      	movs	r1, #1
    15be:	4640      	mov	r0, r8
    15c0:	47b8      	blx	r7
    15c2:	e7f1      	b.n	15a8 <usb_d_cb_trans_setup+0x5c>
    15c4:	00001381 	.word	0x00001381
    15c8:	200004bc 	.word	0x200004bc
    15cc:	00003539 	.word	0x00003539
    15d0:	000033f1 	.word	0x000033f1

000015d4 <usb_d_init>:

int32_t usb_d_init(void)
{
    15d4:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    15d6:	4b11      	ldr	r3, [pc, #68]	; (161c <usb_d_init+0x48>)
    15d8:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    15da:	2800      	cmp	r0, #0
    15dc:	db1c      	blt.n	1618 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    15de:	4c10      	ldr	r4, [pc, #64]	; (1620 <usb_d_init+0x4c>)
    15e0:	2280      	movs	r2, #128	; 0x80
    15e2:	2100      	movs	r1, #0
    15e4:	4620      	mov	r0, r4
    15e6:	4b0f      	ldr	r3, [pc, #60]	; (1624 <usb_d_init+0x50>)
    15e8:	4798      	blx	r3
    15ea:	4623      	mov	r3, r4
    15ec:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    15f0:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    15f2:	4a0d      	ldr	r2, [pc, #52]	; (1628 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    15f4:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    15f6:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    15f8:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    15fa:	61da      	str	r2, [r3, #28]
    15fc:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    15fe:	4283      	cmp	r3, r0
    1600:	d1f8      	bne.n	15f4 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1602:	490a      	ldr	r1, [pc, #40]	; (162c <usb_d_init+0x58>)
    1604:	2000      	movs	r0, #0
    1606:	4c0a      	ldr	r4, [pc, #40]	; (1630 <usb_d_init+0x5c>)
    1608:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    160a:	490a      	ldr	r1, [pc, #40]	; (1634 <usb_d_init+0x60>)
    160c:	2001      	movs	r0, #1
    160e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1610:	4909      	ldr	r1, [pc, #36]	; (1638 <usb_d_init+0x64>)
    1612:	2002      	movs	r0, #2
    1614:	47a0      	blx	r4
	return ERR_NONE;
    1616:	2000      	movs	r0, #0
}
    1618:	bd10      	pop	{r4, pc}
    161a:	bf00      	nop
    161c:	00002de5 	.word	0x00002de5
    1620:	200004bc 	.word	0x200004bc
    1624:	00004591 	.word	0x00004591
    1628:	000013c5 	.word	0x000013c5
    162c:	0000154d 	.word	0x0000154d
    1630:	0000379d 	.word	0x0000379d
    1634:	000013c9 	.word	0x000013c9
    1638:	000013fd 	.word	0x000013fd

0000163c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    163c:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    163e:	4b01      	ldr	r3, [pc, #4]	; (1644 <usb_d_register_callback+0x8>)
    1640:	4798      	blx	r3
    1642:	bd08      	pop	{r3, pc}
    1644:	00003779 	.word	0x00003779

00001648 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    1648:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    164a:	4b01      	ldr	r3, [pc, #4]	; (1650 <usb_d_enable+0x8>)
    164c:	4798      	blx	r3
}
    164e:	bd08      	pop	{r3, pc}
    1650:	00002ee1 	.word	0x00002ee1

00001654 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    1654:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    1656:	4b01      	ldr	r3, [pc, #4]	; (165c <usb_d_attach+0x8>)
    1658:	4798      	blx	r3
    165a:	bd08      	pop	{r3, pc}
    165c:	00002f4d 	.word	0x00002f4d

00001660 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    1660:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    1662:	4b01      	ldr	r3, [pc, #4]	; (1668 <usb_d_set_address+0x8>)
    1664:	4798      	blx	r3
    1666:	bd08      	pop	{r3, pc}
    1668:	00002f5f 	.word	0x00002f5f

0000166c <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    166e:	4606      	mov	r6, r0
    1670:	460c      	mov	r4, r1
    1672:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1674:	4b0f      	ldr	r3, [pc, #60]	; (16b4 <usb_d_ep_init+0x48>)
    1676:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1678:	2800      	cmp	r0, #0
    167a:	da14      	bge.n	16a6 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    167c:	20ff      	movs	r0, #255	; 0xff
    167e:	4b0d      	ldr	r3, [pc, #52]	; (16b4 <usb_d_ep_init+0x48>)
    1680:	4798      	blx	r3
		if (ep_index < 0) {
    1682:	1e05      	subs	r5, r0, #0
    1684:	db12      	blt.n	16ac <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1686:	463a      	mov	r2, r7
    1688:	4621      	mov	r1, r4
    168a:	4630      	mov	r0, r6
    168c:	4b0a      	ldr	r3, [pc, #40]	; (16b8 <usb_d_ep_init+0x4c>)
    168e:	4798      	blx	r3
	if (rc < 0) {
    1690:	2800      	cmp	r0, #0
    1692:	db0d      	blt.n	16b0 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1694:	4b09      	ldr	r3, [pc, #36]	; (16bc <usb_d_ep_init+0x50>)
    1696:	0168      	lsls	r0, r5, #5
    1698:	181a      	adds	r2, r3, r0
    169a:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    169c:	f004 0403 	and.w	r4, r4, #3
    16a0:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    16a2:	2000      	movs	r0, #0
    16a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    16a6:	f06f 0013 	mvn.w	r0, #19
    16aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    16ac:	f06f 0014 	mvn.w	r0, #20
}
    16b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16b2:	bf00      	nop
    16b4:	00001381 	.word	0x00001381
    16b8:	00002f6d 	.word	0x00002f6d
    16bc:	200004bc 	.word	0x200004bc

000016c0 <usb_d_ep0_init>:
{
    16c0:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    16c2:	4602      	mov	r2, r0
    16c4:	2100      	movs	r1, #0
    16c6:	4608      	mov	r0, r1
    16c8:	4b01      	ldr	r3, [pc, #4]	; (16d0 <usb_d_ep0_init+0x10>)
    16ca:	4798      	blx	r3
}
    16cc:	bd08      	pop	{r3, pc}
    16ce:	bf00      	nop
    16d0:	0000166d 	.word	0x0000166d

000016d4 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    16d4:	b538      	push	{r3, r4, r5, lr}
    16d6:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    16d8:	4b06      	ldr	r3, [pc, #24]	; (16f4 <usb_d_ep_deinit+0x20>)
    16da:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    16dc:	1e04      	subs	r4, r0, #0
    16de:	db07      	blt.n	16f0 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    16e0:	4628      	mov	r0, r5
    16e2:	4b05      	ldr	r3, [pc, #20]	; (16f8 <usb_d_ep_deinit+0x24>)
    16e4:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    16e6:	4805      	ldr	r0, [pc, #20]	; (16fc <usb_d_ep_deinit+0x28>)
    16e8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    16ec:	23ff      	movs	r3, #255	; 0xff
    16ee:	7043      	strb	r3, [r0, #1]
    16f0:	bd38      	pop	{r3, r4, r5, pc}
    16f2:	bf00      	nop
    16f4:	00001381 	.word	0x00001381
    16f8:	00003085 	.word	0x00003085
    16fc:	200004bc 	.word	0x200004bc

00001700 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1700:	b538      	push	{r3, r4, r5, lr}
    1702:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1704:	4b0e      	ldr	r3, [pc, #56]	; (1740 <usb_d_ep_enable+0x40>)
    1706:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1708:	1e04      	subs	r4, r0, #0
    170a:	db16      	blt.n	173a <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    170c:	0163      	lsls	r3, r4, #5
    170e:	4a0d      	ldr	r2, [pc, #52]	; (1744 <usb_d_ep_enable+0x44>)
    1710:	5cd3      	ldrb	r3, [r2, r3]
    1712:	2b00      	cmp	r3, #0
    1714:	bf0c      	ite	eq
    1716:	2202      	moveq	r2, #2
    1718:	2201      	movne	r2, #1
    171a:	4b0a      	ldr	r3, [pc, #40]	; (1744 <usb_d_ep_enable+0x44>)
    171c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1720:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1722:	4628      	mov	r0, r5
    1724:	4b08      	ldr	r3, [pc, #32]	; (1748 <usb_d_ep_enable+0x48>)
    1726:	4798      	blx	r3
	if (rc < 0) {
    1728:	2800      	cmp	r0, #0
    172a:	db00      	blt.n	172e <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    172c:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    172e:	4b05      	ldr	r3, [pc, #20]	; (1744 <usb_d_ep_enable+0x44>)
    1730:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    1734:	2300      	movs	r3, #0
    1736:	70a3      	strb	r3, [r4, #2]
    1738:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    173a:	f06f 0011 	mvn.w	r0, #17
    173e:	e7f5      	b.n	172c <usb_d_ep_enable+0x2c>
    1740:	00001381 	.word	0x00001381
    1744:	200004bc 	.word	0x200004bc
    1748:	00003149 	.word	0x00003149

0000174c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    174c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1750:	b086      	sub	sp, #24
    1752:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1754:	7a07      	ldrb	r7, [r0, #8]
    1756:	4638      	mov	r0, r7
    1758:	4b3f      	ldr	r3, [pc, #252]	; (1858 <usb_d_ep_transfer+0x10c>)
    175a:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    175c:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    175e:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1762:	1e06      	subs	r6, r0, #0
    1764:	db72      	blt.n	184c <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    1766:	a804      	add	r0, sp, #16
    1768:	4b3c      	ldr	r3, [pc, #240]	; (185c <usb_d_ep_transfer+0x110>)
    176a:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    176c:	4b3c      	ldr	r3, [pc, #240]	; (1860 <usb_d_ep_transfer+0x114>)
    176e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1772:	789b      	ldrb	r3, [r3, #2]
    1774:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    1778:	f89d 3017 	ldrb.w	r3, [sp, #23]
    177c:	b2db      	uxtb	r3, r3
    177e:	2b01      	cmp	r3, #1
    1780:	d011      	beq.n	17a6 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1782:	a804      	add	r0, sp, #16
    1784:	4b37      	ldr	r3, [pc, #220]	; (1864 <usb_d_ep_transfer+0x118>)
    1786:	4798      	blx	r3
		switch (state) {
    1788:	f89d 3017 	ldrb.w	r3, [sp, #23]
    178c:	b2db      	uxtb	r3, r3
    178e:	2b05      	cmp	r3, #5
    1790:	d05f      	beq.n	1852 <usb_d_ep_transfer+0x106>
    1792:	2b06      	cmp	r3, #6
    1794:	d023      	beq.n	17de <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    1796:	2b00      	cmp	r3, #0
    1798:	bf0c      	ite	eq
    179a:	f06f 0012 	mvneq.w	r0, #18
    179e:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    17a0:	b006      	add	sp, #24
    17a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    17a6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1860 <usb_d_ep_transfer+0x114>
    17aa:	ea4f 1946 	mov.w	r9, r6, lsl #5
    17ae:	eb0a 0309 	add.w	r3, sl, r9
    17b2:	2203      	movs	r2, #3
    17b4:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    17b6:	a804      	add	r0, sp, #16
    17b8:	4b2a      	ldr	r3, [pc, #168]	; (1864 <usb_d_ep_transfer+0x118>)
    17ba:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    17bc:	f81a 3009 	ldrb.w	r3, [sl, r9]
    17c0:	b183      	cbz	r3, 17e4 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    17c2:	7a22      	ldrb	r2, [r4, #8]
    17c4:	3500      	adds	r5, #0
    17c6:	bf18      	it	ne
    17c8:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    17ca:	6823      	ldr	r3, [r4, #0]
    17cc:	9301      	str	r3, [sp, #4]
    17ce:	f8cd 8008 	str.w	r8, [sp, #8]
    17d2:	f017 0f80 	tst.w	r7, #128	; 0x80
    17d6:	d119      	bne.n	180c <usb_d_ep_transfer+0xc0>
    17d8:	f002 030f 	and.w	r3, r2, #15
    17dc:	e018      	b.n	1810 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    17de:	f06f 000f 	mvn.w	r0, #15
    17e2:	e7dd      	b.n	17a0 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    17e4:	4b1e      	ldr	r3, [pc, #120]	; (1860 <usb_d_ep_transfer+0x114>)
    17e6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    17ea:	7cda      	ldrb	r2, [r3, #19]
    17ec:	7c9d      	ldrb	r5, [r3, #18]
    17ee:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    17f2:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    17f4:	b9a5      	cbnz	r5, 1820 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    17f6:	4b1a      	ldr	r3, [pc, #104]	; (1860 <usb_d_ep_transfer+0x114>)
    17f8:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    17fc:	2304      	movs	r3, #4
    17fe:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    1800:	2300      	movs	r3, #0
			zlp                 = true;
    1802:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1804:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1806:	6821      	ldr	r1, [r4, #0]
    1808:	9101      	str	r1, [sp, #4]
    180a:	9302      	str	r3, [sp, #8]
    180c:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    1810:	f88d 300c 	strb.w	r3, [sp, #12]
    1814:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1818:	a801      	add	r0, sp, #4
    181a:	4b13      	ldr	r3, [pc, #76]	; (1868 <usb_d_ep_transfer+0x11c>)
    181c:	4798      	blx	r3
	return rc;
    181e:	e7bf      	b.n	17a0 <usb_d_ep_transfer+0x54>
    1820:	4643      	mov	r3, r8
    1822:	45a8      	cmp	r8, r5
    1824:	bf28      	it	cs
    1826:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1828:	4a0d      	ldr	r2, [pc, #52]	; (1860 <usb_d_ep_transfer+0x114>)
    182a:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    182e:	f996 200c 	ldrsb.w	r2, [r6, #12]
    1832:	2a00      	cmp	r2, #0
    1834:	db05      	blt.n	1842 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1836:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1838:	6821      	ldr	r1, [r4, #0]
    183a:	9101      	str	r1, [sp, #4]
    183c:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    183e:	2500      	movs	r5, #0
    1840:	e7ca      	b.n	17d8 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    1842:	429d      	cmp	r5, r3
    1844:	bf94      	ite	ls
    1846:	2500      	movls	r5, #0
    1848:	2501      	movhi	r5, #1
    184a:	e7db      	b.n	1804 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    184c:	f06f 0011 	mvn.w	r0, #17
    1850:	e7a6      	b.n	17a0 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    1852:	2002      	movs	r0, #2
    1854:	e7a4      	b.n	17a0 <usb_d_ep_transfer+0x54>
    1856:	bf00      	nop
    1858:	00001381 	.word	0x00001381
    185c:	00003941 	.word	0x00003941
    1860:	200004bc 	.word	0x200004bc
    1864:	0000394f 	.word	0x0000394f
    1868:	00003599 	.word	0x00003599

0000186c <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    186c:	b538      	push	{r3, r4, r5, lr}
    186e:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1870:	b141      	cbz	r1, 1884 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1872:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1874:	bf0c      	ite	eq
    1876:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1878:	2102      	movne	r1, #2
    187a:	4b13      	ldr	r3, [pc, #76]	; (18c8 <usb_d_ep_halt+0x5c>)
    187c:	4798      	blx	r3
    187e:	4603      	mov	r3, r0
	}
}
    1880:	4618      	mov	r0, r3
    1882:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1884:	4b11      	ldr	r3, [pc, #68]	; (18cc <usb_d_ep_halt+0x60>)
    1886:	4798      	blx	r3
	if (ep_index < 0) {
    1888:	1e05      	subs	r5, r0, #0
    188a:	db19      	blt.n	18c0 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    188c:	2102      	movs	r1, #2
    188e:	4620      	mov	r0, r4
    1890:	4b0d      	ldr	r3, [pc, #52]	; (18c8 <usb_d_ep_halt+0x5c>)
    1892:	4798      	blx	r3
    1894:	4603      	mov	r3, r0
    1896:	2800      	cmp	r0, #0
    1898:	d0f2      	beq.n	1880 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    189a:	2100      	movs	r1, #0
    189c:	4620      	mov	r0, r4
    189e:	4b0a      	ldr	r3, [pc, #40]	; (18c8 <usb_d_ep_halt+0x5c>)
    18a0:	4798      	blx	r3
		if (rc < 0) {
    18a2:	1e03      	subs	r3, r0, #0
    18a4:	dbec      	blt.n	1880 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    18a6:	4b0a      	ldr	r3, [pc, #40]	; (18d0 <usb_d_ep_halt+0x64>)
    18a8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    18ac:	2201      	movs	r2, #1
    18ae:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    18b0:	2103      	movs	r1, #3
    18b2:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    18b4:	69db      	ldr	r3, [r3, #28]
    18b6:	2200      	movs	r2, #0
    18b8:	4620      	mov	r0, r4
    18ba:	4798      	blx	r3
	return ERR_NONE;
    18bc:	2300      	movs	r3, #0
    18be:	e7df      	b.n	1880 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    18c0:	f06f 0311 	mvn.w	r3, #17
    18c4:	e7dc      	b.n	1880 <usb_d_ep_halt+0x14>
    18c6:	bf00      	nop
    18c8:	000033f1 	.word	0x000033f1
    18cc:	00001381 	.word	0x00001381
    18d0:	200004bc 	.word	0x200004bc

000018d4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    18d4:	b538      	push	{r3, r4, r5, lr}
    18d6:	460d      	mov	r5, r1
    18d8:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    18da:	4b0e      	ldr	r3, [pc, #56]	; (1914 <usb_d_ep_register_callback+0x40>)
    18dc:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    18de:	4b0e      	ldr	r3, [pc, #56]	; (1918 <usb_d_ep_register_callback+0x44>)
    18e0:	2c00      	cmp	r4, #0
    18e2:	bf08      	it	eq
    18e4:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    18e6:	2800      	cmp	r0, #0
    18e8:	db13      	blt.n	1912 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    18ea:	2d01      	cmp	r5, #1
    18ec:	d008      	beq.n	1900 <usb_d_ep_register_callback+0x2c>
    18ee:	b115      	cbz	r5, 18f6 <usb_d_ep_register_callback+0x22>
    18f0:	2d02      	cmp	r5, #2
    18f2:	d00a      	beq.n	190a <usb_d_ep_register_callback+0x36>
    18f4:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    18f6:	4b09      	ldr	r3, [pc, #36]	; (191c <usb_d_ep_register_callback+0x48>)
    18f8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    18fc:	6144      	str	r4, [r0, #20]
		break;
    18fe:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1900:	4b06      	ldr	r3, [pc, #24]	; (191c <usb_d_ep_register_callback+0x48>)
    1902:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1906:	6184      	str	r4, [r0, #24]
		break;
    1908:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    190a:	4b04      	ldr	r3, [pc, #16]	; (191c <usb_d_ep_register_callback+0x48>)
    190c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1910:	61c4      	str	r4, [r0, #28]
    1912:	bd38      	pop	{r3, r4, r5, pc}
    1914:	00001381 	.word	0x00001381
    1918:	000013c5 	.word	0x000013c5
    191c:	200004bc 	.word	0x200004bc

00001920 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1920:	b900      	cbnz	r0, 1924 <assert+0x4>
		__asm("BKPT #0");
    1922:	be00      	bkpt	0x0000
    1924:	4770      	bx	lr

00001926 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1926:	6803      	ldr	r3, [r0, #0]
    1928:	b14b      	cbz	r3, 193e <is_list_element+0x18>
		if (it == element) {
    192a:	428b      	cmp	r3, r1
    192c:	d009      	beq.n	1942 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    192e:	681b      	ldr	r3, [r3, #0]
    1930:	b11b      	cbz	r3, 193a <is_list_element+0x14>
		if (it == element) {
    1932:	4299      	cmp	r1, r3
    1934:	d1fb      	bne.n	192e <is_list_element+0x8>
			return true;
    1936:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1938:	4770      	bx	lr
	return false;
    193a:	2000      	movs	r0, #0
    193c:	4770      	bx	lr
    193e:	2000      	movs	r0, #0
    1940:	4770      	bx	lr
			return true;
    1942:	2001      	movs	r0, #1
    1944:	4770      	bx	lr
	...

00001948 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1948:	b538      	push	{r3, r4, r5, lr}
    194a:	4604      	mov	r4, r0
    194c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    194e:	4b06      	ldr	r3, [pc, #24]	; (1968 <list_insert_as_head+0x20>)
    1950:	4798      	blx	r3
    1952:	f080 0001 	eor.w	r0, r0, #1
    1956:	2239      	movs	r2, #57	; 0x39
    1958:	4904      	ldr	r1, [pc, #16]	; (196c <list_insert_as_head+0x24>)
    195a:	b2c0      	uxtb	r0, r0
    195c:	4b04      	ldr	r3, [pc, #16]	; (1970 <list_insert_as_head+0x28>)
    195e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1960:	6823      	ldr	r3, [r4, #0]
    1962:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1964:	6025      	str	r5, [r4, #0]
    1966:	bd38      	pop	{r3, r4, r5, pc}
    1968:	00001927 	.word	0x00001927
    196c:	000047b4 	.word	0x000047b4
    1970:	00001921 	.word	0x00001921

00001974 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1974:	6803      	ldr	r3, [r0, #0]
    1976:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1978:	6001      	str	r1, [r0, #0]
    197a:	4770      	bx	lr

0000197c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    197c:	b570      	push	{r4, r5, r6, lr}
    197e:	4605      	mov	r5, r0
    1980:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    1982:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1984:	4b0a      	ldr	r3, [pc, #40]	; (19b0 <list_insert_at_end+0x34>)
    1986:	4798      	blx	r3
    1988:	f080 0001 	eor.w	r0, r0, #1
    198c:	224f      	movs	r2, #79	; 0x4f
    198e:	4909      	ldr	r1, [pc, #36]	; (19b4 <list_insert_at_end+0x38>)
    1990:	b2c0      	uxtb	r0, r0
    1992:	4b09      	ldr	r3, [pc, #36]	; (19b8 <list_insert_at_end+0x3c>)
    1994:	4798      	blx	r3

	if (!list->head) {
    1996:	682b      	ldr	r3, [r5, #0]
    1998:	b91b      	cbnz	r3, 19a2 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    199a:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    199c:	6033      	str	r3, [r6, #0]
		return;
    199e:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    19a0:	461c      	mov	r4, r3
	while (it->next) {
    19a2:	6823      	ldr	r3, [r4, #0]
    19a4:	2b00      	cmp	r3, #0
    19a6:	d1fb      	bne.n	19a0 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    19a8:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    19aa:	6033      	str	r3, [r6, #0]
    19ac:	bd70      	pop	{r4, r5, r6, pc}
    19ae:	bf00      	nop
    19b0:	00001927 	.word	0x00001927
    19b4:	000047b4 	.word	0x000047b4
    19b8:	00001921 	.word	0x00001921

000019bc <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    19bc:	6803      	ldr	r3, [r0, #0]
    19be:	b10b      	cbz	r3, 19c4 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    19c0:	681a      	ldr	r2, [r3, #0]
    19c2:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    19c4:	4618      	mov	r0, r3
    19c6:	4770      	bx	lr

000019c8 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    19c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    19ca:	f013 0f01 	tst.w	r3, #1
    19ce:	d11b      	bne.n	1a08 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    19d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    19d2:	f013 0f03 	tst.w	r3, #3
    19d6:	d1fb      	bne.n	19d0 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    19d8:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    19da:	f013 0f02 	tst.w	r3, #2
    19de:	d00d      	beq.n	19fc <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    19e0:	8803      	ldrh	r3, [r0, #0]
    19e2:	f023 0302 	bic.w	r3, r3, #2
    19e6:	041b      	lsls	r3, r3, #16
    19e8:	0c1b      	lsrs	r3, r3, #16
    19ea:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    19ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
    19ee:	f013 0f03 	tst.w	r3, #3
    19f2:	d1fb      	bne.n	19ec <_adc_init+0x24>
    19f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    19f6:	f013 0f02 	tst.w	r3, #2
    19fa:	d1fb      	bne.n	19f4 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    19fc:	2301      	movs	r3, #1
    19fe:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1a00:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1a02:	f013 0f03 	tst.w	r3, #3
    1a06:	d1fb      	bne.n	1a00 <_adc_init+0x38>
    1a08:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1a0a:	f013 0f01 	tst.w	r3, #1
    1a0e:	d1fb      	bne.n	1a08 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1a10:	2316      	movs	r3, #22
    1a12:	4a37      	ldr	r2, [pc, #220]	; (1af0 <_adc_init+0x128>)
    1a14:	fb03 2301 	mla	r3, r3, r1, r2
    1a18:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1a1a:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1a1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1a22:	2b00      	cmp	r3, #0
    1a24:	d1fa      	bne.n	1a1c <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1a26:	2316      	movs	r3, #22
    1a28:	4a31      	ldr	r2, [pc, #196]	; (1af0 <_adc_init+0x128>)
    1a2a:	fb03 2301 	mla	r3, r3, r1, r2
    1a2e:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1a30:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1a32:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1a38:	2b00      	cmp	r3, #0
    1a3a:	d1fa      	bne.n	1a32 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1a3c:	2316      	movs	r3, #22
    1a3e:	4a2c      	ldr	r2, [pc, #176]	; (1af0 <_adc_init+0x128>)
    1a40:	fb03 2301 	mla	r3, r3, r1, r2
    1a44:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1a46:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1a48:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    1a4a:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1a4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1a52:	2b00      	cmp	r3, #0
    1a54:	d1fa      	bne.n	1a4c <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1a56:	2316      	movs	r3, #22
    1a58:	4a25      	ldr	r2, [pc, #148]	; (1af0 <_adc_init+0x128>)
    1a5a:	fb03 2301 	mla	r3, r3, r1, r2
    1a5e:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1a60:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1a62:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1a68:	2b00      	cmp	r3, #0
    1a6a:	d1fa      	bne.n	1a62 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1a6c:	2316      	movs	r3, #22
    1a6e:	4a20      	ldr	r2, [pc, #128]	; (1af0 <_adc_init+0x128>)
    1a70:	fb03 2301 	mla	r3, r3, r1, r2
    1a74:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    1a76:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1a78:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1a7e:	2b00      	cmp	r3, #0
    1a80:	d1fa      	bne.n	1a78 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1a82:	2316      	movs	r3, #22
    1a84:	4a1a      	ldr	r2, [pc, #104]	; (1af0 <_adc_init+0x128>)
    1a86:	fb03 2301 	mla	r3, r3, r1, r2
    1a8a:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    1a8c:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1a8e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1a90:	f013 0f80 	tst.w	r3, #128	; 0x80
    1a94:	d1fb      	bne.n	1a8e <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1a96:	2316      	movs	r3, #22
    1a98:	4a15      	ldr	r2, [pc, #84]	; (1af0 <_adc_init+0x128>)
    1a9a:	fb03 2301 	mla	r3, r3, r1, r2
    1a9e:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1aa0:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1aa2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1aa4:	f413 7f80 	tst.w	r3, #256	; 0x100
    1aa8:	d1fb      	bne.n	1aa2 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1aaa:	2316      	movs	r3, #22
    1aac:	4a10      	ldr	r2, [pc, #64]	; (1af0 <_adc_init+0x128>)
    1aae:	fb03 2301 	mla	r3, r3, r1, r2
    1ab2:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1ab4:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1ab6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1ab8:	f413 7f00 	tst.w	r3, #512	; 0x200
    1abc:	d1fb      	bne.n	1ab6 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1abe:	2316      	movs	r3, #22
    1ac0:	4a0b      	ldr	r2, [pc, #44]	; (1af0 <_adc_init+0x128>)
    1ac2:	fb03 2301 	mla	r3, r3, r1, r2
    1ac6:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1ac8:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1aca:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1acc:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1ad0:	d1fb      	bne.n	1aca <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1ad2:	2216      	movs	r2, #22
    1ad4:	4b06      	ldr	r3, [pc, #24]	; (1af0 <_adc_init+0x128>)
    1ad6:	fb02 3101 	mla	r1, r2, r1, r3
    1ada:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1adc:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1ade:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1ae0:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1ae2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1ae4:	f013 0f03 	tst.w	r3, #3
    1ae8:	d1fb      	bne.n	1ae2 <_adc_init+0x11a>

	return ERR_NONE;
}
    1aea:	2000      	movs	r0, #0
    1aec:	4770      	bx	lr
    1aee:	bf00      	nop
    1af0:	000047d4 	.word	0x000047d4

00001af4 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1af4:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1af8:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
		if (_adcs[i].number == n) {
    1afc:	f3c0 2087 	ubfx	r0, r0, #10, #8
    1b00:	b138      	cbz	r0, 1b12 <_adc_get_regs+0x1e>
{
    1b02:	b508      	push	{r3, lr}
	ASSERT(false);
    1b04:	2288      	movs	r2, #136	; 0x88
    1b06:	4904      	ldr	r1, [pc, #16]	; (1b18 <_adc_get_regs+0x24>)
    1b08:	2000      	movs	r0, #0
    1b0a:	4b04      	ldr	r3, [pc, #16]	; (1b1c <_adc_get_regs+0x28>)
    1b0c:	4798      	blx	r3
}
    1b0e:	2000      	movs	r0, #0
    1b10:	bd08      	pop	{r3, pc}
    1b12:	2000      	movs	r0, #0
    1b14:	4770      	bx	lr
    1b16:	bf00      	nop
    1b18:	000047ec 	.word	0x000047ec
    1b1c:	00001921 	.word	0x00001921

00001b20 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1b20:	b538      	push	{r3, r4, r5, lr}
    1b22:	460c      	mov	r4, r1
	ASSERT(device);
    1b24:	4605      	mov	r5, r0
    1b26:	22ce      	movs	r2, #206	; 0xce
    1b28:	4907      	ldr	r1, [pc, #28]	; (1b48 <_adc_sync_init+0x28>)
    1b2a:	3000      	adds	r0, #0
    1b2c:	bf18      	it	ne
    1b2e:	2001      	movne	r0, #1
    1b30:	4b06      	ldr	r3, [pc, #24]	; (1b4c <_adc_sync_init+0x2c>)
    1b32:	4798      	blx	r3

	device->hw = hw;
    1b34:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1b36:	4620      	mov	r0, r4
    1b38:	4b05      	ldr	r3, [pc, #20]	; (1b50 <_adc_sync_init+0x30>)
    1b3a:	4798      	blx	r3
    1b3c:	4601      	mov	r1, r0
    1b3e:	4620      	mov	r0, r4
    1b40:	4b04      	ldr	r3, [pc, #16]	; (1b54 <_adc_sync_init+0x34>)
    1b42:	4798      	blx	r3
}
    1b44:	bd38      	pop	{r3, r4, r5, pc}
    1b46:	bf00      	nop
    1b48:	000047ec 	.word	0x000047ec
    1b4c:	00001921 	.word	0x00001921
    1b50:	00001af5 	.word	0x00001af5
    1b54:	000019c9 	.word	0x000019c9

00001b58 <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    1b58:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    1b5c:	00c0      	lsls	r0, r0, #3
    1b5e:	3801      	subs	r0, #1
    1b60:	4b02      	ldr	r3, [pc, #8]	; (1b6c <_get_cycles_for_us+0x14>)
    1b62:	fba3 3000 	umull	r3, r0, r3, r0
    1b66:	08c0      	lsrs	r0, r0, #3
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1b68:	3001      	adds	r0, #1
    1b6a:	4770      	bx	lr
    1b6c:	cccccccd 	.word	0xcccccccd

00001b70 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1b70:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    1b74:	fb03 f000 	mul.w	r0, r3, r0
    1b78:	4770      	bx	lr
	...

00001b7c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1b7c:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1b7e:	4a11      	ldr	r2, [pc, #68]	; (1bc4 <_init_chip+0x48>)
    1b80:	8813      	ldrh	r3, [r2, #0]
    1b82:	b29b      	uxth	r3, r3
    1b84:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1b86:	4b10      	ldr	r3, [pc, #64]	; (1bc8 <_init_chip+0x4c>)
    1b88:	4798      	blx	r3
	_oscctrl_init_sources();
    1b8a:	4b10      	ldr	r3, [pc, #64]	; (1bcc <_init_chip+0x50>)
    1b8c:	4798      	blx	r3
	_mclk_init();
    1b8e:	4b10      	ldr	r3, [pc, #64]	; (1bd0 <_init_chip+0x54>)
    1b90:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1b92:	4b10      	ldr	r3, [pc, #64]	; (1bd4 <_init_chip+0x58>)
    1b94:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1b96:	f640 70ff 	movw	r0, #4095	; 0xfff
    1b9a:	4b0f      	ldr	r3, [pc, #60]	; (1bd8 <_init_chip+0x5c>)
    1b9c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    1b9e:	4b0f      	ldr	r3, [pc, #60]	; (1bdc <_init_chip+0x60>)
    1ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1ba2:	62da      	str	r2, [r3, #44]	; 0x2c
    1ba4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    1ba8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    1bac:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    1bb0:	f042 02ef 	orr.w	r2, r2, #239	; 0xef
    1bb4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    1bb8:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    1bbc:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    1bc0:	bd08      	pop	{r3, pc}
    1bc2:	bf00      	nop
    1bc4:	41004000 	.word	0x41004000
    1bc8:	00001cc1 	.word	0x00001cc1
    1bcc:	00001ce1 	.word	0x00001ce1
    1bd0:	00001cb5 	.word	0x00001cb5
    1bd4:	00001cfd 	.word	0x00001cfd
    1bd8:	00001c3d 	.word	0x00001c3d
    1bdc:	41008000 	.word	0x41008000

00001be0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1be0:	b430      	push	{r4, r5}
    1be2:	4814      	ldr	r0, [pc, #80]	; (1c34 <_event_system_init+0x54>)
    1be4:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1be8:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1bea:	4c13      	ldr	r4, [pc, #76]	; (1c38 <_event_system_init+0x58>)
    1bec:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    1bee:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bf2:	3248      	adds	r2, #72	; 0x48
    1bf4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1bf8:	42ab      	cmp	r3, r5
    1bfa:	d1f7      	bne.n	1bec <_event_system_init+0xc>
    1bfc:	480d      	ldr	r0, [pc, #52]	; (1c34 <_event_system_init+0x54>)
    1bfe:	f100 0442 	add.w	r4, r0, #66	; 0x42
    1c02:	3080      	adds	r0, #128	; 0x80
    1c04:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1c06:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    1c0a:	00ca      	lsls	r2, r1, #3
    1c0c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1c10:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1c14:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1c16:	f850 3f04 	ldr.w	r3, [r0, #4]!
    1c1a:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1c1c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1c20:	43db      	mvns	r3, r3
    1c22:	b2db      	uxtb	r3, r3
    1c24:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    1c28:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1c2a:	2920      	cmp	r1, #32
    1c2c:	d1eb      	bne.n	1c06 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    1c2e:	2000      	movs	r0, #0
    1c30:	bc30      	pop	{r4, r5}
    1c32:	4770      	bx	lr
    1c34:	00004804 	.word	0x00004804
    1c38:	4100e000 	.word	0x4100e000

00001c3c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1c3c:	f010 0f01 	tst.w	r0, #1
    1c40:	d008      	beq.n	1c54 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1c42:	4a17      	ldr	r2, [pc, #92]	; (1ca0 <_gclk_init_generators_by_fref+0x64>)
    1c44:	4b17      	ldr	r3, [pc, #92]	; (1ca4 <_gclk_init_generators_by_fref+0x68>)
    1c46:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c48:	4619      	mov	r1, r3
    1c4a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1c4e:	684b      	ldr	r3, [r1, #4]
    1c50:	4213      	tst	r3, r2
    1c52:	d1fc      	bne.n	1c4e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1c54:	f010 0f02 	tst.w	r0, #2
    1c58:	d008      	beq.n	1c6c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1c5a:	4a13      	ldr	r2, [pc, #76]	; (1ca8 <_gclk_init_generators_by_fref+0x6c>)
    1c5c:	4b11      	ldr	r3, [pc, #68]	; (1ca4 <_gclk_init_generators_by_fref+0x68>)
    1c5e:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c60:	4619      	mov	r1, r3
    1c62:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1c66:	684b      	ldr	r3, [r1, #4]
    1c68:	4213      	tst	r3, r2
    1c6a:	d1fc      	bne.n	1c66 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1c6c:	f010 0f08 	tst.w	r0, #8
    1c70:	d008      	beq.n	1c84 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1c72:	4a0e      	ldr	r2, [pc, #56]	; (1cac <_gclk_init_generators_by_fref+0x70>)
    1c74:	4b0b      	ldr	r3, [pc, #44]	; (1ca4 <_gclk_init_generators_by_fref+0x68>)
    1c76:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c78:	4619      	mov	r1, r3
    1c7a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1c7e:	684b      	ldr	r3, [r1, #4]
    1c80:	4213      	tst	r3, r2
    1c82:	d1fc      	bne.n	1c7e <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    1c84:	f010 0f10 	tst.w	r0, #16
    1c88:	d008      	beq.n	1c9c <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1c8a:	4a09      	ldr	r2, [pc, #36]	; (1cb0 <_gclk_init_generators_by_fref+0x74>)
    1c8c:	4b05      	ldr	r3, [pc, #20]	; (1ca4 <_gclk_init_generators_by_fref+0x68>)
    1c8e:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c90:	4619      	mov	r1, r3
    1c92:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1c96:	684b      	ldr	r3, [r1, #4]
    1c98:	4213      	tst	r3, r2
    1c9a:	d1fc      	bne.n	1c96 <_gclk_init_generators_by_fref+0x5a>
    1c9c:	4770      	bx	lr
    1c9e:	bf00      	nop
    1ca0:	00010101 	.word	0x00010101
    1ca4:	40001c00 	.word	0x40001c00
    1ca8:	00040101 	.word	0x00040101
    1cac:	00010105 	.word	0x00010105
    1cb0:	00010106 	.word	0x00010106

00001cb4 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1cb4:	2201      	movs	r2, #1
    1cb6:	4b01      	ldr	r3, [pc, #4]	; (1cbc <_mclk_init+0x8>)
    1cb8:	715a      	strb	r2, [r3, #5]
    1cba:	4770      	bx	lr
    1cbc:	40000800 	.word	0x40000800

00001cc0 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1cc0:	4b06      	ldr	r3, [pc, #24]	; (1cdc <_osc32kctrl_init_sources+0x1c>)
    1cc2:	f242 028e 	movw	r2, #8334	; 0x208e
    1cc6:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1cc8:	2200      	movs	r2, #0
    1cca:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1ccc:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1cce:	69d9      	ldr	r1, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1cd0:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1cd4:	61d9      	str	r1, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1cd6:	741a      	strb	r2, [r3, #16]
    1cd8:	4770      	bx	lr
    1cda:	bf00      	nop
    1cdc:	40001400 	.word	0x40001400

00001ce0 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1ce0:	4a04      	ldr	r2, [pc, #16]	; (1cf4 <_oscctrl_init_sources+0x14>)
    1ce2:	4b05      	ldr	r3, [pc, #20]	; (1cf8 <_oscctrl_init_sources+0x18>)
    1ce4:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1ce6:	461a      	mov	r2, r3
    1ce8:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1cea:	f013 0f02 	tst.w	r3, #2
    1cee:	d0fb      	beq.n	1ce8 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1cf0:	4770      	bx	lr
    1cf2:	bf00      	nop
    1cf4:	03002606 	.word	0x03002606
    1cf8:	40001000 	.word	0x40001000

00001cfc <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1cfc:	4a36      	ldr	r2, [pc, #216]	; (1dd8 <_oscctrl_init_referenced_generators+0xdc>)
    1cfe:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1d00:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1d04:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1d08:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1d0a:	4611      	mov	r1, r2
    1d0c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1d10:	684b      	ldr	r3, [r1, #4]
    1d12:	4213      	tst	r3, r2
    1d14:	d1fc      	bne.n	1d10 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1d16:	4a30      	ldr	r2, [pc, #192]	; (1dd8 <_oscctrl_init_referenced_generators+0xdc>)
    1d18:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1d1a:	f013 0f04 	tst.w	r3, #4
    1d1e:	d1fb      	bne.n	1d18 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1d20:	4b2e      	ldr	r3, [pc, #184]	; (1ddc <_oscctrl_init_referenced_generators+0xe0>)
    1d22:	2200      	movs	r2, #0
    1d24:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1d26:	4a2e      	ldr	r2, [pc, #184]	; (1de0 <_oscctrl_init_referenced_generators+0xe4>)
    1d28:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1d2a:	461a      	mov	r2, r3
    1d2c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1d30:	f013 0f10 	tst.w	r3, #16
    1d34:	d1fa      	bne.n	1d2c <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1d36:	2200      	movs	r2, #0
    1d38:	4b28      	ldr	r3, [pc, #160]	; (1ddc <_oscctrl_init_referenced_generators+0xe0>)
    1d3a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1d3e:	461a      	mov	r2, r3
    1d40:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1d44:	f013 0f04 	tst.w	r3, #4
    1d48:	d1fa      	bne.n	1d40 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1d4a:	2202      	movs	r2, #2
    1d4c:	4b23      	ldr	r3, [pc, #140]	; (1ddc <_oscctrl_init_referenced_generators+0xe0>)
    1d4e:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1d50:	461a      	mov	r2, r3
    1d52:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1d56:	f013 0f02 	tst.w	r3, #2
    1d5a:	d1fa      	bne.n	1d52 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1d5c:	4b1f      	ldr	r3, [pc, #124]	; (1ddc <_oscctrl_init_referenced_generators+0xe0>)
    1d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1d60:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1d62:	461a      	mov	r2, r3
    1d64:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1d68:	f013 0f08 	tst.w	r3, #8
    1d6c:	d1fa      	bne.n	1d64 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1d6e:	2219      	movs	r2, #25
    1d70:	4b1a      	ldr	r3, [pc, #104]	; (1ddc <_oscctrl_init_referenced_generators+0xe0>)
    1d72:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1d76:	461a      	mov	r2, r3
    1d78:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1d7c:	f013 0f04 	tst.w	r3, #4
    1d80:	d1fa      	bne.n	1d78 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1d82:	4b16      	ldr	r3, [pc, #88]	; (1ddc <_oscctrl_init_referenced_generators+0xe0>)
    1d84:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1d88:	f013 0f01 	tst.w	r3, #1
    1d8c:	d01d      	beq.n	1dca <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1d8e:	4a13      	ldr	r2, [pc, #76]	; (1ddc <_oscctrl_init_referenced_generators+0xe0>)
    1d90:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1d92:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1d96:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1d9a:	d1f9      	bne.n	1d90 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1d9c:	4a0e      	ldr	r2, [pc, #56]	; (1dd8 <_oscctrl_init_referenced_generators+0xdc>)
    1d9e:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1da0:	2b00      	cmp	r3, #0
    1da2:	d1fc      	bne.n	1d9e <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1da4:	4a0c      	ldr	r2, [pc, #48]	; (1dd8 <_oscctrl_init_referenced_generators+0xdc>)
    1da6:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1da8:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1dac:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1db0:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1db2:	4611      	mov	r1, r2
    1db4:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1db8:	684b      	ldr	r3, [r1, #4]
    1dba:	4213      	tst	r3, r2
    1dbc:	d1fc      	bne.n	1db8 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1dbe:	4a06      	ldr	r2, [pc, #24]	; (1dd8 <_oscctrl_init_referenced_generators+0xdc>)
    1dc0:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1dc2:	f013 0f04 	tst.w	r3, #4
    1dc6:	d1fb      	bne.n	1dc0 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    1dc8:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1dca:	4a04      	ldr	r2, [pc, #16]	; (1ddc <_oscctrl_init_referenced_generators+0xe0>)
    1dcc:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1dce:	f413 7f80 	tst.w	r3, #256	; 0x100
    1dd2:	d0fb      	beq.n	1dcc <_oscctrl_init_referenced_generators+0xd0>
    1dd4:	e7e2      	b.n	1d9c <_oscctrl_init_referenced_generators+0xa0>
    1dd6:	bf00      	nop
    1dd8:	40001c00 	.word	0x40001c00
    1ddc:	40001000 	.word	0x40001000
    1de0:	0401bb80 	.word	0x0401bb80

00001de4 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    1de4:	b538      	push	{r3, r4, r5, lr}
    1de6:	460c      	mov	r4, r1
	ASSERT(dev);
    1de8:	4605      	mov	r5, r0
    1dea:	2230      	movs	r2, #48	; 0x30
    1dec:	4917      	ldr	r1, [pc, #92]	; (1e4c <_timer_init+0x68>)
    1dee:	3000      	adds	r0, #0
    1df0:	bf18      	it	ne
    1df2:	2001      	movne	r0, #1
    1df4:	4b16      	ldr	r3, [pc, #88]	; (1e50 <_timer_init+0x6c>)
    1df6:	4798      	blx	r3

	dev->hw = hw;
    1df8:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1dfa:	2301      	movs	r3, #1
    1dfc:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1dfe:	f248 0203 	movw	r2, #32771	; 0x8003
    1e02:	6923      	ldr	r3, [r4, #16]
    1e04:	4213      	tst	r3, r2
    1e06:	d1fc      	bne.n	1e02 <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    1e08:	68ea      	ldr	r2, [r5, #12]
    1e0a:	6913      	ldr	r3, [r2, #16]
    1e0c:	f013 0f01 	tst.w	r3, #1
    1e10:	d1fb      	bne.n	1e0a <_timer_init+0x26>
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    1e12:	f44f 7380 	mov.w	r3, #256	; 0x100
    1e16:	6053      	str	r3, [r2, #4]
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    1e18:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1e1a:	f248 1380 	movw	r3, #33152	; 0x8180
    1e1e:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1e20:	f248 0103 	movw	r1, #32771	; 0x8003
    1e24:	6913      	ldr	r3, [r2, #16]
    1e26:	420b      	tst	r3, r1
    1e28:	d1fc      	bne.n	1e24 <_timer_init+0x40>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    1e2a:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1e30:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1e32:	6913      	ldr	r3, [r2, #16]
    1e34:	f013 0f60 	tst.w	r3, #96	; 0x60
    1e38:	d1fb      	bne.n	1e32 <_timer_init+0x4e>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    1e3a:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
    1e40:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    1e42:	4b04      	ldr	r3, [pc, #16]	; (1e54 <_timer_init+0x70>)
    1e44:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    1e46:	2000      	movs	r0, #0
    1e48:	bd38      	pop	{r3, r4, r5, pc}
    1e4a:	bf00      	nop
    1e4c:	00004908 	.word	0x00004908
    1e50:	00001921 	.word	0x00001921
    1e54:	2000053c 	.word	0x2000053c

00001e58 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    1e58:	2000      	movs	r0, #0
    1e5a:	4770      	bx	lr

00001e5c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1e5c:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    1e5e:	4b08      	ldr	r3, [pc, #32]	; (1e80 <RTC_Handler+0x24>)
    1e60:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    1e62:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1e64:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    1e66:	f413 7f80 	tst.w	r3, #256	; 0x100
    1e6a:	d007      	beq.n	1e7c <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    1e6c:	6823      	ldr	r3, [r4, #0]
    1e6e:	b10b      	cbz	r3, 1e74 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    1e70:	4620      	mov	r0, r4
    1e72:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1e74:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1e76:	f44f 7280 	mov.w	r2, #256	; 0x100
    1e7a:	819a      	strh	r2, [r3, #12]
    1e7c:	bd10      	pop	{r4, pc}
    1e7e:	bf00      	nop
    1e80:	2000053c 	.word	0x2000053c

00001e84 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1e84:	b470      	push	{r4, r5, r6}
    1e86:	b089      	sub	sp, #36	; 0x24
    1e88:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1e8a:	466c      	mov	r4, sp
    1e8c:	4d0d      	ldr	r5, [pc, #52]	; (1ec4 <_sercom_get_hardware_index+0x40>)
    1e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1e92:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1e96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1e9a:	9b00      	ldr	r3, [sp, #0]
    1e9c:	42b3      	cmp	r3, r6
    1e9e:	d00d      	beq.n	1ebc <_sercom_get_hardware_index+0x38>
    1ea0:	4631      	mov	r1, r6
    1ea2:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1ea4:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1ea6:	f853 2b04 	ldr.w	r2, [r3], #4
    1eaa:	428a      	cmp	r2, r1
    1eac:	d007      	beq.n	1ebe <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1eae:	3001      	adds	r0, #1
    1eb0:	2808      	cmp	r0, #8
    1eb2:	d1f8      	bne.n	1ea6 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1eb4:	2000      	movs	r0, #0
}
    1eb6:	b009      	add	sp, #36	; 0x24
    1eb8:	bc70      	pop	{r4, r5, r6}
    1eba:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1ebc:	2000      	movs	r0, #0
			return i;
    1ebe:	b2c0      	uxtb	r0, r0
    1ec0:	e7f9      	b.n	1eb6 <_sercom_get_hardware_index+0x32>
    1ec2:	bf00      	nop
    1ec4:	00004920 	.word	0x00004920

00001ec8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1ec8:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1eca:	4b03      	ldr	r3, [pc, #12]	; (1ed8 <_sercom_get_irq_num+0x10>)
    1ecc:	4798      	blx	r3
    1ece:	0080      	lsls	r0, r0, #2
    1ed0:	302e      	adds	r0, #46	; 0x2e
}
    1ed2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1ed6:	bd08      	pop	{r3, pc}
    1ed8:	00001e85 	.word	0x00001e85

00001edc <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1edc:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1ede:	f013 0f01 	tst.w	r3, #1
    1ee2:	d109      	bne.n	1ef8 <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1ee4:	6803      	ldr	r3, [r0, #0]
    1ee6:	f043 0302 	orr.w	r3, r3, #2
    1eea:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1eec:	69c3      	ldr	r3, [r0, #28]
    1eee:	f013 0f03 	tst.w	r3, #3
    1ef2:	d1fb      	bne.n	1eec <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1ef4:	2000      	movs	r0, #0
    1ef6:	4770      	bx	lr
		return ERR_BUSY;
    1ef8:	f06f 0003 	mvn.w	r0, #3
}
    1efc:	4770      	bx	lr
	...

00001f00 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    1f00:	b538      	push	{r3, r4, r5, lr}
    1f02:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    1f04:	4b0b      	ldr	r3, [pc, #44]	; (1f34 <_spi_async_enable+0x34>)
    1f06:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    1f08:	4620      	mov	r0, r4
    1f0a:	4b0b      	ldr	r3, [pc, #44]	; (1f38 <_spi_async_enable+0x38>)
    1f0c:	4798      	blx	r3
    1f0e:	1d01      	adds	r1, r0, #4
    1f10:	b2c9      	uxtb	r1, r1
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f12:	2501      	movs	r5, #1
    1f14:	4c09      	ldr	r4, [pc, #36]	; (1f3c <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    1f16:	1c43      	adds	r3, r0, #1
    1f18:	b2db      	uxtb	r3, r3
    1f1a:	0942      	lsrs	r2, r0, #5
    1f1c:	f000 001f 	and.w	r0, r0, #31
    1f20:	fa05 f000 	lsl.w	r0, r5, r0
    1f24:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    1f28:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    1f2a:	4299      	cmp	r1, r3
    1f2c:	d1f3      	bne.n	1f16 <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    1f2e:	2000      	movs	r0, #0
    1f30:	bd38      	pop	{r3, r4, r5, pc}
    1f32:	bf00      	nop
    1f34:	00001edd 	.word	0x00001edd
    1f38:	00001ec9 	.word	0x00001ec9
    1f3c:	e000e100 	.word	0xe000e100

00001f40 <_spi_sync_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1f40:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1f42:	f013 0f01 	tst.w	r3, #1
    1f46:	d109      	bne.n	1f5c <_spi_sync_disable+0x1c>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1f48:	6803      	ldr	r3, [r0, #0]
    1f4a:	f023 0302 	bic.w	r3, r3, #2
    1f4e:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1f50:	69c3      	ldr	r3, [r0, #28]
    1f52:	f013 0f03 	tst.w	r3, #3
    1f56:	d1fb      	bne.n	1f50 <_spi_sync_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1f58:	2000      	movs	r0, #0
    1f5a:	4770      	bx	lr
		return ERR_BUSY;
    1f5c:	f06f 0003 	mvn.w	r0, #3
}
    1f60:	4770      	bx	lr
	...

00001f64 <_spi_async_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_async_disable(void *const hw)
{
    1f64:	b538      	push	{r3, r4, r5, lr}
    1f66:	4604      	mov	r4, r0
	_spi_sync_disable(hw);
    1f68:	4b0e      	ldr	r3, [pc, #56]	; (1fa4 <_spi_async_disable+0x40>)
    1f6a:	4798      	blx	r3
	((Sercom *)hw)->SPI.INTENCLR.reg = mask;
    1f6c:	2387      	movs	r3, #135	; 0x87
    1f6e:	7523      	strb	r3, [r4, #20]
	hri_sercomspi_clear_INTEN_reg(
	    hw, SERCOM_SPI_INTFLAG_ERROR | SERCOM_SPI_INTFLAG_RXC | SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
	uint8_t irq = _sercom_get_irq_num(hw);
    1f70:	4620      	mov	r0, r4
    1f72:	4b0d      	ldr	r3, [pc, #52]	; (1fa8 <_spi_async_disable+0x44>)
    1f74:	4798      	blx	r3
    1f76:	1d01      	adds	r1, r0, #4
    1f78:	b2c9      	uxtb	r1, r1
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f7a:	2501      	movs	r5, #1
    1f7c:	4c0b      	ldr	r4, [pc, #44]	; (1fac <_spi_async_disable+0x48>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq++);
    1f7e:	1c43      	adds	r3, r0, #1
    1f80:	b2db      	uxtb	r3, r3
    1f82:	0942      	lsrs	r2, r0, #5
    1f84:	f000 001f 	and.w	r0, r0, #31
    1f88:	fa05 f000 	lsl.w	r0, r5, r0
    1f8c:	3220      	adds	r2, #32
    1f8e:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1f92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f96:	f3bf 8f6f 	isb	sy
    1f9a:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    1f9c:	4299      	cmp	r1, r3
    1f9e:	d1ee      	bne.n	1f7e <_spi_async_disable+0x1a>
	}

	return ERR_NONE;
}
    1fa0:	2000      	movs	r0, #0
    1fa2:	bd38      	pop	{r3, r4, r5, pc}
    1fa4:	00001f41 	.word	0x00001f41
    1fa8:	00001ec9 	.word	0x00001ec9
    1fac:	e000e100 	.word	0xe000e100

00001fb0 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    1fb0:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    1fb2:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1fb4:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    1fb6:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    1fb8:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    1fba:	f013 0f01 	tst.w	r3, #1
    1fbe:	d109      	bne.n	1fd4 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    1fc0:	f013 0f04 	tst.w	r3, #4
    1fc4:	d109      	bne.n	1fda <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    1fc6:	f013 0f02 	tst.w	r3, #2
    1fca:	d109      	bne.n	1fe0 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    1fcc:	f013 0f80 	tst.w	r3, #128	; 0x80
    1fd0:	d10b      	bne.n	1fea <_spi_handler+0x3a>
    1fd2:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    1fd4:	6883      	ldr	r3, [r0, #8]
    1fd6:	4798      	blx	r3
    1fd8:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    1fda:	68c3      	ldr	r3, [r0, #12]
    1fdc:	4798      	blx	r3
    1fde:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1fe0:	2302      	movs	r3, #2
    1fe2:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    1fe4:	6903      	ldr	r3, [r0, #16]
    1fe6:	4798      	blx	r3
    1fe8:	bd08      	pop	{r3, pc}
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1fea:	2304      	movs	r3, #4
    1fec:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1fee:	2380      	movs	r3, #128	; 0x80
    1ff0:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    1ff2:	6943      	ldr	r3, [r0, #20]
    1ff4:	f06f 0112 	mvn.w	r1, #18
    1ff8:	4798      	blx	r3
	}
}
    1ffa:	e7ea      	b.n	1fd2 <_spi_handler+0x22>

00001ffc <SERCOM0_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_0_Handler(void)
{
    1ffc:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    1ffe:	4b02      	ldr	r3, [pc, #8]	; (2008 <SERCOM0_0_Handler+0xc>)
    2000:	6818      	ldr	r0, [r3, #0]
    2002:	4b02      	ldr	r3, [pc, #8]	; (200c <SERCOM0_0_Handler+0x10>)
    2004:	4798      	blx	r3
    2006:	bd08      	pop	{r3, pc}
    2008:	20000540 	.word	0x20000540
    200c:	00001fb1 	.word	0x00001fb1

00002010 <SERCOM0_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_1_Handler(void)
{
    2010:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    2012:	4b02      	ldr	r3, [pc, #8]	; (201c <SERCOM0_1_Handler+0xc>)
    2014:	6818      	ldr	r0, [r3, #0]
    2016:	4b02      	ldr	r3, [pc, #8]	; (2020 <SERCOM0_1_Handler+0x10>)
    2018:	4798      	blx	r3
    201a:	bd08      	pop	{r3, pc}
    201c:	20000540 	.word	0x20000540
    2020:	00001fb1 	.word	0x00001fb1

00002024 <SERCOM0_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_2_Handler(void)
{
    2024:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    2026:	4b02      	ldr	r3, [pc, #8]	; (2030 <SERCOM0_2_Handler+0xc>)
    2028:	6818      	ldr	r0, [r3, #0]
    202a:	4b02      	ldr	r3, [pc, #8]	; (2034 <SERCOM0_2_Handler+0x10>)
    202c:	4798      	blx	r3
    202e:	bd08      	pop	{r3, pc}
    2030:	20000540 	.word	0x20000540
    2034:	00001fb1 	.word	0x00001fb1

00002038 <SERCOM0_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
    2038:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    203a:	4b02      	ldr	r3, [pc, #8]	; (2044 <SERCOM0_3_Handler+0xc>)
    203c:	6818      	ldr	r0, [r3, #0]
    203e:	4b02      	ldr	r3, [pc, #8]	; (2048 <SERCOM0_3_Handler+0x10>)
    2040:	4798      	blx	r3
    2042:	bd08      	pop	{r3, pc}
    2044:	20000540 	.word	0x20000540
    2048:	00001fb1 	.word	0x00001fb1

0000204c <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    204c:	b570      	push	{r4, r5, r6, lr}
    204e:	4606      	mov	r6, r0
    2050:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    2052:	4608      	mov	r0, r1
    2054:	4b5d      	ldr	r3, [pc, #372]	; (21cc <_spi_m_sync_init+0x180>)
    2056:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    2058:	b168      	cbz	r0, 2076 <_spi_m_sync_init+0x2a>
    205a:	4603      	mov	r3, r0
    205c:	2804      	cmp	r0, #4
    205e:	bf08      	it	eq
    2060:	2301      	moveq	r3, #1
    2062:	d009      	beq.n	2078 <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2064:	2e00      	cmp	r6, #0
    2066:	f000 809f 	beq.w	21a8 <_spi_m_sync_init+0x15c>
    206a:	2c00      	cmp	r4, #0
    206c:	f040 80a5 	bne.w	21ba <_spi_m_sync_init+0x16e>
	return NULL;
    2070:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    2072:	2000      	movs	r0, #0
    2074:	e009      	b.n	208a <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    2076:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    2078:	4d55      	ldr	r5, [pc, #340]	; (21d0 <_spi_m_sync_init+0x184>)
    207a:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    207e:	441d      	add	r5, r3
	ASSERT(dev && hw);
    2080:	2e00      	cmp	r6, #0
    2082:	d0f6      	beq.n	2072 <_spi_m_sync_init+0x26>
    2084:	2001      	movs	r0, #1
    2086:	2c00      	cmp	r4, #0
    2088:	d0f3      	beq.n	2072 <_spi_m_sync_init+0x26>
    208a:	f640 1273 	movw	r2, #2419	; 0x973
    208e:	4951      	ldr	r1, [pc, #324]	; (21d4 <_spi_m_sync_init+0x188>)
    2090:	4b51      	ldr	r3, [pc, #324]	; (21d8 <_spi_m_sync_init+0x18c>)
    2092:	4798      	blx	r3

	if (regs == NULL) {
    2094:	2d00      	cmp	r5, #0
    2096:	f000 8084 	beq.w	21a2 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    209a:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    209c:	f013 0f01 	tst.w	r3, #1
    20a0:	d11d      	bne.n	20de <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    20a2:	682b      	ldr	r3, [r5, #0]
    20a4:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    20a8:	69e3      	ldr	r3, [r4, #28]
    20aa:	f013 0f03 	tst.w	r3, #3
    20ae:	d1fb      	bne.n	20a8 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    20b0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    20b2:	f013 0f02 	tst.w	r3, #2
    20b6:	d00b      	beq.n	20d0 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    20b8:	6823      	ldr	r3, [r4, #0]
    20ba:	f023 0302 	bic.w	r3, r3, #2
    20be:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    20c0:	69e3      	ldr	r3, [r4, #28]
    20c2:	f013 0f03 	tst.w	r3, #3
    20c6:	d1fb      	bne.n	20c0 <_spi_m_sync_init+0x74>
    20c8:	69e3      	ldr	r3, [r4, #28]
    20ca:	f013 0f02 	tst.w	r3, #2
    20ce:	d1fb      	bne.n	20c8 <_spi_m_sync_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    20d0:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    20d4:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    20d6:	69e3      	ldr	r3, [r4, #28]
    20d8:	f013 0f03 	tst.w	r3, #3
    20dc:	d1fb      	bne.n	20d6 <_spi_m_sync_init+0x8a>
    20de:	69e3      	ldr	r3, [r4, #28]
    20e0:	f013 0f01 	tst.w	r3, #1
    20e4:	d1fb      	bne.n	20de <_spi_m_sync_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    20e6:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    20e8:	682b      	ldr	r3, [r5, #0]
    20ea:	f003 031c 	and.w	r3, r3, #28
    20ee:	2b08      	cmp	r3, #8
    20f0:	d02e      	beq.n	2150 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    20f2:	f640 1206 	movw	r2, #2310	; 0x906
    20f6:	4937      	ldr	r1, [pc, #220]	; (21d4 <_spi_m_sync_init+0x188>)
    20f8:	1c20      	adds	r0, r4, #0
    20fa:	bf18      	it	ne
    20fc:	2001      	movne	r0, #1
    20fe:	4b36      	ldr	r3, [pc, #216]	; (21d8 <_spi_m_sync_init+0x18c>)
    2100:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2102:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    2104:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    2108:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    210c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    210e:	69e3      	ldr	r3, [r4, #28]
    2110:	f013 0f03 	tst.w	r3, #3
    2114:	d1fb      	bne.n	210e <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    2116:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    2118:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    211c:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    2120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2124:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2126:	69e3      	ldr	r3, [r4, #28]
    2128:	f013 0f17 	tst.w	r3, #23
    212c:	d1fb      	bne.n	2126 <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    212e:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2130:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2132:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2134:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2138:	686b      	ldr	r3, [r5, #4]
    213a:	f003 0307 	and.w	r3, r3, #7
    213e:	2b00      	cmp	r3, #0
    2140:	bf0c      	ite	eq
    2142:	2301      	moveq	r3, #1
    2144:	2302      	movne	r3, #2
    2146:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    2148:	89eb      	ldrh	r3, [r5, #14]
    214a:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    214c:	2000      	movs	r0, #0
    214e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    2150:	f640 121a 	movw	r2, #2330	; 0x91a
    2154:	491f      	ldr	r1, [pc, #124]	; (21d4 <_spi_m_sync_init+0x188>)
    2156:	1c20      	adds	r0, r4, #0
    2158:	bf18      	it	ne
    215a:	2001      	movne	r0, #1
    215c:	4b1e      	ldr	r3, [pc, #120]	; (21d8 <_spi_m_sync_init+0x18c>)
    215e:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2160:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    2162:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    2166:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    216a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    216c:	69e3      	ldr	r3, [r4, #28]
    216e:	f013 0f03 	tst.w	r3, #3
    2172:	d1fb      	bne.n	216c <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    2174:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    2176:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    217a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    217e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2182:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2186:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2188:	69e3      	ldr	r3, [r4, #28]
    218a:	f013 0f17 	tst.w	r3, #23
    218e:	d1fb      	bne.n	2188 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    2190:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    2192:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2194:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2196:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    219a:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    219c:	2b00      	cmp	r3, #0
    219e:	d1fc      	bne.n	219a <_spi_m_sync_init+0x14e>
    21a0:	e7ca      	b.n	2138 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    21a2:	f06f 000c 	mvn.w	r0, #12
    21a6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    21a8:	f640 1273 	movw	r2, #2419	; 0x973
    21ac:	4909      	ldr	r1, [pc, #36]	; (21d4 <_spi_m_sync_init+0x188>)
    21ae:	2000      	movs	r0, #0
    21b0:	4b09      	ldr	r3, [pc, #36]	; (21d8 <_spi_m_sync_init+0x18c>)
    21b2:	4798      	blx	r3
		return ERR_INVALID_ARG;
    21b4:	f06f 000c 	mvn.w	r0, #12
    21b8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    21ba:	f640 1273 	movw	r2, #2419	; 0x973
    21be:	4905      	ldr	r1, [pc, #20]	; (21d4 <_spi_m_sync_init+0x188>)
    21c0:	2001      	movs	r0, #1
    21c2:	4b05      	ldr	r3, [pc, #20]	; (21d8 <_spi_m_sync_init+0x18c>)
    21c4:	4798      	blx	r3
		return ERR_INVALID_ARG;
    21c6:	f06f 000c 	mvn.w	r0, #12
    21ca:	bd70      	pop	{r4, r5, r6, pc}
    21cc:	00001e85 	.word	0x00001e85
    21d0:	00004958 	.word	0x00004958
    21d4:	0000497c 	.word	0x0000497c
    21d8:	00001921 	.word	0x00001921

000021dc <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    21dc:	b538      	push	{r3, r4, r5, lr}
    21de:	4604      	mov	r4, r0
    21e0:	460d      	mov	r5, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    21e2:	4b15      	ldr	r3, [pc, #84]	; (2238 <_spi_m_async_init+0x5c>)
    21e4:	4798      	blx	r3

	if (rc < 0) {
    21e6:	2800      	cmp	r0, #0
    21e8:	db25      	blt.n	2236 <_spi_m_async_init+0x5a>
	if (hw == SERCOM0) {
    21ea:	4b14      	ldr	r3, [pc, #80]	; (223c <_spi_m_async_init+0x60>)
    21ec:	429d      	cmp	r5, r3
		_sercom0_dev = (struct _spi_async_dev *)dev;
    21ee:	bf04      	itt	eq
    21f0:	4b13      	ldreq	r3, [pc, #76]	; (2240 <_spi_m_async_init+0x64>)
    21f2:	601c      	streq	r4, [r3, #0]
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    21f4:	2300      	movs	r3, #0
    21f6:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    21f8:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    21fa:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    21fc:	4628      	mov	r0, r5
    21fe:	4b11      	ldr	r3, [pc, #68]	; (2244 <_spi_m_async_init+0x68>)
    2200:	4798      	blx	r3
    2202:	1d01      	adds	r1, r0, #4
    2204:	b2c9      	uxtb	r1, r1
    2206:	2401      	movs	r4, #1
    2208:	f000 021f 	and.w	r2, r0, #31
    220c:	fa04 f202 	lsl.w	r2, r4, r2
    2210:	0943      	lsrs	r3, r0, #5
    2212:	009b      	lsls	r3, r3, #2
    2214:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2218:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    221c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2220:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2224:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2228:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq);
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
		irq++;
    222c:	3001      	adds	r0, #1
    222e:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2230:	4281      	cmp	r1, r0
    2232:	d1e9      	bne.n	2208 <_spi_m_async_init+0x2c>
	}

	return ERR_NONE;
    2234:	2000      	movs	r0, #0
}
    2236:	bd38      	pop	{r3, r4, r5, pc}
    2238:	0000204d 	.word	0x0000204d
    223c:	40003000 	.word	0x40003000
    2240:	20000540 	.word	0x20000540
    2244:	00001ec9 	.word	0x00001ec9

00002248 <_spi_m_async_enable>:

	return _spi_sync_enable(dev->prvt);
}

int32_t _spi_m_async_enable(struct _spi_async_dev *dev)
{
    2248:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    224a:	4604      	mov	r4, r0
    224c:	b160      	cbz	r0, 2268 <_spi_m_async_enable+0x20>
    224e:	6800      	ldr	r0, [r0, #0]
    2250:	3000      	adds	r0, #0
    2252:	bf18      	it	ne
    2254:	2001      	movne	r0, #1
    2256:	f44f 621e 	mov.w	r2, #2528	; 0x9e0
    225a:	4904      	ldr	r1, [pc, #16]	; (226c <_spi_m_async_enable+0x24>)
    225c:	4b04      	ldr	r3, [pc, #16]	; (2270 <_spi_m_async_enable+0x28>)
    225e:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
    2260:	6820      	ldr	r0, [r4, #0]
    2262:	4b04      	ldr	r3, [pc, #16]	; (2274 <_spi_m_async_enable+0x2c>)
    2264:	4798      	blx	r3
}
    2266:	bd10      	pop	{r4, pc}
    2268:	2000      	movs	r0, #0
    226a:	e7f4      	b.n	2256 <_spi_m_async_enable+0xe>
    226c:	0000497c 	.word	0x0000497c
    2270:	00001921 	.word	0x00001921
    2274:	00001f01 	.word	0x00001f01

00002278 <_spi_m_async_disable>:

	return _spi_sync_disable(dev->prvt);
}

int32_t _spi_m_async_disable(struct _spi_async_dev *dev)
{
    2278:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    227a:	4604      	mov	r4, r0
    227c:	b160      	cbz	r0, 2298 <_spi_m_async_disable+0x20>
    227e:	6800      	ldr	r0, [r0, #0]
    2280:	3000      	adds	r0, #0
    2282:	bf18      	it	ne
    2284:	2001      	movne	r0, #1
    2286:	f640 12fc 	movw	r2, #2556	; 0x9fc
    228a:	4904      	ldr	r1, [pc, #16]	; (229c <_spi_m_async_disable+0x24>)
    228c:	4b04      	ldr	r3, [pc, #16]	; (22a0 <_spi_m_async_disable+0x28>)
    228e:	4798      	blx	r3

	return _spi_async_disable(dev->prvt);
    2290:	6820      	ldr	r0, [r4, #0]
    2292:	4b04      	ldr	r3, [pc, #16]	; (22a4 <_spi_m_async_disable+0x2c>)
    2294:	4798      	blx	r3
}
    2296:	bd10      	pop	{r4, pc}
    2298:	2000      	movs	r0, #0
    229a:	e7f4      	b.n	2286 <_spi_m_async_disable+0xe>
    229c:	0000497c 	.word	0x0000497c
    22a0:	00001921 	.word	0x00001921
    22a4:	00001f65 	.word	0x00001f65

000022a8 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    22a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    22ac:	4681      	mov	r9, r0
    22ae:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    22b0:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    22b2:	f8d1 8000 	ldr.w	r8, [r1]
    22b6:	684d      	ldr	r5, [r1, #4]
    22b8:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    22ba:	b1a8      	cbz	r0, 22e8 <_spi_m_sync_trans+0x40>
    22bc:	1c20      	adds	r0, r4, #0
    22be:	bf18      	it	ne
    22c0:	2001      	movne	r0, #1
    22c2:	f640 22d7 	movw	r2, #2775	; 0xad7
    22c6:	492e      	ldr	r1, [pc, #184]	; (2380 <_spi_m_sync_trans+0xd8>)
    22c8:	4b2e      	ldr	r3, [pc, #184]	; (2384 <_spi_m_sync_trans+0xdc>)
    22ca:	4798      	blx	r3
    22cc:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    22ce:	f013 0f07 	tst.w	r3, #7
    22d2:	d134      	bne.n	233e <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    22d4:	69e0      	ldr	r0, [r4, #28]
    22d6:	f010 0003 	ands.w	r0, r0, #3
    22da:	d1fb      	bne.n	22d4 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    22dc:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    22de:	f013 0f02 	tst.w	r3, #2
    22e2:	d030      	beq.n	2346 <_spi_m_sync_trans+0x9e>
    22e4:	4602      	mov	r2, r0
    22e6:	e008      	b.n	22fa <_spi_m_sync_trans+0x52>
    22e8:	2000      	movs	r0, #0
    22ea:	e7ea      	b.n	22c2 <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    22ec:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    22ee:	f013 0f80 	tst.w	r3, #128	; 0x80
    22f2:	d112      	bne.n	231a <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    22f4:	68b3      	ldr	r3, [r6, #8]
    22f6:	4283      	cmp	r3, r0
    22f8:	d91e      	bls.n	2338 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    22fa:	7e23      	ldrb	r3, [r4, #24]
    22fc:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    22fe:	f013 0f04 	tst.w	r3, #4
    2302:	d024      	beq.n	234e <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    2304:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    2306:	2d00      	cmp	r5, #0
    2308:	d0f0      	beq.n	22ec <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    230a:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    230c:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    230e:	bf91      	iteee	ls
    2310:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    2312:	0a09      	lsrhi	r1, r1, #8
    2314:	7069      	strbhi	r1, [r5, #1]
    2316:	3502      	addhi	r5, #2
    2318:	e7e8      	b.n	22ec <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    231a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    231e:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2320:	2380      	movs	r3, #128	; 0x80
    2322:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    2324:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    2328:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    232a:	f013 0f03 	tst.w	r3, #3
    232e:	d0fb      	beq.n	2328 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2330:	2303      	movs	r3, #3
    2332:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    2334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2338:	4293      	cmp	r3, r2
    233a:	d8de      	bhi.n	22fa <_spi_m_sync_trans+0x52>
    233c:	e7f4      	b.n	2328 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    233e:	f06f 0003 	mvn.w	r0, #3
    2342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    2346:	f06f 0013 	mvn.w	r0, #19
    234a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    234e:	4290      	cmp	r0, r2
    2350:	d8cd      	bhi.n	22ee <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2352:	f013 0f01 	tst.w	r3, #1
    2356:	d0ca      	beq.n	22ee <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    2358:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    235c:	f1b8 0f00 	cmp.w	r8, #0
    2360:	d00b      	beq.n	237a <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    2362:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    2366:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    2368:	bf91      	iteee	ls
    236a:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    236e:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    2372:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    2376:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    237a:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    237c:	62a1      	str	r1, [r4, #40]	; 0x28
    237e:	e7b6      	b.n	22ee <_spi_m_sync_trans+0x46>
    2380:	0000497c 	.word	0x0000497c
    2384:	00001921 	.word	0x00001921

00002388 <_spi_m_async_enable_tx>:
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    2388:	b538      	push	{r3, r4, r5, lr}
    238a:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    238c:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    238e:	b160      	cbz	r0, 23aa <_spi_m_async_enable_tx+0x22>
    2390:	1c20      	adds	r0, r4, #0
    2392:	bf18      	it	ne
    2394:	2001      	movne	r0, #1
    2396:	f640 3203 	movw	r2, #2819	; 0xb03
    239a:	4906      	ldr	r1, [pc, #24]	; (23b4 <_spi_m_async_enable_tx+0x2c>)
    239c:	4b06      	ldr	r3, [pc, #24]	; (23b8 <_spi_m_async_enable_tx+0x30>)
    239e:	4798      	blx	r3

	if (state) {
    23a0:	b92d      	cbnz	r5, 23ae <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    23a2:	2301      	movs	r3, #1
    23a4:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    23a6:	2000      	movs	r0, #0
    23a8:	bd38      	pop	{r3, r4, r5, pc}
    23aa:	2000      	movs	r0, #0
    23ac:	e7f3      	b.n	2396 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    23ae:	2301      	movs	r3, #1
    23b0:	75a3      	strb	r3, [r4, #22]
    23b2:	e7f8      	b.n	23a6 <_spi_m_async_enable_tx+0x1e>
    23b4:	0000497c 	.word	0x0000497c
    23b8:	00001921 	.word	0x00001921

000023bc <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    23bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23be:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    23c0:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
    23c2:	4e0c      	ldr	r6, [pc, #48]	; (23f4 <_spi_m_async_enable_rx+0x38>)
    23c4:	f640 3217 	movw	r2, #2839	; 0xb17
    23c8:	4631      	mov	r1, r6
    23ca:	3000      	adds	r0, #0
    23cc:	bf18      	it	ne
    23ce:	2001      	movne	r0, #1
    23d0:	4d09      	ldr	r5, [pc, #36]	; (23f8 <_spi_m_async_enable_rx+0x3c>)
    23d2:	47a8      	blx	r5
	ASSERT(hw);
    23d4:	f640 3218 	movw	r2, #2840	; 0xb18
    23d8:	4631      	mov	r1, r6
    23da:	1c20      	adds	r0, r4, #0
    23dc:	bf18      	it	ne
    23de:	2001      	movne	r0, #1
    23e0:	47a8      	blx	r5

	if (state) {
    23e2:	b91f      	cbnz	r7, 23ec <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    23e4:	2304      	movs	r3, #4
    23e6:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    23e8:	2000      	movs	r0, #0
    23ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    23ec:	2304      	movs	r3, #4
    23ee:	75a3      	strb	r3, [r4, #22]
    23f0:	e7fa      	b.n	23e8 <_spi_m_async_enable_rx+0x2c>
    23f2:	bf00      	nop
    23f4:	0000497c 	.word	0x0000497c
    23f8:	00001921 	.word	0x00001921

000023fc <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    23fc:	b538      	push	{r3, r4, r5, lr}
    23fe:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    2400:	4604      	mov	r4, r0
    2402:	b170      	cbz	r0, 2422 <_spi_m_async_enable_tx_complete+0x26>
    2404:	6800      	ldr	r0, [r0, #0]
    2406:	3000      	adds	r0, #0
    2408:	bf18      	it	ne
    240a:	2001      	movne	r0, #1
    240c:	f640 322a 	movw	r2, #2858	; 0xb2a
    2410:	4907      	ldr	r1, [pc, #28]	; (2430 <_spi_m_async_enable_tx_complete+0x34>)
    2412:	4b08      	ldr	r3, [pc, #32]	; (2434 <_spi_m_async_enable_tx_complete+0x38>)
    2414:	4798      	blx	r3

	if (state) {
    2416:	b935      	cbnz	r5, 2426 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    2418:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    241a:	2202      	movs	r2, #2
    241c:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    241e:	2000      	movs	r0, #0
    2420:	bd38      	pop	{r3, r4, r5, pc}
    2422:	2000      	movs	r0, #0
    2424:	e7f2      	b.n	240c <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    2426:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    2428:	2202      	movs	r2, #2
    242a:	759a      	strb	r2, [r3, #22]
    242c:	e7f7      	b.n	241e <_spi_m_async_enable_tx_complete+0x22>
    242e:	bf00      	nop
    2430:	0000497c 	.word	0x0000497c
    2434:	00001921 	.word	0x00001921

00002438 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    2438:	b538      	push	{r3, r4, r5, lr}
    243a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    243c:	4604      	mov	r4, r0
    243e:	b160      	cbz	r0, 245a <_spi_m_async_write_one+0x22>
    2440:	6800      	ldr	r0, [r0, #0]
    2442:	3000      	adds	r0, #0
    2444:	bf18      	it	ne
    2446:	2001      	movne	r0, #1
    2448:	f640 323c 	movw	r2, #2876	; 0xb3c
    244c:	4904      	ldr	r1, [pc, #16]	; (2460 <_spi_m_async_write_one+0x28>)
    244e:	4b05      	ldr	r3, [pc, #20]	; (2464 <_spi_m_async_write_one+0x2c>)
    2450:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    2452:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    2454:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    2456:	2000      	movs	r0, #0
    2458:	bd38      	pop	{r3, r4, r5, pc}
    245a:	2000      	movs	r0, #0
    245c:	e7f4      	b.n	2448 <_spi_m_async_write_one+0x10>
    245e:	bf00      	nop
    2460:	0000497c 	.word	0x0000497c
    2464:	00001921 	.word	0x00001921

00002468 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    2468:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    246a:	4604      	mov	r4, r0
    246c:	b160      	cbz	r0, 2488 <_spi_m_async_read_one+0x20>
    246e:	6800      	ldr	r0, [r0, #0]
    2470:	3000      	adds	r0, #0
    2472:	bf18      	it	ne
    2474:	2001      	movne	r0, #1
    2476:	f640 3257 	movw	r2, #2903	; 0xb57
    247a:	4904      	ldr	r1, [pc, #16]	; (248c <_spi_m_async_read_one+0x24>)
    247c:	4b04      	ldr	r3, [pc, #16]	; (2490 <_spi_m_async_read_one+0x28>)
    247e:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    2480:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    2482:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    2484:	b280      	uxth	r0, r0
    2486:	bd10      	pop	{r4, pc}
    2488:	2000      	movs	r0, #0
    248a:	e7f4      	b.n	2476 <_spi_m_async_read_one+0xe>
    248c:	0000497c 	.word	0x0000497c
    2490:	00001921 	.word	0x00001921

00002494 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    2494:	b570      	push	{r4, r5, r6, lr}
    2496:	460d      	mov	r5, r1
    2498:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    249a:	4604      	mov	r4, r0
    249c:	b168      	cbz	r0, 24ba <_spi_m_async_register_callback+0x26>
    249e:	2903      	cmp	r1, #3
    24a0:	bf8c      	ite	hi
    24a2:	2000      	movhi	r0, #0
    24a4:	2001      	movls	r0, #1
    24a6:	f44f 6237 	mov.w	r2, #2928	; 0xb70
    24aa:	4905      	ldr	r1, [pc, #20]	; (24c0 <_spi_m_async_register_callback+0x2c>)
    24ac:	4b05      	ldr	r3, [pc, #20]	; (24c4 <_spi_m_async_register_callback+0x30>)
    24ae:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    24b0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    24b4:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    24b6:	2000      	movs	r0, #0
    24b8:	bd70      	pop	{r4, r5, r6, pc}
    24ba:	2000      	movs	r0, #0
    24bc:	e7f3      	b.n	24a6 <_spi_m_async_register_callback+0x12>
    24be:	bf00      	nop
    24c0:	0000497c 	.word	0x0000497c
    24c4:	00001921 	.word	0x00001921

000024c8 <_spi_m_async_set_irq_state>:
 * param[in] type The type of interrupt to disable/enable if applicable
 * param[in] state Enable or disable
 */
void _spi_m_async_set_irq_state(struct _spi_async_dev *const device, const enum _spi_async_dev_cb_type type,
                                const bool state)
{
    24c8:	b570      	push	{r4, r5, r6, lr}
    24ca:	460c      	mov	r4, r1
    24cc:	4615      	mov	r5, r2
	ASSERT(device);
    24ce:	4606      	mov	r6, r0
    24d0:	f640 32b1 	movw	r2, #2993	; 0xbb1
    24d4:	4908      	ldr	r1, [pc, #32]	; (24f8 <_spi_m_async_set_irq_state+0x30>)
    24d6:	3000      	adds	r0, #0
    24d8:	bf18      	it	ne
    24da:	2001      	movne	r0, #1
    24dc:	4b07      	ldr	r3, [pc, #28]	; (24fc <_spi_m_async_set_irq_state+0x34>)
    24de:	4798      	blx	r3

	if (SPI_DEV_CB_ERROR == type) {
    24e0:	2c03      	cmp	r4, #3
    24e2:	d000      	beq.n	24e6 <_spi_m_async_set_irq_state+0x1e>
    24e4:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    24e6:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    24e8:	b115      	cbz	r5, 24f0 <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    24ea:	2280      	movs	r2, #128	; 0x80
    24ec:	759a      	strb	r2, [r3, #22]
	}
}
    24ee:	e7f9      	b.n	24e4 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    24f0:	2280      	movs	r2, #128	; 0x80
    24f2:	751a      	strb	r2, [r3, #20]
    24f4:	bd70      	pop	{r4, r5, r6, pc}
    24f6:	bf00      	nop
    24f8:	0000497c 	.word	0x0000497c
    24fc:	00001921 	.word	0x00001921

00002500 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2500:	4b03      	ldr	r3, [pc, #12]	; (2510 <_delay_init+0x10>)
    2502:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2506:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2508:	2205      	movs	r2, #5
    250a:	601a      	str	r2, [r3, #0]
    250c:	4770      	bx	lr
    250e:	bf00      	nop
    2510:	e000e010 	.word	0xe000e010

00002514 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2514:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2516:	b303      	cbz	r3, 255a <_delay_cycles+0x46>
{
    2518:	b430      	push	{r4, r5}
    251a:	1e5d      	subs	r5, r3, #1
    251c:	b2ed      	uxtb	r5, r5
	while (n--) {
    251e:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    2520:	4a12      	ldr	r2, [pc, #72]	; (256c <_delay_cycles+0x58>)
    2522:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    2526:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    2528:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    252a:	6813      	ldr	r3, [r2, #0]
    252c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2530:	d0fb      	beq.n	252a <_delay_cycles+0x16>
	while (n--) {
    2532:	3801      	subs	r0, #1
    2534:	b2c0      	uxtb	r0, r0
    2536:	28ff      	cmp	r0, #255	; 0xff
    2538:	d1f5      	bne.n	2526 <_delay_cycles+0x12>
    253a:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    253e:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2542:	3101      	adds	r1, #1
    2544:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    2546:	4b09      	ldr	r3, [pc, #36]	; (256c <_delay_cycles+0x58>)
    2548:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    254a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    254c:	461a      	mov	r2, r3
    254e:	6813      	ldr	r3, [r2, #0]
    2550:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2554:	d0fb      	beq.n	254e <_delay_cycles+0x3a>
		;
}
    2556:	bc30      	pop	{r4, r5}
    2558:	4770      	bx	lr
	SysTick->LOAD = buf;
    255a:	4b04      	ldr	r3, [pc, #16]	; (256c <_delay_cycles+0x58>)
    255c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    255e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2560:	461a      	mov	r2, r3
    2562:	6813      	ldr	r3, [r2, #0]
    2564:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2568:	d0fb      	beq.n	2562 <_delay_cycles+0x4e>
    256a:	4770      	bx	lr
    256c:	e000e010 	.word	0xe000e010

00002570 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    2570:	2000      	movs	r0, #0
    2572:	4770      	bx	lr

00002574 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    2574:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    2576:	7c83      	ldrb	r3, [r0, #18]
    2578:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    257c:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    257e:	f002 0107 	and.w	r1, r2, #7
    2582:	2901      	cmp	r1, #1
    2584:	d00b      	beq.n	259e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2586:	015a      	lsls	r2, r3, #5
    2588:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    258c:	2110      	movs	r1, #16
    258e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2592:	015b      	lsls	r3, r3, #5
    2594:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2598:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    259c:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    259e:	f012 0f40 	tst.w	r2, #64	; 0x40
    25a2:	d00c      	beq.n	25be <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    25a4:	7cc2      	ldrb	r2, [r0, #19]
    25a6:	f36f 1286 	bfc	r2, #6, #1
    25aa:	74c2      	strb	r2, [r0, #19]
    25ac:	015a      	lsls	r2, r3, #5
    25ae:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    25b2:	2180      	movs	r1, #128	; 0x80
    25b4:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    25b8:	2140      	movs	r1, #64	; 0x40
    25ba:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    25be:	7cc2      	ldrb	r2, [r0, #19]
    25c0:	f36f 02c3 	bfc	r2, #3, #1
    25c4:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    25c6:	4909      	ldr	r1, [pc, #36]	; (25ec <_usb_d_dev_handle_setup+0x78>)
    25c8:	015a      	lsls	r2, r3, #5
    25ca:	188c      	adds	r4, r1, r2
    25cc:	2500      	movs	r5, #0
    25ce:	72a5      	strb	r5, [r4, #10]
    25d0:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    25d2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    25d6:	246f      	movs	r4, #111	; 0x6f
    25d8:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    25dc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    25e0:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    25e4:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    25e6:	7c80      	ldrb	r0, [r0, #18]
    25e8:	4798      	blx	r3
    25ea:	bd38      	pop	{r3, r4, r5, pc}
    25ec:	20000544 	.word	0x20000544

000025f0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    25f0:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    25f2:	2320      	movs	r3, #32
    25f4:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    25f8:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    25fa:	7c83      	ldrb	r3, [r0, #18]
    25fc:	f003 030f 	and.w	r3, r3, #15
    2600:	015b      	lsls	r3, r3, #5
    2602:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2606:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    260a:	4b03      	ldr	r3, [pc, #12]	; (2618 <_usb_d_dev_handle_stall+0x28>)
    260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    260e:	6882      	ldr	r2, [r0, #8]
    2610:	2101      	movs	r1, #1
    2612:	7c80      	ldrb	r0, [r0, #18]
    2614:	4798      	blx	r3
    2616:	bd08      	pop	{r3, pc}
    2618:	20000544 	.word	0x20000544

0000261c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    261c:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    261e:	7c84      	ldrb	r4, [r0, #18]
    2620:	2cff      	cmp	r4, #255	; 0xff
    2622:	d003      	beq.n	262c <_usb_d_dev_trans_done+0x10>
    2624:	7cc3      	ldrb	r3, [r0, #19]
    2626:	f013 0f40 	tst.w	r3, #64	; 0x40
    262a:	d100      	bne.n	262e <_usb_d_dev_trans_done+0x12>
    262c:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    262e:	7cc2      	ldrb	r2, [r0, #19]
    2630:	f36f 1286 	bfc	r2, #6, #1
    2634:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    2636:	4a03      	ldr	r2, [pc, #12]	; (2644 <_usb_d_dev_trans_done+0x28>)
    2638:	6f15      	ldr	r5, [r2, #112]	; 0x70
    263a:	6882      	ldr	r2, [r0, #8]
    263c:	4620      	mov	r0, r4
    263e:	47a8      	blx	r5
    2640:	e7f4      	b.n	262c <_usb_d_dev_trans_done+0x10>
    2642:	bf00      	nop
    2644:	20000544 	.word	0x20000544

00002648 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    2648:	b530      	push	{r4, r5, lr}
    264a:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    264c:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    264e:	2425      	movs	r4, #37	; 0x25
    2650:	f88d 4004 	strb.w	r4, [sp, #4]
    2654:	244a      	movs	r4, #74	; 0x4a
    2656:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    265a:	2bff      	cmp	r3, #255	; 0xff
    265c:	d01e      	beq.n	269c <_usb_d_dev_trans_stop+0x54>
    265e:	7cc4      	ldrb	r4, [r0, #19]
    2660:	f014 0f40 	tst.w	r4, #64	; 0x40
    2664:	d01a      	beq.n	269c <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2666:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    266a:	b1c9      	cbz	r1, 26a0 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    266c:	0163      	lsls	r3, r4, #5
    266e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2672:	2580      	movs	r5, #128	; 0x80
    2674:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    2678:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    267a:	a902      	add	r1, sp, #8
    267c:	440b      	add	r3, r1
    267e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2682:	0163      	lsls	r3, r4, #5
    2684:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2688:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    268c:	0163      	lsls	r3, r4, #5
    268e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2692:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    2696:	4611      	mov	r1, r2
    2698:	4b05      	ldr	r3, [pc, #20]	; (26b0 <_usb_d_dev_trans_stop+0x68>)
    269a:	4798      	blx	r3
}
    269c:	b003      	add	sp, #12
    269e:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    26a0:	0163      	lsls	r3, r4, #5
    26a2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    26a6:	2540      	movs	r5, #64	; 0x40
    26a8:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    26ac:	e7e4      	b.n	2678 <_usb_d_dev_trans_stop+0x30>
    26ae:	bf00      	nop
    26b0:	0000261d 	.word	0x0000261d

000026b4 <_usb_d_dev_handle_trfail>:
{
    26b4:	b530      	push	{r4, r5, lr}
    26b6:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    26b8:	7c83      	ldrb	r3, [r0, #18]
    26ba:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    26be:	2204      	movs	r2, #4
    26c0:	f88d 2004 	strb.w	r2, [sp, #4]
    26c4:	2208      	movs	r2, #8
    26c6:	f88d 2005 	strb.w	r2, [sp, #5]
    26ca:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    26cc:	460c      	mov	r4, r1
    26ce:	b391      	cbz	r1, 2736 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    26d0:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    26d4:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    26d8:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    26dc:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    26e0:	4a32      	ldr	r2, [pc, #200]	; (27ac <_usb_d_dev_handle_trfail+0xf8>)
    26e2:	440a      	add	r2, r1
    26e4:	7a91      	ldrb	r1, [r2, #10]
    26e6:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    26e8:	2d02      	cmp	r5, #2
    26ea:	d02c      	beq.n	2746 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    26ec:	f011 0f02 	tst.w	r1, #2
    26f0:	d045      	beq.n	277e <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    26f2:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    26f4:	7a91      	ldrb	r1, [r2, #10]
    26f6:	f36f 0141 	bfc	r1, #1, #1
    26fa:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    26fc:	aa02      	add	r2, sp, #8
    26fe:	4422      	add	r2, r4
    2700:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2704:	015a      	lsls	r2, r3, #5
    2706:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    270a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    270e:	015b      	lsls	r3, r3, #5
    2710:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2714:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    2718:	f005 0307 	and.w	r3, r5, #7
    271c:	2b01      	cmp	r3, #1
    271e:	d143      	bne.n	27a8 <_usb_d_dev_handle_trfail+0xf4>
    2720:	7cc3      	ldrb	r3, [r0, #19]
    2722:	f013 0f40 	tst.w	r3, #64	; 0x40
    2726:	d03f      	beq.n	27a8 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2728:	09d9      	lsrs	r1, r3, #7
    272a:	428c      	cmp	r4, r1
    272c:	d03c      	beq.n	27a8 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    272e:	2200      	movs	r2, #0
    2730:	4b1f      	ldr	r3, [pc, #124]	; (27b0 <_usb_d_dev_handle_trfail+0xfc>)
    2732:	4798      	blx	r3
    2734:	e038      	b.n	27a8 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2736:	0159      	lsls	r1, r3, #5
    2738:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    273c:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    2740:	f005 0507 	and.w	r5, r5, #7
    2744:	e7ca      	b.n	26dc <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2746:	f011 0f01 	tst.w	r1, #1
    274a:	d0cf      	beq.n	26ec <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    274c:	7a91      	ldrb	r1, [r2, #10]
    274e:	f36f 0100 	bfc	r1, #0, #1
    2752:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2754:	aa02      	add	r2, sp, #8
    2756:	4422      	add	r2, r4
    2758:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    275c:	015a      	lsls	r2, r3, #5
    275e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2762:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2766:	015b      	lsls	r3, r3, #5
    2768:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    276c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    2770:	2204      	movs	r2, #4
    2772:	1c21      	adds	r1, r4, #0
    2774:	bf18      	it	ne
    2776:	2101      	movne	r1, #1
    2778:	4b0d      	ldr	r3, [pc, #52]	; (27b0 <_usb_d_dev_handle_trfail+0xfc>)
    277a:	4798      	blx	r3
    277c:	e014      	b.n	27a8 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    277e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    2782:	4a0a      	ldr	r2, [pc, #40]	; (27ac <_usb_d_dev_handle_trfail+0xf8>)
    2784:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    2788:	2100      	movs	r1, #0
    278a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    278c:	aa02      	add	r2, sp, #8
    278e:	4414      	add	r4, r2
    2790:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2794:	015a      	lsls	r2, r3, #5
    2796:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    279a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    279e:	015b      	lsls	r3, r3, #5
    27a0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    27a4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    27a8:	b003      	add	sp, #12
    27aa:	bd30      	pop	{r4, r5, pc}
    27ac:	20000544 	.word	0x20000544
    27b0:	00002649 	.word	0x00002649

000027b4 <_usb_d_dev_reset_epts>:
{
    27b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27b8:	4d0c      	ldr	r5, [pc, #48]	; (27ec <_usb_d_dev_reset_epts+0x38>)
    27ba:	f105 0474 	add.w	r4, r5, #116	; 0x74
    27be:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    27c2:	f04f 0803 	mov.w	r8, #3
    27c6:	4f0a      	ldr	r7, [pc, #40]	; (27f0 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    27c8:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    27ca:	4641      	mov	r1, r8
    27cc:	4620      	mov	r0, r4
    27ce:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    27d0:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    27d2:	2300      	movs	r3, #0
    27d4:	74e3      	strb	r3, [r4, #19]
    27d6:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    27d8:	42ac      	cmp	r4, r5
    27da:	d1f6      	bne.n	27ca <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    27dc:	2260      	movs	r2, #96	; 0x60
    27de:	4619      	mov	r1, r3
    27e0:	4802      	ldr	r0, [pc, #8]	; (27ec <_usb_d_dev_reset_epts+0x38>)
    27e2:	4b04      	ldr	r3, [pc, #16]	; (27f4 <_usb_d_dev_reset_epts+0x40>)
    27e4:	4798      	blx	r3
    27e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    27ea:	bf00      	nop
    27ec:	20000544 	.word	0x20000544
    27f0:	0000261d 	.word	0x0000261d
    27f4:	00004591 	.word	0x00004591

000027f8 <_usb_d_dev_in_next>:
{
    27f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27fc:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    27fe:	7c84      	ldrb	r4, [r0, #18]
    2800:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2804:	4688      	mov	r8, r1
    2806:	2900      	cmp	r1, #0
    2808:	f000 809f 	beq.w	294a <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    280c:	4b58      	ldr	r3, [pc, #352]	; (2970 <_usb_d_dev_in_next+0x178>)
    280e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2812:	6958      	ldr	r0, [r3, #20]
    2814:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2818:	8a2b      	ldrh	r3, [r5, #16]
    281a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    281e:	4293      	cmp	r3, r2
    2820:	f000 808d 	beq.w	293e <_usb_d_dev_in_next+0x146>
    2824:	3b01      	subs	r3, #1
    2826:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2828:	7cef      	ldrb	r7, [r5, #19]
    282a:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    282e:	f1b8 0f00 	cmp.w	r8, #0
    2832:	d005      	beq.n	2840 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2834:	0162      	lsls	r2, r4, #5
    2836:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    283a:	2302      	movs	r3, #2
    283c:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    2840:	68a9      	ldr	r1, [r5, #8]
    2842:	eb0e 0301 	add.w	r3, lr, r1
    2846:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    2848:	686e      	ldr	r6, [r5, #4]
    284a:	42b3      	cmp	r3, r6
    284c:	d23f      	bcs.n	28ce <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    284e:	1af6      	subs	r6, r6, r3
    2850:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    2852:	7cea      	ldrb	r2, [r5, #19]
    2854:	f012 0f20 	tst.w	r2, #32
    2858:	d02d      	beq.n	28b6 <_usb_d_dev_in_next+0xbe>
    285a:	8a2a      	ldrh	r2, [r5, #16]
    285c:	4296      	cmp	r6, r2
    285e:	bf28      	it	cs
    2860:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    2862:	6829      	ldr	r1, [r5, #0]
    2864:	4632      	mov	r2, r6
    2866:	4419      	add	r1, r3
    2868:	68e8      	ldr	r0, [r5, #12]
    286a:	4b42      	ldr	r3, [pc, #264]	; (2974 <_usb_d_dev_in_next+0x17c>)
    286c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    286e:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    2870:	4b3f      	ldr	r3, [pc, #252]	; (2970 <_usb_d_dev_in_next+0x178>)
    2872:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2876:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2878:	4b3d      	ldr	r3, [pc, #244]	; (2970 <_usb_d_dev_in_next+0x178>)
    287a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    287e:	695a      	ldr	r2, [r3, #20]
    2880:	f366 020d 	bfi	r2, r6, #0, #14
    2884:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2886:	695a      	ldr	r2, [r3, #20]
    2888:	f36f 329b 	bfc	r2, #14, #14
    288c:	615a      	str	r2, [r3, #20]
	if (!isr) {
    288e:	f1b8 0f00 	cmp.w	r8, #0
    2892:	d108      	bne.n	28a6 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    2894:	2f01      	cmp	r7, #1
    2896:	bf0c      	ite	eq
    2898:	224e      	moveq	r2, #78	; 0x4e
    289a:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    289c:	0163      	lsls	r3, r4, #5
    289e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    28a2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    28a6:	0164      	lsls	r4, r4, #5
    28a8:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    28ac:	2380      	movs	r3, #128	; 0x80
    28ae:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    28b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28b6:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    28ba:	bf28      	it	cs
    28bc:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    28c0:	6829      	ldr	r1, [r5, #0]
    28c2:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    28c4:	4a2a      	ldr	r2, [pc, #168]	; (2970 <_usb_d_dev_in_next+0x178>)
    28c6:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    28ca:	6113      	str	r3, [r2, #16]
    28cc:	e7d4      	b.n	2878 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    28ce:	7ceb      	ldrb	r3, [r5, #19]
    28d0:	f013 0f10 	tst.w	r3, #16
    28d4:	d00f      	beq.n	28f6 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    28d6:	7ceb      	ldrb	r3, [r5, #19]
    28d8:	f36f 1304 	bfc	r3, #4, #1
    28dc:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    28de:	4b24      	ldr	r3, [pc, #144]	; (2970 <_usb_d_dev_in_next+0x178>)
    28e0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    28e4:	695a      	ldr	r2, [r3, #20]
    28e6:	f36f 020d 	bfc	r2, #0, #14
    28ea:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    28ec:	695a      	ldr	r2, [r3, #20]
    28ee:	f36f 329b 	bfc	r2, #14, #14
    28f2:	615a      	str	r2, [r3, #20]
    28f4:	e7cb      	b.n	288e <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    28f6:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    28f8:	ea4f 1444 	mov.w	r4, r4, lsl #5
    28fc:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2900:	bf0c      	ite	eq
    2902:	234b      	moveq	r3, #75	; 0x4b
    2904:	234a      	movne	r3, #74	; 0x4a
    2906:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    290a:	8a2a      	ldrh	r2, [r5, #16]
    290c:	ea00 030e 	and.w	r3, r0, lr
    2910:	429a      	cmp	r2, r3
    2912:	d005      	beq.n	2920 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2914:	2100      	movs	r1, #0
    2916:	4628      	mov	r0, r5
    2918:	4b17      	ldr	r3, [pc, #92]	; (2978 <_usb_d_dev_in_next+0x180>)
    291a:	4798      	blx	r3
	return;
    291c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    2920:	7ceb      	ldrb	r3, [r5, #19]
    2922:	f36f 1386 	bfc	r3, #6, #1
    2926:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2928:	4b11      	ldr	r3, [pc, #68]	; (2970 <_usb_d_dev_in_next+0x178>)
    292a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    292c:	68a9      	ldr	r1, [r5, #8]
    292e:	7ca8      	ldrb	r0, [r5, #18]
    2930:	4798      	blx	r3
    2932:	b9d0      	cbnz	r0, 296a <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    2934:	7ceb      	ldrb	r3, [r5, #19]
    2936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    293a:	74eb      	strb	r3, [r5, #19]
    293c:	e7ea      	b.n	2914 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    293e:	7cef      	ldrb	r7, [r5, #19]
    2940:	f007 0707 	and.w	r7, r7, #7
    2944:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2948:	e774      	b.n	2834 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    294a:	8a03      	ldrh	r3, [r0, #16]
    294c:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2950:	4293      	cmp	r3, r2
    2952:	d107      	bne.n	2964 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2954:	7cef      	ldrb	r7, [r5, #19]
    2956:	f007 0707 	and.w	r7, r7, #7
    295a:	f04f 0e00 	mov.w	lr, #0
    295e:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2962:	e76d      	b.n	2840 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2964:	f04f 0e00 	mov.w	lr, #0
    2968:	e75c      	b.n	2824 <_usb_d_dev_in_next+0x2c>
    296a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    296e:	bf00      	nop
    2970:	20000544 	.word	0x20000544
    2974:	0000445d 	.word	0x0000445d
    2978:	0000261d 	.word	0x0000261d

0000297c <_usb_d_dev_out_next>:
{
    297c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2980:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    2982:	7c85      	ldrb	r5, [r0, #18]
    2984:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    2988:	4689      	mov	r9, r1
    298a:	2900      	cmp	r1, #0
    298c:	d056      	beq.n	2a3c <_usb_d_dev_out_next+0xc0>
    298e:	4b74      	ldr	r3, [pc, #464]	; (2b60 <_usb_d_dev_out_next+0x1e4>)
    2990:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2994:	685a      	ldr	r2, [r3, #4]
    2996:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    299a:	685f      	ldr	r7, [r3, #4]
    299c:	f3c7 070d 	ubfx	r7, r7, #0, #14
    29a0:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    29a2:	8a06      	ldrh	r6, [r0, #16]
    29a4:	f240 33ff 	movw	r3, #1023	; 0x3ff
    29a8:	429e      	cmp	r6, r3
    29aa:	f000 80ba 	beq.w	2b22 <_usb_d_dev_out_next+0x1a6>
    29ae:	3e01      	subs	r6, #1
    29b0:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    29b2:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    29b6:	f894 8013 	ldrb.w	r8, [r4, #19]
    29ba:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    29be:	f1b9 0f00 	cmp.w	r9, #0
    29c2:	d005      	beq.n	29d0 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    29c4:	016b      	lsls	r3, r5, #5
    29c6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    29ca:	2201      	movs	r2, #1
    29cc:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    29d0:	7ce3      	ldrb	r3, [r4, #19]
    29d2:	f013 0f20 	tst.w	r3, #32
    29d6:	d00d      	beq.n	29f4 <_usb_d_dev_out_next+0x78>
    29d8:	6862      	ldr	r2, [r4, #4]
    29da:	2a00      	cmp	r2, #0
    29dc:	d037      	beq.n	2a4e <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    29de:	68a0      	ldr	r0, [r4, #8]
    29e0:	1a12      	subs	r2, r2, r0
    29e2:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    29e4:	6823      	ldr	r3, [r4, #0]
    29e6:	42ba      	cmp	r2, r7
    29e8:	bf28      	it	cs
    29ea:	463a      	movcs	r2, r7
    29ec:	68e1      	ldr	r1, [r4, #12]
    29ee:	4418      	add	r0, r3
    29f0:	4b5c      	ldr	r3, [pc, #368]	; (2b64 <_usb_d_dev_out_next+0x1e8>)
    29f2:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    29f4:	6863      	ldr	r3, [r4, #4]
    29f6:	b353      	cbz	r3, 2a4e <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    29f8:	f1b9 0f00 	cmp.w	r9, #0
    29fc:	d040      	beq.n	2a80 <_usb_d_dev_out_next+0x104>
    29fe:	8a22      	ldrh	r2, [r4, #16]
    2a00:	42ba      	cmp	r2, r7
    2a02:	d93d      	bls.n	2a80 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    2a04:	7ce3      	ldrb	r3, [r4, #19]
    2a06:	f36f 1304 	bfc	r3, #4, #1
    2a0a:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2a0c:	68a3      	ldr	r3, [r4, #8]
    2a0e:	445b      	add	r3, fp
    2a10:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    2a12:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2a16:	ea4f 1345 	mov.w	r3, r5, lsl #5
    2a1a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2a1e:	bf0c      	ite	eq
    2a20:	222d      	moveq	r2, #45	; 0x2d
    2a22:	2225      	movne	r2, #37	; 0x25
    2a24:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    2a28:	b915      	cbnz	r5, 2a30 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2a2a:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    2a2c:	4b4c      	ldr	r3, [pc, #304]	; (2b60 <_usb_d_dev_out_next+0x1e4>)
    2a2e:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2a30:	2100      	movs	r1, #0
    2a32:	4620      	mov	r0, r4
    2a34:	4b4c      	ldr	r3, [pc, #304]	; (2b68 <_usb_d_dev_out_next+0x1ec>)
    2a36:	4798      	blx	r3
	return;
    2a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2a3c:	8a06      	ldrh	r6, [r0, #16]
    2a3e:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2a42:	429e      	cmp	r6, r3
    2a44:	d07b      	beq.n	2b3e <_usb_d_dev_out_next+0x1c2>
    2a46:	f04f 0b00 	mov.w	fp, #0
    2a4a:	46da      	mov	sl, fp
    2a4c:	e7af      	b.n	29ae <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2a4e:	7ce3      	ldrb	r3, [r4, #19]
    2a50:	f013 0f10 	tst.w	r3, #16
    2a54:	d06c      	beq.n	2b30 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    2a56:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    2a58:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2a5c:	f043 0320 	orr.w	r3, r3, #32
    2a60:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2a62:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2a64:	493e      	ldr	r1, [pc, #248]	; (2b60 <_usb_d_dev_out_next+0x1e4>)
    2a66:	016a      	lsls	r2, r5, #5
    2a68:	188b      	adds	r3, r1, r2
    2a6a:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2a6c:	8a21      	ldrh	r1, [r4, #16]
    2a6e:	685a      	ldr	r2, [r3, #4]
    2a70:	f361 329b 	bfi	r2, r1, #14, #14
    2a74:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2a76:	685a      	ldr	r2, [r3, #4]
    2a78:	f36f 020d 	bfc	r2, #0, #14
    2a7c:	605a      	str	r2, [r3, #4]
    2a7e:	e01d      	b.n	2abc <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    2a80:	68a2      	ldr	r2, [r4, #8]
    2a82:	4452      	add	r2, sl
    2a84:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    2a86:	4293      	cmp	r3, r2
    2a88:	d9c3      	bls.n	2a12 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    2a8a:	1a9b      	subs	r3, r3, r2
    2a8c:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    2a8e:	7ce1      	ldrb	r1, [r4, #19]
    2a90:	f011 0f20 	tst.w	r1, #32
    2a94:	d026      	beq.n	2ae4 <_usb_d_dev_out_next+0x168>
    2a96:	8a22      	ldrh	r2, [r4, #16]
    2a98:	4293      	cmp	r3, r2
    2a9a:	bf28      	it	cs
    2a9c:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2a9e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2aa0:	016a      	lsls	r2, r5, #5
    2aa2:	492f      	ldr	r1, [pc, #188]	; (2b60 <_usb_d_dev_out_next+0x1e4>)
    2aa4:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2aa6:	4a2e      	ldr	r2, [pc, #184]	; (2b60 <_usb_d_dev_out_next+0x1e4>)
    2aa8:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    2aac:	6851      	ldr	r1, [r2, #4]
    2aae:	f363 319b 	bfi	r1, r3, #14, #14
    2ab2:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2ab4:	6853      	ldr	r3, [r2, #4]
    2ab6:	f36f 030d 	bfc	r3, #0, #14
    2aba:	6053      	str	r3, [r2, #4]
	if (!isr) {
    2abc:	f1b9 0f00 	cmp.w	r9, #0
    2ac0:	d108      	bne.n	2ad4 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    2ac2:	f1b8 0f01 	cmp.w	r8, #1
    2ac6:	d025      	beq.n	2b14 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    2ac8:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2aca:	016b      	lsls	r3, r5, #5
    2acc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2ad0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2ad4:	016d      	lsls	r5, r5, #5
    2ad6:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    2ada:	2340      	movs	r3, #64	; 0x40
    2adc:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    2ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    2ae4:	8a21      	ldrh	r1, [r4, #16]
    2ae6:	428b      	cmp	r3, r1
    2ae8:	d90a      	bls.n	2b00 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    2aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    2aee:	d80e      	bhi.n	2b0e <_usb_d_dev_out_next+0x192>
    2af0:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2af4:	6821      	ldr	r1, [r4, #0]
    2af6:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    2af8:	0169      	lsls	r1, r5, #5
    2afa:	4819      	ldr	r0, [pc, #100]	; (2b60 <_usb_d_dev_out_next+0x1e4>)
    2afc:	5042      	str	r2, [r0, r1]
    2afe:	e7d2      	b.n	2aa6 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    2b00:	428b      	cmp	r3, r1
    2b02:	d2f7      	bcs.n	2af4 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    2b04:	7ce1      	ldrb	r1, [r4, #19]
    2b06:	f041 0120 	orr.w	r1, r1, #32
    2b0a:	74e1      	strb	r1, [r4, #19]
    2b0c:	e7f2      	b.n	2af4 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    2b0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2b12:	e7ef      	b.n	2af4 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    2b14:	4b12      	ldr	r3, [pc, #72]	; (2b60 <_usb_d_dev_out_next+0x1e4>)
    2b16:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2b1a:	2200      	movs	r2, #0
    2b1c:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    2b1e:	222d      	movs	r2, #45	; 0x2d
    2b20:	e7d3      	b.n	2aca <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    2b22:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2b26:	f890 8013 	ldrb.w	r8, [r0, #19]
    2b2a:	f008 0807 	and.w	r8, r8, #7
    2b2e:	e749      	b.n	29c4 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    2b30:	f1b9 0f00 	cmp.w	r9, #0
    2b34:	d10b      	bne.n	2b4e <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    2b36:	68a3      	ldr	r3, [r4, #8]
    2b38:	4453      	add	r3, sl
    2b3a:	60a3      	str	r3, [r4, #8]
    2b3c:	e769      	b.n	2a12 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2b3e:	f890 8013 	ldrb.w	r8, [r0, #19]
    2b42:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    2b46:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2b48:	46bb      	mov	fp, r7
    2b4a:	46ba      	mov	sl, r7
    2b4c:	e740      	b.n	29d0 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    2b4e:	8a23      	ldrh	r3, [r4, #16]
    2b50:	42bb      	cmp	r3, r7
    2b52:	f63f af57 	bhi.w	2a04 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    2b56:	68a3      	ldr	r3, [r4, #8]
    2b58:	4453      	add	r3, sl
    2b5a:	60a3      	str	r3, [r4, #8]
    2b5c:	e759      	b.n	2a12 <_usb_d_dev_out_next+0x96>
    2b5e:	bf00      	nop
    2b60:	20000544 	.word	0x20000544
    2b64:	0000445d 	.word	0x0000445d
    2b68:	0000261d 	.word	0x0000261d

00002b6c <_usb_d_dev_handler>:
{
    2b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    2b70:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2b74:	8c1e      	ldrh	r6, [r3, #32]
    2b76:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2b78:	b146      	cbz	r6, 2b8c <_usb_d_dev_handler+0x20>
    2b7a:	4d91      	ldr	r5, [pc, #580]	; (2dc0 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    2b7c:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2b7e:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    2b82:	f8df 9258 	ldr.w	r9, [pc, #600]	; 2ddc <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    2b86:	f8df 8258 	ldr.w	r8, [pc, #600]	; 2de0 <_usb_d_dev_handler+0x274>
    2b8a:	e0d3      	b.n	2d34 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2b8c:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    2b8e:	8b1b      	ldrh	r3, [r3, #24]
    2b90:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    2b92:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    2b94:	f013 0f04 	tst.w	r3, #4
    2b98:	d11d      	bne.n	2bd6 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    2b9a:	f413 7f00 	tst.w	r3, #512	; 0x200
    2b9e:	d123      	bne.n	2be8 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2ba0:	f013 0f80 	tst.w	r3, #128	; 0x80
    2ba4:	d147      	bne.n	2c36 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    2ba6:	f013 0f70 	tst.w	r3, #112	; 0x70
    2baa:	d14f      	bne.n	2c4c <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    2bac:	f013 0f08 	tst.w	r3, #8
    2bb0:	d16e      	bne.n	2c90 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    2bb2:	f013 0f01 	tst.w	r3, #1
    2bb6:	d0e0      	beq.n	2b7a <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2bb8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2bbc:	f240 2201 	movw	r2, #513	; 0x201
    2bc0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2bc2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2bc4:	2270      	movs	r2, #112	; 0x70
    2bc6:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2bc8:	4b7e      	ldr	r3, [pc, #504]	; (2dc4 <_usb_d_dev_handler+0x258>)
    2bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2bcc:	2100      	movs	r1, #0
    2bce:	2004      	movs	r0, #4
    2bd0:	4798      	blx	r3
    2bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2bd6:	2204      	movs	r2, #4
    2bd8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2bdc:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    2bde:	4b79      	ldr	r3, [pc, #484]	; (2dc4 <_usb_d_dev_handler+0x258>)
    2be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2be2:	4798      	blx	r3
    2be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2be8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2bec:	f240 2201 	movw	r2, #513	; 0x201
    2bf0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2bf2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2bf4:	2270      	movs	r2, #112	; 0x70
    2bf6:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2bf8:	4b72      	ldr	r3, [pc, #456]	; (2dc4 <_usb_d_dev_handler+0x258>)
    2bfa:	891b      	ldrh	r3, [r3, #8]
    2bfc:	f003 030f 	and.w	r3, r3, #15
    2c00:	2b03      	cmp	r3, #3
    2c02:	d00e      	beq.n	2c22 <_usb_d_dev_handler+0xb6>
    2c04:	4b6f      	ldr	r3, [pc, #444]	; (2dc4 <_usb_d_dev_handler+0x258>)
    2c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2c08:	f003 030f 	and.w	r3, r3, #15
    2c0c:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2c0e:	bf08      	it	eq
    2c10:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2c12:	d007      	beq.n	2c24 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    2c14:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2c16:	4b6b      	ldr	r3, [pc, #428]	; (2dc4 <_usb_d_dev_handler+0x258>)
    2c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2c1a:	2003      	movs	r0, #3
    2c1c:	4798      	blx	r3
    2c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2c22:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2c24:	4b67      	ldr	r3, [pc, #412]	; (2dc4 <_usb_d_dev_handler+0x258>)
    2c26:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    2c2a:	8919      	ldrh	r1, [r3, #8]
    2c2c:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    2c30:	2200      	movs	r2, #0
    2c32:	811a      	strh	r2, [r3, #8]
    2c34:	e7ef      	b.n	2c16 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2c36:	2280      	movs	r2, #128	; 0x80
    2c38:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2c3c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    2c3e:	4b61      	ldr	r3, [pc, #388]	; (2dc4 <_usb_d_dev_handler+0x258>)
    2c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2c42:	2100      	movs	r1, #0
    2c44:	2005      	movs	r0, #5
    2c46:	4798      	blx	r3
    2c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2c4c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2c50:	2270      	movs	r2, #112	; 0x70
    2c52:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2c54:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2c56:	f240 2201 	movw	r2, #513	; 0x201
    2c5a:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2c5c:	4b5a      	ldr	r3, [pc, #360]	; (2dc8 <_usb_d_dev_handler+0x25c>)
    2c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    2c62:	f013 0f01 	tst.w	r3, #1
    2c66:	d00d      	beq.n	2c84 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2c68:	4a57      	ldr	r2, [pc, #348]	; (2dc8 <_usb_d_dev_handler+0x25c>)
    2c6a:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2c6c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    2c70:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2c74:	d1f9      	bne.n	2c6a <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    2c76:	4b53      	ldr	r3, [pc, #332]	; (2dc4 <_usb_d_dev_handler+0x258>)
    2c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2c7a:	2100      	movs	r1, #0
    2c7c:	2002      	movs	r0, #2
    2c7e:	4798      	blx	r3
    2c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2c84:	4a50      	ldr	r2, [pc, #320]	; (2dc8 <_usb_d_dev_handler+0x25c>)
    2c86:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    2c88:	f413 7f80 	tst.w	r3, #256	; 0x100
    2c8c:	d0fb      	beq.n	2c86 <_usb_d_dev_handler+0x11a>
    2c8e:	e7f2      	b.n	2c76 <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2c90:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2c94:	2400      	movs	r4, #0
    2c96:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2c9a:	2208      	movs	r2, #8
    2c9c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2c9e:	2270      	movs	r2, #112	; 0x70
    2ca0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2ca2:	f240 2201 	movw	r2, #513	; 0x201
    2ca6:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    2ca8:	4b48      	ldr	r3, [pc, #288]	; (2dcc <_usb_d_dev_handler+0x260>)
    2caa:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    2cac:	4b45      	ldr	r3, [pc, #276]	; (2dc4 <_usb_d_dev_handler+0x258>)
    2cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2cb0:	4621      	mov	r1, r4
    2cb2:	2001      	movs	r0, #1
    2cb4:	4798      	blx	r3
    2cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2cba:	f011 0f10 	tst.w	r1, #16
    2cbe:	d109      	bne.n	2cd4 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2cc0:	f011 0f40 	tst.w	r1, #64	; 0x40
    2cc4:	d108      	bne.n	2cd8 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2cc6:	f011 0f20 	tst.w	r1, #32
    2cca:	d02f      	beq.n	2d2c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    2ccc:	2100      	movs	r1, #0
    2cce:	4b40      	ldr	r3, [pc, #256]	; (2dd0 <_usb_d_dev_handler+0x264>)
    2cd0:	4798      	blx	r3
    2cd2:	e02b      	b.n	2d2c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    2cd4:	47c8      	blx	r9
    2cd6:	e029      	b.n	2d2c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    2cd8:	2101      	movs	r1, #1
    2cda:	4b3d      	ldr	r3, [pc, #244]	; (2dd0 <_usb_d_dev_handler+0x264>)
    2cdc:	4798      	blx	r3
    2cde:	e025      	b.n	2d2c <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2ce0:	f011 0f40 	tst.w	r1, #64	; 0x40
    2ce4:	d111      	bne.n	2d0a <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2ce6:	f011 0f08 	tst.w	r1, #8
    2cea:	d112      	bne.n	2d12 <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2cec:	f011 0f02 	tst.w	r1, #2
    2cf0:	d112      	bne.n	2d18 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2cf2:	f003 0307 	and.w	r3, r3, #7
    2cf6:	2b01      	cmp	r3, #1
    2cf8:	d118      	bne.n	2d2c <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2cfa:	f011 0f04 	tst.w	r1, #4
    2cfe:	d10f      	bne.n	2d20 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2d00:	f011 0f10 	tst.w	r1, #16
    2d04:	d012      	beq.n	2d2c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    2d06:	47c8      	blx	r9
    2d08:	e010      	b.n	2d2c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    2d0a:	2101      	movs	r1, #1
    2d0c:	4b30      	ldr	r3, [pc, #192]	; (2dd0 <_usb_d_dev_handler+0x264>)
    2d0e:	4798      	blx	r3
    2d10:	e00c      	b.n	2d2c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    2d12:	2101      	movs	r1, #1
    2d14:	47c0      	blx	r8
    2d16:	e009      	b.n	2d2c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    2d18:	2101      	movs	r1, #1
    2d1a:	4b2e      	ldr	r3, [pc, #184]	; (2dd4 <_usb_d_dev_handler+0x268>)
    2d1c:	4798      	blx	r3
    2d1e:	e005      	b.n	2d2c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    2d20:	2100      	movs	r1, #0
    2d22:	47c0      	blx	r8
    2d24:	e002      	b.n	2d2c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    2d26:	2100      	movs	r1, #0
    2d28:	4b29      	ldr	r3, [pc, #164]	; (2dd0 <_usb_d_dev_handler+0x264>)
    2d2a:	4798      	blx	r3
    2d2c:	3401      	adds	r4, #1
    2d2e:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2d30:	2c09      	cmp	r4, #9
    2d32:	d042      	beq.n	2dba <_usb_d_dev_handler+0x24e>
    2d34:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    2d36:	7cab      	ldrb	r3, [r5, #18]
    2d38:	2bff      	cmp	r3, #255	; 0xff
    2d3a:	d0f7      	beq.n	2d2c <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    2d3c:	f003 030f 	and.w	r3, r3, #15
    2d40:	2101      	movs	r1, #1
    2d42:	4099      	lsls	r1, r3
    2d44:	4231      	tst	r1, r6
    2d46:	d0f1      	beq.n	2d2c <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2d48:	0159      	lsls	r1, r3, #5
    2d4a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2d4e:	f501 7180 	add.w	r1, r1, #256	; 0x100
    2d52:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2d54:	015b      	lsls	r3, r3, #5
    2d56:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2d5a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    2d5e:	4019      	ands	r1, r3
    2d60:	d0e4      	beq.n	2d2c <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2d62:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    2d66:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    2d6a:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    2d6e:	f003 0247 	and.w	r2, r3, #71	; 0x47
    2d72:	2a01      	cmp	r2, #1
    2d74:	d0a1      	beq.n	2cba <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2d76:	f013 0f80 	tst.w	r3, #128	; 0x80
    2d7a:	d1b1      	bne.n	2ce0 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2d7c:	f011 0f20 	tst.w	r1, #32
    2d80:	d1d1      	bne.n	2d26 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2d82:	f011 0f04 	tst.w	r1, #4
    2d86:	d10e      	bne.n	2da6 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2d88:	f011 0f01 	tst.w	r1, #1
    2d8c:	d10e      	bne.n	2dac <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2d8e:	f003 0307 	and.w	r3, r3, #7
    2d92:	2b01      	cmp	r3, #1
    2d94:	d1ca      	bne.n	2d2c <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2d96:	f011 0f08 	tst.w	r1, #8
    2d9a:	d10b      	bne.n	2db4 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2d9c:	f011 0f10 	tst.w	r1, #16
    2da0:	d0c4      	beq.n	2d2c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    2da2:	47c8      	blx	r9
    2da4:	e7c2      	b.n	2d2c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    2da6:	2100      	movs	r1, #0
    2da8:	47c0      	blx	r8
    2daa:	e7bf      	b.n	2d2c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    2dac:	2101      	movs	r1, #1
    2dae:	4b0a      	ldr	r3, [pc, #40]	; (2dd8 <_usb_d_dev_handler+0x26c>)
    2db0:	4798      	blx	r3
    2db2:	e7bb      	b.n	2d2c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    2db4:	2101      	movs	r1, #1
    2db6:	47c0      	blx	r8
    2db8:	e7b8      	b.n	2d2c <_usb_d_dev_handler+0x1c0>
    2dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2dbe:	bf00      	nop
    2dc0:	200005b8 	.word	0x200005b8
    2dc4:	20000544 	.word	0x20000544
    2dc8:	40001000 	.word	0x40001000
    2dcc:	000027b5 	.word	0x000027b5
    2dd0:	000025f1 	.word	0x000025f1
    2dd4:	000027f9 	.word	0x000027f9
    2dd8:	0000297d 	.word	0x0000297d
    2ddc:	00002575 	.word	0x00002575
    2de0:	000026b5 	.word	0x000026b5

00002de4 <_usb_d_dev_init>:
{
    2de4:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    2de6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2dea:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    2dec:	f013 0f01 	tst.w	r3, #1
    2df0:	d124      	bne.n	2e3c <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2df2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2df6:	7893      	ldrb	r3, [r2, #2]
    2df8:	f013 0f03 	tst.w	r3, #3
    2dfc:	d1fb      	bne.n	2df6 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    2dfe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2e02:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    2e04:	f013 0f02 	tst.w	r3, #2
    2e08:	d00f      	beq.n	2e2a <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    2e0a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2e0e:	7813      	ldrb	r3, [r2, #0]
    2e10:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2e14:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2e16:	7893      	ldrb	r3, [r2, #2]
    2e18:	f013 0f03 	tst.w	r3, #3
    2e1c:	d1fb      	bne.n	2e16 <_usb_d_dev_init+0x32>
    2e1e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2e22:	7893      	ldrb	r3, [r2, #2]
    2e24:	f013 0f02 	tst.w	r3, #2
    2e28:	d1fb      	bne.n	2e22 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2e2a:	2201      	movs	r2, #1
    2e2c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2e30:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2e32:	461a      	mov	r2, r3
    2e34:	7893      	ldrb	r3, [r2, #2]
    2e36:	f013 0f03 	tst.w	r3, #3
    2e3a:	d1fb      	bne.n	2e34 <_usb_d_dev_init+0x50>
    2e3c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2e40:	7893      	ldrb	r3, [r2, #2]
    2e42:	f013 0f01 	tst.w	r3, #1
    2e46:	d1fb      	bne.n	2e40 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2e48:	4b21      	ldr	r3, [pc, #132]	; (2ed0 <_usb_d_dev_init+0xec>)
    2e4a:	4a22      	ldr	r2, [pc, #136]	; (2ed4 <_usb_d_dev_init+0xf0>)
    2e4c:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    2e4e:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2e50:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2e52:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2e54:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    2e56:	4b20      	ldr	r3, [pc, #128]	; (2ed8 <_usb_d_dev_init+0xf4>)
    2e58:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    2e5a:	4b20      	ldr	r3, [pc, #128]	; (2edc <_usb_d_dev_init+0xf8>)
    2e5c:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    2e5e:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    2e62:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    2e66:	f011 011f 	ands.w	r1, r1, #31
    2e6a:	d02b      	beq.n	2ec4 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    2e6c:	291f      	cmp	r1, #31
    2e6e:	bf08      	it	eq
    2e70:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    2e72:	b34b      	cbz	r3, 2ec8 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    2e74:	2b1f      	cmp	r3, #31
    2e76:	bf08      	it	eq
    2e78:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    2e7a:	b33a      	cbz	r2, 2ecc <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    2e7c:	2a07      	cmp	r2, #7
    2e7e:	bf08      	it	eq
    2e80:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    2e82:	f003 031f 	and.w	r3, r3, #31
    2e86:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    2e8a:	0312      	lsls	r2, r2, #12
    2e8c:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    2e90:	4313      	orrs	r3, r2
    2e92:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2e96:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    2e98:	78d3      	ldrb	r3, [r2, #3]
    2e9a:	f043 0303 	orr.w	r3, r3, #3
    2e9e:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    2ea0:	78d3      	ldrb	r3, [r2, #3]
    2ea2:	f043 030c 	orr.w	r3, r3, #12
    2ea6:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2ea8:	2304      	movs	r3, #4
    2eaa:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2eac:	7893      	ldrb	r3, [r2, #2]
    2eae:	f013 0f03 	tst.w	r3, #3
    2eb2:	d1fb      	bne.n	2eac <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    2eb4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2eb8:	4a05      	ldr	r2, [pc, #20]	; (2ed0 <_usb_d_dev_init+0xec>)
    2eba:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    2ebc:	2201      	movs	r2, #1
    2ebe:	811a      	strh	r2, [r3, #8]
}
    2ec0:	2000      	movs	r0, #0
    2ec2:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    2ec4:	2109      	movs	r1, #9
    2ec6:	e7d4      	b.n	2e72 <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    2ec8:	2319      	movs	r3, #25
    2eca:	e7d6      	b.n	2e7a <_usb_d_dev_init+0x96>
		pad_trim = 6;
    2ecc:	2206      	movs	r2, #6
    2ece:	e7d8      	b.n	2e82 <_usb_d_dev_init+0x9e>
    2ed0:	20000544 	.word	0x20000544
    2ed4:	00002571 	.word	0x00002571
    2ed8:	000027b5 	.word	0x000027b5
    2edc:	00800084 	.word	0x00800084

00002ee0 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    2ee0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2ee4:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    2ee6:	f013 0f03 	tst.w	r3, #3
    2eea:	d129      	bne.n	2f40 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2eec:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2ef0:	7893      	ldrb	r3, [r2, #2]
    2ef2:	f013 0f03 	tst.w	r3, #3
    2ef6:	d1fb      	bne.n	2ef0 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    2ef8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2efc:	781b      	ldrb	r3, [r3, #0]
    2efe:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    2f00:	f013 0f02 	tst.w	r3, #2
    2f04:	d108      	bne.n	2f18 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    2f06:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2f0a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2f0e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2f10:	7893      	ldrb	r3, [r2, #2]
    2f12:	f013 0f03 	tst.w	r3, #3
    2f16:	d1fb      	bne.n	2f10 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f18:	4b0b      	ldr	r3, [pc, #44]	; (2f48 <_usb_d_dev_enable+0x68>)
    2f1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2f1e:	609a      	str	r2, [r3, #8]
    2f20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2f24:	609a      	str	r2, [r3, #8]
    2f26:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    2f2a:	609a      	str	r2, [r3, #8]
    2f2c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2f30:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2f32:	f240 228d 	movw	r2, #653	; 0x28d
    2f36:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2f3a:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    2f3c:	2000      	movs	r0, #0
    2f3e:	4770      	bx	lr
		return -USB_ERR_DENIED;
    2f40:	f06f 0010 	mvn.w	r0, #16
}
    2f44:	4770      	bx	lr
    2f46:	bf00      	nop
    2f48:	e000e100 	.word	0xe000e100

00002f4c <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2f4c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2f50:	8913      	ldrh	r3, [r2, #8]
    2f52:	f023 0301 	bic.w	r3, r3, #1
    2f56:	041b      	lsls	r3, r3, #16
    2f58:	0c1b      	lsrs	r3, r3, #16
    2f5a:	8113      	strh	r3, [r2, #8]
    2f5c:	4770      	bx	lr

00002f5e <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    2f5e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    2f62:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2f66:	7298      	strb	r0, [r3, #10]
    2f68:	4770      	bx	lr
	...

00002f6c <_usb_d_dev_ep_init>:
{
    2f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f6e:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2f72:	f010 050f 	ands.w	r5, r0, #15
    2f76:	d04d      	beq.n	3014 <_usb_d_dev_ep_init+0xa8>
    2f78:	f1be 0f00 	cmp.w	lr, #0
    2f7c:	bfb4      	ite	lt
    2f7e:	1cac      	addlt	r4, r5, #2
    2f80:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2f82:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2f86:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    2f88:	2d02      	cmp	r5, #2
    2f8a:	d947      	bls.n	301c <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    2f8c:	f06f 0011 	mvn.w	r0, #17
    2f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2f92:	f1be 0f00 	cmp.w	lr, #0
    2f96:	db1b      	blt.n	2fd0 <_usb_d_dev_ep_init+0x64>
    2f98:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2f9c:	4e37      	ldr	r6, [pc, #220]	; (307c <_usb_d_dev_ep_init+0x110>)
    2f9e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    2fa2:	2d00      	cmp	r5, #0
    2fa4:	d15e      	bne.n	3064 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2fa6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2faa:	4d34      	ldr	r5, [pc, #208]	; (307c <_usb_d_dev_ep_init+0x110>)
    2fac:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    2fb0:	4d33      	ldr	r5, [pc, #204]	; (3080 <_usb_d_dev_ep_init+0x114>)
    2fb2:	00a6      	lsls	r6, r4, #2
    2fb4:	1933      	adds	r3, r6, r4
    2fb6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    2fba:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    2fbe:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    2fc2:	3101      	adds	r1, #1
    2fc4:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    2fc8:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    2fcc:	2000      	movs	r0, #0
    2fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2fd0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2fd4:	4e29      	ldr	r6, [pc, #164]	; (307c <_usb_d_dev_ep_init+0x110>)
    2fd6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2fda:	686d      	ldr	r5, [r5, #4]
    2fdc:	b935      	cbnz	r5, 2fec <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2fde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2fe2:	4d26      	ldr	r5, [pc, #152]	; (307c <_usb_d_dev_ep_init+0x110>)
    2fe4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    2fe8:	685f      	ldr	r7, [r3, #4]
    2fea:	e7e1      	b.n	2fb0 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2fec:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2ff0:	4e22      	ldr	r6, [pc, #136]	; (307c <_usb_d_dev_ep_init+0x110>)
    2ff2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2ff6:	896d      	ldrh	r5, [r5, #10]
    2ff8:	4295      	cmp	r5, r2
    2ffa:	daf0      	bge.n	2fde <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    2ffc:	f06f 0012 	mvn.w	r0, #18
    3000:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    3002:	f06f 0013 	mvn.w	r0, #19
    3006:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3008:	f06f 0013 	mvn.w	r0, #19
    300c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    300e:	f06f 0012 	mvn.w	r0, #18
    3012:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3014:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    3018:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    301a:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    301c:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    3020:	4f17      	ldr	r7, [pc, #92]	; (3080 <_usb_d_dev_ep_init+0x114>)
    3022:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    3026:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    302a:	2eff      	cmp	r6, #255	; 0xff
    302c:	d1e9      	bne.n	3002 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    302e:	2900      	cmp	r1, #0
    3030:	d1af      	bne.n	2f92 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3032:	b125      	cbz	r5, 303e <_usb_d_dev_ep_init+0xd2>
    3034:	f1be 0f00 	cmp.w	lr, #0
    3038:	bfa4      	itt	ge
    303a:	3502      	addge	r5, #2
    303c:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    303e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3042:	4e0f      	ldr	r6, [pc, #60]	; (3080 <_usb_d_dev_ep_init+0x114>)
    3044:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3048:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    304c:	2dff      	cmp	r5, #255	; 0xff
    304e:	d1db      	bne.n	3008 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    3050:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3054:	4e09      	ldr	r6, [pc, #36]	; (307c <_usb_d_dev_ep_init+0x110>)
    3056:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    305a:	2d00      	cmp	r5, #0
    305c:	d0d7      	beq.n	300e <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    305e:	f1be 0f00 	cmp.w	lr, #0
    3062:	dbb5      	blt.n	2fd0 <_usb_d_dev_ep_init+0x64>
    3064:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3068:	4e04      	ldr	r6, [pc, #16]	; (307c <_usb_d_dev_ep_init+0x110>)
    306a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    306e:	892d      	ldrh	r5, [r5, #8]
    3070:	4295      	cmp	r5, r2
    3072:	da98      	bge.n	2fa6 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    3074:	f06f 0012 	mvn.w	r0, #18
    3078:	bdf0      	pop	{r4, r5, r6, r7, pc}
    307a:	bf00      	nop
    307c:	00004998 	.word	0x00004998
    3080:	20000544 	.word	0x20000544

00003084 <_usb_d_dev_ep_deinit>:
{
    3084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3086:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3088:	f010 060f 	ands.w	r6, r0, #15
    308c:	d00e      	beq.n	30ac <_usb_d_dev_ep_deinit+0x28>
    308e:	2f00      	cmp	r7, #0
    3090:	bfb4      	ite	lt
    3092:	1cb3      	addlt	r3, r6, #2
    3094:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3096:	2e02      	cmp	r6, #2
    3098:	d900      	bls.n	309c <_usb_d_dev_ep_deinit+0x18>
    309a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    309c:	461d      	mov	r5, r3
    309e:	3301      	adds	r3, #1
    30a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    30a4:	4a24      	ldr	r2, [pc, #144]	; (3138 <_usb_d_dev_ep_deinit+0xb4>)
    30a6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    30aa:	e002      	b.n	30b2 <_usb_d_dev_ep_deinit+0x2e>
    30ac:	f8df e094 	ldr.w	lr, [pc, #148]	; 3144 <_usb_d_dev_ep_deinit+0xc0>
    30b0:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    30b2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    30b6:	4a21      	ldr	r2, [pc, #132]	; (313c <_usb_d_dev_ep_deinit+0xb8>)
    30b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    30bc:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    30c0:	2aff      	cmp	r2, #255	; 0xff
    30c2:	d0ea      	beq.n	309a <_usb_d_dev_ep_deinit+0x16>
    30c4:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    30c6:	2203      	movs	r2, #3
    30c8:	0ff9      	lsrs	r1, r7, #31
    30ca:	4670      	mov	r0, lr
    30cc:	4b1c      	ldr	r3, [pc, #112]	; (3140 <_usb_d_dev_ep_deinit+0xbc>)
    30ce:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    30d0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    30d4:	4a19      	ldr	r2, [pc, #100]	; (313c <_usb_d_dev_ep_deinit+0xb8>)
    30d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    30da:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    30de:	f003 0307 	and.w	r3, r3, #7
    30e2:	2b01      	cmp	r3, #1
    30e4:	d016      	beq.n	3114 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    30e6:	2f00      	cmp	r7, #0
    30e8:	db1b      	blt.n	3122 <_usb_d_dev_ep_deinit+0x9e>
    30ea:	0160      	lsls	r0, r4, #5
    30ec:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    30f0:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    30f4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    30f8:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    30fc:	4b0f      	ldr	r3, [pc, #60]	; (313c <_usb_d_dev_ep_deinit+0xb8>)
    30fe:	00aa      	lsls	r2, r5, #2
    3100:	1951      	adds	r1, r2, r5
    3102:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3106:	2000      	movs	r0, #0
    3108:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    310c:	22ff      	movs	r2, #255	; 0xff
    310e:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    3112:	e7c2      	b.n	309a <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    3114:	0160      	lsls	r0, r4, #5
    3116:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    311a:	2300      	movs	r3, #0
    311c:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    3120:	e7ec      	b.n	30fc <_usb_d_dev_ep_deinit+0x78>
    3122:	0176      	lsls	r6, r6, #5
    3124:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    3128:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    312c:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    3130:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    3134:	e7e2      	b.n	30fc <_usb_d_dev_ep_deinit+0x78>
    3136:	bf00      	nop
    3138:	200005a4 	.word	0x200005a4
    313c:	20000544 	.word	0x20000544
    3140:	00002649 	.word	0x00002649
    3144:	200005b8 	.word	0x200005b8

00003148 <_usb_d_dev_ep_enable>:
{
    3148:	b5f0      	push	{r4, r5, r6, r7, lr}
    314a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    314c:	f010 000f 	ands.w	r0, r0, #15
    3150:	f000 80a6 	beq.w	32a0 <_usb_d_dev_ep_enable+0x158>
    3154:	2f00      	cmp	r7, #0
    3156:	bfb4      	ite	lt
    3158:	1c83      	addlt	r3, r0, #2
    315a:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    315c:	4606      	mov	r6, r0
    315e:	0142      	lsls	r2, r0, #5
    3160:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3164:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    3168:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    316a:	2802      	cmp	r0, #2
    316c:	f240 809f 	bls.w	32ae <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    3170:	f06f 0011 	mvn.w	r0, #17
    3174:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    3176:	f014 0f77 	tst.w	r4, #119	; 0x77
    317a:	f040 8088 	bne.w	328e <_usb_d_dev_ep_enable+0x146>
    317e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3182:	2111      	movs	r1, #17
    3184:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3188:	4c97      	ldr	r4, [pc, #604]	; (33e8 <_usb_d_dev_ep_enable+0x2a0>)
    318a:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    318e:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    3192:	4996      	ldr	r1, [pc, #600]	; (33ec <_usb_d_dev_ep_enable+0x2a4>)
    3194:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3198:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    319c:	f200 80cc 	bhi.w	3338 <_usb_d_dev_ep_enable+0x1f0>
    31a0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    31a4:	f200 810a 	bhi.w	33bc <_usb_d_dev_ep_enable+0x274>
    31a8:	2c80      	cmp	r4, #128	; 0x80
    31aa:	f200 80f9 	bhi.w	33a0 <_usb_d_dev_ep_enable+0x258>
    31ae:	2c40      	cmp	r4, #64	; 0x40
    31b0:	f200 810b 	bhi.w	33ca <_usb_d_dev_ep_enable+0x282>
    31b4:	2c20      	cmp	r4, #32
    31b6:	f200 80fa 	bhi.w	33ae <_usb_d_dev_ep_enable+0x266>
    31ba:	2c10      	cmp	r4, #16
    31bc:	f200 810c 	bhi.w	33d8 <_usb_d_dev_ep_enable+0x290>
    31c0:	2c08      	cmp	r4, #8
    31c2:	bf94      	ite	ls
    31c4:	2700      	movls	r7, #0
    31c6:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    31c8:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    31cc:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    31ce:	f3c4 010d 	ubfx	r1, r4, #0, #14
    31d2:	e0b7      	b.n	3344 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    31d4:	f014 0f70 	tst.w	r4, #112	; 0x70
    31d8:	d15c      	bne.n	3294 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    31da:	4d83      	ldr	r5, [pc, #524]	; (33e8 <_usb_d_dev_ep_enable+0x2a0>)
    31dc:	009f      	lsls	r7, r3, #2
    31de:	18f9      	adds	r1, r7, r3
    31e0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    31e4:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    31e8:	0109      	lsls	r1, r1, #4
    31ea:	f001 0170 	and.w	r1, r1, #112	; 0x70
    31ee:	430c      	orrs	r4, r1
    31f0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    31f4:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    31f8:	443b      	add	r3, r7
    31fa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    31fe:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    3202:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    320a:	d80f      	bhi.n	322c <_usb_d_dev_ep_enable+0xe4>
    320c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3210:	d819      	bhi.n	3246 <_usb_d_dev_ep_enable+0xfe>
    3212:	2b80      	cmp	r3, #128	; 0x80
    3214:	d819      	bhi.n	324a <_usb_d_dev_ep_enable+0x102>
    3216:	2b40      	cmp	r3, #64	; 0x40
    3218:	d819      	bhi.n	324e <_usb_d_dev_ep_enable+0x106>
    321a:	2b20      	cmp	r3, #32
    321c:	d819      	bhi.n	3252 <_usb_d_dev_ep_enable+0x10a>
    321e:	2b10      	cmp	r3, #16
    3220:	d819      	bhi.n	3256 <_usb_d_dev_ep_enable+0x10e>
    3222:	2b08      	cmp	r3, #8
    3224:	bf94      	ite	ls
    3226:	2300      	movls	r3, #0
    3228:	2301      	movhi	r3, #1
    322a:	e000      	b.n	322e <_usb_d_dev_ep_enable+0xe6>
    322c:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    322e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    3232:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3234:	2380      	movs	r3, #128	; 0x80
    3236:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    323a:	4b6b      	ldr	r3, [pc, #428]	; (33e8 <_usb_d_dev_ep_enable+0x2a0>)
    323c:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    3240:	2000      	movs	r0, #0
    3242:	76b0      	strb	r0, [r6, #26]
    3244:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3246:	2306      	movs	r3, #6
    3248:	e7f1      	b.n	322e <_usb_d_dev_ep_enable+0xe6>
    324a:	2305      	movs	r3, #5
    324c:	e7ef      	b.n	322e <_usb_d_dev_ep_enable+0xe6>
    324e:	2304      	movs	r3, #4
    3250:	e7ed      	b.n	322e <_usb_d_dev_ep_enable+0xe6>
    3252:	2303      	movs	r3, #3
    3254:	e7eb      	b.n	322e <_usb_d_dev_ep_enable+0xe6>
    3256:	2302      	movs	r3, #2
    3258:	e7e9      	b.n	322e <_usb_d_dev_ep_enable+0xe6>
    325a:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    325c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3260:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3262:	2340      	movs	r3, #64	; 0x40
    3264:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    3268:	4b5f      	ldr	r3, [pc, #380]	; (33e8 <_usb_d_dev_ep_enable+0x2a0>)
    326a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    326e:	2000      	movs	r0, #0
    3270:	72b0      	strb	r0, [r6, #10]
    3272:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3274:	2106      	movs	r1, #6
    3276:	e7f1      	b.n	325c <_usb_d_dev_ep_enable+0x114>
    3278:	2105      	movs	r1, #5
    327a:	e7ef      	b.n	325c <_usb_d_dev_ep_enable+0x114>
    327c:	2104      	movs	r1, #4
    327e:	e7ed      	b.n	325c <_usb_d_dev_ep_enable+0x114>
    3280:	2103      	movs	r1, #3
    3282:	e7eb      	b.n	325c <_usb_d_dev_ep_enable+0x114>
    3284:	2102      	movs	r1, #2
    3286:	e7e9      	b.n	325c <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    3288:	f06f 0011 	mvn.w	r0, #17
    328c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    328e:	f06f 0013 	mvn.w	r0, #19
    3292:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3294:	f06f 0013 	mvn.w	r0, #19
    3298:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    329a:	f06f 0013 	mvn.w	r0, #19
    329e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    32a0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    32a4:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    32a8:	b2e4      	uxtb	r4, r4
    32aa:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    32ac:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    32ae:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    32b2:	494d      	ldr	r1, [pc, #308]	; (33e8 <_usb_d_dev_ep_enable+0x2a0>)
    32b4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    32b8:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    32bc:	2dff      	cmp	r5, #255	; 0xff
    32be:	d0e3      	beq.n	3288 <_usb_d_dev_ep_enable+0x140>
    32c0:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    32c2:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    32c4:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    32c8:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    32cc:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    32d0:	f001 0107 	and.w	r1, r1, #7
    32d4:	2901      	cmp	r1, #1
    32d6:	f43f af4e 	beq.w	3176 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    32da:	2f00      	cmp	r7, #0
    32dc:	f6ff af7a 	blt.w	31d4 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    32e0:	f014 0f07 	tst.w	r4, #7
    32e4:	d1d9      	bne.n	329a <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    32e6:	4d40      	ldr	r5, [pc, #256]	; (33e8 <_usb_d_dev_ep_enable+0x2a0>)
    32e8:	009f      	lsls	r7, r3, #2
    32ea:	18f9      	adds	r1, r7, r3
    32ec:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    32f0:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    32f4:	f001 0107 	and.w	r1, r1, #7
    32f8:	430c      	orrs	r4, r1
    32fa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    32fe:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3302:	443b      	add	r3, r7
    3304:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3308:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    330c:	4b37      	ldr	r3, [pc, #220]	; (33ec <_usb_d_dev_ep_enable+0x2a4>)
    330e:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3312:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3316:	d8a0      	bhi.n	325a <_usb_d_dev_ep_enable+0x112>
    3318:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    331c:	d8aa      	bhi.n	3274 <_usb_d_dev_ep_enable+0x12c>
    331e:	2980      	cmp	r1, #128	; 0x80
    3320:	d8aa      	bhi.n	3278 <_usb_d_dev_ep_enable+0x130>
    3322:	2940      	cmp	r1, #64	; 0x40
    3324:	d8aa      	bhi.n	327c <_usb_d_dev_ep_enable+0x134>
    3326:	2920      	cmp	r1, #32
    3328:	d8aa      	bhi.n	3280 <_usb_d_dev_ep_enable+0x138>
    332a:	2910      	cmp	r1, #16
    332c:	d8aa      	bhi.n	3284 <_usb_d_dev_ep_enable+0x13c>
    332e:	2908      	cmp	r1, #8
    3330:	bf94      	ite	ls
    3332:	2100      	movls	r1, #0
    3334:	2101      	movhi	r1, #1
    3336:	e791      	b.n	325c <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3338:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    333c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    333e:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3342:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3344:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    3348:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    334a:	2140      	movs	r1, #64	; 0x40
    334c:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3350:	2080      	movs	r0, #128	; 0x80
    3352:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    3356:	4a24      	ldr	r2, [pc, #144]	; (33e8 <_usb_d_dev_ep_enable+0x2a0>)
    3358:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    335c:	2000      	movs	r0, #0
    335e:	72b0      	strb	r0, [r6, #10]
    3360:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3362:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3366:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    336a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    336e:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    3372:	016d      	lsls	r5, r5, #5
    3374:	1953      	adds	r3, r2, r5
    3376:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3378:	685a      	ldr	r2, [r3, #4]
    337a:	f364 329b 	bfi	r2, r4, #14, #14
    337e:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3380:	685a      	ldr	r2, [r3, #4]
    3382:	f360 020d 	bfi	r2, r0, #0, #14
    3386:	605a      	str	r2, [r3, #4]
    3388:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    338c:	22b0      	movs	r2, #176	; 0xb0
    338e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3392:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3396:	461d      	mov	r5, r3
    3398:	2310      	movs	r3, #16
    339a:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    339e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33a0:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    33a4:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33a6:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    33aa:	2705      	movs	r7, #5
    33ac:	e7ca      	b.n	3344 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33ae:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    33b2:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33b4:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    33b8:	2703      	movs	r7, #3
    33ba:	e7c3      	b.n	3344 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33bc:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    33c0:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33c2:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    33c6:	2706      	movs	r7, #6
    33c8:	e7bc      	b.n	3344 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33ca:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    33ce:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33d0:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    33d4:	2704      	movs	r7, #4
    33d6:	e7b5      	b.n	3344 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33d8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    33dc:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33de:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    33e2:	2702      	movs	r7, #2
    33e4:	e7ae      	b.n	3344 <_usb_d_dev_ep_enable+0x1fc>
    33e6:	bf00      	nop
    33e8:	20000544 	.word	0x20000544
    33ec:	0fffc000 	.word	0x0fffc000

000033f0 <_usb_d_dev_ep_stall>:
{
    33f0:	b470      	push	{r4, r5, r6}
    33f2:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    33f4:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    33f6:	f010 000f 	ands.w	r0, r0, #15
    33fa:	d008      	beq.n	340e <_usb_d_dev_ep_stall+0x1e>
    33fc:	2b00      	cmp	r3, #0
    33fe:	bfb4      	ite	lt
    3400:	1c83      	addlt	r3, r0, #2
    3402:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    3404:	2802      	cmp	r0, #2
    3406:	d903      	bls.n	3410 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    3408:	f06f 0011 	mvn.w	r0, #17
    340c:	e018      	b.n	3440 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    340e:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    3410:	2901      	cmp	r1, #1
    3412:	d017      	beq.n	3444 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    3414:	2900      	cmp	r1, #0
    3416:	d03a      	beq.n	348e <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3418:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    341c:	4a45      	ldr	r2, [pc, #276]	; (3534 <_usb_d_dev_ep_stall+0x144>)
    341e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3422:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3426:	f003 030f 	and.w	r3, r3, #15
    342a:	015b      	lsls	r3, r3, #5
    342c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3430:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3434:	2310      	movs	r3, #16
    3436:	40a3      	lsls	r3, r4
    3438:	421a      	tst	r2, r3
    343a:	bf14      	ite	ne
    343c:	2001      	movne	r0, #1
    343e:	2000      	moveq	r0, #0
}
    3440:	bc70      	pop	{r4, r5, r6}
    3442:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3444:	2510      	movs	r5, #16
    3446:	40a5      	lsls	r5, r4
    3448:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    344a:	493a      	ldr	r1, [pc, #232]	; (3534 <_usb_d_dev_ep_stall+0x144>)
    344c:	009e      	lsls	r6, r3, #2
    344e:	18f2      	adds	r2, r6, r3
    3450:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3454:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3458:	f002 020f 	and.w	r2, r2, #15
    345c:	0150      	lsls	r0, r2, #5
    345e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    3462:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3466:	2020      	movs	r0, #32
    3468:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    346c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    346e:	0152      	lsls	r2, r2, #5
    3470:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3474:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    3478:	4433      	add	r3, r6
    347a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    347e:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    3482:	f042 0208 	orr.w	r2, r2, #8
    3486:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    348a:	2000      	movs	r0, #0
    348c:	e7d8      	b.n	3440 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    348e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3492:	4928      	ldr	r1, [pc, #160]	; (3534 <_usb_d_dev_ep_stall+0x144>)
    3494:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3498:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    349c:	f002 020f 	and.w	r2, r2, #15
    34a0:	0151      	lsls	r1, r2, #5
    34a2:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    34a6:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    34aa:	2010      	movs	r0, #16
    34ac:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    34ae:	4205      	tst	r5, r0
    34b0:	d03c      	beq.n	352c <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    34b2:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    34b4:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    34b8:	2020      	movs	r0, #32
    34ba:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    34bc:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    34be:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    34c2:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    34c6:	4202      	tst	r2, r0
    34c8:	d007      	beq.n	34da <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    34ca:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    34ce:	2201      	movs	r2, #1
    34d0:	fa02 f404 	lsl.w	r4, r2, r4
    34d4:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    34d6:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    34da:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    34de:	4815      	ldr	r0, [pc, #84]	; (3534 <_usb_d_dev_ep_stall+0x144>)
    34e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    34e4:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    34e8:	f002 0207 	and.w	r2, r2, #7
    34ec:	2a01      	cmp	r2, #1
    34ee:	d00c      	beq.n	350a <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    34f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    34f4:	4a0f      	ldr	r2, [pc, #60]	; (3534 <_usb_d_dev_ep_stall+0x144>)
    34f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    34fa:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    34fe:	f36f 02c3 	bfc	r2, #3, #1
    3502:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3506:	2000      	movs	r0, #0
    3508:	e79a      	b.n	3440 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    350a:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    350e:	f012 0f30 	tst.w	r2, #48	; 0x30
    3512:	d10d      	bne.n	3530 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    3514:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3518:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    351c:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    3520:	f36f 02c3 	bfc	r2, #3, #1
    3524:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3528:	2000      	movs	r0, #0
    352a:	e789      	b.n	3440 <_usb_d_dev_ep_stall+0x50>
    352c:	2000      	movs	r0, #0
    352e:	e787      	b.n	3440 <_usb_d_dev_ep_stall+0x50>
    3530:	2000      	movs	r0, #0
    3532:	e785      	b.n	3440 <_usb_d_dev_ep_stall+0x50>
    3534:	20000544 	.word	0x20000544

00003538 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    3538:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    353a:	f000 040f 	and.w	r4, r0, #15
    353e:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    3540:	4a14      	ldr	r2, [pc, #80]	; (3594 <_usb_d_dev_ep_read_req+0x5c>)
    3542:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    3544:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    3546:	6840      	ldr	r0, [r0, #4]
    3548:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    354c:	2c02      	cmp	r4, #2
    354e:	d817      	bhi.n	3580 <_usb_d_dev_ep_read_req+0x48>
    3550:	b1c9      	cbz	r1, 3586 <_usb_d_dev_ep_read_req+0x4e>
    3552:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3556:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    355a:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    355c:	2a11      	cmp	r2, #17
    355e:	d115      	bne.n	358c <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3560:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    3564:	f012 0f10 	tst.w	r2, #16
    3568:	d102      	bne.n	3570 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    356a:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    356c:	bc30      	pop	{r4, r5}
    356e:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    3570:	682c      	ldr	r4, [r5, #0]
    3572:	686a      	ldr	r2, [r5, #4]
    3574:	600c      	str	r4, [r1, #0]
    3576:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3578:	2210      	movs	r2, #16
    357a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    357e:	e7f5      	b.n	356c <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    3580:	f06f 0011 	mvn.w	r0, #17
    3584:	e7f2      	b.n	356c <_usb_d_dev_ep_read_req+0x34>
    3586:	f06f 0011 	mvn.w	r0, #17
    358a:	e7ef      	b.n	356c <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    358c:	f06f 0012 	mvn.w	r0, #18
    3590:	e7ec      	b.n	356c <_usb_d_dev_ep_read_req+0x34>
    3592:	bf00      	nop
    3594:	20000544 	.word	0x20000544

00003598 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    3598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    359c:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    359e:	7a03      	ldrb	r3, [r0, #8]
    35a0:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    35a2:	f013 030f 	ands.w	r3, r3, #15
    35a6:	f000 80c2 	beq.w	372e <_usb_d_dev_ep_trans+0x196>
    35aa:	2e00      	cmp	r6, #0
    35ac:	bfb4      	ite	lt
    35ae:	1c9a      	addlt	r2, r3, #2
    35b0:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    35b2:	4614      	mov	r4, r2
    35b4:	4969      	ldr	r1, [pc, #420]	; (375c <_usb_d_dev_ep_trans+0x1c4>)
    35b6:	f101 0760 	add.w	r7, r1, #96	; 0x60
    35ba:	1c55      	adds	r5, r2, #1
    35bc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    35c0:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    35c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    35c8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    35cc:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    35d0:	f240 31ff 	movw	r1, #1023	; 0x3ff
    35d4:	428a      	cmp	r2, r1
    35d6:	d025      	beq.n	3624 <_usb_d_dev_ep_trans+0x8c>
    35d8:	1e55      	subs	r5, r2, #1
    35da:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    35dc:	6841      	ldr	r1, [r0, #4]
    35de:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    35e0:	2b02      	cmp	r3, #2
    35e2:	f200 8092 	bhi.w	370a <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    35e6:	6803      	ldr	r3, [r0, #0]
    35e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    35ec:	d31c      	bcc.n	3628 <_usb_d_dev_ep_trans+0x90>
    35ee:	eb03 0c01 	add.w	ip, r3, r1
    35f2:	f8df e180 	ldr.w	lr, [pc, #384]	; 3774 <_usb_d_dev_ep_trans+0x1dc>
    35f6:	45f4      	cmp	ip, lr
    35f8:	d816      	bhi.n	3628 <_usb_d_dev_ep_trans+0x90>
    35fa:	f013 0f03 	tst.w	r3, #3
    35fe:	d113      	bne.n	3628 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    3600:	2e00      	cmp	r6, #0
    3602:	db2a      	blt.n	365a <_usb_d_dev_ep_trans+0xc2>
    3604:	428a      	cmp	r2, r1
    3606:	f200 809c 	bhi.w	3742 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    360a:	b34d      	cbz	r5, 3660 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    360c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3610:	4a52      	ldr	r2, [pc, #328]	; (375c <_usb_d_dev_ep_trans+0x1c4>)
    3612:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    361a:	2b00      	cmp	r3, #0
    361c:	d07b      	beq.n	3716 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    361e:	f04f 0800 	mov.w	r8, #0
    3622:	e00c      	b.n	363e <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3624:	4615      	mov	r5, r2
    3626:	e7d9      	b.n	35dc <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    3628:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    362c:	4a4b      	ldr	r2, [pc, #300]	; (375c <_usb_d_dev_ep_trans+0x1c4>)
    362e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3636:	2b00      	cmp	r3, #0
    3638:	d06a      	beq.n	3710 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    363a:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    363e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3642:	4a46      	ldr	r2, [pc, #280]	; (375c <_usb_d_dev_ep_trans+0x1c4>)
    3644:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3648:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    364c:	f013 0f08 	tst.w	r3, #8
    3650:	d009      	beq.n	3666 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    3652:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    3654:	b003      	add	sp, #12
    3656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    365a:	f04f 0800 	mov.w	r8, #0
    365e:	e7ee      	b.n	363e <_usb_d_dev_ep_trans+0xa6>
    3660:	f04f 0800 	mov.w	r8, #0
    3664:	e7eb      	b.n	363e <_usb_d_dev_ep_trans+0xa6>
    3666:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    3668:	a801      	add	r0, sp, #4
    366a:	4b3d      	ldr	r3, [pc, #244]	; (3760 <_usb_d_dev_ep_trans+0x1c8>)
    366c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    366e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3672:	4a3a      	ldr	r2, [pc, #232]	; (375c <_usb_d_dev_ep_trans+0x1c4>)
    3674:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3678:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    367c:	f013 0f40 	tst.w	r3, #64	; 0x40
    3680:	d13c      	bne.n	36fc <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    3682:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    3686:	4b35      	ldr	r3, [pc, #212]	; (375c <_usb_d_dev_ep_trans+0x1c4>)
    3688:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    368c:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    3690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3694:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    3698:	a801      	add	r0, sp, #4
    369a:	4b32      	ldr	r3, [pc, #200]	; (3764 <_usb_d_dev_ep_trans+0x1cc>)
    369c:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    369e:	f8da 3000 	ldr.w	r3, [sl]
    36a2:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    36a6:	f8da 3004 	ldr.w	r3, [sl, #4]
    36aa:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    36ae:	2300      	movs	r3, #0
    36b0:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    36b4:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    36b6:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    36ba:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    36be:	f368 1345 	bfi	r3, r8, #5, #1
    36c2:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    36c6:	f89a 3009 	ldrb.w	r3, [sl, #9]
    36ca:	b1e3      	cbz	r3, 3706 <_usb_d_dev_ep_trans+0x16e>
    36cc:	fab5 f585 	clz	r5, r5
    36d0:	096d      	lsrs	r5, r5, #5
    36d2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    36d6:	4b21      	ldr	r3, [pc, #132]	; (375c <_usb_d_dev_ep_trans+0x1c4>)
    36d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    36dc:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    36e0:	f365 1304 	bfi	r3, r5, #4, #1
    36e4:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    36e8:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    36ea:	f04f 0100 	mov.w	r1, #0
    36ee:	4638      	mov	r0, r7
    36f0:	bfb4      	ite	lt
    36f2:	4b1d      	ldrlt	r3, [pc, #116]	; (3768 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    36f4:	4b1d      	ldrge	r3, [pc, #116]	; (376c <_usb_d_dev_ep_trans+0x1d4>)
    36f6:	4798      	blx	r3
	return ERR_NONE;
    36f8:	2000      	movs	r0, #0
    36fa:	e7ab      	b.n	3654 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    36fc:	a801      	add	r0, sp, #4
    36fe:	4b19      	ldr	r3, [pc, #100]	; (3764 <_usb_d_dev_ep_trans+0x1cc>)
    3700:	4798      	blx	r3
		return USB_BUSY;
    3702:	2001      	movs	r0, #1
    3704:	e7a6      	b.n	3654 <_usb_d_dev_ep_trans+0xbc>
    3706:	2500      	movs	r5, #0
    3708:	e7e3      	b.n	36d2 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    370a:	f06f 0011 	mvn.w	r0, #17
    370e:	e7a1      	b.n	3654 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    3710:	f06f 0012 	mvn.w	r0, #18
    3714:	e79e      	b.n	3654 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    3716:	f06f 0011 	mvn.w	r0, #17
    371a:	e79b      	b.n	3654 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    371c:	f06f 0012 	mvn.w	r0, #18
    3720:	e798      	b.n	3654 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    3722:	6841      	ldr	r1, [r0, #4]
    3724:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    3728:	4f11      	ldr	r7, [pc, #68]	; (3770 <_usb_d_dev_ep_trans+0x1d8>)
    372a:	2400      	movs	r4, #0
    372c:	e75b      	b.n	35e6 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    372e:	4a0b      	ldr	r2, [pc, #44]	; (375c <_usb_d_dev_ep_trans+0x1c4>)
    3730:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    3734:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3738:	428a      	cmp	r2, r1
    373a:	d0f2      	beq.n	3722 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    373c:	4f0c      	ldr	r7, [pc, #48]	; (3770 <_usb_d_dev_ep_trans+0x1d8>)
    373e:	2400      	movs	r4, #0
    3740:	e74a      	b.n	35d8 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    3742:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3746:	4a05      	ldr	r2, [pc, #20]	; (375c <_usb_d_dev_ep_trans+0x1c4>)
    3748:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    374c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3750:	2b00      	cmp	r3, #0
    3752:	d0e3      	beq.n	371c <_usb_d_dev_ep_trans+0x184>
    3754:	f04f 0801 	mov.w	r8, #1
    3758:	e771      	b.n	363e <_usb_d_dev_ep_trans+0xa6>
    375a:	bf00      	nop
    375c:	20000544 	.word	0x20000544
    3760:	00003941 	.word	0x00003941
    3764:	0000394f 	.word	0x0000394f
    3768:	000027f9 	.word	0x000027f9
    376c:	0000297d 	.word	0x0000297d
    3770:	200005b8 	.word	0x200005b8
    3774:	20041fff 	.word	0x20041fff

00003778 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3778:	4b06      	ldr	r3, [pc, #24]	; (3794 <_usb_d_dev_register_callback+0x1c>)
    377a:	2900      	cmp	r1, #0
    377c:	bf08      	it	eq
    377e:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    3780:	2801      	cmp	r0, #1
    3782:	d003      	beq.n	378c <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    3784:	b908      	cbnz	r0, 378a <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    3786:	4b04      	ldr	r3, [pc, #16]	; (3798 <_usb_d_dev_register_callback+0x20>)
    3788:	6619      	str	r1, [r3, #96]	; 0x60
    378a:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    378c:	4b02      	ldr	r3, [pc, #8]	; (3798 <_usb_d_dev_register_callback+0x20>)
    378e:	6659      	str	r1, [r3, #100]	; 0x64
    3790:	4770      	bx	lr
    3792:	bf00      	nop
    3794:	00002571 	.word	0x00002571
    3798:	20000544 	.word	0x20000544

0000379c <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    379c:	4b09      	ldr	r3, [pc, #36]	; (37c4 <_usb_d_dev_register_ep_callback+0x28>)
    379e:	2900      	cmp	r1, #0
    37a0:	bf08      	it	eq
    37a2:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    37a4:	4603      	mov	r3, r0
    37a6:	b130      	cbz	r0, 37b6 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    37a8:	2801      	cmp	r0, #1
    37aa:	d007      	beq.n	37bc <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    37ac:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    37ae:	bf04      	itt	eq
    37b0:	4b05      	ldreq	r3, [pc, #20]	; (37c8 <_usb_d_dev_register_ep_callback+0x2c>)
    37b2:	6719      	streq	r1, [r3, #112]	; 0x70
    37b4:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    37b6:	4b04      	ldr	r3, [pc, #16]	; (37c8 <_usb_d_dev_register_ep_callback+0x2c>)
    37b8:	6699      	str	r1, [r3, #104]	; 0x68
    37ba:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    37bc:	4b02      	ldr	r3, [pc, #8]	; (37c8 <_usb_d_dev_register_ep_callback+0x2c>)
    37be:	66d9      	str	r1, [r3, #108]	; 0x6c
    37c0:	4770      	bx	lr
    37c2:	bf00      	nop
    37c4:	00002571 	.word	0x00002571
    37c8:	20000544 	.word	0x20000544

000037cc <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    37cc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    37ce:	4b01      	ldr	r3, [pc, #4]	; (37d4 <USB_0_Handler+0x8>)
    37d0:	4798      	blx	r3
    37d2:	bd08      	pop	{r3, pc}
    37d4:	00002b6d 	.word	0x00002b6d

000037d8 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    37d8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    37da:	4b01      	ldr	r3, [pc, #4]	; (37e0 <USB_1_Handler+0x8>)
    37dc:	4798      	blx	r3
    37de:	bd08      	pop	{r3, pc}
    37e0:	00002b6d 	.word	0x00002b6d

000037e4 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    37e4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    37e6:	4b01      	ldr	r3, [pc, #4]	; (37ec <USB_2_Handler+0x8>)
    37e8:	4798      	blx	r3
    37ea:	bd08      	pop	{r3, pc}
    37ec:	00002b6d 	.word	0x00002b6d

000037f0 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    37f0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    37f2:	4b01      	ldr	r3, [pc, #4]	; (37f8 <USB_3_Handler+0x8>)
    37f4:	4798      	blx	r3
    37f6:	bd08      	pop	{r3, pc}
    37f8:	00002b6d 	.word	0x00002b6d

000037fc <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    37fc:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    37fe:	4805      	ldr	r0, [pc, #20]	; (3814 <cdc_device_acm_init+0x18>)
    3800:	4b05      	ldr	r3, [pc, #20]	; (3818 <cdc_device_acm_init+0x1c>)
    3802:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    3804:	4b05      	ldr	r3, [pc, #20]	; (381c <cdc_device_acm_init+0x20>)
    3806:	4798      	blx	r3

	usbdc_start(single_desc);
    3808:	4805      	ldr	r0, [pc, #20]	; (3820 <cdc_device_acm_init+0x24>)
    380a:	4b06      	ldr	r3, [pc, #24]	; (3824 <cdc_device_acm_init+0x28>)
    380c:	4798      	blx	r3
	usbdc_attach();
    380e:	4b06      	ldr	r3, [pc, #24]	; (3828 <cdc_device_acm_init+0x2c>)
    3810:	4798      	blx	r3
    3812:	bd08      	pop	{r3, pc}
    3814:	2000076c 	.word	0x2000076c
    3818:	0000420d 	.word	0x0000420d
    381c:	00003bbd 	.word	0x00003bbd
    3820:	20000000 	.word	0x20000000
    3824:	0000427d 	.word	0x0000427d
    3828:	000042b1 	.word	0x000042b1

0000382c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    382c:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    382e:	4b01      	ldr	r3, [pc, #4]	; (3834 <usb_init+0x8>)
    3830:	4798      	blx	r3
    3832:	bd08      	pop	{r3, pc}
    3834:	000037fd 	.word	0x000037fd

00003838 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    3838:	b538      	push	{r3, r4, r5, lr}
    383a:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    383c:	4604      	mov	r4, r0
    383e:	b1b8      	cbz	r0, 3870 <spi_m_sync_init+0x38>
    3840:	1c08      	adds	r0, r1, #0
    3842:	bf18      	it	ne
    3844:	2001      	movne	r0, #1
    3846:	2240      	movs	r2, #64	; 0x40
    3848:	490a      	ldr	r1, [pc, #40]	; (3874 <spi_m_sync_init+0x3c>)
    384a:	4b0b      	ldr	r3, [pc, #44]	; (3878 <spi_m_sync_init+0x40>)
    384c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    384e:	4620      	mov	r0, r4
    3850:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    3854:	4629      	mov	r1, r5
    3856:	4b09      	ldr	r3, [pc, #36]	; (387c <spi_m_sync_init+0x44>)
    3858:	4798      	blx	r3

	if (rc < 0) {
    385a:	2800      	cmp	r0, #0
    385c:	db07      	blt.n	386e <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    385e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3862:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    3864:	4b06      	ldr	r3, [pc, #24]	; (3880 <spi_m_sync_init+0x48>)
    3866:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    3868:	4b06      	ldr	r3, [pc, #24]	; (3884 <spi_m_sync_init+0x4c>)
    386a:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    386c:	2000      	movs	r0, #0
}
    386e:	bd38      	pop	{r3, r4, r5, pc}
    3870:	2000      	movs	r0, #0
    3872:	e7e8      	b.n	3846 <spi_m_sync_init+0xe>
    3874:	000049bc 	.word	0x000049bc
    3878:	00001921 	.word	0x00001921
    387c:	0000204d 	.word	0x0000204d
    3880:	00003905 	.word	0x00003905
    3884:	000038c9 	.word	0x000038c9

00003888 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    3888:	b530      	push	{r4, r5, lr}
    388a:	b085      	sub	sp, #20
    388c:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    388e:	4605      	mov	r5, r0
    3890:	b190      	cbz	r0, 38b8 <spi_m_sync_transfer+0x30>
    3892:	1c08      	adds	r0, r1, #0
    3894:	bf18      	it	ne
    3896:	2001      	movne	r0, #1
    3898:	22b3      	movs	r2, #179	; 0xb3
    389a:	4908      	ldr	r1, [pc, #32]	; (38bc <spi_m_sync_transfer+0x34>)
    389c:	4b08      	ldr	r3, [pc, #32]	; (38c0 <spi_m_sync_transfer+0x38>)
    389e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    38a0:	6823      	ldr	r3, [r4, #0]
    38a2:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    38a4:	6863      	ldr	r3, [r4, #4]
    38a6:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    38a8:	68a3      	ldr	r3, [r4, #8]
    38aa:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    38ac:	a901      	add	r1, sp, #4
    38ae:	1d28      	adds	r0, r5, #4
    38b0:	4b04      	ldr	r3, [pc, #16]	; (38c4 <spi_m_sync_transfer+0x3c>)
    38b2:	4798      	blx	r3
}
    38b4:	b005      	add	sp, #20
    38b6:	bd30      	pop	{r4, r5, pc}
    38b8:	2000      	movs	r0, #0
    38ba:	e7ed      	b.n	3898 <spi_m_sync_transfer+0x10>
    38bc:	000049bc 	.word	0x000049bc
    38c0:	00001921 	.word	0x00001921
    38c4:	000022a9 	.word	0x000022a9

000038c8 <_spi_m_sync_io_write>:
{
    38c8:	b570      	push	{r4, r5, r6, lr}
    38ca:	b084      	sub	sp, #16
    38cc:	460e      	mov	r6, r1
    38ce:	4615      	mov	r5, r2
	ASSERT(io);
    38d0:	4604      	mov	r4, r0
    38d2:	22a3      	movs	r2, #163	; 0xa3
    38d4:	4908      	ldr	r1, [pc, #32]	; (38f8 <_spi_m_sync_io_write+0x30>)
    38d6:	3000      	adds	r0, #0
    38d8:	bf18      	it	ne
    38da:	2001      	movne	r0, #1
    38dc:	4b07      	ldr	r3, [pc, #28]	; (38fc <_spi_m_sync_io_write+0x34>)
    38de:	4798      	blx	r3
	xfer.rxbuf = 0;
    38e0:	2300      	movs	r3, #0
    38e2:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    38e4:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    38e6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    38e8:	a901      	add	r1, sp, #4
    38ea:	f1a4 000c 	sub.w	r0, r4, #12
    38ee:	4b04      	ldr	r3, [pc, #16]	; (3900 <_spi_m_sync_io_write+0x38>)
    38f0:	4798      	blx	r3
}
    38f2:	b004      	add	sp, #16
    38f4:	bd70      	pop	{r4, r5, r6, pc}
    38f6:	bf00      	nop
    38f8:	000049bc 	.word	0x000049bc
    38fc:	00001921 	.word	0x00001921
    3900:	00003889 	.word	0x00003889

00003904 <_spi_m_sync_io_read>:
{
    3904:	b570      	push	{r4, r5, r6, lr}
    3906:	b084      	sub	sp, #16
    3908:	460e      	mov	r6, r1
    390a:	4615      	mov	r5, r2
	ASSERT(io);
    390c:	4604      	mov	r4, r0
    390e:	2287      	movs	r2, #135	; 0x87
    3910:	4908      	ldr	r1, [pc, #32]	; (3934 <_spi_m_sync_io_read+0x30>)
    3912:	3000      	adds	r0, #0
    3914:	bf18      	it	ne
    3916:	2001      	movne	r0, #1
    3918:	4b07      	ldr	r3, [pc, #28]	; (3938 <_spi_m_sync_io_read+0x34>)
    391a:	4798      	blx	r3
	xfer.rxbuf = buf;
    391c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    391e:	2300      	movs	r3, #0
    3920:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    3922:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    3924:	a901      	add	r1, sp, #4
    3926:	f1a4 000c 	sub.w	r0, r4, #12
    392a:	4b04      	ldr	r3, [pc, #16]	; (393c <_spi_m_sync_io_read+0x38>)
    392c:	4798      	blx	r3
}
    392e:	b004      	add	sp, #16
    3930:	bd70      	pop	{r4, r5, r6, pc}
    3932:	bf00      	nop
    3934:	000049bc 	.word	0x000049bc
    3938:	00001921 	.word	0x00001921
    393c:	00003889 	.word	0x00003889

00003940 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3940:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    3944:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3946:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3948:	f3bf 8f5f 	dmb	sy
    394c:	4770      	bx	lr

0000394e <atomic_leave_critical>:
    394e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    3952:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3954:	f383 8810 	msr	PRIMASK, r3
    3958:	4770      	bx	lr
	...

0000395c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    395c:	b5f0      	push	{r4, r5, r6, r7, lr}
    395e:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    3960:	780b      	ldrb	r3, [r1, #0]
    3962:	f3c3 1441 	ubfx	r4, r3, #5, #2
    3966:	2c01      	cmp	r4, #1
    3968:	d15e      	bne.n	3a28 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    396a:	888c      	ldrh	r4, [r1, #4]
    396c:	4d35      	ldr	r5, [pc, #212]	; (3a44 <cdcdf_acm_req+0xe8>)
    396e:	782d      	ldrb	r5, [r5, #0]
    3970:	42a5      	cmp	r5, r4
    3972:	d003      	beq.n	397c <cdcdf_acm_req+0x20>
    3974:	4d33      	ldr	r5, [pc, #204]	; (3a44 <cdcdf_acm_req+0xe8>)
    3976:	786d      	ldrb	r5, [r5, #1]
    3978:	42a5      	cmp	r5, r4
    397a:	d158      	bne.n	3a2e <cdcdf_acm_req+0xd2>
    397c:	4616      	mov	r6, r2
    397e:	460c      	mov	r4, r1
    3980:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    3982:	f013 0f80 	tst.w	r3, #128	; 0x80
    3986:	d10c      	bne.n	39a2 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    3988:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    398a:	4b2f      	ldr	r3, [pc, #188]	; (3a48 <cdcdf_acm_req+0xec>)
    398c:	4798      	blx	r3
    398e:	4601      	mov	r1, r0
	switch (req->bRequest) {
    3990:	7863      	ldrb	r3, [r4, #1]
    3992:	2b20      	cmp	r3, #32
    3994:	d013      	beq.n	39be <cdcdf_acm_req+0x62>
    3996:	2b22      	cmp	r3, #34	; 0x22
    3998:	d032      	beq.n	3a00 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    399a:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    399e:	b003      	add	sp, #12
    39a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    39a2:	2a01      	cmp	r2, #1
    39a4:	d046      	beq.n	3a34 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    39a6:	784b      	ldrb	r3, [r1, #1]
    39a8:	2b21      	cmp	r3, #33	; 0x21
    39aa:	d145      	bne.n	3a38 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    39ac:	88cb      	ldrh	r3, [r1, #6]
    39ae:	2b07      	cmp	r3, #7
    39b0:	d145      	bne.n	3a3e <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    39b2:	2300      	movs	r3, #0
    39b4:	2207      	movs	r2, #7
    39b6:	4925      	ldr	r1, [pc, #148]	; (3a4c <cdcdf_acm_req+0xf0>)
    39b8:	4c25      	ldr	r4, [pc, #148]	; (3a50 <cdcdf_acm_req+0xf4>)
    39ba:	47a0      	blx	r4
    39bc:	e7ef      	b.n	399e <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    39be:	2f07      	cmp	r7, #7
    39c0:	d12b      	bne.n	3a1a <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    39c2:	b1be      	cbz	r6, 39f4 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    39c4:	6800      	ldr	r0, [r0, #0]
    39c6:	9000      	str	r0, [sp, #0]
    39c8:	888a      	ldrh	r2, [r1, #4]
    39ca:	798b      	ldrb	r3, [r1, #6]
    39cc:	f8ad 2004 	strh.w	r2, [sp, #4]
    39d0:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    39d4:	4b1b      	ldr	r3, [pc, #108]	; (3a44 <cdcdf_acm_req+0xe8>)
    39d6:	691b      	ldr	r3, [r3, #16]
    39d8:	b113      	cbz	r3, 39e0 <cdcdf_acm_req+0x84>
    39da:	4668      	mov	r0, sp
    39dc:	4798      	blx	r3
    39de:	b1f8      	cbz	r0, 3a20 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    39e0:	4b18      	ldr	r3, [pc, #96]	; (3a44 <cdcdf_acm_req+0xe8>)
    39e2:	aa02      	add	r2, sp, #8
    39e4:	e912 0003 	ldmdb	r2, {r0, r1}
    39e8:	6098      	str	r0, [r3, #8]
    39ea:	8199      	strh	r1, [r3, #12]
    39ec:	0c09      	lsrs	r1, r1, #16
    39ee:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    39f0:	2000      	movs	r0, #0
    39f2:	e7d4      	b.n	399e <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    39f4:	2300      	movs	r3, #0
    39f6:	2207      	movs	r2, #7
    39f8:	4628      	mov	r0, r5
    39fa:	4c15      	ldr	r4, [pc, #84]	; (3a50 <cdcdf_acm_req+0xf4>)
    39fc:	47a0      	blx	r4
    39fe:	e7ce      	b.n	399e <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    3a00:	2300      	movs	r3, #0
    3a02:	461a      	mov	r2, r3
    3a04:	4619      	mov	r1, r3
    3a06:	4618      	mov	r0, r3
    3a08:	4d11      	ldr	r5, [pc, #68]	; (3a50 <cdcdf_acm_req+0xf4>)
    3a0a:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    3a0c:	4b0d      	ldr	r3, [pc, #52]	; (3a44 <cdcdf_acm_req+0xe8>)
    3a0e:	695b      	ldr	r3, [r3, #20]
    3a10:	b143      	cbz	r3, 3a24 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    3a12:	8860      	ldrh	r0, [r4, #2]
    3a14:	4798      	blx	r3
		return ERR_NONE;
    3a16:	2000      	movs	r0, #0
    3a18:	e7c1      	b.n	399e <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    3a1a:	f04f 30ff 	mov.w	r0, #4294967295
    3a1e:	e7be      	b.n	399e <cdcdf_acm_req+0x42>
			return ERR_NONE;
    3a20:	2000      	movs	r0, #0
    3a22:	e7bc      	b.n	399e <cdcdf_acm_req+0x42>
		return ERR_NONE;
    3a24:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    3a26:	e7ba      	b.n	399e <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    3a28:	f06f 0009 	mvn.w	r0, #9
    3a2c:	e7b7      	b.n	399e <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    3a2e:	f06f 0009 	mvn.w	r0, #9
    3a32:	e7b4      	b.n	399e <cdcdf_acm_req+0x42>
		return ERR_NONE;
    3a34:	2000      	movs	r0, #0
    3a36:	e7b2      	b.n	399e <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    3a38:	f06f 000c 	mvn.w	r0, #12
    3a3c:	e7af      	b.n	399e <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    3a3e:	f04f 30ff 	mov.w	r0, #4294967295
    3a42:	e7ac      	b.n	399e <cdcdf_acm_req+0x42>
    3a44:	200007ac 	.word	0x200007ac
    3a48:	000042bd 	.word	0x000042bd
    3a4c:	200007b4 	.word	0x200007b4
    3a50:	00003d99 	.word	0x00003d99

00003a54 <cdcdf_acm_ctrl>:
{
    3a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a58:	b083      	sub	sp, #12
    3a5a:	4616      	mov	r6, r2
	switch (ctrl) {
    3a5c:	2901      	cmp	r1, #1
    3a5e:	d066      	beq.n	3b2e <cdcdf_acm_ctrl+0xda>
    3a60:	b141      	cbz	r1, 3a74 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    3a62:	2902      	cmp	r1, #2
    3a64:	bf0c      	ite	eq
    3a66:	f06f 001a 	mvneq.w	r0, #26
    3a6a:	f06f 000c 	mvnne.w	r0, #12
}
    3a6e:	b003      	add	sp, #12
    3a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3a74:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    3a78:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    3a7a:	2800      	cmp	r0, #0
    3a7c:	f000 8085 	beq.w	3b8a <cdcdf_acm_ctrl+0x136>
    3a80:	f10a 3bff 	add.w	fp, sl, #4294967295
    3a84:	f10a 0301 	add.w	r3, sl, #1
    3a88:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3a8a:	4f46      	ldr	r7, [pc, #280]	; (3ba4 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    3a8c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 3bb4 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3a90:	f8df 8124 	ldr.w	r8, [pc, #292]	; 3bb8 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    3a94:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    3a96:	7943      	ldrb	r3, [r0, #5]
    3a98:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    3a9c:	2b02      	cmp	r3, #2
    3a9e:	d002      	beq.n	3aa6 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    3aa0:	f06f 0009 	mvn.w	r0, #9
    3aa4:	e7e3      	b.n	3a6e <cdcdf_acm_ctrl+0x1a>
    3aa6:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    3aaa:	f89b 3000 	ldrb.w	r3, [fp]
    3aae:	429a      	cmp	r2, r3
    3ab0:	d06e      	beq.n	3b90 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    3ab2:	2bff      	cmp	r3, #255	; 0xff
    3ab4:	d16f      	bne.n	3b96 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    3ab6:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    3aba:	2205      	movs	r2, #5
    3abc:	6871      	ldr	r1, [r6, #4]
    3abe:	4b3a      	ldr	r3, [pc, #232]	; (3ba8 <cdcdf_acm_ctrl+0x154>)
    3ac0:	4798      	blx	r3
		while (NULL != ep) {
    3ac2:	4604      	mov	r4, r0
    3ac4:	b1f8      	cbz	r0, 3b06 <cdcdf_acm_ctrl+0xb2>
    3ac6:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    3aca:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    3acc:	7963      	ldrb	r3, [r4, #5]
    3ace:	7922      	ldrb	r2, [r4, #4]
    3ad0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3ad4:	b292      	uxth	r2, r2
    3ad6:	78e1      	ldrb	r1, [r4, #3]
    3ad8:	4628      	mov	r0, r5
    3ada:	47b8      	blx	r7
    3adc:	2800      	cmp	r0, #0
    3ade:	d15d      	bne.n	3b9c <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    3ae0:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    3ae4:	bf14      	ite	ne
    3ae6:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    3aea:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    3aee:	4628      	mov	r0, r5
    3af0:	47c8      	blx	r9
			desc->sod = ep;
    3af2:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    3af4:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3af6:	6871      	ldr	r1, [r6, #4]
    3af8:	4420      	add	r0, r4
    3afa:	47c0      	blx	r8
		while (NULL != ep) {
    3afc:	4604      	mov	r4, r0
    3afe:	2800      	cmp	r0, #0
    3b00:	d1e3      	bne.n	3aca <cdcdf_acm_ctrl+0x76>
    3b02:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    3b06:	6833      	ldr	r3, [r6, #0]
    3b08:	7818      	ldrb	r0, [r3, #0]
    3b0a:	2204      	movs	r2, #4
    3b0c:	6871      	ldr	r1, [r6, #4]
    3b0e:	4418      	add	r0, r3
    3b10:	4b25      	ldr	r3, [pc, #148]	; (3ba8 <cdcdf_acm_ctrl+0x154>)
    3b12:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    3b14:	9b00      	ldr	r3, [sp, #0]
    3b16:	459b      	cmp	fp, r3
    3b18:	d004      	beq.n	3b24 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    3b1a:	2800      	cmp	r0, #0
    3b1c:	d1ba      	bne.n	3a94 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    3b1e:	f06f 0009 	mvn.w	r0, #9
    3b22:	e7a4      	b.n	3a6e <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    3b24:	2201      	movs	r2, #1
    3b26:	4b21      	ldr	r3, [pc, #132]	; (3bac <cdcdf_acm_ctrl+0x158>)
    3b28:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    3b2a:	2000      	movs	r0, #0
    3b2c:	e79f      	b.n	3a6e <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3b2e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    3b30:	b142      	cbz	r2, 3b44 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    3b32:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    3b34:	795b      	ldrb	r3, [r3, #5]
    3b36:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    3b3a:	2b02      	cmp	r3, #2
    3b3c:	d002      	beq.n	3b44 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    3b3e:	f06f 0009 	mvn.w	r0, #9
    3b42:	e794      	b.n	3a6e <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    3b44:	7823      	ldrb	r3, [r4, #0]
    3b46:	2bff      	cmp	r3, #255	; 0xff
    3b48:	d008      	beq.n	3b5c <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    3b4a:	23ff      	movs	r3, #255	; 0xff
    3b4c:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    3b4e:	78a0      	ldrb	r0, [r4, #2]
    3b50:	4298      	cmp	r0, r3
    3b52:	d003      	beq.n	3b5c <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3b54:	4b16      	ldr	r3, [pc, #88]	; (3bb0 <cdcdf_acm_ctrl+0x15c>)
    3b56:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3b58:	23ff      	movs	r3, #255	; 0xff
    3b5a:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    3b5c:	7863      	ldrb	r3, [r4, #1]
    3b5e:	2bff      	cmp	r3, #255	; 0xff
    3b60:	d008      	beq.n	3b74 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    3b62:	23ff      	movs	r3, #255	; 0xff
    3b64:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    3b66:	78e0      	ldrb	r0, [r4, #3]
    3b68:	4298      	cmp	r0, r3
    3b6a:	d003      	beq.n	3b74 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3b6c:	4b10      	ldr	r3, [pc, #64]	; (3bb0 <cdcdf_acm_ctrl+0x15c>)
    3b6e:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3b70:	23ff      	movs	r3, #255	; 0xff
    3b72:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    3b74:	7920      	ldrb	r0, [r4, #4]
    3b76:	28ff      	cmp	r0, #255	; 0xff
    3b78:	d003      	beq.n	3b82 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    3b7a:	4b0d      	ldr	r3, [pc, #52]	; (3bb0 <cdcdf_acm_ctrl+0x15c>)
    3b7c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    3b7e:	23ff      	movs	r3, #255	; 0xff
    3b80:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    3b82:	2000      	movs	r0, #0
    3b84:	4b09      	ldr	r3, [pc, #36]	; (3bac <cdcdf_acm_ctrl+0x158>)
    3b86:	7158      	strb	r0, [r3, #5]
    3b88:	e771      	b.n	3a6e <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    3b8a:	f06f 0009 	mvn.w	r0, #9
    3b8e:	e76e      	b.n	3a6e <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    3b90:	f06f 0011 	mvn.w	r0, #17
    3b94:	e76b      	b.n	3a6e <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    3b96:	f06f 001b 	mvn.w	r0, #27
    3b9a:	e768      	b.n	3a6e <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    3b9c:	f06f 0013 	mvn.w	r0, #19
    3ba0:	e765      	b.n	3a6e <cdcdf_acm_ctrl+0x1a>
    3ba2:	bf00      	nop
    3ba4:	0000166d 	.word	0x0000166d
    3ba8:	000042dd 	.word	0x000042dd
    3bac:	200007ac 	.word	0x200007ac
    3bb0:	000016d5 	.word	0x000016d5
    3bb4:	00001701 	.word	0x00001701
    3bb8:	00004317 	.word	0x00004317

00003bbc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    3bbc:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    3bbe:	4b0a      	ldr	r3, [pc, #40]	; (3be8 <cdcdf_acm_init+0x2c>)
    3bc0:	4798      	blx	r3
    3bc2:	2801      	cmp	r0, #1
    3bc4:	d80c      	bhi.n	3be0 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    3bc6:	4809      	ldr	r0, [pc, #36]	; (3bec <cdcdf_acm_init+0x30>)
    3bc8:	4b09      	ldr	r3, [pc, #36]	; (3bf0 <cdcdf_acm_init+0x34>)
    3bca:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    3bcc:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    3bce:	3018      	adds	r0, #24
    3bd0:	4b08      	ldr	r3, [pc, #32]	; (3bf4 <cdcdf_acm_init+0x38>)
    3bd2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    3bd4:	4908      	ldr	r1, [pc, #32]	; (3bf8 <cdcdf_acm_init+0x3c>)
    3bd6:	2001      	movs	r0, #1
    3bd8:	4b08      	ldr	r3, [pc, #32]	; (3bfc <cdcdf_acm_init+0x40>)
    3bda:	4798      	blx	r3
	return ERR_NONE;
    3bdc:	2000      	movs	r0, #0
    3bde:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    3be0:	f06f 0010 	mvn.w	r0, #16
}
    3be4:	bd08      	pop	{r3, pc}
    3be6:	bf00      	nop
    3be8:	000042c9 	.word	0x000042c9
    3bec:	200007ac 	.word	0x200007ac
    3bf0:	00003a55 	.word	0x00003a55
    3bf4:	00004269 	.word	0x00004269
    3bf8:	20000060 	.word	0x20000060
    3bfc:	000041d5 	.word	0x000041d5

00003c00 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    3c00:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3c02:	4b07      	ldr	r3, [pc, #28]	; (3c20 <usbdc_unconfig+0x20>)
    3c04:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    3c06:	b14c      	cbz	r4, 3c1c <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    3c08:	2600      	movs	r6, #0
    3c0a:	2501      	movs	r5, #1
    3c0c:	6863      	ldr	r3, [r4, #4]
    3c0e:	4632      	mov	r2, r6
    3c10:	4629      	mov	r1, r5
    3c12:	4620      	mov	r0, r4
    3c14:	4798      	blx	r3
		func = func->next;
    3c16:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    3c18:	2c00      	cmp	r4, #0
    3c1a:	d1f7      	bne.n	3c0c <usbdc_unconfig+0xc>
    3c1c:	bd70      	pop	{r4, r5, r6, pc}
    3c1e:	bf00      	nop
    3c20:	200007d0 	.word	0x200007d0

00003c24 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    3c24:	b570      	push	{r4, r5, r6, lr}
    3c26:	4606      	mov	r6, r0
    3c28:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    3c2a:	4b07      	ldr	r3, [pc, #28]	; (3c48 <usbdc_change_notify+0x24>)
    3c2c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    3c2e:	b91c      	cbnz	r4, 3c38 <usbdc_change_notify+0x14>
    3c30:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    3c32:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    3c34:	2c00      	cmp	r4, #0
    3c36:	d0fb      	beq.n	3c30 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    3c38:	6863      	ldr	r3, [r4, #4]
    3c3a:	2b00      	cmp	r3, #0
    3c3c:	d0f9      	beq.n	3c32 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    3c3e:	4629      	mov	r1, r5
    3c40:	4630      	mov	r0, r6
    3c42:	4798      	blx	r3
    3c44:	e7f5      	b.n	3c32 <usbdc_change_notify+0xe>
    3c46:	bf00      	nop
    3c48:	200007d0 	.word	0x200007d0

00003c4c <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c4e:	4607      	mov	r7, r0
    3c50:	460e      	mov	r6, r1
    3c52:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3c54:	4b0c      	ldr	r3, [pc, #48]	; (3c88 <usbdc_request_handler+0x3c>)
    3c56:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    3c58:	b91c      	cbnz	r4, 3c62 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    3c5a:	2000      	movs	r0, #0
    3c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    3c5e:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    3c60:	b16c      	cbz	r4, 3c7e <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    3c62:	6863      	ldr	r3, [r4, #4]
    3c64:	2b00      	cmp	r3, #0
    3c66:	d0fa      	beq.n	3c5e <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    3c68:	462a      	mov	r2, r5
    3c6a:	4631      	mov	r1, r6
    3c6c:	4638      	mov	r0, r7
    3c6e:	4798      	blx	r3
			if (0 == rc) {
    3c70:	b138      	cbz	r0, 3c82 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    3c72:	f110 0f0a 	cmn.w	r0, #10
    3c76:	d0f2      	beq.n	3c5e <usbdc_request_handler+0x12>
				return -1;
    3c78:	f04f 30ff 	mov.w	r0, #4294967295
}
    3c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    3c7e:	2000      	movs	r0, #0
    3c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    3c82:	2001      	movs	r0, #1
    3c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c86:	bf00      	nop
    3c88:	200007d0 	.word	0x200007d0

00003c8c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    3c8c:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    3c8e:	4b06      	ldr	r3, [pc, #24]	; (3ca8 <usbd_sof_cb+0x1c>)
    3c90:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    3c92:	b91c      	cbnz	r4, 3c9c <usbd_sof_cb+0x10>
    3c94:	bd10      	pop	{r4, pc}
		sof = sof->next;
    3c96:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    3c98:	2c00      	cmp	r4, #0
    3c9a:	d0fb      	beq.n	3c94 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    3c9c:	6863      	ldr	r3, [r4, #4]
    3c9e:	2b00      	cmp	r3, #0
    3ca0:	d0f9      	beq.n	3c96 <usbd_sof_cb+0xa>
			sof->cb();
    3ca2:	4798      	blx	r3
    3ca4:	e7f7      	b.n	3c96 <usbd_sof_cb+0xa>
    3ca6:	bf00      	nop
    3ca8:	200007d0 	.word	0x200007d0

00003cac <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    3cac:	b510      	push	{r4, lr}
    3cae:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    3cb0:	b119      	cbz	r1, 3cba <usbdc_cb_ctl_done+0xe>
    3cb2:	2901      	cmp	r1, #1
    3cb4:	d026      	beq.n	3d04 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    3cb6:	2000      	movs	r0, #0
    3cb8:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    3cba:	7813      	ldrb	r3, [r2, #0]
    3cbc:	2b00      	cmp	r3, #0
    3cbe:	d1fa      	bne.n	3cb6 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    3cc0:	7853      	ldrb	r3, [r2, #1]
    3cc2:	2b05      	cmp	r3, #5
    3cc4:	d00f      	beq.n	3ce6 <usbdc_cb_ctl_done+0x3a>
    3cc6:	2b09      	cmp	r3, #9
    3cc8:	d1f5      	bne.n	3cb6 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    3cca:	8852      	ldrh	r2, [r2, #2]
    3ccc:	4b10      	ldr	r3, [pc, #64]	; (3d10 <usbdc_cb_ctl_done+0x64>)
    3cce:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    3cd0:	8863      	ldrh	r3, [r4, #2]
    3cd2:	2b00      	cmp	r3, #0
    3cd4:	bf14      	ite	ne
    3cd6:	2104      	movne	r1, #4
    3cd8:	2103      	moveq	r1, #3
    3cda:	4b0d      	ldr	r3, [pc, #52]	; (3d10 <usbdc_cb_ctl_done+0x64>)
    3cdc:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3cde:	2001      	movs	r0, #1
    3ce0:	4b0c      	ldr	r3, [pc, #48]	; (3d14 <usbdc_cb_ctl_done+0x68>)
    3ce2:	4798      	blx	r3
    3ce4:	e7e7      	b.n	3cb6 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    3ce6:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    3ce8:	b2c0      	uxtb	r0, r0
    3cea:	4b0b      	ldr	r3, [pc, #44]	; (3d18 <usbdc_cb_ctl_done+0x6c>)
    3cec:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    3cee:	8863      	ldrh	r3, [r4, #2]
    3cf0:	2b00      	cmp	r3, #0
    3cf2:	bf14      	ite	ne
    3cf4:	2103      	movne	r1, #3
    3cf6:	2102      	moveq	r1, #2
    3cf8:	4b05      	ldr	r3, [pc, #20]	; (3d10 <usbdc_cb_ctl_done+0x64>)
    3cfa:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3cfc:	2001      	movs	r0, #1
    3cfe:	4b05      	ldr	r3, [pc, #20]	; (3d14 <usbdc_cb_ctl_done+0x68>)
    3d00:	4798      	blx	r3
    3d02:	e7d8      	b.n	3cb6 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    3d04:	2201      	movs	r2, #1
    3d06:	4621      	mov	r1, r4
    3d08:	2000      	movs	r0, #0
    3d0a:	4b04      	ldr	r3, [pc, #16]	; (3d1c <usbdc_cb_ctl_done+0x70>)
    3d0c:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    3d0e:	e7d2      	b.n	3cb6 <usbdc_cb_ctl_done+0xa>
    3d10:	200007d0 	.word	0x200007d0
    3d14:	00003c25 	.word	0x00003c25
    3d18:	00001661 	.word	0x00001661
    3d1c:	00003c4d 	.word	0x00003c4d

00003d20 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    3d20:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    3d22:	4b0d      	ldr	r3, [pc, #52]	; (3d58 <usbdc_reset+0x38>)
    3d24:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    3d26:	4d0d      	ldr	r5, [pc, #52]	; (3d5c <usbdc_reset+0x3c>)
    3d28:	2602      	movs	r6, #2
    3d2a:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    3d2c:	2400      	movs	r4, #0
    3d2e:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    3d30:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    3d32:	4620      	mov	r0, r4
    3d34:	4b0a      	ldr	r3, [pc, #40]	; (3d60 <usbdc_reset+0x40>)
    3d36:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    3d38:	7f28      	ldrb	r0, [r5, #28]
    3d3a:	4b0a      	ldr	r3, [pc, #40]	; (3d64 <usbdc_reset+0x44>)
    3d3c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    3d3e:	4a0a      	ldr	r2, [pc, #40]	; (3d68 <usbdc_reset+0x48>)
    3d40:	4621      	mov	r1, r4
    3d42:	4620      	mov	r0, r4
    3d44:	4d09      	ldr	r5, [pc, #36]	; (3d6c <usbdc_reset+0x4c>)
    3d46:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3d48:	4a09      	ldr	r2, [pc, #36]	; (3d70 <usbdc_reset+0x50>)
    3d4a:	4631      	mov	r1, r6
    3d4c:	4620      	mov	r0, r4
    3d4e:	47a8      	blx	r5
	usb_d_ep_enable(0);
    3d50:	4620      	mov	r0, r4
    3d52:	4b08      	ldr	r3, [pc, #32]	; (3d74 <usbdc_reset+0x54>)
    3d54:	4798      	blx	r3
    3d56:	bd70      	pop	{r4, r5, r6, pc}
    3d58:	00003c01 	.word	0x00003c01
    3d5c:	200007d0 	.word	0x200007d0
    3d60:	000016d5 	.word	0x000016d5
    3d64:	000016c1 	.word	0x000016c1
    3d68:	00003db9 	.word	0x00003db9
    3d6c:	000018d5 	.word	0x000018d5
    3d70:	00003cad 	.word	0x00003cad
    3d74:	00001701 	.word	0x00001701

00003d78 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    3d78:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    3d7a:	b110      	cbz	r0, 3d82 <usbd_event_cb+0xa>
    3d7c:	2801      	cmp	r0, #1
    3d7e:	d004      	beq.n	3d8a <usbd_event_cb+0x12>
    3d80:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    3d82:	2000      	movs	r0, #0
    3d84:	4b02      	ldr	r3, [pc, #8]	; (3d90 <usbd_event_cb+0x18>)
    3d86:	4798      	blx	r3
		break;
    3d88:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    3d8a:	4b02      	ldr	r3, [pc, #8]	; (3d94 <usbd_event_cb+0x1c>)
    3d8c:	4798      	blx	r3
    3d8e:	bd08      	pop	{r3, pc}
    3d90:	00003c25 	.word	0x00003c25
    3d94:	00003d21 	.word	0x00003d21

00003d98 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    3d98:	b500      	push	{lr}
    3d9a:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    3d9c:	9101      	str	r1, [sp, #4]
    3d9e:	9202      	str	r2, [sp, #8]
    3da0:	f88d 000c 	strb.w	r0, [sp, #12]
    3da4:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    3da8:	a801      	add	r0, sp, #4
    3daa:	4b02      	ldr	r3, [pc, #8]	; (3db4 <usbdc_xfer+0x1c>)
    3dac:	4798      	blx	r3
}
    3dae:	b005      	add	sp, #20
    3db0:	f85d fb04 	ldr.w	pc, [sp], #4
    3db4:	0000174d 	.word	0x0000174d

00003db8 <usbdc_cb_ctl_req>:
{
    3db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3dbc:	b083      	sub	sp, #12
    3dbe:	4605      	mov	r5, r0
    3dc0:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3dc2:	2200      	movs	r2, #0
    3dc4:	4b9b      	ldr	r3, [pc, #620]	; (4034 <usbdc_cb_ctl_req+0x27c>)
    3dc6:	4798      	blx	r3
    3dc8:	f1b0 3fff 	cmp.w	r0, #4294967295
    3dcc:	d00b      	beq.n	3de6 <usbdc_cb_ctl_req+0x2e>
    3dce:	2801      	cmp	r0, #1
    3dd0:	f000 81e3 	beq.w	419a <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    3dd4:	7823      	ldrb	r3, [r4, #0]
    3dd6:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    3dda:	d008      	beq.n	3dee <usbdc_cb_ctl_req+0x36>
    3ddc:	2a80      	cmp	r2, #128	; 0x80
    3dde:	f000 80f4 	beq.w	3fca <usbdc_cb_ctl_req+0x212>
		return false;
    3de2:	2000      	movs	r0, #0
    3de4:	e000      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		return false;
    3de6:	2000      	movs	r0, #0
}
    3de8:	b003      	add	sp, #12
    3dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    3dee:	7862      	ldrb	r2, [r4, #1]
    3df0:	3a01      	subs	r2, #1
    3df2:	2a0a      	cmp	r2, #10
    3df4:	f200 81d3 	bhi.w	419e <usbdc_cb_ctl_req+0x3e6>
    3df8:	e8df f012 	tbh	[pc, r2, lsl #1]
    3dfc:	01d10060 	.word	0x01d10060
    3e00:	01d10076 	.word	0x01d10076
    3e04:	01d1000b 	.word	0x01d1000b
    3e08:	01d101d1 	.word	0x01d101d1
    3e0c:	01d10015 	.word	0x01d10015
    3e10:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3e12:	2301      	movs	r3, #1
    3e14:	2200      	movs	r2, #0
    3e16:	4611      	mov	r1, r2
    3e18:	4628      	mov	r0, r5
    3e1a:	4c87      	ldr	r4, [pc, #540]	; (4038 <usbdc_cb_ctl_req+0x280>)
    3e1c:	47a0      	blx	r4
    3e1e:	fab0 f080 	clz	r0, r0
    3e22:	0940      	lsrs	r0, r0, #5
    3e24:	e7e0      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    3e26:	8862      	ldrh	r2, [r4, #2]
    3e28:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    3e2a:	b1ca      	cbz	r2, 3e60 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    3e2c:	4b83      	ldr	r3, [pc, #524]	; (403c <usbdc_cb_ctl_req+0x284>)
    3e2e:	681b      	ldr	r3, [r3, #0]
    3e30:	6859      	ldr	r1, [r3, #4]
    3e32:	6818      	ldr	r0, [r3, #0]
    3e34:	4b82      	ldr	r3, [pc, #520]	; (4040 <usbdc_cb_ctl_req+0x288>)
    3e36:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3e38:	2800      	cmp	r0, #0
    3e3a:	f000 81be 	beq.w	41ba <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    3e3e:	78c2      	ldrb	r2, [r0, #3]
    3e40:	7881      	ldrb	r1, [r0, #2]
    3e42:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    3e46:	fa10 f181 	uxtah	r1, r0, r1
    3e4a:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3e4c:	2204      	movs	r2, #4
    3e4e:	4b7d      	ldr	r3, [pc, #500]	; (4044 <usbdc_cb_ctl_req+0x28c>)
    3e50:	4798      	blx	r3
    3e52:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    3e54:	b130      	cbz	r0, 3e64 <usbdc_cb_ctl_req+0xac>
    3e56:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3e58:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 403c <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3e5c:	4f79      	ldr	r7, [pc, #484]	; (4044 <usbdc_cb_ctl_req+0x28c>)
    3e5e:	e018      	b.n	3e92 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    3e60:	4b79      	ldr	r3, [pc, #484]	; (4048 <usbdc_cb_ctl_req+0x290>)
    3e62:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3e64:	2301      	movs	r3, #1
    3e66:	2200      	movs	r2, #0
    3e68:	4611      	mov	r1, r2
    3e6a:	4628      	mov	r0, r5
    3e6c:	4c72      	ldr	r4, [pc, #456]	; (4038 <usbdc_cb_ctl_req+0x280>)
    3e6e:	47a0      	blx	r4
    3e70:	fab0 f080 	clz	r0, r0
    3e74:	0940      	lsrs	r0, r0, #5
    3e76:	e7b7      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    3e78:	464c      	mov	r4, r9
    3e7a:	e000      	b.n	3e7e <usbdc_cb_ctl_req+0xc6>
    3e7c:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    3e7e:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    3e80:	7803      	ldrb	r3, [r0, #0]
    3e82:	4418      	add	r0, r3
    3e84:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3e86:	2204      	movs	r2, #4
    3e88:	9901      	ldr	r1, [sp, #4]
    3e8a:	47b8      	blx	r7
    3e8c:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    3e8e:	2800      	cmp	r0, #0
    3e90:	d0e8      	beq.n	3e64 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    3e92:	f890 9002 	ldrb.w	r9, [r0, #2]
    3e96:	45a1      	cmp	r9, r4
    3e98:	d0f1      	beq.n	3e7e <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3e9a:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    3e9e:	2c00      	cmp	r4, #0
    3ea0:	d0ea      	beq.n	3e78 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    3ea2:	2600      	movs	r6, #0
    3ea4:	6863      	ldr	r3, [r4, #4]
    3ea6:	466a      	mov	r2, sp
    3ea8:	4631      	mov	r1, r6
    3eaa:	4620      	mov	r0, r4
    3eac:	4798      	blx	r3
    3eae:	2800      	cmp	r0, #0
    3eb0:	d0e4      	beq.n	3e7c <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    3eb2:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    3eb4:	2c00      	cmp	r4, #0
    3eb6:	d1f5      	bne.n	3ea4 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    3eb8:	464c      	mov	r4, r9
    3eba:	e7e0      	b.n	3e7e <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3ebc:	f003 031f 	and.w	r3, r3, #31
    3ec0:	2b02      	cmp	r3, #2
    3ec2:	f040 816e 	bne.w	41a2 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    3ec6:	88e3      	ldrh	r3, [r4, #6]
    3ec8:	b10b      	cbz	r3, 3ece <usbdc_cb_ctl_req+0x116>
			return false;
    3eca:	2000      	movs	r0, #0
    3ecc:	e78c      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    3ece:	88a0      	ldrh	r0, [r4, #4]
    3ed0:	2100      	movs	r1, #0
    3ed2:	b2c0      	uxtb	r0, r0
    3ed4:	4b5d      	ldr	r3, [pc, #372]	; (404c <usbdc_cb_ctl_req+0x294>)
    3ed6:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3ed8:	2301      	movs	r3, #1
    3eda:	2200      	movs	r2, #0
    3edc:	4611      	mov	r1, r2
    3ede:	4628      	mov	r0, r5
    3ee0:	4c55      	ldr	r4, [pc, #340]	; (4038 <usbdc_cb_ctl_req+0x280>)
    3ee2:	47a0      	blx	r4
		return true;
    3ee4:	2001      	movs	r0, #1
    3ee6:	e77f      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3ee8:	f003 031f 	and.w	r3, r3, #31
    3eec:	2b02      	cmp	r3, #2
    3eee:	f040 815a 	bne.w	41a6 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    3ef2:	88e3      	ldrh	r3, [r4, #6]
    3ef4:	b10b      	cbz	r3, 3efa <usbdc_cb_ctl_req+0x142>
			return false;
    3ef6:	2000      	movs	r0, #0
    3ef8:	e776      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    3efa:	88a0      	ldrh	r0, [r4, #4]
    3efc:	2101      	movs	r1, #1
    3efe:	b2c0      	uxtb	r0, r0
    3f00:	4b52      	ldr	r3, [pc, #328]	; (404c <usbdc_cb_ctl_req+0x294>)
    3f02:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3f04:	2301      	movs	r3, #1
    3f06:	2200      	movs	r2, #0
    3f08:	4611      	mov	r1, r2
    3f0a:	4628      	mov	r0, r5
    3f0c:	4c4a      	ldr	r4, [pc, #296]	; (4038 <usbdc_cb_ctl_req+0x280>)
    3f0e:	47a0      	blx	r4
		return true;
    3f10:	2001      	movs	r0, #1
    3f12:	e769      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    3f14:	8866      	ldrh	r6, [r4, #2]
    3f16:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    3f18:	4a48      	ldr	r2, [pc, #288]	; (403c <usbdc_cb_ctl_req+0x284>)
    3f1a:	6813      	ldr	r3, [r2, #0]
    3f1c:	7ed2      	ldrb	r2, [r2, #27]
    3f1e:	6859      	ldr	r1, [r3, #4]
    3f20:	6818      	ldr	r0, [r3, #0]
    3f22:	4b47      	ldr	r3, [pc, #284]	; (4040 <usbdc_cb_ctl_req+0x288>)
    3f24:	4798      	blx	r3
	if (NULL == ifc) {
    3f26:	2800      	cmp	r0, #0
    3f28:	d045      	beq.n	3fb6 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    3f2a:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    3f2c:	78c2      	ldrb	r2, [r0, #3]
    3f2e:	7881      	ldrb	r1, [r0, #2]
    3f30:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3f34:	fa10 f181 	uxtah	r1, r0, r1
    3f38:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    3f3a:	2204      	movs	r2, #4
    3f3c:	4b41      	ldr	r3, [pc, #260]	; (4044 <usbdc_cb_ctl_req+0x28c>)
    3f3e:	4798      	blx	r3
    3f40:	4603      	mov	r3, r0
    3f42:	2800      	cmp	r0, #0
    3f44:	d039      	beq.n	3fba <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3f46:	2704      	movs	r7, #4
    3f48:	4d3e      	ldr	r5, [pc, #248]	; (4044 <usbdc_cb_ctl_req+0x28c>)
    3f4a:	e008      	b.n	3f5e <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    3f4c:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    3f4e:	7803      	ldrb	r3, [r0, #0]
    3f50:	4418      	add	r0, r3
    3f52:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3f54:	463a      	mov	r2, r7
    3f56:	9901      	ldr	r1, [sp, #4]
    3f58:	47a8      	blx	r5
		if (NULL == ifc) {
    3f5a:	4603      	mov	r3, r0
    3f5c:	b378      	cbz	r0, 3fbe <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    3f5e:	789a      	ldrb	r2, [r3, #2]
    3f60:	42a2      	cmp	r2, r4
    3f62:	d1f3      	bne.n	3f4c <usbdc_cb_ctl_req+0x194>
    3f64:	78da      	ldrb	r2, [r3, #3]
    3f66:	42b2      	cmp	r2, r6
    3f68:	d1f0      	bne.n	3f4c <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    3f6a:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    3f6c:	4b33      	ldr	r3, [pc, #204]	; (403c <usbdc_cb_ctl_req+0x284>)
    3f6e:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    3f70:	b33d      	cbz	r5, 3fc2 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3f72:	2701      	movs	r7, #1
    3f74:	686b      	ldr	r3, [r5, #4]
    3f76:	466a      	mov	r2, sp
    3f78:	4639      	mov	r1, r7
    3f7a:	4628      	mov	r0, r5
    3f7c:	4798      	blx	r3
    3f7e:	b120      	cbz	r0, 3f8a <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    3f80:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    3f82:	2d00      	cmp	r5, #0
    3f84:	d1f6      	bne.n	3f74 <usbdc_cb_ctl_req+0x1bc>
	return false;
    3f86:	2000      	movs	r0, #0
    3f88:	e72e      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    3f8a:	686b      	ldr	r3, [r5, #4]
    3f8c:	466a      	mov	r2, sp
    3f8e:	2100      	movs	r1, #0
    3f90:	4628      	mov	r0, r5
    3f92:	4798      	blx	r3
    3f94:	b9b8      	cbnz	r0, 3fc6 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    3f96:	b136      	cbz	r6, 3fa6 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    3f98:	4a28      	ldr	r2, [pc, #160]	; (403c <usbdc_cb_ctl_req+0x284>)
    3f9a:	2301      	movs	r3, #1
    3f9c:	fa03 f404 	lsl.w	r4, r3, r4
    3fa0:	7f53      	ldrb	r3, [r2, #29]
    3fa2:	4323      	orrs	r3, r4
    3fa4:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    3fa6:	2300      	movs	r3, #0
    3fa8:	461a      	mov	r2, r3
    3faa:	4619      	mov	r1, r3
    3fac:	4618      	mov	r0, r3
    3fae:	4c22      	ldr	r4, [pc, #136]	; (4038 <usbdc_cb_ctl_req+0x280>)
    3fb0:	47a0      	blx	r4
			return true;
    3fb2:	2001      	movs	r0, #1
    3fb4:	e718      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		return false;
    3fb6:	2000      	movs	r0, #0
    3fb8:	e716      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		return false;
    3fba:	2000      	movs	r0, #0
    3fbc:	e714      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
			return false;
    3fbe:	2000      	movs	r0, #0
    3fc0:	e712      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
	return false;
    3fc2:	2000      	movs	r0, #0
    3fc4:	e710      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
			return false;
    3fc6:	2000      	movs	r0, #0
    3fc8:	e70e      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    3fca:	7862      	ldrb	r2, [r4, #1]
    3fcc:	2a0a      	cmp	r2, #10
    3fce:	f200 80ec 	bhi.w	41aa <usbdc_cb_ctl_req+0x3f2>
    3fd2:	e8df f012 	tbh	[pc, r2, lsl #1]
    3fd6:	008e      	.short	0x008e
    3fd8:	00ea00ea 	.word	0x00ea00ea
    3fdc:	00ea00ea 	.word	0x00ea00ea
    3fe0:	000b00ea 	.word	0x000b00ea
    3fe4:	008200ea 	.word	0x008200ea
    3fe8:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    3fec:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    3fee:	0a13      	lsrs	r3, r2, #8
    3ff0:	2b02      	cmp	r3, #2
    3ff2:	d02d      	beq.n	4050 <usbdc_cb_ctl_req+0x298>
    3ff4:	2b03      	cmp	r3, #3
    3ff6:	d050      	beq.n	409a <usbdc_cb_ctl_req+0x2e2>
    3ff8:	2b01      	cmp	r3, #1
    3ffa:	d001      	beq.n	4000 <usbdc_cb_ctl_req+0x248>
	return false;
    3ffc:	2000      	movs	r0, #0
    3ffe:	e6f3      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    4000:	88e2      	ldrh	r2, [r4, #6]
    4002:	2a12      	cmp	r2, #18
    4004:	bf28      	it	cs
    4006:	2212      	movcs	r2, #18
    4008:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    400a:	4b0c      	ldr	r3, [pc, #48]	; (403c <usbdc_cb_ctl_req+0x284>)
    400c:	681b      	ldr	r3, [r3, #0]
    400e:	2201      	movs	r2, #1
    4010:	6859      	ldr	r1, [r3, #4]
    4012:	6818      	ldr	r0, [r3, #0]
    4014:	4b0b      	ldr	r3, [pc, #44]	; (4044 <usbdc_cb_ctl_req+0x28c>)
    4016:	4798      	blx	r3
	if (!dev_desc) {
    4018:	4601      	mov	r1, r0
    401a:	2800      	cmp	r0, #0
    401c:	f000 80c7 	beq.w	41ae <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    4020:	2300      	movs	r3, #0
    4022:	4622      	mov	r2, r4
    4024:	4628      	mov	r0, r5
    4026:	4c04      	ldr	r4, [pc, #16]	; (4038 <usbdc_cb_ctl_req+0x280>)
    4028:	47a0      	blx	r4
    402a:	fab0 f080 	clz	r0, r0
    402e:	0940      	lsrs	r0, r0, #5
    4030:	e6da      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
    4032:	bf00      	nop
    4034:	00003c4d 	.word	0x00003c4d
    4038:	00003d99 	.word	0x00003d99
    403c:	200007d0 	.word	0x200007d0
    4040:	0000435d 	.word	0x0000435d
    4044:	000042dd 	.word	0x000042dd
    4048:	00003c01 	.word	0x00003c01
    404c:	0000186d 	.word	0x0000186d
	uint16_t length   = req->wLength;
    4050:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4052:	4b5b      	ldr	r3, [pc, #364]	; (41c0 <usbdc_cb_ctl_req+0x408>)
    4054:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    4056:	681b      	ldr	r3, [r3, #0]
    4058:	3201      	adds	r2, #1
    405a:	b2d2      	uxtb	r2, r2
    405c:	6859      	ldr	r1, [r3, #4]
    405e:	6818      	ldr	r0, [r3, #0]
    4060:	4b58      	ldr	r3, [pc, #352]	; (41c4 <usbdc_cb_ctl_req+0x40c>)
    4062:	4798      	blx	r3
	if (NULL == cfg_desc) {
    4064:	4601      	mov	r1, r0
    4066:	2800      	cmp	r0, #0
    4068:	f000 80a3 	beq.w	41b2 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    406c:	78c3      	ldrb	r3, [r0, #3]
    406e:	7882      	ldrb	r2, [r0, #2]
    4070:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    4074:	b292      	uxth	r2, r2
	if (length <= total_len) {
    4076:	4294      	cmp	r4, r2
    4078:	d90d      	bls.n	4096 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    407a:	3e01      	subs	r6, #1
    407c:	4226      	tst	r6, r4
    407e:	bf0c      	ite	eq
    4080:	2301      	moveq	r3, #1
    4082:	2300      	movne	r3, #0
		length = total_len;
    4084:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    4086:	4622      	mov	r2, r4
    4088:	4628      	mov	r0, r5
    408a:	4c4f      	ldr	r4, [pc, #316]	; (41c8 <usbdc_cb_ctl_req+0x410>)
    408c:	47a0      	blx	r4
    408e:	fab0 f080 	clz	r0, r0
    4092:	0940      	lsrs	r0, r0, #5
    4094:	e6a8      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    4096:	2300      	movs	r3, #0
    4098:	e7f5      	b.n	4086 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    409a:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    409c:	4b48      	ldr	r3, [pc, #288]	; (41c0 <usbdc_cb_ctl_req+0x408>)
    409e:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    40a0:	681b      	ldr	r3, [r3, #0]
    40a2:	b2d2      	uxtb	r2, r2
    40a4:	6859      	ldr	r1, [r3, #4]
    40a6:	6818      	ldr	r0, [r3, #0]
    40a8:	4b48      	ldr	r3, [pc, #288]	; (41cc <usbdc_cb_ctl_req+0x414>)
    40aa:	4798      	blx	r3
	if (NULL == str_desc) {
    40ac:	4601      	mov	r1, r0
    40ae:	2800      	cmp	r0, #0
    40b0:	f000 8081 	beq.w	41b6 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    40b4:	7802      	ldrb	r2, [r0, #0]
    40b6:	4294      	cmp	r4, r2
    40b8:	d90d      	bls.n	40d6 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    40ba:	3e01      	subs	r6, #1
    40bc:	4226      	tst	r6, r4
    40be:	bf0c      	ite	eq
    40c0:	2301      	moveq	r3, #1
    40c2:	2300      	movne	r3, #0
		length = str_desc[0];
    40c4:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    40c6:	4622      	mov	r2, r4
    40c8:	4628      	mov	r0, r5
    40ca:	4c3f      	ldr	r4, [pc, #252]	; (41c8 <usbdc_cb_ctl_req+0x410>)
    40cc:	47a0      	blx	r4
    40ce:	fab0 f080 	clz	r0, r0
    40d2:	0940      	lsrs	r0, r0, #5
    40d4:	e688      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    40d6:	2300      	movs	r3, #0
    40d8:	e7f5      	b.n	40c6 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    40da:	4939      	ldr	r1, [pc, #228]	; (41c0 <usbdc_cb_ctl_req+0x408>)
    40dc:	694b      	ldr	r3, [r1, #20]
    40de:	7eca      	ldrb	r2, [r1, #27]
    40e0:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    40e2:	2300      	movs	r3, #0
    40e4:	2201      	movs	r2, #1
    40e6:	6949      	ldr	r1, [r1, #20]
    40e8:	4628      	mov	r0, r5
    40ea:	4c37      	ldr	r4, [pc, #220]	; (41c8 <usbdc_cb_ctl_req+0x410>)
    40ec:	47a0      	blx	r4
		return true;
    40ee:	2001      	movs	r0, #1
    40f0:	e67a      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    40f2:	f003 031f 	and.w	r3, r3, #31
    40f6:	2b01      	cmp	r3, #1
    40f8:	d903      	bls.n	4102 <usbdc_cb_ctl_req+0x34a>
    40fa:	2b02      	cmp	r3, #2
    40fc:	d010      	beq.n	4120 <usbdc_cb_ctl_req+0x368>
		return false;
    40fe:	2000      	movs	r0, #0
    4100:	e672      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		st = 0;
    4102:	2300      	movs	r3, #0
    4104:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    4106:	492e      	ldr	r1, [pc, #184]	; (41c0 <usbdc_cb_ctl_req+0x408>)
    4108:	694b      	ldr	r3, [r1, #20]
    410a:	f8bd 2000 	ldrh.w	r2, [sp]
    410e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    4110:	2300      	movs	r3, #0
    4112:	2202      	movs	r2, #2
    4114:	6949      	ldr	r1, [r1, #20]
    4116:	4628      	mov	r0, r5
    4118:	4c2b      	ldr	r4, [pc, #172]	; (41c8 <usbdc_cb_ctl_req+0x410>)
    411a:	47a0      	blx	r4
	return true;
    411c:	2001      	movs	r0, #1
    411e:	e663      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    4120:	88a0      	ldrh	r0, [r4, #4]
    4122:	2102      	movs	r1, #2
    4124:	b2c0      	uxtb	r0, r0
    4126:	4b2a      	ldr	r3, [pc, #168]	; (41d0 <usbdc_cb_ctl_req+0x418>)
    4128:	4798      	blx	r3
		if (st < 0) {
    412a:	2800      	cmp	r0, #0
    412c:	db03      	blt.n	4136 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    412e:	f000 0001 	and.w	r0, r0, #1
    4132:	9000      	str	r0, [sp, #0]
    4134:	e7e7      	b.n	4106 <usbdc_cb_ctl_req+0x34e>
			return false;
    4136:	2000      	movs	r0, #0
    4138:	e656      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    413a:	4b21      	ldr	r3, [pc, #132]	; (41c0 <usbdc_cb_ctl_req+0x408>)
    413c:	7f5b      	ldrb	r3, [r3, #29]
    413e:	88a2      	ldrh	r2, [r4, #4]
    4140:	4113      	asrs	r3, r2
    4142:	f013 0f01 	tst.w	r3, #1
    4146:	d012      	beq.n	416e <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    4148:	4b1d      	ldr	r3, [pc, #116]	; (41c0 <usbdc_cb_ctl_req+0x408>)
    414a:	691d      	ldr	r5, [r3, #16]
	return false;
    414c:	2000      	movs	r0, #0
	while (NULL != func) {
    414e:	2d00      	cmp	r5, #0
    4150:	f43f ae4a 	beq.w	3de8 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    4154:	2602      	movs	r6, #2
    4156:	686b      	ldr	r3, [r5, #4]
    4158:	4622      	mov	r2, r4
    415a:	4631      	mov	r1, r6
    415c:	4628      	mov	r0, r5
    415e:	4798      	blx	r3
    4160:	2800      	cmp	r0, #0
    4162:	da0f      	bge.n	4184 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    4164:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    4166:	2d00      	cmp	r5, #0
    4168:	d1f5      	bne.n	4156 <usbdc_cb_ctl_req+0x39e>
	return false;
    416a:	2000      	movs	r0, #0
    416c:	e63c      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    416e:	4914      	ldr	r1, [pc, #80]	; (41c0 <usbdc_cb_ctl_req+0x408>)
    4170:	694b      	ldr	r3, [r1, #20]
    4172:	2000      	movs	r0, #0
    4174:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    4176:	4603      	mov	r3, r0
    4178:	2201      	movs	r2, #1
    417a:	6949      	ldr	r1, [r1, #20]
    417c:	4c12      	ldr	r4, [pc, #72]	; (41c8 <usbdc_cb_ctl_req+0x410>)
    417e:	47a0      	blx	r4
		return true;
    4180:	2001      	movs	r0, #1
    4182:	e631      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    4184:	490e      	ldr	r1, [pc, #56]	; (41c0 <usbdc_cb_ctl_req+0x408>)
    4186:	694b      	ldr	r3, [r1, #20]
    4188:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    418a:	2300      	movs	r3, #0
    418c:	2201      	movs	r2, #1
    418e:	6949      	ldr	r1, [r1, #20]
    4190:	4618      	mov	r0, r3
    4192:	4c0d      	ldr	r4, [pc, #52]	; (41c8 <usbdc_cb_ctl_req+0x410>)
    4194:	47a0      	blx	r4
			return true;
    4196:	2001      	movs	r0, #1
    4198:	e626      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		return true;
    419a:	2001      	movs	r0, #1
    419c:	e624      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		return false;
    419e:	2000      	movs	r0, #0
    41a0:	e622      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		return false;
    41a2:	2000      	movs	r0, #0
    41a4:	e620      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		return false;
    41a6:	2000      	movs	r0, #0
    41a8:	e61e      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		return false;
    41aa:	2000      	movs	r0, #0
    41ac:	e61c      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		return false;
    41ae:	2000      	movs	r0, #0
    41b0:	e61a      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		return false;
    41b2:	2000      	movs	r0, #0
    41b4:	e618      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
		return false;
    41b6:	2000      	movs	r0, #0
    41b8:	e616      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
			return false;
    41ba:	2000      	movs	r0, #0
    41bc:	e614      	b.n	3de8 <usbdc_cb_ctl_req+0x30>
    41be:	bf00      	nop
    41c0:	200007d0 	.word	0x200007d0
    41c4:	0000435d 	.word	0x0000435d
    41c8:	00003d99 	.word	0x00003d99
    41cc:	000043c5 	.word	0x000043c5
    41d0:	0000186d 	.word	0x0000186d

000041d4 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    41d4:	b508      	push	{r3, lr}
	switch (type) {
    41d6:	2801      	cmp	r0, #1
    41d8:	d007      	beq.n	41ea <usbdc_register_handler+0x16>
    41da:	b110      	cbz	r0, 41e2 <usbdc_register_handler+0xe>
    41dc:	2802      	cmp	r0, #2
    41de:	d008      	beq.n	41f2 <usbdc_register_handler+0x1e>
    41e0:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    41e2:	4806      	ldr	r0, [pc, #24]	; (41fc <usbdc_register_handler+0x28>)
    41e4:	4b06      	ldr	r3, [pc, #24]	; (4200 <usbdc_register_handler+0x2c>)
    41e6:	4798      	blx	r3
		break;
    41e8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    41ea:	4806      	ldr	r0, [pc, #24]	; (4204 <usbdc_register_handler+0x30>)
    41ec:	4b04      	ldr	r3, [pc, #16]	; (4200 <usbdc_register_handler+0x2c>)
    41ee:	4798      	blx	r3
		break;
    41f0:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    41f2:	4805      	ldr	r0, [pc, #20]	; (4208 <usbdc_register_handler+0x34>)
    41f4:	4b02      	ldr	r3, [pc, #8]	; (4200 <usbdc_register_handler+0x2c>)
    41f6:	4798      	blx	r3
    41f8:	bd08      	pop	{r3, pc}
    41fa:	bf00      	nop
    41fc:	200007d4 	.word	0x200007d4
    4200:	0000197d 	.word	0x0000197d
    4204:	200007d8 	.word	0x200007d8
    4208:	200007dc 	.word	0x200007dc

0000420c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    420c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    420e:	4605      	mov	r5, r0
    4210:	f240 3255 	movw	r2, #853	; 0x355
    4214:	490c      	ldr	r1, [pc, #48]	; (4248 <usbdc_init+0x3c>)
    4216:	3000      	adds	r0, #0
    4218:	bf18      	it	ne
    421a:	2001      	movne	r0, #1
    421c:	4b0b      	ldr	r3, [pc, #44]	; (424c <usbdc_init+0x40>)
    421e:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    4220:	4b0b      	ldr	r3, [pc, #44]	; (4250 <usbdc_init+0x44>)
    4222:	4798      	blx	r3
	if (rc < 0) {
    4224:	2800      	cmp	r0, #0
    4226:	db0e      	blt.n	4246 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    4228:	4c0a      	ldr	r4, [pc, #40]	; (4254 <usbdc_init+0x48>)
    422a:	2220      	movs	r2, #32
    422c:	2100      	movs	r1, #0
    422e:	4620      	mov	r0, r4
    4230:	4b09      	ldr	r3, [pc, #36]	; (4258 <usbdc_init+0x4c>)
    4232:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    4234:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    4236:	4909      	ldr	r1, [pc, #36]	; (425c <usbdc_init+0x50>)
    4238:	2000      	movs	r0, #0
    423a:	4c09      	ldr	r4, [pc, #36]	; (4260 <usbdc_init+0x54>)
    423c:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    423e:	4909      	ldr	r1, [pc, #36]	; (4264 <usbdc_init+0x58>)
    4240:	2001      	movs	r0, #1
    4242:	47a0      	blx	r4

	return 0;
    4244:	2000      	movs	r0, #0
}
    4246:	bd38      	pop	{r3, r4, r5, pc}
    4248:	000049d8 	.word	0x000049d8
    424c:	00001921 	.word	0x00001921
    4250:	000015d5 	.word	0x000015d5
    4254:	200007d0 	.word	0x200007d0
    4258:	00004591 	.word	0x00004591
    425c:	00003c8d 	.word	0x00003c8d
    4260:	0000163d 	.word	0x0000163d
    4264:	00003d79 	.word	0x00003d79

00004268 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    4268:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    426a:	4601      	mov	r1, r0
    426c:	4801      	ldr	r0, [pc, #4]	; (4274 <usbdc_register_function+0xc>)
    426e:	4b02      	ldr	r3, [pc, #8]	; (4278 <usbdc_register_function+0x10>)
    4270:	4798      	blx	r3
    4272:	bd08      	pop	{r3, pc}
    4274:	200007e0 	.word	0x200007e0
    4278:	0000197d 	.word	0x0000197d

0000427c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    427c:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    427e:	4b0a      	ldr	r3, [pc, #40]	; (42a8 <usbdc_start+0x2c>)
    4280:	7e9b      	ldrb	r3, [r3, #26]
    4282:	b95b      	cbnz	r3, 429c <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    4284:	b168      	cbz	r0, 42a2 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    4286:	4b08      	ldr	r3, [pc, #32]	; (42a8 <usbdc_start+0x2c>)
    4288:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    428a:	6802      	ldr	r2, [r0, #0]
    428c:	79d2      	ldrb	r2, [r2, #7]
    428e:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    4290:	2201      	movs	r2, #1
    4292:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    4294:	4b05      	ldr	r3, [pc, #20]	; (42ac <usbdc_start+0x30>)
    4296:	4798      	blx	r3
	return ERR_NONE;
    4298:	2000      	movs	r0, #0
    429a:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    429c:	f06f 0003 	mvn.w	r0, #3
    42a0:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    42a2:	f06f 0008 	mvn.w	r0, #8
}
    42a6:	bd08      	pop	{r3, pc}
    42a8:	200007d0 	.word	0x200007d0
    42ac:	00001649 	.word	0x00001649

000042b0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    42b0:	b508      	push	{r3, lr}
	usb_d_attach();
    42b2:	4b01      	ldr	r3, [pc, #4]	; (42b8 <usbdc_attach+0x8>)
    42b4:	4798      	blx	r3
    42b6:	bd08      	pop	{r3, pc}
    42b8:	00001655 	.word	0x00001655

000042bc <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    42bc:	4b01      	ldr	r3, [pc, #4]	; (42c4 <usbdc_get_ctrl_buffer+0x8>)
    42be:	6958      	ldr	r0, [r3, #20]
    42c0:	4770      	bx	lr
    42c2:	bf00      	nop
    42c4:	200007d0 	.word	0x200007d0

000042c8 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    42c8:	4b03      	ldr	r3, [pc, #12]	; (42d8 <usbdc_get_state+0x10>)
    42ca:	7e98      	ldrb	r0, [r3, #26]
    42cc:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    42d0:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    42d2:	bf18      	it	ne
    42d4:	2010      	movne	r0, #16
    42d6:	4770      	bx	lr
    42d8:	200007d0 	.word	0x200007d0

000042dc <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    42dc:	4288      	cmp	r0, r1
    42de:	d214      	bcs.n	430a <usb_find_desc+0x2e>
	return desc[0];
    42e0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    42e2:	2b01      	cmp	r3, #1
    42e4:	d913      	bls.n	430e <usb_find_desc+0x32>
{
    42e6:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    42e8:	7844      	ldrb	r4, [r0, #1]
    42ea:	4294      	cmp	r4, r2
    42ec:	d00a      	beq.n	4304 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    42ee:	4418      	add	r0, r3
	while (desc < eof) {
    42f0:	4281      	cmp	r1, r0
    42f2:	d906      	bls.n	4302 <usb_find_desc+0x26>
	return desc[0];
    42f4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    42f6:	2b01      	cmp	r3, #1
    42f8:	d90b      	bls.n	4312 <usb_find_desc+0x36>
	return desc[1];
    42fa:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    42fc:	4294      	cmp	r4, r2
    42fe:	d1f6      	bne.n	42ee <usb_find_desc+0x12>
    4300:	e000      	b.n	4304 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4302:	2000      	movs	r0, #0
}
    4304:	f85d 4b04 	ldr.w	r4, [sp], #4
    4308:	4770      	bx	lr
	return NULL;
    430a:	2000      	movs	r0, #0
    430c:	4770      	bx	lr
		_desc_len_check();
    430e:	2000      	movs	r0, #0
    4310:	4770      	bx	lr
    4312:	2000      	movs	r0, #0
    4314:	e7f6      	b.n	4304 <usb_find_desc+0x28>

00004316 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4316:	4288      	cmp	r0, r1
    4318:	d216      	bcs.n	4348 <usb_find_ep_desc+0x32>
	return desc[0];
    431a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    431c:	2b01      	cmp	r3, #1
    431e:	d915      	bls.n	434c <usb_find_ep_desc+0x36>
	return desc[1];
    4320:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4322:	2a04      	cmp	r2, #4
    4324:	d014      	beq.n	4350 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4326:	2a05      	cmp	r2, #5
    4328:	d00b      	beq.n	4342 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    432a:	4418      	add	r0, r3
	while (desc < eof) {
    432c:	4281      	cmp	r1, r0
    432e:	d909      	bls.n	4344 <usb_find_ep_desc+0x2e>
	return desc[0];
    4330:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4332:	2b01      	cmp	r3, #1
    4334:	d90e      	bls.n	4354 <usb_find_ep_desc+0x3e>
	return desc[1];
    4336:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4338:	2a04      	cmp	r2, #4
    433a:	d00d      	beq.n	4358 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    433c:	2a05      	cmp	r2, #5
    433e:	d1f4      	bne.n	432a <usb_find_ep_desc+0x14>
    4340:	e00b      	b.n	435a <usb_find_ep_desc+0x44>
    4342:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4344:	2000      	movs	r0, #0
    4346:	4770      	bx	lr
    4348:	2000      	movs	r0, #0
    434a:	4770      	bx	lr
		_desc_len_check();
    434c:	2000      	movs	r0, #0
    434e:	4770      	bx	lr
	return NULL;
    4350:	2000      	movs	r0, #0
    4352:	4770      	bx	lr
		_desc_len_check();
    4354:	2000      	movs	r0, #0
    4356:	4770      	bx	lr
	return NULL;
    4358:	2000      	movs	r0, #0
}
    435a:	4770      	bx	lr

0000435c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    435c:	b538      	push	{r3, r4, r5, lr}
    435e:	460c      	mov	r4, r1
    4360:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    4362:	2202      	movs	r2, #2
    4364:	4b16      	ldr	r3, [pc, #88]	; (43c0 <usb_find_cfg_desc+0x64>)
    4366:	4798      	blx	r3
	if (!desc) {
    4368:	4603      	mov	r3, r0
    436a:	b1e8      	cbz	r0, 43a8 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    436c:	4284      	cmp	r4, r0
    436e:	d91d      	bls.n	43ac <usb_find_cfg_desc+0x50>
		_desc_len_check();
    4370:	7802      	ldrb	r2, [r0, #0]
    4372:	2a01      	cmp	r2, #1
    4374:	d91c      	bls.n	43b0 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    4376:	7842      	ldrb	r2, [r0, #1]
    4378:	2a02      	cmp	r2, #2
    437a:	d11b      	bne.n	43b4 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    437c:	7942      	ldrb	r2, [r0, #5]
    437e:	42aa      	cmp	r2, r5
    4380:	d012      	beq.n	43a8 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    4382:	78d9      	ldrb	r1, [r3, #3]
    4384:	789a      	ldrb	r2, [r3, #2]
    4386:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    438a:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    438e:	429c      	cmp	r4, r3
    4390:	d909      	bls.n	43a6 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    4392:	781a      	ldrb	r2, [r3, #0]
    4394:	2a01      	cmp	r2, #1
    4396:	d90f      	bls.n	43b8 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    4398:	785a      	ldrb	r2, [r3, #1]
    439a:	2a02      	cmp	r2, #2
    439c:	d10e      	bne.n	43bc <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    439e:	795a      	ldrb	r2, [r3, #5]
    43a0:	42aa      	cmp	r2, r5
    43a2:	d1ee      	bne.n	4382 <usb_find_cfg_desc+0x26>
    43a4:	e000      	b.n	43a8 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    43a6:	2300      	movs	r3, #0
}
    43a8:	4618      	mov	r0, r3
    43aa:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    43ac:	2300      	movs	r3, #0
    43ae:	e7fb      	b.n	43a8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    43b0:	2300      	movs	r3, #0
    43b2:	e7f9      	b.n	43a8 <usb_find_cfg_desc+0x4c>
	return NULL;
    43b4:	2300      	movs	r3, #0
    43b6:	e7f7      	b.n	43a8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    43b8:	2300      	movs	r3, #0
    43ba:	e7f5      	b.n	43a8 <usb_find_cfg_desc+0x4c>
	return NULL;
    43bc:	2300      	movs	r3, #0
    43be:	e7f3      	b.n	43a8 <usb_find_cfg_desc+0x4c>
    43c0:	000042dd 	.word	0x000042dd

000043c4 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    43c4:	4288      	cmp	r0, r1
    43c6:	d217      	bcs.n	43f8 <usb_find_str_desc+0x34>
{
    43c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43cc:	460d      	mov	r5, r1
    43ce:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    43d0:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    43d2:	f04f 0803 	mov.w	r8, #3
    43d6:	4f0c      	ldr	r7, [pc, #48]	; (4408 <usb_find_str_desc+0x44>)
    43d8:	4642      	mov	r2, r8
    43da:	4629      	mov	r1, r5
    43dc:	47b8      	blx	r7
		if (desc) {
    43de:	4603      	mov	r3, r0
    43e0:	b170      	cbz	r0, 4400 <usb_find_str_desc+0x3c>
	return desc[0];
    43e2:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    43e4:	2801      	cmp	r0, #1
    43e6:	d90a      	bls.n	43fe <usb_find_str_desc+0x3a>
			if (i == str_index) {
    43e8:	42a6      	cmp	r6, r4
    43ea:	d009      	beq.n	4400 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    43ec:	4418      	add	r0, r3
    43ee:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    43f0:	4285      	cmp	r5, r0
    43f2:	d8f1      	bhi.n	43d8 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    43f4:	2300      	movs	r3, #0
    43f6:	e003      	b.n	4400 <usb_find_str_desc+0x3c>
    43f8:	2300      	movs	r3, #0
}
    43fa:	4618      	mov	r0, r3
    43fc:	4770      	bx	lr
			_desc_len_check();
    43fe:	2300      	movs	r3, #0
}
    4400:	4618      	mov	r0, r3
    4402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4406:	bf00      	nop
    4408:	000042dd 	.word	0x000042dd

0000440c <__libc_init_array>:
    440c:	b570      	push	{r4, r5, r6, lr}
    440e:	4e0f      	ldr	r6, [pc, #60]	; (444c <__libc_init_array+0x40>)
    4410:	4d0f      	ldr	r5, [pc, #60]	; (4450 <__libc_init_array+0x44>)
    4412:	1b76      	subs	r6, r6, r5
    4414:	10b6      	asrs	r6, r6, #2
    4416:	bf18      	it	ne
    4418:	2400      	movne	r4, #0
    441a:	d005      	beq.n	4428 <__libc_init_array+0x1c>
    441c:	3401      	adds	r4, #1
    441e:	f855 3b04 	ldr.w	r3, [r5], #4
    4422:	4798      	blx	r3
    4424:	42a6      	cmp	r6, r4
    4426:	d1f9      	bne.n	441c <__libc_init_array+0x10>
    4428:	4e0a      	ldr	r6, [pc, #40]	; (4454 <__libc_init_array+0x48>)
    442a:	4d0b      	ldr	r5, [pc, #44]	; (4458 <__libc_init_array+0x4c>)
    442c:	1b76      	subs	r6, r6, r5
    442e:	f000 fae1 	bl	49f4 <_init>
    4432:	10b6      	asrs	r6, r6, #2
    4434:	bf18      	it	ne
    4436:	2400      	movne	r4, #0
    4438:	d006      	beq.n	4448 <__libc_init_array+0x3c>
    443a:	3401      	adds	r4, #1
    443c:	f855 3b04 	ldr.w	r3, [r5], #4
    4440:	4798      	blx	r3
    4442:	42a6      	cmp	r6, r4
    4444:	d1f9      	bne.n	443a <__libc_init_array+0x2e>
    4446:	bd70      	pop	{r4, r5, r6, pc}
    4448:	bd70      	pop	{r4, r5, r6, pc}
    444a:	bf00      	nop
    444c:	00004a00 	.word	0x00004a00
    4450:	00004a00 	.word	0x00004a00
    4454:	00004a08 	.word	0x00004a08
    4458:	00004a00 	.word	0x00004a00

0000445c <memcpy>:
    445c:	4684      	mov	ip, r0
    445e:	ea41 0300 	orr.w	r3, r1, r0
    4462:	f013 0303 	ands.w	r3, r3, #3
    4466:	d16d      	bne.n	4544 <memcpy+0xe8>
    4468:	3a40      	subs	r2, #64	; 0x40
    446a:	d341      	bcc.n	44f0 <memcpy+0x94>
    446c:	f851 3b04 	ldr.w	r3, [r1], #4
    4470:	f840 3b04 	str.w	r3, [r0], #4
    4474:	f851 3b04 	ldr.w	r3, [r1], #4
    4478:	f840 3b04 	str.w	r3, [r0], #4
    447c:	f851 3b04 	ldr.w	r3, [r1], #4
    4480:	f840 3b04 	str.w	r3, [r0], #4
    4484:	f851 3b04 	ldr.w	r3, [r1], #4
    4488:	f840 3b04 	str.w	r3, [r0], #4
    448c:	f851 3b04 	ldr.w	r3, [r1], #4
    4490:	f840 3b04 	str.w	r3, [r0], #4
    4494:	f851 3b04 	ldr.w	r3, [r1], #4
    4498:	f840 3b04 	str.w	r3, [r0], #4
    449c:	f851 3b04 	ldr.w	r3, [r1], #4
    44a0:	f840 3b04 	str.w	r3, [r0], #4
    44a4:	f851 3b04 	ldr.w	r3, [r1], #4
    44a8:	f840 3b04 	str.w	r3, [r0], #4
    44ac:	f851 3b04 	ldr.w	r3, [r1], #4
    44b0:	f840 3b04 	str.w	r3, [r0], #4
    44b4:	f851 3b04 	ldr.w	r3, [r1], #4
    44b8:	f840 3b04 	str.w	r3, [r0], #4
    44bc:	f851 3b04 	ldr.w	r3, [r1], #4
    44c0:	f840 3b04 	str.w	r3, [r0], #4
    44c4:	f851 3b04 	ldr.w	r3, [r1], #4
    44c8:	f840 3b04 	str.w	r3, [r0], #4
    44cc:	f851 3b04 	ldr.w	r3, [r1], #4
    44d0:	f840 3b04 	str.w	r3, [r0], #4
    44d4:	f851 3b04 	ldr.w	r3, [r1], #4
    44d8:	f840 3b04 	str.w	r3, [r0], #4
    44dc:	f851 3b04 	ldr.w	r3, [r1], #4
    44e0:	f840 3b04 	str.w	r3, [r0], #4
    44e4:	f851 3b04 	ldr.w	r3, [r1], #4
    44e8:	f840 3b04 	str.w	r3, [r0], #4
    44ec:	3a40      	subs	r2, #64	; 0x40
    44ee:	d2bd      	bcs.n	446c <memcpy+0x10>
    44f0:	3230      	adds	r2, #48	; 0x30
    44f2:	d311      	bcc.n	4518 <memcpy+0xbc>
    44f4:	f851 3b04 	ldr.w	r3, [r1], #4
    44f8:	f840 3b04 	str.w	r3, [r0], #4
    44fc:	f851 3b04 	ldr.w	r3, [r1], #4
    4500:	f840 3b04 	str.w	r3, [r0], #4
    4504:	f851 3b04 	ldr.w	r3, [r1], #4
    4508:	f840 3b04 	str.w	r3, [r0], #4
    450c:	f851 3b04 	ldr.w	r3, [r1], #4
    4510:	f840 3b04 	str.w	r3, [r0], #4
    4514:	3a10      	subs	r2, #16
    4516:	d2ed      	bcs.n	44f4 <memcpy+0x98>
    4518:	320c      	adds	r2, #12
    451a:	d305      	bcc.n	4528 <memcpy+0xcc>
    451c:	f851 3b04 	ldr.w	r3, [r1], #4
    4520:	f840 3b04 	str.w	r3, [r0], #4
    4524:	3a04      	subs	r2, #4
    4526:	d2f9      	bcs.n	451c <memcpy+0xc0>
    4528:	3204      	adds	r2, #4
    452a:	d008      	beq.n	453e <memcpy+0xe2>
    452c:	07d2      	lsls	r2, r2, #31
    452e:	bf1c      	itt	ne
    4530:	f811 3b01 	ldrbne.w	r3, [r1], #1
    4534:	f800 3b01 	strbne.w	r3, [r0], #1
    4538:	d301      	bcc.n	453e <memcpy+0xe2>
    453a:	880b      	ldrh	r3, [r1, #0]
    453c:	8003      	strh	r3, [r0, #0]
    453e:	4660      	mov	r0, ip
    4540:	4770      	bx	lr
    4542:	bf00      	nop
    4544:	2a08      	cmp	r2, #8
    4546:	d313      	bcc.n	4570 <memcpy+0x114>
    4548:	078b      	lsls	r3, r1, #30
    454a:	d08d      	beq.n	4468 <memcpy+0xc>
    454c:	f010 0303 	ands.w	r3, r0, #3
    4550:	d08a      	beq.n	4468 <memcpy+0xc>
    4552:	f1c3 0304 	rsb	r3, r3, #4
    4556:	1ad2      	subs	r2, r2, r3
    4558:	07db      	lsls	r3, r3, #31
    455a:	bf1c      	itt	ne
    455c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    4560:	f800 3b01 	strbne.w	r3, [r0], #1
    4564:	d380      	bcc.n	4468 <memcpy+0xc>
    4566:	f831 3b02 	ldrh.w	r3, [r1], #2
    456a:	f820 3b02 	strh.w	r3, [r0], #2
    456e:	e77b      	b.n	4468 <memcpy+0xc>
    4570:	3a04      	subs	r2, #4
    4572:	d3d9      	bcc.n	4528 <memcpy+0xcc>
    4574:	3a01      	subs	r2, #1
    4576:	f811 3b01 	ldrb.w	r3, [r1], #1
    457a:	f800 3b01 	strb.w	r3, [r0], #1
    457e:	d2f9      	bcs.n	4574 <memcpy+0x118>
    4580:	780b      	ldrb	r3, [r1, #0]
    4582:	7003      	strb	r3, [r0, #0]
    4584:	784b      	ldrb	r3, [r1, #1]
    4586:	7043      	strb	r3, [r0, #1]
    4588:	788b      	ldrb	r3, [r1, #2]
    458a:	7083      	strb	r3, [r0, #2]
    458c:	4660      	mov	r0, ip
    458e:	4770      	bx	lr

00004590 <memset>:
    4590:	b470      	push	{r4, r5, r6}
    4592:	0786      	lsls	r6, r0, #30
    4594:	d046      	beq.n	4624 <memset+0x94>
    4596:	1e54      	subs	r4, r2, #1
    4598:	2a00      	cmp	r2, #0
    459a:	d041      	beq.n	4620 <memset+0x90>
    459c:	b2ca      	uxtb	r2, r1
    459e:	4603      	mov	r3, r0
    45a0:	e002      	b.n	45a8 <memset+0x18>
    45a2:	f114 34ff 	adds.w	r4, r4, #4294967295
    45a6:	d33b      	bcc.n	4620 <memset+0x90>
    45a8:	f803 2b01 	strb.w	r2, [r3], #1
    45ac:	079d      	lsls	r5, r3, #30
    45ae:	d1f8      	bne.n	45a2 <memset+0x12>
    45b0:	2c03      	cmp	r4, #3
    45b2:	d92e      	bls.n	4612 <memset+0x82>
    45b4:	b2cd      	uxtb	r5, r1
    45b6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    45ba:	2c0f      	cmp	r4, #15
    45bc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    45c0:	d919      	bls.n	45f6 <memset+0x66>
    45c2:	f103 0210 	add.w	r2, r3, #16
    45c6:	4626      	mov	r6, r4
    45c8:	3e10      	subs	r6, #16
    45ca:	2e0f      	cmp	r6, #15
    45cc:	f842 5c10 	str.w	r5, [r2, #-16]
    45d0:	f842 5c0c 	str.w	r5, [r2, #-12]
    45d4:	f842 5c08 	str.w	r5, [r2, #-8]
    45d8:	f842 5c04 	str.w	r5, [r2, #-4]
    45dc:	f102 0210 	add.w	r2, r2, #16
    45e0:	d8f2      	bhi.n	45c8 <memset+0x38>
    45e2:	f1a4 0210 	sub.w	r2, r4, #16
    45e6:	f022 020f 	bic.w	r2, r2, #15
    45ea:	f004 040f 	and.w	r4, r4, #15
    45ee:	3210      	adds	r2, #16
    45f0:	2c03      	cmp	r4, #3
    45f2:	4413      	add	r3, r2
    45f4:	d90d      	bls.n	4612 <memset+0x82>
    45f6:	461e      	mov	r6, r3
    45f8:	4622      	mov	r2, r4
    45fa:	3a04      	subs	r2, #4
    45fc:	2a03      	cmp	r2, #3
    45fe:	f846 5b04 	str.w	r5, [r6], #4
    4602:	d8fa      	bhi.n	45fa <memset+0x6a>
    4604:	1f22      	subs	r2, r4, #4
    4606:	f022 0203 	bic.w	r2, r2, #3
    460a:	3204      	adds	r2, #4
    460c:	4413      	add	r3, r2
    460e:	f004 0403 	and.w	r4, r4, #3
    4612:	b12c      	cbz	r4, 4620 <memset+0x90>
    4614:	b2c9      	uxtb	r1, r1
    4616:	441c      	add	r4, r3
    4618:	f803 1b01 	strb.w	r1, [r3], #1
    461c:	429c      	cmp	r4, r3
    461e:	d1fb      	bne.n	4618 <memset+0x88>
    4620:	bc70      	pop	{r4, r5, r6}
    4622:	4770      	bx	lr
    4624:	4614      	mov	r4, r2
    4626:	4603      	mov	r3, r0
    4628:	e7c2      	b.n	45b0 <memset+0x20>
    462a:	bf00      	nop

0000462c <register_fini>:
    462c:	4b02      	ldr	r3, [pc, #8]	; (4638 <register_fini+0xc>)
    462e:	b113      	cbz	r3, 4636 <register_fini+0xa>
    4630:	4802      	ldr	r0, [pc, #8]	; (463c <register_fini+0x10>)
    4632:	f000 b805 	b.w	4640 <atexit>
    4636:	4770      	bx	lr
    4638:	00000000 	.word	0x00000000
    463c:	0000464d 	.word	0x0000464d

00004640 <atexit>:
    4640:	2300      	movs	r3, #0
    4642:	4601      	mov	r1, r0
    4644:	461a      	mov	r2, r3
    4646:	4618      	mov	r0, r3
    4648:	f000 b81e 	b.w	4688 <__register_exitproc>

0000464c <__libc_fini_array>:
    464c:	b538      	push	{r3, r4, r5, lr}
    464e:	4c0a      	ldr	r4, [pc, #40]	; (4678 <__libc_fini_array+0x2c>)
    4650:	4d0a      	ldr	r5, [pc, #40]	; (467c <__libc_fini_array+0x30>)
    4652:	1b64      	subs	r4, r4, r5
    4654:	10a4      	asrs	r4, r4, #2
    4656:	d00a      	beq.n	466e <__libc_fini_array+0x22>
    4658:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    465c:	3b01      	subs	r3, #1
    465e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4662:	3c01      	subs	r4, #1
    4664:	f855 3904 	ldr.w	r3, [r5], #-4
    4668:	4798      	blx	r3
    466a:	2c00      	cmp	r4, #0
    466c:	d1f9      	bne.n	4662 <__libc_fini_array+0x16>
    466e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4672:	f000 b9c9 	b.w	4a08 <_fini>
    4676:	bf00      	nop
    4678:	00004a18 	.word	0x00004a18
    467c:	00004a14 	.word	0x00004a14

00004680 <__retarget_lock_acquire_recursive>:
    4680:	4770      	bx	lr
    4682:	bf00      	nop

00004684 <__retarget_lock_release_recursive>:
    4684:	4770      	bx	lr
    4686:	bf00      	nop

00004688 <__register_exitproc>:
    4688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    468c:	4d2c      	ldr	r5, [pc, #176]	; (4740 <__register_exitproc+0xb8>)
    468e:	4606      	mov	r6, r0
    4690:	6828      	ldr	r0, [r5, #0]
    4692:	4698      	mov	r8, r3
    4694:	460f      	mov	r7, r1
    4696:	4691      	mov	r9, r2
    4698:	f7ff fff2 	bl	4680 <__retarget_lock_acquire_recursive>
    469c:	4b29      	ldr	r3, [pc, #164]	; (4744 <__register_exitproc+0xbc>)
    469e:	681c      	ldr	r4, [r3, #0]
    46a0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    46a4:	2b00      	cmp	r3, #0
    46a6:	d03e      	beq.n	4726 <__register_exitproc+0x9e>
    46a8:	685a      	ldr	r2, [r3, #4]
    46aa:	2a1f      	cmp	r2, #31
    46ac:	dc1c      	bgt.n	46e8 <__register_exitproc+0x60>
    46ae:	f102 0e01 	add.w	lr, r2, #1
    46b2:	b176      	cbz	r6, 46d2 <__register_exitproc+0x4a>
    46b4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    46b8:	2401      	movs	r4, #1
    46ba:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    46be:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    46c2:	4094      	lsls	r4, r2
    46c4:	4320      	orrs	r0, r4
    46c6:	2e02      	cmp	r6, #2
    46c8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    46cc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    46d0:	d023      	beq.n	471a <__register_exitproc+0x92>
    46d2:	3202      	adds	r2, #2
    46d4:	f8c3 e004 	str.w	lr, [r3, #4]
    46d8:	6828      	ldr	r0, [r5, #0]
    46da:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    46de:	f7ff ffd1 	bl	4684 <__retarget_lock_release_recursive>
    46e2:	2000      	movs	r0, #0
    46e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    46e8:	4b17      	ldr	r3, [pc, #92]	; (4748 <__register_exitproc+0xc0>)
    46ea:	b30b      	cbz	r3, 4730 <__register_exitproc+0xa8>
    46ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
    46f0:	f3af 8000 	nop.w
    46f4:	4603      	mov	r3, r0
    46f6:	b1d8      	cbz	r0, 4730 <__register_exitproc+0xa8>
    46f8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    46fc:	6002      	str	r2, [r0, #0]
    46fe:	2100      	movs	r1, #0
    4700:	6041      	str	r1, [r0, #4]
    4702:	460a      	mov	r2, r1
    4704:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    4708:	f04f 0e01 	mov.w	lr, #1
    470c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    4710:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    4714:	2e00      	cmp	r6, #0
    4716:	d0dc      	beq.n	46d2 <__register_exitproc+0x4a>
    4718:	e7cc      	b.n	46b4 <__register_exitproc+0x2c>
    471a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    471e:	430c      	orrs	r4, r1
    4720:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    4724:	e7d5      	b.n	46d2 <__register_exitproc+0x4a>
    4726:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    472a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    472e:	e7bb      	b.n	46a8 <__register_exitproc+0x20>
    4730:	6828      	ldr	r0, [r5, #0]
    4732:	f7ff ffa7 	bl	4684 <__retarget_lock_release_recursive>
    4736:	f04f 30ff 	mov.w	r0, #4294967295
    473a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    473e:	bf00      	nop
    4740:	20000490 	.word	0x20000490
    4744:	000049f0 	.word	0x000049f0
    4748:	00000000 	.word	0x00000000
    474c:	682f2e2e 	.word	0x682f2e2e
    4750:	732f6c61 	.word	0x732f6c61
    4754:	682f6372 	.word	0x682f6372
    4758:	615f6c61 	.word	0x615f6c61
    475c:	735f6364 	.word	0x735f6364
    4760:	2e636e79 	.word	0x2e636e79
    4764:	00000063 	.word	0x00000063
    4768:	682f2e2e 	.word	0x682f2e2e
    476c:	732f6c61 	.word	0x732f6c61
    4770:	682f6372 	.word	0x682f6372
    4774:	695f6c61 	.word	0x695f6c61
    4778:	00632e6f 	.word	0x00632e6f
    477c:	682f2e2e 	.word	0x682f2e2e
    4780:	732f6c61 	.word	0x732f6c61
    4784:	682f6372 	.word	0x682f6372
    4788:	735f6c61 	.word	0x735f6c61
    478c:	6d5f6970 	.word	0x6d5f6970
    4790:	7973615f 	.word	0x7973615f
    4794:	632e636e 	.word	0x632e636e
    4798:	00000000 	.word	0x00000000
    479c:	682f2e2e 	.word	0x682f2e2e
    47a0:	732f6c61 	.word	0x732f6c61
    47a4:	682f6372 	.word	0x682f6372
    47a8:	745f6c61 	.word	0x745f6c61
    47ac:	72656d69 	.word	0x72656d69
    47b0:	0000632e 	.word	0x0000632e
    47b4:	682f2e2e 	.word	0x682f2e2e
    47b8:	752f6c61 	.word	0x752f6c61
    47bc:	736c6974 	.word	0x736c6974
    47c0:	6372732f 	.word	0x6372732f
    47c4:	6974752f 	.word	0x6974752f
    47c8:	6c5f736c 	.word	0x6c5f736c
    47cc:	2e747369 	.word	0x2e747369
    47d0:	00000063 	.word	0x00000063

000047d4 <_adcs>:
    47d4:	01000000 00800000 0000181d 00000000     ................
	...
    47ec:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    47fc:	632e6364 00000000                       dc.c....

00004804 <user_mux_confs>:
    4804:	00000100 00000000 00000000 00000000     ................
	...

00004848 <channel_confs>:
    4848:	060c060c 00000000 00000000 00000000     ................
	...

00004888 <interrupt_cfg>:
	...
    4908:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    4918:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    4928:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    4938:	43000800 43000c00                       ...C...C

00004940 <_i2cms>:
	...

00004958 <sercomspi_regs>:
    4958:	0020000c 00020000 00000000 01ff00fe     .. .............
    4968:	20000c00 02000000 00000000 ff00fe00     ... ............
    4978:	00000401 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    4988:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

00004998 <_usb_ep_cfgs>:
    4998:	200006ec 00000000 00000040 200006ac     ... ....@...... 
    49a8:	00000000 00000040 2000066c 00000000     ....@...l.. ....
    49b8:	00000040 682f2e2e 732f6c61 682f6372     @...../hal/src/h
    49c8:	735f6c61 6d5f6970 6e79735f 00632e63     al_spi_m_sync.c.
    49d8:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
    49e8:	2e636462 00000063                       bdc.c...

000049f0 <_global_impure_ptr>:
    49f0:	20000068                                h.. 

000049f4 <_init>:
    49f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49f6:	bf00      	nop
    49f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    49fa:	bc08      	pop	{r3}
    49fc:	469e      	mov	lr, r3
    49fe:	4770      	bx	lr

00004a00 <__init_array_start>:
    4a00:	0000462d 	.word	0x0000462d

00004a04 <__frame_dummy_init_array_entry>:
    4a04:	00000289                                ....

00004a08 <_fini>:
    4a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a0a:	bf00      	nop
    4a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4a0e:	bc08      	pop	{r3}
    4a10:	469e      	mov	lr, r3
    4a12:	4770      	bx	lr

00004a14 <__fini_array_start>:
    4a14:	00000265 	.word	0x00000265
