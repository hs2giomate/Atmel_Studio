
SPI_Syn_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044d0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004d4  20000000  000044d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000204d4  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000204d4  2**0
                  CONTENTS
  4 .bss          000005f4  200004d4  000049a4  000204d4  2**2
                  ALLOC
  5 .stack        00010000  20000ac8  00004f98  000204d4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020502  2**0
                  CONTENTS, READONLY
  8 .debug_info   00040658  00000000  00000000  0002055b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005eb7  00000000  00000000  00060bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018ccb  00000000  00000000  00066a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001138  00000000  00000000  0007f735  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000018d8  00000000  00000000  0008086d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003f870  00000000  00000000  00082145  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002239b  00000000  00000000  000c19b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012973b  00000000  00000000  000e3d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002fc8  00000000  00000000  0020d48c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 0a 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	d5 17 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 d1 02 00 00 21 2e 00 00     ............!...
     184:	2d 2e 00 00 39 2e 00 00 45 2e 00 00 d1 02 00 00     -...9...E.......
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200004d4 	.word	0x200004d4
     280:	00000000 	.word	0x00000000
     284:	000044d0 	.word	0x000044d0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000044d0 	.word	0x000044d0
     2c4:	200004d8 	.word	0x200004d8
     2c8:	000044d0 	.word	0x000044d0
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	000044d0 	.word	0x000044d0
     33c:	200004d4 	.word	0x200004d4
     340:	20000ac8 	.word	0x20000ac8
     344:	200004d4 	.word	0x200004d4
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00003f31 	.word	0x00003f31
     354:	00000379 	.word	0x00000379

00000358 <_Z8HW_RESETv>:
	   }
	   delay_ms(1000);
	   gpio_set_pin_level(LED0,true);
   }
}
void HW_RESET(void){
     358:	b538      	push	{r3, r4, r5, lr}
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     35a:	4c05      	ldr	r4, [pc, #20]	; (370 <_Z8HW_RESETv+0x18>)
     35c:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
     360:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	
	
	gpio_set_pin_level(MR,true);
	delay_us(2);
     364:	2002      	movs	r0, #2
     366:	4b03      	ldr	r3, [pc, #12]	; (374 <_Z8HW_RESETv+0x1c>)
     368:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     36a:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
     36e:	bd38      	pop	{r3, r4, r5, pc}
     370:	41008000 	.word	0x41008000
     374:	00000b45 	.word	0x00000b45

00000378 <main>:
{
     378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     37c:	b08d      	sub	sp, #52	; 0x34
   atmel_start_init();
     37e:	4b48      	ldr	r3, [pc, #288]	; (4a0 <main+0x128>)
     380:	4798      	blx	r3
   SPI_Syn_Class	spi1;
     382:	a802      	add	r0, sp, #8
     384:	4b47      	ldr	r3, [pc, #284]	; (4a4 <main+0x12c>)
     386:	4798      	blx	r3
   spi1.init();
     388:	a802      	add	r0, sp, #8
     38a:	4b47      	ldr	r3, [pc, #284]	; (4a8 <main+0x130>)
     38c:	4798      	blx	r3
   ;		uint8_t	clock=0x04;
     38e:	2304      	movs	r3, #4
     390:	f88d 3007 	strb.w	r3, [sp, #7]
   uint8_t	wACLK=0x38;
     394:	2338      	movs	r3, #56	; 0x38
     396:	f88d 3006 	strb.w	r3, [sp, #6]
   uint8_t	rACLK=0xD4;
     39a:	23d4      	movs	r3, #212	; 0xd4
     39c:	f88d 3005 	strb.w	r3, [sp, #5]
   HW_RESET();
     3a0:	4b42      	ldr	r3, [pc, #264]	; (4ac <main+0x134>)
     3a2:	4798      	blx	r3
   spi1.enable();
     3a4:	a802      	add	r0, sp, #8
     3a6:	4b42      	ldr	r3, [pc, #264]	; (4b0 <main+0x138>)
     3a8:	4798      	blx	r3
     3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     3ae:	4b41      	ldr	r3, [pc, #260]	; (4b4 <main+0x13c>)
     3b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   while (!spi1.isSPIReady());
     3b4:	4c40      	ldr	r4, [pc, #256]	; (4b8 <main+0x140>)
     3b6:	a802      	add	r0, sp, #8
     3b8:	47a0      	blx	r4
     3ba:	2800      	cmp	r0, #0
     3bc:	d0fb      	beq.n	3b6 <main+0x3e>
   spi1.write(&clock,1);
     3be:	2201      	movs	r2, #1
     3c0:	f10d 0107 	add.w	r1, sp, #7
     3c4:	a802      	add	r0, sp, #8
     3c6:	4b3d      	ldr	r3, [pc, #244]	; (4bc <main+0x144>)
     3c8:	4798      	blx	r3
   while (!spi1.isSPIReady());
     3ca:	4c3b      	ldr	r4, [pc, #236]	; (4b8 <main+0x140>)
     3cc:	a802      	add	r0, sp, #8
     3ce:	47a0      	blx	r4
     3d0:	2800      	cmp	r0, #0
     3d2:	d0fb      	beq.n	3cc <main+0x54>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     3d8:	4b36      	ldr	r3, [pc, #216]	; (4b4 <main+0x13c>)
     3da:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   spi1.disable();
     3de:	a802      	add	r0, sp, #8
     3e0:	4b37      	ldr	r3, [pc, #220]	; (4c0 <main+0x148>)
     3e2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3e4:	4d33      	ldr	r5, [pc, #204]	; (4b4 <main+0x13c>)
	   while (!spi1.isSPIReady());
     3e6:	4c34      	ldr	r4, [pc, #208]	; (4b8 <main+0x140>)
	   spi1.write(&wACLK,1);
     3e8:	2601      	movs	r6, #1
     3ea:	4f34      	ldr	r7, [pc, #208]	; (4bc <main+0x144>)
	   delay_ms(1000);
     3ec:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 4cc <main+0x154>
     3f0:	e00a      	b.n	408 <main+0x90>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     3f6:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
	   delay_ms(1000);
     3fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     3fe:	47c8      	blx	r9
     400:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     404:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
	   spi1.enable();
     408:	a802      	add	r0, sp, #8
     40a:	4b29      	ldr	r3, [pc, #164]	; (4b0 <main+0x138>)
     40c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     40e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     412:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
	   while (!spi1.isSPIReady());
     416:	a802      	add	r0, sp, #8
     418:	47a0      	blx	r4
     41a:	2800      	cmp	r0, #0
     41c:	d0fb      	beq.n	416 <main+0x9e>
	   spi1.write(&wACLK,1);
     41e:	4632      	mov	r2, r6
     420:	f10d 0106 	add.w	r1, sp, #6
     424:	a802      	add	r0, sp, #8
     426:	47b8      	blx	r7
	   while (!spi1.isSPIReady());
     428:	a802      	add	r0, sp, #8
     42a:	47a0      	blx	r4
     42c:	2800      	cmp	r0, #0
     42e:	d0fb      	beq.n	428 <main+0xb0>
	   spi1.write(&clock,1);
     430:	4632      	mov	r2, r6
     432:	f10d 0107 	add.w	r1, sp, #7
     436:	a802      	add	r0, sp, #8
     438:	47b8      	blx	r7
	   while (!spi1.isSPIReady());
     43a:	a802      	add	r0, sp, #8
     43c:	47a0      	blx	r4
     43e:	2800      	cmp	r0, #0
     440:	d0fb      	beq.n	43a <main+0xc2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     442:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
     446:	f8c5 8098 	str.w	r8, [r5, #152]	; 0x98
	   delay_ms(1000);
     44a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     44e:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     450:	f8c5 8094 	str.w	r8, [r5, #148]	; 0x94
	    while (!spi1.isSPIReady());
     454:	a802      	add	r0, sp, #8
     456:	47a0      	blx	r4
     458:	2800      	cmp	r0, #0
     45a:	d0fb      	beq.n	454 <main+0xdc>
	   spi1.write(&rACLK,1);
     45c:	4632      	mov	r2, r6
     45e:	f10d 0105 	add.w	r1, sp, #5
     462:	a802      	add	r0, sp, #8
     464:	47b8      	blx	r7
	   while (!spi1.isSPIReady());
     466:	a802      	add	r0, sp, #8
     468:	47a0      	blx	r4
     46a:	2800      	cmp	r0, #0
     46c:	d0fb      	beq.n	466 <main+0xee>
	   spi1.read(byte,1);
     46e:	4632      	mov	r2, r6
     470:	4914      	ldr	r1, [pc, #80]	; (4c4 <main+0x14c>)
     472:	a802      	add	r0, sp, #8
     474:	4b14      	ldr	r3, [pc, #80]	; (4c8 <main+0x150>)
     476:	4798      	blx	r3
	   while (!spi1.isSPIReady());
     478:	a802      	add	r0, sp, #8
     47a:	47a0      	blx	r4
     47c:	2800      	cmp	r0, #0
     47e:	d0fb      	beq.n	478 <main+0x100>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     480:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     484:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	   spi1.disable();
     488:	a802      	add	r0, sp, #8
     48a:	4b0d      	ldr	r3, [pc, #52]	; (4c0 <main+0x148>)
     48c:	4798      	blx	r3
	   if (byte&&clock){
     48e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     492:	2b00      	cmp	r3, #0
     494:	d0ad      	beq.n	3f2 <main+0x7a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     496:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     49a:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
     49e:	e7ac      	b.n	3fa <main+0x82>
     4a0:	000005a1 	.word	0x000005a1
     4a4:	000004d1 	.word	0x000004d1
     4a8:	000004f1 	.word	0x000004f1
     4ac:	00000359 	.word	0x00000359
     4b0:	00000519 	.word	0x00000519
     4b4:	41008000 	.word	0x41008000
     4b8:	00000599 	.word	0x00000599
     4bc:	00000541 	.word	0x00000541
     4c0:	00000589 	.word	0x00000589
     4c4:	200004f0 	.word	0x200004f0
     4c8:	00000565 	.word	0x00000565
     4cc:	00000b65 	.word	0x00000b65

000004d0 <_ZN13SPI_Syn_ClassC1Ev>:


#include "SPI_Syn_Class.h"

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
     4d0:	b470      	push	{r4, r5, r6}
     4d2:	4606      	mov	r6, r0
{
	SPI=SPI_1;
     4d4:	1d04      	adds	r4, r0, #4
     4d6:	4d05      	ldr	r5, [pc, #20]	; (4ec <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
     4d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     4da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     4dc:	e895 0003 	ldmia.w	r5, {r0, r1}
     4e0:	e884 0003 	stmia.w	r4, {r0, r1}
} //SPI_Syn_Class
     4e4:	4630      	mov	r0, r6
     4e6:	bc70      	pop	{r4, r5, r6}
     4e8:	4770      	bx	lr
     4ea:	bf00      	nop
     4ec:	20000a50 	.word	0x20000a50

000004f0 <_ZN13SPI_Syn_Class4initEv>:
// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
{
} //~SPI_Syn_Class

void SPI_Syn_Class::init(){
     4f0:	b510      	push	{r4, lr}
     4f2:	4604      	mov	r4, r0
	SPI_1_CLOCK_init();
     4f4:	4b05      	ldr	r3, [pc, #20]	; (50c <_ZN13SPI_Syn_Class4initEv+0x1c>)
     4f6:	4798      	blx	r3
	spi_m_sync_init(&SPI, SERCOM4);
     4f8:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     4fc:	1d20      	adds	r0, r4, #4
     4fe:	4b04      	ldr	r3, [pc, #16]	; (510 <_ZN13SPI_Syn_Class4initEv+0x20>)
     500:	4798      	blx	r3
	SPI_1_PORT_init();
     502:	4b04      	ldr	r3, [pc, #16]	; (514 <_ZN13SPI_Syn_Class4initEv+0x24>)
     504:	4798      	blx	r3
	
	ready=true;
     506:	2301      	movs	r3, #1
     508:	7023      	strb	r3, [r4, #0]
     50a:	bd10      	pop	{r4, pc}
     50c:	000006a9 	.word	0x000006a9
     510:	00000bf1 	.word	0x00000bf1
     514:	000005e5 	.word	0x000005e5

00000518 <_ZN13SPI_Syn_Class6enableEv>:
	
}

int32_t SPI_Syn_Class::enable(){
     518:	b538      	push	{r3, r4, r5, lr}
     51a:	4604      	mov	r4, r0
	spi_m_sync_get_io_descriptor(&SPI, &spio);
     51c:	1d05      	adds	r5, r0, #4
     51e:	f100 011c 	add.w	r1, r0, #28
     522:	4628      	mov	r0, r5
     524:	4b04      	ldr	r3, [pc, #16]	; (538 <_ZN13SPI_Syn_Class6enableEv+0x20>)
     526:	4798      	blx	r3
	spi_m_sync_enable(&SPI);
     528:	4628      	mov	r0, r5
     52a:	4b04      	ldr	r3, [pc, #16]	; (53c <_ZN13SPI_Syn_Class6enableEv+0x24>)
     52c:	4798      	blx	r3
	ready=true;
     52e:	2301      	movs	r3, #1
     530:	7023      	strb	r3, [r4, #0]
	return 0;
}
     532:	2000      	movs	r0, #0
     534:	bd38      	pop	{r3, r4, r5, pc}
     536:	bf00      	nop
     538:	00000d49 	.word	0x00000d49
     53c:	00000c41 	.word	0x00000c41

00000540 <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
     540:	b510      	push	{r4, lr}
     542:	4604      	mov	r4, r0
	int32_t w;
	wFlag=true;
     544:	2301      	movs	r3, #1
     546:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	w= io_write(spio,p,(uint16_t)n);
     54a:	b292      	uxth	r2, r2
     54c:	69c0      	ldr	r0, [r0, #28]
     54e:	4b04      	ldr	r3, [pc, #16]	; (560 <_ZN13SPI_Syn_Class5writeEPKhl+0x20>)
     550:	4798      	blx	r3
	wFlag=(bool)w;
     552:	1c03      	adds	r3, r0, #0
     554:	bf18      	it	ne
     556:	2301      	movne	r3, #1
     558:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	 return w;
	
}
     55c:	bd10      	pop	{r4, pc}
     55e:	bf00      	nop
     560:	00000b91 	.word	0x00000b91

00000564 <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
     564:	b510      	push	{r4, lr}
     566:	4604      	mov	r4, r0
	int32_t r;
	rFlag=true;
     568:	2301      	movs	r3, #1
     56a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	r=io_read(spio,p,(uint16_t)n);
     56e:	b292      	uxth	r2, r2
     570:	69c0      	ldr	r0, [r0, #28]
     572:	4b04      	ldr	r3, [pc, #16]	; (584 <_ZN13SPI_Syn_Class4readEPhl+0x20>)
     574:	4798      	blx	r3
	rFlag=(bool)r;
     576:	1c03      	adds	r3, r0, #0
     578:	bf18      	it	ne
     57a:	2301      	movne	r3, #1
     57c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	return  r;
}
     580:	bd10      	pop	{r4, pc}
     582:	bf00      	nop
     584:	00000bc1 	.word	0x00000bc1

00000588 <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
     588:	b508      	push	{r3, lr}
	spi_m_sync_disable(&SPI);
     58a:	3004      	adds	r0, #4
     58c:	4b01      	ldr	r3, [pc, #4]	; (594 <_ZN13SPI_Syn_Class7disableEv+0xc>)
     58e:	4798      	blx	r3
     590:	bd08      	pop	{r3, pc}
     592:	bf00      	nop
     594:	00000c69 	.word	0x00000c69

00000598 <_ZN13SPI_Syn_Class10isSPIReadyEv>:
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::isSPIReady(void){
	ready=~(rFlag||wFlag);
     598:	2301      	movs	r3, #1
     59a:	7003      	strb	r3, [r0, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
     59c:	7800      	ldrb	r0, [r0, #0]
	{
		return false;
	}
	return ready;
	
}
     59e:	4770      	bx	lr

000005a0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     5a0:	b508      	push	{r3, lr}
	system_init();
     5a2:	4b03      	ldr	r3, [pc, #12]	; (5b0 <atmel_start_init+0x10>)
     5a4:	4798      	blx	r3
	gfx_mono_init();
     5a6:	4b03      	ldr	r3, [pc, #12]	; (5b4 <atmel_start_init+0x14>)
     5a8:	4798      	blx	r3
	usb_init();
     5aa:	4b03      	ldr	r3, [pc, #12]	; (5b8 <atmel_start_init+0x18>)
     5ac:	4798      	blx	r3
     5ae:	bd08      	pop	{r3, pc}
     5b0:	000008d9 	.word	0x000008d9
     5b4:	00002e8d 	.word	0x00002e8d
     5b8:	00002e81 	.word	0x00002e81

000005bc <EVENT_SYSTEM_0_init>:
struct timer_descriptor      TIMER_0;
struct spi_m_sync_descriptor SPI_1;
struct spi_m_sync_descriptor SPI_DISPLAY;

void EVENT_SYSTEM_0_init(void)
{
     5bc:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     5be:	2240      	movs	r2, #64	; 0x40
     5c0:	4b05      	ldr	r3, [pc, #20]	; (5d8 <EVENT_SYSTEM_0_init+0x1c>)
     5c2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     5c6:	4a05      	ldr	r2, [pc, #20]	; (5dc <EVENT_SYSTEM_0_init+0x20>)
     5c8:	6993      	ldr	r3, [r2, #24]
     5ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     5ce:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     5d0:	4b03      	ldr	r3, [pc, #12]	; (5e0 <EVENT_SYSTEM_0_init+0x24>)
     5d2:	4798      	blx	r3
     5d4:	bd08      	pop	{r3, pc}
     5d6:	bf00      	nop
     5d8:	40001c00 	.word	0x40001c00
     5dc:	40000800 	.word	0x40000800
     5e0:	00000b85 	.word	0x00000b85

000005e4 <SPI_1_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e4:	4b2d      	ldr	r3, [pc, #180]	; (69c <SPI_1_PORT_init+0xb8>)
     5e6:	f44f 7280 	mov.w	r2, #256	; 0x100
     5ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     5f6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     5fa:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     5fe:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     602:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     606:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     60a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     60e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     612:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     616:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     61a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     61e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     622:	f44f 7200 	mov.w	r2, #512	; 0x200
     626:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     62a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     62e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     632:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     636:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     63a:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     63e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     642:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     646:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     64a:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     64e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     652:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     656:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     65a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     65e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     662:	4a0f      	ldr	r2, [pc, #60]	; (6a0 <SPI_1_PORT_init+0xbc>)
     664:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     668:	4a0e      	ldr	r2, [pc, #56]	; (6a4 <SPI_1_PORT_init+0xc0>)
     66a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     66e:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
     672:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     676:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     67a:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     67e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     682:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     686:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     68a:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     68e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     692:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     696:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
     69a:	4770      	bx	lr
     69c:	41008000 	.word	0x41008000
     6a0:	40024000 	.word	0x40024000
     6a4:	c0020000 	.word	0xc0020000

000006a8 <SPI_1_CLOCK_init>:
     6a8:	4b06      	ldr	r3, [pc, #24]	; (6c4 <SPI_1_CLOCK_init+0x1c>)
     6aa:	2240      	movs	r2, #64	; 0x40
     6ac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     6b0:	2243      	movs	r2, #67	; 0x43
     6b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     6b6:	4a04      	ldr	r2, [pc, #16]	; (6c8 <SPI_1_CLOCK_init+0x20>)
     6b8:	6a13      	ldr	r3, [r2, #32]
     6ba:	f043 0301 	orr.w	r3, r3, #1
     6be:	6213      	str	r3, [r2, #32]
     6c0:	4770      	bx	lr
     6c2:	bf00      	nop
     6c4:	40001c00 	.word	0x40001c00
     6c8:	40000800 	.word	0x40000800

000006cc <SPI_1_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void SPI_1_init(void)
{
     6cc:	b508      	push	{r3, lr}
	SPI_1_CLOCK_init();
     6ce:	4b05      	ldr	r3, [pc, #20]	; (6e4 <SPI_1_init+0x18>)
     6d0:	4798      	blx	r3
	spi_m_sync_init(&SPI_1, SERCOM4);
     6d2:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     6d6:	4804      	ldr	r0, [pc, #16]	; (6e8 <SPI_1_init+0x1c>)
     6d8:	4b04      	ldr	r3, [pc, #16]	; (6ec <SPI_1_init+0x20>)
     6da:	4798      	blx	r3
	SPI_1_PORT_init();
     6dc:	4b04      	ldr	r3, [pc, #16]	; (6f0 <SPI_1_init+0x24>)
     6de:	4798      	blx	r3
     6e0:	bd08      	pop	{r3, pc}
     6e2:	bf00      	nop
     6e4:	000006a9 	.word	0x000006a9
     6e8:	20000a50 	.word	0x20000a50
     6ec:	00000bf1 	.word	0x00000bf1
     6f0:	000005e5 	.word	0x000005e5

000006f4 <SPI_DISPLAY_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6f4:	4b2d      	ldr	r3, [pc, #180]	; (7ac <SPI_DISPLAY_PORT_init+0xb8>)
     6f6:	2210      	movs	r2, #16
     6f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6fc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     700:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     704:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     708:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     70c:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     710:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
	tmp &= ~PORT_PINCFG_PMUXEN;
     714:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     718:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     71c:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     720:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     724:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     728:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     72c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     730:	2220      	movs	r2, #32
     732:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     736:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     73a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     73e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     742:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     746:	f893 2145 	ldrb.w	r2, [r3, #325]	; 0x145
	tmp &= ~PORT_PINCFG_PMUXEN;
     74a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     74e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     752:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     756:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     75a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     75e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     762:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     766:	2280      	movs	r2, #128	; 0x80
     768:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     76c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     770:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     774:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     778:	4a0d      	ldr	r2, [pc, #52]	; (7b0 <SPI_DISPLAY_PORT_init+0xbc>)
     77a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     77e:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
     782:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     786:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     78a:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
	tmp &= ~PORT_PINCFG_PMUXEN;
     78e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     792:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     796:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     79a:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     79e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7a2:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7a6:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
     7aa:	4770      	bx	lr
     7ac:	41008000 	.word	0x41008000
     7b0:	c0020000 	.word	0xc0020000

000007b4 <SPI_DISPLAY_CLOCK_init>:
     7b4:	4b05      	ldr	r3, [pc, #20]	; (7cc <SPI_DISPLAY_CLOCK_init+0x18>)
     7b6:	2240      	movs	r2, #64	; 0x40
     7b8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     7bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     7c0:	4a03      	ldr	r2, [pc, #12]	; (7d0 <SPI_DISPLAY_CLOCK_init+0x1c>)
     7c2:	6a13      	ldr	r3, [r2, #32]
     7c4:	f043 0304 	orr.w	r3, r3, #4
     7c8:	6213      	str	r3, [r2, #32]
     7ca:	4770      	bx	lr
     7cc:	40001c00 	.word	0x40001c00
     7d0:	40000800 	.word	0x40000800

000007d4 <SPI_DISPLAY_init>:

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
}

void SPI_DISPLAY_init(void)
{
     7d4:	b508      	push	{r3, lr}
	SPI_DISPLAY_CLOCK_init();
     7d6:	4b04      	ldr	r3, [pc, #16]	; (7e8 <SPI_DISPLAY_init+0x14>)
     7d8:	4798      	blx	r3
	spi_m_sync_init(&SPI_DISPLAY, SERCOM6);
     7da:	4904      	ldr	r1, [pc, #16]	; (7ec <SPI_DISPLAY_init+0x18>)
     7dc:	4804      	ldr	r0, [pc, #16]	; (7f0 <SPI_DISPLAY_init+0x1c>)
     7de:	4b05      	ldr	r3, [pc, #20]	; (7f4 <SPI_DISPLAY_init+0x20>)
     7e0:	4798      	blx	r3
	SPI_DISPLAY_PORT_init();
     7e2:	4b05      	ldr	r3, [pc, #20]	; (7f8 <SPI_DISPLAY_init+0x24>)
     7e4:	4798      	blx	r3
     7e6:	bd08      	pop	{r3, pc}
     7e8:	000007b5 	.word	0x000007b5
     7ec:	43000800 	.word	0x43000800
     7f0:	20000a68 	.word	0x20000a68
     7f4:	00000bf1 	.word	0x00000bf1
     7f8:	000006f5 	.word	0x000006f5

000007fc <delay_driver_init>:
}

void delay_driver_init(void)
{
     7fc:	b508      	push	{r3, lr}
	delay_init(SysTick);
     7fe:	4802      	ldr	r0, [pc, #8]	; (808 <delay_driver_init+0xc>)
     800:	4b02      	ldr	r3, [pc, #8]	; (80c <delay_driver_init+0x10>)
     802:	4798      	blx	r3
     804:	bd08      	pop	{r3, pc}
     806:	bf00      	nop
     808:	e000e010 	.word	0xe000e010
     80c:	00000b31 	.word	0x00000b31

00000810 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     810:	4b1e      	ldr	r3, [pc, #120]	; (88c <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     812:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     816:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     818:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     81c:	6299      	str	r1, [r3, #40]	; 0x28
     81e:	481c      	ldr	r0, [pc, #112]	; (890 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     820:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     822:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     824:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     828:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     82c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     830:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     834:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     838:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     840:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     844:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     848:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     850:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     854:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     856:	6299      	str	r1, [r3, #40]	; 0x28
     858:	490e      	ldr	r1, [pc, #56]	; (894 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     85a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     85c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     85e:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     862:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     866:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     86a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     87e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     882:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     88a:	4770      	bx	lr
     88c:	41008000 	.word	0x41008000
     890:	c0000100 	.word	0xc0000100
     894:	c0000200 	.word	0xc0000200

00000898 <USB_DEVICE_INSTANCE_CLOCK_init>:
     898:	2244      	movs	r2, #68	; 0x44
     89a:	4b07      	ldr	r3, [pc, #28]	; (8b8 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     89c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     8a0:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     8a4:	691a      	ldr	r2, [r3, #16]
     8a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     8aa:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     8ac:	699a      	ldr	r2, [r3, #24]
     8ae:	f042 0201 	orr.w	r2, r2, #1
     8b2:	619a      	str	r2, [r3, #24]
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop
     8b8:	40001c00 	.word	0x40001c00

000008bc <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     8bc:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     8be:	4b03      	ldr	r3, [pc, #12]	; (8cc <USB_DEVICE_INSTANCE_init+0x10>)
     8c0:	4798      	blx	r3
	usb_d_init();
     8c2:	4b03      	ldr	r3, [pc, #12]	; (8d0 <USB_DEVICE_INSTANCE_init+0x14>)
     8c4:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     8c6:	4b03      	ldr	r3, [pc, #12]	; (8d4 <USB_DEVICE_INSTANCE_init+0x18>)
     8c8:	4798      	blx	r3
     8ca:	bd08      	pop	{r3, pc}
     8cc:	00000899 	.word	0x00000899
     8d0:	000010dd 	.word	0x000010dd
     8d4:	00000811 	.word	0x00000811

000008d8 <system_init>:
}

void system_init(void)
{
     8d8:	b538      	push	{r3, r4, r5, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     8da:	4b81      	ldr	r3, [pc, #516]	; (ae0 <system_init+0x208>)
     8dc:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8de:	4b81      	ldr	r3, [pc, #516]	; (ae4 <system_init+0x20c>)
     8e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     8e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     8f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     8f4:	497c      	ldr	r1, [pc, #496]	; (ae8 <system_init+0x210>)
     8f6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8fa:	f893 10dc 	ldrb.w	r1, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
     8fe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     902:	f883 10dc 	strb.w	r1, [r3, #220]	; 0xdc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     906:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     90a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     90e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     912:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     916:	4975      	ldr	r1, [pc, #468]	; (aec <system_init+0x214>)
     918:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91c:	f893 10dd 	ldrb.w	r1, [r3, #221]	; 0xdd
	tmp &= ~PORT_PINCFG_PMUXEN;
     920:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     924:	f883 10dd 	strb.w	r1, [r3, #221]	; 0xdd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     928:	2102      	movs	r1, #2
     92a:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     92e:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     932:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     936:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     93a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     93e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     942:	f893 0141 	ldrb.w	r0, [r3, #321]	; 0x141
	tmp &= ~PORT_PINCFG_PMUXEN;
     946:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     94a:	f883 0141 	strb.w	r0, [r3, #321]	; 0x141
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     94e:	2004      	movs	r0, #4
     950:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     954:	4c66      	ldr	r4, [pc, #408]	; (af0 <system_init+0x218>)
     956:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
     95a:	4d66      	ldr	r5, [pc, #408]	; (af4 <system_init+0x21c>)
     95c:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     960:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     964:	f893 4142 	ldrb.w	r4, [r3, #322]	; 0x142
     968:	4304      	orrs	r4, r0
     96a:	f883 4142 	strb.w	r4, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     96e:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     972:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     976:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     97a:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     97e:	2008      	movs	r0, #8
     980:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     984:	4c5c      	ldr	r4, [pc, #368]	; (af8 <system_init+0x220>)
     986:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
     98a:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     98e:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     992:	f893 4143 	ldrb.w	r4, [r3, #323]	; 0x143
     996:	f044 0404 	orr.w	r4, r4, #4
     99a:	f883 4143 	strb.w	r4, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     99e:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9a2:	f893 0143 	ldrb.w	r0, [r3, #323]	; 0x143
	tmp &= ~PORT_PINCFG_PMUXEN;
     9a6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9aa:	f883 0143 	strb.w	r0, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     9b2:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9b6:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9ba:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
     9be:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     9c2:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9c6:	f893 014e 	ldrb.w	r0, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ca:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9ce:	f883 014e 	strb.w	r0, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     9d6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9da:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9de:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     9e2:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     9e6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9ea:	f893 014f 	ldrb.w	r0, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ee:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9f2:	f883 014f 	strb.w	r0, [r3, #335]	; 0x14f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
     9fa:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9fe:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a02:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     a06:	483d      	ldr	r0, [pc, #244]	; (afc <system_init+0x224>)
     a08:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a0c:	f893 0152 	ldrb.w	r0, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     a10:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a14:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a18:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a1c:	4838      	ldr	r0, [pc, #224]	; (b00 <system_init+0x228>)
     a1e:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     a22:	4838      	ldr	r0, [pc, #224]	; (b04 <system_init+0x22c>)
     a24:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a28:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     a2c:	f893 015e 	ldrb.w	r0, [r3, #350]	; 0x15e
     a30:	f040 0004 	orr.w	r0, r0, #4
     a34:	f883 015e 	strb.w	r0, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a38:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a3c:	f893 015e 	ldrb.w	r0, [r3, #350]	; 0x15e
	tmp &= ~PORT_PINCFG_PMUXEN;
     a40:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a44:	f883 015e 	strb.w	r0, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a48:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
     a4c:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a50:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a54:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     a58:	f102 2280 	add.w	r2, r2, #2147516416	; 0x80008000
     a5c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a60:	f893 215f 	ldrb.w	r2, [r3, #351]	; 0x15f
	tmp &= ~PORT_PINCFG_PMUXEN;
     a64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a68:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
     a70:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a74:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a78:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     a7c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     a80:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a84:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
	tmp &= ~PORT_PINCFG_PMUXEN;
     a88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8c:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a90:	f44f 6200 	mov.w	r2, #2048	; 0x800
     a94:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a98:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a9c:	4c1a      	ldr	r4, [pc, #104]	; (b08 <system_init+0x230>)
     a9e:	f8c3 41a8 	str.w	r4, [r3, #424]	; 0x1a8
     aa2:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aa6:	f893 21cb 	ldrb.w	r2, [r3, #459]	; 0x1cb
	tmp &= ~PORT_PINCFG_PMUXEN;
     aaa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aae:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
	// Set pin direction to output
	gpio_set_pin_direction(OLED_LED3, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(OLED_LED3, GPIO_PIN_FUNCTION_OFF);

	EVENT_SYSTEM_0_init();
     ab2:	4b16      	ldr	r3, [pc, #88]	; (b0c <system_init+0x234>)
     ab4:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     ab6:	6963      	ldr	r3, [r4, #20]
     ab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     abc:	6163      	str	r3, [r4, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     abe:	4b14      	ldr	r3, [pc, #80]	; (b10 <system_init+0x238>)
     ac0:	4798      	blx	r3
     ac2:	4602      	mov	r2, r0
     ac4:	4913      	ldr	r1, [pc, #76]	; (b14 <system_init+0x23c>)
     ac6:	4814      	ldr	r0, [pc, #80]	; (b18 <system_init+0x240>)
     ac8:	4b14      	ldr	r3, [pc, #80]	; (b1c <system_init+0x244>)
     aca:	4798      	blx	r3

	TIMER_0_init();

	SPI_1_init();
     acc:	4b14      	ldr	r3, [pc, #80]	; (b20 <system_init+0x248>)
     ace:	4798      	blx	r3

	SPI_DISPLAY_init();
     ad0:	4b14      	ldr	r3, [pc, #80]	; (b24 <system_init+0x24c>)
     ad2:	4798      	blx	r3

	delay_driver_init();
     ad4:	4b14      	ldr	r3, [pc, #80]	; (b28 <system_init+0x250>)
     ad6:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
     ad8:	4b14      	ldr	r3, [pc, #80]	; (b2c <system_init+0x254>)
     ada:	4798      	blx	r3
     adc:	bd38      	pop	{r3, r4, r5, pc}
     ade:	bf00      	nop
     ae0:	000014f5 	.word	0x000014f5
     ae4:	41008000 	.word	0x41008000
     ae8:	c0001000 	.word	0xc0001000
     aec:	c0002000 	.word	0xc0002000
     af0:	40020004 	.word	0x40020004
     af4:	c0020000 	.word	0xc0020000
     af8:	40020008 	.word	0x40020008
     afc:	c0000004 	.word	0xc0000004
     b00:	40020000 	.word	0x40020000
     b04:	c0024000 	.word	0xc0024000
     b08:	40000800 	.word	0x40000800
     b0c:	000005bd 	.word	0x000005bd
     b10:	000017d1 	.word	0x000017d1
     b14:	40002400 	.word	0x40002400
     b18:	20000a80 	.word	0x20000a80
     b1c:	00000e4d 	.word	0x00000e4d
     b20:	000006cd 	.word	0x000006cd
     b24:	000007d5 	.word	0x000007d5
     b28:	000007fd 	.word	0x000007fd
     b2c:	000008bd 	.word	0x000008bd

00000b30 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     b30:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     b32:	4b02      	ldr	r3, [pc, #8]	; (b3c <delay_init+0xc>)
     b34:	6018      	str	r0, [r3, #0]
     b36:	4b02      	ldr	r3, [pc, #8]	; (b40 <delay_init+0x10>)
     b38:	4798      	blx	r3
     b3a:	bd08      	pop	{r3, pc}
     b3c:	200004f4 	.word	0x200004f4
     b40:	00001b55 	.word	0x00001b55

00000b44 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     b44:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     b46:	4b04      	ldr	r3, [pc, #16]	; (b58 <delay_us+0x14>)
     b48:	681c      	ldr	r4, [r3, #0]
     b4a:	4b04      	ldr	r3, [pc, #16]	; (b5c <delay_us+0x18>)
     b4c:	4798      	blx	r3
     b4e:	4601      	mov	r1, r0
     b50:	4620      	mov	r0, r4
     b52:	4b03      	ldr	r3, [pc, #12]	; (b60 <delay_us+0x1c>)
     b54:	4798      	blx	r3
     b56:	bd10      	pop	{r4, pc}
     b58:	200004f4 	.word	0x200004f4
     b5c:	000014d1 	.word	0x000014d1
     b60:	00001b69 	.word	0x00001b69

00000b64 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     b64:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     b66:	4b04      	ldr	r3, [pc, #16]	; (b78 <delay_ms+0x14>)
     b68:	681c      	ldr	r4, [r3, #0]
     b6a:	4b04      	ldr	r3, [pc, #16]	; (b7c <delay_ms+0x18>)
     b6c:	4798      	blx	r3
     b6e:	4601      	mov	r1, r0
     b70:	4620      	mov	r0, r4
     b72:	4b03      	ldr	r3, [pc, #12]	; (b80 <delay_ms+0x1c>)
     b74:	4798      	blx	r3
     b76:	bd10      	pop	{r4, pc}
     b78:	200004f4 	.word	0x200004f4
     b7c:	000014e9 	.word	0x000014e9
     b80:	00001b69 	.word	0x00001b69

00000b84 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     b84:	b508      	push	{r3, lr}
	return _event_system_init();
     b86:	4b01      	ldr	r3, [pc, #4]	; (b8c <event_system_init+0x8>)
     b88:	4798      	blx	r3
}
     b8a:	bd08      	pop	{r3, pc}
     b8c:	00001559 	.word	0x00001559

00000b90 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     b90:	b570      	push	{r4, r5, r6, lr}
     b92:	460d      	mov	r5, r1
     b94:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     b96:	4604      	mov	r4, r0
     b98:	b160      	cbz	r0, bb4 <io_write+0x24>
     b9a:	1c08      	adds	r0, r1, #0
     b9c:	bf18      	it	ne
     b9e:	2001      	movne	r0, #1
     ba0:	2234      	movs	r2, #52	; 0x34
     ba2:	4905      	ldr	r1, [pc, #20]	; (bb8 <io_write+0x28>)
     ba4:	4b05      	ldr	r3, [pc, #20]	; (bbc <io_write+0x2c>)
     ba6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     ba8:	6823      	ldr	r3, [r4, #0]
     baa:	4632      	mov	r2, r6
     bac:	4629      	mov	r1, r5
     bae:	4620      	mov	r0, r4
     bb0:	4798      	blx	r3
}
     bb2:	bd70      	pop	{r4, r5, r6, pc}
     bb4:	2000      	movs	r0, #0
     bb6:	e7f3      	b.n	ba0 <io_write+0x10>
     bb8:	00004270 	.word	0x00004270
     bbc:	00001429 	.word	0x00001429

00000bc0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     bc0:	b570      	push	{r4, r5, r6, lr}
     bc2:	460d      	mov	r5, r1
     bc4:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     bc6:	4604      	mov	r4, r0
     bc8:	b160      	cbz	r0, be4 <io_read+0x24>
     bca:	1c08      	adds	r0, r1, #0
     bcc:	bf18      	it	ne
     bce:	2001      	movne	r0, #1
     bd0:	223d      	movs	r2, #61	; 0x3d
     bd2:	4905      	ldr	r1, [pc, #20]	; (be8 <io_read+0x28>)
     bd4:	4b05      	ldr	r3, [pc, #20]	; (bec <io_read+0x2c>)
     bd6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     bd8:	6863      	ldr	r3, [r4, #4]
     bda:	4632      	mov	r2, r6
     bdc:	4629      	mov	r1, r5
     bde:	4620      	mov	r0, r4
     be0:	4798      	blx	r3
}
     be2:	bd70      	pop	{r4, r5, r6, pc}
     be4:	2000      	movs	r0, #0
     be6:	e7f3      	b.n	bd0 <io_read+0x10>
     be8:	00004270 	.word	0x00004270
     bec:	00001429 	.word	0x00001429

00000bf0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     bf0:	b538      	push	{r3, r4, r5, lr}
     bf2:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     bf4:	4604      	mov	r4, r0
     bf6:	b1b8      	cbz	r0, c28 <spi_m_sync_init+0x38>
     bf8:	1c08      	adds	r0, r1, #0
     bfa:	bf18      	it	ne
     bfc:	2001      	movne	r0, #1
     bfe:	2240      	movs	r2, #64	; 0x40
     c00:	490a      	ldr	r1, [pc, #40]	; (c2c <spi_m_sync_init+0x3c>)
     c02:	4b0b      	ldr	r3, [pc, #44]	; (c30 <spi_m_sync_init+0x40>)
     c04:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     c06:	4620      	mov	r0, r4
     c08:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
     c0c:	4629      	mov	r1, r5
     c0e:	4b09      	ldr	r3, [pc, #36]	; (c34 <spi_m_sync_init+0x44>)
     c10:	4798      	blx	r3

	if (rc < 0) {
     c12:	2800      	cmp	r0, #0
     c14:	db07      	blt.n	c26 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     c1a:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     c1c:	4b06      	ldr	r3, [pc, #24]	; (c38 <spi_m_sync_init+0x48>)
     c1e:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     c20:	4b06      	ldr	r3, [pc, #24]	; (c3c <spi_m_sync_init+0x4c>)
     c22:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     c24:	2000      	movs	r0, #0
}
     c26:	bd38      	pop	{r3, r4, r5, pc}
     c28:	2000      	movs	r0, #0
     c2a:	e7e8      	b.n	bfe <spi_m_sync_init+0xe>
     c2c:	00004284 	.word	0x00004284
     c30:	00001429 	.word	0x00001429
     c34:	00001885 	.word	0x00001885
     c38:	00000d0d 	.word	0x00000d0d
     c3c:	00000cd1 	.word	0x00000cd1

00000c40 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     c40:	b510      	push	{r4, lr}
	ASSERT(spi);
     c42:	4604      	mov	r4, r0
     c44:	2257      	movs	r2, #87	; 0x57
     c46:	4905      	ldr	r1, [pc, #20]	; (c5c <spi_m_sync_enable+0x1c>)
     c48:	3000      	adds	r0, #0
     c4a:	bf18      	it	ne
     c4c:	2001      	movne	r0, #1
     c4e:	4b04      	ldr	r3, [pc, #16]	; (c60 <spi_m_sync_enable+0x20>)
     c50:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     c52:	1d20      	adds	r0, r4, #4
     c54:	4b03      	ldr	r3, [pc, #12]	; (c64 <spi_m_sync_enable+0x24>)
     c56:	4798      	blx	r3
     c58:	bd10      	pop	{r4, pc}
     c5a:	bf00      	nop
     c5c:	00004284 	.word	0x00004284
     c60:	00001429 	.word	0x00001429
     c64:	00001a15 	.word	0x00001a15

00000c68 <spi_m_sync_disable>:
}

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
     c68:	b510      	push	{r4, lr}
	ASSERT(spi);
     c6a:	4604      	mov	r4, r0
     c6c:	225d      	movs	r2, #93	; 0x5d
     c6e:	4905      	ldr	r1, [pc, #20]	; (c84 <spi_m_sync_disable+0x1c>)
     c70:	3000      	adds	r0, #0
     c72:	bf18      	it	ne
     c74:	2001      	movne	r0, #1
     c76:	4b04      	ldr	r3, [pc, #16]	; (c88 <spi_m_sync_disable+0x20>)
     c78:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
     c7a:	1d20      	adds	r0, r4, #4
     c7c:	4b03      	ldr	r3, [pc, #12]	; (c8c <spi_m_sync_disable+0x24>)
     c7e:	4798      	blx	r3
     c80:	bd10      	pop	{r4, pc}
     c82:	bf00      	nop
     c84:	00004284 	.word	0x00004284
     c88:	00001429 	.word	0x00001429
     c8c:	00001a45 	.word	0x00001a45

00000c90 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     c90:	b530      	push	{r4, r5, lr}
     c92:	b085      	sub	sp, #20
     c94:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     c96:	4605      	mov	r5, r0
     c98:	b190      	cbz	r0, cc0 <spi_m_sync_transfer+0x30>
     c9a:	1c08      	adds	r0, r1, #0
     c9c:	bf18      	it	ne
     c9e:	2001      	movne	r0, #1
     ca0:	22b3      	movs	r2, #179	; 0xb3
     ca2:	4908      	ldr	r1, [pc, #32]	; (cc4 <spi_m_sync_transfer+0x34>)
     ca4:	4b08      	ldr	r3, [pc, #32]	; (cc8 <spi_m_sync_transfer+0x38>)
     ca6:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     ca8:	6823      	ldr	r3, [r4, #0]
     caa:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
     cac:	6863      	ldr	r3, [r4, #4]
     cae:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
     cb0:	68a3      	ldr	r3, [r4, #8]
     cb2:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     cb4:	a901      	add	r1, sp, #4
     cb6:	1d28      	adds	r0, r5, #4
     cb8:	4b04      	ldr	r3, [pc, #16]	; (ccc <spi_m_sync_transfer+0x3c>)
     cba:	4798      	blx	r3
}
     cbc:	b005      	add	sp, #20
     cbe:	bd30      	pop	{r4, r5, pc}
     cc0:	2000      	movs	r0, #0
     cc2:	e7ed      	b.n	ca0 <spi_m_sync_transfer+0x10>
     cc4:	00004284 	.word	0x00004284
     cc8:	00001429 	.word	0x00001429
     ccc:	00001a75 	.word	0x00001a75

00000cd0 <_spi_m_sync_io_write>:
{
     cd0:	b570      	push	{r4, r5, r6, lr}
     cd2:	b084      	sub	sp, #16
     cd4:	460e      	mov	r6, r1
     cd6:	4615      	mov	r5, r2
	ASSERT(io);
     cd8:	4604      	mov	r4, r0
     cda:	22a3      	movs	r2, #163	; 0xa3
     cdc:	4908      	ldr	r1, [pc, #32]	; (d00 <_spi_m_sync_io_write+0x30>)
     cde:	3000      	adds	r0, #0
     ce0:	bf18      	it	ne
     ce2:	2001      	movne	r0, #1
     ce4:	4b07      	ldr	r3, [pc, #28]	; (d04 <_spi_m_sync_io_write+0x34>)
     ce6:	4798      	blx	r3
	xfer.rxbuf = 0;
     ce8:	2300      	movs	r3, #0
     cea:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     cec:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     cee:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     cf0:	a901      	add	r1, sp, #4
     cf2:	f1a4 000c 	sub.w	r0, r4, #12
     cf6:	4b04      	ldr	r3, [pc, #16]	; (d08 <_spi_m_sync_io_write+0x38>)
     cf8:	4798      	blx	r3
}
     cfa:	b004      	add	sp, #16
     cfc:	bd70      	pop	{r4, r5, r6, pc}
     cfe:	bf00      	nop
     d00:	00004284 	.word	0x00004284
     d04:	00001429 	.word	0x00001429
     d08:	00000c91 	.word	0x00000c91

00000d0c <_spi_m_sync_io_read>:
{
     d0c:	b570      	push	{r4, r5, r6, lr}
     d0e:	b084      	sub	sp, #16
     d10:	460e      	mov	r6, r1
     d12:	4615      	mov	r5, r2
	ASSERT(io);
     d14:	4604      	mov	r4, r0
     d16:	2287      	movs	r2, #135	; 0x87
     d18:	4908      	ldr	r1, [pc, #32]	; (d3c <_spi_m_sync_io_read+0x30>)
     d1a:	3000      	adds	r0, #0
     d1c:	bf18      	it	ne
     d1e:	2001      	movne	r0, #1
     d20:	4b07      	ldr	r3, [pc, #28]	; (d40 <_spi_m_sync_io_read+0x34>)
     d22:	4798      	blx	r3
	xfer.rxbuf = buf;
     d24:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     d26:	2300      	movs	r3, #0
     d28:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     d2a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     d2c:	a901      	add	r1, sp, #4
     d2e:	f1a4 000c 	sub.w	r0, r4, #12
     d32:	4b04      	ldr	r3, [pc, #16]	; (d44 <_spi_m_sync_io_read+0x38>)
     d34:	4798      	blx	r3
}
     d36:	b004      	add	sp, #16
     d38:	bd70      	pop	{r4, r5, r6, pc}
     d3a:	bf00      	nop
     d3c:	00004284 	.word	0x00004284
     d40:	00001429 	.word	0x00001429
     d44:	00000c91 	.word	0x00000c91

00000d48 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     d48:	b538      	push	{r3, r4, r5, lr}
     d4a:	460d      	mov	r5, r1
	ASSERT(spi && io);
     d4c:	4604      	mov	r4, r0
     d4e:	b150      	cbz	r0, d66 <spi_m_sync_get_io_descriptor+0x1e>
     d50:	1c08      	adds	r0, r1, #0
     d52:	bf18      	it	ne
     d54:	2001      	movne	r0, #1
     d56:	22bd      	movs	r2, #189	; 0xbd
     d58:	4904      	ldr	r1, [pc, #16]	; (d6c <spi_m_sync_get_io_descriptor+0x24>)
     d5a:	4b05      	ldr	r3, [pc, #20]	; (d70 <spi_m_sync_get_io_descriptor+0x28>)
     d5c:	4798      	blx	r3
	*io = &spi->io;
     d5e:	340c      	adds	r4, #12
     d60:	602c      	str	r4, [r5, #0]
	return 0;
}
     d62:	2000      	movs	r0, #0
     d64:	bd38      	pop	{r3, r4, r5, pc}
     d66:	2000      	movs	r0, #0
     d68:	e7f5      	b.n	d56 <spi_m_sync_get_io_descriptor+0xe>
     d6a:	bf00      	nop
     d6c:	00004284 	.word	0x00004284
     d70:	00001429 	.word	0x00001429

00000d74 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d76:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     d78:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     d7a:	b12f      	cbz	r7, d88 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     d7c:	688d      	ldr	r5, [r1, #8]
     d7e:	463c      	mov	r4, r7
     d80:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     d82:	f1c2 0e01 	rsb	lr, r2, #1
     d86:	e00b      	b.n	da0 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     d88:	4b0e      	ldr	r3, [pc, #56]	; (dc4 <timer_add_timer_task+0x50>)
     d8a:	4798      	blx	r3
		return;
     d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     d8e:	4473      	add	r3, lr
     d90:	68a0      	ldr	r0, [r4, #8]
     d92:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     d94:	42ab      	cmp	r3, r5
     d96:	d20a      	bcs.n	dae <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     d98:	6823      	ldr	r3, [r4, #0]
     d9a:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     d9c:	b153      	cbz	r3, db4 <timer_add_timer_task+0x40>
     d9e:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     da0:	6863      	ldr	r3, [r4, #4]
     da2:	4293      	cmp	r3, r2
     da4:	d8f3      	bhi.n	d8e <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     da6:	68a0      	ldr	r0, [r4, #8]
     da8:	4403      	add	r3, r0
     daa:	1a9b      	subs	r3, r3, r2
     dac:	e7f2      	b.n	d94 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     dae:	42a7      	cmp	r7, r4
     db0:	d004      	beq.n	dbc <timer_add_timer_task+0x48>
     db2:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     db4:	4620      	mov	r0, r4
     db6:	4b04      	ldr	r3, [pc, #16]	; (dc8 <timer_add_timer_task+0x54>)
     db8:	4798      	blx	r3
     dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     dbc:	4660      	mov	r0, ip
     dbe:	4b01      	ldr	r3, [pc, #4]	; (dc4 <timer_add_timer_task+0x50>)
     dc0:	4798      	blx	r3
     dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     dc4:	00001451 	.word	0x00001451
     dc8:	0000147d 	.word	0x0000147d

00000dcc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     dd0:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     dd2:	6907      	ldr	r7, [r0, #16]
     dd4:	3701      	adds	r7, #1
     dd6:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     dd8:	7e03      	ldrb	r3, [r0, #24]
     dda:	f013 0f01 	tst.w	r3, #1
     dde:	d113      	bne.n	e08 <timer_process_counted+0x3c>
     de0:	7e03      	ldrb	r3, [r0, #24]
     de2:	f013 0f02 	tst.w	r3, #2
     de6:	d10f      	bne.n	e08 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     de8:	b354      	cbz	r4, e40 <timer_process_counted+0x74>
     dea:	6863      	ldr	r3, [r4, #4]
     dec:	1afb      	subs	r3, r7, r3
     dee:	68a2      	ldr	r2, [r4, #8]
     df0:	4293      	cmp	r3, r2
     df2:	d307      	bcc.n	e04 <timer_process_counted+0x38>
     df4:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     df6:	f100 0814 	add.w	r8, r0, #20
     dfa:	f8df 9048 	ldr.w	r9, [pc, #72]	; e44 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     dfe:	f8df a048 	ldr.w	sl, [pc, #72]	; e48 <timer_process_counted+0x7c>
     e02:	e012      	b.n	e2a <timer_process_counted+0x5e>
     e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     e08:	7e03      	ldrb	r3, [r0, #24]
     e0a:	f043 0302 	orr.w	r3, r3, #2
     e0e:	7603      	strb	r3, [r0, #24]
		return;
     e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     e14:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     e16:	68e3      	ldr	r3, [r4, #12]
     e18:	4620      	mov	r0, r4
     e1a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     e1c:	b185      	cbz	r5, e40 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     e1e:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     e20:	686b      	ldr	r3, [r5, #4]
     e22:	1afb      	subs	r3, r7, r3
     e24:	68aa      	ldr	r2, [r5, #8]
     e26:	4293      	cmp	r3, r2
     e28:	d30a      	bcc.n	e40 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     e2a:	4640      	mov	r0, r8
     e2c:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     e2e:	7c23      	ldrb	r3, [r4, #16]
     e30:	2b01      	cmp	r3, #1
     e32:	d1ef      	bne.n	e14 <timer_process_counted+0x48>
			tmp->time_label = time;
     e34:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     e36:	463a      	mov	r2, r7
     e38:	4621      	mov	r1, r4
     e3a:	4640      	mov	r0, r8
     e3c:	47d0      	blx	sl
     e3e:	e7e9      	b.n	e14 <timer_process_counted+0x48>
     e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     e44:	000014c5 	.word	0x000014c5
     e48:	00000d75 	.word	0x00000d75

00000e4c <timer_init>:
{
     e4c:	b538      	push	{r3, r4, r5, lr}
     e4e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     e50:	4604      	mov	r4, r0
     e52:	b178      	cbz	r0, e74 <timer_init+0x28>
     e54:	1c08      	adds	r0, r1, #0
     e56:	bf18      	it	ne
     e58:	2001      	movne	r0, #1
     e5a:	223b      	movs	r2, #59	; 0x3b
     e5c:	4906      	ldr	r1, [pc, #24]	; (e78 <timer_init+0x2c>)
     e5e:	4b07      	ldr	r3, [pc, #28]	; (e7c <timer_init+0x30>)
     e60:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     e62:	4629      	mov	r1, r5
     e64:	4620      	mov	r0, r4
     e66:	4b06      	ldr	r3, [pc, #24]	; (e80 <timer_init+0x34>)
     e68:	4798      	blx	r3
	descr->time                           = 0;
     e6a:	2000      	movs	r0, #0
     e6c:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     e6e:	4b05      	ldr	r3, [pc, #20]	; (e84 <timer_init+0x38>)
     e70:	6023      	str	r3, [r4, #0]
}
     e72:	bd38      	pop	{r3, r4, r5, pc}
     e74:	2000      	movs	r0, #0
     e76:	e7f0      	b.n	e5a <timer_init+0xe>
     e78:	000042a0 	.word	0x000042a0
     e7c:	00001429 	.word	0x00001429
     e80:	0000175d 	.word	0x0000175d
     e84:	00000dcd 	.word	0x00000dcd

00000e88 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     e88:	4b0f      	ldr	r3, [pc, #60]	; (ec8 <_usb_d_find_ep+0x40>)
     e8a:	7859      	ldrb	r1, [r3, #1]
     e8c:	4288      	cmp	r0, r1
     e8e:	d018      	beq.n	ec2 <_usb_d_find_ep+0x3a>
{
     e90:	b430      	push	{r4, r5}
     e92:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     e94:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     e96:	f000 050f 	and.w	r5, r0, #15
     e9a:	e007      	b.n	eac <_usb_d_find_ep+0x24>
     e9c:	3301      	adds	r3, #1
     e9e:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     ea0:	2b04      	cmp	r3, #4
     ea2:	d009      	beq.n	eb8 <_usb_d_find_ep+0x30>
     ea4:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     ea6:	7851      	ldrb	r1, [r2, #1]
     ea8:	4281      	cmp	r1, r0
     eaa:	d007      	beq.n	ebc <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     eac:	7814      	ldrb	r4, [r2, #0]
     eae:	2c00      	cmp	r4, #0
     eb0:	d1f4      	bne.n	e9c <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     eb2:	428d      	cmp	r5, r1
     eb4:	d1f2      	bne.n	e9c <_usb_d_find_ep+0x14>
     eb6:	e001      	b.n	ebc <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     eb8:	f04f 33ff 	mov.w	r3, #4294967295
}
     ebc:	4618      	mov	r0, r3
     ebe:	bc30      	pop	{r4, r5}
     ec0:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     ec2:	2300      	movs	r3, #0
}
     ec4:	4618      	mov	r0, r3
     ec6:	4770      	bx	lr
     ec8:	200004f8 	.word	0x200004f8

00000ecc <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     ecc:	2000      	movs	r0, #0
     ece:	4770      	bx	lr

00000ed0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     ed0:	b538      	push	{r3, r4, r5, lr}
     ed2:	4604      	mov	r4, r0
     ed4:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     ed6:	4b09      	ldr	r3, [pc, #36]	; (efc <usb_d_cb_trans_more+0x2c>)
     ed8:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     eda:	4b09      	ldr	r3, [pc, #36]	; (f00 <usb_d_cb_trans_more+0x30>)
     edc:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     ee0:	789b      	ldrb	r3, [r3, #2]
     ee2:	2b03      	cmp	r3, #3
     ee4:	d001      	beq.n	eea <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     ee6:	2000      	movs	r0, #0
}
     ee8:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
     eea:	4b05      	ldr	r3, [pc, #20]	; (f00 <usb_d_cb_trans_more+0x30>)
     eec:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     ef0:	6983      	ldr	r3, [r0, #24]
     ef2:	4629      	mov	r1, r5
     ef4:	4620      	mov	r0, r4
     ef6:	4798      	blx	r3
     ef8:	bd38      	pop	{r3, r4, r5, pc}
     efa:	bf00      	nop
     efc:	00000e89 	.word	0x00000e89
     f00:	200004f8 	.word	0x200004f8

00000f04 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     f04:	b5f0      	push	{r4, r5, r6, r7, lr}
     f06:	b085      	sub	sp, #20
     f08:	4606      	mov	r6, r0
     f0a:	460d      	mov	r5, r1
     f0c:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     f0e:	4b4d      	ldr	r3, [pc, #308]	; (1044 <_usb_d_cb_trans_done+0x140>)
     f10:	4798      	blx	r3
     f12:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     f14:	2d00      	cmp	r5, #0
     f16:	d15b      	bne.n	fd0 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
     f18:	4a4b      	ldr	r2, [pc, #300]	; (1048 <_usb_d_cb_trans_done+0x144>)
     f1a:	0143      	lsls	r3, r0, #5
     f1c:	18d1      	adds	r1, r2, r3
     f1e:	2000      	movs	r0, #0
     f20:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     f22:	5cd3      	ldrb	r3, [r2, r3]
     f24:	b173      	cbz	r3, f44 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     f26:	4b48      	ldr	r3, [pc, #288]	; (1048 <_usb_d_cb_trans_done+0x144>)
     f28:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     f2c:	2201      	movs	r2, #1
     f2e:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     f30:	4845      	ldr	r0, [pc, #276]	; (1048 <_usb_d_cb_trans_done+0x144>)
     f32:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     f36:	69c3      	ldr	r3, [r0, #28]
     f38:	463a      	mov	r2, r7
     f3a:	78c1      	ldrb	r1, [r0, #3]
     f3c:	4630      	mov	r0, r6
     f3e:	4798      	blx	r3
}
     f40:	b005      	add	sp, #20
     f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     f44:	788b      	ldrb	r3, [r1, #2]
     f46:	2b03      	cmp	r3, #3
     f48:	d00b      	beq.n	f62 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     f4a:	483f      	ldr	r0, [pc, #252]	; (1048 <_usb_d_cb_trans_done+0x144>)
     f4c:	eb00 1244 	add.w	r2, r0, r4, lsl #5
     f50:	4614      	mov	r4, r2
     f52:	69d3      	ldr	r3, [r2, #28]
     f54:	320c      	adds	r2, #12
     f56:	2100      	movs	r1, #0
     f58:	7860      	ldrb	r0, [r4, #1]
     f5a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     f5c:	2302      	movs	r3, #2
     f5e:	70a3      	strb	r3, [r4, #2]
     f60:	e7ee      	b.n	f40 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     f62:	460b      	mov	r3, r1
     f64:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     f68:	460a      	mov	r2, r1
     f6a:	69ce      	ldr	r6, [r1, #28]
     f6c:	320c      	adds	r2, #12
     f6e:	2101      	movs	r1, #1
     f70:	7858      	ldrb	r0, [r3, #1]
     f72:	47b0      	blx	r6
		if (err) {
     f74:	b1a0      	cbz	r0, fa0 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     f76:	4b34      	ldr	r3, [pc, #208]	; (1048 <_usb_d_cb_trans_done+0x144>)
     f78:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     f7c:	2205      	movs	r2, #5
     f7e:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     f80:	2202      	movs	r2, #2
     f82:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     f84:	2d00      	cmp	r5, #0
     f86:	db09      	blt.n	f9c <_usb_d_cb_trans_done+0x98>
     f88:	482f      	ldr	r0, [pc, #188]	; (1048 <_usb_d_cb_trans_done+0x144>)
     f8a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     f8e:	7840      	ldrb	r0, [r0, #1]
     f90:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     f94:	2101      	movs	r1, #1
     f96:	4b2d      	ldr	r3, [pc, #180]	; (104c <_usb_d_cb_trans_done+0x148>)
     f98:	4798      	blx	r3
     f9a:	e7d1      	b.n	f40 <_usb_d_cb_trans_done+0x3c>
     f9c:	7858      	ldrb	r0, [r3, #1]
     f9e:	e7f9      	b.n	f94 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     fa0:	4829      	ldr	r0, [pc, #164]	; (1048 <_usb_d_cb_trans_done+0x144>)
     fa2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     fa6:	2304      	movs	r3, #4
     fa8:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     faa:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
     fac:	2200      	movs	r2, #0
     fae:	9201      	str	r2, [sp, #4]
     fb0:	9202      	str	r2, [sp, #8]
     fb2:	4295      	cmp	r5, r2
     fb4:	bfac      	ite	ge
     fb6:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
     fba:	f003 030f 	andlt.w	r3, r3, #15
     fbe:	f88d 300c 	strb.w	r3, [sp, #12]
     fc2:	2301      	movs	r3, #1
     fc4:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     fc8:	a801      	add	r0, sp, #4
     fca:	4b21      	ldr	r3, [pc, #132]	; (1050 <_usb_d_cb_trans_done+0x14c>)
     fcc:	4798      	blx	r3
     fce:	e7b7      	b.n	f40 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
     fd0:	2d01      	cmp	r5, #1
     fd2:	d00a      	beq.n	fea <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
     fd4:	2d02      	cmp	r5, #2
     fd6:	d01c      	beq.n	1012 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
     fd8:	2d03      	cmp	r5, #3
     fda:	d02a      	beq.n	1032 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     fdc:	4b1a      	ldr	r3, [pc, #104]	; (1048 <_usb_d_cb_trans_done+0x144>)
     fde:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     fe2:	2206      	movs	r2, #6
     fe4:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     fe6:	70da      	strb	r2, [r3, #3]
     fe8:	e7a2      	b.n	f30 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
     fea:	4a17      	ldr	r2, [pc, #92]	; (1048 <_usb_d_cb_trans_done+0x144>)
     fec:	0143      	lsls	r3, r0, #5
     fee:	18d1      	adds	r1, r2, r3
     ff0:	2002      	movs	r0, #2
     ff2:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     ff4:	5cd3      	ldrb	r3, [r2, r3]
     ff6:	b12b      	cbz	r3, 1004 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     ff8:	4b13      	ldr	r3, [pc, #76]	; (1048 <_usb_d_cb_trans_done+0x144>)
     ffa:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     ffe:	2205      	movs	r2, #5
    1000:	709a      	strb	r2, [r3, #2]
    1002:	e795      	b.n	f30 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1004:	460b      	mov	r3, r1
    1006:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1008:	2100      	movs	r1, #0
    100a:	4630      	mov	r0, r6
    100c:	4b0f      	ldr	r3, [pc, #60]	; (104c <_usb_d_cb_trans_done+0x148>)
    100e:	4798      	blx	r3
    1010:	e78e      	b.n	f30 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1012:	4a0d      	ldr	r2, [pc, #52]	; (1048 <_usb_d_cb_trans_done+0x144>)
    1014:	0143      	lsls	r3, r0, #5
    1016:	18d1      	adds	r1, r2, r3
    1018:	2004      	movs	r0, #4
    101a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    101c:	5cd3      	ldrb	r3, [r2, r3]
    101e:	b12b      	cbz	r3, 102c <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1020:	4b09      	ldr	r3, [pc, #36]	; (1048 <_usb_d_cb_trans_done+0x144>)
    1022:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1026:	2201      	movs	r2, #1
    1028:	709a      	strb	r2, [r3, #2]
    102a:	e781      	b.n	f30 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    102c:	2302      	movs	r3, #2
    102e:	708b      	strb	r3, [r1, #2]
			return;
    1030:	e786      	b.n	f40 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1032:	4b05      	ldr	r3, [pc, #20]	; (1048 <_usb_d_cb_trans_done+0x144>)
    1034:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1038:	2200      	movs	r2, #0
    103a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    103c:	2205      	movs	r2, #5
    103e:	70da      	strb	r2, [r3, #3]
    1040:	e776      	b.n	f30 <_usb_d_cb_trans_done+0x2c>
    1042:	bf00      	nop
    1044:	00000e89 	.word	0x00000e89
    1048:	200004f8 	.word	0x200004f8
    104c:	00002a45 	.word	0x00002a45
    1050:	00002bed 	.word	0x00002bed

00001054 <usb_d_cb_trans_setup>:
{
    1054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1058:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    105a:	4b1c      	ldr	r3, [pc, #112]	; (10cc <usb_d_cb_trans_setup+0x78>)
    105c:	4798      	blx	r3
    105e:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    1060:	4c1b      	ldr	r4, [pc, #108]	; (10d0 <usb_d_cb_trans_setup+0x7c>)
    1062:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    1066:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1068:	4621      	mov	r1, r4
    106a:	4628      	mov	r0, r5
    106c:	4b19      	ldr	r3, [pc, #100]	; (10d4 <usb_d_cb_trans_setup+0x80>)
    106e:	4798      	blx	r3
	if (n != 8) {
    1070:	b2c0      	uxtb	r0, r0
    1072:	2808      	cmp	r0, #8
    1074:	d009      	beq.n	108a <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1076:	2101      	movs	r1, #1
    1078:	4628      	mov	r0, r5
    107a:	4c17      	ldr	r4, [pc, #92]	; (10d8 <usb_d_cb_trans_setup+0x84>)
    107c:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    107e:	2101      	movs	r1, #1
    1080:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    1084:	47a0      	blx	r4
		return;
    1086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    108a:	2100      	movs	r1, #0
    108c:	4628      	mov	r0, r5
    108e:	4f12      	ldr	r7, [pc, #72]	; (10d8 <usb_d_cb_trans_setup+0x84>)
    1090:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1092:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    1096:	2100      	movs	r1, #0
    1098:	4640      	mov	r0, r8
    109a:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    109c:	4b0c      	ldr	r3, [pc, #48]	; (10d0 <usb_d_cb_trans_setup+0x7c>)
    109e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    10a2:	2201      	movs	r2, #1
    10a4:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    10a6:	695b      	ldr	r3, [r3, #20]
    10a8:	4621      	mov	r1, r4
    10aa:	4628      	mov	r0, r5
    10ac:	4798      	blx	r3
    10ae:	b108      	cbz	r0, 10b4 <usb_d_cb_trans_setup+0x60>
    10b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    10b4:	4b06      	ldr	r3, [pc, #24]	; (10d0 <usb_d_cb_trans_setup+0x7c>)
    10b6:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    10ba:	2305      	movs	r3, #5
    10bc:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    10be:	2101      	movs	r1, #1
    10c0:	4628      	mov	r0, r5
    10c2:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    10c4:	2101      	movs	r1, #1
    10c6:	4640      	mov	r0, r8
    10c8:	47b8      	blx	r7
    10ca:	e7f1      	b.n	10b0 <usb_d_cb_trans_setup+0x5c>
    10cc:	00000e89 	.word	0x00000e89
    10d0:	200004f8 	.word	0x200004f8
    10d4:	00002b8d 	.word	0x00002b8d
    10d8:	00002a45 	.word	0x00002a45

000010dc <usb_d_init>:

int32_t usb_d_init(void)
{
    10dc:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    10de:	4b11      	ldr	r3, [pc, #68]	; (1124 <usb_d_init+0x48>)
    10e0:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    10e2:	2800      	cmp	r0, #0
    10e4:	db1c      	blt.n	1120 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    10e6:	4c10      	ldr	r4, [pc, #64]	; (1128 <usb_d_init+0x4c>)
    10e8:	2280      	movs	r2, #128	; 0x80
    10ea:	2100      	movs	r1, #0
    10ec:	4620      	mov	r0, r4
    10ee:	4b0f      	ldr	r3, [pc, #60]	; (112c <usb_d_init+0x50>)
    10f0:	4798      	blx	r3
    10f2:	4623      	mov	r3, r4
    10f4:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    10f8:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    10fa:	4a0d      	ldr	r2, [pc, #52]	; (1130 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    10fc:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    10fe:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1100:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1102:	61da      	str	r2, [r3, #28]
    1104:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1106:	4283      	cmp	r3, r0
    1108:	d1f8      	bne.n	10fc <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    110a:	490a      	ldr	r1, [pc, #40]	; (1134 <usb_d_init+0x58>)
    110c:	2000      	movs	r0, #0
    110e:	4c0a      	ldr	r4, [pc, #40]	; (1138 <usb_d_init+0x5c>)
    1110:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1112:	490a      	ldr	r1, [pc, #40]	; (113c <usb_d_init+0x60>)
    1114:	2001      	movs	r0, #1
    1116:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1118:	4909      	ldr	r1, [pc, #36]	; (1140 <usb_d_init+0x64>)
    111a:	2002      	movs	r0, #2
    111c:	47a0      	blx	r4
	return ERR_NONE;
    111e:	2000      	movs	r0, #0
}
    1120:	bd10      	pop	{r4, pc}
    1122:	bf00      	nop
    1124:	00002439 	.word	0x00002439
    1128:	200004f8 	.word	0x200004f8
    112c:	000040b5 	.word	0x000040b5
    1130:	00000ecd 	.word	0x00000ecd
    1134:	00001055 	.word	0x00001055
    1138:	00002df1 	.word	0x00002df1
    113c:	00000ed1 	.word	0x00000ed1
    1140:	00000f05 	.word	0x00000f05

00001144 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    1144:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1146:	4b01      	ldr	r3, [pc, #4]	; (114c <usb_d_register_callback+0x8>)
    1148:	4798      	blx	r3
    114a:	bd08      	pop	{r3, pc}
    114c:	00002dcd 	.word	0x00002dcd

00001150 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    1150:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    1152:	4b01      	ldr	r3, [pc, #4]	; (1158 <usb_d_enable+0x8>)
    1154:	4798      	blx	r3
}
    1156:	bd08      	pop	{r3, pc}
    1158:	00002535 	.word	0x00002535

0000115c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    115c:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    115e:	4b01      	ldr	r3, [pc, #4]	; (1164 <usb_d_attach+0x8>)
    1160:	4798      	blx	r3
    1162:	bd08      	pop	{r3, pc}
    1164:	000025a1 	.word	0x000025a1

00001168 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    1168:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    116a:	4b01      	ldr	r3, [pc, #4]	; (1170 <usb_d_set_address+0x8>)
    116c:	4798      	blx	r3
    116e:	bd08      	pop	{r3, pc}
    1170:	000025b3 	.word	0x000025b3

00001174 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1176:	4606      	mov	r6, r0
    1178:	460c      	mov	r4, r1
    117a:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    117c:	4b0f      	ldr	r3, [pc, #60]	; (11bc <usb_d_ep_init+0x48>)
    117e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1180:	2800      	cmp	r0, #0
    1182:	da14      	bge.n	11ae <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1184:	20ff      	movs	r0, #255	; 0xff
    1186:	4b0d      	ldr	r3, [pc, #52]	; (11bc <usb_d_ep_init+0x48>)
    1188:	4798      	blx	r3
		if (ep_index < 0) {
    118a:	1e05      	subs	r5, r0, #0
    118c:	db12      	blt.n	11b4 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    118e:	463a      	mov	r2, r7
    1190:	4621      	mov	r1, r4
    1192:	4630      	mov	r0, r6
    1194:	4b0a      	ldr	r3, [pc, #40]	; (11c0 <usb_d_ep_init+0x4c>)
    1196:	4798      	blx	r3
	if (rc < 0) {
    1198:	2800      	cmp	r0, #0
    119a:	db0d      	blt.n	11b8 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    119c:	4b09      	ldr	r3, [pc, #36]	; (11c4 <usb_d_ep_init+0x50>)
    119e:	0168      	lsls	r0, r5, #5
    11a0:	181a      	adds	r2, r3, r0
    11a2:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    11a4:	f004 0403 	and.w	r4, r4, #3
    11a8:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    11aa:	2000      	movs	r0, #0
    11ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    11ae:	f06f 0013 	mvn.w	r0, #19
    11b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    11b4:	f06f 0014 	mvn.w	r0, #20
}
    11b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11ba:	bf00      	nop
    11bc:	00000e89 	.word	0x00000e89
    11c0:	000025c1 	.word	0x000025c1
    11c4:	200004f8 	.word	0x200004f8

000011c8 <usb_d_ep0_init>:
{
    11c8:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    11ca:	4602      	mov	r2, r0
    11cc:	2100      	movs	r1, #0
    11ce:	4608      	mov	r0, r1
    11d0:	4b01      	ldr	r3, [pc, #4]	; (11d8 <usb_d_ep0_init+0x10>)
    11d2:	4798      	blx	r3
}
    11d4:	bd08      	pop	{r3, pc}
    11d6:	bf00      	nop
    11d8:	00001175 	.word	0x00001175

000011dc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    11dc:	b538      	push	{r3, r4, r5, lr}
    11de:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    11e0:	4b06      	ldr	r3, [pc, #24]	; (11fc <usb_d_ep_deinit+0x20>)
    11e2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    11e4:	1e04      	subs	r4, r0, #0
    11e6:	db07      	blt.n	11f8 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    11e8:	4628      	mov	r0, r5
    11ea:	4b05      	ldr	r3, [pc, #20]	; (1200 <usb_d_ep_deinit+0x24>)
    11ec:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    11ee:	4805      	ldr	r0, [pc, #20]	; (1204 <usb_d_ep_deinit+0x28>)
    11f0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    11f4:	23ff      	movs	r3, #255	; 0xff
    11f6:	7043      	strb	r3, [r0, #1]
    11f8:	bd38      	pop	{r3, r4, r5, pc}
    11fa:	bf00      	nop
    11fc:	00000e89 	.word	0x00000e89
    1200:	000026d9 	.word	0x000026d9
    1204:	200004f8 	.word	0x200004f8

00001208 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1208:	b538      	push	{r3, r4, r5, lr}
    120a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    120c:	4b0e      	ldr	r3, [pc, #56]	; (1248 <usb_d_ep_enable+0x40>)
    120e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1210:	1e04      	subs	r4, r0, #0
    1212:	db16      	blt.n	1242 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1214:	0163      	lsls	r3, r4, #5
    1216:	4a0d      	ldr	r2, [pc, #52]	; (124c <usb_d_ep_enable+0x44>)
    1218:	5cd3      	ldrb	r3, [r2, r3]
    121a:	2b00      	cmp	r3, #0
    121c:	bf0c      	ite	eq
    121e:	2202      	moveq	r2, #2
    1220:	2201      	movne	r2, #1
    1222:	4b0a      	ldr	r3, [pc, #40]	; (124c <usb_d_ep_enable+0x44>)
    1224:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1228:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    122a:	4628      	mov	r0, r5
    122c:	4b08      	ldr	r3, [pc, #32]	; (1250 <usb_d_ep_enable+0x48>)
    122e:	4798      	blx	r3
	if (rc < 0) {
    1230:	2800      	cmp	r0, #0
    1232:	db00      	blt.n	1236 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1234:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1236:	4b05      	ldr	r3, [pc, #20]	; (124c <usb_d_ep_enable+0x44>)
    1238:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    123c:	2300      	movs	r3, #0
    123e:	70a3      	strb	r3, [r4, #2]
    1240:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    1242:	f06f 0011 	mvn.w	r0, #17
    1246:	e7f5      	b.n	1234 <usb_d_ep_enable+0x2c>
    1248:	00000e89 	.word	0x00000e89
    124c:	200004f8 	.word	0x200004f8
    1250:	0000279d 	.word	0x0000279d

00001254 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1258:	b086      	sub	sp, #24
    125a:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    125c:	7a07      	ldrb	r7, [r0, #8]
    125e:	4638      	mov	r0, r7
    1260:	4b3f      	ldr	r3, [pc, #252]	; (1360 <usb_d_ep_transfer+0x10c>)
    1262:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1264:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    1266:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    126a:	1e06      	subs	r6, r0, #0
    126c:	db72      	blt.n	1354 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    126e:	a804      	add	r0, sp, #16
    1270:	4b3c      	ldr	r3, [pc, #240]	; (1364 <usb_d_ep_transfer+0x110>)
    1272:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1274:	4b3c      	ldr	r3, [pc, #240]	; (1368 <usb_d_ep_transfer+0x114>)
    1276:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    127a:	789b      	ldrb	r3, [r3, #2]
    127c:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    1280:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1284:	b2db      	uxtb	r3, r3
    1286:	2b01      	cmp	r3, #1
    1288:	d011      	beq.n	12ae <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    128a:	a804      	add	r0, sp, #16
    128c:	4b37      	ldr	r3, [pc, #220]	; (136c <usb_d_ep_transfer+0x118>)
    128e:	4798      	blx	r3
		switch (state) {
    1290:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1294:	b2db      	uxtb	r3, r3
    1296:	2b05      	cmp	r3, #5
    1298:	d05f      	beq.n	135a <usb_d_ep_transfer+0x106>
    129a:	2b06      	cmp	r3, #6
    129c:	d023      	beq.n	12e6 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    129e:	2b00      	cmp	r3, #0
    12a0:	bf0c      	ite	eq
    12a2:	f06f 0012 	mvneq.w	r0, #18
    12a6:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    12a8:	b006      	add	sp, #24
    12aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    12ae:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1368 <usb_d_ep_transfer+0x114>
    12b2:	ea4f 1946 	mov.w	r9, r6, lsl #5
    12b6:	eb0a 0309 	add.w	r3, sl, r9
    12ba:	2203      	movs	r2, #3
    12bc:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    12be:	a804      	add	r0, sp, #16
    12c0:	4b2a      	ldr	r3, [pc, #168]	; (136c <usb_d_ep_transfer+0x118>)
    12c2:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    12c4:	f81a 3009 	ldrb.w	r3, [sl, r9]
    12c8:	b183      	cbz	r3, 12ec <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    12ca:	7a22      	ldrb	r2, [r4, #8]
    12cc:	3500      	adds	r5, #0
    12ce:	bf18      	it	ne
    12d0:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    12d2:	6823      	ldr	r3, [r4, #0]
    12d4:	9301      	str	r3, [sp, #4]
    12d6:	f8cd 8008 	str.w	r8, [sp, #8]
    12da:	f017 0f80 	tst.w	r7, #128	; 0x80
    12de:	d119      	bne.n	1314 <usb_d_ep_transfer+0xc0>
    12e0:	f002 030f 	and.w	r3, r2, #15
    12e4:	e018      	b.n	1318 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    12e6:	f06f 000f 	mvn.w	r0, #15
    12ea:	e7dd      	b.n	12a8 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    12ec:	4b1e      	ldr	r3, [pc, #120]	; (1368 <usb_d_ep_transfer+0x114>)
    12ee:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    12f2:	7cda      	ldrb	r2, [r3, #19]
    12f4:	7c9d      	ldrb	r5, [r3, #18]
    12f6:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    12fa:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    12fc:	b9a5      	cbnz	r5, 1328 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    12fe:	4b1a      	ldr	r3, [pc, #104]	; (1368 <usb_d_ep_transfer+0x114>)
    1300:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1304:	2304      	movs	r3, #4
    1306:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    1308:	2300      	movs	r3, #0
			zlp                 = true;
    130a:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    130c:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    130e:	6821      	ldr	r1, [r4, #0]
    1310:	9101      	str	r1, [sp, #4]
    1312:	9302      	str	r3, [sp, #8]
    1314:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    1318:	f88d 300c 	strb.w	r3, [sp, #12]
    131c:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1320:	a801      	add	r0, sp, #4
    1322:	4b13      	ldr	r3, [pc, #76]	; (1370 <usb_d_ep_transfer+0x11c>)
    1324:	4798      	blx	r3
	return rc;
    1326:	e7bf      	b.n	12a8 <usb_d_ep_transfer+0x54>
    1328:	4643      	mov	r3, r8
    132a:	45a8      	cmp	r8, r5
    132c:	bf28      	it	cs
    132e:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1330:	4a0d      	ldr	r2, [pc, #52]	; (1368 <usb_d_ep_transfer+0x114>)
    1332:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    1336:	f996 200c 	ldrsb.w	r2, [r6, #12]
    133a:	2a00      	cmp	r2, #0
    133c:	db05      	blt.n	134a <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    133e:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1340:	6821      	ldr	r1, [r4, #0]
    1342:	9101      	str	r1, [sp, #4]
    1344:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1346:	2500      	movs	r5, #0
    1348:	e7ca      	b.n	12e0 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    134a:	429d      	cmp	r5, r3
    134c:	bf94      	ite	ls
    134e:	2500      	movls	r5, #0
    1350:	2501      	movhi	r5, #1
    1352:	e7db      	b.n	130c <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    1354:	f06f 0011 	mvn.w	r0, #17
    1358:	e7a6      	b.n	12a8 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    135a:	2002      	movs	r0, #2
    135c:	e7a4      	b.n	12a8 <usb_d_ep_transfer+0x54>
    135e:	bf00      	nop
    1360:	00000e89 	.word	0x00000e89
    1364:	00002f01 	.word	0x00002f01
    1368:	200004f8 	.word	0x200004f8
    136c:	00002f0f 	.word	0x00002f0f
    1370:	00002bed 	.word	0x00002bed

00001374 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1374:	b538      	push	{r3, r4, r5, lr}
    1376:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1378:	b141      	cbz	r1, 138c <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    137a:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    137c:	bf0c      	ite	eq
    137e:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1380:	2102      	movne	r1, #2
    1382:	4b13      	ldr	r3, [pc, #76]	; (13d0 <usb_d_ep_halt+0x5c>)
    1384:	4798      	blx	r3
    1386:	4603      	mov	r3, r0
	}
}
    1388:	4618      	mov	r0, r3
    138a:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    138c:	4b11      	ldr	r3, [pc, #68]	; (13d4 <usb_d_ep_halt+0x60>)
    138e:	4798      	blx	r3
	if (ep_index < 0) {
    1390:	1e05      	subs	r5, r0, #0
    1392:	db19      	blt.n	13c8 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1394:	2102      	movs	r1, #2
    1396:	4620      	mov	r0, r4
    1398:	4b0d      	ldr	r3, [pc, #52]	; (13d0 <usb_d_ep_halt+0x5c>)
    139a:	4798      	blx	r3
    139c:	4603      	mov	r3, r0
    139e:	2800      	cmp	r0, #0
    13a0:	d0f2      	beq.n	1388 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    13a2:	2100      	movs	r1, #0
    13a4:	4620      	mov	r0, r4
    13a6:	4b0a      	ldr	r3, [pc, #40]	; (13d0 <usb_d_ep_halt+0x5c>)
    13a8:	4798      	blx	r3
		if (rc < 0) {
    13aa:	1e03      	subs	r3, r0, #0
    13ac:	dbec      	blt.n	1388 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    13ae:	4b0a      	ldr	r3, [pc, #40]	; (13d8 <usb_d_ep_halt+0x64>)
    13b0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    13b4:	2201      	movs	r2, #1
    13b6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    13b8:	2103      	movs	r1, #3
    13ba:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    13bc:	69db      	ldr	r3, [r3, #28]
    13be:	2200      	movs	r2, #0
    13c0:	4620      	mov	r0, r4
    13c2:	4798      	blx	r3
	return ERR_NONE;
    13c4:	2300      	movs	r3, #0
    13c6:	e7df      	b.n	1388 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    13c8:	f06f 0311 	mvn.w	r3, #17
    13cc:	e7dc      	b.n	1388 <usb_d_ep_halt+0x14>
    13ce:	bf00      	nop
    13d0:	00002a45 	.word	0x00002a45
    13d4:	00000e89 	.word	0x00000e89
    13d8:	200004f8 	.word	0x200004f8

000013dc <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    13dc:	b538      	push	{r3, r4, r5, lr}
    13de:	460d      	mov	r5, r1
    13e0:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    13e2:	4b0e      	ldr	r3, [pc, #56]	; (141c <usb_d_ep_register_callback+0x40>)
    13e4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    13e6:	4b0e      	ldr	r3, [pc, #56]	; (1420 <usb_d_ep_register_callback+0x44>)
    13e8:	2c00      	cmp	r4, #0
    13ea:	bf08      	it	eq
    13ec:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    13ee:	2800      	cmp	r0, #0
    13f0:	db13      	blt.n	141a <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    13f2:	2d01      	cmp	r5, #1
    13f4:	d008      	beq.n	1408 <usb_d_ep_register_callback+0x2c>
    13f6:	b115      	cbz	r5, 13fe <usb_d_ep_register_callback+0x22>
    13f8:	2d02      	cmp	r5, #2
    13fa:	d00a      	beq.n	1412 <usb_d_ep_register_callback+0x36>
    13fc:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    13fe:	4b09      	ldr	r3, [pc, #36]	; (1424 <usb_d_ep_register_callback+0x48>)
    1400:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1404:	6144      	str	r4, [r0, #20]
		break;
    1406:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1408:	4b06      	ldr	r3, [pc, #24]	; (1424 <usb_d_ep_register_callback+0x48>)
    140a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    140e:	6184      	str	r4, [r0, #24]
		break;
    1410:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1412:	4b04      	ldr	r3, [pc, #16]	; (1424 <usb_d_ep_register_callback+0x48>)
    1414:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1418:	61c4      	str	r4, [r0, #28]
    141a:	bd38      	pop	{r3, r4, r5, pc}
    141c:	00000e89 	.word	0x00000e89
    1420:	00000ecd 	.word	0x00000ecd
    1424:	200004f8 	.word	0x200004f8

00001428 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1428:	b900      	cbnz	r0, 142c <assert+0x4>
		__asm("BKPT #0");
    142a:	be00      	bkpt	0x0000
    142c:	4770      	bx	lr

0000142e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    142e:	6803      	ldr	r3, [r0, #0]
    1430:	b14b      	cbz	r3, 1446 <is_list_element+0x18>
		if (it == element) {
    1432:	428b      	cmp	r3, r1
    1434:	d009      	beq.n	144a <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1436:	681b      	ldr	r3, [r3, #0]
    1438:	b11b      	cbz	r3, 1442 <is_list_element+0x14>
		if (it == element) {
    143a:	4299      	cmp	r1, r3
    143c:	d1fb      	bne.n	1436 <is_list_element+0x8>
			return true;
    143e:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1440:	4770      	bx	lr
	return false;
    1442:	2000      	movs	r0, #0
    1444:	4770      	bx	lr
    1446:	2000      	movs	r0, #0
    1448:	4770      	bx	lr
			return true;
    144a:	2001      	movs	r0, #1
    144c:	4770      	bx	lr
	...

00001450 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1450:	b538      	push	{r3, r4, r5, lr}
    1452:	4604      	mov	r4, r0
    1454:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1456:	4b06      	ldr	r3, [pc, #24]	; (1470 <list_insert_as_head+0x20>)
    1458:	4798      	blx	r3
    145a:	f080 0001 	eor.w	r0, r0, #1
    145e:	2239      	movs	r2, #57	; 0x39
    1460:	4904      	ldr	r1, [pc, #16]	; (1474 <list_insert_as_head+0x24>)
    1462:	b2c0      	uxtb	r0, r0
    1464:	4b04      	ldr	r3, [pc, #16]	; (1478 <list_insert_as_head+0x28>)
    1466:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1468:	6823      	ldr	r3, [r4, #0]
    146a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    146c:	6025      	str	r5, [r4, #0]
    146e:	bd38      	pop	{r3, r4, r5, pc}
    1470:	0000142f 	.word	0x0000142f
    1474:	000042b8 	.word	0x000042b8
    1478:	00001429 	.word	0x00001429

0000147c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    147c:	6803      	ldr	r3, [r0, #0]
    147e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1480:	6001      	str	r1, [r0, #0]
    1482:	4770      	bx	lr

00001484 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    1484:	b570      	push	{r4, r5, r6, lr}
    1486:	4605      	mov	r5, r0
    1488:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    148a:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    148c:	4b0a      	ldr	r3, [pc, #40]	; (14b8 <list_insert_at_end+0x34>)
    148e:	4798      	blx	r3
    1490:	f080 0001 	eor.w	r0, r0, #1
    1494:	224f      	movs	r2, #79	; 0x4f
    1496:	4909      	ldr	r1, [pc, #36]	; (14bc <list_insert_at_end+0x38>)
    1498:	b2c0      	uxtb	r0, r0
    149a:	4b09      	ldr	r3, [pc, #36]	; (14c0 <list_insert_at_end+0x3c>)
    149c:	4798      	blx	r3

	if (!list->head) {
    149e:	682b      	ldr	r3, [r5, #0]
    14a0:	b91b      	cbnz	r3, 14aa <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    14a2:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    14a4:	6033      	str	r3, [r6, #0]
		return;
    14a6:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    14a8:	461c      	mov	r4, r3
	while (it->next) {
    14aa:	6823      	ldr	r3, [r4, #0]
    14ac:	2b00      	cmp	r3, #0
    14ae:	d1fb      	bne.n	14a8 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    14b0:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    14b2:	6033      	str	r3, [r6, #0]
    14b4:	bd70      	pop	{r4, r5, r6, pc}
    14b6:	bf00      	nop
    14b8:	0000142f 	.word	0x0000142f
    14bc:	000042b8 	.word	0x000042b8
    14c0:	00001429 	.word	0x00001429

000014c4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    14c4:	6803      	ldr	r3, [r0, #0]
    14c6:	b10b      	cbz	r3, 14cc <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    14c8:	681a      	ldr	r2, [r3, #0]
    14ca:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    14cc:	4618      	mov	r0, r3
    14ce:	4770      	bx	lr

000014d0 <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    14d0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    14d4:	00c0      	lsls	r0, r0, #3
    14d6:	3801      	subs	r0, #1
    14d8:	4b02      	ldr	r3, [pc, #8]	; (14e4 <_get_cycles_for_us+0x14>)
    14da:	fba3 3000 	umull	r3, r0, r3, r0
    14de:	08c0      	lsrs	r0, r0, #3
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    14e0:	3001      	adds	r0, #1
    14e2:	4770      	bx	lr
    14e4:	cccccccd 	.word	0xcccccccd

000014e8 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    14e8:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    14ec:	fb03 f000 	mul.w	r0, r3, r0
    14f0:	4770      	bx	lr
	...

000014f4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    14f4:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    14f6:	4a11      	ldr	r2, [pc, #68]	; (153c <_init_chip+0x48>)
    14f8:	8813      	ldrh	r3, [r2, #0]
    14fa:	b29b      	uxth	r3, r3
    14fc:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    14fe:	4b10      	ldr	r3, [pc, #64]	; (1540 <_init_chip+0x4c>)
    1500:	4798      	blx	r3
	_oscctrl_init_sources();
    1502:	4b10      	ldr	r3, [pc, #64]	; (1544 <_init_chip+0x50>)
    1504:	4798      	blx	r3
	_mclk_init();
    1506:	4b10      	ldr	r3, [pc, #64]	; (1548 <_init_chip+0x54>)
    1508:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    150a:	4b10      	ldr	r3, [pc, #64]	; (154c <_init_chip+0x58>)
    150c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    150e:	f640 70ff 	movw	r0, #4095	; 0xfff
    1512:	4b0f      	ldr	r3, [pc, #60]	; (1550 <_init_chip+0x5c>)
    1514:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    1516:	4b0f      	ldr	r3, [pc, #60]	; (1554 <_init_chip+0x60>)
    1518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    151a:	62da      	str	r2, [r3, #44]	; 0x2c
    151c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    1520:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    1524:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    1528:	f042 02ef 	orr.w	r2, r2, #239	; 0xef
    152c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    1530:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    1534:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    1538:	bd08      	pop	{r3, pc}
    153a:	bf00      	nop
    153c:	41004000 	.word	0x41004000
    1540:	00001639 	.word	0x00001639
    1544:	00001659 	.word	0x00001659
    1548:	0000162d 	.word	0x0000162d
    154c:	00001675 	.word	0x00001675
    1550:	000015b5 	.word	0x000015b5
    1554:	41008000 	.word	0x41008000

00001558 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1558:	b430      	push	{r4, r5}
    155a:	4814      	ldr	r0, [pc, #80]	; (15ac <_event_system_init+0x54>)
    155c:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1560:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1562:	4c13      	ldr	r4, [pc, #76]	; (15b0 <_event_system_init+0x58>)
    1564:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    1566:	f813 1b01 	ldrb.w	r1, [r3], #1
    156a:	3248      	adds	r2, #72	; 0x48
    156c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1570:	42ab      	cmp	r3, r5
    1572:	d1f7      	bne.n	1564 <_event_system_init+0xc>
    1574:	480d      	ldr	r0, [pc, #52]	; (15ac <_event_system_init+0x54>)
    1576:	f100 0442 	add.w	r4, r0, #66	; 0x42
    157a:	3080      	adds	r0, #128	; 0x80
    157c:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    157e:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    1582:	00ca      	lsls	r2, r1, #3
    1584:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1588:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    158c:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    158e:	f850 3f04 	ldr.w	r3, [r0, #4]!
    1592:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1594:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1598:	43db      	mvns	r3, r3
    159a:	b2db      	uxtb	r3, r3
    159c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    15a0:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    15a2:	2920      	cmp	r1, #32
    15a4:	d1eb      	bne.n	157e <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    15a6:	2000      	movs	r0, #0
    15a8:	bc30      	pop	{r4, r5}
    15aa:	4770      	bx	lr
    15ac:	000042d8 	.word	0x000042d8
    15b0:	4100e000 	.word	0x4100e000

000015b4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    15b4:	f010 0f01 	tst.w	r0, #1
    15b8:	d008      	beq.n	15cc <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    15ba:	4a17      	ldr	r2, [pc, #92]	; (1618 <_gclk_init_generators_by_fref+0x64>)
    15bc:	4b17      	ldr	r3, [pc, #92]	; (161c <_gclk_init_generators_by_fref+0x68>)
    15be:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15c0:	4619      	mov	r1, r3
    15c2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    15c6:	684b      	ldr	r3, [r1, #4]
    15c8:	4213      	tst	r3, r2
    15ca:	d1fc      	bne.n	15c6 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    15cc:	f010 0f08 	tst.w	r0, #8
    15d0:	d008      	beq.n	15e4 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    15d2:	4a13      	ldr	r2, [pc, #76]	; (1620 <_gclk_init_generators_by_fref+0x6c>)
    15d4:	4b11      	ldr	r3, [pc, #68]	; (161c <_gclk_init_generators_by_fref+0x68>)
    15d6:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15d8:	4619      	mov	r1, r3
    15da:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    15de:	684b      	ldr	r3, [r1, #4]
    15e0:	4213      	tst	r3, r2
    15e2:	d1fc      	bne.n	15de <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    15e4:	f010 0f10 	tst.w	r0, #16
    15e8:	d008      	beq.n	15fc <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    15ea:	4a0e      	ldr	r2, [pc, #56]	; (1624 <_gclk_init_generators_by_fref+0x70>)
    15ec:	4b0b      	ldr	r3, [pc, #44]	; (161c <_gclk_init_generators_by_fref+0x68>)
    15ee:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15f0:	4619      	mov	r1, r3
    15f2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    15f6:	684b      	ldr	r3, [r1, #4]
    15f8:	4213      	tst	r3, r2
    15fa:	d1fc      	bne.n	15f6 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    15fc:	f410 6f00 	tst.w	r0, #2048	; 0x800
    1600:	d008      	beq.n	1614 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1602:	4a09      	ldr	r2, [pc, #36]	; (1628 <_gclk_init_generators_by_fref+0x74>)
    1604:	4b05      	ldr	r3, [pc, #20]	; (161c <_gclk_init_generators_by_fref+0x68>)
    1606:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1608:	4619      	mov	r1, r3
    160a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    160e:	684b      	ldr	r3, [r1, #4]
    1610:	4213      	tst	r3, r2
    1612:	d1fc      	bne.n	160e <_gclk_init_generators_by_fref+0x5a>
    1614:	4770      	bx	lr
    1616:	bf00      	nop
    1618:	00010101 	.word	0x00010101
    161c:	40001c00 	.word	0x40001c00
    1620:	00010105 	.word	0x00010105
    1624:	00010106 	.word	0x00010106
    1628:	00041104 	.word	0x00041104

0000162c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    162c:	2201      	movs	r2, #1
    162e:	4b01      	ldr	r3, [pc, #4]	; (1634 <_mclk_init+0x8>)
    1630:	715a      	strb	r2, [r3, #5]
    1632:	4770      	bx	lr
    1634:	40000800 	.word	0x40000800

00001638 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1638:	4b06      	ldr	r3, [pc, #24]	; (1654 <_osc32kctrl_init_sources+0x1c>)
    163a:	f242 028e 	movw	r2, #8334	; 0x208e
    163e:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1640:	2200      	movs	r2, #0
    1642:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1644:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1646:	69d9      	ldr	r1, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1648:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    164c:	61d9      	str	r1, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    164e:	741a      	strb	r2, [r3, #16]
    1650:	4770      	bx	lr
    1652:	bf00      	nop
    1654:	40001400 	.word	0x40001400

00001658 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1658:	4a04      	ldr	r2, [pc, #16]	; (166c <_oscctrl_init_sources+0x14>)
    165a:	4b05      	ldr	r3, [pc, #20]	; (1670 <_oscctrl_init_sources+0x18>)
    165c:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    165e:	461a      	mov	r2, r3
    1660:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1662:	f013 0f02 	tst.w	r3, #2
    1666:	d0fb      	beq.n	1660 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1668:	4770      	bx	lr
    166a:	bf00      	nop
    166c:	03002606 	.word	0x03002606
    1670:	40001000 	.word	0x40001000

00001674 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1674:	4a36      	ldr	r2, [pc, #216]	; (1750 <_oscctrl_init_referenced_generators+0xdc>)
    1676:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1678:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    167c:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1680:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1682:	4611      	mov	r1, r2
    1684:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1688:	684b      	ldr	r3, [r1, #4]
    168a:	4213      	tst	r3, r2
    168c:	d1fc      	bne.n	1688 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    168e:	4a30      	ldr	r2, [pc, #192]	; (1750 <_oscctrl_init_referenced_generators+0xdc>)
    1690:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1692:	f013 0f04 	tst.w	r3, #4
    1696:	d1fb      	bne.n	1690 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1698:	4b2e      	ldr	r3, [pc, #184]	; (1754 <_oscctrl_init_referenced_generators+0xe0>)
    169a:	2200      	movs	r2, #0
    169c:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    169e:	4a2e      	ldr	r2, [pc, #184]	; (1758 <_oscctrl_init_referenced_generators+0xe4>)
    16a0:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    16a2:	461a      	mov	r2, r3
    16a4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    16a8:	f013 0f10 	tst.w	r3, #16
    16ac:	d1fa      	bne.n	16a4 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    16ae:	2200      	movs	r2, #0
    16b0:	4b28      	ldr	r3, [pc, #160]	; (1754 <_oscctrl_init_referenced_generators+0xe0>)
    16b2:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    16b6:	461a      	mov	r2, r3
    16b8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    16bc:	f013 0f04 	tst.w	r3, #4
    16c0:	d1fa      	bne.n	16b8 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    16c2:	2202      	movs	r2, #2
    16c4:	4b23      	ldr	r3, [pc, #140]	; (1754 <_oscctrl_init_referenced_generators+0xe0>)
    16c6:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    16c8:	461a      	mov	r2, r3
    16ca:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    16ce:	f013 0f02 	tst.w	r3, #2
    16d2:	d1fa      	bne.n	16ca <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    16d4:	4b1f      	ldr	r3, [pc, #124]	; (1754 <_oscctrl_init_referenced_generators+0xe0>)
    16d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    16d8:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    16da:	461a      	mov	r2, r3
    16dc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    16e0:	f013 0f08 	tst.w	r3, #8
    16e4:	d1fa      	bne.n	16dc <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    16e6:	2219      	movs	r2, #25
    16e8:	4b1a      	ldr	r3, [pc, #104]	; (1754 <_oscctrl_init_referenced_generators+0xe0>)
    16ea:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    16ee:	461a      	mov	r2, r3
    16f0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    16f4:	f013 0f04 	tst.w	r3, #4
    16f8:	d1fa      	bne.n	16f0 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    16fa:	4b16      	ldr	r3, [pc, #88]	; (1754 <_oscctrl_init_referenced_generators+0xe0>)
    16fc:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1700:	f013 0f01 	tst.w	r3, #1
    1704:	d01d      	beq.n	1742 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1706:	4a13      	ldr	r2, [pc, #76]	; (1754 <_oscctrl_init_referenced_generators+0xe0>)
    1708:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    170a:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    170e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1712:	d1f9      	bne.n	1708 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1714:	4a0e      	ldr	r2, [pc, #56]	; (1750 <_oscctrl_init_referenced_generators+0xdc>)
    1716:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1718:	2b00      	cmp	r3, #0
    171a:	d1fc      	bne.n	1716 <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    171c:	4a0c      	ldr	r2, [pc, #48]	; (1750 <_oscctrl_init_referenced_generators+0xdc>)
    171e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1720:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1724:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1728:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    172a:	4611      	mov	r1, r2
    172c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1730:	684b      	ldr	r3, [r1, #4]
    1732:	4213      	tst	r3, r2
    1734:	d1fc      	bne.n	1730 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1736:	4a06      	ldr	r2, [pc, #24]	; (1750 <_oscctrl_init_referenced_generators+0xdc>)
    1738:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    173a:	f013 0f04 	tst.w	r3, #4
    173e:	d1fb      	bne.n	1738 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    1740:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1742:	4a04      	ldr	r2, [pc, #16]	; (1754 <_oscctrl_init_referenced_generators+0xe0>)
    1744:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1746:	f413 7f80 	tst.w	r3, #256	; 0x100
    174a:	d0fb      	beq.n	1744 <_oscctrl_init_referenced_generators+0xd0>
    174c:	e7e2      	b.n	1714 <_oscctrl_init_referenced_generators+0xa0>
    174e:	bf00      	nop
    1750:	40001c00 	.word	0x40001c00
    1754:	40001000 	.word	0x40001000
    1758:	0401bb80 	.word	0x0401bb80

0000175c <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    175c:	b538      	push	{r3, r4, r5, lr}
    175e:	460c      	mov	r4, r1
	ASSERT(dev);
    1760:	4605      	mov	r5, r0
    1762:	2230      	movs	r2, #48	; 0x30
    1764:	4917      	ldr	r1, [pc, #92]	; (17c4 <_timer_init+0x68>)
    1766:	3000      	adds	r0, #0
    1768:	bf18      	it	ne
    176a:	2001      	movne	r0, #1
    176c:	4b16      	ldr	r3, [pc, #88]	; (17c8 <_timer_init+0x6c>)
    176e:	4798      	blx	r3

	dev->hw = hw;
    1770:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1772:	2301      	movs	r3, #1
    1774:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1776:	f248 0203 	movw	r2, #32771	; 0x8003
    177a:	6923      	ldr	r3, [r4, #16]
    177c:	4213      	tst	r3, r2
    177e:	d1fc      	bne.n	177a <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    1780:	68ea      	ldr	r2, [r5, #12]
    1782:	6913      	ldr	r3, [r2, #16]
    1784:	f013 0f01 	tst.w	r3, #1
    1788:	d1fb      	bne.n	1782 <_timer_init+0x26>
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    178a:	f44f 7380 	mov.w	r3, #256	; 0x100
    178e:	6053      	str	r3, [r2, #4]
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    1790:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1792:	f248 0380 	movw	r3, #32896	; 0x8080
    1796:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1798:	f248 0103 	movw	r1, #32771	; 0x8003
    179c:	6913      	ldr	r3, [r2, #16]
    179e:	420b      	tst	r3, r1
    17a0:	d1fc      	bne.n	179c <_timer_init+0x40>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    17a2:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    17a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    17a8:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    17aa:	6913      	ldr	r3, [r2, #16]
    17ac:	f013 0f60 	tst.w	r3, #96	; 0x60
    17b0:	d1fb      	bne.n	17aa <_timer_init+0x4e>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    17b2:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    17b4:	f44f 7280 	mov.w	r2, #256	; 0x100
    17b8:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    17ba:	4b04      	ldr	r3, [pc, #16]	; (17cc <_timer_init+0x70>)
    17bc:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    17be:	2000      	movs	r0, #0
    17c0:	bd38      	pop	{r3, r4, r5, pc}
    17c2:	bf00      	nop
    17c4:	000043dc 	.word	0x000043dc
    17c8:	00001429 	.word	0x00001429
    17cc:	20000578 	.word	0x20000578

000017d0 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    17d0:	2000      	movs	r0, #0
    17d2:	4770      	bx	lr

000017d4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    17d4:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    17d6:	4b08      	ldr	r3, [pc, #32]	; (17f8 <RTC_Handler+0x24>)
    17d8:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    17da:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    17dc:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    17de:	f413 7f80 	tst.w	r3, #256	; 0x100
    17e2:	d007      	beq.n	17f4 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    17e4:	6823      	ldr	r3, [r4, #0]
    17e6:	b10b      	cbz	r3, 17ec <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    17e8:	4620      	mov	r0, r4
    17ea:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    17ec:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    17ee:	f44f 7280 	mov.w	r2, #256	; 0x100
    17f2:	819a      	strh	r2, [r3, #12]
    17f4:	bd10      	pop	{r4, pc}
    17f6:	bf00      	nop
    17f8:	20000578 	.word	0x20000578

000017fc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    17fc:	b470      	push	{r4, r5, r6}
    17fe:	b089      	sub	sp, #36	; 0x24
    1800:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1802:	466c      	mov	r4, sp
    1804:	4d0d      	ldr	r5, [pc, #52]	; (183c <_sercom_get_hardware_index+0x40>)
    1806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    180a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    180e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1812:	9b00      	ldr	r3, [sp, #0]
    1814:	42b3      	cmp	r3, r6
    1816:	d00d      	beq.n	1834 <_sercom_get_hardware_index+0x38>
    1818:	4631      	mov	r1, r6
    181a:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    181c:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    181e:	f853 2b04 	ldr.w	r2, [r3], #4
    1822:	428a      	cmp	r2, r1
    1824:	d007      	beq.n	1836 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1826:	3001      	adds	r0, #1
    1828:	2808      	cmp	r0, #8
    182a:	d1f8      	bne.n	181e <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    182c:	2000      	movs	r0, #0
}
    182e:	b009      	add	sp, #36	; 0x24
    1830:	bc70      	pop	{r4, r5, r6}
    1832:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1834:	2000      	movs	r0, #0
			return i;
    1836:	b2c0      	uxtb	r0, r0
    1838:	e7f9      	b.n	182e <_sercom_get_hardware_index+0x32>
    183a:	bf00      	nop
    183c:	000043f4 	.word	0x000043f4

00001840 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1840:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1842:	f013 0f01 	tst.w	r3, #1
    1846:	d109      	bne.n	185c <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1848:	6803      	ldr	r3, [r0, #0]
    184a:	f043 0302 	orr.w	r3, r3, #2
    184e:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1850:	69c3      	ldr	r3, [r0, #28]
    1852:	f013 0f03 	tst.w	r3, #3
    1856:	d1fb      	bne.n	1850 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1858:	2000      	movs	r0, #0
    185a:	4770      	bx	lr
		return ERR_BUSY;
    185c:	f06f 0003 	mvn.w	r0, #3
}
    1860:	4770      	bx	lr

00001862 <_spi_sync_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1862:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1864:	f013 0f01 	tst.w	r3, #1
    1868:	d109      	bne.n	187e <_spi_sync_disable+0x1c>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    186a:	6803      	ldr	r3, [r0, #0]
    186c:	f023 0302 	bic.w	r3, r3, #2
    1870:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1872:	69c3      	ldr	r3, [r0, #28]
    1874:	f013 0f03 	tst.w	r3, #3
    1878:	d1fb      	bne.n	1872 <_spi_sync_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    187a:	2000      	movs	r0, #0
    187c:	4770      	bx	lr
		return ERR_BUSY;
    187e:	f06f 0003 	mvn.w	r0, #3
}
    1882:	4770      	bx	lr

00001884 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1884:	b570      	push	{r4, r5, r6, lr}
    1886:	4606      	mov	r6, r0
    1888:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    188a:	4608      	mov	r0, r1
    188c:	4b5d      	ldr	r3, [pc, #372]	; (1a04 <_spi_m_sync_init+0x180>)
    188e:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    1890:	2804      	cmp	r0, #4
    1892:	d00c      	beq.n	18ae <_spi_m_sync_init+0x2a>
    1894:	2806      	cmp	r0, #6
    1896:	bf08      	it	eq
    1898:	2301      	moveq	r3, #1
    189a:	d009      	beq.n	18b0 <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    189c:	2e00      	cmp	r6, #0
    189e:	f000 809f 	beq.w	19e0 <_spi_m_sync_init+0x15c>
    18a2:	2c00      	cmp	r4, #0
    18a4:	f040 80a5 	bne.w	19f2 <_spi_m_sync_init+0x16e>
	return NULL;
    18a8:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    18aa:	2000      	movs	r0, #0
    18ac:	e009      	b.n	18c2 <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    18ae:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    18b0:	4d55      	ldr	r5, [pc, #340]	; (1a08 <_spi_m_sync_init+0x184>)
    18b2:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    18b6:	441d      	add	r5, r3
	ASSERT(dev && hw);
    18b8:	2e00      	cmp	r6, #0
    18ba:	d0f6      	beq.n	18aa <_spi_m_sync_init+0x26>
    18bc:	2001      	movs	r0, #1
    18be:	2c00      	cmp	r4, #0
    18c0:	d0f3      	beq.n	18aa <_spi_m_sync_init+0x26>
    18c2:	f640 123c 	movw	r2, #2364	; 0x93c
    18c6:	4951      	ldr	r1, [pc, #324]	; (1a0c <_spi_m_sync_init+0x188>)
    18c8:	4b51      	ldr	r3, [pc, #324]	; (1a10 <_spi_m_sync_init+0x18c>)
    18ca:	4798      	blx	r3

	if (regs == NULL) {
    18cc:	2d00      	cmp	r5, #0
    18ce:	f000 8084 	beq.w	19da <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    18d2:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    18d4:	f013 0f01 	tst.w	r3, #1
    18d8:	d11d      	bne.n	1916 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    18da:	682b      	ldr	r3, [r5, #0]
    18dc:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    18e0:	69e3      	ldr	r3, [r4, #28]
    18e2:	f013 0f03 	tst.w	r3, #3
    18e6:	d1fb      	bne.n	18e0 <_spi_m_sync_init+0x5c>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    18e8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    18ea:	f013 0f02 	tst.w	r3, #2
    18ee:	d00b      	beq.n	1908 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    18f0:	6823      	ldr	r3, [r4, #0]
    18f2:	f023 0302 	bic.w	r3, r3, #2
    18f6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    18f8:	69e3      	ldr	r3, [r4, #28]
    18fa:	f013 0f03 	tst.w	r3, #3
    18fe:	d1fb      	bne.n	18f8 <_spi_m_sync_init+0x74>
    1900:	69e3      	ldr	r3, [r4, #28]
    1902:	f013 0f02 	tst.w	r3, #2
    1906:	d1fb      	bne.n	1900 <_spi_m_sync_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    1908:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    190c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    190e:	69e3      	ldr	r3, [r4, #28]
    1910:	f013 0f03 	tst.w	r3, #3
    1914:	d1fb      	bne.n	190e <_spi_m_sync_init+0x8a>
    1916:	69e3      	ldr	r3, [r4, #28]
    1918:	f013 0f01 	tst.w	r3, #1
    191c:	d1fb      	bne.n	1916 <_spi_m_sync_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    191e:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1920:	682b      	ldr	r3, [r5, #0]
    1922:	f003 031c 	and.w	r3, r3, #28
    1926:	2b08      	cmp	r3, #8
    1928:	d02e      	beq.n	1988 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    192a:	f640 1206 	movw	r2, #2310	; 0x906
    192e:	4937      	ldr	r1, [pc, #220]	; (1a0c <_spi_m_sync_init+0x188>)
    1930:	1c20      	adds	r0, r4, #0
    1932:	bf18      	it	ne
    1934:	2001      	movne	r0, #1
    1936:	4b36      	ldr	r3, [pc, #216]	; (1a10 <_spi_m_sync_init+0x18c>)
    1938:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    193a:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    193c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1940:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1944:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1946:	69e3      	ldr	r3, [r4, #28]
    1948:	f013 0f03 	tst.w	r3, #3
    194c:	d1fb      	bne.n	1946 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    194e:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    1950:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    1954:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    1958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    195c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    195e:	69e3      	ldr	r3, [r4, #28]
    1960:	f013 0f17 	tst.w	r3, #23
    1964:	d1fb      	bne.n	195e <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1966:	7b2b      	ldrb	r3, [r5, #12]
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1968:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    196a:	7b6b      	ldrb	r3, [r5, #13]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    196c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1970:	686b      	ldr	r3, [r5, #4]
    1972:	f003 0307 	and.w	r3, r3, #7
    1976:	2b00      	cmp	r3, #0
    1978:	bf0c      	ite	eq
    197a:	2301      	moveq	r3, #1
    197c:	2302      	movne	r3, #2
    197e:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    1980:	89eb      	ldrh	r3, [r5, #14]
    1982:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    1984:	2000      	movs	r0, #0
    1986:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    1988:	f640 121a 	movw	r2, #2330	; 0x91a
    198c:	491f      	ldr	r1, [pc, #124]	; (1a0c <_spi_m_sync_init+0x188>)
    198e:	1c20      	adds	r0, r4, #0
    1990:	bf18      	it	ne
    1992:	2001      	movne	r0, #1
    1994:	4b1e      	ldr	r3, [pc, #120]	; (1a10 <_spi_m_sync_init+0x18c>)
    1996:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1998:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    199a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    199e:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    19a2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19a4:	69e3      	ldr	r3, [r4, #28]
    19a6:	f013 0f03 	tst.w	r3, #3
    19aa:	d1fb      	bne.n	19a4 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    19ac:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    19ae:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    19b2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    19b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    19ba:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    19be:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19c0:	69e3      	ldr	r3, [r4, #28]
    19c2:	f013 0f17 	tst.w	r3, #23
    19c6:	d1fb      	bne.n	19c0 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    19c8:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    19ca:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    19cc:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    19ce:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    19d2:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    19d4:	2b00      	cmp	r3, #0
    19d6:	d1fc      	bne.n	19d2 <_spi_m_sync_init+0x14e>
    19d8:	e7ca      	b.n	1970 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    19da:	f06f 000c 	mvn.w	r0, #12
    19de:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    19e0:	f640 123c 	movw	r2, #2364	; 0x93c
    19e4:	4909      	ldr	r1, [pc, #36]	; (1a0c <_spi_m_sync_init+0x188>)
    19e6:	2000      	movs	r0, #0
    19e8:	4b09      	ldr	r3, [pc, #36]	; (1a10 <_spi_m_sync_init+0x18c>)
    19ea:	4798      	blx	r3
		return ERR_INVALID_ARG;
    19ec:	f06f 000c 	mvn.w	r0, #12
    19f0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    19f2:	f640 123c 	movw	r2, #2364	; 0x93c
    19f6:	4905      	ldr	r1, [pc, #20]	; (1a0c <_spi_m_sync_init+0x188>)
    19f8:	2001      	movs	r0, #1
    19fa:	4b05      	ldr	r3, [pc, #20]	; (1a10 <_spi_m_sync_init+0x18c>)
    19fc:	4798      	blx	r3
		return ERR_INVALID_ARG;
    19fe:	f06f 000c 	mvn.w	r0, #12
    1a02:	bd70      	pop	{r4, r5, r6, pc}
    1a04:	000017fd 	.word	0x000017fd
    1a08:	0000442c 	.word	0x0000442c
    1a0c:	00004450 	.word	0x00004450
    1a10:	00001429 	.word	0x00001429

00001a14 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1a14:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1a16:	4604      	mov	r4, r0
    1a18:	b160      	cbz	r0, 1a34 <_spi_m_sync_enable+0x20>
    1a1a:	6800      	ldr	r0, [r0, #0]
    1a1c:	3000      	adds	r0, #0
    1a1e:	bf18      	it	ne
    1a20:	2001      	movne	r0, #1
    1a22:	f640 129b 	movw	r2, #2459	; 0x99b
    1a26:	4904      	ldr	r1, [pc, #16]	; (1a38 <_spi_m_sync_enable+0x24>)
    1a28:	4b04      	ldr	r3, [pc, #16]	; (1a3c <_spi_m_sync_enable+0x28>)
    1a2a:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1a2c:	6820      	ldr	r0, [r4, #0]
    1a2e:	4b04      	ldr	r3, [pc, #16]	; (1a40 <_spi_m_sync_enable+0x2c>)
    1a30:	4798      	blx	r3
}
    1a32:	bd10      	pop	{r4, pc}
    1a34:	2000      	movs	r0, #0
    1a36:	e7f4      	b.n	1a22 <_spi_m_sync_enable+0xe>
    1a38:	00004450 	.word	0x00004450
    1a3c:	00001429 	.word	0x00001429
    1a40:	00001841 	.word	0x00001841

00001a44 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    1a44:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1a46:	4604      	mov	r4, r0
    1a48:	b160      	cbz	r0, 1a64 <_spi_m_sync_disable+0x20>
    1a4a:	6800      	ldr	r0, [r0, #0]
    1a4c:	3000      	adds	r0, #0
    1a4e:	bf18      	it	ne
    1a50:	2001      	movne	r0, #1
    1a52:	f640 12b7 	movw	r2, #2487	; 0x9b7
    1a56:	4904      	ldr	r1, [pc, #16]	; (1a68 <_spi_m_sync_disable+0x24>)
    1a58:	4b04      	ldr	r3, [pc, #16]	; (1a6c <_spi_m_sync_disable+0x28>)
    1a5a:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    1a5c:	6820      	ldr	r0, [r4, #0]
    1a5e:	4b04      	ldr	r3, [pc, #16]	; (1a70 <_spi_m_sync_disable+0x2c>)
    1a60:	4798      	blx	r3
}
    1a62:	bd10      	pop	{r4, pc}
    1a64:	2000      	movs	r0, #0
    1a66:	e7f4      	b.n	1a52 <_spi_m_sync_disable+0xe>
    1a68:	00004450 	.word	0x00004450
    1a6c:	00001429 	.word	0x00001429
    1a70:	00001863 	.word	0x00001863

00001a74 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1a78:	4681      	mov	r9, r0
    1a7a:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    1a7c:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1a7e:	f8d1 8000 	ldr.w	r8, [r1]
    1a82:	684d      	ldr	r5, [r1, #4]
    1a84:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    1a86:	b1a8      	cbz	r0, 1ab4 <_spi_m_sync_trans+0x40>
    1a88:	1c20      	adds	r0, r4, #0
    1a8a:	bf18      	it	ne
    1a8c:	2001      	movne	r0, #1
    1a8e:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
    1a92:	492e      	ldr	r1, [pc, #184]	; (1b4c <_spi_m_sync_trans+0xd8>)
    1a94:	4b2e      	ldr	r3, [pc, #184]	; (1b50 <_spi_m_sync_trans+0xdc>)
    1a96:	4798      	blx	r3
    1a98:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1a9a:	f013 0f07 	tst.w	r3, #7
    1a9e:	d134      	bne.n	1b0a <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1aa0:	69e0      	ldr	r0, [r4, #28]
    1aa2:	f010 0003 	ands.w	r0, r0, #3
    1aa6:	d1fb      	bne.n	1aa0 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1aa8:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1aaa:	f013 0f02 	tst.w	r3, #2
    1aae:	d030      	beq.n	1b12 <_spi_m_sync_trans+0x9e>
    1ab0:	4602      	mov	r2, r0
    1ab2:	e008      	b.n	1ac6 <_spi_m_sync_trans+0x52>
    1ab4:	2000      	movs	r0, #0
    1ab6:	e7ea      	b.n	1a8e <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    1ab8:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1aba:	f013 0f80 	tst.w	r3, #128	; 0x80
    1abe:	d112      	bne.n	1ae6 <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1ac0:	68b3      	ldr	r3, [r6, #8]
    1ac2:	4283      	cmp	r3, r0
    1ac4:	d91e      	bls.n	1b04 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1ac6:	7e23      	ldrb	r3, [r4, #24]
    1ac8:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1aca:	f013 0f04 	tst.w	r3, #4
    1ace:	d024      	beq.n	1b1a <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1ad0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1ad2:	2d00      	cmp	r5, #0
    1ad4:	d0f0      	beq.n	1ab8 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    1ad6:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    1ad8:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    1ada:	bf91      	iteee	ls
    1adc:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1ade:	0a09      	lsrhi	r1, r1, #8
    1ae0:	7069      	strbhi	r1, [r5, #1]
    1ae2:	3502      	addhi	r5, #2
    1ae4:	e7e8      	b.n	1ab8 <_spi_m_sync_trans+0x44>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1ae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1aea:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1aec:	2380      	movs	r3, #128	; 0x80
    1aee:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1af0:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1af4:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1af6:	f013 0f03 	tst.w	r3, #3
    1afa:	d0fb      	beq.n	1af4 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1afc:	2303      	movs	r3, #3
    1afe:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    1b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1b04:	4293      	cmp	r3, r2
    1b06:	d8de      	bhi.n	1ac6 <_spi_m_sync_trans+0x52>
    1b08:	e7f4      	b.n	1af4 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    1b0a:	f06f 0003 	mvn.w	r0, #3
    1b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    1b12:	f06f 0013 	mvn.w	r0, #19
    1b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1b1a:	4290      	cmp	r0, r2
    1b1c:	d8cd      	bhi.n	1aba <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1b1e:	f013 0f01 	tst.w	r3, #1
    1b22:	d0ca      	beq.n	1aba <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1b24:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    1b28:	f1b8 0f00 	cmp.w	r8, #0
    1b2c:	d00b      	beq.n	1b46 <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    1b2e:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    1b32:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    1b34:	bf91      	iteee	ls
    1b36:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    1b3a:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    1b3e:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    1b42:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    1b46:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1b48:	62a1      	str	r1, [r4, #40]	; 0x28
    1b4a:	e7b6      	b.n	1aba <_spi_m_sync_trans+0x46>
    1b4c:	00004450 	.word	0x00004450
    1b50:	00001429 	.word	0x00001429

00001b54 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1b54:	4b03      	ldr	r3, [pc, #12]	; (1b64 <_delay_init+0x10>)
    1b56:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1b5a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1b5c:	2205      	movs	r2, #5
    1b5e:	601a      	str	r2, [r3, #0]
    1b60:	4770      	bx	lr
    1b62:	bf00      	nop
    1b64:	e000e010 	.word	0xe000e010

00001b68 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    1b68:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1b6a:	b303      	cbz	r3, 1bae <_delay_cycles+0x46>
{
    1b6c:	b430      	push	{r4, r5}
    1b6e:	1e5d      	subs	r5, r3, #1
    1b70:	b2ed      	uxtb	r5, r5
	while (n--) {
    1b72:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    1b74:	4a12      	ldr	r2, [pc, #72]	; (1bc0 <_delay_cycles+0x58>)
    1b76:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    1b7a:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1b7c:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1b7e:	6813      	ldr	r3, [r2, #0]
    1b80:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1b84:	d0fb      	beq.n	1b7e <_delay_cycles+0x16>
	while (n--) {
    1b86:	3801      	subs	r0, #1
    1b88:	b2c0      	uxtb	r0, r0
    1b8a:	28ff      	cmp	r0, #255	; 0xff
    1b8c:	d1f5      	bne.n	1b7a <_delay_cycles+0x12>
    1b8e:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    1b92:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    1b96:	3101      	adds	r1, #1
    1b98:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1b9a:	4b09      	ldr	r3, [pc, #36]	; (1bc0 <_delay_cycles+0x58>)
    1b9c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1b9e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1ba0:	461a      	mov	r2, r3
    1ba2:	6813      	ldr	r3, [r2, #0]
    1ba4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1ba8:	d0fb      	beq.n	1ba2 <_delay_cycles+0x3a>
		;
}
    1baa:	bc30      	pop	{r4, r5}
    1bac:	4770      	bx	lr
	SysTick->LOAD = buf;
    1bae:	4b04      	ldr	r3, [pc, #16]	; (1bc0 <_delay_cycles+0x58>)
    1bb0:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1bb2:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1bb4:	461a      	mov	r2, r3
    1bb6:	6813      	ldr	r3, [r2, #0]
    1bb8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1bbc:	d0fb      	beq.n	1bb6 <_delay_cycles+0x4e>
    1bbe:	4770      	bx	lr
    1bc0:	e000e010 	.word	0xe000e010

00001bc4 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1bc4:	2000      	movs	r0, #0
    1bc6:	4770      	bx	lr

00001bc8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1bc8:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1bca:	7c83      	ldrb	r3, [r0, #18]
    1bcc:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1bd0:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    1bd2:	f002 0107 	and.w	r1, r2, #7
    1bd6:	2901      	cmp	r1, #1
    1bd8:	d00b      	beq.n	1bf2 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1bda:	015a      	lsls	r2, r3, #5
    1bdc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1be0:	2110      	movs	r1, #16
    1be2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1be6:	015b      	lsls	r3, r3, #5
    1be8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1bec:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    1bf0:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    1bf2:	f012 0f40 	tst.w	r2, #64	; 0x40
    1bf6:	d00c      	beq.n	1c12 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    1bf8:	7cc2      	ldrb	r2, [r0, #19]
    1bfa:	f36f 1286 	bfc	r2, #6, #1
    1bfe:	74c2      	strb	r2, [r0, #19]
    1c00:	015a      	lsls	r2, r3, #5
    1c02:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1c06:	2180      	movs	r1, #128	; 0x80
    1c08:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1c0c:	2140      	movs	r1, #64	; 0x40
    1c0e:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    1c12:	7cc2      	ldrb	r2, [r0, #19]
    1c14:	f36f 02c3 	bfc	r2, #3, #1
    1c18:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1c1a:	4909      	ldr	r1, [pc, #36]	; (1c40 <_usb_d_dev_handle_setup+0x78>)
    1c1c:	015a      	lsls	r2, r3, #5
    1c1e:	188c      	adds	r4, r1, r2
    1c20:	2500      	movs	r5, #0
    1c22:	72a5      	strb	r5, [r4, #10]
    1c24:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1c26:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    1c2a:	246f      	movs	r4, #111	; 0x6f
    1c2c:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1c30:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1c34:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    1c38:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    1c3a:	7c80      	ldrb	r0, [r0, #18]
    1c3c:	4798      	blx	r3
    1c3e:	bd38      	pop	{r3, r4, r5, pc}
    1c40:	2000057c 	.word	0x2000057c

00001c44 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    1c44:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    1c46:	2320      	movs	r3, #32
    1c48:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1c4c:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1c4e:	7c83      	ldrb	r3, [r0, #18]
    1c50:	f003 030f 	and.w	r3, r3, #15
    1c54:	015b      	lsls	r3, r3, #5
    1c56:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1c5a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1c5e:	4b03      	ldr	r3, [pc, #12]	; (1c6c <_usb_d_dev_handle_stall+0x28>)
    1c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1c62:	6882      	ldr	r2, [r0, #8]
    1c64:	2101      	movs	r1, #1
    1c66:	7c80      	ldrb	r0, [r0, #18]
    1c68:	4798      	blx	r3
    1c6a:	bd08      	pop	{r3, pc}
    1c6c:	2000057c 	.word	0x2000057c

00001c70 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1c70:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1c72:	7c84      	ldrb	r4, [r0, #18]
    1c74:	2cff      	cmp	r4, #255	; 0xff
    1c76:	d003      	beq.n	1c80 <_usb_d_dev_trans_done+0x10>
    1c78:	7cc3      	ldrb	r3, [r0, #19]
    1c7a:	f013 0f40 	tst.w	r3, #64	; 0x40
    1c7e:	d100      	bne.n	1c82 <_usb_d_dev_trans_done+0x12>
    1c80:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    1c82:	7cc2      	ldrb	r2, [r0, #19]
    1c84:	f36f 1286 	bfc	r2, #6, #1
    1c88:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1c8a:	4a03      	ldr	r2, [pc, #12]	; (1c98 <_usb_d_dev_trans_done+0x28>)
    1c8c:	6f15      	ldr	r5, [r2, #112]	; 0x70
    1c8e:	6882      	ldr	r2, [r0, #8]
    1c90:	4620      	mov	r0, r4
    1c92:	47a8      	blx	r5
    1c94:	e7f4      	b.n	1c80 <_usb_d_dev_trans_done+0x10>
    1c96:	bf00      	nop
    1c98:	2000057c 	.word	0x2000057c

00001c9c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1c9c:	b530      	push	{r4, r5, lr}
    1c9e:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1ca0:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1ca2:	2425      	movs	r4, #37	; 0x25
    1ca4:	f88d 4004 	strb.w	r4, [sp, #4]
    1ca8:	244a      	movs	r4, #74	; 0x4a
    1caa:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1cae:	2bff      	cmp	r3, #255	; 0xff
    1cb0:	d01e      	beq.n	1cf0 <_usb_d_dev_trans_stop+0x54>
    1cb2:	7cc4      	ldrb	r4, [r0, #19]
    1cb4:	f014 0f40 	tst.w	r4, #64	; 0x40
    1cb8:	d01a      	beq.n	1cf0 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1cba:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    1cbe:	b1c9      	cbz	r1, 1cf4 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1cc0:	0163      	lsls	r3, r4, #5
    1cc2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1cc6:	2580      	movs	r5, #128	; 0x80
    1cc8:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    1ccc:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1cce:	a902      	add	r1, sp, #8
    1cd0:	440b      	add	r3, r1
    1cd2:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1cd6:	0163      	lsls	r3, r4, #5
    1cd8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1cdc:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1ce0:	0163      	lsls	r3, r4, #5
    1ce2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1ce6:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1cea:	4611      	mov	r1, r2
    1cec:	4b05      	ldr	r3, [pc, #20]	; (1d04 <_usb_d_dev_trans_stop+0x68>)
    1cee:	4798      	blx	r3
}
    1cf0:	b003      	add	sp, #12
    1cf2:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1cf4:	0163      	lsls	r3, r4, #5
    1cf6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1cfa:	2540      	movs	r5, #64	; 0x40
    1cfc:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    1d00:	e7e4      	b.n	1ccc <_usb_d_dev_trans_stop+0x30>
    1d02:	bf00      	nop
    1d04:	00001c71 	.word	0x00001c71

00001d08 <_usb_d_dev_handle_trfail>:
{
    1d08:	b530      	push	{r4, r5, lr}
    1d0a:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1d0c:	7c83      	ldrb	r3, [r0, #18]
    1d0e:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1d12:	2204      	movs	r2, #4
    1d14:	f88d 2004 	strb.w	r2, [sp, #4]
    1d18:	2208      	movs	r2, #8
    1d1a:	f88d 2005 	strb.w	r2, [sp, #5]
    1d1e:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    1d20:	460c      	mov	r4, r1
    1d22:	b391      	cbz	r1, 1d8a <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1d24:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    1d28:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1d2c:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    1d30:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    1d34:	4a32      	ldr	r2, [pc, #200]	; (1e00 <_usb_d_dev_handle_trfail+0xf8>)
    1d36:	440a      	add	r2, r1
    1d38:	7a91      	ldrb	r1, [r2, #10]
    1d3a:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1d3c:	2d02      	cmp	r5, #2
    1d3e:	d02c      	beq.n	1d9a <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    1d40:	f011 0f02 	tst.w	r1, #2
    1d44:	d045      	beq.n	1dd2 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1d46:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1d48:	7a91      	ldrb	r1, [r2, #10]
    1d4a:	f36f 0141 	bfc	r1, #1, #1
    1d4e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1d50:	aa02      	add	r2, sp, #8
    1d52:	4422      	add	r2, r4
    1d54:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1d58:	015a      	lsls	r2, r3, #5
    1d5a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1d5e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1d62:	015b      	lsls	r3, r3, #5
    1d64:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1d68:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1d6c:	f005 0307 	and.w	r3, r5, #7
    1d70:	2b01      	cmp	r3, #1
    1d72:	d143      	bne.n	1dfc <_usb_d_dev_handle_trfail+0xf4>
    1d74:	7cc3      	ldrb	r3, [r0, #19]
    1d76:	f013 0f40 	tst.w	r3, #64	; 0x40
    1d7a:	d03f      	beq.n	1dfc <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1d7c:	09d9      	lsrs	r1, r3, #7
    1d7e:	428c      	cmp	r4, r1
    1d80:	d03c      	beq.n	1dfc <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1d82:	2200      	movs	r2, #0
    1d84:	4b1f      	ldr	r3, [pc, #124]	; (1e04 <_usb_d_dev_handle_trfail+0xfc>)
    1d86:	4798      	blx	r3
    1d88:	e038      	b.n	1dfc <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1d8a:	0159      	lsls	r1, r3, #5
    1d8c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    1d90:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1d94:	f005 0507 	and.w	r5, r5, #7
    1d98:	e7ca      	b.n	1d30 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1d9a:	f011 0f01 	tst.w	r1, #1
    1d9e:	d0cf      	beq.n	1d40 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1da0:	7a91      	ldrb	r1, [r2, #10]
    1da2:	f36f 0100 	bfc	r1, #0, #1
    1da6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1da8:	aa02      	add	r2, sp, #8
    1daa:	4422      	add	r2, r4
    1dac:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1db0:	015a      	lsls	r2, r3, #5
    1db2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1db6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1dba:	015b      	lsls	r3, r3, #5
    1dbc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1dc0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1dc4:	2204      	movs	r2, #4
    1dc6:	1c21      	adds	r1, r4, #0
    1dc8:	bf18      	it	ne
    1dca:	2101      	movne	r1, #1
    1dcc:	4b0d      	ldr	r3, [pc, #52]	; (1e04 <_usb_d_dev_handle_trfail+0xfc>)
    1dce:	4798      	blx	r3
    1dd0:	e014      	b.n	1dfc <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    1dd2:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    1dd6:	4a0a      	ldr	r2, [pc, #40]	; (1e00 <_usb_d_dev_handle_trfail+0xf8>)
    1dd8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    1ddc:	2100      	movs	r1, #0
    1dde:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1de0:	aa02      	add	r2, sp, #8
    1de2:	4414      	add	r4, r2
    1de4:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1de8:	015a      	lsls	r2, r3, #5
    1dea:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1dee:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1df2:	015b      	lsls	r3, r3, #5
    1df4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1df8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    1dfc:	b003      	add	sp, #12
    1dfe:	bd30      	pop	{r4, r5, pc}
    1e00:	2000057c 	.word	0x2000057c
    1e04:	00001c9d 	.word	0x00001c9d

00001e08 <_usb_d_dev_reset_epts>:
{
    1e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e0c:	4d0c      	ldr	r5, [pc, #48]	; (1e40 <_usb_d_dev_reset_epts+0x38>)
    1e0e:	f105 0474 	add.w	r4, r5, #116	; 0x74
    1e12:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1e16:	f04f 0803 	mov.w	r8, #3
    1e1a:	4f0a      	ldr	r7, [pc, #40]	; (1e44 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    1e1c:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1e1e:	4641      	mov	r1, r8
    1e20:	4620      	mov	r0, r4
    1e22:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    1e24:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1e26:	2300      	movs	r3, #0
    1e28:	74e3      	strb	r3, [r4, #19]
    1e2a:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1e2c:	42ac      	cmp	r4, r5
    1e2e:	d1f6      	bne.n	1e1e <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1e30:	2260      	movs	r2, #96	; 0x60
    1e32:	4619      	mov	r1, r3
    1e34:	4802      	ldr	r0, [pc, #8]	; (1e40 <_usb_d_dev_reset_epts+0x38>)
    1e36:	4b04      	ldr	r3, [pc, #16]	; (1e48 <_usb_d_dev_reset_epts+0x40>)
    1e38:	4798      	blx	r3
    1e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e3e:	bf00      	nop
    1e40:	2000057c 	.word	0x2000057c
    1e44:	00001c71 	.word	0x00001c71
    1e48:	000040b5 	.word	0x000040b5

00001e4c <_usb_d_dev_in_next>:
{
    1e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e50:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1e52:	7c84      	ldrb	r4, [r0, #18]
    1e54:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1e58:	4688      	mov	r8, r1
    1e5a:	2900      	cmp	r1, #0
    1e5c:	f000 809f 	beq.w	1f9e <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1e60:	4b58      	ldr	r3, [pc, #352]	; (1fc4 <_usb_d_dev_in_next+0x178>)
    1e62:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1e66:	6958      	ldr	r0, [r3, #20]
    1e68:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1e6c:	8a2b      	ldrh	r3, [r5, #16]
    1e6e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    1e72:	4293      	cmp	r3, r2
    1e74:	f000 808d 	beq.w	1f92 <_usb_d_dev_in_next+0x146>
    1e78:	3b01      	subs	r3, #1
    1e7a:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1e7c:	7cef      	ldrb	r7, [r5, #19]
    1e7e:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    1e82:	f1b8 0f00 	cmp.w	r8, #0
    1e86:	d005      	beq.n	1e94 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1e88:	0162      	lsls	r2, r4, #5
    1e8a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1e8e:	2302      	movs	r3, #2
    1e90:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    1e94:	68a9      	ldr	r1, [r5, #8]
    1e96:	eb0e 0301 	add.w	r3, lr, r1
    1e9a:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    1e9c:	686e      	ldr	r6, [r5, #4]
    1e9e:	42b3      	cmp	r3, r6
    1ea0:	d23f      	bcs.n	1f22 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    1ea2:	1af6      	subs	r6, r6, r3
    1ea4:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    1ea6:	7cea      	ldrb	r2, [r5, #19]
    1ea8:	f012 0f20 	tst.w	r2, #32
    1eac:	d02d      	beq.n	1f0a <_usb_d_dev_in_next+0xbe>
    1eae:	8a2a      	ldrh	r2, [r5, #16]
    1eb0:	4296      	cmp	r6, r2
    1eb2:	bf28      	it	cs
    1eb4:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1eb6:	6829      	ldr	r1, [r5, #0]
    1eb8:	4632      	mov	r2, r6
    1eba:	4419      	add	r1, r3
    1ebc:	68e8      	ldr	r0, [r5, #12]
    1ebe:	4b42      	ldr	r3, [pc, #264]	; (1fc8 <_usb_d_dev_in_next+0x17c>)
    1ec0:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1ec2:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    1ec4:	4b3f      	ldr	r3, [pc, #252]	; (1fc4 <_usb_d_dev_in_next+0x178>)
    1ec6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1eca:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1ecc:	4b3d      	ldr	r3, [pc, #244]	; (1fc4 <_usb_d_dev_in_next+0x178>)
    1ece:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1ed2:	695a      	ldr	r2, [r3, #20]
    1ed4:	f366 020d 	bfi	r2, r6, #0, #14
    1ed8:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1eda:	695a      	ldr	r2, [r3, #20]
    1edc:	f36f 329b 	bfc	r2, #14, #14
    1ee0:	615a      	str	r2, [r3, #20]
	if (!isr) {
    1ee2:	f1b8 0f00 	cmp.w	r8, #0
    1ee6:	d108      	bne.n	1efa <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    1ee8:	2f01      	cmp	r7, #1
    1eea:	bf0c      	ite	eq
    1eec:	224e      	moveq	r2, #78	; 0x4e
    1eee:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1ef0:	0163      	lsls	r3, r4, #5
    1ef2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1ef6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1efa:	0164      	lsls	r4, r4, #5
    1efc:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    1f00:	2380      	movs	r3, #128	; 0x80
    1f02:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    1f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f0a:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    1f0e:	bf28      	it	cs
    1f10:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1f14:	6829      	ldr	r1, [r5, #0]
    1f16:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    1f18:	4a2a      	ldr	r2, [pc, #168]	; (1fc4 <_usb_d_dev_in_next+0x178>)
    1f1a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    1f1e:	6113      	str	r3, [r2, #16]
    1f20:	e7d4      	b.n	1ecc <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    1f22:	7ceb      	ldrb	r3, [r5, #19]
    1f24:	f013 0f10 	tst.w	r3, #16
    1f28:	d00f      	beq.n	1f4a <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    1f2a:	7ceb      	ldrb	r3, [r5, #19]
    1f2c:	f36f 1304 	bfc	r3, #4, #1
    1f30:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1f32:	4b24      	ldr	r3, [pc, #144]	; (1fc4 <_usb_d_dev_in_next+0x178>)
    1f34:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1f38:	695a      	ldr	r2, [r3, #20]
    1f3a:	f36f 020d 	bfc	r2, #0, #14
    1f3e:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1f40:	695a      	ldr	r2, [r3, #20]
    1f42:	f36f 329b 	bfc	r2, #14, #14
    1f46:	615a      	str	r2, [r3, #20]
    1f48:	e7cb      	b.n	1ee2 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    1f4a:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1f4c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1f50:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    1f54:	bf0c      	ite	eq
    1f56:	234b      	moveq	r3, #75	; 0x4b
    1f58:	234a      	movne	r3, #74	; 0x4a
    1f5a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    1f5e:	8a2a      	ldrh	r2, [r5, #16]
    1f60:	ea00 030e 	and.w	r3, r0, lr
    1f64:	429a      	cmp	r2, r3
    1f66:	d005      	beq.n	1f74 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1f68:	2100      	movs	r1, #0
    1f6a:	4628      	mov	r0, r5
    1f6c:	4b17      	ldr	r3, [pc, #92]	; (1fcc <_usb_d_dev_in_next+0x180>)
    1f6e:	4798      	blx	r3
	return;
    1f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    1f74:	7ceb      	ldrb	r3, [r5, #19]
    1f76:	f36f 1386 	bfc	r3, #6, #1
    1f7a:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1f7c:	4b11      	ldr	r3, [pc, #68]	; (1fc4 <_usb_d_dev_in_next+0x178>)
    1f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1f80:	68a9      	ldr	r1, [r5, #8]
    1f82:	7ca8      	ldrb	r0, [r5, #18]
    1f84:	4798      	blx	r3
    1f86:	b9d0      	cbnz	r0, 1fbe <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    1f88:	7ceb      	ldrb	r3, [r5, #19]
    1f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1f8e:	74eb      	strb	r3, [r5, #19]
    1f90:	e7ea      	b.n	1f68 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1f92:	7cef      	ldrb	r7, [r5, #19]
    1f94:	f007 0707 	and.w	r7, r7, #7
    1f98:	f240 30ff 	movw	r0, #1023	; 0x3ff
    1f9c:	e774      	b.n	1e88 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1f9e:	8a03      	ldrh	r3, [r0, #16]
    1fa0:	f240 32ff 	movw	r2, #1023	; 0x3ff
    1fa4:	4293      	cmp	r3, r2
    1fa6:	d107      	bne.n	1fb8 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1fa8:	7cef      	ldrb	r7, [r5, #19]
    1faa:	f007 0707 	and.w	r7, r7, #7
    1fae:	f04f 0e00 	mov.w	lr, #0
    1fb2:	f240 30ff 	movw	r0, #1023	; 0x3ff
    1fb6:	e76d      	b.n	1e94 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1fb8:	f04f 0e00 	mov.w	lr, #0
    1fbc:	e75c      	b.n	1e78 <_usb_d_dev_in_next+0x2c>
    1fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fc2:	bf00      	nop
    1fc4:	2000057c 	.word	0x2000057c
    1fc8:	00003f81 	.word	0x00003f81
    1fcc:	00001c71 	.word	0x00001c71

00001fd0 <_usb_d_dev_out_next>:
{
    1fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fd4:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1fd6:	7c85      	ldrb	r5, [r0, #18]
    1fd8:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1fdc:	4689      	mov	r9, r1
    1fde:	2900      	cmp	r1, #0
    1fe0:	d056      	beq.n	2090 <_usb_d_dev_out_next+0xc0>
    1fe2:	4b74      	ldr	r3, [pc, #464]	; (21b4 <_usb_d_dev_out_next+0x1e4>)
    1fe4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1fe8:	685a      	ldr	r2, [r3, #4]
    1fea:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1fee:	685f      	ldr	r7, [r3, #4]
    1ff0:	f3c7 070d 	ubfx	r7, r7, #0, #14
    1ff4:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1ff6:	8a06      	ldrh	r6, [r0, #16]
    1ff8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1ffc:	429e      	cmp	r6, r3
    1ffe:	f000 80ba 	beq.w	2176 <_usb_d_dev_out_next+0x1a6>
    2002:	3e01      	subs	r6, #1
    2004:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    2006:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    200a:	f894 8013 	ldrb.w	r8, [r4, #19]
    200e:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    2012:	f1b9 0f00 	cmp.w	r9, #0
    2016:	d005      	beq.n	2024 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2018:	016b      	lsls	r3, r5, #5
    201a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    201e:	2201      	movs	r2, #1
    2020:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    2024:	7ce3      	ldrb	r3, [r4, #19]
    2026:	f013 0f20 	tst.w	r3, #32
    202a:	d00d      	beq.n	2048 <_usb_d_dev_out_next+0x78>
    202c:	6862      	ldr	r2, [r4, #4]
    202e:	2a00      	cmp	r2, #0
    2030:	d037      	beq.n	20a2 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    2032:	68a0      	ldr	r0, [r4, #8]
    2034:	1a12      	subs	r2, r2, r0
    2036:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    2038:	6823      	ldr	r3, [r4, #0]
    203a:	42ba      	cmp	r2, r7
    203c:	bf28      	it	cs
    203e:	463a      	movcs	r2, r7
    2040:	68e1      	ldr	r1, [r4, #12]
    2042:	4418      	add	r0, r3
    2044:	4b5c      	ldr	r3, [pc, #368]	; (21b8 <_usb_d_dev_out_next+0x1e8>)
    2046:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2048:	6863      	ldr	r3, [r4, #4]
    204a:	b353      	cbz	r3, 20a2 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    204c:	f1b9 0f00 	cmp.w	r9, #0
    2050:	d040      	beq.n	20d4 <_usb_d_dev_out_next+0x104>
    2052:	8a22      	ldrh	r2, [r4, #16]
    2054:	42ba      	cmp	r2, r7
    2056:	d93d      	bls.n	20d4 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    2058:	7ce3      	ldrb	r3, [r4, #19]
    205a:	f36f 1304 	bfc	r3, #4, #1
    205e:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2060:	68a3      	ldr	r3, [r4, #8]
    2062:	445b      	add	r3, fp
    2064:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    2066:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    206a:	ea4f 1345 	mov.w	r3, r5, lsl #5
    206e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2072:	bf0c      	ite	eq
    2074:	222d      	moveq	r2, #45	; 0x2d
    2076:	2225      	movne	r2, #37	; 0x25
    2078:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    207c:	b915      	cbnz	r5, 2084 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    207e:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    2080:	4b4c      	ldr	r3, [pc, #304]	; (21b4 <_usb_d_dev_out_next+0x1e4>)
    2082:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2084:	2100      	movs	r1, #0
    2086:	4620      	mov	r0, r4
    2088:	4b4c      	ldr	r3, [pc, #304]	; (21bc <_usb_d_dev_out_next+0x1ec>)
    208a:	4798      	blx	r3
	return;
    208c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2090:	8a06      	ldrh	r6, [r0, #16]
    2092:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2096:	429e      	cmp	r6, r3
    2098:	d07b      	beq.n	2192 <_usb_d_dev_out_next+0x1c2>
    209a:	f04f 0b00 	mov.w	fp, #0
    209e:	46da      	mov	sl, fp
    20a0:	e7af      	b.n	2002 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    20a2:	7ce3      	ldrb	r3, [r4, #19]
    20a4:	f013 0f10 	tst.w	r3, #16
    20a8:	d06c      	beq.n	2184 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    20aa:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    20ac:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    20b0:	f043 0320 	orr.w	r3, r3, #32
    20b4:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    20b6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    20b8:	493e      	ldr	r1, [pc, #248]	; (21b4 <_usb_d_dev_out_next+0x1e4>)
    20ba:	016a      	lsls	r2, r5, #5
    20bc:	188b      	adds	r3, r1, r2
    20be:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    20c0:	8a21      	ldrh	r1, [r4, #16]
    20c2:	685a      	ldr	r2, [r3, #4]
    20c4:	f361 329b 	bfi	r2, r1, #14, #14
    20c8:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    20ca:	685a      	ldr	r2, [r3, #4]
    20cc:	f36f 020d 	bfc	r2, #0, #14
    20d0:	605a      	str	r2, [r3, #4]
    20d2:	e01d      	b.n	2110 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    20d4:	68a2      	ldr	r2, [r4, #8]
    20d6:	4452      	add	r2, sl
    20d8:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    20da:	4293      	cmp	r3, r2
    20dc:	d9c3      	bls.n	2066 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    20de:	1a9b      	subs	r3, r3, r2
    20e0:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    20e2:	7ce1      	ldrb	r1, [r4, #19]
    20e4:	f011 0f20 	tst.w	r1, #32
    20e8:	d026      	beq.n	2138 <_usb_d_dev_out_next+0x168>
    20ea:	8a22      	ldrh	r2, [r4, #16]
    20ec:	4293      	cmp	r3, r2
    20ee:	bf28      	it	cs
    20f0:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    20f2:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    20f4:	016a      	lsls	r2, r5, #5
    20f6:	492f      	ldr	r1, [pc, #188]	; (21b4 <_usb_d_dev_out_next+0x1e4>)
    20f8:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    20fa:	4a2e      	ldr	r2, [pc, #184]	; (21b4 <_usb_d_dev_out_next+0x1e4>)
    20fc:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    2100:	6851      	ldr	r1, [r2, #4]
    2102:	f363 319b 	bfi	r1, r3, #14, #14
    2106:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2108:	6853      	ldr	r3, [r2, #4]
    210a:	f36f 030d 	bfc	r3, #0, #14
    210e:	6053      	str	r3, [r2, #4]
	if (!isr) {
    2110:	f1b9 0f00 	cmp.w	r9, #0
    2114:	d108      	bne.n	2128 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    2116:	f1b8 0f01 	cmp.w	r8, #1
    211a:	d025      	beq.n	2168 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    211c:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    211e:	016b      	lsls	r3, r5, #5
    2120:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2124:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2128:	016d      	lsls	r5, r5, #5
    212a:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    212e:	2340      	movs	r3, #64	; 0x40
    2130:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    2134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    2138:	8a21      	ldrh	r1, [r4, #16]
    213a:	428b      	cmp	r3, r1
    213c:	d90a      	bls.n	2154 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    213e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    2142:	d80e      	bhi.n	2162 <_usb_d_dev_out_next+0x192>
    2144:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2148:	6821      	ldr	r1, [r4, #0]
    214a:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    214c:	0169      	lsls	r1, r5, #5
    214e:	4819      	ldr	r0, [pc, #100]	; (21b4 <_usb_d_dev_out_next+0x1e4>)
    2150:	5042      	str	r2, [r0, r1]
    2152:	e7d2      	b.n	20fa <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    2154:	428b      	cmp	r3, r1
    2156:	d2f7      	bcs.n	2148 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    2158:	7ce1      	ldrb	r1, [r4, #19]
    215a:	f041 0120 	orr.w	r1, r1, #32
    215e:	74e1      	strb	r1, [r4, #19]
    2160:	e7f2      	b.n	2148 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    2162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2166:	e7ef      	b.n	2148 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    2168:	4b12      	ldr	r3, [pc, #72]	; (21b4 <_usb_d_dev_out_next+0x1e4>)
    216a:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    216e:	2200      	movs	r2, #0
    2170:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    2172:	222d      	movs	r2, #45	; 0x2d
    2174:	e7d3      	b.n	211e <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    2176:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    217a:	f890 8013 	ldrb.w	r8, [r0, #19]
    217e:	f008 0807 	and.w	r8, r8, #7
    2182:	e749      	b.n	2018 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    2184:	f1b9 0f00 	cmp.w	r9, #0
    2188:	d10b      	bne.n	21a2 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    218a:	68a3      	ldr	r3, [r4, #8]
    218c:	4453      	add	r3, sl
    218e:	60a3      	str	r3, [r4, #8]
    2190:	e769      	b.n	2066 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2192:	f890 8013 	ldrb.w	r8, [r0, #19]
    2196:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    219a:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    219c:	46bb      	mov	fp, r7
    219e:	46ba      	mov	sl, r7
    21a0:	e740      	b.n	2024 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    21a2:	8a23      	ldrh	r3, [r4, #16]
    21a4:	42bb      	cmp	r3, r7
    21a6:	f63f af57 	bhi.w	2058 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    21aa:	68a3      	ldr	r3, [r4, #8]
    21ac:	4453      	add	r3, sl
    21ae:	60a3      	str	r3, [r4, #8]
    21b0:	e759      	b.n	2066 <_usb_d_dev_out_next+0x96>
    21b2:	bf00      	nop
    21b4:	2000057c 	.word	0x2000057c
    21b8:	00003f81 	.word	0x00003f81
    21bc:	00001c71 	.word	0x00001c71

000021c0 <_usb_d_dev_handler>:
{
    21c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    21c4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    21c8:	8c1e      	ldrh	r6, [r3, #32]
    21ca:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    21cc:	b146      	cbz	r6, 21e0 <_usb_d_dev_handler+0x20>
    21ce:	4d91      	ldr	r5, [pc, #580]	; (2414 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    21d0:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    21d2:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    21d6:	f8df 9258 	ldr.w	r9, [pc, #600]	; 2430 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    21da:	f8df 8258 	ldr.w	r8, [pc, #600]	; 2434 <_usb_d_dev_handler+0x274>
    21de:	e0d3      	b.n	2388 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    21e0:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    21e2:	8b1b      	ldrh	r3, [r3, #24]
    21e4:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    21e6:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    21e8:	f013 0f04 	tst.w	r3, #4
    21ec:	d11d      	bne.n	222a <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    21ee:	f413 7f00 	tst.w	r3, #512	; 0x200
    21f2:	d123      	bne.n	223c <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    21f4:	f013 0f80 	tst.w	r3, #128	; 0x80
    21f8:	d147      	bne.n	228a <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    21fa:	f013 0f70 	tst.w	r3, #112	; 0x70
    21fe:	d14f      	bne.n	22a0 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    2200:	f013 0f08 	tst.w	r3, #8
    2204:	d16e      	bne.n	22e4 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    2206:	f013 0f01 	tst.w	r3, #1
    220a:	d0e0      	beq.n	21ce <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    220c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2210:	f240 2201 	movw	r2, #513	; 0x201
    2214:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2216:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2218:	2270      	movs	r2, #112	; 0x70
    221a:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    221c:	4b7e      	ldr	r3, [pc, #504]	; (2418 <_usb_d_dev_handler+0x258>)
    221e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2220:	2100      	movs	r1, #0
    2222:	2004      	movs	r0, #4
    2224:	4798      	blx	r3
    2226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    222a:	2204      	movs	r2, #4
    222c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2230:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    2232:	4b79      	ldr	r3, [pc, #484]	; (2418 <_usb_d_dev_handler+0x258>)
    2234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2236:	4798      	blx	r3
    2238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    223c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2240:	f240 2201 	movw	r2, #513	; 0x201
    2244:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2246:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2248:	2270      	movs	r2, #112	; 0x70
    224a:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    224c:	4b72      	ldr	r3, [pc, #456]	; (2418 <_usb_d_dev_handler+0x258>)
    224e:	891b      	ldrh	r3, [r3, #8]
    2250:	f003 030f 	and.w	r3, r3, #15
    2254:	2b03      	cmp	r3, #3
    2256:	d00e      	beq.n	2276 <_usb_d_dev_handler+0xb6>
    2258:	4b6f      	ldr	r3, [pc, #444]	; (2418 <_usb_d_dev_handler+0x258>)
    225a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    225c:	f003 030f 	and.w	r3, r3, #15
    2260:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2262:	bf08      	it	eq
    2264:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2266:	d007      	beq.n	2278 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    2268:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    226a:	4b6b      	ldr	r3, [pc, #428]	; (2418 <_usb_d_dev_handler+0x258>)
    226c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    226e:	2003      	movs	r0, #3
    2270:	4798      	blx	r3
    2272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2276:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2278:	4b67      	ldr	r3, [pc, #412]	; (2418 <_usb_d_dev_handler+0x258>)
    227a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    227e:	8919      	ldrh	r1, [r3, #8]
    2280:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    2284:	2200      	movs	r2, #0
    2286:	811a      	strh	r2, [r3, #8]
    2288:	e7ef      	b.n	226a <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    228a:	2280      	movs	r2, #128	; 0x80
    228c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2290:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    2292:	4b61      	ldr	r3, [pc, #388]	; (2418 <_usb_d_dev_handler+0x258>)
    2294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2296:	2100      	movs	r1, #0
    2298:	2005      	movs	r0, #5
    229a:	4798      	blx	r3
    229c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    22a0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    22a4:	2270      	movs	r2, #112	; 0x70
    22a6:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    22a8:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    22aa:	f240 2201 	movw	r2, #513	; 0x201
    22ae:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    22b0:	4b5a      	ldr	r3, [pc, #360]	; (241c <_usb_d_dev_handler+0x25c>)
    22b2:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    22b6:	f013 0f01 	tst.w	r3, #1
    22ba:	d00d      	beq.n	22d8 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    22bc:	4a57      	ldr	r2, [pc, #348]	; (241c <_usb_d_dev_handler+0x25c>)
    22be:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    22c0:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    22c4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    22c8:	d1f9      	bne.n	22be <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    22ca:	4b53      	ldr	r3, [pc, #332]	; (2418 <_usb_d_dev_handler+0x258>)
    22cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    22ce:	2100      	movs	r1, #0
    22d0:	2002      	movs	r0, #2
    22d2:	4798      	blx	r3
    22d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    22d8:	4a50      	ldr	r2, [pc, #320]	; (241c <_usb_d_dev_handler+0x25c>)
    22da:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    22dc:	f413 7f80 	tst.w	r3, #256	; 0x100
    22e0:	d0fb      	beq.n	22da <_usb_d_dev_handler+0x11a>
    22e2:	e7f2      	b.n	22ca <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    22e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    22e8:	2400      	movs	r4, #0
    22ea:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    22ee:	2208      	movs	r2, #8
    22f0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    22f2:	2270      	movs	r2, #112	; 0x70
    22f4:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    22f6:	f240 2201 	movw	r2, #513	; 0x201
    22fa:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    22fc:	4b48      	ldr	r3, [pc, #288]	; (2420 <_usb_d_dev_handler+0x260>)
    22fe:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    2300:	4b45      	ldr	r3, [pc, #276]	; (2418 <_usb_d_dev_handler+0x258>)
    2302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2304:	4621      	mov	r1, r4
    2306:	2001      	movs	r0, #1
    2308:	4798      	blx	r3
    230a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    230e:	f011 0f10 	tst.w	r1, #16
    2312:	d109      	bne.n	2328 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2314:	f011 0f40 	tst.w	r1, #64	; 0x40
    2318:	d108      	bne.n	232c <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    231a:	f011 0f20 	tst.w	r1, #32
    231e:	d02f      	beq.n	2380 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    2320:	2100      	movs	r1, #0
    2322:	4b40      	ldr	r3, [pc, #256]	; (2424 <_usb_d_dev_handler+0x264>)
    2324:	4798      	blx	r3
    2326:	e02b      	b.n	2380 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    2328:	47c8      	blx	r9
    232a:	e029      	b.n	2380 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    232c:	2101      	movs	r1, #1
    232e:	4b3d      	ldr	r3, [pc, #244]	; (2424 <_usb_d_dev_handler+0x264>)
    2330:	4798      	blx	r3
    2332:	e025      	b.n	2380 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2334:	f011 0f40 	tst.w	r1, #64	; 0x40
    2338:	d111      	bne.n	235e <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    233a:	f011 0f08 	tst.w	r1, #8
    233e:	d112      	bne.n	2366 <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2340:	f011 0f02 	tst.w	r1, #2
    2344:	d112      	bne.n	236c <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2346:	f003 0307 	and.w	r3, r3, #7
    234a:	2b01      	cmp	r3, #1
    234c:	d118      	bne.n	2380 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    234e:	f011 0f04 	tst.w	r1, #4
    2352:	d10f      	bne.n	2374 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2354:	f011 0f10 	tst.w	r1, #16
    2358:	d012      	beq.n	2380 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    235a:	47c8      	blx	r9
    235c:	e010      	b.n	2380 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    235e:	2101      	movs	r1, #1
    2360:	4b30      	ldr	r3, [pc, #192]	; (2424 <_usb_d_dev_handler+0x264>)
    2362:	4798      	blx	r3
    2364:	e00c      	b.n	2380 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    2366:	2101      	movs	r1, #1
    2368:	47c0      	blx	r8
    236a:	e009      	b.n	2380 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    236c:	2101      	movs	r1, #1
    236e:	4b2e      	ldr	r3, [pc, #184]	; (2428 <_usb_d_dev_handler+0x268>)
    2370:	4798      	blx	r3
    2372:	e005      	b.n	2380 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    2374:	2100      	movs	r1, #0
    2376:	47c0      	blx	r8
    2378:	e002      	b.n	2380 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    237a:	2100      	movs	r1, #0
    237c:	4b29      	ldr	r3, [pc, #164]	; (2424 <_usb_d_dev_handler+0x264>)
    237e:	4798      	blx	r3
    2380:	3401      	adds	r4, #1
    2382:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2384:	2c09      	cmp	r4, #9
    2386:	d042      	beq.n	240e <_usb_d_dev_handler+0x24e>
    2388:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    238a:	7cab      	ldrb	r3, [r5, #18]
    238c:	2bff      	cmp	r3, #255	; 0xff
    238e:	d0f7      	beq.n	2380 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    2390:	f003 030f 	and.w	r3, r3, #15
    2394:	2101      	movs	r1, #1
    2396:	4099      	lsls	r1, r3
    2398:	4231      	tst	r1, r6
    239a:	d0f1      	beq.n	2380 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    239c:	0159      	lsls	r1, r3, #5
    239e:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    23a2:	f501 7180 	add.w	r1, r1, #256	; 0x100
    23a6:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    23a8:	015b      	lsls	r3, r3, #5
    23aa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    23ae:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    23b2:	4019      	ands	r1, r3
    23b4:	d0e4      	beq.n	2380 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    23b6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    23ba:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    23be:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    23c2:	f003 0247 	and.w	r2, r3, #71	; 0x47
    23c6:	2a01      	cmp	r2, #1
    23c8:	d0a1      	beq.n	230e <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    23ca:	f013 0f80 	tst.w	r3, #128	; 0x80
    23ce:	d1b1      	bne.n	2334 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    23d0:	f011 0f20 	tst.w	r1, #32
    23d4:	d1d1      	bne.n	237a <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    23d6:	f011 0f04 	tst.w	r1, #4
    23da:	d10e      	bne.n	23fa <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    23dc:	f011 0f01 	tst.w	r1, #1
    23e0:	d10e      	bne.n	2400 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    23e2:	f003 0307 	and.w	r3, r3, #7
    23e6:	2b01      	cmp	r3, #1
    23e8:	d1ca      	bne.n	2380 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    23ea:	f011 0f08 	tst.w	r1, #8
    23ee:	d10b      	bne.n	2408 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    23f0:	f011 0f10 	tst.w	r1, #16
    23f4:	d0c4      	beq.n	2380 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    23f6:	47c8      	blx	r9
    23f8:	e7c2      	b.n	2380 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    23fa:	2100      	movs	r1, #0
    23fc:	47c0      	blx	r8
    23fe:	e7bf      	b.n	2380 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    2400:	2101      	movs	r1, #1
    2402:	4b0a      	ldr	r3, [pc, #40]	; (242c <_usb_d_dev_handler+0x26c>)
    2404:	4798      	blx	r3
    2406:	e7bb      	b.n	2380 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    2408:	2101      	movs	r1, #1
    240a:	47c0      	blx	r8
    240c:	e7b8      	b.n	2380 <_usb_d_dev_handler+0x1c0>
    240e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2412:	bf00      	nop
    2414:	200005f0 	.word	0x200005f0
    2418:	2000057c 	.word	0x2000057c
    241c:	40001000 	.word	0x40001000
    2420:	00001e09 	.word	0x00001e09
    2424:	00001c45 	.word	0x00001c45
    2428:	00001e4d 	.word	0x00001e4d
    242c:	00001fd1 	.word	0x00001fd1
    2430:	00001bc9 	.word	0x00001bc9
    2434:	00001d09 	.word	0x00001d09

00002438 <_usb_d_dev_init>:
{
    2438:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    243a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    243e:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    2440:	f013 0f01 	tst.w	r3, #1
    2444:	d124      	bne.n	2490 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2446:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    244a:	7893      	ldrb	r3, [r2, #2]
    244c:	f013 0f03 	tst.w	r3, #3
    2450:	d1fb      	bne.n	244a <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    2452:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2456:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    2458:	f013 0f02 	tst.w	r3, #2
    245c:	d00f      	beq.n	247e <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    245e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2462:	7813      	ldrb	r3, [r2, #0]
    2464:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2468:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    246a:	7893      	ldrb	r3, [r2, #2]
    246c:	f013 0f03 	tst.w	r3, #3
    2470:	d1fb      	bne.n	246a <_usb_d_dev_init+0x32>
    2472:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2476:	7893      	ldrb	r3, [r2, #2]
    2478:	f013 0f02 	tst.w	r3, #2
    247c:	d1fb      	bne.n	2476 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    247e:	2201      	movs	r2, #1
    2480:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2484:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2486:	461a      	mov	r2, r3
    2488:	7893      	ldrb	r3, [r2, #2]
    248a:	f013 0f03 	tst.w	r3, #3
    248e:	d1fb      	bne.n	2488 <_usb_d_dev_init+0x50>
    2490:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2494:	7893      	ldrb	r3, [r2, #2]
    2496:	f013 0f01 	tst.w	r3, #1
    249a:	d1fb      	bne.n	2494 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    249c:	4b21      	ldr	r3, [pc, #132]	; (2524 <_usb_d_dev_init+0xec>)
    249e:	4a22      	ldr	r2, [pc, #136]	; (2528 <_usb_d_dev_init+0xf0>)
    24a0:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    24a2:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    24a4:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    24a6:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    24a8:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    24aa:	4b20      	ldr	r3, [pc, #128]	; (252c <_usb_d_dev_init+0xf4>)
    24ac:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    24ae:	4b20      	ldr	r3, [pc, #128]	; (2530 <_usb_d_dev_init+0xf8>)
    24b0:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    24b2:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    24b6:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    24ba:	f011 011f 	ands.w	r1, r1, #31
    24be:	d02b      	beq.n	2518 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    24c0:	291f      	cmp	r1, #31
    24c2:	bf08      	it	eq
    24c4:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    24c6:	b34b      	cbz	r3, 251c <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    24c8:	2b1f      	cmp	r3, #31
    24ca:	bf08      	it	eq
    24cc:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    24ce:	b33a      	cbz	r2, 2520 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    24d0:	2a07      	cmp	r2, #7
    24d2:	bf08      	it	eq
    24d4:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    24d6:	f003 031f 	and.w	r3, r3, #31
    24da:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    24de:	0312      	lsls	r2, r2, #12
    24e0:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    24e4:	4313      	orrs	r3, r2
    24e6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    24ea:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    24ec:	78d3      	ldrb	r3, [r2, #3]
    24ee:	f043 0303 	orr.w	r3, r3, #3
    24f2:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    24f4:	78d3      	ldrb	r3, [r2, #3]
    24f6:	f043 030c 	orr.w	r3, r3, #12
    24fa:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    24fc:	2304      	movs	r3, #4
    24fe:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2500:	7893      	ldrb	r3, [r2, #2]
    2502:	f013 0f03 	tst.w	r3, #3
    2506:	d1fb      	bne.n	2500 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    2508:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    250c:	4a05      	ldr	r2, [pc, #20]	; (2524 <_usb_d_dev_init+0xec>)
    250e:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    2510:	2201      	movs	r2, #1
    2512:	811a      	strh	r2, [r3, #8]
}
    2514:	2000      	movs	r0, #0
    2516:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    2518:	2109      	movs	r1, #9
    251a:	e7d4      	b.n	24c6 <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    251c:	2319      	movs	r3, #25
    251e:	e7d6      	b.n	24ce <_usb_d_dev_init+0x96>
		pad_trim = 6;
    2520:	2206      	movs	r2, #6
    2522:	e7d8      	b.n	24d6 <_usb_d_dev_init+0x9e>
    2524:	2000057c 	.word	0x2000057c
    2528:	00001bc5 	.word	0x00001bc5
    252c:	00001e09 	.word	0x00001e09
    2530:	00800084 	.word	0x00800084

00002534 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    2534:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2538:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    253a:	f013 0f03 	tst.w	r3, #3
    253e:	d129      	bne.n	2594 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2540:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2544:	7893      	ldrb	r3, [r2, #2]
    2546:	f013 0f03 	tst.w	r3, #3
    254a:	d1fb      	bne.n	2544 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    254c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2550:	781b      	ldrb	r3, [r3, #0]
    2552:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    2554:	f013 0f02 	tst.w	r3, #2
    2558:	d108      	bne.n	256c <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    255a:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    255e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2562:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2564:	7893      	ldrb	r3, [r2, #2]
    2566:	f013 0f03 	tst.w	r3, #3
    256a:	d1fb      	bne.n	2564 <_usb_d_dev_enable+0x30>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    256c:	4b0b      	ldr	r3, [pc, #44]	; (259c <_usb_d_dev_enable+0x68>)
    256e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2572:	609a      	str	r2, [r3, #8]
    2574:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2578:	609a      	str	r2, [r3, #8]
    257a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    257e:	609a      	str	r2, [r3, #8]
    2580:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2584:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2586:	f240 228d 	movw	r2, #653	; 0x28d
    258a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    258e:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    2590:	2000      	movs	r0, #0
    2592:	4770      	bx	lr
		return -USB_ERR_DENIED;
    2594:	f06f 0010 	mvn.w	r0, #16
}
    2598:	4770      	bx	lr
    259a:	bf00      	nop
    259c:	e000e100 	.word	0xe000e100

000025a0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    25a0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    25a4:	8913      	ldrh	r3, [r2, #8]
    25a6:	f023 0301 	bic.w	r3, r3, #1
    25aa:	041b      	lsls	r3, r3, #16
    25ac:	0c1b      	lsrs	r3, r3, #16
    25ae:	8113      	strh	r3, [r2, #8]
    25b0:	4770      	bx	lr

000025b2 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    25b2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    25b6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    25ba:	7298      	strb	r0, [r3, #10]
    25bc:	4770      	bx	lr
	...

000025c0 <_usb_d_dev_ep_init>:
{
    25c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25c2:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    25c6:	f010 050f 	ands.w	r5, r0, #15
    25ca:	d04d      	beq.n	2668 <_usb_d_dev_ep_init+0xa8>
    25cc:	f1be 0f00 	cmp.w	lr, #0
    25d0:	bfb4      	ite	lt
    25d2:	1cac      	addlt	r4, r5, #2
    25d4:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    25d6:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    25da:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    25dc:	2d02      	cmp	r5, #2
    25de:	d947      	bls.n	2670 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    25e0:	f06f 0011 	mvn.w	r0, #17
    25e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    25e6:	f1be 0f00 	cmp.w	lr, #0
    25ea:	db1b      	blt.n	2624 <_usb_d_dev_ep_init+0x64>
    25ec:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    25f0:	4e37      	ldr	r6, [pc, #220]	; (26d0 <_usb_d_dev_ep_init+0x110>)
    25f2:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    25f6:	2d00      	cmp	r5, #0
    25f8:	d15e      	bne.n	26b8 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    25fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    25fe:	4d34      	ldr	r5, [pc, #208]	; (26d0 <_usb_d_dev_ep_init+0x110>)
    2600:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    2604:	4d33      	ldr	r5, [pc, #204]	; (26d4 <_usb_d_dev_ep_init+0x114>)
    2606:	00a6      	lsls	r6, r4, #2
    2608:	1933      	adds	r3, r6, r4
    260a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    260e:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    2612:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    2616:	3101      	adds	r1, #1
    2618:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    261c:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    2620:	2000      	movs	r0, #0
    2622:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2624:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2628:	4e29      	ldr	r6, [pc, #164]	; (26d0 <_usb_d_dev_ep_init+0x110>)
    262a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    262e:	686d      	ldr	r5, [r5, #4]
    2630:	b935      	cbnz	r5, 2640 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2632:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2636:	4d26      	ldr	r5, [pc, #152]	; (26d0 <_usb_d_dev_ep_init+0x110>)
    2638:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    263c:	685f      	ldr	r7, [r3, #4]
    263e:	e7e1      	b.n	2604 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2640:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2644:	4e22      	ldr	r6, [pc, #136]	; (26d0 <_usb_d_dev_ep_init+0x110>)
    2646:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    264a:	896d      	ldrh	r5, [r5, #10]
    264c:	4295      	cmp	r5, r2
    264e:	daf0      	bge.n	2632 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    2650:	f06f 0012 	mvn.w	r0, #18
    2654:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    2656:	f06f 0013 	mvn.w	r0, #19
    265a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    265c:	f06f 0013 	mvn.w	r0, #19
    2660:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    2662:	f06f 0012 	mvn.w	r0, #18
    2666:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2668:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    266c:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    266e:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    2670:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    2674:	4f17      	ldr	r7, [pc, #92]	; (26d4 <_usb_d_dev_ep_init+0x114>)
    2676:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    267a:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    267e:	2eff      	cmp	r6, #255	; 0xff
    2680:	d1e9      	bne.n	2656 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    2682:	2900      	cmp	r1, #0
    2684:	d1af      	bne.n	25e6 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2686:	b125      	cbz	r5, 2692 <_usb_d_dev_ep_init+0xd2>
    2688:	f1be 0f00 	cmp.w	lr, #0
    268c:	bfa4      	itt	ge
    268e:	3502      	addge	r5, #2
    2690:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    2692:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2696:	4e0f      	ldr	r6, [pc, #60]	; (26d4 <_usb_d_dev_ep_init+0x114>)
    2698:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    269c:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    26a0:	2dff      	cmp	r5, #255	; 0xff
    26a2:	d1db      	bne.n	265c <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    26a4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    26a8:	4e09      	ldr	r6, [pc, #36]	; (26d0 <_usb_d_dev_ep_init+0x110>)
    26aa:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    26ae:	2d00      	cmp	r5, #0
    26b0:	d0d7      	beq.n	2662 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    26b2:	f1be 0f00 	cmp.w	lr, #0
    26b6:	dbb5      	blt.n	2624 <_usb_d_dev_ep_init+0x64>
    26b8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    26bc:	4e04      	ldr	r6, [pc, #16]	; (26d0 <_usb_d_dev_ep_init+0x110>)
    26be:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    26c2:	892d      	ldrh	r5, [r5, #8]
    26c4:	4295      	cmp	r5, r2
    26c6:	da98      	bge.n	25fa <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    26c8:	f06f 0012 	mvn.w	r0, #18
    26cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26ce:	bf00      	nop
    26d0:	0000446c 	.word	0x0000446c
    26d4:	2000057c 	.word	0x2000057c

000026d8 <_usb_d_dev_ep_deinit>:
{
    26d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26da:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    26dc:	f010 060f 	ands.w	r6, r0, #15
    26e0:	d00e      	beq.n	2700 <_usb_d_dev_ep_deinit+0x28>
    26e2:	2f00      	cmp	r7, #0
    26e4:	bfb4      	ite	lt
    26e6:	1cb3      	addlt	r3, r6, #2
    26e8:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    26ea:	2e02      	cmp	r6, #2
    26ec:	d900      	bls.n	26f0 <_usb_d_dev_ep_deinit+0x18>
    26ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    26f0:	461d      	mov	r5, r3
    26f2:	3301      	adds	r3, #1
    26f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    26f8:	4a24      	ldr	r2, [pc, #144]	; (278c <_usb_d_dev_ep_deinit+0xb4>)
    26fa:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    26fe:	e002      	b.n	2706 <_usb_d_dev_ep_deinit+0x2e>
    2700:	f8df e094 	ldr.w	lr, [pc, #148]	; 2798 <_usb_d_dev_ep_deinit+0xc0>
    2704:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2706:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    270a:	4a21      	ldr	r2, [pc, #132]	; (2790 <_usb_d_dev_ep_deinit+0xb8>)
    270c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2710:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    2714:	2aff      	cmp	r2, #255	; 0xff
    2716:	d0ea      	beq.n	26ee <_usb_d_dev_ep_deinit+0x16>
    2718:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    271a:	2203      	movs	r2, #3
    271c:	0ff9      	lsrs	r1, r7, #31
    271e:	4670      	mov	r0, lr
    2720:	4b1c      	ldr	r3, [pc, #112]	; (2794 <_usb_d_dev_ep_deinit+0xbc>)
    2722:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2724:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2728:	4a19      	ldr	r2, [pc, #100]	; (2790 <_usb_d_dev_ep_deinit+0xb8>)
    272a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    272e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2732:	f003 0307 	and.w	r3, r3, #7
    2736:	2b01      	cmp	r3, #1
    2738:	d016      	beq.n	2768 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    273a:	2f00      	cmp	r7, #0
    273c:	db1b      	blt.n	2776 <_usb_d_dev_ep_deinit+0x9e>
    273e:	0160      	lsls	r0, r4, #5
    2740:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    2744:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    2748:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    274c:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    2750:	4b0f      	ldr	r3, [pc, #60]	; (2790 <_usb_d_dev_ep_deinit+0xb8>)
    2752:	00aa      	lsls	r2, r5, #2
    2754:	1951      	adds	r1, r2, r5
    2756:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    275a:	2000      	movs	r0, #0
    275c:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    2760:	22ff      	movs	r2, #255	; 0xff
    2762:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    2766:	e7c2      	b.n	26ee <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    2768:	0160      	lsls	r0, r4, #5
    276a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    276e:	2300      	movs	r3, #0
    2770:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    2774:	e7ec      	b.n	2750 <_usb_d_dev_ep_deinit+0x78>
    2776:	0176      	lsls	r6, r6, #5
    2778:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    277c:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    2780:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    2784:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    2788:	e7e2      	b.n	2750 <_usb_d_dev_ep_deinit+0x78>
    278a:	bf00      	nop
    278c:	200005dc 	.word	0x200005dc
    2790:	2000057c 	.word	0x2000057c
    2794:	00001c9d 	.word	0x00001c9d
    2798:	200005f0 	.word	0x200005f0

0000279c <_usb_d_dev_ep_enable>:
{
    279c:	b5f0      	push	{r4, r5, r6, r7, lr}
    279e:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    27a0:	f010 000f 	ands.w	r0, r0, #15
    27a4:	f000 80a6 	beq.w	28f4 <_usb_d_dev_ep_enable+0x158>
    27a8:	2f00      	cmp	r7, #0
    27aa:	bfb4      	ite	lt
    27ac:	1c83      	addlt	r3, r0, #2
    27ae:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    27b0:	4606      	mov	r6, r0
    27b2:	0142      	lsls	r2, r0, #5
    27b4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    27b8:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    27bc:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    27be:	2802      	cmp	r0, #2
    27c0:	f240 809f 	bls.w	2902 <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    27c4:	f06f 0011 	mvn.w	r0, #17
    27c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    27ca:	f014 0f77 	tst.w	r4, #119	; 0x77
    27ce:	f040 8088 	bne.w	28e2 <_usb_d_dev_ep_enable+0x146>
    27d2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    27d6:	2111      	movs	r1, #17
    27d8:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    27dc:	4c97      	ldr	r4, [pc, #604]	; (2a3c <_usb_d_dev_ep_enable+0x2a0>)
    27de:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    27e2:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    27e6:	4996      	ldr	r1, [pc, #600]	; (2a40 <_usb_d_dev_ep_enable+0x2a4>)
    27e8:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    27ec:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    27f0:	f200 80cc 	bhi.w	298c <_usb_d_dev_ep_enable+0x1f0>
    27f4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    27f8:	f200 810a 	bhi.w	2a10 <_usb_d_dev_ep_enable+0x274>
    27fc:	2c80      	cmp	r4, #128	; 0x80
    27fe:	f200 80f9 	bhi.w	29f4 <_usb_d_dev_ep_enable+0x258>
    2802:	2c40      	cmp	r4, #64	; 0x40
    2804:	f200 810b 	bhi.w	2a1e <_usb_d_dev_ep_enable+0x282>
    2808:	2c20      	cmp	r4, #32
    280a:	f200 80fa 	bhi.w	2a02 <_usb_d_dev_ep_enable+0x266>
    280e:	2c10      	cmp	r4, #16
    2810:	f200 810c 	bhi.w	2a2c <_usb_d_dev_ep_enable+0x290>
    2814:	2c08      	cmp	r4, #8
    2816:	bf94      	ite	ls
    2818:	2700      	movls	r7, #0
    281a:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    281c:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2820:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2822:	f3c4 010d 	ubfx	r1, r4, #0, #14
    2826:	e0b7      	b.n	2998 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2828:	f014 0f70 	tst.w	r4, #112	; 0x70
    282c:	d15c      	bne.n	28e8 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    282e:	4d83      	ldr	r5, [pc, #524]	; (2a3c <_usb_d_dev_ep_enable+0x2a0>)
    2830:	009f      	lsls	r7, r3, #2
    2832:	18f9      	adds	r1, r7, r3
    2834:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    2838:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    283c:	0109      	lsls	r1, r1, #4
    283e:	f001 0170 	and.w	r1, r1, #112	; 0x70
    2842:	430c      	orrs	r4, r1
    2844:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2848:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    284c:	443b      	add	r3, r7
    284e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2852:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    2856:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    285a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    285e:	d80f      	bhi.n	2880 <_usb_d_dev_ep_enable+0xe4>
    2860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2864:	d819      	bhi.n	289a <_usb_d_dev_ep_enable+0xfe>
    2866:	2b80      	cmp	r3, #128	; 0x80
    2868:	d819      	bhi.n	289e <_usb_d_dev_ep_enable+0x102>
    286a:	2b40      	cmp	r3, #64	; 0x40
    286c:	d819      	bhi.n	28a2 <_usb_d_dev_ep_enable+0x106>
    286e:	2b20      	cmp	r3, #32
    2870:	d819      	bhi.n	28a6 <_usb_d_dev_ep_enable+0x10a>
    2872:	2b10      	cmp	r3, #16
    2874:	d819      	bhi.n	28aa <_usb_d_dev_ep_enable+0x10e>
    2876:	2b08      	cmp	r3, #8
    2878:	bf94      	ite	ls
    287a:	2300      	movls	r3, #0
    287c:	2301      	movhi	r3, #1
    287e:	e000      	b.n	2882 <_usb_d_dev_ep_enable+0xe6>
    2880:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2882:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    2886:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2888:	2380      	movs	r3, #128	; 0x80
    288a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    288e:	4b6b      	ldr	r3, [pc, #428]	; (2a3c <_usb_d_dev_ep_enable+0x2a0>)
    2890:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2894:	2000      	movs	r0, #0
    2896:	76b0      	strb	r0, [r6, #26]
    2898:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    289a:	2306      	movs	r3, #6
    289c:	e7f1      	b.n	2882 <_usb_d_dev_ep_enable+0xe6>
    289e:	2305      	movs	r3, #5
    28a0:	e7ef      	b.n	2882 <_usb_d_dev_ep_enable+0xe6>
    28a2:	2304      	movs	r3, #4
    28a4:	e7ed      	b.n	2882 <_usb_d_dev_ep_enable+0xe6>
    28a6:	2303      	movs	r3, #3
    28a8:	e7eb      	b.n	2882 <_usb_d_dev_ep_enable+0xe6>
    28aa:	2302      	movs	r3, #2
    28ac:	e7e9      	b.n	2882 <_usb_d_dev_ep_enable+0xe6>
    28ae:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    28b0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    28b4:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    28b6:	2340      	movs	r3, #64	; 0x40
    28b8:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    28bc:	4b5f      	ldr	r3, [pc, #380]	; (2a3c <_usb_d_dev_ep_enable+0x2a0>)
    28be:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    28c2:	2000      	movs	r0, #0
    28c4:	72b0      	strb	r0, [r6, #10]
    28c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    28c8:	2106      	movs	r1, #6
    28ca:	e7f1      	b.n	28b0 <_usb_d_dev_ep_enable+0x114>
    28cc:	2105      	movs	r1, #5
    28ce:	e7ef      	b.n	28b0 <_usb_d_dev_ep_enable+0x114>
    28d0:	2104      	movs	r1, #4
    28d2:	e7ed      	b.n	28b0 <_usb_d_dev_ep_enable+0x114>
    28d4:	2103      	movs	r1, #3
    28d6:	e7eb      	b.n	28b0 <_usb_d_dev_ep_enable+0x114>
    28d8:	2102      	movs	r1, #2
    28da:	e7e9      	b.n	28b0 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    28dc:	f06f 0011 	mvn.w	r0, #17
    28e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    28e2:	f06f 0013 	mvn.w	r0, #19
    28e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    28e8:	f06f 0013 	mvn.w	r0, #19
    28ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    28ee:	f06f 0013 	mvn.w	r0, #19
    28f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    28f4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    28f8:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    28fc:	b2e4      	uxtb	r4, r4
    28fe:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    2900:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2902:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2906:	494d      	ldr	r1, [pc, #308]	; (2a3c <_usb_d_dev_ep_enable+0x2a0>)
    2908:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    290c:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    2910:	2dff      	cmp	r5, #255	; 0xff
    2912:	d0e3      	beq.n	28dc <_usb_d_dev_ep_enable+0x140>
    2914:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    2916:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2918:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    291c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    2920:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    2924:	f001 0107 	and.w	r1, r1, #7
    2928:	2901      	cmp	r1, #1
    292a:	f43f af4e 	beq.w	27ca <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    292e:	2f00      	cmp	r7, #0
    2930:	f6ff af7a 	blt.w	2828 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    2934:	f014 0f07 	tst.w	r4, #7
    2938:	d1d9      	bne.n	28ee <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    293a:	4d40      	ldr	r5, [pc, #256]	; (2a3c <_usb_d_dev_ep_enable+0x2a0>)
    293c:	009f      	lsls	r7, r3, #2
    293e:	18f9      	adds	r1, r7, r3
    2940:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    2944:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    2948:	f001 0107 	and.w	r1, r1, #7
    294c:	430c      	orrs	r4, r1
    294e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2952:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2956:	443b      	add	r3, r7
    2958:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    295c:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    2960:	4b37      	ldr	r3, [pc, #220]	; (2a40 <_usb_d_dev_ep_enable+0x2a4>)
    2962:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2966:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    296a:	d8a0      	bhi.n	28ae <_usb_d_dev_ep_enable+0x112>
    296c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    2970:	d8aa      	bhi.n	28c8 <_usb_d_dev_ep_enable+0x12c>
    2972:	2980      	cmp	r1, #128	; 0x80
    2974:	d8aa      	bhi.n	28cc <_usb_d_dev_ep_enable+0x130>
    2976:	2940      	cmp	r1, #64	; 0x40
    2978:	d8aa      	bhi.n	28d0 <_usb_d_dev_ep_enable+0x134>
    297a:	2920      	cmp	r1, #32
    297c:	d8aa      	bhi.n	28d4 <_usb_d_dev_ep_enable+0x138>
    297e:	2910      	cmp	r1, #16
    2980:	d8aa      	bhi.n	28d8 <_usb_d_dev_ep_enable+0x13c>
    2982:	2908      	cmp	r1, #8
    2984:	bf94      	ite	ls
    2986:	2100      	movls	r1, #0
    2988:	2101      	movhi	r1, #1
    298a:	e791      	b.n	28b0 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    298c:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2990:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2992:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2996:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2998:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    299c:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    299e:	2140      	movs	r1, #64	; 0x40
    29a0:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    29a4:	2080      	movs	r0, #128	; 0x80
    29a6:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    29aa:	4a24      	ldr	r2, [pc, #144]	; (2a3c <_usb_d_dev_ep_enable+0x2a0>)
    29ac:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    29b0:	2000      	movs	r0, #0
    29b2:	72b0      	strb	r0, [r6, #10]
    29b4:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    29b6:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    29ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    29be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    29c2:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    29c6:	016d      	lsls	r5, r5, #5
    29c8:	1953      	adds	r3, r2, r5
    29ca:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    29cc:	685a      	ldr	r2, [r3, #4]
    29ce:	f364 329b 	bfi	r2, r4, #14, #14
    29d2:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    29d4:	685a      	ldr	r2, [r3, #4]
    29d6:	f360 020d 	bfi	r2, r0, #0, #14
    29da:	605a      	str	r2, [r3, #4]
    29dc:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    29e0:	22b0      	movs	r2, #176	; 0xb0
    29e2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    29e6:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    29ea:	461d      	mov	r5, r3
    29ec:	2310      	movs	r3, #16
    29ee:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    29f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    29f4:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    29f8:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    29fa:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    29fe:	2705      	movs	r7, #5
    2a00:	e7ca      	b.n	2998 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a02:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2a06:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a08:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2a0c:	2703      	movs	r7, #3
    2a0e:	e7c3      	b.n	2998 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a10:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2a14:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a16:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2a1a:	2706      	movs	r7, #6
    2a1c:	e7bc      	b.n	2998 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a1e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2a22:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a24:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2a28:	2704      	movs	r7, #4
    2a2a:	e7b5      	b.n	2998 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a2c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2a30:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2a32:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2a36:	2702      	movs	r7, #2
    2a38:	e7ae      	b.n	2998 <_usb_d_dev_ep_enable+0x1fc>
    2a3a:	bf00      	nop
    2a3c:	2000057c 	.word	0x2000057c
    2a40:	0fffc000 	.word	0x0fffc000

00002a44 <_usb_d_dev_ep_stall>:
{
    2a44:	b470      	push	{r4, r5, r6}
    2a46:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2a48:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2a4a:	f010 000f 	ands.w	r0, r0, #15
    2a4e:	d008      	beq.n	2a62 <_usb_d_dev_ep_stall+0x1e>
    2a50:	2b00      	cmp	r3, #0
    2a52:	bfb4      	ite	lt
    2a54:	1c83      	addlt	r3, r0, #2
    2a56:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    2a58:	2802      	cmp	r0, #2
    2a5a:	d903      	bls.n	2a64 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    2a5c:	f06f 0011 	mvn.w	r0, #17
    2a60:	e018      	b.n	2a94 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    2a62:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    2a64:	2901      	cmp	r1, #1
    2a66:	d017      	beq.n	2a98 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2a68:	2900      	cmp	r1, #0
    2a6a:	d03a      	beq.n	2ae2 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2a6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2a70:	4a45      	ldr	r2, [pc, #276]	; (2b88 <_usb_d_dev_ep_stall+0x144>)
    2a72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2a76:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2a7a:	f003 030f 	and.w	r3, r3, #15
    2a7e:	015b      	lsls	r3, r3, #5
    2a80:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2a84:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2a88:	2310      	movs	r3, #16
    2a8a:	40a3      	lsls	r3, r4
    2a8c:	421a      	tst	r2, r3
    2a8e:	bf14      	ite	ne
    2a90:	2001      	movne	r0, #1
    2a92:	2000      	moveq	r0, #0
}
    2a94:	bc70      	pop	{r4, r5, r6}
    2a96:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2a98:	2510      	movs	r5, #16
    2a9a:	40a5      	lsls	r5, r4
    2a9c:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2a9e:	493a      	ldr	r1, [pc, #232]	; (2b88 <_usb_d_dev_ep_stall+0x144>)
    2aa0:	009e      	lsls	r6, r3, #2
    2aa2:	18f2      	adds	r2, r6, r3
    2aa4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2aa8:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2aac:	f002 020f 	and.w	r2, r2, #15
    2ab0:	0150      	lsls	r0, r2, #5
    2ab2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2ab6:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2aba:	2020      	movs	r0, #32
    2abc:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    2ac0:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2ac2:	0152      	lsls	r2, r2, #5
    2ac4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2ac8:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    2acc:	4433      	add	r3, r6
    2ace:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    2ad2:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2ad6:	f042 0208 	orr.w	r2, r2, #8
    2ada:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    2ade:	2000      	movs	r0, #0
    2ae0:	e7d8      	b.n	2a94 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    2ae2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2ae6:	4928      	ldr	r1, [pc, #160]	; (2b88 <_usb_d_dev_ep_stall+0x144>)
    2ae8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2aec:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    2af0:	f002 020f 	and.w	r2, r2, #15
    2af4:	0151      	lsls	r1, r2, #5
    2af6:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2afa:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2afe:	2010      	movs	r0, #16
    2b00:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    2b02:	4205      	tst	r5, r0
    2b04:	d03c      	beq.n	2b80 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2b06:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2b08:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2b0c:	2020      	movs	r0, #32
    2b0e:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2b10:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2b12:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2b16:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    2b1a:	4202      	tst	r2, r0
    2b1c:	d007      	beq.n	2b2e <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2b1e:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    2b22:	2201      	movs	r2, #1
    2b24:	fa02 f404 	lsl.w	r4, r2, r4
    2b28:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2b2a:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2b2e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2b32:	4815      	ldr	r0, [pc, #84]	; (2b88 <_usb_d_dev_ep_stall+0x144>)
    2b34:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2b38:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    2b3c:	f002 0207 	and.w	r2, r2, #7
    2b40:	2a01      	cmp	r2, #1
    2b42:	d00c      	beq.n	2b5e <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    2b44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2b48:	4a0f      	ldr	r2, [pc, #60]	; (2b88 <_usb_d_dev_ep_stall+0x144>)
    2b4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b4e:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2b52:	f36f 02c3 	bfc	r2, #3, #1
    2b56:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2b5a:	2000      	movs	r0, #0
    2b5c:	e79a      	b.n	2a94 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2b5e:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2b62:	f012 0f30 	tst.w	r2, #48	; 0x30
    2b66:	d10d      	bne.n	2b84 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    2b68:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2b6c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    2b70:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2b74:	f36f 02c3 	bfc	r2, #3, #1
    2b78:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2b7c:	2000      	movs	r0, #0
    2b7e:	e789      	b.n	2a94 <_usb_d_dev_ep_stall+0x50>
    2b80:	2000      	movs	r0, #0
    2b82:	e787      	b.n	2a94 <_usb_d_dev_ep_stall+0x50>
    2b84:	2000      	movs	r0, #0
    2b86:	e785      	b.n	2a94 <_usb_d_dev_ep_stall+0x50>
    2b88:	2000057c 	.word	0x2000057c

00002b8c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    2b8c:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    2b8e:	f000 040f 	and.w	r4, r0, #15
    2b92:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    2b94:	4a14      	ldr	r2, [pc, #80]	; (2be8 <_usb_d_dev_ep_read_req+0x5c>)
    2b96:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    2b98:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    2b9a:	6840      	ldr	r0, [r0, #4]
    2b9c:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    2ba0:	2c02      	cmp	r4, #2
    2ba2:	d817      	bhi.n	2bd4 <_usb_d_dev_ep_read_req+0x48>
    2ba4:	b1c9      	cbz	r1, 2bda <_usb_d_dev_ep_read_req+0x4e>
    2ba6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2baa:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    2bae:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    2bb0:	2a11      	cmp	r2, #17
    2bb2:	d115      	bne.n	2be0 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2bb4:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    2bb8:	f012 0f10 	tst.w	r2, #16
    2bbc:	d102      	bne.n	2bc4 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    2bbe:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    2bc0:	bc30      	pop	{r4, r5}
    2bc2:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    2bc4:	682c      	ldr	r4, [r5, #0]
    2bc6:	686a      	ldr	r2, [r5, #4]
    2bc8:	600c      	str	r4, [r1, #0]
    2bca:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2bcc:	2210      	movs	r2, #16
    2bce:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    2bd2:	e7f5      	b.n	2bc0 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    2bd4:	f06f 0011 	mvn.w	r0, #17
    2bd8:	e7f2      	b.n	2bc0 <_usb_d_dev_ep_read_req+0x34>
    2bda:	f06f 0011 	mvn.w	r0, #17
    2bde:	e7ef      	b.n	2bc0 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    2be0:	f06f 0012 	mvn.w	r0, #18
    2be4:	e7ec      	b.n	2bc0 <_usb_d_dev_ep_read_req+0x34>
    2be6:	bf00      	nop
    2be8:	2000057c 	.word	0x2000057c

00002bec <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    2bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bf0:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    2bf2:	7a03      	ldrb	r3, [r0, #8]
    2bf4:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2bf6:	f013 030f 	ands.w	r3, r3, #15
    2bfa:	f000 80c2 	beq.w	2d82 <_usb_d_dev_ep_trans+0x196>
    2bfe:	2e00      	cmp	r6, #0
    2c00:	bfb4      	ite	lt
    2c02:	1c9a      	addlt	r2, r3, #2
    2c04:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    2c06:	4614      	mov	r4, r2
    2c08:	4969      	ldr	r1, [pc, #420]	; (2db0 <_usb_d_dev_ep_trans+0x1c4>)
    2c0a:	f101 0760 	add.w	r7, r1, #96	; 0x60
    2c0e:	1c55      	adds	r5, r2, #1
    2c10:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2c14:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2c18:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2c1c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2c20:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    2c24:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2c28:	428a      	cmp	r2, r1
    2c2a:	d025      	beq.n	2c78 <_usb_d_dev_ep_trans+0x8c>
    2c2c:	1e55      	subs	r5, r2, #1
    2c2e:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    2c30:	6841      	ldr	r1, [r0, #4]
    2c32:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    2c34:	2b02      	cmp	r3, #2
    2c36:	f200 8092 	bhi.w	2d5e <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    2c3a:	6803      	ldr	r3, [r0, #0]
    2c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2c40:	d31c      	bcc.n	2c7c <_usb_d_dev_ep_trans+0x90>
    2c42:	eb03 0c01 	add.w	ip, r3, r1
    2c46:	f8df e180 	ldr.w	lr, [pc, #384]	; 2dc8 <_usb_d_dev_ep_trans+0x1dc>
    2c4a:	45f4      	cmp	ip, lr
    2c4c:	d816      	bhi.n	2c7c <_usb_d_dev_ep_trans+0x90>
    2c4e:	f013 0f03 	tst.w	r3, #3
    2c52:	d113      	bne.n	2c7c <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    2c54:	2e00      	cmp	r6, #0
    2c56:	db2a      	blt.n	2cae <_usb_d_dev_ep_trans+0xc2>
    2c58:	428a      	cmp	r2, r1
    2c5a:	f200 809c 	bhi.w	2d96 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    2c5e:	b34d      	cbz	r5, 2cb4 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    2c60:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2c64:	4a52      	ldr	r2, [pc, #328]	; (2db0 <_usb_d_dev_ep_trans+0x1c4>)
    2c66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2c6e:	2b00      	cmp	r3, #0
    2c70:	d07b      	beq.n	2d6a <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    2c72:	f04f 0800 	mov.w	r8, #0
    2c76:	e00c      	b.n	2c92 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2c78:	4615      	mov	r5, r2
    2c7a:	e7d9      	b.n	2c30 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    2c7c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2c80:	4a4b      	ldr	r2, [pc, #300]	; (2db0 <_usb_d_dev_ep_trans+0x1c4>)
    2c82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2c8a:	2b00      	cmp	r3, #0
    2c8c:	d06a      	beq.n	2d64 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    2c8e:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    2c92:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2c96:	4a46      	ldr	r2, [pc, #280]	; (2db0 <_usb_d_dev_ep_trans+0x1c4>)
    2c98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2c9c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2ca0:	f013 0f08 	tst.w	r3, #8
    2ca4:	d009      	beq.n	2cba <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    2ca6:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2ca8:	b003      	add	sp, #12
    2caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    2cae:	f04f 0800 	mov.w	r8, #0
    2cb2:	e7ee      	b.n	2c92 <_usb_d_dev_ep_trans+0xa6>
    2cb4:	f04f 0800 	mov.w	r8, #0
    2cb8:	e7eb      	b.n	2c92 <_usb_d_dev_ep_trans+0xa6>
    2cba:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    2cbc:	a801      	add	r0, sp, #4
    2cbe:	4b3d      	ldr	r3, [pc, #244]	; (2db4 <_usb_d_dev_ep_trans+0x1c8>)
    2cc0:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    2cc2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2cc6:	4a3a      	ldr	r2, [pc, #232]	; (2db0 <_usb_d_dev_ep_trans+0x1c4>)
    2cc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2ccc:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2cd0:	f013 0f40 	tst.w	r3, #64	; 0x40
    2cd4:	d13c      	bne.n	2d50 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    2cd6:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    2cda:	4b35      	ldr	r3, [pc, #212]	; (2db0 <_usb_d_dev_ep_trans+0x1c4>)
    2cdc:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    2ce0:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2ce8:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    2cec:	a801      	add	r0, sp, #4
    2cee:	4b32      	ldr	r3, [pc, #200]	; (2db8 <_usb_d_dev_ep_trans+0x1cc>)
    2cf0:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    2cf2:	f8da 3000 	ldr.w	r3, [sl]
    2cf6:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    2cfa:	f8da 3004 	ldr.w	r3, [sl, #4]
    2cfe:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    2d02:	2300      	movs	r3, #0
    2d04:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    2d08:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    2d0a:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2d0e:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    2d12:	f368 1345 	bfi	r3, r8, #5, #1
    2d16:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2d1a:	f89a 3009 	ldrb.w	r3, [sl, #9]
    2d1e:	b1e3      	cbz	r3, 2d5a <_usb_d_dev_ep_trans+0x16e>
    2d20:	fab5 f585 	clz	r5, r5
    2d24:	096d      	lsrs	r5, r5, #5
    2d26:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2d2a:	4b21      	ldr	r3, [pc, #132]	; (2db0 <_usb_d_dev_ep_trans+0x1c4>)
    2d2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2d30:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    2d34:	f365 1304 	bfi	r3, r5, #4, #1
    2d38:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    2d3c:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    2d3e:	f04f 0100 	mov.w	r1, #0
    2d42:	4638      	mov	r0, r7
    2d44:	bfb4      	ite	lt
    2d46:	4b1d      	ldrlt	r3, [pc, #116]	; (2dbc <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    2d48:	4b1d      	ldrge	r3, [pc, #116]	; (2dc0 <_usb_d_dev_ep_trans+0x1d4>)
    2d4a:	4798      	blx	r3
	return ERR_NONE;
    2d4c:	2000      	movs	r0, #0
    2d4e:	e7ab      	b.n	2ca8 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    2d50:	a801      	add	r0, sp, #4
    2d52:	4b19      	ldr	r3, [pc, #100]	; (2db8 <_usb_d_dev_ep_trans+0x1cc>)
    2d54:	4798      	blx	r3
		return USB_BUSY;
    2d56:	2001      	movs	r0, #1
    2d58:	e7a6      	b.n	2ca8 <_usb_d_dev_ep_trans+0xbc>
    2d5a:	2500      	movs	r5, #0
    2d5c:	e7e3      	b.n	2d26 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    2d5e:	f06f 0011 	mvn.w	r0, #17
    2d62:	e7a1      	b.n	2ca8 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    2d64:	f06f 0012 	mvn.w	r0, #18
    2d68:	e79e      	b.n	2ca8 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    2d6a:	f06f 0011 	mvn.w	r0, #17
    2d6e:	e79b      	b.n	2ca8 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    2d70:	f06f 0012 	mvn.w	r0, #18
    2d74:	e798      	b.n	2ca8 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    2d76:	6841      	ldr	r1, [r0, #4]
    2d78:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    2d7c:	4f11      	ldr	r7, [pc, #68]	; (2dc4 <_usb_d_dev_ep_trans+0x1d8>)
    2d7e:	2400      	movs	r4, #0
    2d80:	e75b      	b.n	2c3a <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2d82:	4a0b      	ldr	r2, [pc, #44]	; (2db0 <_usb_d_dev_ep_trans+0x1c4>)
    2d84:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    2d88:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2d8c:	428a      	cmp	r2, r1
    2d8e:	d0f2      	beq.n	2d76 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    2d90:	4f0c      	ldr	r7, [pc, #48]	; (2dc4 <_usb_d_dev_ep_trans+0x1d8>)
    2d92:	2400      	movs	r4, #0
    2d94:	e74a      	b.n	2c2c <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    2d96:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2d9a:	4a05      	ldr	r2, [pc, #20]	; (2db0 <_usb_d_dev_ep_trans+0x1c4>)
    2d9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2da4:	2b00      	cmp	r3, #0
    2da6:	d0e3      	beq.n	2d70 <_usb_d_dev_ep_trans+0x184>
    2da8:	f04f 0801 	mov.w	r8, #1
    2dac:	e771      	b.n	2c92 <_usb_d_dev_ep_trans+0xa6>
    2dae:	bf00      	nop
    2db0:	2000057c 	.word	0x2000057c
    2db4:	00002f01 	.word	0x00002f01
    2db8:	00002f0f 	.word	0x00002f0f
    2dbc:	00001e4d 	.word	0x00001e4d
    2dc0:	00001fd1 	.word	0x00001fd1
    2dc4:	200005f0 	.word	0x200005f0
    2dc8:	20041fff 	.word	0x20041fff

00002dcc <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2dcc:	4b06      	ldr	r3, [pc, #24]	; (2de8 <_usb_d_dev_register_callback+0x1c>)
    2dce:	2900      	cmp	r1, #0
    2dd0:	bf08      	it	eq
    2dd2:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    2dd4:	2801      	cmp	r0, #1
    2dd6:	d003      	beq.n	2de0 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2dd8:	b908      	cbnz	r0, 2dde <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2dda:	4b04      	ldr	r3, [pc, #16]	; (2dec <_usb_d_dev_register_callback+0x20>)
    2ddc:	6619      	str	r1, [r3, #96]	; 0x60
    2dde:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    2de0:	4b02      	ldr	r3, [pc, #8]	; (2dec <_usb_d_dev_register_callback+0x20>)
    2de2:	6659      	str	r1, [r3, #100]	; 0x64
    2de4:	4770      	bx	lr
    2de6:	bf00      	nop
    2de8:	00001bc5 	.word	0x00001bc5
    2dec:	2000057c 	.word	0x2000057c

00002df0 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2df0:	4b09      	ldr	r3, [pc, #36]	; (2e18 <_usb_d_dev_register_ep_callback+0x28>)
    2df2:	2900      	cmp	r1, #0
    2df4:	bf08      	it	eq
    2df6:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2df8:	4603      	mov	r3, r0
    2dfa:	b130      	cbz	r0, 2e0a <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2dfc:	2801      	cmp	r0, #1
    2dfe:	d007      	beq.n	2e10 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2e00:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2e02:	bf04      	itt	eq
    2e04:	4b05      	ldreq	r3, [pc, #20]	; (2e1c <_usb_d_dev_register_ep_callback+0x2c>)
    2e06:	6719      	streq	r1, [r3, #112]	; 0x70
    2e08:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2e0a:	4b04      	ldr	r3, [pc, #16]	; (2e1c <_usb_d_dev_register_ep_callback+0x2c>)
    2e0c:	6699      	str	r1, [r3, #104]	; 0x68
    2e0e:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2e10:	4b02      	ldr	r3, [pc, #8]	; (2e1c <_usb_d_dev_register_ep_callback+0x2c>)
    2e12:	66d9      	str	r1, [r3, #108]	; 0x6c
    2e14:	4770      	bx	lr
    2e16:	bf00      	nop
    2e18:	00001bc5 	.word	0x00001bc5
    2e1c:	2000057c 	.word	0x2000057c

00002e20 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    2e20:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2e22:	4b01      	ldr	r3, [pc, #4]	; (2e28 <USB_0_Handler+0x8>)
    2e24:	4798      	blx	r3
    2e26:	bd08      	pop	{r3, pc}
    2e28:	000021c1 	.word	0x000021c1

00002e2c <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    2e2c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2e2e:	4b01      	ldr	r3, [pc, #4]	; (2e34 <USB_1_Handler+0x8>)
    2e30:	4798      	blx	r3
    2e32:	bd08      	pop	{r3, pc}
    2e34:	000021c1 	.word	0x000021c1

00002e38 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    2e38:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2e3a:	4b01      	ldr	r3, [pc, #4]	; (2e40 <USB_2_Handler+0x8>)
    2e3c:	4798      	blx	r3
    2e3e:	bd08      	pop	{r3, pc}
    2e40:	000021c1 	.word	0x000021c1

00002e44 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    2e44:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2e46:	4b01      	ldr	r3, [pc, #4]	; (2e4c <USB_3_Handler+0x8>)
    2e48:	4798      	blx	r3
    2e4a:	bd08      	pop	{r3, pc}
    2e4c:	000021c1 	.word	0x000021c1

00002e50 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    2e50:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2e52:	4805      	ldr	r0, [pc, #20]	; (2e68 <cdc_device_acm_init+0x18>)
    2e54:	4b05      	ldr	r3, [pc, #20]	; (2e6c <cdc_device_acm_init+0x1c>)
    2e56:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    2e58:	4b05      	ldr	r3, [pc, #20]	; (2e70 <cdc_device_acm_init+0x20>)
    2e5a:	4798      	blx	r3

	usbdc_start(single_desc);
    2e5c:	4805      	ldr	r0, [pc, #20]	; (2e74 <cdc_device_acm_init+0x24>)
    2e5e:	4b06      	ldr	r3, [pc, #24]	; (2e78 <cdc_device_acm_init+0x28>)
    2e60:	4798      	blx	r3
	usbdc_attach();
    2e62:	4b06      	ldr	r3, [pc, #24]	; (2e7c <cdc_device_acm_init+0x2c>)
    2e64:	4798      	blx	r3
    2e66:	bd08      	pop	{r3, pc}
    2e68:	200007a4 	.word	0x200007a4
    2e6c:	000037cd 	.word	0x000037cd
    2e70:	0000317d 	.word	0x0000317d
    2e74:	20000000 	.word	0x20000000
    2e78:	0000383d 	.word	0x0000383d
    2e7c:	00003871 	.word	0x00003871

00002e80 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    2e80:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    2e82:	4b01      	ldr	r3, [pc, #4]	; (2e88 <usb_init+0x8>)
    2e84:	4798      	blx	r3
    2e86:	bd08      	pop	{r3, pc}
    2e88:	00002e51 	.word	0x00002e51

00002e8c <gfx_mono_init>:

/**
 * \brief Initialize GFX Mono library
 */
void gfx_mono_init(void)
{
    2e8c:	b530      	push	{r4, r5, lr}
    2e8e:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2e90:	4b12      	ldr	r3, [pc, #72]	; (2edc <gfx_mono_init+0x50>)
    2e92:	2201      	movs	r2, #1
    2e94:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2e96:	4812      	ldr	r0, [pc, #72]	; (2ee0 <gfx_mono_init+0x54>)
    2e98:	6298      	str	r0, [r3, #40]	; 0x28
    2e9a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    2e9e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2ea0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ea2:	6298      	str	r0, [r3, #40]	; 0x28
    2ea4:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2ea6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ea8:	6298      	str	r0, [r3, #40]	; 0x28
    2eaa:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2eac:	619a      	str	r2, [r3, #24]
    2eae:	619a      	str	r2, [r3, #24]
    2eb0:	619a      	str	r2, [r3, #24]
	gpio_set_pin_direction(CONTROLLER_INSTANCE_RES_PIN, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(CONTROLLER_INSTANCE_DC_PIN, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(CONTROLLER_INSTANCE_CS_PIN, true);
	gpio_set_pin_level(CONTROLLER_INSTANCE_RES_PIN, true);
	gpio_set_pin_level(CONTROLLER_INSTANCE_DC_PIN, true);
	ug2832hsweg04_construct(&DISPLAY_INSTANCE_0_c12832a1z_desc.parent,
    2eb2:	490c      	ldr	r1, [pc, #48]	; (2ee4 <gfx_mono_init+0x58>)
    2eb4:	f501 7500 	add.w	r5, r1, #512	; 0x200
    2eb8:	2300      	movs	r3, #0
    2eba:	9301      	str	r3, [sp, #4]
    2ebc:	9300      	str	r3, [sp, #0]
    2ebe:	4a0a      	ldr	r2, [pc, #40]	; (2ee8 <gfx_mono_init+0x5c>)
    2ec0:	4628      	mov	r0, r5
    2ec2:	4c0a      	ldr	r4, [pc, #40]	; (2eec <gfx_mono_init+0x60>)
    2ec4:	47a0      	blx	r4
	                        DISPLAY_INSTANCE_0_buffer,
	                        &SPI_DISPLAY.io,
	                        CONTROLLER_INSTANCE_CS_PIN,
	                        CONTROLLER_INSTANCE_RES_PIN,
	                        CONTROLLER_INSTANCE_DC_PIN);
	gfx_mono_construct(&PRIMITIVES_INSTANCE_desc, &DISPLAY_INSTANCE_0_c12832a1z_desc.parent);
    2ec6:	4c0a      	ldr	r4, [pc, #40]	; (2ef0 <gfx_mono_init+0x64>)
    2ec8:	4629      	mov	r1, r5
    2eca:	4620      	mov	r0, r4
    2ecc:	4b09      	ldr	r3, [pc, #36]	; (2ef4 <gfx_mono_init+0x68>)
    2ece:	4798      	blx	r3
	gfx_mono_text_construct(&MONOCHROME_TEXT_0_desc, &PRIMITIVES_INSTANCE_desc);
    2ed0:	4621      	mov	r1, r4
    2ed2:	4809      	ldr	r0, [pc, #36]	; (2ef8 <gfx_mono_init+0x6c>)
    2ed4:	4b09      	ldr	r3, [pc, #36]	; (2efc <gfx_mono_init+0x70>)
    2ed6:	4798      	blx	r3
}
    2ed8:	b003      	add	sp, #12
    2eda:	bd30      	pop	{r4, r5, pc}
    2edc:	41008000 	.word	0x41008000
    2ee0:	40000001 	.word	0x40000001
    2ee4:	200007e4 	.word	0x200007e4
    2ee8:	20000a74 	.word	0x20000a74
    2eec:	00003a75 	.word	0x00003a75
    2ef0:	20000aa0 	.word	0x20000aa0
    2ef4:	00003cd1 	.word	0x00003cd1
    2ef8:	20000a9c 	.word	0x20000a9c
    2efc:	00003cd5 	.word	0x00003cd5

00002f00 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2f00:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    2f04:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2f06:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2f08:	f3bf 8f5f 	dmb	sy
    2f0c:	4770      	bx	lr

00002f0e <atomic_leave_critical>:
    2f0e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    2f12:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2f14:	f383 8810 	msr	PRIMASK, r3
    2f18:	4770      	bx	lr
	...

00002f1c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f1e:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    2f20:	780b      	ldrb	r3, [r1, #0]
    2f22:	f3c3 1441 	ubfx	r4, r3, #5, #2
    2f26:	2c01      	cmp	r4, #1
    2f28:	d15e      	bne.n	2fe8 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2f2a:	888c      	ldrh	r4, [r1, #4]
    2f2c:	4d35      	ldr	r5, [pc, #212]	; (3004 <cdcdf_acm_req+0xe8>)
    2f2e:	782d      	ldrb	r5, [r5, #0]
    2f30:	42a5      	cmp	r5, r4
    2f32:	d003      	beq.n	2f3c <cdcdf_acm_req+0x20>
    2f34:	4d33      	ldr	r5, [pc, #204]	; (3004 <cdcdf_acm_req+0xe8>)
    2f36:	786d      	ldrb	r5, [r5, #1]
    2f38:	42a5      	cmp	r5, r4
    2f3a:	d158      	bne.n	2fee <cdcdf_acm_req+0xd2>
    2f3c:	4616      	mov	r6, r2
    2f3e:	460c      	mov	r4, r1
    2f40:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    2f42:	f013 0f80 	tst.w	r3, #128	; 0x80
    2f46:	d10c      	bne.n	2f62 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    2f48:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    2f4a:	4b2f      	ldr	r3, [pc, #188]	; (3008 <cdcdf_acm_req+0xec>)
    2f4c:	4798      	blx	r3
    2f4e:	4601      	mov	r1, r0
	switch (req->bRequest) {
    2f50:	7863      	ldrb	r3, [r4, #1]
    2f52:	2b20      	cmp	r3, #32
    2f54:	d013      	beq.n	2f7e <cdcdf_acm_req+0x62>
    2f56:	2b22      	cmp	r3, #34	; 0x22
    2f58:	d032      	beq.n	2fc0 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    2f5a:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    2f5e:	b003      	add	sp, #12
    2f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    2f62:	2a01      	cmp	r2, #1
    2f64:	d046      	beq.n	2ff4 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    2f66:	784b      	ldrb	r3, [r1, #1]
    2f68:	2b21      	cmp	r3, #33	; 0x21
    2f6a:	d145      	bne.n	2ff8 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2f6c:	88cb      	ldrh	r3, [r1, #6]
    2f6e:	2b07      	cmp	r3, #7
    2f70:	d145      	bne.n	2ffe <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2f72:	2300      	movs	r3, #0
    2f74:	2207      	movs	r2, #7
    2f76:	4925      	ldr	r1, [pc, #148]	; (300c <cdcdf_acm_req+0xf0>)
    2f78:	4c25      	ldr	r4, [pc, #148]	; (3010 <cdcdf_acm_req+0xf4>)
    2f7a:	47a0      	blx	r4
    2f7c:	e7ef      	b.n	2f5e <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2f7e:	2f07      	cmp	r7, #7
    2f80:	d12b      	bne.n	2fda <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    2f82:	b1be      	cbz	r6, 2fb4 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2f84:	6800      	ldr	r0, [r0, #0]
    2f86:	9000      	str	r0, [sp, #0]
    2f88:	888a      	ldrh	r2, [r1, #4]
    2f8a:	798b      	ldrb	r3, [r1, #6]
    2f8c:	f8ad 2004 	strh.w	r2, [sp, #4]
    2f90:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2f94:	4b1b      	ldr	r3, [pc, #108]	; (3004 <cdcdf_acm_req+0xe8>)
    2f96:	691b      	ldr	r3, [r3, #16]
    2f98:	b113      	cbz	r3, 2fa0 <cdcdf_acm_req+0x84>
    2f9a:	4668      	mov	r0, sp
    2f9c:	4798      	blx	r3
    2f9e:	b1f8      	cbz	r0, 2fe0 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    2fa0:	4b18      	ldr	r3, [pc, #96]	; (3004 <cdcdf_acm_req+0xe8>)
    2fa2:	aa02      	add	r2, sp, #8
    2fa4:	e912 0003 	ldmdb	r2, {r0, r1}
    2fa8:	6098      	str	r0, [r3, #8]
    2faa:	8199      	strh	r1, [r3, #12]
    2fac:	0c09      	lsrs	r1, r1, #16
    2fae:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    2fb0:	2000      	movs	r0, #0
    2fb2:	e7d4      	b.n	2f5e <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2fb4:	2300      	movs	r3, #0
    2fb6:	2207      	movs	r2, #7
    2fb8:	4628      	mov	r0, r5
    2fba:	4c15      	ldr	r4, [pc, #84]	; (3010 <cdcdf_acm_req+0xf4>)
    2fbc:	47a0      	blx	r4
    2fbe:	e7ce      	b.n	2f5e <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    2fc0:	2300      	movs	r3, #0
    2fc2:	461a      	mov	r2, r3
    2fc4:	4619      	mov	r1, r3
    2fc6:	4618      	mov	r0, r3
    2fc8:	4d11      	ldr	r5, [pc, #68]	; (3010 <cdcdf_acm_req+0xf4>)
    2fca:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    2fcc:	4b0d      	ldr	r3, [pc, #52]	; (3004 <cdcdf_acm_req+0xe8>)
    2fce:	695b      	ldr	r3, [r3, #20]
    2fd0:	b143      	cbz	r3, 2fe4 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    2fd2:	8860      	ldrh	r0, [r4, #2]
    2fd4:	4798      	blx	r3
		return ERR_NONE;
    2fd6:	2000      	movs	r0, #0
    2fd8:	e7c1      	b.n	2f5e <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    2fda:	f04f 30ff 	mov.w	r0, #4294967295
    2fde:	e7be      	b.n	2f5e <cdcdf_acm_req+0x42>
			return ERR_NONE;
    2fe0:	2000      	movs	r0, #0
    2fe2:	e7bc      	b.n	2f5e <cdcdf_acm_req+0x42>
		return ERR_NONE;
    2fe4:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    2fe6:	e7ba      	b.n	2f5e <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    2fe8:	f06f 0009 	mvn.w	r0, #9
    2fec:	e7b7      	b.n	2f5e <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    2fee:	f06f 0009 	mvn.w	r0, #9
    2ff2:	e7b4      	b.n	2f5e <cdcdf_acm_req+0x42>
		return ERR_NONE;
    2ff4:	2000      	movs	r0, #0
    2ff6:	e7b2      	b.n	2f5e <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    2ff8:	f06f 000c 	mvn.w	r0, #12
    2ffc:	e7af      	b.n	2f5e <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    2ffe:	f04f 30ff 	mov.w	r0, #4294967295
    3002:	e7ac      	b.n	2f5e <cdcdf_acm_req+0x42>
    3004:	20000a0c 	.word	0x20000a0c
    3008:	0000387d 	.word	0x0000387d
    300c:	20000a14 	.word	0x20000a14
    3010:	00003359 	.word	0x00003359

00003014 <cdcdf_acm_ctrl>:
{
    3014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3018:	b083      	sub	sp, #12
    301a:	4616      	mov	r6, r2
	switch (ctrl) {
    301c:	2901      	cmp	r1, #1
    301e:	d066      	beq.n	30ee <cdcdf_acm_ctrl+0xda>
    3020:	b141      	cbz	r1, 3034 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    3022:	2902      	cmp	r1, #2
    3024:	bf0c      	ite	eq
    3026:	f06f 001a 	mvneq.w	r0, #26
    302a:	f06f 000c 	mvnne.w	r0, #12
}
    302e:	b003      	add	sp, #12
    3030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3034:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    3038:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    303a:	2800      	cmp	r0, #0
    303c:	f000 8085 	beq.w	314a <cdcdf_acm_ctrl+0x136>
    3040:	f10a 3bff 	add.w	fp, sl, #4294967295
    3044:	f10a 0301 	add.w	r3, sl, #1
    3048:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    304a:	4f46      	ldr	r7, [pc, #280]	; (3164 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    304c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 3174 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3050:	f8df 8124 	ldr.w	r8, [pc, #292]	; 3178 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    3054:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    3056:	7943      	ldrb	r3, [r0, #5]
    3058:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    305c:	2b02      	cmp	r3, #2
    305e:	d002      	beq.n	3066 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    3060:	f06f 0009 	mvn.w	r0, #9
    3064:	e7e3      	b.n	302e <cdcdf_acm_ctrl+0x1a>
    3066:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    306a:	f89b 3000 	ldrb.w	r3, [fp]
    306e:	429a      	cmp	r2, r3
    3070:	d06e      	beq.n	3150 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    3072:	2bff      	cmp	r3, #255	; 0xff
    3074:	d16f      	bne.n	3156 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    3076:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    307a:	2205      	movs	r2, #5
    307c:	6871      	ldr	r1, [r6, #4]
    307e:	4b3a      	ldr	r3, [pc, #232]	; (3168 <cdcdf_acm_ctrl+0x154>)
    3080:	4798      	blx	r3
		while (NULL != ep) {
    3082:	4604      	mov	r4, r0
    3084:	b1f8      	cbz	r0, 30c6 <cdcdf_acm_ctrl+0xb2>
    3086:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    308a:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    308c:	7963      	ldrb	r3, [r4, #5]
    308e:	7922      	ldrb	r2, [r4, #4]
    3090:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3094:	b292      	uxth	r2, r2
    3096:	78e1      	ldrb	r1, [r4, #3]
    3098:	4628      	mov	r0, r5
    309a:	47b8      	blx	r7
    309c:	2800      	cmp	r0, #0
    309e:	d15d      	bne.n	315c <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    30a0:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    30a4:	bf14      	ite	ne
    30a6:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    30aa:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    30ae:	4628      	mov	r0, r5
    30b0:	47c8      	blx	r9
			desc->sod = ep;
    30b2:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    30b4:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    30b6:	6871      	ldr	r1, [r6, #4]
    30b8:	4420      	add	r0, r4
    30ba:	47c0      	blx	r8
		while (NULL != ep) {
    30bc:	4604      	mov	r4, r0
    30be:	2800      	cmp	r0, #0
    30c0:	d1e3      	bne.n	308a <cdcdf_acm_ctrl+0x76>
    30c2:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    30c6:	6833      	ldr	r3, [r6, #0]
    30c8:	7818      	ldrb	r0, [r3, #0]
    30ca:	2204      	movs	r2, #4
    30cc:	6871      	ldr	r1, [r6, #4]
    30ce:	4418      	add	r0, r3
    30d0:	4b25      	ldr	r3, [pc, #148]	; (3168 <cdcdf_acm_ctrl+0x154>)
    30d2:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    30d4:	9b00      	ldr	r3, [sp, #0]
    30d6:	459b      	cmp	fp, r3
    30d8:	d004      	beq.n	30e4 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    30da:	2800      	cmp	r0, #0
    30dc:	d1ba      	bne.n	3054 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    30de:	f06f 0009 	mvn.w	r0, #9
    30e2:	e7a4      	b.n	302e <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    30e4:	2201      	movs	r2, #1
    30e6:	4b21      	ldr	r3, [pc, #132]	; (316c <cdcdf_acm_ctrl+0x158>)
    30e8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    30ea:	2000      	movs	r0, #0
    30ec:	e79f      	b.n	302e <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    30ee:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    30f0:	b142      	cbz	r2, 3104 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    30f2:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    30f4:	795b      	ldrb	r3, [r3, #5]
    30f6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    30fa:	2b02      	cmp	r3, #2
    30fc:	d002      	beq.n	3104 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    30fe:	f06f 0009 	mvn.w	r0, #9
    3102:	e794      	b.n	302e <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    3104:	7823      	ldrb	r3, [r4, #0]
    3106:	2bff      	cmp	r3, #255	; 0xff
    3108:	d008      	beq.n	311c <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    310a:	23ff      	movs	r3, #255	; 0xff
    310c:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    310e:	78a0      	ldrb	r0, [r4, #2]
    3110:	4298      	cmp	r0, r3
    3112:	d003      	beq.n	311c <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3114:	4b16      	ldr	r3, [pc, #88]	; (3170 <cdcdf_acm_ctrl+0x15c>)
    3116:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3118:	23ff      	movs	r3, #255	; 0xff
    311a:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    311c:	7863      	ldrb	r3, [r4, #1]
    311e:	2bff      	cmp	r3, #255	; 0xff
    3120:	d008      	beq.n	3134 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    3122:	23ff      	movs	r3, #255	; 0xff
    3124:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    3126:	78e0      	ldrb	r0, [r4, #3]
    3128:	4298      	cmp	r0, r3
    312a:	d003      	beq.n	3134 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    312c:	4b10      	ldr	r3, [pc, #64]	; (3170 <cdcdf_acm_ctrl+0x15c>)
    312e:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3130:	23ff      	movs	r3, #255	; 0xff
    3132:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    3134:	7920      	ldrb	r0, [r4, #4]
    3136:	28ff      	cmp	r0, #255	; 0xff
    3138:	d003      	beq.n	3142 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    313a:	4b0d      	ldr	r3, [pc, #52]	; (3170 <cdcdf_acm_ctrl+0x15c>)
    313c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    313e:	23ff      	movs	r3, #255	; 0xff
    3140:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    3142:	2000      	movs	r0, #0
    3144:	4b09      	ldr	r3, [pc, #36]	; (316c <cdcdf_acm_ctrl+0x158>)
    3146:	7158      	strb	r0, [r3, #5]
    3148:	e771      	b.n	302e <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    314a:	f06f 0009 	mvn.w	r0, #9
    314e:	e76e      	b.n	302e <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    3150:	f06f 0011 	mvn.w	r0, #17
    3154:	e76b      	b.n	302e <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    3156:	f06f 001b 	mvn.w	r0, #27
    315a:	e768      	b.n	302e <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    315c:	f06f 0013 	mvn.w	r0, #19
    3160:	e765      	b.n	302e <cdcdf_acm_ctrl+0x1a>
    3162:	bf00      	nop
    3164:	00001175 	.word	0x00001175
    3168:	0000389d 	.word	0x0000389d
    316c:	20000a0c 	.word	0x20000a0c
    3170:	000011dd 	.word	0x000011dd
    3174:	00001209 	.word	0x00001209
    3178:	000038d7 	.word	0x000038d7

0000317c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    317c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    317e:	4b0a      	ldr	r3, [pc, #40]	; (31a8 <cdcdf_acm_init+0x2c>)
    3180:	4798      	blx	r3
    3182:	2801      	cmp	r0, #1
    3184:	d80c      	bhi.n	31a0 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    3186:	4809      	ldr	r0, [pc, #36]	; (31ac <cdcdf_acm_init+0x30>)
    3188:	4b09      	ldr	r3, [pc, #36]	; (31b0 <cdcdf_acm_init+0x34>)
    318a:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    318c:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    318e:	3018      	adds	r0, #24
    3190:	4b08      	ldr	r3, [pc, #32]	; (31b4 <cdcdf_acm_init+0x38>)
    3192:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    3194:	4908      	ldr	r1, [pc, #32]	; (31b8 <cdcdf_acm_init+0x3c>)
    3196:	2001      	movs	r0, #1
    3198:	4b08      	ldr	r3, [pc, #32]	; (31bc <cdcdf_acm_init+0x40>)
    319a:	4798      	blx	r3
	return ERR_NONE;
    319c:	2000      	movs	r0, #0
    319e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    31a0:	f06f 0010 	mvn.w	r0, #16
}
    31a4:	bd08      	pop	{r3, pc}
    31a6:	bf00      	nop
    31a8:	00003889 	.word	0x00003889
    31ac:	20000a0c 	.word	0x20000a0c
    31b0:	00003015 	.word	0x00003015
    31b4:	00003829 	.word	0x00003829
    31b8:	20000060 	.word	0x20000060
    31bc:	00003795 	.word	0x00003795

000031c0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    31c0:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    31c2:	4b07      	ldr	r3, [pc, #28]	; (31e0 <usbdc_unconfig+0x20>)
    31c4:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    31c6:	b14c      	cbz	r4, 31dc <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    31c8:	2600      	movs	r6, #0
    31ca:	2501      	movs	r5, #1
    31cc:	6863      	ldr	r3, [r4, #4]
    31ce:	4632      	mov	r2, r6
    31d0:	4629      	mov	r1, r5
    31d2:	4620      	mov	r0, r4
    31d4:	4798      	blx	r3
		func = func->next;
    31d6:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    31d8:	2c00      	cmp	r4, #0
    31da:	d1f7      	bne.n	31cc <usbdc_unconfig+0xc>
    31dc:	bd70      	pop	{r4, r5, r6, pc}
    31de:	bf00      	nop
    31e0:	20000a30 	.word	0x20000a30

000031e4 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    31e4:	b570      	push	{r4, r5, r6, lr}
    31e6:	4606      	mov	r6, r0
    31e8:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    31ea:	4b07      	ldr	r3, [pc, #28]	; (3208 <usbdc_change_notify+0x24>)
    31ec:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    31ee:	b91c      	cbnz	r4, 31f8 <usbdc_change_notify+0x14>
    31f0:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    31f2:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    31f4:	2c00      	cmp	r4, #0
    31f6:	d0fb      	beq.n	31f0 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    31f8:	6863      	ldr	r3, [r4, #4]
    31fa:	2b00      	cmp	r3, #0
    31fc:	d0f9      	beq.n	31f2 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    31fe:	4629      	mov	r1, r5
    3200:	4630      	mov	r0, r6
    3202:	4798      	blx	r3
    3204:	e7f5      	b.n	31f2 <usbdc_change_notify+0xe>
    3206:	bf00      	nop
    3208:	20000a30 	.word	0x20000a30

0000320c <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    320e:	4607      	mov	r7, r0
    3210:	460e      	mov	r6, r1
    3212:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3214:	4b0c      	ldr	r3, [pc, #48]	; (3248 <usbdc_request_handler+0x3c>)
    3216:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    3218:	b91c      	cbnz	r4, 3222 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    321a:	2000      	movs	r0, #0
    321c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    321e:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    3220:	b16c      	cbz	r4, 323e <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    3222:	6863      	ldr	r3, [r4, #4]
    3224:	2b00      	cmp	r3, #0
    3226:	d0fa      	beq.n	321e <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    3228:	462a      	mov	r2, r5
    322a:	4631      	mov	r1, r6
    322c:	4638      	mov	r0, r7
    322e:	4798      	blx	r3
			if (0 == rc) {
    3230:	b138      	cbz	r0, 3242 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    3232:	f110 0f0a 	cmn.w	r0, #10
    3236:	d0f2      	beq.n	321e <usbdc_request_handler+0x12>
				return -1;
    3238:	f04f 30ff 	mov.w	r0, #4294967295
}
    323c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    323e:	2000      	movs	r0, #0
    3240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    3242:	2001      	movs	r0, #1
    3244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3246:	bf00      	nop
    3248:	20000a30 	.word	0x20000a30

0000324c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    324c:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    324e:	4b06      	ldr	r3, [pc, #24]	; (3268 <usbd_sof_cb+0x1c>)
    3250:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    3252:	b91c      	cbnz	r4, 325c <usbd_sof_cb+0x10>
    3254:	bd10      	pop	{r4, pc}
		sof = sof->next;
    3256:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    3258:	2c00      	cmp	r4, #0
    325a:	d0fb      	beq.n	3254 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    325c:	6863      	ldr	r3, [r4, #4]
    325e:	2b00      	cmp	r3, #0
    3260:	d0f9      	beq.n	3256 <usbd_sof_cb+0xa>
			sof->cb();
    3262:	4798      	blx	r3
    3264:	e7f7      	b.n	3256 <usbd_sof_cb+0xa>
    3266:	bf00      	nop
    3268:	20000a30 	.word	0x20000a30

0000326c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    326c:	b510      	push	{r4, lr}
    326e:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    3270:	b119      	cbz	r1, 327a <usbdc_cb_ctl_done+0xe>
    3272:	2901      	cmp	r1, #1
    3274:	d026      	beq.n	32c4 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    3276:	2000      	movs	r0, #0
    3278:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    327a:	7813      	ldrb	r3, [r2, #0]
    327c:	2b00      	cmp	r3, #0
    327e:	d1fa      	bne.n	3276 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    3280:	7853      	ldrb	r3, [r2, #1]
    3282:	2b05      	cmp	r3, #5
    3284:	d00f      	beq.n	32a6 <usbdc_cb_ctl_done+0x3a>
    3286:	2b09      	cmp	r3, #9
    3288:	d1f5      	bne.n	3276 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    328a:	8852      	ldrh	r2, [r2, #2]
    328c:	4b10      	ldr	r3, [pc, #64]	; (32d0 <usbdc_cb_ctl_done+0x64>)
    328e:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    3290:	8863      	ldrh	r3, [r4, #2]
    3292:	2b00      	cmp	r3, #0
    3294:	bf14      	ite	ne
    3296:	2104      	movne	r1, #4
    3298:	2103      	moveq	r1, #3
    329a:	4b0d      	ldr	r3, [pc, #52]	; (32d0 <usbdc_cb_ctl_done+0x64>)
    329c:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    329e:	2001      	movs	r0, #1
    32a0:	4b0c      	ldr	r3, [pc, #48]	; (32d4 <usbdc_cb_ctl_done+0x68>)
    32a2:	4798      	blx	r3
    32a4:	e7e7      	b.n	3276 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    32a6:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    32a8:	b2c0      	uxtb	r0, r0
    32aa:	4b0b      	ldr	r3, [pc, #44]	; (32d8 <usbdc_cb_ctl_done+0x6c>)
    32ac:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    32ae:	8863      	ldrh	r3, [r4, #2]
    32b0:	2b00      	cmp	r3, #0
    32b2:	bf14      	ite	ne
    32b4:	2103      	movne	r1, #3
    32b6:	2102      	moveq	r1, #2
    32b8:	4b05      	ldr	r3, [pc, #20]	; (32d0 <usbdc_cb_ctl_done+0x64>)
    32ba:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    32bc:	2001      	movs	r0, #1
    32be:	4b05      	ldr	r3, [pc, #20]	; (32d4 <usbdc_cb_ctl_done+0x68>)
    32c0:	4798      	blx	r3
    32c2:	e7d8      	b.n	3276 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    32c4:	2201      	movs	r2, #1
    32c6:	4621      	mov	r1, r4
    32c8:	2000      	movs	r0, #0
    32ca:	4b04      	ldr	r3, [pc, #16]	; (32dc <usbdc_cb_ctl_done+0x70>)
    32cc:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    32ce:	e7d2      	b.n	3276 <usbdc_cb_ctl_done+0xa>
    32d0:	20000a30 	.word	0x20000a30
    32d4:	000031e5 	.word	0x000031e5
    32d8:	00001169 	.word	0x00001169
    32dc:	0000320d 	.word	0x0000320d

000032e0 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    32e0:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    32e2:	4b0d      	ldr	r3, [pc, #52]	; (3318 <usbdc_reset+0x38>)
    32e4:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    32e6:	4d0d      	ldr	r5, [pc, #52]	; (331c <usbdc_reset+0x3c>)
    32e8:	2602      	movs	r6, #2
    32ea:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    32ec:	2400      	movs	r4, #0
    32ee:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    32f0:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    32f2:	4620      	mov	r0, r4
    32f4:	4b0a      	ldr	r3, [pc, #40]	; (3320 <usbdc_reset+0x40>)
    32f6:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    32f8:	7f28      	ldrb	r0, [r5, #28]
    32fa:	4b0a      	ldr	r3, [pc, #40]	; (3324 <usbdc_reset+0x44>)
    32fc:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    32fe:	4a0a      	ldr	r2, [pc, #40]	; (3328 <usbdc_reset+0x48>)
    3300:	4621      	mov	r1, r4
    3302:	4620      	mov	r0, r4
    3304:	4d09      	ldr	r5, [pc, #36]	; (332c <usbdc_reset+0x4c>)
    3306:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3308:	4a09      	ldr	r2, [pc, #36]	; (3330 <usbdc_reset+0x50>)
    330a:	4631      	mov	r1, r6
    330c:	4620      	mov	r0, r4
    330e:	47a8      	blx	r5
	usb_d_ep_enable(0);
    3310:	4620      	mov	r0, r4
    3312:	4b08      	ldr	r3, [pc, #32]	; (3334 <usbdc_reset+0x54>)
    3314:	4798      	blx	r3
    3316:	bd70      	pop	{r4, r5, r6, pc}
    3318:	000031c1 	.word	0x000031c1
    331c:	20000a30 	.word	0x20000a30
    3320:	000011dd 	.word	0x000011dd
    3324:	000011c9 	.word	0x000011c9
    3328:	00003379 	.word	0x00003379
    332c:	000013dd 	.word	0x000013dd
    3330:	0000326d 	.word	0x0000326d
    3334:	00001209 	.word	0x00001209

00003338 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    3338:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    333a:	b110      	cbz	r0, 3342 <usbd_event_cb+0xa>
    333c:	2801      	cmp	r0, #1
    333e:	d004      	beq.n	334a <usbd_event_cb+0x12>
    3340:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    3342:	2000      	movs	r0, #0
    3344:	4b02      	ldr	r3, [pc, #8]	; (3350 <usbd_event_cb+0x18>)
    3346:	4798      	blx	r3
		break;
    3348:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    334a:	4b02      	ldr	r3, [pc, #8]	; (3354 <usbd_event_cb+0x1c>)
    334c:	4798      	blx	r3
    334e:	bd08      	pop	{r3, pc}
    3350:	000031e5 	.word	0x000031e5
    3354:	000032e1 	.word	0x000032e1

00003358 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    3358:	b500      	push	{lr}
    335a:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    335c:	9101      	str	r1, [sp, #4]
    335e:	9202      	str	r2, [sp, #8]
    3360:	f88d 000c 	strb.w	r0, [sp, #12]
    3364:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    3368:	a801      	add	r0, sp, #4
    336a:	4b02      	ldr	r3, [pc, #8]	; (3374 <usbdc_xfer+0x1c>)
    336c:	4798      	blx	r3
}
    336e:	b005      	add	sp, #20
    3370:	f85d fb04 	ldr.w	pc, [sp], #4
    3374:	00001255 	.word	0x00001255

00003378 <usbdc_cb_ctl_req>:
{
    3378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    337c:	b083      	sub	sp, #12
    337e:	4605      	mov	r5, r0
    3380:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3382:	2200      	movs	r2, #0
    3384:	4b9b      	ldr	r3, [pc, #620]	; (35f4 <usbdc_cb_ctl_req+0x27c>)
    3386:	4798      	blx	r3
    3388:	f1b0 3fff 	cmp.w	r0, #4294967295
    338c:	d00b      	beq.n	33a6 <usbdc_cb_ctl_req+0x2e>
    338e:	2801      	cmp	r0, #1
    3390:	f000 81e3 	beq.w	375a <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    3394:	7823      	ldrb	r3, [r4, #0]
    3396:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    339a:	d008      	beq.n	33ae <usbdc_cb_ctl_req+0x36>
    339c:	2a80      	cmp	r2, #128	; 0x80
    339e:	f000 80f4 	beq.w	358a <usbdc_cb_ctl_req+0x212>
		return false;
    33a2:	2000      	movs	r0, #0
    33a4:	e000      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		return false;
    33a6:	2000      	movs	r0, #0
}
    33a8:	b003      	add	sp, #12
    33aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    33ae:	7862      	ldrb	r2, [r4, #1]
    33b0:	3a01      	subs	r2, #1
    33b2:	2a0a      	cmp	r2, #10
    33b4:	f200 81d3 	bhi.w	375e <usbdc_cb_ctl_req+0x3e6>
    33b8:	e8df f012 	tbh	[pc, r2, lsl #1]
    33bc:	01d10060 	.word	0x01d10060
    33c0:	01d10076 	.word	0x01d10076
    33c4:	01d1000b 	.word	0x01d1000b
    33c8:	01d101d1 	.word	0x01d101d1
    33cc:	01d10015 	.word	0x01d10015
    33d0:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    33d2:	2301      	movs	r3, #1
    33d4:	2200      	movs	r2, #0
    33d6:	4611      	mov	r1, r2
    33d8:	4628      	mov	r0, r5
    33da:	4c87      	ldr	r4, [pc, #540]	; (35f8 <usbdc_cb_ctl_req+0x280>)
    33dc:	47a0      	blx	r4
    33de:	fab0 f080 	clz	r0, r0
    33e2:	0940      	lsrs	r0, r0, #5
    33e4:	e7e0      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    33e6:	8862      	ldrh	r2, [r4, #2]
    33e8:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    33ea:	b1ca      	cbz	r2, 3420 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    33ec:	4b83      	ldr	r3, [pc, #524]	; (35fc <usbdc_cb_ctl_req+0x284>)
    33ee:	681b      	ldr	r3, [r3, #0]
    33f0:	6859      	ldr	r1, [r3, #4]
    33f2:	6818      	ldr	r0, [r3, #0]
    33f4:	4b82      	ldr	r3, [pc, #520]	; (3600 <usbdc_cb_ctl_req+0x288>)
    33f6:	4798      	blx	r3
	if (NULL == cfg_desc) {
    33f8:	2800      	cmp	r0, #0
    33fa:	f000 81be 	beq.w	377a <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    33fe:	78c2      	ldrb	r2, [r0, #3]
    3400:	7881      	ldrb	r1, [r0, #2]
    3402:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    3406:	fa10 f181 	uxtah	r1, r0, r1
    340a:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    340c:	2204      	movs	r2, #4
    340e:	4b7d      	ldr	r3, [pc, #500]	; (3604 <usbdc_cb_ctl_req+0x28c>)
    3410:	4798      	blx	r3
    3412:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    3414:	b130      	cbz	r0, 3424 <usbdc_cb_ctl_req+0xac>
    3416:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3418:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 35fc <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    341c:	4f79      	ldr	r7, [pc, #484]	; (3604 <usbdc_cb_ctl_req+0x28c>)
    341e:	e018      	b.n	3452 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    3420:	4b79      	ldr	r3, [pc, #484]	; (3608 <usbdc_cb_ctl_req+0x290>)
    3422:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3424:	2301      	movs	r3, #1
    3426:	2200      	movs	r2, #0
    3428:	4611      	mov	r1, r2
    342a:	4628      	mov	r0, r5
    342c:	4c72      	ldr	r4, [pc, #456]	; (35f8 <usbdc_cb_ctl_req+0x280>)
    342e:	47a0      	blx	r4
    3430:	fab0 f080 	clz	r0, r0
    3434:	0940      	lsrs	r0, r0, #5
    3436:	e7b7      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    3438:	464c      	mov	r4, r9
    343a:	e000      	b.n	343e <usbdc_cb_ctl_req+0xc6>
    343c:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    343e:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    3440:	7803      	ldrb	r3, [r0, #0]
    3442:	4418      	add	r0, r3
    3444:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3446:	2204      	movs	r2, #4
    3448:	9901      	ldr	r1, [sp, #4]
    344a:	47b8      	blx	r7
    344c:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    344e:	2800      	cmp	r0, #0
    3450:	d0e8      	beq.n	3424 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    3452:	f890 9002 	ldrb.w	r9, [r0, #2]
    3456:	45a1      	cmp	r9, r4
    3458:	d0f1      	beq.n	343e <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    345a:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    345e:	2c00      	cmp	r4, #0
    3460:	d0ea      	beq.n	3438 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    3462:	2600      	movs	r6, #0
    3464:	6863      	ldr	r3, [r4, #4]
    3466:	466a      	mov	r2, sp
    3468:	4631      	mov	r1, r6
    346a:	4620      	mov	r0, r4
    346c:	4798      	blx	r3
    346e:	2800      	cmp	r0, #0
    3470:	d0e4      	beq.n	343c <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    3472:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    3474:	2c00      	cmp	r4, #0
    3476:	d1f5      	bne.n	3464 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    3478:	464c      	mov	r4, r9
    347a:	e7e0      	b.n	343e <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    347c:	f003 031f 	and.w	r3, r3, #31
    3480:	2b02      	cmp	r3, #2
    3482:	f040 816e 	bne.w	3762 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    3486:	88e3      	ldrh	r3, [r4, #6]
    3488:	b10b      	cbz	r3, 348e <usbdc_cb_ctl_req+0x116>
			return false;
    348a:	2000      	movs	r0, #0
    348c:	e78c      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    348e:	88a0      	ldrh	r0, [r4, #4]
    3490:	2100      	movs	r1, #0
    3492:	b2c0      	uxtb	r0, r0
    3494:	4b5d      	ldr	r3, [pc, #372]	; (360c <usbdc_cb_ctl_req+0x294>)
    3496:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3498:	2301      	movs	r3, #1
    349a:	2200      	movs	r2, #0
    349c:	4611      	mov	r1, r2
    349e:	4628      	mov	r0, r5
    34a0:	4c55      	ldr	r4, [pc, #340]	; (35f8 <usbdc_cb_ctl_req+0x280>)
    34a2:	47a0      	blx	r4
		return true;
    34a4:	2001      	movs	r0, #1
    34a6:	e77f      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    34a8:	f003 031f 	and.w	r3, r3, #31
    34ac:	2b02      	cmp	r3, #2
    34ae:	f040 815a 	bne.w	3766 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    34b2:	88e3      	ldrh	r3, [r4, #6]
    34b4:	b10b      	cbz	r3, 34ba <usbdc_cb_ctl_req+0x142>
			return false;
    34b6:	2000      	movs	r0, #0
    34b8:	e776      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    34ba:	88a0      	ldrh	r0, [r4, #4]
    34bc:	2101      	movs	r1, #1
    34be:	b2c0      	uxtb	r0, r0
    34c0:	4b52      	ldr	r3, [pc, #328]	; (360c <usbdc_cb_ctl_req+0x294>)
    34c2:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    34c4:	2301      	movs	r3, #1
    34c6:	2200      	movs	r2, #0
    34c8:	4611      	mov	r1, r2
    34ca:	4628      	mov	r0, r5
    34cc:	4c4a      	ldr	r4, [pc, #296]	; (35f8 <usbdc_cb_ctl_req+0x280>)
    34ce:	47a0      	blx	r4
		return true;
    34d0:	2001      	movs	r0, #1
    34d2:	e769      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    34d4:	8866      	ldrh	r6, [r4, #2]
    34d6:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    34d8:	4a48      	ldr	r2, [pc, #288]	; (35fc <usbdc_cb_ctl_req+0x284>)
    34da:	6813      	ldr	r3, [r2, #0]
    34dc:	7ed2      	ldrb	r2, [r2, #27]
    34de:	6859      	ldr	r1, [r3, #4]
    34e0:	6818      	ldr	r0, [r3, #0]
    34e2:	4b47      	ldr	r3, [pc, #284]	; (3600 <usbdc_cb_ctl_req+0x288>)
    34e4:	4798      	blx	r3
	if (NULL == ifc) {
    34e6:	2800      	cmp	r0, #0
    34e8:	d045      	beq.n	3576 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    34ea:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    34ec:	78c2      	ldrb	r2, [r0, #3]
    34ee:	7881      	ldrb	r1, [r0, #2]
    34f0:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    34f4:	fa10 f181 	uxtah	r1, r0, r1
    34f8:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    34fa:	2204      	movs	r2, #4
    34fc:	4b41      	ldr	r3, [pc, #260]	; (3604 <usbdc_cb_ctl_req+0x28c>)
    34fe:	4798      	blx	r3
    3500:	4603      	mov	r3, r0
    3502:	2800      	cmp	r0, #0
    3504:	d039      	beq.n	357a <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3506:	2704      	movs	r7, #4
    3508:	4d3e      	ldr	r5, [pc, #248]	; (3604 <usbdc_cb_ctl_req+0x28c>)
    350a:	e008      	b.n	351e <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    350c:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    350e:	7803      	ldrb	r3, [r0, #0]
    3510:	4418      	add	r0, r3
    3512:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3514:	463a      	mov	r2, r7
    3516:	9901      	ldr	r1, [sp, #4]
    3518:	47a8      	blx	r5
		if (NULL == ifc) {
    351a:	4603      	mov	r3, r0
    351c:	b378      	cbz	r0, 357e <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    351e:	789a      	ldrb	r2, [r3, #2]
    3520:	42a2      	cmp	r2, r4
    3522:	d1f3      	bne.n	350c <usbdc_cb_ctl_req+0x194>
    3524:	78da      	ldrb	r2, [r3, #3]
    3526:	42b2      	cmp	r2, r6
    3528:	d1f0      	bne.n	350c <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    352a:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    352c:	4b33      	ldr	r3, [pc, #204]	; (35fc <usbdc_cb_ctl_req+0x284>)
    352e:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    3530:	b33d      	cbz	r5, 3582 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3532:	2701      	movs	r7, #1
    3534:	686b      	ldr	r3, [r5, #4]
    3536:	466a      	mov	r2, sp
    3538:	4639      	mov	r1, r7
    353a:	4628      	mov	r0, r5
    353c:	4798      	blx	r3
    353e:	b120      	cbz	r0, 354a <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    3540:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    3542:	2d00      	cmp	r5, #0
    3544:	d1f6      	bne.n	3534 <usbdc_cb_ctl_req+0x1bc>
	return false;
    3546:	2000      	movs	r0, #0
    3548:	e72e      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    354a:	686b      	ldr	r3, [r5, #4]
    354c:	466a      	mov	r2, sp
    354e:	2100      	movs	r1, #0
    3550:	4628      	mov	r0, r5
    3552:	4798      	blx	r3
    3554:	b9b8      	cbnz	r0, 3586 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    3556:	b136      	cbz	r6, 3566 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    3558:	4a28      	ldr	r2, [pc, #160]	; (35fc <usbdc_cb_ctl_req+0x284>)
    355a:	2301      	movs	r3, #1
    355c:	fa03 f404 	lsl.w	r4, r3, r4
    3560:	7f53      	ldrb	r3, [r2, #29]
    3562:	4323      	orrs	r3, r4
    3564:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    3566:	2300      	movs	r3, #0
    3568:	461a      	mov	r2, r3
    356a:	4619      	mov	r1, r3
    356c:	4618      	mov	r0, r3
    356e:	4c22      	ldr	r4, [pc, #136]	; (35f8 <usbdc_cb_ctl_req+0x280>)
    3570:	47a0      	blx	r4
			return true;
    3572:	2001      	movs	r0, #1
    3574:	e718      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		return false;
    3576:	2000      	movs	r0, #0
    3578:	e716      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		return false;
    357a:	2000      	movs	r0, #0
    357c:	e714      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
			return false;
    357e:	2000      	movs	r0, #0
    3580:	e712      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
	return false;
    3582:	2000      	movs	r0, #0
    3584:	e710      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
			return false;
    3586:	2000      	movs	r0, #0
    3588:	e70e      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    358a:	7862      	ldrb	r2, [r4, #1]
    358c:	2a0a      	cmp	r2, #10
    358e:	f200 80ec 	bhi.w	376a <usbdc_cb_ctl_req+0x3f2>
    3592:	e8df f012 	tbh	[pc, r2, lsl #1]
    3596:	008e      	.short	0x008e
    3598:	00ea00ea 	.word	0x00ea00ea
    359c:	00ea00ea 	.word	0x00ea00ea
    35a0:	000b00ea 	.word	0x000b00ea
    35a4:	008200ea 	.word	0x008200ea
    35a8:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    35ac:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    35ae:	0a13      	lsrs	r3, r2, #8
    35b0:	2b02      	cmp	r3, #2
    35b2:	d02d      	beq.n	3610 <usbdc_cb_ctl_req+0x298>
    35b4:	2b03      	cmp	r3, #3
    35b6:	d050      	beq.n	365a <usbdc_cb_ctl_req+0x2e2>
    35b8:	2b01      	cmp	r3, #1
    35ba:	d001      	beq.n	35c0 <usbdc_cb_ctl_req+0x248>
	return false;
    35bc:	2000      	movs	r0, #0
    35be:	e6f3      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    35c0:	88e2      	ldrh	r2, [r4, #6]
    35c2:	2a12      	cmp	r2, #18
    35c4:	bf28      	it	cs
    35c6:	2212      	movcs	r2, #18
    35c8:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    35ca:	4b0c      	ldr	r3, [pc, #48]	; (35fc <usbdc_cb_ctl_req+0x284>)
    35cc:	681b      	ldr	r3, [r3, #0]
    35ce:	2201      	movs	r2, #1
    35d0:	6859      	ldr	r1, [r3, #4]
    35d2:	6818      	ldr	r0, [r3, #0]
    35d4:	4b0b      	ldr	r3, [pc, #44]	; (3604 <usbdc_cb_ctl_req+0x28c>)
    35d6:	4798      	blx	r3
	if (!dev_desc) {
    35d8:	4601      	mov	r1, r0
    35da:	2800      	cmp	r0, #0
    35dc:	f000 80c7 	beq.w	376e <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    35e0:	2300      	movs	r3, #0
    35e2:	4622      	mov	r2, r4
    35e4:	4628      	mov	r0, r5
    35e6:	4c04      	ldr	r4, [pc, #16]	; (35f8 <usbdc_cb_ctl_req+0x280>)
    35e8:	47a0      	blx	r4
    35ea:	fab0 f080 	clz	r0, r0
    35ee:	0940      	lsrs	r0, r0, #5
    35f0:	e6da      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
    35f2:	bf00      	nop
    35f4:	0000320d 	.word	0x0000320d
    35f8:	00003359 	.word	0x00003359
    35fc:	20000a30 	.word	0x20000a30
    3600:	0000391d 	.word	0x0000391d
    3604:	0000389d 	.word	0x0000389d
    3608:	000031c1 	.word	0x000031c1
    360c:	00001375 	.word	0x00001375
	uint16_t length   = req->wLength;
    3610:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3612:	4b5b      	ldr	r3, [pc, #364]	; (3780 <usbdc_cb_ctl_req+0x408>)
    3614:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    3616:	681b      	ldr	r3, [r3, #0]
    3618:	3201      	adds	r2, #1
    361a:	b2d2      	uxtb	r2, r2
    361c:	6859      	ldr	r1, [r3, #4]
    361e:	6818      	ldr	r0, [r3, #0]
    3620:	4b58      	ldr	r3, [pc, #352]	; (3784 <usbdc_cb_ctl_req+0x40c>)
    3622:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3624:	4601      	mov	r1, r0
    3626:	2800      	cmp	r0, #0
    3628:	f000 80a3 	beq.w	3772 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    362c:	78c3      	ldrb	r3, [r0, #3]
    362e:	7882      	ldrb	r2, [r0, #2]
    3630:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    3634:	b292      	uxth	r2, r2
	if (length <= total_len) {
    3636:	4294      	cmp	r4, r2
    3638:	d90d      	bls.n	3656 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    363a:	3e01      	subs	r6, #1
    363c:	4226      	tst	r6, r4
    363e:	bf0c      	ite	eq
    3640:	2301      	moveq	r3, #1
    3642:	2300      	movne	r3, #0
		length = total_len;
    3644:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    3646:	4622      	mov	r2, r4
    3648:	4628      	mov	r0, r5
    364a:	4c4f      	ldr	r4, [pc, #316]	; (3788 <usbdc_cb_ctl_req+0x410>)
    364c:	47a0      	blx	r4
    364e:	fab0 f080 	clz	r0, r0
    3652:	0940      	lsrs	r0, r0, #5
    3654:	e6a8      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    3656:	2300      	movs	r3, #0
    3658:	e7f5      	b.n	3646 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    365a:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    365c:	4b48      	ldr	r3, [pc, #288]	; (3780 <usbdc_cb_ctl_req+0x408>)
    365e:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    3660:	681b      	ldr	r3, [r3, #0]
    3662:	b2d2      	uxtb	r2, r2
    3664:	6859      	ldr	r1, [r3, #4]
    3666:	6818      	ldr	r0, [r3, #0]
    3668:	4b48      	ldr	r3, [pc, #288]	; (378c <usbdc_cb_ctl_req+0x414>)
    366a:	4798      	blx	r3
	if (NULL == str_desc) {
    366c:	4601      	mov	r1, r0
    366e:	2800      	cmp	r0, #0
    3670:	f000 8081 	beq.w	3776 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    3674:	7802      	ldrb	r2, [r0, #0]
    3676:	4294      	cmp	r4, r2
    3678:	d90d      	bls.n	3696 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    367a:	3e01      	subs	r6, #1
    367c:	4226      	tst	r6, r4
    367e:	bf0c      	ite	eq
    3680:	2301      	moveq	r3, #1
    3682:	2300      	movne	r3, #0
		length = str_desc[0];
    3684:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    3686:	4622      	mov	r2, r4
    3688:	4628      	mov	r0, r5
    368a:	4c3f      	ldr	r4, [pc, #252]	; (3788 <usbdc_cb_ctl_req+0x410>)
    368c:	47a0      	blx	r4
    368e:	fab0 f080 	clz	r0, r0
    3692:	0940      	lsrs	r0, r0, #5
    3694:	e688      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    3696:	2300      	movs	r3, #0
    3698:	e7f5      	b.n	3686 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    369a:	4939      	ldr	r1, [pc, #228]	; (3780 <usbdc_cb_ctl_req+0x408>)
    369c:	694b      	ldr	r3, [r1, #20]
    369e:	7eca      	ldrb	r2, [r1, #27]
    36a0:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    36a2:	2300      	movs	r3, #0
    36a4:	2201      	movs	r2, #1
    36a6:	6949      	ldr	r1, [r1, #20]
    36a8:	4628      	mov	r0, r5
    36aa:	4c37      	ldr	r4, [pc, #220]	; (3788 <usbdc_cb_ctl_req+0x410>)
    36ac:	47a0      	blx	r4
		return true;
    36ae:	2001      	movs	r0, #1
    36b0:	e67a      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    36b2:	f003 031f 	and.w	r3, r3, #31
    36b6:	2b01      	cmp	r3, #1
    36b8:	d903      	bls.n	36c2 <usbdc_cb_ctl_req+0x34a>
    36ba:	2b02      	cmp	r3, #2
    36bc:	d010      	beq.n	36e0 <usbdc_cb_ctl_req+0x368>
		return false;
    36be:	2000      	movs	r0, #0
    36c0:	e672      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		st = 0;
    36c2:	2300      	movs	r3, #0
    36c4:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    36c6:	492e      	ldr	r1, [pc, #184]	; (3780 <usbdc_cb_ctl_req+0x408>)
    36c8:	694b      	ldr	r3, [r1, #20]
    36ca:	f8bd 2000 	ldrh.w	r2, [sp]
    36ce:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    36d0:	2300      	movs	r3, #0
    36d2:	2202      	movs	r2, #2
    36d4:	6949      	ldr	r1, [r1, #20]
    36d6:	4628      	mov	r0, r5
    36d8:	4c2b      	ldr	r4, [pc, #172]	; (3788 <usbdc_cb_ctl_req+0x410>)
    36da:	47a0      	blx	r4
	return true;
    36dc:	2001      	movs	r0, #1
    36de:	e663      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    36e0:	88a0      	ldrh	r0, [r4, #4]
    36e2:	2102      	movs	r1, #2
    36e4:	b2c0      	uxtb	r0, r0
    36e6:	4b2a      	ldr	r3, [pc, #168]	; (3790 <usbdc_cb_ctl_req+0x418>)
    36e8:	4798      	blx	r3
		if (st < 0) {
    36ea:	2800      	cmp	r0, #0
    36ec:	db03      	blt.n	36f6 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    36ee:	f000 0001 	and.w	r0, r0, #1
    36f2:	9000      	str	r0, [sp, #0]
    36f4:	e7e7      	b.n	36c6 <usbdc_cb_ctl_req+0x34e>
			return false;
    36f6:	2000      	movs	r0, #0
    36f8:	e656      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    36fa:	4b21      	ldr	r3, [pc, #132]	; (3780 <usbdc_cb_ctl_req+0x408>)
    36fc:	7f5b      	ldrb	r3, [r3, #29]
    36fe:	88a2      	ldrh	r2, [r4, #4]
    3700:	4113      	asrs	r3, r2
    3702:	f013 0f01 	tst.w	r3, #1
    3706:	d012      	beq.n	372e <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3708:	4b1d      	ldr	r3, [pc, #116]	; (3780 <usbdc_cb_ctl_req+0x408>)
    370a:	691d      	ldr	r5, [r3, #16]
	return false;
    370c:	2000      	movs	r0, #0
	while (NULL != func) {
    370e:	2d00      	cmp	r5, #0
    3710:	f43f ae4a 	beq.w	33a8 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    3714:	2602      	movs	r6, #2
    3716:	686b      	ldr	r3, [r5, #4]
    3718:	4622      	mov	r2, r4
    371a:	4631      	mov	r1, r6
    371c:	4628      	mov	r0, r5
    371e:	4798      	blx	r3
    3720:	2800      	cmp	r0, #0
    3722:	da0f      	bge.n	3744 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    3724:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    3726:	2d00      	cmp	r5, #0
    3728:	d1f5      	bne.n	3716 <usbdc_cb_ctl_req+0x39e>
	return false;
    372a:	2000      	movs	r0, #0
    372c:	e63c      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    372e:	4914      	ldr	r1, [pc, #80]	; (3780 <usbdc_cb_ctl_req+0x408>)
    3730:	694b      	ldr	r3, [r1, #20]
    3732:	2000      	movs	r0, #0
    3734:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3736:	4603      	mov	r3, r0
    3738:	2201      	movs	r2, #1
    373a:	6949      	ldr	r1, [r1, #20]
    373c:	4c12      	ldr	r4, [pc, #72]	; (3788 <usbdc_cb_ctl_req+0x410>)
    373e:	47a0      	blx	r4
		return true;
    3740:	2001      	movs	r0, #1
    3742:	e631      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    3744:	490e      	ldr	r1, [pc, #56]	; (3780 <usbdc_cb_ctl_req+0x408>)
    3746:	694b      	ldr	r3, [r1, #20]
    3748:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    374a:	2300      	movs	r3, #0
    374c:	2201      	movs	r2, #1
    374e:	6949      	ldr	r1, [r1, #20]
    3750:	4618      	mov	r0, r3
    3752:	4c0d      	ldr	r4, [pc, #52]	; (3788 <usbdc_cb_ctl_req+0x410>)
    3754:	47a0      	blx	r4
			return true;
    3756:	2001      	movs	r0, #1
    3758:	e626      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		return true;
    375a:	2001      	movs	r0, #1
    375c:	e624      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		return false;
    375e:	2000      	movs	r0, #0
    3760:	e622      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		return false;
    3762:	2000      	movs	r0, #0
    3764:	e620      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		return false;
    3766:	2000      	movs	r0, #0
    3768:	e61e      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		return false;
    376a:	2000      	movs	r0, #0
    376c:	e61c      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		return false;
    376e:	2000      	movs	r0, #0
    3770:	e61a      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		return false;
    3772:	2000      	movs	r0, #0
    3774:	e618      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
		return false;
    3776:	2000      	movs	r0, #0
    3778:	e616      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
			return false;
    377a:	2000      	movs	r0, #0
    377c:	e614      	b.n	33a8 <usbdc_cb_ctl_req+0x30>
    377e:	bf00      	nop
    3780:	20000a30 	.word	0x20000a30
    3784:	0000391d 	.word	0x0000391d
    3788:	00003359 	.word	0x00003359
    378c:	00003985 	.word	0x00003985
    3790:	00001375 	.word	0x00001375

00003794 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    3794:	b508      	push	{r3, lr}
	switch (type) {
    3796:	2801      	cmp	r0, #1
    3798:	d007      	beq.n	37aa <usbdc_register_handler+0x16>
    379a:	b110      	cbz	r0, 37a2 <usbdc_register_handler+0xe>
    379c:	2802      	cmp	r0, #2
    379e:	d008      	beq.n	37b2 <usbdc_register_handler+0x1e>
    37a0:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    37a2:	4806      	ldr	r0, [pc, #24]	; (37bc <usbdc_register_handler+0x28>)
    37a4:	4b06      	ldr	r3, [pc, #24]	; (37c0 <usbdc_register_handler+0x2c>)
    37a6:	4798      	blx	r3
		break;
    37a8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    37aa:	4806      	ldr	r0, [pc, #24]	; (37c4 <usbdc_register_handler+0x30>)
    37ac:	4b04      	ldr	r3, [pc, #16]	; (37c0 <usbdc_register_handler+0x2c>)
    37ae:	4798      	blx	r3
		break;
    37b0:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    37b2:	4805      	ldr	r0, [pc, #20]	; (37c8 <usbdc_register_handler+0x34>)
    37b4:	4b02      	ldr	r3, [pc, #8]	; (37c0 <usbdc_register_handler+0x2c>)
    37b6:	4798      	blx	r3
    37b8:	bd08      	pop	{r3, pc}
    37ba:	bf00      	nop
    37bc:	20000a34 	.word	0x20000a34
    37c0:	00001485 	.word	0x00001485
    37c4:	20000a38 	.word	0x20000a38
    37c8:	20000a3c 	.word	0x20000a3c

000037cc <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    37cc:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    37ce:	4605      	mov	r5, r0
    37d0:	f240 3255 	movw	r2, #853	; 0x355
    37d4:	490c      	ldr	r1, [pc, #48]	; (3808 <usbdc_init+0x3c>)
    37d6:	3000      	adds	r0, #0
    37d8:	bf18      	it	ne
    37da:	2001      	movne	r0, #1
    37dc:	4b0b      	ldr	r3, [pc, #44]	; (380c <usbdc_init+0x40>)
    37de:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    37e0:	4b0b      	ldr	r3, [pc, #44]	; (3810 <usbdc_init+0x44>)
    37e2:	4798      	blx	r3
	if (rc < 0) {
    37e4:	2800      	cmp	r0, #0
    37e6:	db0e      	blt.n	3806 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    37e8:	4c0a      	ldr	r4, [pc, #40]	; (3814 <usbdc_init+0x48>)
    37ea:	2220      	movs	r2, #32
    37ec:	2100      	movs	r1, #0
    37ee:	4620      	mov	r0, r4
    37f0:	4b09      	ldr	r3, [pc, #36]	; (3818 <usbdc_init+0x4c>)
    37f2:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    37f4:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    37f6:	4909      	ldr	r1, [pc, #36]	; (381c <usbdc_init+0x50>)
    37f8:	2000      	movs	r0, #0
    37fa:	4c09      	ldr	r4, [pc, #36]	; (3820 <usbdc_init+0x54>)
    37fc:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    37fe:	4909      	ldr	r1, [pc, #36]	; (3824 <usbdc_init+0x58>)
    3800:	2001      	movs	r0, #1
    3802:	47a0      	blx	r4

	return 0;
    3804:	2000      	movs	r0, #0
}
    3806:	bd38      	pop	{r3, r4, r5, pc}
    3808:	00004490 	.word	0x00004490
    380c:	00001429 	.word	0x00001429
    3810:	000010dd 	.word	0x000010dd
    3814:	20000a30 	.word	0x20000a30
    3818:	000040b5 	.word	0x000040b5
    381c:	0000324d 	.word	0x0000324d
    3820:	00001145 	.word	0x00001145
    3824:	00003339 	.word	0x00003339

00003828 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    3828:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    382a:	4601      	mov	r1, r0
    382c:	4801      	ldr	r0, [pc, #4]	; (3834 <usbdc_register_function+0xc>)
    382e:	4b02      	ldr	r3, [pc, #8]	; (3838 <usbdc_register_function+0x10>)
    3830:	4798      	blx	r3
    3832:	bd08      	pop	{r3, pc}
    3834:	20000a40 	.word	0x20000a40
    3838:	00001485 	.word	0x00001485

0000383c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    383c:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    383e:	4b0a      	ldr	r3, [pc, #40]	; (3868 <usbdc_start+0x2c>)
    3840:	7e9b      	ldrb	r3, [r3, #26]
    3842:	b95b      	cbnz	r3, 385c <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    3844:	b168      	cbz	r0, 3862 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    3846:	4b08      	ldr	r3, [pc, #32]	; (3868 <usbdc_start+0x2c>)
    3848:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    384a:	6802      	ldr	r2, [r0, #0]
    384c:	79d2      	ldrb	r2, [r2, #7]
    384e:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    3850:	2201      	movs	r2, #1
    3852:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    3854:	4b05      	ldr	r3, [pc, #20]	; (386c <usbdc_start+0x30>)
    3856:	4798      	blx	r3
	return ERR_NONE;
    3858:	2000      	movs	r0, #0
    385a:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    385c:	f06f 0003 	mvn.w	r0, #3
    3860:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    3862:	f06f 0008 	mvn.w	r0, #8
}
    3866:	bd08      	pop	{r3, pc}
    3868:	20000a30 	.word	0x20000a30
    386c:	00001151 	.word	0x00001151

00003870 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    3870:	b508      	push	{r3, lr}
	usb_d_attach();
    3872:	4b01      	ldr	r3, [pc, #4]	; (3878 <usbdc_attach+0x8>)
    3874:	4798      	blx	r3
    3876:	bd08      	pop	{r3, pc}
    3878:	0000115d 	.word	0x0000115d

0000387c <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    387c:	4b01      	ldr	r3, [pc, #4]	; (3884 <usbdc_get_ctrl_buffer+0x8>)
    387e:	6958      	ldr	r0, [r3, #20]
    3880:	4770      	bx	lr
    3882:	bf00      	nop
    3884:	20000a30 	.word	0x20000a30

00003888 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    3888:	4b03      	ldr	r3, [pc, #12]	; (3898 <usbdc_get_state+0x10>)
    388a:	7e98      	ldrb	r0, [r3, #26]
    388c:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    3890:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    3892:	bf18      	it	ne
    3894:	2010      	movne	r0, #16
    3896:	4770      	bx	lr
    3898:	20000a30 	.word	0x20000a30

0000389c <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    389c:	4288      	cmp	r0, r1
    389e:	d214      	bcs.n	38ca <usb_find_desc+0x2e>
	return desc[0];
    38a0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    38a2:	2b01      	cmp	r3, #1
    38a4:	d913      	bls.n	38ce <usb_find_desc+0x32>
{
    38a6:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    38a8:	7844      	ldrb	r4, [r0, #1]
    38aa:	4294      	cmp	r4, r2
    38ac:	d00a      	beq.n	38c4 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    38ae:	4418      	add	r0, r3
	while (desc < eof) {
    38b0:	4281      	cmp	r1, r0
    38b2:	d906      	bls.n	38c2 <usb_find_desc+0x26>
	return desc[0];
    38b4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    38b6:	2b01      	cmp	r3, #1
    38b8:	d90b      	bls.n	38d2 <usb_find_desc+0x36>
	return desc[1];
    38ba:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    38bc:	4294      	cmp	r4, r2
    38be:	d1f6      	bne.n	38ae <usb_find_desc+0x12>
    38c0:	e000      	b.n	38c4 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    38c2:	2000      	movs	r0, #0
}
    38c4:	f85d 4b04 	ldr.w	r4, [sp], #4
    38c8:	4770      	bx	lr
	return NULL;
    38ca:	2000      	movs	r0, #0
    38cc:	4770      	bx	lr
		_desc_len_check();
    38ce:	2000      	movs	r0, #0
    38d0:	4770      	bx	lr
    38d2:	2000      	movs	r0, #0
    38d4:	e7f6      	b.n	38c4 <usb_find_desc+0x28>

000038d6 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    38d6:	4288      	cmp	r0, r1
    38d8:	d216      	bcs.n	3908 <usb_find_ep_desc+0x32>
	return desc[0];
    38da:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    38dc:	2b01      	cmp	r3, #1
    38de:	d915      	bls.n	390c <usb_find_ep_desc+0x36>
	return desc[1];
    38e0:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    38e2:	2a04      	cmp	r2, #4
    38e4:	d014      	beq.n	3910 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    38e6:	2a05      	cmp	r2, #5
    38e8:	d00b      	beq.n	3902 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    38ea:	4418      	add	r0, r3
	while (desc < eof) {
    38ec:	4281      	cmp	r1, r0
    38ee:	d909      	bls.n	3904 <usb_find_ep_desc+0x2e>
	return desc[0];
    38f0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    38f2:	2b01      	cmp	r3, #1
    38f4:	d90e      	bls.n	3914 <usb_find_ep_desc+0x3e>
	return desc[1];
    38f6:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    38f8:	2a04      	cmp	r2, #4
    38fa:	d00d      	beq.n	3918 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    38fc:	2a05      	cmp	r2, #5
    38fe:	d1f4      	bne.n	38ea <usb_find_ep_desc+0x14>
    3900:	e00b      	b.n	391a <usb_find_ep_desc+0x44>
    3902:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3904:	2000      	movs	r0, #0
    3906:	4770      	bx	lr
    3908:	2000      	movs	r0, #0
    390a:	4770      	bx	lr
		_desc_len_check();
    390c:	2000      	movs	r0, #0
    390e:	4770      	bx	lr
	return NULL;
    3910:	2000      	movs	r0, #0
    3912:	4770      	bx	lr
		_desc_len_check();
    3914:	2000      	movs	r0, #0
    3916:	4770      	bx	lr
	return NULL;
    3918:	2000      	movs	r0, #0
}
    391a:	4770      	bx	lr

0000391c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    391c:	b538      	push	{r3, r4, r5, lr}
    391e:	460c      	mov	r4, r1
    3920:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    3922:	2202      	movs	r2, #2
    3924:	4b16      	ldr	r3, [pc, #88]	; (3980 <usb_find_cfg_desc+0x64>)
    3926:	4798      	blx	r3
	if (!desc) {
    3928:	4603      	mov	r3, r0
    392a:	b1e8      	cbz	r0, 3968 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    392c:	4284      	cmp	r4, r0
    392e:	d91d      	bls.n	396c <usb_find_cfg_desc+0x50>
		_desc_len_check();
    3930:	7802      	ldrb	r2, [r0, #0]
    3932:	2a01      	cmp	r2, #1
    3934:	d91c      	bls.n	3970 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    3936:	7842      	ldrb	r2, [r0, #1]
    3938:	2a02      	cmp	r2, #2
    393a:	d11b      	bne.n	3974 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    393c:	7942      	ldrb	r2, [r0, #5]
    393e:	42aa      	cmp	r2, r5
    3940:	d012      	beq.n	3968 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    3942:	78d9      	ldrb	r1, [r3, #3]
    3944:	789a      	ldrb	r2, [r3, #2]
    3946:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    394a:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    394e:	429c      	cmp	r4, r3
    3950:	d909      	bls.n	3966 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    3952:	781a      	ldrb	r2, [r3, #0]
    3954:	2a01      	cmp	r2, #1
    3956:	d90f      	bls.n	3978 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    3958:	785a      	ldrb	r2, [r3, #1]
    395a:	2a02      	cmp	r2, #2
    395c:	d10e      	bne.n	397c <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    395e:	795a      	ldrb	r2, [r3, #5]
    3960:	42aa      	cmp	r2, r5
    3962:	d1ee      	bne.n	3942 <usb_find_cfg_desc+0x26>
    3964:	e000      	b.n	3968 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    3966:	2300      	movs	r3, #0
}
    3968:	4618      	mov	r0, r3
    396a:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    396c:	2300      	movs	r3, #0
    396e:	e7fb      	b.n	3968 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3970:	2300      	movs	r3, #0
    3972:	e7f9      	b.n	3968 <usb_find_cfg_desc+0x4c>
	return NULL;
    3974:	2300      	movs	r3, #0
    3976:	e7f7      	b.n	3968 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3978:	2300      	movs	r3, #0
    397a:	e7f5      	b.n	3968 <usb_find_cfg_desc+0x4c>
	return NULL;
    397c:	2300      	movs	r3, #0
    397e:	e7f3      	b.n	3968 <usb_find_cfg_desc+0x4c>
    3980:	0000389d 	.word	0x0000389d

00003984 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    3984:	4288      	cmp	r0, r1
    3986:	d217      	bcs.n	39b8 <usb_find_str_desc+0x34>
{
    3988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    398c:	460d      	mov	r5, r1
    398e:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    3990:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    3992:	f04f 0803 	mov.w	r8, #3
    3996:	4f0c      	ldr	r7, [pc, #48]	; (39c8 <usb_find_str_desc+0x44>)
    3998:	4642      	mov	r2, r8
    399a:	4629      	mov	r1, r5
    399c:	47b8      	blx	r7
		if (desc) {
    399e:	4603      	mov	r3, r0
    39a0:	b170      	cbz	r0, 39c0 <usb_find_str_desc+0x3c>
	return desc[0];
    39a2:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    39a4:	2801      	cmp	r0, #1
    39a6:	d90a      	bls.n	39be <usb_find_str_desc+0x3a>
			if (i == str_index) {
    39a8:	42a6      	cmp	r6, r4
    39aa:	d009      	beq.n	39c0 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    39ac:	4418      	add	r0, r3
    39ae:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    39b0:	4285      	cmp	r5, r0
    39b2:	d8f1      	bhi.n	3998 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    39b4:	2300      	movs	r3, #0
    39b6:	e003      	b.n	39c0 <usb_find_str_desc+0x3c>
    39b8:	2300      	movs	r3, #0
}
    39ba:	4618      	mov	r0, r3
    39bc:	4770      	bx	lr
			_desc_len_check();
    39be:	2300      	movs	r3, #0
}
    39c0:	4618      	mov	r0, r3
    39c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39c6:	bf00      	nop
    39c8:	0000389d 	.word	0x0000389d

000039cc <ug2832hsweg04_put_page>:
/**
 * \brief Put a page from RAM to the display controller.
 */
void ug2832hsweg04_put_page(const struct display_mono *const me, const enum gfx_mono_color *data,
                            const gfx_coord_t page, const gfx_coord_t page_offset, const gfx_coord_t width)
{
    39cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    39d0:	b083      	sub	sp, #12
    39d2:	4604      	mov	r4, r0
    39d4:	460e      	mov	r6, r1
    39d6:	4617      	mov	r7, r2
    39d8:	4698      	mov	r8, r3
    39da:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

#if CONF_UG2832HSWEG04_FRAMEBUFFER == 1
	framebuffer_put_page(&disp->framebuffer.parent, data, page, page_offset, width);
    39de:	9500      	str	r5, [sp, #0]
    39e0:	3018      	adds	r0, #24
    39e2:	f8df 901c 	ldr.w	r9, [pc, #28]	; 3a00 <ug2832hsweg04_put_page+0x34>
    39e6:	47c8      	blx	r9
#endif
	display_mono_put_page(&disp->parent, data, page, page_offset, width);
    39e8:	9500      	str	r5, [sp, #0]
    39ea:	4643      	mov	r3, r8
    39ec:	463a      	mov	r2, r7
    39ee:	4631      	mov	r1, r6
    39f0:	4620      	mov	r0, r4
    39f2:	4c02      	ldr	r4, [pc, #8]	; (39fc <ug2832hsweg04_put_page+0x30>)
    39f4:	47a0      	blx	r4
}
    39f6:	b003      	add	sp, #12
    39f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    39fc:	00003dcf 	.word	0x00003dcf
    3a00:	00003e5b 	.word	0x00003e5b

00003a04 <ug2832hsweg04_draw_pixel>:
/**
 * \brief Draw pixel to screen
 */
void ug2832hsweg04_draw_pixel(const struct display_mono *const me, const gfx_coord_t x, const gfx_coord_t y,
                              const enum gfx_mono_color color)
{
    3a04:	b510      	push	{r4, lr}
    3a06:	b084      	sub	sp, #16
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

	display_mono_draw_pixel(&disp->parent, x, y, color, UG2832HSWEG04_LCD_WIDTH, UG2832HSWEG04_LCD_HEIGHT, 8);
    3a08:	2408      	movs	r4, #8
    3a0a:	9402      	str	r4, [sp, #8]
    3a0c:	2420      	movs	r4, #32
    3a0e:	9401      	str	r4, [sp, #4]
    3a10:	2480      	movs	r4, #128	; 0x80
    3a12:	9400      	str	r4, [sp, #0]
    3a14:	4c01      	ldr	r4, [pc, #4]	; (3a1c <ug2832hsweg04_draw_pixel+0x18>)
    3a16:	47a0      	blx	r4
}
    3a18:	b004      	add	sp, #16
    3a1a:	bd10      	pop	{r4, pc}
    3a1c:	00003d5b 	.word	0x00003d5b

00003a20 <ug2832hsweg04_put_byte>:
/**
 * \brief Put a byte to the display controller RAM
 */
void ug2832hsweg04_put_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                            const uint8_t data)
{
    3a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a24:	4604      	mov	r4, r0
    3a26:	460d      	mov	r5, r1
    3a28:	4616      	mov	r6, r2
    3a2a:	461f      	mov	r7, r3
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

#if CONF_UG2832HSWEG04_FRAMEBUFFER == 1
	framebuffer_put_byte(&disp->framebuffer.parent, page, column, data);
    3a2c:	3018      	adds	r0, #24
    3a2e:	f8df 8018 	ldr.w	r8, [pc, #24]	; 3a48 <ug2832hsweg04_put_byte+0x28>
    3a32:	47c0      	blx	r8
#endif
	display_mono_put_byte(&disp->parent, page, column, data);
    3a34:	463b      	mov	r3, r7
    3a36:	4632      	mov	r2, r6
    3a38:	4629      	mov	r1, r5
    3a3a:	4620      	mov	r0, r4
    3a3c:	4c01      	ldr	r4, [pc, #4]	; (3a44 <ug2832hsweg04_put_byte+0x24>)
    3a3e:	47a0      	blx	r4
    3a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a44:	00003ceb 	.word	0x00003ceb
    3a48:	00003e85 	.word	0x00003e85

00003a4c <ug2832hsweg04_get_byte>:

/**
 * \brief Get a byte from the display controller RAM
 */
uint8_t ug2832hsweg04_get_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column)
{
    3a4c:	b508      	push	{r3, lr}
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

#if CONF_UG2832HSWEG04_FRAMEBUFFER == 1
	return framebuffer_get_byte(&disp->framebuffer.parent, page, column);
    3a4e:	3018      	adds	r0, #24
    3a50:	4b01      	ldr	r3, [pc, #4]	; (3a58 <ug2832hsweg04_get_byte+0xc>)
    3a52:	4798      	blx	r3
#else
	return display_mono_get_byte(&disp->parent, page, column);
#endif
}
    3a54:	bd08      	pop	{r3, pc}
    3a56:	bf00      	nop
    3a58:	00003e97 	.word	0x00003e97

00003a5c <ug2832hsweg04_mask_byte>:
/**
 * \brief Read/Modify/Write a byte on the display controller
 */
void ug2832hsweg04_mask_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                             const enum gfx_mono_color pixel_mask, const enum gfx_mono_color color)
{
    3a5c:	b510      	push	{r4, lr}
    3a5e:	b082      	sub	sp, #8
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

	display_mono_mask_byte(&disp->parent, page, column, pixel_mask, color);
    3a60:	f89d 4010 	ldrb.w	r4, [sp, #16]
    3a64:	9400      	str	r4, [sp, #0]
    3a66:	4c02      	ldr	r4, [pc, #8]	; (3a70 <ug2832hsweg04_mask_byte+0x14>)
    3a68:	47a0      	blx	r4
}
    3a6a:	b002      	add	sp, #8
    3a6c:	bd10      	pop	{r4, pc}
    3a6e:	bf00      	nop
    3a70:	00003d11 	.word	0x00003d11

00003a74 <ug2832hsweg04_construct>:
{
    3a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3a78:	b083      	sub	sp, #12
    3a7a:	4604      	mov	r4, r0
    3a7c:	4689      	mov	r9, r1
    3a7e:	4617      	mov	r7, r2
    3a80:	4698      	mov	r8, r3
	display_mono_construct(&display->parent,
    3a82:	f100 050c 	add.w	r5, r0, #12
    3a86:	4b10      	ldr	r3, [pc, #64]	; (3ac8 <ug2832hsweg04_construct+0x54>)
    3a88:	9300      	str	r3, [sp, #0]
    3a8a:	2320      	movs	r3, #32
    3a8c:	2280      	movs	r2, #128	; 0x80
    3a8e:	4629      	mov	r1, r5
    3a90:	4e0e      	ldr	r6, [pc, #56]	; (3acc <ug2832hsweg04_construct+0x58>)
    3a92:	47b0      	blx	r6
	ssd1306_construct(&display->dc.parent, io, cs, res, dc);
    3a94:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    3a98:	9300      	str	r3, [sp, #0]
    3a9a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    3a9e:	4642      	mov	r2, r8
    3aa0:	4639      	mov	r1, r7
    3aa2:	4628      	mov	r0, r5
    3aa4:	4d0a      	ldr	r5, [pc, #40]	; (3ad0 <ug2832hsweg04_construct+0x5c>)
    3aa6:	47a8      	blx	r5
	framebuffer_construct(&display->framebuffer.parent, framebuffer, UG2832HSWEG04_LCD_WIDTH, UG2832HSWEG04_LCD_HEIGHT);
    3aa8:	2320      	movs	r3, #32
    3aaa:	2280      	movs	r2, #128	; 0x80
    3aac:	4649      	mov	r1, r9
    3aae:	f104 0018 	add.w	r0, r4, #24
    3ab2:	4d08      	ldr	r5, [pc, #32]	; (3ad4 <ug2832hsweg04_construct+0x60>)
    3ab4:	47a8      	blx	r5
	display_mono_init(me, UG2832HSWEG04_LCD_WIDTH, UG2832HSWEG04_LCD_PAGES);
    3ab6:	2204      	movs	r2, #4
    3ab8:	2180      	movs	r1, #128	; 0x80
    3aba:	4620      	mov	r0, r4
    3abc:	4b06      	ldr	r3, [pc, #24]	; (3ad8 <ug2832hsweg04_construct+0x64>)
    3abe:	4798      	blx	r3
}
    3ac0:	4620      	mov	r0, r4
    3ac2:	b003      	add	sp, #12
    3ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3ac8:	20000068 	.word	0x20000068
    3acc:	00003cd9 	.word	0x00003cd9
    3ad0:	00003c15 	.word	0x00003c15
    3ad4:	00003ed9 	.word	0x00003ed9
    3ad8:	00003e09 	.word	0x00003e09

00003adc <ssd1306_write_data>:

/**
 * \brief Write data to the display controller
 */
void ssd1306_write_data(const struct display_ctrl_mono *const me, const uint8_t data)
{
    3adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ade:	b083      	sub	sp, #12
    3ae0:	4606      	mov	r6, r0
    3ae2:	af02      	add	r7, sp, #8
    3ae4:	f807 1d01 	strb.w	r1, [r7, #-1]!
	struct io_descriptor *      io   = me->io;
    3ae8:	6800      	ldr	r0, [r0, #0]
	const struct ssd1306 *const ctrl = (const struct ssd1306 *const)me;

	gpio_set_pin_level(ctrl->pin_dc, true);
    3aea:	7ab3      	ldrb	r3, [r6, #10]
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    3aec:	f003 021f 	and.w	r2, r3, #31
    3af0:	2401      	movs	r4, #1
    3af2:	fa04 f202 	lsl.w	r2, r4, r2
    3af6:	095b      	lsrs	r3, r3, #5
    3af8:	4d0d      	ldr	r5, [pc, #52]	; (3b30 <ssd1306_write_data+0x54>)
    3afa:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    3afe:	619a      	str	r2, [r3, #24]
	gpio_set_pin_level(ctrl->pin_cs, false);
    3b00:	7a33      	ldrb	r3, [r6, #8]
    3b02:	f003 021f 	and.w	r2, r3, #31
    3b06:	fa04 f202 	lsl.w	r2, r4, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3b0a:	095b      	lsrs	r3, r3, #5
    3b0c:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    3b10:	615a      	str	r2, [r3, #20]
	io->write(io, &data, 1);
    3b12:	6803      	ldr	r3, [r0, #0]
    3b14:	4622      	mov	r2, r4
    3b16:	4639      	mov	r1, r7
    3b18:	4798      	blx	r3
	gpio_set_pin_level(ctrl->pin_cs, true);
    3b1a:	7a33      	ldrb	r3, [r6, #8]
    3b1c:	f003 021f 	and.w	r2, r3, #31
    3b20:	4094      	lsls	r4, r2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3b22:	095b      	lsrs	r3, r3, #5
    3b24:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    3b28:	61ac      	str	r4, [r5, #24]
}
    3b2a:	b003      	add	sp, #12
    3b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b2e:	bf00      	nop
    3b30:	41008000 	.word	0x41008000

00003b34 <ssd1306_read_data>:
 */
uint8_t ssd1306_read_data(const struct display_ctrl_mono *const me)
{
	(void)me;
	return 0;
}
    3b34:	2000      	movs	r0, #0
    3b36:	4770      	bx	lr

00003b38 <ssd1306_write_command>:
{
    3b38:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b3a:	b083      	sub	sp, #12
    3b3c:	4606      	mov	r6, r0
    3b3e:	af02      	add	r7, sp, #8
    3b40:	f807 1d01 	strb.w	r1, [r7, #-1]!
	struct io_descriptor *      io   = me->io;
    3b44:	6800      	ldr	r0, [r0, #0]
	gpio_set_pin_level(ctrl->pin_dc, false);
    3b46:	7ab3      	ldrb	r3, [r6, #10]
    3b48:	f003 021f 	and.w	r2, r3, #31
    3b4c:	2401      	movs	r4, #1
    3b4e:	fa04 f202 	lsl.w	r2, r4, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3b52:	095b      	lsrs	r3, r3, #5
    3b54:	4d0d      	ldr	r5, [pc, #52]	; (3b8c <ssd1306_write_command+0x54>)
    3b56:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    3b5a:	615a      	str	r2, [r3, #20]
	gpio_set_pin_level(ctrl->pin_cs, false);
    3b5c:	7a33      	ldrb	r3, [r6, #8]
    3b5e:	f003 021f 	and.w	r2, r3, #31
    3b62:	fa04 f202 	lsl.w	r2, r4, r2
    3b66:	095b      	lsrs	r3, r3, #5
    3b68:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    3b6c:	615a      	str	r2, [r3, #20]
	io->write(io, &command, 1);
    3b6e:	6803      	ldr	r3, [r0, #0]
    3b70:	4622      	mov	r2, r4
    3b72:	4639      	mov	r1, r7
    3b74:	4798      	blx	r3
	gpio_set_pin_level(ctrl->pin_cs, true);
    3b76:	7a33      	ldrb	r3, [r6, #8]
    3b78:	f003 021f 	and.w	r2, r3, #31
    3b7c:	4094      	lsls	r4, r2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3b7e:	095b      	lsrs	r3, r3, #5
    3b80:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    3b84:	61ac      	str	r4, [r5, #24]
}
    3b86:	b003      	add	sp, #12
    3b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b8a:	bf00      	nop
    3b8c:	41008000 	.word	0x41008000

00003b90 <ssd1306_set_page_address>:

/**
 * \brief Set current page in display RAM
 */
void ssd1306_set_page_address(const struct display_ctrl_mono *const me, const uint8_t address)
{
    3b90:	b508      	push	{r3, lr}
	ssd1306_write_command(me, SSD1306_CMD_SET_PAGE_START_ADDRESS(address & 0xF));
    3b92:	f001 0107 	and.w	r1, r1, #7
    3b96:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
    3b9a:	4b01      	ldr	r3, [pc, #4]	; (3ba0 <ssd1306_set_page_address+0x10>)
    3b9c:	4798      	blx	r3
    3b9e:	bd08      	pop	{r3, pc}
    3ba0:	00003b39 	.word	0x00003b39

00003ba4 <ssd1306_set_column_address>:

/**
 * \brief Set current column in display RAM
 */
void ssd1306_set_column_address(const struct display_ctrl_mono *const me, uint8_t address)
{
    3ba4:	b570      	push	{r4, r5, r6, lr}
    3ba6:	4606      	mov	r6, r0
    3ba8:	460d      	mov	r5, r1
	address &= 0x7F;
	ssd1306_write_command(me, SSD1306_CMD_SET_HIGH_COL(address >> 4));
    3baa:	f3c1 1102 	ubfx	r1, r1, #4, #3
    3bae:	f041 0110 	orr.w	r1, r1, #16
    3bb2:	4c03      	ldr	r4, [pc, #12]	; (3bc0 <ssd1306_set_column_address+0x1c>)
    3bb4:	47a0      	blx	r4
	ssd1306_write_command(me, SSD1306_CMD_SET_LOW_COL(address & 0x0F));
    3bb6:	f005 010f 	and.w	r1, r5, #15
    3bba:	4630      	mov	r0, r6
    3bbc:	47a0      	blx	r4
    3bbe:	bd70      	pop	{r4, r5, r6, pc}
    3bc0:	00003b39 	.word	0x00003b39

00003bc4 <ssd1306_set_start_line_address>:

/**
 * \brief Set the display start draw line address
 */
void ssd1306_set_start_line_address(const struct display_ctrl_mono *const me, const uint8_t address)
{
    3bc4:	b508      	push	{r3, lr}
	ssd1306_write_command(me, SSD1306_CMD_SET_START_LINE(address & 0x3F));
    3bc6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    3bca:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    3bce:	4b01      	ldr	r3, [pc, #4]	; (3bd4 <ssd1306_set_start_line_address+0x10>)
    3bd0:	4798      	blx	r3
    3bd2:	bd08      	pop	{r3, pc}
    3bd4:	00003b39 	.word	0x00003b39

00003bd8 <ssd1306_hard_reset>:
{
    3bd8:	b508      	push	{r3, lr}
	display_ctrl_mono_hard_reset(((const struct ssd1306 *)me)->pin_res, 10);
    3bda:	210a      	movs	r1, #10
    3bdc:	7a40      	ldrb	r0, [r0, #9]
    3bde:	4b01      	ldr	r3, [pc, #4]	; (3be4 <ssd1306_hard_reset+0xc>)
    3be0:	4798      	blx	r3
    3be2:	bd08      	pop	{r3, pc}
    3be4:	00003f05 	.word	0x00003f05

00003be8 <ssd1306_on>:

/**
 * \brief Turn the display display on
 */
void ssd1306_on(const struct display_ctrl_mono *const me)
{
    3be8:	b508      	push	{r3, lr}
	ssd1306_write_command(me, SSD1306_CMD_SET_DISPLAY_ON);
    3bea:	21af      	movs	r1, #175	; 0xaf
    3bec:	4b01      	ldr	r3, [pc, #4]	; (3bf4 <ssd1306_on+0xc>)
    3bee:	4798      	blx	r3
    3bf0:	bd08      	pop	{r3, pc}
    3bf2:	bf00      	nop
    3bf4:	00003b39 	.word	0x00003b39

00003bf8 <ssd1306_set_contrast>:

/**
 * \brief Set the display contrast level
 */
uint8_t ssd1306_set_contrast(const struct display_ctrl_mono *const me, const uint8_t contrast)
{
    3bf8:	b570      	push	{r4, r5, r6, lr}
    3bfa:	4606      	mov	r6, r0
    3bfc:	460c      	mov	r4, r1
	ssd1306_write_command(me, SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
    3bfe:	2181      	movs	r1, #129	; 0x81
    3c00:	4d03      	ldr	r5, [pc, #12]	; (3c10 <ssd1306_set_contrast+0x18>)
    3c02:	47a8      	blx	r5
	ssd1306_write_command(me, contrast);
    3c04:	4621      	mov	r1, r4
    3c06:	4630      	mov	r0, r6
    3c08:	47a8      	blx	r5

	return contrast;
}
    3c0a:	4620      	mov	r0, r4
    3c0c:	bd70      	pop	{r4, r5, r6, pc}
    3c0e:	bf00      	nop
    3c10:	00003b39 	.word	0x00003b39

00003c14 <ssd1306_construct>:
{
    3c14:	b570      	push	{r4, r5, r6, lr}
    3c16:	4604      	mov	r4, r0
    3c18:	4616      	mov	r6, r2
    3c1a:	461d      	mov	r5, r3
	display_ctrl_mono_construct(me, io, &ssd1306_interface);
    3c1c:	4a26      	ldr	r2, [pc, #152]	; (3cb8 <ssd1306_construct+0xa4>)
    3c1e:	4b27      	ldr	r3, [pc, #156]	; (3cbc <ssd1306_construct+0xa8>)
    3c20:	4798      	blx	r3
	ssd->pin_cs  = cs;
    3c22:	7226      	strb	r6, [r4, #8]
	ssd->pin_res = res;
    3c24:	7265      	strb	r5, [r4, #9]
	ssd->pin_dc  = dc;
    3c26:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3c2a:	72a3      	strb	r3, [r4, #10]
	ssd1306_hard_reset(me);
    3c2c:	4620      	mov	r0, r4
    3c2e:	4b24      	ldr	r3, [pc, #144]	; (3cc0 <ssd1306_construct+0xac>)
    3c30:	4798      	blx	r3
	ssd1306_write_command(me, SSD1306_CMD_SET_MULTIPLEX_RATIO);
    3c32:	21a8      	movs	r1, #168	; 0xa8
    3c34:	4620      	mov	r0, r4
    3c36:	4d23      	ldr	r5, [pc, #140]	; (3cc4 <ssd1306_construct+0xb0>)
    3c38:	47a8      	blx	r5
	ssd1306_write_command(me, 0x1F);
    3c3a:	211f      	movs	r1, #31
    3c3c:	4620      	mov	r0, r4
    3c3e:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_DISPLAY_OFFSET);
    3c40:	21d3      	movs	r1, #211	; 0xd3
    3c42:	4620      	mov	r0, r4
    3c44:	47a8      	blx	r5
	ssd1306_write_command(me, 0x00);
    3c46:	2100      	movs	r1, #0
    3c48:	4620      	mov	r0, r4
    3c4a:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_START_LINE(0x00));
    3c4c:	2140      	movs	r1, #64	; 0x40
    3c4e:	4620      	mov	r0, r4
    3c50:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
    3c52:	21a1      	movs	r1, #161	; 0xa1
    3c54:	4620      	mov	r0, r4
    3c56:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
    3c58:	21c8      	movs	r1, #200	; 0xc8
    3c5a:	4620      	mov	r0, r4
    3c5c:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_COM_PINS);
    3c5e:	21da      	movs	r1, #218	; 0xda
    3c60:	4620      	mov	r0, r4
    3c62:	47a8      	blx	r5
	ssd1306_write_command(me, 0x02);
    3c64:	2102      	movs	r1, #2
    3c66:	4620      	mov	r0, r4
    3c68:	47a8      	blx	r5
	ssd1306_set_contrast(me, 0x8F);
    3c6a:	218f      	movs	r1, #143	; 0x8f
    3c6c:	4620      	mov	r0, r4
    3c6e:	4b16      	ldr	r3, [pc, #88]	; (3cc8 <ssd1306_construct+0xb4>)
    3c70:	4798      	blx	r3
	ssd1306_write_command(me, SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
    3c72:	21a4      	movs	r1, #164	; 0xa4
    3c74:	4620      	mov	r0, r4
    3c76:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_NORMAL_DISPLAY);
    3c78:	21a6      	movs	r1, #166	; 0xa6
    3c7a:	4620      	mov	r0, r4
    3c7c:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
    3c7e:	21d5      	movs	r1, #213	; 0xd5
    3c80:	4620      	mov	r0, r4
    3c82:	47a8      	blx	r5
	ssd1306_write_command(me, 0x80);
    3c84:	2180      	movs	r1, #128	; 0x80
    3c86:	4620      	mov	r0, r4
    3c88:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
    3c8a:	218d      	movs	r1, #141	; 0x8d
    3c8c:	4620      	mov	r0, r4
    3c8e:	47a8      	blx	r5
	ssd1306_write_command(me, 0x14);
    3c90:	2114      	movs	r1, #20
    3c92:	4620      	mov	r0, r4
    3c94:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
    3c96:	21db      	movs	r1, #219	; 0xdb
    3c98:	4620      	mov	r0, r4
    3c9a:	47a8      	blx	r5
	ssd1306_write_command(me, 0x40);
    3c9c:	2140      	movs	r1, #64	; 0x40
    3c9e:	4620      	mov	r0, r4
    3ca0:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
    3ca2:	21d9      	movs	r1, #217	; 0xd9
    3ca4:	4620      	mov	r0, r4
    3ca6:	47a8      	blx	r5
	ssd1306_write_command(me, 0xF1);
    3ca8:	21f1      	movs	r1, #241	; 0xf1
    3caa:	4620      	mov	r0, r4
    3cac:	47a8      	blx	r5
	ssd1306_on(me);
    3cae:	4620      	mov	r0, r4
    3cb0:	4b06      	ldr	r3, [pc, #24]	; (3ccc <ssd1306_construct+0xb8>)
    3cb2:	4798      	blx	r3
}
    3cb4:	4620      	mov	r0, r4
    3cb6:	bd70      	pop	{r4, r5, r6, pc}
    3cb8:	2000007c 	.word	0x2000007c
    3cbc:	00003efd 	.word	0x00003efd
    3cc0:	00003bd9 	.word	0x00003bd9
    3cc4:	00003b39 	.word	0x00003b39
    3cc8:	00003bf9 	.word	0x00003bf9
    3ccc:	00003be9 	.word	0x00003be9

00003cd0 <gfx_mono_construct>:
/**
 * \brief Construct GFX mono
 */
struct gfx_mono *gfx_mono_construct(struct gfx_mono *const me, struct display_mono *const d)
{
	me->display = d;
    3cd0:	6001      	str	r1, [r0, #0]

	return me;
}
    3cd2:	4770      	bx	lr

00003cd4 <gfx_mono_text_construct>:
/**
 * \brief Construct GFX mono text
 */
struct gfx_mono_text *gfx_mono_text_construct(struct gfx_mono_text *const me, struct gfx_mono *const gfx)
{
	me->gfx = gfx;
    3cd4:	6001      	str	r1, [r0, #0]

	return me;
}
    3cd6:	4770      	bx	lr

00003cd8 <display_mono_construct>:
 * \brief Construct / initialize instance of abstract display
 */
struct display_mono *display_mono_construct(struct display_mono *const me, struct display_ctrl_mono *const dc,
                                            const gfx_coord_t width, const gfx_coord_t height,
                                            struct display_mono_interface *const interface)
{
    3cd8:	b410      	push	{r4}
	me->dc        = dc;
    3cda:	6001      	str	r1, [r0, #0]
	me->width     = width;
    3cdc:	7102      	strb	r2, [r0, #4]
	me->height    = height;
    3cde:	7143      	strb	r3, [r0, #5]
	me->interface = interface;
    3ce0:	9b01      	ldr	r3, [sp, #4]
    3ce2:	6083      	str	r3, [r0, #8]

	return me;
}
    3ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
    3ce8:	4770      	bx	lr

00003cea <display_mono_put_byte>:
/**
 * \brief Put a byte to the display controller RAM
 */
void display_mono_put_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                           const uint8_t data)
{
    3cea:	b570      	push	{r4, r5, r6, lr}
    3cec:	4604      	mov	r4, r0
    3cee:	4616      	mov	r6, r2
    3cf0:	461d      	mov	r5, r3
	me->dc->interface->set_page_address(me->dc, page);
    3cf2:	6800      	ldr	r0, [r0, #0]
    3cf4:	6843      	ldr	r3, [r0, #4]
    3cf6:	689b      	ldr	r3, [r3, #8]
    3cf8:	4798      	blx	r3
	me->dc->interface->set_column_address(me->dc, column);
    3cfa:	6820      	ldr	r0, [r4, #0]
    3cfc:	6843      	ldr	r3, [r0, #4]
    3cfe:	68db      	ldr	r3, [r3, #12]
    3d00:	4631      	mov	r1, r6
    3d02:	4798      	blx	r3
	me->dc->interface->write_data(me->dc, data);
    3d04:	6820      	ldr	r0, [r4, #0]
    3d06:	6843      	ldr	r3, [r0, #4]
    3d08:	681b      	ldr	r3, [r3, #0]
    3d0a:	4629      	mov	r1, r5
    3d0c:	4798      	blx	r3
    3d0e:	bd70      	pop	{r4, r5, r6, pc}

00003d10 <display_mono_mask_byte>:
/**
 * \brief Read/Modify/Write a byte on the display controller
 */
void display_mono_mask_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                            const enum gfx_mono_color pixel_mask, const enum gfx_mono_color color)
{
    3d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d14:	4604      	mov	r4, r0
    3d16:	460e      	mov	r6, r1
    3d18:	4617      	mov	r7, r2
    3d1a:	4698      	mov	r8, r3
    3d1c:	f89d 5018 	ldrb.w	r5, [sp, #24]
	uint8_t temp = me->interface->get_byte(me, page, column);
    3d20:	6883      	ldr	r3, [r0, #8]
    3d22:	681b      	ldr	r3, [r3, #0]
    3d24:	4798      	blx	r3
    3d26:	4603      	mov	r3, r0

	switch (color) {
    3d28:	2d01      	cmp	r5, #1
    3d2a:	d00a      	beq.n	3d42 <display_mono_mask_byte+0x32>
    3d2c:	b16d      	cbz	r5, 3d4a <display_mono_mask_byte+0x3a>
    3d2e:	2d02      	cmp	r5, #2
    3d30:	d00f      	beq.n	3d52 <display_mono_mask_byte+0x42>

	default:
		break;
	}

	me->interface->put_byte(me, page, column, temp);
    3d32:	68a2      	ldr	r2, [r4, #8]
    3d34:	6855      	ldr	r5, [r2, #4]
    3d36:	463a      	mov	r2, r7
    3d38:	4631      	mov	r1, r6
    3d3a:	4620      	mov	r0, r4
    3d3c:	47a8      	blx	r5
    3d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		temp |= (uint8_t)pixel_mask;
    3d42:	ea40 0308 	orr.w	r3, r0, r8
    3d46:	b2db      	uxtb	r3, r3
		break;
    3d48:	e7f3      	b.n	3d32 <display_mono_mask_byte+0x22>
		temp &= ~(uint8_t)pixel_mask;
    3d4a:	ea20 0308 	bic.w	r3, r0, r8
    3d4e:	b2db      	uxtb	r3, r3
		break;
    3d50:	e7ef      	b.n	3d32 <display_mono_mask_byte+0x22>
		temp ^= (uint8_t)pixel_mask;
    3d52:	ea80 0308 	eor.w	r3, r0, r8
    3d56:	b2db      	uxtb	r3, r3
		break;
    3d58:	e7eb      	b.n	3d32 <display_mono_mask_byte+0x22>

00003d5a <display_mono_draw_pixel>:
 * \brief Draw pixel to screen
 */
void display_mono_draw_pixel(const struct display_mono *const me, const gfx_coord_t x, const gfx_coord_t y,
                             const enum gfx_mono_color color, const gfx_coord_t width, const gfx_coord_t height,
                             const uint8_t pixels)
{
    3d5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > width - 1) || (y > height - 1)) {
    3d5e:	f89d 4020 	ldrb.w	r4, [sp, #32]
    3d62:	3c01      	subs	r4, #1
    3d64:	42a1      	cmp	r1, r4
    3d66:	dc04      	bgt.n	3d72 <display_mono_draw_pixel+0x18>
    3d68:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    3d6c:	3c01      	subs	r4, #1
    3d6e:	42a2      	cmp	r2, r4
    3d70:	dd01      	ble.n	3d76 <display_mono_draw_pixel+0x1c>
    3d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3d76:	461e      	mov	r6, r3
    3d78:	460c      	mov	r4, r1
    3d7a:	4607      	mov	r7, r0
		return;
	}

	page       = y / pixels;
    3d7c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    3d80:	fbb2 f5f5 	udiv	r5, r2, r5
	pixel_mask = (1 << (y - (page * 8)));
    3d84:	eba2 02c5 	sub.w	r2, r2, r5, lsl #3
    3d88:	2301      	movs	r3, #1
    3d8a:	fa03 f802 	lsl.w	r8, r3, r2
    3d8e:	fa5f f988 	uxtb.w	r9, r8
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = me->interface->get_byte(me, page, x);
    3d92:	6883      	ldr	r3, [r0, #8]
    3d94:	681b      	ldr	r3, [r3, #0]
    3d96:	460a      	mov	r2, r1
    3d98:	4629      	mov	r1, r5
    3d9a:	4798      	blx	r3
    3d9c:	4603      	mov	r3, r0

	switch (color) {
    3d9e:	2e01      	cmp	r6, #1
    3da0:	d009      	beq.n	3db6 <display_mono_draw_pixel+0x5c>
    3da2:	b166      	cbz	r6, 3dbe <display_mono_draw_pixel+0x64>
    3da4:	2e02      	cmp	r6, #2
    3da6:	d00e      	beq.n	3dc6 <display_mono_draw_pixel+0x6c>

	default:
		break;
	}

	me->interface->put_byte(me, page, x, pixel_value);
    3da8:	68ba      	ldr	r2, [r7, #8]
    3daa:	6856      	ldr	r6, [r2, #4]
    3dac:	4622      	mov	r2, r4
    3dae:	4629      	mov	r1, r5
    3db0:	4638      	mov	r0, r7
    3db2:	47b0      	blx	r6
    3db4:	e7dd      	b.n	3d72 <display_mono_draw_pixel+0x18>
		pixel_value |= pixel_mask;
    3db6:	ea49 0300 	orr.w	r3, r9, r0
    3dba:	b2db      	uxtb	r3, r3
		break;
    3dbc:	e7f4      	b.n	3da8 <display_mono_draw_pixel+0x4e>
		pixel_value &= ~pixel_mask;
    3dbe:	ea20 0308 	bic.w	r3, r0, r8
    3dc2:	b2db      	uxtb	r3, r3
		break;
    3dc4:	e7f0      	b.n	3da8 <display_mono_draw_pixel+0x4e>
		pixel_value ^= pixel_mask;
    3dc6:	ea89 0300 	eor.w	r3, r9, r0
    3dca:	b2db      	uxtb	r3, r3
		break;
    3dcc:	e7ec      	b.n	3da8 <display_mono_draw_pixel+0x4e>

00003dce <display_mono_put_page>:
/**
 * \brief Put a page from RAM to the display controller.
 */
void display_mono_put_page(const struct display_mono *const me, const enum gfx_mono_color *data, const gfx_coord_t page,
                           const gfx_coord_t page_offset, gfx_coord_t width)
{
    3dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3dd0:	4606      	mov	r6, r0
    3dd2:	460f      	mov	r7, r1
    3dd4:	461c      	mov	r4, r3
	me->dc->interface->set_page_address(me->dc, page);
    3dd6:	6800      	ldr	r0, [r0, #0]
    3dd8:	6843      	ldr	r3, [r0, #4]
    3dda:	689b      	ldr	r3, [r3, #8]
    3ddc:	4611      	mov	r1, r2
    3dde:	4798      	blx	r3
	me->dc->interface->set_column_address(me->dc, page_offset);
    3de0:	6830      	ldr	r0, [r6, #0]
    3de2:	6843      	ldr	r3, [r0, #4]
    3de4:	68db      	ldr	r3, [r3, #12]
    3de6:	4621      	mov	r1, r4
    3de8:	4798      	blx	r3
    3dea:	1e7c      	subs	r4, r7, #1
    3dec:	f89d 5018 	ldrb.w	r5, [sp, #24]
    3df0:	3d01      	subs	r5, #1
    3df2:	fa57 f585 	uxtab	r5, r7, r5

	do {
		me->dc->interface->write_data(me->dc, *data++);
    3df6:	6830      	ldr	r0, [r6, #0]
    3df8:	6843      	ldr	r3, [r0, #4]
    3dfa:	681b      	ldr	r3, [r3, #0]
    3dfc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    3e00:	4798      	blx	r3
	} while (--width);
    3e02:	42ac      	cmp	r4, r5
    3e04:	d1f7      	bne.n	3df6 <display_mono_put_page+0x28>
}
    3e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003e08 <display_mono_init>:

/**
 * \brief Initialize abstract display controller and abstract display.
 */
void display_mono_init(const struct display_mono *const me, const gfx_coord_t width, const uint8_t pages)
{
    3e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3e0c:	4605      	mov	r5, r0
    3e0e:	4688      	mov	r8, r1
    3e10:	4692      	mov	sl, r2
	uint8_t page = 0;

	if (me->dc) {
    3e12:	6800      	ldr	r0, [r0, #0]
    3e14:	b118      	cbz	r0, 3e1e <display_mono_init+0x16>
		me->dc->interface->set_start_line_address(me->dc, 0);
    3e16:	6843      	ldr	r3, [r0, #4]
    3e18:	691b      	ldr	r3, [r3, #16]
    3e1a:	2100      	movs	r1, #0
    3e1c:	4798      	blx	r3
	}
	for (; page < pages; page++) {
    3e1e:	f1ba 0f00 	cmp.w	sl, #0
    3e22:	d002      	beq.n	3e2a <display_mono_init+0x22>
    3e24:	2700      	movs	r7, #0
		uint8_t column = 0;

		for (; column < width; column++) {
    3e26:	46b9      	mov	r9, r7
    3e28:	e010      	b.n	3e4c <display_mono_init+0x44>
    3e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			me->interface->put_byte(me, page, column, 0x00);
    3e2e:	68ab      	ldr	r3, [r5, #8]
    3e30:	685e      	ldr	r6, [r3, #4]
    3e32:	464b      	mov	r3, r9
    3e34:	4622      	mov	r2, r4
    3e36:	4639      	mov	r1, r7
    3e38:	4628      	mov	r0, r5
    3e3a:	47b0      	blx	r6
		for (; column < width; column++) {
    3e3c:	3401      	adds	r4, #1
    3e3e:	b2e4      	uxtb	r4, r4
    3e40:	45a0      	cmp	r8, r4
    3e42:	d1f4      	bne.n	3e2e <display_mono_init+0x26>
	for (; page < pages; page++) {
    3e44:	3701      	adds	r7, #1
    3e46:	b2ff      	uxtb	r7, r7
    3e48:	45ba      	cmp	sl, r7
    3e4a:	d004      	beq.n	3e56 <display_mono_init+0x4e>
		for (; column < width; column++) {
    3e4c:	464c      	mov	r4, r9
    3e4e:	f1b8 0f00 	cmp.w	r8, #0
    3e52:	d1ec      	bne.n	3e2e <display_mono_init+0x26>
    3e54:	e7f6      	b.n	3e44 <display_mono_init+0x3c>
    3e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003e5a <framebuffer_put_page>:
/**
 * \brief Put a page from RAM to the buffer in RAM.
 */
void framebuffer_put_page(const struct display_mono *const me, const enum gfx_mono_color *const data,
                          const gfx_coord_t page, const gfx_coord_t page_offset, gfx_coord_t width)
{
    3e5a:	b410      	push	{r4}
	const struct framebuffer * disp           = (const struct framebuffer *)me;
	const enum gfx_mono_color *data_pt        = data;
	gfx_coord_t *              framebuffer_pt = disp->fbpointer + ((page * disp->parent.width) + page_offset);
    3e5c:	7904      	ldrb	r4, [r0, #4]
    3e5e:	fb02 3304 	mla	r3, r2, r4, r3
    3e62:	68c2      	ldr	r2, [r0, #12]
    3e64:	4413      	add	r3, r2
    3e66:	1e58      	subs	r0, r3, #1
    3e68:	f89d 2004 	ldrb.w	r2, [sp, #4]
    3e6c:	3a01      	subs	r2, #1
    3e6e:	fa53 f282 	uxtab	r2, r3, r2

	do {
		*framebuffer_pt++ = *data_pt++;
    3e72:	f811 3b01 	ldrb.w	r3, [r1], #1
    3e76:	f800 3f01 	strb.w	r3, [r0, #1]!
	} while (--width > 0);
    3e7a:	4290      	cmp	r0, r2
    3e7c:	d1f9      	bne.n	3e72 <framebuffer_put_page+0x18>
}
    3e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    3e82:	4770      	bx	lr

00003e84 <framebuffer_put_byte>:
/**
 * \brief Put a byte to the buffer in RAM
 */
void framebuffer_put_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                          const uint8_t data)
{
    3e84:	b410      	push	{r4}
	const struct framebuffer *disp = (const struct framebuffer *)me;

	*(disp->fbpointer + (page * disp->parent.width) + column) = data;
    3e86:	7904      	ldrb	r4, [r0, #4]
    3e88:	68c0      	ldr	r0, [r0, #12]
    3e8a:	fb01 0104 	mla	r1, r1, r4, r0
    3e8e:	548b      	strb	r3, [r1, r2]
}
    3e90:	f85d 4b04 	ldr.w	r4, [sp], #4
    3e94:	4770      	bx	lr

00003e96 <framebuffer_get_byte>:
 */
uint8_t framebuffer_get_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column)
{
	const struct framebuffer *disp = (const struct framebuffer *)me;

	return *(disp->fbpointer + (page * disp->parent.width) + column);
    3e96:	7903      	ldrb	r3, [r0, #4]
    3e98:	68c0      	ldr	r0, [r0, #12]
    3e9a:	fb01 0103 	mla	r1, r1, r3, r0
}
    3e9e:	5c88      	ldrb	r0, [r1, r2]
    3ea0:	4770      	bx	lr
	...

00003ea4 <framebuffer_draw_pixel>:
{
    3ea4:	b530      	push	{r4, r5, lr}
    3ea6:	b085      	sub	sp, #20
	display_mono_draw_pixel(&disp->parent, x, y, color, disp->parent.width, disp->parent.height, 8);
    3ea8:	2508      	movs	r5, #8
    3eaa:	9502      	str	r5, [sp, #8]
    3eac:	7945      	ldrb	r5, [r0, #5]
    3eae:	9501      	str	r5, [sp, #4]
    3eb0:	7904      	ldrb	r4, [r0, #4]
    3eb2:	9400      	str	r4, [sp, #0]
    3eb4:	4c01      	ldr	r4, [pc, #4]	; (3ebc <framebuffer_draw_pixel+0x18>)
    3eb6:	47a0      	blx	r4
}
    3eb8:	b005      	add	sp, #20
    3eba:	bd30      	pop	{r4, r5, pc}
    3ebc:	00003d5b 	.word	0x00003d5b

00003ec0 <framebuffer_mask_byte>:
/**
 * \brief Read/Modify/Write a byte on the buffer in RAM
 */
void framebuffer_mask_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                           const enum gfx_mono_color pixel_mask, const enum gfx_mono_color color)
{
    3ec0:	b510      	push	{r4, lr}
    3ec2:	b082      	sub	sp, #8
	const struct framebuffer *disp = (const struct framebuffer *)me;

	display_mono_mask_byte(&disp->parent, page, column, pixel_mask, color);
    3ec4:	f89d 4010 	ldrb.w	r4, [sp, #16]
    3ec8:	9400      	str	r4, [sp, #0]
    3eca:	4c02      	ldr	r4, [pc, #8]	; (3ed4 <framebuffer_mask_byte+0x14>)
    3ecc:	47a0      	blx	r4
}
    3ece:	b002      	add	sp, #8
    3ed0:	bd10      	pop	{r4, pc}
    3ed2:	bf00      	nop
    3ed4:	00003d11 	.word	0x00003d11

00003ed8 <framebuffer_construct>:
{
    3ed8:	b570      	push	{r4, r5, r6, lr}
    3eda:	b082      	sub	sp, #8
    3edc:	4604      	mov	r4, r0
    3ede:	460d      	mov	r5, r1
	display_mono_construct(&display->parent, NULL, width, height, &framebuffer_interface);
    3ee0:	4904      	ldr	r1, [pc, #16]	; (3ef4 <framebuffer_construct+0x1c>)
    3ee2:	9100      	str	r1, [sp, #0]
    3ee4:	2100      	movs	r1, #0
    3ee6:	4e04      	ldr	r6, [pc, #16]	; (3ef8 <framebuffer_construct+0x20>)
    3ee8:	47b0      	blx	r6
	display->fbpointer = framebuffer;
    3eea:	60e5      	str	r5, [r4, #12]
}
    3eec:	4620      	mov	r0, r4
    3eee:	b002      	add	sp, #8
    3ef0:	bd70      	pop	{r4, r5, r6, pc}
    3ef2:	bf00      	nop
    3ef4:	20000090 	.word	0x20000090
    3ef8:	00003cd9 	.word	0x00003cd9

00003efc <display_ctrl_mono_construct>:
 */
struct display_ctrl_mono *display_ctrl_mono_construct(struct display_ctrl_mono *const           me,
                                                      struct io_descriptor *const               io,
                                                      struct display_ctrl_mono_interface *const interface)
{
	me->io        = io;
    3efc:	6001      	str	r1, [r0, #0]
	me->interface = interface;
    3efe:	6042      	str	r2, [r0, #4]

	return me;
}
    3f00:	4770      	bx	lr
	...

00003f04 <display_ctrl_mono_hard_reset>:

/**
 * \brief Perform the hard reset of display controller
 */
void display_ctrl_mono_hard_reset(const uint8_t pin, const uint32_t delay)
{
    3f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f06:	f000 031f 	and.w	r3, r0, #31
    3f0a:	2501      	movs	r5, #1
    3f0c:	409d      	lsls	r5, r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3f0e:	0944      	lsrs	r4, r0, #5
    3f10:	01e4      	lsls	r4, r4, #7
    3f12:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    3f16:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
    3f1a:	6165      	str	r5, [r4, #20]
	gpio_set_pin_level(pin, false);
	delay_us(delay);
    3f1c:	b28f      	uxth	r7, r1
    3f1e:	4638      	mov	r0, r7
    3f20:	4e02      	ldr	r6, [pc, #8]	; (3f2c <display_ctrl_mono_hard_reset+0x28>)
    3f22:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3f24:	61a5      	str	r5, [r4, #24]
	gpio_set_pin_level(pin, true);
	delay_us(delay);
    3f26:	4638      	mov	r0, r7
    3f28:	47b0      	blx	r6
    3f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f2c:	00000b45 	.word	0x00000b45

00003f30 <__libc_init_array>:
    3f30:	b570      	push	{r4, r5, r6, lr}
    3f32:	4e0f      	ldr	r6, [pc, #60]	; (3f70 <__libc_init_array+0x40>)
    3f34:	4d0f      	ldr	r5, [pc, #60]	; (3f74 <__libc_init_array+0x44>)
    3f36:	1b76      	subs	r6, r6, r5
    3f38:	10b6      	asrs	r6, r6, #2
    3f3a:	bf18      	it	ne
    3f3c:	2400      	movne	r4, #0
    3f3e:	d005      	beq.n	3f4c <__libc_init_array+0x1c>
    3f40:	3401      	adds	r4, #1
    3f42:	f855 3b04 	ldr.w	r3, [r5], #4
    3f46:	4798      	blx	r3
    3f48:	42a6      	cmp	r6, r4
    3f4a:	d1f9      	bne.n	3f40 <__libc_init_array+0x10>
    3f4c:	4e0a      	ldr	r6, [pc, #40]	; (3f78 <__libc_init_array+0x48>)
    3f4e:	4d0b      	ldr	r5, [pc, #44]	; (3f7c <__libc_init_array+0x4c>)
    3f50:	1b76      	subs	r6, r6, r5
    3f52:	f000 faab 	bl	44ac <_init>
    3f56:	10b6      	asrs	r6, r6, #2
    3f58:	bf18      	it	ne
    3f5a:	2400      	movne	r4, #0
    3f5c:	d006      	beq.n	3f6c <__libc_init_array+0x3c>
    3f5e:	3401      	adds	r4, #1
    3f60:	f855 3b04 	ldr.w	r3, [r5], #4
    3f64:	4798      	blx	r3
    3f66:	42a6      	cmp	r6, r4
    3f68:	d1f9      	bne.n	3f5e <__libc_init_array+0x2e>
    3f6a:	bd70      	pop	{r4, r5, r6, pc}
    3f6c:	bd70      	pop	{r4, r5, r6, pc}
    3f6e:	bf00      	nop
    3f70:	000044b8 	.word	0x000044b8
    3f74:	000044b8 	.word	0x000044b8
    3f78:	000044c0 	.word	0x000044c0
    3f7c:	000044b8 	.word	0x000044b8

00003f80 <memcpy>:
    3f80:	4684      	mov	ip, r0
    3f82:	ea41 0300 	orr.w	r3, r1, r0
    3f86:	f013 0303 	ands.w	r3, r3, #3
    3f8a:	d16d      	bne.n	4068 <memcpy+0xe8>
    3f8c:	3a40      	subs	r2, #64	; 0x40
    3f8e:	d341      	bcc.n	4014 <memcpy+0x94>
    3f90:	f851 3b04 	ldr.w	r3, [r1], #4
    3f94:	f840 3b04 	str.w	r3, [r0], #4
    3f98:	f851 3b04 	ldr.w	r3, [r1], #4
    3f9c:	f840 3b04 	str.w	r3, [r0], #4
    3fa0:	f851 3b04 	ldr.w	r3, [r1], #4
    3fa4:	f840 3b04 	str.w	r3, [r0], #4
    3fa8:	f851 3b04 	ldr.w	r3, [r1], #4
    3fac:	f840 3b04 	str.w	r3, [r0], #4
    3fb0:	f851 3b04 	ldr.w	r3, [r1], #4
    3fb4:	f840 3b04 	str.w	r3, [r0], #4
    3fb8:	f851 3b04 	ldr.w	r3, [r1], #4
    3fbc:	f840 3b04 	str.w	r3, [r0], #4
    3fc0:	f851 3b04 	ldr.w	r3, [r1], #4
    3fc4:	f840 3b04 	str.w	r3, [r0], #4
    3fc8:	f851 3b04 	ldr.w	r3, [r1], #4
    3fcc:	f840 3b04 	str.w	r3, [r0], #4
    3fd0:	f851 3b04 	ldr.w	r3, [r1], #4
    3fd4:	f840 3b04 	str.w	r3, [r0], #4
    3fd8:	f851 3b04 	ldr.w	r3, [r1], #4
    3fdc:	f840 3b04 	str.w	r3, [r0], #4
    3fe0:	f851 3b04 	ldr.w	r3, [r1], #4
    3fe4:	f840 3b04 	str.w	r3, [r0], #4
    3fe8:	f851 3b04 	ldr.w	r3, [r1], #4
    3fec:	f840 3b04 	str.w	r3, [r0], #4
    3ff0:	f851 3b04 	ldr.w	r3, [r1], #4
    3ff4:	f840 3b04 	str.w	r3, [r0], #4
    3ff8:	f851 3b04 	ldr.w	r3, [r1], #4
    3ffc:	f840 3b04 	str.w	r3, [r0], #4
    4000:	f851 3b04 	ldr.w	r3, [r1], #4
    4004:	f840 3b04 	str.w	r3, [r0], #4
    4008:	f851 3b04 	ldr.w	r3, [r1], #4
    400c:	f840 3b04 	str.w	r3, [r0], #4
    4010:	3a40      	subs	r2, #64	; 0x40
    4012:	d2bd      	bcs.n	3f90 <memcpy+0x10>
    4014:	3230      	adds	r2, #48	; 0x30
    4016:	d311      	bcc.n	403c <memcpy+0xbc>
    4018:	f851 3b04 	ldr.w	r3, [r1], #4
    401c:	f840 3b04 	str.w	r3, [r0], #4
    4020:	f851 3b04 	ldr.w	r3, [r1], #4
    4024:	f840 3b04 	str.w	r3, [r0], #4
    4028:	f851 3b04 	ldr.w	r3, [r1], #4
    402c:	f840 3b04 	str.w	r3, [r0], #4
    4030:	f851 3b04 	ldr.w	r3, [r1], #4
    4034:	f840 3b04 	str.w	r3, [r0], #4
    4038:	3a10      	subs	r2, #16
    403a:	d2ed      	bcs.n	4018 <memcpy+0x98>
    403c:	320c      	adds	r2, #12
    403e:	d305      	bcc.n	404c <memcpy+0xcc>
    4040:	f851 3b04 	ldr.w	r3, [r1], #4
    4044:	f840 3b04 	str.w	r3, [r0], #4
    4048:	3a04      	subs	r2, #4
    404a:	d2f9      	bcs.n	4040 <memcpy+0xc0>
    404c:	3204      	adds	r2, #4
    404e:	d008      	beq.n	4062 <memcpy+0xe2>
    4050:	07d2      	lsls	r2, r2, #31
    4052:	bf1c      	itt	ne
    4054:	f811 3b01 	ldrbne.w	r3, [r1], #1
    4058:	f800 3b01 	strbne.w	r3, [r0], #1
    405c:	d301      	bcc.n	4062 <memcpy+0xe2>
    405e:	880b      	ldrh	r3, [r1, #0]
    4060:	8003      	strh	r3, [r0, #0]
    4062:	4660      	mov	r0, ip
    4064:	4770      	bx	lr
    4066:	bf00      	nop
    4068:	2a08      	cmp	r2, #8
    406a:	d313      	bcc.n	4094 <memcpy+0x114>
    406c:	078b      	lsls	r3, r1, #30
    406e:	d08d      	beq.n	3f8c <memcpy+0xc>
    4070:	f010 0303 	ands.w	r3, r0, #3
    4074:	d08a      	beq.n	3f8c <memcpy+0xc>
    4076:	f1c3 0304 	rsb	r3, r3, #4
    407a:	1ad2      	subs	r2, r2, r3
    407c:	07db      	lsls	r3, r3, #31
    407e:	bf1c      	itt	ne
    4080:	f811 3b01 	ldrbne.w	r3, [r1], #1
    4084:	f800 3b01 	strbne.w	r3, [r0], #1
    4088:	d380      	bcc.n	3f8c <memcpy+0xc>
    408a:	f831 3b02 	ldrh.w	r3, [r1], #2
    408e:	f820 3b02 	strh.w	r3, [r0], #2
    4092:	e77b      	b.n	3f8c <memcpy+0xc>
    4094:	3a04      	subs	r2, #4
    4096:	d3d9      	bcc.n	404c <memcpy+0xcc>
    4098:	3a01      	subs	r2, #1
    409a:	f811 3b01 	ldrb.w	r3, [r1], #1
    409e:	f800 3b01 	strb.w	r3, [r0], #1
    40a2:	d2f9      	bcs.n	4098 <memcpy+0x118>
    40a4:	780b      	ldrb	r3, [r1, #0]
    40a6:	7003      	strb	r3, [r0, #0]
    40a8:	784b      	ldrb	r3, [r1, #1]
    40aa:	7043      	strb	r3, [r0, #1]
    40ac:	788b      	ldrb	r3, [r1, #2]
    40ae:	7083      	strb	r3, [r0, #2]
    40b0:	4660      	mov	r0, ip
    40b2:	4770      	bx	lr

000040b4 <memset>:
    40b4:	b470      	push	{r4, r5, r6}
    40b6:	0786      	lsls	r6, r0, #30
    40b8:	d046      	beq.n	4148 <memset+0x94>
    40ba:	1e54      	subs	r4, r2, #1
    40bc:	2a00      	cmp	r2, #0
    40be:	d041      	beq.n	4144 <memset+0x90>
    40c0:	b2ca      	uxtb	r2, r1
    40c2:	4603      	mov	r3, r0
    40c4:	e002      	b.n	40cc <memset+0x18>
    40c6:	f114 34ff 	adds.w	r4, r4, #4294967295
    40ca:	d33b      	bcc.n	4144 <memset+0x90>
    40cc:	f803 2b01 	strb.w	r2, [r3], #1
    40d0:	079d      	lsls	r5, r3, #30
    40d2:	d1f8      	bne.n	40c6 <memset+0x12>
    40d4:	2c03      	cmp	r4, #3
    40d6:	d92e      	bls.n	4136 <memset+0x82>
    40d8:	b2cd      	uxtb	r5, r1
    40da:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    40de:	2c0f      	cmp	r4, #15
    40e0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    40e4:	d919      	bls.n	411a <memset+0x66>
    40e6:	f103 0210 	add.w	r2, r3, #16
    40ea:	4626      	mov	r6, r4
    40ec:	3e10      	subs	r6, #16
    40ee:	2e0f      	cmp	r6, #15
    40f0:	f842 5c10 	str.w	r5, [r2, #-16]
    40f4:	f842 5c0c 	str.w	r5, [r2, #-12]
    40f8:	f842 5c08 	str.w	r5, [r2, #-8]
    40fc:	f842 5c04 	str.w	r5, [r2, #-4]
    4100:	f102 0210 	add.w	r2, r2, #16
    4104:	d8f2      	bhi.n	40ec <memset+0x38>
    4106:	f1a4 0210 	sub.w	r2, r4, #16
    410a:	f022 020f 	bic.w	r2, r2, #15
    410e:	f004 040f 	and.w	r4, r4, #15
    4112:	3210      	adds	r2, #16
    4114:	2c03      	cmp	r4, #3
    4116:	4413      	add	r3, r2
    4118:	d90d      	bls.n	4136 <memset+0x82>
    411a:	461e      	mov	r6, r3
    411c:	4622      	mov	r2, r4
    411e:	3a04      	subs	r2, #4
    4120:	2a03      	cmp	r2, #3
    4122:	f846 5b04 	str.w	r5, [r6], #4
    4126:	d8fa      	bhi.n	411e <memset+0x6a>
    4128:	1f22      	subs	r2, r4, #4
    412a:	f022 0203 	bic.w	r2, r2, #3
    412e:	3204      	adds	r2, #4
    4130:	4413      	add	r3, r2
    4132:	f004 0403 	and.w	r4, r4, #3
    4136:	b12c      	cbz	r4, 4144 <memset+0x90>
    4138:	b2c9      	uxtb	r1, r1
    413a:	441c      	add	r4, r3
    413c:	f803 1b01 	strb.w	r1, [r3], #1
    4140:	429c      	cmp	r4, r3
    4142:	d1fb      	bne.n	413c <memset+0x88>
    4144:	bc70      	pop	{r4, r5, r6}
    4146:	4770      	bx	lr
    4148:	4614      	mov	r4, r2
    414a:	4603      	mov	r3, r0
    414c:	e7c2      	b.n	40d4 <memset+0x20>
    414e:	bf00      	nop

00004150 <register_fini>:
    4150:	4b02      	ldr	r3, [pc, #8]	; (415c <register_fini+0xc>)
    4152:	b113      	cbz	r3, 415a <register_fini+0xa>
    4154:	4802      	ldr	r0, [pc, #8]	; (4160 <register_fini+0x10>)
    4156:	f000 b805 	b.w	4164 <atexit>
    415a:	4770      	bx	lr
    415c:	00000000 	.word	0x00000000
    4160:	00004171 	.word	0x00004171

00004164 <atexit>:
    4164:	2300      	movs	r3, #0
    4166:	4601      	mov	r1, r0
    4168:	461a      	mov	r2, r3
    416a:	4618      	mov	r0, r3
    416c:	f000 b81e 	b.w	41ac <__register_exitproc>

00004170 <__libc_fini_array>:
    4170:	b538      	push	{r3, r4, r5, lr}
    4172:	4c0a      	ldr	r4, [pc, #40]	; (419c <__libc_fini_array+0x2c>)
    4174:	4d0a      	ldr	r5, [pc, #40]	; (41a0 <__libc_fini_array+0x30>)
    4176:	1b64      	subs	r4, r4, r5
    4178:	10a4      	asrs	r4, r4, #2
    417a:	d00a      	beq.n	4192 <__libc_fini_array+0x22>
    417c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    4180:	3b01      	subs	r3, #1
    4182:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4186:	3c01      	subs	r4, #1
    4188:	f855 3904 	ldr.w	r3, [r5], #-4
    418c:	4798      	blx	r3
    418e:	2c00      	cmp	r4, #0
    4190:	d1f9      	bne.n	4186 <__libc_fini_array+0x16>
    4192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4196:	f000 b993 	b.w	44c0 <_fini>
    419a:	bf00      	nop
    419c:	000044d0 	.word	0x000044d0
    41a0:	000044cc 	.word	0x000044cc

000041a4 <__retarget_lock_acquire_recursive>:
    41a4:	4770      	bx	lr
    41a6:	bf00      	nop

000041a8 <__retarget_lock_release_recursive>:
    41a8:	4770      	bx	lr
    41aa:	bf00      	nop

000041ac <__register_exitproc>:
    41ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    41b0:	4d2c      	ldr	r5, [pc, #176]	; (4264 <__register_exitproc+0xb8>)
    41b2:	4606      	mov	r6, r0
    41b4:	6828      	ldr	r0, [r5, #0]
    41b6:	4698      	mov	r8, r3
    41b8:	460f      	mov	r7, r1
    41ba:	4691      	mov	r9, r2
    41bc:	f7ff fff2 	bl	41a4 <__retarget_lock_acquire_recursive>
    41c0:	4b29      	ldr	r3, [pc, #164]	; (4268 <__register_exitproc+0xbc>)
    41c2:	681c      	ldr	r4, [r3, #0]
    41c4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    41c8:	2b00      	cmp	r3, #0
    41ca:	d03e      	beq.n	424a <__register_exitproc+0x9e>
    41cc:	685a      	ldr	r2, [r3, #4]
    41ce:	2a1f      	cmp	r2, #31
    41d0:	dc1c      	bgt.n	420c <__register_exitproc+0x60>
    41d2:	f102 0e01 	add.w	lr, r2, #1
    41d6:	b176      	cbz	r6, 41f6 <__register_exitproc+0x4a>
    41d8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    41dc:	2401      	movs	r4, #1
    41de:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    41e2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    41e6:	4094      	lsls	r4, r2
    41e8:	4320      	orrs	r0, r4
    41ea:	2e02      	cmp	r6, #2
    41ec:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    41f0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    41f4:	d023      	beq.n	423e <__register_exitproc+0x92>
    41f6:	3202      	adds	r2, #2
    41f8:	f8c3 e004 	str.w	lr, [r3, #4]
    41fc:	6828      	ldr	r0, [r5, #0]
    41fe:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    4202:	f7ff ffd1 	bl	41a8 <__retarget_lock_release_recursive>
    4206:	2000      	movs	r0, #0
    4208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    420c:	4b17      	ldr	r3, [pc, #92]	; (426c <__register_exitproc+0xc0>)
    420e:	b30b      	cbz	r3, 4254 <__register_exitproc+0xa8>
    4210:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4214:	f3af 8000 	nop.w
    4218:	4603      	mov	r3, r0
    421a:	b1d8      	cbz	r0, 4254 <__register_exitproc+0xa8>
    421c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    4220:	6002      	str	r2, [r0, #0]
    4222:	2100      	movs	r1, #0
    4224:	6041      	str	r1, [r0, #4]
    4226:	460a      	mov	r2, r1
    4228:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    422c:	f04f 0e01 	mov.w	lr, #1
    4230:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    4234:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    4238:	2e00      	cmp	r6, #0
    423a:	d0dc      	beq.n	41f6 <__register_exitproc+0x4a>
    423c:	e7cc      	b.n	41d8 <__register_exitproc+0x2c>
    423e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    4242:	430c      	orrs	r4, r1
    4244:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    4248:	e7d5      	b.n	41f6 <__register_exitproc+0x4a>
    424a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    424e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    4252:	e7bb      	b.n	41cc <__register_exitproc+0x20>
    4254:	6828      	ldr	r0, [r5, #0]
    4256:	f7ff ffa7 	bl	41a8 <__retarget_lock_release_recursive>
    425a:	f04f 30ff 	mov.w	r0, #4294967295
    425e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4262:	bf00      	nop
    4264:	200004d0 	.word	0x200004d0
    4268:	000044a8 	.word	0x000044a8
    426c:	00000000 	.word	0x00000000
    4270:	682f2e2e 	.word	0x682f2e2e
    4274:	732f6c61 	.word	0x732f6c61
    4278:	682f6372 	.word	0x682f6372
    427c:	695f6c61 	.word	0x695f6c61
    4280:	00632e6f 	.word	0x00632e6f
    4284:	682f2e2e 	.word	0x682f2e2e
    4288:	732f6c61 	.word	0x732f6c61
    428c:	682f6372 	.word	0x682f6372
    4290:	735f6c61 	.word	0x735f6c61
    4294:	6d5f6970 	.word	0x6d5f6970
    4298:	6e79735f 	.word	0x6e79735f
    429c:	00632e63 	.word	0x00632e63
    42a0:	682f2e2e 	.word	0x682f2e2e
    42a4:	732f6c61 	.word	0x732f6c61
    42a8:	682f6372 	.word	0x682f6372
    42ac:	745f6c61 	.word	0x745f6c61
    42b0:	72656d69 	.word	0x72656d69
    42b4:	0000632e 	.word	0x0000632e
    42b8:	682f2e2e 	.word	0x682f2e2e
    42bc:	752f6c61 	.word	0x752f6c61
    42c0:	736c6974 	.word	0x736c6974
    42c4:	6372732f 	.word	0x6372732f
    42c8:	6974752f 	.word	0x6974752f
    42cc:	6c5f736c 	.word	0x6c5f736c
    42d0:	2e747369 	.word	0x2e747369
    42d4:	00000063 	.word	0x00000063

000042d8 <user_mux_confs>:
    42d8:	00000100 00000000 00000000 00000000     ................
	...

0000431c <channel_confs>:
    431c:	0000060c 00000000 00000000 00000000     ................
	...

0000435c <interrupt_cfg>:
	...
    43dc:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    43ec:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    43fc:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    440c:	43000800 43000c00                       ...C...C

00004414 <_i2cms>:
	...

0000442c <sercomspi_regs>:
    442c:	0020000c 00020000 00000000 01ff0077     .. .........w...
    443c:	30008c04 02000000 00000000 ff007700     ...0.........w..
    444c:	00000601 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    445c:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

0000446c <_usb_ep_cfgs>:
    446c:	20000724 00000000 00000040 200006e4     $.. ....@...... 
    447c:	00000000 00000040 200006a4 00000000     ....@...... ....
    448c:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    449c:	73752f65 2e636462 00000063              e/usbdc.c...

000044a8 <_global_impure_ptr>:
    44a8:	200000a8                                ... 

000044ac <_init>:
    44ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44ae:	bf00      	nop
    44b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    44b2:	bc08      	pop	{r3}
    44b4:	469e      	mov	lr, r3
    44b6:	4770      	bx	lr

000044b8 <__init_array_start>:
    44b8:	00004151 	.word	0x00004151

000044bc <__frame_dummy_init_array_entry>:
    44bc:	00000289                                ....

000044c0 <_fini>:
    44c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44c2:	bf00      	nop
    44c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    44c6:	bc08      	pop	{r3}
    44c8:	469e      	mov	lr, r3
    44ca:	4770      	bx	lr

000044cc <__fini_array_start>:
    44cc:	00000265 	.word	0x00000265
